With timestamps:

00:00 - hi guys so today we are going to be
00:02 - making a linear regression model
00:05 - and what a linear regression model is
00:08 - it's to attempt to model the
00:10 - relationship
00:12 - between these variables like x and y by
00:16 - creating a linear equation
00:19 - and it can also be used to predict like
00:22 - future values and
00:25 - so i'm using google collab and
00:28 - google collab is a notebook where you
00:31 - can write python code
00:32 - and all you need is a gmail account
00:36 - so feel free to follow a lot
00:40 - and but ideally you can use any
00:43 - application you want
00:45 - like jupiter um notebook
00:49 - uh maybe even ripple and so the first
00:52 - thing we need to do
00:54 - is import our
00:57 - libraries all right so
01:00 - first i'm going to import
01:05 - um numpy because we learned
01:10 - numpy in our last session i'm gonna
01:12 - continue
01:13 - using that and we also
01:16 - need matplotlib specifically
01:20 - the python plot
01:25 - and so i'm we're going to refer to
01:30 - matpotlib.pyplot just
01:31 - as plt to make it shorter let us
01:36 - and we also to create a
01:40 - linear regression we're going to borrow
01:43 - this
01:43 - from another library called sklear
01:48 - and we're going to use linear model
01:52 - and we're going to import linear
01:55 - regression okay
01:59 - and so the next thing we need is our
02:02 - data set all right our data and so i
02:05 - just made up some
02:07 - data values right here
02:10 - but um usually you like
02:14 - you know what data you're gonna use so
02:17 - um we're going to basically we want to
02:21 - create two
02:22 - arrays one array to hold
02:26 - all the x values which is time
02:29 - and the other array to hold all the
02:33 - y values which is
02:36 - a tray height okay
02:40 - so to do that we can do x is equal to
02:44 - and to create an array we just do np
02:48 - dot array and in
02:51 - here um i'm just going to
02:55 - copy and paste
02:58 - these values in here and you want to
03:01 - separate the
03:02 - values like commas
03:06 - just do that
03:14 - this might take a while
03:26 - okay and then we want
03:29 - to create an array for all our y
03:32 - values
03:36 - copy paste
03:50 - okay you can spend time formatting and
03:52 - making it nice but
03:55 - it's just as long as it works that's
03:57 - what i mean
03:58 - okay so here we can actually
04:01 - plot plot the values if you want
04:06 - so we do plt dot plot
04:09 - and we're plotting x and
04:12 - y and we're making a scatter plot
04:15 - and so first of all if you plot it
04:19 - it gives us the graph but it's like
04:23 - a line and i want it to be scattered
04:26 - so i add another parameter
04:29 - it's like
04:32 - see now it's the scatter plot
04:36 - okay so it looks like
04:39 - we have somewhat
04:43 - of a line right but we want to find out
04:45 - what the
04:46 - equation of the line
04:49 - really is so
04:52 - this is where linear regression comes
04:55 - into play
04:56 - so i'm going to create a variable
04:59 - and i'm just going to set it equal to
05:02 - their
05:03 - regression so it's easier on us
05:08 - now if we try to fit it
05:13 - fit the values with a line
05:17 - let's try running
05:21 - all our cells
05:25 - and it gives us the error
05:27 - [Music]
05:29 - and basically the reason why
05:32 - is so
05:35 - this x array is something that's called
05:39 - a 1d array basically it
05:43 - we can see it
05:47 - we can do x dot shape
05:51 - and so basically it's just um
05:54 - one column
05:59 - for one yeah one row and one column
06:04 - but for linear regression it's expecting
06:06 - a 2d
06:08 - array and so 2ds and we want to combine
06:12 - this x array and
06:15 - the y array together
06:20 - so to do that we can do something that's
06:23 - called
06:26 - we can set the x variable to
06:30 - x dot reshape and in here we're gonna
06:33 - put
06:34 - negative one comma one
06:40 - so what this does is the
06:44 - one is one just means
06:48 - we're going to add another column
06:52 - right here like right after this comma
06:55 - and negative 1 means
06:58 - [Music]
06:59 - means that the elements are going to
07:03 - remain as they are
07:06 - basically there's gonna be like
07:09 - no shifting so if we
07:14 - run this now
07:18 - it shows us um
07:22 - we have like two columns two shapes
07:30 - yeah okay
07:34 - so now if we do
07:38 - a red dot why
07:44 - it works it doesn't give us an air
07:47 - anymore
07:53 - and so in linear regression
07:57 - also predicts future
08:00 - values right so we can
08:03 - create a variable called
08:07 - y predictions
08:10 - and we want to predict
08:15 - the y values
08:20 - rate um
08:24 - from like the x
08:32 - like that basically like as time goes on
08:36 - or as
08:37 - x increases we want to
08:40 - predict the correspondent
08:43 - y values right and so
08:47 - now we can
08:54 - the uh we can plot the
08:59 - like points and this time
09:02 - we can do plt dot scatter but you can
09:05 - also do it this way
09:07 - as well i'm just gonna show you
09:09 - different ways how to graph it
09:12 - and then we can plot
09:15 - x values the predicted values
09:20 - and we can also set the color so we
09:23 - could do
09:24 - colors equal to oh no
09:34 - blue
09:36 - so you can see
09:40 - that it plot
09:44 - our line and
09:48 - yay so last thing we need to do
09:51 - is um
09:54 - let's say we want to find the equation
09:58 - of the line
10:02 - right so find the equation
10:07 - where y is equal to mx plus
10:10 - b and so m
10:13 - is our linear coefficient
10:16 - right there right now
10:22 - that stands for coefficient and b
10:25 - is our um y
10:30 - intercept so
10:35 - this and so you can print out the
10:39 - equation of a line by doing
10:43 - y is equal to now remember
10:46 - um m is
10:49 - in
10:54 - a number integer and y is a string
10:59 - so we want to format it so one way to do
11:01 - that is we can do
11:03 - this
11:07 - brackets dot format
11:11 - and here we put m
11:14 - because m corresponds to the first
11:17 - bracket right here
11:19 - b is the second bracket right here
11:24 - and so when i run it it gives us the
11:26 - equation of the line
11:31 - hello everyone today we're going to have
11:34 - our second session of data analysis on
11:37 - scientific research
11:39 - today we're going to do two demo on
11:42 - creating
11:42 - a histogram and creating a scatter plot
11:45 - respectively
11:47 - so let's first start with creating a
11:50 - scatter plot
11:51 - and the problem is to compare the
11:53 - sorting data with silicon dioxide data
11:56 - on the associations between your
11:58 - wavelength and index of refraction
12:01 - which we use and to represent and before
12:05 - let's start all the steps let's first
12:07 - have a brief review on the things that
12:09 - we
12:10 - learned for the last session so
12:13 - remember the first step that we're going
12:15 - to take is called data preprocessing
12:18 - in which we deal with innocent data and
12:20 - the noisy data
12:22 - then if we want to compare more than one
12:25 - data sources and figure out that their
12:27 - unit systems are not the same
12:29 - then we're going to use the small steps
12:31 - called normalization in the data
12:33 - preprocessing
12:35 - and after we finish data preprocessing
12:38 - we're going to start importing our data
12:41 - and i use these two python lines to
12:44 - import my data
12:46 - remember the difference between them the
12:48 - first line
12:49 - is to read the data digit by digit
12:53 - and the second one is to read data by
12:55 - data
12:56 - so we get zero as the first um
13:00 - data for the pi first python lines and
13:03 - we got 0.471 for the second python lines
13:10 - after we successfully import the data we
13:13 - need to
13:14 - use list or arraylist to store
13:17 - our data and eventually plotting our
13:21 - data
13:21 - requires some python plotting lines
13:25 - like those showing this ppt so i put
13:28 - up two most common graphs that we use
13:32 - the histogram and the scatterplot which
13:35 - is which are
13:36 - also what we're going to plot today and
13:38 - this process
13:39 - is called data visualization
13:44 - and we'll start tackling this problems
13:48 - by starting with the first step data
13:50 - preprocessing
13:53 - so if opening our file the silicon file
13:59 - and also the silicon dock file
14:08 - we can figure out that there are two
14:11 - problems
14:12 - between the data file the first is that
14:15 - the data
14:16 - number of data in a silicon file is
14:19 - more than that of the silicon dioxide
14:22 - file
14:23 - and what we need to do is we need to
14:26 - first delete
14:27 - the data with the wavelength that is
14:30 - larger than 350 nanometers
14:36 - okay and the second problem is that the
14:40 - data does not match with e do not match
14:42 - with each other
14:43 - we have 300 and 300 for the first data
14:47 - but we have 310 and
14:52 - 302.4 for
14:55 - the second data which does not do not
14:57 - match which is
14:58 - each other so we're what we're going to
15:00 - do is we're going to delete 302 to 308
15:05 - to make sure that our second data match
15:09 - and we're going to repeat this process
15:12 - for the following data
15:14 - and we'll eventually gain a new data
15:17 - file for
15:18 - our silicon so i have already done it
15:23 - silicon number two file
15:26 - and let's see so now we have
15:29 - a silicon file that matches with the
15:32 - silicon dioxide
15:33 - file with six number six data
15:37 - in total and each data match with
15:41 - the other 300 300 310 310
15:45 - 319 and 312. so there's
15:49 - a little um a small discrepancy right
15:52 - here
15:52 - we can just ignore the difference
15:54 - because
15:55 - it does not matter much and after we're
15:59 - finishing dealing with our
16:02 - data pre-processing steps let's open our
16:05 - python ide and start import our data
16:10 - oops oh remember before we
16:13 - import our data there's another really
16:16 - important step that we should take
16:18 - remember our task is to plot on
16:21 - the graph and we need to have something
16:25 - imported so that we can plot our graph
16:29 - it is the math.lib right not
16:33 - live dot py lab
16:36 - splt the reason we put
16:39 - splt here is because that the
16:42 - name for uh map lab.pylab is too long
16:47 - and we do not want to repeat it again
16:49 - and again in our following
16:51 - python lines so we just use plt as its
16:54 - abbreviation
16:55 - and we can just refer to plt whenever we
16:58 - want to use
16:59 - the map.lab.pylab so after we um
17:04 - successfully import plt next step we're
17:07 - going to take
17:08 - is to yeah import our data
17:11 - and we do not have to remember the
17:14 - python lines for importing the data
17:15 - because
17:16 - it's too long the only thing we need to
17:18 - do is to
17:19 - know how to use it and we can just
17:22 - simply copy and paste
17:24 - it from either the internet or your
17:27 - previous code
17:29 - here but remember we need to change our
17:32 - finding
17:32 - let's see our finding is c python
17:36 - and silicon number two okay
17:39 - silicon number two
17:45 - and uh we also need to import our
17:47 - silicon dioxide data
17:49 - so we need to have another copy and
17:51 - paste right here
17:53 - but this time is
17:57 - silicon dioxide number two
18:01 - and we need to change the name for it is
18:04 - um
18:05 - from from data to data two for silicon
18:08 - dioxide to
18:09 - silicon dioxide number two because we
18:12 - need to distinguish these two data
18:14 - sources if you put the same name right
18:16 - here it gets into trouble
18:17 - actually because you cannot distinguish
18:20 - the two data sources and you will
18:22 - eventually fail
18:23 - when you try to store on data of this
18:26 - two different data sources
18:29 - okay so we refer
18:33 - to data for the data of silicon and we
18:36 - refer to data
18:37 - too for the data of silicon dioxide
18:41 - after we successfully import our data
18:45 - next thing we're going to do is we're
18:47 - going to store
18:48 - the data of the two data files and
18:52 - what we're going to use we're going to
18:54 - use the for loop
18:56 - so for i in range
19:00 - one length
19:04 - one comma lens data remember the reason
19:08 - why we need to put one here
19:11 - um actually we don't need a reason
19:14 - actually but
19:15 - um it's just because that my
19:19 - data file first line for my data file
19:22 - is these words and we do not need to
19:25 - read these words into our ide
19:27 - so we start reading the data source from
19:31 - the second line and remember when we
19:33 - need to
19:34 - read a second in our ide we need to
19:38 - minus
19:38 - one so two minus one equals one and
19:41 - we put one right here meaning that we
19:44 - start from the second line
19:46 - and remember to put a column
19:49 - um after the four four loop lines
19:54 - okay and we okay
19:57 - i forgot something actually we need to
20:00 - first create
20:02 - the list to store the data so first list
20:06 - that i'm going to create is called
20:09 - silicon waveform and the second is
20:11 - silicon index of refraction
20:13 - we use n to represent our index root
20:16 - of refraction remember and we also have
20:19 - those from
20:20 - for silicon dioxide
20:27 - okay so now we have our four list ready
20:30 - we can start our for loop
20:34 - we need to add each wavelength of
20:37 - silicon
20:38 - in our data file into silicon silicon
20:41 - wavelength
20:42 - list so we're going to use the pen
20:44 - function
20:45 - of the list append data
20:49 - and it's line i however it's
20:56 - here it's the first column the
20:58 - wavelength is the first column
21:00 - so we need to put
21:03 - zero here representing the first column
21:08 - and we're going to do the same thing for
21:10 - the index of refraction of
21:12 - of um silicon yeah
21:15 - and it's
21:20 - the index of refraction is in the second
21:23 - column
21:24 - so we put one right here okay
21:27 - so we do the same for silicon
21:31 - dioxide
21:35 - and remember it's thinner two right here
21:38 - and it's also the first column for
21:42 - wavelength
21:47 - data two line i and column one
21:51 - a column two i mean okay
21:54 - it's also line i plus one here and
21:57 - column two right here
21:59 - we always minus one um for the idv
22:03 - if we want to refer to some number
22:07 - i mean some sequence okay
22:10 - so after we successfully store the data
22:13 - right here
22:15 - um okay oh
22:19 - there's another mistake that i made in
22:21 - this code
22:22 - sorry before that because it's lens
22:26 - data right here we cannot combine the
22:28 - data for it
22:30 - oh actually we can because um
22:33 - we have the same lines numbers for
22:37 - both data sources we have
22:40 - six line here and we have
22:45 - six line here so six
22:48 - lines for both data sources so that's
22:50 - all right
22:51 - if the lines are different from two data
22:54 - sources
22:55 - you need to build another for loop for
22:58 - um the second data source remember
23:02 - okay so after we successfully store
23:06 - our data we need to plot them
23:10 - and the lines we use is um plt remember
23:13 - prt refers to matplotlib
23:15 - dot pylab here and we use
23:18 - scatter scatterplot
23:21 - yeah and yeah for
23:25 - our first scatter a second first
23:28 - set of scatter points we use the silicon
23:31 - data
23:32 - and for the x axis we put
23:35 - wavelength remember the x
23:38 - axis come first and then we put
23:41 - the index of refraction in the y axis
23:45 - the y axis comes the second and i
23:48 - want to use the color red for the
23:51 - silicon data
23:52 - and the size of the scatter points i
23:54 - want to use
23:56 - one so remember these four
23:59 - things are all the parameters of prt dot
24:02 - scatter
24:04 - x y face color and size
24:08 - okay so remember we have it here
24:12 - these are all the parameters
24:15 - and we choose x y um face color
24:19 - and oh it does not have face color
24:22 - here oh because we we are using the
24:25 - pylab and
24:26 - it's similar face color and also size
24:31 - okay and we do the same thing
24:35 - for silicon dioxide
24:39 - wavelength as the
24:42 - excise axis and index of refraction as
24:46 - the second axis
24:48 - we'll use color green instead
24:51 - for silicon dioxide and size is also one
24:55 - so let's see okay
24:58 - um let's run our code
25:03 - wait so
25:06 - here to select this one
25:10 - and run another code
25:13 - okay so oh the point is relatively small
25:16 - so
25:17 - maybe we'll adjust our size or points to
25:19 - 10
25:21 - and run again yeah it's much better now
25:25 - so we can see that our data
25:29 - are plotted correctly and perfectly on
25:32 - our scatter plot and this is the result
25:36 - of our um answers to
25:40 - our questions so we can conclude
25:44 - some conclusions from our
25:47 - plot scatter plot right here for example
25:50 - the silicon dioxide
25:52 - yeah the six points are actually
25:56 - above the those five points first so
25:58 - again
26:01 - and we can make useful conclusions from
26:03 - this
26:05 - graph um
26:08 - let's see yeah so the next thing i want
26:11 - to mention is that
26:13 - so if you simply put up this graph
26:17 - then people may get get confused with
26:20 - what the x-axis and the y-axis represent
26:24 - so this time we need to say you can put
26:27 - some labels for your
26:29 - x-axis and y-axis for example
26:32 - i will put label
26:35 - wavelength here with nanometers
26:39 - as this unit
26:47 - and i will put
26:51 - index of refraction for
26:54 - my y-axis label
26:58 - let's see okay so now we have our
27:01 - x-axis label and y-axis label
27:05 - great and this is the end of our first
27:10 - problems
27:11 - like plotting a scatter plot to answer
27:13 - our questions
27:16 - now let's come to our second
27:19 - problem the second problem is actually
27:22 - to plot a histogram
27:24 - to create a frequency histogram for
27:27 - parameter p5 in photo data
27:32 - so remember the reason why we need a
27:34 - histogram is that we need to identify
27:37 - the frequency of data
27:38 - that falls in each class in a
27:40 - measurement scale
27:42 - so for example we may have
27:46 - two ones three twos
27:49 - and then now we have the frequency
27:52 - number two
27:54 - for the category one and we have the
27:56 - frequency number
27:57 - three for our category two
28:01 - um does that example make it clear
28:04 - if it doesn't don't worry let's start
28:07 - our demo to illustrate that
28:09 - so now let's open our
28:13 - um photon data file
28:17 - if it's correct yeah that's correct okay
28:21 - so now we have our photon data file
28:25 - and oh i forgot to put the format of it
28:29 - but yeah
28:33 - remember not actually remember but
28:37 - let's see it's it has pattern so three
28:41 - as a group three line as a group
28:45 - three line as a group and our parameter
28:48 - p5 that we need to figure out
28:52 - is in the very first
28:55 - data it's the very first data of a group
28:59 - so we have this data as the p5 the first
29:02 - p5
29:03 - and this data as the second p5 and this
29:07 - one for
29:07 - the third p5 sorry that i have just
29:10 - figured out that
29:12 - i forgot to share my screen for the rest
29:15 - of the recording
29:16 - in this afternoon so i re-recorded
29:20 - the following part after we distinguish
29:24 - what pfi is are in the data file
29:28 - the next step we're going to do is to
29:31 - write our python lines
29:32 - and remember the first thing to do is to
29:35 - import our matplotlib.pylab.splt
29:40 - as usual because we need to make sure
29:42 - that we can
29:44 - plot the graph and we so we need to
29:48 - import our matplotlib
29:49 - first then we'll import our data
29:53 - file inside notice in that here
29:56 - i use the first python lines for
30:00 - importing the data remember the first
30:02 - one read the data
30:04 - digit by digit which is
30:08 - actually this one
30:13 - so digit by digit we first read zero
30:16 - then we read
30:16 - the dot and then four and then seven and
30:19 - then one
30:21 - okay so
30:24 - this kind of python lines in importing
30:27 - python lines
30:28 - requires us to um do something in a
30:31 - following so that we can guarantee
30:34 - the digits are combined together within
30:37 - a data
30:38 - so we need to ensure that 0.417
30:45 - is a complete data and need to separate
30:48 - be separate from 0
30:50 - and 0.942
30:54 - so this is what what this code is works
30:58 - for
30:59 - so let's open our data file
31:04 - we can see that um take minus one point
31:06 - one one seven eight a as an example
31:09 - we first read minus one then we read the
31:12 - dot
31:13 - and add a dot to minus one and then we
31:16 - continue to read
31:17 - one and then add the one to
31:20 - minus one dot and then another one and
31:23 - seven eight a
31:24 - so in the end we have a complete data
31:28 - and while encountering with the space
31:31 - right here
31:33 - the while um lines will read
31:36 - these data index i dot a space equals
31:40 - is true and then the while loop will
31:43 - stop
31:44 - so finally we will only get minus
31:48 - 1.1178a
31:49 - for our first file
31:53 - first file here
31:56 - and don't don't forget to transform the
32:00 - file from
32:02 - string type to float type so that
32:05 - we can plot it in a histogram
32:08 - and after we have done all these steps
32:12 - of
32:14 - like adding the data adding the digit
32:17 - into a complete data and transforming
32:21 - the
32:21 - string type phi to float type we finally
32:25 - can
32:26 - store the file into p5 list
32:30 - which we created right here so remember
32:34 - we import our data first then we create
32:37 - our list then we store our data
32:41 - and eventually we plot our histogram
32:46 - and yeah let's run our code
32:49 - this is actually a histogram but let's
32:52 - run again
32:58 - okay so look at this third picture
33:01 - this is the histogram that our code
33:05 - runs and these are the
33:09 - parameters of plt dot histogram remember
33:12 - so we have the thing we need to plot p
33:15 - p5
33:16 - and the beams remember the beams are
33:19 - a collection of data in a specific range
33:23 - like this small rectangles here
33:26 - are beans and since we have 100 wings
33:29 - it means that we have 100 rectangle
33:32 - right here that compose the
33:36 - whole distribution and his type here
33:39 - the bar means that we have these these
33:42 - shading regions
33:44 - so the opposite of the bar is the step
33:46 - here
33:49 - the opposite of bar is
33:54 - wait oh
34:00 - here's pi and
34:04 - his type equals
34:10 - step so if we adjust it to
34:13 - step we'll only gains the line on top of
34:17 - the distribution
34:20 - and we have our x label on the x-axis
34:23 - p5 right here and we also have our y
34:26 - label right here the frequency
34:29 - so that is all the solutions we have to
34:32 - answer this question
34:34 - to create a frequency histogram for a
34:36 - parameter p
34:37 - file in photon data and
34:41 - i hope the two demos today can work as a
34:45 - practical a practice for you to prepare
34:48 - for
34:49 - maybe your future data analysis
34:52 - experience using python
34:54 - in your research and
34:57 - that's all and thank you everyone wish
34:59 - you
35:00 - a good weekend

Cleaned transcript:

hi guys so today we are going to be making a linear regression model and what a linear regression model is it's to attempt to model the relationship between these variables like x and y by creating a linear equation and it can also be used to predict like future values and so i'm using google collab and google collab is a notebook where you can write python code and all you need is a gmail account so feel free to follow a lot and but ideally you can use any application you want like jupiter um notebook uh maybe even ripple and so the first thing we need to do is import our libraries all right so first i'm going to import um numpy because we learned numpy in our last session i'm gonna continue using that and we also need matplotlib specifically the python plot and so i'm we're going to refer to matpotlib.pyplot just as plt to make it shorter let us and we also to create a linear regression we're going to borrow this from another library called sklear and we're going to use linear model and we're going to import linear regression okay and so the next thing we need is our data set all right our data and so i just made up some data values right here but um usually you like you know what data you're gonna use so um we're going to basically we want to create two arrays one array to hold all the x values which is time and the other array to hold all the y values which is a tray height okay so to do that we can do x is equal to and to create an array we just do np dot array and in here um i'm just going to copy and paste these values in here and you want to separate the values like commas just do that this might take a while okay and then we want to create an array for all our y values copy paste okay you can spend time formatting and making it nice but it's just as long as it works that's what i mean okay so here we can actually plot plot the values if you want so we do plt dot plot and we're plotting x and y and we're making a scatter plot and so first of all if you plot it it gives us the graph but it's like a line and i want it to be scattered so i add another parameter it's like see now it's the scatter plot okay so it looks like we have somewhat of a line right but we want to find out what the equation of the line really is so this is where linear regression comes into play so i'm going to create a variable and i'm just going to set it equal to their regression so it's easier on us now if we try to fit it fit the values with a line let's try running all our cells and it gives us the error and basically the reason why is so this x array is something that's called a 1d array basically it we can see it we can do x dot shape and so basically it's just um one column for one yeah one row and one column but for linear regression it's expecting a 2d array and so 2ds and we want to combine this x array and the y array together so to do that we can do something that's called we can set the x variable to x dot reshape and in here we're gonna put negative one comma one so what this does is the one is one just means we're going to add another column right here like right after this comma and negative 1 means means that the elements are going to remain as they are basically there's gonna be like no shifting so if we run this now it shows us um we have like two columns two shapes yeah okay so now if we do a red dot why it works it doesn't give us an air anymore and so in linear regression also predicts future values right so we can create a variable called y predictions and we want to predict the y values rate um from like the x like that basically like as time goes on or as x increases we want to predict the correspondent y values right and so now we can the uh we can plot the like points and this time we can do plt dot scatter but you can also do it this way as well i'm just gonna show you different ways how to graph it and then we can plot x values the predicted values and we can also set the color so we could do colors equal to oh no blue so you can see that it plot our line and yay so last thing we need to do is um let's say we want to find the equation of the line right so find the equation where y is equal to mx plus b and so m is our linear coefficient right there right now that stands for coefficient and b is our um y intercept so this and so you can print out the equation of a line by doing y is equal to now remember um m is in a number integer and y is a string so we want to format it so one way to do that is we can do this brackets dot format and here we put m because m corresponds to the first bracket right here b is the second bracket right here and so when i run it it gives us the equation of the line hello everyone today we're going to have our second session of data analysis on scientific research today we're going to do two demo on creating a histogram and creating a scatter plot respectively so let's first start with creating a scatter plot and the problem is to compare the sorting data with silicon dioxide data on the associations between your wavelength and index of refraction which we use and to represent and before let's start all the steps let's first have a brief review on the things that we learned for the last session so remember the first step that we're going to take is called data preprocessing in which we deal with innocent data and the noisy data then if we want to compare more than one data sources and figure out that their unit systems are not the same then we're going to use the small steps called normalization in the data preprocessing and after we finish data preprocessing we're going to start importing our data and i use these two python lines to import my data remember the difference between them the first line is to read the data digit by digit and the second one is to read data by data so we get zero as the first um data for the pi first python lines and we got 0.471 for the second python lines after we successfully import the data we need to use list or arraylist to store our data and eventually plotting our data requires some python plotting lines like those showing this ppt so i put up two most common graphs that we use the histogram and the scatterplot which is which are also what we're going to plot today and this process is called data visualization and we'll start tackling this problems by starting with the first step data preprocessing so if opening our file the silicon file and also the silicon dock file we can figure out that there are two problems between the data file the first is that the data number of data in a silicon file is more than that of the silicon dioxide file and what we need to do is we need to first delete the data with the wavelength that is larger than 350 nanometers okay and the second problem is that the data does not match with e do not match with each other we have 300 and 300 for the first data but we have 310 and 302.4 for the second data which does not do not match which is each other so we're what we're going to do is we're going to delete 302 to 308 to make sure that our second data match and we're going to repeat this process for the following data and we'll eventually gain a new data file for our silicon so i have already done it silicon number two file and let's see so now we have a silicon file that matches with the silicon dioxide file with six number six data in total and each data match with the other 300 300 310 310 319 and 312. so there's a little um a small discrepancy right here we can just ignore the difference because it does not matter much and after we're finishing dealing with our data preprocessing steps let's open our python ide and start import our data oops oh remember before we import our data there's another really important step that we should take remember our task is to plot on the graph and we need to have something imported so that we can plot our graph it is the math.lib right not live dot py lab splt the reason we put splt here is because that the name for uh map lab.pylab is too long and we do not want to repeat it again and again in our following python lines so we just use plt as its abbreviation and we can just refer to plt whenever we want to use the map.lab.pylab so after we um successfully import plt next step we're going to take is to yeah import our data and we do not have to remember the python lines for importing the data because it's too long the only thing we need to do is to know how to use it and we can just simply copy and paste it from either the internet or your previous code here but remember we need to change our finding let's see our finding is c python and silicon number two okay silicon number two and uh we also need to import our silicon dioxide data so we need to have another copy and paste right here but this time is silicon dioxide number two and we need to change the name for it is um from from data to data two for silicon dioxide to silicon dioxide number two because we need to distinguish these two data sources if you put the same name right here it gets into trouble actually because you cannot distinguish the two data sources and you will eventually fail when you try to store on data of this two different data sources okay so we refer to data for the data of silicon and we refer to data too for the data of silicon dioxide after we successfully import our data next thing we're going to do is we're going to store the data of the two data files and what we're going to use we're going to use the for loop so for i in range one length one comma lens data remember the reason why we need to put one here um actually we don't need a reason actually but um it's just because that my data file first line for my data file is these words and we do not need to read these words into our ide so we start reading the data source from the second line and remember when we need to read a second in our ide we need to minus one so two minus one equals one and we put one right here meaning that we start from the second line and remember to put a column um after the four four loop lines okay and we okay i forgot something actually we need to first create the list to store the data so first list that i'm going to create is called silicon waveform and the second is silicon index of refraction we use n to represent our index root of refraction remember and we also have those from for silicon dioxide okay so now we have our four list ready we can start our for loop we need to add each wavelength of silicon in our data file into silicon silicon wavelength list so we're going to use the pen function of the list append data and it's line i however it's here it's the first column the wavelength is the first column so we need to put zero here representing the first column and we're going to do the same thing for the index of refraction of of um silicon yeah and it's the index of refraction is in the second column so we put one right here okay so we do the same for silicon dioxide and remember it's thinner two right here and it's also the first column for wavelength data two line i and column one a column two i mean okay it's also line i plus one here and column two right here we always minus one um for the idv if we want to refer to some number i mean some sequence okay so after we successfully store the data right here um okay oh there's another mistake that i made in this code sorry before that because it's lens data right here we cannot combine the data for it oh actually we can because um we have the same lines numbers for both data sources we have six line here and we have six line here so six lines for both data sources so that's all right if the lines are different from two data sources you need to build another for loop for um the second data source remember okay so after we successfully store our data we need to plot them and the lines we use is um plt remember prt refers to matplotlib dot pylab here and we use scatter scatterplot yeah and yeah for our first scatter a second first set of scatter points we use the silicon data and for the x axis we put wavelength remember the x axis come first and then we put the index of refraction in the y axis the y axis comes the second and i want to use the color red for the silicon data and the size of the scatter points i want to use one so remember these four things are all the parameters of prt dot scatter x y face color and size okay so remember we have it here these are all the parameters and we choose x y um face color and oh it does not have face color here oh because we we are using the pylab and it's similar face color and also size okay and we do the same thing for silicon dioxide wavelength as the excise axis and index of refraction as the second axis we'll use color green instead for silicon dioxide and size is also one so let's see okay um let's run our code wait so here to select this one and run another code okay so oh the point is relatively small so maybe we'll adjust our size or points to 10 and run again yeah it's much better now so we can see that our data are plotted correctly and perfectly on our scatter plot and this is the result of our um answers to our questions so we can conclude some conclusions from our plot scatter plot right here for example the silicon dioxide yeah the six points are actually above the those five points first so again and we can make useful conclusions from this graph um let's see yeah so the next thing i want to mention is that so if you simply put up this graph then people may get get confused with what the xaxis and the yaxis represent so this time we need to say you can put some labels for your xaxis and yaxis for example i will put label wavelength here with nanometers as this unit and i will put index of refraction for my yaxis label let's see okay so now we have our xaxis label and yaxis label great and this is the end of our first problems like plotting a scatter plot to answer our questions now let's come to our second problem the second problem is actually to plot a histogram to create a frequency histogram for parameter p5 in photo data so remember the reason why we need a histogram is that we need to identify the frequency of data that falls in each class in a measurement scale so for example we may have two ones three twos and then now we have the frequency number two for the category one and we have the frequency number three for our category two um does that example make it clear if it doesn't don't worry let's start our demo to illustrate that so now let's open our um photon data file if it's correct yeah that's correct okay so now we have our photon data file and oh i forgot to put the format of it but yeah remember not actually remember but let's see it's it has pattern so three as a group three line as a group three line as a group and our parameter p5 that we need to figure out is in the very first data it's the very first data of a group so we have this data as the p5 the first p5 and this data as the second p5 and this one for the third p5 sorry that i have just figured out that i forgot to share my screen for the rest of the recording in this afternoon so i rerecorded the following part after we distinguish what pfi is are in the data file the next step we're going to do is to write our python lines and remember the first thing to do is to import our matplotlib.pylab.splt as usual because we need to make sure that we can plot the graph and we so we need to import our matplotlib first then we'll import our data file inside notice in that here i use the first python lines for importing the data remember the first one read the data digit by digit which is actually this one so digit by digit we first read zero then we read the dot and then four and then seven and then one okay so this kind of python lines in importing python lines requires us to um do something in a following so that we can guarantee the digits are combined together within a data so we need to ensure that 0.417 is a complete data and need to separate be separate from 0 and 0.942 so this is what what this code is works for so let's open our data file we can see that um take minus one point one one seven eight a as an example we first read minus one then we read the dot and add a dot to minus one and then we continue to read one and then add the one to minus one dot and then another one and seven eight a so in the end we have a complete data and while encountering with the space right here the while um lines will read these data index i dot a space equals is true and then the while loop will stop so finally we will only get minus 1.1178a for our first file first file here and don't don't forget to transform the file from string type to float type so that we can plot it in a histogram and after we have done all these steps of like adding the data adding the digit into a complete data and transforming the string type phi to float type we finally can store the file into p5 list which we created right here so remember we import our data first then we create our list then we store our data and eventually we plot our histogram and yeah let's run our code this is actually a histogram but let's run again okay so look at this third picture this is the histogram that our code runs and these are the parameters of plt dot histogram remember so we have the thing we need to plot p p5 and the beams remember the beams are a collection of data in a specific range like this small rectangles here are beans and since we have 100 wings it means that we have 100 rectangle right here that compose the whole distribution and his type here the bar means that we have these these shading regions so the opposite of the bar is the step here the opposite of bar is wait oh here's pi and his type equals step so if we adjust it to step we'll only gains the line on top of the distribution and we have our x label on the xaxis p5 right here and we also have our y label right here the frequency so that is all the solutions we have to answer this question to create a frequency histogram for a parameter p file in photon data and i hope the two demos today can work as a practical a practice for you to prepare for maybe your future data analysis experience using python in your research and that's all and thank you everyone wish you a good weekend
