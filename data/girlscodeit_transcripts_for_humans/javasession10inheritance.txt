With timestamps:

00:00 - this is the um week 10 of the java
00:03 - lessons and today we'll just be going
00:04 - over
00:05 - inheritance um if you have any questions
00:08 - about like the slides or
00:10 - anything else feel free to just jump in
00:12 - and ask or
00:13 - put your question in chat and
00:16 - yep let's get to it so for today we're
00:20 - just going to be going over
00:22 - a brief introduction and review about
00:24 - classes um
00:26 - i'll also be going over like class
00:28 - diagrams how to read them
00:30 - um and then finally we're going to be
00:32 - talking about subclasses or like
00:34 - inheritance and how to make subclasses
00:38 - so again um we had
00:42 - for the past few weeks we've been
00:43 - talking a little bit about classes so
00:46 - just remember that like classes are kind
00:48 - of blueprints to
00:49 - objects they can have like they can have
00:52 - um states and properties so like for
00:55 - example a dog class can
00:57 - hold information like the color or the
00:59 - name of the dog
01:00 - they can also have behaviors or methods
01:03 - so
01:03 - a dog can bark or it can run
01:07 - also i remember last lesson
01:11 - um we were talking about
01:14 - um i talked about making a general list
01:18 - of terminology that that can be like
01:21 - pretty confusing or like
01:23 - terms that are the same and the ones
01:25 - that are different
01:26 - so here's that link
01:29 - um this is basically a general list
01:33 - of different kinds of terms that
01:36 - you'll often see like people use in like
01:38 - programming
01:39 - um some are java specific some aren't
01:41 - java specific
01:43 - so this is just like grouping all these
01:45 - terms together
01:46 - and then giving you basic definitions
01:49 - and
01:49 - examples of that so if you're ever
01:52 - confused about like what i'm talking
01:54 - about
01:55 - um feel free to ask in chat or like
01:57 - interrupt me
01:58 - or you can also try like refer to this
02:01 - as
02:02 - a little bit of a dictionary
02:06 - and also if like you're
02:10 - if you're confused about other terms
02:12 - that aren't on this list
02:13 - um just give me a heads up and i'll i'll
02:16 - like add to this document
02:22 - all right so we talked about classes for
02:24 - the past two weeks
02:25 - and now we're just gonna start going
02:27 - into more conceptual
02:30 - um things so the first one is like
02:33 - java is an object-oriented programming
02:35 - language
02:36 - so and as an object-oriented language it
02:39 - has
02:39 - four major principles um these four
02:42 - are encapsulation abstraction
02:44 - inheritance and polymorphism
02:46 - um you don't have to worry about these
02:48 - three so like encapsulation abstraction
02:51 - polymorphism
02:52 - don't worry about them um if you're
02:55 - curious about what they are you can
02:56 - always like
02:57 - look them up in your own free time um
03:00 - the one we're going to be focusing on
03:01 - today is inheritance
03:03 - so inheritance is sort of it's it's just
03:06 - like inheritance in the real
03:07 - world it's a class could inherit like
03:10 - the properties and behaviors
03:12 - of a parent class and usually when we're
03:16 - talking about
03:17 - um inheritance or
03:20 - like a real example is like you can
03:22 - inherit like
03:23 - um looks and behaviors from your parent
03:27 - or like um yeah or stuff like that
03:31 - so basically that's what inheritance
03:33 - also is
03:34 - in um in object-oriented programming
03:38 - so a parent class or
03:41 - a child class can inherit a behavior
03:44 - or a state from its parent class
03:47 - and when we're talking about like making
03:49 - subclasses we think of it as having an
03:52 - is a relationship so let's say we have
03:55 - um a class called animal
03:59 - and it has a subclass called fish so we
04:01 - think about it as
04:03 - fish is an animal so it gets all the
04:06 - behaviors
04:07 - and the states or and the properties
04:10 - of the animal parent class this is a
04:13 - little different from when we're talking
04:15 - about
04:16 - things like um like class variables
04:19 - so a animal can have a um
04:24 - age or a gender but that's different
04:27 - from
04:28 - having a subclass so like a fish is an
04:31 - animal
04:32 - and an animal can have an age so
04:35 - basically that's how um subclasses are
04:38 - different
04:38 - from si let's say like just having
04:42 - um a like a class variable or a field
04:47 - um yeah so basically for class diagrams
04:50 - um obviously this is an actual like java
04:53 - code
04:54 - but these are basically each box is a
04:57 - visual representation
04:58 - of like a class and what this class has
05:03 - so yeah like donna was saying um the top
05:06 - portion of this box these are the
05:09 - attributes or the
05:10 - fields of the class and then this bottom
05:13 - half
05:13 - is the um the methods this class can
05:16 - have
05:17 - so basically like the box itself
05:21 - is the class the top part is the
05:23 - information you can hold
05:25 - and the bottom part is what it can do so
05:28 - what methods does it have
05:30 - and now you'll notice that like we have
05:31 - these three other classes at the bottom
05:34 - and they
05:34 - all have arrows pointing to animal so
05:37 - what these arrows mean
05:39 - is that these um classes at the bottom
05:42 - are inheriting from animal so basically
05:46 - um fish can have its own like its own
05:49 - properties and its own methods but also
05:52 - inherits
05:53 - from animals so inherit these behaviors
05:56 - and these
05:56 - in for this information from animal
06:01 - so and the reason the arrow is pointed
06:03 - up is because
06:04 - inheritance is sort of a one-way street
06:07 - so
06:08 - fish can access like all the information
06:11 - and methods
06:11 - from animal but animal can't access the
06:14 - information
06:16 - yeah so don't worry too much about the
06:18 - pluses and minus
06:19 - um i think it's like
06:22 - it's a little nuanced like syntax stuff
06:25 - but
06:26 - right now we're just focusing on like in
06:28 - general what class diagrams are
06:30 - and more importantly like what these
06:32 - arrows mean
06:33 - so the reason like um i'm showing you
06:36 - guys these class diagrams is that like
06:38 - um for when you're like doing
06:40 - programming sometimes
06:42 - like you're like you're focused so much
06:44 - on syntax that
06:46 - um that you miss like the conceptual
06:49 - um the conceptual ideas so it's
06:52 - important to separate like
06:53 - like the syntax so like how to do
06:55 - something in a certain language
06:57 - from like the general concept so
07:00 - especially when you're like writing
07:02 - inheritance and eventually like you'll
07:03 - write programs that
07:05 - do more than just like inherit from like
07:08 - having a class in here sort of another
07:09 - class um it's important to keep like
07:12 - the concept of classes separate from
07:14 - like
07:15 - the actual code itself that way like
07:17 - you'll think more about the class design
07:20 - and not about like oh like how like
07:23 - or i guess like in another way it's like
07:25 - that you're focusing on the big picture
07:27 - and not like being stuck on tiny details
07:33 - all right so now that we've talked about
07:36 - just like
07:36 - inheritance on a conceptual level now
07:38 - we'll get to
07:39 - um actually like talking about how to
07:42 - implement inheritance in
07:44 - java so first off um in order to
07:48 - implement a subclass
07:49 - you'll basically use extends keyword so
07:53 - in like when you declare a class instead
07:56 - of
07:56 - having like just um class x it'll be
07:59 - having class
07:59 - um child extends parent class and then
08:03 - like the class step edition at the
08:04 - bottom
08:06 - um again like subclasses inherit methods
08:08 - and fields from their parent class
08:11 - and then in order to refer to the parent
08:13 - class you'll use the super keyword
08:15 - and inside the constructor you should
08:17 - always use
08:19 - like super parentheses in the
08:21 - constructor
08:22 - um what this does is it basically cause
08:24 - the parent class constructor first
08:26 - so that initializes all of like the
08:28 - parent methods and fields
08:32 - and then in java you can only inherit
08:34 - one class
08:35 - so this is more java specific but like
08:38 - for java you can only have one parent
08:41 - class
08:41 - so you can't inherit um from a bunch of
08:44 - different parents
08:46 - so based when we look at this
08:50 - um or i guess like we can also look at
08:54 - this
08:54 - diagram so like this is just another
08:57 - class
08:57 - example of a class diagram this one's
08:59 - way more simple
09:01 - like way simpler than the one we saw
09:03 - earlier
09:04 - um you can on your own
09:08 - like free time i would recommend you
09:09 - sort of try and practice
09:12 - um implementing this diagram in java
09:18 - so um next
09:21 - ignore the demo easy link so i'm just
09:24 - gonna
09:25 - actually just like like give you guys
09:27 - some live code
09:28 - of be like creating a custom class
09:32 - and showing you guys like how
09:34 - inheritance works
09:36 - so first um let's actually let's um
09:43 - let's not do this okay i'm just gonna go
09:46 - back
09:47 - and then um i'm gonna actually
09:51 - implement let's see i'm gonna implement
09:54 - the car class
09:55 - and then we'll implement a truck class
09:58 - that'll inherit from the car class
10:02 - so i'm just going to create a new file
10:05 - to make everything
10:06 - more
10:09 - more neat so first i'm just going to
10:13 - have
10:13 - a quick class card
10:16 - and inside this car class if i go back
10:19 - into
10:23 - into the class diagram um basically
10:27 - it has three um
10:30 - three fields so first one is color
10:34 - horsepower
10:38 - and and number of seats
10:46 - so i'm just gonna instantiate three
10:49 - let's say or they have to be public
10:52 - fields for me to show you how
10:53 - inheritance works
10:55 - um three public
10:59 - uh attributes so color horsepower and
11:02 - num seats
11:05 - so public stream color
11:09 - public
11:12 - eight
11:21 - and then let's actually i um
11:25 - let's say one class method
11:29 - so i want to have a method
11:32 - um drive
11:38 - just to show you guys like how
11:41 - inheritance works with methods too
11:43 - so first i'm gonna create the car
11:46 - constructor
11:48 - and again like when you create an
11:50 - instructor or a constructor you wanna
11:52 - pass in
11:54 - all the values to instantiate or
11:57 - yeah to instantiate these three um class
12:00 - fields
12:01 - so i want to pass in a string let's say
12:03 - c
12:04 - in h and then in
12:08 - so this dot color equals
12:11 - c this dot first power
12:18 - equals h and then this dot
12:21 - num receipt
12:25 - and then for this method drive public
12:28 - uh let's say void
12:32 - drive so
12:35 - this is a public instance method
12:39 - and that returns nothing called drive
12:42 - and then for drive let's just print out
12:47 - that or system.out.printline
12:52 - um driving
12:57 - let's just say it prints out driving
13:00 - so now i've insert or created a class
13:04 - sweet so i basically just um declared
13:07 - these
13:08 - three variables made a constructor and
13:10 - then made a quick public method
13:12 - so next let's get to a sub class so the
13:15 - subclass will be truck.java
13:20 - and for this subclass i wanted to
13:23 - inherit all the um fields from car
13:27 - and then add an extra class or
13:31 - add an extra field called trailer
13:36 - so for class truck in order to
13:40 - um declare a class as a subclass of
13:43 - another class i'm going to have to use
13:45 - the extends keyword
13:48 - so this will extend the um
13:52 - the from the car class
13:56 - so in other words it would hear all the
13:58 - values from the card class
14:02 - so when i'm in my field like
14:06 - or when i'm in the class basically
14:10 - now truck has all that has access to
14:13 - all of these three um fields and also
14:17 - this public method
14:21 - and then now i want to add on
14:24 - another um class field so truck
14:28 - or trailer and let's make it a public
14:33 - let's say it's a integer
14:36 - trailer
14:40 - and then um i'm going to create the
14:43 - constructor
14:46 - so inside a constructor for a subclass
14:49 - you should always call super first
14:52 - and notice how this kind of just looks
14:54 - like another constructor
14:56 - and this is basically what it is it's
14:58 - because it calls a constructor
15:00 - for the parent class so when i'm on
15:04 - when i'm calling the constructor for a
15:06 - truck class the first thing i'll do
15:08 - is java will do is they'll see the super
15:11 - line
15:12 - it'll actually call this car constructor
15:16 - so it can basically create like all of
15:19 - or um it can basically instantiate
15:23 - all of the values for the car parent
15:25 - class
15:28 - so because of that um we should also
15:31 - pass in like all the parameters that are
15:33 - required
15:34 - in the car constructor so
15:37 - um we'll have to pass in a string and
15:40 - two integers
15:41 - so that we can basically instantiate all
15:44 - the values in the
15:47 - or actually no i think i'm i'm doing
15:49 - this drawing sorry so you'll just have
15:51 - to call this super to create instance
15:53 - and you can actually just like now that
15:56 - you've um
15:57 - created instance of super you can
16:00 - basically
16:01 - um access these three values
16:05 - so this that color equals let's say all
16:08 - trucks
16:08 - are red for now
16:12 - and then this.horsepower
16:17 - i'm actually not too familiar with cars
16:19 - so let's just say 18.
16:25 - and then this thought numb seeds
16:36 - so basically after you create you sort
16:39 - of create
16:39 - instance using like this super line
16:43 - um you can actually access all the
16:46 - three values in car just by using this
16:49 - dot whatever
16:56 - and then finally um
17:01 - i actually need to create a parameter
17:03 - over here
17:04 - you declare the value of um
17:08 - trailer so this dot trailer
17:16 - equals
17:25 - all right and then so in this main
17:27 - method
17:29 - we can have um let's instantiate a car
17:32 - first
17:33 - car c equals new car
17:37 - um blue
17:40 - or i4
17:44 - so this will create a car with the color
17:46 - blue
17:47 - um four horsepower and then four seats
17:52 - so we can do like a system
17:57 - oh that's good my
18:05 - and then now we can also create a truck
18:12 - key
18:15 - and then do something like
18:18 - system.out.printline
18:23 - t.n seats and let's see if this runs
18:30 - okay all right my bad so
18:34 - super actually does call the constructor
18:43 - yeah so sorry about that guys
18:46 - so basically um this super is just gonna
18:50 - call the constructor
18:51 - of the super class so the parent class
18:58 - and then as you can see like over here
19:03 - um truck can basically inherit the
19:06 - fields
19:06 - of the car class and then it can also
19:10 - access like whatever information the car
19:12 - has
19:13 - let me actually run this updated so in
19:15 - this main method
19:16 - i've created i first created like a car
19:19 - um
19:20 - object that has um the color blue
19:23 - four horsepower and um four seats
19:27 - and i just printed out the number of
19:29 - seats for the car
19:31 - let me actually add like
19:34 - car number of
19:38 - seats or c
19:46 - so over here i just print out the number
19:48 - of seats
19:49 - for um the car c and then over here
19:52 - i've and i think or i've instantiated
19:56 - a truck object that takes in
20:00 - four which is the number of trailers and
20:02 - then remember that
20:04 - inside of truck we've already passed in
20:06 - parameters
20:07 - for the um parent class so all trucks
20:10 - will be red
20:11 - have 18 horsepower and eight seats and
20:14 - the only thing that will be different
20:15 - between them
20:16 - is the number of trailers so
20:20 - i've just instantiated a new truck um
20:23 - that's four trailers
20:25 - and then over here i'm just gonna
20:28 - i'm gonna copy this over first and then
20:31 - i'm just gonna print out the number of
20:33 - seats
20:34 - 40.
20:39 - and what this will do is it should print
20:42 - out
20:43 - um 18 or sorry
20:46 - 8 because eight is the number of seats
20:50 - for all um trucks and then finally
20:53 - what i do is i'll actually access
20:56 - um a method in t's parent class
20:59 - so inside the um inside the cart class
21:04 - so for car.java i've created a public
21:08 - void method called drive and all that
21:10 - prints out
21:11 - is driving and i'm just showing in this
21:15 - main method that
21:16 - even inside like even for a subclass i
21:18 - can access the parent classes
21:20 - public methods so when you um run it
21:24 - it'll just print out number of seats for
21:26 - c is four
21:28 - number of seats for t is eight and then
21:30 - driving
21:31 - and then someone asked in chat why can't
21:33 - we pass
21:34 - these three values as arguments in the
21:36 - super method
21:38 - um yeah i sorry i made a mistake in that
21:41 - part
21:42 - so for the super method this is the
21:45 - constructor for the parent class
21:47 - so we'll have to pass in like three
21:49 - valleys
21:50 - yeah sorry about that um anything else
22:00 - so just to um show you guys some more
22:05 - um when i'm creating like
22:10 - or i guess like i could explain what
22:14 - like why droplet cause makes sense so um
22:17 - basically for for like especially for
22:21 - java
22:22 - um when you're creating like a subclass
22:25 - sort of think about it as you're
22:27 - building on top of the parent class
22:29 - so parent class is kind of like this
22:31 - base class
22:32 - and then you're sort of adding new um
22:36 - new fields and methods to it
22:39 - so that's why it's called like truck
22:42 - extends car
22:43 - because truck is extending the amount of
22:45 - information
22:46 - and behaviors that the car can do
22:50 - so that's also why like for your parent
22:54 - classes your parent classes
22:55 - can't access the um the
22:59 - the fields and methods of their child
23:02 - class
23:03 - because their child class is building on
23:05 - top of the parent class
23:06 - the parent class doesn't just doesn't
23:08 - have the information that the um
23:10 - the child class has it's um
23:14 - yeah i went like you can
23:18 - like you can read up more about like
23:21 - jvm and like different java compilers
23:25 - but um but basically what happens is
23:28 - like
23:29 - the first thing like when
23:33 - the first thing you have to do for a
23:34 - java program is to actually compile it
23:37 - um replit actually sort of hides that
23:40 - away from you because
23:41 - when you click run um it will actually
23:44 - compile first
23:45 - and then run but um when you're working
23:48 - on java
23:49 - like working a java program on your own
23:51 - um if you're not using
23:53 - like an ide like eclipse or vs code
23:57 - you actually have to compile the java
23:59 - program yourself
24:00 - and the compiler will just like it'll
24:02 - read all the syntax
24:04 - um first it'll do like syntax checking
24:07 - then it'll like it'll look at your
24:10 - dependencies
24:11 - so it'll see like oh i have
24:14 - like i have something called car and i
24:16 - have something called truck
24:18 - and these are classes so do i have like
24:22 - do i have this class defined inside of
24:25 - like these other files
24:27 - in these other java files and then
24:30 - finally it'll like it'll like it'll do
24:34 - other optimization stuff
24:36 - but um after that like you'll have to
24:40 - actually execute the run command and
24:42 - then that's when like
24:44 - um it'll just execute the main function
24:48 - like line by line
24:50 - so when it sees the the command on line
24:53 - 14
24:54 - t dot drive it goes uh it it refers to
24:58 - truck.java
25:00 - or it refers to which one
25:03 - truck or car.java what does it refer to
25:07 - to print out the word driving period
25:11 - so basically um
25:14 - it'll refer to first it'll refer to
25:17 - truck.java
25:18 - i know see like oh truck is uh
25:22 - is a subclass of car so truck extends
25:24 - car
25:25 - so then it'll refer to car.car.java or
25:29 - the card class
25:30 - and then see that has a definition for
25:33 - drive
25:34 - so that's basically like how in a
25:36 - different way
25:37 - like i think like maybe it's sort of the
25:40 - syntax that might be confusing for you
25:42 - um so let's actually ignore like ignore
25:46 - the java
25:47 - syntax um and just draw
25:50 - like a little class diagram
25:53 - of like or i guess not even a class
25:55 - diagram but sort of
25:56 - um a visual representation a different
26:00 - way of like
26:01 - representing subclasses and classes
26:04 - so let's say i have this class um this
26:07 - isn't a class diagram by the way
26:08 - so this is just like
26:13 - more like a drawing of a class
26:17 - so let's say i have this class called
26:20 - car
26:21 - and inside of car has like a bunch of
26:24 - different information
26:26 - so like um let's say for now this card
26:29 - just has
26:31 - um number of seats
26:36 - and again like this will this is like
26:39 - this isn't any sort of java code so
26:44 - this is um just gonna be
26:48 - a different way of seeing classes and
26:50 - subclasses
26:52 - and let's say it also has like
26:56 - an action called drive
27:02 - so this is basically my visual
27:05 - representation
27:06 - of what a car is and
27:10 - next we have we basically want the
27:13 - subclass car out
27:14 - so we want to make a subclass called
27:16 - truck
27:18 - so what the subclass
27:22 - does is it actually just builds on top
27:24 - of
27:26 - or let's
27:30 - i'm just gonna say it just builds off of
27:33 - car
27:35 - so this is let's make this green
27:38 - and then we'll call this truck
27:44 - so for truck we add on a little bit more
27:47 - information
27:48 - so we want to add on information about
27:51 - the number of
27:52 - trailers and this is an integer
28:00 - so visually like
28:04 - um this entire thing like both the
28:07 - square
28:07 - and the triangle is what the truck
28:11 - is so it's a car but it's a car with a
28:14 - little bit of extra
28:15 - information about it so that's why
28:19 - um over here for line 14
28:23 - we can access this drive method because
28:27 - like in the end a car or a truck
28:31 - is a car so can also have this method
28:35 - called drive
28:38 - okay i think i think i understand what's
28:40 - confusing
28:41 - you're i think you're having some
28:43 - confusion
28:44 - about like scoping so um
28:48 - let me actually let's change
28:51 - this um this very warning
28:56 - because i think like you're you're being
28:58 - confused about
28:59 - um we have like inside of the truck
29:02 - class we have
29:03 - a parameter called t but we also have
29:06 - like
29:07 - another like variable over here called t
29:09 - and it's a little confusing
29:11 - yeah um the so i can like
29:15 - i i can just like go over a little bit
29:17 - about like scoping in java
29:19 - so basically um for java
29:22 - like you can have multiple variables in
29:26 - your program
29:26 - that have the same name but like as long
29:29 - as they're not in the same scope
29:31 - as long as they don't exist at the same
29:33 - time
29:34 - um there's not going to be a problem so
29:38 - basically over here we have like think
29:40 - of like these parameter names
29:42 - or these parameter variable names as
29:44 - like they're more like temporary
29:46 - variables
29:47 - so these these parameter like variables
29:51 - exist in a local scope and what i mean
29:53 - by that is
29:54 - they only exist inside of this method
29:58 - so outside this method t technically
30:00 - does not exist
30:01 - and you cannot access it so that's why
30:04 - over here i can have another variable
30:07 - that's completely separate from the t
30:09 - and truck.java
30:11 - and still call it t okay
30:14 - so if you run this the way it is now
30:16 - will it still work properly
30:17 - yep
30:21 - so yeah that's why like over here
30:24 - um i can have this variable be called t
30:28 - and it can be a totally like separate
30:31 - thing
30:32 - from the t inside of here because over
30:34 - here um
30:36 - the variable name t only exists inside
30:39 - of this method
30:40 - outside of it like java doesn't java
30:43 - won't see it basically
30:46 - okay thank you yeah no problem
30:50 - um any other questions
30:54 - sweet so let's see
30:58 - we have like nine minutes left so
31:01 - um if you guys have like
31:05 - i guess i can go over the quiz questions
31:07 - really quickly
31:08 - um but if you guys have any other
31:12 - questions like
31:12 - i'm also free to answer them right now
31:18 - sweet so let's go over
31:22 - the quest question quiz questions then
31:24 - so
31:26 - question number one um in java can a
31:29 - subclass inherit more
31:30 - from more than one class yeah so the
31:32 - answer is false
31:34 - um in other languages you can inherit
31:37 - from multiple classes
31:38 - but in java it's strictly only one class
31:43 - all right question two a subclass has a
31:46 - blank relationship
31:47 - with their parent class so is it
31:51 - um a is a type of um b is a
31:55 - c implements and then d all of the above
31:59 - so b is the correct answer a subclass
32:03 - is a parent class so again like
32:07 - a subclass basically is the base class
32:10 - plus a little bit of more information
32:13 - and behaviors
32:15 - um for c like there that is
32:18 - implements is also like a java keyword
32:21 - for something called
32:22 - um something called interfaces and that
32:25 - deals more with polymorphism
32:27 - if you guys are interested in more like
32:30 - complex
32:30 - co like java coding you can also check
32:33 - out interfaces
32:36 - all right so what keyword would you use
32:38 - to refer to a subclasses parent class
32:41 - is it a parent b super c
32:44 - root and d supra
32:48 - yup so it the
32:51 - super class like the way you access
32:54 - a super cla or a parent class is through
32:58 - the um the super keyword that's why i'm
33:01 - also like calling it super class
33:04 - like and mixing them up together all
33:07 - right so
33:08 - number four is a class in a class
33:11 - diagram
33:12 - what marks inheritance so like what
33:15 - represents inheritance
33:17 - all right so we have two answers for b
33:19 - that's correct
33:20 - i feel like maybe making this when we
33:23 - made this crazy shiv
33:26 - we should have mixed all these answers
33:28 - together i feel like all the answers are
33:29 - b
33:30 - but yeah so the arrow must point away
33:33 - from the parent class
33:35 - b or towards the parent class and away
33:37 - from the child
33:38 - because that sort of shows sort the
33:41 - one-way street
33:42 - of inheritance
33:46 - all right so number five which of the
33:48 - following
33:49 - is correct if otter is a subclass of
33:52 - animal
33:56 - yep so in order to show that
34:00 - like when you're declaring a class um
34:03 - for a subclass you have to have class
34:05 - child class
34:06 - extends parent class
34:11 - and then finally in this diagram
34:14 - fish is a subclass of animal so which is
34:18 - not a field
34:19 - animal can act yep
34:22 - so again like a parent class can't
34:24 - access the fields
34:26 - of a child class so it's only that a
34:30 - subclass can access the field of a
34:31 - parent class
34:36 - all right so that's basically it for um
34:51 - you

Cleaned transcript:

this is the um week 10 of the java lessons and today we'll just be going over inheritance um if you have any questions about like the slides or anything else feel free to just jump in and ask or put your question in chat and yep let's get to it so for today we're just going to be going over a brief introduction and review about classes um i'll also be going over like class diagrams how to read them um and then finally we're going to be talking about subclasses or like inheritance and how to make subclasses so again um we had for the past few weeks we've been talking a little bit about classes so just remember that like classes are kind of blueprints to objects they can have like they can have um states and properties so like for example a dog class can hold information like the color or the name of the dog they can also have behaviors or methods so a dog can bark or it can run also i remember last lesson um we were talking about um i talked about making a general list of terminology that that can be like pretty confusing or like terms that are the same and the ones that are different so here's that link um this is basically a general list of different kinds of terms that you'll often see like people use in like programming um some are java specific some aren't java specific so this is just like grouping all these terms together and then giving you basic definitions and examples of that so if you're ever confused about like what i'm talking about um feel free to ask in chat or like interrupt me or you can also try like refer to this as a little bit of a dictionary and also if like you're if you're confused about other terms that aren't on this list um just give me a heads up and i'll i'll like add to this document all right so we talked about classes for the past two weeks and now we're just gonna start going into more conceptual um things so the first one is like java is an objectoriented programming language so and as an objectoriented language it has four major principles um these four are encapsulation abstraction inheritance and polymorphism um you don't have to worry about these three so like encapsulation abstraction polymorphism don't worry about them um if you're curious about what they are you can always like look them up in your own free time um the one we're going to be focusing on today is inheritance so inheritance is sort of it's it's just like inheritance in the real world it's a class could inherit like the properties and behaviors of a parent class and usually when we're talking about um inheritance or like a real example is like you can inherit like um looks and behaviors from your parent or like um yeah or stuff like that so basically that's what inheritance also is in um in objectoriented programming so a parent class or a child class can inherit a behavior or a state from its parent class and when we're talking about like making subclasses we think of it as having an is a relationship so let's say we have um a class called animal and it has a subclass called fish so we think about it as fish is an animal so it gets all the behaviors and the states or and the properties of the animal parent class this is a little different from when we're talking about things like um like class variables so a animal can have a um age or a gender but that's different from having a subclass so like a fish is an animal and an animal can have an age so basically that's how um subclasses are different from si let's say like just having um a like a class variable or a field um yeah so basically for class diagrams um obviously this is an actual like java code but these are basically each box is a visual representation of like a class and what this class has so yeah like donna was saying um the top portion of this box these are the attributes or the fields of the class and then this bottom half is the um the methods this class can have so basically like the box itself is the class the top part is the information you can hold and the bottom part is what it can do so what methods does it have and now you'll notice that like we have these three other classes at the bottom and they all have arrows pointing to animal so what these arrows mean is that these um classes at the bottom are inheriting from animal so basically um fish can have its own like its own properties and its own methods but also inherits from animals so inherit these behaviors and these in for this information from animal so and the reason the arrow is pointed up is because inheritance is sort of a oneway street so fish can access like all the information and methods from animal but animal can't access the information yeah so don't worry too much about the pluses and minus um i think it's like it's a little nuanced like syntax stuff but right now we're just focusing on like in general what class diagrams are and more importantly like what these arrows mean so the reason like um i'm showing you guys these class diagrams is that like um for when you're like doing programming sometimes like you're like you're focused so much on syntax that um that you miss like the conceptual um the conceptual ideas so it's important to separate like like the syntax so like how to do something in a certain language from like the general concept so especially when you're like writing inheritance and eventually like you'll write programs that do more than just like inherit from like having a class in here sort of another class um it's important to keep like the concept of classes separate from like the actual code itself that way like you'll think more about the class design and not about like oh like how like or i guess like in another way it's like that you're focusing on the big picture and not like being stuck on tiny details all right so now that we've talked about just like inheritance on a conceptual level now we'll get to um actually like talking about how to implement inheritance in java so first off um in order to implement a subclass you'll basically use extends keyword so in like when you declare a class instead of having like just um class x it'll be having class um child extends parent class and then like the class step edition at the bottom um again like subclasses inherit methods and fields from their parent class and then in order to refer to the parent class you'll use the super keyword and inside the constructor you should always use like super parentheses in the constructor um what this does is it basically cause the parent class constructor first so that initializes all of like the parent methods and fields and then in java you can only inherit one class so this is more java specific but like for java you can only have one parent class so you can't inherit um from a bunch of different parents so based when we look at this um or i guess like we can also look at this diagram so like this is just another class example of a class diagram this one's way more simple like way simpler than the one we saw earlier um you can on your own like free time i would recommend you sort of try and practice um implementing this diagram in java so um next ignore the demo easy link so i'm just gonna actually just like like give you guys some live code of be like creating a custom class and showing you guys like how inheritance works so first um let's actually let's um let's not do this okay i'm just gonna go back and then um i'm gonna actually implement let's see i'm gonna implement the car class and then we'll implement a truck class that'll inherit from the car class so i'm just going to create a new file to make everything more more neat so first i'm just going to have a quick class card and inside this car class if i go back into into the class diagram um basically it has three um three fields so first one is color horsepower and and number of seats so i'm just gonna instantiate three let's say or they have to be public fields for me to show you how inheritance works um three public uh attributes so color horsepower and num seats so public stream color public eight and then let's actually i um let's say one class method so i want to have a method um drive just to show you guys like how inheritance works with methods too so first i'm gonna create the car constructor and again like when you create an instructor or a constructor you wanna pass in all the values to instantiate or yeah to instantiate these three um class fields so i want to pass in a string let's say c in h and then in so this dot color equals c this dot first power equals h and then this dot num receipt and then for this method drive public uh let's say void drive so this is a public instance method and that returns nothing called drive and then for drive let's just print out that or system.out.printline um driving let's just say it prints out driving so now i've insert or created a class sweet so i basically just um declared these three variables made a constructor and then made a quick public method so next let's get to a sub class so the subclass will be truck.java and for this subclass i wanted to inherit all the um fields from car and then add an extra class or add an extra field called trailer so for class truck in order to um declare a class as a subclass of another class i'm going to have to use the extends keyword so this will extend the um the from the car class so in other words it would hear all the values from the card class so when i'm in my field like or when i'm in the class basically now truck has all that has access to all of these three um fields and also this public method and then now i want to add on another um class field so truck or trailer and let's make it a public let's say it's a integer trailer and then um i'm going to create the constructor so inside a constructor for a subclass you should always call super first and notice how this kind of just looks like another constructor and this is basically what it is it's because it calls a constructor for the parent class so when i'm on when i'm calling the constructor for a truck class the first thing i'll do is java will do is they'll see the super line it'll actually call this car constructor so it can basically create like all of or um it can basically instantiate all of the values for the car parent class so because of that um we should also pass in like all the parameters that are required in the car constructor so um we'll have to pass in a string and two integers so that we can basically instantiate all the values in the or actually no i think i'm i'm doing this drawing sorry so you'll just have to call this super to create instance and you can actually just like now that you've um created instance of super you can basically um access these three values so this that color equals let's say all trucks are red for now and then this.horsepower i'm actually not too familiar with cars so let's just say 18. and then this thought numb seeds so basically after you create you sort of create instance using like this super line um you can actually access all the three values in car just by using this dot whatever and then finally um i actually need to create a parameter over here you declare the value of um trailer so this dot trailer equals all right and then so in this main method we can have um let's instantiate a car first car c equals new car um blue or i4 so this will create a car with the color blue um four horsepower and then four seats so we can do like a system oh that's good my and then now we can also create a truck key and then do something like system.out.printline t.n seats and let's see if this runs okay all right my bad so super actually does call the constructor yeah so sorry about that guys so basically um this super is just gonna call the constructor of the super class so the parent class and then as you can see like over here um truck can basically inherit the fields of the car class and then it can also access like whatever information the car has let me actually run this updated so in this main method i've created i first created like a car um object that has um the color blue four horsepower and um four seats and i just printed out the number of seats for the car let me actually add like car number of seats or c so over here i just print out the number of seats for um the car c and then over here i've and i think or i've instantiated a truck object that takes in four which is the number of trailers and then remember that inside of truck we've already passed in parameters for the um parent class so all trucks will be red have 18 horsepower and eight seats and the only thing that will be different between them is the number of trailers so i've just instantiated a new truck um that's four trailers and then over here i'm just gonna i'm gonna copy this over first and then i'm just gonna print out the number of seats 40. and what this will do is it should print out um 18 or sorry 8 because eight is the number of seats for all um trucks and then finally what i do is i'll actually access um a method in t's parent class so inside the um inside the cart class so for car.java i've created a public void method called drive and all that prints out is driving and i'm just showing in this main method that even inside like even for a subclass i can access the parent classes public methods so when you um run it it'll just print out number of seats for c is four number of seats for t is eight and then driving and then someone asked in chat why can't we pass these three values as arguments in the super method um yeah i sorry i made a mistake in that part so for the super method this is the constructor for the parent class so we'll have to pass in like three valleys yeah sorry about that um anything else so just to um show you guys some more um when i'm creating like or i guess like i could explain what like why droplet cause makes sense so um basically for for like especially for java um when you're creating like a subclass sort of think about it as you're building on top of the parent class so parent class is kind of like this base class and then you're sort of adding new um new fields and methods to it so that's why it's called like truck extends car because truck is extending the amount of information and behaviors that the car can do so that's also why like for your parent classes your parent classes can't access the um the the fields and methods of their child class because their child class is building on top of the parent class the parent class doesn't just doesn't have the information that the um the child class has it's um yeah i went like you can like you can read up more about like jvm and like different java compilers but um but basically what happens is like the first thing like when the first thing you have to do for a java program is to actually compile it um replit actually sort of hides that away from you because when you click run um it will actually compile first and then run but um when you're working on java like working a java program on your own um if you're not using like an ide like eclipse or vs code you actually have to compile the java program yourself and the compiler will just like it'll read all the syntax um first it'll do like syntax checking then it'll like it'll look at your dependencies so it'll see like oh i have like i have something called car and i have something called truck and these are classes so do i have like do i have this class defined inside of like these other files in these other java files and then finally it'll like it'll like it'll do other optimization stuff but um after that like you'll have to actually execute the run command and then that's when like um it'll just execute the main function like line by line so when it sees the the command on line 14 t dot drive it goes uh it it refers to truck.java or it refers to which one truck or car.java what does it refer to to print out the word driving period so basically um it'll refer to first it'll refer to truck.java i know see like oh truck is uh is a subclass of car so truck extends car so then it'll refer to car.car.java or the card class and then see that has a definition for drive so that's basically like how in a different way like i think like maybe it's sort of the syntax that might be confusing for you um so let's actually ignore like ignore the java syntax um and just draw like a little class diagram of like or i guess not even a class diagram but sort of um a visual representation a different way of like representing subclasses and classes so let's say i have this class um this isn't a class diagram by the way so this is just like more like a drawing of a class so let's say i have this class called car and inside of car has like a bunch of different information so like um let's say for now this card just has um number of seats and again like this will this is like this isn't any sort of java code so this is um just gonna be a different way of seeing classes and subclasses and let's say it also has like an action called drive so this is basically my visual representation of what a car is and next we have we basically want the subclass car out so we want to make a subclass called truck so what the subclass does is it actually just builds on top of or let's i'm just gonna say it just builds off of car so this is let's make this green and then we'll call this truck so for truck we add on a little bit more information so we want to add on information about the number of trailers and this is an integer so visually like um this entire thing like both the square and the triangle is what the truck is so it's a car but it's a car with a little bit of extra information about it so that's why um over here for line 14 we can access this drive method because like in the end a car or a truck is a car so can also have this method called drive okay i think i think i understand what's confusing you're i think you're having some confusion about like scoping so um let me actually let's change this um this very warning because i think like you're you're being confused about um we have like inside of the truck class we have a parameter called t but we also have like another like variable over here called t and it's a little confusing yeah um the so i can like i i can just like go over a little bit about like scoping in java so basically um for java like you can have multiple variables in your program that have the same name but like as long as they're not in the same scope as long as they don't exist at the same time um there's not going to be a problem so basically over here we have like think of like these parameter names or these parameter variable names as like they're more like temporary variables so these these parameter like variables exist in a local scope and what i mean by that is they only exist inside of this method so outside this method t technically does not exist and you cannot access it so that's why over here i can have another variable that's completely separate from the t and truck.java and still call it t okay so if you run this the way it is now will it still work properly yep so yeah that's why like over here um i can have this variable be called t and it can be a totally like separate thing from the t inside of here because over here um the variable name t only exists inside of this method outside of it like java doesn't java won't see it basically okay thank you yeah no problem um any other questions sweet so let's see we have like nine minutes left so um if you guys have like i guess i can go over the quiz questions really quickly um but if you guys have any other questions like i'm also free to answer them right now sweet so let's go over the quest question quiz questions then so question number one um in java can a subclass inherit more from more than one class yeah so the answer is false um in other languages you can inherit from multiple classes but in java it's strictly only one class all right question two a subclass has a blank relationship with their parent class so is it um a is a type of um b is a c implements and then d all of the above so b is the correct answer a subclass is a parent class so again like a subclass basically is the base class plus a little bit of more information and behaviors um for c like there that is implements is also like a java keyword for something called um something called interfaces and that deals more with polymorphism if you guys are interested in more like complex co like java coding you can also check out interfaces all right so what keyword would you use to refer to a subclasses parent class is it a parent b super c root and d supra yup so it the super class like the way you access a super cla or a parent class is through the um the super keyword that's why i'm also like calling it super class like and mixing them up together all right so number four is a class in a class diagram what marks inheritance so like what represents inheritance all right so we have two answers for b that's correct i feel like maybe making this when we made this crazy shiv we should have mixed all these answers together i feel like all the answers are b but yeah so the arrow must point away from the parent class b or towards the parent class and away from the child because that sort of shows sort the oneway street of inheritance all right so number five which of the following is correct if otter is a subclass of animal yep so in order to show that like when you're declaring a class um for a subclass you have to have class child class extends parent class and then finally in this diagram fish is a subclass of animal so which is not a field animal can act yep so again like a parent class can't access the fields of a child class so it's only that a subclass can access the field of a parent class all right so that's basically it for um you
