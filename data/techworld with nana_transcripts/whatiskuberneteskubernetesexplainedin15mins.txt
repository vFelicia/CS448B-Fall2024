00:00 - so in this video I'm going to explain
00:01 - what kubernetes is we're going to start
00:04 - off with the definition to see what
00:06 - official definition is and what it does
00:08 - then we're going to look at the problem
00:10 - solution case study of Cabezas basically
00:13 - why did kubernetes even come around and
00:16 - what problems does it solve we're gonna
00:19 - look at the basic architecture what are
00:22 - the master nodes and the slave nodes and
00:24 - what are the kubernetes processes that
00:27 - actually make up the platform mechanism
00:29 - then we going to see some basic concepts
00:32 - and the components of kubernetes which
00:34 - are pots and containers and services and
00:38 - what is the role of each one of those
00:40 - components and finally we going to look
00:42 - at a simple configuration that you as a
00:46 - kubernetes cluster user would use to
00:49 - create those components and configure
00:51 - the cluster to your needs so let's jump
01:00 - in right into the definition what is
01:02 - kubernetes so kubernetes is an open
01:04 - source container orchestration framework
01:07 - which was originally developed by google
01:10 - so on the foundation it manages
01:12 - containers be docker containers or from
01:15 - some other technology which basically
01:18 - means that kubernetes helps you manage
01:21 - applications that are made up of
01:23 - hundreds or maybe thousands of
01:25 - containers and it helps you manage them
01:29 - in different environments like physical
01:33 - machines virtual machines or cloud
01:35 - environments or even hybrid deployment
01:38 - environments so what problems does
01:41 - kubernetes solve and what are the tasks
01:44 - of a container orchestration tool
01:46 - actually so to go through this
01:48 - chronologically the rise of micro
01:51 - services cause increased usage of
01:54 - container technologies because the
01:56 - containers actually offer the perfect
01:57 - host for small independent applications
02:02 - like Microsoft a nurse and the micro
02:06 - service technology actually resulted in
02:09 - applications that they're now comprised
02:11 - of hundreds or sometime
02:13 - maybe even thousands of containers now
02:16 - managing those loads of containers
02:18 - across multiple environments using
02:21 - scripts and self-made tools can be
02:23 - really complex and sometimes even
02:26 - impossible so that specific scenario
02:29 - actually caused the need for having
02:32 - container orchestration technologies so
02:35 - what those orchestration tools like
02:37 - kubernetes do is actually guarantee
02:40 - following features one is high
02:43 - availability in simple words high
02:46 - availability means that the application
02:49 - has no downtime so it's always
02:50 - accessible by the users a second one is
02:54 - scalability which means that application
02:57 - has a high performance it loads fast and
03:00 - users have a very high response rates
03:04 - from the application and the third one
03:06 - is disaster recovery which basically
03:09 - means that if an infrastructure has some
03:11 - problems like data is lost or the
03:13 - server's explode or something bad
03:15 - happens with the server center the
03:17 - infrastructure has to have some kind of
03:19 - mechanism to pick up the data and to
03:21 - restore it to the latest state so that
03:23 - application doesn't actually lose any
03:25 - data and the containerized application
03:28 - can run from the latest stayed after the
03:31 - recovery and all of these are
03:33 - functionalities that container
03:35 - orchestration technologies like
03:37 - kubernetes offer
03:41 - so how does the kubernetes basic
03:43 - architecture actually look like the
03:46 - kubernetes cluster is made up with at
03:48 - least one master node and then connected
03:52 - to it you have a couple of worker nodes
03:55 - where each node has a cubelet process
03:59 - running on it and cubelet is actually a
04:01 - kubernetes process that makes it
04:04 - possible for the cluster to talk to each
04:07 - other to communicate to each other and
04:09 - actually execute some tasks on those
04:12 - nodes like running application processes
04:14 - each worker node has docker containers
04:18 - of different applications deployed on it
04:20 - so depending on how the workload is
04:23 - distributed you would have different
04:26 - number of docker containers running on
04:28 - worker nodes and worker nodes are where
04:31 - the actual work is happening so here is
04:34 - where where your applications are
04:36 - running so the question is what is
04:38 - running on master node master node
04:41 - actually runs several kubernetes
04:44 - processes that are absolutely necessary
04:47 - to run and manage the cluster properly
04:50 - one of such processes is an API server
04:53 - which also is a container an API server
04:57 - is actually the entry point to the
04:59 - kubernetes cluster so this is the
05:01 - process which the different kubernetes
05:03 - clients will talk to like UI if you're
05:06 - using kubernetes dashboard an API if
05:09 - you're using some scripts and automating
05:12 - technologies and a command-line tool so
05:15 - all of these will talk to the API server
05:17 - another process that is running on
05:19 - master node is a controller manager
05:22 - which basically keeps an overview of
05:24 - what's happening in the cluster whether
05:26 - something needs to be repaired or maybe
05:29 - if a container died and it needs to be
05:31 - restarted etc and another one is
05:34 - scheduler which is basically responsible
05:37 - for scheduling containers on different
05:40 - nodes based on the workload and the
05:43 - available server resources on each node
05:46 - so it's an intelligent process that
05:49 - decides on which worker node the next
05:52 - container should be scheduled on
05:55 - based on the available resources on
05:57 - those worker notes and the load that
05:59 - that container meets and another very
06:02 - important component of the whole cluster
06:04 - is actually an etcd
06:06 - key value storage which basically holds
06:09 - at any time the current state of the
06:12 - kubernetes cluster so it has all the
06:14 - configuration data inside and all the
06:17 - status data of each node and each
06:20 - container inside of that node and the
06:22 - backup and restore that we mentioned
06:24 - previously is actually made from these
06:27 - etcd snapshots because you can recover
06:30 - the whole cluster state using that etcd
06:33 - snapshot and last but not least also a
06:37 - very important component of kubernetes
06:38 - which enables those notes
06:41 - worker notes master notes talk to each
06:43 - other is the virtual network that spends
06:46 - all the notes that are part of the
06:49 - cluster and in simple words virtual
06:51 - network actually turns all the notes
06:54 - inside of the cluster into one powerful
06:57 - machine that has the sum of all the
07:00 - resources of individual notes one thing
07:03 - to be noted here is that work who knows
07:05 - because they actually have most load
07:09 - because they are running the
07:11 - applications on inside of it usually are
07:14 - much bigger and have more resources
07:16 - because they will be running hundreds of
07:19 - containers inside of them where is
07:21 - master node will be running just a
07:23 - handful of master processes like we see
07:26 - in this diagram so it doesn't need that
07:28 - many resources however as you can
07:30 - imagine master node is much more
07:32 - important than the individual worker
07:34 - notes because if for example you lose a
07:37 - master node excess you will not be able
07:40 - to access the cluster anymore and that
07:43 - means that you absolutely have to have a
07:45 - backup of your master at any time so in
07:49 - production environments usually you
07:51 - would have at least two masters inside
07:53 - of your kubernetes cluster but in more
07:56 - cases of course you're going to have
07:57 - multiple masters where if one master
08:00 - node is down the cluster continues to
08:04 - function smoothly because you have other
08:06 - masters available so now
08:09 - look at some kubernetes basic concepts
08:11 - like pots and containers in kubernetes
08:13 - pod is the smallest unit that you as a
08:17 - kubernetes user will configure and
08:20 - interact with in pod is basically a
08:23 - wrapper of a container and on each
08:27 - worker node you're gonna have multiple
08:29 - pods and inside of a pod you can
08:33 - actually have multiple containers
08:34 - usually per application you would have
08:38 - one pod so the only time you would need
08:40 - more than one containers inside of a pod
08:43 - is when you have a main application that
08:46 - needs some helper containers so usually
08:50 - you would have one pod per application
08:53 - so a database for example would be one
08:56 - pod a message broker will be another pod
08:59 - a server will be again another pod in
09:01 - Europe no J's application for example or
09:04 - a java application will be its own pod
09:07 - and as we mentioned previously as well
09:09 - there is a virtual network dispense the
09:12 - kubernetes cluster so what that does is
09:15 - that it assigns each pod its own IP
09:18 - address so each pod is its own self
09:22 - containing server with its own IP
09:24 - address and the way that they can
09:27 - communicate with each other is we using
09:29 - that internal IP addresses and to note
09:33 - here we don't actually configure or
09:36 - create containers inside of kubernetes
09:39 - cluster but we only work with the pods
09:41 - which is an abstraction layer over
09:43 - containers and pod is a component of
09:47 - kubernetes that manages the containers
09:50 - running inside itself without our
09:53 - intervention so for example if a
09:55 - container stops or dies inside of a pod
09:58 - it will be automatically restarted
10:00 - inside of the pod however pods are
10:05 - ephemeral components which means that
10:08 - pots can also die very frequently and
10:11 - when a pod dies a new one gets created
10:14 - and here is where the notion of service
10:17 - comes into play so what happens is that
10:20 - whenever a pod gets restarted or weak
10:22 - a new pod is created and it gets a new
10:26 - IP address so for example if you have
10:29 - your application talking to a database
10:32 - pod using the IP address the pods have
10:35 - and the pod restarts it gets a new IP
10:37 - address obviously it would be very
10:41 - inconvenient but just that IP address
10:43 - all the time so because of that another
10:46 - component of Cabrini's called service is
10:48 - used which basically is an alternative
10:53 - or a substitute to those IP addresses so
10:56 - instead of having this dynamic IP
10:58 - addresses their services sitting in
11:02 - front of each pod that talk to each
11:04 - other so now if a pod behind the service
11:08 - dies and gets recreated the service
11:11 - stays in place because their life cycles
11:14 - are not tied to each other and the
11:16 - service has two main functionalities one
11:19 - is an IP address so it's a permanent IP
11:22 - address which you can use to communicate
11:24 - with between the pods and at the same
11:27 - time it is a load balancer
11:31 - so now that we have seen the basic
11:33 - concepts of kubernetes how do we
11:35 - actually create those components like
11:37 - pods and services to configure the
11:40 - kubernetes cluster all the configuration
11:42 - in kubernetes cluster actually goes
11:45 - through a master node with the process
11:47 - called API server which we mentioned
11:49 - briefly earlier so kubernetes clients
11:52 - which could be a UI a kubernetes
11:54 - dashboard for example or an API which
11:57 - could be a script or curl command or a
12:00 - command line tool like cube CTL they all
12:03 - talk to the API server and they send
12:05 - their configuration requests to the API
12:07 - server which is the main entry point or
12:10 - the only entry point into the cluster in
12:12 - this requests have to be either in
12:15 - yellow format or JSON format and this is
12:18 - how a example configuration in the ML
12:21 - format actually looks like so with this
12:23 - we are sending a request to kubernetes
12:25 - to configure a component called
12:28 - deployment which is basically a template
12:31 - or a blueprint for creating pots and in
12:33 - this specific configuration example we
12:36 - tell kubernetes to create to replica
12:39 - pots for us called my app with each pod
12:43 - replica having a container based on my
12:46 - image running inside in addition to that
12:49 - we configure what the environment
12:52 - variables and the port configuration of
12:54 - this container inside of the pot should
12:57 - be and as you see the configuration
13:00 - requests in kubernetes our declarative
13:03 - form so we declare what is our desired
13:05 - outcome from kubernetes and kubernetes
13:08 - tries to meet those requirements meaning
13:11 - for example since we declare we want to
13:14 - replica pots of my app deployment to be
13:17 - running in the cluster and one of those
13:20 - pots dies the controller manager will
13:22 - see that the east and shoot states now
13:25 - are different the actual state is one
13:27 - part our desired state is two so it goes
13:31 - to work to make sure that this desired
13:33 - state is recovered automatically
13:37 - restarting the second replica of that
13:39 - pot and this is how kubernetes
13:41 - configuration works with all of its
13:43 - component
13:44 - be the parts or the services or
13:46 - deployments what have you thanks for
13:50 - watching the video I hope it was helpful
13:51 - and if it was don't forget to like it if
13:54 - you want to be notified whenever a new
13:56 - video comes out then subscribe to my
13:58 - channel if you have any questions if
14:01 - something wasn't clear in the video
14:02 - please post them in a comment section
14:04 - below and I will try to answer them so
14:07 - thank you and see you in the next video