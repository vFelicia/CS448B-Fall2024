00:00 - in this video we're going to talk about
00:02 - what is githubs and why it became
00:04 - so popular the short explanation of git
00:07 - ups is
00:08 - infrastructure is code done right with
00:11 - all the best practices
00:12 - now let's see a bit longer explanation
00:15 - so it all starts with infrastructure as
00:18 - code
00:19 - as you know the infrastructure's code
00:21 - concept is when you define your
00:23 - infrastructure
00:24 - as code instead of manually creating it
00:27 - this makes our infrastructure much
00:29 - easier to
00:30 - reproduce and replicate but note that
00:34 - infrastructure's code actually evolved
00:36 - into defining
00:37 - not only infrastructure but also
00:40 - network as code or policy as code and
00:43 - configuration is called etc
00:45 - so it's not only about infrastructure
00:47 - anymore
00:48 - these are all types of definitions as
00:51 - code
00:51 - or as they also call it xs code
00:55 - so in x as code unified infrastructure
00:59 - and configuration network and so on in
01:02 - code so for example instead of manually
01:04 - creating servers and
01:06 - network and all the configuration around
01:09 - it
01:09 - on aws and creating kubernetes cluster
01:13 - with certain components
01:15 - you define all of these in a terraform
01:17 - code or insible code
01:19 - and kubernetes manifest files and you
01:22 - have a bunch of
01:23 - yaml files or other definition files
01:26 - that describe your infrastructure your
01:28 - platform and its configuration
01:31 - now how do many engineering teams write
01:34 - and
01:34 - use infrastructure as code or x as code
01:38 - you as a devops engineer will probably
01:41 - create all these files
01:42 - locally on your machine you try to test
01:45 - it
01:46 - and once done execute them also from
01:49 - your computer
01:51 - so all these files are actually stored
01:53 - locally on your computer
01:54 - or you may even create a git repository
01:58 - for your infrastructures code and store
02:00 - all these files
02:01 - on git so you have a version control for
02:04 - your infrastructure code
02:06 - and other team members can fetch the
02:08 - code as well
02:09 - and collaborate but when you make any
02:12 - changes to the code you may not have a
02:14 - defined procedure
02:15 - like pull requests you may just have a
02:18 - main branch and when you change the code
02:20 - you commit it directly
02:21 - into the main branch as well as if
02:24 - someone else in the team changes code
02:26 - they can commit directly into the main
02:29 - branch
02:30 - so no code reviews no collaboration on
02:32 - the changes
02:34 - also when you commit your
02:36 - infrastructure's code changes
02:38 - into the repository no automated tests
02:41 - are running to test these code changes
02:44 - maybe you committed invalid yaml files
02:46 - or maybe you made
02:48 - a typo and the attribute names are wrong
02:51 - or maybe your code changes will break
02:53 - something in the infrastructure
02:55 - or your application environment now once
02:58 - you make the changes
03:00 - how do you apply these changes on the
03:02 - actual
03:03 - infrastructure or a platform how do you
03:05 - execute them
03:06 - you'll do it manually from your laptop
03:09 - you will do
03:10 - cube ctl apply or execute terraform or
03:13 - instable command
03:14 - etc so to execute the code changes
03:18 - each team member must access the
03:20 - kubernetes cluster
03:21 - or aws infrastructure and apply changes
03:25 - there from their local machine and this
03:28 - can make it hard to trace
03:30 - who executed what on the remote servers
03:32 - and have a history of
03:34 - changes applied to the infrastructure
03:37 - and if you made any mistakes in the code
03:40 - wrong configuration wrong attributes
03:43 - you will know about these problems only
03:45 - once you apply them
03:47 - so untested config changes end up in the
03:50 - development environment
03:51 - where you can then test whether you
03:53 - broke something or not
03:55 - and after manually testing the changes
03:58 - on the development environment
03:59 - you will then also from your local
04:02 - computer
04:02 - apply the same changes to the staging
04:05 - and then production environments
04:07 - so even though we have an
04:09 - infrastructures code
04:11 - which already has lots of benefits our
04:14 - process is still mostly
04:15 - manual and inefficient so that's where
04:19 - github's
04:20 - concept comes in to basically treat the
04:23 - infrastructure as code
04:24 - the same way as the application code so
04:27 - in github's practice
04:29 - we have a separate repository for the
04:31 - infrastructure is code
04:32 - project or xs code project
04:36 - and a full devops pipeline for it
04:39 - so let's see how this works and more
04:41 - importantly
04:42 - why is it so useful with github's
04:45 - infrastructure as code is hosted on a
04:48 - git repository
04:50 - where it's version controlled and allows
04:52 - team collaboration
04:54 - that's the first step now when you make
04:57 - changes instead of just pushing to the
05:00 - main branch
05:01 - you go through the same pull request
05:03 - process as for your application code
05:06 - so anyone in the team including junior
05:09 - engineers
05:10 - can create a pull request make changes
05:13 - to the code
05:14 - and collaborate with other team members
05:17 - on that pull request
05:18 - for these changes you will have a ci
05:21 - pipeline
05:22 - that will validate the config files and
05:25 - test them
05:26 - just like you test application code
05:28 - changes
05:29 - after testing these commits other team
05:32 - members can approve the final
05:35 - changes this could be developers or
05:38 - security professionals
05:40 - or other senior operations engineers who
05:43 - will review
05:44 - and approve the pull request this way
05:47 - you have a tested
05:48 - well-reviewed config changes before they
05:51 - get applied
05:52 - in any environment so only after that
05:56 - changes will be merged back into the
05:58 - main branch
05:59 - and through a cd pipeline get deployed
06:02 - to the environment
06:04 - whether it's changing something in
06:06 - kubernetes cluster
06:07 - or updating the underlying aws
06:10 - infrastructure so you have an automated
06:14 - process
06:14 - which is more transparent and produces
06:17 - high quality
06:18 - infrastructure or configuration code
06:21 - where multiple people collaborate on the
06:24 - change
06:24 - and things get tested rather than
06:28 - one engineer doing all the stuff from
06:30 - their laptop manually
06:31 - that others don't see or can't review
06:38 - now we said that once merged into the
06:41 - main branch
06:42 - the changes will be automatically
06:43 - applied to the infrastructure
06:46 - through a cd pipeline right in
06:49 - githubs we have two ways of applying
06:51 - these changes
06:52 - these are push or pull based deployments
06:57 - push-based deployments is what we
06:59 - traditionally know from the application
07:01 - pipeline
07:02 - on jenkins or gitlab cicd etc
07:06 - application is built and pipeline
07:08 - executes a command
07:10 - to deploy the new application version
07:12 - into the environment
07:14 - so what is a pool model here you have
07:17 - an agent installed in the environment
07:20 - like in kubernetes cluster
07:22 - that actively pulls the changes from the
07:25 - git repository itself
07:27 - the agent will check regularly what is
07:30 - the state
07:31 - of the infrastructure code in the
07:33 - repository
07:34 - and compare it to the actual state in
07:37 - the environment
07:38 - where it's running if it sees there is a
07:41 - difference in the repository
07:43 - it will pull and apply these changes to
07:45 - get the environment
07:47 - from the actual state to the desired
07:50 - state
07:50 - defined in the repository examples of
07:54 - git ops tools that work with the pool
07:56 - base model
07:58 - are flux cd and argo cd
08:01 - which run inside kubernetes cluster and
08:04 - sync the changes from the git repository
08:07 - to the cluster
08:09 - before moving on i want to give a shout
08:11 - out to castin who made this video
08:13 - possible
08:14 - castings k10 is the data management
08:17 - platform for kubernetes
08:20 - k10 basically takes off most of the load
08:23 - of doing backup and restore in
08:25 - kubernetes
08:26 - from the cluster administrators it has a
08:28 - very simple ui so it's super
08:31 - easy to work with and has an intelligent
08:33 - logic which does
08:35 - all the heavy lifting for you for my
08:37 - viewers
08:38 - custom provided an ebook kubernetes
08:41 - backup and recovery for dummies
08:43 - which you can download for free so be
08:46 - sure to check it out in the video
08:47 - description
08:49 - and now let's see how git ops makes an
08:51 - easy
08:52 - rollback possible now when you have
08:55 - the version control for your code and
08:58 - the changes in the repository are
09:00 - automatically synced to the environment
09:03 - you can easily
09:04 - roll back your environment to any
09:06 - previous state in your code
09:08 - and that could be another big advantage
09:11 - for example
09:12 - if you make changes that break something
09:14 - in the environment
09:16 - so your cluster doesn't work anymore you
09:18 - can just do
09:19 - git revert to undo the latest changes
09:22 - and get the environment back to the last
09:25 - working state
09:30 - so overall this means that instead of
09:32 - spreading your infrastructure's code
09:34 - and configuration is code etc in
09:37 - different places
09:39 - and machines and basically having those
09:42 - files just lying around
09:43 - on your computer everything is stored
09:46 - centrally in a git repository and the
09:49 - environment
09:50 - is always synced with what's defined
09:53 - in that repository and this means that
09:56 - git repository becomes the single source
09:59 - of truth
10:00 - for your environment and of course
10:03 - this makes managing your infrastructure
10:06 - or your platform
10:07 - way easier and finally an important
10:10 - additional benefit
10:12 - is that git ops also increases
10:15 - security because now you don't have to
10:18 - give
10:18 - everyone in the team who needs to change
10:21 - something on the infrastructure
10:23 - or in kubernetes cluster direct access
10:26 - to it
10:27 - to execute the changes because
10:31 - it's the cd pipeline that deploys the
10:33 - changes
10:34 - not individual team members from their
10:37 - laptops
10:38 - but anyone on the team can propose
10:40 - changes
10:41 - to the infrastructure in the git
10:43 - repository through
10:45 - pull requests and once it's time
10:48 - to merge that pull request and
10:51 - apply those changes you can have a much
10:54 - narrower group of people who are allowed
10:58 - to
10:58 - approve and merge those changes into the
11:01 - main branch
11:02 - so that it gets applied and as a result
11:05 - you have less permissions to manage and
11:07 - a more secure environment
11:09 - so to summarize git ops is an
11:12 - infrastructures code with
11:14 - version control pull requests and ci cd
11:18 - pipeline now i hope you learned a lot in
11:20 - this video
11:22 - share with me in the comments what is
11:23 - your experience and what do you think
11:26 - generally about git ups with that
11:29 - thank you for watching and see you in
11:31 - the next video