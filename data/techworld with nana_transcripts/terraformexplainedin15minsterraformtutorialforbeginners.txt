00:00 - in this video we're gonna talk about
00:02 - terraform first I'm gonna explain to you
00:05 - what terraform is and what it's used for
00:07 - then we will see what is the difference
00:09 - between terraform and in Zabul and when
00:12 - to use each we will also look at the
00:15 - terraform architecture and commend as
00:18 - well as an example terraform
00:19 - configuration file after which you will
00:22 - have a good overview and understanding
00:25 - of how terraform actually works and how
00:28 - it does its job so first of all what is
00:31 - terraform terraform allows you to
00:34 - automate and manage your infrastructure
00:37 - and your platform and services that run
00:40 - on that infrastructure it's open source
00:43 - and it uses the clarity of language
00:45 - meaning you don't have to define every
00:49 - step of how these automation and
00:50 - management isn't done you just clear
00:52 - what you want the final result or end
00:55 - result and terraform will figure out how
00:58 - to execute it versus imperative style
01:01 - where you specify how to execute each
01:03 - step so as I said terraform is a tool
01:07 - for infrastructure provisioning so what
01:09 - does it mean exactly let's say you just
01:12 - started a project where you create some
01:14 - application and you want to set up an
01:16 - infrastructure from scratch where this
01:19 - application will run how does your
01:21 - infrastructure look like let's say you
01:23 - want to spin up several servers where
01:26 - you will deploy your five micro service
01:28 - applications that make up your
01:30 - application as docker containers and
01:33 - also you are going to deploy a database
01:36 - container you decide to use AWS platform
01:39 - to build your whole infrastructure on so
01:42 - first step will be to go to AWS and
01:45 - prepare the setup so the applications
01:48 - can be deployed there this means you
01:50 - create your private network space you
01:53 - create an employee server in situ server
01:57 - instances you install docker on each one
01:59 - of those plus any other tools that you
02:02 - might need for your application you set
02:04 - up security on your servers like
02:06 - firewalls you set up network etc once
02:10 - the infrastructure is prepared you can
02:11 - now deploy your
02:13 - docker applications or docker containers
02:16 - on that prepared infrastructure so as
02:18 - you see these are two different tasks or
02:21 - two separate steps of creating the whole
02:24 - setup
02:25 - one is provisioning the infrastructure
02:28 - preparing everything so the application
02:30 - can be deployed the second one is
02:32 - actually deploying the applications on
02:35 - it so you might even have two separate
02:37 - teams or two individuals who do these
02:41 - two separate tasks so a possible
02:43 - scenario DevOps team member configures
02:46 - the infrastructure and a developer then
02:48 - deploys the applications on the prepared
02:50 - infrastructure so where does terraform
02:53 - come into this whole thing terraform is
02:56 - used for the first part where you
02:58 - provision the infrastructure to prepare
03:01 - it for the application deployment
03:03 - creating the EPC spinning up the servers
03:06 - creating the security the AWS user with
03:10 - its permissions may be installing docker
03:12 - specific version on servers etc and
03:14 - obviously all of this needs to be done
03:16 - in a correct order because one task may
03:20 - be depends on the other now here I must
03:23 - mention something that a lot of people
03:25 - ask when it comes to terraform and that
03:28 - is what is a difference between ends
03:30 - bowl and terraform because they seem to
03:33 - be doing the same thing especially if
03:35 - you read the official definitions or
03:37 - official documentation they're sound
03:40 - like the same tools so the question is
03:43 - pretty logical what is the difference
03:44 - between them and which one should I use
03:46 - for my project so let's say the
03:49 - similarities and differences between
03:51 - these two using our example setup first
03:55 - of all terraform and in Siebel are both
03:58 - infrastructure as a code meaning they're
04:01 - both used to automate provisioning
04:04 - configuring and managing the
04:06 - infrastructure however terraform is
04:08 - mainly infrastructure provisioning tool
04:11 - that's where its main power lies but it
04:14 - also has possibilities to deploy
04:16 - applications in other tools on that
04:18 - infrastructure in Siebel on the other
04:21 - hand is mainly a configuration tool so
04:25 - once the infrastructure is provision
04:27 - and is it's there in Siebel can now be
04:30 - used to configure it and deploy
04:32 - applications install and update software
04:34 - on that infrastructure etc so as you see
04:38 - there overlaps of what each tool does
04:41 - and this creates the confusion other
04:44 - differences to consider in terms of
04:46 - those overlaps are in Siebel is more
04:49 - mature and terraform is relatively new
04:51 - and because of that is also changing
04:53 - dynamically and terraform is more much
04:57 - more advanced in orchestration so to
05:00 - summarize the difference terraform is a
05:03 - better tool for provisioning
05:04 - infrastructure and in Siebel is a better
05:06 - tool for configuring that infrastructure
05:09 - deploying installing applications and
05:11 - services on them so it's a common
05:14 - practice where DevOps engineers use the
05:16 - combination of these tools to cover the
05:19 - whole set up into end using both for
05:23 - their own strengths instead of just
05:25 - using one tool now if you want to learn
05:27 - more about in scible as well I have on
05:30 - video that I made about it where I
05:33 - explain exactly what ends bullies and
05:35 - how to use it so you can check it out
05:37 - and I also create another video where I
05:40 - will compare the infrastructure is a
05:42 - code tools like in Siebel chef terraform
05:46 - CloudFormation
05:47 - etc in more detail and also explain why
05:49 - each is best in one area even though
05:53 - they can do other tasks as well
05:55 - so if you want to see those videos and
05:58 - if you want to learn more then you can
06:00 - subscribe to my channel you can click
06:02 - the notification bell and stay tuned for
06:05 - the upcoming videos as well so now let's
06:08 - go back to our use case where we created
06:12 - the infrastructure using terraform and
06:15 - on AWS provision successfully for your
06:18 - project and you deployed the application
06:20 - on it
06:22 - now we decide that you want to add five
06:24 - more servers to the existing
06:26 - infrastructure to deploy more micro
06:28 - services because your team develops some
06:31 - more features and they need to be
06:33 - deployed and you also want to add some
06:35 - security configuration or maybe remove
06:38 - some stuff that you configure at the
06:40 - beginning
06:40 - so now we are in the phase of managing
06:44 - the existing infrastructure adding some
06:47 - stuff reconfiguring removing some stuff
06:50 - etc and using terraform you can make
06:52 - such adjustments to infrastructure
06:55 - pretty easily and this task of managing
06:59 - the infrastructure is just as important
07:02 - because once you've created the initial
07:04 - infrastructure for your project you will
07:06 - be continually adjusting and changing it
07:08 - and because of that you also need some
07:10 - automation tool that will do most of the
07:14 - heavy lifting for you so that you don't
07:16 - have to manually configure and do some
07:18 - stuff so once you are set up with
07:20 - terraform to create and change or
07:23 - maintain your infrastructure another
07:25 - useful thing or a common use case could
07:28 - be replicating that infrastructure let's
07:31 - say after you have tested this setup and
07:33 - everything works fine you decide now you
07:36 - want to release your application in
07:38 - production environments so you want to
07:41 - create a production environment that
07:42 - replicates this exact setup and keep the
07:46 - first as a development environment where
07:48 - you can test new features new micro
07:51 - services and updates before you launch
07:54 - it into production again you can use
07:56 - terraform here to automate that process
07:59 - so you can easily spin up an identical
08:02 - infrastructure and setup using the same
08:05 - tariffs run code that you use for the
08:07 - first setup the development environment
08:09 - setup and you can do the same to speed
08:12 - up at identical staging server as well
08:14 - so that makes these tasks also very easy
08:17 - so how does terraform do all this
08:21 - how does their firm actually connect to
08:23 - this infrastructure provider platforms
08:25 - and use all these technologies to
08:27 - provision stuff so for example how does
08:30 - terraform connect to AWS to create
08:32 - virtual space start ec2 instances
08:35 - configure networking etc in order to do
08:38 - the job terraform has two main
08:41 - components that make up its architecture
08:44 - the first one is telephones core and the
08:47 - core uses two input sources in order to
08:52 - do its job so we take cell phone
08:54 - figuration that you as a user right and
08:57 - where you defined what needs to be
09:00 - created or provisioned and the second
09:03 - one is there from state where Terra
09:05 - firme keeps the up-to-date state of how
09:07 - the current set up of the infrastructure
09:11 - looks like
09:12 - so what core then does is it takes this
09:15 - input and it figures out the plan of
09:19 - what needs to be done so it compares the
09:22 - state what is the current state what is
09:24 - the configuration that you desire the
09:27 - end result as I mentioned at the
09:29 - beginning and compares that and when it
09:32 - sees there is a difference so you want
09:34 - something else than what the current
09:36 - state is it figures out what needs to be
09:39 - done to get to that desired state in the
09:43 - configuration file so what needs to be
09:45 - created what needs to be updated deleted
09:48 - in which order on that infrastructure
09:50 - setup and the second component or the
09:53 - second part of the architecture are
09:56 - providers for specific technologies this
09:59 - could be cloud providers like AWS
10:02 - measurer or other infrastructure as a
10:05 - service platforms so for the
10:08 - infrastructure level tasks but terraform
10:11 - as I mentioned is also providers for
10:14 - more high-level components like
10:16 - kubernetes or other platform
10:18 - as-a-service tools even some software is
10:21 - a self-service tool so it gives you
10:23 - possibility to create stuff on different
10:27 - levels like create a AWS infrastructure
10:30 - then deploy or create kubernetes on top
10:33 - of it and then create services inside
10:36 - that or components inside that
10:38 - kubernetes cluster so it gives you all
10:40 - these possibilities and it does that
10:43 - through those providers terraform has
10:45 - over hundred providers for these
10:47 - different technologies and each provider
10:50 - then gives terraform user access to its
10:54 - resources
10:55 - so through AWS provider for example you
10:58 - have access to hundreds of AWS resources
11:01 - like it's two instances the AWS users
11:04 - etc with kubernetes provider you
11:08 - access to commodities resources like
11:10 - services and deployments and namespaces
11:13 - etc so this is how this works and this
11:15 - way terraform tries to help you
11:18 - provision and cover the complete
11:20 - application setup from infrastructure
11:23 - all the way to the application and this
11:25 - is your convenient but as I mentioned in
11:28 - the comparison between terraform and
11:31 - ansible
11:31 - Tara forms strength is actually in the
11:34 - infrastructure provisioning and for the
11:36 - other stuff you can use ansible or
11:39 - similar tools so once the core creates
11:43 - an execution plan based on the input
11:46 - from config file and state it then uses
11:49 - providers for specific technologies to
11:52 - execute the plane to connect to those
11:55 - platforms and to actually carry out
11:58 - those execution steps so now to also
12:02 - have an idea of how terraform
12:04 - configuration file looks like this is an
12:06 - example where you see AWS provider is
12:11 - configured and through the provider you
12:14 - now have two AWS resource like VPC you
12:18 - can create that with some attributes the
12:21 - same way you have the kubernetes
12:23 - provider here configured and through
12:25 - that now you can create a Cabrini's
12:27 - namespace resource where you pass some
12:30 - attributes and the syntax is very
12:32 - intuitive I would say basically define
12:35 - what she wants you want a resource of a
12:38 - certain technology or certain provider
12:40 - created and then you define its
12:42 - attributes and that's what terraform
12:45 - will create or do for you now one thing
12:47 - I mentioned the beginning and I want to
12:49 - go into detail is the declarative
12:53 - approach that Tara forms configuration
12:55 - files are written in and this is
12:57 - important to understand so what does
12:59 - declarative mean exactly when you create
13:02 - a terraform file instead of defining
13:05 - what steps to be executed to create a
13:07 - BBC or to spin up five ec2 instances or
13:11 - create the network configuration you
13:14 - define the end state you desire so you
13:17 - say I want five servers with network
13:20 - configuration like this and I
13:21 - one AWS user that has these permissions
13:25 - to access all the servers terraform go
13:29 - do that for me so instead of defining
13:31 - exactly what to do which is an
13:34 - imperative approach you define what the
13:36 - end result should be a declarative
13:39 - approach now for the initial setup this
13:42 - may not make much difference so when is
13:45 - the configuration of imperative and
13:46 - declarative approach it might actually
13:48 - look pretty similar but consider when
13:52 - you're updating your infrastructure like
13:54 - removing a server or adding another
13:56 - server or making other adjustments with
13:59 - imperative approach you would say in a
14:01 - configuration file remove two servers
14:04 - add a firewall configuration add some
14:07 - permissions to the AWS user etc so you
14:10 - give instructions of what to do with the
14:13 - clarity of approach like in terraform
14:15 - example you would say my new desired
14:18 - state is now seven servers this firewall
14:22 - configuration and user with this set of
14:25 - permissions do whatever needs to be done
14:27 - to get from the current state to the new
14:30 - desired state so now you don't have to
14:33 - actually calculate and decide how many
14:36 - service needs to be edie you say I want
14:39 - seven servers at the end that's what I
14:41 - want or you don't need to calculate and
14:43 - figure out how many permissions or which
14:45 - permissions you should add you just say
14:47 - I want this set of permissions to come
14:49 - out at the end so with the declarative
14:52 - approach if you just adjust the old
14:54 - configuration file and re execute it
14:56 - instead of adding the new set of
14:58 - instructions this is obviously very
15:01 - comfortable because your configuration
15:03 - files stays clean and small but also you
15:06 - always know what the current setup is
15:08 - just by looking at the configuration
15:10 - file because that's always the end
15:12 - result whereas in the first approach an
15:15 - imperative you have to somehow add this
15:18 - up and figure out the Delta between all
15:20 - the changes applied by multiple
15:22 - instructions so you've created the
15:24 - terraform file configuration file that
15:27 - defines your desired infrastructure set
15:29 - up on AWS now how do you make terraform
15:33 - take action terraform has
15:36 - commence you can execute to go through
15:39 - different stages which is pretty clear
15:41 - and straightforward the first command is
15:44 - refresh with this command terraform will
15:47 - query the infrastructure provider in our
15:50 - case AWS to get the up-to-date state so
15:54 - terraform will now know what is the
15:57 - current state of the infrastructure the
15:59 - next command is plenn remember i said
16:03 - the core is responsible for taking
16:05 - current state in your configuration file
16:08 - is input and decide based on the
16:10 - difference what needs to be done that's
16:13 - the plan
16:14 - so what terraform needs to do in order
16:16 - to achieve that desired state that you
16:19 - defined in a terraform configuration
16:21 - file if it's an initial setup it figures
16:24 - out all the steps to create the desired
16:26 - setup if it's an update it compares the
16:30 - existing setup with a new desired state
16:32 - and figures out what changes and
16:34 - adjustments need to be made in which
16:37 - order to create a new desired State for
16:41 - example at a new server and a new
16:43 - permission etc now this is just a plan
16:47 - this is where the core kind of
16:49 - constructs the the plain logically or
16:52 - what needs to be done the next command
16:54 - is the command where the actual
16:57 - execution happens and that's the apply
17:00 - command so we'd apply you can execute
17:03 - the plan so plan command is like a
17:06 - preview of what's gonna happen if you
17:09 - execute apply obviously terraform in the
17:12 - background will do the refresh at the
17:14 - up-to-date state then create the plan
17:16 - and then apply it which means if you
17:18 - want to execute a configuration file you
17:20 - can just execute the apply command and
17:22 - it will do all this and another command
17:25 - is destroy which obviously destroys the
17:28 - whole setup removing elements one by one
17:31 - in the right order and cleaning up all
17:33 - the resources that were created
17:35 - basically reverting everything that has
17:38 - been created and this could be used if
17:40 - let's say you create an environment for
17:42 - an important demo day and you didn't
17:44 - want to interfere with the existing
17:46 - environments once the demo is over you
17:48 - can destroy the whole setup
17:49 - destroy like apply will also check
17:52 - what's currently running and then create
17:55 - a plan of what needs to be removed in
17:57 - which order so I hope this gives you a
18:00 - good high level overview of terraform
18:03 - and how it works if you want to learn
18:05 - more such stuff then subscribe to my
18:08 - channel and stay tuned for more videos
18:10 - like this thanks for watching and see
18:12 - you in the next video