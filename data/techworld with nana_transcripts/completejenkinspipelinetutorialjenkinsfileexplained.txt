00:00 - in this video i'm gonna show you what
00:01 - jenkins file is how to create it and
00:04 - what the syntax looks like so what is
00:12 - jenkins file if you're familiar with
00:14 - Jenkins usually you would create new
00:16 - jobs or new builds and you would
00:19 - configure them so basically what Jenkins
00:21 - file is that instead of you creating and
00:24 - configuring jobs on the Jenkins user
00:27 - interface you would write a file or you
00:30 - would script that build and it's
00:31 - configuration in a file so Jenkins file
00:35 - is pipeline as a code it's a scripted
00:38 - pipeline which is part of this whole
00:41 - infrastructure as a code concept and so
00:44 - respectively you would create Jenkins
00:46 - file in your repository with your code
00:50 - so I have this demo project here that
00:53 - I'm gonna use to demonstrate janki's
00:55 - file and configure a build with it the
00:58 - first step is to create jenkins file in
01:00 - your repository so i'm gonna create a
01:03 - new file in my dev branch and call it
01:07 - jenkins file so code is where your
01:09 - jenkins file lives now how do you create
01:12 - a jenkins file how the syntax look like
01:15 - and this is the most basic jenkins file
01:18 - that basically does nothing but this is
01:21 - the basic syntax but here i'm gonna
01:23 - explain you the required attributes for
01:25 - jenkins file so the first thing is that
01:27 - jenkins file can be written as a
01:30 - scripted pipeline or a declarative
01:33 - pipeline so the scripted pipeline was
01:36 - the first syntax of jenkins file so what
01:39 - it is is basically it allows to write
01:41 - the whole configuration of the Jenkins
01:43 - file using groovy script so the only
01:47 - structure that you have there is this
01:50 - here and inside of this is basically
01:54 - groovy scripts and you can write the
01:57 - whole configuration here in a flexible
01:59 - manner as you wish so there is no
02:02 - predefined structure there however for
02:05 - people who didn't know or doesn't know
02:07 - groovy
02:09 - syntax or who hasn't worked with groovy
02:12 - is a little bit difficult to start with
02:14 - that's why as a recent addition they
02:16 - actually edit declarative pipeline
02:19 - syntax from jenkins file which is easier
02:22 - to get started with it has of course
02:24 - it's not as powerful as the scripted
02:26 - pipeline because here you're not limited
02:29 - in any way but it's easier to get
02:32 - started with because you have a
02:33 - predefined structure so this what you
02:36 - see here is basically pre given
02:39 - structure that you have to follow but
02:41 - again you don't have to think about how
02:43 - to script all this so you just fill in
02:45 - the gaps so what we saw here the note
02:50 - definition is basically same as these
02:53 - two lines here so in a declarative
02:56 - pipeline you declare that you are
02:58 - writing a pipeline and agent any
03:01 - basically means that this build is gonna
03:03 - on any available Jenkins agent an agent
03:07 - can be a note
03:09 - it could be executors on that note
03:11 - whatever and this is more relevant when
03:13 - you have a Jenkins cluster so to say
03:17 - with master and slaves where you have
03:18 - Windows nodes and Linux nodes etc but
03:22 - here for the beginning for base we just
03:25 - say agent any so we'll just run with the
03:28 - next available agent and as I said these
03:31 - two are equivalent to this one here and
03:33 - they are required attributes you always
03:37 - have to use them the next required
03:39 - attribute is stages and this is where
03:42 - the whole work actually happens so you
03:44 - have different stages of that pipeline
03:46 - and inside the stages you define stage
03:49 - name and you can define as many stages
03:53 - as you want usually you have something
03:57 - like this so you have a build stage
03:59 - let's get rid of this one actually have
04:01 - a build stage maybe you have a test
04:03 - stage and then you have a deploy stage
04:08 - like this you can have additional ones
04:13 - like for example you might have a check
04:15 - out stage stage here and I don't know
04:18 - cleanup stage afterwards whatever and as
04:23 - you see inside the stage you have the
04:25 - steps and here goes the script that
04:30 - actually executes some comment on the
04:34 - Jenkins server or Jenkins agent so for
04:37 - example if you're building a JavaScript
04:40 - application all the NPM install NPM
04:43 - build etc scripts will go here like this
04:49 - if you are you know running tests or for
04:54 - Java back-end all the text execution
04:56 - scripts will be here and the deployment
04:59 - script will be here so right now let's
05:01 - just write simple echo comments to kind
05:05 - of test this so here we're gonna say a
05:07 - building the application
05:12 - and here we're gonna say testing the
05:16 - application in here we are deploying the
05:22 - application and this is a very Jenkins
05:26 - file and this should work already
05:28 - so let's actually okay so I have the
05:35 - Jenkins file and that just basically
05:38 - echoes some stuff and now let's see how
05:41 - to actually use that in a jenkees
05:43 - pipeline so the second step will be to
05:46 - go to Jenkins to create a new build
05:49 - again and I'm gonna call it my app
05:55 - pipeline and I'm gonna create a multi
06:01 - branch pipeline and here's a
06:04 - configuration where I select the git
06:07 - repository that I want to build so I'm
06:10 - gonna configure that repository
06:14 - credentials if you don't know how
06:16 - credentials work in Jenkins I have a
06:18 - separate video about that what scopes of
06:20 - credentials there are in Jenkins how to
06:22 - create them and use them etc and that
06:25 - would be it so basically this is my
06:27 - configuration and here I can specify
06:30 - which branches I want to build so I'm
06:34 - gonna leave it at all the branches and
06:36 - let's see what happens so here you see
06:43 - that it just basically went through all
06:46 - the branches that I have master Dave I
06:49 - have some test branches there and it
06:51 - scanned all the branches for Jenkins
06:54 - file and only found ranks while in dev
06:57 - branch because that's were created and
06:59 - it built dev branch and let's see that
07:03 - actually see that dev branch was built
07:06 - by jenkees file and the stages that we
07:08 - defined in the jenkees file are this one
07:11 - here so we said build test and deploy
07:13 - and to each one of them you can see this
07:16 - echo comment that we defined so building
07:18 - the application testing the application
07:20 - etc so the first step here which is
07:24 - declarative checking out a see
07:26 - basically comes from this configuration
07:29 - here
07:30 - so this implicitly defines the first
07:34 - stage of the pipeline which is checking
07:36 - out the code and the second question is
07:38 - why or how is it configured that my
07:42 - pipeline looks for Jenkins file in those
07:44 - projects and that configuration is right
07:46 - here built configuration which is
07:48 - default I didn't set it or I didn't
07:50 - configure it by default it looks for
07:53 - file called Jenkins file and this is the
07:57 - path in the project and I have junkies
08:00 - file in the root directory so I didn't
08:03 - change any of this so this is all you
08:05 - need to do in order to configure a
08:06 - pipeline to build from Jenkins file the
08:09 - rest of the configuration of individual
08:12 - steps of built pipeline will be done in
08:16 - a Jenkins file itself
08:20 - so let's go back to the jenkees file and
08:23 - how can we see what attributes we can
08:26 - use to configure different parts of the
08:28 - build so this is the basic syntax where
08:32 - we have the base construct inside stages
08:35 - where we defined three different stages
08:37 - so another thing you can do with jenkins
08:40 - file is that at the end of it you can
08:43 - define post attribute so what it does is
08:47 - basically executes some kind of logic or
08:50 - some kind of scripts after all the
08:53 - stages are done and inside the post
08:56 - there are different conditions that you
08:58 - can execute your scripts on so for
09:01 - example if I say always in the post
09:04 - condition it means that this script or
09:07 - this logic whatever is in there will be
09:09 - executed always no matter if the field
09:13 - failed or if it succeeded or whatever
09:15 - happened this will be always executed
09:17 - and this could be something like sending
09:20 - an email out to the team about the build
09:22 - condition because you want to know
09:24 - whether it failed or succeeded or
09:25 - whatever happened another condition is
09:28 - success so you will execute a script
09:32 - here that all is only relevant if the
09:35 - build succeeded and you have the same
09:38 - thing with failure so you can define all
09:41 - the different conditions in the post
09:43 - block and there are a couple of more but
09:45 - to generalize in the post block you
09:48 - basically define expressions of either
09:51 - build status or build status change so
09:55 - for example if the last build change and
09:57 - now it's green again you can use that
10:00 - condition as well here so now it's
10:02 - actually switch to the editor so that we
10:04 - can see the highlighting as well and
10:06 - let's continue from here another thing
10:08 - you can do in Jenga swell which is very
10:11 - useful is define expressions or
10:15 - conditionals for each stage so for
10:19 - example you only want to run the tests
10:22 - on development branch build you don't
10:25 - want to run tests for feature branch
10:27 - build or any other builds what you can
10:30 - do here is inside the stage block you
10:33 - can define
10:34 - so-called when expressions so when
10:36 - should this stage execute and the syntax
10:40 - for that is like this and inside you
10:43 - have expression block and here you find
10:47 - basically your boolean expressions and
10:50 - the branch name or the current the
10:52 - active branch name in the build is
10:54 - always available in jenkins file through
10:56 - an environmental variable that jenkins
10:58 - provides it environment variable is
11:00 - called branch name and that is just
11:05 - available or you can also write like
11:09 - this and that is basically just
11:12 - available for you out of the box and you
11:14 - can use it to check what the current
11:15 - branch that's building is so if i want
11:18 - to check that it's a dead branch i can
11:21 - do like this and this stage will only
11:23 - execute or this part of the stage will
11:26 - only execute if the current branch is
11:28 - deaf if not it's just gonna skip and the
11:32 - same way like you would do in if
11:33 - expressions you can also add or or end
11:37 - expressions here so you can say I want
11:40 - to run this stage if it's a deaf build
11:42 - or if it's a master build I'd say you
11:46 - can do it like this or in other
11:48 - applicable use case for when expressions
11:50 - is for example you only want to build
11:52 - your application if their code changes
11:55 - made in the project so for example in
11:58 - the build step I can do something like
12:00 - if it's a dev and code changes equals
12:08 - true and this could be a variable that
12:10 - you define yourself at the beginning
12:13 - let's say outside the pipeline and that
12:17 - basically has logic where gets heat
12:22 - changes or something like this so
12:25 - basically this will be a groovy script
12:28 - that checks whether there has been any
12:31 - changes made in the code and sets the
12:33 - value of this boolean so let's clear all
12:36 - this up again and talk about
12:40 - environmental variables in jenkees file
12:42 - which is very important concept
12:45 - so as I just showed jenkins provides
12:49 - some environments of variables
12:50 - out-of-the-box for you to use them in
12:52 - jenkees file like current branch name
12:54 - but there's some other stuff that you
12:56 - might need for the logic for example you
12:59 - want to know which build number the
13:02 - current built here so you can use it in
13:03 - your versioning or some other stuff so
13:06 - how do you know what variables you have
13:09 - available from Jenkins the location
13:11 - where you can find that which I find
13:13 - pretty practical is in your Jenkins
13:16 - there's a URL in bars dot HTML that
13:23 - basically provides you with the list of
13:25 - all the environments of variables and
13:27 - you can use them in your Jenkins file
13:29 - this is the one that we used and also
13:31 - you have descriptions for each one of
13:33 - those that you want to use but in
13:36 - addition to the ones that Jenkins
13:38 - provides you can define your own
13:39 - environmental variables and this is also
13:42 - a common practice so let's see how to do
13:44 - that in Jenkins file there is an
13:46 - attribute called environment and
13:52 - whatever environmental variables you
13:54 - define here will be available for all
13:57 - the stages that you have in the pipeline
13:59 - so for example if you need a version in
14:01 - many different stages in your pipeline
14:04 - you would define that version here let's
14:07 - actually go and do that so version and
14:13 - let's just say whatever usually you
14:16 - would calculate the version like you
14:17 - would extract it from your code but I'm
14:20 - just gonna write it like this and the
14:22 - way that you can use that environmental
14:24 - variable in your script is like this so
14:28 - let's see building version you and you
14:40 - also see the syntax highlighting that
14:42 - this is interpreted as a variable an
14:44 - important thing to note here is that if
14:47 - I copy that and I put this in single
14:50 - quotes this is what happens and this is
14:53 - a syntax of groovy if you want the
14:55 - variable to be interpreted as a
14:57 - variable in a string you have to enclose
15:00 - it in double quotes something to be
15:02 - aware but otherwise if you have a simple
15:05 - string you can use either another
15:08 - practical example of using environmental
15:10 - variable can be credentials so for
15:13 - example you have a stage that deploys
15:15 - your newly built application to a
15:17 - development server let's say and for
15:19 - that stage you need credentials of the
15:21 - development server to connect to it and
15:23 - to copy the newly built artifact so you
15:29 - would define credentials in Jenkins as I
15:31 - said I have a separate video where I
15:33 - explain hard credentials work in Jenkins
15:36 - different scopes etc so once you have
15:39 - defined credentials in Jenkins you can
15:41 - use that in Jenkins file and one way to
15:44 - do that is in your environment block you
15:47 - would say server credentials and you
15:50 - would extract the credentials from
15:52 - Jenkins and let's see how that works so
15:55 - this is method or function that binds
15:58 - the credentials that are defined in
16:00 - Jenkins to your environmental variable
16:03 - and that is actually separate plugin
16:06 - that you have to install in Jenkins it's
16:08 - called credentials binding plugin which
16:11 - makes it possible to use Jenkins
16:13 - credentials inside the jenkees file and
16:15 - as a parameter it takes the ID or
16:18 - reference of the credentials in Jenkins
16:20 - so let's go back to Jenkins and see our
16:22 - credentials so this is a global scope
16:27 - and if I adhere a credential let's say
16:31 - username and password
16:33 - I don't really just say server user
16:39 - whatever and this is the ID of the
16:43 - reference let's call it server
16:45 - credentials and if I create this I will
16:50 - be able to use that credential inside
16:52 - the Jenkins file using that reference or
16:55 - the ID that I provided and now I can use
16:58 - that environmental variable in stage the
17:03 - same way as you version again I have to
17:07 - enclose it in double quotes and
17:16 - like this and obviously you're not gonna
17:19 - be using that credentials in a string it
17:23 - would be a shell script so the same way
17:25 - you can provide it inside there now if
17:29 - you need that credentials only in one
17:31 - stage it actually makes sense to read it
17:34 - from Jenkins in that stage as well so
17:37 - another way to do that is instead of
17:39 - defining that in environment block and
17:41 - this is the syntax of rappers so to say
17:44 - you can directly define it here so let
17:48 - me delete that instead what you can do
17:50 - is use with credentials wrapper and that
17:59 - takes as a parameter and object
18:02 - this is object syntax in Group E and
18:05 - that object you will be username
18:08 - password and that is basically a
18:12 - function that lets me get password and
18:17 - user name of that credentials
18:18 - individually so I pass it inside the
18:21 - object and as parameters here I can
18:24 - provide credentials ID which is the same
18:26 - as here and the reason why I can use
18:29 - username password is because the type of
18:32 - Prudential that I created so the server
18:34 - user here is of type username and
18:36 - password it's why I can use it here and
18:39 - after the ID of credentials I can get my
18:44 - username and I can store it into a
18:49 - variable name that I want so I'm gonna
18:51 - call it user and variable and I can
18:59 - store it into password so what this will
19:01 - do is take the username and store it
19:04 - into variable I want to call user and
19:06 - same with password okay so now inside
19:10 - this block with credentials I can use
19:13 - user and password variables so if I have
19:18 - a shell script here
19:21 - some scripts I can like I don't know
19:26 - copy the artifact to some place I can
19:30 - use my username and password like this
19:34 - so a user and password so this will be
19:41 - the script some commands some actual
19:43 - shell commands and username and password
19:46 - variables inside the script and as I
19:49 - said you have to have these two plugins
19:51 - in Jenkins let's actually go and see
19:54 - those two plugins so I have credentials
19:57 - plug-in that allows me to create
20:00 - credentials inside Jenkins UI and I have
20:04 - credentials binding plugin that allows
20:06 - me to use those credentials in my
20:09 - Jenkins file through environmental
20:11 - variables let's clean all that up
20:13 - another useful thing that you can use in
20:16 - your file is tools attribute so what
20:20 - tools does is basically provides you
20:22 - with build tools for your projects so if
20:26 - you have a front-end banking application
20:29 - you will have some build tools
20:31 - configured for that it could be maven
20:33 - Gradle or some other tool that you use
20:36 - and obviously when you're building an
20:38 - application you want to have those tools
20:41 - available so for example in build you
20:43 - would run something like maven install
20:46 - or Gradle build whatever and you need to
20:50 - have those tools available in one way to
20:52 - have those tools available is through
20:54 - these tools attribute and there are
20:57 - three tools right now that's jenkins
20:59 - file support that's Gradle maven and JDK
21:03 - if you need yarn or npm for example you
21:06 - have to do it in another way if you want
21:09 - to have a complete overview of how tools
21:11 - work and how you can use any build tool
21:14 - in your jenkins file from your jenkins
21:17 - configuration i have made a separate
21:19 - video on that where i explain the whole
21:21 - thing in detail so you can check it out
21:23 - but here i'm just gonna show you how to
21:25 - let reboot works and the way you can
21:27 - define the tools here is using
21:30 - name that is supported so as I said
21:32 - Gradle and JDK and next to the tool you
21:39 - have to provide the name of the tool and
21:42 - that has to be pre-configured or
21:45 - pre-installed in Jenkins and the way
21:48 - that you can check that is in global
21:53 - tool configuration and maven is I
21:58 - believe in most of the recent versions
22:00 - pre-installed and pre-configured so you
22:04 - have that and that is the name so name
22:08 - of the installation that you have to
22:10 - provide in your Jenkins file using
22:13 - quotes so this definition he will make
22:17 - maven comments available in all the
22:20 - stages in a game if you want to know
22:22 - exactly how to add new tools here and
22:25 - how to use them in Jenkins file then you
22:28 - can go and check out the other video
22:30 - that I made another thing that could
22:32 - also be helpful in pipelines is
22:34 - parameters so maybe you have some
22:38 - external configuration that you want to
22:41 - provide to your build
22:42 - to change some behavior an example could
22:45 - be that you have a bill that deploys
22:46 - your application to a staging server
22:49 - let's say and you want to be able to
22:51 - select which version of the application
22:54 - you want to deploy so here in parameters
22:57 - you will define the selection and the
22:58 - way you can write that is like this so
23:01 - you have the type first of the parameter
23:03 - and inside you provide the name of the
23:05 - parameter that's how it's going to be
23:06 - displayed let's say call it version you
23:09 - can provide default value I'm just going
23:13 - to leave it blank and you can add the
23:16 - description so that other people also
23:17 - know or maybe you later know what that
23:20 - parameter is meant for so it's a version
23:24 - to deploy on prod there are different
23:27 - types of parameters support for example
23:29 - instead of string you can have a choice
23:35 - which let's call it versions so instead
23:38 - of having to enter input a version name
23:41 - you can have predefined choices of
23:43 - different versions that you can actually
23:45 - choose from and here you know to say
23:47 - choices and let's say like this and this
24:04 - will also have its description nicely
24:07 - playing for now and you also have some
24:09 - other types like boolean harem and this
24:18 - could be for example you want to skip a
24:21 - certain stage on some builds and you can
24:23 - do that here so let's say you execute
24:27 - test parameter default value will be
24:32 - true and description let's leave it here
24:38 - so we can delete one of those two so now
24:42 - we've defined the parameters and we can
24:44 - actually see in practice how they're
24:45 - displayed in Jenkins built and now you
24:48 - can use these parameters in any of your
24:50 - stages which is pretty straightforward
24:52 - you remember the when expression that we
24:53 - use so parameters are suitable usage for
24:57 - expressions so for example here we want
25:00 - to define that whenever expression so in
25:07 - the when expression we can use the
25:09 - parameter so we can say that if execute
25:11 - tests parameter is set to true only then
25:14 - we're gonna run tests if not we're gonna
25:16 - skip that so this step will only execute
25:20 - if execute test that's and this is how
25:24 - you can use the parameters if execute
25:28 - test is true so you can write it either
25:30 - like this or you can just leave that
25:33 - equals true out and this will work as
25:36 - well so if harems execute test is set to
25:39 - true this is gonna execute if you set it
25:42 - to false this will be skipped and the
25:46 - version we can use
25:48 - let's say double-quotes deploying
25:52 - version like this and let's actually
25:59 - execute this jenkees file to see how it
26:02 - looks like in Jenkins so I'm gonna copy
26:06 - that
26:06 - and and it's my Jenkins file and the
26:12 - check so poems this is missing here so I
26:16 - have to say poems thought version and
26:19 - again you can write it with care all
26:20 - caps or camelcase
26:22 - it's up to you and I'm gonna commit that
26:26 - and let's execute that on Jenkins so now
26:31 - let's see where I see my parameters so
26:34 - in pipeline view I don't see any
26:36 - configuration but if I go into the
26:38 - French DIF now here instead of built I
26:42 - see button called build with parameters
26:44 - so before if you don't have any
26:46 - parameters set then it will just say
26:49 - built so I'm gonna click that and I'm
26:51 - gonna see both of the parameters listed
26:53 - here so I can choose a version here from
26:56 - the list so let me just say in 1 to 0
26:59 - and I'm gonna uncheck execute tests and
27:03 - if I build that let's see so the tests
27:05 - should be skipped because we unchecked
27:08 - it and let's see what the deploy stage
27:10 - says deploying version 1 to 0 so that's
27:15 - how parameters work so these parameters
27:17 - that we defined in jenkees file apply to
27:20 - all the branches so you can use that
27:22 - individual in every branch when building
27:24 - it now another very useful and
27:27 - interesting thing is using external
27:30 - scripts in Jenkins so imagine a scenario
27:33 - where you have all these pipeline steps
27:36 - where you build front end and you run
27:38 - tests and you build back-end and you
27:40 - build docker image out of it and you
27:42 - push the repository etc so you have many
27:45 - different stages and then inside of this
27:47 - stages you have a lot of logic and the
27:49 - logic is mainly groovy scripts right and
27:52 - very soon your Jenkins file can get
27:55 - loaded with external scripts or you
27:58 - could have shell scripts or you may have
28:00 - cradle scripts that execute different
28:02 - stuff so often it's a good idea to clean
28:05 - up Jenkins file and put all these
28:07 - scripts or say in its own file and the
28:10 - way that you can use it is create a
28:12 - separate Gradle script and extract all
28:15 - the Gradle scripts into that external
28:18 - file and let's actually do that till now
28:20 - on this examples that I showed you I
28:22 - have used just very simple echo comments
28:25 - but jenkees file basically supports
28:28 - groovy script so you can write much more
28:31 - powerful logic using groovy and the way
28:35 - you can do that is using script blocks
28:38 - so instead of just putting these echo
28:42 - simple commands in the step section you
28:44 - would define script here and here you
28:46 - can write normal cradle so you can
28:49 - define variables and you can define
28:52 - functions and do all other stuff and
28:55 - call cradle functions etc so what we're
28:59 - going to do now is we're going to
29:00 - extract those simple echo comments to a
29:04 - Gradle script just to see how to do that
29:07 - so I have this groovy script here that
29:10 - just defines one function just echo
29:12 - something very simple and return this is
29:15 - important because otherwise you can't
29:16 - import it in thinking's file so how do I
29:19 - import and use that groovy function in
29:22 - jenkees file so I'm gonna go ahead and
29:24 - create an image section or in its stage
29:26 - here in which I'm going to load that
29:29 - groovy script
29:30 - and in order to load that I need a
29:33 - script block because this is gonna be
29:35 - groovy command and I'm gonna say groovy
29:39 - or chibi whatever and load script dot
29:47 - groovy and I want to make this a
29:51 - variable that holds the imported groovy
29:54 - script source a globally available so
29:57 - that I can use it in all my stages I'm
29:59 - gonna define that actually outside here
30:03 - and assign the whole groovy script there
30:08 - so the one that I exported was so this
30:11 - should be a function name so I'm gonna
30:13 - call it build
30:15 - yep and the way I can use that function
30:20 - now in my Jenkins file is using that
30:23 - variable that holds the script and
30:26 - instead of this year I can replace this
30:30 - echo statement but again I need to do
30:32 - that in script because otherwise it's
30:34 - not execute because it's groovy syntax
30:36 - so the variable name and function name
30:40 - and the function name very simple and
30:45 - let me actually export all of those so
30:48 - I'm gonna create a new function I'm
30:50 - gonna call it test app and copy that
30:54 - here and I'm gonna do a third one which
31:02 - is deploy app and again I'm gonna copy
31:11 - here and I need to put them in script
31:23 - this is gonna be test AB and this is
31:25 - gonna be deploy it and one thing you may
31:29 - already noticed here is that the echo
31:32 - command with version parameter it should
31:35 - be parms version actually I put that in
31:39 - deploy app in the groovy script so
31:42 - basically all the environmental
31:44 - variables that you have accessible here
31:46 - through parameters attribute or
31:49 - environment attribute or out-of-the-box
31:51 - available from Jenkins you can use all
31:54 - of them in groovy so you have access to
31:56 - them inside your script so you don't
31:58 - have to configure anything for that so
32:02 - now we have exported each stage
32:05 - functionality to groovy script
32:07 - so whenever for example your logic of
32:10 - building the application changes and you
32:12 - have some complex logic here for example
32:15 - in build application you may want to
32:17 - extract the version from your pom file
32:19 - or from your Gradle file or maybe some
32:22 - other place and you have to build a new
32:24 - version construct depending on how you
32:27 - version your application so
32:29 - all that logic will leave in groovy
32:31 - script and jenkees file will have more
32:33 - slim and simple structure what you can
32:37 - also extract groovy is your expression
32:40 - so basically everything that is Ruby
32:43 - scripts you can extract to the external
32:47 - script
32:48 - so let's actually execute that now and
32:50 - see how it works so I'm gonna edit the
32:55 - Jenkins file and I'm also gonna add that
33:05 - groovy script to my project I called it
33:13 - script out groovy ok so now if I scan my
33:24 - branch see the logs and let's see dev is
33:33 - building and it was successful so one
33:37 - thing that is very practical in pipeline
33:40 - is in the branch specific build where
33:44 - you have the history if I go for example
33:46 - in one of those I have this replay
33:48 - button that is a very practical way of
33:51 - testing out changes in Jenkins file
33:54 - without having to commit that so I can
33:56 - actually make the changes right here so
33:58 - I can add another echo and I can run the
34:01 - build again so now that I've committed
34:04 - that extra script that I have let's go
34:08 - to the last build here and if I do
34:10 - replay I see not only my Jenkins file
34:12 - but also that script so I can actually
34:15 - change or I can adjust both and test the
34:19 - changes right here so if I wanted to say
34:25 - changes and run that
34:30 - I can see that you echo and that's how
34:40 - you configure and use external groovy
34:43 - script in Jenkins file thanks for
34:45 - watching the video I hope it was helpful
34:46 - and if it was don't forget to like it if
34:49 - you want to be notified whenever a new
34:51 - video comes out then subscribe to my
34:53 - channel if you have any questions if
34:56 - something wasn't clear in the video
34:57 - please post them in the comment section
34:59 - below and I will try to answer them so
35:01 - thank you and see you in the next video