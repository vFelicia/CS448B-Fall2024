00:00 - in this video I will explain all about
00:02 - demo we will see what ml is used for and
00:06 - we'll go through the syntax of how to
00:08 - write a valid ml file as you've seen in
00:12 - my tutorial videos about docker
00:14 - kubernetes in Siebel
00:15 - Prometheus etc I have shown example
00:18 - configuration files all written in mo
00:21 - because it has become a pretty widely
00:23 - used format for writing configurations
00:26 - for many different DevOps tools and
00:28 - applications that's why when using these
00:30 - tools it's important to understand the
00:32 - details of yellow syntax and its main
00:35 - concepts generally speaking yeah mo is a
00:38 - serialization language just like XML and
00:41 - JSON serialization language basically
00:44 - means that applications written with
00:47 - different technologies languages etc
00:49 - which have different data structures can
00:52 - transfer data to each other using a
00:54 - common agreed-on or a standard format
00:57 - and the most popular such formats are
00:59 - llamo jason and xml and the name llamo
01:04 - actually stands for y mo ain't markup
01:07 - language and you can create llamo file
01:09 - with one of those two extensions they're
01:13 - the same one of the main reasons of why
01:15 - hemos popularity has increased so much
01:18 - over the past years is that it's super
01:21 - human readable and intuitive which makes
01:24 - it a great fit for writing configuration
01:26 - files for all those recent DevOps tools
01:30 - like I mentioned docker kubernetes etc
01:32 - so to show you an example and also
01:35 - comparison between llamo XML and JSON
01:39 - formats let's consider this example so
01:42 - this is how y mo file would look like
01:45 - it's very straightforward it's pretty
01:47 - clean this is the same data in XML
01:51 - format where you have this so-called
01:54 - text and then you have the JSON format
01:56 - and as you see in XML and JSON data
02:00 - structures are defined using special
02:02 - characters in XML you have so-called
02:04 - text with angle brackets in Jason you
02:07 - have curly brackets and in yellow you
02:10 - don't have those special characters so
02:12 - how data structure is defined
02:13 - in the mo is through line separations
02:16 - and spaces with indentations that's why
02:20 - you can indent in space in XML and JSON
02:24 - as you wish but in the ml you get
02:26 - validation error if you have one single
02:29 - space and data structure wrong which may
02:31 - be a little bit annoying but it makes
02:33 - llam√≥ format the cleanest most human
02:36 - readable format of all three so what are
02:38 - some of your most use cases to count few
02:41 - yema format is used for duck composed
02:43 - files for NZ ball prometheus kubernetes
02:47 - and many more tools okay so now that you
02:50 - know what llamo is and where it's used
02:52 - let's dive into its syntax so it started
02:56 - with the basic syntax which is simple
02:59 - key value pairs so let's take an example
03:01 - that I just showed you and let's write
03:04 - key value pairs like AB and let's call
03:08 - it user authentication and we have a
03:14 - port let's put it at 9000 and version of
03:19 - the app and 1.7 just an example so these
03:23 - are simple key value pairs this whole
03:25 - yellow file is written and you have
03:27 - different datatypes here we have a
03:29 - string which note that we don't have to
03:32 - enclose it with quotes you can if you
03:35 - want to so you can use either double
03:37 - quotes or single quotes or no quotes at
03:41 - all and you have the number of
03:42 - representations as well if you need to
03:44 - use some special character like line
03:47 - carriage for example then you have to
03:49 - enclose it in strings otherwise Yemen
03:52 - cannot recognize it but other than that
03:54 - you don't need quotes so I'm gonna
03:56 - mention here that in yellow you also
03:58 - have comments so everything that starts
04:01 - with this sign or with this character
04:03 - basically yellow interprets as a comment
04:05 - so I can write comment here and
04:09 - basically I can use this comment between
04:12 - the attributes anywhere in the mo file
04:14 - where I want to make my file even more
04:17 - readable and understandable so this is a
04:19 - simple list of key value pairs what you
04:21 - can do is you can group them inside of
04:23 - an object so you can create an object in
04:25 - yellow and you can do that by in
04:27 - in this individual key value pairs and
04:31 - enclosing it in an object let's call it
04:34 - a micro service like this and this
04:39 - becomes an object with micro service
04:41 - with its attributes and note that the
04:44 - space has to be exactly same for each
04:48 - attribute within the object and also
04:50 - note that because Jemil is so sensitive
04:53 - about the spaces and indentation it's
04:56 - always a good idea to use a llamo
04:58 - validator before you for example execute
05:01 - a configuration file in kubernetes or
05:03 - you apply that or use that file to be
05:07 - sure that your invitations are right and
05:09 - there are online tools for that one of
05:12 - them which I use is this one here but
05:14 - there are some other online tools as
05:16 - well I can link them in description
05:18 - so what you can do is you can just copy
05:20 - that and it tells you that it's valid if
05:23 - I for example this it's gonna scream
05:26 - that indentation so you can check your
05:28 - valid et here so let's go back in yellow
05:32 - you can also have lists so for example
05:34 - if you have multiple micro services like
05:37 - this I can create a list of those micro
05:41 - services simply by using - so like this
05:45 - and again important thing that those
05:48 - attributes stay at the same level and
05:49 - the - is right here you can also have
05:54 - boolean values so for example if we have
05:57 - deployed attributes you can say true or
06:02 - false and in Yemen you can also express
06:05 - boolean expressions with yes or no so
06:09 - let's say deployed yes and also with on
06:12 - and off so all these 3 pairs of values
06:14 - are expressions of boolean values and
06:19 - you also see the syntax highlighting is
06:21 - different so this is a list and these
06:24 - are the items of the list and I can add
06:27 - second item app let's say shopping cards
06:33 - whatever
06:35 - and let's say port is nine thousand two
06:38 - then we have version which is 1.9 and
06:44 - this way you can define lists of objects
06:47 - but you can also define lists of simple
06:49 - values so for example if you had a list
06:52 - of just the micro-service names you
06:54 - could do like this and that would be
07:02 - fine as well and you can also use lists
07:05 - inside of a list item for example if you
07:07 - have multiple versions of a shopping
07:10 - cart for example that you want to list
07:11 - here for some reason I don't know you
07:14 - can actually list them here so I can do
07:17 - versions let's say you have 2.0 and then
07:21 - you have 2.1 etc and i'm gonna copy that
07:26 - also in the validator and here you see
07:29 - that the - position you can actually use
07:33 - different annotations for that so i have
07:35 - an indentation here but I don't have
07:37 - here so that's fine as well I could do
07:39 - like this or I can align it on the
07:42 - parent of attribute so don't be confused
07:45 - if you see different alignments of the
07:48 - lists both work because llamo recognizes
07:52 - that it's a list item what will not work
07:55 - is if you don't align the list items
07:58 - using indentation so for example it was
08:01 - one space off then the validator will be
08:05 - red so some small details there also
08:08 - know that if you have primitive items in
08:11 - the list like this one for example some
08:13 - not the object items but the primitive
08:15 - ones you can also express it in
08:17 - different way and this is how with the
08:20 - different syntax you have square
08:22 - brackets and you can put those values
08:25 - inside like a list which makes it
08:28 - actually more readable if you have just
08:30 - simple datatypes and not objects let's
08:32 - validate that as well to make sure you
08:35 - can have strings here as well or mix of
08:38 - them doesn't matter now this is really
08:41 - some of the basics of llamo syntax so to
08:45 - make it more practical and realistic
08:47 - let's actually look at
08:49 - real kubernetes yellow example to see
08:52 - how these basic syntax is expressed
08:54 - there so I'm gonna clean this up and
08:57 - let's look at a pot configuration so
09:00 - this is basically the main part where
09:02 - the metadata and kind etcetera is
09:05 - defined as you see these are super
09:08 - simple key value pairs and then you have
09:11 - these objects that we just saw with
09:13 - Hiroki or the indentations to have a
09:15 - metadata object and inside that you have
09:18 - another labels object and here you have
09:21 - the specification and containers maybe
09:25 - you are familiar with this already and
09:27 - in containers is a list so each
09:32 - container item sort of say has to start
09:35 - with
09:35 - - and indentation and then we have the
09:40 - name of the container have the image
09:44 - let's use nginx then you have ports
09:49 - which is another list so again we start
09:52 - with - to list ports and then you have
09:57 - the attribute which is container port
10:01 - value there inside container you also
10:04 - can have volume mounts which is another
10:10 - list so here you list all your volumes
10:12 - and this is a list of objects again we
10:15 - have key value pairs let's use I don't
10:18 - know nginx volume and mount path
10:29 - some example and this is how a pod
10:34 - configuration will look like so you have
10:36 - again basic building blocks key value
10:39 - pairs objects and lists and then lists
10:42 - inside of that list item and since
10:45 - containers is also at least you can have
10:48 - multiple containers inside and for
10:51 - example if I were to define a sidecar
10:54 - container I would have another item
10:57 - expression - and here I would say this
11:01 - is my sidecar container and again image
11:07 - some image etc also another example that
11:11 - I also showed in one of my videos is
11:14 - where we deployed a curl image as a
11:17 - sidecar and inside of that container
11:22 - configuration wheels had these two lines
11:24 - I'm actually gonna copy them and here
11:27 - you see that this is this alternative
11:29 - syntax of defining lists so arguments is
11:34 - a list and we use it like this and then
11:38 - we have the two items here one and two
11:42 - so knowing how yellow syntax works
11:45 - should make it easier to understand the
11:47 - kubernetes configuration file structure
11:50 - better another important concept of
11:53 - Gemmell syntax is when you have
11:55 - multi-line strings so for example file
11:59 - contents multi-line string let's call it
12:04 - the attribute and instead of writing
12:07 - this multi-line string here with the
12:10 - carriage I can write it actually on
12:13 - multiple lines like this so I don't need
12:16 - that thing anymore so this is a
12:23 - multi-line string and this is the next
12:29 - line etc right and the way I can do that
12:33 - is using the pipe symbol so yellow will
12:37 - see that character and will interpret
12:40 - everything here
12:41 - as a multi-line text so this line breaks
12:44 - will actually stay another case could be
12:46 - if you have this super long string which
12:49 - has to be on a single line so for
12:52 - example this is a single line string
12:55 - that should be all on one line and some
13:02 - other stuff
13:04 - let's put dots here and in that case
13:07 - obviously you want the line carriages
13:10 - here but you also don't want to write
13:12 - this all out on one line because it's
13:14 - just not very readable and that's why
13:18 - you want to for readability you still
13:21 - want to display that here in my demo
13:23 - file itself but you want yellow to
13:25 - interpreted as a single line in this
13:28 - case instead of pipe you actually
13:30 - replace it with a greater than sign or
13:33 - with this angled bracket and this will
13:36 - be interpreted as single line now this
13:39 - is just some random example so let's
13:42 - actually see some real use cases I have
13:45 - a config file demo here from kubernetes
13:48 - which I have used in what my tutorial
13:50 - videos and here you see the basic key
13:53 - value stuff and here you have the name
13:56 - of the attribute and call it whatever
13:58 - you want
13:59 - and here we use that pipe and these are
14:03 - actually the contents of the file this
14:06 - is going to be displayed exactly like
14:07 - this with line carriages because this
14:09 - has to be each one on its own line and
14:13 - this way you can actually write
14:14 - configuration files for different
14:17 - applications like this one is for
14:19 - mosquito you also have maybe flu in D
14:22 - and they have their own different
14:24 - formats and you can write the whole
14:26 - thing as a file represented by
14:28 - multi-line string in yellow
14:31 - another example of using this multi-line
14:34 - string that you may actually encounter
14:36 - in communities configuration files is
14:39 - this one right here so this is part of
14:42 - configuration of a pod so you have this
14:44 - command attribute and here you see the
14:47 - familiar list and here again you have
14:50 - this pipe that is followed by a
14:53 - multi-line string and this is an example
14:55 - of
14:55 - bhana that I found so basically what it
14:57 - does is that it executes shell command
15:00 - and this is a shell script so you can
15:02 - actually put the whole contents of a
15:04 - shell script as you would have that as a
15:06 - shell script file after that pipe symbol
15:10 - as a multi-line text and this will
15:12 - execute as a shell script basically one
15:15 - thing that I've also needed to use in ml
15:19 - Wars environmental variables so for
15:21 - example if a part that has environmental
15:23 - variables defined inside and you have to
15:26 - use one of those inside the pod
15:28 - configuration you can actually access
15:30 - them using a dollar sign inside your
15:33 - yellow configuration so this is an
15:35 - example of a my sequel pod and here the
15:40 - same thing that I showed you before see
15:41 - how they comment and here in this line
15:45 - we're executing in my sequel command and
15:47 - I am accessing the environmental
15:50 - variable that is available inside the
15:52 - pod using the name of the environmental
15:55 - variable and the dollar sign before that
15:57 - which if you need that might come in
16:00 - handy because I believe this specific
16:02 - concept of using environmental variables
16:04 - in llam√≥ isn't very well documented
16:07 - Gemmell also has a concept of
16:09 - placeholders one of his use cases is in
16:13 - help for example and this is how it
16:15 - looks like so basically instead of
16:16 - directly writing the values inside you
16:20 - define placeholders and the syntax for
16:22 - using placeholders is double curly
16:25 - braces around that placeholder and this
16:28 - value gets replaced using template
16:31 - generator and I believe the same concept
16:34 - is used in instable as well so again if
16:36 - you use helm or in zville for example
16:39 - and you see the syntax you should know
16:40 - what it stands for
16:42 - and lastly inside one llam√≥ file you can
16:46 - actually define multiple components and
16:48 - you can separate these components using
16:51 - three dishes like this so for example if
16:55 - I have a yellow file where I want to put
16:57 - all my configurations I can separate
17:00 - them using this three dashes and this
17:04 - will be a valid EML and this can be very
17:06 - handy in case especially where you have
17:09 - multiple components maybe for one
17:10 - service and you want to group them in a
17:13 - single yellow file so for that use case
17:15 - this is the way to go
17:17 - maybe the interesting note here is that
17:19 - in all my kubernetes videos I have used
17:21 - the yellow format to write kubernetes
17:23 - configuration files however you can also
17:26 - write commands configuration files in
17:28 - JSON format sample if I head over to my
17:31 - dashboard and I click to edit one of my
17:36 - components I see that I have both llamo
17:39 - and Jason formats available which I can
17:42 - edit directly or if I want to create a
17:45 - new element new component I can provide
17:47 - either yellow or Jason but I personally
17:51 - use yellow because as I mentioned it's
17:54 - cleaner and more readable but you can
17:56 - actually use both so this was it for
17:59 - Gemmell tutorial video thank you for
18:02 - watching and see you in the next video