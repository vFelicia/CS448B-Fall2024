00:00 - in this video we're going to learn
00:02 - exactly why we need a CI pipeline in a
00:05 - software development process and how to
00:07 - build one that automatically checks your
00:10 - application code quality and
00:13 - automatically suggests fixes for any
00:16 - issues that it discovers in your code
00:18 - and if you're a software developer this
00:21 - knowledge is going to be absolutely
00:23 - valuable and useful in your engineering
00:26 - job so make sure to stay till the end
00:28 - and work through the entire demo and
00:30 - with that let's get right
00:34 - in let's say you are in a team of
00:37 - software developers and you're working
00:39 - on a specific feature and the git
00:42 - workflow that your team is using is
00:45 - trunk based development which is a
00:47 - standard workflow in today's modern
00:49 - develops driven development so you
00:52 - always have the main branch in a
00:55 - releasable state that triggers an
00:57 - automated cicd pipeline whenever code
01:00 - changes are pushed into the main branch
01:03 - so you have a fully streamlined release
01:05 - Pipeline with no bottlenecks meaning no
01:08 - manual intervention at any stage of the
01:11 - pipeline that deploys all the way to at
01:14 - least the dev environment and if you
01:17 - have really good test coverage maybe to
01:20 - the staging or even prod environment
01:23 - without any manual testing or code
01:26 - checks in the process but for this to
01:29 - work work you need to have lots of tests
01:32 - to make sure what you are committing to
01:34 - your main branch can be deployed and
01:37 - released to the end users so various
01:41 - tests should be run to test different
01:43 - aspects of the code changes that are
01:47 - about to be deployed now what are those
01:49 - tests that we want to run in this
01:51 - release pipeline you will have unit
01:54 - tests or integration tests that test
01:56 - your code logic with different inputs
01:59 - and parameters to make sure that it's
02:01 - able to handle different scenarios you
02:04 - may have security tests to scan all your
02:07 - dependencies and libraries for known
02:09 - issues or scan your code for any
02:12 - hardcoded secret data or any security
02:14 - best practices in logic which you
02:17 - actually learn this set of security
02:20 - scans and tests in our depops boot camp
02:22 - where we go into detail how to test
02:25 - various security aspects of your
02:26 - application from code to Docker image
02:29 - Etc and then finally you also have code
02:32 - quality tests so your application code
02:35 - may be working so the functionality is
02:38 - fine it may be even secure but your code
02:42 - quality may be bad or unmaintainable
02:45 - let's say you have lots of code
02:47 - duplications because instead of putting
02:49 - things into function you are just
02:51 - duplicating the logic in multiple places
02:54 - which is a bad practice or maybe you are
02:56 - using old apis old library versions
03:00 - maybe you have introduced risk for nullo
03:03 - exceptions in your jav application maybe
03:06 - you don't have a good test coverage for
03:08 - your code so these are the tests for
03:10 - your code quality and the code quality
03:13 - test is what we're going to see in the
03:15 - demo in this video using kadana which is
03:18 - super easy and really good tool to
03:21 - validate various aspects of your
03:25 - code so important to note here that
03:28 - trunk-based g workflow is usually an
03:32 - ideal workflow to use especially in
03:34 - devops driven projects however in
03:36 - practice a lot of teams actually use a
03:38 - different G workflow which is called a
03:40 - feature Branch workflow the core idea
03:43 - behind the feature Branch workflow is
03:46 - that all feature Branch development
03:48 - should take place in a dedicated Branch
03:50 - instead of the main branch and this way
03:53 - multiple developers or Engineers can
03:55 - work on a specific feature without
03:58 - interfering with the main code base so
04:02 - you create a fature branch and make your
04:04 - changes there and when you're ready to
04:06 - merge you create merge request and all
04:08 - the tests will run on the merge request
04:11 - to act as a gatekeeper and decide
04:14 - whether the changes should be merged
04:16 - into the main meaning whether those code
04:19 - changes are even in a releasable state
04:22 - that's why we want to run those tests on
04:23 - merge requests before the code even ends
04:26 - up in the main branch because imagine
04:28 - your code merged into the main branch
04:31 - and then the tests ran and they failed
04:34 - because your code had issues so those
04:36 - issues were discovered and the pipeline
04:38 - failed but other developer also merged
04:40 - their code changes and they had just one
04:43 - or two issues but now even if they fix
04:46 - their own issues their code changes
04:48 - cannot be released because your broken
04:50 - code is also in the main branch so it
04:53 - will block all other code changes from
04:55 - going to the development until you fix
04:57 - your code issues and that's why we want
04:59 - to run tests on the merge request
05:01 - instead of merging it into Main and then
05:03 - running the tests now imagine feature
05:06 - development takes longer and you have
05:08 - tens of commits now you're done your
05:11 - feature works you have tested it a
05:13 - little bit manually and now you're ready
05:16 - to merge it into the main and you create
05:19 - a merge request which triggers all the
05:21 - tests and so on and those tests detect a
05:24 - ton of issues that you have introduced
05:27 - so your code works but you copy paste
05:29 - did some code snippet from internet with
05:32 - very bad coding practice and even added
05:35 - some security issues to the application
05:37 - now you have to go and spend probably
05:40 - hours or days figuring out how to fix
05:43 - those issues maybe you built the whole
05:46 - logic with this library that is outdated
05:48 - or has known issues so now you have to
05:51 - start over find a new library and write
05:54 - logic with a new library test it again
05:57 - and so on but you could have saved
05:59 - yourself all the time if you tested your
06:01 - code changes right away on the very
06:04 - first commit instead of collecting those
06:07 - commits and then running tests later on
06:10 - the merge request so what if you had
06:12 - those tests running even before the
06:13 - merge request on every single commit in
06:16 - the feature Branch so you introduce a
06:18 - library committed the changes and
06:20 - immediately saw through the code scan
06:22 - that this library has issues then you
06:25 - made another change again commit and
06:27 - Trigger pipeline it will run test to see
06:29 - if if your code changes are fine if not
06:31 - you can fix the issue right away and
06:33 - move on to the next one and especially
06:35 - as a junior engineer this actually lets
06:38 - you learn so much of programming best
06:40 - practices while you're developing
06:42 - because it gives you this feedback loop
06:45 - of what you are doing wrong and that
06:47 - process of committing small code changes
06:51 - frequently and running tests and scans
06:54 - on them to identify issues is called
06:56 - continuous integration or CI and the
07:00 - pipeline that runs those tests in order
07:02 - to discover any issues is called a CI
07:05 - Pipeline and it is a best practice to
07:08 - build CI pipelines for feature branches
07:11 - so you aren't deploying anything in the
07:13 - feature Branch obviously there's no CD
07:16 - continuous deployment you're just
07:18 - testing your code changes for any issues
07:21 - frequently to fix them early enough and
07:23 - you also saw that we kept moving those
07:25 - tests earlier and earlier in the
07:27 - development process which is a a general
07:30 - concept of Shifting left or shifting
07:33 - automated testing left and guess what
07:36 - there is even an option to find code
07:38 - issues even earlier than in the CI
07:41 - pipeline of a feature Branch you already
07:44 - have this on your local computer as a
07:45 - developer when you use intellig ID for
07:48 - example that has built-in code checks
07:51 - that show you while you developing if
07:54 - you have written a dirty code which can
07:57 - be cleaned up and made better or more
07:59 - effici
08:00 - or if you just created a code
08:01 - duplication and those built-in
08:03 - inspections will even give you Auto
08:05 - suggestion to let's say update the
08:07 - library version to the latest or remove
08:09 - the code duplication and so on or if you
08:12 - have any linter extensions with whatever
08:15 - code editor you're using you can also
08:17 - have that locally in your development
08:19 - environment now of course we can assume
08:22 - that some developers May ignore those
08:24 - highlights that ID is showing or they
08:27 - may not even know how to use those Auto
08:29 - suggestions and that's why we want to
08:31 - have those tests in the pipeline to run
08:34 - automatically because we don't want to
08:36 - rely on individual developers doing
08:38 - everything correctly on their local
08:40 - machine so we want to centralize this
08:42 - process and automate it and that's why
08:45 - say pipelines are so important so you
08:47 - notice that we have multiple places
08:49 - where the code issues will be detected
08:51 - starting from local ID to fiture Branch
08:53 - CA pipeline merge request Pipeline and
08:56 - even when the code gets merged into the
08:58 - main branch it will run the same code
09:01 - scans and automated tests again because
09:04 - as I said what if other Engineers merged
09:07 - their code changes before us maybe there
09:09 - is an issue between that new code and
09:12 - ours so we want to check on every
09:17 - step great now that we understand what
09:20 - CIP PIP plan is and why it's so
09:22 - important let's build one to Showcase
09:25 - how we can Implement a fully automated
09:28 - code quality checks for the demo we're
09:30 - going to use GitHub actions as our CI
09:33 - server to execute the code quality
09:35 - checks and for the code analysis itself
09:38 - we will use a tool called kadana as I
09:40 - mentioned which has really good code
09:43 - quality checks and is really easy to get
09:45 - started with so just to give you a quick
09:47 - overview of how it works and how those
09:50 - automated code quality scans will be
09:52 - done as I mentioned Ides like intellig
09:55 - actually all IDs from jet brains have
09:57 - this built-in inspect s that
10:00 - automatically scan the code file by file
10:03 - and identify any code issues and show
10:06 - them in the editor and even suggest
10:09 - fixes automatically and essentially we
10:11 - want to have exactly the same thing but
10:14 - in a centralized place like Ci Pipeline
10:16 - and kadana which was also created by jet
10:19 - brains is using the same mechanism and
10:22 - inspections that are built in the IDS so
10:25 - it runs those inspections and identifies
10:28 - any code issues
10:29 - and as a bonus imagine you could fix
10:33 - those code issues automatically in the
10:35 - pipeline so those Auto suggested fixes
10:38 - can be applied in the pipeline where we
10:41 - can tell kadana to actually create a
10:43 - merge request from the automatically
10:45 - suggested fixes which then you or an
10:49 - experienced engineer can review and
10:52 - merge it into the fidget Branch to fix
10:55 - all those code issues so we're basically
10:58 - automating the code quality fixes and of
11:01 - course we want this to work for
11:02 - different programming languages and
11:04 - usually you would have dedicated tools
11:07 - for different programming languages good
11:08 - thing about kodana and convenient thing
11:11 - is actually that you can use it for
11:13 - basically all the popular languages like
11:15 - Java JavaScript Python and so on so you
11:18 - don't have to switch between different
11:23 - tools so this is an open-source project
11:26 - on GitHub which I have forked in my own
11:29 - account so that we can make some changes
11:31 - run a pipeline and so on and I have this
11:34 - project open in my intellig ID so we're
11:37 - going to make the changes directly here
11:39 - and there are two things that we need to
11:41 - do to run the pipeline with code quality
11:44 - checks using kadana these are two easy
11:48 - steps the first one is to create a
11:50 - GitHub workflow I have removed all the
11:53 - workflows from the existing project so
11:54 - we can create our own one and just focus
11:57 - on that single workflow so we're going
11:59 - to create a GitHub actions workflow
12:01 - right here for the CI pipeline that will
12:03 - run those code quality checks and the
12:06 - second thing is that we need to create a
12:07 - kadana configuration file called kadana
12:10 - yl that we will pass to that CI pipeline
12:14 - that's it super simple to get started
12:16 - with this and to build our C pipeline
12:19 - for code quality checks starting with
12:21 - kadana yl since we are in intellig we
12:25 - actually have kadana tool and all these
12:27 - configuration options built in in the ID
12:30 - so tools and kadana and if I click on
12:33 - this option right here to try run kadana
12:36 - locally we get this autogenerated kadana
12:40 - yl file so we can either copy this whole
12:42 - thing or it will just automatically save
12:45 - it in the kodana yl file right
12:51 - there which is pretty convenient because
12:53 - we don't have to look up the boiler
12:56 - plate configuration we will leave
12:57 - everything as it is except for one
13:00 - change which is the profile here profile
13:03 - is basically a group of inspections that
13:06 - I mentioned like in ide if we go to
13:09 - settings and look for inspections you
13:12 - have the list of the inspections for
13:15 - different languages different databases
13:18 - plus HTML and so on and they are kind of
13:22 - grouped in a profile and you can create
13:24 - your own profiles in intell but it comes
13:26 - with a default profile and this this is
13:29 - the same concept because it uses the
13:31 - same mechanism kodana developers created
13:34 - a couple of profiles that you can choose
13:35 - from so if I remove this we actually
13:38 - have those three options and depending
13:41 - on how deeply you want to go and how
13:43 - detailed analyses you want to do you can
13:46 - choose different profiles there's a
13:48 - starter one which is checking the most
13:50 - obvious issues it's kind of lighter
13:52 - version doesn't go really deep into the
13:54 - code and then we have the recommended
13:55 - one which will execute way more
13:58 - inspection against our code so it will
14:01 - of course detect more issues so let's
14:03 - choose this one actually also the name
14:06 - suggests that it's the recommended one
14:08 - from kadana developers and that's our
14:10 - kadana yl
14:13 - configuration right here you see the
14:15 - linter which basically is referencing a
14:18 - Docker image that will be used to
14:21 - execute the analysis on all the Java
14:24 - related files and configuration if you
14:26 - had a JavaScript project then you would
14:29 - use another linter which is for
14:31 - JavaScript and you can actually see all
14:33 - these images in dockerhub
14:35 - we can search for
14:39 - kadana JavaScript jvm PHP Python and so
14:44 - on so if you had a JavaScript project
14:46 - you would simply use the kadana JS
14:48 - linter which will analyze JavaScript or
14:50 - typescript code so let's set it back to
14:53 - jbm kadana yaml configuration is ready
14:57 - and now we can also let intellig
15:00 - generate code for kadana skin in a CI
15:04 - pipeline so what happens if I click here
15:06 - we actually get options for different
15:07 - cicd tools like GitHub actions gitlab
15:11 - cicd team CD and so on so you can choose
15:14 - whichever cicd pipeline you'll be
15:16 - running since our code is on GitHub
15:18 - we're going to be using GitHub actions
15:20 - of course so that's the code we need and
15:23 - again I'm going to just edit directly to
15:26 - the project and right here we have
15:29 - kodana code quality.
15:34 - yl so that's also pretty convenient that
15:37 - we get the configuration for CI pipeline
15:40 - from the ID so we don't have to write it
15:42 - from scratch and it of course
15:45 - automatically uses the kadana action for
15:48 - GitHub actions which behind the scenes
15:51 - is executing all the kadana scans and by
15:53 - the way if you're new to GitHub actions
15:55 - I actually have a separate complete
15:57 - course on GitHub actions the
15:59 - architecture the syntax how to write
16:01 - pipeline jobs everything in detail
16:04 - explain there so if you want to
16:05 - understand all these syntax then you can
16:08 - actually watch that video but
16:09 - essentially what we're doing is that
16:11 - we're defining that whenever someone
16:13 - pushes to the master branch which is the
16:16 - main branch of this repository or
16:19 - there's a pull request then we want to
16:21 - execute or trigger this workflow and I'm
16:25 - actually going to specify
16:27 - here to trick bigger the workflow every
16:30 - time there is a pull request to be merge
16:33 - into the master Branch or the main
16:36 - branch and in the job section we just
16:38 - have one job called kadana which runs in
16:42 - Ubuntu environment and it has two steps
16:45 - one of them is just standard action to
16:47 - check out the code because it needs the
16:50 - entire code so that it can analyze all
16:52 - the files in the code and the second one
16:55 - is the actual kadana scan which is using
16:57 - kadana action from G actions with a
17:00 - specific version tag and notice that we
17:02 - also have this token or a secret token
17:05 - here as environment variable that is
17:07 - passed to the kadana skin so what is
17:10 - this about so the thing is it's great to
17:13 - run code checks and automated tests to
17:17 - identify any issues but let's say we
17:20 - have 50 issues that were identified
17:22 - going through them in logs is not going
17:24 - to be convenient when we run automated
17:27 - tests or code scans we always want to
17:30 - use a visualization tool with a UI where
17:33 - we can see the issues in a nice overview
17:35 - per file with description maybe with a
17:38 - suggestion on how to fix it we want to
17:40 - be able to sort it based on the level of
17:42 - severity like how severe the issue is is
17:45 - it critical is it low minor issue and so
17:48 - on and there are such tools where you
17:50 - can import the test results in case of
17:53 - kadana it's actually simpler because it
17:55 - comes with its own cloud platform with a
17:58 - UI where we can see the code issues that
18:00 - were discovered with kadana scan so we
18:03 - can connect our project to kadana cloud
18:07 - and it will automatically upload the
18:09 - results of each pipeline run or each job
18:13 - execution of the project to kadana Cloud
18:16 - so we can see the results there and it's
18:19 - very simple to do as well the way we do
18:21 - that is we go to kadana
18:24 - cloud and create just an empty team and
18:28 - as you see I don't have any projects
18:29 - here I'm going to create a project and
18:31 - all I need to do here is basically just
18:33 - drop in the htps URL of the project so
18:38 - I'm going to copy it from
18:40 - here
18:44 - next and there you go so now I have
18:48 - connected my project to kadana Cloud so
18:53 - kodana Cloud knows about the project but
18:55 - I also need to tell GitHub about kadana
18:57 - Cloud so that it will send the results
19:00 - of workflow execution to kadana so it
19:04 - needs to be a two-way connection and
19:06 - that's why we need the token that is
19:08 - displayed right here so I'm going to
19:09 - copy that so that's the token and that's
19:13 - exactly what is referenced right here
19:15 - and in GitHub actions the way you create
19:17 - environment variables which are
19:19 - sensitive data or secret is very simple
19:22 - we just go to settings and then here we
19:25 - have secrets and variables for GitHub
19:28 - actions
19:29 - and we just create a new repository
19:31 - secret I'm going to paste in the token
19:35 - from here and we're going to call
19:39 - this kadana token which is referenced
19:42 - right here so this way GitHub will have
19:45 - an ex's credential basically of kadana
19:47 - cloud to authenticate with it and send
19:50 - the kadana scan execution results which
19:53 - will be displayed in kadana Cloud so I'm
19:55 - going to add the secret and that's it we
19:58 - have configured our pipeline we have our
20:01 - code scan so now I'm just going to
20:03 - commit these
20:05 - changes I'm going to use a terminal from
20:18 - here and let's push the
20:22 - change so
20:25 - now there you go you see that the
20:28 - workflow was automatically trigger and
20:30 - inside that we have kadana job that will
20:34 - run kadana skin that is using this jvm
20:38 - image let's wait for this to complete
20:40 - and we will see the results so our job
20:43 - has completed and as you see it was
20:46 - successful let's check the logs first of
20:49 - all and right here we see the summary of
20:52 - the scan we have 91 problems detected
20:55 - with different severity levels and and
20:59 - these are some of the issues but as I
21:00 - said checking the issues in the logs is
21:03 - actually pretty inconvenient so we want
21:05 - to have a nice UI overview the first one
21:07 - we get is within the GitHub itself so if
21:10 - I jump in right here we have the UI
21:13 - visualization of the issues again with
21:16 - different severity levels so it has
21:19 - detected invalid EML configuration with
21:22 - 47 problems but of course we want to see
21:26 - details of where each one of those
21:27 - issues are coming from which file it is
21:30 - what is the issue and so on and you also
21:32 - have them here in a long list but as I
21:36 - mentioned we want to check kodana cloud
21:39 - and we have this link to detailed kodana
21:42 - report conveniently so if I click on
21:45 - this as you see we have a nice display
21:48 - of all the issues right here and these
21:51 - are actually coming from this view the
21:54 - project that we connected now shows an
21:56 - overview of the last run of the pipeline
22:00 - so every time we run the pipeline it
22:01 - will actually save those runs
22:05 - here and we also see that 661 different
22:09 - inspections were done and all these
22:13 - problems were discovered and we can
22:15 - actually click inside each
22:18 - issue and see exactly which file it
22:21 - comes from what the issue is we can also
22:24 - filter let's say we want to see those
22:26 - High severity issues so now you see a
22:28 - more diverse set of issues like
22:32 - visibility issues where a class is
22:33 - exposed outside of defined scope or
22:37 - configuration property cannot be
22:38 - resolved some improvement suggestions in
22:41 - the code like this one here that doesn't
22:43 - check is present before it calls
22:46 - optional doget method and all these
22:49 - other issues so now of course you can go
22:51 - through each issue one by one and try to
22:54 - resolve it in many cases try to
22:56 - understand whether it is an actual
22:59 - severe issue or not so again if I zoom
23:01 - out we have some moderate problems and
23:06 - let's go to moderate problems and we
23:08 - have some code duplications
23:10 - here and so on and finally we want to
23:13 - configure that autofix feature that
23:16 - kadana offers which I personally find
23:18 - really cool so I want to show you how it
23:19 - works and it's actually a pretty easy
23:21 - configuration all we need to do is set
23:24 - some parameters on our kadana job to the
23:27 - kadana action so I'm going to paste in
23:29 - the configuration so we're going to
23:31 - execute this codon action with argument
23:35 - apply fixes and those fixes will be
23:39 - pushed as a pull request in our
23:42 - repository and we have this attribute
23:45 - called PR mode here that we are setting
23:46 - to false so PR mode basically defines
23:49 - whether only the changed files should be
23:52 - analyz in the poll request and by
23:54 - default it's set to true so we're going
23:56 - to set it to false to analyze not only
23:58 - the changed files and by the way you can
24:00 - actually find all these configuration
24:02 - options in the kodana documentation as
24:05 - well so for GitHub actions you have
24:07 - these arguments here including PR mode
24:10 - push fixes so you can see here what
24:12 - other configuration options are
24:13 - available and in order to allow this job
24:17 - to actually create a poll request in the
24:19 - repository we're going to give it
24:21 - permissions or write permissions to
24:23 - create the poll request and
24:25 - alternatively you can actually configure
24:27 - this Auto F directly in kodana yl
24:31 - configuration file it's called fixes
24:34 - strategy and we have these options we're
24:37 - going to choose apply so we're telling
24:39 - kadana to actually go ahead and apply
24:41 - those automated fixes that it suggests
24:45 - and for this feature we're going to use
24:47 - a specific image version instead of the
24:50 - latest and now let's see how that
24:54 - works I'm going to commit
24:56 - this h autofix
25:06 - and this should
25:09 - trigger the pipeline and as you see
25:12 - after a pipeline execution a new pull
25:15 - request was actually created by
25:23 - kadana which has code changes to fix
25:27 - those issues that detected like making
25:30 - some variables final or getting rid of
25:33 - the if statement where it was not needed
25:36 - it actually removed some comments from
25:38 - the code as well and in some other
25:41 - comments it made the link a clickable
25:45 - link we also have this Java file where
25:47 - it actually imported a library called
25:51 - lombok to use Setter and getter
25:53 - annotations instead of writing the
25:55 - setter and getter like this which again
25:58 - makes the code cleaner another example
26:01 - of using lombok it added some null
26:04 - checks to the
26:06 - parameters and again as I said if you
26:09 - are a junior developer usually the
26:11 - workflow would be that you or another
26:13 - engineer in your team will go through
26:15 - these Autos suggested fixes and you can
26:18 - Implement them or merge them into your
26:21 - code now again as I explained at the
26:23 - very beginning This would run in a
26:25 - feature Branch to scan your commit in
26:27 - the feature branch and kadana will
26:29 - create the pull request to merge into
26:31 - the feature Branch again so all of this
26:34 - is happening before the code even gets
26:36 - to the main branch so that's basically
26:39 - how all this works and if I refresh this
26:43 - you see that another column was added
26:46 - with the list of issues so you kind of
26:49 - build up a history of how many issues
26:51 - were discovered whether it's declining
26:54 - or it's increasing so you'll have all
26:56 - those code scan runs list it right here
26:59 - for a nice overview so that's basically
27:01 - how you create a CI pipeline that will
27:04 - completely scan your code and identify
27:06 - any code quality issues and even give
27:09 - you fixed suggestions that you can
27:12 - directly merge back into your code now I
27:15 - hope this tutorial actually helped you
27:17 - to really understand why CI pipeline is
27:21 - needed and as one of the steps that we
27:25 - execute in the CI pipeline which is code
27:27 - quality check how we integrate a tool
27:29 - like kadana or basically any other tool
27:32 - in your CI workflow to give you a
27:35 - feedback loop and help you maintain good
27:38 - quality of your code especially if you
27:41 - have a large team and everyone's doing
27:42 - their own thing and you have Junior
27:44 - Engineers who are committing their own
27:45 - changes so you have this centralized
27:48 - automated process or workflow to help
27:51 - each engineer keep their code changes in
27:54 - check instead of having all the senior
27:56 - Engineers checking the code that that
27:58 - Junior Engineers are committing but if
28:00 - you want to dive deeper and start
28:02 - building real life devops pipelines for
28:06 - releasing your applications I actually
28:08 - have a complete gleb cicd course on it
28:11 - which I have Linked In the video
28:12 - description so if you're interested you
28:14 - can check it out there let me know if
28:16 - this was helpful for you in your daily
28:19 - engineering work and with that thank you
28:21 - for watching and see you in the next
28:23 - video