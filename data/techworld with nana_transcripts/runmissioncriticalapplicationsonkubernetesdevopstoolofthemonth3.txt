00:00 - in this video we're going to talk about
00:02 - a tool that makes working with
00:04 - kubernetes for developers
00:06 - extremely easy called shipa
00:09 - so first we're going to see what
00:10 - problems shipa solves when working with
00:13 - kubernetes
00:14 - we will then see how shippa actually
00:16 - works and
00:17 - finally i will show you a demo where we
00:20 - will install shipa
00:21 - and seed in action
00:26 - let's say in our project we decided we
00:28 - will use kubernetes to
00:30 - run our application what usually happens
00:33 - in such cases
00:34 - is developers will start to learn
00:36 - kubernetes
00:37 - like kubernetes yaml configuration files
00:39 - kubernetes components
00:41 - such as services deployments etc and
00:44 - kubernetes is not that easy
00:46 - to just learn on the site so as a result
00:49 - developers take most of the time away
00:52 - from actually programming
00:53 - and instead spend it on learning
00:56 - kubernetes and trying to configure the
00:58 - application
00:59 - to run on kubernetes after the
01:01 - configuration
01:02 - they obviously need to test that
01:04 - everything works fine
01:06 - this means they need to deploy the
01:08 - application in a cluster
01:10 - so they need to learn cube ctl or set up
01:13 - a local mini cube cluster
01:15 - or learn how to deploy the yaml files
01:17 - from cicd pipeline
01:19 - again more stuff to learn that has
01:21 - nothing to do with actual programming
01:24 - and is just an overhead of introducing a
01:26 - new technology
01:28 - now what happens after developers have
01:30 - spent days of learning and trying out
01:33 - stuff
01:33 - they finally deploy their application
01:36 - but because they don't know kubernetes
01:38 - so well
01:38 - they may easily misconfigure stuff where
01:41 - the application may be running but long
01:43 - term will create some problems
01:45 - or maybe they deploy their application
01:48 - with
01:48 - security issues simply because they
01:50 - don't know the security
01:52 - best practices in kubernetes this could
01:54 - be related to external services
01:57 - access permissions storing credentials
01:59 - in kubernetes
02:00 - and so on on the other side we have
02:04 - kubernetes administrators these are
02:06 - platform admins who actually
02:08 - set up the kubernetes clusters so
02:10 - developers can use them
02:12 - so when developers start deploying their
02:14 - stuff in clusters
02:16 - using yaml files which are not properly
02:19 - configured
02:20 - or have security issues admins need to
02:23 - take care of cleaning up the mess
02:25 - or identifying such problems and fixing
02:28 - them
02:29 - and then showing developers how to
02:30 - configure it the next time
02:32 - or when developers get stuck or they
02:34 - need additional things
02:36 - in the cluster like monitoring logging
02:39 - they will ask the platform
02:40 - administrators for support
02:42 - so basically as you see developers
02:45 - having to learn
02:46 - and work with kubernetes directly is not
02:49 - a good idea
02:50 - in most of the projects it creates more
02:53 - effort for
02:54 - developers as well as platform
02:56 - administrators
03:00 - the solution is to abstract away the
03:02 - complexity of kubernetes
03:04 - from developers to have something that
03:06 - developers
03:08 - can just feed their code to and it will
03:11 - automatically create kubernetes
03:12 - components
03:13 - like services pods config maps but also
03:17 - do all of that with the configuration
03:19 - and security best practices of
03:21 - kubernetes
03:22 - and that's exactly what shipper does now
03:25 - how does shipa
03:26 - do all this first the kubernetes
03:29 - administrators will connect
03:31 - shipa to multiple kubernetes clusters
03:33 - which may be running on different
03:35 - platforms
03:36 - after which they will create and
03:38 - configure what's called
03:40 - shipa frameworks each framework can be
03:43 - configured
03:44 - with security rules permissions like who
03:47 - can deploy
03:48 - what in that framework and some other
03:50 - configuration to
03:51 - automatically create kubernetes
03:53 - components when the application gets
03:56 - deployed
03:57 - so now developers can simply push their
04:00 - code changes
04:00 - without worrying about any kubernetes
04:03 - related configurations
04:04 - then cicd pipeline will build the code
04:07 - and deliver it to one of the shipa
04:09 - frameworks
04:10 - and ship a framework which is already
04:13 - pre-configured
04:14 - by the admins with all the appropriate
04:16 - settings and rules
04:18 - will check the permissions do security
04:21 - scan
04:22 - assign resources to the application and
04:24 - automatically create
04:26 - all the needed kubernetes components in
04:28 - the cluster
04:29 - so overall this means that instead of
04:32 - platform administrators
04:34 - needing to support developers who are
04:36 - struggling with kubernetes
04:38 - while also making sure the developers
04:40 - don't accidentally mess
04:42 - up the cluster now the admins have all
04:45 - the control
04:46 - and overview of the clusters and how
04:48 - they want to configure it
04:50 - while also freeing the developers from
04:52 - this struggle
04:53 - of working with kubernetes directly so
04:56 - both developers and
04:57 - administrators can now do their jobs
05:00 - more efficiently as a result
05:02 - in the demo we will see two main parts
05:05 - first we will see platform administrator
05:07 - tasks
05:08 - so we will install shipa connect
05:11 - kubernetes cluster to shipa
05:13 - and configure that cluster with
05:15 - different settings
05:16 - using a framework second we will deploy
05:19 - an application into the pre-configured
05:22 - cluster
05:23 - as a developer
05:27 - so let's start with the first step which
05:29 - is creating
05:30 - lk cluster on my lynode account i'm just
05:33 - going to
05:33 - create a cluster select the region
05:35 - nearest to you
05:37 - let's get the latest kubernetes version
05:39 - two of these nodes here
05:41 - and create so our cluster is running
05:45 - so now we can connect to our cluster
05:47 - using this
05:48 - cubeconfig file so i'm gonna download it
05:51 - and once downloaded we're gonna set the
05:54 - cubeconfig
05:55 - and now we can access the cluster which
05:58 - is
05:58 - empty for now so now we're gonna install
06:01 - shipa
06:02 - into our cluster using shipper helm
06:05 - charts
06:06 - the first thing we're going to do is
06:07 - create a namespace
06:09 - a separate namespace where we're going
06:10 - to deploy shipa so let's do that
06:13 - and let's call it shipa system and now
06:15 - we can deploy chart into that namespace
06:18 - for that we have to first add a
06:20 - repository where the chart is
06:23 - so this adds the home repository and now
06:25 - from the repository we can install the
06:27 - chart
06:28 - this is the chart name and as you know
06:30 - when we install helm charts
06:32 - we can override some of the values in
06:34 - the chart right using a values.yaml file
06:38 - and we're gonna need to override just
06:40 - two
06:41 - values which are gonna be username and
06:43 - password
06:44 - so we're gonna need that values.yaml
06:47 - file first
06:48 - so right here i'm going to create
06:51 - values.yaml file
06:54 - right here we have actually the example
06:56 - of how to set this
06:57 - and as you see we have auth and then we
07:00 - have admin user admin password and
07:02 - obviously we can set the values here
07:04 - ourselves
07:05 - this is going to be an email address
07:08 - i'm going to put mine here password
07:12 - super secret and
07:15 - save so we have the values file which we
07:18 - can now use
07:19 - to install the chart so going back to
07:22 - the documentation
07:24 - i'm going to copy this helm install
07:26 - command
07:29 - and let's see that so helm install this
07:32 - is the name that we are giving to our
07:34 - chart installation
07:35 - so we can call it shipa we can leave it
07:38 - at that and this is the name of the
07:39 - shipa chart
07:40 - from this repository so in this install
07:43 - command
07:44 - we're gonna pass that values yaml file
07:47 - as a parameter so it will overwrite
07:50 - this admin user and admin password
07:52 - values now we're gonna need
07:54 - two more options to set here in install
07:57 - command
07:58 - so first one is going to be namespace
08:00 - because we want to install the chart
08:02 - into
08:03 - the shipa system namespace so that's one
08:06 - and the second one is a timeout which is
08:09 - important because
08:10 - the installation of ship actually takes
08:13 - quite some time
08:14 - so we're gonna increase the timeout of
08:16 - this helm command
08:18 - so it just waits longer for the
08:19 - installation to complete
08:21 - so we're gonna set timeout here and it
08:24 - usually takes around 15 to 20 minutes
08:27 - so let's do 20 to be sure and now we can
08:30 - execute this command and wait until
08:32 - shipper gets installed
08:34 - so ship a chart installed successfully
08:37 - you see some output here
08:38 - for kind of the next steps that you can
08:40 - take first of all we see that
08:42 - a default user was configured with the
08:45 - username and password that we provided
08:47 - using this values.yml file
08:49 - so that's what we're going to be using
08:51 - to log into shipa
08:54 - now you can check in the shepa system
08:55 - namespace a lot of pods and services
08:58 - were created
08:59 - and one of the applications is the shipa
09:01 - ui
09:02 - and we can access it using the dashboard
09:04 - web service
09:06 - and since it's an internal service we're
09:08 - going to do port forwarding on that
09:10 - service to access it from localhost
09:14 - shipa system namespace service
09:19 - and the port
09:22 - now on this address we can access
09:25 - the shipper ui and as you see we have
09:29 - the login page and this is where we use
09:32 - the email address and password for the
09:34 - default user that got created
09:37 - and we're just going to click next fill
09:39 - out the form
09:42 - you get the activation code for the
09:44 - email and
09:46 - activate and this is shipper dashboard
09:50 - where you have a nice overview of all
09:51 - the shipper components
09:53 - and clusters that chip manages
09:58 - so now as a kubernetes administrator i
10:00 - can actually use the dashboard
10:02 - to manage the clusters to create teams
10:05 - and users and to give them
10:07 - access to certain clusters but also
10:10 - configure
10:11 - frameworks or set of rules for the
10:13 - clusters
10:14 - which as i mentioned earlier is the way
10:17 - to give
10:18 - the kubernetes administrators control
10:21 - over
10:21 - how the clusters are configured and what
10:24 - rules
10:25 - to apply when the developers
10:28 - deploy their applications in the cluster
10:31 - so with the default user you actually
10:32 - have
10:33 - admin privileges so with this user i
10:35 - could actually now create users and
10:37 - teams and give them permissions to
10:39 - deploy to the clusters
10:41 - create frameworks so in our case let's
10:43 - say as an
10:44 - admin i create a developer user and
10:47 - shipa
10:48 - dev team then i'll have to add the user
10:50 - to the team and give them
10:51 - permissions to deploy applications into
10:54 - the cluster
10:55 - currently we can't do that from the
10:57 - shipper dashboard so we will use a
10:59 - cheaper command line tool
11:03 - and installing cheaper cli is actually
11:05 - pretty simple
11:06 - we just have to execute this one command
11:11 - successfully install so now if i do
11:13 - cheaper
11:14 - i should see that cheaper is working we
11:16 - have the version and the list of
11:18 - commands
11:18 - so in order to be able to use the
11:21 - shipper command
11:22 - we have to connect shipper client to the
11:24 - shipper installation
11:25 - so we're going to add what's called
11:27 - shipa target
11:29 - and the target is going to be the
11:32 - address of the shipper
11:33 - public load balancer so right here if i
11:36 - do
11:37 - cubectl getservice you see we have a
11:41 - list of services here and
11:43 - one of them is a load balancer type
11:46 - which means
11:46 - it is actually a publicly available
11:49 - endpoint
11:50 - and in lynode we can see it's a node
11:53 - balancer
11:54 - this one right here so that's basically
11:57 - the endpoint
11:59 - of shipa so i'm going to copy that ip
12:01 - address
12:03 - and right here we can execute shipa
12:07 - target add and the name of the target
12:11 - we can call it cheaper again the ip
12:13 - address that i just copied
12:15 - and with minus s we are basically saying
12:18 - set these as a current target so if i
12:21 - execute this
12:22 - it says new target shipa now that we
12:25 - have shipper target
12:26 - set and cheaper cli pointing to that
12:30 - shipper target we're gonna log into
12:32 - shipa just like we did on the
12:35 - dashboard so comment for that is shipa
12:38 - login and this is the email address
12:41 - or the username in this case forshipa
12:44 - and then
12:44 - the same password and now we can
12:47 - actually
12:48 - do anything in chipa using this user
12:51 - because
12:52 - this user has all the privileges so
12:55 - in order to see that i can actually do
12:58 - user
12:59 - list which is one of the commands and
13:01 - this will show me
13:02 - all the users in that shipa installation
13:06 - to which we are connected now and this
13:08 - is the user i'm logged in
13:10 - with which has basically all the
13:12 - permissions
13:14 - and this is another user that has no
13:16 - permissions because we haven't
13:17 - assigned any
13:21 - now with shipa client we can create a
13:23 - developer role
13:25 - we can add permissions to the developer
13:27 - role
13:28 - and then assign the role to the user
13:31 - and add the developer user to the shipa
13:34 - dev team
13:35 - and you can see all these commands in
13:37 - the shipper documentation
13:38 - which i will link in the description
13:44 - as an admin i will now create framework
13:46 - component for
13:47 - development cluster to configure which
13:50 - security settings and
13:52 - access rules will be applied when
13:53 - applications get deployed into that
13:55 - cluster
13:56 - and note that framework will apply to a
13:59 - specific namespace and not the whole
14:01 - cluster
14:02 - this way you can apply different rules
14:04 - to different name spaces in the same
14:05 - cluster
14:07 - now we have a framework but we have to
14:09 - assign that framework to a cluster
14:11 - and let's say our development cluster is
14:14 - running on eks
14:15 - so we'll have to connect that eks
14:17 - cluster to shipa
14:19 - so that we can apply shipper framework
14:21 - on it
14:22 - and this is a common use case because
14:25 - you use
14:26 - shipa to manage multiple clusters from
14:28 - different platforms
14:32 - i already have an eks cluster running so
14:35 - to connect that we'll have to create a
14:37 - user in that kubernetes cluster
14:40 - and then give shipa credentials of that
14:43 - user
14:44 - to connect to the cluster again i will
14:46 - link all the steps for that
14:48 - in the description
14:51 - so now as an admin we have created a
14:54 - developer user
14:55 - with permissions to deploy their
14:57 - applications to the cluster
14:59 - we have added an eks cluster to
15:02 - shipa and we have applied a framework
15:05 - to that eks cluster which means that now
15:08 - developers
15:09 - in this team can actually start
15:11 - deploying their applications
15:13 - to the development cluster so how will
15:15 - developers actually do that
15:17 - also using shipa command line interface
15:22 - from their local machine developer would
15:25 - set the cheaper target
15:27 - and log into shipper with its user
15:29 - credentials
15:30 - and using shipperclient they can deploy
15:33 - applications in a kubernetes development
15:35 - cluster
15:36 - managed by shipa
15:42 - so in shipa developers can actually
15:44 - deploy applications in three different
15:46 - ways
15:47 - first of all if developers are testing
15:49 - their code changes
15:51 - they can deploy the source code to the
15:54 - kubernetes cluster directly from their
15:56 - local machine
15:56 - using shipa second they can deploy a
16:00 - docker image into the cluster
16:02 - also from their local machine or the
16:05 - third way they can deploy from
16:06 - a cicd pipeline which is going to be the
16:09 - most
16:10 - common use case generally when deploying
16:12 - applications
16:13 - so in this case developers would just
16:15 - push their code changes
16:17 - triggers the icd pipeline which then
16:19 - will build the application
16:21 - image and execute shipper commands to
16:24 - deploy that image into the cluster
16:26 - so in any of these three cases the
16:29 - deployment
16:30 - does not require any kubernetes specific
16:32 - knowledge
16:33 - or a bunch of kubernetes yaml files we
16:36 - basically just give shipa the image
16:38 - or source code and shipper will then
16:40 - take care of
16:41 - creating all the necessary kubernetes
16:43 - components for that application
16:46 - and in our example now we're gonna
16:48 - deploy
16:49 - an application from an image and we're
16:51 - going to use
16:52 - a public nginx image from docker hub
16:55 - just to show you
16:56 - a simple demo so basically deployment is
16:59 - going to be in two steps
17:00 - we're going to create a shipa
17:02 - application which is going to be
17:04 - listed here and then we're going to
17:06 - deploy that application
17:08 - so shipa app create we're going to give
17:11 - our application
17:12 - a name just like here we have a
17:14 - dashboard as an application name
17:16 - let's call it my app and then we're
17:18 - going to have the team
17:20 - because team has access and permission
17:23 - to deploy
17:24 - and create applications and then we have
17:26 - the framework
17:28 - and we're going to use development
17:30 - framework so basically we're saying
17:32 - create my app definition for
17:35 - team shipa dev team using framework
17:37 - development
17:38 - and shipper knows how that framework is
17:40 - configured to which cluster
17:42 - it applies etc so it will do all that in
17:45 - background so if i execute this this
17:48 - will create my app
17:49 - and now if we go back to the dashboard
17:51 - you see
17:52 - that we have my app here and the status
17:55 - is idle
17:56 - and that means that the application
17:59 - definition just created but
18:02 - no components were created yet
18:05 - so now as a second step we're going to
18:06 - deploy the application
18:08 - so the pods will actually start and to
18:10 - deploy the application
18:12 - we're going to use shipa app deploy
18:15 - command
18:16 - and then we're going to provide the name
18:18 - of the application that we created here
18:21 - and we want to deploy it from nginx
18:23 - image
18:24 - and for that we're going to do dash i
18:26 - for image
18:27 - and nginx so i'm going to execute this
18:31 - and shipper will start pulling nginx and
18:34 - deploying it
18:35 - into the kubernetes cluster and going
18:38 - back
18:38 - you see that the status is now running
18:40 - and we have one unit
18:42 - so if i go inside we have an endpoint as
18:45 - well
18:46 - which got generated just for this
18:48 - application and if we click
18:50 - inside there you go we have welcome to
18:53 - nginx page
18:54 - so that's how you can deploy
18:55 - applications in shipa
18:58 - and for every application that you
19:00 - create and deploy
19:02 - you have some metrics here for
19:04 - application
19:05 - as well as the shipper units which kind
19:08 - of maps to
19:08 - kubernetes pods you can use the
19:11 - lifecycle tag
19:12 - to actually roll back the images so if
19:15 - we deployed
19:16 - another version of our application image
19:19 - then you would have the list right here
19:22 - and then you can
19:23 - choose one of the previous images to
19:25 - roll back to
19:31 - now just note here all that i demoed in
19:33 - this video is actually a free version of
19:35 - shipa
19:36 - so you can just install it and try it
19:38 - out for free
19:39 - in the pro version though they actually
19:41 - have a couple of really cool
19:42 - additional features so for example for
19:45 - each application you get
19:47 - network policies so these are the
19:50 - network rules for incoming so for
19:53 - ingress
19:54 - and for outgoing traffic and you can
19:56 - configure this for every application
19:59 - in a very specific way so from which
20:01 - services you allow traffic on which port
20:04 - etc
20:04 - you also have the security scans which
20:07 - is
20:08 - a really useful security feature so
20:10 - basically you get
20:11 - automatic scans for your applications
20:13 - and then you see an
20:14 - overview of any vulnerabilities that the
20:17 - security scan detected in your
20:19 - applications
20:21 - and you also have something called
20:23 - integration so with this you can
20:24 - actually configure
20:26 - whenever something happens to your
20:28 - application something happens in your
20:30 - setup
20:31 - you can actually send automatic
20:33 - notifications to one of those services
20:36 - and another cool thing that you have in
20:39 - the pro version
20:40 - is an application map so here you have a
20:42 - nice graph
20:43 - of how different components kind of
20:47 - interact with each other and you also
20:49 - have
20:50 - the network map for incoming connections
20:53 - to your clusters and for outgoing
20:55 - connections
20:56 - now let me know in the comments what you
20:58 - think about shipa and with that
21:00 - thank you for watching and see you in
21:02 - the next video