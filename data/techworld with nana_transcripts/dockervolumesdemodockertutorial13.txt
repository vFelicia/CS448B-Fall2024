00:00 - in this video we are gonna look at
00:01 - docker volumes in practice and this is a
00:05 - simple node.js MongoDB application that
00:10 - we're gonna attach the volume to so that
00:12 - we don't lose the database data every
00:14 - time we restart them I'm going to be
00:16 - container so let's head over to the
00:25 - console and I'm gonna start the MongoDB
00:27 - with the docker compose so this is how
00:30 - the compose looks like we're gonna start
00:32 - the MongoDB on container in the
00:34 - Express container so that we have a UI
00:37 - to it so I'm gonna execute the docker
00:40 - compose which is gonna start MongoDB and
00:47 - the Express so when it started I'm
00:53 - gonna check that Express is
00:55 - running on port 8080 and here we see
00:59 - just a default databases so these are
01:01 - just created by default on startup and
01:04 - we're gonna create our own one for the
01:07 - node.js application and inside of that
01:10 - database I'm gonna create users
01:14 - collection so these are the
01:16 - prerequisites or these are the things
01:18 - that my node.js application needs so
01:22 - this one here in order to connect so the
01:25 - database my DB this is what we just
01:28 - created my DB and inside of that to the
01:32 - collection called users so let's start
01:36 - the application which is running on port
01:41 - 3000 so here and this is our app which
01:47 - when I edit something here will write
01:53 - the changes to my database now if I were
01:58 - to restart now the MongoDB container I
02:01 - would lose all this data so because of
02:04 - that way to do it as explained in the
02:06 - previous video docker volumes we're
02:09 - gonna use named volumes inside of the
02:11 - docker compose file
02:13 - persist all this data in the MongoDB
02:17 - let's head over to dr. Campos so the
02:21 - first step is to define what volumes I'm
02:24 - gonna be using in any of my containers
02:26 - and I'm gonna do that on the services
02:29 - level so here I define the list of all
02:33 - the volumes that I'm gonna need in any
02:35 - of my containers and since we need data
02:38 - persistence in for MongoDB we're gonna
02:40 - create data volume here now this
02:46 - is gonna be the name of the volume
02:48 - reference but we also need to provide
02:51 - here a driver local so the actual
02:54 - storage path that we're gonna see later
02:57 - once it's created it is actually created
02:59 - by toker itself and this is a kind of an
03:02 - information additional information for
03:04 - docker to create that physical storage
03:07 - on a local file system so once we have a
03:11 - name reference to a volume defined we
03:14 - can actually use it in the container so
03:18 - here I'm gonna save volumes and here I
03:24 - will define a mapping between the
03:26 - data volume that we have on our host and
03:30 - the second one will be the path inside
03:35 - of the MongoDB container but it has to
03:36 - be the path where MongoDB explicitly
03:39 - persists its data so for example if you
03:43 - check it out online you see that the
03:46 - default path where MongoDB stores its
03:49 - data is data slash data slash to B and
03:52 - we can actually check that out so if I
03:55 - say doc repeat s and go inside the
03:57 - container
04:01 - it's minus 80
04:03 - I can actually see data DP and here is
04:12 - all the data that MongoDB actually holds
04:14 - but this is of course only the container
04:18 - so when the container restarts the data
04:20 - get regenerated so nothing persists here
04:23 - so this is the path inside of the
04:27 - container not on my host that we need to
04:29 - reference in the volumes
04:31 - here so we're attaching our volume on
04:35 - the host to data slash data slash to be
04:40 - inside of a container so for example for
04:43 - my sequel it's going to be far leap my
04:47 - sequel for Postgres it's also going to
04:49 - be Varley Postgres sequel slash data so
04:53 - each database will have its own so you
04:55 - have to actually find the right one so
04:59 - what this means is that all the data
05:01 - with that we just so here all of this
05:03 - will be replicated on a container start
05:06 - up on our host on this persistent volume
05:09 - that we defined here and vice-versa
05:12 - meaning when a container restarts all
05:14 - the data that is here will be replicated
05:18 - inside of that directory inside of a
05:21 - container so now that we have defined
05:23 - that let's actually restart the document
05:26 - post and restart it so once we create
05:38 - the data and I'm gonna collection and
05:44 - let's actually change this one and
05:53 - update it so we have the data here so
05:59 - now that we have the persistent volume
06:01 - defined if I were to restart all these
06:04 - containers these data should be
06:06 - persisted so on the next restart I
06:08 - should see the database my DB collection
06:11 - ends the entry here so let's do that
06:24 - great so let's check see the database is
06:29 - here the collection is here and the
06:31 - entry has persisted
06:37 - so now let's actually see where the
06:40 - darker volumes are located on our local
06:43 - machine and that actually differs
06:45 - between the operating systems for
06:47 - example on a Windows laptop or computer
06:50 - the path of the docker volume will be at
06:53 - program data docker slash volumes the
06:57 - program data docker folder actually
07:00 - contains all the other container
07:02 - information so you would see other
07:05 - folders in this docker directory besides
07:08 - the volumes on Linux the path is
07:11 - actually /var leap docker volumes which
07:14 - is comparable to the Windows path so
07:17 - this is where the docker saves all this
07:19 - configuration in the data end on the Mac
07:21 - it's also the same one inside of this
07:25 - volumes director you actually have a
07:27 - list of all the volumes that one or many
07:30 - containers are using and each volume has
07:33 - its own hash which is or which has to be
07:37 - unique and then slash underscore data
07:41 - will actually contain all the files and
07:43 - all the data that is persisted let's
07:46 - head over to the command line and
07:48 - actually see the volumes that we
07:51 - persisted for MongoDB now interesting a
07:54 - note here is that if I were to go to
07:57 - this path that I just showed you in the
07:59 - presentation which is var Lib docker C
08:04 - there is no such directory so that could
08:07 - be a little little bit confusing but the
08:10 - way it works on Mac specifically on
08:12 - Linux you would actually have that path
08:14 - directly on your host but none Mac it's
08:17 - a little bit different and actually I
08:19 - learned this fact from the stack or a
08:21 - flow discussion so basically what
08:24 - happens is that docker for Mac
08:26 - applications seems to actually create a
08:29 - Linux VM in the background and store all
08:33 - the docker information or toker data at
08:35 - all the containers and the volumes etc
08:37 - inside of that VMs storage so if we
08:42 - execute this command here so this is
08:45 - actually the physical storage on my
08:46 - laptop that I have where all the data is
08:49 - stored but if I execute this command I
08:52 - actually get the terminal of that VM and
08:56 - inside here if I look I have a virtual
09:01 - different virtual file system and I can
09:05 - find that path that I showed you here so
09:07 - it's var leap docker see so I have all
09:13 - this docker information here I have the
09:17 - containers folder and I have volumes
09:21 - folder so this is the one we need sort
09:25 - of that is usually go to the volumes and
09:27 - this is a list of volumes that I have
09:30 - created and this is the one that came
09:34 - from our docker compose right this is
09:37 - the name of our F this is the this is
09:39 - what docker compose actually takes as
09:41 - the name you can actually take a look
09:44 - here so when it's creating this
09:47 - containers it depends this name is a
09:50 - prefix and then there is MongoDB and our
09:53 - volume has the same pattern it has the
09:57 - prefix and then data this is the
10:00 - name that we defined here so now if we
10:03 - look inside of that data volume
10:07 - directory we see that underscore data
10:14 - and if you have seen my previous video
10:19 - where I explain the different types of
10:21 - doc-doctor volumes this would be the
10:23 - anonymous volumes so basically here you
10:25 - don't have a name reference it's just
10:27 - some random unique ID but it's the same
10:31 - kind of directory as this one here the
10:34 - difference being that this one has a
10:36 - name so it's more it's easier to
10:39 - reference it with the name so this is
10:41 - anonymous volume this is a named volume
10:43 - but the contents will be used in the
10:46 - same way so here as you see in this
10:50 - underscore data we have all the data
10:53 - that MongoDB uses so this will be where
10:56 - it gets the date the default databases
10:58 - and the changes that we make through our
11:00 - application inside and if I go inside of
11:03 - containers so remember this volume is
11:06 - attached to MongoDB and is replicated in
11:13 - side of the container under path slash
11:16 - data / dB
11:17 - so if we go inside of the container here
11:23 - PS / DP we'll see actually the same kind
11:35 - of data here so we have all this index
11:37 - and collection files just like we did in
11:41 - this one so now whenever we make changes
11:44 - to our application for example we change
11:46 - it to Smith and this will make the
11:53 - container update its data and that will
11:55 - cascade into these volumes directory
11:58 - that we have here so that on the next
11:59 - startup of a container when the slash
12:02 - data slash to be is totally empty it
12:04 - will actually populate this directory
12:06 - with the data from this persistent
12:09 - volume so that we will see all the data
12:12 - that we created through our application
12:15 - again on startup and that's how docker
12:18 - volumes work
12:21 - in order to end that screen session that
12:24 - we just started because exceeds doesn't
12:27 - work in this case somehow on Mac you can
12:30 - actually click on ctrl a K and then just
12:33 - type Y and the session will be closed so
12:37 - when you do screen LS you should see
12:40 - actually it's terminating thanks for
12:42 - watching the video I hope it was helpful
12:43 - and if it was don't forget to like it
12:46 - this is a video series so I will create
12:48 - a new one every week so if you want to
12:51 - be notified whenever a new video comes
12:53 - out then subscribe to my channel if you
12:56 - have any questions if something wasn't
12:58 - clear in the video please post them in
12:59 - the comment section below and I will try
13:01 - to answer them so thank you and see you
13:04 - in the next video