00:00 - if you know my videos you know that i
00:02 - cover various devops tools and concepts
00:05 - on this channel but to address the main
00:07 - question what exactly is devops
00:10 - and that's what we're going to focus on
00:12 - in this video first we'll see why is
00:14 - devops even needed in the application
00:16 - release process and what are the
00:18 - challenges in this process that devops
00:21 - solves of course we will talk about what
00:23 - devops concept actually is we will also
00:26 - see the devops as a separate role and
00:29 - how it evolved as well as what are the
00:31 - tasks and responsibilities of a devops
00:34 - engineer and finally we will briefly
00:36 - talk about sre and how sre fits in the
00:40 - whole
00:41 - devops process well devops is a
00:43 - relatively new concept which has been
00:45 - gaining a lot of popularity and taking
00:48 - over the traditional way of software
00:51 - development devops term itself is so
00:54 - broad and includes so many things that
00:56 - it became difficult to exactly define it
00:59 - and clearly set the boundaries of devops
01:02 - compared to other it fields so it's
01:04 - encompassing a lot of things
01:07 - the simplest definition is that devops
01:10 - is an intersection of development and
01:12 - operations but where do boundaries of
01:15 - devops start and end which part of
01:18 - development is not devops or what part
01:20 - of operations is not devops and why was
01:23 - there even a need for something between
01:26 - development and operations
01:28 - development and operations are two main
01:30 - components in the whole application
01:33 - release process
01:34 - so let's look in detail at this release
01:37 - process starting from the very beginning
01:40 - whenever we're developing an application
01:42 - we always have the same process of
01:44 - delivering that application to the end
01:47 - users
01:48 - so this is the main goal no matter if
01:50 - you use waterfall or agile or whatever
01:53 - approach at its core you create an
01:56 - application and you want to deliver it
01:58 - to your end users so that they can use
02:01 - it so let's say you have a great idea
02:03 - about a cool application you define its
02:05 - functionality or in other words what
02:08 - features it will have
02:10 - you coded you tested and now that you
02:12 - have a tested application you want to
02:15 - actually deploy it on a public server
02:18 - and let users access it
02:20 - for that you build and package your
02:23 - application in some kind of executable
02:26 - form so that it can run
02:28 - you configure the public server with all
02:30 - the needed stuff like installing any
02:32 - tools the application needs and deploy
02:34 - your application there you configure
02:36 - firewall rules to allow access to the
02:38 - application on the server and you have
02:41 - launched users can start using it
02:44 - so that's the simplified
02:46 - basis of any application release but
02:50 - that's not the end of the journey while
02:52 - in use you of course have to check in on
02:55 - your application is everything running
02:57 - fine are users experiencing any issues
03:00 - maybe there are bugs in the application
03:02 - that you didn't catch when testing
03:04 - also can application handle high user
03:07 - loads etc so after launching it you have
03:10 - to actually make sure that your
03:12 - application is accessible and usable by
03:16 - end users and if there are any issues
03:18 - for users of course you should fix them
03:21 - now that was the initial launch of your
03:23 - application but the application
03:25 - development is not done yet
03:28 - if you see users like your application
03:30 - you would want to make it even cooler
03:32 - add new features maybe optimize the
03:34 - performance by getting better servers or
03:37 - making your application faster and so on
03:39 - so you still have a lot of things to do
03:42 - and every time you improve your
03:44 - application
03:45 - either the code itself or the server
03:47 - configuration you want to make this
03:50 - improvement accessible to the end users
03:52 - immediately
03:54 - so after the initial launch you do
03:56 - multiple updates to your application and
03:59 - to keep track of these updates you
04:02 - version those changes there are many
04:04 - ways to version changes to the
04:06 - application
04:07 - one common way of versioning is with
04:10 - three numbers one for major changes
04:13 - like you replace the framework you use
04:15 - for coding
04:16 - another one for minor changes
04:19 - like you edit one small feature
04:21 - and one for quick small changes or maybe
04:24 - small bug fixes and you do that over and
04:27 - over again you have an idea of
04:29 - improvement you implement it in code you
04:31 - test it build and package it you deploy
04:34 - it and once released you observe it in
04:38 - the production to see
04:40 - whether there are any new improvement
04:42 - possibilities or any issues that need to
04:45 - be fixed right away
04:47 - so this gives you a process of
04:50 - continuous delivery of changes an
04:52 - endless cycle of improvements to your
04:55 - application
04:56 - and devops is about making this process
04:59 - of continuous delivery
05:01 - fast and with minimal errors and bugs
05:05 - so with devops improvements get created
05:07 - and delivered to users fast but also
05:10 - those improvements are of high quality
05:12 - and well tested and that is a big
05:15 - challenge
05:16 - quickly delivering high quality code now
05:18 - let's see what are exactly the
05:20 - challenges that teams may face during
05:23 - this process and which devops tries to
05:25 - solve during this whole release process
05:28 - we have roadblocks and frictions that
05:31 - slow down the process make it too much
05:33 - effort and allow errors to slip through
05:36 - all the way to production now what are
05:38 - the frictions and roadblocks in the
05:40 - release process
05:42 - first and the most important
05:44 - challenge
05:45 - is miscommunication and lack of
05:47 - collaboration between developers and
05:50 - operations so releasing application has
05:53 - two main parts you code the application
05:56 - you deploy and run the application
05:58 - developers are responsible for coding
06:01 - operations are responsible for
06:04 - running the application and between
06:06 - these two
06:07 - there might be a gap of i wrote an
06:10 - application but i can't run it
06:12 - or i'm running the application but i
06:14 - don't know how it works so developers
06:17 - would code without considering
06:19 - where or how the code will be deployed
06:21 - while operations would try to deploy
06:24 - without really understanding
06:25 - what and why they are deploying or how
06:27 - the application even works and this
06:30 - would result in miscommunications
06:32 - between these two developers finish
06:34 - coding but the deployment guide for the
06:36 - operations team is not good enough
06:38 - or well documented enough so operations
06:41 - team struggles deploying it so release
06:43 - takes longer
06:45 - or developers finish coding but the
06:47 - feature cannot be deployed because it
06:49 - has a lot of issues so the operations
06:52 - throws it back with improvement
06:54 - suggestions this kind of
06:55 - miscommunication could cause stretching
06:58 - the release periods for days and weeks
07:01 - and in complex badly maintained projects
07:03 - maybe even month so between the
07:05 - developer is done with the feature and
07:07 - operation starts deploying it there is
07:10 - no clearly defined automated process of
07:12 - handover it's based on a complex
07:15 - bureaucratic process of what checklists
07:18 - need to be completed and what needs to
07:20 - be documented and who needs to manually
07:22 - approve what for the release and so on
07:26 - so no streamlines or automated processes
07:28 - here
07:29 - apart from miscommunications between
07:32 - development and operations in a
07:34 - traditional setup where one team is only
07:37 - responsible for development and other
07:40 - team only for operations
07:42 - these two have
07:44 - seemingly different incentives that make
07:46 - it hard for them to work together
07:49 - developers want to push out new features
07:51 - fast
07:52 - that's their incentive
07:54 - while operations want to make sure
07:56 - those changes don't break anything
07:59 - because operations are incentivized to
08:02 - maintain stability in production their
08:05 - main focus is to make sure the
08:07 - application is available doesn't crash
08:09 - doesn't show 500 errors to the users and
08:12 - so on
08:13 - this means that operations
08:15 - need to resist the speed of release and
08:18 - check all the aspects of a new release
08:20 - to make sure it's 100 safe which again
08:24 - slows down the process especially
08:26 - considering that operations don't really
08:28 - understand the code or the application
08:31 - so it's even more effort for them to
08:33 - evaluate this new release
08:35 - so for example let's say developers
08:37 - developed a new feature which was
08:39 - released but this feature consumes so
08:42 - much resources in the production
08:44 - environment that the servers got
08:45 - overloaded and the application crashed
08:48 - now operations team needs to fix that so
08:51 - because it's the operations who needs to
08:53 - put out the fires when something like
08:55 - this goes wrong developers may not be as
08:58 - careful as operations about the changes
09:01 - they release
09:02 - and again focus on releasing new
09:05 - features as fast as possible without
09:07 - really thinking so much about stability
09:10 - so even though the main common goal of
09:13 - everyone in a company should be to
09:15 - deliver high quality applications to the
09:18 - end users fast in practice the more
09:21 - immediate goals are for each role to do
09:24 - their job
09:25 - and developers job is to quickly create
09:27 - new features and push them out
09:30 - operations job is to maintain the system
09:32 - stability and resist new changes being
09:35 - pushed out and this gives us a conflict
09:37 - of interest
09:39 - so this kind of setup naturally
09:42 - makes it difficult for those two to
09:44 - collaborate another showstopper when
09:46 - releasing a feature is security just
09:49 - like operations team carefully evaluates
09:52 - and changes to make sure they won't
09:54 - affect system stability
09:57 - security team will evaluate any changes
10:00 - to make sure they don't affect systems
10:02 - security and in a traditional setup this
10:06 - is the same manual bureaucratic process
10:09 - as operations which takes days or weeks
10:13 - and slows down the release process
10:16 - and as i mentioned devops is about
10:18 - removing any roadblocks that slow down
10:21 - the process
10:22 - so it includes this one as well however
10:25 - even though this is part of the devops
10:27 - solution there was a separate term
10:30 - created for that called devsecops in
10:33 - order to highlight and just remind the
10:35 - teams of the importance of security
10:38 - because it somehow got left out i
10:40 - actually have a separate dedicated video
10:42 - on devsecops which you can also check
10:44 - out if you're interested now adding to
10:46 - the list of show stoppers is application
10:49 - testing in many projects there are
10:52 - separate teams or roles for testers who
10:55 - test the application changes on
10:57 - different levels
10:58 - like testing just the feature testing
11:01 - the whole application
11:02 - testing on multiple environments etc and
11:05 - often these tests are done manually when
11:08 - teams cannot totally rely only on their
11:11 - automated tests and only after manual
11:14 - testing is done can the change be
11:16 - released
11:17 - and even though this may not be done by
11:19 - development or operations role but
11:22 - rather a separate tester role this is an
11:25 - important part of the release process
11:27 - and may also slow it down considerably
11:30 - as i mentioned many of the tasks during
11:33 - the release process like testing
11:36 - security checks deployment etc used to
11:39 - be done manually for example operations
11:42 - would do most of the operations tasks
11:44 - manually either by directly executing
11:46 - commands on the servers to install tools
11:49 - configure stuff do patches or have
11:52 - scripts or small programs they execute
11:54 - but in both cases this is manual work so
11:57 - application release tasks are not
12:00 - automated so we're manually deploying
12:01 - the application manually preparing the
12:04 - deployment environment creating
12:06 - infrastructure configuring servers etc
12:08 - manually configuring jenkins jobs for
12:10 - example
12:11 - manually configuring access to the
12:14 - servers to jenkins build to all the
12:17 - tools etc and this manual work is slow
12:20 - and more error prone because of human
12:23 - error plus with manual work you have a
12:25 - disadvantage that knowledge sharing is
12:28 - very difficult
12:29 - because people who do the tasks would
12:31 - have to document it and others would
12:33 - have to read it it's also very
12:35 - intransparent because it's hard to trace
12:38 - who executed what
12:40 - when and finally when infrastructure
12:43 - configuration and so on was done
12:45 - manually
12:46 - if something happens to the
12:47 - infrastructure it may be really hard to
12:50 - recover and replicate the exact state
12:53 - fast you would have to remember exactly
12:55 - what was done on the servers in which
12:58 - order to get to that previous
13:00 - infrastructure state so you see the main
13:02 - characteristic of all these issues is
13:04 - that they all slow down the release
13:06 - cycle and create roadblocks on the way
13:09 - and you also see in case of security and
13:12 - testing that devops may even go over
13:15 - only development or only operations
13:17 - responsibilities and tasks and that's
13:20 - why to understand devops instead of
13:22 - focusing on the name and what it means
13:25 - we're focusing on what it tries to
13:27 - achieve devops tries to remove all these
13:30 - roadblocks and things that slow down the
13:33 - release process whatever that may be and
13:35 - instead of manual inefficient processes
13:39 - helps create fully automated streamlined
13:42 - processes for release cycles and this
13:45 - can be done step by step removing one
13:47 - roadblock at a time until you have a
13:50 - fully optimized and automated device
13:53 - process that makes your application
13:55 - release super easy there are many
13:58 - companies who have optimized the process
14:01 - to the level that they can release
14:03 - multiple times a day of course not every
14:06 - project needs multiple releases a day
14:08 - but having this kind of
14:10 - streamlined release process is obviously
14:13 - beneficial for everyone so how does
14:15 - devops help achieve this and
14:19 - solve all these challenges well by the
14:21 - official definition and this was the
14:23 - original idea of devops
14:25 - devops defines a combination of cultural
14:28 - philosophies practices and tools for
14:31 - doing that so devops is not just one set
14:34 - of tools or one specific concept it's a
14:37 - combination of anything that creates the
14:39 - process of releasing the software fast
14:43 - and with high quality and the main part
14:45 - of the concept
14:47 - was that developers and operations
14:49 - people should work together more often
14:52 - talk to each other more often and
14:54 - collaborate better to achieve that
14:59 - but actually this definition is too
15:01 - broad and too high level and makes it
15:04 - hard to imagine how it works in practice
15:07 - so it's just not specific enough so
15:09 - naturally different companies
15:11 - implemented devops in different ways so
15:14 - the actual implementation of devops
15:16 - looked pretty different from company to
15:19 - company but since companies started
15:21 - adopting it gradually it got a more
15:23 - concrete form with some of the common
15:26 - patterns across many companies and one
15:30 - of these patterns was that devops
15:32 - evolved into an actual role called a
15:34 - devops engineer
15:36 - where either developers are doing devops
15:39 - as a job next to development or
15:41 - operations are doing it or someone is
15:43 - doing devops exclusively as their only
15:46 - job and a set of technologies that were
15:49 - used to implement the devops principles
15:52 - became devops technologies
15:54 - which now devops engineers would need to
15:57 - learn and i understand that many people
15:59 - are resisting the idea of devops
16:01 - engineer and the creators of the devops
16:04 - concept didn't see it used this way but
16:07 - the reality is often different from the
16:09 - theory we see that concept was adjusted
16:12 - and bent to meet the needs of the end
16:15 - goal and devops engineer role is what
16:18 - came out of it and that devops role is
16:20 - responsible for creating a streamlined
16:23 - release process without any roadblocks
16:26 - slowing down the release and that's why
16:28 - in the center of devops is the
16:30 - well-known continuous integration
16:33 - continuous delivery process
16:37 - so let's see exactly what makes up a
16:40 - fully streamlined cicd pipeline and
16:43 - generally what are the tools and
16:45 - concepts you need to learn as a devops
16:48 - engineer what tasks and responsibilities
16:50 - it has as well as where is the line and
16:53 - boundaries of devops from development
16:56 - and from operations
17:01 - it all starts with the application
17:03 - developers team will program an
17:05 - application with any technology stack
17:08 - different programming languages build
17:10 - tools etc
17:11 - and they will of course have a code
17:13 - repository to work on the code in a team
17:17 - one of the most popular ones today is
17:20 - git
17:21 - now you as a devops engineer will not be
17:24 - programming the application but you need
17:26 - to understand the concepts of how
17:28 - developers work which git workflow they
17:31 - are using also how the application is
17:34 - configured to talk to other services or
17:37 - databases as well as concepts of
17:40 - automated testing and so on
17:46 - now that application needs to be
17:47 - deployed on a server so that eventually
17:51 - users can access it right that's why
17:53 - we're developing it so we need some kind
17:56 - of an infrastructure on-premise servers
17:59 - or cloud servers and these servers need
18:01 - to be created and configured to run our
18:04 - application
18:05 - again you as a devops engineer may be
18:08 - responsible for preparing the
18:09 - infrastructure to run the application
18:12 - and since most of the servers where
18:14 - applications are running are linux
18:17 - servers
18:18 - you need knowledge of linux and you need
18:20 - to be comfortable using command line
18:23 - interface because you will be doing most
18:25 - of the stuff on the server using command
18:28 - line interface so
18:30 - knowing basic linux commands installing
18:33 - different tools and software on servers
18:35 - understanding linux file system
18:38 - basics of how to administer a server how
18:41 - to ssh into the server and so on you
18:45 - also need to know basics of networking
18:48 - and security for example to configure
18:51 - firewalls to secure the application but
18:53 - also open some ports to make application
18:56 - accessible from outside as well as
18:58 - understand how ip addresses ports and
19:02 - dns works
19:03 - however to draw a line here between it
19:06 - operations and devops you don't have to
19:09 - have advanced super operating system or
19:12 - networking and security skills and be
19:15 - able to administer the servers from
19:17 - start to finish there are own
19:19 - professions like network and system
19:21 - administrators security engineers and so
19:24 - on that really specialize in one of
19:26 - these areas so your job is to understand
19:29 - the concepts and know all this to the
19:31 - extent
19:32 - that you're able to prepare the server
19:34 - to run your application but not to
19:37 - completely take over managing the
19:39 - servers and whole infrastructure
19:44 - nowadays as containers have become the
19:46 - new standard you will probably be
19:48 - running your application as containers
19:51 - on a server
19:52 - this means you need to generally
19:54 - understand concepts of virtualization
19:57 - and containers and also be able to
20:00 - manage containerized applications on a
20:03 - server one of the most popular container
20:05 - technologies today is docker so you
20:08 - definitely need to learn it great so now
20:10 - we have developers who are creating new
20:13 - features and bug fixes on one side and
20:17 - we have infrastructure or servers which
20:19 - are managed and configured to run this
20:22 - application the question now is how to
20:25 - get these features and bug fixes from
20:27 - development team to the servers to make
20:30 - it available to the end users
20:33 - so how do we release the new application
20:35 - versions basically and that's where the
20:38 - main tasks and responsibilities of
20:40 - devops
20:41 - comes in with devops the question is not
20:44 - just how we do this in any possible way
20:47 - but how we do this continuously and in
20:50 - an efficient
20:52 - fast and automated way
20:57 - so first of all when the feature or bug
21:00 - fix is done we need to run the tests and
21:02 - package the application as an artifact
21:05 - like jar file or zip etc so that we can
21:09 - deploy it that's where build tools and
21:12 - package manager tools come in
21:14 - some of the examples are maven and
21:16 - gradle for java applications for example
21:19 - npm
21:20 - for javascript applications and so on so
21:23 - you need to understand how this process
21:26 - of packaging testing applications work
21:29 - as i mentioned containers are being
21:31 - adopted by more and more companies as a
21:34 - new standard so you will probably be
21:36 - building docker images from your
21:39 - application
21:40 - as a next step this image must be saved
21:43 - somewhere right in an image repository
21:46 - so docker artifact repository on nexus
21:49 - or docker hub etc will be used here so
21:53 - you need to understand how to create and
21:54 - manage artifact repositories as well and
21:57 - of course you don't want to do any of
22:00 - this manually instead you want one
22:03 - pipeline that does all of these in
22:06 - sequential steps
22:07 - so you need build automation
22:10 - and one of the most popular
22:12 - build automation tools is jenkins
22:15 - of course you need to connect this
22:16 - pipeline with git repository to get the
22:19 - code so this is part of continuous
22:22 - integration process where code changes
22:25 - from the code repository get
22:27 - continuously tested
22:29 - and you want to deploy that new feature
22:32 - or bug fix to the server after it's
22:35 - tested built and packaged which is part
22:38 - of continuous deployment process
22:40 - where code changes get deployed
22:42 - continuously
22:44 - on a deployment server and there could
22:46 - be some additional steps in this
22:48 - pipeline like sending notification to
22:51 - team about the pipeline state or
22:53 - handling failed deployment etc but this
22:57 - flow represents the core of the cicd
23:00 - pipeline and the cicd pipeline happens
23:04 - to be at the heart of the devops tasks
23:07 - and responsibilities so as a devops
23:09 - engineer you should be able to configure
23:12 - the complete ci cd pipeline for your
23:15 - application
23:16 - and that pipeline should be continuous
23:19 - that's why the unofficial logo of devops
23:21 - is an infinite cycle because the
23:23 - application improvement is infinite new
23:26 - features and bug fixes get added all the
23:29 - time that need to be deployed
23:33 - now let's go back to the infrastructure
23:35 - where our application is running
23:38 - nowadays many companies are using
23:41 - virtual infrastructure on the cloud
23:43 - instead of creating and managing their
23:45 - own physical infrastructure
23:47 - these are infrastructure as a service
23:50 - platforms like aws google cloud azure
23:54 - linux etc
23:56 - one obvious reason for that is to save
23:58 - costs of setting up your own
23:59 - infrastructure but these platforms also
24:02 - manage a lot of stuff for you making it
24:05 - much easier to manage your
24:07 - infrastructure there so for example
24:09 - using a ui you can create your network
24:12 - configure firewalls route tables and all
24:15 - parts of your infrastructure through
24:17 - services and features that these
24:20 - platforms provide however many of these
24:23 - features and services are platform
24:25 - specific
24:27 - so you need to learn them to manage
24:29 - infrastructure there so if your
24:31 - applications will run on aws
24:34 - you need to learn the aws and its
24:36 - services now aws is pretty complex but
24:40 - again you don't have to learn all the
24:42 - services that it offers you just need to
24:45 - know those concepts and services that
24:48 - you need to deploy and run your specific
24:51 - application on the aws infrastructure
24:57 - now our application will run as a
24:59 - container right because we're building
25:01 - docker images
25:02 - and containers need to be managed for
25:05 - smaller applications docker compose is
25:08 - enough to manage them
25:10 - but if you have a lot more containers
25:12 - like in case of big micro services
25:15 - you need a more powerful container
25:18 - orchestration tool to do the job most
25:20 - popular of which is kubernetes
25:24 - so you need to understand how kubernetes
25:26 - works and be able to administer and
25:30 - manage the cluster as well as deploy
25:32 - applications in it now kubernetes is a
25:35 - powerful but also a very complex tool so
25:38 - it's usually a lot of effort to set up
25:41 - and manage multiple kubernetes clusters
25:43 - for different teams in a company so
25:46 - before moving on i want to give a shout
25:48 - out to our sponsor loft which is a
25:51 - platform that helps you build
25:53 - self-service kubernetes clusters easily
25:56 - platform teams can deploy loft
25:58 - connect clusters and then let engineers
26:01 - create isolated development in ci city
26:04 - environments on demand whenever they
26:06 - need them so it puts developers in
26:08 - charge and gives them direct
26:10 - self-service access to kubernetes one of
26:12 - the great features and benefits of loft
26:15 - is that that loft can save you more than
26:17 - 70 percent of the cloud costs by
26:20 - automatically putting virtual clusters
26:22 - to sleep when nobody is using them and
26:24 - automatically waking them up again once
26:27 - engineers interact with it if you want
26:29 - to learn more about how loft works i
26:32 - actually did a separate video on it for
26:34 - the devops tool of the month series
26:37 - now love has a lot of other great use
26:39 - cases for working with kubernetes so if
26:42 - you want to try it out yourself for my
26:44 - followers loft actually provides six
26:47 - months free for their paid subscription
26:50 - for the first 500 people so check out my
26:53 - special link and use my promo code for
26:55 - that
26:56 - now back to our devops roadmap
27:00 - now when you have all these maybe
27:02 - thousands of containers running in
27:04 - kubernetes on hundreds of servers how do
27:07 - you track performance of your individual
27:10 - applications or whether everything runs
27:13 - successfully whether your infrastructure
27:15 - has any problems and what's more
27:17 - important how do you know in real time
27:20 - if your users are experiencing any
27:22 - problems one of your responsibilities as
27:24 - a devops engineer may be to set up
27:27 - monitoring for your running application
27:30 - the underlying kubernetes cluster and
27:33 - the servers on which the cluster is
27:35 - running
27:36 - so you need to know a monitoring tool
27:38 - like prometheus or nagios etc
27:45 - now let's say this is our production
27:48 - environment well in your project you
27:50 - will of course need development and
27:52 - testing or staging environments as well
27:55 - to properly test your application before
27:58 - deploying it to the production so you
28:00 - need that same deployment environment
28:03 - multiple times
28:04 - creating and maintaining that
28:06 - infrastructure for one environment
28:08 - already takes a lot of time and is very
28:11 - error prone so we don't want to do it
28:13 - manually three times as i said before we
28:16 - want to automate as much as possible
28:19 - so how do we automate this process
28:21 - creating the infrastructure as well as
28:24 - configuring it to run your application
28:27 - and then deploying your application on
28:29 - that configured infrastructure can be
28:32 - done using a combination of two types of
28:35 - infrastructure as code tools
28:38 - infrastructure provisioning tool like
28:41 - terraform for example and configuration
28:44 - management tool like insibol or chef etc
28:48 - so you as a devops engineer should know
28:51 - one of these tools to make your own work
28:54 - more efficient as well as make your
28:56 - environments more transparent so you
28:59 - know exactly in which state it is and
29:02 - easy to replicate and easy to recover
29:08 - in addition since you are closely
29:10 - working with developers and system
29:12 - administrators to also automate some of
29:15 - the tasks for them you would most
29:18 - probably need to write scripts maybe
29:20 - small applications to automate tasks
29:23 - like doing backups system monitoring
29:25 - tasks cron jobs
29:28 - network management and so on
29:30 - in order to be able to do that you need
29:32 - to know a scripting language
29:35 - this could be an operating system
29:37 - specific
29:38 - scripting language like bash or
29:41 - powershell or what's even more demanded
29:44 - a more powerful and flexible language
29:46 - like python ruby or golink which are
29:50 - also operating system independent
29:53 - again
29:54 - here you just need to learn one of these
29:56 - languages and python without a doubt is
29:59 - the most popular and demanded one in
30:02 - today's devops space
30:04 - easy to learn easy to read and very
30:06 - flexible
30:07 - python has libraries for most of the
30:09 - databases operating system tasks as well
30:12 - as for different cloud platforms
30:17 - now with this automation tools and
30:20 - languages you write all of these
30:22 - automation logic as code like creating
30:26 - managing configuring infrastructure
30:28 - that's why the name infrastructure is
30:31 - code now how do you manage your code
30:33 - just like the application code you
30:35 - manage this also using version control
30:38 - like git so as a devops engineer you
30:41 - also need to learn git so at this point
30:44 - you may be thinking
30:46 - how many of these tools do i need to
30:48 - learn do i need to learn multiple tools
30:50 - in each category also which ones should
30:53 - i learn because there are so many of
30:55 - them
30:56 - well you should learn one tool in each
30:59 - category one that's the most popular and
31:02 - most widely used because once you
31:05 - understand the concepts well
31:07 - building on that knowledge and using an
31:09 - alternative tool will be much easier if
31:12 - for example you need to use another tool
31:14 - in your company or project
31:17 - now you may be thinking these are a lot
31:19 - of things to learn and it may be hard to
31:21 - know where to start or what to learn
31:24 - first or what resources to use and so on
31:27 - well there are many resources out there
31:29 - to learn individual devops technologies
31:32 - but ideally you want to follow a
31:34 - well-structured step-by-step roadmap and
31:37 - more importantly learn how to use these
31:39 - technologies together in combination
31:42 - because that's what devops engineers do
31:45 - they use and integrate multiple
31:47 - technologies together to create devops
31:49 - processes and of course you want to
31:51 - learn all these with actual real-life
31:54 - project examples to know how it will
31:56 - look like in a real job and very few
31:58 - courses and learning resources offer
32:01 - this and that's exactly why we created a
32:03 - complete devops bootcamp with a clear
32:06 - structure and lots of hands-on projects
32:09 - so if you're thinking about becoming a
32:10 - devops engineer or slowly transitioning
32:13 - into devops you should definitely check
32:15 - out our devops bootcamp in the video
32:18 - description
32:19 - to get a full picture of devops i want
32:21 - to mention one more concept which is sre
32:24 - or site reliability engineering and how
32:27 - it fits into devops in this video we
32:30 - learned that there are two definitions
32:31 - of devops the original definition which
32:34 - is more high level and more broad and
32:37 - doesn't specify how exactly devops
32:39 - should be implemented and a more
32:41 - practical one
32:43 - which evolved over time with its own
32:45 - devops engineer role which is what you
32:48 - learned in our devops bootcamp so when
32:50 - we compare devops with sre it's
32:53 - important to know
32:54 - which definition of devops we're using
32:56 - for this comparison so with the first
32:59 - broader definition of devops
33:01 - devops is a more high-level concept that
33:03 - defines
33:04 - what needs to be done to achieve the
33:07 - automated streamlined release process
33:10 - while sre is more specific about
33:13 - how to exactly implement this process
33:16 - and how to implement devops principles
33:19 - so many people would say that sre is a
33:22 - specific implementation of the devops
33:24 - concepts but as we saw devops itself
33:28 - also became more practical with its own
33:30 - role and specific technologies and ways
33:33 - to implement it so what's the comparison
33:36 - here well in many companies
33:38 - devops implementation
33:40 - this practical devops implementation
33:43 - became more focused and concentrated on
33:45 - the speed of delivery for the
33:48 - application changes and of course even
33:50 - though it's part of the devil's
33:52 - principles to not only release fast but
33:55 - release quality code
33:57 - many devops teams in practice again
34:00 - seemed to optimize more for the speed
34:03 - than reliability so as a great
34:05 - complementary part of devops
34:08 - sre emerged with the same principles and
34:11 - goals in mind which is release quality
34:14 - code fast but as the name suggests more
34:17 - focused on reliability and keeping
34:20 - systems stable
34:22 - while allowing for fast changes so sre
34:25 - is its own role with its own set of
34:28 - tools
34:29 - for making systems reliable so these two
34:32 - were kind of parallel developments and
34:34 - are now often seen as two sides of the
34:37 - same coin
34:38 - and it's not uncommon for teams to have
34:40 - both
34:41 - devops engineer and sre
34:44 - helping implement the devops principles
34:47 - so this was just a short look at sre to
34:50 - understand it in comparison to devops
34:53 - but since i have received many questions
34:56 - about what sre is i will release its own
34:59 - follow-up video on sre in the next weeks
35:02 - to explain in more detail like how sre
35:06 - works in practice what are the tasks and
35:08 - responsibilities of a site reliability
35:11 - engineer and so on so be sure to
35:13 - subscribe to my channel and activate the
35:16 - notification bell to be notified when i
35:18 - release the video and for devops i hope
35:21 - i could clarify all your questions about
35:23 - it if not leave a comment with a
35:26 - question and i will try to answer them
35:28 - with that thank you for watching and see
35:30 - you in the next video