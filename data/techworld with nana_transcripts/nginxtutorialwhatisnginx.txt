00:00 - by the end of this video you will know
00:02 - not only what enginex is but also why it
00:06 - was created and what it's used for with
00:09 - real life examples back in the day when
00:12 - the web was still simple with less users
00:15 - the basic use case was a browser
00:17 - requested a web page from one web server
00:20 - the web server was a server machine that
00:23 - had a software installed on it that
00:25 - assembled the page and sent it back to
00:28 - the browser which then displayed it to
00:31 - the user a piece of software that runs
00:34 - on a server machine and can respond to
00:37 - requests from a browser and that web
00:40 - server software that was enginex a piece
00:43 - of software that runs on a server
00:45 - machine and can respond to requests from
00:48 - a browser then web became popular so you
00:51 - had thousands or millions of requests
00:55 - per website imagine one single server
00:58 - handling millions of requests
01:00 - that's way over the technical limit of a
01:03 - server software well we need a few more
01:06 - servers to handle that load so we added
01:09 - 10 enginex web servers but now we need
01:12 - something that determines where requests
01:15 - from the browser and which one of those
01:18 - 10 servers will handle them and that's
01:20 - where load balancing comes in so the
01:22 - same engine X web server becomes a load
01:24 - balancer that proxies the requests to
01:28 - those 10 web servers and by the way the
01:30 - word proxy means to do something on
01:33 - someone else's behalf so it accepts the
01:36 - browser requests on behalf of the web
01:38 - servers so it sits at the entry like a
01:41 - concierge and then distributes the load
01:44 - among the web servers now how does it
01:47 - distribute the load that depends on
01:49 - whichever algorithm was configured on it
01:51 - it could be a simple logic such as just
01:54 - whichever server is least busy gets the
01:57 - request or it could be round robin which
01:59 - is a popular algorithm that basically
02:01 - distributes the requests equally in a
02:03 - cyclical manner so very simple load
02:06 - balancing logic so now we have engine X
02:09 - as web server software and the proxy as
02:13 - well and that load balancing is just one
02:17 - of the functionalities of enginex proxy
02:20 - so it's the same server and Technology
02:22 - but with a different task now so what
02:25 - are those other features or
02:27 - functionalities of a proxy imagine new
02:29 - New York Times article comes out and
02:32 - millions of people open it on their
02:35 - laptops in the browser now imagine every
02:37 - time the request lended with one of the
02:41 - web servers that assembled the response
02:45 - like put the images together get them
02:47 - from a database put text and paragraphs
02:49 - and everything together edit all the
02:51 - links sent it back as a response and
02:54 - this happened million times pretty
02:56 - inefficient right instead it makes sense
02:58 - to assemble this article get all the
03:01 - data from a database put the text and
03:03 - links and everything together once and
03:06 - store it it's a static article it's not
03:08 - going to change right so just keep one
03:11 - final copy and send it to everyone who
03:13 - requests it that's caching functionality
03:16 - and it is another main feature of engine
03:18 - X proxy server so you can configure
03:21 - caching on engine X proxy so you don't
03:23 - have to hit the database or the web
03:25 - servers every time a request comes in it
03:27 - will just return that cached file now
03:30 - imagine we have hundred 100 servers of
03:32 - an online banking application or a
03:35 - social network like Facebook that makes
03:37 - those servers a pretty juicy Target for
03:40 - hackers they all want to hack into your
03:42 - servers and get the treasure which is
03:44 - payment data personal data passwords and
03:47 - so on now imagine you exposed all 100
03:50 - servers to Public Access so basically
03:53 - all those requests can directly hit each
03:56 - of the web servers if you do that you
03:58 - actually make work for hackers so much
04:01 - easier they would need to find just one
04:03 - issue in one of those 100 servers and
04:06 - they could potentially break into your
04:08 - entire system because all your servers
04:10 - are publicly accessible directly they
04:12 - can just ping the hell out of them and
04:14 - probe them until they find an issue or
04:17 - an entry because you forgot to update a
04:19 - library or a software package and they
04:21 - can hack your web server application so
04:24 - you have to worry about absolutely
04:26 - perfectly securing 100 servers now in
04:29 - instead we just give them one server
04:32 - that is the only one that's publicly
04:34 - accessible you can put all your Titus
04:37 - security efforts on one server instead
04:40 - of 100 servers and this way having one
04:44 - entry point which is the proxy is
04:46 - publicly accessible entry point reduces
04:50 - the security attack surface tremendously
04:53 - and basically acts like a shield or
04:55 - security layer before all those web
04:58 - servers so in addition addtion to load
05:00 - balancing and caching a very very
05:03 - important functionality of a proxy is an
05:06 - eded security for your web servers now
05:09 - talking about security I mentioned that
05:11 - since we have one entry point we can
05:14 - focus all our efforts to securing that
05:16 - one proxy server in all aspects and one
05:20 - important security measure is encrypted
05:22 - communication so front end will send
05:25 - encrypted message to the proxy which
05:27 - means even if an attacker sees that
05:29 - traffic on users browser or during the
05:31 - transmission they can't read it only the
05:34 - proxy server can decrypt it but again
05:36 - for edit Security in many systems proxy
05:40 - that act as The Shield a security Shield
05:42 - will simply pass on that encrypted
05:45 - message to the web servers and the web
05:47 - server will decrypt it itself which is
05:50 - actually a better security practice so
05:52 - here the functionality of a proxy is to
05:54 - be able to accept encrypted traffic with
05:59 - s SL encryption so you can configure
06:01 - your proxy to deny any request that is
06:05 - not encrypted and only accept encrypted
06:07 - requests now imagine Netflix which by
06:11 - the way uses engine X in its backend and
06:14 - as we know Netflix has millions of users
06:17 - so it's getting millions of requests for
06:20 - videos on its web servers and let's say
06:23 - it's an evening in New York millions of
06:26 - people come home after work all at the
06:29 - same time they switch on Netflix and
06:31 - start watching the most popular series
06:34 - at that time that means Suddenly at the
06:37 - very same time millions of requests for
06:40 - a highquality video is sent to Netflix
06:44 - so in this case imagine that engine X
06:47 - proxy server would have to send back the
06:49 - entire highquality video to millions of
06:52 - users at once that's a lot of bandwidth
06:55 - imagine how long it would take to send
06:57 - it over the internet cables all the way
07:00 - to the TVs of millions of viewers that's
07:03 - where compression helps engine X proxy
07:05 - can also be configured to compress large
07:08 - images or video files to save bandwidth
07:11 - both on the side of the clients so
07:14 - people who are receiving those large
07:17 - files but also on the server side who is
07:19 - sending all that content so it arrives
07:22 - faster and uses up less of your internet
07:25 - bandwidth and as part of it it also
07:28 - supports sending responses in chunks
07:30 - instead of the entire file at once so
07:33 - basically it sends you part of the video
07:35 - and then by the time you have watched
07:37 - the first half the second half of the
07:39 - video has been sent over to you as well
07:42 - so these are all the functionalities
07:44 - that you can configure for enginex as a
07:47 - proxy server now you may be thinking how
07:50 - do you make enginex do all these things
07:52 - how do you configure them how do you
07:54 - tell enginex whether it should act as a
07:56 - web server or a proxy server and how do
07:59 - you configure all these caching and SSL
08:02 - traffic and all this stuff well that's
08:04 - where enginex configuration file comes
08:06 - in which lets you define all this
08:09 - configuration with so-called directives
08:12 - this is where you can define whether you
08:14 - want your engine X to be a web server or
08:16 - a proxy server simply by configuring
08:19 - whether it should forward the traffic to
08:21 - other web servers or whether it should
08:23 - handle it itself you can configure which
08:25 - Port you want engine X server to listen
08:28 - on this is an example of a simple web
08:31 - server configuration that listens on
08:32 - Port 80 and with location basically
08:36 - defines from where in the file system it
08:39 - should serve those static files back to
08:42 - the browser but as we learned
08:44 - communicating on Port 8 or HTTP Port is
08:47 - insecure instead we want to encrypt all
08:50 - the communication and you can configure
08:52 - that easily in engine X to Route any
08:55 - traffic coming on Port 80 to https by
08:59 - sending L those requests to https and
09:02 - point and here we have an https server
09:06 - configured that serves the files as well
09:08 - as specifies the SSL certificate
09:11 - location the public key and the private
09:13 - key for the SSL communication and it
09:16 - listens on the https Port 443 so that's
09:20 - a simple configuration that allows you
09:22 - to twe enginex to handle requests like
09:25 - that you also have its own configuration
09:28 - to configure load balance to multiple
09:30 - backend servers and within that
09:32 - configuration you can also Define which
09:34 - load balancing algorithm to use like
09:37 - select the least busy server or use the
09:40 - default one which is R Robin which as I
09:42 - said just equally distributes the load
09:45 - in a cyclical order between those
09:47 - servers you also have the caching
09:49 - configuration with multiple different
09:52 - elements like how long the cache should
09:54 - be stored before it's refreshed and so
09:57 - on and as you see the configuration of
09:59 - all these functionalities is pretty
10:01 - straightforward and it's also pretty
10:03 - granular like you can do tons of
10:05 - different configuration with engine X
10:08 - and you actually have a full list of all
10:11 - those configuration blocks and
10:12 - directives in this list here which is a
10:15 - pretty huge list and as you see the
10:17 - configurations for proxy functionalities
10:19 - have proxy prefix so you can
10:21 - differentiate them as
10:24 - well now engine X is very flexible as
10:27 - you see and super fast as well so it
10:29 - became very popular in containers as
10:32 - well and made its way as one of the most
10:36 - popular solutions for kubernetes Ingress
10:38 - controller functionality Ingress
10:40 - controller is essentially a proxy with
10:44 - Advanced load balancing functionality
10:46 - but for kubernetes so what engine X was
10:48 - doing for simple web servers it's now
10:50 - doing for kubernetes cluster in the form
10:53 - of Ingress controller acting as a proxy
10:55 - and load balancer that receives the
10:58 - incoming traffic first and then based on
11:00 - the configuration that we Define
11:02 - forwards it to the right service inside
11:04 - the cluster now this load balancing
11:07 - configuration as well as logic is more
11:09 - advanced and more kubernetes specific
11:12 - but the idea is pretty much the same and
11:14 - I actually have full videos on Ingress
11:16 - and Ingress controller and how to
11:18 - configure it you can watch on my channel
11:20 - in fact I create these tutorials
11:23 - regularly on lot of interesting
11:25 - Technologies so if you want to educate
11:27 - yourself in tech make sure to subscribe
11:30 - and activate notification to get those
11:33 - new tutorial videos now there are
11:36 - actually many ingis controller
11:38 - implementations out there for kubernetes
11:41 - but enginex is one of the most popular
11:44 - ones and I have actually used engine X
11:47 - Engish controller in most of my projects
11:50 - as well now some of you may be thinking
11:52 - doesn't each Cloud platform have its own
11:55 - load balancer why do I need engine X as
11:58 - a load balancer well you actually need
12:01 - both engine X Ingress controller which
12:03 - acts as a load balcer is used inside the
12:06 - cluster so unlike the proxy for web
12:09 - servers it's not publicly accessible so
12:12 - you can't access the engine X Engish
12:14 - controller directly from the browser it
12:16 - actually leaves inside the cluster
12:19 - Network and forwards the requests
12:21 - internally so who is getting the
12:23 - requests from public what is the public
12:26 - entry point for the browser requests
12:28 - that's the cloud load balancer like awsb
12:32 - for example which then forwards that
12:35 - request to the ingis controller inside
12:37 - the cluster and this is important
12:39 - because it adds a very important
12:41 - security layer to those requests so the
12:44 - cluster component is never directly
12:47 - exposed to Public Access instead every
12:50 - request comes from the cloudload
12:52 - balancer which then forwards it to the
12:56 - ing controller within the cluster which
12:58 - then routes that traffic based on
13:02 - intelligent logic to different
13:04 - applications within the cluster and with
13:06 - intelligent routing what I mean is if
13:09 - you have one large application with lots
13:11 - of sub segments or microservices for
13:13 - example you can configure your Engish
13:15 - controller so if the request URL
13:17 - includes online card it routes the
13:20 - traffic to online card microservice if
13:22 - it includes payment it routes the
13:25 - traffic to payment service and so on now
13:27 - some of you who've been in it for little
13:30 - longer may have worked with Apache web
13:33 - server so what's the difference between
13:34 - Apache web server and enginex web server
13:37 - well not much actually enginex and
13:40 - Apache web servers do pretty much the
13:42 - same thing just like enginex Apachi also
13:45 - used to be a basic web server and then
13:48 - they extended its functionality as a
13:50 - proxy and it has all these benefits and
13:53 - functionalities of a proxy that we
13:56 - discussed Apachi was actually already
13:58 - widely used used when enginex was
14:00 - created and the major benefit of enginex
14:03 - was that it was faster more lightweight
14:06 - and definitely had an advantage when it
14:08 - came to serving huge amounts of static
14:11 - files plus as you saw it has a pretty
14:14 - easy configuration as well and engine X
14:16 - also became more popular in the
14:17 - container world now I hope you got a
14:19 - clear overview of what enginex is and
14:22 - hope I've answered all the questions you
14:25 - may have had while learning about
14:27 - enginex and with that thank thank you
14:29 - for watching and see you in the next
14:31 - video