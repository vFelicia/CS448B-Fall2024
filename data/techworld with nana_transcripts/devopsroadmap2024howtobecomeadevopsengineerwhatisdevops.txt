00:00 - in this video you will learn what tools
00:02 - you need to learn to become
00:04 - a devops engineer and what are the tasks
00:07 - and responsibilities of a devops
00:08 - engineer
00:09 - first you need to understand that there
00:11 - are two main parts when creating an
00:13 - application
00:14 - the development part where software
00:16 - developers program the application
00:18 - and test it and operations part where
00:21 - application is deployed
00:23 - and maintained on a server and devops
00:27 - is a link between the two now this is a
00:29 - bit too abstract so
00:31 - let's dive into the details to really
00:33 - understand the devops tasks
00:35 - and which tools are needed to carry out
00:38 - these tasks
00:43 - it all starts with the application
00:45 - developers team will program an
00:47 - application
00:48 - with any technology stack different
00:50 - programming languages
00:51 - build tools etc and they will of course
00:54 - have
00:55 - a code repository to work on the code in
00:58 - a team
00:59 - one of the most popular ones today is
01:01 - git
01:02 - now you as a devops engineer will not be
01:06 - programming the application
01:07 - but you need to understand the concepts
01:10 - of how developers work
01:11 - which git workflow they're using also
01:14 - how the application is configured to
01:17 - talk to other services or databases
01:20 - as well as concepts of automated testing
01:23 - and so on
01:27 - now that application needs to be
01:29 - deployed on a server
01:31 - so that eventually users can access it
01:34 - right
01:34 - that's why we're developing it so we
01:36 - need some kind of
01:38 - an infrastructure on-premise servers or
01:40 - cloud servers
01:42 - and these servers need to be created and
01:44 - configured to run
01:45 - our application again you as a devops
01:48 - engineer
01:49 - may be responsible for preparing the
01:51 - infrastructure
01:52 - to run the application and since most of
01:55 - the servers where
01:56 - applications are running are linux
01:58 - servers
01:59 - you need knowledge of linux and you need
02:02 - to be comfortable
02:03 - using command line interface because you
02:06 - will be doing
02:06 - most of the stuff on the server using
02:09 - command line interface
02:10 - so knowing basic linux commands
02:14 - installing different tools and software
02:16 - on servers
02:17 - understanding linux file system basics
02:20 - of
02:20 - how to administer a server how to ssh
02:24 - into the server
02:25 - and so on you also need to know basics
02:28 - of
02:28 - networking and security for example to
02:31 - configure
02:32 - firewalls to secure the application but
02:35 - also open some ports to make application
02:37 - accessible from outside
02:39 - as well as understand how ip addresses
02:42 - ports
02:43 - and dns works however to draw a line
02:47 - here between it operations
02:49 - and devops you don't have to have
02:51 - advanced
02:52 - super operating system or networking and
02:55 - security skills
02:56 - and be able to administer the servers
02:58 - from start to finish
03:00 - there are own professions like network
03:02 - and system administrators
03:04 - security engineers and so on that really
03:06 - specialize in one of these areas
03:09 - so your job is to understand the
03:10 - concepts and know all this
03:12 - to the extent that you're able to
03:15 - prepare the server to run your
03:17 - application
03:18 - but not to completely take over managing
03:20 - the servers and whole infrastructure
03:25 - nowadays as containers have become the
03:28 - new standard
03:29 - you will probably be running your
03:30 - application as containers
03:32 - on a server this means you need to
03:35 - generally understand
03:36 - concepts of virtualization and
03:39 - containers
03:40 - and also be able to manage containerized
03:43 - applications on a server
03:45 - one of the most popular container
03:47 - technologies today
03:48 - is docker so you definitely need to
03:50 - learn it
03:51 - great so now we have developers who are
03:54 - creating new features and bug fixes
03:56 - on one side and we have infrastructure
04:00 - or servers which are managed and
04:02 - configured to run this application
04:05 - the question now is how to get these
04:07 - features and bug fixes from development
04:09 - team
04:10 - to the servers to make it available to
04:12 - the end users
04:14 - so how do we release the new application
04:17 - versions basically
04:18 - and that's where the main tasks and
04:20 - responsibilities of
04:22 - devops comes in with devops the question
04:25 - is
04:26 - not just how we do this in any possible
04:28 - way but
04:29 - how we do this continuously and in an
04:32 - efficient fast and automated way
04:38 - so first of all when the feature or bug
04:41 - fix is done
04:42 - we need to run the tests and package the
04:44 - application
04:46 - as an artifact like jar file or zip
04:49 - etc so that we can deploy it that's
04:52 - where
04:52 - build tools and package manager tools
04:54 - come in
04:56 - some of the examples are maven and
04:58 - gradle for java applications for example
05:00 - npm for javascript applications and so
05:04 - on
05:04 - so you need to understand how this
05:07 - process of packaging
05:08 - testing applications work as i mentioned
05:11 - containers are being adopted by more and
05:14 - more companies as a new standard
05:16 - so you will probably be building docker
05:19 - images
05:20 - from your application as a next step
05:23 - this image must
05:24 - be saved somewhere right in an image
05:26 - repository
05:27 - so docker artifact repository on nexus
05:31 - or docker hub etc will be used here
05:34 - so you need to understand how to create
05:36 - and manage artifact repositories as well
05:39 - and of course you don't want to do any
05:41 - of this manually
05:42 - instead you want one pipeline that does
05:46 - all of these in sequential steps so you
05:49 - need
05:50 - build automation and one of the most
05:52 - popular
05:53 - build automation tools is jenkins
05:56 - of course you need to connect this
05:58 - pipeline with git repository to get the
06:00 - code
06:01 - so this is part of continuous
06:04 - integration process
06:06 - where code changes from the code
06:07 - repository get continuously tested
06:11 - and you want to deploy that new feature
06:13 - or bug fix
06:14 - to the server after it's tested built
06:18 - and packaged
06:19 - which is part of continuous deployment
06:21 - process
06:22 - where code changes get deployed
06:24 - continuously
06:26 - on a deployment server and there could
06:28 - be some additional steps in this
06:29 - pipeline
06:30 - like sending notification to team about
06:33 - the pipeline
06:34 - state or handling failed deployment etc
06:37 - but this flow represents the core of the
06:40 - cicd
06:42 - pipeline and the cicd pipeline
06:45 - happens to be at the heart of the devops
06:48 - tasks and responsibilities
06:50 - so as a devops engineer you should be
06:52 - able to configure
06:53 - the complete ci cd pipeline for your
06:56 - application
06:57 - and that pipeline should be continuous
07:00 - that's why the unofficial
07:02 - logo of devops is an infinite cycle
07:04 - because the application improvement is
07:06 - infinite
07:07 - new features and bug fixes get added all
07:10 - the time that need to be deployed
07:12 - by the way i have created a complete
07:14 - devops bootcamp
07:15 - where you will learn exactly these
07:17 - technologies so if you're interested
07:19 - check it out in the description
07:24 - now let's go back to the infrastructure
07:26 - where our application is running
07:28 - nowadays many companies are using
07:31 - virtual infrastructure
07:33 - on the cloud instead of creating and
07:35 - managing their own
07:36 - physical infrastructure these are
07:38 - infrastructure
07:39 - as a service platforms like aws
07:43 - google cloud azure linux etc
07:46 - one obvious reason for that is to save
07:48 - costs of setting up your own
07:50 - infrastructure
07:51 - but these platforms also manage a lot of
07:54 - stuff
07:54 - for you making it much easier to manage
07:57 - your infrastructure
07:58 - there so for example using a ui
08:01 - you can create your network configure
08:03 - firewalls route tables and all parts of
08:06 - your infrastructure
08:07 - through services and features that these
08:10 - platforms provide
08:12 - however many of these features and
08:14 - services
08:15 - are platform specific so you need to
08:18 - learn them
08:19 - to manage infrastructure there so if
08:21 - your applications will run on aws
08:24 - you need to learn the aws and its
08:26 - services
08:27 - now aws is pretty complex but again you
08:31 - don't have to learn all the services
08:33 - that it offers you just need to know
08:35 - those concepts
08:37 - and services that you need to deploy and
08:40 - run
08:40 - your specific application on the aws
08:44 - infrastructure
08:47 - now our application will run as a
08:49 - container right because we're building
08:51 - docker images
08:53 - and containers need to be managed for
08:55 - smaller applications
08:57 - docker compose or docker swarm is enough
09:00 - to manage them
09:02 - but if you have a lot more containers
09:04 - like in case of big microservices
09:07 - you need a more powerful container
09:09 - orchestration tool
09:11 - to do the job most popular of which is
09:14 - kubernetes so you need to understand how
09:17 - kubernetes works
09:19 - and be able to administer and manage the
09:22 - cluster
09:23 - as well as deploy applications in it
09:29 - now when you have all these maybe
09:32 - thousands of containers
09:33 - running in kubernetes on hundreds of
09:36 - servers
09:37 - how do you track performance of your
09:39 - individual applications
09:41 - or whether everything runs successfully
09:43 - whether your infrastructure has any
09:45 - problems
09:46 - and what's more important how do you
09:48 - know in real time if your
09:50 - users are experiencing any problems one
09:52 - of your responsibilities as a devops
09:54 - engineer
09:55 - may be to set up monitoring for your
09:58 - running application
10:00 - the underlying kubernetes cluster and
10:02 - the servers on which the cluster is
10:04 - running
10:05 - so you need to know a monitoring tool
10:08 - like
10:08 - prometheus or nagios etc
10:14 - now let's say this is our production
10:17 - environment
10:18 - well in your project you will of course
10:20 - need development and testing or staging
10:23 - environments as well
10:24 - to properly test your application before
10:27 - deploying it to the production
10:29 - so you need that same deployment
10:31 - environment
10:32 - multiple times creating and maintaining
10:35 - that infrastructure for
10:36 - one environment already takes a lot of
10:39 - time and is very
10:40 - error prone so we don't want to do it
10:43 - manually three times
10:44 - as i said before we want to automate as
10:47 - much as possible
10:48 - so how do we automate this process
10:51 - creating the infrastructure
10:52 - as well as configuring it to run your
10:55 - application
10:56 - and then deploying your application on
10:58 - that configured infrastructure
11:01 - can be done using a combination of two
11:04 - types of
11:05 - infrastructure as code tools
11:08 - infrastructure provisioning tool
11:10 - like terraform for example and
11:13 - configuration management tool
11:14 - like insibol or chef etc
11:18 - so you as a devops engineer should know
11:21 - one of these tools
11:22 - to make your own work more efficient as
11:25 - well as make your environments
11:27 - more transparent so you know exactly in
11:29 - which state it is
11:31 - and easy to replicate and easy to
11:33 - recover
11:38 - in addition since you are closely
11:40 - working with developers
11:41 - and system administrators to also
11:44 - automate some of the tasks for them
11:46 - you would most probably need to write
11:49 - scripts maybe small
11:50 - applications to automate tasks like
11:53 - doing backups
11:54 - system monitoring tasks cron jobs
11:57 - network management and so on in order to
12:00 - be able to do that
12:02 - you need to know a scripting language
12:05 - this could be an operating system
12:07 - specific
12:08 - scripting language like bash or
12:10 - powershell
12:11 - or what's even more demanded a more
12:14 - powerful and flexible language
12:16 - like python ruby or golink which are
12:19 - also
12:20 - operating system independent again
12:24 - here you just need to learn one of these
12:25 - languages
12:27 - and python without a doubt is the most
12:29 - popular
12:30 - and demanded one in today's devops space
12:33 - easy to learn easy to read and very
12:36 - flexible
12:37 - python has libraries for most of the
12:39 - databases
12:40 - operating system tasks as well as for
12:42 - different cloud platforms
12:47 - now with this automation tools and
12:49 - languages
12:50 - you write all of these automation logic
12:53 - as
12:53 - code like creating managing configuring
12:56 - infrastructure that's why the name
12:59 - infrastructure is code
13:01 - now how do you manage your code just
13:03 - like the application code
13:04 - you manage this also using version
13:07 - control
13:08 - like git so as a devops engineer you
13:11 - also need to learn
13:12 - git so at this point you may be thinking
13:16 - how many of these tools do i need to
13:18 - learn do i need to learn
13:20 - multiple tools in each category also
13:22 - which ones should i learn
13:24 - because there are so many of them well
13:27 - you should learn
13:28 - one tool in each category one that's the
13:31 - most popular
13:32 - and most widely used because once you
13:35 - understand the concepts well
13:37 - building on that knowledge and using an
13:39 - alternative tool
13:40 - will be much easier if for example you
13:43 - need to use another tool
13:45 - in your company or project so as you see
13:48 - these are a lot of technologies that you
13:50 - need to learn as a devops engineer
13:52 - and it might be overwhelming so if
13:54 - you're thinking
13:55 - you don't know where to start or where
13:58 - to learn all these
13:59 - then i have created a complete devops
14:01 - bootcamp
14:02 - where you can learn all these
14:04 - technologies in a structured way
14:06 - so if you're interested you can check
14:07 - out the information
14:09 - in the description now let me know in
14:11 - the comments which one of these concepts
14:13 - do you want me to cover
14:14 - next on my channel with that thank you
14:18 - for watching
14:18 - and see you in the next video