00:00 - in this video I'm gonna show you some
00:02 - basic cube CTO comments and how to
00:04 - create and debug pots in mini cube
00:07 - [Music]
00:13 - so now we have a mini cube cluster and
00:16 - cube CTL installed and once the cluster
00:19 - is set up you're gonna be using cube CTL
00:22 - to basically do anything in the cluster
00:25 - to create components to get the status
00:28 - etc so first thing we are gonna just get
00:31 - the status of the nodes so we see that
00:34 - there is one node which is a master and
00:38 - everything's gonna run on that note
00:40 - because it's a mini cube so it keeps it
00:44 - he'll get I can check the plots and I
00:47 - don't have any that's why no resources I
00:49 - can check the services keep still get
00:53 - services and I just have one default
00:57 - service and so on so this keeps the
00:59 - tailgate I can list any criminal's
01:02 - components so now since we don't have
01:05 - any pots we're gonna create one and to
01:08 - create kubernetes components there is a
01:11 - cube CTL create comment so if I do help
01:16 - on that cube Setia
01:17 - create command I can see available
01:20 - commands for it
01:22 - so I can create all these components
01:24 - using cube city I'll create but there is
01:27 - no pod on the list because in kubernetes
01:30 - world the way it works is that the pod
01:33 - is the smallest unit of the kubernetes
01:35 - cluster but usually in practice you're
01:39 - not creating pots or you're not working
01:41 - with the pots directly there is an
01:43 - abstraction layer over the pots that is
01:45 - called deployment so this is what we are
01:49 - going to be creating and that's gonna
01:50 - create the pots underneath and this is a
01:53 - usage of cube CTL create deployment so I
01:57 - need to give a name of the deployment
01:59 - and then provide some options and the
02:01 - option that is required is the image
02:04 - because the pod needs to be created
02:06 - based on certain some image or some
02:09 - container image so let's actually go
02:11 - ahead and create nginx deployment so
02:15 - cube CTL create deployment we let's call
02:20 - it nginx deployment image equals and
02:26 - she's just gonna go ahead and download
02:28 - the latest nginx image from docker hub
02:32 - that's how it's gonna work
02:33 - so when I execute this you see
02:36 - deployment nginx people created so now
02:41 - if I do keep CTL get deployment you see
02:49 - that I have one deployment created I
02:51 - have a status here which says it's not
02:54 - ready yet
02:54 - so if I do cube City I'll get pod you
03:00 - see that now I have a pod which has a
03:03 - prefix of the deployment in some random
03:05 - hash here and it says container creating
03:08 - so it's not ready yet so if I do it
03:12 - again it's running and the way it works
03:16 - here is that when I create a deployment
03:19 - deployment has all the information or
03:21 - the blueprint for creating the pod the
03:24 - further this is the minimalistic or the
03:27 - most basic configuration for a
03:29 - deployment
03:30 - we're just saying the name and the image
03:32 - that's it the rest is just defaults and
03:35 - between deployment and apart there is
03:38 - another layer which is automatically
03:40 - managed by kubernetes deployment called
03:44 - replica set so if I do cube city I'll
03:47 - get replica set written together you see
03:53 - I have an engine X tipple replica set
03:57 - hash and it just gives me a state and if
04:01 - you notice here the pod name has a
04:05 - prefix of deployment and the replica
04:09 - sets ID and then its own ID so this is
04:13 - how the pod name is made up and the
04:16 - replica set basically is managing the
04:19 - replicas of a pod you in practice will
04:23 - never have to create replica set or
04:26 - delete a replica set or update in any
04:28 - way you're gonna be working with
04:30 - deployments directly which is more
04:33 - convenient because in deployment you can
04:35 - configure the pod blueprint completely
04:38 - you can say how many replicas of the
04:40 - you want and you can do the rest of the
04:42 - configuration there here with this
04:45 - command we just created one pot or one
04:48 - replica but if you wanted to have two
04:51 - replicas of the nginx part we can just
04:54 - provide as additional options so this is
04:58 - how the layers work first you have the
05:01 - deployment the deployment manages a
05:03 - replica set a replica set manages all
05:07 - the replicas of that pot and the part is
05:11 - again an abstraction of a container and
05:14 - everything below the deployment should
05:17 - be managed automatically by kubernetes
05:18 - usually have to worry about any of it
05:21 - for example the image that it uses I
05:24 - will have to edit that in the deployment
05:27 - directly and not in the pot so let's go
05:30 - ahead and do that right away so I'm
05:31 - gonna do cube City edit deployment and
05:36 - I'm gonna provide the name Phoenix and
05:41 - we get an auto-generated configuration
05:45 - file of the deployment because in the
05:46 - command line we just gave two options
05:48 - everything else is default in order
05:50 - generated by kubernetes and you don't
05:54 - have to understand this now but I'm
05:55 - gonna make a separate video where I
05:57 - break down the configuration file and
05:59 - the syntax of the configuration file for
06:03 - now let's just go ahead and scroll to
06:06 - the image which is somewhere down below
06:09 - and let's say I wanted to fixate the
06:13 - version to 116 and save that change and
06:21 - SEC deployment was edited and now when I
06:25 - do cube city I'll get hot I see that the
06:30 - old pod so this one here is terminating
06:34 - and another one started 25 seconds ago
06:39 - so if I do it again the old part is gone
06:43 - and the new one got created with a new
06:46 - image and if I do if I get replica set
06:52 - I see that the old one has no pots in it
06:57 - and a new one has been created as well
07:00 - so we just edited the deployment
07:03 - configuration and everything else below
07:07 - that God automatically updated and
07:09 - that's the magic of kubernetes and
07:12 - that's how it works
07:16 - another very practical command is keep
07:19 - city locks which basically shows you
07:21 - what the application running inside the
07:24 - pod actually locked so if I do keeps it
07:27 - here
07:28 - logs and I will need the pod name for
07:32 - this I will get nothing because nginx
07:36 - didn't log anything so let's actually
07:37 - create another deployment from MongoDB
07:44 - so let's call it deployment and
07:46 - the image and the image will be
07:51 - so let's see what so now I have the
07:59 - MongoDB deployment creating so let's go
08:02 - ahead and lock that this status here
08:06 - means that pot was created but the
08:09 - container inside the pod isn't running
08:12 - yet and when I try to lock obviously it
08:16 - tells me there is no container running
08:18 - so it can show me and it locks so let's
08:20 - get the status again at this point if
08:23 - I'm seeing that containers and starting
08:26 - I can actually get some additional
08:28 - information by cube CTL describe pod and
08:32 - the pod name which here shows me what
08:36 - state changes happen inside the pod so
08:39 - it pulled the image created the
08:41 - container and start a container so cube
08:44 - city I'll get pod it should be running
08:47 - already
08:47 - so now let's log it keeps it here logs
08:52 - and here we see the log output so it
08:56 - took a little bit but this is what the
08:59 - MongoDB application container actually
09:01 - locked inside the pod and obviously if
09:04 - container has some problems it's gonna
09:08 - help with debugging to see what the
09:10 - application is actually printing so
09:13 - let's clear that and get the parts again
09:17 - so another very useful command when
09:22 - debugging when something is not working
09:23 - or you just want to check what's going
09:26 - on inside the pod is cube CTL
09:29 - SiC so basically what it does is that it
09:33 - gets a terminal of that MongoDB
09:36 - application container so if I do keep
09:39 - CTL exact interactive terminal that's
09:43 - what I T stands for I will need the pod
09:46 - name - - so so with this command I get
09:55 - the terminal of the MongoDB application
09:57 - container and as you see here I am
09:59 - inside the container of MongoDB as a
10:01 - root user so I'm in a completely
10:03 - different setting now and as I said this
10:06 - is useful in debugging or when you want
10:08 - to test something or try something you
10:11 - can enter the container look at the
10:13 - terminal and execute some comments
10:15 - inside there so we can exit that again
10:20 - and of course with cube CTL I can delete
10:24 - the pots so if I do get deployment I
10:31 - misspelled it so it keeps it here
10:33 - deployment I see that I have two of them
10:36 - and if I do get pod and replica said I
10:40 - have also two of them so let's say if I
10:43 - wanted to get rid of all the pods
10:45 - replica sets underneath I will have to
10:48 - delete the deployment so delete
10:53 - deployment and I'll have to provide the
10:55 - name of the deployment I'm gonna delete
10:59 - let's do the MongoDB delete it and now
11:03 - if I'm gonna say keep city I'll get pot
11:05 - the pot should be terminating and if I
11:09 - do get replica set the MongoDB replica
11:14 - set is gone as well and the same if I do
11:17 - delete deployment engine X the replica
11:24 - said see everything gone so all the crud
11:29 - operations create delete update etc
11:31 - happens on the deployment level and
11:33 - everything underneath just follows
11:35 - automatically in the similar way we can
11:38 - create other cornets resources like
11:40 - services etc however as you notice when
11:44 - we are creating grenades components like
11:46 - deployment using cube CTL create
11:49 - deployment and I misspelled it all the
11:53 - time you'll have to provide all these
11:56 - options on the command line so you'll
11:58 - have to say the name and you have to
12:00 - specify the image and then you have this
12:03 - option one option two etc and there
12:08 - could be a lot of things that you want
12:09 - to configure in a deployment or in a pod
12:13 - and obviously it will be impractical to
12:16 - write that all out on a command line so
12:18 - because of that in practice you would
12:21 - usually work with kubernetes
12:23 - configuration files meaning what
12:25 - component you're creating what the name
12:28 - of the component is what image is it
12:31 - based off in any other options
12:33 - they're all gathered in a configuration
12:36 - file and you just tell keep CTL to
12:40 - execute that configuration file and the
12:43 - way you do it is using cube CTL apply
12:47 - command and apply basically takes the
12:50 - file the configuration file as a
12:52 - parameter and does whatever you have
12:54 - written there so apply takes an option
12:58 - called - F that stands for file and here
13:02 - you would say the name of the file so
13:05 - this will be the config file dot llamo
13:08 - this is the format that usually going to
13:11 - use for configuration files and this is
13:14 - the command that executes whatever is in
13:17 - that configuration file so let's
13:19 - actually call the configuration file
13:21 - know nginx deployment and let's go ahead
13:27 - and create a very simplistic super basic
13:32 - nginx deployment file so here I'm gonna
13:36 - create that file so this is the basic
13:45 - configuration for the deployment so here
13:49 - I'm just specifying what I want to
13:51 - create I want to create a deployment the
13:53 - name of the deployment you can ignore
13:56 - these labels right now
13:58 - how many replicas of the pods I want to
14:02 - create and this plug right here that
14:04 - template and specification is a
14:07 - blueprint for the pots so specification
14:11 - for the deployment and specification for
14:13 - a pod and here we're just saying that we
14:16 - want one container inside of the pot
14:19 - with nginx image and we are gonna bind
14:23 - that on port 80 so this is going to be
14:25 - our configuration file and once we have
14:29 - that we can apply that configuration
14:37 - so deployment created somehow if I again
14:41 - huh I see that nginx deployment pod was
14:46 - created and it's running and let's also
14:49 - see that deployment was created 52
14:52 - seconds ago and now if I wanted to
14:55 - change something in that deployment I
14:57 - can actually change my local
14:59 - configuration for example I wanted to
15:03 - replicas instead of one I can apply that
15:11 - again deployment nginx deployment
15:17 - configured and as you see the difference
15:20 - here is that communities can detect if
15:23 - the nginx deployment doesn't exist yet
15:26 - it's gonna create one but if it already
15:28 - exists and I apply the configuration
15:31 - file again it's gonna know that it
15:35 - should update it instead of creating a
15:37 - new one so if I do get deployment I see
15:42 - this is the old one or the old
15:43 - deployment and if I do a cube CT I'll
15:47 - get hot I see the old one is still there
15:49 - and a new one got created because I
15:52 - increase the replica count which means
15:54 - that with cube City I'll apply you can
15:56 - both create and update a component and
15:59 - obviously you can do coups ETL with
16:01 - services volumes any other kubernetes
16:05 - components just like we did it with the
16:08 - deployment so in the next video I'm
16:09 - gonna break down the syntax of the
16:11 - configuration file which is pretty
16:13 - illogical and simple actually to
16:15 - understand and I'm gonna explain all the
16:17 - different attributes and what they mean
16:19 - so you can write your own configuration
16:21 - files for different components so to
16:23 - summarize we've looked at a couple of
16:26 - coops ETL comments in this video we saw
16:28 - how to create a component like
16:31 - deployment how to edit it and delete it
16:33 - we saw how to get status of pods
16:37 - deployments replicas sets etc we also
16:41 - logged on the console whatever
16:42 - application is writing into the console
16:45 - in the pot and we saw how to get a
16:47 - terminal of a running container using
16:50 - cube city
16:50 - exact and finally we saw how to use a
16:54 - current configuration file to create an
16:57 - update components using the cube CTL
17:01 - apply command and last but not least we
17:03 - saw cube CTL described command which
17:06 - will when a containers and starting in a
17:08 - pot and you want to get some additional
17:09 - troubleshooting information about the
17:12 - pot thanks for watching the video
17:13 - I hope it was helpful and if it was
17:15 - don't forget to like it this is a video
17:17 - series so I will create a new one every
17:20 - week so if you want to be notified
17:22 - whenever a new video comes out then
17:24 - subscribe to my channel if you have any
17:27 - questions if something wasn't clear in
17:29 - the video please post them in the
17:30 - comment section below and I will try to
17:32 - answer them so thank you and see you in
17:35 - the next video