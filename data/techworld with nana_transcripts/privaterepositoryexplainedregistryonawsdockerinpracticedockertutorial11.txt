00:00 - so in this video we're gonna create a
00:02 - private repository for docker images on
00:05 - aws ecr there are many more options for
00:09 - docker registries among them nexus and
00:12 - digitalocean so we're gonna see how to
00:14 - create a registry there
00:16 - build and tag an image so that we can
00:18 - push them into that repository and in
00:20 - order to push the images into a private
00:22 - repository you first have to log into
00:25 - that repository so we're going to see
00:27 - how that works this video is part of a
00:30 - video series of how to use docker in
00:33 - practice in a software development and
00:35 - later in deploying that application
00:38 - so if you want to go through the whole
00:40 - series here's a link to the playlist and
00:42 - make sure to check it out
00:44 - so let's see how it all works
00:47 - [Music]
00:56 - so the first step is to actually create
00:58 - a private repository for docker it's
01:00 - also called docker registry
01:03 - um
01:04 - in this case we're gonna do it on aws
01:08 - so let's see
01:13 - so i already have an account on avws
01:16 - so the
01:18 - service that we're going to use is
01:19 - called elastic container registry so ecr
01:25 - docker container registry
01:28 - and because i don't have a repository
01:30 - there yes i am presenting with the
01:32 - screen so in order to
01:34 - create a repository
01:36 - click on
01:38 - get started
01:41 - and here we have a repository name
01:43 - and we are actually going to name it the
01:46 - name of the
01:47 - application that we have so i'm actually
01:49 - going to name it my app
01:51 - this is the domain of the registry from
01:54 - aws and this is the repository name
01:57 - which is the same as my image name
02:00 - and don't worry about the other stuff
02:02 - right now and just create a repository
02:05 - it's as simple as that
02:07 - now one thing i think specific to
02:11 - amazon container service
02:13 - is that
02:14 - here you create a docker repository per
02:17 - image so you don't have a repository
02:19 - where you have uh where you can actually
02:22 - push multiple images of different
02:24 - applications but rather for each image
02:27 - you have its own repository and when i
02:29 - when you go inside of the repository
02:31 - here it's empty now
02:33 - but what you store in a repository are
02:35 - the different tags or different versions
02:38 - of the same image
02:40 - so this is how the amazon container
02:42 - service actually works
02:44 - there are other
02:45 - docker registries that work differently
02:47 - for example you create a repository and
02:48 - you can just throw all of your container
02:51 - images inside of that one repository so
02:54 - i think this is more or less specific
02:56 - for aws
02:57 - so anyways we have repository which is
03:00 - called my app
03:01 - and let's actually see how we can push
03:04 - the image that we have locally
03:06 - so actually check that once more so we
03:08 - want to push
03:10 - this image here
03:12 - into
03:13 - that
03:14 - repository so how do we do that
03:18 - if you click on this one
03:22 - the view push commands
03:24 - will be highlighted this is different
03:26 - for each registry but basically what you
03:28 - need to do in order to push an image
03:30 - into repository are
03:32 - two things one
03:35 - you have to login into the private
03:37 - repository because you have to
03:38 - authenticate yourself so if you are
03:41 - pushing from your local laptop or local
03:44 - environment you have to tell that
03:46 - private repository hey i have access to
03:49 - it this is my credentials if
03:52 - a docker image is built and pushed from
03:55 - a jenkins server then you have to give
03:57 - jenkins credentials to login into the
04:00 - repository so docker login is always
04:03 - the first step that you need to do
04:06 - so
04:07 - here
04:09 - aws actually provides a docker login
04:12 - command for aws so it doesn't say docker
04:15 - login but in the background it uses one
04:22 - so i'm going to execute this login
04:24 - command for aws docker repository so in
04:28 - the background it uses actually docker
04:30 - login to authenticate so in order to be
04:33 - able to execute this you need to have
04:35 - aws command line interface and the
04:37 - credentials configured for it
04:40 - so if you don't i'm gonna put a link to
04:43 - uh the guide of how to do that in the
04:45 - description i have configured both of
04:48 - them so i can execute this command
04:50 - and i should be logged in successfully
04:53 - to the docker repository so now i have
04:55 - authenticated myself to the
04:58 - docker repository here
05:01 - so i'm able to
05:03 - push the image that i have locally to
05:06 - that repository but before i do that
05:08 - there is one step i need to do so i've
05:10 - already built my image so that's fine
05:13 - and now i have to tag my image and if
05:16 - this command here looks a little bit uh
05:19 - too complicated for you or too strange
05:21 - let's actually go and look at image
05:23 - naming concepts in docker repositories
05:29 - so this is the naming in docker
05:33 - registries this is how it works the
05:36 - first part of the image name the image
05:38 - full name is the registry domain so that
05:41 - is the host
05:42 - port
05:43 - etc slash repository or image name and
05:48 - the tag
05:49 - now you may be wondering every time we
05:51 - were pulling an image out of docker hub
05:54 - we actually never had this complex
05:57 - long name of the image right so
06:00 - when we were pulling an image it looked
06:02 - like this docker poll 4.2 the
06:06 - thing is with docker hub we're actually
06:08 - able to pull an image with a shorthand
06:11 - without having to specify a registry
06:14 - domain but this command here is actually
06:16 - a shorthand for this command what
06:19 - actually gets executed in the background
06:21 - when we say docker pull is docker
06:24 - pull the repo the registry domain so
06:27 - docker dot io slash library is a
06:29 - registry domain then you have the image
06:31 - name and then you have the tag so
06:33 - because we were working with docker hub
06:35 - we were able to
06:37 - use a shortcut so to say in the private
06:40 - registries
06:42 - we can't just skip that part because
06:45 - there is no default configuration for it
06:48 - so in our case in aws ecr what we're
06:52 - gonna do is we're gonna execute docker
06:55 - pull the full registry domain
06:58 - of the repository this is what we're
07:00 - gonna see here and a tag and this is how
07:03 - aws just generates uh the
07:06 - docker registry name
07:08 - that's why we see this long
07:11 - image name with the tag here
07:13 - and we have to take our image like this
07:16 - so let's go back and take a look at our
07:18 - images our image
07:20 - that we built again and under the
07:23 - repository it says my app
07:26 - now the problem is we can just push an
07:29 - image with this name because when we say
07:31 - docker push
07:33 - my app
07:35 - like this docker wouldn't know to which
07:37 - repository we're trying to push
07:40 - by default it will actually assume we're
07:42 - trying to push to docker hub
07:44 - but it's not going to work obviously
07:46 - because we want to push it to aws so in
07:50 - order to tell docker you know what i
07:52 - want this image to be pushed to aws
07:55 - repository with the name my app
07:59 - we have to take the image so we have to
08:02 - include that information in the name of
08:05 - the image
08:06 - and that is why we have to tag the image
08:09 - tag basically means that we are renaming
08:11 - our image to include the repository uh
08:16 - domain or the address and the name
08:19 - okay and
08:20 - aws already gives us
08:24 - the command that we can execute
08:26 - we want to use the specific version
08:29 - so i'm gonna use
08:31 - 1.0 in both
08:34 - so what this is going to do is it's
08:35 - going to rename this is what tech does
08:39 - my app 1.0 this is what we have locally
08:43 - this is what the name is
08:45 - to this one here so let's execute that
08:48 - and let's see what the outcome is
08:51 - and as you see
08:52 - it took the image that we had
08:56 - made a copy and renamed it into this one
08:58 - so these two are identical images um
09:02 - they're just called in a different way
09:04 - and now
09:06 - when we go back we see the docker push
09:09 - command so basically this thing here
09:12 - is the same as docker push
09:16 - and name of the image
09:20 - and the take
09:22 - so this
09:24 - push command will tell docker you know
09:26 - what i want to take the image
09:29 - with take 1.0
09:32 - and push it into a repository at this
09:35 - address
09:36 - so when i execute this command
09:39 - see
09:40 - the push
09:42 - command will actually push those layers
09:45 - of the docker image
09:48 - one by one this is the same thing as
09:50 - when we're pulling it
09:52 - we already we also pulled the images
09:55 - layer by layer and this is what happens
09:58 - in the reverse direction when we push it
10:01 - so this is also gonna take a little bit
10:06 - great so the push command was complete
10:09 - and
10:10 - we should be able to see that image in
10:13 - the aws repository now so if i go
10:16 - inside see i have image tag with 1.0
10:21 - this is our tag here
10:23 - and
10:25 - push the time the digest which is the
10:28 - unique hash of that image and the image
10:31 - uri
10:32 - which is again the name of the image
10:36 - using the the repository
10:39 - address
10:40 - image name or repository name in this
10:42 - case and the tag
10:47 - so now let's say i
10:49 - made some changes in the docker file um
10:52 - you know let's say i
10:53 - re renamed this home
10:56 - slash home slash app to
10:59 - node app
11:02 - like this
11:04 - or what could also lead to need to
11:07 - recreate an image is obviously where
11:10 - when i um
11:12 - change something in the code right so
11:15 - you know let's say i were to delete this
11:17 - line because i don't want to console.log
11:21 - to be in my code
11:25 - and now i have a different version of
11:27 - the application where i have changes in
11:29 - the application so now i want to have
11:32 - those changes in the new docker image so
11:36 - now let's build a new docker image out
11:38 - of it
11:40 - so docker build let's call it my app
11:45 - with a version 1.1
11:48 - and a path to a docker file
11:53 - and now i have a second image
11:56 - which is called my app with version 1.1
12:00 - so now again because i want to push this
12:03 - to a repository i have to
12:05 - rename it to include the repository
12:07 - address inside of it so i'm going to do
12:10 - docker tag
12:12 - the first
12:15 - parameter is
12:16 - the image that i want to rename
12:18 - and the second one is the name of that
12:21 - image
12:23 - a new name
12:25 - so it's going to be
12:26 - the same as the previous one because the
12:28 - repository name and the address is the
12:31 - same
12:32 - remember we have one repository for
12:35 - one image
12:37 - but for different versions so we're
12:39 - building a version 1.1 so it should end
12:42 - up in the same repository
12:44 - so now here we have 1.1
12:46 - and if i
12:48 - take that
12:49 - and images
12:51 - i have a second image here
12:54 - so i'm gonna
12:55 - copy that
12:57 - and i'm gonna do docker build
13:02 - and do not forget the tag it's important
13:04 - because it's part of the complete name
13:08 - sorry it's docker push
13:14 - and now some of the layers that i
13:16 - already pushed
13:17 - are there only the ones that changed are
13:20 - being re-pushed so to say
13:23 - and also know that i just have to do
13:25 - docker login once at the beginning
13:29 - and then i can
13:32 - pull and push images uh from this
13:34 - repository uh
13:37 - as as many times as i want so docker
13:40 - login is done once
13:42 - so now that is complete let's actually
13:45 - reload this
13:47 - so my repository now has two versions
13:51 - so this is pretty practical if you are
13:54 - for example testing with different
13:55 - versions and you want to have a history
13:58 - of
13:59 - um
14:00 - those were image tags um if you want to
14:03 - for example
14:04 - test a previous version
14:06 - and i think in aws the repos each
14:08 - repository has a capacity of holding up
14:11 - to 1 000 image versions so for example
14:15 - my app here you can have a thousand
14:18 - different
14:19 - tags of the same image
14:22 - okay so now again to compare it to the
14:25 - initial diagram that we saw for this
14:27 - complete flow let's actually switch back
14:29 - to it quickly
14:31 - so here what we did is basically
14:33 - simulate how jenkins would push an image
14:37 - to a docker repository so whatever we
14:40 - did
14:40 - on our laptop will be the same commands
14:43 - executed on a docker on the jenkins
14:45 - server and again
14:47 - jenkins user or jenkins server user has
14:50 - to have credentials to the docker
14:53 - repository to execute docker login
14:56 - depending on the registry or repository
14:58 - configuration will look different and
15:01 - jenkins needs to tag the image and then
15:03 - push it to the repository and this is
15:06 - how it it's done and the next step uh of
15:09 - course we need to use that image that
15:11 - that is lying now in the repository and
15:14 - we're gonna see how it's uh pulled from
15:16 - that repository and again we're gonna do
15:19 - it on the local environment but it's the
15:20 - same thing that's
15:22 - a development server or any other
15:26 - environment will actually execute thanks
15:28 - for watching the video i hope it was
15:30 - helpful and if it was don't forget to
15:32 - like it this is a video series so i will
15:34 - create a new one every week so if you
15:36 - want to be notified whenever a new video
15:39 - comes out then subscribe to my channel
15:42 - if you have any questions if something
15:44 - wasn't clear in the video please post
15:45 - them in the comment section below and i
15:47 - will try to answer them so thank you and
15:50 - see you in the next video