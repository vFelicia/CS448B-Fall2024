00:00 - in this video we're going to talk about
00:02 - a new AI code assistant called Amazon q
00:06 - that was just released recently now why
00:09 - is this a big deal well you guys
00:11 - probably already know and have been
00:13 - using AI code assistants already because
00:16 - they are becoming pretty ubiquitous
00:19 - currently and the trend is going to
00:21 - continue even more in the next years and
00:24 - I believe AI code assistants in general
00:26 - are going to become huge and basically
00:29 - an essential part part of every
00:31 - engineer's skill set and I myself as a
00:34 - devops and Cloud engineer use the AI
00:37 - code assistant mostly for writing
00:40 - infrastructure provisioning and
00:42 - configuration scripts and so on and I
00:44 - mostly work with AWS so I write
00:47 - automation scripts for provisioning and
00:49 - configuring AWS infrastructure and its
00:51 - services now there are two most
00:54 - important questions related to the value
00:58 - of AI code assistants or generative AI
01:03 - tools like Amazon Q the first one is the
01:06 - quality of the output or the responses
01:10 - that it generates in our engineering use
01:13 - case it's the quality of code
01:16 - suggestions or improvements
01:18 - troubleshooting and explanation of code
01:21 - that the tool generates so if I'm using
01:24 - a code assistant for working on AWS
01:28 - Cloud platform then and the tool needs
01:30 - to have extensive knowledge and
01:32 - understanding of AWS Services the best
01:35 - practices of configuration the
01:36 - production best practices architecture
01:38 - elements of cloud infrastructure and so
01:41 - on and probably the most important of
01:43 - all that data needs to be up todate
01:47 - because in Tech world you guys know how
01:50 - fast everything changes so there is
01:52 - really no value in getting an old
01:54 - version of configuration or outdated
01:57 - code suggestions when writing automation
02:00 - scripts and in this case a huge benefit
02:03 - of Amazon Q is that it's created by AWS
02:06 - itself so it has deep extensive
02:09 - knowledge of AWS Services configuration
02:12 - architecture and so on and that can have
02:15 - a huge impact on the quality of output
02:18 - so in general an extremely important
02:20 - aspect of AI code assistant tools is how
02:24 - much you can rely on the output it
02:27 - generates and the second question
02:29 - related to the value of such tools is
02:33 - the use cases they cover so what are
02:36 - those AI tools good for and why would
02:38 - you want to use them in the first place
02:41 - can they actually help you 10x your
02:44 - speed and efficiency when working on
02:46 - complex devops or Cloud projects can
02:49 - they help you become a better engineer
02:52 - or are they not yet mature enough to
02:55 - actually be of any help well that's
02:58 - exactly what we're going to see in
03:00 - practice in this video so make sure to
03:02 - stay till the end so how does Amazon Q
03:05 - actually work and how can it assist us
03:08 - or what tasks can it help us with when
03:10 - we are working on a project as Engineers
03:13 - we can integrate Amazon Q in our code
03:16 - editor or IDE using a Plugin or
03:19 - extension and we can start using it
03:22 - directly inside the ID so we can use it
03:24 - directly while writing the code or
03:26 - analyzing code without having to leave
03:28 - the ID and there is three main
03:30 - categories of tasks that Amazon Q can
03:33 - help us with the first one is
03:36 - understanding the code or concepts
03:39 - themselves so for example if you are new
03:41 - to a project and the team has already
03:43 - written automation project that has been
03:46 - developing for multiple months or years
03:48 - there's going to be a huge code base
03:50 - that you're going to have to understand
03:52 - for example you have a terraform project
03:54 - that Provisions AWS infrastructure with
03:57 - various different services like
03:59 - configures an eks cluster and integrates
04:01 - it with different AWS Services then
04:04 - creates some I am roles and permissions
04:07 - create some kubernetes components so
04:09 - let's say there's a lot of things going
04:11 - on in the project and you need an easy
04:13 - way to understand that terraform code
04:16 - especially if you are a junior engineer
04:18 - and your terraform knowledge is not as
04:20 - good you can use Amazon Q to help you
04:24 - understand the high level of the project
04:26 - or blocks of code as well as specific
04:29 - line LS of what they're configuring what
04:31 - they're provisioning and so on and you
04:33 - can use Amazon Q to learn and understand
04:37 - things that are not directly related to
04:39 - your code so maybe you want to have a
04:42 - high level understanding of AWS services
04:46 - or integration of multiple Services
04:49 - understand a certain architecture and so
04:51 - on so that's the first category of
04:53 - answers that you can get from Amazon Q
04:56 - which is explanation and understanding
04:58 - things the second one is Amazon Q
05:01 - actually generating code for you so
05:05 - let's say you're using a terraform
05:06 - module and you need to check the
05:09 - documentation to understand how to use
05:11 - that module what attributes that module
05:13 - takes what values should be set for
05:16 - those attributes and so on so in this
05:19 - case you can describe what you want to
05:21 - write and let Amazon Q actually generate
05:24 - that code for you so now in addition to
05:28 - giving Amazon Q some kind of code to
05:30 - analyze it actually generates a code for
05:34 - some kind of new configuration or
05:36 - provisioning logic in the same category
05:38 - or code generation you can also use
05:40 - Amazon Q to adjust your existing code to
05:44 - make improvements or to refactor the
05:47 - code maybe with a cleaner syntax or
05:49 - maybe extracting some values as
05:52 - parameters and so on and this is
05:54 - actually a feature I use quite often
05:57 - which is feeding an existing code that
06:00 - works but making Improvement in the code
06:02 - and logic itself to cover the best
06:04 - practices for example and the last
06:06 - category of use cases that you can use
06:09 - Amazon Q for is troubleshooting and
06:12 - Analysis you're probably already used to
06:14 - it you spend 20% of your time writing
06:18 - the code writing the configuration and
06:20 - probably 80% of the time troubleshooting
06:22 - the issues if something goes wrong so
06:25 - troubleshooting is an important and very
06:28 - integral part of our job as Engineers so
06:32 - that's again something that AI code
06:35 - assistants like Amazon Q will help you
06:37 - with an example of that would be if
06:39 - you're getting errors in your output
06:41 - sometimes those errors are not very
06:43 - self-explanatory so usually you would
06:45 - copy paste the error message and Google
06:47 - it and that will be a perfect use case
06:49 - of asking Amazon Q to actually analyze
06:52 - that issue for you explain to you what
06:54 - that issue is and giving a suggestion on
06:57 - how to fix it so as you see there bunch
06:59 - of tasks and use cases that we have to
07:02 - do as engineers and now we're going to
07:05 - actually see some of those use cases in
07:07 - practice and how Amazon Q can help us in
07:11 - those tasks and with that let's Dive
07:15 - Right into testing out and trying Amazon
07:18 - Q for an actual infrastructure
07:20 - automation project for AWS so I'm using
07:23 - visual studio code as my editor and I
07:26 - have my very simple terap project that
07:29 - basically configures an eks cluster with
07:33 - its corresponding VPC so a basic
07:36 - configuration to keep things simple and
07:39 - in order to use Amazon Q in my visual
07:42 - studio code I can simply install that as
07:45 - an extension so as you see it's an
07:47 - official plug-in from amazon.com and
07:50 - once you install that you're going to
07:52 - see this icon here or a tab for Amazon
07:55 - que and if I click inside I see an
07:58 - option to sign in and then we're going
08:00 - to be able to use Amazon q and
08:03 - conveniently enough we have this very
08:05 - simple mode of being able to sign in
08:08 - without an NS account and also use it
08:10 - for free as part of the free tier so I'm
08:13 - going to click here let's
08:18 - continue and we simply need to confirm
08:21 - the
08:22 - authorization and as you see here you
08:25 - can create a new AWS Builder ID or you
08:28 - can sign in to your existing one and I'm
08:30 - actually going to create a new one just
08:32 - to show you how it's going to look
08:43 - like and you can paste the verification
08:46 - code that you got on the
08:48 - email
08:50 - verify we set the password and there you
08:54 - go the Builder
08:56 - ID is created so now we can sign
09:10 - in and you're going to be navigated to
09:13 - your profile
09:25 - view we're going to allow access and
09:28 - this will create the authentication so
09:31 - that we can use Amazon Q in our Visual
09:34 - Studio code editor which means if I go
09:36 - back we should see Amazon Q successfully
09:39 - connected to your Builder ID account and
09:43 - now it's ready to be used and what you
09:46 - see here this Amazon Q tab is a chat
09:50 - window so chat is one way of interacting
09:55 - with Amazon Q to ask it any questions
09:58 - that you want so here is a place I
10:01 - mentioned you can use Amazon Q to
10:03 - analyze your code blocks your entire
10:05 - project to ask it any questions not
10:08 - directly related to code maybe to learn
10:10 - some new Concepts learn things about
10:12 - different AWS services or even other
10:15 - Technologies find the right terraform
10:17 - module for your task and so on so this
10:19 - is a place where you can ask questions
10:22 - to Amazon q and the chat is what we're
10:25 - going to do for our project as well so
10:27 - I'm going to close this and we can also
10:30 - create multiple chats to keep our
10:32 - questions
10:33 - separated so let's go ahead and start
10:36 - using Amazon Q for our terraform project
10:39 - to help us with some interesting tasks
10:42 - so let me open my main terraform file
10:45 - that defines creation of eks and I'm
10:48 - going to ask Amazon
10:51 - Q to explain the
10:55 - terraform project code for me in detail
11:03 - and it gives me the
11:05 - explanation of different parts of the
11:08 - code from eks creation to what variables
11:12 - are
11:13 - defined for what so name and commence
11:16 - version which we have right here the
11:19 - manage node group all the cluster addons
11:22 - and so on and also gives us a summary of
11:25 - what this project is creating now let's
11:27 - actually ask Amazon Q to optimize or
11:30 - let's ask whether we should optimize
11:33 - anything in our
11:42 - project and let's see what it responded
11:44 - so first of all it gives
11:46 - us a little overview of the things that
11:50 - we have correctly done in the project so
11:53 - for example the usage of version with
11:56 - the Tilt that helps us automatically
11:58 - update to the next minor
12:01 - version so Amazon Q is suggesting that
12:03 - it's a good practice as well as setting
12:06 - the create cluster Security Group to
12:09 - false and installing those default
12:12 - add-ons in the
12:15 - cluster and it found some optimization
12:18 - opportunities some improvements that we
12:20 - can make it's suggesting to extract this
12:23 - VPC and subnet configuration so if we
12:26 - have other resources that we want to
12:28 - create also the same VPC in addition to
12:31 - eks then we can reuse that
12:35 - VPC it also is telling us and this is
12:39 - actually quite a good suggestion to
12:42 - increase the instance type because T3
12:44 - micro is actually pretty small for lots
12:48 - of the services like if we were
12:49 - installing Ingress controller Argo City
12:52 - or or some databases this would probably
12:55 - be small for most of those services so
12:58 - it suggesting to change it to a larger
13:02 - size and also add additional manage node
13:06 - group and this is also a good one to
13:10 - Output some values as a result of
13:13 - infrastructure creation for easy access
13:16 - like for example a command to connect to
13:19 - EAS cluster and get the cube config file
13:22 - so now we can actually ask Amazon Q to
13:25 - generate code or give us code examples
13:27 - of all those Improvement suggestions so
13:30 - I'm going to ask it to give to give me
13:47 - code and here is the part where Amazon Q
13:51 - generates code examples for
13:55 - you this is for extracting VPC and
13:57 - private subnets
14:00 - using larger instances the output file
14:03 - and so on now this brings me to another
14:07 - usage of Amazon q that you probably are
14:10 - going to use much more for the
14:12 - generative code so if you want an AI
14:15 - code assistant to actually Autos suggest
14:18 - code blocks or code lines or refactor
14:20 - your code you would use that directly in
14:23 - your editor so we have a chat here and
14:26 - then you have inline code suggestions
14:29 - so let's say we leave this manage node
14:31 - group with T3 micro so if we have any
14:35 - parts that can be scheduled on such a
14:38 - small node we're going to leave it for
14:40 - those but in addition we're going to
14:41 - create another node group with larger
14:44 - instance type and let's let Amazon Q
14:47 - generate that code for us first of all
14:50 - you see already that it is giving us
14:52 - suggestion and you can toggle to see
14:53 - different versions and I'm going to
14:56 - write a comment here eks manage not
14:59 - group with T3 large instance
15:04 - type and you can autocomplete with
15:09 - Tab and again we can also specify
15:13 - additional
15:15 - details in our description or comment of
15:18 - what Amazon c will generate so let's say
15:21 - we want a node group with a specific
15:24 - name let's call it
15:26 - main with Max
15:29 - five
15:31 - desired
15:34 - 2 and let's see what we get there you go
15:38 - and as you see we have these continuous
15:41 - inline C suggestions that we're getting
15:43 - so let's say if I was creating another
15:45 - resource let's say I want to use another
15:47 - module Amazon Q is continuously trying
15:51 - to guess what configuration I want to
15:54 - add to my project and as you see it
15:57 - actually comes up with multiple
15:58 - suggestions which I can toggle so in
16:01 - case I want e node group configuration
16:05 - or E case fargate or it has blueprints
16:09 - Kus add-ons which is actually a module
16:12 - that lets you install a bunch of
16:15 - services directly in the cluster just by
16:17 - enabling them so I'm going to take over
16:20 - this
16:21 - configuration
16:23 - and adding text and let's do a quick
16:27 - test here and let's make sure that The
16:29 - Source the version that we're getting is
16:32 - actually a new one or recent
16:35 - one and let check this on
16:40 - GitHub and this is version
16:45 - 4.27 so this is the version that it gave
16:47 - us now let me use Chad one more time and
16:50 - I'm going to ask it to configure or
16:53 - enable cloud trail logs for my eks
16:56 - cluster so let me ask Amazon Q how I can
17:00 - do
17:10 - it and these are the steps of how we can
17:13 - do that so first it suggests to create
17:16 - an i IM role that will have permission
17:19 - to write cloud trail logs to cloudwatch
17:22 - so that's the terraform configuration
17:24 - for the role which cloud trail service
17:27 - can assume then we have have the r
17:29 - permissions themselves so that's the
17:31 - policy that allows creation and reading
17:36 - of the logs and log groups and then
17:40 - using this
17:42 - configuration this will enable cloud
17:45 - trail logs on eks cluster now let's do
17:47 - one final question here on a project and
17:51 - I'm going to ask it to give me any
17:54 - additional terraform configuration for
17:56 - my e cluster based on security and
17:59 - production best practices and now let's
18:02 - see what we get it is telling us to
18:05 - enable the comm's audit locks so that we
18:08 - have all the activity that's going on in
18:11 - the cluster captured in the locks in
18:13 - case we have a heck so we can do a
18:15 - security analysis it's also suggesting
18:18 - us to enforce security policies on what
18:21 - pots can do so basically escalating any
18:24 - privilege within the Pod so that is a
18:27 - security configuration
18:29 - to make sure that cluster can only be
18:31 - talked to within the VPC the security
18:34 - group configuration for the node groups
18:36 - the kubernetes node groups this is a
18:38 - good one enabling e has encryption to
18:41 - encrypt the itd data adding monitoring
18:44 - for cluster Health like Prometheus for
18:46 - example and so on so it's giving us some
18:48 - suggestions to improve security and
18:52 - basically make our eks cluster more
18:55 - production ready and one thing I want to
18:57 - note here is that Amazon Q actually
19:00 - provides the resources or references for
19:04 - the answers it generates so basically
19:06 - tells you here's the answer and by the
19:09 - way I'm referencing these different
19:11 - resources so you can actually go and
19:13 - check and this is what I do most of the
19:15 - time when I get an AI generated answer I
19:19 - usually validate I want to make sure I
19:21 - know which source this comes from
19:23 - whether it's an official documentation a
19:25 - Blog article what year it was written so
19:29 - how up to dat that resource is and so on
19:31 - so you can check that source and
19:35 - basically get some additional context
19:38 - for whatever the reply was and you have
19:41 - that for most of the replies so for
19:43 - example here we know that this part is
19:46 - referenced in this resource and so on
19:49 - now let me show you another feature that
19:52 - I personally find more interesting than
19:55 - the regular chat or inline code
19:57 - suggestions and that is the dev mode
20:00 - basically and as you see by the
20:03 - description what this Dev mode gives you
20:06 - is it increases your context for the
20:09 - questions that you ask Amazon Q so
20:11 - Amazon Q can take your entire project as
20:14 - a context for answering your questions
20:16 - instead of just the files that are open
20:18 - in your editor but the thing that I find
20:21 - cool about this feature is that you can
20:24 - actually use it to give you a very
20:27 - highlevel plan for complex tasks so if I
20:31 - want to configure something in my case
20:33 - cluster that's integrating with various
20:35 - Technologies and I have multiple steps
20:38 - to actually execute that I can ask
20:40 - Amazon Q for a plan of how to actually
20:43 - do that complex thing so let's try this
20:46 - out
21:07 - and as you see a new tab gets created
21:10 - for this Dev mode and the answer
21:12 - generation takes a little longer because
21:15 - one Amazon Q is using your entire
21:17 - project and second it is giving you a
21:20 - more detailed and thorough reply so
21:23 - let's see what we get so it's telling us
21:26 - to enable Argus City in our main TF file
21:31 - using eks blueprints kubernetes add-ons
21:33 - so this is a module that as I mentioned
21:36 - allows you to toggle or basically very
21:39 - easily switch on different plugins and
21:42 - one of them is Argus CD so that's how
21:44 - it's suggesting to install Aros CD which
21:47 - is fine it's even telling us to create a
21:50 - git repository that we can sync with
21:52 - Argo CD telling us to use customization
21:55 - files for kubernetes manifest and at the
21:58 - end even add some automated testing so
22:01 - this is kind of a high level overview of
22:04 - what steps we can do let's try another
22:06 - example let's say I want to install and
22:09 - run vault in my cluster and I want to
22:11 - use AWS KMS service to generate and
22:15 - store the encryption key for Vault and
22:18 - I'm going to ask Amazon Q for a plan of
22:21 - how to implement this with my terraform
22:23 - project so again I'm going to do Dev
22:34 - and let's see what we
22:38 - get and this is our plan again I am roll
22:41 - with necessary permissions as always
22:44 - using a module to deploy volt that
22:46 - references that IM rooll The Vault
22:51 - configuration The Vault init script for
22:55 - the initial
22:56 - provisioning and now I'm actually I'm
22:58 - going to ask it to give me
23:02 - details and code Snippets for all the
23:08 - steps in the
23:15 - plan and here we're getting the
23:18 - configuration Snippets by creating the
23:20 - role that processes in the E cluster can
23:26 - assume volt module
23:30 - and so on now one thing that is clear is
23:33 - that you can't directly take this code
23:36 - and implement it because it's not going
23:38 - to work some of the steps are not fully
23:40 - correct so when I'm using this feature
23:43 - what I'm getting the most value from is
23:46 - the highlevel road map sort of that
23:49 - points me into the right direction where
23:51 - I can then zoom in and either do
23:55 - followup questions on Amazon Q or get
23:57 - the additional upto-date details from
24:00 - the documentation of different tools
24:03 - that I need so at this point Amazon Q is
24:06 - a tool that will help you finalize and
24:09 - create your configuration code or
24:12 - infrastructure code with iterations it's
24:15 - not going to do the entire programming
24:18 - and write the entire terraform project
24:20 - for you one more thing we can do in Dev
24:22 - mode is have Amazon Q generate the code
24:25 - files for us when we ask Amazon Q to
24:28 - generate code it basically creates the
24:31 - contents in those files that you can
24:33 - take over in your existing file if you
24:35 - want to so if I click here it actually
24:37 - shows me this view that shows me kind of
24:39 - a difference or addition in my existing
24:43 - file and if I want to insert the code I
24:46 - can do
24:49 - this and it also created this ks. TF
24:53 - file and also updated the variables with
24:57 - Vault version
25:00 - and I can close the session or work on a
25:02 - new task once I'm done with this one now
25:05 - I want to show you one final feature of
25:07 - Amazon Q which is actually integrated
25:10 - directly into your AWS account so
25:13 - switching to the browser this is my AWS
25:16 - account and by the way you have Amazon Q
25:18 - as one of the services and right here
25:21 - you see the same icon that we had in our
25:24 - editor this one right here and this is
25:27 - actually the integ integrated Amazon q
25:29 - and you can use it here to get insights
25:32 - to resources within your specific AWS
25:37 - account which is actually very
25:39 - convenient if you're provisioning
25:41 - resources in multiple regions if you
25:44 - have let's say E2 instances running in
25:47 - different places if you have some other
25:49 - resources attached to those you can
25:52 - actually query those resources directly
25:56 - here or you can use it just like your
25:59 - code assistant to ask it specific
26:01 - questions and get explanations or even
26:05 - get some troubleshooting advice so for
26:08 - example I want to check how many E2
26:10 - instances I have currently in the
26:12 - running state in this
26:20 - region and in this region I actually
26:22 - have three instances running and it
26:25 - lists all those three instances with
26:28 - links so that I can jump into one of
26:31 - those let's do another one let's try
26:35 - listing all the
26:39 - subnets and it's giving me a list of all
26:42 - six subnets in this
26:47 - region we can also ask Amazon Q to give
26:50 - us AWS commands for example so let's ask
26:53 - it what is
26:54 - AWS CLI command for
26:59 - creating a new I am
27:04 - role and it's printing out the command
27:07 - as well as what parameters you can
27:09 - specify to that command and now let's
27:13 - give it additional details of what the
27:14 - role should be allowed to do and who can
27:17 - assume
27:24 - that and let's see what we get
27:28 - and there you go we have this create
27:30 - role with the name my role that I
27:32 - provided
27:34 - and the policy for ec2 instances to be
27:38 - able to assume this role and then we
27:41 - have the actual permission using the AWS
27:44 - managed policy so this is another use
27:47 - case of using Amazon Q either here or of
27:51 - course directly in your IDE so this was
27:54 - a demonstration of Amazon Q AI code
27:57 - assistant and some of its features and I
28:00 - hope I was able to demonstrate how it
28:02 - can be used some of the use cases so you
28:04 - get a full picture of how you can use it
28:07 - yourself in practice in your engineering
28:10 - projects and as always thank you for
28:12 - watching and see you in the next video