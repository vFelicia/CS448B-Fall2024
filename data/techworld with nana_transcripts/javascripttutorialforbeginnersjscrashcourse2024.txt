00:00 - congrats on deciding to learn JavaScript
00:03 - this crash course is actually a very
00:05 - small part of the software development
00:07 - mini boot Cam that I teach where you
00:10 - learn every part of the software
00:12 - development life cycle to become a
00:14 - software engineer or understand the
00:16 - entire concept and then go and pursue a
00:19 - career in Cloud engineering or devops
00:22 - engineering Etc but in this video we'll
00:25 - dive into JavaScript and really
00:28 - understand not only the syntax and the
00:30 - basics but also the important and very
00:33 - interesting Concepts behind JavaScript
00:36 - we will start by looking at the big
00:37 - picture first so we can understand where
00:40 - JavaScript fits in exactly when thinking
00:43 - about website programming and then we'll
00:45 - jump into the demo and program with
00:48 - JavaScript so let's get started right
00:54 - away imagine the following scenario you
00:58 - wake up in the morning get your coffee
01:00 - open your laptop and open Facebook in
01:02 - your browser so let's pause there what
01:04 - happened when you typed in Facebook in
01:06 - your browser and you saw a fresh new
01:09 - feed with all the new stuff that has
01:11 - happened while you were asleep what
01:13 - happened there in the background
01:15 - technologically so Facebook is an
01:17 - application that some developers sitting
01:19 - mostly in California are developing and
01:22 - these guys and girls are writing a bunch
01:24 - of code and all that code that makes up
01:27 - Facebook lives in California so what
01:30 - happens when you open Facebook on your
01:32 - laptop is that part of that code that
01:34 - lives in California travels all the way
01:38 - to your laptop to your location and ends
01:41 - up temporarily living on your laptop
01:45 - that's why sometimes when you refresh
01:47 - and see a blank page or loading and you
01:50 - become annoyed because you can't see
01:52 - your feed within 3 seconds that's when
01:55 - all the data is coming or traveling from
01:58 - somewhere to your laptop so it may need
02:01 - some time so how does that travel there
02:04 - are internet cables everywhere in the
02:06 - world actual physical cables that let
02:09 - electricity travel through from one
02:12 - place in the world to another that's how
02:15 - everything is connected everywhere and
02:17 - that's why in some remote places in
02:20 - Africa or Asia or just remote Villages
02:23 - anywhere in the world where there is no
02:25 - internet and you're wondering like wow
02:28 - how is this possible no internet that's
02:30 - super crazy but that's pretty simple
02:32 - actually because nobody built those
02:34 - internet cables near those areas and
02:37 - regions because of economic reasons and
02:40 - so on now if you think about it it would
02:42 - be super inefficient if every time
02:45 - someone in Europe open Facebook and all
02:47 - the data needed to travel to these
02:49 - places all the way from California so
02:52 - Facebook has built locations evenly
02:55 - distributed all around the world that
02:57 - store part of the code and data that
03:00 - doesn't change much so it can get to you
03:02 - much faster so back to that part of code
03:05 - that just traveled to you that's HTML
03:08 - CSS and JavaScript so what are these
03:11 - when you see a website that just looks
03:13 - ugly so we just text no fun colors no
03:17 - styling that's a naked HTML it's
03:20 - necessary but no one wants to see some
03:23 - plain ugly text without any styling so
03:26 - what makes the text pretty and it colors
03:29 - and some fun to it is CSS it's like
03:32 - flash on a skeleton now you have a flash
03:35 - that looks good but it doesn't do
03:36 - anything it doesn't move it doesn't talk
03:38 - doesn't respond you can interact with it
03:41 - and it's the same way with HTML plus CSS
03:44 - page typical use cases are visit card
03:47 - websites where you can read texts
03:49 - displayed in nice style but you can't
03:52 - leave a comment you can send a message
03:54 - you can do anything with the website so
03:57 - all that action comes purely from
03:59 - JavaScript so you want to upload a photo
04:02 - on Facebook that's JavaScript you want
04:04 - to send a message through a messenger
04:06 - that's JavaScript you want to like your
04:08 - friend's picture or leave a comment all
04:11 - JavaScript so everything that you
04:13 - interact with in the UI which stands for
04:16 - user interface is through JavaScript and
04:19 - the combination of these three HTML CSS
04:23 - and JavaScript is called front end it's
04:26 - the Facebook code that everyone sees so
04:28 - it's in the front and as I said all
04:31 - these three files leave on your laptop
04:34 - when you open Facebook so you can see
04:37 - and even edit them so I could go and
04:40 - change Facebook style like this and this
04:43 - won't affect anyone else in the world
04:45 - since everyone has their own copy of
04:47 - these files on their laptops but there
04:50 - is another part of the code that doesn't
04:53 - travel to you the beckon code that is in
04:56 - the back and no one can see so you may
04:59 - be now wondering if I can do anything in
05:01 - front end like upload images message
05:04 - someone leave a comment like what's the
05:07 - backend for what does it do well when
05:09 - you upload a picture on Facebook you
05:12 - surely want your friends to see that too
05:14 - or when you message someone you want to
05:16 - keep a history of these messages that
05:18 - means you want all this data to persist
05:21 - or in other words the data to be saved
05:24 - over time now if JavaScript only leaves
05:26 - on your laptop it wouldn't make sense to
05:28 - just have that photo only locally on
05:31 - your computer that's where the beon
05:33 - comes in so what happens is that
05:35 - JavaScript takes that image that you
05:37 - uploaded puts it in an envelope and
05:39 - hands it over to internet saying hey can
05:42 - you deliver this to backand at this
05:45 - specific location so now we can follow
05:48 - this delivery all the way to the backend
05:50 - and see what happens there or what what
05:52 - does backend do when it gets that image
05:56 - now Beck in code can be written in Java
05:59 - python PHP or even JavaScript so there
06:03 - are different technologies that you can
06:06 - use to write all that backend part of
06:08 - the code so let's say in our example
06:10 - it's Java so what does Java do it checks
06:14 - and examines the photo it sees is it a
06:16 - valid delivery there's no threat no
06:18 - danger I know the sender I trust it so
06:21 - I'll open the envelope see everything is
06:24 - fine and hands it over to database to
06:28 - save it for lat
06:30 - so database is like a warehouse it's a
06:33 - big space where you can keep all the
06:35 - images messages likes comments that
06:37 - different users are producing it's all
06:40 - in there so to have a more specific
06:43 - understanding let's actually see how the
06:46 - location where beckon code and database
06:49 - leave quote unquote actually look like
06:52 - so as I mentioned before Facebook has
06:54 - all these buildings distributed all
06:56 - around the world actual physical build
06:59 - buildings with servers inside and I
07:02 - don't know what you imagine when you
07:03 - think about servers but whatever it is
07:06 - it's probably not very close to reality
07:08 - so let me show an example of a server
07:11 - building of a typical big company like
07:13 - Facebook so it's a location where
07:16 - machines uh that're interconnected with
07:18 - each other are running 24/7 in order to
07:22 - make sure that Facebook or this
07:24 - application is available for everybody
07:27 - in the world all the time
07:29 - and that's where Beck and code and
07:32 - database actually leave so that's where
07:35 - all the magic happens so when the
07:37 - envelope gets delivered to your backend
07:40 - that's where it ends up so the address
07:43 - that it's sent to is one of those
07:45 - machines in among these hundreds or
07:48 - thousands of machines that will take
07:51 - your image validate and then save it
07:54 - into a database so it happens all inside
07:57 - there so now consider your friend logs
08:00 - into Facebook on her computer same way
08:03 - front and code travels to her laptop
08:05 - along with new data like images messages
08:08 - from friends Etc all coming from these
08:11 - servers so how does Facebook know what
08:14 - data you should see on your news feed
08:16 - now in the database Warehouse Facebook
08:19 - creates isolated spaces for each user
08:22 - with their personal data images Etc and
08:26 - obviously on Facebook you want to have
08:27 - some privacy meaning you want only your
08:30 - friends to see your posts so Facebook
08:33 - creates Connections in the database
08:36 - between users that are friends and
08:39 - that's how Facebook decides what
08:40 - information to send to a user when they
08:43 - log into the application along with new
08:46 - data like images and messages from
08:48 - friends including the image that you
08:51 - just uploaded all coming from these
08:53 - servers so to summarize a web
08:56 - application is always made up of three
08:58 - components
08:59 - you have a front-end code backend and
09:02 - database front end is what you see and
09:05 - interact with in your browser in the
09:07 - user interface of the application
09:10 - backend is the code that waits for new
09:12 - messages from Front End about the
09:14 - changes you make like new uploads new
09:17 - messages likes and handles them and
09:21 - database is where all these changes are
09:23 - stored for future usage like when you
09:25 - come back the next day to use the
09:27 - application or when your friend ens the
09:29 - application most of the applications are
09:32 - written by teams of developers and not
09:35 - just a single developer and there are a
09:37 - lot of developers that are full stick
09:39 - meaning they know all three they can
09:42 - work with front end backend and database
09:45 - however each of these three areas alone
09:49 - is its own it field so some developers
09:52 - actually choose to specialize in just
09:55 - one area and become for example a
09:57 - frontend developer so in big companies
10:00 - like Facebook you would have teams with
10:03 - specialized frontend developers backend
10:05 - developers and database developers and
10:07 - these things like front-end backend
10:10 - database and virtual servers you
10:12 - actually learn all these in our software
10:14 - engineering mini boot camp so if you're
10:17 - a complete beginner in this field and
10:19 - have no it knowledge and feel
10:22 - overwhelmed by all these Concepts and
10:25 - components and don't know where to start
10:28 - then this mini boot camp is going to be
10:29 - exactly for you so make sure to check
10:32 - out the link to the course in the video
10:35 - description so now that you know the
10:37 - basics of how the websites are built and
10:40 - generally how the web Works let's start
10:43 - by learning programming Basics with
10:45 - JavaScript so let's see what JavaScript
10:48 - is and how it's used all modern web
10:52 - applications which are applications that
10:54 - are used through internet browser are
10:57 - all written using JavaScript because it
10:59 - has become the standard in developing
11:02 - web applications the way these web
11:04 - applications are built is that you have
11:07 - a layer of HTML which gets styled and
11:10 - made more beautiful by CSS in order to
11:13 - make this beautiful surface also called
11:16 - user interface smarter and more
11:19 - intelligent we use JavaScript to write
11:21 - logic to create features examples of
11:25 - such features are user registration
11:27 - booking a ticket online shopping sharing
11:30 - photos writing messages Etc so when
11:34 - thinking about how websites are built
11:36 - one can separate the design layer and
11:39 - logic layer and in big complex
11:42 - applications used by millions of users
11:45 - each part becomes big enough on its own
11:48 - so as a result you also have website
11:50 - designers also called UI designers and
11:53 - JavaScript developers as separate jobs
11:55 - maybe you've heard of programming
11:57 - languages like Java python C Etc in one
12:01 - sentence all these are backend
12:04 - programming languages and JavaScript is
12:06 - a frontend programming language in fact
12:08 - JavaScript is currently the only
12:10 - programming language you can use to
12:12 - write front and code now to make all
12:15 - these more tangible let's see how HTML
12:18 - CSS and JavaScript code actually looks
12:20 - like HTML CSS and JavaScript are simple
12:24 - files that you write in a text editor
12:27 - and these files have texts and keywords
12:29 - in them which have specific meanings to
12:31 - the browser in other words browser will
12:34 - know exactly what to do with these
12:36 - keywords so the question is when you
12:39 - create file with JavaScript keywords
12:41 - inside how does browser know that it's
12:44 - JavaScript and not some other text it
12:47 - knows because you tell it explicitly
12:49 - using the file extension the typical
12:52 - simple file will have a text extension
12:56 - txt for example but when you create file
13:00 - called for example
13:02 - app.js browser knows it must interpret
13:06 - all the contents of the file as
13:08 - JavaScript code and it works exactly the
13:11 - same with HTML and CSS to note here
13:14 - browsers are also written by developers
13:17 - using some code so this functionality to
13:19 - interpret HTML CSS and JavaScript was
13:22 - explicitly programmed and made part of
13:25 - all modern browsers it's important to
13:27 - mention here that learning HTML and CSS
13:30 - is pretty easy since there are just a
13:32 - handful of Concepts you need to
13:35 - understand and learn they don't change
13:37 - much over time and they're also less
13:38 - logical so it's more learning syntax by
13:42 - heart to use them JavaScript on the
13:44 - other hand is very Dynamic and much more
13:47 - powerful since you write almost all the
13:49 - logic with it so JavaScript changes a
13:52 - lot and improves continuously to make
13:54 - writing all these logic easier and more
13:56 - structured so obviously when you look at
13:58 - at a simple web application Logic for
14:01 - simple payment or uploading a picture or
14:03 - writing a message can be straightforward
14:05 - and easy but think of the complex
14:07 - websites use daily that have hundreds of
14:11 - functionalities so that's a lot of
14:13 - JavaScript code that developers have to
14:15 - manage and work with and that can be
14:18 - very challenging because of that over
14:21 - time many developers or teams of
14:23 - developers that use JavaScript came up
14:25 - with different ways to improve it and
14:27 - make it easier and better and they did
14:30 - it in parallel independent of each other
14:32 - or also based on each other's ideas and
14:35 - as a result different JavaScript quote
14:38 - unquote flavors or as we call them
14:40 - Frameworks emerged so framework is
14:43 - basically an improved version of pure
14:45 - vanilla JavaScript which offers its own
14:49 - additional Concepts and syntax on top of
14:51 - JavaScript Concepts and syntax that
14:54 - makes writing complex JavaScript code
14:57 - easier and most of these Frameworks help
14:59 - you pretty much do the same but the
15:01 - difference between them is in how they
15:04 - help you write the code structure it and
15:07 - manage it and naturally when other
15:09 - developers tried all these different
15:11 - Frameworks a handful of the best of
15:13 - these Frameworks became widely accepted
15:17 - and some of the most popular are reactjs
15:19 - angularjs and vuejs so both pure
15:22 - JavaScript and JavaScript Frameworks are
15:24 - continuously developing and improving in
15:26 - parallel now to mention here nodejs
15:30 - which is also a JavaScript framework is
15:32 - different from all the others because
15:34 - it's meant not for frontend code but for
15:37 - backand code so it's an alternative to
15:40 - Java python C Etc this means that if you
15:44 - learn JavaScript you will be able to
15:46 - basically program the whole web
15:47 - application from front end to backend
15:50 - using just JavaScript which could be a
15:53 - one incentive to learn JavaScript this
15:56 - means that in order to learn any of
15:58 - these Frameworks that I just mentioned
16:00 - you first need to understand basic
16:02 - JavaScript Concepts and syntax because
16:05 - all of these Frameworks are based on
16:07 - JavaScript and once you've learned basic
16:10 - concepts of JavaScript then you can go
16:13 - ahead and choose one of these Frameworks
16:15 - to learn and it will be much easier for
16:18 - you to learn Concepts and syntax of that
16:21 - framework on top of JavaScript and in
16:23 - our software engineering course we learn
16:26 - JavaScript in depth and then we learn
16:29 - vue.js framework specifically and how to
16:31 - build applications with it plus in the
16:34 - course I point out exactly and compare
16:37 - the advantages of using a framework
16:40 - compared to vanilla JavaScript to build
16:42 - front-end applications so in the next
16:45 - sections we're going to cover the basic
16:47 - concepts and syntax of JavaScript so
16:50 - that you have a foundation to learn any
16:53 - JavaScript framework so let's start by
16:56 - learning the basic building blocks of
16:58 - JavaScript which are the data types and
17:01 - variables and we will look at
17:03 - javascript's five main data types and
17:06 - then I'll show you what variables are
17:08 - and why we need them know that these two
17:11 - building blocks are the same for
17:13 - whatever programming language you learn
17:16 - so if I was doing a Java tutorial the
17:18 - concepts would be the same the
17:20 - difference is in the syntax and this is
17:22 - a good thing because unlike learning
17:24 - natural languages when you learn one
17:26 - programming language it will be much
17:28 - easier to learn another one so with that
17:31 - said let's Dive Right In now the
17:34 - simplest way to start writing JavaScript
17:36 - is directly into the browser since all
17:38 - modern browsers are able to interpret
17:41 - JavaScript and come packaged with
17:44 - so-called developer tools so open either
17:48 - Firefox or Chrome browser on your laptop
17:52 - if you don't have these browsers
17:53 - installed I suggest you install them
17:55 - because using browsers like Internet
17:57 - Explorer to run and execute JavaScript
17:59 - is not a good idea so I would download
18:02 - either Firefox or Chrome and in your
18:04 - browser right click somewhere on the
18:07 - surface and select inspect if your
18:10 - browser is in your native language then
18:12 - it would be called something else but it
18:14 - should translate to inspect and when you
18:17 - click that you see something like
18:20 - this and this space right here is called
18:23 - developer tools and here you should see
18:26 - a console Tab and when you click on it
18:29 - you get this space where you can write
18:31 - JavaScript directly in the next section
18:34 - I will show you all the different places
18:36 - where you can write and execute
18:38 - JavaScript and which one you will
18:40 - usually use as a developer but in this
18:42 - part we're going to use the browser
18:44 - console so that I can demonstrate some
18:46 - simple examples so the first data type
18:49 - that we're going to talk about is
18:51 - numbers obviously when you're writing an
18:53 - application you need numbers some of the
18:56 - examples are uh YouTube displays number
18:59 - of subscribers for each Channel or
19:01 - number of likes for each video or how
19:04 - many videos one has when you search
19:06 - something on web application like Google
19:08 - for example you usually see total heits
19:11 - uh Etc so these are all use cases where
19:14 - you need numbers and these examples use
19:17 - whole numbers but for example when you
19:19 - have an online shop where you need to
19:21 - display prices prices obviously won't be
19:24 - whole numbers always but rather decimal
19:26 - numbers with send de ision also Amazon
19:30 - ratings right they can be 4.5 for
19:32 - example and in JavaScript there are own
19:34 - data types for whole numbers and for
19:37 - decimal numbers the whole number data
19:39 - type is called integer and these are
19:41 - numbers like 0 300 minus 45 so positive
19:46 - negative numbers they're all integers
19:49 - and decimal numbers have a data type of
19:52 - decimal and again they're positive or
19:56 - negative or zero so
19:59 - 0.0 um
20:01 - 90
20:02 - 777 minus
20:04 - 50.5 they're all decimals the second
20:08 - data type is string the way I like to
20:11 - explain what string is is basically
20:13 - everything you see on your keyboard so
20:16 - obviously all the letters no matter what
20:18 - language they're in but also all the
20:20 - special characters like M percent plus
20:24 - minus and also the space character on
20:26 - your keyboard you also have numbers and
20:28 - numbers are characters or strings also
20:32 - so how does JavaScript know whether you
20:33 - mean a number like integer or decimal
20:37 - like five for example or a character
20:40 - five it knows it using quotes So you
20:43 - tell JavaScript that you're using string
20:46 - by using quotes it could be single
20:48 - quotes or double quotes So this single
20:52 - characters or any combination of them is
20:55 - a string so let's say a couple of
20:57 - examples so three in quotes is a string
21:01 - a o with umls letters from
21:05 - non-english alphabets combination of
21:09 - letters and numbers special characters
21:12 - like in email or in password and also an
21:15 - empty space character is also a string
21:19 - so just to mention here so difference
21:21 - between character and string so
21:23 - character is basically just one letter
21:25 - or one number one special character and
21:29 - string is a character or a combination
21:31 - of multiple characters so these are all
21:34 - strings and this single keys are
21:39 - characters another data type in
21:42 - programming languages is Boolean now to
21:45 - understand this let's say you enter
21:47 - wrong password when logging into your
21:49 - application usually you get a message
21:52 - saying you provided a wrong password or
21:55 - you accidentally enter wrong credit card
21:57 - number uh when buying tickets um or
22:01 - invalid email address when registering
22:03 - so in the background developers write
22:06 - JavaScript code that validates whether
22:08 - the information that you provided is
22:11 - wrong or right or correct and to express
22:15 - that wrong or correct state booleans are
22:19 - used so word true expresses correct
22:22 - State and false expresses wrong state so
22:25 - again just like with numbers you can
22:28 - write a simple string false with quotes
22:30 - and JavaScript know that you mean a
22:33 - string without quotes it will be a
22:35 - Boolean expression false that's how
22:37 - JavaScript can differentiate between
22:39 - those two in addition to that true false
22:43 - can also be used for simple yes no
22:45 - situations like is the apartment on
22:48 - Airbnb available to book on this date
22:51 - yes no that will be true or false in
22:53 - Boolean terms or is user logged in
22:57 - depending depending on whether logged in
22:59 - or not you will see different web page
23:01 - that's a Boolean expression is it a
23:03 - premium user true false also bulling
23:07 - expression Etc another data type is
23:10 - array that expresses lists think of
23:13 - applications that display lists of the
23:15 - same kind of data like list of friends
23:18 - on Facebook or list of apartments on
23:21 - Airbnb or list of comments for your
23:24 - Instagram picture lists have their own
23:28 - data types in all programming languages
23:30 - in JavaScript its data type is an array
23:34 - for example list of friends names will
23:36 - look like this it will be an
23:39 - array that's an array that includes
23:43 - multiple names and now the syntax of the
23:46 - array that encloses square brackets so
23:51 - that's how JavaScript knows or can
23:53 - interpret that it's dealing with an
23:55 - array or you could also have a list of
23:58 - ratings for Amazon products for
24:01 - example so this will be an array with
24:05 - numbers as you see array contains other
24:08 - data types so here we have uh list of
24:11 - strings and here we have numbers and in
24:14 - JavaScript you can mix different data
24:16 - types inside an array here we have
24:18 - integers and decimals in one array you
24:21 - can also write an array like this where
24:25 - you have string in integer and Boolean
24:29 - expression and the last data type in
24:31 - JavaScript is an object now in the
24:34 - Amazon review for example you don't just
24:37 - see a list of ratings you also see the
24:39 - author's name next to the rating and
24:42 - text they wrote In addition so you need
24:44 - all this information grouped in one item
24:47 - in the array you express that using
24:50 - object data type so a single rating
24:53 - object will look like this and not the
24:56 - syntax of curly braces
24:59 - so as we saw array was expressed using
25:02 - square brackets and object is written
25:05 - using curly braces so that syntax is
25:08 - important so that JavaScript understands
25:10 - what data type you're writing another
25:14 - example is an apartment object on Airbnb
25:17 - which will include all the attributes it
25:20 - has like location price ratings
25:23 - description availability images Etc so
25:26 - an object for that information will look
25:29 - something like this just with more
25:31 - information inside and here you see that
25:34 - the syntax highlighting of the browser
25:37 - is also helping to see that strings
25:39 - booleans and numbers are colored uh in
25:42 - different way meaning that JavaScript
25:45 - understands the difference between
25:48 - them so as you see object has key value
25:51 - pairs so that you know which value
25:53 - stands for what so all these author name
25:57 - user are 12 rating five these are key
26:00 - value pairs where the key basically
26:02 - describes what the value stands for and
26:05 - the name of that key is totally up to
26:07 - you you decide what that's going to be
26:10 - also you can use any data type as a
26:13 - value inside of an object so here we
26:15 - have a string integer Boolean and array
26:19 - as a value and you can also use another
26:23 - object as a value inside of an object
26:25 - and finally uh if go back to the ratings
26:28 - you will have multiple rating objects so
26:31 - a list of rating objects so the final
26:34 - list of these rating objects will look
26:37 - like this so you will be an array with
26:40 - square brackets and it will have bunch
26:43 - of objects that are comma separated now
26:46 - this is probably the most complex
26:48 - structure you will deal with most of the
26:51 - time so it shouldn't get much more
26:53 - complex than
26:56 - this
26:58 - now we saw all these data type example
27:01 - values but how do you use them to write
27:03 - a so-called logic in JavaScript the
27:06 - simplest use case is some basic addition
27:09 - subtraction etc for numbers you can use
27:12 - Simple arithmetic from elementary school
27:14 - to calculate basic things and here I
27:17 - will use the chance to break this common
27:19 - misconception that you have to be super
27:21 - good at math to learn programming which
27:24 - is completely 100% wrong I was a
27:27 - software engineer for many years and
27:29 - worked in a lot of different projects
27:31 - and I have barely used anything more
27:34 - advanced than simple arithmetics like
27:37 - plus minus multiply and divide when
27:39 - writing web applications so in
27:41 - JavaScript you can do all of
27:44 - this you can do subtraction
27:48 - multiply
27:50 - divide and you can also combine them
27:53 - just like you would with a calculator
27:55 - and of course you can do the same with
27:57 - desk decimals some real life use cases
28:00 - for these basic arithmetics are for
28:03 - example when you add multiple items to
28:05 - your shopping card on Amazon you see the
28:07 - sum and you also see the price breakdown
28:10 - which is item prices plus shipment costs
28:13 - or when you have product ratings based
28:16 - on all the individual ratings you
28:18 - display the average rating or on Uber
28:20 - for example you see the distance from
28:22 - pickup locations to the destination in
28:25 - kilometers or miles and in minutes
28:28 - all of these are simple
28:30 - calculations which are possible in
28:32 - JavaScript now obviously all these
28:34 - operators are meant for numbers but
28:37 - there is a case where we can use the
28:39 - plus operator for string data types so
28:44 - what will happen if I write string 12 +
28:49 - string 12 so we get
28:52 - 1,212 so what happened here is that
28:54 - JavaScript knows that these two are are
28:57 - strings and not numbers and instead of
28:59 - adding them it handles them as strings
29:04 - by gluing them to each other and in
29:06 - programming that's called string
29:09 - concatenation and no you don't have to
29:11 - remember that word just so you know that
29:13 - there are weird names for simple things
29:15 - in programming the same way you can glue
29:18 - a string to any other data type so you
29:21 - can do blah to 12 and the number will
29:26 - also turn into a string so to say or you
29:29 - can do the same with Boolean
29:32 - values because JavaScript interprets
29:36 - that as you want to create another
29:38 - string out of these two
29:41 - values and this examples probably don't
29:44 - make much sense but in the next section
29:46 - of this video I will show you some more
29:47 - real life examples why this concept is
29:51 - actually very
29:52 - important now let's understand one of
29:55 - the most important building blocks of
29:57 - any programming language variables and
30:00 - let's see what variables are to
30:03 - understand the concept of variables
30:05 - think about the following scenario you
30:07 - change your username on Facebook so
30:10 - obviously your changed username is
30:12 - displayed on your profile but also all
30:14 - the comments that you wrote before the
30:16 - name change should now appear with your
30:19 - new username and also in all your
30:22 - friends lists your new username will
30:25 - appear all right so this means if you
30:28 - had Facebook code where your username is
30:31 - written in all those different places so
30:34 - you have your username in the profile
30:36 - section you have your username in
30:38 - comment one comment 2 Etc and in all
30:41 - your friends lists right written
30:44 - directly as is or let's consider another
30:47 - example think about online shop each
30:49 - product has a price and it's displayed
30:52 - in a list in the products own detail
30:55 - page and maybe also in combination to
30:57 - other products so if the store now
31:00 - offers a discount and the price changes
31:04 - obviously the price should be updated in
31:06 - each location where it's displayed so
31:09 - again in code it will look something
31:12 - like this obviously this is not a valid
31:15 - JavaScript code but just to give you an
31:17 - idea so somewhere in one Javascript file
31:20 - you have the list of products where the
31:22 - product price is directly written as is
31:26 - and you'll have the same in
31:27 - detail page section of the product and
31:31 - combination now when the username on
31:33 - product
31:34 - changes in those two scenarios all these
31:38 - variables need to be overwritten which
31:40 - means that you will have to go and
31:42 - change the price here and here and here
31:45 - and same with the username change it in
31:47 - all places where it's used now that
31:50 - would be absolutely inconvenient
31:52 - considering applications are so Dynamic
31:55 - and things change a lot
31:58 - so that's where variables come in so
32:01 - instead of writing the actual value in
32:03 - 10 different places you write the value
32:06 - once and then reference it 10 times from
32:10 - 10 different places and that reference
32:12 - to the actual value is called a variable
32:16 - and you give variables a name that makes
32:19 - sense for that value so for example
32:22 - product a price equals 50 so now you
32:27 - create a reference for the value 50
32:30 - which is called Product a price or
32:33 - username equals app user a so you take
32:37 - the actual value which is string and
32:39 - create a reference to it but in addition
32:41 - to that you should also let JavaScript
32:44 - know explicitly that this random name
32:47 - that you just came up with is a variable
32:50 - and you do that using VAR
32:53 - keyword like this and remember keywords
32:56 - are words that have special meaning to
32:59 - JavaScript and because of that if you
33:01 - noticed the coloring or the highlighting
33:04 - of the word changed once I added VAR in
33:09 - front of it so now JavaScript knows that
33:11 - this is a variable keyword and this is
33:13 - the name of that reference or variable
33:16 - or the same with product a price
33:18 - variable and in code it will now look
33:21 - like this so first you'll create that
33:23 - reference somewhere like this and then
33:27 - in all the locations or all the places
33:30 - in JavaScript code where you need that
33:32 - value that actual number value you use
33:36 - the reference instead of the actual
33:38 - value so you have your text and the
33:41 - reference to the number in all those
33:43 - different locations and here note the
33:46 - plus operator that I showed you earlier
33:49 - this is an example of string cenation
33:52 - meaning string is glued to another value
33:56 - and this this is where this concept is
33:59 - very useful so when you run or execute
34:02 - this line what happens is that
34:03 - JavaScript in the background replaces
34:06 - this reference with the actual value so
34:09 - when I execute this I see product a
34:12 - price 50 and this is a real example
34:15 - where plus operator with strings is
34:18 - actually very important and you will use
34:20 - this a lot because you will use
34:22 - variables a lot in order to make this
34:25 - variable concept stick more let's
34:27 - consider two additional use cases first
34:30 - consider multilanguage applications on
34:33 - most applications you can select a
34:36 - preferred language and see all your
34:38 - navigation buttons Etc in your language
34:42 - now if application supports 10 languages
34:44 - obviously developers don't create 10
34:47 - different websites instead the same text
34:50 - is translated in 10 different languages
34:52 - and reference using variables and
34:55 - depending on which language which the
34:57 - user selects the correct reference is
35:00 - used and the Second Use case which is
35:03 - very important is user input so when you
35:06 - sign up for a web application you need
35:08 - to enter your name last name email
35:11 - password these are all user inputs so
35:14 - what you input in the application as a
35:16 - developer when you when you prepare that
35:18 - code for future usage you don't know
35:21 - what these values are going to be
35:22 - because users can enter anything but
35:25 - what you know is the name of the
35:27 - variables that will reference these
35:29 - values and this way you can use the
35:32 - actual values without even knowing what
35:34 - they
35:36 - are now the question is when we create
35:39 - JavaScript files and write lots of
35:41 - JavaScript logic inside how do we run
35:44 - this logic in browser how do we give
35:47 - that JavaScript code to the browser to
35:49 - execute it there are three ways to
35:52 - execute your JavaScript code the
35:55 - simplest way to start writing JavaScript
35:57 - is directly into the
35:59 - browser this is a place where you can
36:01 - write JavaScript directly and the
36:03 - browser will interpret and execute your
36:06 - JavaScript code right here so you don't
36:09 - have to set up anything and this is the
36:11 - easiest way to start especially if you
36:13 - want to try out some simple commands so
36:16 - let's actually write some JavaScript
36:18 - code there so you can create variables
36:20 - here or you can do some
36:25 - calculations and you can
36:27 - at number one and number two Etc so you
36:30 - can do many things here however if I
36:33 - refresh the page of course all the code
36:36 - will be gone and also you can execute
36:38 - only one command at a time and usually
36:42 - when you're developing you want to save
36:44 - that code and execute the whole thing at
36:46 - once and not have it disappear every
36:49 - time you refresh the browser so for that
36:51 - you need to write JavaScript in a file
36:54 - and then give that file to browser in
36:56 - order to execute the code
36:58 - inside and the file that browser accepts
37:01 - to execute JavaScript code is HTML I'm
37:05 - going to create a basic HTML outline so
37:08 - that our browser can execute the
37:10 - JavaScript code so how can I write the
37:12 - HTML file with JavaScript code in an
37:15 - editor so if you are on Windows you may
37:18 - have a notepad a simple text editor or
37:21 - ionm have a text edit and I can create a
37:24 - new document if I open that I can write
37:27 - just normal text here so I'm going to
37:30 - write some simple html text and HTML as
37:34 - we saw at the beginning is a separate
37:36 - scripting language to basically write
37:39 - the structure of a website and I teach
37:42 - complete HTML and CSS in the software
37:45 - development miniot camp but here our
37:47 - focus is on JavaScript so we're going to
37:49 - use the most basic HTML possible to be
37:53 - able to execute JavaScript on the
37:55 - website so so maybe you're wondering if
37:58 - I'm writing HTML in the same editor
38:00 - where I would write normal text how does
38:03 - browser know that it's an HTML file well
38:07 - when you save the file instead of text
38:10 - document I'm going to choose HTML so
38:13 - HTML extension and I'm going to call
38:15 - this file index which is a standard or
38:16 - common name for the main HTML file so
38:20 - when I save this you also see the icon
38:24 - that has Chrome logo in it or maybe some
38:26 - other browser logo that means it's a
38:29 - browser executable and since this is
38:32 - just HTML in order to add JavaScript
38:34 - code I'm going to add tag called Script
38:37 - that's where JavaScript goes
38:40 - and and this is a part where we'd write
38:43 - all the JavaScript code so for example
38:46 - here I can create a variable called some
38:50 - name and so on now I said you can write
38:55 - the whole HTML and JavaScript in here
38:58 - but the problem with using the simple
39:00 - editor is that they don't help you in
39:02 - writing code so here you see they don't
39:06 - highlight the keywords they don't tell
39:07 - you you made a syntax error or any other
39:10 - tips so for example in browser when we
39:13 - wrote VAR name some name you get the
39:18 - highlighting of the keyword of the
39:19 - variable name of the data type for
39:22 - example if you have a number it has a
39:25 - different highlighting Etc so you don't
39:27 - have any of that in simple editor and it
39:31 - also looks pretty ugly so instead there
39:34 - are special editors for different
39:36 - programming languages that help you with
39:39 - highlighting and other features to write
39:41 - the code and there are special ones for
39:44 - writing HTML and JavaScript code
39:47 - specifically the one that we'll be using
39:50 - in this course is webstorm from
39:52 - jetbrains which is actually an
39:54 - integrated development environment M or
39:57 - IDE and not a simple code editor what
40:00 - does that mean exactly well when you
40:03 - install webstorm you basically have
40:05 - everything that you need for website
40:07 - development in there so various features
40:09 - Beyond just writing code are included
40:12 - out of the box or in other words you get
40:15 - an IDE with full batteries included and
40:19 - we'll see some of its cool features
40:21 - throughout the course so if I type in
40:23 - webstorm download we can check out their
40:26 - download page for your specific
40:29 - operating system and if I click on
40:31 - developer tools you actually see they
40:33 - have a list of multiple idees and they
40:36 - have dedicated idees for different
40:39 - programming languages and webstorm is
40:41 - specifically for JavaScript so it gives
40:44 - us these awesome features specifically
40:47 - for JavaScript development and the great
40:49 - thing is they have special offers for
40:51 - students universities startups for all
40:54 - their idees including webstorm so let's
40:57 - go ahead and download the webstorm IDE
41:00 - for free to develop our JavaScript
41:02 - application I'm using Mac OS so I'm
41:05 - going to download this one and once
41:07 - downloaded you just double click on this
41:10 - installer file let's drag webstorm to
41:12 - the applications and there you go we
41:14 - have webstorm available locally let's
41:16 - double click again and it's going to
41:18 - open the webstorm
41:22 - IDE this is the welcome page and let's
41:24 - go ahead and create a new product
41:26 - project let's call this JavaScript app
41:29 - and create and in the webstor settings
41:32 - I'm actually going to zoom in so that
41:34 - you can see the code better so I'm going
41:37 - to set it to
41:38 - 150 and there you go this is what we are
41:41 - starting
41:45 - with so now let's create a new file in
41:49 - our JavaScript application project if
41:51 - you go here and right click with your
41:53 - mouse you see these options and we we
41:56 - can create a new generic file or if we
41:59 - know that we're going to be writing a
42:00 - JavaScript or HTML file we can actually
42:03 - choose specifically that type of file
42:06 - and this way webstorm actually knows
42:09 - that you want to write HTML or
42:11 - JavaScript code and it actually helps
42:14 - you create the boilerplate code or the
42:17 - initial code for that file specifically
42:19 - so let's see what happens if I choose
42:22 - HTML file from the options and let's
42:25 - call this file
42:27 - index.html like we did before and know
42:30 - that we have HTML extension in the file
42:33 - name and if I hit enter there you go
42:36 - webstorm actually knows that this is a
42:39 - basic HTML structure all these tags are
42:42 - needed for a proper HTML page so it
42:46 - autogenerated all these so you don't
42:48 - have to type it out from scratch this is
42:51 - super convenient and let's give our
42:54 - index.html web page a tiple let's call
42:56 - it JS
42:59 - app just like we did here and that's it
43:02 - now you can ignore actually all this
43:05 - code here that was autogenerated this is
43:08 - kind of a structure a main structure for
43:10 - a properly formatted HTML so everything
43:13 - that is needed is right here what we
43:16 - want to focus on is writing our
43:18 - JavaScript code so if we check our index
43:22 - HTML file that we wrote before we have
43:25 - this script text with some JavaScript
43:27 - code inside so I'm going to copy that
43:29 - block we already have the body tags and
43:32 - the script tags usually go inside the
43:35 - head Texs so between those opening and
43:39 - closing head Texs or between the body
43:41 - Texs so in our case we're going to add
43:43 - them in the head and as soon as I paste
43:47 - in the script block webstorm IDE already
43:52 - highlights some of the issues with our
43:55 - syntax so because we use this simple
43:58 - text edit editor we have some wrong
44:01 - characters that can't be interpreted by
44:03 - the browser so we need to fix them and
44:05 - know that we have these red underlines
44:07 - here that are for error and then we have
44:10 - these orange underlines which are for
44:12 - warning so this need to be fixed because
44:15 - otherwise our JavaScript is not going to
44:16 - work so we're simply going to replace
44:19 - those with a standard quotes basically
44:22 - and that's it and as you see with the
44:24 - syntax highlighting the value assignment
44:26 - to the variable is working now and the
44:28 - error is gone now you notice we have
44:31 - another underline here which is a
44:34 - warning this means the code is going to
44:37 - work fine without any issues but we
44:40 - could make some improvement to this code
44:43 - it says VAR is used instead of let or
44:45 - const so what is it about back in the
44:48 - day when JavaScript was in the early
44:51 - phases VAR keyword was used to declare
44:54 - the variables later as the JavaScript
44:58 - programming language evolved and
45:00 - improved and Engineers who were
45:02 - developing JavaScript programming
45:04 - language made those improvements these
45:06 - two Alternatives were added to defining
45:09 - variables the let and const keywords and
45:13 - the reason for that Improvement or the
45:14 - main benefit of that is to prevent
45:17 - basically accidentally overwriting the
45:21 - variable values because JavaScript is
45:23 - very flexible which is great but it also
45:25 - means means that you can make lots of
45:27 - accidental mistakes and one of them
45:28 - being defining the same variable
45:30 - multiple times and accidentally
45:33 - overwriting the previous variable
45:34 - because you didn't know that you already
45:36 - had that variable in your code and
45:38 - because of that we have these two
45:40 - Alternatives so the con is basically for
45:43 - use cases where Define a variable so
45:46 - basically a value that you want to
45:47 - reference in multiple places but that
45:49 - value should never change for example if
45:52 - we're developing an e-commerce
45:54 - application for Nike the name of the
45:57 - shop or the brand name Nike should never
46:01 - change right imagine someone overwriting
46:03 - the name of the brand or name of the
46:05 - shop from Nike to something else so this
46:09 - value should not change dynamically
46:11 - within the program or within the
46:13 - application so we had thousands of lines
46:16 - of code here there should not be a line
46:19 - that overrides the value of brand if
46:21 - that happens accidentally Again by the
46:23 - mistake of developer then and the fact
46:26 - that we're using const in front of it
46:29 - will tell JavaScript that program cannot
46:32 - overwrite the value of this variable and
46:35 - for all the other use cases where we
46:37 - want to allow program to change the
46:40 - variable value we can use let instead of
46:43 - the VAR example again would be if we had
46:46 - some prices for different items and then
46:49 - on some days we have a campaign so that
46:51 - price can dynamically change when
46:54 - discounts get applied for example or if
46:56 - we have a customer name and they change
46:58 - their username or whatever that value
47:01 - could change as well so using let for
47:04 - all the other variables instead of VAR
47:05 - is a good practice and as you see
47:07 - webstorm itself is helping us especially
47:10 - as beginner developers to learn those
47:14 - syntax issues as well as good
47:16 - programming practices so now we have a
47:19 - fully functioning HTML file with
47:21 - JavaScript code inside that is working
47:23 - and properly written now the question is
47:25 - is how do we execute the index HTML file
47:29 - in the browser so how do we take this
47:31 - file and contents and make it work in
47:34 - the browser now there are a couple of
47:37 - simple ways to do that and I'm going to
47:39 - show you all the options so you can
47:41 - compare them the first very easy option
47:43 - is to drag and drop this file into the
47:47 - browser so just open a new tab on the
47:51 - browser and we need to locate this file
47:54 - in the file explorer
47:56 - and we can do that by navigating
47:58 - directly to this file using this
48:00 - location that you see here so this is my
48:03 - home
48:04 - directory called Nana and inside that I
48:07 - have these webstorm projects which
48:09 - automatically gets created by the way by
48:11 - webstorm and inside that I have Js app
48:14 - and
48:15 - index.html or you can also save yourself
48:18 - all that just right click on the file
48:21 - itself open in finder and there you go
48:26 - so now back to the browser one way to
48:29 - execute this index.html in the browser
48:31 - is just take this file and drop it
48:35 - inside the browser and there you go now
48:37 - we don't see anything here it's just
48:39 - White Blank Page because we are not
48:43 - displaying anything we're just creating
48:45 - a variable not even using
48:47 - it but if we open the inspect or the
48:51 - developer tools of the browser we can
48:54 - see that this is exactly our our
48:56 - index.html with our script inside so
48:59 - that's one way a second also very simple
49:02 - way is to Simply double click on
49:05 - index.html and this will open a fresh
49:08 - new browser tab like this
49:12 - again the same page with the same
49:15 - contents and note that we have this
49:17 - title here this JS app displayed which
49:21 - we defined right here so that's the
49:25 - title of the web page now there are two
49:28 - more ways of executing our index.html
49:32 - file specifically using web stor and
49:35 - these are actually way more convenient
49:38 - because you can open this file directly
49:41 - from here using one of the browser icons
49:44 - so webstorm actually detects the
49:46 - browsers that you have available and it
49:48 - will show you the icons so you can open
49:51 - this HTML file in one of your browsers
49:54 - so if I click inside side again this
49:57 - opens a new browser tab automatically
50:00 - this is our title it even has this
50:02 - webstorm logo here as you see the value
50:05 - inside the browser URL is different
50:08 - because it's coming directly from web
50:12 - store and inspect again there you go
50:16 - this is our code and final probably the
50:21 - most convenient way of opening your
50:24 - index.html file a browser is using this
50:27 - web storms built-in browser preview so
50:31 - let's click on this and see what happens
50:33 - and as you see it shows us the browser
50:36 - integrated directly in the web storms
50:39 - IDE and that leads me back to the name
50:42 - IDE which stands for integrated
50:44 - development environment so basically
50:47 - this is an environment where all the
50:49 - tools and the things you need for
50:51 - application development are directly
50:54 - integrated in into this environment and
50:58 - the convenient part about this is
51:00 - obviously that you don't need to switch
51:01 - between the IDE and the browser you have
51:04 - everything in one place you have your
51:07 - folder and file structure here you have
51:09 - the code editor here and you have the
51:10 - browser and a cool thing about it is
51:12 - that right now we don't have any text
51:15 - displayed on the website but let's
51:17 - actually display something so we can see
51:19 - how it works this is our
51:23 - awesome JavaScript
51:26 - application and as soon as I save and by
51:29 - the way shortcut for saving is command s
51:31 - on Mech or control s on Windows as soon
51:35 - as I save notice here the text is
51:38 - displayed right away right and again add
51:41 - something here and all those changes are
51:45 - directly displayed here this saves a lot
51:47 - of time when you're actually actively
51:49 - developing and making thousands of
51:51 - changes so you don't have to refresh and
51:53 - reload all the time so this is available
51:56 - out of the box in our case we're
51:59 - actually going to stick to the browser
52:01 - because we want to
52:05 - use the browser developer tools because
52:08 - we're going to be outputting some stuff
52:10 - here for our tutorial specifically
52:13 - however if I was developing myself and
52:16 - writing the HTML code then I would
52:18 - actually go for this preview feature so
52:21 - let's close this and we already have the
52:24 - application open in browser and you
52:27 - noticed that on the browser as well
52:30 - without refreshing or reloading the page
52:32 - the changes are automatically applied so
52:35 - let's go back and remove this and again
52:38 - let's save go back and the changes are
52:41 - applied so we have the same auto sync or
52:44 - automatically reload on Save when we
52:47 - open this
52:49 - index.html using one of these browser
52:52 - icons here which again as you know
52:55 - notice is different from when we
52:56 - directly drag and drop the file in the
52:59 - browser here we would have to explicitly
53:01 - refresh to apply the changes now this
53:04 - may look like a small thing when you're
53:06 - just getting started however when you're
53:09 - a little bit more experienced and you're
53:10 - developing actively this may save you a
53:13 - lot of time and a lot of nerves awesome
53:16 - now if you want to also display stuff in
53:19 - the browser console we can add a line
53:23 - here console do log which basically
53:27 - outputs whatever we pass in to the
53:30 - browser so we can pass in the variable
53:33 - reference
53:35 - or a stream
53:40 - directly like this again as soon as I
53:43 - save this will automatically be reloaded
53:46 - in the browser and there you go we have
53:49 - the variable value and we have whatever
53:52 - I wrote directly in the console.log so
53:56 - console.log basically prints out stuff
53:59 - directly in this console tab right here
54:02 - now imagine we actually wrote Our HTML
54:06 - web page structure right here within the
54:08 - body Tex which can be actually a very
54:11 - large HTML file and in addition to that
54:15 - we wrote a lot of JavaScript
54:17 - functionality within those script texts
54:20 - that will be pretty inconvenient because
54:22 - now we have lots of lines of code within
54:25 - one file so we have HTML here we have
54:28 - JavaScript here and maybe thousands of
54:31 - lines of code which makes it difficult
54:33 - for us to have an overview of all the
54:35 - things this file contains and we're kind
54:38 - of mixing two different things within
54:41 - one file so in programming as your code
54:44 - grows it's always a good practice to
54:47 - keep your code clean have multiple files
54:50 - where each file contains a limited
54:52 - number of code lines so that you can
54:55 - easily navigate through your application
54:58 - code or if you have new team members new
55:01 - developers joining your project team
55:04 - they can easily navigate through the
55:05 - application code so it's always a good
55:07 - practice to have your code clean and
55:10 - especially to separate the
55:11 - functionalities from HTML CSS and
55:14 - JavaScript that means instead of having
55:16 - our JavaScript code directly inside we
55:18 - want to actually have it in a separate
55:20 - Javascript file and Link it here and
55:23 - it's super simple actually
55:25 - so first thing we want to do is to
55:27 - create own dedicated JavaScript file
55:29 - instead of having JavaScript directly in
55:31 - the HTML file so going back here right
55:34 - click with your mouse again and this
55:36 - time we're going to create a new
55:38 - Javascript file and we're going to call
55:41 - this
55:42 - .js and again notice the JS extension in
55:47 - the file name this way browser will know
55:49 - this is a Javascript file hit enter and
55:51 - you also see these different icons that
55:54 - webstorm displays for different file
55:57 - types so even if we did not have the
55:59 - extensions for the files just by looking
56:02 - at the icons you will know this is
56:04 - Javascript file this is HTML and
56:07 - obviously other types of files will have
56:11 - their own icons as well this is so now
56:14 - we're going to Simply take all this
56:16 - JavaScript code that is defined within
56:18 - the script text we're going to cut that
56:21 - out or you can just use the shortcut
56:25 - and we're going to paste it directly in
56:28 - here and you notice in JavaScript file
56:30 - we don't need any text we can just write
56:33 - JavaScript line by line like this and
56:36 - you notice again webstorm detecting that
56:39 - it is a Javascript file actually
56:41 - provides some additional functionality
56:43 - even to our code and one of them is
56:45 - showing the data type of the variable So
56:48 - based on the value it's automatically
56:51 - detected that this is a string variable
56:54 - and it's basically showing that as an
56:56 - additional hint to help us in
56:58 - programming however we're not done yet
57:01 - because now we have those empty scripts
57:04 - but there's no linking or connection
57:07 - between our HTML and JavaScript file we
57:09 - need to actually tell this HTML file to
57:13 - get the script from somewhere so we need
57:15 - the source of the new JavaScript code
57:19 - and the way we Define it is we leave
57:22 - this section empty so nothing actually
57:24 - goes between the script tags and instead
57:27 - within the opening script tag we Define
57:31 - a source
57:33 - SRC so this basically is a pointer to
57:36 - JavaScript file that contains the script
57:40 - that we want to load as part of HTML
57:43 - page and as you see again super
57:46 - conveniently webstorm is automatically
57:48 - suggesting us all the files that we have
57:51 - in our current project and it tells us
57:54 - you want to to reference epto JS and if
57:57 - we do if I just click on it it basically
58:00 - automatically sets that as the source
58:03 - name right here and that gives us the
58:07 - link that we want and again super
58:09 - convenient especially as a beginner that
58:12 - the IDE itself provides all these
58:14 - additional explainers telling you what
58:16 - different tags are and so on and as I
58:19 - said nothing actually goes between those
58:21 - script tags so we can just leave it
58:23 - empty and this will load the same script
58:26 - that we had defined directly here now
58:29 - from a separate Javascript file so in
58:32 - order to test this I'm going to make a
58:34 - change in the JavaScript code and we're
58:37 - going to see whether that is actually
58:39 - reloaded in the browser once we save it
58:42 - so I'm going to say output in console
58:44 - from
58:46 - app.js
58:48 - file and I'm going to save this make
58:50 - sure to save both changes in both files
58:54 - because if if you don't save the changes
58:56 - in webstorm it's not going to be
58:58 - reloaded in the browser so now let's
59:01 - check back with our browser and without
59:04 - any refresh you see output in console
59:07 - from .js file and if I go back to the
59:10 - elements which is the HTML tags body and
59:15 - so on we see that script is linking to
59:20 - app.js and this is another element that
59:23 - is also loaded in the browser
59:25 - along with HTML file and that is also
59:28 - very interesting and important so these
59:30 - are the HTML elements on the page
59:34 - however if I go to the sources tab right
59:37 - here you see our index.html
59:41 - file this is the file that we wrote and
59:44 - this is some additional stuff that
59:45 - webstorm actually adds to our index HTML
59:49 - automatically to give us this automatic
59:51 - loading and then we have our .j s file
59:55 - also loaded
59:58 - alongside and if I check the sources of
60:01 - our previous
60:03 - index.html that had the script directly
60:06 - you see that we don't have any
60:07 - Javascript file it's just HTML now let's
60:10 - learn about the next important concepts
60:13 - of conditionals and comparison operators
60:16 - which are also common Concepts across
60:18 - all programming languages and if those
60:20 - terms sound scary to you I'm going to
60:23 - explain those with very simple examples
60:25 - and visualizations to make sure you
60:28 - understand them very
60:29 - easily so first let's see what
60:32 - comparison operators
60:34 - are let's consider as an example
60:37 - Facebook featured to display birthdays
60:40 - of its users so basically if today is
60:44 - your birthday Facebook will show a
60:47 - birthday icon and will send
60:49 - notifications to all your friends and
60:52 - for Facebook to check whether it's your
60:54 - birthday today basically it has to
60:56 - compare today with your birth date right
61:00 - so that comparison or equals in
61:04 - JavaScript is expressed with three
61:07 - comparison signs like this so one
61:10 - comparison sign is reserved for
61:14 - assigning variables so double or triple
61:17 - equal signs are used to check the
61:21 - equality of two values so let's see the
61:23 - difference between the two so let's say
61:26 - I have a variable
61:27 - H 30 so if I compare value of variable H
61:33 - to 30 then I get true right if I triple
61:39 - compare that I also get true so same
61:42 - results now if I
61:46 - compare the value with a string
61:49 - representation of 30 I also get
61:52 - true however if if I triple
61:56 - check I get false and this is the
61:59 - difference between these two the double
62:01 - comparison checks equality of the values
62:05 - on two sides so checks the value here
62:08 - checks the value here and Compares them
62:10 - by the value the triple equality
62:12 - Compares value and also the type the
62:16 - data type of those values so if I have a
62:20 - number here and a number here which are
62:23 - the same values then it's going to be
62:24 - true if I have a number value here which
62:29 - is defined here and a string value here
62:31 - of the same value I get false because
62:33 - the data types are not the same so
62:36 - that's the difference and obviously if I
62:39 - put here another value it's going to be
62:41 - false in any case right like this or
62:45 - like this doesn't really matter and that
62:48 - little difference can actually have a
62:50 - big impact that's why this concept is
62:52 - important in JavaScript general rule is
62:55 - that you should in most cases use the
62:58 - triple equation to compare two values
63:02 - now let's consider another example where
63:04 - you order something on Amazon and says
63:06 - that shipping is free above purchase of
63:09 - €20 so when you add things to your card
63:12 - program checks whether your order total
63:15 - is above 20 or below 20 and then
63:18 - calculates the shipment cost based on
63:20 - that and let's say it charges you5 if
63:24 - your if your total order is under €20 so
63:28 - now we don't have the equal check
63:30 - anymore but rather is it higher or is it
63:34 - lower so the way to check that is let's
63:37 - clear this so let's define the variables
63:40 - so you have the total price let's say
63:42 - you gathered items that are €19 and now
63:46 - the program checks if total price is
63:50 - greater than €
63:52 - 20 you get a bullan expression of false
63:56 - because this condition is wrong in the
64:00 - same way the program can also check the
64:02 - opposite direction so we can check
64:04 - whether your total price is below 20 but
64:09 - notice that we don't check for Value 20
64:12 - so what happens if the total price is
64:14 - exactly 20 so basically here we need to
64:17 - check that if total price is below 20 or
64:21 - €20 in both cases you get charged for
64:24 - the shipping so in order to do that you
64:27 - can combine those two expressions and
64:29 - say like this so either it should be
64:32 - less than 20 or it should be exactly
64:39 - 20 and as you see each of these
64:42 - comparisons return to you a Boolean
64:44 - expression of either false or true only
64:49 - one of these outcomes is possible so
64:52 - what this means is that in the program
64:55 - you check if this condition comes out as
64:58 - true then you want to offer free
65:01 - shipping otherwise you want to charge €5
65:05 - for shipping and the way it's going to
65:07 - be written inside of the program using
65:09 - JavaScript syntax is if tour price is
65:13 - greater than 20 here will be code that
65:16 - let's say calculates um or sets the
65:19 - price of shipping so here we set it to
65:23 - zero there's no shipping cost otherwise
65:26 - is expressed with else shipping
65:29 - cost equals to 5 so this is how the
65:35 - conditions are used in JavaScript to
65:38 - check the condition and based on that do
65:40 - either this or if we switched that
65:44 - condition we can also check if total
65:47 - price is less than or equal to 20 then
65:51 - shipping cost will be set to five
65:55 - otherwise the shipping cost will be zero
65:59 - so to go back to some technical terms in
66:01 - JavaScript this here is called if else
66:05 - statements whatever is inside if is
66:08 - called a condition so this thing here
66:11 - that evaluates to either true or false
66:13 - is a condition and this here that
66:16 - compares those two values is called a
66:18 - comparison operator so greater smaller
66:22 - equals Etc all these are comparison
66:25 - operators but let's say you have a case
66:28 - where you have three different shipping
66:30 - costs right so for example if the price
66:32 - is below €1 you get charged 5 shipping
66:37 - cost if it's below 20 you get charged
66:40 - only €3 and if it's above 20 you get
66:43 - charged nothing now you don't have if
66:46 - else only but you have three conditions
66:49 - it's also super simple to do that with
66:52 - if else so basically you check again if
66:55 - total price is less than or equal to 10
67:01 - you get charged
67:03 - 5 and here you are going to say else if
67:07 - which is another statement where you can
67:10 - write the conditional where we're going
67:12 - to check whether total price
67:15 - is less than or equal to 20 in that case
67:18 - you get charged
67:19 - €3 and there comes our final else which
67:23 - is
67:24 - zero so now I have three conditions here
67:28 - so the first condition here says it's
67:31 - less than or equal to 10 the first one
67:34 - checks another condition and the third
67:36 - one um important thing to note here that
67:40 - the last else or the the else here
67:43 - doesn't have a condition explicitly but
67:46 - it implies that both of these above
67:50 - conditions were false so both of them
67:52 - were wrong be and because it's implicit
67:56 - we don't have to check it explicitly
67:58 - here so you could also go here and do
68:02 - that else
68:04 - if price is greater than 20 and this
68:09 - will work just fine however because it's
68:12 - implicit we don't need that so we saw
68:15 - comparisons between two values using
68:17 - equals higher or lower the final
68:21 - operator is not equals for example
68:24 - consider a feature where a web
68:27 - application checks whether user is a
68:29 - premium member or not obviously if you
68:33 - are not a premium user you won't see the
68:35 - cool features they have or you won't be
68:38 - able to access some premium content so
68:42 - when you log in program will check is
68:45 - user membership premium so with equals
68:49 - or it can check user membership not
68:52 - premium and in order to express that
68:55 - negative comparison you use this syntax
68:59 - so not equals in JavaScript is expressed
69:01 - with exclamation mark and double equals
69:05 - and to show that in IFL statement let's
69:07 - say if user membership is not premium
69:11 - show user non premium contents or maybe
69:16 - even recommend a premium upgrade as a
69:19 - marketing measure and else show premium
69:24 - contents and finally you can combine all
69:27 - these
69:32 - conditions so for example if today is
69:35 - your birthday and you have displayed
69:38 - that on your profile only then the
69:41 - program will show the notification so
69:43 - both conditions must be true so if
69:46 - today's date is the same as your birth
69:49 - date and birthday displayed is true so
69:53 - here you can use a comparison with uh
69:55 - Boolean true or false so both these
69:58 - conditions must be true for notification
70:01 - to be sent and in JavaScript the Syntax
70:04 - for end is this so This basically is
70:09 - also a valid condition that you can also
70:11 - put inside of the if condition so if
70:14 - this whole thing is true then show
70:17 - notification else do not or another
70:20 - example back to the shipment cost let's
70:23 - say you don't pay for the shipment if
70:26 - the total price is over €20 or you have
70:29 - Amazon Prime account so the way to
70:32 - express that would be total price over
70:36 - €20 or Amazon Prime
70:40 - equals true so here only one of them has
70:44 - to be true for you to get free shipment
70:47 - or in JavaScript is expressed with
70:49 - double pipes and again you can put that
70:52 - in if
70:54 - statement and say if either this or this
70:59 - is true then give a free shipment
71:03 - otherwise don't and you can also use
71:06 - negation in conditions for example you
71:09 - want to check whether this whole thing
71:12 - is false and the way to do that is using
71:16 - the exclamation mark and the brackets so
71:21 - basically this will check whether this
71:23 - whole condition is
71:29 - false now let's learn about one of the
71:33 - most important Concepts in any
71:35 - programming language which is
71:37 - functions and let's understand with
71:39 - simple examples what they are and why we
71:42 - need them so let's go back to our JS app
71:45 - project and we're going to work in this
71:47 - EP tojs file so I'm going to delete this
71:51 - and instead we're going to work with
71:53 - this simple shipping cost calculation
71:57 - logic so this if else statement is our
72:01 - JavaScript logic that basically
72:02 - calculates based on whatever total price
72:05 - is how much shipping cost a customer
72:08 - will have to pay and let's actually
72:10 - output whatever the shipping cost is in
72:13 - the console so we have this application
72:16 - up and running open in our browser so
72:19 - whatever we output with console.log is
72:22 - going to appear right here and in
72:24 - webstorm actually there is a very
72:26 - convenient way of writing console.log if
72:29 - you're lazy like me and don't want to
72:31 - type out the whole thing you can simply
72:34 - do
72:35 - log enter and that basically
72:38 - autocompletes console.log now we want to
72:41 - log whatever shipping cost value was
72:44 - calculated by our logic so I have just
72:47 - set 19 as a total price you can set
72:50 - whatever value you want and then we're
72:52 - going to output the result I'm going to
72:55 - save it and if we go back to the browser
72:58 - you see the output here however I don't
73:00 - want to see just number I want to see
73:03 - what is it exactly what does a number
73:05 - refers to so I want to have a full
73:07 - sentence like
73:09 - shipping cost for you is whatever the
73:13 - value of shipping cost variable is so
73:16 - basically we have a string here string
73:18 - value and with that string value we also
73:21 - want to Output the value of a variable
73:23 - and there is one way to do that in
73:25 - JavaScript which is just combining these
73:28 - two with the plus sign so it's not an
73:32 - arithmetic operation like with numbers
73:34 - but in this case it basically takes
73:36 - whatever string value of this is and
73:39 - then whatever value this variable has
73:42 - and outputs it as one sentence or one
73:44 - string so if I save this go back there
73:47 - you go you see the full sentence however
73:50 - there is more elegant way to do that
73:52 - which is is way nicer which
73:56 - is we remove these double quotes here
73:59 - and instead we use what's called back
74:02 - ticks like this for the entire thing
74:05 - including the variable and then to tell
74:09 - JavaScript these are all text and this
74:12 - is actually name of the variable it's
74:13 - not the string itself we use this syntax
74:17 - which is dollar sign and curly braces
74:20 - that's it and you see in webstorm itself
74:23 - that the highlighting the syntax
74:25 - highlighting changed so this is treated
74:29 - as a variable so it's value will be
74:32 - extracted and this is treated as the
74:34 - normal string again let's save go back
74:36 - and we have the same result okay now
74:39 - this whole thing here is a fully
74:41 - functioning logic that we wrote in
74:44 - JavaScript that takes whatever total
74:47 - prices and calculates the shipping cost
74:49 - based on that and then outputs it in the
74:52 - console now imagine if we really had an
74:55 - e-commerce application we would have
74:58 - thousands or tens of thousands of users
75:00 - maybe and everyone will be shopping in
75:04 - their own shopping cart and adding items
75:08 - so we would actually need to calculate
75:11 - this for every single purchase they make
75:15 - on our e-commerce application so this
75:19 - logic this whole thing May repeat in our
75:22 - application code multiple times and
75:26 - imagine we had 10 different places where
75:29 - this calculation needs to be done and we
75:31 - would have to basically replicate this
75:34 - code in 10 different places throughout
75:37 - our application code that seems like a
75:39 - very inefficient way of coding right
75:42 - because we're repeating the same thing
75:45 - 10 times like I explained with variables
75:47 - where we use the same value multiple
75:49 - times except in this case it's even
75:51 - worse because we're repeating the the
75:53 - entire code block multiple
75:56 - times and that's where functions come in
76:00 - so you can think of a function as kind
76:04 - of a variable reference so just like we
76:07 - saved a certain value once in a variable
76:11 - and then we reference that variable
76:13 - every time we needed to grab that value
76:16 - the same way we can save an entire code
76:19 - Block in a function and then whenever we
76:22 - need that code block or that logic we
76:24 - can reference it by using the function
76:27 - name so I'm going to put this entire
76:29 - code block including the assignment to
76:33 - total price variable inside a function
76:36 - and the Syntax for that is actually
76:38 - super easy what we do is just like with
76:42 - variables we have VAR or let or const
76:45 - keyword with functions we have one
76:48 - keyword called
76:51 - function then then we have the name of
76:54 - the function which is usually
76:56 - descriptive that describes whatever that
76:58 - code logic that the function references
77:01 - actually does in our case let's call
77:03 - this calculate shipping cost because
77:06 - that's what the code block does right
77:11 - calculate shipping cost and note at the
77:15 - end of the function name we have this
77:17 - brackets opening and closing brackets
77:20 - and after that we have curly braces and
77:23 - these curly braces will basically
77:25 - contain the block the code block that
77:28 - function references so if I take this
77:32 - whole thing and paste it in here and
77:36 - there you go we have just created or
77:40 - declared a function and know this
77:43 - indentation right here so with this
77:45 - curly braces we're telling JavaScript
77:48 - that this is the start of the function
77:50 - code block and this is the end so
77:52 - whatever is between those curly braces
77:54 - is the code block or logic that will get
77:58 - executed whenever we reference this
78:01 - function name and just like here we have
78:04 - this indentation here we have the entire
78:07 - function body indented and webstorm
78:09 - actually handles the indentation so we
78:12 - don't have to fix anything now you
78:15 - probably also notice this underlines
78:17 - here this orange underline again
78:20 - webstorm is helping us understand some
78:23 - improvements that we could make to our
78:26 - code so this is not an error this would
78:29 - actually work however there is a room
78:31 - for improvement and let's say as a
78:34 - beginner you see these underlines and
78:36 - you hover over it and you see this
78:39 - description like implicitly declared and
78:41 - you're thinking I don't know what that
78:43 - means so I don't know how to fix that
78:45 - warning another really cool thing that
78:48 - webstorm has that I have used
78:50 - extensively in my programming projects
78:53 - is kind of an Autos suggest for the fix
78:57 - so what you can do is whenever you see
78:59 - this kind of underline you can
79:02 - use this shortcut that you see right
79:04 - here which on MacBook is option enter
79:08 - with the mouse inside that code block
79:10 - that needs to be fixed I'm going to do
79:13 - option enter you see that webstorm
79:16 - actually gives you suggestions to how to
79:18 - fix that so I'm going to choose the
79:20 - first one and let's see what happens
79:23 - there you go so you see the warning was
79:25 - about the variable shipping cost not
79:28 - being declared and webstorm
79:30 - automatically edit the Declaration in
79:32 - the
79:34 - code so let's put it here and there you
79:38 - go we have no warnings no errors and we
79:41 - just added an improvement to our code
79:44 - now since we didn't change any values
79:46 - the output of this function should be
79:48 - the same now let's save this code and
79:51 - let's see what happens when we switch to
79:53 - the browser let's see what we see there
79:56 - so I'm going to switch to the browser
79:58 - and you see we have an empty output so
80:01 - what happened here you see we have an
80:03 - empty output so this line of code
80:07 - obviously didn't get executed because we
80:09 - don't see the sentence in the console
80:11 - output so what happened here we have
80:14 - exactly the same code as before this
80:17 - time just in a function and that is a
80:19 - very important concept about functions
80:22 - that you need to understand as a
80:24 - beginner in programming that just like
80:26 - with variables we declare the variable
80:29 - which means we save the value into the
80:33 - variable reference and then later at
80:35 - some point we use that variable the same
80:38 - way we first declare the function or we
80:42 - create the function and we assign
80:44 - whatever code block logic to it and then
80:48 - later we can use that function or code
80:51 - block inside that function to execute
80:54 - the logic that means function
80:56 - declaration itself does not execute the
80:59 - code it just saves whatever code you put
81:01 - inside the function block and you also
81:04 - see webstorm actually highlighting this
81:07 - function name as gray and if I hover
81:10 - over it it says unused function so we
81:14 - have declared the function but we're not
81:16 - using it and using a function is also
81:18 - called in programming calling a function
81:22 - and the way to call a function is
81:26 - function name and the brackets and you
81:29 - see the color of the function name
81:31 - changed and it doesn't say unused
81:33 - function anymore so now let's save this
81:36 - and see the output in the browser if I
81:39 - switch back you see that function code
81:41 - was executed and we see the result right
81:45 - here and the great thing is now whenever
81:48 - we need this entire code block to
81:50 - execute we simply need to
81:54 - call the function with the name and
81:56 - that's it so let's say there was some
81:58 - logic
82:01 - here and somewhere down here we need
82:04 - that logic executed
82:06 - again we simply call the function and
82:09 - now it's going to execute same code
82:11 - block for that function
82:14 - call and by the way this is a Syntax for
82:18 - comments so whenever you start a line in
82:21 - JavaScript with Slash two times you also
82:25 - see the color is gray whatever you type
82:27 - in
82:31 - here this tells JavaScript that this is
82:33 - not a code that needs to be executed
82:36 - this is simply a comment a self note for
82:39 - yourself or for your programming
82:42 - colleagues which usually is used to
82:45 - document the logic that you write in the
82:47 - function if it's not understandable just
82:51 - from the code so let's clean this up and
82:53 - let's see another very interesting
82:56 - concept of
83:01 - functions now we know that the total
83:04 - price is a dynamic value so every time
83:08 - customers are shopping that value will
83:11 - be different so we can't hardcode it
83:13 - here instead it will always be different
83:17 - for each purchase of each customer so we
83:20 - need to use a different value each time
83:23 - we calculate the shipping cost that
83:25 - means we have to remove it from here and
83:28 - when we do that you see automatically
83:30 - this warning from webstorm that tells us
83:33 - this variable is not declared anywhere
83:36 - there is nowhere in the code where we're
83:38 - setting a value for this variable which
83:41 - means we're referencing a variable that
83:43 - doesn't exist that we haven't created so
83:46 - we need to do both first we need to
83:48 - create a variable and then we have to
83:50 - assign some value to that so so let's
83:52 - say at the beginning we have this
83:56 - variable total
83:58 - price which is a simple Declaration of
84:02 - the variable we're not assigning a value
84:04 - to it because the value will be
84:06 - dynamically set when a user gets on our
84:10 - platform and starts
84:14 - shopping right so let's say we have some
84:17 - logic here that basically tracks the
84:19 - user behavior on a platform let's say a
84:22 - shopping cart and user is putting the
84:25 - stuff in the shopping
84:26 - cart
84:28 - and the total price of whatever user is
84:32 - purchasing is now let's say €1 and the
84:36 - user
84:37 - continues
84:39 - shopping adding more
84:43 - items and total price gets to €1 19 for
84:47 - example and then at some point the
84:50 - customer is ready
84:53 - to order they have everything they need
84:56 - and now they want to basically pay and
84:59 - place the order for all the items so
85:01 - when that happens we want to calculate
85:04 - the shipping cost and again imagine this
85:07 - is all code in our application we have
85:10 - tons of logic and at some point we are
85:13 - calling the calculate shipment cost
85:15 - function to calculate the cost based on
85:19 - the total price for the customer so we
85:22 - want to do is we want to give that total
85:24 - price as input to our calculate shipping
85:28 - cost function which in programming is
85:31 - also called passing a value to a
85:34 - function as a parameter as an input
85:37 - parameter and that is also super easy we
85:40 - basically take the value or in this case
85:43 - variable that references the value and
85:46 - pass it between those brackets as an
85:49 - input parameter to the function and now
85:53 - you understand what the brackets are
85:55 - there for for a function when we have no
85:58 - input parameters that we're passing to a
86:00 - function then the brackets are empty or
86:03 - we can pass in one two or 10 parameters
86:06 - within those brackets and then on the
86:09 - function definition we need to
86:11 - explicitly say this function is
86:14 - expecting a parameter an
86:17 - input so whenever someone either us the
86:21 - same engineer who declar the function or
86:23 - your teammates other Engineers who also
86:26 - want to use the same function they know
86:28 - oh this function is expecting a
86:30 - parameter which is total price so I need
86:32 - to pass that input because otherwise
86:35 - obviously it can't do its job because
86:37 - the total price value will not be set
86:40 - and to do that we Define that in the
86:43 - function
86:44 - definition like this just the name of
86:48 - the variable and this is another very
86:52 - important
86:53 - thing these two names do not have to be
86:56 - the same so we're going to call this
86:58 - let's call this total
87:01 - price param or parameter so this is a
87:04 - variable reference to this value that
87:08 - we're passing here and obviously that's
87:11 - what we need to use in our logic within
87:14 - our function and something that is very
87:17 - helpful to understand this concept is
87:18 - that when we call this function with
87:22 - value 19 passed in as total price
87:27 - variable what happens in the background
87:29 - in the function execution is the
87:33 - following this variable is created
87:35 - within the function with a value 19
87:39 - that's exactly what happens in the
87:41 - background when we pass a parameter to a
87:45 - function So within the function that is
87:47 - created as a variable with that value
87:49 - assigned and now we can use that
87:51 - variable
87:52 - within the function block wherever we
87:54 - need that value and we don't need to do
87:57 - that because it happens in the
87:58 - background and this is our complete
88:01 - logic so now the total price is dynamic
88:05 - it's calculated somewhere else in our
88:07 - application code whenever user is adding
88:10 - stuff to the shopping cart and when they
88:13 - click on check out or ready to order or
88:15 - whatever then we are calling this
88:18 - function and passing the total price as
88:21 - a parameter so this will be calculated
88:24 - and we can even add another console log
88:27 - here with our shortcut and
88:31 - say for
88:33 - total price
88:39 - of whatever the total price is I'm going
88:42 - to save this go back to the browser and
88:47 - there you go our logic is fully
88:51 - functional
88:56 - now let's do one final Improvement to
88:58 - our shipping cost calculation logic and
89:01 - let's say once a year in our company in
89:04 - our e-commerce company we change the
89:07 - shipping costs so last year it was five
89:11 - as a standard shipping cost and for
89:13 - little bit discounted version we had
89:15 - three but this year we want to increase
89:17 - those prices because of inflation or
89:20 - whatever so in this case the engineers
89:23 - or us in this case need to change the
89:26 - code to update the shipping cost values
89:30 - and we may be using these two values in
89:34 - other parts of the application as well
89:36 - for different logic like here we're
89:38 - doing the shipping cost calculation
89:40 - maybe we have a logic for discounts and
89:43 - these values are used there as well or
89:45 - in the checkout logic or in the payment
89:48 - function and so on so if these values
89:51 - change because of our company policy we
89:53 - need to go to our application find every
89:56 - single JavaScript file and code block
89:59 - where this is hardcoded and we need to
90:02 - update them and again this is a perfect
90:04 - case for using variables for values that
90:08 - are referenced in multiple different
90:10 - places and that may change at some point
90:13 - now in this case this is not a variable
90:15 - that changes in the program like the
90:17 - total price for example it's not a
90:20 - dynamic value it's a Val that changes
90:23 - less frequently and whenever that
90:25 - happens we manually have to update it in
90:28 - the code and those are variables that we
90:31 - usually Define with const keyword so
90:35 - that means right here we're going to
90:37 - create two variables for the standard
90:40 - shipping cost and the discounted one and
90:43 - we're going to call that exactly that
90:45 - standard shipping
90:48 - cost let's say we raised it to six 6 and
90:53 - we have
90:56 - discounted shimy cost which is
91:00 - 4 and as I explained the difference
91:04 - between these two is that the variables
91:06 - that are defined as const or
91:09 - constant those values cannot be changed
91:13 - programmatically you can only go here
91:15 - and update the value but the program
91:18 - itself cannot change it so JavaScript
91:20 - will not allow it so for for example
91:22 - somewhere in the code right here if I
91:25 - was like let's set it to seven whatever
91:28 - you see this error that says attempting
91:31 - to assign to constant or read only
91:34 - variable so this is not going to
91:36 - work which again prevents accidental
91:40 - rewrite of the variables and now we can
91:42 - reference the
91:46 - constants in our application logic and
91:50 - this is another very important Concept
91:53 - in programming especially when we're
91:55 - writing functions that as you see we
91:59 - started with a lot of hardcoded values
92:01 - and then step by step we remove them and
92:04 - now almost everything in our logic is
92:07 - referenced as variables and we don't
92:10 - have many hardcoded values here and this
92:13 - is a best practice in programming in
92:15 - general so now let's test our
92:17 - application again and let's say here the
92:20 - user started shopping they decided maybe
92:24 - we're ready to check out so we
92:26 - calculated shipping cost they remembered
92:29 - they forgot one item so they continued
92:30 - shopping eded that in the shopping cart
92:33 - now they ready to check out and we
92:35 - calculate the shipping cost again so in
92:37 - the first case we're at €10 which means
92:40 - they're paying the standard shipping
92:42 - cost as we have defined in our logic
92:44 - here with 19 they see discounted
92:47 - shipping cost
92:49 - so they will get charged the disc
92:51 - discounted shipping cost and when they
92:53 - see that they think you know what I
92:55 - would like to save myself that shipping
92:56 - cost entirely so I'm going to add one
92:59 - more item to my shopping cart to qualify
93:03 - for a free shipping with zero cost so
93:06 - here they add one more
93:14 - item that brings the total price to
93:18 - let's say
93:20 - 24
93:22 - they will see the new shipping cost
93:25 - calculated which should be zero and here
93:30 - they place the
93:32 - order so let's save our logic and see
93:36 - the output and to differentiate between
93:39 - the outputs let's actually add like a
93:42 - decoration line kind of thing which
93:45 - basically outputs something like this or
93:49 - a
93:50 - divider just just a visual divider for
93:52 - us in the console log so let's save it
93:55 - go back and there you go shipping cost
93:59 - is six for the total price of 10 then we
94:02 - have four discounted one and here with
94:06 - 24 we are at free
94:10 - shipping and one final note that I want
94:13 - to make is you probably ask yourself
94:16 - about the variable and function names
94:18 - what you see here is called chemel case
94:22 - so you basically start with a lowercase
94:24 - character and then every other word that
94:27 - you add in the name is capitalized like
94:30 - this and this is a standard naming
94:33 - convention for functions and variables
94:35 - in JavaScript specifically know that
94:37 - different programming languages have
94:38 - their own different conventions that
94:41 - means you can name these actually
94:43 - whatever you want you can
94:47 - do this or you can do underline
94:52 - like this all of this will work because
94:54 - there are variable names you can name
94:56 - them as you wish however in JavaScript
94:59 - this camel case naming is a standard and
95:02 - with that congratulations you have
95:05 - completed the entire JavaScript crash
95:08 - course you have learned tons of very
95:11 - important Concepts that are the main
95:14 - building blocks of any programming
95:16 - language out there and you have a good
95:19 - basic understanding of JavaScript
95:24 - however this is just the beginning there
95:27 - are way more exciting and interesting
95:29 - things awaiting in the JavaScript world
95:32 - and generally in the software
95:33 - development world if you want to
95:35 - continue and really dive into this world
95:38 - of programming and the best most fun way
95:42 - to do this will be with our software
95:45 - engineering mini Boot Camp or what we
95:48 - also call an IT beginners course and I
95:50 - will be more than happy to continue
95:53 - teaching you there in it beginners
95:55 - course we're going to dive in deeper
95:57 - into the web development you're going to
95:59 - learn JavaScript Frameworks for
96:01 - front-end development and for backend
96:03 - development you're going to learn how to
96:05 - build proper websites with database
96:07 - connection and tools for managing
96:10 - dependencies of an application learn
96:13 - about HTTP requests and protocols as
96:16 - well as how to take the web application
96:18 - you just created and deploy it on a
96:21 - simple virtual server on a cloud
96:24 - platform learn about firewall
96:26 - configurations operating system commands
96:29 - and if any of these Concepts sound
96:32 - completely foreign to you and sound very
96:34 - difficult trust me you will learn all of
96:37 - this with the simplest explanations and
96:40 - examples that I use throughout the
96:42 - entire course to make this Learning
96:44 - Journey for you as simple and fun as
96:47 - possible so at the end of our software
96:49 - engineering miniot camp once you have
96:52 - learned all of this you will have a
96:55 - solid knowledge equivalent to a junior
96:58 - software engineer so absolutely make
97:00 - sure to check out our software
97:02 - engineering mini boot camp in the video
97:04 - description or directly linked here in
97:06 - the video and hope to see you there with
97:09 - that thank you for watching and see you
97:12 - in the next video