00:00 - so in this video I'm going to show you
00:01 - how to configure different build tools
00:03 - in Jenkins so the development flow
00:06 - usually looks like this so you develop
00:08 - your application and now using Jenkins
00:10 - you want to build and package that
00:13 - application as an artifact
00:15 - so in order to build the application in
00:17 - the package you need some kind of build
00:19 - tool depending on which technology which
00:22 - language you use you are going to need a
00:24 - different build tool for example the
00:26 - four main tools that I've used commonly
00:29 - in projects and there some more but this
00:31 - four main are maven and Gradle four
00:34 - beckon applications like if you're
00:36 - developing your java application you
00:38 - probably use one of those and if you
00:40 - have a JavaScript application then you
00:42 - are going to be using either NPM or yarn
00:45 - so for example if you have front-end in
00:47 - JavaScript you will build it using NPM
00:49 - or yarn and back-end you will build it
00:52 - using maven on Gradle and you will need
00:55 - at least one of those build tools in
00:58 - your Jenkins build configuration because
01:01 - Jenkins bill has to run these commands
01:02 - so how does it work how does Jenkins
01:05 - allow you to use these build tools some
01:13 - of these tools are available or
01:15 - installed in Jenkins out of the box the
01:18 - rest of them you have to install as
01:21 - plugins and configure them so the first
01:23 - step that you need to do is to go to the
01:27 - Jenkins configuration and check whether
01:30 - your tool is already there out of the
01:32 - box if it is you just use it if not you
01:35 - go to the plugins you install it go back
01:38 - to the configuration and then you
01:40 - configure it once you have that already
01:42 - in a Jenkins configuration you can
01:43 - actually use it and the usage depends on
01:45 - what type of built of Jenkins use I'm
01:48 - going to show you example of using two
01:51 - of these tools actually in Jenkins file
01:53 - so let's actually go ahead and check it
01:56 - on Jenkins so the step one I said you
01:59 - need to go to Jenkins manage engines and
02:02 - global tool configurations that's where
02:04 - all the tools are configured here you
02:07 - can see the list of the out-of-the-box
02:09 - available tools so if I scroll here I
02:12 - see I have Gradle
02:13 - and I have maven which is already
02:16 - configured for me and I have docker what
02:19 - I don't have here is NPM or yarn so what
02:23 - I'm gonna do now is I'm gonna create an
02:25 - example
02:26 - Jenkins pipeline using a demo
02:29 - application that I have and this demo
02:30 - application that I have uses Gradle and
02:32 - yarn to build back-end and front-end
02:35 - respectively which means I don't need
02:37 - the maven installation radishes here I
02:39 - only need Grail from here and in
02:41 - addition to that I will need yarn and by
02:43 - the way when below the task of the tool
02:46 - you have this button button with
02:48 - installations dot the dot that means
02:50 - there is at least one of that
02:52 - installation configured if not you have
02:55 - to add one and to see how it looks like
02:57 - this is maven installations and I have
03:00 - one so if I hover here this is one
03:03 - installation of version three six three
03:06 - which is installed directly from Apache
03:08 - so from internet so how this
03:12 - configuration works is we can see it on
03:14 - Gradle example if I do add Gradle I just
03:17 - give it a name whenever I want and here
03:20 - I choose the version actually I'm gonna
03:22 - go with the latest one you can also fix
03:25 - it a different version if your project
03:26 - needs that and Jenkins will install that
03:30 - tool automatically for me I don't have
03:32 - to go and install that on a Jenkins
03:34 - server or whatever Jenkins does
03:36 - automatically form which is extremely
03:38 - convenient and this is basically the
03:41 - type of installer so if you see here the
03:43 - button it installer one of the options
03:46 - is installed from Gradle torg which is
03:48 - what I have by default here so I'm gonna
03:51 - leave it at that and that's it
03:54 - Gradle is configured I can use Gradle
03:57 - now in my Jenkins file right so I I can
04:02 - save that but as I showed you I don't
04:04 - have n PM or yarn installed
04:08 - in order to do that I go to manage
04:11 - plugins go to available there is a
04:14 - specific NPM plug-in as well and PM
04:17 - pipeline plug-in the way I do this is
04:19 - I'm gonna install in nodejs
04:21 - plug-in which will give me the NPM as
04:24 - well so install so I'm gonna install
04:30 - that success and after I restart my
04:32 - Jenkins because you need to restart it
04:35 - so that the plug-in changes take effect
04:38 - now if I go to global tool configuration
04:42 - I should see the no J's in the list so
04:48 - I'm gonna add nodejs
04:49 - and the project demo project that I'm
04:52 - using actually works with the older no
04:56 - J's version it has some backwards
04:58 - compatibility problem issues so I'm
05:02 - gonna fix a the no J's version to 10:17
05:06 - so that's the version that the
05:08 - application works on and here's the part
05:11 - where you can automatically like in
05:14 - addition to Jenkins automatically
05:16 - installing the no J's with this version
05:17 - you can make it install global packages
05:21 - maintain packages and yarn is one of the
05:24 - NPM packages so if I write a yarn here
05:28 - it's gonna install that automatically as
05:30 - well so I'm gonna give it a name let's
05:33 - call it node there is a common practice
05:35 - to name the installation with the
05:39 - version because if you have multiple of
05:41 - them you want to differentiate between
05:42 - node 1 no 2 so you can do something like
05:46 - this 17 like this and you can also fix 8
05:54 - the version of NPM packages and I'm
05:57 - gonna need that as well because again my
05:59 - app doesn't work with the latest yarn
06:01 - version so I'm gonna fix that it like
06:04 - this that's a syntax for it it it
06:06 - actually says here in the description
06:08 - and the yarn version I need is 113 0 and
06:13 - I'm gonna save that so now when I create
06:18 - a pipeline I should have both Gradle and
06:21 - yarn available
06:22 - so I'm gonna create that pipeline it's
06:25 - gonna be my Nemo project
06:30 - multi-branch pipeline so that's my
06:40 - repository I have the credentials
06:43 - already configured and I'm gonna build
06:48 - only master
06:50 - so let's master here and it's gonna scan
06:55 - the project for master and the Jenkins
06:58 - file and I don't have a drink as well in
06:59 - the master branch so let's go and create
07:02 - some very super simple Jenkins file just
07:05 - to demonstrate the usage of these two
07:07 - tools
07:10 - so here I'm gonna create a jenkees file
07:12 - so this is a very basic pipeline syntax
07:17 - that has two stages we run front-end or
07:22 - we build front-end and we build the
07:23 - backend and if you want to learn the
07:25 - details of it jenkees file syntax I have
07:28 - other videos about it so you can check
07:30 - them out so the plan is to use yarn
07:33 - command in the first step where we build
07:36 - the front-end and to use Gradle in the
07:39 - second step so the way to do that is
07:41 - using following syntax and this is
07:44 - called wrapper of those tools that we've
07:46 - configured so the the wrapper is no J's
07:50 - it's not called and here I have to
07:53 - provide the name of that installation
07:56 - which I don't remember actually so let's
07:58 - go back and check that so no J's
08:06 - installations and that's the name I'm
08:08 - gonna copy that and you have to provide
08:11 - it here so it knows that you are using
08:14 - that installation of node in here we
08:19 - create a block and the way you can run
08:22 - these commands is using SH so the shell
08:26 - command for windows you would use bench
08:29 - if your Jenkins is executing on a
08:31 - Windows node and here in this command I
08:34 - can already use yarn so imagine this is
08:37 - your command line for Jenkins and you
08:40 - have yarn installed so I'm gonna do a
08:42 - yarn I'm just gonna do yarn install just
08:45 - to demonstrate that the command is there
08:47 - so again a wrapper of that installation
08:52 - and inside of that I can execute yarn
08:54 - comments so if I have a second command I
08:56 - can do yarn build whatever and here
09:01 - we're gonna use the Gradle command and
09:03 - the wrapper for that is with Gradle
09:07 - which doesn't take anything as a
09:10 - parameter so it's just with Gradle and
09:12 - inside of that block we are gonna
09:14 - execute another shell command and it's
09:18 - gonna be Gradle W so the wrapper
09:23 - commends because it sound like project
09:25 - is set up so we're just gonna print out
09:27 - the version of Gradle so for now jsut
09:30 - have to provide the name of the
09:31 - installation for with Gradle upper you
09:33 - don't so I'm gonna commit that okay so
09:39 - you see the master branch is scanning
09:43 - jenkees file was found and if I go to
09:45 - this one here it's building master if I
09:54 - go inside let's actually check the
09:57 - console output and here you see that
10:00 - yarn is executing so yarn installed and
10:04 - this is a version that we provided 117
10:07 - zero and yarn install is running and now
10:12 - the Gradle - be version command ran and
10:16 - output the Gradle so basically they just
10:19 - this just proves that those build tools
10:22 - were installed by Jenkins automatically
10:25 - with the versions that I specified and
10:28 - the commands rein successfully so
10:31 - obviously the same way you can use maven
10:33 - and npm as well so for example here
10:36 - since we have no J's which has NPM
10:38 - already installed instead of yarn you
10:41 - would just use NPM comments now there's
10:43 - an alternative to using those tools
10:46 - without the wrapper you may have seen it
10:49 - already in the jenkees file syntax there
10:51 - is an attribute called tools and inside
10:54 - that you can configure which tools you
10:57 - are gonna be using in a Jenkins file so
11:00 - it works the same as a wrapper however
11:03 - that tools plug-in or the tools
11:05 - attribute supports only three tools by
11:09 - now and these three tools are maven
11:11 - Gradle and JDK so the way I can use it
11:13 - is I'm gonna define cradle here so Jake
11:16 - is knows I need Gradle and the side I'm
11:19 - gonna have to define then the Gradle
11:22 - installation that I have configured in
11:24 - Jenkins so this will be the installation
11:31 - name so this one right here so I have to
11:35 - configure that so basically these
11:38 - indicates to Jenkins I want to use
11:41 - Gradle in my Jenkins file please go and
11:43 - fetch me the Gradle configuration that
11:47 - I've configured in the global tool
11:50 - configuration and now using that
11:52 - definition I can use Gradle commands
11:54 - without the wrapper so I can remove this
11:56 - and this should work as well so let's
12:00 - actually update this and I'm gonna scan
12:08 - my project go to master and see that
12:12 - it's building let's see okay so it's
12:17 - built and it ran so if I see the logs it
12:22 - locked the version so I guess my
12:26 - preferred way is to do it like this so
12:30 - all the tools that are supported using
12:32 - this tools attribute I'm gonna use them
12:34 - right like this because the steps part
12:36 - will be cleaner without the wrappers and
12:38 - for the rest you're just gonna have to
12:40 - use the wrapper like this so that's how
12:44 - you configure build tools and use them
12:46 - in Jenkins thanks for watching the video
12:48 - I hope it was helpful and if it was
12:50 - don't forget to like it if you want to
12:52 - be notified whenever a new video comes
12:54 - out then subscribe to my channel if you
12:57 - have any questions if something wasn't
12:59 - clear in the video please post them in a
13:01 - comment section below and I will try to
13:03 - answer them so thank you and see you in
13:06 - the next video