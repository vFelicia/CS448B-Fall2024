00:00 - [Music]
00:05 - so so far we have seen a couple of basic
00:09 - docker commands we have seen dr. pool
00:11 - which pulls the image from the
00:13 - repository to local environment we also
00:17 - saw run which basically combines docker
00:20 - pool and docker start pulls the image if
00:24 - it's not locally available and then
00:26 - starts it right away then we saw dock a
00:29 - start and a stop which makes it possible
00:34 - to restart the container if you made
00:37 - some changes and you want to create a
00:39 - new version which makes possible to
00:43 - restart the container if you need to we
00:45 - also saw docker run with options the one
00:49 - option that we saw was D minus T which
00:53 - is detach so you can run the container
00:56 - djay detached mode so you can use
00:58 - terminal again - P allows you to bind
01:02 - port of your host to the container so
01:06 - very important to remember - P then
01:11 - comes the port of your host and then
01:14 - comes the port of your container
01:16 - whatever it might be we also saw dr. PS
01:22 - dr. PS - a which basically gives you all
01:26 - the containers no matter if they're
01:28 - running currently or not we also saw
01:31 - docker images which gives you all the
01:33 - images that you have locally so for
01:36 - example if after a couple of months you
01:39 - decide to clean clean up your space and
01:42 - get rid of some stale images you can
01:46 - actually check them check the list and
01:48 - then go through them and delete them you
01:50 - can do the same with stale docker
01:53 - containers that you don't use anymore or
01:55 - you don't need it anymore you can also
01:56 - get rid of them so the final part of the
01:58 - docker basic commands are commands for
02:01 - troubleshooting which are very very
02:03 - useful if something goes wrong in the
02:04 - container you want to see the locks of
02:07 - the container or you want to actually
02:09 - get inside of container get the terminal
02:12 - execute some comments on it so let's see
02:16 - dr. PS we have two containers running
02:18 - right now we don't have any output we
02:21 - don't see any logs here so let's say
02:23 - something happens your application
02:26 - cannot connect to Redis and you don't
02:28 - know what's happening so ideally you
02:31 - would want to see what logs
02:34 - Ready's container is producing right the
02:37 - way to do that is very easy you just say
02:39 - docker locks and you specify the
02:41 - container ID and you see the locks you
02:46 - can also do the lock logs if you don't
02:48 - want to remember the container ID or to
02:52 - dr. PS all the time you can remember the
02:54 - name of the container and you can get
02:57 - the logs using the name so a little side
03:01 - note here as we're talking about the
03:03 - names of the containers so here is you
03:06 - see when a container is created you just
03:08 - get some random name like this so you
03:10 - can name your containers as you want
03:13 - using another option of the docker run
03:16 - which might be pretty useful sometimes
03:19 - if you don't want to work with the
03:20 - container IDs and you just want to
03:22 - remember the names or if you just want
03:25 - to differentiate between the containers
03:27 - so for example let's create a new
03:31 - container from readies for the old image
03:34 - using a different name that we choose so
03:37 - I'm gonna stop this container and I'm
03:42 - going to create a new one from the same
03:45 - image so let's run it in the detached
03:49 - mode let's open the port 2000 1 2 6 3 7
03:57 - 9 and give the name to the container and
04:03 - let's go since it's the older version
04:06 - let's call it Redis older and we need to
04:11 - specify the image so remember this will
04:14 - create a new container since we're
04:17 - running the docker 1 command again so if
04:22 - we execute this and check
04:25 - we see the readies for the O image-based
04:30 - container is created which is fresh new
04:35 - you can see I created and the name is
04:37 - ready solder and we can do the same for
04:41 - the other container so that we kind of
04:45 - know which container is what so to stop
04:49 - this one and I will use the same command
04:55 - here this will be the latest and I will
04:58 - call this readies latest and since find
05:04 - another port so I'm gonna run it and
05:07 - let's see so here I have two containers
05:12 - running now I know
05:13 - Ready's older readies latest so for
05:15 - example if the older version has some
05:19 - problems I can just do logs readies
05:22 - older and I can get my locks so another
05:29 - very useful command in debugging is
05:32 - docker exec so what we can do with
05:36 - docker exec is we can actually get the
05:39 - terminal of a running container so let's
05:42 - check again we have two containers
05:43 - running and let's say there is some
05:47 - problem with the latest Redis latest
05:50 - container and I want to get a terminal
05:53 - of the container and - maybe navigate a
05:56 - directory inside check the lock file or
06:00 - maybe check the configuration file or
06:02 - print out the environmental variables
06:05 - whatever so in order to do that we use
06:08 - docker exit command with minus T which
06:12 - stands for interactive terminal then I
06:15 - specify the container ID and I say in
06:20 - flash so I get that - and here you see
06:24 - that the cursor changed so I'm inside of
06:28 - the container as a root user
06:32 - and here if I say LS okay the data is
06:35 - empty I can also print out in which
06:37 - directory I am
06:38 - can go to the home directory see what's
06:41 - there so I have my virtual file system
06:44 - inside of a container and here I can
06:47 - navigate the different directories and I
06:50 - can check stuff I can also print all the
06:52 - environmental variables to see that
06:54 - something is set correctly
06:57 - and do all kinds of stuff here and this
07:02 - could be really useful if you have a
07:06 - container with some complex
07:08 - configuration or if for example you are
07:11 - running your own application that you
07:13 - wrote in a container and you have some
07:16 - complex configuration there or some kind
07:19 - of setup and you want to validate that
07:21 - everything is correctly set in order to
07:26 - exit the terminal use the exit and
07:29 - you're out you can also do the same
07:34 - using the name again if you don't want
07:37 - to work with the IDs and you just want
07:39 - to remember the names of the container
07:42 - to make easier you can do it we the name
07:45 - is well same thing since most of the
07:49 - container images are based on some
07:51 - lightweight linux distributions you
07:54 - wouldn't have much of the linux commands
07:58 - or applications installed here for
08:00 - example you wouldn't have curl or some
08:02 - other stuff so you were a little bit
08:05 - more limited in that sense so you can
08:07 - execute a lot of stuff from the docker
08:10 - containers for most of the debugging
08:12 - work it should be actually enough so the
08:19 - final part to review the difference
08:22 - between lock run and docker start which
08:24 - might be confusing for some people let's
08:27 - revisit them so basically docker run is
08:31 - where you create a new container from an
08:35 - image so docker run will take an image
08:38 - with a specific version or just latest
08:41 - right as a option or as an attribute
08:44 - with docker start you not working with
08:49 - images but rather with
08:50 - Tanner's so for example as we saw the
08:54 - Quran has a lot of options you specify
08:56 - with minus D and minus P the port
08:59 - binding and then you have this name of
09:01 - the container and all this stuff so
09:04 - basically you tell docker at the
09:08 - beginning what kind of container with
09:11 - what attributes name and so on to create
09:14 - from a specific image but once the
09:18 - container is created and you can see
09:21 - that using a command for example here
09:25 - the last ones that we created and if you
09:28 - stop it and you want to restart it you
09:30 - just need to use the command docker
09:33 - start and specify the container ID and
09:36 - when you started the container will
09:39 - retain all the attributes that we
09:42 - defined when creating the container
09:44 - using docker run so dr. Ron is to create
09:49 - a new container
09:50 - toku start is to restart a stopped
09:53 - container thanks for watching the video
09:56 - I hope it was helpful and if he was
09:58 - don't forget to like it this is a video
10:00 - series so I will create a new one every
10:02 - week so if you want to be notified
10:04 - whenever a new video comes out then
10:07 - subscribe to my channel if you have any
10:10 - questions if something wasn't clear in
10:11 - the video please post them in the
10:13 - comment section below and I will try to
10:15 - answer them so thank you and see you in
10:18 - the next video