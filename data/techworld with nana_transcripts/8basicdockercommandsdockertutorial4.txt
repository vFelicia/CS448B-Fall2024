00:00 - [Music]
00:06 - so in this video I'm gonna show you some
00:09 - basic doc recommends at the beginning
00:11 - I'm gonna explain what the difference
00:13 - between container and image is because
00:15 - that's something a lot of people confuse
00:16 - then very quickly go through version
00:19 - intake and then show you a demo of how
00:21 - to use the basic docker comments
00:24 - commands that will be enough to pull an
00:26 - image locally to start a container to
00:28 - configure a container and even debug the
00:31 - container so with that said let's get
00:34 - started so what is the difference
00:37 - between container and image mostly
00:40 - people use those terms interchangeably
00:42 - but actually there is a fine difference
00:44 - between the two to see theoretically
00:48 - image is just the part of the container
00:51 - runtime so container is the running
00:55 - environment for an image so as you see
00:58 - in this graphic the application image
01:02 - that runs the application could be
01:04 - Postgres Reddy's some other application
01:08 - needs let's say a file system where it
01:12 - can save the log files or where it can
01:15 - store some configuration files it also
01:17 - needs some environmental configuration
01:19 - like environmental variables and so on
01:23 - so all this environmental stuff are
01:26 - provided by container and container also
01:30 - has a port that is binded to it which
01:33 - makes it possible to talk to the
01:36 - application which is running inside of a
01:38 - container and of course it should be
01:42 - noted here that the file system is
01:44 - virtual in the constant container so the
01:46 - container has its own abstraction of an
01:50 - operating system including the file
01:52 - system and the environment which is of
01:55 - course different from the file system
01:56 - and environment of the host machine so
02:00 - in order to see the difference between
02:02 - container and image in action let's head
02:05 - over to the talker hub and find
02:10 - example a Redis image another thing is
02:14 - that docker hub all the artifacts that
02:17 - are in the docker hub are images so
02:20 - we're not talking about containers here
02:22 - all of these things are images talker
02:24 - official image so we're gonna go ahead
02:27 - and pull a Redis image out of the docker
02:31 - hub to my laptop so you see the
02:36 - different layers of the image are
02:39 - downloaded and this will take a couple
02:45 - of minutes so once the download is
02:49 - complete I can check all the existing
02:53 - images on my laptop using docker images
02:56 - command so I see I have two images
02:59 - readies and Postgres with text image IDs
03:04 - and so on another important aspect of
03:09 - images is that they have texts or
03:13 - versions so for example if we go back to
03:16 - the dock hub each one each image that
03:19 - you look up in the docker hub will have
03:22 - many different versions the latest is
03:26 - always the one that you get when you
03:28 - don't specify the version of course but
03:31 - if you have a dependency on a specific
03:35 - version you can actually choose the
03:38 - version you want and specified you can
03:40 - select one from here so this is what you
03:44 - see here the tag is basically the
03:46 - version of the image so I just
03:49 - downloaded the latest and I can also see
03:52 - the size of the image so now to this
03:55 - point we have only worked with images
03:59 - there is no container involved and
04:01 - there's no Redis running so now let's
04:05 - say I need readies running so that my
04:08 - application can connect to it I'll have
04:10 - to create a container of the Redis image
04:13 - that will make it possible to connect to
04:18 - the Redis application and I can do it by
04:21 - running
04:22 - the Redis image so if I say docker run
04:26 - Redis this will actually start the image
04:32 - in a container so as I said before
04:34 - container is a running environment of an
04:37 - image so now if I open a new tab and do
04:42 - docker PS I will get stairs of all the
04:48 - running
04:49 - docker containers so I can see the
04:51 - container radius is running with a
04:53 - container ID based on the image of Redis
04:57 - and some other information about it
05:00 - for example the port that it's running
05:03 - on and so on so as you see here the
05:08 - docker run readies command will start
05:11 - the race container in the terminal in an
05:14 - attached mode so for example if I were
05:16 - to terminate this with a control C you
05:22 - see that Redis application stops and the
05:25 - container will be stopped as well so if
05:28 - I do docker PS again I see that no
05:30 - container is running so there is an
05:36 - option for docker run command that makes
05:43 - it able makes it possible to run the
05:45 - container in a detached mode and that is
05:47 - minus D so if I do docker run - t Redis
05:51 - I will just get the ID of the container
05:55 - as an output and the container will stop
05:58 - running so if we check again docker PS I
06:01 - see the container with the ID starting
06:05 - with 8 3 8 which is the same thing here
06:08 - is running so this is how you can start
06:13 - it in a detached mode now for example if
06:16 - you would want to restart a container
06:19 - because I don't know some the
06:21 - application crashed inside or some error
06:24 - happens so you want to restart it you
06:28 - would need the container ID so just the
06:32 - first part of it not the whole string
06:35 - and you can simply say doctor stop idea
06:40 - of the container and that will stop the
06:42 - docker container I think running if you
06:45 - want to start it again you can use the
06:48 - same ID to start the game so let's say
06:58 - you stopped docker container at the end
07:03 - of the day you go home you come back the
07:05 - next day open your laptop and you want
07:08 - to restart the stop container right so
07:12 - if you do dr. PS there is the output
07:15 - it's empty you don't see any containers
07:17 - so what you can do alternative to just
07:20 - looking up your history command-line
07:22 - history is you can do docker PS - a
07:26 - which will show you all the containers
07:29 - which are running or not running so here
07:34 - you see the container ID again and you
07:36 - can restart it okay so let's try another
07:43 - thing let's say you have two parallel
07:47 - applications that both use Redis but in
07:51 - different versions so you would need to
07:53 - read ease containers with different
07:56 - image versions running on your laptop
08:00 - right at different times maybe or at the
08:03 - same time so so here we have the latest
08:09 - one which is ready
08:13 - 5:06 and let's head over to the docker
08:17 - hub in select version let's say you need
08:21 - version 4.0 so remember the first time
08:28 - that we downloaded the Redis image we
08:30 - did dr. pol Redis however if you run
08:34 - docker if you use docker run with Redis
08:39 - image and the tech which was 4.0 it will
08:43 - pull the image and start the container
08:46 - right away after it so it does
08:49 - two commands basically in one so it's
08:52 - dr. pol that doctor start in one comment
08:55 - so if I do this it says it can find the
08:59 - image locally so it goes and pulls the
09:02 - image from the repository to my laptop
09:05 - and again we see some layers are
09:10 - downloaded and the container is started
09:13 - right away
09:13 - and now if I do dr. PS you see that I
09:19 - have two radiuses running so this is
09:23 - where it gets interesting now how do you
09:27 - actually use the any container that you
09:30 - just started so in this output we you
09:33 - also see the ports section which
09:36 - specifies on which port the container is
09:39 - listening to the incoming requests so
09:43 - both containers open the same port which
09:46 - is what was specified in the image so in
09:52 - the logs of the container you can see
09:55 - the information running mode standalone
09:57 - port six three seven nine so how does
10:01 - that actually work and how do we not
10:04 - have conflicts while both are running on
10:06 - the same port so to explain that let's
10:08 - head over to our slide and see how this
10:11 - works
10:12 - as you know container is just a virtual
10:15 - environment running on your host and you
10:18 - can have multiple containers running
10:20 - simultaneously on your host which is
10:23 - your laptop PC whatever you working on
10:26 - and your laptop has certain poe ports
10:30 - available then you can open for certain
10:32 - applications so how it works is that you
10:36 - need to create a so-called binding
10:39 - between a port that your laptop your
10:42 - host machine has and the container so
10:46 - for example in the first container part
10:49 - here you see container is listening on
10:52 - port 5000 and you bind your laptop's
10:56 - port 5000 to that containers now you
11:00 - will have conflict if you open
11:03 - to 5,000 ports on your hosts because you
11:07 - will get a message the port is already
11:09 - bound or is already in use you can do
11:12 - that however you can have two containers
11:17 - as you see in the second and third
11:19 - containers are both listening on port
11:22 - 3000 which is absolutely okay as long as
11:25 - you bind them to two different ports
11:30 - from your host machine so once the port
11:33 - binding between the host and the
11:34 - container is already done you can
11:36 - actually connect to the running
11:38 - container using the port of the host so
11:42 - in this example you are I you would have
11:44 - some F local host and then the port of
11:47 - the host and the host then we'll know
11:51 - how to forward the request to the
11:53 - container using the port binding so if
11:57 - we head back here you see that
12:01 - containers have their ports and their
12:04 - report running on the same one however
12:06 - we have made any binding between my
12:09 - laptop's ports and the container port
12:12 - and because of that the container is
12:14 - basically unreachable by any application
12:17 - so I won't be able to use it so the way
12:20 - we actually do that is by specifying the
12:25 - binding of the ports during the run
12:27 - command so I'm gonna break this and
12:30 - check that there is just one container
12:33 - running no I'm gonna stop the other one
12:37 - as well so we can start them in you okay
12:40 - so we see both containers are here so
12:45 - now we want to start them using the
12:48 - binding between the host and the
12:51 - container ports but again we have to
12:55 - read is's so we need to bind them to two
12:58 - different ports on my laptop so the way
13:01 - to do it is you do docker run and you
13:05 - specify with - P the port of the host
13:09 - that's the first one so let's go with
13:14 - 6000 it doesn't really
13:16 - in this case and the second one is the
13:20 - port that you're binding this tube which
13:22 - is the container port so we know the
13:24 - container port will be six three seven
13:28 - nine and this is where we bind our so my
13:32 - laptop's port 6002 and if I do this here
13:41 - so you know if I do
13:43 -  PS that's actually clean this
13:50 - here you see the binding here alright so
13:55 - your laptop's 6,000 port is bound to the
13:59 - containers six three seven nine so now
14:05 - let's do another thing and let's start
14:08 - it in a detached mode like this let's
14:14 - check again it's running again and now I
14:18 - want to start the second container
14:20 - that's clear this again so here you see
14:30 - it created a bunch of containers because
14:32 - when I specified different options with
14:36 - the port binding it actually created new
14:38 - containers that's why you see a couple
14:41 - of them over here so I'm gonna copy the
14:44 - image name with the tag for that o- p so
14:52 - for example if I were to do this now and
14:56 - I would try to run the other readies the
15:03 - second readies container with the same
15:06 - port on my laptop I would get an error
15:10 - saying port is already allocated so I
15:13 - can do six thousand one and run it again
15:18 - I'll run it in detached mode
15:23 - and if I go over here and say docker PS
15:28 - I see that i have two different Redis
15:32 - versions running both of them bound to
15:35 - different ports on my laptop and they
15:39 - the containers themselves listening to
15:42 - requests on the same port thanks for
15:45 - watching the video I hope it was helpful
15:46 - and if it was don't forget to like it
15:49 - this is a video series so I will create
15:51 - a new one every week so if you want to
15:53 - be notified whenever a new video comes
15:55 - out then subscribe to my channel if you
15:58 - have any questions if something wasn't
16:00 - clear in the video please post them in
16:02 - the comment section below and I will try
16:04 - to answer them so thank you and see you
16:07 - in the next video