00:00 - so now that we have our Jenkins set up
00:03 - we're gonna create a multi branch
00:06 - pipeline so the first step is we're
00:08 - gonna go to create new jobs or you can
00:10 - also use new item and create let's say
00:16 - pipeline and here the types of projects
00:21 - or builds that you can create and one of
00:23 - them here is multi branch pipeline so
00:27 - I'm gonna create this one and it opens
00:30 - the configuration options so let's go
00:34 - through some of these options so the
00:38 - first one is just a metadata name and
00:40 - description and branch source is
00:44 - basically the project which it's gonna
00:47 - build so here we're gonna add our gig
00:50 - project I have some demo projects which
00:53 - I'm gonna use and I'm just gonna just
00:59 - clone the URL of my project another
01:05 - thing that I need to configure here is
01:07 - which branches I want to build so this
01:10 - pipeline is multi branch so it allows me
01:14 - to build multiple branches with the same
01:16 - configuration so here I'm gonna say that
01:19 - I want to discover branches using
01:22 - regular expression and this is a Java
01:25 - regular expression so this one the
01:27 - default one right here means that it
01:29 - matches every branch so right now I just
01:32 - have two branches which is master and
01:36 - DEF and if I leave it like this
01:38 - it basically gonna build every branch
01:41 - that I have so if I were to add a new
01:43 - branch here like a feature branch it's
01:45 - gonna build that one as well so another
01:47 - part of build this build configuration
01:49 - is that is gonna build from jenkins file
01:53 - and this is just default configuration
01:56 - which we're going to leave as it is and
01:58 - the rest of it we're gonna leave for now
02:00 - as well now obviously it can connect to
02:03 - the git repository without credentials
02:05 - so what we need here is we need the
02:10 - username and password for this git
02:13 - repository
02:13 - so that Jenkins could check the code out
02:16 - of that git repository so in order to do
02:20 - that let's actually look at what
02:22 - credentials are in Jenkins and how to
02:24 - create and use them
02:29 - okay so let's go back to the main view
02:32 - of Jenkins and look at the credentials
02:35 - option in the sidebar so this is
02:39 - actually a plug-in that we installed and
02:42 - this is a pretty recent plug in addition
02:45 - to Jenkins so basically now Janie's
02:48 - offers a way to store and manage
02:51 - credentials centrally so instead of
02:54 - having it distributed across different
02:57 - plugins for different services you can
03:00 - create them in one place and then use
03:02 - that or reference it in different places
03:05 - including your projects Jenkins file so
03:08 - let's actually go inside and see that by
03:11 - default we just have one scope which is
03:13 - Jenkins go this is a global one and you
03:15 - have one domain under it so if I click
03:19 - here then I can go inside a domain and I
03:22 - see that I have no credentials so let's
03:25 - create one and here we see that we have
03:31 - two different scopes
03:32 - and this is important distinction here a
03:35 - system credential in Jenkins is
03:38 - basically available only for Jenkins
03:41 - server so for example if you're a
03:43 - Jenkins administrator that administers
03:46 - the Jenkins server that does all the
03:48 - administrative work for example
03:51 - configures Jenkins communication or
03:54 - interface with other services etc you're
03:57 - gonna create a system credential because
04:00 - system credential is not visible or
04:03 - accessible by Jenkins jobs for examples
04:06 - of in our pipeline we wouldn't see the
04:09 - Jenkins system credential the global
04:12 - credential however is accessible
04:14 - everywhere it's accessible to the
04:17 - janki's administrators and all the build
04:19 - jobs pipelines all shops so everything
04:23 - across Jenkins so that's the scope of
04:26 - the credential and then there is a type
04:28 - of credential the most commonly used one
04:31 - is username and password but of course
04:34 - you can also have other types so you can
04:38 - have a certificate you can have a secret
04:41 - file secret text
04:43 - if Jenkins needs to connect to some
04:46 - other services it might be using a
04:48 - secret file and not a username and
04:51 - password so I have different options
04:53 - here and also note that depending on
04:56 - what other plugins you have installed in
04:59 - Jenkins you might get new types of
05:02 - credentials so a new Jenkins plug-in
05:05 - might actually come with its own type of
05:07 - credential for example github I think
05:10 - has its own github user access token
05:13 - type so we're gonna use the username and
05:17 - password and I'm gonna actually create
05:19 - the global credential in the so username
05:26 - and password is obvious and the ID is
05:29 - very important here because this is how
05:31 - you're gonna reference credentials
05:34 - everywhere so in your build job or in a
05:37 - Jenkins file so this is an important one
05:40 - this is a handle to your credential so
05:43 - to say and I'm gonna create that one and
05:45 - I'm gonna create another one is system
05:49 - variables so I'm gonna call it system so
05:58 - now I have two of them and if I go back
06:02 - to my pipeline so note here this is very
06:06 - important as well so you have the
06:07 - credentials option here on the main page
06:10 - of Jenkins and if we go inside the newly
06:13 - created my pipeline you also see a
06:16 - credentials button here so what that is
06:19 - is basically a third scope so we just
06:22 - saw a system scope global scope and now
06:25 - this is a third scope and this scope is
06:28 - basically limited to your project and
06:31 - this comes only with the multi branch
06:33 - pipeline so other job types do not have
06:35 - this and this actually comes from a
06:38 - folder plugin so folder plug-in is
06:40 - basically for organizing your build jobs
06:43 - in folders and this enables you to have
06:46 - credentials scoped to your project so it
06:51 - means that if I create a pro credentials
06:53 - here in this scope so
06:57 - really again let's go here you see here
06:59 - we're not in Jenkins credentials but we
07:01 - are in Jenkins my pipeline credentials
07:04 - and here in this domain if I create
07:07 - credentials here and let's actually use
07:09 - username password I don't have a scope
07:11 - here anymore
07:12 - because it scoped to this pipeline so
07:16 - I'm gonna actually call it my pipeline I
07:26 - mean the names are pretty stupid but
07:29 - it's good for demonstrating the
07:32 - accessibility so I'm gonna create that
07:33 - one and if I go back to credentials I
07:38 - see that I have two credentials
07:42 - available for these projects for my
07:44 - pipeline so the global one that we
07:47 - created and my pipeline scope that we
07:51 - created so the system credential is not
07:54 - accessible for this project or for any
07:57 - other projects and this is a pretty good
08:00 - way to organize your credentials but
08:02 - also separate them so if we have for
08:05 - example a very complex very big
08:09 - deployment projects or we have two teams
08:11 - that have their own projects on the same
08:13 - Jenkins you can actually hide the
08:16 - credentials between the projects so each
08:20 - one will have their own credentials that
08:23 - will not be visible by others so for
08:26 - example we can actually see that as well
08:29 - so if I create another multi pipeline
08:32 - project and see here I only see the
08:38 - global credential that I created in a
08:43 - global scope but I don't see the my
08:45 - pipeline credentials here because it's
08:47 - only visible for my pipeline project so
08:53 - let's delete it and go back here so
08:57 - remember in config we still have to
09:00 - configure the credentials for the git
09:04 - repository so I'm gonna create in my
09:07 - pipeline scope so
09:10 - here my pipeline scope let's actually
09:13 - delete this one I don't need this and
09:16 - I'm gonna create here a username
09:18 - password for my git repository and I'm
09:22 - gonna call it what is this demo app its
09:31 - credentials or something which was
09:36 - created and now if I go back to my
09:39 - configuration so first of all I have it
09:42 - here this is the idea that we gave this
09:44 - is the reference to it so now if I
09:51 - actually refresh this and copy it again
09:57 - and if I click here I have all the
10:01 - available credentials to select from so
10:04 - the global one is here and one in my
10:06 - pipeline scope is also there so I'm
10:09 - gonna choose the correct one and I'm
10:12 - gonna save it so it's gonna build right
10:15 - away off her skin and then build so here
10:19 - you see that it's connected to the
10:22 - repository and it checked the branches
10:26 - but I didn't find Jenkins file in any of
10:28 - the branches because I don't have it yet
10:30 - and you didn't build anything so as the
10:34 - next step we're gonna create a Jenkins
10:37 - file in our repository but before that
10:40 - we're gonna see how to explicitly
10:41 - configure which branches of our
10:44 - repository we want to be built so let's
10:46 - see that
10:48 - so by default as you see the pipeline
10:51 - will scan all the branches that I have
10:53 - in the repository there is no limitation
10:55 - but in some cases you don't want to
10:58 - build all the branches let's say you
11:00 - have master and develop branches let's
11:04 - actually go and see our branches and
11:07 - let's say you have a lot of feature
11:09 - branches and you have a lot of bug fix
11:11 - branches but you don't want to build all
11:13 - of them with every commit maybe just
11:17 - want to build the dev branch and mast
11:19 - branch and some feature branches but you
11:22 - never want to build bug fix branches so
11:25 - how do you actually configure that in
11:27 - your pipeline so the way to do that is
11:30 - in discover branches section here you
11:34 - just say filter by name and by default
11:38 - as we saw it scans all the branches so
11:40 - this is actually a Java regular
11:42 - expression and this one here means that
11:45 - it's going to match any character 0 or
11:47 - many times so here we're gonna delete
11:51 - that one and we're gonna explicitly say
11:53 - that we want dev branch or master branch
11:57 - or feature branches right but future
12:01 - branches have different names so we're
12:04 - gonna add a regular expression here so
12:06 - we're gonna match any character after
12:08 - feature any number of times and since
12:11 - it's a Java a regular expression we can
12:13 - actually it start off line and end of
12:16 - line characters as well so this
12:18 - expression will not match any bug fix
12:22 - branches if they start with the name
12:24 - puck or bug fix for example so let's
12:28 - actually test that I'm gonna save it and
12:31 - it's a game kind of skin master and if
12:34 - now let's actually add a new branch
12:37 - called
12:38 - feature branch let's call it test or
12:43 - feature 1 whatever create branch and
12:48 - let's also create a bug one
12:53 - so now we have these branches and using
12:56 - a regular expression should match only
12:59 - these three and do not match bug so if I
13:03 - do skin multi branch pipeline now and I
13:08 - go to see the lock I see that master
13:11 - branch was skinned feature one in depth
13:16 - so that's how you decide explicitly
13:19 - which branches you want to be built
13:21 - using this a multi branch pipe line so
13:25 - you can exclude or include branches as
13:28 - you wish so now as you see in the skin
13:33 - locks it checks the branches but it
13:35 - doesn't find Jenkins file in any of them
13:37 - and it does nothing so let's go ahead
13:40 - and create a jenkins file in dev branch