00:00 - [Music]
00:06 - so once you've learned the docker basic
00:09 - concepts and understood how it works
00:11 - it's important to see how docker is
00:13 - actually used in practice so in software
00:16 - development workflow you will know you
00:17 - have this classical steps of development
00:21 - and continuous delivery or continuous
00:23 - integration and then eventually it gets
00:26 - deployed on some environment right it
00:27 - could be a test environment develop
00:29 - environment so it's important to see how
00:31 - docker actually integrates in all those
00:34 - steps so in the next couple of videos
00:36 - I'm gonna concentrate exactly on that so
00:39 - we're gonna see some overview of the
00:41 - flow and then we're going to zoom in on
00:44 - different parts and see how docker is
00:46 - actually used in those individual steps
00:50 - so let's consider a simplified scenario
00:53 - where you are developing a JavaScript
00:55 - application on your laptop right on your
00:57 - local development environment your
01:00 - JavaScript application uses a MongoDB
01:05 - database and instead of installing it on
01:08 - your laptop you download a docker
01:10 - container from the docker hub so you
01:13 - connect your JavaScript application with
01:15 - the MongoDB and you start developing so
01:18 - now let's say you develop the
01:20 - application first version of the
01:22 - application locally and now you want to
01:24 - test it or you want to deploy it on the
01:27 - development environment where a tester
01:31 - in your team is gonna test it so you
01:34 - commit your JavaScript application in
01:36 - git or in some other version control
01:39 - system that will trigger a continuous
01:43 - integration a Jenkins build or whatever
01:46 - you have configured and Jenkins build
01:49 - will produce artifacts from your
01:51 - application so first you will build your
01:55 - JavaScript application and then create a
01:58 - docker image out of that javascript
02:01 - artifact right so what happens to this
02:04 - docker image once it gets created by a
02:07 - Jenkins build it gets pushed to a
02:11 - private docker repository so
02:13 - usually in a company you would have a
02:16 - private repository because you don't
02:18 - want other people to have access to your
02:20 - images so you push it there and now as
02:23 - the next step could be comes configured
02:27 - on Jenkins or some other scripts or
02:29 - tools that docker image has to be
02:34 - deployed on a development server so you
02:37 - have a development server that pulls the
02:39 - image from the private repository your
02:42 - JavaScript application image and impulse
02:45 - the MongoDB that your JavaScript
02:48 - application depends on from a docker hub
02:50 - and now you have two containers one your
02:53 - custom container and a publicly
02:56 - available
02:57 - MongoDB container running on them on dev
03:00 - server and they talk to each other you
03:02 - have to configure it of course they talk
03:04 - and communicate to each other and run as
03:07 - an app so now if a tester for example or
03:10 - another developer logs in to a dev
03:14 - server maybe they will be able to test
03:17 - the application so this is a simplified
03:20 - workflow how docker will work in a real
03:23 - life development process in the next
03:26 - videos I'm gonna show you hands-on demo
03:29 - of how to actually do all this in
03:31 - practice thanks for watching the video I
03:33 - hope it was helpful and if it was don't
03:35 - forget to like it this is a video series
03:37 - so I will create a new one every week so
03:40 - if you want to be notified whenever a
03:42 - new video comes out then subscribe to my
03:44 - channel if you have any questions if
03:47 - something wasn't clear in the video
03:48 - please post them in a comment section
03:50 - below and I will try to answer them so
03:52 - thank you and see you in the next video