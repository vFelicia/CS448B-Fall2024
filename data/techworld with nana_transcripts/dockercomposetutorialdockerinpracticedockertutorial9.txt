00:00 - [Music]
00:11 - so in the last video we created and
00:14 - started two docker containers mongodb
00:16 - and mong express and these are the
00:18 - commands that we used to make it happen
00:20 - right the first we created a network
00:23 - where these two containers can talk to
00:25 - each other using just the container name
00:27 - and no host port etc is necessary for
00:30 - that
00:32 - and then we actually ran two docker run
00:34 - commands with all the
00:36 - options environmental variables etc
00:39 - set
00:40 - now
00:42 - this
00:43 - way of starting containers all the time
00:45 - is a little bit tedious and you don't
00:47 - want to execute these run commands all
00:49 - the time on the command line terminal
00:51 - especially if you have a bunch of docker
00:54 - containers to run
00:56 - uh you probably want to automate it or
00:58 - just make it a little bit
01:00 - easier
01:01 - and there's a tool that's that makes
01:03 - running multiple docker containers with
01:05 - all this configuration much easier than
01:08 - with docker run commands and that is
01:10 - docker compose if you already know the
01:13 - compose and you are wondering why is it
01:15 - useful and what it actually does then
01:18 - bear with me in the next slide i'm going
01:19 - to explain that
01:22 - so this is a docker run command of the
01:24 - mongodb that we executed and previously
01:28 - so basically with docker compose file
01:31 - what we can do is we can
01:34 - take the whole
01:36 - command with its configuration and map
01:38 - it into a file so that we have a
01:41 - structured commands
01:43 - so if you have let's say 10 docker
01:45 - containers that you want to run for your
01:47 - application and they all need to talk to
01:49 - each other and interact with each other
01:51 - you can basically write all the run
01:53 - commands for each container in a
01:55 - structured way in the docker compose and
01:57 - we'll see how that structure actually
01:59 - looks like
02:00 - so on the right side in the docker
02:03 - compose example the first two takes are
02:07 - always there right version
02:09 - three that's the
02:10 - latest version of the compose
02:12 - docker compose and then we have the
02:14 - services this is where the container
02:16 - list goes so the first one is mongodb
02:19 - and that maps actually to the container
02:21 - name right this is going to be a part of
02:23 - container name when docker creates a
02:26 - container out of this configuration
02:28 - blueprint
02:29 - the next one is actually the
02:33 - image
02:34 - right so we need to know which image
02:36 - that container is going to be built from
02:38 - and of course you can specify a version
02:40 - tag here
02:41 - next to the name
02:43 - the next one is port
02:45 - so we can also specify which ports is
02:48 - going to open first one is on the host
02:51 - and the second one after the colon is on
02:54 - the container
02:56 - so the port mapping is there
02:58 - and of course the environmental
03:00 - variables can be also mapped in the
03:02 - docker compose and this is how actually
03:05 - the structure of docker compose looks
03:07 - like for one specific commands let's
03:09 - actually see the second
03:11 - container command for express that
03:14 - we executed
03:15 - and
03:16 - how to map that so now again we have a
03:18 - docker run command for express and
03:21 - let's see how we can map it into a
03:23 - docker compose
03:24 - so as i said services will list the
03:27 - containers that we want to create
03:30 - and again
03:32 - names
03:33 -  express will map to the container
03:36 - name
03:37 - the next one will be the image
03:39 - again you can add a tag here if you want
03:42 - to be um have a specific one
03:45 - then you have the
03:47 - ports 80 to 80 to 8080
03:51 - and then you have all the environmental
03:53 - variables again
03:55 - under the attribute environment
03:58 - and this is how the docker compose will
04:00 - look like
04:01 - so basically docker compose is just a
04:03 - structured way to contain very normal
04:07 - common docker commands and of course
04:09 - it's it's going to be easier for you to
04:11 - edit the the file if you want to change
04:15 - some variables or if you want to change
04:17 - the ports if you
04:18 - want to add some new options um to the
04:22 - run command so to say
04:24 - and maybe you already noticed
04:26 - the network configuration is not there
04:28 - in the docker compose so this
04:30 - network that we created we don't have to
04:32 - do it in a docker compose we go to the
04:35 - next slide
04:37 - because we have the same concept here
04:40 - we have containers that will talk to
04:43 - each other using just the container name
04:46 - so what docker compose will do is
04:48 - actually take care of creating a common
04:51 - network for these containers
04:54 - so we don't have to create the network
04:56 - and specify in which network these
04:58 - containers will run in
05:00 - and we're going to see that in action
05:02 - right away
05:08 - so let's actually create a docker
05:10 - compose file
05:12 - so i'm gonna paste all my contents here
05:15 - and this is exactly what we saw on the
05:17 - slides
05:18 - and i'm gonna save it as a
05:22 - yaml
05:25 - and we see the highlighting as well be
05:27 - very aware of the indentation they have
05:29 - to be correct so this is the list of all
05:32 - the
05:33 - containers on the same level and then
05:36 - each container has its configuration
05:39 - inside that
05:41 - so now compared to docker run commands
05:43 - it will be very easy for me to go here
05:45 - and change these environment variables
05:47 - or add some new
05:49 - configuration
05:50 - options etc
05:54 - so here again for demonstration we
05:56 - actually save the doctor compose in the
05:58 - code so it's part of the
06:01 - application code so now that we have a
06:03 - docker compose file the question is how
06:06 - do i use it or how do i start the
06:08 - containers using that so let's go to the
06:11 - command line and start docker containers
06:14 - using this docker compose file
06:17 - so the way to use it is using docker
06:19 - compose
06:22 - command
06:23 - now if you've installed docker on your
06:25 - laptop it usually gets
06:28 - installed
06:29 - with the docker compose packaged inside
06:32 - so you should have both docker and
06:34 - docker compose commands installed as a
06:36 - package so docker compose command takes
06:40 - an argument which is the file so i'm
06:42 - going to specify which file i want to
06:45 - execute
06:46 - and in my case it's called yemo
06:49 - and
06:50 - at the end i want to say what i want to
06:53 - do with this file in this case the
06:55 - command is up which will start all the
06:58 - containers which are in the yemo
07:01 - so let's actually check before that
07:03 - there there are no containers running so
07:05 - i don't have anything running here and
07:07 - i'm gonna start those two containers
07:19 - okay so there are a couple of
07:21 - interesting things here in this output
07:23 - so let's scroll all the way up so we've
07:25 - talked about docker network and how we
07:28 - created our own network at the beginning
07:30 - to run the containers inside and i said
07:33 - the docker compose takes care of it and
07:35 - here we see the output where it actually
07:38 - created
07:39 - a network called my app default this is
07:42 - the name of the network
07:44 - and it's going to run those two
07:46 - containers these are actually the names
07:48 - of the containers that docker compose
07:50 - created this is what we specified
07:53 - and it just added prefix and suffix to
07:56 - it and it created those two containers
07:59 - in that network so if i actually go here
08:01 - and
08:02 - do docker network
08:04 - ls
08:05 - i see
08:06 - the my app default
08:08 - is here
08:11 - so that's one important thing another
08:13 - one is the logs of both containers
08:16 - actually mixed
08:18 - because we're starting both at the same
08:20 - time
08:21 - as you see the express has to wait
08:25 - for mongodb to start because it needs to
08:28 - establish a connection so we here see
08:31 - the locks
08:32 - so mongodb is starting
08:35 - we still get connection reviews because
08:37 - it's not
08:38 - started
08:39 - completely and somewhere here when
08:42 - mongodb is started and listening for
08:45 - connections express is able to
08:47 - connect to it so this is something that
08:49 - you can also do with docker compose
08:52 - when you have two containers that where
08:54 - one depends on another one starting you
08:58 - can actually configure this waiting
09:00 - logic in the docker compose okay
09:03 - so
09:04 - now let's see actually that the docker
09:07 - containers are running so we have both
09:09 - of them
09:10 - here you see the container names that
09:12 - docker compose gave them and one thing
09:15 - here
09:16 - to note is that
09:18 - the
09:19 -  express actually started on port
09:22 - 8081 inside the container so we can see
09:25 - that here
09:27 - so we are
09:28 - opening a port 8080 on my laptop that
09:32 - actually forwards the request to
09:34 - container at port 8081 just so that you
09:37 - don't get confused because
09:38 - it was 8080 on the slides
09:41 - so now that we have restarted the
09:44 - containers let's actually check the
09:46 - first one which is
09:47 -  express
09:51 - so it's running on 8080.
09:54 - in the previous example we created a
09:56 - database and the collection which is
09:59 - gone because we restarted the container
10:02 - this is actually another very important
10:04 - concept of containers to understand
10:07 - when you restart a container everything
10:09 - that you configured in that container's
10:12 - application is gone so data
10:15 - is lost so to say there is no data
10:18 - persistence in the containers itself
10:21 - of course that is very um inconvenient
10:24 - you want to have some persistence
10:26 - especially when you're working with the
10:28 - database and there is a concept we're
10:30 - going to learn later in this tutorial
10:32 - series called volumes
10:35 - that makes it possible to have
10:37 - persistency between the container
10:40 - restarts okay
10:42 - so let's actually create the database
10:44 - again because we need it
10:47 - and inside the database we had actually
10:49 - users collection let's create that one
10:52 - as well and that is empty
10:54 - now let's actually start our application
11:05 - and there you go
11:07 - so now if i were to modify this one
11:12 - here and update i should see the updated
11:16 - entry here so the connectivity with
11:19 - mongodb works so now what do i do if i
11:22 - want to stop those containers
11:25 - of course i could go there and say
11:27 - docker stop and i can provide all the
11:30 - ids as we did previously or with docker
11:33 - compose it's actually easier
11:35 - i can do docker compose
11:38 - again
11:39 - specify the file
11:41 - and instead of up
11:43 - i'm going to say down
11:45 - and that will go through all the
11:46 - containers and shut them all
11:49 - and
11:50 - in addition to removing the containers
11:52 - or stopping them removing the containers
11:54 - it also removes the network
11:57 - so the next time we restart it
12:00 - it's going to recreate so let's actually
12:02 - check that token network
12:04 - ls
12:05 - that default
12:07 - my app default network is gone and
12:10 - when i do up
12:14 - see it gets recreated that should give
12:17 - you a good idea of what docker compose
12:19 - is and how to use it
12:21 - in the next video we're gonna build our
12:24 - own docker image from our node.js
12:27 - javascript application
12:29 - thanks for watching the video i hope it
12:30 - was helpful and if it was don't forget
12:32 - to like it this is a video series so i
12:35 - will create a new one every week so if
12:37 - you want to be notified whenever a new
12:39 - video comes out then subscribe to my
12:41 - channel um if you have any questions if
12:44 - something wasn't clear in the video
12:46 - please post them in the comment section
12:47 - below and i will try to answer them so
12:50 - thank you and see you in the next video