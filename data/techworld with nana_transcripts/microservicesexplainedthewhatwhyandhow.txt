00:00 - in this video i'm going to talk about
00:02 - microservices
00:04 - first i'm going to start by explaining
00:06 - what a monolith application architecture
00:08 - is
00:09 - what were some of the challenges of a
00:11 - monolith architecture and why the
00:13 - industry moved slowly towards the
00:16 - microservices architecture then we will
00:18 - see what microservices or microservice
00:21 - architecture is exactly as well as best
00:24 - practices benefits and how the
00:27 - communication between microservices
00:29 - actually works we will also see
00:31 - different ways to manage code for
00:34 - microservices application and talk about
00:37 - monorepo versus polyrepo and advantages
00:40 - and disadvantages of both so let's get
00:43 - started before microservices the
00:45 - standard way of developing applications
00:48 - was with a monolithic architecture this
00:50 - means all the components of the
00:52 - application
00:54 - the whole code basically is part of a
00:56 - single unit for example if we had an
00:59 - online shop application all of its parts
01:02 - like the user authentication shopping
01:05 - cart product catalog sales campaigns
01:08 - notification and so on all the code for
01:11 - these functionalities would be in one
01:14 - code base as part of one monolithic
01:17 - application
01:18 - everything is developed deployed and
01:20 - scaled as one unit this means the
01:23 - application must be written in a single
01:25 - language with one technology stack with
01:27 - a single runtime and if you have
01:30 - different teams working on different
01:31 - parts of the application they will need
01:33 - to coordinate to make sure they don't
01:36 - affect each other's work
01:38 - also if developers change code for the
01:40 - payment functionality you would need to
01:43 - build the whole application and deploy
01:45 - it as one package you can't just update
01:48 - and deploy only the payment
01:49 - functionality changes separately so this
01:52 - was a standard way of developing
01:54 - applications but as applications grew in
01:57 - size and complexity this led to
02:00 - different challenges
02:02 - first of all the coordination between
02:03 - teams became more difficult because the
02:06 - code was much bigger and the parts of
02:08 - the application were more tangled into
02:10 - each other
02:11 - also if suddenly you had a usage spike
02:14 - in shopping cart for example on holiday
02:17 - dates and you would want to scale only
02:19 - that part of the application you can't
02:22 - do it you need to scale the whole
02:24 - application this in turn means higher
02:26 - infrastructure costs and less
02:28 - flexibility in scaling your application
02:31 - up and down another issue is for example
02:34 - if a payment functionally used a
02:36 - third-party module with a version 1.8
02:40 - while notifications featured needed the
02:42 - same module but required the version 1.7
02:45 - instead in a monolith application you
02:48 - would have to pick one or the other
02:50 - because it's a single application and
02:52 - you can only have one dependency of the
02:54 - same module another major issue with
02:56 - monolith applications is that the
02:59 - release process of
03:02 - such applications takes longer because
03:04 - for changes in any part of the
03:06 - application in any feature
03:08 - you need to test and build the whole
03:10 - application to deploy those changes and
03:13 - the answer to all these issues was a
03:16 - microservices architecture
03:18 - so what is microservices exactly
03:21 - with microservices we break down the
03:24 - application in essentially multiple
03:27 - smaller applications so we have
03:30 - several small or micro applications that
03:34 - make up this one big application now we
03:36 - have a couple of very important
03:38 - questions when we create a microservices
03:40 - architecture
03:41 - first of all how do we decide how to
03:44 - break down the application what code
03:46 - goes where and how many such micro
03:49 - applications or microservices do we
03:52 - create
03:53 - how big or small should these
03:55 - microservices be and finally how do
03:57 - these services then talk to each other
03:59 - first of all the best practice is to
04:01 - break down the application into
04:03 - components or into microservices
04:06 - based on the business functionalities
04:09 - and not technical functionalities so the
04:12 - microservices of an online shop
04:14 - application will be products shopping
04:17 - cart user accounts checkout and so on
04:20 - because all these are basically business
04:22 - features and in terms of the size each
04:25 - micro service must do just one isolated
04:28 - thing
04:29 - so you should have a micro service that
04:32 - is responsible for shopping cart logic
04:34 - and the checkout you should always
04:37 - strive to keep one service doing one
04:40 - specific job and a very important
04:42 - characteristic of each microservice is
04:45 - that they should be self-contained and
04:47 - independent from each other
04:49 - this means each service must be able to
04:51 - be developed deployed and scaled
04:54 - separately without any tight
04:56 - dependencies on any other services even
04:58 - though they are part of the same
05:00 - application
05:01 - and this is called lose coupling so with
05:04 - this best practice approach if you
05:06 - change something in the payment service
05:08 - you will only build and deploy the
05:10 - payment service
05:12 - nothing else will be affected
05:14 - and this means the services have their
05:16 - own individual versions which are not
05:19 - dependent on others so if i release one
05:22 - service i don't need to release any
05:24 - other service so the this release cycle
05:26 - has to be completely independent
05:31 - now if these services are isolated and
05:34 - self-contained how do they connect to
05:36 - each other because obviously the payment
05:39 - service will need something from the
05:41 - user account to process the payment or
05:44 - the checkout service will need something
05:45 - from the shopping cart
05:47 - a very common way for microservice
05:49 - communication is using api calls so each
05:53 - service has an endpoint on which it
05:55 - accepts requests from other services so
05:58 - services can talk to each other by
06:00 - sending each other http requests on
06:03 - these endpoints this is a synchronous
06:06 - communication where one service sends a
06:09 - request to another service and waits for
06:11 - the response so the user account service
06:14 - can send an http request to payment
06:16 - service on its api endpoint and vice
06:20 - versa another common way of
06:22 - communication between microservices is
06:25 - using a message broker with an
06:27 - asynchronous communication here services
06:30 - will send messages first to the
06:33 - intermediary message service or a broker
06:36 - such as rabbitmq for example and then
06:39 - the message broker will forward that
06:41 - message to the respective service so
06:44 - again user account will send the message
06:46 - to the broker saying please pass this
06:49 - message on to the payment service and
06:51 - message broker will then forward that
06:53 - message to the payment service
06:56 - and a third way
06:58 - of communication between microservices
07:00 - which is becoming pretty popular
07:02 - especially in the field of kubernetes is
07:05 - using a service mesh with service mesh
07:08 - you have kind of a helper service which
07:11 - takes over the complete communication
07:13 - logic so you don't have to code this
07:16 - logic into the microservices and have
07:18 - this communication logic kind of
07:20 - delegated to this external service
07:23 - so these are different communication
07:25 - options and since the services are all
07:28 - isolated and talk to each other either
07:30 - with api calls or using additional
07:33 - services you can even develop each
07:35 - service with a different programming
07:36 - language and you can have dedicated
07:39 - teams for each service that can choose
07:41 - their own technology stack and work on
07:44 - their service without affecting or being
07:46 - affected by other service teams
07:49 - and this is exactly the most important
07:53 - advantage of microservices architecture
07:56 - compared to the monolith
08:01 - however these benefits come with the
08:03 - price so while microservices made
08:06 - developing and deploying applications
08:08 - easier in many aspects it also
08:10 - introduced some other challenges that
08:13 - weren't there before when you break down
08:16 - the application into these multiple
08:18 - pieces
08:19 - this introduces a lot of complexities
08:21 - and challenges one of the main
08:23 - complexities may be configuring the
08:25 - communication part between the services
08:28 - because a micro service may be down or
08:30 - unhealthy and not responding yet while
08:33 - another service starts sending requests
08:37 - to its api expecting a fulfilled
08:39 - response in which case you may get
08:41 - unexpected results
08:43 - also with microservices deployed and
08:45 - scaled separately it may become
08:47 - difficult to keep an overview and find
08:50 - out when a microservice is down or which
08:53 - service is actually down when something
08:55 - in the application is not working
08:57 - properly
08:58 - so you definitely need a proper
09:00 - configuration of your application setup
09:02 - and its pieces to make sure your
09:04 - application as a whole
09:06 - functions well but there are various
09:09 - tools for making all this easier so even
09:11 - though the microservices architecture is
09:14 - complex there are a lot of tools and
09:16 - still more being developed regularly to
09:19 - make
09:20 - running microservices applications
09:22 - easier the most popular one you probably
09:24 - already know is kubernetes which is a
09:27 - perfect platform for running
09:29 - large microservices applications
09:32 - now before moving on i'm very excited to
09:35 - give a shout out to hashicorp which is a
09:38 - company that many of you probably
09:40 - already know about and has a lot of
09:43 - really cool technologies many of those
09:45 - that actually solve various challenges
09:48 - when working with microservices
09:50 - applications from the infrastructure
09:52 - provisioning tool terraform to the
09:54 - secret management tool
09:56 - vault which is pretty much becoming a
09:58 - standard already in the industry for
10:00 - managing and protecting your sensitive
10:02 - data
10:03 - hashicorp also has a service mesh
10:05 - product called console which helps you
10:08 - securely connect and observe your
10:10 - microservices running in any environment
10:14 - so with various tools that hashicorp
10:16 - offers you can actually provision secure
10:19 - connect and run cloud infrastructure for
10:21 - your most important applications and
10:24 - specifically for your microservices
10:26 - applications if you want to learn more
10:28 - about any of these technologies be sure
10:30 - to check out the whiteboard sessions of
10:32 - hashicorps co-founder and cto who gives
10:35 - really good introductions of all these
10:37 - technologies on youtube
10:39 - and now let's move on now obviously an
10:42 - important element of deploying
10:43 - microservices is a cicd pipeline
10:47 - in fact there are many companies with
10:49 - microservices applications that deploy
10:52 - multiple times a day companies like
10:54 - amazon google and netflix they have
10:57 - applications with hundreds of
10:59 - microservices that they deploy thousands
11:01 - of times per day
11:03 - so you can imagine the complexity and
11:06 - the sophistication of their csd
11:08 - pipelines so in the modern world and
11:10 - workplace
11:11 - you will be most probably working with
11:14 - microservices and in this case you would
11:17 - need to know how to configure release
11:19 - process
11:20 - with a cicd pipeline for microservices
11:27 - now we said microservices is when
11:29 - application components get developed and
11:31 - deployed separately as individual micro
11:34 - applications
11:35 - so the question is
11:37 - how do we manage the code
11:40 - for microservices application in a git
11:42 - repository like gitlab for example with
11:45 - one project it's simple we just have one
11:47 - application and it gets its own git
11:49 - repository with microservices
11:51 - application we have two options for how
11:54 - the code is managed monorepo which
11:57 - stands for single repository and
12:00 - polyrepo also multi-repository
12:03 - so monorepo or single repository is
12:05 - having one gitlab repository for all the
12:09 - services so we would create one project
12:12 - for a monorepo so what's the difference
12:14 - here or how do we structure multiple
12:17 - micro applications inside one
12:19 - application repository well a common way
12:22 - is using folders
12:24 - so you have folders for each service
12:27 - like shopping cart payment notifications
12:30 - etc and all the code for those services
12:33 - are in those respective folders
12:36 - and having a mono repo meaning all the
12:38 - services still in one repository makes
12:42 - the code management and development
12:44 - easier because you only have to clone
12:46 - and work with one repository so it
12:48 - simplifies things plus if you have some
12:51 - shared code between the services like
12:53 - kubernetes manifest templates or helm
12:56 - chart or docker compose whatever you can
12:59 - put them in the root of the project and
13:01 - all the services can basically reuse
13:03 - them
13:04 - but monorepo also comes with some
13:06 - challenges as i mentioned the most
13:08 - important criterion of microservices is
13:12 - to be completely independent and
13:13 - isolated so no tight coupling between
13:16 - the services inside the code and it
13:19 - becomes easy to break this criterion
13:22 - when you have a monorepo
13:24 - so you have junior developers with less
13:27 - experience in the monorepo setup it's
13:30 - easier to make such mistakes and develop
13:32 - tightly coupled
13:34 - logic or code in your services
13:37 - another downside of monorepo is when the
13:40 - application becomes really big
13:42 - cloning fetching and pushing
13:45 - becomes slow because your project is
13:47 - huge
13:48 - and in terms of the csd pipeline in most
13:51 - of the ci cd platforms like gitlab csd
13:53 - or jenkins you can only create one
13:56 - pipeline for one project so you are
13:59 - building multiple services with a single
14:01 - project pipeline and that means you need
14:04 - to add additional logic in your pipeline
14:06 - code that makes sure to only build and
14:09 - deploy the service which has changed so
14:12 - if you make code changes in the payment
14:14 - service your pipeline code should detect
14:17 - that and only that service should be
14:19 - built tested and deployed and it is
14:21 - possible to do that but it's a little
14:23 - bit more challenging one more issue with
14:26 - a monorepo is that since you have just
14:28 - one main branch because you have one
14:30 - repository
14:32 - if developers of one of the services
14:34 - break the main branch
14:36 - other services and their pipelines will
14:38 - be blocked as well but there are a lot
14:40 - of companies including very big ones
14:42 - like google who actually use monorepo
14:45 - for their applications
14:47 - the second option which is probably a
14:49 - bit more preferred one is polyrepo or
14:52 - multiple repositories
14:54 - with this approach for each service we
14:57 - create a separate git project
14:59 - so the code is completely isolated you
15:01 - can clone and work on them separately
15:04 - because they are in separate
15:05 - repositories
15:06 - now even though they are separate
15:09 - application repositories they are still
15:11 - part of this bigger application so of
15:13 - course you would want to still have some
15:16 - kind of connection of these repos for an
15:19 - easy management and overview
15:21 - so if you're hosting your code
15:23 - repositories on gitlab for example you
15:25 - can use gitlab's feature of groups
15:29 - in order to group code for all the
15:31 - microservices that belong to the same
15:33 - application in one group
15:35 - to make managing those repositories
15:37 - easier so essentially you would create a
15:40 - gitlab repository group for your
15:43 - application called my online shop
15:46 - and inside this group you can create a
15:48 - separate project for each microservice
15:51 - that belongs to that application
15:53 - if your company has multiple
15:54 - microservices applications of course
15:57 - this will help keep an overview of what
16:00 - projects belong together but also within
16:02 - the group you can actually create
16:04 - secrets or other ci variables
16:07 - that can be shared by all the projects
16:09 - in that group now what about the cicd
16:11 - pipeline for a polyrepo well for
16:14 - polyrepo the csd configuration is more
16:17 - straightforward because you just have
16:20 - own pipeline for each repository so no
16:22 - extra
16:23 - logic is needed to differentiate between
16:26 - the services now of course everything
16:28 - has advantages and disadvantages so for
16:30 - polyrepo as well you have some downsides
16:34 - like having application code in multiple
16:36 - repositories can make working on the
16:39 - project as a whole harder especially if
16:42 - you need to change two or more services
16:44 - at once because a feature or bug fix
16:47 - affects multiple services if you need to
16:49 - switch between the services often this
16:52 - can also be tedious plus things like
16:54 - searching something across multiple
16:56 - projects from the code editor can be
16:58 - difficult or impossible
17:01 - also in the polyrepo you can't really
17:03 - share files in the project like
17:05 - kubernetes or hell manifest
17:07 - docker compose and so on you would
17:10 - either have to duplicate them in each
17:12 - project's repository or have to create a
17:14 - dedicated project and reference them
17:16 - from there so as you see both options
17:19 - have their advantages and disadvantages
17:21 - but the general rule is that if you have
17:23 - a small project with just a several
17:25 - microservices you should stick to
17:27 - monorepo and save the overhead of
17:30 - creating and managing and checking out
17:33 - multiple repositories on the other hand
17:35 - if you have separate teams for each
17:37 - service if you want to have complete
17:39 - isolation smaller code base to clone on
17:43 - pipelines and so on then of course the
17:45 - polyreport would be a better option now
17:48 - i hope this gave you a great
17:49 - introduction to microservices and now
17:51 - you understand what it is and why
17:53 - everyone is using it if you're
17:55 - interested to know how to build ci cd
17:57 - pipelines for a micro service
17:59 - applications then you can check out my
18:01 - complete gitlab ci cd course in which i
18:04 - actually show
18:06 - hands-on demos of how to build ci cd
18:08 - pipelines for micro service applications
18:10 - in a mono repo as well as poly repo as
18:13 - well as deploying a micro service
18:15 - application to a kubernetes cluster and
18:17 - generally if this video was useful
18:20 - please give it a like and share with
18:21 - your colleagues and subscribe for more
18:24 - content like this with this thank you
18:26 - for watching and see you in the next
18:28 - video