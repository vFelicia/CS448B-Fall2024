00:00 - in this video we're going to go through
00:02 - the usages of a namespace and the best
00:05 - practices of when and how to use a
00:08 - namespace first of all what is a
00:15 - namespace in kubernetes increment in
00:17 - this cluster you can organize resources
00:19 - in namespaces so you can have multiple
00:22 - namespaces in a cluster you can think of
00:25 - a namespace as a virtual cluster inside
00:28 - of a kubernetes cluster now when you
00:30 - create a cluster by default kubernetes
00:33 - gives you the namespaces out-of-the-box
00:36 - so in the command line if I type cube
00:39 - city I'll get namespaces I see the list
00:41 - of those out-of-the-box namespaces that
00:44 - kubernetes offers and let's go through
00:46 - them one by one the kubernetes dashboard
00:49 - namespace is shipped automatically in
00:52 - mini cube so it's specific to mini cube
00:54 - installation you will not have this in a
00:56 - standard cluster the first one is Cube
00:59 - system cube system namespace is not
01:03 - meant for your use so basically you
01:06 - shouldn't create anything or shouldn't
01:07 - modify anything in cube system namespace
01:09 - the components that are deployed in the
01:12 - namespace are the system processes there
01:15 - are from master managing processes or
01:18 - cubes ETL etc the next one is Q public
01:22 - and what Q public contains is basically
01:25 - the publicly accessible data it has a
01:27 - config map that contains cluster
01:30 - information which is accessible even
01:33 - without authentication so if I type here
01:36 - keep CTL cluster info this is the output
01:38 - that I get through that information and
01:42 - the third one is cube node lease which
01:45 - is actually a recent addition to
01:47 - kubernetes and the purpose of the
01:49 - namespace is that it holds information
01:51 - about the heartbeats of nodes so each
01:53 - node basically gets its own object that
01:57 - contains the information about that
01:58 - nodes availability and the fourth
02:01 - namespace is the default namespace and
02:04 - default namespace is the one that you're
02:06 - going to be using to create the
02:08 - resources at the beginning if you
02:10 - haven't created a new namespace
02:13 - but of course you can add and create new
02:14 - namespaces and the way that you can do
02:17 - it is using cube CTL create namespace
02:20 - command with the name of the namespace
02:23 - so I can create my namespace and if I do
02:27 - cube CTL get namespaces I see that in my
02:31 - list now another way to create
02:33 - namespaces is using namespace
02:36 - configuration file which i think is a
02:39 - better way to create namespaces because
02:41 - you also have a history in your
02:43 - configuration file repository of what
02:46 - resources you created in a cluster okay
02:49 - so now so what namespaces are and that
02:53 - you can create new ones and that
02:55 - kubernetes offers some of them by
02:56 - default but the question is what is the
02:59 - need for namespaces when should you
03:01 - create them and how you should use them
03:04 - and the first use case of using or
03:07 - creating your own namespaces is the
03:09 - following
03:10 - imagine you have only default namespace
03:13 - which is provided by kubernetes and you
03:15 - create all your resources in that
03:17 - default namespace if you have a complex
03:20 - application that has multiple
03:22 - deployments which create replicas of
03:24 - many parts and you have resources like
03:27 - services and config maps etc very soon
03:31 - your default namespace is going to be
03:32 - filled with different components and it
03:35 - will be really difficult to have an
03:37 - overview of what's in there especially
03:39 - we have multiple users creating stuff
03:42 - inside so a better way to use namespaces
03:45 - in this case is to group resources into
03:50 - namespaces so for example you can have a
03:51 - database name space where you deploy
03:54 - your database and all its required
03:57 - resources and you can have a monitoring
04:00 - namespace where you deploy the
04:02 - primitives and all the stuff that it
04:04 - means you can also have elastic stack
04:06 - namespace where all the elasticsearch
04:09 - caba√±a etc resources go and you can have
04:13 - nginx ingress resources so just one way
04:16 - of logically grouping your resources
04:19 - inside of the cluster now according to
04:21 - the official documentation of kubernetes
04:25 - you shouldn't
04:26 - namespaces if you have smaller projects
04:29 - and up to ten users I personally think
04:33 - that it's always good idea to group your
04:37 - resources in namespaces because as I
04:40 - said even if you have a small project
04:42 - and ten users you might still meet some
04:46 - additional resources for application
04:48 - like you know logging system and
04:50 - monitoring system and even with the
04:53 - minimum setup you can already get too
04:55 - much to just throw everything in a
04:58 - default namespace another use case where
05:00 - you will need to use namespaces if you
05:02 - have multiple teams so imagine this
05:05 - scenario you have two teams that use the
05:08 - same cluster and one team deploys an
05:12 - application which is called my app
05:14 - deployment as the name of the deployment
05:16 - they create and that deployment has its
05:18 - certain configuration now if another
05:21 - team had a deployment that accidentally
05:25 - had the same name but a different
05:27 - configuration and they created that
05:30 - deployment or they applied it they would
05:33 - overwrite the first team's deployment
05:36 - and if they're using for example a
05:39 - jenkins or some automated way to deploy
05:41 - those that application or to create the
05:44 - deployment they wouldn't even know that
05:46 - they overrode or disrupted in other
05:49 - teams deployment so to avoid such kind
05:52 - of conflicts again you can use
05:54 - namespaces so that each team can work in
05:58 - their own namespace without disrupting
06:00 - the other another use case for using
06:03 - namespaces is let's say you have one
06:05 - cluster and you want to host both
06:08 - staging and development environment in
06:11 - the same cluster and the reason for that
06:12 - is that for example if you're using
06:15 - something like nginx controller or
06:17 - elastic stack used for logging for
06:20 - example you can deploy it in one cluster
06:22 - and use it for both environments in that
06:25 - way you don't have to deploy these
06:27 - common resources twice in two different
06:30 - clusters so now the staging can use both
06:33 - resources as well as the development
06:36 - environment another use case for using
06:39 - namespaces is when
06:40 - use Bluegreen deployment for application
06:42 - which means that in the same cluster you
06:45 - want to have two different versions of
06:48 - production so the one that is active
06:51 - that is in production now and another
06:53 - one that is going to be the next
06:55 - production version the versions of
06:57 - applications in those blue and green
06:59 - production namespaces will be different
07:01 - however the same as we saw before in
07:04 - staging and development this namespaces
07:07 - might need to use the same resources
07:09 - like again nginx controller or elastic
07:13 - stack and this way again they can both
07:16 - use this common shared resources without
07:19 - having to set up a separate cluster so
07:22 - one more use case for using namespaces
07:25 - is to limit the resources and access to
07:29 - namespaces when you're working with
07:31 - multiple teams so again we have a
07:33 - scenario where we have two teams working
07:35 - in the same cluster and each one of them
07:38 - has their own namespace so what you can
07:40 - do in this scenario is that you can give
07:42 - the teams access to only their namespace
07:45 - so they can only be able to create
07:48 - updates delete resources in their own
07:51 - namespace but they can't do anything in
07:54 - the other namespaces and this way you
07:56 - even restrict or even minimize the risk
07:58 - of one team accidentally interfering
08:02 - with another team's work so each one has
08:04 - their own secured isolated environment
08:07 - additional thing that you can do on a
08:09 - namespace level is limit the resources
08:12 - that each namespace consumes because if
08:14 - you have a cluster with limited
08:16 - resources you want to give each team a
08:19 - share of resources for their application
08:22 - so if one team let's say consumes too
08:26 - much resources then other teams would
08:28 - eventually have much less and their
08:30 - applications may not schedule because
08:32 - the cluster will run out of the
08:34 - resources so what you can do is that per
08:36 - namespace you can define resource quotas
08:39 - that limit how much CPU RAM storage
08:42 - resources one namespace can use so I
08:45 - hope walking through these scenarios
08:46 - helped you analyze in which use cases
08:49 - and how you should use namespaces in
08:52 - your specific project there's
08:53 - several characteristics that you should
08:55 - consider before deciding how to group
08:58 - and how to use namespaces the first one
09:00 - is that you can't access most of the
09:02 - resources from another namespace so for
09:05 - example if you have a configuration map
09:08 - in Project a namespace that references
09:11 - the database service you can't use that
09:14 - config map in project B namespace but
09:17 - instead you will have to create the same
09:19 - config map that also references the
09:22 - database service so each namespace will
09:25 - define or must define its own config
09:28 - method even if it's the same reference
09:30 - and the same applies to secret so for
09:33 - example if you have credentials of a
09:35 - shared service you will have to create a
09:37 - secret in each namespace where you are
09:40 - gonna need that however a resource that
09:43 - you can share across namespaces is
09:46 - service and that's what we saw in the
09:48 - previous slide so config map in project
09:51 - B namespace references service that is
09:54 - going to be used eventually in a pod and
09:56 - the way it works is that in a config map
09:59 - definition the database URL in addition
10:02 - to its name which is my sequel service
10:04 - will have namespace at the end
10:06 - so using that URL you can actually
10:09 - access services from other namespaces
10:12 - which is a very practical thing and this
10:15 - is how you can actually use shared
10:18 - resources like elasticsearch or nginx
10:21 - from other namespaces and one more
10:24 - characteristic is that we saw that most
10:26 - of the components resources can be
10:28 - created within the namespace but there
10:31 - are some components in kubernetes
10:33 - they're not named spaced so to say so
10:37 - basically they live just globally in the
10:40 - cluster and you can't isolate them or
10:43 - put them in a certain namespace and
10:45 - examples of such resources are volume or
10:48 - persistent volume and node so basically
10:51 - when you create the volume it's gonna be
10:52 - accessible throughout the whole cluster
10:54 - because it's not in a namespace and you
10:58 - can actually list components they are
11:00 - not bound to a namespace using a command
11:03 - cube CTL API resources - - names based
11:07 - in the same way you can also list all
11:10 - the resources that are bound to a
11:12 - namespace using namespace true so now
11:15 - that you've learned what the namespaces
11:17 - are why to use them in which cases it
11:21 - makes sense to use them in which way and
11:23 - also some characteristics that you
11:25 - should consider let's actually see how
11:28 - to create components in a namespace in
11:30 - the last example and also if you've seen
11:32 - my previous videos we've created
11:35 - components using configuration files and
11:37 - nowhere there we have defined a
11:39 - namespace so what happens is by default
11:42 - if you don't provide a namespace to a
11:44 - component it creates them in a default
11:47 - namespace so if I apply this config map
11:49 - component and let's do that actually
11:52 - right now so it keeps it a apply minus F
11:54 - config map if I apply that and I do cube
11:58 - City I'll get config map my config map
12:00 - was created in a default namespace and
12:02 - notice that even in the cube city L gets
12:05 - config map command I didn't use a name
12:08 - space because cube city L get or keep
12:11 - CTL commands they take the default
12:13 - namespace is a default so Cooper City
12:17 - I'll get config map is actually same as
12:20 - cube city I'll get config map - in or
12:22 - namespace and default namespace so these
12:25 - are the same commands it's just a
12:27 - shortcut because it takes default is a
12:29 - default namespace okay so one way that I
12:32 - can create this config map in a specific
12:34 - namespace is using cube city apply
12:37 - command but adding flag namespace in the
12:42 - namespace name so this will create
12:45 - config map in my namespace and this is
12:48 - one way to do it
12:49 - another way is inside the configuration
12:52 - file itself so I can adjust this config
12:55 - map configuration file to include the
12:58 - information about the destination
13:00 - namespace itself so in the metadata I
13:03 - can add a namespace attribute so if I
13:05 - apply this configuration file again
13:08 - using cube city I'll apply and now if I
13:10 - want to get the component that I created
13:12 - in this specific namespace then I have
13:15 - to add the option or the flag to cube
13:18 - City I'll get comment because
13:21 - I said by default it will check only in
13:23 - the default namespace so I recommend
13:26 - using the namespace attribute in a
13:28 - configuration file instead of providing
13:30 - it to the cube CTL command because one
13:34 - it's it's better documented so you know
13:37 - by just looking at the configuration
13:39 - file where the component is getting
13:42 - created because that could be an
13:43 - important information and second if
13:46 - you're using automated deployment where
13:49 - you're just applying the configuration
13:51 - files then again this will be a more
13:53 - convenient way to do it now if for
13:55 - example we take a scenario where one
13:58 - team gets their own namespace and there
14:00 - has to work entirely in the namespace it
14:03 - could be pretty annoying to have to add
14:05 - this namespace tag to every cube CTL
14:08 - command so in order to make it more
14:10 - convenient there is a way to change this
14:13 - default or active namespace which is
14:15 - default namespace to whatever namespace
14:19 - you choose and kubernetes or cube CTL
14:22 - doesn't have any out-of-the-box solution
14:24 - for that but there's a tool called cube
14:26 - NS or Cubans and you have to install the
14:30 - tool so on Mac so I'm gonna execute Brio
14:35 - install cube city X so this will install
14:40 - Cubans tool as well so once I have the
14:43 - Cubans installed I can just execute
14:47 - Cubans command and this will give me a
14:49 - list of all the namespaces and highlight
14:52 - the one that is active which is default
14:54 - right now and if I want to change the
14:56 - active namespace I can do cube ends my
15:02 - namespace and this will switch the
15:08 - active namespace so if I do cube ends
15:11 - now I see that active one is my
15:13 - namespace so now I can execute cube CTL
15:17 - commands without providing my namespace
15:19 - name space but obviously if you switch a
15:22 - lot between the namespaces this will not
15:25 - be so much convenient for your own
15:29 - operating system and environment there
15:33 - will be different
15:34 - halation process so I'm gonna link the
15:37 - cube City X installation guide in the
15:39 - description below
15:40 - thanks for watching the video I hope it
15:41 - was helpful and if it was don't forget
15:43 - to like it if you want to be notified
15:45 - whenever a new video comes out then
15:48 - subscribe to my channel if you have any
15:51 - questions if something wasn't clear in
15:52 - the video please post them in a comment
15:54 - section below and I will try to answer
15:56 - them so thank you and see you in the
15:59 - next video