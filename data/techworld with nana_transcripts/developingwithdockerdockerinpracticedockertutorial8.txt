00:00 - [Music]
00:06 - so in this video we are going to look at
00:09 - some practical example of how to use
00:10 - docker in a local development process so
00:14 - the prerequisites before you get started
00:15 - with this video is you have to
00:17 - understand some basic concepts of docker
00:19 - and you have to know some of the basic
00:21 - commands so if you don't you can check
00:24 - out my videos where I cover both the
00:26 - concepts and the comments and then you
00:28 - can come back to this video so what
00:31 - we're gonna do is a simple demo of a
00:33 - JavaScript and node.js application in
00:36 - the backend to simulate the local
00:38 - development process and then we're gonna
00:39 - connect it to a docker container with a
00:42 - MongoDB database in it so let's get
00:45 - started so in this video we're gonna see
00:50 - how to work with docker containers when
00:53 - developing applications so the first
00:55 - step will be is we're gonna develop a
00:57 - very simple UI backend application using
01:02 - Java Script very simple HTML structure
01:04 - and no J's in the backend and in order
01:07 - to integrate all of this in the database
01:10 - we are gonna use a docker container of a
01:12 - MongoDB database and also to make
01:15 - working with the MongoDB much easier so
01:18 - we don't have to execute commands and in
01:21 - the terminal we're gonna deploy a docker
01:24 - container of a mongrel UI which is
01:26 - called Express where we can see
01:28 - the database structure and all the
01:30 - updates that our application is making
01:32 - in the database so this development
01:36 - setup should give you an idea of how
01:39 - docker containers are actually used in
01:41 - development process
01:45 - so I've already prepared some very
01:48 - simple JavaScript application so in
01:51 - order to see the code basically we have
01:54 - this index.html that is very simple code
01:57 - and we have some JavaScript here and
01:59 - we're using node.js back-end that just
02:02 - serves that index.html file and listens
02:04 - on port 3000 so we have the server
02:07 - running here in the backend and we have
02:09 - the UI that looks like this
02:12 - so basically it's just the user profile
02:14 - page with some user information and user
02:17 - can edit their profile so if I for
02:19 - example change the name here and if I
02:23 - change the email address and do changes
02:27 - like this I can save my profile and I
02:29 - have my updates here however if i
02:32 - refresh the page of course the changes
02:35 - will be lost because it's just
02:36 - JavaScript no J's so there is no
02:39 - persistent component in this application
02:42 - so in order to have that which is
02:44 - actually how real-life applications work
02:47 - you'll know that you need to integrate
02:49 - the application with the database so
02:52 - using that example I will try to
02:54 - showcase you how you can actually use
02:56 - the docker containers to make the
02:58 - development process easier by just
03:00 - pulling one of the databases and
03:02 - attaching it or connecting it to the
03:04 - application so in this case we're gonna
03:06 - go with the MongoDB application and in
03:10 - addition to MongoDB container we're
03:12 - gonna also deploy a MongoDB UI which is
03:16 - its own container it's called
03:18 - Express where we can manage or see the
03:21 - database in insights and updates from
03:25 - our application much easier so now let's
03:28 - see how that all works
03:34 - so in order to get started let's go to
03:36 - docker hub and find our MongoDB image
03:43 - here let's go to Congo and we have
03:48 - MongoDB here and the Express which
03:54 - is another container that we're gonna
03:56 - use for the UI so first let's pull the
04:00 - MongoDB official image so I already have
04:11 - MongoDB latest so pulling doesn't take
04:14 - longer but on my laptop but you're gonna
04:17 - need a couple of seconds probably and
04:20 - the next one we're gonna pull is the
04:23 - docker Express which I also have I
04:26 - believe so let's see yes it's also fast
04:32 - so if I check luckily I have MongoDB and
04:35 -  Express images so the next step is
04:38 - to run both and Express
04:42 - containers in order to make the MongoDB
04:46 - database available for our application
04:49 - and also to connect the Express
04:52 - with the DB container so let's do
04:56 - the connection between those two first
05:01 - in order to do that we have to
05:03 - understand another darker concept doctor
05:05 - network so how it works is that Dhaka
05:08 - creates its isolated token network where
05:13 - the containers are running in so when I
05:16 - deploy two containers in the same token
05:19 - Network in this case and
05:22 - Express they can talk to each other
05:24 - using just the container name without
05:27 - localhost port number etc just the
05:30 - container name because they are in the
05:32 - same network and the applications that
05:36 - run outside of docker like our node.js
05:38 - which just runs from node server is
05:41 - going to connect to them from outside or
05:44 - from the host using localhost and the
05:47 - port number so later when we package our
05:50 - application into its own docker image
05:53 - what we're gonna have is a game token
05:56 - network with MongoDB container
05:59 - Express container and we're gonna have a
06:01 - node.js application which we wrote
06:04 - including the index HTML and JavaScript
06:08 - for fronting in its own docker container
06:10 - and it's gonna connect to the MongoDB
06:12 - and the browser which is running on the
06:15 - house but outside the docker network is
06:19 - going to connect to our JavaScript
06:20 - application again using hostname and the
06:23 - port number so docker by default already
06:26 - provides some networks
06:28 - so if we say docker Network LS we can
06:33 - already see these auto-generated dog
06:35 - networks so we have four of them with
06:38 - different names and the drivers we're
06:40 - not gonna go into details here but what
06:42 - we're gonna do is create its own network
06:44 - for the MongoDB and Express and
06:48 - we're gonna call it mobile network so
06:51 - let's do this right right away
06:53 - I'm gonna say docker Network create and
06:58 - we're gonna call it Network so now
07:05 - if I do doctor Network
07:08 - LS again I see my token network has been
07:12 - created so now in order to make our
07:15 - MongoDB container in the Express
07:18 - container run in this Mangal Network we
07:21 - have to provide this network option when
07:24 - we run the container in the docker run
07:26 - command
07:29 - so let's start with the so we all
07:32 - know that docker run is the command to
07:35 - start a container from an image right so
07:37 - we have current which is the basic
07:40 - docker run command however in this case
07:43 - we want to specify a couple of things as
07:46 - you learned from the previous videos you
07:48 - have to specify something called port so
07:52 - we need to open a port of MongoDB the
07:55 - default port of MongoDB is 27 thousand
07:59 - seventeen so we'll take that port
08:02 - actually for both host and container so
08:05 -  will run at this port inside of a
08:07 - container and we open the same port on
08:09 - the host so that will take care of the
08:12 - port then we will run it in a detached
08:14 - mode in addition to that there are a
08:16 - couple of things that we can specify
08:18 - when starting up the container and these
08:21 - are environmental variables of the
08:24 - MongoDB let's see in the official image
08:28 - description you actually have a couple
08:29 - of documentation about how to use the
08:32 - image which is very helpful to kind of
08:34 - understand what kind of configuration
08:36 - you can apply to it here you see some
08:39 - environmental variables so basically on
08:42 - startup you can define what the root
08:44 - username and the password will be which
08:47 - is very handy because we're gonna need
08:50 - those two for the experts to connect to
08:53 - the and you can also specify the
08:56 - init database we're just gonna provide
08:58 - the username and password because we can
09:00 - create the database from the
09:02 - Express you why later so let's do that
09:04 - and the way you can specify the
09:06 - environmental variables you can actually
09:08 - see here as well is by just let's copy
09:14 - this one so here you say environmental
09:18 - variable that's what they - e flag
09:21 - stands for and the root username will
09:23 - say it's admin and another variable
09:28 - which is the password will be just
09:31 - password so in this way we can actually
09:35 - override what the default username and
09:37 - password will be so two more things that
09:39 - we need to configure in this
09:41 - commend our container name because we're
09:45 - gonna need that container name to
09:48 - connect with the Hmong Express so we'll
09:50 - call this one dB let's say and
09:55 - another one we need is the network that
10:00 - we created which was called
10:02 - Network so in order to make this command
10:05 - a little bit more structured do it on
10:07 - multiple lines so let's see so it's more
10:14 - readable so basically all these options
10:18 - or all these flags that we set to go one
10:22 - more time through them it's gonna start
10:25 - in detached mode we are opening the port
10:28 - on the host username and password that
10:31 - we want a MongoDB to use in the startup
10:35 - process we're gonna rewrite or override
10:38 - the name of the container and this
10:40 - container is gonna run in a
10:42 - Network and this should actually start
10:46 - the container okay
10:50 - so if you want to see whether it was
10:53 - successful we can lock the container and
10:56 - see what's happening inside so as we see
11:00 -  was started and everything
11:03 - actually looks good waiting for
11:06 - connections on port 20 7017 okay
11:10 - so now let's start Express we want
11:14 -  Express to connect to the running
11:16 - MongoDB container on startup and here we
11:20 - have an example of how to run it and
11:23 - here we have a list of environmental
11:24 - variables that we can configure so let's
11:27 - quickly look at them username password
11:30 - we don't need them however we need the
11:33 - admin username and admin password of the
11:36 - MongoDB this is actually what we
11:38 - overrode with admin and password so
11:40 - we're gonna use them because Express
11:42 - will need some username password to
11:44 - authenticate with the MongoDB
11:46 - interconnected the port is by default
11:49 - the correct one so we don't need to
11:50 - change that and this is an important
11:54 - part this is the MongoDB
11:55 - server right so basically this is the
11:58 - container name that experts will use to
12:02 - connect to the docker and because they
12:04 - are running in the same network only
12:07 - because of that this configuration will
12:09 - work if I didn't if I hadn't specify the
12:12 - network then I could have I could
12:14 - specify the name correct name here of
12:17 - the container but it wouldn't work so
12:19 - with that said let's actually create the
12:22 - docker run command for express as well
12:26 - so let's clear the history and let's
12:30 - start so again we run in detached mode
12:32 - and let's see what parameters we need so
12:35 - first of all port let's say with what is
12:39 - the default port that the Express runs
12:41 - on that's 80 81 so we'll take that so
12:46 - basically it's gonna run on our laptop
12:48 - on port 80 81 the next option would be
12:53 - these two
12:54 - and remember environmental variables
12:57 - need to be specified with minus E and
12:59 - this is the username of MongoDB admin
13:03 - which is admin because we specified it
13:06 - when we started the MongoDB container
13:08 - this is the password let's set this one
13:12 - as well don't forget the network - - net
13:17 -  Network we have the name we can
13:25 - also call it Express and let's see what
13:32 - else we might need here yes this is
13:35 - important one and our container name
13:43 - let's actually see it again dr. PS the
13:46 - one running it's called MongoDB that's
13:49 - the container name and this is what we
13:51 - need to specify here so I'm gonna write
13:53 - this here and finally the image is
13:57 - called
13:58 -  Express so I'm just gonna copy
14:00 - this one here and that is it so
14:04 - basically with these commands talk
14:07 - Express should be able to connect
14:09 - to the MongoDB container so let's write
14:12 - it and just to make sure let's lock the
14:15 - container and see what's happening there
14:19 - waiting for MongoDB welcome to my
14:22 - express it looks like it connected
14:24 - successfully
14:25 - it says here database connected and the
14:29 -  Express is available at port 8081
14:33 - so let's check the manga Express out at
14:38 - the port 8081 so actually let's close
14:42 - these tabs you don't need them anymore
14:44 - and here if I say localhost 8080 one I
14:48 - should be able to see the manga Express
14:51 - so these are the databases that are
14:54 - already exist by default in or
14:56 - which are created on startup and using
14:59 - the UI we can create our own database as
15:01 - we saw previously we could have
15:03 - specified an environmental area variable
15:06 - in it TB on MongoDB startup and that
15:10 - would have created a new database
15:11 - however it doesn't matter we will just
15:14 - create a database name here so we will
15:17 - call it user account database so let's
15:24 - create one and now we can actually use
15:27 - it or connect to this database from
15:30 - nodejs so let's see how that works
15:36 - so now we have the MongoDB container and
15:40 - the manga Express container running so
15:42 - let's check that we have both of them
15:45 - we'll have to connect no J's with the
15:48 - database so the way to do it is usually
15:52 - to give a protocol of the database and
15:54 - the URI and the URI for a MongoDB
15:56 - database would be localhost and the port
15:59 - that it's accessible at so when I
16:03 - already went ahead and prepared the code
16:05 - for no J's so basically we are gonna use
16:08 - a client here which is a node
16:10 - module and using that client we are
16:13 - connecting to the MongoDB database so
16:18 - this is the protocol the host and the
16:22 - port that we just saw that the MongoDB
16:24 - is listening at and username and
16:29 - password of the root user of MongoDB of
16:32 - course usually you wouldn't put the
16:34 - password here or not use an admin or
16:36 - root username password to connect to a
16:39 - database but this is for just the
16:41 - demonstration purposes and these are
16:43 - username and password that we set as
16:46 - environmental variables when we created
16:49 - the docker MongoDB container so let's
16:55 - check that so this is the MongoDB
16:57 - container command and this is the
17:00 - username root and root password that we
17:05 - specified and this is what we are gonna
17:07 - use in the code as I said for
17:10 - demonstration purposes I will write the
17:13 - password directly here so then we
17:16 - connect to the database so I also went
17:19 - ahead and in the Express user
17:22 - account database and inside that I
17:25 - created collection which is like a table
17:27 - in my sequel world called users so here
17:31 - I connect to a user account database and
17:33 - I query the collection users and this is
17:37 - a get requests so I'm just fetching
17:39 - something from the database and this is
17:41 - update request same thing I connect to
17:45 - the database using the same URI and the
17:48 - database name
17:49 - and I update or insert something in the
17:52 - collection so let's see how all that
17:54 - works so let's head over to the UI so in
17:57 - the users collection the there is no
17:59 - data it's empty so we're gonna refresh
18:03 - it and edit the data so I'm gonna right
18:05 - here some and update it and refresh we
18:13 - see that a new insert was made so this
18:17 - is the update profile section here so
18:20 - all this was executed it connected to
18:23 - the MongoDB and now we have one entry
18:27 - which is email coding name that we
18:30 - changed so if I'm gonna refresh it now I
18:33 - fetched a newly inserted use the data in
18:35 - the UI and I displayed it here and also
18:38 - if you want to see what the MongoDB
18:39 - container actually logs during this
18:41 - process we can actually look at the
18:43 - locks so I'm gonna say docker PS and
18:46 - block using the container ID so let's
18:50 - say if I wanted to see just the last
18:53 - part of it because I wanted to see what
18:55 - the last activity was I can also let's
18:57 - clear this and I can also do tail so I
19:02 - can just display the last part of it or
19:05 - if I wanted I could also stream the logs
19:08 - so I'll clear this again and I'll say
19:12 - stream the logs so I don't I won't have
19:15 - to do doctor logs all the time so if I
19:17 - make a line here for example to mark the
19:20 - last logs I can refresh it let's make
19:23 - some other changes let's change it and
19:29 - save profile so I'm gonna see some
19:33 - activity here as well so these
19:35 - connections are new and it also says
19:39 - received client metadata and this is
19:41 - where the node.js request comes in with
19:44 - a noches and it's version and at the end
19:47 - of each communication there is an in
19:49 - connection because we end the database
19:52 - connection at the end so we see that
19:55 - also in the logs so for example
19:57 - something wasn't working properly you
19:59 - could always check them in a logs here
20:02 - so with that I have a fully functional
20:05 - JavaScript node.js application which has
20:07 - a persistence in the MongoDB database
20:09 - and we also have UI both of them
20:14 - running in a docker container so this
20:16 - would be somehow a realistic example of
20:20 - how local development using docker
20:22 - containers would look like thanks for
20:26 - watching the video I hope it was helpful
20:27 - and if it was don't forget to like it
20:30 - this is a video series so I will create
20:32 - a new one every week so if you want to
20:35 - be notified whenever a new video comes
20:37 - out then subscribe to my channel if you
20:40 - have any questions if something wasn't
20:42 - clear in the video please post them in a
20:43 - comment section below and I will try to
20:45 - answer them so thank you and see you in
20:48 - the next video