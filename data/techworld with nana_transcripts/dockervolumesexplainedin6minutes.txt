00:00 - [Music]
00:05 - so in this video we're gonna learn about
00:07 - docker volumes in a natural docker
00:10 - volumes are used for data persistence in
00:13 - docker so for example if you have
00:15 - databases or other stateful applications
00:18 - you would want to use docker volumes for
00:21 - that so what are the specific use cases
00:23 - when you need docker volumes so
00:27 - container runs on a host let's say we
00:29 - have a database container and a
00:31 - container has a virtual file system
00:33 - where the data is usually stored but
00:37 - here there is no persistence so if I
00:39 - were to remove the container or stop it
00:42 - and restart the container then the data
00:45 - in this virtual file system is gone and
00:48 - it starts from a fresh state which is
00:50 - obviously not very practical because I
00:53 - want to save the changes that my
00:54 - application is making in the database
00:57 - and that's where I need docker volumes
00:59 - so what are the docker volumes exactly
01:02 - so on a host we have a physical file
01:05 - system right and the way volumes work is
01:09 - that we plug the physical file system
01:12 - path it could be a folder a directory
01:16 - and we plug it into the containers file
01:20 - system path so in simple terms a
01:22 - directory a folder on a host file system
01:25 - is mounted into a directory or folder in
01:28 - the virtual file system of docker so
01:31 - what happens is that when it container
01:33 - rights to its file system it gets
01:37 - replicated or automatically written on
01:39 - the host file system directory and
01:41 - vice-versa so if I were to change
01:44 - something on the host file system it
01:46 - automatically appears in the container
01:48 - as well so that's why when a container
01:50 - restarts even if it starts from a fresh
01:53 - state in its own virtual file system it
01:55 - gets the data automatically from that
01:57 - from the host because the data is still
01:59 - there and that's how data is populated
02:02 - on the startup of a container every time
02:04 - you restart now there are different
02:06 - types of docker volumes and so different
02:08 - ways of creating them
02:10 - usually the way to create docker volumes
02:12 - is using the
02:13 - kourin command so in the docker run
02:16 - there is an option called - V and this
02:19 - is where we define the connection of the
02:21 - reference between the host directory and
02:24 - the container directory and this type of
02:28 - volume definition is called a host
02:30 - volume and the main characteristic of
02:32 - this one is that you decide where on the
02:35 - host file system that reference is made
02:38 - so which folder on the host file system
02:42 - you mount into the container so the
02:44 - second type is where you create a volume
02:47 - just by referencing the container
02:51 - directory so you don't specify which
02:54 - directory on the host should be mounted
02:56 - but that's taking care of the docker
02:59 - itself so that directory is first of all
03:02 - automatically created by docker under
03:04 - the VAR lip docker
03:05 - volumes so for each container there will
03:08 - be a folder generated that gets mounted
03:10 - automatically to the container and this
03:13 - type of volumes are called anonymous
03:15 - volumes because you don't have a
03:17 - reference to this automatically
03:19 - generated folder basically just have to
03:22 - know the path and the third volume type
03:24 - is actually an improvement of the
03:26 - anonymous volumes and it specifies the
03:30 - name of that folder on the host file
03:34 - system and the name is up to you it just
03:36 - to reference the directory and that type
03:39 - of volumes are called named volumes so
03:41 - in this case compared to anonymous
03:43 - volumes you have you can actually
03:45 - reference that volume just by name so
03:48 - you don't have to know exactly the path
03:50 - so from these three types the mostly
03:53 - used one and the one that you should be
03:55 - using in production is actually the
03:58 - named volumes because they are
04:00 - additional benefits to letting docker
04:03 - actually manage those volume directories
04:06 - on the host
04:07 - now they showed how to create docker
04:09 - volumes using docker run commands but if
04:11 - you're using docker compose it's
04:13 - actually the same so this actually shows
04:17 - how to use volume definitions in a
04:19 - docker compose and this is pretty much
04:21 - the same as in docker run commands so we
04:24 - have volumes at
04:25 - buuuut and underneath you define your
04:27 - volume definition just like you would in
04:30 - this - B option and here we use a named
04:32 - volume so DB - data will be the name
04:36 - reference name that you can just think
04:39 - of it could be anything and inviolable
04:43 - data is the path in the container then
04:47 - you may have some other containers and
04:49 - at the end so in the same level as the
04:52 - services you would actually list all the
04:55 - volumes that you have defined you define
04:58 - at least volumes that you want to mount
05:00 - into the containers so if you were to
05:03 - create volumes for different containers
05:05 - you would list them all here and on the
05:08 - container level then you actually define
05:10 - under which path that specific volume
05:13 - can be mounted and the benefit of that
05:15 - is that you can actually mount a
05:18 - reference of the same folder on a host
05:22 - to more than one containers and that
05:25 - would be beneficial if those containers
05:28 - need to share the data in this case you
05:31 - would mount the same volume name or
05:34 - reference to two different containers
05:36 - and you can mount them in two different
05:38 - paths inside of the container thanks for
05:41 - watching the video I hope it was helpful
05:42 - and if it was don't forget to like it if
05:45 - you want to be notified whenever a new
05:47 - video comes out then subscribe to my
05:49 - channel if you have any questions if
05:52 - something wasn't clear in the video
05:53 - please post them in the comment section
05:55 - below and I will try to answer them so
05:57 - thank you and see you in the next video