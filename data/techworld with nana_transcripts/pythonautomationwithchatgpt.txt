00:00 - in this video we are going to learn how
00:02 - to use Python to automate things for us
00:04 - so we don't have to do them manually
00:06 - we're going to do something super cool
00:09 - and interesting we're going to automate
00:11 - two use cases first we will write a
00:14 - Python program that takes any blog
00:17 - article or any web page and it extracts
00:20 - all the headers from that page or
00:23 - article and then it translates all those
00:25 - headers to Spanish and saves it into its
00:29 - own HTML file so you can open it in the
00:32 - browser and basically see all the
00:35 - headers of that specific blog article
00:37 - translated in Spanish in the Second Use
00:40 - case will be that we're going to write a
00:42 - Python program that goes through all the
00:44 - files in our downloads folder it then
00:47 - checks if we have any files that are
00:49 - older than 30 days or were last used
00:52 - more than 30 days ago and it takes all
00:55 - these files and puts that into a new
00:58 - folder called 2D delete which we can
01:01 - then review and basically delete if
01:04 - needed so basically it helps us clean up
01:07 - our messy downloads folder with a bunch
01:10 - of old downloaded files in there but
01:13 - here's even more interesting thing we
01:15 - will do we will use an artificial
01:17 - intelligence tool that you probably have
01:19 - already heard of a million times called
01:22 - chat GPT and we will tell python to use
01:26 - chat gpt's API or the underlying API
01:30 - that chatgpt is also using to generate
01:34 - the Python scripts for those two use
01:37 - cases that I mentioned now if you
01:39 - haven't heard about trade GPT by now
01:41 - also not a problem because I have a full
01:43 - video on that which I made recently
01:45 - which I will link in this video so
01:48 - basically we are going to write a Python
01:51 - program that will accept an input from
01:54 - us about the automation use case and
01:57 - then go to chatgpt and say hey give me a
02:00 - python script for this automation use
02:03 - case and then we'll save it into a
02:05 - separate python file I think it's a
02:08 - really cool thing to try out and I hope
02:09 - you find it just as cool and exciting as
02:11 - I do so let's get into it but before we
02:15 - start if you have watched our videos and
02:17 - they were helpful for you please
02:19 - subscribe to support us as we keep on
02:22 - creating more free valuable content for
02:26 - you so if you're getting value from this
02:28 - channel just take this second and click
02:30 - the Subscribe button if you don't want
02:32 - to miss any new videos that we post then
02:34 - you can also activate the notification
02:37 - Bell
02:38 - before we start many of you may be
02:40 - asking why does everyone use Python for
02:43 - automation there are so many other
02:45 - programming languages out there and they
02:47 - all seem to be doing pretty much the
02:48 - same thing so what is it with python
02:51 - that gives it a monopoly on automation
02:53 - well the magic is in the ecosystem of
02:57 - python libraries for automation so
02:59 - python is a very simple language and it
03:02 - just happened that most low-level
03:05 - automation tools were written in Python
03:07 - so now you have this huge ecosystem of
03:10 - python libraries that can talk to the
03:13 - server operating system to Cloud
03:15 - platforms allow configuring
03:17 - infrastructure networking accessing
03:19 - various apis and this may be very small
03:22 - Standalone libraries or a complex
03:24 - automation tool like ansible which also
03:27 - happens to be written with python so
03:29 - basically a lot of work and effort got
03:31 - concentrated into that which means if
03:34 - you want to automate something you have
03:35 - a specific use case in mind you can be
03:38 - sure that there will be a great python
03:41 - library for that specific automation use
03:44 - case and if it doesn't exist yet
03:46 - probably someone will create it very
03:47 - soon whereas for other programming
03:50 - languages you won't be able to find
03:52 - library for every automation task or the
03:56 - library won't be as powerful or
03:59 - user-friendly as the python Library so
04:01 - because of that python just ended up
04:04 - being the language when it comes to
04:06 - Automation and when you think about this
04:08 - and compare the different programming
04:09 - languages every language is kind of good
04:12 - at one specific thing right so even
04:14 - though they're all programming languages
04:16 - and at its core they're pretty similar
04:18 - every programming language has its
04:21 - strengths in one particular area that
04:23 - differentiates it that makes it the best
04:25 - language for that area so for example
04:28 - Java is robust mature and a good choice
04:32 - for enterprise software JavaScript is
04:34 - used to write web applications and
04:36 - python is the language for automation
04:40 - so let's get into the demo part let's
04:43 - first write a Python program that
04:45 - connects to the API I said check GPT API
04:48 - but technically it's an open AI API
04:51 - which is what chatgpt uses under the
04:54 - hood so open AIS API is the application
04:57 - interface that lets us connect to it and
05:00 - interact with the artificial
05:01 - intelligence that drives and Powers chat
05:04 - GPT for example and many startups and
05:07 - developers actually use this API to
05:09 - build some cool new tools so how do we
05:13 - connect to the open AIS API in general
05:15 - regardless of what programming language
05:18 - we're using well first of all you need
05:20 - to quickly sign up to create an account
05:22 - on open AI platform this way you are
05:26 - kind of creating your own space on open
05:28 - AI for your user and one of the reasons
05:31 - that you have to sign up is that the
05:33 - compute resources needed and the
05:35 - processing that takes place by the
05:37 - artificial intelligence in the
05:39 - background needs some compute resources
05:41 - and processing power so obviously they
05:43 - can provide these Limitless to everyone
05:46 - so they have some limits per user so
05:49 - that everyone can equally access and use
05:52 - this for free to a certain point so the
05:55 - first step is to sign up and create a
05:57 - user account on open ai's platform and
06:00 - once you have your user account the
06:02 - Second Step will be to create what's
06:04 - called an API key which is random
06:07 - generated stream which is a unique key
06:09 - that is associated with your user
06:12 - account which means when we use that API
06:15 - key in our Python program to make a call
06:17 - and connect to the API the API will know
06:20 - that it's associated with our user
06:23 - account and by the way this concept of
06:25 - creating an account on platform and
06:27 - using an API key to identify your user
06:31 - when making a request to it is a very
06:33 - general concept of using an API nothing
06:35 - specific or unique for open EI it's that
06:39 - simple so we need those two simple steps
06:41 - to prepare everything and get started
06:43 - using this API
06:46 - so let's go ahead and do that either
06:49 - open this link directly or you can even
06:51 - Google open AI API
06:54 - and it shows you exactly the same page
06:57 - right so right here on the open AIS page
07:00 - you basically do sign up
07:02 - create your account just providing your
07:05 - email address and some information
07:06 - actually already created one
07:10 - and just log into your account
07:14 - and that is your personal space and now
07:16 - let's create the API key which we will
07:19 - use in our Python program to connect to
07:21 - the API so clicking on your user account
07:24 - icon here view API keys so it's pretty
07:28 - simple actually and you will probably
07:30 - have zero keys at the beginning for a
07:33 - fresh new account so go ahead and create
07:35 - a new secret key click on it obviously
07:39 - I'm going to remove this later but
07:41 - before you click OK make sure to copy
07:44 - this secret key somewhere safe and
07:47 - accessible because we're gonna need that
07:49 - in our Python program so I'm going to
07:52 - copy that okay and after that you won't
07:54 - be actually able to see that or access
07:57 - it so make sure to paste it somewhere
08:00 - and that's how easy it is so we have the
08:03 - account and we have the API key to
08:04 - connect to the API
08:09 - the two things I want to mention first
08:11 - of all if python syntax and python
08:13 - generally is completely new to you then
08:15 - you can check out my Python tutorial
08:18 - where I go through all the basics
08:20 - including the variables if else
08:23 - statements functions syntax and all
08:27 - these basic concepts so you can learn
08:29 - how to work with python and the second
08:31 - thing is we need to have python actually
08:35 - installed locally so that we can run
08:38 - Python program if you don't have python
08:40 - installed yet or for example if you're
08:42 - on Mac you will probably already have
08:44 - python if not you would have to install
08:47 - it so you're going to have to have
08:49 - Python 3 so that's the new version of
08:52 - python and you execute that with Python
08:55 - 3 command actually
08:57 - like this and you also need to have
09:00 - python package manager installed which
09:02 - is called keep also with three so if you
09:06 - go through my python course you will
09:08 - have all these tools installed and you
09:09 - will know basics of python syntax so you
09:13 - should be able to easily follow this
09:15 - specific demo so let's start writing
09:17 - this python script and we will see what
09:20 - we need and how to put together this
09:22 - code step by step so first of all I'm
09:24 - going to create a separate folder for
09:27 - all the Python scripts that we're going
09:29 - to produce in this demo so in YouTube
09:32 - tutorial series folder and I'm going to
09:34 - create a new folder and let's call this
09:36 - python
09:38 - GPT
09:42 - and I'm going to change into that folder
09:45 - and now I'm going to open this inside
09:47 - Visual Studio code
09:48 - [Music]
09:52 - and there you go you can also just open
09:54 - Visual Studio code and then open the
09:57 - folder from this UI I just used a
09:58 - shortcut so this is a folder where I'm
10:01 - going to put the python script so let's
10:03 - create it and I'm actually gonna also
10:06 - call this python script python chat GPT
10:10 - dot p y
10:13 - and we can just start writing our script
10:16 - so first of all whenever we connect to
10:20 - an external API we're making a request
10:23 - so we're going to need a library a
10:26 - python library in this case that will
10:28 - allow us to send requests to external
10:31 - endpoints like API endpoints now how do
10:34 - we make a request to open AI well we
10:37 - actually have two options we have a
10:41 - generic requests Library which is great
10:44 - because you can use it for whatever API
10:46 - or whatever tool you want not just open
10:50 - AI so it's generic and when you learn
10:52 - how to use it you will be able to make a
10:54 - request to any API but usually the tools
10:57 - that provide the apis will also provide
11:00 - a library that hides the underlying
11:03 - complexity of making a request sending
11:05 - all the parameters Etc or setting the
11:08 - API key and lets you interact with the
11:11 - API with a more high level code so in
11:14 - that library that will give you objects
11:15 - and methods and so on that make the
11:18 - whole process easier and generally
11:20 - that's the purpose of a library right to
11:22 - make writing the code easier for us so
11:24 - we don't have to write everything from
11:26 - scratch and openai has a library for
11:29 - python
11:31 - and node.js for example and you can see
11:34 - the usage of the library for each
11:35 - language and you see that it's called
11:37 - open AI so that's the library name so
11:40 - you can install openai library and
11:42 - import it in your code and use it like
11:45 - the example you see right here you can
11:47 - see the syntax and how to use the
11:49 - library in the official documentation of
11:52 - that specific tool like what methods or
11:54 - objects you have available and so on and
11:57 - this will be very useful if you're doing
11:59 - more complex things and making more
12:02 - complex queries to the API and you want
12:04 - to use the library to do those things
12:06 - without over complicating your code but
12:09 - open AI is pretty recent and its Library
12:12 - may change they may change methods and
12:15 - syntax and so on because they're still
12:18 - adding and developing a lot of stuff on
12:20 - top of that so things may change so if
12:22 - you're gonna watch this video maybe a
12:24 - year later it may look very different
12:26 - and because of that I'm gonna stick to
12:28 - the generic requests library because we
12:31 - just want to make a request which is a
12:34 - pretty simple use case so the code
12:36 - between using the request library in
12:38 - openai library will not be very
12:40 - different and also I think it's better
12:42 - to learn the things that you can use for
12:45 - many other things as well maybe it's
12:47 - just my personal preference but in any
12:50 - case for this example I'm going to use
12:52 - the request Library as I said it
12:54 - shouldn't make that much difference if
12:55 - you want to you can actually go with the
12:57 - Open Air library and use it instead not
12:59 - a problem at all so you see here it's a
13:01 - module for making HTTP requests and in
13:04 - Visual Studio code you can see a cheat
13:07 - sheet of how to actually use the library
13:10 - which is pretty cool so now we have a
13:14 - library that helps us make requests two
13:16 - external endpoints now we have to find
13:18 - out what is the endpoint of open AI API
13:22 - that we want to connect to and remember
13:25 - we're writing a python script that takes
13:27 - our input which is going to be any
13:30 - automation use case it will then go to
13:32 - the API and say for this specific use
13:34 - case that user entered here I want to
13:37 - have a python script just like you would
13:40 - type into chatgpt please write a python
13:43 - script for this specific use case so
13:45 - we're doing that but programmatically so
13:47 - now we have to find out the endpoint
13:49 - that allows us to do that where do we
13:52 - find endpoints of an API well in the API
13:55 - documentation so right here in open AI
14:00 - platform you're going to click on
14:02 - documentation
14:03 - and this is basically a description of
14:05 - how to use this documentation and what
14:07 - does this API provide and again each
14:09 - whatever API you are using it will
14:12 - always come with a documentation because
14:13 - obviously you need to know how to use
14:15 - that API and on which endpoints you
14:17 - should send what request right so if we
14:21 - scroll a little bit down here you see
14:23 - the section prompts and completions
14:25 - which is the core of this API as they
14:29 - are stating here and this is exactly
14:31 - what chatgpt uses you input some text as
14:34 - a prompt and the model will generate a
14:37 - text completion that attempts to match
14:39 - whatever you asked from it
14:42 - and there are a bunch of other stuff but
14:43 - the completions is exactly what we need
14:46 - so either you click here
14:49 - and it takes you directly to that
14:50 - completion section or if you scroll down
14:53 - in the API reference you also have these
14:56 - completions section which is basically
14:58 - the same right so we have our endpoint
15:01 - I'm actually going to copy that and add
15:03 - that into my code and save it into a
15:06 - variable and I'm going to call this API
15:08 - endpoint
15:10 - we also have our API key let's actually
15:12 - also add this right here and you should
15:16 - have copied that somewhere and now you
15:19 - can just paste it in and by the way your
15:21 - API key is a secret key so it's actually
15:24 - sensitive piece of information you
15:26 - shouldn't be sharing that with anyone
15:28 - and you shouldn't have that directly in
15:30 - your code so later when you have the
15:32 - script ready we're going to remove this
15:34 - API key from here and we're gonna read
15:37 - that from an environment variable so
15:39 - it's not hard coded inside the script
15:41 - but we're going to do that later so we
15:44 - have those two pieces of information we
15:45 - have the endpoint and we have the key
15:47 - that allows us to connect to and
15:49 - authenticate with the open AI API in
15:53 - general so that it can actually take our
15:56 - requests and answer them so we're
15:58 - getting there slowly now that we have
16:00 - the endpoint and the key for
16:01 - authentication and the library to make a
16:04 - request it's now time to actually make
16:07 - the request and again we're gonna refer
16:09 - the document Edition to see how to
16:12 - generate our request
16:14 - I'm going to switch back first piece of
16:16 - information we have is that we need to
16:18 - do a post request so instead of get
16:21 - requests where we're just getting some
16:23 - data we are making a post request which
16:25 - means we are expecting to get some data
16:28 - back however we need to First send or
16:31 - post our prompt to get that request
16:34 - right so we have to send some
16:36 - information and then we'll get the reply
16:38 - to that and in order to make a post
16:40 - request with the requests Library
16:44 - we have a simple post method in this
16:48 - post method accepts several parameters
16:51 - the first one is API endpoint because
16:54 - request Library needs to know where are
16:57 - we posting this data which endpoint are
16:59 - we connecting to and now we need to
17:01 - Define what information are we sending
17:04 - in that request and there are two pieces
17:07 - of information or two types of
17:08 - information we're sending with the
17:10 - request first one is the metadata about
17:12 - the request and the second one is the
17:15 - actual request contents so switching
17:18 - back again and again this is not
17:20 - specific to this API this is how the
17:22 - requests are structured so the metadata
17:24 - would be things like the token or API
17:28 - key for authentication so it's not the
17:30 - actual content of our request it's not
17:33 - the prompt that we're saying okay please
17:35 - give me python script for this use case
17:37 - but it's more like additional
17:39 - information about the request itself
17:41 - which is here is my key to authenticate
17:44 - that I'm allowed to make this request
17:46 - again it's part of HTTP we send the
17:50 - metadata as headers so we're gonna set
17:53 - the headers on a request and by the way
17:55 - if you look to your right and let's
17:58 - actually make this larger you have the
18:00 - example request which we can use as a
18:03 - reference which you can basically just
18:04 - copy and it will make the request with
18:07 - those parameters and as you see this is
18:10 - a current request which you can execute
18:11 - on your terminal using curl command line
18:14 - tool and again very conveniently they
18:17 - also provide this same request example
18:20 - in Python and node.js so python is what
18:24 - we need and remember I told you that we
18:27 - have two ways of making a request to
18:30 - open AI One is using the request Library
18:32 - basically the library that provides us a
18:35 - generic way to make a request to any
18:37 - endpoint and the second one is the
18:39 - openai library itself and this example
18:42 - right here is using the open AI Library
18:46 - so this is an example code of how to
18:48 - make a request using that Library
18:50 - however I said that we're going to use
18:52 - request library because our use case is
18:55 - pretty simple and you can then go back
18:57 - and compare the openai library example
19:01 - with what we write so because I'm going
19:04 - to be using request Library I'm actually
19:06 - going to switch back to Kernel and I'm
19:08 - gonna take the information from here so
19:10 - we have to map that now to python
19:13 - request and these are HTTP headers where
19:16 - it's setting the API key and saying that
19:20 - it will send requests in a Json format
19:22 - so let's set those two headers which is
19:26 - going to be the second parameter of the
19:28 - post method
19:30 - so we need our headers equals two and we
19:34 - can either directly write those headers
19:36 - inside as an object or we could also
19:39 - save that into a separate variable let's
19:42 - call it headers or request headers
19:46 - and set those two headers that we need
19:49 - right here so we have the content type
19:51 - I'm actually going to copy those two
19:55 - which basically says that we are sending
19:57 - content type of Json format so that's
20:00 - the format of the request that we are
20:03 - sending to the API there you go
20:07 - and we have
20:10 - the header to set the API key now
20:13 - obviously we have to reference or
20:15 - substitute the API key so either you can
20:18 - type it directly here like this a string
20:21 - however because we want to have a clean
20:23 - code and we are storing things into
20:25 - variables we're going to reference it
20:28 - here
20:29 - simply like this this is how string
20:32 - concatenation syntax looks like in
20:34 - Python so we have the string and this is
20:37 - just a reference to a variable so we're
20:39 - setting the headers and we can
20:42 - set that value
20:44 - as a second parameter so now the post
20:47 - request is made to that endpoint with
20:50 - those headers and now we need the actual
20:53 - request What's called the request body
20:56 - so now the contents of the actual
20:57 - request come and that's going to be the
21:01 - third parameter of post method and again
21:05 - we can have an object here like this or
21:08 - we're gonna create another variable
21:10 - we're going to call it data or request
21:12 - data let's call it request data
21:16 - we can also call this request
21:18 - header
21:21 - like this so we have a little
21:23 - consistency there
21:30 - going back we have the example here and
21:33 - these are basically the request data
21:36 - right things that we include inside the
21:38 - request and this is an example request
21:41 - and this is the full list of parameters
21:44 - so these are things that we can include
21:46 - in our request or request data to
21:50 - basically communicate with the API
21:51 - endpoint and tell it exactly what we
21:54 - need right so let's go through these
21:56 - parameters and see what options we have
21:58 - here the first important and required
22:01 - attribute is what's called a model and
22:04 - this actually refers to the machine
22:06 - learning model of open AI that we want
22:10 - to use and as you see as an example
22:12 - value it has text DaVinci zero zero
22:16 - three so what is that what is a model
22:18 - well if you watched my chat gbt video I
22:22 - explain what models are a little bit
22:23 - however we can go through this here as
22:26 - well and if I open this link that says
22:29 - model overview
22:30 - we're gonna see a couple of items here
22:33 - these are basically group of models and
22:36 - if I scroll a little bit down right here
22:38 - gpt3 that powers GPT that's where the
22:42 - name comes from has a list of various
22:44 - models so basically open AI is an
22:48 - organization that works on various
22:52 - different types of AI tools it doesn't
22:55 - just work on AI that produces text or
22:59 - visuals it works on different types of
23:01 - AIS and because of that they have
23:04 - various models that specialize and do
23:06 - different things so gpt3 is actually one
23:11 - of these model groups for processing and
23:14 - generating natural language and this is
23:17 - a list of machine learning models that
23:20 - open AI has developed and uses in its
23:24 - projects like chat gbt or delete or
23:27 - whatever and also the machine learning
23:30 - models that that you can connect to and
23:33 - talk to through the API and you see the
23:36 - descriptions here so text DaVinci 003 is
23:39 - basically the name or ID of that model
23:41 - that's how they called it and as it says
23:43 - it is the most capable model it has been
23:46 - trained with massive amounts of data and
23:49 - can do very complex things and you also
23:52 - see it has been trained with data up to
23:54 - 2021. of course this may change if you
23:57 - watch this video one year after I
23:59 - release it obviously you may see
24:01 - different stuff in this documentation
24:03 - but currently that's how it looks like
24:05 - so that's what a model is and when we
24:08 - connect to the API we can basically
24:10 - select which machine learning model we
24:13 - want to talk to well in our case we want
24:16 - to generate a python script which is a
24:18 - little bit maybe a little bit more
24:20 - complex task so we're gonna go with the
24:23 - best option that we have text DaVinci
24:26 - 003 and that's also the example that we
24:29 - have here now before move on and use the
24:32 - text DaVinci model in our request I want
24:35 - to mention another model group that is
24:37 - listed in the overview called codex so
24:40 - just from the name you know that it's
24:42 - about code and this is basically a set
24:44 - of models for coding examples
24:46 - specifically now this was actually
24:49 - created on top of gpt3 models so it
24:52 - builds on top of the capabilities of
24:54 - gpt3 models but it has been trained with
24:57 - extensive amount from open source code
25:00 - on GitHub and it produces code so if I
25:04 - click inside you can see a detailed
25:05 - description how it's been trained and
25:08 - that it's most capable in Python plus
25:11 - proficient in other languages and it has
25:13 - these two models under its group now
25:16 - here's the thing I actually tested it
25:18 - out to compare it with with the gp3
25:21 - model and it didn't really perform
25:24 - consistently on some occasions it didn't
25:27 - actually produce proper results however
25:29 - when it actually gave the proper
25:32 - response it was a nicely written
25:35 - well-structured code so I think there is
25:38 - a lot of potential there but it didn't
25:39 - work for all the use cases you can also
25:42 - see that it's in better version maybe
25:44 - after a couple of months or a year when
25:47 - you're seeing this video it will not be
25:48 - in beta anymore just like the other
25:51 - model groups so because of these reasons
25:54 - we're actually going to choose the gpt3
25:57 - model called text DaVinci 003 which
26:01 - works perfectly for our use case and it
26:04 - actually generates really good code as
26:07 - well with consistent results so that's
26:09 - what we're going to choose however the
26:11 - great thing about using this API and our
26:14 - example is that you can literally just
26:16 - replace the model name with any other
26:19 - model names that you see here including
26:21 - the two models
26:24 - under codex group and basically just
26:27 - test it out and see for yourself you
26:29 - will not have to adjust or change
26:32 - anything in the code you will only
26:33 - replace the model name and basically
26:36 - compare them if you want to so even
26:38 - though we're going with this option for
26:40 - the demo you can safely use code DaVinci
26:44 - instead and basically just compare the
26:46 - results yourself so choosing the right
26:48 - model here is not a big deal because you
26:50 - can replace it later very easily just by
26:53 - changing the name of the model so that's
26:55 - the model I'm going to choose to make
26:57 - our requests so again when you use an
27:00 - API you can choose between those models
27:02 - and that's the model we're going to
27:04 - choose so that's going to be our first
27:05 - parameter there you go the second most
27:08 - important parameter in our request is
27:10 - obviously the prompt because prompt is
27:13 - the main part of the request that tells
27:15 - what we are asking for exactly and again
27:18 - for a comparison prompt is what you type
27:20 - in when you're chatting with chat DBT
27:22 - for example in this case we're sending
27:25 - that prompt programmatically inside the
27:27 - request and let's change this prompt and
27:31 - we're going to tell the text DaVinci
27:33 - model to write
27:36 - python script for hello world super
27:40 - simple right because we just want to
27:42 - test that we make a request successfully
27:44 - and we get a response so prompt is done
27:47 - and we have a couple of other options
27:49 - here but from those options these two
27:52 - are probably the most important so what
27:55 - are these very simple mix tokens
27:57 - basically limits the response that you
28:00 - get in tokens so when these parameters
28:02 - generally we are controlling the
28:04 - behavior of the API model when
28:08 - generating the text so this specifies
28:11 - the maximum number of tokens such as
28:13 - words or punctuation marks that the API
28:17 - model should generate in its response
28:20 - and I'm going to set these Max tokens to
28:23 - let's do 100 for Star the hello world
28:26 - script obviously is going to be very
28:27 - small so it's not going to need 100
28:29 - tokens but we can set it to maximum 100
28:32 - tokens so it's not gonna exceed that
28:35 - amount and we have one more parameter
28:37 - which is called temperature it's also
28:39 - very simple it basically defines or
28:42 - tells machine learning model hey when
28:45 - you're generating this response make
28:47 - sure to be super creative like go crazy
28:50 - with your creativity and that will be a
28:52 - temperature of one or we can say pay
28:55 - machine learning model please be as
28:57 - precise and predictable as possible and
29:00 - that will be temperature of zero so it's
29:03 - zero and one you can control that but
29:05 - obviously you have everything in the
29:06 - middle so with 0.5 temperature we can
29:10 - ask the API engine to generate response
29:13 - that is half creative half predictable
29:17 - so I'm going to copy that
29:20 - and we're gonna set it to 0.5 and we're
29:23 - actually going to ignore the rest of the
29:25 - parameters which are the most important
29:27 - ones and
29:29 - once we have our request data
29:31 - we're gonna set that as value for this
29:35 - Json parameter here so we have pieced
29:37 - together our request so this is actually
29:40 - ready to connect to the API and get a
29:43 - response so again to walk through this
29:45 - what we're doing is using the requests
29:47 - Library we are connecting to the API
29:51 - endpoint of open Ai and completions we
29:55 - are including the API key that is
29:58 - associated with our user account so that
30:01 - open AI can say okay I know this API key
30:05 - and it's associated with this account so
30:07 - you are authorized to make requests and
30:10 - once we have that authorization it will
30:12 - then take our request data and see what
30:16 - we are actually requesting and it will
30:18 - say we want to talk to text DaVinci
30:22 - 003 model and we want to ask it to
30:25 - create python script for hello world
30:27 - please do not exceed 100 tokens in your
30:30 - response and be somewhat creative but
30:33 - also more predictable and then we will
30:36 - get a response and we can then save this
30:38 - response into a variable called response
30:42 - and of course we want to
30:44 - see the result of our hard work which
30:47 - means we want to print out the response
30:49 - and see what we actually got so I'm
30:51 - going to do print response dot Json so
30:54 - here we're getting a response and the
30:56 - response is also in Json format just
30:59 - like the request that we sent so with
31:01 - this header content type we Define that
31:04 - we're sending Json and we're also
31:06 - receiving Json response and this is how
31:10 - we can grab that Json response using dot
31:13 - Json method now of course when we make
31:15 - requests when we run programs programs
31:18 - sometimes have errors so some issue may
31:21 - happen so what we can do is we can first
31:23 - check what's our response actually
31:25 - successful or maybe add an error if it
31:28 - had an error then we won't have a Json
31:30 - response we're not going to have any
31:32 - contents or any normal response contents
31:35 - is Json so we can print out the error
31:38 - message in that case so what we can do
31:40 - is we can say if response
31:44 - status code so we have status code for
31:47 - Success which is 200 which means
31:50 - everything was fine the model got our
31:52 - request our request was valid so we
31:55 - didn't make any mistakes when creating
31:57 - it and it was able to come up with a
32:00 - response which means status code 200 and
32:03 - in that case we print that response if
32:06 - not
32:06 - which is else we're gonna print
32:10 - request failed maybe we sent a wrong
32:14 - request or maybe the API server is down
32:17 - or whatever reason request build
32:21 - and we want to also know the reason why
32:24 - it failed so we're gonna print out the
32:25 - status code
32:28 - and this will be a reference to
32:32 - spawns dot status
32:36 - code and in Python this is actually
32:39 - python syntax if you want to use a
32:42 - reference to a variable inside a string
32:45 - we have this really nice shortcut or
32:48 - syntax where we add F before that string
32:52 - starts you see the syntax highlighting
32:55 - also changed like this so now python
32:58 - knows this is a string and whatever is
33:01 - Within These curly braces is actually
33:04 - not a screen but variable reference and
33:07 - this is going to be a number and in
33:09 - Python we can turn the numbers into
33:12 - Strings using this very simple scr or
33:17 - string built-in function
33:19 - and this is our super simple python
33:23 - script for connecting to open AI API so
33:27 - now it's time to execute this python
33:29 - script
33:32 - so we have Python 3 which we need to
33:35 - execute the python script and we have
33:38 - peep3 python package manager to install
33:41 - any libraries that we are using in our
33:44 - python script so you need to install
33:46 - requests because we're using a library
33:49 - called request which is actually
33:51 - external library that isn't included in
33:53 - the python package which means you will
33:55 - have to install that using peep3 package
33:59 - manager so it's a python package that
34:01 - needs to be installed I have already
34:03 - installed that and because of that first
34:06 - of all my visual studio code shows this
34:08 - quick prompt with the examples Etc
34:11 - however and let me demonstrate this if I
34:14 - go back and if I uninstall so pip3
34:18 - uninstall requests
34:21 - and let's remove that
34:23 - and if I go back you will see what
34:25 - happens
34:25 - and that's going to be your case or how
34:28 - you see the code in your Visual Studio
34:30 - code editor you will have this yellow
34:33 - line underneath and if I Mouse over it
34:35 - will say import requests could not be
34:38 - resolved because we don't have that
34:41 - Library installed locally so even before
34:44 - running the script python says I don't
34:47 - know where to find this Library I can
34:48 - import anything called request and that
34:51 - will be your state if you don't have
34:53 - that installed which means either
34:55 - globally on the terminal or right here
34:57 - in the project folder you're going to do
35:00 - keep three install requests
35:04 - there you go
35:06 - and now we have installed requests and
35:10 - it shows that documentation reference
35:12 - again no squiggly lines here anymore and
35:16 - it will work
35:18 - and now that we have Library installed
35:20 - we have Python 3 installed let's execute
35:24 - our script
35:26 - using Python 3 and the name of our
35:29 - script which is python
35:31 - chatgpt dot pi
35:34 - let's execute and I have actually made a
35:37 - small syntax error here which is this
35:41 - part just like here it has to be a valid
35:44 - Json object
35:46 - like this or for consistency we can
35:50 - actually use double quotes
35:52 - and there you go so that should fix our
35:55 - attribute error since we now set the
35:58 - attributes with valid syntax
36:01 - so let's execute our script again
36:07 - and there you go we have a response
36:09 - output
36:11 - so right here where we're printing the
36:13 - Json response that's what we have right
36:16 - here and as you see the response is a
36:19 - Json object and we have a couple of
36:22 - things that we received as a response in
36:24 - addition to the actual python script
36:26 - that we requested right here so just
36:28 - like we have metadata on the request we
36:32 - have metadata on response as well says
36:35 - that it's a text completion object which
36:37 - model was used and so on and inside
36:40 - these choices attribute we have text
36:42 - attribute that actually contains the
36:45 - python script that we asked for so right
36:49 - here this statement is the python
36:52 - print
36:54 - function to print hello world which is
36:57 - the response to our prompt that we set
37:01 - right here and let's say we don't care
37:03 - about all these metadata about the
37:06 - response we only care about the text
37:10 - that we're getting
37:11 - so we can ignore all these other stuff
37:13 - only print out the response text so on
37:17 - the Json object we're going to grab the
37:20 - value of choices and this is python
37:22 - syntax we're going to say give me the
37:26 - value of choices which is an array as
37:28 - you see and we're gonna grab the first
37:32 - element of that array again I teach the
37:35 - syntax basics in my python course so if
37:38 - you want to know what arrays are what
37:40 - objects are how to use them you can
37:43 - learn all of that there and then from
37:45 - the first element of that array we get
37:47 - this Json object and we want to get the
37:51 - value of the text attribute so again
37:54 - give me the value of text and now this
37:57 - should print the value right here and
38:00 - let's see that actually let's execute
38:02 - again
38:03 - and there we have it by the way when
38:06 - we're executing this python script we're
38:08 - making a new request just like when you
38:10 - enter a new prompt into chat GPT so this
38:13 - time it gave us a new response with very
38:16 - slight differences like edit a comment
38:19 - here on the top and this line here for
38:22 - you know python executable so we have
38:24 - actually created a program that connects
38:28 - to DaVinci text model of open Ai and now
38:33 - we can send whatever prompt we want
38:36 - programmatically and we're going to get
38:38 - a response back from that API that we're
38:41 - connecting to which is pretty cool
38:45 - so let's try one more example and let's
38:48 - ask the API to write python script for
38:51 - let's say printing out
38:54 - two days
38:56 - date and let's see what we get
39:00 - and looks at the code it Imports daytime
39:03 - library and prints out today's date now
39:07 - if you have used chatgpt already you
39:10 - know that it usually gives you
39:11 - additional explanations in the text form
39:13 - on top of the code and you might get
39:16 - that here as well again it's the same
39:18 - API so you might get the same results
39:21 - when you access it programmatically and
39:23 - the text can be helpful but usually if
39:26 - you want to quickly generate python
39:28 - script you don't want to have those
39:30 - explanations and text you you are only
39:32 - interested in code so in that case just
39:36 - to make sure the API returns only the
39:39 - script and no additional text we can
39:41 - actually adjust our prompt and tell API
39:46 - to only send us the code so right here
39:49 - I'm going to say provide
39:51 - only
39:52 - code no text so we're just telling API
39:57 - what we want in my case it shouldn't be
40:00 - much different because it already gave
40:02 - me just code but it may be different in
40:05 - your case let's execute that again and
40:07 - in my case it just remove the comments
40:09 - which are kind of unnecessary because
40:11 - the code itself is pretty
40:12 - self-explanatory so we can leave it at
40:15 - that
40:18 - going back to our main goal is we want
40:22 - these python script to take our input
40:25 - whenever we start the script of what use
40:29 - case
40:30 - we want to automate with python right so
40:32 - basically this prompt here it shouldn't
40:35 - be hard coded here but rather it should
40:37 - just take input from us and then execute
40:41 - that as a prompt so basically write
40:43 - python script for blank so this is going
40:46 - to be our input for whatever use case we
40:50 - provide as an input and then the rest of
40:53 - them will stay the same the things that
40:55 - we'll always apply such as we always
40:58 - want the python script and we always
41:00 - want the code and not the text so this
41:02 - one needs to be parameterized and taken
41:05 - from user input how do we get user input
41:09 - from python it's actually pretty easy we
41:12 - have a library called ARG parse or
41:15 - argument parser import
41:18 - Arc parse there you go and different
41:22 - from the request Library which we had to
41:24 - install using pip3 uh we don't need to
41:27 - install Arc Parts because it is actually
41:30 - a built-in module so it is already part
41:33 - of the Python installation and again you
41:36 - see the description here it basically
41:37 - lets us parse the command line arguments
41:40 - that we provide to the python
41:43 - application when we run it so it will
41:45 - look like this that's the python script
41:49 - execution right here after space we're
41:52 - gonna provide our use case as an
41:55 - argument and the argument will be
41:57 - provided like this so write python
41:59 - script let's change this to to
42:03 - print today's
42:06 - date
42:08 - so that's going to be the argument that
42:10 - we're going to parse inside the python
42:13 - script and then use it here and this is
42:16 - a code to read the user input we're
42:19 - gonna use the art parts
42:22 - argument parser
42:25 - object let's save it into parser
42:28 - variable
42:30 - so this is an object that has a method
42:33 - that allows us to read the parameters or
42:37 - arguments that we provide here so this
42:40 - basically this part here is an argument
42:42 - that we pass to the application so in
42:47 - argument method takes two parameters the
42:51 - first one is the name of the argument so
42:53 - it's kind of like assigning the whole
42:56 - value here to a variable so let's call
42:58 - this prompt
43:00 - because that's what we're providing and
43:02 - then optionally we can add description
43:04 - of what that prompt is and that's a help
43:08 - attribute
43:10 - and when you say this is a prompt to
43:14 - send to the open
43:16 - AI API
43:19 - and finally
43:20 - using this parser object we're going to
43:24 - call a method called parse arcs which is
43:27 - going to go through whatever arguments
43:29 - we have added here and it's gonna read
43:32 - the first argument and say this is a
43:34 - prompt if we had second argument and we
43:37 - edit here it will assign it there so
43:40 - basically parse any input we provide
43:42 - here and we can save it into the
43:45 - variable called arguments argument the
43:48 - word in this case means the input that
43:51 - we provide to our script and now we can
43:55 - access this value using
43:58 - arcs.prompt because we called this value
44:01 - prompt kind of like assigning to a
44:04 - variable and we're going to use that
44:06 - right here again the python syntax for
44:09 - using a variable within a string so we
44:12 - have arcs dot prompt and of course we
44:16 - have to use f
44:18 - to tell python this is a variable
44:21 - reference and not a string
44:22 - so again now when we execute our script
44:27 - we have to provide an argument because
44:29 - we are expecting it now in the
44:31 - application so we can't just leave it
44:33 - otherwise we'll get an error and when we
44:37 - provide that with these three lines of
44:39 - code the argument parser will basically
44:42 - register that input or argument with the
44:47 - name of prompt and then when we parse
44:49 - the arguments we can access it using
44:52 - arguments variable dot prompt so now
44:55 - let's actually execute this and see how
44:57 - it works so executing the python script
45:00 - with this input let's see what comes out
45:02 - and there you go as I said every time we
45:06 - execute this script it actually makes a
45:08 - new request to the API and we're getting
45:11 - a different response that's why it looks
45:13 - different than the previous ones let's
45:15 - try another example
45:17 - like print hello world
45:22 - and there you go so now without having
45:25 - to modify the prompt here in the code we
45:29 - can just easily pass on whatever use
45:33 - case we want to have here right
45:36 - let's do some other simple example let's
45:40 - say write python script to calculate
45:44 - number of days
45:47 - from I don't know let's say 1 million
45:51 - minutes and let's see what we get and
45:55 - there you go so these are obviously
45:57 - super simple examples when we have the
45:59 - script ready we're gonna actually
46:01 - execute our two use cases of extracting
46:05 - the headers from blog article and
46:06 - translating to Spanish and then cleaning
46:09 - up your downloads folder with all the
46:12 - files that are older than 30 days so we
46:16 - have parameterized our script so we're
46:19 - passing in the prompt as an input
46:24 - we have two more things to do before
46:26 - we're done with this specific script the
46:29 - first one is we want to save the script
46:31 - whatever we get here right here as a
46:34 - result we want to save it into a
46:36 - separate python script file right so
46:40 - instead of having that in a console and
46:42 - having to copy that and create a new
46:45 - python file we want that to happen
46:47 - automatically and as I said at the
46:50 - beginning having an API key directly
46:53 - here since it's a sensitive data is
46:55 - actually not a good thing to do so we're
46:57 - gonna extract that into an environment
47:00 - variable both of these things are very
47:02 - easy to do so let's quickly add them
47:05 - here so first of all let's write a code
47:08 - that instead of printing it out to the
47:10 - console it just saves it into a file so
47:13 - let's remove the print here and instead
47:16 - let's save this into a variable and
47:19 - let's call it response text
47:22 - so this is the attribute that contains
47:26 - our code and then we're gonna create a
47:29 - file and we're gonna write whatever the
47:32 - response text is into that file very
47:34 - easy to do with python so we have
47:37 - keyboard with
47:40 - open so this will basically open or
47:43 - create a new file and we need to provide
47:45 - a file name for now let's call this
47:47 - output Dot
47:50 - p y so it's a python file and the open
47:54 - method takes a second attribute which is
47:58 - either we can write the contents to this
48:02 - file or if the file already exists and
48:04 - there is some content we can instead
48:06 - append to the previous content in our
48:09 - case we always want to write it from
48:11 - scratch so we're going to use W so
48:14 - that's basically the mode in which we
48:17 - want to open this file in right mode
48:20 - append mode and so on and we're going to
48:22 - say open is file so this line basically
48:25 - goes and tries to find a file called
48:28 - output.py if it doesn't find one it
48:32 - creates one and it opens it in the mode
48:34 - that we specified right here so in this
48:38 - case it will create a new file and open
48:41 - it in right mode now that we are in a
48:44 - write mode we're gonna write to that
48:46 - file using file dot right super easy as
48:50 - you see and just providing the contents
48:52 - we want to write to that file that's it
48:55 - these two lines basically allow us to
48:57 - save
48:59 - text
49:00 - python file so let's execute and see
49:03 - that it works
49:06 - and there you go we have an output
49:08 - python file
49:10 - if I open this we have the script
49:14 - API returned inside and as I said when
49:18 - we have the right mode open if we change
49:22 - the use case let's say print hello world
49:25 - it will overwrite whatever is inside
49:28 - output script let's see there you go
49:31 - instead of appending it will just
49:34 - overwrite or replace whatever was in
49:36 - there there you go now if we want to use
49:39 - this python script to generate files for
49:42 - multiple use cases we want to save those
49:45 - use cases in separate files right we
49:48 - don't want to keep overriding in this
49:51 - single output file right which means we
49:54 - want to create a new file every time we
49:57 - generate a new python script so instead
50:01 - of hard coding this value or file name
50:04 - here we're gonna also pass that as an
50:06 - input so we're going to tell python
50:09 - please send a request to generate python
50:12 - script for this use case and then please
50:14 - save it into a file with this name so we
50:17 - can provide that as an input as well
50:19 - which means this will be a user input
50:21 - also and we'll look like this
50:25 - so this is the use case or prompt and
50:28 - the second parameter will be the file
50:29 - name like Hello World dot Pi for example
50:34 - and the same way as we did before we
50:37 - need to First register this argument and
50:39 - then give it a name so we can use it
50:42 - right here so going up I'm just going to
50:46 - copy this line let's call this file name
50:49 - which
50:51 - it is file name
50:54 - of the file to save
50:58 - python script
51:01 - there you go so we have the second
51:02 - argument and we can access it using
51:05 - arcs.file name very easy
51:09 - arcs Dot
51:11 - file name and now if I execute this we
51:15 - should get a new file with this file
51:17 - name
51:18 - and the response text inside let's do
51:21 - that and we have this hello world dot Pi
51:25 - with print hello world inside awesome so
51:29 - that's one thing we wanted to optimize
51:31 - the second one is to
51:35 - extract that into environment variable
51:37 - which is even easier I'm just gonna copy
51:41 - that and instead of hard coding it
51:43 - directly here we're going to export an
51:45 - environment variable let's call it open
51:47 - AI API key you can call it whatever you
51:51 - want let's remove those quotes so this
51:54 - will create register environment
51:56 - variable in this terminal session
51:59 - so you have to do this in the same
52:01 - terminal session where you execute the
52:03 - script so let's execute this one but now
52:06 - we have to read that environment
52:08 - variable open AI key inside python
52:12 - script and we do that using a module
52:15 - called OS and then we execute OS
52:20 - get environment
52:21 - and the name of the environment variable
52:24 - as a parameter that's it so this line
52:28 - will read value of this environment
52:30 - variable and assign it to a python
52:33 - variable here and again you have to
52:36 - export this environment variable before
52:39 - you execute the script in the same
52:41 - terminal session so that was our final
52:43 - optimization let's actually delete those
52:46 - and
52:49 - execute our script again
52:52 - and there you go we have our result
52:57 - and we're not exposing our API key in
53:01 - the code and with this our python GPT
53:05 - script is done and ready to produce
53:08 - other python automation Scripts
53:12 - now let's go ahead and use our script to
53:16 - generate python code for our first use
53:19 - case which is going to be going through
53:22 - a blog post and I have an example blog
53:25 - post that we're going to use which is
53:27 - this one right here and it has different
53:30 - levels of headers you probably know
53:32 - headers from HTML so you have larger
53:36 - ones and then we have some subheaders
53:39 - like this and so on so basically the
53:41 - script will go through the whole blog
53:43 - post it will extract all those headers
53:47 - it will translate those headers into
53:49 - Spanish and then save that into an HTML
53:54 - file so when we open it we basically
53:57 - will see this blog post but basically
53:59 - compressed in just the list of headers
54:02 - translated into Spanish so let's go back
54:04 - to our script and let's ask it to
54:08 - generate python code for this use case
54:11 - and usually when into interacting with
54:13 - API it's important to formulate our
54:16 - prompts properly so it understands
54:19 - exactly what we need so let's write we
54:22 - want a python script to
54:24 - extract all headers
54:26 - or let's say HTML headers
54:31 - from a web page
54:34 - [Music]
54:35 - Translate to
54:38 - Spanish and
54:41 - save the result
54:43 - into
54:45 - an HTML file
54:49 - and whatever python script this provides
54:52 - we want to save it into a python file
54:55 - let's call it
54:57 - extract
54:59 - and Translate
55:02 - headers dot p y so let's execute this
55:06 - and let's see what we get as a result
55:09 - and also to note that your result may be
55:12 - very different to what I'm getting
55:14 - because again it will generate a
55:17 - different response every time we make a
55:19 - request so the file was created let's
55:23 - look inside first of all we have this
55:26 - dot here let's remove that and
55:29 - let's look at our code now this is an
55:33 - interesting part is you see it basically
55:35 - gave us a code which is not finished
55:37 - right so we have a syntax error here
55:40 - because it hasn't finished with the
55:42 - result and the reason for that is if we
55:44 - go back to our church gbt Python program
55:48 - you remember when we were creating a
55:50 - request we set this parameter called Max
55:53 - tokens which basically limits the number
55:56 - of tokens or characters that you get
55:59 - back as a response and because we have
56:02 - set a limit of 100 we basically got
56:05 - those hundred tokens here so we didn't
56:08 - get the complete result which means we
56:10 - want to increase that so we have enough
56:13 - tokens to get the full response so you
56:17 - know what I'm gonna set it to 500 just
56:20 - to give us enough amount and let's try
56:23 - again the file has changed let's go back
56:28 - and let's look through our code just one
56:32 - glance it actually looks pretty good we
56:35 - can definitely work with this so let's
56:37 - go through the code that we got as a
56:40 - response from the API let's see if there
56:42 - are any adjustments needed and then
56:44 - we're gonna test this program with our
56:48 - example blog article so first of all
56:51 - we're using the same request a library
56:53 - that we used here because this is a
56:57 - generic library that you can use
56:59 - basically to make requests to any URL
57:01 - and this will be the URL of our blog
57:04 - post so let's change that right away I'm
57:08 - just going to copy that
57:10 - and paste it in here instead of example
57:12 - and then using the requests Library
57:16 - we're just requesting that page and on
57:19 - the page we can access the contents or
57:22 - the text of that page and this is a
57:25 - library called Beautiful soup which is a
57:28 - very popular python library for
57:30 - extracting crawling and basically
57:33 - working with websites so anytime you
57:35 - want to extract some information from
57:37 - web pages this is a library that you're
57:40 - gonna use it is very powerful and it is
57:42 - very popular and it was also suggested
57:44 - for this specific use Case by the API
57:47 - and that's the library name PS4
57:49 - beautiful soup 4. if I hover over it you
57:53 - see the description that basically
57:55 - parses the whole HTML into a tree
57:58 - representation so you can then access
58:00 - individual elements of that HTML page so
58:03 - that's what we're doing here parsing the
58:06 - page contents the whole HTML using an
58:09 - HTML parser it also works with XML we're
58:12 - specifying that this is an HTML page and
58:15 - we're saving that result here and this
58:18 - is a line where it goes through that
58:20 - tree representation of the HTML page and
58:23 - it basically finds and grabs all the
58:26 - headers on that page so these are HTML
58:30 - header attributes and we're saving that
58:33 - array of headers and their values of
58:36 - course into headers variable so this is
58:39 - a part where the headers are being
58:41 - extracted and this is a part where they
58:44 - are being translated as you see also
58:46 - very easy code it's using Google
58:48 - translate library and again we have a
58:51 - description so Google provides this
58:54 - translate API for free which is amazing
58:56 - and you can use that in your Python
58:58 - scripts to translate whatever you want
59:01 - so this is initiating the translator and
59:04 - this is the code section that basically
59:06 - takes the header text and translates it
59:09 - into Spanish so that's a destination
59:11 - language to be translated into and it
59:14 - then collects back those translated
59:17 - headers into the Spanish headers array
59:19 - and this is a basic for Loop you learn
59:22 - about for Loop in my python course but
59:25 - it's super simple actually it just goes
59:27 - through the headers or the header
59:29 - elements and it says for every header
59:32 - give me the text it will translate it
59:34 - into
59:36 - Spanish and then add that into Spanish
59:39 - headers array so now this array will
59:42 - have a list of all the header texts in
59:45 - Spanish and the final step is where it's
59:49 - creating an HTML file with HTML opening
59:52 - and closing tags you already know this
59:54 - because we used it right here
59:57 - basically opens the file once it creates
60:00 - these Spanish headers.html file which is
60:03 - amazing also came up with a pretty good
60:05 - name and then between those html text it
60:08 - basically goes through the Spanish
60:09 - headers array and for each header it
60:12 - adds these H1 with a header text now
60:16 - overall the script looks pretty good
60:20 - actually it's surprisingly good for the
60:23 - very first request and we don't need
60:26 - almost any adjustment except for this
60:29 - last part because since we're extracting
60:31 - headers of all levels we don't want to
60:33 - then save them as H1 right we want to
60:36 - keep that hierarchy of headers and
60:39 - titles and subtitles so we want to also
60:42 - reuse them right here so that's the only
60:45 - part we're gonna adjust and it's also
60:48 - pretty easy so what we're going to do is
60:49 - instead of hard coding these H1s here
60:52 - we're going to take that information
60:54 - from the header element itself so we're
60:57 - we're gonna need to do a little bit of
60:59 - adjustment so first of all going back
61:02 - here this only saves the header text
61:06 - right the actual values of those headers
61:09 - like this one for example and it
61:11 - discards
61:12 - um the rest of the element information
61:15 - including what element that is right
61:18 - whether it's H1 or H2 or whatever so we
61:22 - want to keep all that information
61:23 - including the text so we're gonna
61:26 - collect not only the text but the whole
61:29 - elements so now this individual header
61:32 - items will not be just the text right
61:35 - not just this text value but the whole
61:39 - HTML element which has the type which is
61:42 - H1 H2 each whatever the text and so on
61:46 - this means the actual value would be
61:49 - header dot text
61:52 - we have used it here as well and we will
61:55 - have a value called header dot name
61:59 - which represents exactly what type of
62:02 - header that is so I'm gonna copy that
62:04 - here as well and that should preserve
62:07 - the hierarchy of headers in the final
62:09 - HTML file as well now we can actually go
62:12 - ahead and test this and see if we got
62:15 - everything right or if something else
62:18 - needs adjustment so let's go ahead and
62:21 - do that however before we execute the
62:23 - script we need to install all those
62:25 - libraries and if you haven't installed
62:28 - them yet you will also see these yellow
62:31 - lines underneath and I can show you
62:33 - actually so if I uninstall them because
62:36 - I have them already locally
62:40 - let's confirm yes give it a little bit
62:44 - of time this will be your state so
62:46 - before you execute the script you will
62:49 - simply need to do peep3 install
62:52 - bs4
62:54 - so let's do that and
62:58 - you also have to install Google
63:00 - translate library but in my case it
63:03 - didn't work with the latest installation
63:05 - so I had to use a specific version so
63:08 - we're going to provide a version here as
63:10 - well so it's going to be
63:13 - 3.1.0 a0
63:16 - let's install that as well and that
63:19 - should fix that underlining
63:22 - again there you go and now with all the
63:25 - libraries all the dependencies installed
63:28 - we can
63:29 - go ahead and execute our script
63:33 - extract translate headers
63:36 - let's see
63:38 - so we got an error that says no
63:41 - attribute name so it seems like whatever
63:44 - this one or this translate result is
63:48 - giving back does not have a name
63:51 - attribute it only has text so to debug
63:55 - that let's actually see what is inside
63:58 - let's do translated translate result
64:04 - like this and let's print this out and
64:08 - if we look at any one of those items
64:11 - like this one for example we see that it
64:14 - has
64:14 - those attributes like Source destination
64:17 - text which is
64:20 - translated into Spanish which is great
64:22 - and it doesn't have the header name
64:26 - attribute which is fine we can fix that
64:28 - also very easily by grabbing that
64:31 - information from the header so in the
64:34 - Spanish headers array we can basically
64:36 - save an object that has the header text
64:40 - the translated header text and the
64:42 - header name so we're gonna prepare that
64:44 - object let's call it translate result so
64:47 - this is going to be an object and it is
64:49 - going to have a text
64:52 - and the value of the text will be the
64:56 - translation result dot text attribute
64:58 - right because we saw that this part here
65:01 - gives us the whole translate object back
65:05 - this one and then we have to basically
65:08 - grab the text from it so that's going to
65:10 - be our translated text and then we have
65:12 - the header name right
65:15 - and we're going to grab that directly
65:16 - from here
65:18 - enter name and
65:21 - that's it and finally we're gonna add
65:25 - the translate result we can also call
65:27 - this translated header
65:30 - and add that to the Spanish headers
65:32 - array so now in that array we don't only
65:35 - have just a list of text so this will
65:37 - create a python dictionary with text and
65:40 - name attributes with the translated text
65:43 - and header name attributes so the header
65:46 - name will be a value of H1 tlh6 and
65:50 - we're appending
65:51 - or adding that dictionary into Spanish
65:55 - headers array and here is we're
65:57 - iterating through that list of
65:58 - dictionary we're gonna grab the name
66:01 - attribute of the dictionary and text
66:03 - attribute and we learned the syntax of
66:06 - accessing the dictionary attributes is
66:09 - square brackets and the name of the
66:11 - attribute which in this case is also the
66:14 - name also notice that because we're
66:17 - using single quotes here for the whole
66:21 - string we have to use double quotes
66:23 - inside because otherwise we're gonna get
66:26 - an error because it's gonna think that
66:28 - this basically ends the string
66:31 - expression right so just watch out for
66:33 - that and again
66:35 - let's grab the text attribute of the
66:39 - dictionary
66:41 - and the name attribute again
66:44 - and let's execute the script and see if
66:47 - it works so the script completed we
66:50 - didn't get any errors which is a good
66:52 - sign and we have our Spanish
66:54 - headers.html file which should now
66:56 - contain all headers translated in
66:59 - Spanish and looks pretty good actually
67:02 - now the last thing we want to do is go
67:06 - ahead and open this in a browser and I
67:10 - can actually just drag and drop it into
67:13 - the browser window like this
67:15 - and there you go looks pretty Spanish I
67:19 - personally don't know Spanish so I can't
67:20 - tell how precise and correct the
67:23 - translations are but that's up to the
67:26 - Google translate Library the rest of the
67:28 - stuff looks pretty good actually we have
67:31 - our header here key so we have the
67:34 - larger headers and the subheaders we can
67:37 - even inspect that in the browser and
67:39 - let's see there you go so we have H2 H4
67:42 - all levels of headers in our HTML file
67:46 - awesome so that gave us the first script
67:49 - for our first use case and I think the
67:52 - code that we got from the API was
67:55 - actually pretty good as a starting point
67:57 - because we only needed to do a couple of
67:59 - changes and it worked pretty well
68:01 - now let's go ahead and generate python
68:04 - automation code for our Second Use case
68:07 - so I'm gonna close this one and we're
68:10 - gonna ask our python script to give us
68:15 - python code to go through files in
68:19 - downloads
68:21 - folder check their dates and if they are
68:26 - older then
68:28 - 30 days move them
68:33 - to
68:35 - folder called
68:37 - to delete so that's our use case let's
68:40 - say I have a very very messy downloads
68:43 - folder where I never delete stuff from I
68:46 - just leave it in there so it kind of
68:48 - gets pretty messy and crowded and I'm
68:51 - going to ask a python script to
68:52 - basically just go through all the files
68:55 - and make sure that it leaves all the
68:57 - recent downloads in the downloads folder
69:00 - but everything older than 30 days should
69:03 - be moved to a separate file called to
69:05 - delete which I can then manually just go
69:08 - through and move to trash if I want to
69:10 - and we're going to save it into a file
69:13 - called clean
69:16 - downloads dot python
69:20 - let's go and there you go we have our
69:23 - clean downloads Python and again it
69:26 - added some weird line at the beginning
69:28 - I'm assuming this is a kind of leftover
69:30 - of text explanation that API is
69:34 - returning let's remove that and let's
69:38 - see what we got here so we have three
69:41 - libraries that we're using the OS module
69:43 - that we already saw then we have another
69:47 - module that is basically used to copy
69:51 - archive files and folders on our file
69:55 - system and finally we have date time
69:57 - that we're gonna need to calculate
69:59 - whether files are older than 30 days so
70:03 - let's say what this auto-generated
70:04 - script does first it sets path to
70:08 - Downloads folder in user's home
70:10 - directory which is good if I don't want
70:13 - to basically provide the whole path like
70:15 - users
70:17 - my username slash downloads basically
70:21 - just expands or uses the the user's home
70:24 - directory shortcut then it provides
70:27 - another path for the new directory
70:29 - called to delete and this is really good
70:31 - because it
70:33 - checks whether the to delete folder
70:36 - already exists if not it creates one
70:39 - using this OS module so OS path exists
70:43 - basically just checks whether file or
70:46 - folder exists and make tiers creates a
70:49 - directory pretty straightforward then
70:51 - it's going through the list of files
70:54 - inside the downloads folder and saves
70:57 - them in the files variable we're getting
71:00 - the current date and then for every file
71:03 - in this list of files in downloads
71:06 - folder it gets the files modification
71:08 - date then it checks the time difference
71:12 - from now and the last modified so if
71:15 - it's a recent file like it was modified
71:16 - yesterday the time difference will be
71:19 - one day if it's an old file it hasn't
71:22 - been used longer than the time
71:24 - difference will be higher so here it
71:27 - checks if the time difference is higher
71:29 - than 30 days then using the sh util
71:33 - module it moves the file from downloads
71:36 - folder the file name to the to delete
71:39 - folder this actually looks pretty good
71:42 - you use the right libraries the code is
71:45 - pretty simple you can even edit those
71:48 - comments on top the code is also nicely
71:51 - structured I actually thought that I
71:53 - would have to adjust way more in the
71:55 - final result but it seems pretty good so
71:58 - let's actually execute this I do have
72:01 - lots of files in my downloads folder
72:05 - which a lot of them are probably way
72:07 - older than 30 days so let's execute
72:10 - Python 3 clean downloads dot py I'm
72:15 - really interested to see if this works
72:16 - first time and it seems like my
72:19 - downloads folder was cleaned up so right
72:23 - now I have those five files left and if
72:26 - I click inside those you see that they
72:29 - have been all modified recently so these
72:31 - ones were today
72:33 - this is modified like 17 days ago and in
72:38 - my home folder it created to delete
72:41 - directory and as you see here in date
72:44 - modified all the files and folders
72:47 - inside have modified date which is more
72:51 - than 30 days ago so the logic worked
72:54 - moving the files worked and we got
72:56 - exactly the result that we needed I am
72:58 - genuinely impressed that we didn't have
73:01 - to modify anything at all to make this
73:04 - code work amazing and you even have the
73:08 - comments on top of those sections that
73:10 - say exactly what it's doing
73:12 - really really good so yeah we have
73:15 - generated a couple of Python scripts
73:18 - that automate some things and we also
73:21 - have the Python program that we can feed
73:24 - any automation use case that we want and
73:27 - it will generate a python script for us
73:29 - I'm really happy with the results I hope
73:32 - I was able to teach you some valuable
73:34 - skills and things in this video please
73:37 - comment in the sections how this whole
73:39 - demo worked for you or whether you had
73:42 - any issues and what results you get or
73:45 - how quality and even how good the
73:47 - results were that you got from the API
73:49 - and finally just share some other
73:52 - valuable and really practical use cases
73:54 - where you think you can use this python
73:57 - Automation and maybe some more examples
73:59 - that I should cover and with that again
74:01 - thank you for watching and see you in
74:03 - the next video