00:00 - in this video I'm gonna show you the
00:01 - syntax and the contents of kubernetes
00:04 - configuration file which is the main
00:06 - tool for creating and configuring
00:08 - components in kubernetes cluster if
00:11 - you've seen large configuration files it
00:13 - might seem overwhelming but in reality
00:15 - it's pretty simple and intuitive and
00:18 - also very logically structured so let's
00:21 - go through it step by step
00:22 - [Music]
00:29 - so here I have examples of a deployment
00:32 - and service configuration files side by
00:35 - side so the first thing is that every
00:39 - configuration file in kubernetes has
00:41 - three parts the first part is where the
00:45 - metadata of that component that you're
00:48 - creating resides in one of the metadata
00:51 - is obviously name of the component
00:54 - itself the second part in the
00:56 - configuration file is specification so
01:00 - each components configuration file will
01:02 - have a specification where you basically
01:04 - put every kind of configuration that you
01:07 - want to apply for that component the
01:12 - first two lines here is you see is just
01:14 - declaring what you want to create here
01:18 - we are creating deployment and here
01:20 - we're creating this service and this is
01:22 - basically you have to look up for each
01:24 - component there's a different API
01:26 - version so now inside of the
01:29 - specification part obviously the
01:32 - attributes will be specific to the kind
01:36 - of a component that you're creating so
01:39 - deployment will have its own attributes
01:41 - that only apply for deployment and the
01:45 - service will have its own stuff but I
01:47 - said there are three parts of a
01:49 - configuration file and we just see
01:52 - metadata and specification so where's
01:55 - the third part so the third part will be
01:58 - a status but it's going to be
02:00 - automatically generated and edit by
02:03 - kubernetes so the way it works is that
02:06 - commodities will always compare what is
02:09 - a desired State and what is the actual
02:11 - State or the status of that component
02:13 - and if the status and desired state do
02:16 - not match then kubernetes knows there's
02:19 - something to be fixed there so it's
02:21 - going to try to fix it and this is the
02:24 - basis of the self-healing feature that
02:27 - kubernetes provides for example here you
02:30 - specify you want to replicas of nginx
02:33 - deployment so when you apply this when
02:37 - you actually create the deployment using
02:39 - this configuration file that's what
02:40 - apply means Cabrera's will
02:42 - adhere the status of your deployment and
02:46 - it will update that states continuously
02:48 - so for example if a status at some point
02:51 - will say just one replica isn't running
02:54 - then communities will compare that
02:56 - status with the specification and we'll
02:59 - know there is a problem there and other
03:02 - replicas needs to be created ASAP now
03:04 - another interesting question here is
03:06 - where does communities actually get that
03:09 - status data to automatically adhere or
03:12 - update continuously that information
03:15 - comes from the HCD remember the cluster
03:18 - brain one of the master processes that
03:20 - actually stores the cluster data so it's
03:24 - indi holds at any time the current
03:27 - status of any community's component and
03:30 - that's where the status information
03:32 - comes from
03:36 - so as you see the format of the
03:39 - configuration files is yem oh that's why
03:42 - the extension here and generally it's
03:45 - pretty straightforward to understand
03:47 - it's a very simple format but yeah Mel
03:49 - is very strict about the indentations so
03:52 - for example if you have something
03:54 - wrongly indented here your file will be
03:57 - invalid so what I do especially if I
04:01 - have a configuration file that has 200
04:03 - lines it's pretty long I usually use
04:06 - some yellow online validator to see
04:10 - where I need to fix that but other than
04:13 - that it's pretty simple
04:15 - another thing is where do you actually
04:17 - store those configuration files a usual
04:21 - practice is to store them with your code
04:23 - because since the deployment and service
04:26 - is gonna be applied to your application
04:29 - it's a good practice to store these
04:31 - configuration files in your application
04:34 - code so usually it will be part of the
04:36 - whole infrastructure as code concept or
04:39 - you can also have its own git repository
04:43 - just for the configuration files
04:46 - so in the previous video I showed you
04:49 - that deployments manage the pots that
04:52 - are below them so whenever you edit
04:55 - something in a deployment it kind of
04:57 - cascades down to all the ports that it
04:59 - manages and whenever you want to create
05:03 - some pots you would actually create a
05:05 - deployment and it will take care of the
05:07 - rest
05:07 - so how does this happen or where is this
05:10 - whole thing defined in the configuration
05:12 - so here in the specification part of a
05:16 - deployment you see a template and if I
05:19 - expended you see the template also has
05:23 - its own metadata and specification so
05:26 - it's basically a configuration file
05:28 - inside of a configuration file and the
05:32 - reason for it is that this configuration
05:35 - applies to a pod support should have its
05:39 - own configuration inside of deployments
05:42 - configuration file and that's how all
05:45 - the deployments will be defined and this
05:47 - is going to be the blueprints for a pot
05:50 - like which image it should be based on
05:52 - which port it should open what is going
05:55 - to be the name of a container etc
06:01 - so the way the connection is established
06:03 - is using labels and selectors so as you
06:09 - see metadata part contains the labels
06:11 - and the specification part contains
06:15 - selectors it's pretty simple
06:17 - in a metadata you give components like
06:22 - deployment or pod a key value pair and
06:26 - it could be any key value pair that you
06:28 - think of in this case we have App Engine
06:31 - X and that label just sticks to that
06:35 - component so we give parts created using
06:40 - this blueprint label App Engine X and we
06:44 - tell the deployment to connect or to
06:47 - match all the labels with App Engine X
06:52 - to create that connection so this way
06:56 - deployment will know which parts belong
06:58 - to him now deployment has its own label
07:01 - App Engine X and these two labels are
07:04 - used by the service selector so in the
07:09 - specification of a service we define a
07:11 - selector which basically makes a
07:13 - connection between the service and the
07:18 - deployment or it spots because service
07:21 - must know which pods are kind of
07:24 - registered with it so which pods belong
07:27 - to that service and that connection is
07:30 - made through the selector of the label
07:34 - and we're gonna see that in a demo so
07:37 - another thing that must be configured in
07:39 - the service and part is the ports so if
07:44 - I expand this I see that service has its
07:48 - ports configuration and the container
07:53 - inside of a pod is obviously running or
07:56 - needs to run it's important so how this
08:00 - is configured is basically Service has a
08:02 - port where the service itself is
08:07 - accessible at so if either service sends
08:10 - a request to nginx service here it needs
08:13 - to send it on port
08:14 - but the service needs to know - which
08:17 - part
08:18 - it should forward the request but also
08:21 - at which port is that poor listening and
08:23 - that is the target port so this one
08:27 - should match the container port and with
08:30 - that we have our deployment and service
08:32 - basic configurations done and to note
08:36 - here most of these attributes that you
08:39 - see here in both parts are required so
08:42 - this will actually be the minimum
08:44 - configuration for deployment and service
08:46 - so once we have those files let's
08:50 - actually apply them or create components
08:53 - using them so let's head over to the
08:56 - console and here I'm gonna create both
09:01 - deployment and service so cube city I'll
09:04 - apply connects deployment create it and
09:12 - nginx service so now if I get the pods I
09:18 - see two replicas are running because
09:21 - that's how I define it here and we have
09:23 - our service as well which is engineer
09:28 - service this is a default service it's
09:30 - always there this is the one we created
09:33 - and it's listening on port 80 as we
09:37 - specified now how can we validate that
09:41 - the service has the right pots that it
09:45 - forwards the request to we can do it
09:49 - using cube CTL describe service and the
09:53 - service name and here you see the end
09:59 - points where you have all this status
10:04 - information here like things that we
10:07 - define in the configuration like a
10:08 - selector etc we have the target port
10:12 - that we define and we have the endpoints
10:15 - here and this must be the IP addresses
10:19 - end ports of the pots that the service
10:24 - must forward the request
10:28 - - so how do we know that these are the
10:30 - IP addresses of the right pots because
10:33 - we've keep city I'll get pod you don't
10:35 - get this information so the way we do it
10:38 - or way we find that out is using get pod
10:41 - and then you do - Oh which is four
10:44 - outputs and then we want more
10:47 - information so Oh wide and here we see
10:52 - more columns here so we have the name
10:54 - and status ready etc but we also have
10:58 - the IP address so here is the IP address
11:01 - endpoint specified here and this is the
11:05 - other one so we know that the service
11:07 - has right endpoints so now let's see the
11:11 - third part of the configuration file
11:13 - which is a status that kubernetes
11:15 - automatically generated and the way to
11:18 - do it is we can get the employment nginx
11:24 - deployment in a yellow format so when I
11:28 - execute this command I will get the
11:30 - resulting or the updated configuration
11:32 - of my deployment which actually resides
11:35 - in the HDD because HDD stores the status
11:39 - of the whole cluster including every
11:42 - component so if I do this I'll get the
11:45 - yellow output in my console but I want
11:48 - it in the file so I'm gonna save it into
11:52 - nginx the employment result and I'm
12:03 - gonna save it there and I'm gonna open
12:06 - it in my editor next to the original one
12:08 - so as you see a lot of stuff has been
12:11 - added but let's just see the status part
12:14 - so all this is automatically added and
12:17 - updated constantly by kubernetes so it
12:21 - says how many replicas are running what
12:24 - the state of those replicas and some
12:27 - other information so this part can also
12:29 - be helpful when debugging so that's the
12:32 - status but also if you noticed other
12:36 - stuff has been added in the metadata and
12:39 - specification part as well so for
12:42 - example creation timestamp when was the
12:45 - component created is automatically
12:48 - edited by kubernetes because it is a
12:50 - metadata some unique ID etc you don't
12:53 - have to care about it and in the
12:55 - specification part it just adds some
12:57 - defaults for that component but again
13:01 - you don't have to care understand most
13:04 - of these attributes but one thing to
13:06 - note here is that if you for example
13:07 - want to copy a deployment that you
13:12 - already have using maybe automated
13:15 - scripts you will have to remove and get
13:18 - rid of most of this generated stuff so
13:22 - you have to clean that deployment
13:24 - configuration file first and then you
13:27 - can create another deployment from that
13:30 - blueprint configuration so that's it
13:33 - with this video so from now on we're
13:36 - going to be working with the
13:37 - configuration files so for example if I
13:39 - want to delete the deployment and the
13:41 - service I can do it using that file
13:43 - configuration file is well using delete
13:48 - and like this the deployment will be
13:57 - gone and I can do the same for service
14:03 - alright so using cube city I'll apply
14:06 - and cube city I'll delete you can
14:08 - basically work with the configuration
14:10 - files thanks for watching the video I
14:14 - hope it was helpful and if it was don't
14:16 - forget to like it this is a video series
14:18 - so I will create a new one every week so
14:21 - if you want to be notified whenever a
14:22 - new video comes out then subscribe to my
14:24 - channel if you have any questions if
14:28 - something wasn't clear in the video
14:29 - please post them in a comment section
14:30 - below and I will try to answer them so
14:33 - thank you and see you in the next video