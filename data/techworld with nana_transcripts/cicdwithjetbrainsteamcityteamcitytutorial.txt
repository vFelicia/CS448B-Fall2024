00:00 - in this video we're going to talk about
00:02 - a modern
00:03 - and powerful ci cd tool called teamcity
00:07 - first we're going to see some of the
00:09 - cool features and benefits of using
00:11 - teamcity
00:12 - we will also see the architecture of how
00:15 - teamcity actually
00:16 - works and finally i will show you how to
00:19 - setup and configure
00:20 - your first continuous integration
00:23 - pipeline in teamcity
00:24 - in under 15 minutes
00:28 - traditionally when we think about cicd
00:30 - tools like jenkins
00:32 - we think about a tool that needs a lot
00:34 - of administration
00:36 - and configuration so administrators have
00:39 - to set up the tool and configure it with
00:42 - bunch of
00:42 - plugins so that developers can start
00:45 - using it and start creating build
00:47 - pipelines for their projects
00:49 - in jenkins specifically you have a vast
00:52 - ecosystem of plugins and for any
00:55 - imaginable configuration
00:57 - step in your build pipeline like
00:59 - deploying to a remote server for example
01:02 - using credentials checking out from a
01:05 - git repository
01:06 - executing npm commands etc so for any of
01:09 - these steps
01:10 - you have to find a suitable plugin and
01:13 - configure it and use it
01:15 - for your build now the main advantage of
01:18 - teamcity is that the setup
01:19 - and administration is way easier
01:23 - so if you want to set up a web hook for
01:26 - automatic build triggering for example
01:28 - you don't need a plugin for that you get
01:31 - that out of the box
01:32 - or you want to use gradle with a
01:34 - specific version for your project
01:36 - no need to configure it you can simply
01:38 - use it in your project
01:40 - or you want to connect to a docker
01:42 - registry or slack account
01:44 - simply add a connection to your project
01:47 - and you can use it in your build
01:48 - configuration
01:49 - and most of the common configuration
01:51 - steps that i mentioned
01:53 - are already built in so you don't need
01:56 - any external plugins
01:58 - or third-party add-ons to use them
02:01 - now if you don't want to set up and take
02:03 - care of the teamcity installation
02:05 - yourself
02:06 - you can also use the manage solution
02:09 - teamcity cloud
02:10 - to create and run your builds which of
02:12 - course makes getting started with
02:14 - teamcity even easier now as i mentioned
02:19 - creating and configuring builds is very
02:22 - easy using teamcity ui
02:24 - but in complex projects with lots of
02:26 - logic
02:27 - and lots of steps you probably don't
02:29 - want to be configuring
02:30 - everything in the ui plus you may want
02:33 - to
02:34 - easily replicate your build
02:36 - configurations
02:38 - so instead you want to automate and
02:40 - script that whole process
02:42 - which means all your build configuration
02:44 - is in git repository
02:46 - so you get version control and history
02:48 - of the changes in your configuration
02:51 - so you can maintain your build
02:52 - configurations much easier and make them
02:55 - reusable
02:56 - and you can actually script the builds
02:59 - in teamcity
03:00 - with kotlin which is an open source
03:02 - programming language
03:04 - now compared to yemo format since
03:07 - kotlin is a full featured programming
03:10 - language
03:10 - you can write more powerful logic and
03:13 - use
03:14 - all the tools and libraries that it
03:16 - provides
03:17 - and also it makes it easy for developers
03:20 - themselves
03:20 - to script their ci cd pipeline
03:22 - configurations
03:24 - now if moving to configuration as code
03:26 - completely
03:27 - is not an option you can do a hybrid in
03:30 - team teamcity
03:31 - meaning make changes to your build
03:33 - configurations
03:35 - in the ui and then commit those changes
03:37 - as
03:38 - code to your code repository so this way
03:41 - you will still have your build
03:42 - configuration as code another cool
03:46 - feature of teamcity is that
03:48 - you can create build chains from your
03:51 - builds
03:51 - by defining dependencies between them
03:54 - that means you can configure which
03:56 - builds depend on which ones in a chain
03:59 - so whenever you run a build teamcity
04:01 - will check
04:02 - all of its dependent builds and run them
04:05 - first in a correct order and you can
04:08 - also easily
04:09 - pass the artifacts or other outputs from
04:12 - one build to another
04:14 - but in addition to running builds in
04:16 - sequence you can also run them in
04:18 - parallel
04:18 - an example use case for this would be if
04:21 - you want to run the same tests
04:23 - on different platforms or environments
04:26 - like on different operating systems or
04:28 - different cloud platforms
04:30 - etc before building and deploying the
04:33 - application
04:34 - and releasing it and one more great
04:37 - feature i want to mention
04:38 - is that you can run what's called
04:41 - personal
04:42 - builds directly from your code editor
04:44 - personal builds are like developers
04:47 - own builds which only they can access so
04:50 - this is a very convenient way to trigger
04:52 - builds on a remote team city server
04:55 - from your local development environment
04:58 - this can be really useful if you want to
05:00 - test your changes before committing your
05:02 - code
05:03 - personal builds are available for all
05:06 - major
05:06 - ides like eclipse intellij and visual
05:10 - studio
05:11 - so if you have teamcity plugins for
05:13 - these ides
05:14 - you as a developer can also see build
05:17 - status
05:17 - configuration and all this information
05:20 - in your ide without
05:21 - leaving your local development
05:24 - environment
05:26 - now let's see how team city works it has
05:28 - a very clean architecture
05:31 - you have a central management component
05:33 - called teamcityserver
05:35 - where you can configure your builds and
05:37 - see your build information
05:39 - all in a nice ui now once you configure
05:42 - the builds
05:43 - they need to run somewhere right for
05:45 - that team city has
05:46 - build agents and you can add and connect
05:50 - any number of build agents to your
05:52 - server these agents can be installed
05:54 - anywhere
05:55 - on an ec2 server on your own on-premise
05:59 - servers
05:59 - it could be a docker container etc and
06:02 - each agent can have different tools
06:05 - installed on them and for each build
06:09 - teamcity will automatically detect what
06:12 - build agent can
06:13 - execute that build based on the steps
06:16 - configured in that build for example if
06:19 - your build is
06:20 - using npm command to run javascript
06:23 - tests for example you will need a build
06:26 - agent with npm
06:27 - installed on it to be able to run that
06:30 - build
06:31 - if your build creates darker images
06:34 - from your application and pushes them to
06:36 - a docker registry
06:38 - obviously docker will be needed to run
06:41 - these steps right
06:42 - so teamcity will automatically detect a
06:44 - build agent
06:46 - with docker installed on it and execute
06:48 - the build on that build agent
06:51 - and in the free professional version of
06:53 - teamcity
06:54 - you can connect up to three build agents
06:57 - to your teamcityserver
07:00 - now let's see how teamcity works in
07:02 - action
07:03 - first we will install teamcityserver and
07:06 - then configure
07:07 - a continuous integration pipeline for a
07:10 - simple
07:11 - java gradle project that builds a docker
07:14 - image and pushes it to a private
07:16 - docker hub registry and once we have
07:20 - configured that
07:21 - we will connect build agents to the
07:23 - teamcity server
07:25 - so that we can run our build so let's
07:28 - do it
07:33 - so the first step is to install and set
07:36 - up a teamcd server
07:38 - so the main component basically where we
07:40 - can create and configure
07:42 - our builds and on the official
07:45 - website of teamcity you can see
07:48 - different
07:48 - installers for different operating
07:50 - systems plus
07:51 - we have an option to install
07:54 - teamcityserver as a docker container
07:57 - with this command right here and as a
07:59 - managed
08:00 - teamcity alternative you can use
08:03 - teamcitycloud
08:04 - so for those who want to avoid setting
08:07 - up and configuring teamcityserver and
08:09 - agents
08:10 - themselves you can use team city cloud
08:13 - instead to get started faster
08:15 - and more easily however in this video
08:18 - i'm going to show you how to
08:19 - set up teamcity using docker
08:23 - so basically we have this teamcityserver
08:25 - image from
08:26 - jetbrains which has most of the stuff
08:28 - already pre-configured inside
08:31 - so we're just going to start this with
08:33 - simple
08:34 - docker run command and we're going to
08:36 - have teamcityserver available
08:38 - and i'm going to do this on a remote
08:40 - server on digitalocean's
08:42 - droplet server which i just created and
08:45 - the only thing i have done
08:46 - on this server is basically just do ept
08:48 - upgrade and install
08:50 - docker right other than that it's
08:52 - completely fresh
08:53 - new server so let's execute the docker
08:56 - run command
08:58 - and let's also see all the options that
09:01 - we have to
09:02 - add to this command so i'm gonna do
09:05 - a new line here and we have a couple of
09:08 - volumes that we want to configure for
09:10 - teamcity because all the configuration
09:12 - that we do
09:13 - the builds that we create etc they need
09:15 - to be stored somewhere right and we want
09:17 - them to be persistent
09:19 - so we're configuring volumes for that
09:22 - so i'm going to call this team city
09:26 - data these are named volumes
09:29 - and these are going to be mounted into
09:32 - the data team city server
09:36 - data directory then we have
09:40 - another volume for the team city logs
09:44 - so let's call that teamcitylocks
09:51 - so know that these are basically just
09:54 - named volumes in docker you can call
09:55 - that whatever you want docker will
09:57 - create this
09:58 - physical location on the host
10:00 - automatically
10:01 - and these are the path inside the team
10:03 - cd server container
10:06 - so these two volumes are needed and then
10:09 - we have
10:10 - the usual port basically that we bind on
10:14 - the host
10:19 - here you see the teamcity server is
10:21 - running on port 8111
10:24 - and that's the port that we take for
10:26 - host binding
10:28 - and finally we have the image name right
10:31 - so
10:33 - let's do a new line and we want to run
10:35 - all that
10:36 - in background so detached mode and
10:39 - the name of the image and i'm going to
10:41 - execute this
10:43 - and teamcityserver image will be
10:45 - downloaded the latest image
10:47 - and in a couple of seconds basically we
10:50 - will have
10:51 - the teamcity server available awesome so
10:55 - if we do docker ps we see teamcity is
10:58 - running
10:58 - and available on this port
11:01 - and i have already allowed the firewall
11:05 - rule for that
11:06 - port on my droplet that means that
11:09 - using the public ip address and
11:12 - port 8111 we can now access teamcity
11:20 - and on the initialization setup step you
11:23 - basically have an option to choose
11:25 - which database you want to use to
11:28 - persist the data
11:29 - for a test version you have this
11:30 - internal database
11:32 - that you can basically very easily get
11:35 - started with
11:35 - so you don't need an external database
11:37 - for it so we're going to choose that
11:39 - and proceed
11:50 - so now that teamcity is initialized and
11:54 - ready we can create our first project
11:56 - and connect it to a git repository
11:59 - so uncreate project and for this project
12:02 - i'm going to use
12:03 - my java gradle application which has a
12:06 - docker file so we're going to build
12:07 - docker image
12:08 - and push that image to a private docker
12:11 - registry
12:13 - you can find the repository link and all
12:15 - the other relevant links in the
12:16 - description of the video
12:18 - so i'm gonna copy the url of
12:21 - my project and here we're going to need
12:24 - credentials of
12:25 - git repository itself
12:30 - and proceed
12:34 - so the connection to repository was
12:36 - successful here you can set
12:38 - the project name default branch and some
12:40 - other configuration options
12:42 - we're going to leave all that at
12:43 - defaults and proceed
12:47 - and here as you see teamcity detected
12:51 - automatically
12:51 - from the project which build steps
12:54 - we would need to execute right since
12:56 - it's a gradle project we have
12:58 - the gradle build task and we have docker
13:01 - tasks
13:02 - but to show you how you can actually
13:04 - configure that manually i'm just
13:06 - going to click here our build
13:08 - configuration is going to be simple
13:10 - we're going to do gradle build first
13:12 - because we want to create a jar file
13:14 - from our java application i'm going to
13:16 - scroll down here
13:18 - to gradle and once selected we have
13:22 - options for that specific runner type
13:26 - right so for gradle we have all these
13:28 - options so we can call the step
13:30 - build application or build jar
13:34 - and here we have the gradle tasks that
13:36 - we want to execute
13:37 - let's say i want to do clean with gradle
13:40 - first and then we do
13:42 - build so these two tasks will be
13:44 - executed you can just separate them
13:46 - like this we have a gradle wrapper
13:50 - in the project so we can choose this and
13:54 - everything else can stay the same and
13:57 - let's do
13:57 - save and this is how build step
14:01 - list basically looks like so we have
14:03 - build application
14:06 - and the next step will be to build
14:08 - docker image right so i'm going to
14:10 - choose docker runner
14:12 - and as you see for docker you have
14:14 - docker specific
14:15 - configuration let's call this build
14:19 - image the build is selected as default
14:23 - we're going to use docker file as a
14:25 - source
14:26 - and to select the path to file we can
14:29 - actually click
14:30 - on this icon here which will show
14:33 - us the files in our git repository
14:36 - right so this is the same structure as
14:38 - we have here
14:40 - and from here we can basically select
14:42 - the path
14:43 - docker file here is in root so i'm just
14:46 - going to click on it
14:47 - and that's the path to file and right
14:50 - here we need to specify
14:52 - the name and the tag that docker build
14:55 - will basically use
14:56 - and as you probably already know from my
14:58 - other docker videos
15:00 - when we want to push a docker image to a
15:03 - docker repository
15:04 - we need to tag that image using the
15:07 - repository name right
15:08 - so in my case i'm gonna push that docker
15:11 - image
15:12 - into my private docker hub repository
15:15 - and that's
15:15 - the name of the repository so i'm going
15:18 - to copy that
15:21 - and then we have the tag option and
15:24 - let's say we want to take our
15:25 - application
15:26 - as my app and some version let's say
15:30 - 9.0 and it's also common practice
15:33 - to append a build number as part of the
15:36 - tag name
15:37 - and this build number build count etc
15:41 - values are usually available in a cicd
15:44 - tool
15:44 - using build parameters and in the build
15:47 - steps you have this convenient way of
15:50 - looking up all the build parameters that
15:53 - teamcity provides you with so if you
15:56 - want to append
15:57 - build number here i'm just going to
16:00 - click on it
16:01 - and this will basically append a build
16:03 - number at the end of the tag
16:05 - we can also build multiple images
16:09 - with different tags in this step by just
16:12 - providing them on the next line so in
16:15 - addition to
16:16 - this specific version we're also going
16:18 - to build an image
16:19 - with just latest tag so every
16:23 - last image that we build is going to be
16:25 - latest as well
16:26 - and we can define it like this and let's
16:29 - save this step as well
16:31 - so we have build application jar file
16:33 - build image
16:34 - and now we can create push image
16:37 - step with docker runner we're going to
16:40 - choose
16:41 - push here and these are the two images
16:45 - that we are pushing
16:47 - and if you notice in every build step
16:49 - you have this advanced option which
16:51 - basically
16:52 - lets you choose a conditional
16:55 - for when the build step can run right
16:58 - so you can configure whether this build
17:00 - step should run only if the previous
17:02 - ones were successful
17:04 - etc and we're going to save this step as
17:07 - well
17:07 - and this will give us a build in the
17:09 - project that we created
17:11 - with these three steps
17:17 - now docker repository as i told you is a
17:20 - private one right
17:21 - so how does teamcity know how to connect
17:24 - to the docker repository to basically
17:27 - push the images
17:29 - into it right usually we need to do
17:31 - something like docker
17:32 - login to authenticate with the private
17:35 - dock registry
17:37 - for this type of connections basically
17:39 - from teamcity to
17:41 - other platforms or other servers
17:44 - we have connection configuration on our
17:47 - project
17:48 - so if i go to my java app project
17:52 - on the project settings we have
17:54 - connections option here
17:56 - so all of the connections to this
17:59 - external systems that you need in your
18:01 - project
18:02 - you can basically configure all of them
18:03 - here so
18:05 - in our case we're going to choose docker
18:06 - registry which is
18:08 - docker hub this is the default
18:11 - registry address which is docker hub
18:13 - this is what we're using
18:15 - and here we are going to need the
18:16 - credentials
18:19 - that's my username and the password and
18:22 - we can test the connection
18:25 - as you see connection was successful so
18:28 - i'm going to save it
18:30 - and now once that's configured in the
18:32 - project we can use it in all the builds
18:36 - of this project for that going back to
18:40 - the build settings in build features
18:44 - we're going to configure something
18:45 - called docker support
18:48 - and add registry connection and we're
18:51 - just going to choose
18:52 - docker hub here save and we're good to
18:55 - go
18:56 - and as you see here this will basically
18:58 - log into docker registry
19:00 - before the build gets executed right
19:02 - which is exactly what we need
19:04 - because we need the authentication
19:05 - before docker push command gets executed
19:13 - and with this configuration our build is
19:15 - configured and
19:16 - ready to run but to run a build we need
19:19 - an
19:20 - agent so this is teamcityserver and we
19:23 - need
19:24 - agents to actually execute the bills and
19:26 - right now we have zero agents because we
19:28 - haven't connected any
19:30 - to our server so as the next step we're
19:32 - gonna connect
19:34 - an agent to our teamcityserver
19:37 - so how can you deploy and set up team
19:39 - city agents
19:40 - you have the same options here as for
19:42 - the team city server
19:44 - you can install it directly on your
19:45 - operating system
19:47 - run as a docker container or again if
19:49 - you want to avoid manually setting up
19:51 - and configuring agents
19:53 - you can use team city cloud which will
19:55 - automatically make all the suitable
19:57 - agents
19:58 - available for you i'm going to use the
20:00 - docker image here as well
20:02 - for a fast local setup by executing the
20:06 - following
20:07 - docker command again configuring the
20:09 - volume for configuration data
20:12 - and specifying where the agent should
20:15 - connect to to the tmcd server using
20:18 - server url environment variable
20:21 - so let's run this and now if we go back
20:26 - to
20:26 - our teamcityserver ui and agents
20:30 - we still have zero agents but we have
20:33 - one agent which is unauthorized so
20:36 - this is the agent that we just deployed
20:39 - but not
20:40 - authorized just click on the authorize
20:43 - and now we have one connected agent
20:47 - so that's basically how you can connect
20:49 - agents
20:50 - to a server as a docker container now as
20:53 - i already mentioned
20:54 - teamcity will automatically detect which
20:57 - agents are actually
20:59 - able to run which builds based on what's
21:02 - configured on them right which tools are
21:05 - installed on them so let's actually see
21:08 - how that detection looks like so i'm
21:11 - going to go to
21:12 - the build and here we have this
21:15 - compatible
21:15 - agents tab right and it says compatible
21:18 - agents is
21:19 - zero or none and we have incompatible
21:22 - agent
21:23 - so one agent deployed which doesn't meet
21:26 - the criteria for running this build
21:28 - and teamcityserver actually detects that
21:31 - by
21:31 - checking whether docker.server.version
21:35 - is available on that agent and it is not
21:38 - because
21:38 - we deployed it as a docker container but
21:40 - there is no docker available
21:42 - inside it right so basically it's not
21:45 - suitable
21:46 - to run our pipeline because we need to
21:48 - run docker
21:49 - commands for our build
21:53 - so now let's run and connect an agent
21:55 - which is going to be compatible
21:57 - to run our build and to do that we're
22:00 - going to run
22:00 - another teamcityagent container but
22:03 - we're going to mount the docker
22:05 - from the host inside the container using
22:08 - the following
22:09 - docker commit you can find the detailed
22:11 - explanation of all the command options
22:14 - you see here and how docker is mounted
22:17 - from the host
22:18 - in the video description along with all
22:20 - the relevant links
22:21 - so check out the description for that
22:24 - and
22:25 - let's run it so our second team city
22:28 - agent is
22:29 - running and now if we go back to
22:32 - our team city ui you see that we have
22:35 - another unauthorized agent so let's
22:38 - authorize that as well
22:40 - and this may need some time but if i
22:42 - refresh this now
22:44 - you see that we have one compatible
22:46 - agent
22:47 - and we have one that doesn't meet the
22:52 - requirement
22:54 - so that means that now we can actually
22:57 - execute
22:58 - our build and to do that we have this
23:00 - run command here
23:02 - with some additional options so for
23:04 - example you can pass in some parameters
23:06 - if you want
23:08 - you can select the agent so for example
23:10 - if you have
23:11 - multiple compatible agents you can
23:13 - select which one you want to run this on
23:16 - etc we're just going to run the build
23:22 - so here we see the overview of the build
23:24 - the status
23:26 - branch etc and here you can also see the
23:29 - locks
23:29 - of the build so we see that all these
23:32 - steps get executed
23:34 - and we should be able to see our latest
23:36 - tag
23:37 - as well as tag with the specified
23:39 - version
23:40 - and with build number in the docker hub
23:42 - private repository
23:44 - and here you also have a summary of the
23:47 - images that were pushed to the
23:48 - repository
23:50 - now of course in your projects you want
23:52 - to configure automatic triggering of
23:54 - builds
23:54 - when you push the changes or a pull
23:57 - request is made
23:58 - and also configure which branches should
24:00 - be built etc
24:01 - and you can configure all of that pretty
24:04 - easily with the triggers
24:05 - in the build configuration where you
24:07 - have all these options
24:08 - available for different use cases and
24:11 - for different trigger types
24:14 - and finally as i mentioned with the best
24:16 - practice and the new trend
24:18 - of having configuration as code instead
24:21 - of
24:21 - doing everything in the ui you also have
24:24 - an option to
24:25 - see all of these and save this
24:27 - configuration
24:28 - as code and in the build configuration
24:32 - we have this view dsl button and if i
24:35 - click inside
24:36 - you get this auto generated build
24:38 - configuration code
24:40 - which basically describes exactly what
24:43 - we did in the ui
24:44 - with the build steps and triggers etc
24:48 - written in kotlin programming language
24:51 - and optionally you could also work with
24:54 - this file
24:55 - which you can use as a basis to
24:57 - basically expand on your configuration
24:59 - and configure the rest of this stuff as
25:02 - code
25:03 - now this is obviously a subset of the
25:06 - things you can do
25:06 - in teamcity because you have tons of
25:09 - other powerful features in addition
25:11 - but this is to demonstrate how easy it
25:14 - is to get started with teamcity to set
25:16 - it up
25:17 - to connect the agents and basically just
25:19 - configure
25:20 - a simple pipeline for your project now i
25:24 - hope you learned a lot in this video let
25:25 - me know in the comments
25:26 - what you think about teamcity and what's
25:29 - your experience with
25:30 - other cicd tools and with that
25:33 - thank you for watching and see you in
25:35 - the next video