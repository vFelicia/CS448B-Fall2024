00:00 - hi in this video we're going to talk
00:01 - about the challenge of learning multiple
00:04 - technologies and staying up to date with
00:06 - new ones in the devops field and how i
00:09 - personally manage not to be overwhelmed
00:11 - by it and make the learning process much
00:13 - easier as a devops engineer you need to
00:16 - learn so many tools to even start your
00:18 - job as a junior devops engineer so the
00:20 - minimum entry requirement is already
00:23 - super high which is logical because
00:25 - devops is about creating end-to-end
00:27 - processes for the complete software
00:30 - development and deployment and there are
00:32 - many tools involved in creating these
00:34 - processes
00:36 - but in addition to having to learn five
00:38 - to ten technologies right at the
00:40 - beginning which is you can't just learn
00:42 - them in isolation
00:44 - but you have to know how to combine them
00:46 - as well how to integrate them together
00:48 - to build those processes
00:51 - but it doesn't stop there to add to this
00:53 - challenge the devops space is developing
00:56 - really fast and we see new technologies
00:59 - new concepts emerging all the time
01:02 - so many engineers feel pressure to learn
01:05 - new tools to use in their projects so
01:08 - how can you keep an overview and not get
01:11 - too overwhelmed by all this but at the
01:13 - same time still stay up to date and know
01:15 - when a new tool comes up that can
01:17 - actually make your work easier and more
01:20 - efficient or help you and your team in
01:22 - your software development and deployment
01:23 - process so first of all when we're
01:25 - talking about developments in the devops
01:27 - space there are two main categories the
01:30 - concepts and the tools and it's
01:33 - important to separate them
01:35 - concepts are the foundational basis of
01:38 - devops processes they are guidelines to
01:41 - how things should be done therefore
01:43 - understanding the concepts before
01:45 - learning the tools is super important
01:48 - it's also important to understand that
01:50 - tools are just means to an end every
01:53 - tool is there to solve a problem or to
01:55 - serve some purpose so understanding the
01:58 - concepts helps you know what processes
02:01 - you have what problems and challenges
02:04 - are in those processes and when you have
02:06 - that as a basis then you can start
02:09 - learning the tools that can actually
02:11 - solve those challenges or implement
02:13 - those concepts
02:15 - to give you some examples
02:17 - before learning any devops tool you
02:19 - should actually learn the ci city
02:21 - concept first
02:22 - what does a cicd process look like what
02:25 - challenges does it have what is its
02:27 - purpose which is to release application
02:29 - improvements fast and in an automated
02:31 - way to the end users what does it
02:33 - include what steps does it have like
02:36 - building the application testing
02:38 - deploying to development to staging and
02:41 - so on and then you learn the tools that
02:44 - implement this concept and help you
02:46 - achieve its goals
02:47 - so if you're just getting started in the
02:49 - devops field this will be the first step
02:51 - or the first concept to learn and
02:53 - actually have a video exactly on the
02:55 - topic that you can check out or another
02:57 - example would be before learning any
03:00 - infrastructure is code tool for example
03:02 - you should learn the infrastructure as
03:04 - code concept first again asking yourself
03:07 - why is it needed what is its purpose
03:10 - like doing manual work versus automated
03:12 - code for infrastructure provisioning
03:15 - because manual work is more effort it
03:17 - has more mistakes it is less transparent
03:20 - and so on and also understand what are
03:22 - the challenges of the infrastructure as
03:24 - code concept and then again you learn
03:26 - the tools that implement these concepts
03:29 - and you also understand how these
03:30 - different tools address those challenges
03:33 - so now when you're learning devops tools
03:35 - or you know a bunch of them already and
03:37 - the new tool comes up your first
03:39 - question to challenge that technology is
03:41 - to understand what problem does it
03:44 - actually solve and is that problem
03:46 - relevant for you so you have a big
03:48 - picture of the concepts and the devops
03:51 - processes because you learned the
03:52 - concepts first so now you can easily fit
03:55 - each tool into that big picture by just
03:58 - understanding the main purpose of the
04:00 - tool on a high level
04:02 - so when i start learning a new tool the
04:04 - first thing i want to find out is
04:06 - another cool features that it has or the
04:08 - cool ui that it provides or that it can
04:11 - integrate with 100 other technologies in
04:13 - the ecosystem or that it's super cloud
04:16 - native kubernetes native with automated
04:18 - workflow fancy stuff but instead my
04:21 - first question is
04:23 - what problem or problems does it solve
04:26 - and where does it fit on the big picture
04:29 - of devops
04:30 - the simpler the answer the better and
04:33 - there are tools that solve one main
04:35 - problem but there are also tools that
04:37 - solve multiple problems in which case i
04:40 - want to find out which one of those
04:42 - problems are the most important the main
04:45 - ones because a tool is usually good at
04:47 - one or two things and the rest of the
04:49 - stuff or rest of the use cases are
04:52 - additional bonus features so to say so
04:54 - in this step i investigate the use cases
04:57 - of the tool
04:58 - once the problem is clear
05:00 - then you can evaluate and measure how
05:02 - important or relevant that problem is to
05:05 - decide whether you want to dig into that
05:07 - tool deeper and basically learn more
05:10 - about it and for already established
05:12 - tools like kubernetes docker terraform
05:15 - and so on which you anyways have to
05:17 - learn it's still the first step because
05:20 - you may know that everyone is using
05:22 - kubernetes and docker but you may not
05:24 - know why and that's the first thing you
05:27 - should understand and find out when
05:29 - approaching any new technology after
05:31 - that you can dive in the how the tool
05:34 - solves that problem
05:35 - there are many tools that address the
05:37 - same issue
05:38 - but in different ways so if you are
05:40 - learning an infrastructure as code tool
05:43 - like terraform you should find out how
05:45 - it does its job like terraform uses
05:47 - state management it has modules and
05:49 - providers it uses declarative approach
05:52 - and it has a command line interface with
05:54 - its own commands and how it connects to
05:56 - the cloud platforms that you want to
05:58 - provision infrastructure on and so on
06:00 - and also how does it compare to
06:02 - alternative tools that you may already
06:05 - know about so you learn about the core
06:07 - concept of the tool itself on a high
06:10 - level overview once i understand the
06:12 - problem and the use cases of the tool
06:15 - now i know why i'm even learning it i
06:18 - also understand how it works
06:19 - theoretically
06:20 - so i know more or less how i could
06:22 - integrate it into my existing workflow
06:25 - processes
06:26 - so now it's time to get started and
06:27 - actually use the tool because the
06:29 - confidence comes from practice
06:32 - and here is a super important thing to
06:34 - understand about practicing a tool
06:36 - hands-on you should always practice with
06:39 - an actual example use case something you
06:42 - can actually apply in real life projects
06:44 - so the way i do it is i first define the
06:47 - actual simple but realistic use case
06:49 - with the tool because starting with
06:51 - hands-on practice without an example use
06:54 - case can be demotivating and confusing
06:56 - let me give you some examples
06:58 - if you want to learn how to use docker
07:01 - just take a simple application and
07:03 - dockerize it with dockerfile to learn
07:06 - how this process works
07:08 - then think about how you can build and
07:10 - run this dockerized application by
07:12 - implementing these simple steps you will
07:14 - actually learn much more than just
07:16 - randomly learning some concepts about
07:18 - the tool through the official
07:20 - documentation or some blog articles so
07:22 - you create a use case like i have a
07:24 - basic node.js application i dockerize it
07:27 - i build it i build an image push it to
07:30 - the repository then i run it and test
07:32 - that the application is accessible and
07:34 - for each step you can learn how to do it
07:37 - and what are the docker concepts related
07:40 - to implementing those steps
07:42 - later you can expand that use case like
07:44 - you want to add a database connection to
07:46 - your dockerized node.js application and
07:49 - you want to run multiple docker
07:50 - containers so you learn about docker
07:53 - compose and how to use it another
07:55 - example would be if you're learning
07:56 - kubernetes again think of a simple use
07:59 - case like you already have a dockerized
08:01 - application with two other services so
08:04 - you want to deploy all of them in
08:05 - kubernetes with multiple replicas by
08:08 - doing just that one simple use case you
08:11 - will already learn so much about how
08:13 - kubernetes works and how to deploy
08:15 - applications in it and again you can
08:18 - expand on that use case and add more
08:20 - steps
08:21 - or let's say you're learning terraform
08:23 - as a use case you may decide to automate
08:25 - a process of creating eks cluster on aws
08:30 - or creating an ec2 instance with a
08:32 - security group in a new vpc and so on
08:35 - now of course you need some resources to
08:37 - be able to learn how to do this right i
08:39 - personally go to the official
08:41 - documentation or blog articles and video
08:43 - tutorials to learn how to do each step
08:46 - individually so specifically on that
08:48 - topic because it's much easier to find
08:51 - out resources on specific individual
08:54 - steps than just learning about the whole
08:56 - setup and while i'm implementing that
08:58 - individual step i also learn all the
09:01 - concepts related to that on the way or
09:03 - find tutorials and online courses like
09:06 - ours where the instructor actually
09:08 - guides you exactly through this kind of
09:10 - simple but realistic use case that you
09:12 - can follow along and again you can
09:14 - expand on that finding more advanced use
09:16 - cases at your work or just by yourself
09:18 - and trying to implement those as well
09:21 - now there is another super important
09:23 - thing i want to point out when learning
09:25 - the basics of a tool especially if it's
09:27 - a tool like kubernetes or docker that
09:30 - you know you will definitely need long
09:33 - term in your devops career and it is to
09:35 - have patience while learning so take
09:38 - your time when learning the foundational
09:40 - concepts of the tool in order to avoid
09:43 - leaving any knowledge gaps and trust me
09:45 - it always pays off at the end because
09:48 - building on a good foundational
09:50 - knowledge is way easier because you
09:52 - always have reference knowledge for new
09:55 - stuff and the more you learn the more
09:57 - things make sense the things just click
10:00 - more and learning new stuff becomes more
10:02 - and more easier in comparison if you
10:05 - rush into things because you don't have
10:07 - patience or you don't have time without
10:09 - really understanding the main concepts
10:11 - and learning things kind of chaotically
10:14 - with lots of knowledge gaps
10:16 - you may actually get more and more
10:17 - confused if you just add stuff to it so
10:20 - learning new things may actually become
10:22 - more challenging and finally you have to
10:25 - understand as an i.t professional
10:27 - learning never stops because the tech
10:30 - world is rapidly changing new versions
10:32 - of the existing tools are being released
10:35 - as well as new tools are being developed
10:37 - all the time so with the above
10:39 - techniques that i mentioned you will
10:41 - have a good foundation for quickly
10:43 - evaluating new tools whether they are
10:45 - relevant for you and worth learning but
10:48 - also if you have a good understanding of
10:50 - a specific tool you can easily learn the
10:52 - new features of that tool as well so
10:55 - it's also a mindset of lifelong
10:57 - continuous learning and finally you of
10:59 - course need to be aware when a new
11:01 - version of a popular tool gets released
11:04 - or a new technology is becoming more
11:06 - mainstream and popular so you have to
11:07 - adopt that and for that you also have
11:09 - many ways to stay up to date with
11:11 - industry developments like you can
11:13 - follow some industry peers on social
11:15 - media accounts or blog platforms that
11:18 - basically post about these kind of new
11:20 - developments you can join devops
11:22 - communities
11:24 - either online or offline communities
11:26 - where people exchange this kind of
11:28 - information or you can also subscribe to
11:30 - youtube channels like ours tech work
11:32 - with nana but also many other channels
11:34 - that make really great devops videos on
11:36 - devops trends as well and much more ways
11:39 - like podcasts newsletters and so on so
11:41 - if you're interested you will find a way
11:43 - to stay up to date
11:44 - now i hope sharing my experience and
11:47 - tips on this topic was useful for you
11:49 - please share below how you are tackling
11:51 - this challenge and which of these tips
11:54 - was actually the most helpful for you
11:56 - and generally share your experiences how
11:58 - do you keep up with technology
12:00 - developments and what are some of your
12:02 - tips on that and with that thank you for
12:04 - watching and see you in the next video
12:11 - you