hello everybody my name is jemmy and today i will be giving you a brief overview on collections in python collections are like lists tuples dictionaries etc so i'm going to be doing that in jupyter notebook the way to open jupyter notebook is if you're in windows type in cmd in your command prompt click enter then just type in jupyter notebook okay and it should open in your browser uh just wait a few seconds okay and there we go so now once it opens uh what you want to do is you want to click on new python 3 ipy kernel but since i already have it i will just um open it from my uh jupiter notebook and by the way the link to download this notebook is in the description if you want to go check it out you can um but just download it and then work with me through collab or jupiter notebook anything would do so now let's get into the video so let's look at lists first since list is one of the best ways to store data in python and is one of the most used ways either um two um so let's look at how to create a list by the way a list is mutable which means that you can change it throughout the coding instead of like not being able to change it you can like add stuff to it you can delete stuff from it uh but yeah let's look at how to create it so right here is a list name pokedex uh and in pokedex there is pikachu ev ditto and magikarp and let me show you the way to create one so this is a list now you're declaring pokedex as an empty list so to create a list you need two brackets one to uh the right bracket in the left bracket once you did that anything you put in into this list such as numbers integers strings and uh another list i can you can also put a list inside of a list uh anything in here that is separate by a comma is a part of the list so now we have three objects eight an integer sdf a string and another empty list so you can put anything inside of here but i'm going to create a list of strings so i'm going to put in my pokemons pikachu eevee ditto and magikarp all of them are strings so once we did this we need to know a bit of information just like yesterday how i was saying stuff about indexing and slicing list index start from zero so pikachu zero eb is one ditto is two and magikarp is three and just to remember this so you don't get confused like pikachu is one and then you put in one and it's actually eevee so don't get confused it starts from zero so now let's just print out the whole list so if we were to print out the whole list it would look somewhat like this pikachu eevee ditto magikarp with the brackets and the uh the quotations but however we if we want just a specific one um or a specific pokemon we can uh type it type in their index and we will get it so let's pretend we want ditto ditto is index two so if we put in two there we go just the plain text ditto and if we want like pikachu and evie then we would put in one through three like this and now we need to know something um three you might say hey isn't three all the way to uh magikarp well yes it is but the reason we want to do this is because all every time you want to slice something you need to have one above the limit so if we want ditto and ditto is two we need to put it to three however because if we put it to two then we'll just print out eb and uh this doesn't go this doesn't apply to starting hover the start just goes with the starting pokemon so eevee is index one so we put index one here if you put index zero then it will be pikachu to ditto but we don't want that so you want one two three like so um and anyways that is the basics of a list let's move on to the list structure so as i said earlier inside of a list there can be another list um and we can also access this list so what we need to do is first uh let's look at the main list so this big one which is called pokedex so this big list right here contains pikachu eevee ditto magikarp and one smaller list uh and now let's look at how we can access a smaller list if we count the index we can know what uh indexes is which is 0 1 2 3 4. so this is index 4 right here and if we were to do print pokedex index 4 then it would print out the whole list or the smaller list and if we want to access one of these individual numbers we can also do that so if we want pretend number 20 then we can do pokedex 4 and then after that we have another brac or yeah another bracket one so it will go to bracket four and it will go into bracket uh no sorry it will go to index four of pokedex and it will go into index one of the smaller list so now we can access the number 15. i'm so sorry um i got confused myself so remember when i said the index starts from zero well we need to put zero in there and now we get 20 so so sorry um i got confused myself there but yeah we can access smaller lists throughout the big list and if we were to have another list inside of this list i mean you can go on forever but we're not going to do that and the more list you have and if you want to access the smaller one you can just add print add brackets through your printing and it will go into each list individually and now let's look at lists with functions and if statements so this is basically what we can implement or apply to our everyday life and i'll show you an example right here let me drink some water um but yeah this is a way to implement our list i made this by myself so uh yeah so we have our pokedex here with pikachu eevee ditto magikarp and the smaller list and also we have a uh input variable here which is called pokemon and the input is enter oh sorry enter there enter the poke watch enter the in your pokemon's name i think i kind of messed something up um enter your pokemon enter your pokemon's name or the pokemon's name okay enter the pokemon's name and then basically it will let them type it in and once we do that we will go into well but we'll create this uh function right here which is called pokeprint and in pokeprint there is a parameter called index and we're going to be using index as the way to access our uh our little um individual strings so pokedex index which is one through four uh go into or know one two one zero two three and then it'll go to that pokemon is that is a pokemon that has pokedex four which is our smaller list index which goes into that smaller list is index attack power i know it might look confusing right now but throughout the when i run it it will probably be more less confusing so stick around um and also after that once we made the function we will go in here and we will go into an if statement so we have if pokemon equals to pikachu which is by the way the pokemon is the text that they inserted if it goes to pikachu poke print zero so now we're going to call up the function and um make it to zero the parameter index equals to zero and alif which is else if uh which is used between if and else um if pokemon equals equals to ev poke print one and so on until magikarp and after that we put an else and in the else we put print your pokemon is not currently inside of the database to let them know that it's not there yet so uh yeah so if we were to try this out and let's pretend we type in something random or something not in the not in the data set like moltres then it goes your pokemon is not currently inside the database however if you were to type in something that was inside the database like eevee like so and here is the string that they will pop up evie is a pokemon that has 15 attack power as i said earlier this doesn't really make sense but this makes a lot more sense because you know we can read it easier but yeah this is how you can implement it we can do other pokemons too that we have like magikarp and there we go but yeah as i said earlier you can do many things with lists uh a lot of good things and this is just an example this is of course really small scale but you can enlarge it to be a really large scale project that you can make and list will be a part of them i promise you'll lose you will use lists inside of your project once or twice and now let's look at how we can uh add some values onto our list so pretend we have a list made of pikachu eevee ditto and magikarp right uh and pretend we wanted to add another uh pokemon to it so instead of having to like type it out again like this we can just use the command dot append and inside of data pen we can put anything we want inside there and it'll add it to the end of the list so we're going to be adding moltres there and let's print out the pokedex before it was before moltres is added and then printed again after moltres was added so as you can see there is the difference uh in here there is no moltres but then on the second list there is uh moltres at the end now let's pretend we want to remove a list or a value um let's pretend we have this pokedex which is a list of pikachu eevee ditto magikarp and we're going to print out the list before it was changed but then we're going to print out the list after it was removed so we can put dot remove ditto so now ditto will be gone uh it'll print out the pokedex so it will delete dudeo as you can see ditto is gone from the second list but it's still inside of the first list now uh instead of having to uh delete and then insert uh how to call it instead of having to delete and then reinsert a new pokemon we can just replace the value using the command uh pokedex bracket three or basically where you want to go equals to your pokemon that you want to add or no sorry replace so let me tell you in more detail so this one right now is the pokedex which is the default pikachu eevee ditto and magikarp we're gonna print it out one time before it was changed then after that we'll print it again after jolteon replaced index number three which is magikarp so once we did that let's look at it so we can see here that the first index magikarp is still there but the second index magikarp is gone and instead is it's replaced by jolteon jolteon by the way is a electric dog it's an evolution of eevee uh and i'm pretty sure to evolve it from evie to jolteon in pokemon go you gotta name it sparky or spark i'm not sure but i'm pretty sure that you need to name it something like that in order to get jolteon and now we need to check the list values so pretend we have a really really long list okay and we want to check it what like pretend we forgot like what we added there and we want to see if it's still there we can find it using this command so in here we have a function called check and inside of a check there is parameter called pokemon and inside of this function what it goes is an if loop if pokemon in pokedex so pokemon by the way is this uh perimeter if it's inside of this list then print the pokemon or the index is still in the list but if it's not then just print pokemon is not in the list or the what they entered in so and to trigger this function what we need to do is we need to type the name of the function which is check and moltres which is the index so moltres is uh not inside of the list so let's see so now we can see that moltres is not in the list however if we were to change it to something inside of the list like uh ho oh pretend ho oh then it is in the list ho o is in the list but if it's not then it would say the pokemon is not in the list okay now let's move on to iterating lists uh which is a for loop and iterating basically means to type out each uh each item inside of the list individually so it will go pikachu then evie then ditto the magikarp on separate uh rose so let's get started so we have a pokedex or a list that contains pikachu ev ditto magikarp and then we want to print each of them individually so what we want to do is want to create a for loop and inside the for loop we have a variable called a and a is each of these values put together one one by one and for a in pokedex print a so now it's going to be uh going to type out a which is these values as you can see it types out all four pokemon pikachu eevee ditto and magikarp so once we are done with this let's move on to stack list structure so we can put our list inside of a stacked structure what extracts sorry a stack structure is is basically a type of list um and we can pop it too a pop will basically up delete the last uh the last item on the list so in this case it is hooh and by the way our list is moltres articuno zapdos and ho oh and it'll print out the pokedex before it was popped off and after that we can add pokedex.pop and parentheses at the end and then it'll pop off the the hooh which is the last item in the list so let's look at it so we can see up here that ho is still there in the first list but then the second one hooh is gone and we can also continue doing this uh until we like have what we need so now we delete it from ho oh zapdos we deleted the 7000 hello and we can do this one more time so we can only have multis now there we go we deleted articuno zapdos ho oh and now we're only left with moltres if we delete moltres then it'll just type uh it'll just print out the type of the list or it just prints nothing so nothing anymore but if we i'm curious why we do one more time it'll print the type right no it comes with an error okay okay if we do it too much times then it'll come in here but we do it uh just what we need but um anyways let's just run it again so there's no error i hate errors on my screen um i can't work with any error but here we can see that we are at the end of the list and now we're going to look at tuples tuples is a cousin or a brother of the list it is kind of the same thing except that tuples are immutable which means they cannot be changed oh basically it means they cannot add anything in there they cannot delete anything from it uh they just you have to set it again if you want to change something so we have a tuple here called backpack and the way to create a tuple is similar to a list but the tuple is you need to create it with parentheses so parentheses will equal to a tuple and brackets will equal to a list and inside of this tuple there is uh strings um this is our backpack which is the name of the tuple there's the super potion the revive crystal the remote battle pass the pokeball so it has these strings inside of our tuple and let's just print out our tuple really quick or backpack and you can see that it just prints it out normally but pretend we want to try to add something to it so backpack dota pen gymbad so we will uh theoretically add gym badge at the end of our tuple but let's see what happens so you can see that there is an error and it says attribute error tuple has no attribute append which means that tuple cannot support this command because it's immutable so we cannot use this and now let's look at deleting tuples so you might have been like hey this is deleting a tuple right but it's different from deleting a thing from a list uh when we're deleting from a list we're deleting a single item but if we want to delete a tuple we can't delete a single item instead we need to delete the whole tuple and uh let's take a look at it so let's click delete or not delete but let's do delete backpack and here it is a backpack is not defined what uh what do you mean backpack is not defined ah yeah nevermind i am dumb um but the reason it's not defined is because we deleted it so if we don't want to delete it and we can just do like this and there we go it's still here but if we delete it then it will say it's not defined because it's gone so there's no point of being there but yeah so this is how to delete uh tuple and we can look uh slicing tuples now slicing tuples is kind of like using a list where you can have uh just a slice of it so we're going to do revive crystal and remote battle pass and if we want those two then we just do what we do for a list one two three and the same rules apply for a tuple two the limit or the end the stopping right here needs to be one above so that it prints out the things you want now it will print out revive crystal and remote battle pass so yeah this is uh two collections in python ep1 tomorrow there will be an ep two uh stay tuned and watch it i hope you enjoyed this episode thank you very much for watching see you in the next one bye