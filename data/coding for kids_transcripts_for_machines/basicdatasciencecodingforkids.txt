hello my name is jemmy and today i am going to be giving you a brief overview on a basic data science and basically it's just uh syntax in python uh we probably mostly know all this already i'm just going to uh give a quick review over it so these are the basic like functions or like the basic uh what python can do basically and i'm going to be testing it in google collab since it's easy and it's very accessible um you just need to go search google collab click the first link and then sign in and then just click uh file and then a new notebook and then you just can come into a page like mine although mine has code and um yours probably doesn't so yeah let's get into it so the first thing um one of the most basic things is um um math in python so here is math uh here's math um basically this is one plus one and if i were to run it they would come out two uh one second it's going to connect to your account it's gonna initialize so you gotta wait for a bit and if you're wondering how like i got this uh doggo or like these kitty cats what i did was i just need to go into uh edit and then go to notebook settings and then wait no sorry go to uh tools settings and then go to miscellaneous and then in here we just um enable core key mode and kitty mode and then the site i set it to dark if you set it to light then it's going to burn your eyes like so holy um so yeah i recommend saying to dark because it's more better for coding in my opinion light it just makes your eyes like be gone um yeah so yeah first is just addition and you can see that it comes out two and uh that's just one plus one two minus one is going to come out one one times three is going to come out three i should probably just re restart runtime which uh which should just restart all these output so let me restart runtime there you go restarting initializing all right so now i'm just going to go ahead and just going to clear out the output so we can look at it together um these are really basic stuff so uh we should be able to cover them in no time okay so i just finished deleting on all of the outputs and now we're going to be back at this page so uh shift enters to run okay one plus one equals to two two minus one equals to one one times three equals to three and so on and then in here one divided by two it goes to zero point five and then two point one minus one this just goes to show that python can also run um floats not only integers like there one point one and then if you're wondering how to use exponents and this is how uh two two uh stars um instead of one like multiplication instead we have two and that is exponent so two by the power four equals to four oh sorry sixteen um yeah i look really stupid um so yeah four squared is 16. i forgot uh yeah anyways okay we're not going to be looking at that too much so for now we have the percentage sign it's called mod uh mod is to just get the remainder so we might you might have learned about remainders in like first or second grade or you divide two numbers and then like the leftover number then you just like use that you just like put r and then the leftover number uh yeah so this is basically like that so pretend i have five right so then the oops i deleted the thing so pretend i have five divided uh or like mod two two goes into five two times and then there's a leftover of one and it would print out the leftover which is one like so and then here uh python also knows pemdas which is orders of operation so parentheses first then exponents um then multiplication and division are the same thing and then addition and subtraction so you can see parentheses it'll do this and this first and then it will times each other so it would be five ten times together equals fifty so it should come out fifty like so okay and then in this one just print hello world um you can print it with uh quotation marks like so uh and then it will get you this result hello world and you can print it with single quotes too and it will also get you to a result of hello world and then here we're going to be moving on to lists um list is uh just really simple it's like a a place to store data in python so in here we create a list by having two brackets like so um i might need to increase it because yeah like so there's two brackets like this and then inside of the brackets there are integers uh strings another list in there anything basically and um just put it inside of this and have the name of the list equals to uh like so and then in between each uh object there is a comma to separate them and then let's just print the list so right now the list contains of one two three and high there you go one two three high and to get into a specific part of the list like pretend you only want the number one then it would be print list but then inside of there it would be um printed not parentheses of brackets and then the digit you want and then you can also hover your mouse over it and you can see the list like list um and then so number zero or list uh position zero is one and one um position one is two position two is three and position uh three is high it might be a little confusing because uh in python we start from zero and then we work our way up so the first position would be zero all right let's run this and it should be one but okay and pretend we want like uh one two three but we don't want hi then we would print list uh brackets zero parentheses and not parentheses colon and then to the one that you want so right now it's three and we got if we want three two then we gotta make sure to change this to uh no 3 since it stops at the last one so 3 over here this one right however it would stop before it so it would be 1 2 3. so we got plan 1 over um like so and then in here list zero equals to new this is how to append into a list there's other ways too um such as dot append uh but this is one of them list z uh list bracket zero equal new uh you can assign this to wherever you want like what position you want this new uh object to go in and right now we want to go into uh slot zero so if we were to run this then it would uh do that but we wouldn't see it yet since we need to print it out again oh no sorry i need to print it separately because or else it would just set list so print list like so and there we go new two three high and you can see that one is also removed since this one just replaces one um there's also another way um i'll show you uh down here it's dot append and it's also a way to do this however dota pen doesn't require you to replace it it just uh it just like adds it in uh whether rather than just replacing it but this is one way of adding a new thing into the list and then here this is uh we're moving on to complicated list i called it c list because it's a little bit more complicated uh in here uh you can see that there's a list inside of the list right so it's a bit complicated uh so there's a b c and then after that that's a 0 b 1 c 2 and then in number slot number 3 there is a list and now you can access this list by just saying c list three which prints out that a smaller list and inside that smaller list we can go into even um so like pretend we want number three right so we would just print two into that smaller list and there we go we have the number three so you can go even inside of this list you can have another list and another list in another list and you can even have multiple stuff like a dictionary and i'll be going over a dictionary soon right here and this is a comment by the way uh you just need a hashtag before and then it'll just uh be a comment the comments are used for uh data scientists or programmers to know like what this code is used for so the next time they come back they won't forget what it is uh yeah so this is a comment and it's used for data scientists to know and programmers to know uh what it is what this piece of code is used for and um you can just make it anything and you can put it anywhere too as long as it has the hashtag in front of it okay let's move on to the next one which is list i mean dictionaries so dictionary equals to name uh this is called i'm pretty sure this is called the item and then there's another one inside of here and you can just call out the item and it'll just it's sorry it's just um so the dictionary right there is the item and then inside the item there's the object and oops sorry and then there's the object so you just have to call out the item well since he wants to be in the scene so badly here he is um you really wanted to be here um say hello to the camera hello hello good boy okay i can go hey don't be naughty cat hello say hello all right you can go now don't come back all right so yeah that was a quick uh bang bang thingy he wanted to come in so i let him in but yeah continuing of what we just said um there's the item and then there is the object so you just have to call out the item and it'll print out the object so in here the item is name and then the object is gemmy and what you do is print uh the name of the dictionary and then inside of the dictionary we have the of the brackets and inside the brackets we just print out the name of the item uh in the quotation marks or single quotes to make sure that it's like it it's like a string and we're gonna just shift enter and there we go it prints out gemmy um and in here to create a dictionary we need uh two curly brackets not like a straight one anymore and inside uh separating the uh the item from the object we have a colon um like so and yeah it will print out the object for us if we call out the item now let's move on to another thing it's a tuple or a tuple or a tuple you know people have a lot of uh a lot of opinions about uh this this word um p some people call it tuples some people call tuples some people call it tuple i don't know so i'm just going to call it tuple um or tuple i don't know either i'll just call tuple okay i'm just going to call it two tuple uh i just call it whatever you want okay um so i'll call it two bull and uh a table is very similar to a list being that they are uh similar to each other um a dictionary is not similar because it has the item and object however a tuple also stores uh objects just like a list does however there is a big difference um in tuples right you cannot edit it meaning that you cannot like add any more information uh or you can like delete any information um it's like set in stone so it's like when you create it then it's set uh and inside of a list however we can add it or replace it or cut it out as we saw earlier so both of them have their good and bad sides um but yeah a tuple is different from a list but they are pretty similar and into create a troop tuple we need uh two parentheses surrounding our objects inside of the tuple and then once we have it then we're done so inside of this tuple i have one two three and when we print out the tuple we can print out the whole thing like a list or we can print out one of them which is going to be number two this time so tuple uh brackets oh what type is not subscriptable okay so yeah this is because you can't edit it so we have to print out the whole thing yeah okay print tuple okay i don't okay let's just delete this what if we just do like that it just prints out tuple um okay let's try uh hello okay hello equals to the tuple maybe you can't use tuples since it's a keyword or something hello is not defined and you forgot to capitalize hello is not defined okay let's try it now there we go so i don't know why you can't do it in separate cells um but it you can't do in separate cells i guess uh so in here i renamed my tuple to hello and we could in google call out you just need to type out the name then it prints out it for you however it we should inhabit this because in other like ides then it wouldn't do this for us um but in google collab is an exception so i don't understand why it couldn't run in separate cells however we can just run in the same cell it doesn't really matter so in here we're going to do this use the same code we did earlier we're going to print out number two there we go it prints out number two okay let's move on to the next one so this one let's try to add in a new uh and a new object into the tubal it's not going to work i it's gonna come it's gonna come up an error but i'm just going to show you that it's different from a list because you can't add new stuff there we go it comes up an error this type does not support um does not support item assignment meaning that the tuple you cannot add anything new or you cannot really edit it it's just set in stone um yeah okay let's move on to the next one this one is a set uh a set is kind of like um another uh tuple but and like a list however it's different so um one two three right let's just run this it prints out one two three simple right let me just delete this i don't like yours um like so and then however if we have this long set right let's see what it does we'll print out one two three yes it does this is because a set will eliminate every single duplicate number and will only have the same uh number so no matter how much ones you put on there if the list is just one it'll just print out one one okay if that makes sense um or like pretend you have a million a's right then it will only print out one if you just uh run it and this is the speci uh the special the special latte no the special the specialty of set okay it prints out only one of the duplicate number or the duplicate object it will only print one of them and yeah that's a set now let's move on to comparing um comparing is like uh the things we do in math right one is greater than two which is obviously not true so we're going to run this and it should come out false it's like a boolean kind of like uh comparing like true or false one equals to one true or false true right yeah so in here this is how to measure greater than this one is equal sign um you don't actually have one equal sign in python instead you use two of them uh because i don't know i didn't make python um but yeah you you need to use two of them uh to make it uh work because uh if we see down here this is one is less or equal to two um if one of these applies then it's going to be true so like so 1 is less or equal to true to 2 is true 1 is greater or equal to 2 none of these 1 are so it's going to be false and then here is n equal it's a exclamation point and then an equal sign so one is not equal to one false right all right let's move on to logic operation so this one is just um and and or so and right here we just uh and is very special if one of those conditions are not true then it will be a false however if both of them are true then it's going to be a true okay so let's look at the first one one is greater than zero true one is equal to one that's also true so it should come out true okay now let's look at the true and false so one of them one of the conditions are false and the other one is true right so it's going to come out false since it's like going to do this and um i'll try true and true it should be true right so at first when i was doing this when i start first started python i was like huh i'm just going to make it look like it's a negative and positive number false is going to be negative true is going to be positive because we all know that if a negative number comes with a positive number right it's going to turn into a negative um like pretend um like we have a plus and minus sign next to each other and then it would become a minus because let me just show you in the example like one plus one like so and then like a plus and in brackets negative two plus uh one right so then we would do both of the equations this one would come out two this would come out um what would come out negative one right so then we will open the parenthesis and now we don't usually see this in math but we have a plus and minus sign next to each other and this would turn out into a minus sign and making this into one but yeah this is not math class but i'm just going to say that at first i thought that was going to be an accurate represent representation however once i looked at false and false right so two negative signs would equal to a positive however let's try false and false it still turns out false since um if one of them is false then it will be false okay and let's look at or now so one of this isn't true one equals to two is not um true it's false two equals to true on the other hand is true so if we were to run this what would come out it would come out true um in or only one of the conditions need to be true for it to say true um that's a that's a wrap um but okay it's unlike and which both of them needs to be true to true to be true however if on or you only need one of them to be true to make the results true it's really complicated because it's true and false but yeah um you probably get a gist of it and now let's look on if alif and else yeah so we're going to be moving on if alif and else so let's start so if um is just like you know in basic programming if there's if this then that um alif is a combination of elves and if uh else you can see it el and if is if and then a lift is just like if but it's just between if and else and in else we just do the rest in else so if one plus one equals to two then print first if a lift oh sorry a lift three goes to three print middle else print last so if it goes into one plus one equals to two it's going to print out first right so let's try yeah first however if we change this to three okay it's going to not work anymore so it's gonna pop out and it's gonna come to a lift and it says middle since three equals to three um and print middle however if this wasn't correct either let's pretend like it's an equal to it would print out last since it pops out of a lift and it goes into else and then since else doesn't have a condition it just prints out whatever's in else which is last um and yeah that's how if alif and else works now let's look at some loops uh let's begin with four loops so this is my list that i'm going to be using for this for loop it consists of one two three abc okay and let's move on to this one for item in for list print item so this will just print out one two three abc okay there we go um it just like repeats itself until it's done so for item an item in here can actually be anything it can be a b c d whatever you want um it'll print it out and in here we have four item in for list print item plus item so we're going to add all these up to so let's see what the results so you can see it doubles two four six instead of one two three and instead of a b c it's a a b b c c and then in here it's four item in for list print yes so this is just just printing out the printing out yes so just sees how much um there are in here uh and every time there's a list sorry there's an item then it'll print out yes so you can see there's six and then there's gonna be six yeses and let's move on to the while loop uh the while loop in here uh it's pretty simple kind of like the for loop however the while loop it's like while this then you can run this however if it does if it's out then just stop so here we have a while list and it's one while while list is smaller than 5 print while list is and then it just prints out the number and then every time it repeats itself it adds a 1 to the while list so there you go it's 1 2 3 four if we wanted to go to five then we gotta make it six like so and then now let's move on to four iron range uh this is another for loop i just forgot to add it up there so i add it down here four iron range it's pretty special you can limit how much you want um like repeating itself so if you wanted to repeat it five times then you set it to five um like so it print zero one two three four because it will print i and i is this number so if you want to go to like 10 right um we will have to 10 0 1 2 3 4 5 6 7 8 9. uh this is because it starts at zero it actually has 10 items but it just doesn't have the number 10 itself and now let's move on to list com comprehension or compensation list compensation okay the in this compensation there is sorry i just hit the mic um in this compensation there is two main things the map and the filter so the map is it gets this um it you can just like it's a kind of like a way to um eliminate some of the stuff so you can have like a you can have like a data that you want two three four you can see that my list was 12 23 and 44 but then it just got the second number of the list and it got two three four um and yeah that's it okay let's move on to this one uh let's see this one is complex equals to this is a filter now so just filter out the things you don't want so if the the list or the item is longer than five uh then five how do you call it then five uh characters then it won't print it out so the only two two items that exceed five characters are motorcycle and scooter so if we were to run this it would only print out motorcycle and scooter and however if we were to do this uh doesn't no that's not gonna work um is less than five that would print out car and bus there we go car and bus and yeah you can do a lot of stuff with it now let's move on to the last one which is functions so this one is a function called square and it's just going to square our how you call it it's going to square our uh the variable that we put in it right now it has a local variable of x and we're going to be setting x so let's uh define it let's run this first um so we can put in the answer we can put in the number and then it will square it for us so we put in two it's going to give um give us four and four there we go if we put in like a bigger number like this oh gosh it's going to come out the squared version of this and we could make this bigger even um like make it uh not squared instead let's make it cubed then we could just change this to times x again and then it would become not square anymore it's going to become cubed as you can see even bigger and yeah that is it for today um i hope you enjoyed it was quite a long video averaging around 30 minutes um but yeah i hope you found something useful out of this see the next one bye