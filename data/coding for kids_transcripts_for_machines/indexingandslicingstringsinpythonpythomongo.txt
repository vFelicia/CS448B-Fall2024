hello everybody my name is jemmy and today i will be giving you a brief overview on indexing slicing strings so basically what this is is um you know we're going to be do looking at indexing slicing uh and mostly we're going to be doing these two topics on strings so let's get started so first off we need to know that in a python string uh each character is labeled into a number so pretend we have this string or a text if you don't know what a string is it's basically a word or text um in quotation marks or single quotes like this one so pretend we have the string pikachu right uh there is one two three four five six seven there is seven letters in pikachu however in python we start counting from zero so p would equal to zero i would equal to one k would go to two a three c four h 5 and u 6. so this is the way we count in python um from zero up and so this is basically how the numbers are assigned to the letters and we'll be looking at how to index that so let's look uh pretend we only want pika right we only want pika and that would be from zero to three so let's do that okay uh this pica however you might notice it's not zero to three because if you were to do zero two three it would only do pick this is the the reason this happens is because once you're indexing something you need the stop or the ending to be greater than the limit so if you want to stop at three you have to go to four so oops sorry four like this and it should print out pika and that is a rule while you're indexing also negative indexing also is there so we learn how to do uh indexing with positive numbers now let's learn how to index with negative numbers so n is the last one right is oh this is pokemon now so it's not pikachu it might be a little confusing but it's okay so the last number now is the greatest number here i'll put it this way i'll just change it back to pikachu so we can get a better understanding pikachu like so okay and i'll put these two next to each other like so oops sorry um if i paste it down yeah it's gonna mess it up but basically we're gonna have zero here right um and we're going to have uh p here and then down here we're going to have oh we're gonna we're not gonna have p there we're gonna have a dash there and then p here so that would be zero uh and then we just get this one and put it there but yeah you probably get the point um sorry i i will put it in so we can see it better so basically uh it's kind of like a number line if you ever uh experienced a number line before it's like counting negative to positive so let's take a look it sort of looks like this oops sorry okay so here this is what looks like okay so zero is p right and then um so zero is p uh and then if we want to count backwards negative one would be u negative two would be h negative three would be c negative four would be a negative five would be k negative six would be i and negative seven would be p now the reason u cannot be zero in this case is because a p right here is already zero so you can't have it uh two numbers or not two numbers two letters that share the same number it just won't work so once we get this information that of negative indexing let's try it out so pretend we want pika again right let me change this to pikachu so pretend we only want pika again but this case we're going to be using negative right we're going to be using negative indexing so seven is over here so this is the start right and the stop is uh a which is negative four but you can see that uh the same rule applies the end of the slice of the slice or the stop needs to be above one above the limit so if negative four plus one it would be negative three so we have to put the stop to negative three to get pika let's try it out and there we go pika now let's move on to slicing strings so slicing strings um is kind of like indexing but it's different in a way uh let's run it first so you can see that this is kind of what the outcome of the indexing is however the process behind it is a bit different so we have the r string which is python go by the way that's the name of this series and uh s1 which is slice one equals to slice 9 comma eleven this is how you slice you have the first uh you had the first how you call it the first number which is where it starts and then the last the second number which is where it stops and this the rules apply for slicing two the ending needs to be one above the limit and uh i'll show you a unique part of slicing later on but for now this is basically slicing so it's kind of like indexing but there is a special case called step and i will be showing that later so now we're going to be looking at step and in step what it does it it skips so pretend you have uh this whole chunk of numbers which is actually a string one two three four five six seven eight nine right and we want to have only the odd numbers right uh we would do zero to nine which is one through nine and we skip by two so one instead of going to two it goes one three five seven nine so that is what step does it uh it's how much you step or how much you skip so in this case it goes by two so instead of going by one it goes one one two and two three and then it goes one two to five one two to seven and so on so let's run this you can see it prints out all the uh odd numbers however if we want only the positive numbers we need to change the starting point instead of zero to one and now it prints out all the even numbers okay let's move on to the next one which is slicing with four loops so uh slicing we can also use it with four loops in this case right now i am going to be getting the first uh the first letter of the string so we're going to be making a function here our function is called the slicer and inside the slicer there's parameter called string and uh after that we have we're going to um set uh empty string which is result result is a string but there's nothing inside of the string and then we're going to put up a for loop 4a in range lens string len is for length so it finds out how long string is and then it repeats it that much times if a mod two equals equals to zero if you don't understand a mod two is basically uh how what is the remainder of a divided by two and we might have you might have learned this in like third grade or two second grade two grade second grade um but basically when you divide a number and there's something left over there's going to be r and then that number this is kind of like that and if r equal to zero then it goes on to the next one so if uh a mod two equals equals to zero then result plus equals to string a so this might be a little tricky but this what it means is result equals to result plus string so it's going to add itself again and string um but we can shorten that down by doing plus equal to so it will add string a and it'll return the result which means it'll print it out and it will this is to just and that's the end of the function and then this code is just to call up the function and put in the parameter which is python go so let's run this and you can see that it starts off with a p uh slicer is used for getting the first word so if we can type anything like so it'll always get the first letter whether or not it's capitalized you'll always get the first letter so uh that is slicer and let's move on to the next one so now we're going to be looking at slicing string formatting um basically we're going to format uh slicing if i can say that but this is what it looks like so blissey's nickname is bliss i don't know sorry i'm really bad at making up these sentences but uh i just wanted something that works so we have a string that says blissy and we're going to print out a sentence which says blissy nickname is and then in here instead of typing out bliss we can uh we type out percentage sign s uh this is so that we can replace this right here with anything we want so once we did that we can go outside of the string but we're still inside of the parentheses uh and we put a percentage sign string zero to five zero to five actually i don't need the zero um but basically what this does it it's get it's going to get blissey or bliss from blissy uh and it will just print that out so right now it should still print bliss and if we were to change this one to one then would be list like so so yeah that is another way to format spicing next one we're going to be formatting a string so uh this one we have magikarp has blah blah attack power so this is another way of formatting string uh so this is the string and we're going to print string.format attack equals to five attack right here is right this one so this is the variable and we can set what the variable is so right now we're gonna set it as five um and it'll just print out magikarp has five attack power like so now let's move on to uppercase string so this will basically uh make your whole text uppercase if there's two capital letters inside of the string um but if there's one or zero then it's not going to make it capital or uppercase but if it has two or more capital letters then it'll make the whole string capitalized so let's look at it so our function is called uppercase or upper convert and there is a parameter called string uh once we get into it we're going to set up our variable which is a variable to zero for i in string if i dot upper parenthesis equals equals to i this makes sure that um if it's uppercase or not and this one upper bear plus equals to one remember that this is basically upper bear equals to upper where plus one and if upper bear is greater or equal to three upper vapor by the way is the count of how much upper cases there are um if it's greater or equal to three return string dot upper return string and this will basically print out the make it so that the whole uh the whole text is upper upper case and then after here we just trigger the function by doing upper convert and then putting in the parameter which is python go and currently it only has one wait i gotta change this to two but currently only has one uh upper case or capital letter so it shouldn't trigger oh oh wait i forgot and he said this is three yes sorry um like so it shouldn't trigger yet but once we fill in two or more so like python go like this then you can see it makes the whole text uppercase and if we want to increase the limit so like pretend two capital letters are allowed but three is not we can change this text to four and now with two capital letters it won't be all capitalized and at the end we can if we want to trigger it then we just put in o like so and there we go it triggers and makes everything capitalized let's look at max value max value is very interesting i find it very fun to uh experiment with and basically string equals to max and then max has parentheses and inside the parenthesis there is a text um this text is just the alphabet uh in order a b c to z um and then let's print string so as you can see it only prints z this is because max value will find if it's a string it will find uh the one with the most value i can say that so z is the farthest out in uh the alphabetical order so it goes for z first since it is the max value that it has and then after that if we can also do it with numbers however the number is still a string so it's a string of numbers um and we have one two nine so if we were to print this out it would go to nine like so and this is like a scenario where you can use it if you have ever an assignment to find the the alphabet with the lowest letter or like the lowest uh yeah the lowest the letter that is the least in alphabetical order if that makes sense then um not the least but the most value in alphabetical order then you just use this code and type in your sentence then they'll find it for you which is in this case y so from very is why um and yeah that is today's lesson however today i did prepare a little exercise that we can do together so this exercise well it's not really an exercise but i want to show oh no don't don't don't don't look at that don't look at that okay so i just want to challenge you guys a little bit and i want to see what this code does so uh at first it prints out enter number and number equals to input so basically we can enter in our stuff and then i equals to 2 which is a variable while i is less or equal to in number which is the input j equals to 2 count equals to 0 this is just to set up some variables while j is less or equal to i if i mod j equals equals to zero count equals to count plus one again i can simplify this to plus equals two but after that uh in here j equals to j plus one if into count is less or equal to one and in number mod one equals equal to zero print i i equals i plus one what does this do well since i already i made it i think i know what it does um basically it will uh you put in a number and it will find the prime factorization of that number so pretend i put like in 10 uh so shift enter and like you put in 10 then it'll be 2 and 5 because those are prime numbers and if they times each other then it'll equal to 10. so this is just to find the prime factorization but if you ask what if they what no sh this is the wrong one um can you stop please okay thank you so what if they put in a prime number like three right so then it'll just print out three because if it's a prime number it'll print itself out again and now let's look at the second one this one basically will reverse any text that you put in and once it reverses it it not only does reversing it will also um it will also make it will be like alternating between capital capitalist capital case capital case gosh upper case and lower case letters so pretend you put it in like uh the right it'll be e ht but e will be capitalized h will be lowercase and t would be capitalized again so it's pretty cool and uh if you want to see your name backward like jimmy and then make it really look weird then you can do you can use this code and there we go yamaga ym meg um and you can see that it's alternate out alternating between uppercase and lowercase letters uh but yeah this is today's exercise and today's lesson uh it's a 16 minute video but i hope you enjoyed thank you very much for watching see you in the next one bye