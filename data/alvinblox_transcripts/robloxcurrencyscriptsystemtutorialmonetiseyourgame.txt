00:00 - today I'm going to be showing you how to
00:01 - monetize your game with a currency
00:04 - system let's get started
00:08 - welcome to this tutorial my name is
00:10 - Albin blocks and on my youtube channel I
00:12 - create tons of scripting tutorials and
00:15 - tip and tricks videos and today we're
00:17 - gonna be learning how to add a currency
00:19 - system into your game so you finish
00:22 - creating your game it's all ready to be
00:24 - published but you haven't monetized it
00:26 - yet so you won't be able to make any
00:27 - money from your players and if you want
00:30 - to advertise your game you really want
00:32 - to make sure that you're monetizing it
00:33 - so you can make a profit on your
00:35 - spending so in this tutorial we're going
00:39 - to create a system which will save
00:41 - currency for every player in your game
00:43 - and will also be able to distribute
00:45 - currency to different players for say
00:49 - for example if they want a game we can
00:51 - distribute some currency to them or we
00:54 - can take some currency away if they were
00:56 - to buy something so let's begin by
00:59 - inserting a script into service script
01:01 - service and we're gonna call this
01:04 - currency script so what we're going to
01:09 - say in the script we're going to create
01:10 - an event which will create a folder in
01:13 - the player which will store all of the
01:15 - currency and other values and then this
01:17 - will show up in game as a leaderboard so
01:20 - to do this we're going to say game dot
01:22 - players dot player added : Connect
01:25 - function PLR just written like this now
01:29 - this is an event and this event will run
01:31 - whenever a new player joins the game and
01:33 - we've got an argument called PLR let's
01:36 - just changes to player so it's a little
01:38 - bit more understandable so this player
01:40 - variable or argument is going to be the
01:43 - player which enters the game obviously
01:44 - we don't know the name yet so we're just
01:46 - gonna refer to them as player so we're
01:48 - gonna want to create a folder in that
01:50 - person in that person's player objects
01:53 - so we're gonna say local folder equals
01:57 - instance new and then in parentheses we
02:01 - can say fold up and we want to give this
02:04 - folder a name so folder dot name equals
02:08 - and then in speech marks what we have to
02:10 - do is we have to call this folder a
02:13 - special name we have to call it leader
02:15 - stats spoke like this with a lowercase L
02:19 - at the beginning if you
02:20 - it's not spelt like this or capitalized
02:23 - correctly it's not going to show up on
02:25 - the leaderboard for your leaderboard to
02:27 - show up on the top right corner of the
02:29 - screen it needs to be called leader
02:31 - stats and then we can put all of our
02:32 - values inside of the leader stats for
02:36 - example we're gonna have a currency
02:38 - we're going to create our currency
02:39 - object now so you're going to want to
02:41 - customize your currency to a different
02:43 - name than mine so we're just gonna say
02:45 - local currency name at the top equals
02:51 - and then in speech marks you can write
02:54 - the name of your currency so if you
02:55 - wanted to call it points you can write
02:57 - points up here or if you want to call it
02:59 - coins you can write your currency up
03:03 - here so I'm going to keep mine at coins
03:04 - and then I'm just gonna want to create
03:06 - this currency value I'm gonna want to
03:08 - store it inside of the folder so to do
03:12 - this we're gonna say a local currency
03:14 - equals instance new and then inside of
03:18 - these parentheses again we're gonna say
03:20 - int value because security is going to
03:24 - be a number an integer so we're just
03:27 - gonna choose an int value and then we're
03:29 - gonna say currency got name equals
03:32 - currency name which is the variable we
03:35 - just declared so you won't have to
03:37 - change the name of the currency in the
03:40 - code you just have to change it at the
03:42 - top here which is much more simple and
03:44 - then we're not gonna assign a value to
03:47 - it yet
03:48 - because we're going to save the data and
03:50 - I'll get onto that later on because we
03:52 - want to load the data we don't to reset
03:54 - it so now that we've done that what we
03:57 - should do is open up the game and the
04:03 - leaderboard doesn't show now that is
04:04 - because we didn't put the currency
04:06 - inside of the folder so we need to say
04:08 - currency dot parents equals folder and
04:12 - we also need to put the folder inside of
04:13 - the player so when they say folder got
04:15 - parent people's player it's best
04:17 - practice to assign the parent of an
04:20 - object after you declared all the
04:22 - properties so don't don't say folder
04:25 - that parent at the start you should
04:27 - declare your other properties first such
04:29 - as the name
04:31 - for example so let's go and run the game
04:34 - now and hopefully you should have a
04:36 - leaderboard
04:37 - yep they'll go so if you have a look at
04:39 - the top right corner of the screen it
04:41 - says our name and also has the coins
04:42 - next to it so if we go and update this
04:44 - value manually in the leader stats it's
04:47 - changed to 500 you can go 5,000 even you
04:51 - can see that the leader leaders that has
04:53 - it dated to 5,000 but when we leave the
04:56 - game it's going to reset back to zero
05:01 - whenever it decides to load there we go
05:03 - so it's reset back to zero and if we
05:06 - just leave the game we're gonna start
05:08 - work on data saving so we want to save
05:12 - the players data whenever they leave and
05:15 - rejoin the game because mainly the
05:17 - player wants to buy some currency if if
05:20 - it gets wiped when they leave the game
05:22 - they're not going to be very happy
05:23 - because they might have just bought it
05:26 - so to save data we're going to use the
05:29 - data store service and so to do this
05:32 - we're gonna create a variable at the top
05:33 - local data store equals a game : get
05:39 - service and then in speech marks we can
05:41 - say data store service and then we want
05:45 - to get our data store which is unique to
05:48 - this game so we say : get data store in
05:53 - brackets I'm gonna give our data store
05:55 - and name so you can call this whatever
05:58 - you want I'm gonna call it I'm just
06:00 - going to call it test data store but
06:03 - once you've decided on a name don't
06:05 - change it else you run the risk of
06:08 - wiping your data because all data saved
06:11 - in this data store will be local to the
06:14 - datastore with the name of test data
06:16 - store so if you went and published your
06:18 - game now and people went into your game
06:20 - and save some data and later only
06:22 - changed it to a different name all of
06:24 - that data is going to be wiped so you
06:25 - need to keep it a test data store so now
06:29 - we've done that all we want to do is we
06:31 - want to create a unique identifier for
06:33 - each player's data now the way datastore
06:36 - works is there'll be a key for each
06:40 - player and so each key will have a value
06:43 - assigned to it and so
06:44 - this key can look like this I'm gonna
06:47 - called ID so local ID equals I'm gonna
06:51 - give it a name so name of our currency
06:53 - and then we could say dot dot and then
06:55 - we can say player but user ID that's not
06:59 - good practice to put the players name in
07:02 - the datastore it's best to use their
07:05 - user ID so we're gonna do is we're just
07:08 - gonna give this currency name dot player
07:12 - ID so this is concatenating two things
07:16 - together so it's actually what we're
07:17 - gonna do is we're going to have some
07:19 - speech marks and then another dot dot
07:22 - I'm gonna have a hyphen in between it
07:24 - now what this is gonna look like is
07:26 - because our currency name is coins it's
07:29 - gonna look something like this coins -
07:33 - and then the player's user ID now
07:35 - because each user ID is unique to a
07:38 - player you're not going to get somebody
07:41 - who has the same key as someone else so
07:44 - what we can do is we can use this key to
07:47 - reference data for a specific player and
07:51 - load it and save it so this ID is
07:54 - basically just used to store a player's
07:57 - data and to find it whenever we want to
07:59 - load or save something so what we're
08:02 - going to want to do now is we're going
08:03 - to want to get the saved data from this
08:06 - ID so to do this we can say local saved
08:09 - data equals datastore which is what we
08:15 - just declared up here we've got our data
08:17 - store and we want to get async and what
08:23 - this does is it looks for any data that
08:26 - is saved in this players ID and then
08:29 - we're just attribute it to this variable
08:31 - so that we can come back to it and we
08:34 - can easily reference it so we want to
08:37 - put the players ID in here because we
08:39 - want to get the data for this this user
08:42 - and then what we're going to want to do
08:44 - is we're gonna want to check to see if
08:46 - they've already got some data because if
08:48 - they've already got data in this
08:50 - variable if it's already been saved we
08:51 - know that they're not a new player so if
08:53 - they're our new player we want to give
08:55 - them a default amount of cash but if
08:57 - they're not we want to load their data
08:59 - that's what we're gonna do right now but
09:01 - of course there's the chance that
09:02 - something might go wrong whilst at the
09:04 - data stores trying to get someone's date
09:06 - or there's an error so what we want to
09:08 - do here with this get async is we want
09:11 - to wrap it in something called a peak or
09:13 - and what that will do is it will if
09:15 - there is an error it will just handle
09:17 - the error and move on so it won't create
09:19 - a massive error which will stop the
09:22 - entire script from working it will just
09:24 - handle it and move on so to do this
09:26 - we're just gonna say Peak or function
09:29 - and then a pair of parentheses and we're
09:32 - just gonna wrap our get async line of
09:35 - code in here so that should make sure
09:38 - that the script doesn't completely break
09:41 - if something goes wrong and what we want
09:43 - to do is we want to check to make sure
09:44 - that this data that we're trying to load
09:47 - is actually there and that this player
09:49 - isn't isn't brand new so what we're
09:51 - going to do is we're going to say if
09:54 - save data in fact what were going to do
09:57 - is we're just going to put we're gonna
09:59 - take the save data out of local here and
10:03 - we're going to say a local saved data
10:07 - equals nil so we're defining up here
10:09 - because if there was an issue and this
10:13 - save data didn't didn't get anything
10:15 - then this wouldn't run and so there
10:19 - might not be a variable called to save
10:21 - data so I'm just defining it up here
10:23 - just to make sure that everything is
10:26 - okay and defined so that the script
10:28 - doesn't throw back any other issues so
10:32 - what we can do is we can say if saved
10:34 - data is not equal to null so if there is
10:38 - save data then we want to load this data
10:42 - into the player now we know that this is
10:44 - going to be their currency so what we
10:46 - can do is update their currency value to
10:49 - this save data so because they can't see
10:51 - that value equals saved data okay
10:55 - however if there is not any save data
10:59 - so if save data is equal to nil and put
11:02 - it in this else all I want to do is we
11:04 - know that this player is a new player to
11:07 - the game so new player
11:09 - so you want to give them the default
11:11 - amount of cash when they start out so
11:13 - we're gonna say currency stop value
11:16 - equals and then you can set this number
11:19 - to whatever you want whatever number of
11:21 - whatever amount of currency you want a
11:23 - new player to receive when they first
11:26 - open the game so if you just want them
11:27 - to have 50 cash starting out keep this
11:29 - at 50 if you want them to have 500 set
11:31 - it to 500 but I'm gonna keep mine at 50
11:34 - like that's that's a fair amount and
11:36 - we're just gonna print a new player to
11:40 - game and then over here we're just going
11:45 - to print they that are loaded because
11:48 - the data will have successfully have
11:50 - been loaded into the player so what
11:53 - we've done here is we've managed to rate
11:56 - code which will load a player's data
12:00 - from the datastore and we're updating
12:02 - their value their currency value so what
12:06 - we want to do now is we want to create a
12:08 - another event which will save the data
12:11 - whenever they leave the game and when
12:13 - the game shuts down so to do this we're
12:16 - going to use something called a player
12:18 - remove event removing event so what this
12:21 - will do is it will fire just when a
12:23 - player is about to leave the game and
12:25 - we'll be able to save their data so that
12:28 - it's ready wouldn't when they join the
12:30 - game next time we're also gonna have
12:32 - another event function which will run
12:35 - when the game is about to shut down so
12:37 - that we can save the last player's data
12:39 - before the server shuts down and maybe
12:42 - accidentally wipes it so to firstly get
12:45 - started we're going to create an event
12:47 - for player removing this is what looks
12:51 - like it says game top players stop play
12:53 - at removing connect cut on connect
12:56 - function here are we just gonna change
12:58 - this argument to player again just to
13:01 - make it a little bit less confusing for
13:03 - you as I said earlier the player over
13:06 - here is just a dummy sort of model for
13:11 - the player that is actually going to be
13:12 - leaving the game so obviously we don't
13:14 - know a name with a player that's going
13:15 - to leave the game yet so we have to use
13:18 - this this dummy called player so that
13:20 - this player is the player object
13:22 - over the play who's going to leave the
13:23 - game so what we're gonna want to do is
13:25 - we're gonna want to save the data so we
13:27 - do this by calling another quite similar
13:31 - to get async it's good to set a sink
13:34 - we're gonna call that on the datastore
13:36 - and that will basically I set a value in
13:39 - the datastore and they will save it so
13:42 - whenever they're leaving about to leave
13:44 - we can save this data and by the next
13:46 - time that they join the data should be
13:48 - ready to be loaded with get async so
13:51 - much more simple than what we've just
13:53 - done to save the day so we just need to
13:55 - say datastore and say : set async open
14:01 - bracket close bracket or parentheses and
14:04 - in here what we're gonna have to do
14:06 - we're gonna want to have that specific
14:09 - key again and we had the ID over here
14:12 - earlier what we can do is we can just
14:14 - take this line of code copy it and just
14:17 - paste it into this play removing event
14:19 - so we've got our ID we just want to
14:22 - specify the ID and we also want to give
14:25 - the value of the currency which is going
14:29 - to be updated which is going to be set
14:30 - so we want to say player dot Leader
14:33 - stats and then we want to have the
14:37 - currency name so in square brackets
14:39 - because we don't know the actual name of
14:41 - it and then we also just want to say dot
14:44 - value so what that's going to do is it's
14:46 - going to update the value of coins for
14:51 - that specific key which of course is the
14:54 - ID variable up here it's going to set
14:57 - the value and save it whenever someone
15:00 - leaves the game now what about the last
15:03 - player in the game because we all know
15:05 - that when you're in a game and you're
15:06 - the last person in the game and you
15:09 - leave the game the game shuts down if
15:11 - the game trips down then there is a
15:13 - chance that this script which is saving
15:16 - the data might not finish saving by the
15:19 - time it shut down so what we're gonna do
15:21 - we're gonna have a function called bind
15:24 - to clothes now this runs when the game
15:27 - when you whenever a game is ready to
15:30 - shut down this wall run and we can put
15:33 - some code to delay the server from
15:35 - shutting down
15:36 - we can kick all of the players currently
15:38 - in the game so that everyone will have
15:39 - gone all the data to be saved and then
15:42 - we can have a time delay just to make
15:45 - sure all the data is saved and ready for
15:48 - the players to rejoin so to do this we
15:52 - just have to say game dot bind to
15:54 - clothes
15:55 - sorry game code off the vine too close
15:58 - and then we can just say in parentheses
16:01 - function with another set of parentheses
16:04 - and drop a line and you've got this end
16:07 - down here it should look like this and
16:10 - so this will be called when game is
16:13 - ready to shut down or waiting for any
16:17 - code inside of here to be executed and
16:19 - once it's executed the game will shut
16:21 - down so we want to kick every single
16:24 - player in the game so that we can
16:26 - initiate this play removing event which
16:28 - will save all the data so to do this
16:32 - we're gonna say for I come up play up in
16:36 - pairs and then inside of these
16:39 - parentheses we're gonna have the all the
16:42 - players in the game currently between
16:44 - say game block players so long get
16:47 - players and then do after this and this
16:51 - is going to loop through every single
16:53 - player in the game and we just want to
16:55 - check that there if there's a player
16:57 - so if Claire then play out : a kick and
17:02 - we can supply a message when they're
17:04 - being kicked to say this game is
17:06 - shutting down so we're getting all the
17:09 - players in the game looping through them
17:11 - I is the number of times this loop
17:14 - through if it's looping through the
17:16 - second player it would be two player is
17:18 - the object of the current player we're
17:20 - looping through and we're just checking
17:22 - to see if the player is still in their
17:23 - game if they are we're gonna kick them
17:26 - by saying Claire : kick we're giving a
17:29 - message to let them know that the game
17:30 - is shutting down now remember that this
17:33 - is only gonna run when the game is about
17:35 - to shut down so it's just kicking all
17:37 - the players from the game before the
17:39 - game trips down and we're just gonna
17:41 - also add a little time delay of about
17:42 - five seconds just so that once they're
17:45 - all gone you can make sure that all the
17:47 - data is saved and we are ready
17:49 - you shut down the game to make sure that
17:52 - if you're following along with the
17:53 - tutorial that you've saved your data
17:55 - I must say your data saved your game
17:58 - make sure to click on save and save it
18:00 - somewhere I'm just gonna call mine at
18:02 - the data saving and that is everything
18:08 - for the data saving so let's go and test
18:10 - it out what all you have to do first
18:12 - though is we're going to enable a few
18:14 - things just to make sure that we're able
18:17 - to test this out in place solo and also
18:20 - because what happens is if we want to
18:24 - test datastore you have to publish your
18:26 - game to a place first so I'm going to
18:28 - show you how to do that we're going to
18:30 - want to just click on file publish to
18:33 - roblox as and then this screen grab
18:37 - and you're going to want to just click
18:40 - on new place and we're just gonna call
18:43 - this data saving I'm going to make mine
18:47 - public and I'm also going to just update
18:50 - the preferred Play account
18:54 - and I'm also just going to make sure
18:56 - that chat type is all good everything
19:00 - else seems cool I'm going to create the
19:01 - place and don't forget if you were
19:04 - really good if you've got your own game
19:05 - and you're adding this script in then
19:08 - you can just save it to your original
19:09 - game you can have to do the next step
19:12 - so we're going to want to click on next
19:13 - and you want to see this page where it's
19:16 - got the link to your game so you don't
19:18 - want to copy this link or if you've
19:20 - already got your game you want to click
19:22 - done
19:23 - and you want to just find your game what
19:25 - we're gonna do is we're gonna open up a
19:26 - web browser I'm going to navigate to
19:28 - your game and we're just going to go to
19:31 - your games page so we're gonna paste
19:34 - this link into our web browser and we're
19:36 - going to go to it and this is the place
19:38 - where we just publish to so we're going
19:41 - to want to enable API access and that
19:45 - will allow us to test out the data
19:46 - saving from roblox to do so to do that
19:49 - we're going to go and click on configure
19:52 - this place if I want config this game
19:57 - we want to check enable studio access to
19:59 - API services this will allow us to just
20:03 - get a sink and set a sink from play solo
20:06 - but a word of warning if you're going to
20:10 - test this out remember that this is
20:11 - going to be the same datastore which
20:13 - you're setting to getting from that is
20:17 - going to be live in your game so if you
20:19 - have servers running you may not want to
20:21 - test this in play solo of course up to
20:23 - you the best way to test is in a real
20:26 - world locks game though so let's go and
20:28 - test this out hope there'll be no errors
20:29 - but if there are we'll be able to solve
20:31 - them open up the output and clear it and
20:34 - let's click on play solo
20:37 - I hate no errors so far but what has
20:39 - happened is the output has printed new
20:42 - player to the game because we have
20:44 - loaded our data and there is no data
20:47 - currently saved and so it's given us the
20:49 - default value of 50 coins so we're gonna
20:52 - want to do now is just update this value
20:55 - as a test and we're going to leave the
20:57 - game and we join to see if it saves so
20:59 - I'm going to update this value to 999
21:03 - when I click on stop
21:06 - um there is a little bit of delay and
21:08 - now don't worry your studio isn't
21:10 - crashing or anything the reason this is
21:12 - delaying is because the game is ready to
21:15 - shut down just waiting a couple seconds
21:17 - before it returns to normal this is the
21:20 - bind to closed event which is triggering
21:22 - when the game is about to shutdown is
21:24 - keeping everyone from the game and it's
21:26 - waiting five seconds so don't worry
21:29 - gonna rejoin the game and hopefully we
21:32 - have a 909 cache which we do you see in
21:34 - the output it says data is loaded so
21:37 - what's happened is it saved our data
21:39 - when we left the game and now it is
21:41 - loaded our data to the new player and
21:44 - this should work in a normal roblox game
21:46 - I haven't yet to test it but we shall go
21:49 - and test it now go click stop let's head
21:53 - back to our web browser once the game
21:56 - has reset gonna go back to my web
21:58 - browser I'm going to click on save to
22:01 - get back to our game and we're gonna
22:05 - click on delay so we're gonna enter the
22:08 - game we're gonna give ourselves some
22:10 - cash using the developer console and
22:12 - we're also just going to make sure that
22:15 - we can see everything printing in the
22:17 - output and then we'll leave the game
22:19 - rejoin and hopefully our data will have
22:21 - saved actually what should happen is we
22:23 - should load in with 999 coins because
22:26 - studio and roblox working together
22:29 - saving the same data because we've got
22:31 - API access turned on these data which we
22:34 - saved from roblox studio should load in
22:36 - the client here so let's see if that
22:38 - works for joining server and you see we
22:40 - have 999 cash as I said the studio
22:44 - testing which we listed will update the
22:47 - data stores in every single live game so
22:49 - is a little bit I needs bit of it
22:50 - cautious when you're updating your data
22:52 - stores from Studio so if we go in into
22:57 - the console you can say slash console in
23:00 - the chat to bring this up or you can use
23:02 - a new console all new is the old one for
23:04 - now if this contour isn't working by the
23:07 - time you're watching this video just try
23:08 - saying the new console and you will get
23:11 - a brand new console so we're gonna go to
23:14 - the old console
23:16 - and it says data loaded yeah and we go
23:20 - into the server log now only we can
23:23 - access a server log because we are the
23:25 - creator of the game so don't try going
23:26 - into jailbreak and giving yourself a
23:28 - million cash because it's not gonna work
23:29 - we're gonna say game dot players hour in
23:33 - blocks or your name dot latest apps dark
23:39 - coins top value equals and let's just
23:43 - change this to 1 3 3 7 and click enter
23:47 - and you can see that the coins have
23:49 - updated let's go and leave the game and
23:52 - let's go and just wait for this server
23:55 - to shut down after 5 seconds it should
23:57 - go away walk 5 any moment now
24:00 - there we go it's been deleted so we can
24:03 - enter a new server and see if it gets
24:05 - our data and loads it into our leader
24:08 - stats awaiting and joining server and
24:12 - you see we've got our data 1377 coins
24:16 - alone into the game and I said data
24:19 - loaded there we go that is how we save
24:22 - data we've now created the currency
24:24 - system which loads data saves data and
24:27 - initializes the leader stats folder in
24:30 - game so that is a very basic currency
24:33 - system now let's go a little bit deeper
24:35 - and look at buying currency so we're
24:38 - back here in a roblox studio and we're
24:41 - going to now work on buying currency now
24:43 - this is a little bit more advanced than
24:45 - a data saving because it does actually
24:47 - include some data saving what we're
24:50 - gonna do we're gonna use developer
24:51 - products to allow us to purchase
24:54 - different amounts of cash and then we
24:56 - will create script which records each
24:59 - purchase and when bought it will
25:02 - increase your currency value so to do
25:05 - this we're first going to want to head
25:08 - back to our games page so that we can
25:10 - create some developer products on the
25:12 - website we're going to click on
25:15 - configure this place this time instead
25:18 - of configure this game and you're gonna
25:19 - want to click on the developer products
25:21 - tab if you've never heard of developer
25:24 - products before it's a great way to
25:25 - monetize your game along with game
25:27 - passes now a game pass is
25:30 - a purchasable item which you can only
25:33 - buy a once and it will grant you an
25:35 - everlasting item or or booster in your
25:39 - game which you can code if now a
25:41 - developer product is a bit different
25:43 - similar to a game pass however it can be
25:46 - bought multiple times can be bought as
25:48 - many times you like there's no limit on
25:49 - how many you can buy an example of this
25:52 - is a stamina booster you might want to
25:55 - program a cereal bar or something which
25:58 - gives you 10 health and once you eat it
26:01 - it's disappeared you have to buy another
26:02 - so you're allowed to keep on buying
26:04 - these stamina bars and the same goes
26:06 - with currency you can keep buying
26:08 - currency and because you might you might
26:10 - run out you might want some more so this
26:12 - is why we used other products because
26:14 - you can buy them multiple times so we're
26:16 - going to create a developer product here
26:18 - and we're going to need to memorize an
26:20 - ID now you can see I have a developer
26:24 - product here on my game now this is one
26:29 - I created earlier so we're going to go
26:31 - ahead and create a new one we're gonna
26:34 - click on create new and you're gonna
26:36 - want to give you a developer products a
26:37 - name so we're gonna be giving cash so
26:40 - ours is going to give you 100 cash if
26:43 - you buy it so I'm gonna change this then
26:45 - I'm gonna give the name call it 100 cash
26:47 - and you can give it a description if you
26:50 - really want but it's not going to
26:51 - actually show up so the players won't
26:52 - see it so you don't actually need to and
26:54 - you can also give a price in Road books
26:57 - so for a hundred cash in my game I'm
26:59 - gonna charge ten row books once you
27:02 - doing that you want to give it an image
27:04 - I'm just gonna go and give an image or
27:07 - one of my thumbnails and I'm going to
27:10 - click on update once it's ready right
27:13 - now that's created here and you can see
27:17 - it's added an item to our list we've got
27:20 - our name of our developer product on
27:23 - your cash how much it costs and we also
27:25 - got the ID of our developer product now
27:28 - this is gonna be really important so
27:30 - let's just keep this page open for now
27:31 - and I'm also just going to copy this ID
27:34 - because you'll see why it's so important
27:36 - in a minute let's head back to roblox
27:38 - studio and get started on our develop
27:41 - products so here we are again in studio
27:43 - we are going
27:43 - to create another script in a moment
27:45 - we're gonna just do though is make sure
27:47 - we've got that thing that's ID copied
27:49 - and we can begin work so we're going to
27:53 - use the marketplace service well wash
27:57 - you're gonna have a GUI button which
27:59 - will prompt the player to purchase the
28:01 - developer product and then on the server
28:03 - side we'll have some code which will
28:05 - detect when a developer products bought
28:07 - and it will check which player has
28:09 - bought it and we will give them the cash
28:11 - so let's go and click on server script
28:14 - service again make sure our game is
28:16 - saved and click on scripts I'm going to
28:19 - call this by cash script so in the
28:23 - scripts it's gonna allow the players to
28:26 - buy some cash we are going to firstly
28:29 - want to define two services the
28:32 - marketplace service which will be used
28:34 - to handle the purchasing of the
28:35 - developer product marketplace service
28:39 - equals game colon get service and then
28:44 - whoops I spelt it wrong and then in
28:46 - parentheses we can say in speech marks
28:49 - marketplace service you have to make
28:51 - sure that you spell it and and
28:53 - capitalize it correct else you'll get
28:55 - some errors so make sure it looks like
28:58 - this let me just in large it a little
28:59 - bit we also want to define the datastore
29:03 - service once again because we want to
29:05 - keep the receipts of the previous
29:08 - purchases in case they leave the game we
29:12 - want to make sure that when they rejoin
29:13 - for example they still get their stuff
29:15 - we can save the purchases I would say
29:17 - local data store service equals game
29:22 - code on get service oops our sponsor on
29:25 - again and we can say data store service
29:32 - ok so now that we've done that we want
29:34 - to get our data store and I remember in
29:37 - the original currency script we got our
29:40 - test data store that's where we will
29:43 - store our currency and our saved
29:46 - currency in this script we're going to
29:48 - be saving purchase history so it
29:51 - receipts previous purchases we're going
29:54 - to want to just call this previous
29:57 - so previous purchases equals equals
30:00 - datastore service : get datastore whoops
30:04 - we did get descendants get to the
30:07 - datastore Open bracket close bracket
30:10 - previous purchases okay
30:14 - so we've just got our data store and we
30:16 - gonna save purchase receipts so that in
30:19 - future we just know what they've bought
30:20 - what each player's bought previously and
30:23 - we also want to put our IDs in now so
30:26 - breach ID there is a developer product
30:28 - which gives a certain item so in our
30:30 - case we have a developer product which
30:33 - is going to give you 100 cash so we need
30:35 - to make a variable for each developer
30:37 - product we have so you can call or
30:39 - whatever you want
30:40 - I'd recommend calling your variable for
30:42 - your IDs something which is which will
30:46 - tell you what it's going to give so for
30:48 - example one underscore hundred
30:51 - underscore cash okay equals and then you
30:54 - put your ID so you give it a name and
30:56 - you put your ID so I like to have a
30:58 - variable you put here what you're gonna
31:00 - get and you put your ID just to store it
31:02 - as a variable so you don't have to keep
31:04 - putting IDs everywhere and have to keep
31:06 - checking what ID and what each ID
31:10 - attributes what it what it gives you for
31:12 - example so make them or wearables if you
31:14 - create more products keep making
31:18 - variables and write down what you're
31:20 - gonna give and make it equal to D okay
31:24 - so we've done that we can actually get
31:26 - started on creating our callback
31:28 - function which is process receipt so
31:31 - when I say Marketplace service dot
31:34 - process receipt equals function open
31:38 - bracket close bracket or parentheses
31:39 - with receipts in there now whenever a
31:43 - developer product is bought in the game
31:46 - this callback function is going to fire
31:48 - any code inside of it will run and the
31:51 - server's going to keep checking back to
31:52 - see whether it was a success or whether
31:54 - it's not finished yet or something went
31:57 - wrong so we're going to want to firstly
32:00 - we've got this receipt here this receipt
32:03 - argument and this receipt is it's
32:06 - basically a table made of parks six
32:08 - values so the receipt
32:10 - it has a purchase ID it has a player ID
32:15 - it has a product ID
32:18 - it has a currency spent value I also has
32:24 - a currency type value and it also has a
32:28 - place ID where purchased value so all of
32:37 - these different values make up the
32:38 - receipt and it allows us to see a unique
32:42 - ID for the purchase the play who
32:44 - purchased it what did they buy what did
32:47 - they buy it with did they buy it with
32:48 - Roy books but I mean how much did they
32:50 - pay what currency did they pay with
32:53 - obviously there's gonna be ro books but
32:54 - before we had tix as well we don't have
32:56 - that anymore and we also have the place
32:58 - ID where this was purchased so what game
33:01 - was it purchasing all of these create a
33:03 - picture telling you where the player
33:06 - bought it and it just tells you lots of
33:08 - little details about the purchase about
33:10 - the transaction we can use this to check
33:13 - to see if it's they've already bought it
33:14 - or that they were in the process of
33:16 - buying it and then they're sent left or
33:18 - disconnected so we can pick it up and
33:19 - always have a receipt of of this
33:22 - player's purchase and we're going to
33:24 - want to save save this to a data store
33:26 - so we want to create an ID again okay so
33:29 - what we want to make sure that if
33:32 - they've already purchased it before that
33:34 - we create a new purchase everyone we
33:36 - don't want them to have bought something
33:39 - and if they're trying to buy the same
33:41 - thing again so we're going to just say
33:44 - local ID this is our datastore ID our
33:46 - unique identifier and we're just going
33:49 - to set this to receipt dot player ID dot
33:53 - dot and then in speech marks we have a -
33:56 - dot dot receipt dot purchase ID now this
34:01 - is gonna look something a bit like this
34:04 - so the ID would be your player ID and a
34:09 - hyphen and then a weird-lookin or CID
34:12 - for your developer product which looks a
34:15 - little bit like this you've got the
34:16 - unique identifier of the developer
34:18 - product and your players unique
34:20 - identifier in their ID
34:23 - now you'll see why we're doing this in a
34:24 - minute because what we're gonna do is
34:27 - we're gonna actually check if previous
34:29 - purchases I remember this is gonna fire
34:32 - when a player buys the developer product
34:34 - so if previous purchases : get a sync ID
34:41 - then this is either gonna return true or
34:43 - false so this will tell us has it's
34:48 - already been bought okay and if it has
34:52 - then the purchase has already been done
34:56 - because we don't want the same same
35:00 - purchase for the same item if the same
35:03 - purchased I did you get you can you can
35:05 - purchase it multiple times but in this
35:07 - case each time you purchase it there's a
35:09 - different purchase ID do if it's the
35:12 - same purchase ID we don't want this to
35:14 - go through because we know they've
35:15 - already purchased it they've already
35:18 - bought this so we want to create a
35:20 - separate transaction so we can just
35:23 - return enum dot product purchase
35:27 - decision dot purchase granted okay
35:31 - what's go outta turn so we're just
35:34 - returning back to the scripts that this
35:35 - approach is already been done and if
35:37 - they want to buy another we can let them
35:39 - so what we now want to do is we want so
35:43 - we know by the time that gets here we
35:45 - know that the player wants to purchase
35:47 - another one hope that they've already
35:50 - purchased it so by the time this runs
35:51 - they will have purchased it so we know
35:53 - they've just purchased the developer
35:55 - product so we want to get the player
35:58 - that purchased this this product being
36:01 - say local player equal scandal players
36:04 - how long get player by user ID and then
36:08 - we can use the player ID from the
36:10 - receipt to identify them so we can say
36:13 - receipts got player ID we've now got the
36:17 - player which bought this developer
36:19 - product and we want to check if they've
36:22 - if they're still in the game because if
36:23 - they've left the game there's not going
36:25 - to be a player and we won't be able to
36:27 - grant them their rewards so we want to
36:30 - say if not player then so if not player
36:36 - we know that they've either left or
36:38 - disconnected okay so we need to somehow
36:42 - give this to them when they rejoin right
36:45 - so this is why we've done we've done
36:47 - this if statement so if they've
36:50 - disconnected we want to return enum dot
36:56 - product purchase decision but not
36:58 - purchase not processed yet so we're
37:01 - still waiting to give them their rewards
37:03 - but they're not currently in the game so
37:05 - we need to wait until they next join the
37:07 - game and so if they haven't got the
37:09 - rewards then what we're gonna do is
37:11 - we're gonna give them to them next time
37:13 - that the player joins the game however
37:15 - if the player is in the game Weibull to
37:18 - give them the rewards right now so what
37:20 - we can do is say else and now in this
37:23 - huge block of code we're going to want
37:26 - to give them their rewards so we only
37:29 - have one developer product at the moment
37:30 - so this will make our lives a bit easier
37:32 - because we only have to do this once
37:33 - however if you've got multiple developer
37:36 - products so you've got 3 1 gives 100
37:38 - cash 1 gifts 250 + 1 gives 500 you're
37:42 - gonna have three of these variables
37:43 - you're gonna have to do what we're about
37:45 - to do three times so what would you have
37:48 - to do is say if receipts lots it's gonna
37:53 - be product ID equals equals 100 cash or
37:58 - the ID which is attributed to the
38:00 - variable 100 cash then drop a line just
38:05 - get rid of these lines here drop line
38:07 - and in here we want to we know that
38:10 - they've bought one in the cash because
38:13 - we've checked their product ID which
38:15 - they just bought against the 100 cash ID
38:18 - appear if you had multiple ones you'd
38:20 - have to have three of these if
38:23 - statements you'd have to change each one
38:27 - to be different ID so this one would
38:31 - probably be 250 cash if you if that's
38:39 - the variable you declare and this one
38:41 - will probably be 500 you get the idea so
38:43 - you only have one so we only have to
38:45 - deal with one if statement so we want to
38:49 - give them their
38:50 - so to do this we're gonna say player
38:53 - don't need us that's and then we're
38:56 - going to want to create a variable at
38:59 - the top here for the currency name again
39:02 - so in our case it's coins we're going to
39:06 - want to then put in the square brackets
39:07 - security name and then we want to say
39:10 - dot value equals and because what
39:13 - updating the value the current value
39:15 - you're gonna paste this in and just say
39:17 - add 100 so we're taking their current
39:20 - value and updating it to what it
39:22 - currently is plus 100 so this is going
39:26 - to give them 100 extra cash so you want
39:30 - to copy this if statement and paste it
39:32 - and update the values so that would be
39:34 - 250 or 500 depending on how much you
39:36 - give you want to change this variable as
39:38 - well if you have more than one developed
39:42 - product but to keep it simple we're only
39:45 - going to have one so what we want to do
39:47 - now is update our data store and say
39:50 - that we have successfully made this
39:53 - purchase so we can say data store come
39:56 - on set sync and then we want to say if
40:00 - ID and then truth in fact let's just put
40:05 - let's just change this to previous
40:07 - purchases in the other script is called
40:11 - data store but in this script it's
40:12 - called previous purchases because that's
40:13 - the name of our data store which we gave
40:15 - let's also just write this in the people
40:17 - a people
40:24 - okay I just so that in case something
40:27 - goes wrong and let's do that at the top
40:28 - here with our get async let's just
40:31 - change this I get async to success
40:35 - changes to success and then we can say
40:38 - local success equals nil and then we can
40:42 - say P call function we can say success
40:47 - equals previous purchases gets a sync ID
40:52 - just in case something goes wrong and
40:55 - what we can now do is return purchase
40:58 - granted to tell the script that
41:00 - everything went fine we gave them their
41:01 - rewards and the transaction went through
41:03 - so we can say return enum dot product
41:08 - purchase decision dot purchase granted
41:12 - so that is all of the server-side coding
41:15 - done for this developer product which
41:16 - can zoom out so if you want to copy it
41:19 - down or you miss something
41:20 - what's the video and now is your time to
41:22 - copy it down okay so what we've done on
41:26 - the server side we now just need to
41:27 - create a little GUI which will prompt
41:30 - the user with the development product
41:33 - but we also want to just create a nice
41:35 - little UI we're going to go into the
41:36 - Royal Box UI editor click on screen GUI
41:39 - and then click on text button you're
41:41 - going to drag it to the side wherever
41:43 - you want it to go gonna open up the
41:46 - properties window make sure it's open
41:48 - head back to you I select text scaled
41:51 - we're going to call it 100 cash we're
41:55 - gonna give it a name of 100 cash and
41:57 - also just going to change the styling
41:59 - remember you can change yours to however
42:01 - you want it to look I'm just gonna make
42:03 - mine look good ok I've got my button and
42:05 - we're now just gonna insert a local
42:08 - script inside of this button so that we
42:11 - can prompt the player
42:12 - whenever they click it so we're going to
42:14 - want to have a activated event so script
42:18 - got parent don't activate it : connect
42:21 - open racket function closed bracket or
42:24 - parentheses we're at the top we want to
42:27 - get the marketplace service so local
42:29 - marketplace service equals game can only
42:33 - get service
42:35 - market place service we just need to say
42:39 - the local player equals game but playing
42:43 - is not local player so we're getting our
42:44 - player and then we just want to prompt
42:47 - the purchase whenever this is clicked so
42:50 - we can say marketplace service curl and
42:52 - prompt product purchase player and then
42:58 - you just want to get the ID of your
43:00 - developer products now because this is
43:02 - the 100 cash button we want to get the
43:05 - 100 cash ID and paste in here if your
43:09 - button was fired from your cache you
43:10 - want to update the ID and here with the
43:13 - correct ID for 500 cash so they can't
43:15 - all be the same they have to be
43:16 - different if you have different
43:17 - developer products okay so that is
43:20 - everything done for the buying let's
43:24 - open up the output run the game and hope
43:26 - that everything works fine and then
43:29 - their errors but if there are we can fix
43:30 - them we've run the game date has been
43:33 - loaded we're gonna buy 100 cash it
43:36 - prompts us we're gonna click buy now you
43:39 - process receipt should run and there we
43:42 - go it gave us an extra 100 cash
43:44 - we now have 1437 you didn't see that and
43:49 - click again click buy now and it's
43:52 - updated to 1537 let's leave the game
43:56 - remember it's delaying because of bind
43:58 - closed for 5 seconds
44:00 - let's re-enter the game and you see data
44:04 - saved and we've now got 1537 coins so
44:09 - you've just monetized your game with
44:12 - developer products and the currency
44:14 - system now players in your game have the
44:17 - ability to buy currency but what if they
44:20 - want to spend their currency on other
44:22 - items well in a future video only we
44:25 - showing you how to create a shop which
44:27 - will are your players to buy items with
44:30 - the King game currency and keep night
44:33 - for that because that's coming soon
44:34 - don't forget to subscribe to my youtube
44:37 - channel album blocks if you want to find
44:39 - more quality roblox scripting tutorials
44:41 - for free help you master a roblox
44:44 - scripting thanks for watching and I'll
44:46 - see you next time