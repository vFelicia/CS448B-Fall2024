00:00 - if you want to learn how to use bindable
00:02 - functions in roblox to do to allow two
00:05 - scripts to communicate with each other
00:06 - and send information there you're going
00:08 - to want to make sure you watch all this
00:10 - video so you don't miss out on anything
00:12 - let's get started
00:13 - [Music]
00:22 - welcome back to another video my name is
00:24 - Ivan blocks if it's your first time here
00:26 - make sure you subscribed and the eternal
00:28 - notification bell today we are gonna be
00:30 - learning about bindable functions so in
00:33 - my previous video we had a look at
00:35 - bindable events and what bind will
00:37 - events let you do is they let you they
00:40 - let you have two scripts in the server
00:42 - and you can have one script call call
00:45 - the other script and trigger it to do
00:46 - another task so the difference between
00:50 - bindable events and bindable functions
00:52 - is that a bindable event will trigger
00:55 - another script to do something and the
00:59 - bind will function will do the same
01:00 - thing but the difference is that a
01:03 - bindable function the script which you
01:06 - trigger will return a value back to the
01:09 - original script and we're gonna have a
01:10 - look at some examples in a minute but an
01:13 - exist a quick example would be you could
01:16 - return whether what you triggered was a
01:19 - success or whether it aired or if
01:21 - something went wrong but the example
01:24 - that we can be looking at today is we
01:26 - are going to have a set of parts in the
01:29 - game let's just bring them up here so
01:32 - these are our parts and we're going to
01:33 - have two scripts one is going to be an
01:36 - invoker and that's going to be this
01:39 - script which triggers the bindable
01:41 - function and tells the second script to
01:43 - execute some code and then the second
01:46 - script over here get number of parts is
01:48 - where we're actually going to code it to
01:50 - find out how how many parts are in the
01:52 - game and then we're going to also code
01:55 - it so that it will send back the number
01:57 - of parts to this original invoker script
02:00 - so it's two scripts working together to
02:03 - perform a specific task now you could of
02:05 - course do this all in one scripts but
02:08 - this is obviously just for tutorial to
02:10 - show you how this all works
02:12 - so a bindable function just like a
02:16 - bindable event it can only go or it can
02:19 - only talk between two server scripts
02:21 - okay so you can't you can't have a
02:23 - bindable function working with a local
02:25 - script which is on the client on a
02:28 - player and also talking with a server
02:31 - script on the server it has to be
02:33 - server-to-server so you could have two
02:35 - scripts on the server but not when
02:38 - you're trying to work with filtering
02:40 - enabled or experimental mode or anything
02:42 - like that so if you want to use if you
02:45 - want to make your game filter enabled
02:46 - you'd have to use remote events and
02:48 - functions I've done some videos on those
02:50 - as well you can click on the card in the
02:51 - top right corner of the screen to see
02:53 - those so let's get started by going into
02:57 - our invoker scripts now this is where
02:59 - we're going to call this bindable
03:02 - function and all you have to do is well
03:05 - because what's going to happen is we're
03:06 - going to call this bind will function
03:08 - and because it's returning a value to us
03:11 - we'll have to set it as a variable so my
03:14 - variable is called number of parts and
03:16 - I'm just setting that to game dot
03:19 - workspace stop bind your function
03:20 - : invoke now what this means is it's
03:24 - going to imagine that it's going to
03:26 - substitute this piece of code here what
03:29 - I've selected with the actual value so
03:32 - let's say the second script counted 50
03:35 - parts in the game then just imagine that
03:37 - this selection would get substituted and
03:40 - the word and the numbers 50 would be
03:43 - added in there and if we print it out
03:45 - later on it'll print out 50 so the
03:48 - script this piece of code is making a
03:51 - request to the bindable event and it's
03:53 - going to return back the number of parts
03:55 - to this variable and then later we will
03:58 - be able to print this variable out and
04:00 - it will give us the number of parts in
04:03 - the game it will in this model so that's
04:06 - all you have to do to invoke it you have
04:08 - to reference the bindable function so
04:10 - game dog space dog mind will function
04:11 - because it's in here and then you have
04:14 - to say : invoke with a pair of
04:18 - parentheses so if you want to add a
04:20 - bindable function and you don't yet know
04:21 - you just have to click on the workspace
04:23 - or if you want to put it click on this
04:26 - little plus and then type in find it'll
04:27 - function and there you go you can also
04:29 - insert a bindable event if you want so
04:31 - that is how you invoke and you see I've
04:34 - got a little comment so the user wants
04:36 - to count how many the number of parts in
04:39 - the game and this is what's going to do
04:42 - it this is what's going to make the call
04:45 - to do this
04:46 - so that is the invoking part done what
04:50 - we're going to do now though is we're
04:51 - going to actually work with the get
04:53 - number of part script so that we can we
04:57 - can actually code it so that it counts
04:59 - how many parts and it sends back this
05:01 - value okay so I'm in the get number of
05:06 - part script and you can see it looks a
05:07 - little bit different I've just written
05:09 - out the the the way that you have to
05:12 - write these out this function just to
05:16 - save a little bit of time so on the on
05:19 - the get number of part script this is
05:21 - what's going to be receiving the request
05:23 - from the bindable function and we're
05:25 - going to want to write some code inside
05:28 - of here so any code inside of here i
05:31 - will run when the bindable function is
05:36 - invoked okay so if we put print hello in
05:42 - here and we ran up this script it's
05:46 - going to print out hello because the
05:50 - first script has made a request to the
05:53 - second script and the second script has
05:55 - been scripted to print out the words
05:58 - hello whenever it gets invoked so we've
06:01 - just invoked our bind to a function and
06:03 - we've printed something out so let's go
06:05 - back into our script and let's adjust
06:07 - this to make it a little bit more
06:10 - advanced we're going to count up how
06:12 - many parts we've got in the game and
06:13 - then we're going to send them back so to
06:16 - do this what we're going to ought to do
06:18 - is we're going to want to first get the
06:21 - children of this model because we only
06:22 - want to count how many are in this model
06:24 - so we're gonna say local parts equals
06:27 - game don't work space dot parts colon
06:31 - and get children okay so this part's
06:34 - variable will be it will be all of the
06:37 - children it contains every single part
06:39 - inside of this model we then want to
06:43 - just get the number of parts so to do
06:45 - that we can say local number of parts
06:48 - equals hashtag parts and this will
06:52 - return the number of parts contained in
06:55 - this variable so we've just got all the
06:58 - children so all of these are
07:00 - children of the model and this line is
07:03 - just counting up how many of those parts
07:06 - there are so now we've done that we just
07:09 - want to return back the number of parts
07:11 - to the original scripts to do this we
07:14 - just have to say return and we can say
07:16 - the variable number of parts so
07:19 - hopefully this is going to count up all
07:20 - of the parts in the game and then what
07:23 - it's going to do is it's going to return
07:25 - the number of parts back to us so let's
07:29 - have a go at doing that now and let's go
07:31 - and run this script open up the output
07:34 - and that's right
07:35 - see what it says and you see it has
07:39 - printed out 120 which means that if you
07:42 - were to count it if you were to pause
07:43 - the video and count up every single part
07:46 - here you would see 120 parts trust me so
07:50 - now that we've done that we're gonna
07:52 - take things to the next level and make
07:53 - them a little bit more advanced now what
07:56 - if we wanted to make the script only
07:58 - counterparts with a specific name we can
08:02 - pass an argument for that so argument is
08:05 - well let's say for example we want the
08:08 - script to count up the number of parts
08:12 - with a name brick okay instead of part
08:16 - we can pass an argument here in this
08:20 - parentheses block and in speech marks we
08:23 - can provide as a string a name for our
08:27 - parts which wants it to count up so
08:29 - let's say we only wanted it to count up
08:31 - parts which are called brick we concert'
08:35 - we can supply it with an argument called
08:38 - brick but at the minute this script this
08:42 - get number of part scripts doesn't know
08:45 - what's what this brick means we have to
08:48 - give it a meaning so because we've sent
08:50 - an argument on the invoker side we have
08:53 - to go in to our second script which is
08:56 - picking up the trigger and we also have
08:58 - to add it in here but it doesn't have to
08:59 - be the same name because we obviously
09:01 - might we might not know or what this
09:04 - argument might be because we might call
09:06 - it midway through a game with a specific
09:08 - value which might change so we always
09:11 - have to call it something different and
09:12 - as I said earlier remember when I say
09:14 - how we're substituting in with this part
09:17 - here we got we were we were substituting
09:19 - to this back to this variable the number
09:21 - of parts just like arguments what we're
09:24 - going to do is we're going to substitute
09:26 - let's have a very risk all this argument
09:29 - name we're gonna substitute name with
09:32 - the argument which we provide so in this
09:34 - case is going to be brick let's go back
09:37 - into the get number of parts script and
09:40 - what we can do now is we can say print
09:43 - name and what this is going to do is
09:45 - it's going to print out the word brick
09:49 - let's have a look and see if it does
09:50 - that let's open up the output and let's
09:52 - go and run the game okay so you can see
10:01 - it has printed out brick as well as the
10:03 - hundred twenty because it has got the
10:07 - name which has been passed over as brick
10:09 - and is now going to print it out so that
10:13 - is how you use arguments and now we can
10:15 - put this all together to modify our
10:17 - script to make it only only return mark
10:20 - the number of parts which are called a
10:22 - specific name so to do this let's just
10:26 - hide your pod code by just removing a
10:29 - couple of things we don't need let's
10:31 - just get rid of this print name because
10:33 - we won't be needing that and let's just
10:35 - get rid of this local number of parts
10:37 - for now because we're not actually going
10:39 - to be counting up how many of these
10:40 - parts there are yet we're gonna have to
10:42 - use a for-loop to increment a variable
10:44 - because we don't know whether the parts
10:46 - going is called the argument but if it's
10:50 - called brick or not so we don't want to
10:52 - automatically count them up before
10:53 - checking so what we're going to want to
10:56 - do is we're going to just want to create
10:58 - a for loop which will loop through all
11:00 - of these parts and check whether it's
11:02 - name is equal to the argument so to do
11:06 - this we can say for I and I is gonna be
11:09 - the counter so each time it runs it's
11:11 - gonna increment increase by one and then
11:14 - we can say comma part part's going to be
11:16 - the current part which we're iterating
11:18 - through and then we can say in pairs
11:20 - open bracket close bracket parts do and
11:25 - we can drop our line
11:27 - and parts is what we're going to be
11:28 - iterating through so all of the parts
11:31 - through get children and so inside of
11:34 - here we just need to check if part dot
11:37 - name equals equals name which is our
11:40 - argument so if the parts name is the
11:43 - same as the argument then what we want
11:46 - to do is you just want to quickly write
11:48 - our number of parts variable again
11:52 - assumes a local number of parts equals
11:58 - zero for now and remember each time this
12:01 - gets invoked it will be reset to zero
12:03 - and then we can increase it every time
12:06 - we have a part which matches the name of
12:08 - the argument so we can say number of
12:11 - parts equals number of parts plus one
12:16 - and now what we can do is we can make
12:20 - sure that we're returning number of
12:22 - parts back to the original scripts so we
12:26 - need to have some parts which are called
12:29 - brick for this to actually work but for
12:31 - now let's head back and run this again
12:35 - remember none of our parts are currently
12:37 - called brick so it should return zero
12:40 - there we go so it's returns zero because
12:43 - there are no parts in the game called
12:45 - brick let's go and change a couple of
12:48 - parts to brick and let's rerun this you
12:53 - can see now that there are twelve parts
12:55 - called brick and if we go into our model
12:58 - you can see one two three four five six
13:01 - seven eight nine ten eleven twelve
13:03 - twelve parts are called brick so what's
13:06 - happened is the invoker has passed this
13:09 - argument it's been picked up by our
13:11 - second script substituted in as name and
13:15 - it's checked to see whether the parts
13:17 - name is equal to the argument if it is
13:20 - the number of parts is being incremented
13:21 - by one and then we're returning number
13:24 - of parts back to the original scripts so
13:27 - that we can then use it to print out on
13:30 - our original script but you may be
13:32 - thinking why do we have to use two
13:34 - scripts for this instead of just one
13:36 - well you could just use one script if
13:38 - you want but there are lots of different
13:39 - purpose
13:40 - for bindable events you may want to
13:42 - return something back to it to your
13:44 - original script from a different script
13:46 - and then use it in your original scripts
13:50 - to work out some other things lots of
13:53 - different uses you can use them for
13:55 - server to server talking for talking
14:00 - between two scripts but it's something
14:01 - you really need to know and it's very
14:02 - helpful when you're working on your game
14:05 - you might want to have one script for
14:07 - doing one thing and another script for
14:09 - doing something else and you want to
14:10 - trigger each one based on different
14:12 - things and you want to pass messages and
14:14 - arguments between them
14:16 - so it's very useful for that kind of
14:19 - communication but if you want to do
14:21 - remote events remote functions I've got
14:23 - lots of tutorials on my channel as I've
14:25 - already said there's a link in the card
14:27 - which were able to click and that is the
14:31 - end of this tutorial so if you enjoyed
14:32 - it please leave a like make sure to
14:34 - subscribe turn notification bell and I
14:37 - will see you in the next video this is
14:39 - Allan blocks telling you to keep
14:41 - scripting
14:42 - [Music]
14:58 - you
14:59 - [Music]