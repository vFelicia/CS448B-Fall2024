00:00 - hello and welcome to your fifth roblox
00:02 - scripting tutorial
00:03 - now in this video we're going to look at
00:06 - variables
00:07 - and variables they hold data which we
00:09 - can access later on in our scripts
00:12 - for example if we wanted to keep track
00:14 - of a score
00:15 - and we wanted to keep adding to that
00:17 - score we can keep track of it
00:19 - and access it later on in a script or
00:21 - for example if we chose who the murderer
00:24 - was
00:24 - in a murder mystery game and we wanted
00:26 - to store that
00:27 - so we could keep coming back to access
00:30 - that player
00:31 - we could store that as variable they're
00:34 - script specific
00:34 - so if i create a variable in this script
00:37 - i can't access it from another script
00:39 - and they can change so let me show you
00:41 - how to create
00:42 - variable firstly we say local then we
00:45 - set the name of our variable
00:47 - and it can be anything you want except
00:49 - for a few conditions which we'll talk
00:50 - about later on
00:51 - so you can call it myvariable and then
00:54 - you write an equal sign
00:56 - and then you set the value that you want
00:59 - this variable
01:00 - to be so if i wanted it to be equal to
01:02 - 50 then
01:03 - my variable is now holding the value 50.
01:06 - so variables they hold values think of
01:08 - it like a box
01:10 - cardboard box you can put a label on it
01:12 - and you can put whatever you want in the
01:13 - box
01:14 - so if you wanted to store some books
01:15 - then you could put books in the box
01:17 - and then whenever you want to get your
01:19 - books you know that they're going to be
01:20 - stored
01:21 - in your box now like i said earlier
01:24 - you can track things such as scores or
01:27 - you could even
01:28 - hold some text if it's a string you
01:31 - could have a boolean value so true or
01:33 - false
01:34 - you could even hold an object such as
01:38 - game.workspace.baseplate
01:40 - now i said as well the variables can
01:43 - change
01:44 - so if you were to print out
01:45 - myvariable.name
01:48 - then it's going to print out to the
01:49 - output baseplate
01:51 - okay but if i then put in between these
01:55 - two lines
01:56 - my variable equals
01:59 - game.workspace.spawnlocation
02:00 - we've updated the value of this variable
02:04 - where it's no longer going to hold
02:05 - the baseplate as its value it does at
02:08 - the start
02:09 - but then we immediately change it to
02:11 - hold
02:12 - spawn location instead we've changed the
02:15 - value
02:15 - of the variable so if we were to put two
02:18 - print lines in here
02:19 - one just before we change it when we
02:22 - print here
02:23 - it's going to print base plate but then
02:25 - we're changing its value
02:26 - so it's now holding different data and
02:29 - when we go to print for the second time
02:31 - it's going to print out spawn location
02:33 - so it should print out
02:35 - base plate and spawn location there you
02:37 - go
02:38 - so you can see how a variable can change
02:41 - and that
02:41 - is why variables are so powerful because
02:44 - they let us hold data
02:45 - and we can change data as well but we
02:48 - can also
02:48 - look up the value of our variable so you
02:51 - can see why it's useful to hold data
02:53 - now i'll show you some practical
02:55 - examples very soon
02:57 - but what i'm going to show you is how
03:00 - you can use variables
03:01 - to save you from typing out long
03:04 - references
03:05 - so if we wanted to say local
03:08 - and in fact let's just go into our base
03:11 - plate here
03:12 - and spawn location and let's make it a
03:14 - model okay
03:15 - and then inside of the base plate let's
03:17 - insert
03:18 - a point light okay actually we'll put it
03:21 - in the spawn location so we can see it
03:23 - then let's just change the range there
03:26 - we go so we can see our light
03:27 - now imagine i wanted to keep changing
03:29 - the color of this point light
03:31 - every time i would want to change it i'd
03:33 - have to say game
03:34 - dot workspace dot model dot spawn
03:37 - location
03:38 - dot point light dot color equals
03:42 - color three dot from rgb and this is how
03:45 - you
03:46 - specify a color there we go and that's
03:49 - what i'd have to do
03:50 - to change the color of the light okay
03:52 - you go it's changed
03:54 - now if i wanted to keep doing this and
03:56 - kind of do like a disco light
03:58 - i'd have to keep writing out this code
04:00 - over and over again
04:02 - but instead of having to write out
04:07 - game.workspace.model.spawnlocation.pointlight.com
04:08 - i could create a variable for that and i
04:10 - could say local
04:12 - and i could say light equals
04:18 - game.workspace.model.spawnlocation.pointlight
04:20 - we don't uh want the property
04:23 - as our variable we just want the object
04:26 - okay and
04:27 - now what we can do is we can replace all
04:30 - of these
04:31 - references here to light
04:34 - and then we can say light dot color
04:38 - equals color three dot new dot from rgb
04:42 - um
04:43 - sorry and we can dramatically reduce the
04:46 - amount of code
04:47 - to just light dot color so you can see
04:50 - how
04:51 - variables can help us reduce the amount
04:54 - of code
04:55 - lines that we write and then we could
04:57 - put weight
05:00 - 1 in between these lines here
05:03 - and we've got a quick little disco light
05:07 - going on here there we go and it keeps
05:10 - changing color
05:11 - you can see how variables save you from
05:13 - having to type out
05:14 - long references now one other thing i
05:17 - need to mention
05:18 - is what we just spoke about a couple of
05:20 - minutes ago is that
05:21 - there are a couple of naming conventions
05:23 - which you can't use when creating a
05:25 - variable
05:26 - so for example you can't start your
05:28 - variable off with a number
05:30 - and you can't use a couple of names
05:34 - i'm going to put them on the screen now
05:36 - because they are reserved by
05:37 - the lua scripting language for other
05:40 - important things
05:41 - um such as a function you can't
05:44 - call your variable function you can't
05:47 - call it
05:48 - um while for example because these are
05:50 - reserved by the scripting language
05:53 - now also variables are case sensitive so
05:55 - if i have two variables
05:57 - one called test var and another one
06:00 - called
06:01 - test bar these are actually two
06:03 - different variables because one is in
06:05 - uppercase and one is uh is written
06:08 - with an uppercase t for test and v for
06:11 - var
06:12 - but they are two separate variables but
06:15 - if they were
06:16 - both written like this then they would
06:19 - be the same
06:20 - variable so you can't use the same name
06:22 - you would have to use
06:23 - a different type of of case so they are
06:27 - two separate variables
06:29 - there so when you're defining a variable
06:31 - you can have
06:32 - variables with the same name as long as
06:34 - the case is different
06:36 - but i would recommend that you don't use
06:38 - the same names for your variables
06:40 - just so that you can not confuse
06:42 - yourself now the next thing we're going
06:44 - to talk about
06:45 - is scope and when you're in a script you
06:47 - have different levels of scope
06:49 - now let me give you an example of this
06:50 - scope is basically just where a variable
06:52 - can be seen or accessed
06:54 - and in this case my variable can be
06:58 - accessed anywhere in this script if you
07:00 - wanted to add to it in this function
07:02 - then we could just say myvariable equals
07:04 - myvariable
07:05 - at 50. that's how you update a variable
07:07 - by the way you just say the name of the
07:09 - variable
07:09 - and you set it equal to what it
07:11 - currently is and then you add on a
07:13 - number
07:13 - if you're dealing with a number variable
07:15 - so we can access and change this
07:16 - variable
07:17 - anywhere because we've defined it
07:19 - outside of any code blocks
07:21 - it's at the very top of our script it's
07:23 - not within any code blocks
07:25 - you might be wondering what's a code
07:27 - block and a code block
07:28 - is is take your function for example
07:31 - this is an example of a code block
07:33 - because it's got code inside of it
07:35 - that's indented inside of it that's in
07:37 - between our function
07:38 - and our end it's it's inside this
07:41 - function it's the code that will run
07:43 - inside this function and so when this
07:45 - function runs
07:47 - this variable called result now this
07:49 - function will add two numbers together
07:51 - so this function uh this variable called
07:53 - results will be
07:54 - the result of adding number one and
07:56 - number two but because
07:58 - we defined this variable within our
08:00 - function
08:02 - the scope of this variable is this
08:04 - function so it can only be accessed
08:06 - from within this function so you
08:08 - couldn't say print
08:09 - result okay you can see it's not it's
08:11 - not appearing on the autocomplete
08:13 - that's because it's not defined to the
08:16 - entire script
08:16 - like my variable is we could print my
08:18 - variable that's fine
08:20 - because it's defined uh within the
08:24 - the the scope of the entire script
08:27 - because it's not inside a function it's
08:28 - not inside a code block
08:30 - and so if we were to print my variable
08:33 - you can see 50 but if we were to print
08:36 - out
08:36 - result we will get an error
08:40 - because result is nil
08:43 - nil means non-existent there's nothing
08:46 - it thinks this variable hasn't been
08:47 - defined
08:48 - it can't find the variable that's
08:50 - because it's only been defined
08:51 - within this function and it's only going
08:54 - to it's only able to be accessed
08:56 - from this function so we could say print
08:59 - result within this function because it's
09:01 - been
09:02 - defined locally to this function here
09:05 - so let's call the function add numbers
09:08 - with
09:09 - one and two and it should print out
09:11 - three
09:12 - yeah because one add two over here there
09:16 - are parameters
09:16 - we then add our parameters together set
09:19 - them to this variable
09:20 - and print it out so that is what scope
09:22 - is scope's all about
09:23 - where you define your variables and if
09:25 - you define your variable within a code
09:27 - block
09:27 - such as a function there's other code
09:29 - blocks as well such as loops and if
09:31 - statements
09:32 - and we'll get onto those in future
09:34 - videos but that's just to show you how
09:37 - local variables are local to this to the
09:40 - code block
09:41 - and the scope block that they're in now
09:44 - there's also another type of variable
09:45 - and that is called global variables and
09:48 - a global variable doesn't require the
09:50 - local
09:51 - sign next to it and when you do have a
09:54 - global variable uh it
09:56 - means that you can actually uh you could
09:59 - print out results
10:00 - from here because results is global to
10:03 - the entire
10:04 - script now if we were to
10:07 - just uh get rid of this print here you
10:09 - can see it's saying
10:10 - global result is only used in this
10:12 - function you should consider changing it
10:14 - to local
10:15 - now if we were to print results again
10:18 - it doesn't even matter that we didn't
10:21 - define it at the top of our script
10:22 - because it's being defined in this
10:24 - function here and even though we defined
10:26 - it in the function
10:27 - we can still print it because it's
10:28 - global it hasn't got that local
10:30 - when we use local is telling the
10:32 - function right we only want this
10:33 - variable
10:34 - to be used within this function only to
10:36 - be seen within this function and
10:38 - accessed within
10:39 - this function now there is a downside to
10:42 - global variables
10:43 - and it's best practice to use local
10:45 - variables
10:46 - all of the time so that's why we always
10:48 - say local before our variables here
10:51 - local variables are faster than global
10:53 - variables because local variables are
10:55 - stored in
10:56 - cpu registers which are much faster to
10:58 - access
10:59 - than ram which is where global variables
11:02 - are stored
11:03 - so that's why it's better to always use
11:05 - local variables
11:06 - since there's a slight performance boost
11:08 - which you don't get when you use globals
11:10 - but it also makes it clear to other
11:12 - coders that when we use local
11:14 - it just tells us that we're defining a
11:15 - variable so everyone else uses so when
11:17 - you're working with people
11:19 - it's best that everyone's doing the same
11:21 - thing that's why we use local
11:23 - so even if you want your variable to be
11:24 - accessed from other scopes such as my
11:27 - variable
11:28 - because we've defined it outside of any
11:30 - other scopes in our in our scripts we
11:32 - haven't defined it in a function
11:34 - since it's it's in the highest scope of
11:36 - the script
11:37 - and it's local that still means it can
11:39 - be accessed anywhere
11:41 - in a function outside a function in any
11:43 - code block but when you have a local
11:45 - variable
11:45 - within a function then you're limited by
11:47 - the scope because the scope of the code
11:49 - block of this function
11:51 - means that we can only since we've
11:52 - defined it within this function we can
11:54 - only
11:55 - access it update it and read it from
11:58 - within this function
12:00 - now we did touch upon nil values as well
12:03 - so
12:04 - nil means nothing means it's
12:06 - non-existent so if
12:07 - you did not set anything as your
12:10 - variable
12:10 - you would then print it out then
12:14 - the value of this it would be nil
12:17 - it would be nothing because we haven't
12:18 - set anything as
12:20 - our value for this variable so nil just
12:23 - means nothing at all
12:25 - and one final thing each script has a
12:28 - 200
12:28 - variable limit so you can only have 200
12:31 - variables
12:32 - now this isn't anything to worry about
12:33 - it's unlikely that you will
12:35 - hit 200 variables on just telling you
12:38 - uh that there is this limit to be aware
12:40 - of if you have got loads of variables
12:42 - but trust me you will you won't need to
12:44 - worry about that too much
12:45 - unless you've got loads and loads of
12:47 - variables but per script
12:49 - 200 variable limit okay so hopefully
12:51 - that video
12:52 - has taught you everything you need to
12:53 - know about variables if you enjoyed it
12:55 - please do
12:56 - like the video subscribe if you're new
12:58 - and i'll see you in the next one thanks
13:00 - for watching