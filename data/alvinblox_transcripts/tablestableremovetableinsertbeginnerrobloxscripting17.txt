00:00 - hello everyone this is Alvin blocks
00:01 - welcome to this scripting tutorial on
00:04 - for loops and tables so the for loop
00:08 - that we're gonna be looking at today is
00:09 - called the in pairs loop whether there
00:12 - is another for loop which we will look
00:14 - at in future videos now a table is
00:17 - something that contains multiple bits of
00:20 - data okay so just like a variable which
00:23 - can hold one piece of data a table can
00:26 - hold multiple pieces of data and we hold
00:29 - them in these squiggly brackets so all
00:33 - of your data will go inside of these two
00:35 - Sewickley brackets when we have those
00:37 - two squiggly brackets or braces we are
00:40 - telling the script that it is a table
00:42 - and you separate each piece of data with
00:46 - a comma so in this table I have got 11
00:49 - items and each item is a piece of data
00:54 - which is of the number data type it
00:56 - could be any data type it could be a
00:59 - string it could be an object it could be
01:01 - a boolean or a number you can have them
01:05 - all mixed together so you could have a
01:06 - table with numbers strings you know
01:09 - objects all in one table doesn't matter
01:12 - and the order doesn't matter either so
01:15 - you can see I've got them these numbers
01:17 - ordered 1 to 11 although that really
01:19 - doesn't matter you could have 11 at the
01:20 - start and 1 at the end and what does
01:23 - matter is that every item in the table
01:26 - has its own position index so a position
01:30 - index is a way of identifying an object
01:34 - in the table so they start off at 1 so
01:38 - this number here this 11 because it's at
01:41 - the start of the table it will have the
01:42 - position index of 1 this one will have
01:45 - position index 2 3 4 5 6 7 8 9 10 11 as
01:51 - we go along so they all have their own
01:52 - position index values and that's just a
01:57 - way of identifying the things in the
01:59 - table because we might not know the the
02:04 - order of the table but if we want to
02:08 - access a certain piece of data that's in
02:11 - the table we can identify it by its
02:13 - number and it can get a little bit
02:16 - confusing in this example because we
02:18 - have a load of numbers but if I just
02:19 - give you another example here okay great
02:22 - I have just updated the table and you
02:24 - can see we have got a object here we've
02:28 - got a string here we've got a number
02:31 - here and a boolean so we've got four
02:34 - different pieces of data but again
02:36 - they're all going to have position index
02:38 - values separated by that comma so we
02:40 - know that this is the first object so
02:43 - it's going to have position value 1 2
02:46 - over here 3 over here for if you were to
02:48 - add more then it would just carry on so
02:50 - if you had another you know piece of
02:52 - data here then that would be a 5 and
02:54 - that it would go on for as many items
02:56 - that you have
02:57 - so we it's invisible basically we you
03:00 - know we can't see the position index but
03:03 - we don't need to because we know that it
03:06 - just counts up from 1 from the start so
03:08 - this would be the first one this would
03:09 - be the second one should be a third one
03:11 - etc so how do you access things that are
03:14 - in a table because we've got things in a
03:15 - table right now and that's all well and
03:17 - good but we don't know how to access
03:19 - them so what we can do from a script if
03:22 - we wanted to access them we would have
03:24 - to firstly say the name of the table we
03:27 - would then have to specify its position
03:30 - value its index I'm just gonna call it
03:33 - index from now on because that's what we
03:35 - call it so it's and so the index is
03:37 - basically the the number position of
03:39 - where it isn't in the table so in square
03:42 - brackets we then put that that index
03:45 - value so if I want to get the first item
03:47 - in the table I can say 1 and just like a
03:51 - variable this is now equal to the value
03:55 - at that index so at index 1 is game dat
04:00 - voice basedgod base plate so if we were
04:02 - to so so basically my table 1 is gonna
04:06 - be equal to game that works based on
04:08 - base plate and just to prove that if I
04:10 - was to print this it would print out the
04:14 - it prints out the base plate there we go
04:18 - it prints out base plate so it's name
04:20 - and if you were to change this so 2 2
04:23 - which is a string it will print out
04:26 - so there we go and if I was to print out
04:30 - three it would print out 50 because
04:33 - that's a number so there you go so this
04:36 - is how we access things that are already
04:38 - in a table so we use the index value but
04:42 - also you can edit a table by adding
04:47 - things to it you can add things to it
04:50 - right now by just adding a comma and
04:52 - adding something new but what if you
04:54 - wanted to add something to a table as
04:56 - the game is going on like when we are
04:59 - when the game is running we can't add
05:02 - something to a table we just can't head
05:03 - into the script and add something
05:04 - because the scripts running we can't
05:06 - edit it when it's running so say if a
05:09 - game is currently happening and we want
05:12 - to add something to a table you may be
05:13 - thinking
05:14 - give me a practical use of a table
05:17 - because why would you want to add
05:18 - something to a table okay so a typical
05:21 - example is you can have a table of
05:25 - players who are currently in the round
05:29 - so let's say you have a hide and seek
05:31 - game and at the start of the round you
05:35 - would have all of the players objects in
05:38 - the table and you don't need to worry
05:41 - about how we we're getting them and
05:43 - adding them in but let's just imagine
05:44 - that we have games got players got Alvin
05:47 - and game got players got Bob and these
05:50 - are the players that are in the round
05:52 - when it begins and let's just have
05:55 - another one in here because one of them
05:57 - will be the seeker so we'll have Allen
06:00 - as well so now what you'll what we want
06:06 - to do is let's imagine that Alvin gets
06:09 - caught so we would want to remove Alvin
06:14 - from the players in round table because
06:16 - he's no longer in the round he's out of
06:19 - this round because he's been caught so
06:22 - we would want to remove him from the
06:24 - table so how do we do that so we can say
06:27 - table dot remove and you can see when we
06:31 - write table there are all sorts of
06:32 - different functions that we can apply to
06:35 - a table so these are all built into
06:37 - roblox we've got remove we've got insert
06:40 - we've got things like saw to con cats
06:43 - pack unpack we're not going to look at
06:45 - those today running a look at table dot
06:47 - insert table dot remove because there
06:50 - are the things that you need to know
06:51 - basically so we can say table dot remove
06:54 - and this is the way of telling the
06:57 - script that we want to remove something
06:58 - from the table so you say table dot
07:00 - remove in a lower case and it should go
07:02 - blue now in these brackets if you just
07:05 - look closely it says okay so the first
07:08 - thing that we're gonna put in these
07:10 - brackets is the actual table that we
07:13 - want to remove something from we need to
07:16 - tell the script which table do we want
07:18 - to be removing from so we want to really
07:21 - removing from the table players in round
07:24 - that's why it's important for the table
07:26 - to be a variable so he can access it
07:28 - later on just like a variable then we do
07:30 - a comma and now it's looking for the
07:32 - number pause now pause is short for
07:35 - position so it's looking for that
07:37 - position index value which we talked
07:39 - about earlier which is how we can
07:41 - uniquely identify a item in a table
07:45 - because what if you had two items in the
07:47 - table that are exactly the same you
07:49 - could have two numbers so you could have
07:51 - two 50s in a table or two-game drop
07:53 - players to Alvin's or two strings are
07:55 - exactly the same how do you
07:57 - differentiate between them well that's
07:58 - what the position index values for
08:00 - beakers even if you have two items in
08:02 - the table with all the same they're
08:04 - gonna have different index values
08:05 - because one's gonna be you know two and
08:07 - then the next one's gonna be three so
08:09 - they're gonna have different values so
08:10 - we put that number in and because Alvin
08:12 - is at position number one we remove the
08:16 - first index from the table and don't go
08:19 - worrying about Oh what if you don't know
08:22 - that their position in the table well
08:23 - it's just an example right now and you
08:25 - know you'll be able to do that when you
08:27 - do more tutorials and you'll know about
08:30 - that but this is just an example so
08:31 - we're removing from the table players in
08:34 - round the first index if you wanted to
08:37 - remove Bob we would do two because his
08:39 - index value is two because he is the
08:41 - second item in the table he wants to
08:43 - remove Allen guess what it's gonna be
08:44 - three because he's the third index in
08:47 - the table but what will happen now is if
08:50 - we just set that back to one for having
08:51 - what's going to happen is the table is
08:53 - going
08:54 - to look up the first index which is
08:55 - Alvin here is gonna completely remove it
08:58 - and we're gonna have two items left in
09:01 - the table my trap so let's just let me
09:03 - just show you this I'm gonna do is I'm
09:06 - going to print the players in round I'm
09:11 - going to print the first player in the
09:13 - round okay now because we don't have the
09:17 - actual players in the game it's going to
09:19 - error so I'm just going to replace them
09:20 - with strings so just imagine that they
09:26 - are objects but obviously we don't have
09:27 - an Alvin Bob and Alan in the game to use
09:30 - so we are using strings for this example
09:32 - so if we print out before we do any
09:35 - removing we've print out the first item
09:38 - in the table then we remove them okay
09:40 - let's have a wait in here so we can see
09:42 - the changes then we're gonna remove
09:44 - Alvin
09:45 - then we're gonna wait again just so that
09:47 - we can see the changes we don't need to
09:49 - wait again actually if we just do a
09:51 - print we're gonna do print players in
09:53 - round one so what should happen is here
09:56 - it should print Alvin because at this
09:58 - moment in time one more on line eight
10:00 - when we were on line eight
10:02 - Alvin is the first index in the table
10:04 - haven't been removed yet then we're
10:07 - gonna remove the first index so Alvin
10:09 - will be gone so then because Alvin's
10:13 - gone then the table shifts and all of
10:17 - the indexes will move so Bob will take
10:21 - the place because he's now the first
10:23 - index so he's gonna have index one
10:25 - although he had index two before his
10:27 - index is now one so he's been shifted to
10:30 - the top of the list right so Alan will
10:33 - now take Bob's index and Alan will have
10:35 - index two so let's just look at this
10:37 - again so if Alvin has position one two
10:41 - and three but then Alvin gets booted off
10:44 - the table then what's gonna happen is
10:47 - everyone else is gonna take their place
10:50 - so Bob here because there's no more
10:52 - Alvin what's gonna happen is you see Bob
10:57 - is now position index one Alan is
11:00 - position index two and while there isn't
11:02 - a position index 3 anymore because we've
11:05 - shifted and there is no longer the
11:07 - no longer three objects in the table so
11:09 - there you go so what should happen is
11:11 - down here it should print Bob so let's
11:15 - run the scripts and see what happens
11:18 - actually we need to just um nevermind we
11:23 - don't actually need to do that I was
11:24 - just a bit too concerned because I
11:26 - thought this with the table with never
11:28 - mind you can see it's printed out Alvin
11:30 - let's run that again
11:32 - so prints out Alvin wait two seconds
11:34 - removes Alvin from the table and then
11:37 - Bob comes along and is now the first
11:40 - index so just as we thought what
11:43 - happened the first index was Alvin but
11:45 - then we kicked out Alvin from the table
11:47 - who removed it and so now we can tell
11:50 - that Alvin was removed because Bob is
11:52 - now the first item in the table because
11:55 - the order has shifted so there you go
11:57 - you can also add things to a table
11:59 - so you could say table dot inserts and
12:02 - you can give the players in round and
12:06 - then the instead of giving the index so
12:10 - instead of saying position two you can
12:12 - give that you so you can say that the
12:15 - position so I want to be inserted at
12:17 - index two John okay so if now what's
12:23 - going to happen is if I was to print out
12:26 - position two here let's just change this
12:28 - so at first Bob should print first
12:32 - because he's currently in position two
12:34 - but if we then add John into the table
12:37 - at position two Bob should shift along
12:41 - because let's just have a look at how
12:43 - this will work let's draw our positions
12:44 - in so one two three let's add a fourth
12:47 - one what's going to happen is when we
12:49 - get to this line here
12:50 - well John is gonna be inserted at
12:53 - position two so sorry Bob but you've got
12:55 - to move along so everyone gets moved on
12:57 - just excuse the drawing for now what
13:01 - happens can you see that John takes
13:04 - Bob's place and Bob moves along to
13:06 - position three so when we print out
13:09 - players in round the second index we
13:11 - should be getting John the second time
13:13 - round so at first its Bob but then
13:16 - inserted into the table comes John and
13:19 - John is now in position two
13:21 - so the positions have shifted just like
13:24 - they shifted when we removed someone
13:25 - they also shift when we add someone but
13:28 - instead of shifting to the left they've
13:30 - shifted to the right because John has
13:32 - come in and taken Bob's place sorry Bob
13:35 - but now John is more powerful than you
13:39 - because he is in position number two but
13:42 - that is what table insert table remove
13:45 - is so very useful if you want to add
13:49 - things to a table so again in the
13:51 - context of this example when somebody
13:53 - gets caught we want to use table dot
13:56 - remove to remove them from the table
13:57 - when somebody joins the game we want to
14:01 - add them to the table or when the round
14:02 - starts we want to add everyone to the
14:04 - table which leads on really nicely to
14:08 - the next video which is going to be for
14:10 - in pairs loops everybody's been asking
14:12 - for this video while guys is coming and
14:14 - I hear you because everybody's thinking
14:17 - oh what what are these for in pairs
14:20 - loops so for IV in pairs
14:23 - you know what's all this good stuff
14:24 - about well we'll be learning about that
14:27 - in the next video because coincides
14:29 - really nicely with tables it's one of
14:31 - those things where you need to know
14:32 - about tables first for you to be able to
14:37 - understand the in pairs loop because
14:39 - really all it is is just manipulating
14:43 - tables at scale with this for loop so
14:46 - see you in that video I hope you enjoyed
14:49 - this one any concerns questions leave a
14:51 - comment I will try and respond and do
14:55 - leave a like do subscribe do share it
14:57 - with your friends if they if you think
14:59 - they will benefit from this free
15:01 - scripting teaching on my youtube channel
15:04 - so don't forget subscribe don't forget
15:06 - to like if you in like if you do like
15:08 - the videos and I'll see you in the next
15:10 - one Cheers
15:11 - bye