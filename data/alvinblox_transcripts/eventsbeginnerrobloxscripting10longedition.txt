00:00 - now I know this is a really long video
00:01 - and I appreciate that not all of you
00:03 - gonna want to watch it this goes very in
00:05 - detail on events so if you really want
00:07 - to know how to use them you want to get
00:09 - the most out of this you want to know
00:10 - you want to be good at events then I
00:13 - recommend watching this but I'm also
00:14 - going to make a shorter version maybe
00:16 - like 10 minutes teaching how to use
00:18 - events the basics all you might need to
00:20 - know for now so leave that as a card in
00:23 - the top right corner if you want to go
00:24 - and check that out also leave a link in
00:26 - the description I appreciate that you
00:27 - might not have the time or the willpower
00:29 - to watch this fully get that so I'm
00:32 - going to make another shorter video that
00:34 - tries to explain this in a shorter way
00:37 - so thank you hello and welcome to
00:40 - episode number ten in my scripting
00:42 - series in this video we're gonna be
00:44 - looking at events now in the previous of
00:47 - videos in this series we've been
00:49 - learning all about functions variables
00:51 - properties all that good stuff but this
00:55 - is where it starts to get more
00:58 - interesting and more exciting because
01:00 - events are a very main an integral part
01:04 - of roblox scripting and game development
01:08 - they are used everywhere in every game
01:10 - you will be using events and events are
01:13 - what help things happen in game so for
01:17 - example events allow us to trigger
01:20 - things
01:20 - what an event does is it listens out and
01:23 - waits for something to happen and when
01:24 - something specific does happen what we
01:27 - can do is we can we can get off script
01:29 - to do something to do an action when
01:32 - this event is triggered when it listens
01:35 - out for something for example I could
01:38 - tell the script that whenever I step on
01:41 - a banana then I could trip over it and
01:44 - fall over and then when I when I do step
01:47 - on it we fall over so how have I been
01:50 - able to make the script listen out for
01:54 - that and know that when I'm touching
01:56 - that banana or for example how can I do
02:01 - something
02:01 - when a player clicks a button it's all
02:04 - thanks to events an event listens out
02:07 - waits for something to happen and when
02:10 - it does it triggers an action
02:12 - so some real-life examples for example
02:16 - if you had an alarm clock your alarm
02:18 - clock is constantly going to be checking
02:20 - the time and let's say you want it to
02:22 - wake you up at seven o'clock well if the
02:24 - time is 658 a.m. it's not going to set
02:28 - off if it's 659 it's not going to set
02:31 - off but when it gets to 7:00 a.m. yeah
02:33 - it's gonna turn on your radio it's gonna
02:35 - wake you up so it's constantly checking
02:37 - constantly waiting for something to
02:39 - happen for your alarm clock to reach 7
02:42 - o'clock when it does reach 7 o'clock it
02:44 - triggers an action that action being
02:46 - that it's going to turn your alarm clock
02:47 - on it's gonna wake you up and with the
02:51 - button when I click the button it's
02:53 - constantly waiting to see if it's been
02:55 - clicked and when it has we can fire an
02:58 - action to happen so events are all
03:01 - around us and you know if you turn on
03:02 - your computer you click on the on button
03:05 - on your on your computer it's gonna
03:06 - trigger it to boot up so it's the same
03:09 - in roblox we can make triggers or we can
03:14 - trigger things to happen in the game
03:15 - using events so let me show you how they
03:18 - work
03:19 - so they're actually quite simple all we
03:22 - need to do is set up an event and then
03:25 - we need to connect it to a function now
03:28 - if you haven't already watched my videos
03:30 - on functions you're completely new to
03:31 - this I recommend you go ahead watch them
03:33 - so that you know I'm talking about
03:35 - actually might lose track so I'll leave
03:38 - a card in the top right corner of the
03:41 - screen and also a link in the
03:42 - description I'm gonna take this nice and
03:44 - slow as well and I'm probably gonna do a
03:46 - couple videos on events because you
03:48 - might think they are a little bit tricky
03:50 - but trust me they are they are quite
03:52 - easy and it just takes a little bit of
03:54 - practice so every I'm gonna start off by
03:57 - saying about an object in in roblox so
04:02 - you know that if you've been watching
04:03 - previous videos you know that an object
04:05 - in a roblox game it has properties so
04:08 - things like its color is transparency
04:10 - its reflectance whether it's anchored or
04:13 - not so there are properties and they
04:15 - define what an object looks like or how
04:18 - its how it behaves in the game you know
04:20 - does it fall through the map if it's
04:23 - angered you
04:24 - can we collide with it etc so we have
04:27 - got properties we've also got functions
04:30 - of objects and we covered that last time
04:33 - in the inbuilt functions video which
04:35 - I'll leave the card to as well if you're
04:36 - interested in that and what that means
04:38 - is that an object can have its own
04:40 - predefined functions for example destroy
04:44 - destroy is a common function built into
04:47 - an object or clone or clear all children
04:51 - as we looked at previously but we also
04:54 - have another thing built into objects
04:59 - and they are events so we have
05:01 - properties we have built-in functions
05:04 - and we have events and an event is
05:07 - something that will get triggered when
05:12 - something's specific happens to that
05:15 - object now to have a look at all the
05:17 - events available there are loads of them
05:19 - that we can track and we can set up to
05:23 - trigger things we're going to go to the
05:24 - object browser so click on View and
05:26 - click object browser now on the Left
05:29 - panel here these are all of the
05:31 - different objects available to us in
05:33 - roblox and on the right are all of their
05:36 - events functions and properties so let's
05:40 - select a part because that is the the
05:43 - base class and we'll use as an example
05:45 - so let's see p4 parts part here we go so
05:50 - I'm going to click on parts and you can
05:52 - see that we have our built in functions
05:55 - these are the the pink icon one so we've
05:59 - got break joints what that does is
06:01 - basically just makes a model or a group
06:05 - of parts if they are welded together
06:07 - they would just fall apart we've said
06:09 - about clone and destroy so these are the
06:11 - different things that we can call on an
06:14 - object to do an action such as cloning
06:17 - it or destroying it but we're not
06:19 - looking at that today and we've also got
06:21 - our property such as anchored brick
06:24 - color C frame these are the blue icons
06:26 - so the things that change the parts
06:28 - doing the objects appearance or how it
06:31 - behaves and then at the bottom here in
06:34 - yellow we've got our event
06:37 - and these are the ones with the
06:39 - lightning bolt this is what we're gonna
06:40 - be focusing focusing on today so we've
06:43 - got loads of different events here and
06:44 - these are things that we can track and
06:46 - what we can do is we can set up a
06:48 - listener and a listener is basically
06:51 - waiting it's it's code that will wait
06:55 - for one of these events to happen so all
06:58 - of these lightning bolt things here are
07:01 - things that could happen for this
07:03 - specific object and don't forget these
07:05 - are predefined by roblox you can't make
07:08 - your own events that wait out for
07:10 - something specific to happen so for
07:12 - example wait for Alvin blocks to I don't
07:17 - know chats a message well you can but
07:20 - you can't just have a really specific
07:21 - event like that you'd have to have an
07:23 - event that there's been already created
07:25 - and then you have to do checks once it
07:27 - fires but if we're just thinking about
07:29 - events that come you know predefined
07:32 - pre-made built into an object that's
07:34 - what we're gonna be looking at today and
07:36 - these are the ones that roadblocks have
07:38 - built in to the part objects and ones
07:41 - that we can listen out for on a part so
07:44 - we've got touched and what that means is
07:46 - when when a part has been touched by
07:48 - something so maybe it's hit a player of
07:51 - they've stepped on it or something
07:52 - touch ended which is when so if somebody
07:54 - has stopped touching or something has
07:56 - stopped touching a part and we've got
07:59 - these other ones we won't be focusing on
08:01 - yet but these are the events that we can
08:04 - set up to listen out for and when we set
08:07 - them up in our scripts when we say
08:09 - listen out for it means we're telling
08:11 - the scripts that when this event happens
08:14 - when it's triggered do something because
08:17 - they will trigger themselves the script
08:19 - will know when it's been touched because
08:21 - these events have been set up are
08:23 - constantly looking out for whatever is
08:27 - to happen so the touched event is
08:29 - constantly checking to see if an object
08:33 - has been touched but we don't have to do
08:35 - anything else to determine if it has
08:36 - because roblox is doing it in the
08:38 - background because you might be thinking
08:40 - oh well how how how do I know if
08:42 - somebody is stepping on it on a brick or
08:44 - something and that's why you don't need
08:46 - to check that
08:47 - because it's it's already been made for
08:49 - us by roblox and that's why we've got
08:51 - the touched event the touched event is
08:54 - going to be looking out for us it's
08:56 - always gonna be constantly check in we
08:58 - don't need to do it ourselves
08:59 - that's why it's built in that's why it's
09:02 - a built in event so let's choose the
09:05 - touch to them and you can see I've set
09:06 - up a touched event here and you might be
09:09 - thinking oh my goodness how am I
09:12 - supposed to understand this but I'm
09:13 - gonna walk you through it firstly what
09:16 - we do is we get the part that and we're
09:18 - focusing just on the touch Deven right
09:20 - now but we're getting the object that we
09:22 - want to listen out for the event on so
09:26 - in this case we want when this player
09:29 - when a player touches this banana-peel
09:32 - we want them to slip over so well
09:35 - firstly we've got the script inside of
09:37 - the banana
09:38 - so we're firstly getting the banana so
09:42 - we're referencing it
09:43 - so we're saying script dot parents or we
09:45 - could say game dot workspace banana
09:47 - that's what we're doing we're getting
09:49 - the banana and then wrong we have got
09:52 - the banana I'm just gonna write it again
09:53 - to show you we do the dots and like we
09:57 - have done before it shows up all the
09:58 - properties that we could choose but we
10:00 - don't want to choose a property we want
10:01 - to choose an event we want to listen out
10:04 - for when this part or object has been
10:07 - touched by something but we're also see
10:09 - down here that it's suggesting events so
10:12 - we want to listen out for when the
10:14 - banana has been touched
10:16 - so we're saying to the script okay right
10:18 - we want to set up an event for when the
10:21 - begin banana gets touched and that's
10:23 - what we've done we've set up our event
10:25 - but nothing's gonna happen right now
10:28 - because we haven't told the script what
10:31 - we want to do when it has been touched
10:33 - and this is where : Connect comes in so
10:37 - : Connect is basically telling the
10:39 - script that when the event happens when
10:43 - it gets triggered because roblox is the
10:46 - one that is triggering it behind the
10:47 - scenes in the week I mean it's checking
10:49 - to see if it's triggered behind the
10:50 - scenes
10:50 - we're not the one that's constantly
10:52 - going okay after I touched it yep have
10:54 - they touched it yet because it's
10:55 - happening behind the scenes as long as
10:57 - as long as we've said squid
10:59 - dot parent touched or ever the event is
11:01 - roblox is then or just touched
11:04 - I mean if we've referenced it I mean you
11:05 - could say game to work space dot part
11:07 - touched or script or parent as long as
11:10 - you've referenced it and said the name
11:12 - of the event that you want to listen out
11:15 - for roblox will take care of that roblox
11:17 - behind the scenes will constantly check
11:19 - to see if you know your your event has
11:23 - triggered and that's the great thing
11:25 - about events just like inbuilt functions
11:27 - roblox is taking the work or what away
11:29 - from us we don't have to be the ones
11:31 - constantly checking like with the
11:33 - inbuilt functions in the previous video
11:35 - I said you don't have to be the one if
11:38 - you're calling destroy the the destroy
11:41 - function on a part you don't have to
11:43 - worry about getting rid of that objects
11:45 - you can just say : destroy and roblox
11:47 - takes care cover it for you it deletes
11:49 - it so as long as we've said the event
11:54 - name and we have tied it to an object
11:59 - which supports that event because not
12:03 - all objects do if we take a rave al you
12:05 - for example that doesn't have a touched
12:06 - event so as long as the object has the
12:09 - event and you are calling it then it
12:12 - will trigger but we need to tell the
12:15 - script what we want happen when it does
12:17 - trigger we need to set up the action so
12:20 - you have a trigger and you have an
12:21 - action
12:22 - so this is where connect comes in so
12:24 - connect tells the script okay when the
12:29 - event that you just said about happens
12:31 - we need to run some code right so we can
12:36 - set up a function and I said before in a
12:38 - previous video a function is a
12:41 - predefined code that we run at certain
12:45 - times a function we could have a
12:48 - function call it hello and we can just
12:51 - print hello this function isn't gonna
12:54 - run until I call it until I say hello
12:57 - okay so what we can do is we can set up
13:00 - our event to trigger this function
13:03 - whenever the event is fired whenever it
13:08 - is you know triggered when somebody do
13:10 - step on that sparked when roblox sends
13:12 - the
13:12 - signal because they're constantly
13:14 - checking to see if someone has touched
13:16 - it when they had when it when they when
13:18 - somebody has touched that part we can
13:20 - fire a function we can fire predefined
13:23 - code so I've got my function how do I
13:28 - connect it to that event and there are
13:31 - two ways obviously you just saw you know
13:33 - about 15 seconds ago when I before I
13:36 - deleted the the code how it works but
13:39 - there's two ways I'm gonna show you a
13:40 - simpler way first so we've got our game
13:45 - dot workspace banana or script dot
13:48 - parent doesn't matter doesn't matter
13:49 - what you say we've got our parts we need
13:52 - to get the touched event again because
13:54 - that is the event that we are listening
13:56 - out for last the thing that we want to
13:58 - trigger our function when the banana has
14:00 - been touched and yes it has to because
14:03 - it has to be called touched because that
14:05 - is what has what roblox have set the
14:07 - events name we can't do anything about
14:10 - that so you have to say touched so what
14:13 - we now do we want to trigger the
14:15 - function hello when somebody touches the
14:19 - banana so we say : Connect and then what
14:24 - we have to do when we say connect we
14:26 - have to do brackets because then inside
14:28 - of these brackets we can specify the
14:30 - function that we want to run so inside
14:34 - of these brackets after the connect
14:35 - we're gonna write hello
14:37 - now you may be wondering do we put the
14:41 - brackets afterwards like we usually do
14:42 - over here and no you do not you do not
14:45 - put the brackets afterwards like this do
14:48 - not do that okay and if you do it will
14:52 - not work I will show you I will play the
14:55 - game and it says attempt to connect
14:58 - failed past value is not a function that
15:02 - is because we are calling the function
15:03 - we are not actually passing the function
15:06 - up here so we get rid of these two
15:09 - brackets or parenthesis may be a little
15:12 - bit confusing but when you are doing
15:14 - connect this way you just with a
15:17 - predefined function in this case because
15:19 - this function has already been defined
15:21 - before we have set up the touch to
15:23 - listener we just give the name of the
15:25 - function okay so now if we play the game
15:29 - it is going to print hello when we step
15:33 - on the banana peel I can trust me 100%
15:37 - is going to work there we go I've
15:38 - stepped on the banana and would you look
15:40 - at that as printed hello and let's just
15:43 - go over why that's happened again but
15:44 - has happened because we've set up a
15:47 - function called hello it's gonna print
15:49 - hello when we call it and we've told
15:52 - script
15:52 - whenever the banana has been touched
15:55 - whenever this event which is connect
15:59 - which is which is basically say it's its
16:01 - own event it's like a member of the part
16:03 - because it sits in the object browser
16:05 - it's an event of that of that part
16:08 - objects when it has been touched we are
16:11 - then because we have connected the the
16:14 - function hello to this event what's
16:17 - going to happen is when the banana is
16:19 - touched then it's always going to run
16:22 - this function no matter how many times
16:24 - you touch it if you touch it one time it
16:27 - will run the function once if you touch
16:29 - it ten times it will run it ten times
16:32 - you can see after the hello it got a
16:34 - times seven that just means that it's
16:37 - printed the same message seven times but
16:40 - instead of flooding the output it has
16:42 - printed it once and then at time seven
16:44 - to show just to shorten it down but what
16:47 - that means is the function hello has
16:49 - been triggered seven times because we
16:52 - stepped on the part seven times now it
16:55 - may just look like we stepped on it once
16:57 - and okay fair enough we kind of did but
16:59 - the reason it triggered seven times is
17:02 - because the touched event will trigger
17:05 - when any part no matter what interacts
17:10 - with that banana when it you know
17:12 - touches it basically and when we walked
17:14 - over it all of my body parts were
17:17 - touching it at the same time let me
17:19 - prove it to you if I select all of my
17:21 - body parts you can see that my character
17:23 - is made up of loads of different parts
17:25 - the left foot left hand left lower arm
17:27 - torso etc you see all these different
17:30 - parts that highlighted in blue yeah and
17:32 - I highlight the banana as well well look
17:35 - when I'm doing I'm touching it they're
17:37 - like what three four five
17:39 - if parts on it at the same time when I'm
17:42 - constantly moving it constantly keeps
17:45 - touching the banana so it's gonna be
17:46 - running multiple times and in the future
17:49 - video I'll learn about how to stop that
17:50 - so that only it runs once ok but you
17:54 - don't need to worry about that for now
17:55 - what you need to know is that the
17:57 - touched event we have tied it to a
18:00 - function called hello what you also need
18:04 - to know is that you must define at the
18:06 - function if you're doing this method you
18:08 - must define the function before you set
18:12 - up the event listener ok the event
18:14 - listener is this thing here this is the
18:17 - event listener because it is listening
18:18 - out waiting for that touch event to fire
18:23 - to be triggered ok when we say trigger
18:27 - and fire it moves the same thing just
18:29 - for context when you step on the banana
18:32 - it is firing the touched events that
18:34 - touched event is getting sent off as
18:36 - being fired then it's being picked up by
18:39 - this event listener okay so this is
18:42 - listening out waiting for us to step on
18:45 - the brick when we step on the brick then
18:47 - we're triggering this we're firing it
18:49 - means the same thing but you can't have
18:52 - the function below the event listener
18:54 - because the script goes in steps it
18:57 - works its way down so it goes line 1
19:00 - line 2 line 3 line 4 hasn't seen line 6
19:04 - yet because it hasn't got to it we're at
19:05 - line for where we're currently here we
19:08 - were at line 1 we worked our way down to
19:10 - line 4 we're currently here we won't
19:12 - move on to line 5 until we have executed
19:14 - and completed line 4 and on line 4
19:18 - we're saying when the banana has been
19:20 - touched connect that's fine but it's
19:22 - when we could say hello he's saying
19:24 - connect the function hello to the banana
19:27 - but because the script hasn't got to
19:30 - line 6 yet it hasn't even defined the
19:32 - function yet it's thinking well what's
19:34 - hello don't know what hello is hasn't
19:36 - been defined yet so we're gonna throw an
19:38 - error and I'm gonna show you that we run
19:41 - the game boom attempt to connect failed
19:44 - passed value is not a function of course
19:47 - it's not a function
19:48 - it's a nil value because we haven't
19:50 - defined it yet
19:51 - only a function when we define it later
19:54 - on so you cannot set up the
19:56 - eventlistener
19:57 - until you have to find the function if
20:00 - we put it below the function it's gonna
20:02 - work fine a tree but you have to make
20:04 - sure you have to find your function
20:07 - first if you're doing it this way
20:08 - there's also another way to set up
20:10 - event.listen as it was the way I showed
20:12 - you in the when I first opened the
20:14 - script I forgot to clear it but what
20:17 - that method is is basically when you
20:20 - want to set up a function on the fly a
20:22 - function that you haven't already set up
20:25 - yet but you can set it up in the in the
20:28 - connect so it's kind of like you're
20:31 - setting them up at the same time you're
20:33 - setting up your event listener and
20:35 - you're also setting up the function
20:36 - that's gonna be fired
20:37 - because sometimes you're not gonna need
20:39 - to define a function you might not want
20:41 - to because you're only gonna use it for
20:43 - when this banana is touched so I'll just
20:46 - show you how you do that as well now so
20:48 - instead of saying hello because that's
20:50 - no longer a function it's not a
20:51 - predefined function anymore we want to
20:53 - define our function in this in this line
20:56 - for in this connect so we want to
21:00 - execute a function that's that does not
21:04 - exist currently so we can just say
21:07 - connect inside of here we're doing the
21:10 - exact same thing basically just creating
21:12 - a function so what we're saying is when
21:15 - this banana is touched we want to want
21:17 - to run some code and we can just power
21:19 - function inside of these brackets kind
21:21 - of justice to do just the same thing
21:23 - basically and I think they call it an
21:25 - anonymous function because we don't
21:27 - actually give it a name whereas in the
21:30 - previous example we just gave it a name
21:32 - hello and then referenced it by putting
21:34 - hello in here whereas in this case we're
21:36 - just putting the function in there so we
21:39 - do function and then pair of brackets
21:41 - for our parameters for our arguments
21:43 - we'll get to that in a future video
21:47 - just like our parameters we did in
21:49 - previous videos I'll leave a card to
21:51 - that in the top-right corner in the
21:53 - description so we create our function
21:57 - don't forget we still have to close this
21:59 - bracket off but we haven't added our end
22:01 - in yet so we add the end to close the
22:04 - function
22:04 - and then we add a closing bracket right
22:07 - so what's basically what we've basically
22:10 - done is we've created a function and any
22:13 - code that we put in here so print hello
22:16 - that is going to run so what we
22:19 - basically you can't just say print hello
22:22 - and put it inside this connect it's not
22:25 - going to work
22:26 - you have to put it in a function
22:27 - basically because when you do connect
22:32 - the script always things that you're
22:34 - gonna have a function in here but
22:36 - actually you're not you can don't want
22:38 - to run some code so it has to be you
22:41 - might want to print hello but it thinks
22:43 - that you want to run a function and even
22:46 - if you haven't already created the
22:47 - function you still have to put the code
22:49 - in a function like we just did here but
22:52 - if we do it like this so we basically
22:54 - just create our function we've wrapped a
22:57 - print inside of it and then we've closed
22:59 - it off with an end okay it's not
23:01 - connected to these parentheses or
23:03 - anything it's just a function and their
23:05 - only difference is that we've not
23:06 - separated it with lines so we could do
23:08 - this right this looks more like a
23:11 - function right that we've done
23:12 - previously because it is a function it's
23:14 - just a function without a name we could
23:16 - give it a name myfunc but there's no
23:19 - point and it's not gonna work anyway
23:21 - because it's inside of this Connect so
23:24 - this is an anonymous function because it
23:26 - has no name and if we run this code it's
23:31 - gonna print hello
23:32 - when we step on the banana as it did
23:34 - before and the only difference is that
23:38 - we haven't given a name because we don't
23:40 - need to because we're not going to be
23:41 - referencing it anyway we're not gonna be
23:43 - calling anywhere else
23:44 - we're only calling this function when
23:46 - the banana is touched so that's what it
23:50 - looks like but the way that we format
23:52 - this and the way that we lay out and the
23:54 - way that you're supposed to write it is
23:56 - having the function up here right and
23:59 - then you put the end you put the bracket
24:04 - after the end like this okay so it looks
24:07 - like this you've got your game that
24:08 - works place top banana dot touch to
24:10 - connect then you've got your function
24:12 - okay you don't have two closing brackets
24:15 - you only have one closing
24:16 - here and your last closing bracket goes
24:18 - after the end because if you think about
24:20 - it you you creating your function
24:22 - you're putting your code in there then
24:24 - you're stopping your function but
24:26 - remember all of this code is still
24:28 - wrapped between these two brackets so
24:30 - you've got your closing bracket on the
24:32 - end here and you open bracket here to
24:34 - enclose this function so what we've done
24:37 - is we've connected it to a function that
24:39 - we haven't yet created well what I mean
24:41 - we have created it we've just told the
24:43 - front what I'm trying to say is instead
24:45 - of pre defining the function like we did
24:47 - earlier with the function hello we are
24:50 - telling it we want to run this code when
24:54 - the banana is touched we're kind of
24:55 - doing it on the fly and we set up a
24:57 - function so that we can just once put
25:00 - some code in here because you can't just
25:03 - put the code without a function in the
25:05 - in the connect if you get what I mean
25:07 - so basic rundown we have referenced the
25:11 - parts the objects every object has its
25:14 - own events that we can select by doing
25:16 - dot and then all they all of them show
25:18 - up we then do the name of the event once
25:20 - we've got the name of the event we then
25:22 - have to connect it to a function now
25:25 - that function couldn't already be made
25:27 - right we could have function hello or
25:32 - whatever you want to call it like this
25:36 - print hello and instead of saying
25:39 - connect function we could just say hello
25:41 - like that or if we didn't need to create
25:44 - the function buff beforehand if it only
25:46 - has one use in this event we can just
25:49 - put the function in there we don't need
25:51 - to bother with any of those function
25:53 - variable names or anything
25:54 - we can just say function in here we do
25:58 - the brackets for that function for its
25:59 - arguments or ever then we drop the line
26:02 - and roblox it ends the function for us
26:05 - and it puts that closing bracket to
26:08 - close off this connect and then we set
26:10 - ourselves up so that we can put any code
26:12 - that we want to run when the banana has
26:15 - been touched inside of here
26:17 - so we could say prints hello okay so
26:22 - what's going to happen is when I touch
26:24 - the banana it's going to fire the
26:27 - touched events but then we immediately
26:28 - can
26:29 - because because we've done we've
26:30 - connected that touched events to the
26:33 - function that we created inside of the
26:35 - Connect it's going to ruin that function
26:37 - all the time forever and ever you can
26:39 - see I keep stepping on it
26:41 - it's gonna keep running that function
26:42 - it's gonna keep running that function to
26:44 - print hello so there we go an event is
26:47 - something that you can set up to run a
26:49 - code when something happens in your
26:52 - roblox game now let's get back to what
26:54 - we were working on at the start when a
26:56 - player touches the banana we can make
26:58 - them sit down now I haven't told you
27:02 - this yet but because these events are
27:04 - roblox made their predefined they come
27:07 - with different objects they're already
27:09 - created by roblox and they're done
27:10 - behind the scenes sometimes there is
27:13 - data passed between these events for
27:16 - example when something touches the
27:19 - banana how do we know what ice touched
27:21 - that banana we might want to do
27:23 - something to it for example we might
27:25 - want to make them slip over we might
27:28 - want to if it is a player that has
27:30 - touched that banana we want to make them
27:32 - slip over so how do we know what is
27:34 - touched it and how do we do something to
27:36 - whatever has touched it well that is
27:38 - where the arguments come in when we have
27:41 - these events that are pre pre made by
27:43 - roblox they automatically send data to
27:46 - our function when they are triggered so
27:49 - for example when something touches the
27:51 - banana the touched event will
27:53 - automatically log what has touched that
27:56 - banana part and it will send it to this
27:59 - function as an argument so we've got a
28:01 - pre set argument that comes with this
28:04 - function so whenever you do a touched
28:07 - event there are some arguments that
28:09 - passed you can see if we look in the
28:12 - object browser
28:13 - it says event that's just telling us
28:15 - what it is what these things are if I
28:18 - clicked on a property it would say
28:20 - vector3 or all the data type so whether
28:23 - it's a surface type or vector3 basically
28:27 - an INT is a number so that's the
28:30 - property type if it's an event it's
28:32 - gonna tell you it's an event
28:33 - if it's an instant it's gonna tell you
28:35 - it's an instant but events it says event
28:37 - it says the name of the event that you
28:39 - have to say when you want to listen out
28:42 - for it you can't just make up a name for
28:43 - your event you have to use the one
28:45 - that's given but then and these brackets
28:48 - are the arguments that automatically get
28:51 - passed to your function
28:52 - you've create a function that gets run
28:54 - when the event is fired that's fine but
28:59 - also there are going to be arguments
29:01 - that automatically get passed by the by
29:03 - the event by by the function by by the
29:06 - script sorry
29:07 - because roblox has set them up to do
29:08 - that when something touches the banana
29:10 - the script is going to automatically
29:12 - pass an argument of off the object that
29:15 - has touched it and that is the other
29:18 - part so the other part that touched the
29:20 - first part getting confusing but if we
29:23 - think of the banana being the first part
29:24 - the argument is gonna go in here is the
29:28 - part that touched it you can chords
29:29 - whatever you want you can call it parts
29:31 - that touched it okay you could call it
29:35 - my part but it's always gonna be the
29:37 - first argument because it says here it's
29:41 - the first argument it's the first one
29:44 - it's the only one and it's called other
29:46 - part you don't have to call it other
29:48 - part that's just describing what it is
29:50 - the data that gets sent to our function
29:52 - but when an event is fired
29:54 - sometimes the script will pass data to
29:57 - our function because you might need to
29:58 - use that data well you know for example
30:00 - we need to know the player that touched
30:02 - the part so the script is going to pass
30:04 - the object that touched the part
30:06 - obviously it might not be a player so
30:08 - it's just going to send the object if a
30:09 - part touched the banana it's going it's
30:11 - gonna send the object of that part so
30:13 - usually when we're doing a touched event
30:16 - we call this argument hit that's just
30:18 - like the standard that everyone uses and
30:21 - just to prove this to you because I'm
30:23 - gonna show you that later actually has
30:24 - been sent because it sends an object
30:27 - value not a lot not like text or
30:29 - anything it's going to send like an
30:31 - object so for example the banana and
30:32 - then we'd we'd be able to get his
30:35 - properties so we could say hit dot name
30:37 - if I print that out when we step on the
30:41 - banana
30:43 - and I know this video is getting really
30:44 - long sorry about that but this is gonna
30:47 - get really good a bit if I step on this
30:50 - what's happening is I'm going to step on
30:52 - the banana the touched event is gonna
30:54 - fire and then because we know that the
30:57 - script automatically sends data and
31:00 - argument to our function the data type
31:03 - is an instance that was what I was
31:05 - trying to say with an object whenever I
31:06 - say an instant it means an object in the
31:09 - game so like a part or a model or
31:13 - terrain or camera these are all
31:14 - instances they're all objects so it's
31:17 - gonna send the object that got sent to
31:21 - hit the banana it's gonna send that to
31:23 - the function that we created and we're
31:26 - picking it up as the first argument it's
31:28 - always the first argument if you have
31:30 - multiple arguments then it will put them
31:32 - in order and it will tell you which one
31:34 - to go first so it would say for example
31:36 - if you had three arguments it would have
31:38 - one here one here one here but they
31:41 - would come in order but luckily we only
31:43 - have one argument so you have to worry
31:45 - about that but it's passing the the
31:47 - objects that touch the banana we
31:49 - obviously don't know what that objects
31:53 - might be you know we can't predict the
31:56 - future
31:56 - so we give it a substitute name hit for
32:00 - now and then whatever that object is
32:02 - whatever we've done to hit it will do to
32:04 - the objects so a printing hits name so
32:07 - if the object is a my left leg it's
32:09 - going to print out the name of my left
32:11 - leg which is just a left leg as I said
32:13 - earlier it's gonna fire loads of time
32:15 - times as multiple body parts are
32:18 - touching the banana as I said we have
32:20 - loads of body parts over here that all
32:23 - are going to be touching the banana at
32:25 - the same time but anyway let's just
32:27 - watch the output as I do this it's gonna
32:29 - print out all of the parts that are
32:32 - colliding with the banana because it's
32:34 - going to constantly be firing that
32:36 - touched event loads of times here we go
32:39 - as I keep walking into it printing out
32:41 - the objects that are touching the banana
32:43 - and it's it's firing every time you see
32:46 - a print it's firing that event loads of
32:49 - times because it's constantly checking
32:52 - to see what's touching it so we might
32:54 - have two things touching it the same
32:56 - time but it's gonna fire the event twice
32:58 - so it's not firing the event once all of
33:00 - these different body parts is firing the
33:02 - event once for every body part that is
33:06 - touching and you can see I've stopped
33:07 - moving and it's triggered the event once
33:10 - so it's not gonna keep triggering it
33:11 - unless I move again and because I'm now
33:14 - still my character is being animated so
33:17 - some of the body parts are still moving
33:19 - but if I start to touch it and stop
33:22 - moving it's not gonna register any more
33:23 - touches until I start moving again but
33:26 - you can see what happens is that banana'
33:28 - gets touched it connects because we've
33:31 - connected it to the function it's firing
33:32 - this function and it's sending
33:34 - automatically the event data that roblox
33:38 - has set up behind the scenes that's the
33:40 - that gets sent we're not telling it what
33:43 - to send roblox when they make these
33:46 - events themselves behind the scenes and
33:50 - allow us to use them they are they are
33:53 - telling us what data they will send when
33:55 - one of them is triggered so these
33:58 - arguments allow us to do things when an
34:03 - event fires and get these specific
34:05 - things that are interacting with
34:06 - something so this is just one event and
34:10 - this may seem really confusing to you
34:12 - but I'm gonna try and make it as simple
34:14 - as I can what we're doing is we're
34:15 - referencing the part that we'll get
34:18 - right sorry we're firstly referencing
34:21 - the parts then we're getting the event
34:23 - that we're listening out for that we
34:25 - want to trigger that we're listening out
34:28 - for okay and then when that event
34:30 - happens when it is fired in this case
34:34 - when the banana is touched what we've
34:36 - done is we've connected this event to a
34:39 - function that's going to run whenever
34:41 - the event fires
34:42 - so whenever the banana is touched we're
34:46 - running a function and this function is
34:48 - used to define code that's going to run
34:53 - when the event fires so when the bananas
34:55 - churched we're going to run some code
34:57 - but we can't just run some code without
34:59 - a function so we have to create a
35:01 - function and by doing that we can then
35:04 - have some data sent over to this
35:07 - function
35:07 - to tell us information about the event
35:11 - so sometimes you will pass data from an
35:14 - event to a function and that
35:16 - automatically gets passed by the script
35:17 - you have to do anything in this case the
35:20 - object or the instance that touch the
35:22 - banana automatically gets passed to our
35:25 - function as an argument okay and then
35:27 - what we're doing is this function is
35:30 - going to run and because obviously we
35:32 - have defined the function beforehand
35:35 - before any of these events have fired
35:37 - with having the script what to do when
35:39 - it's fired but we don't know the objects
35:41 - that are going to touch the parts yet
35:43 - okay because the game isn't running but
35:46 - we know that when the banana is touched
35:49 - then we know what is touching it and we
35:52 - can do something with whatever touched
35:55 - it so the data is passed to a variable
35:57 - this isn't this is kind of like a
35:59 - variable and you can think of hit being
36:02 - a variable but whenever we say hit we're
36:04 - actually talking about anything that
36:07 - will touch the banana because it kind of
36:09 - gets substituted so if we think about my
36:11 - left upper leg what is happening is it's
36:13 - printing out the name of the part that
36:14 - hits the banana in this case it was the
36:17 - left upper leg so when the when the
36:20 - event was fired when I stepped on it it
36:21 - sent the left upper leg to this function
36:23 - and it printed out the name of whatever
36:25 - hit the banana in this case it was the
36:27 - left upper leg so I hope this is making
36:29 - sense for you we will cover this more
36:32 - and more it is very very confusing topic
36:35 - I will try and make I will make more
36:37 - videos on this but I'm just trying to
36:41 - make this very simple and easy but
36:44 - please leave any questions you have in
36:46 - the description I will try and answer
36:48 - them in the next video and your
36:51 - questions that you might be having if
36:53 - you're watching this video in the future
36:54 - might get answered in the next one
36:56 - but you all want to know how to make the
36:58 - player sleep over fair enough
37:04 - I'm going to show you how to do that so
37:07 - we know that something's gonna hit we've
37:10 - got the head obviously we don't know
37:12 - what that hit object is it could be a
37:15 - player it could be a part and there are
37:18 - some properties that a player has that's
37:23 - the part doesn't so if I was to say now
37:27 - let me just say the part that's going to
37:29 - touch the banana if I step on it it's
37:31 - gonna be one of my body parts it's not
37:33 - gonna be my players character model if
37:35 - we look in the game when I join my
37:39 - player is a model but that model
37:41 - consists of loads of parts when I step
37:44 - on this banana it's not actually Alvin
37:45 - blocks that is touching it it's not the
37:47 - model it's the it's one of my body parts
37:50 - so the left foot or the left leg which
37:52 - is inside of my player object so if I
37:58 - wanted to get the humanoid which is how
38:00 - we make them slip I would have to say
38:02 - hits thoughts parents because imagine
38:06 - that the hit was the left leg which is
38:09 - inside of my player model to get that
38:12 - player model I'd have to say hit dock
38:13 - parent and if I say Prince hit da
38:17 - parents dot name then it should print
38:21 - the name of the body parks parent so if
38:26 - the left leg all the left foot touched
38:29 - the banana the parent of that part is
38:32 - Alvin blocks and if we're printing out
38:33 - that parents name they prints out having
38:35 - blocks so we've just got my player model
38:38 - by saying hit door parent name so I
38:41 - could say hit dot parent got humanoid
38:43 - because the humanoids inside on the
38:45 - player model you don't really
38:46 - necessarily need to know how to do this
38:48 - yet but the humanoid inside is inside of
38:50 - the player object and to get to the
38:52 - humanoid from the body part we have to
38:54 - say hit dot parent to jump back up to
38:56 - the player model and then dot humanoid
38:58 - because the humanoid is also in the
38:59 - player model and then we can say dots it
39:02 - equals true and that will make the
39:05 - player sit and it will make him look as
39:07 - if they're tripping over the banana peel
39:09 - so whenever I touch the banana it's
39:14 - gonna fire the events and our function
39:15 - runs we
39:17 - makes my body parts parent the model
39:20 - object against the humanoid and it sets
39:22 - the humanoid sit proxy because there was
39:25 - a property of a humanoid called sit when
39:27 - you do that when you set it to true it
39:29 - will make you sit and if we step on the
39:31 - banana you can see it makes me sit so
39:34 - there we go but obviously we can't
39:38 - predict what is going to touch the
39:41 - banana for example a part could touch
39:45 - the banana but a part doesn't have a
39:49 - parent and it doesn't have a humanoid
39:51 - either so it's gonna does n't have a sit
39:53 - property in the humanoid so if I made
39:55 - this part fall on the banana it's gonna
39:57 - cause an error
39:58 - let's an anchor it and see what happens
40:01 - and could probably I need to make what's
40:06 - happened to you why isn't that oh it's a
40:09 - trick look at that that's beautiful and
40:11 - it looked as if it was on top of the
40:13 - banana but it wasn't but let's make it
40:14 - fall onto the banana and zoo Athens ok
40:17 - humanoid is not a valid member of
40:19 - workspace so what's happened is
40:21 - something has touched the banana in this
40:24 - case it's the block and it's true our
40:28 - event because whenever anything touches
40:30 - the banana is gonna trigger that
40:32 - function and hit is now equal to that
40:36 - part it's the part object so we're
40:38 - saying okay the part which is hit dot
40:42 - parent
40:43 - well the parent of the part is work
40:45 - space so this is already going wrong and
40:47 - human own work space has no property
40:50 - called humanoid and there's not even a
40:53 - part in the workspace called humanoid
40:56 - either so it's got confused and
40:59 - obviously when we're doing a touched
41:01 - events and we want to change a property
41:04 - of a player and something else there
41:06 - isn't a player or a player's body part
41:09 - touches the banana it's going to cause
41:12 - an error it's gonna break off script so
41:14 - how do we only make this work for
41:16 - players in the game well you'd have to
41:18 - do you'd have to do an if statement to
41:21 - check that and I don't think we've
41:23 - covered if statements yet but it's
41:26 - something that we're going to go into
41:27 - detail on in the future but I'm just
41:29 - going to do one over here just
41:30 - you and so we're gonna say if and then
41:32 - we can use a function of game dot
41:33 - players to actually check if the part is
41:38 - a player so we can say get a player from
41:41 - character and if it is a player and it's
41:45 - their body part as touch the banana then
41:47 - it's been they're going to have a parent
41:49 - of that body part
41:50 - so hit dot parents then and do an end ok
41:57 - so this is giving you a little bit of a
41:58 - preview into if statements so when we're
42:01 - calling this inbuilt function which was
42:03 - what we did in the previous video an
42:05 - inbuilt function on the player service
42:08 - get player from character if we pass the
42:11 - player model so in this case it will be
42:15 - hit dot parent if it is a body part say
42:19 - a left foot then the parent of that will
42:20 - be Alvin blocks the player model then
42:23 - this function is going to check if it is
42:25 - actually a player in the game and if it
42:27 - is then this condition will be true and
42:31 - the if statement will allow the code
42:33 - inside of it to run if it's not true
42:36 - then it's not gonna run this line of
42:38 - code and then it's not gonna error
42:39 - because if we think about the part
42:41 - touching the banana if hit the parent is
42:44 - then the workspace because the parent of
42:46 - this part is the workspace and we pass
42:48 - workspace to this function this function
42:51 - is going to find out whether the players
42:53 - character model is actually a player in
42:56 - the game so workspace is not a player
42:59 - model it's not a character model and it
43:00 - is not a player in the game so it's not
43:02 - going to allow that code to run what it
43:05 - does is basically takes a model or an
43:09 - object it sees if it's an actual
43:11 - character model of a player in the game
43:13 - because in the game this is getting
43:18 - slightly off-topic now I'm sorry
43:24 - a player in the game you have their
43:25 - player in-game top players but you also
43:27 - have their player's character in game
43:29 - but workspace this is their character
43:31 - this is their player so if what we can
43:34 - do is we can check to see if this
43:36 - character belongs to an actual player in
43:38 - the game and when we say get to play
43:41 - from character it's seeing if a
43:44 - character model belongs to an actual
43:46 - player or an object if it belongs to a
43:48 - player if we pass something that isn't a
43:50 - player such as this part or its parent
43:54 - we say hit door parent because if it was
43:56 - a body part such as left foot then its
43:59 - parent would be the player's model but
44:01 - if it's the part then that parts parent
44:03 - would be workspace and then workspace
44:06 - wouldn't be a player it wouldn't be a
44:09 - character and so there wouldn't be a
44:10 - player in the game so it wouldn't allow
44:11 - this line of code to run unless there
44:15 - was a player unless that character
44:18 - belong to an actual player so if we were
44:20 - to drop the part on the banana again it
44:24 - wouldn't error because yes the touched
44:27 - event has run and yes if we print out
44:31 - hits dot name it's still gonna print out
44:35 - part but it's got to this if statement
44:38 - and it said okay
44:40 - hit that parent oh that's workspace
44:43 - let's try and get that player see if
44:47 - it's a player from its character and the
44:49 - character being hit the parent and then
44:51 - it's figured out that it's not so it's
44:52 - not ruined this line of code but you can
44:55 - see how a touch event will run if
44:58 - anything touches the part regardless of
45:02 - whether it's a player whether it's a
45:04 - part that it's not in the player whether
45:06 - it's a hat whether it's the base plate
45:09 - etc if I was to drop this banana on the
45:13 - base plate you would get the same issue
45:16 - it's anchored at the minute little
45:18 - anchor it boom base plate so you can see
45:22 - regardless of what it touches it still
45:26 - runs the function but you have to
45:28 - implement checks to make sure that it's
45:31 - touching the thing that you want it to
45:33 - touch
45:34 - the hit argument is automatically passed
45:37 - to our function it's automatically
45:39 - passed by the event every event has its
45:42 - own event data that gets passed to the
45:45 - event and you have to check each event
45:48 - to see wallets and event data is aha in
45:52 - this event ancestry change you don't
45:54 - need to know what it does but you can
45:56 - see it has two arguments the child and
45:59 - the parents so these are both objects so
46:01 - if you were going to pass if the script
46:04 - was passing two objects to this event
46:07 - function you would have to put them in
46:09 - order the child object would go first
46:11 - the parent object would go second so you
46:13 - would have your child object you'd have
46:16 - your parent object like that obviously
46:20 - you can name them whatever you want but
46:22 - it's the order you could get them mixed
46:23 - up you could say parent objects and
46:26 - child objects but because this is the
46:28 - first argument the parent object should
46:30 - actually be the child one and the child
46:32 - one would actually be the parent one
46:33 - because you have not put them in the
46:35 - right order you have to put them in the
46:36 - order that you are told to but you can
46:39 - call the arguments whatever you want
46:40 - it's just the data that gets passed to
46:43 - them will be passed in order okay so
46:46 - with our touched event you only have one
46:48 - argument if you have two arguments hit
46:52 - two while hit two is not gonna be equal
46:54 - to anything because doesn't get passed
46:57 - nothing gets passed to the function
47:01 - because touched event only passes one
47:04 - argument is told us only passes one
47:06 - argument so if we were to print hit two
47:10 - dot name hit two is gonna be nil it's
47:13 - gonna cause an error let me show you
47:16 - that it's anchored then just an anchor
47:19 - the banana boom attempt to index local
47:22 - hit two and no value when it's a no
47:25 - value is equal to nothing nothing is set
47:29 - to it so what's happened is if you print
47:32 - out what hit just what hit got name is
47:35 - okay run the game
47:39 - boom it's printed actually it won't have
47:42 - printed because we've printed hit to
47:45 - first and it's gonna error and it won't
47:46 - run rush the script but if we print app
47:49 - hit first hit will get printed this base
47:52 - plate but then it tries to move on to
47:54 - the next line printing hit - but hit -
47:57 - is not equal to anything because nothing
47:59 - got passed to that argument in the
48:02 - function only one thing got passed to
48:04 - hit because it passes data to the first
48:09 - argument and in this case there was only
48:11 - one argument you could switch it round
48:13 - you could make the first argument hit -
48:15 - and the second one called hit and then
48:17 - you could print hit but hit is gonna be
48:21 - nil now because I said before it doesn't
48:23 - matter what you call them the first
48:25 - argument the first the first argument
48:28 - will get passed to the first one here so
48:31 - because we've only got one one argument
48:33 - that gets passed to the touched event
48:35 - and if we put hit to first while it's
48:37 - the first argument so that's the one
48:39 - that the date is gonna get passed to and
48:41 - there's nothing for this there's no
48:42 - second argument so hit is nothing so it
48:45 - all depends on the order of your
48:47 - arguments doesn't matter what they're
48:48 - called
48:49 - we just call it hit because that's the
48:50 - standard what people call it
48:52 - I could call it part that's touched it
48:57 - but then I'd have to replace hit over
48:59 - here and it would do the same thing for
49:02 - print if I play the game it would still
49:05 - slip me over we still trip me up boom
49:08 - doesn't matter what you call your
49:10 - arguments it just matters that all do
49:12 - you put them in if you have more than
49:13 - one argument so Wow
49:16 - 50 minutes long but this was such a good
49:18 - tutorial I think it's taught a lot to
49:21 - you basically in roblox that we can set
49:23 - up event listeners that were always
49:25 - watching always listening in your game
49:27 - always waiting for something to happen
49:29 - in this case we have referenced the
49:32 - object that we are that we want to apply
49:34 - an event to we have got the name of the
49:36 - event from the object browser touched
49:39 - remember there are only a certain number
49:41 - of events we cannot create events only
49:43 - roblox can and they tell us which events
49:46 - we can use in the object browser they
49:48 - are the ones with the lightning bolts we
49:50 - then say the name of the event
49:52 - and then the script will be start
49:54 - listening out for that event
49:55 - to happen but when the event does happen
49:57 - when it gets fired when you do step on a
50:00 - banana how do we tell the script what we
50:03 - want to happen or we have to connect the
50:05 - event to a function a function that will
50:09 - be able to run code code that we want to
50:13 - run when we step on the banana so we say
50:16 - : Connect we then open up bracket so we
50:19 - can put our function inside to tell it
50:22 - the function that we want to trigger the
50:24 - function can be a predefined one that we
50:26 - can access by giving its name or it can
50:29 - be in an anonymous one one that we just
50:31 - create on the fly in the connect one
50:34 - that we only want to use for this
50:36 - connect function I always do my events
50:40 - like this I always set them up like this
50:42 - with my function in here I don't bother
50:44 - with predefined functions unless I'm
50:47 - calling that function somewhere else for
50:50 - another purpose if I would say 99% at
50:54 - the time you're gonna do your events
50:57 - like this so you've got the name of the
50:59 - event you've got the object that that
51:03 - event is being applied to so the touch
51:06 - event is being applied to this banana
51:07 - you have to say game choice based on
51:09 - banana you could say script op parent in
51:11 - this case because the script is inside
51:14 - the banana if you took the script out
51:15 - with a banana that would not work that
51:18 - only works because it is a another way
51:20 - that you can reference the banana so you
51:23 - firstly get it you reference it and then
51:27 - you get the event name that you want you
51:30 - connect it and then you put your
51:32 - function in there you get it connect it
51:34 - and don't forget to end it okay so wow
51:39 - that was such a long video on events in
51:42 - roblox if you enjoyed this video please
51:44 - do leave a like took me quite a while to
51:46 - make got more videos coming on event
51:48 - soon because there are loads of events
51:50 - that we haven't covered yet touch is
51:52 - just the easiest event I can tell you
51:53 - about if you didn't understand that get
51:56 - player from character or if statement
51:58 - stuff do not worry we'll be covering if
52:00 - statements in the future what if
52:01 - statements do those they just allow you
52:03 - to check
52:04 - thing to make sure that your code only
52:07 - works for certain conditions in this
52:09 - case we only want to be code to run if
52:12 - the thing that touched it was a member
52:14 - of a player object just to prevent other
52:17 - things like parts that weren't in a
52:19 - player from from triggering it and
52:21 - causing errors so that is the end of
52:25 - this video please please please share
52:27 - the video with anybody you know who will
52:29 - benefit from this share it with your
52:31 - friends share the knowledge and it
52:34 - really helps my channel out as well
52:36 - please use code star code Argan box when
52:39 - buying Roy books or premium on the
52:41 - robots website that is star code Alvin
52:43 - blocks don't forget to subscribe to the
52:45 - channel leave a comment with any
52:47 - questions you have I'll try to answer
52:48 - them in an upcoming video thank you for
52:51 - watching and if you want to go to the
52:53 - next one you can click on the thumbnail
52:54 - on the right side of your screen if you
52:56 - want to subscribe to the channel you can
52:58 - click on the album blocks logo in the
53:00 - middle of the screen thank you very very
53:02 - much for watching and I will see you in
53:05 - the next one