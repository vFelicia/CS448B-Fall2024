00:00 - welcome to your third roblox scripting
00:02 - tutorial today we're going to learn
00:03 - about functions
00:05 - now a function allows you to run code
00:08 - over and over again now you may be
00:10 - wondering well
00:12 - why can't we just copy and paste this
00:13 - code right it's going to run over and
00:15 - over again now
00:16 - okay kind of true but let me show you
00:18 - what our function does
00:20 - a function could allow you to
00:23 - reduce this code down to maybe this much
00:27 - right so if we wanted to change the
00:29 - transparency of this part
00:31 - we could create a function which would
00:33 - set the transparency of the part
00:34 - but instead of having to say
00:37 - game.workspace.alvinblocks.transparency
00:38 - every single time
00:39 - we could just call it by a simple name
00:42 - let me create a function for you so if
00:44 - we say function
00:45 - and then you give it a name so this
00:47 - function is going to have some code in
00:49 - it
00:50 - which will do something and my function
00:52 - is going to change the transparency of a
00:53 - part
00:54 - so i could say change transparency that
00:56 - could be my name
00:57 - now what you do after that you put a
00:59 - pair of parentheses or brackets
01:01 - then you drop a line and you can see
01:03 - that the script has added this end for
01:05 - me
01:05 - now you can see this arrow here has
01:08 - indented the code when we say indented
01:10 - it means that it's just
01:11 - uh pushed it forward a little bit and
01:13 - you can see
01:14 - if you press tab it indents it even more
01:16 - so it's typically
01:18 - around the size of four spaces right
01:20 - that's the size of an indent
01:23 - but if we press the tab here to indent
01:25 - our code it's always good practice
01:27 - to indent your code when you are inside
01:30 - a block of code this is called a code
01:32 - block
01:32 - because it's the code that's going to go
01:35 - in the middle
01:36 - is sandwiched within this function so
01:38 - it's a code block
01:39 - now any code that we've put inside of
01:41 - here in between these two lines
01:43 - within this function is going to run
01:46 - whenever we call the function so it's
01:49 - not going to run immediately
01:50 - so if we put this code in here get rid
01:52 - of that
01:53 - now if we run the game it's not going to
01:56 - change the transparency of the part
01:58 - nothing has happened and that's because
02:00 - we have not yet
02:01 - called our function so we have declared
02:04 - this function we've defined the function
02:06 - we have told the script this is a
02:09 - function
02:09 - whenever we call it it's going to change
02:11 - the transparency of the part to one
02:14 - but it has not uh it's not executed
02:17 - itself yet we haven't called the
02:18 - function
02:19 - now if you wanted to call the function
02:22 - it's very simple
02:23 - we just have to write out the name of
02:26 - the function
02:27 - and put a pair of brackets after it and
02:29 - that is telling to the script
02:31 - that we want to run this function we
02:33 - want to execute it we want to
02:36 - run the lines of code that are inside of
02:38 - it so it's going to get
02:39 - to line one it's going to see okay this
02:41 - is a function
02:42 - we have got it defined so the script now
02:45 - knows that if you ever
02:46 - call the name of the function with a
02:48 - pair of brackets later on in the script
02:50 - it is going to run any code inside of it
02:52 - so we get to line one
02:53 - okay this is a function call let's get
02:55 - to line three
02:56 - we're not going to run any code with it
02:58 - within it we're just simply
03:00 - acknowledging that it's there and later
03:02 - on we might use it
03:03 - so then we go to line four nothing here
03:05 - line five
03:06 - okay right change transparency and the
03:09 - script remembers that this is a function
03:11 - that we just created
03:12 - so it's going to look up the function
03:14 - that we made
03:15 - here and it's gonna say okay let's run
03:17 - all of the code that is inside of it
03:19 - line by line so it's going to start at
03:21 - the top it's going to say
03:22 - game.workspace.alvin blocks.transparency
03:25 - equals one it's going to set that part
03:26 - transparency and
03:28 - it will then move on to the next line
03:30 - and it will see that we're at the end of
03:31 - the function
03:32 - so it's going to stop running this
03:34 - function it's just going to go back to
03:36 - line 5
03:36 - now so now that this function has
03:39 - finished
03:39 - if there was any code that was
03:41 - underneath it such as this print hello
03:43 - it would move on to the next line and it
03:45 - would print out hello
03:46 - but in this case we have no lines
03:50 - after this function call uh on line five
03:52 - this is where we're calling the function
03:54 - we're telling it to run
03:55 - so it's just going to end the script if
03:58 - we run
03:58 - the code you can see the part has gone
04:01 - transparent from the
04:03 - uh from the get go from the very
04:04 - beginning and that is because
04:06 - we have forward the function first in
04:09 - the script the first thing we've done
04:10 - right aside from defining this function
04:12 - so it's going to happen instantly
04:14 - so there's not much really that's
04:16 - different in terms of
04:18 - you start the game and boom the part
04:20 - already goes transparent
04:22 - so what is so good about functions well
04:25 - it's a way to reduce the amount of code
04:27 - that you have to write
04:28 - so if we have this function here and we
04:31 - want to keep changing the transparency
04:33 - of a part
04:34 - we wouldn't have to keep on writing
04:37 - game.workspace.alvinblocks.transparency
04:38 - we could just say change transparency
04:41 - but
04:42 - this is just going to set the
04:43 - transparency of a single part
04:45 - to one value all the time so why is this
04:48 - useful
04:48 - well what we can do is instead of just
04:51 - setting the transparency of
04:53 - one part because that's the only part
04:55 - that's going to change because the part
04:56 - in our function
04:57 - is always the same one we can use
05:00 - parameters
05:01 - and parameters are really really useful
05:03 - they allow us to keep our functions
05:05 - dynamic
05:06 - and when i say dynamic i mean that each
05:08 - time that we call this function
05:09 - it could do something slightly different
05:11 - it could change a different part each
05:13 - time or it could set a transparency
05:15 - value
05:15 - to something different each time but we
05:17 - still wouldn't have to be saying
05:19 - game.workspace then put the part name
05:21 - and then put the property name
05:23 - and then set the value right so a
05:25 - parameter
05:26 - is some data which you will input into
05:29 - the function here well
05:30 - it is we haven't got on the variables
05:32 - yet we'll get on to variables
05:33 - in another video but we can put some
05:36 - parameters
05:37 - and these are the things that will
05:39 - change each time
05:41 - we run the function so for example we
05:43 - could have a parameter for the part
05:45 - that we're going to change the
05:46 - transparency of and we could have a
05:48 - parameter for the
05:49 - new transparency value so we could set
05:52 - new transparency
05:53 - okay these they don't matter what they
05:56 - call them you can call them anything you
05:57 - like you just have to remember the order
05:59 - that you um set up your parameters for
06:02 - and then the order matters because
06:04 - whenever you call the function
06:05 - you will have to specify the part first
06:08 - so it could be game.workspace.alvin
06:10 - blocks that's going to be our part
06:13 - and so game.org start having blocks is
06:15 - going to be our part
06:16 - okay and then we do a comma to tell the
06:18 - script that we now
06:19 - are going to write us our second
06:21 - parameter
06:22 - and we're going to write the new
06:24 - transparency value so i could say one
06:26 - okay and now let's change the code
06:29 - inside our function
06:30 - because we want to say part.transparency
06:34 - because part is the object that we are
06:36 - defining here
06:37 - and we're setting that to our new
06:40 - transparency value
06:41 - so the script is expecting for the part
06:44 - parameter to be an object which it is
06:46 - this is an object in the workspace and
06:48 - it's expecting the new transparency
06:50 - to be a number which it is because we're
06:52 - setting the transparency property
06:53 - which of course requires a number now
06:57 - something i just wanted to note
06:58 - is that the parameters are the
07:01 - placeholders which you define
07:02 - in your function and the correct name
07:05 - for
07:06 - these values the values that you put in
07:08 - when you call your function
07:10 - these are called arguments so the
07:12 - arguments are the ones which contain the
07:13 - actual values which are going to
07:15 - insert to your function and these are
07:18 - the parameters because they're just the
07:19 - placeholders
07:20 - the names of your future arguments
07:24 - so these are the parameters and these
07:26 - are the arguments
07:28 - so now that we've done that we run the
07:31 - code
07:32 - and it's going to do the exact same
07:33 - thing make the part
07:35 - transparent fully transparent but now
07:38 - we could change this to 0.5
07:42 - and it's going to become
07:44 - semi-transparent there we go
07:46 - you could even set it to zero it would
07:48 - it would stay
07:49 - as it currently is totally opaque would
07:52 - be able to see through it
07:54 - but what you can see is that we've set
07:57 - up this function
07:58 - we've basically written out the code to
07:59 - change the transparency one time
08:01 - and if we wanted to change the
08:03 - transparency later down the line when
08:04 - the game was running say
08:06 - five seconds later you can say wait and
08:09 - then in parentheses or brackets you
08:10 - write the number of seconds
08:12 - that you want to pause for and the
08:13 - script will just pause at this line
08:15 - so you can see the changes that you made
08:17 - earlier and then if you wait five
08:18 - seconds
08:19 - we could change the transparency to
08:20 - something else let's set this to two
08:22 - seconds actually because i don't want to
08:23 - wait that long
08:24 - so we've called the function again and
08:26 - this time it's going to set the
08:27 - transparency to 0.75
08:29 - so we we should see it being half
08:31 - transparent when the game starts
08:33 - and then two seconds later it goes even
08:36 - more transparent
08:37 - so the function allows us to save code
08:40 - because
08:41 - we can call the function multiple times
08:43 - and we can stop having to
08:45 - write out game.workspace to album blocks
08:48 - dot transparency all the time
08:50 - but also it just is really simple it
08:52 - allows us
08:54 - to call a function and we don't have to
08:58 - do the same thing each time we can have
09:00 - different
09:00 - transparency values we could have
09:02 - different parts you know it doesn't just
09:04 - have to be
09:05 - the part in the workspace called alvin
09:07 - blocks we could have a part called
09:09 - subscribe and we can go back into our
09:11 - script and we don't have to say
09:15 - game.workspace.subscribe.transparency we
09:16 - could say
09:17 - change transparency and we this time we
09:20 - say game.workspace
09:21 - game.workspace.subscribe
09:23 - and we can set that parts transparency
09:25 - as well
09:26 - so if we click on run we should have one
09:28 - going half transparent
09:30 - and one going fully transparent okay so
09:32 - that is how
09:33 - a function can be used and you may be
09:36 - wondering
09:36 - well you know what's the point i mean
09:38 - it's not too bad having to write out
09:41 - game.workspace.alvin block.transparency
09:43 - all the time
09:44 - and you'll see that in the next video
09:46 - because in the next video
09:47 - we're going to look at events how to
09:48 - make things happen in the game how do
09:50 - you run code
09:51 - when something happens in the game like
09:53 - how do i make
09:54 - some code run when i step on that brick
09:57 - or when a new player joins the game
09:58 - or when someone says something you know
10:00 - how do you
10:02 - hook up the code that you want to run
10:05 - to the event you know to the thing
10:06 - that's going to happen
10:08 - when a player steps on a brick for
10:09 - example and that's what we're going to
10:10 - look at in the next video
10:12 - but that's why it's so important to
10:14 - learn about functions they're so
10:16 - cool because they let you they let you
10:18 - write code
10:19 - that you're going to execute later on so
10:22 - you can write out your code which you
10:23 - might not necessarily want to
10:25 - run straight away because we know that a
10:28 - script
10:29 - runs when the script starts running when
10:31 - the game starts
10:32 - and we don't want all of our code to run
10:34 - as soon as the game starts so we can
10:36 - write
10:37 - functions which we can call later on in
10:40 - the game
10:40 - so thanks for watching your third
10:42 - scripting tutorial like i said the next
10:44 - video is going to be about
10:45 - events it's going to be really exciting
10:46 - it's going to make you able to do really
10:48 - cool things in roblox studio
10:50 - so subscribe like the video if you
10:52 - enjoyed it share it with a friend if you
10:54 - thought it was helpful
10:55 - and i'll see you in the next one thanks
10:57 - for watching