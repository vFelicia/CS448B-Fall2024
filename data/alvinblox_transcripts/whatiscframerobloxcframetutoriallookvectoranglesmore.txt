00:00 - hi everyone Alvin blocks here with a
00:01 - tutorial and advanced scripting tutorial
00:04 - on C frames
00:06 - really excited to be doing this one and
00:08 - I'm just gonna kick it off and so a lot
00:11 - of people think that C frames are hard
00:12 - to understand if they are not hard at
00:14 - all they're very very simple it's just
00:16 - that a lot of people don't understand
00:18 - them which makes them hard but the
00:20 - understanding is very simple of how they
00:22 - work so in roblox if you want to move
00:24 - something we're going to use a part for
00:26 - example if you want to move something
00:27 - you have to change its position property
00:30 - ok so if I wanted to change the position
00:34 - of something I would have to set its
00:36 - position to a vector3 value and that
00:40 - vector3 value is made up of three
00:43 - numbers and I'm using the income and
00:45 - plug-in as a way to demonstrate this so
00:48 - I can write code and easily show it to
00:50 - you the plug-in is available in the
00:51 - description 425 rare books I recommend
00:54 - it so it's basically like a command bar
00:57 - so if I want to position the block I
01:00 - have to supply three numbers those
01:03 - numbers are x y&z in roblox we have
01:07 - three axes we have the x axis y axis and
01:10 - z axis when you click on a part you will
01:13 - see when you use the Move tool that we
01:16 - have these arrows for each axis so we
01:19 - have the green arrow which goes up and
01:21 - down for the y axis so that determines
01:24 - the position the vertical position so
01:27 - whether it goes up or down we then have
01:29 - the x axis which is the red one and that
01:32 - goes across like this we also have the
01:35 - blue arrow which is the z axis and that
01:38 - also goes across but in a different
01:40 - direction so it's perpendicular to the x
01:43 - axis so we've got one we've got the y
01:46 - axis which goes up and down so one goes
01:48 - up and down and we have two which go
01:51 - across but they go across in different
01:52 - directions so the the x axis is the red
01:56 - one and that goes across like this we
01:58 - also have the dead axis which goes
01:59 - across in a different direction
02:00 - perpendicular to the x axis so these
02:04 - three axes x y&z determine where apart
02:10 - is positioned because in roblox we have
02:14 - something called the origin so in every
02:16 - roblox world there is an origin position
02:20 - and that is called zero zero zero when
02:23 - the x y and z values are all zero now to
02:28 - see the origin you can go to view and
02:30 - click on show grid and you'll see these
02:33 - three arrows appear you can see where
02:36 - these arrows meet in the middle
02:38 - that is the exact origin the exact
02:41 - middle area of a roblox world is not the
02:44 - middle of the baseplate
02:45 - if we take away the baseplate you can
02:47 - see it's still there but the origin is
02:50 - this location here and just think of it
02:54 - as like the kind of like the middle of
02:55 - the game world so the base position so
02:59 - let me just bring the base plate back if
03:02 - I was to set the position of this part
03:05 - to be zero zero zero the middle of the
03:10 - part so in the middle here so inside of
03:13 - it if you think inside if we just let's
03:16 - try and make it semi-transparent so
03:20 - imagine that if this is the middle of
03:23 - the part that little orange block in the
03:25 - middle of it just imagine it that is the
03:27 - middle of that part right if you if you
03:30 - thinking about it that is the middle if
03:33 - you go inside is there so when you
03:37 - position something it's actually the
03:39 - middle is the position is being taken
03:42 - from the middle of that part so if I was
03:44 - to change the position of this parts to
03:46 - change to put it to zero zero zero and
03:48 - let's run it you can see that it goes
03:53 - that now the origin is in the middle of
03:56 - the part so when you position an object
03:59 - in roblox
04:00 - it's being moved and placed so that the
04:04 - position value that you give is where
04:07 - the middle of the part is going to be
04:09 - positioned so obviously this part is now
04:13 - at the origin and if we take away the
04:16 - base plate again you can see you can
04:19 - better see that it is in the middle
04:22 - of the of the origin so the part the
04:26 - middle of the part gets positioned and
04:27 - so we've got a little bit going under
04:30 - the base a little bit above it etc but
04:33 - what you need to know is that when you
04:35 - position something in roblox those three
04:40 - values the x y&z values if you look
04:42 - closely here at this position property
04:44 - and don't take your eyes off it when I
04:46 - move I'm going to set the snap to grid
04:50 - to one stood when I move the part away
04:52 - from this origin you can see I'm moving
04:56 - the x-axis so the X comes first and it
04:58 - is decreasing so as I'm moving it
05:01 - further away it is decreasing okay the
05:04 - more times I move it the more stood so
05:07 - I'll drag it away that X number is
05:08 - decreasing if I was to move it in the
05:10 - other direction let's put it back at
05:12 - zero if I was to move it in your
05:13 - direction it would start increasing so
05:16 - we can see as we move the x axis the X
05:18 - number is either going up or going down
05:20 - so it goes positive when I move it to
05:24 - the left of the origin well it left in
05:27 - this thinnest in this in his terms
05:29 - because obviously it can be different
05:31 - and on which way you look at it but as I
05:33 - move it left its increasing as I move it
05:36 - right it's decreasing so it's telling us
05:38 - how many studs away we are from the
05:41 - origin now if I was to move it up in the
05:44 - air it starts increasingly Y value and
05:47 - if I was to move it down it would
05:51 - decrease okay so if I move the z axis
05:56 - you can see that these that value is
05:58 - changing so really what's happening here
06:01 - and I forgot to move the base plate back
06:03 - so give me a second there we go so you
06:07 - can see that the position is basically
06:10 - telling us how far away we are from this
06:13 - origin point so what what the position
06:16 - value tells us is that we are thirty
06:18 - seven studs on the x axis away from the
06:23 - origin
06:23 - so we are thirty seven studs away in
06:27 - this direction away from the origin
06:29 - so let me try this
06:33 - so we are 37 studs
06:36 - away from being back at the origin on
06:40 - the x-axis but if we were to look at the
06:44 - y-axis the white goes vertical we are 19
06:50 - studs away so to get back to the ground
06:53 - we would have to go down 19 studs okay
07:01 - and looking at it on these ED axis which
07:05 - is also a which also goes across just
07:08 - like this ad but in a different
07:09 - direction to get back to the origin we
07:12 - would have to go 80 instance forward
07:15 - like this
07:17 - so what backwards even because we're
07:21 - going with we've gone forward already so
07:24 - we would go back 18 studs in this
07:27 - direction just like we would go back 19
07:30 - studs in the Y and we would also go back
07:33 - 37 studs in the X okay so you can see
07:39 - that the position value is only it's not
07:40 - it's not telling us well it is telling
07:42 - us where it is in the world and he's
07:44 - using the origin point as a reference so
07:46 - the origin is our reference and by using
07:50 - it the position value tells us how far
07:53 - away we are from the origin point but
07:56 - also we can you now use that because all
08:00 - other objects in the game are using the
08:01 - position we can use it to to find out
08:05 - where things are in the roblox world so
08:07 - the position you can see as you move it
08:10 - around is constantly changing but really
08:12 - all it is is it's telling us how far
08:14 - away we are from the origin on each axis
08:17 - so what it's telling me is to go back to
08:22 - this origin here we need to go backwards
08:25 - 156 studs so I will now demonstrate this
08:29 - to you with code okay so if I just go
08:35 - here and I take away a hundred and
08:37 - fifty-six studs from its current
08:38 - position because it's currently 156
08:42 - positive studs away from the origin if I
08:45 - go and
08:46 - take away those 156 studs oh I need to
08:52 - change the name of it to block there we
08:55 - go you can see that the origin
08:58 - well sorry the x-value is now zero so it
09:01 - is at the origin in terms of X because X
09:05 - is zero we now just need to edit the Y
09:09 - and Zed values so now if I just take
09:12 - away
09:15 - 142 from the Z value look it's taken 100
09:21 - it's moved it backwards by 142 studs and
09:24 - it's brought us back to the origin but
09:27 - you can just see it is actually two
09:29 - studs above the origin so we now need to
09:31 - just take away those two studs and now
09:36 - it is back at the origin so you can see
09:39 - I've just proven to you that the
09:41 - position value is just telling us how
09:43 - far away it is from this origin point
09:45 - but we can use it to work out where
09:47 - things are in the game world so that is
09:50 - what position is and really it's not
09:52 - that complicated it is just three
09:55 - numbers which tell us how far it is away
09:58 - in each direction from this origin point
10:01 - and together those three points
10:03 - constructs a position value and you can
10:07 - and by the way is measured in studs
10:09 - so when you say vector 3 u 0 to 0 it's
10:14 - taking away two studs understood is if
10:17 - you set the snap to grid to be one stood
10:18 - this is how this is this is the
10:21 - increment that it moves by so that's a
10:23 - stood and you can see the size of a
10:25 - stood on the on the base plate that's a
10:28 - guide so so that is that is what
10:30 - position is position is just telling us
10:32 - how far away is an object from the
10:36 - origin point of 0 0 0 now what is C
10:40 - frame well C frame is pretty much the
10:43 - same thing if I wanted to set the
10:48 - position of an object I could say game
10:51 - got workspace dot block dot C frame he
10:53 - calls the direct no F say C frame dot
10:57 - new okay and I'll explain why because
11:00 - see frame it has to be a see frame data
11:03 - type but you can put a vector3 inside of
11:06 - here so if I wanted to say one five six
11:11 - one five six one five six and click run
11:15 - it moves up into the air over here okay
11:19 - I could also say one five six one five
11:23 - six one five six like this it would do
11:25 - the same thing look if I move it it puts
11:28 - it back here so what it's done is
11:31 - because C frame contains both position
11:34 - and rotation it has set the position of
11:37 - the object but it has giving it the
11:39 - standard rotation okay of zero zero zero
11:41 - because we have not told it the rotation
11:45 - we've just given it a position but if we
11:47 - wanted to give it a a rotation we could
11:50 - do that again normally if you wanted to
11:52 - give a rotation you'd first have to set
11:55 - the position property and because you
11:56 - can't set rotation with position you'd
11:58 - have to set the orientation afterwards
12:00 - but a C frame just combines it together
12:03 - in one let me show you so what if I
12:06 - wanted to position this block so that
12:08 - the face is looking at the bar well if I
12:11 - try to do that I could say game the
12:13 - workspace don't block dock position
12:16 - equals game dot workspace dock bar dot
12:19 - position okay and then we will just add
12:23 - on we'll add on about 20 in the
12:31 - x-direction let's do let me show you
12:34 - that so that it is to the left of the
12:38 - bar but you can see the face is not
12:41 - facing the bar we want the face to be
12:44 - looking at the bar like this and so we
12:47 - haven't been able to make that happen
12:49 - using our scripts because it makes it
12:51 - face it doesn't alter the orientation if
12:54 - I alter if I set the orientation of the
12:57 - part myself like this to be looking
13:01 - diagonally in this direction and I set
13:04 - the position it has not changed the
13:06 - orientation that I said because position
13:09 - does not alter the rotation of a part
13:12 - only see frame camp
13:14 - when you want to position something so
13:18 - how can I do this well let me show you
13:20 - again let's let's move let's put the
13:24 - part in our rotation like this I want it
13:26 - to be looking in the opposite direction
13:28 - when it's moved over here I wanted to be
13:30 - looking at the bar so I can say game not
13:32 - workspace dot block dot C frame equals C
13:38 - frame new and what I can do is I can
13:41 - tell it the position where I want it to
13:44 - go so it's going to be vector three
13:45 - position so it will be vector three and
13:49 - the vector three has to come first so
13:52 - the position has to come first so it
13:54 - will be it will be game dot workspace
13:58 - bar dot position so the bars position
14:01 - with twenty studs added on in the x-axis
14:05 - okay so that's done can you see that it
14:09 - has set the rotation back to the default
14:12 - zero zero zero because I haven't
14:13 - supplied one yet that's going to come
14:16 - next so once I've done the position I
14:17 - can do a comma and if I now supply
14:22 - another position value for example games
14:25 - at workspace bar dot position this is
14:28 - the award value so the second position
14:30 - that you give in a C frame so we've got
14:32 - the first one here which is the bars
14:35 - current position with twenty added on in
14:37 - the x-axis to move it over here so
14:40 - twenty stood to the left of the bar
14:42 - that's the first position separated by a
14:44 - comma the second position is what it's
14:47 - going to look at and magically the C
14:50 - frame is going to rotate the block to be
14:56 - looking at the second position now the
14:59 - second position is going to be the
15:01 - middle of the bar because remember I
15:02 - said earlier the position value is taken
15:05 - from the middle of the object so it
15:09 - would it would be looking at a
15:10 - roundabout here the middle of the bar so
15:12 - if I run this Wow look at that the block
15:17 - is now facing the bar and this isn't
15:20 - this isn't you know a one-time thing if
15:22 - I was to move the block again and maybe
15:26 - put it over here
15:27 - all right I want the the the face to now
15:31 - be looking in that direction so I just
15:33 - need to run it again set the C frame
15:34 - once again and boom you can see it moved
15:39 - that's because I still wanted it 20
15:42 - stood in front of the of the bar but it
15:44 - is still looking at this middle position
15:47 - of me of the of the bar which is awesome
15:51 - so let me show you a few more times I
15:56 - can so I can set its position to be what
15:59 - it is currently out so game that works
16:02 - basic block dock position if I didn't
16:04 - want its position to change I just
16:05 - wanted this rotation to be looking at
16:07 - the bar I could do that and you can see
16:10 - now is turned towards it if I move it
16:13 - over here it's done it's moved over
16:15 - again so it's looking at the bar how
16:18 - cool is this so this is just a function
16:22 - of the C frame it's built in so that the
16:24 - second piece of the second position that
16:27 - you supply is gonna be the thing that it
16:29 - looks at the first position that you
16:32 - supply is where it's going to position
16:34 - itself so it's basically setting the
16:36 - position property to wherever you want
16:39 - it to be the second position is where
16:41 - you want it to look at so the thing is
16:43 - going to face so it's going to face that
16:46 - position it's not gonna face the block
16:48 - it's gonna face the position of the
16:50 - block okay so that is how you can set a
16:56 - a block to be looking at something okay
17:01 - because a lot of people they want to
17:02 - position something but they also want it
17:04 - to be looking in a certain direction so
17:06 - that's one way of doing it you can also
17:08 - edit the rotation yourself let me show
17:11 - you so you don't need that second
17:14 - position all the time if you just want
17:16 - to set the position of an object you can
17:18 - do that so I could set the C frame so
17:20 - firstly I'm going to position it to be
17:23 - actually I don't need the vector three
17:24 - don't you we can just put the position
17:27 - in here so 10 10 10 so that will be 10
17:30 - studs away from the origin on all axes
17:32 - so x y&z so if I run that that will put
17:36 - it over there just above the origin
17:39 - and ten students in each direction but
17:42 - if I wanted to rotate the part I could
17:44 - do I could multiply it by C frame the
17:48 - angles and when you multiply by C frame
17:52 - door angles you need to supply three
17:54 - angles in degrees so in x y&z because
17:58 - once again if you use the rotate tool
17:59 - you will see that we have three axes you
18:02 - can rotate it on the x axis on the z
18:06 - axis and on the y axis although this
18:09 - time the y axis doesn't go up and down
18:11 - so you can just think of it of three
18:12 - different axes in three different
18:14 - directions anyway let's reset that and
18:16 - let me show you how you do it with the
18:18 - script so if you're not familiar with
18:20 - angles or mathematics you may know we
18:24 - won't know but there are two ways to
18:27 - give an angle you can give an angle in
18:29 - degrees so that's the most likely one
18:32 - that you know so you can do 90 degrees
18:34 - whatever you know however many degrees
18:37 - really for wanting to do 114 point eight
18:40 - seven six five degrees you can do that
18:43 - so you can supply an angle in degrees we
18:46 - can also supply an angle in radians okay
18:50 - and I'm not going to get into what
18:53 - radians are but they're just another way
18:54 - of measuring an angle and so it's an
18:57 - easy way to basically when you're using
19:00 - C frame two angles you have to supply
19:02 - the angles in radians now if you don't
19:05 - want to use radians and because you
19:07 - probably don't know how to give a Radian
19:10 - because a Radian is a complete different
19:12 - scale you can give your angles in
19:15 - degrees which is what we're going to do
19:17 - but you have to convert them into
19:18 - radians which is why we use the function
19:20 - built-in to roblox called math dot
19:22 - around so we need three three of these
19:26 - for each for each axis don't we and so
19:32 - if we want to give the angle in degrees
19:34 - we just put the angle in degrees in the
19:36 - brackets and it will convert it so if I
19:39 - wanted to rotate this on the x axis not
19:43 - by 90 degrees let me set the orientation
19:45 - to zero zero zero if I want to rotate
19:47 - this 90 degrees I could put 90 in the
19:50 - air
19:51 - column I'm gonna put it in math or at
19:53 - though so it converts into a Radian and
19:54 - now if we click run let's go to the
20:01 - output number expected got an effect
20:03 - oh my god so if you're not going to use
20:06 - the others just put a zero or you could
20:10 - put Sarah in the math dot right it
20:11 - doesn't matter but because I didn't give
20:13 - a number to the math or add function it
20:15 - didn't work so there we go
20:17 - it has rotated 90 degrees and positively
20:21 - so it's rotated 90 degrees positively if
20:25 - you wanted to do it in your direction
20:26 - you would do minus 90 and why is it gone
20:31 - there is so that has rotated it 90
20:36 - degrees negatively on the x-axis show
20:40 - you again so every time I'm running this
20:44 - it is doing it it's resetting it so
20:48 - because we're firstly setting the C
20:49 - frame and then we're setting then we're
20:52 - moving it back with 90 degrees it is
20:55 - it's going to give the same one each
20:57 - time each time I run the script if I
20:59 - wanted to keep on rotating I could say
21:02 - until they're giving it a new position I
21:04 - could say game workspace but Block C
21:07 - frame so it's currency frame which keeps
21:10 - the rotation by the way because the
21:11 - rotation is handled by the C frame and
21:14 - because in the last example I set the
21:18 - position I said I set a new C frame it
21:21 - reset the orientation but in this
21:23 - example because I'm using the current C
21:26 - frame which will take into account the
21:28 - current rotation of 90 degrees on the
21:30 - x-axis and also the current position if
21:32 - I run this again you can see it's now on
21:35 - this this side and if I run again it's
21:39 - on the bottom and if I run again we're
21:41 - back where we started so you can you can
21:47 - put any order number in here but it
21:48 - won't make any sense
21:49 - what's happening because this is a this
21:51 - is a Radian so if you want to do it in
21:54 - degrees say you wanted to now rotate it
21:56 - on the y axis by 180 degrees you'd put
22:00 - that in math dot wrap and it is now
22:02 - rotating 180 degrees
22:04 - and you can see if I was to rotate this
22:09 - normally there's 90 degrees 180 degrees
22:12 - there's another 90 degrees so that's 270
22:14 - and that's 360 degrees so we're back
22:17 - where we started so that is C framed at
22:19 - angles that's how you rotate a C frame
22:22 - you have to supply it in radians but if
22:26 - you don't want to supply in radians you
22:28 - can use the math dot rad function which
22:30 - will take your angle in degrees and
22:32 - convert it to a Radian and I will prove
22:35 - that to you if I go down here and I
22:37 - print out math dot rad 90 it gives us
22:43 - one point five seven zero seven nine six
22:45 - three two six seven nine for nine
22:46 - radians go to Google and I do radians to
22:53 - degrees and let's put in what it gave us
22:58 - and it's given us 90 degrees
23:00 - with a little bit of rounding error
23:02 - there but not to worry about
23:04 - so basically 90 degrees one point five
23:07 - seven oh seven radians do need to
23:09 - remember that nobody I don't think ever
23:12 - uses radians we just use degrees because
23:14 - everybody knows what degrees are 90
23:16 - degrees is going to be you know you know
23:19 - what's gonna happen if I rotate this 90
23:21 - degrees yeah the face is going to be on
23:23 - this side boom as expected so that is
23:28 - how you rotate a C frame but what I want
23:29 - you to take away from this is that if
23:32 - you were if you wanted to rotate
23:33 - something with the position right you
23:37 - would firstly have to go game little
23:39 - workspace block dock position equals
23:43 - vector three dot new 10-10-10 game dot
23:47 - workspace dot block but orientation
23:51 - respect or three new 9000 let's run that
23:57 - okay there you go
24:00 - now I've just managed to do that with
24:03 - one with C frame you know what one
24:05 - property is controlling those two you
24:07 - may be wondering you know what's the
24:09 - point in C frame when he can just
24:11 - firstly position an object and then
24:13 - rotate it well C frame much easier and
24:16 - it's very very very easy
24:18 - if you didn't want to take its current
24:21 - orientation and rotate it even more it's
24:24 - just much easier because see frame it
24:26 - will look date both properties for you
24:29 - orientation and position but also see
24:33 - frame has some really handy functions
24:36 - built into it which are useful very
24:39 - useful and I'm going to show you some of
24:40 - them now okay so the first one I want to
24:44 - show you is called loop so linear
24:46 - interpolation and you can see that if
24:50 - you have three parts let me let's create
24:54 - three parts let's do what the example is
24:56 - showing us so let's see we've got point
24:59 - 1 and point 2 so we'll just call this p1
25:04 - for point 1 p2 for point 2 what if you
25:09 - wanted to position the block or C frame
25:12 - the block rather in the exact middle
25:14 - between these two parts because our
25:17 - reason over here as well we've got a
25:18 - diagonal line we have got a diagonal
25:20 - line between the two positions the
25:21 - imagine these are the two positions of
25:23 - each part here and here how do we know
25:27 - the exact middle you know is it here is
25:30 - it here here how do we know well thanks
25:33 - to the C frame lerp function we can see
25:36 - frame this so is positioned unrotated in
25:39 - the exact middle in between them let's
25:41 - go back to the example and have another
25:42 - look so I'm going to set the blocks C
25:44 - frame and then using to pick one of one
25:48 - of the parts it could be p1 or p2 it
25:50 - doesn't matter just one of them so game
25:52 - thought workspace p1 get there C frame
25:54 - and because the C frame has functions
25:58 - that we can now use we can use the lerp
26:00 - function so lower case and inside of
26:03 - here if we go back to the example we can
26:07 - see it takes two arguments the first
26:09 - argument is the C frame of the other
26:12 - part that's going to be on the other
26:15 - side which you want the face the story
26:18 - the block to be in between so the other
26:19 - parts and also the percentage and I'll
26:23 - explain that to you in a minute so the
26:24 - other part is going to be p2 so if you
26:26 - use p1 over here to begin with the
26:29 - second one would be p2 so game that was
26:32 - they stop P 2 dot C frame and that there
26:35 - C frames yeah they're not parts that
26:37 - we're using here we're using their C
26:39 - frames and then the second argument is
26:41 - how long how so where should the block
26:45 - be place so if you go back to our
26:47 - example here if you want the block to be
26:49 - placed in the middle you set it to not
26:52 - 0.5 because not 0.5 would be here 1
26:55 - would be here
26:55 - 0 would be here so if you wanted it to
26:57 - be about here used to probably say about
26:59 - not 0.25 wouldn't you so I'm gonna say
27:03 - Northpoint 5 because that's half now if
27:05 - you click on run boom it's in the exact
27:07 - middle between them and because it's C
27:09 - frame deals with rotation as well if you
27:12 - click on sorry another station if you
27:15 - move the part upwards it's going to is
27:18 - going to make sure it's in the middle as
27:20 - well on on the y-axis as well so if you
27:22 - were to draw a line you know from this
27:28 - part to this part yeah that's that's
27:32 - pretty much bang on isn't it the part
27:34 - well it is exactly behind is exactly now
27:36 - in the middle equidistant to each point
27:40 - so that is one of the useful functions
27:43 - that comes with C frame you wouldn't be
27:44 - able to do that with position but
27:46 - because C frame you know is is more
27:48 - advanced it comes to these functions you
27:51 - can start doing this sort of stuff with
27:52 - it
27:53 - so like the example says if you want it
27:55 - to be placed 70% of the way away from
27:59 - the other part you would say nor point
28:04 - seven and that's that's why you know one
28:06 - of them has to come first if you wanted
28:08 - it the other way around you just change
28:10 - p2 to p1 not that okay so very very cool
28:15 - function there I'll show you a few more
28:18 - now in fact I will not I will leave that
28:22 - for a future video because also I want
28:24 - to show you two world space and two
28:27 - object space which will be coming in a
28:29 - future video which is useful for things
28:30 - like item placement on a grid sorry on
28:33 - on a base so you can save it and load it
28:35 - relative to the base so that will come
28:38 - in a future video I hope but one last
28:41 - thing I want to show you is how to
28:44 - at sea frames on so let's say we wanted
28:48 - to move we want to move the block 10
28:53 - stood in front of where it currently is
28:55 - so you could say game that works based
28:58 - up Block C frame equals game dot
29:00 - workspace block dot C frame and you
29:04 - wouldn't say plus C frame new you would
29:07 - not say that because remember a new C
29:10 - frame would have a new orientation a new
29:12 - position we just want to move it
29:14 - forwards or backwards or left or right
29:17 - so you want to add on position so to add
29:20 - on position we use vector 3 because
29:22 - position is measured in vector 3 so we
29:24 - would say Roxy frame respect to 3 new
29:27 - and then you would put in the amount of
29:28 - studs on each axis so you want to move
29:30 - it 10 studs along on the x axis you
29:33 - would go 10 maybe you want to move it 2
29:35 - studs upon the y axis and maybe you want
29:38 - to move it back five studs on his head
29:40 - axis he may be getting confused with
29:42 - which axis is which but if you look in
29:44 - the view selector you can see if you
29:46 - just look at it it changes based on
29:48 - where your camera is so we know that
29:50 - adding 10 to the x axis would move it
29:54 - this way over there adding 2 onto the y
29:58 - axis would move it up a bit and removing
30:00 - 5 from the z axis if we look closely you
30:03 - can see the z axis is actually going
30:04 - this way so it would move it back like
30:07 - that so let's click run and see what
30:08 - happens okay there we go so you can see
30:12 - that it is every time I click run it's
30:15 - going to move it away in that direction
30:16 - and so it is moving up diagonally really
30:19 - if you look at it like that because it's
30:21 - moving up it's moving on all axes if I
30:25 - was to let's move it back down here
30:27 - let's go back to let's go back near the
30:30 - origin let's go to the origin knit knit
30:33 - nearly if I was to just if I only wanted
30:36 - to move it in a certain axis I would
30:38 - leave the other two axes blank with 0
30:40 - and you can see that it has moved 10
30:45 - studs along positively in the x-axis
30:48 - direction like this and it will keep on
30:51 - doing that as long as I keep on pressing
30:52 - 1 and adding on 10 studs with the vector
30:56 - 3
30:57 - so that is how you add more on to a
31:00 - vector to a C frame and so this is where
31:05 - the camera comes into play because if
31:06 - you want to position the camera you have
31:08 - to set it C frame and let me show you
31:12 - for example if I just drag in something
31:13 - from the toolbox for example a zombie in
31:20 - fact not as on because it will run away
31:21 - a tense you know a barrel or whatever
31:24 - and I want the camera to be looking at
31:27 - this I could set firstly a part don't
31:33 - know where the parts gone parts part
31:36 - part bars here we go so if I put a part
31:40 - here and ice let's just imagine that
31:42 - this is called camp art and let's anchor
31:47 - it and can collide whatever make it
31:51 - invisible go and we have a second part
31:53 - and we'll put it over here and we'll
31:56 - call this part focus part the names
32:00 - don't matter but now if I wanted to put
32:02 - a see from the camera so it was
32:04 - positioned here and looking at the focus
32:07 - parts I could say game thought works
32:11 - based camera
32:12 - I'm firstly going to set its camera type
32:15 - to be scriptable and you always have to
32:18 - do that so that you can set the camera
32:19 - see frame then I'm going to say game but
32:22 - works play stock camera dot C frame
32:24 - equals C frame new and we'll say game
32:28 - thought workspace dot camp RC frame so I
32:32 - want the camera to be positioned here
32:34 - yeah but I haven't told it what to look
32:37 - at yet don't it's looking here or here
32:39 - or up here
32:40 - I haven't said yet so if we were to do
32:43 - that oh my god it has to be a position
32:47 - doesn't it have to be a position you
32:49 - have to put a vector3 position in the C
32:51 - frame that is my bad so yeah run this
32:54 - again you can see it is just looking in
32:58 - this direction just it was just lucky
33:00 - that it was in this direction but we can
33:03 - actually set the focus the second
33:05 - position to be game thought workspace
33:07 - dot focus parts
33:09 - and then it's actually gonna look in
33:12 - that direction so if I was to move these
33:15 - items over here and do it again you can
33:19 - see it's now looking over there so that
33:22 - is how you there's a brief introduction
33:23 - into camera movement and positioning but
33:28 - you can see where this is going so brief
33:30 - recap see frames they take position and
33:35 - orientation rotation into account and it
33:38 - will if you you can either rotate the
33:43 - see frame by saying by using a second
33:47 - argument a second position which will be
33:49 - where it's looking out or you can set
33:51 - the see frame of something and multiply
33:54 - it by C frame dot angles and you can
33:57 - give the angles in radians so if I
33:59 - wanted to rotate by 90 degrees like this
34:02 - on the x-axis I would be doing so I
34:05 - could just rotate by 10 degrees or I
34:08 - could do it on a different axis like
34:12 - this so you can see where this is going
34:14 - so I'm actually gonna set this to game
34:18 - got workspace camera dot C frame so it's
34:22 - gonna take its current C frame and just
34:25 - keep adding on ten degrees to it like
34:29 - this and you can see how it's rotating
34:30 - on that axis on those axes because it's
34:34 - rotating on the X and y axis so that is
34:38 - some brief camera C frame stuff sopia
34:41 - camera sorry C frame it controls the
34:44 - position and rotation so it isn't it's a
34:48 - representation a data type of position
34:50 - and rotation in one so you can set a C
34:53 - frame and it will be a point with the
34:56 - rotation and position and there are also
35:02 - some useful functions for C frame one of
35:04 - which we've looked at today
35:05 - we'll go into some more in a future
35:06 - video you don't need to know them yet
35:08 - but we need to know is that C frame the
35:10 - data type in roblox similar to position
35:12 - but it also can control the rotation of
35:15 - an object and by
35:18 - the C frame property isn't visible in
35:21 - the properties window
35:22 - okay it is there what I mean is a
35:25 - property but you just can't see it but
35:27 - you can see the changes it makes to the
35:29 - orientation and the position properties
35:33 - okay guys I know we nearly ended the
35:36 - tutorial but I just remembered one last
35:37 - thing that I have to show you which is
35:39 - really awesome with C frames it's called
35:41 - look vector so if we think about a parts
35:45 - C frame or any C frame it's going to
35:48 - have a look vector it's also going to
35:50 - have a right to vector and an OP vector
35:52 - you may be wondering what are these well
35:55 - let's imagine that this is our C frame
36:00 - okay and well the look vector is
36:05 - basically a a unit vector which means
36:09 - it's it's it's a it's a direction with
36:12 - no with no magnitude I think is its no
36:18 - no scale basically so it's not like a
36:20 - it's got a set it's got a set distance
36:23 - but it's pointing in the forward
36:26 - direction and the forward Direction is
36:29 - you can tell it's the forward direction
36:31 - because this surface here of the part is
36:34 - called the front surface and you can see
36:38 - in this surface window it will be there
36:40 - but the the look vector is the forward
36:43 - facing vector so the direction the
36:46 - forward facing direction of that part of
36:48 - that C frame so if you were to take the
36:52 - look vector and set the C frame to be
36:56 - the currency frame plus look vector
36:59 - times 10 it would move it 10 studs
37:02 - forward in that direction so let me show
37:04 - you so game doctor workspace dot block
37:11 - dr. C frame and we're going to set it to
37:14 - its currency frame to keep the position
37:16 - and orientation
37:20 - but then what if you want to move it so
37:22 - let me give you an example right of
37:25 - course you could move this block forward
37:29 - by adding on them like we did earlier
37:31 - vector3 you and the amount of studs but
37:34 - it gets quite hard to do that when it's
37:36 - rotated in a funny way so you don't know
37:38 - the exact amount of studs to move this
37:41 - forward like this in this direction it's
37:45 - not you know it's a very complex vector3
37:49 - value to move it forward in this
37:52 - direction so you just want to keep
37:53 - moving forward in this direction like a
37:55 - bullet would do you can get it to look
37:57 - vector and this is a great example
38:00 - actually they look vector is going to be
38:03 - in this direction of the blue of the
38:06 - blue arrow it might not be the blue
38:07 - arrow in all cases it's just because
38:09 - this is the front surface you see here
38:11 - in the brach front surface so the look
38:14 - vector will always be coming out of the
38:16 - front surface and so what I can do is we
38:21 - can get the blocks currency frame and we
38:24 - can add on we're gonna add on game dot
38:29 - workspace dot block dot C frame dot look
38:33 - vector so I'm doing the lowercase L and
38:36 - uppercase v but I don't think it matters
38:37 - so you're adding on the look at vector
38:41 - because it's a property of the C frame
38:42 - you can't just say block look vector it
38:44 - has to be block doc the C frame don't
38:47 - look vector because it's a property of
38:48 - the C frame so we're adding on if you
38:52 - think about it this is just a position
38:53 - so it's a vector three position value so
38:56 - we're adding on this position and if you
38:59 - do that you it because it's the unit
39:01 - vector I think the scale of it is one so
39:04 - like once stood so it's going to move
39:06 - one stood in that direction so you can
39:08 - see it's moving like that so if you
39:10 - wanted to increase that's if you wanted
39:13 - it to go further you could times it by a
39:15 - number so you could times it by ten if
39:17 - you wanted it to go ten steps in that
39:19 - direction and look it does so it's going
39:21 - in that direction because the look
39:23 - vector is basically the direction of
39:27 - this arrow here and it's going to keep
39:30 - moving in that direction but
39:31 - imagine that the the arrow is only one
39:35 - stood and so if you want to go further
39:37 - you have the times that they look vector
39:39 - by a bigger number and you can see off
39:42 - it goes now there's also a negative to
39:45 - get the opposite direction you could
39:47 - just do it negative game but workspace
39:49 - block looked vector and it will start
39:51 - coming back the other way and there's
39:53 - also there is also an output vector and
39:57 - that vector comes out of the top of the
40:00 - part or the top of the C frame and let's
40:06 - change it to say vector if it goes up in
40:12 - the sky you want it to go down you just
40:14 - change it to negative so there's no down
40:16 - vector because you can just say negative
40:17 - up vector or negative look vector so
40:21 - let's go back to that part there is also
40:24 - a right vector like this and that all
40:35 - this has changed that to five so that is
40:40 - sending it to the right and I know it
40:43 - looks to the left on my side but it's
40:44 - because the right surface is here and if
40:47 - we look at it from this angle it is
40:48 - going to the right so we all need to go
40:49 - to the left you do a minus right vector
40:52 - and it's now going to the left so can
40:54 - you see what's happening here so you
40:56 - think about it though the the look
40:58 - vector up vector right vector they are
41:02 - not they're just the direction so it's
41:05 - telling you the direction and then you
41:07 - multiply it by an amount of studs for it
41:10 - to go in that direction by that much so
41:13 - the scale of it that of the right vector
41:17 - is I think it's only like one stood so
41:20 - if you think about it the right vector
41:22 - will only be one stood and the up vector
41:26 - will only be one stood so and the and
41:30 - the rot the look vector which will be
41:33 - going out at the front will only be one
41:35 - stood so if you wanted to move it ten
41:38 - studs you'd have to take the look vector
41:40 - and times it by ten so it goes ten studs
41:43 - out I'm not too sure on the specifics
41:45 - that but you just think of the the look
41:47 - vector right vector up vector as
41:49 - directions so it's telling you which way
41:51 - it will go and then you multiply that by
41:53 - a number it will travel X studs in that
41:57 - direction okay
41:58 - so that the look vector is the forward
42:00 - direction and that's taken from the
42:02 - front surface and it's going to move in
42:05 - that direction the right vector is taken
42:07 - by the right surface okay and the up
42:09 - vector is taken from the top surface so
42:12 - that's all I'm gonna do on C frames for
42:14 - this video I hope it was useful if it
42:15 - was please share it with a friend share
42:18 - it you know wherever you can to support
42:20 - the channel as I get as I said subscribe
42:22 - like the video and I'll see you in the
42:25 - next one cheers for watching