00:01 - so imagine you have a group of items in
00:03 - Roblox perhaps you have loads of parts
00:07 - and perhaps they're inside a model or
00:09 - even inside of a folder okay and what
00:12 - you want to do is you want to do
00:13 - something to all of these parts perhaps
00:15 - you want to change the color of all of
00:18 - these parts at once without having to
00:19 - say workspace doart one. color workspace
00:23 - dop part2 dot color you get the idea so
00:26 - let's put all of these parts into a
00:28 - folder and let me show you how you can
00:30 - do a bulk update to all of these parts
00:34 - using get children so I'm firstly just
00:37 - going to Anchor these parts so they
00:39 - don't fall over when we run the game but
00:42 - in a script I'm going to show you how to
00:44 - use get children so get children will
00:47 - allow you to get all of the children of
00:49 - an instance now what is a child well in
00:52 - Roblox terms a child is any object or
00:56 - instance it's another word of saying
00:57 - object which is inside of an another
01:00 - instance so for example this part is a
01:03 - child of the folder and the folder is a
01:06 - child of the workspace and you can see
01:09 - this by the arrow which is next to our
01:11 - folder so we can expand and collapse it
01:14 - and you can also see there's a slight
01:16 - level of indentation which shows the
01:18 - parts being within the folder because we
01:21 - have this Blank Space near where my
01:23 - cursor is so what we can do is we can
01:25 - get the children of any instance by
01:28 - calling the function and get children so
01:31 - firstly we need to have the reference to
01:33 - our folder now in this case the folder
01:36 - is known as the parent because it houses
01:39 - the parts it has some other objects
01:42 - inside of it so the folder is the parent
01:45 - but all of these parts are the children
01:48 - so to get these children we're just
01:50 - going to say colon get children like
01:52 - this but now what what can we do with
01:55 - those children well we haven't stored
01:57 - this as a variable we need to store it
01:59 - as a
02:00 - variable so I'm going to create a
02:02 - variable I'm going to call it children
02:04 - you can call it anything the name
02:05 - doesn't matter what matters though is
02:07 - that it's going to be storing a
02:09 - reference to all of these children and
02:11 - it's going to be storing it in the
02:12 - format of a table a table allows you to
02:15 - store more than one value so in this
02:18 - case we're going to have a table which
02:19 - looks like this and it's going to have
02:22 - an index for every single uh object
02:26 - inside of our folder so an index is just
02:29 - a value okay so for example our table
02:31 - would look something like
02:34 - this now we won't be able to see this
02:36 - table but I'm just going to show you
02:39 - this is what it would look
02:41 - like okay I don't know how many parts
02:44 - we've got here 1 2 3 4 5 six seven eight
02:46 - we've got eight so 1 two 3 four five six
02:49 - seven eight okay so it would look
02:50 - something like this we have eight
02:52 - references to each part obviously named
02:55 - the same thing uh in this example but
02:58 - just imagine that they are different so
03:00 - that's what the table would look like
03:01 - that is what our children variable would
03:04 - be because we've got the children and
03:06 - we've just put them into a table so
03:08 - we've got a collection of all of those
03:10 - parts what we then want to do and uh I'm
03:14 - just going to keep this here but I'm
03:15 - just going to comment it out okay so the
03:18 - script ignores it because this is just a
03:20 - visualization what we can then do is we
03:22 - can Loop through that table we can Loop
03:25 - through all of the children and we can
03:27 - say look for every single child in this
03:30 - table we want to do such and such okay
03:33 - if we want to change the color of all of
03:35 - those parts we can do that if you want
03:37 - to rename all those parts we can do that
03:39 - if we want to delete them all together
03:40 - we can do it so I'm going to show you
03:42 - how to do that we're going to use a in
03:43 - pairs Loop and it looks something like
03:45 - this so you'll say for index comma value
03:49 - in children do okay and you might notice
03:54 - if you have been a scripter for a while
03:57 - that I'm not saying in pairs
04:00 - okay it used to be that you'd have to
04:01 - put the children like this but you don't
04:04 - have to do that anymore so we just say
04:05 - for index value in children do and then
04:09 - whatever you do this value because this
04:12 - value is forget about the index value
04:14 - we're not going to talk about that today
04:16 - the index is just current the the number
04:18 - right so if it's the first in the table
04:21 - the index is one if it's the second it
04:22 - would be two if it's the eighth index
04:24 - would be eight but we don't need the
04:26 - index for today what we what we are
04:28 - interested in is the value and the value
04:30 - is just going to be each object in our
04:34 - table here that We're looping over so it
04:36 - will start with the first one and the
04:38 - whatever we do to this value will be
04:40 - done to every object in our table so we
04:42 - could say value do color and we could
04:45 - set the color to Red for
04:48 - example okay and if we run this code
04:51 - it's going to set the color property of
04:54 - every single child that's in our table
04:57 - here and if we click on run
05:00 - you'll notice all of the parts went red
05:03 - and you'll notice that it happened
05:04 - instantly but with a for loop it's
05:06 - actually doing it one by one in order it
05:09 - just happens so quickly that we fail to
05:11 - notice and if we were to add a task.
05:13 - weight of 1 second here you would be
05:15 - able to see each individual part being
05:18 - looped over it's not doing it in any
05:20 - particular order here either it's just
05:23 - it's doing it based on the order of the
05:24 - table which might not correspond to the
05:26 - order that our parts are are laid out in
05:30 - but you can see it did it one by one so
05:32 - that is how we can Loop over the table
05:35 - and I'll do a more in-depth video on
05:37 - four Loops this video wasn't meant to be
05:40 - intended for that but it's meant to show
05:42 - you that the get children function
05:46 - returns a table and then we used the
05:49 - four Loop to Loop through every object
05:52 - in that table okay so again you can do
05:54 - whatever you like here you could print
05:57 - the name of the part not that you'd
05:59 - really want to
06:00 - okay because they're all the same at the
06:02 - moment but you know we could we could
06:04 - say part one we could say part three and
06:08 - it would print those out one by one okay
06:10 - and again it doesn't necessarily mean
06:12 - that's the order that they're going to
06:13 - be printed out in but you can see it's
06:15 - printing out each part as it Loops over
06:18 - it so that is get children okay and I'll
06:23 - probably make another video about a
06:25 - separate uh function called get
06:28 - descendants okay you can also say get
06:30 - descendants and the difference here is
06:33 - get children will only Loop over the
06:36 - first set of children if I had another
06:39 - child inside one of my parts get
06:43 - descendants would also Loop through
06:45 - those as well it would it would Loop
06:47 - through absolutely everything in our
06:49 - folder okay even if there was something
06:51 - inside our part it would still be
06:52 - counted but if we said get children
06:55 - because we're only looking for the
06:56 - direct children of that folder
07:00 - technically this second part that I just
07:02 - created is parented it's a child of the
07:05 - part not the folder so it wouldn't get
07:07 - counted but if you say get descendants
07:10 - it would contain it okay it would it
07:12 - would class it as well because it is
07:14 - still a descendant of the folder it's
07:17 - still within the folder it might not be
07:19 - directly parented to the folder but it
07:22 - is still a descendant of it okay because
07:23 - if you collapse the folder the part
07:26 - disappears so that was how to use get
07:28 - children hope you found it useful if you
07:30 - did please leave a like Please Subscribe
07:33 - let me know any other videos you'd like
07:35 - me to cover and I'll see you in the next
07:36 - one thanks for watching