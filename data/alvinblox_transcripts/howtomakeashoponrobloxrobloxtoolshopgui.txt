00:00 - hi everyone Arvin blocks here in this
00:01 - video I'm gonna show you how to make a
00:03 - simple shop GUI that will give you a
00:05 - tool in roblox to do so you'll be able
00:08 - to have a shop and it will save the
00:10 - tools it will shape save your cash it
00:12 - will also give you feedback if you click
00:14 - the button and you already own the item
00:15 - it's gonna go red but if you don't
00:17 - already own the item and the purchase
00:19 - was successful it's gonna go green so
00:20 - lots to learn in this video so keep
00:23 - watching can I also you remind you that
00:25 - I have a star code on roblox so if
00:28 - you're enjoying my videos you're finding
00:29 - them useful and you want to support my
00:31 - channel at no extra cost when you're
00:32 - buying Roy books or premium you can use
00:35 - the star code
00:36 - Alvin blocks at the checkout and that
00:39 - way I'll receive a commission and it
00:41 - will support the channel at no extra
00:43 - cost to you
00:43 - thank you the first thing which we're
00:45 - going to do is create our GUI so in the
00:48 - starter GUI click on the plus and insert
00:50 - a screen GUI I'm going to name mine shop
00:53 - and inside of there I'm gonna add a
00:55 - frame now this frame I'm gonna set the
00:58 - size so I'm going to set the scale on
01:02 - the X and y axis so that it scales with
01:05 - the screen size so when it gets smaller
01:07 - then the shop GUI will also get smaller
01:09 - but if the screen gets bigger it will
01:11 - also increase so we can set the size
01:14 - property to naught point 5 comma 0 comma
01:18 - naught point to 5 comma 0 in fact I've
01:22 - changed the naught 0.25 to around not
01:25 - point naught point 6 there we go
01:29 - then I'm going to set the anchor point
01:31 - to naught point 5 comma North point 5
01:34 - this means that when you set the
01:37 - position value the position will be set
01:39 - in the middle of the frame so it's
01:40 - perfectly centered so I can then set the
01:43 - position property to naught point 5
01:45 - comma 0 comma naught point 5 comma 0
01:48 - this puts it in the middle on the X and
01:51 - y axis so now it's in the middle of our
01:53 - screen and you can see when I make my
01:57 - screen smaller then you can see that the
01:59 - GUI scale is work that's because we're
02:01 - using the scale properties not the
02:03 - offset properties so once we've done
02:05 - that we're going to insert a UI
02:10 - layout and this means that any GUI
02:12 - elements inside of this frame will get
02:15 - ordered into a grid the next thing I'm
02:17 - going to do is create a template frame
02:19 - this template frame is going to be live
02:24 - easy it's going to show the tools that
02:26 - we have and for each tool we'll copy it
02:28 - and change the text inside the frame to
02:31 - the tools name etc so I'm going to name
02:33 - this frame template and I'm going to go
02:39 - into the UI grid layout here and in fact
02:41 - you can add a few more frames just to
02:43 - see what it looks like I'm going to go
02:45 - into the UI grid layout I'm going to
02:46 - change the cell size because currently
02:48 - it's using offset we want to be using
02:50 - scale so that again scales with the size
02:52 - of the GUI so I'm going to set it to
02:54 - around nine point one so it takes up a
02:57 - tenth of the screen of the frame size on
02:59 - the x-axis and again the same for the
03:02 - y-axis and I need to make it a little
03:05 - bit longer on the y-axis so let's try
03:07 - and not point to perfect so now we've
03:10 - got the grids set up like that now in
03:13 - fact I might just change it to not 0.25
03:15 - so that it's a little bit wider
03:18 - there we go that works with me so now
03:20 - what will happen is whenever I add a new
03:24 - template if it can't fit on the end of
03:27 - the row it will create a new row for us
03:29 - and they'll all fit in like this so I'm
03:30 - going to add a few more just to see if
03:32 - it fits perfectly and so we've got a bit
03:35 - of clipping so I'm gonna set my frame
03:39 - I'm gonna set clipped it's eclipsed
03:42 - descendants to be true so that it
03:44 - doesn't show any items that are outside
03:47 - of the frame and if you want it to be a
03:50 - scrolling frame just insert a scrolling
03:52 - frame instead of a normal frame and put
03:53 - everything inside of there so I'm just
03:55 - going to go back into the into the glue
03:56 - i grid layouts and I'm going to change
03:58 - the horizontal alignment to Center I'm
04:02 - also going to change the cell padding to
04:05 - naught point naught 5 comma 0 nor point
04:08 - naught 5 comma 0 again this is using
04:10 - scale so what will happen is that will
04:14 - dynamically change when the size of the
04:16 - GUI changes so now that we've got our
04:20 - our grid basically of items in fact I'm
04:23 - not too happy
04:24 - without because it's just a grid and
04:26 - there's nothing else you know there's no
04:27 - padding at the sides so I'm going to set
04:31 - the fill direction max sales to be five
04:34 - so there can only be five sales on each
04:36 - row then I'm going to set the horizontal
04:38 - alignment to be centered and also the
04:40 - vertical alignment to be centered so now
04:42 - it looks a little bit nicer so the next
04:45 - thing I'm going to do I'm going to
04:46 - delete all of the frames all the
04:47 - template frames apart from one so we can
04:50 - customize what it looks like now if you
04:54 - want to you can you can change the
04:58 - vertical alignment if you do if you want
05:00 - them to start at the top we want to
05:02 - start at the bottom I'm gonna keep mine
05:03 - at the top so I'm going to customize my
05:06 - template now I'm going to firstly change
05:09 - the actual frame to make it look a bit
05:11 - better I'm going to change the style to
05:13 - be drop shadow then I'm going to change
05:16 - the border size pixel to be three so
05:18 - we've got a bit of a border on here and
05:20 - I'm going to change the back to be a
05:23 - light blue color and then I can put a
05:28 - viewport frame in there I'm going to set
05:31 - the scale of that viewport frame to take
05:33 - up the entirety of the frame it's inside
05:36 - of by setting the size to 1 comma 0 1
05:39 - comma 0 so that will fill the X&Y axis
05:42 - because it's scale and I'm also gonna
05:45 - set the background transparency to be 1
05:47 - now what we can do is begin scripting it
05:51 - so I'm going to create some tools I'm
05:53 - going to put them in a server storage
05:54 - I'm going to create a folder in fact
05:57 - I'll put the folder in the replicated
05:58 - storage so we can see it on the client
06:00 - and we can get all the information about
06:02 - the tools I'm going to call this folder
06:04 - tools just like that now we need to get
06:07 - a loaded tool so I'm going to go to the
06:08 - I'm gonna go to the free model section
06:11 - I'm just gonna insert a few tools to
06:13 - test I'm gonna click no when it says to
06:15 - put it into the starter pack because we
06:17 - want to put it into our folder in a
06:18 - minute so just get as many in as you can
06:21 - we've got a gravity coil here I'm gonna
06:24 - delete the new because it says delete me
06:26 - and what else we got let's do sword okay
06:32 - so
06:33 - cool so when you've got your items just
06:36 - take them and drag them into that folder
06:39 - now we are going to insert a local
06:43 - script into the shop and let's just
06:46 - outline what we need to do in the code
06:48 - so firstly we need to insert a templates
06:51 - for every single item in that folder so
06:53 - let's loop through everything in that
06:56 - tools folder and insert a template for
06:58 - each item now I'm going to insert into
07:02 - this template a text label and this text
07:05 - text label is going to be the name of
07:06 - the object now we can't name this text
07:09 - label just name because it will think
07:11 - that we're accessing its name property
07:13 - of the parent so if we were to say
07:15 - template name is thinking that we're
07:17 - accessing the name property of the
07:18 - template frame so we'll just call it
07:20 - object name I'm going to set the size
07:23 - because I want it to fill the entire of
07:25 - the x-axis in the frame so the whole of
07:29 - the X in the frame will be filled it's
07:31 - going to be 1 comma 0 and then I only
07:33 - want it want it to take up about a tenth
07:35 - or two tenths of the y-axis so when I
07:37 - say the y-axis I'm only meaning this
07:39 - much here so naught point 2 comma 0
07:42 - awesome I then want it to be positioned
07:45 - at the bottom of the screen so I'm going
07:46 - to set the position to be zero comma
07:48 - zero learning to do anything like the
07:49 - x-axis but then we'll do 1 comma 0 to
07:52 - put it at the bottom but then just to
07:54 - bring it up because it's outside of the
07:56 - frame we're going to set the anchor
07:57 - point so the position is taken from the
07:59 - bottom of the screen so we'll set it to
08:01 - 0 comma 1 the anchor point is where the
08:04 - position is taken from so if I tell the
08:06 - script that I want the position to be
08:08 - set from the bottom then it's going to
08:10 - set the bottom of the GUI to be at that
08:12 - point so it's still within the frame
08:13 - then I'm gonna set the background
08:15 - transparency to be 1 and that's all we
08:19 - need to do so let's loop through as I
08:23 - said the folder in a replicated storage
08:25 - so make a quick variable for that folder
08:27 - local folder equals game don't replicate
08:29 - this storage how long wait for child in
08:32 - case it's not already there yet tools
08:35 - then we can say for underscore because
08:39 - we don't need the I so underscore would
08:43 - be the counter but then we will say it
08:45 - all in pairs folder : get children do so
08:50 - we're looping through eat every tool in
08:51 - that folder and we'll say we'll make a
08:54 - variable for the template frame as well
08:57 - local templates equals in fact local
09:01 - yeah local local frame will be the frame
09:03 - first this frame here equals scripts dot
09:06 - parents : wait for child frame we can
09:10 - then get the template that's inside the
09:12 - frame so Franko long wait for child
09:15 - template right now we can say template
09:20 - : clone we'll assign that to a variable
09:23 - called new template and we need to set
09:30 - the name of the template so new template
09:34 - dot name equals to name then we need to
09:37 - set the text of the object name text
09:39 - label that we just made so new template
09:41 - got object name text equals tool name
09:44 - and then later on we need to put the
09:47 - tool in the viewport frame we'll do that
09:50 - in a bit so now if we test the game we
09:53 - should see if a frame for every single
09:56 - tool now I'm gonna make my template a
09:58 - visible property false and then when we
10:01 - add a new template for the proper tools
10:03 - we can set the visibility of each
10:05 - individual frame to be true so the
10:07 - template one won't show up you click on
10:10 - play we should see it in action oh my
10:13 - bad we need to parent it don't we to the
10:15 - frame so new templates got parents
10:17 - equals frame yeah put it inside the
10:21 - frame so if you click play then you can
10:25 - see we now have four frames for our our
10:28 - tools in fact I've just realized in
10:32 - order for us to be able to click them
10:33 - they it needs that the frame needs to be
10:36 - a text button so very simple all we need
10:39 - to do is if you've not got a plug-in
10:42 - that can convert the class just insert a
10:45 - text button and I'm going to name it
10:47 - templates and I'm just going to copy the
10:51 - if I don't to copy anything I can
10:54 - just take my viewport frame and object
10:57 - name and put them in the template and
10:58 - get rid of the frame so your template
11:01 - needs to be a text button but I'm going
11:03 - to set the background transparency of
11:04 - the text button to be sorry I'm going to
11:07 - keep the background transparency at zero
11:08 - but I'm going to get rid of the text
11:10 - called button in it there and if you
11:12 - want to add the order back the border of
11:15 - three and the nice little outline you
11:19 - can do that so just make sure it's a
11:21 - text button and that way we can click it
11:23 - so again I'm going to make it invisible
11:25 - visible property sets false and what we
11:29 - can then do is we'll just create a event
11:31 - for when you click it so we can say new
11:37 - template mouse button one click curl on
11:40 - connect function and we're going to have
11:43 - a remote function a remote function is
11:46 - something that you can invoke which is
11:49 - basically calling it from the client and
11:51 - then we can pick up pick it up on the
11:53 - server and do our checks to see if you
11:55 - own if you can buy the item if you have
11:57 - enough money and if you do then the
12:00 - remote function can send the message
12:01 - back to our local script so whether the
12:03 - transaction was a success or not
12:05 - whereas with a remote event it won't be
12:07 - able to send anything back so we can
12:10 - have some feedback so make maybe play a
12:12 - sound if it went well or make the button
12:14 - red or green depending on whether it
12:15 - whether it was a success or not so when
12:17 - we replicated storage I'm going to
12:19 - insert a remote function and I'm going
12:20 - to call this by item or though you can
12:23 - call it whatever you like so when you
12:25 - click this I want to fire that or invoke
12:28 - that remote function so I can say game
12:29 - got replicated storage by item :
12:33 - invokes server now we're going to pick
12:36 - this up on the server so we need to know
12:38 - the item that we've bought so because
12:40 - we're going to name the item after the
12:44 - tool we could either send tool name or
12:48 - new template name because they're going
12:50 - to be the same but I'm gonna send the
12:52 - name of the tool okay so yeah so so when
12:58 - you've done that when you click the book
12:59 - when you click buy item when you click
13:01 - the button it will fire invoke this
13:03 - remote function and it will send the
13:05 - name of the tool so if we go to the
13:07 - servus script service only out of
13:09 - service script so we can do the coding
13:11 - of when you click this button now to see
13:14 - if you have enough money we can do the
13:16 - on server invoke event so we can say
13:19 - game dot replicated storage dot by item
13:23 - dot on server invoke equals function no
13:26 - connect because it's a callback function
13:28 - that means that it will trigger this
13:30 - function when it's invoked and you can
13:34 - return things as well so key because you
13:36 - can return something from the function
13:38 - it's going to be waiting for that
13:39 - function to be completed so a lot of
13:42 - people also ask why are we checking this
13:45 - on a server why are we checking if you
13:46 - have enough money and it's because if
13:49 - you're checking on the client in your
13:51 - local script because it's running on
13:52 - your computer you could exploit and
13:54 - trick the local script into thinking you
13:56 - have enough money or ice on the server
13:58 - the server can see and has the main copy
14:02 - of the game you can't change things on
14:03 - the server so if you try and change the
14:05 - amount of money you have
14:05 - it'll only apply on your computer on
14:07 - your end so the local script which is
14:09 - running on your computer will think that
14:11 - you have enough money to buy it
14:12 - whereas on the server even if you do
14:14 - change your money to 9 on a 9 cache then
14:17 - the server still C is the amount that
14:18 - you had before because if you try and
14:20 - change something on your end on the
14:22 - client it won't take effect now the in
14:25 - on server evoke invoke takes an
14:28 - automatic argument of the player that
14:30 - invokes it that's sent automatically but
14:32 - we had our other argument which we sent
14:35 - and that argument is the name of the
14:37 - item so we will just call it to name so
14:41 - we need to have a amount of we need to
14:44 - somehow and give a price for each item
14:46 - so by doing that we can insert an int
14:49 - value into each tool here so we can say
14:53 - we call the in value cost and then the
14:56 - value of this is going to be its price
14:57 - so if you want it to cost 500 you'd set
15:00 - the value to 500 but you need to make
15:02 - sure you have one of these in each item
15:04 - so right click copy and then select your
15:07 - other tools and right click and click
15:09 - paste into selected and that will paste
15:11 - it into every single tool so just go
15:13 - ahead and update the value change the
15:16 - value to however much you want each item
15:18 - to cost
15:19 - so now that we've done that because we
15:22 - know that each tool will have a cost
15:23 - value inside of it we can say we can
15:26 - firstly get the tool out of the folder
15:28 - because we've got its name so we can say
15:29 - if games replicated storage dot tools
15:33 - curl on find first child will use find
15:36 - first child because if it isn't there it
15:39 - won't cause an error so if it finds the
15:42 - tool name in that folder then we can say
15:45 - if and then what we'll do is we'll
15:48 - actually make a variable for this so we
15:51 - don't have to keep repeating ourselves
15:52 - so local tool equals game that replicate
15:54 - the storage find first child a tool name
15:56 - if the tool isn't there this variable
15:58 - will be nil so we can say if tool then
16:02 - if tool code on find first child cost
16:06 - just to make sure we have that cost
16:07 - value in there and you haven't forgotten
16:09 - it we can then say if tool cost value is
16:13 - greater than or equal to the player's
16:17 - cash we're gonna in we're gonna write
16:20 - some code that will insert a cash value
16:22 - into your player very soon but for now
16:25 - we'll just say player dot leader stats
16:27 - dot cash value then we can say you can
16:33 - buy this item and for now we will just
16:37 - return true okay else we will return
16:42 - false and if there isn't at all we will
16:47 - also return false I'll explain this in a
16:50 - second and if there is no cost of I live
16:53 - inside the tool we will also return
16:56 - false so as I said in a remote function
16:59 - you can return some data back to the
17:01 - local script so when we say return any
17:03 - data that comes after it
17:04 - so this true or this false will be sent
17:07 - back to the local script and we can see
17:10 - this data if we set it as a variable so
17:13 - if we set this to a variable let's call
17:16 - it results then if it returned true for
17:18 - example then result would then be equal
17:21 - to true so we could say okay if results
17:25 - it's true then we know that it was a it
17:30 - was a success else it must have been
17:34 - false so we know it went wrong
17:36 - you can also Reno return strings or
17:39 - numbers or whatever so you could send
17:41 - error messages but in this case very
17:43 - simple just return either true or false
17:45 - so if you bought the item will return
17:48 - true because we know you have enough
17:49 - money and will write some code in the
17:51 - minute to put the tool in your backpack
17:53 - but for now let's just insert a nother
17:56 - script I just like to keep things
17:58 - organized by having different things in
17:59 - different scripts I'm going to name the
18:02 - first one I'll just name it by item and
18:07 - the second one will be called leader
18:09 - stats now inside of the leader starts
18:12 - one I'm gonna say game not players but
18:15 - player added curl on connect function
18:18 - and then we have an argument that's
18:20 - automatically sent for the player that
18:23 - will draw in the game so we can insert a
18:25 - folder into this player so instance new
18:29 - folder folder dot name equals leader
18:32 - stats make sure you call it NIDA starts
18:34 - with a lowercase L and that way just
18:38 - parent it to the players we're also
18:39 - forwarded up playing folder dot parent
18:41 - equals PLR or whatever you've called
18:43 - your player argument when you have a
18:45 - folder called leader stats if you then
18:47 - creates your currency value I'm gonna
18:50 - call it cash so instance new and it's
18:53 - going to be an int value because it it
18:55 - holds integers cash dot name equals cash
18:58 - and cash got parents if you parent this
19:01 - to your folder called leadest as if it's
19:04 - called leader stats then it will appear
19:06 - on your screen in the top right corner
19:09 - and then I'm going to set the value cash
19:11 - till value equals a thousand so we'll
19:13 - have a thousand cash when we begin so we
19:15 - have enough money to buy everything so
19:18 - now if you go into the game by the way
19:20 - you will see that the leaderboard
19:23 - appears and it has your cash so what we
19:26 - can now do if we go back to our by item
19:28 - script because I've set this up before
19:30 - now we have our leader stats it will
19:32 - check if we have enough money and if
19:34 - cash and if we do have or sorry no
19:38 - that's wrong
19:39 - I should be saying if two lot cost or
19:41 - value is less than sorry
19:44 - no yeah if yeah if your player doubly
19:49 - disaster cost or value is greater than
19:51 - or equal to the cost of the item you
19:53 - should be allowed to buy it so we can
19:55 - then say player if you have enough money
19:57 - to buy it we need to determine you look
19:59 - the money so we can say player dot lead
20:00 - is a stochastic value equals players or
20:03 - latest art store cash drop value minus
20:05 - tool cost or value like this okay and
20:08 - that will take the money away
20:09 - next how do we put this item
20:13 - into your inventory so you keep it or we
20:17 - can say local new tool and we'll create
20:22 - a clone of it equals tool curl on clone
20:24 - and then we'll say new tool got parents
20:28 - equals player backpack like that and
20:31 - when it goes into your backpack then you
20:33 - should keep it when you reset so let's
20:36 - just click it and you can see it took
20:39 - away 500 cash and I have the tool in my
20:41 - backpack now let's just reset to make
20:44 - sure that this actually just stay in
20:46 - your inventory I'm not entirely sure if
20:48 - it does so we'll just double check that
20:50 - okay it doesn't okay I know what's
20:54 - happening so if you want it to come back
20:57 - once you've reset then you there's
21:00 - either two ways to do it so you could
21:01 - either clone it again and create a
21:04 - second version of the tool but this time
21:06 - put it into player dot starter gear and
21:08 - when you put it into player dot starter
21:10 - gear it basically is put into a saved
21:12 - list of tools that will go back into
21:16 - your backpack when you die for that
21:17 - specific player but obviously it won't
21:19 - save now I hope maybe in a future video
21:20 - to do a saving part so this is a
21:22 - temporary version because when you save
21:24 - tools we'd probably have a folder which
21:27 - would which when you die we'd save the
21:30 - contents of that folder and then load it
21:32 - in and that way we can keep track of all
21:34 - the tools that you have but for now this
21:37 - is a way that when you buy at all and
21:41 - you you obviously get it and then you
21:43 - reset
21:45 - and then when you respawn you will keep
21:47 - it because it's gone into your starter
21:48 - year and whenever you reset it will copy
21:50 - everything out of the starter get back
21:52 - into your backpack like that so we know
21:57 - that's working fine and actually it's
21:59 - very very easy to save the tools that
22:01 - you have I'm going to show you how you
22:02 - can do that now so let's insert another
22:04 - in fact note we can go into the leader
22:07 - start script and do it there so first
22:09 - things first we need to get the
22:10 - datastore service so local data store
22:12 - equals game : get service data store
22:16 - service then we can get our datastore
22:19 - code on get datastore and just give a
22:22 - name for your data store for your place
22:23 - you can call it whether you want it's
22:25 - basically just naming the data store
22:27 - uniquely to your game so it doesn't
22:29 - matter what you what you call it I can
22:31 - call it my datastore next what we need
22:35 - to do is we need to save the players
22:38 - tools when they leave so game the
22:40 - players dot player removing player
22:43 - removing is an event which will fire a
22:45 - function when a player leaves the game
22:48 - just like player added it will provide
22:50 - you the argument for the player that is
22:52 - leaving so what we can do is we can
22:55 - create a table we'll call it tools table
22:59 - and we're going to loop through all of
23:01 - the tools in your backpack and add their
23:04 - names to this table so it could be if
23:06 - you had a sword and a gun that the table
23:09 - would look like this so it's the names
23:10 - because you can't save objects to a data
23:12 - store but what we can do is then get
23:16 - that data those names when we load into
23:18 - the game and look for them in the tools
23:20 - folder and then clone them into your
23:21 - backpack
23:22 - so for underscore comma tool in pairs
23:27 - player backpack : get children do if
23:34 - tool in fact I know we can just say
23:38 - instance sorry yeah if game don't
23:42 - replicated storage dot tools
23:44 - curl on fine first child tool name then
23:49 - so if it is an actual tool in replicated
23:52 - storage then we can say tools table dot
23:56 - sorry table dot insert so insert
23:59 - into the tools table tool dot name an
24:04 - obviously tool name is a string so we'll
24:06 - just insert the name of that tool into
24:08 - the table and then we can write to a pin
24:13 - a peak or wrap it in a peak or function
24:15 - because a peak all is if the code inside
24:18 - of that peak or function errors then it
24:21 - won't break the script because it gets
24:23 - caught within the peak or so local
24:25 - success a peak all will return to values
24:28 - success and an error message so and
24:32 - that's going to be equal to P call
24:35 - function like this and there we go make
24:40 - sure you have a closing bracket on the
24:41 - end there because it's a got two
24:43 - brackets here one pair there and another
24:45 - pair here so inside of here we can say
24:48 - data store curl on set async we need to
24:51 - have a key so a key uniquely identifies
24:55 - the player's data this can just be their
24:57 - user ID so player user ID capital you
25:00 - for user in capital I ID then a comma
25:04 - and then we need to tell it the data we
25:06 - want to write to the data store under
25:08 - this key so it's going to be the tools
25:10 - table so we are going to save the tools
25:13 - table to the data store under this key
25:18 - so this is the unique key which we can
25:20 - use to identify that data so we know
25:22 - that this data is it's got the key of
25:25 - the place user ID
25:26 - so once that's saved we can then when a
25:30 - player joins the game we can create a
25:32 - variable for the data we then need
25:35 - another another P call so local success
25:38 - common error message equals P call
25:41 - function para brackets on the end there
25:44 - and also an end with a closing bracket
25:46 - needs to go here and a lot of people ask
25:49 - are what's the point in the P call or
25:50 - the thing with data stores that data
25:52 - stores they can break they can go down
25:54 - they're unpredictable at times and when
25:55 - they do go down they can cause errors in
25:57 - your script and if one data store error
26:00 - breaks the entire script it stops it
26:02 - from running so no one's data is going
26:04 - to save if it breaks or as if we put it
26:06 - in a P call if there is an error the
26:08 - script won't throw up and break the
26:10 - entire script it will keep running
26:12 - for the rest of the players in the game
26:14 - and if there is an error then it will
26:16 - either say that this is false and it
26:18 - will put the error message here as this
26:20 - variable so success can either be true
26:22 - or false and if success is true there
26:24 - won't be an error message but if success
26:26 - is false error message will be populated
26:28 - with the string of the error message but
26:32 - anyway we inside the P call we can say
26:34 - data store or we can set data to the
26:37 - data store : gets async and we need to
26:40 - give it the key to uniquely identify the
26:43 - data stored in there and that is going
26:45 - to be the player's user ID and of course
26:48 - they won't have any data at all so data
26:50 - could be nil so we have to check if data
26:53 - is not nil then we know they have some
26:57 - data and we can loop through all the
26:58 - data in that table and copy out the
27:01 - tools from the replicated storage into
27:03 - their backpack so for underscore comma
27:07 - tool and name because it's gonna be the
27:08 - name of the tool not at all objects
27:10 - because we saved the name into the tools
27:12 - table so for underscore comma tool name
27:16 - in pairs looping through the data do and
27:22 - so what we'll say is if game don't
27:25 - replicate the storage tools kernel find
27:27 - first child so if it finds a tool with
27:31 - the name if it finds that the stored
27:33 - tool name in replicated storage if
27:35 - there's an actual tool with the same
27:36 - name then we will say when in fact we'll
27:40 - just store this as a variable so we can
27:42 - you have to write out again so local
27:45 - tool equals game truncate storage also
27:47 - find first child
27:48 - so if tool if the tool is actually there
27:50 - in the replicated storage then we can
27:54 - clone out so local new tool equals told
27:58 - colon clone new tool parent equals
28:01 - player dot backpack and we'll do the
28:03 - same thing again we'll clone it once
28:07 - more so it goes into their starter gear
28:10 - as well when it goes into their starter
28:11 - gear then it will be put back into the
28:16 - backpack when they respawn it won't get
28:17 - lost and one final thing to do
28:21 - is a bind to closed event so if you're
28:24 - the last player in the server it's
28:26 - possible that the server could close
28:27 - down before your data gets saved so
28:30 - adding a bind to close means that any
28:32 - code within the bind to close will be
28:34 - executed before the service shuts down
28:36 - it delays the server from shutting down
28:38 - until that code is executed so we can do
28:40 - game column bind to close and then
28:44 - inside this function at these brackets
28:47 - or parentheses we're going to do a
28:48 - function like this so you should have an
28:51 - a closing bracket on your end here and
28:53 - then we'll loop through all the players
28:56 - left in the game so for I comma Player
28:59 - or underscore it doesn't matter we're
29:01 - not going to use the index variable so
29:05 - I'm just going to say for underscore
29:07 - player in pairs game dot players
29:09 - : get players we're going to loop
29:11 - through all the players currently left
29:13 - in the game and we're going to say well
29:17 - we can just now copy this code from the
29:20 - player removing that's going to get
29:21 - there it's going to get their tools and
29:25 - put them in a Tools table but I'll
29:27 - change the player that our variable to
29:30 - PLR as well so it's just consistent with
29:32 - the rest of the code
29:32 - because it's looking up the players
29:34 - backpack so this will loop through all
29:36 - players in the game and it will put all
29:38 - of their tools into a table for each
29:40 - player and then set a sink in that it
29:44 - will store it in the players data store
29:45 - so it's basically running the player
29:47 - removing event for every player that's
29:49 - currently left in the game if you're the
29:51 - last person in the game the server might
29:53 - shut down before your day to get saved
29:54 - anyway let's try this out now to make
29:59 - sure that data stores work firstly
30:01 - publish the game so go to file click on
30:03 - publish to roblox go ahead give it a
30:06 - name whatever make sure it's published
30:08 - once you've done that go to game
30:11 - settings at the top click on options and
30:14 - make sure enable studio access to API
30:16 - services is turned on this way you're
30:19 - able to test out your data stores from
30:21 - roblox studio because you're a ruling
30:22 - you're enabling it to access the
30:24 - external API spurred a historic cetera
30:27 - that would only be usually available in
30:28 - a row box game anyway let's buy our
30:31 - rocket launcher classic saw and graph
30:32 - the coil for some reason
30:35 - put the graphical into my backpack but
30:38 - we'll check that out later on but I've
30:41 - left the game I'm gonna go back into the
30:43 - game and you can see I saved the rocket
30:48 - launcher and the sword oh I know why
30:51 - it's because I ran out of money in the
30:53 - game so as well if you want to save the
30:56 - amount of money that you have that's
30:58 - very simple as well but for now let me
31:01 - just give myself even more cash give
31:05 - myself 5,000 cash here and you might see
31:10 - that I have more tools that's because I
31:11 - bought them a few more times to actually
31:13 - see why it wasn't working but now I can
31:15 - buy my gravity coil on my pistol etc and
31:18 - they're getting added to my backpack and
31:20 - I leave the game it saves perfectly
31:22 - there's a little delay just because it's
31:24 - delaying the server from shutting down
31:26 - so it can save my data since I'm the
31:27 - last person here but then if I play the
31:30 - game again I should have all of my tools
31:32 - there you go they're right back where
31:34 - they where they were when I left so
31:36 - birth perfect so how do you save your
31:41 - couch well very very simple so go down
31:43 - to the player removing and we will just
31:46 - copy this set a syncline we're gonna
31:48 - paste it again
31:49 - but this time we're going to change the
31:51 - key so I'm going to do player user ID
31:55 - but then I'm going to also add on to it
31:57 - cash okay I recommend you also do the
32:00 - same with your tools once so we can know
32:03 - what you're saving to each key so that
32:05 - you have a unique keys for each because
32:07 - if you if you if you have the same key
32:10 - it would overwrite your data so I'm
32:11 - going to change player user ID to play
32:14 - the user ID dot dot tools so it
32:16 - concatenates them together and up here
32:17 - I'm going to say play that user ID dot
32:20 - dot tools my list okay and then when you
32:25 - when you've done that obviously changed
32:26 - the tool table to play out dot leader
32:29 - stats doctor cash value now see if
32:32 - you're using a different currency name
32:34 - change cash to the currency name that
32:36 - you're using and then to load it we can
32:41 - create another variable
32:43 - [Music]
32:46 - yeah okay we'll say local cash stored
32:49 - and then we'll say cash stored equals
32:53 - datastore : get a sink and the the key
32:58 - is going to be player dot user ID dot
33:01 - cash and then we can say if cash stored
33:05 - is not equal to nil then cash value
33:09 - equals cash stored else if their cash
33:13 - datastore is nil and they don't have any
33:15 - cash stored we can give them a default
33:17 - value of 5000 so if you want the default
33:20 - number of cash to be a certain number
33:23 - change this so if you wanted to give
33:24 - them zero cash to begin with set it to
33:26 - zero okay I'm going to set it to 100 in
33:29 - fact now said it's a 5,000 because we
33:31 - won't be able to afford anything and
33:34 - also one last thing to do in the by item
33:37 - script we don't want people to be able
33:39 - to buy a tool that they already have so
33:41 - what you can also do is say if tool in
33:46 - this top if statement here if tool and
33:48 - not player dot backpack curl on find
33:52 - first child tool name then in fact we'll
33:59 - say starter gear because if if they have
34:03 - it equipped it will be taken out with
34:04 - their backpack but it will always remain
34:06 - in the starter gear so let me go in and
34:09 - show you again so this time if I try to
34:13 - buy my data hasn't loaded oh I know why
34:18 - it's because I updated my key because I
34:21 - added the tools in cash it would have
34:22 - reset so don't worry about that
34:24 - it won't do that anymore it's just the
34:25 - first time because there's a brand new
34:26 - key I changed it so if I buy a rocket
34:29 - launcher I can no longer buy another
34:30 - rocket launcher i buy a classic sword I
34:32 - can no longer buy another classic sword
34:34 - so I can get all the items but never buy
34:35 - them again you can see my cash has gone
34:37 - down if I eat the game and then go and
34:40 - rejoin then it's going to load them all
34:44 - back in its gonna load my cash load
34:46 - everything and you can see I still can't
34:48 - buy it okay very last thing how do we
34:53 - make the items appear in the viewport
34:54 - frame very simple so click on stop
34:58 - and go back to the local script now what
35:01 - we need to do is we need to clone the
35:04 - object out of replicated storage and
35:06 - into the viewport frame so local object
35:08 - equals no yeah local object equals tool
35:14 - colon clone because tall is the object
35:16 - an object that parents were going to
35:18 - parent it to the viewport frame equals
35:20 - new templates dot viewport frame then we
35:24 - need to create a camera so that it can
35:27 - look at the item and we can tell the
35:29 - camera the viewport frame which camera
35:31 - is going to be looking at it so it can
35:32 - start rendering local camera equals
35:35 - instance new camera camera dr. C frame
35:41 - equals is going to be objects dots let's
35:47 - think about this so each tool is going
35:49 - to need to have a part named handle ok
35:52 - make sure every single tool has a part
35:54 - name handle they usually do but make
35:55 - sure you have one called handle object
35:58 - handle dot C frame okay
36:01 - object handle dot C frame and then we'll
36:06 - say plus object dot handle dot C frame
36:11 - dot look vector times five okay that is
36:15 - going to basically add five studs on
36:19 - from its forward facing direction and
36:22 - we'll just we'll put it in a in a C
36:25 - frame new so C frame new so this will be
36:28 - the position where the camera is and
36:29 - then we'll do a comma and we're going to
36:31 - then tell the script what it's going to
36:33 - be looking at so when we tell the script
36:35 - where the camera will be positioned so
36:38 - imagine that this is our item and this
36:42 - is our camera really bad at drawing of a
36:45 - camera but firstly we're telling it
36:47 - where it's positioned so here but then
36:49 - we're also telling it where to look out
36:51 - so is it going to be looking here or is
36:53 - it gonna be looking here so when we then
36:56 - say object got handle dots dot position
37:02 - because it takes a vector3 the value
37:06 - then in fact they should take object a
37:11 - handle drop position here my apologies
37:13 - so we're giving it two position values
37:15 - because C frame is position and rotation
37:19 - but it takes vector threes here we're
37:21 - telling it where to be positioned which
37:23 - is here and what to look at then we can
37:26 - say camera parent equals new template
37:30 - dot viewport frame and a new template
37:34 - dot viewport frame dot current camera
37:37 - equals camera just like that okay so
37:39 - when we set the camera then it will
37:42 - start rendering the object now I hope
37:44 - this works
37:45 - let's go and test it out and there we go
37:50 - the items are there they do obviously
37:54 - some of them they aren't you know
37:55 - totally right that is because that the
37:58 - handle so he wanted them to be better I
38:01 - would recommend that in each sword in
38:04 - each item let's take the gravity core
38:06 - for example I would have a I'm just
38:12 - trying to think about this hmm
38:15 - one thing I can think of doing is taking
38:19 - the position and then adding vector
38:22 - three new and you can add on some height
38:24 - or some rotation or position the camera
38:28 - to the side a little bit so it's looking
38:30 - down on the object maybe that will help
38:32 - but still you're able to see the item
38:35 - yeah there you go that makes it a little
38:36 - bit better so each items going to vary
38:39 - of course you can't get it right for
38:40 - each item but it is displaying the items
38:43 - in the viewport frame which is good you
38:46 - can obviously tinker around with those
38:48 - values that it's just a very quick quick
38:51 - addition a quick way of adding it on for
38:54 - me there so play around with it that's a
38:57 - very simple way of showing items in a
38:58 - viewport frame I'm sure you'll be able
39:00 - to find out a better way of doing it but
39:02 - they go a simple shop that's what I
39:04 - wanted to teach you today how to make a
39:06 - simple shop on roblox and if you want to
39:08 - provide some feedback on the text
39:10 - buttons whether the transaction was a
39:12 - success or not because why the returning
39:14 - true or false in the local script if
39:16 - it's true then you could say new
39:19 - templates and
39:21 - if we just look here it was a success we
39:24 - could set the background color 3 to a
39:27 - green color so new template back ground
39:31 - color 3 equals color 3 dot from RGB and
39:36 - you paste your green color in there else
39:39 - if it went wrong you could do a red
39:42 - color so we'll do a red like this copy
39:46 - it only set it back to white which is 2
39:49 - 4 5 2 4 5 2 4 5 I'm gonna paste my red
39:52 - color in there then I'm gonna wait about
39:57 - a second and then I'm gonna set it back
39:59 - to 255 255 255 which is white so now
40:06 - when you click it it's going to return
40:09 - either true or false and depending on
40:11 - that I'll hide the template in a minute
40:13 - you can see it's really it's gone red
40:15 - because we already own that item but if
40:18 - you didn't have it already and it was
40:20 - not in your starter gear so of course to
40:23 - remove it from your starter gear and
40:24 - this was removed from the backpack it
40:28 - would go green so there you go and don't
40:31 - forget to put the template set the frame
40:35 - template dot visible to false so it
40:38 - won't appear last little thing that
40:39 - we've forgotten to do is to add a button
40:41 - to make the shop opening closed so in
40:44 - this green GUI I'm going to insert a
40:46 - text button I'm going to set the anchor
40:49 - point to naught point 5 comma naught to
40:51 - point 5 and then I'm going to set in
40:55 - fact now I'm going to set anchor points
40:56 - to 0
40:57 - come on 0.25 because I only want it to
40:59 - be perfectly centered in the middle on
41:01 - the y-axis because I'm not going to
41:03 - moving it away on the x-axis so I'm
41:05 - going to set the position to 0 comma 0
41:07 - comma naught point five so it's middle
41:10 - on the y-axis comma 0 just like that
41:12 - then I'm going to make sure text scale
41:15 - is set to true I'm going to set the text
41:17 - to shop and you can change the font if
41:22 - you like and you can also change the
41:24 - color to whatever you like
41:27 - once you've done that's I'm gonna just
41:29 - name it um open or button awkward it
41:34 - button in the local script just outside
41:38 - of any other code we're going to say
41:40 - scripts got parents code on wait for
41:43 - child button dot mouse button one click
41:48 - colon connect function and we're gonna
41:52 - say script the parents in fact will
41:56 - create a variable for the button at the
41:58 - top here local button it calls the
42:01 - script up parent wait for child button
42:03 - and then we can just say button mouse
42:05 - button one click and then inside we can
42:08 - say button not button it will be the
42:11 - frame wearing it so frames not visible
42:12 - equals not frames not visible and the
42:16 - knot will set it to the opposite of what
42:18 - it currently is so if it's open it will
42:20 - close it and if it is closed it will
42:22 - open it so that is how you add the
42:25 - button to open and close the shop
42:27 - obviously my shop do I doesn't look the
42:29 - nicest but you can spruce yours up a
42:32 - little bit very easily for example if
42:35 - you wanted to change the color you could
42:39 - set the style to custom and then you
42:42 - could change the color if you wanted to
42:45 - have a text label that said shop at the
42:48 - top you could you could set the anchor
42:54 - I'm going to put it inside a folder so
42:59 - that it is intact so it isn't bothered
43:03 - in fact no sorry I'm going to put it
43:04 - into the into the shop GUI but not in
43:07 - the frame and you can just get the
43:11 - position of the frame and sets it to the
43:13 - position of the text label set the
43:15 - anchor point to not point five not point
43:17 - five but change the Y so it's just above
43:21 - the shop a little bit so at not point to
43:23 - or not 0.15 like this and then let's
43:29 - have a look so the frame of the shop is
43:32 - north point five on the x-axis so not
43:35 - point 5 comma zero and then about not
43:37 - point 1 comma zero
43:39 - and on the y-axis and then if you do
43:41 - tech scaled change the text say shop and
43:47 - if you want and get rid of the border
43:49 - size pixel you could set that color to
43:53 - be maybe a dark color and the frame is a
43:56 - little bit lighter and that's up to you
43:58 - mine's going to be white as I said like
44:01 - that but yeah that's how you can spruce
44:04 - up the shop a little bit obviously you
44:07 - know you can do a much better job than
44:09 - then I have done and also one final
44:14 - thing if you are going to have any GUI
44:18 - elements outside of the frame and you'll
44:20 - need to also make set the visibility of
44:22 - them as well so for example scripts dock
44:25 - parents got header dot visible equals
44:28 - not scripts got parent got header dot
44:30 - visible and then if you make them both
44:34 - visible set to false then they will
44:36 - appear and disappear when you click the
44:38 - shop button really we should have
44:39 - designed it a little bit better so that
44:41 - you had a mainframe and then you had all
44:43 - your GUI elements inside there but you
44:47 - know it still a good working shop and if
44:50 - you did want to change it so that your
44:53 - header and frame were combined in one
44:56 - big frame then that is possible that is
45:00 - definitely possible so you could put the
45:02 - header in there but then create a sub
45:06 - frame inside of this one and put the UI
45:10 - grid in there and put the template in
45:13 - there as well and then sets the
45:14 - subframes size to 1 comma 0 1 comma 0 so
45:18 - it takes up the whole size or you could
45:20 - change the Y so that maybe takes up
45:23 - three-quarters of the screen and then
45:25 - you position it a quarter of the way
45:27 - down at not 0.25 and then your header
45:31 - could take up 1 comma 0 for the entirety
45:35 - of the frame and then not point to 5
45:37 - comma 0 for the y axis just like that
45:40 - and then get rid of that not 0.15 and
45:43 - also I'm going to get rid of the anchor
45:44 - point on the y-axis
45:46 - okay that might sound a little bit
45:48 - confusing but basically what we've done
45:50 - is we've just made a new vehicle changed
45:54 - the old frame and put the UI grid and
45:57 - template into a new frame that's taking
45:59 - up three quarters of the of this big
46:01 - frame here and then that way you
46:04 - wouldn't need to do this with the script
46:06 - apparently I had to go to doc physical
46:08 - stuff like that but what you would need
46:12 - to do is I'm just going to change the
46:14 - name of this frame to be item frame what
46:18 - you would need to do is go into the
46:19 - local scripts and when you're parenting
46:24 - it to the frame we would say frame dots
46:28 - item frame like this and let's just see
46:32 - if we've used the frame anywhere else I
46:36 - don't think so
46:38 - so let's make the main frame invisible
46:40 - and click the shop oh it's not pairing
46:48 - let's just check that out let's check
46:53 - that see how it's not working
46:55 - frame doctor visible script got parent
46:59 - wait for child frame that seems to be
47:01 - working ah I know why it is because I
47:04 - think it's hanging here so you're saying
47:05 - frame wait for child template but the
47:08 - template is now actually inside the item
47:10 - frame
47:10 - so we'll say frame wait for child item
47:13 - frame wait for child template okay so
47:20 - this is just because I've changed how my
47:22 - frame looks and that there you go
47:25 - they're appearing and I can it will
47:27 - enable and disable so that's very good
47:31 - and as I've said again you can play
47:32 - around with the UI grid layout if you
47:34 - want that padding maybe you want it to
47:37 - start from the center it's all up to you
47:39 - how you customize the stroke I've just
47:41 - shown you a way of how you could
47:42 - customize it but obviously when you do
47:44 - start customizing it you'd have to
47:46 - change your or your frame as well and
47:49 - your script set up to make sure
47:51 - everything's still being depended on
47:54 - it's obviously it was depending on the
47:56 - template being in the main frame we
47:58 - moved it so you to update those sort of
47:59 - things
48:00 - anyway that's the end of this video if
48:02 - you'd like to take the source code it's
48:04 - available to my channel members you can
48:06 - click the join button below to become a
48:08 - premium channel member and then that's
48:10 - available in my members discord server
48:12 - just a way to help support my channel or
48:14 - they're watching the video and copying
48:16 - out yourself from the vid is a great way
48:18 - to learn so thank you for watching don't
48:21 - forget to subscribe and like for more
48:22 - videos and obviously even the next one
48:25 - Cheers on by the way data stores are
48:28 - quite hard to debug if you're having
48:31 - problems with them I recommend using the
48:33 - data store editor plugin by crazy man 32
48:36 - to help you look into them if you have
48:38 - any but yeah thanks for watching and
48:40 - I'll see you in the next one
48:41 - Cheers