00:00 - okay in this video I'm going to show you
00:02 - how to use raycasting in Roblox so what
00:05 - is raycasting well raycasting is
00:07 - essentially the act of firing an
00:10 - invisible part and I say part in this
00:13 - context to make it easier to understand
00:15 - but we actually call it a ray and it's
00:17 - sort of like a projectile which travels
00:20 - in a certain direction until it hits
00:22 - something and this Ray it doesn't
00:25 - collide with anything it doesn't stop
00:27 - the game from doing anything you know it
00:29 - does you can't walk into a ray for
00:31 - example it's just an
00:33 - invisible um moving projectile which
00:36 - starts in one position all right it
00:38 - could be right here where the camera is
00:40 - and it could be instructed to go in this
00:44 - direction and it will travel in this
00:45 - direction until it hits something and
00:48 - when it hits something it will give us
00:50 - the information about what it is it is
00:52 - hit so you can sort of think of it as
00:54 - like a moving touched event that that's
00:56 - always active but moving in in One
00:58 - Direction sort of the opposite of of how
01:00 - a touched event currently works because
01:03 - with a touched event you're waiting for
01:05 - something else to hit the part whereas
01:08 - in this uh example with Ray casting
01:11 - you're waiting for the ray to hit apart
01:13 - so it's the ray that is moving so you
01:16 - can think of the ray as just being like
01:18 - an invisible projectile like a bullet
01:21 - that's moving in a certain direction and
01:24 - we tell the game where we want the ray
01:27 - to go using some parameters which I'm
01:29 - going to going to show you so how do you
01:32 - make array well array can be cast uh
01:36 - client and server I believe uh usually
01:39 - you use it on the client though
01:41 - because um usually you're you're
01:43 - building things like guns or click
01:46 - events um so that's where we're going to
01:48 - use it today I'm going to put a local
01:50 - script into start a GUI and let me first
01:54 - show you how to create array it's very
01:56 - simple all you say is game. workpace
02:00 - C on Ray cast like this this tells the
02:02 - game look we want to fire array so we
02:05 - need to tell it where to start where do
02:07 - we want to fire the ray from so let's
02:09 - create a few parts that are going to
02:11 - help us visualize this so we'll just
02:14 - create a part for our starter position
02:19 - we'll call this start you don't have to
02:21 - do this I'm just doing this as an
02:22 - example we're going to make sure it's
02:24 - anchored and we'll make it green right
02:27 - because it's the start and then
02:30 - what direction do we want our aray to go
02:32 - in okay do we want it to go in this
02:34 - direction do we want it to go in this
02:36 - direction well I'm just going to move it
02:38 - over here okay this is where we want the
02:40 - ray to go we want the ray to start off
02:43 - here and we want it to travel in the
02:46 - direction of the red part now it's not
02:48 - going to go to the red part it's going
02:50 - to go beyond the red part so it's going
02:52 - to go in this direction and it's just
02:53 - going to keep on going until it hits
02:55 - something okay but we need two parts in
02:57 - order to tell the ray where we we want
03:00 - it to start and what direction do we
03:02 - want it to go in so that's what I've
03:04 - done here I've created these two parts
03:06 - so let's go back to the local scripts
03:08 - and let's input these two parts as our
03:12 - origin and our
03:15 - Direction so what we've done here is
03:17 - we've said Okay I want the ray to start
03:20 - at this position you've got to pass in a
03:22 - position not an object so we're starting
03:24 - at this position and for the direction
03:27 - we're just going to put this for now
03:29 - okay the the finish
03:32 - part
03:33 - and what you could do instead instead of
03:36 - passing a position here you could pass
03:37 - an actual Vector 3 and that will just be
03:40 - the amount of studs in each direction of
03:44 - x y and Zed that it will travel from the
03:47 - start
03:48 - position so what I like to do instead of
03:51 - saying the finish
03:52 - position in order to get the direction
03:55 - because this isn't actually the
03:56 - direction this is just the position of
03:59 - the Finish point but we want to get the
04:00 - direction between this part and this
04:04 - part so to do that we can just subtract
04:06 - the positions so let's just create a
04:09 - variable here for
04:12 - direction and this will be the Finish
04:17 - now we don't want code assist the finish
04:21 - part its position subtract the start
04:26 - position and this will give us a vector
04:28 - of the direction that it's traveling in
04:31 - okay so it will give us this position
04:34 - right where it's looking at this part so
04:37 - it's saying this direction is where
04:38 - we're going to be traveling so now that
04:40 - we've got the direction and the start we
04:43 - have told the game okay we want the ray
04:45 - to go here but now we also need to give
04:47 - it a few more bits of information
04:49 - because we haven't told the ray where we
04:51 - want it to stop at we haven't said look
04:54 - stop when you hit this specific object
04:57 - stop when you hit a player stop when you
04:59 - hit the end of the world we haven't told
05:00 - it this information so we need to create
05:03 - something called raycast
05:05 - pams and this is almost like a table
05:08 - it's a specific data type and it has
05:12 - some details which we need to configure
05:14 - for our raycast so for example we have
05:18 - raycast prams do filter descendants
05:22 - instances and this is a table of objects
05:27 - which you either want to ignore or wh
05:30 - so if we were to put let's say we had
05:32 - something in the middle of our two parts
05:35 - here like a wall okay and our array is
05:38 - going to hit this wall now perhaps we
05:40 - don't want it to hit this wall we want
05:42 - it to ignore this wall well that's fine
05:44 - what we could do is we could put this
05:46 - into our filter descendants
05:49 - instances like this and if you were to
05:51 - supply something such as a folder which
05:54 - had loads of different instances inside
05:56 - of it then if you were to pass the
05:58 - folder well it should include all of the
06:01 - children by default okay you wouldn't
06:03 - have to say get children because it
06:05 - would include any descendants of that
06:08 - item so we will just put our wall as the
06:11 - filter descendant instance and then we
06:13 - have to tell the script well do you want
06:15 - us to ignore or whitelist these parts
06:19 - and when I say ignore it will simply
06:21 - ignore it if it hits these parts if we
06:23 - whitelist them though it means it will
06:26 - only uh finish the ray it will only
06:29 - trigger when it hits one of these
06:31 - instances that's what the difference is
06:33 - between ignore
06:35 - and and wh list but I don't think that's
06:39 - the
06:39 - actual um vocabulary that we have to use
06:43 - I think let's have a look uh raycast
06:46 - filter type okay so it's include or
06:48 - exclude so we want to exclude in this
06:52 - case because we don't want the ray to
06:55 - detect these objects so we're going to
06:58 - set that to exclude if you want wanted
06:59 - it to exclusively trigger when it hits
07:03 - this object you'd set it to be
07:05 - include and then finally you can say
07:08 - ignore water so that
07:11 - will if you said it to true it won't
07:13 - fire it won't end the ray if it hits
07:16 - some water okay some terrain water so I
07:18 - mean you can set that to true or false
07:20 - it doesn't really matter if you don't
07:22 - have any terrain you don't have to worry
07:23 - about it but this is our Ray and our Ray
07:25 - will now be cast and we will just add
07:27 - the ray cast perams as our third
07:30 - parameter now make sure when you're
07:31 - typing raycast params you're dealing
07:33 - with your variable which is lowercase
07:35 - raycast uh upper P for pams okay because
07:39 - you might accidentally say raycast pams
07:42 - and it will turn to Blue which is the
07:43 - data type we want the variable that
07:46 - we've just created okay so this will
07:48 - fire our array and we can store this as
07:51 - a variable and usually you call it
07:53 - raycast result you can call it whatever
07:55 - you like I'm just following how they do
07:57 - it on the Roblox docs and then how do
08:00 - you detect that your array has actually
08:02 - hit something well you can say if Ray
08:05 - cast
08:06 - results then if raycast results do
08:10 - instance then print raycast
08:14 - results do instance. name and this will
08:17 - print the object that it hits now let's
08:21 - just open up the output and let's create
08:24 - a second wall okay now this time we
08:27 - don't mind if it hits this wall so we're
08:30 - going to just call it second wall and
08:33 - this isn't a part of our filter
08:35 - descendants instances table so let's see
08:38 - what happens here if I just go and in
08:42 - fact what we'll do is we will do a task.
08:45 - weight of 5 Seconds here so we can see
08:48 - everything if there's no raycast result
08:50 - I'm going to print no result and if
08:52 - there's no instance then I'm going to
08:55 - print no
08:57 - instance okay let's have a look and see
09:00 - what happens
09:02 - here so we click on play and we wait for
09:05 - 5 seconds so the ray should fire from
09:07 - here should go through our wall and it
09:09 - should
09:12 - return uh second wall but it does not it
09:15 - returns finish because it's hit the
09:18 - finish part before it has hit the blue
09:21 - wall because it's traveling in the
09:24 - direction so that it will meet this part
09:27 - and it just so happens that it hits the
09:29 - finish part before it hit the second
09:31 - wall because guess what the finish part
09:34 - is in front of the second wall so I
09:36 - don't want it to class hitting my finish
09:41 - part as the end of the ray because
09:45 - that's merely a visualization that we've
09:47 - made so I'm going to add the finish part
09:51 - and also the start part because why not
09:53 - to the filter descendants instances
09:56 - which should mean the next time we fire
09:58 - the ray it is going to instead carry on
10:02 - traveling and it will hit the second
10:04 - wall but there's no result this time how
10:07 - strange let's have a look and see why
10:09 - that could
10:10 - be so ah
10:13 - yes so because we got the direction by
10:17 - subtracting the start position from the
10:19 - finish position we only have a vector
10:22 - which is going to travel to this part
10:26 - it's not long enough the direction that
10:28 - we've passed to our Ray doesn't go far
10:31 - enough to actually hit this wall because
10:34 - it goes to the length of the finish part
10:36 - because that's what we've calculated so
10:38 - the direction has given us essentially
10:42 - the angle that we want to move in right
10:45 - it say because if we were to supply the
10:48 - start part well we could be wanting to
10:50 - move in any direction by
10:52 - subtracting these two parts these two
10:55 - positions we have found the direction in
10:58 - which we want to travel however that
11:00 - direction Vector is only as long as the
11:04 - distance between these two parts because
11:06 - we've subtracted their positions so how
11:08 - can we keep the the direction the
11:12 - orientation right which is telling us to
11:13 - move in this direction but how can we
11:15 - extend it well what we can do is we can
11:18 - take this direction vector and we can
11:21 - turn it into a unit vector by saying do
11:24 - unit and putting these into parenthesis
11:26 - and what that does is it takes the
11:28 - vector and it reduces the length of that
11:32 - Vector in every single axis the X Y and
11:35 - Zed axis to just a multiple of one okay
11:41 - so imagine the
11:43 - direction is well let's print it out
11:46 - let's print out what the direction is
11:48 - okay and then let's print out direction
11:51 - do unit okay and if you type do unit it
11:55 - will say a normalized copy of the vector
11:57 - 3 has the same direction so it keeps
11:59 - that direction it tells us it it remains
12:02 - uh the direction so it tells us what
12:04 - direction we're going to travel in but
12:05 - it has a magnitude of one it has a
12:07 - length of one so let's click on play and
12:09 - see what happens so we have our normal
12:13 - Direction Vector that's telling us the
12:15 - direction then we have the unit Vector
12:17 - which is making it a number between 0
12:21 - and one
12:23 - essentially so what we've done is we've
12:25 - removed the magnitude we've removed the
12:27 - distance from this Vector but we've kept
12:30 - the direction in which it's pointed so
12:33 - it's essentially just a really really
12:35 - small Vector that's heading very very
12:37 - slightly in One Direction so what we can
12:40 - then do is multiply this by an amount of
12:44 - studs and then we can say I want you to
12:46 - travel in this direction for x amount of
12:48 - studs so we're basically extending the
12:51 - vector so we'll just set this back to
12:54 - unit but this time we'll multiply it by
12:56 - 100 and that means it's going to travel
12:58 - in Direction by 100 studs because we've
13:02 - brought it down to a value that's near
13:06 - one so that we can then multiply it by a
13:08 - distance okay so that we have an
13:10 - accurate distance
13:12 - representation yes we could have
13:14 - probably multiplied this by 100 but it
13:16 - would have given us a huge vector and
13:18 - the ray potentially would have been
13:20 - traveling for thousands and thousands of
13:22 - studs which isn't very performant right
13:25 - we only want it to travel for 100 studs
13:27 - if you wanted it to travel for longer
13:29 - than that you could obviously change
13:30 - that but in this case only 100
13:33 - studs and then what will happen and also
13:37 - what I'm going to do is I'm going to do
13:38 - a task. weit of two seconds here just to
13:40 - make sure these two parts have loaded in
13:43 - by the time we click on play if you get
13:45 - an error you might want to check that
13:47 - yourself and then click on one uh click
13:50 - on play sorry and if we just wait about
13:53 - 7 Seconds you should see that the aray
13:55 - will fire and it should hit the second
13:58 - wall because this time it's ignored the
14:01 - finish right it's still traveling in
14:03 - this direction because we got the unit
14:04 - Vector which has kept that information
14:07 - as part of our vector by saying unit
14:09 - we've just Shrunk the length of the
14:11 - vector from the distance between these
14:14 - two parts down to one and then we're
14:16 - multiplying that unit vector by 100
14:19 - which is bringing it back out to around
14:21 - here so the length of that Vector means
14:23 - that it's going to be able to hit this
14:25 - wall which it's done and it's returned
14:27 - the second wall now you can also print
14:30 - out the array cast
14:33 - result do position that will be the
14:35 - position where it ended up where it hit
14:37 - the part so if it is hit our second wall
14:41 - it will log the position where it is hit
14:43 - and just to show you we can create
14:46 - another part and call it
14:48 - hit and we can say game. workspace do
14:51 - hit. position equals raycast results.
14:55 - position just going to change these to
14:58 - task. weight of
15:00 - one and if we zoom out you can see that
15:03 - the pink part has appeared at the exact
15:07 - position where it has hit the second
15:10 - wall and you can see it still traveled
15:13 - in the same direction because we've kept
15:16 - that directional aspect with our unit
15:18 - vector and if the wall hadn't have been
15:20 - here it would have kept on traveling
15:22 - until it would have reached 100 studs
15:24 - and then it would have stopped so you
15:26 - can see how this would be used in a BL
15:29 - game for example with guns so the green
15:31 - part in this instance would be the
15:33 - position where your character is if
15:35 - you're holding a
15:36 - gun and it would the direction would be
15:39 - based on where your your camera
15:41 - is and then or where you've clicked
15:43 - sorry and then where you clicked might
15:47 - have been another player so the Bullet
15:49 - would have traveled in this direction
15:51 - perhaps it's hit a wall perhaps it's hit
15:52 - a player and then you would detect
15:56 - whether that raycast instance is a
15:58 - player if it is a player you'd then fire
16:00 - a remote event and on the server you
16:03 - deduct their health and you'd
16:04 - potentially check to see if it was a um
16:10 - you do a sanity check to ensure that the
16:12 - player could legitimately injure that
16:16 - player with a bullet perhaps they in the
16:17 - same vicinity they're not exploiting so
16:21 - that is how to do raycasting in Roblox
16:24 - uh you get the direction which in this
16:27 - uh in this example I've calculated the
16:30 - direction by subtracting two positions
16:34 - you could also just Supply a vector 3 of
16:36 - your own like this it's completely up to
16:39 - you but if you want to specify the
16:41 - direction I'd recommend turning it into
16:43 - a unit vector and then multiplying it by
16:46 - your distance so that is how you raycast
16:49 - in Roblox let me know if you have any
16:51 - questions please subscribe if you found
16:53 - this video helpful as well like the
16:56 - video and I'll see you in the next one
16:58 - thank you for watching