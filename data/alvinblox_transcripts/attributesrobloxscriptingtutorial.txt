00:01 - in this video I'm going to show you how
00:02 - to use attributes to set your own custom
00:05 - properties in roblo so we have lots of
00:08 - properties here all to do with different
00:10 - things about the appearance or behavior
00:12 - of an object but what if you wanted to
00:14 - store your own data about an object
00:17 - perhaps you wanted to store its health
00:19 - value or an object's price it's really
00:22 - really simple all you have to do is
00:24 - create an attribute so to create an
00:26 - attribute you can either do it manually
00:28 - or do it with a script
00:30 - uh I can click on this plus button down
00:32 - here and it would prompt me to add an
00:34 - attribute and set its type you can do
00:37 - that uh but personally I prefer to set
00:39 - them via script I mean it's up to you
00:42 - but let's just create a variable for a
00:43 - part I'm going to say gamew workpace
00:46 - part just to set it as my variable here
00:48 - and then I can say part set attributes I
00:51 - need to give my attribute a name so in
00:54 - this case we could call it health and
00:56 - I'll just set that to 100 and click on
00:58 - run select our little part down here and
01:01 - you'll see it has an attribute called
01:03 - Health which is now set to 100 now if I
01:06 - click on stop we can get an attribute so
01:10 - we can get the value of an attribute by
01:12 - saying part get attribute and we provide
01:15 - the name of the attribute and since we
01:18 - want to deal with this somewhere in the
01:20 - future we will probably store it as a
01:22 - variable so we now have access to the
01:24 - parts health and if we wanted to
01:27 - subtract from their health or change the
01:30 - health all we'd have to do is say part
01:33 - set attribute health and let's say we
01:36 - want to modify its current value we
01:38 - could just say health minus 100 okay
01:41 - because we've got the attribute already
01:43 - or we could just put part get attribute
01:45 - Health minus 100 either of these will
01:48 - work but what this will do is it will
01:50 - now deduct 100 from our health meaning
01:53 - when we click on run we should have zero
01:56 - Health on our part which we do there we
01:58 - go now that's not everything we can also
02:01 - detect when an attribute has changed so
02:04 - to do this we say part colon get
02:07 - attribute changed signal and we want to
02:10 - give the name of the attribute and then
02:12 - we can connect that event to a
02:16 - function and if you want to get the
02:18 - latest value of the health attribute we
02:21 - could just copy and paste our get
02:24 - attribute here and we can print Health
02:27 - attribute has changed to
02:30 - and we'll just set the health to a
02:32 - string so it doesn't error if it isn't
02:34 - there and this will print out when the
02:37 - attribute has changed and if we click on
02:40 - run and we go down to our attribute and
02:42 - we just change it in the properties
02:45 - panel you can see it's printing out that
02:47 - the attribute has
02:49 - changed if you wanted to get all of an
02:51 - object's attributes you could say part
02:55 - get attributes and this will return a
02:58 - dictionary of the attributes so you
03:00 - could then Loop through it you'll have
03:02 - the name of the attribute you'll have
03:03 - the value of the
03:05 - attribute like this and you could print
03:08 - out the name and the value just like
03:10 - this now I'll just set this to a string
03:13 - as well uh and we'll just set a couple
03:15 - more attributes I will just copy and
03:19 - paste up here yeah we could have a cost
03:21 - which could be you know 50 or whatever
03:25 - you could have an ID which you just
03:27 - might want to set to hello I don't know
03:30 - um but if we click on run you will
03:33 - notice that it's printed out all of our
03:35 - attributes here and
03:38 - finally I'll give you a quick example of
03:40 - how it works so let's imagine you had a
03:43 - function to buy an
03:46 - item okay
03:48 - and um let's say you just called it and
03:52 - you know and the object was called um
03:54 - staff I don't know and then you wanted
03:57 - to look up the object in replic at in
04:00 - server storage sorry okay and we'll just
04:03 - create our little staff item and we'll
04:06 - give it an attribute to call it price
04:09 - I'm just going to you won't you can't
04:11 - see this UI because it's not covered by
04:13 - my um recording software but I've just
04:15 - created a price attribute down here in
04:17 - the bottom right and we want to know
04:20 - whether the player can afford the item
04:21 - so let's just imagine they have an
04:24 - imaginary amount of
04:25 - coins and we're going to say if object
04:29 - get attribute price is or we'll say if
04:34 - coins is greater than or equal to the
04:37 - price then we'll print you can buy this
04:43 - item
04:45 - else we will print you cannot buy this
04:49 - item okay and we'll click on
04:52 - run and we have a little error it says
04:55 - attempt to call missing methods oh yes
04:58 - okay we will just instead of saying game
05:01 - instead of saying staff we'll say
05:02 - replicated storage. staff because it's
05:06 - an object and if we go to the output it
05:09 - says we can buy this item because we
05:11 - obviously have more than 100 coins but
05:13 - if we set coins value variable to 99
05:17 - you'll notice that we can't buy this
05:19 - item because it's just done a little
05:20 - check so yeah that's just a simple
05:23 - example to show you how attributes can
05:25 - be used in a game really really useful
05:28 - for tracking stuff um and I recommend
05:31 - you give them a try yourself so let me
05:33 - know if you enjoyed the video uh like
05:35 - comment and subscribe as always and I'll
05:37 - see you in the next one