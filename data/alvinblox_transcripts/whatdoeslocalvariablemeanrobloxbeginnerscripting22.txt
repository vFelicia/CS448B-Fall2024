00:00 - welcome to episode 22 in my scripting
00:02 - series today we're going to look at
00:03 - local variables so a local variable is a
00:08 - type of variable there's two types so
00:10 - you can have global and local and we use
00:15 - local pretty much all the time
00:17 - because they are accessed quicker by the
00:21 - script quicker than global variables so
00:24 - they're more efficient but what a local
00:27 - variable actually does is it's local to
00:30 - the code block that it was created in so
00:33 - that means that if I was to make this
00:37 - local variable if I was to define it
00:40 - inside of this function because this is
00:42 - a code block any code block is like an
00:45 - if statement for loop while loop
00:47 - function in pairs loop anything where
00:50 - you've got indentation and you've got
00:52 - code inside of something in between two
00:55 - lines such as you know in this function
00:58 - that's called a code block so the
01:02 - difference when it's a local variable is
01:05 - that you can only access that variable
01:08 - from the code block that it's inside now
01:11 - if you define a variable outside of any
01:14 - code blocks like this then you can
01:16 - access it from anywhere in the script so
01:18 - I could access it from this function I
01:21 - could access it later on if I wanted to
01:22 - add on to it you know I can access it
01:25 - from anywhere and modify it from
01:27 - anywhere but when you actually define
01:29 - the variable inside of a code block like
01:32 - inside of this function it's local to
01:35 - this function and when we say local to
01:37 - the function or local to the code block
01:39 - we say that it can only be accessed
01:40 - inside that code block so local to block
01:45 - means can only be accessed in that block
01:51 - so if we were to then say my variable
01:58 - you can see there's a red line
01:59 - underneath it and it's not Auto filling
02:01 - the rest of the code because it can't it
02:03 - doesn't actually it can't actually see
02:05 - that function because to the script
02:07 - we're outside of the function and
02:09 - because that variable is local to
02:13 - function we cannot access it because
02:15 - it's within the functions scope so when
02:19 - we say inside its scope it's inside of
02:22 - that code block and the variable can
02:25 - only be accessed from inside of that
02:29 - function because it's a local variable
02:32 - so it's only it's only going to be
02:35 - inside that function which is why it's
02:39 - faster to be acquired or obtained
02:42 - because it is integrated into the
02:45 - environment in which they were created
02:47 - that's the official definition from
02:49 - roblox and what that means is that
02:51 - because it's been created in the
02:54 - function it's going to be much quicker
02:56 - to access because we know it's inside
02:58 - there and we're only going to be
02:59 - accessing it from inside the function
03:01 - but what you need to know is that a
03:04 - local variable is can only will only be
03:08 - accessed and available to modify from
03:12 - the code block in which has been defined
03:15 - if you define a local variable at the
03:18 - top of your script were not at the top
03:20 - of your script but outside of any code
03:21 - blocks if this was not inside the
03:25 - function or inside a code block we would
03:27 - be able to access it from anywhere would
03:28 - be able to access it in the function and
03:31 - I know it has got a red line under it
03:33 - now and that's just because we didn't
03:35 - write the equals but we can access it
03:38 - from there you can see it's pre filling
03:41 - it for anywhere in the script so we can
03:43 - change your access it from anywhere
03:45 - because it's the scope that that
03:48 - variable is now in is it's at the top of
03:51 - the script so when it's at the top of
03:54 - the we're not at the top of the script
03:55 - but it's outside of any code blocks it
03:58 - can be accessed from anywhere so inside
03:59 - this function over here but when it is
04:03 - defined in a code block it's only
04:06 - available to be used in that code block
04:08 - so we could say my variable he calls my
04:12 - variable plus 10 in this function but we
04:18 - wouldn't be able to say my variable
04:19 - equals my variable plus 10 outside of
04:25 - the function you
04:25 - and error because it would say attempt
04:28 - to perform arithmetic so you're trying
04:31 - to do math on a variable a global that
04:37 - just means variable called my variable
04:39 - but it's an ill value because it hasn't
04:42 - been defined and it hasn't been defined
04:45 - because we're not actually running code
04:47 - in that function right now we're trying
04:49 - to access a variable that is created in
04:52 - a function and because it's local to
04:54 - that function we can't access it from
04:56 - outside of it and also we haven't even
04:58 - run the function yet so the variable
05:01 - hasn't even been created but if we did
05:04 - you know call this function still
05:07 - wouldn't work because we don't have
05:09 - access to the variable because it's
05:12 - local to that function and anything you
05:14 - want to do it would have to be within
05:15 - that code block but it's not just
05:17 - applicable to functions we could have an
05:22 - if statement so let's just say if two
05:26 - plus two actually unless create a
05:29 - variable called number set it to five if
05:37 - number equals five then local new number
05:45 - equals number times two okay so we're
05:50 - just creating a local variable if the
05:53 - number is five which it is but if it
05:55 - isn't five then we will just end the
06:00 - script but then what about if you want
06:03 - to access that new number later on and
06:06 - we can't we can't access it if you
06:08 - wanted to print it we can't do that
06:12 - because what we've done is we have
06:17 - defined the variable inside of this if
06:21 - statement so it's local to this code
06:23 - block this if statement so we'd be able
06:25 - to do it if we would be able to do it if
06:28 - we put the print inside of this if
06:32 - statement as well but if it was outside
06:34 - of the if statement then it would just
06:37 - say it's nil because that's what
06:39 - we can only access that local variable
06:41 - and there we go it has printed 10
06:43 - because we can access the variable new
06:46 - number when we're inside the code block
06:48 - but because we defined it using this
06:51 - local actually inside the code block we
06:55 - can only then access it because it's
06:57 - local to that black code block we can
06:58 - only access it when we are inside of it
07:02 - now that's what a local variable is and
07:06 - when you are defining variables outside
07:10 - of a code block like we are up here
07:12 - that's totally fine you can use local
07:15 - and it's good practice that you use
07:17 - local just because you've used local and
07:19 - you know in a code block doesn't mean
07:22 - that you will be restricted from using
07:24 - it when you are not in a code block and
07:27 - you know you're just writing it in your
07:30 - Swift with no indentation or anything
07:33 - there and you're not inside of a code
07:35 - block you'll be able to access it from
07:37 - anywhere so for example we could say
07:40 - number actually let's just do a local
07:44 - new number and define it outside of a
07:47 - code block I set it to zero for now we
07:50 - can then do new number equals number
07:55 - times two and then outside of the if
07:57 - statement we can print out what new
07:59 - number is and it will give us ten even
08:04 - though we haven't printed it inside the
08:05 - code block because the scope of this
08:08 - variable is the entire script now
08:10 - because we've defined it outside of a
08:12 - code block so we can access it from
08:14 - anywhere so inside of this code block we
08:16 - have set its value and then outside of
08:19 - it we've accessed its new value and
08:21 - printed it out but obviously if number
08:25 - was not five this if statement wouldn't
08:27 - run and the value of new number wouldn't
08:32 - be updated but it would still print out
08:34 - zero because it is defined within the
08:38 - scope of the script not inside the scope
08:40 - of a code block so we can still access
08:41 - its value now what is the difference
08:45 - between this and a global variable
08:47 - well a global variable is just a
08:50 - variable without the local
08:52 - and it's pretty much the same thing as
08:55 - having a local variable defined not in a
09:00 - code block so within the scope of the
09:02 - script so because you'll be able to
09:04 - access it from anywhere but the
09:06 - difference is let's say that we were
09:09 - actually defining the variable for the
09:13 - first time inside the if statement would
09:15 - still actually be able to access it from
09:17 - outside of the if statement it's
09:20 - currently printed nil that's because we
09:25 - have not set a number back to 5 so the
09:27 - if statement won't run but if we do set
09:29 - it back to 5 what will happen is new
09:31 - number will be set a value of 10 so
09:34 - double 5 and because we've created that
09:37 - variable inside the if statement but
09:39 - it's a global variable when we say
09:40 - global it means can be accessed from
09:42 - anywhere regardless of the scope or we
09:45 - know what code block is being created in
09:47 - because it's global we can access it
09:50 - from anywhere so you know just think
09:52 - about it is you can be in different
09:54 - countries and maybe a code block is one
09:57 - country and a different code block is
10:00 - another country but you can still access
10:02 - you know something regardless of what
10:05 - country you're in because it's global so
10:08 - you know like the internet you can
10:10 - access it from any country because it is
10:11 - global so if we run this it prints out
10:16 - 10 even though the variable hasn't been
10:20 - defined at the start it was actually
10:22 - defined within this code block but
10:23 - because it's global we can access it
10:25 - from anywhere so you may be wondering
10:27 - what's the whole purpose of using a
10:30 - local variable I don't really see any
10:32 - need for using it and that's a fair
10:35 - point when you get into more advanced
10:38 - game development and scripting work
10:40 - there are things where you will want a
10:42 - local variable and you will only want it
10:44 - to be accessed within a certain scope
10:47 - it's just important that you know what
10:49 - it is and what it's used what it can be
10:52 - used for right now but as a script so I
10:54 - don't really use global variables I just
10:57 - use local variables because if you do
10:59 - want that global variable that you know
11:01 - that global ability to access it from
11:04 - any way you can just still
11:05 - a local variable which is still faster
11:08 - and best practice to use but you don't
11:11 - declare it inside of your your code
11:13 - block you define it just before you
11:16 - enter that code block and that way you
11:18 - can still access it from anywhere later
11:20 - on in the script but you're still
11:21 - getting that optimization in your script
11:24 - because the local variables are just
11:26 - faster than the global variables that's
11:28 - just the way that it works on the on the
11:32 - back back-end of roblox studio and it's
11:34 - faster for your computer only by a
11:37 - little bit but still good practice to
11:38 - use local variables and another
11:41 - explanation from a user called unclear
11:43 - on scripting helpers org described local
11:46 - variables as having a specific scope
11:49 - that they're limited to so if the local
11:51 - variable was defined in this if
11:55 - statement then its scope would be the if
11:56 - statement and it's only limited to be
11:59 - accessed in that if statement so the
12:02 - local variable can only work inside of
12:04 - the area that it specializes in so
12:06 - because we have defined it in the if
12:08 - statement it is specialized to that I
12:10 - statement and can only be accessed from
12:12 - in there you can see when we changed
12:14 - this variable to be local if you look at
12:17 - this new number print here it suddenly
12:19 - goes blue and when it goes blue and we
12:21 - hover over it becomes unknown because
12:23 - the script can no longer access it
12:25 - because because it's local to that if
12:28 - statement it's only specialized to be
12:30 - used within that s statement so if we
12:32 - try and use it outside of it outside of
12:34 - that code block it's not going to work
12:36 - because that's not the area that it
12:37 - specializes in and here we have some
12:39 - more examples of code blocks like I said
12:41 - earlier it doesn't have to be an if
12:42 - statement or a function this is a code
12:44 - block so is the if statement the for
12:46 - loop the while loop the repeat loop and
12:49 - a function as well so these are all code
12:51 - blocks and you know it's easy to work
12:54 - out when you are using a code block as
12:56 - you can see in the example here and the
13:01 - reason why these local variables are
13:03 - faster is because when you have that
13:05 - local variable defined inside of your
13:08 - scope the script only has to look inside
13:10 - of that scope to find it so it doesn't
13:13 - have to search the entire script thus
13:15 - making it faster to find them so overall
13:18 - takeaway from this video
13:20 - is to just always use local variables
13:24 - and if you are going to want to use them
13:26 - later on in a script just define them at
13:31 - the you know not in any of these code
13:33 - blocks but define them as local and that
13:36 - way you can still access them from
13:38 - inside of these code blocks instead of
13:42 - actually defining them inside of them as
13:45 - being local so there we go that's all
13:48 - you need to know about local variables
13:50 - for now I am gonna link a article from
13:54 - the scripting helpers website in the
13:56 - description it was very very useful for
13:59 - you if you're still struggling with it
14:00 - so thank you very much for watching if
14:03 - you did enjoy the video please share it
14:05 - with anybody you know who would find it
14:07 - useful don't forget to subscribe by
14:09 - clicking the oven blocks logo in the
14:10 - middle of your screen and don't forget
14:12 - to like the video as well so that I know
14:14 - you want more of these because they've
14:16 - been getting quite a lot of likes
14:18 - recently which is good so that's why
14:19 - I've kept on doing them so that's
14:21 - watching and I'll see you in the next
14:22 - one
14:23 - Cheers bye