00:00 - hello and welcome to episode number 9 in
00:02 - my scripting series today we are looking
00:04 - at built-in functions so we already know
00:08 - how to create functions if you don't
00:09 - already then make sure you check out the
00:12 - previous videos I'll leave a link in the
00:14 - card in the top right corner or in the
00:16 - description because we've covered
00:17 - functions parameters arguments all that
00:20 - good stuff and it will be useful for you
00:22 - to know so a function we already know is
00:25 - a predefined bit of code that we can run
00:28 - later on in the script to save time to
00:32 - you know be efficient etc but there are
00:35 - also some functions which are predefined
00:38 - we don't need to define them they're
00:40 - already there because roadblocks have
00:42 - coded them in the backend and they are
00:45 - used to make life easier for us so let's
00:49 - imagine that they're just built into
00:51 - roblox Lua ok so behind the scenes
00:54 - already made the script knows what they
00:56 - mean but we can call them on in our
00:59 - scripts to do things which will just
01:03 - simply make life easier for us so I've
01:07 - picked out a couple here and if you
01:09 - wanted to find some built-in functions
01:12 - you can go to view click on the object
01:14 - browser select an object from the Left
01:17 - panel here and then on the right you
01:19 - will see these pink little icons and
01:23 - then what they mean is that that is a
01:25 - built-in function so the pink icons are
01:27 - built-in functions and then we've also
01:30 - got some blue ones and yellow ones but
01:31 - don't worry about those yet we're only
01:33 - interested in the built-in functions
01:35 - which are the pink ones and each object
01:39 - has its own built-in function there will
01:42 - be some built-in functions that only
01:43 - apply to certain objects and we can call
01:47 - them to do things and some of them are
01:50 - quite self-explanatory you won't need to
01:52 - know all of them you only need a couple
01:54 - for now some of them will you will not
01:57 - understand so don't worry about it but
01:59 - we're gonna take some easy ones today
02:01 - such as clone and destroy I'll let you
02:04 - work out what they do quite
02:05 - self-explanatory so we've got the
02:07 - destroy built-in function which we can
02:11 - use on an object we
02:12 - all it on a certain object say for
02:14 - example this part that we have in the
02:16 - workspace we could call our built-in
02:18 - function called destroy on it and guess
02:20 - what is going to delete the part from
02:23 - the game we've got the clone built-in
02:25 - function that is going to create a
02:27 - duplicate of the object which we call it
02:30 - on and you can see where this is going
02:32 - to go so we're going to focus on the
02:33 - first two probably the easiest built-in
02:36 - functions out there so how do we use
02:39 - these built-in functions obviously we've
02:41 - not defined them and to call a normal
02:43 - function we just say destroy right so
02:46 - maybe you're thinking that we we put the
02:48 - parts reference in here so we say game
02:50 - dat or its place Lockhart no that's not
02:53 - how it works because we can't pass any
02:56 - arguments to this function because it
02:58 - doesn't take any what we're gonna do to
03:00 - destroy an object and now this is this
03:03 - this type of function there are two
03:05 - types of built-in functions so our
03:07 - destroy and clone and clear all children
03:10 - which we'll get to later but these ones
03:13 - here are all about doing something to a
03:15 - particular object so for example we are
03:18 - trying to destroy this part so what
03:21 - we're doing is we are calling this
03:22 - function on a specific object so in that
03:25 - case it's called a member function now
03:28 - these ones down here aren't to do with
03:31 - any objects or anything we can just we
03:32 - can just literally say waits or prints
03:34 - we don't have to call wait on a part or
03:37 - on objects because they're there their
03:41 - purpose is not related to any objects in
03:43 - the game so they are just global
03:44 - functions global built-in functions so
03:48 - we have two types but they're all
03:49 - built-in functions so to use the member
03:53 - functions the ones like destroy clone
03:55 - and clear all children that are actually
03:57 - going to do something to an object so
03:59 - either destroy it clone it etc we can
04:02 - just firstly get the get the item get
04:05 - the objects reference in the game so in
04:07 - this case the game got workspace got
04:10 - parts okay that is the reference to the
04:12 - object in the game we have now accessed
04:14 - that part but what we gonna do we want
04:17 - to destroy it so we say : and now you
04:21 - can see that we've done that : that just
04:23 - basically means that we're gonna do
04:24 - something we're going to
04:25 - a function on this part a built-in
04:27 - function and the Swift has seen that
04:29 - we've put the colon in there and then
04:31 - the intellisense which is basically
04:33 - finding trying to determine what you're
04:36 - going to say and try to pre-fill your
04:38 - next or what you're trying to write it
04:41 - shows up all of these different built-in
04:44 - functions so we're just going to destroy
04:47 - and you can see it's added destroy with
04:50 - our brackets on the end you have to have
04:52 - the brackets on the end you can't just
04:54 - say destroy we say we have the brackets
04:56 - on the end because it tells the script
04:58 - that we are running a built-in function
05:00 - on it
05:00 - so you get your reference of the parts
05:02 - or your objects once you've got your
05:04 - objects you can then call a built-in
05:07 - function on it so if we run this script
05:10 - look at this part hopefully it will get
05:13 - destroyed
05:14 - there we go it's gone we run the game
05:17 - and immediately as we as the game
05:19 - started this script ran itself and it
05:23 - basically got the part and destroyed it
05:25 - so simple very very easy stuff so same
05:30 - goes for the clone as well we can just
05:33 - say clone and our pair of brackets on
05:36 - the end so it knows it's and we're
05:38 - running a function on this part run the
05:41 - game and what do you think is gonna
05:42 - happen there is actually two parts now
05:46 - in the game you just can't see them and
05:47 - that is because what's happened is it's
05:50 - created a clone of this part we've ran
05:54 - the the inbuilt function but what's
05:58 - happened is the the script has cloned
06:00 - it's done the right thing but it doesn't
06:02 - know where to put this clone so we've
06:05 - cloned in objects and it's probably out
06:08 - there somewhere
06:09 - it just doesn't know the script doesn't
06:11 - know where to put this so it's not going
06:13 - to put it in the workspace because we
06:14 - haven't told it to we haven't told the
06:16 - clone of this parts where to go so what
06:20 - we need to do is we need to set this as
06:23 - a variable so this function what it's
06:26 - going to do and we learn about this in
06:27 - previous videos we can return data from
06:31 - a function so let's say we had a
06:33 - function
06:34 - to create a part okay we would run the
06:37 - function it would create the parts but
06:39 - then if you wanted to do something to it
06:41 - afterwards like change of property we
06:43 - would we wouldn't be able to because we
06:44 - haven't got that part that we created in
06:46 - the function so we can return it and
06:49 - return it back to where we called it
06:51 - from and when we do that we then have a
06:53 - reference to that part and it's the same
06:56 - thing here we've cloned the parts but we
06:59 - haven't actually saved a reference to
07:01 - that part that part is you know it sits
07:04 - outside of any service it's not in the
07:06 - workspace because we don't know the
07:07 - script doesn't know where to put it so
07:09 - what we need to do is we need to save it
07:12 - will not save it but tie it to a
07:14 - variable so we could have a variable
07:15 - called myclone and then what's happening
07:19 - is we're calling the clone function and
07:21 - what's the what's happening is it's
07:23 - making a clone of this part and then
07:25 - it's automatically gonna get returned
07:27 - back to this variable because the clone
07:31 - inbuilt function returns the cloned part
07:35 - the cloned object back to where you
07:38 - called it from automatically because you
07:40 - can't say clone it and then dot parent
07:43 - equals workspace or I want the clone to
07:47 - have transparency of one you can't do
07:49 - that for loads of property you can't
07:53 - just set its properties like that so you
07:55 - have to set it as a variable it creates
07:58 - a copy of this part returns it so that
08:01 - we now have a variable reference of the
08:04 - cloned part because we can't just clone
08:06 - it and say game don't work space dot
08:08 - part too it's gonna have the same name
08:10 - and it's not even gonna be in the
08:11 - workspace yet so we have to have it
08:13 - referenced as a variable and now that
08:16 - we've done that we now have a way to
08:18 - access this cloned part and we can say
08:21 - my clone dot parents equals work space
08:24 - or games or work space so what's
08:27 - happened is it's cloned it alright but
08:29 - it just doesn't know where to put it so
08:30 - it's outside of the game currently so
08:33 - now if we run it again again you'll see
08:36 - one part but that's because it's been
08:38 - cloned and a clone of the part is an
08:41 - exact replica an exact duplicate so it's
08:44 - going to be in the same position right
08:45 - let's open up the workspace and
08:47 - we have two parts an exact clone or the
08:50 - other in the same position you can drag
08:52 - them away we now have two parts so
08:55 - whenever you're saying clone on an
08:57 - object you have to have it stored as a
09:00 - variable and that way you can then set
09:03 - its parent property to wherever you want
09:06 - it to go so yes it creates a clone but
09:10 - it doesn't know what to do with it
09:12 - so that's why you have to have it as a
09:13 - variable you don't have to do that with
09:16 - destroy you'd you have to do that at all
09:17 - it's just with the clone function
09:19 - because obviously you're creating a new
09:21 - object from this part and then you just
09:24 - need to tell the script where it goes
09:26 - so we've done destroy we've done clone
09:28 - congratulations you now know two
09:30 - built-in functions so not as hard as you
09:33 - think so
09:35 - we've got one more member function to go
09:38 - one that I'm just gonna show you and
09:40 - you're probably not going to use it yet
09:43 - but good to know anyway and it's called
09:45 - player all children and what this is
09:47 - going to do is when you call it on a
09:51 - part or an object because it's a member
09:53 - function so we call it on an object
09:55 - let's say for example we have a part and
09:58 - inside of this part I don't know why
10:00 - we've got to weld in there let's get rid
10:01 - of that but inside of the part we had
10:03 - loads of things in it okay so we had
10:05 - maybe a texture or a decal or a clip
10:07 - detector or maybe we even had a fire
10:12 - particle right or some awesome smoke
10:15 - okay all of these things the click
10:17 - detector the fire the smoke the decal on
10:19 - the texture they are children of the
10:22 - part because we have put them inside of
10:25 - it you can see here in the hierarchy in
10:27 - the Explorer
10:28 - we can see that the clip detector fire
10:30 - smoke and all these thick children are
10:33 - gonna like indented you can see it there
10:35 - inside that part we can collapse it we
10:37 - can open it we can see that these things
10:38 - are inside this part so in that case
10:41 - these things are the children of that
10:43 - part and the part is the parent of all
10:46 - of them
10:46 - the think of it like a like a parent and
10:49 - a child right the these are the children
10:51 - these are the things that this part is
10:52 - looking after the the things that are
10:54 - inside that part whenever we move the
10:56 - parts it goes with them because they're
10:58 - inside of them
11:00 - these things are inside at the part so
11:02 - there are children and the part is the
11:05 - parent of them so when we say clear all
11:07 - children on an object so what we're
11:09 - saying is delete anything that's a child
11:13 - of this object so delete anything inside
11:15 - the part so when we say game got
11:17 - workspace dot parts and then colon
11:21 - because it's an inbuilt function the
11:22 - calling of function on this part when we
11:24 - say clear all children it's going to
11:26 - delete everything inside of the pot so
11:29 - the click detector the fire at the smoke
11:31 - the decal the texture and the weld let's
11:33 - run the game and see what happens so as
11:36 - soon as it runs as soon as the script
11:38 - starts boom all the particles are gone
11:41 - and you can see the part has no more
11:43 - children have all been destroyed because
11:45 - we have called clear all children so
11:48 - that was another interesting inbuilt
11:49 - function for you we're just going to go
11:52 - over the last two now and these are the
11:54 - global ones so weight weight is probably
11:58 - the easiest one off them all what it
12:00 - does is you can take an argument in this
12:04 - one so when we say you can take an
12:06 - argument we can pass some data to this
12:08 - function and that's going to change or
12:12 - impact the way it works so in this case
12:14 - we can pass a number of seconds to the
12:17 - weight function and then it's going to
12:18 - delay the script for that amount of time
12:20 - so if we set 5 seconds so wait 5 it's
12:24 - going to pause the script for 5 seconds
12:27 - and it's not going to run anything that
12:29 - comes after this weight statement until
12:32 - 5 seconds are up
12:32 - now let's test this out and if we were
12:36 - in the game we can see we've got our
12:38 - children but after 5 seconds you can see
12:41 - they all get deleted so what's happened
12:43 - is the script has waited for 5 seconds
12:46 - before it has carried on and that is
12:48 - what weight allows you to do it allows
12:49 - the script to stop and wait for a number
12:52 - of seconds before it continues so it's a
12:54 - nice way to have some delays or to you
12:58 - know if you had loads of lines of code
12:59 - ring at once and you want wanted to see
13:01 - a difference or wanting to see something
13:03 - change that's where you would use a
13:05 - weight
13:06 - function or even he had around he might
13:09 - want to wait 50 seconds each round and
13:12 - that's gonna be the length around you
13:13 - get around coming from so that is the
13:15 - weight built-in function and we have one
13:18 - last built-in function which you
13:20 - probably don't know why we use it but
13:22 - it's used all the time in scripting and
13:25 - it's called print it allows you to print
13:27 - a message to the output window down here
13:29 - you may be thinking it's a bit pointless
13:30 - but if we have a script that isn't
13:33 - working and we want to determine where
13:36 - it's breaking where it's where it's
13:37 - erroring and what's not working we can
13:40 - use printing to send messages to the
13:42 - output at certain times to see where the
13:44 - script stops working or where you know
13:46 - it does work so printing it lets you
13:48 - send a message to the output and you can
13:51 - send data type so if you wanted to send
13:53 - some text we would send a string and I
13:54 - would have it in in speech marks so we
13:57 - could say hello guys and then after the
14:00 - wait five seconds it's gonna print out
14:03 - hello guys in the output so let's have a
14:05 - look you should be doing it around about
14:06 - now there we go is printed it out so
14:09 - it's a way to send a message from the
14:10 - script but you have to say print you can
14:13 - see how it's also in in blue the weight
14:16 - and the print because they are global
14:18 - functions that it's printing out these
14:21 - messages you can also print out numbers
14:23 - but you can't print out things like
14:25 - games or workspace top part because
14:27 - that's an object it's not a piece of
14:29 - text if you wanted to print out game dot
14:32 - workspace dot part you'd have to put it
14:34 - in a string but there we go we've done
14:38 - five in built functions built-in
14:41 - functions however you want to call them
14:42 - in this video probably the most
14:44 - important ones and the ones you're going
14:45 - to be using the most in scripting there
14:48 - are way more built-in functions but you
14:50 - don't need to know them yet we'll be
14:51 - going over them another day so there you
14:54 - go and don't forget to use star code
14:56 - Alvin blocks when you buy premium or ro
14:59 - books on roblox and that way I'll make
15:03 - five percent of your purchase is a great
15:05 - way to support the channel at no extra
15:06 - cost if you want to become a member as Y
15:09 - you can click the join button underneath
15:10 - the video you get loads of cool perks at
15:12 - different tiers though check that out
15:14 - the next video will be on your screen
15:16 - and now
15:17 - and also the playlist as well if you
15:19 - want to go back and see some more videos
15:21 - don't forget to subscribe click the
15:23 - album locks logo in the middle of your
15:24 - screen like and share the video with
15:27 - anybody who you think this would be
15:28 - beneficial too and I'll see you in the
15:31 - next video thank you for watching