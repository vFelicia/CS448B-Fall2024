00:00 - everyone and welcome to the first
00:01 - episode in my brand new series this is a
00:04 - roblox advanced scripting series now
00:07 - I've asked you guys for video
00:08 - suggestions for this series and I've got
00:11 - a lot to get through in this series so
00:13 - it's gonna be a good one and we're
00:14 - kicking it off with module scripts now
00:16 - this series isn't for beginner roblox
00:19 - descriptors if you are new to roblox
00:21 - scripting and game development I
00:23 - recommend you watch my 2020 beginner
00:26 - roblox scripting tutorial series I did
00:29 - start it at the end of last year
00:31 - although it does still work in 2020 and
00:33 - in years to come as well it will still
00:36 - work so I recommend you go and check
00:37 - those out there are currently 23 videos
00:39 - although for this topic module scripts
00:42 - the key things that you need to know so
00:44 - the key videos that you should watch are
00:46 - going to be functions which is on the
00:47 - sixth episode of that series function
00:50 - parameters and arguments which is
00:52 - episode seven and also returning which
00:54 - is episode number eight so I'd recommend
00:57 - you check those out already if you
00:58 - haven't although we will kind of touch
01:00 - on them in this video so if you've got a
01:02 - basic knowledge of scripting and this
01:04 - should be good for you so module scripts
01:07 - are very very useful in coding and a lot
01:10 - of people don't understand them and
01:12 - think they're really complicated and I
01:14 - did as well when I first started using
01:16 - them but now I actually realize how
01:18 - useful they can be and they're really
01:19 - really useful for organizing your code
01:21 - and also as part of something called the
01:24 - DRI principle so Dr why don't repeat
01:28 - yourself and you don't repeat yourself
01:32 - principle is because sometimes you're
01:34 - writing code and you need to use that
01:37 - code over and over again so instead of
01:38 - writing it loads of times in your
01:41 - scripts you can use a function and that
01:44 - function you can call it at different
01:45 - times module scripts are basically an
01:47 - extension of that in that you can write
01:49 - functions in a module and you can call
01:52 - them from other scripts so I could have
01:55 - one function which does something and I
01:59 - might want to call it from different
02:00 - scripts so instead of having to declare
02:02 - that function in every single script I
02:04 - could declare it once in my module
02:07 - script and then I wouldn't need to write
02:09 - it anywhere else because I could just
02:10 - call it from any
02:13 - but because it's in the module script we
02:16 - can access it from there so we only need
02:19 - to write a function once and we can call
02:22 - it from multiple scripts now also it's a
02:25 - good way to organize your code because
02:27 - you could have your most important
02:29 - functions in your module and then you
02:31 - could have like a game logic which is
02:33 - what I covered in my piggie series so I
02:36 - have all my important functions in my
02:37 - module and I can call them from my
02:40 - script so it reduces the size of my loop
02:43 - scripts like my game round so if I just
02:46 - had a function for the intermission
02:47 - choosing the player to be the murderer
02:49 - teleporting players in this module
02:51 - instead of having to make this main
02:55 - script where I'm going to be calling all
02:57 - these functions really long it because
02:59 - sure and you'd be able to see step by
03:02 - step the program in a more organized way
03:05 - because you're not having to have lots
03:08 - of code in there anyway so how do you
03:11 - use module scripts well a module script
03:14 - works very very simply in that in the
03:18 - module script when you first create one
03:19 - you'll see that you've got this table
03:21 - variable so this is a variable it's
03:23 - called module you can call it whatever
03:25 - you like it doesn't matter but what's
03:27 - important is that the value of this
03:30 - variable is a table and at the bottom of
03:34 - the script is being returned
03:35 - so we're saying return module but what
03:38 - does that mean well we're going to be
03:41 - accessing this module script from
03:43 - different scripts so we need to sort of
03:46 - download the contents of the module
03:49 - script into the script where it's being
03:51 - where we're going to call these
03:52 - functions from because we're not calling
03:54 - the functions from inside the module
03:56 - script we're going to be calling them
03:57 - from a different script so we need to
04:00 - somehow access all of the functions and
04:03 - things inside of the module script so to
04:07 - do that we need to require it so very
04:12 - very simple you say require and then in
04:15 - these brackets we need to tell the
04:18 - script where the module is we need to
04:20 - give a path to the module now it's in
04:22 - server script service so you could
04:24 - either say game
04:25 - dot service crypt service module script
04:28 - or you could just say script dot parents
04:30 - dot module script okay one of the most
04:34 - common mistakes with module scripts is
04:37 - people instead of saying require they
04:39 - just write the path to the module script
04:41 - and you can't do this I'll explain why
04:43 - later on so because we want to have a a
04:46 - reference to this we want to store it
04:49 - we're going to store it as a variable so
04:51 - local and you can call it where if you
04:53 - want I'm just gonna call it my module
04:55 - and the this variable here it doesn't
04:59 - have to have the same name as your
05:00 - module variable in the module scripts
05:02 - that doesn't matter all you need to do
05:04 - though is call the require function is
05:08 - the built in function to roblox tell the
05:11 - script where your module script is and
05:12 - now you will have access to the
05:16 - functions inside that module script
05:18 - you'll be able to run them from this
05:20 - script here so what we've done when
05:24 - we've called this require function the
05:26 - script has looked at this module script
05:28 - and it's returning everything inside
05:32 - this table back to our script as this
05:35 - variable so this variable my module is
05:37 - now going to be a reference to this
05:40 - module variable in the module script
05:42 - which has been returned back to the
05:44 - script so whenever you say require the
05:47 - scripts basically looking up the module
05:49 - script and it's going to send back
05:52 - whatever's in this table and so you
05:54 - might have guessed inside this table
05:56 - we're going to have functions because we
05:59 - can store functions inside the table
06:01 - just like we can store any other type of
06:03 - data be it a string a number a boolean
06:06 - you know an object it doesn't matter you
06:09 - can have function as well store it in a
06:12 - table so we're gonna have our functions
06:14 - stored in the table let's just imagine
06:16 - that these are functions functions that
06:20 - will run a code we will write these
06:24 - functions in the module in their module
06:25 - script but we'll put them inside the
06:27 - table and then when we return this table
06:29 - back to wherever it's been required from
06:32 - so in this case the script what's going
06:36 - to happen is my module the variable
06:39 - actually going to hold that table of
06:42 - functions so we can now call these
06:44 - functions from the main script which is
06:48 - outside of the module so how do we put
06:51 - the functions inside the table was very
06:53 - simple firstly what you want to do is
06:56 - say module or the name of your variable
06:59 - the name of the table and then we have
07:03 - to do a dot and we write the name of our
07:06 - function so well it's kind of like a
07:10 - variable because say I wanted to call it
07:14 - my funk okay
07:16 - that's what I would write if I wanted to
07:20 - call the function
07:21 - okay so module dot my funk equals you
07:26 - want it to be equal to a function okay
07:28 - and now you can see it's add at the end
07:31 - we could write some code inside of here
07:34 - okay so when we call this function is
07:38 - going to print hey there this is the my
07:40 - func function now you may be wondering
07:44 - hold on it's not in the table because
07:46 - it's not within these brackets but it
07:48 - actually is because what we've basically
07:50 - done is we've created a new object by
07:53 - using this this variable we've quotas
07:55 - new index in the table called my thunk
07:58 - and reset it to be equal to a function
08:01 - so now inside the table we've added this
08:05 - function so when we return that table
08:08 - back to wherever it's been required from
08:11 - if you wanted to execute this function
08:13 - we would firstly need to get the table
08:16 - which is gonna be my module and if we
08:19 - say dot you can see myfunc has appeared
08:23 - in the intellisense so it's it is smart
08:27 - because script knows that we've required
08:30 - and we've kind of downloaded and
08:32 - so-to-speak the contents of the module
08:35 - and it sees that there's a function in
08:37 - that module table called myfunc so if
08:39 - you just press enter or write out my
08:42 - funk you can see as the brackets so it's
08:45 - called the function so to call them a
08:47 - function inside the module you firstly
08:50 - have to have the
08:52 - function sorry the variable of the
08:54 - required module script so you've got
08:56 - access to that table and obviously that
08:58 - table has the different functions inside
09:01 - of it because we gave it a name my funk
09:04 - and we set it equal to be this function
09:06 - here what's happening is we can then
09:09 - call it from outside the module script
09:12 - so if you now run the game it prints out
09:17 - hey there this is the my func
09:19 - function now something I must add is
09:22 - that when you are using a module scripts
09:24 - the code isn't actually running on the
09:28 - module scripts is running in your script
09:30 - now I'm going to show you an example of
09:33 - this now you probably know that we have
09:35 - client code and server code in roblox in
09:38 - that code can either run on a player's
09:41 - computer in our local scripts in their
09:43 - service such as the player GUI or
09:45 - backpack or even in their player objects
09:48 - or it can run on the server in a place
09:50 - such as the service script service or
09:52 - server storage so model scripts they can
09:57 - either run well they run wherever
10:00 - they're being required from so if you
10:01 - require a module script which is in
10:04 - replicated storage which is a service
10:06 - which can be seen and accessed by the
10:08 - server and the client
10:09 - if you were to require that in the
10:12 - client in a local script it would be
10:14 - running on your computer but if you were
10:15 - to require the same module from the
10:17 - server that code would be running on the
10:19 - server okay so the whole require thing
10:23 - is basically running the code in the
10:26 - module script within that script so if
10:28 - it's a service width it's going to be
10:30 - running on the server if it's a client
10:32 - script it's in local scripts in
10:34 - somewhere like player GUI it's going to
10:36 - be running on the client and I'm going
10:37 - to show this to you so if we call it
10:39 - from the server script service but we
10:41 - also just take this code and we put it
10:43 - in a local script in started GUI watch
10:49 - what happens when I play the game
10:53 - oh whoops my bad we transferred it to
10:56 - replicator storage one moment okay
11:11 - brilliant so if we just ignore these
11:14 - plugin errors we have two prints and you
11:17 - can see the green one when it's green it
11:20 - means that is run on the server when
11:22 - it's blue it means it's run on the
11:23 - client so what's happened is the green
11:27 - one if you click it is taking us to the
11:30 - is green because it's run on the server
11:32 - so it's run in the script in service
11:34 - script service but in the blue one it's
11:37 - been run in the client because it's blue
11:40 - so it's been running the local script so
11:42 - it's not actually running in in the
11:44 - replicated storage in this module script
11:46 - it's it's running wherever you require
11:50 - it to so it's I guess an analogy which I
11:56 - don't think it's the best but it's a
11:59 - good way to try and explain it is this
12:00 - as if I if I was to put a tutorial or
12:04 - some instructions on the Internet of how
12:06 - to bake a cake right and I just
12:09 - published it on my website but then
12:11 - loads of people around the world in
12:13 - different countries were downloading
12:15 - this recipe or these instructions and
12:18 - actually executing them in their own
12:21 - kitchens in their own houses right
12:24 - they're using my instructions but
12:25 - they're not running them in my kitchen
12:28 - they're doing it in their own kitchens
12:29 - in their own homes but it's just that
12:32 - I've supplied the the instructions the
12:35 - recipe and you can think of the recipe
12:37 - as being the module scripts and the
12:39 - individual scripts that are requiring
12:41 - and calling that the module script as
12:43 - being the people all around the world
12:45 - downloading the recipes and actually
12:48 - following them and using them in their
12:50 - own kitchens so it's not that it's it's
12:54 - just running for me it's not running in
12:57 - the module script it's people are taking
12:59 - the recipe and using it and following it
13:02 - in their own kitchens across the world
13:05 - for
13:06 - that's one recipe or instruction was
13:09 - posted online so everybody can access it
13:13 - so it can be accessed from multiple
13:14 - place and multiple places around the
13:16 - world so just kinda in that sense the
13:19 - mortal script is a good way for you to
13:22 - put code which you're going to execute
13:24 - you know that you're going to run it a
13:27 - lot over and over again especially in
13:29 - different scripts so instead of
13:31 - repeating yourself and writing that same
13:32 - function over and over again in loads of
13:35 - different scripts you can write it once
13:36 - in your module and you can call it from
13:39 - lots of different places so let me give
13:41 - you a practical example of this okay so
13:45 - an example of this is if you have a
13:47 - round based game it's likely that you're
13:49 - gonna be want to be using countdowns a
13:52 - lot and so you'd be need to you need to
13:54 - be using for loops so you might have a
13:56 - countdown for the intermission a
13:57 - countdown until the next player gets
14:00 - chosen countdown for players to hide if
14:03 - you've got a hide and seek game a
14:04 - countdown for then the round that's in
14:06 - progress before it ends all sorts of
14:09 - countdowns so you can consolidate this
14:12 - and you might need to count down in
14:14 - different scripts as well so in my
14:16 - module I've created a function called
14:18 - countdown and I've got four parameters
14:20 - it's going to be the number to count
14:22 - down from the number to stop at the
14:24 - incrementer so the number of seconds of
14:28 - delay each each time and the prefix as
14:32 - well to print before thee because it
14:34 - will print out the countdown so the
14:36 - prefix could be like intermission and
14:38 - then game in progress so it will print
14:40 - before the time left so now that I've
14:43 - created this function to countdown I
14:45 - know like no I no longer have to do lots
14:49 - of for loops in my main script where I'm
14:53 - calling it from all I need to do is just
14:55 - call this function and it's really neat
14:57 - just one line I can pass all the
14:59 - information I need to my function so I
15:02 - want to count down from 30 to zero going
15:04 - down by one each time waiting one second
15:07 - and then the prefix is going to say
15:09 - intermission before the I number so you
15:12 - can see I just call the function once
15:15 - it's completed it will move on to the
15:16 - next thing and then it will countdown
15:18 - 100 so I'm going to actually change this
15:21 - to 10 seconds just so that you won't
15:24 - have to wait as long but if we open up
15:26 - the output this was from when I just
15:29 - tested it you can see it counts down
15:31 - from 10 9 8 7 6 5 4 and this is running
15:36 - in the server script as well it's just
15:38 - been required from the module obviously
15:40 - and then it starts counting down from
15:42 - 100 so you can see 1 for loop in one
15:45 - function and yet we're able to use it
15:48 - over and over again not just for the
15:49 - intermission countdown but also for the
15:51 - round in progress and you can see how it
15:53 - saved these lines of code and it's more
15:55 - efficient because we've only had to
15:57 - write out the for loop once but we're
15:59 - using it over and over again in that
16:00 - function so very very useful on module
16:03 - scripts I'm now going to show you
16:06 - another way of putting functions in this
16:09 - table which might make it a little bit
16:11 - easier for you to understand so you
16:13 - don't have to do this way you can do the
16:15 - the other method I just showed you
16:16 - you're saying module dot and injure the
16:18 - name of the function equals function so
16:20 - if we just expand this table a little
16:21 - bit so we can work with it very simple
16:25 - all we need to do is write the name of
16:26 - our function so this could be countdown
16:31 - again and we just say equals function
16:34 - like this okay so we've created a object
16:39 - on index in the table called countdown
16:41 - so that we can reference this function
16:42 - and we've made it equal to this function
16:44 - here if I was to do prints executed and
16:47 - we were to just call the countdown
16:51 - function and run it again
16:56 - it would say executed so same sort of
16:59 - thing ready you know whichever way you
17:01 - do it the function is still going to be
17:03 - put inside of the table still going to
17:06 - have the same name so you can call it so
17:09 - that's just another way of putting
17:12 - functions in your module table and the
17:14 - reason people return the people returned
17:17 - tables well the reason the module
17:20 - variable is a table is because it's
17:22 - likely you're going to want to return
17:24 - multiple functions to the script if you
17:27 - only had he didn't have a table you
17:29 - would only be able to return one value
17:31 - so
17:32 - function whereas you might have multiple
17:34 - functions in your module script that you
17:36 - want to execute so so you can have
17:40 - multiple functions so I could call
17:42 - another one test equals function but you
17:45 - can see there's a red line underneath it
17:46 - and that's because in a table you have
17:49 - to separate each object with a comma or
17:51 - a semicolon like this so when you do
17:56 - that the red line will go away and you
17:57 - now have two functions so you could call
18:02 - the count down one or you could call the
18:05 - test one as well doesn't matter so you
18:08 - can see they both worked so when you're
18:12 - adding a new function to your table like
18:15 - this obviously you need to put the comma
18:17 - in but if you're just creating a new
18:20 - function in the previous way that I
18:23 - showed you like this okay if you wanted
18:31 - to create another one afterwards you
18:32 - wouldn't have to add a a comma because
18:35 - it's essentially doing it for you when
18:37 - you're saying module test the module
18:39 - countdown it's inserting it into the
18:40 - table for you you know we can't see it
18:42 - right now because the table is blank to
18:45 - begin with but then we insert into the
18:47 - table with this function and then we
18:49 - also insert another one so it adds it
18:51 - for you and the name just gives it a
18:56 - really simple way for us to look up and
18:59 - locate each function when we want to
19:01 - call it as well from the script so just
19:04 - some key takeaways then and to conclude
19:06 - we'll do some frequently asked questions
19:08 - that I've found on the internet so that
19:11 - we can try and answer some of your
19:12 - questions so regenerate on a dev form
19:15 - says I am trying to become accustomed to
19:18 - using module scripts I already know that
19:19 - I have to call require on any module
19:21 - script in order to run it my question is
19:24 - how do you use specific functions you
19:26 - define in a module script in a script or
19:28 - a local script so that's what we've gone
19:30 - over obviously in the module scripts
19:32 - we're returning this big table and that
19:35 - table is going to contain all of our
19:37 - functions which we've just added here
19:39 - and because we've given each function it
19:43 - sort of a name kind of like a variable
19:46 - the name for it is indexing the table
19:49 - and to execute the function because it's
19:52 - tied to this name we just need to get
19:54 - the module and we need to require it in
19:56 - our script and that basically gives us a
19:59 - copy of the module script that we now
20:01 - have access to in our script so that we
20:04 - can see the because when we use require
20:07 - it gives us the return value from the
20:10 - module script so because we returned the
20:12 - module table which contains all these
20:14 - functions my module the variable is now
20:17 - going to be equal to this module table
20:20 - and that module table is going to
20:22 - contain all of these functions which we
20:23 - can call so now we have access to that
20:25 - table in our scripts we can call all of
20:28 - those functions as we do here and when
20:30 - we do call those functions they're being
20:33 - executed within this script so if you're
20:35 - requiring or getting the module in a
20:39 - local script which is in player GUI or
20:41 - somewhere else it's located on the
20:43 - client it's going to run on your
20:44 - computer it's going to run in a client
20:45 - environment but if you run it on the
20:47 - server it's going to run in a server
20:49 - environment you know in a server scripts
20:51 - so for example if you're requiring a
20:54 - module on the client which is trying to
20:56 - access something in server storage it's
20:57 - not going to work because it's running
20:59 - on the client whereas if you do it in
21:00 - the server it's gonna work because the
21:02 - server has access to service storage or
21:04 - as the client does not so very simple we
21:08 - just pull it all all of our functions in
21:10 - this table return the table and then
21:13 - whenever we require it it's essentially
21:16 - just running the module scripts and
21:17 - returning whatever we returned so in
21:19 - this case the module table back to our
21:21 - variable here in the scripts we now have
21:23 - access to all those functions okay
21:27 - module scripts they don't have to be
21:29 - used just for functions so for example
21:31 - I've just changed the module variable in
21:34 - the module script to be 350 and so when
21:36 - I say return module obviously you can't
21:39 - say my module countdown or death - or
21:42 - call any functions anymore because we've
21:43 - got rid of them we just got 350 so we're
21:45 - returning the number 350 back whenever
21:48 - we require it
21:49 - so my module is now gonna be equal to
21:51 - 350 like this so this is useful if
21:55 - you're having a module for an inventory
21:58 - in your games if you've got
22:00 - information about all the different
22:01 - items that you sell in your game so you
22:04 - had like a shop or a pet shop you could
22:06 - have a module script which in the table
22:09 - you could have sub tables so for example
22:14 - if we just have a pet called dragon and
22:18 - we that has a sub table and it has
22:21 - information about its cost or its I
22:25 - don't know its age maybe the dragon has
22:28 - its own age in years or its health maybe
22:34 - it has 150 HP so you can have all of
22:38 - your different pets or items in your
22:41 - game don't forget the comma or semicolon
22:42 - like this okay I'll just call this one
22:45 - bird okay changes whoops
22:48 - change its cost something else okay but
22:54 - then when you return this table you just
22:58 - have to be called module either you
22:59 - could call it item table or pets let's
23:05 - just call this module script pets module
23:10 - module okay so if I wanted to for
23:15 - example let's imagine that this module
23:17 - script is running in a shop GUI or I
23:21 - know it's not in the client but let's
23:22 - imagine that we need to get all the
23:24 - information about all the different pets
23:26 - that we can buy in the game so we can
23:27 - show them to a user well because we've
23:29 - required the module and it's returning
23:31 - this table of pets we could loop through
23:34 - everything we could loop through this
23:36 - this table of pets because it's now my
23:38 - module because it got returned from the
23:40 - module script back to the service script
23:42 - so we could say for I the in pairs I
23:45 - don't think I've explained this to you
23:47 - yet by the way but when you are looping
23:49 - through a table like this like a
23:51 - dictionary where you've got names of
23:53 - tables like the dragon and so this is
23:56 - going to be a key and it's going to be
23:57 - the value so inside this big table we've
24:00 - got keys and each key has its own value
24:03 - so you can look up the dragon by using
24:05 - the key name dragon and it will give you
24:07 - the the value of that key so when you
24:10 - loop through a table like this the I I
24:12 - usually call it
24:13 - name and that's going to not is instead
24:15 - of being the number so the first index
24:17 - second index it's gonna be the name of
24:19 - this table or this key so in this case
24:23 - will be dragon and the key value will be
24:25 - this table so if we wanted to get the
24:27 - cost we would just say key value because
24:30 - that's the table and inside of it
24:31 - there's a key inside of that table
24:33 - called cost okay so I could we could say
24:36 - prince the key name to begin with and we
24:39 - could print out the cost and then we
24:41 - could print out the age then we could
24:44 - print out what else was it the health
24:50 - okay if you print this out you can see
24:54 - it's printed out dragon then 350 cuz
24:56 - that's the cost and then the age is five
25:01 - and the health is 150 and then the bird
25:03 - five six four to 100 so what's happened
25:06 - is the scripts as this is running the
25:09 - script by the way so it's looked up its
25:10 - required the pet module the pet module
25:12 - has sent back the pets table which is
25:15 - full of all this information about the
25:17 - different pets in the game then we've
25:19 - looped through every key or sub table in
25:23 - that table and printed out the name of
25:26 - the pets the cost the age the health etc
25:29 - so you can see where this is going so if
25:30 - this was running in a GUI you could
25:33 - create a new button or image label for
25:37 - each pet and you could hook up a load of
25:40 - events to it like a mouse button one
25:41 - click events you know mouse button I
25:44 - don't know whatever so that when you
25:46 - click that frame you'd be able to buy
25:49 - that pet so very very simple but you can
25:51 - see where I'm going with this whole
25:52 - module stuff because not only can you
25:54 - hold functions but you can hold
25:55 - information about things in your game
25:56 - because you might want to access the
25:58 - information about the pets in different
26:00 - scripts so you might have a script in
26:03 - the client which is getting all of the
26:05 - names of the pets and all the
26:06 - information about all the pets you can
26:07 - buy to show to someone who's in the shop
26:09 - but you could also have a server scripts
26:11 - that is doing like it's just it needs to
26:14 - check the cost or the health or age of a
26:17 - certain pet so it can just look up in
26:19 - the pet module and because it's a
26:21 - replicated storage it's visible to both
26:23 - the client and the server
26:24 - but the module scripts they can be
26:25 - anywhere and they're useful for lots of
26:27 - the
26:27 - and things but you have to return
26:31 - something from otaru scripts you always
26:33 - have to return something so that when
26:34 - you require you can that you can send
26:37 - something back so again it doesn't have
26:39 - to be a function it doesn't have to be a
26:41 - table it could be a number it could be a
26:42 - boolean you know it could be a an object
26:44 - if you wanted I'm not not really sure
26:47 - why you'd want to do that though so I
26:48 - the main use cases for a module script
26:50 - is for information about things like
26:53 - inventories or tables or you know things
26:56 - that are in a shop but also another main
26:59 - use is for functions for holding
27:00 - functions so you can execute these
27:02 - functions in different scripts okay and
27:05 - so you don't repeat yourself another
27:09 - good reason to use module scripts and
27:11 - for functions is that if you need to
27:13 - update your function instead of having
27:15 - the same function in loads of scripts
27:17 - you'd have to go through and update
27:19 - every single script you can just update
27:21 - it once in the module script and because
27:23 - you're calling the function from the
27:24 - module script in different scripts it's
27:26 - going to update itself because you
27:28 - updated it once in the module scripts
27:29 - it's going to take effect everywhere so
27:31 - that's a very very useful and reason to
27:34 - use module scripts but you shouldn't be
27:36 - using them all the time so don't go
27:37 - thinking that you know every single
27:39 - function that you write you need to do
27:40 - in a module script now if you're only
27:41 - going to use it once in one scripts and
27:43 - don't bother with the module scripts and
27:45 - I write lots of functions that are just
27:46 - going to be used in one script to do
27:48 - something so don't just think that you
27:50 - have to go and use module scripts all
27:51 - the time for everything and because you
27:53 - can you can over complicate things and
27:56 - and you know there they are unnecessary
27:59 - for some things now a lot of other
28:03 - people a lot of people have been asking
28:04 - me about something else called G and
28:06 - what that is compared to modular scripts
28:09 - now G is basically a global variable
28:12 - which can be accessed from different
28:14 - scripts so in this script script one I'm
28:18 - saying under I think it's an underscore
28:21 - G dot awesome variable equals 50 and
28:25 - that's created a global variable which I
28:27 - can access from other scripts so in
28:29 - script 2 if I wanted to print out the
28:32 - value of G dot awesome variable which if
28:34 - you notice I haven't created in script
28:38 - to I've actually created it in script 1
28:41 - but if I run it it would after two
28:45 - seconds prints out 50 because that
28:47 - global variable has now been initialized
28:48 - by script 1 it was created in the script
28:52 - 1 and so I can get its value and but
28:56 - there are a lot of downsides to this and
28:58 - it's kind of its kind of useless
28:59 - nowadays because we have module script
29:01 - so I just wanted to touch on it cuz a
29:02 - lot of people have been asking about it
29:03 - there are some flaws to it especially if
29:06 - you are trying to get the global
29:09 - variable the G variable before it's been
29:12 - created so sometimes you might be trying
29:15 - to access it but it hasn't been created
29:17 - by the other script yet and it gets
29:19 - really messy as well you can't you can't
29:22 - create one on the server and then try
29:25 - and fetch it from the client so if I
29:27 - created it in script one on the server
29:29 - then try to access it from from a client
29:32 - script it wouldn't work it would just
29:33 - return nil because you can only have
29:36 - global variables which are created on a
29:39 - server you can only view them from the
29:41 - server in other service scripts or
29:42 - created on the client you can only view
29:44 - other client scripts so it's not useful
29:47 - and please don't use it just use module
29:50 - scripts instead because module scripts
29:52 - are much better because you can create a
29:54 - module script and access it from the
29:56 - server and the client if it's in
29:57 - replicated storage and also module
30:00 - scripts are a lot faster as well because
30:02 - G is a old and slow way of having global
30:08 - variables when a quote thinly I am lag
30:13 - from the developer forum who says that
30:15 - module scripts are a much better option
30:16 - than using G and it's definitely what
30:18 - roblox is trying to lean developers
30:20 - towards in my experience G is less
30:22 - efficient causes lag and is less
30:24 - favorable and I would absolutely echo
30:26 - that definitely use multiple scripts
30:30 - wherever you can it's the new practice
30:32 - and G has been around for ages before
30:34 - module scripts so use module scripts
30:36 - don't use G it's a bad practice module
30:40 - scripts are the way you know unlike G
30:44 - variables you don't have to wait for a
30:46 - value or variable to be created with a
30:49 - module script because you know that it's
30:50 - there as soon as you've required it so
30:52 - you could you know go local
30:55 - my pet module equals game require own
31:01 - fat I need to touch on that so I said in
31:04 - earlier in the video a lot of people is
31:05 - the common mistake not to use require
31:08 - I'm gonna show you why so if I was just
31:10 - to say game dot replicate the storage
31:12 - dot pets module and then I wanted to
31:16 - print out the pet module so I want to
31:21 - print out the okay I changed the pets
31:24 - thing by the way to show you something
31:27 - I've removed the pets but I've just had
31:28 - it I've put an index in there called
31:30 - awesome variable so if I wanted to get
31:32 - the value of awesome variable I would
31:35 - just say pet module thought awesome
31:37 - variable okay because it's in that table
31:40 - that got returned to me now because I
31:42 - haven't used require this is just a
31:45 - normal variable for an object so the
31:48 - script thinks that the pet module where
31:51 - the pet module is an object right it's
31:53 - the object of the module script so the
31:55 - script is trying to look for an object
31:57 - inside the pet module so as if there was
31:59 - something inside of it called awesome
32:02 - variable right but there's not an object
32:06 - inside a bit called an awesome variable
32:08 - so it's going to cause an error you can
32:11 - see it says awesome variable is not a
32:12 - valid member of module script and this
32:14 - is because it's looking for an actual
32:16 - object an actual thing like a part or
32:19 - something inside of the pet module not
32:22 - the actual table in the script so when
32:25 - we say require it's getting that return
32:29 - table and so pet module is going to be a
32:32 - table object or whatever we return so if
32:35 - we don't return a table we just return
32:38 - 500 it would be a number so if it's a
32:42 - table and it contains the awesome
32:43 - variable is going to work because it's
32:45 - going to look up the awesome variable
32:47 - inside the table that's going to print
32:49 - out its value which is going to be 500
32:51 - just like that anyway
32:55 - I hope you found that video useful on
32:57 - module scripts if you did please leave a
32:59 - like share it with anybody you know
33:00 - who'd benefit from this and
33:02 - oversubscribe to my channel for more
33:04 - roblox scripting videos again I have a
33:06 - 23 part and accounting beginner series
33:09 - which is useful as well if you need to
33:11 - catch up on some things that you have
33:14 - forgotten or if there's just some things
33:15 - that you've you've missed the need to
33:16 - learn I recommend you go back and check
33:18 - those out anyway I hope you enjoyed this
33:20 - video thanks for watching I'll see you
33:22 - in the next one
33:23 - Cheers bye