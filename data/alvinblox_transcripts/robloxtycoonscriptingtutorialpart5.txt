00:00 - all right so in the previous video we
00:02 - learned how to get our conveyor working
00:04 - so that we could actually start making
00:07 - money in our Tycoon now we're going to
00:10 - focus on how to save the players data so
00:13 - we're going to want to save their items
00:15 - and their currency so the way we're
00:17 - going to do this is we're going to save
00:20 - the IDS of the items that they have
00:24 - purchased and rather than saving the
00:27 - positions of the items we're just going
00:29 - to save the IDS because in the future we
00:32 - might want to change the way our uh
00:36 - Tycoon is um designed like we want won't
00:40 - want to move things around and if we
00:42 - save the positions then we won't be able
00:44 - to um update them for a player who has
00:48 - got an outdated position in the data
00:50 - file so if we just save the IDS instead
00:53 - then we can move our items around on the
00:56 - template plot and they will just be
00:58 - repositioned when the player rejoins
00:59 - joins so first things first is we're
01:02 - going to need to get a module called
01:04 - profile service uh in order to save data
01:07 - so we are going to go to the top left
01:10 - click on the tool box uh and actually
01:12 - what you're going to do is you're going
01:13 - to go to the link in the description and
01:15 - you're going to take the model called
01:17 - profile service and once you've got that
01:20 - module called profile service uh you're
01:23 - going to want to search for it so I'm
01:25 - just going to search profile service so
01:28 - yeah there'll be a link in the
01:29 - description you just need to go and take
01:30 - the model um click the green button that
01:32 - says buy and then just click on it to
01:35 - insert it now once you've done that
01:37 - you'll see the profile service appear
01:39 - over here we're going to drag it into
01:41 - server script
01:43 - Service uh in fact we're going to put it
01:45 - into our data script just there okay so
01:49 - it's a child of the data script and then
01:51 - in that data script uh we are going to
01:54 - require the module so we're going to say
01:56 - local profile service equals require
02:01 - script wait for child profile service
02:05 - just like that okay and then what we
02:08 - want to do is we just want to add some
02:10 - boilerplate code which is going to um if
02:14 - the player is new to the game we need to
02:15 - give them a a template so a template is
02:19 - just what their data file is going to
02:21 - look like when they first join so local
02:24 - profile
02:26 - template this is going to be a table so
02:28 - we're just going to put in here all of
02:30 - the um possible things that we're going
02:32 - to save so we want to save their
02:35 - cash by default their cash is going to
02:37 - be zero when they join the game and
02:39 - we'll have a table for their items so
02:43 - we're going to be saving the IDS of the
02:45 - items that they own like this okay um
02:48 - but when they first join the game this
02:50 - table is going to be empty so this is
02:52 - just what the data file is going to look
02:55 - like for a brand new
02:57 - player now down here in the player added
03:00 - we are just going to write uh just give
03:03 - me a sec we're firstly going to get
03:05 - their profile so what this means is
03:08 - we're going to get their saved data if
03:09 - there is any so we're going to say local
03:11 - profile equals and then we need to
03:14 - firstly get our store so we need to
03:18 - actually create a a data store or
03:21 - profile store which will store all of
03:24 - the players data uh that play our game
03:27 - so we will just say local profile store
03:29 - equals profile service colon sorry.
03:34 - getet profile store and then inside of
03:38 - here we're going to give it a name we'll
03:40 - just call it player data and then a
03:42 - comma and we're going to assign a
03:45 - template table which is the one we've
03:47 - just created so we will say profile
03:50 - template like this okay so this is going
03:53 - to store the profiles of all of the
03:54 - players that join our game okay and it's
03:57 - got the name player data so so we can
04:00 - now look up a specific players's profile
04:03 - in that store so we can say profile
04:06 - store um do load profile async okay so
04:12 - load this time with a comma uh sorry
04:15 - with a colon load profile
04:17 - async and we want to say uh player uh
04:22 - comma un so underscore and then dot dot
04:26 - player do user ID this is the unique
04:29 - identifier which will identify our
04:31 - player's profile profile is just another
04:34 - name for data file okay it will contain
04:37 - everything that's in this template here
04:39 - for that specific player and we use load
04:41 - profile as sync to get the um profile
04:44 - for this unique player and it's Unique
04:47 - because the player's user ID is unique
04:49 - to them only they have that one user ID
04:52 - so by saying player uncore user ID this
04:55 - is the name of their profile which we
04:58 - are looking up now if they do not have a
05:01 - profile we need to create one because
05:03 - they might be a new player in the game
05:05 - so we say if
05:11 - profile then we will say profile go on
05:15 - add user ID player. user ID we have to
05:20 - do this for gdpr compliance um because
05:23 - we have to associate their user ID to
05:25 - the profile so that if they want to
05:27 - request their data gets wiped we are
05:30 - able to look it up then we say profile
05:32 - codon
05:33 - reconcile and this fills in any missing
05:36 - parts that um are in this profile
05:39 - template that might have been added in
05:41 - the future so if we then added a
05:43 - separate update where there are some
05:45 - things that aren't in that in their
05:46 - current data file but we've added it to
05:48 - the template it will reconcile them and
05:50 - it will basically update their data file
05:52 - to the latest version of the template
05:55 - then we say profile colon listen to
05:58 - release and then we put function inside
06:00 - of here so this is when the uh player
06:03 - leaves the game we want
06:06 - to we want to kick the
06:08 - player um because they might have joined
06:10 - another server so we don't want to have
06:12 - duplicate sessions and what we'll also
06:15 - do is we will um store the profiles for
06:19 - all the players in the game in a table
06:22 - so that we can read them at any time so
06:24 - we'll create a table and call it
06:27 - profiles and then uh we will remove the
06:31 - players's profile when they leave the
06:33 - game so profiles player equals nil so
06:37 - this is for when they leave the game uh
06:40 - and then we can load their profile into
06:44 - that table just below it so we'll say if
06:47 - player is descendant of game. players
06:53 - then uh equals equals true we have to
06:55 - put that
06:57 - because that's what it says in the
06:59 - documentation I don't want to uh i'
07:01 - basically just looking at the
07:02 - documentation here to be honest because
07:04 - I hardly ever have to set up profile
07:06 - service I just copy this code usually
07:09 - but I'm trying to explain how it works
07:11 - um so anyone in the comments that's how
07:13 - it is in the documentation so if the
07:15 - player is in the game do players that
07:17 - means that they're actually in the game
07:19 - um and it's good to go so we can set
07:22 - that set their profile into this
07:25 - table like this uh and then yeah that
07:29 - should be that should be pretty much it
07:32 - um oh otherwise if they're not a
07:34 - descendant of the players then the
07:36 - player has left the game for some reason
07:39 - so we just are going to release their
07:41 - profile which means when you release the
07:43 - profile it means they can they can join
07:45 - another server and we can access that
07:47 - profile in another server um because the
07:49 - great thing about profile service is
07:52 - that it only lets you read and write
07:55 - sorry write to a profile from one server
07:57 - at a time so you can't get any any dupe
08:00 - glitches or or
08:02 - anything and then here we'll just do an
08:04 - else um for some reason if the profile
08:06 - hasn't loaded then we can just say
08:09 - player colon kick okay because if their
08:12 - profile hasn't loaded um then they
08:14 - shouldn't be in the game because there's
08:16 - obviously been some kind of error and we
08:17 - don't want to uh cause any problems so
08:21 - yeah once player joins the game we're
08:23 - just loading their profile here uh and
08:26 - we're reconciling it which just loads
08:28 - all the necessary values uh and that
08:31 - should all be taken care of now what
08:33 - we're going to do is we're going to take
08:35 - this code here and if you just give me a
08:37 - moment to zoom out yeah we're going to
08:40 - take this
08:41 - code and we're just going to cut
08:45 - it we're going to put it in its own
08:47 - little function so we're just going to
08:49 - say local function player added we're
08:52 - going to paste our code in here we're
08:54 - going to put the player as an
08:57 - argument and then we're going to call
08:59 - back function from here so we're just
09:01 - going to call player added from this
09:03 - event uh and we're doing this
09:06 - because uh we want to call this function
09:09 - again when the game starts up because
09:12 - there could be a case where players are
09:14 - in the game um before this script has
09:18 - gotten to this point so we don't want to
09:19 - forget about them um because obviously
09:22 - this code is running takes some time to
09:24 - start up and there is an edge case where
09:27 - sometimes players can be in the game
09:28 - before this script started to run so
09:31 - we're just going to take some code from
09:34 - documentation again and we're going to
09:36 - say outside of this event for underscore
09:38 - comma player in
09:41 - iirs uh game. players get
09:45 - players uh do I mean we can even just
09:49 - say game. players get players we don't
09:52 - need the I pairs really these days do
09:56 - and we're going to say task. spawn
09:59 - player added player and that will just
10:02 - run this function all the players that
10:04 - are currently in the game so no one gets
10:06 - left behind and then finally we're going
10:08 - to say uh game. players. player removing
10:12 - so this is for when players leave the
10:14 - game we want to clear up their data
10:17 - files we're going to say local profile
10:20 - equals profiles
10:22 - player and if profile then oops needs to
10:29 - be lowercase if profile then very simple
10:34 - profile release all right and that
10:37 - should be everything good to go now it's
10:40 - just a case of
10:42 - updating this profile in the profiles
10:45 - player table whenever something happens
10:47 - in the game okay so this is the first
10:48 - part done we've set up like the backbone
10:50 - of our code uh now we just actually need
10:53 - to update the profile when their cash
10:55 - and items change going to show you how
10:57 - to do that in a moment but let's just do
10:58 - a Qui quick recap so firstly we got the
11:01 - profile service this is because we're
11:03 - using an external module to control the
11:05 - saving and loading of data we created a
11:08 - template profile um which will contain
11:11 - all of the values that we're going to
11:12 - save we've basically given a name and a
11:14 - value a default value of zero for the
11:18 - cach and an empty table for the items so
11:20 - this means when a new player joins the
11:22 - game this table is going to be their
11:24 - data file so they're going to have no
11:26 - cache to start with and no items if you
11:28 - wanted player to have you know 100 cash
11:30 - when they join you'd set the profile
11:32 - template and then as a new player they
11:34 - would get that exact
11:36 - table now if we added a future update
11:39 - where we added something to the profile
11:41 - template perhaps we wanted to add pets
11:43 - then that would be fine we just update
11:45 - the table and then whenever a new player
11:48 - joined sorry or an existing player
11:49 - joined if they didn't have this pets
11:51 - table in their data file it would get
11:54 - added to it okay so it wouldn't give
11:56 - them a brand new file it would just add
11:58 - anything that that has since been added
12:00 - to the profile template to their data
12:02 - file so they'll keep their cach they'll
12:04 - keep their items they'll just get an
12:06 - empty pets table that is called
12:08 - reconciling so now we've got our profile
12:12 - store and this is basically the unique
12:14 - collection of profiles for this game uh
12:18 - we've given it a name player data and
12:20 - we've told to get the uh Prof we've told
12:23 - the game that basically any profile in
12:25 - this particular store will have this
12:27 - template so um then we've created this
12:31 - table called profiles that's going to
12:33 - store all of the active profiles of
12:35 - players in the game so when a player
12:38 - joins the game we are going to load
12:40 - their specific profile based on their
12:43 - user ID we've basically attached it to
12:45 - this player underscore just to give it a
12:47 - little bit of meaning uh and then if a
12:50 - profile does exist which it should
12:52 - because if they haven't got any data it
12:54 - will just return the profile template
12:57 - we're associating their user ID to the
12:59 - profile so that we can look it up if
13:01 - they ever need to wipe their data we're
13:04 - reconciling the table to the profile
13:06 - template in case anything has changed
13:08 - we're list we're creating an event so
13:10 - that when the profile gets released um
13:13 - for example if they leave the game we
13:14 - remove it from this active table and
13:17 - then we kick the player from the game
13:18 - and then once we're sure that the player
13:20 - has joined and their character or player
13:23 - object has loaded we add it to this
13:25 - table um now this is a little bit um um
13:30 - this is a little bit over the top uh not
13:32 - going to lie but that's because we've
13:33 - just taken it straight from the
13:35 - documentation um like usually I would
13:38 - skip a few things like this uh but I'm
13:41 - just trying to show you it from the
13:43 - documentation trying to give you an
13:44 - example um so you shouldn't worry too
13:47 - much about this uh but yeah the main
13:49 - thing to to to see is that we've got
13:51 - this big table called profiles going to
13:53 - contain the data files of all players in
13:55 - the game and we've we've set it as a
13:58 - very able here because then we can just
14:00 - easily um look it up and add stuff to
14:03 - players data and then whatever we change
14:06 - in this profiles table will just
14:09 - repeatedly get saved to their data store
14:11 - so we just change the profile in this
14:13 - table and we should be good to go so let
14:16 - me show you how to save some data first
14:18 - thing we want to save is obviously the
14:21 - cash so the cash value we want to change
14:24 - this when we're loading the cache we're
14:25 - going to say uh we first want to get
14:28 - their profile so local profile equals
14:31 - profiles player all right so once we've
14:34 - got that profile want to make sure it
14:35 - actually exists so if not profile then
14:38 - warn no profile return end because by
14:42 - now the profile should have been set up
14:44 - if it doesn't exist something has gone
14:46 - wrong we don't want to go any further so
14:48 - we're going to return and just kill the
14:50 - script at this point now if the profile
14:52 - does exist we want to set the cach value
14:55 - to profile. dat. cach or
14:59 - zero so if their profile exists we're
15:03 - just going to set their cache value to
15:05 - whatever's in the data file if for some
15:07 - reason there is no cash value in the in
15:09 - the profile then we just set it to zero
15:12 - and whenever you want to get a value
15:13 - from the profile we have to say profile.
15:16 - dat not profile. cach it's got to be
15:18 - profile. dat
15:20 - docash so now that's done um we just
15:24 - need to uh save it so how do we save
15:28 - players cache to the data file well
15:32 - easiest way to do it is when this value
15:35 - changes so cache Cur on get property
15:38 - changed signal value Cur on connect
15:44 - function we can just say uh so so this
15:47 - will fire whenever the value of cash
15:49 - changes so we can say profile. data.
15:53 - cach equals cach value like that and
15:57 - this should save our data and it should
16:00 - load it as well because we've just
16:01 - sorted out the loading and we've sorted
16:03 - out the saving um because we've set the
16:05 - value here last thing you need to do is
16:08 - you need to go to the top left go to the
16:11 - Home
16:11 - tab click on game
16:14 - settings go to
16:17 - security allow Studio access to API
16:20 - Services make sure that is green click
16:23 - on Save back to the top left click on
16:27 - play
16:29 - and let's have a look and see if we've
16:31 - got any errors so we have an error on
16:34 - line
16:37 - 16 attempt to index nil with user ID
16:40 - let's have a
16:41 - look line 16 attempt to index nil with
16:45 - user ID um so obviously player is nil
16:48 - because we're trying to index that so we
16:51 - may have forgotten to pass the player to
16:53 - this function which we have so on Line
16:55 - 39 here we're going to pass player to to
16:58 - our player added so we're going to click
17:00 - on play
17:02 - again and we're going to go
17:05 - back no errors this time so I'm going to
17:08 - go to the
17:11 - um going to go up here to the
17:14 - client and change it to server I'm going
17:17 - to go and change the
17:20 - cache in the Explorer and to change that
17:23 - to
17:25 - 500 then we're going to go back to
17:28 - client
17:29 - mode we'll open up the output you see
17:32 - that we now have 500 cach I've just
17:35 - updated that going to leave the
17:37 - game and now I'm going to show you if
17:40 - you don't if I'm just going to show you
17:41 - with a plugin I've got this plugin
17:42 - called uh data store editor it's really
17:45 - good if you're dealing with data Stores
17:47 - um let me just zoom to the correct Place
17:49 - apologies yeah data store editor so this
17:52 - plugin lets you look up a data store to
17:54 - see what data is stored in it so our
17:57 - data store is called let's just have a
18:00 - look here uh player data okay so if we
18:03 - use the name player data and click
18:05 - connect and then we insert our key and
18:08 - we wrote that as being player uncore and
18:10 - then the user ID so my user
18:13 - id you'll see we have our profile so
18:16 - this is our profile and then in the data
18:19 - part of it because we always have to say
18:21 - player. data you'll see that it has
18:24 - saved my cach as 500 and we have our
18:27 - items a so we know that my data was
18:30 - saved we just now want to see if it
18:32 - loads so let's click on the play button
18:35 - again and we'll see what happens so we
18:38 - should see that my data of 500 cach gets
18:42 - loaded there we go so we've now been
18:45 - able to save and load the cache last
18:48 - thing we need to do is save the items so
18:52 - every time a player steps on a button we
18:54 - just want to add the ID of the item
18:57 - they've unlocked
18:58 - to their whoops to their items table so
19:02 - to do that we are going to go to our
19:06 - plot
19:07 - Handler okay and in the plot Handler
19:11 - we're going
19:12 - to go to where our touch event is and we
19:15 - want to make sure that we've gotten to
19:17 - the point where we know the player can
19:19 - afford and unlock the item that
19:23 - is here uh we are going
19:27 - to fire an event so we're going to want
19:32 - to um create a let me just think what's
19:35 - the better way to do this yeah so what
19:37 - we're going to do is in the Explorer of
19:39 - our
19:40 - data script we're going to insert a
19:43 - bindable event okay and we're going to
19:46 - name this event item
19:50 - unlocked and then in the code here if I
19:54 - just zoom out we're going to say game
19:59 - do server script service do data do item
20:03 - unlocked fire and we're going to pass
20:07 - the player and we're also going to pass
20:10 - the item ID so we want to take the item
20:15 - to unlock ID and yeah so this is just
20:18 - going to fire this event and then in the
20:20 - data script we're going to
20:23 - say outside of uh these functions uh
20:28 - yeah we'll do it we'll do it just in
20:31 - between these two why not uh in fact
20:34 - we'll do it right at the very bottom
20:37 - script. data so script uh wait for child
20:41 - data sorry what am I saying script wait
20:43 - for child item unlocked do event colon
20:47 - connect function player Item
20:52 - ID and then we're going to say
20:56 - um local profile
20:58 - equals profiles layer and then we're
21:02 - going to
21:03 - say table. insert profile. dat.
21:09 - items uh item id okay and this will add
21:12 - the item ID to the items
21:15 - table so what we can now do is we can uh
21:20 - when the player rejoins the game we want
21:22 - to load these items that are already
21:25 - unlocked because they will be getting a
21:27 - template plot which doesn't have any
21:31 - template items in it anymore because we
21:34 - remove the template items from the
21:38 - template plot um when the player joins
21:40 - the game well we don't remove them we
21:43 - just don't load them at all um because
21:46 - they they get a separate items folder
21:47 - but what we want to do is we want to
21:49 - load any items that they've already
21:51 - unlocked back onto the plot so let's
21:54 - create another bindable event inside the
21:57 - plot
21:58 - Handler findable events we're just going
22:01 - to call this load items now back in our
22:07 - plot Handler script we're going to
22:09 - create a event for this so script wait
22:13 - for child load items do event connect
22:18 - function player item IDs
22:23 - table and we are going to cycle through
22:27 - the these item
22:29 - IDs firstly we're going to get the
22:31 - players um plot so local
22:35 - plot uh we need to get the players's
22:39 - plot I'm just thinking of the best way
22:41 - to do that let's create a function local
22:44 - function get plot player and then we
22:49 - will say for underscore plot in plots
22:52 - get children do if plot get attribute
22:57 - owner
22:58 - uh in fact we'll make this a
23:01 - variable local
23:04 - owner equals plot get attribute
23:07 - owner
23:09 - if uh if not owner then continue end if
23:14 - owner is not equal
23:17 - to um uh player uh player. user ID then
23:23 - continue
23:25 - end and then we will say return plot so
23:29 - this function we will give it a player
23:31 - and it will return us the plot so we no
23:33 - longer have to keep saying uh you know
23:36 - cycle through all the plots whatever we
23:38 - can just use this one function so local
23:41 - player so local plot equals get plot
23:44 - player and then or underscore Item ID in
23:49 - item ID's table do we're going to want
23:53 - to scroll down to the uh part here where
23:57 - we we are loading the template
23:59 - items and I'm just going to copy this
24:02 - line from 82 it might be different on
24:05 - your end the lines but from here where
24:08 - we're cloning the
24:11 - item uh
24:15 - and in fact what we'll do is we will
24:18 - just cycle through the template plot so
24:21 - we will say uh local item equals
24:24 - template plot in fact let's just have a
24:28 - look here so we're going to create I
24:31 - think another function to get item get
24:36 - item from template plot Item ID so if we
24:41 - then uh just cycle through for
24:44 - underscore item in template plot. items
24:48 - get children do if
24:52 - item uh get
24:54 - attribute I believe we called it idid
24:58 - yep
24:59 - ID equals item id then return item so
25:05 - local item equals get item from template
25:08 - plot item id if not item then continue
25:14 - end but we want to make a clone of
25:20 - this and we're just going to go back to
25:22 - our code down here and we're going to
25:25 - copy this part about the C frame and the
25:29 - relative item C frame and this part as
25:32 - well I'm just going to copy that I'm
25:34 - going to paste it
25:36 - here and this will obviously check to
25:39 - see if it's a model or a part we
25:41 - mentioned in the last video about the
25:42 - differences
25:44 - there and this should position it on the
25:48 - plot perfectly we then just need to say
25:51 - item item clone. parent equals plot Dot
25:59 - items okay and that should
26:03 - be that I think should be all good let's
26:07 - now just go and call our load items
26:10 - event from the other script so when a
26:13 - player joins the game we have loaded
26:16 - their profile we then want to
26:19 - say um let's
26:25 - look so I'm just thinking here
26:28 - I'm just thinking when's the best time
26:30 - to do this because we obviously want to
26:32 - make sure they've been allocated a plot
26:34 - and we also want to make sure that their
26:36 - data has
26:39 - loaded all right I'm going to be honest
26:41 - I'm not very happy with this code um
26:43 - because I don't like how we've got two
26:45 - player added events here
26:48 - um so what I'm going to do is I'm going
26:53 - to change this slightly so what we're
26:57 - going to do do is we're going to get in
26:58 - our data script um we are going
27:03 - to um we're going to call another event
27:07 - so I'm going to create another event and
27:09 - I'm going to put it into the plot
27:10 - Handler and I'm going to call this
27:12 - create
27:14 - plot and I'm going to
27:17 - call um game. server script service Dot
27:22 - Plot
27:23 - Handler wait for child sorry plot
27:25 - Handler wait for child create plot fire
27:30 - player so from this script when the
27:32 - player's data is loaded I'm going to
27:35 - fire this call it create plot and I'm
27:38 - going to send the profile. dat. items
27:43 - with it okay and then in the plot
27:45 - Handler we're going to change this
27:48 - player added to script wait for child
27:52 - create
27:54 - plot create plot do event connect
28:00 - function
28:02 - player already owned
28:07 - items
28:10 - and that should be good so this is now
28:13 - only going to give the player the plot
28:15 - when their data has been
28:17 - loaded because otherwise we would have
28:19 - had these two player added events firing
28:21 - at the same time and we would have had a
28:23 - scenario where perhaps the plot hasn't
28:25 - loaded before the data or the or um the
28:29 - plot has loaded but the data hasn't so
28:32 - it would have been a mess but now this
28:34 - will go in the order that the data is
28:36 - loaded and then the plot gets loaded and
28:38 - this also gives us an easy way to pass
28:41 - the items they already have unlocked to
28:43 - the create plot function so we can
28:46 - instead of then saying load items do
28:48 - event connect function blah blah blah
28:50 - we're going to change this to just be a
28:52 - normal
28:53 - function so we'll say local function
28:57 - load items
28:59 - player uh item IDs table in fact we'll
29:04 - just change the already owned items to
29:06 - item ID's table for consistency as well
29:09 - and then we can just
29:12 - say um where is it where is it where is
29:16 - it when we get
29:21 - to this
29:23 - part uh we can
29:26 - say load
29:29 - items player item IDs table and finally
29:34 - what we want to do is we want to we we
29:36 - don't want to load any buttons for the
29:38 - items that have been been loaded so
29:43 - simple way to fix this is the buttons
29:45 - will have the ID of item to unlock
29:48 - property so we can say if table. find
29:51 - button get attribute ID of item to
29:56 - unlock so sorry the first argument is
29:59 - going to be the item ID's table if it
30:02 - finds the ID of the button in this table
30:05 - then we just want to continue continue
30:07 - end and we'll put this right at the top
30:10 - here so it won't load a button if the ID
30:15 - of that item to unlock of that button is
30:18 - in the already owned item IDs
30:21 - table all right um that was a lot
30:25 - process let's just have a look through
30:27 - everything so we no longer need
30:31 - our
30:33 - um load items we can delete that we can
30:36 - delete that
30:37 - event um and everything else looks good
30:42 - to
30:43 - go yeah let's give this a go here goes
30:47 - nothing so click on
30:50 - play all right we have an error on the
30:53 - plot Handler line 49 this will just be
30:56 - that we've forgotten a closing bracket
31:03 - hopefully line
31:06 - 49 uh yep oh we converted it from an
31:08 - event to a function so we no longer
31:10 - needed that closing
31:12 - bracket click on play
31:18 - again all right looks good so far let's
31:21 - just uh head on over to our
31:24 - plot and we have the default plot for
31:26 - now because we haven't unlocked anything
31:28 - yet we have our 500 cach let's purchase
31:31 - the starter
31:32 - item now let's leave the game and let's
31:35 - see if the ID of this item was added to
31:38 - our data store I'm going to use the data
31:40 - store
31:41 - editor so we type in the name of our
31:44 - data store player data and then player
31:47 - underscore and my user ID in the data
31:50 - table we now have an item with the ID of
31:54 - one added to our table so the saving has
31:58 - worked let's click on the play button
32:00 - again and let's see if this item gets
32:05 - loaded oh yeah look at that there it is
32:09 - um so you'll see there is no button but
32:11 - the item is indeed there um which is
32:14 - really good news really good uh so yeah
32:17 - I think it all seems to be
32:19 - working the uh the value has saved as
32:21 - well of our cash it's no longer 500 it
32:24 - was It was obviously reduced to 450 but
32:27 - uh this is all positive so uh it looks
32:30 - like we can unlock the conveyor and we
32:32 - can also unlock the dropper again I'm
32:35 - just going to leave the
32:39 - game and I'm going to
32:42 - rejoin by the way if you want a really
32:44 - quick way to go over to your plot you
32:46 - can uh press uh the arrow here and click
32:50 - on play here and it will spawn you
32:52 - wherever your camera
32:56 - is and just like that our Tycoon has
32:59 - saved and loaded now data saving is
33:03 - always a very tough thing to add uh you
33:05 - might get some errors you might get some
33:07 - issues it might not be working for you
33:09 - uh it is a difficult to debug so if you
33:12 - do have any problems then I do recommend
33:15 - getting the data store editor plugin uh
33:17 - I'll leave a link in the description
33:19 - it's just a great way to see what data
33:21 - was saved if you notice your data wasn't
33:23 - saving then it's obviously a problem
33:25 - with the saving if it's not loading
33:27 - however it is being saved you know it's
33:29 - a problem with the loading so uh all the
33:32 - best um if you do get issues try to work
33:35 - through them data sa saving is very hard
33:38 - to add to your games uh it does take a
33:40 - lot of practice however if you've gotten
33:42 - this far in the video uh I do commend
33:44 - you so well done and I'll catch you in
33:47 - the next one