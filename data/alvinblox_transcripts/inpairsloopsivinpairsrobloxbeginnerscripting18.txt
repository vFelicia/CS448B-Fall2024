00:00 - hello everyone welcome to episode number
00:02 - 18 in the scripting series we are
00:04 - progressing along now at a good rate
00:07 - with these videos and I am trying my
00:10 - best to get as many out as possible to
00:13 - finish this series off so for anybody
00:15 - requesting videos in the comments
00:17 - section I will just say this now I am
00:20 - currently focusing on the beginner
00:22 - videos and I will not be doing I
00:24 - probably will be doing some but all of
00:26 - my efforts are going into this series at
00:28 - the moment although I am working on many
00:30 - more projects many more video series
00:32 - which will be coming out soon but this
00:35 - takes priority first because it's been
00:37 - going on a while and we need to get this
00:38 - series over with so we can get into the
00:41 - more advanced content but doesn't mean
00:43 - that we're gonna rush through anything
00:45 - and today we're actually focusing on a
00:47 - topic that a lot of you have requested
00:49 - I've been seeing in the comments
00:51 - everybody's been asking for a tutorial
00:54 - on this because they can't find much
00:56 - about it anywhere online and it's quite
00:59 - confusing so don't worry you've come to
01:01 - the right place I'm going to explain
01:02 - everything you need to know about in
01:05 - pairs for loops alright so if you
01:10 - haven't learned about tables already and
01:12 - you just stumbling on this video I do
01:14 - recommend you check out the previous
01:16 - video in this series episode number 17
01:18 - I'll leave a link in the description all
01:20 - about tables because basically for loops
01:23 - are an extension from tables you need to
01:26 - know all about tables because for loops
01:29 - are actually used on tables and there
01:31 - they used to manipulate tables so this
01:34 - has no purpose or meaning if you have no
01:37 - clue about tables but luckily I made a
01:39 - video going through everything you need
01:41 - to know about tables and that's what we
01:44 - will be basing this tutorial on today so
01:47 - going on from that video this is where
01:49 - we left it we left it at this example
01:52 - here where we have players who are in
01:54 - around and we've just got Alvin Bob and
01:56 - Alan and we have a great comment
01:58 - question in from lure programmer in the
02:01 - comments who said so what if we don't
02:04 - know the position of a value and want to
02:06 - remove it now this is a great question
02:08 - because right now if we want to remove
02:10 - something from the table
02:12 - if we wanted to remove you know Bob for
02:15 - example we would have to give the index
02:20 - position value of that player so we
02:23 - would have to say table don't remove
02:24 - would have to give the list which would
02:26 - be players in round boot then would have
02:28 - to say the number so the the position in
02:31 - the list where the player is that we
02:33 - want to remove so in this case it's Bob
02:35 - and Bob's index is 2 so he would remove
02:37 - him okay so what if we didn't know this
02:42 - index number because we could be adding
02:44 - loads of things to the table when the
02:48 - games running because when the game is
02:50 - running we can't see the table for
02:51 - ourselves so we don't know and we can't
02:54 - predict we can't guarantee that the
02:57 - players will be in a set index we can't
03:00 - just say oh yeah well this player is
03:02 - going to be at position 30 because we're
03:04 - not going to know the index position of
03:07 - every player and for loops is just what
03:12 - makes these tables so great because what
03:15 - a for loop does is it lets us loop
03:18 - through a table now we'll come back to
03:20 - this example in a bit but I'm going to
03:22 - now talk to you and explain what four
03:26 - loops are and why they are so useful so
03:29 - a four loop is used so an in pairs loop
03:36 - here so there's two types of for loop
03:38 - your normal for loop which we'll be
03:40 - looking at in a future video and the in
03:44 - pairs type in which we're talking about
03:45 - today so the when I say for loop I'm
03:48 - talking about for IV in pairs and you've
03:52 - probably seen it before this is what it
03:53 - looks like so you've got your four I
03:55 - comma V in pairs then you've got a pair
03:58 - of brackets then you've got do on the
04:01 - end of that then you can drop a line and
04:03 - you've got your end in here so kind of
04:04 - look very confusing here but really it
04:07 - isn't okay it's not confusing at all
04:10 - because when I explain this to you right
04:12 - now you're going to think oh yeah that's
04:14 - what it's for and it's all gonna become
04:16 - clear so this is quite a table let's
04:19 - have some things in there
04:23 - all right we've got quite a love quite a
04:25 - few different data types and hair guitar
04:27 - string numbers and a boolean so this is
04:29 - our table now as I've said before the
04:33 - for loop is going to loop through every
04:36 - object in the table every item in a
04:39 - table is going to loop through and every
04:42 - time it loops through the table it will
04:46 - loop around so if we've got or if you've
04:49 - got here we've got four items on the
04:51 - table one two three four so the for loop
04:55 - is going to run four times it's going to
04:59 - loop around four times just like a while
05:01 - loop will run forever as long as the
05:04 - condition is true the for loop is going
05:08 - to run
05:09 - there's many objects you have so it will
05:13 - loop around and it will perform some
05:15 - code so if we had just a code to print
05:21 - hello in here what would happen is
05:24 - because we've got four items in this
05:28 - table is going to print hello four times
05:30 - if there were five items it would print
05:32 - five times okay
05:33 - so firstly you have to put the name of
05:37 - your table in here so that the script
05:41 - knows what to loop through so when we
05:44 - say loop through it will run this code
05:46 - for each index so it will go through
05:50 - will go to the first item and it will
05:53 - run whatever code is inside of will
05:58 - which is in between these two lines so
06:00 - in this case it will run the print and
06:03 - it will run it and then when it gets to
06:07 - the end well we're not at the end of our
06:09 - table yep so we've now moved on to the
06:12 - second index which is three so we're
06:14 - just gonna run the for loop again and
06:16 - it's gonna print hello again so that's
06:18 - the second time now go to the end now
06:20 - we're going to move to the fourth index
06:25 - and the
06:26 - table and it's gonna print hello again
06:28 - so now it's printed out three times and
06:30 - then it's gonna go to the false which is
06:32 - still an item in the table and it's
06:35 - going to print hello again so the four
06:37 - in pairs loop is is repeating for isn't
06:43 - for the for the same amount well the
06:45 - number of times it is repeating is the
06:49 - same as the number of items in the table
06:51 - it's dependent on how many items there
06:53 - are in the table so if there was just
06:56 - one item in the table it would only run
06:58 - this code once okay so that's the very
07:03 - basics the four in pairs loop will run
07:07 - code for the items in the table
07:11 - depending on how many items are in that
07:13 - table so once again if there were two
07:17 - items in the table it would only run
07:20 - this code twice and I will prove that to
07:23 - you let's run this code and it should
07:26 - print hello four times now let me just
07:31 - disable the other script so we don't get
07:33 - confused you can see it has printed out
07:40 - hello
07:41 - four times like this you can see the the
07:44 - X 4 x 4 meaning that the same message is
07:47 - being printed four times so just as I've
07:51 - said the for loop is printing it is
07:54 - running the code in between these two
07:56 - lines the code inside of this for loop
07:58 - will run for as many items there are in
08:02 - the table so for items means it will run
08:04 - four times and again if we were to add
08:07 - another piece of data into this table so
08:09 - there are now five objects you can see
08:11 - it has changed and it is running five
08:15 - times it is printing five times so that
08:18 - is crucial you need to know that for
08:20 - your for loop now you might be thinking
08:22 - well this is a bit pointless it's just
08:25 - running code a set number of times how
08:28 - is that useful to me and how is that
08:30 - useful to the table and genuine concern
08:33 - lays but we haven't learned about what I
08:36 - is
08:38 - these and what this whole impaired stuff
08:41 - means well
08:43 - that's because a for-loop doesn't just
08:45 - run code a set number of times based on
08:48 - how many items there are on a table
08:50 - because here comes the good stuff and
08:52 - everybody's saying well what does the I
08:55 - mean what does the V mean and everybody
08:58 - saying well I don't understand it
08:59 - because I keep seeing this I and V
09:02 - everywhere but actually you don't have
09:04 - to write I and V you could write
09:07 - whatever you want and firstly though I'm
09:11 - gonna explain why we use I and V and
09:14 - what these things actually are so we've
09:17 - said before that the for loop will loop
09:21 - around or run x times and that x is
09:26 - going to be the amount of items in the
09:29 - table so we've got five items now in the
09:32 - table so this is going to run five times
09:34 - and every time it does run or loop
09:38 - around I've said that it's running for
09:41 - that index so I said the first time
09:43 - round it's gonna be running for this
09:44 - hello so it will be running the code
09:47 - that's inside this for loop for this
09:49 - index hello
09:51 - so what's happening when it is running
09:53 - the code for this index is the I down
09:59 - here is our index value okay now don't
10:03 - get confused by the word index because
10:06 - we have got index in the table and we've
10:09 - got index down here so the the table
10:11 - index value is its position right so
10:14 - this would be position one this would be
10:16 - positioned - this would be position
10:18 - three this would be positioned four and
10:20 - position five that's the table index and
10:23 - it's basically the same thing every time
10:25 - this for loop runs for each item in the
10:29 - table this I it's a variable basically
10:33 - and this variable holds the index of the
10:37 - current item so the first time that this
10:41 - loops around I is going to be equal to
10:44 - one
10:45 - cuz that is the index of the item that
10:49 - we are currently looping through so on
10:52 - the first time around the first pass I
10:55 - is going to be one because that is the
10:58 - position in the table for this item so
11:03 - what the for loop is doing is running
11:06 - the code every time for a specific item
11:10 - in the table and so we pass the index
11:13 - value which is one in this case to the
11:16 - for loop and as it loops on as the code
11:20 - finishes and we get to the end and we
11:22 - loop around this index will change to
11:25 - the next position of the next object
11:30 - because once the code is executed for
11:32 - the first item in the table I said it
11:35 - moves on to the next one so it move on
11:37 - to index number two and the value of
11:41 - index number two is three so I is now
11:47 - going to be two because that is the
11:52 - index of the second item and now you
11:56 - might have realized what this V means
12:00 - the V stands for value so just like the
12:06 - index is going to be the position value
12:10 - of the item that we're currently looping
12:12 - through the V stands for value the value
12:16 - of the item that we're currently looping
12:20 - through so the value of that index so
12:24 - let's imagine that we're on position
12:27 - we're on index 3
12:29 - so we've looped around two times already
12:33 - we've done the hello we've done the 3
12:35 - and now the third item in the table is
12:40 - being looped through so the I four index
12:44 - is 3 because 3 is the position value or
12:47 - index of the third item in the table but
12:51 - the value of index 3 well it's 4 because
12:56 - the held value at the third position
12:59 - so the value that is stored in the third
13:01 - position of the table is four so the
13:05 - value of index three the value of the
13:09 - third position in the table I'm trying
13:11 - to be as clear as I can is four so we're
13:14 - taking this four and we're making it the
13:18 - value of V so just like a variable is a
13:22 - reference to something the V here is a
13:25 - reference to the value of the current
13:31 - index the current item of the table so
13:34 - if we are on index three then the value
13:39 - is going to be four okay and if we just
13:42 - give ourselves another example here
13:44 - let's say that we were on the first item
13:47 - the first time that we're looping
13:48 - through well we're going to start off
13:51 - with index one so what happens is that
13:56 - the I variable here has the index value
14:01 - of one and the V has because it is that
14:05 - it is the value variable that will hold
14:08 - reference or that will be equal to hello
14:11 - because that is the value stored at that
14:13 - position so in a table we have indexes
14:16 - and we have values the values are the
14:19 - actual pieces of data that are being
14:21 - stored so in this case hello or Phi or
14:25 - any data could be true or false
14:27 - like we outlined in the tables video the
14:31 - V is that data it's the value held at a
14:35 - certain position so we have the index so
14:40 - you could just write out index value
14:43 - because these are variables they can
14:45 - take any name it's just that they're
14:46 - called I and V because I is short for
14:49 - index via short for value and when
14:52 - you're coding you just want to be you
14:54 - you want to make things short because
14:56 - you don't do loads of typing but it's up
14:57 - to you you could call it you know
14:59 - hamburger call my fries as long as you
15:03 - know that the first variable here is
15:05 - always going to be the index and the
15:07 - second one is going to be the value but
15:09 - we're just gonna keep them at inv
15:11 - because that's what everybody seems to
15:12 - be you
15:13 - nowadays so we've just made clear that
15:17 - the for loop this is a recap if you're
15:21 - not with us if you've lost us a little
15:23 - bit so we're gonna go just back from the
15:24 - start very quickly so the for loop is
15:28 - used to loop through a table when we say
15:31 - loop through we mean perform some code
15:36 - for each item in the table so it could
15:39 - just be a simple print and so any code
15:44 - in between these two lines it's going to
15:47 - run a certain amount of time and the
15:51 - amount of times that it runs is
15:53 - determined by how many items are there
15:55 - are in the table so if there are three
15:57 - items then the code in between these two
16:00 - lines will run three times and every
16:04 - time that the four loop runs this code
16:09 - we call it like looping through so the
16:11 - first time it loops through will be
16:13 - looping through for hello the second
16:15 - time we will be looping through for bye
16:17 - and the third time we will be looping
16:19 - through for false now every time we loop
16:23 - through and we get to the end while we
16:25 - go back to the start and when we go back
16:27 - to the starts here to this four line
16:29 - well the I value and the V value are
16:32 - updated to the current piece of data the
16:36 - current item that's being looped through
16:38 - so the first time round we will be on
16:41 - hello which is the first item in the
16:44 - table so the we immediately enter the
16:47 - for loop and the script automatically
16:50 - because we've told it to loop through my
16:53 - tab it's automatically it automatically
16:56 - got the index for us and the value so if
16:59 - we were to print out what I was and we
17:02 - were to print out what he was it would
17:05 - print out the position index which would
17:09 - be one and would print out hello then it
17:12 - would get to the end it would go to the
17:15 - top again and we would now be on the
17:17 - second item in the table so the eye has
17:19 - been updated too because the second
17:21 - position and the V has been updated to
17:24 - by because by is the
17:27 - value held at that position is the data
17:29 - held at that index okay so we should get
17:33 - printed out for us
17:34 - one and then hello let's have a look and
17:37 - see if that happens
17:40 - brilliant so we can see that it has
17:45 - printed out one which is the index for
17:49 - hello because don't forget this is index
17:52 - 1 this is index 2 this is index 3
17:54 - so it's printed out the index for hello
17:57 - which is 1 and then it's printed out
18:00 - with V and remember we said that V holds
18:02 - the value of that data so that the data
18:05 - held in index 1 is hello so that will be
18:09 - equal to V so V has printed out hello
18:13 - then it's got to the end it's gone round
18:16 - again and it has updated the variables I
18:20 - and V to the index and value of the
18:24 - second item in the table so I is now 2
18:28 - and V is now by as you can see it has
18:32 - then printed out the new I which is 2
18:36 - then it's printed out the new V which is
18:39 - by and again you can expect this part
18:45 - here we go around again
18:47 - I and V automatically are updated
18:50 - because we have moved on to the next
18:52 - item in the table which is the third
18:56 - index so I is now 3 and V is going to be
19:00 - the value held at that index so the data
19:03 - that is held at that index at the third
19:06 - position which is a boolean value false
19:09 - so it will print out 3 which is I and
19:13 - then we'll print out a V which is false
19:15 - but all you can see here is that it is
19:17 - it is printing out the same things right
19:22 - sorry it's doing the same code for each
19:24 - thing in the table so for every single
19:28 - index in a table it is it is doing the
19:31 - same action too so it is printing its
19:34 - index and it's printing its value and
19:36 - it's doing that for everything in the
19:38 - table so another comment I got
19:40 - was well how do we print everything
19:42 - their table because you can't just go
19:45 - prints my tap you just can't do that if
19:49 - you were to do that if you were to print
19:50 - my tab you'd get an error and what well
19:56 - not an error but it would print this out
19:57 - for you it would print table and this
19:59 - memory location of where the table is at
20:02 - that does nothing to help us we can
20:04 - print out certain indexes in a tables
20:08 - and you know values but we can't print
20:12 - out the entire table itself and this is
20:14 - where for loops come in handy because
20:16 - when we use a for loop it is going to
20:19 - whatever code we put in between these
20:22 - two lines here is going to be applied is
20:26 - going to be executed for every item in
20:30 - the table you can guarantee that because
20:33 - it is looping through the entire table
20:35 - so for every item in a table we are
20:40 - going to run this code and we've also
20:43 - got references we've got we're able to
20:46 - access the current index and its value
20:50 - so we can basically perform any action
20:52 - to the table so if you want to print the
20:58 - table well okay we're not actually
21:01 - printing the entire table we're being a
21:04 - bit crafty and we're printing out the
21:07 - index and value of each item in the
21:12 - table so it's not like you're you're
21:14 - saying to the scripts can you print me
21:16 - the the whole table
21:17 - you actually it's like it's going I
21:20 - tuned by item and it's printing out each
21:25 - thing in the table now that sounds
21:27 - really confusing but you can't just
21:29 - expect the script to print out this in
21:31 - brackets with commas so what you're
21:34 - doing is you're actually using this for
21:36 - loop to access each item in a table
21:43 - you're basically printing
21:45 - value and then you're moving on to the
21:48 - next one
21:48 - printing out his value moving on to the
21:51 - next one so you have printed out the
21:53 - table but you've not actually printed
21:55 - out the table by just doing one piece of
21:58 - code because you're actually printing
22:00 - each index and each value over and over
22:04 - again using this for loop you're not
22:06 - actually like you would print a variable
22:08 - you can't just say print my tab like
22:10 - this you have to use a for loop and the
22:13 - for loop is printing each sub item of
22:17 - the table but because you're printing
22:20 - every serve item yeah you're printing
22:23 - the whole contents of the table so the
22:26 - for loop is repeating code for each item
22:30 - in the table so if I wanted to let me
22:35 - think of a good example here if I had a
22:38 - table full of numbers right and halfway
22:47 - through the game I want to give
22:50 - everybody double points okay so just
22:52 - imagine this is the table of everybody's
22:54 - points in the game if I wanted to give
22:57 - everybody double points I wanted to
22:59 - increase their points by by table or I
23:03 - want to double their scores if I wasn't
23:05 - using a for loop I would have to go
23:07 - write my tab one equals my tab one times
23:14 - two my tab - it calls my tab two times
23:19 - so as you see this is getting very long
23:23 - and if I have to do it for every single
23:24 - one in the table it's gonna be like this
23:26 - it's you know it's gonna be really long
23:28 - and I have to update every single one
23:29 - with the index of the table and it's not
23:32 - good it takes too long too long to write
23:35 - if something goes wrong if there's an
23:37 - error and I've made a typo I'm gonna
23:40 - have to go back and update every single
23:42 - line and then later on if I want to
23:44 - change this I have to change it all it's
23:46 - just not a good way of handling it but
23:50 - there's a better way for loop because we
23:52 - know the for loop is going to loop
23:55 - through every single item in the table
23:58 - so whatever we do to one will be done to
24:00 - all so if I was to if I wanted to double
24:05 - every value in this table well because
24:08 - the for loop loops through every item in
24:10 - the table surely I could just say if V
24:14 - is the value held for each item for each
24:19 - index sophie is basically the data in
24:21 - the table so for the first index right V
24:25 - is going to be one for the second index
24:27 - V is going to be two because that's the
24:29 - value held so I could just say shortly V
24:35 - equals V times to fool me that would
24:42 - work let's have a look so what I'm going
24:44 - to do is I'm going to print out a piece
24:51 - of data from the table just to show you
24:53 - so we'll do the second index because
24:55 - that's two for now so we'll print that
24:57 - out then we'll do the for loop which is
24:59 - going to just come along and do all
25:02 - everything and then we'll print it again
25:03 - and see the change that it has had so
25:05 - we'll do it we'll do a little weight as
25:07 - well wait - so what going to happen is
25:09 - we're going to print out the second
25:11 - index which is currently - we're then
25:13 - going to run our for loop which is going
25:15 - to hopefully double everything on the
25:17 - table and then we're going to print out
25:19 - the value of index two again and
25:21 - hopefully it should be four let's have a
25:23 - look see what happens so it's - but then
25:25 - the for loop comes along and it's still
25:28 - - mm-hmm so what's gone wrong here let's
25:31 - have a look so we have doubled the value
25:39 - but we need to write it to the table so
25:42 - let's say my tab I let's try this again
25:49 - perfect okay
25:51 - now you may be wondering or what have
25:52 - you doing here what I have done is we
25:56 - have gone to the table so we've gone up
25:58 - to the table just like we have here and
26:00 - I've indexed I've gone to the the value
26:04 - of the index we're currently on so
26:06 - everyone if we're on the second index
26:08 - here we're looking at the table we are
26:11 - then putting in the current index so if
26:14 - we're running for the second time we'd
26:16 - be on indexed too so we've now accessed
26:18 - this value and we're setting it to two
26:21 - times the current value so because V is
26:25 - variable and it's it's it's just the
26:27 - variable that holds the value currently
26:30 - stored here so it's not actually a
26:32 - direct link to the to that piece of data
26:36 - in the table it's kind of like a copy it
26:38 - just holds the same value that's held at
26:41 - the second at the second value sorry at
26:47 - the second because it's a two right if
26:50 - you were just to put two in here
26:52 - two equals V times two it's not going to
26:55 - do anything because we're not actually
26:56 - telling it it's not actually a location
26:59 - in the table it's just a number so we
27:00 - can't set that number to something else
27:02 - very confusing I know but what I'm
27:05 - saying is you can't just say well if you
27:09 - just say to here the script doesn't
27:12 - really know what to update and it's not
27:13 - going to save but if you look up in the
27:16 - table and the index is going to be the I
27:21 - value because it's going to be like two
27:23 - or two if we're on the second item we're
27:26 - looking up the table at that index and
27:29 - we can then set the value of that index
27:31 - to whatever its current value is x by 2
27:36 - so again let's just show you it was 2
27:40 - and how it's four okay so what we've
27:44 - done is this code has executed itself 10
27:49 - times for each item in the table so when
27:55 - we first got into the for loop when we
27:57 - first started I was 1 and V was one as
28:01 - well because it's the value stored and
28:03 - it's the same as the index I'm counting
28:05 - up to 10 but we located it in the table
28:08 - using its I its index just like we did
28:11 - here so we grabbed that reference to it
28:15 - in the table and we said ok you see this
28:18 - here we want this to be equal to its
28:20 - current value because V holds the value
28:23 - multiplied by 2
28:25 - so that would now be 2 then it moved on
28:28 - to the second index which is 2 and it
28:34 - said okay so we're gonna look up in the
28:37 - table
28:38 - the second item because eyes now - and
28:41 - we've got the item and we've said I want
28:44 - to set this to V so that's going to be 2
28:48 - which is the current number so 2 times 2
28:50 - is 4 so I want to set this to 4 and it's
28:54 - done it then it would go to 3 and I
28:57 - would now be 3 v would also be 3 because
29:00 - that's the data held at that position it
29:02 - just so happens that they're both the
29:04 - same because they're both counting up 1
29:07 - to 10 so we're looking up in the table
29:10 - and then we're basically doubling it
29:12 - here
29:12 - because V holds the number that is that
29:16 - is stored so 3 3 times 2 is 6 and it
29:20 - would keep going on and on until the
29:22 - whole table is doubled and when it gets
29:25 - to 10 and it doubles it and it makes it
29:28 - 20 and this line has completed we would
29:32 - finish because we've got to the end of
29:34 - the table and then it prints out the new
29:37 - value of the second index which we've
29:39 - asked it to do so I know that will be
29:41 - quite confusing as well and that that
29:43 - error that were not error but where it
29:45 - actually didn't double don't worry too
29:48 - much about that but what you need to
29:50 - know is that the for loop will run for
29:56 - however many things there are in the
29:57 - table so if there's 10 items it will run
30:00 - 10 times if there's one item it will
30:02 - only run once and every time it loops
30:04 - around again
30:05 - and it gets to the end if there is
30:07 - another item in the table then its index
30:10 - value we updated to the index of that of
30:12 - that new item that we've moved onto and
30:16 - the V will be its value so the value
30:19 - stored at that index so basically the
30:21 - data which is in that position so the in
30:26 - pair stuff this is all syntax this is
30:28 - what we need to rise to tell the script
30:30 - that yes we want to do a for loop we
30:32 - want to loop through one by one through
30:34 - this table so you can see now why I was
30:37 - talking about the table wasn't wild
30:39 - are so important and again if you
30:41 - haven't checked out the video on tables
30:42 - please do go ahead and check that out
30:44 - because it will be a massive help to you
30:46 - and tables that are used all the time in
30:49 - in roblox for for all sorts of things
30:52 - let's go ahead and give a practical
30:55 - example here okay so the example that
31:01 - I'm going to give you is a bit similar
31:04 - to something that you might have seen in
31:06 - a game such as jailbreak or another town
31:08 - and city game so let's imagine that
31:11 - these are these squares here are
31:13 - buildings in a game okay and let's make
31:17 - them a bit bigger so they actually look
31:18 - like buildings there we go so let's
31:21 - imagine that these are all buildings and
31:24 - when it gets to night time in the game
31:27 - so it's really dark they get you know
31:31 - it's quite hard to see them especially
31:32 - if you are far away so what if we wanted
31:36 - to turn them all on at night well what
31:39 - you would obviously do is you would go
31:42 - game dot workspace building you know dot
31:46 - and to turn them on I'm gonna set their
31:49 - material to neon okay
31:52 - that way they'll be nice and bright but
31:55 - what you have to do is first we've got
31:56 - one I know twenty twenty buildings so
31:59 - you'd have to repeat the same code over
32:01 - and over again twenty times and if you
32:04 - wanted to change the material in future
32:08 - maybe you'd have to go all the way back
32:10 - and change all the materials one by one
32:12 - and when you have code to turn them on
32:16 - in the day and code to turn them off at
32:19 - night then you're gonna have double the
32:20 - amount of code so that's forty lines of
32:22 - code and what if I told you we could use
32:26 - a for loop to loop through every single
32:29 - building and just quickly change them
32:32 - all at once I'd only have to write one
32:34 - line of code to update the material
32:36 - property and then the script would apply
32:38 - that for every single building well
32:41 - firstly the buildings need to be in a
32:43 - table because we know that in pairs
32:45 - loops only loop through tables that's
32:47 - the whole point of them so
32:50 - so we need to somehow put them in table
32:52 - form so how do we do this well you'll be
32:55 - pleased to know that roblox actually
32:58 - does this for you now remember that in
33:00 - your table we can have objects objects
33:03 - or a data type so that's for example let
33:05 - me just show you
33:06 - we could have an object in the table
33:10 - like this and we can have multiple
33:12 - objects in a table as well
33:13 - we could have game data where it's based
33:15 - base plate love game do a space terrain
33:17 - we can have any objects in a table now
33:21 - the good news is that there's a really
33:23 - quick way of getting objects in a table
33:28 - now in this case what I've done is I've
33:31 - gone ahead and put them all into a
33:32 - folder because that is the sensible
33:34 - thing to do so I'm gonna call this
33:35 - folder buildings and that way it just
33:37 - contains all the buildings nothing else
33:39 - so we know that everything in this
33:41 - folder is gonna be a building so what
33:44 - you can do is firstly let's create a
33:47 - variable I'm just gonna call the
33:49 - variable building's table now instead of
33:53 - creating a table like this I'm going to
33:56 - use a method called get children so I'm
33:59 - gonna firstly reference my folder game
34:02 - door workspace top buildings but then I
34:05 - can say : and you can see all these
34:07 - methods come up in built functions I've
34:09 - got a video on inbuilt functions you
34:11 - should have already seen it it's earlier
34:12 - on in the series really useful but the
34:15 - inbuilt function that we're gonna be
34:17 - using today is get children and what get
34:19 - children does is if you don't know what
34:23 - a child is in robot scripting context a
34:25 - child is something inside of an object
34:28 - so this building is the child of the
34:31 - folder because it is inside of the
34:33 - folder so when we're saying get children
34:35 - we're asking the script to get all of
34:39 - the objects that are inside of this
34:40 - folder called buildings and it's going
34:43 - to return them all to us in table form
34:45 - so we should get something returned to
34:48 - us like this
34:52 - we should have a table with all of these
34:57 - different buildings in but because
34:59 - there's lots on lots of buildings we
35:02 - don't want to have to spend the time
35:04 - looking through them all and so get
35:06 - children will basically take all of
35:08 - these building parts put them in one big
35:11 - table and it will now be we can now just
35:15 - you know we can reference it we can we
35:17 - can easily now use it because it's this
35:20 - variable we've got it stored in this
35:22 - variable so buildings table is now a
35:24 - table full of objects of all these
35:27 - buildings so now we can use our for loop
35:29 - to loop through each one so we say for I
35:33 - comma V in pairs put the building's
35:38 - table in here like that
35:40 - and then we say do drop a line and now
35:44 - the index and values will automatically
35:49 - update when the script runs so we don't
35:52 - need to pay attention to the index
35:54 - values because we have no use for them
35:55 - here all we need is the value and so the
35:58 - value of each index is going to be that
36:01 - object so it's a direct reference to
36:05 - each building in the folder because if
36:08 - we think about it our buildings table
36:10 - will actually look like this when it
36:14 - will be game that workspace dot
36:16 - buildings dot building and we'll have
36:19 - lots of these so you know rough twenty
36:21 - or so of these so the same principle
36:25 - applies it will have index one here
36:28 - index two here and there will be loads
36:31 - and loads of indexes so we've probably
36:33 - got 20 buildings at least so at least 20
36:36 - index values so 20 items at least in the
36:39 - table so that will be 20 or more indexes
36:42 - but the we don't need to pay attention
36:45 - to the indexes we could print them out
36:47 - and it would print out one to 20
36:49 - basically we're interested in the value
36:51 - the actual data here the data the value
36:54 - same thing but the value for each item
36:58 - will be the path to that part basically
37:03 - so that object
37:04 - so we can now do whatever we like with
37:08 - that object if we wanted to delete them
37:10 - all we could say V : destroy just like
37:14 - you would usually do on a part or an
37:16 - object and guess what it will delete all
37:19 - of the buildings and if you don't
37:23 - believe me just watch don't believe me
37:27 - just watch there you go it's gone and if
37:30 - we look in the workspace the buildings
37:33 - folder has got nothing inside of it
37:34 - because they've all been deleted so what
37:36 - happened was the scripts basically
37:38 - looped through every single building now
37:41 - if you slowed it down to you know
37:44 - fractional seconds even quicker than
37:48 - that because the script runs so quickly
37:50 - if you did slow it down to a point where
37:53 - it is slow enough to see this happening
37:55 - you would see one building go then the
37:58 - next one would go and to prove this to
38:00 - you further if I added a weight here of
38:03 - say one second because it's destroying a
38:06 - building but then it's delaying the
38:09 - script by one second so we're not going
38:11 - to move on to the next building until
38:12 - this one second is up so if you watch we
38:18 - slowed it down here but you can see that
38:20 - blocks are disappearing every second
38:22 - because once that one seconds up it's
38:24 - moving on to the next building in a
38:26 - table and it's removing that and then
38:28 - that one's getting removed and
38:29 - eventually you will run out of blocks so
38:31 - this is essentially a slowed down
38:33 - version of what we've just seen but by
38:36 - the time that the game had started well
38:38 - they'd already been deleted because the
38:40 - script runs that fast so just keep
38:42 - watching and they'll all get to destroy
38:49 - there we go so
38:51 - they all got deleted and again if we
38:55 - were to get rid of this weight they
38:57 - would just all be gone instantly so
39:00 - there you go so what we want to do here
39:02 - is actually turn turn the buildings on
39:04 - we want to make them bright and shining
39:06 - so we could just say V because the value
39:11 - variable here is referencing the the
39:14 - object so it will you know eventually
39:16 - reference all parts it will do the same
39:19 - thing to all of the building parts so we
39:21 - can just change their material property
39:23 - to neon and that's going to do it and we
39:29 - can do a little print as well just to
39:31 - show you that it happened a load of time
39:33 - so we can say material updated for index
39:37 - and we can then do dot dot you can
39:40 - concatenate the the string and you can
39:44 - print out these values as well you could
39:46 - print out the inv values if you ever
39:48 - need to debug or test or you want to
39:50 - make sure that it worked you can print
39:52 - it out and this will now print out
39:54 - material update it and it will print out
39:56 - with every index value so it should
39:58 - print out one two twenty or even more so
40:00 - let's check it out so there we go and
40:02 - it's done it and they've they've all
40:04 - gone neon so you can see it updated it
40:06 - for the first one then it moved on to
40:08 - the second one then the third one fourth
40:10 - fifth sixth seventh all the way up to it
40:13 - were even over 20 so this 31 blocks here
40:18 - so it updated the material 31 times
40:21 - because there are 31 blocks if you don't
40:24 - believe me pause the video count them
40:25 - all up I guarantee you and million row
40:27 - books that there are 31 objects and you
40:33 - can see after 31 it stopped so as I said
40:35 - earlier it will only run for the number
40:38 - of items you have on the table so
40:40 - there's obviously 31 bricks buildings
40:43 - here
40:43 - so that means 31 items in the table
40:47 - which means the for loop is going to run
40:50 - 31 times no more no less so there you go
40:56 - let's conclude the video here I think
41:00 - we've gone through quite a lot
41:02 - and a quick recap so a for loop is a
41:08 - loop which will loop through every
41:12 - object in a table so if you've got ten
41:16 - items in a table the for loop will run
41:19 - ten times if you've got one item it will
41:22 - only run once but essentially you can
41:25 - perform code you can run code for a set
41:29 - number of times based on how many things
41:32 - are in your table and if you want you
41:34 - can access that specific item or index
41:39 - that index on the table based on the inv
41:43 - value so if you wanted to change
41:46 - everything in the table then you could
41:49 - update every index by using the V here
41:54 - and because it's in the for loop the
41:57 - same code will be applied to everything
41:59 - in the table
41:59 - so if you change the material of V to
42:02 - neon you're basically changing the
42:04 - material of every part in the folder
42:07 - because that part is in your table and
42:11 - you're looping through everything in
42:13 - your table and you're basically any code
42:16 - you go in here will isn't you're not
42:19 - actually you know updating the material
42:22 - of one thing you're updating the
42:23 - material of everything in your table but
42:25 - it's just updating one by one because as
42:28 - we saw earlier if we were to add a
42:30 - weight in here and essentially slow down
42:32 - the scripts this is what it would look
42:34 - like so you can see it's going through
42:36 - the table we're on out on the fourth one
42:39 - it's made neon now the fifth now the 6th
42:40 - 7th 8th you know ninth you can see it's
42:44 - printing out as well that it's now
42:45 - updated it for index 11 but every time
42:47 - that you loop through and you get to the
42:50 - end it is updating the high value the
42:52 - index to the next index the next item in
42:55 - the table because when it's finished
42:57 - with this one it's moving on to the next
42:58 - one and it's not going to stop until you
43:01 - reach the end of the table which is
43:03 - about to do with the final block and it
43:05 - makes it neon and then it stops printing
43:07 - and it will end the for loop and if you
43:10 - were to print something at the end here
43:11 - saying reach the end just to show that
43:15 - we
43:15 - actually got out of this four loop
43:18 - finally and let's just change this way
43:24 - because we don't know wait here all day
43:25 - let's make it ten times faster so it
43:30 - goes along and when it reaches the end
43:32 - it says it prints out so we now know
43:37 - that it when it finishes when the four
43:39 - loop is done when it's got when it's
43:41 - basically performed the code here for
43:43 - every item in the table is going to
43:46 - print out this message here because is
43:49 - moving on to the next instruction in the
43:51 - code so unlike a while loop it's not
43:54 - going to run forever based on a
43:55 - condition which a while it can do a
43:57 - while loop can run forever this for loop
44:01 - is only going to run for the items in
44:03 - your table and it's going to perform
44:05 - code it's going to perform an action
44:07 - each item in your table based on what
44:10 - you've put here so what you write in
44:12 - here will be done to everything in your
44:14 - table and that is for loops now people
44:18 - do think they are confusing but really
44:20 - they are not it's just a quick way of
44:23 - looping through things if you have you
44:26 - know if you want to quickly loop through
44:28 - all the players in your game that's
44:29 - another way it can be used you can give
44:32 - everybody ten coins because you can just
44:35 - loop through everyone in the game so if
44:37 - you wanted to loop through everyone in
44:38 - the game you could say for IV in pairs
44:41 - and then game dot players and a bit like
44:45 - get children there's an inbuilt function
44:47 - to get all the players in the game it's
44:49 - called get players don't forget you need
44:52 - these two brackets on the end as well
44:54 - because it's a function that we're
44:55 - essentially calling or a method and just
44:59 - like get children get players will
45:01 - return back to us a table of all the
45:04 - players in their game in the game so
45:05 - their player objects so it could be like
45:07 - Alvin underscore blocks or Newt so it
45:12 - will return back objects of players
45:15 - currently in the game so only currently
45:17 - in that game server and then that way
45:19 - you could loop through all the players
45:22 - so if you had that table again let's
45:26 - just them
45:28 - maybe this table here so we will still
45:31 - have our indexes so the first time it
45:33 - loops around let's imagine I was first
45:36 - in the table then one would be the value
45:39 - of I because that's my position in the
45:42 - table and then V would be this object
45:46 - path so it would be game dot players to
45:48 - Alvin blocks so if I wanted to kick
45:51 - however and blocks out of the game I
45:52 - could say V Curran kick and that would
45:58 - kick me from the game then we would
45:59 - reach the end and we would go back to
46:02 - the start because we've still got
46:03 - another object in the table so I would
46:06 - now update to two because that is the
46:09 - second index here and the V the value
46:12 - would update to be the path will be the
46:16 - reference to newts in the in the game
46:20 - here because it's the object so game dot
46:23 - players Newt so it would be the same as
46:25 - saying game to players new code on kick
46:27 - you would get kicked as well then we
46:29 - would reach the end and we would be
46:31 - finished so let's check this out let's
46:35 - do a little weight here weights five
46:37 - just so we can get into the game let's
46:40 - play and after five seconds we should
46:45 - hopefully be kicked there we go you were
46:48 - kicked from this game so what happens is
46:50 - it would kick everybody out of the game
46:51 - but you can see how it is performing it
46:54 - would perform the action for every
46:56 - player in the game because everybody
46:58 - everybody would be in that table because
47:00 - the game has created the table its given
47:03 - it us and everybody who's currently in
47:04 - the game would be in that table and
47:06 - because a for loop applies the same code
47:08 - to every index in the table everybody
47:11 - would get kicked so that is what a for
47:14 - loop is but you can also do some
47:16 - checking so if you only wanted a certain
47:18 - player to get kicked so for example if
47:21 - we had loads of players in the game but
47:24 - I only wanted to kick a player if they
47:27 - had I don't know and if they have let me
47:32 - think okay I've got an example so if the
47:36 - player was a new player for example so
47:39 - let's say M V dot
47:42 - count age is less than 15 so if they're
47:47 - less than if their account is less than
47:50 - 15 days old then I could kick them now
47:54 - because this is the player object each
47:57 - player object has a property called
47:59 - account age so we could check every
48:01 - player's account age because this is
48:03 - going to ruin for everybody so for each
48:05 - player we would check their account age
48:07 - and if it is under 15 days then we would
48:11 - kick them but obviously not every player
48:12 - is going to be under 15 days old so for
48:16 - some players we would get this a
48:17 - statement well and that would not be
48:19 - true so we would not run this code we
48:21 - would just move on to the next player
48:23 - but if somebody joined who was under 15
48:26 - days old we would kick them now I'm
48:29 - gonna change this to 9 9 9 and 9 and run
48:33 - this and we'll see if I get kicked ok I
48:40 - did get kicked because obviously I
48:43 - haven't been on roblox for that length
48:46 - of time we're very very long but if I
48:48 - changed it to 15 days obviously I've
48:50 - been on roblox for more than 15 days so
48:54 - it won't kick me now let's run this
48:57 - again and it's a pretty bad bad example
49:02 - to be honest because there's only one
49:04 - player in the game but if you had a full
49:06 - server of people and then you suddenly
49:08 - run that code it would kick quite a few
49:11 - people out probably so you can see how I
49:13 - didn't get kicked here but a for loop
49:16 - will loop through everything in a table
49:19 - so because game drop players : get
49:22 - players is a table of everyone in the
49:23 - game it is a for loop is a good way of
49:27 - looping through players so example was
49:29 - include if you want to give everybody in
49:31 - the game ten cash or you know if you
49:34 - want to give them a money at the end of
49:36 - a round a for-loop is great
49:37 - if you want to teleport every player in
49:40 - your game to a certain location a
49:42 - for-loop is great because you could be
49:44 - like the block character dot humanoid
49:50 - route parts dot C frame equals vector
49:54 - three you
49:55 - if you don't know what this means when
49:58 - you say doc character on a player object
50:01 - is getting there the character and when
50:03 - you say humanoid root part see frame
50:05 - when you move there humanoid root part
50:07 - you're moving a player basically so the
50:10 - humanoid root part is a central part in
50:13 - the player when you move that the whole
50:15 - body moves with it so it's like
50:16 - teleporting a player to a certain
50:17 - location so if I was to just get a
50:21 - position over here this is what this get
50:25 - this position if I was to put this
50:30 - position in here what would happen is it
50:32 - would teleport all the players into the
50:34 - game in a sari in that game to this
50:37 - position here which is at the end of the
50:39 - map and if we have a full server of
50:41 - people which we will we will assemble
50:44 - that right now let's so they'll load up
50:46 - a server of people whoops and my bad
50:49 - this needs to be a C frame not a vector3
50:51 - in fact we can just say position because
50:55 - we haven't learned about C frames yet my
50:56 - apologies so if I just wrote if I
50:59 - publish this game I get loads of people
51:01 - in it you should expect everybody to be
51:03 - teleported to the side of the map okay
51:08 - so here we are in game with a few people
51:10 - that have joined me and we've got a
51:12 - countdown in the bottom left corner of
51:14 - when the for loop is going to start and
51:16 - hopefully it teleports everybody to the
51:19 - end of the map so what's going to happen
51:21 - is is going to get that table of players
51:24 - the game is going to give us that table
51:25 - which we have put in the for loop game
51:27 - DUP players call and get players and
51:28 - it's going to loop through every single
51:30 - player and teleport them one by one but
51:32 - it's going to happen so quickly but it's
51:34 - gonna look like everybody get teleported
51:36 - at the same time so 3 to 104 loop is
51:39 - going to run and boom we all get
51:41 - teleported to the end of the map so
51:44 - there you go that is what a for loop is
51:47 - a for loop loops through a table and it
51:50 - runs code on each item in that table now
51:54 - it doesn't have to perform there's
51:56 - enough to run code that changes that's
51:58 - able it could just print out a message
52:00 - like I show you at the start but we can
52:02 - also use those I and V values index and
52:06 - value we can use them to edit the table
52:09 - or to do things with the tables data so
52:12 - in this case we are changing we are
52:15 - using the data in that table so the
52:17 - players object which we've gotten from
52:19 - the table each item and we are moving
52:22 - the players characters so we're using
52:24 - that data from the table but you could
52:26 - also increment a player's cash value
52:30 - which is in their player by using the
52:33 - game curl and get players thing also you
52:36 - can use it to change properties of you
52:39 - know different objects like bricks like
52:41 - we changed the property of the material
52:43 - we also deleted the bricks so a full
52:47 - loop can be used for anything really if
52:49 - you're looping through lots of things at
52:51 - once and if you want to change lots of
52:52 - things at once you can use a for loop
52:54 - and it will make the code more efficient
52:56 - because you haven't got loads and loads
52:57 - of lines which are doing the same thing
52:59 - for just different objects because you
53:01 - put all those objects in the table you
53:03 - either create table yourself or you use
53:05 - something like get children or get
53:06 - players to give you that generated table
53:10 - which the game makes and we make use of
53:11 - those inbuilt functions like get
53:13 - children and get players which will
53:15 - return that table to us and we use those
53:18 - tables we loop through them and we're
53:20 - able to do things with with those tables
53:24 - and we can edit them and we can edit we
53:26 - can edit the tables we can edit their
53:27 - values we can use the values to access
53:29 - different things so very very useful
53:32 - stuff and it's something that you will
53:35 - be using a lot in roblox
53:37 - so is one of the most important things
53:39 - need to know just like if statements
53:41 - just like functions one of those things
53:43 - you're gonna use all the time you can't
53:44 - expect to be able to script the game
53:46 - without using for loops now if you are
53:49 - still confused please do put comments in
53:51 - the description I will most likely be
53:55 - making a follow-up video from this one
53:57 - where our answer your questions we might
53:59 - do a bit more on them in the future but
54:01 - this is all we need to know really this
54:02 - is pretty much what anybody whose
54:05 - scripts needs to know about a for loop
54:08 - and how to use them because you're not
54:10 - going to get any more advanced than that
54:12 - we're over the hardest stuff and it
54:15 - probably was easier than you thought it
54:17 - would be because everybody gets confused
54:18 - by those i/v values and what's the
54:22 - brackets for
54:23 - why why we using tables so again it's
54:26 - very important you learn those tables
54:27 - watch the previous video on tables very
54:31 - very useful video and I do recommend you
54:34 - check it out and wildin as well if
54:36 - you've reached the end here because 55
54:39 - minutes very very long for a video but I
54:41 - know you guys do like the content when
54:43 - you get a nice long video I know you
54:45 - guys like to to watch those so I like
54:47 - making them as well so any questions you
54:48 - have put them in the description do try
54:51 - searching up on the Internet as well for
54:53 - for loops because there there's a lot of
54:58 - helpful stuff out there as well and if
55:02 - you look on the roblox website roblox
55:04 - developer hub as well there's some good
55:06 - examples I might link those in the
55:07 - description as well anyway thank you for
55:09 - watching do subscribe if you enjoyed the
55:12 - video do like the video if you want to
55:14 - see more of them again leave comments
55:16 - with any questions and you can click the
55:19 - album blocks logo in the middle of your
55:20 - screen subscribe you can also check out
55:22 - the rest of the series the thumbnail
55:23 - should be on screen now thank you for
55:26 - watching Cheers
55:27 - bye