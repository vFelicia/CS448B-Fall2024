00:00 - okay I'm going to show you how to use
00:02 - bindable events and bindable functions
00:05 - in Roblox so what is a bindable event
00:08 - well you might have come across a time
00:11 - where you've wanted to share some
00:14 - information between a scripts perhaps
00:15 - you have a function which you want to
00:18 - call from another script but because
00:21 - that function was not declared in the
00:22 - same script you cannot run it directly
00:26 - from your other script let me give you
00:28 - an example so if we create a function to
00:30 - delete the base
00:31 - plate okay and in that function we do
00:35 - indeed decide to delete the base plate
00:37 - what if I wanted to call this function
00:40 - from another script now there's not
00:42 - really any point in doing
00:45 - that because you could just delete the
00:46 - Basse plate from another script but
00:48 - let's imagine you have some
00:51 - code which you only have in one script
00:53 - which you want to call from another
00:55 - script so I've got my main script I've
00:56 - got my other script and in my main
00:58 - script I've got the delete Bas plate
01:00 - function how do I call this function
01:03 - from another script okay well I'm going
01:05 - to show you how to do it so you'll use a
01:07 - bindable event and a bindable event is
01:09 - essentially an object which you can use
01:12 - to trigger some kind of action in
01:14 - another script you can call it from one
01:16 - script and then you can have a listener
01:18 - set up in another script to listen out
01:20 - for it and then you can call a function
01:24 - from that other script so essentially
01:26 - it's one script telling another script
01:28 - to run some code or run a particular
01:31 - function that exists in that other
01:32 - script so here we go I'm in my other
01:35 - script and I want to call the delete
01:37 - base plate function but the delete base
01:39 - plate function is in the main script so
01:41 - we're going to create a bindable event
01:43 - in the main script and we're going to
01:45 - call it delete base plate you can call
01:47 - it whatever you like doesn't have to
01:49 - correspond to the function's name in any
01:51 - way at all and then we'll just say game.
01:54 - servscript service main script. delete
01:58 - base plate fire colon fire okay and then
02:02 - in the main script we'll say script do
02:05 - delete base plate
02:07 - doevents connect function okay like this
02:11 - and I suppose it's probably best to put
02:13 - this in a wa for child just to make sure
02:15 - the event gets created and then inside
02:19 - of there we can say delete base plate or
02:21 - even we could just say delete base plate
02:24 - like this so let's just do a task.
02:29 - weight of 2 seconds so we can actually
02:31 - see this change and if we click on play
02:34 - you will notice that after 2 seconds the
02:36 - base plate gets destroyed even though we
02:40 - didn't run the function directly from
02:41 - the main script we merely set up an
02:44 - event listener which would listen out
02:46 - for when the delete base play is fired
02:48 - and it would fire the function when that
02:51 - event does get fired and then it's from
02:52 - the other script where we fired the
02:54 - bindable event so that is how it works
02:59 - that's it now what's the difference
03:01 - between a bindable event and a bindable
03:03 - function well this is where it starts to
03:05 - get interesting because I've not really
03:08 - shown you any practical examples of
03:10 - where a bindable event would be used
03:12 - just yet but one in particular would be
03:16 - if you had a data store
03:18 - script okay we'll just call this data
03:20 - store and let's imagine when a player
03:23 - joins the game you'll load their data
03:25 - store into a global table okay so you
03:28 - might have you know if Alvin blocks is
03:31 - in the game then I'll have a table with
03:34 - my data file where you can make any
03:36 - changes you could make changes to the
03:38 - amount of cash that I've got you could
03:39 - make changes to the amount of you know
03:41 - items if I place down an item you'll
03:43 - want to update this
03:46 - table now let's say that I have another
03:49 - script which
03:51 - is it's got the task of handling item
03:55 - placement okay so when I place down an
03:57 - item in this script I now need to update
04:00 - my data file but the data files are
04:03 - handled in the data store script because
04:05 - it's in this table so how can I from
04:09 - this placement script how can I send
04:11 - some kind of request to add this new
04:14 - item that I've just placed down into my
04:16 - data file without having to use the data
04:19 - store service to load my data store
04:21 - again because my data file is probably
04:23 - already open it's already open in this
04:25 - data store script so I can't access it
04:27 - from another script because then we run
04:28 - the risk of overwriting my data so what
04:32 - we can do is we can use a bindable event
04:36 - and so it would be a simple as saying if
04:39 - we just change the name of this to place
04:42 - item for example we could say game.
04:45 - server script service. data store. Place
04:48 - item fire and I could pass some
04:50 - information such as the item name uh
04:54 - such as
04:55 - table and perhaps I could also pass its
04:58 - position if I wanted to
05:01 - and then we could in our data source
05:04 - script we could set up a listener for
05:06 - that very
05:09 - event
05:11 - and we take the item name we take the
05:14 - item position and we could say table.
05:16 - insert we'd also want to you know pass
05:19 - the player um but we'll just assume that
05:23 - we know that it's Alvin blocks in this
05:26 - example so we could say data stores
05:29 - Alvin block
05:30 - and we could insert into the items table
05:33 - this new table we could say the name
05:35 - equals name position equals position
05:40 - just like so and then we could print out
05:42 - the data stores table if we just have a
05:44 - look at this in action you'll see where
05:47 - I'm going with this in a second um with
05:49 - the bindable functions which we'll get
05:51 - onto just give me a pass. we there so we
05:54 - can actually see the
05:58 - changes and after two seconds you'll
06:00 - notice that in the items table we now
06:03 - have that item listed there so that is a
06:07 - practical example so where do the
06:08 - bindable functions come in well bindable
06:10 - functions they do the exact same thing
06:12 - as bindable events except they also
06:15 - allow you to then return some kind of
06:18 - value or message back to the original
06:21 - script you called it from so let's say
06:24 - for example this didn't go wrong maybe
06:27 - it went wrong sorry maybe it didn't go
06:28 - right something happened I couldn't
06:30 - insert it into the table some kind of
06:31 - error occurred maybe we couldn't find
06:33 - the data file maybe the data stores were
06:35 - down I don't know well how do we tell
06:38 - the placement script that something went
06:40 - wrong so that we could potentially show
06:42 - a message to our player or prevent the
06:44 - item from being placed because it
06:46 - couldn't go into our data file well
06:48 - that's where the bindable function comes
06:49 - in and the bindable function it's a
06:51 - callback which means it's always going
06:54 - to the the purpose of it is to send some
06:56 - information back to where you called it
06:58 - from so let's turn this into a bindable
07:02 - function and we'll call it Place item
07:06 - we'll just remove the bindable event
07:09 - well since this is now a bindable
07:10 - function and it's a call back we have to
07:12 - call it a little differently so rather
07:14 - than saying fire we will say invoke okay
07:19 - and since we're expecting some kind of
07:21 - value to be returned we're going to
07:22 - create a variable I'm going to call it
07:26 - something different than return we'll
07:27 - just call it value this is going to be
07:29 - the the value that gets returned back to
07:31 - our placement script from the data store
07:33 - script so we're going to keep the
07:35 - parameters that we
07:36 - gave and in the data store script we
07:39 - also need to change this do event it's
07:42 - going to be do on invoke and we're no
07:45 - longer connecting it to a function we
07:47 - are giving it a callback function so it
07:49 - just becomes on invoke equals function
07:53 - which means we no longer need this
07:54 - closing bracket okay so now we will need
07:59 - to return a value so we'll just return
08:01 - true because everything seems to have
08:03 - gone well and then this value will be
08:06 - true because it's what we've returned so
08:09 - if I was to return a string for example
08:11 - that said hello then our value would be
08:14 - hello and if I was to print out hello
08:16 - sorry if it was to print out value it
08:18 - would be
08:20 - hello as you can see so there's there's
08:24 - not really a practical use for a
08:26 - bindable function in this case because
08:28 - we know it's it's going to insert into
08:30 - the table
08:32 - uh I'm trying to think of where it would
08:34 - be useful here maybe if the player was
08:37 - buying an item right and we checked to
08:40 - see if they could afford it then you
08:42 - could say if can afford item or if you
08:47 - can't
08:49 - afford the item then you might want to
08:51 - return false or you might want to return
08:54 - cannot afford okay and then you could
08:56 - check to see if the value was can afford
08:59 - and if it was cannot afford you'd
09:01 - probably want to delete the item what
09:04 - you need to know here is that a bindable
09:05 - function will let you return some kind
09:08 - of value or message to the original
09:11 - script so you from your placement
09:13 - scripts will be able to know if the
09:16 - operation that you're trying to conduct
09:17 - in this function was successful or not
09:20 - okay that's the basis of it um so it's
09:22 - allowing you two-way communication
09:24 - really you can send that message from
09:26 - the placement script to another script
09:29 - you can you can signal some kind of code
09:32 - to be to to start running in another
09:35 - script but not only that because what
09:37 - I've just outlined is what you can do in
09:39 - a bindable event you can trigger some
09:41 - code in another script you can trigger a
09:43 - function in another script using a
09:45 - bindable events but with a bindable
09:47 - function you can do the exact same thing
09:49 - but return something back perhaps you're
09:52 - expecting something from your bindable
09:55 - function you know you could even request
09:59 - a asset right we could we could
10:03 - create a
10:06 - new
10:08 - instance right we could create a new
10:10 - part or a new
10:13 - folder in the workspace and we could
10:16 - return it and then in the placement
10:20 - script we could uh actually do things
10:23 - with with that value so we could say
10:25 - value dot uh we'll just print out the
10:28 - name right we'll print out the name and
10:30 - then you'll see what
10:31 - happens so the folder has been has been
10:35 - created in the data store scripts and
10:38 - we've returned it which means we now
10:41 - have a reference to that folder that
10:42 - we've just created despite not having
10:45 - created it in this placement script
10:47 - because we created it in the data source
10:48 - script and we've just returned it so
10:51 - that's that's it really bindable events
10:53 - allows you to trigger code in a
10:55 - different script bindable function
10:58 - allows you to trigger code and also send
11:02 - back some data whether that's an object
11:06 - a number string whatever or even a true
11:09 - or false value just to say everything
11:11 - went well that's it only other key
11:14 - difference is a bindable function will
11:18 - yield so the code in my placement script
11:22 - will pause until something is returned
11:25 - from the bindable function now I think
11:28 - there is some kind of timeout if a value
11:31 - doesn't get returned after X amount of
11:34 - seconds it might carry on you might need
11:36 - to qu me on that but it's one of those
11:38 - things which you probably don't really
11:40 - need to worry about okay but bindable
11:43 - functions they yield so if I was to do a
11:46 - task. weit of 3 seconds
11:48 - here and we had some code
11:52 - underneath watch what would happen I
11:54 - click on
11:55 - play the bindable event has fired but
11:58 - the code code underneath it is not
12:00 - running until that value gets returned
12:04 - from the on invoke function so I hope
12:08 - that video was useful uh one other thing
12:10 - to note is that binda bles can only work
12:13 - in the environment that they are set up
12:17 - in for example you can't have server
12:19 - client here if you you have a bindable
12:22 - event on the server it will only be able
12:24 - to be called and listened to on the
12:25 - server if you have a bindable event set
12:28 - up on the client then you can't call it
12:31 - from the server right that's where
12:33 - remote events remote functions come in I
12:35 - do another video on those in the future
12:38 - essentially the same thing except
12:40 - instead of calling it from the server to
12:42 - the server or the client to the client
12:44 - it's the client calling the remote event
12:46 - or the remote function between the
12:48 - server and back and forth okay so we'll
12:51 - do another video on that but this is all
12:52 - you need to know about binda bles um I
12:55 - hope they're useful and like I say they
12:57 - work just the same on the client
12:59 - although you'd be using them between two
13:01 - client
13:02 - scripts so thanks for watching let me
13:04 - know if you enjoyed the video please
13:06 - subscribe if you find it useful let me
13:08 - know if there's any other videos you'd
13:09 - like to see and I'll catch you in the
13:10 - next one