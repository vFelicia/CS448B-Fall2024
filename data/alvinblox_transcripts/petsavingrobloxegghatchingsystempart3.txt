00:00 - hey everyone it's great to be back and
00:02 - i'd just like to apologize for the lack
00:03 - of videos in the last few weeks
00:05 - i've just had a lot of things to do been
00:06 - working hard on my roblox game which i'm
00:08 - looking forward to showing you
00:10 - uh very soon but uh i'm hoping to get
00:12 - back to a regular
00:13 - uh more consistent schedule now so
00:15 - hopefully this is the first of many
00:17 - so a question that a lot of people have
00:18 - been asking is how can you make the
00:21 - pets from your egg hatching system
00:24 - save and load and i thought well i'll
00:26 - create this video but also
00:28 - if you're not working on the egg
00:29 - hatching system you can also watch along
00:32 - and this video will help you learn how
00:33 - to save things such as
00:35 - objects or inventories for other things
00:38 - so you'll be able to learn how to save
00:40 - items in a data store by the way the
00:43 - code from this video
00:44 - is going to my channel members so if you
00:46 - want to get that code that source code
00:48 - you can become a channel member and it's
00:50 - available in my discord server for
00:52 - members
00:53 - so what we're going to do is i'm just
00:55 - going to show you what we've got so far
00:57 - so we've got
00:58 - this inventory folder in my player and
01:01 - when you buy
01:02 - or hatch an egg the name of the pet
01:05 - which you just unlocked goes into this
01:08 - folder it's
01:10 - a string value is inserted and the name
01:12 - of that string value
01:13 - is lavalord so what we can do is we can
01:17 - loop through this folder when you leave
01:19 - the game
01:20 - we can get all of the names of the
01:22 - patent that you own from this inventory
01:24 - and we can put them in a table which
01:26 - stores
01:27 - uh information or data and then we can
01:30 - save that table
01:31 - which contains all of the names of our
01:33 - pets to a data store
01:34 - and then when we load the game up next
01:36 - time when we next rejoin
01:38 - we'll be able to get that table from our
01:40 - data store
01:42 - loop through all of the names of the
01:44 - pets that are stored in the table
01:45 - and load them back in so what we need to
01:48 - do is
01:48 - do the coding to put the pets
01:52 - names into a table save it to the data
01:54 - store and then
01:56 - load them all back again when saved
01:59 - so if you're not already aware what data
02:01 - store is data stores roblox is
02:03 - a way of allowing you to save and load
02:06 - data
02:07 - and what we'll do is we'll just go into
02:10 - our main script here
02:11 - and we're going to work on the saving
02:12 - part first so i'm going to collapse
02:14 - the equipping function because we don't
02:16 - need that at the minute um
02:18 - just to i'm going to collapse these two
02:21 - as well because we don't need to deal
02:22 - with them at the moment
02:24 - but at the top of the script looks like
02:26 - they've
02:27 - opened themselves up again i'm going to
02:29 - get the data store service now this is
02:31 - what you need in order to
02:33 - call the essential functions relating to
02:35 - data source so set async
02:37 - get async etc so local data store
02:40 - service
02:41 - equals oh by the way um i should put
02:44 - this on dark mode
02:45 - for you guys because i know you don't
02:47 - really like it when it's light
02:50 - there we go so data store service equals
02:52 - game colon get service
02:54 - and we'll say data store service okay
02:57 - now we need to i'm gonna do the coding
03:00 - for when you leave the game so when you
03:01 - leave the game
03:02 - we're gonna get all of the pets that you
03:04 - own and put them into that table
03:05 - so we can use a handy event called
03:07 - player removing and it will
03:09 - fire when a player leaves the game
03:12 - game.players.player removing
03:14 - colon connect function
03:18 - and we have an argument or parameter of
03:20 - the
03:21 - uh player so this argument tell will
03:24 - will be the player who leaves the game
03:27 - obviously we don't know
03:28 - who is going to leave the game so
03:29 - whatever we do with this player
03:31 - argument will be done to the player that
03:33 - leaves the game so
03:35 - we can firstly check to see if the
03:38 - player has that pet inventory
03:39 - in their player object which they should
03:41 - but just in case they don't
03:43 - if player cannot find first
03:47 - child and we called it pet inventory
03:50 - that's the name of the folder
03:52 - then we can create that table so local
03:57 - table in fact we'll just we'll call it
03:59 - something different
04:00 - um inventory equals and we'll do a blank
04:04 - table
04:05 - right next we're going to loop through
04:08 - all of the pets in that inventory and
04:10 - add them to the table
04:12 - so for i comma
04:16 - v in pairs and we're going to loop
04:19 - through
04:20 - the pet inventory so we can just say
04:23 - player.pet inventory now because we know
04:25 - it's there
04:26 - colon get children so when we use get
04:28 - children
04:29 - over here it generates a table
04:32 - of all of the objects in
04:35 - the folder so then because it's a table
04:39 - we're able to loop through it using a
04:41 - for loop and a for loop
04:42 - allows us to one by one
04:46 - execute code for every single item in
04:49 - that
04:50 - folder and what we want to do oh by the
04:51 - way i forgot to add a do
04:53 - on the end there so inside of here any
04:55 - code that we write
04:56 - is going to run for every single pet in
04:59 - there so if we've got five pets
05:01 - any code in here is going to run five
05:04 - times
05:05 - so what we're going to do is we're going
05:06 - to just insert the name of this pet
05:10 - into the table above and
05:13 - how do we know the name of each pet well
05:16 - luckily we have these
05:17 - two values here of our variables i get i
05:20 - guess
05:20 - i and v so i is the counter so
05:24 - the first object that we loop through is
05:27 - going to be the first one so i
05:28 - is one then when it finishes executing
05:30 - the code goes to the next one i is going
05:32 - to be two and it keeps on going up
05:33 - depending on how many objects we have
05:35 - but we're not going to worry about that
05:36 - what we're interested in is this one
05:38 - here the v v stands for value
05:40 - it's the and it's going to be the object
05:43 - that is being currently looped through
05:45 - so we have a direct reference
05:47 - to each object when it gets when we're
05:50 - looping through it so
05:51 - v is going to be one of the values in a
05:53 - table and there's no
05:54 - link between v mean value and and the
05:57 - children of the folder being
05:59 - string values it's just that we always
06:01 - call v the value
06:03 - but you can change them to whatever you
06:05 - want you could call it burger
06:07 - and it would still have the same um
06:10 - object attributed to it so we are just
06:13 - going to say
06:14 - table dot insert and we're going to
06:15 - insert into the
06:17 - inventory table i'm going to insert v
06:19 - dot name
06:20 - so we're we're storing the name of that
06:23 - pet
06:24 - in this inventory table and it's
06:26 - basically what these three lines have
06:28 - done
06:28 - they've dumped all names of the pets
06:31 - that we own
06:32 - into the inventory table so now we can
06:34 - save the inventory table
06:36 - to the data store and the reason we're
06:38 - saving the name of the pet
06:39 - is because you can't save instances to
06:42 - data source so you can't save
06:43 - objects to data stores you have to
06:47 - serialize them so that means um
06:51 - saving its its properties
06:54 - and then you can assign those properties
06:58 - when you load them so we're not doing
06:59 - that too much here because we're just
07:01 - saving the name and obviously we can
07:03 - just look up the pet
07:04 - in replicated storage by giving its name
07:07 - um when we load it in
07:08 - so we now need to save it to the data
07:11 - store so we can say
07:12 - data in fact we need to create our data
07:14 - store so we've got the data store
07:16 - service but we haven't actually created
07:17 - the data store for our game
07:19 - the data store object so we have to do
07:21 - local
07:22 - data store and the data store is what
07:25 - we're going to
07:27 - um call our functions on so like uh
07:30 - cassette sync get async
07:31 - we're doing it for this particular data
07:33 - store for this game
07:35 - well not for this game but for these
07:37 - pets so we've got a specific data store
07:39 - for our pets if you wanted another data
07:41 - store you could create another one
07:43 - but this specific data store i'm going
07:45 - to call it pet data store actually
07:47 - so pet data store equals data store
07:49 - service colon
07:51 - get data store and we can give a name
07:54 - for this specific data store so i'm
07:55 - going to give it
07:56 - pet data store it doesn't matter what
07:58 - you call it because this
07:59 - is this name is local to your game so
08:03 - as long as you don't have two data
08:04 - stores name the same thing in the same
08:06 - game
08:07 - you'll be fine so now we can say pet
08:09 - data store
08:11 - set async and that just means save
08:14 - something to the a store
08:16 - now when we save something to the data
08:17 - store we need to supply
08:19 - two bits of information because we need
08:20 - to tell our script
08:22 - um well if we have loads of players
08:26 - playing our game then how do we tell
08:29 - who's
08:30 - whose data is which we need to uniquely
08:32 - identify
08:33 - each player's data and we do that with a
08:35 - key so a key
08:36 - is supposed to be unique and for our
08:39 - data store here
08:40 - because we have one single data store
08:42 - for our pets and we're not saving
08:43 - anything else to this data store
08:45 - what we can do is we can just supply the
08:47 - player's user id
08:50 - so player dot user id now if you wanted
08:52 - to you could do dot dot and you could
08:54 - add a little string at the end just to
08:55 - identify your key so you could put pet
08:58 - and this would be useful if you had one
09:00 - data store
09:02 - so whoops you only had one data store
09:03 - here and you were saving things like
09:05 - your coins your pets etc
09:07 - you'd have one key using the user id and
09:09 - then you've got
09:10 - hyphen pet on the end and then another
09:12 - one might be hyphen coins and that way
09:14 - you can distinguish between the two keys
09:16 - but when we load the data store we're
09:18 - actually going to tell the script to
09:19 - look up
09:20 - in the data store based off a specific
09:22 - key so we're just going to use this key
09:24 - here
09:25 - now we add a comma and now we can tell
09:27 - the script the data that we want to save
09:29 - and in this case we're going to save
09:30 - that table now you can save tables to
09:33 - data stores but you can't save
09:34 - objects as i said earlier hence why
09:36 - we've had to do this thing here
09:38 - where we've looped through all of the
09:41 - values in your pet inventory
09:43 - and added them into this table so now
09:45 - that we've done this
09:46 - it's going to save to the data store but
09:48 - we just need to add a p
09:49 - call because data stores can fail when
09:52 - you request something from the data
09:54 - store service
09:54 - they could be down they could be not
09:56 - working you know and they can
09:58 - they can send back an error and if it
10:00 - sends back an error it's going to crash
10:02 - our entire script is basically going to
10:03 - stop it and it's not going to save any
10:05 - more data
10:06 - so in the event of a data store failure
10:09 - we just want to catch that error we
10:10 - don't want to
10:11 - stop the whole script because it could
10:13 - just be an error with that individual
10:15 - player we don't want to stop the script
10:17 - because that would stop everyone else's
10:18 - data from being saved
10:20 - so we can use a p call and a p call
10:23 - is uh it contains a function
10:27 - and if any code in that function fails
10:30 - then it won't
10:30 - error you'll still be able to like read
10:32 - the error message but it just won't stop
10:34 - the entire script
10:35 - it will just carry on running as usual
10:37 - so local success
10:39 - comma error message
10:42 - these are my two variables which will
10:45 - return
10:46 - back information equals p call function
10:49 - and like this you can see i just indent
10:51 - it and i have an
10:52 - end with a closing bracket and any code
10:55 - inside of this p
10:56 - call will now it won't stop the script
10:58 - if it errors
10:59 - and it's just that we do that with a
11:01 - data store since they're the most likely
11:03 - to fail out of any other code in the
11:05 - script because this is obviously making
11:07 - a call
11:07 - to roblox's servers which could
11:10 - potentially go down
11:11 - so we just want to say if success then
11:15 - print data saved
11:18 - so success will either be true or false
11:21 - and it's
11:22 - automatically set by the p call
11:25 - when it is finished the code inside
11:28 - the success and error message will be
11:30 - populated with some information
11:32 - so if success is true then we won't have
11:34 - an error message
11:35 - else if success is not true we can print
11:39 - error and we can also just do a dot dot
11:42 - and concatenate so join together
11:44 - with that string print out our error
11:46 - message like that
11:47 - so that is now going to save our pets to
11:51 - the data store and we can
11:52 - see if this saved because i've got a
11:54 - handy plugin called
11:56 - uh datastore editor by crazyman32 so i'm
11:59 - just gonna go into the game
12:01 - and in fact i'll just show you the
12:03 - datastore first let me just get the
12:04 - plugin up and running
12:07 - so the plugin allows you to enter a key
12:11 - for the data store and then you can
12:12 - check any data that is stored
12:14 - you can see if your data saved properly
12:16 - whatever so if we go in here
12:18 - and i put in my data store name it's
12:20 - obviously going to be pet data store
12:25 - okay and connect we don't need a scope
12:28 - oh my bad i need to
12:31 - turn on the studio access to api
12:34 - services
12:35 - so if you click on the game settings go
12:37 - to
12:38 - i'm not sure where it is actually
12:42 - it's here somewhere here we go security
12:44 - tab click on enable studio access to api
12:47 - services
12:48 - this allows us to make requests to the
12:51 - data store straight from roblox studio
12:53 - because normally you're only going to
12:55 - make those requests from a roblox game
12:57 - but we can test it in roblox studio by
12:59 - turning this on
13:00 - so i'm just going to x out of here um it
13:02 - seems that actually it's stuck so i'll
13:04 - get back to you
13:07 - okay i think we're back uh basically my
13:09 - studio uh just got stuck on this screen
13:11 - and it wouldn't work for some reason but
13:12 - i've turned it on
13:13 - and if we go back to the data store
13:15 - editor now i can put in the name again
13:18 - pets data store and connect
13:21 - and now we're connected to the games
13:23 - data store so what with this
13:25 - specific data store because you can have
13:27 - multiple data stores for a game
13:28 - now i need to give my key so i need to
13:30 - uniquely identify
13:32 - my data store so that's going to be my
13:34 - user id which is 14943069
13:37 - you can find it in the address bar on
13:38 - your profile and then hyphen
13:40 - pets because that's what i said it was
13:42 - going to be and obviously there's no
13:43 - data yet because we haven't gone into
13:44 - the game
13:45 - but if i close this down go into the
13:47 - game
13:48 - i hope my scripts saved um because i got
13:52 - an auto i got an auto recovery file
13:54 - anyway let's go over here and let's
13:57 - click on the
13:58 - egg hatcher
14:02 - currently gotten only got one pet
14:04 - because it's going to be the monkey that
14:05 - i just unboxed
14:06 - so the monkey is now in my pet inventory
14:08 - i'm going to leave the game
14:10 - i'm going to open up the output window
14:11 - at the same time don't worry about these
14:14 - error messages if i stop the game oh
14:18 - we didn't get any messages ah that might
14:19 - be because
14:21 - um the play solo yeah because we're in
14:24 - play solo mode
14:25 - what would have happened is it would
14:27 - have shut down the game
14:28 - before um it's a chance to save that's
14:32 - only in play solo
14:33 - to counteract against this though very
14:35 - simple we can just say
14:37 - game code on bind to close and we can do
14:39 - a function inside of here
14:41 - and then we can just loop through all
14:43 - the players in the game
14:44 - so for i comma v in pairs game dot
14:47 - players can't
14:48 - get players do and what i'm going to do
14:51 - actually is i'm going to
14:52 - take this code out of my player removing
14:54 - just so that we don't have it
14:55 - repeated twice here and here i'm going
14:58 - to take it out
14:58 - and create a function local function
15:01 - save data
15:03 - we're going to take an argument for the
15:04 - player so we can specify whose data is
15:06 - going to be saved
15:07 - and then that way instead of having to
15:09 - repeat it in the player removing and in
15:11 - the bind to close
15:12 - we can just say save data player we need
15:15 - we we passed each player in so we passed
15:17 - the player as an argument from the
15:19 - player a moving event to the function
15:21 - so the function knows who's data to save
15:23 - and we're going to do it here as well
15:25 - but in this case because we're looping
15:28 - through
15:28 - the players in the game using get
15:30 - players get players is is a
15:33 - is a different it's similar it's
15:34 - basically does the same thing as get
15:36 - children but it only returns player
15:37 - objects
15:38 - so this time because i've called it v in
15:41 - my
15:42 - for loop i said earlier the value can be
15:44 - called whatever you want so i can call
15:45 - it player
15:46 - and i can call save data on the player
15:49 - now let's head back
15:51 - and try it once more so what this does
15:54 - this bind to close
15:55 - is because when i click the stop button
15:57 - in play solo it stops the server
15:59 - immediately
16:00 - so if we're just about to
16:03 - run the save data code in the player
16:05 - removing events
16:07 - then it would just stop before it saved
16:09 - the data because we've shut down the
16:10 - server
16:11 - whereas in a roblox game they usually
16:13 - shut down a few seconds after you leave
16:15 - so it's not instant but buying to close
16:18 - it only stops the server when um
16:22 - something we've put in the bind to close
16:24 - has finished so in this case
16:25 - we've put the save data you can see now
16:27 - when we press stop
16:28 - there's more of a delay um when we press
16:31 - the stop button
16:32 - it's about 10 seconds or so if we open
16:34 - up the output it says
16:36 - data saved and it's done it twice
16:38 - because it's managed to
16:40 - do it in the player removing there's
16:41 - been enough time for that but because we
16:43 - were the last players in the game
16:45 - when their server was about to shut down
16:47 - it looped through and just made sure
16:48 - that it saved again
16:49 - so this time let's go into date store
16:52 - editor
16:52 - okay back in here connect to our data
16:54 - store let's put in the key
16:56 - one four nine four three six nine hyphen
16:59 - pets
17:00 - and there we go we've got a piece of
17:03 - data saved in our data store table
17:05 - and it's a lavalord so you go in here
17:08 - we've got our lavalord so we've managed
17:10 - to save the data
17:12 - and next what we need to do is load the
17:14 - data
17:15 - so this is this is going to be uh simple
17:17 - to do we go into the player added
17:19 - function here we need to um
17:22 - load the players data from the data
17:24 - store so we're going to use get async
17:26 - now i'm just thinking of the best way to
17:28 - do this now obviously the data that's
17:30 - saved
17:30 - is a table so let's create a little
17:33 - variable here call it data we just
17:36 - won't set it to anything at the moment
17:37 - we're just establishing the variable
17:40 - because if we load the data and the data
17:42 - is nil
17:43 - then we we want the data um
17:46 - we want basically we want to i'll show
17:48 - you in a minute basically but
17:49 - because the data could either have some
17:52 - value in it or it could be nil because
17:54 - if it's nil you have no data or you
17:55 - might be a new player
17:56 - uh we're going to need to set the data
17:59 - value variable to something
18:01 - and then we want to access it from
18:02 - outside of the for loop which we're
18:04 - about to do the sorry the if statement
18:06 - that we're about to do
18:07 - the if statement that we're about to do
18:08 - is going to check if you have a data or
18:10 - not so
18:11 - um we can say
18:14 - if data store serve sorry if
18:18 - pet data store get a sync
18:23 - sorry let me just think about this um
18:25 - [Music]
18:27 - yeah so let's do
18:30 - local data equals pet data store
18:34 - colon get async so get async
18:37 - allows us to query the data store
18:40 - servers
18:40 - asking if it has data for a specific key
18:44 - and we know that our key is going to be
18:45 - the player's user id so player.userid
18:49 - dot dot and then we got hyphen pet on
18:51 - the end because that's what
18:52 - we added now when we do this it's going
18:54 - to
18:56 - look up in the data store for this
18:57 - specific key and it's going to
18:59 - return any data there so if there is a
19:02 - table
19:03 - and there is some data then this data
19:06 - variable
19:06 - is going to actually change it's going
19:08 - to actually hold
19:10 - the data stored in this data store in
19:12 - this key
19:13 - so data is going to be our table of
19:17 - pets but obviously data could be nil
19:20 - and it could be nil if you're a new
19:23 - player or if there was an
19:24 - error when saving your data or if it got
19:27 - corrupted
19:27 - so we have to have an if statement check
19:30 - to see if that data is actually there
19:32 - so if data then and
19:36 - data basically just tells us if it's not
19:38 - equal to nil
19:40 - now if data was nil then this if
19:42 - statement would not run
19:44 - the code inside of it so we can add an
19:46 - else
19:47 - so else we know that there's no data so
19:50 - we can print
19:51 - no data found must be a new player
19:54 - or something else happened to the data
19:59 - so if it was a new player we don't
20:00 - actually have to do anything because
20:02 - um if they do have data we can just load
20:04 - it in if they don't have data
20:06 - we don't need to load it so we are going
20:08 - to loop through that table
20:10 - because obviously we now know we now
20:13 - know
20:14 - that data is a table
20:17 - containing the names of the pets nuts
20:20 - they
20:20 - own so because it's names and
20:24 - objects we need to look up each
20:25 - individual pet
20:27 - in replicated storage dot pets so
20:31 - what we can do is we can go for
20:34 - i comma v in pairs and we're looping
20:37 - through
20:38 - the table which is data do remember you
20:41 - can only
20:42 - loop through tables in a for loop like
20:44 - this
20:45 - so for iv in pairs data do
20:48 - now we don't need to focus on the i i is
20:52 - just going to be
20:53 - the index so the position in the table
20:56 - so if it was the first object in the
20:58 - table it would be one
20:59 - the second one would be two but it's
21:01 - going to loop through all of those names
21:03 - in the table
21:04 - so v is going to be our pet name so i'm
21:06 - going to change v
21:07 - to be pet name now we need to check
21:10 - if there is an actual pet in
21:12 - replicatedstorage.pets
21:13 - with this name so we can say
21:16 - um if game dot replicated storage column
21:20 - wait for child
21:21 - pets colon find first child
21:25 - pet name then so if the pet does exist
21:29 - in replicated storage
21:30 - dot pets then we can call equip
21:34 - now we don't want to call it quit pet we
21:36 - just want to add it to the pet inventory
21:39 - so we can say local value
21:42 - or string value even doesn't matter
21:44 - really
21:45 - equals instance dot new now when i was
21:47 - saying earlier about
21:48 - serializing you can see that we're now
21:50 - deserializing the data in a very simple
21:52 - way
21:53 - the serialized data was not the pet
21:56 - object itself it was the pet object's
21:58 - name
21:58 - we're now deserializing by creating a
22:01 - value
22:01 - in that pet inventory from the name of
22:03 - the pet so we can say
22:05 - instance dot new string value insert
22:07 - that string value
22:08 - give it a name of the pet name
22:12 - and we'll parent it to the
22:15 - player's pet inventory so player
22:18 - dot pet inventory okay
22:21 - now now that we've done that
22:24 - it should be in the pet inventory so
22:27 - let's go and
22:28 - test it out i'm just going to publish
22:31 - the game make sure it's up to date
22:35 - and click play and
22:38 - we're nearly there guys nearly there um
22:40 - so if we go into the players
22:41 - album blocks pet inventory you can see
22:44 - our lava lord
22:45 - is added to the folder because it was
22:48 - stored in the data store
22:50 - and we got nothing printed in the output
22:52 - because
22:53 - obviously it was only going to print if
22:55 - it said no data found but it looped
22:57 - through
22:57 - the data that we saved in that table and
23:00 - we only had the lava lord stored
23:02 - but the lava lord has gone into our pet
23:04 - inventory however
23:05 - it does not show up in our gui that's
23:08 - because we haven't inserted it on the
23:10 - client we haven't created the template
23:11 - for it
23:12 - so we just need to create that template
23:15 - and we should be good to go
23:16 - so if we just go into our gui client
23:19 - we have this function called add to
23:21 - frame don't we
23:22 - so what we need to do is send the loaded
23:27 - information from this data store
23:31 - into the client script
23:35 - now what i'm going to do is i'm going to
23:37 - use a remote event for this
23:38 - so what we can do is we can create a
23:41 - remote event so we can send
23:43 - the table of the pet names to the client
23:46 - and then on the client we can create
23:48 - those templates we can call the add to
23:50 - frame function
23:51 - for every single one so i'm just going
23:53 - to duplicate this remote event and i'm
23:55 - going to call it
23:56 - um send data and
23:59 - then in the main script we can say
24:03 - just after the if statement still within
24:05 - the if data
24:07 - then if statement we can say game dot
24:08 - replicated storage
24:10 - dots send data colon fire
24:13 - client so we're going to fire this
24:15 - remote event for a specific client
24:17 - it's going to be our that that specific
24:19 - player not all the players but just a
24:21 - specific player
24:22 - so player is going to be the player that
24:24 - we send it to so the player
24:25 - when you're doing fire client it has to
24:27 - be the first argument that you send
24:29 - the first one else you're going to mess
24:31 - it up because it's done in a specific
24:32 - order
24:33 - so then we just need to send our pets
24:36 - our data we just send that that data
24:38 - because it is a table
24:40 - okay so if you're not sure what a remote
24:42 - event does
24:43 - obviously because we want to run some
24:46 - code to
24:47 - add the the the pet to our gui
24:50 - that's done on the client because of the
24:52 - gui guis are stored on the client and
24:54 - it's not a good idea
24:55 - to edit gui's from the server it's
24:58 - a much better idea to just handle all of
25:00 - the gui coding on the client
25:02 - so this is a server script we don't want
25:04 - to edit the
25:05 - gui from the server so we're firing a
25:08 - remote events
25:09 - and we're going for this specific player
25:11 - and then in the gui
25:13 - we're going to code an event which
25:15 - listens out and waits for this remote
25:16 - event to be
25:17 - fired and when it does get fired in the
25:20 - local script we can pick it up and we
25:22 - can
25:24 - we have some data that gets sent with a
25:26 - remote event so in this case
25:27 - the list of pets the data we can pick
25:30 - that up on the clients
25:31 - and we can run this add to frame
25:33 - function for every
25:34 - single pet in that table so i'm just
25:37 - going to do that right now
25:38 - with obviously five we've done the code
25:40 - that will fire the remote event we now
25:42 - need to just pick it up
25:43 - so just after the add to frame function
25:46 - i'm going to say
25:47 - game.replicatorstorage dot um
25:51 - send data dot on client event so when
25:53 - there's a
25:54 - fire client we're going to connect it to
25:57 - a function
25:58 - and inside the brackets of this function
26:00 - we can obviously pick up our arguments
26:02 - and that's
26:03 - going to be the data or the pet names
26:07 - you don't have to call it the same thing
26:09 - so i've called it data here because
26:10 - that's obviously the variable that we're
26:12 - sending
26:12 - but however when we pick it up you can
26:14 - call it whatever you like but it has to
26:16 - be in order
26:17 - and you might notice as well that we
26:18 - haven't actually
26:20 - written we haven't actually put the
26:22 - player argument
26:23 - in here on the client and that's because
26:25 - it gets sent or well it doesn't need to
26:27 - get sent does it we don't need it
26:28 - because
26:29 - we know on the client we know who our
26:32 - player is going to be running locally on
26:33 - that player's computer if you wanted to
26:35 - get the player
26:35 - you just say game dot players dot local
26:39 - player because the local script is going
26:40 - to be running
26:41 - on that player's computer so so we know
26:43 - who the player is going to be
26:45 - we don't even need it so we've got our
26:47 - table of pet names
26:49 - and what we can do is we can loop
26:50 - through that table once again
26:52 - for i comma pet name in pairs pet names
26:55 - we're going to do get children because
26:57 - it's just a table of strings a table of
26:58 - text a table of names
27:00 - not objects and get children only works
27:03 - when you call it on an object
27:04 - so do and then again index is just a
27:08 - number
27:09 - the position of that pet name within the
27:11 - table we just need to call
27:13 - add to frame
27:16 - [Music]
27:18 - actually add to frame is going to be uh
27:21 - the pet
27:23 - object isn't it so um we could just
27:26 - let's think about this we we want to
27:27 - call um
27:30 - let me just think about this petal name
27:32 - we're doing anything i don't think
27:33 - yeah we can just what we can do is we
27:35 - can just get the pets object out of
27:37 - replicated storage
27:38 - game dot replicator storage dot pets
27:42 - and we could do find first child
27:45 - pet name like that
27:50 - ah there we go okay and
27:53 - let's just think about this yep that
27:56 - should be that should be good
27:57 - uh in fact we'll just do a security
28:00 - check so
28:00 - if game dot replicate storage dot pets
28:04 - find first child pet name just to make
28:06 - sure that is definitely there
28:08 - you never know um it might have been
28:10 - deleted for some reason or
28:12 - um if you accidentally took the pet out
28:14 - of this out of the folder for some
28:15 - reason
28:16 - then it would it would stop working
28:18 - however we seem to
28:20 - be good to go with that let's
28:23 - just do a print to you know
28:26 - know that it got picked up so we can
28:28 - pick picked up on the client
28:31 - and we'll just print off
28:35 - over here we'll just print fired send
28:38 - data all right we're almost good to go
28:41 - guys
28:43 - so thanks for sticking around with the
28:44 - tutorial so far i think we we will have
28:46 - this wrapped up
28:47 - in a couple of minutes so
28:51 - there we go we've got our lava lord you
28:53 - can see it's in our pet inventory
28:55 - and it is now showing up in the infantry
28:56 - gui and guess what i can equip the pet
28:59 - go onto server mode and it's there
29:02 - you can see it's still there in server
29:05 - mode as well
29:06 - and let's go ahead and unbox a pet
29:12 - like this and we've got another lava
29:14 - lord
29:15 - and i'm not sure if the if it's still
29:17 - weighed to give you
29:19 - the same pet nope we get a tv this time
29:22 - so we now have three pets two lava lords
29:25 - and a tv
29:26 - you can see they're in our uh they're in
29:29 - the
29:30 - in their industry if we leave the game
29:32 - however we need to wait a couple of
29:34 - seconds for it to
29:35 - shut down the server and save our data
29:37 - successfully
29:38 - we head into the data store editor this
29:40 - time again
29:42 - one four nine four three oh six nine
29:44 - it's my
29:45 - key you'll have a different one i've
29:47 - been pet you can see
29:48 - the three of them got saved to the data
29:50 - store this plugin is just a way of being
29:52 - able to see what's
29:53 - stored in the data store um api
29:56 - and we play the game again and
30:00 - click on inventory you can see that it
30:03 - has
30:03 - saved the three pets just like this and
30:06 - we can get them out again
30:07 - it all seems to be working really well
30:12 - okay one last thing that you might have
30:13 - spotted uh it has not
30:15 - saved the equipped pets so we can do
30:18 - that now and it's going to be a good
30:19 - thing to show you actually because i
30:20 - remember earlier
30:21 - we talked about having this one data saw
30:24 - in our game
30:25 - but what if we wanted to save multiple
30:26 - things that one data saw
30:28 - well we're going to want to save the
30:31 - equipped pet aren't we so
30:32 - if we go back to our save data function
30:34 - we can say
30:35 - if player
30:39 - find first child uh
30:42 - equipped pet so that's the name of the
30:44 - value equipped to pet
30:46 - then we can say if player dot equipped
30:50 - pet dot value is
30:53 - it's not equal to nil so if there is
30:55 - actually some data stored in this
30:57 - equipped value then we can say we do
31:00 - another p
31:01 - call because we're obviously dealing
31:02 - with data saw and it's a little bit
31:03 - dangerous
31:04 - if we don't have a p call because it
31:05 - could break the script if it goes wrong
31:07 - local success comma error message equals
31:11 - p call function like this
31:14 - and we can say pet data store cut on set
31:17 - async
31:19 - and this time we're going to use a
31:20 - different key because we don't want to
31:21 - overwrite our pet
31:23 - key we're just going to have a different
31:24 - key so you can have you can have
31:27 - one data store for your game like this
31:30 - so this could this would be your main
31:31 - data store
31:32 - but you could have different keys so you
31:34 - could have you know one one key
31:36 - for your bets
31:40 - and you could have another key for your
31:43 - uh for your equipped pet your ep
31:46 - equipped pets and so you can get these
31:49 - different
31:50 - pets uh different keys within the one
31:53 - data store like that
31:54 - so this time we're gonna still use the
31:56 - player they their user id
31:58 - because we need to uniquely identify
31:59 - them however we're just going to change
32:01 - the
32:02 - suffix so the thing that goes on the end
32:03 - and that's going to be
32:05 - equipped pets you can call it whatever
32:07 - you want you could call it equipped
32:09 - you could call it um
32:10 - [Music]
32:12 - dog right but it doesn't make sense
32:14 - calling it dog because you're gonna have
32:15 - a hard time remembering
32:17 - your keys so equipped pets then a comma
32:20 - and we're gonna save player dot equipped
32:23 - pet dot value okay so that will have
32:27 - saved it to the data store
32:29 - if you don't believe me let's go and
32:30 - check it out just publish the game again
32:33 - just to make sure that it all gets saved
32:35 - we'll head back in
32:38 - and i'll equip a lava lord i'll stop the
32:42 - game
32:43 - head back to our data store editor now
32:46 - this time if we go into our game's data
32:48 - store one four nine four three six nine
32:50 - we now have two keys so we have a key
32:52 - for the pets that we have
32:53 - but also one four nine four six 4369
32:56 - hyphen
32:57 - equipped pet and that's going to tell us
33:00 - it's lava lord so there we go um
33:03 - and it saved us a string this time it's
33:05 - not saved as a table
33:07 - we saved our pets as a table because we
33:09 - we set it to this inventory table
33:11 - however this time we've just saved a
33:13 - string because it's a string value
33:15 - so the value of that is going to be a
33:16 - string a string is just
33:19 - characters or text so
33:22 - we just need to load it in now so we can
33:24 - say
33:26 - we're going to have a separate if
33:28 - statement for our
33:30 - second key so we can say local equipped
33:34 - pet data equals pet data store
33:38 - colon get async player dot
33:41 - user id dot dot and then equipped
33:44 - pet because that was our key for this
33:46 - equipped pet data
33:48 - so we can say if equipped pets data then
33:53 - we don't really need an else unless you
33:56 - wanted to print out that there was no
33:58 - data found that's what we did over here
34:00 - you don't really need that you get rid
34:01 - of if you wanted
34:04 - but we can just say
34:07 - uh equipped pet dot value equals
34:09 - equipped pets
34:11 - uh data i think we can do that because
34:14 - the equipped pet value if we just double
34:17 - check down here yeah
34:18 - we set the equipped pet value to the pet
34:20 - name and because we've already
34:22 - above already in the code this is why
34:24 - i've done it at the bottom here i've
34:25 - done it at the bottom because
34:27 - by now the equipped pet dot changed
34:30 - event will be running so when the
34:32 - equipped pet value does change
34:34 - it will fire this equip pet function for
34:36 - us so we need to
34:38 - right at the end it's the last thing
34:39 - that's going to happen it's going to
34:40 - check if we have that data stored for
34:42 - our equipment pets and if we do
34:43 - going to change the value of the
34:44 - equipped pet which we created up here
34:47 - and obviously when it does change that
34:49 - value it gets picked up by this changed
34:51 - event
34:52 - and then it will equip the pet for us so
34:54 - let's
34:55 - again check out the game for one last
34:57 - time
34:58 - and we obviously have the lava lord set
35:00 - as our equipped pet so let's see if it
35:02 - spawns in for us
35:04 - okay moment of truth and there we go the
35:07 - um pet has
35:08 - been equipped for us however it does not
35:10 - show up as equipped in the inventory
35:12 - uh that's the last thing we need to do
35:14 - then
35:17 - okay so let's create one more remote
35:19 - events and we'll just call it
35:22 - um set equipped pet
35:26 - and then we can say uh over here
35:32 - game.replicatorstorage.sets oh sorry i'm
35:34 - in the wrong place
35:34 - that's my bad we go up here to the
35:37 - player added
35:38 - when we set the equipped value we can
35:40 - say uh
35:42 - in fact yeah we can say game dot
35:45 - replicator storage dot set
35:47 - equipped pet code on fire fire client we
35:50 - want to again
35:50 - fire it to this player only who's going
35:53 - to have joined the game
35:54 - um then we can say player and we can
35:58 - send their equipped pet data it's also
36:00 - going to be the name of the equipped pet
36:02 - then in the gui client we just do
36:04 - another
36:06 - uh event for our remote event we can say
36:09 - game.replicatorstorage.set
36:10 - equipped pet dot on client event colon
36:12 - connects
36:14 - function and this time the argument
36:16 - which we've sent
36:17 - is the pet name so we can now
36:20 - the way that i've coded this is it
36:22 - doesn't really matter so if we had like
36:24 - five
36:24 - lavalords and we need to set a lava law
36:27 - to be equipped
36:28 - we don't think it really matters which
36:29 - one we equip just as long as one of them
36:32 - gets set to equipped so it doesn't
36:34 - matter which specific lava lord or which
36:36 - specific pet
36:37 - of that name gets equipped if you have
36:39 - multiple of them so we just need to
36:41 - um we need to
36:44 - do the set template equipped function
36:47 - but we need to provide
36:48 - a template object so let's just find a
36:51 - random
36:52 - one in our inventory so let's just say
36:54 - if
36:55 - uh scrolling frame because it should be
36:58 - in there by now
36:59 - the the it should have already been
37:01 - added to the frame
37:02 - our pet template fine first so if
37:05 - scrolling frame
37:06 - find first child pet name so just double
37:08 - checking that it's there
37:09 - then double check that the pet template
37:13 - has been created so if it's there then
37:16 - we can just say set template equipped on
37:20 - scrolling frame dot and then we're doing
37:22 - square brackets
37:24 - pet name because pet name is an argument
37:26 - it's not an actual name of an object
37:28 - if we did dot pet name like this it
37:30 - would think that there's an actual
37:31 - object there called pet name
37:33 - whereas in this case the pet name is the
37:35 - value and it's holding
37:37 - an actual name of the pet so it's going
37:39 - to be replaced with the actual name of
37:41 - the pet
37:43 - okay so now let's go and try this out
37:48 - hopefully one of our lava lords should
37:50 - be set to equip
37:54 - so here comes the lava lord hopefully
37:56 - there we go there it is
37:58 - and we go in here boom lava lord equips
38:01 - check the output seems all good and
38:05 - if we click this it goes unequipped we
38:07 - can equip another lavalord
38:09 - seems to be working rather well so
38:12 - that concludes today's tutorial teaching
38:14 - you how to save
38:16 - pets and you know you could do this for
38:19 - other objects as well it doesn't have to
38:20 - be pets it could be swords it could be
38:22 - um anything you know anything that's
38:24 - like an object in your game
38:26 - hopefully this has given you some
38:27 - insight in how that works i do want to
38:29 - do some more videos especially on like
38:30 - how to save
38:32 - things on a base plate and going into
38:34 - more things like serialization i think
38:36 - you'd
38:36 - really benefit from those videos so
38:38 - again do let me know
38:39 - in the comments section if you do want
38:40 - to see those it's been a
38:42 - good video this one i've enjoyed making
38:44 - it and hopefully i can make some more as
38:46 - well
38:46 - coming soon so thanks for watching leave
38:48 - a like it was helpful share it with a
38:50 - friend if you want to share the
38:51 - knowledge
38:52 - and don't forget to subscribe if you're
38:53 - new as well i'll catch you in the next
38:54 - video
38:55 - cheers bye