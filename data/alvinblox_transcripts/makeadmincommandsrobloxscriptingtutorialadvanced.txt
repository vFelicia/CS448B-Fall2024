00:00 - hello everyone Alvin blocks here and in
00:01 - this advanced roblox scripting tutorial
00:04 - we're going to make our own admin
00:07 - commands from scratch
00:09 - yep you heard it right this is the video
00:11 - that a lot of people have been waiting
00:13 - for and it is an advanced video so if
00:16 - you do find it a little bit confusing
00:17 - then do check out my beginner scripting
00:20 - series so that you're up to scratch with
00:22 - everything else related to scripting so
00:24 - I've got a script in here and this is
00:27 - just the outline of the the admin
00:29 - commands that we will be making I've got
00:31 - that open in the window just so that we
00:34 - make sure we don't go wrong so you don't
00:35 - need to worry about that script what you
00:37 - do need to do is insert a script into
00:39 - server script service I'm going to call
00:41 - it admin commands and the first thing
00:45 - that we need to do is we need to create
00:46 - a table and that table is going to have
00:49 - all of our commands in so local commands
00:53 - equals and then table now we're going to
00:56 - create a basic command and that's going
00:59 - to be a teleport command so firstly to
01:03 - create a new open command we're going to
01:07 - insert a table or a function into that
01:10 - table and that function is going to be
01:13 - the command so firstly say commands
01:16 - which is the table and then when you
01:19 - want to insert something into it you can
01:20 - either way you can just say dot and then
01:24 - you put the name of the command so if
01:27 - you wanted it to be teleport you just
01:29 - say teleport like this okay so I'm gonna
01:31 - say TP because it's short for teleport
01:33 - so commands dot TP so this is the
01:36 - command name this is what we'll have to
01:38 - say to run the command so commands dot T
01:42 - P equals function okay so we've created
01:46 - this function here and then we'll drop a
01:48 - line and have an end here okay so just
01:51 - like so and that is our admin command so
01:54 - any code that goes in here will run when
02:00 - you say the command TP ok so this is the
02:05 - function that we're going to run when we
02:07 - say TP now what would also do is have a
02:14 - we'll have a little slash or you know
02:16 - prefix so if you want you can make a
02:19 - function for that so look sorry a
02:21 - variable so local prefix equals and it's
02:24 - gonna be a a forward slash and that's
02:28 - that's what our prefix will be let's see
02:31 - in fact ya gon will have it will have a
02:34 - four slash but you could do whatever you
02:35 - want you could do a colon or a semi
02:38 - colon or a - whatever
02:40 - put your prefix in there so now we need
02:43 - to detect when someone sends a message
02:46 - so that we can run the function so we
02:50 - need to have a player added event which
02:51 - will run when a player first enters the
02:55 - game and again I'm not going to much
03:00 - detail on on on you know things like
03:03 - events and functions because you should
03:04 - know that from the beginner series so
03:07 - when the player is first joined we have
03:10 - to create a chatted event so this will
03:13 - fire when they chat in the chat window
03:17 - so player got chatted connect function
03:21 - so this event will run when obviously
03:24 - they chatter message and we've got two
03:26 - arguments here which give us information
03:28 - about that chat message we've got the
03:30 - message contents so that's the first
03:34 - argument and the second argument is the
03:36 - recipient so if the recipient if it was
03:40 - a whisper to somebody then the recipient
03:42 - would be the player that got that
03:44 - message so what we can do is we can take
03:50 - their message which they're sent and we
03:52 - need to convert it into lowercase and
03:54 - you'll see why we do this but basically
03:57 - because if they were to say TP they
04:00 - could all say it like that in lowercase
04:02 - or they could say in uppercase or they
04:04 - could say you know T in lowercase P in
04:07 - uppercase or like this there's lots of
04:10 - different ways of saying TP or our
04:11 - command so in order to make the command
04:16 - work for every variant of saying TP then
04:19 - we can just convert it to lowercase so
04:21 - if they did say TP well then we can just
04:23 - convert it to lowercase so it's going to
04:26 - be TP
04:27 - okay so we can just get the message and
04:30 - we can update it to be the lowercase
04:35 - version and to do that we say string got
04:37 - lower so when you put a string inside of
04:41 - this string lot lower function it will
04:43 - convert it into lowercase so that T P
04:46 - will become TP in lowercase
04:49 - so we've now just converted it to
04:51 - lowercase and updated it next we need to
04:56 - split the message up because they've
04:59 - what they're going to do they're going
05:00 - to write it like this so it's going to
05:04 - be like this okay so this is going to be
05:05 - their message now what we want to do is
05:07 - we want to split it up so wherever
05:09 - there's space we want to split it up
05:11 - into three different words so this will
05:14 - be its own word this will be its own
05:16 - word and this will be its own word and
05:18 - so what happens is it gets split into a
05:21 - table like this so you'll have the first
05:23 - message and then a new item in the table
05:28 - so a comma to separate it like this okay
05:30 - so each word or you know set of
05:35 - characters that are that are together
05:37 - and set not separated by space will be
05:40 - in their own table object like this okay
05:43 - so to do that to split them we need to
05:46 - create a variable first for the split
05:47 - string so the string that has been split
05:50 - up and we can say message because that's
05:52 - the string that we're going to split up
05:54 - : splits okay and inside of these
05:58 - brackets we need to tell the scripts how
06:01 - it should split it so when should it
06:03 - split the string should it split the
06:04 - string when it sees a space and if so
06:07 - then we'll just have a space in there
06:09 - like that so whenever there's a space is
06:10 - going to split the string up and
06:13 - whenever there is a space it will add a
06:15 - new item to the table like this
06:16 - okay so all that's doing is converting
06:19 - it into table form so that we've got
06:22 - each individual part of the command so
06:25 - we've got firstly here the command that
06:27 - they're saying and then we've got the
06:29 - player that they want to teleport and
06:31 - then the player that they want them to
06:34 - teleport to and obviously if you have
06:36 - more arguments so maybe you need to put
06:39 - I don't know another play
06:41 - it's just gonna keep splitting up
06:43 - because there's a space so you could
06:45 - have infinite arguments and it would
06:47 - just split them up so as long as there's
06:49 - a space it will split it up into table
06:51 - form now we need to get the command we
06:55 - need to check whether they've said the
06:57 - teleport command because they might be
06:58 - asking for another command so we need to
07:00 - get the first item out of that table
07:02 - which is going to be the slash and
07:03 - command so to do that we can say local
07:06 - another variable I'm just gonna call
07:08 - this one slash command because we've got
07:11 - the slash and then their command and
07:13 - that is going to be the first item in
07:16 - this split string table isn't it's going
07:18 - to be this one here because it's the
07:19 - first item in this table when we split
07:22 - it up and it converted the message into
07:24 - table form so this is what split string
07:26 - you're going to be it's going to be this
07:27 - table and for the slash command we are
07:30 - just getting the first item in that
07:32 - table which is gonna be this /tp so this
07:35 - is gonna be a /tp part whereas this is
07:38 - gonna be our table like this okay so now
07:44 - what we need to do now that we've got
07:45 - that slash command is we need to split
07:47 - it again so we need to get rid of this
07:50 - slash okay we just want the name of the
07:53 - command so that we can check what the
07:56 - command is so local CMD for command
07:59 - equals and again you can call these
08:01 - variables whatever you like but just
08:03 - keep them on topic so CMD our command is
08:06 - going to be the slash command we can
08:08 - close the slash but we're gonna split it
08:10 - again now whenever there is a forward
08:12 - slash or our prefix in fact let's say
08:14 - prefix because that's the variable
08:16 - whoops oh by the way I have a really
08:19 - dodgy X key on my keyboard recently it's
08:22 - just been playing up so that's why how
08:24 - that happened so whenever we see a
08:27 - prefix so our forward slash we need to
08:29 - split it up so it's gonna look like this
08:32 - so it's giving us another table but the
08:36 - first item in the table is going to be
08:38 - the slash and the second item is going
08:40 - to be the TP because we've separated it
08:42 - we've now split it up wherever there's a
08:44 - slash so the first object in this table
08:47 - is going to be the slash and the second
08:48 - object in the table it's going to be the
08:51 - name of the command so if you wanted to
08:53 - get the name
08:54 - command command name equals CMD is gonna
08:59 - be the second object isn't it because
09:01 - this table split up we want to get the
09:03 - name of the command and that's going to
09:05 - be the second one so we've now got the
09:07 - name of that admin command brilliant so
09:13 - what next but we need to check the
09:16 - command right we need to see if it is a
09:18 - natural command so because we put all of
09:20 - our commands into this table by saying
09:23 - commands TP that TP function is going to
09:27 - be inside of this table so we can easily
09:29 - check if it's or if it's a real command
09:31 - by saying if commands and then we're
09:35 - gonna do square brackets and put the
09:37 - command name in there so if the command
09:39 - is in that table it's a real command
09:41 - then we need to fire that function don't
09:47 - we so we can say commands command name
09:52 - and that's going to be the function and
09:55 - then we need to you know start this
09:59 - function we need to execute it and we
10:00 - all know to run a function we have to
10:02 - give the name of the function which is
10:04 - going to be this and then we do the pair
10:07 - of brackets so we've just called a
10:09 - function the only difference is that
10:11 - instead of actually saying TP you can't
10:14 - just say that because TP isn't a global
10:16 - function it's a function inside of the
10:18 - commands table and so to get it you have
10:21 - to say commands TP but obviously we
10:26 - don't know the name of the command that
10:27 - is going to be executed because what we
10:29 - had 50 commands we can't just say
10:31 - commands dot TP we'd have to give the
10:33 - name of the command so instead of saying
10:34 - dot TP we say in square brackets the
10:37 - command name okay and we can't say dot
10:41 - command name like this because what if
10:45 - we had a function or command that was
10:47 - actually called command name it would
10:48 - run that instead of having the instead
10:52 - of running the designated function so we
10:54 - have to say it into our brackets so
10:57 - there we go
10:57 - we've just fired our TP function so what
11:01 - I want to do now is I want to run run
11:06 - the game let's play the game and see
11:07 - what happens
11:08 - and hope that we don't have any errors
11:11 - yet but we should get that print the
11:12 - output telling us that the command
11:14 - around so let's do /t p and just run it
11:19 - and there we go so it said it's printed
11:22 - outs from the function the TP function
11:26 - this will run when you say the command
11:28 - TP and so it did so what happened was we
11:31 - chatted and it converted our message
11:35 - into lowercase and then we split it up
11:37 - into a table for each part of the
11:39 - message so the first one being the
11:41 - teleport command and the second one
11:42 - being any other arguments that we have
11:46 - in this case we only said /tp so there
11:48 - weren't any other arguments but TP was
11:51 - still the first argument in the table
11:53 - the command so we then got that TP the
11:57 - first item in that table and then we
11:59 - split up
12:00 - that's smash and TP we split it up into
12:03 - the slash and the TP and then we managed
12:06 - to get the name of the command from that
12:08 - and then we could check if it was a real
12:10 - command in the table which it was
12:12 - because we inserted it at the start of
12:14 - the scripts and then we fired the
12:15 - function so when we fired that function
12:17 - it printed that this will run when he
12:19 - said the command TP now that's great
12:22 - but how do we actually teleport the
12:23 - player well we need to send data to this
12:27 - function every we need to send the what
12:33 - we're going to send the sender we're
12:35 - gonna tell the function who who sent the
12:37 - message I'm also going to have our
12:39 - arguments so we need to send the player
12:42 - that's going to be teleported and the
12:43 - player that we're going to teleport them
12:44 - to so firstly let's send our first
12:51 - argument and that's gonna be the player
12:52 - the player that send the message then up
12:56 - here in the function we will pick it up
12:59 - and we will just give them an argument
13:01 - name of sender okay so if we were to run
13:05 - again and we print it out send it or
13:08 - name it would print out your name
13:10 - because you chatted to initiate the
13:14 - command and there we go it prints out
13:17 - our in underscore blocks as it should do
13:20 - so now we need to get if there are
13:25 - arguments in the message like Alvin Bob
13:28 - we need to get that out and send it to
13:30 - our function so to do that we're going
13:34 - to create a table and this table is
13:37 - going to be our arguments that we're
13:38 - going to send we're gonna send them in a
13:40 - table form so anything that goes in this
13:44 - table is going to contain the next
13:48 - things that we've said then the next
13:50 - split parts of the message so for
13:54 - example the players that you want to
13:59 - teleport so now now that we've got our
14:03 - arguments in a tech a walk we just
14:04 - created the table we need to put the
14:07 - players names from the message if there
14:11 - are any into the arguments table so to
14:14 - do this we can do an if statement okay
14:17 - so sorry not an if statement what am I
14:19 - saying
14:19 - a for loop so so for I equals two and
14:24 - this will make sense in a minute
14:26 - hashtag split string one do table dot
14:32 - insert I'm gonna explain all in a minute
14:35 - so we're gonna insert into the table
14:36 - called arguments split string I now you
14:41 - may be very confused as to what's
14:44 - happening here but let's go back to the
14:46 - split string now let's imagine that we
14:48 - sent the message with two players that
14:50 - are going to be teleported so this is
14:53 - the first item in that table isn't it so
14:56 - this is the second one now because we
14:58 - only want to get the names of the
14:59 - players that are going to be teleported
15:00 - they're going to be from the second
15:03 - argument on words only because this is
15:05 - the first item this is the second item
15:08 - this is the third so we only want to
15:10 - insert into the arguments table the
15:12 - second and third items from that table
15:14 - because we only want the players names
15:17 - so we are doing in a for loop which will
15:21 - start off at two and it will go on for
15:23 - as many arguments that we've said so if
15:25 - there are five arguments then we will go
15:29 - from two to five so hash tag split
15:32 - string
15:33 - going to be the length of the of the
15:34 - table so how many splits there are so in
15:37 - this case there are three splits so it's
15:38 - going to go from two to three and what's
15:41 - going to happen is it's going to insert
15:43 - into the table
15:44 - the second item because that's split
15:47 - string I he's going to start it for two
15:49 - so it's going to insert the second item
15:50 - into the arguments table so I'll insert
15:52 - Alvin and then it will loop around and
15:54 - increase by one so that I is now three
15:57 - and it will insert into the arguments
15:59 - table the third item so it will insert
16:01 - Bob so we've just inserted
16:03 - Alvin and Bob into the arguments table
16:05 - because we don't want to insert the
16:06 - first item that's why we started off at
16:08 - two and we've got the one here because
16:10 - it's increasing by one every single time
16:14 - okay so what we've done there is just
16:16 - basically put the players into the
16:19 - arguments table like that so we have the
16:22 - key parts of the message that sir that
16:25 - we need to send to the function don't we
16:28 - because we need these players in order
16:30 - to teleport to each other we need to
16:34 - teleport the first player to the second
16:36 - player so that's what it's going to look
16:37 - like so with then we don't we just going
16:41 - to get rid of that that was just an
16:42 - example but now what we need to do is we
16:44 - need to send that arguments table to the
16:47 - function we've put our data in there and
16:50 - we now need to send the arguments to
16:52 - this teleport function so let's create a
16:54 - second argument and call it arguments
16:56 - and it's going to be a table gonna be in
16:59 - table form so the sender is gonna be an
17:02 - object and the argument is going to be a
17:07 - table okay
17:09 - so what we now need to do is head back
17:13 - up to this function and we need to loop
17:17 - through all of those arguments so let's
17:19 - just remove this code here I will now
17:21 - need to loop through that table so for I
17:23 - comma player in pairs in fact so let's
17:28 - let's do in pairs arguments okay do
17:36 - so we're looping through everything
17:38 - inside of this arguments table and
17:39 - obviously it's going to be a player
17:41 - player name sorry so
17:46 - yeah it's gonna be a player name because
17:48 - it's a string remember so the players
17:52 - name what we need to do for each player
17:54 - name in this table let's just print them
17:57 - out to make sure that it got sent to the
18:00 - function correctly so if we run this
18:03 - what's going to happen is if we do TP
18:06 - and then we write Alvin blocks we write
18:10 - Bob you can see what happened it's it
18:13 - got the second and third indexes from
18:16 - our split message and it sent them to
18:19 - the server and we've printed it sorry it
18:21 - since it sent it to the function and
18:22 - it's printed it from the function okay
18:25 - so that's great we've got the arguments
18:27 - in our teleport function so now what we
18:30 - need to do is because they're players
18:31 - they're player names we need to actually
18:33 - get those players somehow because we
18:37 - need we need their player objects in
18:39 - order to you know move them and we can't
18:42 - just deal with our names
18:43 - so let's firstly create two variables
18:47 - the first variable is going to be the
18:49 - player to teleport so play it's a
18:52 - teleport name so the first person is the
18:54 - person that will get teleported that
18:57 - will get moved so that will be the first
19:00 - item in the argument table the second
19:04 - player is going to be the player to
19:05 - teleport to name equals arguments too so
19:11 - these are just variables for the two
19:13 - players names we then need to check to
19:17 - see if they are not near the values if
19:20 - we've actually been passed the player
19:22 - names because the player could might
19:25 - have only sent one so one of them will
19:26 - be blank so let's do an if statement so
19:28 - if player to teleport name and player to
19:32 - teleport to name so if they're not nil
19:35 - then we need to find the player objects
19:40 - for these two players so let's create a
19:43 - function that will do that for us so at
19:46 - the top here we're going to create a
19:48 - function so local function find player
19:51 - and we're going to take an argument of
19:53 - their name what we're going to do is
19:55 - we're going to find the player in the
19:58 - player's service
19:59 - so we can say and we're going to send
20:01 - the name of the player as an argument to
20:04 - this function and then we can return the
20:06 - player object so we're going to loop
20:08 - through all the players in the game so
20:10 - for I comma player in pairs game dot
20:14 - players Curran get players so this will
20:16 - get all of the players currently in the
20:17 - game and then we're going to say if we
20:20 - need to remember because the the name
20:22 - that we're sending the name that we have
20:24 - got here these two names because we made
20:27 - them lowercase we need to also make the
20:31 - player's name lowercase so we need to
20:33 - say string dot lower player dot name is
20:37 - equal to the name of the player that we
20:40 - want then we've managed to find their
20:42 - player object so we can just return it
20:44 - so we've now returned a player object
20:48 - and it's an object because it's inside
20:51 - of game dot players ok so now that we've
20:55 - got their player we can access their
20:56 - character and obviously if we get to the
20:59 - end of this for loop and it hasn't
21:01 - returned yet then it will just carry on
21:03 - and so if it just carry on we want to
21:05 - return nil to tell the to tell the
21:10 - wherever we call it from that no player
21:13 - was found so let's create two more
21:17 - variables for the actual player objects
21:19 - for these two so we'll do local PLR just
21:25 - to make it shorter to T P equals find
21:29 - player and we can use player to
21:32 - teleports name and local player 2 tp2
21:37 - equals fine player player to teleport to
21:43 - name ok so we are calling this function
21:47 - twice to get the player objects of the
21:51 - two and player names that have been sent
21:55 - to our teleport function that the player
21:57 - has put in their message so we've now
22:00 - got their characters ok we just need to
22:03 - make sure that the characters are there
22:05 - so let's just check that
22:09 - because they could be nil or they could
22:11 - have left the game we don't want that so
22:13 - now that we have got them and we are
22:15 - certain that they're in the game we need
22:18 - to move the player to teleport to
22:21 - wherever the player to teleport to is
22:24 - okay so we can say player to TP dot
22:27 - character dot a humanoid root part dot C
22:34 - frame equals player 2 tp2 dot character
22:39 - got humanoid root part dot C frame so
22:43 - what we're doing is we're moving the
22:45 - player to teleport to we're setting the
22:48 - C frame of the humanoid arute part to be
22:50 - wherever the player to teleport to is
22:53 - okay so we're moving them to the second
22:55 - player and now let's just do a print to
22:58 - say successfully moved and um let's just
23:04 - do a print up here as well just to say
23:07 - TP function fired by sender name okay so
23:14 - now we should have a working admin
23:17 - command let's go and test it out okay so
23:22 - here we are in a test server and I'm
23:24 - going to test this out I'm going to say
23:27 - /tp and I'm going to write the name of
23:30 - my player which is player two and I'm
23:32 - going to teleport them to player one
23:34 - let's click enter and see what happens
23:36 - boom I've been teleported to player ones
23:40 - location so excellent and we can do the
23:43 - vice-versa opposite way around so we do
23:45 - TP player one to me okay it - and they
23:50 - got teleported to me so our admin
23:52 - command is working perfectly now the
23:57 - next thing that we need to do is we need
23:58 - to have a list of admins and we want to
24:01 - only allow a player to run a command if
24:05 - they are an admin so to do that we're
24:06 - gonna make a second table at the top
24:08 - here called local admins
24:11 - and what you need to do inside of this
24:13 - table is put the name of your admins in
24:16 - in a string like this so Alvin
24:18 - underscore blocks and if you want to add
24:19 - another outside of the string you do a
24:23 - semicolon or a comma and then you put
24:27 - the next person on another line like
24:28 - this okay so just the names of the
24:32 - players okay so when you've done that we
24:34 - now need to actually create another
24:35 - function to check if the player is an
24:38 - admin so local function is admin and
24:41 - we're going to send the player object so
24:46 - we'll just declare up here as well just
24:48 - to make it easier for us to remember
24:50 - that name is a string but down here the
24:54 - player argument is going to be an object
24:55 - that's what we're going to send to our
24:57 - function so all we need to say is for
24:59 - underscore because we don't need the I a
25:02 - comment in fact you could make this an
25:04 - underscore as well if you want there we
25:05 - go
25:05 - and to do that I'll do that so you set
25:08 - it to an underscore when you don't need
25:09 - the I index that's just good practice
25:12 - so for underscore comma V in pairs or
25:16 - player now we'll do V because it's the
25:20 - admin table it doesn't really matter
25:21 - it's just the value inside of the table
25:23 - for lunch coffee in pairs admins so
25:27 - we're looping through every single name
25:28 - in the admins table and as it's a string
25:31 - we need to compare it to the player's
25:33 - name so if V so the string is equal to
25:36 - player dot name then if we have found
25:42 - the player's name in the admin table
25:44 - then we can return true but if we get to
25:48 - the end of the for loop and it hasn't
25:50 - returned true and stop the function yeah
25:52 - we know that obviously we haven't found
25:54 - the player in the admins table so they
25:56 - can't be an admin so we just return
25:57 - false and now it's returning us a true
26:01 - or false value so we're guaranteed to
26:04 - receive a boolean value back because
26:05 - wrong either returning true or a
26:07 - returning false and so one down here in
26:11 - our player dot chatted event at the top
26:14 - here we can say if player sorry if is
26:18 - admin player then
26:22 - and add an end down here and then indent
26:27 - all of our code inside of it by pressing
26:29 - tab because the function is admin will
26:32 - return a true or false value it would
26:35 - either it will turn our if statement
26:37 - into if true or if false then so if they
26:41 - are in admin it will be true so that the
26:43 - if statement condition will run but if
26:47 - it's false then the condition will not
26:49 - run so simple if statement there which
26:51 - will basically run it if we're an admin
26:54 - if we're not it won't work so let's go
26:58 - ahead and remove myself off the admins
27:00 - list like this and if we try to do a
27:08 - command ok you can see nothing happened
27:17 - ok even though I spelled the person's
27:18 - name wrong it doesn't matter you can see
27:20 - it didn't print to say that the function
27:22 - was fired it didn't do any of that so it
27:24 - didn't even fire in the first place
27:26 - because I am not an admin I'm not on the
27:28 - admins list but if I add myself back
27:33 - even though we don't have any other
27:35 - players in the game that's alright we
27:36 - just need to see if it fired that print
27:38 - and that will tell us whether the TP
27:40 - function fired or not there we go so it
27:44 - said TP function fired by Alvin blocks
27:47 - so because we were on the admins list it
27:50 - did fire that's TP function so we have
27:55 - just managed to create admin commands in
27:58 - roblox in under 30 minutes in one script
28:00 - now you may be wondering well how do I
28:03 - add more commands because we've just
28:05 - made a teleport command but really all
28:07 - you need to do is create your command
28:10 - and we call it I don't know speed for
28:14 - example and then equals just create a
28:17 - new function
28:19 - and don't forget all the time we'll have
28:22 - sender and we'll also have our arguments
28:24 - and the only thing that you can send in
28:28 - our arguments table is going to be
28:30 - player names so just a list of player
28:33 - names that come after our prefix and
28:38 - command name because you say speed me
28:42 - and then you say where you either say a
28:45 - player name don't you and then you or
28:47 - then you say a number so in this case
28:49 - you're going to say a number okay so
28:51 - what's going to happen is the arguments
28:54 - are just going to be it's going to look
28:57 - like this if you say if you want it to
28:59 - be flash speed me 30 then the arguments
29:03 - table is going to look like this because
29:06 - it's just taking out the slash speed
29:07 - command it's going to be me comma 30
29:11 - like this okay and the 30 is going to be
29:14 - a string because it's all a message it's
29:17 - a string datatype so what we can do is
29:20 - we can say let's let's think about this
29:24 - so we so local player to give speed to
29:30 - equals in fact we're not going to do me
29:33 - by the way it's gonna be a player name
29:34 - we're not that advanced yet to to use
29:37 - the me command because I won't work so
29:39 - player to give speed to will be the
29:41 - first argument on it now you could do it
29:44 - your way around if you wanted to have
29:45 - the number first that's up to you then
29:47 - you'd want the player name to be second
29:50 - just change it to arguments to so you
29:52 - can manipulate the arguments it's it's
29:54 - all good the arguments table is just the
29:57 - next pieces of text that come after the
30:01 - command name so you can manipulate it
30:03 - all you want
30:04 - so we've got the player to give speed to
30:07 - and the local amount of speed to give
30:11 - and that's going to be arguments to the
30:13 - second argument in this case because
30:15 - it's the 30 so what we need to do is
30:18 - again find the player
30:21 - so a local player equals find player
30:23 - player to give speed to because we've
30:26 - put in a string the name of the player
30:29 - to give the speed to here and this
30:31 - function is going to return to us that
30:32 - players player object if they are a real
30:34 - player and let's just check if the
30:37 - player to give speed to is not nil and
30:40 - it's not a blank value so if it is if it
30:44 - is an actual you know a string it's got
30:45 - some text in there then we're going to
30:47 - find that player and if the player is a
30:50 - real player object as well then we can
30:52 - save player got character got humanoid
30:55 - got walk speed equal amount of speed to
30:59 - give but because it is a string we need
31:01 - to convert it to a number so we can say
31:03 - to a tune number I think two number here
31:08 - two number and we put the string in
31:10 - there and it's gonna convert it to a
31:11 - number and then we can update the
31:13 - players walk speed to that number so
31:15 - let's prints player name or player to
31:19 - give speed to was given walk speed dot
31:24 - dot amount off speed to give we didn't
31:28 - need to worry about converting it to a
31:30 - two number here because it's already in
31:31 - string four and we're printing out a
31:33 - string so let's see if this works
31:36 - so we're gonna do print speed command
31:39 - fired by sender dot name because the
31:42 - sender object of course it's an object
31:48 - so let's test this out so I've just
31:50 - showed you how you can make a new
31:51 - command from scratch and you see how
31:53 - easy it is to add a new command once
31:54 - you've done that so speed
31:57 - Alvin underscore blocks fifty so it says
32:01 - Alvin blocks was giving a walk speed
32:02 - fifty and that the speed command was
32:04 - fired by me and there we go my speed has
32:06 - indeed increased to 50 so I could say
32:09 - speed Alvin underscore blocks five
32:12 - hundred and it's in it again so how cool
32:15 - is this we've just made our own admin
32:17 - commands and because we coded the
32:19 - mainframe the the main function down
32:21 - here to you know fire the function the
32:25 - command name we haven't actually fired a
32:27 - specific function because we've designed
32:29 - it like this we don't need to edit any
32:31 - of this again we just need to add a new
32:33 - command up here
32:34 - and we've got our command in there how
32:36 - awesome is this and again let me just
32:38 - show you this let's do some error
32:42 - testing so if we call a command that
32:46 - isn't valid nothing is going to happen
32:48 - so that's good because it's not inside
32:50 - of the commands table and because we've
32:53 - got this validation checking if the
32:55 - command is in the commands table
32:56 - obviously it isn't so it's not going to
32:58 - run this code unless it's a file to
33:00 - command so that's good let's just try
33:03 - giving the wrong name of a player or a
33:06 - player isn't here okay so it has fired
33:09 - the command but let me just show you
33:12 - that again it fired it but it didn't
33:16 - apply the walk speed to the player
33:17 - because the player to give speed to it
33:21 - was not an actual player it was nil so
33:23 - it returned no so it didn't return the
33:27 - player object they returned nil and if
33:29 - it's nil it won't run where I was in the
33:31 - if statement and one more time let's
33:34 - just check to see what happens when you
33:36 - don't give it enough arguments okay so
33:39 - again fired the speed command but
33:42 - because there was no amount of speed to
33:44 - give in fact that's a good idea actually
33:48 - what we could do is just check that and
33:53 - amount of speed to get so if there is an
33:56 - amount of speed to give there that isn't
33:57 - nil then it's going to run the code so
34:00 - awesome guys we've just made admin
34:02 - commands in roblox in 35 minutes which
34:06 - is awesome so you can add as many
34:09 - commands as you like because we've
34:11 - designed it in a way that just makes it
34:12 - really easy to do so you just do the
34:13 - commands table dot and then you put the
34:16 - name of your command if you want to
34:18 - change the name of the command you can
34:19 - do so very very simple admin commands
34:22 - advanced scripting you guys have been
34:24 - asking for an advanced scripting
34:25 - tutorial so I've delivered and I've
34:27 - given you one so if you've enjoyed the
34:28 - video please give a like don't forget to
34:31 - subscribe to my youtube channel
34:32 - Alvin blocks for more roblox scripting
34:34 - videos share it with a friend who maybe
34:37 - you know who may want to see this video
34:39 - in the future if you would like to take
34:42 - the source code from this project you
34:43 - can become a channel member a premium
34:45 - member for four dollars 99
34:47 - and that way you'll get access to the
34:49 - source code but if not you can just copy
34:51 - along from the video and it will help
34:52 - you learn I do want to give a shout out
34:55 - to emerald slash on the developer forum
34:57 - who inspired me to make this tutorial I
35:00 - saw he posted a tutorial of his own so I
35:02 - thought yeah why don't I changed myself
35:03 - to make my own admin commands and I can
35:05 - share it with you guys so shout out to
35:07 - you and thank you everybody for watching
35:09 - I'll see you in the next video
35:11 - Cheers bye