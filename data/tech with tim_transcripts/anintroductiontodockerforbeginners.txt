00:02 - [Music]
00:08 - in this video i'll be giving you an
00:10 - introduction to docker and talking
00:11 - specifically about what docker is the
00:14 - difference between docker and virtual
00:15 - machines the docker architecture
00:17 - terminology related to docker like
00:19 - containers images and registries and
00:22 - then showing you how to run existing
00:23 - docker images and how to create your own
00:26 - the first part of this video will be
00:27 - fast paced and i'll simply explain the
00:29 - fundamental docker concepts then i'll
00:32 - head over to the computer and walk you
00:33 - through the setup and commands however
00:36 - before we get started i do need to thank
00:38 - lenode for sponsoring this video lenode
00:40 - offers affordable servers that are
00:42 - powerful fully configurable and easy to
00:44 - use and set up with plans starting at
00:46 - just five dollars per month and capped
00:48 - monthly prices that means no surprise
00:51 - fees or hidden overages lenode offers no
00:53 - nonsense hosting at a price you can
00:55 - afford the node has full api
00:57 - integrations with tools like terraform
00:59 - and kubernetes and is personally what
01:01 - i've been using for over two years to
01:03 - host dozens of development projects bots
01:05 - websites domains and much more later in
01:08 - this video i'll actually show you how
01:10 - easy it is to set up a lenod using their
01:12 - one-click install options and we'll mess
01:14 - around with docker in linux you can get
01:16 - started with lenod today for free and
01:19 - get a hundred dollar sixty day credit by
01:21 - signing up at lenode.com tech with tim
01:24 - click the link in the description and
01:26 - now let's get into it so let's start by
01:28 - talking about docker docker is an open
01:30 - platform for developing shipping and
01:32 - running applications it helps you
01:34 - separate your infrastructure from your
01:36 - application and lets you ship deploy and
01:38 - run applications very quickly docker
01:41 - provides something called containers
01:43 - which are isolated environments that
01:44 - contain all of the dependencies for a
01:46 - particular project containers are
01:48 - similar to virtual machines but are much
01:50 - more lightweight and flexible and can
01:52 - usually be started in a matter of
01:54 - seconds as opposed to minutes with
01:55 - virtual machines when you use a docker
01:57 - container you no longer need to rely on
01:59 - the setup of the host machine any
02:01 - dependencies that your container needs
02:03 - will be installed automatically in an
02:05 - isolated environment for you so docker
02:08 - is very popular for ci and cd and is
02:10 - helpful when you want to let anyone run
02:12 - your application quickly regardless of
02:14 - their host operating system and their
02:16 - pre-existing setup so now that we have a
02:18 - basic understanding of what docker is
02:20 - let me discuss the difference between
02:22 - docker and virtual machines because they
02:24 - are similar in some ways and sometimes
02:26 - they do accomplish the same tasks so
02:28 - virtual machines are simply instances of
02:30 - an entire operating system that's
02:33 - running on the hardware of a single
02:34 - machine so you may have say four virtual
02:36 - machines running on one physical machine
02:39 - that you have now these are isolated
02:41 - environments that are running an entire
02:43 - operating system so virtual machines are
02:45 - managed by something called a hypervisor
02:47 - and they utilize a lot of memory cpu and
02:49 - other system resources now this is
02:51 - because they're running an entire
02:52 - operating system and that os requires
02:55 - ram disk space cpu etc now docker is
02:58 - different because it uses something
02:59 - called containers that on a low level
03:02 - are simply processes running in an
03:03 - isolated environment and sharing the
03:05 - host operating system so rather than
03:08 - having a bunch of virtual machines with
03:09 - their own entire operating system you
03:11 - have a bunch of docker containers that
03:13 - are relying on the same host operating
03:15 - system but still are able to run
03:17 - different applications and have their
03:19 - own isolated environment now compared to
03:21 - virtual machines docker containers are
03:23 - much smaller in size they take up less
03:25 - system resources and can be started very
03:27 - quickly not to mention multiple docker
03:29 - containers can run on a single host
03:31 - operating system now to explain docker
03:34 - even further let me discuss the
03:35 - architecture of docker so docker uses a
03:38 - client server architecture that runs
03:40 - over a rest api now the client
03:42 - communicates with something called a
03:44 - daemon which is simply a persistent
03:45 - background process that manages all of
03:48 - your containers and other information
03:49 - related to docker when you use the
03:51 - docker commands you're simply sending
03:53 - requests to the docker daemon to start
03:56 - stop build or delete a container this
03:58 - makes it really easy for us as docker
04:00 - users to manage containers without
04:02 - understanding the lower level features
04:04 - of docker we simply use the command line
04:06 - tool and we're able to do everything we
04:08 - need now i am going to start showing you
04:09 - how to set up docker and some common
04:11 - commands but first is let me define a
04:13 - few pieces of terminology starting with
04:16 - images so an image is essentially a
04:18 - blueprint for building docker containers
04:20 - you can create your own docker image or
04:22 - you can use someone else's now images
04:24 - are often based on other images so you
04:26 - could take someone's image and modify it
04:27 - to work for your particular project for
04:29 - example you may take an ubuntu image and
04:31 - then you may add some lines in there so
04:33 - it installs an apache web server now if
04:35 - you are going to be making your own
04:37 - image then you put that in something
04:38 - called a docker file docker files are
04:40 - what contain the different docker images
04:43 - next we have something called a registry
04:45 - now a registry is simply a place where
04:47 - images are stored the default registry
04:49 - is called docker hub and this is just a
04:51 - website that has a bunch of pre-made
04:53 - images you can think of it kind of like
04:55 - github where github is just a place
04:57 - where you store code docker registries
04:59 - are a place where you store images
05:01 - now finally we have containers
05:03 - containers are runnable instances of
05:05 - images and are built from those images
05:07 - they contain everything you need to run
05:09 - an application in an isolated
05:11 - environment like your tools dependencies
05:13 - software and more so to quickly
05:15 - summarize here we have something called
05:17 - images now images are the blueprint for
05:19 - building containers they're essentially
05:21 - the instructions on what needs to be
05:22 - done to set up a container properly
05:24 - these images are stored in something
05:26 - called a registry and then you have
05:28 - containers which are the runnable
05:29 - instances of the different images so if
05:32 - you actually want to run something on
05:33 - your machine using docker then you need
05:35 - a container and that container requires
05:37 - an image to be built from all right so
05:39 - that's pretty much it for the debrief on
05:41 - docker i hope this gave you a little bit
05:43 - of information and a brief introduction
05:45 - to docker now we're going to head over
05:47 - to the computer and see how to set up a
05:48 - docker container and use the basic
05:51 - commands all right so we are now on the
05:52 - computer and in front of me i have the
05:55 - download page for docker i will leave
05:57 - this in the description but depending on
05:58 - the operating system you're on you're
06:00 - going to want to download the
06:01 - appropriate version now going through
06:03 - the installation steps can take a few
06:04 - minutes but it is pretty straightforward
06:06 - so i'm not going to run you through that
06:07 - setup because there's not really any
06:09 - value in me walking through the
06:10 - installer what i do want to do though is
06:12 - use lenode to actually get a remote
06:15 - virtual private server this is going to
06:17 - be running linux and i'll show you all
06:19 - of the docker commands on linux because
06:20 - that's mostly where you're going to be
06:22 - doing them all right so i'm here on the
06:24 - node and i've signed into my account and
06:26 - once you sign in it's going to bring you
06:27 - to the dashboard that looks like this
06:29 - you guys won't have any servers running
06:30 - if this is a new account but for me i
06:32 - actually use the node so i have a bunch
06:34 - of stuff here now i also have some
06:36 - volumes i have some domains i have a
06:38 - kubernetes cluster so you can do all
06:40 - kinds of stuff on lenode and it's been
06:42 - really useful as i've been using it for
06:44 - the past few years and really easy to
06:46 - set everything up anyways if you don't
06:48 - already have a lenote account and you
06:49 - want to follow along with linux or on
06:51 - linux then click the link in the
06:53 - description you'll get a hundred dollars
06:55 - in free credit on leno now you can of
06:57 - course follow along on windows and mac
06:59 - if you would like however i'm going to
07:01 - be doing this on linux and just spinning
07:03 - up a linux server so to do this i'm
07:05 - going to click on create lenode and what
07:07 - i'm going to do is go to marketplace now
07:09 - the node has a bunch of one-click
07:11 - install options here which are really
07:13 - nice because it performs all the
07:14 - installation for you so you don't have
07:16 - to do that when you first boot up the
07:17 - server so i'm going to click on docker
07:19 - which is down here i'm going to scroll
07:21 - down and just go through a few of these
07:23 - configuration options so one thing you
07:25 - can do is make it so the docker command
07:27 - runs right as this lenode is booted up
07:29 - i'm actually going to do that and i'll
07:30 - explain what this command does later on
07:32 - so i'm going to say docker run hyphen d
07:35 - hyphen p i'm going to say 80 colon 80
07:38 - and then i'm going to use the image of
07:40 - docker slash getting
07:42 - hyphen start
07:43 - now whenever you are running docker
07:45 - commands on a linux server typically you
07:47 - want to have a limited user that's not
07:49 - the root user that does this so we could
07:51 - make this ourself but i'm actually just
07:53 - going to use the one click install here
07:55 - to do this for us so it says the limited
07:56 - sudo user to be created for this linear
07:58 - so i'm going to put in my name which is
08:00 - tim put in whatever username you would
08:01 - like and then i'm going to put in the
08:03 - password of course you don't want to
08:04 - share this with anyone
08:06 - okay other than that the only thing that
08:07 - we need to configure here is the image
08:09 - and the region so the image is going to
08:11 - be the operating system image which in
08:13 - this case is debian this doesn't have
08:15 - anything to do with docker so don't
08:16 - worry about that and then for the region
08:18 - just use the one that's closest to you
08:19 - i'm going to go with toronto ontario now
08:21 - there's a bunch of different options
08:22 - here for the lenode servers you have
08:24 - dedicated cpu shared cpu high memory gpu
08:27 - i'm just going to go with the most basic
08:29 - one which is the nanoed one gigabyte
08:31 - which has a shared cpu this will be
08:33 - totally fine for this tutorial other
08:35 - than that you can change the name if you
08:37 - would like and you can enter the root
08:38 - password in fact i think we need to do
08:40 - that so i'm going to enter the root
08:41 - password right here and then i can click
08:44 - on create lino now this usually takes a
08:46 - minute or two to spin up once it is spun
08:48 - up i will show you how we can ssh into
08:50 - it we're going to be using something
08:51 - called get bash but if you're on mac or
08:54 - linux then you can actually just use the
08:56 - default terminal
08:57 - all right so my node is now running and
08:59 - we can actually leave this page but what
09:01 - i want to do is just look for the ip
09:03 - address of this server first so this is
09:05 - the ip address but we also have the ssh
09:07 - access so i'm just going to copy the ssh
09:10 - root at and then the ip address of this
09:12 - server we're going to use that in a
09:13 - second now to ssh into this server we're
09:16 - going to have to use a specific tool if
09:17 - we're on windows and that tool is git
09:20 - bash so i'll leave a link to this in the
09:21 - description but just download this this
09:23 - is actually just downloading git itself
09:25 - and then it will come with git bash if
09:27 - you choose to install that so please
09:29 - choose to install that because you need
09:30 - git bash then we can use git bash which
09:32 - is kind of a unix-like terminal on
09:34 - windows now if you're on mac or linux
09:37 - you can open up your default terminal
09:39 - and all of the commands that i type in
09:40 - in a second are going to work in that
09:42 - terminal all right so let me load git
09:43 - bash here from the windows search bar
09:45 - it's going to bring up a terminal window
09:47 - i'll zoom in and all we have to do here
09:49 - is type in the command and then this is
09:52 - going to be let me paste this in here
09:54 - ssh and then root at and then the ip
09:56 - address now i'm actually going to change
09:58 - from root to be the user that we want
09:59 - which is limited which in this case is
10:01 - tim so again if you're on mac or linux
10:04 - you're going to be in your default
10:05 - terminal if you're on windows download
10:07 - git bash you can open that from the
10:08 - windows search bar here and then just
10:10 - type in ssh and then your username so
10:12 - it's going to be different for you guys
10:13 - obviously mine is tim now if you did not
10:16 - have a limited user setup you're going
10:18 - to have to ssh as the root user and then
10:20 - create the limited user now i assume you
10:22 - guys would have already set up that
10:24 - limited user anyways i'm going to do
10:26 - this it's going to ask me if i want to
10:28 - continue connecting i'm going to say yes
10:31 - and then it's going to ask for my
10:32 - password so let me type in the password
10:34 - here
10:35 - and hit enter okay so now i'm logged
10:38 - into the server pretty easy i'm just
10:40 - going to clear the screen and we can
10:41 - start looking at some docker commands so
10:44 - remember when i actually was in the node
10:46 - one click install i put a command there
10:48 - for it to run as soon as this linode was
10:50 - fully booted up so that command was just
10:53 - running a getting started image from
10:55 - docker but we made it so that we were
10:57 - actually going to expose whatever
10:59 - application was running on port 80 which
11:01 - is kind of the default http port so what
11:04 - i'm going to do is go back to the node
11:06 - i'm going to copy this ip address and
11:08 - i'm just going to put it here in google
11:09 - chrome and hit enter now when i do that
11:12 - it's going to bring me to this getting
11:13 - started page which is actually a
11:14 - container that's being ran on our lenode
11:17 - right now so i'll show you how we access
11:19 - that in a second but notice this is the
11:21 - public ip address of our lenode and then
11:23 - it just automatically brought us to
11:25 - slash tutorial again that's because i
11:27 - put in that docker command so it's
11:28 - running the container and then we expose
11:30 - the port 80 so now i'm able to actually
11:32 - view this if you want an explanation of
11:34 - what the command is doing you can read
11:35 - this right here hyphen d running the
11:37 - container in detached mode and then
11:39 - we're mapping port 80 of the host to
11:40 - port 80 in the container which allows us
11:43 - to actually view this page on the web
11:45 - okay
11:46 - so let's go back here to git bash and
11:48 - i'll start showing you some docker
11:50 - commands so the first command we want to
11:52 - look at is ps now ps is simply going to
11:54 - list out all of the running containers
11:56 - so i'm going to type sudo
11:58 - docker and then this is going to be ps
12:02 - now the first time we type sudo we need
12:03 - to type in our password
12:05 - so i'm going to go ahead and do that the
12:07 - reason we need to type in sudo is
12:08 - because this is not the root user but we
12:10 - are in the sudo group because that's
12:12 - automatically what lenode would have
12:14 - done for us
12:15 - okay so here we are we can see that we
12:17 - have a container id an image we have
12:19 - ports command and created in fact let me
12:22 - make this a little bit larger so it's
12:23 - easier to see so this is just showing us
12:25 - all of the running containers this is
12:27 - the id of the container i'm going to
12:29 - show you how we can stop the container
12:31 - so i'm going to copy this here so let's
12:32 - copy it and i'm just going to type
12:35 - sudo
12:36 - docker stop and then the id of the
12:39 - container that i want to stop which is
12:40 - this so let's go ahead and stop the
12:42 - container we get this output and now if
12:46 - i go back to this page and i refresh
12:48 - you're going to notice that it's hanging
12:50 - it's not refreshing because now the
12:51 - container that was running this website
12:53 - is no longer running so i do understand
12:55 - that some of this is pretty vague i'm
12:56 - going to talk about this more in depth
12:58 - but so far what we've done is we've spun
12:59 - up a lenod so a remote linux server
13:02 - we've ssh into it we've used our limited
13:04 - user which was created by lenode for us
13:07 - if you didn't create the limited user
13:08 - you would have to make one yourself and
13:10 - then add it to the sudo group we then
13:12 - had the command run automatically when
13:13 - we booted the node which actually
13:15 - created this container with the getting
13:17 - started image and then we saw that it
13:19 - was running by typing docker where is
13:22 - the command here
13:23 - sudo docker ps this is listing all of
13:25 - the running containers for us then we
13:28 - stopped the container by doing sudo
13:30 - docker stop and then the id of the
13:32 - container now what i can do is actually
13:34 - run the container again or start it
13:35 - again and the way i would do that is
13:38 - simply do docker so sudo docker start
13:42 - and then the id of the container which
13:43 - is going to be this so now if i start
13:45 - the container it's going to take a
13:47 - second but if i go back to the web page
13:49 - here and i refresh we see that we get
13:51 - the getting started page awesome all
13:53 - right so now that we have looked at how
13:55 - to do that i'm going to show you a few
13:56 - more docker commands then we're going to
13:59 - pull an application that has a docker
14:01 - file with it we're going to build the
14:03 - image from that docker file we're then
14:06 - going to use that image to actually run
14:08 - a container and i'll walk through the
14:09 - steps and how that works then after that
14:11 - i'll show you how we make our own docker
14:13 - file and our own image as well as
14:15 - contain so we just started this up but
14:17 - i'm going to stop it again and i want
14:19 - you to notice here that when i run the
14:21 - command sudo docker ps as soon as this
14:24 - successfully stops okay so that
14:25 - successfully stops so let's run the
14:27 - command sudo docker ps here that we
14:29 - don't get any containers now the reason
14:31 - we're not getting any containers is
14:33 - because this only shows us all of the
14:34 - containers that are running
14:36 - so what i want to do to look at all of
14:38 - the containers that i have even the ones
14:40 - that are stopped is add this hyphen a
14:42 - flag here which is going to show me all
14:44 - of those so now when i do this you can
14:46 - see that i get this container right here
14:48 - and it was created five minutes ago
14:50 - status exited 20 seconds ago it's no
14:52 - longer running
14:53 - okay hopefully that makes sense if you
14:54 - want to view all the containers even the
14:56 - ones that are not running you do hyphen
14:58 - a now i actually want to delete this
15:00 - container because this was just for an
15:02 - example so to do that i can use the
15:04 - command sudo docker
15:06 - rm and then i'm going to type the id of
15:09 - the container which is oops that was not
15:11 - the id
15:12 - i'm going to have to find it which it
15:16 - looks like is right here okay so let's
15:18 - paste that in and hit enter okay so now
15:21 - i've actually deleted this container so
15:23 - if i do sudo docker ps hyphen a we can
15:26 - see we have no containers because we've
15:28 - removed it using the rm command
15:30 - nice so now that we know how to remove
15:32 - start stop and list all of the
15:33 - containers let's look at how we can
15:35 - actually get into a custom example
15:37 - download something that has a docker
15:39 - file build the image and then run that
15:41 - image alright so for this example here
15:44 - what i need to do is download something
15:46 - from github it's just going to be a
15:47 - repository but that repository has a zip
15:50 - folder in it so i need to be able to
15:51 - unzip that so to unzip that i need to
15:53 - install a tool and this is sudo apt
15:57 - install and then unzip okay so let's
15:59 - install that first and then once that is
16:02 - installed what we can do is use the curl
16:04 - command to actually get the repository
16:06 - that we want now all of the commands
16:07 - that i'm typing in here are going to be
16:09 - available from the link in the
16:10 - description there's a lenode guide that
16:12 - i'm following that has all of these so
16:14 - if you just want to copy and paste them
16:15 - just go in the description and you'll
16:17 - see it says lenode guide and you can see
16:19 - all the commands there anyways this is
16:21 - the command that i want so i'm going to
16:22 - say curl hyphen l o and then https colon
16:25 - slash github.com docker samples slash
16:28 - node bulletin board slash archive slash
16:30 - master dot zip now this is just a
16:32 - node.js project so i'm just going to
16:34 - download the github repository and then
16:36 - i'm going to set up the docker container
16:38 - and show you how easy this is to do with
16:40 - docker anyways i'm going to do this i've
16:42 - now downloaded everything so if i type
16:44 - ls we can see that i have master.zip in
16:47 - my home folder now i need to unzip that
16:49 - so i'm going to type unzip and then
16:51 - master.zip
16:53 - cannot find or open master.zip will be
16:56 - helpful if i spelt master correctly so
16:58 - let's spell it correctly okay looks like
17:00 - it's all good so let's type ls and now
17:02 - we have the node bulletin board master
17:05 - so what i'm going to do is cdn here so
17:07 - cd node bulletin board master
17:09 - let's type in
17:11 - ls and then we have the bulletin board
17:13 - app which i need to cd into as well so
17:15 - let's cd into the bulletin import app
17:18 - great so now what i can actually do is i
17:20 - can build the image that is inside of
17:22 - here so if i type ls we can see that we
17:24 - have a docker file and if we want to
17:26 - have a look at the docker file we can do
17:28 - that by typing nano it's just a text
17:30 - editor built into linux and then docker
17:32 - file so here we can see the definition
17:34 - of our image because again that's what
17:36 - the docker file is so all of our docker
17:39 - files are going to start from some type
17:41 - of image so in this case the image that
17:43 - we're using is node colon current slim
17:46 - now this is just an image that's
17:48 - available from the registry and remember
17:50 - the default registry is the docker hub
17:52 - now you can actually find a ton of
17:54 - different docker images from docker hub
17:56 - so feel free to look there if you're
17:57 - looking for a specific one
17:59 - anyways we have the working directory
18:01 - which is equal to this we're copying
18:03 - package.json we're running npm install
18:06 - we're exposing this port and then we're
18:08 - running this command and copying a few
18:09 - other things we don't really need to
18:11 - understand everything in this file the
18:13 - point is this is kind of the
18:14 - instructions and what's going on when we
18:16 - actually run the container from the
18:18 - image right okay so let's get out of
18:21 - that
18:22 - and now let's see how we can actually
18:23 - build this image so since i'm inside of
18:25 - a folder that has the docker file all i
18:28 - need to do is type the following and
18:30 - let's actually just clear the screen
18:31 - it's just a little bit easier to see so
18:32 - the command that i'm going to run here
18:34 - is sudo docker run and this is because
18:36 - i'm running an image so this is the
18:38 - keyword that i use then i'm going to
18:39 - pass the options now the first option
18:42 - that i want to pass is hyphen p now
18:44 - hyphen p stands for port or for publish
18:46 - whatever you want to call it and this
18:48 - allows us to actually link a port from
18:50 - our local host or from our local machine
18:52 - sorry to the container so yes the
18:55 - container is running on our local
18:57 - operating system but it's in an isolated
18:59 - environment and its ports are going to
19:01 - be different from the ports of this
19:03 - machine the host machine right so what i
19:05 - need to do is link one of the ports from
19:07 - the host machine to one of the ports of
19:09 - the container and the way i do that is i
19:11 - type in the port on my host machine
19:13 - which is going to be 8000 and i connect
19:15 - that to port 8080 which is where the
19:17 - node server is going to be running in my
19:19 - container so i type sudo docker run
19:21 - hyphen p 8000 colon 8080. again the
19:25 - first one is the host and the second one
19:27 - is the uh container so this means if i
19:29 - go to the public ip address slash 8000
19:32 - or colon8000 sorry it will bring me to
19:34 - the container at port 8080. okay now
19:37 - after this i have one other option which
19:39 - is hyphen d now hyphen d stands for
19:42 - detached and this is going to make it so
19:44 - that we detach this container from this
19:47 - terminal process now if we don't do this
19:49 - what's going to happen is we're going to
19:50 - see all of the output directly in our
19:53 - terminal and if we close the terminal
19:55 - it's actually going to stop the
19:56 - container so most of the times you don't
19:57 - want that you want to detach the
19:59 - container so we type hyphen d
20:02 - now after we do that we can add a name
20:04 - for this to make it easier to reference
20:06 - so i'm going to type bb and then we need
20:08 - to put the name of the image that we
20:09 - want to run which in this case is
20:11 - bulletin board right because that's the
20:13 - tag that we added to our image when we
20:15 - made it okay so sudo docker run hyphen p
20:18 - 8000 colon 8080 hyphen d which is
20:21 - detached and then the name bb and then
20:23 - the image we're running is bulletin
20:25 - board all right so let's go ahead and
20:26 - run this and see if it works okay so
20:30 - that is good we got some output here
20:32 - right and we didn't get any errors
20:33 - meaning the container should actually be
20:35 - running all right so now this is running
20:37 - i'm just going to go to google chrome
20:38 - and i'm going to go to the ip address of
20:40 - my server which is this right here by
20:43 - the way i did that by just hitting the
20:44 - windows key and then v and i'm going to
20:46 - put in port 8000 because this is the
20:48 - port that we linked to port 8080 for our
20:51 - container so let's hit enter here and
20:53 - see what we get and notice we actually
20:54 - get an application right this was the
20:56 - node app which i guess is just some type
20:59 - of bulletin board okay so i could delete
21:00 - something okay let's see if that works
21:02 - i didn't make this application this is
21:04 - just a test application i just wanted to
21:05 - show you how that works
21:07 - all right so there we go we have now run
21:09 - this container so let's see this
21:11 - container let's go sudo docker and then
21:14 - we can list them with ps
21:17 - this container is indeed running and if
21:19 - i want to stop this container then i
21:21 - will do stop and i can just type in bb
21:23 - because that's the name that we gave
21:25 - great so now i have stopped this
21:26 - container and the last part of this
21:28 - tutorial is showing you how to make your
21:30 - own image so let's see how to do that we
21:32 - actually have to write a docker file to
21:34 - do so all right so for this example here
21:36 - where we create a docker file i'm just
21:38 - going to set up a super basic python
21:40 - program that requires that we install a
21:42 - python module so i can run you through
21:44 - how we create a docker file that can run
21:46 - some python code so the first thing i'm
21:48 - going to do is make a directory so i'm
21:49 - just going to say mkdir and then not
21:52 - python let's go with test like this i'm
21:54 - going to make a file i'm going to say
21:55 - sudo nano main dot pi and inside of here
21:58 - i'm going to import a module
22:00 - this module is request it's not built
22:02 - into python so we need to install this
22:04 - and then i'm just going to print
22:07 - test like this okay or
22:09 - this is working
22:11 - now i'm not actually going to use the
22:12 - request module i just want to import it
22:14 - so we can make sure that we actually
22:15 - installed it properly we don't get an
22:16 - error if we didn't install it okay
22:19 - so let's click this let's get out of
22:21 - that sorry which is control x and now
22:23 - what i want to do is create a
22:24 - requirements.tx file which is just going
22:27 - to list all of the modules that we need
22:28 - to install so i'm going to say sudo nano
22:31 - and then requirements.txt
22:34 - let's make sure we spelt that correctly
22:35 - looks like we did and inside of here i'm
22:38 - just going to type in requests i don't
22:39 - even need to give it a version okay so
22:41 - let's click out of that i now have my
22:42 - main dot pi and my requirements.txt
22:45 - however i realized i forgot to put them
22:46 - inside of the test directory so let's
22:48 - just move those over i'm going to say mv
22:51 - and then main.pi and i think i can just
22:53 - do dot slash test okay and then we want
22:56 - to move
22:57 - requirements.txt so let's move that into
22:59 - test and now let's cd
23:02 - into the test directory and ls and we
23:04 - have our two python files great now what
23:07 - i want to do is create my docker file so
23:09 - i am going to say sudo nano and then
23:12 - docker file like that make sure you have
23:15 - a capital d and you have no file
23:17 - extension you cannot have txt or
23:18 - anything like that it just needs to be
23:20 - called docker file okay so now i am
23:22 - inside of nano again built in text
23:25 - editor that we've been using and i'm
23:26 - going to start writing the docker file
23:28 - now the first thing that we need for all
23:29 - of our docker files is an existing image
23:32 - that we're going to be working from
23:33 - we're kind of inheriting from it and
23:34 - then adding some stuff to it so to find
23:36 - images what you can do is go to docker
23:38 - hub so let me just open this up
23:41 - and let's go into it
23:42 - okay so i'm on docker hub here i'm just
23:45 - going to type in python and we're going
23:46 - to look for a python image so here we
23:48 - have python it is an official image
23:50 - that's great and then we can look at all
23:52 - of the different tags here within this
23:54 - so we have 3.9 3.10 i'm just going to
23:58 - use 3.9 slim buster i'm not really going
24:01 - to explain the rationale behind that
24:03 - choice i'd recommend you just stick with
24:04 - this one for now
24:06 - but there is you know all kinds of
24:07 - tutorials online on how to pick what
24:09 - image you want for your docker file in
24:11 - this case we're just doing 3.9
24:12 - slimbuster because i know this one will
24:14 - work okay so i'm going to go here now to
24:16 - my docker file and the first line that i
24:19 - need is a from and i'm going to put
24:21 - python which is the image name and then
24:23 - the tag which is going to be 3.9 slim
24:26 - buster so this is saying we're going to
24:28 - start working from this file right here
24:30 - from this image then i can add all the
24:32 - other commands that i want now whenever
24:34 - i want files to be a part of my
24:36 - container or a part of my image i need
24:38 - to copy them so there is currently a
24:41 - main.pi and a requirements.txt file in
24:43 - the directory where this docker file is
24:46 - so if i need those as a part of my
24:47 - container i need to copy them in so i'm
24:50 - going to type copy
24:51 - and then i'm going to type the path so
24:53 - i'm going to type
24:54 - [Music]
24:55 - requirements.txt so this is the path on
24:57 - my local machine and then after this
25:00 - i put the path i want to copy this to
25:02 - which is just going to be the same thing
25:04 - so requirements.txt
25:05 - this is the path inside of the container
25:08 - this is the path on the local or host
25:10 - machine let's make sure i spelt that
25:11 - right i think i did
25:13 - okay hopefully that makes a bit of sense
25:14 - but we're copying from the local machine
25:16 - or the host machine to the container and
25:18 - if i wanted this to go in a different
25:19 - directory then i would put a different
25:20 - path right
25:21 - okay now other than that i want to copy
25:23 - my main.pi file so i'm going to say copy
25:26 - main.pi and then dot slash main.pi and
25:29 - i'm pretty sure you can also just type a
25:30 - dot here rather than the full path we'll
25:32 - go with the full path for now okay now
25:34 - after that what i want to do is run a
25:36 - command now the command that i want to
25:38 - run is a pip command that's going to
25:40 - install the requirements that i have in
25:42 - requirements.txt
25:44 - so i'm going to type run and this is
25:46 - going to be pip
25:47 - install hyphen r
25:49 - and then requirements looks like i can't
25:51 - autocomplete inside of here dot txt okay
25:55 - now i might have to do pip 3 here i'm
25:58 - going to go with that for now because
25:59 - this might have python 2 installed uh
26:02 - but yeah this is the command that we
26:03 - want to run okay so pip3 install hyphen
26:05 - requirements.txt
26:07 - now after this we also want to run the
26:10 - main python file so to do that i need to
26:12 - type the following command so this
26:14 - command is cmd and then i'm going to
26:17 - pass as a list
26:19 - python3
26:20 - and then main dot pi and we'll just do a
26:23 - dot slash to make sure this works okay
26:26 - so let me explain this to understand
26:27 - this a little bit confusing so again
26:28 - we're saying from and then the image
26:30 - that we want to inherit from this is
26:32 - pretty straightforward we're copying
26:33 - files from the host machine to the
26:35 - container and then this right here is a
26:37 - little bit different than cmd so what
26:39 - run is going to do is run this command
26:42 - one time when the container sorry is
26:45 - first created okay now this cmd command
26:48 - is different this is going to be run
26:49 - when the container is started so we're
26:51 - not going to run this when we are
26:53 - initializing or creating the container
26:55 - we are just going to run it when we
26:56 - start the container so hopefully that
26:58 - makes sense but that's the difference
26:59 - between run and cmd this happens inside
27:02 - of the container it's going to happen
27:03 - once when we first create it and then
27:05 - cmd will happen every time we start the
27:07 - container so if we stop it and restart
27:09 - we're going to re-run this command okay
27:11 - hopefully that is all good now i'm going
27:14 - to save this because we should have a
27:16 - valid docker file if we don't the
27:18 - mistake is going to be that i have
27:19 - python3 and pip3 instead of just pip and
27:21 - python okay so now what we want to do is
27:24 - we want to build an image from this
27:26 - docker file now we already know how to
27:28 - do this but we're just going to say
27:30 - docker so actually we need sudo first
27:32 - sudo docker
27:34 - build hyphen t and then i'm just going
27:36 - to do a python hyphen test for this one
27:40 - i'm going to put a dot because it's in
27:42 - the current directory so the path is
27:44 - right here okay so we're going to build
27:45 - this image let's make sure everything
27:47 - works successfully
27:49 - looks like it is good and once this is
27:52 - done i will be right back alright so
27:54 - this has finished successfully and we
27:56 - can see that i actually did run pip3
27:58 - install requirements.txt and those
28:00 - installed the request module that we had
28:03 - inside of that file alright so now i'm
28:04 - going to go ahead and run this so i'm
28:06 - just going to type sudo docker run and
28:09 - then this is going to be python hyphen
28:12 - test i don't need the other options like
28:14 - hyphen p and hyphen d because i'm not
28:16 - publishing this right i don't have any
28:17 - ports i'm connecting and i'm not running
28:19 - this in detached mode because i just
28:20 - want to see the result so let's hit
28:22 - enter and we got this is working nice so
28:25 - the container is indeed working awesome
28:28 - all right so with that said i think i'm
28:29 - going to end the video here now in this
28:32 - video i did show you how to create a
28:33 - docker file how to build docker images
28:36 - how to run containers and hopefully at
28:38 - the beginning i gave you a decent
28:39 - explanation about what docker is and how
28:41 - it works if you guys would like to see
28:43 - more advanced docker tutorials on this
28:45 - channel in the future please leave a
28:47 - comment down below make sure you like
28:48 - the video and subscribe to the channel
28:50 - and one last thank you to lenode for
28:52 - sponsoring this video with that said i
28:54 - will wrap it up here hope you guys
28:56 - enjoyed and i will see you in another
28:57 - youtube video
28:59 - [Music]