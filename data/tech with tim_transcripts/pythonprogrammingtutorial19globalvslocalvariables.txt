00:00 - hey guys welcome back to another video
00:02 - this is the 19th video in my Python
00:04 - programming series and today we're going
00:06 - to be talking about a fairly complex
00:09 - topic some people find kind of confusing
00:12 - in their programs it's very useful to
00:14 - understand and its global versus local
00:17 - variables so global um pretty much means
00:21 - everywhere can be used in anything and
00:24 - local means specific to a certain a
00:26 - block of code or to a certain class so
00:30 - let's just dive in right away with an
00:33 - example so in our program we have things
00:35 - called variables again we've talked
00:36 - about them before so I'm just going to
00:38 - say var up here equals 9
00:40 - we'll say are true this is lowercase
00:44 - here is just equal to true or actually
00:47 - let's call it loop instead just not to
00:49 - confuse anyone so loop is equal to true
00:51 - and then maybe let's make a function
00:53 - we're just going to call this function
00:54 - func we'll give it a parameter of X and
00:58 - we're just going to say if X is equal to
01:02 - 2 equals sign 5 then return true and
01:08 - we'll set a variable up at the top of
01:10 - this function and we'll just call it a
01:14 - new var is equal to 7 or yes 7 let's
01:20 - let's do that and then instead of
01:22 - returning to you will actually return to
01:23 - var my god gave our just like that ok so
01:27 - here we have three variables we have the
01:30 - variable var which is equal to 9 the
01:33 - variable loop which is equal to true and
01:35 - then the variable new var which is
01:37 - inside of our function and that's equal
01:39 - to 7 and then the parameter X which
01:42 - again can kind of be considered a
01:44 - variable but it is more specifically a
01:46 - parameter so I just want to show you
01:49 - right away
01:49 - what tries to happen if I print out the
01:53 - variable noubar so outside of my
01:56 - function in its own line I'm just going
01:58 - to say print new var like that we click
02:03 - f5 and we get an error here it says the
02:06 - name new var is not defined but how can
02:09 - that be possible we just made new var
02:11 - right here in our phone
02:14 - well this is where we get into local
02:16 - versus global variables so the variable
02:19 - nu bar is actually known to be a local
02:22 - variable to the function func so that
02:26 - means the only thing that's able to
02:27 - access the variable change the variable
02:30 - and use the variable new var is the
02:33 - function func so again if I put the
02:36 - print statement inside of my function
02:37 - and then I call my function it will work
02:40 - so here if I type func now and I'll give
02:43 - it value to the new var does print to
02:48 - the screen and we don't get an error so
02:51 - that is how the local variable works so
02:54 - again it's the same thing in any other
02:57 - type of function so if I write another
02:58 - function I do define other func this one
03:03 - I won't give it a parameter and I'll
03:04 - just say you var is equal to five like
03:10 - that so different than seven and then
03:12 - this function will print new var well do
03:16 - we think it's going to print out seven
03:17 - or do we think it's going to print out
03:18 - five so we'll show you like this if we
03:23 - run take zero positional arguments other
03:27 - func oh my brother's are two in there
03:29 - sorry it prints out five right so it
03:33 - doesn't look at this variable here it
03:35 - looks at the local variable in here
03:37 - called new var now same thing if I put
03:39 - new var up here outside of all of these
03:42 - functions and I set it equal to 23 and
03:45 - then I click f5 here to run it's still
03:49 - going to print out five that's because
03:51 - these functions they can see these
03:54 - variables up here but if there is a
03:57 - variable already declared inside of
03:59 - their function they're going to use that
04:01 - one instead I know it's kind of
04:03 - confusing I'm going to talk a little bit
04:04 - more about how this works I just want to
04:06 - give some examples to start off okay so
04:09 - now we will talk about global variables
04:11 - so local variables are ones that are
04:14 - declared usually inside of a function so
04:17 - that means outside of the function so
04:18 - again if we tried to print new var out
04:20 - here and I got rid of this up here we
04:23 - get the error like we got before right
04:25 - it says it's not defined
04:27 - so what about global variables well the
04:30 - global variables are ones that anything
04:32 - in the program can see so var and loop
04:35 - would be known as global variables in
04:37 - here if I try to print out our variable
04:41 - var and then I'll just call that
04:44 - function by doing func and I'll give it
04:46 - a value of two once again it will be
04:51 - able to see var and it does print it to
04:53 - the screen as 9 that is because this is
04:56 - global it's not defined inside of a
04:58 - function or inside of a class and
05:00 - classes we'll talk about later don't
05:01 - worry about that same thing if we try to
05:03 - print out a loop so if I change this to
05:06 - loop again it should work we get true
05:11 - printed out to the screen just like that
05:13 - so now there's the issue with changing
05:17 - variables inside of a function so
05:20 - typically you want to avoid this you
05:22 - don't want to be dependent on these
05:24 - global variables up here to make your
05:26 - functions work this is because if you
05:29 - remember in my other video I talked to a
05:30 - modular programming where we can reuse
05:33 - functions well if I have a variable
05:36 - defined up here and my function is
05:39 - referencing that variable meaning it
05:41 - requires that variable to work then if I
05:44 - try to use this function in another one
05:46 - of my programs it's not going to
05:48 - function properly because that loop
05:50 - variable or that global variable that I
05:52 - try to use is not going to be defined in
05:55 - that other program right so let's do an
06:00 - example here of how we can actually
06:01 - change a global variable so if I go here
06:06 - and I say loop is equal to 7 so I call
06:11 - my function and it's going to set loop
06:13 - equal to 7 is and then I try to print
06:16 - out the variable loop well what do you
06:19 - think is going to print to the screen
06:20 - give me a guess is either going to be 7
06:22 - or it's either going to be true what do
06:25 - you think right so I'm printing it
06:27 - underneath after I call this function
06:29 - let's see we get true now even though we
06:34 - what looks like changed the variable in
06:37 - this function instead of actually
06:39 - changing this global variable
06:41 - instead we created a new variable which
06:43 - is local to the function called loop if
06:46 - we want to change this variable we have
06:49 - to use something called the global
06:50 - keyword so in Python what we have to do
06:53 - is at the top of our function we just
06:55 - type the word global followed by the
06:57 - variable name that we want to change so
07:00 - in this case I'm going to say loop now
07:03 - if we run this program we print out 7
07:08 - that's because this tells our function
07:10 - that we're going to look outside of the
07:12 - function here for the variable if it
07:14 - exists then we're going to change it
07:16 - just like we did there so I know this
07:20 - has been kind of confusing I've kind of
07:22 - jumped around try to play around with
07:25 - these things and see if you're getting
07:26 - errors see if you can figure out what's
07:29 - going to print at the screen here if you
07:30 - want to change a global variable so one
07:32 - that you define at the top of your
07:34 - program here or outside of your
07:36 - functions then you must type the global
07:38 - keyword inside of your function followed
07:41 - by the name here again if I try to
07:43 - change the variable down here so not
07:46 - inside of a function it will work so if
07:47 - I do loop is equal to false then oh we
07:53 - get seven again just because I called it
07:55 - up here so I won't call this function
07:56 - this time but I say loop is equal to
07:58 - false then we will get false because
08:01 - it's not inside of a function so it is
08:03 - able to see and change this variable so
08:06 - really using the global keyword it's
08:09 - just inside of functions and just
08:10 - remember that if you do create a
08:12 - variable inside of your function it's
08:13 - local to your function meaning that
08:16 - unless you type this global keyword
08:18 - first and then followed by the name of
08:21 - that variable everything outside of the
08:24 - function will not be able to see that
08:26 - variable so if you like if you like this
08:30 - video and you learn something please
08:32 - like and subscribe and I will see you
08:34 - again in another video