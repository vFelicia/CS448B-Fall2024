00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video i will
00:13 - be sharing with you 15 complicated
00:15 - programming terms now this is a sequel
00:17 - to one of the last videos i did which
00:19 - was 25 terms all programmers need to
00:22 - know you guys said you wanted some more
00:23 - advanced terms so here i am with this
00:25 - video and you can check that video out
00:27 - from the link in the description also
00:28 - put it on the screen right here anyways
00:31 - in this video i'll spend about a minute
00:32 - on each term i'll put the definition up
00:34 - on the screen i've actually grouped all
00:36 - of the terms by their category so the
00:38 - four categories i have here is object
00:41 - oriented programming networking and web
00:43 - technologies cpu and task scheduling and
00:46 - then numbering systems if you guys want
00:48 - a third video with more categories then
00:50 - let me know in the comments anyways with
00:52 - that said the first term that i need to
00:54 - break down for you is actually not a
00:55 - term but is the sponsor of this video
00:58 - before we get started i need to thank
01:00 - the sponsor of this video which is visme
01:02 - visme is an all-in-one visual content
01:04 - platform that allows everyone including
01:06 - non-designers to create beautiful
01:08 - presentations infographics reports and
01:10 - social media images in minutes even if
01:13 - you're like me and have no sense of
01:15 - design or aesthetics you can still use
01:17 - visme it provides an extremely easy to
01:19 - use platform without compromising on
01:21 - features and capabilities with visme you
01:23 - can make anything from boardroom ready
01:25 - presentations to short videos and
01:27 - animations with their built-in tools one
01:30 - of the best parts of bismi is how
01:31 - quickly you can create professional
01:32 - designs and how much time you save over
01:35 - using traditional tools bismi is
01:37 - designed for all types of use cases and
01:39 - clients and if you're an individual
01:41 - small team large business or educator
01:44 - you can get a ton of value from it and
01:46 - even use it completely for free thanks
01:49 - again to bismi for sponsoring this video
01:51 - and don't forget to check them out from
01:52 - the link in the description
01:58 - all right so let's go ahead and get
01:59 - started i have four sections to share
02:02 - with you the first section is object
02:03 - oriented program now the first term in
02:06 - this section i have for you is
02:07 - abstraction now abstraction is really
02:09 - the process of hiding implementation
02:11 - details and separating functionality
02:14 - from implementation so whenever we talk
02:16 - about abstraction we're usually saying
02:18 - to make something more abstract now
02:20 - something that is more abstract is more
02:22 - general so to give you an idea here
02:24 - let's say we have a bunch of different
02:25 - dog breeds we have chihuahua we have
02:28 - golden retriever whatever we have a
02:29 - bunch of different dog beats those would
02:31 - be concrete or specific whereas if i say
02:34 - dog that would be a more abstract
02:36 - concept right that is something that is
02:38 - more general dog is more general than a
02:40 - specific dog breed so when we are
02:42 - writing code in an object oriented style
02:44 - a lot of times what we're trying to do
02:46 - is abstract things out and the point of
02:48 - that is that if i were to create say an
02:50 - abstract dog class rather than concrete
02:53 - dog breed classes now it's very easy for
02:56 - me to understand how every single dog in
02:58 - my program works or operates the
03:01 - behavior that it has i don't need to go
03:03 - and dig into 10 individual dog breed
03:05 - classes i know that it doesn't even
03:07 - matter what the breed of my dogs are
03:09 - they all behave in the same way because
03:11 - they all use the same very general class
03:14 - there's a ton of other benefits from
03:15 - this i'm not going to really go much
03:17 - further here but the idea with
03:18 - abstraction and object oriented
03:20 - programming is to make something more
03:22 - general and to kind of try to hide some
03:24 - of the details and make it easier for
03:26 - your users to actually understand and
03:29 - use this class alright so the next term
03:31 - i have is inheritance now inheritance is
03:33 - simply the ability of one class to
03:35 - inherit or reuse the functionality of
03:38 - another class so let's say we have an
03:40 - example where we're working in some type
03:42 - of store we're modeling a store and we
03:44 - have our employee we have our manager
03:47 - and we have our supervisor well we could
03:49 - create three individual classes for each
03:52 - of these people and in fact we probably
03:53 - are going to do that but the thing is
03:56 - all of these three roles have a lot of
03:58 - stuff in common they probably all have a
04:00 - name right each manager supervisor
04:02 - employee they probably all have a name
04:03 - they probably all have a id they
04:06 - probably all have a salary or an hourly
04:08 - wage they definitely share some behavior
04:10 - in common so rather than me creating
04:12 - three individual classes that all are
04:15 - going to kind of rewrite the same
04:17 - behavior multiple times i would create
04:19 - what's known as a base class or a super
04:21 - class which would be my employee now in
04:23 - the employee i would put all of the
04:25 - functionality that's going to be common
04:27 - to say my manager and my supervisor
04:30 - then what i would do is in my manager
04:32 - class in my supervisor class i would
04:34 - inherit from the employee class and i
04:36 - would immediately be able to reuse all
04:38 - of that functionality without rewriting
04:40 - it inside of those classes and then
04:42 - let's say something was a little bit
04:43 - different in my manager or in my
04:45 - supervisor class well i would just write
04:47 - in the new functionality or if i wanted
04:49 - to override something from the employee
04:51 - class i could easily do that because
04:53 - these would be our child classes now i'm
04:55 - not going to go much further than that i
04:57 - have a bunch of videos on object
04:58 - oriented programming but that is the
04:59 - basic idea behind inheritance all right
05:02 - so moving on we are now talking about
05:03 - abstract classes specifically abstract
05:06 - based classes now an abstract class is
05:09 - simply a class that is designed to act
05:11 - as the base or the parent class in an
05:13 - inheritance hierarchy but is not
05:15 - intended and should not be instantiated
05:18 - now what that actually means is you're
05:19 - never going to create a concrete
05:21 - instance of this abstract class so i
05:24 - will never make an object that is of the
05:26 - type of this abstract class so for
05:29 - example
05:30 - let's go back to the manager employee
05:31 - supervisor right when we had our
05:33 - employee we said that was our parent
05:35 - class and the supervisor and manager
05:37 - we're going to inherit from it well this
05:39 - is not an abstract class because we
05:41 - could actually create an instance of
05:43 - employee it's not invalid for me to make
05:45 - someone who's an employee but who is not
05:47 - a manager and who is not a supervisor
05:49 - however if that employee class was
05:51 - actually turned to an abstract class
05:53 - then we would no longer be able to make
05:55 - an instance of it because its only role
05:57 - is to act as the super class for
06:00 - concrete classes below it so when you
06:02 - have an abstract class a lot of times
06:04 - what you do is you actually write
06:05 - something known as an abstract method
06:07 - and this is a method that is not yet
06:09 - implemented but that you want every
06:10 - single subclass every single class
06:12 - that's inheriting from it to implement
06:15 - on its own so really the point of the
06:16 - abstract based class is to provide base
06:19 - behavior for concrete implementations of
06:21 - this class i understand that sounds a
06:23 - little bit confusing that's the best
06:25 - definition i can give you in about one
06:27 - minute so moving on we have interface
06:29 - now an interface is an abstract type
06:31 - that is used to define the behavior that
06:34 - any class that implements it must define
06:37 - seems a little bit weird but let's say
06:38 - we have a list interface okay now this
06:41 - is not something that we can make an
06:43 - object from i can't instantiate the list
06:45 - interface and in fact in the list
06:47 - interface all i'm actually able to do is
06:50 - define the properties or methods the
06:52 - classes that implement me are going to
06:55 - use so if i make a list interface maybe
06:58 - i define a method and we'll call this
07:00 - method say length and we define another
07:03 - method called index i don't write the
07:05 - implementations of these methods i don't
07:07 - give the functions any bodies all i do
07:09 - is just write the name of them and i say
07:11 - hey if you implement me if you implement
07:12 - the list interface you must implement
07:15 - this behavior in this functionality so
07:17 - now we write a linked list class
07:19 - notice i said class not interface and we
07:21 - implement the list interface if i do
07:24 - that i have a class that implements the
07:25 - interface i must inside of this class
07:28 - implement all of the methods and
07:30 - functionality defined by the interface
07:32 - so now on my linked list class i write a
07:34 - concrete implementation of the length
07:37 - and the index method because i'm
07:39 - implementing the interface now the point
07:41 - of doing this is that i can now view an
07:43 - object of type linked list as simply the
07:47 - list interface
07:48 - this means that i can view this object
07:50 - only knowing that it has the length and
07:52 - index method and i don't have to care
07:55 - about any of its other functionality or
07:57 - even what general type it is and this
07:59 - allows me to accept any object that
08:01 - implements the list interface as say an
08:04 - argument type or a parameter typed to a
08:06 - function and treat it the exact same in
08:08 - this function because i know that it has
08:10 - a set amount of functionality so the
08:13 - next term i have is polymorphism now
08:15 - let's say buzzword people throw this
08:17 - around all the time without actually
08:18 - knowing what it means but i'm just going
08:20 - to break down the actual compound word
08:22 - here so we have poly and then we have
08:24 - morphism now if we look at poly and
08:26 - morph poly means many and morph is just
08:28 - a form right so if we have polymorphism
08:31 - this is really saying that we can have
08:32 - something existing in multiple forms now
08:35 - if i read you the actual definition this
08:37 - is the concept that objects of different
08:39 - data types can be accessed through the
08:41 - same interface and what this really
08:42 - means is a single object can be treated
08:44 - as a different type based on the context
08:47 - it's used in so this is actually the
08:49 - reason why we have something like
08:51 - interfaces we have something like uh
08:54 - inheritance and we have kind of this
08:56 - idea of abstraction polymorphism is just
08:58 - kind of this underlying concept that
09:01 - defines object-oriented programming and
09:03 - allows for all these functionalities to
09:05 - exist we're saying that if something is
09:07 - say of type manager but manager inherits
09:10 - from employee we can treat this object
09:13 - that is of type manager like it is of
09:15 - type employee because it implements the
09:17 - functionality of the employee class same
09:19 - thing with our interface right it
09:21 - doesn't really matter what type our
09:22 - object is if the class it's from
09:24 - implements the interface we can treat it
09:26 - exactly like that interface so one
09:28 - object can be treated in different ways
09:30 - and have kind of slightly different
09:32 - behavior or access to behavior based on
09:35 - the context it's used in our program
09:37 - that's really all polymorphism means
09:39 - anyways that's going to conclude the
09:41 - object oriented programming section so
09:43 - moving on we are getting into the
09:45 - networking and web technologies section
09:47 - so the first term i have for you here is
09:49 - the server side slash the back end now
09:52 - people do use these interchangeably they
09:54 - can have slightly different meanings
09:56 - point being they're very similar so i
09:57 - group them together anyways this really
09:59 - refers to the programs or operations
10:02 - that are running on the server or the
10:04 - remote machine now the reason this is
10:06 - important is because something that's
10:07 - running remotely so not on your own
10:09 - computer or on the user's computer is
10:12 - not accessible from the user and cannot
10:14 - easily be manipulated so if i have say
10:17 - the back end of my website right that's
10:19 - running on a remote server and this is
10:21 - responsible for handling http requests
10:24 - which is the web request you send when
10:25 - you want to get the html of the page and
10:28 - so i hit the server it sends me the html
10:31 - and then my browser actually renders the
10:33 - html so the rendering of the html is
10:35 - happening on the front end or the client
10:37 - side but actually retrieving the html
10:40 - from the page while i'm getting that
10:42 - from the server that's running my
10:43 - website so anything that's happening in
10:45 - the back end not a program that's
10:47 - running on your actual computer
10:49 - something that's running somewhere else
10:50 - and then giving you some data or giving
10:52 - you some information is the back end or
10:54 - the server typically you have your apis
10:57 - running on a server your databases are
10:59 - running on a server any sensitive
11:00 - information you put in the back end or
11:02 - the server side because the user of your
11:05 - program cannot manipulate that data they
11:07 - can only send different requests to the
11:09 - server and the server should be able to
11:11 - handle any say malicious requests so as
11:14 - you probably guessed the next term i
11:15 - have is the front end or the client side
11:18 - now this is really the application or
11:20 - the operations that are facing your user
11:23 - that they actually see and that they can
11:24 - manipulate in whatever way that they
11:26 - would like so as i was saying before if
11:28 - the server sends you the source of the
11:31 - page then you render that on your
11:33 - computer well you are rendering the
11:35 - front end or the client side your
11:37 - browser is responsible for doing that
11:39 - now since your computer is actually
11:41 - doing this you can go and you can look
11:42 - at that code you can look at the source
11:44 - of the html you can look at the
11:46 - javascript and you can manipulate that
11:48 - if you like now of course that's not
11:49 - going to change it on the server but it
11:51 - will change it on your front end which
11:53 - means you can try to do something
11:54 - maliciously with it so that is why
11:56 - there's an important difference and any
11:58 - sensitive information or data you need
12:00 - to keep on the back end you need to make
12:02 - sure that a user could not change
12:03 - something on your front end that's going
12:05 - to actually affect the back end and the
12:07 - security of your system all right so
12:09 - next we are moving on to the term packet
12:11 - now a packet is simply a block of data
12:13 - that's being transmitted across the
12:15 - network so whenever you want to send
12:17 - some information from one computer to
12:20 - another you're going to use the internet
12:21 - to do this right you can use some type
12:23 - of network to do this whether it's your
12:24 - local network or it's actually the
12:26 - internet point being is that you can't
12:28 - usually send all the information you
12:30 - want in just one piece of data for
12:32 - example say i want to send you an entire
12:34 - video game okay i can't just send you
12:37 - that whole video game as like one little
12:39 - package i need to split it into packets
12:42 - those packets all get sent to you and
12:44 - then once you receive all the packets
12:46 - you can reconstruct them into what the
12:48 - original data was it's very complicated
12:50 - i'm not an expert at this so i'm not
12:51 - going to explain it a ton but the idea
12:54 - is whenever you're transmitting
12:55 - information you split it into packets
12:57 - you send those packets very quickly
12:59 - through the network and then you
13:00 - reconstruct those packets with the data
13:02 - that they contain they contain a bunch
13:04 - of different types of data and there's
13:06 - packets that contain more data less data
13:08 - different protocols of packets all kinds
13:10 - of advanced stuff that i'm really not
13:11 - qualified to talk anymore about all
13:13 - right so that's going to wrap up the
13:15 - networking and web technology section
13:17 - now we're getting into cpu and task
13:19 - scheduling cpu being central processing
13:22 - unit now the first thing i'm going to do
13:24 - is explain kind of two terms to you at
13:26 - once because they go hand in hand this
13:28 - is process and thread so a process is
13:31 - really an application or program that is
13:34 - running on your operating system and has
13:36 - its own memory and has at least one
13:39 - thread
13:40 - now a process is something like obs
13:43 - which is the screen recording software
13:44 - i'm using right now something like a
13:46 - video game although you could have
13:47 - multiple processes technically really
13:49 - any application you can kind of think of
13:51 - as a process now when you create a
13:53 - process what happens is your operating
13:55 - system is going to allocate space in ram
13:58 - for that process to store its data okay
14:01 - now anything that's not a part of that
14:03 - process we'll just say for simplicity
14:05 - cannot access that data so if you have
14:07 - two processes they cannot share data
14:10 - with each other at least not very easily
14:12 - and for simplicity again we'll just say
14:13 - they can't share data
14:15 - okay so that moves us to a thread now as
14:17 - i said a process contains at least one
14:19 - thread a thread is actually the
14:21 - executing aspect of a process so it is
14:23 - code that is being read now sometimes
14:26 - you have multiple threads in a process
14:28 - the point of having that is so that
14:29 - every single thread can execute
14:31 - independently of one another so for
14:33 - example let's say you have a website and
14:36 - you need to wait for something to
14:37 - download on that website well you would
14:39 - have one thread that is responsible for
14:40 - running the user interface of that
14:42 - website another one that is responsible
14:44 - for actually downloading the content the
14:46 - reason why this is important is because
14:47 - if you only had a single thread as soon
14:49 - as you started downloading you would no
14:51 - longer be able to use the website you
14:53 - would need to wait for that thread to
14:54 - finish but if you split it into two
14:56 - individual threads you can use the
14:57 - website while you download that file the
15:00 - way that works is you will have those
15:01 - threads both being processed by
15:03 - individual cpu cores or they'll be
15:05 - splitting the processing time so you can
15:07 - kind of transfer between the two
15:08 - different threads a little bit more
15:10 - complicated than that point being a
15:12 - thread is a part of a process if you
15:14 - have threads in a process they can share
15:16 - the same data and memory so if i make x
15:19 - equals one in one thread and another
15:20 - thread that's a part of that process i
15:22 - can access that variable x okay but if
15:25 - they were in two different processes two
15:27 - separate processes with two separate
15:28 - threads then they would not be able to
15:30 - exchange data with each other again at
15:32 - least not very easily okay so moving on
15:34 - we're going to talk about concurrency
15:35 - and parallelism now something that is
15:37 - concurrent or really concurrency refers
15:40 - to the ability of a processor to work on
15:43 - multiple threads simultaneously
15:45 - and when i say simultaneously this
15:47 - doesn't necessarily mean the two threads
15:49 - are going to have work done on them at
15:51 - the exact same second in time okay or
15:54 - the exact same nanosecond in time what
15:57 - this means is that the processor is able
15:58 - to switch between different threads and
16:01 - work on different threads at the same
16:03 - time so rather than me having to say
16:05 - finish thread one before i move over to
16:07 - thread two i can do a little bit of work
16:09 - on thread one a little bit of work on
16:10 - thread two go back to thread one go back
16:12 - to thread two and the way this is
16:14 - handled is pretty complicated point
16:16 - being that's kind of what concurrency
16:17 - refers to
16:18 - so if you have a concurrent program that
16:20 - doesn't necessarily mean that two
16:22 - threads are being ran at the exact same
16:24 - time it simply means that you're able to
16:26 - work on them kind of side by side you
16:28 - can switch
16:30 - the processing power or the processing
16:32 - resource whatever you want to call it
16:34 - between the multiple threads now this
16:36 - would be between threads within one
16:38 - process or between threads in different
16:40 - processes as well so this leads us
16:42 - nicely into parallelism now a parallel
16:45 - program is a program that is actually
16:47 - having multiple threads being executed
16:49 - at the exact same time and the way this
16:51 - is possible is by multiple cpu cores
16:54 - working on threads at the exact same
16:56 - time so the number of cpu cores that you
16:59 - have in your computer actually defines
17:01 - the number of operations that you can do
17:03 - at the same time in parallel okay we
17:06 - have one cpu that means we can do one
17:08 - operation per whatever the speed of the
17:11 - processor is if i have two cpu cores
17:13 - that means i can do two operations per
17:15 - whatever the speed of the processor is
17:17 - and so if i have two cpu cores each core
17:20 - can at the same time be working on a
17:23 - thread so i can have two threads not
17:24 - having to be switched between just both
17:26 - constantly being worked on now this is
17:29 - very complicated the way that you manage
17:31 - concurrency and parallelism point being
17:33 - if something is parallel stuff is
17:35 - actually happening at the exact same
17:36 - time you don't need to wait for one
17:38 - thread to kind of stall or hang before
17:40 - you switch to the other one you just do
17:41 - both of them at the same time because
17:43 - you have separate cpu cores to work on
17:45 - them all right so now we're talking
17:47 - about asynchronous programming now
17:48 - asynchronous programming is much easier
17:50 - than creating your own threads or own
17:52 - processes as a programmer but that is
17:55 - because it's actually very complicated
17:57 - how it works and while it's difficult to
17:59 - explain in asynchronous programming you
18:01 - have something known as an event loop
18:03 - now the event loop is constantly running
18:05 - and it's capable of actually knowing
18:07 - when something has finished when
18:09 - something is started what the progress
18:10 - of something is and scheduling and
18:12 - handling tasks according to that now
18:15 - i'll just read the actual definition and
18:16 - i'll try to kind of clarify it a little
18:18 - bit more
18:19 - but this is a means of parallel
18:20 - programming in which a unit of work runs
18:22 - separately from the main application
18:24 - thread and notifies the calling thread
18:26 - of its completion failure or progress so
18:29 - the point of this is that i can do
18:30 - something like try to download something
18:32 - from the internet and while that
18:34 - download is happening i am able to
18:36 - actually go do something else without
18:38 - necessarily creating multiple threats
18:41 - again very very complicated but as the
18:43 - programmer i'm not responsible for
18:45 - distributing my program into the unique
18:47 - threads the async event loop will
18:49 - actually do that for me and it will be
18:51 - able to tell me if something is finished
18:53 - if something is finished i can go and do
18:55 - some other type of operation and i can
18:57 - await the execution of some program
19:00 - it's very complicated i have an entire
19:01 - video on asynchronous programming that
19:03 - much better articulates this point i
19:05 - can't really explain it in one minute
19:07 - but hopefully that gives you maybe some
19:08 - kind of idea of what that means all
19:10 - right so that's going to wrap up that
19:12 - section now we're going to move into the
19:14 - next section which is numbering systems
19:16 - so the first numbering system i have for
19:18 - you is take a guess
19:19 - binary now i understand this isn't super
19:22 - complicated but i'm going to explain it
19:23 - more in depth
19:24 - so binary really means kind of the
19:27 - choice or the option between two things
19:29 - right the actual word binary you know
19:31 - yes or no that's a binary decision if
19:33 - you were answering yes or no
19:34 - now in computers this refers to a base
19:37 - two numbering system that is used at the
19:39 - hardware level of computers and in some
19:41 - software to perform computations now the
19:44 - reason why this is used at the hardware
19:46 - level of computers is because with
19:48 - binary you have a zero or a one and if
19:50 - you have a zero or a one this is known
19:52 - as a bit okay now at the hardware level
19:54 - of computers you have a bunch of
19:56 - transistors i like to think of these as
19:58 - very very tiny wires that are carrying
20:00 - electrical signal now they can either be
20:02 - carrying an electrical signal or they
20:04 - cannot be carrying an electrical signal
20:06 - which means they are on or off zero or
20:08 - one right that's where we get binary
20:10 - from that's why we use it
20:12 - so at the actual computation level down
20:14 - on the cpu level of a computer you have
20:16 - a bunch of logic gates now these logic
20:19 - gates at a super fundamental level take
20:21 - in two electrical signals and based on
20:23 - the value of those electrical signals so
20:25 - on or off they output another electrical
20:27 - signal for example in an and gate if you
20:29 - have both the electrical signals on
20:31 - going in then you get on coming off if
20:33 - anyone is off you get off right now this
20:36 - is actually how you perform the basic
20:38 - math that leads us to perform more
20:40 - advanced computations it's hard to
20:42 - explain this more than that
20:43 - point being is binary is very
20:45 - fundamental to computing in general and
20:48 - at the hardware level of computers
20:49 - everything is happening in binary and
20:52 - binary is represented in the physical
20:54 - world with transistors and logic gates
20:56 - okay so continuing with binary i want to
20:58 - explain quickly a bit and a byte i kind
21:01 - of explained a bit already but this is
21:02 - really the smallest unit of data
21:04 - measurement in a computer it is either
21:06 - zero or one on or off okay that is what
21:09 - a bit is now a byte on the other hand is
21:12 - simply eight bits so if you have a byte
21:14 - of data this is capable of representing
21:17 - 256 unique numbers so either the number
21:20 - zero through 255 if you're not using a
21:22 - signed bit at the front of your binary
21:25 - or at the yeah i guess at the front of
21:26 - your binary number or negative 128 to
21:30 - 127 if you're using the first bit of
21:32 - your binary number as a sign bit now if
21:35 - you're not sure what a sign bit is this
21:37 - is simply one bit at the beginning of
21:39 - the byte that represents if the number
21:41 - is positive or negative so if you're
21:43 - using the first bit as a signed bit then
21:45 - this means that your range is going to
21:46 - change from negative 128 to 127 because
21:49 - you need to represent well negative or
21:51 - positive you can still represent 256
21:54 - unique numbers you're just getting a
21:55 - different range because you're starting
21:57 - with negative numbers and then going to
21:59 - positive okay so finally the last term i
22:01 - have for you here is known as
22:03 - hexadecimal now this is a base 16
22:05 - numbering system that is commonly used
22:07 - to simplify binary and to actually
22:09 - represent colors specifically in html
22:12 - and css now hexadecimal i believe goes
22:15 - from 0 to f so f would be 15 in
22:18 - hexadecimal and so when you have a base
22:20 - 16 numbering system the highest number
22:22 - you have if is 15 the lowest you have is
22:24 - 0. now i could do a whole video on base
22:27 - numbering systems in fact if you want
22:28 - that video let me know i just find that
22:30 - not the most interesting thing in the
22:31 - world but i would definitely make it for
22:33 - you guys alright so with that said i am
22:35 - going to end the video here i apologize
22:37 - if i didn't necessarily clear up every
22:39 - single one of these terms the point of
22:41 - this was to give you the high level
22:42 - overview so now hopefully you have some
22:45 - base level understanding you can at
22:46 - least go look up some of these terms and
22:48 - you kind of have some starting place you
22:50 - know kind of what it means and so that
22:52 - should hopefully help you if you're
22:53 - trying to learn you know maybe how to
22:55 - implement say a synchronous program
22:57 - regardless i hope you guys enjoyed the
22:59 - video if you want to see a part three to
23:01 - this where i do maybe acronyms or some
23:02 - other type of terms then let me know in
23:04 - the comments with that said please do
23:06 - like the video subscribe to the channel
23:08 - i will see you in another one
23:12 - [Music]