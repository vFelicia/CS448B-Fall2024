00:00 - hello everybody and welcome back so in
00:01 - today's video we're gonna be going
00:02 - through a fairly difficult coding
00:04 - interview question now I've been doing a
00:06 - few of these on my channel let me know
00:07 - in the comments down below and by
00:08 - leaving a like if you guys like this
00:10 - kind of format and what I'm doing and
00:11 - you want more of these videos because
00:13 - I'm always happy to do them the platform
00:15 - that I'm gonna be doing this problem on
00:16 - is called algo expert dot IO this is
00:19 - personally my favorite way to do
00:21 - programming problems simply because and
00:23 - I'll show you when we load this up here
00:25 - it's really easy to have a look at your
00:27 - raw output to see your different test
00:29 - cases to make sure that you got
00:30 - everything correct rather than trying to
00:32 - find you know some questions online
00:33 - doing them not knowing if you got them
00:35 - right having to type in the input this
00:37 - is just much easier it's much faster
00:38 - it's much more convenient they have some
00:40 - structured questions ranged by
00:42 - difficulty so you kind of can work up
00:44 - and around anyways I don't know I like
00:46 - it a lot of these questions you can find
00:48 - online but being able to work in a
00:49 - platform like this helps me focus and
00:51 - just get more done so if you guys do
00:53 - actually want to use this platform
00:55 - there's 85 coding interview questions as
00:57 - well as some other resources on here
00:58 - related to interview prep and just some
01:00 - advice I do have a discount code in the
01:03 - description so it's tech with Tim
01:04 - that'll give you 15% off if you click
01:06 - that link if you are interested in
01:08 - purchasing that and that is an affiliate
01:09 - link so i will get some commission from
01:11 - that so anyways the problem we're gonna
01:13 - be solving today is the largest range
01:15 - problem so this is one of the free
01:17 - problems under the hard section so i've
01:18 - decided to skip this one for now we
01:20 - might go back to it later and what we're
01:22 - gonna do here is just solve this problem
01:24 - so essentially i won't read this whole
01:26 - thing but what the problem is asking us
01:27 - to do is find the largest sequence of
01:30 - consecutive numbers inside of a list now
01:34 - these numbers do not need to be right
01:35 - beside each other so left or right they
01:37 - don't have to be adjacent they just have
01:38 - to exist so in this case it's telling us
01:41 - the largest range of numbers or sequence
01:43 - of numbers inside of this list is 0 and
01:47 - 7 so 0 is the starting point 7 is the
01:49 - ending point that means we know that 1 2
01:51 - through 6 are all in this list and
01:53 - that's the largest sequence of numbers
01:55 - that we found so how can we go about
01:57 - solving this problem and how can we
01:59 - solve this problem at optimal time the
02:01 - initial solution that a lot of you will
02:03 - probably think of when you hear of a
02:04 - problem like this is why don't we just
02:07 - sort the list now this is OK in some
02:10 - situations but we have to understand
02:12 - and that this is not an optimal solution
02:14 - the reason this is an optimal is because
02:17 - we want our code to run in the shortest
02:19 - amount of time possible and sorting a
02:21 - list already takes n log n time so
02:24 - that's the average time or worse time
02:26 - for sorting a list is there any way that
02:28 - we can do this faster without needing to
02:30 - do a sort well the answer is yes and I'm
02:33 - gonna bring up my drawing tablet we're
02:34 - gonna get into the solution but I'm
02:36 - gonna go through for this problem then
02:37 - we'll code it out and we'll talk about
02:38 - exactly how it works so the way I'd like
02:40 - to start by explaining a problem is just
02:42 - breaking down what the problem is
02:44 - thinking about some trivial solutions to
02:46 - that problem how we kind of use that
02:48 - solution to find the answer and then
02:50 - adapting that to find a more optimal
02:52 - solution so in this case we're gonna do
02:54 - a quick example or I'll just write a few
02:55 - numbers here there's gonna be random
02:57 - different from what we had before just
02:59 - to one to zero
03:02 - why not something like that and we're
03:03 - just gonna see you know how would we go
03:05 - about solving this well as a human what
03:07 - we're gonna do is just look for you know
03:09 - the largest range of numbers and in this
03:10 - case we can tell it's gonna be one two
03:12 - three four zero right we know that
03:16 - that's the range how can we do this in
03:18 - computing really easily and really fast
03:20 - well a really easy way to do this is to
03:23 - start by just sorting all the numbers so
03:25 - let's say we sorted all the numbers and
03:27 - we go one two three four there's a zero
03:29 - here in my bad 711 well now we can tell
03:32 - why this is so much easier because since
03:34 - all the consecutive numbers are beside
03:36 - each other all we need to do is start at
03:38 - zero loop through the list until we get
03:41 - to a point where there's no consecutive
03:43 - number so right here take all of these
03:45 - store them save them be like okay this
03:48 - is our current longest range and now
03:50 - we're at seven and now what we can do is
03:53 - loop through and find a range from seven
03:54 - and just keep going until we've gone
03:56 - through all the numbers and we've
03:57 - determined what the longest range is
03:59 - pretty straightforward pretty easy I'm
04:01 - sure you know most of you guys could
04:03 - come up with how to solve that so let's
04:04 - erase this and that's fine but the issue
04:07 - with that solution is that runs in n log
04:09 - n time because we need to actually sort
04:11 - the list first and well that just takes
04:13 - a lot of time is there any way that we
04:15 - can do this without sorting the list
04:17 - well I'm gonna walk you through my kind
04:20 - of solution which is also the solution
04:21 - that the algo expert guys use in and you
04:24 - can see it here and we'll code it out
04:25 - second that goes runs in linear time it
04:28 - doesn't require actually meaning to sort
04:30 - the list now the way that we do this is
04:32 - using something called a hash table now
04:34 - a hash table in Python is the same thing
04:36 - as a dictionary but I'll just call it a
04:38 - hash table here because that's kind of
04:39 - the more formal term for it what I'm
04:41 - gonna start by doing is loading all of
04:43 - these numbers into a hash table now
04:45 - think to yourself why I might do this
04:47 - while I write out these numbers why do I
04:49 - want all these numbers in a hash table
04:51 - what's the point of doing this like why
04:54 - why am i doing them all so what am I
04:56 - going to use is the key well in this
04:58 - case I'm going to use zero as starting
04:59 - out the key as the value for all these
05:01 - keys in my hash table and ask yourself
05:04 - why I might do something like that why
05:06 - would I use the number zero or maybe
05:08 - false or maybe true why might I use that
05:11 - as the key well the whole point of
05:13 - storing all these numbers in the hash
05:14 - table is oh one time lookup now what I
05:17 - mean by that is trying to find if any
05:19 - element exists in a list is gonna take
05:21 - you oh and time the reason for that is
05:23 - because you need to look through all the
05:24 - different elements in the list to
05:25 - determine if a specific element exists
05:27 - however looking up an element in a hash
05:29 - table runs in O one time and that's
05:32 - exactly why we're gonna use it because
05:34 - what I'm gonna do is simply start at a
05:36 - number go left and go right from that
05:39 - number so go 10 go 12 and just count how
05:42 - many times and how far I can go until I
05:44 - reach a point where none of those
05:45 - numbers are in my hash table now I know
05:48 - you're still confused right now we're
05:49 - gonna go through obviously a detailed
05:50 - example and explain it but what we're
05:52 - gonna have kind of in our program is
05:54 - we're gonna be keeping track of a left
05:56 - and a right now the left and the right
05:59 - are gonna keep pretty much say with the
06:01 - left number in their sequences and with
06:02 - the right number in our sequences we're
06:04 - gonna adjust these to reflect the
06:05 - largest range as we go through these
06:07 - numbers now we're gonna start with left
06:09 - equals zero and right equals zero if you
06:11 - guys at the very beginning our largest
06:13 - range is just one number which is the
06:15 - first number in the list and that's
06:17 - merely because we just don't know we
06:19 - haven't looked through it yet that's a
06:21 - default value so what my kind of
06:23 - algorithm is what I'm gonna do is I'm
06:25 - going to look at each number in the list
06:27 - so we're gonna go through end times
06:28 - through the list and what I'm gonna do
06:31 - is I'm going to create a left pointer
06:33 - and a right pointer which are equal to
06:35 - the numbers directly above and directly
06:36 - below left so in this case 12
06:39 - and in this case 10 and I'm gonna
06:40 - continue branching this out so to the
06:43 - left and to the right
06:44 - until I reach a point where the numbers
06:46 - here are no longer in the hash table or
06:49 - don't exist in this list right so the
06:53 - basic algorithm is look to the left look
06:55 - to the right so I'm gonna look to the
06:57 - left and I'm gonna see if 10 is in my
06:59 - hash table now in this case I go through
07:01 - I look at my hash table about a1 lookup
07:03 - time it doesn't take any time at all and
07:05 - I don't see 10 so what I do is I say
07:07 - okay
07:07 - we can't go left from 11 there's no more
07:10 - numbers left in the sequence from 11
07:11 - let's go right and let's look at 12 well
07:15 - now we're looking for 12 and obviously
07:16 - we look in this hash table we don't see
07:19 - 12 so what do we do we say okay we can't
07:21 - go right and what this means is now
07:23 - we've visited 11 we've looked at 11 and
07:25 - we've determined that the largest
07:27 - sequence that 11 will be a part of is
07:29 - gonna be just itself and the reason we
07:31 - can say that definitively is because if
07:33 - there was a 10 or if there was a 12 then
07:36 - we would have found it we would have
07:37 - seen it in the hash table and we would
07:38 - have been able to determine that okay
07:40 - potentially 11 could be in a longer
07:41 - sequence but here since there's no 10 of
07:43 - there's no 11 no matter what the largest
07:45 - sequence that 11 can be in is itself so
07:48 - what we do now is we go down here to
07:50 - that our hash table we find 11 and we
07:53 - mark it with low 1 simply saying that
07:56 - we've looked at 11 so far there's no
07:58 - point in looking at 11 again we've
07:59 - already done now this isn't super
08:01 - important for 11 but you'll see whether
08:02 - you mark this a second that would go to
08:04 - 7 and what kind of speed through this
08:06 - now because I think you're getting the
08:07 - hang of it and we'll do the same thing
08:08 - we're gonna look left so for sex we're
08:11 - gonna look right for 8 now in this case
08:14 - we don't find either of them right so
08:17 - same thing here what we're gonna do is
08:19 - well we know that 7 cannot be a part of
08:21 - the sequence so what we're gonna do is
08:22 - Mark a 1 now I forgot to mention what
08:26 - we're doing with this left and right
08:27 - variable up here well essentially what
08:29 - we're gonna do is when we kind of go
08:31 - left and right we're gonna check if that
08:33 - left and right distance is greater than
08:35 - the current left and right that we have
08:37 - so in this case obviously 0 0 the
08:38 - difference between them is 0 so any two
08:40 - numbers left and right are gonna give us
08:43 - a larger difference so in this case when
08:45 - we you know had 11 with our first number
08:48 - we would actually say that the left is
08:49 - gonna be 11 and the right is gonna be 11
08:51 - because that's
08:52 - largest sequence that we currently know
08:53 - which is just 11 we get to seven same
08:56 - thing so seven is the same length
08:58 - sequence as 11 we know that there will
09:00 - never be two sequences of the same
09:02 - length of the max sequence but I can
09:04 - either decide to leave these as 11 or I
09:06 - can put them as 7 I can change that
09:09 - variable if I wanted to a set but anyway
09:11 - so let's go to 3 now and explain how
09:12 - this works so now we're at 3 we've
09:15 - already looked at 11 we've already
09:16 - looked at 7 we've determined that those
09:18 - are not a part of a longer sequence than
09:19 - just themself and what I'm gonna do now
09:21 - is do the same thing from 3 I'm gonna
09:23 - look at 2 and I'm gonna look at 4 but in
09:26 - this case both 2 and 4 actually exist in
09:29 - my hash table so here I can see 4 exists
09:32 - and I can see that 2 exists so what I'm
09:34 - gonna do is since I actually exist I'm
09:36 - gonna mark them as the fact that I've
09:38 - seen them and I'm gonna say that
09:40 - currently now at this point in time you
09:42 - know my left value is gonna be 2 and my
09:45 - right value is gonna be for my temporary
09:47 - laughed at my temporary right value is
09:48 - gonna be 2 and it's gonna be 4 and the
09:50 - reason that's gonna be that is because
09:52 - that's currently where I am on the left
09:53 - and that's currently where I am on the
09:55 - right and that's the current sequence
09:56 - that we have 2 3 4 right ok so now we
09:59 - say okay well we found 2 we found 4 so
10:01 - let's try going both ways again so let's
10:03 - try going to 5 and let's try going to 1
10:06 - well obviously we know 5 doesn't exist
10:07 - so we're gonna end on that path there
10:09 - that means 4 will stay as our right
10:11 - element then we're gonna look at one
10:14 - well now we look at our hash table we
10:16 - find one so what do we do we're gonna
10:18 - mark 1 so we're gonna say we've looked
10:20 - at 1 let's mark it so we do that and
10:23 - then you know our left now is gonna be
10:25 - at 1 because that is the current for
10:28 - this left point we have and we say ok
10:30 - well let's not stop at 1 let's keep
10:31 - going let's go to 0 okay let's look for
10:34 - 0 well we found 0 it's down here so what
10:37 - do we do we mark 0 we give it a 1 let's
10:40 - do that and then all this left to mark
10:42 - is 3 after that don't essentially you
10:44 - know we can't we're gonna go we're gonna
10:45 - look for negative 1 we're gonna see
10:47 - negative 1 doesn't exist so we'll end
10:49 - we're gonna mark 3 is the fact that
10:50 - we've seen it so let's do this now and
10:53 - now what we're gonna do is we're gonna
10:55 - go to the next number so all this you
10:58 - know we can cross that out we've just
11:00 - done three we've done seven we've done
11:02 - 11 now it's time to do 4 but the thing
11:04 - is we don't need to do 4 because we've
11:06 - already determined that 4 is a part of a
11:08 - sequence we've already determined from
11:10 - looking at 3 that 4 is a part of a
11:12 - sequence so we don't need to do 4 so
11:14 - what we're gonna do is check if 4 is
11:16 - marked as 1 if we've seen it if it's a
11:18 - part of a sequence already and if it is
11:20 - well what we're gonna do is skip it and
11:22 - same thing with 2 we're gonna check you
11:24 - know is this a part of a sequence it is
11:26 - already we have it marked it has a 1 so
11:28 - let's skip it and then we're gonna look
11:30 - at 1 we're gonna say okay well one
11:32 - that's in there it's marked as a 1 so
11:34 - what we'll do is we'll skip it
11:35 - same thing with 0 and now we're at a
11:37 - point where we've determined that the
11:38 - longest range is actually the left value
11:41 - of in this case I guess 0 and the right
11:43 - value of what was it before and that is
11:46 - our longest range now you might be
11:48 - getting a little bit confused on how
11:49 - we're calculating the longest range but
11:51 - essentially all we're gonna do is from
11:52 - each number go as far left as possible
11:54 - consecutively go as far right as
11:56 - possible consecutively
11:58 - we're gonna keep track of what the
11:59 - furthest left and the furthest right
12:01 - point was so in this case you know we
12:02 - had 0 and we had was it 4
12:05 - we're gonna calculate the difference
12:06 - between them in this case which is 4 so
12:08 - 4 numbers in that sequence we'll compare
12:10 - that against what our current max left
12:12 - and right value is and we'll say if that
12:14 - sequence is currently greater that we
12:15 - have will replace our greatest sequence
12:18 - with that and we'll keep going through
12:20 - all the different numbers using this
12:22 - hash table to look them all up in a 1
12:23 - and we'll be fine now some of you might
12:26 - be like well this seems like an N
12:28 - squared algorithm where we have to look
12:30 - through all the numbers and then what we
12:31 - have to do is go left potentially
12:33 - unlimitedly and write potentially
12:35 - unlimitedly 2n right well the whole
12:37 - thing here is this actually runs in
12:39 - linear time and the reason it runs in
12:41 - linear time is because every time we see
12:43 - a number we mark it in the hash table so
12:46 - we will only actually ever evaluate a
12:48 - number one time because every single
12:51 - time that we look at it even from you
12:53 - know going left and going right that's
12:54 - only ever looking at it once because
12:56 - when we get into the for loop and we're
12:58 - the you know trying to evaluate 2 and
12:59 - trying to evaluate 1 we see that it's
13:01 - already marked in the hash table so we
13:02 - don't need to do any operations for it
13:04 - so we can be certain that this algorithm
13:06 - will run actually in perfect Oh n time
13:09 - every time because well we don't need to
13:12 - do evaluations on the numbers that we've
13:14 - already marked and
13:15 - you know we're only gonna mark and
13:16 - numbers so that's essentially how that
13:18 - works so anyways that is kind of
13:20 - dissolution now let's actually get into
13:22 - programming and I know this was long but
13:23 - I want to make sure that you guys really
13:25 - understood how this worked and why this
13:26 - does run in O n time as always leave
13:29 - questions down below and let's get into
13:31 - coding it now okay so I made this code
13:32 - box full screen I'm hoping this is
13:34 - readable enough for you guys and let's
13:36 - actually just start coding the problem
13:38 - so essentially we're gonna follow that
13:39 - algorithm that I explained we're gonna
13:41 - create a hash table to start we're gonna
13:43 - go look at every single number in our
13:45 - list we're gonna look to the left and to
13:47 - the right of that number we're gonna see
13:48 - how far we can go we're gonna mark the
13:50 - numbers in our hash table and that will
13:51 - actually ensure that our algorithm runs
13:53 - in O n time we'll keep track of the
13:55 - furthest left and for this right point
13:57 - in the largest sequence and then we'll
13:59 - return them so what do we need to do to
14:01 - start well we need to create a hash
14:02 - table so I'm gonna create numbers equals
14:05 - this and I'm gonna say X colon zero for
14:08 - X in array now what this is going to do
14:11 - is simply create a new entry in our hash
14:13 - table that has the value 0 and the key
14:16 - whatever the number is for every number
14:18 - in our array so we'll do that then I'm
14:20 - gonna set up some left equals right
14:22 - equals 0 variables here so left equals 0
14:25 - right equals 0 you can do this in Python
14:26 - it's kind of like a fancy trick to keep
14:28 - track of what our current longest
14:30 - sequence is or the left point of our
14:32 - longest sequence and the right point of
14:34 - our longest sequence okay and now what
14:36 - we're gonna do is we're gonna look
14:37 - through every single number in our array
14:38 - so we're gonna say 4 number in array and
14:41 - the first step to check is have we
14:44 - already evaluated this number is it
14:45 - already a part of a sequence or doesn't
14:47 - need to be a value at it's still so we
14:49 - can check that and very basically will
14:51 - say if numbers number equals equals 0 in
14:57 - only bad case will we actually evaluate
14:58 - the number otherwise if this is not true
15:01 - that means that we've already seen this
15:03 - number when we've gone left or gone
15:04 - right from another point and there's no
15:06 - point in evaluating it again because we
15:08 - know that you know going left to right
15:09 - we're gonna reach the same sequence
15:10 - again because we've checked that already
15:12 - so we're gonna say if you know if it's
15:15 - not been evaluated what we need to do is
15:16 - go as far left as you can from it and go
15:18 - as far right as we can from it and keep
15:20 - track of those values so I'm gonna say
15:22 - left underscore count cools in this case
15:25 - we're actually gonna do number minus
15:28 - one for me to say right underscore count
15:32 - equals number plus one now what I'm
15:36 - gonna do is go as far left from this
15:38 - number as I can looking it up in the
15:40 - hash table each time and then I'm gonna
15:41 - go as far right and keep track of that
15:43 - so to do this I'm gonna say Wow left
15:45 - underscore count
15:48 - what's it sorry actually my bad here ya
15:51 - know well left underscore count in
15:54 - numbers so this is a lookup in the hash
15:57 - table just seeing if it exists again
15:59 - this will run into a one time so let's
16:01 - actually write that down so that we
16:03 - remember oh one okay I don't know why
16:07 - the brackets aren't okay that would make
16:08 - sense
16:08 - anyways so while this number is in
16:11 - numbers what we'll do is simply
16:12 - decrement the number and mark the number
16:14 - in numbers so we'll say numbers left
16:19 - underscore count equals one then what
16:22 - we'll say is the left underscore count
16:24 - - equals one so continue to the left as
16:27 - far as we can now once we reach a point
16:29 - where we get out of this loop we
16:30 - actually just need to add one to left
16:32 - camp the reason we need to do that is
16:34 - simply because when we start by
16:36 - subtracting one and we don't necessarily
16:38 - know if this number is automatically
16:41 - gonna be in left count and at the end we
16:43 - subtract one again to see if the next
16:45 - number is gonna be in numbers or in our
16:47 - hash table so we need to just add one at
16:49 - the end to make sure that we're not
16:50 - saying what an extra number exists in
16:52 - our sequence when really it does not
16:54 - anyways you guys will see that in a
16:56 - second okay so that's the left aspect of
16:58 - it we can actually copy this and do it
17:00 - with the right aspect but I feel like it
17:01 - might be faster just type it will say
17:03 - well write on your score count and
17:06 - numbers then we'll say numbers oops this
17:11 - and I guess I need a colon so we'll say
17:14 - numbers right underscore count equals
17:17 - one and then right underscore count plus
17:19 - equals one if I could type properly and
17:23 - then we'll say write underscore count -
17:27 - equals one and this needs to be plus
17:29 - equals one as well you guys can tell a
17:31 - little tired this morning apparently I
17:32 - keep forgetting all this basic stuff
17:33 - okay and I have this cursor in the wrong
17:36 - book okay so anyways there we go we have
17:37 - write count and we have left so what
17:39 - we've done down just so everyone's on
17:42 - the same page
17:42 - here is we've initialized two variables
17:44 - left count and right count our left
17:45 - count is gonna go left or right count is
17:47 - gonna go to the right again keeping
17:48 - track of the consecutive numbers from
17:50 - whatever number we're at so let's say
17:51 - we're looking at the number four in our
17:53 - array we're gonna check is for marked
17:55 - have we looked at for you in our hash
17:56 - table we haven't okay
17:57 - so we'll set up our left count to be
17:59 - start at 3a right count to start at five
18:01 - and now we're gonna check is three in
18:03 - numbers if it is what we'll do is we'll
18:06 - mark that number and then we'll check
18:07 - now if two is in numbers then we'll keep
18:09 - doing that right as soon as we break out
18:12 - what we'll do is say okay well we
18:13 - checked two two wasn't in the number so
18:16 - let's just add that left count back up
18:17 - one because that's the last number that
18:19 - we knew for sure was in the range right
18:21 - now same thing with the right count
18:23 - we're going to check if in this case
18:24 - five is in numbers if it is we'll mark
18:26 - it will add to the next one then we'll
18:28 - check if six is in otherwise what we're
18:31 - gonna do when we break out is just
18:32 - subtract one so we have the correct
18:33 - range now what I'm gonna do is actually
18:36 - set the largest range aspect here so I'm
18:38 - going to say if right minus left is less
18:42 - than in this case right underscore count
18:46 - - left underscore count and I'm actually
18:49 - gonna do a less than or equal sign here
18:51 - and we'll talk about why in a second I
18:53 - want to do that then what we'll say is
18:55 - right
18:56 - goes right underscore count and left
18:59 - equals left underscore count and then we
19:03 - will simply return at the end here an
19:05 - array with left and right so now I know
19:09 - what kind of ended this you know kind of
19:12 - fast here I'm sure some of you guys are
19:13 - probably still figuring out what's going
19:14 - on but essentially this is all that we
19:17 - need to do to actually make this work
19:18 - now we'll run through it one more time
19:20 - you know with an example here but let's
19:22 - talk about this part what this is doing
19:23 - this is gonna check to make sure that
19:26 - the current range that we've just found
19:27 - by going left and going right is larger
19:30 - than the last previous range that we had
19:32 - kept track of so in this case the first
19:35 - time you run this this will always be
19:37 - true because obviously you know your
19:39 - number won't be marked that you're
19:40 - looking at so the first number won't be
19:41 - marked then what you're gonna end up
19:43 - doing is say that left equals right and
19:45 - these will be the same value if there's
19:47 - no you know sequence from the first
19:49 - number all right so if you say left less
19:51 - than or equal to then what we're gonna
19:53 - do is keep track of all these sequences
19:54 - so maybe we find a sequence of length
19:55 - two
19:56 - maybe that sequence has the numbers one
19:57 - two in it will say left equals 1 right
19:59 - equals two we know that how many numbers
20:01 - are in that sequence by subtracting the
20:03 - right pointer from the left pointer so
20:05 - in this case gives us 1 and then we
20:07 - check if the current sequence we found
20:08 - is greater than or less than that
20:10 - sequence and that's pretty much all that
20:12 - we need to do and in that case we mark
20:14 - right and we mark left and there we go
20:17 - and yeah I'm fairly certain that that's
20:19 - all that needs to be done I'll check to
20:22 - make sure and yeah I'm gonna go ahead
20:25 - and say that that's okay so let's
20:26 - actually run this code
20:28 - so let's how do I get inside a
20:29 - full-screen mode okay so run code give
20:32 - it a second and we can see we pass all
20:33 - these test cases so let's compare it to
20:36 - what solution they had so their solution
20:38 - is very similar so you can see they have
20:40 - a best range nums longest length I think
20:44 - they've made it a little bit more
20:45 - complicated than it really needs to be
20:47 - to be honest on in terms of the way that
20:48 - they programmed it but I mean you know
20:51 - you guys can be the judge whether you
20:52 - like my version or their version better
20:53 - anyways that is the problem now if we
20:57 - look here we can see some of the hints
20:58 - that it was trying to give us so you can
20:59 - use a hash table which obviously we did
21:01 - iterate through the input array once
21:04 - storing every unique number in hash
21:05 - table which we did then optimal space
21:07 - time complex the O n time o n space and
21:09 - that's exactly what we're doing because
21:11 - well we're keeping oh and space here
21:14 - well we need this hash table for every
21:16 - number in the list and then for here
21:18 - this is simply o n we know that this
21:20 - will ever uh never only run n times so
21:23 - in theory we could say this is n plus n
21:25 - and obviously that's gonna be 2 n which
21:27 - is gonna simplify to n so anyways that
21:29 - has been it if you guys do like I'll go
21:32 - expert honestly I'm telling you guys
21:33 - I've used this I'm really not just
21:35 - trying to sell you a product this is a
21:37 - great platform if you want it take
21:39 - advantage of the discount code it is the
21:41 - link in the description and I will be
21:42 - honest with you guys this a platform has
21:44 - been getting more expensive if I go to
21:45 - the purchase
21:46 - it used to be $77 it's 85 now and I can
21:49 - only imagine in the future it will
21:50 - continue to rise in price as they add
21:52 - more questions as it seems to be that
21:54 - whatever how many questions they have
21:55 - they charge one dollar for each question
21:57 - so anyways that's has been it I hope you
21:59 - guys enjoyed if you did leave a like
22:01 - subscribe and let me know what you guys
22:03 - want to see in the future