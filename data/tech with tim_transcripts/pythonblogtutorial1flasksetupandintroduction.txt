00:00 - hello everybody and welcome to a brand
00:02 - new tutorial series on creating a blog
00:05 - like
00:05 - application using python and using flask
00:09 - now this is going to be a long series
00:11 - probably somewhere between five to ten
00:12 - videos and
00:13 - likely around four to five hours of
00:16 - actual recorded content
00:17 - that is because there's a lot you need
00:19 - to do when it comes to actually building
00:21 - some type of blog
00:22 - we're gonna start by building out user
00:24 - authentication so we're gonna make sure
00:25 - people can sign in
00:26 - create accounts sign out so on and so
00:29 - forth
00:30 - then we need to allow people to actually
00:31 - make posts so they can post something on
00:33 - their blog
00:34 - then we're gonna have to allow likes
00:36 - comments and kind of all the other
00:38 - things you would assume
00:39 - a blog app has now this won't be a
00:41 - completely fully finished
00:43 - super feature-rich application but after
00:45 - going through this tutorial you will
00:47 - learn a ton about web development with
00:49 - python
00:50 - and we're actually going to write zero
00:51 - javascript in
00:53 - this uh this video series so my goal
00:55 - here is to make everything work with
00:56 - simply python
00:58 - so you only need to know python you
00:59 - don't need to know javascript and with
01:01 - that said let me give you a quick demo
01:02 - of the application
01:03 - that we're going to be building out so
01:05 - as i said we're going to be doing this
01:06 - in flask with python
01:08 - you can see this is kind of what the
01:09 - blog looks like i'm not focusing a ton
01:11 - on styling although i will make things
01:13 - kind of
01:13 - look somewhat organized on the page so
01:16 - we can start by creating an account
01:17 - where we can log in
01:18 - i'll just make an account i'll go with
01:20 - tim at gmail.com
01:23 - we can just go tim as the username and
01:25 - then password i'll just go one two three
01:27 - four five six seven
01:28 - one two three four five six seven all
01:30 - right submit
01:31 - you can see we've created our account it
01:32 - brings us to the home page
01:34 - and we can see all of the posts that
01:35 - people have kind of put out there so i'm
01:37 - treating this as kind of like a social
01:39 - media slash
01:40 - blog website so you can see all the
01:42 - different posts you can see the number
01:43 - of likes we can like a post by simply
01:45 - pressing on
01:46 - the like button or we can comment on a
01:49 - post right so you can see all the
01:50 - comments this post has
01:51 - we'll just say hello comment and then
01:55 - notice hello is here now i can press on
01:57 - someone's username and i can see all of
01:58 - the posts that they have
02:00 - and i can obviously like and unlike
02:01 - posts so that's kind of the basics of
02:03 - this
02:04 - you can also make a post so this is a
02:07 - test post okay let's make a post there
02:10 - and then notice it tells you know post
02:12 - created
02:13 - brings you back to this page and then
02:14 - you can see all of the posts
02:16 - so that is kind of the basic idea this
02:18 - is what i'm going to be showing you how
02:19 - to create
02:20 - i hope you guys are excited if you are
02:22 - make sure to leave a like on this video
02:24 - subscribe and let's get into the video
02:29 - [Music]
02:35 - all right so let's go ahead and get into
02:36 - it the first thing i'm going to state is
02:38 - just a few prerequisites or things you
02:40 - should consider before you go try to
02:41 - follow along with this for four or five
02:43 - hours
02:43 - so first of all this series is not
02:45 - designed for beginners
02:47 - i do tend to explain almost everything
02:49 - that i'm doing so if you are a beginner
02:50 - you'll probably be able to follow along
02:52 - but that's not kind of the intended
02:54 - audience this is meant for people that
02:55 - have some experience with python
02:57 - understand maybe a little bit about web
02:59 - development http
03:01 - and html we're going to be writing a lot
03:03 - of html here and a lot of python
03:05 - but no javascript so you don't need to
03:07 - know javascript usually for web
03:09 - development tutorials you need to have
03:10 - some background in that
03:11 - regardless that's kind of all the
03:13 - prerequisites next what you need to do
03:15 - is get some coding environment obviously
03:17 - you need to have
03:18 - python installed i'm going to be using
03:20 - python version 3.8
03:21 - you can use any version you want that's
03:23 - above 3.6 that should be compatible with
03:25 - this tutorial
03:26 - i'm also using vs code to write all of
03:28 - my code in i prefer this for kind of
03:30 - larger projects and stuff that has html
03:33 - because i can use auto formatters and
03:34 - extensions and stuff that i'm going to
03:36 - show you how to set up right now
03:37 - regardless use whatever you want
03:39 - download vs code and we can go ahead and
03:41 - get started
03:42 - so i'm inside of a folder here i've
03:43 - opened this up in vs code the first
03:45 - thing i'm going to do is create a new
03:46 - folder i'm going to call this website
03:48 - this is where all of the code related to
03:49 - our website is actually going to go
03:52 - next i'm going to make a file i'm going
03:53 - to call this app.pi
03:56 - this will be kind of the entry point of
03:57 - our application all right now what we're
03:59 - going to do is just configure vs code if
04:01 - you're not using vs code you can skip
04:02 - this part but i'm just going to install
04:04 - a few extensions
04:05 - that are going to make our life a lot
04:06 - easier as it relates to formatting our
04:08 - code
04:09 - so i'm going to install an extension
04:11 - called prettier actually this is the
04:12 - only one we're going to install
04:14 - so if you go to the kind of extensions
04:16 - marketplace here in vs code it's this
04:18 - icon that my mouse over
04:19 - type in prettier and then press install
04:22 - this will now allow you to auto format
04:23 - your html code
04:25 - i'll show you how that works later on
04:27 - anyways that's kind of the only
04:28 - extension that you need
04:29 - all right now what we need to do is
04:31 - install some python packages
04:33 - related to the modules we're going to
04:34 - use so i'm going to open up my command
04:36 - prompt
04:37 - if you are on mac or linux open up your
04:39 - terminal and we are going to use pip to
04:41 - install the
04:42 - following packages so first thing you
04:43 - should do is try to make sure your pip
04:45 - command is working so go
04:46 - to your command prompter terminal type
04:49 - pip and
04:50 - see if it is working if this doesn't
04:52 - give you any output or it says this
04:53 - command is not found i have two videos
04:56 - on my channel
04:57 - that show you how to fix this command if
04:59 - you guys are a subscriber of this
05:00 - channel you've probably heard me say
05:01 - this about a million times
05:02 - i'll leave those videos in the
05:03 - description they show you how to fix the
05:04 - pip command
05:05 - but something you can do in case that's
05:07 - not working is try python 3
05:08 - hyphen m pip see if that works you can
05:11 - then try python hyphen m pip
05:14 - you can try python hyphen m pip 3 or you
05:16 - can try python 3
05:18 - hyphen m pip 3. now not sure if this is
05:21 - going to work for you but you can try
05:22 - those out
05:23 - okay so once your pip command is working
05:24 - what you're going to do is type pip
05:26 - install and you're going to start with
05:27 - flask this is the web framework that
05:29 - we're going to be using it's a
05:30 - lightweight
05:30 - python web framework you can see i
05:32 - already have it installed
05:34 - next you're going to install this is
05:36 - going to be flask
05:37 - sql alchemy i don't know if the capital
05:40 - is matter or not but
05:41 - believe that's how you spell it flask
05:43 - sql alchemy yes okay so that is correct
05:45 - so install
05:46 - that and then finally after that we are
05:49 - going to need to install
05:50 - flask login this is going to help us
05:53 - with uh
05:54 - authenticating our users and having them
05:56 - stored in a session and
05:57 - i'll talk about that later on okay so
05:59 - that is all we need
06:00 - all of our dependencies are installed
06:02 - now and we can actually start creating
06:04 - our first
06:05 - flask application so what i'm going to
06:07 - do is go inside of my website folder
06:09 - here in vs code and i'm going to create
06:10 - a new file
06:11 - this is going to be called a knit dot pi
06:13 - so i'm going to have two underscores
06:15 - so underscore underscore init underscore
06:17 - underscore
06:18 - dot pi and before i go any further i
06:20 - should mention that if you're getting
06:21 - lost here or there's just some code
06:23 - that's not working or something
06:24 - all of the code that i write in these
06:26 - videos will be on github i'll leave a
06:28 - link in the description
06:29 - but for each video i'll have a separate
06:30 - folder on github for all the code in
06:32 - that video so feel free to stop pause
06:34 - look at that copy and paste
06:36 - that will probably be important
06:37 - especially when we start writing a lot
06:38 - of html
06:39 - okay so we're inside of our init.pi file
06:42 - and this is where we're going to start
06:43 - writing kind of the initialization stuff
06:45 - for our flask application all right so
06:46 - first thing we're going to do here is
06:48 - import a few modules so i'm going to say
06:50 - from and flask import
06:53 - with a capital flask i'm then going to
06:55 - say from
06:56 - flask underscore sql alchemy
07:00 - import and then this is going to be sql
07:02 - alchemy like that
07:04 - uh i think i spelt this incorrectly yes
07:07 - i did okay let's fix the spelling
07:09 - alchemy alchemy
07:10 - looks good then i'm going to say from os
07:13 - import path we're going to use this
07:15 - later on and finally i'm going to say
07:17 - from flask underscore login
07:21 - import and then login
07:24 - oops if i can get my capitals right here
07:26 - login
07:27 - manager okay nice so we now have all of
07:30 - the imports that we need
07:32 - now what i'm going to do is create a
07:34 - function i'm going to call this function
07:35 - create underscore app and what this is
07:38 - going to do is create a flask
07:40 - application and
07:41 - return it you'll see why we need to do
07:42 - this in a minute but i'm just going to
07:44 - code out a lot of this and then we'll
07:46 - kind of walk through it step by step so
07:47 - inside of here we're going to say app is
07:49 - equal to and then flask and then it's
07:51 - going to be underscore underscore name
07:52 - under scrunder square
07:53 - this is how you create a flask
07:55 - application this is the first thing you
07:56 - need to do whenever you're making a
07:58 - flask app
07:59 - you do app or whatever the name of your
08:01 - app is going to be
08:02 - equal to and then flask and then you put
08:04 - name now name is referencing the name of
08:06 - the module that you're going to be
08:08 - running to create
08:09 - this app don't really have to worry
08:11 - about it too much this is kind of just
08:12 - what you do now after you do this you
08:15 - need to
08:15 - configure a few variables for flask now
08:18 - you don't have to do this but it's a
08:19 - good idea to do this
08:21 - the first thing we need to configure is
08:22 - what's known as our secret underscore
08:24 - key
08:25 - this is a key that we're using i believe
08:27 - to hash session
08:28 - data which you encrypt session data
08:31 - again you don't have to worry about it
08:32 - too much but you need some kind of
08:33 - secret key here
08:34 - you can make this literally whatever you
08:35 - want i usually just do something like
08:37 - hello world
08:38 - and obviously in production you don't
08:40 - want anyone to know what the secret key
08:41 - is but since we're just going to be kind
08:43 - of
08:43 - running in debug mode here for flask we
08:45 - can make this whatever we want
08:47 - all right now all i'm going to do is i'm
08:48 - just going to return
08:50 - app for right now i'm going to show you
08:52 - how we can run our flask app
08:54 - this is actually all we need right now
08:56 - there is some more but we'll do that in
08:58 - a minute
08:58 - what we're going to do now though is go
09:00 - to app.pi
09:01 - and notice that app.pi is not inside of
09:04 - the website folder so the reason i put
09:05 - this init file
09:06 - inside a website is because this makes
09:09 - this folder a python package
09:11 - now this means that from any other file
09:14 - i can actually
09:14 - import this folder and when i import
09:17 - this folder it will give me
09:19 - all of the stuff inside of dot pi so
09:22 - it's kind of strange if you haven't seen
09:23 - this before
09:24 - what i can actually do is say from and
09:26 - then i think it's just website it might
09:27 - be
09:28 - dot website i need to look at my chi chi
09:30 - here no it's just website
09:31 - import create underscore app
09:35 - so i have this folder here called
09:37 - website it has this init.pi file in it
09:39 - which makes it a package
09:40 - that means i can directly import the
09:42 - folder name and when i import the folder
09:44 - name everything inside of a nit.pi
09:46 - runs so that means i can actually take
09:49 - create app
09:50 - right from website because it's from the
09:52 - init.pi file
09:54 - hopefully that makes sense but now i
09:56 - have this create app function
09:57 - so what i'm going to do here is say app
09:59 - is equal to create
10:01 - app and i am going to say app.run
10:05 - and then debug is equal to true so
10:08 - whenever you are running
10:09 - your flask application and you're like
10:11 - programming it out you're debugging it
10:12 - you're developing it
10:13 - you put debug equals true that means
10:16 - every single time you make a change to
10:17 - your python code it will automatically
10:19 - rerun the flask web server so you don't
10:21 - have to manually keep starting and
10:22 - stopping it
10:23 - however before i do this i'm just going
10:25 - to do an if statement if statement here
10:26 - sorry i'm going to say if
10:27 - underscore underscore name underscore
10:29 - underscore equals and then this is going
10:31 - to be a string underscoring square main
10:33 - underscore underscore then we are going
10:35 - to do this
10:36 - essentially what this does is make sure
10:38 - that we actually ran this app.pi file
10:40 - not that we imported it from something
10:42 - else and then i had this code run
10:44 - okay so now we can actually start our
10:46 - flask application so what i'm going to
10:47 - do is open up my vs code terminal you
10:49 - can obviously do this from any terminal
10:51 - that you want
10:52 - and i'm going to type python app.pi now
10:54 - you also could just run this file by
10:56 - pressing the run button but i like to do
10:57 - it from the terminal
10:59 - so i'm going to go python app.pi and
11:01 - then you should see that it starts the
11:02 - flask application so if that doesn't
11:04 - work just make sure your code
11:05 - looks like this and that you have the
11:06 - folder and your init files name the
11:08 - correct thing
11:09 - and now what we're going to do is copy
11:11 - this link right here so it says running
11:13 - on
11:13 - http 127.0.0.1 this is just localhost
11:16 - by default it will run on port 5000 if
11:19 - you want to change the port
11:20 - you can say port equals and then you can
11:22 - just change the port to whatever you
11:23 - want
11:24 - okay regardless okay i need to rerun
11:27 - this because i had a syntax error
11:29 - but now i'm going to go to that link so
11:31 - this is actually the link right there
11:33 - i'm going to refresh uh
11:36 - okay one second i have another instance
11:38 - of this running i just need to
11:40 - okay so i had a different instance of
11:41 - the flask server running that's why you
11:43 - were seeing the blog
11:44 - anyways i fixed that just refresh and
11:46 - then you should see you get something
11:47 - like this this is fine this means this
11:48 - is working
11:49 - if this link actually works like you go
11:51 - somewhere that's good
11:52 - it says not found the requested url was
11:54 - not found on the server that's fine we
11:56 - haven't added any urls to the server yet
11:58 - and so obviously we're not going to find
11:59 - anything
12:00 - all right nice so what i'm going to do
12:02 - now is show you how we can create what's
12:03 - known as a view
12:04 - or kind of a route now a route is just
12:06 - like slash home
12:08 - slash page slash profile whatever we
12:11 - need to manually create
12:13 - these different routes that we can go to
12:14 - or endpoints so what i'm going to do
12:16 - inside of here inside of create app
12:18 - temporarily is i'm going to say app or
12:20 - sorry
12:21 - it's going to be at app dot and then
12:23 - this is going to be
12:24 - root like this i'm going to put a slash
12:28 - this is the actual route that we would
12:29 - go to in the url kind of address bar
12:32 - and i'm going to say define and i'm just
12:33 - going to call this home
12:35 - so this is kind of the way that you
12:37 - create a flask root or something that's
12:39 - going to show something up on the screen
12:41 - right an endpoint
12:42 - you do at app.root you do the actual
12:44 - name of the root then you define some
12:46 - python function
12:47 - and this python function needs to return
12:49 - something so in this case i'm going to
12:50 - return some html
12:52 - i'm going to return h1 h1
12:55 - and hello so now if i go to slash it
12:58 - should actually return this h1 tag so i
13:01 - should see hello popping up on the
13:03 - screen so if i go back here
13:04 - and i run this now oops i need to rerun
13:07 - my flask server because i had a syntax
13:09 - error
13:10 - so if i rerun my flask server i go here
13:12 - and i refresh
13:13 - notice we see hello pretty
13:15 - straightforward now if we wanted to make
13:16 - another route
13:17 - we would just copy this we would go here
13:20 - we would say slash and then i don't know
13:22 - let's just go slash
13:23 - profile and we need to change the name
13:26 - of the function obviously so it's not
13:27 - the same
13:28 - and then here i could just go
13:31 - profile nice so let's rerun the
13:34 - application
13:36 - and let's refresh let's now go to slash
13:40 - profile and notice this is working so
13:42 - those are the two routes that we've
13:43 - created
13:44 - okay so i just want to show you that in
13:45 - case you're not familiar with flask
13:47 - that's how you create
13:48 - roots now i don't want to create roots
13:50 - in this way i want my code to be a
13:51 - little bit more organized and i want all
13:53 - of my kind of views or roots to be in a
13:55 - separate file
13:56 - so i'm going to set up something called
13:57 - a blueprint so the first thing i'm going
13:59 - to do is make a new file here
14:01 - i'm going to call oneviews.pi i'm going
14:03 - to make a new file another one
14:05 - i'm going to call this auth.pi now
14:07 - off.pi is going to have all of the
14:09 - roots sorry related to authentication so
14:12 - login sign up sign out etc
14:14 - and then views.pi will have all of the
14:16 - views related to our core blog
14:17 - applications like the home
14:19 - page the user's profile page whatever
14:22 - the create a post page all of that will
14:24 - be inside of here
14:24 - so we've just separated them out so what
14:27 - we need to do though is we need to
14:28 - create what's known as a blueprint so
14:29 - inside of views.pi
14:31 - we can start here i just need to look at
14:33 - my little cheat sheet to make sure i
14:35 - don't mess this up
14:36 - we're going to say from flask import
14:39 - and then this is going to be a capital
14:42 - blueprint
14:43 - and then what we're going to do is say
14:44 - views is equal to blueprint
14:47 - we're going to pass the name of our
14:48 - blueprint which in this case is views
14:50 - and then underscore underscore name
14:52 - underscore underscore again don't worry
14:54 - about this too much you just need to
14:55 - pass this
14:56 - and this is the name of our blueprint so
14:57 - you're going to say views variable
14:59 - signal the blueprint put the name of
15:00 - your blueprint this should mirror this
15:02 - variable name here
15:03 - and now what you can do is just like we
15:05 - did before you can say at
15:07 - views dot root and in the same way that
15:11 - we did previously you can make a route
15:12 - so here i can say define
15:15 - home okay and then i can return
15:19 - in this case we won't even do a tag
15:20 - we'll just return oh
15:22 - nice so that is how this works okay now
15:24 - the thing is we've created this file
15:26 - we've created this blueprint which is
15:27 - really just a place where we're going to
15:29 - be storing different routes
15:30 - but we have not linked it to our flask
15:32 - application so inside of a knit top pie
15:35 - what we need to do is actually import
15:37 - this right here
15:38 - this variable and we need to register
15:40 - this blueprint with our flask
15:41 - application
15:42 - so to do that what we're going to say is
15:45 - from this would be views
15:48 - sorry this is actually going to be dot
15:50 - views
15:52 - import and then we're going to import
15:53 - views like that
15:55 - views is this variable so if you name
15:57 - that something else you would import
15:58 - that or you would change that name there
16:00 - and then we're going to say app dot
16:03 - register
16:04 - and then underscore blueprint and we're
16:07 - going to register
16:08 - the views blueprint and the prefix
16:12 - for this blueprint is going to be a
16:14 - slash now i believe we actually have to
16:15 - url on our square prefix
16:17 - is equal to slash so what i've just done
16:20 - here
16:20 - is i've said okay we have this blueprint
16:22 - it's in this views file we've imported
16:24 - it
16:24 - we're going to register that blueprint
16:26 - with our app and the url prefix means
16:28 - okay
16:29 - all of the roots inside of here what are
16:32 - they going to be prefixed by
16:33 - now in this case i don't want any prefix
16:35 - but let's say i had you know
16:36 - slash home but i wanted you to have to
16:39 - go to
16:40 - slash api slash home well i would make
16:43 - the prefix slash api
16:44 - and now if i wanted to access this i
16:46 - would need to type in my address bar
16:48 - slash api slash home and any other route
16:51 - in here i would need to put slash
16:52 - api before it to access it so that's
16:55 - what the url prefix is
16:56 - but we don't want a url prefix so i'm
16:58 - just going to leave it as slash
17:00 - all right so let's rerun this
17:01 - application now and let's see if this is
17:02 - working
17:03 - so i'm going to rerun i'm going to go
17:05 - here i'm going to refresh
17:07 - and notice this has not found i believe
17:08 - that's because did i make the route
17:10 - slash home
17:10 - i did make it slash home so if i go to
17:13 - slash home
17:14 - you can see now this is showing up all
17:16 - right so we've registered the blueprint
17:17 - for
17:18 - this file now we need to register the
17:19 - blueprint for auth so we're just going
17:21 - to copy everything inside of here
17:23 - we're going to go here we're going to
17:25 - change the name of this obviously
17:27 - to be off auth and then that means this
17:30 - needs to change to off and for now we
17:32 - can just make like some basic
17:34 - login or sign up route so let's change
17:36 - this to log in
17:38 - log in and log in
17:41 - and then we'll copy this and we will
17:44 - make
17:45 - uh sign up oops
17:48 - sign ip sign up okay and we will make
17:51 - sign
17:51 - out all right sign hyphen out
17:55 - or log out i actually like log out
17:56 - better i'm kind of using a combination
17:58 - of sine and log but that's fine
18:00 - okay so we need to change the name of
18:01 - these function obvious obviously so
18:03 - let's
18:03 - make this sign underscore up and let's
18:07 - make this
18:08 - log out and then let's change these
18:09 - accordingly so
18:11 - sign up and log it
18:15 - okay so now that we've done that we need
18:16 - to register this blueprint as well so
18:18 - we're going to go back to init.pi
18:20 - we are going to do a similar thing we're
18:21 - going to say from.off
18:23 - import and then this is going to be off
18:26 - and then we will register the auth
18:27 - blueprint
18:28 - again with no url prefix so we're just
18:31 - going to put off like that
18:32 - and we are good to go now the reason i
18:34 - need a dot here is because i'm doing a
18:36 - relative import now what that means is
18:38 - since i'm inside of a python package and
18:40 - i want to import a file that's also
18:42 - inside of this python package i need to
18:44 - put a dot before it
18:45 - if you're not inside of a python package
18:47 - you don't need the dot if you're inside
18:48 - of a python package you do and so that's
18:50 - why i'm doing the dot
18:52 - it's known as a relative import i won't
18:53 - explain it too much but that's kind of
18:55 - the rationale behind
18:56 - putting that there okay so let's look
18:58 - here
18:59 - let's rerun our flask application and
19:02 - let's refresh and let's try some other
19:04 - endpoints so log
19:05 - out okay that works sign up
19:09 - nice and then finally
19:12 - log in or did i go sign in or did i do
19:14 - login i think i did login
19:16 - uh oops why did that not work okay login
19:19 - nice
19:20 - login works perfect so now that we've
19:23 - done that
19:24 - i want to show you how we can actually
19:25 - render some real html onto the screen
19:28 - because we've set up a few routes we can
19:29 - now access a few different pages
19:31 - but obviously we don't really want to
19:33 - just be showing some basic text we want
19:34 - to show some actual html
19:36 - so that is where this function render
19:39 - underscore
19:39 - template comes in from flask there's
19:42 - this function
19:43 - it's called render template this allows
19:45 - us to render an
19:46 - html template now i'll discuss what that
19:48 - really means in a second
19:49 - but in order to do this we need to make
19:51 - a new folder in our website folder
19:53 - called templates
19:54 - so we're going to go templates like that
19:56 - and this is where we're going to put all
19:58 - of our html so we'll have some html
20:00 - files
20:00 - we will render these html files from our
20:03 - roots which means they'll be returned
20:04 - to whoever called it so we'll actually
20:06 - see that on the screen
20:07 - so inside of here let's make a template
20:10 - let's just go with a super basic
20:11 - template for right now
20:12 - and let's call this one home dot
20:15 - html and actually i'm just going to
20:18 - go back to auth i'm going to copy render
20:21 - template i'm going to go to views and
20:22 - i'm going to do it inside of here
20:24 - so now what i want to do is i just want
20:26 - to have some kind of basic html here so
20:28 - i can actually show it on the screen so
20:30 - there's a little shortcut here in vs
20:31 - code
20:31 - if you type html colon 5 and then you
20:34 - hit
20:35 - tab it gives you a boilerplate sorry
20:38 - html template
20:39 - you don't have to do that obviously but
20:40 - i like this it saves us a bit of time
20:42 - so i'm just going to change the title
20:44 - quickly to say home and for the body
20:46 - i'll just do an h1 tag
20:48 - and i will just say home so now we
20:50 - should be able to actually render this
20:52 - html code
20:53 - assuming we do it properly inside of a
20:55 - render template
20:56 - so let's go back to views now we now
20:58 - have our
20:59 - home.html file inside of templates it's
21:02 - very important you create this templates
21:03 - folder if you don't make this templates
21:05 - folder
21:06 - this is not going to work flask knows to
21:08 - look for templates
21:09 - inside of the templates folder well you
21:11 - just you need to have a templates folder
21:12 - so all we need to do if we want to show
21:14 - that html is instead of returning some
21:17 - string
21:17 - we're going to return render template
21:20 - and we're going to render
21:21 - the name of our template in this case
21:23 - home.html
21:24 - so when i do this flask knows to look
21:26 - inside of the templates folder it will
21:27 - find home.html and then it should show
21:29 - it on the screen so let's
21:30 - go here i think i'm probably gonna need
21:33 - to rerun
21:34 - my flask app oh no it's still running
21:36 - okay good let's refresh
21:38 - let's go to home and uh sorry this has
21:41 - to be slash home
21:42 - okay and there we go now we are at home
21:45 - now i'm just going to show you something
21:46 - because notice how
21:48 - slash brings us here but slash home
21:50 - brings us here now ideally i want if we
21:53 - just go to the base url so if we don't
21:54 - have
21:55 - home it shows us the same home page so
21:57 - both home and slash go to the same place
21:59 - so to do that i can simply add another
22:02 - one of these here
22:04 - right above this and say at views.root
22:07 - and just give it a slash
22:08 - this now means if i go to slash or i go
22:10 - to home it will bring me here
22:12 - so now if i refresh see it's bringing me
22:14 - to the home page
22:15 - all right so now we have a decent grasp
22:17 - of how flask works at least the basics
22:19 - right showing some different pages
22:20 - navigating around
22:21 - what i'm going to show you now is what's
22:23 - known as the jenga templating
22:25 - engine so the reason why we're not going
22:27 - to have to use any javascript for this
22:29 - application is because
22:30 - flask has this jenga templating engine
22:33 - which allows us to write
22:35 - some kind of pythonic related code
22:37 - inside of our html documents
22:39 - so the way it works is when you render a
22:41 - template notice this is called an html
22:43 - template
22:44 - you can actually pass variables to this
22:46 - template
22:47 - so i can do something like name
22:50 - is equal to tim now when i do this this
22:54 - actually allows me
22:55 - to access this name variable from within
22:58 - the html template that i'm rendering
23:00 - and the way you do this is let's just go
23:02 - like this is you put two sets of
23:04 - squiggly brackets
23:06 - and now you can access any variable that
23:08 - you pass
23:09 - through when you render this template so
23:11 - if i go here and i put name
23:13 - inside of two sets of squiggly brackets
23:15 - the templating engine knows that this is
23:17 - a variable
23:18 - so it looks for it being passed when we
23:20 - are rendering the template and then it
23:22 - actually shows you the value of this
23:23 - variable it kind of evaluates the
23:25 - expression
23:26 - so since i passed name equals tim if i
23:28 - refresh now you should see that tim is
23:30 - showing up now obviously if i change
23:31 - this to like joe
23:33 - okay let's save go here and refresh we
23:36 - get joe
23:37 - pretty straightforward we can pass
23:38 - multiple variables and we can do a lot
23:40 - more than just work with variables but
23:42 - this is kind of the cool thing is that
23:43 - we can pass
23:43 - information right from our back end to
23:46 - our front end by just
23:47 - passing it through and we render the
23:48 - template so if i go back to home.html
23:51 - i'm going to show you a few more things
23:53 - we can do in the jenga templating engine
23:55 - one of the things we can do is write if
23:56 - statements and four
23:58 - four blocks or four statements or four
24:00 - loops whatever you want to call it
24:01 - so whenever you're doing some type of
24:03 - statement like an if statement
24:05 - a for loop i think you would do a while
24:07 - loop there may be a few other things you
24:08 - can do but those are the only ones we're
24:10 - really going to use
24:10 - you do the squiggly bracket percent
24:13 - percent and then squiggly bracket
24:14 - so i'm going to write an if state so i'm
24:16 - going to say if i'm going to assume that
24:18 - some variable in here is going to be
24:19 - name
24:20 - so if name is equal equal to tim so just
24:23 - like you would type it in python
24:25 - then underneath this you put whatever
24:27 - you want to appear so in this case i can
24:29 - just show
24:30 - maybe hi actually i think i can just do
24:33 - this
24:33 - hi tim exclamation point and then
24:37 - you need to end the if statement so
24:38 - you're going to go for some percent
24:41 - and if so not quite like python because
24:44 - the indentation doesn't matter here
24:45 - this is how you make a basic if
24:46 - statement you do if condition
24:48 - whatever you want to appear if this is
24:50 - true and then you end
24:52 - the if now if you wanted an else you
24:53 - could go percent percent oops
24:57 - okay and you can do else and then you
24:59 - can say
25:01 - not tim or something okay so now
25:04 - what we can do is we can pass through a
25:07 - name so we are passing through
25:08 - joe and let's just refresh this and see
25:10 - what we get so notice it's saying not
25:12 - tim
25:12 - but now if i change this to tim
25:16 - and i refresh we get high
25:19 - there you go so that's the basics that's
25:21 - how you do an if statement
25:23 - all right so now moving on to for loops
25:25 - to do a for loop is pretty similar
25:26 - you're going to do four
25:27 - and then you could do something in
25:29 - something right or something in range
25:31 - just like you would do in python some
25:33 - stuff is a little bit different here in
25:34 - jenga templating i'm going to refer you
25:36 - the documentation if you want to do
25:37 - anything super specific
25:39 - but you can do something like this 4x in
25:41 - and then you can make a list and maybe
25:42 - go one
25:43 - two three four and then you
25:46 - end the four so n4 now inside of here
25:50 - this will act just like a normal for
25:51 - loop so what i can do
25:52 - is this and this means i'm going to show
25:55 - the variable x which is defined here
25:57 - so let's do this let's go and refresh
26:00 - and notice i get one two
26:01 - three four so it's showing each one of
26:04 - the values
26:05 - here right pretty straightforward okay
26:07 - so that is how you do a four
26:09 - so that is cool but there is one cooler
26:11 - thing that i need to show you and this
26:13 - is called
26:13 - template inheritance so the cool thing
26:15 - with jenga is that you can actually have
26:17 - templates
26:18 - inherit from other templates so what
26:21 - this kind of means is you can create
26:22 - a base template something that maybe has
26:25 - the nav bar the footer
26:27 - some things that are going to be
26:28 - persistent and constant across your
26:30 - entire application
26:31 - and you can define some blocks inside of
26:33 - that template
26:34 - that you want to be overridden by maybe
26:37 - other
26:38 - pages you'll see what i mean in a minute
26:40 - what this allows you to do is create a
26:41 - base for your website
26:43 - and then have all of your other pages
26:45 - inherit from that base template
26:47 - and then add into it as they please so
26:49 - you can kind of imagine like all of this
26:51 - stuff
26:51 - is always here right and then maybe
26:53 - there's a div here
26:55 - and this div is kind of where the
26:57 - content of specific pages is going to go
26:59 - well with jenga you can do this you can
27:02 - make this work so i'm going to change
27:03 - this template here
27:04 - to be base and show you what i mean so
27:06 - i'm going to say base.html this is going
27:08 - to be our base template
27:09 - and what i'm going to do is i'm going to
27:11 - start setting up a few blocks that can
27:13 - be overridden
27:14 - by child templates so i'm going to go
27:16 - here i'm going to go percent percent
27:18 - i'm going to say block and then i'm
27:19 - going to put the name of the block so in
27:21 - this case this is title
27:22 - and then i'm going to go percent percent
27:25 - and block
27:26 - now what this means is that i can
27:28 - actually override this block
27:30 - and sorry this should be end block in
27:32 - another template and whatever i override
27:34 - it with will go
27:36 - inside of here so if in another template
27:38 - template i write block title
27:40 - n block and then i like put hello or
27:42 - something it will show up
27:44 - right inside of here so it'll be the
27:45 - title of my website that's kind of the
27:47 - point of this so i'm going to copy this
27:49 - now
27:50 - i'm going to do the same thing down here
27:52 - i'm going to call this
27:53 - block content okay so let's get rid of
27:55 - this home and it's just going to be a
27:57 - content block so now same thing whatever
27:59 - i put inside of the content block in a
28:01 - child template
28:02 - will go inside of here so this is my
28:04 - base template
28:05 - what i'm going to do now is create a new
28:07 - html file and this is going to be home
28:09 - dot html now the way i use this base
28:13 - template here is i
28:14 - extend it so i say percent percent
28:18 - extends and then this is going to be
28:21 - base
28:22 - dot html make sure you put that inside
28:24 - of a string
28:25 - so now what this means i have to put to
28:27 - the very top of my file here
28:28 - is that i'm going to use all of the
28:30 - stuff inside of here
28:32 - and i'm going to put stuff into this
28:34 - template by accessing the different
28:36 - blocks that it defines so i'm going to
28:37 - copy my block title
28:39 - i'm going to put that there i'm going to
28:41 - copy my block content
28:43 - and i'm going to put this here so now
28:46 - i'm just going to make the title
28:47 - home and for my content i'm going to
28:50 - write a little bit of html so i'll go h1
28:53 - h1 and then i'll go hello this is
28:56 - a test exclamation point okay now when
28:59 - you save it the auto formatting is kind
29:01 - of weird it doesn't handle the jenga
29:02 - stuff really well so you'll see it kind
29:04 - of looks all janky like this
29:05 - if you want to not automatically format
29:07 - your code on save you can do ctrl shift
29:09 - p
29:09 - that opens the command palette in vs
29:11 - code and then you can say file
29:13 - save without formatting so if you just
29:14 - go format it
29:16 - should show up here so save without
29:17 - formatting and you should just be able
29:19 - to press that and you'll be good
29:20 - okay so regardless this should now work
29:23 - so what i'm going to do
29:24 - is i'm going to refresh my page and
29:27 - notice it gives me hello
29:28 - this is a test now just to prove to you
29:31 - that this is actually
29:31 - using this base.html template i'll go
29:34 - above
29:35 - this div here so not inside of block
29:37 - content and i'll put an h1
29:39 - and i'll just say hi so now when i do
29:41 - this you should see that we have
29:43 - hi and then hello this is a test so high
29:46 - will always be here
29:47 - and then whatever i put inside of block
29:48 - content well that will fill this diff
29:51 - i assume that probably makes sense now
29:53 - that is how template inheritance works
29:54 - and that's a super super useful thing
29:56 - so what we're going to do is we're going
29:57 - to create a few more templates we'll
29:59 - just write all of them and kind of you
30:00 - know
30:01 - have these blocks as we need them just
30:03 - to save us a bit of time later on so i'm
30:04 - going to copy everything inside of here
30:06 - notice i just have the extends i have my
30:08 - block title and i have my block content
30:10 - and i've ended all of the blocks
30:11 - i'm going to make a few more files first
30:13 - file i'm going to make is login.html
30:16 - i'm going to make a new one this is
30:17 - going to be signup.html
30:20 - we'll make another one this is going to
30:22 - be called posts.html
30:24 - some of these i will not get to until
30:26 - later videos but i'm just going to make
30:28 - them for right now
30:29 - and then we will make a create post
30:32 - dot html and this can have an underscore
30:35 - all right
30:36 - let me make sure that's all of them
30:39 - there's one more that we need here and
30:42 - this is going to be called post
30:43 - underscore div dot html and we'll look
30:46 - at that one later okay so inside all of
30:47 - these i'm going to paste my kind of
30:49 - starter code because all of these
30:52 - templates
30:52 - are going to inherit from the base
30:53 - template so let's put that there
30:56 - let's put that there and let's put that
30:59 - there
31:00 - nice we now have all of our html files
31:02 - created that we'll need for the block
31:04 - okay so now that we've done that we need
31:07 - to start looking at authentication and
31:09 - start actually setting up some real web
31:11 - pages
31:12 - on our flask application right so i've
31:14 - showed you the basics of flask hopefully
31:16 - you're comfortable with it now
31:17 - we're going to start working on creating
31:18 - a few pages so sign
31:20 - up log in you know sign out all that
31:22 - kind of stuff
31:23 - so the first thing i'm going to do is
31:24 - i'm going to go inside of my base
31:26 - template
31:26 - and i'm going to actually bring in a css
31:29 - library
31:30 - called bootstrap now bootstrap is a very
31:32 - basic
31:33 - css library that allows you to use some
31:35 - built-in classes
31:36 - so in this tutorial we won't have to
31:38 - write any css because i hate css and i
31:40 - would much rather just use
31:41 - some pre-built css from a library like
31:44 - bootstrap
31:44 - so the way you do this is you go to the
31:46 - bootstrap website the link will be in
31:47 - the description
31:48 - and you are going to go and look for
31:51 - this js
31:52 - delivery thing okay so notice how it has
31:54 - the css only and then it has the
31:57 - javascript bundle with popper so what
31:59 - we're going to do is we're going to take
32:00 - both of these so i'm going to copy this
32:02 - here
32:02 - right from the home page of
32:04 - getbootstrap.com i'm going to paste this
32:06 - right above the title in my head so this
32:09 - is a link to a css style sheet i can
32:12 - delete that comment there
32:13 - so now i should be able to use css
32:15 - styles or sorry bootstrap styles
32:16 - so that's good let me zoom out here a
32:18 - little bit so we can see and
32:20 - we're going to now go and we're going to
32:21 - take the javascript so i'm going to copy
32:24 - this okay where is it copy
32:28 - and i'm going to paste this at the
32:30 - bottom of my body
32:32 - all right so you paste you place the
32:34 - script tag at the bottom of the body
32:36 - and you put the link tag somewhere in
32:38 - the head preferably above the title but
32:40 - it doesn't really matter where you put
32:41 - it
32:41 - nice so now we should be able to use
32:43 - some bootstrap classes
32:44 - and we are going to start creating a nav
32:46 - bar and just some basic
32:48 - you know styling for our website so we
32:50 - will continue in one second but i need
32:51 - to quickly thank the sponsor of this
32:53 - video and the series which is i'll algo
32:55 - expert algo expert is the best platform
32:57 - to use from preparing for your software
32:58 - engineering coding interviews they have
33:00 - 160 coding interview practice questions
33:03 - taught by the best instructors one of
33:05 - which is me
33:06 - get started with algo expert today by
33:07 - clicking the link in the description and
33:09 - use the code tech with tim for a
33:10 - discount on the platform
33:12 - all right so buckle up this is where we
33:13 - are going to be writing a lot of html
33:16 - uh there will be a lot of html in this
33:17 - tutorial again if you don't want to
33:19 - write all this just want to copy it you
33:20 - can go to the link in the description
33:22 - and just copy and paste all in but i
33:23 - will
33:24 - go through and explain to you what i'm
33:25 - actually doing okay so let's delete this
33:27 - h1 tag i'm going to leave this
33:29 - div here for the content we'll fill this
33:31 - in in a second we're going to start by
33:32 - just creating our nav bar
33:34 - so we're going to create i actually
33:36 - believe the tag is simply
33:37 - nav and this is going to be class is
33:40 - equal to
33:41 - and this is going to be navbar and then
33:44 - nav
33:45 - bar hyphen expanded hyphen lg standing
33:48 - for large
33:49 - and then navbar hyphen dark and then bg
33:53 - hyphen dark and then we're going to end
33:54 - this nav tag
33:56 - all right so these are a lot of classes
33:58 - now these are all bootstrap
33:59 - classes now the way i find these classes
34:02 - obviously i have this code out already
34:03 - i'm just copying it from another screen
34:05 - is i go to the bootstrap documentation
34:07 - so if you go to bootstrap and you press
34:08 - on this docs button right here
34:10 - you can see all of the different kind of
34:13 - pages of classes that they have so they
34:15 - have components
34:17 - forms content layout etc
34:20 - so here i've pressed on nav so where's
34:23 - nav
34:23 - nav is knabs and tabs oh sorry nav bar
34:25 - is what i want
34:26 - so go to nav bar and this notice it
34:29 - shows a bunch of different versions of a
34:30 - nav bar
34:31 - so if you scroll down here this is
34:32 - actually a very similar navbar to the
34:34 - one we're going to be creating except it
34:35 - won't have any search button here
34:37 - and notice it has navbar navbar dark bg
34:40 - dark
34:40 - and if you go back and look at our code
34:41 - that's exactly what we have except we
34:43 - have this expanded thing
34:45 - what this means is that when the screen
34:47 - gets so small the nav bar will kind of
34:48 - be
34:49 - shrunk into you know those three little
34:51 - lines when you press those three little
34:53 - lines it's like a button you see this on
34:54 - mobile a lot
34:55 - it like expands the nav bar down so i'll
34:58 - show you how that works in a minute but
34:59 - i just wanted to show you that's where
35:00 - i'm getting the classes from so if
35:02 - you're wondering like how does this guy
35:03 - know all of these classes
35:04 - i don't i literally just copy them from
35:06 - the bootstrap website i try to create
35:08 - something that looks
35:09 - kind of somewhat nice and that's at
35:11 - least like laid out properly on the
35:13 - screen
35:13 - okay so that's what we need for the nav
35:16 - bar now what we're going to do is create
35:18 - a bunch of stuff
35:19 - in the navbar so i'm just trying to
35:20 - figure out where to get started here by
35:22 - looking at my cheat sheet so i'm going
35:23 - to create a div
35:24 - this is going to be class equals to
35:27 - container hyphen
35:28 - fluid this just adds some padding around
35:30 - the container so that it's not
35:32 - like stuck to the side of the screen
35:34 - it's like padded off a little bit and
35:35 - then i'm going to make a button
35:37 - so i'm going to say button and this is
35:38 - going to be the button that allows us to
35:40 - expand the nav bar when it's shrunk down
35:42 - and the screen is a certain size so i'm
35:44 - going to say class
35:44 - equals and then it's going to be navbar
35:47 - oops
35:48 - hyphen toggle and this actually toggle
35:51 - lure
35:52 - and then we're going to say type is
35:54 - equal to button
35:56 - we're going to say data hyphen bs hyphen
35:59 - toggle and this is going to be equal to
36:02 - collapse
36:03 - and we're going to say data hyphen bs
36:05 - hyphen target
36:07 - and this is going to be equal to pound
36:10 - navbar which is the id of the content
36:12 - for our navbar which we'll define in a
36:14 - second
36:15 - so you go that's our button now inside
36:17 - of this button we need to put a little
36:19 - icon so i'm going to say span
36:21 - class is equal to and this is going to
36:24 - be navbar
36:25 - hyphen toggler hyphen and then
36:28 - icon like that and then we're going to
36:30 - end the span
36:31 - so that will show a little icon for our
36:34 - actual button that we can press on
36:35 - okay so now outside of this div here but
36:38 - actually is it outside of this div uh no
36:41 - it's inside of this div sorry we're
36:43 - going to make another div
36:44 - and this is going to be the div that is
36:46 - going to have the content for our navbar
36:48 - so we are going to say
36:49 - class is equal to collapse so this means
36:53 - it can collapse down right
36:55 - and then we're going to say navbar
36:57 - hyphen
36:58 - collapse and then we're going to end the
37:00 - div and then we're going to give this an
37:02 - id
37:02 - we're going to say id is equal to navbar
37:06 - make sure that this here and this match
37:08 - so when you press the button it actually
37:10 - toggles this to collapse or not collapse
37:12 - the nap nice now inside of here we're
37:14 - going to say div
37:16 - class is equal to and this is going to
37:18 - be navbar hyphen
37:19 - nav this is that the actual navigation
37:21 - area and then we are going to put a few
37:24 - links that will be
37:24 - on the navbar so we are going to say a
37:28 - class is equal to and this is going to
37:30 - be nav
37:32 - hyphen item and then nav
37:35 - hyphen link like that and then we're
37:38 - going to
37:39 - end the tag and we're going to say href
37:42 - is equal to and this is going to be
37:44 - slash home and we're going to put
37:46 - home all right so you guys are probably
37:48 - familiar with a tags the href is where
37:50 - you're going to go when you press on
37:51 - this link so that's what this is
37:53 - and by doing the nav item nav link it
37:55 - looks nice in the nav bar so we can copy
37:57 - this a few times
37:58 - okay and for now we'll just go with
38:01 - login
38:02 - or sign up okay and then we can change
38:05 - these appropriately so this is going to
38:06 - say log
38:07 - in and it's going to say sign hyphen up
38:11 - nice okay so now we have some sort of a
38:14 - nav bar so you can kind of get the idea
38:15 - of our navbar right here that's what we
38:17 - just coded out
38:18 - so what i'm going to do now is i'm going
38:20 - to go and refresh my page
38:22 - and notice that now we have a navbar
38:24 - right and we can expand the nav bar by
38:25 - pressing on this little button
38:27 - now by default i want the nav bar to be
38:29 - expanded so i'm just going to
38:31 - figure out how i messed this up quickly
38:33 - and show you how we can fix that all
38:34 - right so i found the error just a little
38:35 - bit of a typo here notice how it says
38:37 - nav bar expanded lg
38:39 - that should just say navbar expand lg so
38:42 - change that from expanded
38:43 - to expand again all the code will be
38:45 - available on github in case i'm losing
38:47 - you here
38:48 - all right so let's refresh now and uh
38:51 - come on refresh oh i need to make this
38:53 - larger now notice when i make
38:55 - it larger we see all the links in the
38:56 - nav bar when the screen is smaller then
38:59 - it collapses the navbar
39:00 - so you can kind of change the behavior
39:02 - of that i'm not going to go through how
39:03 - that works
39:04 - but if i press on log in it brings me to
39:06 - log in i press on sign up brings me to
39:08 - sign up
39:08 - home brings me to home perfect
39:12 - okay so now that we have the nav bar
39:15 - what i want to do is i just want to make
39:16 - these other
39:17 - like sign up login pages actually work
39:20 - properly because now when i go to sign
39:22 - up
39:22 - and log in it's not showing the correct
39:25 - page it's not showing the nav bar on
39:26 - those pages
39:27 - so i'm going to go to off dot pi and i'm
39:30 - now going to rather than return
39:32 - log in sign up log out i'm going to
39:33 - render the templates we've created so
39:34 - i'm going to say render underscore
39:36 - template
39:37 - and then the name of the template for
39:38 - login is simply login.html
39:41 - okay nice i'm gonna copy this we're
39:43 - gonna do the same thing now
39:44 - for sign up so sign up like that
39:48 - and then same thing for log out actually
39:51 - we don't need a template for logout
39:53 - sorry so here when we log out
39:55 - i'll show you a little trick we can
39:56 - actually redirect the user when we go to
39:58 - this endpoint
39:59 - to go to a different endpoint or to go
40:01 - to a different page so i'm going to
40:02 - import something
40:03 - this is going to be redirect i'm also
40:06 - going to import
40:06 - url4 and i'll discuss how these work in
40:09 - a second but i'm going to return a
40:10 - redirect to the url
40:14 - for and then i'm going to say views.home
40:18 - now the reason i'm saying views.home is
40:20 - because i want to go
40:21 - to this function right here the home
40:24 - function i'm referencing the home
40:25 - function
40:26 - not not the root or the endpoint here
40:28 - i'm referencing the actual function name
40:30 - now this blueprint is called views so
40:32 - for me to access this function here i
40:33 - need
40:34 - views dot home so i'm saying okay let's
40:37 - redirect the user to whatever the url is
40:40 - for views.home the reason i do this is
40:43 - because i might change the url in the
40:45 - future
40:45 - so i could theoretically just go like
40:48 - slash and that would work
40:49 - but then if i changed the url or i
40:52 - removed
40:53 - slash here this would no longer work so
40:55 - this is a more dynamic and better
40:56 - approach
40:57 - you go url4 and you write the function
40:59 - name because you're not going to be
41:00 - changing the function name
41:01 - but you might change the root okay so
41:03 - now that we have all that
41:04 - let's go here and refresh and let's see
41:06 - if the navbar now works so when i go to
41:08 - log in
41:08 - i go to log in sign up sign up and
41:10 - notice it's showing me
41:12 - the uh what do you call it the navbar
41:13 - the entire time okay so now let's just
41:16 - create say the login page
41:18 - so let's go to login.html
41:21 - let's first change the title here to say
41:23 - login
41:24 - and now let's start coding out some
41:25 - forms for the login page
41:27 - all right so we're going to go inside of
41:28 - our block content here let me just make
41:30 - this look a little bit nicer we're going
41:32 - to define a form
41:33 - so we're going to say form we'll say
41:35 - method is equal to this is actually
41:37 - going to be
41:38 - post and that's all we need for right
41:40 - now i'll discuss what that means in a
41:41 - second
41:42 - but essentially that means when we press
41:44 - the submit button this is going to send
41:46 - a post request
41:47 - to the endpoint that we're currently on
41:48 - so to the login page
41:50 - rather than a get request if you're
41:51 - unfamiliar with those don't worry
41:53 - as soon as we get to the next video
41:55 - we're actually going to be handling
41:56 - like data being sent to our backend i'll
41:59 - discuss what all the http methods are
42:01 - okay anyways inside of the form what
42:03 - we're going to do here is put an h3 tag
42:05 - i'm going to say a line is equal to
42:07 - center pretty intuitive but this means
42:09 - whatever i put inside of here is going
42:11 - to be in the center of the page
42:13 - and i'm going to say login okay then i'm
42:16 - going to start creating
42:17 - a form group so i'm going to say div
42:20 - class
42:21 - is equal to form hyphen group and this
42:23 - is where i'm going to put all of the
42:25 - fields that i need
42:26 - my user to fill in so since we're
42:27 - logging in all i actually need here is
42:30 - going to be
42:32 - let me think of this a email and a
42:34 - password yes that's all i need
42:36 - so what i'm going to do is i'm going to
42:37 - create my label so i'm going to say
42:39 - label
42:39 - for equals email and then this is going
42:43 - to say email
42:45 - address like that i don't need the colon
42:48 - i'll end the label and then i'm going to
42:49 - make my input
42:51 - so i'm going to say input got a spell
42:54 - input
42:55 - correctly oops the input tag is just
42:57 - ended like that sorry
42:59 - i'm going to say type is equal to text
43:02 - because we're going to be typing in text
43:04 - i'm going to say the id is equal to
43:06 - email
43:08 - okay and then i'm going to say the name
43:12 - is equal to email now it's very
43:13 - important that you put both an id and a
43:15 - name
43:15 - the reason we need a name is because
43:17 - when we are actually sending this data
43:19 - to our backend we're
43:20 - posting the login information this is
43:23 - how we're going to access that data from
43:25 - the name field so make sure you have a
43:26 - name and an id
43:27 - okay so type id name do we need anything
43:31 - else
43:32 - i think we need a class we're going to
43:34 - say class is equal to form
43:36 - hyphen control and placeholder
43:40 - that's what we need placeholder is going
43:41 - to be equal to email
43:43 - or enter email
43:47 - okay there we go so now we have our
43:50 - input
43:50 - now what i'm going to do is i'm going to
43:52 - copy this and we're going to do the
43:54 - exact same thing except now it's going
43:55 - to be for
43:55 - password so i'm just going to change
43:58 - wherever it says email to say password
44:00 - and i'll change the type from text to
44:02 - password
44:03 - when you change the type to password
44:06 - that means you can't see what they're
44:07 - typing it okay so let's change this
44:09 - to password
44:13 - uh password and then for the placeholder
44:16 - i guess i can just say enter
44:18 - password nice okay so now
44:21 - no i don't want password address i just
44:23 - want password okay so now we should have
44:25 - a form
44:26 - for logging in so if i go to my login
44:28 - page now
44:29 - so let's refresh and let's go to log in
44:32 - notice we get our email address and we
44:33 - get our password but
44:35 - this does not look very good right it's
44:37 - kind of expanded all the way to the edge
44:39 - of the screen
44:40 - we need to fix that the way we're going
44:41 - to fix that is by actually going
44:44 - to our home or sorry our base template
44:47 - and we're going to add a class to the
44:50 - div that holds all of our content
44:52 - this class is going to be equal to
44:54 - container hyphen
44:56 - fluid so if you do this you add the
44:58 - container fluid class to the div that
45:00 - holds your block content
45:02 - and now you refresh notice that we get
45:04 - this padding off of the edge of the
45:05 - screen
45:06 - but still this is not great can we make
45:08 - this go in a bit further
45:09 - yes we can i'll show you how we can do
45:10 - that so i actually just made a mistake
45:12 - i was wondering why it was so far to the
45:14 - left we need to just have this be
45:15 - container not container fluid
45:17 - if i do this now and i refresh that
45:19 - looks a lot better right it's taking up
45:21 - less room on the screen
45:22 - still not the best login form in the
45:24 - world but that's good enough for me to
45:25 - be honest okay
45:26 - now we need a button that we need a
45:28 - submit button so let's go to login
45:31 - and let's add a button so i'm just going
45:33 - to put
45:34 - a break here so i'm going to say br like
45:37 - that
45:38 - and then i am going to make a button so
45:41 - i'm going to say
45:42 - a button like that
45:46 - class is equal to btn and then vtn
45:48 - primary
45:49 - now when you do this you if you add the
45:51 - btn class this just
45:53 - formats the button it makes it look nice
45:54 - and then you can change the color with
45:56 - btn hyphen and the name of different
45:58 - colors
45:59 - some colors are secondary primary dark
46:02 - danger success you can probably guess
46:05 - what colors they are
46:06 - i think there's a warning as well
46:08 - warning would be yellow danger would be
46:10 - red
46:10 - primary is like a nice blue color so
46:12 - that's what we're going to use
46:13 - and then here i'll just put actually
46:15 - rather than submit
46:17 - we can say login and we will do
46:21 - type is equal to submit so this means
46:24 - that when we actually
46:25 - press this button it will submit the
46:27 - form and
46:28 - post this data to the endpoint that
46:30 - we're on slash login let me see if
46:32 - there's anything else that i need here
46:34 - i think that that is good yes that looks
46:36 - good to me okay so let's refresh now
46:38 - and notice we now have a login button
46:40 - however this login button is not in the
46:41 - center of the screen
46:42 - i would like it to be in the center of
46:43 - the screen so i'm going to put a div
46:45 - here
46:46 - i'm going to say align equals and then
46:49 - center and then i'm going to take my
46:50 - button i'm going to put it inside of the
46:52 - div
46:53 - and now this should be in the center of
46:55 - the screen so let's refresh there we go
46:57 - we're now in the center so align equal
46:58 - center
46:59 - easy trick and bootstrap to make stuff
47:00 - go in the middle of the screen
47:02 - nice so that is our login page let me
47:05 - zoom out so you guys can see all this
47:06 - now what we're going to do is copy this
47:08 - login page actually and we're going to
47:10 - put it
47:11 - for our sign up page the reason we're
47:13 - going to do this is because we just need
47:15 - to add a few more
47:16 - labels right we need like a username we
47:18 - need a password confirmation they need
47:20 - to type it twice that's actually all we
47:22 - need so we'll just copy
47:23 - what we have here our label and input
47:26 - and we'll just make one for username and
47:28 - another one for password
47:30 - so here i'm going to copy this and
47:33 - rather an email address i will say
47:36 - username obviously i need to change a
47:38 - few things here so username
47:41 - username username and then enter
47:45 - username
47:48 - okay we can go a capital u here
47:51 - and then let's copy password so i will
47:54 - actually make this
47:55 - password one and then the other one we
47:58 - have will be password two
48:00 - so this will be enter password again
48:02 - oops
48:03 - we'll say password again and then this
48:06 - will be password two
48:08 - two and two and that needs to be
48:11 - password
48:12 - one okay so i think that's good and then
48:15 - here i'll change this button to say
48:16 - sign up and then we have this h3 tag
48:19 - that says login
48:20 - this will be sign up and the title of
48:22 - our website our web page here will be
48:24 - sign up nice okay so that should
48:27 - actually be
48:28 - it for the sign up page so let's refresh
48:31 - and let's now go to sign up
48:33 - and there we go we now have our sign up
48:35 - page
48:36 - perfect so i think with that i'm going
48:38 - to leave this video here
48:40 - i know this is a long video i did a lot
48:42 - but i told you there is a lot to do
48:44 - for this website there's a lot of stuff
48:46 - that we have to get through in the next
48:47 - video we will handle
48:49 - all of our authentication so we have our
48:50 - form set up now we need to actually have
48:53 - it so when we press the submit button
48:55 - it sends this data to our backend we can
48:57 - look at that backend we can
48:58 - create a user save that in a database
49:01 - validate that it's logged in or logged
49:03 - out we gotta do all that stuff so we'll
49:04 - do
49:05 - the next video if you guys enjoyed make
49:06 - sure to leave a like subscribe to the
49:07 - channel i will see you
49:08 - in another one