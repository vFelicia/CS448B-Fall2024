00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - video in this linux or programmers
00:12 - tutorial series
00:13 - in this video we're going to be going
00:14 - over environment variables
00:16 - now environment variables are such an
00:18 - important thing that you need to know
00:20 - especially as a programmer and well i
00:23 - wanted to make an
00:23 - entire video dedicated to them it's not
00:25 - going to be that long but i really
00:27 - wanted to go through how they work
00:28 - and just show you guys these things
00:30 - because trust me you need to know these
00:31 - as a programmer and
00:32 - even on other operating systems as well
00:34 - in windows on mac
00:36 - you should understand environment
00:37 - variables and know how to use them
00:39 - so anyways let's dive in after a quick
00:41 - word from our sponsor which is lenode
00:43 - now as i've said many times now node is
00:45 - one of the best companies to use to host
00:47 - your website app or
00:48 - service in the cloud they have a great
00:51 - support team a bunch of awesome services
00:53 - and their one-click apps are just great
00:55 - when you want to spin something up
00:56 - quickly
00:57 - for example i've spun up a ton of
00:58 - minecraft servers by just going to
01:00 - lenode going on the one-click apps and
01:02 - then pressing
01:02 - on minecraft and there you go i have a
01:04 - minecraft server in the next what two to
01:06 - three minutes so anyways get a hundred
01:08 - dollar free credit for lenode by
01:09 - clicking the link in the description
01:11 - and remember to sign up to get access to
01:13 - the last five videos in this tutorial
01:14 - series
01:15 - you know where the link is it's in the
01:16 - description sign up here register with
01:18 - your name and email and you'll be
01:19 - notified when they are live
01:21 - anyways let's dive in here i want to
01:23 - start by explaining what an environment
01:25 - variable is then i'll show you how to
01:27 - print out environment variables
01:28 - how to access them in a different way
01:30 - and then how to change or set your own
01:32 - so an environment variable is quite
01:34 - simply a variable that is specific to an
01:37 - environment now i know that seems like a
01:38 - very generic explanation
01:40 - but i will kind of explain it to you
01:42 - with an example so a lot of times
01:44 - especially when you're a programmer
01:46 - you're working on some kind of project
01:47 - you're working on some kind of code base
01:50 - or whatever it may be
01:51 - and you have values that you need to
01:53 - know and that your program has to access
01:55 - but that you don't want to share with
01:57 - other people so let's say i have some
01:58 - like secret token or some password or
02:01 - login or something for a database
02:02 - and everyone who's like working on this
02:04 - type of project would have to have their
02:06 - own related to this like it's not a
02:07 - global thing that's shared between
02:08 - everyone else
02:09 - what you would do in that situation is
02:11 - you would say okay i'm going to
02:12 - set an environment variable that stores
02:15 - this secret token or this password or
02:16 - this piece of information i don't want
02:18 - to share with other people and then my
02:19 - program can access that environment
02:21 - variable
02:22 - now what that means is that when you go
02:24 - and you take this repository and you put
02:25 - it up on github and make it public for
02:27 - example
02:28 - if someone wants to use this repository
02:30 - they're not going to have
02:32 - access to your secret token they're not
02:33 - going to have access to your password or
02:35 - whatever it is that you're storing in
02:36 - this environment variable
02:37 - instead what you will tell them is that
02:39 - if you would like to use this program
02:40 - and you want it to work properly for you
02:42 - the first thing you need to do is set an
02:44 - environment variable you need to set in
02:46 - your environment
02:47 - whatever the variable name is that you
02:49 - decide equal to and then storing
02:51 - whatever information and then that way
02:53 - when this user downloads the code base
02:54 - so they pull that repository
02:56 - now they set their own environment
02:58 - variable the program will look at that
02:59 - environment variable which is different
03:01 - from yours
03:02 - and then it will use that to do whatever
03:03 - it needs to do so that's a very generic
03:05 - example but hopefully that gives you an
03:06 - idea of when you would use this
03:08 - most commonly you're storing like secret
03:10 - tokens or passwords or things that you
03:12 - don't want to share with other people
03:13 - but that
03:13 - are going to be continually used by your
03:15 - program in an environment variable
03:17 - now to print out the environment
03:19 - variables on your machine you can type
03:20 - env
03:21 - what this will do is print out all of
03:23 - them and you can see that if we have a
03:25 - look here we have pwd
03:26 - we have home we have all these other
03:28 - ones as well now notice though
03:30 - that the home environment variable this
03:32 - stands for our home folder
03:33 - is equal to slash root well why is it
03:35 - equal to slash root
03:36 - because our current environment we are
03:39 - logged in as the root
03:40 - user if we were signed in as a different
03:42 - user this would be different because
03:43 - we're in a different
03:44 - environment so that's the idea behind
03:47 - environment variables to store things
03:49 - specific to the environment that you're
03:51 - working
03:51 - in and then obviously when people are in
03:54 - different environments they can set
03:55 - their own environment variables that are
03:56 - specific to what they're doing
03:58 - so now i will show you how to print out
04:00 - specific values of environment variables
04:02 - notice i've created my own here called
04:04 - tim just for testing purposes
04:06 - and to print out the value of an
04:07 - environment variable you type print env
04:10 - then the name of the variable so here i
04:12 - printed the environment variable tim
04:15 - shows me that it is equal to yes now
04:17 - this is one way to access the value of
04:19 - an environment variable
04:20 - another way is to use this dollar sign
04:23 - so if you use the dollar sign and then
04:24 - you type the environment variable name
04:26 - say like user
04:27 - don't press run on this but
04:30 - that is how you would access this
04:32 - environment variable from a shell script
04:34 - or just from a program here in bash now
04:37 - i'll show you
04:38 - how we can use this dollar sign to
04:39 - access this so there's a command called
04:41 - echo and what echo does is it simply
04:44 - echoes to the console you can think of
04:46 - it literally as echo
04:47 - whatever's on the right hand side here
04:48 - so when i do this dollar sign this is
04:50 - telling bash that i want to
04:52 - access the user environment variable get
04:55 - whatever that value
04:56 - is and substitute that for this line
04:57 - which means echo will print out the
04:59 - value of user so if i do this
05:00 - we see that root prints out and that's
05:02 - how you access an environment variable
05:04 - with the dollar sign now
05:06 - this also means that when you define an
05:08 - environment variable you cannot preface
05:10 - it with a dollar sign so don't do that
05:12 - that's just bad
05:13 - don't have dollar signs in your
05:14 - environment variables i wouldn't imagine
05:16 - you guys would do that but just want to
05:18 - make that clear you're not supposed to
05:19 - do that
05:20 - so now let's talk about how we can
05:21 - actually set an environment variable and
05:24 - use environment variables so the first
05:26 - thing that i can do
05:27 - to create an environment variable is i
05:29 - can use this export command
05:31 - i can say export my variable name i'll
05:33 - just say var equals
05:35 - and then test and when i do this this
05:37 - will export a newly assigned environment
05:39 - variable to
05:40 - this environment so i'm going to say
05:41 - export var equals test
05:43 - now i can say print env
05:46 - var and notice it's equal to test now
05:48 - what i've just done
05:49 - is i've defined a temporary environment
05:51 - variable that is only stored for the
05:54 - current session so if i close this
05:56 - window right now
05:57 - and i log back in to this server this
06:00 - environment variable is going to be gone
06:01 - it's no longer going to be here and in
06:02 - fact let's just prove that
06:03 - so let's close the window let's
06:07 - go to putty let's sign back in
06:10 - we'll go as root we'll pass our pass
06:12 - phrase
06:13 - and now if i say clear and
06:17 - then i do something like print env
06:20 - what do we call this var notice that
06:22 - this variable has no value it's gone
06:24 - because that variable was only
06:25 - associated with our current session
06:27 - and now if i go env even my tim variable
06:30 - that one's gone as well
06:31 - so how do we set an environment variable
06:33 - that is constant
06:34 - is going to persist throughout our
06:36 - program well first of all if you want to
06:38 - change the value of an environment
06:39 - variable probably should have mentioned
06:40 - this you can say export
06:41 - and then whatever the environment
06:42 - variable name was so like you could
06:44 - change for example the home environment
06:46 - variable
06:47 - i wouldn't do that but you can so if i
06:50 - said like test equals
06:51 - one and then i say print env test and
06:54 - then i say
06:55 - export test equals two and
06:58 - then we have a look here print env test
07:00 - we're able to change that right
07:02 - so that is a way that you can change the
07:04 - environment variable you're kind of just
07:05 - overriding it but if you want to set one
07:07 - permanently you need to do something
07:09 - different now we will continue in one
07:11 - second
07:11 - after a quick word from our other
07:12 - sponsor which is algo expert
07:14 - algo expert is the best platform to use
07:16 - to prepare for your software engineering
07:18 - coding interviews
07:19 - as well as your system design interviews
07:21 - alongside over 115 coding interview
07:24 - questions
07:24 - algo expert also has another product
07:26 - called systems expert which is designed
07:28 - to teach you about large-scale systems
07:30 - how to design them and how to pass
07:32 - interviews related to them get started
07:34 - with algo expert and system expert today
07:36 - by hitting the link in the description
07:37 - and using the code tech with tim for a
07:39 - discount on the platform
07:41 - you actually need to modify a file that
07:43 - stores the persistent
07:44 - environment variables and this makes
07:46 - sense because you are just storing this
07:48 - environment variable
07:49 - it's attached to the current session so
07:51 - if you want it to be persistent you need
07:52 - to put it in a file it needs to actually
07:54 - you know be somewhere live on the system
07:56 - so i'm just going to clear the screen
07:57 - here now this file is located in our
08:00 - user's home directory so to access it
08:02 - what we can do is we can use nano this
08:04 - is a text editor we've seen a few times
08:06 - now
08:07 - we can say nano and then dot bash rc
08:10 - when we're in our home directory so when
08:11 - i do this notice it opens up this file
08:13 - that by default is hidden you have to
08:15 - actually
08:16 - access it to see it and inside here we
08:18 - can set environment variables so let me
08:20 - go through here
08:21 - i'll kind of scroll down you can see
08:22 - there's this is what's known as a bash
08:24 - script
08:24 - i'm not really going to talk about this
08:26 - but to define your own environment
08:27 - variable what you can do
08:29 - is you can go to any point in this file
08:31 - it doesn't really matter i mean like
08:32 - traditionally you would do this at the
08:33 - top of the file but
08:34 - you can do it anywhere you want and you
08:36 - would type the following line you would
08:37 - type export
08:38 - and then the variable name let's just
08:40 - say you know does
08:42 - this work and then is equal to thing
08:45 - like
08:45 - does this work if you want to have
08:48 - something that's uh
08:49 - more than one line or more than one word
08:52 - sorry not more than one line i just have
08:54 - to put inside a quotation mark so i'll
08:55 - put inside of quotation marks it'll say
08:56 - export
08:57 - does this work and then i'll just save
08:59 - this file so control s
09:00 - and then control x out of it and what i
09:03 - need to do now
09:04 - is i need to update my bash rc file or
09:06 - what's called
09:07 - source it so in order for these changes
09:09 - to take place
09:10 - what i can do is i can type the
09:11 - following command so i can type not s
09:13 - source but source and then dot bash
09:17 - rc and this will update the bashrc file
09:19 - or the environment variables for us
09:21 - and now if i print env
09:25 - i totally forgot what i called it let's
09:27 - just go back to env here my short-term
09:29 - memory loss
09:30 - let's see what we called it here looks
09:33 - like
09:34 - this one was called does this work okay
09:37 - yeah that was there you go
09:38 - so you can see that does this work is
09:39 - defined as an environment variable
09:41 - now what we just did by editing the dot
09:44 - bash rc file
09:45 - uh this is going to set the environment
09:47 - variables for this
09:48 - user so now every time we sign in as
09:51 - this user
09:52 - these environment variables will
09:53 - automatically be set so it's just going
09:55 - to run what's in that dot bash rc file
09:57 - it's going to see that export line and
09:58 - it's going to
09:59 - run that command and let's have a look
10:00 - at this again nano bash rc if we wanted
10:03 - another environment variable we'd simply
10:04 - do it on the next line below
10:06 - so it just runs this file it's going to
10:07 - see the export command it's going to
10:09 - declare this variable
10:10 - and that means it's just always going to
10:12 - be set for us but only for this user if
10:14 - i sign in as another user
10:15 - we're not going to see this now i don't
10:17 - need to save these changes i didn't
10:18 - really do anything
10:19 - but i'm going to show you now how you
10:21 - can set an environment variable
10:22 - globally so for any user that signs in
10:26 - now why would you do this i can't really
10:27 - come up with a great example off the top
10:29 - of my head but
10:30 - if you need to do it i'm going to show
10:31 - you how so to do this
10:33 - you do need to have access to the slash
10:35 - etc folder but if i go cd.ls
10:39 - notice there's this etc folder here
10:41 - we're going to cd into etc
10:43 - and then what we're going to do is we're
10:45 - going to say
10:46 - nano and then environment like that now
10:49 - there's no extension for the environment
10:52 - file all we do is say nano environment
10:54 - it's going to open something up like
10:55 - this and notice that the globally set
10:58 - environment variable here is path so we
11:00 - have a path variable you're probably
11:01 - familiar with this on something like
11:02 - windows or mac
11:03 - but we can define our own environment
11:05 - variables as well and we do the same
11:07 - thing that we would do
11:08 - when we're defining this inside of our
11:10 - bashrc we would simply say
11:12 - export and then we can just say
11:13 - something like global
11:15 - is equal to testing exclamation point
11:18 - then i can save this file i can write it
11:20 - out and what i need to do now is i need
11:22 - to source this file so i would say
11:24 - source and then in this case we just say
11:26 - environment
11:27 - that's going to update the environment
11:29 - file and now if i
11:30 - echo out this variable so echo dollar
11:33 - sign
11:34 - let's find the dollar sign and then
11:36 - global
11:37 - we can see that we get testing printing
11:39 - out so that's how you set
11:40 - a temporary environment variable just by
11:42 - using export right here as soon as you
11:44 - close the session it's going to be gone
11:45 - that's also how you set an environment
11:47 - variable for the user notice we updated
11:50 - the bashrc
11:51 - file from the home directory we were
11:53 - signed in as say tim we would do this
11:54 - again in the home directory
11:56 - and then to set something globally you
11:58 - go into slash etc
12:00 - and the environment file and you can set
12:02 - the environment variable there
12:04 - now the last thing i will show you how
12:05 - to do is to unset
12:07 - or remove an environment variable so if
12:09 - you want to remove an environment
12:11 - variable
12:11 - that you've exported in the in the
12:14 - session so when i say session again that
12:16 - means like if you sign out it's going to
12:17 - be gone
12:18 - what you can do is use the unset command
12:19 - so there's a command called unset
12:21 - i let's just make another environment
12:23 - variable let's just say export
12:24 - uh you know we can just say
12:28 - to be removed like that make this equal
12:31 - to
12:32 - you know buy sure let's add our
12:34 - quotation here
12:35 - and now if i said you know print env
12:38 - to be removed we see it has a value
12:41 - if i want to delete this environment
12:43 - variable i would say unset
12:45 - to be removed and this is going to
12:47 - remove the variable so now if i print
12:49 - env to be removed
12:51 - it is gone we have unset it now this
12:53 - unset command
12:54 - is only going to work for the session so
12:56 - this is not going to remove something
12:57 - from your bash rc
12:58 - file or from your environment file if
13:01 - you wanted to no longer have those
13:02 - environment variables you would have to
13:03 - go and re-edit those files and remove
13:05 - the lines that we added
13:07 - that's pretty much all i want to show
13:08 - you with environment variables this is
13:09 - not something hard it's not meant to be
13:11 - tricky
13:11 - this is just something that you need to
13:13 - know about and it's very useful
13:14 - especially as a programmer so anyways i
13:16 - hope you guys found this useful if you
13:17 - did make sure to leave a like
13:19 - subscribe to the channel and i will see
13:20 - you in another youtube video