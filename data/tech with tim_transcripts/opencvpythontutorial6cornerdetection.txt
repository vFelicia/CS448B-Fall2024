00:02 - [Music]
00:08 - hello everybody and welcome to the sixth
00:10 - video in this opencv
00:12 - python tutorial series in this video
00:14 - what we'll be doing is learning how we
00:16 - can detect corners in
00:17 - an image now the point of this video is
00:19 - not just to show you the corner
00:21 - detection although that is interesting
00:22 - it's to give you kind of an introduction
00:24 - to some of the interesting algorithms
00:26 - that opencv has built in
00:27 - and how easy they are to actually use
00:29 - for example in this video we're
00:31 - literally going to need to write about
00:32 - three or four lines related to corner
00:34 - detection
00:35 - and that's all we need to do to find all
00:36 - of the corners in an image
00:38 - so there's a ton of really interesting
00:39 - stuff you can do with opencv
00:41 - obviously i cannot and will not cover
00:43 - all of it in this tutorial series
00:45 - so if you want to check for yourself
00:46 - some of the things i'm kind of skipping
00:48 - over or not talking about as in depth
00:50 - then go to the opencv documentation i
00:52 - will link it
00:53 - down below i will mention that the
00:55 - version of the documentation i'm showing
00:56 - here is not the official
00:58 - documentation this is kind of i guess
01:00 - like a reworked version of the
01:01 - documentation that in my opinion is a
01:03 - lot easier to understand
01:04 - and has some better images and visuals
01:07 - and just it just makes it easier to
01:08 - access the information at least in my
01:10 - opinion so anyways this will be at the
01:11 - link in the description
01:13 - for example the corner detection
01:14 - algorithm we're going to use here is
01:15 - called the
01:16 - shi tomasi um i believe that's how you
01:18 - pronounce that i'm probably wrong
01:20 - corner detector and good features to
01:22 - track
01:23 - so if you want to hear the theory and
01:25 - math behind this i'm not going to
01:27 - explain in this video i'm not qualified
01:28 - to do so and i also just think it's kind
01:30 - of unnecessary and boring
01:32 - but you're welcome to read through that
01:33 - yourself again link in the description
01:35 - all right so with that said let's dive
01:37 - in the first thing i need to do here is
01:39 - import my module so i'm going to say
01:40 - import
01:41 - numpy as and then mp
01:44 - and i'm going to import cb2 now that we
01:47 - do that we need to load in an image
01:49 - or we can use a video capture device if
01:51 - we want now for this tutorial i'm just
01:53 - going to use an image
01:54 - so i have this image here it's of a
01:56 - chess board we're going to load this in
01:58 - and then we'll do the corner detection
01:59 - on this
02:00 - now you of course can load in any image
02:02 - that you want doesn't need to be a chess
02:04 - board but if you do want this image it
02:06 - will be in the github repository again
02:07 - that will be linked in the description
02:09 - so let's load this in i'm going to say
02:10 - img is equal to
02:12 - then cb2 dot and then uh what is this
02:16 - i am read sorry yep and then here we are
02:18 - going to do
02:20 - assets slash and then chess
02:24 - board dot png so i have that inside of
02:27 - my assets folder
02:29 - if you get this from github you as well
02:30 - will have it in the assets folder all
02:32 - right
02:32 - now that i have this let's actually just
02:34 - quickly display this
02:36 - so i'm going to say cv2 dot and then
02:39 - i am show i'm going to i am show i guess
02:42 - frame and then we will show img
02:44 - call this whatever you want doesn't
02:45 - matter we'll say cv2 dot
02:47 - wait key we'll wait infinitely for us to
02:49 - press anything
02:50 - and then cb2 don't destroy all windows
02:53 - all right so let's load this up
02:55 - we can see that our chessboard appears
02:57 - but now notice that our chessboard is
02:59 - quite large
02:59 - i don't want my chessboard to be this
03:01 - large so let's resize it and make it a
03:02 - bit smaller so i'm going to say img
03:05 - is equal to and then cb2 dot resize
03:08 - we're going to resize the image
03:09 - we're going to pass 0 0 here
03:12 - and then we're going to pass our fx
03:14 - equals and let's go
03:16 - 0.75 and fy equals and 0.75 as well
03:21 - all right so let me try this now we
03:23 - should see our chessboard is a bit
03:24 - smaller that's awesome okay so it just
03:26 - about fits on the screen
03:28 - great so now that our chessboard is
03:30 - resized what i actually need to do is
03:32 - convert this to a grayscale
03:34 - image so a lot of the times when you're
03:36 - dealing with these types of algorithms
03:38 - where you're detecting edges or features
03:40 - or corners
03:41 - you're going to be converting your image
03:42 - to grayscale before you pass it to these
03:44 - algorithms
03:45 - that's just because these algorithms
03:47 - work on grayscale images and it's easier
03:49 - for them to detect these features in a
03:51 - grayscale image
03:52 - than a bgr or rgb colored image
03:55 - so what i'm going to do here is say
03:57 - image is equal to and then cv2 and we've
03:59 - already seen this before
04:00 - this is going to be dot cbt color we're
04:03 - going to pass our image
04:04 - and then we're going to pass the color
04:06 - that we want to convert this to
04:08 - so cb2 dot color underscore and then
04:11 - we're going to say bgr
04:12 - 2 and then gray like that so now that
04:16 - should convert our image to grayscale
04:17 - let's run this in c and there we go we
04:20 - do indeed get this
04:21 - grayscaled image now notice it doesn't
04:23 - look any different because well it was
04:25 - already grayscale before it was just
04:26 - black and white but this is grayscale
04:28 - and it is working
04:30 - all right so now we have that what we
04:32 - can actually do
04:33 - is we can now run our corner detection
04:35 - algorithm so once we've converted this
04:37 - to grayscale
04:37 - what we can say is that our corners is
04:40 - equal to and then cv2
04:42 - and the name of this method here is good
04:44 - features to track
04:45 - i i don't know why they named it this a
04:47 - lot of the naming and kind of
04:48 - conventions i have here i don't find too
04:50 - intuitive
04:51 - but this is going to run that algorithm
04:53 - i discussed which is
04:55 - the she what is this shitomashi corner
04:58 - detector
04:58 - and good features to track so all this
05:01 - is saying is that it's just going to
05:02 - return to you all of the corners from an
05:04 - image
05:04 - i don't know why they have to make it
05:06 - confusing with good features to track
05:08 - anyways again link in the description
05:09 - for that so now that we have all of the
05:11 - corners or sorry now that we've written
05:13 - this function
05:14 - we need to pass some arguments to it so
05:16 - the arguments for this function are the
05:17 - following
05:18 - you need to pass your source image the
05:20 - image you want to detect the corners
05:21 - from
05:22 - then you need to pass the number of
05:24 - corners that you want to return
05:25 - or more specifically the number of best
05:28 - corners that you want to return
05:30 - so you pass some integer here let's call
05:32 - this integer
05:33 - n and this will return to you the 100
05:35 - best or the
05:36 - n best what do you call it corners from
05:39 - the image
05:39 - so if your image has like 500 corners
05:42 - that this algorithm detects
05:43 - it will return to you the n best of
05:45 - those corners
05:46 - so let's just go with a hundred here you
05:48 - can make this whatever you want i'm just
05:50 - gonna pick a hundred
05:51 - next we have to pick the minimum quality
05:54 - for our corners
05:55 - so the quality of a corner is between
05:57 - zero and one
05:58 - so one would be a perfect corner zero
06:00 - would be a corner where there's like no
06:02 - confidence that that is a corner
06:04 - and it's hard for me to really explain
06:06 - what the quality really means
06:08 - because that's kind of due to the
06:10 - implementation of the algorithm
06:11 - so again read the documentation if you
06:13 - want to see exactly how that works
06:15 - but pretty much if you make this number
06:16 - really small you're going to get corners
06:18 - that are probably corners but that the
06:20 - program's not 100
06:22 - sure they are whereas if you make this
06:23 - number larger say like 0.5
06:26 - then you're going to get only corners
06:27 - that the program's pretty certain are
06:29 - corners
06:30 - so it's kind of a degree of confidence
06:32 - when it's looking and finding these
06:34 - corners and well that's what you're
06:35 - picking right here
06:36 - what's the minimum quality you want i
06:38 - can say from experience putting it at
06:39 - 0.01 is probably fine
06:42 - but if you notice that you're getting a
06:43 - bunch of things that aren't corners then
06:44 - slowly increase this value
06:46 - upwards then after we have that the last
06:49 - thing that we need to return
06:50 - is actually the minimum euclidean
06:52 - distance between
06:54 - corners that are returned so a lot of
06:56 - times what will happen is if you have a
06:58 - corner that's like slightly rounded
07:00 - it will return to you like 500 points
07:02 - that are all
07:03 - right on that corner um so it will
07:05 - detect you know a bunch of different
07:07 - corners that is really just
07:08 - one corner so what you put here is some
07:11 - value which is telling you the minimum
07:13 - distance between
07:14 - two corners so if you had two corners
07:16 - that were really close
07:18 - then what you would do is make a value
07:19 - here like 10 and this means hey i'm not
07:21 - going to return both of those corners
07:23 - i'm only going to return
07:24 - one and specifically the best of that
07:26 - one because these corners are too close
07:28 - together and well i don't want to return
07:30 - ones that are too close
07:31 - so euclidean distance is simply the
07:33 - absolute distance between
07:35 - two points on a graph or in this case in
07:37 - an image
07:38 - so if you were at say 1010 and 2020
07:41 - then you would have some euclidean
07:43 - distance between those two points so the
07:45 - way you calculate euclidean distance is
07:47 - actually using pythagoras theorem now i
07:49 - know i've butchered the way you say that
07:50 - i can never say that correctly
07:52 - but the basic equation for euclidean
07:54 - distance if you're working
07:55 - in two dimensional space so xy
07:57 - dimensions here
07:58 - then you would have some points say like
08:00 - x1 and y1 and then you would have
08:03 - another point say like x2 and y2
08:05 - and the way you calculate this is you
08:07 - take the square root so sqrt
08:09 - of and then that's going to be x 2
08:13 - minus x 1 to the exponent so let's go
08:16 - hat
08:17 - 2. i know this isn't proper syntax but
08:18 - you get the idea and then i'm pretty
08:20 - sure that is
08:21 - plus that's now going to be
08:24 - y2 minus y1 to the exponent
08:28 - 2. so that is euclidean distance and the
08:30 - reason this works
08:32 - is because you're literally just
08:33 - performing pythagoras theorem you're
08:35 - looking at a right angle triangle
08:36 - you're figuring out the distance of i
08:38 - guess it's the
08:40 - uh oh i've been out of math for a long
08:42 - time now the distance between the
08:44 - adjacent
08:44 - and the opposite uh sides i guess
08:48 - and then you're calculating the length
08:49 - of the hypotenuse which is going to be
08:51 - the distance between those two points
08:53 - so i think i've probably butchered that
08:54 - explanation a little bit i don't claim
08:56 - to be a you know
08:57 - god at math or anything but this is the
08:59 - formula for euclidean distance it's
09:00 - pretty much just the straight line
09:02 - distance between two points
09:03 - so anyways that's what this is telling
09:04 - you is that the euclidean distance
09:06 - between two corners must be greater than
09:08 - this for you to include that corner
09:10 - alright so now that we have that what we
09:12 - want to do is
09:13 - display these corners on the screen so
09:15 - we will continue in one second but i
09:17 - need to quickly thank the sponsor of
09:18 - this video and the series which is algo
09:21 - expert algol expert is the best platform
09:23 - to use for preparing for your software
09:24 - engineering coding interviews they have
09:26 - over 125 coding interview questions
09:29 - they have behavioral interview tips a
09:31 - data structures crash course
09:33 - mock interviews and a ton of other
09:34 - helpful features get started with algo
09:36 - expert today by clicking the link in the
09:38 - description and using the code tech with
09:39 - tim for a discount on the platform
09:42 - so the first thing that we need to do
09:43 - here is we need to convert these corners
09:45 - into integers
09:46 - so by default when it returns to these
09:48 - corners in fact let me just show you
09:50 - let's let's print out corners here
09:51 - you're going to notice that the data
09:53 - type of these corners is actually float
09:55 - so let's have a look so let me just quit
09:57 - this and we'll look right here
09:59 - and what you can see here that all these
10:00 - values are floating point values
10:02 - now this is no good we don't want
10:04 - floating point values and the reason we
10:06 - don't want floating point values is
10:07 - because we want to use these values here
10:09 - to actually draw our corners now what
10:11 - we're going to do is kind of extract
10:13 - these values and we're just going to
10:14 - draw circles where all of these points
10:16 - are so we can see where all of our
10:18 - corners are notice how many it's giving
10:19 - me here
10:20 - so i need to convert these into integers
10:22 - to do that is actually pretty
10:23 - straightforward
10:24 - we're going to say that corners is equal
10:26 - to
10:27 - and then np dot and then i believe this
10:30 - is actually
10:31 - called int 0 so we're going to say int
10:34 - 0 just had to reference my notes there
10:36 - and then we're going to pass in
10:37 - corners now this will just take our
10:39 - numpy array that has those floating
10:41 - point corners and turn them into
10:42 - integers all right so now that i have
10:44 - that what i want to do is draw
10:46 - these corners so obviously i have
10:47 - multiple corners and notice that if you
10:49 - look at these corners here
10:50 - they're actually returned to us in a
10:52 - similar shape
10:54 - to our image so we have like all of
10:56 - these corners
10:57 - inside of two numpy arrays so that's
11:00 - going to be something that we have to
11:01 - deal with but just notice that we have
11:02 - our one array and then
11:04 - inside of two arrays here two lists we
11:06 - have our points so we are going to have
11:08 - to kind of decompose that and deal with
11:11 - that here
11:12 - but i will show you how we do that so
11:14 - anyways i'm going to loop through all my
11:15 - corners
11:16 - so i'm going to say four corner in
11:19 - corners like that
11:20 - and then what i want to do is i want to
11:22 - decompose these corners so first of all
11:24 - let me just show you what i mean by this
11:25 - so if i
11:26 - print out my corner now in this for loop
11:29 - you're going to see that
11:30 - after we close this and we look here
11:32 - this is what's printing out right we're
11:33 - getting an array
11:34 - inside of an array so i obviously need
11:36 - to take this interior array
11:38 - and then use that as a point for drawing
11:40 - my circle so we could do something like
11:43 - this
11:43 - we could say that corner is equal to
11:46 - corner
11:48 - 0 and then that would give us one array
11:50 - that has the x y
11:51 - values but there's actually a method in
11:53 - numpy that can help us do this so if i
11:56 - say
11:56 - x y is equal to and then corner
11:59 - dot and then i have to look at this i
12:01 - believe this is called ravel
12:03 - what this actually does is flatten an
12:05 - array so if you're given something that
12:07 - looks like this
12:08 - and you have you know some elements in
12:10 - it what ravel does
12:11 - is it just takes this array and
12:13 - completely flattens it now when you say
12:15 - flatten all that means is remove
12:16 - all the interior rings so we'll get rid
12:18 - of these two brackets
12:19 - and these two brackets and it will just
12:21 - give you all of the remaining elements
12:24 - so even if you had something that was
12:25 - like this and you have like one comma
12:28 - two and then like
12:29 - two comma one then what would happen is
12:31 - it would just give you a new array here
12:33 - that would look like this one
12:37 - two two one it would just flatten it for
12:39 - you so anyways what's going to happen is
12:41 - when we have our point
12:42 - that looks like this so
12:45 - x y it will flatten it so the array now
12:48 - becomes
12:49 - x y and then in python there's something
12:51 - called tuple or
12:52 - list decomposition so we'll take these
12:55 - two elements and then just place them
12:56 - into the two variables so x will be
12:58 - equal to x and y will be equal to y
13:00 - so that's what corner dot ravel is going
13:02 - to do now that we have the corner we can
13:04 - actually draw the corner
13:05 - so to draw the corner we're going to say
13:08 - cv2
13:09 - dot and then circle this is why i showed
13:11 - it to you in the last video or in i
13:13 - guess video four
13:14 - i'm going to say image i'm going to put
13:16 - the center of my circle which is going
13:17 - to be x
13:18 - y make sure this is a tuple and that you
13:20 - don't just pass this
13:21 - corner.ravel here because that won't
13:23 - work then after you have that you want
13:25 - to pass the radius so let's make the
13:26 - radius of this say
13:27 - 5. we now need a color so this is going
13:29 - to be in bgr so let's make these blue so
13:32 - 255 0
13:33 - 0 and then we need a thickness of the
13:35 - line or a fill
13:36 - now i want to fill in my circle so i'm
13:37 - going to make a negative 1. so now we'll
13:39 - draw that on the image and then display
13:41 - the image so we should see all of our
13:43 - corners
13:44 - so let's run this and notice that we do
13:46 - see these corners here but for some
13:47 - reason they're showing up white and
13:49 - actually i'm realizing that the reason
13:50 - these are showing up white
13:51 - is because our image is still in
13:53 - grayscale so if i want to convert my
13:56 - image back
13:56 - into a colored image then i'll have to
13:58 - do something to do that so
13:59 - these are actually being drawn as blue
14:01 - but since our image is in gray scale
14:03 - it's just showing them as white
14:04 - so we need to not show the image that is
14:07 - grayscale in fact we should show the
14:09 - image that is colored
14:10 - so what i'm going to do and this is
14:11 - constructive i probably should done this
14:12 - at the beginning
14:13 - is rather than doing all of my i guess
14:16 - image manipulations on
14:18 - the grayscale image all i'm going to do
14:20 - is have
14:21 - my gray here so i'll say gray is equal
14:24 - to then cv2.cvt color
14:26 - and i will use that to detect the
14:28 - corners but then i will
14:30 - draw the corners on my colored image so
14:32 - now rather than converting the original
14:34 - image into grayscale
14:36 - what i will do is make a new image that
14:37 - is grayscale i will find the corners in
14:39 - that new image and then i will just draw
14:41 - the corners on the colored image
14:43 - so this should work now that's what i
14:45 - did here by changing this to gray
14:46 - and changing this here to gray so let's
14:48 - save this and run and let's see and
14:50 - there we go so now we're getting all of
14:51 - the corners it's missed a few just
14:53 - because
14:53 - you can't really detect a corner here
14:55 - because there's just a ton of black and
14:57 - it's bordering there
14:58 - but you can see that it's giving us you
14:59 - know pretty much all the corners except
15:01 - for these two black ones
15:02 - which is to be expected so now that we
15:05 - have all these corners
15:06 - what i'm going to do is i'm going to
15:07 - draw lines between these corners
15:09 - now i can't really zoom in here to see
15:12 - if it's showing multiple
15:14 - circles here uh for these corners like
15:16 - if it's detecting multiple corners
15:18 - i don't think it is but there is a
15:20 - possibility that multiple circles are
15:22 - being drawn on top of each other
15:24 - that shouldn't happen because of the
15:25 - euclidean distance thing that we have
15:27 - but it just to me i don't know i'm
15:28 - looking at it looks like there might be
15:29 - multiple ones drawn there
15:31 - uh anyways we'll see when we start
15:33 - drawing these lines
15:34 - but what i'm going to do now just to
15:36 - kind of add some nice spin to this
15:38 - is we are going to draw randomly colored
15:40 - lines between every single one
15:42 - of these corners so every combination of
15:44 - corners will have a line drawn between
15:46 - them
15:46 - so i just want to show you this because
15:47 - i think it's interesting so i'm going to
15:49 - go
15:50 - and say 4i in range and then this is
15:53 - going to be the
15:54 - len of our corners i am then going to
15:56 - say 4j
15:58 - in range and then the len of our corners
16:02 - like that
16:02 - i'm going to say that oops uh
16:06 - corner 1 is equal to and then corners
16:09 - at index i and then i will say
16:12 - corner 2 is equal to and then corners at
16:15 - index
16:16 - j and i also will sorry just do a quick
16:18 - fix here i'm going to say i plus 1
16:20 - to line of corners so what this is going
16:22 - to do is loop through
16:24 - all of the corners then it's going to
16:26 - loop through all of the other corners
16:28 - that we haven't already looped through
16:29 - that's why i have
16:30 - i plus 1 here we're going to get two
16:32 - pairs of or we're going to get a pair of
16:33 - corners i guess so two corners corner
16:35 - one and corner two
16:36 - and then we're going to draw a line
16:37 - between these two corners so now that we
16:39 - have these two corners here
16:40 - all we have to do is convert these to
16:42 - tuples because these are going to be
16:44 - list by default so we have to say
16:46 - tuple and tuple this will take this list
16:49 - and convert this to a corner
16:51 - and then i will say cv2 dot line and i
16:54 - will draw a line on my image
16:56 - between corner 1 corner 2
17:00 - it's going to have a color this color is
17:02 - going to be a random color so i'll show
17:04 - you how we do that one second
17:05 - and then the thickness of the line will
17:07 - just make one so i think that's all we
17:09 - need for the line
17:10 - but now what i want to do is figure out
17:11 - what this color value is going to be so
17:13 - i'm going to say color
17:14 - and then is equal to and then n pi or np
17:19 - sorry.random.randint
17:21 - and what i can do here is i can pass a
17:23 - high value or sorry a low value
17:25 - a high value and then the shape or the
17:28 - number of random elements that i want to
17:30 - generate
17:30 - so in this case if i say 0 and 255
17:33 - because i want to generate here
17:35 - 3 random values between 0 and 255
17:38 - so that i can generate a random color
17:40 - right a random value for blue random for
17:42 - green random for
17:43 - red and then the amount of these that i
17:45 - want so the size is equal to three
17:48 - so this will kind of be a shortcut to
17:50 - what we did in one of the previous
17:51 - videos to generate a random number
17:53 - where now we will just have uh this one
17:55 - function that can do it all for us
17:57 - now the only issue with this is that
17:59 - this returns to us a
18:00 - list and these random ins are not
18:03 - necessarily
18:04 - integers now i know this is weird but
18:06 - it's actually going to return to us
18:08 - a 32 or 64-bit integer and we only want
18:12 - an 8-bit integer now this is just kind
18:15 - of one of the things with numpy
18:16 - numpy has a bunch of different types for
18:18 - all of their integer values
18:20 - in python it works a little bit
18:21 - different like your standard python
18:23 - integer data types versus your numpy
18:25 - integer data types
18:27 - so because of this small nuance here we
18:29 - need to convert
18:30 - these integers that are generated into
18:33 - regular python integers so that they are
18:35 - not
18:35 - numpy 64 32-bit integers which we don't
18:38 - want
18:39 - so to do this we're going to map this
18:42 - this will actually be
18:43 - instructive as well i can say map and
18:45 - then what i will do is i will put a
18:47 - function
18:48 - that i want to apply to every single one
18:50 - of these values so the way that map
18:51 - works
18:52 - is you put a function so i'm going to
18:53 - write a function i'll explain this in
18:54 - one second
18:56 - and what this will do is it will apply
18:59 - this function
19:00 - to every single element in your array
19:02 - here
19:03 - and then it will return a new array that
19:06 - has all of the results from this
19:08 - function
19:08 - so in this case i wrote what's known as
19:10 - an anonymous function it's a lambda
19:12 - function
19:12 - so if you want to write a one-line
19:14 - function and you don't want to define
19:15 - one yourself
19:16 - you can write lambda then you can write
19:19 - x so this is going to be like the
19:20 - parameter for the function
19:22 - and then your return value comes after
19:24 - this colon so in this case
19:25 - x will be every single element from this
19:28 - randomly generated
19:29 - list of integers and then we'll just
19:31 - take that and convert it into a regular
19:33 - python integer because we have int here
19:35 - so return to us that int
19:36 - we will add all of those ins into a new
19:39 - list and then that's what map will give
19:41 - us
19:41 - and then finally after this we need to
19:43 - convert this into a tuple because we
19:45 - can't have a list for our color it needs
19:46 - to be a tuple
19:47 - and then we can put here color so
19:51 - i understand this is probably a little
19:52 - bit confusing especially if you're not
19:54 - more experienced python programmer but
19:57 - map again all it does is map all of the
19:59 - values from an array
20:00 - to a function or uses a function to map
20:02 - all of the values
20:03 - returns you a new array that has all of
20:06 - those values
20:07 - then you convert this into a tuple and
20:09 - then we can use that as the color for
20:11 - our line
20:11 - so now that we have that all i have to
20:13 - do is run this and you're going to see
20:14 - we're going to get kind of
20:15 - a bunch of just random lines showing up
20:17 - on the screen here
20:18 - so let's run this and i got an error so
20:21 - let me look into this and i will be
20:22 - right
20:23 - back all right so i'm just looking into
20:24 - this issue here and i realized that we
20:26 - ran into a pretty silly mistake
20:27 - so when i'm referencing corners i and
20:30 - corners j
20:31 - i have to remember that we haven't done
20:33 - this corner dot ravel thing right we
20:34 - haven't flattened it
20:36 - which means that corners i is really
20:38 - this kind of two
20:39 - sided array like this right it has two
20:41 - array inside of an array
20:42 - so the way that we have to combat this
20:44 - is we need to just take the zeroth index
20:47 - of this so what this will do is give us
20:49 - the interior array because since we have
20:51 - something that looks like this
20:52 - x y we just want x y and so if we index
20:56 - this exterior array at 0 that will give
20:58 - us the interior array which is the first
21:00 - element
21:01 - so this should hopefully fix our problem
21:02 - for us so let me run my program now
21:05 - on let's see if this works and there we
21:06 - go this does indeed work and notice that
21:08 - we have
21:09 - all kinds of lines going around the
21:10 - screen a line thickness of one between
21:13 - every single corner so i just want to
21:15 - show you that and i think this is
21:17 - interesting and it just shows you what
21:18 - you can kind of do with opencv
21:20 - so in the next video i think we're going
21:22 - to get into potentially object detection
21:24 - or facial recognition
21:25 - we're going to be doing some interesting
21:26 - stuff i hope you guys are looking
21:28 - forward to it and with that said if you
21:29 - enjoyed make sure you leave a like
21:31 - subscribe to the channel and i will see
21:32 - you in another youtube video