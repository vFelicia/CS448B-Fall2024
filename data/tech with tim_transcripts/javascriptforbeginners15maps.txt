00:00 - hello everybody and welcome back to the
00:01 - JavaScript tutorials so in this video
00:03 - we're gonna be talking about maps
00:05 - now maps are kind of a mixture of sets
00:08 - and arrays now it's not only the best
00:10 - way to describe them but you'll
00:11 - understand them as we get through but
00:13 - they have the same property as a set
00:14 - where we can actually look up items and
00:16 - see if items exist in what's called
00:18 - constant time now in case I didn't make
00:21 - this clear enough in the last video
00:22 - adding items and deleting items from a
00:25 - set also happens in constant time now I
00:28 - just want to say this because this is
00:29 - the same as Maps when you have an array
00:31 - right here we have an array and we look
00:33 - something like this and we want to add
00:34 - an element site to the beginning of this
00:36 - array well this actually takes what's
00:38 - called o endtime and I don't want to get
00:41 - into space-time complexity with you guys
00:43 - but essentially the more elements you
00:44 - have in an array the longer it takes to
00:46 - potentially delete one or add one and
00:48 - especially to find if one exists the
00:51 - only real benefit of an array for us is
00:53 - the fact that we can keep track of the
00:55 - order in which elements exist and we can
00:57 - access them directly by using that index
01:00 - right raise your array wand right to
01:02 - whatever right that's kind of the
01:03 - advantage and the reason we use an array
01:05 - and for most problems that's fine but
01:08 - there's a lot of instances in which we
01:09 - actually want a faster kind of structure
01:11 - that will allow us to add delete and
01:13 - look up items in constant time but we
01:15 - can't necessarily access them with
01:17 - indexes and know the order in which they
01:20 - were inserted right and we also can't
01:22 - keep track of the frequency whereas in
01:24 - an array obviously we can have the same
01:26 - element more than once ok so that's my
01:28 - little spiel here now what I'm gonna do
01:30 - is start talking about maps so let's
01:32 - create a map we'll just call this M P
01:34 - equals new map now what is a map well a
01:38 - map is similar to set but what it holds
01:40 - is what are called key value pairs now
01:43 - this is kind of what I mean we have a
01:45 - key maybe this key is something like hi
01:47 - in this maps to some value maybe in this
01:51 - instance we say 6 so we have some
01:53 - arbitrary key can be called whatever we
01:55 - want mapping to some value now this is
01:58 - very useful for a lot of different tasks
02:00 - I'm gonna show a good example in a
02:01 - second of how we actually use this but
02:03 - the whole point of this is that this key
02:05 - value is what we use to access different
02:08 - or this key yeah this key is what we use
02:11 - to access different values and obviously
02:13 - we have
02:13 - you know more than one key so I'd have
02:15 - another key like this I could have maybe
02:16 - the key Apple and that corresponds to
02:18 - the value seven and obviously our keys
02:21 - can be different too we can have a key
02:22 - that's actually numeric which is eight
02:24 - and that could map to may be the string
02:25 - Tim right so this is the way that a map
02:29 - works we have a key that maps to some
02:33 - value and you'll see why this is useful
02:34 - in just a second and again same
02:36 - properties here to look up any key is
02:38 - gonna be instant time so you can think
02:40 - of it as instantaneous versus an array
02:42 - that's much slower and to grab that
02:44 - value is gonna be the same so to add
02:46 - delete or lookup is gonna happen very
02:48 - quickly that's why we use a map so let's
02:51 - start talking about some map operations
02:52 - I'm gonna first talk about the
02:54 - constructor so right now what I've done
02:56 - is created what's called an empty map
02:57 - although I can actually add some values
02:59 - in this constructor to start off with
03:01 - some kind of initialized values so to do
03:04 - this what you actually need to do if you
03:06 - want to start with some keys in here is
03:08 - create an array of arrays of keys and
03:12 - values now I know this seems strange so
03:14 - actually let's separate this like this
03:17 - so you can get a better idea of how this
03:18 - looks okay and like that okay so what
03:24 - I've done is I've had this initial array
03:26 - and then I have two arrays inside of
03:27 - here and what I'm going to do in these
03:29 - arrays is put a key and then a value so
03:31 - my first key I'm just gonna say is T and
03:33 - this will point to let's say the value
03:34 - five and then let's have a key V and
03:37 - maybe this point to the value eight so
03:39 - we've started off our map with these
03:41 - different key values let me just put
03:42 - this up here cuz that's gonna be
03:44 - annoying okay so now how do we access
03:46 - these keys how do we create new keys how
03:48 - do we do all this well to get a key what
03:51 - we use is called get now I'm just gonna
03:54 - console.log this so we can see so I'm
03:57 - gonna console dot log MP which is
03:59 - obviously standing for a map and what I
04:00 - do in here is I put the key that I want
04:02 - to access now what this is gonna do is
04:05 - return to me the value associated with
04:07 - the key so if I put for example T here
04:09 - and we go and we refresh this you can
04:11 - see that we get the value five printed
04:13 - out because this method returned to us
04:15 - five now if I put V and I refresh this
04:18 - here we get eight and hopefully you're
04:21 - understanding and getting the point that
04:23 - is how this works now let's show how we
04:25 - can actually add thing
04:27 - to our map so to add something to our
04:29 - map what we do is MP dot set and we
04:32 - simply put in here a key and a value so
04:36 - I'm actually gonna do this a little bit
04:37 - weird just to kind of confuse you guys a
04:39 - bit I'm gonna actually set the key T to
04:42 - the value 9 now what do you think this
04:45 - does remember maps are very similar to
04:47 - sets do we think this adds another key
04:50 - called T that has the value 9 or does it
04:52 - override the existing key and change
04:54 - that value let's see here if we try to
04:57 - get the value of T let's see it what
04:59 - value we're actually gonna get well
05:00 - we're gonna get 9 that's because if you
05:02 - set a key that already exists
05:04 - essentially what you do is just
05:06 - completely override this and change the
05:08 - value to whatever it is you put here now
05:10 - obviously I can add some other ones so I
05:12 - can MP the set you know like H I
05:14 - honestly let's actually just set like 3
05:16 - equal to hello now you see if we get the
05:20 - key 3 from our map we get the value
05:24 - hello and let's try to get a key that
05:26 - doesn't exist from our map and see what
05:27 - we're getting there
05:28 - do it refresh undefined obviously
05:31 - there's nothing in the map that's gonna
05:32 - give us that value so those are the two
05:34 - basic operations for maps we have set
05:37 - and we have get now obviously we can
05:40 - look at the size of our map just like
05:41 - almost everything in JavaScript so if we
05:44 - do this we get we have three keys so
05:46 - three key value pairs in our map because
05:49 - we've added this 3 hello and that is the
05:51 - basic principle now to delete keys is
05:54 - very easy as well we're just gonna do MP
05:56 - dot delete we could delete the value or
06:00 - the key T and we should see that our
06:02 - size changes from 2 to 1 so let's have a
06:04 - look at that and now we get the value 1
06:06 - because we deleted T what happens if we
06:09 - try to delete a key that doesn't exist
06:10 - for example the string 6 well we still
06:13 - have a size of 2 and with no errors
06:16 - that's fine we just didn't end up
06:17 - deleting that key all right so the next
06:19 - one that I want to talk about is has now
06:22 - has simply is a boolean value that tells
06:25 - us if the map has a specific key so very
06:28 - similar to set and this runs in the same
06:30 - kind of time as it does for a set so I
06:33 - say MP dot has and I put the value T
06:36 - like this and we print out our answer
06:38 - obviously that is true
06:40 - and then if we do something like you
06:42 - know six here so let's refresh this then
06:45 - we get the value false because obviously
06:46 - the key six or the string six was not
06:48 - one of the keys in our map and yeah I
06:50 - mean that is pretty much it for maps
06:53 - I'll show you a few other methods we
06:54 - have the map clear method so I could say
06:56 - MP dot clear let's just actually print
06:59 - out MP so we can have a look at it after
07:01 - MP dot clears obviously just gonna
07:03 - remove all of the keys so we see we have
07:04 - an empty map here we've cleared all the
07:06 - entries from it what else we have is the
07:09 - map dot entries methods so this one is
07:12 - actually interesting I'll show you this
07:15 - entries like that so let's refresh and
07:18 - you can see we get T points to 5 V
07:21 - points to eight and this is what's
07:22 - called an iterator which means we can
07:24 - loop through this and look at all the
07:26 - different entries so let's actually do
07:27 - that now we'll do a for loop and just
07:29 - show how we can iterate through this so
07:30 - we'll save our entry of MP all we need
07:35 - to do is simply console dot log the
07:37 - entry now the question is what is entry
07:40 - is entry going to be the key is he going
07:42 - to be the value or is it going to be the
07:44 - whole thing let's find out by refreshing
07:46 - and we can see that's actually giving us
07:48 - the whole thing so if I want to access
07:51 - just the key or just the value what I
07:53 - have to do is actually index either 0 or
07:55 - 1 by index 0 that's gonna give me the
07:58 - key if I index 1 that's gonna give me
08:00 - the value and the reason for this is
08:02 - because again we're actually looping
08:03 - through this array right so we you know
08:05 - we go through the map and then we are
08:07 - given for entry and array so we have to
08:10 - loop through the value to determine
08:12 - which one we actually want I did not
08:14 - mean to do that
08:15 - let's refresh now you see we're just
08:16 - printing out the keys and if we were to
08:18 - change this to 1 then we would just be
08:20 - printing out the values like that pretty
08:23 - straightforward ok so now let's go
08:25 - through an example with why we'd
08:26 - actually want to use a map and this one
08:28 - is a fairly good example actually I like
08:31 - this example to count the number of
08:32 - characters in a string so let's just say
08:35 - STR equals and then let's do this is my
08:39 - new string hello
08:43 - just add some characters in here so what
08:45 - I want to do is actually create a count
08:47 - of all these characters I want some way
08:49 - to be able to find out how many of any
08:51 - letter exists
08:52 - in this string so if I want to find how
08:55 - many T's I want a way to do that how
08:56 - many eyes and and so forth you know I
08:59 - want a way to do that I want to count
09:01 - all the different letters well we can do
09:03 - this very easily using a map and I'm
09:05 - gonna show you just by going through the
09:06 - example and then we'll walk through it
09:08 - step by step I'm gonna save our letter
09:11 - of string which means we're just gonna
09:14 - loop through each letter in our string
09:15 - and what I'm gonna do now is say if in
09:18 - this case well actually these MP dot has
09:23 - letter so if it does have the letter
09:26 - what I'm gonna do is actually say MP dot
09:28 - set and in this case the key is gonna
09:31 - beat the letter and the value is gonna
09:33 - be MP dog get letter plus 1 now what I'm
09:38 - gonna do is store in my map key values
09:41 - that look something like this I'm gonna
09:42 - store the letter for example let's say T
09:44 - and I'm gonna store the count as the
09:46 - value so I'm gonna start how many times
09:48 - I've seen you know whatever this is so
09:51 - if we actually have the letter already
09:53 - inside of our map that means we've seen
09:55 - it before and we'll talk about how we're
09:57 - gonna do that in a second well grab
09:59 - whatever the current value of it is here
10:01 - and then we'll add one to it and store
10:03 - that back in the map and remember when
10:05 - we set and you know a specific key if
10:07 - that key already exists in the map which
10:09 - it will have here say we have T we just
10:11 - override that and we'll just change T's
10:13 - value to be three and that's the point
10:15 - we're gonna just increment and count how
10:17 - many letters and I'll show you how we
10:18 - can look at them in a second now
10:19 - otherwise so if the map doesn't have
10:22 - this letter we need to add that letter
10:23 - to the map but you're gonna say MP dot
10:26 - set ladder one the reason we can just
10:29 - put one is because if this is the first
10:30 - time that we've seen this letters not re
10:32 - in the map all we need to do is give an
10:34 - initial value of one because we've seen
10:36 - this letter one time okay so that is how
10:39 - we do that now let's just print out the
10:42 - map to have a look at it after so if we
10:45 - refresh we go here we can see that we
10:48 - have now our map T has a count of two H
10:51 - has two I 3s 3 blank which is space
10:54 - actually has a value of 5 and then we
10:55 - can keep going and see all of the
10:57 - different letters as well as their
10:59 - counts so this is useful because now if
11:02 - I want to check how many you know say
11:04 - T's are in my map what I
11:05 - can do is say okay let's get a value of
11:08 - T let's see how many T's are in this
11:10 - string that we counted right so if we
11:12 - refresh now we print out two and now any
11:15 - letter I want I simply put inside here
11:17 - and obviously if we don't have the
11:19 - letter in there it's gonna give us you
11:21 - know just an undefined value but you
11:23 - kind of get the point on that so anyways
11:25 - this has kind of been it on maps I hope
11:27 - this example helped illustrate when you
11:29 - might actually use a map I know this
11:31 - seems kind of complicated but it's
11:33 - really not that far you know you have to
11:35 - kind of understand what these methods do
11:36 - and how you actually use them properly
11:39 - I said anyways that has been it for maps
11:41 - if you guys enjoyed make sure you leave
11:42 - a like subscribe to the channel and as
11:44 - always let me know what you want to see
11:45 - from the rest of this javascript
11:47 - tutorial series