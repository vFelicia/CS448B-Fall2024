00:02 - [Music]
00:06 - hello everybody and welcome back so in
00:08 - this video I'm going to be talking about
00:10 - functions going into some more advanced
00:12 - examples and then covering function
00:14 - closures later on in the video so the
00:16 - first important thing to understand
00:17 - about functions that we haven't covered
00:19 - yet is that functions are actually their
00:21 - own data type now what that means is
00:23 - they act very similary similarly to
00:26 - things like int floats strings boolean's
00:29 - and that means that I can actually
00:30 - assign them to variables I can pass them
00:33 - in as parameters I can return functions
00:35 - and I can just send them around my
00:37 - program which actually happens to be
00:39 - very useful and go left so let me show
00:41 - you what I mean by this when I call a
00:43 - function I do something like this right
00:45 - I go X colon equals test this is just a
00:48 - simple function that I coded out here
00:50 - what this is saying is okay let's call
00:52 - the test function oops what the heck
00:55 - test ah sorry I've got to do this
00:57 - shouldn't be assigned to variable but
00:59 - when I do these two brackets I'm saying
01:01 - let's call the function let's tell it to
01:03 - execute let's maybe pass it some
01:05 - parameters or arguments if it has
01:07 - anything here let's maybe assign it to a
01:09 - variable and get some value from it but
01:11 - this is calling the function which means
01:13 - whatever's inside of it's gonna run a
01:15 - function will run now that is different
01:17 - than just writing the function without
01:19 - the parentheses so these parentheses
01:21 - signify a call now if you don't have
01:23 - those there what you're saying is not
01:25 - call the function but reference the
01:27 - function which means almost like make a
01:29 - pointer to it like say okay this is the
01:31 - function you know this is where it's at
01:34 - this is what it does but it doesn't
01:35 - actually call it so I can actually do
01:37 - something like X colon equals test and
01:40 - then call X now this will do the same
01:43 - thing as just writing the line test like
01:45 - that but I've just done it in kind of a
01:47 - convoluted way to show you that this is
01:49 - a valid thing I can actually assign a
01:51 - function to a variable
01:52 - this is a type function it's not a value
01:55 - I'm not printing hello when I do this
01:58 - but what happens now is that X is equal
02:01 - to this test function so if I call X by
02:05 - putting the parentheses like that it
02:06 - will call the test function think of it
02:08 - as a basic substitution right X is equal
02:10 - to test so let's put tests there for x
02:13 - boom call and that will work fine so if
02:15 - I do this and I run my code let's have a
02:18 - look at it here we can see that hello
02:20 - gets printed no problem nothing's wrong
02:22 - with this coat so that is a totally
02:24 - valid thing to do is assign a type
02:27 - function to a variable and then call
02:30 - that variable now if we went like this
02:31 - and we said you know X int and maybe we
02:34 - did something with X so maybe we just
02:35 - printed it out like that now what I
02:37 - would have to do is pass some value when
02:39 - I call X so this is totally valid I'm
02:42 - you know there's nothing wrong I save
02:43 - this file there's toast squiggly lines
02:44 - just when I call X now I need to pass
02:46 - the parameters that I would typically
02:48 - need to pass if I was just calling test
02:50 - so that is a way that we can actually
02:52 - store functions and what this means is
02:55 - first of all that I can assign any
02:57 - function to a variable I can actually
02:59 - create functions anywhere I want they
03:02 - don't need to just be in this kind of
03:03 - main line of the program that we've been
03:05 - looking at and I can return functions I
03:07 - can pass functions as input in as
03:10 - parameters I can do many different
03:11 - things with functions so let me show you
03:13 - an example of creating a function inside
03:16 - of a function so let's see function main
03:18 - is a function right it says fun totally
03:21 - bounded so now let's actually make a
03:22 - function inside of this and call it so
03:25 - what I'm gonna do is I'm gonna say test
03:27 - colon equals I'm just gonna say func
03:29 - like this and then go fmt dot print line
03:33 - in fact I could have just copied this I
03:35 - guess but we'll print hello just like we
03:37 - had in the previous example now what
03:39 - I've actually said here and this may
03:41 - look weird is that test is the variable
03:43 - that is storing a function that takes no
03:46 - parameters has no arguments does not
03:49 - return anything and simply prints hello
03:50 - and now if I want to call test I can do
03:53 - this and that's totally balanced let's
03:55 - save and see if that we got any squiggly
03:57 - lines here doesn't look like and if I
03:59 - run my code you'll see that we get hello
04:02 - popping up so this is a valid line of
04:04 - code too right now it may seem weird
04:06 - because here you did func and then you
04:07 - had to name it but when you do this
04:09 - inside of another function or you're
04:11 - assigning it to a variable what you can
04:13 - do is simply write it like this so the
04:16 - variable that you want to store this
04:17 - function is equal to some function this
04:20 - function doesn't have a explicit name
04:22 - we're just storing it in tests that
04:24 - returns nothing and prints the value
04:26 - hello
04:26 - now I could though put a parameter like
04:29 - index here and we could just print out X
04:31 - and that works totally fine that just
04:33 - means here now I got to put some values
04:35 - so say like five and let's run this now
04:38 - and we see that undefined X s or I wrote
04:42 - into X that should be X in my apologies
04:46 - okay so let's have a look at this now
04:47 - and we get the value five printing out
04:50 - to the screen so as a valid thing to do
04:53 - now because we can do this we can do
04:56 - many different things with functions we
04:57 - can do some pretty cool things actually
04:59 - so what I could do is actually um let's
05:02 - see if this makes any sense
05:04 - function func okay so let's do this I'm
05:07 - gonna do an example where this function
05:08 - returns something let's say function
05:10 - take some value X and what it does is
05:12 - simply return X multiplied by a negative
05:14 - one that will say that's what the test
05:16 - function is gonna do so it's gonna
05:17 - return some int and here what I'll do is
05:20 - return X multiplied by negative one okay
05:23 - so now we have the function test and it
05:26 - returns X multiplied by negative one now
05:29 - what I'm actually gonna do because I'm
05:31 - gonna call this function right directly
05:33 - from where I'm defining it so I'm
05:35 - actually gonna put eight in here and
05:37 - what this will do is it will now call
05:39 - this function because you can imagine
05:40 - it's not even attached to test right if
05:42 - we just put it like something like this
05:44 - and what it will do is call the function
05:46 - that we've just created with the
05:47 - parameter eight which will mean it will
05:49 - return e 2 times negative 1 and now
05:52 - store that value inside of test so if I
05:55 - actually go FMT oops FM t dot print line
06:00 - and I just print test like that
06:02 - you'll see that assuming I haven't made
06:04 - a large error here that this should work
06:06 - so let's run this go tutorial run go and
06:09 - we see we get negative eight so what
06:12 - actually happened to you is I made a
06:13 - function write that were takes a value
06:16 - and then returns a value and we called
06:18 - it directly in line with the parameter
06:21 - eight and since that happened all here
06:23 - instead of storing the function inside
06:25 - of test we stored the value that the
06:27 - function returned so why would you want
06:30 - to do that couldn't tell you off the top
06:32 - of my head but there is some examples
06:34 - and use cases of doing something like
06:35 - this but I just want you to really
06:37 - understand how the function works so
06:38 - this
06:39 - the function type I can call it by
06:41 - simply putting parentheses on the
06:42 - outside of it and that's no different
06:44 - than me just doing that right because
06:47 - again if you do the substitution well
06:48 - test is just equal to this function so
06:50 - it's no different than me just putting
06:52 - eight here because it's just the
06:54 - function right that I'm calling you can
06:56 - think of the substitution of tests with
06:58 - all of that so that's the idea behind
06:59 - that and a really cool thing that you
07:01 - can do with functions that you can call
07:04 - them like that and you can run them like
07:05 - that now let me show you how we can
07:07 - actually pass a function like test to
07:09 - another function so I'm gonna say func
07:11 - test - let's say that it actually takes
07:15 - as a parameter a function so what I need
07:18 - to do here if I want this to accept a
07:20 - function as I say like my func so I name
07:23 - the parameter whatever I want and then I
07:25 - have to do func I have to put the
07:27 - parameter type that it's gonna take in
07:29 - the parameter type that it returns so I
07:32 - define that this is actually the type of
07:34 - my funk because the function type is
07:37 - specific to what it accepts and what it
07:40 - returns so those need to match and then
07:43 - what I can actually say here is well I
07:44 - could return another function if I
07:46 - wanted to by writing func
07:48 - and then whatever it was going to return
07:49 - so maybe a function that took a string
07:51 - and returned it int this would mean I'm
07:52 - returning some function that does that
07:54 - or in this case I could just return
07:56 - nothing which I'm going to do so here
07:58 - we're saying test to take some function
08:00 - that takes an int and returns an int and
08:02 - what I'll actually do is just call that
08:05 - function with the value 7 so now we'll
08:08 - just see whatever function is that we
08:09 - pass we'll just call it and see what it
08:12 - does and in fact we can fmt to print
08:14 - line the result just so we actually get
08:17 - some kind of output here to look at so
08:19 - let's print the result of my func 7 and
08:21 - then down here let's go ahead and let's
08:23 - write the line to call test - so I'm
08:26 - gonna say test - and I'm actually going
08:28 - to pass it test so what this will do is
08:30 - it will pass this function that we've
08:32 - defined so the function that takes an
08:34 - int returns an int that's just x
08:36 - negative 1 we pass it to this function
08:39 - right so that gets stored in my function
08:41 - this test function and then we call that
08:43 - function with the value 7 and print the
08:46 - result so let's have a look at this I
08:47 - might have made a mistake here but let's
08:49 - run this and see what we get and no
08:52 - mistake we get
08:52 - negative seven so hopefully you
08:54 - understood how the flow of that worked
08:56 - so I actually passed the function I
08:58 - defined here to this function and this
09:00 - function called that function now what's
09:03 - nice about that is I can make another
09:04 - function here let's call it test3 why
09:07 - not colon equals func
09:09 - maybe will have it take some string ax
09:11 - and maybe it doesn't return anything
09:13 - maybe it just prints that out so we say
09:14 - FM t dot actually we'll have it return
09:18 - something let's do will actually make it
09:21 - the same thing otherwise this isn't
09:22 - gonna make sense what I have but K so it
09:23 - takes an int returns an int and maybe
09:25 - this time what it'll do is will return x
09:27 - x seven okay so that's what test3 does
09:30 - now all I have to do if we want to
09:32 - change this function so I want it to
09:34 - call a different one
09:35 - it's just put test3 here and now what it
09:37 - will do is it will call test3 with the
09:40 - value 7 so let's have a look at this and
09:42 - go go run tutorial go and you see well
09:45 - since this function isn't being used we
09:47 - have an error so let me just comment
09:49 - that out like that so that's a
09:53 - multi-line comment by the way if you do
09:54 - a forward slash Astrix and then forward
09:56 - slot and then asterisks forward slash
09:58 - that gives you a multi-line comment
10:00 - which comments out the entire section
10:02 - Robby you see we get 49 as that answer
10:04 - so it's a valid thing to do so you just
10:07 - have to understand that about functions
10:08 - that you can pass them around the
10:10 - program and that you can define them in
10:12 - line so I can make them equal to some
10:14 - variable and in fact I don't always have
10:16 - to do that but I could literally write a
10:18 - function and just call it immediately so
10:20 - if I have some function like let's do it
10:22 - here so I'll get rid of this one and
10:24 - we'll get rid of this here and I just
10:27 - write like func like that and maybe all
10:30 - we'll do in here is this fmt dot println
10:34 - test I mean this is a valid line of code
10:36 - to have and what this will do is just
10:38 - print test immediately because I just
10:40 - make a function and I just call it I
10:41 - didn't need to assign it to a variable
10:42 - it just got called right so that's a
10:44 - valid thing to do now I'm gonna show you
10:46 - the last thing which is returning a
10:48 - function and talk about the function
10:49 - closure which is the title of this video
10:51 - so let's make a new function let's say
10:53 - func return func standing for you will
10:57 - return a function and what will take is
10:59 - actually some value sure
11:01 - let's take X which is let's say it's a
11:03 - string this time and then we'll have it
11:05 - return some
11:06 - function they maybe just print something
11:08 - out right so we'll just say okay func
11:10 - like that's and what this is saying is
11:12 - we're gonna return a function that takes
11:13 - no parameters and returns nothing if I
11:16 - wanted it to take a parameter and return
11:17 - something I could do something like int
11:18 - int that would mean it takes the
11:20 - parameter that's an integer and returns
11:21 - an integer value so anyways we're gonna
11:23 - say just return anything what I'm gonna
11:25 - do is return a function that's simply
11:29 - fmt a dot print line of X so all this
11:33 - function does is prints the value X so
11:37 - we return that function from return func
11:39 - so now what I could do in here is say
11:41 - return func
11:43 - and then I'm actually gonna do a weird
11:45 - thing here I'm gonna call return func
11:46 - and I'm gonna call it again so what the
11:49 - reason this works and I know this seems
11:51 - really strange if you haven't seen
11:52 - something this complicated before is
11:53 - because what return function does and I
11:56 - have to give it a string sorry so let's
11:57 - give it hello is it return to function
12:00 - so this line here will be replaced with
12:02 - this function so you can imagine that
12:05 - all I'm really doing when I put the
12:06 - brackets there is just writing them
12:08 - right here so that means I'm just gonna
12:09 - call this function immediately after I
12:11 - get the return value from this return
12:14 - func and it'll print out hello so let's
12:16 - have a look at this let's go go run
12:18 - tutorial go and we get a low printing
12:21 - out totally fun now we could again we
12:23 - could use multiple times so I'd say
12:25 - hello and say you know goodbye like that
12:29 - no problem with that
12:31 - there we go goodbye and then of course I
12:34 - can also store this function in a
12:35 - variable so I can say something like X
12:37 - colon equals
12:39 - return func and then down here I could
12:42 - call X like that if I wanted to call
12:44 - goodbye and that would be totally fine
12:45 - as well perfect
12:47 - all right so that is pretty much how
12:49 - that works now this function is actually
12:51 - known as a function closure now the
12:53 - reason it's known for that is because it
12:55 - uses a value that we've defined outside
12:57 - of the function inside of it it's kind
13:00 - of hard to explain the function close
13:02 - your aspect of it but the idea is
13:04 - whenever you have a function inside of a
13:06 - function that uses some values from that
13:09 - function so in this case we're using the
13:10 - value X it's known as a closure and
13:12 - that's just kind of the way that you
13:15 - describe it if that's just the name for
13:17 - is just a function closure so we're
13:18 - saying this is a function closure
13:20 - it uses the value X now I could do
13:22 - something like this like some : equals
13:23 - zero and I could actually just print Ln
13:26 - some right and that would be totally
13:27 - fine I'm using the variable I defined
13:30 - here inside of this function which just
13:32 - makes it a function closure now there
13:34 - might be more to that explanation that
13:35 - I'm missing out here if you guys think
13:37 - I'm blacking and not definitely let me
13:38 - know and we can make another video about
13:40 - it if we have to but the term is not
13:42 - extremely important to understand it's
13:43 - just you understand the idea that we can
13:46 - use variables we define within the same
13:48 - function so within this out exterior
13:51 - function inside of this function and
13:54 - then I would be known as a function
13:55 - closure because we're using that
13:56 - variable and that was my understanding
13:58 - of it when I was reading through the
13:59 - goaline Docs although there might be
14:01 - some more than I'm missing up so now is
14:02 - that is pretty much been it for this
14:04 - more advanced function video I just
14:06 - wanted to show you what a function
14:07 - really is like we can pass it around we
14:09 - can put it in as a parameter we can put
14:11 - it in as a return value and just keep in
14:14 - mind that the type of a function is
14:15 - specific to what it returns in what
14:17 - parameters it takes so if you want to
14:19 - have a function that does something like
14:21 - takes an instant return int
14:22 - we need to make sure you specify that
14:24 - explicitly with int int okay so I think
14:26 - I'm in a wrap up video here if you guys
14:28 - enjoyed make sure you leave a like
14:29 - subscribe and I will see you in the next
14:31 - go line tutorial