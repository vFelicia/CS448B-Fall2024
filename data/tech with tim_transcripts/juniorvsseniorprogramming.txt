00:00 - foreign
00:05 - super simple tips that are going to
00:08 - drastically improve your code quality
00:10 - you're going to go from looking like a
00:11 - junior developer who just wrote their
00:13 - first hello world program to looking
00:15 - like the most advanced senior developer
00:17 - that you've ever seen seriously this
00:19 - stuff is super simple very easy you just
00:22 - need to learn it one time and if you can
00:24 - build it into a habit you're going to
00:26 - drastically increase your code quality
00:28 - now with that said let's quickly talk
00:30 - about what makes clean coat and what all
00:32 - of these tips are going to hit on so
00:34 - when I'm thinking of good high quality
00:36 - clean code I'm thinking of three things
00:38 - readable reusable and maintainable now
00:42 - when I think of readable code I think of
00:43 - nice and simple good variable names not
00:46 - a lot of nesting very easy to understand
00:48 - now when I think of reusable code I
00:50 - think of functions that have good inputs
00:52 - and outputs code that's well organized
00:54 - and structured that's not coupled
00:57 - heavily which means there's not a bunch
00:58 - of external dependencies or other
01:00 - functions that this code might be
01:01 - relying on and lastly when I think of
01:03 - maintainable code I think of code that
01:05 - is testable that is future proof that is
01:07 - well optimized and that is flexible and
01:10 - extensible so with that said let's dive
01:12 - into the video here after I give you my
01:14 - first and kind of bonus tip which is to
01:16 - check out the sponsor of this video
01:17 - before we get started I need to thank
01:20 - lenode for sponsoring this video I've
01:22 - been using and working with lenode for
01:24 - nearly three years now and they've
01:25 - consistently been my go-to choice for
01:27 - hosting my applications and servers in
01:30 - fact right now I'm using the node to
01:32 - host the official Tech with Tim Discord
01:33 - bot a website multiple of my domains and
01:36 - a kubernetes cluster now lenode was just
01:39 - recently acquired by Akamai and as a
01:41 - part of this acquisition they're going
01:42 - to be adding more than a dozen new data
01:44 - centers around the world in the next
01:46 - year lenode makes it super easy to spin
01:48 - up servers with their one-click app
01:49 - Marketplace and have tons of written
01:51 - guides and YouTube videos on their
01:53 - channel to help you get started now if
01:55 - you're having any issues you can reach
01:56 - out to the 24 7 support team and
01:59 - actually talk with a real human being
02:00 - now the nodes pricing is simple with no
02:03 - hidden fees and full transparency and
02:05 - you can test out the node services for
02:07 - free by using the link in the
02:08 - description and claiming in a hundred
02:10 - dollar sixty day credit for any new
02:12 - accounts it's been an absolute pleasure
02:14 - to work with lenode over the past few
02:15 - years and one last thank you to them for
02:17 - sponsoring this video alright so let's
02:19 - get into our first tip here which is to
02:22 - reduce comments now I know this seems
02:24 - counterintuitive because a lot of times
02:26 - professors and teachers will tell you
02:28 - write all kinds of comments describe
02:30 - your code make it nice and clear Now
02:32 - comments can be a good thing but only if
02:35 - they're not overused and if they're
02:37 - actually necessary a lot of times when
02:39 - you're writing a bunch of comments this
02:41 - is a signal to yourself that there's a
02:42 - better way to write your code such that
02:45 - the code is self-expressive and doesn't
02:47 - require comments to explain it I almost
02:50 - never write comments when I'm writing
02:51 - code and that's because the way in which
02:53 - I write my code explains itself I don't
02:56 - need a comment to explain what's going
02:58 - on you can read through the code even if
03:00 - you're a beginner programmer and it's
03:01 - very easy to understand because of the
03:03 - way that I've organized and separated
03:05 - out different pieces of logic and
03:07 - because of the different variable names
03:08 - function definitions Etc so if you look
03:11 - on my screen here you can see that we
03:13 - have an example of code that may be a
03:15 - more Junior developer would write where
03:17 - they're being very verbose they're
03:18 - writing a ton of different comments and
03:20 - they're kind of explaining things that
03:21 - maybe don't need to be explained or that
03:24 - could be explained in a better way by
03:26 - writing the code you know a bit
03:27 - different so here initializing the list
03:30 - of student names initializing the list
03:32 - of student scores function to assign
03:33 - random scores to students and notice
03:36 - that we're using things like Global
03:37 - variables so in this case I might
03:39 - actually need this comment to explain
03:41 - that I'm assigning scores to my Global
03:44 - students list here whereas if I took
03:47 - students as a parameter it's going to be
03:49 - more clear that I'm then assigning it to
03:51 - that parameter rather than some global
03:53 - object now as you go through here you
03:55 - can decide for yourself what comments
03:57 - you might have written or which ones you
03:58 - might have omitted obviously this is a
04:00 - bit of an exaggeration but you get the
04:02 - point there's a ton of comments here
04:03 - they're really unnecessary any senior
04:06 - developer would probably cringe if they
04:07 - were reading through this type of code
04:08 - and stuff like importing the random
04:10 - module we don't need to have that
04:12 - comment anyone who's reading this code
04:13 - is going to know that import random does
04:16 - that so just keep that in mind now to
04:18 - give you kind of a contrast here to this
04:20 - code where we have a bunch of comments
04:21 - we're kind of explaining unnecessary
04:23 - things let's have a look at what a
04:24 - senior developer might write sorry
04:27 - so here you go we have our senior code
04:29 - now notice that we've kind of refactored
04:31 - some things we've changed some stuff
04:33 - around and we've made the code a lot
04:35 - more clear and readable without having
04:37 - any comments so even if we just start
04:39 - from the main line here we have students
04:41 - equals initialized students okay that's
04:43 - clear what that's doing scores equals
04:45 - initialize scores and we're passing in
04:46 - the number of students that we have okay
04:48 - that probably tells us that we're going
04:50 - to have these scores associated with the
04:52 - students assign random scores okay we're
04:54 - passing our scores array it's going to
04:56 - give random scores for all of those
04:57 - makes sense highest score find the
05:00 - student with the highest score we pass
05:02 - in our students we pass in our scores
05:03 - very clear what's going on so even
05:06 - without getting into any of these
05:07 - individual functions just by reading the
05:09 - main line of the program I know exactly
05:11 - what the goal of the program is I know
05:13 - what's happening and I don't really need
05:15 - any comments this is very very clear
05:16 - even if you go to these individual
05:18 - functions notice that rather than having
05:21 - a variable called students that's Global
05:22 - that we're accessing we just have an
05:24 - initialize students function that's very
05:26 - clear that reduces our need for the
05:28 - comment saying hey we're initializing
05:30 - the student names same with the scores
05:32 - and now that we're taking in a parameter
05:34 - we kind of know that these scores are
05:36 - going to be associated with whatever
05:37 - length object we're passing in here
05:39 - assigning random scores same thing we
05:42 - take in some scores array we're
05:43 - assigning random scores to each index
05:45 - and then finding the student with the
05:47 - highest score and notice that we take in
05:49 - our students and we take in our scores
05:50 - as a parameter so it's very clear that
05:52 - the operation is happening on this
05:54 - whereas if we go back here we just have
05:57 - find highest score we have no parameters
05:59 - and now we might need to explain that
06:01 - we're actually looking at the global
06:02 - scores that are associated with students
06:04 - because that's not quite clear hopefully
06:07 - this gives you a bit of a contrast but
06:09 - try to write your code in a way such
06:10 - that it's self-expressive and it
06:12 - requires minimal comments alright so
06:14 - let's move on to tip number two which is
06:17 - to use guard Clauses now a guard Clause
06:20 - is simply some kind of condition that
06:22 - you're going to check at the top of a
06:24 - function program or block of code that
06:26 - will typically Escape or exit from that
06:29 - block of code if the condition is not
06:31 - true a guard Clause is a way to avoid
06:34 - performing additional logic if you don't
06:36 - have the preconditions required to
06:38 - actually get into that block of code
06:40 - hopefully that makes a bit of sense but
06:42 - an example of a guard Clause could be
06:44 - checking inputs to a function making
06:46 - sure maybe you have at least one element
06:48 - in an array making sure a number is not
06:51 - zero making sure you have the correct
06:52 - types all kinds of different things you
06:54 - can be checking but they're very helpful
06:56 - to increase the readability of your code
06:58 - reduce nesting and reduce the kind of
07:01 - complexity of logic you might have later
07:03 - on and to ensure that whatever logic
07:05 - you're about to perform is actually
07:07 - going to be valid and necessary to
07:09 - perform based on the inputs typically
07:11 - that are passed to some kind of function
07:13 - so I'm going to show you here an example
07:15 - of how we could Implement a guard Clause
07:17 - to make this function a bit more
07:19 - readable now obviously this is quite
07:21 - simple it's only 11 lines of code if you
07:23 - write something like this no one is
07:24 - going to scream at you and yell at you
07:26 - but there is a way to just make this a
07:27 - little bit better and it will kind of
07:29 - show your experience and the fact that
07:31 - you're used to do doing this type of
07:32 - thing so here we have calculate
07:34 - discounted price we take in a price we
07:36 - take in a discount now we just say the
07:39 - discounted price is equal to zero and
07:40 - then notice that the first thing we do
07:42 - here with our if statement check is we
07:44 - check if the discount is valid for us to
07:46 - actually perform the computation that
07:48 - we're about to do so essentially the
07:50 - discount has to be greater than zero and
07:52 - less than or equal to 100 for us to be
07:54 - able to calculate the discounted price
07:56 - using the formula that we have then
07:59 - after we see this we say okay well if
08:01 - the discount wasn't valid and if the
08:03 - discount is less than zero we're just
08:05 - going to say the discounted price is
08:06 - equal to whatever the price is
08:08 - otherwise we're going to raise a value
08:10 - error because if the discount was not
08:12 - less than or equal to zero and the
08:14 - discount was not greater than zero and
08:16 - less than or equal to one hundred then
08:18 - it is in valid and actually now that I
08:21 - see this this should be just a double
08:22 - equal sign sorry not then a less than or
08:24 - equal to
08:25 - all right so again this is fine there's
08:27 - a way that we can make this a bit
08:29 - cleaner let's have a look at how to do
08:31 - that all right so we say Define
08:33 - calculate the scatter price again same
08:35 - function signature and now what we're
08:37 - doing is you're checking if the discount
08:39 - is invalid so notice we've kind of
08:41 - flipped the operation here over here we
08:43 - checked if the discount was valid if it
08:45 - was we made this calculation and then we
08:47 - continued on with the rest of our elif
08:49 - and else checks here the first thing
08:52 - we're doing is implementing a guard
08:53 - Clause where we're saying we're not
08:55 - going to continue and perform any other
08:57 - logic unless the discount you pass to us
08:59 - is valid so if the discount is less than
09:01 - zero or the discount is greater than or
09:03 - equal to 100 we immediately raise our
09:05 - value error next we do one other check
09:08 - that we have to have this is kind of
09:10 - another guard Clause where we're saying
09:11 - if the discount is equal to zero well we
09:13 - don't want to perform this logic so
09:15 - we're just going to return whatever the
09:16 - price is lastly we return the price
09:19 - multiplied by one minus the discount
09:21 - over 100 which is just our formula for
09:24 - calculating the discount
09:25 - so hopefully you can see kind of the
09:27 - difference here I'll split this on the
09:29 - screen
09:29 - and let's have a look at these two
09:31 - functions side by side notice that this
09:34 - one is a little bit easier to read we
09:36 - start with our two different guard
09:37 - Clauses where we're immediately exiting
09:39 - the function if either of these things
09:40 - occur and then if our discount is valid
09:43 - for the calculation we simply return
09:45 - whatever it is this makes it a little
09:47 - bit easier for us to see where the core
09:49 - logic is happening in the function which
09:51 - is in this return statement and to know
09:53 - the conditions that we need to pass for
09:55 - us to hit this main piece of logic
09:57 - hopefully that's clear now let's move on
09:59 - to the next tip alright so moving on to
10:01 - tip number three I have to reduce
10:03 - nesting and to group conditions together
10:05 - so let's have a look at kind of the
10:07 - junior code example here which might be
10:09 - something like this so we have a few
10:11 - variables here age city income education
10:13 - level imagine these are Dynamic
10:15 - obviously for the example I'm just
10:16 - making them kind of static constant
10:18 - values and you can see that what we're
10:20 - trying to check is if someone is
10:21 - eligible to enter a program so the first
10:24 - thing we check is their age if they're
10:25 - greater than or equal to 18 then we move
10:27 - on to the next check where we see if
10:29 - they're from New York or Los Angeles
10:30 - then we need to see if their income is
10:33 - between forty thousand and one hundred
10:34 - thousand then we need to check if their
10:36 - education level is one of these two then
10:39 - we go here and we print that they are
10:41 - eligible for the program otherwise we
10:43 - have all of these different else
10:44 - statements and you can see that it gets
10:46 - a bit confusing to determine which ones
10:48 - are associated with which
10:50 - so here this one is associated with the
10:52 - education if statement this one here is
10:54 - associated with income this one here is
10:56 - associated with City but notice that I
10:58 - kind of have to trace the little line in
11:00 - my editor and again it's not the
11:02 - cleanest and easiest way for me to read
11:04 - this also in a language like python it
11:06 - becomes easy for me to mess up the
11:08 - indentation level if I wanted to add
11:10 - more logic into any of these different
11:12 - statements so this is not an ideal way
11:14 - to write this code instead we should do
11:17 - something like the following notice
11:19 - right away that I have pretty much no
11:22 - nesting the only nested level I have
11:23 - here is this one indentation for my kind
11:26 - of flat if statement block which is
11:28 - always what you should try to achieve
11:30 - when you're writing any complicated
11:31 - logic like this so when I come here you
11:35 - can see that we have the same variables
11:36 - but notice that what I've done is I've
11:38 - actually created very descriptive
11:40 - Boolean variables for each of my
11:43 - conditions so this is kind of what I was
11:44 - referring to when I said group
11:46 - conditions so I have eligible age and
11:48 - then I have the Boolean which is age
11:51 - greater than or equal to 18 or the
11:52 - condition age greater than or equal to
11:54 - 18. so rather than coming here and
11:56 - saying if age is greater than or equal
11:57 - to 18 I now have this and this is what
12:00 - I'll check to see if it's true or false
12:02 - it makes it very clean and easy for me
12:04 - to read what the condition is next
12:06 - eligible City again it's the same
12:08 - condition but I've kind of grouped this
12:10 - into a Boolean variable that makes it
12:12 - very readable for me to see what it is
12:14 - that I'm checking same with eligible
12:16 - income put that in a variable and then
12:19 - eligible education again I've put this
12:21 - in a variable and kind of grouped this
12:22 - compound condition into one main
12:25 - condition that I'm going to check in my
12:27 - if statement so now similar to what
12:29 - we've done with the guard Clauses I'm
12:30 - going to start by checking if someone is
12:32 - not eligible and you'll see this pattern
12:34 - quite often where you're going to check
12:36 - all of the things that shouldn't be the
12:38 - case and then if none of those are true
12:40 - then you have a valid situation right
12:42 - where you are eligible for the program
12:44 - so I say if not eligible age then print
12:46 - it's not eligible if not eligible City
12:48 - if not eligible income if not eligible
12:50 - education very clean very easy to
12:53 - understand one level I don't have a ton
12:55 - of nesting and then I have you are
12:57 - eligible for the program at the end so
12:59 - if none of these checks are true that
13:02 - means that we are eligible
13:03 - and we can print that out now you could
13:05 - even go one step further here and you
13:07 - could actually make a variable eligible
13:09 - is equal to and then you could combine
13:12 - all of these so take this and
13:18 - and take this
13:21 - and let's say now you didn't actually
13:22 - care if they weren't eligible you would
13:24 - just have one single if statement and
13:26 - you would say if
13:27 - eligible then we're going to print that
13:29 - you are eligible for the program so
13:31 - rather having to rather than having to
13:32 - write all these sorry in one line and
13:34 - making it a little bit messy and hard to
13:36 - read you put this into one single
13:38 - variable and now again it's very clear
13:39 - for you to see what's actually happening
13:41 - and what you're checking in this if
13:43 - statement so moving on to our next tip
13:45 - this one is super simple but something
13:47 - that I see people make the mistake of
13:49 - all the time and that is to be
13:51 - consistent when I say be consistent that
13:54 - means have a consistent styling have a
13:56 - consistent format and if you do
13:58 - something one way always do it that way
14:00 - I'm not even going to tell you you have
14:02 - to follow the official style guide or
14:04 - you have to do something in a certain
14:05 - way but if you decide to say always have
14:07 - a space after your comments just do that
14:10 - all the time you want to make sure that
14:12 - your code however you're going to write
14:13 - it is in some kind of consistent styling
14:16 - and that it's predictable how you should
14:18 - continue to write the code every
14:20 - organization every code base probably
14:21 - has their own style guide which is the
14:23 - consistency guide really for you to
14:25 - follow along with but even when you're
14:27 - writing Hobby projects or you're on your
14:29 - own get in the habit of picking some
14:31 - kind of style some kind of you know
14:33 - format to go in and just staying
14:35 - consistent with them doesn't have to be
14:37 - perfect but just do the same thing every
14:39 - single time otherwise your code just
14:41 - looks like garbage so to give you an
14:44 - example let's have a look at this one
14:45 - right here you can see that we have
14:47 - defined calculate sum and we're using
14:49 - Pascal case here where we have a capital
14:51 - on the first word a capital on the
14:52 - second word and then we're actually
14:54 - capitalizing our parameters and we have
14:56 - some kind of leading spaces here we
14:58 - don't have a space after the comma it
15:00 - just looks kind of weird right then
15:02 - we're using our capitalized variable
15:04 - names we don't have a space between the
15:06 - pluses that's fine now if you wanted to
15:08 - write coding this way that's okay but
15:10 - make sure you always write it in that
15:12 - way so that it's consistent I wouldn't
15:14 - advise doing it like this but hopefully
15:16 - you get what I'm saying so now we move
15:17 - down to the next function where we have
15:19 - multiply numbers and already our style
15:21 - has completely changed now we're using a
15:23 - camel case style where we don't have a
15:25 - capital on the first word we don't have
15:27 - leading space cases or kind of spaces
15:29 - between our parameters here our
15:31 - parameters are now not capitalized
15:33 - they're lowercase and then here the only
15:35 - thing that's consistent is that we don't
15:36 - have a space between our operator okay
15:39 - continuing we have result one we have a
15:41 - space on each side of our equal sign we
15:43 - have kind of random spaces here when
15:45 - we're actually putting in the parameters
15:47 - or the arguments we have a comment
15:50 - that's kind of glued to the side here
15:52 - doesn't have a space like you'd
15:54 - typically do it like this and then again
15:56 - we get a different style down here where
15:58 - there's now no space between the equal
15:59 - sign then we're printing stuff out we
16:02 - kind of have random spaces popping up
16:03 - here very inconsistent very kind of
16:06 - strange and just like cringy to read for
16:09 - lack of a better word so instead you
16:11 - want to have a consistent style like
16:14 - this here we go so this is actually a
16:16 - more kind of standard python style it
16:19 - it's consistent much easier to read and
16:21 - just immediately looks a lot better
16:23 - notice that we have an underscore now
16:24 - separating our words in our function or
16:26 - our variable names this is actually the
16:29 - correct format for python which is snake
16:31 - case we now have the correct spacing so
16:33 - we have a space after our comma we have
16:35 - lowercase parameter names which is what
16:37 - we should have we have spaces between
16:39 - the return spaces here between our
16:43 - operator and we're doing the same for
16:44 - both of our functions same thing here
16:46 - for our calls same style for our print
16:50 - statement same style and now for our
16:52 - comment we have a space after where
16:54 - we're commenting which is what we're
16:55 - supposed to have and a leading space
16:57 - between the pound sign and the first
16:59 - word or symbol of our comment very
17:02 - straightforward not much more to say
17:04 - there stay consistent all right so
17:06 - moving on to my last tip here this is to
17:08 - check your inputs and to assume
17:09 - whoever's using your code is an idiot
17:12 - now this is a bit blunt but this is the
17:14 - reality of programming you have to
17:16 - assume whoever's going to attempt to use
17:17 - your functions modules whatever it is
17:19 - you're writing is not going to do it
17:21 - properly and you need to give them good
17:23 - error messages and handle situations in
17:26 - which someone could use your code
17:27 - incorrectly so let's have a look at this
17:29 - example you can see that we have really
17:31 - nothing wrong with this code there's not
17:33 - a kind of deep nesting levels it's easy
17:35 - to read I think it's clear what's going
17:37 - on We're looping through our data and
17:39 - we're applying some kind of operation to
17:41 - every single element in our data now
17:43 - that's fine but what happens if we have
17:45 - no data what happens if our data is not
17:48 - a type integer not a type float what
17:51 - happens if our operation is not one of
17:53 - these valid operations hopefully you get
17:55 - where I'm going here there's all kinds
17:56 - of inputs I could pass to this function
17:58 - that would cause some kind of random
18:00 - exception to occur that would make it
18:02 - pretty much impossible for me as someone
18:04 - who's maybe black boxed from this
18:06 - function to be able to actually know
18:08 - what's going wrong so what I want to do
18:10 - instead of just writing it in this naive
18:12 - way where I'm assuming someone's going
18:13 - to pass the correct inputs is I want to
18:15 - write it in a more robust way where I'm
18:17 - actually checking all of the possible
18:19 - edge cases and errors that could occur
18:21 - now this is more verbose there is more
18:23 - code that goes into this but if you're
18:25 - writing some kind of Library function or
18:26 - something that's going to be used in a
18:28 - larger code Base by a lot of people you
18:30 - want to do these types of checks so
18:32 - notice now if I go to my process data
18:34 - function the first things I'm doing are
18:36 - I'm validating my data and I'm
18:38 - validating my operation
18:39 - then I go on to actually perform all of
18:42 - the logic we can talk about this section
18:43 - in a second but if I look at validate
18:46 - data first I'm making sure that my data
18:49 - is a list right so I need that to be a
18:51 - list for this function to actually
18:52 - operate if it's not I'm raising a value
18:54 - error and I'm telling the user what they
18:57 - did wrong data must be a list of numbers
18:59 - next I'm going through every single item
19:02 - in my data and I'm making sure that
19:03 - that's of type int or float so that I
19:06 - can actually perform an arithmetic
19:07 - operation on it without having some kind
19:09 - of error same thing I'm then raising a
19:12 - good error telling the user what the
19:14 - problem is next I have validate
19:17 - operation now again since we're in
19:19 - Python we kind of need to do these
19:20 - checks in a strongly typed language you
19:22 - wouldn't need to do this it'd be
19:23 - enforced for you but notice that I'm
19:25 - listing all of the valid operators and
19:27 - then I'm making sure that all of the
19:29 - operations or sorry the operation that's
19:31 - passed in is in my valid operations if
19:34 - it's not again I'm raising an error
19:37 - telling me that hey this is not one of
19:39 - the valid operators all right continuing
19:42 - here we have process data so we've
19:43 - already actually gone through that and
19:45 - then lastly we have this try accept luck
19:47 - now in our situation we know that this
19:49 - is going to be successful because we're
19:50 - passing valid data but typically if
19:53 - you're calling some kind of function and
19:54 - you're not sure if it's going to succeed
19:56 - or not you might want to wrap this in a
19:58 - try accept block where you're going to
20:00 - listen for a specific error in this case
20:02 - we're listening for the value error if
20:04 - that occurs we're probably going to do
20:05 - something to handle that error this part
20:07 - is not really kind of part of the tip
20:09 - but I just added it in so you could see
20:10 - how we might deal with handling the
20:12 - exception all right so that is my last
20:15 - tip that's all I wanted to show you in
20:17 - this video so this is really not overly
20:18 - complicated this stuff doesn't take
20:20 - years to learn it's really about
20:22 - building the habit of doing all of these
20:24 - individual things every time you write
20:26 - code you might watch a video like this
20:28 - and it might all make sense to you but
20:30 - if you don't actually implement this
20:31 - into your daily coding routine you're
20:33 - not going to see yourself kind of
20:35 - gaining the benefits and the quality
20:37 - code that you'll get from implementing
20:38 - these types of strategies so with that
20:40 - said I'm going to wrap it up here if you
20:42 - guys enjoyed make sure to leave a like
20:43 - subscribe to the channel and I will see
20:45 - you in the next one
20:46 - [Music]