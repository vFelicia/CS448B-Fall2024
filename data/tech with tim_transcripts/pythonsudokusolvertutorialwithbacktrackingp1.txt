00:00 - hey guys and welcome back so in the next
00:02 - few videos what we're going to be doing
00:04 - is using the backtracking algorithm to
00:06 - solve a very common or popular game
00:09 - called Sudoku now this is actually a
00:11 - really fun project and I really
00:12 - personally enjoyed writing this before
00:14 - doing this video but what I'm gonna be
00:16 - doing kind of in this I don't know how
00:17 - many videos it's gonna take maybe two or
00:19 - three is first explaining what
00:21 - backtracking is how that works and why
00:23 - it's a very powerful algorithm for a
00:25 - problem like this and then moving on to
00:28 - actually writing the code and getting
00:30 - all of the everything kind of working
00:32 - now the code is not super complicated
00:35 - for this an algorithm is not that
00:37 - difficult either a lot of people here
00:38 - like backtracking and they think it's
00:40 - confusing or you have to be a computer
00:42 - science major to understand this it's
00:44 - not that difficult I'm gonna try to
00:46 - break it down for you guys in this video
00:47 - and understand exactly what it does but
00:50 - it's really useful this is a really cool
00:51 - project and it looks great on a resume
00:53 - as well especially if you're a student
00:54 - that you made something cool like this
00:56 - so I'll show you guys my working kind of
00:59 - solver right now so essentially this is
01:01 - the code it's nothing too long just a
01:03 - hundred lines and most of its cosmetic
01:04 - anyways in terms of printing out and
01:06 - like the board and everything so it's
01:07 - not anything too complicated but if I
01:09 - run it you can see this is my starting
01:11 - board looks something like this and we
01:13 - end up with a solve solution that is
01:15 - this now you could possibly give this a
01:18 - board where there is no solution I just
01:20 - looked one up online and found like this
01:23 - is the correct solution to the board to
01:25 - make sure that I didn't make any
01:26 - mistakes in this video but this how it
01:28 - works happens pretty well instantly and
01:30 - yeah it's a very fast algorithm as well
01:33 - for something like this okay so let's
01:35 - talk about how we would actually
01:38 - approach this problem so essentially
01:40 - we're given a starting board oops I did
01:42 - not mean to do that I guess I had my
01:45 - eraser on we're given a starting board
01:47 - maybe it looks something like this okay
01:48 - what we're attempting to do essentially
01:51 - is find a solution to this board where
01:53 - you know like we have a valid sudoko
01:55 - solution now this board that I drew here
01:57 - is just some random board I don't know
01:58 - if there's actually a valid solution to
02:00 - this but I'm just gonna walk through
02:02 - kind of the steps on how we would go
02:03 - about doing that using the backtracking
02:06 - algorithm now before I go into that I
02:08 - quickly want to talk about something
02:09 - which is called the naive algorithm so I
02:12 - believe naive is
02:13 - felt like that but essentially what this
02:16 - is is the weight that you would kind of
02:18 - approach this if you didn't know about
02:20 - backtracking so the common way that you
02:23 - might want to do this and obviously it's
02:25 - gonna be very slow is just try every
02:27 - single possible combination of numbers
02:29 - so what I mean by that is just try like
02:30 - one two three four five and keep doing
02:34 - that for every single square and
02:36 - generate every single possible
02:38 - combination of numbers for the board
02:39 - until eventually your solution just
02:42 - works now this would work this algorithm
02:46 - works fine in fact the this way of doing
02:49 - things you can do for almost any kind of
02:51 - solution the issue with this is it is
02:54 - slow and you can think of it as like
02:56 - each square has nine possibilities okay
02:59 - every single square that we have has
03:01 - nine possibilities now I mean you have
03:03 - to count how many squares were given to
03:05 - determine how many to subtract but
03:07 - essentially if you have what a nine by
03:08 - nine grid that's 81 squares with nine
03:12 - possibilities so I believe we end up
03:16 - getting something like nine to the 81
03:19 - different possible combinations of
03:22 - solutions now I don't know if you guys
03:24 - know anything about Exponential's but 9
03:26 - to the 81 is an absolutely massive
03:28 - number in fact that's probably in like
03:30 - the trillions or something so think
03:32 - about how many operations your computer
03:33 - would have to do to generate that like
03:36 - kind of subset of solutions or that set
03:38 - of solutions to this board and then it
03:40 - has to be validating all of those as
03:42 - well so this is really not a good way to
03:44 - approach this now I don't want it like I
03:47 - don't know if this math is correct so
03:48 - don't hold me to that but even if it's
03:49 - not and even 9 - like the 9 is still a
03:52 - massive number right you get the point
03:54 - in that doing that is just not efficient
03:56 - at all so what we want to do is use
03:59 - something called backtracking now the
04:00 - way that backtracking works is very
04:01 - simple and all you do essentially is
04:03 - it's similar to the naive algorithm
04:05 - except what you're gonna do is you're
04:07 - gonna pick some kind of empty square so
04:09 - step one pick I should have left myself
04:12 - more room on the side here pick empty ok
04:15 - so what you're gonna do is you gonna
04:16 - pick some kind of empty square so we'll
04:18 - start off by doing and I'm just gonna go
04:19 - from left and down so like like that ok
04:22 - is just pick this square that's our
04:24 - first step pick some kind of empty
04:26 - square and now
04:26 - we're gonna do is try all numbers okay
04:31 - oops don't know what happened there try
04:35 - all numbers and excuse my messy
04:36 - handwriting
04:37 - so essentially what we'll do is we'll
04:38 - start by trying one and then we'll try
04:40 - two and then we'll try three and so on
04:42 - so what we're gonna do though this is a
04:43 - bit different is as soon as we find a
04:46 - number that fits in this square that
04:48 - works then we'll move to the next empty
04:51 - square so try all numbers find one that
04:59 - works okay
05:01 - just yeah I know you probably can't even
05:03 - read that because I didn't really mind
05:05 - up myself enough space to do this but
05:06 - let's try this case so the what we'll do
05:08 - is we'll go we're gonna try one we'll
05:10 - look in this row and we're gonna
05:12 - validate and see if one works does one
05:14 - work well no it doesn't cuz ones right
05:16 - here I'm assuming you guys know a place
05:17 - to do essentially you can't have
05:19 - anything that's the same number in the
05:20 - same row same column or in the same kind
05:24 - of little grid box like this okay so one
05:26 - does not work so what we'll do well
05:28 - we're trying all numbers we didn't
05:29 - haven't found one that works yet so now
05:31 - we'll try to does to work well is to in
05:34 - in the row no it's not is to in the
05:36 - column notes not is it in the Box no
05:38 - it's not so two works so we found one
05:41 - that works and now we will repeat this
05:44 - so what we'll do next is we'll say okay
05:47 - so we'll go to the next empty square so
05:49 - we're gonna go to this step here and
05:51 - we're gonna try one does one work no it
05:53 - doesn't we'll try to does to work no it
05:55 - doesn't does three no it doesn't does
05:57 - four no it doesn't does five yes it does
06:00 - so we found nine four two five three one
06:03 - now I know so far you're thinking well
06:05 - maybe this is this is the same as just
06:07 - trying every single possible solution
06:08 - you're just essentially trying a reading
06:10 - you're correct but there's another step
06:11 - we're gonna add in a second that you
06:13 - will see so what we'll do now is we go
06:17 - to five okay um and now we're go to the
06:20 - next empty square because we're
06:21 - repeating this process and let's try
06:23 - okay so let's try one does one work no
06:25 - it doesn't does - no a doesn't three no
06:28 - four
06:29 - no doesn't five no six the six work I
06:34 - believe six does work yes it does okay
06:36 - so six works so now we have these this
06:38 - is our current solution - five
06:40 - and obviously everything else that's in
06:42 - here alright so next square let's try
06:44 - this again don't worry I'm gonna get to
06:45 - the backtracking part in just a second
06:47 - this is important okay so one no so
06:49 - eventually we end up and we get eight as
06:51 - our possible answer that's the only
06:53 - thing that can go in this row right but
06:54 - look eight it's right here so that's not
06:58 - a valid solution so what do we do now
07:01 - well what we do now is we backtrack okay
07:05 - so as soon as we get to a point where
07:07 - the solution cannot be completed because
07:10 - eight being here is just wrong we can't
07:12 - have that in our solution what we do is
07:14 - we backtrack now these are not really
07:16 - the perfectly correct steps that I'm
07:18 - writing here but I just want you to get
07:19 - an idea of what we do so when we get to
07:21 - eight and we find that this cannot
07:23 - there's no possible position for this
07:25 - square we can't use one we can't like
07:27 - there's nothing that works here based on
07:29 - what we currently have right well what
07:31 - we need to do is we need to backtrack
07:32 - and what that means is we're going to
07:34 - erase eight and we're gonna go back to
07:36 - the previous step and we're gonna trot
07:38 - we're gonna continue from the previous
07:40 - step so we had tried six right so what
07:42 - we'll do now is we'll try seven does
07:45 - 7:00 work no it doesn't because sevens
07:47 - there will try eight does eight work no
07:49 - it doesn't because eights here and we'll
07:51 - try nine does nine work no it doesn't
07:53 - because nine is here so what we do now
07:56 - is the same thing as before so now we're
07:58 - at the point where we have two five and
07:59 - there's nothing that can go in this
08:01 - square because remember we tried what is
08:04 - it like seven or whatever number or we
08:06 - tried six which was here and then the
08:08 - next position after that didn't work so
08:10 - we know now we after trying seven eight
08:12 - nine that these two squares can't be
08:15 - correct because with these two squares
08:17 - being this we can't get two valid spaces
08:20 - here right so what we need to do now is
08:22 - we need to backtrack again so what we do
08:24 - is we say okay so let's erase nine now
08:26 - we're gonna go back to five and we're
08:28 - gonna try something else
08:28 - so now we'll go to five and we'll try
08:31 - six and we'll see the six work yes it
08:33 - does okay so six works so now we repeat
08:36 - the process again and we go here and
08:38 - eventually what do we end up with well
08:39 - we're gonna end up with does one work no
08:42 - so we end up with like nine or something
08:44 - like that we say that doesn't work so
08:45 - then we backtrack so we go here and now
08:48 - instead of six we try seven to seven
08:51 - work no it doesn't what about eight
08:52 - eight does work okay
08:54 - and then we repeat the process and we
08:55 - keep going until eventually we reach a
08:58 - solution that works so essentially what
09:00 - we're doing is we're kind of completing
09:02 - one square at a time and we're gonna
09:04 - just keep recursively checking to make
09:07 - sure all these solutions work until
09:08 - eventually we reach one that does work
09:10 - so rather than trying to continue a
09:13 - solution that can never possibly work
09:15 - which we do with the naive algorithm
09:17 - we're only gonna continue solutions that
09:19 - currently work and then if they don't
09:22 - work will backtrack to the last step and
09:24 - try something again and that's
09:25 - essentially how the backtracking
09:26 - algorithm works I hope that my
09:28 - illustration gave you a bit of an idea
09:30 - as we go through this and kind of code
09:32 - it hopefully you'll understand it more
09:33 - but this is the basis of backtracking
09:35 - pretty straightforward and I want to
09:37 - again emphasize that this is gonna be a
09:38 - lot faster than trying every single
09:41 - possible combination because if we tried
09:43 - every single combination what we do is
09:45 - simply generate like 9 to the 81
09:48 - different solutions and then just try
09:50 - them all on the board until eventually
09:52 - you find one that works which is really
09:54 - not an efficient way to approach this
09:55 - problem ok so here we are we're at ten
09:58 - minutes let's get started on the code
10:00 - just a basics and then the next video
10:02 - will do most of the actual algorithm
10:04 - we'll see if we can put this into two
10:05 - videos so um this obviously my working
10:09 - file but what I'm gonna do actually just
10:10 - copy in this board and just note that
10:12 - all of the code that I write will be on
10:14 - my website there'll be a link in the
10:15 - description and yeah if you want to
10:17 - download anything anything from there
10:19 - feel free if you don't want to write
10:20 - this all out with me but I do recommend
10:21 - you listen because this is really I
10:23 - think it's an interesting algorithm to
10:24 - learn so okay so we have some kind of
10:27 - different steps to our algorithm now
10:30 - let's let's go back to this for one
10:31 - second as we talk about what we're
10:32 - actually gonna need to program so the
10:34 - first thing we need to do is pick some
10:35 - kind of empty square right so we're
10:37 - gonna need a function that does that
10:38 - first given this board in like a 2d
10:41 - array form is what we're gonna do we
10:43 - need to pick some kind of empty square
10:44 - so that's pretty straightforward we'll
10:45 - just loop through and we'll look for
10:46 - someone that's empty or has 0 or
10:48 - something in it okay next is trying all
10:50 - the numbers so we're gonna need a for
10:52 - loop that goes through and for each
10:53 - empty square that we find it's gonna try
10:55 - each number we're gonna have to find if
10:57 - that number is valid so we need some
10:59 - function that's gonna do this that's
11:00 - gonna find if the the number that we put
11:04 - in the square is a valid give in the
11:05 - current board right and then what we'll
11:07 - do is if we find
11:08 - it's valid we repeat this kind of
11:10 - process and then we have this
11:11 - backtracking which is like if it's not
11:13 - valid we go back
11:14 - so essentially like say we put like four
11:17 - here and four is not valid well we need
11:19 - to reset this to zero so that's
11:21 - something we'll have to do as well so
11:22 - those are kind of the steps and that's
11:23 - what we're gonna do now in code form
11:26 - well what I want to start by doing is
11:28 - just being able to print out this board
11:31 - so I'm just gonna make a function that
11:33 - says print underscore board now you
11:35 - don't have to do this but it's nice to
11:37 - get a visual representation and given a
11:39 - board which I'm just gonna call Bo we
11:42 - will print this out now to do this I
11:44 - mean it might look a bit complicated
11:46 - it's not that confusing we're gonna say
11:47 - for I in range the length of board okay
11:53 - what we're gonna say now is you're gonna
11:54 - say if I modulus three and I does not
12:00 - equal zero what we're simply gonna do is
12:03 - just print a horizontal line now the
12:05 - reason we're doing this is just because
12:07 - we want to kind of separate our board
12:09 - into like the different sections that
12:11 - you saw like if I if I run solver we're
12:13 - just gonna be printing this essentially
12:15 - when I is what do you call it divisible
12:18 - by three because after every three rows
12:21 - we want to print this and then same
12:23 - thing like that right that makes sense
12:24 - okay so we'll do that now what we're
12:26 - gonna do is going to do another for loop
12:27 - we're gonna say for J in range and we'll
12:30 - say the length of bo 0 which essentially
12:33 - is gonna get the length of our what do
12:36 - you our roast right because we have a
12:37 - nine by nine grid and it's set up in
12:39 - kind of this form then what we'll do is
12:41 - what we need to print all the numbers we
12:44 - also need to print those horizontal
12:45 - lines so the first thing we're gonna
12:46 - check is we're gonna say if we call it J
12:49 - modulus three equals equals zero and J
12:54 - does not equal zero the reason we're
12:56 - doing this is so that we don't get a
12:58 - line printed on the left side
12:59 - immediately because well if it's the
13:02 - first thing in the row or like the 0th
13:06 - column then we would end up printing
13:09 - something because zero modulus three
13:11 - equals zero so we just gotta check to
13:12 - make sure it's not zero what we'll do is
13:14 - we'll simply print woody coats this so
13:19 - like this will up thing and we're going
13:21 - to say end
13:22 - equals this now what this does just
13:24 - means it doesn't print a backslash n
13:26 - which means you don't go to the next
13:28 - line which is what we want when we're
13:30 - printing out each column or sorry each
13:33 - row so now what we'll do I believe is
13:36 - will say if J equals equals eight then
13:42 - we're simply going to print the number
13:45 - so which is gonna be Bo I J and like
13:51 - that
13:52 - now else what we'll do is we'll print zo
13:56 - I J plus a space now I just need to put
14:03 - this in a string as well and I'll talk
14:05 - about this in a second okay so I think I
14:07 - might have done this correctly I just
14:09 - have to check here and yes that looks
14:12 - great okay so essentially what this is
14:13 - gonna do and I believe we're actually
14:14 - done now is we're just gonna check so
14:17 - every time we're on the third row we'll
14:18 - print a horizontal line then what we're
14:20 - gonna do is for every single what do you
14:23 - call it like position in the row is
14:24 - we'll check if it's sorry these need to
14:27 - go back one put my bad guys so they're
14:30 - not in this if statement will check if
14:32 - it is the third kind of element or like
14:35 - a multiple of three and then we'll draw
14:37 - that horizontal line but we'll just say
14:39 - end is this so that when we draw the
14:41 - next position it's after that and then
14:44 - what we're doing is we're checking if
14:45 - we're at the last position and then
14:47 - we're gonna make sure that we actually
14:48 - do that backslash and to go back to the
14:50 - next line so let's say she just try
14:52 - print board and make sure this works I'm
14:55 - gonna give it a board and let's run
14:57 - working and see if this works
14:59 - okay so we're running into a bit of an
15:01 - issue here let me check oh I forgot to
15:04 - do this we have to just sir and equals
15:06 - this so after you eat print this just to
15:09 - end equals this which just means
15:10 - essentially stay on the same line so
15:12 - when we keep printing things okay so
15:13 - let's run this now uh and okay that's
15:16 - alright we're still running into an
15:17 - issue okay so essentially I forgot to do
15:21 - the I modules three equals equals zero
15:22 - let's add that in my mistake guys and
15:26 - then we might have to do the same for J
15:27 - actually I think it'll be okay so let's
15:29 - try this all right there we go so this
15:32 - now is is what I wanted if we want to
15:34 - get rid of these horizontal
15:35 - on the left side I mean it doesn't
15:37 - really matter to me then we can just do
15:38 - and J does not equal zero which I'm
15:41 - pretty sure I had before but anyways
15:42 - let's run this now and there we go we
15:45 - get the Sudoku board okay so my mistake
15:47 - on that guy's but that's how we print it
15:48 - out and just get a nice visual output
15:50 - for that okay so now we've done print
15:52 - board let's do one more function and
15:55 - then I'll move on to the next video
15:56 - probably insert doing more the complex
15:58 - stuff
15:58 - so let's write the first function that
16:00 - we're gonna need which is gonna be find
16:02 - empty so remember what this is simply
16:04 - gonna do is given a board just gonna
16:06 - find some kind of empty square now we
16:08 - need to just return the position of that
16:10 - square because that's the position we're
16:11 - gonna try different elements in right so
16:13 - what we'll do to find this is simply
16:15 - just loop through the board and if we
16:17 - find a position that is empty and I
16:19 - denote empty by zero you could use a
16:21 - blank space you use whatever you want
16:23 - then we'll just return that position to
16:25 - wherever we're calling from so in this
16:27 - case we'll just say for I in range the
16:31 - length of Bo and we'll say for J and
16:34 - range the length of B of zero which just
16:38 - means the length of each row then what
16:40 - we're gonna do is simply check if that
16:42 - position is zero so what we'll do to do
16:44 - that is we'll say if Bo IJ equals equals
16:49 - zero return and we'll just return a
16:51 - tuple that is the row and the column now
16:56 - we'll just denote that by this because
16:57 - usually return column then rail like XY
16:59 - but we're gonna return Y X so just make
17:02 - sure that we remember that by just
17:03 - adding a little comment there okay so
17:05 - that's all I'm gonna do for this video
17:07 - in the next video we'll finish this all
17:09 - up we're gonna write the whole algorithm
17:10 - we'll do a bunch of tests and talk about
17:12 - why this algorithm is so efficient so if
17:14 - you guys enjoy the video please make
17:15 - sure you leave a like and subscribe and
17:16 - I will see you again in the next one
17:19 - [Music]