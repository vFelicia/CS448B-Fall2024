00:06 - hey guys and welcome back to their
00:09 - multi-threading tutorial with Python so
00:11 - in this video we're gonna be talking
00:12 - about synchronizing threads and using
00:14 - something called locking threads and
00:16 - essentially what that means is allowing
00:18 - our threads to wait for another thread
00:20 - to finish before they go and what I mean
00:23 - by that is in the last video we saw that
00:25 - when one thread was waiting or was
00:27 - pausing the other thread would
00:29 - automatically run and then when mountian
00:31 - pause the next one would go but for
00:32 - example if the first thread ran it
00:34 - waited one second but the next thread
00:36 - didn't wait at all it would just
00:38 - continue to run that thread until it
00:40 - finished right so maybe there's some
00:41 - instances where we need to finish one
00:43 - thread before we can move on to another
00:45 - thread and I'm gonna show you an example
00:47 - of that right now so you guys see where
00:49 - this might be useful so essentially
00:51 - let's think of an example like this okay
00:54 - so we're thinking about kind of like a
00:55 - payment system a check out like a cash
00:58 - online okay so you have our main
01:01 - checkout which is right here and there's
01:03 - kind of three main functions of the
01:04 - checkout so they've selected their item
01:05 - the first thing we need to do is we need
01:07 - to process payment okay the next thing
01:10 - we need to do is send some kind of
01:11 - confirmation email to that client or to
01:14 - that user and just say this is your
01:15 - shipping information let's say they
01:17 - bought like a t-shirt or something and
01:19 - say thank you for shopping with us right
01:20 - and then the next thing that we have to
01:22 - do is we have to redirect them back to
01:24 - the either the original web site and say
01:25 - like purchase more stuff or Salo or say
01:28 - thank you so essentially this I'm just
01:30 - saying load Thank You page as an example
01:31 - but like load another web page okay
01:34 - these are the three things we need to do
01:35 - so these would all be in their own
01:37 - threads okay this is what we're gonna do
01:39 - this multi-threaded you could do this
01:40 - single thread but we're gonna do this
01:42 - multi-threaded the way so what we need
01:45 - to do right is well processing payment
01:47 - is gonna take a few seconds right let's
01:49 - say this takes like five seconds drunk
01:52 - it's that's a five and that's an S I
01:53 - know you can probably not can tell
01:55 - sending a confirmation email let's say
01:57 - this takes like 10 seconds okay
01:59 - I don't know how long it actually takes
02:00 - but to like connect to the server and
02:01 - send it and let's say loading this Thank
02:03 - You page it takes like 3 seconds ok so 5
02:06 - seconds 10 seconds 3 seconds now let's
02:08 - think well we can't really send them a
02:10 - confirmation email until this pain
02:13 - in process so until they validate like
02:15 - the visa or whatever the card is right
02:17 - we can't really do any of these other
02:19 - threads until that is complete because
02:21 - well if it doesn't work that we have to
02:23 - tell them something else right
02:24 - so this needs to happen before we can do
02:27 - one of these too that's just important
02:29 - to understand but once this happens and
02:31 - we process the payment sending this
02:33 - confirmation email might take a long
02:34 - time to be able to connect to the server
02:36 - to actually send that email out think
02:39 - about it you could probably take a few
02:40 - seconds to do so rather than you know
02:43 - waiting just to connect to the server
02:44 - sending the confirmation email and then
02:46 - loading the thank-you page which would
02:48 - take us 10 seconds to send the
02:50 - confirmation email and then load the
02:51 - thank-you page let's load the thank-you
02:53 - page in the background in its own thread
02:54 - while this sending confirmation email is
02:57 - waiting so waiting to connect to the
02:59 - server or something like that so
03:00 - essentially the user is able to see this
03:02 - Thank You page before the email is sent
03:04 - or maybe they see it around a similar
03:06 - time and essentially the reason we would
03:08 - do this is because I don't sure if you
03:09 - guys actually know but when you try to
03:11 - load a page on Google most users
03:13 - actually click off of the page or click
03:15 - exit on the tab if if it takes more than
03:18 - like two seconds to load the page I
03:19 - don't know the exact number but it's
03:20 - very short and like 50% of people will
03:23 - exit out of the tab if the web page
03:26 - doesn't load in a certain amount of time
03:27 - it might be like five seconds or
03:28 - something but here right it's sending
03:30 - confirmation email is gonna take 10
03:31 - seconds then they might think
03:33 - something's wrong and they might refresh
03:34 - the page and they may click eggs and not
03:35 - my like that could possibly mess up our
03:38 - program or it would just be like you
03:39 - don't want the user to leave the website
03:41 - you want them to maybe continue shopping
03:42 - or something like that right so these
03:44 - are our tasks now right now we don't
03:46 - really have a way of doing this we could
03:48 - set up three threads we could run them
03:49 - but what would happen is if this waited
03:51 - for a second - I don't know do something
03:53 - else right like to connect or to
03:55 - validate the card to get receive
03:57 - information from a server then what
03:59 - would happen is this would start sending
04:00 - automatically and then if that waited
04:02 - this would happen right and we don't
04:04 - want that to happen so what we need to
04:05 - do is essentially lock a thread so that
04:07 - these only can go after our process
04:09 - payment is done so that's what we're
04:11 - gonna do now and it's very easy to do
04:12 - this ok so let me put this little
04:15 - drawing tab away so that's just a real
04:16 - life example because I want you to get
04:18 - see when you would actually use this
04:19 - because you might think it's kind of
04:20 - useless what I'm gonna do is I'm gonna
04:22 - set up a locking object in threading and
04:25 - the way we do that is I'm just going to
04:26 - variable this is again the same code as
04:28 - last time it's all gonna be on my
04:29 - website I'm going to say threadlock is
04:31 - gonna equal threading dot lock okay and
04:34 - this is just kind of a new object let me
04:36 - just make sure this is correct yeah that
04:37 - is correct and all I'm gonna do is in
04:40 - this run here so when we run the thread
04:42 - I'm going to lock the thread and then
04:45 - release it once it's finished and I'll
04:47 - show you how this works I'm gonna say
04:48 - thread lock which is gonna be a global
04:49 - variable dot acquire which essentially
04:53 - means lock the thread and don't let any
04:56 - other thread run unless this thread
04:58 - finishes and then what this does is we
05:01 - say thread lock dot release and what
05:05 - this does is release the lock or release
05:07 - the lock on the thread so that as soon
05:09 - as this function is done happening we
05:12 - release the lock which allows another
05:15 - thread to start running so notice how
05:17 - we're delaying some time in the last
05:19 - code we did it went like one two one two
05:22 - one two right if you haven't seen that
05:23 - video I recommend you watch that but
05:25 - here you're gonna see what happens when
05:26 - I run the program and how the the
05:29 - locking actually works okay so let's do
05:31 - this so thread 1 thread 1 thread 1 and
05:34 - it's gonna go and finish thread 1 and
05:36 - only once it's finished thread 1 it'll
05:38 - do thread 2 even though in reality
05:41 - before right we had to go one two one
05:43 - two one two one two and that's how it
05:45 - should work but since we're locking it
05:46 - that means we can't do any other thread
05:49 - until this one's finished okay so now
05:51 - what I'm gonna do is I'm gonna simulate
05:52 - that example that we just kind of drew
05:55 - out and created using a third thread so
05:58 - what I'm gonna do actually though is
05:59 - sorry I commented these out cuz I was
06:01 - testing something but we'll leave those
06:02 - like that I'm gonna copy this thread
06:04 - class and all I'm gonna do is
06:05 - essentially just make it called my
06:07 - thread two and I'm just gonna change the
06:10 - location of this release so I'm just
06:12 - gonna bring thread lock release I'm
06:14 - gonna put it up here so essentially what
06:16 - happens in here is we acquire the lock
06:18 - which means that we're we're gonna lock
06:20 - the thread but we're also gonna see if
06:22 - any other thread is locked before we
06:24 - like continue to do the next step that's
06:26 - that's what this is doing as well and
06:28 - then after we do that we're just
06:30 - immediately gonna release it the reason
06:32 - we need this here is because if we don't
06:34 - have this release it's gonna lock the
06:36 - thread and never unlock it so it's like
06:38 - what we're kind of doing
06:39 - here is we're checking if any other
06:40 - thread is locked if it is then we're
06:42 - gonna wait before we continue moving in
06:44 - this run function otherwise then we'll
06:47 - lock the thread instantly release it do
06:50 - this and then you'll you'll see how this
06:51 - works so what I'm gonna do now is we're
06:53 - gonna create a third thread so we can
06:54 - say thread three equals my thread two
06:58 - I'm gonna change thread two to be my
06:59 - thread two as well I'm gonna give it ID
07:01 - three I'm gonna call this I'm actually
07:04 - loading page I'm gonna change the names
07:07 - of these to make some more sense I'm
07:09 - gonna change thread to sew the thread
07:11 - two we'll call this sending email and
07:15 - for thread one will say payment again
07:18 - and I'll actually make these the times
07:20 - that I said so let's say process payment
07:21 - is five sending email takes 10 seconds
07:23 - and loading the page takes three now all
07:26 - I do is I'll start these threads again
07:27 - so say thread 3 dot start and then at
07:31 - the end here thread 3 join and let's
07:34 - let's see if I made any mistakes or not
07:35 - but I think with that we should actually
07:38 - just be exactly simulating the situation
07:40 - that I kind of said you guys so let's
07:42 - run this now and let's see so starting
07:45 - payment case we're doing payment payment
07:47 - payment let's make this full screen
07:49 - exiting payment ok now we're sending
07:51 - email loading page sending email loading
07:53 - page exiting loading page and then
07:55 - sending the email right so when we exit
07:57 - loading page technically loading page
07:58 - will still be like up on the screen but
08:00 - we're just done loading it so
08:01 - essentially since this sending email was
08:03 - taking like a few seconds to send it was
08:06 - loading the page as well whenever it
08:07 - broke or whenever it stopped working so
08:09 - now the page is open here and the email
08:12 - is still sending which means that we've
08:14 - loaded the page faster to our user so
08:16 - we've got more users to stay on our
08:17 - website rather than I'm having to wait
08:19 - like 10 or 13 seconds to load that page
08:22 - right which is a long amount of time
08:23 - think about waiting 15 seconds 13
08:26 - seconds for a page to load you'd
08:27 - probably think something was wrong so
08:29 - essentially that is kind of it on how
08:31 - we'd lock threads very simply just got
08:33 - to use this acquire and release if
08:34 - you're kind of confused on how these
08:35 - work I recommend you just play around
08:37 - with them and if you want to create more
08:39 - threads that use different functions I
08:41 - recommend you do that as well with that
08:42 - being said follow my Twitter join my
08:44 - discord and obviously subscribe to the
08:46 - channel if you're not and I will see you
08:47 - again in the next video
08:51 - [Music]