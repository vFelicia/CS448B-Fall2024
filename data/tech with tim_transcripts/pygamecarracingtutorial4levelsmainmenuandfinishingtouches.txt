00:02 - [Music]
00:08 - hello everybody and welcome to video 4
00:11 - in this pie game tutorial series in this
00:14 - video i'm going to be adding the
00:15 - finishing touches to this game making it
00:17 - a fully functioning game we have now
00:19 - implemented all of the physics and the
00:21 - logic to allow the players to move but
00:24 - we need something that tells us if we
00:26 - won if we lost well level we're on all
00:28 - of that kind of stuff so that is what we
00:30 - will do now before i go any further
00:32 - though if you have made it this far give
00:34 - yourself a pat on the back and go leave
00:36 - a comment let me know what you've
00:37 - thought of the series so far any
00:39 - feedback positive or negative is more
00:42 - than appreciated all right let's
00:43 - continue
00:44 - and let's get into this so we need to
00:47 - know levels that's kind of the first
00:49 - thing we need here the reason we need
00:50 - levels is because the computer is going
00:52 - to start off very slow and then it's
00:54 - going to get faster and faster and it's
00:55 - going to determine its speed by the
00:58 - level so what i'm going to do is make a
01:00 - class here
01:01 - and we're going to call this class game
01:03 - info
01:04 - now this is going to be responsible for
01:05 - exactly what it says the information
01:07 - about the game you're going to see why
01:09 - it's beneficial to do it in this way but
01:11 - rather than creating like 20 variables
01:13 - to keep track of all the stuff that we
01:15 - want we'll just do it in this class and
01:17 - then it makes our code very very
01:18 - readable
01:19 - so i'm just going to say levels
01:21 - is equal to 10. so it'll be a constant
01:23 - we're going to have 10 levels in this
01:24 - game if you wanted more well then you
01:26 - can increment this then i'm going to say
01:29 - define init
01:31 - under score underscore
01:32 - and i'm going to say
01:34 - self
01:35 - and then level
01:36 - is equal to 1 this is just indicating
01:38 - that we're starting at level one okay
01:41 - then we're going to say self.level is
01:44 - equal to level we're going to say
01:45 - self.started is equal to false
01:48 - indicating whether or not the current
01:49 - level has started we're going to say
01:51 - self.level
01:53 - underscore start
01:54 - underscore time
01:56 - is equal to none the reason that we're
01:58 - doing this is actually we'll do it at
02:00 - zero sorry
02:01 - is
02:02 - because we want to know how much time
02:04 - has elapsed in the current level that's
02:06 - something that we're going to do in here
02:07 - okay so now we're going to say define
02:09 - and we're going to implement some
02:11 - methods we're going to say define next
02:13 - level
02:14 - now what this is going to do is say
02:16 - self.level
02:19 - and then plus equals 1 and it's going to
02:23 - say self.started
02:24 - is equal to false because if we're going
02:27 - to the next level then we don't want to
02:28 - start the next level yet we need to wait
02:29 - for the user to do that then we're going
02:31 - to say define and this is going to be
02:34 - reset now inside of reset we're just
02:36 - going to reset everything so we're going
02:37 - to say self.level
02:40 - is equal to 1. we're going to say
02:42 - self.started is equal to false and then
02:45 - self.level start time
02:47 - is equal to 0 as well i think that's all
02:49 - we need to do then we're going to say
02:50 - define game underscore
02:53 - finished
02:54 - we have to spell finished correctly this
02:56 - will take in self and this will simply
02:59 - return
03:00 - self dot level
03:03 - is greater than
03:05 - self dot
03:06 - levels so if the current level is
03:09 - greater than however many levels we have
03:11 - then we have finished the game and then
03:12 - we'll say define
03:15 - and this is going to be start underscore
03:17 - level now all this is going to do
03:20 - is it's going to say self dot started
03:23 - equals true and it's going to say self
03:25 - dot level start time is equal to time
03:28 - dot time
03:30 - so that's why we imported time
03:32 - previously here i'll go back to this so
03:34 - that you can read it but the idea is we
03:35 - want to keep track of when the level
03:37 - started and then we can easily determine
03:39 - how much time has elapsed by checking
03:40 - the current time and subtracting it from
03:43 - this
03:44 - okay and then lastly we're gonna say
03:45 - define
03:46 - get underscore level underscore time
03:50 - self and here we're just gonna say if
03:52 - not self dot started
03:56 - then return zero so if you haven't
03:58 - started the level then no time has
03:59 - elapsed otherwise we will return
04:02 - self.level start time minus time dot
04:05 - time
04:06 - okay i went through that relatively
04:08 - quickly but that is the game info class
04:10 - you can almost see all of it right there
04:13 - pretty straightforward pretty simple but
04:14 - it's just going to make our life easier
04:15 - as we go through this
04:17 - okay so now that we have that what i
04:20 - want to do is kind of make something pop
04:22 - up on the screen when we first start the
04:24 - game
04:25 - that says like press any key to begin
04:28 - level right so every time a new level
04:30 - happens i want to say
04:32 - like press any key on the keyboard to
04:34 - start level that's all i want to do so
04:36 - the way i'm going to do that
04:37 - is i'm going to go right after my draw
04:39 - here i'm actually going to put another
04:41 - while loop now this while loop is going
04:42 - to wait until the level starts and once
04:45 - the level starts it will get out of it
04:47 - and then allow all of this stuff to
04:48 - happen so you won't be able to move the
04:50 - car
04:51 - the computer won't move until we start
04:53 - the level so let me just go down here so
04:55 - i have a reference on my other screen
04:57 - and this is what we're gonna do
05:00 - wow
05:00 - not and then this is gonna be
05:03 - game underscore info
05:06 - dot started now we need to define game
05:08 - info so i'm going to say game
05:10 - underscore info is equal to game info
05:14 - like that
05:15 - and while not game info dot started so
05:17 - we've not started the current level we
05:19 - are going to blitz some text on to the
05:22 - screen so i'm going to say when
05:24 - actually i'm going to do something else
05:26 - which i'm going to describe now so what
05:28 - i want to do is write a function that is
05:30 - capable of writing any text onto the
05:32 - screen directly in the center of the
05:34 - screen it's a very useful function to
05:36 - have so to do this we first need to
05:38 - define what's known as a font so if you
05:40 - want to write text onto the screen in pi
05:42 - game you need a font so what you're
05:43 - going to do is at the top of your
05:45 - program you need to make sure you do
05:46 - this at the very top you can say pygame
05:49 - dot font
05:50 - dot init you know obviously after you
05:53 - import pugging
05:54 - then what i'm going to do is i'm going
05:56 - to actually define a font object this
05:58 - font object is what you can then use to
06:00 - render text with that font so i'm going
06:03 - to say main
06:05 - underscore font
06:06 - is equal to pi game dot font dot sys
06:10 - font not system font just sys font and
06:13 - then inside of here there's a bunch of
06:15 - options but you guys know that i always
06:16 - go with comic sans
06:18 - and then you can put the size and for
06:20 - now i'm going to go with 44. now this is
06:22 - the text size change this obviously to
06:24 - whatever you want 44 is a good size
06:26 - though for like some title text which is
06:28 - what we're going to have
06:29 - okay so now we have our font this will
06:31 - only work if you initialize the font so
06:32 - if you're having an issue just make sure
06:34 - you init the font first and now that we
06:36 - have the font we can use that to render
06:38 - some text so i'm going to go in utils.pi
06:40 - i'm going to make a new function i'm
06:42 - going to say define
06:43 - and then this is going to be blit
06:46 - underscore text underscore center and
06:49 - this is going to take in a window it's
06:51 - going to take in a font and it's going
06:53 - to take in some text all right so inside
06:55 - of here i'm going to say render
06:58 - is equal to font dot render
07:01 - and then we're going to put the text
07:02 - that we want to render
07:04 - the anti-aliasing which is 1
07:07 - and then we're going to put the color
07:08 - which is going to be white so 255 25 235
07:13 - and in fact let's make it
07:16 - let's go with like 200 200 200 just so
07:18 - it's gray because we have white on the
07:20 - screen
07:21 - already actually is this going to give
07:23 - me white i'm not sure what this color is
07:24 - going to be you know what we'll
07:25 - experiment with 200 200 200 and we'll
07:27 - see what that gives us in case you're
07:29 - curious you just put text you want to
07:30 - render you put anti-aliasing just always
07:33 - put one for this i won't really explain
07:35 - it just you always want one here and
07:36 - then you're going to put the color and
07:38 - then you can actually blit this text
07:40 - onto the screen just like an image say
07:42 - wind.lip
07:44 - render
07:45 - and then we need to put the position we
07:46 - want to render this at the top left hand
07:49 - corner by the way that's where you're
07:50 - putting here so what i want to do is i
07:54 - want to render this at the
07:57 - dot get underscore width
08:00 - why that fill all of that in okay that's
08:02 - fine divided by 2 and then this is going
08:05 - to be subtracted by
08:07 - and this is going to be the render dot
08:09 - get underscore width over 2.
08:11 - so what this is doing is let's go to
08:13 - paint and i will show you
08:15 - so let's say
08:17 - we have our window okay
08:19 - we obviously have some width
08:21 - and we have some height and then we have
08:24 - the text that we want to render and i
08:26 - want my text to be here now i need to
08:28 - calculate this position
08:30 - not this this would be easy enough i
08:32 - just take width over 2 i want this so
08:35 - the way you do it is falling
08:36 - this is width over 2 right w over 2. so
08:40 - you subtract from this
08:42 - half
08:43 - of the text width pretty straightforward
08:45 - but if you just subtract
08:46 - half of the text width from half of the
08:49 - screen width you get the top left hand
08:51 - corner position of where the text should
08:53 - be drawn from so that it's going to fill
08:55 - the entire screen and be directly in the
08:57 - center like that now you can just do the
08:59 - exact same thing in the height and well
09:01 - that will give you the coordinate for y
09:04 - that you want this to be at right so we
09:05 - give you it you know around here
09:07 - okay actually it would be probably close
09:09 - to around where i have it right now
09:11 - hopefully that makes sense but that's my
09:13 - quick paint explanation
09:15 - and let's go here win.get underscore
09:17 - height over 2
09:19 - minus
09:21 - get underscore height over 2. okay so it
09:24 - filled that in for me that is great so
09:25 - that's going to render my text on the
09:27 - screen in the middle we're going to use
09:28 - that a few times that's why i wrote that
09:31 - now we want to import that so from utils
09:34 - import blitz
09:36 - text center and then we're going to go
09:39 - down to our
09:41 - where were we our while loop inside of
09:44 - here and we are going to render this so
09:47 - we are going to say blit text center
09:49 - like that and we're going to make an f
09:51 - string only available in python version
09:53 - 3.6 and above by the way i'm going to
09:56 - say press
09:57 - any
09:58 - key to start
10:00 - level and then inside of here i'm going
10:02 - to say
10:04 - gameinfo.level exclamation point okay
10:07 - now that's the text that's actually the
10:08 - last thing that we're going to pass the
10:10 - first thing is win the second thing is
10:12 - our font which is main font and then our
10:15 - text if you're unfamiliar with f strings
10:17 - the way they work is you can embed
10:18 - expressions directly inside of curly
10:20 - braces you just put a lowercase or
10:22 - uppercase f before the string so now
10:24 - whatever the level is we'll say press
10:25 - any key to start level one two three so
10:28 - on and so forth okay now win needs to be
10:30 - capital forgot about that and now that
10:33 - we have blit that text onto the screen
10:36 - what i'm going to do is do an event loop
10:37 - i'm going to say for event in
10:38 - pygame.event.get
10:40 - i'm going to actually copy this
10:42 - seems inefficient to rewrite this but
10:45 - it's simpler than trying to come up with
10:47 - a
10:48 - cleaner way essentially and i'm going to
10:50 - still have this kind of quit clause
10:52 - except instead of run equals false i'm
10:54 - just going to say
10:56 - pygame.quit
10:57 - okay
10:58 - and then here i'm going to say if
11:01 - event dot type equals equals pi game dot
11:05 - key down this means you pressed any key
11:07 - down then what i'm going to do is say
11:10 - game info
11:12 - dot start level so we're going to call
11:15 - that start level method that will start
11:17 - the current level which means this while
11:19 - loop will now exit and then we will go
11:22 - on and well we will have the level now
11:24 - i'm wondering if i'm missing anything i
11:26 - am the one thing i'm missing is i need
11:28 - to manually update this display here so
11:32 - pygame.display.update to ensure i
11:34 - actually show this because we're going
11:35 - to be skipping this draw function
11:38 - hopefully that kind of makes sense but
11:39 - we're drawing everything right and then
11:41 - we have this while loop and this is only
11:43 - going to run if we haven't started the
11:44 - current level so if we haven't started
11:46 - the current level we put this text over
11:48 - top of everything in the middle of the
11:49 - screen and then as soon as they press
11:52 - the key down we're going to exit out of
11:54 - this while loop and then start the game
11:56 - and the current level will start
11:58 - and then if i go here let's just make
12:00 - sure start level
12:02 - looks good inside of this class okay all
12:05 - good
12:06 - so let's run the code and see what we
12:08 - get
12:09 - okay notice says press any key to start
12:11 - level one maybe we want to move it up a
12:13 - tiny bit because it's kind of hard to
12:15 - read when it's over top of the white but
12:16 - for me that's fine press any key and
12:18 - then notice the car starts going and we
12:20 - can start moving
12:22 - all right there you go so that is how we
12:24 - start the current level so we will
12:26 - continue in one second we need to
12:27 - quickly thank the sponsor of this video
12:29 - and this series which is alco expert
12:31 - i'll go expert is the best platform to
12:33 - use from preparing for your software
12:34 - engineering coding interviews they have
12:36 - over 160 coding interview practice
12:38 - questions
12:39 - mock interviews a data structures crash
12:41 - course all kinds of other great features
12:44 - of course i am an instructor on the
12:46 - platform so you know there's going to be
12:47 - some quality content and well with that
12:49 - said you can check them out from the
12:50 - link in the description and use the code
12:52 - tech with tim for a discount on the
12:54 - platform now that we have that i just
12:55 - want some text in the bottom left hand
12:58 - corner displaying the current level
13:00 - displaying your current velocity and
13:01 - displaying the amount of time elapsed in
13:03 - the level which is actually pretty easy
13:05 - to do so inside of the draw function now
13:08 - what i'm going to do is also take in my
13:10 - game info so now i'm going to go inside
13:13 - of draw and i'm going to start rendering
13:15 - some text and drawing some stats onto
13:17 - the screen
13:18 - so let me go to my code here just so
13:20 - that this would be a bit faster for me
13:22 - to code out and i'm going to start by
13:24 - saying that my level text
13:27 - let's go like this level underscore text
13:29 - is equal to and then this is going to be
13:32 - main font
13:33 - dot render and i want this to say level
13:37 - and then game info
13:40 - dot level like that
13:42 - and then i want the anti-aliasing 1 and
13:44 - the color of white 255
13:47 - 255 255
13:49 - okay now i'm going to render my level
13:51 - text so i'm going to say not render so
13:53 - i'm going to display it on the screen
13:54 - window blit
13:56 - level text and then where do i want this
13:59 - i'm just going to tell you the position
14:00 - but you can feel free to to mess with it
14:02 - all you want i'm going to say 10 and
14:05 - then i'm going to say height
14:07 - minus and this is going to be level text
14:09 - dot get
14:11 - underscore height minus 70. this is
14:14 - because we're going to put two other
14:15 - things below this
14:16 - now the reason i'm doing this is so
14:18 - that's dynamic so if i ever decide to
14:20 - change the height of my screen then i
14:22 - don't need to change this right here
14:23 - because it's based on the height of the
14:25 - screen which is height and the height of
14:26 - whatever this text is here so again if i
14:29 - change the height or sorry the size of
14:31 - the text i won't need to modify anything
14:33 - this will just automatically adjust
14:34 - itself and put it in put itself in the
14:36 - bottom left-hand corner
14:38 - okay so i'm just going to copy this now
14:39 - because we're going to do the same thing
14:41 - for velocity and time so i'm going to
14:43 - say time text
14:46 - time text and this will be time text
14:49 - like that the minus here is going to be
14:52 - 40 because we're going to have 30 pixels
14:54 - offset that is something that we
14:55 - manually would have to update but that's
14:57 - fine and then here i'm going to say
15:00 - time colon and it's going to be equal to
15:04 - gameinfo.getleveltime like that
15:07 - okay
15:08 - that looks good to me now let's copy
15:10 - this
15:10 - and we're going to do the same now with
15:12 - our player velocity just so we can see
15:14 - how quick it's going i just figured that
15:15 - would be a cool stat to add so now we're
15:17 - going to say vel
15:18 - and then this actually let's add a
15:21 - second here too let's add an s just so
15:22 - it says seconds but for velocity i'm
15:25 - going to go with
15:28 - this is going to be player car
15:30 - dot velocity
15:32 - and then we'll go with px per second
15:35 - standing for pixels per second just so
15:37 - we have some unit there
15:38 - we'll go with white again now instead of
15:40 - time text this is going to be called vel
15:43 - text so we'll just change these all to
15:45 - be vel so this is going to be vel
15:48 - and then rather than minus 40 we're
15:49 - going to go minus 10. so 70 40 10 the
15:52 - pattern is 30 less every time
15:54 - all right there we go that's it for
15:56 - drawing that text on the screen now
15:58 - let's run the code and let's see what we
16:00 - get
16:01 - uh draw takes four positional arguments
16:03 - but five were given
16:05 - good call i forgot to
16:08 - import my game info or to add this as a
16:10 - parameter so do that and now we should
16:13 - be good remember i passed game info into
16:16 - the draw function here okay let's run
16:18 - the code
16:19 - and notice that now we get level one
16:21 - times zero seconds velocity is zero
16:23 - pixels and when i start this now notice
16:25 - we have our time now that's kind of ugly
16:28 - and it's negative which means i messed
16:30 - something up so we're going to have to
16:31 - fix that in a second but then you can
16:32 - see the velocity gets updated here as
16:34 - well great so that's fine but what i
16:37 - want to do is i want to round first of
16:40 - all the velocity so let's do that
16:43 - let's go to my velocity and let's just
16:45 - round this to one significant digit so
16:48 - round and then comma one
16:50 - and then let's go to our game info class
16:53 - here
16:54 - and let's see where i messed up so i did
16:56 - self.level start time minustime.time the
17:00 - reason this is incorrect is because
17:01 - time.time is going to be after the start
17:04 - time so i need to flip this around and
17:06 - say time dot time
17:08 - minus that and then i will as well round
17:11 - this but i'm just going to round this to
17:14 - zero places so just do a whole number
17:16 - because this is going to give me the
17:17 - displacement in seconds
17:19 - or the difference in seconds okay
17:22 - so let's run this now
17:24 - and let's see what we get and now notice
17:27 - that the velocity is all good and so is
17:30 - the time
17:32 - perfect there you go
17:34 - okay so that's all we need for those
17:36 - stats
17:37 - okay so now that we have that we have
17:39 - the velocity we have the time we have
17:40 - the level showing up what i need to do
17:42 - is make it so that my computer gets
17:44 - faster every time i beat a level
17:48 - so what we need to do is go inside of
17:50 - our computer car here and we need to
17:53 - write a method
17:54 - this is going to allow it to update its
17:56 - speed based on the current level so i'm
17:58 - just going to say define next underscore
18:00 - level
18:01 - and what we will do is say self
18:03 - now when we go to the next level
18:06 - what we need to do is reset this car now
18:09 - we could manually call reset outside but
18:11 - the first thing we'll do is say
18:12 - self.reset
18:14 - like that so that this is going to go to
18:16 - its start position its velocity is going
18:17 - to get updated all of that however after
18:20 - we reset the car we then need to change
18:22 - its velocity
18:24 - based on the level so i'm just going to
18:25 - say level inside of here so i'm going to
18:27 - reset the car i'm going to say self
18:30 - dot bell
18:32 - is equal to and then we'll go with
18:34 - whatever the self.max bell is that was
18:37 - passed plus and then this is going to be
18:41 - level
18:43 - minus 1 multiplied by 0.2 now 0.2 is how
18:47 - much i want to increase the speed of
18:48 - this car every level we could put this
18:50 - in a variable i'm just going to hard
18:52 - code it in for right now you also could
18:54 - change this and make it something like
18:55 - 0.5
18:56 - the one thing to keep in mind is you do
18:58 - not want this car to ever be faster than
19:00 - the player car if it's faster than the
19:01 - player car there's no way the player
19:03 - will win it's just impossible because
19:05 - this car will take assuming you did a
19:07 - good path the best possible like line
19:09 - around the track and so there's no way
19:11 - the human's going to be able to beat it
19:13 - especially because it doesn't have to
19:14 - worry about acceleration it just starts
19:16 - at the maximum speed so you need to make
19:18 - sure that whatever you're incremented
19:20 - here is that that multiplied by the
19:22 - number of levels that you have plus the
19:25 - maximum velocity you start with is not
19:27 - greater than the player's speed you
19:29 - could make it the same but even if you
19:30 - make it the same then the player still
19:32 - can't win so this is fine i'm saying
19:34 - level -1 which means on the very last
19:37 - level i will have 9 multiplied by 0.2 so
19:40 - 1.8 so the speed will be 3.8 so it'll be
19:42 - 0.2 slower than the player
19:45 - hopefully that is good let me just make
19:47 - sure that
19:48 - that all makes sense
19:51 - yes and then the last thing we need to
19:52 - do is say self
19:54 - dot current point is equal to zero
19:56 - although that should really go inside of
19:58 - the reset method
20:00 - so where is reset ah reset was in the
20:03 - abstract class okay so we can leave
20:05 - self.current point here
20:07 - all right
20:08 - that should be good
20:11 - now we just need to see where we should
20:12 - call next level so what i'm going to do
20:15 - now is go to my handle collision
20:18 - handle collision now needs to take game
20:20 - info as well
20:22 - and so when we call handle collision we
20:24 - need to pass game info
20:26 - and now we're going to start kind of
20:27 - working on what happens when the
20:29 - computer wins or when the player wins so
20:32 - if the computer finishes we are going to
20:34 - reset the player card reset the computer
20:36 - card that looks fine
20:37 - okay and now we go here to when the
20:39 - player finishes well if the player
20:41 - finishes then rather than computer
20:42 - car.reset we're just going to say
20:44 - computercar.nextlevel
20:46 - and we're going to pass game info dot
20:48 - level
20:49 - but first we're going to say game info
20:52 - dot and then next level like that so
20:55 - we're going to increment the next level
20:56 - for game info if the player has one
20:59 - we're going to reset the player car and
21:01 - then this will reset the computer car
21:02 - and change its speed for the next level
21:05 - so that should be good now by doing this
21:07 - it means that this will automatically
21:09 - trigger for the next level because the
21:11 - game will now not have been started
21:13 - we'll be waiting for the next level to
21:14 - be
21:15 - okay that's fine the only thing we need
21:17 - to handle now is if the computer wins so
21:19 - if the computer wins we need to put some
21:21 - message on the screen saying hey you
21:23 - know you lost whatever and then we need
21:25 - to reset the game so we'll actually go
21:27 - game info
21:29 - dot reset and before we do that let's
21:32 - just put some text on the screen so
21:34 - let's say blit text center
21:36 - and then this is going to be
21:38 - what do we want to say here
21:41 - you lost exclamation point
21:43 - and we'll do this on the window and
21:44 - we'll pass the main font
21:46 - okay
21:47 - then we need to manually this is going
21:50 - to be capital win like that we need to
21:52 - manually delay the game the reason we
21:54 - need to delay is so that we have time to
21:57 - see this text because what's going to
21:59 - happen is we're going to show you lost
22:01 - we're going to delay for however many
22:02 - seconds you want i'm going to go with 5
22:04 - seconds and then as soon as that delay
22:06 - is done it's going to automatically
22:07 - restart the game for us so i'm going to
22:09 - say
22:10 - hi game
22:12 - dot time
22:14 - and then dot wait
22:16 - and you put milliseconds in here so 5
22:18 - 000 milliseconds is 5 seconds so we're
22:20 - going to do that
22:21 - okay that should be good
22:24 - the only other thing we need to handle
22:26 - is what happens if the player wins the
22:28 - game but we're going to do that here
22:30 - so after we move the player and after we
22:33 - move
22:34 - the computer
22:36 - and after we handle the collision then
22:38 - we're going to say if
22:40 - the game info
22:42 - dot game finished
22:45 - we want to do a very similar thing to
22:46 - what we just did here
22:48 - we want to reset all this stuff
22:51 - so we'll do that
22:52 - and we want to blit text
22:55 - you won the game
22:58 - like that
23:00 - okay so that's actually all we need now
23:03 - i'm going to get rid of this print
23:04 - statement and i believe that we have
23:06 - just finished the game
23:08 - now obviously i'm not that confident
23:10 - because we have not tested it right now
23:12 - but scrolling through everything looks
23:14 - good and i think we've just handled
23:16 - everything that we needed to and i'm
23:18 - also realizing how much code we have
23:19 - here so again a massive props to you
23:21 - guys if you stuck around because this is
23:22 - a lot of code to digest over video
23:25 - all right let's run the file
23:27 - and let's see if we can win a level here
23:29 - okay let's press any key to start
23:31 - and now mine i remember that the
23:33 - guy my computer did i start i'm at a
23:36 - speed of two or do i start them at a
23:37 - higher speed let's see what speed he's
23:38 - at
23:40 - uh yeah it's f4 okay so i need to put my
23:42 - computer car speed to two otherwise i'm
23:44 - gonna have no chance here okay so let's
23:46 - run the code
23:47 - and let's see
23:49 - that's better okay
23:50 - so now
23:52 - let's try to get a win here
23:54 - and we'll see if the levels are working
23:58 - okay look at this driving skill nice
24:01 - nice
24:04 - [Music]
24:13 - all right almost there
24:16 - see
24:17 - if we can finish before the computer i'm
24:19 - hoping so
24:20 - [Music]
24:23 - and there we go okay so level two and it
24:26 - says press any key to start level two
24:28 - okay so let's do level two let's just
24:30 - make sure it goes to level three and
24:32 - then i will kind of fast forward as i
24:34 - get to the final level and we'll make
24:35 - sure that this actually works if the
24:37 - computer wins and if i win okay but
24:40 - let's just get through level two first
24:41 - though to ensure that we're going to get
24:42 - on to the next level
24:46 - okay
24:47 - almost there
24:51 - i forget what the time was on the last
24:52 - one i should have kept track of that
24:53 - then i could have seen if we were going
24:54 - faster this time
25:00 - oops okay it looks like there's an
25:02 - invisible wall there that's
25:04 - i guess that's gonna happen and let's
25:06 - try to get up here and okay press any
25:08 - key to start level three we're on level
25:09 - three so now what i'm gonna do is let
25:10 - the computer win i'll fast forward
25:12 - through that assuming that works then
25:13 - we'll see and make sure that the game
25:16 - actually ends when we hit level 10. all
25:18 - right so here we go home stretch of the
25:20 - computer you can see i haven't really
25:22 - moved until now
25:23 - let's see what happens when the computer
25:26 - wins
25:28 - and
25:29 - nothing okay so that's actually a good
25:31 - thing to run into
25:33 - because oh it says press any key to
25:35 - start level one so i guess it lagged for
25:36 - a second
25:38 - uh okay let's see what the problem was
25:40 - here
25:41 - i'm guessing the problem has to okay
25:43 - this makes sense so what happened was we
25:45 - delayed for five thousand seconds or
25:47 - five thousand milliseconds so five
25:48 - seconds but we forgot to update the
25:50 - display to actually show this message so
25:52 - i have to say pygame.display.update
25:54 - and now this will work i'm not going to
25:56 - test it i know that this will work now
25:58 - and everything will be good because it
25:59 - did actually reset back to level one
26:03 - so with that
26:04 - i believe everything should be working
26:07 - i'm not actually going to go through and
26:08 - test the fact that the player wins
26:10 - works properly i have faith that i've
26:12 - coded this correctly especially because
26:14 - i have the finished code on my other
26:15 - side and these two pieces of code are
26:17 - identical although if for some reason it
26:19 - doesn't work please do let me know i'm
26:21 - sure the error is very easy to fix if
26:23 - there is one although i i doubt there is
26:26 - all right so with that said i'm going to
26:28 - end the video here i just quickly want
26:30 - to thank everyone who got through all of
26:32 - this i hope that you learned something
26:33 - from this i hope my explanations were
26:35 - decent enough for some of this complex
26:37 - code it is difficult to do a video where
26:40 - you know you have about 300 lines of
26:42 - code that's kind of what we ended up
26:43 - having here right
26:44 - tons of code lots of code in different
26:46 - files as well all kinds of classes all
26:49 - kinds of functions we used a lot of
26:50 - different python features so again
26:52 - hopefully you learned a lot and you
26:54 - enjoyed this video if you did make sure
26:57 - you leave a like subscribe to the
26:59 - channel let me know you want to see for
27:00 - future content and i hope to see you in
27:02 - the next youtube video
27:06 - [Music]