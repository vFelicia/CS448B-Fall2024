00:02 - [Music]
00:08 - hello everybody and welcome to the
00:10 - second video in this opencv
00:11 - python tutorial series in this video
00:14 - we're going to be talking about image
00:15 - manipulation
00:16 - how images are actually represented in
00:18 - the computer
00:19 - and just giving you a bunch of
00:21 - information about how images actually
00:23 - work
00:23 - because that's going to be very
00:25 - important for this series it's kind of a
00:26 - prerequisite for the rest of the videos
00:29 - anyways one of the kind of cool things i
00:30 - will show you how to do here is to copy
00:32 - a part of one image to another part of
00:34 - the image
00:35 - so let's take a generic example let's
00:37 - say you had an image where there was
00:39 - like a hockey puck in it or a soccer
00:40 - ball or something
00:41 - you wanted to copy that multiple times
00:43 - well i'll show you how you could do that
00:45 - anyways that is what we're going to do
00:46 - in this video before i dive into that
00:48 - though i will quickly mention that i am
00:50 - following
00:50 - along with opencv documentation for this
00:53 - tutorial
00:54 - so a lot of people ask me you know how
00:55 - do you come up with this stuff like are
00:57 - you just copying this from opencv
00:59 - um i'm trying to be open and transparent
01:01 - with you guys what i do before these
01:02 - videos is i go i read the opencv
01:04 - documentation
01:05 - i pull out stuff that i think is
01:06 - interesting and that i want to show i
01:08 - skip over
01:09 - a lot of it and then i just go ahead and
01:11 - you know teach something interesting
01:12 - essentially
01:13 - so i want to make that clear i will link
01:15 - all of the opencv documentation that i
01:17 - use
01:17 - for videos in the description so if you
01:20 - want the more detailed stuff where you
01:21 - want to see all the stuff that i skipped
01:23 - over
01:23 - then click the link in the description
01:25 - last thing there is a github repository
01:27 - for this tutorial series
01:29 - this will be linked in all of the
01:30 - descriptions for all of these videos and
01:32 - you can see all of the code that we
01:34 - write in each video
01:35 - right now i'm obviously only up to
01:36 - tutorial one so i have the tutorial one
01:39 - code upload on github
01:40 - and as the code gets more complicated
01:42 - this will be more useful so just check
01:43 - the descriptions
01:44 - anyways let's dive in here so the first
01:46 - thing that i want to show you
01:48 - is how an image is actually represented
01:50 - because obviously we loaded in this
01:52 - image
01:52 - but what does the image actually look
01:54 - like what is representing this image and
01:56 - how do we display this image well we
01:58 - know how to display it but how does the
01:59 - computer kind of interpret it
02:01 - so let me just print out this image here
02:03 - and let's just have a look at what it is
02:05 - so when i print it out we actually get
02:07 - what's known as a numpy array here
02:09 - you can see we have a bunch of pixel
02:10 - values which are all just white
02:12 - because this is the border of the image
02:13 - that it's showing us
02:15 - anyways the reason i'm showing you this
02:16 - is because we need to understand how an
02:18 - image is actually represented
02:20 - now in our opencv we actually use
02:24 - numpy so opencv and numpy are very
02:26 - closely correlated
02:27 - and when you load an image what it
02:29 - actually does is it extracts the pixels
02:31 - from this image
02:32 - and loads them into a numpy array so if
02:35 - i were to type
02:36 - or i were to print sorry the type of
02:38 - image
02:39 - you would see that we get a numpy.nd
02:42 - array
02:43 - you don't have to understand numpy you
02:44 - don't have to know numpy at all to
02:46 - follow along with this
02:47 - but if you do know numpy then this is
02:48 - probably useful information so numpy is
02:50 - kind of a high performance array library
02:53 - for python
02:54 - it just allows you to do more optimized
02:55 - operations with arrays
02:57 - i believe it's backend or it's you know
03:00 - lower level code is written in c or c
03:02 - plus and well it just makes this we can
03:04 - do faster and better operations on
03:06 - arrays in python
03:07 - anyways anything that you would normally
03:09 - know about a regular list in python will
03:11 - apply to a numpy array
03:13 - except there's just a ton of other stuff
03:14 - that you can do so for example
03:16 - i can print out the shape of a numpy
03:19 - array
03:19 - now the shape of this array tells me the
03:22 - number of rows
03:23 - the number of columns and then the
03:24 - number of channels in my image
03:26 - specifically when we're talking about
03:28 - images so if i print this out we get 995
03:31 - by a thousand by three that tells me
03:33 - that i have 995 rows
03:36 - in my image when i say rows that's the
03:37 - height of the image
03:39 - this tells me i have a thousand columns
03:41 - so that is the width of the image
03:43 - and then it tells me that i have three
03:45 - channels so again the order is height
03:48 - width and then channels now when i say
03:50 - channel a channel is really just the
03:52 - color space of our image so
03:54 - how many pixels or how many values sorry
03:56 - are representing each pixel
03:58 - now it turns out that uh in our numpy
04:00 - arrays or in our opencv library whatever
04:03 - we have three values that represent each
04:05 - of our pixels
04:06 - now those values are red green and blue
04:09 - and specifically in opencv
04:10 - it's actually going to be blue then
04:12 - green then red now let me show you what
04:14 - i mean by this
04:14 - so firstly you have to understand that
04:16 - when we're representing this image we
04:17 - have a three dimensional array
04:19 - we have an interior array so let me let
04:21 - me draw a kind of example here
04:23 - it'll look something like this we have
04:25 - our first array then inside of this
04:27 - array we have a bunch of other arrays
04:29 - these arrays represent the rows of our
04:31 - images then inside of these arrays
04:33 - we have a bunch of pixel values and
04:36 - these are the columns in each row
04:38 - so i might have a pixel that is black so
04:40 - that would be 0
04:41 - zero i might have a pixel that's white
04:43 - so 255
04:44 - 255 but this is kind of how it's laid
04:46 - out so if i just had a two by two image
04:48 - so two pixels by two pixels
04:50 - then let's just copy this it will be
04:52 - represented in our program
04:54 - uh something like this we just have two
04:55 - pixels by two pixels we'd have two black
04:57 - pixels
04:58 - and then two white pixels so we would
05:01 - know that this pixel here was at
05:02 - position
05:03 - zero zero or it was the top left pixel
05:05 - because that's where it is
05:06 - in the array so hopefully that's clear
05:08 - but you have three values that represent
05:10 - each pixel
05:11 - and regularly it's going to be red green
05:13 - blue
05:14 - in opencv it's actually going to be blue
05:16 - green red now what i mean by that is if
05:17 - we have three values 0
05:19 - 0 0 here we read them like this blue
05:22 - green then red so this is the amount of
05:24 - blue in our pixel the amount of green in
05:27 - our pixel and the amount of
05:28 - red in our pixel now the values here
05:30 - that are uh
05:31 - valid is between 0 and 255 so
05:34 - 0 represents none 255 represents all so
05:38 - if i were to have say 255
05:40 - 0 0 that means i have a blue pixel i
05:42 - have no green no red and all blue
05:44 - if i were to have like 128 here that
05:46 - would mean i would have like a slightly
05:48 - lighter blue
05:49 - than if i just had 255. so hopefully
05:52 - that's clear but that is how you
05:53 - represent a pixel with blue green and
05:55 - red values you have three of them
05:57 - all all of which which are in the range
05:59 - of zero to 255.
06:00 - so we will continue on one second but i
06:02 - need to quickly thank the sponsor of
06:04 - this video and this series which is algo
06:06 - expert
06:07 - algo expert is the best platform to use
06:08 - when preparing for your software
06:10 - engineering coding interviews
06:11 - they have a data structures crash course
06:13 - mock interviews and over 125
06:16 - high quality coding interview questions
06:17 - that all have a detailed conceptual
06:20 - overview and code walkthrough i'm
06:22 - actually an instructor at algo expert
06:24 - and you can check out some of the
06:25 - questions that i've created by going to
06:26 - the link in the description
06:28 - and using the code tech with tim for a
06:30 - discount on the platform
06:32 - now to bring this back to what i just
06:33 - explained these pixels are all set up in
06:36 - columns
06:36 - and those columns are all in a row you
06:38 - have multiple rows
06:39 - all which have all of the column values
06:41 - in them and then inside of the column
06:43 - uh you have your pixels so hopefully
06:46 - that's clear
06:47 - that's how this works that's the basic
06:49 - representation and the reason that's
06:50 - important is because when we manipulate
06:52 - images all we're really doing is
06:55 - modifying this array
06:56 - for example even when we rotated this
06:58 - image all that actually happened in kind
07:00 - of the lower level when i
07:02 - wrote that cb2.rotate is it took this
07:05 - array that we had and it just rotated
07:07 - the values in that array
07:08 - such that we have the rotated image so
07:10 - you don't really need to use the cv2
07:12 - library to do all of this it is going to
07:14 - be better to do that but you actually
07:15 - can manually modify images by just
07:18 - modifying the array data structure that
07:19 - represents them
07:21 - so let's show some more concrete
07:22 - examples let us actually change
07:25 - the i'm trying to think of a good
07:27 - example here let us look at the first
07:29 - row
07:30 - of our image so if i wanted to look at
07:32 - the first row of my image i would print
07:34 - out img
07:35 - at index 0. so this will give me the
07:37 - first row
07:38 - so if i do that you can see we have our
07:40 - first row which is filled with a bunch
07:42 - of white pixels now let's just go and
07:43 - look at row
07:44 - 257 when we do that uh
07:47 - 257 is still giving us white pixels uh
07:50 - oh
07:51 - it makes sense because the border it's
07:52 - showing us okay so i'm just going to
07:53 - look at the first row
07:55 - and then what i want to do in the first
07:56 - row is i want to look at
07:58 - the let's see here the middle pixels so
08:01 - i'm going to look at pixels between
08:03 - 45 and 400. so when i do this notice
08:07 - that we now find some pixels that have
08:09 - different colors associated with them
08:11 - just to be clear here the reason i keep
08:12 - getting white is because the border of
08:13 - my image is white so when
08:14 - it just shows me the first and last
08:16 - element in the array
08:18 - so that's why that's happening anyways
08:20 - this is how we would print out the first
08:22 - row
08:22 - and then this is how we would look at
08:23 - the pixels between 45 and 400
08:26 - in the first row so that column value
08:27 - now if i wanted to look at one pixel in
08:29 - particularly i could remove this slice
08:31 - so we could look at 257
08:33 - 400 and now if i print this out it's
08:35 - going to give me the value of
08:36 - one of these pixels so what i'm going to
08:38 - do now is i'm going to change
08:40 - a bunch of the pixels in my image and
08:42 - i'll show you what that actually looks
08:43 - like when we uh when we should put the
08:45 - image up
08:45 - all right so my screen recording
08:46 - software just bugged out for a second i
08:48 - don't know why that was happening
08:49 - anyways what i'm going to do now is i'm
08:50 - going to loop through the first 100 rows
08:52 - in our image
08:54 - so recall what we're doing is we're
08:55 - going to loop through i just picked 100
08:57 - as an arbitrary number you can loop
08:58 - through whatever you want i just want to
08:59 - show you how we can actually change
09:00 - pixels and
09:01 - what that looks like so i'm going to say
09:02 - 4i in range
09:04 - and then 100 we're going to look through
09:06 - the first 100 rows we're going to say
09:08 - 4j in range and then here i'm actually
09:10 - going to say img.shape at
09:12 - index 1. now recall that when we do the
09:15 - shape this is going to give us
09:16 - the rows columns and channels
09:20 - so number of values that represent a
09:21 - pixel that's what channels is
09:23 - uh so i want to look at the columns so
09:25 - for each 100 rows i want to loop through
09:27 - the entire width of the image so
09:29 - the entire column i want to actually
09:30 - modify so we're going to loop through
09:32 - img.shape
09:33 - 1 which is well the width of the image
09:35 - so anyways
09:36 - then once i have this i'm going to say
09:38 - img at
09:40 - index i at index j is equal to and then
09:43 - whatever color i want to make all of
09:44 - these pixels
09:45 - so we can make these pixels random
09:47 - colors in fact
09:48 - let's do that because i think that's
09:49 - more fun than just making them black
09:51 - i'm going to import random and then
09:54 - inside of here
09:55 - let's say random dot and then rand
09:58 - and we'll just go up to 255 and then we
10:01 - will do this
10:02 - three times okay and i think that should
10:06 - be good oops i didn't mean to copy the
10:08 - start
10:08 - of the list here let's remove that
10:11 - remove that
10:13 - and okay so let me zoom out so you guys
10:15 - can see this
10:16 - what i've done is said img i j
10:19 - uh is equal to and then random.rand into
10:21 - random.randin random.randint so i'll
10:23 - have three random values
10:24 - now i want to show the image so what i'm
10:26 - going to say is
10:28 - cv2 dot i am show we will say
10:32 - image we will show img and we'll say cv2
10:35 - dot weight key zero so wait an infinite
10:39 - amount of time
10:39 - then cb2 dot destroy all
10:43 - windows and there we go so let's run
10:45 - this
10:46 - and we got an issue i'll be right back
10:48 - after i look at that
10:49 - so i made a small mistake here i said
10:51 - rand int instead of rand
10:53 - range although we can still make this
10:55 - work i just have to put a zero first
10:57 - for my rand int when you take a random
10:58 - integer you need to have a
11:00 - lower bound and an upper bound so i just
11:03 - had a small mistake but anyways we need
11:04 - 0
11:05 - to 255 0-255 0-235 i think that should
11:08 - work
11:09 - and now notice that the entire top of my
11:11 - image is a bunch of
11:13 - random colors because we just randomly
11:14 - set the pixels to whatever we wanted
11:16 - them to be
11:17 - or to whatever this randomly selected so
11:19 - that is how you modify the image you can
11:21 - just
11:21 - go ahead and change the pixel values and
11:23 - then when you display the new image it
11:25 - will have those new pixel values
11:27 - so doing things like looping through you
11:29 - know the border of an image and changing
11:30 - it is actually
11:31 - really easy like i just showed you so
11:33 - that's one way to manipulate images
11:35 - and there's a few other ways we can do
11:36 - it as well so what i'm going to show you
11:38 - now is how we can actually
11:39 - copy one part of an image and paste it
11:42 - to another part
11:43 - so i'm going to get rid of this for loop
11:44 - because we don't need that anymore and
11:45 - let's just look at this image
11:47 - and we can see that i kind of have this
11:48 - like logo here right
11:50 - so i don't know the exact dimensions or
11:52 - the exact coordinates of this logo but
11:54 - what i'm going to try to do is is take
11:56 - this logo here take this like little
11:58 - html tag i don't know why i'm calling it
11:59 - a logo sorry
12:00 - and copy it and just throw it somewhere
12:02 - else on the image again this is not
12:04 - to look good it's just for an example so
12:06 - let's try to do that so i'm just trying
12:08 - to figure out where this would probably
12:09 - be
12:10 - okay that's probably about 500 600
12:14 - something like that
12:15 - anyways let's try this so if i want to
12:17 - copy part of the image
12:18 - what i can do is just copy part of the
12:21 - array so i'll find the part in the array
12:23 - that i want
12:24 - and i'll show you how we do that with
12:25 - the slice and then we'll just take that
12:27 - and we'll just
12:27 - paste that into another part of the
12:29 - array this seems strange but
12:31 - it's pretty straightforward i'm going to
12:32 - say logo or
12:34 - let's just call this tag is equal to and
12:36 - then img
12:38 - and i'm going to use a numpy array slice
12:41 - now i will describe how this works but
12:42 - it's just like a regular slice in python
12:45 - except you can do it
12:46 - twice inside of here so i'm going to say
12:48 - i want to copy from
12:50 - row 500 to row 700
12:54 - and i want to copy in those rows so in
12:57 - row 500 to 700
12:59 - i want to copy which columns well i want
13:01 - to copy
13:02 - let's say columns 600
13:05 - to 900 so what this is going to do is
13:08 - it's going to copy a square
13:10 - of my array so it will copy from 500 to
13:13 - 700 so all of the rows
13:15 - from 500 to 700 not including 700
13:18 - then it will copy all of the columns
13:20 - from 600 to 900
13:22 - that are in this row so hopefully that's
13:24 - clear but that's how that works we're
13:26 - going to copy that into this
13:27 - tag variable here then
13:31 - what i'm going to do after that is i'm
13:32 - going to paste this into
13:34 - part of the array so i'm going to say
13:36 - img
13:37 - and then we'll just pick a random
13:38 - position here that we want to paste it
13:40 - at
13:41 - we will say that we want to paste it
13:43 - let's go from row 100 to
13:46 - 300. now notice that when i paste this
13:49 - it needs to be the same shape as what
13:51 - i've copied
13:52 - so i need to pick a location in my image
13:55 - that is the same dimensions
13:56 - as the the image that i copied so say
13:59 - 100
14:00 - 300 then we'll put it at you know what
14:03 - one hundred
14:04 - actually not one hundred let's go like
14:06 - nine
14:07 - no maybe not nine hundred um seven
14:10 - hundred two and then a thousand no we
14:13 - don't have a thousand sorry i'm just
14:14 - trying to
14:15 - pick something that's going to work here
14:16 - let's go 650 to
14:18 - 950. so i'm now going to take whatever
14:21 - part of the image is in this section
14:22 - and i'm going to paste it in this
14:24 - section so i'm going to say this is
14:25 - equal to
14:26 - and then tag and then i will show the
14:28 - image now i understand this might be
14:30 - slightly confusing but i'm just again
14:31 - taking a slice
14:32 - of my image array and then i'm going to
14:35 - replace this entire slice
14:37 - with this slice that we just took
14:39 - previously and notice these are going to
14:40 - be the same dimensions right it's the
14:41 - same number of blocks in between or same
14:44 - number of
14:45 - elements in between so anyways let's run
14:47 - this and now notice that i've completely
14:49 - messed up what i was trying to copy
14:50 - but i've taken whatever this was here
14:53 - this mouse i guess and i've pasted it in
14:55 - the top right hand corner of the image
14:57 - so that is how you can take something
14:58 - from the image copy it and then
15:00 - paste it somewhere else now obviously
15:02 - you need to know where the thing is i
15:03 - was clearly quite off i got the hand
15:05 - here
15:05 - but that's kind of the general idea so i
15:08 - think that's all i wanted to show you in
15:09 - this video
15:10 - again not super interesting or useful
15:12 - we're going to get into all that stuff
15:13 - later on but it's very important to
15:15 - understand this
15:15 - and i would recommend that you mess
15:17 - around with these numpy arrays
15:18 - modify them see if you can write some
15:20 - cool scripts that go and even maybe
15:22 - generate an image
15:23 - and then display that image see what it
15:25 - looks like and just mess around with it
15:26 - so anyways that has been this video i
15:28 - hope this was helpful to you if it was
15:29 - make sure to leave a like
15:30 - subscribe to the channel and i will see
15:32 - you in another open cv
15:35 - [Music]
15:38 - tutorial
15:42 - you