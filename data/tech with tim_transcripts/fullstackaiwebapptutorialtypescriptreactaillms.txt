00:00 - in this video I'll be showing you how to
00:01 - build an entire AI application including
00:04 - a front end backend and then various
00:07 - Integrations we'll be using react for
00:09 - the front end and then typescript within
00:11 - react as well as for some of the backend
00:12 - components this is a great video because
00:15 - not only will it show you how to
00:16 - integrate AI into your applications but
00:19 - how you can actually present this to a
00:21 - user and build it into a full-fledged
00:23 - application that includes a front end
00:25 - which many other videos on YouTube don't
00:27 - actually have so with that said let me
00:29 - give you a quick demo of the application
00:31 - this is meant to act as a base and
00:32 - something you can extend and add upon
00:34 - and is really just teaching you the core
00:36 - features you need to know so you can
00:37 - build your own applications so right
00:40 - here what I have is a trip planner now
00:42 - any of you that follow me or maybe
00:43 - follow my second Channel life with Tim
00:45 - know that I've been traveling around the
00:47 - world recently and it can be difficult
00:49 - to keep track of the different trips
00:50 - that I have so what I wanted to do is
00:52 - build something relatable to myself and
00:54 - probably to some of you so the kind of
00:56 - idea here is that you can keep track of
00:58 - different trips that you have and when
01:00 - you're going on them and then you can
01:01 - add some notes related to those trips so
01:03 - for example in Canada I can say I am
01:06 - going to visit the CN tower okay so just
01:10 - add a note on something that I want to
01:12 - do and I can add maybe flight plans
01:14 - accommodation whatever I want and just
01:15 - have a really quick way to kind of view
01:17 - all of my trip details now I can add
01:19 - another trip here from this form where
01:21 - we have all of these different countries
01:23 - with start date and an end date but the
01:25 - coolest part is the AI component of this
01:27 - application so I have a box which is ask
01:30 - a question and I can ask this any
01:31 - question about the various trips that I
01:33 - have and it's able to actually give me a
01:35 - response by using my data so I can say
01:38 - something like hey what am I
01:41 - planning to do in if we spell this
01:44 - correctly Albania and when I ask this
01:47 - question it will take a second and then
01:48 - it's going to give me a response that
01:50 - will utilize the data I have in this
01:52 - application so you can see here it gave
01:54 - me a response and it says in Albania you
01:56 - have the following planned and it's
01:58 - taking this directly from my notes and
02:00 - the information that we have in this
02:02 - application so that's really the cool
02:04 - part here this AI that I'm going to show
02:06 - you can actually interact with the data
02:08 - that you have in the app and that means
02:10 - it can give you reasonable responses it
02:12 - can summarize different things that
02:13 - you're doing and you can add so many
02:15 - cool features to this as you're going to
02:16 - see in this video so with that said and
02:19 - the demo complete let's talk about how
02:20 - we're going to build this application
02:22 - now in order to build this project out
02:24 - we're going to be using something known
02:25 - as squid AI otherwise known as squid now
02:28 - they are the sponsor of this video but
02:30 - their platform is free you do not need
02:32 - to pay to use it and this acts as a
02:34 - backend as a service that lets you
02:36 - connect and secure any database or API
02:39 - in minutes so it doesn't matter if it's
02:40 - no SQL SQL graphql HTTP squid allows you
02:44 - to integrate with your data through
02:46 - streamlined sdks and it makes it really
02:49 - easy to build out the type of
02:50 - application that you saw where if we
02:52 - were doing this completely from scratch
02:53 - it could take us weeks and in this video
02:55 - you'll see it's not going to take us
02:56 - that long to build out this entire app
02:59 - it also allows us us to add AI directly
03:01 - into our application with different
03:03 - Integrations you're going to see it in
03:05 - this video but even though it is the
03:06 - sponsor it's a very cool platform and I
03:08 - think it's really going to help a lot of
03:09 - you building up these type of apps
03:11 - anyways to get started what we're going
03:13 - to need to do here is create a new
03:15 - account with Squid again this is free
03:16 - I'll link it in the description go ahead
03:19 - and do that and then I'm going to walk
03:20 - you through the next steps of creating
03:21 - our squid application and then we'll get
03:24 - right into the code so once you've
03:25 - created your squid account you should be
03:27 - brought to a page that looks something
03:29 - like this if you're not on this page you
03:31 - can just go through the simple
03:32 - onboarding and then you should see some
03:33 - page that looks like this and what we're
03:35 - going to do is go over to onboarding now
03:38 - from onboarding we have a few different
03:39 - options where there's some sample
03:41 - applications that we can start with but
03:43 - what I want to do is just start with an
03:44 - empty application so I'm going to click
03:46 - I want to start with an empty starter
03:47 - app from here we're going to give this a
03:49 - name I'm just going to call this trip
03:51 - planner tutorial because I'm doing this
03:54 - for the video and you can choose your
03:55 - different region and provider but I'm
03:57 - just going to go with AWS Okay so now
03:59 - what it's going to do is give us a
04:01 - command that we can copy into our
04:02 - terminal and this will kind of
04:03 - initialize our project and connect to
04:05 - the various squid services that when we
04:07 - eventually deploy this application
04:09 - everything's just set up and ready to go
04:11 - so I'm going to copy this command and
04:13 - head over to visual studio code notice
04:15 - that I've already opened up a folder and
04:17 - what I'm going to do is just paste this
04:18 - command here where I want to create this
04:20 - project and it's going to create a
04:21 - directory for me that contains all of
04:23 - the code that we need now we do need to
04:25 - install this package here so let's go
04:27 - ahead and click on yes or type yes and
04:29 - it should install everything for us
04:31 - create this directory and then we can
04:33 - start writing some code so now that
04:35 - we've initialized the application I just
04:37 - want to discuss some of the different
04:38 - components that we have access to here
04:41 - and why we're using squid AI now we have
04:43 - a backend a front end and then various
04:46 - different Integrations now the back end
04:48 - allows us to do things like create an
04:50 - API interact with our data securely we
04:53 - can have web hooks Chron jobs Etc
04:55 - there's a lot of stuff we can do here
04:57 - and we can actually interact with some
04:58 - of the AI integration for our
05:00 - application now during development this
05:02 - back end is going to run locally on our
05:04 - computer and then when we're finished we
05:06 - can actually deploy this out and then
05:08 - connect to that from any of our frontend
05:09 - clients now the back end is using
05:11 - something known as the squid backend SDK
05:14 - you don't need to worry too much about
05:15 - that but that's what allows us to write
05:17 - a lot of these um kind of features very
05:19 - easily and you'll see that in a second
05:21 - next we have the front end now the front
05:23 - end is our client this will interact
05:25 - with the squid backend which is running
05:27 - locally and that's what will allow it to
05:29 - actually Access Data sources uh again
05:32 - access the AI and just do all of the
05:34 - things that a client would do so the
05:36 - client is going to be our forward-facing
05:37 - kind of user interface the website that
05:39 - you saw it's going to integrate or
05:41 - interact with that squid backend to
05:43 - access the various features and data
05:45 - that it needs now the front end is going
05:47 - to use the squid client SDK which is
05:50 - wrapped by either the react SDK or the
05:53 - angular SDK now I don't want to confuse
05:55 - you but the point is that we have these
05:57 - really nice libraries or sdks provided
05:59 - by squid that have all of these features
06:01 - built in that make it really easy for us
06:03 - to actually integrate with our data
06:05 - sources and utilize AI features and
06:07 - that's why we're using squid so with
06:10 - that in mind let's just run this
06:11 - application to make sure that it's
06:12 - working and you can see kind of what it
06:14 - looks like and how it works and then
06:15 - we're going to start inter integrating
06:17 - this array with our own data and you'll
06:19 - see how we build that application I
06:21 - showed you before from scratch so what
06:22 - I'm going to do is CD into this
06:24 - directory so CD into trip planner
06:26 - tutorial and then I'm just going to do
06:28 - the npm run start command now this is
06:31 - going to spin up both the front end and
06:32 - the back end for me locally and then it
06:34 - should automatically open this in a
06:36 - browser window so let me just go back
06:38 - here and bring down my browser okay so
06:42 - this is what the starter application
06:44 - looks like you can see we have a little
06:45 - bit of a front end here and I can click
06:47 - on this button and increment the count
06:49 - this count is stored in the back end and
06:51 - we're incrementing this using something
06:53 - known as a web hook you don't really
06:54 - have to worry too much about that but
06:56 - this is just what the sample application
06:58 - is so you can see here we're running the
06:59 - front end and the back end and I'm
07:01 - integrating or sorry interacting with
07:03 - the back end and incrementing this count
07:05 - every single time I press this button
07:07 - that's kind of how this sample
07:08 - application is set up now we're going to
07:10 - kind of tear down or remove a lot of the
07:11 - code for this sample app and work on our
07:13 - own app uh but this is running you know
07:15 - a squid application so if we want to
07:17 - quit this we can just go ahead and hit
07:19 - on control C and then we can clear the
07:22 - console here and what I'm going to do
07:23 - now is go over to my squid console so
07:26 - I'm going to click on done because I've
07:28 - gone through these steps and I want to
07:29 - show you how we kind of create our own
07:31 - data source or schema here and we can
07:34 - start actually adding data to the
07:36 - database and start interacting with it
07:38 - so in order to do that we're going to
07:39 - click on Integrations here and you'll
07:41 - see that there's some Integrations that
07:42 - are built in by default for example we
07:44 - have a built-in database which is what
07:46 - we're going to use but we could
07:47 - integrate this with any database that we
07:49 - want maybe we have some other data we
07:50 - want to bring in from another
07:51 - application we have a queue we have
07:53 - storage and then we can also add things
07:55 - like an API an AI chap on and all these
07:57 - other Integrations that squid will allow
07:59 - us to work with really easily so what we
08:01 - want to do is click on the three dots
08:03 - here for our database and we're going to
08:05 - start defining the schema that we want
08:07 - to use for the different data that we
08:09 - have now you can see for the sample app
08:10 - it just has this count collection um now
08:13 - we're not going to work with this count
08:14 - collection but it's just here because
08:15 - that's what was in the sample
08:16 - application but what I want to do is I
08:18 - want to create a trips collection now
08:21 - for this application we're going to be
08:23 - storing storing various trips sorry so
08:25 - we need to figure out the fields that we
08:26 - want to have for our trips and the type
08:29 - of information that we want to store now
08:31 - in my case I'm going to keep it really
08:32 - simple and I'm going to go with the
08:34 - country of the trip that we're going on
08:36 - or where we're going the start date the
08:38 - end date and then we're going to have
08:40 - some kind of notes associated with the
08:42 - trip so let's go ahead and add those
08:43 - fields here the first field I'm going to
08:45 - go with is the start date this is going
08:48 - to be a date object so let's change the
08:50 - type here we can give that a default
08:52 - value if we want we're going to say that
08:53 - yes this is required and we're just
08:55 - going to give this a small description
08:57 - the reason we'll give this a description
08:59 - is so that the AI that will interact
09:01 - with our data and give us those
09:02 - summaries you saw before knows what this
09:04 - field means we're going to say start
09:06 - date of the trip this one's pretty
09:08 - straightforward we'll just give it a
09:09 - short description now we're going to add
09:11 - another field here and after the start
09:13 - date of course we're going to want to
09:14 - have the end date so let's spell the end
09:18 - date correctly let's make this a date as
09:20 - well we're going to make this required
09:22 - we're going to say end date
09:24 - of the trip okay now we're going to add
09:28 - the country so let's go country we'll
09:30 - make this a string this will be required
09:33 - as well if we wanted a minimum or
09:34 - maximum length we could do that we'll
09:35 - say
09:37 - country the trip is in okay and now
09:42 - let's add another field and this one is
09:44 - going to be notes now these will just be
09:45 - some notes associated with the trip so
09:47 - that's going to be an array uh this will
09:49 - be required as well we'll say
09:51 - notes related to if we could type this
09:56 - correctly to the trip okay so we're
09:58 - going to add that field and then lastly
10:00 - we're also just going to add an ID so
10:02 - we're going to say ID we'll actually
10:03 - make this a string and then we'll say
10:07 - that this is required and this is going
10:08 - to be the primary key and we'll say
10:10 - unique ID of the trip okay so we have
10:15 - the five fields that we need for this
10:16 - data source I'm going to go ahead and
10:18 - click on Save schema now at this point
10:20 - if we wanted to we could go to query
10:22 - with AI and if we had any information
10:24 - inside of this database we could ask
10:26 - questions about it and it would actually
10:27 - give us some response this is what we're
10:29 - going to be building into our AI
10:31 - application and using from the front end
10:34 - but here you can see you can test with
10:35 - it and also it's worth noting this
10:37 - concrate graphs charts Etc uh it's
10:39 - pretty cool so we'll look at that later
10:41 - when we have some data but for now we
10:42 - have a collection ID country end date
10:45 - notes and the start date and obviously
10:47 - if you had more data you could add it
10:48 - here or if you wanted to integrate with
10:49 - another database you could do that in
10:51 - our case this is totally fine so let's
10:54 - go back to our application now that we
10:56 - have the schema defined and what we want
10:58 - to do is start setting this app so that
11:00 - we actually have um what is it the code
11:02 - that we need for our application now
11:04 - remember that we need the ability to add
11:06 - a trip we need to add notes to a trip we
11:08 - need to be able to remove a trip and
11:10 - then we need the ability to query about
11:11 - our database so I think logically the
11:14 - first thing that makes sense is to
11:15 - actually add a trip so let's go in here
11:17 - and let's start setting up our app so
11:19 - that we can add a trip from the front
11:20 - end and then we can start adding some
11:22 - backend components AI Etc so let's go
11:25 - into our app. TSX I'm going to zoom out
11:28 - a little bit so that we can read this
11:29 - and we're just going to start cleaning
11:30 - this up a bit because we really don't
11:32 - need a lot of the code this here for
11:34 - example I don't need that squid logo I
11:36 - don't need whatever I had up here and we
11:38 - can pretty much delete everything that
11:39 - we have inside of this component and
11:41 - what we're going to do instead is we're
11:43 - just going to return an empty component
11:45 - and we can even remove these hooks right
11:47 - here from the squid Cloud react SDK so
11:50 - now we just have a blank app that's good
11:53 - let's go into index.css we can pretty
11:55 - much remove everything here as well I'll
11:57 - just keep the roots styling uh so that
12:00 - we keep uh some of these main features
12:03 - we can go to app.css we can get rid of
12:06 - this as well and now we kind of have a
12:09 - clean slate and we can start writing the
12:11 - different code that we need so as I said
12:13 - the first thing that we want to do is
12:15 - probably create a form that allows us to
12:17 - add a new trip so to do that I'm going
12:19 - to make a new component so I'm going to
12:21 - say components and make a folder here
12:23 - and inside of the components folder I'm
12:25 - going to make a new file and we're going
12:27 - to call this the add trip form so let's
12:31 - do that dot and then this is going to be
12:34 - TSX now as well as that I'm going to add
12:36 - some CSS for this so I'm going to say
12:38 - add trip form. CSS and inside of here
12:42 - I'm actually just going to copy and
12:43 - paste a bunch of CSS later on now for
12:46 - this project I'm not going to be writing
12:47 - all of the CSS from scratch because
12:49 - that's going to take a really long time
12:50 - and you guys probably don't want to just
12:52 - watch me uh write CSS so I have all of
12:54 - the code available from the link in the
12:56 - description if you're getting lost or
12:58 - you just want to reference something
12:59 - thing or copy and paste it you can go
13:01 - there and just check out all of the code
13:03 - and for the CSS specifically I'm just
13:04 - going to get you to copy and paste that
13:06 - into your application so that we don't
13:08 - spend a ton of time styling the app
13:10 - which again you're not going to get a
13:11 - ton of value from anyways let's start
13:13 - out with our ad trip form so what we're
13:15 - going to do is we're going to import
13:16 - react we're going to import a few other
13:18 - things that we need like the use State
13:21 - and the use effect and that's going to
13:23 - be from the react package okay now we
13:27 - might as well import that CSS while we
13:29 - have it so we're going to say from and
13:31 - then or import sorry add trip form. CSS
13:35 - and then we can go here and make our
13:36 - component so we're going to say function
13:38 - add trip and inside of add trip we're
13:41 - going to create a form and the form is
13:43 - to make the trip so we're going to need
13:44 - a country a start date and end date um
13:47 - and then anything else for the trip I
13:49 - guess some notes but we're going to add
13:50 - those later on so let's start defining
13:52 - some state that we're going to use for
13:53 - our form so we're going to say const
13:56 - country and then set country is equal to
13:59 - use State and for now that's going to be
14:01 - an empty string we're going to say const
14:04 - start date and then set start date is
14:08 - equal to use State this will be an empty
14:11 - string as well we're going to do the
14:13 - same thing if I fix my semicolon here
14:18 - with the end date so we're going to say
14:19 - end date and then set end date is equal
14:23 - to use State and that's going to be a
14:26 - string and then we're also going to have
14:28 - a piece of State that's going to store
14:30 - all of the different countries that we
14:31 - have available to us the reason for this
14:33 - is that we're going to actually use an
14:35 - API to grab all of the different
14:37 - countries that exist so that we can
14:39 - populate kind of that selection box that
14:41 - we had because we don't want to just
14:42 - manually type out all of the different
14:44 - countries we're going to grab those from
14:45 - an API just to save us some time so I'm
14:47 - going to say const and we're going to go
14:49 - with countries and then set countries is
14:54 - equal to use State and this is going to
14:56 - be a list actually of all the different
14:58 - countries
14:59 - and then we're actually just going to
15:01 - grab all of these countries using a use
15:03 - effect hook so let's explain this but
15:06 - we're going to say use effect we're
15:07 - going to have a function here the
15:09 - dependency array will just be empty and
15:11 - inside of here we're going to make an
15:12 - API call to an API that I found that
15:15 - just gives us a list of all of the
15:16 - different countries so that we can
15:17 - populate those and allow them just to
15:19 - select a country from the list so we're
15:21 - going to fetch and the URL that we're
15:23 - going to fetch is the following I'm just
15:24 - going to copy it in so that I don't mess
15:26 - it up and then you guys can copy it as
15:28 - well so let's go here this is the rest
15:31 - countries. comom v3.1 all this is free
15:35 - you don't need any API token or anything
15:37 - so it's really easy to call we're going
15:39 - to say do then we're going to take in
15:41 - some
15:43 - response and let's just save this and
15:45 - we're going to say if the response. okay
15:50 - then we are going to return the
15:54 - response. Json and I just need to put
15:57 - this inside of a set of curly braces so
15:59 - that I don't get yelled at let's format
16:01 - this so that you guys can actually read
16:03 - it okay so we're saying dot then we get
16:04 - a response if the response is okay we'll
16:07 - return the Json from the response we're
16:09 - then going to need another dot then
16:11 - we're going to take in the data from
16:13 - that Json and what we're going to do is
16:16 - we're going to map this data so we're
16:17 - going to say const and this is going to
16:19 - be the country names is equal to data do
16:23 - map we're going to take in a country and
16:27 - then we are going to do country .name
16:29 - name. common because this has a bunch of
16:32 - information not just the name of the
16:34 - country so we're going to get the name
16:36 - and then the common name because there's
16:37 - abbreviations and all kinds of other
16:39 - data that exists from this result so I'm
16:41 - just going to mark this as an any type
16:43 - so the typescript doesn't get mad at us
16:45 - and then I'm going to set countries so
16:47 - we're going to say set countries and
16:49 - we're going to set it as our country
16:51 - names okay so now we're uh retrieving
16:54 - the data from the API let's just add one
16:57 - more Clause here in case an error so
16:59 - we're going to have a catch we're going
17:01 - to have an error and then we're just
17:03 - going to say console do error like that
17:07 - and we'll just log whatever the error is
17:08 - so we can see what that issue is okay so
17:11 - at this point uh once we render this
17:13 - component what it's going to do
17:14 - immediately is go and fetch all of the
17:16 - countries set that in the country State
17:18 - and then we can use that in our form so
17:20 - let's start making the form now which is
17:22 - just going to be a little bit of HTML so
17:24 - we're going to say return we're going to
17:26 - return a div now it's important that you
17:28 - specify the class class names properly
17:29 - here so that they match up with the CSS
17:31 - that I have so for the class name of
17:34 - this div I'm going to call this a
17:35 - country or sorry a trip container and
17:39 - let's save that inside of this div I'm
17:42 - just going to add an H3 tag as a header
17:44 - we're going to say that this is ADD trip
17:46 - with no class then we're going to create
17:48 - the form so we're going to say div class
17:51 - name is equal to the trip- form okay now
17:55 - inside of here we're going to add our
17:57 - different form elements so the first uh
17:59 - element we're going to have is a select
18:00 - field this is to select the country so
18:03 - we're going to say the value is equal to
18:05 - our country state which we have defined
18:07 - up here and then we need to specify an
18:10 - onchange so we're going to say onchange
18:12 - and this needs to be a function so we're
18:14 - going to specify an arrow function that
18:16 - takes an e and says set country and when
18:20 - we set the country this going to be e.
18:22 - target. value okay let's save that now
18:27 - inside of the select here we're going to
18:28 - spe ify all of the different options
18:30 - that we have so the first option like
18:33 - this is going to be the following we're
18:34 - going to say option value is equal to
18:37 - empty we're going to say this is
18:39 - disabled and this is just going to say
18:41 - select country so this is what you'll
18:43 - see in the Picker but you can't actually
18:45 - select this and then we're going to map
18:47 - all of the different countries that we
18:49 - have as various options inside of the
18:51 - select so we're going to say countries
18:53 - do map okay and we're going to take in
18:57 - the country and what we're going to
18:59 - return from the country is an option the
19:02 - option is going to have a key the key
19:04 - will just be equal to the country the
19:07 - text itself will be the country and the
19:11 - value will be equal to the country as
19:15 - well so let's save so that we can see
19:16 - this so now you can see that we have
19:18 - various different options for all our
19:20 - different countries with the key and the
19:21 - value and the name okay so those are all
19:24 - of the values inside of the select next
19:27 - we need some date Pickers so we're going
19:28 - to have an input for the input we're
19:31 - going to say the type is equal to
19:34 - date now the value of course is going to
19:36 - be equal to the start date because
19:38 - that's what we will have first and then
19:40 - we're going to say on
19:42 - change okay and this needs to be a
19:44 - function we're going to take in E and
19:45 - we're going to say set the start date
19:48 - and then this is going to be e. target.
19:51 - value okay now we can just copy the same
19:54 - thing let me just make this a bit bigger
19:55 - so that you guys can see it and I'm not
19:58 - sure why it did that so let's copy this
20:03 - line and paste this down here and just
20:05 - change this from start date to end date
20:08 - and rather than set the start date this
20:10 - will be set the end date okay now lastly
20:14 - we're going to make a button this button
20:16 - is going to say add trip okay and we're
20:19 - going to have an onclick which is equal
20:22 - to and we're going to call a function
20:24 - called add trip which we're going to
20:26 - Define in just one second okay so this
20:29 - is the form I know that was just a lot
20:30 - of typing there but it's actually not
20:32 - too complex we just have a selector for
20:34 - the country some inputs for the start
20:36 - date and for the end date and then a
20:38 - button for the add trip now we just need
20:40 - to handle actually adding the trip so
20:42 - we're going to make a function called
20:44 - add trip okay we can just make this an
20:47 - arrow function here when we press this
20:50 - we want to create a new trip in our
20:52 - database so how do we do that well to do
20:54 - that we're going to use the squid client
20:56 - SDK or the react SDK so what I'm going
20:59 - to do up at the top here is I'm going to
21:01 - say import and I'm going to import use
21:05 - collection from and this is going to be
21:07 - at squid so let's put that in a string
21:11 - at squid cloud/ react okay so this is a
21:14 - hook that we can use to get access to a
21:16 - specific collection so now what I can do
21:18 - is I can say const trips collection is
21:21 - equal to and then use collection and
21:24 - then what we're going to specify is
21:25 - actually the schema of the collection
21:27 - which I'll do in a second and then the
21:29 - name in our database which is trips now
21:32 - what we want to put here since we're
21:33 - using typescript is actually the type or
21:36 - what a trip looks like so that we're
21:38 - able to get that autocomplete from
21:40 - typescript so in order to do that we
21:41 - need to make a new type so what we're
21:43 - going to do is say uh type and then this
21:47 - is going to be trip and that's going to
21:49 - look like this so for the type trip
21:51 - we're going to have a start date which
21:53 - is a date we're going to have an end
21:55 - date which is a date we're going to have
21:58 - a country which is a string we're going
22:00 - to have some notes which is going to be
22:03 - a string array and then we're going to
22:05 - have an ID which is also going to be a
22:07 - string okay so that's the type for our
22:10 - trip and then what I can do is specify
22:12 - that Here and Now what I'm doing is
22:13 - saying okay I want to use this
22:15 - collection from squid so what we defined
22:18 - there in our squid cloud or squid
22:20 - console the name within the database is
22:22 - trips but each trip looks like this type
22:26 - so this way when I start interacting
22:27 - with the collection and I have the auto
22:29 - completion and I actually know what this
22:31 - looks like okay so now that I have the
22:33 - trips collection here it's actually
22:35 - really easy to add a new element to do
22:38 - that all we need to do is say trips
22:40 - collection. document okay we're going to
22:43 - create a new document and then we can
22:45 - say insert and we're just going to
22:47 - insert the data that we want that's
22:49 - literally it if you've worked with no
22:51 - SQL databases before you've probably
22:52 - seen something like this but here this
22:55 - is giving a giving us a reference to
22:56 - that trips collection and then we can
22:58 - just add a new element to it now the
23:00 - first thing we'll do before we add the
23:02 - element is just Define an ID for this
23:04 - trip so we're going to say const trip ID
23:07 - is equal to and then we're going to use
23:08 - the crypto package which is built in
23:10 - here and then random uu ID this is going
23:12 - to give us a random value for the ID to
23:15 - identify this trip for the document
23:17 - we're just going to specify that the we
23:19 - want the ID to be trip ID and then we
23:22 - can start writing all of our Fields so
23:24 - we're going to say the ID we want is the
23:26 - trip ID we're going to say
23:29 - that we want to have the country then we
23:31 - also want to have the start date and
23:33 - this is going to be a new date and we're
23:35 - just going to wrap the start date string
23:37 - here so we convert that to a date object
23:39 - we're going to say end date and this is
23:41 - going to be new date and then the end
23:45 - date and then we're going to have notes
23:47 - and this will be an empty array now
23:49 - notice once I fill in all of those
23:51 - fields then the red Squigly line goes
23:53 - away because now we have fulfilled the
23:55 - schema or the type that we specified
23:57 - here which is kind of the nice benefit
23:59 - of using typescript now that actually
24:01 - completes our ad trip form lastly we
24:03 - need to export this component and then
24:05 - just render it from our main component
24:07 - that we can use it and try it out so I'm
24:09 - going to say export default and then
24:11 - this is going to be add trip like this
24:14 - okay so that is now this component
24:16 - exported and what we're going to do just
24:18 - to clean up the code a little bit is
24:19 - we're going to take this type and we're
24:21 - just going to put it in a types file so
24:23 - I'm going to go to Source going to make
24:24 - a new file called types. TS I'm going to
24:27 - put this in here with an export before
24:30 - it and now what I'm going to do is
24:32 - remove this type and just import it from
24:34 - that file that we created so that this
24:36 - way we um don't actually need to define
24:38 - the type in one file because we might
24:40 - use it in multiple places so now you can
24:41 - see that I'm importing trip from dot do/
24:44 - types that's where we have it defined
24:46 - and now if we use it somewhere else we
24:48 - don't need to redefine it okay so that
24:50 - is our ad trip component uh the last
24:53 - thing to do is add the CSS for this so
24:56 - again what I'm going to do is just copy
24:57 - this in if you want all of the CSS it's
25:00 - available from the link in the
25:01 - description and it's just in the file
25:03 - add trip form. CSS you can view it
25:05 - directly from GitHub so I'm going to
25:08 - copy all of that in again this just kind
25:10 - of makes it look a little bit nicer it's
25:12 - not worth us writing all of it out
25:14 - together uh in this video okay so now we
25:17 - need to render this component so we can
25:18 - test it and actually view it so I'm
25:20 - going to go to app. TSX inside of my
25:23 - fragment here I am going to render that
25:25 - component which is the add trip okay and
25:29 - that's it so you can see that this
25:30 - automatically gets imported here from
25:32 - components. add trip form if it's not
25:34 - then you can just type the import we
25:36 - will format our code and now what we can
25:39 - do is run it and make sure the component
25:40 - renders so we're inside of that
25:42 - directory trip planner and I can type
25:44 - npm Run start when I do that it's just
25:48 - going to take a second here and then we
25:50 - can see that we have our ad trip form
25:52 - now obviously all of the stylings not
25:54 - finished yet because we have um some
25:56 - more CSS that we'll add later on you can
25:58 - see that I can select a country so it
26:00 - has my whole list here of all of the
26:02 - different countries they're not
26:03 - necessarily in alphabetical order but if
26:05 - we wanted them to be we could map them
26:07 - in that way I'll select
26:09 - B let's go with something like we going
26:12 - to start on the 24th and then go to the
26:15 - 31st now let's just open up the console
26:18 - here to see if this is going to work I'm
26:19 - going to click on ADD trip now at this
26:22 - point we don't actually know if it's
26:23 - working or not because there's no way to
26:24 - view all the different trips in our UI
26:27 - but what we can do is we can check our
26:29 - back end we don't see any errors here so
26:31 - hopefully that means that it's working
26:34 - and we can go to our squid console and
26:37 - we can actually query with AI and see if
26:39 - we have a trip to bise so let's go query
26:42 - with AI let's say hey what trips do I
26:46 - have if it says I have some trips that
26:48 - means that this was probably successful
26:50 - if it says that I don't have any trips
26:51 - and I guess it means that didn't work
26:53 - and I'm going to show you how we can
26:54 - kind of allow access to that database so
26:57 - you can see here after asking this it
26:58 - gave us a result it says you have the
27:00 - following trip trips plan sorry country
27:02 - is Bel start date end date and there are
27:04 - no notes for this trip it shows us the
27:06 - query that it actually used uh to find
27:09 - this information and then gave us a walk
27:11 - through step by step of what it did in
27:13 - order to format this response now this
27:15 - can also generate charts and graphs if
27:17 - you add some data that makes sense for
27:18 - that uh but this is pretty cool and
27:20 - that's exactly why I want to add this to
27:22 - our application so that we can use this
27:24 - directly from the UI anyways you can see
27:26 - that trip was now added so let's move on
27:29 - to the next steps here where we start
27:31 - actually viewing the different trips
27:32 - that we have and then we can integrate
27:34 - or add that add AI form so let's go to
27:38 - components here and we're going to make
27:39 - two no components one for rendering an
27:41 - individual trip and then one for
27:43 - rendering the list of trips so we're
27:45 - going to go new component and we're
27:46 - going to say trip. TSX this will kind of
27:48 - be the individual trip and then we're
27:51 - going to have the trip list. TSX and
27:54 - while we're at it we're going to add the
27:55 - CSS file so we're going to say trip. CSS
27:59 - and then we will have the tripl list.
28:03 - CSS okay so let's start by rendering one
28:06 - individual trip and then we can render
28:07 - the list of all the trips that we have
28:10 - all right so for one trip we're going to
28:12 - say import format we're going to use
28:15 - this in a second for the date from and
28:17 - this is a built-in package called Date
28:19 - FNS we're then going to say import and
28:23 - this is going to be
28:26 - trip from
28:28 - dot dot SL types because we want that
28:31 - trip uh type and then we're going to
28:33 - have some states we're going to say
28:34 - import use state from and this is going
28:39 - to be
28:40 - react okay now what we're going to do
28:42 - here is we are going to write the
28:43 - different props that we're going to have
28:45 - for this component we're going to start
28:46 - rendering it uh and yeah you'll see how
28:48 - it works so we're going to say type
28:51 - props is equal to and first thing we're
28:54 - going to need to render a trip well we
28:55 - need to know what the trip is that we're
28:57 - rendering so let's specify that now
28:59 - we're also going to have some functions
29:01 - we're not going to write these functions
29:02 - or Implement them yet but we know that
29:04 - we're going to need them so for example
29:05 - we need the ability to delete a trip so
29:07 - we're going to say on delete we're going
29:09 - to pass some ID this will be the ID of
29:11 - the trip we want to delete and this
29:13 - function will return void we're only
29:15 - going to have add on note or on add note
29:19 - and this is going to be the trip ID so
29:22 - the trip ID we want to add the note for
29:24 - as well as the note itself that we want
29:26 - to add and this again we'll return void
29:29 - we're then going to have the on delete
29:31 - note because within each trip we have
29:33 - notes and we need to potentially delete
29:35 - them same thing we're going to have the
29:38 - trip ID and we're going to have the
29:40 - index of the note that we want to delete
29:43 - which is a number and then this is going
29:44 - to return void next we're just going to
29:46 - have some index and this will specify
29:49 - what Index this specific trip is okay so
29:52 - now let's write our component we're
29:54 - going to say function and this is going
29:55 - to be trip card now for the props we're
29:58 - just going to strip them out so we're
30:00 - going to say trip on delete on add note
30:05 - on delete notes and index and this is
30:08 - coming from our props type just kind of
30:10 - good practice here with typescript uh
30:13 - now what is the issue it's saying here
30:14 - all these structured elements are unused
30:16 - okay that's fine we'll use them in a
30:17 - second let's format this go down and
30:20 - start writing our component okay so
30:23 - inside of here we're going to say const
30:26 - new note and and then set new note this
30:30 - is going to be the field that will store
30:32 - the um kind of input for adding a new
30:34 - note because we need the ability to add
30:35 - a note to our individual trips okay now
30:40 - we're going to write the actual HTML
30:42 - that we want to render here so we're
30:43 - going to say return we're going to have
30:46 - a div we're going to say the class name
30:49 - here is equal to the trip- card and
30:53 - we're going to give this a key which is
30:55 - equal to the index just so we don't get
30:58 - those key errors coming from react now
31:01 - inside of here what we want to display
31:03 - is the name of the trip the start date
31:05 - the end date and then there's a bunch of
31:07 - different functionality we need like we
31:08 - need to view all of the different notes
31:10 - we need the ability to add a note to
31:12 - delete a note and then also to delete
31:14 - the trip itself because that's something
31:16 - we might potentially want to do so we're
31:18 - going to start with an H4 tag which is
31:20 - going to show kind of the header
31:21 - component so like the country name and
31:24 - the um start date and the end date we're
31:26 - going to have a span here and inside
31:28 - span what we're going to do is we're
31:30 - going to format and this is going to be
31:33 - the
31:34 - trip. start date we're going to format
31:37 - this as PPP which is going to give us a
31:39 - nicely formatted date then we're going
31:41 - to put a dash not a minus sign but uh a
31:44 - dash here so let's go outside of this
31:46 - curly brace we're going to have another
31:48 - curly brace and we're going to do format
31:50 - and then this is going to be trip. end
31:52 - dat and then same thing format it with
31:54 - PPP just so that it looks nice and it
31:57 - just gives us the uh month date and year
32:00 - okay so that's the first thing we're
32:02 - going to display now after that we're
32:03 - going to have a button and for the
32:06 - button we're going to say the class name
32:08 - is equal to Country button just in case
32:11 - we eventually want to add some
32:12 - functionality on click here although
32:14 - we're not going to do that right now and
32:15 - we're going to render the trip. country
32:17 - name then beside all of that we're going
32:19 - to have another button the class name of
32:23 - this is going to be the delete dash
32:27 - button and for the delete button we're
32:30 - of course going to call it delete and
32:32 - we're going to have an onclick event the
32:34 - onclick event is going to call the on
32:38 - delete because this is to delete the
32:40 - trip and what we're going to do is just
32:41 - pass to this function the trip. if you
32:44 - look at our props the on delete function
32:46 - takes the ID of the trip that wants to
32:47 - be deleted so we're just going to pass
32:49 - that trip. ID and then we will actually
32:52 - delete this trip okay so all of that's
32:54 - in the header so that's going to appear
32:55 - in kind of the first row and now we're
32:57 - going to render the different notes that
32:58 - we have so we're going to use UL for the
33:00 - unordered list and then we're going to
33:02 - map all of our notes so we're going to
33:04 - say trips or sorry trip.
33:08 - notes. map okay for this we are going to
33:12 - take in the note as well as the note
33:16 - index okay and then we are going to
33:20 - return a component that we want to
33:22 - render so we're going to render uh
33:24 - render a list item sorry the key of this
33:27 - is going to be the note index and then
33:30 - we're going to have a class name and
33:34 - this will be equal to note now inside of
33:36 - the LI we're just going to render the
33:38 - note itself and we're just going to put
33:40 - a space at the end and then we're going
33:43 - to have a
33:45 - button okay and the button here is just
33:48 - simply going to be an X and we're going
33:50 - to have class name equal to delete dash
33:54 - button and then we're going to have the
33:57 - on click equal to and this is going to
34:00 - be an arrow function that's going to
34:01 - call our on delete note to delete a note
34:04 - we need the ID of the trip so we're
34:06 - going to say trip. ID and we need the
34:08 - index of the note we want to delete so
34:10 - let's just save that so we can read it
34:13 - and you can see here that we're
34:14 - rendering the note we have our x button
34:16 - to delete the note which is going to
34:17 - appear at the edge of it or the far
34:19 - right Edge based on the CSS we have an
34:22 - onclick and what we're doing is just
34:23 - passing to the function the ID of the
34:25 - trip and the note specifically that we
34:27 - want to delete delete okay so that's it
34:29 - for rendering the different notes now
34:31 - the last thing we need is the ability to
34:33 - add a note so we're going to make a div
34:35 - we're going to say the class name is
34:38 - equal to the note- form and then inside
34:42 - of here we're going to have an input
34:43 - field because we need the user to be
34:44 - able to write the new note for the input
34:47 - this is going to be type is equal to
34:50 - text we're then going to have the class
34:53 - name which is equal to the note- input
34:56 - and then we're going to have the value
34:58 - which is equal to the new note and then
35:01 - we're going to have the onchange which
35:03 - is equal to e and then this is going to
35:06 - be the set new note and this will be e.
35:11 - target. value okay again let's save that
35:15 - and then lastly we can add a placeholder
35:17 - here to our input so let's do that
35:21 - placeholder and this will be equal to
35:23 - add a note okay lastly we need a button
35:27 - to submit this so we're going to say
35:29 - button add note let's give this a class
35:32 - name for our styling so we'll say class
35:34 - name is equal to add note dash button
35:39 - and then we're going to say
35:42 - onclick is equal to and this is going to
35:45 - be the following the
35:48 - handle add note which is a function
35:51 - we're going to Define in one second so
35:53 - don't worry about that for this we're
35:55 - going to pass the trip. ID and the new
35:59 - note okay let's save this and there we
36:03 - go we have finished the form okay let's
36:05 - quickly run through this we have a div
36:08 - which represents one individual trip we
36:10 - display the main information about the
36:11 - trip which is the country the start date
36:14 - to the end date and then the ability to
36:16 - delete it we then render all of the
36:18 - different notes associated with an
36:19 - individual trip and then we have a div
36:22 - here for adding the note so we have the
36:24 - actual input for the note and then we
36:26 - have a button that allows us to add it
36:27 - and then we just have a function we need
36:29 - to Define which allows us to add the new
36:31 - note so what I'm going to do is say
36:33 - const and this is handle add note now
36:38 - recall that what this is going to take
36:40 - is the trip ID so we're going to say
36:42 - trip ID this is going to be a string and
36:45 - we also need the note that we want to
36:48 - add which is also a string the reason
36:50 - why I'm writing this function is I just
36:51 - want to trim the note uh to make sure we
36:53 - don't include any trailing spaces and
36:56 - then I'm going to pass it to that
36:58 - function so I'm going to say if note.
37:02 - trim does not equal an empty space so as
37:05 - long as you give us some real content
37:07 - then I'm going to say on add note and
37:10 - I'm just going to pass to this the trip
37:12 - ID and then the note. trim so I'm just
37:15 - trimming that and then I'm going to say
37:16 - set new
37:18 - note and this is going to be an empty
37:21 - string okay so when I add a new note
37:23 - well I'm going to pass it to that
37:24 - function which will add the new note for
37:26 - me and then I'm just going to set the
37:28 - internal State here to be empty so that
37:30 - I can add another note without having to
37:31 - delete that content so this uh is pretty
37:35 - much all that we need here for this I'm
37:37 - realizing the date FNS uh is not
37:40 - actually a built-in package so I believe
37:42 - we are going to need to install that uh
37:45 - so we can do that right now let's go up
37:47 - here let's close this let's clear and
37:51 - let's type npmi and then date- FNS uh
37:56 - just so we have access to that format
37:58 - package okay so now we should be good
37:59 - here once this refreshes so let's
38:03 - refresh here the Explorer and now notice
38:06 - that we are all good we can rerun our
38:08 - application with npm Run start and now
38:12 - we need to actually render these trip
38:15 - cards if we want to see them so let's go
38:17 - down here and let's go export default
38:20 - trip card okay let's add the CSS for the
38:25 - trip card and then let's do the list
38:26 - which is going to be quite simple all
38:28 - right so I have the trip CSS I'm just
38:30 - going to paste all of it in here okay so
38:33 - you guys will be able to find that again
38:35 - from the link in the description let's
38:37 - remove that because that's actually the
38:39 - wrong header and then we can format this
38:42 - so that it's nice and pretty okay so now
38:45 - we have the trip component done we have
38:47 - the CSS and now we need to do the trip
38:49 - list okay so for our trip list this is
38:52 - going to be quite simple we're just
38:53 - going to render all of the trip cards so
38:55 - to do this we're going to say import
38:58 - react from react we're then going to say
39:02 - import trip this is the type from do/
39:06 - types we're then going to import the
39:09 - trip card
39:11 - from do
39:14 - SLP okay and then we're going to Define
39:17 - our props so for this we're going to say
39:20 - type props let's zoom in it a little bit
39:22 - and we're going to take all of our
39:23 - different trips so we're going to say
39:25 - trip and this will be an array we're
39:27 - going to say on delete because we need
39:29 - the same functions here that we're going
39:31 - to pass to our trip so we're going to
39:33 - say this is ID string and then this will
39:36 - be void and actually we can make this a
39:37 - little bit faster by just copying these
39:40 - three functions cuz we're going to have
39:41 - the exact same so let's just paste these
39:44 - here on delete on ad note on delete note
39:47 - because these are going to come from our
39:48 - main app component and now we can make
39:50 - this component so we're going to say
39:52 - function trip
39:54 - list same thing we're going to
39:56 - destructure these so we're going to say
39:57 - trips on delete on add note and then on
40:02 - delete note like that this is coming
40:05 - from our props okay then here we're
40:09 - going to return a div inside of the div
40:13 - we're going to say the class name is
40:14 - equal to the trip
40:16 - list container and then inside of the
40:19 - div we are going to show all of our
40:21 - trips so we're going to say trips and
40:23 - and
40:25 - trips. map we're going to take in the
40:28 - trip and the index and we're going to
40:30 - render a trip
40:33 - card okay so let's save this and format
40:38 - it and now start writing all of the
40:39 - props now the reason I'm doing this is
40:41 - to make sure I do actually have some
40:42 - trips if you did pass me some trips then
40:44 - I will start mapping them out okay so
40:47 - for our trip card first thing we need is
40:49 - the key the key is going to be the index
40:51 - here we're then going to pass the actual
40:53 - trip itself which will just be the trip
40:55 - from this map then we are going to have
40:58 - the key the key here is going to be the
41:01 - index as well and sorry this is not
41:03 - called key we're actually going to call
41:05 - it index because that's something that
41:06 - we passed as a prop there we're then
41:09 - going to say on delete is equal to you
41:11 - guessed it on delete we're going to say
41:13 - on add note is equal to you guessed it
41:16 - on add note and then lastly on delete
41:18 - note is of course going to be on delete
41:20 - note uh this is known as prop Drilling
41:22 - and you're not typically supposed to do
41:24 - this but in our case this is kind of a
41:25 - simple project uh so it's fine here
41:27 - we're just passing these different
41:28 - functions twice so to this component and
41:31 - then to the internal component we're not
41:33 - passing them through too many layers so
41:34 - even though it's slightly bad practice
41:36 - uh it's fine for this specific project
41:39 - anyways now we're going to render this
41:40 - out so we're going to say or export this
41:42 - sorry export default trip
41:45 - list okay uh and you can see now that we
41:48 - have the trip list where all we're doing
41:49 - is just inside of a container just
41:51 - rendering all of these different trip
41:53 - card components and passing the various
41:55 - props that we need now I actually
41:57 - realized that I combined all of the CSS
41:59 - for tripl list CSS inside of trip. CSS
42:02 - so there's no need for us to um what do
42:05 - you call it here actually write any CSS
42:07 - inside of this file so all I'm going to
42:09 - do is go to tripl list. CSS and simply
42:12 - delete that file because we don't
42:14 - actually need that and now we can render
42:17 - the tripl list component from our main
42:19 - component and pass to it these various
42:20 - functions and trips so let's go to app.
42:24 - TSX we are going to import the trip list
42:29 - and now underneath the add trip we will
42:31 - simply render the trip list here but we
42:34 - need to pass it a few different things
42:36 - in order for it to actually work so we
42:38 - need to pass to it for example all of
42:40 - the different trips and we need to pass
42:41 - to it those functions so on delete on
42:43 - add note and on delete note so in order
42:47 - to get all of the trips we can do a
42:48 - similar thing to what we did when we
42:50 - were adding a trip so we're going to say
42:53 - import and this is going to say use
42:56 - collection
42:57 - and we're also going to import the use
43:00 - Query hook which is something that we
43:01 - can do to grab a specific uh trip in
43:04 - this case from the squid react SDK and
43:07 - we're going to start by grabbing our
43:09 - collection so we're going to say const
43:11 - collection is equal to use collection
43:15 - this is going to be using the trip type
43:17 - which should be automatically imported
43:19 - there and then we are going to specify
43:21 - that we want to grab the trips okay now
43:25 - what we want to do is we want to get all
43:27 - of these trips so in order to do that we
43:29 - can say con trips is equal to and then
43:31 - we can say use Query and we can just
43:34 - pass the collection here do query now
43:38 - what this will do is simply query all of
43:40 - the different trips for us using this
43:42 - hook and just give us a nice list of all
43:44 - of the trips that we have so this gives
43:46 - us a reference to the collection but if
43:48 - we want all of the trips this is the way
43:49 - that we grab them so now we can pass
43:51 - those to our trips list so we can say
43:53 - trips is equal to and then we're going
43:55 - to pass the following we're going to say
43:57 - trips. dat do map and then we are going
44:01 - to take our trip and we're going to
44:04 - render all of the data from that trip
44:07 - this is just kind of how squid Cloud
44:08 - gives us the data it gives us trips.
44:11 - data and then we need to grab all of the
44:13 - individual elements inside of that array
44:15 - which is what we're doing and then get
44:17 - all of their data because we have
44:18 - document references and if we want the
44:20 - data inside of the document reference
44:22 - well then we need to just use thist data
44:25 - field okay so we're just kind of mapping
44:27 - out so we get all of the data in a way
44:29 - that we can work with it now there is
44:30 - some functions that we need to add here
44:32 - so let's stub them for now and then we
44:34 - can Implement them so we're going to say
44:35 - const delete is equal to this is going
44:39 - to take in an ID string and then do
44:42 - something next one is going to be on ad
44:45 - note okay what is this one going to be
44:48 - uh let me just write this properly this
44:50 - is going to be the trip ID which is a
44:53 - string
44:55 - actually and then it's going to be the
44:57 - note which is also a string and then
45:00 - we're going to have the const on
45:03 - delete note guess we need to spell const
45:07 - correctly and this is going to be
45:09 - similar it's going to be trip ID string
45:12 - and then note index which is a
45:16 - number okay I'm just stubbing these uh
45:18 - and we'll write the implementation in a
45:20 - second for now I just want to pass them
45:21 - so we're going to say on delete is equal
45:24 - to on delete let's format that we're
45:28 - going to say onad note is equal to on
45:31 - add note and we're going to say on
45:33 - delete note is equal to on delete note
45:37 - okay so now we have all of the functions
45:38 - and our trip list is rendering we are
45:41 - running our code okay and you can see
45:43 - it's automatically updating whenever we
45:45 - do a save here and when I come back you
45:47 - can see that one of our trips is
45:49 - rendered now this trip doesn't look
45:51 - great uh I'm not sure why the CSS is not
45:54 - updating I believe what we might need to
45:56 - do here is go to our trip list uh and
45:59 - just import the trip CSS so let's go ah
46:02 - it's because we haven't imported the
46:04 - trip CSS that's why so from our trip
46:06 - list we're going to say
46:09 - import trip. CSS okay and now when I
46:13 - come back here uh it says trip. CSS does
46:16 - not exist uh I believe that does exist
46:20 - um okay let's see what the issue is here
46:23 - and of course we need to do do slash so
46:25 - that it knows the reference reference
46:27 - there and now you can see that we get
46:28 - our nicely formatted trip okay great now
46:32 - these functions currently aren't doing
46:34 - anything because I haven't uh actually
46:36 - implemented them you can see that we
46:38 - have our B Trip showing up and if we try
46:40 - to add another trip here maybe to the
46:42 - Barbados let's do another date range
46:44 - here like the 8th of August to maybe the
46:47 - 10th we can add it and you see that it
46:50 - shows up okay great so now that we're
46:53 - doing that let's Implement these
46:54 - functions so that these buttons actually
46:56 - work and then we can get into the AI
46:59 - implementation so let's go back here to
47:01 - app. TSX and let's write these functions
47:05 - now the first thing that we're going to
47:06 - do is actually write a helper function
47:08 - that will help us find a trip so that we
47:10 - can modify it and either add or delete
47:13 - note so we're going to say const find
47:16 - trip and we're going to take in an
47:19 - ID okay and what we're going to do here
47:21 - is the following we're going to say
47:23 - return and this is going to be trips.
47:26 - data
47:27 - doind and we're going to look for a trip
47:31 - and this is going to be the trip. data.
47:34 - ID is equal to the ID that we're looking
47:37 - for what this is going to do is just
47:38 - grab the individual trip where the ID
47:41 - matches the ID that we're looking for so
47:42 - then we can actually modify this trip
47:45 - okay first thing we should do probably
47:47 - is learn how to add a note so let's uh
47:49 - Implement actually the add note function
47:52 - first okay so for add note we're going
47:55 - to do the following we're going to say
47:56 - con
47:57 - trip is equal to find trip and we're
48:01 - going to pass the trip ID now we're
48:03 - going to make sure the trip exists so
48:05 - we're going to say if not trip then
48:08 - return because if there's no trip well
48:10 - there's nothing we can do here we're
48:11 - then going to say con notes are equal to
48:14 - and we're going to grab the current
48:15 - notes that we have so we're going to say
48:16 - trip. dat. notes okay now what we want
48:20 - to do is add a new note into this so
48:22 - we're going to say notes do push and
48:25 - we're going to push our new note and
48:27 - then we need to update this trip now to
48:29 - update this trip we're going to say
48:31 - trip. update and then we're simply just
48:34 - going to pass an object with the fields
48:36 - we want to update so very simple we're
48:37 - going to say notes are now equal to the
48:40 - new notes that's it that allows us to
48:42 - add a new note so we just grab the trip
48:44 - find the current notes add a new note
48:46 - into it and then make sure we trigger
48:48 - this update operation update here is
48:50 - actually going to go to the database and
48:51 - perform that update perfect so that is
48:54 - adding a note now let's do deleting the
48:56 - trip itself so we're going to say con
48:58 - trip is equal to F trip we'll pass the
49:01 - ID and then we'll say if the trip exists
49:05 - then guess what it's as simple as saying
49:07 - trip. delete okay that's just going to
49:09 - delete it from our database now we're
49:11 - going to do the on delete note now for
49:14 - on delete note we're going to do the
49:15 - same thing here so we're going to find
49:16 - the trip so let's grab that and make
49:19 - sure that it exists if it doesn't exist
49:21 - we can return we also want to grab the
49:23 - notes so we're going to say Cod notes
49:25 - are equal to trip do dat. notes but this
49:29 - time we just want to filter it so that
49:31 - we have only the notes that don't match
49:33 - this note index because this is the one
49:35 - that we're removing so we're going to
49:36 - say trip. update and inside of here
49:40 - we're going to pass our new notes so
49:41 - we're going to say notes are equal to
49:43 - and then this is going to be
49:45 - notes. filter and when we filter this
49:48 - we're going to take in an underscore
49:50 - which would be the note itself but in
49:51 - this case I don't care about it so I'm
49:52 - just using an underscore and then index
49:55 - and then it's going to be index does not
49:57 - equal the note index and we got to spell
50:01 - filter correctly so that this works so
50:03 - what the filter is doing here is just
50:05 - returning all of the different objects
50:07 - that do not match this index which means
50:09 - we'll have all of them except the one
50:11 - that we want to remove and that's how we
50:12 - will update our note okay so that's
50:16 - pretty much it here in terms of deleting
50:18 - and adding the notes I guess the only
50:20 - way to know if this is working is to go
50:21 - to the code and test it so let's go here
50:24 - we can refresh you can see it takes a
50:26 - second they pop up here and let's try to
50:28 - add a note so let's do something simple
50:30 - like hello world and we can click on ADD
50:32 - and you can see the note gets added and
50:34 - then I can delete it let's try to delete
50:35 - a trip and you can see that it gets
50:38 - deleted great there you go I refresh
50:40 - it's still here and go hello world add a
50:42 - note say testing add a note and say new
50:48 - note add that in here and you can see
50:50 - all these notes get added and everything
50:52 - is working properly perfect so now that
50:54 - we have the trip list and we have have
50:56 - the ability to add a trip we want to add
50:58 - in this AI component that allows us to
51:01 - ask questions about our various trips
51:04 - now let's go back here and let's just do
51:07 - a few small things to make this look a
51:08 - little bit better first of all so what
51:10 - I'm going to do is just bring in a
51:11 - little bit of styling here uh for for my
51:14 - app so I'm going to go to app.css and
51:16 - I'm just going to copy in the CSS that I
51:19 - have from the GitHub you could probably
51:20 - just pause this and write it out as well
51:22 - if you want to and then I'm going to go
51:24 - to my app. TSX and I'm just going to
51:26 - make this a div and say class name is
51:30 - equal to card just so that we get a bit
51:32 - better styling here okay so I'm just
51:35 - adding a card and I've added that card
51:36 - styling and when I come back here you
51:38 - can see all of this now kind of gets
51:39 - wrapped in a card which looks quite a
51:41 - bit better okay now let's add that ask
51:45 - AI type feature so what we're going to
51:47 - do is go to component we're going to do
51:50 - ask AI dot uh and actually this will be
51:53 - all capitals do TSX We'll add styling as
51:57 - well so add or ask
52:00 - AI do
52:02 - CSS okay and let's start writing this
52:06 - okay so we're going to say
52:08 - import UST state from react we're going
52:14 - to say import and this is actually going
52:15 - to be use squid now a hook that's coming
52:18 - again from the react SDK and then we're
52:20 - going to import our stylesheet so ask
52:24 - ai. CSS and let's make sure we have the
52:26 - do slash this time now let's stub the
52:29 - components we're going to say function
52:31 - ask Ai and this can return a fragment
52:36 - currently and then what I'm going to do
52:38 - is say
52:39 - export
52:40 - default ask AI okay so I just want to
52:44 - get this kind of stubbed so we can start
52:45 - writing it in one second let's go to
52:48 - app. TSX and let's just render it above
52:51 - all of this so that it's already there
52:53 - when we want to start testing it okay so
52:55 - now we have ask AI here as one of the
52:57 - components we're rendering in app. TSX
53:00 - however before we can start using aski
53:03 - we need to actually build in this AI
53:05 - integration that allows us to interact
53:07 - with our database now this is where
53:09 - we're actually going to go to the back
53:10 - end and we're going to write a squid
53:12 - service so when I go to backend here I'm
53:15 - going to go to Source I'm going to go to
53:17 - service and you see that we have this
53:18 - example service.ts what we're going to
53:21 - do here is remove this web hook service
53:23 - because we don't need this because this
53:25 - was resetting the counter beforehand and
53:27 - we're going to add in a new service
53:29 - which allows us to actually utilize an
53:31 - AI feature that queries our database so
53:34 - inside of here we're going to remove
53:35 - this import because we don't need that
53:37 - we're going to get rid of the web hook
53:38 - and we're going to replace that with
53:40 - executable now what we can do is we can
53:42 - use a decorator to Mark a function that
53:44 - we Define inside of this class as
53:47 - executable which means we can use it
53:49 - from the front end and execute some kind
53:51 - of operation in this case it's going to
53:52 - be interacting with an AI so we're going
53:55 - to say at execute utable and then we
53:58 - will put our parenthesis and we're going
54:00 - to define the name of our executable
54:02 - function so we're going to say async and
54:03 - then this is going to be ask question
54:07 - we're going to take in a question which
54:09 - is going to be a string and this is
54:12 - going to return a
54:15 - promise that returns a string okay now
54:19 - inside of here what we're going to do is
54:21 - we're going to grab an AI response which
54:24 - queries our database so we're going to
54:26 - say con and it's going to be AI response
54:29 - is equal to await and it's going to be
54:31 - this do squid we have access to that
54:34 - because we're extending the squid
54:35 - service from this class and from this do
54:38 - squid we're going to say Ai and then
54:41 - execute AI query and we're going to
54:44 - specify what database we want a query in
54:46 - this case is going to be the built-in
54:48 - database and what the question is going
54:50 - to be which is simply question so let's
54:52 - format that okay so the idea here is
54:55 - that what we can do is from our backend
54:57 - we have an executable function and we're
54:59 - using squid to generate an AI that can
55:03 - actually execute a query on the database
55:05 - so whatever the question is that we
55:07 - asked we'll just apply that to the
55:09 - database it will go actually create a
55:12 - query to grab information from the
55:14 - database based on whatever we asked in
55:16 - natural language to a real query then
55:18 - what it's going to do is format that
55:20 - nicely using some kind of llm model and
55:22 - give us that response now in the back
55:25 - end here in case we want to see what's
55:27 - actually going on we can log kind of
55:29 - what's happening with the question so we
55:32 - can put inside of backticks here
55:34 - question and then we can just render
55:37 - what the question was let's do that and
55:40 - then on the next line here we can say
55:43 - query and for the query we can Mark our
55:46 - AI response and this is going to be dot
55:50 - executed query and then we can do two
55:52 - question marks and say well if that's
55:53 - nothing then we're going to say no query
55:56 - executed and then down here we're going
55:58 - to have the
56:00 - explanation and for the explanation
56:02 - we're going to do a similar thing AI
56:03 - response do explanation and then
56:06 - question question mark and then we're
56:08 - going to have no explanation now the
56:11 - idea here is that what this is actually
56:14 - going to do is it's going to give us
56:16 - some kind of response but it's going to
56:17 - generate a query that will grab specific
56:20 - data from the database that it uses in
56:22 - that response it's then going to give us
56:23 - a step-by-step explanation of how it got
56:26 - that response or how it generated that
56:28 - which we're just logging in the back end
56:30 - so we can see what's actually going on
56:32 - then what we're going to do is return
56:33 - the AI
56:35 - response. answer we just want the kind
56:38 - of brief answer we don't want the
56:39 - explanation or the query that was
56:40 - generated and that's it we've now wrote
56:43 - a function that will actually interact
56:45 - with our database and we can now call
56:47 - this from our front end because we've
56:49 - wrapped it into the back end now rather
56:51 - than calling this example service we can
56:53 - call it something like AI query so let's
56:55 - go ahead and do that and then we're just
56:57 - going to update the Imports so now we're
56:59 - just going to ex uh export asteris from
57:01 - AI query so that when we actually deploy
57:04 - this uh we have that deployed as well
57:07 - okay so that is our AI query now let's
57:10 - look at how we actually use that from
57:12 - our front end all right so let's go to
57:14 - ask Ai and let's start writing this form
57:18 - because that's really what it is you're
57:19 - going to be importing uh or asking some
57:21 - kind of question so we need a way to do
57:22 - that so let's have our state we're going
57:25 - to say const this is going to be text
57:28 - set text is equal to use State we're
57:32 - then going to say
57:34 - const and this will be result and then
57:39 - set result is equal to use State we're
57:45 - then going to say const loading and then
57:47 - set loading because sometimes this can
57:49 - take a second so we want to have some
57:51 - kind of loading indicator we're going to
57:53 - say use State and that's going to be
57:54 - false and then we also need to use squid
57:57 - so we're going to say const squid is
58:00 - equal to use squid so that we can
58:03 - actually utilize that AI feature okay so
58:06 - now let's write our form so we're going
58:07 - to convert this into a div we're going
58:10 - to give this a class name of a container
58:14 - and then inside of this div we're going
58:16 - to have an H3 and we'll say ask a
58:19 - question like that okay now what we can
58:22 - do is have some input field so let's
58:24 - define our input we'll say the type type
58:26 - is equal to text we then will say the
58:29 - value is equal to text and we'll say on
58:33 - change is equal to we're going to take
58:36 - in E and then we're going to Mark our
58:38 - text as that so set text and this is
58:40 - going to be e.
58:42 - target.
58:44 - value okay now after the input we're
58:47 - going to have uh this kind of text that
58:49 - checks if we're loading so we're going
58:51 - to say loading question mark and then we
58:53 - can display some text that says loading
58:55 - dot dot dot otherwise uh we can display
58:58 - a button and this button can say ask
59:01 - okay and we're going to have an onclick
59:04 - equal to and then we're going to have a
59:05 - function here I'm going to say ask
59:07 - pressed let's define that function
59:09 - quickly we're going to say const ask
59:14 - press is equal to a function and we'll
59:18 - write oops what that is in one second
59:22 - okay now after that we're going to have
59:26 - something that checks if we have a
59:28 - result if we do have a result then we're
59:30 - going to display a field that shows what
59:32 - that result is if we don't have a result
59:34 - we're not going to show anything because
59:35 - we don't just want to show an empty box
59:37 - so this is kind of going to expand
59:39 - downwards as soon as we actually
59:40 - generate that result so we're going to
59:42 - say result and and and then we're going
59:44 - to have a div now let's close the
59:49 - div for the div we're going to have a
59:51 - class name the class name is going to be
59:53 - the result Dash container and then
59:57 - inside of this div let's format this
60:00 - nicely we are going to have a text area
60:03 - because we could have a long reply here
60:06 - and for the text area the value of
60:07 - course is going to be the result that
60:09 - was generated we're going to have a row
60:12 - and we'll just make this equal to four
60:13 - by default if you want it to be bigger
60:15 - to start then you can change rows and
60:17 - then we will have a button this button
60:20 - is going to say on click is equal to
60:24 - we're going to have another function in
60:25 - a second which will close the result box
60:27 - because sometimes you may want to do
60:28 - that and then we're going to have a
60:30 - class name and the class name is going
60:32 - to be equal to the close button so let's
60:35 - go close- button okay let's save and
60:39 - format and let's that function close
60:42 - result is equal to this and we can
60:44 - actually write this because it's very
60:45 - easy we're just going to say set result
60:47 - is equal to an empty string okay so now
60:51 - we have this ask AI form uh let's add
60:54 - the CSS forward and just see what it
60:56 - looks quickly uh what it looks like
60:58 - quickly sorry before we actually add the
61:00 - other functionality so I'm just going to
61:02 - copy this in again you can find this
61:03 - from the link in the description in the
61:05 - GitHub repository and now if we go back
61:08 - you can see that this is what our ask
61:10 - question form looks like we can type
61:12 - inside of here we have our box and there
61:15 - you go all right so now we're going to
61:17 - actually implement the ask pressed
61:19 - function which is going to in uh
61:20 - integrate with the AI that we wrote in
61:22 - the back end so first thing we want to
61:24 - make sure is that we have some text so
61:26 - we're going to say if no text then
61:29 - return because well if we don't have any
61:30 - text then we don't need to do anything
61:32 - then we're going to say set loading and
61:34 - this is going to be true now after this
61:37 - we're going to say our result is equal
61:40 - to a weight and that means this needs to
61:42 - be an async function so let's define
61:44 - that as async and we're going to say
61:46 - wait squid do execute and this is going
61:49 - to be function and then the name of the
61:51 - function is the one we defined in the
61:53 - backend which is ask question and then
61:55 - we're pass to this the text or the
61:58 - question then once this is finished
62:00 - we're going to say set results we're
62:02 - going to set the result we're going to
62:03 - set the text equal to an empty string
62:07 - because now we're finished with that
62:08 - question and we're going to say set
62:10 - loading equal to false now we could put
62:13 - this in a promise as well I use then.
62:15 - cat uh but this is totally fine this
62:17 - will take a second we're going to wait
62:19 - for that function to execute and again
62:21 - if we go to the back end you can see
62:23 - that we called it ask question because
62:26 - we marked it executable we're able to
62:28 - actually execute the function like this
62:30 - right using that it's going to go grab
62:32 - that query for us um using our database
62:34 - and then give us that response in the
62:36 - front end so actually before I test this
62:38 - out I'm just going to write the loading
62:40 - indicator because it can take a second
62:42 - to execute uh and I want to make sure
62:44 - that we have something that shows us
62:45 - that it's loading I know we have the
62:46 - text right now but it's not really a
62:47 - good indication so let's make a new file
62:50 - called
62:51 - loading
62:53 - indicator. TSX uh and inside of here
62:56 - let's write the component so we're just
62:58 - going to say
62:59 - import
63:00 - react from react we're then going to say
63:05 - const if we can type this correctly
63:08 - loading or actually let's do it how
63:10 - we've always done it
63:11 - function
63:13 - loading
63:15 - indicator and then function and here
63:19 - we're going to just return a div this
63:21 - div is going to have a class name equal
63:25 - to loading Das
63:28 - indicator okay and that's actually all
63:30 - we need now we can just say export
63:33 - default loading indicator and we can add
63:37 - some CSS so we're going to make a new
63:39 - CSS file and we're going to say loading
63:42 - indicator. CSS we're going to import
63:45 - that from here so we're going to say
63:47 - import. SL loading indicator. CSS and
63:51 - then we're going to copy in the CSS
63:53 - which is just a simple animation so
63:55 - let's
63:57 - copy that and we will put that here can
64:01 - get rid of the name and it's just going
64:03 - to have a nice spinning animation while
64:05 - this is rendering okay so now we have
64:06 - the loading indicator let's use it so
64:09 - here rather than loading we're just
64:10 - going to render the loading
64:14 - indicator and there we go let's save and
64:18 - that looks better okay so now we can go
64:20 - back here and test this out going to say
64:22 - hey what trip do I have
64:26 - in
64:28 - Barbados okay and we're going to ask
64:29 - that and now you see our beautiful
64:31 - loading indicator okay so you can see
64:33 - that this returned the answer it says
64:35 - you have one trip in Barbados here are
64:37 - the different details and it gives us
64:39 - the notes the start date the end date
64:41 - Etc obviously we can ask this a lot more
64:43 - questions uh but already pretty cool it
64:44 - can use our data to give us a relevant
64:47 - reply we could also integrate this with
64:49 - a lot of other AI feature so that it
64:50 - gets this and then passes it to some
64:52 - other AI that gives us maybe
64:53 - recommendations or something along those
64:55 - lines uh but that is kind of the basic
64:57 - functionality okay so now the core
65:00 - application is done right it's working
65:01 - we can delete stuff we can add stuff we
65:03 - have the AI integration using squid Ai
65:06 - and the next step is to actually deploy
65:09 - this out or see how you would deploy
65:10 - this application now there's a ton of
65:12 - other stuff you'd probably want to add
65:13 - to this to really polish it up uh but
65:15 - this is um kind of at least where I want
65:18 - to leave it for now so that you guys can
65:20 - make this your own and you're not just
65:21 - copying exactly what I have anyways
65:23 - let's talk about the deployment process
65:25 - proc So within the squid Cloud console
65:28 - here the squid AI console uh you can see
65:31 - that we actually have different
65:32 - environments we have a Dev environment
65:33 - and a production environment now
65:36 - obviously when you're doing development
65:37 - you're going to work in the dev
65:38 - environment and when you're going to
65:40 - production you're going to go to the
65:41 - prod environment but in our case right
65:43 - now our backend is just running locally
65:46 - on our own computer so what we're going
65:47 - to do now is actually deploy the back
65:49 - end to the dev environment so that
65:52 - someone that maybe is not running this
65:53 - back end but wants to be integrating
65:55 - with our project or messing around with
65:56 - it can still use that now this is kind
65:58 - of an intermediary between you know full
66:01 - development which is happening on our
66:03 - local machine and production so we're
66:05 - going to deploy to this Dev environment
66:07 - and then connect to it but obviously if
66:09 - you want to go to production then you
66:10 - can deploy to P I'm going to leave a
66:12 - link to a great script or a great uh
66:14 - kind of piece of documentation in the
66:16 - description that breaks down exactly
66:18 - what the difference between these
66:19 - environments are and how to do the
66:21 - deployment but I'll show you the simple
66:22 - deployment in this case to the dev
66:24 - backend envir enironment so let's go
66:27 - here and you can see if we go deployer
66:29 - backend it actually gives us the script
66:31 - that we can run now we don't need to run
66:33 - this script directly instead what we can
66:36 - do is we can go here and we can just
66:38 - shut down our project quickly so let's
66:40 - go ahead and do that and we're going to
66:42 - CD into our backend directory from here
66:45 - we can simply run the script which is
66:47 - npm run deploy and then when we do that
66:50 - we're going to end up deploying to that
66:52 - Dev environment so let's go ahead and do
66:54 - that okay so script is running and you
66:57 - can see that it is deploying this uh to
66:59 - the backend Dev environment and then I'm
67:01 - going to show you from the front end how
67:03 - we make it so we're going to connect to
67:05 - this deployed Dev back end rather than
67:08 - the one that's running locally on our
67:10 - computer okay so our code has been
67:12 - deployed now and I want to show you how
67:14 - we connect to this environment so
67:16 - instead of connecting to the locally
67:18 - deployed back end which could be
67:19 - changing constantly it might have bugs
67:22 - it might be just what we're using
67:23 - ourselves to actually test things out we
67:25 - might want to connect to the dev backend
67:27 - which maybe has some kind of stable
67:29 - version of the app and even though
67:30 - that's not necessarily in production you
67:32 - can treat it almost like a staging
67:34 - environment you can use it in different
67:36 - ways and you can check out that
67:37 - documentation but there's reasons why
67:39 - you might want to connect to that back
67:40 - end versus the locally running backend
67:42 - now to do that you need to go to the
67:44 - front end directory which we have open
67:45 - right here and to main. TSX and you just
67:48 - need to remove the squid developer ID
67:52 - when you remove this it's just telling
67:53 - your code actually to connect to to the
67:55 - deployed Dev backend rather than the
67:58 - local back end so now that we've done
68:00 - that what we can do is we can just CD
68:02 - into the front end directory and rather
68:04 - than running both the front end and the
68:06 - back end we can just run the front end
68:08 - and we can do that with npm run Dev so
68:11 - now it's just going to run the front end
68:12 - uh as we had before and if we go back to
68:15 - our app you can see that it is running
68:17 - uh and now we can just try doing what we
68:19 - did before so let's try to maybe delete
68:21 - the note you can see that works let's
68:23 - try to add a new country uh maybe Taiwan
68:26 - and we can go I don't know let's go July
68:29 - 10th to the 12th even though that date's
68:33 - already passed that's fine we can add
68:35 - that in we're going to say hello world
68:38 - new note Okay add that in we say we want
68:42 - or I want to learn the
68:47 - language okay that's fine now let's ask
68:50 - a question what am I doing in Tai one
68:55 - okay and it should give us some response
68:57 - and maybe tell us about the notes that
68:58 - we have there so you can see here we got
69:00 - a response and it says that we have an
69:02 - interest in learning the language then
69:03 - it just came up with something that's
69:05 - reasonable for hello world new note and
69:07 - it suggust we're both exploring and
69:08 - engaging with the culture of Taiwan okay
69:10 - it's not necessarily true but that's
69:12 - fine just coming up with something that
69:14 - is reasonable and again here we are
69:16 - connected to the deployed Dev backend
69:18 - not the local back end because that's
69:20 - actually not even running we're just
69:21 - using the front end here which again is
69:24 - another reason why I like because it's
69:25 - just so easy to do that deployment and
69:28 - get our code in a way that we can
69:29 - actually start sharing it with other
69:31 - people so that is pretty much it for
69:34 - this video uh if you wanted to view some
69:36 - logs or you want to check out the
69:37 - backend yourself you can go and see the
69:39 - different Integrations for example we
69:41 - can see in the back end that we have the
69:43 - executable functions so ask question we
69:45 - have one execution gives us the latency
69:47 - uh Etc we can go and look at things like
69:50 - the usage logs and you can see the log
69:53 - that was generated when we actually
69:54 - asked that question so I think guys with
69:57 - that said I am going to wrap up the
69:58 - video here hopefully you enjoyed this
70:01 - application you learned a bit about
70:02 - squid and how to create a cool AI app
70:04 - with a front end backend and full
70:07 - deployment if you enjoyed make sure you
70:08 - leave a like subscribe to the channel
70:10 - and I will see you in the next one
70:14 - [Music]