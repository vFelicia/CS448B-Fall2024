00:02 - [Music]
00:06 - hello everybody and welcome back I'm
00:08 - going to apologize right now for this
00:10 - long introduction but what I'm trying to
00:12 - do in this video is teach you software
00:14 - design at a very fundamental level so
00:17 - I've heard you guys loud and clear a lot
00:19 - of you are sick of the beginner
00:20 - tutorials you're sick of people assuming
00:22 - you know nothing and you want to get
00:24 - more into the intermediate and advanced
00:25 - level you want to figure out how do I
00:27 - design software how do I look at some
00:29 - system some program and come up with
00:31 - some kind of plan some kind of
00:32 - implementation approach or strategy that
00:35 - is exactly what I'm gonna be showing you
00:36 - here so on the left hand side of my
00:38 - screen you can see that we have this
00:40 - kind of mock software system that I've
00:42 - just come up with this completely random
00:44 - example that I just wrote up before this
00:46 - video and what we're gonna be doing is
00:47 - looking at this block of text here which
00:50 - you can really think of as the client
00:52 - you can think of is this is what the
00:53 - client wants this is what the person
00:55 - you're writing code for wants how do you
00:57 - take simply these four paragraphs here
00:59 - and translate that into a fully
01:01 - functioning software system that is
01:03 - exactly what we're gonna be doing here
01:05 - so we're gonna look through this we're
01:06 - gonna go through the process of picking
01:08 - up valuable information and then what
01:10 - we're gonna do is actually draw up a
01:12 - class diagram that has what our plan is
01:14 - going to be when we start implementing
01:16 - this and that leads me to my next point
01:18 - which is planning when you want to get
01:20 - out of that intermediate or you want to
01:22 - move from kind of intermediate to more
01:24 - advanced you already know how to program
01:26 - the next step is thinking about
01:27 - designing programs designing software
01:30 - it's not enough to be good at
01:31 - programming what you need to do is
01:33 - actually be able to think about the kind
01:35 - of overarching architecture of the
01:38 - program that you're writing you want to
01:40 - think of okay how are these objects
01:41 - these classes this system going to
01:43 - interact with other things and how can I
01:46 - think about all of these things before I
01:47 - actually start writing code that is what
01:50 - we are going to be doing here so without
01:52 - further ado let's go ahead and get
01:54 - started I'm gonna read through this
01:55 - design problem here there will be a link
01:57 - in the description if you prefer to read
01:59 - through that yourself I would encourage
02:00 - all of you before I go ahead and start
02:02 - doing all of this for you and showing it
02:04 - to you that you think about how you
02:06 - might design something that looks like
02:07 - this and if you were immediate thought
02:09 - as I have no idea then while this video
02:11 - is going to be perfect for you because
02:13 - I'm going to
02:13 - show you exactly how we can do this so
02:16 - let's go ahead and read through this so
02:19 - the problem I've had here is a design
02:21 - problem tech with Tim school of
02:23 - programmers so I just kind of made this
02:24 - name up I thought it would make sense I
02:26 - assume a lot of you guys are students or
02:28 - you were at one point a student so I
02:30 - think this will relate to a lot of you
02:31 - and the idea here is that the tech with
02:34 - Tim school of programmers needs a new
02:36 - system to track all of its students
02:37 - professors and courses so think of this
02:40 - as some kind of like you know mini
02:41 - University or something and they want a
02:43 - system or a database or something like
02:45 - that where they can track all of this
02:46 - information maybe they can ask some type
02:48 - of questions about a student they can
02:50 - check grades they can see who's teaching
02:52 - a course that's what this really is so
02:54 - we'll go through the details here but it
02:56 - wants to keep track of what courses are
02:57 - offered who teaches each course and
02:59 - which students are enrolled in those
03:01 - courses it what else would like to be
03:02 - able to track the grades of each of its
03:04 - students across all courses for each
03:06 - student and professor the school needs
03:08 - to know their address phone number and H
03:10 - so immediately even in just this first
03:12 - paragraph this has told us a lot we need
03:15 - a system right because we're just
03:17 - thinking about what is it that we
03:18 - actually need from the system these are
03:20 - really the requirements that are being
03:21 - listed out here and this system needs to
03:23 - keep track of students it needs to keep
03:25 - track of professors and it needs to keep
03:27 - track of courses what else doesn't need
03:29 - to keep track of well for each person we
03:31 - need their address their phone number
03:33 - their name and their age so let's keep
03:35 - that in mind we'll read through the rest
03:36 - and then we'll distill all of this ok so
03:39 - each course has a maximum and minimum
03:41 - number of students that they can enroll
03:43 - if the minimum number of students is not
03:45 - reached then the course will be canceled
03:47 - each course is taught by at least one
03:49 - professor but sometimes may be taught by
03:51 - many so in some situations there may be
03:53 - more than one professor that teaches the
03:55 - course all right professors are salaried
03:58 - employees at the tech with Tim School of
03:59 - programmers and therefore we need to
04:01 - keep track of how much they make each
04:03 - year if a professor teaches more than
04:05 - four courses in a semester they are
04:07 - granted a one-time bonus of $20,000 all
04:10 - right
04:10 - students can both can be both local or
04:13 - international students and full or
04:15 - part-time a student is considered a
04:16 - part-time student if they are enrolled
04:18 - in less than one or two courses during
04:20 - any given semester so actually sorry
04:22 - this should say if they are enrolled in
04:24 - one or two courses during any given
04:26 - semester so essentially you are
04:27 - part-time if you were taking two or less
04:29 - courses in a semester the maximum amount
04:32 - of courses a student may be enrolled in
04:33 - at one time is six students receive
04:36 - grades from each course these grades are
04:37 - numeric in in the range of 0 to 100 any
04:40 - students that have an above-average
04:42 - grade across our have an average grade
04:44 - sorry across all enrolled courses that
04:46 - are lower than 60% is said to be on
04:48 - academic probation so I apologize for
04:51 - butchering butchering some of that
04:52 - speech there but the idea here is we
04:55 - have this system it's fairly simple we
04:57 - need to keep track of students
04:59 - professors those students grades across
05:01 - all of the courses there's a few small
05:03 - nuances within that but this should be
05:05 - something that we're gonna be able to
05:06 - design and hopefully in the next you
05:08 - know 30 45 minutes with me explaining
05:10 - everything that I'm doing
05:11 - so given this block right given this
05:14 - text what we need to do now is translate
05:17 - this into a program and the first thing
05:19 - that I want to do is start thinking
05:20 - about all the information that I
05:22 - actually need to track and all of the
05:25 - potential classes I'm going to have in
05:27 - my UML class diagram so we're gonna
05:29 - design this using an object-oriented
05:31 - style which is very common and what most
05:33 - people kind of do and this doesn't
05:35 - necessarily mean that what I'm gonna
05:37 - design here will be the final
05:39 - implementation that we actually program
05:41 - up this is just kind of the thing that
05:43 - is you know our design this is what we
05:46 - thought this is our plan it's totally
05:47 - fine if we decide to deviate from this
05:49 - later
05:50 - especially if other things come up but
05:52 - we should at least have some kind of
05:54 - idea of what we want to do then we can
05:56 - follow about when we actually start
05:57 - coding so what I'm gonna do is have two
06:00 - windows here one on the left one on the
06:02 - right and I'm going to start listing
06:03 - first of all all of the classes that I
06:05 - think we should actually have based on
06:08 - the information I've seen here and this
06:10 - is kind of the first step think about
06:12 - all of the objects you might have in a
06:14 - system all of the main components that
06:16 - might have information within them so
06:19 - the first thing I'm gonna list here is
06:21 - students right we will probably have a
06:23 - student class because we're gonna have
06:25 - multiple students the next thing we're
06:27 - probably gonna have is well professors
06:30 - now I don't know if that's how you spell
06:32 - professors but and we'll put that there
06:33 - so we're gonna have a student class and
06:35 - a professor class because we're gonna
06:36 - need both a student and a professor and
06:38 - this
06:39 - has different information contained in
06:41 - it than the professor dis awesome
06:43 - alright so student professor next thing
06:45 - we need is probably a course right we're
06:47 - gonna have different courses those are
06:49 - gonna be taught by professors and those
06:50 - are gonna be taught by students and
06:52 - after reading this are not taught by
06:54 - students or I students will be enrolled
06:55 - in that course and after reading this
06:57 - first paragraph that is kind of what
07:00 - I've grabbed from that so I've said okay
07:01 - we need to keep track of students
07:03 - professors and courses all we need to
07:04 - see what courses are offered who teaches
07:06 - the course who's enrolled keep track of
07:08 - grades okay so that mate brings me to
07:10 - grades so now I need to keep track of
07:12 - greats how am I gonna do that well we'll
07:15 - keep moving and then we'll think about
07:16 - how that's gonna happen so each course
07:18 - has a maximum and minimum number of
07:20 - students that can enroll if the minimum
07:21 - number of students has not reached in
07:22 - that course will be canceled each course
07:24 - is taught by at least one professor but
07:26 - sometimes taught by many okay so that
07:27 - doesn't give me any more classes I don't
07:29 - think right now at least and let's keep
07:31 - going professors are salaried employees
07:33 - at Tech with Tim schooled programmer and
07:34 - therefore we need to keep track of how
07:35 - much they make a year okay that doesn't
07:37 - says say anything to me students can be
07:39 - both local or international a student is
07:42 - considered a part-time student if
07:43 - they're enrolled there one or two
07:44 - courses during any given semester that
07:47 - the duh duh okay and now after reading
07:49 - all of this what I've determined is we
07:51 - have student we have professor we have
07:53 - course the only thing we're really
07:54 - missing here is a way of keeping track
07:56 - of who is enrolled in what course and
07:58 - what grades each of these students have
08:00 - so what I'm actually going to do is I'm
08:03 - going to make a class called enroll now
08:06 - this is gonna seem weird but what this
08:07 - enroll class is going to do for us and
08:09 - it will make more sense as we go through
08:11 - this video is essentially link our
08:13 - students and our courses so essentially
08:16 - we have a way to say ok this course is
08:18 - taught by this professor and this
08:20 - student is enrolled in this course the
08:23 - reason I want this enroll is because
08:25 - this enroll will essentially tell me if
08:27 - first of all if this course is active
08:30 - right you know is there enough people in
08:31 - this course that this student this
08:33 - enrollment was successful that's
08:34 - something we could keep track of on the
08:36 - in rural class and it can keep track of
08:38 - the grade that the student had in the
08:41 - course we need some way to keep track of
08:43 - all of the grades for all of the courses
08:45 - for all of the students and this enroll
08:47 - class could be a way to do this now keep
08:49 - in mind that I might change this as we
08:51 - go through and
08:52 - I start drawing things out it might make
08:54 - more sense to do something else but this
08:56 - is my initial idea and this is where I'm
08:57 - starting from this is my starting ground
08:59 - and this is what I'm thinking about
09:00 - right now and this is what you should
09:02 - think about when you are reading some
09:04 - requirements that look something like
09:05 - this
09:06 - okay so I've settled on these four
09:08 - classes for right now these could change
09:10 - again I'm trying to walk you through the
09:11 - process as fully as we can so you really
09:14 - understand and these are the four
09:15 - classes that I think I'm gonna need
09:17 - student-professor course and this enroll
09:19 - one is gonna link those courses and
09:21 - those students together and store some
09:23 - information and it may be like the date
09:25 - we enrolled in the course something like
09:26 - that okay so now that I have that what
09:29 - I'm gonna do is I'm gonna spread these
09:30 - out and I'm gonna start listing
09:32 - information that I need to keep track of
09:34 - for students professors and so on so now
09:39 - what I'm gonna do is start looking at
09:40 - what information do I need for students
09:42 - so down here it says a student can be
09:44 - both local or international full or
09:46 - part-time so the first thing I'm gonna
09:48 - say is we'll say local and that will be
09:51 - a boolean value that's either gonna be
09:53 - true or false is this student local or
09:55 - are they not and in fact what I actually
09:57 - might make this is just international
10:01 - international I think that's right and
10:03 - this will just tell me if the students
10:04 - international or not and that will tell
10:07 - me if they're local right because it's a
10:08 - true or false value so we'll keep that
10:10 - as an attribute of my student class
10:12 - that's some type of information we're
10:14 - gonna need to know and then it says the
10:15 - student can either be full or part-time
10:17 - okay so we could consider that to be an
10:20 - attribute of the student whether they're
10:22 - full or part-time but how is that
10:24 - attribute derived that is derived based
10:26 - on the number of courses that they're
10:28 - enrolled in during a given semester so
10:30 - instead of making this an attribute what
10:32 - I'm actually gonna do is say well
10:33 - something that I need on my student is
10:35 - gonna be a method and the method is
10:37 - gonna say is part-time and this will
10:41 - simply return a boolean and what this
10:43 - will do is it will look at this student
10:45 - and tell me how many courses are
10:47 - enrolled in and if it is greater than
10:48 - the threshold of the part-time student
10:51 - then they will not be a part-time
10:52 - student right that is what this method
10:54 - will do so things that we start thinking
10:56 - about is how are we gonna implement this
10:58 - kind of attribute well we're gonna do
11:00 - that using a method so we can determine
11:02 - if a student is full or part-time okay
11:04 - so the maximum an amount
11:06 - courses a student may be enrolled in is
11:07 - six students receive grades okay and
11:10 - then what else does it say here if the
11:13 - average grade is lower than 60% they're
11:16 - on academic probation
11:17 - so this one is derived from their grades
11:19 - so again since it is a derived attribute
11:22 - it's not simply just something that's
11:23 - going to sit there what I need to do is
11:25 - have a method that tells me hey are they
11:28 - on probation so we'll say is on
11:31 - probation like that alright so we'll put
11:35 - that there and then this will be boolean
11:37 - and what these methods are intending to
11:39 - do is to look at attributes on the
11:41 - student evaluate them and then give us
11:43 - an answer to give us these kind of
11:46 - attitudes right are they part-time or
11:47 - are they on probation okay so now that
11:49 - we have that let's move to Professor
11:51 - don't worry there's a lot more stuff
11:53 - that I'm gonna add in here but I want to
11:54 - talk about that later so professor what
11:57 - do we need here well a professor we need
11:59 - to keep track of their salaries so first
12:01 - thing we'll say is salary and this will
12:03 - be a number right we're an int or
12:05 - whatever you want to call it well
12:06 - actually probably would be a float
12:08 - because they could have a decimal point
12:09 - salary so we'll put a salad right there
12:12 - what else do we need for a professor
12:14 - well there's nothing else on here that
12:15 - it really says we need other than their
12:17 - age name phone number etc which we'll
12:19 - get to in a second so for that I'm gonna
12:21 - leave it there now of course what do we
12:23 - need for a course well it doesn't
12:25 - specifically say there's anything we
12:27 - really need for a course but what I'm
12:29 - gonna have for a course of course
12:30 - is the name I'm gonna have the course
12:32 - code because that's something that we're
12:33 - probably gonna need the name will be a
12:36 - string the code will be a string as well
12:39 - actually and then what else do we need
12:41 - we need be minimum and maximum amount of
12:43 - students in the course we'll save min
12:45 - students that'll be an int and we'll say
12:48 - max students and that will be an int and
12:51 - then what I'm actually gonna have is
12:53 - well we need to determine is this course
12:55 - active or is it canceled so is this
12:57 - going on do we have enough students in
12:59 - this course for it to happen so what are
13:02 - we gonna do we're gonna add a method
13:03 - that says is active or will say is
13:07 - canceled just because that goes more
13:09 - with the requirements that we have there
13:10 - so we'll say is canceled boolean and
13:13 - what this will do is look at all of the
13:15 - students enrolled in this course and
13:17 - tell us if there is enough so
13:19 - it's canceled or it's not canceled right
13:21 - I hope that makes sense okay so we have
13:23 - student we have professor we have course
13:25 - another thing that I'm thinking we might
13:27 - want to do is have something like the
13:29 - start time for this course it doesn't
13:31 - necessarily say that we need that but if
13:34 - I'm thinking about my program in the
13:36 - future it probably makes sense to have
13:38 - something like start time right like
13:39 - when did this course start what you
13:41 - might want to keep track of it so we'll
13:43 - say start and we'll say that's a date
13:45 - and then while we're at that we might as
13:46 - well put an end as well and we'll say
13:48 - that that's gonna be a date - so
13:50 - hopefully you get the idea that what I'm
13:51 - doing is just going through and picking
13:52 - out all the necessary information and
13:54 - just listing it out so I can see it
13:56 - before I actually start drawing anything
13:58 - so we have student professor course and
14:00 - then we have enroll okay so enroll what
14:03 - do I need for enroll well this is gonna
14:05 - keep track of how my students are
14:07 - enrolled in courses so for enroll what
14:11 - I'm gonna do is I'm simply gonna say
14:12 - date so we'll literally say the date is
14:15 - gonna be a date so this is when this
14:17 - happened so when did they enroll we're
14:19 - gonna need what students enrolled what
14:21 - course enrolled and then we're also
14:24 - going to need B grade that the student
14:26 - got in that course this for me is pretty
14:29 - much gonna keep track of hey this
14:30 - student is enrolled in this course and
14:33 - this is the grade that they received in
14:35 - this course and that will be a float and
14:37 - then anything else that we might want to
14:38 - keep track of that's specific between a
14:40 - student and a course but doesn't make
14:43 - sense to go in just the student or just
14:45 - the course would be information we put
14:47 - in enroll and for now I don't think of
14:49 - anything so I'm gonna leave it like this
14:50 - and this is kind of the core information
14:52 - I need except for this address phone
14:55 - number name and age now the reason I've
14:58 - left this out is because these are gonna
15:00 - require some more classes notice that
15:03 - for both a student and a professor we
15:06 - have some shared functionality here we
15:08 - have some shared attributes we have the
15:09 - address the phone number the name and
15:11 - the age so what I'm actually going to do
15:13 - is I'm gonna make another class here I'm
15:15 - gonna call it person and what this
15:17 - person class is gonna represent is a
15:19 - base class for both the student and the
15:21 - professor so the student the professor
15:23 - have some shared things that we want to
15:25 - know about them so let's put that into a
15:27 - base class that I'm gonna call person so
15:30 - inside of person what I'm gonna do here
15:32 - is
15:32 - say okay what do we need well we need
15:34 - the name so actually we're gonna have to
15:36 - say first name oops if we could type
15:39 - here so first name that'll be a string
15:41 - we're gonna say last name that will be a
15:44 - string as well what else do we need we
15:47 - need the age of this person so do I do
15:49 - age int like that I'm gonna ask you as a
15:52 - question here I can't really because
15:54 - it's not an interactive environment but
15:56 - think about if this age makes sense to
15:58 - put here does it make sense to have an
16:00 - attribute called age because we want to
16:01 - keep track of the age right it says we
16:03 - need the age in this person class so
16:05 - think about it for a second okay I'm
16:07 - assuming you've thought about it and I'm
16:08 - gonna tell you right now that it makes
16:10 - no sense to put an attribute called age
16:12 - which is an int the reason you never put
16:15 - an attribute called age on something is
16:18 - because an age changes and guess what an
16:20 - age is derived from your birthdate so on
16:23 - the current date versus your birth date
16:25 - that determines your age so rather than
16:27 - keeping track of the age we want to keep
16:29 - track of the date of birth which will
16:33 - tell us the age right we can very easily
16:35 - find the age if we have the date of
16:37 - birth so this is gonna be a date so that
16:39 - was a little bit of a trick I put in
16:40 - there just to see if I could fool you
16:42 - guys okay next thing we need is a phone
16:44 - number so let's say phone number if we
16:46 - can do this like this so phone number
16:49 - and that is gonna be a what is this I
16:52 - guess we could call it I'm gonna call it
16:54 - a string just because we can have like
16:55 - the plus one - yada yada yada
16:58 - there might be a specific attribute we
17:00 - could use for that but a string it's
17:01 - fine I think you guys get that all right
17:03 - now we need B address so what is it in
17:06 - address comprised of though is my
17:08 - question here these address really an
17:11 - attribute that I can put can I just put
17:13 - a dress like that well the answer is yes
17:15 - you can do that but what I usually like
17:18 - to do just to make things easier for
17:20 - myself in the future is make a separate
17:22 - class called
17:24 - address and it stores all of the
17:26 - information in separate fields about the
17:28 - address so this way I can very easily
17:30 - grab information from the address I can
17:33 - sort by people that are living in a
17:35 - certain area it just makes things a lot
17:37 - easier especially if you're thinking
17:38 - about a database structure in the future
17:40 - if you have a bunch of attributes that
17:42 - could be squished in one separate out
17:44 - into individual fields
17:46 - let's look at this address what is an
17:48 - address well we need a country we need
17:50 - kind of a state or a province I'll just
17:52 - call it a state but like it could be a
17:54 - province that might make more sense
17:55 - we're going to need a street
17:58 - we'll need a street number so we could
18:01 - call this the street address and that
18:03 - could be one thanks we need country
18:05 - states we're going to need a city we
18:08 - need the street address and then we need
18:11 - a postal code or zip code or something
18:13 - like that so let's just go postal code
18:15 - now these country this is gonna be a
18:17 - string almost all of these are gonna be
18:19 - strings actually this is gonna be a
18:21 - string this is gonna be a string I think
18:24 - almost all of these are gonna be strings
18:26 - and the postal code will be a string as
18:28 - well so those string and street address
18:31 - needs to be one word okay so now we have
18:33 - information relate to an address if we
18:35 - wanted to add some more information
18:36 - about address like maybe you wanted to
18:38 - get really specific and go long gets you
18:40 - latitude something like that you could
18:42 - technically add that to this class and
18:44 - now what we kind of have and let me go
18:46 - over here and make this a bit bigger is
18:48 - all of the information that we needed
18:50 - out of this problem right here I've kind
18:53 - of taken it out I've read through
18:54 - everything we needed to and I've said
18:56 - the information I need to store is the
18:57 - following I need an address that has all
18:59 - of this I need a person that has all
19:02 - that I need a student a professor a
19:03 - course and in enroll class that stores
19:06 - the date and the grid awesome now the
19:08 - next thing to consider is what we call
19:10 - associations so I've listed all the
19:13 - attributes specific to these classes but
19:15 - these classes can associate with each
19:17 - other in fact you know the address is
19:20 - going to belong to a person right each
19:22 - person needs to have an address a
19:24 - student is going to be enrolled in a
19:26 - course through this enroll class a
19:28 - professor is going to be teaching a
19:30 - course so how do we go about and do that
19:32 - well this is where we use associations
19:35 - now associations are different from
19:37 - attributes they are a way of linking two
19:41 - objects together and the next part of
19:43 - what we're gonna do here is pretty much
19:45 - determine how we want to associate all
19:48 - of these objects and once we draw that
19:50 - out and we have the association's don't
19:52 - be focused on the implementation in code
19:54 - just be focused on how these objects
19:57 - interact with each other because if we
19:59 - can understand
19:59 - and that we can very easily implement
20:02 - that into code later on using whatever
20:04 - programming language we want and that's
20:06 - why you'll notice you know I'm not using
20:08 - STR like I've normally would in Python
20:10 - I'm just writing things that are
20:12 - descriptive enough that anybody in any
20:14 - programming language could look at this
20:16 - and translate this into some kind of
20:18 - working implementation so let's keep
20:21 - this on the side of our screen here I'll
20:23 - make it a little bit smaller and I'm
20:25 - gonna pop up actually one note and start
20:27 - doing some drawing so let me grab my
20:28 - drawing tab and I'll be right back
20:30 - alright so I've shut off my camera here
20:32 - just to give us the most amount of
20:33 - screen real estate as possible and what
20:35 - I'm gonna do is I'm gonna start I'm
20:37 - gonna start by apologizing for my
20:38 - drawing skills because they are very
20:40 - poor but I'm actually going to draw what
20:43 - we've just kind of done on the left hand
20:45 - side of the screen here and put it into
20:47 - a visual picture so we can actually see
20:48 - what's going on so I want to draw all of
20:50 - these classes and I'll tell you what all
20:53 - of the things that I'm drawing mean and
20:55 - then what we'll do is actually link them
20:56 - up just using a lines so essentially I'm
20:58 - gonna draw all these little boxes that
21:00 - look like this you know I'm gonna write
21:02 - here this is a person and then I'll put
21:04 - in all of the associations for that
21:06 - person then we'll have another class
21:08 - over here and what a line like this
21:10 - means is an association so essentially
21:13 - this person interacts with this other
21:15 - class and what we can do is put little
21:17 - numbers and symbols on this Association
21:20 - to tell us what this Association is is
21:23 - this a one-to-one Association which
21:26 - means one class links to one other class
21:29 - or does this mean this one class could
21:30 - look to many other classes is there a
21:32 - limitation on the amount it can link to
21:34 - well that's what we're gonna put here
21:37 - and the idea is that you can write two
21:39 - numbers so if you write one number what
21:41 - this states is that is the amount of
21:43 - associations so when I write one this is
21:46 - saying that this person class one of it
21:48 - can link to many which is what the
21:51 - Asterix stands for of whatever this
21:53 - class over here might be if I write
21:55 - something like 1 dot dot - so say let's
21:59 - replace this with 1 dot dot - what this
22:02 - means is that we could have one or two
22:04 - person classes if I write one dot dot
22:08 - asterisks this says the minimum we can
22:10 - have is 1 the maximum we can have is
22:13 - infinite if I write just in asterisks
22:16 - which is just my crappy star like this
22:17 - this means we can have as many or as
22:19 - little of whatever is on this side as we
22:22 - want so I hope that makes sense it will
22:24 - make more sense as we go through this
22:26 - but I just wanted to give you a little
22:27 - definition for we go too far all right
22:30 - so let's delete that let's get back into
22:33 - this so the first class and I'm actually
22:34 - gonna draw is my person class now
22:37 - remember my person class is gonna be a
22:39 - base class so let me just up this pen
22:41 - size a little bit to make a little bit
22:43 - easier so let's draw a class like this
22:45 - I'm gonna try very hard to keep this
22:48 - neat enough that you can read but it is
22:50 - hard to do with the drawing tablet so
22:52 - we're gonna say that's person and what
22:53 - does a person have on it first name last
22:56 - name date of birth phone number now just
22:57 - to keep this video shorter I'm gonna
22:59 - avoid writing the actual type of what
23:02 - these are so I'm not gonna write string
23:04 - and all that I'm just gonna write the
23:06 - actual name of the attribute so we'll
23:07 - say here this is first name okay so what
23:11 - I do a little - like this what I'm
23:13 - saying is this is an attribute so I'm
23:15 - essentially saying this is some piece of
23:17 - information that is contained within
23:19 - this class so I'm saying first name I'm
23:21 - gonna say a last name like that what
23:25 - else do we need date of birth okay
23:27 - date of birth next we need a phone
23:32 - number okay so let's go there all right
23:36 - I don't think that's too bad thank you
23:37 - guys can kind of read that so there we
23:39 - go person first name last name date of
23:40 - birth the phone number
23:41 - okay now this a member is the base class
23:45 - for my student and for my professor so
23:47 - in order to illustrate that what I'm
23:49 - gonna do is I'm gonna draw two more
23:50 - classes underneath this and I'm gonna
23:52 - show you kind of a fancy arrow that we
23:54 - can use to illustrate that this is a
23:56 - base class and this is a generalization
23:58 - so I'm going to draw my two classes here
24:00 - this is gonna be one for my student so
24:04 - I'll say actually student will go on the
24:05 - other side sorry actually maybe not
24:07 - let's just leave student here student
24:09 - and this will be professor like that
24:12 - okay so we have our student and we have
24:14 - our professor now let's write what we
24:16 - need inside of here so for our professor
24:18 - we just had the salary and for our
24:21 - students we had what is it international
24:23 - okay so international
24:27 - and then we had two methods on our
24:29 - student now usually you do a method
24:31 - using a plus sign what this says
24:33 - essentially is this is a public method
24:35 - everyone else can see this there might
24:36 - be more methods on the student or on the
24:39 - professor in the future but if they are
24:41 - not public we don't write them down
24:42 - because we're just interested in what
24:44 - you know all of these classes how
24:46 - they're gonna interact together and what
24:47 - they can see on each other so we have
24:49 - student and we'll say is part time put
24:54 - some brackets and we'll say on probation
24:57 - I'm just gonna write probation just to
24:59 - make it a little bit shorter will write
25:01 - probation and we'll have two brackets
25:02 - again if you can't read any of this look
25:04 - on the side that's why I typed it out
25:05 - now to illustrate that these are
25:08 - actually going to be a generalization so
25:10 - that this is the base class for those
25:13 - two other classes what you do is you
25:15 - simply do an arrow like this that is not
25:17 - filled in and you just do a little line
25:20 - to these two classes so what this says
25:23 - essentially is that this student and
25:24 - this professor are derived from this
25:27 - person class so they are children class
25:29 - of this base class person now what this
25:32 - means is essentially that they have all
25:34 - of these same attributes and
25:35 - functionality as this person class so
25:38 - any associations that are made between
25:40 - person and some other class will apply
25:42 - to both of these classes because they
25:45 - are a generalization of this class
25:47 - they're just a specific instance of a
25:49 - person right I hope that makes sense so
25:51 - let's say we had a teaching assistant
25:53 - then all we would do is just go like
25:55 - this and now all we have to add is
25:57 - anything specific to the teaching
25:59 - assistant if we want them to be a
26:01 - derived classroom person so that is as
26:03 - easy as that is and this is a very
26:05 - common thing when you're designing
26:06 - systems to have a base class that
26:08 - represents kind of the core
26:10 - functionality and then have specific
26:12 - instances or specific classes underneath
26:14 - that that have the additional
26:15 - functionality you need so we have
26:17 - persons student professor what do we
26:19 - need next we need an address now who
26:22 - hasn't addressed well a student and a
26:24 - professor both have an address so what
26:27 - I'm gonna do up here is I'm gonna draw
26:28 - my address like this and just butcher
26:32 - all of this once again okay so address
26:34 - like that and let's go here and let's
26:39 - write what we need for the address
26:41 - we have a country okay we have a city we
26:46 - have a state which I forgot and then I'm
26:51 - just gonna put dot dot dot you get the
26:52 - point we have a street address and a
26:53 - postal code I don't think I need to go
26:55 - through all of it I think you guys get
26:56 - the point now what I'm gonna do is
26:58 - actually draw our first Association so
27:00 - what I just did down here is called a
27:02 - generalization now that means that these
27:05 - things are not associated they are
27:07 - actually like the same thing right like
27:08 - a student is a person and a professor is
27:10 - a person so that is why they are called
27:12 - a generalization when we do this kind of
27:15 - arrow like that now what in association
27:18 - is is a solid line between two classes
27:21 - that says hey every time I make one of
27:24 - these classes I can potentially have
27:27 - this one linked up to it in some way and
27:29 - now what I do is I define the
27:32 - multiplicity is what it's called of my
27:34 - association so essentially how many of
27:37 - these things can be associated together
27:38 - well it turns out that one person can
27:41 - actually have multiple addresses right
27:43 - that is very possible that they have
27:45 - multiple addresses so what I'm gonna do
27:47 - is I'm gonna say one person here because
27:49 - an address can only belong to one person
27:52 - will say one address is unique to one
27:54 - person although in theory that's not
27:56 - correct you could have brothers or
27:58 - something that have the same address but
27:59 - for our system we're going to assume
28:00 - that this address object maybe there'll
28:03 - be one that's exactly the same that's
28:05 - totally fine but they will only belong
28:07 - to one person they will not be attached
28:09 - to two different people in other words
28:11 - we won't have person one here in person
28:13 - to here pointing to the same address
28:15 - that won't ever happen they will be two
28:17 - unique objects so we're gonna say one
28:19 - and then here I'm actually going to say
28:21 - asterisks and what I'm gonna do is say
28:23 - one dot dot which essentially says that
28:25 - one person must have at least one
28:28 - address but they can have as many as
28:30 - they want so the lower bound is one the
28:33 - upper bound is infinite which means this
28:35 - person could have infinite amount of
28:37 - addresses we don't know where they're
28:38 - gonna live or how many addresses they
28:40 - have and they have to have at least one
28:42 - or they have to at least tell us about
28:44 - one for us to enter them into the system
28:46 - so when you see something like this this
28:49 - says that as soon as I make a person I
28:51 - must create an address that is
28:52 - associated with that person and
28:54 - same thing over here on address this
28:56 - says whenever I make an address I must
28:58 - have a person that is associated with
29:00 - that address as easy as it is that is
29:03 - the first Association we need and in
29:06 - fact we're actually getting close to
29:07 - finish this program so we have our
29:09 - person our student our professor and our
29:11 - address the next thing we need is a
29:13 - course now I'm running out of screen
29:16 - real estate a bit so I'm gonna just do
29:17 - the course over here which is kind of on
29:19 - the edge of my drawing tablet so it's
29:21 - hard to write accurately but will write
29:23 - course and then what do we have for a
29:25 - course well we actually had a bunch I'll
29:28 - just write a few of this straightforward
29:30 - ones here so we had name we had code we
29:35 - had min so I'm just gonna short these
29:37 - min max and then I'll just write we had
29:41 - a start and end I'll just write the
29:43 - method is canceled for now but again you
29:45 - guys get the point that is the
29:46 - information we would have had so is
29:48 - cancelled with two brackets okay now
29:51 - what do we need well guess what we have
29:54 - professors that are teaching courses so
29:57 - we need to have an association between
29:58 - our professor and our course so that we
30:01 - know that this professor is teaching
30:03 - this course right so what I'm gonna do
30:05 - is simply draw a line from professor to
30:08 - course I'm gonna say course we'll put
30:11 - one like that and then on professor how
30:14 - many professors teach a course well it
30:16 - said at least one professor teaches a
30:18 - course but sometimes there may be many
30:20 - so I'm gonna write one dot dot asterisks
30:24 - like that which essentially says one
30:26 - course is associated with one or many
30:29 - professors and every time we make a
30:32 - professor we must have it associated
30:33 - with a course wait I don't know if that
30:36 - sounds correct whenever we have a
30:37 - professor it must be teaching a course
30:40 - that's not necessarily true
30:42 - we could have a professor that doesn't
30:44 - teach a course that is a possibility of
30:46 - our system so what I'm gonna do now is
30:48 - on course go zero dot dot one which
30:51 - essentially says we can have one
30:54 - professor teaching this course but we
30:56 - also might not have any professor sorry
30:59 - all the way around a professor might
31:01 - teach a course but they also might not
31:03 - teach a course and in fact now that I'm
31:05 - looking at it does only one course make
31:07 - sense
31:08 - because what this
31:08 - then is a professor can only teach at
31:11 - most one course no that's actually wrong
31:13 - so what I need to do is change this over
31:16 - here now to be a star because it could
31:19 - have a professor could be teaching a
31:21 - course it could be teaching many courses
31:23 - it might not be teaching any at all so
31:25 - let's erase this and let's change this
31:28 - to a star now I know that just was like
31:30 - a big you know run around in circles and
31:32 - me doing everything except the right
31:33 - answer but the point here is that that's
31:35 - what you want to think about I'm
31:37 - bringing you through these scenarios so
31:39 - that you can understand how you approach
31:41 - a problem like this and how you think
31:43 - about those kind of edge cases when you
31:45 - make your associations on here you want
31:47 - to be very careful to design for
31:49 - flexibility if you think the system in
31:51 - the future might do what you're limiting
31:53 - it to be able to do maybe don't limit it
31:56 - to do that it's better to have a system
31:57 - that is more flexible than to be super
32:00 - robust and super defined to the
32:02 - requirements because the requirements do
32:03 - change and part of designing is
32:05 - designing for scalability and
32:07 - flexibility all right so the next class
32:09 - we have is enroll and this actually
32:11 - happens to be the last class but this is
32:14 - actually one of the more complicated
32:15 - ones and this is what I'm gonna call an
32:17 - association class so I'm gonna draw it
32:19 - over here and I'm gonna call this and
32:21 - roll so let's say enroll like that and
32:25 - inside of here we're gonna have a date
32:27 - and what else are we gonna have we're
32:29 - gonna have the grade the student
32:31 - received from the course okay so this is
32:34 - gonna be what we call an association
32:36 - class now an association class is a
32:39 - little bit different than a regular
32:40 - class because what it does is link to
32:43 - other classes together which means this
32:46 - never exists on its own it always has an
32:50 - association between a course and a
32:53 - student and the whole point of it is to
32:54 - link a course and a student together so
32:57 - we draw it a little bit differently than
32:58 - we draw most regular classes so what I'm
33:01 - gonna do here is draw an association
33:04 - between my student and my course it's
33:06 - getting a little bit messy now I
33:07 - apologize for that but we do have an
33:09 - association now between the student and
33:11 - the course and let's pick the
33:13 - multiplicity and then I will talk about
33:14 - how enroll actually operates here so the
33:18 - multiplicity could be that a student can
33:21 - be enroll enrolled in
33:22 - multiple courses and a course can have
33:24 - multiple students in it so what I'm
33:27 - gonna say here is first of all on this
33:30 - side we're gonna put many because a
33:32 - course can have many students enrolled
33:33 - in it it might have zero
33:35 - I might have infinite right it might
33:37 - have maximum then what we need to have
33:39 - next is okay well how many courses can a
33:43 - student be enrolled in well they can be
33:45 - enrolled in zero so they could
33:47 - technically be enrolled in zero courses
33:49 - let me redraw that because I kind of
33:50 - butchered it and a maximum is six so the
33:53 - maximum amount of courses that can be
33:55 - enrolled in is six so essentially what
33:57 - I've said is that the lower bound is
33:58 - zero the maximum is six which means that
34:01 - can be in any range in between that and
34:03 - based on the amount of courses they're
34:05 - enrolled in well that is gonna tell us
34:07 - if they are part-time or if they are
34:09 - full-time right that is how we're gonna
34:11 - drive that now this is where the
34:14 - Association class comes in so what I'm
34:15 - actually gonna do is draw a dotted line
34:17 - and I'll redraw that again just to make
34:19 - it more clear actually over here between
34:21 - this Association and the in rural class
34:25 - what this says is this Association is
34:28 - really enroll hitting course and student
34:33 - hitting enroll right so this is just
34:34 - like this enroll class has an
34:36 - association between course and students
34:38 - and we use that to be able to determine
34:41 - what courses a student is enrolled in
34:43 - that that is the idea behind this
34:45 - intermediate class it stores an
34:47 - association with course it stores an
34:49 - association with student and then it
34:51 - also stores some attributes on it that
34:53 - are very useful for example date this
34:56 - tells us that whenever we create an
34:58 - association between student and course
35:00 - we must pick a date that this happened
35:03 - at so we know when the student enrolled
35:06 - in this course right that makes a lot of
35:08 - sense and you can now determine say if a
35:10 - student was late to enroll in the course
35:12 - because on course if you look over here
35:13 - we have the start and the end date
35:15 - left-hand side of my screen and we can
35:17 - compare the date that they enrolled in
35:19 - to the start and the end then we have
35:22 - great well that tells us what grade they
35:25 - got in this enrolled course and since
35:27 - there's an association between course
35:29 - and enroll and student and enroll what
35:31 - we can actually have is we can have the
35:33 - professor update the grade of a student
35:36 - so think about how this works right if I
35:38 - need to update the grade of a student
35:39 - well the professor has an association to
35:42 - course the course has an association to
35:44 - enroll and enroll has an association to
35:46 - all of the students right so in this way
35:49 - what I can do is I can have the
35:51 - professor look at the course look at all
35:53 - of the students enrolled and then go
35:55 - into this enroll class and modify the
35:57 - grade this way the professor does not
35:59 - actually get to look at any of the
36:01 - personal information of the student to
36:03 - upgrade it it's great all it has to do
36:06 - is look at this enroll Association class
36:08 - and say hey all I need to do here is
36:10 - change the grade and then that will
36:12 - automatically update for the course and
36:14 - for the student and what's great about
36:16 - this is well since every single student
36:18 - is associated to the course with an
36:20 - enroll class if I want it to do
36:22 - something like get the average grade of
36:24 - the course all I would do is look at all
36:27 - the associations between student and one
36:29 - specific course look at that enroll
36:31 - class and then grab all of those grades
36:33 - so this is the kind of system that I
36:35 - designed and that we were trying to
36:37 - design from the beginning something that
36:39 - is flexible and that can do a bunch of
36:42 - operations that may not have been
36:43 - defined yet but that we probably want to
36:46 - do in the future so that is pretty much
36:49 - it for this design I need to erase this
36:52 - one line here I don't think that was
36:54 - supposed to be there but this is our
36:56 - finalized design and I apologize that is
36:58 - super messy but the point of this video
37:00 - is not to be like you know the most
37:02 - perfect the most robust it's to teach
37:04 - you the process of looking at a software
37:07 - system and designing it from the ground
37:09 - up starting from scratch extracting the
37:12 - necessary information translating that
37:15 - information and then drawing a somewhat
37:17 - you know kind of plan drawing a design
37:20 - that we can actually go ahead now and
37:22 - implement because if you think about it
37:24 - now all you have to do if you want to
37:26 - make this system is look at this and
37:29 - start implementing what I've defined and
37:31 - if you actually look at this as not very
37:32 - complicated right we've broken
37:34 - everything down into classes which you
37:37 - can write we've broken it down into
37:38 - methods and we've broken it down into
37:40 - attributes so you don't even really have
37:42 - to think now when you go about
37:43 - programming this you just have to look
37:45 - at this design and follow it and if
37:47 - there's something that needs to be
37:48 - changed
37:49 - make that change accordingly right if we
37:51 - want to implement person all I do is
37:53 - make a class called person add a
37:54 - constructor that has these four
37:56 - arguments and there we go I've made
37:59 - person
37:59 - all right I want student and professor
38:01 - let's have them extend the person class
38:03 - let's go okay add an international
38:05 - attribute add these two methods is
38:07 - part-time is on probation professor
38:10 - let's add a salary there we go Oh
38:12 - associations okay great let's handle
38:15 - these associations let's make a private
38:16 - field in each of these that stores the
38:19 - association between address or something
38:22 - like that right and that is as easy as
38:24 - it is to do now the last thing I will
38:26 - say here just because some people might
38:28 - be confused on how these associations
38:30 - are implemented when you have a
38:32 - one-to-one Association you can think of
38:34 - that just like another attribute so let
38:36 - me actually I don't want to erase all of
38:38 - this but let me just do something like
38:40 - up here in this little area essentially
38:44 - let's say person has a one-to-one
38:46 - association with address so imagine that
38:48 - this is actually one what that means is
38:51 - on the person class we have another
38:54 - attribute called address I don't need to
38:56 - write it because the association's infer
38:58 - that and what this is really equal to is
39:00 - an address object right it's equal to
39:02 - some instance of address and then that
39:05 - way if we want to access the address of
39:06 - a person I just call person dot address
39:08 - now this is the exact same thing on
39:10 - address so let me erase this if this is
39:13 - one-to-one then on side of address right
39:16 - this has an attribute that says person
39:20 - so this just says person right and then
39:23 - it points to a person object and there
39:26 - you go that way the address if it wanted
39:28 - to see the person it could the person
39:30 - wants to see the address they can write
39:32 - that is how a one-to-one Association
39:34 - happens now sometimes you might not
39:36 - store it on the address side it really
39:38 - depends but now let's say we have this
39:40 - one-to-many right then what we would do
39:42 - is on here we'd have another attribute
39:44 - it would be called addresses like that
39:46 - and it would just be equal to a list
39:48 - that stored all of the addresses inside
39:50 - of it that's as easy as it is and that
39:53 - is what I'm talking about when I say
39:54 - Association it's just a link between
39:56 - these two objects you implement that
39:58 - link however you want but usually it's
40:01 - done just with another attribute
40:02 - or with something in the actual class
40:04 - itself and that is how you can link
40:06 - these different things together so with
40:09 - that being said that has been this video
40:12 - I know this is not you know the most I
40:14 - don't want to say educational but this
40:16 - is really just the way of teaching you
40:18 - about how to think about this it's just
40:19 - the way of training your brain to look
40:21 - at information break it down and throw
40:24 - it into some kind of design that you can
40:25 - then go ahead and implement so like I
40:27 - said at the beginning if you want to see
40:28 - the code for this leave a like subscribe
40:30 - to the channel comment spam me let me
40:33 - know and I will try my best to make a
40:35 - video where we implement this exact
40:37 - design so that being said I hope you
40:38 - enjoyed if you did leave it like
40:39 - subscribe and I will see you in the next
40:41 - YouTube video