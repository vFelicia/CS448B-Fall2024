00:00 - hello everybody and welcome to another
00:01 - youtube video so in today's video i'm
00:04 - going to be teaching you the basics of
00:06 - go while applying everything that we
00:08 - learned directly into a project so
00:10 - rather than sitting through 20 or 30
00:12 - minutes of theory and then working on
00:13 - something i'm going to teach you a very
00:15 - basic concept we're going to immediately
00:17 - apply that concept right into our
00:19 - project and every new concept that we
00:21 - learn is going to be kind of like the
00:22 - next aspect of the project so this is
00:24 - going to be a learn by doing tutorial i
00:27 - find this kind of the most engaging and
00:28 - fun way to actually learn a new language
00:31 - and i will mention here that this
00:32 - tutorial is designed for beginners so
00:35 - whether you've never written a line of
00:36 - code before or you're coming from
00:38 - another programming language that's
00:39 - completely fine i think you're really
00:41 - going to enjoy the go programming
00:43 - language in fact it's one of my favorite
00:45 - languages i'm going to show you
00:46 - everything you need to know assuming
00:48 - zero experience in this language last
00:50 - thing i will mention is that if you are
00:52 - a beginner or intermediate programmer
00:54 - you may want to check out my new product
00:56 - programming expert this is something
00:58 - i've been working on for about six
00:59 - months with the algo expert team we just
01:02 - released it last week and this is an
01:04 - awesome platform to learn to code and
01:05 - teaches you pretty much everything you
01:07 - need to know to get up to a software
01:09 - engineer level in program anyways you
01:11 - can check that out from the link in the
01:13 - description programming expert dot io
01:15 - enough of that let's go ahead and get
01:17 - into go programming
01:22 - [Music]
01:28 - all right so i'm here on the go website
01:30 - homepage and i just want to give you a
01:31 - quick introduction to this language
01:33 - before we dive into the code
01:35 - so go otherwise known as golang is
01:38 - actually a pretty new programming
01:39 - language that was invented or created in
01:41 - 2012 now it was made by three employees
01:44 - at google to kind of fix some of the
01:46 - problems that they were having with
01:48 - their standard languages or their
01:49 - official languages now back at that time
01:52 - in google the official languages they
01:54 - used were python c plus plus java and
01:56 - most likely javascript and a few other
01:58 - languages and the issue is that working
02:01 - in something like c plus plus or java is
02:03 - very time consuming it's not very
02:05 - efficient but you do get a ton of speed
02:07 - and performance benefits from those
02:09 - languages then on the other hand you
02:10 - have python which is very quick to
02:12 - develop in but is super super slow even
02:15 - though it has very simple syntax so the
02:18 - developers at google said hey we need
02:20 - something that's kind of going to bridge
02:21 - the gap between these languages and give
02:23 - us something that is very quick and easy
02:25 - to write in but still has high
02:27 - performance so that is kind of why go
02:29 - was created and so you're going to see
02:30 - when we start looking at this the golang
02:33 - is a very simple language the syntax is
02:35 - very easy to understand it's actually
02:37 - very similar to python but there's a ton
02:39 - of performance benefits goling is
02:41 - actually a compiled language and it's
02:43 - very very fast to compile and to run now
02:46 - goling is also a strongly and statically
02:48 - typed language which makes it great for
02:50 - working on larger projects now the main
02:52 - use cases of go is pretty much on
02:54 - server-side applications so writing
02:57 - stuff like apis website back-ends any
03:00 - type of performance-heavy applications
03:02 - and especially multi-threaded
03:04 - applications as well because of the
03:05 - concurrency support now i'm sure this
03:07 - probably means nothing to most of you
03:09 - because you probably beginner
03:10 - programmers if you're watching this but
03:12 - i just want to give you a very quick
03:14 - introduction and talk about the main
03:16 - benefits of go going why it was actually
03:18 - created all right so now that we've
03:19 - talked about that i can run you through
03:20 - the environment setup steps for go so
03:23 - what we're going to do is go to the
03:24 - download page for go which is right here
03:27 - i'll leave a link to it in the
03:28 - description you're just going to click
03:29 - on the appropriate operating system so
03:31 - linux mac or windows you can run through
03:33 - the steps right here if you want but
03:35 - really all you need to do is just click
03:36 - the download link that will be up here
03:38 - again for linux mac or windows double
03:41 - click the installer run through it it
03:43 - should install and setup go for you and
03:45 - then what we can do is download our text
03:47 - editor or code editor which is going to
03:49 - be visual studio code so downloading go
03:52 - is one thing but we actually need a
03:54 - place to be able to write our go code in
03:56 - and for this tutorial i'm going to use
03:57 - vs code now you don't have to use this
04:00 - if you have your own code editor or text
04:02 - editor and you understand how that works
04:04 - you can use your own however if you are
04:06 - new to programming or you're new to go
04:07 - then i would recommend that you just
04:09 - download vs code because then everything
04:11 - i do in this video will apply for you as
04:13 - well anyways i'll leave a link to this
04:15 - in the description you should be able to
04:16 - just click this button and it will
04:18 - download the appropriate version for
04:19 - your operating system again run through
04:21 - the installer and then open up visual
04:24 - studio code and we'll start working with
04:26 - go alright so at this point in time i'm
04:28 - going to assume you've successfully
04:29 - installed go and vs code the installers
04:32 - are very straightforward you just need
04:33 - to run through them and click next as
04:34 - many times as is required and now i'm
04:37 - going to ask that you open up vs code or
04:38 - whatever your text editor is so now i'm
04:41 - inside of vs code and mine will probably
04:43 - look a little bit different from what
04:45 - yours looks like the first thing we want
04:47 - to do inside of here is we want to open
04:48 - up some type of folder where we're going
04:50 - to write our go code so what i've done
04:52 - is i've gone to file i've clicked on
04:54 - open folder right here and i've selected
04:56 - a folder where i have this notes.txt
04:59 - file which is just my notes for this
05:01 - video now you can open up any folder
05:03 - that you'd like you can also make a new
05:04 - folder by just clicking on new folder
05:06 - like that and then making the new folder
05:08 - now i'm going to delete that because i
05:09 - don't need the new folder and i don't
05:11 - want to open up a different one anyways
05:13 - just open up a folder and then you
05:15 - should see on the left hand side of your
05:16 - screen here that you have kind of a file
05:18 - view and you can see the folder is open
05:21 - now you won't have anything inside of
05:23 - your folder so what you can do is make a
05:25 - new file by clicking this button right
05:27 - here
05:28 - and making something like tutorial
05:30 - dot go now all of our go files are going
05:33 - to end in dot go so any code that we
05:35 - want to write that's go code needs to go
05:36 - inside of a dot go file anyways for now
05:39 - i'm going to call mine tutorial you can
05:41 - call yours whatever you'd like just make
05:43 - sure it's one word because if you add
05:44 - any spaces then this might be a little
05:46 - bit different or kind of mess you up for
05:48 - the future steps in this video so for
05:50 - now i'm going with tutorial.go as soon
05:53 - as i make that file we should see that
05:54 - it opens that up in our editor here and
05:56 - this is where we can start writing our
05:58 - code
05:59 - however before we can do that we need to
06:01 - install an extension for vs code so vs
06:04 - code comes very lightweight it doesn't
06:06 - come with a lot of features you actually
06:08 - install the features as you need them so
06:10 - if you look on the left hand side here
06:12 - we can go to this extensions pane it's
06:14 - kind of this grid with a square coming
06:15 - out and what i can do is search go
06:18 - in the marketplace search which is at
06:20 - the top of this window
06:22 - so i'm going to search go notice go
06:24 - shows up right here and then what i
06:26 - would do is click install obviously i
06:28 - already have mine installed and so it's
06:29 - showing me disable and uninstall but
06:32 - install this extension it may require
06:34 - that you restart vs code and then we'll
06:36 - be ready to actually write some go code
06:39 - okay so let's go back to the file view
06:40 - which is right here and i'm going to
06:42 - click f11 on my keyboard i'm on windows
06:45 - which is going to make this full screen
06:46 - so whenever we're writing go code the
06:48 - very first thing that we need to do is
06:50 - we need to define what package this code
06:52 - is inside of now for now you don't
06:54 - really have to worry about what this
06:56 - means just write this line and leave
06:58 - this at the top of your file otherwise
07:00 - you will get an error so i'm just going
07:01 - to say package main again i can't really
07:04 - explain this to you because it's pretty
07:05 - complicated and it has nothing to do
07:07 - with what we're about to write but this
07:09 - is required at the top of all of your go
07:11 - files you write package and then the
07:13 - name of the package that this go code is
07:14 - going to be a part of essentially
07:16 - packages are directories that contain a
07:18 - bunch of go files and these go files are
07:21 - called modules and you can use multiple
07:24 - go files within one program that's way
07:26 - too advanced for us to look at right now
07:28 - for now just understand package main is
07:30 - kind of a required line at the top of
07:31 - your program okay so now that we have
07:33 - package main what i'm going to do is
07:35 - import a library that we're going to use
07:37 - here to be able to output stuff to the
07:39 - console so i'm going to say import and
07:41 - then inside of double quotation marks
07:42 - i'm going to say fmt now this is
07:45 - something you're probably going to
07:46 - import in all of your go programs this
07:48 - allows you to actually output stuff to
07:50 - the console and to collect user input
07:53 - again you don't have to worry about
07:55 - exactly what this is doing for now but
07:56 - it just gives us access to some tools
07:58 - that are built into the standard go
08:00 - library again to output stuff and to
08:03 - actually collect user input
08:05 - all right now after we have this
08:07 - we're going to write the following line
08:09 - and i'll break down what this is so
08:11 - we're going to write func what this is
08:13 - doing is defining a function again you
08:15 - don't have to understand what a function
08:16 - is we're then going to write main make
08:18 - sure the name is main here if it's not
08:20 - main you're going to mess up your
08:21 - program then you want to have an opening
08:23 - parenthesis and closing parenthesis and
08:25 - an opening curly brace and a closing
08:27 - curly brace now this is the entry point
08:29 - for our code all of the stuff that we
08:32 - want to execute when we run this go file
08:34 - we're going to put directly inside of
08:36 - this function now you don't really need
08:38 - to know what the function is but it's
08:39 - pretty much an executable block of code
08:41 - and by naming this function main this
08:44 - makes it the entry point of our program
08:46 - so this will automatically be run
08:48 - everything inside of the curly braces
08:49 - here when we run our go code so for now
08:53 - i'm going to show you how we can print
08:54 - out hello world to the screen then i'm
08:56 - going to show you how to run and build
08:58 - this go code and then we'll talk more
09:00 - about what all this stuff is doing
09:02 - so i'm going to say fmt inside of here
09:04 - dot print ln this stands for print line
09:07 - make sure you get the capitalization
09:09 - correct because that's important and
09:11 - then inside of double quotation marks
09:13 - i'm going to say hello world exclamation
09:15 - point because this is our first go
09:17 - program so we're always going to print
09:19 - out hello world whenever we're writing
09:20 - our first program anyways fmt.printline
09:24 - hello world what's going to happen when
09:26 - we run this go code is this is simply
09:28 - going to be outputted to the screen so
09:30 - we know something is actually happening
09:32 - great we have officially written our
09:34 - first go program so now i'm going to
09:36 - save the file and i'm going to show you
09:38 - how we can run this code so what we need
09:40 - to do here is we need to open up our
09:42 - terminal or our command prompt so i'm
09:44 - going to drag from the bottom of the
09:46 - screen here and notice that i have a
09:48 - terminal open now if you are not using
09:50 - visual studio code you're just going to
09:52 - have to open up a terminal if you're on
09:54 - mac or linux or open up your command
09:56 - prompt if you're on windows now inside
09:58 - of here you should be able to run the
10:00 - command go
10:02 - so i'm going to click go where i'm going
10:03 - to type in go and hit enter and we
10:05 - should see that something is being
10:06 - outputted now for some reason this go
10:08 - command is not working you may have
10:10 - messed up your installation of go or you
10:12 - may need to restart vs code or restart
10:15 - your terminal or command prompt and then
10:17 - try running the command again all right
10:19 - so at this point in time i'm going to
10:20 - assume that your go command is working
10:22 - and now i can show you how to run this
10:24 - file first though i will mention that go
10:26 - is a compiled language now what that
10:29 - means is that what we have in front of
10:30 - us right here can't actually be executed
10:33 - by our computer we first need to
10:35 - translate this into a lower level
10:37 - language specifically an executable
10:39 - binary file that our computer can
10:41 - understand and run so that means that we
10:44 - need to run this through a compiler now
10:46 - compiler again is just going to take
10:48 - this source code the source code is the
10:50 - code that we've written here translate
10:52 - it into another language and then that
10:54 - language that new file that we're going
10:56 - to get can actually be ran directly by
10:58 - our computer now this is great because
11:01 - this means if you don't have go
11:03 - installed on your computer but you have
11:04 - access to a compiled go file you can
11:07 - still run this program so unlike
11:09 - languages like python we don't need to
11:11 - have python installed to be able to run
11:13 - python code assuming that in this
11:16 - situation here the go code has already
11:18 - been compiled anyways i want to show you
11:20 - how to run this i apologize for all of
11:22 - the explanations so let's just go into
11:24 - our command prompt or into our terminal
11:26 - and let's run the following command
11:28 - which is go run
11:30 - and then the name of the file that we
11:31 - want to run so notice the directory of
11:33 - my command prompt is in the folder where
11:35 - my go file is if you're using vs code
11:38 - and you open up the terminal it will
11:39 - just be here by default and what i'm
11:41 - going to do is go run and the name of my
11:43 - file
11:44 - now when i do this it's going to take a
11:46 - second and we're going to see that we
11:47 - get the output hello world awesome there
11:50 - we go we have just ran our first go
11:52 - program so what this command actually
11:54 - did for us is it compiled this code into
11:57 - the executable binary code and then ran
12:00 - that executable binary and then
12:02 - immediately deleted that after the
12:04 - output of our code was given to us
12:06 - because we used the go run command
12:08 - instead of another command that i'm
12:10 - going to show you which is the go build
12:11 - command now a lot of times what you want
12:13 - to do is you want to take all of your go
12:15 - code you want to package it up into that
12:18 - executable file and then you want to
12:20 - give that executable file to someone
12:21 - else or allow someone to run it so if
12:24 - that's the case you can actually compile
12:26 - this code manually without running it
12:28 - and you'll be given that executable file
12:30 - so let me show you what i mean
12:32 - if i type go build and then the name of
12:34 - my file so in this case tutorial.go go
12:37 - you're gonna see that it's actually
12:38 - going to give me a dot exe file inside
12:41 - of the directory where i ran this
12:43 - command now if you're on linux or mac
12:45 - you're gonna get a slightly different
12:46 - file the extension is gonna be dependent
12:48 - on the operating system but in this case
12:51 - i now have a windows executable go file
12:54 - and the way that i can run this file is
12:56 - i can double click it if i was in my
12:57 - file explorer or i can just type the
12:59 - name of it
13:01 - so i can type tutorial.exe
13:03 - hit enter and then it's going to run
13:05 - this code and this will work regardless
13:07 - of if i have go installed on my system
13:08 - or not now if you're on mac or linux the
13:11 - way you're going to run this executable
13:12 - file is you're just going to type dot
13:14 - slash and then the name of the file
13:16 - which most likely will be tutorial or
13:18 - whatever the name of
13:20 - your go original file was so in this
13:22 - case mine was tutorial.go so i get
13:24 - tutorial.exe or if i was on mac or linux
13:27 - i just get tutorial but if you named it
13:29 - like hello then you would get hello.exe
13:32 - or whatever hello and no file extension
13:34 - anyways mac and linux just do dot slash
13:36 - in the terminal and then you can run it
13:38 - you also should just be able to double
13:39 - click that file and it should run as
13:41 - well
13:42 - okay great so i'm just going to clear my
13:44 - terminal here and move this down to the
13:46 - bottom of the screen now that we
13:47 - understand how to run our go code we
13:49 - have our environment set up and we've
13:50 - looked at our low world program i can
13:52 - start talking to you about some more
13:54 - interesting things in go alright so now
13:56 - that we've gone through all of that i
13:57 - want to start by discussing the project
13:59 - that we're going to work on and then
14:00 - actually starting to build the project
14:02 - so the project we're going to work on is
14:04 - a quiz game now that means we're going
14:06 - to write a program that asks the user a
14:08 - bunch of questions takes in the answer
14:10 - of those questions tells the user if
14:12 - they got it correct or incorrect and
14:14 - then how many questions they got correct
14:15 - at the end of the quiz as well as like
14:17 - their percentage so if they got 85 we're
14:20 - gonna print that out
14:21 - anyways this is going to be a really
14:23 - good beginner project and teach you a
14:24 - ton of different basic go laying
14:27 - concepts
14:28 - okay so for our quiz game the first
14:30 - thing i want to do is probably welcome
14:32 - the user to the quiz game i probably
14:34 - want to say hey welcome to the whatever
14:36 - type of quiz it's going to be and then
14:37 - maybe i want to ask the user for their
14:39 - name and greet the user to the game okay
14:42 - maybe that's something that we want to
14:43 - do so i'm going to start here by just
14:45 - printing out
14:47 - welcome to my quiz game now feel free to
14:50 - make these as custom as you would like
14:52 - all of the strings that you're printing
14:53 - out in this case i'm just making them
14:55 - simple to save time in the tutorial okay
14:58 - so there we go pretty straightforward we
15:00 - now are printing a new line that's what
15:02 - print ln stands for and this is what
15:04 - we're going to print now before we can
15:06 - move any further i need to talk to you
15:08 - about variables and data types so a lot
15:10 - of times when we're writing code we want
15:12 - to store something in a variable now a
15:14 - variable is really just a container that
15:16 - allows us to store a value or some type
15:19 - of data inside of it so since golang is
15:21 - a strongly and statically typed language
15:24 - that means when we declare a variable we
15:26 - actually need to define the type of data
15:28 - that this variable is going to hold
15:30 - which is going to lead me to data types
15:32 - in one second for now though i'm going
15:34 - to show you how we make a variable which
15:36 - is pretty easy we do something like var
15:38 - we then give the variable name so maybe
15:40 - i call this variable actually name and
15:42 - then we declare the type that this
15:44 - variable is going to hold now in this
15:46 - case i'm going to say string and i'm
15:47 - just going to make it equal to tim but
15:49 - i'll discuss what this means so what
15:51 - i've done is i've just made a variable
15:52 - the variable is called name it has a
15:54 - type of string and i've assigned it the
15:56 - value of tim
15:58 - that means if i were to print out the
16:00 - variable name it would print out tim
16:02 - because name is storing tim pretty
16:04 - straightforward but that's what
16:05 - variables do they store values for us
16:08 - and we can then access those values or
16:10 - change the values of variables later in
16:12 - our program all right but let's talk
16:15 - about what this is right here because
16:16 - this is the data type of this variable
16:19 - and this is very important in goaling so
16:22 - a string is the first data type that
16:23 - we'll look at and really it's anything
16:25 - that's surrounded in double quotation
16:27 - marks so a string is really a sequence
16:30 - of characters this here is a string
16:32 - right welcome to my quiz game that's a
16:34 - string something like tim that's a
16:36 - string something like one two three
16:37 - instead of double quotation marks that
16:39 - would be a string something like
16:41 - underscore hello world that's a string
16:43 - again anything wrapped in double
16:45 - quotation marks is going to be a string
16:48 - okay so that's our first data type
16:49 - pretty straightforward now other than a
16:51 - string we have ins
16:53 - now an int is simply any whole number so
16:56 - something like 21 something like
16:58 - negative nine something like one
17:00 - thousand all of these are ins
17:02 - otherwise known as integers
17:05 - great other than that we have uint
17:08 - now a unit stands for an unsigned
17:10 - integer this simply means any positive
17:12 - whole number now zero is included as
17:14 - well but really when we have a uint an
17:17 - unsigned int we just can't have
17:19 - something like negative 9 or negative 2
17:21 - or negative 3.
17:23 - that's invalid because this here is the
17:25 - sign which is negative and while you
17:27 - can't have that on an unsigned integer
17:30 - okay
17:31 - great
17:32 - now other than that we have a float
17:34 - now i actually have to do float 64. i'll
17:36 - discuss what this is in a second but
17:38 - float is really any floating point value
17:41 - any value that has a decimal in it so if
17:44 - i have something like 2.0 this is a flow
17:46 - because we have point o that's the
17:48 - decimal part of number the floating
17:50 - point part right if i do something like
17:52 - 2.1 again that's a float if i do
17:54 - something like negative 92.3 that's a
17:57 - float because we have a decimal in it it
17:59 - doesn't matter if it's something like
18:00 - dot zero or dot zero zero zero zero zero
18:02 - whatever it's just if you have a decimal
18:05 - that is going to be a float
18:07 - now the reason why i needed to add a 64
18:09 - here is because when you define a float
18:12 - you need to pick the precision for this
18:14 - float now i don't want to talk about
18:15 - this too much but putting a 64 here says
18:18 - that we're going to use 64 bits of our
18:20 - computer's memory to store this flow so
18:23 - don't worry about that too much but just
18:25 - understand that when you do define a
18:27 - float you need to specify the precision
18:29 - or the number of bits that are going to
18:30 - be used to store the float and by
18:32 - default we're just going to go with
18:33 - float 64. now we also have the option to
18:36 - use something like float 32
18:38 - but float 64 is what we'll go with for
18:40 - right now again don't worry about that
18:42 - too much a float is just anything that
18:44 - has our floating point decimal number
18:46 - okay awesome and just to mention here
18:48 - something like negative 2.8 that's
18:50 - totally fine negative value that has the
18:52 - floating point is still a float
18:54 - all right so now we have covered uint
18:56 - int float string and we need to talk
18:59 - about bool now a bool stands for boolean
19:03 - and this is one of two values either
19:05 - true
19:06 - or false okay that's the only two things
19:09 - that we can store in a boolean value or
19:11 - in a boolean type sorry true or false
19:13 - great we have now gone through the core
19:15 - data types in golet now there's a few
19:18 - other data types as well but they're not
19:19 - going to be covered in this tutorial
19:21 - because this is meant for beginners
19:23 - all right so now that we've done that
19:25 - let's just declare our name type again
19:26 - so we're going to say var name string is
19:29 - equal to tim
19:31 - there we go we now define the string
19:32 - data type that stores the value tim now
19:35 - the reason why this is important here
19:36 - well we need to put the type of this
19:38 - variable is because once we define this
19:40 - variable name as type string we can't
19:43 - store anything inside of this variable
19:45 - that's not a string so i could
19:47 - theoretically do something like
19:49 - name is equal to joe this is fine what
19:52 - i'm doing is i'm changing the value of
19:54 - name now to store joe but i can't do
19:56 - something like name equals 23.
19:59 - the reason i can't do that is because 23
20:01 - is an int and an int is not a string and
20:03 - i cannot change the type of this
20:05 - variable once it's defined so actually i
20:07 - want to demo this to you so if i go here
20:09 - and i type in go run and then tutorial
20:12 - dot go you're gonna see that we get an
20:14 - error it says cannot use 23 type untyped
20:17 - int as type string in assignment again
20:20 - because 23 is not a string so we can't
20:22 - assign that to the string variable
20:24 - all right hopefully that makes sense now
20:26 - i'll just show you
20:27 - that if i do something like hello and i
20:29 - run this we're actually going to get an
20:31 - error but the error is going to be
20:32 - different than we expected so if i do
20:34 - this now it says name declared but not
20:36 - used so what this is telling me is that
20:38 - it was fine for me to assign hello to
20:41 - the variable name because hello is a
20:42 - string but since i didn't use the
20:44 - variable name i'm getting an error now
20:46 - this error is pretty unique to go but in
20:49 - go whenever you declare a variable you
20:51 - need to use that variable somewhere you
20:53 - need to actually access the value of it
20:55 - otherwise you get an error because if
20:57 - you don't use the variable what's the
20:58 - point of having it in your program go is
21:00 - going to yell at you and say hey you
21:02 - need to actually use the variable
21:03 - otherwise there's no point in having it
21:05 - defined so what that really means is
21:07 - that i need to do something like
21:08 - fmt.printline
21:10 - and then i can just print out the name
21:12 - directly and now since i'm actually
21:14 - using this name you'll see that when i
21:16 - save the code and i run it we no longer
21:19 - get an error and it's going to print out
21:21 - the value of the variable name
21:23 - okay hopefully that makes sense we've
21:25 - just really quickly covered variables
21:27 - now the thing is in go they realize that
21:30 - it can be really annoying to have to
21:31 - define the type of every single variable
21:34 - that you make and sometimes it's not so
21:36 - easy to actually pick what this type is
21:38 - it could be very complicated so that's
21:41 - why they have another way to define
21:42 - variables that implicitly defines the
21:45 - type for you so this is the following
21:48 - syntax name equals
21:50 - and then something like let's actually
21:51 - just go with a legit name which is tim
21:54 - so this syntax right here the colon and
21:56 - the equal sign is actually going to
21:58 - implicitly guess what the type of this
22:00 - value is right here and then assign that
22:03 - as the type for this variable so this is
22:05 - the exact same thing as doing var
22:08 - name string equals tim except now we
22:11 - don't need to manually declare that this
22:13 - is a string instead golang will actually
22:16 - do this for us it will look at this
22:18 - value it will determine that this value
22:20 - is a string because it knows what a
22:22 - string looks like and then it will just
22:23 - manually make the type of name equal to
22:26 - string rather than requiring us to do
22:28 - that now we also don't need the var
22:30 - keyword because we're doing it in this
22:32 - format hopefully that makes sense but
22:34 - this is kind of the shorthand notation
22:36 - and this is actually what's recommended
22:38 - in goaling to define variables to make
22:40 - your life easier
22:42 - so just to show you that i'm not lying
22:43 - if i run the code here we'll see that we
22:45 - get the same thing as we did before and
22:47 - we're not getting any errors because
22:49 - this type is now string it's implicitly
22:52 - guessing that and doing that for us all
22:54 - right so now that we've gone through
22:55 - that i want to talk about some more
22:57 - advanced ways to print stuff out to the
22:58 - console because right now we've just
23:00 - been using print line which just is
23:02 - going to print something and then it's
23:03 - going to put whatever we print next on
23:05 - the next line right that's why you see
23:07 - that we have this kind of empty line at
23:09 - the end of the program because it's
23:10 - printing something and then it's going
23:11 - to print what's called a new line
23:13 - character which will move the cursor of
23:15 - the console down one line so the next
23:17 - thing that we print happens on the next
23:19 - line
23:20 - anyways let's look at how we would print
23:22 - something out like hello tim how are you
23:25 - doing now i want to use whatever is
23:27 - stored inside of name in this case i
23:29 - have tim inside of name and i want to
23:31 - print out hello whatever the name is in
23:34 - this variable and then how are you doing
23:36 - so how would i do that well there's a
23:38 - few ways that we can go about doing this
23:40 - but the way i want to show you is using
23:41 - something called printf
23:43 - now printf allows us to actually embed
23:46 - variables and expressions directly
23:48 - inside of what we're going to be
23:49 - outputting so let me just show you an
23:51 - example then you'll see what i mean so
23:52 - i'm going to say hello i'm going to say
23:54 - percent b comma and then how are you
23:57 - doing question mark
23:58 - now notice percent v is actually being
24:01 - highlighted in purple that's because
24:03 - this is a special character that's
24:05 - actually going to take the value of
24:07 - whatever the next argument is that we
24:09 - pass through this printf function now
24:12 - this here is known as a function what
24:14 - it's going to do is it's going to take
24:15 - in some arguments arguments are the
24:17 - things that we're passing to the
24:18 - function so this string right here as
24:20 - well as this name now when i do
24:22 - something like percent v this is saying
24:24 - okay this is a placeholder for the value
24:27 - of whatever the variable is that you put
24:29 - to the right hand side here so since i'm
24:31 - passing name and i have percent v now
24:34 - name whatever the value of it is in this
24:36 - case tim is going to be replaced with
24:38 - percent v and we're going to print out
24:40 - hello tim how are you doing so let me
24:43 - show you what i mean let's go go run
24:45 - tutorial dot go
24:47 - and notice we get hello tim comma how
24:49 - are you doing
24:51 - nice now let's change this to something
24:53 - like joe okay and let's run the code
24:55 - here and we get hello joe how are you
24:58 - doing now percent v is just one of the
25:01 - many placeholders that you can use and
25:03 - i'll show you that you can use multiple
25:05 - placeholders in one expression here so
25:07 - let's say i wanted to print out tim like
25:09 - five times or something or let's just go
25:11 - with two times and i could add another
25:13 - percent b here and i would just have to
25:15 - put another variable on the right hand
25:17 - side of this
25:18 - print f so that i'm saying okay name is
25:21 - going to replace this and then name is
25:23 - going to replace this as well so let me
25:25 - show you this
25:26 - i'm going to go run tutorial.go and i
25:28 - get hello joe joe how are you doing
25:32 - hopefully that makes sense now let's
25:34 - make a new variable so let's say
25:35 - something like number
25:37 - or actually let's do something like age
25:39 - colon equals and then let's go with 21
25:41 - that's my age and i will say hello
25:44 - and then whatever the name of the user
25:46 - is and then i will just tell them what
25:48 - their age is so i'll say you are and
25:49 - then we'll go with percent
25:52 - and not age sorry percent v like that
25:55 - and now i can say name
25:56 - and i can say h
25:58 - okay so let me now run this
26:01 - and we see
26:03 - welcome to my quiz game hello joe you
26:05 - are 21 and then i really don't need a
26:07 - question mark there i could put
26:08 - something like an exclamation point okay
26:10 - hopefully that makes sense
26:12 - percent v is kind of the main thing
26:14 - you're going to use here in terms of
26:15 - replacing variables inside of this
26:18 - string however there is a few other ones
26:20 - like percent d this stands for decimal
26:23 - notation this is used to print out
26:25 - numbers we also have percent f this is
26:27 - used for floating point numbers there's
26:29 - a bunch of other ones i'm not really
26:30 - going to go through them but i will
26:32 - leave a link here let me actually just
26:34 - copy this into my browser and show you
26:36 - that kind of goes through all of the
26:37 - formatting options that we have
26:39 - so this i will leave in the description
26:41 - go by example string formatting so when
26:43 - we type printf that's saying print with
26:46 - formatting you can use all of the
26:48 - different things inside of here to kind
26:50 - of print out numbers and values with
26:51 - different formatting options
26:54 - okay
26:54 - all right so now we understand how we
26:56 - can print out variables and kind of
26:58 - embed them inside of strings what i want
27:00 - to do next is i want to get some user
27:02 - input because our program is pretty
27:04 - boring if we're not allowing the user to
27:06 - type anything in so i want to
27:08 - immediately ask the user as soon as they
27:10 - run our program what their name is so
27:12 - then i can greet them and i can actually
27:14 - start running the quiz game so how are
27:16 - we going to do that well let's get rid
27:17 - of these three lines right here and let
27:19 - me make a variable now i'm going to say
27:21 - var
27:23 - name and i'm going to make this of type
27:25 - string but notice i'm not actually going
27:27 - to assign it a value i'm not going to do
27:29 - equals and then something like hello now
27:31 - i could do that but i'm not going to now
27:33 - when i don't do that what's happening is
27:35 - i'm saying okay i want to declare a
27:37 - variable called name but i don't want to
27:39 - give it an initial value now i'm going
27:41 - to define that it's type string but
27:43 - right now it's just going to be holding
27:44 - an empty string it's not going to be
27:46 - holding anything because i haven't given
27:48 - it a value that's completely fine a lot
27:50 - of times you want to do that now you
27:52 - don't just have to do this with strings
27:53 - you can do this with ins with bools as
27:55 - well so i can do var and let's just go
27:57 - test
27:58 - bool like that
28:00 - completely fine i don't need to give it
28:02 - an initial value
28:03 - okay hopefully that makes sense i'm kind
28:05 - of just putting the placeholder here and
28:06 - saying all right i want to declare name
28:08 - it's going to be string and i'll give it
28:09 - a value later on
28:11 - now though i want to show you how we
28:12 - collect user input so what i'm going to
28:14 - do is say fmt.scan
28:17 - now dot scan allows me to actually scan
28:20 - something into my program so allows me
28:22 - to let the user type in the console and
28:24 - whatever they type it's going to give it
28:26 - to me and store it in a variable so if i
28:28 - do something like fmt.scan and then i
28:31 - put an ampersand and i put name what's
28:33 - actually going to happen is i'm going to
28:35 - store whatever the user typed in in the
28:38 - name variable now the ampersand is a
28:40 - little bit confusing we'll get to that
28:41 - in a second but for now let me just show
28:43 - you that this works by going here and
28:45 - saying fmt.println
28:47 - and we'll just print out the name for
28:49 - right now
28:50 - okay so we'll go through this in a
28:51 - second but let's go to our console if i
28:54 - can bring this up here
28:55 - let's type in cls and let's run this
28:59 - now notice it says welcome to my quiz
29:01 - game and my cursor is right here in the
29:03 - console so i can actually start typing i
29:05 - can say something like tim
29:07 - and when i hit enter it's going to print
29:08 - that out
29:09 - right because it's storing whatever i
29:11 - type in in the variable name and then
29:13 - i'm accessing the variable name and
29:15 - printing that out
29:16 - okay hopefully that is clear
29:18 - so let's talk about what this ampersand
29:20 - does
29:21 - now this ampersand is a little bit
29:22 - beyond this tutorial but i do need to
29:24 - show it because we have to use it here
29:26 - what this does is actually reference the
29:28 - memory address location of this variable
29:32 - so to go on a quick tangent here every
29:34 - single variable in our program is going
29:36 - to be stored somewhere in our computer's
29:37 - ram ram is random access memory that's
29:40 - what our computer uses when it's running
29:42 - programs now in this case name is going
29:44 - to be stored at some random location in
29:46 - rem we don't really care or know what
29:48 - that location is but to access it we use
29:51 - this ampersand now the reason we need to
29:53 - do this is because fmt.scan requires the
29:56 - memory location to assign the value of
29:58 - this variable equal to whatever it is
30:01 - that's typed in
30:03 - hopefully that kind of makes sense it's
30:04 - kind of annoying that you can't just do
30:05 - something like name but it requires that
30:08 - you pass in the ampersand which gives
30:10 - what's known as a reference to this
30:11 - variable which scan will use to set the
30:14 - variable equal to in this case whatever
30:16 - string the user types it again you don't
30:18 - need to worry about this too much just
30:20 - understand that when you're using scan
30:21 - you need to put an ampersand and then
30:23 - the variable that you want to actually
30:25 - store the value the user types in in
30:28 - now one thing to note here is that you
30:29 - can also scan integers you can scan
30:31 - floats you can scan booleans it doesn't
30:33 - just have to be strings
30:35 - so i can do something like var
30:37 - let's go with age and then we can say
30:39 - int right here
30:41 - and now if i go fmt.scan and i just go
30:44 - with int let me just get rid of name
30:45 - right now and sorry not integer with age
30:49 - and then i print out age now i'm going
30:51 - to be able to actually type in a number
30:53 - and have that number come in as an
30:54 - integer and be stored in the variable
30:56 - age as opposed to getting the string
30:58 - data type so let's run this now let's
31:01 - save and run
31:03 - and notice that i'm going to type in 21
31:06 - and it prints out 21. however let's see
31:08 - what happens if i do something like
31:10 - hello when i do that notice we get 0.
31:13 - now that's a little bit weird but the
31:14 - reason we got 0 is because hello was not
31:17 - a valid integer and we can't store hello
31:20 - inside of a variable that is of type int
31:22 - so it just gives us the default value of
31:25 - this int which is going to be zero
31:27 - alright so hopefully that makes a little
31:28 - bit of sense but the type that you have
31:30 - for your variable really matters and
31:32 - whatever that type is that's what you're
31:34 - going to have after you do this scan
31:36 - right so if i type in 21 and i have my
31:39 - variable of type int it's going to give
31:40 - it to me as an int but if i have this as
31:43 - type string it's going to give it to me
31:44 - as a string
31:46 - okay so now that we understand that
31:48 - let's go back to the name example and
31:50 - then let's get the user's name and greet
31:52 - them and then start asking them some
31:53 - questions so i'm going to say var name
31:56 - and this will just be a string
31:58 - then i'm going to say
31:59 - fmt.scan and i'm going to say that this
32:03 - is equal to if i could type properly
32:06 - here which i'm having trouble with
32:08 - ampersand and then this is going to be
32:09 - name
32:10 - okay so now we're scanning this into the
32:12 - name variable and now i want to greet
32:14 - the user so i'm going to say fmt
32:16 - dot print f and i'm going to say hello
32:19 - comma we're going to go with percent v
32:22 - like that
32:24 - welcome
32:25 - to the game
32:26 - okay and then we'll go comma and then
32:28 - name like that
32:30 - okay great so let's run the code
32:32 - go run tutorial dot go welcome to my
32:35 - quiz game notice it's asking me to type
32:37 - something in so i'm going to type in tim
32:38 - and then it says hello tim welcome to
32:40 - the game great however one thing i want
32:43 - to do here is i actually want to have a
32:45 - prompt that tells the user to enter
32:47 - their name because right now it doesn't
32:48 - really say anything and it's kind of
32:50 - confusing for the user so what i'm going
32:52 - to do is right before i actually have
32:54 - this scan here i'm going to say fmt
32:57 - dot print f like this
33:00 - and i'm just going to say enter
33:02 - your name
33:04 - colon like that so let's see what
33:06 - happens now
33:07 - when i do that okay go run tutorial dot
33:09 - go
33:10 - let's go with tim
33:12 - and then says hello tim welcome to the
33:14 - game
33:14 - awesome that is much better now notice
33:17 - here that i used printf
33:19 - instead of print lm now println is gonna
33:22 - make it so that we move down to the next
33:24 - line after we print this
33:26 - if i don't use println i use printf
33:29 - instead you're going to see here that
33:31 - what happens
33:32 - is it says enter your name on the same
33:34 - line now obviously we don't want that
33:36 - let me just get out of this here that's
33:38 - why i'm using print ln
33:39 - now if you're using printf and you want
33:42 - to make it go down to the next line
33:44 - after you're printing the formatted
33:45 - string what you can do is embed this
33:47 - special character called
33:50 - backslash n now this is known as the new
33:52 - line character and what it does is it
33:54 - moves the console down to the next line
33:57 - so just to show you something here if i
33:58 - do something like enter backslash n and
34:01 - then your name you're going to see it's
34:02 - going to print enter it's going to move
34:04 - us to the next line and then it's going
34:05 - to print your name and then allow us to
34:07 - type so let's look at this
34:10 - let's go here and see it says welcome to
34:12 - my quiz game enter it brings us down to
34:14 - the next line your name
34:16 - tim and then the rest continues as we
34:18 - would expect okay hopefully that makes
34:20 - sense i just wanted to cover that all
34:22 - right so at this point we've made a
34:23 - little bit of progress on our game but i
34:25 - want to continue and actually start
34:26 - asking the user some questions so the
34:29 - first question that i want to ask the
34:30 - user is for their age and i want to
34:32 - determine if they're old enough to play
34:34 - my game maybe i'm going to make the age
34:36 - limit or the age minimum something like
34:38 - 10 years old maybe i have you know
34:39 - explicit content in my game whatever
34:41 - this is just going to be a good first
34:42 - example to go through so now we're going
34:44 - to repeat the process i'm going to say
34:46 - fmt.printf
34:48 - i'm going to say enter
34:51 - your
34:52 - age if we could type properly like that
34:55 - then i'm going to make a variable i'm
34:57 - going to say var age int okay now i
35:00 - could also make this an unsigned integer
35:01 - if i want so that they can't type in a
35:03 - negative value in fact let's do that
35:05 - that's going to be good and then i'm
35:06 - going to say fmt.scan
35:08 - and i'm just going to scan into the
35:10 - ampersand age variable okay
35:12 - now what i want to do though is i want
35:14 - to print out something that tells the
35:16 - user if they're old enough to play so
35:18 - this is where we're going to start
35:19 - talking about conditions so i'm just
35:21 - going to do this and then i'll talk
35:22 - about how this works i'm going to say
35:24 - fmt dot print ln and i'm going to say
35:27 - age is greater than or equal to 10. so
35:30 - maybe the minimum age to play is going
35:31 - to be 10 years old now what i've just
35:33 - done here is i've written a condition
35:35 - now a condition is anything that
35:36 - evaluates to true or false so in this
35:39 - case what's going to happen is age is
35:40 - going to be compared to 10 and we're
35:42 - going to check if age is greater than or
35:44 - equal to 10. now remember that true or
35:47 - false is the boolean data type which
35:49 - means a condition is anything that
35:51 - evaluates to bull so what this does is
35:53 - this gives us the value true if this
35:56 - condition is true so if age is greater
35:58 - than or equal to 10 or it gives us false
36:00 - if age is not greater than or equal to
36:02 - 10. so now i'll just print this out and
36:04 - it's going to tell us whether or not the
36:06 - user is old enough to play or not old
36:08 - enough to play by printing true or by
36:10 - printing false so let's run our code
36:13 - go run tutorial.go let's enter our name
36:15 - of tim and hello tim welcome to the game
36:18 - it says enter your age we're going to
36:19 - have to fix this because it's on the
36:20 - same line now i'm going to enter 9 and
36:22 - notice it prints out false now let's
36:24 - just run this again let's type in our
36:26 - name of tim let's type in our age let's
36:29 - go with the real age now and notice it
36:30 - prints out true because we were greater
36:33 - than or equal to 10.
36:35 - okay now just like we have greater than
36:37 - or equal to we have greater than now if
36:39 - i were to type in 10 this would evaluate
36:41 - to false because this is checking if age
36:43 - is strictly greater than 10 not greater
36:45 - than or equal to of course we have less
36:47 - than we have less than or equal to we
36:50 - have two equal signs which is checking
36:52 - is the age exactly equal to 10 and we
36:55 - have the not equal to which is telling
36:57 - us is the age not equal to 10. pretty
36:59 - straightforward but those are our
37:01 - conditional operators and all of these
37:03 - allow us to get something that is true
37:05 - or false
37:06 - okay so let's just fix this so it's not
37:08 - showing up on the same line the way i'm
37:09 - going to fix that is i'm going to add a
37:11 - backslash n here the reason i need to do
37:13 - this rather than changing this to ln is
37:16 - because if i change that to ln then i'm
37:17 - no longer able to actually print out my
37:20 - formatted string okay so that's why i
37:22 - need to do the manual backslash n which
37:24 - now means this will go on a new line now
37:26 - i also could do this
37:28 - just put a backslash n at the beginning
37:30 - of this line doesn't really matter it's
37:32 - kind of up to you
37:33 - okay so let's go backslash in here
37:35 - okay so now that we have gotten this and
37:37 - we understand the condition what i would
37:39 - like to do is i want to print something
37:41 - out if the user is old enough to play or
37:44 - if they're not well enough to play right
37:45 - so if they're old enough to play i want
37:46 - to start asking them questions if
37:48 - they're not old enough to play then i
37:49 - want to immediately end the program so
37:51 - this is where we're going to start
37:52 - talking about conditionals really if and
37:55 - else statements so i'm just going to
37:57 - write one out because they're pretty
37:58 - straightforward
37:59 - but i'm going to say if the age is
38:00 - greater than or equal to 10 then i'm
38:02 - going to say fmt dot print line
38:05 - i'm going to say yay you can play
38:07 - exclamation point okay now take a wild
38:10 - guess of what this is going to do i'm
38:12 - going to run the code and then we'll
38:13 - explain it
38:14 - so here we go it's going to ask me for
38:15 - my name i'm going to say tim
38:17 - he's going to say hello tim welcome to
38:19 - the game i'm going to enter my age of
38:20 - 20. it's going to say yay you can play
38:23 - now let's run this again
38:24 - let's go tim
38:26 - let's enter the age of 9 and then notice
38:28 - it doesn't print anything out so what we
38:31 - just did here is we wrote what's known
38:32 - as a conditional block this is pretty
38:35 - much saying we're only going to run
38:36 - what's inside of these curly braces if
38:39 - what we've written here is true so this
38:42 - is a condition this is something that
38:44 - evaluates to true or false which is our
38:46 - boolean data type and if this is true
38:49 - we're going to run this line if it's
38:50 - false we're not going to run this line
38:52 - so here we're checking if age is greater
38:53 - than or equal to 10 so if we type
38:55 - anything 10 or greater then we'll run
38:57 - this otherwise we won't there you go
38:59 - you've just learned how to implement an
39:01 - if statement these are pretty
39:02 - straightforward but very very powerful
39:05 - all right so now that we've printed
39:06 - something if they can play i want to
39:08 - print something if they can't play now
39:10 - one thing that i could do is i could say
39:12 - if age is let's go with less than 10
39:16 - then i could fmt
39:17 - dot print line
39:20 - you can't play exclamation point however
39:23 - this isn't the most efficient way to do
39:25 - this because we have something known as
39:26 - an else statement so first of all i just
39:28 - want to mention this is val this is
39:30 - going to work the way that we would
39:31 - expect we're going to check this if
39:32 - statement then we're going to check this
39:34 - if statement and one of these will end
39:36 - up running because it's either going to
39:37 - be greater than or equal to 10 or it's
39:39 - going to be less than 10. but since we
39:41 - know that if it's greater than or equal
39:43 - to 10 it can't not be greater than or
39:45 - equal to 10 there's no point in us
39:47 - really running this if statement down
39:48 - here it's kind of redundant if that
39:50 - makes sense at all so this is where i'm
39:52 - going to introduce something called the
39:53 - else statement
39:54 - now the else statement is exactly what
39:56 - it stands or exactly what it sounds like
39:58 - sorry it's what's going to happen if
40:00 - this if statement does not run so i'm
40:02 - just going to say you
40:04 - cannot play exclamation point so the
40:07 - idea here is we're going to check this
40:08 - condition if it's true we're going to
40:10 - run this if it's not true so else we're
40:13 - going to run this so this is saying okay
40:15 - we're going to try to do this if we
40:16 - can't do it we'll do this one so one of
40:18 - these two blocks is going to run either
40:20 - the if block or the else block is going
40:22 - to run okay let's go ahead and run this
40:26 - so i'm going to go here and go go run
40:27 - tutorial dot go enter the name of tim
40:30 - let's enter the age up 9 and now it says
40:32 - you cannot play let's run again
40:35 - let's go tim
40:36 - let's enter 10 and now it says you can
40:39 - play right perfect
40:41 - okay so let's clear that
40:42 - alright so you have now learned about if
40:44 - and else's now this is really all we
40:46 - need to start implementing the quiz game
40:48 - so let's now ask our first question but
40:51 - only if the user is allowed to play
40:53 - now the way that i'm actually going to
40:55 - make it so that we won't ask the user a
40:57 - question if they're not old enough to
40:59 - play is i'm going to write a line right
41:01 - here called return
41:03 - now this is a little bit complicated for
41:04 - this tutorial but what this is going to
41:06 - do is it's actually going to break out
41:08 - of this main function so whenever you
41:10 - see a return keyword this actually
41:13 - allows you to return a value from a
41:15 - function but since we're not dealing
41:17 - with functions for now what you can
41:18 - think that this is going to do is it's
41:20 - just going to immediately end our
41:21 - program so we're inside of this function
41:24 - main and as soon as we hit a return
41:26 - keyword we exit the function which means
41:29 - that if i put a line like here like
41:30 - fmt.printline
41:33 - continue
41:34 - we're not going to get to this continue
41:36 - line if a return statement is occurring
41:39 - before
41:40 - so if we hit this return statement which
41:41 - means we were in the else statement then
41:43 - we won't print this out but if we don't
41:45 - hit the return so if we were old enough
41:47 - to play then we'll continue
41:48 - hopefully that makes sense but let me
41:50 - run this and show you an example
41:52 - okay so go run tutorial dot go
41:54 - let's type in our name of tim and let's
41:56 - go with 20 and then it says yay you can
41:59 - play and continue now if we do this in
42:01 - the other case so i say tim and i enter
42:03 - something like 8 then it's going to say
42:05 - you cannot play and notice we didn't
42:08 - print continue all right so now let's
42:10 - continue and actually ask the user some
42:12 - questions once we get to this line so we
42:15 - can go ahead and do this i'm going to
42:17 - say fmt
42:18 - dot
42:19 - print if i could type properly here
42:23 - printf we're going to start by just
42:25 - asking whatever the first question in
42:26 - our quiz is going to be now you can make
42:28 - this whatever you want for now i'm going
42:30 - to say
42:31 - what is better
42:34 - the rtx
42:35 - and then we'll go with 3080 or
42:38 - rtx 3090 question mark now these are
42:41 - graphics cards and one thing i want to
42:43 - note is that i'm intentionally using
42:45 - print f and i'm adding a space at the
42:47 - end here because i want the user to
42:49 - start typing at the end of this line if
42:52 - i were to type print ln
42:54 - then that would mean the user would
42:55 - start typing on the next line not after
42:57 - the question mark here okay so that's
42:59 - why i'm using printf
43:01 - anyways now i'm going to say var
43:04 - answer and then this will be a string
43:08 - is going to be equal to actually i don't
43:10 - even need to give it equal to anything
43:11 - i'll just write it like that and i'll
43:12 - say fmt.scan
43:15 - ampersand and then answer
43:17 - and for now i just want to go with
43:20 - fmt dot
43:22 - print and we can just print line and
43:24 - i'll just print out the answer okay
43:26 - before we actually check what the answer
43:28 - is
43:28 - so i'm going to run my code go run
43:30 - tutorial dot go okay enter your name tim
43:34 - age 21 yeah you can play what is better
43:37 - rtx 3080 or 3090 let's go rtx
43:41 - and then 3080 and hit enter now notice
43:45 - that the answer that it printed out here
43:47 - is rtx
43:48 - not rtx 3080 even though i typed in rtx
43:52 - 38 now that's actually the incorrect
43:53 - answer but either way notice how it's
43:55 - not giving me the 3080. now this is
43:57 - something that i need to cover which is
43:59 - kind of a potential problem with this
44:01 - scan
44:02 - i guess statement scan function whatever
44:04 - you want to call
44:06 - so the thing is this scan function what
44:07 - it actually does is it scans uh space
44:10 - separated values in your input so what
44:14 - that means is it's going to store
44:15 - whatever the first value is that i type
44:17 - in that's not separated by a space in
44:20 - one variable and then the next thing
44:22 - that i type in separated by a space it
44:24 - will store in another variable so here
44:26 - it's only giving me rtx because i only
44:29 - gave it one variable to scan the values
44:32 - into
44:33 - so i have rtx it's storing rtx but then
44:36 - the 3080 would need to be stored in a
44:37 - separate variable because that's how
44:39 - this works so hopefully that makes sense
44:42 - but as soon as you hit a space it's
44:43 - going to kind of stop storing that
44:45 - current word or that current input and
44:47 - it's going to move on to the next one
44:49 - and try to score store that in a second
44:51 - variable so let me show you what i mean
44:53 - here if i go var answer to
44:55 - string and then i go here and i go
44:57 - ampersand and we go answer two now if i
45:01 - print answer and then answer 2.
45:05 - let's run this and notice that after i
45:07 - get past these i can type something like
45:10 - rtx
45:11 - 3090 and now i get rtx and 3090. so rtx
45:15 - is an answer and 3090 is an answer too
45:18 - so this is a potential solution to be
45:20 - able to collect both of these values is
45:22 - to store them in two separate variables
45:25 - and then we're going to have to combine
45:26 - these variables together by performing a
45:28 - concatenation to actually compare this
45:30 - against what we think the correct answer
45:32 - should be
45:33 - okay hopefully that makes sense now
45:35 - there's other ways to actually collect
45:37 - the entire line but i don't want to show
45:39 - them because they're too complicated for
45:40 - this tutorial so for now if you want to
45:42 - collect multiple words this is going to
45:44 - be the solution that you're going to
45:46 - have to use okay
45:47 - declare multiple variables
45:49 - put multiple values inside of here
45:51 - multiple variables right and then it's
45:52 - going to scan all of those words in
45:55 - now let's look at something else here
45:57 - if i run this and i go tim 21 and let's
46:01 - just type rtx when i hit enter
46:04 - notice that the program's not ending now
46:06 - the reason it's not ending is because
46:08 - it's waiting for me to type the second
46:10 - word so it's not going to end until i
46:12 - type two things so keep that in mind
46:15 - when you're using this scan if i put two
46:17 - variables here it's going to wait for me
46:19 - to type two individual values before it
46:21 - moves on to the next line so now if i
46:23 - type 3090 that's fine but again i need
46:25 - to type two things in because i'm
46:27 - accepting two things inside of fmt.skin
46:31 - okay i think that's all i need to cover
46:32 - for the scan now we'll go with answer
46:35 - and answer two for now that's fine
46:37 - and then what i want to do is i want to
46:38 - check if the answer that the user typed
46:40 - in is equal to the correct answer and
46:42 - tell them if they got the question
46:44 - correct so i'm going to say if and then
46:46 - i'm just going to go
46:47 - answer plus answer 2. i'll talk about
46:50 - what this doing in a second is equal to
46:53 - rtx 3090
46:55 - then i want to fmt
46:57 - dot print line
46:59 - and then correct exclamation point
47:02 - otherwise
47:03 - i want to say fmt dot print line and
47:06 - then in
47:07 - correct exclamation point
47:09 - okay so what answer plus answer two is
47:11 - going to do is it's going to add these
47:13 - two strings together so whenever we have
47:15 - multiple strings we can concatenate them
47:18 - that means to join them together by just
47:20 - adding them using the addition sign so
47:22 - since the first part of my answer is
47:24 - stored in answer and the second part is
47:26 - inside of answer 2 then i'm going to
47:28 - combine them right so i'm going to say
47:30 - rtx plus 3090. however when i do this
47:34 - it's going to give me the string that
47:35 - looks like this rtx 3090. now that is
47:38 - not equal to rtx space 3090 right
47:41 - whenever we have a space that's going to
47:43 - make the string different rtx 3090 no
47:45 - space and rtx 3090 with a space are
47:47 - different strings now same thing like
47:49 - this right even if i had
47:51 - this these are different strings because
47:53 - this is a lowercase x that's just worth
47:55 - mentioning
47:56 - anyways though this means that i want to
47:58 - add a space in between here so i'm going
48:01 - to do that so now i'm going to combine
48:03 - the two answers with a space and then
48:05 - see if that's equal to rtx 3090 which is
48:08 - the correct answer
48:09 - okay so let me run this here
48:12 - let's go go run tutorial dot go let's go
48:14 - tim 21 and then rtx 3090 and it gives us
48:19 - correct yay there we go we now know how
48:21 - to correct or sorry not correct collect
48:23 - multiple words from user input now let's
48:26 - try this again and let's type in tim
48:30 - and then 21 and then let's go with
48:32 - something like rtx 3080
48:36 - and notice that we get incorrect right
48:37 - and if we were to type anything other
48:39 - than rtx 3090 then it would not give us
48:42 - correct it would give us incorrect
48:44 - okay let's clear
48:45 - perfect now let's say that maybe there's
48:48 - a second correct answer to this question
48:50 - maybe they can type in rtx 3090 using
48:53 - all lower cases for the rtx because
48:55 - right now that's not going to work well
48:57 - how would we make that answer correct as
48:59 - well well the way we do that is by now
49:01 - implementing an else if statement so let
49:04 - me show you how this works
49:06 - you write else
49:08 - if and now you can check another
49:10 - condition here and check if this
49:12 - condition is true so let's do this i'm
49:14 - going to say else if answer plus answer
49:17 - 2 equals rtx 3090 but i'm going to now
49:19 - this time make this lowercase rtx
49:22 - and then what i'm going to do here
49:25 - is i am going to say
49:27 - fmt.princeline
49:29 - and then correct exclamation point so
49:31 - let me just describe what i did so now
49:33 - we've implemented the l if statement so
49:35 - we're checking if this condition is
49:37 - correct now if this is true answer plus
49:39 - space plus answer two is equal to rdx
49:41 - 3090 we're going to print correct and
49:43 - we're just going to move down to the end
49:45 - of the if statement we're not going to
49:46 - do the else we're not going to check the
49:47 - else if and i mean that kind of makes
49:49 - sense if you read what you know elsif
49:51 - has said now if this statement is false
49:54 - so if this condition is false then what
49:56 - we're going to do is we're going to go
49:57 - to this condition so the elsif condition
50:00 - below it and check if this is true so
50:02 - we're going to say if this is false then
50:04 - we want to check this so if answer plus
50:06 - answer 2 is equal to rtx 3090 with the
50:08 - lower case then we'll print correct and
50:10 - then we'll go down to the end of the if
50:12 - statement now if this is false then
50:14 - we'll go to the else statement okay so
50:16 - we're kind of going in order we're first
50:17 - checking this if it's false we check
50:19 - this if that's false we do this if this
50:22 - is true we're done we don't check either
50:23 - of these we just move to the end of the
50:25 - if statement now one thing that's worth
50:27 - mentioning here is that you can use
50:29 - multiple l if statements so maybe i want
50:31 - to check another possible answer i'm
50:32 - just going to copy this in here
50:34 - i want to check else if the answer plus
50:36 - space plus answer 2 is equal to and then
50:38 - maybe i want an rt and then a capital x
50:41 - 3090 right well that's fine i can do
50:43 - that let me just
50:44 - fix this a little bit
50:47 - and oops okay i'm messing all this stuff
50:49 - up but you get the idea
50:51 - now what's going to happen is i'm going
50:52 - to check this and if this is false i'm
50:55 - going to check this if this is false i'm
50:57 - going to check this and if that's false
50:58 - i'm just going to do what's inside of
50:59 - here okay hopefully that makes sense now
51:02 - let's go back to what i had before
51:03 - because i just messed up my code pretty
51:04 - badly
51:05 - and there we go that's better that's the
51:07 - cleaner if alif statement i want so just
51:10 - to clarify here you can have as many l
51:12 - if statements as you want or else if
51:14 - statements as you would like however
51:15 - they must come after an if statement you
51:18 - need to start with an if statement you
51:19 - can have as many lsifs as you want then
51:21 - you can end optionally with an else but
51:24 - you don't need the else so in this
51:25 - situation i could remove the else that's
51:27 - totally fine this block of code will
51:29 - still work all right
51:30 - so let's go back to what i had before
51:32 - and now let's run this code and check
51:34 - out the else if okay so go run
51:36 - tutorial.go
51:38 - let's go tim
51:39 - 21 and then let's go rt and actually
51:42 - just lowercase rtx 3090 and then notice
51:45 - it gives us correct because now this was
51:47 - false so we checked this it was true we
51:49 - printed correct and then we were done
51:52 - okay
51:53 - hopefully that makes sense so now that
51:55 - we have done this i want to do my next
51:57 - question right so let's now implement
51:59 - our second question directly after this
52:02 - i'm going to say fmt dot printf and now
52:05 - what question do we want to ask let's go
52:06 - with another computer question so let's
52:08 - do something like how many cores does
52:11 - the
52:12 - ryzen
52:14 - 9 3900x
52:17 - have question mark now the correct
52:19 - answer is 12 this is the cpu that i have
52:21 - that's why i'm going with this but i'm
52:23 - going to say var
52:24 - and then actually i can't call this
52:26 - answer and the reason i can't call this
52:28 - answer is because this variable already
52:30 - exists so what i could do is i could
52:33 - just say
52:34 - fmt.scan
52:36 - ampersand answer and then this would
52:37 - store whatever i typed in the answer
52:39 - variable
52:40 - but the problem is the input that i want
52:43 - here is going to be an int i want a
52:45 - number i don't want a string so how do i
52:47 - fix this well since the answer variable
52:50 - is already defined and it has the type
52:52 - string i can no longer use this variable
52:55 - so instead i need to come up with
52:56 - another variable that i'm going to use
52:58 - to store the answer okay now i could
53:00 - actually still use answer but again
53:03 - what's going to happen is my answer is
53:04 - going to come in as the type string
53:06 - which means i would then need to check
53:08 - if the user typed in the string 12 not
53:11 - the number 12 which is not something
53:12 - that i want to do so i'm going to say
53:14 - fmt.scan but before i can do that i need
53:17 - to declare the variable it's going to
53:18 - hold the answer so i'm going to say var
53:21 - let's just go with cores and let's make
53:23 - this int and then i'll say ampersand
53:25 - chorus like that now for experiment
53:27 - purposes if you want you can try doing
53:28 - this with a regular answer and you'll
53:30 - see the problems that i was discussing
53:32 - okay so i'm going to say fmt.scan at
53:34 - coors or ampersand chorus sorry and now
53:36 - i'm just going to do a very similar
53:37 - thing to this where i check if the
53:39 - answer is equal to the correct answer so
53:41 - i'm going to say if answer is equal to
53:43 - in this case 12 then what i can do is
53:46 - fmt.printline and i can say
53:49 - correct exclamation point
53:51 - otherwise
53:53 - i can
53:54 - fmt.printline
53:56 - incorrect exclamation point there you go
53:58 - that's all i need i don't need an else
54:00 - if because there's not really any other
54:01 - way to type 12 unless the user were to
54:04 - type in
54:05 - like 12
54:06 - but that's not going to be accepted as
54:08 - an answer we're just not going to accept
54:09 - that
54:10 - okay so let's just test this out and see
54:12 - if this works so let's go go run
54:14 - tutorial dot go and we get a problem it
54:16 - says invalid operation answer equals
54:18 - equals 12 mid mismatch types strings in
54:21 - untyped int this is actually a good
54:23 - problem to run into because i realized
54:25 - that i typed this variable wrong but
54:27 - what this is saying is that i cannot
54:28 - compare a string and an unsigned integer
54:31 - which is what i'm trying to do now i
54:33 - didn't mean to type answer here i meant
54:34 - to type course because we want to check
54:36 - this not this but it's just worth noting
54:39 - that when you're going to be comparing
54:40 - different types you usually can't do
54:42 - that so i can't compare a string and an
54:44 - interior because how do i compare if a
54:46 - string is equal to an int when they are
54:48 - different data types it's an invalid
54:49 - operation and well that's why i am
54:51 - getting an error okay just worth noting
54:54 - now one thing i will do is actually
54:55 - change this to uint as well for unsigned
54:57 - end because i don't want them to type in
54:58 - a negative number
55:00 - okay so let's continue here
55:02 - let's go go run tutorial dot go enter
55:04 - name tim we're going to enter age 21.
55:07 - you can play what is better let's go rtx
55:09 - 30 or 2080 okay incorrect that's fine
55:12 - how many courses have let's type in 12
55:14 - and then we get correct awesome there we
55:17 - go we've answered the question correctly
55:19 - okay so at this point in time i'm not
55:20 - going to implement any more questions
55:22 - because you guys can do that on your own
55:23 - they're just going to follow this same
55:25 - format here what i will do though is
55:27 - show you a few different ways to kind of
55:29 - format these if and else statements and
55:31 - i also am going to show you how we can
55:33 - keep track of how many questions the
55:34 - user has gotten correct so if i want to
55:36 - keep track of the number of correct
55:38 - questions i need a variable that's going
55:40 - to store how many correct questions i
55:42 - have so what i'm going to do is i'm
55:44 - going to make a variable let's do it
55:46 - actually right up here i'm going to say
55:48 - var
55:49 - score and then this is going to be an
55:51 - int and i'll just make this equal to 0.
55:53 - now i don't need to type out all of this
55:55 - though because i'm just going to assign
55:56 - the value of 0. so instead i'm going to
55:58 - say score
56:00 - colon equals zero and now uh golang is
56:03 - going to interpret that this is an
56:04 - integer it's going to manually or sorry
56:06 - automatically i guess make this type an
56:08 - int and so i don't need to type out var
56:10 - score int i can just do it like this the
56:12 - reason why i need to do the types here
56:14 - is because i'm not assigning these a
56:15 - value i'm just declaring that they exist
56:18 - and then i'm going to use them in the
56:19 - scanners so i need to explicitly define
56:21 - the type
56:22 - anyways we have score now i'm going to
56:24 - show you how we can modify this variable
56:26 - to add 1 to it whenever we get an answer
56:28 - correct this is pretty straightforward
56:30 - but inside of my if statement i'm going
56:32 - to say score
56:33 - plus equals 1. now plus equals 1 is an
56:36 - operation you can use to add 1 to the
56:38 - existing value of score so if score was
56:41 - equal to
56:42 - negative 1 and i did plus equals one it
56:44 - would make score equal to zero right if
56:46 - it's zero it's going to make it equal to
56:47 - one it's just gonna add one to it now
56:50 - writing this is the exact same thing as
56:51 - doing the following
56:53 - score is equal to score plus one all i'm
56:56 - doing is saying okay what's the current
56:57 - value of score
56:58 - add 1 to it and then assign that to the
57:00 - variable score that's completely fine
57:02 - because i'm assigning another integer to
57:04 - the int type
57:06 - okay
57:07 - there you go now let's just make this
57:09 - plus equals 1. now one other way that
57:11 - you can do this is you can also do plus
57:13 - plus now plus plus stands for increment
57:16 - and this is going to add one two score
57:18 - so if you only want to add one to it you
57:19 - can just do square plus plus this is
57:21 - kind of a shortcut however if i wanted
57:23 - to add like five then i would do the
57:24 - plus equals because then i could add any
57:27 - number that i want in this case i would
57:28 - add 5. now one thing to note too is that
57:30 - i could add another variable here so
57:32 - maybe i had a variable called increment
57:34 - i could put that here and then whatever
57:36 - the value of that is i would add that to
57:37 - score okay hopefully that makes sense
57:39 - for now we'll go with square plus plus
57:41 - because we just want to add 1. so that
57:43 - means in here i need to do this as well
57:44 - because if i get it correct i want to
57:46 - add one and then i'm going to go to
57:49 - here and go score plus plus so now that
57:52 - i've incremented the score i'm either
57:53 - going to have a score of 0 1 or 2 at the
57:55 - end of my program so let's go ahead and
57:57 - print out what the score is i'm going to
57:59 - say fmt.printf
58:00 - i'm going to say u and then we'll go
58:02 - like this
58:03 - scored this is going to be percent v
58:07 - out of
58:09 - and then the number of questions that we
58:11 - have i also want to store this in a
58:12 - variable so let's go up here to score
58:15 - and let's say num underscore questions
58:18 - colon equals and then we'll just set the
58:19 - number of questions that we have which
58:21 - in this case is two
58:22 - okay so i'm going to say you scored
58:24 - whatever out of whatever
58:26 - okay and then we'll go comma and we'll
58:29 - go with score and then num questions
58:32 - okay so let's just test this out and
58:33 - then we can add some more stuff
58:35 - all right so go run tutorial dot go
58:38 - enter name tim
58:39 - age 21 yes you can play what is better
58:42 - rtx 3080 or 3090 let's go rtx 3090 okay
58:46 - how many cores is ryzen 9 3900 x have
58:49 - let's go with 10 says incorrect you
58:51 - scored one out of two awesome there we
58:54 - go so now to continue with this let's
58:56 - calculate the actual percentage score
58:59 - that the user gets
59:00 - so to do that i'm going to do it in kind
59:02 - of a more verbose way just so that you
59:04 - understand i'm going to make a variable
59:06 - i'm going to say
59:08 - percent
59:09 - colon equals and then what i'm going to
59:11 - do is i'm going to take this score i'm
59:12 - going to divide this which is the
59:14 - forward slash that's division by the
59:17 - number of questions and then i'm going
59:18 - to multiply this by 100. now the
59:20 - multiplication is an asterisk and what i
59:22 - can do is define my order of operations
59:25 - here
59:25 - by doing the following so i can say i
59:27 - want to do the division first in
59:29 - parentheses right and then i'm going to
59:30 - multiply this all by a hundred and that
59:32 - should give me the correct percent now
59:34 - again golling is going to infer what the
59:37 - type of this is going to be so i don't
59:39 - need to manually define that this is an
59:40 - int or a float or whatever it's going to
59:42 - be
59:43 - so in this case now i can say fmt dot
59:45 - and let's actually just add a new line
59:48 - here so this goes to the next line and
59:49 - we're going to print
59:51 - actually f and we'll say
59:54 - u
59:55 - scored
59:57 - colon and then this will be percent v
60:00 - let's find that and then i'm actually
60:02 - going to put a percent sign so that it
60:03 - will say you scored like 75 or 80 or
60:06 - whatever the percent is and then we'll
60:08 - add a period comma
60:10 - and then we'll put percent
60:12 - okay so let's run the program now so
60:14 - let's clear the console and run
60:17 - name tim h21
60:20 - rtx
60:21 - like this
60:22 - 3090 okay correct how many cores does
60:25 - this have let's go with nine incorrect
60:28 - you scored one out of two you scored
60:30 - zero percent and then it gives me
60:31 - missing this is a little bit weird why
60:33 - am i getting that so the reason why
60:35 - we're getting this error here is because
60:36 - of this percent when i actually want to
60:38 - embed a percent sign inside of my printf
60:42 - i need to do a double percent because
60:44 - the percent is being treated as a
60:46 - formatting character and so when i just
60:48 - have one it's saying missing here
60:50 - because it's missing what's coming after
60:52 - the percent
60:53 - so if i do two percent this actually
60:55 - means a literal percent sign and so now
60:57 - we shouldn't get that problem
60:59 - so let's try this now
61:01 - okay let's go tim
61:03 - 21 uh let's just enter rtx 3090 2090
61:08 - okay let's go with 12
61:10 - and then notice we get you scored zero
61:12 - percent that's a little bit weird why am
61:15 - i getting zero percent all right so i
61:16 - had to make a cut there because i was
61:17 - just looking at exactly the problem that
61:19 - was occurring but we were seeing that
61:21 - what we were getting for our percentage
61:22 - here was zero percent when we know the
61:24 - correct percent should have been 50. so
61:27 - how do we fix this and why is this
61:28 - problem occurring
61:30 - well the reason why we're getting this
61:32 - problem is because right now we're
61:33 - dividing two integers we have an int
61:36 - divided by another int now whenever you
61:38 - do an operation with two data types that
61:40 - are the same type the result of that is
61:43 - going to be that same data type so if i
61:45 - have an int and i'm dividing that by an
61:47 - int i'm going to get an int which means
61:50 - i'm going to get 0 here now if the score
61:53 - and the number of questions are the same
61:54 - i would get 1
61:55 - but since this actually gives me 0.5
61:58 - it's just going to be rounded down to 0.
62:01 - now it works a little bit more
62:02 - complicated than that but the idea is if
62:05 - i have one in and i'm dividing another
62:07 - int that operation can't return me a
62:09 - float it has to give me an int and so
62:12 - since i can't store something like 0.5
62:14 - it just defaults to storing zero so what
62:16 - i actually need to do here is i need to
62:18 - convert both of these types two floating
62:21 - point values divide them by each other
62:24 - and then multiply them by a hundred and
62:26 - that will then give me a float type here
62:28 - for my percent
62:30 - so i'm going to say float 64 and i'm
62:32 - going to surround that i'm going to
62:34 - surround score and float 64. and then
62:36 - same with the number of questions now
62:39 - the reason why i need to do both of
62:40 - these here is again because we need to
62:42 - have the same type on the left and the
62:44 - right hand side of my arithmetic
62:46 - expression arithmetic is just math so if
62:48 - i was adding these same thing i would
62:49 - need to do that so that i can actually
62:52 - get the correct type here i know this is
62:54 - a little bit confusing but float64 is
62:56 - just going to convert this type to a
62:58 - float64 data type so now when i divide
63:02 - my two floats i can actually store a
63:03 - floating point result of 0.5 i can
63:06 - multiply that by a hundred i don't need
63:08 - to convert this to a float because it
63:10 - can be interpreted as a float 100 can be
63:12 - stored as a float so this is fine and
63:14 - that means that percent now should give
63:16 - me 50 and i should actually print out
63:19 - 50. again this is kind of getting into
63:20 - the weeds of golang and some stuff i
63:22 - didn't really want to cover in this
63:23 - video but i guess i have to show you
63:25 - because we want to do some basic math
63:27 - and hopefully this gives you some
63:28 - insight into the typing system
63:30 - okay let's run this though go run
63:32 - tutorial dot go
63:34 - let's enter the name let's enter 21
63:36 - let's enter
63:37 - rtx 3090 let's do this incorrectly and
63:40 - then it says you scored 50 percent
63:43 - meaning that our percentage calculation
63:44 - is now working properly okay
63:47 - hopefully that is clear but there you go
63:49 - we now have the percent
63:51 - awesome now that i've showed you that
63:53 - i'm pretty much ready to wrap up the
63:55 - video
63:56 - the last thing i want to show you is how
63:57 - we can simplify this right here so
63:59 - rather than repeating the code in here
64:01 - we actually have two conditions that
64:04 - allow this here to be true
64:06 - so some of you may have seen this before
64:08 - but we have operators in golang known as
64:10 - the or operator the and operator and the
64:13 - not operator now these allow us to chain
64:16 - conditionals together now to explain
64:18 - these i have to go through them one at a
64:19 - time so i'm going to start with or so
64:21 - what or does or what or is i guess is
64:23 - two pipes okay so two vertical lines and
64:26 - this is going to give you true if what's
64:28 - on the left or the right hand side of
64:30 - this operator is true so for example if
64:33 - i have true or false this is going to
64:36 - return to me true now if i have the
64:39 - other way around so if i have
64:41 - false here
64:42 - or true
64:44 - then take a guess of what we're going to
64:45 - get well we're going to get true so the
64:47 - or is just looking to the left and to
64:49 - the right
64:50 - if what's to the left and what's to the
64:52 - right evaluates to true or false so if
64:54 - it's a condition it's going to look at
64:55 - both of the conditions and if either of
64:57 - the conditions are true it's going to
64:59 - return true now if both of the
65:01 - conditions are false it's going to give
65:03 - me false
65:04 - okay
65:05 - now let's look at ant now and is kind of
65:07 - the opposite of or and is checking the
65:10 - left and the right hand side and telling
65:11 - me if both the left and the right hand
65:13 - side are true so in this case i have
65:15 - true and false well that's going to give
65:17 - me false because no true and false
65:19 - they're not both true so i get false now
65:22 - if i have
65:23 - false and false of course i get false if
65:25 - i have false and true i get false but if
65:27 - i have
65:28 - true and true then i get false okay that
65:31 - is ant
65:32 - then we have not now what not does is
65:34 - simply negates the true or false so what
65:36 - that means is if we have a not false
65:39 - this is going to be true right oops
65:42 - let's do the arrow the correct way
65:44 - like that now if i have not true
65:47 - if we can get the exclamation point then
65:49 - this is going to give me false okay so
65:50 - it just simply reverses true to false
65:52 - and false to true it negates them there
65:55 - you go those are what's known as the
65:56 - logical operators inside of goaling now
65:59 - the point of me showing those to you is
66:00 - that we can simplify this if statement
66:03 - block right here by removing this l if
66:06 - this else if here and simply combining
66:09 - two expressions or two conditions
66:10 - together in this if statement so let me
66:13 - show you what i mean i'm just going to
66:14 - copy this
66:15 - i'm going to remove this else
66:17 - and now we're just going to have the if
66:19 - and the else but i still want to check
66:21 - if you type in all lowercase rtx than
66:23 - 3090 i want to check if you type that in
66:25 - and if you do i still want to say that
66:27 - you got it correct so i'm simply going
66:29 - to put the or operator here and then i'm
66:31 - just going to put my other condition so
66:32 - i'm going to check now if this is true
66:35 - or if this is true hopefully that makes
66:38 - sense but i'm just combining two
66:39 - conditions together and now if both this
66:42 - or this are true then i will return
66:44 - correct so either this one or this one
66:46 - doesn't matter and if both of them are
66:48 - false then i will print incorrect okay
66:51 - now if i wanted to add another one here
66:53 - i could get crazy and i could add
66:54 - another or that'd be totally fine in
66:56 - fact if i do this now maybe i want to
66:59 - check rt and then capital x right that's
67:01 - fine i can now have three ors together
67:03 - and if either of these three conditions
67:05 - are true then i'm going to do what's
67:07 - inside of the if statement
67:09 - okay now just to show you the other
67:11 - operator here if i were to make this an
67:13 - and then this would never be true the
67:15 - reason why this here would never be true
67:18 - is because i'm checking if answer plus
67:20 - space plus answer two is equal to rtx
67:21 - 3090 and if it's equal to this now of
67:24 - course these can't be equal to both of
67:26 - these things at the same time so i would
67:28 - always get false now you use and when
67:30 - you want to check if both of the
67:32 - conditions are true but of course here
67:34 - we want to use or all right you can mess
67:36 - around with those and experiment with
67:37 - them but that is how they work okay
67:40 - so now let's run the code
67:42 - and let's try this so i'm going to say
67:44 - tim
67:45 - let's go 21. let's go rtx 3090 notice we
67:49 - get correct that works fine let's type
67:51 - in 12. correct you scored two out of two
67:53 - you scored a hundred percent awesome all
67:56 - right so with that said i think i'm
67:57 - going to end the video here my goal here
67:59 - was to give you the basics i did not
68:01 - anticipate this video was going to be as
68:03 - long as it is but there was a ton of
68:04 - stuff that i needed to show you and i
68:06 - couldn't really skip it otherwise it was
68:08 - going to leave you guys confused
68:09 - regardless i hope this helped you get an
68:11 - introduction to golang and kind of bring
68:13 - you a project that you can get up and
68:15 - running with and learn the basics of the
68:17 - language a reminder to check out
68:19 - programmingexpert.io it'll be linked in
68:21 - the description that is my platform in
68:23 - partnership with algo expert to learn
68:26 - how to code and to become a software
68:27 - engineer as quickly as possible anyways
68:30 - if you guys enjoyed this content make
68:31 - sure to leave a like subscribe to the
68:33 - channel leave a comment with any go
68:34 - content you want to see in the future
68:36 - and i will see you in another youtube
68:38 - video
68:41 - [Music]