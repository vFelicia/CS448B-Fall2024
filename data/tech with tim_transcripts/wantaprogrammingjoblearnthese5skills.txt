00:03 - foreign
00:14 - or intermediate stages of programming
00:16 - you realize quite quickly that there's a
00:18 - variety of other skills that you need to
00:20 - have to Be an Effective and efficient
00:22 - software engineer now many companies
00:24 - will teach you these skills which is
00:25 - great however if you're going to an
00:27 - interview and you already have some of
00:29 - these skills developed it's going to
00:30 - make you stand out as a candidate so I
00:32 - want to share those with you today now
00:34 - just as a quick side note most of these
00:36 - skills you can learn from my courses
00:37 - blockchain expert and programming expert
00:40 - check them out from the link in the
00:41 - description there's probably a holiday
00:42 - sale going on while I'm releasing this
00:45 - video regardless let's get into the
00:47 - skills
00:50 - so the first skill that I have here is
00:52 - git now I know this seems obvious but
00:55 - when I say that you need to know git I
00:57 - really mean to have a thorough
00:58 - understanding of how git actually works
01:00 - what a branch is what different commits
01:02 - are how you change history what's the
01:05 - difference between say A rebase and A
01:06 - merge what happens when you pull a
01:08 - branch down how do you kind of fix a
01:10 - mistake you've made in a git Branch how
01:12 - do you revert a commit how do you cherry
01:13 - pick commits from different branches you
01:16 - should have a thorough understanding and
01:17 - be able to use this very quickly and
01:19 - pretty much have most of the commands
01:21 - memorized now I can tell you that over
01:23 - the past few years using git I have had
01:25 - countless hours where I've had git
01:28 - problems and I've had to copy folders
01:30 - delete folders and do all kinds of weird
01:32 - kind of janky stuff because I didn't
01:34 - know the correct git commands so it's
01:36 - completely worth spending a few hours to
01:38 - really dive in to get understand how it
01:41 - works on a lower level understand how to
01:43 - properly create a pull request how to
01:45 - make sure your history is linear and
01:47 - clean how to remove commits how to
01:49 - change commits over to different
01:50 - branches uh how to pull down existing
01:52 - branches there's all kinds of advanced
01:54 - and kind of nuanced get features that
01:55 - you're only going to run into when you
01:57 - need them and when you make a mistake in
01:59 - a production code base but it's
02:00 - definitely worth kind of diving into
02:02 - that learning all of the nuances of git
02:04 - and having a good understanding it's
02:05 - going to save you a ton of time and also
02:08 - means that you don't have to Now message
02:09 - your supervisor and say hey I made a
02:11 - mistake on this Branch can you tell me
02:13 - the get command
02:17 - all right next skill that I have for you
02:19 - here is testing now this is something I
02:21 - despise doing I always procrastinate
02:23 - writing my tests however now that I'm
02:25 - working for a startup you guys know I
02:27 - have a company called velocity I really
02:29 - need to be testing all of my code again
02:31 - it's something I absolutely hate doing
02:33 - but to be able to feel confident pushing
02:35 - code into production it has to be tested
02:38 - and this means I have to write code in a
02:40 - specific way such that I can actually
02:42 - test this code when you start getting
02:44 - into kind of I don't know the more
02:45 - advanced levels of programming you
02:47 - realize that everyone you're programming
02:49 - with knows how to solve a problem they
02:50 - can create a web page they can create a
02:52 - function they can write it back and
02:54 - however not everyone can write this in a
02:56 - way such that it can be tested easily
02:58 - testing your code is a very difficult
03:01 - thing especially if you have very
03:02 - complicated code especially when it
03:04 - comes to handling all of the different
03:05 - edge cases if you write very very
03:07 - complex code it can be really time
03:09 - consuming to test it so it is a hundred
03:11 - percent a skill to understand how to
03:13 - test your code and more importantly how
03:15 - to write code in a way so such that you
03:18 - are able to test it and you can actually
03:20 - catch any bugs before you roll that code
03:22 - out into production so please spend some
03:24 - time learning testing learn about
03:26 - different types of testing like unit
03:27 - testing integration testing system
03:30 - testing Etc and feel comfortable writing
03:32 - tests for the code that you write
03:37 - so moving on I have the topic of system
03:40 - design now this is a very vague topic it
03:42 - kind of encompasses a lot of different
03:44 - stuff and system design could mean like
03:46 - designing different servers designing a
03:48 - database it could also mean designing
03:50 - different classes functions modules Etc
03:53 - that you're going to have inside of a
03:54 - code base at minimum I think most
03:57 - programmers should be comfortable
03:58 - understanding how to break say a class
04:00 - into different functions or different
04:02 - methods how to have maybe multiple
04:04 - classes interacting with each other
04:06 - maybe you want to have a basic
04:07 - understanding of how you should have
04:09 - kind of data set up in a database that's
04:11 - kind of a different topic but that could
04:12 - kind of roll into system design
04:14 - alternatively system design again could
04:16 - be setting up servers it could be having
04:18 - load balancers it could be understanding
04:20 - how to scale that's kind of a more
04:22 - complex topic that most regular
04:24 - developers are not going to have to
04:25 - handle but I think it's important for
04:27 - most programmers to have a kind of
04:29 - General sense of what is meant by System
04:31 - design the process of doing that how you
04:34 - look at a system as a whole and kind of
04:35 - break that into sub components and
04:37 - minimum understanding okay I want to
04:39 - have you know different files in my code
04:41 - base I'm going to organize those into
04:42 - folders just keeping some kind of
04:44 - structure to make sure your code is
04:45 - somewhat maintainable and you have some
04:48 - kind of you know method to the madness
04:49 - when you're writing a ton of code or a
04:51 - feature
04:54 - so moving on I have a topic that's
04:57 - highly related to system design and this
04:59 - is scalability specifically writing
05:01 - scalable code really what I mean by this
05:04 - is being able to think about how your
05:06 - code is going to scale to maybe tens of
05:08 - thousands hundreds of thousands
05:09 - potentially millions of users and if
05:12 - it's actually going to be feasible to
05:13 - say run on you know a million entries in
05:16 - a database or to be ran every few
05:18 - seconds or how long it's going to take
05:19 - if you have a ton of different entries
05:21 - that needs to process this is something
05:23 - that you only really start developing
05:24 - when you're in some kind of critical
05:26 - environment where you actually need to
05:28 - write scalable code because in most
05:29 - cases if you're just working on a hobby
05:31 - project or you're on a small team or for
05:33 - a small company or a very small product
05:34 - it doesn't really matter if your code
05:36 - scales if you're only serving 10 people
05:38 - or 100 people it's fine if you have
05:41 - fairly slow code because you have a very
05:43 - small amount of users it's going to be
05:44 - kind of servicing right or a small data
05:46 - set it's going to be processing however
05:48 - once you start servicing tens of
05:50 - thousands or hundreds of thousands of
05:51 - users it can become really detrimental
05:53 - and quite expensive maybe even unusable
05:56 - if you write code in a way such that it
05:58 - just can't handle that volume of data so
06:00 - we've all seen the coding interview
06:01 - questions where you have maybe an N Cube
06:03 - time algorithm you're asked to bring
06:05 - that down to maybe N squared or log base
06:08 - 2 of n Etc there's a reason why they ask
06:10 - you to do this and it's because they
06:12 - want to see how you think about creating
06:14 - codes actually going to be scalable so
06:17 - I'm not saying go and do a million Lee
06:18 - code questions I'm not saying that's the
06:20 - way that you're going to learn how to do
06:21 - this but I think it's important to
06:23 - really think about every time you're
06:24 - writing code okay is this going to scale
06:26 - is it okay if it doesn't scale is there
06:29 - a way I can write this more efficiently
06:30 - can I make this more cost effective for
06:32 - example in terms of maybe reads from a
06:34 - database should I change the schema how
06:36 - I'm kind of reading data in all kinds of
06:38 - different things to consider here but
06:39 - it's worth thinking about scalability as
06:42 - you're getting better at programming and
06:43 - trying to practice that even in your
06:45 - hobby projects
06:49 - so continuing here we move on to the
06:51 - last skill which is documentation now
06:54 - this is something that everyone hates
06:55 - doing I don't know anyone who enjoys
06:57 - writing documentation but it becomes
06:59 - very important when your code starts
07:01 - getting larger and when other people are
07:03 - going to be reading and understanding it
07:05 - or attempting to understand it so when
07:06 - you're just working as a solo developer
07:08 - or in a very small team you might think
07:10 - the documentation is unnecessary and a
07:12 - waste of time and in some cases you may
07:14 - be right because you understand the code
07:16 - your team understands the code you know
07:18 - where things are you know you can ask
07:20 - someone if you don't understand but as
07:21 - you start scaling and having more
07:23 - members it becomes very time ineffective
07:26 - to not have documentation because that
07:28 - means now all your new developers have
07:30 - to spend you know countless hours
07:32 - reading through the code base trying to
07:34 - understand what's going on whereas if
07:35 - you had just written a one or two page
07:37 - kind of document or summary or maybe you
07:39 - had I noticed the basic kind of
07:41 - instruction set of what's happening what
07:43 - this code is doing how you you know
07:45 - contribute to the code base Etc that
07:47 - would save you from maybe having to
07:48 - explain this to them or kind of train
07:50 - them on the code base and it would save
07:52 - them from having to read through all of
07:53 - the source code so I think it's
07:55 - definitely a skill to learn how to write
07:57 - documentation even if that's just basic
07:59 - documentation and how to kind of take
08:01 - your code and summarize that in English
08:03 - right and explain this is what the
08:05 - code's doing this is how you add to it
08:07 - this is how you change it this is what
08:09 - it's expected this is the output you're
08:10 - going to get from it
08:12 - Etc so it's worth doing that again
08:14 - probably a waste of time if you're just
08:15 - working on a solo project but as soon as
08:17 - you start getting into some kind of team
08:18 - environment definitely consider
08:20 - especially for critical features or ones
08:23 - that other people are going to work on
08:24 - writing at least some minimal
08:25 - documentation that gives some
08:27 - instruction or at least a starting point
08:29 - to other people that might be diving
08:30 - into the code base
08:34 - alright guys so with that said I think
08:36 - I'm gonna wrap it up here I decided to
08:38 - make this video because these are skills
08:40 - that I've noticed becoming more and more
08:41 - important as I've gotten better at
08:43 - programming started having other
08:45 - programmers work with me kind of being
08:46 - in a more uh you know large code base
08:48 - with tons of stuff going on and I wanted
08:51 - to share them with you because I find a
08:52 - lot of videos don't mention this and in
08:54 - a lot of courses it's kind of
08:55 - Impractical to teach these types of
08:57 - topics or even talk about them because
08:59 - it's hard to really see the importance
09:01 - of them until you start getting into a
09:03 - larger code base you have a team you're
09:04 - in a workplace environment Etc as I said
09:07 - I think many of you are going to learn
09:08 - these skills as you get better at
09:10 - programming as you're working in some
09:12 - kind of job but in the meantime it's
09:13 - definitely worth considering them I may
09:15 - be reading a book or two watching a few
09:17 - videos articles lectures Etc regardless
09:20 - I hope you guys enjoyed if you did make
09:22 - sure to leave a like subscribe to the
09:23 - channel and I will see you in another
09:25 - one
09:25 - [Music]
09:32 - foreign