00:00 - hello everybody and welcome to this
00:01 - javascript course for beginners
00:04 - so this course is going to aim to teach
00:05 - you the fundamentals of javascript and
00:07 - give you a really good introduction so
00:09 - you can follow along with some more
00:10 - intermediate
00:11 - and advanced topics after completing
00:13 - this this is not going to be a full
00:15 - comprehensive overview of javascript
00:17 - it's really just an introduction and
00:18 - this is going to be great for beginners
00:20 - or people that are just getting started
00:22 - so don't worry if you've never
00:23 - programmed before you can definitely
00:25 - follow along with this
00:26 - and if you have then that's just going
00:27 - to make it easier to understand all of
00:29 - the topics that i'm going through
00:31 - so one last thing i'll say before we get
00:33 - started this course that you're looking
00:34 - at right now
00:35 - used to be 16 individual videos so if
00:38 - you look at my youtube channel i
00:39 - actually have a javascript series
00:41 - what this video is is simply a
00:43 - combination of all of those videos into
00:45 - one
00:46 - and i've re-edited them so it's a little
00:47 - bit easier to see
00:49 - understand and hopefully will just be a
00:51 - better experience for you guys when
00:52 - you're following along with it
00:54 - that being said if you want to skip
00:55 - through or look at the different
00:56 - sections in this course you can do so by
00:58 - going to the description there should be
01:00 - some time stamps
01:01 - and with that being said that's all i
01:02 - wanted to tell you guys so i hope you
01:04 - enjoy if you do make sure you leave a
01:05 - like and subscribe
01:06 - and well let's get into the course
01:10 - content
01:12 - [Music]
01:18 - now i actually know javascript i used to
01:19 - do it a lot when i was younger so maybe
01:21 - 14 or 15
01:22 - i'm 19 now for any of you that are
01:24 - wondering and i really wanted to get
01:25 - back into it because it's growing as a
01:27 - language rapidly and there's a lot that
01:28 - you can do if you know both python
01:30 - and javascript you can move into kind of
01:32 - a full stack developer position where
01:34 - you understand the front end and you
01:35 - understand the backend
01:36 - so that's an advantage for any of you
01:38 - guys if you do know another programming
01:39 - language
01:40 - especially something like python or kind
01:41 - of a back-end web technology
01:43 - if you learn something like javascript
01:44 - that is really a complementing skill
01:47 - and that's the reason that i want to
01:48 - teach it to you guys but what really
01:50 - is javascript now i'm sure some of you
01:52 - guys don't really understand exactly how
01:54 - it works or what it is but essentially
01:55 - javascript is a language that is run
01:57 - primarily from your browser
01:59 - so unlike python which is typically a
02:01 - server side language which is going to
02:02 - run off a linux server and be
02:04 - responsible for doing the back end of
02:06 - websites and http requests
02:08 - and all of that when you have javascript
02:10 - what it's going to be doing is dealing
02:11 - with some front-end information so it's
02:13 - actually going to run directly in this
02:14 - chrome
02:15 - web browser and it's going to be
02:17 - responsible for your interaction with
02:19 - the page so essentially say i click
02:20 - a button so here download for windows
02:22 - we're going to talk about this in a
02:24 - second
02:24 - that will run a javascript function that
02:26 - will actually you know download this
02:28 - and same thing with a lot of other
02:30 - features on this page and just other web
02:32 - pages in general
02:33 - if you see any kind of games made in the
02:35 - browser chances are they might actually
02:37 - be made with javascript
02:39 - and there's just a lot of things that
02:40 - you do kind of front end wise using that
02:42 - technology
02:43 - now this is great and makes this
02:44 - language super flexible and really great
02:46 - to learn because this essentially means
02:48 - you can develop for any platform if you
02:50 - know javascript
02:51 - whereas something like python you know
02:52 - you need to make sure you have a
02:54 - compiler on that actual computer
02:56 - and it might not necessarily work
02:58 - depending on what environment you're in
02:59 - whereas javascript all you need is a web
03:01 - browser to actually run that code
03:02 - which means essentially one javascript
03:05 - will work on any device any computer so
03:07 - long as it has a web browser
03:09 - that being said javascript is also a
03:11 - massively growing language a lot of
03:13 - high-tech companies are looking for
03:14 - people that know javascript
03:16 - it's a really easy way to get into kind
03:18 - of web development and actually secure a
03:20 - job especially if you don't have an
03:21 - education or a background in computer
03:23 - science
03:24 - or software engineering or something
03:25 - like that so anyways that's enough for
03:27 - kind of the information about that
03:29 - sorry if i bored any of you guys but now
03:30 - let's get into the environment setup
03:32 - start writing a basic hello world
03:34 - program and then
03:35 - we'll end off at the end of there and
03:36 - move into some more advanced stuff in
03:37 - the next video
03:38 - so the first thing that we need to do if
03:40 - we're going to write javascript is we
03:41 - need a place
03:42 - to write it now what i'm going to be
03:44 - using is sublime text which is just a
03:46 - pretty standard text editor
03:48 - which will allow us to have some syntax
03:49 - highlighting and some autocomplete while
03:51 - we write our code
03:52 - so i'm going to leave a link in the
03:53 - description but if you need to start off
03:54 - by downloading this editor you can also
03:56 - use any other editor that you want but
03:57 - this is what i'm going to be using for
03:59 - these videos
04:00 - once we do that what we need to do is
04:02 - open up sublime text
04:03 - you might get some pop-ups just scroll
04:05 - through them don't worry we need to
04:06 - create a new file which is actually
04:07 - going to be an
04:08 - html file so what i'm going to do in
04:10 - sublime here is go to file
04:12 - new file you'll see it pops up as
04:14 - untitled as a new tab
04:16 - you can go file save as or simply hit
04:19 - control s
04:20 - and then type in the name of your file
04:22 - make sure i'm just going to call this
04:24 - one tutorial1 although i do already have
04:26 - that file
04:26 - make sure it says all files and add your
04:28 - extension of dot
04:30 - html the reason we're going to do this
04:32 - is because the way we're actually going
04:33 - to
04:33 - look at our javascript code is by
04:35 - running it through the browser which
04:36 - involves us having an html file
04:38 - now you can see here i've already made
04:39 - one so i'm going to kind of omit this
04:41 - step here but that's what you guys need
04:43 - to do
04:43 - now once we have this you should see
04:45 - tutorial one at the top here which is
04:47 - now actually gonna allow us to start
04:48 - writing some code that we can run
04:50 - in our browser now just notice though
04:52 - and i'm gonna try to find this folder
04:53 - wherever i
04:54 - had it so desktop javascript
04:57 - javascript tutorial that when you create
04:59 - a file that's dot html you should see
05:01 - the icon beside it
05:03 - change to be you know chrome or edge or
05:05 - whatever web browser you're using
05:06 - openable now what that essentially means
05:08 - is if i double click on this file
05:10 - you can see that it's going to open it
05:11 - in my web browser now for some reason
05:14 - that's not working for you what you can
05:15 - always do is type in the direct
05:16 - path to your file in your web browser
05:19 - and that will actually open up and the
05:20 - reason we're going to do this is because
05:21 - when we make changes to this html file
05:24 - we'll refresh our web browser and we'll
05:26 - see those changes affect here so this is
05:27 - kind of going to be our console and our
05:29 - output
05:29 - our web browser whereas where we're
05:30 - going to be writing is inside of this
05:32 - actual text editor
05:33 - now i'm going to get started right away
05:34 - and i'm just going to start doing some
05:35 - things you guys might be a little bit
05:37 - confused at first if you've never seen
05:38 - this before
05:39 - but whenever we write kind of javascript
05:41 - code we need to display it on an html
05:43 - page so the basic syntax for creating an
05:45 - html page
05:46 - is simply putting html tags and then
05:48 - you're going to put these body tags like
05:50 - this
05:51 - now i'm not going to focus too much on
05:52 - this syntax because it's pretty simple
05:53 - you can probably understand it fairly
05:55 - easily
05:55 - and i'm sure most of you know it but
05:57 - essentially open tags
05:59 - just simply have the word and then close
06:00 - tags have this slash before the same
06:02 - word
06:03 - so this is our body tags this is our
06:05 - html tags our body tags are inside of
06:07 - our html tags
06:08 - now inside of body what we're going to
06:10 - start by doing is just writing some
06:11 - basic html just to show you how
06:13 - some things work here so i'm going to
06:14 - say h1 tags which stands for header one
06:17 - is hello now i'll demonstrate that when
06:19 - i refresh the page here
06:20 - hello pops up means everything's working
06:22 - you guys should test that as well to
06:24 - make sure everything is proper
06:25 - now that's great but how do we write
06:27 - javascript well when we want to write
06:29 - a script inside of our html what we can
06:31 - simply do is type
06:33 - script now nice for me in
06:36 - sublime text you want to hit enter it's
06:38 - automatically going to fill in some
06:39 - options for me
06:40 - you can see we have the type equals text
06:42 - slash javascript
06:44 - so you don't necessarily need to include
06:46 - that but this is going to specify
06:48 - exactly what language you're writing in
06:50 - because you can do scripts for other
06:51 - types of things inside of html
06:53 - so inside of here is where we're always
06:55 - going to be writing our javascript code
06:57 - unless we're putting it in a separate
06:58 - file and importing it which we'll talk
06:59 - about later
07:00 - so here allows us to actually you know
07:03 - start writing a different language so
07:04 - not html now we're going to write in
07:06 - javascript
07:07 - so what's the first thing that we need
07:08 - to demonstrate in javascript that we can
07:10 - do well the first thing that i like
07:12 - to demonstrate is simply the console so
07:15 - just like in any other language the
07:16 - first thing you typically do is you
07:18 - print something out and
07:19 - you know do the hello world application
07:21 - so let's do that
07:22 - so what console.log is going to do is
07:25 - simply
07:25 - put a log or log a message to the html
07:28 - console or whatever the console is in
07:30 - our browser
07:31 - it says hello world console means we're
07:33 - not actually interacting with the html
07:35 - page
07:35 - we're interacting with the console and
07:37 - you typically do this for debugging
07:39 - purposes and not in a production
07:40 - environment
07:41 - so anyways let's have a look at what
07:43 - this actually does and how we can even
07:44 - see the console up here
07:46 - so if i refresh this page obviously
07:48 - nothing's happening but we've put
07:49 - console.log hello world inside of our
07:51 - script text how do we see this
07:53 - well we need to open up the console now
07:55 - this might be a little bit different
07:56 - depending on what web browser you're
07:58 - using but in chrome it's pretty easy to
07:59 - do this
08:00 - right click anywhere on the page and
08:02 - click inspect
08:03 - this is going to be probably similar
08:04 - steps for edge or any other web browser
08:06 - like that you need to inspect
08:07 - element you'll see that we get something
08:09 - that pops up on the side or maybe below
08:10 - your web page and it says elements and
08:12 - then there's some place that says
08:14 - console
08:14 - now my case i'm just going to zoom in so
08:16 - you guys can actually see this you can
08:18 - notice at the top of my console here it
08:20 - says hello world with an exclamation
08:21 - point
08:22 - and says that that came from
08:23 - tutorial.html
08:25 - 5 which stands for line 5 and that is
08:27 - the most basic step on how we actually
08:29 - log something to the console now that's
08:32 - great but what if i want to actually
08:33 - display something on my
08:34 - web page well what i can do if i want to
08:37 - show something on my web page is use
08:39 - something called
08:40 - document now this is kind of the main
08:42 - thing that we need to understand here in
08:43 - javascript we have two
08:45 - main areas that we can kind of write to
08:47 - we have log or sorry console and we have
08:49 - document
08:50 - console is going to be something that
08:51 - you know the user doesn't see it's in
08:53 - the background it's in that console tab
08:55 - whereas document is actually referencing
08:57 - the html document itself which means we
08:59 - can write information
09:00 - directly into the html document now when
09:03 - we want to write some html directly into
09:05 - the document what we do is
09:06 - document.write
09:08 - and then inside of here we're going to
09:09 - put quotation marks and we're going to
09:11 - put whatever it is that we want to write
09:12 - so in this case maybe i want to write an
09:14 - h1 tag like this
09:16 - that says hello then we'll do h1 hello
09:20 - like that
09:20 - and what this is actually going to do is
09:22 - write this directly to the document
09:24 - now there's something that i noticed i
09:25 - didn't mention here so i'm going to add
09:27 - it quickly
09:27 - whenever we write a line in javascript
09:30 - we need to add a
09:31 - semicolon at the end of it this simply
09:33 - ends for terminate the current line
09:35 - which means
09:36 - get ready to read the next instruction
09:38 - that we're going to have below this
09:40 - now this is kind of the basics this is
09:41 - involved in a lot of different languages
09:43 - but there will be some specific lines we
09:45 - don't need semicolons for but i'll talk
09:46 - about those when we get to them
09:48 - i also want to mention what i'm doing in
09:50 - here notice that i put this in quotation
09:52 - marks and that i haven't just left them
09:54 - like this and then what i put in
09:55 - quotation marks it actually ends up
09:56 - changing colors
09:58 - now this is important and typically when
09:59 - we're writing things inside of here and
10:01 - we're just typing them in
10:02 - we need to put them inside of quotation
10:04 - marks we're going to talk about this
10:05 - more in detail in later videos as we go
10:07 - into data types and all of that but just
10:09 - understand that for right now if you're
10:10 - going to be writing something or logging
10:11 - something
10:12 - you're going to need to put it inside of
10:13 - quotation marks for that to work and
10:15 - what i've done here is simply put some
10:16 - h1 tags hello and i've written this
10:18 - into the document and we'll add an
10:20 - exclamation point so we can see the
10:21 - difference here
10:22 - and now what i'm going to do is just
10:23 - refresh the page and show you what
10:24 - happens
10:25 - so now you can see that we actually
10:26 - don't get anything in the console
10:27 - because we haven't logged anything and
10:29 - we get hello
10:30 - directly underneath it with an
10:31 - exclamation point because that's what we
10:33 - wrote
10:34 - so we can actually write you know html
10:37 - directly to the document by doing that
10:39 - now i'm just going to show you two more
10:40 - things that we can do with console uh
10:42 - with the console and then we're going to
10:43 - end this video and move into some more
10:45 - advanced stuff in the next one
10:46 - so just like we can log some information
10:49 - to the console so console.log
10:51 - you know like hello this is a lock
10:54 - we can also do some other kinds of
10:56 - things in the consoles we can do what's
10:58 - called an error and what's called a
10:59 - warning
11:00 - so i'm going to show you both of them so
11:02 - just like we have console.log we also
11:03 - have console.warn
11:05 - and you'll see the difference in this
11:06 - one immediately i'm just going to call
11:07 - this warning
11:08 - exclamation point now what's going to
11:11 - happen when i refresh the page
11:13 - is we get this little icon that pops up
11:15 - and says that we have a warning
11:16 - and it tells us where this warning came
11:18 - from and what line it was at
11:20 - so that can be useful sometimes when
11:22 - you're creating an application
11:23 - and you want to warn the user that
11:25 - they're doing something that maybe they
11:26 - shouldn't do
11:26 - or not the user but you know yourself if
11:28 - you're developing this and you want to
11:29 - look at it
11:30 - that can be useful to do as well and you
11:31 - get that little icon popping up
11:33 - and we can also do a console.error
11:36 - which is a little bit more strict than a
11:38 - warning and we'll just say
11:40 - this is an error like that and remember
11:43 - our semicolon at the end of that line
11:45 - so let's run this we get this is an
11:46 - error tutorial 8
11:48 - and you know we get this little x here
11:49 - and you notice this is obviously a
11:51 - stronger kind of statement than this
11:52 - warning
11:53 - so log warning error and this was
11:55 - document.write
11:56 - and those are kind of the fundamental
11:58 - things that you know we always learn
12:00 - when we start learning a language
12:01 - how do we do logs how do we write some
12:03 - stuff and obviously this document
12:05 - all right to write some html directly to
12:07 - the document well it's kind of boring to
12:08 - just like write some stuff
12:10 - and you know do some errors and warnings
12:12 - how can i actually change the value of
12:13 - this
12:14 - how can i move it around how can i
12:15 - change the color i'm not going to show
12:16 - all of this but i'm going to give you
12:18 - the basics and that's something we're
12:19 - going to work towards as we move to this
12:20 - videos
12:21 - and this is hopefully something you guys
12:22 - will notice that i start small
12:25 - make sure you guys really have the
12:26 - fundamental concepts down and then i
12:28 - slowly kind of move into some more
12:29 - advanced topics
12:30 - where you guys will start to understand
12:32 - a lot of people like to kind of do
12:33 - everything in isolation and go really
12:35 - hard on one topic
12:36 - that's good in some instances but if
12:38 - it's too advanced and you don't get it
12:40 - it's really detrimental to kind of the
12:42 - learning process in my opinion
12:43 - so anyways let's now just look at what
12:45 - we did last time so we see we have this
12:47 - hello hello
12:48 - hello to the log warning this is an
12:50 - error that's great what i'm going to do
12:52 - is actually remove all this now
12:53 - and we're going to do something so we
12:55 - can modify this htmh1 tag and actually
12:58 - get the value of it
12:59 - now in html we have something called ids
13:02 - and ids are typically the way that we're
13:04 - actually going to reference and access
13:06 - specific
13:06 - elements in our document so in this case
13:09 - what i'm going to do is set
13:11 - an id for my h1 tag and i'm just going
13:13 - to call this
13:14 - header now you can make this id whatever
13:16 - you want but make sure you put in
13:17 - quotation marks and make sure it kind of
13:18 - looks like this format
13:20 - here so header and what i want to do is
13:22 - i want to
13:23 - get the value or change the value of
13:24 - this h1 tag
13:26 - now how to actually reference this
13:28 - element well
13:29 - like we talked about in the last video
13:30 - we have something called
13:32 - console and we have something called
13:34 - document now the difference between
13:36 - console and document
13:37 - is that console is going to be referring
13:39 - to you know that little console window
13:40 - that we had here
13:41 - and document is actually referring to
13:43 - the html document itself so this whole
13:45 - thing
13:46 - so if i want to reference the h1 tag
13:49 - here with the id of header
13:50 - what makes sense to use console or
13:53 - document
13:54 - well in this case i'm going to say
13:55 - document because this is not a part of
13:57 - the console it is a part of my html
13:59 - document
14:00 - so the method that we use to actually
14:02 - get gain access to this element is
14:04 - something called get
14:06 - element by id now if you've ever seen
14:08 - javascript before
14:10 - chances are you've seen this and that's
14:11 - because this is a very common syntax
14:14 - now what i need to do is actually give
14:16 - the id of the element that i want to
14:17 - access so in here
14:19 - i'm going to type header now let me just
14:21 - kind of break down this line for you
14:23 - because if you've never programmed
14:24 - before this might be a little bit
14:25 - confusing what's going on here
14:27 - document is referring to this html
14:29 - document
14:30 - this dot here means that we're about to
14:32 - call a method
14:34 - on this html document now a method is
14:36 - simply an operation
14:38 - a function something that happens it can
14:40 - get a value it can you know create a
14:42 - value it can do all kinds of different
14:43 - things and you call it
14:44 - by doing dot the name of the method an
14:47 - open bracket
14:49 - a close bracket and then some kind of
14:51 - parameters or
14:52 - parameter inside now there's not always
14:55 - something in here
14:56 - sometimes it's blank like this but
14:58 - usually we have something called a
15:00 - parameter
15:00 - now a parameter is something that you
15:03 - pass to the method a
15:04 - value you give it so that it can do
15:06 - something with that value
15:08 - in this case what this method is going
15:09 - to do is get the value header and
15:12 - return to us the actual h1 tag here that
15:15 - has the id of header to allow us to do
15:17 - some operations on it
15:18 - so the first operation i want to do is
15:21 - actually change the value of hello to be
15:23 - something else
15:24 - the way that i do that is using another
15:26 - method well not really method it's going
15:28 - to be actually a property
15:29 - called innerhtml so here we have
15:33 - document.getelementbyid
15:34 - header that's going to give us this h1
15:36 - tag dot innerhtml which is actually
15:39 - referring to what's
15:40 - inside of these tags so whenever it says
15:42 - inner html that means pretty much what's
15:44 - between the two tags
15:46 - and now what i can actually do is use
15:48 - something called an assignment operator
15:50 - which is just going to be the equal sign
15:52 - and set this value to be whatever i like
15:53 - so here i'm going to make this
15:55 - tech with tim exclamation point
15:58 - now remember we have to end our line
16:00 - with a semicolon because that's how we
16:01 - know the operation and kind of statement
16:03 - is finished
16:04 - but let's try this i think i've broken
16:05 - this down enough that you guys should
16:07 - understand
16:07 - and when i refresh the page notice all
16:09 - our logs go away and we get tech with
16:11 - tim as the new value for h1
16:12 - tag so i think that's pretty cool and i
16:14 - mean with very minimal knowledge you can
16:16 - already
16:17 - modify the elements on your page now
16:19 - that's awesome but what if i actually
16:20 - want to
16:21 - get the value of my inner html say maybe
16:23 - this changes to something
16:25 - whatever it is and i actually want to
16:26 - get the value how do i do that
16:28 - well what i can do is rather than
16:31 - changing the value here
16:32 - i can simply print it out and show it on
16:34 - the console or i can actually
16:36 - write it to a new tag and that's
16:38 - something interesting that we can do as
16:39 - well so let's try that
16:40 - so if i actually want to display this on
16:42 - the html
16:44 - page sorry and i don't want to display
16:45 - it in the console am i about to use
16:47 - document or am i about to use console
16:50 - well i would hope you guys would answer
16:51 - with document because that means i'm
16:54 - actually going to display it in the html
16:55 - document so like i showed before i'm
16:57 - going to use
16:58 - document.write and all i'm actually
17:00 - going to do is simply
17:01 - write whatever the value is of the inner
17:04 - html
17:05 - of the element id header so in this case
17:08 - i should write hello
17:09 - but i'm not going to write it inside of
17:10 - any h1 tags so it should look a little
17:12 - bit different and you guys should notice
17:13 - this so let's refresh
17:14 - and now we get hello and we get hello so
17:17 - we've simply just written that
17:18 - you know next word by doing this
17:20 - document to our right get element by id
17:22 - header awesome that is you know pretty
17:24 - much how that works
17:26 - now what i'm going to do is actually
17:27 - create a new tag here and i'm going to
17:28 - call this one an input tag
17:30 - so i'm going to say h1 or sorry what am
17:32 - i saying h1 i'm going to do input
17:35 - type if i could type here equals text
17:39 - and then id equals inp
17:42 - now what this is going to do is simply
17:44 - create a little text box that i can
17:46 - type it the reason i want to do this is
17:47 - because i want to show you how we can
17:48 - change the value of this text box
17:50 - and as we go through we'll be changing
17:52 - some different values and you guys will
17:53 - see how this works for all different
17:54 - kinds of html tags
17:56 - so in this case if i want to change the
17:57 - value of a text box what i need to do is
17:59 - similar to what i've done before
18:00 - so obviously this text box is in my
18:02 - document so i'm going to type document
18:04 - dot get element by id
18:07 - and in here i'll just add my semicolon
18:09 - at the end here what i'm going to do
18:11 - is simply put the id which is inp
18:14 - so what i've done now is you know
18:15 - reference this text box so now how do i
18:17 - get the value of it
18:18 - well i just simply do value now you
18:21 - might think that it would be like
18:23 - dot text but that is actually not the
18:25 - case in this case we're going to do dot
18:26 - value
18:27 - and we're simply going to do what we've
18:28 - done in the previous one it just changed
18:30 - the value so in here
18:31 - we'll do it hello now before i do this i
18:35 - actually just want to show you what the
18:36 - text box looks like without this change
18:38 - so i'm going to introduce to you
18:39 - something called a comment now
18:41 - essentially what a comment
18:42 - is is it is something that is there but
18:45 - is not going to be read by the computer
18:47 - it's a line that's going to be skipped
18:48 - over
18:48 - that you can still have there but it's
18:50 - not going to mean anything so in this
18:52 - case what i've done to actually create a
18:53 - comment is i've done
18:55 - two slashes now two slashes simply means
18:57 - comment it's the same syntax as java if
18:59 - you've ever seen that before
19:01 - and notice that my line gets grayed out
19:03 - and watch
19:04 - when i run this code here you can see
19:07 - that all that actually changes
19:08 - is we get this text box here we don't
19:10 - end up changing the value to a low
19:12 - because this was a comment
19:14 - now if i uncomment this by removing
19:16 - those you'll notice when i go back here
19:19 - the value of my text box changes to
19:20 - hello so that is kind of the basics
19:23 - of how that how that works right now
19:26 - i'll show you a multi-line comma as well
19:28 - which is essentially this so you do a
19:31 - slash a star another star and then a
19:35 - slash
19:35 - now what this allows you to do is
19:37 - comment on multiple lines right so these
19:39 - are all comments
19:40 - this is obviously not you know proper
19:42 - coding syntax just type in hello
19:44 - so this will allow us to kind of skip
19:46 - over that because whereas here if i do
19:48 - something like hello and then i go the
19:49 - next line i type hello you can see this
19:51 - isn't commented out because what this
19:53 - stands for is a single line comment
19:55 - you may see me use some of these so i
19:56 - just want to make sure you guys were
19:57 - aware of how those work
19:58 - all right now what i'm actually going to
20:00 - do is i'm going to make an
20:02 - error here in the code because i want to
20:03 - show you guys what it looks like when
20:04 - you make a mistake because chances are
20:06 - you guys will be doing that quite
20:07 - often as you learn how to do this so for
20:09 - example
20:10 - let's try to just type x in my line here
20:13 - okay
20:14 - and let's run our javascript code and
20:16 - notice that if we're looking at the
20:17 - console here we get uncaught reference
20:19 - x is not defined now these are error
20:21 - messages that you guys will see
20:23 - all the time as you start going through
20:24 - this you'll start to understand what
20:26 - these messages mean
20:27 - i'm not going to explain exactly what
20:28 - this is but it's very important that you
20:30 - actually read these messages
20:31 - so say you know you get an error and
20:33 - like you're commenting down below you're
20:35 - like tim it didn't work i don't know
20:36 - what the issue is
20:37 - what i'm going to ask you to do is give
20:38 - me what this error message is and what
20:40 - line this
20:41 - message is on so that i can help
20:42 - understand what the issue is so these
20:44 - are meant to be useful messages that
20:46 - kind of tell you you know what's going
20:47 - on in your program what's wrong
20:49 - and here we're getting a message saying
20:50 - x is not defined which essentially means
20:53 - we don't know what x is right this is
20:54 - not valid we can't put it here
20:56 - and don't worry if you get an error
20:58 - because all you need to do is fix it
20:59 - and there we go the error goes away so
21:02 - that's what i wanted to show you
21:03 - you guys will get all kinds of these and
21:04 - it's really important that you kind of
21:06 - look up those error messages and start
21:08 - understanding what it is that you've
21:09 - actually done wrong
21:10 - because that's the fastest way to learn
21:11 - rather than you know just sitting there
21:13 - and kind of going
21:14 - how is this work right it's really easy
21:16 - just go to the internet look it up
21:17 - figure out what the issues
21:19 - okay so that i think is really all i
21:22 - wanted to cover
21:22 - i'll show you one more thing which is
21:24 - let's say we want to print out the value
21:26 - of our text box and this is
21:28 - uh let's see actually console.log
21:32 - document.element so in theory what this
21:34 - should do is print out what the value of
21:37 - our text input box is right and that's
21:39 - exactly what it's going to do so i'm
21:40 - going to show you
21:40 - now how this works so what we've done is
21:43 - we've simply logged the value of
21:46 - document.getelementbyid input value
21:48 - right so when we look here you can see
21:50 - that up in here we get
21:52 - nothing but what if i type hello
21:55 - does do we get a log that says hello we
21:58 - are printing out the value of whatever's
22:00 - in our input box
22:01 - is the reason that in the log here i
22:03 - don't get that answer what if i refresh
22:05 - the page
22:06 - i still am not getting hello printed out
22:08 - well the reason i'm not getting that is
22:09 - because
22:10 - what actually ends up happening when you
22:11 - run this code here
22:13 - is we read each line line by line so
22:15 - what happens is we have html we read
22:17 - body
22:18 - read h1 we read this we read this and we
22:20 - execute them in sequence so we start by
22:22 - doing hello
22:23 - then we make this text input box then we
22:25 - go into the script tag we run whatever's
22:27 - in the script so this means we run this
22:29 - console.log
22:30 - and we print the value and this happens
22:32 - immediately whenever we run the web page
22:34 - now can you think about why this might
22:36 - be problematic well essentially if i
22:38 - want to print out the value of what the
22:39 - user typed in this box
22:41 - i can't do that by just you know logging
22:44 - whatever it is immediately because
22:45 - immediately when i refresh the page that
22:48 - text box is blank
22:49 - so if we want to do that we need to use
22:51 - something called a function which i'm
22:53 - going to talk about in
22:54 - later readings variables and data types
22:56 - now variables and data types are kind of
22:58 - the core
22:59 - fundamentals of any programming language
23:01 - and they're usually fairly similar but
23:02 - you need to understand them before we
23:03 - can move any further
23:05 - so let's start by talking about data
23:08 - types and we'll get into variables
23:09 - so in java we have something called
23:12 - primitive
23:13 - data types now you're not going to know
23:14 - the difference between a reference and a
23:16 - primitive data type which are the two
23:18 - data types we can have until much later
23:19 - in the series but i will tell you the
23:21 - ones i'm going to show you today are
23:22 - called
23:23 - primitive now primitive essentially
23:25 - means these are defined at a programming
23:27 - language level
23:28 - they are kind of standard to this
23:31 - specific language
23:32 - and the way that they work has a defined
23:35 - you know
23:36 - set of things that you can do on them
23:38 - i'm having trouble explaining them
23:39 - because if you don't know reference it's
23:40 - hard to give you kind of a comparison
23:42 - but for now everything we're using is
23:43 - going to be
23:44 - primitive and just that's all you really
23:46 - need to understand
23:48 - anyways let's talk about our data types
23:50 - we have and actually i'll do these in
23:51 - comments
23:52 - we have a string we have a number
23:56 - we have a boolean we have undefined
24:00 - and we have null and these are the five
24:03 - primitive java data types so let's add
24:05 - that here
24:07 - primitive i definitely prim
24:10 - it to butcher that word anyways there we
24:12 - go okay primitive
24:13 - so what is a string well we'll do it
24:15 - actually before the comment a string
24:17 - is essentially anything inside of double
24:20 - or single quotation marks and that is
24:22 - all that a string is
24:24 - essentially the rule for a string is if
24:26 - it's inside of quotation marks double or
24:28 - single
24:28 - it is a string doesn't matter what's
24:31 - inside of it if it's inside of there
24:33 - it is a string and that is the only
24:34 - thing you need to know to remember
24:36 - strings now a string is a kind of
24:38 - collection of
24:39 - characters so if i do something like
24:41 - this this is a string and the value is
24:43 - hello
24:44 - if i do something like 23 this is a
24:46 - string the value is 23.
24:48 - why is it a string because it's inside
24:49 - quotation marks that's all you need to
24:51 - know
24:51 - collection of characters i can do random
24:53 - characters i can do you know
24:55 - anything i want inside these quotation
24:56 - marks okay number
24:58 - what is a number well that's pretty
25:01 - straightforward it is
25:02 - literally a number so any time we see
25:04 - something like 2.0
25:06 - 8.99 negative 98.
25:09 - 1 000. 0.00009
25:12 - these are all numbers and notice that
25:14 - they highlight in purple and that
25:16 - they're not inside of quotation marks
25:18 - so that is what a number is but as soon
25:20 - as i decide to put quotation marks
25:22 - around any of my numbers
25:24 - they immediately become a string awesome
25:27 - now just in case you see in other
25:29 - languages i'm just going to let you know
25:30 - that if you do something
25:32 - that doesn't have a decimal point that's
25:34 - typically referred to as an integer
25:36 - and an integer is anything that is you
25:38 - know doesn't have a floating decimal
25:39 - point representation
25:41 - whereas if i do something like 1.0
25:44 - this is now what we call a float or a
25:46 - double now this isn't important for java
25:48 - because these are all classified under
25:50 - the name
25:50 - number sorry javascript but for other
25:53 - languages you might hear that so i feel
25:54 - like i should
25:55 - mention that to you guys okay boolean
25:57 - this one's pretty easy
25:58 - this is literally the values true or
26:00 - false so
26:01 - boolean just simply stands for true or
26:04 - false you can either have true or you
26:05 - can either have false there's no other
26:07 - values that fit into this category other
26:09 - than those two
26:10 - and notice that when i do true with a
26:11 - capital t that is not the same as true
26:14 - with a lowercase t
26:15 - so these two words exactly the two words
26:17 - i've typed here are the only values that
26:19 - are considered boolean
26:20 - and we'll talk about those later and why
26:21 - we use them undefined
26:23 - now i'm not going to type anything here
26:25 - the reason for that
26:26 - is because undefined simply means that
26:29 - we haven't defined something yet and
26:31 - it's actually a type
26:32 - of its own you can't really set a value
26:35 - to be undefined
26:35 - it becomes undefined if you don't give
26:37 - it a value
26:38 - and we'll understand that when we go
26:40 - into variables now null
26:42 - is very similar to undefined except it's
26:45 - actually a set
26:46 - value so null means you know we're not
26:48 - storing anything yet it's almost like
26:50 - hey we've set up kind of this empty
26:52 - container we want to put something there
26:53 - just so like you know it's okay we have
26:55 - something but it doesn't mean anything
26:57 - and that's what null is so when you type
26:59 - the word no that's
27:00 - the type itself that's all that's
27:02 - considered no
27:03 - and we'll talk about the difference
27:04 - between no and undefined later but they
27:06 - are very similar in nature
27:08 - okay so those are our java data types
27:11 - and i'm going to get rid of them
27:12 - and we're going to start talking about
27:13 - variables so variables
27:16 - are capable of storing any kind of data
27:19 - type
27:19 - now that could be a primitive data type
27:21 - or it could be a reference data type
27:23 - again you don't need to know the
27:24 - difference but a variable is capable of
27:26 - storing
27:26 - some value now the way that we define a
27:29 - variable inside of java
27:31 - was a few different ways or sorry i keep
27:33 - saying java but i really mean javascript
27:35 - just because i
27:35 - do program in java so sometimes i mix
27:37 - them up but anyways the way that you
27:38 - define a variable in javascript
27:40 - is using the var keyword now the first
27:43 - step when you're using a variable or
27:45 - gonna make one is to declare it and
27:47 - that's what this statement is going to
27:48 - be here
27:49 - declaring creating defining those are
27:51 - kind of the words we use
27:52 - to say that so here what i'm going to do
27:54 - is i'm going to create a variable and
27:55 - i'm going to give it a name of x
27:57 - so i'm going to say var x and i'm going
28:00 - to use what i call the assignment
28:01 - operator which is an equal sign
28:03 - to assign a value to the variable x so
28:06 - in this case i'm going to put
28:07 - 6. now i'm going to put my semicolon to
28:09 - denote that we're ending this line this
28:11 - operation
28:12 - and what i've done here is simply to
28:14 - find a variable x which is equal to 6.
28:16 - now i'm going to show you and i'll just
28:18 - do this here and you guys can guess
28:19 - what's going to happen
28:21 - what happens when i do console.log x so
28:24 - if i run my webpage and i do console.log
28:26 - x what am i going to get well before i
28:27 - tell you let's run this
28:29 - and you guys can have a guess here so
28:32 - there we go and notice i was looking up
28:34 - if you need to even use this before
28:35 - because i totally forgot
28:36 - but anyways we get six printing out to
28:39 - the screen
28:40 - so how did that work well the variable
28:43 - named x stores the value six and when i
28:46 - gain
28:47 - access to the variable x so when i type
28:49 - x here it looks for the value of x which
28:51 - in this case is six
28:52 - kind of subs it in so we go six there
28:54 - and then it prints that out to the
28:56 - screen
28:56 - and this is the very fundamental basic
28:58 - way that variables work
28:59 - there's some name some kind of pointer
29:02 - almost
29:03 - to an object and when we access that
29:05 - name it gives us
29:06 - the value that's stored inside of it so
29:08 - just like what you know when you have in
29:09 - math and you say like
29:10 - 3x plus 2 equals 9 whatever you want
29:13 - some value like that x is a variable and
29:16 - it has some value you need to determine
29:18 - the value of it
29:19 - so a little bit different in programming
29:21 - because we just typically set up
29:22 - variables that are going to hold some
29:23 - information we modify them and change
29:25 - them but
29:26 - that's the basic concept behind a
29:27 - variable some name that
29:29 - points to some value holds some value
29:31 - when we access that name
29:32 - we can simultaneously access that value
29:35 - now let's talk about
29:36 - changing variables so here we've defined
29:38 - a variable called x equals 6 but what if
29:40 - i want to change this variable to be
29:41 - the value 9 well since i've already
29:44 - defined my variable
29:45 - by putting this var keyword here all i
29:48 - need to do is simply say
29:49 - x equals 9 and now if i log x notice
29:52 - that our value changes to not
29:54 - so that's how easy it is to change the
29:55 - values now
29:57 - i want to talk about some rules when we
29:59 - do deal with variables
30:01 - and kind of how we name them
30:02 - appropriately so typically and for right
30:04 - now there's a lot of different ways to
30:05 - define variables we're going to stick
30:06 - with this var keyword but we'll talk
30:08 - about some others later
30:09 - and we need to define a name after we
30:12 - put var that's going to be whatever
30:13 - we're going to store
30:14 - now usually we need this variable name
30:16 - to be meaningful it needs to store
30:17 - something that makes sense
30:19 - and the reason for this is when we look
30:20 - back at our program later we're going to
30:22 - see
30:23 - all these different variables all these
30:24 - different names we're going to have no
30:25 - idea what
30:26 - anything means if we kept naming them
30:27 - like t z
30:29 - c we don't know what those variables
30:31 - mean so we typically name them something
30:32 - that makes sense for what the value
30:34 - they're going to store
30:35 - so let's change this up a bit and let's
30:36 - say actually i want to create a variable
30:38 - that's going to store
30:39 - my name well what i would do is i would
30:41 - say variable
30:43 - name which is going to be the name of my
30:44 - variable but coincidentally actually the
30:46 - value name
30:46 - is equal to in this case tim now quick
30:50 - quiz for you
30:50 - what data type is tim well tim
30:54 - is a string so what i've done here is to
30:56 - find a variable called name that's
30:57 - storing
30:58 - the value tim which is of type string so
31:01 - these variables can store obviously all
31:02 - those different things but it's
31:03 - important we know these different types
31:05 - because the type of variable will allow
31:06 - us to do different things with us
31:08 - different things with it sorry so let's
31:10 - print out name
31:11 - and just make sure this is working there
31:13 - we go we got tim awesome good to go
31:16 - okay so let's create some other kind of
31:18 - variables so let's say
31:19 - var t hello equals five
31:23 - now this actually has an issue with it
31:25 - the variable that i've created here and
31:26 - this is what i want to get into my next
31:28 - point in
31:28 - how do we make valid variable names well
31:30 - there's a few rules when we define a
31:32 - variable one of which is that we cannot
31:34 - include
31:34 - any spaces in our variable name if we
31:36 - want to do something that looks like a
31:38 - space
31:39 - what we are allowed to do is underscores
31:41 - but if i do a space
31:42 - watch what's going to happen when i run
31:43 - my program we're going to get an error
31:46 - in our console now why did that happen
31:48 - well because it's saying there's an
31:49 - unexpected identifier
31:51 - now this is what i want you guys to do
31:53 - whenever you know you make a mistake
31:54 - something happens
31:55 - open up your console and see if you have
31:58 - any errors here
31:58 - if you do you can google search them you
32:00 - can figure out what the issue is
32:02 - and then hopefully that will help you
32:03 - kind of fix your problem
32:05 - but those error messages have meaningful
32:07 - information in them so try to read
32:08 - through them you probably won't
32:09 - understand what they mean immediately
32:11 - but if you google search them hopefully
32:12 - the next time you run into that error
32:14 - message you might understand where you
32:15 - might have gone wrong
32:16 - so anyways in this case that's because
32:18 - our variable name is named incorrectly
32:20 - so what i need to do is either add an
32:22 - underscore or change it so that it
32:24 - has the rules applied to it now some
32:26 - more rules for variables are that you're
32:28 - allowed to use any character so any
32:29 - characters on your keyboard that are
32:31 - letters or digits that means i cannot
32:34 - use like brackets and you know all these
32:37 - other symbols inside of variable name
32:39 - i need to use only letters and numbers
32:42 - and those letters can be uppercase
32:44 - lowercase that doesn't matter obviously
32:46 - you can do the numbers how you'd like
32:47 - another rule that applies to variables
32:49 - is you cannot start your variable with a
32:51 - number so i can't do something like
32:52 - five hello and you can see we're getting
32:54 - highlighted like this there's an error
32:55 - here
32:56 - what we need to do is we can do
32:57 - something like hello five we could do
32:58 - you know
32:59 - h3 lo that's fine we just can't start
33:02 - with a number
33:03 - so those are kind of our basic variable
33:05 - names now if we want to do a variable
33:07 - that
33:08 - you know says has like three or four
33:09 - words combined into it say for
33:11 - example hello world it makes sense to
33:13 - typically separate your words with an
33:15 - underscore or
33:16 - to do some camel case like this so hello
33:18 - and then capital on the next word so
33:19 - it's easier to read so i just figured i
33:21 - mentioned that to you guys
33:22 - okay so there we go we have our variable
33:24 - name we have a variable hello world
33:26 - now what i'm going to do is do something
33:28 - you guys probably haven't seen before
33:29 - which is
33:30 - actually set the value of hello world to
33:32 - be equal to name
33:34 - well what is this going to do well what
33:36 - we're going to do is we're going to look
33:38 - at hello world we're going to say okay
33:39 - this is equal to 5. what we're going to
33:41 - do now is change the value and we're
33:42 - going to change it to name
33:44 - what is name store names towards the
33:45 - value tim so that means
33:48 - if i print out hello world like this
33:51 - we get the value tim so that is totally
33:54 - valid we can definitely do that
33:55 - we can set a variable to equal another
33:58 - variable
33:59 - and that is totally okay and notice that
34:01 - if i actually change the value of name
34:02 - so i say name equals
34:04 - hello like this let's see what happens
34:08 - nothing changes and that's what i want
34:10 - you to notice
34:11 - because i defined hello world equals
34:13 - name
34:14 - before i change the value of name hello
34:17 - world
34:18 - is still going to have tim as its value
34:20 - and that's because when i defined it
34:22 - here
34:22 - tim was the value of name but then i
34:25 - changed name after here so let's
34:26 - actually
34:27 - console.log name like this and show you
34:30 - what that is
34:31 - so we'll do it before like this so we'll
34:34 - do it right when we define it
34:36 - then what we'll do is we'll set this
34:38 - we'll change it and we'll print it again
34:39 - so let's have a look
34:40 - so we get tim obviously we get tim again
34:43 - because we printed hello world which was
34:44 - equal to name
34:45 - and then we get hello so that's kind of
34:47 - what i wanted you guys to understand is
34:49 - that the sequence in which we do this
34:50 - is very important just like if i try to
34:53 - print
34:54 - say hello world up here at the beginning
34:56 - of my program and we run this
34:58 - we get an issue we get undefined and the
35:00 - reason we get undefined is because we
35:01 - don't know what hello world is
35:03 - we haven't defined that variable yet and
35:05 - that's what's printing out
35:07 - so anyways that has been variables i've
35:09 - tried to go through a few different
35:10 - examples of you know issues that you
35:12 - guys could run into using variables
35:14 - the different naming conventions for
35:15 - variables as well as the different data
35:17 - types
35:18 - so again remember you know we have our
35:20 - strings which is our quotation marks we
35:21 - have our numbers which is essentially
35:23 - any numbers oops i don't want a
35:24 - character there
35:25 - can't have decimals doesn't need to have
35:26 - decimals it can be negative as well
35:28 - and then we obviously have our booleans
35:30 - which are true
35:32 - false we have our null values and we
35:34 - have our undefined values
35:36 - what is an operator well essentially an
35:38 - operator is something that allows us to
35:40 - perform
35:41 - some operation on data or on operands
35:44 - now to demonstrate this to you i'm just
35:46 - going to start by declaring two
35:47 - variables
35:48 - i'm going to set x equal to 10 i'm going
35:50 - to set var
35:51 - y equal to 5. now someone was mentioning
35:55 - to me
35:55 - in previous tutorials that i do not need
35:57 - these semicolons so apparently you don't
35:59 - need those while you're
36:00 - actually writing your javascript code
36:02 - i'm just so used to the other languages
36:03 - i write in that
36:04 - need the semicolon so anyways that's
36:06 - something to note you don't need to add
36:07 - those but by habit i probably will
36:09 - the benefit of adding these though is
36:11 - that if you do that you can actually
36:12 - assign or do
36:13 - more than one thing in the same line so
36:15 - for example if i wanted to define
36:16 - another variable z and i didn't want to
36:18 - do it on a new line
36:19 - as long as i'm separating these
36:20 - statements by semicolons i'm actually
36:22 - able to do that
36:23 - okay so anyways let's continue now all
36:26 - right so let's just get in and talk
36:28 - about what the operators are and
36:30 - what they do they're pretty
36:31 - straightforward i'm certain most of you
36:32 - will understand
36:34 - so what i'm going to do is create a
36:36 - variable called z and what i want to do
36:37 - is i want to store
36:38 - the result of the addition between x and
36:40 - y now i'm sure you guys can guess how
36:42 - you do this
36:42 - x plus y in this instance our operator
36:45 - is called plus
36:46 - or the addition operator which is right
36:48 - here and our operands are x
36:50 - and y and that is you know the basics of
36:53 - doing this
36:54 - of what operators are anyways what i'm
36:57 - going to do is just log my results
36:59 - to the console here so you guys can see
37:00 - it so let's refresh that
37:02 - we get the value 15 and you know we're
37:04 - certain now that this edition operator
37:06 - is working
37:07 - now i'll go through a few other
37:08 - operators pretty quickly just because it
37:10 - says fairly
37:11 - straightforward so we obviously have our
37:12 - subtraction operator which is going to
37:14 - do a subtraction between x and y
37:16 - so our value is 5 here we also have our
37:18 - multiplication operator which is an
37:20 - asterisk so that's above the eight on
37:21 - your keyboard that's obviously going to
37:23 - do multiplication so 50 is our answer
37:25 - there
37:25 - we have our division operator which is
37:27 - simply one slash
37:29 - this will do our division give us a
37:31 - value of two and we
37:33 - have one more operator that i'm sure a
37:35 - lot of you may have seen before which is
37:37 - called
37:37 - modulus now i'm going to stick on this
37:40 - one for a second just because a lot of
37:41 - people get confused with this operator
37:43 - what this operator does is give you the
37:45 - remainder of a division
37:47 - so if you remember back kind of to
37:49 - elementary school when you didn't really
37:50 - deal with decimal numbers when you used
37:52 - to divide two numbers
37:53 - what you would do is figure out how many
37:55 - times the divisor or whatever i guess
37:58 - the thing is that's going into the
37:59 - number
37:59 - can go into it and then you would
38:00 - calculate a remainder so to give you an
38:02 - example
38:03 - let me just change our values here so we
38:05 - do something like 10 divided by 4 and we
38:06 - say
38:07 - we're not allowed to use decimals we're
38:08 - only allowed to use whole numbers for
38:10 - finding the answer this well what our
38:12 - answer is going to be is okay how many
38:13 - times can 4 go into 10
38:15 - well 4 can go in twice so that means
38:17 - we're going to have automatically we
38:18 - know we're going to have 2 as our
38:19 - starting number and now we know
38:21 - it's going to be like 2.42 or something
38:24 - like that
38:24 - but the thing is we can't use decimal
38:25 - numbers so we say well we can divide it
38:27 - by 2 and we have a remainder
38:29 - of 2. and that is our answer to this
38:32 - question
38:32 - so what this modulus operator does is
38:34 - give you the remainder aspect of any
38:36 - division
38:37 - so in this case we know the remainder is
38:38 - going to be 2 so let's actually run this
38:40 - and see
38:41 - our remainder is 2. no it didn't change
38:43 - but anyways let's change this to 3 now
38:45 - and i'll show you
38:46 - so if i do 10 divided by 3 what's my
38:48 - answer going to be
38:49 - well how many times can 3 go into 10 it
38:51 - can go in 3 times that's a value of 9
38:53 - 10 minus 9 is 1 remainder is 1 and there
38:56 - we go our remainder is 1. so that's what
38:58 - this operator does
38:59 - if you're confused by it literally just
39:01 - think okay
39:02 - let's you know figure out how many times
39:04 - this number can go into it
39:06 - and then what's left over after that
39:08 - it's actually very useful and there's a
39:09 - lot of instances where you may want to
39:10 - use it
39:11 - okay so that is um sweet so now let me
39:14 - just show you though
39:15 - and i'm actually going to ask the
39:17 - question here since i've done you know x
39:19 - modulus y i've done x plus y or whatever
39:21 - like this and stored it in the value z
39:23 - do the values of x and y change here are
39:26 - they changing as we do this now think
39:28 - about your answer i'm going to print
39:29 - them out and i will show you guys and
39:31 - explain
39:31 - why they don't change okay so let's run
39:33 - this there we go so we have 13
39:36 - 10 and 3. i'll zoom out a little bit and
39:38 - obviously we can see that the value of x
39:40 - and the value of y did not change after
39:43 - we perform this operation
39:44 - and the reason they did not change is
39:46 - because i am actually not changing the
39:48 - values of x and y here
39:49 - i'm simply getting them by writing them
39:51 - and storing the results of their
39:53 - addition in the variable z
39:55 - so the only variable that's going to be
39:56 - changed or declared is going to be
39:58 - the variable z even if i decide to do
40:01 - something like
40:01 - x plus y here you know we'll add our
40:03 - semicolon and we run this again
40:05 - we can see that those values still
40:06 - aren't changing because we haven't told
40:08 - x and y to change we've simply got the
40:10 - result
40:11 - of their addition so what if we want to
40:13 - change x
40:14 - and y and perform some kind of operation
40:16 - on them so let's get rid of all this
40:18 - and let's talk about how we can do this
40:20 - now so actually there's another kind of
40:22 - a kind of assignment operator that we
40:24 - have that has to deal with these logical
40:26 - operators too
40:27 - which is something called plus equals
40:29 - now what x
40:30 - plus equals is going to do is say x is
40:33 - going to be equal to
40:34 - x plus whatever value i put on this
40:37 - right side
40:38 - here so in this case if i put 5 and i go
40:41 - console.log
40:42 - and we put x now x is going to be
40:45 - changed to be 15.
40:46 - the reason again is because what this is
40:48 - doing is when i say plus equals rather
40:50 - than just
40:50 - plus it's going to say all right x is
40:52 - going to be equal to whatever it was
40:54 - before
40:54 - plus 5. let's run this there we go we
40:57 - can see now we are printing out
40:58 - 15. now this works the same for all our
41:00 - other logical operators so minus equals
41:03 - obviously works as well we get our value
41:05 - of 5 we can do
41:06 - times equals that's going to give us 50.
41:09 - we can do
41:10 - divided equals that is going to give us
41:13 - 2 and we can do modulus equals which is
41:16 - actually just going to give us
41:18 - 0. and the reason it's giving us 0 is
41:19 - again because 5 can evenly divide 10 so
41:21 - there is no remainder to that division
41:24 - awesome so that is how those work now
41:26 - i'll do the next example with y just
41:28 - because why not
41:30 - and essentially what we can do here is
41:32 - increment or decrement
41:33 - y so there's another operator called
41:35 - increment and another one called
41:36 - decrement
41:38 - increment is plus plus and decrement is
41:41 - minus minus
41:42 - now increment simply means add one very
41:45 - easy
41:45 - really straightforward and if i run this
41:47 - now we can see that y gives us a value
41:49 - of 4
41:50 - rather than 3 because this plus plus
41:52 - simply adds 1 and stores that in the
41:54 - value y
41:55 - rather than if i were to do y plus 1
41:57 - like this
41:59 - you can see the value of y actually
42:00 - doesn't change all right
42:02 - so y plus plus we know that works what
42:04 - about y minus minus
42:05 - well this is decrementing so simply
42:07 - subtracting one
42:08 - that gives us the value of two and those
42:11 - are our logical
42:12 - operators now these operators only work
42:16 - on numbers or at least most of them only
42:19 - work on numbers and i'm going to talk
42:20 - about the specifics now
42:21 - all right so let's define a variable
42:23 - which is a string let's just call it str
42:25 - because why not and let's call this
42:27 - string hello
42:29 - now what do you think i'm going to get
42:30 - if i try to do str
42:32 - plus x well actually in this instance
42:35 - that'll work but let's do something like
42:37 - this
42:38 - var z equals and
42:41 - str plus x let's see what happens when i
42:45 - print
42:46 - z what do you guys think we're going to
42:47 - get here all right so let's run this
42:49 - and you can see we get hello 10. now
42:52 - whenever we have
42:54 - a string and a number and we're adding
42:56 - them together
42:57 - what ends up happening is we simply
42:59 - convert the number to a string
43:01 - and just mush it together with whatever
43:03 - that string is
43:04 - so what we've done here is we said okay
43:05 - we're going to have hello we're going to
43:07 - add that
43:08 - to 10. well obviously these are not both
43:10 - numbers so we can't get
43:12 - some logical answer that makes sense so
43:13 - what we'll do is we'll convert 10 to a
43:15 - string
43:16 - and we'll just kind of append it and put
43:18 - it on the end of hello
43:19 - and that's exactly how that works and
43:21 - this is another thing that we call
43:22 - string concat concatenation now
43:25 - concatenation is typically done between
43:27 - two strings but i guess it works here
43:28 - with a number because we just convert
43:30 - them into numbers but let me show you
43:31 - what happens if i do something like str2
43:33 - equals hello world
43:36 - and let's now actually get rid of this
43:38 - value zed and let's simply do
43:40 - str plus str2 well you can guess based
43:44 - on what happened when we added
43:45 - 10 to this string what our result is
43:47 - going to be
43:48 - well in this case what we're going to do
43:49 - is simply have hello and then we're just
43:51 - going to mush
43:52 - world right beside it we're going to
43:53 - concatenate them join them
43:55 - together and that's going to be a result
43:57 - which is going to be hello world
43:59 - and this obviously is going to be on one
44:00 - line let me zoom out
44:02 - and with no spaces now if we want a
44:04 - space all we'd have to do is add a space
44:05 - there or add a space there
44:07 - so if i run this we can see we get hello
44:09 - world so that's useful to know
44:11 - especially when you're printing
44:12 - different things out but it also means
44:13 - you know you can mush two strings
44:15 - together
44:15 - and all that's going to happen is you're
44:16 - going to take the one string that your
44:18 - bass string and you're just going to add
44:19 - the other string directly to the end of
44:21 - it
44:22 - again spaces you have to add them
44:23 - yourself if you'd like them to exist and
44:25 - that is called string concatenation
44:27 - okay so that is cool it's not exactly
44:31 - what i wanted to show
44:32 - but i also want to talk about you know
44:34 - what happens if i try to do something
44:35 - like hello
44:36 - minus 3. well what is this going to give
44:39 - us so this is not a concatenation
44:41 - because we're not
44:42 - joining two strings we're not combining
44:44 - them together with that plus sign
44:45 - so what is this going to give us well
44:47 - let's refresh this and we get an error
44:50 - str2 is not oh okay well let's
44:53 - just get rid of str2 for a second and
44:55 - let's run this
44:56 - uh okay run nan what
44:59 - is that well this essentially means that
45:02 - we cannot do
45:03 - this operation whenever we try to do an
45:05 - operation like this in javascript rather
45:06 - than actually just crashing which is
45:08 - nice
45:08 - we're just going to get this nand which
45:10 - simply stands for you know this we don't
45:12 - have there's no answer this we don't
45:13 - know what the answer this is you can't
45:15 - do that same thing if i try actually
45:17 - multiplication might work let's see
45:19 - i know multiplication doesn't work in
45:21 - this so when we do the multiplication we
45:22 - get nan
45:23 - as well which is saying you know i don't
45:25 - know how to multiply a string by three
45:27 - so i can't give you an answer to that
45:29 - state same thing
45:30 - obviously if we try to do something like
45:32 - dividing a string we can't do that
45:34 - this division operator only works
45:35 - between numbers so we're getting that
45:37 - nand value
45:38 - all right so that is kind of how that
45:40 - works i wanted to show that obviously
45:42 - you know if you try to use an operator
45:44 - that
45:44 - can't be used on a string you're going
45:46 - to get an issue in this case you're not
45:47 - getting an error we're not crashing the
45:49 - program but it's simply saying that we
45:50 - can't evaluate this statement we don't
45:52 - know the answer to it so we get that
45:54 - nand
45:54 - value awesome now let's just show a few
45:57 - other examples here and how we can kind
45:59 - of add multiple things together
46:01 - all right so when using operations uh
46:03 - the order of operations is important and
46:05 - that's something i want to talk about
46:06 - so what i'm going to do is actually
46:08 - we'll clear these out and we'll just say
46:10 - var result equals and now we're just
46:13 - going to start typing
46:14 - actually an expression that we can
46:16 - evaluate so what i'm going to do
46:18 - is simply do something like 4 times 5
46:21 - over 3 plus 9 minus 2. now obviously
46:25 - you know this isn't the easiest thing to
46:26 - compute in your head so we'll
46:28 - log the results but what i want to
46:31 - demonstrate is the fact that order of
46:33 - operations apply in computers just like
46:35 - they apply when you're doing regular
46:36 - mathematics
46:37 - so essentially we start reading from
46:39 - left to right
46:40 - and we apply bed baths which is the rule
46:43 - that i kind of learned the acronym for
46:45 - this so we have
46:46 - b and i hope this doesn't keep auto
46:48 - completing
46:49 - d m a s now what this stands for
46:53 - is brackets exponents
46:57 - division multiplication addition and
47:01 - subtraction i won't actually
47:02 - why not multiplication
47:06 - addition and subtraction and we'll just
47:10 - add the m there
47:11 - okay so this is the order of operations
47:13 - that we need to follow not sure if i
47:14 - spelled all these right but regardless
47:16 - and let's actually put these in a
47:17 - multi-line comment to make sure that we
47:19 - can leave those here
47:21 - this essentially means we're going to
47:22 - follow this order of operation we're
47:23 - going to look if there's any brackets
47:25 - if there is we're going to evaluate
47:26 - what's in the brackets then we're going
47:27 - to do any exponents that we have
47:29 - then any division then any
47:30 - multiplication then any addition then
47:32 - subtraction which means that
47:34 - this part of our statement is going to
47:36 - happen first
47:37 - so i mean we can look at this and see
47:39 - what we get as our answer we're getting
47:40 - 13
47:42 - wow okay some crazy number like that but
47:45 - what if i want to change the result of
47:47 - this what if i want to you know do all
47:48 - of this
47:50 - addition and subtraction before i decide
47:52 - to divide you know 20
47:53 - by whatever this result is well if i
47:55 - want to do that i can just add some
47:57 - brackets around this
47:58 - and now since these are in brackets
48:00 - we're going to follow our order of
48:01 - operations and do that first
48:03 - and notice that our answer should change
48:05 - and it does it changes to 2.
48:07 - so that is you know exactly how this
48:09 - works we can put things in brackets if
48:11 - we want to define
48:12 - when they're going to be operated on so
48:13 - this needs to happen before
48:15 - this is divided by that and we could do
48:17 - the same thing here where if we wanted
48:18 - to do you know
48:19 - 5 divided by all of this and then
48:21 - multiplied by 4
48:22 - let's have a look at what that answer is
48:24 - going to be and that answer is still
48:26 - going to be 2 because obviously that's
48:27 - not going to change
48:28 - whether what order we put that in so
48:30 - yeah that is kind of
48:31 - how this works that is how operations
48:33 - work that's how operators work
48:34 - obviously you can do string operators
48:36 - and i guess the last thing to show
48:38 - is just like let's say hi like this
48:41 - i did something you know like x plus
48:43 - plus or x plus equals sorry i can do
48:45 - string
48:45 - plus equals in this case let's just go
48:48 - hi again
48:50 - let's go console.log str
48:53 - we'll add my semicolon there to be
48:55 - consistent and let's run this and you
48:57 - can see we get hi hot
48:58 - so strings you can use the plus operator
49:00 - on you can use plus
49:02 - equals you can concatenate and join
49:04 - those strings together and then numbers
49:05 - you have a series of operations like
49:06 - subtraction division multiplication
49:08 - addition
49:09 - modulus all of those so i want to
49:12 - refresh you that we started talking
49:13 - about data types in a few videos ago and
49:15 - we mentioned the data type called
49:17 - boolean now we said that we could have
49:19 - that data type called boolean let me
49:21 - just say b here
49:22 - and that value could either be true or
49:24 - that value could be false and remember
49:26 - that we can't have that capital false
49:28 - or that capital two it's only those two
49:30 - special values but what are the point of
49:32 - those values and where do we actually
49:34 - use them
49:35 - well this is where i'm going to show you
49:36 - how these are used or how these are
49:38 - actually
49:38 - generated so let me create some
49:40 - variables i'm gonna say x equals eight
49:42 - and var y equals 9 just like we used in
49:46 - some previous videos
49:47 - now a lot of times when we're doing some
49:50 - computations or we're adding numbers
49:52 - we're doing something
49:52 - we need to do some kind of comparisons
49:54 - maybe we want to see if the value of 8
49:57 - is greater than the value of nine
49:59 - or if you know eight minus nine gives us
50:01 - enough a remainder and if we're
50:03 - looking at like a shopping cart and we
50:04 - see if they have over a hundred dollars
50:06 - in the shopping cart
50:07 - then maybe they get a discount on their
50:09 - order there's lots of instances where we
50:11 - need to do comparisons with numbers
50:12 - and i'm going to show you guys how we
50:13 - can do that now typically we're doing
50:15 - comparisons between variables but
50:17 - sometimes it can be between
50:18 - constant values as well and what i mean
50:20 - by constant value is just if i type in
50:22 - some
50:23 - number rather than actually using two
50:24 - variables so let's start by going
50:26 - through some of the comparison operators
50:28 - which are what i'm going to show you now
50:30 - okay so the first comparison operator is
50:32 - the less than sign
50:34 - now a lot of people will say oh no
50:35 - that's a greater than sign it's not the
50:36 - less than sign it really matters in
50:38 - which way this is pointing
50:40 - related to your variables in this
50:42 - instance what we're saying
50:43 - is x less than y that's what
50:46 - this statement means but if i decide to
50:48 - put a sign like this
50:49 - then we could read it like is x greater
50:51 - than y
50:52 - or is y less than x right it doesn't
50:55 - matter
50:55 - if none of these are really the greater
50:57 - than sine of the less than sign it
50:58 - really matters what way we put them
50:59 - so we have these two signs greater than
51:02 - less than and we also have the ability
51:04 - to add an equal sign to the end of
51:05 - either of these two signs
51:07 - now this is going to change this
51:08 - comparison to say rather than
51:10 - less than y or greater than y in this
51:12 - case going to say is
51:13 - x greater than or equal to y now notice
51:17 - that i keep saying
51:18 - is x greater than or equal to y or is y
51:20 - less than or equal to x or whatever it
51:22 - is that's because
51:23 - this statement or this expression that
51:25 - i've typed here is actually going to
51:27 - return to me a boolean value which is
51:30 - true or which is false
51:32 - and that true or false is going to tell
51:33 - me the answer to this expression that i
51:35 - put here
51:36 - now i know some of you might be a little
51:37 - bit confused but i will i don't know how
51:39 - i just did that
51:40 - log out my answer and show you what i
51:42 - mean by that all right so let's refresh
51:44 - this
51:45 - and you can see we get a value of false
51:47 - and why do we get a value of false
51:49 - well because x is not greater than or
51:52 - equal to
51:53 - y so when this expression is evaluated
51:55 - this comparison happens between 8 and 9
51:58 - and we get the value false now if i
52:00 - decide to reverse these signs like this
52:03 - you can see we get the value of true and
52:06 - if i decide to change maybe x to say
52:08 - 11 instead of 9 and we refresh this now
52:11 - we're back down to false
52:13 - and that is precisely how these basic
52:15 - comparisons work so these less than
52:17 - greater than or equal now it's important
52:19 - you cannot do something like
52:20 - equal than greater than this is a
52:23 - different statement you can see it's
52:24 - just changed colors completely when i do
52:25 - something like that
52:26 - so make sure you add the equal sign
52:28 - after that comparison operator
52:30 - all right so the next operator to talk
52:32 - about is actually the equivalence
52:33 - operator which is the equal to
52:35 - or the two equals sign so is equal to is
52:38 - what we call this
52:39 - now notice that this is two equal signs
52:42 - and not one equal sign
52:43 - now one equal sign is what we call the
52:45 - assignment operator and that is
52:47 - assigning some value
52:48 - to a variable right that's typically
52:50 - what we're doing with the assignment
52:51 - operator
52:52 - whereas with these two equal signs what
52:54 - we're doing is
52:55 - checking for equivalence now there is
52:58 - another operator which
52:59 - is the three equal signs which stands
53:01 - for is equal to
53:02 - value and is equal to type now i'm not
53:06 - going to explain
53:07 - really how this works in difference with
53:09 - the two equal signs because
53:11 - it's kind of hard to understand until
53:12 - you get into objects and some more
53:14 - advanced data types so we'll talk about
53:16 - it as we go through
53:17 - later but for now just understand you
53:18 - can use the two equal signs or the three
53:20 - equal signs
53:21 - and 99.9 of the time these are going to
53:24 - do the same thing and they're going to
53:25 - achieve whatever
53:26 - you know functionality is you're trying
53:28 - to get at now
53:30 - equal then equal then so this is just
53:32 - going to compare if these two values are
53:34 - the same
53:34 - so obviously in this case 11 is not
53:36 - equal to 9 so let's do this comparison
53:39 - and we can see we get the value false
53:41 - however if i were
53:42 - to change my value y to be 11 and we do
53:44 - this comparison we get true
53:46 - and just notice if i add a third equal
53:48 - sign like this
53:49 - we get true as well now if you're in
53:52 - doubt and you're like well do i use two
53:54 - or do i use three just use three it's
53:56 - that we'll explain why later but just
53:58 - use three now let me do something
54:00 - i'm going to change this to 11. i'm
54:02 - actually going to try to demonstrate the
54:03 - difference because i feel like it's
54:04 - important enough to try
54:06 - we have this variable x which is 11 and
54:07 - we have this variable y
54:09 - now notice that 11 and 11 are the same
54:13 - right like if we're looking at this as
54:14 - humans we see eleven we see eleven we're
54:16 - like okay those are the same value so
54:17 - this should evaluate to true
54:19 - watch what happens when i run this we
54:21 - actually get the value false
54:22 - now why do we get the value false well
54:25 - this 11
54:26 - is different from this 11 because
54:28 - they're different types
54:30 - this is a number and this is a string
54:32 - and remember that now if we try to do
54:33 - something like
54:35 - x plus y well this is a string and this
54:38 - is a number so what happens when we add
54:39 - a string and a number
54:40 - well we convert the other number to a
54:43 - string so in this case this is now going
54:44 - to turn into the string 11
54:46 - and we mush them together we don't
54:47 - actually compare do a logical
54:50 - addition there we just add these numbers
54:52 - together so rather than getting
54:53 - 22 which we might have expected you can
54:55 - see here we're getting
54:56 - one one one one so that's important
54:58 - understand okay so let's do these two
55:00 - equal signs now
55:01 - all right so what happens when i do two
55:03 - equal signs and i compare these
55:05 - well we actually get the value of true
55:08 - so why did that work
55:09 - well that worked because this two equal
55:12 - signs
55:12 - compares the value and does not look at
55:15 - the type
55:16 - whereas the three equal signs compares
55:18 - the difference
55:19 - in the type and the value and only if
55:21 - both of these are the same will we get
55:23 - that equal
55:25 - all right awesome so now what i'm going
55:26 - to show you is kind of the opposite to
55:28 - this which is the not
55:29 - equal to now there is a not equal to and
55:32 - there's not
55:33 - equal to equal to which is the two equal
55:35 - signs like that so we'll talk about both
55:37 - so let's start by doing not equal to so
55:39 - exclamation point equal sign
55:41 - what does this do well it literally just
55:42 - gives you the opposite result that you
55:44 - would get if you did two equal signs
55:46 - so here since these values actually are
55:49 - the same
55:50 - what i'm getting is the answer false the
55:52 - reason i'm getting the answer false is
55:53 - because this operator is going to tell
55:54 - me if
55:55 - x is not equal to y and in this instance
55:58 - it is equal to y
56:00 - so obviously this condition is false and
56:03 - all of these that i'm typing here
56:04 - are known as conditions so that's
56:06 - important to understand now what happens
56:08 - if i add a third equal sign like that
56:10 - let's run this we get the value true why
56:12 - do we get the value true
56:14 - because obviously 11 and 11 when we're
56:16 - doing three equal sign comparison are
56:18 - not the same because this is a string
56:20 - and this is a number
56:21 - so when we do this we get false or sorry
56:24 - what am i saying we get true
56:25 - because these are not actually the same
56:27 - values and that's kind of how that works
56:29 - now let's just do another basic example
56:31 - with nine
56:32 - and you know if we do x not equal equal
56:34 - to we still get true because obviously
56:35 - these aren't the same
56:36 - but if i were to change this to 11 then
56:38 - we still you know we get false because
56:40 - these are actually the same
56:42 - value now that is kind of the basics of
56:45 - the basic comparison
56:46 - operators now i'm going to show you how
56:48 - we can actually chain these together and
56:50 - use something called
56:51 - and or and not now and or not are very
56:54 - powerful and they allow us to kind of
56:56 - create some more
56:57 - complicated conditions so i'm going to
56:59 - do a more advanced example now just
57:01 - because numbers are really easy to
57:02 - understand typically
57:03 - so i'm going to say bar name equals tim
57:06 - and i say var other underscore name
57:11 - equals 10. all right so let's do a
57:13 - comparison of these
57:15 - so what i'm going to do is simply log
57:17 - out if name
57:18 - is equal equal to other underscore name
57:21 - well what do you guys think looking at
57:22 - this do we think they're the same do we
57:24 - think they're different
57:25 - does this two equal sign is it gonna
57:26 - make a difference if we use two or three
57:28 - what do you think well let's run this
57:30 - and have a look we get the value false
57:33 - why do we get the value false because
57:34 - there is a capital here and capitals
57:36 - actually make a big difference when
57:37 - we're doing comparisons
57:39 - and this tim is not the same as this tim
57:41 - there are different strings
57:43 - however if i do change this to be like
57:45 - that now we'll get the value true
57:47 - okay so that's great we've done those
57:49 - comparisons now what i'm going to do is
57:51 - actually add some other variables so
57:52 - we'll say yeah
57:53 - well you know add some more numbers here
57:54 - bar x equals 10
57:56 - var y equals 9. now what if i want to
57:59 - print
58:00 - if name is equal to other name and
58:03 - another condition is true what if i want
58:05 - to chain multiple things together and
58:07 - see if those two things are true
58:09 - well what i can do is actually use
58:11 - what's called the and
58:12 - operator or the and kind of comparison
58:14 - chain or whatever you want to call this
58:16 - now this is what this looks like two and
58:19 - signs these are above the what key is it
58:21 - on your keyboard
58:22 - the 7 key on your keyboard and what this
58:24 - is actually going to do
58:25 - is compare both of these conditions
58:28 - together and see if they're both
58:29 - true now i'm going to add another
58:31 - condition here where i'm going to say x
58:33 - is i'll say y actually is less than
58:36 - x so what this and does
58:39 - is it starts by evaluating the condition
58:41 - on the left side which in this case is
58:43 - name
58:43 - equal equal to other name we know that
58:45 - this is true
58:46 - right above here this value is true then
58:49 - what it's going to do
58:50 - is see if this one is true as well so if
58:53 - y
58:53 - is less than x now if both of these
58:56 - conditions are true
58:57 - and only if both of these conditions are
58:59 - true this
59:01 - whole thing that we've typed here will
59:02 - evaluate to true
59:04 - if one of them are false or both of them
59:06 - are false it doesn't matter which one
59:08 - or if both of them are false then we're
59:10 - going to get a false value so let's
59:12 - refresh this here and we can see we get
59:14 - the value true because we know that
59:16 - this is true and this is true but what
59:18 - if i do
59:19 - y is greater than x well obviously we
59:22 - know this is true
59:23 - but we know that this is false and since
59:24 - this is the and kind of chain
59:26 - comparison i don't know the actual
59:28 - proper name for it
59:30 - we're going to get the value false and
59:31 - we can see that here so this and
59:33 - checks if condition one and condition
59:37 - two
59:37 - are true and we can go through and we
59:39 - can do as many ends
59:40 - chain them together as we'd like and we
59:42 - can do you know seven
59:44 - equals equals 9. like we can add that at
59:46 - the end here and obviously we're going
59:47 - to continue to get false and what's
59:49 - going to happen here now is we're going
59:50 - to check
59:51 - if this and this and true and this is
59:53 - are true and if all three of those are
59:55 - true
59:55 - will be true otherwise if any one of
59:57 - them are false or any combination of
59:59 - them are false we'll get the value false
60:02 - all right the next one we need to talk
60:03 - about is or so let's change this
60:06 - to or now or is simply two straight
60:08 - lines i think you call this
60:09 - the pipe but i don't actually know the
60:12 - proper
60:13 - name for this character but it is uh
60:15 - where is it exactly it's kind of
60:17 - underneath the backspace character on
60:19 - your keyboard
60:19 - anyways the or is a little bit different
60:22 - than ant what ore is going to do is a
60:23 - similar thing it's going to look at the
60:24 - condition on the left
60:26 - it's going to look at the condition on
60:27 - the right and if either of them are true
60:30 - or both of them are true it's going to
60:31 - give us a true value so in this case we
60:33 - know that this is false y is greater
60:34 - than x but we know that this is true
60:36 - so if we run this we can see
60:40 - hey what am i getting here name equals
60:41 - equals other name or y greater than x
60:44 - that should be giving me true sorry i
60:45 - don't know why that wasn't refreshing
60:47 - anyways there we go true
60:49 - now what if i change this to be a not
60:52 - equal equal to that
60:52 - obviously we know that this is going to
60:54 - be false and this is going to be false
60:56 - so what is the or going to give us it's
60:57 - going to give us a value of false
60:58 - because well neither one of these are
61:00 - true
61:01 - but if i change this now to be y greater
61:03 - than x
61:05 - actually sorry it should be y less than
61:07 - x my bad and we refresh this
61:09 - we can see we get the value true so that
61:11 - is how the or
61:12 - works now we can combine ors and ands
61:14 - together
61:16 - so we can do you know another and sign
61:18 - here and we can add
61:19 - i don't know something like eight equal
61:22 - equal to eight
61:23 - and we can chain all these together and
61:25 - what's going to happen here
61:26 - well let's run this we get the value
61:29 - true
61:30 - and the way that we do this is we simply
61:31 - read left to right so if we're going to
61:33 - combine all this it's
61:34 - kind of complicated sometimes to
61:36 - understand how we're actually doing this
61:38 - what we're going to do is compare name
61:40 - and other we're going to get some value
61:42 - let's say obviously this is false
61:44 - now what we're going to do is say false
61:46 - or what's this value
61:48 - well this value is going to be true
61:51 - so this whole thing here if we're
61:53 - comparing with or
61:54 - is going to be true like that then we
61:56 - have this and where we're comparing with
61:58 - here
61:58 - which is going to be true true and true
62:00 - returns to us
62:02 - a true value and that's how we get that
62:04 - now what i'm going to show you
62:05 - finally is just a knot and then i'll do
62:07 - a big chain of all of them together and
62:09 - i know this video has been long but i
62:10 - wanted to show you guys all of this in
62:11 - one video
62:12 - so what i'm going to do is simply show
62:14 - you the not operator which is an
62:16 - exclamation point
62:17 - all this does is simply reverse whatever
62:21 - the current thing is that you have so if
62:23 - you have true and you put a not on it it
62:25 - gives you false
62:26 - if you have false and you put a not on
62:29 - it it gives you
62:31 - true like that and that's as easy as it
62:33 - is and this works in any condition
62:35 - so in this case if i do something like x
62:38 - less than
62:38 - y well we know that x is not less than y
62:40 - so this is false but since we have a
62:42 - knot
62:42 - outside of it and these brackets around
62:44 - this condition
62:45 - well what i'm going to get is the value
62:48 - of true
62:49 - and this is what i wanted to show you as
62:50 - well we can chain conditionals
62:52 - by using these brackets so let's do not
62:54 - x
62:55 - and y or name equals equals
62:58 - other underscore name uh
63:02 - and let's do something like 9 greater
63:04 - than 0.
63:05 - so what i've done now is chain these
63:07 - together what i can actually do is put
63:08 - these in brackets if i wanted to
63:10 - and do something like a not sign here in
63:14 - front of this
63:14 - and now what's going to happen is we're
63:15 - going to evaluate this expression get
63:17 - the naught of it
63:18 - we're going to evaluate this expression
63:21 - this expression
63:22 - we're going to and them together i think
63:24 - i might need another
63:25 - bracket at the end here uh i think
63:28 - that's right yes okay that is right
63:30 - then we're going to not them then we're
63:31 - going to do the or of this side and this
63:33 - side and see what that result is i'm too
63:35 - lazy to calculate it so let's just
63:36 - refresh
63:37 - and that value is staying true so that
63:40 - is how that works this is our comparison
63:41 - operators this is how we combine them so
63:43 - or
63:44 - and and remember or either one of them
63:46 - needs to be true or both of them can be
63:48 - true
63:48 - and uh if we have that we need both
63:50 - conditions to be true and if we have a
63:52 - knot that's simply going to reverse
63:53 - whatever it is that we have
63:55 - with those combinations of operators we
63:57 - can create any kind of conditions that
63:59 - we would like the functions
64:00 - now we're not going to get into too much
64:02 - detail with functions as i'm going to
64:03 - leave that until the next video but what
64:05 - i want to do is illustrate to you how a
64:07 - function works
64:08 - on a very fundamental level using a
64:10 - basic example where we have two buttons
64:12 - a button that says green and a button
64:14 - that says red and when we press the
64:16 - green button
64:17 - this text here will actually change to
64:19 - be green
64:20 - and when we press the red button this
64:22 - text here will actually change to be
64:24 - red now how do we do that right so how
64:27 - do we make it when we press a button
64:28 - that we actually can change elements on
64:30 - the page
64:31 - well that's where functions come in now
64:33 - what is a
64:34 - function well you can think of the
64:36 - definition of a function as
64:38 - a kind of piece of code or a block of
64:40 - code that does
64:41 - something it might you know change some
64:43 - piece of information on the screen
64:45 - it might take in a value and return to
64:47 - some value you can think about in
64:49 - mathematics when we have functions like
64:51 - f of x equals 5x something like that
64:54 - right
64:54 - that function takes a value of x and
64:57 - returns to us a value of y
64:58 - you can think of that as similar idea
65:00 - with programming functions except
65:02 - they're capable of doing much more than
65:03 - just
65:04 - mathematical computations now something
65:06 - to remember when we think about
65:07 - functions is that a function should do
65:09 - one thing and it should do that one
65:11 - thing very well so whenever you're
65:13 - designing functions um
65:14 - just try to keep in mind and think about
65:16 - what is your function doing
65:17 - is it doing one thing or is it doing
65:19 - many things and when i say one thing i
65:21 - don't really mean you know one line of
65:22 - code
65:23 - i mean one overall operation one overall
65:26 - function of your code is what it's
65:27 - performing
65:28 - it's not you know messing around and
65:30 - doing a hundred different things inside
65:31 - of it
65:32 - okay so how do we create a function well
65:34 - to do it is actually pretty
65:35 - straightforward
65:36 - we're going to type the word function
65:38 - we're going to type a name
65:39 - in this case i'm actually going to do a
65:41 - basic example before we get into the
65:43 - other one called add
65:44 - and then we're going to put curly braces
65:46 - to denote where our function actually is
65:48 - so what i've done here is said we're
65:50 - going to define a function
65:52 - called add and anything that goes inside
65:55 - of these curly braces
65:56 - is what's going to be inside of our
65:58 - function now to give you a really basic
66:01 - example
66:01 - what i'm going to do is just console.log
66:04 - add
66:04 - like this and i'm going to call my
66:07 - function by doing this
66:08 - now i know you guys have no idea what's
66:10 - going on right now if you've never seen
66:11 - functions before
66:12 - but let me break it down for exactly
66:14 - what's happening here
66:15 - this is our function block right so this
66:18 - is the name of our function
66:19 - add this block of code or any blocks of
66:22 - code for that matter that go inside of
66:23 - these curly braces
66:25 - will only happen when the function is
66:27 - run so the function has to be run we
66:29 - have to
66:30 - call the function and then whatever's
66:32 - inside of it will happen
66:34 - so here this is what we call our
66:35 - function call and to call a function is
66:38 - really easy
66:38 - all you do is type the name of it and
66:40 - then put two brackets at the end to say
66:42 - that you're calling it
66:43 - so this is our function call and
66:45 - essentially what's going to happen is
66:46 - when we're reading through our code as
66:48 - soon as we hit this block
66:49 - we're going to actually call this add
66:51 - function which means anything inside of
66:53 - here is going to run
66:54 - so let me illustrate that to you by just
66:56 - simply running and refreshing this page
66:58 - let me go to actually inspect element
67:01 - here
67:01 - and you can see if we go to uh i got to
67:04 - find where is this here
67:05 - console we get ad printed out to the
67:07 - screen when i called
67:09 - at and the great thing about functions
67:11 - that we can call them
67:12 - a bunch of times so let's do this
67:15 - and you can see that now we have four
67:17 - ads popping up on the screen
67:19 - so hopefully this is giving you an idea
67:21 - of why we might use them
67:22 - because say i wanted to print a sequence
67:24 - of i don't know
67:26 - add one two three like that
67:29 - well rather than you know having to do
67:31 - this say i want to do this exact
67:33 - sequence of ads
67:34 - 100 times rather than having to write
67:36 - 300 lines of code
67:38 - what i would do is simply call add as
67:39 - many times as i want that to happen
67:41 - right
67:42 - so if i refresh this now you can see
67:43 - we're getting all these popping up and
67:45 - that is you know the basics of functions
67:47 - and why we use them so that we can reuse
67:49 - our code
67:50 - so if you ever realize that you're
67:52 - writing very similar lines of code
67:54 - multiple times maybe you just want to
67:55 - add them into a function and then you
67:57 - can just call that line of code
67:58 - once with one statement rather than
68:00 - writing it a bunch of times
68:02 - okay so let's go into a little bit more
68:04 - of a
68:05 - more advanced example here with add and
68:07 - i'm going to show you something called
68:08 - parameters and something called return
68:10 - statements
68:11 - so what i'm going to do is i'm going to
68:13 - put two parameters in here
68:14 - and i'm going to call them a and b and
68:16 - these are called parameters
68:17 - now what these kind of stand for is the
68:19 - information that i need to pass to my
68:21 - function
68:22 - so this is the information that my
68:23 - function needs to be able to work to be
68:25 - able to perform some computation
68:27 - now in this instance a and b are going
68:30 - to actually be two numbers that i'm
68:31 - going to add together
68:33 - and what my function is going to do is
68:34 - take those two numbers a
68:36 - and those num the other number b add
68:38 - them together and return
68:40 - the result to wherever my function was
68:42 - being called now this might seem a bit
68:43 - confusing but
68:44 - the examples are hopefully going to
68:46 - clear this up for you so what i'm
68:47 - actually going to do in here is write a
68:49 - return statement
68:50 - now a return statement is different from
68:53 - logging something i'm not printing
68:54 - something to the console i'm returning a
68:56 - value
68:57 - and the value i'm going to return is a
68:59 - plus b
69:00 - now i know everyone's confused we'll get
69:02 - through this what i'm going to do is
69:03 - create a variable here i'm going to call
69:05 - it x and i'm going to set it equal to
69:07 - add and here i'm going to do five five
69:10 - now we all know what five plus five is
69:12 - we know that value is ten so what's
69:14 - actually happening here
69:15 - is when i call add i'm going to pass
69:18 - for the value a the number five i'm
69:21 - going to pass for the number b
69:23 - or for the parameter b the value five
69:26 - now what these are called are arguments
69:28 - so these are parameters and these are
69:30 - arguments
69:30 - and you can obviously you know i can
69:32 - pass different arguments to them i could
69:34 - say
69:34 - var y equals five plus
69:37 - seven right i can do any numbers i want
69:39 - and this is the point of this is that it
69:41 - can take any two numbers and return to
69:43 - me the addition of those numbers
69:44 - so let's simply log out these values i'm
69:47 - going to show you kind of how this works
69:49 - so console.log we have x and we have
69:53 - y so what's happening is when we say var
69:56 - x
69:57 - equals add 5 5 what's going to happen is
69:59 - we're going to pass our values
70:01 - and then we're going to return the
70:03 - addition of those
70:04 - values what this return is going to do
70:06 - is essentially say this line here that
70:08 - we've said add 5 5
70:10 - is going to be equal to whatever this
70:11 - return statement returns
70:13 - which in this instance is 10 which means
70:15 - that x should be equal to the value
70:17 - 10. i know this might be confusing but
70:19 - let's run this and see what we get we
70:20 - get 10 and we get 12.
70:22 - so what happened was we passed our
70:24 - values you know something happened
70:26 - this gets replaced with whatever was
70:28 - returned from that function so which is
70:29 - 10
70:30 - this one is getting replaced with 12 and
70:32 - we can print those two values out and
70:33 - say you know this is 10
70:35 - this is 12 those are answers and we're
70:37 - storing them
70:38 - in variable x and variable y that being
70:41 - said though i don't need to store them
70:42 - in a variable
70:43 - and sometimes i don't want to store the
70:45 - value i just want to you know use the
70:46 - value
70:47 - so what i can do is actually do
70:48 - something like you know 234 and like
70:51 - negative 98
70:52 - maybe let's pass that in here and i can
70:54 - log the result of that addition so here
70:56 - you know we get our value
70:58 - 136 i'm not storing it in any value but
71:00 - i can still
71:01 - show it because what happens is when i
71:03 - call this the return statement
71:05 - is gonna whatever it returns will
71:06 - replace this line and then you know we
71:08 - can demonstrate that and show that on
71:09 - the screen
71:10 - okay so i think that is the basics i've
71:13 - shown so far that you know we can have
71:15 - a function that has parameters we can
71:17 - have a function that doesn't have
71:18 - parameters
71:19 - we can have one that has a return and we
71:20 - can have one that doesn't have a return
71:22 - what about a function that has
71:24 - parameters but doesn't have
71:26 - a return statement well that's more than
71:28 - fine i could do something like
71:30 - console.log a plus b and then if now if
71:34 - i call my add function
71:36 - and i do 5 5 watch what's going to
71:38 - happen
71:39 - so we're going to print the value 10.
71:42 - why does this work
71:43 - well same thing as before we have our
71:45 - parameters a and b
71:46 - what we've done is we've called add
71:48 - notice we're not printing anything down
71:50 - here
71:50 - but what happens is inside of the
71:52 - function we print the addition so
71:54 - obviously that's going to work fine
71:55 - and you know that is how this works okay
71:58 - but now how about some of the more
72:00 - cooler parts of functions that i want to
72:02 - get into
72:02 - and then finish in the rest of the video
72:04 - how do we call a function
72:06 - from our html like i want to press this
72:08 - button and i want to call a function
72:09 - how do i do that well let me show you so
72:12 - what i'm going to do is actually create
72:13 - a new function
72:14 - and i'm going to call this function red
72:17 - and all i'm going to do right now
72:18 - is simply say console.log red
72:22 - now inside of my button tag what i can
72:24 - actually do
72:25 - is set the function that i want to
72:27 - trigger when this button is pressed
72:29 - and to do that i simply say on click
72:32 - equals
72:33 - and in this case red now what this is
72:35 - defining is essentially
72:37 - when i click the button i want to call
72:38 - the function which is called
72:40 - red which obviously is right here so
72:43 - let's see this and see if this works
72:45 - give this a refresh when i click red you
72:47 - can see that red
72:48 - is printing out to the screen and notice
72:50 - you know obviously it's keeping track of
72:52 - however many times i've pressed it just
72:54 - to tell you that same output is showing
72:55 - up
72:56 - and that is as easy as that is to do if
72:58 - you want to call a function from your
73:00 - javascript you literally just put it in
73:01 - quotation marks whatever the name is
73:03 - inside of html sorry it will call that
73:06 - function
73:07 - now let's do the same thing for blue or
73:09 - green or whatever i had
73:10 - okay so let's call this green and let's
73:13 - do
73:16 - console.log in green
73:19 - and i keep forgetting my semicolons but
73:21 - i guess i don't even need them anyways
73:22 - but i just like to add them
73:24 - so let's do onclick equals
73:27 - green okay so let's run this now refresh
73:31 - green red green red green green green
73:34 - green green red red red
73:35 - see and that is exactly how this works
73:38 - and that is i mean pretty cool in my
73:40 - opinion now what you guys can do is have
73:42 - buttons
73:43 - and when you press them you can trigger
73:45 - some javascript which is just the start
73:47 - of
73:47 - the really cool things we're going to be
73:48 - able to do later in this series
73:51 - now what i said though was i don't want
73:53 - to just console.log i actually want to
73:55 - change you know this element i want to
73:56 - change hello
73:58 - well we actually we know how to do that
74:00 - right we know how to change
74:01 - maybe not the color right now if you
74:02 - haven't seen that um command but we know
74:04 - to change the value of our h1 tag
74:06 - so how do we do that well let's do one
74:09 - in here
74:10 - document dot get
74:13 - element if i could type properly by id
74:16 - don't know what's going on with my
74:17 - keyboard here let's do
74:20 - header as our id and then we're going to
74:21 - do what is it dot inner
74:24 - html equals what should we do let's
74:27 - actually just make
74:28 - this red for now great now let's do the
74:31 - same thing i'm going to copy this to
74:32 - save us the pain of typing that again
74:35 - and let's put in green so i haven't
74:38 - changed the color yet
74:39 - what i'm actually going to be doing now
74:40 - is changing the value of this header tag
74:43 - to be either red or green when i press
74:45 - one of these buttons so let's see if
74:46 - this works or if i mess something up
74:47 - that's refresh
74:48 - when i click red you see it changes to
74:50 - red and when i hit green it changes to
74:52 - green
74:52 - and that is you know as easy as it is to
74:55 - do this
74:56 - now what if we want to change the color
74:58 - i'm going to give this a
74:59 - shot because i always forget how to do
75:02 - this but i think it's something like dot
75:04 - style dot color
75:06 - and i'm pretty sure this will actually
75:07 - change our color to be either green
75:10 - or red although i don't really know but
75:13 - we'll give it a shot
75:14 - okay so let's run this fresh when i
75:17 - press this oh there we go our color is
75:19 - changing
75:19 - from red to green so to do that what i
75:22 - did was dot style
75:24 - dot color and change that to lowercase
75:26 - red and lowercase green
75:28 - so that is our basics of if else if
75:31 - and else now these are ways to
75:33 - essentially check a condition before
75:36 - executing a certain block of code
75:38 - and this is very useful what a lot of
75:39 - you guys have been asking about in the
75:41 - comments or that have realized but like
75:42 - okay well
75:43 - what if i only want to run this piece of
75:45 - code if this is true
75:46 - or what if i want to do this and if this
75:48 - doesn't happen i do that
75:50 - well this is where we get into if else
75:52 - if and else which are extremely useful
75:54 - and kind of fundamental skills of the
75:56 - language
75:56 - so what i've done so far is i've
75:58 - actually just changed this example a
75:59 - little bit so what we have now
76:02 - is hello we have a text box and then we
76:04 - have a button that says click
76:05 - the reason i've done this is because
76:06 - what i want to do for this example
76:08 - is has it have it so the user can type
76:11 - something into this text box
76:13 - click click and based on what they type
76:15 - in we're actually going to change the
76:16 - color of this field
76:17 - so we could change you know if they type
76:19 - in the word green
76:21 - this will change to green when they
76:22 - press the button they type in blue this
76:24 - will change to blue when they press the
76:25 - button that's what i want to try to do
76:27 - so let's try to do that now the first
76:30 - thing we need to actually do this
76:31 - is an if statement so i'm going to run
76:33 - through how an if statement works
76:35 - essentially the syntax for an if
76:36 - statement is you type the word if which
76:39 - is a keyword it'll highlight hopefully
76:41 - in this red color for you guys if you're
76:42 - in subline
76:43 - then you have these brackets like this
76:45 - you put some kind of condition
76:48 - inside of these brackets and if this
76:50 - condition is true
76:51 - then whatever's inside of these curly
76:52 - braces will run
76:54 - if it's not true you're simply going to
76:56 - skip over this entire if statement so
76:58 - everything that's inside of this block
76:59 - and go to the next line and just ignore
77:02 - it and not even bother doing it
77:03 - so for instance if i say if true well
77:06 - this will always run because obviously
77:08 - true is always true but you know that's
77:10 - a condition i can put that in here
77:11 - and that means essentially if i did
77:13 - console.log something in here
77:15 - that would always run whereas if i put
77:18 - this to be
77:20 - false like that and then i was going to
77:22 - console.log this would never run because
77:24 - well
77:25 - this is false so let's actually give
77:27 - this a go and do something
77:29 - a little bit more advanced so a real
77:30 - condition inside of here and then we'll
77:32 - try to do something
77:33 - so what i'm going to do is actually grab
77:35 - the text that the user typed into my
77:37 - input box and just store that in a
77:38 - variable to start so i'm going to say
77:40 - var text
77:41 - equals and in this case i guess it's
77:43 - document
77:44 - dot get oops element
77:48 - if i could type properly early in the
77:50 - morning for me here guys
77:51 - id then we will do i n p uh which is the
77:55 - input box
77:56 - dot value okay so there we go that's
77:59 - going to grab our text for us
78:00 - now what i'm simply going to say is if
78:02 - text equals equals and i guess we'll say
78:05 - red we'll change the color of our header
78:08 - tag here to be read
78:09 - so to do that i'm going to say document
78:12 - dot get element
78:13 - by id dot style
78:17 - dot value equals red and i guess our id
78:21 - is going to be header like that
78:25 - okay now the only issue is i need to put
78:27 - this inside of a function so that
78:28 - essentially whenever my button is
78:30 - pressed we can activate that function
78:32 - and see what the current text value is
78:34 - so to do that
78:35 - what i'm going to say is function
78:37 - pressed like this
78:39 - then i'm going to just close my bracket
78:42 - here and
78:42 - indent all of this so there we go
78:46 - so i know i went kind of fast there but
78:47 - essentially what i've done is create a
78:48 - function called pressed
78:50 - this function will be clicked or you
78:52 - know activated when we press this button
78:54 - here
78:54 - then we'll get whatever we've typed into
78:56 - the text field check if it's equal to
78:58 - red
78:59 - if it's red we will change the color
79:00 - otherwise we won't do anything
79:02 - so let's run this now let's save and
79:05 - refresh the page
79:06 - so here notice when i click click
79:08 - nothing's happening when i type hi
79:10 - you know nothing's happening but if i
79:12 - type red then
79:13 - it changes all right so i realized i've
79:16 - done
79:17 - style.value rather than style.color so
79:19 - that would probably be why that wasn't
79:21 - working for a second when i tried it out
79:22 - so anyways change that to color
79:24 - let me show you again now so i think i
79:26 - showed if i type something like hello
79:27 - obviously nothing's going to happen
79:28 - but if i type red and click click after
79:31 - this has been
79:32 - refreshed then that will change to red
79:35 - and that is because
79:36 - we have this style that color equals red
79:37 - and if text is equal to red
79:39 - that will happen okay awesome but what
79:41 - if when i press the button
79:43 - and if they didn't type in red for
79:45 - example i want it to automatically
79:46 - change the color to black
79:48 - so maybe you know now if i start typing
79:50 - high
79:51 - well it's still the color red because
79:53 - it's not being changed back to the other
79:54 - color so how do i do that
79:56 - well this is where we can use something
79:58 - called an else
79:59 - now an else essentially is happens
80:02 - anytime this
80:02 - if statement doesn't happen so whenever
80:04 - you have an if-else block like this
80:06 - you know that either the if is going to
80:07 - run or the else is going to run and it's
80:09 - pretty easy to read it out you say if
80:11 - text equals red do this otherwise or
80:15 - else do whatever is inside the else
80:17 - block and that's as easy as this is so
80:19 - i'm just going to copy this line
80:21 - and change it so that this makes the
80:22 - color black
80:24 - like this and now let's run this and
80:26 - just show you how this works and that
80:28 - should hopefully help you
80:29 - so we have hello now let's type you know
80:31 - u
80:32 - obviously black we're not getting
80:34 - anything let's type red
80:36 - that changes to red and then if i type i
80:38 - don't know no
80:40 - we get it back to black so that is how
80:42 - this works if it's not red
80:44 - then it changes the color to black if
80:46 - it's red then it changes the color to
80:48 - red
80:49 - okay so what if we want to be able to
80:51 - change the color to red or
80:53 - blue and then anything else goes to
80:54 - black well how would i do that
80:56 - well this is where we use what's called
80:58 - an else if
80:59 - now this so far i hope makes sense again
81:02 - you just have if if this condition
81:03 - happens whatever's inside of here
81:05 - you do this otherwise you do this now
81:08 - the else if is kind of an extension on
81:10 - top of this and i'll talk about how it
81:11 - works in a second but let's get the
81:12 - syntax down first
81:14 - so essentially the else if is kind of a
81:16 - combination between
81:17 - both the else and the if now this is
81:21 - essentially saying
81:22 - if this doesn't happen so if this if
81:24 - statement doesn't run
81:25 - we will check if the condition we put
81:28 - here is true
81:29 - if that's true we'll do whatever's
81:30 - inside of our brackets here
81:32 - otherwise we'll come down and we'll do
81:34 - what's below here
81:36 - so this actually means we can have
81:37 - multiple else ips which we'll get into
81:38 - in a second
81:39 - let's do another example here where we
81:41 - make this say maybe green
81:43 - and then we'll just get the element id
81:46 - and change it to the color green so
81:48 - let's
81:48 - tab this in like that
81:51 - and go green alright so again the way
81:55 - this we're operating here
81:56 - is we're going to start by checking if
81:58 - the text is equal to red if it is
82:00 - boom we go red we don't even bother
82:02 - reading the rest of this we don't need
82:03 - to do it
82:04 - okay if it's not red what we'll do is
82:06 - we'll check if
82:07 - it's green if it's green we'll change
82:09 - the color to green
82:10 - awesome there we go we're done we don't
82:12 - even read the else if
82:13 - this is not true and this is not true so
82:16 - both above the else aren't true
82:17 - then we'll run the else and we'll change
82:19 - the color to black and that is pretty
82:21 - much how this works it's fairly
82:22 - straightforward
82:23 - so let's refresh let's type green
82:26 - there we go it goes green let's type red
82:28 - it goes red and let's type blue
82:31 - and obviously it goes to black now if i
82:33 - wanted to incorporate blue as well
82:35 - what i could do is simply make another
82:37 - else if like this
82:39 - i think i need to actually do that yes
82:42 - that should work
82:43 - let's put another condition here say
82:44 - text equals equals equals
82:47 - that should actually just be three let's
82:49 - say blue and then what we can do is
82:51 - simply
82:51 - copy this and change the color to be
82:54 - blue
82:54 - and this should work for us now again
82:57 - this is going to work because we can
82:58 - have as many else ifs as we want we can
83:00 - do you know if else if else if
83:02 - we don't even need to include this else
83:04 - if we don't want to i can get rid of
83:05 - that
83:06 - i can have just one else if the
83:07 - combination of these is fine
83:09 - just know that if you have an else if or
83:11 - if you have an else there needs to be
83:12 - the initial
83:13 - if to start that statement so let's look
83:15 - at this now
83:16 - and let's try this so let's refresh if i
83:20 - type
83:20 - blue we change to blue if i type red
83:24 - we go to red if i type green we go to
83:27 - green and if i type something random
83:29 - nothing happens because that else
83:31 - statement is no longer there
83:33 - and that is you know pretty much how
83:35 - that works now a lot of people get
83:36 - confused with this
83:37 - um try to do some examples we'll do some
83:39 - more as we go through the different
83:41 - videos but just remember
83:42 - you start with your if statement if
83:44 - whatever happens here
83:45 - happens is true then this runs if it
83:48 - doesn't we'll check
83:49 - all of the else ifs if any of those are
83:52 - true we'll execute that and we'll stop
83:54 - looking for the rest of them otherwise
83:55 - we will do any else statement that is at
83:58 - the bottom and that else statement will
83:59 - happen
84:00 - no matter what so long as you know the
84:02 - ones above it were false
84:03 - now we can definitely have um more than
84:06 - one if statement like there's different
84:07 - ways to do this for example
84:09 - right now i'm doing l else ifs but what
84:11 - i could actually do is just make all
84:13 - these ifs
84:14 - and everything's actually going to
84:15 - operate the same and the reason that's
84:17 - going to happen is because
84:18 - well you know in theory none of these
84:21 - conditions will be true at the same time
84:23 - right the text can never be equal to
84:24 - green blue and red
84:25 - at the same time but the reason we might
84:28 - not want to do this in some instances
84:30 - is well like if it's red what's the
84:32 - point of checking if it's green right so
84:34 - in this case we have three if statements
84:36 - these are going to happen and they're
84:38 - all going to be checked every single one
84:39 - of these if statements every time we run
84:41 - this condition will be evaluated and
84:42 - we'll check if this needs to happen but
84:44 - the thing is
84:45 - if the statement is read like if we
84:48 - check the text and it's red what's the
84:49 - point of even bothering to check these
84:51 - other two if statements
84:52 - well that's why we put them in the else
84:54 - if because we're saying well you know if
84:56 - it's red
84:57 - there's no chance that this condition
84:58 - will be true so there's no point in even
85:00 - trying to evaluate it right
85:02 - but you know we can do three ifs like
85:04 - this i'll show you this works
85:05 - if i refresh and i go green that's fine
85:08 - and the way this is gonna work is you
85:10 - know we read this if statement we check
85:11 - it if it's true we do it
85:13 - then we read this if statement if it's
85:14 - true we do it like in theory
85:16 - we could make these true like i can make
85:19 - this statement true
85:21 - and now let me actually show you how
85:22 - this works if i type in
85:25 - let's say here so let's have a look at
85:26 - our code we have red true blue
85:28 - right so if i type red notice that
85:32 - we actually change to the color green
85:34 - now the reason that happened is because
85:35 - this is true right so this is
85:37 - always going to run so we check this
85:39 - even though it actually changes this to
85:40 - red
85:41 - it gets changed to blue directly after
85:43 - but now
85:44 - watch what happens if i type blue well
85:47 - blue is actually run well why is that
85:49 - because this happens we change it to
85:51 - green
85:51 - and then we change it to blue afterwards
85:53 - so we get to see
85:54 - the switch statement and the way i'm
85:56 - going to teach you guys the switch
85:57 - statement is essentially comparing what
85:59 - we've written in the previous video
86:00 - which is this kind of function
86:02 - that essentially uses some ifs some else
86:04 - ifs and some else's or at least it did
86:06 - in the previous video
86:07 - to perform the example of allowing us to
86:09 - type in some color and changing the text
86:11 - of you know i don't know say some
86:13 - element on the screen to be that color
86:15 - so what we're going to do is do this now
86:17 - with a switch statement so you guys can
86:18 - see a little bit of the difference on
86:20 - how it works and hopefully understand it
86:21 - a bit better
86:22 - so what i'm going to do is scrap all
86:23 - this code where essentially we had three
86:25 - if statements i'm going to switch this
86:26 - to
86:26 - a switch now the way that a switch
86:29 - statement works is you start by typing
86:31 - the word switch
86:32 - you put brackets inside the brackets you
86:35 - put an expression
86:36 - or a variable that you're going to be
86:38 - checking so in this case
86:39 - text is what we're going to check right
86:41 - we're going to see if it's equal to
86:42 - different values
86:43 - so we're going to put that variable here
86:45 - next we're going to put our
86:47 - curly braces like this we're going to
86:49 - type the word
86:50 - case space colon
86:53 - then we're going to tab indent and hit
86:56 - break and put a semicolon now i know
86:58 - this is like some of you guys like whoa
86:59 - whoa what all what is all this what's
87:01 - happening i'm going to go through it but
87:03 - just
87:04 - bear with me for a second here so case
87:06 - what does this mean
87:08 - well essentially inside of a switch
87:09 - statement we have cases
87:11 - now the cases are kind of all of the
87:12 - different things that could happen
87:14 - that the different branches the
87:15 - different routes we could go on
87:17 - so in this instance we have text and our
87:20 - first case is gonna be if text
87:22 - is equal to red now this is case one
87:25 - and what this is saying is essentially
87:27 - case red which means
87:29 - text is equal to red so if text is equal
87:32 - to red
87:33 - we're going to do whatever is after this
87:34 - colon and before this break statement so
87:37 - in this case we could change the
87:38 - document
87:39 - so actually we'll just steal what we
87:40 - have here and i'll change this a bit
87:42 - so document dot get element by id
87:46 - dot style dot color
87:49 - equals red like that and we'll have to
87:52 - change this to header
87:54 - so what this is going to do now is
87:55 - essentially say okay the switch
87:57 - our first case is if it's red if it's
87:59 - red we'll change the document
88:01 - to be or change the element to be the
88:03 - color red and then we can break
88:04 - and that's what this case does so let's
88:06 - actually refresh to see if this works
88:08 - so if i type red you can see that it
88:10 - changes to red
88:11 - and you know if i type something else if
88:13 - i type blue
88:14 - obviously we see nothing else is
88:16 - happening all right
88:17 - so what's the next thing we need to do
88:19 - well we need to create some more cases
88:21 - so what's another case that could happen
88:22 - here well
88:24 - we could have a case that our text is
88:26 - blue right that's what it equals to
88:28 - so we'll break we'll copy this and then
88:31 - what we'll do
88:32 - is we'll simply put in here and we'll
88:34 - change the color to be blue
88:37 - and i think you guys are kind of getting
88:38 - the hang of how this works essentially
88:40 - the switch statement
88:41 - we'll check these different cases it
88:43 - will check them in order
88:44 - if you know this text is equal to one of
88:47 - these cases then the case will run
88:49 - and then we'll break out of the switch
88:50 - statement and we won't bother looking at
88:52 - any of the other cases that are there
88:54 - now there's some more to talk about but
88:55 - let's try this for now so here we have
88:57 - red we have blue so let's try blue
88:59 - we can see that changes to blue let's
89:00 - try red we can see that changes to red
89:03 - awesome so let's add one more case and i
89:06 - guess we will do
89:07 - green as our last case to stay
89:08 - consistent with our previous example
89:10 - so we have green like that
89:13 - change our color to green and one last
89:17 - test here to make sure everything's
89:18 - working
89:19 - let's go green and it changes to green
89:22 - awesome
89:23 - now what i'm going to show you guys is
89:24 - called default
89:26 - now what is default well default is kind
89:28 - of like the else
89:29 - inside of a switch statement so here
89:32 - what we can actually do is create
89:33 - what's called a default case which
89:35 - essentially means that if
89:36 - none of the cases above this ran then
89:39 - we'll always
89:39 - default and do this default now what the
89:42 - default is going to be is just changing
89:44 - our text color
89:45 - to be black because that is what we need
89:48 - it to be
89:48 - so we'll change it to be black and there
89:51 - we go what we've essentially done
89:52 - is simulated you know an if else if and
89:55 - else using a switch statement
89:57 - now these are useful sometimes because
89:58 - it's a lot easier to actually read your
90:00 - code when you put it in a switch
90:01 - statement rather than having them all
90:04 - in that branching if and else statements
90:06 - but in some instances you know you need
90:08 - to use the if else
90:09 - if you're not going to just be checking
90:10 - one variable whenever you do a condition
90:13 - but for us since all we're doing is
90:15 - checking one variable
90:16 - this variable can be equal to a few
90:18 - different things so we'll check if it's
90:20 - equal to these different things
90:21 - in these cases and then do whatever is
90:23 - after this
90:24 - so anyways let's have a look at this now
90:26 - let's refresh this
90:28 - let's type hello we can see the text
90:30 - doesn't change
90:31 - let's go green oops if i could get in
90:34 - here
90:34 - green it changes to green if i type
90:37 - nothing and i click click
90:38 - it'll go back to black so that is how
90:40 - the switch statement works and that is
90:42 - you know a good example of when we would
90:44 - use a switch tape
90:45 - now what i'm going to show you next
90:47 - because we actually have quite a bit of
90:48 - time left in this video
90:50 - is a different example of when maybe you
90:52 - wouldn't you would not want to use a
90:54 - switch statement
90:54 - and that's what i'm going to use an
90:56 - if-else statement for but let's just do
90:57 - an example here
90:58 - so i'm going to delete all of this and
91:00 - what i'm actually going to do is change
91:02 - this text input example
91:04 - to be rather than changing the color of
91:05 - this header tag i'm going to ask the
91:07 - user to type in their name
91:08 - and essentially if they type in or sorry
91:11 - not their name their age
91:12 - and if their age is greater than a
91:14 - certain number i'm going to tell them
91:15 - that you know they're an adult or
91:16 - they're not an adult it's a good example
91:18 - that i like to use
91:19 - so in this case i'll say what is your
91:21 - age just a little header before our
91:23 - input box they can type it in here
91:25 - when they click clicked we'll run this
91:27 - press function and we can see what their
91:29 - age is
91:29 - so what i'm going to actually do is make
91:31 - another text input here so i'm just
91:33 - going to say p
91:34 - slash p i'm just going to say id equals
91:38 - output and what i'm going to do is say
91:41 - var actually do i want to do this yeah
91:44 - sure let's say var
91:46 - output equals document dot get element
91:51 - by id and here i'm going to call this
91:53 - output
91:55 - and what this is going to allow me to do
91:56 - is actually change the
91:58 - output tag here by just referencing the
92:00 - variable output rather than typing this
92:02 - entire thing whenever i want to change
92:03 - it
92:04 - so what i'm going to do now is i'm going
92:05 - to put an if statement and remember that
92:07 - this function is going to run whenever
92:08 - this user
92:09 - clicks the click button so in this
92:10 - instance we're going to grab the text
92:12 - which should hopefully be the user's um
92:15 - what do you call it age and what i'm
92:16 - going to do is try to convert that
92:18 - age into a number so that i can compare
92:20 - it against another number
92:21 - now you'll see how that works so what
92:23 - i'm going to do in here is i'm actually
92:25 - going to try to convert
92:26 - whatever it is the user types in into a
92:28 - number now the reason i need to do that
92:30 - is because whenever the user types
92:32 - something in a text input box so like a
92:34 - text field
92:34 - it's assumed that the data type that
92:37 - comes in is a string
92:38 - so we know what a string looks like and
92:40 - the strings have those quotation marks
92:42 - and we remember from previously and
92:43 - actually i'll do it down here if i
92:45 - compare something with quotation marks
92:47 - to something say like that so 42 like
92:49 - that and i use
92:50 - my three equal signs we're going to get
92:53 - the false value for that right
92:54 - and i'd like to be able to use the
92:56 - greater than sign and the less than sign
92:58 - between these different values so i can
92:59 - compare whatever the user types in
93:01 - to whatever number i'm going to compare
93:03 - to so in this case 18 to see if they're
93:04 - an adult
93:05 - so to do that i need to convert this to
93:07 - a number so to do that i'm actually
93:09 - going to use a function called parseint
93:11 - what this is going to do is simply take
93:14 - the integer value of
93:15 - whatever string we typed in and just
93:17 - return that to us just give that to us
93:19 - so this will say var text equals the
93:22 - number
93:22 - of whatever string we typed in and this
93:24 - will convert that to a number
93:26 - okay so what i'm going to do is compare
93:28 - the text
93:29 - to some number in this case i'm going to
93:31 - say 18. so if text
93:33 - is greater than or equal to 18 so if
93:35 - their age is greater than or equal to 18
93:37 - what i'm going to do is change this
93:38 - output text to say you are
93:40 - an adult so to do that i'm going to say
93:42 - output which is the variable here that's
93:44 - holding
93:45 - a reference to this p tag so this
93:48 - paragraph tag
93:49 - let me say dot inner html equals and in
93:52 - this case
93:53 - you are older
93:56 - than 18 exclamation point next
93:59 - what i'm going to do is essentially say
94:01 - this is not true
94:02 - we'll change this output text to say you
94:05 - are
94:06 - not older than 18. and let's run this
94:08 - and see if this works so refresh
94:10 - what is your age let's say 18 click you
94:13 - are older than 18.
94:14 - what if i say 17 you get you are not
94:17 - older than 18.
94:18 - now notice that this one is kind of
94:20 - misleading it says you are older than 18
94:21 - but you could actually be
94:23 - 18. so what we should do is change this
94:25 - so that we have one that says if you're
94:27 - 18 right so let's say else if
94:30 - text equals equals
94:33 - 18. then what we'll do is and i gotta
94:36 - get rid of that
94:37 - actually and add one here
94:40 - uh it is we'll just simply add this
94:42 - output text and we'll say
94:44 - u r 18 like that
94:47 - then we can change this to say greater
94:49 - than 18 and now what we're going to do
94:50 - is check if it's greater than 18 if they
94:52 - are we'll say you're older otherwise if
94:54 - they are 18 we'll say you're 18 and then
94:55 - finally
94:56 - else you are not older than 18. so let's
94:58 - run this refresh
95:00 - let's go 17. you're not older than 18
95:03 - let's go 18
95:04 - you are 18 and then 19 you are older
95:07 - than 18.
95:08 - and that is how you use this now the
95:10 - reason you wouldn't use a switch
95:11 - statement for this
95:12 - is because we're checking any values
95:14 - that are greater than 18
95:16 - we're going to print out and say well
95:18 - you're older than 18 but if we use a
95:19 - switch statement we need to check if
95:21 - it's
95:21 - exactly that value right we need to have
95:24 - you know the text up top and then we
95:25 - need to check 18 19 20 21 it doesn't
95:28 - make sense to use a switch statement in
95:29 - that instance whereas before when we
95:31 - were just typing you know red green blue
95:33 - that's totally fine and it makes sense
95:34 - to use a switch statement but here since
95:36 - we're checking values
95:37 - we need to use if else if else so
95:39 - anyways that has been
95:41 - switched statements as well as a kind of
95:42 - a little bit of a more advanced example
95:45 - with if alif and else if you guys are
95:47 - looking to challenge yourself i will
95:48 - mention to you that you can actually put
95:50 - if statements and hold chaining blocks
95:53 - inside of other if statements and other
95:55 - chaining blocks
95:56 - so you can kind of go and nest a bunch
95:58 - of statements together so you guys can
96:00 - try to do something like that
96:01 - um and you know that's good practice
96:03 - actually if you want to create something
96:04 - like a choose your own adventure game
96:06 - you can use what i've just showed you to
96:07 - actually do something similar
96:09 - string methods and concatenation of
96:12 - strings
96:12 - now we've dealt with strings a little
96:14 - bit before i've showed you guys a few
96:16 - things we can do with them but
96:17 - i just want to show you a few other
96:19 - properties of strings because there is
96:21 - actually a lot and there's a lot of
96:22 - things that you kind of need to learn to
96:24 - deal with them properly
96:25 - and that's also something you're going
96:26 - to be doing a lot in javascript is
96:27 - manipulating strings and user input and
96:30 - all of that
96:31 - so what i want to do is kind of have an
96:34 - example here where
96:35 - we're going to get the user to type
96:36 - something and we're going to modify the
96:37 - string they type in and just print it
96:39 - out and show you what it looks like
96:41 - so to do this we're going to say you
96:42 - know i probably should have kept this
96:44 - from the last time
96:45 - var text equals in this case i guess
96:48 - we'll say document
96:49 - dot get element by id
96:53 - dot uh what was it value i think it was
96:55 - value okay
96:56 - so let's change this now to be imp for
96:59 - input
97:00 - and what i'm gonna do is simply just
97:02 - console.log or actually we'll put that
97:04 - value in this output tag
97:06 - so what we'll say is output dot
97:09 - inner html equals and in this case
97:12 - text now let's just look at this example
97:14 - quickly to see how this works i'm also
97:16 - going to talk about this page in a
97:17 - second
97:17 - so let's refresh this let's type hello
97:20 - and then we can see obviously it shows
97:21 - up down below
97:22 - now this is where i'm grabbing some of
97:24 - these string methods from this just has
97:25 - a nice list of them i'll try to leave a
97:27 - link to it but remind me if i forget
97:28 - which is likely
97:29 - so there's methods like starts with
97:31 - substring substring
97:33 - two local lowercase two string two
97:35 - lowercase to uppercase trim
97:37 - i'm not gonna go through all of them but
97:38 - i'll show you what some of them do
97:40 - and why we might even actually wanna use
97:42 - them so the easiest one to illustrate
97:44 - is two uppercase now you guys can
97:46 - probably guess what this is going to do
97:48 - but essentially whenever you have a
97:49 - string object which in this case
97:51 - text is because this right here is going
97:54 - to be storing some string value right
97:56 - this is going to be equal to a string
97:57 - so text now is storing some string which
98:00 - means that i can actually manipulate the
98:02 - variable text
98:03 - by calling you know some string methods
98:05 - on it
98:06 - so let's do this and let's refresh so
98:09 - when i do that and i type let's say
98:11 - hello
98:12 - we can see we get hello now in all upper
98:14 - cases so what two uppercase does
98:16 - is essentially take this string and
98:18 - create a new string that is completely
98:20 - uppercase letters with whatever this
98:21 - string was
98:22 - now if i decide to add you know an
98:24 - uppercase o at the end we still are
98:26 - going to get this
98:27 - because everything just goes uppercase
98:29 - now the same works for two lowercase
98:33 - like that so let's look at this so if i
98:35 - go to lowercase and i type
98:37 - low then we're going to get lowercase
98:39 - hello so this is often useful especially
98:41 - when you're asking maybe a question or
98:43 - something that could be right or wrong
98:45 - because you don't know if someone's
98:46 - going to type in the answer with upper
98:48 - cases or with lower cases or maybe
98:50 - you know say they're going to type in
98:52 - the answer to a question like maybe the
98:53 - answer is blue
98:55 - and they type blue with a capital b well
98:58 - is that wrong
98:59 - if the your answer that you had was blue
99:01 - with a lowercase b
99:02 - no the answer's still correct but if
99:04 - you're comparing you know blue like this
99:07 - with let's say something like blue
99:10 - obviously you know these two are not the
99:12 - same so what you would do is take that
99:13 - user's input
99:14 - make it all lowercase so then that way
99:16 - you can compare if the value of your two
99:18 - strings
99:19 - are actually the same so that's where we
99:20 - use two lowercase and dot uppercase
99:23 - now what we can actually do is starts
99:25 - with and ends with as well and this is
99:26 - going to give us a boolean
99:28 - so starts with is going to tell us if
99:30 - the string starts with a certain
99:31 - character
99:32 - so what we need to do is inside of here
99:34 - put the character we want to see if it
99:36 - starts with
99:36 - now maybe we want our string to start
99:38 - with a number sign or maybe we want to
99:39 - start with an at sign like if we're
99:41 - doing a mention of someone on social
99:43 - media or something
99:44 - so what i can do is refresh this and now
99:46 - if i type say hello
99:48 - we're going to get the value false but
99:50 - if i type
99:51 - at hello like this we get the value true
99:54 - because our string started with this
99:57 - character
99:58 - now same goes with ends with we have
100:01 - ends with
100:02 - we can use that same character again so
100:04 - in this case we'll do hello
100:05 - false hello with one of those at the end
100:08 - and what are we why are we not getting
100:10 - um correct here let's see if this works
100:13 - hello hmm interesting why we keep
100:16 - getting false
100:17 - let me look at this okay so we got true
100:19 - there i think i actually had a space
100:21 - afterwards and that's why it wasn't
100:22 - working and that's actually the next one
100:24 - i'm going to talk about so notice here
100:25 - we're getting true but if i add a space
100:27 - then we get false so i think that's what
100:29 - was happening was essentially this
100:30 - string has a space at the end so that's
100:32 - why that wasn't working
100:33 - so actually what i want to show you know
100:35 - is how can we get rid of that space
100:37 - so in that last instance right our
100:39 - string actually did end with
100:41 - this add sign but since we had a space
100:43 - at the end it wasn't counting because it
100:45 - was going to look like something like i
100:46 - think we had
100:47 - like hell at like that so this was our
100:50 - string so obviously we see it ends with
100:51 - this but there is a space so how can we
100:53 - get rid of any of those spaces at the
100:55 - end
100:55 - or at the beginning of that string that
100:57 - we don't want well
100:59 - this is where we can actually use a
101:00 - method called trim now what trim is
101:02 - going to do is simply
101:04 - remove any leading or trailing white
101:06 - spaces from our string
101:07 - so this is really useful because
101:08 - sometimes maybe someone's typing in
101:10 - their name or something and they type in
101:11 - like space
101:12 - hello well you don't want to store space
101:14 - hello you just want to store hello
101:16 - so in this case actually let's refresh
101:18 - this and if i do hello and like a bunch
101:20 - of spaces
101:21 - um we're obviously okay so we're
101:23 - obviously going to get false because
101:24 - there's a bunch of spaces but let's do
101:25 - this same example let's say hello at and
101:28 - then a bunch of spaces and click
101:29 - well our answer is true because we
101:32 - actually removed all these spaces
101:34 - when we did this trim here so that's
101:36 - what that does it actually removes any
101:37 - spaces
101:38 - i think a better example might be if we
101:40 - just actually print out text.trim
101:43 - and i'll do some leading spaces so if i
101:45 - go like hello
101:46 - and just do a bunch of spaces here then
101:49 - technically when we printed this it
101:51 - should be like spaced over a bit right
101:52 - but when we run this
101:54 - we just oh well i got to refresh this
101:56 - let's go
101:57 - hello do this we just get hello there's
102:00 - no spaces before that because we trimmed
102:02 - off all of those spaces
102:03 - so that's what those methods do now
102:05 - notice that i used two of those in
102:06 - combination with each other right
102:08 - so i had dot trim which returns to me a
102:12 - new string so that's going to give me
102:13 - that hello
102:14 - without all those spaces there so it
102:15 - removes all those and then what i did
102:17 - was
102:18 - dot ends with like that right so what
102:21 - these methods do is they don't
102:22 - modify the original string they actually
102:24 - create a new one
102:26 - that can be used in whatever context you
102:28 - want right so if i have
102:29 - this you know let's do this trim what
102:31 - i'll do next is i'll just console.log
102:34 - the actual value of text and show you
102:36 - guys the text isn't changing
102:37 - when we do this dot trim this just
102:39 - creates a new string
102:41 - that gets stored in our inner dot html
102:43 - of output it doesn't actually modify
102:45 - text so to illustrate that let's refresh
102:48 - this
102:48 - let's do a bunch of spaces for hello
102:51 - click we can see that change but now if
102:52 - i go to inspect
102:54 - and we look at the console here which i
102:57 - think is right here
102:58 - we can see that we get hello and we
103:00 - actually have a bunch of spaces
103:02 - before that now i realize that sometimes
103:04 - it's hard to see
103:06 - the actual spaces so i'm going to show
103:08 - you another property we have of strings
103:10 - called length now what this does is it's
103:14 - different than a method which are what
103:15 - these are that we've been calling with
103:16 - these dot and then these brackets
103:18 - it actually tells you how long the
103:20 - string is which is kind of useful
103:22 - so in this case let's refresh this let's
103:24 - go bunch of spaces
103:26 - hello click and in this case obviously
103:28 - we know that the string is only of
103:30 - length i believe
103:30 - six but here we're getting length 23 and
103:33 - that's because we've added a bunch of
103:34 - those spaces beforehand
103:36 - so it's printing out that length to us
103:38 - now this length property is really
103:39 - useful because sometimes like say you
103:41 - have a password you want to check
103:42 - well that password has to be of length
103:44 - at least 250 or something like that
103:46 - right
103:47 - or you know 250 25 10. whatever you want
103:50 - it to be
103:51 - like you need to have it of some certain
103:52 - length so what you do is you could check
103:54 - the length of whatever that user typed
103:56 - in
103:56 - say okay is it greater than 8 is it
103:58 - greater than 9 does it contain
104:00 - an at sign does it start with a capital
104:02 - whatever any of those
104:03 - you can check all that and if that's
104:05 - true you could say okay this is a valid
104:06 - password you can say okay no that's not
104:08 - a valid password
104:09 - so anyways that is a little bit about
104:11 - strings i mean i think i've showed you
104:12 - guys concatenation before where
104:14 - essentially we've had something like you
104:15 - know hello
104:17 - plus and then maybe in this case if we
104:18 - do text
104:20 - actually let's do this what i'm going to
104:22 - do is simply say ask the user to type in
104:24 - their name now so we'll say to actually
104:25 - type something sure
104:26 - and we'll say you
104:29 - typed like that and then
104:32 - space now i think i showed you guys how
104:34 - this worked but essentially
104:36 - concatenation with strings is just
104:37 - adding them together
104:38 - so what we're going to do here is that
104:40 - you typed and then just add this
104:41 - text.trimmed value after
104:43 - so in this case if i refresh this we can
104:45 - close this console window actually let's
104:47 - get out of that
104:48 - and i type hello it'll say you typed
104:51 - hello
104:51 - right and that'll just print that out
104:52 - and show that to me now let's say i
104:54 - wanted to actually you know maybe
104:56 - print some numbers out or print some
104:57 - other things well what i can do
104:59 - is i don't need to put them in strings i
105:00 - could say like plus five if i wanted to
105:02 - and i think i showed you guys how this
105:04 - works well essentially and now if i type
105:06 - low
105:07 - it's just gonna add five to the end so
105:08 - just mush that together
105:10 - all right so i think that's all for
105:12 - strings for right now there is a lot
105:13 - more to talk about with strings again
105:15 - try to remind me
105:16 - to link this website that has a bunch of
105:18 - different methods that you can use for
105:19 - strings
105:20 - i haven't shown all of them or even like
105:22 - most of them to be honest like there's a
105:23 - replace method which will replace a
105:25 - certain
105:26 - item in the string with another item we
105:28 - have split which will split this string
105:29 - we'll talk about that one later
105:31 - um just lots of stuff you can do here i
105:33 - just want to give you guys an
105:33 - introduction and illustrate kind of how
105:35 - these work and how you can use the
105:36 - methods and you know
105:38 - how i did something like text dot trim
105:40 - even though text isn't actually string
105:41 - but it's storing the string values stuff
105:43 - like that javascript
105:44 - arrays now arrays are one of the most
105:47 - used what we call
105:48 - data types or data structures within
105:50 - javascript and any other language so
105:51 - they're extremely important that you
105:53 - understand how they work
105:54 - so i'm just going to start and explain
105:55 - what is an array well essentially
105:58 - an array is an ordered collection of
106:00 - elements
106:01 - so what that means is previously when we
106:03 - created a variable so let's say we had
106:04 - like var
106:05 - tim equals five well this variable tim
106:08 - stored simply one element now what we're
106:11 - going to be doing is
106:12 - having a variable storing multiple
106:14 - elements and i'm going to discuss how we
106:15 - can access those different elements add
106:17 - elements remove elements
106:19 - and do all kinds of things like that now
106:21 - the way that we create an array
106:23 - there's actually two ways in javascript
106:24 - but we're going to stick with this way
106:26 - is simply just by putting square
106:28 - brackets like this
106:29 - so when you have a variable you name it
106:31 - something you put your equal sign and
106:32 - then you put square brackets and this
106:34 - denotes i have created an
106:35 - array currently our array has a size of
106:37 - 0 as there's nothing in it
106:39 - but then what we can do once we've
106:41 - defined these square brackets is go
106:42 - ahead and put some elements inside of
106:44 - our array
106:44 - if we would like to so for example i
106:47 - could put an element hello
106:48 - i could put the element 5 i could put
106:50 - the element 4.6
106:52 - i could put tim and this is my list of
106:55 - elements
106:55 - inside my array so if you're familiar
106:57 - with other programming languages
106:59 - sometimes these are called lists as well
107:01 - it's pretty much the same thing in
107:02 - javascript this is just called an array
107:04 - and what we can do when we create an
107:06 - array is simply put elements inside of
107:08 - these square brackets
107:09 - separate them by commas and now we are
107:11 - saying here we have four elements
107:12 - inside of our our array and now i'm
107:15 - going to talk about how we can actually
107:16 - access these elements and remove them
107:18 - and do all kinds of things like that
107:20 - now i will note here that there is
107:22 - another way to create an array so
107:23 - typically what you do is you notice you
107:25 - say var
107:26 - array and then you just do this if you
107:28 - want to create an empty array
107:29 - but you also can do new array so this is
107:32 - a
107:33 - way that you can create an array in
107:34 - javascript as well usually we stay away
107:36 - from this as it's not necessary and it
107:38 - just makes things a little bit more
107:39 - messy
107:39 - but i will show you how this works what
107:41 - you can do is actually say new
107:43 - array inside these brackets you can
107:45 - denote a single number that tells you
107:47 - how many elements you want to be in your
107:49 - array so in this case we'll do 50
107:50 - and what this will do is actually create
107:52 - for us an array of 50 blank elements
107:55 - that don't have any content so it's an
107:57 - array of size 50 that's what this will
107:59 - do if you leave it
108:00 - like this then it just automatically
108:02 - creates one with size of zero which
108:04 - means it's going to look like that now
108:05 - hopefully i didn't confuse you there if
108:07 - i did just ignore that line i just
108:08 - wanted to show you guys
108:09 - in case you're interested now let's talk
108:11 - about accessing elements
108:13 - so right now i have four elements in my
108:15 - array we have an array of length four
108:18 - how do i access these different elements
108:20 - well this is where we talk about
108:21 - something called
108:22 - indexes so i'm just going to type
108:24 - console.log here so i can start printing
108:25 - some stuff out
108:27 - so essentially whenever we have an array
108:28 - every element in the array has a
108:30 - specified
108:31 - index now that index is simply an
108:33 - integer that represents its position in
108:35 - the array
108:36 - now the indexes for any array go from
108:39 - zero
108:39 - to the size of the array minus one now
108:42 - that simply means here
108:44 - that index 0 represents hello as that is
108:46 - the first element
108:48 - index 1 represents 5 as that is the
108:50 - second element
108:51 - 2 4.6 as that is the third element and 3
108:54 - as tim as that is the fourth element so
108:57 - the easy way to remember it is
108:58 - essentially the last element here is
109:00 - always going to be the size of the array
109:01 - minus one index and the first element
109:03 - will always be zero
109:05 - so let me show you how we actually index
109:07 - things so what i can do
109:09 - is simply put the name of my array which
109:11 - is tim square brackets to the right of
109:13 - it
109:13 - and the index inside of here and this
109:16 - will actually access this specific
109:18 - element in the array for me
109:20 - so watch i'm just going to go to my
109:22 - terminal here whatever this is
109:24 - and print this out and you can see that
109:25 - we print hello as obviously
109:27 - 0 was the first element there now if i
109:30 - do index
109:30 - 2 we should get 4.6 so let's bring this
109:33 - up again
109:34 - refresh we get 4.6 awesome now what
109:37 - happens if i do something like tim
109:39 - 4 well we know that four is non-indexed
109:42 - because we only have indexes from zero
109:44 - to three so if i try to do this let's
109:46 - observe what happens in the
109:48 - console here we get undefined so when
109:51 - you try to access an element that does
109:52 - not exist
109:53 - you get an undefined so that's something
109:54 - worth noting that actually doesn't
109:56 - throw an error for you where in other
109:58 - languages it usually would it just gives
110:00 - you undefined
110:01 - okay so now that we know how to index
110:03 - how can we actually change elements in
110:05 - our array
110:06 - well what i'm going to start by doing is
110:07 - just logging the array here and what i'm
110:10 - going to do now is change one of the
110:11 - elements or add an element to our array
110:13 - so what i'm actually going to do is say
110:14 - tim2
110:16 - equals and we'll just say a new
110:19 - element like that so what does this do
110:22 - well essentially what it's going to do
110:24 - is it's going to say okay so the element
110:25 - at
110:25 - index 2 i want to set that equal to new
110:29 - element so it's going to change
110:30 - 4.6 to be new element and now if we
110:33 - refresh here and we have a look at our
110:34 - array before and after
110:36 - we can see i'll just expand this here we
110:38 - get hello five four
110:39 - ten and then we get hello five new
110:41 - element tim so that did indeed
110:43 - change it okay so there's a few more
110:45 - things of arrays that i wanna talk about
110:47 - but we are almost finished
110:48 - now the next thing i wanna talk about is
110:51 - the length
110:52 - property of an array so essentially if
110:54 - you would like to check how long an
110:55 - array is what you can do is simply call
110:57 - this
110:58 - dot length at the end of the array name
111:01 - and that will tell you how many elements
111:02 - are in the array
111:03 - so here we can see we get four now
111:06 - notice this isn't telling us three as
111:07 - the last index is telling us just the
111:09 - count of how many different elements we
111:11 - have
111:11 - and if we had a blank array and we did
111:13 - this we would have
111:15 - a size or a length of zero okay so let's
111:18 - go back
111:18 - now the next one that i want to show you
111:20 - is to remove an element from the end of
111:23 - the array
111:24 - so let's say that we want to remove tim
111:26 - or we want to remove whatever element is
111:27 - at the end
111:28 - a very easy way to do this is to do tim
111:31 - dot pop now what pop does is simply
111:34 - remove
111:35 - and return the last element now i'll
111:37 - show you what i mean by that
111:38 - essentially what i can do is i'll
111:39 - console.log tim.pop and then i will
111:42 - simply console.log tim and i'll show you
111:44 - what the result is from this
111:46 - you can see we get tim here and then we
111:48 - get the list except or sorry the array
111:51 - but we are missing tim at the end
111:52 - so what this pop actually does is remove
111:55 - and returns the last element
111:58 - to inside of this log statement where we
112:00 - print it out
112:01 - and then obviously now tim does no
112:02 - longer have this last element
112:04 - so we will print out the three elements
112:06 - here now the other one that we can use
112:08 - is called push now what push does and
112:10 - this doesn't return anything so
112:12 - actually we'll just type it out here is
112:14 - add an element to the end of the array
112:16 - so rather than removing one it adds it
112:18 - so to push something to the end of the
112:19 - array
112:20 - we could do let's push new element like
112:23 - that
112:23 - let's console log and have a look at
112:25 - this and we can see now we have
112:27 - five elements in our array and we get a
112:29 - new element at the end
112:31 - so that is what push does now i think
112:33 - there's a few more methods we'll go
112:34 - through quickly there's another one
112:35 - called
112:36 - shift now what shift does is simply
112:38 - remove the first element from the array
112:41 - so let's look at this one so if i do
112:43 - shift you can see we remove
112:45 - hello and we have 5 4.6 and tim
112:48 - now i'm just gonna have a look but i
112:49 - think that is pretty much it
112:52 - i'll show you one more this one is
112:54 - simply to sort the array and
112:55 - it is sort like that so tim.sort
112:59 - so what i can do is refresh this and now
113:01 - we can see that we'll actually sort the
113:02 - numbers first and then we will sort the
113:04 - strings
113:05 - now if you want to learn more about how
113:06 - this sort method works with different
113:08 - objects you can look that up on your own
113:09 - time but essentially it's going to sort
113:11 - you know your strings alphabetically
113:12 - your numbers by size
113:14 - and that is pretty much all there is to
113:16 - it so i think with that
113:17 - that is pretty much a raise i'll show
113:19 - you one last thing just in case anyone's
113:21 - curious if you do decide to do something
113:23 - like tim
113:24 - 7 equals five actually let's just do
113:26 - eight
113:27 - and notice that i don't have an index
113:29 - seven in this array
113:31 - what will happen is it will fill all the
113:33 - indexes up to seven with empty elements
113:35 - and then
113:36 - fill index seven with eight so i'll just
113:38 - show you what that looks like so you
113:39 - guys get an idea
113:41 - so you can see here we have hello five
113:43 - four point six
113:44 - tim so tim was index three here this is
113:47 - index
113:47 - seven so we have three empty indexes
113:50 - before that just so that we can actually
113:51 - add this at the correct index just be
113:54 - aware if you do decide to do something
113:55 - like this
113:56 - if it's an index that's out of the range
113:58 - of this array so it's not in the length
114:00 - of the array
114:01 - then what you're going to end up getting
114:02 - is a bunch of empty spaces before
114:04 - this element while loops now this is our
114:07 - first time touching on loops so i will
114:09 - discuss them kind of more in depth and
114:10 - then when we move into the for loops
114:12 - hopefully you should have an idea how
114:14 - those work well what is a
114:16 - while loop well essentially a while loop
114:18 - is a loop
114:19 - that will run while a condition is true
114:22 - and what is a loop well that's just the
114:23 - same thing
114:24 - executing multiple times now this is
114:26 - great because a lot of times in
114:28 - programming we want to do something
114:29 - multiple times in fact sometimes we
114:31 - actually don't know how many times we
114:33 - want to execute something maybe we want
114:35 - to execute the same
114:36 - block of code you know 20 000 times or
114:38 - maybe we want to execute it five times
114:40 - or maybe we want to execute it for you
114:42 - know a set amount that is going to be
114:43 - defined by the user or something like
114:45 - that
114:46 - now rather than having to type this code
114:48 - out hundreds of different times
114:50 - what we would do is use a loop because
114:52 - it's going to be the same thing
114:53 - we're going to run it x amount of times
114:55 - if we know how many times we're going to
114:56 - run it we can just use a loop and that
114:57 - will happen for us
114:58 - now i know you guys are confused but i
115:00 - will show you so essentially what a
115:02 - while loop syntax looks like is well
115:05 - brackets and then the squiggly brackets
115:07 - now inside of these
115:08 - regular brackets here we put a condition
115:11 - now we already talked about conditions
115:13 - but essentially condition is anything
115:15 - that evaluates to true or false
115:17 - so what i'm actually going to do up here
115:19 - is create a variable
115:21 - i'm going to make it called i and i'm
115:22 - going to set it equal to 0.
115:24 - what i'm going to do as my condition is
115:25 - i'm going to say wow
115:27 - i is less than 10. now what this means
115:30 - is
115:31 - we will continue to run whatever code is
115:33 - inside this while loop
115:34 - as long as this condition inside of here
115:37 - is true so as long as i
115:39 - the variable i is less than the value 10
115:41 - we will do whatever is in here
115:43 - now to keep it basic what i'm going to
115:44 - do in here is simply just console.log
115:47 - and i will console.log actually the
115:49 - value of i
115:50 - what i'm going to do here at the bottom
115:52 - is actually add to i
115:53 - and add 1 each time so i forget if i've
115:56 - talked about what this plus plus does
115:57 - but all this does is add
115:59 - 1 to the variable i so what's going to
116:01 - happen is in this while loop we're going
116:02 - to loop while i is less than 10. so on
116:04 - our first loop we will print 0 as
116:06 - i zero we'll add 1 to i well now i is 1
116:10 - is that less than 10 yes it is so we'll
116:12 - print 1 we'll add one to i it'll be two
116:15 - and i think you guys get the point
116:16 - what's going to happen here but i will
116:17 - show you
116:18 - in our console here so let's refresh
116:20 - this oops i need to open
116:22 - tutorial 11 like that
116:25 - uh your file was not found oh it's
116:27 - because i spelt tutorials
116:29 - wrong let's try that there we go okay so
116:32 - now you can see we get 0
116:33 - through 9 printing out to the console
116:35 - and why did it not print 10
116:37 - well because on our loop when i equals 9
116:39 - so let's just say
116:40 - i equals nine like this what happens is
116:43 - we print nine
116:44 - we add one to nine which is ten ten is
116:46 - not less than ten so we do not end up
116:48 - printing out the value of ten
116:49 - and that is the basics as to how a while
116:52 - loop works
116:52 - now obviously you can put different
116:54 - kinds of conditions in here they don't
116:56 - need to be dealing with counters or with
116:58 - i
116:58 - and this is what we call a counter as
117:00 - we're simply adding one to the variable
117:02 - each time
117:02 - and getting up to 10 and doing this you
117:04 - know i is less than 10 times
117:07 - but yeah that is the basics for a while
117:09 - loop
117:10 - now we can use other kind of conditions
117:12 - inside of the while loop as well
117:13 - and we actually don't need to do
117:15 - something like this there's a few
117:16 - different ways we can actually end the
117:18 - while loop so if i decide to do
117:19 - something like while true
117:21 - well what i've done right now is created
117:22 - an infinite loop and the reason this is
117:24 - infinite is because
117:25 - well true is never false so this loop
117:29 - will run
117:29 - infinitely but sometimes the condition
117:32 - you want up here
117:33 - needs to be true it needs to always be
117:34 - true so how can you eventually break out
117:36 - of your loop
117:38 - well to break out of your loop you can
117:39 - actually use the keyword
117:41 - break now what i'm going to do in here
117:43 - is actually set up kind of a strange
117:45 - thing but i'm going to say
117:46 - if i is equal to
117:49 - 10 actually let's make it 5 then what
117:51 - i'm going to do
117:52 - is simply break now what this keyword
117:55 - break does
117:56 - simply breaks out or exits at the
117:59 - current point so wherever this word is
118:00 - found
118:00 - whatever loop it's inside so since it's
118:03 - inside of this while loop
118:04 - we say if i is equal to 5 we will break
118:07 - whatever loop we are inside of which
118:09 - means exit the loop stop running and get
118:11 - out of it
118:12 - now i'll actually show you now
118:13 - console.log
118:16 - break like that so you can see exactly
118:18 - when we exit this loop so what ends up
118:20 - happening is we'll print i and then
118:21 - we'll print break once we exit the loop
118:23 - so let's have a look at this here
118:25 - refresh we get 0 1 2 3 4
118:28 - and then break so that is exactly how
118:31 - this keyword works now it's important
118:33 - that whenever you're designing a while
118:34 - loop
118:35 - you either have this condition so you
118:37 - know that it will eventually be false
118:38 - and you can break out of it
118:40 - or you have a break keyword somewhere in
118:42 - here and you know that you will
118:43 - eventually reach that break keyword
118:45 - because otherwise you're just going to
118:46 - have an infinite loop and i'll show you
118:48 - what happens when you have an infinite
118:49 - loop as it's not fun to usually deal
118:51 - with
118:51 - you can see that it's just printing tons
118:53 - of different values and it's
118:55 - you know eventually it's going to crash
118:56 - just because it's doing so much and you
118:57 - can see the page is just loading
118:59 - and just you don't you know want to deal
119:01 - with that so i mean okay so now that
119:02 - we've shown
119:03 - the basics of a while loop i'm going to
119:04 - show you how we can actually loop
119:06 - through
119:06 - a array using a while because that's
119:08 - kind of one of the most common things
119:10 - that we end up doing
119:12 - or how we could like add to a number or
119:14 - something like that i'll just show you a
119:14 - few different examples so you guys get
119:16 - an idea so i'm just going to create an
119:17 - array i'm going to say var
119:18 - arr equals and in this case we'll just
119:20 - do like
119:21 - tim joe and
119:25 - bill and i'm going to show you how we
119:27 - can loop through this array
119:29 - so essentially what we want to do is we
119:31 - want to loop
119:32 - and print out each element in this array
119:34 - so what i'm going to do
119:35 - to do that is create a counter similar
119:37 - to what i did before i'm going to call
119:38 - it bar i equal to 0.
119:40 - i'm going to say while i is less than in
119:43 - this
119:44 - case the length of the array now the
119:46 - reason this
119:47 - works and we'll see it in a second
119:49 - actually i need to do this we'll just
119:51 - say
119:52 - console.log ar i
119:55 - i plus plus now what is this doing what
119:59 - did i just do
120:00 - well essentially my condition for the
120:02 - while loop is while i
120:03 - is less than the length of the array now
120:06 - what is the length of this array this is
120:07 - 3
120:08 - so that means the values of i will go
120:10 - from 0
120:11 - one to two and they will not hit three
120:14 - so
120:15 - what will end up happening here is when
120:17 - i is zero
120:19 - we will print tim as that is array at
120:21 - index zero
120:22 - then we will print joe then we will
120:24 - print bill as i will have one added to
120:27 - it every time
120:27 - so this is a good example of how we can
120:30 - loop through these different elements
120:31 - because we can actually use a variable
120:33 - which we're doing here as the index to
120:35 - access an element in our array
120:37 - so let's print this out and see what
120:39 - we're getting we get
120:40 - tim joe and bill and that is exactly how
120:44 - this works
120:45 - now what i'm actually going to do is
120:46 - show you how we could construct an array
120:49 - using a very similar thing let's say we
120:51 - have an array
120:52 - and what we want to do is add all of the
120:54 - elements from 0 to say 100 into the
120:56 - array so the numbers 0 to 100 we want to
120:58 - add those in
120:59 - well how would i do that what i can do
121:02 - is i'm just going to change this line
121:04 - and i'm going to change this one here
121:06 - i'm going to set my condition to say
121:08 - while i
121:09 - is less than 101 or i could set it equal
121:12 - to is less than or equal to
121:14 - 100. these pretty much will do the same
121:16 - thing for i
121:17 - i'm going to leave it at this one for
121:18 - now but i just wanted to show you you
121:20 - could do that and now what i'm going to
121:21 - say
121:21 - is array dot push and here i'm going to
121:25 - push
121:25 - i now what this is going to do is add to
121:28 - the
121:29 - end of the array the value i every time
121:32 - this loops and how many times is this
121:34 - going to loop
121:34 - well i hope you would all say 100 as i
121:36 - gets one added to it each loop and this
121:38 - happens while i is less than 100.
121:41 - so i will simply print out the this
121:43 - array app just
121:44 - have a look at it and let's do this
121:48 - and you can see we get our array that
121:50 - goes from 0
121:51 - to and it would be 100 although it is
121:52 - cutting off here you can see
121:54 - it goes to 100. so there you go that is
121:58 - how you
121:58 - create an array okay so now i'm going to
122:01 - talk about what's called a
122:02 - do while loop now these are useful
122:04 - sometimes when you don't know if the
122:06 - while loop is going to run
122:07 - immediately or not now let me just
122:09 - explain a little bit why we would even
122:11 - use one of these
122:12 - now right now if i do while condition
122:15 - and i've just created a variable up at
122:17 - the top called condition or cond
122:19 - which stands for condition and i do you
122:21 - know console.log
122:24 - run when i execute the program this is
122:27 - not going to happen this loop will never
122:28 - run
122:29 - the reason is because the condition is
122:30 - false but sometimes
122:32 - what we want to happen is we want to run
122:34 - this while loop at least once and then
122:36 - continue to run it
122:38 - while this condition is true so we
122:40 - actually don't care what the condition
122:41 - is for the first loop
122:42 - but you know after then we do but right
122:45 - now
122:46 - the way that we have this we'll never
122:48 - run console.log because this condition
122:50 - is false so is there any way that we can
122:52 - run the loop
122:52 - once for sure and then see afterwards if
122:55 - we want to continue running
122:56 - yes there is that's called a do while
122:58 - loop now the basic syntax for a do
123:00 - while loop is simply to put do like that
123:04 - and then put while afterwards with a
123:06 - condition now we're going to put the
123:07 - same condition we had before which is
123:09 - condition
123:10 - except in the do here we put exactly
123:12 - what we want to do
123:13 - while this condition is true so what i'm
123:16 - going to do is say
123:17 - console.log and in this case we'll just
123:19 - say run
123:21 - like that do a little exclamation point
123:24 - now what's going to happen here
123:25 - is regardless of if the condition is
123:28 - true or not
123:29 - this will run once after that we will
123:32 - get down to this while loop
123:34 - we'll see if the condition is true and
123:36 - if it is we'll run this again
123:38 - so based on that logic this should run
123:40 - one time so let's refresh
123:42 - this we get run now if we had changed
123:44 - this to be
123:45 - true or we had the condition being
123:47 - something else then this could continue
123:48 - to run multiple times but i just want to
123:50 - illustrate how that works you can have
123:52 - this due
123:53 - so you know this will happen at least
123:54 - once and then continue to loop in the
123:56 - while loop afterwards
123:57 - assuming that this condition is creating
124:00 - for loops now for loops are the most
124:03 - common type of loops and i would say
124:04 - almost one of the most common types of
124:06 - expressions that you will see in code
124:08 - they're responsible for millions upon
124:10 - millions of different tasks
124:12 - they're fundamental so you really need
124:13 - to make sure you understand them before
124:15 - moving forward into some more complex
124:17 - topics in the language
124:18 - so what is a for loop well a for loop is
124:21 - used when you want to loop a defined
124:23 - amount
124:24 - of times or you know how many times you
124:26 - want to loop so in the previous video we
124:27 - talked about while loops where we looped
124:29 - based on a condition
124:31 - now that condition could change at any
124:33 - point in time if the user could change
124:35 - it it could change from different areas
124:36 - of the code
124:37 - and essentially we don't know how many
124:39 - times we're looping with that condition
124:41 - because it's just whether that condition
124:42 - is true or whether it's false
124:44 - whereas here in our for loop we actually
124:46 - usually know
124:47 - exactly how many times we're going to be
124:49 - going through the loop
124:50 - and i'm going to talk about that now and
124:52 - show you how this works so the basic
124:54 - syntax
124:55 - for a for loop is four you're going to
124:58 - define a variable in here and i'm just
124:59 - going to type it out and then we'll talk
125:00 - about it later
125:01 - we're going to put a condition here and
125:03 - we're going to put an increment step
125:04 - here
125:05 - now i just want to show you guys how
125:06 - this works and i'll explain the entire
125:08 - thing
125:09 - so just maybe you can use some intuition
125:11 - and get an idea of what i'm doing here
125:12 - but i've just done a for loop i've said
125:14 - var
125:14 - i equals 0 i is less than 10 i plus plus
125:17 - console.log i i know this is confusing
125:19 - but let's have a look at this here
125:21 - what we get 0 through 9 printed out to
125:23 - the screen
125:24 - okay so what the heck did i do and how
125:26 - does this work well the first step of a
125:28 - for loop
125:29 - is to define a variable in this case i'm
125:32 - going to call it i
125:32 - you can call it whatever you want and
125:34 - set it equal to an initial
125:36 - value this initial value is going to be
125:38 - the value that you start
125:40 - looping at next we type a condition
125:43 - now this condition is the condition that
125:45 - will be used to run the for loop
125:48 - it must involve the variable here that
125:50 - you used so i have to use i
125:52 - here and then we have an increment so i
125:55 - plus plus and this tells me how much to
125:57 - add to i
125:58 - every time one of these loops
125:59 - successfully completes
126:01 - inside of these curly braces it's what's
126:03 - gonna happen whenever we loop
126:04 - we could of course do multiple things in
126:07 - here like console.log
126:08 - tim right and then if we go here and we
126:11 - refresh we can get tim
126:12 - every other time after all these words
126:14 - but that is the basics to how this works
126:17 - now what i can do is manipulate these
126:20 - numbers
126:21 - so that i can loop a different amount of
126:23 - times or through different numbers
126:25 - so for example rather than adding one
126:27 - each time i could add
126:29 - 2 so this is how much you're adding to i
126:31 - every loop and now watch what happens
126:33 - when i have my numbers i go from 0
126:35 - to 8 but not to 10 because obviously i
126:37 - was less than
126:38 - 10. i could start at a different value i
126:41 - could start at value 5
126:42 - so now we will get five seven nine
126:44 - printing out because we want five and
126:46 - then we added two each time
126:47 - and that is how a for loop works so you
126:50 - just start at some value
126:52 - you're less than some value and then you
126:54 - have i plus equals you know whatever
126:57 - now in here we can do all kinds of
126:59 - different things
127:00 - i can also break out of this loop if i
127:02 - want so i could say something like if i
127:05 - equals equals seven i could break
127:08 - and now what we'll get is or we should
127:11 - get at least is just
127:13 - five seven printing out and we do
127:14 - because we broke when i
127:16 - equaled seven and this break keyword
127:18 - works the same as it does for a while
127:19 - loop it simply breaks out of whatever
127:21 - closest loop we find which is this for
127:23 - loop
127:24 - and yeah so now what i'm going to do is
127:26 - show you guys an example of how we can
127:28 - loop through an
127:29 - array in here and actually see if a
127:31 - specific value exists in the array
127:34 - so what i'm actually going to do is i'm
127:35 - going to create a function what i want
127:37 - this function to do
127:39 - is to look in an array for a certain
127:41 - value and return
127:42 - whether we found that value or not so
127:44 - this will be a little bit of review from
127:46 - functions
127:46 - in case we forgot about them before so
127:48 - i'm going to say function
127:50 - find in array like this
127:53 - i'm going to say arr which stands for my
127:55 - array and i'm going to stay
127:56 - value which stands for what we're
127:58 - looking for now what i'm going to do is
128:00 - write
128:01 - some piece of code that's going to look
128:02 - through the array and tell me if a value
128:05 - exists
128:06 - in it so what i'm going to do is make
128:08 - use a for loop actually
128:10 - and you guys will see how this works
128:11 - here i'm going to say 4 and i
128:13 - equals 0 or sorry not into i i'm coding
128:16 - in java right now
128:17 - say var i equals 0. we'll say i is less
128:20 - than
128:20 - ar dot length and remember ar is going
128:23 - to be an array
128:24 - and then we'll say i plus plus now what
128:26 - i'm going to do in here is i'm going to
128:28 - say
128:28 - if ar i equals equals
128:33 - value return
128:36 - true like that okay if i get spelled
128:40 - true correctly
128:40 - and at the end of this loop i'm going to
128:42 - return false and we're going to run
128:43 - through how this works
128:45 - okay so what have i done here well i've
128:48 - essentially created a for loop
128:49 - that's going to look through every
128:51 - element in the array that i pass in
128:52 - because it's going to go from 0
128:54 - to whatever the length of the array is
128:56 - and we're going to check some value
128:58 - every time inside of this loop
128:59 - so what i'm going to do is say if the
129:02 - value at array whatever
129:03 - index i'm at is equal to the value we're
129:05 - looking for return true because that
129:07 - means we found the value so we can
129:09 - simply return true
129:10 - and by doing this that will
129:11 - automatically break out of this for loop
129:13 - so we won't continue to loop anymore
129:15 - we'll just return to wherever we were
129:16 - called from now
129:18 - let's say we loop through all the
129:19 - elements in the array and we don't find
129:21 - the element
129:22 - well we'll step out of that loop we'll
129:24 - start moving down
129:25 - we'll read this return false and then
129:27 - we'll simply return false because that
129:28 - means we did not
129:30 - find the element we were looking for so
129:32 - let's actually call this function and
129:33 - see if this works so what i'm going to
129:34 - do is i'm going to say
129:35 - var arr equals and in this case we'll
129:38 - say 1
129:39 - 2 5 6 7 maybe we'll throw a tim in there
129:42 - we could throw
129:44 - a true why not now what i'm going to do
129:48 - is simply say console.log and we'll do
129:51 - the name of the
129:52 - function here so find an array and then
129:54 - what i'm going to do is pass the array
129:56 - and what is the value that i want to
129:57 - look for well actually let's look if
129:59 - five
129:59 - exists in the array so the output here
130:02 - should be a true or it should be a false
130:04 - and let's have a look at our console
130:05 - here we refresh we get true
130:07 - as we did find five in the array now
130:10 - what if i do
130:11 - tim three is that in the array well
130:14 - let's look here
130:15 - no we get the value false so that's just
130:17 - a very basic example of what you can do
130:20 - with a for loop it's very powerful you
130:22 - can do lots of different things
130:24 - now i will show you some embedded for
130:26 - loops and i'm going to talk about
130:28 - four of either in this video or the next
130:30 - one but let's leave that function up
130:31 - here for now
130:33 - and what i want to do is i actually want
130:35 - to make another function and i'm going
130:36 - to call it
130:39 - n squared let's like this okay
130:42 - n squared now in here what i'm going to
130:45 - do is take some value n
130:46 - and what i want this function to do is
130:49 - print out
130:49 - the value n but squared so whatever n is
130:53 - i want to print out
130:54 - that like amount of times squared now
130:57 - i know this is confusing but you guys
130:58 - will understand what i mean in a second
131:00 - so what i'm going to do is i'm going to
131:00 - set up a for loop
131:02 - and inside here i'm actually going to
131:03 - say var
131:05 - i equals 0 i is less than
131:08 - and in this case n and then we'll say i
131:11 - plus plus
131:12 - now what i'm going to do in here is make
131:14 - another loop and i'm going to say 4
131:17 - var j equals 0 and i'm going to say
131:21 - in this case we'll say j is less than n
131:23 - and then
131:24 - j plus plus and then what i'm going to
131:27 - do in here is say console.log
131:30 - and we'll simply print i don't know
131:32 - we'll just print run
131:34 - okay so what i wanted this to do was
131:37 - simply have
131:38 - something printing out to the screen n
131:40 - squared amount of times
131:42 - now how do we do that so this is n we
131:45 - want to print some value
131:46 - n squared amount of times well what i
131:47 - could have done is the exponent so i
131:49 - could have done
131:50 - n and then to the exponent 2 which i
131:52 - think i showed in previous videos how to
131:53 - do
131:54 - but i want to explain why this will
131:56 - actually print the value run
131:57 - n squared amount of times and for those
131:59 - of you that are unfamiliar
132:01 - n squared is simply n times n right
132:04 - so it's n times n two times which is
132:07 - that okay
132:08 - so how does this work well we have this
132:09 - first for loop that runs from i equals
132:12 - zero
132:12 - to n which means it's going to run
132:13 - actually n times i know people like well
132:15 - why do you have it less than n well
132:17 - because since we start at zero we go
132:19 - up to n but don't include n so that will
132:21 - actually be
132:22 - n amount of times that we will loop and
132:24 - then inside of this for loop
132:26 - we have another for loop that starts j
132:29 - equals 0 and goes j less than n which
132:32 - means this is going to run
132:33 - n times so if this is running n times
132:36 - and this is running n times and this
132:39 - runs
132:39 - every time one of these runs well this
132:42 - actually gives us the value of
132:44 - n squared because what's going to happen
132:46 - is this is going to be on
132:48 - loop 0 this is going to run already n
132:50 - times right
132:51 - then this is going to be on n uh what is
132:54 - it i equals
132:55 - 1 so now we're going to have n plus n
132:57 - and then plus
132:58 - n and then plus n and we're going to
133:00 - keep doing that n
133:01 - times right and that's how many times
133:02 - this is going to loop now if you're
133:04 - confused by this
133:05 - just ignore it it's not that big of a
133:06 - deal but i just want to show you guys
133:07 - some different things that we could use
133:10 - so now what i'm going to do is n squared
133:12 - i'm just going to put 5 in there now you
133:13 - guys should know that that value is 25
133:15 - so 5 times 5
133:16 - let's refresh this you can see that it
133:18 - printed 25 or run
133:20 - 25 times now if i put a value like 3 in
133:24 - here
133:24 - obviously we should get 9 and you can
133:26 - see we're getting 9
133:27 - there so these are my kind of two
133:29 - examples with for loops
133:31 - i'm actually going to stick the uh or
133:33 - stay with the four of loops for the next
133:35 - video so we'll talk about those there
133:37 - but hopefully this gives you an idea how
133:38 - you can use for loops again
133:40 - you have a variable you can start it
133:42 - wherever you want you have a condition
133:44 - this is what you're going to loop until
133:45 - and then you have an increment so what
133:47 - you're adding
133:48 - to this counter variable here you can
133:50 - obviously put for loops inside of for
133:52 - loops if you want to that's what we've
133:53 - done here
133:54 - and you know a really great way to loop
133:56 - through elements is to use a for loop
133:57 - and if you want to check if something
133:58 - exists then you could do something like
133:59 - this
134:00 - check it against a value and you know
134:01 - put it in a function return true all of
134:03 - that
134:04 - for each loops or four of loops now
134:07 - essentially this is a way to iterate
134:09 - by element or by item rather than by
134:12 - index now if you don't know what that
134:14 - means that's totally fine
134:15 - i'm just going to start with a very
134:16 - basic example showing how we iterated
134:19 - through
134:19 - a array in the previous videos so in the
134:22 - last video we did something like you
134:23 - know
134:24 - var ar equals and then we had an array
134:27 - and maybe we had something like tim
134:30 - and joe and bill and when we wanted to
134:33 - print out all of the elements in this
134:35 - array
134:36 - well what did we do we made a for loop
134:37 - and we said 4
134:39 - var i equals zero i is less than a r dot
134:43 - length
134:44 - and then we said i plus plus and then
134:46 - what we did here is we simply
134:48 - console.log error at index i
134:52 - now we know that works we showed that in
134:54 - the previous video but is there an
134:56 - easier way to do this because
134:58 - essentially the only reason we have this
135:00 - i counter here is so that we can access
135:02 - the elements of the array
135:04 - right by going up one index each time
135:07 - well if i don't care about this counter
135:09 - variable i
135:10 - i don't really care if it's 1 i don't
135:12 - care if it's 2 i just want to get the
135:13 - elements
135:14 - there's actually a better and easier way
135:15 - to do this and that is called a 4
135:17 - of loop now what i can actually do is
135:19 - say 4
135:20 - and in this case i'm going to say let
135:23 - and we'll just do
135:24 - element of
135:27 - error now i know this seems like a
135:29 - strange
135:30 - kind of statement here but essentially
135:33 - what this means is we're going to take
135:35 - elements from or of the array
135:38 - now what this is going to do is loop
135:40 - through each element
135:42 - in our array and every loop make this
135:44 - variable
135:45 - element equal to that element now i know
135:48 - this is confusing because i've used the
135:49 - word element
135:50 - but let me just illustrate to you what
135:52 - this does so i'm just going to
135:54 - comment out this like that and we'll
135:57 - leave this one here
135:58 - and let's just go to our console and
136:00 - have a look here and you see we get
136:02 - tim joe and bill now what happens here
136:05 - is in our first loop
136:06 - we set the element variable element
136:09 - equal to
136:10 - tim in our second loop we set it equal
136:12 - to joe
136:13 - and then we set it equal to bill and
136:16 - this means that we no longer have to do
136:18 - this thing where we get the length of
136:19 - the array we increment a counter we set
136:22 - the counter to zero we do the index at i
136:24 - it's just a lot cleaner and easier when
136:26 - all you want to do is access the element
136:29 - and that is pretty much how you use this
136:32 - um
136:32 - you know of array now i will show you
136:34 - here that this says
136:36 - let right but we can make this nothing
136:39 - so if we make this nothing that that's
136:40 - fine we can do that
136:41 - but the reason we might want to specify
136:43 - for example like const or
136:45 - or let here or var is whether we're
136:48 - going to change this value or not and i
136:50 - want to show you how this works so i'm
136:51 - going to say
136:52 - let element of arr but what i'm going to
136:55 - do
136:55 - is print out the element then i'm going
136:58 - to change the element so i'm going to
136:59 - say
136:59 - element equals 5 and i'll print the
137:02 - element
137:03 - again and what i'm going to do is
137:05 - actually print the array before
137:07 - and after we do this and this is kind of
137:09 - a challenge for you guys so what i'm
137:10 - going to do is
137:11 - console.log the array and i'll log it at
137:14 - the beginning too
137:15 - so what i'm going to do is print the
137:17 - array i'm going to loop through all the
137:18 - elements in the array so tim
137:20 - joe and bill i'm going to start by
137:22 - printing out that element
137:23 - then what i'm going to do is change the
137:25 - element so i'm going to change it to 5
137:26 - i'm going to print it again and then i'm
137:28 - going to print the array afterwards and
137:30 - my question to you
137:31 - is is the array before going to be the
137:34 - same as after because well
137:35 - element is one of the elements from the
137:37 - array so if i change it in here
137:40 - does it actually change the value here
137:42 - or not that's what we're looking for
137:44 - so let's save this and let's run this
137:47 - and let's have a look
137:48 - and no it does not it does not change so
137:51 - we get tim
137:52 - five joe five bill five and we can see
137:55 - the array is the same as before
137:57 - now the reason this happened is because
137:58 - we defined a new
138:00 - variable which actually stored this
138:02 - specific object
138:04 - inside of it and then when we change
138:05 - that all we're doing is changing the
138:07 - variable element we're not actually
138:08 - changing the original list
138:10 - now that's worth noting that's very
138:12 - important so make sure you understand
138:14 - that concept because now i'm going to do
138:15 - the same thing except not with a for
138:17 - of loop i'm going to do it with this
138:19 - regular for loop and show you
138:21 - so let's get rid of all this and
138:23 - remember it's just let
138:24 - or const or whatever you want element of
138:27 - arr
138:28 - if you don't think you're going to be
138:29 - changing this element here so whatever
138:31 - this is you can make this
138:32 - a const and that simply means that you
138:34 - can't change it where it won't change
138:36 - it doesn't really matter that's for more
138:38 - advanced use typically you're not going
138:39 - to have to deal with that but anyways
138:40 - let's do another example now
138:42 - so keep in mind what i just showed you
138:44 - while we do this
138:45 - now what i'm going to do is print ari
138:48 - okay but now what i'm going to do
138:49 - is change this element to equal to 5
138:53 - and then print it again so i'm
138:54 - essentially doing the same thing i did
138:56 - in the other loop
138:57 - except we're just using a different way
138:59 - of looping through the elements and then
139:02 - what i'm going to do is print error
139:05 - and i'll print it beforehand like this
139:08 - so this code
139:08 - is almost identical to what i just had
139:11 - below
139:12 - except rather than iterating by element
139:15 - which is what we were doing before when
139:16 - we did
139:16 - of array we're iterating by index right
139:20 - so we're using the indexes of the array
139:22 - to access the elements
139:24 - so what happens now if i change arr i
139:27 - to 5 does that actually change this
139:30 - array or does it just change some local
139:32 - variable inside of this for loop
139:34 - well hopefully you guys know the answer
139:36 - to this but let's just run it and have a
139:38 - look here
139:38 - and notice that the array after has
139:41 - changed to all
139:42 - fives it's not the same as the array
139:44 - before now the reason for this
139:47 - is we are not storing these values in a
139:49 - variable when we're accessing them and
139:51 - changing them
139:52 - we're actually getting them directly
139:54 - from the array so if i say something
139:56 - like you know array 2
139:57 - equals 5 well that's obviously going to
139:59 - change the actual array right we're not
140:01 - just going to change a temporary
140:02 - variable that we've had inside the loop
140:04 - like we did below so it's very important
140:07 - that's worth noting and you know based
140:08 - on what you're going to be doing if
140:10 - you're going to be manipulating the
140:11 - array
140:11 - you may want to do it like this right
140:13 - you can't loop through the elements of
140:15 - the array
140:16 - if you're going to be manipulating it
140:17 - because you don't have access to
140:19 - actually
140:19 - change the values right now that is
140:22 - pretty much it
140:23 - for the four of i will show you that you
140:25 - can do it through strings as well
140:27 - so if i say like var x equals
140:30 - hello what i can actually do is say 4
140:32 - and we'll say
140:33 - letter of x and then what i can do is
140:37 - just say
140:38 - console.log letter like that let's have
140:41 - a
140:42 - look here so there we go we get hello
140:45 - printing it out like that so just
140:46 - showing that you can actually iterate
140:48 - through a string i believe you can also
140:50 - index a string so we'll do an example
140:52 - with that
140:53 - in case i hadn't shown it before so
140:54 - we'll say int i'm sorry
140:56 - var i equals zero i is less than
140:59 - and in this case x dot length
141:03 - i plus plus i think we need to not have
141:06 - a space there
141:07 - and then console.log
141:11 - x at i let's see what we get here when
141:14 - we run it we get the exact same thing
141:16 - yeah so you can actually iterate through
141:18 - a string a string is iterable
141:20 - and by the way i know i've said this
141:21 - word iterating that simply means looping
141:23 - through or you know looping through all
141:25 - the elements right
141:26 - sets now sets are another data type in
141:28 - javascript i've left them until now
141:30 - because they are a little bit more
141:31 - advanced and i want to show the
141:32 - difference between
141:33 - sets and arrays now what is a set well
141:36 - essentially a set
141:38 - is an unordered collection of unique
141:40 - elements
141:41 - now collection just like array means it
141:43 - holds multiple elements
141:44 - unordered means we don't keep track of
141:46 - the order of the elements so that we
141:48 - kind of do and i'll talk about that in a
141:50 - second
141:50 - and then unique means that no elements
141:52 - can exist more than once
141:54 - so recall when we created an array so i
141:56 - said like var ar
141:57 - equals and then we made an array and we
141:58 - did something like you know two three
142:00 - four whatever right
142:01 - these elements i could have multiple of
142:04 - the same
142:04 - and that was totally fine and we keep
142:06 - track of the order in which our elements
142:08 - occur we can index these so i can access
142:10 - element zero i could access element four
142:13 - you know what i mean or element five
142:14 - whatever i want
142:15 - and that's an important property of
142:17 - arrays is that we understand the order
142:19 - and we can access each element
142:20 - individually
142:21 - now sets are a little bit different so
142:23 - what i'm going to do is just call this
142:24 - underscore set because says a keyword
142:27 - what i'm going to do is create a new set
142:29 - now with a set
142:31 - we cannot actually index elements
142:33 - directly
142:34 - all we can do is see if elements exist
142:36 - in the set we can delete elements and we
142:38 - can add elements from the set there's a
142:40 - few other operations which i'll talk
142:41 - about
142:41 - but there's no way to look at every
142:44 - individual element in the set and see
142:46 - you know like index zero index one
142:49 - there's no way to do that with the sets
142:50 - unless you do some special
142:52 - stuff which isn't really that important
142:53 - so anyways that is kind of what a set
142:56 - is and i'm going to show you because i
142:57 - know some of you guys are confused that
142:58 - it is hard to kind of explain this
143:00 - so what i'm going to do is add a few
143:01 - elements to my set now i'm actually
143:04 - allowed to
143:04 - chain these add methods together like
143:07 - this it's just a property of the set
143:09 - this works because
143:10 - when this add method is called it
143:12 - actually just returns the original set
143:14 - which allows me to just do this chain if
143:16 - you don't understand that that's fine
143:17 - but if i want to add elements what i can
143:19 - do is do something like set dot add so
143:20 - now i have three i can add five
143:23 - i can add the element seven and now what
143:24 - i'm going to do is actually add the same
143:26 - element three again because i want to
143:27 - show you what this set looks like
143:29 - so keep in mind that a set is an
143:31 - unordered collection of unique elements
143:33 - now try to remember like based off that
143:36 - definition
143:36 - what are we going to get when i print
143:38 - out this set let's have a look at it
143:40 - here let's refresh
143:41 - we get 3 5 and 7. and notice that
143:44 - although i've added three
143:46 - twice three only exists in the set once
143:48 - that is because
143:49 - again these are unique so you can add
143:51 - the same element multiple times into the
143:53 - set if you want but it's only going to
143:55 - exist there
143:55 - once and the reason for this is because
143:57 - when we use sets we only care if
143:59 - elements
144:00 - exist we don't care how many elements
144:02 - are the frequency of elements
144:04 - so what i'm going to do now is actually
144:05 - have a look at the has method for a set
144:08 - so dot has
144:09 - which tells me if the set has a specific
144:11 - element in it
144:12 - so in this case if i do set dot has2 you
144:15 - can guess what the result's going to be
144:17 - here
144:17 - which is false if i do set dot has let's
144:20 - say 5 an element that does exist in our
144:22 - set and we refresh
144:23 - we get the value true now the massive
144:26 - advantage of this
144:28 - is that sets actually have what's called
144:30 - an 01
144:31 - lookup time now i'm not going to go into
144:33 - time complexities which some of you
144:34 - might have heard of before
144:35 - but what that means is sets are pretty
144:37 - much instant to determine if any item
144:39 - exists
144:39 - in them now you might be like okay well
144:41 - that's the same as arrays right well let
144:43 - me explain to you how we look up items
144:45 - in arrays
144:45 - versus sets and the difference between
144:47 - the two because you do need to
144:48 - understand this
144:49 - so you can understand when you would
144:50 - even want to use a set so if we have an
144:52 - array
144:52 - and i'll put the same elements in it so
144:54 - 3 5 7
144:56 - if i want to look to see if some element
144:58 - exists in the set let's say the element
145:00 - you know negative 5 or something like
145:02 - that
145:02 - or sorry not the set in the array what i
145:04 - need to do is i need to actually
145:06 - look through every single element in my
145:08 - array and check if
145:10 - those elements are equal to what i'm
145:11 - looking for that's
145:13 - you know the basic principle of an array
145:14 - we have all these different elements we
145:16 - could have multiple of the same elements
145:17 - if i want to find if something exists
145:19 - however though i could potentially have
145:21 - to look through every single item in the
145:23 - array
145:24 - to find it now obviously if an item
145:26 - exists so say three when i reach that
145:28 - item
145:28 - i can determine that i found it but if
145:30 - the item doesn't exist like negative
145:32 - five
145:32 - i have to look through every single
145:34 - element to determine if it's there or
145:36 - not
145:36 - now in an array of size three this is
145:38 - totally fine it's not doesn't take very
145:40 - long computationally to determine
145:42 - you know out of three elements if an
145:44 - element exists but imagine we had an
145:46 - array that had
145:47 - 10 000 elements inside of it well now
145:49 - what if i'm doing
145:50 - constant lookups on this array and you
145:52 - know every loop per se maybe i'm in a
145:54 - for loop
145:55 - i'm checking whether a certain element
145:56 - exists well this is obviously going to
145:58 - take a very long time i need to loop
146:00 - through the entire array
146:01 - and that is just not very efficient to
146:03 - continually do when all i really care
146:05 - about is if an element exists
146:07 - so this is where we use a set it doesn't
146:09 - matter how many elements are inside of a
146:11 - set
146:12 - it will maintain an average lookup time
146:14 - which is called 01 which is constant
146:16 - time which essentially means it doesn't
146:17 - matter how big this set gets
146:19 - it will continue to take the same amount
146:20 - of time which is a very very small
146:22 - fraction of time
146:23 - to determine if an element is inside of
146:25 - it so that is kind of where
146:27 - sets are useful and why you'd want to
146:28 - use them typically when you're solving
146:30 - programming problems and doing stuff
146:32 - like that sets are very nice data
146:33 - structure
146:34 - to have and to be able to use or data
146:36 - type whatever you want to call
146:38 - so let's go through a few other methods
146:39 - of the set now hopefully you understand
146:40 - a little bit about why we might want to
146:42 - use it
146:42 - so another method we have for seth i'm
146:45 - just going to look at my thing here it's
146:46 - actually a method it's just the
146:47 - attribute is the size
146:49 - so just like arrays and the other ones
146:50 - that we've looked at we can check the
146:52 - size
146:52 - so let's do a refresh here we get a size
146:55 - of three so pretty straightforward there
146:57 - we can also delete elements
146:59 - so i can delete say element five let's
147:01 - actually have a look at what this dot
147:03 - delete method returns by refreshing this
147:05 - for us
147:07 - um returns true which means this element
147:09 - did exist inside of the set
147:11 - so when we deleted it we got that true
147:13 - value now let me just console.log the
147:15 - set afterwards you can see the
147:16 - difference when i delete that element
147:18 - so let's look at this here refresh we
147:21 - get set
147:21 - three seven we've removed five from that
147:24 - and now
147:25 - what i'm gonna do is actually set dot
147:27 - delete five
147:29 - let's see what happens when we delete an
147:31 - element that doesn't exist in the set so
147:33 - let's try delete five again
147:35 - so we delete five up here remember it
147:37 - exists in the set in this instance and
147:39 - then down here when we delete five it
147:41 - doesn't exist because we just removed it
147:43 - so what do we get as the output from
147:44 - that method well we get false because
147:46 - that means when we tried to delete five
147:48 - it didn't exist
147:49 - inside of the set okay so those are the
147:51 - basic properties
147:53 - of the set another one that we can use
147:55 - is dot values this one's kind of useful
147:58 - what this will do is return to us all of
148:00 - the values inside of the set
148:02 - in the order in which they were inserted
148:04 - so we get 3
148:05 - 5 7 that should be our output there and
148:07 - that should give it to us in an array
148:09 - let's have a look oh sorry that's
148:10 - actually a set iterator which i'm not
148:12 - really going to go into
148:14 - so much but you can see the different
148:15 - values three five and seven
148:18 - and that is giving it to us in order in
148:20 - which it was inserted
148:21 - now the reason i said that sets have an
148:24 - unordered collection is because
148:27 - technically if i did something like dot
148:29 - add three
148:30 - like this our set still only looks like
148:34 - three
148:34 - five seven even though i've added three
148:37 - at the end and i've added three at the
148:38 - beginning and at the second position
148:40 - we only have three five seven so
148:42 - although this does keep track of the
148:43 - order in which it's seen elements it
148:45 - keeps track of the order in which it saw
148:47 - the first element that was inserted into
148:49 - the set
148:50 - if you're confused by that it's fine you
148:52 - don't really have to worry about that
148:53 - too much i just want to explain why i
148:55 - said unordered yet some of you might
148:56 - consider this to be an
148:58 - ordered collection okay so now let me
149:00 - just show you using a for loop to
149:02 - iterate through all the elements in a
149:03 - set so this is pretty straightforward
149:05 - what we're going to do is say 4 and
149:07 - we'll just say var i don't know
149:09 - entry and then of in this case we're
149:11 - going to say underscore set
149:13 - dot values it's important we add this
149:16 - and this is going to give us what's
149:18 - called an iterator object
149:20 - which will actually allow us to just
149:21 - look through the different values so now
149:23 - we can just console.log in here
149:25 - i guess oops in console.log
149:28 - entry so let's have a look at this if we
149:31 - refresh
149:32 - we get three five seven that is how we
149:35 - iterate through the different values of
149:36 - a set
149:37 - okay so i've just cleared some of this
149:38 - code and what i'm going to do now is
149:40 - talk about the set constructor which is
149:41 - something i kind of skimmed over at the
149:43 - beginning
149:43 - so obviously to create a new set what
149:45 - we've done is just typed new set
149:47 - but what we can do is actually give some
149:49 - arguments to what we call the set
149:50 - constructor which is this aspect right
149:52 - here
149:52 - that will create a new set for us now
149:55 - what i can do
149:56 - is actually fill in some things in here
149:58 - i can actually put what's called an
149:59 - iterable object so for our purposes
150:01 - that's going to be an array or a string
150:03 - for right now
150:04 - and it will create a set using those
150:05 - items so if i decide to do an array
150:07 - maybe that looks something like this
150:10 - well let's just have a look at this when
150:12 - i
150:13 - create the set so console.log set one
150:15 - let's have a look at what this is
150:16 - refresh
150:17 - we get set for one three four five so
150:20 - it's taken all these elements converted
150:22 - them into a set
150:23 - and that is what we get now i can also
150:25 - put a string in here so i can do
150:27 - something like hello
150:28 - and if we have a look at set one again
150:30 - remember i change the name there we get
150:31 - h-e-l-o
150:32 - again what we've done is we've separated
150:34 - all of the letters added them all into
150:36 - the set
150:36 - since l existed twice we only get it
150:38 - once because that is the property of a
150:40 - set
150:41 - now in terms of some other set
150:42 - operations there is set operations like
150:45 - union difference and those kind of
150:47 - things in
150:48 - other languages but i could be incorrect
150:50 - as i'm just learning javascript but i've
150:52 - tried to use for example the
150:53 - union method and this does not work i
150:56 - believe you actually have to implement
150:57 - these methods
150:58 - manually which is not that difficult
151:00 - where union simply means for anyone
151:02 - confused
151:02 - combine two sets together that's what
151:05 - union means but i don't think they
151:06 - actually have a built-in method for that
151:09 - which is kind of annoying but that's
151:10 - fine we can deal with it now we'll show
151:12 - you one cool method that the sets do
151:14 - have but it's going to involve me
151:16 - creating a function first so let's do
151:17 - that so let's say function
151:19 - um test like this and all we're going to
151:22 - do is actually let's put an
151:24 - x in here it's just a console.log
151:28 - x now we're going to use this function
151:31 - from what's called the for each method
151:33 - of our set now this is kind of cool
151:35 - we'll talk about how this works
151:36 - so set for each and then what i can
151:39 - actually do is just put the name of the
151:40 - function in here
151:42 - now what this is going to do is for each
151:44 - element in my set
151:46 - call this function on it and pass the
151:49 - value of that into this function so
151:51 - we're actually going to print
151:52 - every value of our set or everything in
151:55 - our set
151:56 - um just by using this so let's have a
151:58 - look at this here refresh
152:00 - uh what is happening here let's one
152:03 - second
152:03 - refresh uh set is not defined at oh
152:06 - sorry this needs to be set one my
152:08 - apologies let's refresh this one more
152:09 - time
152:10 - and we get h-e-l-o so in my opinion that
152:14 - is
152:14 - pretty cool what's happening is we can
152:16 - pick some function and we will apply
152:19 - all the operations on each element from
152:21 - our set you know
152:22 - using this function right so we're just
152:23 - going to call this function on every
152:24 - element from our set
152:25 - in this case we're just console.logging
152:27 - but we could obviously do some more
152:29 - advanced things
152:30 - like we could check if this was a
152:31 - certain item i could say if
152:33 - x equals equals let's just say um
152:36 - the letter l then we will simply
152:40 - uh console oops console.log
152:46 - found it and then we'll otherwise just
152:48 - say else
152:50 - console.log nope
152:54 - okay so let's have a look at this now
152:56 - and see what we get so
152:57 - refresh we get nope twice found it and
153:00 - then nope so you get the idea we can
153:02 - create whatever we want we can use this
153:03 - for each which is very useful and then
153:05 - apply this function to every element
153:07 - inside of our settings maps now maps are
153:10 - kind of
153:11 - a mixture of sets and arrays now it's
153:14 - not really the best way to describe them
153:15 - but you'll understand them as we get
153:16 - through
153:16 - but they have the same property as a set
153:18 - where we can actually look up
153:20 - items and see if items exist in what's
153:22 - called constant time
153:24 - now in case i didn't make this clear
153:26 - enough in the last video adding items
153:28 - and deleting items from a set also
153:30 - happens in constant time
153:31 - now i just want to say this because it's
153:33 - the same as maps
153:34 - when you have an array right we have an
153:36 - array and we look something like this
153:37 - and we want to add an element say to the
153:39 - beginning of this array
153:41 - well this actually takes what's called o
153:44 - n
153:44 - time and i don't want to get into space
153:45 - time complexity with you guys
153:47 - but essentially the more elements you
153:48 - have in an array the longer it takes to
153:50 - potentially delete one
153:52 - or add one and especially to find if one
153:54 - exists
153:55 - the only real benefit of an array for us
153:57 - is the fact that we can keep track of
153:59 - the order in which elements exist and we
154:01 - can access them directly
154:02 - by using that index right ray zero array
154:05 - one ray two
154:06 - whatever right that's kind of the
154:07 - advantage the reason we use an array
154:09 - and for most problems that's fine but
154:12 - there's a lot of instances in which we
154:13 - actually want a faster kind of structure
154:16 - that will allow us to add delete and
154:17 - look up items in constant time but we
154:19 - can't
154:20 - necessarily access them with indexes and
154:23 - know the order in which they were
154:24 - inserted right and we also can't keep
154:26 - track of the frequency
154:28 - whereas in an array obviously we can
154:30 - have the same element more than once
154:32 - okay so that's my little feel here now
154:33 - what i'm going to do is start talking
154:34 - about maps
154:35 - so let's create a map we'll just call
154:37 - this mp equals
154:39 - new map now what is a map
154:42 - well a map is similar to a set but what
154:44 - it holds is what are called
154:45 - key value pairs now this is kind of what
154:48 - i mean
154:49 - we have a key maybe this key is
154:50 - something like high
154:52 - and this maps to some value maybe in
154:55 - this instance we say
154:56 - 6. so we have some arbitrary key can be
154:58 - called whatever we want
155:00 - mapping to some value now this is very
155:02 - useful for a lot of different tasks i'm
155:04 - going to show a good example in a second
155:06 - of how we actually
155:06 - use this but the whole point of this is
155:09 - that this key value is what we use to
155:11 - access
155:12 - different uh or this key yeah this key
155:14 - is what we use to access different
155:16 - values
155:16 - and obviously we have you know more than
155:18 - one key so i'd have another key like
155:20 - this i could have maybe the key
155:21 - apple and that corresponds to the value
155:23 - seven and obviously
155:24 - our keys can be different too we could
155:26 - have a key that's actually numeric which
155:27 - is eight and that could map to maybe the
155:29 - string
155:30 - tim right so this is the way that a a
155:33 - map
155:33 - works we have a key that maps to some
155:37 - value and you'll see why this is useful
155:38 - in just a second
155:39 - and again same properties here to look
155:41 - up any key
155:43 - is going to be instant time so you can
155:44 - think of it as instantaneous versus an
155:46 - array that's much slower
155:48 - and to grab that value is going to be
155:49 - the same so to add delete or lookup
155:51 - is going to happen very quickly that's
155:53 - why we use a map
155:54 - so let's start talking about some map
155:56 - operations i'm going to first talk about
155:58 - the constructor
155:59 - so right now what i've done is created
156:00 - what's called an empty map although i
156:02 - can
156:02 - actually add some values in this
156:04 - constructor to start off with some kind
156:06 - of initialized values so to do this what
156:09 - you actually need to do
156:10 - if you want to start start with some
156:11 - keys in here is create an
156:13 - array of arrays of keys and values now i
156:17 - know this seems strange so actually
156:18 - let's
156:18 - separate this um like this so you can
156:21 - get a better idea of how this looks
156:24 - okay and like
156:27 - that okay so what i'm done is i've had
156:29 - this initial array and then i have two
156:31 - arrays inside of here and what i'm going
156:32 - to do in these arrays is put
156:34 - a key and then a value so my first key
156:36 - i'm just going to say is t
156:37 - and this will point to let's say the
156:38 - value 5 and then let's have a key
156:40 - v and maybe this points to the value 8.
156:43 - so we've started off our map
156:44 - with these different key values let me
156:46 - just put this up here because that's
156:47 - going to be annoying okay
156:49 - so now how do we access these keys how
156:51 - do we create new keys how do we do all
156:53 - this
156:53 - well to get a key what we use is called
156:56 - get now i'm just going to console.log
156:59 - this so we can see so i'm going to
157:01 - console.log
157:02 - mp which is obviously standing for map
157:04 - and what i do in here is i put the key
157:06 - that i want to access
157:07 - now what this is going to do is return
157:09 - to me the value associated with the key
157:11 - so if i put for example
157:13 - t here and we go and we refresh this you
157:15 - can see that we get the value 5 printed
157:17 - out because this method returned to us
157:19 - 5. now if i put v and i refresh this
157:23 - here
157:23 - we get 8 and hopefully you're
157:25 - understanding and getting the point
157:27 - that is how this works now let's show
157:29 - how we can actually add things to our
157:31 - map
157:32 - so to add something to our map what we
157:34 - do is mp.set
157:36 - and we simply put in here a key and a
157:38 - value
157:39 - so i'm actually going to do this a
157:41 - little bit weird just to kind of confuse
157:42 - you guys a bit
157:44 - i'm going to actually set the key t to
157:46 - the value 9.
157:48 - now what do you think this does remember
157:50 - maps are very similar to sets
157:52 - do we think this adds another key called
157:54 - t that has the value 9
157:56 - or does it override the existing key and
157:58 - change that value well let's see
158:00 - here if we try to get the value of t
158:02 - let's see what value we're actually
158:04 - going to get well we're going to get
158:05 - 9. that's because if you set a key that
158:08 - already exists essentially what you do
158:09 - is just completely override this and
158:11 - change the value to whatever it is you
158:13 - put here
158:14 - now obviously i can add some other ones
158:15 - so i can mp.set you know like h
158:18 - i honestly let's actually just set like
158:20 - three equal to
158:22 - hello now you see if we get the key
158:25 - three from our map we get the value
158:28 - hello and let's try to get a key that
158:30 - doesn't exist from our map and see what
158:31 - we're getting there
158:33 - do a refresh undefined obviously there's
158:35 - nothing in the map that's going to give
158:36 - us that value
158:38 - so those are the two basic operations
158:40 - for maps we have set
158:42 - and we have get now obviously we can
158:44 - look at the size of our map just like
158:46 - almost everything in javascript
158:48 - so if we do this we get we have three
158:50 - keys so three key value pairs
158:51 - in our map because we've added this
158:53 - three hello
158:55 - and that is the basic principle now to
158:57 - delete keys is very easy as well we're
158:59 - just going to do mp
159:01 - dot delete we could delete the value or
159:04 - the key
159:05 - t and we should see that our size
159:06 - changes from 2 to 1 so let's have a look
159:09 - at that
159:09 - and now we get the value 1 because we
159:11 - deleted t what happens if we try to
159:13 - delete a key that doesn't exist for
159:14 - example the string
159:15 - 6 well we still have a size of 2
159:19 - and with no errors that's fine we just
159:21 - didn't end up deleting that key
159:23 - all right so the next one that i want to
159:24 - talk about is has
159:26 - now has simply is a boolean value that
159:29 - tells us if the map
159:30 - has a specific key so very similar to
159:33 - set and this runs in the same kind of
159:35 - time as it does for a set so i say
159:38 - mp.has and i put the value t
159:40 - like this and we print out our answer
159:43 - obviously that is
159:44 - true and then if we do something like
159:46 - you know 6
159:47 - here so let's refresh this then we get
159:49 - the value false because obviously the
159:50 - key six or the string
159:52 - six was not one of the keys in our map
159:54 - and yeah i mean that is
159:56 - pretty much it for maps i'll show you a
159:57 - few other methods we have the map.clear
159:59 - method so i could say mp.clear
160:01 - let's just actually print out mp so we
160:04 - can have a look at it after
160:05 - mp.clear is obviously just going to
160:07 - remove all of the keys so we see we have
160:09 - an empty map here we've cleared all of
160:10 - the entries from it
160:12 - what else we have is the map dot entries
160:15 - method so this one is actually
160:16 - interesting i'll show you this
160:18 - uh entries like that so let's refresh
160:23 - and you can see we get t points to five
160:25 - v points to eight and this is what's
160:26 - called an iterator which means we can
160:28 - loop through this
160:29 - uh and look at all the different entries
160:31 - so let's actually do that now we'll do a
160:32 - for loop and just show how we can
160:33 - iterate through this
160:34 - so we'll say for var entry of mp
160:39 - all we need to do is simply console.log
160:41 - the entry
160:42 - now the question is what is entry is
160:44 - entry going to be the key
160:46 - is it going to be the value or is it
160:47 - going to be the whole thing let's find
160:49 - out
160:50 - by refreshing and we can see that's
160:52 - actually giving us the whole thing so if
160:54 - i want to
160:55 - access just the key or just the value
160:57 - what i have to do is actually index
160:59 - either 0 or 1. if i index 0 that's going
161:01 - to give me the key if i index 1 that's
161:03 - going to give me the value
161:05 - and the reason for this is because again
161:06 - we're actually looping through this
161:08 - array right so we
161:09 - you know we go through the map and then
161:11 - we are given
161:12 - for entry an array so we have to loop
161:15 - through the value to determine which one
161:16 - we actually want i
161:17 - did not mean to do that let's refresh
161:20 - now you see we're just printing out the
161:21 - keys and if we were to change this to
161:23 - one
161:24 - then we would just be printing out the
161:25 - values like that
161:27 - pretty straightforward okay so now let's
161:28 - go through an example with
161:30 - why we'd actually want to use a map and
161:32 - this one is a fairly um
161:34 - good example actually i like this
161:35 - example to count the number of
161:37 - characters
161:37 - in a string so let's just say str equals
161:40 - and then let's do
161:42 - this is my new
161:45 - string uh hello just add some characters
161:48 - in here
161:48 - so what i want to do is actually create
161:50 - a count of all of these characters i
161:52 - want some way
161:53 - to be able to find out how many of any
161:55 - letter exists
161:56 - in this string so if i want to find how
161:59 - many t's i want a way to do that how
162:00 - many i's
162:01 - m and so forth you know i want a way
162:04 - to do that i want to count all of the
162:06 - different letters well we can do this
162:07 - very easily using a map and i'm going to
162:09 - show you just by going through the
162:10 - example and then we'll
162:12 - walk through it step by step i'm going
162:13 - to say var
162:15 - letter of string which means we're just
162:18 - going to loop through each letter in our
162:19 - string
162:20 - and what i'm going to do now is say if
162:23 - in this case we'll actually need these
162:25 - mp
162:26 - dot has letter so if it does have the
162:29 - letter
162:30 - what i'm going to do is actually say
162:32 - mp.set
162:33 - and in this case the key is going to be
162:35 - the letter and the value is going to be
162:38 - mp.get letter
162:40 - plus one now what i'm going to do is
162:43 - store in my map
162:44 - key values that look something like this
162:46 - i'm going to store the letter for
162:47 - example let's say
162:48 - t and i'm going to store the count as
162:50 - the value so i'm going to start how many
162:52 - times i've seen
162:53 - you know whatever this is so if we
162:56 - actually have the letter
162:57 - already inside of our map that means
162:59 - we've seen it before and we'll talk
163:01 - about how we're going to do that in a
163:02 - second
163:02 - we'll grab whatever the current value of
163:04 - it is here and then we'll add
163:06 - one to it and store that back in the map
163:08 - and remember when we set
163:10 - you know a specific key if that key
163:12 - already exists in the map which it will
163:13 - have here
163:14 - say we have t we just override that and
163:16 - we'll just change
163:17 - t's value to be three and that's the
163:19 - point we're going to just increment and
163:20 - count how many letters and i'll show you
163:22 - how we can look at them in a second
163:23 - now otherwise so if the map doesn't have
163:26 - this letter we need to add that letter
163:28 - to the map
163:28 - so we're going to say mp.set letter one
163:32 - the reason we can just put one is
163:33 - because if this is the first time
163:35 - that we've seen this letter it's not
163:36 - already in the map all we need to do is
163:38 - give an initial value of one
163:40 - because we've seen this letter one time
163:42 - okay so that
163:43 - is how we do that now let's just print
163:46 - out
163:46 - the map to have a look at it after so if
163:48 - we refresh
163:50 - we go here we can see that we have now
163:52 - our map
163:53 - t has a count of two h has two i three
163:56 - s three blank which is space actually
163:58 - has a value five and then we can keep
164:00 - going
164:01 - and see all of the different letters as
164:02 - well as their counts
164:04 - so this is useful because now if i want
164:06 - to check how many you know say t's are
164:08 - in my map what i can do is say okay
164:11 - let's get the value of t let's see how
164:12 - many t's are were in this string that we
164:14 - counted right
164:15 - so if we refresh now we print out two
164:18 - and now
164:19 - any letter i want i simply put inside
164:21 - here
164:22 - and obviously if we don't have the
164:23 - letter in there it's going to give us
164:25 - you know
164:25 - just an undefined value but you kind of
164:27 - get the point on that
164:29 - immutability now this is important
164:31 - because if later on and i'm not sure if
164:33 - i'm going to do this in this series yet
164:34 - we start talking about
164:35 - objects more it's very important to
164:37 - understand how items can kind of change
164:39 - and values can change in our program
164:41 - and this is a kind of a more advanced
164:43 - topic where a lot of beginners find it
164:44 - difficult but i'm just gonna
164:46 - you know kind of tell you guys this is
164:47 - extremely important so make sure you're
164:48 - paying attention and if you don't
164:50 - understand everything from this video
164:51 - you know look up some stuff on your own
164:53 - and make sure you understand this
164:54 - concept because it's very important
164:56 - so the first thing we need to talk about
164:58 - when we talk about mutability is first
164:59 - of all what even is
165:00 - mutability well when we talk about
165:03 - mutability we're talking about being
165:04 - mutable or immutable and that
165:06 - essentially means
165:07 - changeable or unchangeable now when we
165:10 - have a program
165:11 - we have something called variables and
165:12 - then we have something called primitive
165:14 - data types and something called
165:15 - objects so for example if i say var x
165:18 - equals 5 what i've done is created the
165:20 - variable x so this
165:22 - x here and it stores the value 5 which
165:25 - is what we call a primitive type and
165:27 - i'll talk more about that in one second
165:29 - now if we say var zed
165:32 - equals and i create a new array here
165:34 - this actually stores what we call
165:36 - an object and if i were to create
165:38 - another variable and i said
165:40 - variable s equals zed what i've actually
165:43 - done here and we're going to talk about
165:44 - this more in depth but i'm just kind of
165:45 - going through the beginning stages here
165:47 - is rather than created a new array that
165:50 - is equal to
165:51 - you know whatever the z array was i've
165:53 - actually just created another name to
165:55 - reference
165:56 - z so that essentially means that if i
165:58 - change anything on the variable s
166:00 - it's actually going to affect z as well
166:02 - and same goes if i
166:04 - change anything on the variable s or
166:06 - sorry z it's going to affect the
166:08 - variable s as well that is because
166:10 - these variables here actually what we
166:12 - call reference
166:13 - the same object so changes to one of
166:16 - those variables will change the other
166:18 - one because they're not actually storing
166:19 - you know the value of the array they're
166:22 - storing the array as
166:23 - one object in total whereas when we have
166:26 - this variable x
166:27 - like this this holds just a value it
166:30 - doesn't actually hold a reference to a
166:32 - specific object
166:33 - and again you know you're probably
166:34 - understanding why you might be confused
166:36 - by this we're going to go through a ton
166:37 - of examples but
166:38 - let's do one now so hopefully that makes
166:39 - a bit of sense so our primitive data
166:42 - types are what we call immutable which
166:43 - means they don't change and we're just
166:45 - referencing
166:46 - values rather than objects so if i do
166:48 - something like var
166:49 - you know t equals x well if i change the
166:52 - value of
166:53 - t that does not affect x the reason for
166:56 - that is because this value here
166:58 - is a primitive uh primitive type it's
167:00 - not an object
167:01 - so we can actually do that so this is a
167:03 - way to kind of you know make a copy of
167:06 - this variable x here and then we can
167:08 - just change it within t whereas if we
167:09 - did this with an array
167:11 - well we're going to get the same thing
167:12 - we just talked about because this is
167:13 - what we call an object and same goes for
167:15 - sets and for maps as well
167:18 - okay so let's do an example i'm going to
167:20 - create a function i'm going to call it
167:22 - uh add5 we're going to take in some
167:24 - variable let's just call this
167:26 - num and then what we're going to do is
167:27 - simply add 5 to this number and print it
167:29 - out so we're going to say num
167:31 - plus equals 5 console.log
167:35 - num now let's just call this function
167:37 - here so let's actually call a variable
167:39 - let's
167:39 - call it x let's set it equal to 5. let's
167:42 - do add
167:43 - 5 x and then let's console.log
167:46 - the value of x now if you're paying
167:48 - attention and you understand what i was
167:50 - talking about you should be able to
167:51 - answer this question here
167:52 - which is okay so what am i going to be
167:55 - printing what are the two values that
167:56 - are going to print out to the screen
167:58 - that's what i want you guys to think
167:58 - about now
167:59 - and i'm just going to go into the answer
168:00 - so pause it if you want to you know take
168:02 - a look at that
168:03 - well what happens here so what we're
168:06 - doing is passing this variable that
168:08 - we've defined
168:09 - which is 5 to this function at 5.
168:12 - what this function is going to do is
168:13 - take that in as a parameter called num
168:16 - it's going to add 5 to that parameter
168:18 - num and then it's going to
168:19 - print out that value so we should get 10
168:21 - from inside this function
168:23 - but then down here does x change like i
168:26 - passed the variable x
168:28 - to this function and we added 5 to it so
168:30 - does that mean we added 5 to x
168:33 - or does it mean we just added 5 to none
168:35 - how does this work
168:37 - well let's have a look here let's
168:38 - refresh the page and
168:40 - no it does not change the value x we get
168:42 - 10 and we get 5. the reason for that
168:45 - is because when we pass a value to this
168:47 - parameter what essentially is happening
168:49 - is inside our function
168:50 - something happens like a line of code is
168:52 - kind of written like this num
168:54 - equals x now we recall from before that
168:57 - since num is what we call a primitive
168:59 - type
168:59 - this just creates a copy of it and it
169:01 - doesn't actually change
169:03 - the underlying value of this variable so
169:06 - that is the first thing to understand
169:07 - that when we're calling with primitive
169:09 - types that's what happens now what are
169:12 - the primitive types
169:13 - well primitive types are numbers strings
169:16 - booleans undefined and null so for
169:19 - example
169:19 - if i say var equals string like that
169:23 - this is a primitive type obviously well
169:26 - this isn't good now this will work we
169:27 - can try this actually
169:29 - so let's refresh we get string five and
169:31 - we get string we can see it didn't
169:32 - change
169:33 - and now if i do let's say you know the
169:36 - value
169:36 - true and rather than setting this like
169:38 - this we'll just set this to false and we
169:40 - print these out
169:42 - we can see we get false and we get true
169:44 - and these are our primitive data types
169:46 - right and same thing
169:47 - with null and same thing with undefined
169:49 - so those are what we call the primitive
169:50 - types
169:51 - now let's talk about what we call the
169:52 - reference data types or the
169:54 - object data types and see how these work
169:56 - differently so
169:57 - we're going to create a new function now
169:59 - and what i'm going to do is actually say
170:02 - append5 now what this is going to do is
170:04 - it's going to take in some array so
170:06 - we'll
170:06 - call it array and what it's going to do
170:08 - is simply append
170:10 - so i think we can just do that with push
170:12 - the value
170:13 - 5. we're going to console.log
170:16 - our array here i'm going to now just
170:18 - make an array in here that's one two
170:20 - three
170:20 - four so this should be one two three
170:21 - four five and now we're gonna have a
170:23 - look at what this does so if we change
170:25 - this name to append five
170:27 - we need to understand what this is going
170:28 - to do so before i go think about what's
170:30 - gonna print out here is it gonna be you
170:31 - know the same result that we've seen
170:33 - previously or is this gonna be different
170:35 - well what we're doing now is using what
170:37 - we call a reference or an object data
170:39 - type which is
170:39 - an array so this is actually mutable it
170:43 - means this is
170:43 - changeable whereas the other values the
170:45 - parameter types were unchangeable and we
170:47 - saw that because they just created
170:48 - copies when we set them equal to a new
170:50 - variable
170:51 - whereas here what we're doing is
170:53 - actually passing in this entire array
170:55 - so this array goes in and then what
170:57 - we're going to do is push 5
170:58 - onto that array then we're going to
171:00 - print out whatever the value of the
171:02 - array is which should be one two three
171:03 - four five and then we're going to come
171:04 - down here
171:05 - and now we refresh the page to see what
171:07 - we actually get which is
171:08 - one two three four five one two three
171:10 - four five now why
171:12 - did this value x change like x is equal
171:14 - to one two three four here
171:16 - up here all we did was push 5 onto this
171:18 - parameter array that's not the same
171:20 - variable x
171:21 - why did it change well again that's
171:23 - because what we did is we passed the
171:25 - actual object
171:26 - to this parameter we didn't just pass
171:28 - you know some copy of it
171:30 - or something that looked like this
171:31 - object right we passed the actual
171:33 - physical thing
171:34 - so when we change this it's going to
171:37 - affect x and it's going to affect
171:38 - ar r and that is kind of the basis
171:41 - behind mutability
171:42 - and it's very important to understand
171:43 - because you can design functions
171:45 - that actually don't need to return
171:47 - specific values they can just
171:49 - modify the input that you've sent to
171:51 - them so in this instance the best
171:52 - you know example is just to use an array
171:54 - you can see here that we wanted to add 5
171:56 - to an array
171:57 - rather than you know having to return a
171:59 - new array from this function which we've
172:01 - done before
172:01 - we can simply just tack on this 5 by
172:04 - actually modifying the input here
172:06 - now i can do the same things inside of
172:08 - here where i can do like arr at 1
172:10 - is equal to 5 and we'll have a look at
172:12 - how this works and you can see that now
172:15 - we get one five three four
172:16 - one five three four again notice you
172:19 - know it's not changing
172:20 - now let's even go a little bit more
172:21 - complicated here and save our ar2
172:24 - equals air r now i'm gonna go ar2
172:27 - at 1 equals 100
172:30 - and what do you guys think is going to
172:31 - happen now so i'm printing you know arr
172:34 - i'll also print error 2
172:37 - first so let's say console.log we'll do
172:39 - ar2
172:40 - arr and then x what is going to be the
172:42 - value of all three of these variables
172:44 - are they going to be the same are they
172:45 - going to be different does this you know
172:47 - do anything that i've just created a new
172:48 - variable inside of here well let's have
172:50 - a look
172:51 - and obviously no it does not again it
172:53 - doesn't because when we do this we're
172:55 - not copying this array
172:57 - we're simply kind of just having a
172:58 - pointer that goes to it and says hey you
173:00 - know this is where the array is
173:02 - you know this is where you can modify it
173:04 - and that's how it works
173:05 - now i'm going to go into a little bit
173:06 - deeper level of how this works
173:08 - just by doing something on the drawing
173:10 - tablet really quickly well i'm actually
173:11 - i'll just do it with my mouse because
173:12 - it's nothing you know too important
173:14 - essentially when we have an array so i'm
173:16 - just going to draw one out here and
173:18 - excuse me because i'm just drawing with
173:19 - my mouse
173:20 - when we create a variable you know let's
173:22 - say x and we set it equal to this array
173:25 - what we do is instead of having it hold
173:27 - the value of the array
173:28 - it actually holds the kind of pointer
173:31 - or the location of memory where this
173:34 - array is stored
173:35 - so let's say this array is stored inside
173:37 - you know our computer memory
173:38 - maybe it has an id that's something like
173:41 - you know two
173:42 - right well when we say x equals some
173:45 - array
173:46 - rather than saying you know x is equal
173:48 - to this array what's actually happening
173:50 - is x is equal to this id so it actually
173:54 - knows the location of the array
173:56 - but it doesn't really necessarily know
173:57 - the value unless it goes to that
173:59 - location to look it up
174:00 - so when i do something like y
174:03 - equals x what i've actually just done
174:06 - is just made a copy of the pointer to
174:09 - this array
174:10 - so what that means is since x you know
174:12 - pointed to the array up there
174:13 - what's happening now is y is now going
174:15 - to point the same array so they're
174:17 - pointing to actually the same
174:19 - object in memory which allows us to
174:21 - change them from different variables
174:23 - so this is what we call an alias when we
174:25 - do something like this where we just
174:27 - have another name
174:28 - for the same actual object and i've just
174:31 - been doing this example with arrays but
174:33 - essentially any
174:34 - data type that is not a string float
174:37 - number undefined or null works like this
174:40 - and rather than storing you know the
174:42 - actual value of the object where we can
174:44 - copy it and kind of change it around
174:45 - variables
174:46 - it stores the actual like location and
174:49 - memory of that object
174:51 - i'm going to pause for one second just
174:52 - to get something up on my screen i'm
174:53 - going to show you guys how we can create
174:54 - a
174:55 - copy of arrays rather than having to uh
174:58 - what do you call it change the value
174:59 - because sometimes you don't want to do
175:01 - this
175:01 - okay so to copy an array there's
175:03 - actually two ways
175:04 - now the old one i'm going to show you
175:06 - first which kind of makes a little more
175:07 - sense to me because i'm from a python
175:09 - background
175:09 - but there is this way in the new version
175:11 - of javascript that i'll show you i'm not
175:13 - really going to explain it because i
175:14 - don't understand it completely but it
175:16 - does make a copy of the array for you
175:18 - so what i've done here is said you know
175:20 - var x equals 1 2 3 4
175:21 - 5. i want to say var y and i want it to
175:24 - be equal to x
175:25 - but i want it to just be equal to an
175:26 - array that has the exact same values of
175:28 - x but is not the same array right i
175:30 - don't want it to point to the same
175:32 - object
175:32 - because maybe i want to modify this one
175:34 - but i don't want to modify x
175:36 - right so how do i do that well there's
175:38 - two ways
175:39 - the old way is to do x dot slice so what
175:42 - this
175:43 - actually does and this is a method that
175:44 - you can use on arrays regardless of if
175:46 - you're copying them or not
175:48 - is takes a kind of section of the array
175:51 - and copies it so in this instance when
175:54 - we don't put any values inside the slice
175:56 - function or the slice method what it's
175:58 - going to do is actually just copy this
176:00 - array entirely value by value
176:02 - now if i want to actually say you know
176:04 - just copy the first three elements of
176:06 - this array
176:06 - what i would do is something like 0
176:08 - comma 4 i believe
176:10 - and what this is going to do is take all
176:12 - the elements starting from index 0
176:14 - up to but not including 4. so actually
176:17 - sorry this should be 3.
176:18 - so what that's going to do is simply
176:20 - copy the elements 1
176:21 - 2 3 because we won't include index 3
176:25 - because that is kind of the end bounce
176:26 - so i'll show you i'm just like i'm not
176:28 - making this up this actually works let's
176:30 - refresh here and you can see we get one
176:31 - two three four
176:32 - one two three so that is how the slice
176:35 - kind of works
176:35 - if i just do this we'll have a look
176:39 - and we can see that we get this entire
176:40 - thing but now notice that i can change
176:42 - the value so i can say something like y2
176:45 - equals 999 and this will not change
176:48 - x so you can see this changes my y value
176:51 - but it doesn't change
176:52 - x so that's kind of an easy way to copy
176:54 - now there's another way to copy i'll
176:56 - show you that as well here so let's
176:58 - leave actually everything that's there
176:59 - but let's just make a different copy
177:01 - so what we can actually do in here is do
177:02 - dot dot dot and then
177:04 - x now i don't actually know really what
177:06 - this operator is but i just saw
177:08 - that when i was looking it up that this
177:09 - is a way that you can make a copy as
177:10 - well
177:11 - so if i do this and refresh we get the
177:14 - exact same answer so we keep stick with
177:16 - that copy
177:16 - what this has done is essentially just
177:18 - copied x and you know put that into
177:20 - its new array so if you guys are
177:22 - interested in looking at how that works
177:23 - you know
177:24 - i urge you guys to but i figured i'd
177:25 - show it in case anyone wanted to get a
177:27 - look at it
177:27 - and that has kind of been mutability so
177:30 - hopefully you kind of understand now the
177:31 - difference between a primitive type and
177:33 - a reference
177:35 - slash object type in javascript and why
177:37 - we need to understand the difference
177:38 - because sometimes we're going to modify
177:40 - the actual
177:41 - you know input and sometimes we're going
177:43 - to create a copy of it and do some other
177:44 - kind of alterations on it
177:46 - so this is what we would call a copy or
177:48 - clone this value y
177:49 - whereas before when we just did
177:51 - something like you know var z
177:52 - equals x that would be known as an alias
177:55 - or simply another name
177:56 - for whatever this x is right
178:06 - you