00:02 - [Music]
00:08 - hello everybody and welcome to video 2
00:11 - in this rust programming series in this
00:13 - video i'm going to be showing you some
00:15 - rust command line tools specifically
00:17 - cargo and then rust fmt now cargo is
00:20 - something that we use to keep track of
00:22 - our different dependencies and to
00:24 - initialize a rust project allows us to
00:26 - do a few other things as well and it's
00:28 - the recommended tool for actually
00:30 - building running and creating our rust
00:32 - projects now what we did in the previous
00:35 - video was was we just create a single
00:37 - file here right where i have this main
00:39 - function we compiled the single file and
00:41 - then we ran the file now that's fine
00:43 - because in that we didn't have any
00:45 - dependencies we didn't have multiple
00:46 - files kind of linked together and it was
00:49 - very small project obviously we just had
00:50 - you know three lines of code but as your
00:52 - projects get larger you need something
00:54 - to keep track of the dependencies you
00:56 - need a better kind of structure in terms
00:58 - of how you're storing files and folders
01:00 - and all of that and that's where cargo
01:02 - comes in so i'm going to show that to
01:03 - you lastly i'm going to show you
01:05 - something called rust fmt which allows
01:07 - you to automatically format your rust
01:09 - code very useful highly recommend that
01:11 - you use it after you finish writing some
01:13 - code so before we dive in i will quickly
01:15 - mention that i do have a programming
01:17 - course it's called programmingexpert.io
01:19 - it's the best platform to learn how to
01:21 - code has a ton of interactive practice
01:23 - questions has some projects you can work
01:25 - on teaches advanced programming software
01:27 - engineering tools teaches stuff like git
01:29 - bash etc all kinds of great content on
01:32 - there and if you guys want to check it
01:33 - out you can use the discount code tim
01:35 - from programmingexpert.io link in the
01:37 - description with that said i'm just
01:38 - going to delete this main.rs file here
01:41 - and we're going to kind of start from
01:42 - scratch and use cargo to initialize a
01:44 - new rust project
01:46 - so open up your terminal or command
01:47 - prompt here and just type in cargo and
01:50 - make sure that this command works for
01:52 - you it should have been installed by
01:54 - default when you installed rust so i
01:56 - imagine most of you will have that now
01:58 - notice the location that you're in here
01:59 - for your terminal if you can't see it
02:01 - type pwd for print working directory but
02:04 - you want to be in the directory where
02:06 - you want to initialize a new rust
02:08 - project so in this case i'm in rust
02:10 - tutorial on my desktop you guys will be
02:13 - wherever but maybe make a folder where
02:15 - you're going to make all of your
02:16 - different rust projects okay
02:18 - so for now we're going to create a new
02:20 - rust project using cargo so to do this
02:23 - we're just going to say cargo new and
02:25 - then we're going to put the name of the
02:26 - project that we want this is going to be
02:28 - the directory name where our code is
02:30 - going to be contained so for now i can
02:32 - just call this something like tutorial2
02:34 - and it's important that you don't have
02:35 - any spaces in this name if you want a
02:37 - space again just use an underscore okay
02:39 - so we have tutorial 2. i believe i spelt
02:41 - that correctly
02:42 - let's run this and then notice we get
02:44 - created binary application tutorial 1
02:46 - package so if i go back here we now have
02:48 - a tutorial tutorial1 folder we have a
02:50 - git ignore file we have a
02:52 - cargo.toml which i believe is tom's
02:55 - obvious something language
02:58 - i actually want to find what this is
02:59 - from the documentation because i
03:00 - remember being funny yeah tom's obvious
03:03 - minimal language that's what t-o-m-l
03:05 - stands for so great name for this uh and
03:07 - we'll talk about this in a second and
03:08 - then we have src this is where all of
03:11 - our code's gonna go and we automatically
03:13 - have a main.rs file with the function
03:16 - main inside of it so as you can probably
03:18 - guess this is where we're going to put
03:19 - all of our code files inside of src
03:22 - standing for source that's where cargo
03:24 - expects all of our source code to be now
03:26 - git ignore will be used if you have a
03:28 - git project initialized here we don't
03:31 - have one set up or we're not really
03:33 - using git i think it automatically
03:34 - initialized one for us don't have to
03:36 - worry about that for now but we just
03:37 - want to make sure the target folder if
03:39 - it exists is not being a part of our
03:41 - repo and then of course we have this
03:42 - kind of configuration file right uh
03:45 - where we have a bit of information so we
03:47 - have an addition we have version we have
03:49 - the name of our package and then any
03:51 - dependencies that we have would be
03:53 - listed here we don't have any right now
03:55 - so obviously we're not seeing anyways
03:57 - this is the basic setup all right so now
03:59 - that we've had a look at the directory
04:00 - structure let's just see how we actually
04:02 - run the code from our cargo project so
04:05 - to do this we are going to go to our
04:07 - terminal again and we need to get into
04:09 - the directory of our project so i'm
04:11 - going to cd into tutorial 1 like that
04:13 - all right so now that i'm inside of this
04:14 - directory i'm no longer going to use
04:16 - this rust c command i'm going to use the
04:19 - cargo command because it's going to do
04:20 - all the compiling and running for me so
04:23 - i'm just going to type the command here
04:25 - cargo build and this will actually
04:27 - compile all of the code it will set up
04:28 - the dependencies and it will do
04:30 - everything i need to get an executable
04:32 - file so i'm going to type cargo build
04:34 - like that and then it's actually going
04:36 - to build this right it says compiling
04:38 - tutorial 1 uh finish dev blah blah blah
04:41 - and then if i type ls here so as you can
04:43 - see here we have a few new files and
04:44 - directories we have cargo.lock now this
04:47 - is a file that you don't really need to
04:48 - worry about but it's going to keep track
04:50 - of all of the versions of the
04:51 - dependencies that we have we don't need
04:53 - to manually touch it cargo will do this
04:55 - for us then we have this target
04:57 - directory which contains the executable
04:59 - file that we want to run so if you look
05:01 - here we have target inside of target we
05:03 - have some stuff we have debug you don't
05:05 - have to worry about a lot of these files
05:06 - but i'll show you how you get to the
05:08 - executable file so from here i'm now
05:10 - going to cd into the target directory
05:13 - and from target we're going to have
05:14 - another cd into debug
05:17 - now from debug oops what i can do is
05:20 - simply run the following this is going
05:21 - to be dot backslash because i'm on
05:23 - windows and then the name of my project
05:26 - dot exe so tutorial1.exe and we see
05:29 - hello world is going to print out now if
05:31 - i type ls notice that we have our
05:33 - tutorial1.exe
05:35 - if you're on mac or linux then it would
05:36 - be uh dot and then forward slash and
05:39 - then you just remove the dot exe and it
05:41 - should run the code for you okay so that
05:44 - is the basics there let me clear this
05:46 - and go back
05:47 - and i've just showed you now how you
05:49 - actually build your cargo project and
05:51 - how you run it as well now the thing is
05:53 - you don't actually need to manually
05:55 - build this every time there's a command
05:57 - here called cargo run which kind of
05:59 - makes this a bit faster for you and what
06:01 - this will do is compile and then
06:03 - automatically run the code so rather
06:04 - than taking those multiple steps you can
06:06 - just write cargo run and then you'll get
06:09 - the output right here hello world
06:11 - awesome okay so that is cargo run and
06:13 - that was cargo build i think there's a
06:15 - few other commands i wanted to show you
06:16 - let me have a look at my cheat sheet
06:18 - here yes the last command i wanted to
06:20 - show you is cargo check
06:22 - which essentially will check your cargo
06:24 - project now we are not going to get any
06:26 - output here any errors because we have a
06:28 - very small project but if there was any
06:30 - problems in your cargo project or in
06:32 - your code then they would be listed here
06:34 - after running the cargo check command
06:36 - now the real benefit of this cargo check
06:38 - command is that it checks that your code
06:40 - is able to compile without compiling it
06:43 - so you can not have to compile it well
06:45 - knowing that at the current stage in
06:47 - time your code is running properly or
06:49 - your code is correct in a sense right
06:51 - hopefully that makes sense but it's just
06:52 - a way faster command than actually
06:54 - compiling so use this when you don't
06:56 - want to compile but you want to check if
06:58 - you could compile the code that you
07:00 - currently have alright so now that i've
07:02 - showed you that i want to show you one
07:03 - more command which is the format command
07:05 - which will automatically format the code
07:07 - for you now one thing to note here is
07:08 - that you do need a semicolon at the end
07:11 - of your statement in rust now i don't
07:13 - remember if i put one in the first video
07:15 - or not i think it still would have
07:17 - worked because we only had one line if i
07:18 - didn't have it there but the convention
07:20 - is to have the semicolon at the end of
07:22 - the line to terminate the line and say
07:24 - this statement is done so my apologies
07:26 - if that wasn't in the first video but
07:27 - here it is you need the semicolon now
07:29 - notice here that i have my kind of four
07:31 - spaces right automatically for this file
07:33 - so what i'm going to do is just make
07:35 - this uh kind not be in the correct
07:37 - format so i'll do something like this so
07:38 - it looks kind of all wonky and run the
07:40 - format command
07:42 - and show you that it automatically
07:43 - formats the file for us
07:45 - so there might be a shortcut to do this
07:46 - but i believe i can just cd into src and
07:49 - then i can type rust fmt like this again
07:52 - this should be automatically installed
07:54 - you won't need to install it and then
07:56 - the name of your file
07:57 - which in this case is main dot rs so
08:01 - when i do this and i go back here notice
08:03 - that my code has automatically been
08:04 - formatted i have my four spaces and
08:07 - everything looks proper now so that is a
08:10 - kind of quick shortcut to automatically
08:11 - format your code for you using rust fmt
08:14 - alright so i was about to wrap it up i
08:16 - will quickly mention though that inside
08:18 - of your src folder you do want to have a
08:20 - main.rs file it's there automatically
08:23 - but this is the entry point to your
08:24 - program and then inside of main.rs you
08:27 - have your actual main function so you
08:29 - want to have a main file and then a main
08:31 - function inside of that so your code
08:33 - actually runs if you were to say change
08:35 - the name of this then you would get some
08:37 - type of error your code would not
08:38 - compile properly because you don't have
08:41 - a entry point to your program in fact we
08:43 - can test this quickly if we go here
08:45 - let's just cd dot and cargo build and
08:48 - see what happens now notice we get an
08:50 - error because we don't have a main
08:52 - function
08:53 - right with that said i will wrap it up
08:54 - here i hope you enjoyed if you did make
08:56 - sure to leave a like subscribe to the
08:57 - channel make sure to check out
08:59 - programmingexpert.io the best platform
09:01 - to learn how to code from the link in
09:02 - the description and i will see you in
09:04 - another one
09:07 - [Music]
09:13 - you