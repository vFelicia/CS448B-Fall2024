00:02 - [Music]
00:08 - hello everybody and welcome to video 7
00:11 - in this rust programming tutorial series
00:13 - in this video i'll be going over
00:15 - conditions compound conditions and
00:18 - control flow so if else if and else now
00:20 - if you're wondering why my camera is not
00:22 - on i'm just not feeling the greatest
00:23 - right now and it's easier for me to
00:25 - record without the face cam and the
00:27 - lights and all of that so for now in the
00:28 - next few videos i probably won't have a
00:30 - camera hopefully you guys don't mind but
00:32 - likely in the future the camera will be
00:34 - back all right with that said let's dive
00:36 - in i know you guys understand these
00:37 - topics or most likely you do if you've
00:39 - seen other programming languages before
00:41 - so i'll go relatively quickly and just
00:43 - show you the core operators and syntax
00:45 - and all of that all right so let's start
00:47 - with a condition now condition is really
00:49 - just any expression that evaluates to
00:51 - true or false or the boolean data type
00:54 - so you can create conditions using
00:56 - conditional operators and the operators
00:58 - that we have in rust are very familiar
01:00 - to other programming languages we have
01:02 - the less than operator the greater than
01:04 - operator less than or equal to greater
01:06 - than or equal to uh not equal to and
01:08 - then is equal to with two equal signs
01:11 - so pretty straightforward but these are
01:13 - the six core operators you can use when
01:15 - you are comparing different uh types or
01:17 - not different types i guess different
01:19 - values together in an expression and
01:21 - when you use these operators your
01:23 - expression is going to value evaluate
01:24 - sorry to true or false so let's have a
01:27 - look at a quick example let me do
01:28 - something like let con standing for
01:30 - condition equal to less than three let
01:33 - me make sure i don't forget my semicolon
01:35 - we can then print this out and you can
01:37 - take a guess at what you think the
01:38 - results gonna be although it's pretty
01:40 - straightforward
01:41 - and you'll notice that we get true
01:42 - because 2 is indeed less than 3. then of
01:45 - course we could do less than or equal to
01:47 - now if we put a 2 here this will
01:48 - evaluate to true
01:50 - and i think you get the point that is
01:52 - the basics now one thing to note here is
01:53 - that when you are comparing objects that
01:55 - are different types to each other you
01:57 - can run into errors so let's just see
01:59 - what happens if i do something like 2
02:00 - less than or equal to 2.2
02:03 - now when i run this code here notice
02:05 - that i actually get an exception and it
02:06 - says no implementation for integer less
02:09 - than float and integer greater than
02:11 - float so it says expected integer found
02:14 - floating point number in step so you
02:16 - need to make sure that you're using the
02:17 - same types on the left and the right
02:19 - hand side
02:21 - and if you are trying to compare say a
02:23 - float to an int then you need to convert
02:25 - in this case the int to a float so that
02:28 - you have the same type and you're not
02:29 - losing any data from your float so in
02:32 - this case if we want to fix this what we
02:33 - can do is something like 2
02:35 - as and then i'm just going to say this
02:37 - is an f32 i believe by default this will
02:40 - be an f32 as well and now when we try to
02:42 - do this comparison here
02:44 - let's go cargo run notice that we get
02:46 - true because now we have the same type
02:48 - on the left and the right hand side if
02:50 - you're unfamiliar with how to do the
02:51 - type conversions then refer to the last
02:53 - video because i showed them quite in
02:55 - depth how you convert all of the
02:56 - different types and variables and all
02:58 - that okay so that is a condition i think
03:00 - we have the basics on that now let's
03:02 - look at compound conditions now a
03:04 - compound condition at least what i like
03:06 - to call them as compound conditions is
03:08 - just multiple conditions kind of chained
03:10 - together using something called logical
03:12 - operators now the logical operators are
03:14 - your and or and not however in rust they
03:18 - are uh represented with some different
03:20 - syntax so in python for example you just
03:22 - write and but in rust the and is going
03:24 - to be two amperes
03:26 - the ore is going to be two pipes and
03:27 - then the knot is going to be an
03:29 - exclamation point here so these are the
03:31 - three logical operators in rust again
03:33 - this is and this is or and this is not
03:36 - now if you're unfamiliar with these
03:37 - let's do a quick example so let's do
03:39 - something like condition two is equal to
03:41 - and then i'm gonna say true
03:43 - and kant now what this is doing is
03:46 - essentially checking if both the left
03:48 - and the right hand side are true so the
03:50 - and operator will return true if the
03:52 - left and the right are true but if
03:54 - either the left or the right are false
03:56 - or both of them are false it will return
03:58 - false so in this case i have true and
04:00 - the condition we know this condition is
04:02 - true and so we'll get true here if we
04:04 - print out con 2. so let's go and do this
04:07 - and notice that we get true whereas if i
04:09 - make this one false here well this is
04:12 - still true but now since one of the
04:14 - sides is false we're going to get false
04:17 - okay that is the and operator fairly
04:18 - straightforward and of course if we had
04:20 - two falses here we would also get false
04:22 - okay now let's look at or
04:25 - so the or operator is simply two pipes
04:27 - and this tells us if either the left or
04:29 - the right hand side are true so if
04:31 - either of them are true we get true uh
04:33 - if both of them are false we get false
04:35 - so let's run this
04:36 - cargo run and notice we get true and
04:38 - just to show you here if both of them
04:40 - are true then we will also get true
04:43 - because either the left or the right
04:44 - hand side is true and there you go we
04:46 - got true okay so that is the or operator
04:48 - and then lastly we have the not operator
04:50 - which i like to call the negation
04:52 - operator and what this does is simply
04:54 - flip whatever the result is or of an
04:57 - expression or whatever the boolean value
05:00 - is to the opposite i know that was kind
05:02 - of a mouthful but what i mean by that is
05:04 - that if this expression evaluates to
05:06 - true and we have a not outside of it
05:08 - it's going to make it false so we simply
05:10 - flip whatever it is whereas if this was
05:12 - a false and we have the not then it
05:13 - would become true so it just makes it
05:15 - the opposite so if i run this here
05:17 - cargo run notice that i get false
05:19 - because inside of here we did have true
05:21 - and then we applied the not and that
05:23 - made it false
05:24 - whereas if i go here and i say true or
05:27 - not conned or i do something like i
05:28 - guess false or not kant
05:31 - now what's gonna happen is we're going
05:33 - to negate whatever the value of this
05:34 - condition is so we should end up getting
05:36 - false or false and that should lead us
05:38 - to a false result here uh which is what
05:41 - we get now we get some warnings here i'm
05:43 - not sure exactly why oh it's saying we
05:45 - don't need the parentheses okay well
05:46 - that's fine we can leave them for now
05:49 - okay so let's actually just clear the
05:50 - screen here and continue all right so
05:53 - that is the basics for the logical
05:55 - operators uh one last thing i will
05:56 - mention here is there is a precedence
05:58 - when you are applying the different
06:00 - operators uh the way it goes is you're
06:02 - going to apply all of your knots first
06:04 - then you're going to apply your ends
06:06 - then you're going to apply your ores now
06:08 - the only exception here is if you have
06:09 - parentheses then you're going to apply
06:11 - whatever's in the parentheses first just
06:13 - like you would in arithmetic operations
06:16 - okay so hopefully you got that we're
06:17 - going to do not and and then or i won't
06:20 - go through an example here but it is
06:21 - useful so just remember you have the not
06:23 - and or so if you're ever looking at a um
06:26 - what do you call it a compound condition
06:27 - that doesn't have parentheses you know
06:29 - in what order you need to apply the
06:31 - different operators okay so we have con
06:33 - we have con 2. now what i think we'll do
06:35 - is simply write an if else if an else
06:38 - statement and just show you the basic
06:39 - control flow here and rosten that we can
06:41 - end the video
06:42 - so let's get rid of this print line
06:44 - let's just do something like let
06:46 - food equals and i'm just going to go
06:49 - with something like a cookie for now and
06:51 - let's write an if statement that simply
06:53 - checks the value of food against some
06:56 - conditions that we have and if those
06:57 - conditions are true we'll print
06:59 - something otherwise we won't print
07:00 - something so an if statement is like
07:03 - this and rest you write if you write
07:05 - some condition in this case i'm going to
07:06 - say food is equal to
07:09 - and then cookie and then you open up
07:11 - your curly braces like this and inside
07:13 - of the curly braces you can write
07:15 - anything that you'd like to happen when
07:17 - this condition is true so pretty
07:18 - straightforward but if whatever you
07:20 - place here is true then you're going to
07:22 - do what's inside of these curly braces
07:24 - so in this case let's just go print line
07:27 - and inside of here we can do actually i
07:30 - won't do a formatting string i'll just
07:31 - say i like
07:33 - cookies too exclamation point
07:35 - okay
07:36 - let's run the code here and notice that
07:39 - i get an error because i forgot my
07:41 - semicolon so let's add our semicolons
07:43 - here i keep forgetting to do that
07:46 - and now we should see that we get the
07:47 - string i like cookies too because this
07:49 - condition is true now of course if we
07:51 - change this to be not equal to and we
07:53 - run the code
07:55 - fairly intuitively nothing is going to
07:56 - print out because this condition was not
07:59 - true okay that's it for the if statement
08:02 - now with an if statement we can also use
08:04 - an else if statement or an else so start
08:06 - with the else i'm sure many of you are
08:07 - familiar with this what the else allows
08:09 - us to do is essentially run if this
08:12 - condition is not true so if the if
08:14 - statement doesn't run then whatever's
08:16 - inside of the else will run so we're
08:17 - gonna do one of the two things here but
08:19 - never both i'm gonna say here
08:23 - oh
08:24 - that's too bad exclamation point
08:28 - okay so now let's just change this to be
08:30 - not equal to
08:32 - although that doesn't quite make sense
08:33 - what we're printing but that's fine and
08:35 - notice that i get oh that's too bad
08:37 - because this condition wasn't true so we
08:39 - defaulted to the uh to the l sorry and
08:41 - we did here now of course if this was
08:44 - true then we wouldn't run what's inside
08:46 - of the else great now we're almost done
08:48 - here the last thing to show you is that
08:49 - we can also add something called an else
08:51 - if now you can have as many of these
08:53 - elsifs as you'd like but they need to
08:55 - come after an if statement meaning you
08:57 - can't just write an else if randomly you
08:59 - can only write it after an if statement
09:01 - and before any optional else now as you
09:03 - saw we also don't need the else or the
09:05 - elsif statement i just wanted to show
09:07 - you that we can have
09:08 - multiple of these right so if i have
09:10 - else if here i can do another condition
09:12 - now and the way this works is if i check
09:14 - this and it's false
09:16 - i will then check this and if it's true
09:18 - i'll do whatever is inside of here if it
09:20 - is not true then i'll default to the
09:22 - else so i have an option here to check
09:24 - multiple conditions in a row
09:26 - so in this case
09:27 - i can say if food is equal to fruit
09:31 - then maybe we just do something like
09:32 - prince line
09:34 - that
09:35 - sounds healthy right
09:37 - and we'll keep the exclamation point and
09:39 - now if i change this to say
09:41 - fruit what's gonna happen is we'll check
09:43 - this condition it will be false
09:45 - since it's false we will then check this
09:46 - condition it'll be true and then we'll
09:48 - print this out
09:49 - and there you go okay so let's clear
09:52 - let's run and notice that i get that
09:54 - sounds healthy now one thing to note
09:56 - here is that if this condition is true
09:58 - we will not check any of these or will
10:00 - not do any of these statements so if
10:02 - even if this condition story is true but
10:04 - this one is true as well we will never
10:06 - execute this line of code because as
10:08 - soon as we find the first true condition
10:10 - we execute the block and then we skip
10:12 - the rest of it so keep that in mind you
10:14 - need to kind of put your conditions in
10:16 - the order in which you want to check
10:17 - them now with the elsif we can have
10:19 - multiple of these as i mentioned so i
10:20 - can just paste another one here and say
10:22 - else if food is equal to and i don't
10:25 - know we want to go with here i'll just
10:26 - say bread and i'll say that sounds
10:29 - boring okay and then if we change this
10:32 - to bread
10:34 - let's go here
10:35 - and notice that we're going to get that
10:38 - sound board alright so i think that is
10:40 - all that i need to show you in this
10:42 - video this is fairly straightforward
10:45 - again i imagine most of you already know
10:46 - these concepts that's why i'm kind of
10:48 - going over them fairly quickly just to
10:50 - reiterate here when we do an if
10:51 - statement we simply write the condition
10:53 - if this condition is true then we're
10:55 - going to execute whatever's inside of
10:57 - the current curly brace block and we're
10:59 - going to skip all of the rest of the
11:01 - statements that are part of this if
11:02 - statement now if this statement is not
11:04 - true or if the condition is not true
11:06 - then we're going to go and check all of
11:08 - the other conditions until we find one
11:09 - that's true so if this one is true we
11:11 - execute this we skip the rest if it's
11:13 - false then we execute the next one or we
11:15 - check the next one if it's true we do
11:18 - this we skip the rest if it's false then
11:20 - we just default to the else here and do
11:22 - whatever's here now of course you don't
11:23 - need the else but if you do have one it
11:25 - needs to come after any of the else ifs
11:27 - that you have and same thing with the
11:29 - else if you don't need them but if you
11:30 - do have one it needs to come after an if
11:32 - statement of course you can also nest if
11:34 - statements inside of each other so i
11:35 - could put another one here and do
11:37 - whatever i please inside of this if
11:39 - statement so with that said i am going
11:40 - to wrap up the video here hopefully you
11:42 - found this helpful if you did make sure
11:44 - to leave a like subscribe to the channel
11:46 - and i will see you in another one
11:48 - [Music]
11:56 - you