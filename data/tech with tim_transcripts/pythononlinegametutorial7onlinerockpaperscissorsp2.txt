00:00 - client-side and then we're going to say
00:01 - is going to say P equals one and what
00:03 - this means is player equals one and
00:05 - you'll see why we need to do this in a
00:07 - second okay so now we're gonna do start
00:10 - new thread
00:10 - now notice insert new thread I added two
00:12 - new parameters P and game ID so this
00:16 - means the current player so it's either
00:17 - player zero or player one and the game
00:20 - ID and game ID is gonna stand for which
00:23 - game in this games dictionary are we
00:25 - playing in this threaded client like
00:27 - which one of our clients that's
00:29 - connected here is playing which game
00:31 - that's why we need that so let's pass
00:33 - that information Syrena pass P which is
00:36 - either gonna be 0 or 1 like we have
00:37 - there and we're gonna pass game ID and
00:41 - then we'll have that up here and just
00:43 - remember that threaded clients one of
00:45 - these functions is continuously running
00:47 - for every single one of our clients so
00:50 - if we have a hundred clients we have a
00:52 - hundred different functions of this
00:54 - running in the background at the same
00:55 - time ok awesome so that's how about it's
00:58 - working inside our threaded client now
01:03 - excuse me I try to take a break there
01:05 - inside of our threaded client we now
01:08 - need to add some things so the first
01:10 - thing we're gonna add is ID count we're
01:12 - gonna global ID count because if someone
01:15 - leaves our game or disconnects we're
01:17 - gonna need to subtract from that so we
01:19 - can keep track up accordingly like how
01:22 - many people are connected how many games
01:23 - are running and all that stuff ok now
01:26 - the first thing we're gonna do when
01:28 - someone can next to our woody called our
01:31 - server is we're gonna send them what
01:33 - player there remember what I was saying
01:34 - in this game class we're in this network
01:37 - class sorry then when we connect we're
01:39 - initially just going to decode a string
01:41 - that's either going to be 0 or 1 to tell
01:43 - us what player we are ok so what we're
01:46 - gonna do is we're going to send conn
01:47 - don't send str dalton code P and I
01:53 - believe this should be actually string P
01:55 - like that so that we know if we're
01:57 - player 2 0 or if we're player 1 that's
01:59 - the first step next we're gonna say
02:01 - reply equals a blank string we want to
02:03 - say a while true and this is where we're
02:05 - gonna start doing some more serious
02:07 - stuff in here so the way that it's going
02:09 - to work in terms of sending string data
02:11 - from our client to our server you
02:13 - we're gonna send one of three different
02:17 - options we're gonna send get we're gonna
02:20 - send reset or we are going to send a
02:22 - move and the move is gonna be like rock
02:24 - paper or scissors so if we send get what
02:28 - that means is we want to get the game
02:30 - from the server so we're gonna send that
02:33 - every frame we're gonna send get that
02:35 - string get and then the server is gonna
02:37 - look and it's gonna say okay what are
02:38 - you sending your sending get alright
02:39 - we'll send you back the game that's how
02:42 - that's gonna work another option is
02:44 - reset reset means reset the game the
02:48 - game has finished both players played
02:49 - reset and that's gonna be sent from the
02:52 - client side because the client knows
02:54 - when we want to reset right the last one
02:57 - is a move same thing when the client
03:00 - makes a move so like rock-paper-scissors
03:02 - if they are allowed to make that move
03:04 - which will check on the client side
03:06 - we'll send that move to the server the
03:08 - server will update the game accordingly
03:10 - and then it will send back the game to
03:12 - the client and that's how that's going
03:15 - sweet so what we'll do now is going to
03:17 - say well true let's say data equals con
03:19 - dot receive and then we're gonna say
03:24 - 4096 and here instead of 2048 what
03:26 - you're using before dot decode the
03:28 - reason we're doing this is just in case
03:31 - we're sending too much information that
03:33 - is more than 2048 bits we want to just
03:36 - double this number so we can get more if
03:38 - you run into any issues that say like
03:40 - pickle data was true onst or like ran
03:43 - outta input just increase this number
03:44 - okay you can literally just do x tune
03:47 - here and that should hopefully fix the
03:49 - error if it doesn't work you can like
03:50 - multiply by 4 multiply it by 8 and that
03:53 - should hopefully fix your error for you
03:55 - okay so now what we're gonna say is
03:57 - gonna say if game ID in games now I'll
04:02 - talk about why we're doing this in a
04:03 - second we're gonna say they're gonna say
04:04 - game equals games game ID so essentially
04:10 - every time we run this while loop we're
04:12 - gonna check if the game still exists and
04:14 - that's what we're doing right so in this
04:17 - games dictionary we're seeing if this
04:18 - game ID which is the key to access the
04:20 - game is still there now why would we
04:23 - check that well if one of our clients
04:26 - disconnects
04:27 - the game we're actually gonna delete
04:29 - that game from the what he call it the
04:31 - games thing now what that's doing for us
04:35 - excuse me
04:36 - is not only like keeping track of our
04:39 - memory which means that we're not gonna
04:40 - just continually keep creating games so
04:43 - like Sarah server ran for weeks
04:44 - and we never deleted any games then we
04:47 - probably rotten run out of memory on our
04:49 - computer right if we're playing a lot of
04:50 - games but it's also gonna tell the other
04:53 - client that was connected to that game
04:54 - that hey this game no longer exists that
04:57 - means the other person must have
04:58 - disconnected from it so we have to do
05:01 - something accordingly go back to the
05:02 - menu screen right do something like that
05:04 - okay so that's we'll do there and then
05:07 - we're going to say in here is gonna say
05:08 - if not data we're gonna break this
05:11 - similar to before so I'll go through it
05:12 - a bit quicker we're gonna say else and
05:15 - now we're going to check the three
05:16 - different things that could have been
05:17 - sent right so we've received the data so
05:20 - we're gonna check if we got reset get or
05:22 - if we got a move so the first thing
05:23 - we'll check will save data equals equals
05:25 - reset okay then we're gonna say if data
05:30 - does not equal yet and then else sorry
05:36 - there should be an Elif Alec data it
05:37 - does not equal yet else we'll do
05:39 - something else actually do we need an
05:41 - else no we don't you knows okay so if
05:45 - data equals reset what we're gonna do is
05:47 - we're going to say game dot reset right
05:50 - because we already have the game and if
05:52 - we look in here what resets doing is
05:54 - essentially it's resetting both players
05:56 - one so we can play another game really
05:58 - straightforward for that next one if
06:00 - data equals yet what we're gonna do is
06:04 - say game or if data does not equal get
06:07 - sorry so if it didn't equal reset and it
06:10 - does not equal get well then it must be
06:12 - a move so it means we're either getting
06:13 - rock-paper-scissors so we're gonna send
06:16 - that move to the game to update it so to
06:19 - do that we're gonna say game don't play
06:20 - and then we're gonna do with the current
06:22 - player number which is P and then the
06:24 - move and the move is gonna be
06:26 - whatever this data is right so it'll be
06:28 - data okay
06:30 - and then otherwise so I guess after that
06:33 - what should we do here we'll say reply
06:36 - equals game and that what we ready to do
06:39 - is going to be conned
06:40 - send all I'm gonna say pickle dot dumps
06:45 - and not dancer reply okay
06:48 - and what this is gonna do let me just
06:49 - make sure I didn't run to any errors
06:51 - here is simply going to package up our
06:54 - game into that nice um send able form
06:57 - we're gonna send it over to our clients
06:59 - clients gonna receive it on pickle it
07:01 - and then use it to obviously make moves
07:04 - and do different things and draw it to
07:05 - the screen and all that okay alright so
07:07 - I think that makes sense we can go
07:09 - through it really quickly what time we
07:11 - got twenty five minutes alright so we'll
07:14 - go through really quickly essentially
07:15 - what's happening when you connect we're
07:17 - gonna check if we have an even amount of
07:19 - players or an odd amount of players if
07:21 - it's an odd amount of players when you
07:23 - connect that means we need to create a
07:24 - new game so we create a new game if it's
07:26 - not that means we need to assign you to
07:28 - a game so what we're gonna do is make
07:30 - the current game that only has one
07:32 - player in it ready we're gonna assign
07:34 - you to that and start a new thread when
07:36 - we start the new thread what's gonna
07:37 - happen is we're gonna send to the client
07:39 - what player they are either player zero
07:41 - or player one and then what we're gonna
07:44 - do is we're going to constantly receive
07:46 - string data from the client if the game
07:49 - still exists then what we'll do is we'll
07:51 - check if they're sending us reset get or
07:53 - remove if they're sending us a move
07:55 - we'll make that move if they're sending
07:56 - us reset we'll apply that reset to the
07:58 - game and then we're just gonna
07:59 - constantly send back to them the game
08:01 - object and now what we need to do is
08:03 - just really quickly add some else
08:04 - statements in here so that if some of
08:06 - this stuff doesn't happen we have like a
08:08 - catch for it okay so what we'll do here
08:11 - is we're just gonna simply say else
08:12 - break okay
08:14 - that should be aligned up here and we're
08:16 - just gonna add a try and except up here
08:19 - so we're gonna say try and we're gonna
08:20 - indent all this by just highlighting and
08:22 - pressing tab let us say accept and then
08:26 - pass I think that's yeah no not passer
08:29 - accept and then break just in case you
08:32 - know something goes wrong with this data
08:33 - dot receive we want to make sure the
08:34 - server keeps running so we have that try
08:36 - and accept and then underneath this
08:38 - except in line with the main function
08:40 - indentation what we'll do is if we break
08:43 - it out of this while loop we need to
08:44 - close the game and delete it so to do
08:47 - that is actually we're going to print
08:51 - some on my wrong file here
08:53 - two prints lost connection and then
08:59 - we're gonna print what do you call it
09:02 - closing game okay actually we can print
09:05 - that game ID two won't see what game
09:07 - idea we're closing so I said lost
09:08 - connection closing game game ID okay and
09:12 - then we're gonna try to delete games
09:17 - game ID otherwise we will accept and
09:24 - pass okay and then underneath here last
09:28 - thing we're gonna do is gonna say ID
09:29 - count - equals one and we're going to
09:32 - say connection got close now that I
09:35 - actually think about it we should
09:37 - probably put this closing game only in
09:39 - this try after we delete just so that we
09:42 - don't we only close the game once we
09:43 - don't say we're closing the game twice
09:45 - okay so what we're doing down here
09:47 - essentially is if we break out of this
09:49 - while loop so for example if the game no
09:51 - longer exists we're gonna break if
09:53 - something goes wrong with this getting
09:55 - data so like the player disconnected
09:56 - we're gonna break we're gonna say lost
09:58 - connection we're gonna try to delete
10:00 - that game the reason we have this try
10:02 - here is because if both players
10:03 - disconnect at the same time one player
10:05 - will delete the game before the other so
10:07 - if we try to delete a key that doesn't
10:09 - exist we're gonna run into an issues we
10:10 - try that if that works
10:13 - we'll say print closing game and then
10:15 - we'll say that game ID otherwise we're
10:17 - gonna pass we're going to subtract from
10:18 - the ID count and we're gonna close the
10:20 - connection sweet so we're rolling we're
10:22 - going pretty fast here now all we got to
10:24 - do is code the client now this is
10:27 - probably the most amount of code I think
10:28 - it's about a hundred lines it just is a
10:30 - lot of drawing stuff okay so I'm gonna
10:32 - take a break we'll be back in one second
10:34 - and we're gonna code the client alright
10:38 - so I'm back now and we've got about 150
10:40 - lines to write for this file it's pretty
10:43 - tedious because a lot of the stuff is to
10:44 - do with the drawing like we need those
10:46 - buttons to be working
10:47 - we need like all that text to be showing
10:50 - up so that's like 90 percent or not 90
10:53 - percent but like 70 percent of the code
10:54 - about to write is just gonna be cosmetic
10:56 - stuff but I mean what do you want me to
10:58 - tell you that's what we need to do if
11:00 - we're gonna make an online graphical
11:01 - game right so let's start by just coding
11:04 - a class and this is gonna be a button
11:06 - class
11:07 - just that when we have those three
11:08 - buttons you know it just makes things
11:10 - easier so we're gonna do our Annette
11:12 - what do we need to be in it I'm gonna go
11:15 - for text sorry I'm coding in the wrong
11:20 - file text XY and color and we're just
11:24 - gonna say that the width and the height
11:25 - will be uniform in here and we'll just
11:27 - make it the same for all of our buttons
11:28 - we're gonna say self-thought tax equals
11:30 - text self dot x equals x self dot y
11:36 - equals y and self the color equals color
11:41 - okay sweet we also add a width and a
11:44 - height here so we'll say self dot width
11:45 - equals 150 self-thought height equals
11:49 - 100 and feel free to play with these
11:50 - numbers it's just what I decided by the
11:52 - way guys just really want to say this
11:54 - I'm not focusing on how good this game
11:56 - looks I know it looks like crap but you
11:58 - guys I know can go through and tweak the
12:00 - colors and tweak the positions and all
12:02 - that I just don't want to focus on that
12:04 - because I want to get the hard stuff out
12:05 - of the way in the tutorial okay so let's
12:07 - do a little draw method in here
12:08 - pretty straightforward there's a new
12:10 - play game dot draw dot rect and then for
12:14 - the rectangle we're gonna take window
12:16 - which is that parameter for the draw and
12:18 - then we're gonna do which we do color so
12:21 - self docked self thought color and then
12:24 - we're gonna need that rectangle position
12:26 - which is gonna be self dot X self del Y
12:28 - self dot width and self dot tight like
12:34 - that okay and then I guess let's see if
12:37 - there's anything else we need to add to
12:38 - that no that's fine we're going to find
12:40 - a font so we actually need to make sure
12:42 - you just add this at the top pi game
12:44 - font got an it okay
12:45 - make sure you guys add that and we're
12:47 - gonna do font equals high game dark
12:51 - thoughts dot s sys font should help you
12:56 - spell font correctly and then here
12:58 - you're gonna pick your favorite fonts
13:00 - I like Comic Sans I'm gonna make this
13:03 - how big should this be let's make it 40
13:06 - and then what we're gonna do is going to
13:08 - render some font so we're gonna say text
13:10 - equals thought dot render and we're
13:13 - gonna put self dot text we're gonna do
13:15 - one and we're gonna do the color which
13:17 - will be I guess in this case
13:19 - or white 255 255 255 okay next we're
13:24 - gonna draw this on the screen now we
13:25 - want this to be centered on the button
13:26 - so I'm gonna do some like decently
13:29 - complicated math it's not really that
13:31 - crazy but we're gonna say wind up blue
13:33 - text and then we're gonna say
13:35 - self-thought X - is it - no it's +
13:41 - self-taught x + in brackets and we're
13:44 - gonna round in these brackets I know
13:45 - this is confusing or a new self though
13:47 - with over two - round and we're gonna
13:51 - say text get underscore width over 2
13:55 - now what this is doing essentially is
13:57 - we're starting out our exposition but
14:00 - obviously we want our text to be
14:02 - centered so to send our text we need to
14:05 - know not only the width of the like
14:07 - container of the button but the width of
14:09 - our text so we're gonna get the width of
14:11 - our text our VAR button we're gonna
14:13 - subtract that from the width of woody
14:17 - coats our text so that way it should add
14:20 - like 20 or 30 pixels from the left side
14:23 - so our Texas Center okay for the Y we'll
14:26 - do a similar thing so inside make sure
14:28 - you don't mess up these brackets inside
14:30 - here we're just gonna actually copy this
14:32 - and we're gonna paste it right after a
14:34 - comma and we're simply gonna say self
14:36 - dot y + round self dot height okay plus
14:42 - text dot get underscore height or minus
14:46 - Tex together it's gonna right over - and
14:48 - that should Center our button yeah okay
14:51 - next we're gonna say define click we're
14:54 - gonna add a position here this is just
14:56 - gonna tell us if we clicked on the
14:58 - button or not so it's a really basic if
15:00 - statement yes we're just gonna say X 1
15:02 - equals pause 0 + y 1 equals pause 1 now
15:09 - what we're gonna say is gonna say if
15:10 - self dot X is less than equal to X 1
15:13 - less than or equal to self dot X + self
15:16 - dot width and self dot y is less than or
15:23 - equal to Y 1 less than or equal to self
15:27 - dot y + self dot height believe that's
15:30 - correct
15:31 - just check this yep that's correct then
15:36 - what we'll simply do is we'll return
15:37 - true indicating that we did press the
15:40 - button otherwise we will return false
15:42 - now I know I'm speeding through this but
15:44 - it just cuz it's really basic PI game
15:45 - stuff and we're doing online games so
15:47 - make sure I change that so don't want to
15:50 - focus too much on the cosmetics but
15:51 - essentially what this is doing is it's
15:53 - checking if the coordinate which we're
15:55 - going to pass in here which is going to
15:56 - be a tupple of x and y of our mouse
15:58 - position is actually in the button and
16:01 - the way we're doing that is we're saying
16:02 - well we go on the X right we check if
16:05 - it's greater than the X we check if it's
16:07 - less than the X plus the width so like
16:09 - if it's in between the little box and
16:11 - then for the Y value we do the same
16:13 - thing but we're checking vertically to
16:14 - see if it's in that box if you don't
16:16 - understand that I have PI game tutorials
16:18 - where I go through like collision and
16:19 - how all that works I'm not really going
16:21 - to talk about that right now okay sweet
16:23 - so we've got that working now what we're
16:25 - gonna do is actually let's see what I
16:27 - want to code now let's code the main
16:33 - function and that will get them to
16:34 - redraw window so the first thing we're
16:35 - gonna do is we're gonna define those
16:36 - three buttons so we're gonna have at the
16:38 - bottom of our screen so
16:39 - rock-paper-scissors do that we're gonna
16:41 - say buttons equals and we're just gonna
16:43 - make three buttons first button will be
16:45 - rock so you say rock we're gonna start
16:47 - it at 5500 and then we're just gonna go
16:50 - and give it a color of zero zero zero
16:53 - okay we're gonna create another button
16:55 - will say button and then we'll say
16:59 - scissors we'll give it a let me just
17:03 - check here 250 as next 250 as next 500
17:09 - as Y and for the color for that I gotta
17:12 - check what color I made this I believe
17:14 - that I made that red okay so the two
17:19 - 5500 and then one more button can anyone
17:24 - guess what this one is going to be it's
17:26 - gonna be paper we're gonna put this out
17:29 - of position of 450 so we can go here 450
17:35 - 500 and we will simply make it blue or
17:39 - green sorry 0 255 0 so red green blue
17:43 - okay sweet so that should be it for our
17:46 - buttons and now we'll get into the main
17:49 - function and start coding some stops
17:51 - [Music]