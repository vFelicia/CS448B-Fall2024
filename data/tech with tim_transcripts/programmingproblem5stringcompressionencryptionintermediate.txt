00:00 - hey guys and welcome back to another
00:01 - programming problem and solution video
00:04 - so in this video we're gonna be going
00:06 - into probably I would say a medium level
00:08 - program or a problem so if you're a
00:11 - beginner feel free to listen to the
00:13 - problem and see if you have any idea how
00:15 - you would solve it but I will note that
00:17 - it is a little bit more advanced it's
00:19 - not a crazy difficult solution but just
00:21 - to understand the problem and the
00:22 - process to go through to do it is you
00:25 - know a little bit more complicated than
00:26 - obviously what we did in the last video
00:27 - which was just very basic programming
00:30 - problems so with that being said let's
00:34 - get started it's actually quickly sorry
00:37 - before we get started all this stuff is
00:39 - gonna be up on my website so like the
00:40 - actual problem and then the code and the
00:42 - solution so he just click the link in
00:44 - the description should bring you the
00:45 - website I don't know if I'm gonna do
00:46 - this for all of them but for ones where
00:48 - I have like longer solutions and the
00:50 - problem something like this like not on
00:52 - a different website I'll just put out my
00:54 - website so you guys can go on there and
00:55 - look at it okay so essentially you guys
00:57 - can read through this problem if you
00:58 - want I mean feel free to pause the video
01:00 - and attempt it it's not super difficult
01:01 - but what we need to do is given some
01:04 - input like this where the first line or
01:06 - the first input actually stands for the
01:09 - amount of inputs ribbo to get so like
01:12 - we'll get four and that stands for how
01:13 - many lines is about to come so we know
01:15 - how to grab those we have to decompress
01:18 - this into kind of like an encoded form
01:21 - and the way we're gonna do that or at
01:22 - least the problem outline so we should
01:24 - do that is we should look for a series
01:26 - of consecutive characters and then
01:28 - instead of writing those characters like
01:30 - doing like three plus signs we're gonna
01:32 - do the number three and then the
01:35 - character so you can see down here we
01:37 - get three and then plus sign so it
01:39 - stands for there was three plus signs
01:40 - and then we get three and then equal
01:43 - signs because there's three equal signs
01:44 - and then we get 4 and then exclamation
01:46 - points so four exclamation points so
01:48 - essentially you get an integer character
01:50 - integer character integer character and
01:52 - obviously for Strings like this where
01:54 - there might only be there might be no
01:57 - consecutive characters you're still
01:58 - gonna get 1 3 1 . what like so it stands
02:02 - for 1 1 1 4 1 1 4 5 now I would actually
02:06 - a challenge you guys if you come up with
02:08 - the solution to try to do it the other
02:10 - way around
02:11 - so given this
02:12 - like this sequence turn it into this so
02:15 - if you guys think this is too easy do
02:17 - this take this sequence and turn it into
02:19 - this sequence okay so take your output
02:22 - and like do the inverse essentially of
02:23 - this okay so that's the problem and I
02:27 - want you guys to think about how you
02:28 - would go about solving this and then I'm
02:30 - gonna bring up my solution now and I'll
02:31 - go through how I solved and just prove
02:32 - to you that's working so my solution I
02:36 - did in two ways the first way is so the
02:38 - input right actually bring up this table
02:40 - again let's make it a bit smaller the
02:43 - inputs this and the way it wants you to
02:44 - read the input in is like using
02:46 - literally input so it says like you're
02:49 - gonna use input you're gonna say how
02:51 - many lines are coming and then you get a
02:52 - loop through that many lines get the
02:53 - input stored in a list and then
02:55 - essentially solve that problem for each
02:57 - of the different inputs right and then
02:59 - give some kind of output for me I'm just
03:01 - put all my input into a text file just
03:03 - so I when I what do you call it keep
03:05 - testing this I don't have to keep like
03:08 - typing in the input again I recommend
03:09 - you guys do it as well so I forgot a
03:11 - Python YouTube programming problems you
03:14 - can see the input that they had there I
03:15 - just put in a text file so that I can
03:17 - just read it in constantly when I run
03:20 - the program rather than having to type
03:21 - it in but I mean you guys could type it
03:22 - in as well and I'll show you how each of
03:24 - them works we'll leave that open too so
03:26 - I'm gonna open this text file right
03:28 - which was right here we're gonna read in
03:30 - all of these lines then what I'm gonna
03:32 - do is I'm gonna say actually to change
03:33 - this one second
03:34 - like that I'm gonna say four line in
03:37 - lines so essentially for each line so
03:39 - each line of input we're gonna solve the
03:41 - problem right because we're gonna have
03:42 - to solve the problem well four times now
03:44 - since I'm reading it in from a text file
03:46 - I just have to remove this backslash n
03:48 - character because you can't actually see
03:50 - it but when you write a text file like
03:52 - this at the end of each line there's
03:53 - little backslash n that stands for go to
03:56 - the next line but when you read that
03:57 - into Python you'll see that so you gotta
03:59 - get rid of it okay so we get rid of
04:01 - backslash n and then what I'm doing is
04:03 - I'm defining three variables what I'm
04:04 - gonna use essentially to will solve the
04:06 - problem here and these are gonna reset
04:08 - every time we do a new line and solve
04:11 - like the problem again right so I'm
04:13 - setting new string which is gonna be
04:14 - essentially my output I'm saying last
04:17 - which is just the first character in the
04:19 - string and I'm saying count equals one
04:21 - and essentially the principle behind my
04:23 - solution is what I'm gonna do is I'm
04:25 - gonna keep track
04:25 - of the last character in the string I'm
04:27 - going to see if the current character
04:30 - I'm looping through is equal to that if
04:31 - it is I'm gonna add one to the count so
04:34 - we're gonna say we've seen two plus
04:36 - signs and then as soon as I reach a
04:38 - character where it's different from the
04:39 - last character what I'm gonna do is I'm
04:42 - going to add the previous character I'm
04:44 - gonna add sorry the amount so like
04:45 - whatever my count variable is at plus
04:48 - the previous character to that string
04:50 - that's gonna be our output and then I'm
04:52 - gonna reset the count and reset the last
04:54 - character to be like to be 1 and then
04:57 - whatever the next character is and then
04:59 - we're gonna continue that process until
05:00 - eventually we get to a point where
05:02 - there's no more consecutive
05:03 - what-do-you-call-it characters at all
05:05 - and we're done looping through the
05:07 - string so I'll show you the solutions
05:09 - working and then I'll draw out exactly
05:11 - how it works so you guys get an idea and
05:12 - we'll go through like line by line what
05:13 - it does so let me run this and you can
05:17 - see we get 3 plus 3 plus 3 and then so
05:20 - like three pluses three equal signs for
05:22 - exclamation points six 7s six periods 12
05:26 - tees one bracket to eight right so you
05:28 - can see and that obviously lines up with
05:30 - with this as well and you can see that I
05:33 - don't think I made any mistakes in my
05:35 - solution and to give you guys an idea of
05:37 - how long this took me to make I program
05:39 - the solution in probably about like five
05:41 - minutes so I mean you guys can gauge how
05:44 - well or how good you're doing based on
05:47 - that I guess I don't know so anyways
05:48 - that is kind of the solution let's go
05:51 - through it line by line and then let's
05:52 - draw out a few examples and run through
05:54 - what the solution actually does for that
05:55 - so what we're doing obviously is for
05:58 - every line in line we're gonna set these
05:59 - variables already talked about that and
06:01 - this is really where the magic happens
06:02 - in this for that this is the main
06:04 - solution so I'm just gonna do this so I
06:05 - can see it a bit easier so essentially
06:08 - for every character in our line not
06:10 - including the first one that's what it
06:12 - says in this comment here - now why do
06:13 - we not look at the first one well we've
06:16 - already looked at the first one here
06:18 - we've said worked at getting the first
06:19 - character and we're gonna say the count
06:21 - is one because well you're never gonna
06:24 - have a count of zero because you're
06:25 - always gonna have at least one character
06:26 - right like you can't have zero pluses
06:29 - otherwise you wouldn't have a plus so we
06:31 - say line zero count 1 which means we're
06:35 - going the first character and we're
06:36 - saying it's count is currently 1 we've
06:37 - seen that character at one time
06:39 - now what we do is we go in this for loop
06:41 - and we're gonna loop through every
06:42 - character past past that first character
06:44 - so we're gonna loop from the second to
06:45 - the end what we're gonna do is we're
06:47 - gonna say if the current character so
06:49 - the second character in this case is
06:50 - equal to the first character or you know
06:53 - the last character then we're gonna add
06:55 - one to count which means we've seen
06:57 - essentially two consecutive characters
06:59 - so they're the same thing and then
07:02 - that's all we're gonna do for that loop
07:03 - now in the instance where they're not
07:05 - the same so we see two different
07:06 - characters we're gonna do exactly the
07:08 - process I talked about which is we're
07:10 - going to add to our output string which
07:12 - is new string here the count so the
07:15 - current count whatever it was because
07:16 - right now let's say we only seen this
07:18 - character once is not equal to the next
07:20 - character well we're gonna say well the
07:22 - current count was one so we're going to
07:23 - put one we're gonna add a space because
07:25 - that's what the output requires and then
07:27 - we're gonna add the last character which
07:29 - was well whatever that character was so
07:31 - let's say it was an H we're gonna do one
07:33 - space H and then add another space which
07:37 - is just gonna be so next time we do we
07:39 - add to the string it's like spaced out
07:41 - correctly then we're gonna reset the
07:43 - count and we're gonna say the last is
07:45 - equal to the current character because
07:47 - it's not a consecutive character we need
07:50 - to change it because now we're looking
07:51 - to see if the if this is going to be
07:53 - consecutive and when I draw it out it'll
07:54 - be more clear then at the end here this
07:56 - line is really important because
07:57 - essentially when we get to the very end
08:00 - if we had a series of consecutive
08:02 - characters right so let's say we get to
08:04 - the very last thing and the last
08:06 - character in our string was equal to the
08:08 - previous one we're not going to add
08:10 - anything to the string we're simply just
08:11 - gonna exit the loop because what we
08:13 - added one to count so we have to make
08:15 - sure that we add the last element which
08:17 - is going to be whatever the count was
08:19 - and then whatever that sequence of
08:21 - character was characters were to the
08:22 - string and then for each of these lines
08:24 - we're just gonna print out the output
08:26 - and then it looks like it's stacking the
08:28 - output right and this is actually fairly
08:29 - efficient because this runs in woody
08:32 - call it linear time because we're only
08:34 - doing one loop so this actually run
08:35 - quite quickly Erb yeah well runs linear
08:38 - time for the solution but obviously the
08:39 - amount of input lines is gonna matter as
08:41 - well um so yeah so let's uh I mean like
08:44 - I'll run it one more time and show this
08:45 - and let's take one of these inputs so
08:49 - maybe it will take like this plus plus
08:50 - equals equals and let's run through
08:52 - exactly how it works with like a
08:53 - drawing example just you guys get an
08:55 - idea okay so I actually decided I'm just
08:59 - gonna do a shorter input that I'll write
09:01 - up here just to make this example a lot
09:03 - easier we'll do like that okay so this
09:05 - is gonna be our input pretend this came
09:06 - in as a string we've read it in and
09:08 - we're gonna do the solution now on this
09:10 - input so essentially what we need to do
09:12 - is well we're gonna follow the steps
09:14 - from our program we're going to follow
09:16 - that that for loop that we were doing so
09:18 - the first thing we're gonna do is we're
09:19 - gonna take this character and we're
09:20 - gonna say at last okay
09:22 - is equal to and in this case it's going
09:25 - to be a plus sign right I know that kind
09:26 - of looks like an X but you get my point
09:28 - okay so we'll say that all right so
09:31 - we're saying last is equal to X and we
09:33 - say count so we'll just say it's count
09:35 - to see in here okay make it better say C
09:37 - equals one so the last characters x are
09:39 - or plus even I'm reading it correctly
09:41 - and C equals one so what we'll do now
09:44 - that that's what we've set up we haven't
09:45 - even started looping yet so now we're
09:46 - gonna loop through this part of the
09:48 - string okay those two plus equals equals
09:51 - slash we're not gonna look at this first
09:52 - element because what we already looked
09:54 - at it here and we already counted it so
09:56 - now what we're gonna do is we look at
09:57 - the next element which in this case is
09:59 - like the first index or another plus
10:01 - sign so what we do is we say okay so
10:03 - what is this is it equal to last yes it
10:06 - is so what I'm gonna do is I'm not gonna
10:08 - change last and all I'm gonna do is I'm
10:10 - gonna add one to count so count is two
10:12 - and last is still plus sign because the
10:14 - last character is there so now what
10:16 - we've done is we've essentially let me
10:18 - change colors here to maybe make it a
10:19 - little nicer we've already looked at
10:21 - this and we've already looked at this
10:23 - and now we have last is plus and count
10:25 - is two so what we do now is we look at
10:27 - this equal sign we say well is equal
10:28 - sign equal to last no it's not so what's
10:32 - the procedure there well the procedure
10:34 - there is to add to our new string which
10:36 - we'll just say is here okay this is like
10:38 - our new output string so say it out put
10:41 - okay is that then what we're gonna do is
10:45 - want to add to it the last character or
10:47 - the count in on the last character so
10:49 - we're gonna say out output string so
10:51 - this right is gonna be equal to plus two
10:54 - plus a space which is that plus the plus
10:58 - sign so now our output string if I erase
11:02 - all of this madness here is going to be
11:05 - changed and on
11:06 - gonna write it up here and continue to
11:07 - write it if I can erase all this so now
11:10 - our output string is gonna look like two
11:11 - space plus and this is currently our
11:15 - output string okay so let's keep going
11:17 - so what we do after this is we have to
11:20 - change last we have to change camp so
11:22 - we're gonna say last okay you're no
11:24 - longer your plus sign you are equal sign
11:26 - because that's our last character right
11:28 - and count well what are you equal to
11:30 - your equal to one because we just found
11:32 - this and we've counted it one time okay
11:35 - so let's repeat the procedure so we've
11:37 - we've already looked at that we looked
11:39 - at these first three now it's time to
11:40 - look at this equal sign all right so
11:42 - let's look at this equal sign is it
11:44 - equal to last well yes it is so what's
11:46 - our procedure just add one to count
11:47 - that's all we have to do so now counts
11:49 - equal to two all right we've looked at
11:51 - this one now next element let's look at
11:53 - the / is / equal to last no it's not so
11:57 - what do we do well we got to follow the
11:59 - procedure so we're gonna add to our
12:00 - output string we're gonna say well the
12:02 - count was two and our last element was
12:05 - equal sign so we're gonna add this
12:06 - essentially to this so our new output
12:10 - string is gonna look like two plus two
12:14 - equal sign okay this is our new output
12:17 - string I just put it in a squirrely
12:18 - squiggly things you can see it alright
12:20 - so now we've looked at / right and we've
12:24 - looked at all these so we're actually
12:25 - out of the loop but look our eke let me
12:28 - just clear this now rewrite it so it's
12:29 - easier to plus two equal sign remember
12:33 - in our input was plus plus equal equal
12:37 - slash but where's our slash we don't
12:39 - have slash but how many slashes are
12:41 - there's one slash so that's why and if I
12:44 - exerted this quickly we have this line
12:46 - here so that we account for the last
12:48 - character in our string because if we
12:51 - don't have that line then we end up with
12:53 - well the input that you guys are seeing
12:55 - right now or the output that you guys
12:56 - are seeing right now just this so we add
12:59 - that last line which means we're gonna
13:00 - get the current count which is gonna be
13:01 - equal to one we're gonna get last which
13:03 - will be equal to slash because we set it
13:05 - there
13:05 - right and we're gonna say 1 and slash
13:08 - and that would be our output and that's
13:11 - how we solved the problem so that
13:13 - essentially is this problem I believe
13:16 - the name of it actually was let's see
13:19 - here
13:20 - cold compress pretty decent problem I
13:22 - say yeah medium intermediate level
13:24 - nothing too crazy obviously there's a
13:26 - lot more difficult problems let me know
13:28 - what you guys thought of this in terms
13:29 - of a difficulty level and if you want to
13:31 - see something much more difficult than
13:32 - this in the future um and yeah with that
13:35 - being said make sure you are subscribe
13:36 - to the channel you like the video and I
13:38 - will see you again in another one
13:40 - [Music]