00:00 - hello everyone and welcome to a brand
00:01 - new series on flask in Python now for
00:04 - those of you that aren't aware flask is
00:06 - a micro web framework for building
00:07 - websites with Python it's actually
00:10 - typically used as kind of a back-end and
00:12 - then another front-end is connected to
00:13 - it using something called a restful api
00:15 - but in this video in this series what
00:17 - we're gonna do is just go through the
00:18 - basics of flask understand how to use it
00:20 - how to make websites and how to quickly
00:22 - kind of do development on the web if
00:25 - you're comparing this to something like
00:26 - Django then you're gonna notice quickly
00:28 - that a lot of things that happen in
00:29 - flask are much more simple and make a
00:31 - lot more sense especially if you're not
00:33 - an expert in Python or with Django and
00:36 - flask itself so this is more of a micro
00:38 - framework rather than a full-fledged web
00:40 - framework and that also means that it
00:42 - doesn't include a lot of the nice tools
00:43 - that come with Django like user
00:45 - authentication and database connectivity
00:47 - and all of those kind of things so just
00:49 - want to give you guys a quick preface
00:50 - here you guys will understand as we go
00:52 - through this and you'll see how quickly
00:53 - we can actually develop applications
00:55 - with flask all right so let's actually
00:56 - go ahead to start building our first web
00:58 - page or website with flask you're gonna
01:00 - notice this is gonna go very quickly and
01:02 - what I'm gonna do is just kind of build
01:03 - out the page and then walk you through
01:05 - exactly how all of these different
01:06 - things actually operate although I'm
01:08 - sure most of you guys would be able to
01:09 - figure it out on your own so what we're
01:11 - gonna do is just start by creating some
01:12 - folder now I'm ink up my command prompt
01:14 - window here we do need to actually get
01:16 - into this so just open up CMD from
01:18 - wherever you're gonna open that from if
01:19 - you're on Windows if you're on Mac
01:21 - you're gonna go terminal Linux terminal
01:22 - as well what we're gonna start by doing
01:24 - sorry is actually installing flask so we
01:28 - can install this with a very basic pip
01:30 - command just pip install flask if for
01:32 - some reason your pip isn't working I do
01:34 - have a video try to leave a card to it
01:36 - someone remind me if I forget in one of
01:37 - the corners it kind of goes through how
01:39 - you can actually fix this and get it
01:40 - working another point here I usually
01:42 - recommend that you install this in a
01:44 - virtual environment now you don't need
01:46 - to do this and if you don't understand
01:47 - what this is don't worry about it but
01:49 - that's just good practice so I figured
01:50 - I'd mention it and next you probably are
01:52 - gonna want to put all your Python files
01:54 - for this specific website in their own
01:56 - folder so I've just created one on my
01:58 - desktop or not desktop inside some
02:00 - directories called flask tutorial then
02:03 - I've created one blank Python file here
02:05 - I just called this tutorial 1 dot PI and
02:06 - now we're ready to go and start creating
02:08 - the web page so the first thing we're
02:09 - gonna do is actually just import flask
02:12 - from flask and I'll zoom in here so what
02:15 - am I saying
02:15 - from flask from + import flask
02:18 - so from flask import flask the next
02:21 - thing we're gonna do is actually create
02:22 - an instance of a flask web application
02:25 - now to do this we're gonna say app
02:26 - equals flask and then in here we're just
02:29 - gonna put underscore underscore main
02:30 - underscore underscore now what we're
02:33 - gonna do is actually run this app so
02:35 - I'll show you how to do that we're gonna
02:36 - say if I believe it's under scratch for
02:39 - a name underscore underscore equals
02:42 - underscore main underscore underscore
02:44 - then app dot run now this is pretty much
02:48 - all we need to do with the exception of
02:50 - one thing to actually start a website so
02:52 - this is how easy it really is to create
02:54 - a new project and get a website running
02:56 - now what we're gonna do is actually
02:57 - define the pages that will be on our
03:00 - website so the first page that I'm gonna
03:02 - create is a home page now to do this
03:04 - you're gonna make a function and this
03:05 - function is gonna return what's gonna be
03:07 - displayed on the page so I'm going to
03:09 - fine this as home you can call this
03:11 - whatever you want but usually I like to
03:12 - name my function something that
03:13 - represent what I'm actually going to be
03:15 - displaying so in this case the home page
03:17 - and then from inside these functions
03:19 - you're just going to return for our
03:21 - simple cases right now and we'll get
03:22 - more advanced later with HTML files
03:24 - we're gonna return some inline HTML now
03:27 - all that means is you can literally just
03:28 - write HTML in this string or you can
03:31 - just write some text and that will be
03:32 - displayed as well so I could write the
03:34 - text you know hello this is the main
03:37 - page like that but I can also add and
03:40 - you know stuff like I could add a link I
03:41 - could add like an h1 tag so let's
03:43 - actually do that and I'll show you what
03:44 - that looks like I'll just put it below
03:46 - in all capitals so we can separate that
03:48 - and we can add inline HTML when we're
03:51 - returning it from a function now what we
03:53 - need to do next and this is actually the
03:55 - last step is define how we can access
03:57 - this specific page
03:58 - so right now flask actually doesn't know
04:01 - where we should be going to get to this
04:03 - page so we need to give it a route now
04:05 - to do this we're actually gonna decorate
04:07 - this function with app dot root so put
04:10 - the @ sign then app dot root and inside
04:12 - here we're gonna define the path that we
04:15 - want to use to get to this function so
04:17 - you guys know in the URLs when you have
04:19 - you know the whatever the domain name is
04:21 - so for example tech with Tim net and
04:23 - then you say slash and then whatever the
04:24 - page is the
04:25 - you want to go to in this case if we put
04:27 - slash that will mean that whenever we go
04:29 - to our default domain whatever that
04:31 - might be it will automatically send us
04:33 - this home page although we can also you
04:35 - know put something like slash home and
04:37 - when we do something like that then that
04:39 - means if we type slash home we will go
04:40 - to the home page so in this case I'm
04:42 - just gonna leave it as slash for now and
04:44 - now I'm gonna show you how to run the
04:45 - application and we'll have a look at
04:46 - what we've actually just made so from
04:49 - our command prompt window or whatever
04:50 - kind of interpreter you want to use to
04:52 - run this I mean if you're doing this an
04:54 - ideally you can just press f5 but I'm
04:56 - just gonna run Python tutorial 1 dot pi
04:59 - give it a second o underscore R square
05:02 - main is not defined what is this oops I
05:05 - believe this would actually be named up
05:07 - here my apologies guys so up here this
05:08 - has to say underscore underscore name
05:10 - underscore underscore silly mistake let
05:12 - me make sure I actually save this and
05:14 - now run that and we should be good to go
05:17 - sweet so now we get this output here
05:20 - we're saying serving flask app tutorial
05:21 - one lazy loading environment production
05:24 - and then it's giving us a little warning
05:26 - here saying don't use the development
05:28 - server in a production environment
05:29 - that's fine we don't need to worry about
05:30 - that for right now so what we're gonna
05:32 - do is copy the URL that's here it should
05:34 - be the same for you so 127.0.0.1 at port
05:38 - 5,000 that's just the default port that
05:40 - this runs on we're gonna copy that we're
05:42 - gonna go to a web browser then we're
05:44 - going to paste that URL in there and hit
05:46 - enter now we get this output that says
05:48 - hello this is the main page and then we
05:50 - get hello so you can see that in line
05:52 - HTML that I wrote here saying you know
05:54 - h1 hello actually is working and it's
05:57 - serving us this page that's giving us
05:58 - that kind of output just notice though
06:00 - if I try to go to you know slash home we
06:03 - do get an error we're saying not found
06:04 - is just our default 404 you know like
06:06 - not found page because we haven't
06:08 - defined a route for where slash home
06:10 - should go so let me show you a few more
06:13 - things with this routing and then we'll
06:14 - actually kind of end the video there and
06:16 - get into some more stuff so I want to
06:17 - create another page now in this case
06:19 - what I'm going to do is actually define
06:21 - a page and we'll just call this like
06:23 - user or something like that
06:24 - now in here what we're gonna do is
06:27 - simply return I'm actually gonna add a
06:29 - parameter in here called name we're
06:30 - gonna return and I'll just do an F
06:32 - string here hello name and just note if
06:36 - you're not using Python 3 6 you won't be
06:38 - able to
06:39 - do that but I'm sure you can figure out
06:40 - how to actually get name in this string
06:41 - so we'll do hello name and then what I'm
06:43 - gonna do is decorate the scan with app
06:45 - dot root and this time I'm gonna do
06:47 - something that's a little bit different
06:48 - to show you some cool things we can do
06:50 - here if I actually decide to put some
06:53 - things in beside in between tags like
06:56 - this this means that whenever I type
06:58 - something it's actually gonna grab that
07:00 - value and pass it to my function as a
07:03 - parameter which means I can do something
07:04 - like name inside of here and what's
07:07 - actually gonna happen is when I type
07:09 - something I don't have to type name I
07:10 - can type anything I want it will pass
07:13 - that string of text to this parameter
07:14 - user so for this function and then will
07:17 - actually display whatever name it is I
07:19 - typed in this URL bar as our webpage and
07:22 - you guys will see how this works so
07:23 - let's restart this you can stop this by
07:25 - hitting ctrl C we might have to hit it a
07:28 - few times it's usually what happens to
07:30 - me I'm gonna run this now give it a
07:32 - second go back to my webpage and now
07:34 - when I type slash home and refresh we
07:36 - can see we get hello home so the basic
07:39 - principle of this is you know if you put
07:41 - little tags like this so the greater
07:43 - than sign and the less than sign and you
07:45 - put some variable name inside there you
07:47 - can actually pass it as a parameter
07:48 - which allows you to display you know
07:50 - different information on the screen or
07:51 - get for example maybe a post ID or
07:54 - something like that all right so I'm
07:55 - just going to show you guys one last
07:56 - thing and this is how we can actually
07:57 - redirect different pages from our code
08:01 - so right now if we want to get to a
08:02 - different page what we need to do is
08:03 - type that actual page but maybe
08:05 - sometimes you know user goes to a page
08:07 - maybe they're not supposed to be there
08:09 - they're not authenticated we need to
08:10 - redirect them well how do we do that
08:12 - well what I'm actually gonna start by
08:14 - doing is importing up here called
08:16 - redirect pretty straightforward and I'm
08:18 - also going to import another function
08:19 - called URL for now these two are going
08:22 - to allow me to actually return a
08:24 - redirect from a specific function so
08:26 - let's do a quick example here and maybe
08:28 - we have an administrator page that can
08:30 - only be accessed by someone who's signed
08:31 - in and an admin what I'm gonna do is say
08:34 - you know app dog root will put a
08:36 - decorator here we'll just start from the
08:37 - top this time and I'll put slash admin
08:40 - that's gonna be our root and then here
08:42 - what I'm gonna do is say define admin
08:44 - I'll just put you know
08:46 - anything there what I'm gonna return is
08:48 - actually a redirect now what a redirect
08:51 - does is just redirect you to a different
08:53 - page so this is pretty easy to do all
08:55 - you're gonna do is literally type
08:56 - redirect once you have it imported and
08:58 - then type URL for and inside here you're
09:01 - gonna put the name of your function
09:03 - inside of strings so you might think
09:05 - that it would make sense to do something
09:06 - like slash right as your redirect but
09:09 - what we actually want to do is put the
09:10 - name of the function that we're going to
09:12 - be redirecting to so rather than putting
09:14 - something just like slash which you know
09:16 - would usually represent home we actually
09:19 - need to define the function and put the
09:21 - name of it which is home same thing goes
09:23 - for user I could put user as well but
09:24 - actually there might be an issue with
09:26 - user because we don't have a name tag so
09:27 - I won't talk about that for right now
09:29 - I'll just show you that if I do this and
09:31 - I spin my server up again so python
09:33 - tutorial 1 go here we'll refresh this
09:36 - page at slash admin you can see it
09:38 - redirects us directly back to that home
09:40 - page and we don't ever get anything from
09:42 - the admin page like that now this is
09:45 - great because you could technically
09:46 - return different things like you could
09:47 - create a variable up here that says you
09:49 - know admin actually we'll just call it
09:51 - like a equals false and then you could
09:54 - say something like if a so if that's
09:57 - true maybe we return a different
09:58 - response then if you know we're not the
10:01 - administrative user so that's kind of
10:02 - all I'm going to show you guys for right
10:03 - now I just wanted to give you an idea of
10:05 - how basic this is to actually get
10:07 - something up and running and how you can
10:08 - create you know basic kind of you user
10:10 - interfaces and web-based stuff with
10:12 - flask for now so we've kind of shown you
10:15 - know how to redirect how to get some
10:16 - pages up how to start the server how to
10:18 - install flask in the next videos will
10:20 - obviously get into some more complicated
10:21 - things talk about how to render full
10:23 - HTML templates and how to do some more
10:25 - advanced things like that because have
10:27 - anything that you specifically want to
10:28 - see for this tutorial leave a comment
10:30 - down below and I'll try my best to
10:31 - incorporate it into the series and with
10:33 - that being said I will see you guys in
10:34 - the next video