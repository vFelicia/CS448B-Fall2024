00:00 - hey guys I was just editing this video I
00:02 - want to make a quick introduction for
00:04 - the second part just because there is a
00:06 - few errors that I run into near the end
00:08 - of this video so it is really important
00:10 - you guys watch the whole thing because I
00:12 - do fix those errors at the end and if
00:14 - you don't watch it you're not gonna find
00:15 - the fix and you know wonder what was
00:17 - going on anyways I hope you guys enjoy
00:20 - the video if you do please make sure you
00:22 - leave it like and subscribe and yeah so
00:25 - now we're gonna move on to I don't know
00:28 - I would say the more fun stuff which is
00:30 - the AI and this is where things get a
00:32 - little bit more interesting and maybe
00:34 - slightly more advanced because what
00:36 - we've done right here is pretty well
00:37 - just basic coding just running through a
00:38 - bunch of different functions so I'm just
00:40 - gonna go into my main function here now
00:44 - and what I'm gonna do is I'm just gonna
00:45 - edit this this little section that I've
00:47 - written here now this is just because
00:50 - the way that I'm gonna do things is our
00:52 - computer move is gonna return a move to
00:54 - us so I what I want to say is I want to
00:57 - say move is equal to computer me okay
01:01 - okay and then after that we're not gonna
01:04 - print the board yet because we want to
01:06 - check something I want to say if move is
01:09 - equal to zero and this is gonna mean
01:11 - that our computer move function was not
01:14 - able to come up with a move either
01:15 - because the board is full from the
01:18 - player moving into the last position or
01:20 - for any other strange reason we're just
01:22 - gonna say print tie game like that
01:26 - because if there's no more moves that
01:28 - the computer can do then it must simply
01:30 - be a tie game otherwise that means we've
01:32 - got a move that wasn't zero so it was
01:34 - one to nine we're just gonna insert that
01:36 - move into the board and in this case
01:40 - what do we call it the letter insert
01:41 - that letter or whatever in this case our
01:44 - computer is gonna be a stubby board like
01:48 - so and then we're going to print a
01:51 - little message just telling our user
01:52 - what happened and this is also just to
01:54 - break things up so it's easier to see
01:56 - the the grid that we're gonna print out
01:58 - and I'm just gonna say computer place
02:02 - and and then in this case we'll do two
02:05 - backslashes again and OH
02:10 - in position , move and then after that
02:17 - I'm just gonna do a : because why not
02:22 - all right after we do this then we're
02:24 - gonna print the board because we want it
02:27 - to wait until we've inserted the letter
02:29 - into the board before we print it out
02:31 - and then that's pretty much it for our
02:34 - computer move little I don't know series
02:38 - of instructions here so now we can move
02:39 - into the actual AI so pretty much the
02:42 - way that this is gonna work is we're
02:43 - gonna follow a really basic algorithm
02:45 - and the algorithm is gonna have five
02:46 - steps the first step is gonna say is
02:48 - there a move that we can do that's gonna
02:50 - result in us winning if there is let's
02:53 - take that move because that means the
02:55 - game's gonna be over and we win as the
02:57 - computer the next step is gonna say okay
03:00 - so we can't win on a move is there a
03:02 - move that the player can do one their
03:04 - next turn that is going to make them win
03:06 - the game if we find that move then what
03:10 - we're gonna say is no we're not gonna
03:12 - let you do that we're gonna block that
03:13 - move by moving into that position after
03:16 - that we say okay so I can't win the
03:18 - player can't win so it's not as
03:20 - important where we move so we're gonna
03:22 - decide on we're gonna pick a corner to
03:25 - move to all right if there's no corners
03:28 - to move to they've all been filled up
03:29 - we're gonna check if the center's been
03:30 - taken if the center has not been taken
03:32 - yet we're gonna take the center and then
03:35 - after that what we're gonna do is we're
03:36 - gonna move to any open edge and and the
03:38 - edges I mean are pretty straightforward
03:41 - then off the corner they're not the
03:42 - center right so that is the five main
03:45 - steps I believe was that four or five I
03:47 - don't know four or five main steps that
03:49 - we're gonna follow as the computer we're
03:51 - gonna run through that algorithm to
03:53 - determine where we're gonna move so the
03:55 - first thing I want to do is I just want
03:56 - to make a list of possible moves and
03:58 - possible moves is gonna be any empty
04:00 - square still left on the board so to do
04:04 - this I'm just gonna say possible moves
04:06 - is equal to em to leave it did like a
04:09 - little four thing here I'm just gonna
04:10 - have a look at my old code because I did
04:12 - it pretty efficiently yeah so I say X 4
04:15 - X N or X 4 X letter
04:21 - and numerate bored now he might not know
04:28 - what all this means but I'll explain it
04:30 - in one second if letter equals equals
04:33 - blank and X does not equal zero okay so
04:38 - this looks kind of confusing but pretty
04:41 - much what we're gonna what we're saying
04:42 - here is we're running a for loop and I
04:44 - just do this all in one line just cuz
04:45 - it's faster I'm gonna say 4x letter so
04:48 - this is gonna be our indicee and this is
04:51 - gonna be the actual value in enumerate
04:53 - board so what a numerate does is it
04:55 - gives us all the indices and the actual
04:58 - values of the things in our list so it
05:00 - for example in board it's gonna give us
05:02 - something like 0 blank space 1 X 2 O and
05:08 - that's gonna be stored appropriately an
05:09 - X and in letter and then we're gonna
05:12 - check and this is just in the same line
05:14 - I just write it cuz it's faster if the
05:16 - letter is blank so meaning we don't have
05:18 - something there and the indices not 0
05:20 - because we we always have that blank in
05:22 - to see at the beginning of our list so
05:24 - we don't want the computer to think that
05:26 - they can move into the 0 position
05:28 - because that's not allowed so that's why
05:30 - I just put this in X cannot equal 0 so
05:32 - this just checks the indices of all the
05:35 - possible positions we can move into that
05:38 - aren't already filled and then it puts
05:39 - it in a list so it'll generate a list
05:41 - like 1 4 or 5 6 or something like that
05:44 - whatever positions are aren't yet full
05:47 - ok so that's what possible moves does
05:49 - now after that I'm just gonna set a
05:51 - default move variable here equal to 0 so
05:55 - that when we get to the end of our
05:56 - program if we haven't yet found a move
05:58 - to do we're gonna return the move which
06:00 - is going to be 0 and then we're going to
06:01 - say taiking in our program ok so now we
06:05 - have to go through the first step and
06:06 - the first step was to check if there is
06:07 - a move that we can do that would result
06:09 - in a win now there's a few ways that you
06:12 - can do this the way that I've kind of
06:13 - figured out um is the most efficient way
06:17 - to do it and it makes the most sense
06:18 - what we're gonna do is we're gonna make
06:20 - a copy of the board we're gonna move
06:24 - we're gonna check every single empty
06:26 - position and see if when we move into
06:30 - that position in the copy of our board
06:32 - if it's a winning position or not
06:35 - that might sound confusing it's hard to
06:37 - explain but let me just go through the
06:38 - code with you guys so since we're gonna
06:40 - have to check if we win and then we can
06:42 - check if the player can win on their
06:43 - next turn let's do this in a little for
06:45 - loop so I'm gonna say four let in and
06:47 - this just stands for the letter O
06:49 - because that's gonna be our letter and
06:51 - then X like this so what this is gonna
06:54 - do is its first gonna check to see if
06:57 - always can win and then it's gonna check
06:58 - if XS can order now I'm going to say for
07:01 - I in possible moves so this is gonna
07:04 - give us all of our positions like 1 3
07:06 - whatever ones are blank we're gonna make
07:09 - a board copy simply called board copy
07:11 - and to do this you could make an alias
07:14 - which which would be just doing this but
07:17 - if you did this
07:18 - that would mean when you reference board
07:20 - copy in your program and you change
07:23 - something about board copy it would
07:25 - actually change the original list our
07:27 - original original board list so what we
07:30 - need to do to make a clone is to put a
07:32 - colon like this so that the program
07:34 - knows we don't want to just reference
07:36 - this with a new name we want to actually
07:38 - make a copy of it and create a new space
07:40 - in memory for that I can go through that
07:43 - in another video how exactly that works
07:44 - in Python with what do you call it I
07:48 - think there's something to like
07:50 - immutable and mutable I believe that's
07:52 - what they called variables because lists
07:54 - are mutable that's why you can do
07:55 - something like that um anyways let's
07:57 - move on to the next step I'm going to
07:59 - say board copy I equals left now what
08:04 - this is gonna do is we've made a copy of
08:06 - our board now we're gonna simply place
08:09 - our letter which is going to be either o
08:12 - or X based on which one we're checking
08:14 - into the indicee and the for in the for
08:17 - loop of possible moves so for the first
08:20 - empty position is let's say 1 which is
08:23 - going to be top left we're simply going
08:25 - to say that top left is equal to o and
08:28 - then now we're gonna check if that
08:30 - results in a winning in a winning game
08:32 - for us so to do that we're gonna say if
08:34 - is winner give it a board and in this
08:38 - gates gonna be board copy and a letter
08:40 - and the letter is gonna be the current
08:41 - letter that we're checking in this case
08:43 - o at the beginning and that X later and
08:45 - then if that's true we're
08:48 - say move equals I returned with so let
08:52 - me go back through this groups one more
08:54 - time just in case anything's confusing
08:57 - we're gonna check through OHS and we're
08:59 - going to check through exes we first
09:01 - have a look through all the possible
09:02 - moves that we can do and that's any
09:03 - empty space which we've defined up here
09:05 - we're gonna create a board copy there's
09:07 - gonna be a copy of our original board
09:09 - and then going through each possible
09:11 - move we're going to place a letter into
09:14 - that empty position in our copy of the
09:17 - board we're gonna check if that board
09:20 - copy is a winner or not so if we win
09:22 - with that and if it is we're just gonna
09:24 - say that's our move and we're gonna
09:25 - return that and we're gonna get out of
09:26 - computer move function because we're
09:29 - just gonna continue because that's the
09:30 - move we want to do it's gonna win for us
09:31 - now same thing goes for here except now
09:34 - we're checking if the player can win
09:35 - so we're saying okay so if we're a
09:37 - player where would we have to move to
09:39 - win if we find a position where we can
09:41 - win on the board well we don't want the
09:43 - player to win so we're gonna move into
09:44 - that position to block them by doing the
09:46 - same thing here and that is pretty much
09:49 - it for the first two steps so that's two
09:51 - steps down in one we check if we can win
09:53 - we check if player can win and then we
09:55 - move appropriately now it gets a little
09:57 - bit easier and we want to check if any
10:00 - corners are open so say no there's no
10:01 - position where we can win there's no
10:02 - position where the player can win we
10:04 - want to move to any open corner but we
10:06 - don't wanna be predictable so we have to
10:08 - find all the open corners and we're
10:09 - gonna randomly decide which we want to
10:11 - move into say corners that are open
10:13 - equals blank list and say for I in
10:18 - possible moves if I in and the corner is
10:23 - gonna be one three seven nine I believe
10:27 - that's it I'm gonna say corners open dot
10:33 - append I like that so now we say okay so
10:37 - we check through all the possible moves
10:38 - if any of those possible moves are
10:39 - either 1 3 7 or 9 we're gonna add that
10:42 - into our open corners and now we're
10:45 - gonna just check we're gonna randomly
10:47 - select one of those corners to move into
10:48 - so I'm just gonna say if the length of
10:51 - loops why am i typing in the other way
10:54 - corners open is greater than 0 now we're
10:58 - going to say move equals
11:02 - select random and we're gonna pass it
11:05 - our lists of corners open my gut and
11:07 - then we're gonna return that myth now
11:11 - the reason that I needed to check if our
11:14 - list was greater than zero is because
11:15 - say no corners are open and we try to
11:18 - run this function that we're gonna
11:19 - create later it'll crash it's not gonna
11:21 - work because there's nothing in the list
11:22 - so how does it randomly select a name to
11:25 - see in the list it can't so we check if
11:27 - there's more than one or if there's more
11:29 - than zero we're gonna randomly select if
11:31 - it's just one it's automatically going
11:32 - to select that one and then it's gonna
11:34 - move into that corner okay so now we've
11:37 - checked if the corners are open the next
11:39 - step in our algorithm is to check if the
11:40 - center is open so we say okay
11:42 - no one can win here with any of the
11:45 - moves none of the corners are open all
11:46 - right let's check at the Centers opens
11:47 - we're gonna say if five in possible
11:53 - moves I'm gonna say move equals five not
11:56 - my movie equals five return movie flick
12:02 - so pretty straightforward and then the
12:04 - next one is take any edge I'm gonna copy
12:07 - all this because it's gonna be the exact
12:08 - same thing except with edges and in this
12:11 - case I'm going to say edge is open and
12:16 - here it's say edge is open edge is open
12:22 - and edge is open and I'm going just need
12:26 - to change this to eat the edges which
12:27 - can be two four six and eight and there
12:33 - we are now after that after all of that
12:36 - I'm actually just gonna take this out of
12:39 - here
12:39 - because if we've gone through everything
12:41 - we've gone through all of this code that
12:43 - we just wrote no edges are open no
12:44 - corners the centers on open we can't
12:46 - make a winning move then we're simply
12:48 - gonna return zero because that means
12:49 - there's no possible moves that we can
12:51 - make all right so now we need to write
12:54 - our last function which is select random
12:57 - now this one's really straightforward in
12:59 - here just gonna start by importing
13:01 - random and then I'm gonna say I need a
13:05 - random number within a range of the
13:08 - length of what am I saying board this
13:10 - should not be bored I'm sorry this
13:11 - should be L I just gonna say for list
13:14 - I'm gonna say Ln which is the Stanford
13:17 - length is gonna be the length of our
13:19 - list I'm going to say R which is gonna
13:23 - stand for random number close to random
13:24 - dot R and range in between zero actually
13:31 - yes
13:32 - zero between zero and L N and then we're
13:37 - going to return Li are like so so what
13:44 - this is gonna do is we're gonna create a
13:46 - random number between zero and the
13:48 - length of our list now remember if the
13:51 - length of our list if we have a list
13:52 - that looks like this one two three the
13:56 - length of our list is three but the
13:58 - maximum in dusty is two so when we use
14:00 - this R and range if this is three it'll
14:03 - never give us the number three and only
14:04 - give us zero one two so that works well
14:06 - for us and then we're gonna return that
14:08 - and that's gonna be our move and I
14:11 - believe we set that here we say move yes
14:13 - is equal to select random edge is open
14:15 - now let's have a quick look through our
14:17 - code see if there's anything that I need
14:19 - to change I believe that's everything so
14:22 - let's go ahead and run the program and
14:24 - we just get a slight error here let's
14:26 - just see how I wrote that over here cuz
14:28 - I know you can do this I just don't know
14:31 - exactly how to read it properly what's
14:34 - wrong with this door maybe this needs to
14:36 - be in the same line or something see if
14:40 - we crash again or these need to be the
14:43 - same line okay so that's annoying but
14:45 - anyway it's just backspace to all these
14:46 - and they should work okay now let's try
14:52 - it
14:52 - missing one potential argument board so
14:54 - print board wherever we write print
14:56 - board we're just gonna have to throw a
14:57 - board in there so let's go down into our
15:00 - main function cuz I believe that's where
15:01 - we write it just gonna say Ford board
15:07 - wait up here run it now and there we go
15:13 - tugging no that's not exactly what's
15:15 - supposed to happen is it ah this I
15:18 - believe this is why
15:19 - so in our board count this needs to be
15:21 - changed from false to true my bad guys
15:27 - now we can read it ok please select a
15:29 - position place an X between one a
15:30 - 9-point air what's our air
15:33 - it must be an integer or slices not a
15:36 - list or position pause equals letter
15:38 - letter indices must be one six and
15:40 - insert letter okay
15:44 - so the error here sorry just took me a
15:46 - second eyes to pause the video they're
15:48 - excited to find it is an insert letter
15:50 - excellent wrote board this needs to be
15:52 - move like this ah my bad about that guys
15:56 - and let's try it one more time there we
16:00 - go so now everything's working so we
16:01 - move into position to our computer sites
16:04 - moving to position seven we're gonna
16:05 - move into position five it decides to
16:08 - move there let's see if it takes the
16:09 - winning move we'll go to position one
16:10 - take some winning move and it wins all
16:14 - right so that is pretty much it if we're
16:17 - how to make a tic-tac-toe game in Python
16:21 - again I'm not sure how many would he
16:24 - call it tutorials or how many videos
16:27 - this is gonna be if you guys want to
16:29 - make it so that you can restart the game
16:32 - it's really easy all you have to do is
16:34 - to make a while loop down here so you
16:35 - just say well true and then put main in
16:37 - here and if you wanted to you could put
16:39 - something like input play again push
16:45 - your mark like that and then they would
16:46 - just have to enter to play again I'll
16:48 - let you guys figure that one out because
16:49 - it's pretty straightforward
16:51 - anyways other than that this has been it
16:53 - for how to make a tic-tac-toe game in
16:55 - Python sorry if there was a few little
16:58 - bugs we ran into here it is hard when
17:00 - I'm coding this all at one time and
17:02 - trying to explain everything if you guys
17:03 - have any other questions or concerns
17:05 - please make sure you leave a comment
17:08 - down below because I'm sure myself or
17:10 - someone else would be happy to help you
17:11 - out if you guys enjoyed the video please
17:13 - make sure you leave a like and subscribe
17:14 - and I will see you again in the next one
17:17 - [Music]