00:00 - all right so now time to actually start
00:01 - coding and program the AI for this
00:03 - project now we're gonna be using the
00:05 - NEET module to do this which means that
00:07 - a lot of the hard work is actually
00:08 - already done for us we kind of just have
00:10 - to understand underlying concepts to
00:13 - make some good decisions on what to feed
00:15 - this neat algorithm and kind of the
00:16 - configurations to set this up now I've
00:19 - already discussed how this NEETs
00:20 - algorithm works in terms of the flappy
00:22 - bird project so please if you haven't
00:24 - watched that video already go watch it
00:26 - now this video it's not actually part of
00:28 - this series it was kind of the project
00:30 - outlined for this I'll leave a card in
00:33 - the top right hand corner of the screen
00:34 - which actually I guess it's gonna be
00:35 - over there as well as a link in the
00:37 - description to that video now it's only
00:40 - a 10-minute video but it explains
00:42 - exactly how this works and I highly
00:45 - recommend you watch that because I'm not
00:46 - going to be reading any of this stuff I
00:48 - said in there now here in front of me is
00:50 - the neat documentation this will be in
00:52 - the link in the description every video
00:54 - and essentially if you're lost on
00:56 - anything or you feel I didn't explain
00:58 - something well enough please you know
01:00 - feel free to come here read through the
01:02 - documentation there's everything that
01:04 - you need this is how I learned to use
01:06 - this by just reading this myself so I'm
01:08 - sure that you guys can figure it out if
01:09 - you need to as well on here now last
01:11 - thing if you're still lost with needs
01:14 - and you want some more stuff to try to
01:15 - understand this I highly recommend that
01:17 - you read this paper this is the original
01:19 - neat paper it's actually referenced in
01:21 - this documentation here and explains
01:23 - exactly how this algorithm works so
01:26 - please go ahead and read this it's only
01:28 - six pages long it's fairly technical but
01:30 - I think you guys can get through it I
01:32 - read it two or three times and after
01:33 - that I feel like I understand the NEET
01:35 - module much much better so again that
01:37 - link will be in the description down
01:39 - below okay so now that we've done that
01:41 - let's talk about what we actually need
01:44 - to do here so the way that NEET works on
01:46 - a very basic level is it involves a
01:48 - neural network so maybe we start with a
01:50 - really basic neural network so we have
01:52 - three input neurons and we have one
01:54 - output neuron and maybe these are all
01:56 - connected
01:56 - well what NEET actually does is it will
02:00 - change the values of these connections
02:02 - so the weights and then it will randomly
02:04 - add other nodes so maybe we add a node
02:06 - up here that's connected like this and
02:08 - remove and add connections now the
02:11 - reason it does this is to try to find a
02:13 - top all
02:13 - you're kind of an architecture for the
02:15 - neural network that works best for the
02:17 - problem we're solving so it starts very
02:19 - simple and then it gets more and more
02:21 - complex only as it needs to now if it
02:23 - doesn't need to get more complex it
02:25 - won't do that and that's actually a very
02:27 - good thing in our case because that
02:29 - means that if we could have a very basic
02:31 - neural network solve the problem that's
02:33 - favorable and neat will allow us to do
02:36 - that by favoring kind of smaller
02:38 - architectures if they're performing
02:40 - better than a more complex one now I
02:42 - don't wanna go in to depth about how we
02:45 - kind of add two nodes and all of that
02:46 - and the mutation and all that jazz but
02:50 - just understand that we start with a
02:51 - very basic neural network and as we need
02:54 - to we'll add complexity of that network
02:55 - in terms of other nodes other
02:57 - connections more neurons different
02:59 - layers and that's something that we
03:01 - don't actually do but then the algorithm
03:04 - will do by itself okay so now that we
03:06 - kind of have a basic understanding of
03:08 - how that works let's now talk about the
03:11 - things that we actually need to give the
03:13 - neat module or they need to algorithm so
03:15 - that it can figure this stuff out for us
03:17 - now the first thing and the most
03:19 - important thing that we need to do is
03:21 - discuss what the inputs are going to be
03:23 - to our neural network now again this is
03:26 - just neural networks being evolved using
03:28 - a genetic algorithm and I've talked
03:30 - about how this worked in the other video
03:31 - but essentially if we don't have these
03:33 - inputs right we can never be sure that
03:35 - we're gonna get a good neural network or
03:38 - a good kind of AI it's working if it
03:40 - doesn't have the correct information how
03:42 - can it possibly figure out you know
03:44 - whether how to jump through those pipes
03:45 - correctly so let's talk about what
03:47 - information we should actually be giving
03:49 - to the neural network now in my case the
03:52 - information that we're gonna be using
03:53 - here is just enough um that's not too
03:57 - much information but that should
03:58 - hopefully let the network kind of figure
03:59 - out some patterns now I'm gonna start by
04:01 - giving the network the position of the
04:05 - bird now since the bird doesn't move
04:06 - along the x-axis all we need to do is
04:08 - give it the Y position because that's
04:10 - the only direction it's gonna be able to
04:11 - move in so we'll give it bird Y and then
04:14 - what I'm gonna do is simply give it the
04:16 - distance between the bird and the next
04:19 - upcoming top pipe as well as the
04:21 - distance between the bird and the next
04:23 - coming bottom pipe so I'm just gonna put
04:25 - top pipe here
04:27 - and bottom pipe so that we kind of have
04:29 - an idea of what this is now some of you
04:32 - may argue that we don't need both the
04:34 - top pipe and the bottom pipe and you may
04:37 - be correct I would encourage you when we
04:38 - actually set this up to only use maybe
04:41 - two of these inputs and see if you can
04:43 - get it to work like that now the reason
04:45 - I'm using both of these is because I
04:46 - think this speeds up the process of the
04:48 - network figuring figuring this stuff out
04:50 - because it doesn't need to determine the
04:52 - gap distance in between the pipes if we
04:54 - only gave it one input of the top pipe
04:58 - or just the bottom pipe all right the
05:00 - next thing we need to talk about is the
05:02 - output of our neural network now the
05:04 - output here is pretty simple it's either
05:06 - we jump or we don't jump that's the only
05:09 - control we actually have for our game
05:12 - and whenever a programming AI for a game
05:13 - we kind of think of the output as what
05:15 - button we should press or what the
05:18 - program should actually do what the
05:19 - character should do so maybe you know if
05:21 - we're playing like snake and we're like
05:22 - moving all around then what we might
05:25 - have is you know move up move right move
05:28 - down and move left which means we need
05:32 - four output neurons to represent all
05:33 - these decisions now since all we're
05:36 - gonna be doing here is saying you know
05:37 - click space or don't click space to jump
05:40 - then all we need is one neuron and this
05:43 - is just gonna say I guess I'll write it
05:45 - in reg that is consistent here jump or
05:48 - do not jump so these are the first
05:50 - things you always need to think about
05:51 - when you're programming in AI what are
05:53 - the inputs going to be and what are the
05:54 - outputs gonna be alright so now that we
05:56 - have that we can talked with the next
05:57 - important part which is the activation
05:59 - function now this isn't crazy important
06:02 - but it does make a difference on how
06:04 - you're going to evaluate this output
06:06 - neuron so in this case we're just gonna
06:08 - pick the activation function for the
06:10 - output neuron and we're actually gonna
06:11 - let neat pick the activation function
06:13 - for any hidden layers or hidden neurons
06:15 - that we have but in this case I'm gonna
06:17 - use an activation function called tan H
06:20 - now this is actually the hyperbolic
06:22 - tangent function and it looks something
06:25 - like this I'll draw it out really
06:27 - briefly here so I'm gonna say that this
06:29 - line here is 1 and this line here is
06:32 - negative 1 and what this looks like
06:34 - there's gonna be a crude drawing so
06:35 - please excuse me is something like this
06:39 - we're set
06:40 - the larger positive a number the closer
06:43 - to one it's gonna be and the larger
06:45 - negative a number the closer to negative
06:47 - one it's gonna be now that just allows
06:49 - us to squish whatever value we get from
06:51 - this output neuron to be in between
06:53 - negative 1 or 1 and this way we can
06:55 - evaluate what you know the value of this
06:58 - is and then we're gonna be able to tell
07:00 - whether we jump or not jump
07:02 - now there's other popular activation
07:04 - functions like sigmoid and all of that
07:06 - and we could have used a sigmoid
07:07 - function for this but I liked NH and
07:10 - what we're gonna do with this 10h
07:11 - function is since it squishes our values
07:13 - between negative 1 and 1 we're gonna
07:15 - check if the value is greater than 0.5
07:17 - and if it is we're gonna jump otherwise
07:20 - we're not gonna jump now we could have
07:21 - done the same thing where we check if
07:23 - it's greater than zero but 0.5 just
07:25 - works better for this and we can talk
07:27 - about that a little bit later all right
07:29 - the next thing that we need to give our
07:31 - neat algorithm and this is specific now
07:33 - to this neat module and genetic
07:35 - algorithms is the population size now
07:38 - this is a pretty arbitrary value and it
07:40 - doesn't matter a ton in fact you can
07:42 - actually play with this value and you'll
07:43 - probably still get the same result but
07:45 - in this case we're gonna start with a
07:46 - population of a hundred Birds now
07:49 - essentially the population is how many
07:53 - birds we're gonna have running each
07:54 - generation so essentially the way things
07:56 - work is we start with generation 0 so we
07:59 - have Gen 0 we have a hundred Birds in
08:01 - this case which are just gonna be random
08:04 - neural networks so random neural
08:05 - networks controlling a hundred Birds and
08:07 - then what we're gonna do is we're gonna
08:09 - test all these birds we're gonna take
08:10 - the best of these birds breed them
08:12 - mutate them and create another hundred
08:14 - birds in the next generation which is
08:16 - generation 1 and then hopefully these
08:20 - birds since they came from the best of
08:21 - the previous generation will be a little
08:23 - bit better and we keep going and going
08:24 - and going going until eventually we get
08:26 - some perfect Birds now this number
08:28 - essentially just means you know how many
08:30 - birds are we running each generation how
08:32 - many are actually trying for really
08:33 - complex problems you might need to do
08:35 - you know like thousands of birds running
08:38 - at once but for this flappy bird game
08:39 - you know we could probably even bring
08:41 - this down to a number like 10 and still
08:43 - be able to have a high degree of success
08:45 - in coming up with a solution essentially
08:47 - the more birds you have the more the
08:49 - larger the population size the more
08:51 - variants you're gonna get in the more
08:52 - and stuff that's gonna happen so we have
08:55 - a higher chance of you know generating a
08:57 - bird with a new connection or a new node
08:59 - or something like that and kind of the
09:01 - structure will just get a little bit
09:03 - more complex for some of our networks
09:05 - since this is flappy bird we don't need
09:07 - to do anything too crazy so we'll just
09:09 - set this as a hundred and again you guys
09:10 - can mess with this I've done it with
09:11 - fifty and it worked fine but a hundred
09:13 - just what we're gonna go with all right
09:16 - so the next part and the most important
09:18 - part to talk about now is the fitness
09:20 - function now the fitness function is by
09:23 - far the most important part of the NEET
09:26 - algorithm now obviously these inputs and
09:28 - these outputs matter a lot because these
09:29 - are what the information is and what
09:31 - we're actually gonna do but this fitness
09:33 - function is how we're actually gonna
09:35 - grow and how these birds are gonna get
09:37 - better now we'll talk about the fitness
09:38 - function in the next video specifically
09:40 - and how we use that but it's something
09:42 - to keep in mind that we need a way to
09:44 - evaluate how good our birds are because
09:47 - the way this neat module works and this
09:49 - algorithm works is we take the best
09:50 - birds from one population we breed them
09:53 - and we mutate them and we keep doing
09:54 - that now if we're not actually getting
09:56 - the real best Birds or we're scoring on
09:59 - some kind of metric that doesn't make
10:01 - sense for the best bird then obviously
10:03 - we're just gonna have a trash a I so we
10:05 - need to make sure that however we score
10:07 - these birds and get you know figure out
10:09 - which ones are better makes sense so how
10:13 - do we do that well for flappy bird it's
10:15 - actually pretty straightforward there's
10:17 - a few different ways you might think
10:18 - about doing this but what I do is
10:20 - literally just say you know I'll draw a
10:22 - bird here this will be my bird the
10:23 - circle whatever bird makes it farthest
10:26 - in the level did the best so every kind
10:28 - of frame that the bird moves forward
10:30 - like every X position it goes forward
10:32 - we're gonna give it another point and
10:33 - the birds that get the farthest in the
10:35 - level so you know bird over here is
10:37 - gonna be you know a lot better than bird
10:40 - over here in terms of fitness because he
10:42 - made it further or they made it further
10:44 - in level so that's the way I'm scoring
10:46 - Fitness however far you get is what
10:49 - we'll do but we also talked about some
10:50 - tweaks that we can do on Fitness and how
10:52 - we can influence birds to make it
10:54 - further in the level by adding some
10:56 - things later alright so we'll say
10:58 - fitness function we'll just say like
11:00 - distance so like how far it goes and I
11:02 - guess I'm writing in black now that's
11:04 - alright the last thing to talk about
11:05 - here now is the
11:06 - generations we want to run for so at
11:08 - some point you know after we ran for
11:10 - thousands of generations if we still
11:13 - don't have an AI that works really well
11:14 - we're probably just gonna give up and
11:16 - try again because maybe we got unlucky
11:18 - maybe when we added connections when we
11:21 - did things just didn't work out in our
11:22 - favor so what we're gonna do here is set
11:25 - a match generation in this case I set a
11:27 - max generation of 30 which means that if
11:29 - I make it past 30 generations and we
11:32 - still don't have a perfect bird then
11:34 - we're kind of gonna cut this program
11:35 - we're gonna try again because 30 is just
11:39 - too far for me so anyways that is kind
11:41 - of the information we need we've talked
11:42 - about that now so let's just start
11:44 - programming and the more stuff that we
11:46 - program the more stuff I'm gonna have to
11:47 - explain anyways so let's get on with it
11:50 - all right so the configuration file now
11:53 - this is a very important thing that we
11:55 - need whenever we're creating a neat
11:57 - project or using the neat module and
11:59 - this essentially is kind of setting up
12:01 - all the variables and just parameters
12:03 - for this algorithm to run and a lot of
12:05 - the things that I discussed previously
12:07 - like in the last few minutes we're gonna
12:09 - set in this configuration file so if you
12:11 - don't want to type this out from scratch
12:13 - which I don't recommend you do you just
12:14 - click the link of the description to
12:15 - download this I'll just download a text
12:18 - file and then make sure you drag that
12:19 - text file into the same directory as
12:21 - your main Python script because we're
12:23 - gonna use it probably in the next video
12:24 - when we actually set things up so let's
12:28 - start talking about some of the stuff in
12:29 - this configuration file and just setting
12:31 - some values I actually already have it
12:33 - set to all the stuff that we need we'll
12:35 - talk about what it does and why I've set
12:36 - it to that so the first thing here that
12:40 - to talk about is in this neat section
12:41 - and this is Fitness criterion now this
12:44 - is simply a function we can either
12:45 - choose from min Max or mean and this
12:48 - determines how we get rid of the worst
12:50 - birds or actually like what function we
12:52 - use to determine the best birds so
12:54 - obviously we calculate a fitness for all
12:56 - of our birds and we do that from
12:58 - actually this main script which we'll do
13:00 - later but now when we need to remove
13:03 - birds or add birds we need to know
13:04 - whether we're taking birds with the
13:06 - highest fitness or the lowest fitness
13:07 - now I know it's weird like why would you
13:09 - get rid of birds with the lowest fitness
13:10 - but sometimes you might want to do that
13:12 - so in that case you would change this to
13:14 - min but in this case we'll do we'll just
13:16 - put max okay which means we'll take the
13:18 - birds that are the
13:19 - best will breed those and we'll keep
13:20 - those ones and we'll get rid of the ones
13:22 - with the lowest Fitness all right now
13:23 - fitness special pretty straightforward
13:25 - this simply means what number do we
13:28 - actually need to reach so what a fitness
13:30 - level do we want to get before we
13:32 - terminate the program so in this case
13:33 - I'm saying you know if we have a bird
13:35 - that reaches a fitness score of a
13:36 - hundred then I'm gonna say we're good
13:38 - enough this bird is likely gonna go on
13:40 - forever he's gonna be very good we don't
13:43 - need to do any more generations after
13:44 - that and that's exactly what this does
13:46 - so whenever we reach a population and
13:49 - there's a member in that population that
13:51 - has a fitness higher than or equal to
13:53 - this value we will stop running the
13:55 - program that's what this does all right
13:58 - next population size pretty
14:00 - straightforward this is 50 that's what
14:02 - I'm setting did I say a hundred before
14:03 - you know what let's do it as a hundred
14:05 - but again you can change the value to 50
14:07 - or whatever you want reset on extinction
14:09 - essentially means that what neat
14:11 - actually does is it separates the
14:13 - different kind of architectures of all
14:15 - of our population into what we call
14:17 - species so birds that have you know two
14:20 - or three hidden layers or some weird
14:22 - nodes and there will be one species and
14:24 - birds that just have that standard you
14:26 - know three nodes one out Panero be its
14:28 - own species so it's saying as if we have
14:30 - a species go extinct do we reset a value
14:34 - in this case is just false we don't
14:35 - really have to talk about that too much
14:36 - but you can look that up in the
14:38 - documentation here I'll actually show
14:40 - you if you don't understand how
14:41 - something works if you go to reset on
14:43 - extinction if this evaluates are true
14:45 - when all species simultaneously become
14:46 - extinct due to stagnation a new random
14:49 - population will be created so that's
14:50 - what that does I guess I can't miss
14:52 - explain that but anyways all the stuffs
14:53 - in the documentation anyways the next
14:56 - thing so default genome alright so this
14:58 - is very important so in meat we call all
15:01 - of our you know population members so in
15:04 - this case Birds genomes and genomes have
15:07 - a few different properties to them they
15:08 - have what are called nodes and what are
15:10 - called genes now nodes are be like input
15:14 - nodes and the output nodes and genes are
15:16 - actually the connections between those
15:18 - nodes so this is setting up the default
15:20 - starting genome so the like each member
15:24 - in our population will start with these
15:26 - specific values so this is very
15:28 - important that we tweak this correctly
15:29 - so this is where we're setting the
15:31 - activation function so act
15:33 - in default is 10 H activation mutate
15:35 - rate means if you wanted to change the
15:37 - activation function to be something else
15:39 - randomly you could change this value to
15:41 - be like 0.1 would be there's a 10%
15:43 - chance that whenever we create a new
15:45 - population member they will get a
15:46 - different random activation function I
15:48 - don't want to do that so I'm gonna leave
15:50 - this as zero activation options are just
15:52 - the options that we can choose from as
15:54 - the activation functions so what this
15:56 - activation mutate rate will actually
15:58 - pick from now aggregation default I'm
16:02 - not gonna talk about what this stuff
16:03 - does you can look at that if you want
16:04 - now this is kind of the initial
16:07 - connections that we have and how likely
16:10 - they are to change now when we say bias
16:14 - max value and bias min value this means
16:16 - that for that bias that we have what is
16:20 - the maximum value that we can pick and
16:21 - what is the minimum value that we can
16:22 - pick because we're randomly gonna set up
16:24 - our first neural networks so they have
16:26 - random biases and random weights so
16:27 - let's just kind of define that you know
16:29 - we don't want a bias that's like 10
16:31 - million so we're gonna squish it in
16:32 - between 30 and negative 30
16:34 - now mutate power and mutate rate and
16:37 - replace rate is how likely these things
16:39 - are to change when we mutate and breed
16:42 - and create a new population of birds
16:44 - again just leave these like this you can
16:46 - mess with them if you want but these are
16:48 - the numbers that work best
16:49 - all right so genome compatibility
16:51 - options compatibility disjoint
16:53 - coefficient okay I'm not gonna talk
16:55 - about those because I don't honestly
16:56 - don't even really know what those are
16:57 - kind of just left them the default
16:59 - values from another example I stole this
17:01 - configuration file from alright so these
17:03 - ones are pretty straightforward
17:04 - connection add probability and
17:05 - connection delete probability is how
17:08 - likely we are to add a new connection or
17:10 - remove a new connection and again this
17:12 - is good at 50 percent right now so if
17:14 - you wanted to not have it add as likely
17:17 - or remove as likely you could decrease
17:19 - this number maybe put at 0.2 or
17:20 - something but these are the values we're
17:22 - gonna use all right an able default and
17:25 - enabled mutate rate so enable default
17:28 - essentially means that we can have
17:29 - connections that sometimes are enabled
17:32 - were not enabled now this is kind of a
17:34 - weird thing with a neural network where
17:36 - these connections have another parameter
17:38 - on them where they're either you know
17:40 - active or not active that's what this
17:42 - means by default we're gonna have all
17:44 - connections be active and
17:46 - to actually deactivate a connection
17:48 - there's about a 1% chance that's gonna
17:49 - happen that's what this means all right
17:52 - feed-forward equals true that's
17:53 - straightforward we're using a
17:54 - feed-forward neural network initial
17:56 - connection equals full means we're gonna
17:57 - have fully connected layers to start
17:59 - node add probability and node deletes
18:02 - probability 0.2 so same thing 20% chance
18:06 - of adding a new node or removing a new
18:07 - node again these will be neurons if
18:10 - we're talking in other terms number of
18:13 - hidden okay so this one is probably the
18:14 - most important this is actually setting
18:17 - the default input neurons our amount of
18:20 - input neurons and amount of output
18:22 - neurons so in this case we're gonna have
18:23 - three input neurons like we've talked
18:25 - about one output neuron and no hidden
18:27 - neurons to start we could you know
18:29 - change this to one and then we would
18:32 - start with a more complex network but in
18:33 - this case we're gonna start as simple as
18:35 - possible which is three input and one
18:36 - output all right I'm not gonna talk
18:38 - about what all this does you guys can
18:40 - look that in the documentation if you
18:41 - want same thing here again this is just
18:44 - kind of you know a few tweaks here on
18:47 - how the weights work this is kind of
18:48 - similar to the biases in terms of
18:50 - changing them and all of that I've just
18:52 - left these default from another example
18:53 - I took this file from compatibility
18:56 - threshold we don't need to know that
18:57 - species fitness function that's kind of
19:00 - similar thing to above where we're gonna
19:02 - take the max fitness from those species
19:05 - so max stagnation I believe is how many
19:08 - generations we go without increasing
19:10 - fitness so if we reach a point where we
19:13 - have you know 20 generations go by and
19:16 - our fitness doesn't increase at all like
19:17 - the max fitness for our group of birds
19:20 - doesn't increase then we're gonna
19:21 - eliminate that species and species again
19:25 - are just they're kind of like grouped
19:26 - based on their architecture so anyways
19:29 - that's what that does
19:30 - and then this here is we don't really
19:33 - need to discuss this survival threshold
19:35 - and alit they're not super important but
19:38 - again you guys can go in here and and
19:40 - read through them if you want to know
19:41 - what they actually do alright so with
19:43 - that being said this has been a bit of a
19:45 - longer video I haven't we haven't done
19:46 - any coding but I need to explain kind of
19:48 - how all this stuff works and what it is
19:50 - so when we go into the next video we're
19:51 - not super lost again this is difficult
19:53 - to explain there's a lot of stuff and I
19:56 - kinda need to be selective on what I'm
19:58 - teaching what I'm not teaching and
20:00 - some stuff you're just gonna have to
20:01 - learn on your own that's the way that it
20:02 - works but as we experiment and go
20:04 - through this in the next videos and
20:05 - actually writing the code which we'll do
20:07 - in the next two videos I guess you guys
20:09 - will should start to understand this and
20:11 - it should start to make sense but always
20:13 - feel free to you know mess with stuff if
20:14 - you don't understand something ask
20:16 - questions join the discord server and
20:17 - all of that that being said I'll see you
20:19 - guys in the next video