00:00 - this video will show you 10 python
00:02 - comprehensions you can and should be
00:04 - using they get more and more difficult
00:06 - so make sure you stick around until the
00:08 - end of the video now let's start with
00:09 - the basic list comprehension so in front
00:12 - of me I have a basic code snippet now
00:14 - all this does is Loop 4X in the range 10
00:18 - which means we're going to access the
00:19 - values 0 through 9 and we're going to
00:21 - append those into a new list now this is
00:24 - great we can do this but in Python we
00:27 - have a much faster way to go about
00:28 - writing this code and it's something
00:30 - that's actually a little bit easier to
00:31 - read now that's a list comprehension
00:34 - let's have a look at that so what you
00:35 - see on my screen now is completely
00:37 - equivalent to the code above what it
00:40 - does is use something known as a
00:41 - comprehension now in Python we have some
00:44 - really interesting syntax and one of
00:45 - those pieces of syntax allows us to
00:48 - actually write a for Loop inside of a
00:50 - list we can actually write it inside of
00:52 - a bunch of other things as well but in
00:53 - this case we'll just look at a list now
00:56 - what we do here is very similar to what
00:57 - we did up here we actually say that we
01:00 - want to take the value X for X in range
01:05 - 10 now what this will do is execute the
01:07 - for Loop just like it normally would
01:10 - we're going to get access to the values
01:11 - 0 through 9 so 0 1 2 3 Etc but for every
01:16 - single iteration of this for Loop what
01:18 - we have on the left hand side here we're
01:20 - going to add into this list so we're
01:22 - saying we want to take the value of x
01:25 - for X in range 10 now just to prove to
01:28 - you that this works if I print out my
01:31 - values here you see that we get 0
01:33 - through 9 now let's say we change this
01:36 - just a little bit and we do x + 1 now
01:40 - this whole leftand side expression here
01:42 - is what's going to be added into the
01:44 - list for every single iteration of this
01:46 - for Loop so let's run the code again and
01:49 - notice this time we get 1 through 10 so
01:52 - this is the syntax it's really not that
01:53 - complicated whatever we have on the left
01:56 - hand side here is the element that we
01:57 - want to add for every single iter a of
02:00 - the for Loop now we can have all kinds
02:02 - of more advanced list comprehensions and
02:04 - I want to show you a few examples of
02:05 - those so now we're stepping it up a bit
02:07 - and we have a slightly more complicated
02:09 - example here what I want to do is get
02:11 - all of the even numbers from 0 to 50 now
02:14 - what I do is I write my list I Loop
02:17 - through the numbers in the range of 0 to
02:18 - 50 and then I first check if the number
02:21 - is even now to do that I can use the
02:23 - modulus operator which gives me the
02:25 - remainder in this case I get the
02:27 - remainder after dividing by two if
02:29 - there's no remainder so if it's equal to
02:31 - zero that means this number is even so I
02:33 - can check if it is even and then I can
02:36 - append it into this EV list so that's
02:38 - going to give me all of those values now
02:40 - let's see how we would do this using a
02:42 - list comprehension I can say evens is
02:45 - equal to a list and inside of here again
02:47 - I can say number for number in range 50
02:53 - now this is going to give me all of the
02:54 - numbers in the range of 0 to 49 or up to
02:57 - 50 but not including it but what if I
02:59 - want a filter for the even numbers well
03:02 - what I can actually do is I can add a
03:04 - condition after the for Loop so I can
03:06 - put an if statement right here even
03:08 - though it looks crazy and it looks like
03:10 - we shouldn't be able to write this and I
03:11 - can write out the same condition I had
03:13 - before so I can say if number mod 2 is
03:18 - equal to zero now this is actually
03:20 - perfectly valid python syntax and what
03:22 - we're saying now is that we want to take
03:24 - the number for number in range 50 only
03:29 - if this condition is true so if the
03:31 - number mod 2 is equal to zero then we
03:34 - will actually place this number in the
03:36 - list if it's not then we won't so what I
03:39 - can do now is I can print out evens we
03:42 - can run the code and you can see that we
03:44 - get all of the even numbers up to but
03:46 - not including 50 so again it looks a
03:49 - little bit crazy when you look at this
03:50 - syntax but this is actually a really
03:52 - easy way to understand what's going on
03:55 - and what we're adding inside of a list
03:57 - it's a very natural way to read this
03:59 - we're taking the number for number in
04:01 - range 50 only if the number mod 2 is
04:04 - equal to zero now I would argue that
04:06 - that's easier to read than this code
04:08 - right here some of you may disagree with
04:10 - me but the reason why a lot of people
04:12 - love using comprehensions is because
04:14 - when you're populating a list it's very
04:16 - clear what's going on right in the line
04:19 - where the list is defined so now let's
04:21 - look at a few more advanced examples but
04:23 - first I want to talk to any of you that
04:25 - are serious about becoming software
04:26 - developers now look it's no secret that
04:28 - the job market now now is more difficult
04:30 - than it was a few years ago however it's
04:32 - still 100% possible to land a job you
04:35 - just need to have the right guidance and
04:37 - really make sure you fine-tune every
04:39 - component of your application and your
04:41 - skills now that's exactly what my
04:43 - program at course careers aims to do not
04:45 - only do we teach you everything you need
04:47 - to stand out from an entrylevel
04:49 - developer but we actually walk you
04:50 - through optimizing your LinkedIn setting
04:53 - up your resume interview best practices
04:55 - how to apply how to reach out to people
04:57 - we go the extra mile because we're
04:59 - really only successful if we get you a
05:01 - job now we've already had a ton of
05:03 - success even in this really tough job
05:05 - market so if you're considering becoming
05:07 - a software developer definitely check it
05:09 - out we have a completely free
05:10 - introduction course that shares a ton of
05:12 - value and goes over a high level
05:14 - overview of what you need to do in 2024
05:16 - and Beyond to be able to land a software
05:18 - development role so now we have another
05:20 - example where what we want to do is
05:22 - filter an existing list and look for all
05:25 - of the strings that start with the
05:26 - letter a and end with the letter Y now
05:29 - to write that code will start by
05:30 - defining the list that we want to put
05:32 - the results in we'll then Loop through
05:34 - all of the strings in our options this
05:37 - will go through each individual string
05:38 - that we have the first check we do here
05:41 - is we see if the length of the string is
05:43 - less than or equal to one now the reason
05:45 - I check this is that if something is
05:47 - only one character or no characters then
05:49 - it means it can't start with a and end
05:51 - with Y and I also need to check this to
05:54 - make sure that if I try to access the
05:56 - first or last index of the string I
05:58 - don't get an error so that's why I have
06:00 - this right here so if it's less than one
06:02 - character or equal to one character we
06:03 - simply continue we move on to the next
06:05 - string down here we do a similar thing
06:07 - we say okay if the first character is
06:10 - not equal to a then we're going to
06:12 - continue because it doesn't meet the
06:13 - criteria and we do the same thing here
06:15 - we say if the last character which is at
06:17 - the ne -1 index is not equal to Y then
06:20 - we continue otherwise we can add this
06:22 - string into the valid strings now let's
06:25 - see how we would do this using a
06:26 - comprehension so this is one version of
06:29 - a comprehension we could write that
06:31 - would achieve the exact same goal now
06:33 - notice that I can actually use multiple
06:36 - if statements and I can kind of chain
06:38 - them on top of each other so very
06:40 - similar to what I did before I say I
06:41 - have string for string in my options and
06:45 - then I'm checking all of the conditions
06:47 - that I need to be true if I want to
06:49 - actually put this string into the
06:51 - resulting list now the first condition
06:53 - is if the length of the string is
06:54 - greater than or equal to two now you'll
06:56 - notice that I'm kind of doing it in
06:58 - reverse from what I did here here but
07:00 - that's fine it's just another way to go
07:01 - about writing this within the
07:02 - comprehension I then say if the string
07:04 - at index0 is equal to a and if the
07:07 - string at index Nega 1 so the last
07:09 - character is equal to Y now again this
07:11 - is very easy to read and understand and
07:14 - I've even formatted this so you can read
07:16 - it on multiple lines and it doesn't span
07:18 - out and get really difficult to read on
07:19 - a single line so that's one complaint
07:21 - some people have with list
07:23 - comprehensions being difficult to read
07:24 - if they're too long well that's really
07:26 - not an issue you can actually just split
07:28 - it out onto multiple lines as long as
07:30 - you have it inside of the braces or
07:32 - inside of the brackets now what I can do
07:35 - is run this code and you'll see that we
07:36 - get the result of any and Albany there
07:39 - you go now let's move on to a more
07:40 - advanced example so now I'll show you an
07:42 - example where we look at a nested list
07:44 - comprehension in this case let's say
07:46 - that we want to flatten a matrix which
07:48 - is a list of lists or a two-dimensional
07:50 - list you can see that we have some lists
07:53 - inside of the main list and if we wanted
07:55 - to flatten this so just have one array
07:57 - that doesn't have any nested list we
07:59 - need to write some code like this now
08:01 - it's not overly complicated but again we
08:03 - can really speed this up and make it a
08:05 - little bit cleaner using list
08:06 - comprehensions so here we say four row
08:09 - in our Matrix and then for each number
08:11 - within that row we're going to append
08:13 - that value into the flatten list now
08:16 - let's paste in the list comprehension
08:18 - and see how we would do it here you can
08:20 - see that it's a little bit simpler we're
08:22 - saying numb and then for Row in Matrix
08:25 - for number in row now the first four for
08:29 - Loop works exactly like the first for
08:31 - Loop here so for every single iteration
08:34 - of the for loop we're going to do
08:35 - whatever is on the right hand side here
08:37 - which is the next for Loop and then for
08:40 - every iteration of this for loop we're
08:42 - going to take num and we're going to add
08:43 - this inside of the flattened list so if
08:46 - I come here and I print print flattened
08:48 - sorry and I run this you can see that we
08:51 - get 1 through nine appearing in our
08:53 - conso I know that it can be a little bit
08:55 - tricky to read but just remember that
08:56 - the first for Loop you see is the
08:58 - exterior for for Loop and any for Loops
09:00 - after that are going to be interior ones
09:02 - that are going to run for every single
09:04 - iteration of the previous for Loop now
09:07 - you could keep going here and you could
09:08 - write as many for Loops as you want that
09:11 - would get pretty confusing pretty
09:12 - quickly but when you're only dealing
09:14 - with two or three of them it's totally
09:15 - fine to be using a nested list
09:17 - comprehension moving on we're looking at
09:19 - another example where this time we want
09:21 - to do something like categorize numbers
09:23 - as either even or odd so you can see
09:26 - that I have my list here for different
09:27 - categories what I do is Loop through all
09:29 - of the numbers in the range 10 so from 0
09:32 - to 9 now I first check if the number is
09:35 - divisible by two which means it's even
09:37 - if it is I'm actually going to append
09:38 - the even string into the categories list
09:41 - otherwise I'm going to append the odd
09:43 - string now we haven't yet seen an
09:45 - example of how to use an if else so
09:47 - let's look at how we could use a list
09:49 - comprehension to replicate this example
09:51 - so there you go we now have a slightly
09:53 - different version of the list
09:55 - comprehension now notice that we still
09:57 - have our for Loop here the for Loop is
09:59 - going to be the meat of all of these
10:00 - comprehensions and you always want to be
10:02 - looking to the left and the right side
10:04 - of the for Loop to understand what's
10:06 - going on so we have our for Loop and we
10:08 - see that we're saying for X in range 10
10:11 - now what we do here is we actually check
10:14 - on the left hand side what value we want
10:16 - to add depending on the value of x now
10:20 - in this instance we're not actually
10:21 - really filtering the list what we're
10:23 - doing instead is we're placing in a
10:25 - value for every single iteration or
10:27 - every single value of x so there's no
10:30 - need for me to put an if on the right
10:31 - hand side which is really meant to be
10:33 - filtering different values instead what
10:36 - I'm doing is picking what I'm going to
10:37 - be inserting based on the value of x so
10:40 - I say that I want to use even if x mod 2
10:45 - is equal to zero so if x is even
10:48 - otherwise I want to use odd now it's
10:51 - worth noting that this syntax is
10:52 - actually valid outside of a list
10:54 - comprehension you could put this inside
10:56 - of a variable you can actually write
10:58 - this in a lot of places in Python but
11:00 - this is also perfectly valid for me to
11:02 - put on the left hand side of the list
11:04 - comprehension so for every single
11:06 - iteration here we're going to go to the
11:08 - left hand side we're going to evaluate
11:10 - this expression which is going to give
11:11 - us either even or odd based on this
11:15 - condition here to prove that to you I
11:17 - will save and run the code and you can
11:19 - see we get even odd even odd even odd
11:21 - Etc so now let's go on to something even
11:24 - more complicated where we need to build
11:26 - a three-dimensional list now you can
11:28 - ignore the ready printer syntax this
11:30 - just gives us an output that's easier to
11:32 - read that's why I'm using it really we
11:34 - just want to be looking at this now in
11:36 - this case what I want to build is a 5x
11:39 - 5x five Matrix or threedimensional list
11:43 - so I want a list inside of a list inside
11:45 - of another list and then for all of
11:47 - those lists I want to have values inside
11:49 - of them now we can look at this code
11:51 - here we can see that we start by
11:53 - building the first level of our exterior
11:55 - list we create list one we then for
11:59 - every single iteration here we're
12:00 - building list one we start building list
12:02 - two for every single iteration of list
12:05 - two we append values inside of list two
12:07 - then we put list two inside of list one
12:11 - then we put list one inside of the main
12:13 - list and we build a three-dimensional
12:15 - list now you don't need to fully
12:16 - understand it but when I run the code
12:18 - you see that we will get a big kind of
12:20 - array here or a big list of multiple
12:22 - lists inside of list and you can see
12:25 - that's a little bit confusing and
12:27 - difficult for us to read this code so
12:29 - let's see how we can clean it up a bit
12:30 - by using a list comprehension so you can
12:33 - see now that we've added the list
12:35 - comprehension and this immediately is a
12:37 - little less intimidating than this code
12:39 - that we have here now let's quickly run
12:41 - through it because I've done something a
12:42 - bit different than what you saw before
12:44 - now what we're going to start doing here
12:46 - is looking from the right side where we
12:48 - see our for Loop so the way you read
12:50 - this type of code is you find the first
12:53 - for Loop that's inside of the main list
12:56 - so we found that here and you can see we
12:57 - have four underscore in range 5 now you
13:00 - don't have to worry about the underscore
13:01 - this is just what's known as an
13:02 - anonymous variable and we put this in
13:05 - place of using something like I when I
13:07 - don't actually care about that value
13:09 - right so I don't actually need to know
13:11 - what iteration I'm on I just want to do
13:13 - this five times so I see my for Loop and
13:16 - we remember that whatever's on the left
13:18 - hand side of the for Loop is what's
13:19 - going to get added inside of our list so
13:22 - what we have here highlighted is what
13:24 - we'll get added but notice that inside
13:26 - of here I've ridden some other for Loops
13:28 - I've written some more comprehensions a
13:30 - nested comprehension now what we do is
13:33 - the same thing so in the left hand side
13:35 - I need to figure out what's going to get
13:37 - added so I look for the most exterior
13:39 - for Loop which is this one right here I
13:41 - can see that it's 4 underscore in range
13:43 - five and then I look to the left hand
13:45 - side now I see that I have this list and
13:48 - there's another comprehension inside of
13:50 - here so same thing I go to the next
13:53 - level of for Loops I see this for Loop
13:55 - right here and I notied that for this
13:57 - one I have a value numb so it says num
13:59 - for Num in range five and that tells me
14:02 - this right here is simply going to be a
14:04 - list that has the numbers 0 through 4
14:07 - that would then tell me that what this
14:09 - whole statement right here is going to
14:11 - be is five lists that all have the
14:14 - numbers 0 through 4 then that tells me
14:18 - that what I'm going to have for this
14:20 - whole nested for Loop here is five lists
14:23 - of five lists that all have the numbers
14:25 - 0 through 4 now let's test it out and
14:28 - when I wrun the code you can see that I
14:30 - get exactly that so since I just showed
14:32 - you something really complicated let's
14:34 - go to something a little bit easier and
14:36 - this is where we apply a function to a
14:39 - value inside of a list comprehension now
14:41 - I haven't written the equivalent code
14:43 - because I think this is simple enough
14:45 - but I wanted to show you that it's
14:46 - perfectly valid for us to make a
14:48 - function call inside of a list
14:50 - comprehension so what I'm doing here is
14:52 - I'm saying okay I want to take the
14:54 - square of X for X in range 10 now notice
14:58 - how easy easy that is to read it's so
15:00 - nice for me to look at this and
15:01 - immediately know the results that I'm
15:03 - getting and it's helped by having really
15:05 - good variable names as well now
15:07 - obviously I could just write this as
15:09 - well and I could have x to the exponent
15:11 - 2 but imagine we have a more complex
15:13 - function where we don't want to write
15:14 - that in one line then obviously it's
15:16 - really nice to be able to call it now I
15:18 - could also use a function call in my
15:20 - filter so I could say if valid right and
15:23 - then this could be some function that
15:24 - returns true and I could put X obviously
15:27 - we haven't written that out but it' be
15:29 - perfectly fine for me to do that and if
15:30 - I have good function names and good
15:32 - variable names it makes this code really
15:34 - really clean and easy to understand and
15:36 - that's why we love using list
15:38 - comprehensions so the next few examples
15:40 - I have for you are a bit of a bonus
15:41 - because they're not list comprehensions
15:43 - but they're still useful to know about
15:45 - now the first one to look at here is the
15:46 - dictionary comprehension so notice that
15:48 - we have a kind of list of pairs or a
15:51 - list of Tes what we can do is we can use
15:54 - a for Loop inside of a dictionary which
15:56 - are these curly braces right here and we
15:58 - can say 4 K comma V in pairs now
16:02 - technically you can call these whatever
16:04 - you want but what this will do when
16:06 - you're accessing a tupple or that's the
16:08 - object that you're iterating through uh
16:10 - inside of a list is it will grab the
16:12 - first and the second value respectively
16:14 - so the key would be a the value would be
16:16 - one then what we can do is simply use
16:19 - the syntax key colon value just like you
16:23 - would normally create a dictionary now
16:25 - you can do some more advanced uh syntax
16:27 - in here as well you could like apply a
16:29 - function to this value if you wanted to
16:32 - do that or do something funky with the
16:34 - key but I just want to show you that
16:35 - dictionary comprehension does actually
16:37 - exist so if I print this out you'll see
16:40 - that if we bring up our terminal we get
16:42 - A1 B2 and C3 and we were able to create
16:45 - the dictionary comprehension so now we
16:47 - move on to another quick example here
16:49 - which is using a set comprehension so
16:52 - just like we have dictionary
16:53 - comprehensions we also have set
16:55 - comprehensions the main difference is
16:57 - you're not going to have a key here
16:59 - you're just going to have some value
17:00 - that you're adding into the set now in
17:02 - order to do that you can use the set
17:05 - syntax which is this it's just the same
17:07 - as the dictionary right so it's your
17:08 - curly braces but python will know that
17:11 - this should be a set if you don't have
17:13 - any keys right so I don't have a key
17:15 - associated with this it knows to treat
17:17 - this as a set now in this case what
17:19 - we're going to do is remove duplicates
17:21 - from a list while applying a function to
17:23 - those values so here this is going to
17:25 - give us all of the unique squares it's
17:28 - going to do that by squaring all of the
17:30 - elements inside of this nums list but
17:33 - then adding them into the set and since
17:35 - it's adding them into the set the set is
17:36 - only going to keep all of the unique
17:38 - values which means if I go here and I
17:41 - print out my unique squares and I run my
17:43 - code you can see that we only get the
17:45 - unique squares appearing here in the set
17:48 - so now we move on to our last example
17:50 - which is reserved for those of you that
17:52 - are really into Python and know about
17:54 - more advanced features like generators
17:56 - now if you don't know what a generator
17:58 - is I'll leave a video on the screen
17:59 - right here that you can watch to learn
18:01 - about it it's super interesting and it
18:03 - is actually applicable in this example
18:05 - so what you see here looks like a very
18:07 - simple comprehension but it's actually a
18:09 - bit more complicated than it seems what
18:12 - we're doing is using this sum function
18:15 - now what I want to do is generate the
18:16 - sum of all of the squares from the
18:19 - numbers 0 to 1 million now in order to
18:22 - do that I would need to have access to
18:24 - all of the numbers right or all of the
18:26 - squares from 0 to 1 million
18:29 - however I don't actually need to have
18:31 - access to all of them at the exact same
18:33 - time now the reason I'm bringing this up
18:36 - is because what some of you might do if
18:37 - you wanted to come up with that solution
18:40 - is you would start by generating all of
18:42 - the different values right you generate
18:44 - all of these different squares and you
18:46 - would be storing a million different
18:48 - values in memory now really that's not
18:50 - going to take up too much space in your
18:52 - computer but it's inefficient because we
18:54 - don't need to have all of these values
18:56 - at once we just need them one at a time
18:59 - so we can add them or sum them together
19:01 - now that's exactly what this example
19:03 - does right here and what a generator
19:05 - does in Python a generator to give you a
19:08 - really really quick summary only returns
19:10 - values when they need to be used it
19:12 - doesn't store a ton of different values
19:14 - in memory it will give you the next
19:16 - value when you ask for it and generate
19:19 - it on the fly so we're not storing all
19:21 - of these and pre- generating them we're
19:23 - only generating the value when it needs
19:25 - to be used now that's exactly what this
19:28 - example does based on the way that I've
19:30 - written it the range function here is
19:32 - going to return values one by one it's
19:35 - not going to generate an entire list of
19:37 - them so what I do here is say 4X in
19:40 - range 1 million and then I take the
19:42 - square of that value now the way that
19:45 - the sum function works is rather than
19:47 - executing this entire block right away
19:50 - and getting a list that contains all of
19:53 - the different values that we need to sum
19:55 - it's simply going to ask for each value
19:57 - sequentially and add it to a sum that
20:00 - it's storing internally so it doesn't
20:02 - need to know what the previous or the
20:04 - next square is it just gets access to
20:06 - the current square that it's looking at
20:08 - and then adds it to the sum that it's
20:10 - keeping track of so it only ever is
20:12 - looking at one of these values at a time
20:14 - and we're not storing a bunch of other
20:16 - values that we're not using the reason
20:18 - all of this works is because of features
20:20 - like generators and iterators and how
20:22 - some of these built-in functions are
20:24 - optimized now when we look at this right
20:26 - here the reason why it grabs them one by
20:29 - one is because I've kind of created a
20:31 - generator expression or a generator
20:34 - comprehension however if I were to
20:37 - actually put the list syntax here this
20:40 - would completely change now what I would
20:42 - be doing is what I talked about before
20:44 - where I would actually generate every
20:46 - single possible value or every single
20:49 - Square in the range 1 to 1 million or 0
20:52 - to 1 million and store it in a list and
20:55 - then I would pass that list to sum now
20:58 - that's not what we want so instead we
20:59 - want to remove this but I just want to
21:01 - show you that if you were to Simply add
21:03 - this list syntax now you've created a
21:06 - list comprehension and you will generate
21:08 - all of these values before the sum
21:10 - function is actually applied whereas
21:13 - when you remove this you're using
21:14 - something known as a generator
21:15 - comprehension which I'm going to
21:17 - encourage you to read a little bit more
21:19 - about if you're interested in anyways
21:21 - with that said I'm going to wrap up the
21:22 - video here I hope you found this helpful
21:24 - and I look forward to seeing you in the
21:26 - next
21:27 - one
21:28 - [Music]
21:33 - oh