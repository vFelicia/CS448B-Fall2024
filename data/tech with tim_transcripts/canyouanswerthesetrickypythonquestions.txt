00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - video where i embarrass myself by trying
00:12 - to answer python quizzes in the first
00:15 - video for this i thought this was going
00:16 - to be a breeze this was going to be very
00:18 - easy and simple but it turns out the
00:20 - questions and the quizzes i found are
00:22 - actually very challenging and there's a
00:23 - lot of really strange and obscure
00:25 - questions in there i'm not necessarily
00:27 - complaining just stating that they have
00:28 - some really kind of weird things in the
00:31 - quiz that i wouldn't have expected that
00:32 - i haven't actually seen in python before
00:35 - with that said hopefully you guys are
00:36 - looking forward to watching me try to do
00:37 - this as always please follow along let
00:40 - me know how you guys do in the comments
00:42 - down below and maybe it will make me
00:43 - feel better if i fail any of these
00:45 - quizzes with that said i do of course
00:47 - need to give you a quiz if you watched
00:49 - the last video you'd know what this is
00:50 - but the question that i'm going to ask
00:52 - you is what is the sponsor of this video
00:55 - and you need to watch the next minute to
00:56 - find that out before we get started i
00:58 - need to thank lenode for sponsoring this
01:00 - video i've been using and working with
01:03 - lenode for nearly three years now and
01:04 - they've consistently been my go-to
01:06 - choice for hosting my applications and
01:08 - servers in fact right now i'm using
01:10 - lenod to host the official tech with tim
01:12 - discord bot a website multiple of my
01:15 - domains and a kubernetes cluster lenode
01:17 - makes it super easy to spin up servers
01:19 - with their one-click app marketplace and
01:21 - have tons of written guides and youtube
01:23 - videos on their channel to help you get
01:25 - started now if you're having any issues
01:26 - you can reach out to the 24 7 support
01:29 - team and actually talk with a real human
01:31 - being now lenode's pricing is simple
01:33 - with no hidden fees and full
01:34 - transparency and you can test out lenode
01:37 - services for free by using the link in
01:39 - the description and claiming a 100 60
01:41 - day credit for any new accounts it's
01:43 - been an absolute pleasure to work with
01:45 - lenode over the past few years and one
01:47 - last thank you to them for sponsoring
01:49 - this video alright so let's dive in here
01:51 - there's a bunch of quizzes they are a
01:52 - lot harder than they look i'm probably
01:54 - gonna get a bunch of questions wrong but
01:56 - uh i was thinking we would do the python
01:58 - lists and tuples so let's do this one
02:00 - this question or this quiz contains 11
02:02 - questions let's start this up uh and
02:04 - let's see how hard this one is okay
02:06 - which of the following are true of
02:07 - python lists all elements in the list
02:09 - must be the same type not true there's
02:11 - no conceptual limit to the size of a
02:13 - list
02:13 - i don't think there is
02:16 - so i'm going to check that but yeah i
02:18 - don't think there's any limit to a to a
02:20 - list although there must be some limit
02:21 - but i guess that's based on your
02:23 - computer
02:24 - a list may contain any type of object
02:26 - except another list false it can contain
02:28 - a list a given object may appear more
02:30 - than once in a list okay and these
02:32 - represent the same list no they don't
02:33 - okay so there we go that was an easy one
02:35 - to start
02:36 - uh assume the following list definitions
02:38 - several short rebel sessions are shown
02:40 - below which displays the correct output
02:42 - okay so a
02:43 - colon is a uh no that's not true that
02:46 - would be false because this is a copy so
02:48 - it won't be the same object the max of a
02:51 - from two to four plus gralt
02:54 - okay two to four is
02:56 - this
02:57 - to this because you don't include the
02:59 - last one so baz and klux
03:01 - and then we're adding something that
03:03 - starts with the g the max is going to be
03:05 - a q when you're doing
03:07 - uh character equivalence here so i think
03:09 - that's correct
03:11 - uh we have a at four and then stepping
03:13 - by negative two so let's go here so zero
03:16 - one two three four so start here
03:19 - step negative two get that
03:20 - step negative two get that so
03:23 - that is gonna be quack spazz foo
03:26 - wherever you say that that looks correct
03:27 - to me
03:28 - uh a at negative six list index out of
03:30 - range let's see negative one negative
03:32 - two
03:33 - negative three negative four negative
03:34 - five maybe six
03:35 - all right so no that's not going to be
03:36 - correct because uh this will actually
03:39 - work a negative six should give you foo
03:41 - right but it's saying it's gonna be
03:42 - index out of range okay and then print a
03:44 - negative five to negative three so
03:46 - negative five is negative one negative
03:47 - two and a three and a four negative five
03:49 - okay and then you're going to negative
03:50 - three which is here
03:52 - so you should just get bar and baz which
03:54 - is what you get
03:55 - and do we get this correct nice okay
03:57 - next question all right so consider the
03:59 - following nested list definition
04:02 - what is the expression that returns the
04:04 - zed in baz okay so we're going to need a
04:06 - bunch of indexes here let's just start
04:08 - this so that's x
04:10 - this list is at index one so we go one
04:14 - then we have this list which is at index
04:16 - two
04:18 - okay and then we have this which is
04:20 - index one and then we need the last
04:22 - character which is i mean i can just use
04:24 - negative one or i can use one uh let's
04:27 - go negative one and be actually sorry
04:29 - negative two and be fancy and see if
04:31 - that gives it to us
04:33 - is actually telling me that's wrong
04:35 - okay well that would work if we did
04:37 - negative two i don't think i'm crazy one
04:39 - two one negative two oh sorry it's
04:42 - negative one i want the last character
04:44 - oh my gosh i'm an idiot uh okay well
04:46 - let's go on to the next question i yeah
04:48 - i guess i deserve that for trying to do
04:50 - that okay what expression returns the
04:52 - list bar
04:54 - 2.718 so we need a slice here so let's
04:57 - try this that's going to be again x1
05:00 - x2
05:02 - x1
05:03 - or no that would access baz so now we
05:05 - have
05:06 - this list then we get this list now we
05:09 - just want the last two
05:11 - so let's go with one colon
05:14 - and there we go okay nice
05:16 - all right select all the following
05:18 - statements i remove the middle element
05:19 - three from a so that equals one two four
05:21 - five okay
05:23 - so this is not gonna do it
05:25 - a two colon three equals an empty list
05:29 - so two colon three would be
05:31 - this
05:32 - not including that so it's essentially
05:34 - just this
05:35 - equals an empty list
05:37 - um
05:38 - i don't know if that's gonna work i know
05:40 - remove will work
05:41 - i think that will work but it's either
05:43 - this one or this one it's one of these
05:45 - two i have to check and then del a2 will
05:47 - work so a23 so if we have 2 3 we're at
05:51 - this
05:52 - going to this but not including it so
05:53 - it's just this and you're setting it to
05:55 - an empty list but i think since it's a
05:57 - slice
05:58 - that works i think if you do a 2 colon 2
06:01 - then that's not going to do anything
06:03 - because
06:05 - yeah that seems like that's not going to
06:06 - do anything when you make that an empty
06:07 - list okay let's try this
06:10 - and okay miracle i
06:12 - i really am forgetting what this two
06:13 - colon two does
06:15 - uh when you have like the same index on
06:17 - both sides but let's see if there's
06:19 - another question like that
06:20 - okay so list a is defined as follows
06:22 - which of the following statements adds d
06:24 - and e to the end of a so that it equals
06:26 - a b c d e
06:28 - okay so extend will work to add d e
06:31 - um a at len a colon so that's the last
06:34 - index of a i think that's valid to use
06:37 - in a slice but not for a normal index
06:39 - colon so you're extending it by d e i
06:42 - think that's going to work appending
06:44 - that will not work because it's a list
06:46 - so that will actually add the list
06:47 - inside of this list giving you a nested
06:49 - list uh adding a list will work
06:52 - uh a negative one colon equals d e uh
06:55 - negative one i think would start here
06:57 - and replace that so i don't think that
06:58 - works and then a plus d e
07:01 - um
07:02 - this is tricky because i don't know if
07:05 - plus equals d e i think that will be
07:07 - treated as an iterable in python which
07:09 - means it would actually add each
07:10 - individual element because when you're
07:12 - doing for example plus equals here with
07:14 - de it's extending i think that works um
07:19 - yeah i think that works i think that
07:20 - treats it as a list or that's just an
07:22 - exception or you can't do that at all uh
07:24 - let's try this
07:26 - shocking okay we got it correct next
07:28 - question
07:29 - all right write a python statement using
07:31 - the slice assignment that will fill in
07:32 - the missing values so a equals one two
07:34 - three four five six seven eight okay so
07:35 - we saw previously that to remove an
07:37 - element we could use whatever the index
07:39 - of that element is colon the next index
07:42 - and then that
07:43 - essentially replaced it with whatever we
07:45 - put so i think i can use that same thing
07:47 - here to do something like a colon and
07:49 - then i believe this is gonna be two
07:50 - colon three same thing we want the
07:52 - middle element here right
07:53 - and if i do two three i'm accessing this
07:57 - and i'm going to replace that with
07:59 - something so i think i need to make sure
08:00 - that i include my
08:02 - 7 and what i replace this with unless i
08:04 - can do something like 2 colon 2 and that
08:06 - would insert after element 2. um
08:10 - i think i'm going to go safe here and do
08:12 - 2 colon 3
08:13 - and then just make this 3 4
08:16 - 5 6 7 like that and then the 8 will be
08:20 - in there because i think it will remove
08:21 - the 7 when i do that again i think i
08:23 - could do though
08:25 - a two a colon a two colon two
08:28 - let's try this one see if that works
08:30 - uh three four five six
08:33 - coach should include a slice assignment
08:34 - did i not do that
08:36 - would this not work does that not give
08:37 - me the correct result
08:40 - i think what i did works um
08:44 - okay i guess it's saying though i only
08:45 - could use three four five six so
08:47 - i guess i should have done the other way
08:49 - but
08:50 - i think that this works someone can tell
08:51 - me in the comments i guess but i'm
08:52 - pretty sure that that's correct okay
08:54 - next question uh suppose you have the
08:56 - following tuple definition t equals
08:58 - foobar baz which the following
09:00 - statements replaces the second element
09:01 - bar with the string q-u-x
09:04 - it's a trick question tuples can't be
09:06 - modified i actually think that's correct
09:08 - because you can't do index assignment
09:10 - for tuples so yeah let's do that boom
09:12 - trick question got it next all right
09:15 - write python code to create a tuple with
09:16 - a single element uh the string foo and
09:19 - assign it to a variable called t
09:22 - okay
09:23 - t is equal to
09:24 - and then there's multiple ways to do
09:26 - this but i think i can just go foo
09:28 - like that
09:29 - tuple with single element i need to make
09:31 - sure i include the comma that's probably
09:32 - why they have this question because if
09:34 - you just wrap it in parenthesis it will
09:35 - just like evaluate the parenthesis and
09:37 - give you foo but if you do the comma
09:38 - then it will be a tuple i also think you
09:40 - could just do this and that would work
09:42 - too but let's run that
09:43 - and there we go nice
09:45 - all right next question uh consider the
09:47 - assignment statement abc equals oh gosh
09:50 - okay
09:51 - uh following the execution of the
09:53 - statement what is the value of b
09:55 - okay so we have to go through the steps
09:56 - here on this and figure out what this is
09:58 - so a is gonna be two and then we need to
10:00 - step by three so one two three so that's
10:02 - five i think it's going to be five
10:04 - because this will give us a slice
10:05 - containing two
10:07 - five and eight so i think five is
10:09 - correct and there we go all right we're
10:11 - doing well on this one next question
10:13 - assume x and y are signed as follows
10:15 - okay
10:16 - um what is the effect on this statement
10:19 - oh my gosh
10:20 - oh this is just a slice with y x
10:24 - x y equals y x quant negative one that
10:27 - flips it so it should just they should
10:29 - be the same whenever you do conquer
10:31 - negative one you're just going to
10:32 - reverse this so if you have y x you're
10:33 - going to get x y so x is going to be
10:35 - able to x and y is going to be equal to
10:37 - y meaning
10:38 - they should just be the same so 5 and
10:40 - negative 5 uh they're unchanged
10:43 - boom okay
10:44 - complete quiz and how many did we get
10:46 - wrong we got two questions wrong and one
10:48 - of them i think like we got correct so
10:50 - pretty good
10:51 - i'm going to call that 91 percent not 81
10:54 - percent uh and i think i probably have
10:56 - enough time to do one more so let me go
10:58 - back to the home page there maybe i'll
11:00 - find a short one and then we'll go from
11:01 - there all right so i found a short one
11:03 - but i don't know if it's going to take
11:04 - us less time because it is threading
11:06 - which is a lot more complicated but
11:07 - let's try this at six questions um let's
11:10 - just let's give this one a shot again
11:11 - this will probably be much more
11:13 - complicated than the other ones so what
11:15 - does threading dot lock do uh no it does
11:17 - not shift to all caps synchronize
11:20 - threads allow only one thread at a time
11:21 - to access a resource um that's that's
11:24 - pretty well what the lock is meant for
11:26 - so oh i it's okay i thought that was
11:29 - just multiple choice synchronized
11:30 - threads as well okay uh that's fine uh
11:33 - how many cpus or cores will the python
11:35 - threading library take advantage of
11:36 - simultaneously
11:38 - the answer is one
11:40 - yes unfortunately there's a global
11:41 - interpreter lock in python meaning you
11:43 - can only use one core of your cpu
11:46 - uh even if you have like a 12 core cpu
11:48 - or something ridiculous like that okay
11:50 - what does the thread.join method do
11:52 - thread.join i think that means you're
11:54 - waiting for this thread to finish wait
11:56 - for the thread to finish
11:58 - yes okay nice not so hard now
12:00 - race conditions are
12:02 - not something you should add to your
12:03 - code two threads incorrectly accessing a
12:05 - shared resource
12:07 - the weather on a race day testing which
12:09 - thread completes first uh
12:11 - i think it's this one
12:13 - nice okay this is actually surprisingly
12:15 - easier than the other one
12:16 - why is a good idea to use the thread
12:18 - pool executor as a context manager when
12:20 - you can
12:22 - i passed exceptions back to the main
12:23 - program it manages the startup of all
12:25 - threads and waits for them all to
12:26 - complete it looks better it prevents
12:27 - threads from having race conditions
12:29 - i don't think it would prevent race
12:30 - conditions
12:32 - the
12:33 - exceptions are
12:36 - actually interesting i've never used the
12:38 - thread pull executor so i'm essentially
12:39 - guessing between the first two here
12:41 - it manages the startup of all threads
12:43 - and waits for them all to complete i
12:44 - don't know if it would do that um
12:48 - thread pool executor you have a pool of
12:50 - threads
12:51 - i don't know i my feeling is this one
12:53 - but it could be the exception too so
12:54 - let's try this and there you go okay
12:57 - all right now we're almost done here
12:58 - true or false once you start a threading
13:00 - dot timer you cannot stop it until it
13:02 - expires
13:03 - again i've never used this before
13:05 - so i have no idea
13:07 - i'm going to imagine that
13:10 - the threading dot timer
13:12 - it's just a timer i'm going to imagine
13:14 - you can't stop it but if an exception
13:17 - occurred
13:18 - that would stop it right
13:20 - um
13:21 - let's go with true
13:23 - and it's false okay of course you can
13:24 - stop it with cancel
13:26 - all right and a nice four out of six
13:27 - sixty-six percent all right guys i think
13:30 - with that i am going to wrap up the
13:31 - video here again let me know what you
13:32 - think of these quizzes honestly they're
13:34 - pretty easy for me to film and i've been
13:35 - feeling a bit ill recently so i'm trying
13:37 - to get some easier videos out for you um
13:40 - anyways i think they're interesting
13:41 - definitely very challenging i'm learning
13:43 - some stuff from them and hopefully you
13:44 - guys are as well with that said if you
13:46 - enjoyed the video make sure to leave a
13:47 - like subscribe to the channel i will see
13:49 - you in the next one
13:52 - [Music]