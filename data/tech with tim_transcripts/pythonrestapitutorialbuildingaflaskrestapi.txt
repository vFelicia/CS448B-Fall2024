00:02 - [Music]
00:06 - hello everyone and welcome back to the
00:09 - YouTube video so in today's video what
00:11 - we're gonna be doing is building a
00:13 - RESTful API in Python using the module
00:16 - called flask now for anyone unfamiliar
00:18 - with flask and not only can you make
00:20 - websites with Python using flask but you
00:22 - can also make rest api's which is what
00:24 - we're gonna be doing in this video it's
00:26 - really known for making micro web
00:28 - services because it's a very lightweight
00:30 - module it doesn't come with a ton of
00:32 - things in the box but for our purpose
00:34 - that is perfect because there's a lot
00:36 - less setup we need to do and it's really
00:38 - fast only a few lines of code to
00:39 - actually initialize flask and start
00:41 - using it to make an API now for anyone's
00:44 - unfamiliar with the term rest or the
00:46 - term API I'll quickly define them for
00:48 - you so rest stands for representational
00:50 - state transfer you'll see why that's
00:52 - important in a second and API stands for
00:55 - application programming interface
00:57 - essentially what a REST API is is a way
01:00 - for other programs or applications to
01:03 - manipulate or query or update or delete
01:06 - or whatever it may be information so
01:08 - it's a way to deal with some kind of
01:11 - data in a structured format now what I
01:13 - mean by that is essentially we set up
01:15 - this API that has a bunch of endpoints
01:18 - now these endpoints are essentially
01:20 - almost like commands or you can think of
01:22 - them as just requests and when this
01:24 - endpoint gets hit when someone hits that
01:26 - endpoint so they go to it they connect
01:28 - to it they send a request to that
01:30 - endpoint that endpoint will return a
01:31 - response based on the request that was
01:34 - given so for example if the request was
01:36 - give me all of the views that are on a
01:37 - specific video then the response would
01:40 - be the number of views that were on that
01:41 - video let's say that video didn't exist
01:44 - then maybe the response would be
01:45 - something like 404 you know not found
01:48 - right we could not find what you were
01:50 - looking for so that's just a very basic
01:52 - example the reason I'm bringing up that
01:53 - is because what we're actually gonna be
01:55 - building in this video is kind of a mock
01:57 - YouTube API this is gonna be very
01:59 - minimal obviously not gonna have all of
02:02 - the features of YouTube we're gonna be
02:03 - dealing with channels and videos and
02:06 - essentially coming up with some kind of
02:07 - API REST API that can not only create
02:10 - new videos but can give us information
02:13 - about videos can delete videos can
02:15 - update them and can link those videos to
02:17 - channels so we're gonna start by
02:19 - building a very basic API that just does
02:21 - something like return information to us
02:23 - and then we'll make one that actually
02:25 - allows us to create new information
02:26 - update information will then put that
02:28 - into some kind of database then we'll
02:31 - deal with custom objects and while this
02:33 - video will be long but it will cover
02:34 - pretty much everything you need to know
02:36 - to actually make a fully functioning web
02:38 - service and restful api so with that
02:40 - being said let's go ahead and get
02:42 - started so before we can actually get
02:44 - started writing any code we need to
02:46 - install some requirements in our Python
02:49 - environment now if you guys are
02:50 - experienced with this I'm going to
02:51 - assume you already know what to do I
02:53 - have a requirements txt file in the
02:56 - description right now you can go ahead
02:57 - and download that and simply install
02:59 - that but for those of you that haven't
03:01 - used pip before or you just don't know
03:03 - what I'm talking about essentially what
03:05 - we need to do is install some Python
03:06 - modules and we do that through a command
03:08 - line tool called pip now by default pip
03:11 - should be installed in your system and
03:13 - you should be able to use it you can use
03:15 - pip by typing pip in your terminal or in
03:18 - your command prompt we're by typing pip
03:20 - 3 now for some reason this doesn't work
03:22 - first make sure you have Python
03:23 - installed and if you do have Python
03:25 - installed and that's not working you
03:27 - need to configure pip on your system so
03:29 - that it's working correctly so I'll
03:30 - leave a link in the description as well
03:32 - as a card in the top right hand corner
03:33 - follow along with that video it's titled
03:36 - how to install PI game but that will
03:38 - show you how to fix your pip now once
03:40 - that's working we need to install three
03:42 - things we need to install flask flask
03:44 - restful and the request module now to
03:47 - keep this easy for all of us what I
03:49 - would like you guys to do is go to the
03:50 - description and click on the link that
03:52 - says download requirements txt or there
03:55 - will be something that says requirements
03:56 - txt that should download this txt file
03:59 - for you and I want you to put that in
04:01 - the same location as where you're gonna
04:03 - be writing your Python code so in some
04:04 - kind of folder or some area that you can
04:07 - easily find you know maybe on your
04:08 - desktop or something like that so once
04:10 - you have this file requirements dot txt
04:13 - that has this content in it here in some
04:15 - location on your desktop or somewhere
04:17 - that you can find it what I want you to
04:19 - do is navigate to that from your Windows
04:21 - Explorer or from Mac OS so I'll just say
04:25 - both ways here but I am on wind
04:26 - so I'm going to illustrate how to do
04:28 - this so you can see that right now I've
04:29 - navigated into the folder that has my
04:32 - requirements txt now a shortcut to open
04:34 - up the command prompt in this directory
04:36 - is to type CMD you write in this little
04:39 - bar up top so delete everything there
04:40 - and type CMD and notice that when that
04:43 - opens CMD the path that's right here
04:45 - that I'm highlighting will be the path
04:47 - to the requirements txt file this is the
04:50 - goal you just need to make sure this
04:51 - path matches you can also do use
04:53 - something called change directory so
04:55 - change directory will allow you to
04:57 - select the folder or the location that
04:59 - you want to move to so if I say CD and
05:01 - then I type flask rest api tutorial like
05:05 - that I've gotten through those options
05:07 - by hitting tab you can see that it will
05:09 - move me into that folder and now I'll be
05:12 - in the right location so just make sure
05:13 - this matches if you're on Mac and you've
05:15 - navigated to the right location what you
05:17 - can do I believe is right-click and
05:19 - click open terminal or something like
05:21 - that and then you should be in the
05:23 - correct location to be able to do this
05:24 - otherwise just use change directory from
05:26 - opening up terminal to get into the
05:28 - correct directory where your
05:29 - requirements not txt file is and then
05:32 - you should be good to go so now what
05:34 - we're gonna do is type pip or pip 3
05:36 - depending on if you're on Mac or Linux
05:37 - or Windows then type pip install - are
05:41 - and then requirements dot txt so this is
05:44 - the command you might need to change
05:45 - this again to pip 3 if you're on Mac or
05:47 - Linux and then go ahead and hit enter
05:50 - what this will do is take all of the
05:52 - lines that I have inside a requirements
05:54 - dot txt and automatically install that
05:56 - module into your Python environment this
05:58 - way we're all on the same page we're
06:00 - using the same versions and hopefully
06:01 - everything should be ok so anyways once
06:04 - you've done that we're good to go let's
06:05 - go to an empty Python file you can just
06:08 - make one I'm gonna call mine main top PI
06:10 - and let's start actually writing some
06:11 - code so please just make sure that you
06:13 - have all of those installed again that's
06:15 - flask restful flask and the request
06:18 - module ok so the first thing we're gonna
06:20 - do is we're gonna say from flask import
06:23 - flask with a capital F and then we're
06:26 - gonna say from flask underscore restful
06:29 - imports API and import resource now
06:33 - these are the two main things we need to
06:35 - use are the two main modules we're gonna
06:37 - be using here we'll import some other
06:39 - things
06:40 - but the first thing we need to do is
06:42 - actually create an app which within
06:44 - flask so this is common this is what you
06:45 - usually do when you make a new flask app
06:47 - you say app equals flask and then
06:50 - underscore underscore name underscore
06:51 - underscore so there's two hundred scores
06:54 - there make sure you don't miss that and
06:55 - then next we're going to type API equals
06:57 - API and we're gonna put app inside of
07:00 - here
07:00 - this is pretty much saying we're gonna
07:02 - wrap our app in an API and this just
07:05 - initializes the fact that we're using a
07:06 - restful api once we've done that what
07:09 - we're actually gonna do is we're going
07:11 - to go down to the very bottom of our
07:12 - program and we're going to save
07:13 - underscore underscore name underscore
07:14 - underscore equals equals and then in
07:17 - double quotation marks underscore
07:18 - underscore main underscore underscore
07:20 - then we're gonna say app dot run debug
07:25 - equals true this is gonna actually start
07:28 - our server and start our flask
07:30 - application and the fact that debug
07:32 - equals true will say that hey this is in
07:35 - debug mode so we're gonna see all of
07:37 - that output and any logging information
07:38 - so if anything goes wrong we'll actually
07:40 - know why if you're ever running this in
07:42 - a production environment please do not
07:44 - run with debug equals true this is only
07:47 - when you're running in a development
07:48 - environment and you're testing things
07:49 - like we are right now okay so once we've
07:52 - done that just gonna open up a command
07:55 - prompt window here I'm gonna go and I'm
07:58 - actually gonna run this main dot Pi
07:59 - application and make sure that this is
08:01 - working now you can run this from
08:03 - wherever you'd like but I'm just gonna
08:04 - run mine using Python main dot PI I'm
08:08 - doing this from the command line and you
08:10 - can see that I'm in the right directory
08:11 - where that made-up high script is so
08:13 - running Python main top I will actually
08:15 - use Python to run that file again if
08:17 - you're on Mac or Linux this might be
08:19 - Python 3 really depends so now we can
08:22 - see it says running on HTTP 1 to 700 1
08:26 - colon 5000 so this is actually the URL
08:30 - that our server or our API is currently
08:33 - running on so this means that whenever
08:36 - we send a request we're gonna send it to
08:37 - this location right here and then
08:40 - whatever else going after the slash so
08:43 - this is just your localhost location you
08:44 - can change this if you want but just
08:46 - make sure this is working first and that
08:48 - we should be good to go ok so now that's
08:50 - working what we're gonna do is we're
08:52 - gonna continue and we're actually going
08:53 - to make our
08:53 - first what we call resource within this
08:56 - API this is pretty easy to do what we're
08:58 - gonna do is make a class we're gonna
09:00 - call this class whatever we want
09:02 - whatever we kind of makes sense whatever
09:03 - information it's gonna return to us and
09:05 - in this case I'm just gonna call mine
09:06 - HelloWorld now this is just a basic
09:09 - example we'll get more complicated later
09:11 - but inside of HelloWorld what we're
09:13 - gonna do is we're gonna inherit from
09:15 - resource essentially what this is saying
09:18 - is we're going to make a class that is a
09:19 - resource and this resource will have a
09:22 - few different methods that we can
09:24 - override on it that will let us do
09:26 - things like handle a get request handle
09:28 - a put request handle a delete request
09:30 - that is what we write inside of here so
09:32 - don't worry if you're not familiar with
09:33 - classes but the idea is we define what
09:36 - we call get inside of here so I can
09:39 - define get like that and I can put self
09:42 - in here and then this is what will
09:45 - happen when a get request is sent to a
09:48 - certain URL that we'll talk about in a
09:50 - second so anyways we're going to define
09:51 - get an inside of here all I'm gonna do
09:54 - right now is return a Python dictionary
09:56 - that simply says hello world inside of
10:00 - it like that now again this might not be
10:02 - completely valid but it's totally fine
10:05 - it's just for this example what I've
10:06 - done is made a resource called hello
10:08 - world
10:08 - we've overridden the get method which
10:10 - means this is what will happen when we
10:12 - send a URL our sunday get requests to
10:15 - read to a specific URL and then when
10:16 - that happens we're gonna return the
10:18 - information hello world so let me go
10:21 - here now and what I'm gonna do is
10:22 - actually register this as a resource so
10:25 - I'm gonna say API dot add resource and
10:29 - then inside of here resource I'm going
10:31 - to put the name of the class that I want
10:33 - to add so essentially what I'm saying is
10:35 - since this is a resource let's add this
10:37 - to the API and let's make it accessible
10:39 - through what URL so right now I'm just
10:42 - gonna put slash which just stands for
10:44 - default URL but let's say we only want
10:47 - to access this when the user types hello
10:50 - world it sends a request to hello world
10:52 - then I would use hello world as my
10:55 - endpoint here so essentially we're
10:58 - determining what the root of this
11:00 - resource is gonna be so how do we find
11:03 - this resource when we send a request
11:07 - you know the server that we're running
11:08 - on so that's what we're talking about
11:09 - here so that's what we've done we've
11:11 - said API dot add resource HelloWorld and
11:13 - we've said that's gonna be accessible at
11:15 - slash hello world what that means is if
11:18 - we send a get request to slash hello
11:20 - world it should return the information
11:22 - hello world so to actually test that
11:24 - what I'm gonna do is make a new file and
11:27 - I'm gonna call this one test dot py go
11:30 - ahead and do this as well if you'd like
11:31 - to you can also do this in a Python
11:33 - interactive console but since we're
11:35 - gonna do this a few times I'm gonna make
11:36 - it in its new file and what I'm gonna do
11:38 - inside of here is actually send a
11:40 - request so I'm gonna import the request
11:43 - module from Python this lets us send you
11:46 - know post request put request get
11:48 - request whatever it may be and inside of
11:50 - here I'm gonna define first of all what
11:51 - our base URL is gonna be which is 80
11:53 - HTTP colon slash slash 127.0.0.1 colon
11:59 - 5,000 slash and that's what my base URL
12:02 - is so that essentially is the location
12:04 - of the API that's the server that it's
12:07 - running on and recall that we got that
12:09 - because we were looking here and it said
12:10 - running on this is what you want to put
12:13 - where you where I'm putting base here
12:15 - that's essentially what we want now what
12:17 - I'm gonna do is I'm gonna say response
12:19 - equals requests dot get and inside of
12:23 - here I'm gonna put the base URL plus
12:27 - hello world essentially what I'm saying
12:30 - is I want to send a get request to the
12:32 - URL that is base plus that so we'll send
12:35 - it to that slash hello world and then I
12:37 - want to take that response and what I
12:38 - wanted to do is I actually want to print
12:40 - the response dot JSON now the reason I
12:43 - have to do dot JSON is just cuz I need
12:45 - this to not look like a response object
12:47 - and to actually be some kind of
12:48 - information so this dot JSON method will
12:51 - do that for us
12:51 - so let's actually go ahead and see what
12:53 - happens when we run test stop hi the way
12:56 - we're gonna do that is just by running
12:57 - to command prompt windows here so I'm
12:59 - gonna start by running our API are
13:01 - running our flask server and then I'm
13:03 - actually gonna go ahead and run this
13:05 - test dot PI and I'll show you what
13:07 - happens and we seem to have gone an
13:09 - error here object of type set is not
13:11 - JSON serializable I know the issue here
13:14 - that was my bad sorry inside of this
13:17 - here what we're gonna do is instead of
13:18 - just having a hello world we're gonna
13:20 - say Dada : hello world so I just need to
13:23 - make a key value pair here whether
13:25 - you're returning from the get request I
13:26 - thought we would have to do that but I
13:28 - wanted to try with just the whole world
13:29 - so anyways let's give this a shot now so
13:32 - I was just watching back the video while
13:34 - editing and I realized I missed out on a
13:35 - pretty important explanation so I wanted
13:38 - to patch it in here essentially what I
13:40 - want to say is that every time that we
13:42 - return some type of information from our
13:45 - API we need to make sure that
13:47 - information is serializable now that's a
13:50 - big word a lot of people probably don't
13:51 - understand what that means but you're
13:53 - gonna see that when I pass information
13:55 - back or return information sorry I'm
13:57 - doing it inside of a Python dictionary
13:59 - now the reason for that is because this
14:01 - kind of represents what we call a JSON
14:04 - format now JSON is just literally Python
14:07 - dictionaries you have keys and you have
14:09 - value so you'd have something like data
14:11 - that could store another dictionary and
14:13 - then inside of here you could have like
14:14 - name and that stores
14:16 - Timm whatever right this is like a JSON
14:18 - format and essentially we're gonna be
14:20 - returning JSON serializable objects so
14:24 - what we need to do is make sure we're
14:25 - returning Python dictionaries or
14:27 - something else that is serializable so
14:30 - just so you understand and you realize
14:31 - that I can't just simply return the
14:33 - string hello world actually that will
14:36 - probably work but there's a few things
14:37 - that I just can't return from my API or
14:39 - that will give me all kind of errors
14:41 - because they're not JSON serializable so
14:44 - just ensure that when you're returning
14:45 - something from your REST API its JSON
14:48 - serializable if you don't understand
14:49 - what that means you can look that up but
14:51 - the rule of thumb is if you want it to
14:53 - work just use a Python dictionary like
14:55 - this make some key and then have some
14:57 - value and you should be good to go
14:59 - my apologies for not having on the
15:01 - original video but hopefully that clears
15:02 - it up for any of you guys that are
15:03 - wondering as we go through so let's go
15:05 - back here
15:06 - I think the server's still running and
15:08 - by the way when you run the server in
15:10 - debug mode when you save it
15:11 - automatically updates so that's why
15:13 - that's happening we're gonna Python test
15:15 - on pi and now we'll see what we actually
15:17 - gets when we refresh this so we can see
15:19 - that what that actually returned to us
15:21 - over here is data hello world and it
15:23 - showed us that there was a get request
15:25 - sent to slash hello world and 200 which
15:28 - means okay so when he
15:29 - see a status 200 that means everything
15:31 - was okay nothing crashed now I can do
15:34 - this as many times as I like right I can
15:37 - keep her running these requests and
15:38 - every single time that I run Python
15:40 - testify we're gonna get a result that
15:42 - says data hello world perfect there we
15:45 - go so that is the basics of making a
15:48 - flask API of course we're gonna continue
15:50 - but that's how you make a resource you
15:53 - go ahead you define a resource like that
15:55 - you override whatever methods you want
15:57 - to happen on this resource so in this
15:59 - case we want a get method and there you
16:02 - go when you have send a get request it
16:04 - will return whatever you go ahead and
16:06 - put here now let me go back to test op
16:08 - pie here and I want to show you what
16:10 - happens when I send a post request
16:11 - rather than a get request so let's go
16:14 - back to our command prompts the server
16:16 - is still running as you can see there
16:17 - I'm gonna run Python test stop hi and
16:20 - notice that what it says here is message
16:22 - this method is not allowed for the
16:24 - requested URL so we actually got an
16:26 - error that was automatically handled by
16:28 - flask that told us hey no you can't do
16:30 - that we don't have a post method
16:32 - overridden here on our main DUP hi I'm
16:36 - sorry in our hello world resource so
16:38 - that doesn't work but if I go ahead here
16:41 - and say define post and I put itself and
16:43 - let's just return this same information
16:45 - here it's actually returned data and
16:47 - we'll just say posted like that and
16:51 - let's see what happens now when we
16:53 - actually run this so let's bring this
16:55 - back up Python tests up hi and there we
16:58 - go we get data posted so when we
17:00 - override the correct method and use the
17:01 - correct method we're good
17:03 - and that works okay so now what we're
17:06 - gonna do is we're actually gonna deal
17:07 - with storing data on the server and
17:09 - understanding how we can pass
17:11 - information through the request because
17:13 - it's not extremely useful to just get
17:15 - back some dictionary like this that just
17:17 - says data and then whatever information
17:19 - is here what we probably want to do is
17:21 - return some specific information or we
17:23 - want them to ask for some specific thing
17:26 - right they're probably not just gonna
17:27 - send one general request that can give
17:29 - them everything they want so what I'm
17:31 - gonna show you now is how we can
17:33 - actually pass arguments or pass kind of
17:35 - parameters through the request URL so if
17:39 - I look here at slash hello world what I
17:41 - can actually do is the
17:44 - a parameter that I want to be passed in
17:46 - now to do this what you do is use these
17:49 - angle brackets like I have here you
17:51 - define the type of the parameter that
17:53 - you want to come in in this case I'm
17:54 - gonna say string but you could do int
17:56 - like that if you wanted to I believe you
17:58 - can do boolean as well but I'm gonna put
18:01 - in Slyke this or so not in string
18:03 - defining that hey I want this parameter
18:06 - to be a string I'm gonna put a colon
18:08 - then I'm gonna define the name of this
18:10 - parameter which in this case I'm just
18:11 - gonna say is name what this essentially
18:14 - says is I want the user to type some
18:16 - string after hello world we're gonna
18:19 - pass that in to our request here so in
18:22 - this case I'm gonna go and I'm gonna say
18:24 - name like that and what that means is
18:27 - now inside of this get request I'll be
18:29 - able to access whatever name they typed
18:31 - here and I can do something specific
18:33 - with that so right now all I'm gonna do
18:36 - is just return that name back to them
18:38 - just to show you how this works but the
18:40 - idea is that we can create parameters
18:42 - and technically I can make another
18:44 - parameter if I wanted to okay go ahead
18:46 - and do int and just say you know test or
18:50 - something like that and I'll actually
18:51 - show you how this one works now we have
18:53 - a name and we have test and I'll just go
18:55 - and I'll say test and we'll just put
18:58 - tests like that and so data actually
19:00 - let's just put name and then this way we
19:02 - can see which what these two are so now
19:05 - if I want to send a request to hello
19:07 - world I need to pass not only a name but
19:09 - I also need to pass some numbers for
19:11 - tests so I'm just gonna go Tim and I'm
19:13 - gonna go nineteen just going with my
19:15 - name and my age all right so let's go
19:17 - ahead and do that
19:19 - and let's run these two things now and
19:22 - see how this works so we can see that
19:23 - the server is automatically refreshing
19:25 - because it's in debug mode so I don't
19:26 - need to run that again now I'm gonna go
19:28 - to Python test stop I just refresh that
19:31 - there and oops we can't use a post
19:33 - request anymore we need to use a get
19:35 - request my apologies on that so let's go
19:38 - back here and run this one more time
19:40 - okay so python test op pi we get named
19:44 - Tim test 19 because that is the
19:46 - information that we sent and that was
19:48 - the information we got back so that is
19:50 - the basics of making parameters inside
19:52 - of here again the reason we might do
19:54 - that is that we can have the user kind
19:55 - of ask for one specific
19:57 - right so now they're gonna pass hello
19:59 - world let's just keep it at name for now
20:01 - we don't need anything else and what
20:03 - I'll do is I'm actually gonna make an
20:04 - object up here that says names okay so
20:09 - I'm going to say names equals and we're
20:10 - just gonna make a dictionary and what
20:12 - we're gonna get the user to do now is
20:13 - when they send us a name we'll return to
20:16 - them any information relating to the
20:18 - name that they asked for so let me just
20:20 - go inside of here and let me go Tim and
20:22 - let's just go : and let's make another
20:24 - bit of information here we'll say age 19
20:28 - we'll say gender male and then what
20:33 - we'll do is we'll discuss that's not
20:35 - what I wanted we'll make another one
20:37 - here so let's say instead Tim will say
20:40 - bill will go age 70 and we'll go gender
20:48 - male again so what I'm doing is just
20:51 - putting some information inside of a
20:53 - dictionary here that we can access and
20:54 - now when they say get what I'll actually
20:56 - do is I'll return names of name like
21:01 - that so now we'll take whatever name
21:03 - they pass in and we'll give them some
21:05 - information relating to that name so
21:08 - let's go to tests now let's change this
21:10 - dust to be Tim and let's now test this
21:12 - out and see if this is working so if we
21:14 - go here oops
21:15 - let's go python name male is not defined
21:19 - oops
21:19 - I need to put that in a string my bad
21:22 - guys so male needs to go inside of
21:24 - quotation marks like that okay so now we
21:27 - should be good to go let's see if flask
21:29 - server is running okay we're good let's
21:33 - run test up high and there we go we get
21:35 - information so he had age 19 gender male
21:38 - now let's go ahead and change the name
21:40 - here and set a Tim to be built
21:42 - oops not nil I want that to be built
21:46 - then let's run this now and we can see
21:51 - that we get age 70 gender male so that
21:54 - is the basics of how that works in terms
21:56 - of passing parameters and returning
21:58 - information now we're gonna start kind
22:00 - of creating what I was talking about
22:02 - before which is this video system or
22:04 - this YouTube kind of like program right
22:08 - or API or whatever you want to call it
22:10 - so
22:10 - setup hello world now what I'm gonna do
22:13 - is I'm actually going to make another
22:14 - class and I'm gonna call this class
22:16 - video this is gonna inherit from
22:19 - resource again and we're gonna have a
22:22 - get inside of here that has a self and a
22:25 - video underscore ID now what I'm gonna
22:28 - do is instead of names I'm gonna go here
22:30 - I'm gonna say videos equals and we're
22:32 - gonna make a kind of empty dictionary
22:34 - like this is gonna store all of our
22:36 - videos now what I'm gonna do is I'm
22:38 - gonna say return videos of video ID so
22:44 - essentially when you send a get request
22:46 - to whatever URL that we're about to
22:48 - define here you will get any information
22:50 - about the video that has the video ID
22:52 - that you asked for
22:53 - so what do we need to do then we need to
22:55 - add a resource to our API so we're going
22:57 - to say API add resource the resource is
23:00 - gonna be video and the key is gonna be
23:03 - slash video slash int : video ID there
23:11 - we go so now whenever we send
23:13 - information to this request we need to
23:15 - pass a video ID and we'll do something
23:18 - with that now instead of just having it
23:20 - get though what I actually wanted to is
23:22 - I want to make a way for us to create a
23:24 - new video so we're gonna say actually
23:27 - put right here so define put we're gonna
23:29 - say self and video underscore ID as well
23:34 - and now what we're gonna do is we're
23:37 - actually going to create a video inside
23:40 - of this put now how are we gonna do that
23:42 - well what information do we need for a
23:44 - video first of all that's the first
23:46 - thing we need to define is kind of like
23:47 - okay when we make a new video what do we
23:50 - need about that video are we gonna have
23:51 - something like the views the likes the
23:53 - dislikes is that information we want to
23:55 - store do you want to store how old it is
23:56 - what time was uploaded out all of that
23:58 - right how do we do that well this is
24:01 - where we're gonna start talking about
24:02 - something called argument parsers now
24:04 - the first thing I'm gonna do here so I'm
24:06 - just gonna go ahead and just write a
24:07 - return just so we have something going
24:09 - on here but we need a way to essentially
24:11 - create a new video so we're gonna make
24:15 - it so that they have to pass certain
24:17 - information that's not actually inside
24:19 - of here so not right inside of the URL
24:22 - but inside of the
24:23 - data so when you send a request let's go
24:26 - to our test script here what you can
24:28 - actually do is if ice changes to say a
24:29 - put request I can pass data in the form
24:32 - of say JSON or some other format here
24:35 - that will actually get sent alongside
24:37 - of my request so rather than just having
24:40 - all the information we want stored
24:41 - directly inside of the URL which anyone
24:44 - can kind of see and look at we can send
24:46 - information through data so I could send
24:48 - something like likes 10 like that and
24:51 - essentially I just want to show you the
24:53 - way that we can actually get data from a
24:56 - request like this right so if I'm
24:58 - sending likes 10 how do I actually get
25:01 - this information in my request over on
25:03 - this side well the way you do that first
25:06 - is by importing request up here
25:08 - so from flask excuse me import flask
25:12 - comma request now request is the request
25:15 - object can be used inside of resource
25:18 - and essentially what it will do is give
25:21 - us any of that information so it can
25:22 - give us stuff like any of the data that
25:25 - was sent here there was some other
25:26 - things we can access on request too like
25:29 - the method for example lay my type
25:31 - request dot and I believe method that
25:33 - will tell us that this was a put because
25:36 - while we're inside of the put class are
25:38 - inside the put method sorry but anyways
25:40 - if I want to look at the data that was
25:41 - sent what I'm gonna do here is just
25:43 - print and we'll just say request dot
25:46 - form now that data that we sent here
25:49 - comes in what's known as a form and we
25:52 - can access the likes we can access any
25:54 - of the other keys here by doing
25:56 - something like request dot form and then
25:59 - putting likes here now what that will do
26:01 - is give us the value 10 because we sent
26:04 - a form that has the key likes associated
26:08 - with the value 10 so hopefully that
26:10 - makes sense
26:10 - but I'll just print request stop forms
26:12 - you can see what it looks like I mean
26:14 - you can get the idea of that is actually
26:16 - how this information is being sent this
26:18 - is the server on my left I'm gonna run
26:20 - this sometimes I have to just click over
26:22 - here to get this to work and we can see
26:24 - a mutable odd yeah immutable multi dict
26:27 - and we have likes comma 10 showing up
26:30 - here so obviously not a format most of
26:33 - us are probably familiar with but it
26:34 - does store that information and again if
26:37 - I wanted to
26:37 - that I could use likes now that's fine
26:40 - that's okay but it's actually a lot
26:42 - easier way to do this rather than use
26:44 - requests in fact flask restful comes
26:47 - built-in with this thing called a
26:49 - request parser which essentially makes
26:51 - sure that when we send a request we pass
26:54 - the information that we need with that
26:56 - request so what we can do is we can
26:59 - actually say video underscore put
27:01 - underscore I'm just gonna call this args
27:04 - equals requests a parse like that dot
27:08 - and then in this case it's request
27:10 - parser now we just put the brackets like
27:12 - this here to instantiate that but what
27:14 - this is saying is we're gonna make a new
27:15 - request parser object and what this
27:18 - request parser object will do is
27:20 - automatically parse through the request
27:22 - that's being sent and make sure that it
27:24 - fits the kind of guidelines that we're
27:26 - about to define here and has the correct
27:28 - information in it if it does it will
27:31 - actually allow us to grab all of them
27:33 - information really easily by using a
27:35 - method called parse args you'll see that
27:38 - in a second but just follow along with
27:40 - me here the idea is that say every time
27:42 - we want to create a new video we want to
27:44 - have three different fields so we want
27:46 - to have like the likes we want to have
27:48 - the name of the video and then maybe we
27:50 - want to have I don't know what else did
27:52 - we have on here the views how many views
27:54 - are on that video well if we want to
27:56 - make sure that these three pieces of
27:58 - information are sent to us we need some
28:00 - way to validate that right so this
28:01 - request parse here that we're using so
28:04 - video put args is gonna do that for us
28:06 - so what we do is we logo video put args
28:09 - dot add argument and what this says is
28:12 - this is one more thing that we want this
28:14 - is something we need to be sent with it
28:16 - so what we're gonna do isn't put the
28:17 - name of the argument which is
28:18 - essentially going to be the key that
28:19 - needs to be sent we're gonna put a name
28:21 - we'll put the type that we want this
28:24 - argument to be in this case I want the
28:26 - name of the video to be a string so I'm
28:28 - going to put STR we're just writing
28:30 - Python datatypes here so you could do in
28:32 - string boolean so on and then you can
28:35 - put a health value and what the health
28:37 - value says is what we should display to
28:39 - the sender if they don't send us this
28:42 - name argument so it essentially is like
28:44 - an error message that we're gonna put
28:46 - here so we'll just say this is the name
28:48 - of the video so this is going to tell us
28:51 - the
28:51 - hey you didn't send name this argument
28:53 - is the name of the video you need to
28:55 - send it and flask will automatically
28:57 - handle sending air requests to the
29:00 - sender if that occurs if the request
29:03 - parser does not find the arguments that
29:05 - we need so what I'm gonna do now is just
29:07 - copy this and I'm just gonna paste it
29:09 - two more times because what we're gonna
29:11 - do is we're gonna now have names are
29:13 - sorry not names we're not name views and
29:16 - likes as mandatory arguments and now
29:18 - these are gonna be both ins and we're
29:21 - just gonna put to name a video will say
29:24 - views a video and I will just say likes
29:29 - on the video views of the video likes on
29:32 - the video yeah that makes enough sense
29:33 - to me okay so now we have a request
29:35 - parser that has these three arguments
29:38 - that are mandatory to be sent these are
29:40 - the types of the arguments and these are
29:41 - the help strings that will show up if we
29:43 - don't send that valid argument so now
29:46 - inside of put what I'm gonna do is I'm
29:48 - gonna say args equals and in this case
29:50 - we're gonna do video put args dot parse
29:54 - args now this is gonna get all of these
29:57 - arguments
29:58 - that's what args stands for arguments
30:00 - from here and if they're not in there so
30:03 - if they weren't sent it'll automatically
30:05 - send back an error message so what I can
30:08 - do now is just print out args or
30:11 - actually let's just send a response back
30:12 - that is video ID : args I won't be able
30:16 - to have a look at what args actually is
30:18 - yeah so that should be good for now
30:21 - we'll get it to add into videos later
30:23 - but I just want to make sure that this
30:24 - is working for us before we do anything
30:26 - else so now when we send a request I'll
30:29 - leave it like this for now to show you
30:31 - what happens when we send an invalid one
30:32 - and then I'll send a valid one after so
30:34 - you notice that we didn't send anything
30:37 - to do with views or do with the name of
30:40 - the video we just have likes so loop so
30:42 - I could open this up okay let's have a
30:46 - look at this now so Python test stop hi
30:49 - and whoa what happened we got a huge ton
30:52 - of errors well that is because first of
30:54 - all we did not send the correct thing
30:57 - forcibly close let me send that one more
30:59 - time there we go okay so now we get one
31:01 - name and none views none likes 10th
31:04 - okay so sorry I don't know what happened
31:06 - up there I think it's just because the
31:07 - server needs to refresh but the idea is
31:09 - this was the response that we got when
31:12 - we didn't send the name and the views
31:14 - now the reason that didn't crash is
31:16 - because we didn't make these arguments
31:18 - required which I'll show you how to do
31:20 - in one second but notice that that
31:22 - argument parser automatically made these
31:24 - none because we didn't send anything
31:27 - with them and it made likes 10 so the
31:29 - response from our API here was the video
31:32 - ID args inside of a dictionary and args
31:35 - of course was a dictionary that had
31:37 - those arguments now let's say we
31:38 - actually want this to crash when when we
31:41 - don't send the correct arguments then
31:43 - what we need to do is make this required
31:45 - so you can say required equals true
31:47 - inside of all of these add arguments and
31:51 - this will make sure that now instead of
31:52 - sending that valid response back with
31:55 - none as the key for all are known as the
31:57 - value for all those keys it will
31:59 - actually just crash or it'll show us an
32:00 - error message so let's run this now and
32:03 - notice we get message name name a video
32:07 - so this is pretty much telling us hey
32:08 - you know this was the argument that you
32:10 - sent this was invalid right this just
32:13 - didn't happen and in fact inside of this
32:15 - health up sorry help string here what we
32:18 - should probably do is say name of the
32:20 - video is required right just to make
32:23 - sure that they actually understand that
32:24 - but anyways you get the point
32:26 - what it is it sent us a message that
32:28 - said hey you know name this is the key
32:31 - or the argument that we're looking for
32:33 - and this was the help string associated
32:34 - with it and we would not have created a
32:37 - new video if that had happened so
32:40 - anyways that is kind of the basics on
32:42 - that now that we understand how that
32:44 - works let's actually start adding videos
32:46 - and then being able to get videos making
32:47 - this a bit more functioning and then
32:49 - we're talking about delete videos and
32:50 - add a few other things as well so the
32:53 - first thing that we're gonna do here is
32:54 - we're gonna add a new video in from the
32:56 - put request so let's say args are valid
32:58 - we don't get that you know error message
33:00 - happening then what we're gonna do is
33:01 - we're gonna save videos video underscore
33:06 - ID equals arcs
33:08 - now since args is a dictionary of its
33:10 - own it's totally fine to just do that
33:12 - and now what we can simply return is
33:14 - just ID
33:16 - whenever we want here actually so I'm
33:18 - just gonna return videos video
33:21 - underscore ID and what I'm gonna return
33:24 - beside this is actually a code so what
33:27 - you can do if you want to return a
33:29 - specific status code to the person who's
33:31 - sending the request is inside of the
33:33 - return statement
33:34 - after you return the data that you want
33:36 - you can simply return some coat so 201
33:39 - stands for created so I'm gonna send 201
33:42 - as a response back so that they can see
33:45 - that hey you know this was created that
33:47 - work fine you don't have to send these
33:49 - by default it sends what's known as 200
33:52 - which is the one for okay which just
33:54 - meant you know nothing broke there's but
33:56 - there's a bunch of other status codes
33:57 - that you could send depending on what
33:58 - you're doing so I'm gonna send to a one
34:00 - to show the person that it was created
34:01 - and let's go ahead and test this now
34:04 - because now we can actually use a get
34:06 - and put request and we can see how they
34:07 - work together so what I'm gonna do is
34:09 - say response equals request stop put
34:11 - will print out that and then I'm just
34:13 - gonna copy this again and I'm gonna put
34:15 - an input in between so we can kind of
34:17 - pause it and I can press ENTER first and
34:19 - now I'm gonna actually send a get
34:21 - request and I'm gonna look for video
34:23 - slash one so the idea here is what I've
34:26 - done is I've said whatever video ID they
34:28 - pass here in the put request like as the
34:31 - actual what do you want to call it
34:33 - argument or as the parameter whatever it
34:36 - is in after this slash we're gonna make
34:38 - that the video ID so that's gonna be the
34:40 - key inside this dictionary and we're
34:42 - gonna associate that with the arguments
34:44 - that they pass as kind of the data right
34:46 - that was sent and then that way we can
34:48 - return what if they have the video ID
34:51 - that video ID back to them and since
34:53 - they created it they wouldn't know what
34:54 - that video ideas so anyways that's fine
34:56 - we'll just do that and let's go and have
35:00 - a look at this okay so now the service
35:02 - should be running we'll run Python tests
35:03 - up high we get message name a video is
35:06 - required ah forgot about that's good job
35:09 - we have those messages because I need to
35:10 - add a name which we'll just put as Tim
35:15 - and then we need to add views which
35:18 - we'll just put as you know a hundred
35:21 - thousand for right now so let me refresh
35:23 - this one more time okay
35:27 - oops server crashed on us they
35:30 - let me just rerun this is cuz the key
35:32 - didn't exist that's fine but let's go
35:34 - Python test up hi now we can see named
35:36 - Tim views 100,000 likes 10 and I'll
35:40 - press enter and we get named Tim views a
35:43 - thousand likes 10 the reason that's
35:45 - meaningful is because I sent a get
35:47 - request that get requests asked for ID 1
35:49 - and that returned to us whatever was
35:51 - stored inside of videos that had ID 1 ok
35:56 - so I'm confident that most of that is
35:58 - working now the next thing I want to do
36:00 - is actually fix this error that we just
36:02 - ran into over here there would this a
36:03 - whole big whack of code that was
36:05 - happening in this key error 1 and I want
36:08 - to make sure that we actually don't
36:09 - crash if we ask for a video which ID
36:12 - does not exist right because if I try to
36:14 - access video ID 1 from videos and it's
36:17 - not there then of course our program is
36:19 - gonna crash so how do we avoid that well
36:22 - what I can actually do is define a
36:23 - function I can say abort if on your
36:26 - score video underscore I ID doesn't
36:30 - exist this is a long name for function
36:33 - you can use whatever you want but I'm
36:34 - gonna say abort if video ID doesn't
36:36 - exist I'm gonna put video ID in here and
36:39 - what I'm gonna say is if video ID not in
36:42 - videos which is the variable we're using
36:45 - to store the videos then I'm gonna say
36:47 - abort like that
36:49 - and what I'm gonna do now is import
36:51 - abort from flask
36:53 - restful abort essentially will send an
36:56 - error message back saying whatever you
36:58 - put here so we're gonna say video ID is
37:00 - not valid dump like that so essentially
37:06 - this will just abort so whenever you see
37:08 - the abort function like this whenever
37:11 - that is called it just immediately
37:12 - returns a response back that says hey
37:15 - this crash this didn't work so we can
37:17 - just call abort like this and that
37:19 - return statement will be skipped so just
37:21 - keep that in mind so what I'm gonna do
37:23 - now is inside of guest I'm gonna call
37:25 - our guest inside of get I'm gonna call
37:28 - abort if video ID does not exist and
37:31 - then inside of here I'm going to simply
37:34 - put video ID and that should be good so
37:38 - this will make sure that that video the
37:40 - ID exists before we actually go ahead
37:43 - and do that return so we can avoid
37:45 - crashing the program so let's go back
37:47 - over to the server now and to our test
37:50 - script and let's go and let's go test
37:53 - let's get rid of this first one here
37:56 - because we don't need that we can get
37:59 - rid of the input and let's try to look
38:00 - for a video ID 6 and see if what happens
38:03 - now if we do that
38:04 - so obviously video ID 6 doesn't exist so
38:06 - if I run Python test op pi what happened
38:10 - here we got some kind of error let me
38:13 - just have a look here alright so I
38:15 - noticed the error here I forgot that I
38:17 - actually need to send what's known as a
38:19 - status here so before I can actually
38:21 - send the message which is this which I'm
38:24 - actually gonna define by saying message
38:26 - equals this is correct now we need to
38:29 - send a status code so if we abort we
38:31 - need to send a status code 404 stands
38:33 - for like could not find you and you see
38:35 - 404 page not found we're gonna say
38:37 - message video is not valid or we could
38:40 - say could not find video now to give you
38:44 - an example of some more status codes
38:46 - there's a status code 409 that that
38:48 - means video already exists or you like
38:49 - thing already exists I'm just using
38:52 - video because that's our example there's
38:54 - a whole bunch of other status codes and
38:56 - if you want to know them I'd recommend
38:57 - you look them up so anyways let's run
39:00 - this one more time it's common to make a
39:03 - few errors here go python test op pi and
39:05 - now we get message could not find video
39:07 - status code 404 which we can see right
39:10 - here so that's good now so now we have
39:12 - video kind of somewhat working the next
39:15 - thing I want to do is I want to
39:16 - implement another method for deleting a
39:18 - video and I also want to make sure that
39:20 - we don't create a video that already
39:22 - exists so let's go with the leap video
39:24 - first I'm just gonna define delete
39:26 - notice that the name of my methods match
39:28 - the HTTP methods that I'm accommodating
39:31 - so we have get put delete you don't have
39:34 - to use these for what they're actually
39:35 - meant to do if that makes sense but that
39:38 - it just it's common practice to use put
39:41 - to create something to use delete to
39:43 - delete something and use get to return
39:45 - something there's also one called patch
39:47 - that we'll use later which allows you to
39:49 - update something so I'm going to say
39:50 - delete self and then what we're gonna do
39:53 - in here is we're gonna say video
39:54 - underscore ID
39:56 - and what we'll do is we'll make sure
39:58 - that this exists so first I'm gonna make
39:59 - another method here and say define abort
40:02 - underscore if underscore video
40:04 - underscore exists and inside of here I'm
40:08 - gonna say video underscore ID I'm gonna
40:10 - say if video ID in videos then will
40:15 - abort we're going to abort with a 409
40:17 - status code which stands for this
40:19 - already exists we're going to say
40:20 - message equals video already exists with
40:27 - that ID and we'll do dot dot dot for
40:30 - that as well oh so now what I'm gonna do
40:32 - is inside of put sorry I'm gonna put a
40:35 - bort if video exists so abort if video
40:40 - exists like that we'll pass the video ID
40:43 - this is just to make sure that we don't
40:44 - create a video that already exists right
40:47 - so we're gonna abort if it exists and
40:48 - then inside of delete I'm gonna say
40:50 - abort if video doesn't exist if I can
40:54 - find where that one was abort underscore
40:56 - if video ID doesn't exist video ID then
41:01 - if it does exist we're gonna say Dell
41:05 - videos video ID and then we can simply
41:09 - return this comma 204 204 stands for
41:13 - deleted successfully so this is just a
41:16 - blank string I don't want any message I
41:18 - just want to send a status code to of
41:20 - for this essentially says hey that
41:21 - worked you were able to delete this okay
41:24 - so now that we have that things are
41:26 - looking pretty good let's do a few tests
41:28 - here with some different requests and
41:30 - just make sure that everything seems to
41:31 - be okay so let's do one here response
41:34 - request up put let's put video with ID
41:36 - let's go three we can do that that's
41:39 - fine and let's actually just send a
41:41 - bunch of requests here that have some
41:43 - different information so I'm just gonna
41:44 - say data equals that actually data
41:47 - equals a list and then inside of this
41:50 - list I'm just gonna fill up a bunch of
41:52 - different information here and we'll
41:53 - just make a bunch of videos that we can
41:55 - do some more interesting queries okay
41:58 - oops I wanted to go enter there
42:03 - just trying to get this list to be
42:04 - somewhat organized so that we can read
42:06 - this a bit easier okay so tab there we
42:11 - go and we'll just do three videos for
42:12 - now so likes there's no 78 name let's go
42:17 - Joe
42:18 - I mean name this really should be the
42:20 - name of the video let's just go how to
42:22 - make REST API views well this is gonna
42:28 - have a lot more likes hopefully and then
42:30 - we'll go views you know 80 thousand or
42:33 - something like that and then we can
42:35 - leave this Tim one the same but let's
42:37 - just make it a different amount of views
42:38 - let's make it two thousand let's give it
42:40 - 35 likes now what I'm gonna do is just
42:43 - send a bunch requests I'm gonna say for
42:45 - I in range I guess this is gonna be the
42:50 - Len of data what we'll say is and we'll
42:55 - just use all this okay so response
42:58 - equals request up put base video slash
43:02 - plus string I cuz this is gonna be
43:05 - whatever I is that'll be the ID we pass
43:07 - and then instead of that we're gonna go
43:10 - data I awesome will print me response
43:14 - dot JSON and at the very end here will
43:17 - actually go through and will delete one
43:19 - or two of them so we'll say response
43:21 - equals request get let's go base plus
43:27 - and instead of gets this is actually
43:30 - gonna be delete will go base plus video
43:33 - slash 0 I know that one will be there
43:35 - and then let's print out the response
43:38 - JSON so let's go print response dot JSON
43:43 - alright so what I'm doing is just
43:44 - sending a bunch of requests with
43:46 - different information that is stored in
43:47 - here me and delete one of them and I'm
43:50 - gonna try to get to video two and let's
43:52 - just see how that looks
43:53 - I'll add some inputs here okay so run I
43:58 - think this is refreshed yes the server's
44:01 - going now let's run tests up high and
44:05 - see what we get okay so first we got all
44:07 - these successfully and then something
44:09 - happened expecting value one a line
44:12 - column one I can't see exactly what that
44:15 - ah it's because I'm
44:17 - to do a response JSON from something
44:20 - that doesn't have any JSON data being
44:22 - attached to it so sorry about that guys
44:24 - essentially the reason that was that I
44:26 - just got that error there was because on
44:28 - this side
44:29 - I had dot JSON after my response but
44:32 - notice though when I have a request that
44:34 - is the delete method we don't actually
44:36 - return anything that's kind of a JSON
44:39 - serializable object we just return a
44:41 - blank string so that means we're not
44:45 - gonna be valid to be able to use dot
44:46 - JSON so we just have to use response so
44:49 - now let's try this one more time let's
44:51 - first just rerun this server just clear
44:53 - the memory there so python main dot pi
44:55 - and then we'll go python test dot pi
44:57 - notice this works fine let me hit enter
45:01 - we get response 204 that works fine and
45:04 - then named Tim views 2000 likes 35 when
45:07 - we query for ID I believe was 2 or 3 or
45:10 - something like that
45:11 - anyways you get the point that works
45:13 - successfully and our API is functioning
45:15 - pretty well so the next thing I'm going
45:17 - to show you how to do now is actually
45:19 - add this to a real database so rather
45:21 - than using just memory what like we're
45:23 - using right now in videos how can we
45:25 - actually get this to store in a
45:26 - persistent database we're just gonna use
45:28 - a flask SQL alchemy with a I believe
45:31 - it's a SQLite database so I'm gonna set
45:34 - a little bit of stuff up that'll be
45:35 - right back
45:36 - ok so now we're gonna add the database
45:38 - so to do that what we need to do is
45:40 - actually first install another module
45:42 - called flask SQL alchemy this just gives
45:45 - us a really nice interface to work with
45:47 - databases it's kind of similar to what
45:49 - Django uses as well and it's just a very
45:52 - popular way for databases inside of
45:53 - flask now if you installed using the
45:56 - requirements dot txt method she did pip
45:59 - install - our requirements txt you
46:01 - already have that installed if you
46:04 - didn't then you're gonna need to go back
46:05 - to your command prompt you need to type
46:07 - pip install flask - SQL alchemy like
46:15 - that I believe that's how you spell it
46:17 - so SQL alchemy yeah it should be correct
46:20 - so pip install flask SQL alchemy make
46:23 - sure that's installed in your system
46:24 - again that might be pip3 depending on
46:26 - what system you're on and once you have
46:28 - that we should be good to go and
46:30 - actually
46:30 - initializing this database so inside of
46:33 - our code we're going to say from flask
46:35 - SQL alchemy import SQL alchemy then
46:39 - we're gonna say DB stands for database
46:42 - equals SQL alchemy app so again same
46:45 - thing that we did with API here just
46:47 - wrapping app and then what we're gonna
46:49 - do before this actually is we're gonna
46:52 - make it config so we're going to say app
46:54 - dot config so we're changing the
46:58 - configuration settings we're gonna add
47:00 - this one here which is SQL alchemy like
47:03 - a box or you can spell it like that
47:05 - although in all capitals so alchemy and
47:08 - then underscore database underscore URI
47:12 - so essentially we're gonna define what
47:14 - we want the location of our database to
47:17 - be so where we want it to be and the way
47:19 - that works is we do SQLite colon three
47:23 - slashes like that and then the name of
47:25 - the database so we're gonna say database
47:27 - dot DB so essentially we're saying the
47:30 - configuration here we're gonna do sq up
47:33 - SQL alchemy database URI is equal to and
47:36 - then whatever the name of the database
47:38 - is now say you want it to save that
47:40 - within a folder inside of the path
47:42 - you're currently on you would do
47:43 - something like TMP slash database DB and
47:47 - that would store it in a temp folder
47:49 - assuming you had created one inside of
47:52 - your current directory this is known as
47:53 - a relative path which means it creates
47:55 - it based on the current path that it's
47:57 - in so when we say database dot DB we're
48:00 - just gonna make a database DB file in
48:03 - the same directory as our current script
48:05 - alright after that what we're gonna do
48:07 - is we're in type DB to create all now
48:10 - what this is gonna do is actually create
48:12 - the database now we only do this once so
48:15 - after we run this script this first time
48:17 - and it actually creates and initializes
48:19 - the database we're not going to what do
48:23 - you call it we're not going to do this
48:25 - ever again now the reason for that is
48:26 - because once we create the database we
48:28 - don't want to reinitialize it because if
48:30 - we do that we're gonna override the
48:32 - tables or the data we already have in
48:33 - there now the only thing is we don't
48:35 - want to do this until we've actually
48:36 - defined the models that we want to have
48:39 - in our database so what I'm gonna do
48:41 - here is I'm gonna start coding out a
48:43 - mall
48:44 - to store videos so I'm gonna say class
48:48 - video model this is gonna inherit from
48:52 - model which I'm gonna import up here
48:54 - with a capital so from ask sqlalchemy
48:57 - import model like that and then what
49:00 - actually sorry what am i saying don't
49:01 - import model what I'm gonna do in here
49:03 - is say DB dot model so my bad we're not
49:07 - importing anything up here we're just
49:09 - gonna use the DB that we created right
49:10 - here stands for database DB dot model
49:13 - now what we can do here is actually
49:15 - define all of the fields that we want to
49:17 - have inside of our video model so the
49:21 - first one that I'm going to do is have
49:22 - ID so I want to store some kind of ID in
49:25 - my video model that's obviously gonna be
49:27 - the ID of the video so I'm gonna say DB
49:30 - dot column like that and then inside of
49:34 - here I'm gonna say DB integer cuz that's
49:37 - gonna be an int value and we're gonna
49:39 - say primary key like that equals trick
49:45 - now I'm not going to be going through
49:46 - too much database related stuff but
49:48 - essentially a primary key means that
49:49 - this is a unique identifier so it means
49:52 - this ID will be different for every
49:54 - single video that we store in this
49:56 - database so what's something to keep in
49:57 - mind next I'm going to do is say name
49:59 - equals a DB column a column is just one
50:03 - column of information so inside of a
50:06 - database we have multiple columns for
50:07 - each model we have tables inside of
50:09 - those tables we have columns each row is
50:12 - an entry or one kind of object of that
50:15 - table if that makes any sense or of that
50:17 - you know model whatever you want to call
50:19 - it so here we'll say DB and this is
50:21 - gonna be DB string we're gonna put how
50:24 - many characters we want to potentially
50:26 - have in this string I think the max
50:28 - amount of characters for a YouTube video
50:29 - is a hundred so let's just go with a
50:31 - hundred and then we're gonna say unique
50:34 - note that's not true we'll say nullable
50:37 - equals false now the reason we do this
50:40 - is essentially to say that this field
50:42 - has to have some information we're never
50:44 - gonna have a youtube video that doesn't
50:46 - have some kind of name so if you make
50:48 - nillable equals true that means that you
50:50 - can insert something into this model
50:52 - that doesn't have a name
50:53 - but we want to always have a name
50:54 - Serena's saying nillable equals false
50:56 - the next thing we need after name is we
50:58 - need the views so this one's gonna be
51:00 - very similar to the false first columns
51:02 - we're gonna say views equals d b dot
51:05 - column this is gonna be a d b dot
51:08 - integer this is gonna be nullable equals
51:11 - false we're gonna copy this again for
51:15 - the likes
51:16 - so we'll say likes equals DB column DB
51:19 - not integer knowable equals false and
51:22 - finally we're just gonna define a
51:24 - wrapper method just so if we print this
51:26 - out we actually get something that's
51:27 - somewhat valid so define underscore
51:30 - underscore wrapper under scrander score
51:31 - we're gonna put a self and what we're
51:33 - gonna do is we're going to return an F
51:35 - string by the way this F string only
51:37 - works in 3.6 and above so if you're not
51:40 - in 3.6 and don't do what I'm doing here
51:42 - just try to come up with your own way
51:43 - for it I'm gonna say video and inside of
51:47 - here I'm gonna say name equals name I'm
51:50 - gonna say views equals views and I'm
51:55 - gonna say likes equals likes now this
51:58 - essentially whenever you have an F
52:00 - string and you put something inside of
52:02 - curly brackets it will just actually
52:03 - print the value out for that variable or
52:06 - for the expression inside of the curly
52:08 - braces so we'll get name equals and
52:10 - whatever the name is you use equals
52:12 - whatever the views is and we can pat
52:13 - this out just so that it's a little bit
52:15 - easier to read okay so this wrapper also
52:18 - just only happens when you decide to
52:19 - print the representation of this object
52:21 - or you decide to look at it internally
52:24 - or ever you gonna decide to do that this
52:26 - will just give you a string
52:27 - representation so we can actually see
52:28 - what all these videos look like okay so
52:31 - now that we have a video model we can go
52:33 - ahead and do D be create alright after
52:36 - we make this model and that will make a
52:38 - data base for us that has this model
52:40 - inside of it so what we're gonna do is
52:42 - go and we're gonna run our script here
52:44 - so I'm going to say Python main dot PI
52:47 - and there we go
52:48 - go ahead it creates that model for us
52:51 - and we should be good to go after that
52:53 - so after we've done that we're gonna
52:55 - make sure we delete DV dot create all
52:57 - because we don't want to do that a
52:59 - second time or that's gonna override the
53:01 - data in our database and that should be
53:04 - pretty much it now we have the database
53:06 - setup and
53:07 - created and we're ready to actually
53:08 - start working with it now to actually
53:10 - make a new object in the database is
53:12 - really easy what you do is just make a
53:15 - new instance of this class that has all
53:18 - of the valid things that we need and
53:19 - then simply just commit it to the
53:23 - session I believe I'll show you how we
53:25 - do that in just one second but I'm gonna
53:27 - start by removing some of this stuff so
53:30 - first of all I'm gonna remove videos
53:31 - like that I'm gonna remove this abort
53:34 - right here and we're gonna start
53:36 - changing some of this code now to
53:37 - actually work persistently with the
53:38 - database so the first thing we want to
53:40 - do is instead of having gets like this
53:43 - what we're gonna do instead of returning
53:45 - sorry videos video ID we're gonna have
53:47 - to query the database and return
53:49 - something that fits the query that we
53:52 - have so we'll say that the result is
53:54 - equal to in this case we're gonna go
53:59 - video model query dot get and then
54:04 - inside of here we're gonna say ID equals
54:07 - video ID so essentially we're gonna look
54:10 - for some you know model some row some
54:14 - video inside of this video model that
54:16 - has the ID equal to video ID and then
54:19 - we're going to return that to the user
54:22 - now here's where it gets a little bit
54:23 - tricky right if I want to return this
54:25 - result
54:26 - well this result is actually going to be
54:29 - an instance of this class now I know I'm
54:32 - going into databases and there's
54:33 - actually a lot to explain with flask SQL
54:35 - alchemy but essentially the way this
54:37 - works is that when you query this video
54:39 - model it's gonna give you instances of
54:42 - this video model that match whatever you
54:45 - put inside of here so I put ID equals
54:47 - video ID I'm gonna get any videos that
54:50 - have this ID and since I'm just doing
54:52 - get it's gonna return to me only one but
54:55 - it's gonna be an instance so how can I
54:57 - actually serialize that instance and
55:00 - return that so that my test script here
55:03 - that's looking for a response will
55:05 - actually be able to read that
55:06 - information well and this is where we
55:08 - use something called resource fields and
55:10 - marshal with now a resource field
55:13 - essentially is a way to define how an
55:16 - object should be serialized so what I'm
55:18 - gonna do here then I say resource
55:20 - underscore fields equals and what I'm
55:23 - gonna do is define what I want on these
55:26 - fields to be so I'm gonna say I D and
55:29 - then I'm gonna go :
55:30 - fields dot string like that and now I'm
55:34 - gonna go up to flask restful I'm gonna
55:36 - import fields and I'm gonna import a
55:39 - decorator called Marshall underscore
55:41 - with I'll define what these do in just a
55:43 - second but inside of fields dot string
55:46 - what I'm gonna do is get rid of these
55:48 - brackets and just leave it like that
55:49 - what I'm pretty much doing is I'm saying
55:51 - okay I want to make this dictionary here
55:54 - it's gonna define the fields from this
55:57 - video model that I want to return if I
56:00 - return a specific object seem confusing
56:03 - I have to keep coding for it to make
56:04 - more sense but just follow with me I'm
56:06 - trying to say that this ID field here
56:08 - which is the name that I'm putting here
56:10 - is equal to field stop string right like
56:13 - that's the type of field that it is next
56:15 - what I'm gonna do is I'm gonna say the
56:18 - name field which is another one that I
56:20 - want to look at I'm gonna say name is
56:22 - equal to fields dot strength and sorry
56:26 - ID should be fields dot integer my bad
56:30 - on that name is gonna be field string
56:32 - and then views and likes are gonna be
56:34 - the same thing they're gonna be fields
56:36 - dot integer field stunt integer and then
56:41 - we're gonna go likes it is fields dot
56:46 - integer awesome so now we have all of
56:49 - the fields defined we have our ID as
56:51 - well and we should be good to actually
56:53 - start using this so what we do when we
56:56 - actually want to take some object
56:57 - because result is gonna be an object
56:59 - when we have video model query that
57:01 - gives us an object of an instance video
57:04 - model so what I'm gonna do is of this
57:07 - I'm gonna say at Marshall width and
57:09 - inside of here I'm gonna put resource
57:11 - fields now what this says essentially is
57:14 - that when we return take this return
57:17 - value and serialize it using these
57:20 - fields so it's going to assume that we
57:23 - have an ID name views and likes on the
57:26 - instance that's returned it's gonna take
57:28 - those fields and it's going to
57:31 - essentially serialize it into this JSON
57:33 - format
57:33 - that can be returned so we'll create a
57:35 - dictionary that looks something like ID
57:39 - and then whatever the ID is there right
57:41 - and the name and whatever the name is
57:43 - there and views and likes and all that
57:45 - that's what this decorator is doing and
57:47 - you can put that above any method inside
57:50 - of here inside of your class that you
57:52 - want to return and have the object
57:54 - serialized with so let's try that now
57:57 - I'm gonna get rid of put actually we
58:01 - won't get rid of put we'll just modify
58:02 - this slightly so now inside of put what
58:05 - I'm gonna do is show you how we can
58:06 - actually make a new object in the
58:08 - database so to do this I'm gonna say
58:11 - let's go I don't know video equals video
58:17 - model and then inside of here we just
58:19 - need to define all the fields so we're
58:20 - gonna say ID equals video underscore ID
58:23 - name equals we're gonna need those args
58:26 - I'm gonna say args equals believe it was
58:30 - video put args dot parse args so we're
58:36 - going to say name equals args and inside
58:39 - here we're gonna put ID or not ID name
58:43 - and then it's after that we're going to
58:45 - save use equals args views and then we
58:51 - are going to say after views I believe
58:54 - that was likes equals args likes okay so
58:59 - this is a dictionary remember args that
59:02 - stores all of the values that we passed
59:03 - in we've seen that many times so I can
59:05 - access them individually like that and
59:07 - well I can just do this and that will
59:09 - create a new video model now if I
59:12 - actually want to make sure that that
59:14 - goes into the database so I'm actually
59:16 - committing it essentially what I'm gonna
59:18 - do is I'm gonna say DB
59:21 - dot session dot add video this is going
59:27 - to add this object to the current
59:29 - database session and then what I can do
59:31 - is I can say DB dot session dot commit
59:35 - and what this will do is commit any of
59:38 - the kind of changes I've made to the
59:39 - session and make them permanent in the
59:41 - database so right now when I say add I'm
59:43 - temporarily adding this video to the
59:46 - database when I say come
59:47 - I'm permanently putting it in then what
59:50 - I can do is I can return that object
59:52 - again so let's say return the video like
59:56 - that with a 201 but I need to make sure
59:59 - I add this marshal so that that gets
60:01 - serialized so Marshall with resource
60:03 - fields again that's because this is an
60:05 - object I can't just return an object
60:07 - back I need to turn something that's
60:09 - serializable and well this Marshall with
60:11 - will serialize this response and make
60:13 - sure I can actually return it fine
60:15 - now deletes same thing here we're gonna
60:18 - have to actually do something different
60:20 - to delete I'll do that after but let's
60:22 - just see if this is working I think this
60:26 - query might be a little bit off but
60:29 - anyways yeah let's deal with that so
60:30 - let's go to test let's get rid of this
60:32 - delete and let's see if the put actually
60:35 - works at all and then we can yes try to
60:37 - get something as well okay so let's give
60:40 - this a shot now not a hundred percent
60:42 - confident but we will give it a go okay
60:45 - so let's run this here and let's go
60:47 - python test op pi and that actually
60:50 - seemed to work so we see that these
60:53 - three happened it actually returned us
60:55 - the correct information we can see that
60:57 - that serialize ER is working if I hit
60:59 - enter here then we actually get an issue
61:02 - so get got an unexpected keyword
61:04 - argument ID okay so we had a small
61:07 - problem here in this query that's
61:09 - because this actually should be filter
61:11 - by my apologies so filter by video ID
61:14 - equals video ID but it's actually gonna
61:16 - be ID equals video ID and then dot first
61:20 - so what this is saying sorry is we're
61:22 - gonna filter all of the videos that we
61:24 - have by ID we're gonna look for the one
61:27 - that has the ID video ID and then we're
61:29 - gonna return the first response in that
61:32 - filter the first entry that's filtered
61:35 - by that the reason we do this is because
61:36 - I could technically filter say by views
61:39 - right I can say I get filtered by views
61:41 - equals and I could buy anything that has
61:43 - ten views and well there might be
61:45 - multiple videos that have ten views so I
61:47 - can get just the first one or I can get
61:50 - all of them I believe by doing dot all
61:51 - so let's do dot first and let's see how
61:54 - this works now and scope Python and what
61:59 - is the error here expect
62:00 - value line one column one chart zero I
62:04 - think something happened here let me
62:08 - have a quick look okay so you can see
62:10 - what actually happened there was that
62:12 - inside of our test script here we try to
62:14 - add things with IDs zero one two three
62:17 - now since those IDs actually already
62:20 - exist in the database we're getting an
62:22 - integrity error here it says unique
62:24 - constraint failed on ID and it's
62:26 - crashing our our server here now the way
62:29 - we can avoid something like that again
62:31 - is just making sure that ID doesn't
62:32 - exist so what I can say is we can check
62:37 - by querying the database or we can do
62:40 - like a try-catch to see if this worked
62:42 - or if it failed but let's just go ahead
62:43 - and say after args we'll set result
62:47 - equals video model query dot filter by
62:49 - ID equals video ID dot first okay so I
62:53 - just did a little testing on my own here
62:54 - to make sure I wasn't steering us in the
62:55 - wrong direction what I'm gonna do inside
62:57 - of here this might not be the best way
62:59 - to do this but it will work for our
63:01 - purposes is I'm gonna do a query and
63:03 - just check if there's any videos that
63:05 - have the ID that's equal to the video ID
63:07 - that we want to add if they do what I'm
63:10 - gonna do is abort so I'm just gonna say
63:12 - if results I'm so like if result exists
63:16 - then what I'm gonna do is say abort on
63:18 - abort with a 409 status code which means
63:20 - this already exists I'm gonna say
63:22 - message equals video ID taken dot dot
63:28 - dot so this way now we won't actually
63:31 - crash the program what we'll do is we'll
63:33 - simply send this abort message that says
63:35 - hey we already have this video ID you
63:37 - can't use that right so let's give this
63:40 - a shot and let's see what we get here if
63:42 - we try that so let's go and let's try
63:47 - this again okay so let's go python test
63:50 - stop hi and notice we get message video
63:52 - ID taken video ID taken video ID taken
63:55 - we can hit enter now and then we will
63:57 - get the video that corresponds with ID -
64:00 - so that is the basics there on how we
64:02 - can handle this put and just do a query
64:05 - and check if if this video exists and if
64:08 - it does we can just abort now same thing
64:10 - up here and get though I want to make
64:12 - sure that we actually
64:14 - get a valid result before we go ahead
64:16 - and return it so we're gonna say if not
64:18 - results so essentially if we don't get
64:20 - any results for the ID then what we'll
64:23 - do is we'll just abort will abort with a
64:25 - 404 and we'll just go message equals
64:29 - could not find video with that ID
64:34 - perfect that's all we need and let's go
64:36 - ahead and run this now after I change
64:38 - the test script and try to get a video
64:40 - that has idea say six
64:42 - so let's run this I'm gonna go back to
64:46 - my command prompt and video ID taken
64:48 - video ID taken message could not find
64:50 - video with that ID so that is pretty
64:54 - much it when it comes to actually saving
64:56 - things in a database and then handling
64:58 - some of these edge cases like oh the
65:00 - video already exists oh we can't find
65:02 - that video ID and so on now the next
65:05 - thing that we could do is do an update
65:06 - now I'm just gonna kind of leave this as
65:08 - something you guys can figure out on
65:09 - your own cuz I think with this knowledge
65:11 - you should be able to but you can define
65:13 - sorry what's called a patch so a patch
65:16 - is essentially a way to update so it's
65:19 - just that HTTP method for update
65:22 - I believe update is one as well there's
65:24 - a bunch of different HTTP methods or
65:26 - kind of yeah I think the methods that
65:27 - you can use but we're just patch is kind
65:29 - of the standard when it comes to
65:31 - actually updating something and what you
65:33 - could do is the same thing right so you
65:34 - can get all the arguments that you want
65:36 - to use to update a specific video and
65:39 - you can actually change this video put
65:41 - args to be something that doesn't have
65:43 - required arguments so say on an update
65:45 - maybe they can pass you just the video
65:47 - ID so if you go video ID like that and
65:50 - then any other arguments that they want
65:52 - to update the video with so maybe they
65:54 - just want to update the views well in
65:56 - that case it would be valid for them to
65:58 - just send you the updated views rather
66:00 - than sending you all the other things
66:02 - that they want all the other stuff
66:04 - they're not even gonna update right so
66:06 - they send you just views then what you
66:08 - could do is you could query the database
66:10 - you could get this object you can modify
66:13 - this object you can add it back in and
66:15 - you can commit and now that I say that
66:17 - you know let's just go ahead and do this
66:18 - because why not I'm gonna make another
66:21 - argument parser here I'm gonna say video
66:25 - updates args you
66:28 - fools I'm gonna say a request parse dot
66:31 - request parser we're gonna say video
66:33 - update args like that oops
66:37 - video not dot video update args dot add
66:41 - argument inside of here we're gonna add
66:44 - actually all the same arguments so I can
66:45 - literally just copy these and I'll just
66:47 - change the name so video update update
66:53 - and update and then here instead of
66:57 - required I'll just make all of these
66:59 - optional so this way now the user can
67:02 - send us whatever arguments I want so any
67:05 - of these three or all of these three and
67:07 - based on what they send we will update
67:08 - the video with them so this is gonna be
67:11 - a little interesting there's probably a
67:13 - better way to do this than what I'm
67:14 - about to attempt but I haven't done this
67:16 - before so I'm just going off the top of
67:17 - my head I'm gonna say args equals video
67:19 - underscore put underscore argh stop
67:21 - parse args we're gonna make sure that
67:23 - this video exists first of all so let's
67:25 - just say results equals video video
67:29 - model that query filter by ID video ID
67:32 - will do the same thing here so if result
67:35 - and it's actually in so if result will
67:37 - say if not results then will abort with
67:40 - a 404 and we'll say message video
67:46 - doesn't exist
67:48 - cannot update perfect that's all we need
67:52 - and then after that what we'll do down
67:55 - here is if we have a result will
67:58 - actually update that result so we'll say
67:59 - for argh in args and this is gonna be
68:05 - interesting to do cuz I kind of just
68:07 - need to check them manually I'm trying
68:09 - to think of as a better way to do this
68:10 - than what I'm gonna do but we'll have to
68:13 - see here okay so if this is gonna be a
68:16 - weird way but we'll just say if name in
68:19 - args then what we'll do is we'll say
68:22 - video model dot name equals args name
68:29 - now I think you guys are getting the
68:31 - point here of what I'm gonna just
68:33 - literally be doing the whole time I'm
68:34 - gonna say if views in args then we can
68:38 - say
68:39 - video model views equals args views this
68:46 - probably there's probably a way better
68:48 - way to do this in fact I kind of think
68:49 - of one off the top of my head but it's
68:51 - fine we just have three things here and
68:53 - we'll say if likes in args then we'll
68:56 - say video model dot likes equals args
69:02 - likes so essentially making it so that
69:04 - we can update everything here now what
69:06 - we'll do since we've updated this video
69:09 - model and why am i putting video model
69:11 - I'm sorry this should be result guys my
69:12 - apologies on that or any say results and
69:15 - results the reason I'm doing result is
69:18 - because I want to change this instance I
69:20 - don't want to just change the model
69:21 - itself so result that name result of use
69:23 - results dot likes and then what we'll do
69:26 - is we'll say DB dot session dot add
69:29 - results and we'll say DB dot session dot
69:34 - commit like that and then put our
69:37 - brackets and then we will return just
69:40 - the updated object so we're gonna return
69:43 - result like that and we could return it
69:46 - with a status but I don't know what the
69:47 - status is for updated so I'm just gonna
69:49 - leave that for right now now on patch
69:51 - we're gonna have to remember to add that
69:52 - Marshall with so Marshall with those
69:54 - resource fields and this should be good
69:56 - so let me test this out and make sure
69:59 - this is gonna work and then we will be
70:02 - good to go here so instead of get let's
70:05 - now do an update so we already know we
70:07 - have these three added in so we have ID
70:09 - zero one two let's just try to do an
70:12 - update here and see if we can get this
70:13 - to work so response dot patch like that
70:17 - we're gonna say base plus video two and
70:20 - here for our data we're just gonna pass
70:23 - views equals ninety nine not cool in
70:27 - ninety nine sorry and let's see when we
70:29 - get our response back if this actually
70:31 - worked properly or not so we're gonna
70:33 - run run let's run test op PI message
70:37 - name of video is required okay
70:40 - interesting so let me run that one more
70:42 - time name a video is required I believe
70:44 - I am using the wrong argument thing here
70:47 - so set of video put args we're gonna say
70:49 - video update arcs my bad about that guys
70:52 - let's go back
70:53 - and let's run this and what is the
70:56 - problem let's just have a quick look
70:59 - okay so I am back I did a little bit of
71:01 - a test there and some things were going
71:03 - wrong so I just figured out those areas
71:05 - I want to come back and talk to guys
71:06 - about what those were so before I had DB
71:09 - dot session dot add result right first
71:13 - of all we don't need to do that anymore
71:14 - because I realized I was just looking at
71:16 - some documentation that once it's
71:17 - already in the database we don't need to
71:19 - re-add it we can just commit any changes
71:21 - we make to the object but essentially
71:23 - the main problem that I'm having here is
71:25 - that we have this result object right
71:27 - and I say if name in args if you and
71:29 - args if likes and args then go result
71:32 - that like C was args result of use
71:34 - equals arc views so on so forth and
71:36 - we're updating the object like that
71:37 - which actually works but the problem is
71:39 - that name and views and likes are
71:42 - actually always in this argument even if
71:45 - what they weren't passed through that's
71:47 - because what this request parser does
71:50 - here is it actually will automatically
71:53 - fill these in with the value none if
71:55 - they are not passed through so what we
71:58 - need to do is first of all make sure
71:59 - that if we're gonna update that those
72:01 - values aren't snot so we're just gonna
72:04 - change these if statements say if name
72:05 - in args and arg is a name not none so we
72:12 - can actually just write if
72:14 - args a name and what that will do is
72:16 - tell us if this is if this key is not a
72:20 - none value and we don't have to worry
72:21 - about this giving us a key error because
72:23 - we know that we will always have args
72:27 - name args views and args like we know
72:28 - those will always be in that dictionary
72:30 - based on the way that the request parser
72:32 - works so I'm just gonna go change this
72:34 - here to say this now and we'll notice
72:37 - that this should hopefully be working
72:38 - when we go ahead and change this or when
72:40 - we run this now so we're just making
72:42 - sure that these values are not none if
72:44 - they're not none will update the result
72:45 - we'll commit those changes and then that
72:47 - should be good so let's go here looks
72:50 - like the server's automatically updated
72:52 - and now if I run Python tests up high we
72:54 - can see ID two named Tim views 99 likes
72:57 - 35 and if I go here and now I add say
73:00 - likes you know 101 let's see if that
73:05 - updates it so let's run test up
73:06 - again and there we go so you have views
73:09 - 99 likes 101 and just to prove to you
73:11 - that this will work even if I don't add
73:13 - anything Oh at zero data in there versus
73:16 - zero data no data and run this and it
73:19 - just stays the same as what it was
73:20 - before so that is how we use a data base
73:23 - that is how we update the information
73:25 - that's how we have the correct request
73:28 - parsers and everything else that I can
73:29 - think that you would really need to do
73:31 - if you're making some kind of API
73:32 - especially in flask so I think with that
73:35 - I'm gonna end the video here so this
73:38 - video is taking me a long time to create
73:40 - quite a few errors and things had to go
73:41 - through some code ad right beforehand
73:43 - you guys appreciate these this effort
73:45 - all I ask is that you leave a like on
73:47 - the video subscribe to the channel and
73:48 - maybe even leave a comment and let me
73:50 - know it really does keep me going and
73:52 - motivate to keep making videos so that
73:54 - being said if you enjoyed like I said
73:56 - like the video subscribe and I will see
73:58 - you guys in another YouTube video