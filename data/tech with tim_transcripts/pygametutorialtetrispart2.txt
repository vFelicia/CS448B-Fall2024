00:00 - hey guys and welcome back to part 2 of
00:02 - coding Tetris in Python with PI game so
00:05 - let's get right into it in this video
00:08 - we're gonna be finishing a few other
00:09 - functions we're gonna be doing valid
00:11 - space convert shape format we're gonna
00:13 - be coding a bit in the main and we're
00:15 - also gonna be fixing a small mistake I
00:18 - made in the last video so this code
00:19 - right here in draw a grid yes this does
00:22 - draw our grid but this is not what I
00:24 - intended this function to do and I kind
00:26 - of just realize this when I was looking
00:28 - over the video and looking over the code
00:29 - so we're just gonna copy this code from
00:30 - draw grid
00:31 - okay delete it out of there and we're
00:33 - gonna paste it down here at the bottom
00:35 - of a draw window okay so now we just
00:38 - have this after we're bleeding the label
00:40 - we have whatever code we had within draw
00:43 - a grid okay because draw a grid would
00:45 - this actually was supposed to do is draw
00:47 - deed lines for the grid so I kind of got
00:50 - this mixed up while I was going through
00:52 - the tutorial so we're gonna finish draw
00:54 - a grid now and what this is gonna do
00:55 - it's gonna draw those gray lines over
00:57 - top of all of our different colors so we
00:59 - can kind of see where each block is so
01:01 - we can see the actual grid structure so
01:03 - let's get started with this say SX which
01:06 - stands for start X is equal to when you
01:09 - call it top left X okay and then s Y is
01:14 - equal to top left Y like that alright
01:17 - and this is just so I don't have to keep
01:19 - typing top left X top left Y just makes
01:21 - it a little bit shorter for us okay now
01:24 - I'm just gonna say I'm going to set it
01:25 - before Luke when I say for I in range
01:26 - and this is gonna be the length of the
01:30 - grid so how many rows we have let's say
01:33 - for J in range and this one is now going
01:37 - to be a deal n of grid I so how many
01:39 - columns in each row and then here we're
01:42 - gonna be drawing lines okay so for every
01:45 - row we're gonna draw a line so pygame
01:46 - draw dot line we need a surface give it
01:50 - a surface we need to cover this case is
01:52 - gonna be gray so gray color code
01:54 - standard is 128 128 128 and then we need
01:58 - two positions okay so the start position
02:00 - is going to be equal to s X all right
02:04 - and then s y plus what do you call it I
02:08 - I believe x blocksize
02:13 - and I think that is actually correct
02:15 - okay now for the end position well it's
02:17 - gonna be the same x-value because we're
02:19 - destroying or actually it's gonna be let
02:22 - me just check here yeah it's gonna be a
02:23 - x-value that is just equal to the width
02:26 - so SX plus whatever the play with this
02:28 - and then the y value is going to be the
02:31 - same here because if you think about it
02:32 - we're gonna be at the same y-value each
02:35 - time we're doing like we're drawing a
02:38 - horizontal line every horizontal line is
02:40 - gonna have the same two Y values and the
02:41 - x value is just gonna be changed okay
02:43 - so I'm just gonna copy this and paste it
02:46 - in here now okay
02:48 - uh-oh all right I don't know why that
02:50 - did that but we'll just go back like
02:52 - that okay so now what we're gonna do is
02:54 - we're just gonna do this case with x sx
02:56 - plus j x blocksize okay sy can't
03:01 - actually just stay like this okay and
03:04 - then for sx same thing sx plus j x
03:09 - blocksize and J's again as our current
03:11 - column and then this one s y plus play
03:15 - underscore oops
03:17 - we need a plus sign here plus play
03:19 - underscore height like that okay and
03:22 - that should be drawing us what do you
03:25 - call it 20 vertical lines and then 10
03:27 - horizontal lines down the screen giving
03:30 - us a grid and kind of the way that works
03:31 - is every time we loop through a new row
03:34 - we're simply changing the y value of
03:36 - what line we're drawing and then these X
03:39 - values are going to stay static just at
03:40 - the left side and the right side of the
03:43 - screen and then the way that we do it
03:44 - here is we have the X values that
03:47 - constantly are changing every column and
03:48 - the y values are staying static being
03:51 - the top of the screen and the bottom of
03:52 - the screen to draw the vertical lines
03:54 - and that's what I wanted to do within
03:56 - this drug grid function so now that's
03:58 - all kind of sorted out and we fixed like
04:00 - a small mistake don't get me wrong you
04:02 - can still have that other code up here
04:03 - it still works fine but just in terms of
04:05 - what I actually wanted to do with these
04:06 - functions that's the way we needed to
04:08 - fix it okay so now that we've done that
04:11 - what I want to start doing is getting
04:13 - into this convert shape format okay
04:15 - now this is probably the most
04:16 - complicated function I want to say
04:18 - within our program and what this is
04:20 - going to take as an argument or a
04:22 - parameter is just the shape now this is
04:24 - what I was talking about before so when
04:25 - we have a shape
04:27 - look something like this right so we
04:29 - have zeros that we have periods now this
04:31 - looks nice to us like we can tell what
04:33 - kind of shape this is but the computer
04:35 - has no idea so how can we get this into
04:37 - a form that the computer can read and
04:39 - ideally we want to give it we want it to
04:42 - give us positions within the grid of
04:43 - where blocks exist and then we're not
04:46 - going to give position if the block
04:48 - doesn't exist so if there's a period
04:49 - like this okay and you'll see what I
04:50 - mean as we start coding this function
04:52 - and that's what the goal of this
04:53 - function is to do to take that
04:54 - information and put it into something
04:56 - that's actually useful to us so we want
04:58 - a bunch of positions that's the goal
05:00 - because from these like lists we want to
05:04 - generate a list of positions and then
05:06 - based on those positions we can do
05:07 - things we can check them we can draw
05:09 - them and so on so I'm just gonna create
05:11 - a list called format don't worry if it's
05:13 - a keyword
05:13 - it'll just override it we're gonna say
05:15 - when we're giving a shape we're actually
05:17 - given a piece object so I don't know why
05:19 - I'm calling shape but whatever it's fine
05:20 - so shape dot shape and then we can just
05:23 - do is equal to and I'll talk about this
05:25 - in a second shape dot rotation modulus
05:28 - the length of shape dot shape okay so
05:32 - what this does is actually gives us the
05:34 - sub list that we need so this needs to
05:37 - be spelled correctly I don't know how I
05:41 - butcher that so bad okay shape touch
05:43 - shape so if we look again here whenever
05:45 - we're past a shape we're actually passed
05:47 - something like this right so we passed
05:48 - the shape object and its shape property
05:50 - so right here is look something like
05:52 - this looks like the variable T which
05:54 - would have a list full of lists so we
05:57 - want to get the actual sub list so which
05:59 - one this list right that's one we want
06:02 - so the way we do that is by getting the
06:05 - shape rotation modulus the length of the
06:08 - shape so for example if our current
06:10 - rotation is zero like we haven't rotated
06:12 - yet then what's gonna happen is we're
06:15 - gonna have zero modulus the length of
06:16 - shape in this case the length would be
06:18 - four so we get zero so we're given this
06:20 - first shape now if we have one we're
06:22 - given this if we have two or giving this
06:24 - if we have three were given this and if
06:26 - we have four then we go back and we get
06:29 - this one okay and it just keeps going
06:30 - and keeps going because modulus simply
06:33 - just gives us the remainder so that's
06:34 - how we can tell what the axe
06:36 - current shape is within that main list
06:39 - okay hope that make sense so now we've
06:42 - done that what we're going to do is we
06:44 - want to set up a loop and because we
06:45 - want to look through every row and every
06:47 - column and then based on if there's a
06:49 - zero or a period we're gonna do
06:50 - something so we're gonna say 4i comma
06:54 - and because we want the line as well in
06:56 - enumerate alright and then format okay
07:00 - because format is the list that contains
07:02 - like the actual zeros in once okay we're
07:06 - just gonna say Rho is equal to list of
07:09 - line this just gives us a nice list
07:12 - format that we can deal with making it
07:14 - easier for us I'm gonna say for J in or
07:17 - J comma column sorry in enumerate and
07:21 - now row so now every row we're getting
07:25 - the current line and then we're going to
07:26 - loop through the line and look for
07:28 - either a 0 or a period I'm going to say
07:30 - if column which is going to be for
07:32 - example if we have some like this it's
07:34 - gonna look like 0 0 ok so this is what
07:38 - our row is gonna look like so when we
07:40 - start looping J will be 0 and column
07:42 - will be a period okay just just in case
07:44 - you're kind of confused there okay so
07:46 - before if column equals equals and it's
07:49 - gonna be string 0 then we know that
07:52 - we've hit like a position like this cube
07:54 - exists here so what we want to do is we
07:55 - want to add the position to our
07:57 - positions list now it's not so simple as
07:59 - just to add the current I and J value we
08:02 - actually have to add something else I'll
08:05 - show you right now I'm just gonna type
08:06 - it out and kind of talk about okay so
08:08 - shape dot X plus J and then shape dot y
08:14 - plus I okay so this is our x value it's
08:18 - the current value of the shape because
08:20 - if the shape is already moving down the
08:22 - screen is moving left and right well we
08:23 - need to add that to whatever the J value
08:26 - is whatever column were in within this
08:29 - list okay and then same thing for with
08:32 - the Y value so whatever the current Y
08:33 - value is of our shape we're gonna add
08:35 - whatever column or whatever row sorry
08:37 - we're now in as for the Y value okay and
08:40 - that is the positions that we need in
08:43 - these positions list okay so now that
08:45 - we've done that we just have to modify
08:47 - these positions slightly we'd shut to
08:49 - give them an off-center
08:50 - and I'll talk about why this why if to
08:52 - do this so for I pause in enumerate
08:58 - positions okay then we're going to say
09:01 - positions I is equal to and then it's
09:07 - going to be the current position okay so
09:10 - we just need to put this in a tupple cuz
09:11 - that's the way we're gonna give it
09:12 - pause 0 minus 2 and pause 1 minus 4 okay
09:18 - so now let's break this down and kind of
09:19 - talk about exactly what's going on so we
09:21 - started off blank list positions we're
09:23 - just getting the actual shape within
09:25 - this list so for example we get
09:27 - something like this okay and then we're
09:29 - looping through it and where am i sorry
09:32 - and we're pretty much just checking if a
09:34 - zero exists in each position of that
09:37 - shape okay
09:39 - if that exists then we're gonna add that
09:41 - position into our list and the way we do
09:43 - that is simply by getting the X plus
09:46 - whatever the current column is that
09:47 - we're looping through and whatever the
09:49 - current row is plus y okay now that
09:52 - we've got that the issue is that if we
09:56 - look here we're gonna get something like
09:58 - for a position list here we'll get
10:00 - something like three one and then we'll
10:03 - get three two we've got three three and
10:05 - we'll get three four okay
10:07 - now the issue with that is we're adding
10:10 - the current X value plus these two
10:12 - periods and the O so we need to remove
10:15 - these kind of trailing periods right
10:18 - because that's gonna result in our
10:20 - positions being offset it to the right
10:22 - by too much same thing with these Y
10:25 - values okay because when we're counting
10:27 - this row we're saying well this is one
10:29 - lower than this row so our current Y
10:32 - value say it was zero and we're adding
10:34 - to it now instead of just adding one
10:36 - we're gonna be adding two so what's
10:37 - gonna everything's gonna be offset down
10:39 - so the way that we can kind of fix this
10:40 - is just by offsetting by constant by
10:43 - offsetting I'm just gonna take every x
10:44 - value that we've added and subtract two
10:46 - from it and every Y value that we've
10:47 - added and subtract four from it now what
10:50 - this is gonna do is simply just move
10:51 - everything to the left and up so that
10:53 - when we are displaying it it's just more
10:56 - accurate to the screen okay
10:57 - you guys can see what's gonna happen if
10:59 - you don't offset this and you'll notice
11:01 - that you kind of run into a few errors
11:02 - so
11:03 - run with me on this Aryan and just kind
11:05 - of you should see how this works later
11:07 - on okay okay so now that we've converted
11:09 - the shape format I want to go and code
11:12 - valid space now okay so valid space is
11:14 - gonna take two parameters shape and grid
11:18 - all right and we're gonna check the grid
11:21 - to see if we're moving into a valid
11:24 - space so what I'm gonna do here is I'm
11:25 - going to create two Liske I'm gonna say
11:27 - accepted how do you spell accepted
11:30 - accepted underscore pause so these are
11:34 - just gonna be the positions that are
11:35 - actually valid okay is equal to and just
11:38 - flow with me on this we'll talk about in
11:39 - a second for ji and then within this
11:43 - list for J in range 10 this is similar
11:46 - what we did in the last tutorial and
11:48 - then for I in range 20 okay this is
11:53 - really similar to the way that we
11:54 - created the grid we're just getting
11:55 - every single possible position for a 10
11:58 - by 20 grid okay and we're just adding it
12:00 - in a tupple in accepted position it's
12:01 - okay that's great but the thing is I
12:04 - want to convert this into a one
12:05 - dimensional list so this is the way we
12:07 - can do this and make all the positions
12:08 - but now how do we flatten this list so
12:10 - this is actually how you do this okay so
12:12 - accept it cause it's gonna be equal to
12:14 - and this is one way there's many J for
12:17 - sub in accepted positions and then one
12:23 - more for J in sub okay so what this is
12:28 - actually doing now is it's pretty much
12:29 - taking all the positions in our list and
12:31 - just adding it into a one dimensional
12:33 - list and we're just overriding this list
12:35 - with that so see if you guys can
12:38 - understand that if not don't worry about
12:40 - it just know that all this does is
12:41 - simply flatten this list so we go from
12:43 - looking something like this
12:44 - we wouldn't call it like 0 1 and then
12:47 - having another list embedded just trying
12:51 - to show an example here to 3 so we go
12:53 - from that to something that kind of
12:55 - looks like this and we just have two
12:57 - positions in it now so we don't have
12:59 - those sub lists and it just makes it a
13:00 - lot easier to loop through okay
13:02 - so now we just have 0 1 2 3 rather than
13:05 - having these embedded lists full of
13:06 - other tuples okay that's all we're doing
13:08 - with this line okay so after we do that
13:11 - what we want to do is we want to get all
13:13 - these positions
13:14 - and we're gonna get the shape and we're
13:16 - gonna convert it into our positions
13:17 - right because remember whenever we get a
13:19 - shape it looks something like this
13:21 - it means nothing to us we need to first
13:22 - convert it into positions before we can
13:24 - compare it against other positions in
13:25 - our grid so we're gonna use this convert
13:27 - shape format grid our convert shape
13:30 - format we're gonna pass it to the shape
13:31 - and we're just gonna store this in a
13:34 - variable and I guess we're gonna call it
13:36 - what should we call it formatted okay
13:38 - because I guess that makes sense we
13:40 - formatted our shape so now we can use
13:43 - this and kind of compare it against
13:45 - accepted positions so here we're gonna
13:47 - have a list that looks like something
13:49 - with a bunch of positions in it and then
13:51 - this one we're gonna have a list that
13:52 - has a bunch of positions in it so you
13:54 - might see where we're going here in
13:55 - terms of how to compare these things
13:56 - okay okay so now that we've done that
13:59 - we've kind of got all our data ready to
14:00 - check this is the really easy part where
14:03 - I'm just going to say for position in
14:05 - format it and all we're gonna do now is
14:07 - just check if this position exists
14:09 - within excepted positions because
14:11 - accepted position is every position that
14:13 - were allowed to have right so we're say
14:16 - if pause not in accepted position and
14:22 - this is an important part pause one is
14:26 - greater than a negative one return false
14:30 - and then otherwise so if we make it
14:31 - through that loop that means we had all
14:33 - our positions accepted we can return
14:35 - true okay so let's talk about this
14:37 - really quickly the reason I have this if
14:39 - pause once the Y value is greater than
14:41 - negative one is because when we give
14:43 - this offset of four what ends up
14:44 - happening is we get some when we spawn
14:47 - in our shapes they're gonna spawn above
14:49 - the screen and then we actually want
14:51 - this because we don't want our shape to
14:53 - show up on the screen we want to start
14:54 - falling before it's actually seen so
14:58 - typically this means a Y position is
14:59 - going to start out like negative 1 or
15:01 - negative 2 so the thing is while it's
15:04 - falling we're checking if it's in a
15:05 - valid position right but the thing is
15:07 - it's not going to be a in a valid
15:09 - position if it's negative so we just
15:11 - want to make sure that we're only asking
15:13 - if it's in a valid position if the Y
15:14 - value is greater than negative 1 so
15:16 - greater than or equal to 0 okay and this
15:19 - is a really easy way to tell us well are
15:21 - we on the grid or not so let's give an
15:23 - example say we're trying to move left
15:25 - and we're already at the edge of the
15:27 - screen so that means we're gonna have an
15:28 - x value of negative one
15:29 - well that position of negative one
15:31 - whatever Y value is not gonna be in this
15:33 - accepted position great what do you call
15:35 - it list so when we try this we're gonna
15:37 - return false and it's not gonna allow us
15:39 - to move left and that is the whole point
15:41 - of that and now okay what am I doing
15:46 - here
15:47 - okay so I also just want to modify this
15:50 - part up here so I have for J I and range
15:52 - for J and range if I in range 20 I want
15:56 - to just change something here okay so
15:58 - what I'm gonna do actually let me say if
16:00 - grid I J equals equals and then the
16:09 - color zero zero zero okay so this is an
16:10 - important part I was kind of waiting I
16:12 - was kind of thinking about this so
16:14 - pretty much we're only gonna add this
16:16 - position into our accepted position if
16:19 - it's empty which actually makes a lot of
16:21 - sense because think about if we already
16:23 - have a color in that position then
16:25 - that's not a valid position we can't
16:27 - move into where piece already exists so
16:29 - what this condition does it says okay
16:31 - well we're only adding this position now
16:33 - if this is true so if I J is true then
16:37 - we're good we can add the position if
16:39 - it's not zero zero zero that means
16:40 - something exists in there so that's why
16:42 - we're not gonna add it into our excepted
16:44 - positions okay so I know this looks kind
16:47 - of confusing cuz I'm doing like a bunch
16:48 - of embed in for loops this just saves us
16:50 - a few lines it's kind of a cool way to
16:52 - create a list in one liner it's like the
16:53 - Python anyway so I figured I'd do that
16:55 - for most of the stuff in here okay so
16:58 - now that we've done that what else can
17:01 - we code well you know what while we're
17:02 - here we can code check lost alright this
17:05 - one's a really easy function this is
17:07 - just simply in a check if any of the
17:08 - positions are what do you call it
17:12 - above the screen so if we hit y value 0
17:15 - then we know that we're above the screen
17:17 - and we've actually lost so the way to do
17:19 - this for your site for pause be in
17:22 - positions because what this is gonna do
17:25 - is we're gonna pass a list of positions
17:28 - so we're gonna get every pause now in
17:30 - the position we're going to say X Y is
17:31 - equal to pause which simply you're
17:33 - splitting up the tupple because we know
17:34 - we're gonna get something looks in the
17:36 - form of like three four okay and we're
17:39 - say if Y is less than 1 so equal to 0 or
17:43 - greater then we return true else where
17:49 - we don't even need no say return false
17:51 - down here so if every position is less
17:54 - than or greater than Y or whatever 1
17:57 - then we will return false because we
17:59 - haven't lost yet otherwise we return
18:00 - true ok so we're almost getting there
18:04 - now I want to go down to the mean and I
18:07 - want to finish coding up some stuff in
18:08 - here
18:09 - so last time we kind of just left it at
18:10 - this like moving pieces around whatever
18:12 - but we have these variables ok so change
18:15 - piece next piece o'clock fall time that
18:17 - we're not using so what I'm gonna do now
18:18 - is I'm going to show you guys how we can
18:20 - actually move our shape down our screen
18:22 - at like a regular time interval so I'm
18:26 - gonna create a variable here actually
18:27 - called fall speed and this is how long
18:30 - it's gonna take before each shape starts
18:32 - falling ok so we'll talk about how to do
18:36 - this actually we're gonna start coding
18:37 - it now so pretty much we're gonna say up
18:39 - here and I didn't do this before which
18:41 - fall along grid equals create grid based
18:44 - on locked positions the reason we're
18:46 - doing this I know we already created
18:47 - great up here is because every time that
18:51 - we move we have a chance to be adding
18:54 - something to locked positions we're
18:55 - gonna do that later
18:56 - because for example if we hit the bottom
18:58 - of the screen will now lock to position
18:59 - it's gonna be equal to something else
19:00 - because it's gonna have a new shape in
19:02 - it shouldn't we need to constantly
19:03 - update the grid so that when we're
19:05 - drawing it to the screen we get like an
19:07 - updated version so that's why I'm doing
19:08 - that up here ok I also need to actually
19:13 - I don't think I need to do that here we
19:15 - need to add to fall time ok so the way
19:17 - we're gonna add to fall time because
19:18 - this is gonna track would he call it how
19:21 - long since like the last loop ran is by
19:25 - using this clock object that I set up
19:27 - here ok so before I add to that after
19:29 - here I'm gonna do clock tick and then
19:33 - I'm going to add this and I'll talk
19:35 - about this after I do it so Clark get
19:37 - underscore raw time like that ok so the
19:42 - way that this works is this wrong time
19:45 - actually gets the amount of time since
19:47 - this last clock tick so when I first add
19:51 - it's going to be zero because we haven't
19:53 - yet take to the clock and the next
19:54 - iteration it's gonna see how long it
19:56 - took this while loop to run and then
19:58 - it's going to simply add that amount
20:00 - okay so it's actually gonna give us real
20:02 - time this means this should technically
20:04 - run at the exact same speed on
20:05 - everyone's computer and every one
20:06 - machine because I know when I use fps
20:09 - FPS is dependent on kind of the speed of
20:12 - what do you call it your actual computer
20:15 - sometimes like the way I did it in other
20:17 - games so this is a better way to do it
20:18 - so now what I'm gonna do is since I've
20:20 - now incremented the fall time and this
20:22 - is gonna be given to us in milliseconds
20:24 - so like one second would be a thousand
20:26 - that's that number and our fall speed is
20:28 - in well zero point two seven so what I
20:30 - need to do is I have to say if fall time
20:32 - divided by a thousand is greater than
20:35 - false speed then we're going to do is we
20:38 - in a reset fall time equal to zero and
20:41 - if we're going to add one to the current
20:43 - Y value which means we're scripted we're
20:45 - moving down the piece one so this is
20:47 - gonna automatically now move our piece
20:49 - down another thing is what if our piece
20:50 - will hit the bottom the screen or what
20:52 - if it's moving into position we can't
20:53 - move into so this is the same thing
20:55 - we've kind of done in here what we're
20:56 - gonna do is going to say again if not
21:00 - valid position or valid space whatever
21:02 - given the current piece and our grid I
21:08 - believe at least grid okay then and
21:11 - actually we're gonna check one other
21:12 - condition and our current piece dot Y is
21:17 - greater than zero this means that we're
21:20 - not at like the top of the screen
21:21 - because the same thing with negative
21:23 - values all right is greater than zero
21:25 - then what we're gonna do is were gonna
21:26 - subtract one from the current piece so y
21:28 - minus equal one because that means we'll
21:30 - we moved into an envelope position so
21:31 - let's move back up one and pretend like
21:33 - that never happened and we're just gonna
21:35 - say change piece is equal to true now
21:40 - the reason I'm setting change piece
21:41 - equal to true because think of it right
21:44 - if we're moving down and we move into
21:46 - position that's not valid well we know
21:47 - we didn't move left or right off the
21:49 - screen because we were moving down that
21:51 - means we must have either hit the bottom
21:53 - of the screen or hit another piece so in
21:56 - that instance we need to stop moving
21:58 - this piece and we need to change it and
21:59 - what changing piece is gonna do we're
22:01 - gonna do that later is simply gonna lock
22:02 - all the positions what they're currently
22:04 - in and then it's gonna make this
22:06 - next piece generate down the screen and
22:08 - I'll show you that in a second but this
22:09 - is kind of the way to check it and it's
22:11 - the easier way then you don't have to
22:13 - check like the y-values and and all that
22:15 - stuff okay all right so now that we've
22:17 - done that let's move down here to the
22:19 - bottom of main and let's start adding a
22:21 - few things okay so what I want to do
22:24 - down here now I want to say shape
22:26 - positions so shape underscore pause is
22:29 - equal to convert shape format current
22:33 - piece because what we're gonna do now is
22:35 - we're going to check all the positions
22:36 - of the piece moving down to see if what
22:39 - we've hit the ground or see if we need
22:40 - to lock it okay so and we're gonna add
22:43 - all that color to the grid so that when
22:45 - we're drawing it we actually see the
22:46 - piece because right now we have the
22:48 - piece but we don't add its color into
22:51 - the grid so we're not actually gonna see
22:52 - it show up so we first need to add it to
22:54 - the grid so we can draw it and we can
22:55 - see it moving so to do that we're gonna
22:56 - say for I in range the blend of shape
23:03 - positions okay we're going to here going
23:06 - to say XY equals shape positions of X
23:12 - that's the current iteration the current
23:13 - one we're looking through and say if Y
23:15 - is greater than negative one so this
23:19 - means that we're not above the screen
23:20 - then we say grid Y x equals current
23:27 - piece dot color okay because remember
23:30 - the grid stores a bunch of different
23:32 - colors so all we're doing in the
23:33 - greatest giving different colors and
23:35 - based on that position in the grid so Y
23:36 - X which is going to be this shape the
23:39 - all the shape positions we're gonna draw
23:40 - that color
23:41 - now the reason I'm gonna have this
23:42 - negative one is because imagine that
23:44 - we're at the top of the screen and we
23:45 - try to draw it or we're above the screen
23:47 - we have a position with a negative Y
23:49 - value so if we throw negative we're not
23:51 - actually gonna get an error in grid here
23:52 - but it's gonna end up looking like it's
23:54 - at the bottom of the screen and that
23:55 - moving to the top and is just gonna look
23:56 - weird if you guys want to see what it
23:58 - looks like without this just removed
23:59 - this condition you'll see that Y I
24:02 - haven't added in okay so now what we're
24:04 - gonna do is we're going to check this
24:06 - change piece variable so I put it up
24:10 - here change piece this means that we've
24:12 - hit the bottom or we've hit something
24:13 - what we're gonna do now is we're gonna
24:16 - update locked positions and this one I'm
24:18 - gonna start talking about a lot
24:19 - okay so four paws actually in shape
24:24 - positions all right we're going to say P
24:28 - is equal to zero
24:33 - pause one all right I don't know why I
24:35 - do this but I think there's a reason for
24:37 - it so let's just run with it and we're
24:39 - gonna say locked positions P is equal to
24:42 - current piece
24:44 - don't cut okay so what is this well
24:49 - locked positions is gonna be a
24:50 - dictionary I'm gonna form like this
24:52 - alright
24:53 - it's gonna have a top one here that's
24:54 - gonna have a positions like 1 2 : and
24:57 - then we're gonna have a color and the
24:58 - color is gonna be another tupple but RGB
25:00 - values okay so for example to 5500 the
25:04 - reason we have this is so that when we
25:06 - passed locked positions into our grid
25:09 - like this alright we can get each of
25:11 - those positions in the grid and then
25:13 - update the color of gray so every time
25:15 - that we have like a locked position in a
25:18 - locked position as simply means our
25:19 - piece is no longer moving it's hit the
25:21 - bottom of the screen and we're on to a
25:22 - new piece we can get the position and we
25:25 - can get the color and then we can update
25:27 - the grid based on that and we can keep
25:28 - that in there okay and that's the way
25:31 - that locked position works so it's a
25:32 - dictionary with the key of a position
25:34 - and the value of a color
25:35 - all right that's kind of like the data
25:37 - structure for that now what we're gonna
25:38 - do after this after we update our locked
25:41 - positions and we add positions to it
25:43 - whereas a current piece equals next
25:45 - piece okay so we're just gonna change
25:47 - that and now since we've said current
25:50 - pieces now we kill the next piece will
25:51 - we need to update next piece so let's
25:53 - get a new shape because we're just
25:55 - moving forward with the game and now of
25:57 - course we got to say change piece equals
25:58 - false because we're on to a new piece
26:00 - that's gonna spawn at the top of the
26:01 - screen
26:02 - okay and I think that is about it what
26:06 - we also want to do actually is we're
26:09 - gonna check if we lost the game and I
26:11 - think I do this after trial window I
26:13 - don't think it really matters but we're
26:15 - gonna say if check lost based on what do
26:18 - you call it locked positions okay so
26:20 - these are all the positions of the
26:22 - shapes then we're gonna say run is equal
26:25 - to false and that's gonna break us out
26:27 - of this wall open you know what while
26:29 - we're here let's indent out non-stop I
26:31 - game
26:32 - but what is it I think it's not
26:35 - displayed up quit or something yeah
26:37 - don't display dot quit so we're actually
26:39 - just exiting out of our game okay
26:41 - so I've done a lot here I think I'm
26:44 - gonna stop it here and in the next video
26:47 - we're gonna get into kind of doing
26:50 - clearing the rows which is also very
26:52 - complicated and I think we're gonna test
26:54 - this a few times go through probably fix
26:55 - a few bugs and yeah so that's been it
26:58 - for this video if you guys enjoy please
26:59 - make sure you leave a like and subscribe
27:01 - and I will see you again in the next one
27:02 - [Music]