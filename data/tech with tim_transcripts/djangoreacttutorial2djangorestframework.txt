00:02 - [Music]
00:08 - hello everybody and welcome to
00:10 - part two of the full stack web app in
00:13 - python using django
00:14 - and react if you have made it here give
00:16 - yourself a pat on the back
00:18 - not many people make it past the first
00:19 - video so i hope you guys are going to
00:20 - stick around for the rest of them
00:22 - but anyways let's get started in this
00:24 - video we're going to be dealing with
00:25 - django rest framework we're going to be
00:26 - building some api
00:28 - endpoints we're actually building our
00:29 - first database model
00:31 - all right so let's get started by
00:33 - creating our model and then we'll look
00:35 - at the api
00:36 - endpoint all right so i'm here in my
00:37 - models.pi file from my api folder
00:39 - let's just quickly discuss what a model
00:41 - actually is so in a standard database
00:44 - you would have a table
00:45 - you would have rows and columns in those
00:47 - tables and well that's how you would
00:49 - store
00:49 - information now that's no different in
00:51 - django but
00:53 - when we actually go ahead and create a
00:55 - table what we're going to be doing is
00:56 - creating a model instead
00:58 - so what django allows us to do is write
01:00 - python code
01:01 - and then it will interpret that python
01:03 - code and automatically perform all of
01:05 - the database operations for us
01:07 - so essentially it's just a layer of
01:08 - abstraction it makes it a lot easier for
01:10 - us as python developers to
01:12 - write database related stuff and well
01:14 - that's pretty much all there is to it
01:16 - so we're going to go inside of our
01:18 - models here and the first model and
01:19 - actually the only model we're going to
01:20 - have for right now
01:21 - is a room model now remember our app we
01:24 - want to
01:25 - group similar users together or group
01:27 - users together in a room
01:29 - that room will have control over the
01:32 - host's music
01:32 - right like that's what we're doing for
01:34 - this app we're having one person
01:36 - hosting or playing music and then other
01:37 - people join in on this room
01:39 - and while they can control that music so
01:41 - first thing we need to do is make a
01:42 - class
01:43 - i'm going to say class room and inside
01:46 - of here we're going to inherit from
01:48 - models
01:48 - dot model so this is just telling us hey
01:51 - this is going to be a model
01:52 - and notice that models is already
01:54 - imported at the top of our file
01:56 - now inside of here what we're going to
01:57 - do is define the
01:59 - fields that we want to have for our room
02:01 - so essentially the pieces of information
02:03 - we want to store for each room
02:05 - now i'm just going to tell you what
02:06 - these are but try to think to yourself
02:08 - what would we really need for a room
02:10 - what is a room like what comprises or
02:13 - makes up
02:14 - a room well the first thing we're going
02:15 - to have is a code this is going to be a
02:17 - unique code that identifies the room so
02:19 - we're going to say
02:20 - code equals models dot
02:23 - char field like that and character field
02:26 - is saying okay and sorry this is models
02:28 - not model
02:29 - this is going to hold a bunch of
02:30 - characters so our code is going to store
02:32 - a bunch of characters and well that's
02:34 - the way it works now inside of here
02:36 - we're going to say max
02:38 - underscore length this is a required
02:40 - argument to the char
02:41 - field and we're going to say what is the
02:43 - maximum length that this field can be
02:45 - i'm going to say that it can be 8 and
02:47 - then we can set a default value if we
02:48 - wanted to i'm going to set default i'll
02:50 - actually change this something else
02:52 - later but for right now we'll leave it
02:53 - at blank
02:54 - and then we can say unique equals true
02:58 - what i'm typing here is pretty much the
02:59 - constraints on this field
03:01 - so i'm saying okay what do i want this
03:03 - field to look like and what constraints
03:05 - or things do i want to make sure
03:07 - satisfied when i create a new code
03:09 - in my room well first we want it to be
03:11 - unique we want the maximum length to be
03:13 - eight
03:13 - and the default value will be well
03:15 - something we'll put that in a second now
03:17 - before we move
03:18 - on i need to take a quick pause and
03:19 - thank the sponsor of this video and this
03:21 - series which is algo expert
03:23 - algo expert is the coding interview prep
03:25 - platform that i use to prepare for both
03:26 - my microsoft and shopify interviews
03:29 - it's great because not only does it have
03:30 - a great selection of high quality
03:32 - practice
03:32 - questions but each of them come with
03:34 - full video explanations and detailed
03:36 - code walkthroughs
03:37 - start mastering coding interview
03:39 - questions by checking out algo expert
03:40 - from the link in the description
03:42 - and use the code tech with tim for a
03:43 - discount on the platform
03:46 - next each room is going to have a host
03:48 - so a host is going to be equal to
03:50 - a models dot char field
03:53 - the max length is actually going to be
03:56 - 50
03:57 - and we're going to set unique equal to
03:59 - true as well we're only going to have
04:01 - at most one host for one room so one
04:03 - host cannot have
04:05 - multiple rooms that's a rule that we're
04:06 - going to set here now what is the host
04:08 - field well the host field is going to
04:09 - store some kind of
04:11 - information essentially that relates to
04:13 - our host or that links back to the host
04:16 - i can't really discuss what that is
04:17 - right now because it's beyond the scope
04:18 - of what we're doing in this tutorial
04:20 - but we just need to keep track of who
04:21 - the host is next
04:23 - we're going to have a field that says
04:25 - guest can pause
04:27 - this essentially is the permission that
04:29 - says okay is the guest
04:30 - allowed to pause the music or play the
04:32 - music this is going to be equal to
04:34 - models.boolean field
04:35 - and we're just going to say no equals
04:38 - false which means we must
04:39 - pass a value and we'll say default
04:42 - equals false as well
04:43 - again if you want to look at any of
04:45 - these fields what you can do is just go
04:46 - look at the django documentation there's
04:48 - a bunch of different ones that you can
04:49 - use but i will show you kind of most of
04:51 - the main ones here
04:53 - next we're going to say votes underscore
04:55 - to skip
04:56 - and that's going to be equal to models
04:58 - dot integer field
04:59 - inside of the integer field i'm going to
05:01 - say no
05:03 - equals false and we can set a default
05:05 - value for this as well
05:06 - i'm just going to set it to 2 but you
05:08 - can set it to whatever you want
05:09 - actually probably one makes more sense
05:11 - as our default
05:13 - then lastly i'm going to add a field
05:14 - called created at and it's going to be
05:16 - equal to
05:17 - models dot date time field and this one
05:19 - has a really cool argument
05:21 - auto now add equals true this means we
05:24 - never have to pass the date time to our
05:26 - object whenever we create a new room it
05:28 - will automatically add the date and time
05:30 - that it was created at
05:31 - so i know i went fast through this but
05:32 - these are the five attributes or kind of
05:34 - pieces of information for each room
05:36 - and these are some of the constraints on
05:38 - those pieces of information again i
05:40 - found these fields just by going to the
05:41 - django docking
05:42 - documentation and looking them up now of
05:44 - course you could add more if you wanted
05:45 - to
05:46 - you also add methods on this model so we
05:48 - could say something like
05:50 - define like is host this right and then
05:53 - we take you know
05:54 - like some host and then we check if
05:56 - that's that we can add whatever we want
05:58 - and the basic rule in django is that we
06:00 - want to have fat models and
06:02 - thin views now it's not going to be too
06:03 - relevant for us
06:05 - but that pretty much means put most of
06:07 - your logic on your model so
06:08 - that's what django is trying to tell us
06:10 - to do now i told you we were going to do
06:12 - something for code
06:13 - so my code for the room i want to be
06:16 - random and i want it to be unique so as
06:18 - every time we create a room i want to
06:20 - come up with some random eight-digit
06:22 - code that represents that room
06:23 - and that's what we'll use to figure out
06:25 - hey you know can we join this room
06:27 - or how we identify the room right that's
06:29 - what we're gonna do
06:30 - so what i need to do is define a
06:31 - function here that can generate that
06:33 - code for me so i'm going to
06:34 - call this generate unique
06:38 - code and inside of here we will say
06:42 - length and set this equal to whatever we
06:44 - want the length of the code to be
06:45 - now we can set it to 8 characters we can
06:47 - also set it to be something like 6.
06:49 - let's just leave it at 6 and we'll leave
06:51 - the max length at 8 in case
06:52 - in the future maybe we run out of codes
06:54 - and we want to have more
06:55 - anyways we'll say length equals 6 and
06:57 - then i'm going to say while
06:58 - true and inside of here i'm going to try
07:01 - to generate
07:02 - a bunch of codes until i find one that's
07:04 - unique
07:05 - so i'll show you how this works but this
07:07 - is cool because it's an opportunity for
07:08 - me to show you how we can actually query
07:10 - and look at all of the rooms in our
07:12 - database so first
07:14 - we're just going to go up top and i'm
07:15 - going to import
07:17 - string like that and i'm also going to
07:20 - import
07:21 - random this is because we need to use
07:23 - this to actually generate the random
07:25 - code
07:26 - next i'm going to say code equals
07:30 - and then i'm going to do a blank string
07:32 - dot join and inside of here i'm going to
07:34 - say random
07:35 - dot choices plural and i'll go through
07:38 - this line after because it's a lot and
07:39 - i'm going to say string
07:40 - dot ascii underscore uppercase that's
07:43 - going to give me
07:44 - all of the ascii characters uppercase
07:46 - and
07:47 - the length what do i want that to be
07:50 - well
07:50 - i want that to be so sorry k which is
07:52 - the length is going to be equal to
07:54 - length
07:55 - now i know this is confusing but this
07:56 - will generate a random code
07:58 - that is k-length so in this case 6 and
08:01 - that only contains the uppercase
08:03 - ascii characters that's what this will
08:06 - do you don't really have to understand
08:07 - exactly why that works but we're just
08:08 - going to say code equals that
08:10 - and that will give us that code next
08:12 - we're going to make sure that this code
08:14 - actually is unique and the way we can do
08:16 - this is by looking at
08:17 - all of the rooms in our database and
08:19 - checking if they have a code like this
08:21 - so i'm going to say if
08:23 - room dot objects which technically gives
08:26 - me
08:26 - or yeah plural which technically gives
08:28 - me all of the room objects
08:30 - and then dot filter this is saying okay
08:32 - i want to filter
08:33 - all of these room objects by what well i
08:36 - want to filter it by code
08:37 - and check if the code is equal to the
08:40 - code we have right here
08:41 - now i'm going to count this because what
08:43 - this will do is return to me a list
08:46 - of all of the objects that meet this
08:48 - criteria then i'm going to say if
08:50 - count is equal to zero then we're good
08:54 - we can break and we can return our code
08:57 - so hopefully that makes sense that
08:58 - generates the random code uh and yeah i
09:00 - won't go too much more in depth in this
09:02 - function
09:03 - i think you guys get that obviously if
09:05 - this is not true then we'll just keep
09:07 - generating more codes until well one is
09:09 - unique
09:10 - all right so that's good for models now
09:13 - what we need to do
09:14 - since we modified the database and we
09:16 - added a new model is we need to make
09:17 - migrations so we're going to open up our
09:20 - terminal inside of here we're going to
09:21 - say python
09:22 - manage.pi and then make migrations
09:26 - and you can see we've made the migration
09:28 - so migrations for api and you see what
09:30 - it says we created the room model
09:32 - now that we made those migrations we
09:34 - need to apply them so we're gonna say
09:35 - python manage.pi
09:37 - migrate now boom go ahead apply all
09:40 - migrations notice api is here
09:42 - apply the migrations and we are good to
09:45 - go all right so now that we have this
09:46 - migration done we've created our model
09:49 - we want to set up an api view this is
09:51 - different from a standard
09:53 - html view i'll talk about the difference
09:55 - in a second that can return to us
09:57 - all of the rooms that are currently in
09:59 - our database
10:00 - the reason for this is we have to
10:02 - remember that right now what we're
10:03 - trying to
10:04 - do is we're trying to program a back end
10:06 - and what i mean by back end is just a
10:08 - server that essentially can handle
10:10 - information so handle requests
10:12 - and then give some type of valid
10:13 - response now if we think about it
10:16 - it would make sense that our front end
10:18 - would want to be able to access or check
10:20 - specific rooms right say a user tries to
10:22 - join a room well it needs to look in the
10:24 - back end and say okay you know does that
10:26 - room exist
10:27 - so we need to create some kind of
10:29 - endpoint that can return to us
10:30 - information about the rooms
10:32 - in a format that makes sense we're
10:34 - probably not going to return html code
10:36 - we probably want to return something say
10:38 - like
10:39 - json format where we have key value
10:41 - pairs that our front end can really
10:43 - easily handle
10:44 - look at it and and do things with now
10:46 - you'll see how that works as we go
10:48 - through but the first thing i need to do
10:49 - is create what's known as a serializer
10:51 - class
10:51 - so i'm going to go ahead and make a new
10:53 - file called serializers plural
10:56 - dot pi and what a serializer does is it
10:59 - will take
11:00 - our model in this case a room that has
11:02 - all of this python related code so it
11:04 - has actually you know code equals this
11:06 - host equal this
11:07 - whatever it's in python and it will
11:09 - translate this room
11:11 - into a json response you'll see how that
11:14 - works but essentially it will just take
11:15 - all of these keys here it will turn them
11:18 - into strings and then it will say you
11:19 - know colon and then whatever the actual
11:21 - value is that's stored here it just does
11:22 - that for us
11:24 - anyways what we need to do inside of our
11:25 - serializers.pi
11:27 - file is we're going to say from rest
11:29 - underscore
11:30 - framework import serializers
11:34 - and then we're going to make a class
11:36 - we're going to say class
11:38 - room serializer this is going to extend
11:42 - serializers dot model serializer
11:46 - and inside of here we're going to have a
11:47 - class we're going to say class
11:49 - meta and i'm not going to really
11:51 - describe how this works but we need to
11:53 - define the model that we want to
11:54 - serialize
11:56 - and that we need to import so we're
11:57 - going to say from
11:59 - dot models import room and we're going
12:02 - to say model equals
12:03 - room and then we're going to say fields
12:07 - equals and here we're going to list all
12:09 - of the fields that we want to include
12:11 - in the output or in the serialization
12:13 - now in this case i want all of them so
12:15 - i'm just going to say id
12:17 - and i'll talk about id in a sec code
12:21 - host guest underscore
12:24 - can underscore pause and finally
12:27 - votes to skip now notice that these
12:31 - strings here
12:33 - match what i have in my model so code
12:35 - matches up with let's get rid of test
12:37 - here
12:38 - with code host matches up with host
12:40 - guest can pause matches up with that
12:42 - they're named the exact same thing
12:44 - that's important now we also can return
12:46 - created at i don't want to forget that
12:48 - one
12:48 - uh so we'll return created at right
12:50 - there but you're probably wondering why
12:52 - i have this
12:53 - id well on each of our models we have
12:55 - something called a primary key
12:57 - and the primary key is some unique
12:59 - integer typically that can identify
13:02 - uh the model in relation to all the
13:04 - other models so it's always unique
13:06 - usually an integer and it will be
13:07 - automatically created when we actually
13:09 - insert a new model or insert in this
13:11 - case i guess a new room into our
13:13 - database
13:14 - so even though i didn't define id here
13:16 - there's automatically an id field on
13:18 - every single model
13:19 - so if we want to see that id field i can
13:21 - just put id here and
13:22 - it will return that information to us
13:24 - again this will all make more sense
13:26 - as we get through but let's go to our
13:28 - views.pi now
13:29 - we have our room serializer i'm going to
13:31 - get rid of this main
13:32 - function what we're going to do is write
13:34 - what's known as an api view that will
13:36 - actually let us view
13:37 - a list of all of the different rooms
13:40 - so the first thing i'm going to do is
13:41 - return this or remove this http sorry
13:44 - we're going to say from rest framework
13:48 - and we're going to import generics like
13:51 - that so with a plural
13:53 - and what this will allow us to do is
13:54 - create a class that inherits from a
13:56 - generic api view again
13:58 - all gibberish until we start getting
14:00 - into it so first i'm going to say class
14:02 - room view and then inside of here i'm
14:05 - going to inherit from
14:06 - the generics dot api or sorry dot
14:10 - create api view now what this will do is
14:13 - allow us not only to view
14:15 - all of the different rooms but actually
14:17 - create a room
14:18 - and all i have to give to this view is
14:20 - the following thing
14:22 - a query set which is going to be equal
14:24 - to room
14:26 - dot objects dot all and a serializer
14:30 - class which is going to be equal to
14:32 - you guessed it the serializer class we
14:34 - just made so in here we're going to say
14:36 - from
14:36 - dot serializers import room serializer
14:40 - and that's going to be equal to room
14:42 - serializer now i'm well
14:44 - aware and sorry we also need to import
14:46 - rooms we're gonna say
14:47 - from dot models import room
14:50 - now i'm well aware this all looks like
14:52 - gibberish but essentially what this
14:54 - is is a view that's already set up
14:57 - to return to us all of the different
14:59 - rooms so that's what this will do if we
15:01 - simply tell it the query set which
15:03 - essentially is
15:04 - what do we want to return well from here
15:06 - we want to return all of the room
15:07 - objects that's what we're giving it
15:09 - and then we give it a serializer class
15:10 - that says okay these are the rooms now
15:12 - how do i convert this into some format
15:14 - that i can actually return well we use
15:16 - the room serializer
15:17 - which again is inherits from
15:19 - serializers.model serializer
15:21 - that just knows how to handle this kind
15:23 - of stuff and now all we have to do that
15:26 - that we have this view is we have to
15:27 - link our url to it
15:29 - so it's all going to come together but
15:31 - let's go to our urls page here
15:33 - instead of importing main now let's
15:35 - import that class that we just made
15:37 - called room view we can have both
15:40 - functions and classes being our views
15:42 - here i'm going to say room view
15:44 - and now here i'm going to put room view
15:47 - but i'm going to add one thing
15:49 - dot as view so this is just saying hey
15:51 - take this class and actually give me the
15:53 - view for it
15:54 - that's what that is doing so we're going
15:56 - to put that there
15:57 - we're going to run our server and we're
15:59 - going to pray that everything works fine
16:01 - seems we get an error uh no module named
16:04 - api
16:04 - dot model ah my bad guys let's go into
16:07 - serializers here and
16:08 - rename this models that's correct uh and
16:11 - see if that fixes it
16:12 - okay so that did fix it let's go to our
16:15 - browser now
16:16 - and we can see that we get nothing
16:19 - because we haven't gone to slash api
16:21 - so let's go to slash api and again we
16:24 - still get nothing eh
16:25 - was there another path there let's have
16:27 - a look in our urls ah it's the home page
16:29 - my bad
16:30 - okay so slash api slash home
16:34 - and look what we get some fancy web page
16:36 - that tells us
16:37 - uh detail method get not allowed okay
16:40 - that's fine
16:41 - because this view is actually the wrong
16:43 - one uh my apologies we'll fix in a
16:45 - second but anyways you get the idea that
16:47 - simple little uh class we wrote so if we
16:49 - have a look at it here in view
16:51 - actually allows us to have a view that
16:54 - well looks something like this
16:55 - and notice that these fields right here
16:57 - code host guest can pause vote to skip
16:59 - are the ones that we had in our
17:01 - serializer class that were able to
17:03 - actually put information
17:04 - into so what i'll do first just so that
17:06 - it makes sense when we go to the other
17:07 - type of view
17:08 - is i'll make a room so i'm going to say
17:09 - code let's just go like you know a b c
17:12 - d e f let's say host is just tim like
17:15 - that
17:15 - guest can pause sure and votes to skip
17:17 - let's make that three
17:19 - let's post that request and oh there we
17:21 - go now have a look
17:22 - we get that information right here in
17:25 - this view so it says okay
17:26 - you just created a room it has id1 this
17:28 - is the code this is the host
17:30 - guest can pause this is the votes to
17:32 - skip and this is when it was
17:33 - created at okay so i accidentally
17:35 - refreshed the page and the thing went
17:36 - away but hopefully you get the idea
17:38 - that is how we create a room and there
17:40 - you go you were able to see it before i
17:42 - know it went away because i refreshed
17:43 - but you were able to see that indeed
17:45 - that did work
17:46 - and well there we go all right so now
17:49 - that we have that
17:50 - let me just show you how we can change
17:52 - this view so we created one room
17:54 - and we'll change this to list api view
17:56 - now and you'll notice that if i go back
17:58 - to this url and i refresh
18:00 - it doesn't give me that post form
18:01 - anymore it just gives me a list
18:03 - of all of the different rooms that are
18:06 - in my database
18:07 - so this is extremely useful we'll be
18:08 - using these kind of views for a majority
18:10 - of this tutorial
18:11 - and this is how we set up a rest api we
18:14 - have a way to actually add information
18:16 - to the database which you just saw then
18:18 - we have a way to retrieve it now
18:19 - obviously i'm doing this using the user
18:21 - interface i'm
18:22 - using the browser but when we start
18:24 - setting up react
18:25 - we'll be doing this through requests so
18:27 - we'll just be sending say like a fetch
18:29 - request
18:29 - to an endpoint on the server and then
18:31 - that will return to us some information
18:33 - not in this nice fancy format with all
18:35 - this cool you know buttons and ui
18:37 - but it will give us just this raw data
18:39 - right here which we'll be able to
18:40 - process and then display
18:42 - on the screen so hopefully that is all
18:44 - clear but that is what i wanted to show
18:45 - you in
18:46 - this tutorial how we set up a serializer
18:48 - how we set up a view
18:50 - how we get the models going all that
18:52 - kind of stuff that's what we need to do
18:53 - so now we actually have an api
18:55 - endpoint at where's my urls file here
18:58 - uh slash api slash home and what that
19:01 - does is returns
19:02 - uh the room view dot as view and
19:04 - depending on what generic we use as
19:06 - the inheritance here we will get a
19:08 - different thing showing up now quickly
19:10 - i'm just going to change this to be
19:12 - room because i think it makes more sense
19:14 - that we have this be room rather than be
19:16 - home
19:16 - but that's all i wanted to show you in
19:18 - this tutorial so if you guys enjoyed
19:19 - make sure to leave a like subscribe to
19:20 - the channel and in the next video we'll
19:22 - get into some more
19:23 - cool stuff
19:26 - [Music]