00:00 - hello everyone and welcome to another
00:01 - expert Python tutorial so in today's
00:04 - video we're gonna be talking about
00:05 - context managers now contact managers
00:07 - are definitely one of the more useful
00:09 - topics that we're gonna be talking about
00:10 - it that we have talked about so far and
00:12 - you'll find yourself using them a lot
00:14 - especially as you get into more advanced
00:15 - programming and dealing with things like
00:17 - shared memory and shared resources and
00:20 - unlocking and locking and yeah it's just
00:22 - all those kind of things contact
00:23 - managers come in very handy essentially
00:26 - now I'm actually almost certain that all
00:28 - of you have seen context managers before
00:30 - in fact I'll show you a few examples
00:32 - here of times when you've used them and
00:34 - just not knowing that you've used them
00:36 - and that's kind of a common trend here
00:37 - that I'm hoping you realize there's a
00:39 - lot of the stuff that we're using it's
00:40 - not completely new to you it's not
00:42 - something you've never used before you
00:44 - just never really understood how or why
00:46 - it worked and that's what the point of
00:47 - this series has been is to give you that
00:49 - appreciation and understanding of how
00:51 - these lower-level things work so that
00:54 - you have more control over your code and
00:55 - if you need to change them or write your
00:57 - own versions you now know how or at
00:58 - least have the intuition to do so now
01:01 - again this video is sponsored by kite a
01:02 - big thank you again to them you can see
01:04 - whenever we start typing we get these
01:06 - little kite keywords popping up it's
01:08 - just a really good autocomplete and
01:09 - again it's free if you want to download
01:10 - it it's from the link in the description
01:12 - you can find that ok so let's go ahead
01:14 - and get started with context managers
01:16 - now the first thing that I want to do is
01:17 - show you what problem context managers
01:20 - solve to us so I'm gonna start or salt
01:21 - for us so I'm gonna start by showing us
01:23 - the problem and then the solution with
01:25 - the context manager so essentially let's
01:27 - say we have some file and we want to
01:29 - want to open a file right so I want to
01:31 - open save file dot txt we'll open it in
01:33 - write mode which just means create a new
01:35 - file if it doesn't exist yet and then
01:36 - what we'll do say file dot right let's
01:40 - say hello and then we'll say file dot
01:44 - close ok pretty straightforward pretty
01:46 - basic this will work run this code
01:48 - nothing wrong with it but what actually
01:50 - is wrong with what I just wrote well
01:52 - looking at this at a surface level it
01:54 - seems like everything's totally fine
01:56 - I mean we've opened the file we've
01:57 - written one line to it in this case
01:58 - hello and then we've closed it now the
02:01 - issue occurs in this code if this line
02:04 - here so this file dot write line doesn't
02:07 - work it doesn't happen for example like
02:09 - if I just air this line by putting line
02:11 - X here
02:12 - then we run this we can see that we
02:14 - don't make it down to this file that
02:16 - close line because we have some air on
02:19 - this right line so say we open the file
02:21 - we start trying to write something
02:22 - happened something else had the file
02:24 - open we couldn't access it well now
02:26 - we've opened the file and we haven't
02:29 - closed it and that's an issue and we
02:31 - need to make sure whenever we open a
02:32 - file or have some shared resource that
02:34 - we work with that we close it afterwards
02:36 - now a better example would probably be
02:38 - if I open this in read mode as opposed
02:41 - to write mode because that would mean
02:42 - that this file already exists on a
02:44 - system but hopefully you get the point
02:46 - that the issue occurs when we open the
02:48 - file we do a bunch of stuff and we don't
02:51 - reach that file dot closed so the point
02:53 - is how can we make sure that we reach
02:55 - this file dot close no matter what
02:57 - happens in between the open and in
02:59 - between the closed well the way that we
03:01 - could do that is we could use a try and
03:03 - a finally statement right so we could
03:05 - leave what we have right here and we can
03:06 - just add a try like that and then we
03:09 - could add a finally down here if we
03:12 - indent that properly for the file dot
03:14 - close so what this means is regardless
03:16 - of if this works or not we will
03:18 - eventually or finally close this file so
03:21 - that's good and we've just kind of fixed
03:22 - our error there and that's totally fine
03:24 - but there's an easier and better way to
03:26 - do this that allows they're a little bit
03:28 - more functionality and what that is is a
03:30 - context manager now this a code right
03:32 - here is completely equivalent to what
03:35 - I'm about to write so with open file dot
03:38 - txt we'll open it in our mode again
03:40 - we'll call this as file to be consistent
03:44 - and we'll just simply say file dot
03:46 - writes and in this case hello so these
03:49 - two kind of blocks of this block up here
03:51 - and this block actually do the exact
03:53 - same thing and the way that this works
03:55 - is this open method here actually
03:58 - defines what we should do when we use it
04:01 - as a context manager when we exit and
04:04 - when we enter so when we enter what that
04:06 - means is OK when we open this file when
04:09 - we write this code what's the first
04:10 - thing that needs to happen well the
04:12 - first thing needs to happen is we need
04:13 - to open the file and we need to return
04:16 - that so we can store that as the file
04:18 - object that's the thing that's happening
04:19 - when we enter this context manager and
04:21 - we can tell we're using a context
04:23 - manager because we're using the width
04:25 - keyword and that's the most common way
04:26 - and kind of the only examples I'm going
04:28 - to show you here is using the wif
04:29 - keyword in taipa then what we do is we
04:32 - do something whatever we have inside
04:34 - here we could print something we could
04:36 - you know filed outright we can do a for
04:37 - loop doesn't matter and then when this
04:39 - is done so all of the code in here
04:41 - regardless of their if there was an
04:43 - exception or not we will call the exit
04:46 - method and what the exit method does is
04:49 - some kind of code that allows us to
04:51 - close our file properly and make sure
04:53 - that everything works so essentially the
04:55 - contacts manager is kind of like a
04:57 - hidden way to make sure that whenever we
04:59 - do one operation we do another one
05:01 - regardless of what happens in between
05:03 - and again that's really useful for
05:05 - things like opening and closing files
05:07 - and for locking and unlocking shared
05:09 - remember so now I'm going to show you
05:11 - how we can actually write our own
05:12 - context manager that does the same thing
05:14 - that we've just shown here so we have
05:16 - this open function and we say with open
05:18 - file dot txt our as file file dot write
05:22 - hello we understand that after this runs
05:24 - regardless if there's an exception or
05:26 - not we close the file but how does that
05:28 - actually work well let's try to do that
05:30 - so what I'm gonna do now is I'm just
05:32 - gonna make it class and we're gonna
05:33 - write this context manager so when I say
05:35 - class file I'm gonna say define I'm just
05:38 - writing square knit and since we just
05:39 - want to do the same thing we did before
05:40 - we're gonna take a file name and a
05:43 - method in our knits and we're gonna say
05:44 - self dot file equals open file name
05:49 - method now it's important to note then
05:52 - when we make a context manager we don't
05:53 - necessarily need to use it as a context
05:56 - manager all the time in fact I'm gonna
05:58 - start writing a context manager here and
06:00 - show you the methods we need to
06:01 - implement to do that but right now you
06:03 - know the function that we have here we
06:05 - can use this fine even though you know
06:06 - it's gonna be a context manager we can
06:08 - instantiate it and we can use it as we
06:10 - usually would we just aren't going to
06:12 - call these special methods that I'm
06:13 - about to write so we have the first
06:15 - method which is called engine
06:17 - now remember ENTER I told you is the
06:18 - first thing that happens and what this
06:20 - function needs to do is return to us
06:22 - some value that we're gonna use in the
06:25 - context manager right when we wrote for
06:27 - example with something as you know F
06:31 - then this something is gonna call this
06:34 - enter method so we're gonna store
06:35 - whatever is returned from Enter
06:37 - in F so that's what we should get there
06:39 - so here what we're gonna do on the enter
06:41 - is simply return self dot file and again
06:43 - that should be the Open File object then
06:46 - what we're gonna do is define an exit
06:48 - method so underscore R square exit
06:49 - underscore underscore and notice these
06:51 - are special dunder methods because
06:52 - they're gonna be called in a special way
06:55 - automatically from Python because we're
06:57 - going to use the context manager syntax
06:59 - so here actually takes three arguments
07:01 - and the three arguments are parameter I
07:03 - guess we have our type I believe we have
07:05 - I'm going to look to make sure I haven't
07:07 - messed this up we have value and then we
07:10 - have trace back so essentially what this
07:13 - does is regardless of whether or not we
07:16 - get an exception between when we open or
07:18 - so between when we enter and between
07:20 - when we exit if we get an exception it's
07:22 - actually going to call this exit method
07:24 - with that exception so that we can
07:26 - handle the exception and here the way
07:27 - that we would like and I'll talk about
07:29 - how that works a little bit more in a
07:30 - second but let's just do what we wanted
07:32 - to do which is self dot file dot close
07:35 - so for now we're actually going to omit
07:37 - the fact that we're gonna deal with
07:39 - these parameters although we'll talk
07:40 - about them later so in here I'm actually
07:42 - just gonna write some code some print
07:45 - statements so that we can see what
07:46 - happens when we enter and when we exit
07:48 - these methods so print enter current
07:51 - exit so now what I'm gonna do is I'm
07:54 - gonna set up the same thing I did before
07:55 - except this time instead of saying with
07:56 - open I'm gonna say with file and the
07:59 - reason I'm allowed to do this is because
08:01 - I have this enter and exit method
08:03 - defining that this is a context manager
08:04 - let me just say with file we have let's
08:07 - say file dot txt let's put that in say
08:11 - read mode actually we'll put in write
08:14 - mode and then we'll put that as F we can
08:18 - say F dot write hello
08:21 - as the classic example that we've been
08:22 - using and now let's actually run this
08:25 - code and let's look at these print
08:26 - statements and make sure this works okay
08:28 - so we get enter and exit and inside here
08:31 - I'm actually just gonna put a print
08:32 - statement that says middle just so we
08:35 - can see how this works so even though I
08:37 - haven't explicitly called this exit or
08:39 - this entry method we can see that they
08:41 - do get called so enter middle exit and
08:44 - they get called any appropriate timing
08:46 - right so this stuff happens in between
08:48 - the enter and the eggs and now
08:51 - what I'm gonna do is simply put an
08:52 - exception in here so I'll say you know
08:54 - put some letters here just to make sure
08:55 - this crashes let's run this and actually
08:58 - sorry that's it gonna be a syntax error
09:00 - see there's any way that I can get this
09:02 - just to crash oh let's just say raise
09:05 - exception like that and now let's see if
09:07 - we still get art yes we do so we can see
09:10 - we get enter middle exit and then we get
09:13 - the exception raised afterwards even
09:15 - though we raise the exception before we
09:18 - got to this exit method so what this
09:19 - essentially says is regardless of if
09:21 - there's an exception or not we're gonna
09:22 - call this exit method and the point of
09:25 - this is so that we can actually handle
09:26 - an exception inside of our exit method
09:28 - if we need to so I know this is kind of
09:30 - confusing to see in my trace down here
09:31 - because there's all this text but look
09:33 - what's happening right we can see that
09:35 - on line 17 an exception was raised but
09:38 - the thing is we still called this exit
09:40 - print and we still closed the file even
09:44 - though that exception was raised which
09:45 - again is the advantage of a context
09:47 - manager okay so what I want to do now is
09:49 - show you what this type value and trace
09:52 - back actually is so we noticed that what
09:54 - happens is essentially any exception
09:57 - that's raised inside of here actually
09:58 - gets sent to this exit function where it
10:01 - can be handled and that's why we see
10:03 - this exit popping up here because we
10:06 - enter we do this middle stop some
10:08 - exception was raised in the middle
10:09 - that's fine so we immediately go to this
10:11 - exit function where we pass that
10:13 - exception and we wait to see if it gets
10:15 - handled and that's why all of this code
10:17 - in the exit' function runs before we
10:20 - decide that we're going to crash the
10:21 - program or that something's gonna happen
10:22 - so what I'm gonna do now is show you how
10:25 - we can actually handle an exception
10:26 - inside of this exit function and again
10:28 - what type value in trace back are so now
10:31 - we'll keep printing exit' but we're also
10:34 - gonna print all of the different values
10:36 - that are here so we'll just use an app
10:37 - string and we're just gonna do a bunch
10:39 - of commas so that we can see what all
10:40 - these are so type value and in this case
10:44 - trace back so let's run this now we're
10:46 - still gonna get a crash in our code now
10:48 - we can see that we have a class
10:49 - exception none and then a trace back at
10:53 - some location so if we wanted to we can
10:56 - look at this trace back we can look at
10:57 - the type of the exception and we can
10:59 - actually handle it and in fact the way
11:01 - that we handle an exception from our
11:03 - exits
11:04 - is if we determine that this exception
11:06 - is fine that we shouldn't crash the
11:08 - program that all is good what we're
11:10 - actually allowed to do is return the key
11:13 - value true so if we return true from
11:16 - this exit method here that's gonna tell
11:19 - Python that week erase fully handed is
11:21 - handled this exception which means we
11:23 - don't need to crash the code we don't
11:24 - need to run or you know see all this
11:26 - trace back in the output here we're fine
11:28 - and we're good to go and in fact if I
11:30 - run this you can see that by simply
11:32 - adding this return true here we no
11:34 - longer get a crash in our program and
11:36 - everything is fine now be careful with
11:38 - this because you don't want to just add
11:39 - return true if there is actually
11:42 - exceptions and they need to be handled
11:43 - properly in fact a better practice would
11:45 - probably be to do something like if type
11:48 - equals equals and then whatever type of
11:50 - exception you were looking for maybe I
11:52 - raised like a file not found exception
11:54 - or something and we were looking for
11:56 - that specific one then what you could do
11:58 - is handle that exception inside of here
12:00 - and then return true in that instance
12:02 - and in fact this still works because the
12:04 - type was exception but I'm trying to see
12:06 - if I can raise like yeah so let's say
12:08 - file exists air like let's do something
12:11 - like that and run this and you can see
12:12 - now because that wasn't just a regular
12:15 - exception this crashed because we didn't
12:17 - handle that properly so that's how we
12:19 - can handle errors inside of this exit
12:22 - function you just return true if when
12:24 - you check through this air that's passed
12:26 - in here you get you know some valid
12:29 - stuff and you can handle it right and if
12:31 - you don't return true and there's no
12:33 - error like we've seen that's totally
12:35 - fine so if we don't raise some exception
12:37 - regardless of if we did return true or
12:39 - not everything works fine and we're good
12:41 - to go and that is one of the massive
12:43 - advantages of context managers okay so
12:45 - now I'm gonna show you how we can
12:47 - actually create this same context
12:49 - manager because this seems a little bit
12:50 - complicated using a generator so we've
12:53 - talked about generators and we talked
12:54 - about decorators what we can actually do
12:57 - is import something called context Lib
13:00 - so we can import context Lib like that
13:02 - and from context Lib there's actually a
13:05 - decorator in here that allows us to
13:07 - decorate a generator that becomes a
13:10 - context manager and I'm gonna show you
13:11 - how that works okay so let's do the same
13:13 - example we did before with opening a
13:15 - file but now
13:16 - using a different kind well not really
13:18 - different kind but just a different way
13:19 - of creating this context manager so what
13:22 - I'm actually gonna do is I'm gonna write
13:24 - this decorator and the decorator is
13:26 - context live dot context manager like
13:29 - that there's no brackets at the end and
13:30 - in fact what we could have done is set
13:32 - from context live like this import
13:35 - context manager and this is a built-in
13:38 - library in Python and that will just
13:39 - allow us to do this rather than having
13:42 - that dog beforehand so let's do that I'm
13:44 - gonna say define file like this and what
13:47 - I'm actually gonna do is take again the
13:49 - file name and the method and inside here
13:52 - I'm going to say okay file equals open
13:56 - and in this case we'll say file name
13:58 - method then I'm gonna yield because
14:00 - again this is a generator the file
14:02 - object and then I'm going to file dog
14:05 - flows so what this means essentially is
14:08 - that the first thing we're gonna do is
14:10 - say file we're gonna create this file
14:11 - object we're gonna yield this to
14:13 - wherever we're being called from and
14:14 - then when this function resumes again
14:16 - you can think of this as the enter right
14:18 - and this as the exit we're going to
14:21 - close the file and in fact in here again
14:23 - we can handle some exceptions we can do
14:24 - things like that and this is a quicker
14:26 - easier way to actually make a context
14:29 - manager so now I can say with file and
14:32 - in this case let's just say you know
14:34 - well what have we been doing I don't
14:36 - know let's just say tax txt let's switch
14:37 - it up here let's go W mode and will say
14:40 - as F let me get say F dog right let's
14:44 - say hello like that and if we run this
14:47 - code that's perfectly fine that works
14:48 - and now when we add our print statements
14:50 - it'll say print enter like that and
14:54 - print exit like that and then we can
14:58 - print middle and we can see how this is
15:00 - actually working
15:02 - okay so enter middle exit so this
15:04 - decorator allows us to turn this
15:06 - generator object into a context manager
15:09 - it works pretty much exactly the same as
15:11 - I talked about before there is more to
15:13 - go in and kind of dive in with this this
15:15 - syntax right here I typically recommend
15:17 - to people just to use the class syntax
15:20 - just because it allows you to do some
15:21 - more things into something more people
15:23 - are familiar with but if you want to use
15:25 - this context manager decorator and do
15:27 - some things with this generator kind of
15:29 - sin
15:29 - tax to use a context manager you're more
15:31 - than welcome to and that's why I showed
15:33 - you so I think with that I'm gonna wrap
15:35 - the video up here an interesting idea
15:37 - though if you guys want to mess around
15:39 - with context managers is to think about
15:41 - locks in threading so actually from the
15:43 - threading module in Python a camera in
15:45 - the syntax right now at the top of my
15:46 - head you can have shared memory and you
15:49 - can have locks and yeah like memory
15:51 - locks which essentially allow you to
15:54 - wait for another resource to give up
15:56 - this lock so that you can access the
15:58 - resource so the point is like say we
15:59 - have one variable X here that's gonna be
16:01 - accessed by two different threads well
16:03 - we can't access and change X at the same
16:05 - time so we create a memory lock and what
16:08 - one thread will have to do is wait for
16:09 - that lock to be available before it's
16:12 - able to access the object and you can
16:14 - actually implement this functionality
16:15 - with a context manager so that your
16:17 - threads you make sure they unlock the
16:20 - resource before they finish changing it
16:22 - so that's something that's interesting
16:23 - if you want to mess with that I don't
16:24 - really have that much time in this video
16:26 - so I'm not gonna do that but yeah so
16:28 - with that being said this has been
16:29 - context managers I hope you guys enjoyed
16:31 - if you did make sure you leave a like
16:32 - subscribe to the channel and as always
16:34 - let me know if there's any other
16:35 - expert-level features you would like to
16:37 - see