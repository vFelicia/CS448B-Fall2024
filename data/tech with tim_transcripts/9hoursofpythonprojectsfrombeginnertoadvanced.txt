00:00 - this video has over 9 hours of content
00:02 - and contains 21 unique python projects
00:06 - these projects go in ascending order of
00:08 - difficulty so the very first project in
00:10 - the video is pretty simple it's just
00:12 - teaching you python completely designed
00:14 - for beginners and as you go through the
00:15 - projects they get harder and harder and
00:17 - harder and harder until you get into
00:19 - some pretty advanced stuff we have games
00:22 - we have using apis we have scripting we
00:24 - have automation we have fun tools we
00:26 - have alarm clocks anything you can
00:28 - imagine is probably in in this video and
00:31 - there is definitely a project that you
00:32 - will enjoy and you can learn from in
00:34 - terms of navigating here all of the
00:36 - projects will be timestamped in the
00:38 - description I've made this so it's
00:40 - really easy to find the projects and all
00:42 - of the links in terms of code resources
00:44 - assets sound effects whatever you might
00:46 - need for the project will be linked
00:48 - directly below the Tim stamp so let's
00:50 - say you're at project number four well
00:52 - what you can do is go down to the
00:54 - description find Project number four
00:55 - find the timestamp for it and you'll see
00:57 - beneath there there'll be a link that
00:58 - contains all of the code code for that
01:00 - individual project now just for your
01:02 - information this is simply a combination
01:04 - of a ton of other python videos that
01:06 - I've done in the past I had so many on
01:08 - my channel many of which you guys didn't
01:10 - even know exist or new subscribers
01:12 - haven't seen so I wanted to make one
01:14 - massive resource that just had so much
01:17 - practice that you can save this video
01:18 - and come back to it for days weeks or
01:20 - even months and constantly have a new
01:23 - project to work on I hope you guys are
01:25 - going to enjoy this it's taken me a fair
01:26 - amount of time to edit it and I've
01:28 - chopped out all of the intro and the
01:30 - outros so you just get right into the
01:32 - content no fluff straight to the point
01:34 - and right into practicing your python
01:36 - skills if you guys enjoy this type of
01:38 - content and you like my teaching style I
01:40 - do have a software development course
01:42 - I'll leave a link to it in the
01:43 - description check it out and I hope you
01:45 - enjoy this video so this quiz game the
01:47 - idea behind it is we want to ask the
01:49 - users a bunch of questions and then if
01:51 - they give us the right answer to these
01:53 - questions we'll kind of add one to their
01:54 - score then at the end of the program
01:57 - we'll print out what they got out of the
01:59 - number of questions so if there was 10
02:00 - questions we would say heyy you got you
02:02 - know three out of 10 or seven out of 10
02:04 - or whatever and maybe we'll even give
02:05 - them a percentage or something like that
02:08 - so let's get started the first thing I'm
02:09 - going to do here is use the print
02:11 - command or the print function I'm going
02:13 - to assume you guys are familiar with
02:15 - this but when you want to print
02:16 - something to the screen output something
02:18 - to the console you say print you put
02:21 - some value in here the value you
02:23 - typically put is a string a string is
02:25 - anything encapsulated in double
02:27 - quotation marks or single quotation
02:29 - marks
02:30 - and then this will be what is outputed
02:32 - so the first thing I'm going to do is
02:33 - just kind of welcome my users to the
02:34 - game I'm going to say welcome to my and
02:38 - then computer quiz so the specific quiz
02:41 - I'll go with is a computer quiz please
02:42 - feel free to go with whatever type of
02:44 - quiz that you want all right now we've
02:46 - welcomed the user to our game let's just
02:48 - quickly test this out in vs code to run
02:50 - your code you press this little uh kind
02:51 - of run button right here you're going to
02:53 - see it should open up a terminal down
02:55 - here and then notice it says welcome to
02:57 - my computer quiz uh because the program
02:59 - just R awesome so now what I want to do
03:02 - is ask the user if they want to play my
03:04 - game if they say no I don't want to play
03:05 - then we'll just immediately quit the
03:07 - game so to do that I'm going to create a
03:09 - variable I'm going to say play is equal
03:12 - to and then I'm going to use this
03:14 - function called input now what input
03:16 - allows you to do is ask the user to
03:18 - start typing something in in the console
03:21 - so inside of input in here you put
03:23 - what's known as The Prompt now the
03:25 - prompt is kind of what appears before
03:27 - the user can start typing so for example
03:29 - if you're asking the user for their name
03:31 - you may have the prompt be name and then
03:33 - colon and then maybe a space and then
03:36 - right here after this space the user
03:38 - could start typing whatever their name
03:39 - was so in my case I would put Tim and
03:41 - then whatever they type after the prompt
03:43 - and then when they press enter that will
03:45 - be stored in playing so if I type Tim
03:47 - and then I press enter now playing will
03:49 - be equal to Tim because after the prompt
03:52 - that's what the user typed uh before
03:54 - they hit enter right hopefully that kind
03:55 - of makes sense and even if the user has
03:57 - a space they say like Tim and then r all
04:00 - of this Tim space r will be included in
04:02 - playing because this is all the stuff
04:04 - they typed after the prompt before they
04:06 - pressed enter so I'm going to ask them
04:09 - here do you want to play question mark
04:14 - and then I'm going to add a space here
04:15 - the reason I'm adding a space is because
04:17 - if I don't add a space then the user is
04:19 - going to start typing right on the
04:21 - question mark and that's going to be
04:22 - kind of all smooshed together and it
04:23 - doesn't look nice and so we're going to
04:25 - add a space to make sure the user starts
04:27 - typing one space after the question mark
04:30 - all right so now if I run my program so
04:32 - I press the Run button it says welcome
04:34 - to my computer quiz do you want to play
04:36 - notice the cursor is here and now I can
04:38 - start typing whatever I want when I
04:40 - press enter nothing's happening because
04:41 - we haven't done that yet we haven't
04:42 - configured that uh but that's kind of
04:44 - the basics that's how you get user input
04:47 - and just to show you here if I print out
04:49 - playing what this will do is give me
04:51 - whatever the value of this variable is
04:53 - so if I run this here it says welcome to
04:55 - my computer quiz do you want to play say
04:57 - yes and then it prints out yes right
04:59 - right so pretty straightforward okay so
05:01 - now that we know if the user wants to
05:03 - play or not right because after this
05:04 - line is done we'll have something stored
05:06 - in playing we want to check if the user
05:08 - typed yes right and specifically if they
05:11 - didn't type yes we want to end the
05:13 - program so what I'm going to do is use
05:14 - something known as an if statement now
05:16 - an if statement allows us to
05:18 - conditionally check kind of uh or
05:20 - compare values together and see if
05:22 - something is true or false and so I'm
05:24 - just going to write out the kind of
05:25 - entire if statement and then I'll uh run
05:27 - through it step by step I'm going to say
05:29 - if play
05:30 - does not equal to so an exclamation
05:32 - point and then the equal sign and then
05:34 - I'm going to say yes then what I want to
05:37 - do is I want to quit the program and
05:39 - there's this function in Python that you
05:40 - can use called quit this will just
05:42 - immediately terminate the program so
05:44 - what I'm doing is using if I'm writing
05:46 - what's known as my condition this is the
05:48 - thing that I want to check so I want to
05:50 - check if the variable play which is what
05:52 - the user typed in is not equal to yes
05:55 - the reason I'm checking if it's not
05:57 - equal to yes is because if they typed
05:59 - anything other than the word yes I want
06:02 - to quit the program whereas if they
06:04 - typed yes I don't want to quit and so
06:06 - what happens here is we're going to
06:07 - compare whatever the user typed in with
06:10 - yes and since we're using not equal to
06:12 - if what the user typed in is not equal
06:15 - to yes this condition evaluates to a
06:18 - Boolean which is known as true and then
06:21 - if this is true right so if whatever the
06:23 - condition is is true then whatever is
06:25 - indented after this here is going
06:27 - to be run so hopefully that makes sense
06:29 - I won't go too much more into the syntax
06:31 - I assume you guys can probably figure it
06:32 - out yourself but the idea is you put a
06:34 - coal in and then all the stuff you want
06:36 - to happen when this condition is true
06:38 - you indent here and an indent is kind of
06:40 - four spaces I would recommend you use
06:42 - tabs rather than kind of going one two 3
06:45 - four you'll get some issues uh with your
06:47 - indentation if you try to do spaces and
06:49 - tabs together so anyways let's just see
06:51 - this now uh let's run this program okay
06:54 - I'm going to say welcome to my computer
06:56 - quiz do you want to play I'm going to
06:57 - type yes and well the program is going
06:59 - to end regardless cuz we're not doing
07:01 - anything after this if statement but if
07:03 - I go here and I print okay uh
07:06 - exclamation point and then let's play
07:10 - smiley face um oops okay I need to fix
07:14 - my quotations here yeah okay that's all
07:16 - good let's run this now it says welcome
07:18 - to my computer quiz do you want to play
07:21 - I'll type yes and it says okay let's
07:23 - play right and then it gives a really
07:24 - bad smiley face that I need to fix and
07:27 - if we run this one more time and then
07:28 - this time we type no notice that it
07:31 - doesn't say okay let's play because this
07:33 - condition was true and so the program
07:35 - quit all right so that's about if
07:37 - statements hopefully that all makes
07:38 - sense we're going to be using a lot of
07:39 - if statements in this video so now that
07:41 - we say okay let's play what we want to
07:43 - do is ask the user their first question
07:45 - and so what we're going to do is the
07:46 - exact same thing we did when we were
07:48 - asking the user if we want to play we're
07:49 - going to say some variable I'm just
07:51 - going to call it answer because that
07:52 - seems to make sense is equal to and then
07:56 - input and then I'm going to put whatever
07:58 - the question is I'm going to say you
08:00 - know ask something about a computer I'll
08:01 - say what does
08:04 - CPU stand for question mark and then
08:07 - what I'm expecting is that the user is
08:09 - going to type in the answer right and so
08:11 - what I'm going to do is just add a space
08:13 - here to make sure that again the user is
08:14 - not typing right beside the question
08:17 - mark they have a little bit of space and
08:19 - now what I want to do is check if the
08:21 - user's answer is equal to the correct
08:23 - answer so I'm going to say if answer is
08:26 - equal to and then I need to type out
08:28 - what the actual answer is now in this
08:30 - case this is
08:31 - central processing unit and I think I
08:34 - spelled processing correct obviously
08:36 - you're going to want to make sure your
08:37 - answers are actually spelled correctly
08:38 - because even if the user types in
08:40 - central processing unit but they like
08:42 - forgot the G or they spell something
08:44 - wrong or they have like a capital p uh
08:46 - they're going to have the question
08:47 - marked as incorrect because the answer
08:49 - has to match exactly with what the user
08:52 - typed in okay so now we have a colon and
08:55 - now we're saying okay well if the answer
08:56 - was equal to Central Processing Unit
08:58 - what do we want to do I'm going to print
09:00 - that they got it correct so I'll say
09:03 - correct like that and notice I'm using
09:05 - single quotes and double quotes kind of
09:08 - interchangeably uh doesn't matter which
09:10 - one you use so long as you're consistent
09:11 - with the starting and uh and ending
09:13 - quote awesome so let's just run this now
09:15 - and see if this works so I'm going to
09:17 - press run it says welcome to my computer
09:19 - game do you want to play yes okay let's
09:21 - play what does CPU stand for
09:24 - central processing unit and then it
09:27 - gives me the uh the output saying
09:28 - correct
09:29 - now if I run this again do you want to
09:31 - play yes okay let's play what does CPU
09:33 - stand for I type in just CPU it doesn't
09:36 - give me anything because well this was
09:38 - not true sweet okay so now the thing is
09:42 - though if the user gets this wrong I
09:44 - want to tell them that they got it
09:45 - incorrect right we need some output
09:47 - saying them saying hey no that was not
09:48 - correct and so what we're going to use
09:50 - now is what's known as the else
09:51 - statement so whenever you have an if
09:53 - statement like this and you are checking
09:55 - if something is equal to something else
09:58 - and that's what the two equal sign is
09:59 - doing or you have some condition here if
10:02 - this condition here does not evaluate to
10:05 - true you can put this lse statement here
10:07 - which means if this is not true whatever
10:09 - is in the else statement will run so if
10:11 - I go here and I say
10:13 - print incorrect exclamation point now if
10:17 - this is false so if the answer does not
10:19 - equal Central Processing Unit then we
10:22 - will print out incorrect if we type
10:24 - anything doesn't matter just so long as
10:26 - this right here that we typed out is
10:27 - equal to false whatever is in the LC
10:29 - here will end up run so let me just show
10:30 - you what I mean and then we can talk
10:32 - about this a bit more so let's run do
10:34 - you want to play yes okay let's play
10:35 - what is CPU stand for central processing
10:39 - unit and then it says correct and oops I
10:42 - I should have typed in the incorrect one
10:43 - but that's fine let's just type in no
10:46 - and then notice it gives me Incorrect
10:48 - and if I ran this one more time type yes
10:50 - and I type some other random thing it
10:52 - still gives me incorrect so if I type
10:54 - anything other than Central Processing
10:56 - Unit the else statement runs and again
10:58 - the syntax for the else statement is you
10:59 - write else you do a colon and then any
11:01 - stuff you want to run you do indented
11:03 - after the else and you can do multiple
11:04 - things as well I could do another print
11:06 - statement and then both of these print
11:08 - statements would run uh if we got this
11:10 - question incorrect sweet okay so now we
11:12 - have our first question and now what we
11:14 - can do is kind of just copy this to do
11:17 - the rest of our questions right so I'll
11:18 - copy this uh one more time I'll do four
11:20 - questions for my quiz please feel free
11:22 - to do more and it's totally fine if we
11:24 - want to leave this answer variable the
11:26 - same I don't need to change this to be
11:28 - something else
11:29 - uh we could if we want to but since we
11:31 - are done using the answer for this
11:34 - question after this if statement it's
11:37 - fine if we use the same variable to
11:38 - store the answer for our next question
11:40 - so now what we're going to do is we're
11:42 - going to kind of remove all of our
11:43 - answers and questions and we're going to
11:46 - type in well new answers and new
11:48 - questions and I'll show you some more
11:49 - things that we can do here and kind of
11:50 - some fixes and all that as we go through
11:52 - but let's just get our questions done
11:53 - first all right so now my next question
11:56 - I'll say what does GPU stand for
12:01 - question mark and then this will be and
12:03 - I'll copy this Graphics Processing Unit
12:06 - okay so let's go Graphics Processing
12:09 - Unit like that I hope that's correct and
12:12 - then the next question we can ask
12:15 - um I'll just do a bunch of acronyms what
12:18 - does RAM stand for question mark this
12:22 - will be
12:24 - random access memory like that okay and
12:29 - then lastly we can say what does
12:33 - PSU stand for question mark and we'll
12:36 - just say power supply like that sweet so
12:40 - now we've got all of our different
12:42 - questions here and we're kind of
12:43 - printing out whether we got them correct
12:44 - or incorrect so let's just quickly test
12:46 - this out let's make sure this is all
12:48 - working so uh do you want to play yes
12:51 - what does CPU stand for
12:53 - central processing unit what does GPU
12:56 - stand for notice I didn't add the space
12:58 - here and since I didn't add the space
12:59 - you're going to see when I start typing
13:01 - here that it's kind of smooshed with the
13:03 - question mark so I'll say Graphics
13:05 - Processing Unit what does RAM stand for
13:08 - Random Access Memory okay what does PSU
13:12 - stand for let's just type PSU and then
13:14 - notice it tells me incorrect so I'm
13:16 - going to start by fixing these spaces
13:17 - here you guys saw what happened when I
13:19 - didn't add the space for the input so
13:20 - now it should be all spaced out properly
13:22 - sweet so now we've got this all working
13:25 - hopefully you guys are all familiar with
13:26 - this if and kind of else syntax now uh
13:28 - it just needs to be in this structure
13:30 - whenever you have a colon typically in
13:32 - Python the next line after that does
13:33 - need to be indented if I did this and
13:36 - like I didn't indent this line here you
13:37 - can see we're getting this red highlight
13:39 - and it's reason we're getting that is
13:41 - because uh the indentation is all messed
13:42 - up this is supposed to be indented after
13:44 - we have the else statement in a small
13:46 - note you can only have the else
13:47 - statement after an if statement right so
13:49 - I can't just randomly come down here and
13:51 - put an else statement it needs to come
13:53 - after an if statement appears right so
13:57 - hopefully that's clear okay so now the
13:59 - one thing that I want to show you though
14:00 - is that we might be getting some kind of
14:03 - weird results from our program that we
14:05 - don't expect so I'm going to run my
14:06 - program and I'm going say do you want to
14:08 - play and I'm just going to type yes with
14:09 - a capital Y and notice when I do that it
14:13 - doesn't actually start my program right
14:14 - it immediately quits and the reason for
14:17 - that is whenever you have a capital that
14:19 - is different than lowercase right so if
14:21 - you have yes that is not equal to yes
14:25 - these are different strings and so if we
14:27 - want to check the person's answer
14:30 - regardless of the case right if they
14:31 - have a capital y or a capital e or a
14:33 - capital s or something or you know
14:35 - multiple capitals if we want y cap or
14:38 - capital y capital e lowercase s um to be
14:42 - valid and to allow the user to play we
14:44 - need to do something now there is this
14:46 - method in Python called Lower and what
14:49 - lower does is it takes whatever text we
14:52 - type in and it just makes it completely
14:54 - lowercase so if I go here and I print
14:58 - you know
14:59 - Tim is great like that and then I say do
15:04 - lower and actually let me do this in
15:06 - another way that's not as confusing let
15:08 - me say text is equal to this and then I
15:11 - say text. lower what this will do and
15:14 - make sure you have the parenthesis by
15:16 - the way is it will convert all of this
15:17 - text to lowercase so if I just run my
15:19 - program here and we have a look at our
15:21 - terminal notice that uh wait I have to
15:24 - type something let's just type that it
15:26 - says Tim is great all in lower cases and
15:28 - so we can use this here to convert all
15:31 - of the answers that our user types in to
15:33 - lower cases so I can say playing. lower
15:36 - and then if the user typed in something
15:37 - with capitals it will just all be
15:39 - lowercase and that way if they type yes
15:41 - with any different casing it will still
15:44 - evaluate to True uh because we're
15:46 - converting it to lower now in the same
15:48 - fashion there is something called upper
15:50 - if you say. uper it will convert
15:51 - everything into upper cases and so then
15:53 - what you would do if you're using upper
15:55 - is you would make your answer in
15:56 - complete upper cases because you know
15:58 - you're always going to be converting
16:00 - anything lowercase to uppercase so
16:02 - hopefully that's clear but we're going
16:03 - to just throw do lower on here to all of
16:06 - our answers I'm going to say do lower
16:09 - I'm going to say do lower I'm going to
16:11 - say do lower going to say do lower and
16:13 - alternatively if you didn't want to do
16:15 - it this way you could actually just do
16:16 - it at the end of this input here you
16:18 - could say input. lower and then you
16:20 - could just remove this because now your
16:22 - answer is already converted to do lower
16:24 - so you don't need to convert it kind of
16:26 - in this condition right here okay
16:28 - hopefully that's all clear but yeah
16:30 - that's just taking your answer
16:31 - converting into lowercase and then
16:32 - you're checking if the lowercase answer
16:33 - is equal to well the lower case answer
16:35 - you actually have all right so let's
16:37 - rerun this I'm going to open up my
16:38 - terminal I'm going to run do you want to
16:40 - play I'm going to type yes with a
16:42 - capital Y notice this works now and now
16:44 - I'm going to do some capitals so central
16:47 - processing unit that works right
16:51 - GPU
16:53 - Graphics processing unit and then you
16:55 - get the idea I won't do the rest of them
16:57 - okay so the last thing I want to do here
16:59 - is Implement some notion of score right
17:01 - we want to be able to tell how many
17:02 - questions our users got correct so what
17:05 - I'm going to do is make a variable here
17:06 - at the top of my program I'm going to
17:08 - say score is equal to zero this is going
17:10 - to allow us to keep track of how many
17:12 - correct answers they have now all we
17:14 - have to do here since we Define score
17:16 - equal to zero is every time the user
17:18 - gets a question correct we just need to
17:20 - increment score so add one to score so
17:23 - inside of this if statement here because
17:25 - this is if the user got it correct right
17:27 - I'm going to say score plus equals 1
17:31 - what that says is okay take the value of
17:33 - score and add one to it that's
17:35 - equivalent to saying score is equal to
17:38 - score + 1 so hopefully that's clear but
17:41 - that's a way that you can just add one
17:43 - to the variable and so if we add one to
17:45 - score every time we get something
17:46 - correct that means that at the end of
17:48 - our program we'll have some number right
17:50 - we'll have two three zero whatever
17:52 - however many questions we got right we
17:54 - can then use that to display how well
17:56 - the user did so I'm going to say score
17:58 - plus equals 1 I'm going to do this
18:00 - inside of all of these if statements
18:02 - here okay and now we've added one to
18:05 - score so now what I can do at the very
18:06 - end of my program once we're done all
18:08 - our questions is I can say you got and
18:12 - then I need to use a plus sign this is a
18:15 - concatenation operator I'll discuss this
18:17 - in a second score plus and then
18:21 - questions correct exclamation point but
18:24 - I need to convert this to a string so
18:26 - let me go through what I just did here
18:27 - okay so I said you got I did a space
18:29 - notice I manually added the space here I
18:32 - then had a plus sign and then I said
18:33 - string score and then plus questions
18:37 - correct so the reason I'm doing this
18:39 - string here is because score is a number
18:42 - right score is an integer it's not a
18:44 - string and so if I tried to do something
18:46 - like you know Tim plus one well this
18:50 - doesn't really make much sense right
18:51 - because I'm trying to add a number to a
18:53 - string and like how do you add one to
18:55 - text that's just an undefined operation
18:57 - that doesn't exist so what I need to do
18:59 - instead is convert this one to a string
19:01 - because now that I have two strings when
19:03 - I add them together what I get in Python
19:06 - is Tim one right they kind of get
19:07 - combined and so that's what I can do I'm
19:10 - going to convert this score here into a
19:13 - string so then when I add it to the
19:15 - other strings that I have here it's
19:17 - valid this operation works and I'm not
19:19 - getting uh some issue popping up okay
19:21 - and then I'm adding the questions
19:23 - correct so I'm kind of putting this
19:24 - string score in the middle of the string
19:26 - right you got whatever the number is
19:28 - questions correct okay so let's run this
19:31 - and you want to play yes I'm going to
19:33 - say let's CPU stand for
19:36 - central processing unit okay
19:41 - Graphics Processing Unit okay
19:45 - PSU RAM and it says incorrect you got
19:48 - two questions correct right now it's
19:50 - giving me how many questions I got
19:51 - correct and so the very last thing we
19:53 - can do here is we can copy this line and
19:55 - we can give them kind of a percentage
19:57 - right like you got 50% or you got
19:59 - whatever percent and the way we do that
20:01 - is now we're just going to take our
20:02 - score we're going to divide it by the
20:04 - number of questions that we have is four
20:06 - and then we're going to multiply all of
20:08 - this by 100 right and if we want to be
20:10 - extra clear here what we can do is put
20:11 - parentheses around this score over four
20:13 - to make sure this operation happens
20:15 - first before we multiply by 100 but
20:18 - you'll see if we did it the other way
20:19 - around we didn't add the parenthesis it
20:20 - would still work fine because we would
20:21 - do the division before we did the
20:23 - multiplication but anyways we're going
20:25 - to say now instead of you got questions
20:27 - correct we're going to say you got and
20:30 - then we're just going to add a percent
20:31 - on here now notice I'm not doing a space
20:34 - and since I'm not doing a space it's
20:35 - going to be whatever this number is and
20:37 - then plus and then the percent sign so
20:39 - it will come right after and then we can
20:41 - do a period so now we've calculated the
20:44 - uh the percent again just taking the
20:45 - score dividing it by our number of
20:47 - questions which is four and then
20:48 - multiplying it by 100 now note here if
20:50 - you change the number of questions you
20:51 - got to change this number right so let's
20:53 - go here and let's run
20:55 - this and let's go to our terminal yes
20:58 - we'll play I'll just type something
21:00 - random okay
21:02 - Random Access Memory correct and then
21:07 - power supply and then it says you got
21:10 - 50% you got two questions correct and
21:13 - with that that is going to wrap up our
21:16 - first python mini project so I know I
21:18 - went really slowly through this and
21:19 - really explained everything in depth
21:20 - that's cuz this is the very first
21:21 - project I'm trying to make sure this
21:23 - video works for everyone regardless of
21:25 - your skill level and now I will go a
21:27 - little bit faster I won't re explain a
21:29 - lot of the syntax that I've already
21:30 - explained now as we move into the new
21:32 - projects just anything new that I kind
21:34 - of come across that we use uh I will
21:36 - explain but this is our first project
21:38 - this is the quiz game there will be some
21:40 - code that has or there will be a link
21:41 - sorry that has this code in the
21:43 - description if you want to download this
21:45 - yourself but I would highly recommend
21:46 - you modify this you know change around
21:49 - maybe add like more than one point for
21:51 - questions that are worth you know more
21:52 - than one point that are more difficult
21:54 - or something like that right and you
21:55 - guys can do this as you please
21:57 - regardless that is the quiz game now
21:59 - we're going to move on to do a number
22:01 - guesser I think this is the one I was
22:03 - saying I was going to do second so this
22:05 - one is pretty straightforward but what
22:06 - we're going to do is generate a random
22:08 - number and we're going to track how many
22:10 - times it takes the user to guess this
22:12 - number and so what I'm going to do is
22:13 - zoom in a bit here so that we can uh see
22:15 - our code the first thing I'm going to do
22:17 - is import this module in Python called
22:19 - red all right so first thing to mention
22:21 - here is that this right here is what's
22:22 - known as a module so when you import
22:25 - random you're importing the random
22:27 - module now this just lets you use all of
22:29 - the functionality that's kind of in here
22:31 - this is default this is installed by
22:32 - with python by default you don't need to
22:34 - install it or anything like that in
22:36 - quick note there is modules that are
22:37 - built by you know people like me or
22:38 - other developers out there and you can
22:40 - import them uh but you have to install
22:42 - them first this one is just built into
22:44 - python by default and so no installation
22:46 - is required anyways let me show you how
22:48 - to make a random number so there's a few
22:50 - different ways to do this but the two
22:51 - simplest ways are to do random Dot and
22:54 - then Rand range then you're going to do
22:57 - an open and closing parentheses and let
22:58 - me get rid of the print statement so we
23:00 - can see this better for right now and
23:02 - here you're going to put the start and
23:04 - then the stop of the range for your
23:07 - random number so you would do something
23:09 - like negative 1 if you wanted to start
23:11 - the range at negative 1 and stop at 10
23:14 - excuse me and then what this would do is
23:16 - generate a random number that goes from
23:18 - netive - 1 to 10 but does not include 10
23:22 - so that's very important the number you
23:24 - put here is the absolute upper bound you
23:27 - cannot have have the number 10 be
23:29 - generated if 10 is here if you wanted
23:31 - the range to generate a number between 1
23:32 - and 10 you would have to put 11 again I
23:35 - don't know why they do that there's just
23:37 - some things in Python that aren't
23:38 - necessarily intuitive for beginners but
23:41 - with this is 11 it's not going to
23:42 - generate 11 it will generate up to 10 so
23:45 - make sure that's clear now there's
23:46 - another thing you can do here if you
23:48 - want the range to just start at zero you
23:50 - can say random. Rand range and just put
23:52 - the stop if you just put one thing here
23:54 - what this will do is generate a random
23:56 - number between zero and this number
23:58 - minus one so up to 10 and yeah there you
24:01 - go that's how that works uh okay so
24:03 - let's do something from -5 to 11 and
24:07 - let's say R is equal to random. Rand
24:10 - range and let's just print R okay so let
24:14 - me run this and we'll look at our thing
24:16 - here okay run and notice we get a five
24:19 - now if I run this again we're getting A3
24:22 - I run a bunch of times we get a bunch of
24:23 - random numbers you see this is random
24:26 - and there you go that's working we got a
24:27 - enough
24:28 - we can just run a bunch of times we got
24:29 - a 10 notice we won't get 11 if we do
24:32 - this sweet so we're getting a random
24:34 - number so that's one way another way to
24:36 - do this is with a function called Rand
24:37 - int now Rand int works the exact same
24:40 - way as Rand range except now it will
24:43 - include 11 so the upper bound range now
24:45 - includes the number that you typed
24:47 - doesn't go up to but not include it so
24:49 - now if I do 5 to 11 11 will possibly be
24:52 - generated so if I run this now uh we get
24:54 - six right and we if we keep running it
24:56 - we might see that we get 11
24:58 - um okay I'm not this could take a while
25:01 - yeah there you go so we do get 11 so
25:02 - that works okay sweet uh and same thing
25:05 - here if you decide to not include the
25:07 - start it will just generate up to and
25:09 - including this end number that you put
25:11 - right here so that's how you make a
25:12 - random number so what we want to do is
25:15 - generate a random number so actually
25:16 - let's let's leave this here let's say
25:19 - random uncore number and then we want to
25:22 - ask the user to guess this number and
25:24 - every single time they guess it we're
25:26 - going to tell them if they were above or
25:28 - below the number so that they can do it
25:30 - in like a reasonable number of guesses
25:31 - especially if we make this number like
25:33 - really large right so the first thing
25:34 - I'm going to actually ask the user is
25:36 - how large of a number they want to
25:37 - generate so we'll assume it starts at
25:39 - zero and then we'll ask them to type in
25:40 - a number and uh we'll generate up to
25:43 - that number so I'm going to
25:45 - say um let's say top of range is equal
25:51 - to and then input and we'll say type a
25:56 - number won't even tell them what it's
25:58 - for we'll just say type a number okay so
26:00 - now they're going to type a number so
26:02 - what we actually need to do here is we
26:04 - need to make sure that this uh thing
26:07 - they typed in here is a number because
26:09 - if the user types in like hello or Tim
26:11 - or some random string something that's
26:12 - not a number then we can't use that
26:15 - right and we also need to make sure the
26:16 - number they type in is greater than zero
26:18 - so I'll show you how we do that I'm
26:20 - going to say if the top of range do is
26:23 - digit okay and then I'm going to do an
26:26 - if statement inside this if statement
26:28 - I'm going to say if the int and actually
26:32 - we're going to do this we're going to
26:33 - say top of range is equal to int top of
26:35 - range and let me pause here and explain
26:37 - what I'm doing so first of all uh you
26:40 - can make a variable using underscores
26:41 - when you want to have multiple words it
26:43 - makes a lot of sense to make the name
26:44 - with underscores so like top underscore
26:46 - of underscore range you can't have a
26:48 - variable that's like top range that
26:50 - won't work you need to have it connected
26:52 - uh you can't have like two separate
26:53 - words like that anyways this is equal to
26:55 - input the user is going to type
26:56 - something again Now by default when the
26:58 - user types something in it's going to
27:00 - return it to us with double quotation
27:02 - mark so it's going to be a string so
27:04 - even if the user types in like 25 it's
27:06 - going to be returned to us like this and
27:09 - this here for python is not considered a
27:12 - number it's not considered an integer
27:13 - it's considered a string and so we need
27:15 - to convert this 25 so that it looks like
27:17 - this so that it's actually a number and
27:19 - the way you do that is you use this
27:20 - function called int so you surround the
27:24 - string with int and then it will convert
27:27 - this string into its numeric
27:28 - representation so it will give us 25
27:31 - however if you try to convert something
27:32 - that's not an actual integer into an INT
27:35 - it's going to fail you're going to get
27:37 - an error and so we need to make sure
27:39 - that what the user typed in is a digit
27:42 - before we try to convert it into an INT
27:44 - and the way you check that is with this
27:46 - isdigit method so I say if top of range.
27:49 - isdigit what is digit will do is Return
27:52 - To Us true if this is a number otherwise
27:55 - it will return false and so if this
27:57 - right here is true we will convert top
27:58 - of range into an integer so top of range
28:00 - is equal to int top of range then we
28:03 - will check if top of range is greater
28:04 - than zero so we'll say if top of range
28:08 - is uh actually we're going to say less
28:10 - than zero less than or equal to Zer
28:13 - specifically then what we will do is
28:15 - we'll print
28:17 - out please type a number larger than
28:23 - zero next time and then we'll just quit
28:27 - so we'll tell them what they did wrong
28:29 - and then we're just going to quit the
28:29 - program right there otherwise if we make
28:32 - it through all this we're good but one
28:34 - thing we need to do here is we need to
28:36 - put an else and we need to put quit and
28:39 - we need to put a print statement that
28:41 - says please type a number next time so
28:44 - let me run through this what we're doing
28:46 - is checking if it is a digit if it's not
28:48 - a digit so in the lse statement we need
28:50 - to tell them hey you got to type in a
28:51 - digit just doesn't work if you don't
28:52 - type in a number right and then we quit
28:55 - now if that works if it is a digit we
28:57 - can convert into an INT we make sure
28:59 - it's greater than zero if it isn't then
29:01 - we tell them hey you got to type in a
29:02 - number and then we quit but if we make
29:04 - it through all of this and we don't quit
29:06 - so we've now converted the number to an
29:08 - INT we can now use that number to
29:10 - generate our random number so we can say
29:12 - random number random. Rand int and then
29:14 - we can put top of range as our variable
29:16 - for generating that random number and
29:18 - we'll now generate up to whatever number
29:21 - they typed in sweet so now that we have
29:23 - that let's just print out the random
29:25 - number and let's just test this and make
29:26 - sure it's all working
29:27 - so I'm going to run this type a number
29:30 - let's type five and we got one issue
29:32 - Rand in missing one potential argument B
29:36 - okay so this is my fault I was saying
29:37 - when we used Rand int we could just
29:39 - include the top of the range that's
29:41 - false we need to include the bottom of
29:42 - the range as well so I'm going to put
29:44 - zero there and now this should work so
29:46 - let's run this and let's type a number
29:49 - let's type five and there you go we
29:50 - generated a random number which was four
29:52 - if we run this again type five we get
29:54 - three you can see this is indeed working
29:57 - sweet so now that we have our random
29:59 - number we want to keep asking the user
30:02 - to type in a guess for the number until
30:04 - they get it correct and so I'm going to
30:06 - use a while loop here and I'll explain
30:08 - how this works in a second I'm just
30:09 - going to say while true now what this
30:12 - means is okay we're going to do whatever
30:14 - is indented after this wall Loop here
30:17 - after the colon while this condition
30:20 - whatever is at the top of here is true
30:22 - so right now if we just decided to like
30:24 - print 10 this would happen infinitely
30:28 - this Loop would never stop unless we
30:30 - actually like manually close the program
30:31 - the reason is because there's no way for
30:33 - this to end right I say while true well
30:35 - true is always true and so we're just
30:37 - always going to print 10 however there
30:40 - is this keyword it's called break and
30:42 - what break will do is immediately stop
30:44 - the loop as soon as this line of code is
30:46 - executed so what we can do is use this
30:49 - break keyword to break out of the loop
30:51 - stop running the loop as soon as the
30:53 - user types in the correct number so
30:55 - we're going to say while true this is
30:57 - the condition for the while loop we
30:59 - could do a a real condition we could say
31:01 - something like while um like input and
31:05 - actually we'll say like user guess is
31:09 - not equal to random number we could do
31:11 - something like that that would work as
31:13 - well but I want to show you using the
31:14 - break keyword so instead we're going to
31:16 - do well true all right so what we're
31:18 - going to do is we're going to start by
31:19 - asking the user to guess what the
31:21 - numbers right that's the very first
31:22 - thing we do every single time we ask
31:24 - them we say okay make a guess so I'm
31:25 - going to say uh user guess is equal to
31:30 - and then input I'm going to say make a
31:35 - guess Co now same thing here we need to
31:39 - check if the user's guess is actually an
31:42 - integer right so I'm going to copy
31:44 - exactly what we just did right here and
31:47 - I'm going to paste it down below and I'm
31:49 - going to say okay if the and now instead
31:52 - of saying top of range I'm going to say
31:54 - user guest. is dig
31:57 - then user guess is equal to int of user
32:04 - guess and then I'll even take this and
32:06 - we don't need to check if the number is
32:08 - less than zero that's fine uh we can
32:10 - just do this so I'm going to say and I'm
32:12 - going to get rid of this this quit Okay
32:14 - let me explain this what I'm saying is
32:15 - okay the user guess is equal to input
32:18 - make a guess they're going to type in
32:19 - some number this comes in as a string we
32:21 - need to make sure that what they've
32:22 - typed in is actually a number if it is a
32:24 - number we'll convert it to a number
32:25 - we're all good however if it is not a
32:27 - number then we're going to say please
32:29 - type a number next time and we're going
32:31 - to use this keyword called continue now
32:33 - what continue will do is automatically
32:36 - bring us back to the top of our Loop so
32:38 - it's a little bit different than break
32:39 - rather than ending the loop it just
32:41 - brings us back to the very top so if I
32:43 - did something down here like
32:46 - printed after continue if we hit this
32:49 - continue keyword this won't run we won't
32:52 - print we'll just go back up to the top
32:53 - of the loop and ask the user to make
32:55 - another guess and so that's what we're
32:57 - going to do however we're going to come
32:59 - down here now we're going to say if the
33:01 - user guess is equal to the random number
33:05 - we're going to
33:06 - print and we're going to say you got it
33:09 - you got it correct otherwise we'll say
33:12 - else
33:13 - print you got it wrong so if they didn't
33:17 - get it right they got it wrong obviously
33:18 - right whereas if they uh didn't type a
33:21 - number we'll just say please type a
33:22 - number next time and then we'll continue
33:24 - rather than doing this and telling them
33:25 - they got it wrong after they didn't even
33:27 - type a number in okay hopefully that
33:29 - makes sense we can test this out though
33:30 - and make sure it's working so save the
33:32 - program and run now type a number let's
33:34 - type a number let's say 10 okay make a
33:37 - guess we're going to guess three and wow
33:39 - okay we actually got it um that's great
33:41 - but notice that it's still asking us to
33:43 - keep making guesses and to quit this you
33:45 - can type contrl c on your keyboard if
33:47 - you get into an infinite Loop the reason
33:49 - it's telling us to do that is because we
33:51 - didn't break out of the wall Loop right
33:52 - we said you got it but we didn't stop
33:55 - and to stop we need to use the break
33:57 - keyword so now you'll see if we do guess
34:00 - it we'll immediately stop looping
34:01 - whereas if we don't get it we will
34:03 - continue looping because the break
34:04 - keyword's not here so let's run this now
34:07 - type a number let's just go up to five
34:09 - make a guess one you got it wrong okay
34:11 - we'll guess two you got it wrong three
34:13 - you got it wrong four you got it wrong
34:15 - five you got it sweet and then we exit
34:17 - the loop there you go okay so that's
34:19 - working fine now what I'm going to do is
34:22 - I am going to keep track of how many
34:24 - times the user actually makes a guess so
34:26 - to do this I'm going to make a variable
34:28 - similar to what we had with score before
34:30 - I'm going to say guesses is equal to
34:32 - zero and now every single time we start
34:34 - this wall loop again I'm going to
34:36 - increment add one to guesses so I'm
34:38 - going to say
34:40 - guesses plus equals one so at the very
34:44 - top of the loop we'll increment guesses
34:46 - so the first time this runs guesses will
34:48 - be equal to one we'll go through all of
34:50 - this then we'll come back up to the top
34:52 - guesses will now be equal to two the
34:53 - user will now make another guess and now
34:56 - when we exit this wall Loop once this is
34:59 - done we're going to print out how many
35:01 - guesses they got I'm going to show you a
35:02 - different way to do this this time I'm
35:03 - going to say you got it in and then
35:07 - we'll say
35:09 - comma guesses and then the string
35:12 - guesses so another way to print multiple
35:14 - things on the same line is to use commas
35:16 - so I'm going to say you got it in and
35:18 - then I'm going to say whatever the
35:19 - number of guesses is notice I don't need
35:21 - a space here whenever you have uh commas
35:23 - separating your different things that
35:25 - you're printing out it will
35:26 - automatically add spaces in between them
35:28 - and then notice here I didn't even
35:29 - convert this to a string and that's
35:31 - because the print statement is smart
35:32 - enough to say okay hey this is an INT
35:34 - I'm going to convert this into a string
35:36 - for you and kind of automatically add it
35:38 - to this string so what we were doing
35:40 - manually before the print statement can
35:42 - just do for us and so this time we'll
35:44 - let the print statement do it uh this
35:46 - line here is completely equivalent to
35:48 - just having the uh the plus the space
35:52 - the
35:53 - string uh the other plus and the space
35:56 - right it's the exact ex same thing okay
35:58 - so let's go back to what we had and
36:00 - there you go we are all good now let's
36:02 - just run this and I am going to show you
36:04 - how we can tell them if they got it uh
36:05 - greater than or less than because I did
36:07 - tell you that we were going to do that
36:08 - okay so let's run this and let's say
36:11 - type a number let's go five make a guess
36:13 - one you got it wrong two you got it and
36:15 - then it says you got it in two guesses
36:17 - sweet all is working so now the last
36:20 - thing we want to do is tell the user if
36:22 - they were greater than or less than the
36:24 - number so that they can kind of narrow
36:25 - down their guesses and so rather than
36:27 - just telling them you got it wrong now
36:29 - inside of the else statement we're going
36:31 - to check if the user was above or if
36:34 - they were below and there's a ton of
36:35 - different ways to do this I'm just going
36:36 - to do it this way I'm going to say if
36:39 - the user guess is greater than the
36:42 - random number then what I want to do is
36:45 - say
36:45 - print you were
36:49 - above the
36:52 - number exclamation point otherwise I'm
36:55 - going to say print
36:57 - and I'll say you were below the
37:02 - number all right so let's run through
37:04 - this we're just checking if the user
37:06 - guess is greater than whatever the
37:08 - random number is if it is we're going to
37:10 - tell them they were above the number
37:11 - otherwise if it wasn't greater than it
37:13 - must be less than and we're going to say
37:14 - you were below the number now some of
37:16 - you may have heard that statement if it
37:17 - wasn't greater than it must be less than
37:19 - you say no it could be equal to that's
37:20 - correct but the thing is up here we
37:23 - checked if it was equal to and so if it
37:24 - was equal to we would have uh gone into
37:27 - here we would not have hit this elf
37:28 - statement so if we're in this elf
37:30 - statement we know we must not be equal
37:32 - to the random number and so instead what
37:34 - we can do is just run this if statement
37:36 - that's inside of the else I'm going to
37:38 - show you a more elegant way to do this
37:40 - in one second but let's just run the
37:41 - program and see if this works now okay
37:43 - let's run this type a number let's type
37:45 - 20 make a guess let's guess 10 you were
37:48 - above the number okay so now I don't
37:49 - have to guess below 10 so I'm going to
37:51 - guess five you are above the number okay
37:53 - it's less than five uh Four 3 2 two one
37:57 - you got it in nine guesses okay so
37:59 - anyways that did work but it was telling
38:01 - us whether we were above or below uh
38:04 - let's see if I can guess something
38:06 - that's actually I guess I couldn't have
38:07 - guessed anything below one so let's run
38:09 - this again let's type 10 let's guess one
38:12 - and then this time it is telling us
38:13 - we're below the number okay great so
38:15 - that is working okay so the one thing I
38:16 - want to show you here is how we can
38:17 - clean this up a little bit using
38:19 - something new that we haven't seen yet
38:20 - which is known as an L if statement so
38:23 - an L if statement is something that kind
38:25 - of happens after the initial if
38:27 - statement is checked so I'm just going
38:28 - to type this out and then I'll show you
38:29 - how this works so I'm going to say l if
38:33 - okay so now what I've done is I've made
38:34 - this code a little bit cleaner and the
38:36 - way I've done this is I've removed that
38:37 - kind of nested if statement that we had
38:40 - and I've now implemented an L If instead
38:42 - so what the L if does is if the initial
38:45 - condition is not true it will then check
38:48 - another condition so it says okay if
38:50 - this is true we're going to do this
38:51 - we're going to skip all of this if this
38:53 - is not true we're going to check this if
38:56 - this this is true we're going to do this
38:57 - and we're going to skip whatever else is
38:59 - after however if this is not true then
39:01 - we're going to do whatever is in the
39:02 - else so we're going to check this if
39:04 - it's true we do this otherwise we check
39:06 - this if it's true we do this and
39:08 - otherwise if both of these things are
39:09 - false we do what's in the else and so
39:12 - that's just another way to do this
39:14 - rather than having what we have before
39:16 - which was the else and then all of this
39:18 - kind of indented in the else right this
39:21 - just cleans it up and small note you can
39:23 - have as many LF statements as you want
39:25 - so I get add another one like this if I
39:27 - wanted to do that but in our case it
39:28 - doesn't really make any sense to do that
39:31 - okay so that's actually it uh I'm not
39:33 - going to run the program just believe me
39:35 - this this does work and yeah that is
39:37 - going to be our number guessing game so
39:39 - I'll zoom out a bit so you guys can kind
39:41 - of see all of the code but that is how
39:44 - that works I guess there's not really
39:45 - much more to say about that and now
39:47 - we'll move on to the next one all right
39:49 - so now we're moving on to rock paper
39:51 - scissors now obviously you guys know how
39:52 - this game works what I'm going to do
39:54 - here is make it so that the computer
39:56 - keeps track of how many times the user
39:58 - gets it correct versus how many times
40:00 - the computer gets it correct when I say
40:01 - corrects I mean whoever wins uh rock
40:03 - paper systems so the first thing we're
40:05 - going to do here is import random uh now
40:08 - small note here when you are importing
40:09 - modules uh it's typically best practice
40:11 - to do it at the very top of the program
40:13 - I see some beginners import the module
40:15 - like right before they use it that's
40:17 - fine you can do that but it's just a
40:19 - better practice to have it right at the
40:20 - top so it's really easy to see what
40:21 - stuff you've imported and obviously
40:23 - remove it and then you can use it
40:25 - throughout the entire file where if I
40:26 - tried to use like random up here it
40:28 - doesn't work until after I've imported
40:30 - right uh so hopefully that's clear but
40:32 - anyways that's what we're going to do so
40:34 - what we need is we need two variables
40:36 - one for the user score and one for the
40:38 - computer score so I'm going to say user
40:39 - uncore wins is equal to Z and I'll say
40:43 - computer uncore winds is equal to zero
40:46 - as well all right now I'm going to have
40:48 - a while loop I'm going to say while true
40:51 - and the first thing I'm going to do here
40:52 - is I'm just going to ask the user uh
40:55 - actually yeah I'll ask the user to input
40:56 - rock paper or scissors and then I will
40:59 - also let them type in Q uh like the
41:02 - letter q and if they do Q then we'll
41:04 - just immediately quit the program so
41:05 - let's handle that first let's say user
41:07 - uncore input is equal to input and I'll
41:11 - say type and then we can say rock slash
41:15 - paper slash scissors is scissors with a
41:20 - with with two s's I think that's how you
41:22 - spell it okay rock paper scissors and
41:24 - well paper should be spelled correctly
41:26 - okay rock paper scissors or Q to quit
41:30 - okay all right so now that we have that
41:32 - we will go down and we will check let me
41:34 - just zoom out so we can see this here
41:35 - what the user actually typed in so the
41:37 - first thing I want to do is I want to
41:39 - see if they typed in Q so I will
41:41 - actually convert this to lower in kind
41:44 - of the way that I showed you we could do
41:45 - it previously we'll take whatever the
41:47 - user types in and we'll just convert it
41:49 - to lower and actually instead of a
41:50 - period let me do a colon and let me add
41:52 - a space so it's not all smush there okay
41:54 - so type rock paper scissors or Q to quit
41:57 - and now I'm going to say if the user
41:58 - input and this is converted to lower
42:00 - right is equal to Q then what I'm going
42:04 - to do is I'm going to quit otherwise I'm
42:07 - going to check if they typed in rock
42:09 - paper scissors or if they typed
42:11 - something else and now I'm going to show
42:12 - you how we can check if the user input
42:15 - is equal to more than one thing because
42:17 - previously I've been showing you how we
42:18 - can check if it's equal to just a string
42:20 - right but now I'll give you a little bit
42:22 - of a I don't want to call it a hack but
42:23 - a little bit of a trick so that you can
42:25 - see if the user typed in rock paper or
42:27 - scissors all in one line rather than
42:29 - writing three if statements so I'm going
42:31 - to say if the user input is in and I'm
42:34 - going to use a list you guys probably
42:35 - haven't seen this before if you're uh
42:37 - like a complete beginner in Python and
42:40 - let me just kind of fix this a little
42:42 - bit so p s I'm going to type it myself
42:46 - and I'll explain what's going on here
42:47 - okay so let's make this in
42:51 - quotes Okay and then this needs to be in
42:55 - quotes to okay I'm really messing this
42:57 - up quite badly but get the idea okay so
43:00 - what I've done is I've just created a
43:01 - list now a list is anything encapsulated
43:03 - in these square brackets um that is like
43:06 - separated by commas so I have this rock
43:10 - paper and scissor string in this list
43:14 - and so what I'm saying is if user input
43:16 - is in this list I'm checking if whatever
43:20 - the user typed in exists in either of
43:23 - these three strings so essentially we're
43:24 - just checking if the user typed in Rock
43:26 - paper or scissors now you can put any
43:28 - strings in here that you want uh but
43:30 - we're just checking obviously if this is
43:31 - in here and that's how we can check
43:33 - multiple things on one line there's
43:35 - other ways to do this too but this is
43:36 - kind of one nice trick that we can use
43:38 - so I'm going to say if user input and
43:40 - I'm actually going to say is not in now
43:43 - this is another keyword again that you
43:44 - may not have seen before what this is
43:46 - going to do is simply reverse the kind
43:48 - of thing that we were checking before so
43:50 - we were checking if the user input was
43:52 - in rock paper scissors so now when I say
43:54 - not in I mean obviously obiously as you
43:56 - would read it in English this is
43:57 - checking if the user input is not in
43:59 - here if it's not in here that means I
44:02 - didn't type in something valid and well
44:03 - what we need to do is have them type in
44:05 - something valid so what I'm going to do
44:06 - is say type continue here and what this
44:09 - will do is just re askk them to type in
44:11 - rock paper scissors or Q so we could
44:14 - give some error message saying that's
44:15 - not a valid option or something like
44:17 - that but what I'm going to do is just
44:18 - have it so it keeps asking them to type
44:20 - something in until eventually they give
44:22 - us something valid so when I hit
44:23 - continue that means anything after here
44:26 - is not going to happen right if this
44:27 - continue is hit we're it's going to go
44:29 - back up to the top of the W Loop sweet
44:33 - and actually rather than saying quit
44:34 - here what I'm going to do is say break
44:36 - so this will break out of the wall Loop
44:38 - and then that will actually
44:39 - automatically end the program for us
44:40 - because we'll be at the end uh we won't
44:42 - need to what do you call actually
44:43 - manually quit so the break breaks out of
44:46 - the wall Loop which means we'll go to
44:47 - wherever the end Loop is done or
44:49 - wherever the wall Loop is done and then
44:50 - we can actually just print something
44:51 - saying you know good no not not that uh
44:56 - goodbye exclamation point sweet okay so
44:59 - now at this point in time the user has
45:00 - given us valid input they've typed in
45:02 - rock paper or scissors so what we need
45:03 - to do is generate a random number that
45:05 - represents rock paper or scissors for
45:08 - the computer so I'm going to say Rand uh
45:10 - actually say yeah random uncore number
45:14 - is equal to and then this is going to be
45:18 - uh random. Rand int and we'll generate a
45:21 - number between 0 and two so if they type
45:23 - in zero that can be Rock if they type in
45:25 - one that can be scissors or paper they
45:28 - type in two that can be scissors so
45:30 - let's write that down in a comment uh to
45:32 - do a comment in Python you hit the pound
45:34 - sign or use the pound sign like the
45:35 - number sign and then type anything after
45:38 - it anything on a line that comes after a
45:40 - pound sign will not be read by your
45:42 - python interpreter and it's just there
45:44 - so that as a programmer it's easier to
45:46 - read and gives you like you know
45:47 - documentation or comments about what's
45:49 - going on so I'm going to say rock is one
45:53 - or rock is zero I'm going to say paper
45:56 - is one I'm going to say scissors is and
45:59 - then two sweet so the way that I'm going
46:01 - to do this now is I could do an if
46:03 - statement or I could write three F
46:05 - statements say you know if random
46:06 - numbers equal to zero then the computer
46:08 - picked Rock if random numbers equal to
46:10 - one if random numbers equal to two
46:12 - actually don't need to do that what I
46:14 - can do is uh H let's see here okay so
46:17 - what I'm going to do now here to
46:18 - actually assign uh some variable equal
46:21 - to rock paper scissors to represent the
46:23 - computer's kind of choice is I'm going
46:24 - to use a list now again this might be a
46:27 - little bit confusing but I think you
46:28 - guys will get the idea if I do this I'm
46:30 - going to take this list right here rock
46:32 - paper scissors I'm actually going to
46:34 - store it in a variable I'm going to say
46:35 - options is equal to rock paper scissors
46:38 - and I'm going to change this here to be
46:40 - options so this is the doing the exact
46:42 - same thing as before except we're just
46:44 - storing this list of values now in this
46:45 - options variable now if you haven't seen
46:47 - lists before these are actually very
46:49 - interesting they're known as a data
46:50 - structure and they are collections of
46:53 - elements right we have multiple elements
46:55 - multiple St stored in this list and well
46:58 - the way we access these different
46:59 - elements in this list let's say I just
47:02 - wanted scissors or I just wanted paper I
47:03 - just wanted rock is we use what's known
47:05 - an in known as an index so if you write
47:08 - the name of your list which in this case
47:10 - is options that's the variable starting
47:12 - the list you can put these square
47:14 - brackets and then you can put a numeric
47:16 - index that represents these different
47:18 - elements so in this case the different
47:20 - indices of this list are zero 1 and two
47:25 - and if we had another element right
47:27 - let's just go you know test then this
47:29 - would be index 3 so the way this works
47:32 - is you start counting at zero and then
47:35 - you just go up by one every single time
47:36 - so the very first element is indexed by
47:38 - zero second 1 3D 2 fourth 3 and so
47:42 - that's all that is so when I say options
47:44 - at zero that's going to give me rock
47:46 - when I say options at one that gives me
47:48 - paper when I say options at two that
47:49 - gives me scissors and so I have some
47:52 - random number that's between 0 and two
47:54 - right and z represents Rock one
47:56 - represents paper and two represents
47:58 - scissors let me get rid of test so what
48:01 - I can do is say uh let's actually change
48:04 - this here say computer uncore guess or
48:08 - computer uncore pick I guess is equal to
48:11 - and then this is going to be options at
48:14 - whatever the random number is because
48:15 - this will be between 0o and two and so
48:17 - we'll use that as the index to actually
48:20 - access the string the thing that the
48:22 - computer chose right rock paper or
48:23 - scissors so now what we can do is we can
48:26 - print out what the uh computer chose we
48:28 - can say
48:30 - computer picked and then we can say
48:33 - comma and we can say computer unor pick
48:37 - and then we will decide who actually won
48:40 - right so then we'll say who won and let
48:41 - me just do comma uh actually hm let's do
48:44 - plus and let's just add a period the
48:46 - reason I'm not doing a comma and then
48:48 - the period is because if I do a comma it
48:50 - will automatically add a space between
48:52 - this period and the computer pick which
48:54 - I don't want and so instead we're just
48:56 - going to add the uh the dot like that
48:58 - okay so we're going to say the computer
48:59 - picked that and then we need to decide
49:01 - who won right and so to decide who won
49:03 - we need to all compare uh the user's
49:06 - pick to the computer's pick so we're
49:07 - going to say if the user input is equal
49:10 - to and then I guess we'll say rock we'll
49:12 - then do kind of the winning condition
49:14 - for the user so if the user picked Rock
49:16 - then what do they win against well they
49:18 - win against scissors and so now we need
49:20 - to check if the user picked Rock and the
49:23 - computer picked scissors so what I'm
49:24 - going to do is use this keyword called
49:26 - and and say computer pick is equal to
49:31 - and then scissors so if that's the case
49:34 - we'll print
49:35 - out uh
49:37 - U1 exclamation point and then we will
49:39 - say user underscore wins plus equals 1
49:43 - so that they get one more win so what
49:46 - this and does is it checks if the
49:48 - condition on the left side and the
49:50 - condition on the right side are true so
49:52 - what happens in this if statement or
49:53 - what's in this if statement will only
49:55 - happen if both of these things are true
49:57 - pretty straightforward that's how the
49:58 - and works alternatively there's an or
50:01 - and an or will kind of do the opposite
50:03 - it will check if either the left or the
50:05 - right is true or both of them are true
50:08 - if any of those three things happen this
50:10 - is true this is true or both of them are
50:11 - true then what's in the if statement
50:13 - will run whereas with the end it has to
50:15 - be both of these being equal to True For
50:17 - What the What in the if statement is
50:19 - going to run or if what's in the if name
50:21 - is going to run sorry butchering my
50:22 - English here okay so that's one of the
50:24 - win conditions for our user and then if
50:26 - that's the case we can just go ahead and
50:28 - say continue and we can go back up to
50:30 - the top of the wall Loop and keep going
50:32 - but we need to check the other wi
50:34 - conditions right and there's two more
50:35 - win conditions let's go here and let's
50:39 - fix the
50:40 - indentation okay and we'll say if the
50:43 - user input now is equal to paper and the
50:47 - computer picked uh what is it Rock then
50:50 - that means that we won right and so we
50:52 - would add one to the win and then the
50:54 - last one is we picked scissors and the
50:57 - computer picked paper sweet so the
51:00 - reason I'm doing this continue here is
51:02 - because after we've determined that
51:03 - we've one there's really no point in
51:04 - checking these other if statements so we
51:06 - could instead do these in L ifs so I
51:09 - could say if L if L if and then actually
51:12 - I could remove all these continues and
51:14 - in fact let's do this and uh then we
51:16 - will go down here and we will say else
51:19 - and then what we would do here is say
51:23 - print U lost and then we will say
51:27 - computer wins okay plus equals 1 so the
51:31 - reason this works now is because we
51:33 - check if we won with The Rock versus
51:35 - scissors we check if we won with paper
51:37 - versus Rock we check if we won with
51:38 - scissors versus paper and if none of
51:40 - those are true that means we didn't want
51:42 - win right there's no point in checking
51:43 - if the computer beat us in all the other
51:45 - uh scenarios we just need to check if
51:47 - our three win conditions were true if
51:49 - they are not true then we know that we
51:50 - lost and so we would print we lost and
51:52 - then we add our computer wins and this
51:54 - is an example of using multiple LF
51:56 - statements we'll check this one if it's
51:57 - false we'll check this one if it's false
51:59 - we'll check this one if it's false we
52:01 - run this if any of these are true we
52:03 - immediately stop and we do whatever is
52:04 - inside of here uh which is increment the
52:06 - user wins and print youu want great so
52:09 - the last thing I'm going to say before I
52:11 - do goodbye is I'm just going to print
52:13 - out the number of user wins versus
52:15 - computer wins so I'm going to say the
52:17 - user or I'll say in this case
52:19 - you
52:21 - U1 comma user wins times and then we'll
52:28 - print the computer one and then computer
52:34 - winds times period great so hopefully
52:39 - that is all good let's quickly run
52:41 - through what we've done because we wrote
52:42 - a lot of code here relatively quickly as
52:43 - you can tell I'm kind of picking up the
52:45 - pace a little bit as we go through this
52:47 - so we have our user wins our computer
52:48 - wins we're importing random which we've
52:50 - already discussed we have our list first
52:52 - time we've seen this called options has
52:54 - our three values in it it we have while
52:56 - true we have user input equals input and
52:59 - then we say type rock paper scissors or
53:01 - Q to quit we make whatever they type in
53:03 - lowercase we check if the user inputed Q
53:06 - if they do we break we're done we stop
53:08 - the program if they didn't then we check
53:10 - if the user input is not in the options
53:13 - if it's not in the options that means I
53:14 - didn't type a valid rock paper or
53:16 - scissors and so we press or we uh go
53:19 - continue which means we're going to
53:19 - start the loop again we're going to ask
53:21 - them to type something in then what we
53:23 - do if they typed in something valid is
53:25 - we generate a random number between 0
53:26 - and two uh this is the like what it
53:29 - stands for rock is zero paper is one
53:31 - scissors is two we make our computer
53:33 - pick so computer pick is equal to
53:35 - options at whatever the index is of the
53:37 - random number we then say okay the
53:40 - computer picked this we then check if
53:42 - the user won based on what the computer
53:44 - picked right and uh yeah that's all good
53:48 - and then we increment computer wins or
53:50 - user wins and we will keep going until
53:52 - eventually the user hits Q once we're
53:54 - done we'll bring break out of the wall
53:55 - Loop and we'll print these three things
53:58 - let's run it let's see if it works okay
54:00 - type rock paper scissors or Q to quit
54:02 - let's just test Q okay you won zero
54:04 - times the computer won zero times
54:05 - goodbye nice works okay let's actually
54:08 - type something let's go rock it says
54:10 - computer pick scissors you won nice okay
54:12 - type rock paper scissors or Q to quit
54:14 - let's go paper uh computer pick scissors
54:17 - you lost okay that sucks let's
54:19 - go uh scissors uh computer picked paper
54:22 - you won nice let's go rock okay and
54:24 - let's go q and then it says the computer
54:26 - one one time you won three times goodbye
54:29 - all right so that is rock paper scissors
54:32 - keeping track of how many times with the
54:33 - user and the computer wins now we're
54:35 - going to move on to the next project
54:37 - which is the Choose Your Own Adventure
54:39 - game all right so this next project is
54:41 - one of my all-time favorite beginner
54:43 - projects and that is because it's so
54:45 - customizable there's so much you can do
54:47 - with this I'm really only going to talk
54:48 - about this for about 5 or 10 minutes
54:50 - because this is up to you guys to make
54:51 - this kind of as big as you want so this
54:54 - a Choose Your Own Adventure Ure game and
54:56 - I guess the best thing to relate this to
54:57 - if you haven't heard of this before is
54:59 - kind of these children books and
55:00 - actually they have books that aren't
55:01 - children versions too but they're kind
55:03 - of like pick your own story books where
55:05 - you'll go to a page right and it will
55:07 - say like if you want to go left turn to
55:09 - page like 42 if you want to like swim
55:11 - across the river go to page 97 whatever
55:14 - and then like it kind of brings you on
55:15 - all these different paths throughout the
55:17 - book based on decisions that you make so
55:19 - same thing here we're going to ask the
55:21 - user to make a bunch of different
55:22 - choices we'll start with something
55:24 - simple like do you want to play the game
55:25 - right and then if they say yes we'll say
55:27 - okay you know you come to some Bridge do
55:29 - you want to cross it or do you want to
55:30 - swim underneath it and then based on
55:32 - what they say if they cross the bridge
55:34 - maybe we'll say okay you come to a dead
55:36 - end do you want to turn around or do you
55:37 - want to search the jungle whatever like
55:39 - you can be as creative as you want them
55:40 - just coming up with stuff at the top of
55:42 - my head but then if they had instead
55:44 - decided to swim under the bridge maybe
55:45 - we say like oh you know there was a
55:47 - crocodile and your your journey ended
55:49 - whatever so you guys can make it as
55:51 - complex as you want but I'll show you
55:53 - like the basic structure and kind of the
55:55 - nesting of statements and how it works
55:57 - so the first thing we're going to do is
55:59 - I'm actually going to ask the user for
56:00 - their name this is one this is something
56:01 - I don't usually do but I think this will
56:02 - be cool so I'm going to say um name is
56:06 - equal to input I'm going to say type
56:10 - your name Co and then I'm going to say
56:13 - print and I'm going to welcome the user
56:15 - I'm going to say welcome comma name
56:18 - comma to
56:20 - this ad Venture exclamation point and
56:24 - then we'll actually get right into it
56:26 - and before I even ask them if they want
56:27 - to play what I will do is I will just
56:29 - say like I'll ask them for a choice I'll
56:31 - say you come to a dirt road or something
56:33 - do you want to go left or right whatever
56:35 - so the first thing I'm going to say here
56:37 - is answer in lower cases is equal to
56:41 - input um and I'll say h you are on a dir
56:49 - Road it has come to an end and you can
56:56 - go left or
56:59 - right uh and then I will say which way
57:02 - would you like to go question mark okay
57:07 - so let's just go here and notice that
57:09 - it's doing this autof formatting you
57:10 - guys don't have to worry about this just
57:12 - my IDE Auto formats my code when I save
57:14 - it and so you can see it's kind of going
57:16 - on a new line uh don't worry about it
57:18 - you can just do yours in the same thing
57:19 - but anyways that's like my prompt you're
57:20 - on a dirt road it has come to an end and
57:22 - you can go left or right which way would
57:25 - you like to go and I'm expecting them to
57:27 - type in left or right so the first thing
57:28 - I'm going to do is I'm going to check if
57:29 - they typed left or right I'm going to
57:30 - say if answer is equal to left and
57:35 - actually before I do that I'm going to
57:37 - convert this input here to lower and I
57:40 - realized I kind of messed something up
57:41 - hopefully that fixed it okay so we're
57:43 - going to say do lower and let me add the
57:46 - space here between the question mark
57:49 - okay so answer equals equals left so if
57:51 - the answer equals left then we'll do
57:53 - something else otherwise
57:56 - uh we will actually we'll say l if
57:59 - answer is equal to write and then else
58:03 - we'll say uh
58:07 - print not a valid option you lose so I'm
58:12 - just going to make it so if they ever
58:13 - give us something that's not valid they
58:14 - just immediately lose the game okay so
58:16 - if the answer is equal to left then uh
58:19 - we need to pick what's going to happen
58:20 - when they go to the left if the answer
58:21 - is equal to right we need to decide
58:23 - what's going to happen if they go to the
58:24 - right so I'll start by kind of doing the
58:25 - left path and let me just put a print
58:27 - statement here so I don't get an error
58:30 - um you'll notice that if you don't have
58:31 - something indented after it's expecting
58:33 - something to be indented it will like
58:35 - yell at you and be angry so you can just
58:37 - put an empty statement like print and
58:39 - that will kind of fix it okay so now
58:41 - what I'm going to do is I'm going to ask
58:42 - another question I'm going to say answer
58:44 - and you can name these variables
58:45 - whatever you want maybe it would make
58:46 - more sense to name them like Q2 or
58:48 - something whatever I'll say answer is
58:50 - equal to
58:52 - input and I'll say um okay like you come
58:58 - to a
59:00 - river and
59:03 - you can walk around it or swim across
59:10 - and I'll say type walk to walk around
59:15 - and swim to swim across and make sure
59:18 - that when you guys do this you're kind
59:20 - of like uh you know telling the user
59:22 - what they need to type in because
59:23 - sometimes it's not intive on what they
59:25 - should be typing and so I always try to
59:27 - give them the option like tell them
59:29 - explicitly like what I'm expecting them
59:30 - to type so they don't give me an invalid
59:32 - option uh like not intentionally you
59:34 - know so now I'm going to check inside of
59:36 - here if the answer is equal to
59:39 - swim L if the answer is equal to walk
59:44 - and then else I will print not a valid
59:47 - option you lose right so we'll do that
59:50 - okay so now I need two things to happen
59:52 - here so print and print okay so I'm
59:55 - going to pause for a second hopefully
59:57 - you're getting the idea of what's going
59:58 - on here right if they go left I ask them
60:00 - a different question and then I check
60:03 - inside of this if statement what they
60:05 - answer for that next question and then I
60:07 - do something else whereas if they go
60:08 - right I'm going to ask them a different
60:10 - question and so it's cool because
60:11 - there's like all of these different
60:12 - paths that people can explore and like
60:14 - if they only go left at the beginning
60:16 - they're only exploring like half of the
60:18 - potential paths and then as soon as they
60:19 - go right there's all new different
60:21 - options now you could have the same
60:23 - options for different um things they
60:25 - type right if they decide to go left or
60:27 - right you could in theory ask them the
60:29 - same question if they go left or if they
60:30 - go right but I like to do it differently
60:32 - I think that's more fun so let's just
60:34 - kind of continue on this path here we'll
60:36 - say if the answer is equal to swim then
60:38 - I'll print um you
60:42 - swam
60:44 - across and were eaten by an alligator is
60:49 - that how you spell alligator maybe you
60:51 - guys can tell my spelling is not the
60:52 - best okay eaten eaten there you go buy
60:55 - an alligator nice now if they decide to
60:57 - walk across I'll say you walked for many
61:01 - miles ran
61:04 - out of water and you lost the game okay
61:09 - so both of these options here were
61:11 - invalid so if they decide to go left
61:13 - doesn't matter what they chose they were
61:14 - just going to lose and so instead they
61:15 - have to go right and so we've kind of
61:16 - ended the path now on the left but if we
61:18 - wanted to maybe swim was like the
61:20 - correct answer quote unquote we could
61:22 - add another path here and we don't have
61:24 - to have them lose on one of these
61:26 - options I could add another path for
61:27 - walk too right like hopefully you're
61:29 - getting the idea you can just chain
61:30 - these kind of if statements in as far as
61:32 - you want so now let's do something for
61:33 - going right and actually before we do
61:35 - that let's let's test this out and let's
61:36 - make sure you guys understand what's
61:37 - going on here okay so type your name I'm
61:40 - going to say Tim says welcome Tim to
61:42 - this adventure you're on a dirt road it
61:43 - has come to an end and you can go left
61:45 - or right which way would you like to go
61:47 - let's go left when I go left it says you
61:48 - come to a river you can walk around it
61:50 - or swim across type walk to walk around
61:52 - and swim to swim across you're going to
61:54 - type swim swim says you swam across and
61:55 - we're eaten by an alligator and then
61:57 - there you go boom you lose right okay so
61:59 - now let's go and do something for right
62:02 - so for right I'm going to say answer is
62:04 - equal to input um I'm going to say you
62:08 - come to a um
62:13 - Bridge it looks wobbly do you want to
62:19 - cross
62:20 - it or head back question mark and and
62:24 - then the options I'll put here I'm just
62:26 - going to put them in Brackets I'll say
62:28 - cross slashback to kind of really
62:30 - indicate hey that's the two things that
62:32 - you're supposed to be typing Cross or
62:33 - back and then here I'm going to just
62:35 - copy this if else structure just so I
62:37 - can fill it in I'm going to say if the
62:39 - answer is equal to back if the answer is
62:42 - equal to cross and then I'll continue so
62:45 - now I'm going to say if answer equals
62:47 - back uh you go back to the um I don't
62:52 - know like main road whatever we can make
62:54 - this whatever you want now you can
62:59 - decide to
63:01 - drive forward I don't know
63:04 - drive to the left or go to the right or
63:07 - you know what we can make going back
63:08 - just just be the wrong option we'll just
63:10 - say you go back and lose I I don't think
63:14 - you guys need me to uh to give too much
63:15 - detail here because I'm having trouble
63:17 - coming up with this okay so we're going
63:18 - to say that Crossing is the correct
63:19 - option so if they decide to cross then
63:22 - what we're going to do here is now we're
63:23 - going to ask them another question we're
63:24 - going to say answer is equal to input
63:27 - we're going to
63:27 - say you cross the
63:31 - bridge
63:32 - and meet a
63:35 - stranger do you talk to them we'll say
63:38 - yes comma no question mark okay and then
63:42 - same thing here we can say if answer is
63:45 - equal to Yes uh L
63:49 - if answer is equal oops is equal to no
63:55 - and then else we'll say not a valid
63:58 - option you lose so let me copy that okay
64:01 - not a valid option you lose and then
64:02 - here again we can decide what we want so
64:04 - we'll say print maybe yes is like the
64:06 - correct answer and it ends the game we
64:08 - can say um
64:10 - you talk to the
64:13 - stranger and they give you gold
64:16 - whatever you win exclamation point uh
64:20 - otherwise no we could say
64:22 - print um
64:25 - you ignore the
64:30 - stranger if I could spell stranger
64:32 - correctly and they are offended and you
64:38 - lose okay so again I'm just like
64:41 - randomly coming up with this stuff I'm
64:42 - sure you guys are laughing at the the
64:44 - options that I'm I'm going with here but
64:45 - I'm just trying to show you the
64:46 - structure of this program and kind of
64:48 - how like the nest thing works that you
64:50 - can make this as advanced as you want so
64:52 - now we've kind of implemented something
64:53 - for the right so it ask you a question
64:55 - uh obviously you lose if you go back uh
64:57 - if you go to decide to cross then you
64:59 - asked another question you cross the
65:00 - bridge meet a stranger do you talk to
65:01 - them if the answer's yes you Lo or you
65:03 - win if the answer's no you lose if you
65:05 - answer something that's not one of those
65:07 - then uh what do you call it uh you lose
65:10 - and then of course if you wanted to keep
65:11 - going from here rather than telling them
65:13 - they lose or they win you would just ask
65:14 - them another question and you would keep
65:16 - doing this and keep nesting this if and
65:18 - else and you can make multiple options
65:20 - too you don't have to just do two
65:21 - options you can make it so they could
65:22 - give you three options you can make it
65:24 - so that you store one of their options
65:26 - in a variable like name right and then
65:28 - you use that variable later on like
65:29 - maybe they picked up a I don't know like
65:32 - a weapon or something really early and
65:33 - if the weapon they chose really early is
65:35 - not correct when they go down a certain
65:36 - path then maybe they lose whereas if it
65:38 - was correct then maybe they can continue
65:40 - on or something like that and so lastly
65:42 - I'm going to say print thank you for
65:45 - trying comma and then this is going to
65:47 - be their name okay so let's run this and
65:50 - I'll just go through a few of the paths
65:51 - but that's pretty much going to wrap up
65:52 - this game there's not really much more
65:53 - to to show you uh this just a cool one
65:55 - and I always find this fun and obviously
65:57 - you guys can come up with better stories
65:58 - than I can so type your name and say Tim
66:01 - welcome Tim to this adventure you're on
66:02 - a dirt road it's come to an end you can
66:03 - go left or right I'm going to go right
66:06 - okay you come to a bridge it looks
66:07 - wobbly do you want to cross or head back
66:10 - I'm going to cross you cross the bridge
66:11 - and meet a stranger do you talk to them
66:13 - no says you ignore the stranger and
66:15 - they're offended and you lose thank you
66:16 - for trying Tim right there you go and we
66:18 - could try this again type your name Tim
66:21 - uh you're on dirt road let's go left
66:24 - right you come to River let's walk and
66:26 - it says you walked for many miles right
66:27 - under water and you lost the game I'm
66:29 - not going to go through all the options
66:30 - I think you guys get the idea now that
66:32 - is the Choose Your Own Adventure game
66:33 - again this code will be linked in the
66:35 - description if you want to download it
66:36 - but this is kind of the template use the
66:39 - if L if and lse structure and you know
66:41 - make this as advanced and complex as you
66:43 - want now let's move on to the last
66:45 - project which is the password manager
66:47 - all right so now we're moving on to the
66:49 - last project which is a password manager
66:52 - now the point of this program is to kind
66:53 - of organize and store your passwords so
66:55 - we're going to store all of the
66:56 - passwords along with the username or the
66:58 - account they're associated with in a
67:00 - text file but we are not going to store
67:02 - the passwords in plain text we're going
67:03 - to encrypt the passwords now even though
67:06 - we're encrypting these passwords which
67:07 - means they're going to need a kind of
67:09 - password to be able to decrypt them so
67:11 - like there's like a master password for
67:13 - all of the passwords this is not a
67:14 - secure way of storing your passwords do
67:16 - not rely on this for anything other than
67:18 - like a fun python project and I
67:20 - personally would not recommend storing
67:22 - at least any of your very sensitive
67:23 - password
67:24 - uh in this method it's just like a cool
67:26 - thing and I wanted to show you how to do
67:27 - it and it's kind of a more advanced
67:29 - project out of the five that we've done
67:32 - so the first thing I'm going to do here
67:33 - is I'm going to going to write the code
67:34 - that's allowing us to actually ask the
67:36 - user whether they want to list out their
67:38 - passwords or whether they want to add a
67:40 - new one and we're going to store all of
67:41 - these in a text file so I'll do this
67:43 - project first without encrypting any of
67:45 - the passwords and then we'll go and and
67:47 - encrypt them so the first thing that we
67:48 - need to do is ask the user for like a
67:50 - master password so we're going to say uh
67:53 - PWD is equal to input and we'll say what
67:56 - is the master password question mark now
68:01 - we're not actually going to validate
68:03 - this password is equal to something
68:04 - we're going to use this password to
68:06 - encrypt our uh our passwords so if they
68:09 - type in the wrong password here it's
68:11 - still going to work like the program
68:12 - will operate but it won't show them the
68:14 - correct password and you'll see how that
68:15 - means when we kind of get later into the
68:17 - uh into the video uh regardless what I'm
68:20 - going to do now is ask them what mode
68:21 - they want to go in so whether they want
68:23 - to add a new password or whether they
68:24 - want to view their passwords so I'm
68:26 - going to say um mode is equal to input
68:30 - and we'll say would you like to add a
68:36 - new password or
68:39 - view existing ones question mark and
68:42 - then the uh two inputs I'll allow will
68:45 - be I guess View and add okay so that's
68:50 - what I'm expecting them to type in now
68:52 - what I'm going to say is if mode is
68:54 - equal to view we will do something uh
68:58 - otherwise L if mode is is equal to what
69:04 - I say add we will do something else
69:08 - otherwise else will say
69:12 - print in valid mode and I'm going to
69:14 - take all of this and I'm going to put
69:16 - this inside of a wup so I'm going to say
69:17 - while true because we'll allow them to
69:20 - like add a password then view them and
69:21 - like so on and so forth and so in this l
69:23 - here I'll just say invalid mode and I'll
69:25 - say continue and what this will do will
69:28 - bring them to the top of the wall Loop
69:29 - and then I'm also going to add something
69:30 - here that says uh press Q to quit and
69:35 - then I'm going to convert all of this to
69:37 - lower and then I'm going to check at the
69:40 - very top here I'm going to say if mode
69:43 - equals equals Q then break the wall Loop
69:46 - okay sweet and then we could make this
69:48 - an LF but we don't have to make it an L
69:50 - if since we have a break here uh if this
69:51 - is true it just won't even bother
69:53 - checking these
69:54 - so up to you but I'm not going to add
69:55 - the uh the LF okay so now that we have
69:58 - this what I'm going to do is show you
70:00 - something called a function so I'm going
70:01 - to create two functions here I'm going
70:02 - to say Define uh View and I'm going to
70:06 - say pass and then I'm going to say
70:07 - Define and this is going to be
70:10 - add okay so what a function is is an
70:12 - executable reusable block of code so the
70:15 - way you call a function is you write the
70:18 - name of it which is this okay and then
70:20 - two parentheses so the basic syntax is
70:22 - you write defa to define a new function
70:24 - space name of the function open and
70:26 - closing parentheses and then any
70:28 - parameters that you want inside of here
70:30 - I'm not going to really talk about what
70:31 - that is because I'm not trying to teach
70:32 - functions here I'm just trying to show
70:34 - you how we can kind of split our code
70:35 - into different sections and anyways the
70:37 - way you call a function is by its name
70:38 - and then the open in closing parentheses
70:41 - so if I put say like
70:43 - print Tim inside of here then I could
70:46 - call this function a bunch of times and
70:48 - every single time I called this function
70:50 - it would do whatever is inside of here
70:52 - which would print Tim so if I had you
70:54 - know print Tim twice every single time I
70:56 - call the function it's going to print
70:57 - out Tim two times whatever's indented
71:00 - inside of here just happens when you
71:01 - call the function pretty straightforward
71:03 - but the point of me creating these two
71:05 - functions is that rather than writing
71:07 - all of the code related to The View mode
71:08 - and the ad mode in the while loop I'm
71:10 - going to put them in this function so
71:11 - it's a little bit more organized and
71:12 - easier for me to kind of separate my
71:14 - program so I'm just going to have pass
71:16 - inside of here right now now pass is a
71:18 - keyword that literally does nothing it
71:20 - is just there to make it so you don't
71:22 - get any like indentation error
71:24 - because you need to have something
71:25 - indented after the and so for now
71:27 - we're just going to write pass and you
71:28 - can see we've done that here too so now
71:30 - instead of just using pass I'm going to
71:32 - call the view function I'm going to call
71:35 - the ad function so now depending on what
71:37 - mode you select it's going to call these
71:39 - two functions which will then perform
71:40 - the operations for that mode it's just a
71:43 - cleaner way to write the code it makes
71:44 - it a little bit more organized okay so
71:46 - let's start with the uh the ad function
71:49 - what I want to do is create a new file
71:51 - if the file storing our password is
71:53 - doesn't doesn't already exist and add
71:55 - the password into it so the first thing
71:57 - I need to do is get the user account or
71:59 - whatever the username and then the
72:01 - password and then I want to add it into
72:02 - the file so I'm going to say uh I guess
72:05 - name is equal to input and we'll say
72:09 - account name like that and then we'll
72:12 - say PWD which stands for password is
72:14 - equal to and actually sorry this should
72:15 - just say password because we already
72:17 - have PWD up here and in fact let's call
72:20 - this master PWD and then we can call
72:23 - this PWD so PWD is equal to input and
72:26 - we'll say password colon like that so
72:30 - now they're inputting their account name
72:31 - and their password now what I want to do
72:33 - is open a file or create a file if it
72:35 - doesn't already exist and add this
72:36 - password in so I'll explain what this is
72:38 - doing in a second but I'm going to say
72:40 - with open the name of my file which in
72:42 - this case is going to be uh passwords do
72:45 - txt we're going to just use a text file
72:47 - for now then we're going to say comma
72:49 - and then we need to define the mode to
72:51 - open this file with now the mode we're
72:52 - going to use is a which stands for
72:54 - append we're going to say as F and now
72:56 - I'll explain what I just did so when you
72:58 - use this wi thing right here this allows
73:01 - you to then do some things indented
73:03 - after it and the point of this width
73:05 - when you're opening a file specifically
73:06 - is that as soon as you are done doing
73:08 - all of the operations with the file
73:10 - since we use this width it will
73:12 - automatically close the file for us so
73:14 - you can open a file like this you can
73:16 - say file equals open and there you go
73:19 - now you have file but the thing is if
73:20 - you do this you need to make sure you
73:22 - manually close the file after you open
73:24 - it because if you don't do that your
73:26 - python process will still be kind of
73:27 - like holding on to and using this file
73:30 - and it's going to cause problems if you
73:31 - try to open this file somewhere else and
73:33 - so it's just better and safer to kind of
73:35 - use this with keyword because now you
73:37 - don't have to manually close it it will
73:38 - automatically close the file for you so
73:41 - anyways I'm going to say with open
73:42 - password.txt in a mode now so this is
73:45 - the name of the file the next thing is
73:46 - the mode to open the file in now there's
73:49 - a bunch of different modes the main ones
73:50 - are w r and a now w means write and what
73:55 - this will do is create a new file or
73:57 - override this file if it already exists
74:00 - very important you understand this if
74:01 - password.txt already exists and you open
74:04 - in W mode it will clear that file and
74:06 - make an entirely new one so only use W
74:08 - mode if you want to always override a
74:10 - file that potentially already exists
74:12 - okay then there's R mode this is just
74:14 - simply read mode you can't write
74:15 - anything into the file if you open it
74:17 - and read mode all you can do is just
74:18 - read the file that's our mode and
74:21 - obviously this is not going to destroy a
74:22 - file if it already exists in fact
74:24 - there'll be a problem if you try to open
74:25 - the file and it doesn't exist in R mode
74:28 - then you have a mode this is a pend mode
74:30 - this is probably the most flexible mode
74:32 - what this allows you to do is add
74:33 - something to the end of an existing file
74:36 - and create a new file if that file does
74:39 - not exist so if password.txt does not
74:41 - exist a new file will be created called
74:43 - password.txt and then we can write to
74:46 - the file if password.txt already exists
74:49 - we are able to write to the file and
74:51 - read the file from the very end uh so
74:54 - sorry we can write to the file from the
74:55 - very end and we can just read the entire
74:57 - file when we open it in a mode and so
74:59 - for adding something we're going to open
75:01 - an AE because if it exists we append to
75:03 - the end if it doesn't we create it
75:06 - awesome so now what we're going to do is
75:07 - say f. write that's the name of our file
75:10 - because we said as F and then we are
75:12 - going to write in the name plus the pipe
75:16 - plus PWD so what this is going to do is
75:19 - take the name it's going to separate uh
75:21 - the password with the pipe oper Ator and
75:23 - then it's going to put the password and
75:25 - then we will have user and password
75:27 - inside of the file so let's actually try
75:29 - this out let me run this you can see it
75:32 - says what is the master password I just
75:34 - type whatever for now just type hello
75:36 - and would you like to add a new password
75:38 - or view existing ones view comma add
75:40 - press Q to quit Okay I'm going to type
75:42 - add and this says account name let's
75:44 - just go Tim password let's go isore
75:48 - great okay so now I'm just going to quit
75:50 - notice this password.txt file has been
75:52 - created if I open it I now have Tim and
75:54 - is great and if I were to do this again
75:56 - it would add the next line in so
75:58 - actually let me rerun this let me say
76:01 - add account name uh Joe password is
76:04 - Billy and then notice it gets added in
76:07 - here the thing is though it got added on
76:09 - the same line and I don't want this to
76:11 - be added in the same line and so what
76:13 - I'm going to do is I'm going to quit
76:14 - here and I'm going to make it so that I
76:16 - go to the next line after I add each
76:18 - password and the way I do that is I add
76:20 - what's known as a line break uh I think
76:22 - this is actually called the carriage
76:23 - return maybe a line break at the end of
76:26 - the line so every single time I add a
76:27 - line I tack on this little invisible
76:29 - character back sln this won't actually
76:31 - appear on the line you won't see this on
76:33 - the line uh but we will add that on and
76:36 - what that tells the text editor to do is
76:38 - to go to the next line so now the next
76:40 - time we write something in it will be on
76:42 - the next line so if I look at this um
76:45 - and and we run this now
76:47 - add Tim a and
76:50 - 5432 and now if you look here it goes to
76:53 - the next line okay so hopefully that
76:56 - makes sense but uh there you go I'm just
76:57 - going to delete everything in that file
76:59 - I'm going to quit this and now we are
77:00 - able to add uh passwords and usernames
77:03 - into the file what I'm going to do now
77:05 - is make it so that we can view all of
77:07 - the passwords so to view all of the
77:08 - passwords I need to again open this file
77:10 - so I'm going to copy this I'm going to
77:12 - say with open and then this is going to
77:15 - be password. txta as F I'm going to
77:18 - change this from a to be R because I
77:21 - don't want to potentially create a new
77:22 - file or anything like that I just want
77:23 - to read the existing file and then what
77:25 - I'm going to do is I'm going to Loop
77:27 - through the lines of the file and just
77:28 - print them out so I'm going to say four
77:31 - line in F I'm going to say read and
77:34 - actually read lines is what I want to do
77:36 - now what read lines is going to do is
77:38 - just exactly what it says it's going to
77:40 - take the file sorry this should be F
77:42 - it's going to read all of the lines for
77:43 - it and then what I can do is use a for
77:45 - Loop to get all of the lines of the file
77:47 - so let's just look at this I'm going to
77:48 - say
77:49 - print line and let's just see what
77:52 - happens now if we go to to view mode and
77:53 - then I'll kind of walk through this more
77:55 - so let's
77:56 - run uh master password doesn't matter
77:58 - let's say View and then oh there's
78:01 - nothing in the file so it didn't show us
78:03 - anything okay so let's go add uh account
78:05 - name let's go Tim password test and now
78:09 - let's say View and then notice it shows
78:11 - us Tim and test but it's printing a new
78:15 - line after it shows us this account name
78:17 - and this password and so I'm going to
78:19 - show you how we can kind of fix this now
78:21 - so the thing is remember how I told you
78:24 - we're adding this kind of invisible back
78:25 - sln the carriage return now when we read
78:28 - the file we actually read in that
78:30 - carriage return and so we need to strip
78:32 - this carriage return from our line and
78:35 - the way we do that is we use this thing
78:36 - called R strip now what R strip will do
78:39 - is it will strip off the carriage return
78:41 - from our line so that's all you have to
78:44 - know just our strip that's what it will
78:45 - do there's also something called strip
78:47 - and strip will strip off the carriage
78:49 - return as well but R strip is like more
78:50 - specifically exactly for this so what
78:53 - I'm going to do now is run the file or
78:55 - run the program master password doesn't
78:57 - matter I'm going to say View and now
79:00 - notice that is not printing that new
79:02 - line after we print this line uh because
79:04 - we stripped off the character return
79:07 - great so now the thing is though I'm
79:08 - printing Tim pipe test I kind of want to
79:11 - figure out or separate the username from
79:14 - the password so how are we going to do
79:15 - that well I'm going to say that my data
79:19 - is equal to line. rstrip and then I'm
79:21 - actually going to split lit this data so
79:24 - I'm going to say my user and pass is
79:29 - equal to and sorry this should be pass W
79:31 - is equal to data
79:35 - dosit at and this is going to be a pipe
79:37 - operator now this might seem really
79:38 - confusing uh because again this is a
79:39 - beginner project I know a lot of you
79:41 - guys haven't seen this syntax before
79:43 - what split will do is it will take a
79:45 - string it will look for this character
79:48 - right here and it will split the string
79:50 - into a bunch of different items uh every
79:52 - single time one of these characters is
79:54 - found so if you had like hello pipe Tim
79:57 - pipe yes Pipe 2 whatever what would
80:00 - happen is this uh data dos spit would
80:03 - actually return to you the following it
80:05 - would return to you a list that says
80:07 - hello Tim yes and two so it remove all
80:11 - of these pipe characters and it would
80:13 - give you all of the unique strings that
80:14 - are between these pipe characters in a
80:17 - list format and so to access these
80:19 - different elements you would use index
80:20 - zero 1 2 3 so on and so forth now the
80:23 - thing is we know we're only ever going
80:25 - to have one pipe operator right unless
80:28 - the uh the password or the username
80:30 - contains a pipe operator we're just
80:32 - going to assume that it doesn't contain
80:33 - a pipe Operator just to make our life a
80:35 - little bit easier if it did contain a
80:36 - pipe operator there'd be some more steps
80:38 - we have to do I'm not going to do them
80:39 - for right now anyways we know we're only
80:42 - going to have one pipe operator which
80:44 - means the list that's going to be
80:45 - returned to us will only have two
80:47 - elements in it in fact it will always
80:49 - have two elements in it so what that
80:50 - means is that we can actually just grab
80:52 - both of those two elements by saying
80:54 - user comma pass W so when you do
80:57 - something like user comma pass W this
81:00 - assigns the first element in the list to
81:02 - user and the second element in the list
81:04 - to pass W and since we know our list
81:06 - always has two elements that means we
81:07 - can do this right whereas if we had
81:09 - three elements we would then have to add
81:10 - another variable right and then X would
81:13 - be assigned to X hopefully that makes
81:15 - sense but that's why we can do what
81:16 - we're doing and that's kind of what the
81:18 - split operator does so now what I'm
81:20 - going to do is I'm going to print out
81:23 - user colon comma user and then password
81:28 - Cola comma password or passw right so
81:31 - now it'll look a little bit nicer so
81:33 - let's go ahead and try this I'm going to
81:35 - quit this program I'm going to rerun it
81:38 - it's going to say what is the master
81:39 - password say test I'm going to view so
81:42 - now when I view it says user Tim
81:44 - password test and I think I should do
81:46 - like a separator between the user and
81:47 - the password and so what I'm going to do
81:49 - is just add a comma like that
81:53 - okay so now if we run this let's quit
81:55 - let's rerun master password test would
81:58 - you like to add a new password I'm going
81:59 - to
82:00 - say view it says user Tim comma password
82:04 - test and there you go and we could
82:05 - actually even split this up with a pipe
82:07 - operator I think that will look cleaner
82:09 - I'm not going to run it now but we'll do
82:10 - with the pipe sweet so now we're able to
82:13 - add passwords and we're able to view
82:15 - them but the problem is I can just look
82:16 - at this file and I can see what the
82:18 - password is and well that's not very
82:19 - good we don't really want to do that so
82:21 - we need to encrypt these passwords all
82:23 - right so how do we encrypt a password
82:25 - well this is where gets a little bit
82:26 - more difficult that's why I've kind of
82:27 - waited until this point to do the
82:29 - encryption so you guys could at least
82:30 - follow along with this part see how to
82:32 - write to files read from files all that
82:33 - kind of stuff there uh so the way that
82:36 - you encrypt a password we could write a
82:38 - manual encryption algorithm but I'm not
82:39 - going to do that that's a bit beyond the
82:41 - scope of this tutorial is we use a
82:43 - module by someone way smarter than all
82:44 - of us who knows how to do encryption and
82:47 - the way that we use this module is we
82:49 - need to install it so remember at the
82:50 - beginning of the video I was telling you
82:51 - when we imported random that hey we
82:53 - there's also other modules that are
82:55 - built by random people right uh that we
82:57 - can use but the thing is we have to
82:59 - install them because they're not by defa
83:00 - installed with python so this is where a
83:03 - lot of you are probably going to have
83:04 - problems if you haven't done this before
83:05 - but open up your terminal or your
83:07 - command prompt depending on your
83:08 - operating system doesn't matter which
83:09 - one and just type pip install and then
83:13 - type
83:15 - cryptography if I can spell it like that
83:18 - pip install cryptography just press
83:20 - enter and pray that this works
83:23 - now if this doesn't work for you don't
83:24 - worry I'm going to show you how to fix
83:25 - this uh but for some of you that should
83:27 - have worked if that works for you you're
83:28 - good you can kind of skip probably the
83:30 - next minute of this video because I'm
83:31 - just going to explain how to fix this if
83:33 - this doesn't work for you try the
83:34 - following command Okay pip three install
83:37 - cryptography pip 3 install cryptography
83:39 - press enter see if that works if that
83:42 - doesn't work for you try python hyphen M
83:45 - pip install cryptography if that doesn't
83:48 - work for you try Python 3 hyphen M pip
83:51 - install cryptography if none of those
83:53 - work for you this means that pip is not
83:55 - installed on your system pip is uh
83:57 - actually a recursive acronym that stands
83:59 - for pip installs packages and well what
84:02 - it does is it installs packages for you
84:05 - and by default when you install python
84:06 - it's not included in the installation I
84:08 - don't know why they don't just include
84:09 - it by default you have to like check a
84:10 - little box to say to install it so you
84:12 - could just reinstall Python and check
84:14 - that box that says uh fix pip or you can
84:16 - follow the two videos that I have that
84:18 - are linked in the description one for
84:20 - Mac one for Windows showing you how to
84:22 - fix this command now they're not
84:23 - directly called like how to fix pip they
84:25 - show you how to install a module called
84:26 - pygame but when it comes to installing
84:28 - the pame thing just instead of doing
84:30 - pame do uh do cryptography okay so you
84:33 - need to install this cryptography
84:35 - cryptography module sorry once you have
84:37 - that installed we're good to go if you
84:39 - know what a python interpreter is and
84:41 - you have multiple on your system this is
84:42 - going to be a bit more complicated you
84:44 - need to make sure you're using the right
84:45 - python interpreter when you're running
84:47 - your code the one that you install
84:49 - cryptography into okay so at this point
84:51 - in time I'm going to assume you've
84:53 - successfully installed cryptography uh
84:55 - once you've done that what you need to
84:56 - do is import it so you're going to say
84:58 - from and then cryptography like that dot
85:02 - and you're going to uh type this thing
85:04 - called furnit uh yeah furnit like that
85:07 - and then you're going to import F now
85:10 - I'm looking at a cheat sheet I have
85:11 - because this is not something I do very
85:12 - often so I don't have this memorized uh
85:14 - but this is a module that is going to
85:16 - allow you to encrypt text essentially
85:20 - now the first thing that we need to do
85:21 - when we use this is we need to Define
85:23 - what's known as a key so essentially
85:25 - what this is going to do for you and I'm
85:26 - not going to talk about it too much is
85:28 - it is going to um take a string of text
85:31 - and using a key turn it into a
85:33 - completely kind of random string of text
85:35 - that you cannot get back to the original
85:37 - text from without knowing the key now
85:40 - this key is something that we're going
85:42 - to combine with our master password so
85:45 - imagine you have this key okay and then
85:46 - we have our password so the key plus
85:50 - this password is what we're going to use
85:52 - to encrypt our text now that means that
85:55 - if you type in the wrong password when
85:56 - you go to decrypt the text what's going
85:59 - to happen is you're going to get
85:59 - something that makes no sense it's not
86:01 - going to be the original text because
86:03 - you need the key plus the password to be
86:05 - able to get back to the original text so
86:08 - it's kind of key plus password plus you
86:10 - know text to encrypt and then that
86:15 - equals like random text okay and then
86:18 - you have random text plus key plus
86:21 - password
86:23 - equals and then text to encrypt now this
86:26 - is obviously like a vast simplification
86:28 - of what's going on here uh but that's
86:30 - kind of what we're going to do with this
86:32 - module so the master password in
86:33 - combination with the key that we're
86:34 - going to store will be able to encrypt
86:37 - and decrypt our text if you type in the
86:39 - wrong master password you will have a
86:41 - wrong decrypted text okay so what we
86:44 - need to do is write two functions one
86:46 - function that can create a key for us
86:48 - and one function that can store a key so
86:50 - I'm or sorry retrieve a key so I'm going
86:51 - to say Define wror key and I'm just
86:56 - copying this from my sheet over here
86:57 - that I have on my other monitor I'm
86:59 - going to say key is equal to fernet Dot
87:02 - and then generatore key I'm then going
87:04 - to say with open and I'm going to say
87:07 - key. key this is a key file uh and then
87:10 - WB this stands for write bytes mode as
87:14 - key file and then I'm going to say key
87:18 - file. write key okay so what this is
87:22 - doing is going to open a file it's going
87:24 - to create this file called key. key in
87:27 - WB mode which means write in bytes you
87:29 - don't really have to know what that
87:30 - means it's just a special file format
87:32 - and then you press as key file and or
87:35 - sorry as key file and then key file. WR
87:38 - and you're going to write in this key
87:39 - that was generated by this thing called
87:40 - fnet okay that's what we're using up
87:42 - here that we've imported so you're going
87:44 - to write or sorry you're going to run
87:46 - this function one time and when you run
87:48 - this function one time it's going to
87:49 - create this key file for you so let me
87:51 - show you when I just call right key
87:54 - here uh after I input the master
87:57 - password it will then create this so
87:59 - let's run this and just type some random
88:02 - thing and then notice here we get this
88:04 - key file okay and inside of here you
88:06 - have this key boom good now remove the
88:09 - call the right key you can keep this
88:12 - function in if you want but you don't
88:13 - need it anymore because you already have
88:14 - the key uh and so what I'm going to do
88:16 - is I'm going to comment it out so to do
88:18 - a multi-line comment in Python you use
88:20 - three uh quotation marks single or
88:22 - double just make sure they the same on
88:23 - both side uh you do three at the start
88:25 - of the comment three at the end and so
88:26 - now I've commented out this function to
88:28 - make sure I don't use it again because
88:29 - if I use it again uh it's going to be a
88:31 - problem okay now that we've done that we
88:33 - need a function to load this key so in a
88:36 - similar way actually I'm just going to
88:37 - copy this I'm going to change this now
88:39 - to be load
88:41 - key like that and actually I probably
88:45 - shouldn't have copied that I'm just
88:46 - going to say return open and then this
88:49 - is going to be key dokey
88:53 - and then do read and the mode is going
88:56 - to be RB mode now the thing is I need to
88:59 - take this here I need to say file is
89:02 - equal to open I'm then going to say
89:05 - file. read I'm going to store this in uh
89:09 - key and then I'm going to say file.
89:12 - close just to remind you that you got to
89:14 - close your file every time you open it
89:16 - okay so I'm opening the file in WR or
89:19 - sorry read/ bytes mode so it's reading
89:22 - I'm then going to read the file I'm then
89:24 - closing the file and then I'm returning
89:25 - the key again you don't really have to
89:27 - understand exactly how this is working
89:28 - this is just part of the decryption
89:30 - stuff okay so now we have the key so now
89:33 - that we have the key what we're going to
89:34 - do at the top of our program here is
89:36 - we're going to load it we're going to
89:37 - say key is equal to load uncore key
89:39 - which means this function needs to go
89:41 - above where I'm calling so this is
89:44 - another interesting thing let me copy
89:46 - this right key as well and put it up
89:48 - here whenever you want to use a function
89:50 - it needs to be defined before you use it
89:52 - so I couldn't have this function defined
89:54 - below this line if I did that that would
89:57 - mean that uh I wouldn't be able to use
89:59 - this function because it wasn't yet
90:00 - created when I tried to use it so I got
90:02 - to create it first then I can use it
90:04 - obviously okay so now that we have that
90:07 - what I'm going to say is uh fur is equal
90:10 - to fernet I'm going to pass key now this
90:14 - is just initializing this kind of
90:16 - encryption module so you're writing
90:17 - fernet you're going to pass it the key
90:20 - okay so actually I'm realizing I made a
90:21 - mistake here I just got to take this
90:23 - stuff and I got to put this below the
90:24 - master password so I'm going to say uh
90:26 - master password then key equals load key
90:28 - fur equals fet key but then I'm going to
90:30 - change my key to be key is equal to load
90:33 - key plus the master password two bytes
90:37 - now you probably don't know what this
90:39 - means uh bytes is kind of a different
90:42 - way of storing information you've
90:43 - probably heard of bits and btes before
90:45 - not the snack but like in terms of uh in
90:47 - terms of computing right you have bit
90:49 - and then you have bytes and well
90:51 - regardless we have our key in bytes and
90:53 - so we need to convert our master
90:54 - password into bytes so that uh this
90:57 - works that we can add this together now
90:59 - just like when you add two strings
91:00 - together that's exactly what's happening
91:01 - here we're taking the key which is in
91:03 - this file and we're just adding uh this
91:05 - master password in its bytes format to
91:07 - this key and then using that as the
91:09 - actual key okay hopefully that's clear
91:12 - that's like a lot of the hard stuff now
91:14 - encrypting stuff is really easy so what
91:15 - I'm going to do now is when I go ahead
91:18 - and write my password I'm going to first
91:20 - convert this password
91:22 - into its encrypted version so I'm going
91:24 - to say uh F Dot and then encrypt and I'm
91:27 - just going to surround my password with
91:29 - that but first I need to encode my
91:33 - password now the reason I need to encode
91:34 - this is because encoding my password
91:36 - will convert this into bytes and
91:38 - actually I'm realizing here that this is
91:41 - going to be better I'm going to say
91:42 - master password. encode rather than
91:45 - bytes again all encode does is it takes
91:47 - your string turns it into bytes and so
91:49 - same thing here I'm taking my password
91:51 - I'm turning it into bytes with Dot and
91:53 - code and then I'm encrypting it and I'm
91:55 - going to store that uh beside the name
91:58 - and I also realize that now I need to
92:00 - convert this to a string so I'm going to
92:02 - say string fur. encrypt PWD do incode
92:06 - and this will now uh encrypt and encode
92:09 - our password okay so now when we store
92:12 - these passwords they should be stored in
92:14 - an encrypted format so now the thing is
92:16 - we need to decrypt them when we show
92:17 - them so to do that is going to be
92:19 - literally the exact same thing we just
92:20 - had here so I'm going to copy this
92:22 - except instead of encrypt it's going to
92:24 - be decrypt okay so we're going to say
92:26 - decrypt like that and then instead of
92:28 - PWD this is going to be uh pass W okay
92:34 - so I'm hoping this is going to work I
92:35 - have a feeling it's not I think I made a
92:36 - small mistake here but we'll we'll worry
92:38 - about that when we get to it okay so now
92:40 - we should hopefully be storing encrypted
92:42 - information and reading non-encrypted
92:44 - information so let me go in passwords
92:45 - and let me delete this because that is
92:47 - not encrypted and so that's going to
92:48 - give us a problem right now and let's go
92:51 - here and let me rerun this app okay what
92:54 - is the master password we now need to
92:55 - pick the master password that we want to
92:57 - use to encrypt our data so I'm just
92:58 - going to make mine Tim make your
93:00 - whatever you want would you like to add
93:01 - a new password yes want to add account
93:04 - name we're going to say maybe just like
93:06 - Facebook password we'll say Tim is great
93:10 - okay would you like to add new password
93:11 - or view an existing one I'm going to say
93:13 - View and then we get a problem it says
93:15 - invalid token okay so let me have a look
93:17 - here and see what's wrong but if we go
93:19 - to password.txt you can see that we are
93:22 - storing this in the file and now I've
93:24 - actually already determined what's wrong
93:26 - but uh let me just collect my thoughts
93:27 - and I'll be right back so I've realized
93:29 - the problem here and it is that we are
93:31 - writing in this B uh what is it I guess
93:34 - this is a quotation mark and then
93:36 - another quotation mark here and we can't
93:38 - be doing that so I'm actually going to
93:40 - clear this file so the the thing here in
93:42 - Python and this is I guess I can teach
93:43 - you about byes now when you write a b
93:46 - and then you have uh something after
93:47 - this like I say B and then hello this is
93:50 - a b string this is different than the
93:53 - string hello when you have this little b
93:54 - before this means btes so the thing is
93:56 - we were writing in this little b and we
93:58 - don't want to do that because when we do
94:00 - that that means when we try to decrypt
94:01 - this it's all wrong because we have this
94:03 - B and this quotation mark and well just
94:05 - incorrect we can't be writing that into
94:06 - the file and so what I did before is you
94:08 - saw I had a string surrounding this in
94:12 - our ad file we can't have that instead
94:14 - of having a string we need to decode
94:17 - this so I forgot that we have this thing
94:19 - called decode it's the opposite of
94:20 - incode it's going to take bytes string
94:22 - and decode it to a regular string so now
94:24 - if we decode this all should be good and
94:27 - same thing here I had a what do you call
94:30 - it string like that and that's no good I
94:34 - couldn't do that instead I just have to
94:36 - have fur. decrypt and then pass w. and
94:38 - code so I'm going to take the string in
94:40 - because I'm writing in a string that's
94:42 - not bytes it's just a string and then
94:44 - what I'm going to do is convert that
94:46 - string into bytes and then decode that
94:48 - by string and then that should work so
94:50 - now let's see if this work works I'm
94:51 - going to rerun the program apologize
94:54 - about that mistake I'm going to say what
94:55 - is master password we're going to go Tim
94:57 - would you like to add I'm going to say
94:58 - add account name let's just go Joe
95:01 - password 1 2 3 4 5 6 7 okay now I'm
95:04 - going to say view when I say view it
95:06 - gives me uh user Joe password B and then
95:09 - 1 2 3 4 5 6 7 so it's showing me this
95:11 - bytes thing if I want to remove this
95:12 - bytes thing I need to decode this so I'm
95:15 - going to decode like that and now if I
95:17 - quit here and I rerun and I type in the
95:20 - master password which is him and I press
95:23 - view or type view uh non- type object
95:25 - has no attribute
95:27 - decode um hm okay what is the problem
95:29 - here I was printing out this oh sorry
95:32 - guys I added the dcode at the end of the
95:34 - print statement not at the end of this
95:36 - fur thing so I had it like after this
95:39 - bracket it needs to be after this second
95:41 - closing bracket so let me rerun this let
95:44 - me type in Tim let me type in View and
95:47 - now notice it gives me the correct
95:48 - password 1 2 3 4 5 6 7 however if I I go
95:51 - to password.txt you can't see the
95:54 - correct password right it's storing this
95:55 - like random string of gibberish that
95:57 - really like means absolutely nothing and
95:59 - so if I actually quit this let me just
96:01 - clear the screen and rerun uh let's go
96:03 - to password manager let's go to run and
96:05 - I type in the incorrect password I'll
96:07 - just type Tim 2 and I type view notice
96:10 - it still gives me the correct password
96:12 - okay it's interesting that that's giving
96:14 - me the correct password shouldn't be
96:15 - giving me the correct password so let me
96:18 - look at this for a second okay so I'm
96:19 - going to apologize here because I've
96:20 - made a mistake I thought that we were
96:22 - going to be able to use a master
96:23 - password in combination with our key and
96:25 - just do some kind of like hackish
96:27 - manipulation to get this to work
96:29 - unfortunately it looks like doing that's
96:31 - way more complicated than I thought I
96:32 - just was looking on the internet right
96:34 - now in fact I'll bring up the
96:35 - documentation that I found um so we're
96:37 - using this thing called feret right and
96:39 - there's a way to use passwords with
96:40 - feret but I mean you guys can kind of
96:42 - read this here it's a little bit
96:43 - complicated and I don't really want to
96:44 - put you guys through all of this because
96:46 - this is just a beginner project so I
96:48 - will leave a link to this documentation
96:49 - in the description if you'd like to have
96:51 - a look at how to do this but for now I
96:53 - think I'm going to end the video here so
96:55 - I'm just going to remove this master
96:56 - password feature obviously that's pretty
96:59 - important right like you would want to
97:00 - have a master password so I really do
97:02 - apologize about that but if you do this
97:04 - now and you just use the key as you used
97:08 - it before um everything will still work
97:10 - so right now if you run the program and
97:12 - and I'll show you and we don't have a
97:13 - master pass says would you like to add a
97:14 - password to view I type view it gives me
97:17 - the correct passwords right even though
97:18 - we use technically a different key that
97:20 - had the addition of our master password
97:22 - to kind of encrypt them previously this
97:24 - still works so anyways that is where I'm
97:27 - going to leave it again I'll leave a
97:28 - link to that documentation that shows
97:30 - you how to implement the master password
97:31 - in the description just too complicated
97:33 - for me to feel comfortable going through
97:35 - it in this kind of beginner tutorial so
97:37 - we want to build Pig now first we need
97:38 - to understand what this project is so
97:40 - how does pig work well it is a
97:42 - multiplayer game first of all everyone
97:44 - plays a little bit different but the way
97:45 - that I play is that you essentially get
97:47 - a turn so it comes your turn and you get
97:49 - to roll to die when you're will to die
97:51 - you're going to get some number from 1
97:52 - to six if you get anything other than
97:54 - one you take that and you add that to
97:56 - the score of your turn so let's say you
97:58 - get a five now you're at five roll it
97:59 - again you get another five you're at 10
98:01 - and you can decide how many times you
98:03 - want to roll the dice now the catch is
98:05 - as soon as you hit a one whatever you
98:07 - got on your roll is going to be done
98:09 - whatever you got on your turn is is zero
98:11 - like you completely remove the score so
98:13 - you can roll five times three times four
98:15 - times 10 times 20 times as much as you
98:17 - want but every additional roll you're
98:19 - gambling the possibility of Los losing
98:21 - your score so you need to decide when
98:23 - you want to stop as soon as you stop
98:25 - whatever your current score is assuming
98:27 - it's not zero is going to get added to
98:28 - your total score and then you can
98:30 - determine the number of total roles you
98:32 - want to have or it's whoever reaches
98:33 - like 100 first or 50 first whatever you
98:36 - want to do and our case we'll say like
98:38 - the max score is something like 50
98:39 - whoever hits 50 First is just the winner
98:41 - of the game okay so how we going to
98:43 - build this up well let's break down the
98:45 - individual things that we need to do
98:47 - first we need to allow the user to roll
98:49 - the dice this means we need to come up
98:51 - with a way to roll so we have to have
98:52 - some random number generator giving us a
98:54 - number between one and six we then need
98:57 - to ask the user if they want to continue
98:58 - to roll so either roll again or stop
99:01 - their turn if they stop their turn we
99:02 - need to take whatever their score is and
99:04 - add that to some total score then we
99:07 - need to constantly check if either
99:08 - player has a score that is above 50 if
99:12 - it is above 50 then we need to end the
99:13 - game and tell someone that they want
99:15 - there's a few other things that are
99:16 - involved but those are the basic steps
99:18 - let's start by generating a random
99:20 - number
99:21 - so what I'm going to do is import the
99:24 - random uh module now random allows you
99:27 - to Generate random numbers what I'm
99:29 - going to do is just Define a rule
99:32 - function now a function in Python is a
99:34 - reusable block of code you make it using
99:37 - defa standing for Define you then put
99:39 - the name of the function and then a set
99:41 - of parenthesis we're then going to put
99:42 - it inside of here uh in an indented
99:44 - block after a colon so notice I'm kind
99:46 - of one tab over any code we want to run
99:49 - whenever we call the function so what
99:51 - I'll do here is I'll say Min or Min
99:56 - value is equal to one max value is equal
100:00 - to six and then I'm going to roll the
100:02 - die in between them now there's a few
100:04 - different ways to do this with the
100:05 - random module but I believe we can say
100:08 - roll is equal to and then this is going
100:10 - to be random. Rand and then int like
100:14 - that and then this is going to be the
100:16 - Min
100:18 - value and the maximum value of our die
100:22 - then we're simply going to return roll
100:24 - now the way the return keyword works is
100:26 - it's going to give whoever called the
100:28 - function this value kind of back it's
100:30 - going to return it to them so if I come
100:32 - down here and I say value is equal to
100:36 - roll the way I call the function is I
100:38 - use my set of parentheses and then I can
100:40 - simply print out the value here and
100:43 - you'll see that if I bring my terminal
100:44 - up and we run the code we get the value
100:47 - three we can run it again we're getting
100:49 - 6 3 6 5 5 five 2 let's see if we can get
100:53 - a
100:54 - one okay it looks like it really doesn't
100:56 - want to give us a one this would have
100:57 - been a fantastic turn okay and there you
101:00 - go we got a one so that would have ended
101:01 - our turn all right there you go that is
101:04 - how we generate a random roll okay so
101:07 - now that we have that we want to kind of
101:09 - set up the game and we might Begin by
101:11 - asking how many players are going to be
101:13 - participating and then we can keep track
101:15 - of all the different players maybe we
101:16 - set it to say a maximum of four or
101:19 - something like that so let's go down
101:21 - here I'm just going to zoom out a little
101:22 - bit and let's set up a wall Loop while
101:25 - we say actually not wall loop we're
101:27 - going to say input so we'll say players
101:31 - is equal to input and we're going to say
101:33 - enter the
101:36 - number of players and we'll say kind of
101:41 - one to four like that and then notice
101:43 - I'm putting a space here at the end just
101:45 - so we have a little bit of padding
101:46 - between where the user is going to give
101:48 - us the answer so the idea is we're going
101:50 - to ask the user okay give us some value
101:51 - between 1 to four then what we need to
101:53 - do is we need to check if this is a
101:55 - valid number so I'm actually going to
101:57 - kind of put a while loop here and I'm
101:59 - going to say while true and then I'm
102:01 - going to put this inside the reason for
102:03 - this is I want to continue to ask the
102:04 - user to input a number until they give
102:07 - me one that's valid so I say while true
102:09 - and then I'm going to break out if they
102:10 - give me a valid number so I'm going to
102:12 - say try or actually we can do the
102:16 - following we can say if players
102:19 - Dot is digit now is digit is going to
102:23 - tell us if this is a digit or not so if
102:25 - it's a number if it's a valid whole
102:26 - number specifically is what it will give
102:28 - us so I'm going to say if players is
102:29 - digit I'm going to say players is equal
102:32 - to int and then players now what this
102:35 - does is convert what's going to be a
102:36 - string here into an integer and the
102:39 - reason I need to check if it's a number
102:40 - first is because if I try to convert a
102:42 - string into an integer and it's not a
102:44 - valid integer it's going to give me an
102:46 - error so I don't want to crash the
102:47 - program so I'm saying okay if this is
102:49 - actually a valid number let's convert
102:50 - convert it into that number the reason I
102:52 - need to do that is I now need to check
102:54 - if this number is greater than one and
102:56 - less than four if it is I can then break
102:58 - out of this wall Loop because I have a
103:00 - valid number of players otherwise I need
103:02 - to continue to keep asking them to enter
103:04 - a valid player so I'm going to say
103:07 - if 1 less than or equal to players less
103:11 - than or equal to four okay then I will
103:15 - simply break what the break keyword will
103:17 - do is immediately exit outside of this
103:19 - wall Loop meaning we'll have access to
103:21 - the players variable down here and we
103:23 - can just print out what the number of
103:24 - players is if we don't encounter this
103:27 - break keyword we will continue to ask
103:28 - the user until they give us a valid
103:30 - number of players now we could give them
103:32 - some output and say something like
103:36 - print
103:37 - invalid try again and we could do
103:40 - something here where we say something
103:42 - like
103:44 - print must be between one to four
103:48 - players and actually it can be one has
103:51 - to be two right so we'll have two to
103:53 - four like that and we'll put a two and
103:55 - we'll put a two because we need to have
103:57 - at least two players to be able to play
103:58 - the game all right so let's try this out
104:01 - let's run our code enter the number of
104:03 - players let's enter one says we need to
104:05 - do it again okay so it didn't actually
104:07 - print anything out um I don't know why
104:11 - that happened oh sorry it's cuz Okay
104:13 - I'll fix that in one second that's an
104:15 - error anyways we enter two it says must
104:17 - be between two to four players which is
104:18 - a mistake and then two so notice I made
104:20 - a bit of an error CU I put this inside
104:22 - of the if statement when I wanted
104:24 - to put an else statement here and then
104:28 - put this here because if this is valid
104:30 - we break which means we a to the wall
104:31 - Loop otherwise we tell them okay that
104:33 - was the error so we just need to make
104:35 - that quick fix there with the if
104:36 - statement okay in case you're confused
104:38 - by the way if statement checks if
104:40 - something is true if it is we kind of
104:42 - enter in this indented block which
104:43 - happens after the colon otherwise we
104:46 - have this else statement which will
104:47 - trigger if the uh if statement is false
104:49 - okay so I'm going to clear and run and
104:53 - let's go one okay must be between two
104:55 - and four let's go five let's go hello
104:59 - let's go three and we're good to go okay
105:02 - so now we have the number of players and
105:04 - what we want to do is essentially
105:05 - simulate each player turn where we ask
105:07 - them you know do you want to roll the
105:09 - dice yes or no they tell us yes or no
105:10 - they roll and then we start kind of
105:12 - calculating their score so let's do this
105:15 - first of all let's make some variables
105:16 - here and let's say our Max score
105:21 - is equal to and then we can do something
105:24 - like we'll go with maybe yeah let's go
105:26 - with 50 for now we'd probably want to
105:28 - make that larger but just kind of for
105:30 - the sake of time when we're testing this
105:31 - we'll make it small then we want to have
105:34 - our player undor scores and what we'll
105:38 - do for our player scores is we'll just
105:40 - have a list which contains all of the
105:42 - individual scores now we don't know if
105:44 - we're going to have two players three
105:45 - players or four players so we're going
105:46 - to have this list kind of change size
105:48 - based on the number of players that we
105:50 - have now the way that we can kind of
105:52 - create or initialize this list based on
105:54 - the number of players is we can say 0
105:57 - 4ore in and then something like this in
106:03 - range the
106:05 - Len of players now what this is is
106:08 - actually a uh list comprehension I was
106:11 - thinking of the name there what this
106:13 - does is it essentially puts a zero
106:15 - inside of the list for every single
106:17 - player that we have so what I'm doing is
106:19 - saying for underscore now I could put I
106:22 - here but the thing is I don't actually
106:23 - care about what the variable is I just
106:25 - want to do this the number of player
106:27 - times so I can put an underscore
106:28 - essentially saying hey I don't really
106:30 - care what the variable is so like you
106:31 - know we need to have something there but
106:33 - I'm just going to put an underscore
106:34 - because I don't really want to use this
106:36 - and then I'm going to say in range the
106:38 - line of players so what this range
106:40 - function will do is Loop the number of
106:42 - players or the length of actually sorry
106:44 - we don't need Len just players here it
106:46 - will Loop the number of players times
106:48 - that we have notice that our players is
106:50 - going to be in int right so if it's
106:51 - three this will happen three times if
106:53 - it's four it will happen four times Etc
106:55 - I ignore the Len that I had there I
106:56 - don't know why I put that there just a
106:58 - silly mistake okay so now we can print
107:01 - out our player scores and you'll see
107:03 - that we'll get an array filled with
107:04 - zeros based on the number of players
107:06 - that we have so if we do three gives us
107:08 - three zeros if we run it again four we
107:10 - get four zeros so now we are able to
107:13 - store each of our players scores inside
107:15 - of this array fantastic okay now we need
107:18 - to go through our player turns so we're
107:20 - essentially going to say while the
107:25 - maximum of our player scores is less
107:28 - than the max score then we'll keep
107:30 - looping now what Max will do is give us
107:32 - the maximum value from this array or
107:35 - from this list so if it's 23 gives us 23
107:38 - if it's 55 gives us that we're saying
107:40 - okay as long as it's less than the
107:41 - maximum score it means no one's reached
107:43 - the max we'll keep going as soon as
107:44 - someone does reach the maximum score we
107:46 - need to stop and then tell uh the user
107:48 - whatever the um sorry tell the players
107:51 - whoever kind of won the game all right
107:54 - how we going to do this uh well let's go
107:57 - here and we will say first of all R
108:02 - we'll say should uncore roll is equal to
108:07 - input and we'll say would you like to
108:11 - roll question mark and we're just going
108:13 - to put here A Y which means we want the
108:16 - user to input the key y so then we can
108:19 - come here we can say if should
108:21 - roll
108:23 - lower is equal to Y the reason I'm
108:26 - converting this to lowercase which is
108:27 - what lower does is because if they enter
108:30 - a capital Y I still want them to roll
108:32 - right so this is just checking is it
108:34 - capital or lowercase doesn't matter
108:35 - we're going to convert it to lowercase
108:37 - and then check if it's equal to the
108:38 - lowercase y if it is then we're going to
108:40 - roll the dice for them so we're going to
108:42 - say roll is equal to and actually I
108:45 - can't use roll because that's the name
108:46 - of my function so I'm going to say value
108:49 - is equal to roll
108:51 - okay otherwise I'm simply going to break
108:54 - and actually a better way to do this
108:56 - that's going to be a little bit cleaner
108:57 - for me is I'm going to say if should
108:59 - roll. lower does not equal
109:02 - y then I will break out otherwise I will
109:06 - say my value is equal to the ru so the
109:08 - reason I'm doing this is because I want
109:10 - to have all my code kind of not indented
109:12 - if I don't have to have it indented so
109:14 - I'm saying okay if you didn't hit Y that
109:16 - means we're just going to stop your turn
109:17 - otherwise we're going to roll the dice
109:18 - now there's a lot more code we're going
109:19 - to need to to write but I'm just kind of
109:21 - going through this um you know as I
109:23 - normally would and then we'll kind of
109:24 - stop and fix things as we need to so
109:26 - we're going to grab that rule and we're
109:27 - going to check if that rule is equal to
109:29 - one if it is equal to one then whatever
109:31 - the player's current score is is just
109:32 - going to become zero and we're going to
109:33 - move to the next person's turn now we
109:35 - still need to simulate the turns and all
109:37 - of that which we'll do in a minute uh
109:38 - but for now just kind of bear with me so
109:40 - we're going to say if
109:42 - value is equal to zero then we can
109:45 - simply say
109:47 - print or sorry not zero we're going to
109:49 - say you roll the one turn done
109:53 - exclamation
109:54 - point otherwise we'll
109:59 - print you rolled a and then whatever the
110:03 - rule is so we can say something like
110:07 - actually
110:10 - value like
110:12 - that okay so let's put a call in you
110:15 - rolled uh and then whatever the value is
110:17 - all right so now that we have this and
110:18 - we're kind of printing out what they
110:19 - rolled I'm I'm just going to go up here
110:21 - and I'm going to Mark the current score
110:23 - equal to zero because we need something
110:24 - to keep track of what the player's score
110:26 - is now if they didn't roll a one then
110:29 - what I'm going to do is I'm going to say
110:30 - the current score plus equals whatever
110:33 - the value of the die was I'm going to
110:35 - tell them what they rolled and then down
110:37 - here I'm just going to
110:40 - print your current or
110:43 - your score is and then we'll print out
110:47 - whatever the current score is and then
110:49 - we'll kind of continue men now here I'm
110:52 - just going to break this because the
110:54 - idea is all right well if you roll a one
110:56 - your turn's done so we're going to break
110:57 - out all right so this kind of simulates
110:59 - one's per one person's turn story but
111:02 - again we haven't really kind of handled
111:04 - uh the fact that we have multiple people
111:06 - going at once and allowing someone's
111:08 - turn to continue multiple times so what
111:10 - we actually need to do is we need to use
111:12 - a for Loop here what we'll do is we'll
111:15 - put a for Loop kind of right here and
111:17 - we'll say
111:18 - four I
111:20 - in range players so I is going to
111:24 - represent the current player so we'll
111:26 - say player uncore index or player idx so
111:31 - player 0 1 2 3 or Player 1 2 3 4
111:34 - whatever you want to call it and in this
111:36 - for Loop we'll then simulate one
111:38 - person's entire turn so we'll mark the
111:40 - current score but then all of the stuff
111:42 - that's going on here needs to happen
111:44 - until the player stops their turn so
111:47 - what we'll do is we'll have a wall Loop
111:49 - and we'll say while true
111:50 - and then we'll put all of this here then
111:53 - outside of the wall loop we're going to
111:55 - say that the player undor scores at
111:59 - index player idx is going to be plus
112:03 - equal to whatever their current score is
112:06 - so like the current score is kind of the
112:08 - score per turn and then the total score
112:11 - is what we're going to be adding to
112:13 - after they finish their turn so what
112:15 - we'll do after we add that is we'll say
112:18 - print your total score is colon and then
112:22 - we will say that this is going to be the
112:24 - player scores at the player idx okay
112:30 - we'll go through this again in one
112:31 - second but for now I we're making a good
112:33 - progress on the terms all right so I'm
112:34 - just reading through this uh it's
112:36 - looking okay however I'm realizing that
112:38 - if the value is one then we're going to
112:40 - have to set the current score equal to
112:42 - zero just so that we make sure we don't
112:44 - add what their score was before they
112:46 - rolled a one all right so let's kind of
112:47 - run through this here we have our for
112:48 - Loop we say four plus player index in
112:50 - range players which means We're looping
112:52 - over all of our different players so
112:53 - they each get a turn we probably want to
112:56 - print out something
112:58 - like player and
113:01 - then let's say player idx +
113:04 - one
113:06 - turn has just started just so they know
113:09 - that it's now their turn and what I'm
113:11 - going to do is print a back
113:13 - sln right here and a back sln what this
113:16 - is going to do is just add a line break
113:18 - so that we have a bit of separation when
113:19 - the player's turn starts so we say okay
113:22 - player and then we're doing plus one
113:23 - because this is going to be 0 1 2 3 well
113:25 - we probably want to show 1 2 3 4 so
113:27 - that's what we're showing so we say
113:28 - player whatever it is turn has just
113:30 - started we could say player number turn
113:32 - has just started okay we said the
113:34 - current score equal to zero for the turn
113:36 - we simulate the turn we ask them if
113:38 - they' like to roll if they say yes or if
113:40 - they don't say yes sorry we break out
113:42 - otherwise we roll if they get a one we
113:45 - say they rolled a one their turn is done
113:47 - their current score is zero we break out
113:49 - otherwise wi we take whatever the
113:50 - current score is and we add to that the
113:52 - value that they ruled because it wasn't
113:53 - a one and then we continue this whole
113:55 - process again so we tell them this is
113:57 - what you rolled and then we say your
113:58 - current score is this which is going to
114:00 - be the sum of what they rolled plus you
114:02 - know what their current score is okay
114:04 - then eventually we're going to get
114:05 - outside of this wall Loop when they roll
114:07 - one or when they tell us that they don't
114:08 - want to roll anymore we're going to take
114:10 - that score add that to their total score
114:12 - and then print that out now we're not
114:14 - quite finished but this will simulate
114:16 - most of the game so far all we really
114:17 - need to do is determine when someone
114:19 - wins so let's zoom out a bit just so we
114:22 - can kind of read most of what we have
114:23 - here we have our role function we ask
114:26 - the player or we ask to input the number
114:28 - of players we want we have the maximum
114:30 - score generate kind of an empty list for
114:32 - storing the scores and then we have this
114:34 - code which is going to simulate the
114:36 - terms let's run this and see what we get
114:39 - here okay so let's zoom in a bit and the
114:41 - number of players let's go with two
114:43 - player number one turn has started okay
114:46 - would you like to roll yes you roll a
114:49 - six your score is six would you like to
114:50 - roll yes you rolled a four your score is
114:53 - 10 would you like to roll okay yes let's
114:56 - keep
114:56 - rolling yes yes yes yes I'm trying to
115:01 - get a one here and it says you rolled a
115:03 - one your turn is done your total score
115:05 - is zero player two's turn has started
115:07 - would you like to roll yes five okay
115:09 - let's roll again and we rolled the one
115:12 - all right and you'll see that we can
115:13 - continue this right so I'm going to try
115:14 - to get a pretty high score although this
115:17 - isn't working too well for me okay let's
115:19 - stop there now our total score is 15
115:21 - player two turn okay yes yes yes yes yes
115:25 - really gambling here okay let's stop the
115:27 - roll okay yes roll to six your score is
115:30 - six yes yes yes yes no okay total score
115:35 - 42 let's roll roll roll roll and no
115:40 - total score is 51 and then notice the
115:42 - program ends here because all of the
115:43 - players turns have finished and someone
115:45 - had a score of 51 so we end we should
115:48 - really be telling them you know know
115:49 - that you won which is what we're going
115:50 - to do now but that kind of simulates the
115:52 - program there's a few things we'd
115:54 - probably want to do to make this a bit
115:55 - better for example at the beginning of
115:56 - the turn we should probably tell them
115:58 - what their score is so that they know
116:00 - that before they go into the turn so
116:01 - they can stop um you know once they hit
116:03 - what the max score is okay so let's do
116:06 - this uh we're going to say player one's
116:08 - turn has just started and then we're
116:10 - going to print
116:12 - here your total score is colon and then
116:19 - the player scores at the player idx okay
116:23 - and then we're going to begin the turn
116:25 - so we can actually just move that back
116:26 - sln and we'll just put one right here
116:30 - just so that we kind of go one line down
116:32 - okay do all of this and then as soon as
116:35 - this ends what that tells us is that at
116:37 - least one player has a score above 50
116:41 - now multiple players can have a score
116:42 - above 50 and the reason this works is as
116:44 - soon as someone hits 50 we don't end
116:46 - until every player gets a turn the
116:48 - reason why that's fair is cuz whoever
116:50 - goes first would have an advantage so in
116:51 - this case we let everyone have at least
116:53 - that last role and then we see whoever
116:55 - has the max score after the last rule so
116:58 - what we can do now is we can just find
117:01 - what that maximum score is we can
117:02 - actually get the index of that score
117:05 - inside of our player scores and that
117:06 - will tell us which player won so the way
117:09 - we do this is we simply say Max
117:13 - score is equal to the max of our player
117:16 - scores and then we're going to say
117:19 - player
117:20 - winning idx is equal to or actually we
117:24 - can just say winning idx is equal to the
117:27 - player scores do index and we can index
117:30 - the maximum score what that does is give
117:32 - us the index either 0 1 two or three of
117:35 - where that maximum score is which tells
117:36 - us player zero player one player two Etc
117:39 - so then we can just print player comma
117:43 - winning index plus one so we'll say
117:46 - player number and the reason we're
117:48 - adding one is because again we're going
117:49 - to start at zero so we want to make sure
117:50 - we're going from 1 to four not 0 to 3
117:53 - and we'll say
117:56 - is the winner with a score of colon and
118:00 - then what the maximum score was okay so
118:04 - that should wrap up the game let's give
118:05 - this one last run here okay Enter the
118:07 - number of players let's go with two
118:09 - player number one's turn has just
118:10 - started your total score is zero would
118:12 - you like to roll yes roll to five let's
118:14 - roll again roll again roll again and no
118:18 - okay 16 would you like to roll yes okay
118:21 - that ended fast you like to roll yes yes
118:24 - yes yes no okay and tot score zero would
118:29 - you like to roll yes yes yes yes yes
118:31 - okay yes yes and no okay now it's player
118:35 - two's turn so let's roll yes okay that
118:38 - ended fast yes okay now we have the max
118:40 - score so let's say no player two still
118:43 - gets a turn even though we now have a
118:44 - score of 51 I'm just going to say no and
118:47 - it says player number one is the winner
118:49 - with a score of 51 okay so that
118:52 - completes that first project all of this
118:54 - code will be available from the link in
118:56 - the description by the way in case you
118:57 - want to download this but'll kind of
118:58 - scroll through it quickly so you can get
119:00 - a sense of how we wrote this that was
119:02 - Project one hopefully you found that
119:03 - interesting and useful now let's move on
119:05 - to project number two all right for
119:07 - project number two we're going to do
119:09 - that Mad Libs generator the idea is
119:11 - we'll have some type of story the story
119:13 - will have replaceable words like an
119:15 - adjective or a location or a weather
119:18 - condition whatever ever it may be what
119:20 - we'll then do is we'll ask the user to
119:22 - give us all of the different words we'll
119:24 - then inject them in the story and then
119:25 - read the story back out to the user now
119:28 - the first thing we're going to need for
119:29 - this is a story so the process as I kind
119:31 - of described there is have a story with
119:33 - those injectable words essentially grab
119:35 - what those words are ask the user to
119:37 - input them and then place them in the
119:39 - story now I'm going to show you that
119:41 - there's a lot easier way to do what I'm
119:44 - about to do or I'm going to mention
119:45 - this's a lot easier way to do what I'm
119:46 - going to do but I want to show you a way
119:48 - that we can do it with any story so that
119:51 - means that you can make this program
119:52 - really Dynamic and you could have like
119:54 - 20 stories 50 stories 100 stories or you
119:56 - can just replace them without having to
119:58 - write any additional code the way we're
120:00 - going to do that is by taking the story
120:02 - and placing it inside of a text file
120:04 - that way as long as the story is written
120:06 - in a specific format we can read in the
120:08 - story do the operations we need to and
120:11 - then kind of run the program as we see
120:12 - fit now what I always do whenever I need
120:15 - something like this is I don't write it
120:16 - from scratch because I'm a lazy
120:17 - programmer I go to gbt so what I
120:20 - actually did here is I asked it using
120:23 - this prompt I'm making a Mad Libs
120:25 - generator in Python let's make this full
120:26 - screen I'm going to need a story where
120:29 - the user can give me some words can you
120:30 - give me the story even though I spelled
120:32 - that correctly and for all of the words
120:33 - where the user needs to give them to me
120:35 - make them like this angle bracket word
120:37 - now it gave me a nice long story and it
120:39 - had all the different words and it kind
120:40 - of listed them all out that was a bit
120:42 - long for me so I said that's okay but
120:43 - can you make it in less words please and
120:45 - then it gave me uh kind of a shorter
120:47 - story so the idea here is that whenever
120:50 - we have these angle brackets we're going
120:52 - to kind of treat that as a word that
120:54 - needs to be replaced so what we'll do is
120:56 - we'll take the story from chat gbt so
120:57 - I'm just going to copy this on my
120:58 - clipboard we'll put it in a text file
121:01 - we'll load that story in for all of
121:03 - those individual words we'll then kind
121:05 - of grab them figure out what they are
121:07 - ask the user to give us a word for them
121:08 - and then replace them in the story all
121:11 - right how do we want to do this well the
121:15 - way I will do this is I will copy that
121:17 - first of all and I will go here to vs
121:20 - code and I will make a file called
121:23 - story. txt and I will paste that inside
121:26 - of here now make sure when you do this
121:29 - that you put your story in the same
121:31 - directory where your python file is so
121:33 - here I have project 2py and I have
121:35 - story. txt in the same directory very
121:38 - important that you do that otherwise
121:39 - this isn't going to work for you okay
121:40 - and if you want this story you can go
121:42 - click the link in the description and
121:43 - just download the story from GitHub I'll
121:45 - make it available for you um after okay
121:49 - so how do we do this first thing we need
121:50 - to do is load this in now I want to load
121:53 - this in as a string essentially and then
121:55 - be able to kind of parse through that
121:56 - string and look for all of those
121:58 - different words now there's a few ways
122:00 - to do this but the way I will do this is
122:02 - I will say with open I'm going to open
122:07 - story.
122:08 - txt in read mode as F and then I'm going
122:11 - to put a call in now what I've done here
122:13 - is I've used the open function and the
122:15 - open function allows me to open a file
122:18 - so I can open a text file a Json file
122:20 - really any type of file I want and the
122:22 - mode here which is what I've placed
122:23 - second uh is the way in which we're kind
122:25 - of reading it in so I'm going to read it
122:26 - in in read mode which is R mode if I put
122:29 - W this stands for write mode where we'd
122:31 - actually be creating a new file and
122:33 - overriding a file if it already existed
122:35 - with the same name so we don't want to
122:36 - use W mode we want to use R mode this
122:39 - now allows me to read this story. txt
122:41 - file in and the reason I'm using this
122:43 - with syntax is what this does is provide
122:45 - something known as a context for this
122:47 - file which means I can do any file
122:50 - operations on this variable F inside of
122:53 - this indented block and as soon as I get
122:55 - outside of that indented block python is
122:57 - automatically going to clean up the file
122:59 - for me which means it will close it and
123:01 - make sure everything's good with the
123:02 - file so kind of best practice in terms
123:03 - of opening files here so what I'm going
123:05 - to do is say my story is equal to f.
123:08 - read now when I do do read all this does
123:11 - is give me all of the text inside of the
123:13 - file so I can simply print out story
123:16 - here and you'll see if I run this that I
123:18 - get my story appearing here in my
123:21 - terminal okay so now that we've read
123:23 - that in what I would like to do is look
123:26 - for all of the words in my story now
123:29 - there's a bunch of different ways to do
123:31 - this but essentially what we need to do
123:33 - is find the presence of this angle
123:36 - bracket as soon as we find that we want
123:38 - to find up to this closing bracket right
123:42 - so we want to find every individual word
123:44 - take that word store that in some kind
123:46 - of uh list that we're going to have
123:48 - access to
123:49 - ask the user to give us a word to
123:50 - replace it with and then go and replace
123:52 - all of the instances of this word with
123:55 - whatever the user told us okay so let's
123:58 - do that what we want to do is Loop
124:00 - through our story now our string we can
124:03 - actually access all of the individual
124:04 - characters as an index so what I can do
124:06 - let's zoom in here is say for I comma
124:11 - character in
124:12 - enumerate and we're going to enumerate
124:14 - the story now what enumerate does is
124:16 - give us access to the position as well
124:18 - as the element at that position uh just
124:20 - makes it a little bit cleaner for us
124:22 - here so now I'm just going to check
124:24 - essentially if this is equal to an angle
124:27 - bracket if it is equal to an angle
124:29 - bracket then I kind of need to do
124:31 - something to Mark the fact that I found
124:32 - the start of a word and then I need to
124:34 - go until I find the end of it so we're
124:36 - going to set up a few variables here and
124:38 - we're going to say words is equal to
124:40 - this because we want to store what all
124:41 - of these different words are and then
124:44 - what should we do here we should
124:47 - say
124:49 - start of word is equal
124:52 - to1 okay so we're going to have this
124:54 - variable and this variable is pretty
124:56 - much going to tell us if we've currently
124:58 - found the starting index of a word if we
125:00 - have that means we can then look for the
125:02 - end if we haven't then we're going to
125:04 - wait until we find that starting index
125:06 - so what we'll do here is we'll say if
125:08 - Char is equal to and I'm going to make
125:10 - another variable I'm going to call
125:12 - this target unor start this is going to
125:15 - be equal to the open angle bracket and
125:18 - I'm going to have my Target end equal to
125:21 - the closing angle bracket just so that
125:22 - if we were to change the format of the
125:24 - story we could easily adjust this by
125:26 - changing the value of the variables so
125:28 - I'm going to say if the Char is equal to
125:30 - the Target start then what I'll do is
125:33 - I'll say the start of the word is equal
125:35 - to index I so if I found that opening
125:38 - angle bracket okay we just found the
125:39 - beginning of the word let's mark that by
125:41 - indicating that in our variable now what
125:44 - we'll do is we'll say if the Char is
125:47 - equal to the Target n
125:49 - and and the start of word does not equal
125:53 - -1 the reason why we're doing this is
125:55 - we're saying if we found the ending
125:56 - angle bracket and we had the starting
125:59 - angle bracket right which will be marked
126:02 - by the start of word variable which if
126:04 - it's equal to negative 1 means we
126:05 - haven't yet found the beginning if it's
126:06 - equal to anything else that means we did
126:08 - find the beginning then we can take that
126:10 - entire word and add that to our words
126:13 - list so what we'll do now is we'll say
126:16 - word is equal to and this is going to be
126:19 - story at
126:21 - index start of word up to the index I
126:26 - plus one now what this gives us access
126:29 - to is a slice which is a subsection of
126:32 - the string so this is the slice operator
126:34 - here in Python where we indicate the
126:36 - starting character so the character we
126:38 - want to begin taking a slice from and
126:40 - then the ending character that we're
126:41 - going to go up to but not including or
126:43 - the ending index so in this case we know
126:45 - the start of the word so we put that
126:47 - here and we know the end of the word
126:48 - because that's the current index that
126:50 - we're on that we just found but we need
126:51 - to add one to it to make sure that we
126:53 - include this ending index uh in our word
126:56 - so we're going to grab that we're going
126:58 - to put that inside of our uh word or
127:00 - word variable sorry we're going to say
127:02 - words. append word which means we're
127:05 - going to now add this word into our
127:06 - words list and then we are going to set
127:10 - our start of word equal to Nega one
127:13 - because we've now found one whole word
127:15 - so now we reset the start of word so
127:17 - we're ready to handle it for the next uh
127:19 - character that we find which is that
127:21 - opening angle bracket so this code here
127:23 - will actually find all of the different
127:24 - words for us in the story so let's test
127:27 - this by printing our words okay let's
127:31 - run the code and I think my terminal is
127:34 - a little bit cut off but you can see
127:36 - that we get all of the different words
127:38 - now what you might notice here is that
127:39 - we have duplicated words now the reason
127:42 - we have duplicated words is because this
127:44 - word could appear multiple different
127:46 - times now that's fine if it does but I
127:49 - only want to have the words that are
127:51 - unique now the way that we can
127:53 - essentially do this is we can change
127:55 - from using a list and instead we can use
127:58 - a set now a set is a data structure
128:00 - which will only contain unique elements
128:02 - so if I add the same element in it's not
128:04 - going to do anything we just have one
128:06 - instance of each unique element the way
128:08 - to do that is just to write set here
128:10 - instead of a list and then rather than
128:12 - aend we're just going to say add now add
128:15 - will just add this to the set and you'll
128:17 - see now that when we run this we'll just
128:20 - get all of the different unique words
128:23 - perfect okay now that we have those
128:25 - words what we want to do is ask the user
128:27 - to give us a value for each of the words
128:30 - so the way we'll do this is we'll set up
128:31 - a dictionary so we're going to say
128:33 - answers is equal to a dictionary the
128:36 - idea is we want to have the word as the
128:38 - key so something
128:39 - like name and then the value in our
128:42 - dictionary will be whatever answer they
128:44 - gave us so something like Tim the reason
128:46 - we'll do this is so we can very easy
128:48 - easily look up the value of a word so we
128:51 - say name Tim blah blah blah okay and
128:53 - then what we'll do is we'll take
128:55 - whatever these values are and replace
128:57 - them in our story later on the way the
128:59 - dictionary works is you add a key by
129:01 - doing something like this answer is key
129:04 - is equal to and then whatever the value
129:06 - you want and you can access the key by
129:08 - just using the square bracket syntax
129:10 - like this okay so we have our answers
129:12 - this is going to be an empty dictionary
129:15 - what we'll now do is we'll Loop through
129:17 - all of the unique words that we have and
129:18 - we'll ask the user to give us a value
129:20 - for them so we're going to say forward
129:23 - in words iterating through our set and
129:25 - we're going to say answer is equal to
129:29 - input enter a word for and then we're
129:32 - going to
129:33 - do plus and then whatever the word is
129:37 - now notice we can't do a comma here
129:38 - because we're using the input statement
129:40 - not the print statement so we need to
129:42 - concatenate which means add two strings
129:44 - together so we take the word add it to
129:46 - enter word for and then we can just put
129:48 - here
129:49 - a colon with a space at the end so that
129:51 - the user knows where to start writing
129:53 - okay so that gives us an answer we're
129:55 - then going to say
129:56 - answers at
129:58 - word is equal to answer and let's spell
130:01 - answers correctly okay that will now
130:04 - create a dictionary that has all the
130:06 - words associated with all of the
130:07 - values so let's now print out
130:10 - answers okay so let's come here says
130:13 - enter a word for object uh let's go
130:16 - something like chair weather condition
130:19 - Sunny adverb uh I don't know let's see
130:23 - gently place School emotion to sad
130:30 - animal bear place to um I don't know
130:34 - house
130:36 - terrain what is this grass okay
130:39 - character Tim adjective
130:42 - one jumps emotion happy and there you go
130:47 - it gives us now all of the different
130:49 - words and their answers now that we have
130:51 - that we can take every single instance
130:53 - of these words and essentially kind of
130:55 - replace them in the story so now we're
130:59 - going to have another for Loop and we're
131:00 - going to say forward in
131:03 - words now the great thing in Python is
131:06 - that we have this method called replace
131:08 - all or replace I don't know which one it
131:09 - is I think it's replace all either way
131:11 - what this is going to do is replace
131:12 - every single instance of one string with
131:14 - another so that's super convenient for
131:17 - us cuz we know the string we want to
131:18 - look at which is that kind of angle
131:20 - bracket and we want to replace that with
131:21 - our answer so now what we'll do is we'll
131:24 - simply say story. replace I think this
131:27 - replaces all instances of it we're going
131:29 - to check that in one second and we're
131:31 - going to replace our word which is that
131:32 - angle bracket string with the
131:35 - answers of our word and then we can just
131:38 - print out our story and we'll be good
131:41 - we'll have the entire program finished
131:43 - so let me quickly run through the code
131:44 - and then I'll show you how this works so
131:46 - we open up our story. txt we read this
131:49 - in we create a set of all of our unique
131:52 - words we then say the start of the word
131:54 - is equal to 1 we have our Target uh kind
131:56 - of opening bracket Target closing
131:58 - bracket and this first block of code
132:00 - here goes and locates all of the uh
132:02 - different words that are inside of our
132:04 - story so we say for I character and
132:06 - enumerate story getting the index as
132:08 - well as the value we say if the
132:10 - character is equal to that starting kind
132:12 - of open angle bracket let's mark that by
132:14 - saying the start of word is equal to I
132:16 - then down here if we found the end
132:18 - bracket and we have the start of a word
132:19 - we've just found the end of the word so
132:21 - now what we can do is grab that word
132:23 - using our slice syntax add that to our
132:25 - set and then reset start of word then we
132:28 - have all of our words so we need to
132:30 - generate an answer for them which we ask
132:31 - the user to do and then we simply go
132:33 - through and replace all of the instances
132:35 - of our word with the answer the user
132:37 - gave us awesome let's give this a shot
132:40 - let's make this full screen and run uh
132:42 - animal bear adverb gently character t I
132:48 - probably should do lowercase for but
132:49 - that's fine weather
132:51 - condition Sunny terrain grass Place
132:56 - School adjective one um I don't know
132:59 - throw emotion two sad place two let's go
133:06 - with soccer field
133:09 - emotion happy object chair okay and
133:14 - unfortunately it seems as though this
133:16 - actually didn't work so I'm going to
133:17 - have to look at what the problem was
133:20 - here ah I already know what the issue is
133:22 - so I said story. replace however what
133:25 - this does is this gives me a new string
133:28 - so what I was doing is I was just kind
133:30 - of generating a string that I wasn't
133:31 - storing anywhere so story didn't change
133:34 - this gives me a new string so what I
133:36 - actually need to do here is say story is
133:38 - equal to and then story. replace and
133:40 - then do this now there's more efficient
133:41 - ways to go about doing this but this
133:43 - will be perfectly fine for our purposes
133:44 - so if we fix this up
133:46 - now and let's save that so again just we
133:49 - kind of are now changing the story every
133:51 - time by updating that variable what I'll
133:53 - do is run this again emotion sad
133:56 - adjective throw character Tim Place
134:01 - School terrain grass place
134:05 - to soccer field object chair adverb
134:10 - gently emotion sad animal bear weather
134:14 - condition Sunny okay in the throw land
134:18 - of school oh adjective okay I I probably
134:21 - used the wrong thing for an adjective
134:22 - there anyways in the throw land of
134:23 - school a bear was feeling sad the bear
134:25 - had lost its chair suddenly a Tim
134:27 - appeared I will help you find the chair
134:29 - they said together they journeyed
134:30 - through grass and faced the sunny okay I
134:33 - probably should have said like raining
134:34 - or something finally they found the
134:36 - chair in a soccer field the bear was so
134:38 - sad and thanked the Tim they lived
134:39 - gently Ever After are you know what
134:42 - that's not so bad I think there was a
134:43 - few words that I probably messed up
134:44 - writing but there we go we get the story
134:47 - and yeah there you are now if you wanted
134:50 - to you could store that in a text file
134:52 - but I think that that pretty much wraps
134:54 - up this project that was pretty cool and
134:55 - obviously if you kind of change the
134:56 - story around give some better words you
134:58 - can get some pretty interesting results
135:00 - there regardless hope you guys enjoyed
135:02 - let's move to the next project all right
135:04 - so let's get into project 3 now the idea
135:07 - for project 3 is we want to randomly
135:09 - generate a bunch of different math
135:11 - questions ask the user those questions
135:14 - and then not let them continue until
135:15 - they get it correct well then time how
135:17 - long it takes them to answer all of the
135:19 - questions so the first thing we need to
135:21 - do is be able to randomly generate these
135:23 - problems now there's a bunch of
135:25 - different parameters we can use right we
135:26 - have a set of operators we can use it's
135:28 - like plus minus addition multiplication
135:30 - we could even use exponent and stuff if
135:31 - we wanted to uh and then we have kind of
135:34 - the max values as the operan like the
135:36 - min max value Etc so what I'm going to
135:39 - do is write a few variables that we'll
135:41 - use as constants that we can change that
135:44 - will make this either easier or harder
135:46 - depending on what you want to do now
135:48 - first of all we're going to need random
135:50 - because we're going to be randomly
135:51 - generating operand then we're going to
135:53 - need the operators so I'm actually going
135:56 - to do this in all capitals I'm going to
135:58 - say op
136:00 - operators is equal to this and I'm going
136:02 - to say Min operand and Max operand okay
136:08 - we'll say for the Min maybe we have a
136:10 - Min value of three and for the max go
136:12 - something like 12 for the operators I'm
136:15 - going to use a string and I'm going to
136:17 - put in
136:18 - python operators okay it's important
136:20 - that these are ones that could actually
136:21 - be used in Python because I'm going to
136:23 - show you the way that we'll actually
136:25 - figure out what the answer is this is
136:27 - not going to be that long of a project
136:29 - but it'll show you a cool function that
136:30 - you might not have seen before in Python
136:32 - so what we're going to do is write a
136:33 - function
136:35 - called generate problem
136:39 - okay now what this is going to do is
136:41 - generate a problem for us that uses one
136:43 - of these operators and then a random
136:44 - operand on the left and right side so
136:47 - we're going to say left is equal to
136:49 - random. randint and this is going to be
136:52 - the Min op Rand and the max op Rand
136:56 - we're then going to say write is equal
136:58 - to
136:59 - random.
137:00 - randint and again the Min opend and the
137:03 - max oper now I'm actually going to
137:05 - remove division because I'm realizing
137:06 - that the way I'm going to write this is
137:08 - not going to work too well with division
137:10 - we'd need like a separate set of
137:11 - parameters so for now we'll just use
137:12 - these three operations which I think is
137:14 - fine okay we're then going to randomly
137:16 - select an oper opor so we're going to
137:18 - say operator is equal to random and
137:21 - there's actually this function called
137:22 - Choice what this does is just randomly
137:24 - pick one of the elements from a list so
137:26 - I can say random not Choice operators
137:28 - and that'll just give me randomly one of
137:30 - these then I'm going to say my
137:32 - expression which is uh XPR or exp here
137:35 - is going to be equal to the left plus
137:38 - the right plus the operator
137:41 - however I need my left to be a string
137:45 - and I need my right to be a string okay
137:49 - so this is going to give us the
137:51 - expression which will be the left hand
137:52 - side plus the right hand side and what
137:55 - we'll actually do is we'll just add a
137:57 - space in between here so I can print
137:59 - this out and you can just see kind of
138:00 - what it looks like so let's add a
138:04 - space like that okay so now let's call
138:07 - generate problem and let's just print
138:10 - out the expression and then return it
138:14 - just so we can see what that is okay so
138:17 - clear and python project 3 and I got an
138:22 - error can only concatenate string not
138:24 - into string okay ah sorry that's because
138:27 - I put this in the wrong order so
138:29 - operand or operator sorry
138:32 - plus the right okay so let's fix this
138:37 - and run again and we get 12 + 9 let's
138:40 - run a few more times and you can see
138:42 - we're kind of getting random operands
138:43 - and random values sweet all right that's
138:46 - working now the question becomes okay we
138:49 - randomly generated this but we need to
138:51 - know what the answer is right since
138:53 - we're randomly generating it it becomes
138:55 - a bit more difficult to calculate the
138:57 - answer now what we could do is just use
138:59 - a bunch of if statements right and I can
139:01 - say if the oper end is plus add them
139:03 - together if it's minus subtract them if
139:06 - it's multiplication multiply them that's
139:08 - fine however I want to make this a bit
139:11 - more Dynamic such that we can kind of
139:14 - make this a bit larger and we don't have
139:15 - to do all those if statements now the
139:16 - way to do that so we can actually do
139:19 - this we can say answer is equal to a
139:22 - function called
139:23 - eval now what eval does is evaluate a
139:27 - string as if it was a python expression
139:30 - now notice we have an expression that is
139:33 - valid python code like 6 minus 12 is
139:36 - valid code that we can evaluate so all I
139:38 - have to do is put this expression inside
139:41 - of the evaluation and it actually just
139:43 - tells me what the answer is so now what
139:45 - I can do is I can return my
139:48 - expression and the answer like that and
139:53 - if I go here and say exp answer is equal
139:56 - to that I can print them out so I can
139:59 - print the expression excuse me there
140:01 - sorry but I can print the expression and
140:03 - the answer and it will tell me what it
140:05 - is so I'm just showing you how we can
140:07 - kind of avoid having like if it's this
140:09 - do this otherwise do this that's fine
140:11 - that's valid to to evaluate it that way
140:13 - but we can use this eval function so if
140:15 - I run this I get 7 - 3 that's four right
140:18 - 12 - 4 8 10 + 5 15 so I figured you guys
140:22 - would find this eval function kind of
140:24 - cool hence why I wanted to show it to
140:26 - you all right so that is our generate
140:28 - problem and that's really most of the
140:30 - coding done what we need to do now is
140:32 - determine the total number of problems
140:34 - we then essentially need to set the
140:36 - timer when the user begins and we need
140:38 - to ask them to answer it right so what
140:40 - I'm going to do is say total
140:43 - problems is equal to 10 set this to
140:46 - whatever you want but the idea is I'm
140:48 - putting all of these capital or all
140:49 - capital variables at the top of my
140:51 - program these are constants meaning
140:53 - they're not going to change and we can
140:55 - simply change them around like once
140:57 - we're kind of going to run the program a
140:58 - second third time to make this more
141:00 - challenging easier like we can set the
141:03 - parameters of the program from these
141:05 - variables right up here okay so now that
141:08 - we have that what we'll do to begin is
141:11 - we'll kind of just ask them the number
141:12 - of problems then we'll set up the timer
141:14 - so we're going to say for I in range and
141:20 - then this will be the total
141:22 - problems and then we'll print something
141:25 - like this so we're going to say
141:26 - expression answer is equal to generate
141:30 - problem so that gets us a unique problem
141:32 - we're then going to
141:33 - print problem
141:36 - number and then we'll say plus I + 1
141:42 - inside a parenthesis and this will need
141:43 - to be a string so what we're doing is
141:45 - we're converting I +1 to a string so so
141:47 - it'll be like problem one problem two
141:49 - problem three so that they know then
141:51 - we're going to say plus a colon now
141:53 - notice the reason I'm using pluses here
141:55 - is because I don't want to have a space
141:56 - between my different values I just want
141:58 - to have them kind of in line so I'm
142:00 - saying problem number one colon space
142:03 - plus and then the expression okay and
142:07 - then we'll put actually I'm realizing
142:11 - we're going to put this inside of an
142:12 - input statement sorry so we're going to
142:14 - switch this around and we're going to
142:16 - say
142:17 - guess is equal to input and then we'll
142:22 - have plus the expression plus a equal
142:25 - sign like that so now what we're doing
142:27 - is we're saying okay problem number one
142:28 - here's the expression so here's the
142:30 - problem equals and then the user can
142:32 - type in their answer and then what we'll
142:34 - do is we'll keep asking them this until
142:36 - they get it
142:37 - correct sweet so then inside of here
142:39 - we'll do a wall Loop we'll say while
142:41 - true we'll do
142:43 - this we'll say if guess is equal to
142:48 - answer then we will
142:51 - break now the thing is our answer is
142:55 - going to be an integer but our guess is
142:57 - going to be a string so we're going to
142:59 - convert our answer into a
143:03 - string so that we can compare the same
143:05 - types because if you compare an INT to a
143:07 - string even if they're the same value
143:09 - like the string 10 the number 10 it's
143:11 - going to say false now I want to convert
143:13 - the answer to a string not the guess to
143:15 - an INT because if I tried to convert the
143:17 - guest to an INT to match the answer type
143:19 - and they had typed in something that
143:20 - wasn't a valid int then that would crash
143:22 - my program which I don't want so this
143:24 - way I'm kind of solving for that I'm
143:26 - going to make sure that I don't have any
143:27 - potential crashes okay so if they get it
143:30 - right break otherwise we're just going
143:31 - to keep asking it to them we don't need
143:33 - to give them any feedback they can just
143:34 - keep attempting the answer okay so
143:37 - that's good and I think that's actually
143:40 - going to be it for all of our problems
143:42 - all right so let's run this now give
143:44 - this a shot now I'm about to embarrass
143:46 - myself I haven't done m in so long so
143:48 - let's hope it gives me some easy ones
143:51 - okay
143:52 - 9 5 5 * 8 40 okay 20 10 8 * 7 I always
144:00 - mess these ones up uh not
144:03 - 6456 okay 88 and there we go we finish
144:08 - the problems all right so that was
144:09 - actually pretty good did I get any wrong
144:11 - no I didn't okay let's try it again
144:12 - let's get one wrong this time and noce
144:14 - is going to keep asking until we get
144:16 - this correct and then we continue okay
144:18 - I'm just going to hit contrl + C to exit
144:20 - out of that and now what we'll do is
144:21 - we'll set up the timer now I would love
144:24 - to make it so the timer like it shows
144:26 - you the timer it's going to be a little
144:28 - bit difficult to do without going into
144:30 - some more advanced code so what we'll do
144:31 - is we'll just start the timer as soon as
144:33 - they say like they're ready to start and
144:35 - then we'll tell them what their time was
144:36 - at the end and we can also tell them
144:37 - like number of correct answers so let's
144:40 - do something like this we'll
144:43 - say
144:45 - wrong is equal to zero and every time
144:47 - they get it wrong so we can just go here
144:50 - and say wrong plus equals 1 and then
144:53 - that way we can tell them kind of what
144:55 - their accuracy was at the end all right
144:58 - so wrong we're also going to import
145:01 - time all right and now before we start
145:04 - doing all of this we just want to ask
145:06 - them like okay are you ready to begin as
145:08 - soon as they hit enter then we start the
145:10 - timer just they have a second to like
145:11 - gather themselves before it begins so
145:13 - I'm going to say input I'm going to say
145:16 - press enter to start
145:19 - okay really they can press anything they
145:21 - want and it's going to continue as long
145:22 - as they go to the next line so they can
145:23 - type something in if they want doesn't
145:25 - matter so press enter to start will
145:27 - print out like this okay and then it
145:30 - will begin and I'm just going to take
145:32 - this and print it once they're done and
145:35 - then we'll
145:36 - print nice work and then whatever else
145:39 - we want to do okay so as soon as we do
145:40 - this so as soon as I hit input we're
145:42 - going to start the time now I imported
145:44 - this time module and what I can do is I
145:46 - can say the start time is equal to
145:49 - time.time now this is going to give me
145:51 - what's known as the unex time yeah I
145:54 - think it's that's what it's called let's
145:55 - see here so actually sir it says return
145:57 - the current time in seconds since the
145:59 - epoch don't worry too much about exactly
146:01 - what that means but it's going to give
146:02 - us some kind of time stamp in seconds so
146:04 - what we do is we kind of Mark the start
146:06 - time then we just need to figure out
146:07 - what time they ended at then we subtract
146:09 - the two times and that to tells us the
146:11 - total amount of time so as soon as they
146:13 - finish the for Loop here we say end time
146:16 - is equal to
146:17 - time.time and then we just say total
146:20 - time is equal to the end time minus the
146:24 - start time and then we can print out how
146:26 - long it took them so we'll do that down
146:28 - here nice work you finished in comma
146:34 - total
146:36 - time and we'll do
146:38 - comma seconds like that now we could
146:41 - parse this and do minutes hours Etc but
146:43 - I think just doing the number of seconds
146:45 - is fine and that will be our program
146:48 - okay let's give this a shot so run the
146:50 - code press enter to start okay so that's
146:54 - 80 that is
146:57 - 17
146:59 - -2 -6 11 77 fortunately it's giving me
147:04 - some easy ones here
147:06 - 16 -3 uh 36 okay nice work you finished
147:11 - in 16.95 blah blah blah whatever seconds
147:13 - we could probably round this off if we
147:15 - wanted to to make it a little bit better
147:16 - so let's do that and we will take this
147:20 - and round this to the nearest two digits
147:25 - okay let's do this one more time see if
147:27 - we can beat our time of 16 seconds that
147:29 - was pretty fast I don't know if I'm
147:30 - going to be able to do that okay
147:35 - -21 1 oh what am I one okay definitely
147:38 - not going to win Now 49 14
147:42 - 30 -4 uh 12 0
147:48 - 10 21 17 oh I was pretty close even with
147:51 - that mistake I was reading it as 7 - 8
147:54 - not 8 - 7 hence why I made the mistake
147:56 - three times anyways that was pretty good
147:59 - all right so that completes our program
148:01 - and all of our projects so you're
148:03 - probably wondering now what kind of
148:04 - project are we going to work on now I
148:06 - wanted to pick something that was unique
148:07 - and that I haven't done before so we're
148:09 - actually going to build a text based
148:11 - slot machine now the way this will work
148:13 - is the user will deposit a certain
148:15 - amount of money we're then going to
148:16 - allow them to bet on either one two or
148:18 - three lines of the slot machine just to
148:20 - keep it pretty simple I know in real
148:22 - slot machines they have a lot more lines
148:23 - than that and then we are going to
148:25 - determine if they wanton so if they got
148:27 - any lines we're going to multiply their
148:28 - bet by the value of the line add that to
148:31 - their balance and then allow them to
148:33 - keep playing until they want to cash out
148:35 - or until they run out of money so this
148:37 - is actually a fairly complex project
148:38 - because we need to do a lot of things we
148:40 - need to collect the users's deposit we
148:42 - need to add that to their balance we
148:44 - need to allow them to bet on a line line
148:46 - or on multiple lines we then need to see
148:49 - if they actually got any of those lines
148:51 - we then need to spin the slot machine or
148:53 - we would have done that before right we
148:55 - need to generate the different items
148:56 - that are going to be in the slot machine
148:58 - on the different reels uh and then we
149:00 - need to add whatever they won back to
149:02 - their balance so there's quite a bit of
149:03 - stuff going on here and this should be a
149:05 - challenging enough project to make it
149:06 - interesting for you guys so before we
149:08 - even get into this I just want to
149:09 - mention I obviously am not supporting
149:11 - gambling here this is just kind of a
149:13 - cool thing that we can do we're not
149:14 - using any real money and I think it's a
149:16 - good project so just keep that in mind
149:17 - do not gamble I'm not supporting that by
149:19 - making this video and before I write any
149:22 - code what I like to do here is just
149:23 - think of the different things that we
149:25 - need to do in this project and kind of
149:27 - pick a good starting point the place
149:29 - where I like to start usually is
149:30 - collecting some user input and for this
149:33 - project we need to get the deposit that
149:34 - the user is entering as well as their
149:36 - BET right those are kind of the two
149:38 - things we need before we can start
149:40 - actually using the slot machine uh and
149:42 - generating you know whatever the slot
149:44 - machine spun so to do this I'm I'm going
149:46 - to make a function here called deposit
149:49 - now I'm just inside of Visual Studio
149:51 - code you can work in Ed any editor you
149:53 - want sorry and I have this main.py
149:55 - function open I assume you guys can open
149:56 - your own python file and kind of work in
149:58 - your um preferred environment so this
150:01 - function here is going to be responsible
150:03 - for collecting user input that gets the
150:05 - uh deposit from the user Now function if
150:07 - you're unfamiliar is just something that
150:09 - we can call that's going to execute a
150:10 - certain block of code and then can
150:12 - potentially return us a value and you'll
150:14 - see how this works in a second so what
150:16 - I'm going to do here set up a wall Loop
150:17 - and the reason I need a wall Loop is
150:19 - because I'm going to continually ask the
150:20 - user to enter a deposit amount until
150:23 - they give me a valid amount so if they
150:24 - don't give me a valid amount then they
150:25 - need to keep typing in until eventually
150:27 - we get one so to do this I'm going to
150:29 - say my amount is equal to input and then
150:32 - inside of input I'm going to pass a
150:34 - prompt which is some text that will
150:36 - happen before we allow the user to start
150:37 - typing so for the prompt I can say uh
150:41 - what would you like to deposit question
150:45 - mark and then I can put something like a
150:48 - dollar sign and then allow them to start
150:49 - typing after the dollar sign okay now
150:52 - what I need to do is check if this
150:55 - amount is actually a number because they
150:57 - could type in anything here right they
150:59 - could type in a low World they could
151:01 - type in nothing and just hit enter they
151:02 - can do whatever they want so I need to
151:04 - make sure that the amount actually is a
151:05 - number before I get out of this wall
151:07 - Loop so I'm going to say if the
151:10 - amount do is and then digit like this
151:14 - then we can do something inside of here
151:16 - now is digit is just going to tell us if
151:18 - this is a valid whole number so if it's
151:21 - something like a thousand you know 10
151:23 - whatever if they type in a negative
151:25 - number it actually won't be true so if
151:27 - they do something like9 then uh it's not
151:30 - going to be true and we call is digit
151:32 - anyways this is a method you can use on
151:33 - strings to determine if this is a valid
151:35 - number so if this is a digit then what
151:37 - I'm going to do is I'm going to convert
151:39 - this
151:40 - into and uh an INT so I'm going to say
151:42 - amount is equal to int amount and that's
151:44 - because by default this comes as a
151:46 - string and we want to have a numeric
151:48 - value for our balance or for our deposit
151:51 - so we need to convert this to an in
151:53 - however I can't do this before I make
151:55 - this check because if I do that then
151:57 - this could potentially fail because if
151:58 - they try to type in something like Hello
152:00 - World then this here is invalid I can't
152:03 - convert hello world into an integer so
152:05 - that's why I'm first checking if they
152:07 - did actually enter a valid number if
152:09 - they did I then convert it to a number
152:11 - now what I need to do is check if this
152:13 - number is greater than zero so I'm going
152:14 - to say if the ount is greater than not
152:18 - equal to but is greater than zero then
152:20 - I'm going to break out of this wall Loop
152:22 - if it's not greater than zero then I'm
152:24 - going to put an lse statement here and
152:25 - I'm going to say
152:27 - print amount must be greater than zero
152:32 - dot okay there we go now I'm just going
152:35 - to add one more else statement down here
152:37 - and I'm going to say print uh please if
152:41 - we could type this correctly enter a
152:44 - number okay then finally here we are
152:47 - going to return our amount all right so
152:50 - let me go through what we just did here
152:52 - so we wrote a function deposit this is a
152:54 - wall Loop so we're going to continue to
152:55 - do this until eventually we break out
152:57 - and this break keyword just ends the
152:59 - wall Loop and then will bring us down to
153:00 - this line I ask what is the amount you
153:02 - want to deposit they enter something if
153:05 - this is a digit then I'm going to
153:07 - convert this to an integer and I'm going
153:08 - to check if this is greater than zero if
153:11 - it is it's a valid amount we can work
153:13 - with this we'll break out and then we'll
153:14 - return that amount and we can use that
153:15 - later on okay otherwise I'm going to
153:18 - print this amount must be greater than
153:20 - zero because if it's not greater than
153:21 - zero well we need to tell them that and
153:22 - then get them to try again all right so
153:24 - that handled this first if statement now
153:26 - if the amount is not a digit then what
153:28 - we're going to do is uh print sorry
153:30 - please enter a number and we're going to
153:32 - continue this until we get a number and
153:33 - until we break all right so that's that
153:35 - function now to call the function if we
153:38 - spell uh deposit correctly here I don't
153:41 - even know how I messed that up so badly
153:43 - okay deposit uh to call the function we
153:45 - simply write the name of the the
153:46 - function and we put our two parentheses
153:48 - and now as soon as I run my code this
153:49 - function will run and we'll be able to
153:51 - actually enter a number so let's do this
153:53 - you can see in my terminal that's asking
153:55 - me what would you like to deposit let's
153:57 - go with something like $10 and all is
153:59 - good now if I run this again and I enter
154:01 - something like Hello World it tells me
154:03 - please enter a number okay let's enter
154:05 - zero all right amount must be greater
154:07 - than zero enter one I'm good to go so
154:10 - there we go we've written our first dep
154:11 - positive function and I've tested it
154:13 - it's working good we're all good to go
154:15 - all right so now what I'm going to do is
154:17 - I'm going to say my amount is equal to
154:19 - my deposit and actually we're going to
154:21 - call this balance and this is kind of
154:23 - the start of our program here and in
154:25 - fact I'm going to put our program in
154:27 - this function main so that if we end our
154:29 - program we can just call this function
154:31 - again and then it will rerun the program
154:33 - right so I can say do you want to play
154:34 - again and then we can rerun the main
154:36 - function and we'll be good to go so
154:38 - we've done that now I need to call the
154:40 - main function so that we start running
154:42 - Main and then it's going to do
154:43 - everything inside of here okay so now
154:45 - inside I made the next thing that I want
154:47 - to do is I want to collect the BET from
154:50 - the user so there's actually a few ways
154:51 - I can do this but I need to determine
154:53 - how much they want to bet and then how
154:55 - many lines they want to bet on and then
154:57 - I would multiply their bet amount by the
154:59 - number of lines so it probably makes
155:01 - sense to ask the number of lines first
155:03 - and then ask them how much they want to
155:04 - bet on each line so it's not confusing
155:06 - if I say how much do you want to bet
155:08 - they put $10 and then they say three
155:09 - lines that ends up being $30 you see
155:11 - what I mean so let's say Define and
155:13 - we'll say get number of of lines like
155:17 - this and inside of here we're going to
155:20 - ask them to pick a number between 1 and
155:22 - three because that'll be the number of
155:24 - lines that we have and to keep this
155:26 - program nice and dynamic I'm going to
155:27 - add what's known as a global constant at
155:30 - the top of my program and I'm going to
155:31 - say
155:32 - maxcore lines is equal to 3 now I'm
155:36 - doing this in all capitals because this
155:38 - is a constant value something that's not
155:40 - going to change and this is a convention
155:42 - in Python you do it in all capitals I'm
155:43 - making it equal to three okay so now
155:46 - anywhere in my program where I'm
155:47 - referencing the number of Maximum lines
155:48 - in my slot machine rather than writing
155:50 - three I'll just write this and then
155:52 - later on I can easily change this to be
155:53 - five and the whole program will update
155:55 - based on that right so let's make this
155:56 - three for now okay so get number of
155:58 - lines uh obviously the minimum lines
156:00 - will be one we don't need to write that
156:01 - in okay so we need to ask them to enter
156:04 - this so we can actually just copy
156:05 - everything we have in the deposit
156:06 - function and just change a few values
156:08 - here so we're going to say while true
156:10 - rather than amount we're going to say
156:12 - lines and we'll
156:14 - say enter the number of lines to bet on
156:21 - okay and then I want to put inside of
156:23 - here kind of the options so like one to
156:25 - three so I'm going to write one dash and
156:27 - then I'm actually going to do a
156:28 - concatenation here plus and then I'm
156:30 - going to convert my number of lines or
156:33 - my max number of lines to a string and
156:36 - then I'm going to say plus and then I'm
156:38 - going to put a ending bracket here
156:40 - question mark and then a space okay I
156:42 - know it seems a little bit confusing but
156:44 - what I've just done here is I have now
156:46 - added Max lines inside of this string
156:48 - there's a few other ways to do this but
156:50 - this is the most basic so that's how I'm
156:51 - doing it and I need to convert this to a
156:53 - string because if I add two strings
156:55 - together they get squished together but
156:57 - if this was a number and I tried to add
156:58 - it to the string then this would cause
157:00 - an exception in my program so enter the
157:02 - number of lines to bet on one dash and
157:04 - then I'm going to put in whatever the
157:06 - string version is of the maximum number
157:07 - of lines end my bracket put a question
157:10 - mark and then I'm putting a space so
157:11 - that when they start typing they're not
157:13 - like connected to the question mark
157:15 - they're off by one space and it looks
157:17 - easier for them to read right okay so
157:20 - now same thing I need to make sure that
157:21 - they actually did enter a number so I'm
157:23 - going to say if lines do is digigit then
157:25 - I'm going to say that my lines is equal
157:28 - to int lines like this and I'm going to
157:31 - check now if the lines is within the
157:33 - bound that I had so within one and three
157:35 - so the way to do this is I'm going to
157:37 - say if and I'm actually going to say
157:39 - zero um actually we'll say one less than
157:42 - or equal to
157:44 - lines less than or equal to and then
157:47 - this will be the max lines all right so
157:50 - this is something you can do in Python
157:51 - you may not have seen before if I want
157:53 - to check if a value is in between two
157:55 - values I can write it like this so what
157:57 - I'm saying here is if my lines is
157:58 - greater than or equal to one and is less
158:00 - than or equal to the maximum lines then
158:02 - I'm okay I can break otherwise I need to
158:04 - tell them uh to enter a valid number of
158:06 - lines so I'm going to say enter a valid
158:09 - number of lines okay otherwise same
158:11 - thing we'll say enter a number and then
158:13 - rather than returning the amount we'll
158:15 - return the lines okay perfect so now we
158:16 - have a function that gets the deposit
158:18 - amount and the number of lines so now in
158:20 - our main function we'll say lines is
158:22 - equal to get number of lines like that
158:24 - and now what we can do is print out the
158:26 - balance and the lines just so we can see
158:29 - what this is when we run the program
158:31 - okay so now let's go here let's run and
158:34 - how much would you like to deposit let's
158:35 - go with $100 okay Enter the number of
158:37 - lines let's try four okay it doesn't
158:39 - work let's try zero doesn't work let's
158:42 - try H doesn't work let's try two valid
158:45 - and notice I I now have a balance of 100
158:46 - and the number of lines is two the next
158:48 - thing I need to get for my user input is
158:50 - the amount that I want to bet on each
158:52 - line so let's do this and we'll have a
158:55 - maximum bet as well so we'll say Max bet
158:58 - is equal to let's go with something like
159:00 - $100 and let's say the minimum bet is
159:02 - equal to $1 and again we're putting
159:04 - these as constants so that we can use
159:06 - them kind of anywhere in our program so
159:08 - now let's just write this function from
159:09 - scratch let's say toine get bet so we
159:12 - can add our Co in and continue and for
159:14 - get bet we'll just ask them how much
159:16 - they want to bet uh and honestly
159:17 - actually now that I think of it let's
159:18 - just copy the same thing from deposit I
159:20 - don't like repeating all of this code
159:21 - but they are slightly different so it's
159:23 - fine to do something like this so for
159:25 - the amount we can actually use the same
159:26 - value and rather than what would you
159:27 - like to deposit we'll say what would you
159:29 - like to bet question mark again we're
159:31 - going to check if the amount is a digit
159:33 - we're going to convert this now to an
159:34 - integer and now we need to check if the
159:36 - amount is between the minimum and the
159:38 - maximum bet so I'm going to say the Min
159:41 - bet less than or equal to the amount
159:43 - less than or equal to the max bet okay
159:46 - and then break and here I'm going to say
159:48 - the amount not must be greater than zero
159:51 - amount must be between and now I'm going
159:54 - to show you a second way that we can
159:56 - actually um kind of put variables in our
159:58 - string so I'm going to use an F string
160:00 - here only available in Python 3.6 and
160:02 - above I'm going say amount must be
160:04 - between I'm going to put my uh sorry
160:07 - squiggly brackets like this and I'm
160:09 - going to say Min bet and then Max bet so
160:13 - this is actually a very easy way to um
160:16 - embed values inside of your strings you
160:19 - put F before the string and then you put
160:22 - your curly braces like this and inside
160:24 - of the curly braces you can write any
160:25 - variable and it will automatically be
160:27 - converted to a string for you if it can
160:29 - be converted so in this case I don't
160:31 - need to convert Min bet to a string or
160:33 - Max bet it's automatically going to get
160:35 - converted by Python and I've just put my
160:37 - dollar signs here to make it look a
160:38 - little bit better when I say you know
160:40 - between the m and the maximum bet okay
160:42 - uh otherwise please enter a number
160:43 - that's fine and then return amount okay
160:45 - perfect so now we're going to say bet is
160:47 - equal to and then this is going to be
160:51 - the getor BET all right uh now we should
160:56 - actually make this a bit more clear what
160:57 - would you like to bet on each line okay
161:01 - so now that we've done this and we've
161:03 - gotten the deposit gotten the number of
161:05 - lines and gotten the bet we're probably
161:08 - want to print out here in our main
161:09 - function kind of what they've said so
161:11 - far right so we'll say you are betting
161:14 - you know five
161:16 - on three lines your total bet is $15
161:18 - something like that right so we're going
161:20 - to say
161:21 - print you are betting and let's do an F
161:24 - string here as well and then let's do a
161:26 - dollar sign and we're going to say
161:28 - whatever the bet is so we're going to
161:30 - say you are betting whatever the BET
161:31 - amount is on and then this is going to
161:35 - be lines like this and then we'll write
161:39 - lines and we'll say total bet is
161:43 - equal to and then we'll put a dollar
161:46 - sign and we're going to put inside of
161:48 - here a variable I'm going to say total
161:49 - bet is equal to bet multiplied by the
161:52 - lines okay and we'll say this is the
161:55 - total bet all right so let's run this
161:58 - now and let's see what we get we no
161:59 - longer need to print out the balance in
162:01 - the lines by the way all right so let's
162:04 - run this how much would you like to
162:06 - deposit let's say $100 enter the number
162:08 - of lines to bet on let's go with two
162:10 - would you like to bet how much would you
162:12 - like to bet on each line or what would
162:13 - you like to bet on each line let's go
162:14 - with $10
162:16 - and now it says our total bet is $20
162:18 - great so this is okay but I just
162:20 - realized that we actually need to check
162:21 - if the amount that they're betting is
162:23 - within their balance because they can't
162:25 - bet more than whatever their current
162:27 - balance is so we need to check that and
162:29 - we could check this in a few different
162:31 - places but since I've called this get
162:33 - bet I'm not going to put it inside of
162:34 - here I'm just going to do the check here
162:36 - and then I'm going to recall get bet if
162:39 - they entered an invalid bet so I'm
162:41 - actually going to put now this inside of
162:43 - a wallet but I'm going to say while true
162:45 - I'm going to say bet is equal to G bet
162:47 - and I'm going to then say total bet like
162:49 - this inside of here so we put total
162:52 - bet okay now I'm going to say if my
162:56 - total bet is greater than my balance
163:00 - then we'll say
163:03 - print you do not have
163:08 - enough to bet that amount and then we'll
163:13 - say what their current balance is your
163:16 - current balance is and then we'll put
163:19 - dollar sign we're going to put our F
163:21 - string here and this is going to be
163:25 - their balance all right and then
163:28 - otherwise we will simply break out okay
163:31 - so hopefully that makes sense I also
163:33 - could just put uh condition here for the
163:35 - wallo but I think this is okay for right
163:37 - now all right so let's try this now
163:39 - let's run our code how much would you
163:42 - like to deposit okay $100 uh let's bet
163:44 - on three lines let's try to bet $40 and
163:46 - since you do not have enough to bet that
163:48 - amount your current balance is $100 okay
163:50 - uh how much you like to bet on each line
163:52 - let's go with $20 you're betting $20 on
163:55 - three lines the bet is equal to $60 okay
163:58 - so we have now successfully got the
164:00 - number of lines the betting amount the
164:02 - deposit amount now what we need to do is
164:04 - we need to actually run the slot machine
164:07 - now this is where it gets a little bit
164:08 - more complicated and I'm going to start
164:10 - importing some modules so the first
164:12 - module I'm going to import is the random
164:14 - module because we need to generate um
164:17 - the slot machine values kind of randomly
164:19 - right so how are we going to do this
164:21 - well the first thing we need to figure
164:23 - out is how many items we want to have in
164:25 - each reel and how long we want the lines
164:28 - to be now slot machines can get a bit
164:31 - complicated in terms of how the lines
164:34 - work I'm going to keep this really
164:35 - simple and we're going to imagine that
164:37 - we have a 3X3 slot machine and that you
164:39 - only get a line if you get three in a
164:41 - row okay if you get three in a row then
164:43 - you win this might not be the most
164:45 - balance slot machine it might not be one
164:46 - you want to play on but for this project
164:48 - it's fine so again I'm going to set some
164:50 - values here that specify the number of
164:53 - rows and columns we're going to have in
164:55 - our slot machine so I'm going to say
164:57 - rows is equal to three and calls is
165:00 - equal to three and if we wanted to make
165:02 - this a little bit better we could say I
165:04 - guess actually you know what row and
165:06 - call is fine for right now I don't know
165:08 - exactly what they would call uh like I
165:10 - guess it'd be like real count and number
165:12 - of reals or something like that for now
165:14 - though this is fine
165:15 - all right now what we need to specify is
165:18 - how many symbols are in each of our
165:20 - reals now it should be the same at least
165:23 - from what I know it should be the same
165:25 - number of symbols in every single real
165:26 - we're not doing anything really
165:27 - complicated when I say real I'm talking
165:29 - about kind of one column right so how
165:31 - many symbols are in that column because
165:33 - we're going to have to randomly select
165:35 - out of those symbols and then we need
165:36 - values for our different symbols so we
165:39 - need to pick kind of first of all how
165:40 - many symbols do we want to have in total
165:43 - and what do we want those symbols to be
165:45 - uh now to keep this easy we can do
165:47 - something just like you know a b c d
165:50 - like those are probably fine as the
165:51 - symbols um yeah we can do something like
165:54 - that so let's say
165:56 - symbol count is equal to and let's make
166:00 - a dictionary here now for our dictionary
166:03 - I'm going to have the symbol be a string
166:05 - and I'm going to have the count of this
166:06 - symbol in each real so I guess what we
166:08 - can have is characters that are like at
166:10 - the beginning of the alphabet like a be
166:12 - the most valuable so maybe we only have
166:15 - I don't know something like two A's in
166:16 - every single reel and then for B's we
166:19 - could have something like four of those
166:21 - for C's we could have six and for D we
166:25 - could have eight now again I don't think
166:28 - this is going to be a very balanced slot
166:29 - machine I'm not going for the best odds
166:30 - here I'm just trying to kind of make
166:31 - something work so let's see if this
166:33 - actually works for us if every single
166:35 - reel we have 2 A's 4 B's 6 C's and um
166:39 - what do you call it ads to choose from
166:41 - now the thing that I think is going to
166:43 - happen here is we're going to get a lot
166:45 - of situations where it's just D's that
166:47 - are being in the reals but let's see if
166:49 - this works at all in terms of randomly
166:51 - selecting okay so that's what we've done
166:53 - here now what we need is something
166:55 - that's essentially going to generate
166:57 - what the outcome of the slot machine was
166:59 - using these values here so to do this
167:02 - I'm going to say Define and we'll say
167:05 - getor slot machine undor spin okay and
167:10 - inside of here what we're going to take
167:12 - is we're going to take the rows called
167:16 - and symbols and this will be the symbols
167:19 - that we pass so these are three
167:20 - parameters that we're going to pass to
167:22 - this function and then inside of here we
167:23 - can use these parameters so inside of
167:26 - this function again what we need to do
167:28 - is generate what symbols are going to be
167:30 - in each column based on the frequency of
167:33 - symbols that we have here so we
167:34 - essentially need to randomly pick the
167:37 - number of uh rows inside of each column
167:40 - so if we have three rows we need to pick
167:42 - three symbols that go inside of each of
167:44 - the columns that we we have and for each
167:46 - column we're doing kind of a new random
167:48 - pick right a new random generation of
167:50 - the symbols now this can be a bit
167:52 - complicated now the easiest way to
167:54 - randomly select um values here for each
167:57 - of our columns is going to be to create
167:59 - a list that contains all of the
168:01 - different values we possibly could
168:03 - select from and then to randomly choose
168:06 - three of those values and when we choose
168:08 - a value we'll remove it from the list
168:11 - and then we'll choose again now what I'm
168:12 - going to do here is not going to be the
168:13 - most efficient algorith but since we're
168:15 - dealing with small values this is fine
168:17 - so let's see how we work with this okay
168:20 - so what we're going to Define here is
168:23 - allore symbols okay now this is going to
168:26 - be a list and what we're going to do is
168:28 - write a for Loop that's going to add
168:30 - however many symbols we have here into
168:32 - the all symbols list so I'm going to say
168:35 - four and since we're iterating through a
168:38 - dictionary I can do the following I can
168:41 - say four symbol comma symbol count and
168:46 - then this is going to be in symbols.
168:48 - items now when you use do items what
168:51 - this does is give you both the key and
168:54 - the value associated with a dictionary
168:56 - so I can get the key here and the value
168:58 - and I can just use both of them rather
169:00 - than looping through the dictionary only
169:02 - getting the keys and having to manually
169:04 - reference the values okay so now that I
169:06 - have the symbol and the symbol count I
169:08 - want to add this many symbols to the um
169:11 - what do you call it symbols list now
169:12 - there's a few different ways to go about
169:14 - doing this
169:15 - I think the easiest way to do this is
169:16 - just going to be to run another for Loop
169:17 - so that I don't confuse anyone so we're
169:19 - going to say four and then this is going
169:21 - to be let's do this I in range and then
169:27 - symbol undor count and actually we don't
169:30 - even need I we're going to put
169:31 - underscore now this is an anonymous
169:33 - variable in Python so whenever you need
169:35 - to say Loop through something but you
169:36 - don't actually care about the count or
169:38 - the iteration value then you just put an
169:40 - underscore and then you don't have an
169:41 - unused variable anymore so I'm going to
169:43 - say four underscore in range symbol
169:45 - count I'm going to say
169:46 - allore symbols Dot and then this is
169:49 - going to be append and I'm going to
169:51 - append whatever the symbol is so what's
169:53 - going to happen here is I'm going to
169:54 - Loop through this dictionary let's
169:56 - imagine on the first key value pair my
169:58 - symbol is going to be a and my symbol
170:00 - count is going to be two all right so
170:02 - then I have another for Loop inside of
170:03 - here where I'm looping through the
170:05 - symbol count so the symbol count is two
170:08 - and what I'm doing is doing this two
170:09 - times so I'm going to add this symbol
170:11 - twice into my all symbols list all right
170:15 - now that we have the all symbols list we
170:17 - need to select what values are going to
170:18 - go in every single column so how do we
170:22 - do this well let's make a for Loop that
170:24 - is going to do this for every column so
170:27 - I'm going to say my columns is equal to
170:30 - a list and inside of here I'm going to
170:32 - place a bunch of lists which are going
170:34 - to contain all of the values inside of
170:36 - my columns now this may seem a little
170:38 - weird to any of you that have used a
170:39 - nested list before because typically
170:42 - when you write a nested list uh you kind
170:44 - of have all the interior lists here that
170:46 - are representing your rows so if I had
170:48 - like 0 0 then these this would be the
170:50 - values that are in row zero right or in
170:52 - the first row and then this will be the
170:54 - second row and Etc however here we're
170:57 - doing it the other way around where each
170:59 - of these nested lists is going to
171:00 - represent the values in our column so
171:03 - keep that in mind I'll explain how this
171:05 - works in case any of you are a bit
171:06 - confused later on but I just want you to
171:08 - know that we're storing The Columns not
171:09 - the rows inside of here okay so we have
171:11 - all of the symbols and now for each of
171:14 - the colums that we have uh we need to
171:17 - generate what is it the values inside of
171:19 - the columns and how many values do we
171:21 - need to generate well however many rows
171:23 - we have that's how many values we need
171:24 - so we're going to say four and this is
171:26 - going to be call in range and then calls
171:29 - like that and then we need to say four
171:33 - and this will be Row in range
171:36 - rows okay so for every column we need to
171:39 - generate a certain number of uh symbols
171:42 - so inside of here I'm going to say that
171:45 - my column is equal to an empty list this
171:48 - is actually not going to have our
171:49 - columns inside of it I'm just was
171:50 - putting that there for an
171:51 - example and now I need to select a
171:55 - certain number number of values sory
171:56 - from our all symbols list so let's see
172:00 - how we do this so we're going to
172:01 - say value is equal to random. choice and
172:06 - I'm going to choose from all symbols now
172:09 - I can use random because I imported
172:12 - random here now what we're actually to
172:14 - do though is we're not going to use the
172:16 - all symbols list we're going to use a
172:17 - copy of this and you'll see why but what
172:20 - we need to do is once we pick a value we
172:22 - need to remove it from this list so that
172:24 - we can't choose that value again right
172:26 - so if there's only two A's we shouldn't
172:28 - be able to Select Three A's we should
172:30 - only be able to select that most too so
172:31 - if we select one a we need to remove it
172:33 - so then the next selection doesn't have
172:35 - that as a chance so that means we need
172:37 - to make a copy of this all symbols list
172:39 - because if I start removing from this
172:41 - all symbols list then when I try to do
172:43 - the next column it's it's going to have
172:44 - values removed so that's what we need to
172:46 - do we need to make a copy so I'm going
172:47 - to say current uncore symbols is equal
172:51 - to all underscore symbols and the way
172:53 - you copy a list is you do this you put a
172:56 - coal in here this operator here is
172:59 - referred to as the slice operator
173:01 - because if I just did this and made it
173:03 - equal to all symbols what happens is
173:05 - current symbols stores the same object
173:08 - as all symbols now that means anything I
173:11 - do to all symbols affects current
173:12 - symbols and anything I do to current
173:14 - symbols affects all symbols so this is
173:16 - not what we want we don't want what's
173:17 - referred to as a reference we want a
173:20 - copy so the way you do the copy is you
173:22 - put a CO in here make sure you add this
173:24 - otherwise it's not going to work okay
173:26 - continuing here now what we're going to
173:28 - do is Select from our current symbols
173:31 - and then we're going to remove whatever
173:33 - this value is from our current symbols
173:35 - list so we're going to say current
173:36 - uncore symbols do remove and then value
173:39 - now when you do do remove it's just
173:41 - going to find the first instance of this
173:43 - value in the list and get rid rid of it
173:45 - okay now that we've done that we want to
173:47 - add this value to our column so we're
173:51 - going to say column do push and sorry
173:56 - not push I'm not in JavaScript right now
173:57 - I'm in Python do append the value all
174:01 - right and I just realized here we don't
174:03 - actually need the column and we don't
174:05 - need the row so we can just put
174:06 - underscores there now what we're going
174:09 - to do after this is we're going to say
174:11 - columns. append and we are going to
174:13 - append our current column now let me run
174:16 - through this cuz I understand it's a
174:17 - little bit confusing we start by
174:19 - defining our columns list then we are
174:21 - going to generate a column for every
174:24 - single column that we have so if we have
174:25 - three columns we need to do everything
174:27 - inside of here three times that's why we
174:28 - have this first for Loop then inside of
174:30 - here what all this code is doing is it's
174:32 - picking random values for each I guess
174:35 - Row in our column right for each value
174:37 - that we're going to have so we say
174:39 - column is equal to an empty list we say
174:41 - our current symbols which are the ones
174:42 - we can currently select from is equal to
174:45 - a copy of all symbols then we Loop
174:47 - through the number of values that we
174:49 - need to generate which is equal to the
174:51 - number of rows that we have in our slot
174:52 - machine then we say the first value
174:54 - we're going to get here or a value we're
174:56 - picking is random not Choice current
174:58 - symbols this picks a random value from
175:01 - this list okay we then say current
175:03 - symbols. remove the value so we don't
175:05 - pick it again and then we add the value
175:07 - to our column okay once all of that's
175:09 - done so this for Loop is finished we now
175:11 - should have however many rows there are
175:13 - symbol inside of our column we now add
175:16 - our column to our column's list then
175:19 - finally we can go here and we can return
175:23 - our columns okay and remember that when
175:25 - we're looking at this list here every
175:27 - interior list gives us the value of the
175:30 - items inside of our column I know a
175:32 - little bit confusing this was quite a
175:34 - bit of logic especially if you're a
175:35 - beginner programmer but I told you I
175:37 - wanted to make this challenging enough
175:38 - to be interesting for you and show you
175:40 - some new stuff so don't worry if this
175:41 - doesn't make complete entire sense maybe
175:44 - read through this a few times pause the
175:46 - video go back and listen to the
175:47 - explanation again uh but this is you
175:50 - know how we generate the items that are
175:52 - going to be in our slot machine now that
175:54 - we have this we want a way to print this
175:56 - out we want to look at this because I
175:58 - can't even really test this yet until I
176:00 - can print out what's inside of all of my
176:02 - columns and I want to print this in like
176:03 - a nice way so I'm going to make a
176:05 - function here and say Define
176:08 - printor slot machine and what we're
176:11 - going to take here is our
176:12 - columns now when we have our columns
176:15 - it's not really in a format that's easy
176:17 - for us to print because we have all of
176:20 - our columns kind of laid out as rows
176:23 - almost right like we have maybe actually
176:25 - this isn't going to be good but we would
176:26 - have like a b c and one maybe we have
176:29 - like a a a and again these are our
176:33 - columns not our rows so what I need to
176:35 - do is kind of flip these around so
176:37 - rather than having like a b c a a a it
176:40 - would go a
176:42 - b c right in the First Column and then
176:46 - this would say a a and then a like that
176:49 - I know that I kind of butchered this
176:50 - example the way that I wrote it out we
176:52 - need to change it from being this way to
176:54 - be this way right that's how we need to
176:56 - print it out so how are we going to do
176:58 - that well this operation is actually
177:00 - referred to as transposing because we
177:02 - have what's known as a matrix we don't
177:04 - need to get into all the fancy words but
177:07 - understand this is known as transposing
177:09 - so the way we're going to do this is
177:10 - we're going to write a for Loop and
177:11 - we're going to say four and then this is
177:13 - going to
177:14 - Row in range and then we need to
177:18 - determine the number of rows that we
177:19 - have based on our columns now the number
177:22 - of rows that we have is the number of
177:24 - elements in each of our columns right
177:25 - because that's the number of vertical
177:27 - spaces we have so we need to look at a
177:29 - column and get the length of that so
177:30 - we're going to say the length of columns
177:33 - zero now this assumes that we have at
177:36 - least one column and we should always
177:38 - have one column so it's fine to put this
177:39 - here but understand that if we did pass
177:41 - something that had no columns this would
177:43 - crash because there be no column at
177:44 - index zero to access so I'm saying four
177:47 - row in range the line of columns
177:49 - zero then what I'm going to do is I'm
177:52 - going to Loop through all of my columns
177:54 - and only print the first value in it or
177:56 - whatever the index of my current row is
177:59 - again I'll explain this a second I know
178:00 - this is a bit confusing so I'm going to
178:02 - say four and this is going to be column
178:04 - in and then columns like that and when I
178:07 - do this now I'm looping through all of
178:10 - the items inside of column so it's
178:12 - giving me every individual column so now
178:15 - that I have a column I'm just going to
178:17 - print the value that's at the first row
178:20 - of that column so I'm going to say print
178:23 - and then I'm going to print column at
178:25 - row and I'm just going to put a comma
178:28 - here and put a pipe operator and the
178:30 - reason I'm going to put a pipe operator
178:31 - is so that we have some separation
178:33 - between uh the different items right now
178:35 - I just want to make sure though that I
178:37 - only put this pipe operator here if
178:39 - we're not printing the last column
178:42 - because if we're printing the last
178:43 - column then we don't want to have the
178:45 - pipe like off right we only want to have
178:47 - two pipes in the middle not one at the
178:49 - very end so the way I need to check this
178:51 - I need to say 4 I comma column in
178:54 - enumerate columns now when you enumerate
178:57 - what this does is give you the index so
178:59 - 0o 1 2 3 as you Loop through as well as
179:03 - the item so now that I have I what I can
179:06 - actually do here is I can say uh there
179:10 - there's a few ways to do this let's
179:12 - actually go back to this we'll say if I
179:14 - does not equal and then this is going to
179:16 - be the Len of columns minus one will do
179:21 - this otherwise we'll print the same
179:23 - thing we just won't print the pipe now
179:26 - there's a bunch of different ways we
179:27 - could have done this but this is just
179:28 - the way that I think is going to be
179:29 - easiest so that's how we'll do it so the
179:31 - reason I'm checking if I is not equal to
179:33 - l of columns minus one is because the
179:35 - Len of columns minus one is the maximum
179:38 - index we have to access an element in
179:40 - the columns list right if we have a
179:42 - columns list with three items the length
179:44 - is three the maximum index is two so if
179:47 - I is not equal to the maximum index
179:49 - print the pipe otherwise don't print the
179:50 - pipe that's how it's going to work okay
179:52 - so now we have print slot machine and
179:54 - get slot machine spin that's all this is
179:56 - all we need for printing the slot
179:57 - machine so we Loop through every single
180:00 - row that we have for every single row we
180:03 - Loop through every column and for every
180:06 - column we only print the current row
180:08 - that we're on so we're going to print um
180:10 - what is it row zero so all of the
180:12 - elements in row zero first then Row one
180:14 - then row two and this essentially
180:16 - transposes or flips our columns from
180:18 - being this way to be vertical this way
180:21 - all right so let's try this now and then
180:23 - we'll kind of finish the program because
180:24 - we're actually getting quite close now
180:26 - all right so once we determine what
180:28 - they're betting down here what we need
180:30 - to do is generate the slot machine so
180:32 - we're going to say slot we'll say just
180:35 - slots is equal to and then this is what
180:38 - do we call this function we called it
180:40 - get slot machine spin okay so get
180:44 - underscore slot machine Spin and then it
180:47 - autofilled this for me we're passing the
180:48 - rows columns and symbols so rows is all
180:51 - capitals actually calls is like this and
180:55 - the symbols I believe we called this the
180:57 - symbols count uh or we call it symbol
180:59 - count so let's go here and make that
181:01 - symbol count okay so now we should have
181:04 - all the columns in our slot spin right
181:06 - that's what that did for us now what we
181:08 - need to do is we need to print this so
181:11 - we're going to say print slot machine
181:12 - and we're going to pass to this are
181:14 - slots and really this is the columns but
181:17 - I'm just calling them slots because each
181:18 - one is like what's in the slot right
181:21 - okay let's give this a shot guys there
181:23 - probably will be an error because that's
181:25 - usually what happens when you write this
181:26 - much code from scratch but let's see if
181:28 - this works okay so we are depositing
181:31 - let's deposit $100 enter the number of
181:33 - lines to bet on uh let's bet on two and
181:37 - then how much we like to bet on each
181:39 - line let's do $10 okay now already we
181:42 - got a bit of an error here because I
181:44 - forgot to do something which I'll add in
181:45 - a second but if I scroll here you can
181:48 - see that what's happening is we're
181:49 - printing everything correctly we're just
181:51 - not printing it um on the same line
181:54 - which is what we need to do so ideally
181:56 - want Da and D on the same line CB and C
181:59 - on the same line and BC and a on the
182:01 - same line so the way that we fix that my
182:03 - apologies here guys is we go back to
182:07 - print slot machine and here we add this
182:10 - thing called end equals and we just make
182:12 - this a um what do you call an empty
182:14 - string and in fact let's actually do
182:17 - this end is equal to a pipe with spaces
182:22 - all right so what end does is it tells
182:24 - the uh print statement what to end the
182:26 - line with Now by default end is equal to
182:29 - what's known as the new line character
182:31 - or the return character or whatever you
182:34 - want to call this carriage return
182:35 - there's different names for it I call
182:37 - the new line character now back sln if
182:39 - you ever print this out it's what tells
182:42 - the um console to go to the next line so
182:44 - we don't want to print that because if
182:45 - we print that at the end then that means
182:47 - that we move to the next line after
182:49 - every single row we only want to do this
182:51 - sorry after every single column we only
182:53 - want to do this after every single row
182:55 - so I'm going to change this to be a pipe
182:56 - so now we'll just print this pipe at the
182:58 - end of our print statement so after we
183:00 - print this here we're just not going to
183:02 - print anything and now we need one more
183:05 - check to see if we should go to the next
183:07 - line or not because every row we want to
183:09 - go down to the next line so I'm actually
183:12 - going to say here uh print and we can
183:15 - just do an empty print statement Now by
183:17 - doing an empty print statement it just
183:19 - brings us down to the next line because
183:21 - it prints a new line character by
183:22 - default at the end of the empty print
183:24 - statement seems a bit weird that's kind
183:26 - of how this works we're going to print
183:28 - the first row this will go on the same
183:30 - line then we're going to print a new
183:32 - line character so it brings us down to
183:34 - the next line print the next row new
183:36 - line character next row new line
183:37 - character next row Etc right so let's
183:40 - have a look at this now okay let's go
183:42 - here let's let's run how much you like
183:44 - to deposit $100 uh let's bet on two
183:47 - lines how much would you like to bet $10
183:49 - and there we go now we have our slot
183:51 - machine excuse me and this is correct
183:54 - right so we have all of our columns uh
183:56 - and then all of our rows and what we'
183:58 - now be checking is if we have three in a
184:01 - row right that's what we're going to
184:03 - have to check okay so we have our slot
184:05 - machine we've spun it we probably should
184:07 - have some input that asks like do you
184:09 - want to spin the slot machine and then
184:10 - they can hit spin blah blah blah be a
184:12 - bit more Interactive
184:14 - but that's how it works and just to be
184:15 - clear here we're going to check if we
184:16 - have three in a row and if we do based
184:20 - on the value of the symbol we're going
184:21 - to multiply their bet and then give them
184:23 - that amount all right so let's write a
184:25 - function that can do this now when we're
184:27 - checking if they want or not we need to
184:29 - know what their bet is which lines they
184:33 - bet on right and then we can actually
184:35 - check now the way the lines works again
184:39 - I know this is not exactly how like a
184:40 - real Casino slob machine would work
184:42 - we're going to make it so that if you
184:43 - bet on one line you just bet on the top
184:45 - line if you bet on two lines you bet on
184:47 - the top and the middle if you bet on
184:48 - three lines you bet on all three I'm not
184:50 - going to let the user pick like where
184:51 - the one line is they want to bet on
184:53 - we'll just say one is top two is both
184:55 - the top two three is all of them and
184:58 - that's how it'll work okay so let's do
185:00 - this let's go
185:02 - Define check
185:03 - winnings okay now to do this we need the
185:07 - slot machine itself we need the lines so
185:09 - we're going to say lines and we need the
185:11 - BET okay so how we going to do this well
185:15 - we just need to look at the rows that
185:17 - the user bet on so let's start with that
185:19 - and then we can check each row and
185:21 - determine a value also for the symbol so
185:23 - we're actually going to take one more
185:24 - thing we're going to say values now I'm
185:26 - also going to make the values here so
185:28 - I'm going to say symbol uncore value and
185:31 - I don't know what actually makes sense
185:33 - again to do for this but we're going to
185:34 - say that D is going to be a two times
185:37 - multiplier C is going to be a three
185:40 - times multiplier this will be four and
185:42 - then this will be five so you know the
185:44 - more rare the symbol is the higher your
185:46 - bet gets multiplied again I don't think
185:47 - this is a fair slot machine but that's
185:49 - fine okay so check winnings now we have
185:51 - columns lines bet and value now let's
185:53 - look through only the rows that they bet
185:55 - on so the lines that they bet on so to
185:58 - do this we're going to say four uh and
186:00 - we'll say line in range then this is
186:04 - going to be lines like this now the
186:07 - reason this will work is because if they
186:09 - bet on one line then we're going to go
186:11 - up to one line but not include it so
186:13 - that means line will be equal to zero
186:15 - right so if bet one line then this is
186:19 - one and that means this is only ever
186:20 - going to be zero if they bet on two
186:22 - lines then line will go to zero and one
186:24 - so we'll check the zeroth row which is
186:26 - line one and the first row which is line
186:28 - two if they bet on all three lines then
186:31 - line will be zero then one then two so
186:34 - we'll check all three of those rows
186:35 - right and this will work dynamically
186:36 - even if there was more lines to bet on
186:39 - so inside this for Loop we need to check
186:41 - that every single symbol in the line
186:43 - line or row that we're checking is the
186:45 - same so we can get the first symbol
186:47 - that's in this row and then just make
186:49 - sure it's the same for the rest of the
186:50 - symbols so to do that we're going to say
186:52 - symbol is equal to columns 0 at the
186:55 - current line now the reason we're using
186:58 - columns Z is because we have all of the
187:01 - columns not all of the rows it makes it
187:03 - a bit more complicated so we need to
187:05 - look at the First Column because that's
187:06 - where the first symbol is always going
187:08 - to be for each row and then get whatever
187:10 - line we're on so First Column and then
187:12 - either you know line zero line one line
187:15 - two Etc going down that First Column
187:17 - gives us the first symbol and we're
187:19 - going to assume that we always have at
187:20 - least you know one real right so at
187:22 - least one column so now that we have the
187:24 - symbol we're going to Loop through all
187:25 - of our columns so we're going to say
187:26 - four column in columns like that now
187:31 - what we want to check so the symbol
187:34 - toore check is equal to the column at
187:38 - whatever row we're looking at so if
187:40 - we're looking at row zero we're checking
187:42 - the first symbol in the column if we
187:44 - looking at Row one checking the second
187:45 - symbol in the column Etc symbol to check
187:48 - we're then going to say if the symbol is
187:52 - equal to the symbol to check and
187:55 - actually we'll say if it is not equal to
187:57 - the symbol to check then we are going to
188:00 - break okay now the reason we're breaking
188:02 - is because if we found one of the
188:05 - symbols is not equal to the previous
188:07 - symbol uh or equal to all of the symbols
188:09 - that should be in this um row then we
188:12 - just break out of the for Loop and what
188:14 - we'll do is we'll put an else statement
188:16 - here and what this else statement will
188:18 - do is it will tell us if we didn't break
188:20 - out of the for Loop so I'm sure you
188:22 - probably haven't seen this before but
188:23 - you can do a four else where if you
188:26 - break this else statement does not run
188:28 - but if no break occurs within the for
188:30 - Loop then this else statement executes
188:33 - so in the else statement here what we'll
188:36 - do is we'll figure out how much they won
188:37 - so we'll say winnings is equal to zero
188:40 - okay and then here we're going to say
188:43 - winnings plus equals and then this is
188:46 - going to be the
188:48 - values at the symbol multiplied by the
188:52 - BET and then we can go here and return
188:56 - the winnings okay so let's look at this
188:58 - because I'm sure this is confusing we
189:00 - have every line in the lines which means
189:03 - We're looping through every row
189:04 - essentially that we're going to be
189:05 - checking that the user bet on we then
189:07 - say the symbol that we want to check is
189:09 - whatever symbol is in the First Column
189:12 - of the current row because all of the
189:14 - symbols need to be the same right we
189:16 - then say for column in column so we now
189:19 - know the symbol that we're going to
189:19 - check now we need to Loop through every
189:21 - single column and check for that symbol
189:24 - so we go to each column and we say the
189:26 - symbol to check is equal to the column
189:28 - at the current row that we are looking
189:31 - at so if it's row zero we're doing row
189:32 - zero if it's Row one row one Etc we then
189:35 - check if these symbols are not the same
189:37 - if they are not the same we break out
189:39 - which means that we're going to go check
189:41 - the next line because they didn't win
189:42 - because symbols were not the same if
189:44 - they are the same then we don't break
189:46 - and if we get to the end of this for
189:48 - Loop and we've not broke out which means
189:50 - all of the symbols were the same then
189:51 - that means that the user won and what
189:53 - they won is whatever the multiplier is
189:56 - for that symbol times their BET right
189:58 - and this bet is the bet on each line not
190:02 - the total BET right so they could win on
190:04 - one line but lose on the other line
190:06 - that's how it works okay hopefully
190:08 - that's clear uh I can't explain it much
190:11 - more than that just understand symbol
190:13 - values here right uh gives us you know 5
190:15 - 4 3 2 so that's what I'm using I'm
190:17 - saying values at whatever the symbol is
190:19 - multiplied by the bet that's how we're
190:21 - adding to the winnings okay so that's it
190:23 - for determining how much they won so
190:25 - let's run the game one full time now and
190:28 - then we'll figure out how we can run it
190:29 - multiple times and reduce the balance
190:31 - and all that which is easier than what
190:32 - we just did okay so we print the slot
190:34 - machine and now we're going to say
190:37 - winnings is equal to and what did I call
190:40 - this uh Che check winnings
190:44 - okay check winnings we need to pass to
190:47 - this our
190:49 - slots the number of lines so I think we
190:52 - called that lines right the BET which we
190:55 - have right here and the values which is
191:00 - called symbol value so let's go symbol
191:02 - uncore value all right then we're going
191:04 - to
191:07 - print
191:09 - U1 and then whatever the amount is that
191:11 - they want so let's make this an
191:13 - string okay and then U1 and then this is
191:17 - going to
191:17 - be winnings like
191:21 - this and this could potentially be0
191:24 - right okay so I think that's good I'm
191:27 - thinking that we might want to also tell
191:29 - them how many lines they want on or what
191:31 - lines they want on so let's actually
191:33 - return that as well from this function
191:36 - so get uh check winnings we're going to
191:38 - do one more thing here we're going to
191:39 - say winning uncore lines is equal to to
191:42 - an empty list and if they win we're
191:45 - going to say winning lines plus equals
191:48 - uh actually not plus equals do append
191:51 - and then this is going to be whatever
191:52 - the current line number is but we're
191:54 - going to have to add one to it because
191:56 - this is an index and we want like line
191:58 - one 23 not 012 so we say winning lines
192:01 - do a pen line plus one then we go here
192:03 - and we put winning lines and now we're
192:05 - returning two values the total amount
192:07 - they won as well as what lines they won
192:08 - on okay now let's go here to winning
192:11 - lines and and we're going to say
192:13 - winnings and winning uncore lines you
192:17 - won these winnings and then we'll say U1
192:22 - we'll print another
192:23 - line like this F U1 on and then this is
192:29 - going to seem a little bit weird but I'm
192:30 - going to do asteris and then I'm going
192:32 - to pass my winning lines now again I
192:34 - promised I was going to show you guys
192:35 - some new stuff so I'm I'm showing you
192:37 - some Advanced syntax here but what this
192:39 - does is it's actually called the Splat
192:41 - operator or the unpack oper operator and
192:43 - it's going to pass every single line
192:45 - from uh this winning Line's list to uh
192:50 - this print function so what that means
192:52 - is if we have lines like one and two
192:54 - it's going to pass both one and two so
192:56 - it's going to say U one on and then one
192:58 - two so I'm going to say you want on
193:00 - lines like this and then it would say
193:02 - one space two if we want on all three
193:03 - lines say one space two space three if
193:05 - we didn't want any lines then it's not
193:07 - going to say anything okay you you'll
193:10 - see when when we print this out how this
193:11 - works so let's
193:13 - run this here let's make this full
193:14 - screen now and let's go through an
193:16 - example so deposit $100 uh how many
193:18 - lines four invalid okay let's bet on two
193:21 - lines how much would you like to bet on
193:22 - each line $10 all right so we won $0
193:26 - because none of the symbols are the same
193:27 - so let's try again all right deposit
193:30 - $100 uh two uh two lines sorry how much
193:33 - would you like to bet $10 you won 0 okay
193:37 - so this is going to happen a few times
193:39 - so rather than continuing to do this and
193:41 - hoping that we're going to win let's
193:43 - make it so that we can run this multiple
193:44 - times without having to constantly rerun
193:46 - the program so we have this main
193:48 - function we have the balance and we have
193:50 - the lines now the balance is going to
193:52 - stay the same but all of this stuff here
193:54 - needs to happen multiple times right and
193:56 - we'll reduce from the balance and all
193:58 - that stuff so let's copy all of
194:02 - this into a function and let's say
194:04 - Define let's say game okay we'll put
194:08 - this inside of here so this kind of
194:10 - executes one game now what we can do is
194:14 - write a w Loop here and this W Loop can
194:17 - kind of handle running the game all
194:19 - right so I'm just thinking here if we do
194:21 - this we need some way to determine like
194:23 - from this instance of the game so like
194:25 - per spin so actually let's just say this
194:27 - is maybe spin we need to know how much
194:29 - they won or they lost so I'm just going
194:31 - to return here the winnings minus the
194:33 - total bet and that will tell us how much
194:36 - they won or lost from this spin because
194:39 - if they won $100 but they bet 15 then
194:41 - they only won 85 so then here we would
194:44 - update and we would add 85 right but if
194:47 - they didn't win anything then it's going
194:48 - to be negative whatever the total bet is
194:50 - so like 15 bucks so we'd subtract 15
194:52 - from the balance okay so here I'm going
194:53 - to say while true and we'll
194:56 - print um current balance is and then we
195:02 - can just put comma actually let's do
195:04 - this as an F string so we can put a
195:05 - dollar sign current balance is and then
195:08 - we'll do dollar sign and then balance
195:11 - okay and then we'll play game so we'll
195:13 - say spin equals input
195:20 - say press enter to spin okay so they'll
195:25 - press enter to spin so actually we don't
195:26 - even need to put a value here because we
195:28 - don't care what they type in or actually
195:30 - we could say this spin is equal to press
195:33 - enter to spin and we'll say Q to quit so
195:37 - if they type in Q then we'll quit so we
195:38 - can say if
195:41 - spin is equal to Q then we will break
195:45 - the wall Loop which will just end the
195:46 - game okay otherwise we'll spin so we can
195:49 - say spin like that and we'll say balance
195:53 - plus equals spin so the way that this
195:56 - works now is that spin is going to
195:57 - return to us however much they won or
195:59 - lost it will tell them like what they
196:01 - won or lost so then we'll just update
196:03 - the balance based on the result of that
196:04 - spin and then we'll run this again to
196:06 - say okay current balance is this press
196:07 - enter to spin blah blah blah and then
196:09 - when they spin they're going to have to
196:10 - uh enter this info and actually
196:12 - press enter to spin probably doesn't
196:15 - make sense to go here right because you
196:17 - only want to spin after you enter your
196:20 - information although we can just have
196:23 - this works we'll say press enter to to
196:24 - play that's fine and then they can do it
196:26 - inside of there uh okay now that we have
196:29 - that I think that's actually all that we
196:32 - need I'll just make one last print
196:33 - statement here that says
196:36 - you left
196:38 - with and then we'll put it inside
196:40 - dollars and then this will be the
196:42 - balance and we'll put an F string here
196:45 - all right let's run this and give it a
196:46 - shop okay so
196:48 - run go here how much you like to deposit
196:51 - let's deposit $1,000 okay current
196:53 - balance is $1,000 press enter to play Q
196:56 - to quit Okay enter uh and we go an
196:58 - object here balance plus equals spin all
197:00 - right looks like we need to fix this so
197:02 - balance is equal to deposit balance plus
197:05 - equals spin we have winning lines
197:07 - subtracted by total bet and what is the
197:10 - problem all right so the issue here is
197:12 - that I accidentally have the name of my
197:14 - function spin the same name as this
197:17 - right here so we're just going to change
197:19 - this to be
197:20 - answer so now this will work properly
197:23 - okay so my apologies guys let's go here
197:25 - and fix this and let's say $1,000
197:28 - current balance is a th000 press enter
197:30 - play okay Enter the number of lines to
197:32 - bet on let's bet on two lines let bet 10
197:34 - bucks okay uh balance is not defined
197:38 - looks like we need to fix another error
197:39 - so what we need to pass here is balance
197:42 - to the spin function so that it can
197:44 - actually check this when we make a bet
197:45 - so of of course that makes sense just
197:47 - forgot to do that so let's pass balance
197:49 - here and now we'll actually be able to
197:51 - check that all right so let's try it
197:53 - again third times a charm $100 current
197:56 - balance is $100 press enter to play okay
197:58 - number of lines let's go three let's go
198:01 - $10 and you are betting on $10 you're
198:05 - betting $10 on three lines total B is
198:06 - equal to $30 okay you won $0 you won on
198:09 - lines and it has an issue here UNS
198:11 - support opin for list and int okay my
198:16 - apologies that's cuz I put winning lines
198:18 - this needs to be
198:19 - winnings all right fourth times a charm
198:22 - so let's make sure our variable names
198:23 - are correct that was just a silly
198:25 - mistake let's clear and run $100 enter
198:30 - three lines $10 okay you won $ Z you won
198:34 - on lines your current balance is $70
198:36 - okay let's play again three lines $5
198:41 - okay did we win anything no we did not
198:43 - all right let's play again I'd really
198:44 - like to try to win something but as we
198:46 - can see the slot machine is not in our
198:48 - favor today $10 you won 0 okay current
198:52 - balance is $25 all right three lines $2
198:56 - you won $4 okay nice so how did we end
198:59 - up winning uh $4 we bet $2 and we got a
199:03 - line here of D's so that gave us uh
199:05 - times two multiplier so 2 * 2 four so we
199:07 - won four bucks there you go and then our
199:09 - balance get up gets updated sorry to 2
199:12 - $3 because we were at 25 uh subtracted
199:15 - six add four yes okay so that makes
199:17 - sense all right so let's play again
199:19 - let's go three lines $1 okay you won
199:22 - nothing let's play again three lines $1
199:25 - you won nothing three lines $1 uh oops
199:29 - uh this is let's go $3 you won nothing
199:31 - okay play again one line $3 you won
199:35 - nothing all right well I won't continue
199:37 - to play but you get the point we have
199:39 - just created a slot machine and now if I
199:41 - hit q and and enter we leave with
199:44 - $11 all right so I think I'm going to
199:47 - wrap it up there I'm going to zoom out a
199:48 - bit so you guys can read more of this
199:50 - code I'll just kind of scroll through it
199:52 - I'll also put it in the description in
199:53 - case you want to reference it on GitHub
199:56 - but you can see this is what we wrote so
199:58 - we did about 150 lines of code in I
200:00 - guess about an hour now I walked you
200:02 - through my thought process I showed you
200:04 - a bunch of different python features we
200:06 - did actually some fairly Advanced logic
200:08 - in terms of looking through rows and
200:09 - columns and looking at nested lists I
200:12 - showed you about functions I showed you
200:13 - about the anonymous variable you saw
200:15 - this uh Splat operator here and when we
200:18 - went on a line you saw it said we won on
200:20 - whatever the line number was so
200:23 - hopefully this was helpful to you guys
200:25 - hopefully this showed you kind of how to
200:26 - structure a program notice that we put
200:29 - everything in separate functions we've
200:30 - kind of spread our code out we've made
200:32 - it very readable and now we know if
200:33 - there's a bug anywhere it's really easy
200:35 - for us to go and kind of figure out
200:36 - where that is because we've separated
200:38 - everything into different units right
200:40 - different blocks of code anyways I will
200:41 - wrap W up here I hope you guys enjoyed
200:43 - this video everybody and welcome to a
200:45 - brand new YouTube video so it's been a
200:48 - while since I've done a kind of beginner
200:49 - project something that really anyone can
200:51 - follow along with regardless of their
200:53 - background in Python and so I wanted to
200:55 - do one for this video so what I'm going
200:58 - to be showing you how to do is actually
200:59 - create a graphical application so this
201:01 - is not just going to be text although it
201:03 - looks like that right now and what's
201:05 - going to happen is we're going to create
201:06 - a turtle racing program so essentially
201:08 - the user will be asked to decide how
201:10 - many turtles they would like to race
201:12 - based on their answer a screen will pop
201:14 - up as I will show you in one second and
201:16 - then it will race that many turtles by
201:18 - just randomly moving them on the screen
201:20 - now this is a great project to learn
201:21 - about how to build something a little
201:23 - bit bigger than a really simple hello
201:24 - world application I guarantee if you're
201:26 - new to python you're going to learn a
201:28 - ton here I purposely used a bunch of
201:30 - different syntax and functions and kind
201:32 - of showed you how we can lay out a
201:34 - relatively large program for beginners
201:36 - this is not a large program by any means
201:38 - in kind of a nice structured way where
201:40 - everything is just done in kind of the
201:41 - proper format so anyways let's go ahead
201:43 - and get started here I'm just going to
201:44 - show you a demo of what we're going to
201:46 - be building so it says welcome to Turtle
201:48 - racing please enter the following
201:49 - information how many turtles would you
201:51 - like to race you can enter between two
201:53 - to eight Turtles I'm going to select
201:55 - eight when I do this it's going to open
201:57 - up the turtle window this is built into
201:59 - python there's nothing fancy you need to
202:01 - install it's going to initialize all of
202:03 - our Turtles and then it's going to start
202:05 - racing them on the screen so it looks
202:07 - like the red one is going to win here
202:09 - let's see and oh maybe not so it says
202:12 - here the winner of the race is pink and
202:15 - then it waits 5 seconds and then it
202:17 - stops now I will show you how we can run
202:19 - this multiple times if you'd like to do
202:21 - that that's the basics behind this
202:22 - program now let me show you one more
202:24 - time if I race say three Turtles notice
202:26 - how they are evenly spaced out on the
202:28 - screen so I'm going to be showing you
202:29 - how we can do that and there you go they
202:31 - race nice and it says the winner anyways
202:34 - let's go ahead and get started so the
202:37 - first thing that I want to do here is I
202:38 - want to ask my user to input the number
202:41 - of turtles that we are going to have so
202:43 - what I'm actually going to do here is
202:44 - I'm going to create a function if you
202:47 - never seen a function before I'll
202:48 - explain them they're pretty
202:49 - straightforward but I'm going to say
202:50 - Define and the name of this function is
202:52 - going to be get uncore number uncore of
202:56 - uncore and then we'll say erasers like
202:58 - this or Turtles whatever you want to
203:00 - call this and then inside of here this
203:02 - is where we are actually going to ask
203:04 - the user to insert the number of racers
203:06 - that they want to have now the reason
203:08 - you're going to see me kind of write
203:09 - things in this way in different
203:10 - functions and kind of different blocks
203:12 - is because it really separates out what
203:14 - every single aspect of our program is
203:16 - doing and it's just good practice when
203:18 - you're writing code to really have all
203:20 - of the different separate things
203:22 - happening kind of in different areas so
203:24 - later on if something goes wrong or you
203:25 - want to add something or change
203:26 - something it's really easy to do that
203:28 - you're not looking through a huge mess
203:30 - of code and well you'll see how this
203:31 - kind of evolves as we go through here so
203:33 - what I want to do is I want to ask the
203:35 - user for a number so I want them to
203:37 - insert a number between 2 and 10 and so
203:39 - I also need to validate that the number
203:41 - there typing in is correct so what I'm
203:43 - going to say is Racers is equal to zero
203:47 - and then I'm going to say while true now
203:50 - the reason I have a w Loop here is
203:52 - because I want to continue to ask the
203:54 - user to insert a number until they
203:56 - insert a valid number so if they insert
203:58 - something invalid then I'm going to keep
204:00 - asking them and say hey no that wasn't
204:02 - valid give me something that's valid
204:04 - because we can't start our program until
204:06 - we know how many turtles we're going to
204:07 - be racing so I start with Racers equal Z
204:10 - I say well true now I'm going to use an
204:12 - input so I'm going to say Racers is
204:14 - equal to and then input like this and
204:17 - I'm going to say
204:18 - enter the number of racers and then I
204:23 - will do kind of a little 2 to1 thing
204:26 - here to indicate the fact that I would
204:27 - like them to type a number that is
204:29 - between 2 to 10 now you don't have to do
204:31 - it like this you can write whatever you
204:32 - want this is what I'm going to prompt
204:34 - the user with and then notice that here
204:36 - I've added a space so after my I
204:38 - have a space the reason I have a space
204:40 - is because the user starts typing
204:42 - immediately after this prompt so this
204:44 - text will be printed to the screen so I
204:46 - want to separate it from the colon so
204:48 - that it doesn't look like they're typing
204:49 - like right beside this line there's like
204:51 - a little bit of a space uh anyways what
204:53 - I'm now going to do is I'm going to
204:54 - check if this what they inputed is a
204:57 - number the reason I need to check if
204:59 - this is a number is if the user didn't
205:00 - input a number obviously that's invalid
205:02 - but also I want to convert what the user
205:04 - types in into a number if I can do so so
205:08 - in Python by default when you use this
205:10 - input statement it's going to C capture
205:11 - whatever the user types into the console
205:13 - and convert that into a string so we
205:16 - need to take that string and potentially
205:17 - convert that into an actual integer a
205:19 - numeric value so that we can use that in
205:21 - our program so I'm going to say if
205:23 - Racers Dot and then is digit this is a
205:26 - method you can call on strings and this
205:28 - will tell you if the string is
205:30 - completely numeric or not so if the
205:31 - string is numeric then what that means I
205:33 - can do is I can convert this into an INT
205:36 - so I can say int eracers if you tried to
205:39 - just do this line without checking
205:40 - beforehand if it it was numeric then
205:42 - this would crash the program because if
205:44 - you had a string that was typed in that
205:46 - was not numeric you say you try to
205:48 - convert say int of Tim to a int right
205:52 - you're trying to convert the string Tim
205:53 - into an INT this is inval that's going
205:55 - to crash you you can't do this so
205:57 - anyways let's move on now if this is not
205:59 - the case so if erasers are or if what
206:01 - the user in input Sur is not a digit
206:04 - then what we want to do is tell them hey
206:06 - this is invalid please try again right
206:08 - so I'm going to print and say uh input
206:12 - is not numeric dot dot dot try again
206:17 - exclamation point and then I'm going to
206:19 - say continue now what this continue does
206:22 - is immediately brings me back to the
206:24 - beginning of the Wallop so we don't
206:25 - really need this continue well we will
206:27 - based on what I write next but think of
206:30 - it this way as soon as we hit this
206:31 - statement it immediately jumps right
206:33 - back up to the top of the loop so
206:35 - anything below this say I had a print
206:36 - statement saying like print high this
206:39 - print statement wouldn't run if we hit
206:41 - this continue before this print
206:43 - statement so that's why I have the
206:44 - continue here all right so if the racers
206:47 - is a digit so if what they inputed is a
206:49 - digit then we are going to convert it
206:50 - into an integer which is valid otherwise
206:52 - we'll tell them it's not numeric they
206:54 - need to try again and then we'll
206:55 - continue now if we make it past this so
206:58 - we don't hit this else and we did make
207:00 - this conversion now we want to check if
207:02 - this number is within the range of 2 and
207:04 - 10 so I'm going to say if 2 is less than
207:07 - or equal to
207:08 - Racers less than or equal to 10 then
207:11 - what I will do is I will just return the
207:15 - racers like that otherwise I will tell
207:18 - them that this number is not valid so
207:21 - the idea here is I check if Racers which
207:22 - is now a number that's why I wanted to
207:24 - convert it to a number so I could do
207:26 - this comparison is less than or equal to
207:28 - two or less than or equal to 10 so if
207:30 - it's within our range of 2 to 10 this is
207:32 - fine what I will do is return Racers so
207:35 - whatever the user typed in we're going
207:37 - to return that from this function which
207:39 - means whatever called this function will
207:40 - now have access access to it otherwise
207:42 - though if this was not valid what I want
207:45 - to do is I want to print number oops not
207:50 - in range 2 to
207:52 - 10 try again exclamation point and then
207:57 - I could put a continue here but there's
207:59 - really no need to do that because
208:01 - nothing comes after this continue in
208:02 - this wall Loop and so by default we will
208:05 - just go back up to the top the reason I
208:07 - have the continue here is because I
208:09 - don't want to check if the number that
208:11 - is not a number right so what the user
208:12 - typed in I don't want to check if that's
208:13 - between 2 to 10 because if I do that and
208:16 - we haven't converted this into a number
208:18 - we're going to get an error let's say
208:19 - you know what the user typed in again
208:21 - was Tim I can't check if two is less
208:24 - than or equal to Tim this is just
208:25 - undefined this operation makes no sense
208:27 - and so that is why I'm continuing to
208:29 - make sure if I don't get a valid number
208:31 - I don't do this comparison and crash my
208:33 - program all right so now we have this
208:35 - function so I'll show you how we can use
208:36 - this right we can just call the function
208:38 - so get number of racers and we can say
208:40 - something like Racers is equal to get
208:43 - number of racers and then we can just
208:45 - print out Racers down here now what will
208:47 - happen is all of the code that we wrote
208:49 - inside of here notice it's indented
208:51 - after the colon right uh it's going to
208:54 - run all this code when we call the
208:55 - function and then as soon as we hit this
208:57 - return statement what will happen is we
208:59 - will actually return back to where we
209:01 - called this function so back to this
209:03 - line and we will pass whatever the value
209:05 - of racers what so Racers will be equal
209:07 - to down here whatever is returned from
209:09 - this line so whatever number the US
209:11 - typed in that was numeric in between 2
209:13 - to 10 then I'm going to print out those
209:15 - number of racers that the user typed in
209:17 - and that's kind of the start of our
209:18 - program then we've got a few more stuff
209:20 - few more steps sorry to do after that so
209:22 - let's try running our program I'm going
209:23 - to say python turtler R tutorial. piy
209:26 - again if you're an idle just press F5
209:29 - and come on enter is this going to
209:32 - work uh okay something's wrong with my
209:34 - terminal python Turtle race tutorial. P
209:38 - okay Enter number of Racers 2 to 10
209:40 - let's enter five and and then it prints
209:41 - out five now let's try something inval
209:43 - let's try Tim now it tells me input is
209:45 - not numeric try again let's try uh Joe
209:49 - not numeric try again let's try 11
209:51 - number is not in range let's try 10 boom
209:53 - that works we get 10 awesome so this is
209:56 - indeed working we just did a few tests
209:58 - here and you can see that down here we
210:00 - are getting access to whatever this
210:02 - function returned so now that we have
210:04 - the number of racers what we want to do
210:06 - next is actually set up our total screen
210:08 - so I will show you what I mean by that
210:10 - but let's start by importing the turtle
210:12 - module so the turtle module is built
210:15 - into Python and this allows you to
210:17 - perform very basic 2D graphic operations
210:20 - with this thing called a turtle so
210:22 - you'll see it in a second but
210:23 - essentially it's like a little kind of
210:25 - header on the screen and you can kind of
210:27 - move it around it will draw lines and
210:28 - it's a really great way to just learn
210:30 - the basics of python in a nice visual
210:32 - way so now we have the number of racers
210:35 - now we've imported turtle and let's
210:37 - actually just see what happens now when
210:38 - we run the program after importing
210:40 - turtle so we're going to run this uh
210:43 - let's import our number of racers we can
210:45 - go four and we actually see that nothing
210:47 - happened hm I was thinking the turtle
210:49 - screen might pop up but it's I think
210:51 - it's because I haven't used this module
210:53 - yet so anyways that that was a poor
210:55 - example what I'm going to do next is
210:57 - show you how we can create a turtle
210:58 - screen so ignore that last example uh
211:01 - what I was expecting to happen didn't
211:02 - happen often times when you import a
211:04 - module like something will happen when
211:06 - you import it so what I'm going to do
211:08 - now at the top of my screen is I'm going
211:09 - to Define first of all the width and the
211:12 - height that I want my turtle screen to
211:13 - be so usually whenever you're working
211:15 - with Graphics you need to define the
211:17 - size of a screen or the size of the
211:19 - canvas you're going to be working on so
211:20 - in this case I'm going to say in all
211:22 - capitals width comma height is equal to
211:25 - and then 500 comma 500 if you haven't
211:27 - seen this notation before this means
211:29 - width is equal to 500 height is equal to
211:31 - 500 you can separate as many variables
211:33 - by commas as you want and then do the
211:35 - assignment with commas as well so the
211:37 - reason I'm doing this in all capitals is
211:39 - because these are constant values so in
211:41 - programming whenever you have a constant
211:43 - value in a language where you can't
211:44 - explicitly Define that you usually have
211:47 - all capital letters to denote the fact
211:49 - that this value width and this value
211:51 - height will never change they're just
211:53 - here so that we have easy access to the
211:54 - width and the height all right so now
211:56 - that we have the width and the height we
211:58 - want to set up the turtle screen so
212:00 - we're going to start by creating a
212:01 - screen so we're going to say screen is
212:04 - equal to and then Turtle Dot and then
212:07 - all capitals screen now what this is
212:09 - going to do is initially a screen for us
212:12 - with this Turtle module and then we can
212:14 - kind of set some properties of this
212:15 - screen the first of which is going to be
212:17 - the width and the height so now that I
212:19 - have my screen I'm going to say screen
212:22 - Dot and then this is set up and here
212:24 - we're going to pass the width and the
212:27 - height so this method right here takes
212:29 - two arguments a width and a height of
212:31 - the screen and then it makes the screen
212:33 - that size so now that we have that let's
212:36 - run the program and let's see what we
212:38 - get so python Turtle race. pi and and
212:40 - notice you can see a screen pops up here
212:43 - immediately and then it's asking me to
212:45 - input the number of racers so I can
212:47 - input say five and then the program ends
212:49 - and the screen automatically closes
212:51 - great but when I do this notice that uh
212:54 - we get python Turtle Graphics as the
212:56 - name of our window we might not want
212:59 - that we might want to change the name so
213:01 - let's actually go ahead and do that so
213:02 - I'm going to close this uh probably
213:04 - should have left the CMD open but that's
213:06 - fine and now I'm going to say screen.
213:08 - tile and in here I'm going to put
213:10 - whatever I want the name of that window
213:12 - to be so I'm going to make mine turtle
213:15 - racing exclamation point now let me go
213:17 - and open up my command prompt again uh
213:20 - you can kind of ignore what I'm typing
213:21 - I'm just trying to get to where my file
213:23 - is so python Turtle race tutorial. py
213:27 - when I run this notice now the title has
213:28 - changed to Turtle racing awesome so
213:31 - let's just input a number and end the
213:32 - program there let me make this guy a
213:34 - little bit smaller okay so now we've
213:36 - gotten the number of racers we have set
213:38 - up the turtle screen and what we want to
213:41 - do next is actually create our Turtles
213:44 - right we want to start racing them on
213:45 - the screen so I'm going to start by
213:47 - showing you kind of the basic commands
213:49 - of a turtle so how you kind of move a
213:50 - turtle around the screen some of the
213:52 - things that are associated with it and
213:53 - then we'll create a bunch of different
213:55 - Turtles and then obviously Ras them so
213:57 - what I'm actually going to do though is
213:58 - I'm going to take all of this code
213:59 - related to The Turtle stuff so the
214:01 - screen setup the screen title all of
214:03 - that and I'm actually going to move that
214:04 - to underneath where my Racers are and in
214:07 - fact I'm actually going to make a new
214:08 - function I changed my mind I'm going to
214:10 - call this a
214:11 - nitor turtle and inside of this function
214:14 - we're going to set up everything related
214:17 - to our kind of turtle screen now the
214:19 - reason for this again is that we just
214:21 - want to kind of structure our program
214:22 - nicely so we won't show the turtle
214:24 - screen until we call this a knit Turtle
214:27 - function so after we get the number of
214:29 - racers then we can pop up the turtle
214:31 - screen because I don't really want it to
214:32 - be shown until we've picked the number
214:34 - of turtle erasers that we have so after
214:36 - we get the number of erasers we can say
214:38 - a knit turtle that will just run all of
214:40 - the code in here so we'll set up our
214:41 - Turtle screen so let's actually go ahead
214:43 - and run this uh and let's see what
214:45 - happens notice that the turtle screen
214:46 - hasn't popped up this time but then when
214:48 - we type four it kind of popped up really
214:50 - quickly and then it closed because as
214:52 - soon as we pop it up the program ends
214:54 - there's nothing more that we need to do
214:55 - we're on a good start now that's kind of
214:57 - what we wanted to do okay so now I'm
214:59 - going to show you how we can kind of
215:00 - move a turtle around the screen so to do
215:02 - this you need to start by creating a new
215:04 - turtle object so to create a new turtle
215:07 - object what you need to do is say and in
215:09 - this case we'll just say eraser is equal
215:11 - to and then Turtle Dot and then with a
215:14 - capital T this time Turtle so what this
215:17 - will do is actually create kind of a
215:18 - drawing object for you on the canvas
215:21 - that you saw that white canvas that
215:22 - popped up and then what you can do with
215:24 - this is you can move it around so I'm
215:26 - going to say eraser Dot and then just to
215:28 - show you one method you can use forward
215:30 - I'm going to move it forward by 100
215:32 - pixels now I'm going to do something
215:34 - here that may seem a little bit
215:36 - confusing but I'm going to import a
215:37 - module called time at the top of my
215:40 - program
215:41 - and down here this is really the only
215:42 - new code that we've added right after I
215:44 - move my racer forward by 100 pixels I'm
215:47 - going to say time do sleep and then five
215:50 - what this will do is pause the program
215:52 - for 5 seconds so that after we move our
215:54 - Turtle we have a second to actually see
215:55 - where it went we don't just immediately
215:57 - close the turtle window although we may
215:59 - or may not do that um immediately close
216:01 - the turtle window anyways we'll we'll
216:03 - see here after this happens so let's run
216:06 - this code right now and let's see what
216:08 - happens we'll say four and then notice
216:10 - it opens this Turtle window and then it
216:12 - moves this kind of pointer over here by
216:15 - 100 pixels and then it closes obviously
216:17 - because now uh we are no longer sleeping
216:19 - so hopefully that kind of made sense but
216:21 - you you would have seen uh let's run
216:23 - this one more time that it opens up the
216:25 - window it moves our little pointer here
216:27 - which funny enough isn't actually a
216:28 - turtle right over 100 pixels and then it
216:31 - closes so this is one of the methods you
216:33 - can use with your turtle the turtle will
216:36 - start in the middle of the screen the
216:38 - turtle is really that drawing kind of
216:39 - arrow that you saw and every single time
216:41 - you move it it will create a line so you
216:44 - don't only have to move it forwards you
216:45 - can move it backwards and you can also
216:47 - change its directions you can set it to
216:49 - move maybe in 90° you can set it to go
216:51 - left you can set it to go north east
216:53 - west whatever Direction system you want
216:55 - to use you can set it to go in that
216:56 - direction so I can say racer. left and
216:59 - then I can make it go left by 90° and
217:02 - then I can say racer do forward move it
217:05 - forward 100 again and then I can say
217:07 - raser dot and then let's just go left
217:11 - we can go left another 90° and then we
217:13 - can say eraser dot backwards uh is it
217:16 - backward or backwards well I guess we'll
217:18 - see when we run this then by 100 pixels
217:21 - so let me run the code now python tur
217:24 - race. pi and there we go oh so it's
217:26 - saying Turtle object has no attribute
217:29 - backwards that is because this is
217:32 - backward not backwards with the S so
217:34 - just don't add the s for the plural
217:36 - there and let's give this a shot now so
217:39 - python Turtle eraser
217:41 - and there you go that's what happened
217:43 - see we went right uh or sorry went
217:45 - straight then we went left then we
217:46 - turned uh left again but then instead of
217:49 - going forward we went backwards and so
217:51 - we went the other direction so you can
217:53 - kind of mess around with these uh
217:54 - forward left there's also right and
217:57 - inside of these methods here what you're
218:00 - placing is at least inside of the right
218:02 - method is the angle at which you want to
218:04 - turn the turtle so if you want it to
218:06 - turn 90° you put 90 if you want to turn
218:08 - 180° you put that if you want to turn 45
218:10 - de you put 45 I'll let you guys mess
218:13 - with that on your own and then this the
218:15 - number of pixels is well how far you're
218:17 - moving the actual Turtle so when we open
218:20 - up the turtle window and let me time.
218:21 - sleep for say 20 seconds here just so we
218:24 - have lots of room so I can explain kind
218:26 - of the coordinate system so let's run
218:29 - this let's open up the turtle window all
218:31 - right so this Turtle window is 500x 500
218:34 - pixels so the height is 500 pixels and
218:36 - the width is 500 pixels now the very
218:39 - middle of this turtle canvas it has the
218:41 - position of 0 0 so the top of the canvas
218:45 - has a position of 250 the bottom of the
218:47 - canvas has a position of -250 the left
218:50 - of the canvas is -250 and the right of
218:53 - the canvas is 250 let me open this up
218:56 - again uh the way this works right is
218:58 - that if the middle is 0 0 and we have a
219:00 - height of 500 then the top y position on
219:04 - our canvas when we're talking about just
219:05 - a standard 2D graph is going to be 250
219:08 - whereas the bottom y position is going
219:10 - to be -250 so as you increase your y you
219:13 - go up as you decrease your y you go down
219:16 - as you decrease your X you go to the
219:17 - left as you increase your X you go to
219:19 - the right hopefully that makes sense and
219:22 - again - 250 and positive 250 the reason
219:25 - that's the top in the bottom is because
219:27 - the height is 500 I just divided 500 by
219:29 - two and then applied a negative to one
219:31 - of the bounds hopefully that's making
219:33 - sense but that is the coordinate system
219:35 - the reason that's important is because
219:36 - when I say I move 100 pixels uh well we
219:39 - need to understand where that's actually
219:40 - going to move us to and what scale this
219:42 - is on so when I'm moving 100 pixels I'm
219:44 - really moving 1 of either the height or
219:47 - the width of the screen depending on the
219:48 - direction that I'm moving in so we're
219:50 - going to rase our Turtles going up the
219:52 - screen but you could totally erase them
219:54 - going to the right going to the left
219:55 - whatever Direction you want now a few
219:57 - more methods that are useful when we're
219:59 - talking about turtles here are things
220:00 - like the actual icon that's representing
220:03 - the turtle as well as the speed of our
220:04 - Turtle so what I can do here is I can
220:06 - change my Racer Speed so I can say
220:08 - racer. speed and then set this equal to
220:11 - say two now let me actually check what
220:13 - the racer speeds are okay so I just
220:15 - checked what the different Turtle speeds
220:17 - are here you can see that these are the
220:19 - potential speeds we have so we can
220:21 - insert a speed between 0 to 10 and let
220:23 - me just show you this method again we
220:24 - have the turtle object that we've
220:26 - created do speed so we can set the speed
220:28 - of it to be slow or fast because you
220:30 - kind of saw how it was moving around the
220:31 - screen right so if we go here uh oops
220:34 - let's go back to Google we can see 0 to
220:36 - 10 where zero actually means we're going
220:39 - the absolute fast fast as we can
220:40 - possibly go one is the slowest and then
220:43 - 10 is fast so really it's 1 to 10 and
220:45 - then if you input zero it's saying just
220:47 - go as fast as the turtle can possibly
220:49 - move so let's try putting in a value of
220:51 - say two or even one and let's see how
220:53 - slow this Turtle gets when I change its
220:55 - speed so I change it speed let's run and
220:59 - now notice it's moving much slower than
221:01 - it was before there we go that is our
221:04 - Turtle uh oh yes it's going right now
221:06 - because I put that right 90° awesome so
221:09 - let's wait for this to close and then I
221:11 - will show you that we can change say the
221:12 - color of the turtle and we can change
221:14 - what the actual icon looks like and all
221:16 - of that in fact I'm not going to wait
221:17 - for it let's just do it now so if I want
221:18 - to change the icon of the turtle what I
221:21 - can do is say raser dot and then I
221:23 - believe uh I'm actually going to have to
221:24 - look at my other screen here for a
221:26 - little cheat sheet this is the shape
221:28 - that's what it's called so I've been
221:30 - referring to this as the icon it's
221:31 - actually the thing you're seeing on the
221:33 - screen but there's a bunch of different
221:34 - shapes that you can choose for your
221:36 - turtle so I want to make mine turtle but
221:38 - some other valid ones I think are uh
221:42 - Circle we have arrow and then you're
221:44 - welcome to look up the other possible
221:46 - shapes that you have for turtle I can't
221:47 - remember all of them but I know that at
221:49 - minimum two of them that exist are
221:51 - turtle and uh Circle and then obviously
221:54 - there is Arrow as well so sorry those
221:56 - are the three that I know that exist
221:58 - okay so let's change this to a turtle
222:00 - now and let's see what happens this time
222:01 - when I run my program I'm going to
222:03 - remove the sleep because I've slowed
222:05 - down the turtle so hopefully we have
222:06 - enough uh time to see it now so let's
222:09 - run this enter some number and now
222:11 - notice we get an actual turtle moving
222:13 - around the screen awesome so that is
222:15 - good now I will show you how we can
222:17 - change the uh color of the turtle so to
222:19 - change the colors pretty straightforward
222:21 - you can say racer docolor and then
222:23 - inside of here you can put a string that
222:24 - represents the color you want to change
222:26 - this too so there's like a ton of
222:28 - different possible colors here I won't
222:29 - go through them all but for example one
222:31 - is Scion we could do red we could do
222:34 - green we can do blue we can do yellow
222:38 - black orange so on and so so forth so
222:40 - let's just change this to Scion so let's
222:43 - run our code here and notice that now we
222:46 - get a Scion turtle and that the line
222:48 - that it has is Scion as well now there's
222:50 - a ton of other stuff you can do with
222:51 - turtles uh if you want to see all of
222:53 - that I would just recommend you just
222:54 - look up Turtle python like that and then
222:58 - you can see if you go to the turtle
223:00 - documentation here that there's a whole
223:02 - list of all of the possible stuff that
223:03 - you can do with your turtle so I'll be
223:05 - showing you some of this but I won't
223:07 - obviously go through all of it okay so
223:10 - the next thing to show you is what is
223:11 - called turtle. pen up so whenever the
223:14 - turtle's moving around the screen you
223:16 - notice it was kind of drawing that line
223:17 - right and we're calling that the pen so
223:20 - as the turtle moves it's kind of a pen
223:21 - and it's drawing this line on the screen
223:24 - now if we want it to not draw the line
223:26 - but we still want it to move we can
223:27 - bring its pen up so we can say
223:30 - eraser. pen up like that and now you're
223:34 - going to notice when I run this program
223:35 - after I've moved the pen up is that as
223:38 - we move this Turtle around the screen
223:39 - scen no line is being drawn right
223:41 - because its pen is up so what I can do
223:43 - is I can move the turtle with its pen up
223:46 - I can put its pen down and then I can
223:47 - continue drawing so let's copy this line
223:50 - let's move the turtle uh forward by 100
223:52 - left by 90 and then let's put its pen
223:54 - down so we're going to say
223:56 - eraser. pen dep so let's do this now
224:01 - python Here and Now notice that as soon
224:03 - as it turns that corner then the pen
224:05 - goes down so all this stuff I'm showing
224:07 - you you can change at any point in time
224:09 - you don't have to change before the
224:10 - turtle starts moving or something like
224:11 - that all right so now I've showed you
224:13 - pretty much everything I need to in
224:14 - terms of the different methods for the
224:16 - turtle object just keep in mind you can
224:18 - make as many Turtle objects as you want
224:19 - so I said racer equals turtle. Turtle I
224:22 - can make a second uh Turtle right say
224:23 - Racer 2 and then I can move these
224:25 - turtles in different directions so just
224:27 - to give you a quick example we can copy
224:29 - all of this and then we can just change
224:31 - this to be say raser two and we'll just
224:35 - make racer two a different color so
224:36 - instead of Scion we'll make it say brown
224:39 - like that maybe we'll make it speed a
224:41 - bit faster and then we'll change it so
224:43 - it goes forward like 150 just so you can
224:45 - see the difference in these two turtles
224:48 - so let's change that to be 150 again
224:51 - notice I just had Racer 2 we can kind of
224:54 - copy this and put it down here to
224:56 - separate these things out all right so
224:57 - let's try this now so let's go python
224:59 - turtler race tutorial. py uh let's enter
225:02 - a number of racers three and then notice
225:04 - the first racer is going to move around
225:06 - and then our second guy kind of started
225:07 - moving really quickly right because we
225:09 - wrote All this code after we wrote this
225:11 - code so I'm going to delete all of this
225:13 - just wanted to show you that and now
225:16 - what we are going to do is we are going
225:17 - to pick the colors of the different
225:19 - Racers that we have so once we know how
225:21 - many racers we have we need to kind of
225:23 - create all of these Turtle objects and
225:26 - we need to pick their colors so I'm
225:28 - going to create a list of colors up here
225:30 - in all capital and I'm just going to
225:31 - type out a bunch of them I have a list
225:33 - on my other monitor in case you see me
225:34 - looking over there so I'm going to say
225:36 - red uh we're going to say green we'll
225:38 - say blue blue uh we'll say
225:42 - orange we have if I can get my cursor
225:45 - here correctly yellow we have what's
225:48 - another one
225:50 - black purple we then have pink and I do
225:55 - yellow yes I did what's the last one we
225:57 - have brown and Scion okay Brown and then
226:02 - Scion now note that there is a lot more
226:03 - colors in this I'm just doing 10 for
226:05 - right now so we can have at most 10
226:07 - turtles so now that we have all of these
226:10 - colors we kind of need to pick after
226:12 - we've uh gotten our number of racers
226:14 - what Turtle colors we actually want to
226:16 - use so I'm going to show you a cool way
226:18 - that we can do this so we can randomly
226:20 - select a bunch of colors from this color
226:22 - list that are unique so at the top of my
226:24 - program I'm going to import random all
226:28 - of these modules are built into python
226:29 - you don't need to install them or
226:30 - anything like that and then down here
226:32 - what I'm going to do is I'm going to say
226:35 - random. Shuffle and I'm going to shuffle
226:38 - my list of colors so all this Capital
226:40 - list right here now what this is going
226:42 - to do is it's going to take the list and
226:44 - just randomize all of the items inside
226:46 - of it so I have no idea where these
226:47 - items are going to go but all of the
226:49 - items that I have here will just be kind
226:50 - of randomly placed around in the list
226:53 - then what I'm going to do is I'm going
226:54 - to select the first number of racers
226:57 - item from this list that that are there
226:59 - and we'll use that as our colors so I'm
227:01 - going to say colors is equal to and then
227:04 - colors and then this is going to be a
227:06 - slice up to the number of racers that we
227:08 - have so let me just quickly explain this
227:10 - we've gotten the number of racers we've
227:12 - initialized the turtle we're shuffling
227:14 - that CS list so just randomizing the
227:16 - order of all the elements there and then
227:18 - what this does is this gives us the
227:20 - first Racers item from the list so if we
227:24 - had a list say 1 2 3 comma 4 and then we
227:27 - put this little slice operator this is
227:29 - what it's called when you use the colon
227:30 - and we set up to say two what this would
227:33 - give me is the first two elements in
227:35 - this list so I would get a new list that
227:37 - looks like 1 comma 2 two now if I did
227:40 - the slice of say three then this would
227:42 - give me the first three elements so 1 2
227:45 - 3 that's kind of the basics of a slice
227:48 - so the reason we're doing that is we're
227:49 - randomizing the list and then just
227:50 - taking the first say number of elements
227:53 - that number is equal to whatever the
227:54 - number is the user types in so now let
227:57 - me show you this we're going to print
227:59 - the cols after the user types in the
228:02 - number of turtles they want to race so
228:05 - let's do this python Turtle race let's
228:07 - in insert five and then notice it kind
228:09 - of popped open that Turtle window closed
228:11 - it and then it printed yellow purple
228:12 - green orange brown now if I do this
228:14 - again and I type five you're going to
228:16 - notice we get different colors right and
228:17 - they're in a different order so black
228:18 - red orange brown scon now this uh 100%
228:22 - will always select unique colors for us
228:25 - so we'll never have turtles that have
228:26 - the same color all right now that we
228:29 - have all of the colors we want to create
228:31 - all of these turtles so we're going to
228:32 - make a new function here we're going to
228:34 - say Define and then create uncore
228:37 - Turtles now inside of here we're going
228:39 - to create a list of turtles and then we
228:42 - are going to kind of place them on the
228:43 - screen in their starting position so
228:46 - ideally we want to have all of the
228:47 - turtles evenly spaced out at the bottom
228:49 - of the screen and kind of pointing
228:50 - upwards ready to start racing so let me
228:53 - show you how we do that well the first
228:54 - thing that we need to do here is we need
228:56 - to determine what colors our Turtles are
228:58 - going to be and how many turtles we're
228:59 - going to have so this function as a
229:01 - parameter is going to take in colors so
229:04 - we are going to pass this function when
229:06 - we actually decide to call it the number
229:08 - of colors that we have and then what
229:10 - that's going to or not the numberers
229:11 - sorry just the colors that we've
229:13 - actually selected and by having this
229:15 - list here we will also know how many
229:17 - turtles we have because the number of
229:18 - elements in this list will tell us the
229:20 - number of turtles that we want to race
229:22 - so now what we're going to do is we're
229:23 - going to say that Turtles is equal to an
229:25 - empty list then we're going to Loop
229:28 - through all of the colors that we have
229:29 - and for every single color we're going
229:31 - to create a turtle and add it into the
229:33 - list the reason I'm creating a list is
229:35 - because I don't know how many turtles
229:36 - I'm going to have so I can't just Define
229:38 - variables with like you know I can't
229:40 - find four variables for four different
229:41 - turtles or five variables for five
229:43 - different Turtles I need to kind of
229:44 - dynamically create these turtles because
229:47 - again I don't know how many I'm going to
229:48 - have so I'm going to Loop through now
229:49 - all of my colors I'm going to say 4 I
229:52 - comma and then color in a numerate and
229:55 - this is going to be colors and what a
229:57 - numerate does is it gives me the index
229:59 - as well as the value of all of the
230:01 - elements in colors so if I'm looping
230:03 - through colors let's say like red and
230:05 - then green then what's going to happen
230:07 - is on on my first for Loop iteration I
230:09 - will be equal to zero that's the
230:11 - position of this color color will be
230:13 - equal to red and that's great then on my
230:15 - next iteration I will be equal to one
230:17 - and color will be equal to green and if
230:19 - I had one more iteration say this was
230:21 - blue then I would be equal to two
230:23 - because this is the third element or the
230:25 - second index SL position and then the
230:27 - color will be equal to Blue so that is
230:30 - what a numerate does gives us both the
230:31 - index and the value now what I want to
230:34 - do is create a turtle so I'm going to
230:36 - say raser is equal to and notice you can
230:38 - name these variables plus whatever you
230:39 - want and I'm going to make this equal to
230:42 - turtle. Turtle just like we saw
230:44 - previously and then immediately I'm
230:45 - going to change the color of this Turtle
230:47 - to be whatever color this is so I'm
230:49 - going to say eracer do color and I'm
230:51 - going to make this uh oops if my Sublime
230:54 - Text stops crashing okay it's crashing
230:56 - so I'll be back after this stops
230:58 - crashing all right so I am back that was
231:00 - really annoying Sublime Text just
231:02 - crashed on me but I have eraser docolor
231:04 - and I'm going to set this color to be
231:05 - equal to color the reason I'm setting it
231:07 - equal to color is because this will be a
231:09 - string this string will come from this
231:11 - list of colors right here and so every
231:13 - one of our eracers will be a different
231:15 - color then what I need to do is set a
231:17 - few other things I want to set the shape
231:19 - so I'm going to say eraser. shape and
231:21 - this is equal to a turtle then what I
231:23 - want to do is place this racer in its
231:26 - starting position now before I do that
231:28 - I'm going to show you where they placed
231:30 - initially but I also want to turn these
231:32 - Racers so I want to say eraser. left by
231:36 - 90° now the reason I'm doing this is
231:38 - because by default the kind of arrows or
231:40 - whatever are pointing to the right so if
231:43 - I want them to point upwards cuz I want
231:44 - to race my uh Racers upwards and my
231:46 - turtles upwards then I need to turn them
231:48 - left by 90° so I'm going to take my
231:51 - Eraser or make my Eraser which is just a
231:53 - turtle I'm going to set its color I'm
231:54 - going to set it shape I'm going to set
231:56 - it's kind of heading so it goes in and
231:57 - is facing upwards and then I'm going to
231:59 - add it to this list so I'm going to say
232:01 - turtles. append and then I will append
232:04 - my Eraser this way I have access to all
232:07 - of my turtles and then later on I can
232:08 - actually say move these Turtles forward
232:10 - right and we'll move them by a random
232:12 - amount and that will kind of simulate
232:14 - these Turtles being raced now I'm just
232:15 - looking at my other screen here one more
232:17 - thing that I'm going to do here is I'm
232:19 - actually going to put my Racer's pen up
232:21 - so I'm going to say eraser. pen up and
232:24 - then immediately going to say racer. pen
232:26 - down and inside of here I'm going to set
232:29 - the position of my Eraser so we'll just
232:31 - say set pause and we'll do that in one
232:34 - second all right so now let's run this
232:36 - code here so python Turtle race tutorial
232:39 - Pi let's insert a number let's say three
232:41 - and what happened ah well we need to
232:43 - call this function if we want to see
232:45 - anything happening so after we get our
232:47 - Colors Let's call create Turtles and
232:50 - let's pass our colors so now we'll have
232:52 - all the colors here we'll Loop through
232:54 - them and create our Racers for each all
232:57 - right so let's run this python Turtle
232:59 - race let's go five and notice when I do
233:01 - this it kind of spins up five Turtles
233:03 - they they you know Spin To the Left
233:05 - they're all different colors and then
233:06 - it's done so obviously this is not ideal
233:08 - right all my Turtles start in the middle
233:10 - of the screen and so I need to move them
233:12 - so they are at the bottom of the screen
233:14 - now I could move them like backwards
233:16 - turn them left move them to their
233:17 - correct position but that's kind of a
233:19 - pain so there's this method for our
233:21 - Turtles called set position uh actually
233:24 - let me make sure it's called that yes
233:25 - it's called set pause so eraser. set
233:27 - pause and this takes an X and Y value
233:30 - and will set the position of your turtle
233:32 - to well this position so this is why I'm
233:35 - putting the pen up then I'm going to set
233:37 - the position then I'm going to put the
233:39 - pen down so when I move this Turtle to
233:41 - its position I don't draw a line from
233:43 - the middle of the screen to wherever it
233:44 - goes because that's just not optimal
233:46 - that's not ideal that's not what we want
233:47 - to do here so inside of set paw I need
233:50 - to choose an X and A Y value for my
233:53 - turtle now the Y value is pretty easy
233:55 - because all of my turtles will start at
233:56 - the same Y and then they'll kind of
233:58 - increase their y as they race upwards so
234:00 - we know what the yv value will be or we
234:02 - can just pick some random yv value but
234:04 - what is the x value going to be well I
234:07 - want to space these Turtles out
234:09 - completely evenly right so let me open
234:11 - up my kind of Windows ink pad here uh
234:14 - where even is Windows Inc H okay so I've
234:17 - just opened up paint here I
234:18 - unfortunately couldn't find the windows
234:20 - ink thing that I normally use I don't
234:21 - know where they would have HIIT it from
234:23 - me but anyways apparently it's gone so
234:25 - go easy on me I'm just using my mouse
234:26 - but I'm going to illustrate what we're
234:27 - going to do here so we have our canvas
234:29 - right now our canvas is of size 500 by
234:32 - 500 but to make math a bit easier we're
234:33 - going to say it's 400 uh by 400 again my
234:39 - Mouse is really hard to draw with okay
234:40 - so 400 by 400 now we want all of our
234:43 - Turtles to kind of be placed near the
234:44 - bottom of the screen so to pick this
234:46 - position is pretty easy we can kind of
234:48 - just take like the height of the screen
234:50 - we can divide it by two we can add a
234:52 - small value to it and then we'll say all
234:54 - right well that's where we want to place
234:55 - the turtles at that negative coordinate
234:57 - because right here in the middle is 0 0
235:00 - right so as we go down this is negative
235:02 - so if we place that -200 they'd be like
235:04 - right at the bottom of the screen so we
235:06 - can move it up like 10 pixels and then
235:07 - that would bring us to this kind of red
235:09 - line that we have right here now the
235:11 - question becomes though what are the X
235:13 - values of our turtles so obviously we
235:14 - want our Turtles to be kind of spaced
235:16 - out if we have two turtles we probably
235:18 - want them somewhere like here and here
235:21 - right want them equal distance from each
235:23 - other and then equal distance from the
235:25 - edge of the screen now I know this isn't
235:27 - exactly equal distance but hopefully
235:30 - you're kind of getting the idea now if
235:31 - we have three Turtles we want one guy in
235:32 - the middle one guy here and one guy here
235:36 - this way they're equidistance from the
235:38 - edge of the screen
235:39 - and from each other so how do we figure
235:41 - out the x positions well what we
235:44 - actually need to do is we need to figure
235:46 - out first of all this spacing between
235:47 - our Turtles then what we can do is we
235:49 - can start our first turtle at whatever
235:51 - the spacing amount is we can then add
235:54 - whatever the next spacing is to what our
235:56 - next Turtle then our next spacing and so
235:59 - on and so forth so how do we figure out
236:02 - the spacing between the turtles well we
236:04 - actually take this number right here
236:06 - sorry this number right here which is
236:07 - the width of our screen and we divide it
236:10 - by the number of turtles that we have
236:11 - plus one so I want you to see this
236:14 - example if we take 400 and we have four
236:18 - turtles a lot of people would say well
236:19 - the spacing between each Turtle should
236:21 - be 100 pixels now the reason why that
236:24 - would actually be incorrect is because
236:26 - that would assume the first Turtle
236:27 - starts at the far left hand side of the
236:30 - screen so if I put my first Turtle right
236:33 - here and then I go 100 pixels over my
236:37 - next turtle is at position
236:39 - 100 right if we're talking about the X
236:42 - then my next guy comes over here and
236:44 - he's at 200 and then my next guy comes
236:47 - here and he's at 300 it's really hard to
236:50 - do a three clearly this is my attempt at
236:53 - a three okay so 100 200 300 and then
236:56 - this first guy's obviously at zero so we
236:58 - don't want that we want to kind of shift
236:59 - this whole line over so there's equal
237:01 - distance between all of the turtles and
237:03 - the edge of the screen so what we really
237:05 - need to do is we need to divide this
237:07 - number by five and then we need to start
237:09 - our turtle at the first spacing position
237:12 - so if we take 400 and we divide this by
237:14 - five oh God this is testing my math
237:17 - skills 400 divid 5 should give us a
237:21 - value of 80 yeah I think 80 is correct 8
237:25 - * 5 yeah 40 400 yeah okay 80 is correct
237:28 - so now if we do this at 80 let me kind
237:30 - of erase all of this here we'll say that
237:32 - our first Turtle gets placed at position
237:35 - 80 so the first guy goes right here uh
237:39 - should I even attempt to do an eight
237:40 - okay we have8 zero then our next guy is
237:44 - going to go at
237:46 - 160 and then we'll move over again and
237:50 - then our next guy is going to go at
237:54 - 240 our next guy will go at
237:59 - 320 and then this will be perfect we'll
238:01 - have our four turtles they'll be equal
238:02 - distance from the edge of the screen and
238:04 - equal distance from each other now I
238:06 - know this seems like they're not equal
238:07 - distance because I've kind of dro on
238:08 - this not to scale but that's the idea
238:10 - behind this so hopefully this long
238:12 - explanation gave you the idea of what
238:14 - we're doing we're going to divide the
238:15 - value that we have here by the number of
238:17 - turtles plus one then we're going to
238:19 - place the first turtle at spacing um
238:21 - position so whatever the spacing is so
238:23 - starting at 80 the rest of them will go
238:25 - up by the increment of spacing every
238:27 - time so we'll leave that kind of open in
238:29 - the background in case we need to refer
238:31 - to it again but this means we are going
238:33 - to set the position and we need to
238:35 - figure out the turtle spacing so I'm
238:37 - going to say spacing X is equal to and
238:39 - then the L of colors this is the number
238:42 - of turtles that we have right plus one
238:44 - we're going to put these in parentheses
238:46 - and we're going to start by
238:48 - dividing the width by two so we're going
238:51 - to say width divided by two sorry not
238:53 - width divided by two width divided by
238:55 - the Len of colors plus one so whatever
238:57 - our width is we divide it by the number
238:59 - of turtles plus one which is really just
239:00 - the number of colors that were given to
239:02 - us and there we go so now where do we
239:05 - want to start placing our Turtles well
239:06 - what I was showing you before as I was
239:08 - saying with placing at 0 80 so on and so
239:10 - forth the only issue with that is that
239:12 - when we're at the left so we're to the
239:13 - left of the middle of the screen we're
239:15 - at a negative coordinate right so really
239:17 - when we're dra drawing the kind of
239:19 - coordinate axes here this is 0 0 so as
239:22 - we're over here we're in the negatives
239:25 - so that's fine all that means is we need
239:26 - to add the negative width over two uh as
239:29 - our starting position to all of these
239:31 - right here so the first position for our
239:34 - Turtle will actually be at negative
239:36 - width over two plus this value right
239:39 - here the reason that will work is
239:41 - because we will subtract this by
239:45 - -200 and then -200 + 80 that will be
239:48 - equal to uh what is this 120 120 then we
239:53 - will go and be equal to -40 then we will
239:56 - be equal to 40 then we will be equal to
239:58 - what's 80 + 40 120 and that will work
240:01 - and and that will still give us the
240:02 - equal distance and it will just kind of
240:04 - translate everything over to the left
240:06 - which is what we want it to do so so
240:08 - hopefully that's making sense we just
240:09 - need to account for the negative
240:11 - coordinate system so we're going to set
240:12 - position at negative width over two and
240:15 - then we're going to add to this I + 1
240:20 - Let's guess why we need to do that in a
240:21 - second multiplied by and then the
240:24 - spacing X so this will be our X position
240:28 - and our y Position will be equal to
240:30 - negative height / 2 plus 20 pixels now
240:34 - this is kind of an arbitrary value I'm
240:35 - deciding I'm saying we want to be 20
240:37 - pixels from the bottom of the screen so
240:39 - we take the negative height divided by
240:40 - two and add 20 the reason we have the I
240:43 - + 1 is because we start indexing at zero
240:45 - so the first cutor is zero really want
240:47 - to make that one because remember we
240:49 - want to place the first turtle at the
240:51 - first spacing position so negative width
240:53 - over two plus whatever the spacing X is
240:55 - that's where the first Turtle should go
240:57 - then the second Turtle well that will be
240:59 - a one so that will give us two so then
241:01 - we'll be at the second spacing position
241:03 - then the third then the fourth so on and
241:05 - so forth so this should place our
241:07 - turtles in the correct position let's
241:09 - see if it does so so let's run our code
241:11 - here and let's say we want to have eight
241:14 - turtles so we have eight Turtles notice
241:16 - that now we're going to move the turtles
241:18 - they are perfectly aligned on the screen
241:20 - and they have equal spacing between each
241:21 - other and between the edges so that's
241:23 - awesome now all we need to do is just
241:26 - return our Turtles like that and now
241:29 - that we've created the turtles we've
241:31 - placed the turtles we've picked our
241:32 - colors and the number of turtles that we
241:33 - have we can start finally racing them on
241:36 - the screen all right so now what I'm
241:37 - going to do is create a new function I'm
241:40 - going to call this function race and
241:42 - this function race is going to take in
241:44 - our colors now I'm going to change kind
241:46 - of the flow of our program a little bit
241:48 - let me zoom out here so you guys can
241:49 - kind of read more of what's going on so
241:52 - right now what we're doing is we're
241:53 - getting the number of racers we're
241:54 - initializing our Turtles we're picking
241:56 - the colors and then we're creating the
241:58 - turtles that's great but I don't want to
242:00 - create my turtles until I'm ready to
242:02 - erase them so I'm going to take this
242:04 - create Turtles kind of function call
242:06 - here and I'm going to put that inside of
242:08 - this race function now the idea is that
242:10 - we're going to pass the colors to race
242:12 - and then race will create our Turtles
242:14 - for us so we'll say Turtles is equal to
242:16 - and then create turtles because this
242:19 - function Returns the turtles so then
242:21 - inside of here we will create all the
242:24 - turtles using our colors and the reason
242:26 - this is important is because I want to
242:28 - know what color every turtle is and by
242:30 - having access to colors and turtles I
242:32 - can do that so now rather than calling
242:35 - create Turtles down here we're just
242:37 - going to call Race so we're going to say
242:39 - race and then cols and then this will
242:41 - create our Turtles for us and then in
242:43 - here we can race them so after I create
242:45 - my Turtles I want to start racing them I
242:47 - want to start moving them so I'm going
242:48 - to say while true and then I'm going to
242:50 - move all of my turtles one by one now
242:53 - the idea behind this is that we don't
242:54 - know how long it's going to take us for
242:56 - our Turtles to get to the top of the
242:57 - screen so what I need to do is have a
242:59 - while loop because I need to keep moving
243:01 - them until eventually one gets to the
243:02 - top of the screen so inside of here I'm
243:04 - going to say for
243:06 - racer in Turtles and then what I'm going
243:09 - to do is move this racer so I'm going to
243:12 - say racer Dot and then move and sorry
243:15 - the shouldn't say move this actually
243:17 - going to be racer. forward because it's
243:19 - now facing the correct direction it's
243:21 - facing up so when I move it forward
243:23 - that's the direction it's going to go in
243:25 - so racer. forward and then I want to
243:27 - move it forward a random amount so I'm
243:29 - going to say move is equal to or maybe
243:32 - distance is a better variable name
243:34 - distance is equal to random Dot and then
243:36 - Rand range and inside of here we're
243:39 - going to put the minimum and maximum
243:41 - amount we want the turtle to possibly
243:43 - move at every iteration so I'm going to
243:45 - say 1 comma 20 and what this means is
243:47 - every time I decide to move my turtle
243:49 - I'm going to move it by either 1 or 20
243:51 - pixels or sorry between 1 to 20 pixels
243:54 - so it will randomly generate a number
243:55 - that is between 1 and 20 and move the
243:58 - turtle uh that amount that's what Rand
244:00 - range does so you can make these values
244:02 - whatever you want the larger you make
244:04 - this minimum value the faster your
244:06 - turtles are going to move and obviously
244:08 - the larger you make this one the higher
244:10 - probability your turtles are going to
244:11 - move faster but really this minimum
244:13 - value will dictate kind of the slowest
244:15 - speed of the slowest Turtle right so
244:18 - just keep that in mind I like to keep it
244:19 - at one so that the race kind of looks
244:21 - like they're like kind of inching
244:22 - forward rather than having big jumps
244:24 - every single time anyways we're going to
244:27 - say racer. forward we're going to move
244:29 - it forward the distance now once we've
244:31 - moved our racer forward what we want to
244:33 - do is check if this racer is kind of
244:35 - past the finish line so the reason We're
244:37 - looping through all the Turtles first of
244:38 - all is because we need to move every
244:40 - single one of them we have a list of
244:41 - turtles Right we've created all of these
244:43 - Turtles here stored them in a list now
244:45 - we need to move every single one of them
244:47 - so we Loop through all of them and then
244:49 - we move them now for every racer we
244:51 - check if it's past the finish line so
244:53 - I'm going to say x comma Y is equal to
244:55 - racer. pause what this does is give me
244:59 - the position of this Turtle so I know
245:01 - the X and the Y I don't care about the X
245:03 - I just care about the Y I'm going to say
245:06 - if Y is is greater than or equal to and
245:09 - then height and this is going to be
245:12 - divided by two and we'll subtract 10
245:15 - here then what I want to do is I want to
245:17 - say that this Turtle crossed the finish
245:19 - line that it was the winner so to do
245:21 - that I'm just going to return this
245:22 - turtle's color so if this Turtle pass
245:25 - the Finish Line then it is the winner
245:27 - what this function is going to do is
245:29 - it's just going to return whatever the
245:31 - winning turtle is it's going to return
245:33 - the color of the winning Turtle so we'll
245:35 - say return and then here we will return
245:38 - and this is going to say colors at index
245:40 - I now this may be a bit confusing but
245:43 - the idea here and oops index I I can't
245:46 - even use that um okay I'm going to show
245:48 - you a different way to do this I thought
245:49 - I had coded this in a different way I'm
245:51 - going to say colors at and then this is
245:53 - going to say turtles.
245:55 - index Turtle so this may be a bit
245:58 - confusing if you guys haven't worked
245:59 - with list before but this is the
246:01 - rationale we want to find the winner or
246:04 - sorry the winning Turtle color want to
246:06 - know the color of the winning Turtle so
246:08 - to do that we need to access its color
246:10 - now I don't think there's a way to get
246:11 - the color of a turtle from the actual
246:13 - Turtle object I may be wrong on that but
246:16 - all we have access to here is just the
246:18 - turtle right we have the turtle that
246:19 - we're moving that's all we have so this
246:21 - kind of turtle. turtle that's all we
246:22 - have so the question then becomes okay
246:25 - how do I find the color of it well I
246:26 - have the colors of all of my turtles
246:28 - here so what I can do is I can find
246:31 - which turtle or the index of the turtle
246:34 - that was the winner and then I can use
246:35 - that same index to figure out the C of
246:38 - it in this colors list so think of it
246:40 - this way if I have a list of colors I
246:42 - have like blue and red and then I have
246:45 - my two turtles right so let's just say I
246:47 - have turtle turtle one and I have Turtle
246:50 - 2 well Turtle 2 is at
246:54 - index uh one right so we have index zero
246:57 - and index one so Turtle 2 is at index
246:59 - one so if I can find the index of this
247:02 - Turtle all I have to do is reference
247:04 - that same index in my color list and
247:06 - that tells me the color of it right same
247:08 - thing for turtle one well Turtle one's
247:09 - at index zero its color must be index
247:12 - zero in the colors list this expands
247:14 - with any length of turtles so what
247:16 - turtles. index does is notice this is
247:18 - the name of the list I'm then passing
247:20 - the turtle that I'm looking for the
247:21 - index of it tells me the index of this
247:24 - Turtle so and sorry this should be
247:26 - changed actually to be racer that's my
247:28 - bad I was probably confusing you guys
247:29 - there but we have access to the turtle
247:32 - so we say turtles. index racer gives us
247:35 - the index of this Turtle object in the
247:37 - turtle turtle's list we then use that
247:39 - same index on the color's list to
247:41 - reference the color of that turtle and
247:43 - we return it so not really much more I
247:45 - can explain there that's probably the
247:46 - best that I can do for that we're going
247:48 - to return the actual color now that we
247:50 - have the color down here we'll say
247:53 - winner equals race and then we can just
247:56 - print out winner the idea being that
247:59 - this function is only finished once we
248:02 - return this color so just in case you're
248:05 - aware or just in case you're unaware
248:06 - sorry in a while loop whenever you
248:08 - return something or just in a function
248:10 - in general as soon as a return statement
248:11 - happens the function immediately stops
248:13 - so even though this is inside of a
248:15 - the walloop will stop running as soon as
248:17 - one of the Turtles has one so let's just
248:20 - run this code let's just see if this
248:21 - works then I can explain to you some
248:23 - more kind of details about this so let's
248:25 - go here python Turtle race let's go with
248:27 - five turtles so we're going to create
248:29 - our five Turtles and then they're going
248:31 - to start racing so they kind of start
248:33 - racing up the screen notice that they're
248:35 - drawing every single time and then boom
248:37 - it says pink the reason it says pink is
248:39 - because if you saw pink was the first
248:41 - Turtle to cross the finish line now it's
248:44 - worth noting here that there is a little
248:46 - bit of a bias in the uh the first Turtle
248:49 - so the very first Turtle has a very very
248:51 - small probability of finishing uh
248:54 - earlier than all the other Turtles like
248:55 - it has a better chance of doing that in
248:57 - a sense because it's the first turtle
248:59 - that we move we have to move the turtle
249:01 - sequentially like we can't move all of
249:03 - them at the exact same time so we move
249:05 - the first Turtle then the second Turtle
249:07 - then the Third Turtle than the fourth
249:08 - Turtle we check if any of them are past
249:10 - the Finish Line whatever one crosses
249:12 - first we say that's the winner so it's
249:14 - just a higher probability that the very
249:16 - first Turtle we move will finish first
249:18 - so the last Turtle kind of has you know
249:20 - the least chance of winning but based on
249:22 - this Randomness here uh it ends up kind
249:24 - of counteracting that in some type of
249:27 - sense so hopefully you get what I mean
249:29 - I'm not going to worry about that for
249:31 - this problem right here if you guys were
249:32 - concerned about the fact that one Turtle
249:34 - has like a little bit of bias which it
249:35 - kind of does what you could do is is you
249:37 - could see if one Turtle crossed the
249:39 - finish line and then if a turtle crossed
249:41 - the Finish Line you could still move
249:43 - every other turtle and whatever Turtle
249:45 - moved the furthest so was like the
249:46 - furthest past the Finish Line that's the
249:48 - one that you would say would be the
249:49 - winner there's no way other other than
249:51 - that to really kind of fix this problem
249:54 - uh so anyways that is really all we need
249:57 - to do here like that that is it for this
249:59 - program so the last thing I'm going to
250:00 - do is I am going to print out in kind of
250:03 - a nicer way what the winning turtle is
250:05 - so I'm going to say the wi Winer is the
250:10 - turtle with color colon then comma and I
250:14 - will say winner so that's all we'll do
250:17 - so now we just have a nicer kind of
250:18 - output message saying this was the
250:20 - winning turtle and then I'm going to say
250:22 - time dos sleep and I'm going to sleep
250:24 - for 5 seconds just so that we have a few
250:26 - seconds to actually see which turtle was
250:28 - the winner before we just go ahead and
250:30 - close the program so hopefully that's
250:33 - clear but yeah that's really all we need
250:34 - so let's run this let's go with 10
250:37 - Turtles this time and let's see what we
250:39 - get let's just enjoy the turtle racing
250:46 - show okay so they're going to race
250:48 - you're going to notice the more Turtles
250:49 - you have kind of the slower they go just
250:51 - because we have to move every single
250:53 - turtle one at a time we can't move like
250:55 - a bunch of turtles you know like the
250:57 - more Turtles we have the more we have to
250:58 - move in so the longer it takes to run
250:59 - that's what I'm trying to say but we saw
251:00 - that the winner is the turtle with color
251:02 - green let's run this one more time with
251:04 - two turtles and you'll see that it goes
251:05 - like way faster because it's just these
251:07 - two guys that need to move purple was
251:09 - the winner and then if we kind of go
251:11 - back into CMD it says the winner is the
251:13 - turtle with color purple awesome so I
251:16 - think that's really all I need to show
251:18 - you here now all of this code will be
251:20 - available to download from the
251:21 - description in case you got lost or
251:22 - something's not working but hopefully I
251:24 - did a good job at explaining a lot of
251:25 - these Concepts hopefully you guys kind
251:27 - of learned how you can lay out a I don't
251:29 - want to say large but medium-sized
251:31 - Python program that has more than just a
251:33 - few lines of code and you get the idea
251:35 - behind these functions right so now now
251:37 - at this point if I want to go change
251:38 - something like say I want to change the
251:40 - width of my screen since I used this
251:42 - width variable everywhere in my program
251:44 - and everything I did was very Dynamic
251:46 - right I had like height over two I had
251:48 - width over two if I change the width up
251:51 - here now everything will just work right
251:52 - like if I change this to 700 and I
251:54 - change the height to 600 doesn't even
251:56 - have to be square let's just run the
251:58 - program again let's go with six Racers
252:01 - and it's still going to be evenly spaced
252:03 - out on the screen right just because the
252:05 - way we did this is everything was Dynam
252:07 - dnamic it used the variables and we set
252:09 - it up in a way where if we made any
252:10 - changes later on it wouldn't completely
252:12 - ruin or mess up our program and what
252:14 - does it say the winner is here the
252:16 - winner is turtle with color blue so just
252:18 - keep that in mind hopefully you
252:19 - appreciate that kind of detail in in
252:21 - writing this code uh and same thing here
252:23 - even with like validating the input
252:25 - right we're going to keep asking the
252:26 - user for a valid input until they give
252:28 - us something that's valid and then race
252:31 - uh we're using another function inside
252:33 - of this function we could have just took
252:35 - take uh tooken taken whatever all of
252:37 - this code and placed it inside of here
252:40 - but if we did that then if we wanted to
252:42 - change the way that we were creating our
252:43 - Turtles well we we could do that but it
252:45 - would just be a little bit harder and if
252:46 - we wanted to say use this function
252:47 - anywhere else same thing just wouldn't
252:50 - work as well so this way it's really
252:51 - easy to see laid out very nicely and
252:54 - this is just a better style of coding
252:56 - than writing everything in one line
252:58 - right because we could have written this
252:59 - entire program in just one line like we
253:01 - didn't have to use any functions it
253:03 - could have just all been in the main
253:04 - line of the program but then it wouldn't
253:05 - be very clear to see what part of the
253:07 - program was doing what so you can see
253:09 - here I have my terminal open it says
253:11 - welcome to this typing test you'll be
253:12 - given a block of text and need to type
253:14 - it as fast as possible press any key to
253:16 - start so I'm going to start and it's
253:18 - going to bring up the text like this now
253:20 - I'm not going very fast right now but
253:22 - the point is that we can just type the
253:24 - text and if I get something wrong so
253:26 - notice I'm getting something wrong here
253:28 - it's highlighting in Red so this is
253:30 - something that you know you probably
253:31 - don't already know how to do and that is
253:34 - pretty simple actually but I'm going to
253:35 - show you how to do in this this video
253:37 - how to get all the text highlighting and
253:39 - kind of nice styling as you see here and
253:41 - then the ability to clear the entire
253:43 - console so you can see here it says you
253:45 - completed the text your wpm was 55 so
253:48 - I'm going to hit enter and it says you
253:49 - want to play again let's play again
253:51 - brings up some text it actually does
253:53 - randomize the text but in this case we
253:55 - just got the same text that we had
253:56 - before anyways there you go that is the
253:58 - demo of the project now we're going to
254:01 - hop into the code I'm here in my text
254:03 - editor I'm going to be using Sublime
254:05 - Text for this video not really that
254:07 - important you can use whatever you want
254:09 - anyways what I've done is opened up a
254:10 - folder and then inside of this folder I
254:12 - have a file called tutorial. now I'm
254:14 - going to recommend you do the same thing
254:16 - make a folder somewhere probably put on
254:18 - your desktop put a file inside of there
254:20 - that is a python file and then you are
254:22 - good to start working now as you guys
254:24 - saw we had some really nice styling for
254:26 - our terminal we had some different
254:27 - colors and we were able to kind of write
254:29 - over the previous text now the way we
254:31 - were able to do that was by using this
254:34 - module called curses now this is built
254:36 - into into python if you're on Mac or
254:38 - Linux but if you're on Windows you
254:40 - actually need to install it so if you're
254:42 - on Windows you need to follow along with
254:43 - this step otherwise skip forward into
254:45 - the video until we actually start
254:46 - writing some code okay so if you guys
254:48 - are on Windows what you need to do is
254:50 - open up your command prompt here and
254:52 - we're going to type the following
254:53 - command to install the windows version
254:55 - of this curses module we're going to say
254:57 - pip install and then this is going to be
255:00 - Windows hyphen curses like this so you
255:03 - should run this command and it should
255:05 - install this for you and if for some
255:06 - reason reason this command does not work
255:08 - for you I will leave two videos on the
255:10 - screen they'll be linked in the
255:11 - description as well and there'll be
255:12 - cards on the screen showing you how to
255:14 - fix this pip command now they're called
255:16 - how to install pame just follow along
255:18 - with the exact same steps except instead
255:20 - of installing pame you're going to
255:21 - install Windows curses now you also can
255:24 - just try here pip install and actually
255:27 - sorry this python hyphen M pip install
255:31 - and then Windows hyphen curses like this
255:34 - and see if this command works for you
255:35 - and if this doesn't work then again and
255:37 - follow along with those two videos
255:39 - anyways this should install the curses
255:40 - module and once you have the curses
255:42 - module installed then we are ready to go
255:45 - okay so I have curses installed and this
255:47 - is what allows me to do the styling of
255:49 - the terminal so the first thing I want
255:51 - to show you how to do is just to use
255:52 - this module and to kind of print stuff
255:54 - out to the terminal because it's going
255:55 - to be different than what we typically
255:57 - do we're not going to be using the print
256:00 - and the input statements we're going to
256:01 - be using some statements from this
256:04 - module okay so the first thing I'm
256:05 - actually going to do here is write a
256:06 - other line and I'm going to say from
256:08 - wrapper or sorry not from wrapper from
256:11 - curses import wrap now what this is
256:13 - going to do is give me something that
256:15 - allows me to initialize this curses
256:17 - module because when I initialize the
256:19 - module what's going to happen is it's
256:20 - going to take over my terminal and it's
256:23 - going to allow me to kind of run some
256:24 - different commands on it so I use this
256:26 - wrapper it initializes curses and then
256:28 - as soon as I'm finished with the program
256:29 - it will kind of restore the terminal
256:31 - back to its previous state so it's
256:33 - pretty important that you do this
256:34 - anyways what I'm going to do here is say
256:36 - Define Main and inside of main I'm going
256:38 - to put a variable here which is going to
256:40 - be called
256:41 - stdr standing for STD screen now STD is
256:45 - your standard output so the standard
256:48 - output is just kind of the terminal it's
256:50 - where you're writing stuff out to and
256:52 - what this module does is kind of take
256:54 - that over and give you a screen over top
256:56 - of it that allows you to write stuff to
256:58 - the screen anyways that's what this is
257:00 - doing so it is the standard output
257:02 - screen okay perfect so now that we're
257:05 - inside of here for now what I'm going to
257:06 - do to show you the most basic thing
257:08 - which is just adding text to the screen
257:10 - the way you do this is you say
257:12 - stdc do add and then string like that so
257:16 - then inside of here in quotation marks
257:18 - you just put the text that you want to
257:19 - print out to the console so just like a
257:21 - print statement I'm going to put the
257:22 - text hello world okay that's it this is
257:24 - just going to Output the text for you
257:26 - then what I'm going to do here is I'm
257:28 - going to call rapper and then pass my
257:31 - main function now this might look a
257:33 - little bit confusing what I'm doing is
257:34 - I'm passing this main function to this
257:36 - this wrapper function so this actually a
257:38 - function I just call it like this using
257:40 - the parenthesis I pass main inside of
257:43 - there and it's going to actually call
257:45 - this function while initializing all of
257:47 - the stuff related to this module so
257:49 - anyways that's the first step all this
257:50 - is going to do is print hello world out
257:52 - to the screen now before I do that
257:54 - though I actually want to clear the
257:56 - entire screen because if I don't clear
257:57 - the entire screen we're going to have a
257:58 - bunch of junk on there so what I want to
258:00 - do is I want to say
258:02 - stdr dot and then clear this just clears
258:05 - the entire screen for me and then as
258:07 - soon as I do anything so I add text I
258:09 - need to refresh the screen so the way I
258:12 - do that is stdc Dot and then refresh
258:16 - like that perfect okay so this will
258:19 - actually print hello world out for me
258:21 - all right so now that we have all of
258:22 - this I actually just want to add one
258:23 - more line here I'm going to say Str Str
258:26 - or sorry std. strr Dot and then get key
258:30 - like this with two parentheses what this
258:32 - is going to do is just wait for the user
258:33 - to type something so that way it doesn't
258:35 - immediately show this and then close the
258:37 - screen because right now if we run this
258:39 - code what's going to happen is it will
258:40 - print hello world it will refresh we'll
258:42 - see it for like a millisecond and then
258:44 - it will end we need to add this get key
258:46 - so that we don't immediately close the
258:48 - program we wait for the user to type
258:50 - something and then we finish it okay so
258:52 - now that we have that we can run this
258:53 - code now to run this code is a little
258:55 - bit trickier than your standard python
258:57 - code you actually need to run it from
258:59 - your terminal or your command prompt
259:01 - that's because this requires a terminal
259:03 - or command prompt to actually show you
259:04 - the correct output so what we're going
259:06 - to have to do here is open up a command
259:09 - prompt or terminal again depending on
259:10 - your operating system we're going to
259:12 - have to get our working directory which
259:14 - is right here on the Le hand side into
259:17 - the folder where this file is I'm going
259:19 - to show you a shortcut on Windows here
259:21 - to do this and on Mac I'll describe kind
259:23 - of how you can do the shortcut obviously
259:25 - I'm not on Mac so I can't quite show it
259:27 - to you okay so I'm going to open up my
259:28 - Windows Explorer here and I just have it
259:30 - on my other screen right now I just need
259:31 - to hide some of my files and what I'm
259:33 - going to do is navigate to The Path
259:36 - where my file is so I assume you know
259:38 - where your file is I mean you should
259:39 - know where you placed it and anyways you
259:41 - can see here that my tutorial file is
259:43 - directly inside desktop and then
259:44 - beginner project so what I'm going to do
259:46 - is click on this menu bar here so notice
259:48 - where it's showing the path I'm just
259:50 - going to delete all of this and type CMD
259:53 - now when I do that it's going to open up
259:55 - a command prompt and notice the working
259:57 - directory which is on the left here is
259:58 - directly inside of beginner project so
260:01 - all I'm going to do now to run the code
260:02 - is type Python and then the name of my
260:05 - file which is tutorial. P now I'm going
260:07 - to hit enter and when I do that notice
260:09 - it shows me hello world and when I hit
260:11 - enter again it brings me back to my
260:13 - terminal okay that's how you run the
260:15 - code now if you're on Mac you can do a
260:17 - very similar thing you can open up your
260:19 - finder you can navigate to where your
260:21 - python file is and then you can
260:23 - rightclick and there should be something
260:24 - that says open Terminal now if you can't
260:27 - find open Terminal what you're going to
260:29 - have to do is use the following commands
260:31 - CD like this so CD stands for change
260:34 - directory and to go to The Parent
260:36 - Directory you type CD do dot so notice
260:38 - that brings me to desktop that's the
260:40 - Parent Directory of beginner project
260:42 - then if I wanted to get into beginner
260:43 - project I would type CD and then
260:45 - beginner project like that it would
260:47 - bring me into that directory so from
260:49 - wherever you are you need to change your
260:51 - directories into the correct directory
260:53 - where your python file is and then type
260:56 - python space and then the name of the
260:58 - Python file you want to run now for some
261:00 - reason that doesn't work type Python 3
261:03 - and then the name of the file so for me
261:04 - it's tutorial. piy but for you guys it
261:07 - will be probably something else
261:09 - hopefully that clears it up it's hard to
261:10 - explain that more because I'm not
261:12 - actually on Mac but you need to open up
261:14 - a terminal and get this directory here
261:16 - on the left hand side to be the
261:18 - directory where your python file is or
261:20 - what you can do is you can look for the
261:22 - exact path of your file and type Python
261:25 - and then put the exact path so it would
261:27 - be on Windows something like C colon
261:29 - slash and then the path to it or on Mac
261:31 - maybe Python 3 and then the path to the
261:33 - file anyways that's pretty much all that
261:35 - I can explain for right now but that is
261:37 - how you run this code okay so now that
261:40 - we know how to run this let's talk about
261:42 - how we can add some colors here and kind
261:44 - of style it a little bit all right so if
261:46 - we want to add color to our text what we
261:48 - need to do here is create something
261:49 - known as a color pair now a color pair
261:52 - is just a foreground and a background
261:53 - color so the foreground is the text the
261:55 - background is obviously what's behind it
261:57 - so what I'm going to do is I'm going to
261:58 - create a pairing of a foreground color
262:00 - and a background color and then use that
262:01 - pairing to print out my text so I'm
262:03 - going to say curses Dot and then a knit
262:06 - underscore pair at the top of my
262:07 - function here and it's important you do
262:09 - it in the function if you try to do it
262:11 - outside it's not going to work you can
262:12 - only do this once you've initialized
262:14 - curses and that's going to happen when
262:16 - we call this wrapper function and then
262:18 - it calls the main function anyways I'm
262:20 - going to say curses. AIT pair I'm going
262:22 - to put the ID of my pair which is going
262:24 - to be one and then I'm going to say
262:26 - curses Dot and then this is going to be
262:28 - colorcore and then whatever the color of
262:30 - the text is that I want so in this case
262:32 - I'll go with green for my foreground
262:34 - color and then for my background color
262:36 - which is is the second color you pass
262:37 - going to say curses Dot and then we'll
262:39 - go with color underscore and let's just
262:41 - go with white so that we can see kind of
262:43 - you know a lot of color here okay so
262:45 - what I've done is I've said that I want
262:46 - to have the pairing with the foreground
262:48 - color green and the background color
262:50 - white be represented by the id1 so I
262:53 - need to put an integer here and this
262:54 - integer kind of represents this pair so
262:57 - if I wanted to make another pair then
262:58 - what I could do is the same thing and I
263:01 - would just change the integer here to be
263:02 - two if I had it at one then it would
263:05 - override what this pair was so I wanted
263:07 - to change it to two and then I could
263:09 - make this something like color dot and
263:11 - then can we go with yellow uh let's go
263:13 - all capitals yellow and see if that's a
263:15 - valid color okay so now we have a pair
263:18 - with one and two as the ID so to use
263:21 - this what I'm going to do is go inside
263:23 - of my ADD St here and I'm now going to
263:26 - reference this pair now the way I do
263:27 - that is I say curses. colore pair like
263:32 - this and then inside of the brackets I
263:34 - just put the ID of the pair I want to
263:35 - reference so if I want it green and
263:37 - white then I put one if I wanted it
263:39 - yellow and white then I would put two
263:41 - and if I just wanted the default color I
263:42 - just remove this I don't need to include
263:43 - it anyways let's give this a test here
263:46 - and see if this is going to work so I'm
263:47 - going to go to my terminal and go Python
263:49 - tutorial. py and notice we get green
263:51 - text with a white background then if I
263:53 - hit any key it's going to escape and
263:55 - bring me back to the terminal perfect
263:57 - let's try this now with the color pair 2
264:00 - and run this and notice we get yellow
264:02 - text on a white background that looks
264:04 - pretty ugly but that is fine so for now
264:07 - the pairs that I want to initialize are
264:09 - actually just going to be red uh let's
264:11 - go with blue no do we want blue no let's
264:14 - just go with red green and white and
264:16 - then we can use those pairs throughout
264:17 - the program so I'm going to say curses.
264:19 - niit pair one green is perfect but for
264:22 - the background I want the background to
264:24 - be black then I want one that is going
264:26 - to be red so I'll say color red and
264:29 - color black and then I want my last
264:31 - color just to be the standard white text
264:34 - so I'll go three and then this will will
264:36 - be color white like that okay perfect
264:40 - and for now we don't need to add any
264:41 - color to that okay so now we have our
264:43 - three colors we have one which is green
264:45 - two which is red and three which is
264:47 - white so now that we've looked at the
264:49 - colors the next thing I want to show you
264:50 - is how we can locate text differently on
264:53 - our terminal or kind of place it in a
264:54 - different place based on where we want
264:56 - to put it so in this STD uh sc. add
265:00 - string method that's a mouthful what we
265:02 - can actually do is specify the position
265:04 - so kind of the row and column that we
265:06 - want to start this text app so I'll show
265:09 - you what I mean but for now if we go
265:10 - with something like 1 Z what this is
265:13 - actually saying is I want to go one line
265:15 - down and start at the zeroth character
265:17 - so start all the way furthest to the
265:19 - left but one line down so you go kind of
265:21 - your row and then your column that's how
265:24 - this coordinate system works now you'll
265:25 - see very quickly how this works it's
265:27 - pretty straightforward but if I run this
265:29 - notice that now we're just on the second
265:30 - line down in the terminal so it's very
265:32 - easy to kind of place text in different
265:34 - places now if I go and do this like five
265:38 - you're going to see that now we're going
265:39 - to be five characters over to the right
265:41 - so if I run this now we're one row down
265:43 - five characters to the right so we start
265:46 - writing from that place okay hopefully
265:49 - that is clear now let's just see what
265:51 - happens if I actually write something
265:52 - else so let's write this at like one and
265:56 - then zero and see what happens when I
265:58 - kind of have two colliding pieces of
266:00 - text so let's do this let's hit enter
266:04 - let's run the code and notice that the
266:06 - hello world I wrote second kind of
266:07 - overrides what was already on the screen
266:10 - so that can happen and that will happen
266:12 - based on how you're writing stuff out
266:14 - and that's exactly what we're going to
266:16 - do to kind of have our green text go
266:18 - over top of the white text when we're
266:20 - trying to type out the target text uh
266:22 - when we're doing kind of our speed test
266:24 - right so I just want to show you that
266:26 - you can kind of pick the location on
266:27 - where you want this text to go you just
266:29 - pass before the text uh the coordinates
266:32 - so you go either the row and then the
266:34 - column that you want to place this in
266:36 - and if you just want to be at the top
266:37 - left you can just leave it you don't
266:38 - need to add anything or you can
266:39 - explicitly say 0 0 like that okay so now
266:43 - we have pretty much gone through
266:45 - everything in the curses module the last
266:47 - thing I'll show you is that we can
266:48 - actually get the key that people type so
266:51 - notice here that I said stdr doget key
266:54 - so what I can do is store this in a
266:55 - variable and just print this out and now
266:58 - this will actually tell me the key that
267:00 - the user typed in and you'll see why
267:01 - this is important in a second but we're
267:03 - going to need to register the user's
267:04 - keystrokes so that we can see what
267:06 - they're typing and keep track of their
267:08 - word per minute right so that's what key
267:10 - will do for us we'll get the key that
267:11 - the user types so let's go uh to our
267:14 - terminal looks like I closed it so I'm
267:15 - going to have to open it again okay so
267:17 - I've got the command prompt open now and
267:18 - I'm just going to run this code so
267:20 - python tutorial. piy I'll hit the key e
267:22 - and then notice it prints out e because
267:24 - that's the key that I hit okay now we've
267:26 - gone through the curses module now I
267:28 - want to start kind of building this
267:29 - speed test or this game or whatever you
267:31 - want to call it so the first thing I
267:33 - want to do is kind of have a start
267:34 - screen here that says hey would you like
267:36 - to play the game and if they say yes or
267:38 - they hit any key then we will you know
267:40 - like continue with the game and we'll
267:41 - get into the game so I'm going to write
267:43 - a function here I'm going to say Define
267:45 - startor screen and this is going to take
267:48 - the
267:49 - stdr now the reason we need to take this
267:51 - is because we need to have access to
267:53 - this object to be able to write to the
267:55 - screen because notice we're using the
267:57 - add string method we're using clear
267:59 - we're using refresh so we just we need
268:01 - access to this to be able to actually
268:02 - write something onto the screen using
268:04 - the curses module anyway what I'm going
268:06 - to do is I'm going to steal these lines
268:08 - right here so clear add string and
268:09 - refresh and I'm just going to put them
268:11 - inside of start screen and what I'm
268:13 - going to say is press any key to
268:14 - continue and I'll give kind of a
268:16 - description of the game so I'll say
268:18 - welcome to the speed typer test or
268:22 - whatever uh speed typer test speed
268:25 - typing test maybe uh and then we can do
268:27 - a new line so let's get rid of this here
268:30 - and let me show you how we can print
268:32 - something on a new line so we can use
268:34 - the coordinate system we can do
268:35 - something like 1 comma 0 or what we can
268:37 - do is we can print this character which
268:39 - is a back sln now when you print a back
268:42 - sln what this does is it brings the
268:44 - cursor down to the next line and you're
268:47 - going to start writing wherever the
268:48 - cursor is so after I print this out my
268:51 - cursor is going to be at the end of this
268:53 - line and if I were to print something
268:54 - else so I were to do this line here it
268:56 - would go right after it kind of be
268:57 - squished together but if I wanted to go
268:59 - down to the next line I can put in this
269:01 - Escape character called back sln this is
269:04 - the new line character and it makes me
269:06 - go down to the next line before I start
269:08 - typ so now I'll say press any key to
269:12 - begin okay welcome to speed uh typing
269:14 - test press any key to begin boom and
269:17 - then what I will do is refresh the
269:18 - screen and I will just say key is equal
269:21 - to this and I actually don't even need
269:22 - to store the key I just want to wait for
269:24 - the user to type something so that's
269:25 - what I'll put right here okay that's
269:27 - awesome so now what I can do is just
269:29 - call this start screen function from
269:31 - inside of this function right here so
269:33 - I'll call start screen and I'll pass the
269:35 - STDs strr like that and now what will
269:38 - happen is when I run the main function
269:40 - we'll initialize our colors we'll call
269:41 - the start screen we'll do this and then
269:43 - we'll continue so let's test this out
269:45 - before we go any further let's go Python
269:46 - tutorial up Pi welcome to speed typing
269:49 - test press any key to begin boom and
269:51 - then we begin okay so now that we've
269:54 - done that we need something to kind of
269:56 - store what our Target text is we want to
269:59 - print that Target text out to the screen
270:01 - and then ask the user to start typing it
270:03 - in so I'm going to make another function
270:05 - here and notice I'm kind of splitting
270:07 - all of my codee up into different pieces
270:08 - of logic that's a good practice you
270:10 - should try to get in the habit of but
270:12 - that's what I'm trying to show you here
270:13 - anyways I'm going to say Define wpm test
270:17 - standing for words per minute test we
270:19 - are going to take the STD sccr like that
270:22 - and inside of here we're going to
270:23 - actually print out kind of what our
270:25 - Target text is and then get the user to
270:27 - start typing it in so I'm going to say
270:29 - Target unor text is equal to and for now
270:32 - we'll go with hello world this is some
270:34 - test text TT for this app exclamation
270:38 - point and this is what we want the user
270:39 - to type in so we want to print this out
270:41 - and then we want to print whatever the
270:42 - user has typed kind of over top of it
270:44 - which you'll see in a second so now I'm
270:46 - going to say current text is equal to
270:48 - and I'm going to make a list you'll see
270:50 - why we need this in a second and for now
270:52 - all I'm going to do is clear the screen
270:54 - refresh it and then uh actually print
270:57 - what this text is so we'll start with
270:59 - that and then we'll kind of keep track
271:00 - of what the users actually typed so I'm
271:02 - going to steal again these lines because
271:04 - we just going to keep read using them
271:06 - and I'm going to say uh std. add string
271:10 - and rather than welcome to speed typing
271:12 - test we'll just put the variable Target
271:15 - text in here because this is what we
271:16 - actually want to display so we're going
271:18 - to get the target text uh which is this
271:20 - we're going to have our current text
271:22 - which will be what the user has typed
271:24 - we're going to clear the screen add this
271:26 - to the screen and then refresh and then
271:28 - again we'll just get key okay so now
271:31 - after we get past the start screen what
271:33 - we want to do is call the wpm test
271:37 - function like this and pass this okay so
271:40 - let's give this a run and see how this
271:42 - is working python tutorial. piy let's
271:45 - hit enter no it says hello world this is
271:47 - some test text for this app and when I
271:50 - hit enter or any key for that matter
271:52 - then it exits great so now that we've
271:54 - done that what I want to do is actually
271:56 - register the user key presses and then I
271:58 - want to take whatever they're typing and
272:00 - kind of overlay it on top of this so as
272:02 - you saw in the demo if they type the
272:04 - character correctly want it to show up
272:06 - green if they type it incorrectly I want
272:08 - it to be red okay pretty straightforward
272:10 - so what I'm going to do here is I'm
272:12 - going to start a while loop so I'm going
272:14 - to say while true and I'm going to
272:17 - continually kind of ask the user to type
272:19 - something in and every time they type
272:21 - something I'm just going to Overlay it
272:23 - in a different color on top of the
272:25 - target text so we're going to have to
272:27 - change this drastically from what I do
272:29 - right now but this is just an example so
272:30 - you can see how this is going to work so
272:32 - what I'm going to do is say key is equal
272:34 - to and then STD SC Dot and then get key
272:38 - which means I can remove this one right
272:39 - here because we're immediately going to
272:41 - jump into the wall Loop and then we'll
272:43 - get the key then I'm going to add this
272:45 - key to the current text and I'm going to
272:47 - draw the current text onto the screen so
272:49 - I'm going to say uh let's go current
272:51 - text like this do append and I'm going
272:55 - to append the key so we're going to have
272:56 - a list of all of the keys that the user
272:59 - has pressed then I'm going to Loop
273:01 - through every single one of these Keys
273:02 - using a for Loop and I'm going to kind
273:05 - of place that character onto the screen
273:07 - so I'm going to say four and we're going
273:09 - to go with Char standing for character
273:11 - in and this is going to be current text
273:14 - what I'm going to do is say
273:15 - stdr dot and then this is going to be
273:18 - add string we're going to add whatever
273:21 - this character is comma and then I'm
273:23 - going to put the color that I want this
273:25 - to be so in this case I want the color
273:27 - to be uh let's go with green so that's
273:29 - going to be pair one so what do I need
273:31 - to do I need to say curses Dot and then
273:34 - this is going to be color
273:36 - underscore pair one okay so let's just
273:39 - go through this quickly to make sure
273:40 - everything is clear so what we're doing
273:42 - is we have the target text we have the
273:44 - current text we are clearing the screen
273:47 - we are adding the target text to the
273:48 - screen we're then refreshing the screen
273:50 - we're then going to ask the user to
273:52 - enter a key so when I say get key this
273:54 - is going to wait for them to type
273:55 - something as soon as they type that
273:56 - we're going to append that to the
273:57 - current text then we're going to Loop
273:59 - through every single uh character that
274:02 - they've typed cuz they're going to be
274:03 - storing that in a list so for chart in
274:05 - current text we are then going to
274:07 - display that character on the screen so
274:09 - we're just going to add it and it will
274:10 - be in a different color okay now one
274:13 - thing that I want to do here is I want
274:15 - to constantly do this so you'll see why
274:18 - I want to do this in a second but I'm
274:20 - going to go here and I'm going to add
274:24 - this string the target text and then
274:25 - after I add the other string I'm going
274:27 - to
274:28 - refresh so I'm going to clear the screen
274:31 - every single time this wallet runs I
274:33 - going to add the target text to the
274:35 - screen I'm then going to add the other
274:38 - text onto the screen so whatever the
274:39 - user has typed in a different color and
274:41 - then I'm going to refresh the screen so
274:42 - that you see it so this way I'm not
274:44 - going to continually keep adding the
274:46 - same text to the screen I'm going to
274:48 - clear everything and then add whatever I
274:49 - currently have if the user adds another
274:52 - key I'll add that as well you'll see why
274:54 - I need this but I'll show you if I don't
274:56 - clear uh what's going to happen in one
274:58 - second anyways let's run this and let's
274:59 - just see what's happening so it says
275:01 - press in a key to begin okay so hello
275:04 - world this is some t text for this app
275:06 - and now let's just type something so
275:07 - let's go H and notice it's showing up on
275:09 - a new line all of the characters that
275:12 - I'm typing so that's exactly what I
275:13 - expected now if I didn't clear the
275:16 - screen what would happen is we would uh
275:19 - write all of this like multiple times
275:21 - onto the screen so let me show you this
275:23 - I'm just going to get out of this um
275:25 - actually we didn't even make a way to
275:26 - exit this so I'm going to hit control C
275:28 - okay that doesn't work uh we're going to
275:30 - have to just close the terminal because
275:31 - I didn't make a way to exit yet well
275:32 - we'll have to do that in a sec anyways
275:34 - if I don't clear the screen here and we
275:38 - rerun this so let me go to my terminal
275:40 - so
275:41 - CMD CD desktop CD beginner project and
275:45 - python tutorial. py now watch what
275:48 - happens when I start typing okay so
275:50 - first of all you can see that it didn't
275:51 - clear but if I type this it's going to
275:53 - repeat all the text a ton of times right
275:56 - because we're not clearing what we
275:57 - previously had we just keep adding what
275:59 - we had to the screen so that's kind of
276:01 - what I was getting at that's why we need
276:02 - to clear so anyways let's make sure we
276:04 - include this clear and now what I want
276:06 - to do is include some way for the user
276:08 - to actually exit the program so I'm just
276:10 - going to check if the key that they hit
276:13 - was the Escape key and if they hit
276:14 - Escape I'm going to allow them to exit
276:16 - because obviously we want some way to
276:18 - get out of this program so before I add
276:20 - this to the current text I'm just going
276:22 - to check if the ordinal value of this
276:25 - key and I'll explain what that is in a
276:27 - second is equal to and then 27 now if it
276:31 - is I'm just going to break what break is
276:33 - going to do is just get me outside of
276:34 - this wall so it will break this infinite
276:36 - Loop now the ordinal value of a key is
276:39 - its numeric representation on your
276:41 - keyboard so every single key on your
276:43 - keyboard has some number that represents
276:44 - it and this number is known as the asky
276:47 - representation or the Unicode
276:49 - representation you don't have to really
276:50 - know what that means asky stands for
276:53 - American Standard um something something
276:55 - something I think it's like American
276:57 - Standard code information whatever
277:00 - someone smarter than me in the comments
277:01 - will tell you what it stands for I
277:03 - forget or maybe I'll throw it up on the
277:04 - screen point is every single character
277:06 - has some number that represents it so I
277:08 - know that the character lowercase a is
277:11 - represented by 97 uppercase a is
277:14 - represented by 65 and it just so happens
277:16 - that escape is represented by 27 so
277:19 - we're going to check the ordinal value
277:20 - when you take the ordinal value of an
277:22 - individual character which is what the
277:23 - key will be it will give you what it is
277:26 - so if it's 27 then we'll break that
277:28 - means they hit the Escape key okay
277:30 - hopefully that makes sense we can test
277:32 - that out though so let's open up our
277:33 - Command Prompt so so let's CD to desktop
277:36 - CD to the beginner project and then go
277:38 - Python and then tutorial. piy and now if
277:42 - I hit Escape notice I'm going to exit
277:45 - and I am all good perfect that is
277:47 - exactly what I wanted now one thing I
277:50 - will do here is I'm going to show all of
277:52 - this before I ask the user for a key the
277:56 - reason for this is right now I'm having
277:57 - to hit the key kind of two times before
277:59 - it shows anything so I want to show this
278:01 - first and then ask the user to kind of
278:04 - type in a key
278:05 - and when they type in that key then we
278:07 - will add it to their current text now
278:09 - one problem that we're going to run into
278:11 - here is that there's a bunch of special
278:13 - keys that the user could hit for example
278:15 - the backspace if the user hits the
278:17 - backspace I don't want to display the
278:19 - backspace character I actually want to
278:21 - remove one of the characters that they
278:23 - typed now since we're kind of doing this
278:25 - in curses we have to manually handle all
278:27 - of this so when I hit backspace is not
278:29 - just going to move me back it's actually
278:31 - going to show kind of a really strange
278:32 - character on the screen so let me show
278:34 - you what I mean but if I run this code
278:36 - so python tutorial. piy let's hit enter
278:41 - and let's hit the backspace you notice
278:43 - that it's bringing my cursor backwards
278:45 - but if I start typing stuff here it's
278:47 - not actually going to delete that stuff
278:49 - right it's just bringing the cursor back
278:50 - it's not actually deleting anything so
278:52 - when I hit backspace I want to delete
278:54 - the text that I was typing so let's see
278:56 - how we can do that so what I'm going to
278:58 - do now is after I check if the ordinal
279:00 - value of my key is 27 I'm going to say
279:02 - if the key is in and then I'm going to
279:06 - check three things now the first thing
279:08 - I'm going to check is key
279:10 - backspace the next thing I'm going to
279:12 - check I have to actually look at here
279:14 - it's going to be back SLB and then the
279:18 - last thing is going to be SLX so back
279:21 - accessory 7 and then F now I understand
279:25 - this looks like complete gibberish but
279:27 - the thing is the backspace key on
279:29 - different operating systems will be
279:30 - represented by a bunch of different
279:32 - characters so it could be represented by
279:34 - keyb space space it could be represented
279:36 - by back SLB or it could be represented
279:38 - by back/
279:39 - x7f don't ask me why that's the
279:42 - representation but that's what it could
279:43 - be so just to make sure this is going to
279:45 - work for all of you no matter what
279:46 - operating system you're on just do this
279:48 - now this is going to check if this key
279:50 - is in this so essentially if the key is
279:52 - equal to any one of these three things
279:54 - if it is then what we're going to do is
279:56 - we're actually going to pop off the last
279:59 - element from current text you'll see
280:01 - what I mean here but I'm going to say if
280:03 - the Len current text is greater than
280:07 - zero than current text. poop now this is
280:11 - one of the reasons why we use the list
280:13 - here to represent all the characters
280:14 - that we're typing because we can very
280:16 - easily and quickly remove the last
280:18 - character from it so what do popop will
280:21 - do is it will remove the last character
280:23 - from a list or the last element from a
280:24 - list so if I have one two and I call pop
280:27 - on this list it just gets rid of two so
280:30 - now I only have one which is exactly
280:32 - what we want because remember current
280:34 - text is keeping track of all of the keys
280:36 - that we have pressed so if we hit the
280:38 - backspace we want to get rid of the last
280:39 - key that we inputed that's what this
280:41 - will now do now we just need to put an
280:44 - lse statement here because if we hit the
280:46 - backspace we don't want to add that
280:47 - backspace key to our current text we
280:50 - just want to remove the current
280:51 - character so we'll add the else to make
280:53 - sure that if this is the case we're not
280:55 - still adding this key to the current
280:57 - text okay hopefully that makes sense
280:59 - let's run this
281:01 - code and let's hit enter and let's start
281:04 - typing so I'm going to say hello world
281:06 - and then I'm going to hit backspace and
281:07 - notice when I hit backspace I'm actually
281:09 - deleting the characters now which is
281:11 - precisely what I wanted so now that
281:13 - we've done this let's see how we can get
281:16 - this text to go over top of the text
281:18 - that we currently have because obviously
281:20 - that's kind of what we want we don't
281:21 - want this text to be um what do you call
281:24 - it coming after we want it to kind of go
281:25 - over top of it and then we want to
281:27 - change the color on if it is the correct
281:29 - character or not okay so let me escape
281:32 - this by hitting escape and let's see how
281:34 - we can go about doing that so to do this
281:36 - I'm just going to write a new function
281:38 - here because I think it makes sense to
281:39 - kind of separate displaying all of our
281:41 - uh what do you call it text in a
281:43 - separate function so I'm going to say
281:45 - Define
281:46 - display _ text like this we're going to
281:50 - take in our STD Source like this or
281:52 - sorry screen not Source we're going to
281:54 - take in our Target text we're going to
281:56 - take in our current text and then for
281:58 - now we'll take in wpm as well but I'm
282:00 - going to make this a default value of
282:02 - zero now in case you're unfamiliar with
282:04 - this these are parameters which means we
282:06 - have to pass values to this function
282:08 - when we call it and if you do something
282:10 - like equals z this means this is a
282:13 - optional parameter so if I don't pass
282:15 - this parameter it will just have a
282:16 - default value of zero now the reason I'm
282:18 - doing this is because we're going to
282:19 - have to calculate the words per minute
282:20 - in a second and we want to display that
282:22 - as well we won't do that in this step
282:24 - this second but we're going to do that
282:25 - later okay so now that we have that what
282:28 - I want to do is display the target text
282:30 - and over top I want to display the
282:32 - current text so I'm going to take all of
282:34 - this stuff that I did here so let's go
282:37 - with this right here the ad string and
282:40 - the character and I'm going to paste
282:42 - this like that so let's now go over here
282:46 - so let's say we're going to display the
282:48 - target text then we're going to Loop
282:50 - through all the characters in our
282:51 - current text but I want to place them
282:53 - somewhere different I want to place them
282:54 - on top of this text so I'm going to say
282:57 - this for I comma Char in a numerate
283:01 - current text now if you're unfamiliar
283:03 - with a numerate what this is going to do
283:06 - is it's going to give us the element
283:07 - from our current text as well as the
283:10 - index in the list so remember current
283:12 - text is a list let's say we have the
283:13 - elements 1 2 3 4 like that what's going
283:16 - to happen when I enumerate over this is
283:18 - I is going to start out being equal to
283:20 - zero zero is going to reference this
283:22 - first Index right here and then Char is
283:24 - going to be equal to one now of course
283:25 - these would be characters but hopefully
283:27 - you get the idea so the next element
283:29 - would be two so Char would be two and I
283:31 - would be one this gives me the index as
283:34 - well as the element just kind of a
283:36 - cleaner way than just going by the index
283:38 - and then manually getting the element
283:40 - hopefully that makes sense but the thing
283:42 - is whatever character that I am on so if
283:45 - I'm on character Zero or character one
283:47 - or character two according to their
283:48 - indexes in the list I can use that to
283:51 - determine where I should place this
283:53 - character so I'm going to say 0 comma I
283:57 - like this so the point is I is going to
283:59 - keep getting incremented by one this is
284:01 - representing what character that I'm
284:02 - going to place this on and so I want to
284:05 - place it on the very first character
284:06 - which is zero and then on one then on
284:08 - two then on three then on four so this
284:10 - will be overlaid on top of my target
284:13 - text hopefully that makes a little bit
284:15 - of sense but since I is going up up by
284:17 - one in every single iteration this means
284:19 - every character that I'm drawing onto
284:21 - the screen will kind of Be incremented
284:23 - by one and it will go directly over top
284:25 - of my target text so let me just show
284:28 - you and hopefully this will clear it up
284:29 - what I need to do though is I do need to
284:31 - uh call this function so right between
284:33 - my clear and my by refresh I'm going to
284:35 - say display text and then I'm going to
284:37 - pass this all of the parameters so
284:40 - stdr I'm going to pass by Target text
284:43 - and I'm going to pass my current text as
284:44 - well okay and then instead of here sorry
284:47 - I'm referencing Target text uh when
284:50 - instead I need to be referencing just
284:51 - current okay hopefully that is all good
284:55 - now let's go ahead and run our code here
284:57 - so python tutorial. piy let's hit enter
285:00 - and now notice when I type hello that
285:03 - it's going over over top of my text
285:05 - right and if I hit space of course it's
285:07 - going to remove those characters because
285:08 - well that's what it's doing but you get
285:11 - the idea okay and then I can go like
285:13 - this so now what we need to do is we
285:15 - need to change the color of this text
285:17 - based on if it's the correct character
285:19 - or not okay but you can see that is
285:20 - going directly over the top of this text
285:22 - and even though it's kind of replacing
285:24 - the text it looks like it's just
285:25 - changing the color okay that's what we
285:27 - want so I'm going to hit escape and now
285:29 - we're going to modify the color based on
285:32 - if this is the correct character now we
285:35 - have what the correct characters are in
285:36 - our Target text and then we have
285:39 - whatever our current text is so what we
285:41 - can actually do is we can compare every
285:42 - single character in our current text to
285:45 - the corresponding character in the
285:46 - Target text and see if we're getting the
285:48 - correct one so I'm just going to say the
285:52 - corrector Char like this is equal to the
285:55 - Target at index I so if my target text
285:59 - is something like hello and then I have
286:02 - my characters as like H comma and then L
286:05 - like this if I'm accessing the zero with
286:07 - index so I'm looking at the first
286:08 - character I can look at the zero with
286:10 - index in this string and I can check if
286:12 - the character I have here matches with
286:14 - that character if they do then I can
286:16 - show this in green if they don't then I
286:18 - can show this in Red so I'm going to say
286:20 - that my color is equal to and then this
286:23 - is going to be curses. col pair at one
286:26 - like that and then I'll say if the
286:29 - Char is uh not equal to the correct Char
286:33 - then theor color is going to be equal to
286:36 - curses do col pair and then what do we
286:38 - use for red I got to see this we use two
286:41 - so let's go here and do two and then
286:44 - I'll put the color variable so let me
286:46 - slow down to make sure I'm not going too
286:47 - quickly here all we're doing is defining
286:49 - a color variable this is equal to curses
286:52 - docolor pair 1 so I'm just storing it in
286:54 - a variable it's the same thing as if I
286:55 - were to directly put it inside of here
286:57 - and then I'm saying if the character
286:59 - does not equal the correct character
287:01 - then we'll change the color from the
287:03 - default green I have right here to be
287:05 - read and then whatever the color
287:07 - variable is that's what we're going to
287:08 - show for this character when we draw it
287:11 - on the screen and of course we're just
287:12 - comparing the correct character to the
287:14 - current character um and we're getting
287:16 - the correct character by accessing the
287:18 - corresponding index in this string so
287:20 - let me get rid of these here and now let
287:23 - us try this so let's go back here let's
287:26 - run the code and let's hit enter and
287:28 - let's go hello and notice if I type
287:30 - something in correctly now it is showing
287:32 - up in red but if I do it correctly then
287:35 - we are getting it in the correct color
287:37 - awesome okay so we are well on our way
287:39 - to completing this application we have a
287:41 - lot of what we needed done uh let me
287:43 - just have a look at my cheat sheet here
287:45 - and see what we need to do next all
287:46 - right so the next thing that we need to
287:48 - do is actually handle what's going to
287:50 - happen when we complete the text we also
287:53 - need to handle showing the words per
287:54 - minute because that's kind of the whole
287:55 - point of this typing speed test so I'm
287:57 - going to run the code one more time and
287:59 - show you that if I type more characters
288:02 - than in this text we're going to get an
288:04 - notice that we get a crash here and it
288:06 - says index out of range now the reason
288:09 - why we're getting this problem here is
288:11 - because we have more characters in our
288:13 - current text than we do in our Target
288:15 - text which means when we try to access
288:17 - Target at index I we get a list index
288:20 - out of range because we're trying to
288:22 - access an element in the Target that
288:23 - doesn't exist again that's because we
288:26 - have more characters in our list in our
288:28 - current text than we do in the Target so
288:30 - when I'm on like the 20th element of my
288:32 - uh current text here here and say my
288:35 - target text is only 15 elements long
288:37 - then I'm going to get a problem right I
288:39 - mean that's kind of a bad example but
288:40 - you get the idea that's what's going
288:42 - wrong so we need to make sure that once
288:43 - we get to the point where we've typed in
288:46 - all of the text or we've typed in the
288:47 - same number of characters as the target
288:49 - text we stop and we don't let them type
288:52 - anymore so what I'm going to do is after
288:55 - I look at the key here uh and after I
288:58 - check if it's a backspace I'm going to
289:00 - put in L if I'm going to say l if the
289:03 - Len of our current text this will tell
289:05 - us how many elements are in the
289:07 - list is uh less than the Len of our
289:11 - Target text so this will make sure that
289:13 - we cannot add any more stuff to our
289:15 - current text unless there is room to add
289:18 - it so unless the current text is less
289:19 - than the length of the target text we
289:21 - are not going to allow you to add
289:22 - another key even if they're the same
289:24 - we're still not going to allow you to
289:26 - add anything else to this because if you
289:27 - did then that would cause the index out
289:29 - of bounds exception so now let's try
289:31 - this and see if we're still getting that
289:33 - problem or not so let me run the code
289:35 - going to begin and let's just go hello
289:38 - world this is some test text for this
289:43 - app I don't really care if I spell it
289:44 - correctly and notice here I'm hitting a
289:45 - bunch of keys but nothing's happening
289:48 - because um we are already at the length
289:50 - of this text awesome okay so let's
289:53 - escape from that all right so now that
289:55 - we've done that I want to start showing
289:56 - the words per minute so we actually need
289:58 - to calculate what the person's word per
290:01 - minute is and then we need to display
290:02 - that now first let's just display it and
290:04 - then we can figure out how to calculate
290:06 - so notice I'm taking in wpm here so what
290:09 - I'm going to do is make a variable in my
290:10 - wpm test function and say wpm is equal
290:13 - to zero so that's what it will be equal
290:15 - to to start then I will pass
290:18 - wpm like that and inside of here we can
290:20 - just display it so I'm going to add to
290:23 - the string I'm going to say std. str.
290:25 - addore string such a mouthful here I'm
290:28 - going to say in an F string explain this
290:31 - in a second wpm and then inside of curly
290:34 - braces wpm and I'm going to put its
290:36 - location at 1 comma 0 so that we go one
290:39 - line below where our Target text is so
290:42 - what this is doing this F string is it
290:44 - allows us to actually embed python
290:46 - Expressions directly inside of a string
290:49 - without having to add two strings
290:50 - together so usually you'd have to
290:52 - concatenate the strings but this is a
290:54 - little bit nicer you can use this in any
290:55 - version of python this is 3.6 and above
290:58 - so you do a lowercase or uppercase F
291:01 - followed by just any string double or
291:02 - single quotation marks doesn't matter
291:03 - matter then you can write any regular
291:05 - string stuff that you would and if you
291:07 - put curly braces like this you can
291:08 - actually put a variable directly inside
291:11 - python will evaluate this as a string
291:13 - and then you will display that so I'm
291:15 - going to say uh wpm equals and then just
291:18 - wpm and that's all we need for right now
291:20 - so if we run the code so let's run this
291:23 - and I hit enter notice now we have wpm
291:26 - which is on the line below so now we
291:29 - just need to calculate the wpm and once
291:31 - we do that we will be all good okay so
291:33 - let's figure out how to calculate that
291:35 - so to calculate our words per minute we
291:37 - need to know how much time has elapsed
291:39 - so far in the program we can't calculate
291:42 - our words per minute if we don't know
291:43 - how long we've been typing for so I'm
291:45 - going to go up to the top of my program
291:46 - here I'm going to import a module called
291:48 - time now time is going to allow me to
291:50 - actually time how long I've been typing
291:52 - for so I'm going to go inside of my wpm
291:55 - test function here and I'm going to
291:57 - start by putting a start time variable
292:00 - which is equal to time.time now what
292:02 - this is going to store is a very large
292:04 - number that represents the number of
292:06 - seconds past what's known as an Epoch
292:08 - now you don't actually have to really
292:10 - understand this at all the point is that
292:11 - this is going to tell us what kind of
292:13 - the current time is when we started
292:15 - doing this so right before we hit the
292:17 - wall Loop we'll record what our starting
292:19 - time was and then inside of the W Loop
292:21 - every single iteration will calculate
292:23 - the wpm based on the start time so
292:26 - you'll see what I mean here but again
292:28 - just kind of keep keep in mind that what
292:29 - this is doing is keeping track of the
292:31 - start time it's a very very very large
292:34 - number that's going to be the number of
292:35 - seconds past a certain date I think it's
292:38 - some time in like 1970 or something
292:40 - doesn't really matter too much okay so
292:42 - we have the start time now what I'm
292:43 - going to say is time elapsed is equal to
292:46 - and then I'm going to get the current
292:47 - time minus the start time so the reason
292:50 - why this works is because time.time as I
292:53 - said is some like really large number
292:54 - that is the number of seconds past a
292:56 - certain date so if I call time.time
292:59 - again this is now going to give me the
293:00 - new time now this time is going to be
293:02 - larger than whatever ever the start time
293:04 - was so I take whatever the current time
293:06 - is subtract it from the start time and
293:08 - then that tells me how many seconds have
293:09 - elapsed now what I do need to do here
293:11 - though is use this Min function or sorry
293:13 - use this Max function and say the max of
293:16 - this n one you'll see why we need to do
293:18 - this but essentially this is going to uh
293:20 - result in us not getting a zero division
293:22 - error which we could get because what's
293:24 - going to happen is we're going to
293:25 - calculate the start time we're then
293:27 - going to go into the wall loop we're
293:28 - going to immediately calculate the time
293:29 - elapsed and the very first time we do
293:32 - this the time elapse is going to to be 0
293:34 - seconds because the time between when we
293:35 - calculated this and this is going to be
293:37 - like nothing it's going to be the exact
293:39 - same time so this will give us zero and
293:41 - when we have zero when we perform the
293:43 - next operation that could give us a
293:45 - division by zero eror anyways now what
293:48 - we're going to do is calculate the wpm
293:50 - so the equation for wpm is a little bit
293:53 - complicated I'm just going to write it
293:54 - out then I'll kind of explain how it
293:55 - works so we're going to get the Len of
293:58 - the current text underscore text like
294:00 - this we're going to divide this by the
294:03 - time elapsed divided by 60 now the idea
294:07 - here is that if we have say 30
294:10 - characters types so we have 30
294:11 - characters and we typed them in 30
294:13 - seconds then that means that our words
294:15 - per minute sorry our characters per
294:17 - minute would be 60 right if we typed 30
294:20 - characters in 30 seconds and we're
294:22 - trying to figure out how many characters
294:23 - we're going to type in the minute then
294:25 - we need to multiply our 30 characters by
294:27 - two the reason we need to multiply by
294:29 - two is because 30 is half of 60 now
294:32 - let's do the same thing except with a
294:34 - different time so let's say we type 30
294:36 - characters in 15 seconds well if we did
294:38 - that then our words per minute is going
294:40 - to be 120 the reason why we know that is
294:42 - because we can take our time lapse so 15
294:45 - we can divide that by 60 and that's
294:47 - going to give us 0.25 so we know we're
294:50 - kind of at a quarter of an hour so now
294:52 - if we take 30 so let's take 30 and we
294:55 - divide this by
294:56 - 0.25 what this is going to give us is
294:59 - 120 now you can do this with
295:01 - multiplication as well I can say 30
295:03 - multiplied by and then rather than 0.25
295:06 - I would multiply it by four and then the
295:08 - way I would get that is I would reverse
295:09 - this operation and I would do 60 over 15
295:12 - the reason it's 60 is because we have 60
295:14 - seconds in a minute so that's kind of
295:16 - the rationale here but this is only
295:18 - giving us our characters per minute so
295:20 - this right here is characters per minute
295:22 - we're going to get the line of our
295:23 - current text which is how many
295:24 - characters we've typed we're going to
295:26 - divide that by how much time has elapsed
295:28 - over 60 and that's the characters per
295:30 - minute now it turns out that the
295:32 - characters per minute divided by five is
295:34 - the words per minute so we're assuming
295:36 - the average word has five characters so
295:38 - what I'm going to do is take all this
295:40 - and now divide this by five and now this
295:42 - is the words per minute so the
295:43 - characters per minute divided by five
295:45 - gives us words per minute now one thing
295:47 - I'm going to do here continues to get
295:49 - complicated is I'm just going to round
295:50 - all of this and the reason I'm going to
295:52 - round it is so we don't get some crazy
295:54 - decimal numbers we just get the kind of
295:56 - flat words per minute right I'm sure
295:58 - that makes sense but anyways that is how
296:00 - you do wpm now again the reason why we
296:03 - have this Max of one and then whatever
296:05 - the elapse time is is so that if this is
296:08 - zero this will just give us one right if
296:10 - it's anything less than one then it
296:11 - gives us one so that way when I try to
296:14 - do my division so I try to divide the
296:17 - Len of current text by the time elapse
296:19 - over 60 this isn't zero because if that
296:22 - was Zero then I would get the zero
296:23 - division error okay so now we have the
296:26 - wpm and this will be calculated every
296:29 - single time we hit a key now I'll show
296:31 - you here how this works so let's run the
296:33 - code and let's see what our wpm is going
296:36 - to be okay so notice as soon as I start
296:38 - typing then the wpm will be calculated
296:41 - however right now I'm not typing and the
296:43 - wpm is staying the same the thing is it
296:45 - really should be decreasing right but
296:47 - the reason it's not decreasing is
296:49 - because let me escape out of here this
296:52 - line in our code key equals
296:54 - std. getet key is actually what's known
296:57 - as blocking now blocking essentially
296:59 - means that we're going to wait here
297:01 - we're not going to do anything until the
297:03 - user types a key we're going to wait for
297:05 - them to enter a key that's what this
297:06 - line is doing it's very similar to the
297:08 - input function uh in uh python right now
297:12 - the thing is I don't necessarily want
297:13 - that to happen if the user doesn't type
297:15 - anything I still want to show the wpm I
297:18 - still want it to decrease and I still
297:20 - want to show the text on the screen so
297:22 - what I need to do is actually call this
297:24 - one method here that makes this call no
297:26 - longer block now what I'm going to do is
297:29 - say
297:30 - stdr dot and then I think this is no
297:32 - delay
297:34 - and I pass true inside of here now what
297:37 - this essentially says is do not delay
297:39 - waiting for a user to hit a key the
297:42 - problem is though now if the user
297:44 - doesn't enter a key this line throws an
297:47 - exception now an exception is an error
297:49 - in Python we've seen them so the way
297:51 - that we need to handle this is we need
297:53 - to say try like this we need to say
297:56 - accept like this and then we need to say
297:58 - continue so what this is going to do now
298:01 - is make sure that this line won't crash
298:03 - on us if the user doesn't type something
298:05 - in and then if it does crash on us we go
298:08 - into this accept statement and inside
298:10 - the accept we say continue now what
298:11 - continue does is just bring us back to
298:13 - the top of the while loop it's just
298:15 - going to skip all of this right here
298:17 - because if this line cause an exception
298:19 - then this key variable it doesn't have a
298:22 - value right just it doesn't work we
298:23 - don't have a key because you didn't type
298:25 - in any key so there's no way for me to
298:27 - check what key you typed in if you
298:29 - didn't actually type in a key or you
298:30 - didn't hit a key so I need to skip the
298:32 - rest of this this if we didn't hit a key
298:35 - hopefully that makes a bit of sense uh
298:37 - let's go through an example and I will
298:38 - show you how this works okay so let me
298:40 - go python tutorial. Pi let's hit enter
298:42 - and let's start typing and again we're
298:45 - seeing that it's actually not updating
298:47 - the wpm so let me have a look here and
298:49 - see what's going on all right so it
298:50 - turns out I just need to save the code
298:52 - and rerun and now notice when I do this
298:55 - everything is working right the wpm is
298:57 - going down now let's just change our
298:59 - code a bit just so I can show you kind
299:01 - of what was going to happen if we didn't
299:03 - implement this try and accept so let's
299:04 - get rid of the try and accept and let's
299:07 - now just have key equals to this
299:09 - remember we have this stdr do no delay
299:12 - which means we're not going to wait
299:14 - we're just going to continue right so
299:16 - now watch what happens when I run the
299:17 - code I'm going to hit enter and
299:19 - immediately my program's going to crash
299:21 - we get this no input error because this
299:23 - line here right get key didn't actually
299:25 - get a key so that's why I did the try
299:27 - and accept I just wanted to show you
299:28 - that so that that explanation hopefully
299:30 - made a bit more sense okay so now we're
299:32 - getting the w PM now we're able to type
299:34 - in the text we're pretty much finished
299:36 - except what we need to do is we need to
299:39 - figure out what's going to happen when
299:40 - you actually type in all of the text
299:41 - right because at this point in time when
299:43 - we type in all of the text nothing
299:45 - actually happens so we need to make sure
299:48 - that the user when they get to the end
299:50 - of the text they've typed in all of the
299:52 - characters correctly and if they have
299:54 - then what we'll do is tell them hey you
299:55 - know you won whatever and then we'll
299:57 - prompt them to play again so what I'm
299:59 - going to do is right after this I'm just
300:01 - going to check if the user's current
300:04 - text is equal to whatever the target
300:07 - text is the only thing is the current
300:09 - text is a list and the target text is a
300:11 - string so what I need to do is convert
300:13 - this list to a string to check if it is
300:16 - the target text now there's a really
300:18 - easy way to do this in Python when you
300:19 - have a list and you want to kind of
300:20 - combine it all together into a string
300:23 - you can use something called jooin now
300:25 - what dojoy doeses is it takes a list as
300:28 - an argument so I'm going to pass to this
300:30 - my uh current text current _ text like
300:34 - this and you call it on a string now
300:36 - what it's going to do is it's going to
300:37 - combine every single character from this
300:39 - list with this string right here as
300:41 - what's known as the delimiter or the
300:43 - separator so if I were to make this a
300:45 - space then what would happen when I run.
300:47 - jooin is I would get say I typed hello
300:49 - world there I would get h e space l
300:52 - space l space o it would space them all
300:54 - out if I made this a hyphen then it
300:56 - would kind of combine them together with
300:58 - hyphens in between but if I just make
301:00 - this an empty string which is what I'm
301:02 - going to do then what it does is it just
301:04 - combines all the characters together
301:06 - because well it's combining them with an
301:07 - empty string so they're just getting all
301:09 - squished together hopefully that makes
301:11 - sense but that's what dojyan does it
301:12 - just takes all the characters and
301:14 - combines them together with this as the
301:15 - separator very useful method when you
301:17 - want to convert a list to a string so
301:19 - I'm going to say if joyin current text
301:22 - is equal to the Target text then we are
301:24 - done so what I'm going to do is I'm
301:26 - going to say
301:27 - std. no delay false the reason I'm going
301:31 - to do this is because I want to show
301:33 - something on the screen and then wait
301:35 - for the user to hit a key before I
301:37 - continue so if I want to wait for them
301:38 - to hit a key I need to get rid of this
301:40 - no delay thing because if it's still no
301:42 - delaying then I'm going to get an error
301:43 - if I'm trying to wait for them to get a
301:45 - key okay then I'm just going to break so
301:48 - I'm going to say no delay false I'm
301:50 - going to break and what that's going to
301:51 - do is bring me outside of this W Loop so
301:53 - now that I'm outside of this while loop
301:55 - what happens is this function is going
301:57 - to be done so it's going to bring me
301:59 - back to where this function was called
302:01 - and then out here I can actually show
302:03 - something on the screen and prompt them
302:05 - if they want to play again so I'm going
302:06 - to say stdc dot and let's go with add
302:10 - string like this we're going to add this
302:12 - on the second row down so really the
302:15 - third row CU I'm putting two and I'm
302:17 - just going to say you completed the text
302:20 - exclamation point and then press any key
302:24 - to continue dot dot dot and then I will
302:26 - say this dot uh and then get key so
302:31 - we'll wait for the user to type in a key
302:34 - okay so let's run this now and let's see
302:37 - what's working or if it's working so
302:39 - python tutorial. py okay hello world so
302:42 - let's go hello world this is some
302:47 - test if I could type properly for this
302:52 - app exclamation point and it says you
302:53 - complete the text press any key to
302:55 - continue great and then of course our
302:57 - wpm is 47 cuz that's what we ended up so
303:00 - we hit continue and then it's just going
303:02 - to a the program now what I want to
303:04 - happen is I want it to actually uh bring
303:07 - us or prompt us to play again so rather
303:10 - than just doing this and then ending I'm
303:12 - actually going to put this in a while
303:13 - loop so that I can play as many times as
303:15 - I want so you'll see what I mean but
303:17 - let's go while true let's put all of
303:20 - this inside of here and then let's get
303:22 - the users key and if they hit anything
303:24 - other than Escape we're just going to
303:26 - have them play again so we're going to
303:28 - say key is equal to this and we'll say
303:31 - if the ordinal value of the key is equal
303:35 - to 27 so if they hit the Escape key we
303:37 - will break so they will exit otherwise
303:40 - we'll just continue so we'll just
303:41 - continue with the wall Loop we'll call
303:42 - the wpm test function again which is
303:45 - just going to rerun all of this it will
303:47 - reset all of our variables for us and we
303:49 - will be good to go that's kind of the
303:51 - beauty of doing everything in functions
303:53 - now I don't need to kind of have any
303:54 - weird logic to run this again I just
303:57 - rerun the function right I just call the
303:59 - function another time and we are good to
304:01 - go so let's run this now and and see if
304:03 - it is
304:04 - working okay so let's hit enter and then
304:07 - we'll go hello world this is some test
304:12 - clearly I can't type Under Pressure here
304:14 - when I'm on the recording app
304:16 - exclamation point okay 59 that's not
304:18 - horrible you complet the text press any
304:20 - key to continue we hit enter and what
304:24 - happened it actually crashed the program
304:26 - uh maybe it's cuz I didn't save this ah
304:27 - that would be why I didn't save my code
304:29 - so let's rerun this again and try enter
304:31 - okay hello world this is some test text
304:36 - for this I was doing so well app
304:40 - exclamation point okay we hit enter and
304:42 - then it brings us right back in perfect
304:44 - that is exactly what I want let me hit
304:46 - escape and then I can quit Okay so that
304:49 - is pretty much all we need for the
304:51 - functioning application the last thing I
304:53 - want to show you is how we can randomize
304:55 - the text that's on the screen because
304:56 - it's going to get pretty boring if we
304:58 - just always have the exact same text
305:00 - right and that's probably not the best
305:02 - so what I've done here is I've created a
305:03 - file called text.txt now you can do this
305:06 - as well I trust you guys can create a
305:08 - text file on your own you can probably
305:09 - rightclick on your desktop or whatever
305:11 - and make a new file and what I've done
305:13 - is I've put some uh different text here
305:16 - on different lines so notice every
305:17 - single line has kind of a different
305:18 - piece of text that I want the user to be
305:20 - able to type and I can add as many of
305:22 - these as I would like so what I'm going
305:24 - to do is read in this text file store
305:26 - all of these pieces of text and then
305:28 - randomly select one of them for the user
305:31 - to be typing when they're going with
305:33 - this program so I'll show you how we can
305:35 - do that we're going to write a function
305:37 - here I'm going to say load text okay and
305:41 - all this is going to do is it's going to
305:42 - open up this file it's going to get all
305:43 - the lines and it's going to randomly
305:45 - choose one now since we're doing
305:46 - something random we need to import the
305:48 - random module so I'm going to say import
305:51 - random like that and we are now going to
305:55 - load the file so to load a file is
305:56 - pretty easy you can say with open then
305:59 - you're going to put the name of the file
306:01 - I'm going to go text do txt and I'm
306:03 - going to put the mode I want to open it
306:05 - in for now it's just going to be R if
306:07 - you wanted to create a new file you
306:08 - would do W so that actually is Right
306:10 - mode so you would open a new file in
306:12 - write mode and you could write to the
306:14 - file I'm not going to show you how to do
306:15 - that but I just wanted to mention that
306:16 - but we're going to open in read mode I'm
306:18 - going to say as F and then what I'm
306:20 - going to do is I'm going to read all the
306:22 - lines so I'm going to say lines equal to
306:24 - f. read lines now what this does this
306:27 - with is essentially ensure that this
306:29 - file will be closed after we open it
306:32 - this is known as a context manager it's
306:34 - pretty Advanced I don't want to explain
306:35 - it too much but we say with and then we
306:38 - have this open function this is just how
306:40 - you open a file and we say as F which
306:42 - means we're going to take this kind of
306:43 - file object here this file variable
306:46 - we're going to store it in F and then we
306:48 - can access the file by using F inside of
306:50 - this width so just like the if statement
306:52 - we have our indentation right so I'm
306:54 - going to say lines is equal to f. read
306:56 - lines this is going to give me a list
306:57 - containing all of the lines of this open
307:00 - file and then I want to randomly select
307:02 - one of those lines and return it so I'm
307:04 - going to say return random.
307:08 - choice on lines and then strip now what
307:13 - random. choice does is just randomly
307:15 - choose one element from a list so if I
307:17 - have a list with 100 different things
307:19 - inside of it just randomly picks one and
307:20 - just gives it to me so which is going to
307:22 - give me one of these kind of strings of
307:23 - text one of these lines now the thing is
307:26 - all of these lines of text have an
307:28 - invisible character at the end which is
307:30 - back sln now we looked at this this is
307:32 - the new new line character the reason
307:33 - why they have this is to tell my Editor
307:35 - to display the file in this way if I
307:38 - they didn't have the back sln I would
307:39 - have no way to know kind of where my
307:41 - line breaks are in the uh the text file
307:44 - so what I need to do is I need to remove
307:46 - this back sln which is what strip does
307:49 - from all of these lines because I don't
307:51 - want the user to have to type in back
307:52 - sln I just want to remove it right so
307:54 - I'm going to say strip strip will just
307:56 - get rid of any leading or trailing Whit
307:58 - space characters and a whit space
308:00 - character is the back SL characters
308:02 - that's why I have strip okay so now we
308:05 - have load text this will just give us
308:07 - some Target text so rather than manually
308:09 - coding in my target text now I'm just
308:12 - going to say load text and this will
308:14 - return to me one of the lines from this
308:16 - file now it's very important that this
308:18 - file is in the same directory as where
308:20 - your python file is if you put this not
308:23 - in the same directory it's not going to
308:24 - work it just needs to be in the same
308:25 - directory so you can see my tutorial in
308:27 - text.txt are right beside you now if you
308:30 - don't want to do this that's totally
308:31 - fine you can just manually hard code in
308:32 - the text but I figured I'd show this to
308:34 - you because it is kind of useful okay so
308:37 - that is pretty much going to wrap it all
308:38 - up let's do a few tests here and make
308:40 - sure I haven't messed anything up too
308:41 - badly and then we'll wrap up the video
308:44 - so let's hit any key to begin and let's
308:46 - go subscribe so this looks like it's
308:48 - working to Tech with Tim on YouTube
308:54 - clearly not for typing lessons okay
308:56 - perfect 43 solid I'm sure many of you
308:58 - can type a lot faster than that but
309:00 - let's go on to the next one and then
309:01 - notice it gives me a different string of
309:03 - text we can escape let me just run it
309:05 - again and okay it's giving me another
309:07 - test I'm just going to keep running this
309:09 - to make sure it's going through all of
309:10 - them and awesome okay so it does give me
309:12 - all of the different options that I have
309:14 - of course you can add more to this text
309:16 - file if you like so with that said that
309:19 - is going to wrap up the video there you
309:21 - go we have our wpm tester and I've
309:24 - showed you how we can add all kinds of
309:25 - styles and nice stuff to our terminal I
309:28 - thought this was a really fun beginner
309:29 - project I do kind of admit it's a little
309:31 - bit bit harder than maybe what I would
309:33 - consider beginner but I still think you
309:35 - guys were probably able to follow along
309:36 - at least I hope you were let me know in
309:38 - the comments down below and this showed
309:39 - you a ton of cool stuff that now you can
309:41 - add to your own
309:45 - projects in this video I'll be walking
309:48 - you through a mini python project where
309:50 - we will create an alarm clock SL timer
309:53 - now this will be fairly straightforward
309:55 - but I will show you how to play sound
309:56 - through Python and how you can do a
309:59 - fancy thing with the terminal which
310:00 - involves clearing what you've already
310:02 - printed and then printing something over
310:04 - top of it so you kind of get a live
310:06 - countdown timer you know 10 9 8 7 Etc
310:10 - and it looks a little bit better than
310:12 - printing out like a ton of lines of code
310:14 - probably something that's interesting
310:15 - and that you guys have not seen before
310:18 - regardless that's what we're going to
310:19 - build all right so just to give you a
310:21 - super quick brief here on what we're
310:22 - going to be doing essentially we're
310:24 - going to ask the user to input some kind
310:25 - of time you know 5 minutes 6 minutes 30
310:28 - seconds whatever it is we're then going
310:29 - to give them a live kind of countdown
310:32 - timer and then as soon as that timer or
310:33 - alarm goes off we're going to play a
310:35 - sound now that means the first thing we
310:37 - need here is some kind of sound effect
310:39 - so that we can actually play that when
310:40 - the alarm goes off so to get a sound
310:43 - effect you can just download one on your
310:44 - own you can pick one that's on your
310:46 - computer and just drag it into the same
310:49 - directory as where your python script is
310:51 - so in my case I have a folder open on my
310:53 - desktop and inside the folder I have my
310:55 - alarm clock. py file and then alarm. MP3
310:59 - which is a sound effect I downloaded
311:00 - from this link which I will leave in the
311:02 - description so whatever sound effect you
311:04 - want just make sure it's in the same
311:05 - directory as the file uh that you're
311:08 - writing your python code in okay next we
311:11 - need to install a module which is going
311:13 - to allow us to play this sound effect so
311:15 - I'm going to open up my terminal here or
311:16 - command prompt whatever you want to
311:18 - refer to it as and I'm going to type the
311:20 - command pip install play sound so this
311:24 - is the name of the library module that
311:26 - we're going to be using to play the
311:27 - sound okay pip install play sound I
311:30 - already have it installed if for some
311:32 - reason that doesn't work for you you can
311:33 - try pip 3 install play sound if that
311:36 - doesn't work try python hyphen M pip
311:40 - install play sound and if that doesn't
311:42 - work try Python 3 hyphen M pip install
311:46 - if none of those work I will leave two
311:47 - videos on the screen that show you how
311:49 - to fix this pip command okay at this
311:52 - point I'm going to assume you have play
311:53 - sound installed and what we can do now
311:56 - is import this module so we're actually
311:58 - going to go to the top of our program
312:00 - and we're going to say from place sound
312:03 - import play sound now this here is a
312:06 - function that we can use uh to play a
312:08 - sound so we can simply say play sound we
312:11 - put the name of our sound which in this
312:13 - case is alarm. MP3 notice it matches the
312:16 - file name here and since it's in the
312:18 - same directory all I need to know is the
312:19 - name of the file and then if I run my
312:22 - code it will start playing this sound
312:25 - this one is pretty aggressive it's also
312:26 - fairly loud hopefully it's not going to
312:28 - annoy you guys too bad but that is how
312:30 - you play sound very very easy okay next
312:34 - I'm going to import a module here called
312:37 - time we're going to use time uh to kind
312:39 - of regulate the time so we have you know
312:41 - 1 second for each iteration as we're
312:44 - doing this countdown clock perfect we're
312:47 - then going to make a function so we're
312:49 - going to say Define alarm this is going
312:51 - to take in a number of seconds and this
312:54 - is how long until we will play that kind
312:56 - of alarm sound effect okay the first
312:59 - thing we're going to do inside of our
313:00 - function here is we're going to say time
313:02 - elapsed is equal to zero we're going to
313:04 - need a variable to keep track of well
313:05 - how much time has elapsed and then we're
313:08 - going to have a wall Loop and we're
313:09 - going to say well the time elapsed is
313:12 - less than our seconds we're going to do
313:16 - whatever is inside of here perfect so
313:19 - the first thing we're going to do is say
313:21 - time do sleep one now this means wait
313:25 - for 1 second very straightforward just
313:27 - pause the code right here wait for a
313:29 - second and then continue obviously we
313:31 - need need to do that because if we don't
313:33 - have this kind of regulation of time
313:35 - then the alarm is just going to go as
313:36 - fast as it possibly can as fast as your
313:38 - computer can run it and well we're not
313:40 - actually going to be waiting 20 seconds
313:41 - 30 seconds Etc okay next we're going to
313:45 - say
313:46 - _ elapsed plus equals 1 okay and now we
313:52 - want to figure out uh how many minutes
313:54 - are remaining and how many seconds are
313:56 - remaining and then print that out to the
313:58 - screen so you can do this in whatever
314:00 - kind of format or order that you want
314:02 - but in my case I'm just going to take
314:03 - the number of seconds I'm going to
314:04 - figure out how many minutes are in that
314:06 - and how many seconds are in that and
314:07 - then print that out if you wanted to do
314:09 - hours you know weeks days months Etc
314:11 - feel free to go ham and do that in my
314:13 - case I'm just going to do minutes and
314:15 - seconds so first I'm going to say time
314:18 - left is equal to the seconds minus the
314:22 - time elapsed because seconds is how many
314:25 - seconds we want to run this for time
314:27 - elaps as well how much time has elapsed
314:28 - so we subtract those and that is how
314:30 - much time is remaining
314:32 - then we're going to figure out the
314:33 - number of not hours the number of
314:35 - minutes so we're going to say minutes
314:37 - left is equal to the time left integer
314:42 - divided by 60 integer division is two
314:44 - forward slashes and that's going to give
314:46 - you the integer component of division so
314:49 - for example if we had
314:51 - 125 seconds like this and we inst divide
314:54 - this by 60 then we're going to get two
314:57 - because 60 evenly divides 125 two times
315:00 - all right very good next we're going to
315:02 - say seconds underscore left is equal to
315:05 - the time left and then this is going to
315:08 - be modulus 60 now the way the mod
315:11 - operator Works which is the percent sign
315:13 - here is it gives you the remainder after
315:15 - division so again same example we have
315:17 - 100 25 seconds if we do the mod operator
315:20 - here by 60 that is going to give us five
315:23 - because 60 goes into one 125 two times
315:26 - sorry so that uses 120 seconds and then
315:29 - we have a remainder of five okay so that
315:32 - gives us the minutes and seconds left
315:34 - now we can print those out so we're
315:36 - going to say print we're going to use an
315:38 - F string available in Python 3.6 and
315:41 - above so you do F either lowercase or
315:43 - uppercase doesn't matter you do a string
315:46 - and then inside of the string you can
315:47 - use curly braces and inside of the curly
315:49 - braces you can just put a variable so I
315:52 - can do minutes colon and then seconds
315:55 - and now it's going to print however many
315:57 - minutes colon however many seconds are
315:59 - left great lastly we can go here and we
316:03 - can call the alarm function and let's
316:06 - just test this out with say 10 seconds
316:08 - to see if everything's working before we
316:09 - go a little bit uh further and kind of
316:11 - make things look prettier all right so
316:13 - let's run this here run the code and
316:16 - notice that we will get an issue name
316:19 - minutes is not defined okay that's
316:21 - because I need to put minutes left and
316:24 - seconds left so let's quickly fix that
316:26 - bug and then
316:28 - rerun okay 9 8 7 6 5 Etc it's just going
316:33 - to count all the way down however notice
316:36 - that this looks a little bit weird right
316:38 - we don't want to have like 00 0 0 1
316:41 - instead we'd want to have something like
316:42 - 0 0 01 that's what we're used to seeing
316:45 - right or you know 20 minutes and 5
316:49 - Seconds we want it to be formatted like
316:50 - this so how do we fix that well there's
316:53 - actually a fancy thing we can do in
316:54 - Python to automatically format our
316:56 - numbers we can go to our variable here
316:58 - which is a number we can put a colon
317:00 - directly after it and then we can put
317:03 - 02d and this stands for make this two
317:06 - digits and Pad it with a zero so if it's
317:09 - already two digits fine we leave it the
317:11 - same but if it's only one digit we add a
317:12 - leading zero that's what this is going
317:14 - to do so I'm going to copy that and I'm
317:16 - going to put that on second left as well
317:18 - and now just to quickly show you if I
317:20 - run the code here notice that we now get
317:22 - our formatting with our leading zeros
317:25 - Perfect all right so now that we've
317:26 - handled our formatting the next thing we
317:28 - need to do is kind of clear the terminal
317:31 - and make it so everything is on the same
317:32 - line and it looks like it's constantly
317:34 - updating kind of the same countdown
317:36 - timer so to do this we're going to use
317:38 - two sequences of characters which are
317:40 - known as a ANSI characters or like
317:42 - commands or Escape sequences whatever
317:44 - you want to refer to them as essentially
317:46 - these are invisible characters that when
317:48 - printed to the terminal will manipulate
317:50 - the terminal in our case it's going to
317:52 - clear something or delete something but
317:54 - it could change the color of something
317:55 - it could make something bold underline
317:57 - italicize there's all kinds of styles
317:59 - and interesting sequences and character
318:01 - CS you can print that manipulate the
318:03 - terminal so I'm just going to show you
318:04 - two of them here related to clearing but
318:06 - if you want to look at more of them feel
318:07 - free to look them up you're looking at a
318:10 - ANSI I guess it's characters or Escape
318:13 - sequences so we need two of them the
318:15 - first one we're going to have is clear
318:18 - and this just going to clear the entire
318:19 - terminal screen so that it's empty we
318:21 - don't see anything else now to do this
318:22 - we're going to do back
318:24 - sl033 then this is going to be a square
318:26 - bracket then two and the capital letter
318:29 - j the next sequence we want want is
318:31 - going to be clear and return and this
318:35 - works a little bit differently but this
318:37 - is going to return the character to or
318:39 - sorry return the cursor to the home
318:42 - position so that when we print again
318:44 - it's going to print over whatever was
318:46 - currently there whatever was there
318:48 - before so now this sequence is 033
318:52 - square bracket and then H okay so what
318:55 - we're going to do is start by just
318:56 - clearing the entire terminal right once
318:58 - we clear the entire terminal then we're
318:59 - going to print out this and then the
319:02 - next time we print it we're going to
319:03 - clear return to the home position and
319:05 - kind of print over it I know it seems a
319:07 - bit strange but let's start by just
319:09 - looking at one of them so I'm going to
319:10 - go here and I'm going to say print clear
319:13 - and we'll just do clear okay the first
319:15 - one so now notice when I run my code
319:19 - that it clears the terminal and then it
319:21 - starts printing stuff out so that's fine
319:23 - but it's printing everything on a new
319:25 - line which we don't want so what I can
319:27 - do is stop this and now if I use my
319:30 - other sequence I'm going to go here in
319:33 - my F string and I'm going to print
319:36 - clear and return before I print all of
319:40 - this and now watch what
319:43 - happens okay 9 8 7 and look it's on the
319:47 - same line and it's just updating the
319:49 - value okay so we cleared the entire
319:51 - terminal then we cleared and returned to
319:52 - that home position and kind of printed
319:54 - over what we had before so hopefully
319:58 - that is making a little bit of sense I
319:59 - know it's kind of weird how these uh
320:01 - Escape characters function but now we
320:03 - have like a decent timer being updated
320:05 - on the screen so now the last thing we
320:07 - need to do is once our alarm is finished
320:10 - or the timer is up we need to play the
320:12 - sound so we're going to say play sound
320:14 - and then this is going to be alarm.
320:16 - MP3 and we need to ask the user how many
320:19 - minutes and how many seconds they want
320:21 - to set the alarm for so let's go ahead
320:23 - and do that we're going to say minutes
320:26 - is equal to
320:28 - input how many minutes to weight or
320:32 - whatever you want to say here okay now
320:35 - I'm just going to convert this directly
320:36 - into an integer I'm going to assume that
320:38 - they give me a valid int if they don't
320:40 - that's going to crash the program but
320:41 - again we're just going to assume that's
320:42 - fine then we're going to say seconds is
320:45 - equal to int
320:47 - input how many seconds to
320:50 - wait like this and now what we can do is
320:54 - we can say total underscore seconds is
320:58 - equal to minutes MTI 60 plus the number
321:01 - of seconds that they said and then we
321:03 - can pass here total uncore seconds and
321:07 - if we want to make this a little bit
321:08 - nicer we can have some text here that
321:10 - says alarm will sound
321:15 - in and then the minutes and the seconds
321:18 - remaining okay so we're clearing and
321:20 - then we're going to print the alarm will
321:21 - sound in and then it will update
321:23 - whatever this value is and keep going
321:24 - downwards okay so that is pretty much
321:26 - our entire program let's try this out
321:29 - here guess we're going to run how many
321:30 - minutes to wait let's wait 0 minutes and
321:32 - how many seconds let's wait 12 seconds
321:35 - okay alarm will sound 11 10 9 eight goes
321:40 - on and then hopefully we should hear the
321:42 - sound okay so let's give this a second
321:45 - two
321:48 - one
321:50 - and for some reason I'm not hearing the
321:54 - sound okay ah the reason I'm not hearing
321:57 - the sound is cuz my speakers are off but
321:59 - I think you guys probably heard it in
322:00 - the recording because of the way that I
322:02 - have things set up and there you go
322:03 - everything functions it plays the sound
322:05 - and we are
322:11 - [Music]
322:12 - good all right so let's dive into the
322:14 - project just as a quick brief here what
322:17 - we're going to do is create a password
322:18 - manager that allows us to generate
322:20 - passwords with a minimum length so maybe
322:22 - you pass a minimum length of seven that
322:24 - means any password you get will have
322:26 - well a minimum length of seven
322:28 - continuing we're also going to allow the
322:30 - user to set if they want the password to
322:32 - contain special characters and if they
322:34 - want it to contain numbers this way it's
322:36 - slightly Dynamic and we can create some
322:38 - different types of path password sorry
322:40 - so with that said let's get into the
322:42 - project so I'm here in Visual Studio
322:44 - code I assume that you have a python
322:46 - environment setup you can do this in
322:47 - really any version of python and we're
322:49 - going to start at the top of our program
322:50 - here by importing two modules that we're
322:53 - going to use so we're going to import
322:55 - random and we're going to import string
322:57 - now we're going to use string to just
322:59 - grab all of the lowercase and upper case
323:01 - letters that exist and then all of the
323:03 - special characters as well as all of the
323:04 - numbers or digits kind of a cool thing
323:07 - that you may not have seen before now
323:09 - there's two different things that we
323:10 - need to do here the first thing we need
323:12 - to do is ask the user what the minimum
323:14 - length is if they want numbers if they
323:16 - want special characters Etc and then we
323:18 - need to write a function which is
323:20 - actually going to generate the password
323:21 - we can do this in any order that we want
323:23 - for now I'm going to start by writing
323:25 - the function so I'm going to say Def and
323:27 - then I'm going to say generate uncore
323:30 - password
323:31 - and for the parameters of this function
323:33 - I'm going to pass the following which is
323:35 - the minimum length then I'm going to
323:38 - pass
323:39 - numbers is equal to true and then
323:43 - special underscore characters is equal
323:46 - to true and for now I'm just going to
323:48 - write pass here while I explain this so
323:50 - these are the parameters the things that
323:52 - you need to pass the function when you
323:54 - call it again we start with the minimum
323:55 - length which will be a number and then
323:57 - we have two optional parameters here
323:59 - where we can specify if we want the
324:01 - password to include numbers or if we
324:02 - want it to include special characters
324:05 - the way you would call this function is
324:07 - like so so I would say generate password
324:09 - and if I passed just 10 then that would
324:11 - create a password for me that has
324:13 - minimum length of 10 and includes
324:15 - numbers and special characters if we
324:17 - passed say like 10 and then false that
324:20 - would mean we'd have a password minimum
324:22 - like 10 would not include numbers but
324:24 - would include special characters so you
324:26 - can see that if I only pass one of the
324:28 - different arguments then I'm kind of
324:29 - substituting that here for this
324:31 - parameter obviously I could pass both of
324:34 - them as well if I wanted to do that so I
324:35 - could say false and false but by default
324:38 - if you don't pass them we're going to
324:39 - have that equal to True okay all right
324:42 - so now that we're here I just want to
324:43 - grab all of the potential characters so
324:46 - like numbers special characters letters
324:49 - Etc that we could be using so I'm going
324:51 - to say letters is equal to string. asky
324:55 - underscore characters uh is it asky
324:57 - characters or asky letters I think it's
324:59 - asky letters then I'm going to say
325:01 - digits is equal to string Dot and then I
325:05 - think it's digits uh yes that's correct
325:07 - and then I'm going to say special uncore
325:10 - chars is equal to and then this is going
325:13 - to be actually let's make this special
325:16 - is equal to string.
325:18 - punctuation I think I spelled that
325:20 - correctly okay now I'm just going to
325:22 - quickly print these out just so you can
325:23 - see what they look
325:25 - like and then we will continue so I'm
325:28 - going to say channelate password and
325:30 - we'll just pass 10 for now just so that
325:32 - we can see what these are okay so when I
325:34 - call the function you can see that what
325:36 - we get printed here is all of the
325:37 - lowercase and uppercase English letters
325:40 - then we get all of the digits and then
325:42 - we get all of these special characters
325:43 - which are really just all the
325:44 - punctuation on our keyboard perfect so I
325:47 - just want all of those so that I can
325:48 - kind of create the set of characters
325:50 - that I'm going to select from when I
325:52 - generate this password so now we need to
325:55 - combine all of these into one kind of
325:57 - list or one large string that we're
325:59 - going to randomly choose from however
326:02 - that string that we're going to randomly
326:03 - choose from should only contain uh what
326:06 - we have specified here so for example if
326:08 - we're including numbers and we're
326:09 - including special characters then we
326:11 - want to be picking from all three of
326:12 - these variables so either a letter
326:14 - number or special character every single
326:16 - time we kind of generate a new character
326:18 - for the password if we're not using
326:20 - numbers and obviously it's just letters
326:21 - and special and then if we are using
326:24 - numbers but not special characters then
326:25 - it's just letters and our special
326:27 - characters so how do we do this well
326:30 - we're going to say say the following
326:31 - we're going to say should I do the
326:34 - selections no let's call this characters
326:36 - is equal to letters because we're always
326:38 - going to have letters no matter what
326:40 - then I'm going to say if
326:43 - numbers like this then characters plus
326:48 - equals and then digits so if this
326:50 - variable is true for including numbers
326:52 - I'm going to take all of my digits which
326:54 - by the way are inside of a string and
326:56 - I'm going to add those to the letter
326:58 - string so now they're combined and then
327:01 - I'm going to say if special
327:04 - characters like this then characters
327:08 - plus equal special like that so now if
327:11 - we have our special characters we add
327:13 - that to our characters which will allow
327:15 - us to select from those when we are
327:17 - generating the password perfect so now
327:20 - what we're going to do is start a loop
327:22 - and during every iteration of that loop
327:24 - we're going to generate a new character
327:25 - to add to our random password and we're
327:27 - going to continue that Loop until we
327:29 - meet the criteria so until we have for
327:31 - example a number a special character and
327:34 - we are at the minimum length so we need
327:36 - to set up a few variables here the first
327:38 - variable I'm going to create is PWD
327:40 - which stands for password and this is
327:41 - what will store the password the next
327:43 - variable is going to be called meet
327:45 - criteria and actually this will be meets
327:47 - criteria and I'm going to make this
327:49 - equal to false now we're going to set
327:51 - this variable to True once the password
327:54 - meets the criteria and meeting the
327:56 - criteria will mean that it includes a
327:58 - number and a special character or it
328:00 - just includes a number or just includes
328:01 - a special character Etc and that's going
328:03 - to be based on what the input is to this
328:05 - function so we want to make sure that we
328:07 - have at least one special character and
328:09 - at least one number if you made these
328:10 - equal to True next we're going to have a
328:13 - variable that tells us if we do have a
328:15 - number in our password so we're going to
328:16 - say has number for right now that's
328:18 - going to be equal to false and then
328:20 - we're going to have has special and
328:23 - that's going to be equal to false as
328:24 - well okay so now that we have these
328:26 - variables we're going to create a while
328:27 - loop and we're going to say w not meet
328:32 - underscore
328:33 - criteria uh like that and actually not
328:37 - and or PWD the Len of PWD is less than
328:43 - the
328:43 - Min length Okay so this is the condition
328:47 - for our for Loop or for our while loop
328:49 - sorry so we're saying while we are not
328:52 - meeting the criteria so while we don't
328:53 - have a special character or don't have a
328:55 - number or whatever that criteria is or
328:57 - the length of our password is not yet
328:59 - equal to or greater than the minimum
329:01 - length we're going to continue doing
329:03 - this where we're going to continue
329:04 - adding characters to our password
329:06 - hopefully that makes a little bit of
329:08 - sense now I'm going to generate a random
329:10 - character that I want to add to my
329:12 - password add it and then if it's a
329:13 - number I'm going to set has number equal
329:15 - to true if it's a special character I'm
329:17 - going to set has special equal to true
329:19 - and then at the bottom of the W Loop I'm
329:21 - going to adjust this meets criteria
329:22 - variable to tell me if the password
329:24 - currently meets the criteria based on
329:26 - these two parameters so we're going to
329:29 - say uh new _ Char is equal to random.
329:33 - Choice and then this is going to be from
329:36 - the characters uh kind of string here so
329:38 - we've built this character string which
329:41 - has all of our available characters we
329:42 - can pick from so we're going to randomly
329:44 - pick one using random. choice just picks
329:46 - a random element out of the string for
329:48 - us that's why we imported random and
329:50 - we're going to add that to our password
329:51 - so PWD plus equals and then the newcore
329:54 - Char we're now going to say if the new
329:57 - character uh is in our digits so is in
330:01 - digits like that then hasore number is
330:06 - equal to true and we're going to say l
330:08 - if the new Char is in our special
330:11 - characters then has special is equal to
330:15 - true so again this is telling us if this
330:18 - character exists inside of the digits
330:20 - which we have up here and it's telling
330:22 - us if it exists inside of our special
330:24 - characters which we have right here if
330:26 - it does then we're going to adjust these
330:28 - variables so we know now if we have a
330:29 - special character and if we have a
330:31 - number there's a few other ways to go
330:33 - about doing this but the way I'm coding
330:34 - this is one of the more efficient ways
330:36 - rather than rechecking the entire
330:38 - password every single time to see if it
330:40 - has a special character or see if it has
330:42 - a number okay so next what we need to do
330:46 - now is update this meets criteria
330:48 - variable so it's a little bit strange
330:50 - how I'm going to do this but I want to
330:52 - show you uh kind of a more complicated
330:54 - way just as a bit of a learning
330:55 - experience here so I'm going to say
330:57 - meets criteria is equal to true now
331:01 - you're going to see this as a common
331:02 - pattern when you're programming that you
331:04 - actually start a variable equal to true
331:06 - and then you try to prove that the
331:08 - variable is false and then if that's the
331:10 - case you set it to false so I'm going to
331:12 - say meets criteria is equal to true then
331:14 - I'm going to check a few things and set
331:16 - it to false if it needs to be false okay
331:18 - that's how it's going to work and if I
331:19 - didn't set it to false that means well
331:21 - I've met the criteria so I'm going to
331:23 - say if numbers like this and remember
331:27 - numbers is telling me that I should
331:28 - include numbers in the um in the
331:30 - password so I'm going to say if numbers
331:33 - then
331:34 - meet criteria is equal to and in this
331:38 - case we can just say numbers or not
331:41 - numbers sorry
331:43 - hasore uh number then we're going to say
331:47 - if special and did I just call it
331:50 - special no special characters then meets
331:55 - criteria is equal to meets criteria and
332:00 - and in this case uh special
332:04 - has
332:05 - underscore special okay now the way this
332:09 - works is that I'm starting by saying if
332:11 - we should include a number then we're
332:12 - going to set the meets criteria variable
332:14 - equal to if we have a number or not so
332:17 - if we do have a number this is going to
332:18 - be equal to true if we don't it's going
332:19 - to be equal to false then after that no
332:22 - matter what so whether this is true or
332:24 - false I'm going to do this other if
332:25 - statement where I say if we have special
332:27 - characters or if we should include
332:28 - special characters then meets criteria
332:31 - is going to be equal to meets criteria
332:33 - and has special now the reason I'm using
332:36 - this and here is because if has number
332:38 - was equal to false or if at this point
332:40 - meets criteria is equal to false then it
332:43 - doesn't meet the criteria right if we
332:45 - don't have a number but we're supposed
332:46 - to include a number we don't meet the
332:48 - criteria so it doesn't matter what has
332:49 - special is this should return false so
332:52 - that's why I'm putting meets criteria
332:53 - here then I'm checking that with has
332:55 - special so if we did have a number for
332:58 - example if this if statement was true
333:00 - then this is equal to true and if we
333:02 - have a special character then that's
333:03 - equal to true so meets criteria is equal
333:05 - to true if we didn't have a number but
333:08 - we do have a special character then this
333:10 - is equal to false hopefully you can kind
333:13 - of understand where I'm going here and
333:14 - how this works there's a bunch of other
333:16 - ways I could probably have written this
333:17 - a little more clear but I just wanted to
333:19 - show you an approach of kind of doing it
333:21 - in this format and using a what would
333:23 - you call it a chain conditional or a
333:25 - compound conditional here with the and
333:27 - keyword if you're not familiar with the
333:29 - and keyword this expression returns true
333:31 - only if both the leftand side and the
333:34 - right hand side are true so try if you
333:36 - don't understand to pause the video and
333:38 - kind of figure out what I'm doing here
333:39 - and how that works uh but this will now
333:42 - kind of finish our generate password
333:44 - function so from here I'm now going to
333:46 - return my password and at this point
333:48 - it's guaranteed that my password is
333:50 - going to have uh at least one number and
333:53 - at least one special character and be
333:55 - the minimum length assuming that this
333:56 - was true and this was true all right so
333:58 - let me zoom out here we'll run through
334:00 - the code quickly and then we can do our
334:01 - inputs so the user is going to tell us
334:03 - the minimum length if it should have a
334:04 - special character Etc and we'll kind of
334:06 - test the program out so we get our
334:09 - letters digits and special characters
334:11 - fairly straightforward we then create a
334:13 - string that contains all of the
334:14 - different characters we could be
334:16 - selecting from so we've already
334:17 - explained how that works then we say our
334:19 - password is empty we currently do not
334:21 - meet the criteria we do not have a
334:23 - number and we do not have a special
334:26 - character now we say while not meets
334:28 - criteria or or the length of our
334:30 - password is less than the minimum length
334:32 - so if either of these two are true then
334:35 - we're going to continue then we generate
334:37 - a new character by randomly selecting
334:39 - from the characters we can pick from we
334:41 - add that to our password and then we
334:43 - determine if that new character was a
334:44 - number if it was we're going to say has
334:46 - number is equal to true and if it was a
334:48 - special character we're going to say has
334:49 - special is equal to true then we're
334:51 - going to set meets criteria equal to
334:52 - true and if we have a number or if we
334:55 - should include a number sorry I keep
334:57 - mixing this up but if we should include
334:58 - a number but we don't have a number
335:00 - we're going to set meets criteria equal
335:02 - to false if we should include a number
335:04 - and we do have a number then meets
335:05 - criteria will stay true okay then we go
335:08 - here and we say if special characters
335:10 - then meets criteria is equal to meets
335:12 - criteria and has special which is what I
335:15 - just explained which will make sure that
335:17 - this is going to be equal to false if we
335:18 - don't have one of the two things that we
335:21 - need then when these conditions are
335:23 - false so when we are meeting the
335:25 - criteria and when the length of the
335:26 - password is at least the minimum length
335:29 - then we will return the password okay so
335:31 - let's just try calling generate password
335:33 - uh using some manual inputs then we can
335:35 - grab our user inputs so I'm going to say
335:37 - PWD is equal to generate password and
335:39 - then I'm going to print PWD here and for
335:43 - now we're just going to generate it with
335:44 - 10 minimum characters and containing
335:46 - numbers and special characters okay
335:49 - notice that this is the password that we
335:50 - got we can run it again we'll get
335:52 - another password and we can keep running
335:54 - this as many times as we'd like so now
335:57 - the last step is to ask the user to give
335:59 - us the information that we pass to this
336:01 - function so we're going to say the
336:04 - Minore length is equal to input let me
336:08 - zoom in a little bit here so we can read
336:09 - this better and I'm going to say enter
336:13 - the minimum length Okay then we're going
336:16 - to convert this to an integer because we
336:18 - need this as a number value we're just
336:20 - going to assume they give us a valid
336:22 - integer if they don't it's going to
336:23 - crash the program but we don't need to
336:25 - handle that right now we're just going
336:26 - to assume they give us valid input then
336:28 - we are going to say
336:30 - uh has number is equal to and then
336:35 - input do
336:37 - you
336:39 - want to have a number or do you want to
336:43 - have
336:45 - numbers question mark and then we'll say
336:47 - that we're going to accept either y or
336:49 - no all right and then we're going to
336:52 - have has special we're going to say do
336:55 - you want to have special characters now
336:59 - for both of these inputs I'm going to
337:01 - convert them to lower cases so do lower
337:03 - is just going to take whatever the user
337:05 - types in and convert it into lowercase
337:07 - so we're going to do that here and then
337:09 - I'm going to check if this is equivalent
337:11 - to Y so if the lowercase thing that they
337:13 - typed in is equal to the lowercase
337:15 - letter Y then that means yes we should
337:17 - have a number and then same thing here
337:19 - check if this equal to lowercase y so
337:21 - they if they type anything other than y
337:23 - either uppercase or lowercase then we
337:26 - are not going to include the number or
337:27 - not going to include the special
337:29 - character okay so this is going to
337:30 - return a Boolean for us giving us either
337:32 - true or false next I'm going to go down
337:35 - here to PWD and I'm going to pass all my
337:37 - parameters so I'm going to say Min
337:40 - length has number and has special and
337:45 - then I can
337:47 - print the generated password is and then
337:52 - whatever the password is all right so
337:55 - quickly run through this we ask them
337:57 - first what is the minimum length they
337:58 - want we convert that into an integer
338:00 - because we need a number value and by
338:02 - default whatever is entered in the input
338:04 - statement is going to be a string so we
338:05 - got to convert that to an INT then we
338:07 - ask them if they want to include a
338:08 - number we cast that or convert that to
338:11 - lowercase and then we check if it's
338:12 - equal to Y the double equal sign in
338:14 - Python checks for equivalents so we're
338:16 - checking if they're exactly the same if
338:18 - it is then this is true and we will
338:20 - include a number then we do the same
338:22 - thing for special characters we take all
338:24 - of our three values here that we've
338:25 - asked the user for pass that to our
338:27 - function and then print out with the
338:28 - generated pass password is so let's run
338:30 - this okay Enter the minimum length Let's
338:33 - Go with 25 do we want to include numbers
338:36 - yes do we want to include special
338:37 - characters let's go with no and there
338:39 - you go we get our password we can run
338:41 - this again minimum length let's go with
338:43 - 20 numbers no special characters yes and
338:47 - we actually got a small error here it
338:49 - says local variable meets criteria
338:50 - reference before assignment let me have
338:52 - a look at why we're getting this we'll
338:54 - fix that error and then we'll be done
338:56 - all right so the issue is that I
338:57 - accidentally spelled this wrong so
338:59 - criteria has to have the i a and I only
339:02 - had a so it was saying I referenced it
339:04 - before assignment because I spelled the
339:05 - variable wrong so let's just run this
339:07 - again and test this one more time so 20
339:11 - uh yes and no and there you go we're all
339:14 - good we generated our password all right
339:16 - so let's go ahead and Dive Right In now
339:18 - I'm going to start with the Pathfinder
339:20 - or the maze Navigator whatever you want
339:23 - to call this and we're going to use a
339:24 - package here called curses which allows
339:27 - us to control the terminal and CED in
339:29 - the way that you saw and actually
339:31 - override what's currently in the
339:32 - terminal so that we don't have to keep
339:34 - printing a bunch of separate lines and
339:36 - kind of having a really messy standard
339:37 - output now if you're on Mac or Linux
339:40 - curses should be installed by default
339:42 - for you but if you on Windows you're
339:44 - going to need to install this so go to
339:46 - your terminal I'm just in VSS code and
339:47 - I've opened up a terminal here and
339:49 - you're going to type the following
339:50 - command pip install and then Windows
339:52 - hyphen curses like this now again you
339:55 - only need this if you're on windows so
339:57 - hit enter try that command that should
339:59 - install it for you and if for some
340:01 - reason that doesn't work I'm going to
340:02 - give you two or three alternative
340:04 - commands you can try pip three install
340:06 - Windows curses if that doesn't work you
340:08 - can try python hyphen M pip install
340:11 - Windows curses and if that doesn't work
340:13 - you can try Python 3 now if none of
340:15 - those work I leave two videos on the
340:16 - screen that should show you how to fix
340:18 - this pip command one for mac and one for
340:20 - Windows although I guess you only really
340:21 - need it for Windows because uh you don't
340:23 - need to install anything if you're on
340:24 - Mac or Linux all right now what I've
340:26 - done is made a python file here called
340:28 - Pathfinder P I've opened it in vs code
340:31 - you can work in any editor that you want
340:33 - but I'm going to use vs code I've also
340:35 - pasted in a maze you can find this maze
340:37 - from the link in the description on the
340:38 - GitHub repository or you can just make
340:40 - your own maze I'm trading all of the
340:42 - pound sign here or number sign here as
340:45 - uh my obstacles in the Maze all of the
340:47 - empty strings are going to be things we
340:49 - can navigate and then the O is going to
340:51 - be our start and the x is going to be
340:53 - the end now I do want to mention here
340:56 - that if you are trying to get better at
340:57 - python you also can check out a product
340:59 - I have called programming expert.i this
341:02 - a programming course teaches fundamental
341:04 - programming object-oriented programming
341:06 - Advanced programming software
341:07 - engineering tools all kinds of stuff
341:09 - just wanted to mention that if you guys
341:10 - are interested you can use discount code
341:11 - Tim I'll leave that in the description
341:13 - for now though we do want to build out
341:15 - this project so we have our maze here
341:17 - and the first thing I'm going to do is
341:18 - I'm going to import that curses module
341:20 - and quickly walk you through how this
341:22 - works so you can see how we can print
341:24 - colored output I do also have an entire
341:25 - tutorial series on the curses module on
341:28 - my channel uh in case case you are
341:29 - interested I'm also going to say from
341:31 - curses like that import and I'm going to
341:34 - import something called wrapper and then
341:35 - while we're up here we're going to
341:37 - import a Q This is built into python you
341:39 - don't need to install it and we're going
341:40 - to import time just so we can Implement
341:42 - a bit of delay here in this program when
341:44 - we start actually trying to visualize
341:46 - things for now though I want to show you
341:47 - how the curses module works so what we
341:49 - need to do here is Define a main
341:51 - function and this main function needs to
341:53 - have as one argument stdr now this
341:56 - stands for standard output screen and
341:59 - this is what we're going to use to
342:00 - actually output all the stuff for our
342:02 - program so rather than using the
342:04 - standard print statements here we're
342:06 - going to add stuff to this screen this
342:08 - screen is going to override and kind of
342:10 - take over our terminal and then as soon
342:12 - as the program ends everything on that
342:14 - screen will be cleared and will be
342:15 - brought back to the original terminal
342:17 - you'll see what I mean in a second but
342:18 - for now we're going to type the
342:20 - following STD screen. CLE so we're going
342:22 - to clear the entire screen then we are
342:24 - going to not write we're going to add
342:27 - string and when we add add a string to
342:29 - the screen here we have to pass the
342:31 - position that we want to enter this
342:33 - string at or that we want to add it to
342:35 - so for now I'm going to go 0 0 that
342:37 - represents the top leftand corner of the
342:39 - screen so I believe we're going row and
342:42 - then column that we want to enter this
342:43 - in I'll experiment in a second then
342:45 - whatever the text is that we want to
342:47 - show on the screen so in this case I can
342:48 - do hello world exclamation point then
342:51 - we're going to do STD screen Dot and
342:53 - then this is going to be refresh and
342:55 - what that does is refresh the screen and
342:57 - so we actually see what we wrote and
342:58 - then lastly I'm going to say STD screen
343:01 - Dot and this is going to be get CH what
343:03 - this stands for is get character and
343:06 - this is similar to an input statement
343:07 - that we would have in Python it just
343:09 - makes it so that we're going to wait
343:10 - here until the user hits something
343:12 - before we exit the program if we don't
343:14 - have that it would do this and then just
343:16 - instantly exit and we wouldn't see
343:17 - anything because we weren't waiting long
343:19 - enough to actually view the output all
343:21 - right now that we have that main
343:22 - function we're going to call wrapper
343:24 - which we imported up here and we're
343:26 - going to pass to it the name of this
343:28 - main function we're going to make sure
343:29 - we don't call the function so I'm not
343:30 - calling like that I'm just passing the
343:32 - name of the function and what this does
343:34 - is it initializes the curses module for
343:36 - us and then it calls the function passes
343:39 - this STD screen object and then we can
343:42 - use that in here to control our output
343:44 - all right hopefully that's clear so far
343:46 - let me save and let's run the code uh
343:48 - and let's see what we get and notice
343:50 - that it kind of brings me to this blank
343:51 - window and it says hello world and then
343:53 - if I hit any any key on my keyboard
343:56 - brings me back to the original terminal
343:57 - one more time if I run this notice it
343:59 - shows me hello world hit a key and then
344:01 - I'm out uh that is the curses module
344:03 - very basic introduction however I want
344:06 - to show you what happens when we change
344:07 - these coordinates and how we can add
344:09 - colors so let's say now we maybe draw
344:11 - this at five so 5 Z is our position
344:14 - let's run the code and notice we go five
344:16 - rows down and we're at the zero with
344:19 - column so that's how you can control
344:20 - where you're drawing this you put the
344:22 - row and the column you want to start
344:23 - drawing so if I go maybe 55 and then
344:26 - let's save and rerun uh oop oops save
344:30 - and rerun uh notice we get Hello World
344:32 - kind of more in the center of the screen
344:34 - so very powerful what you can do here
344:36 - and then if we want to add a color this
344:38 - is a little bit more complicated uh we
344:40 - first need to initialize a color so I
344:42 - just got to look at my cheat sheet over
344:43 - here to remember how to do this so we're
344:45 - going to say curses. anitore pair and
344:49 - whenever we create a color pairing here
344:51 - in curses we give it an ID so I'm just
344:54 - going to give an ID of one and then I
344:55 - put the foreground and the background
344:57 - color that I'd like to have so I can say
345:00 - curses Dot and then color underscore and
345:03 - then whatever colors you can see there's
345:04 - a bunch of options here green magenta
345:06 - red whatever so let's go with blue for
345:08 - now and then the foreground color or
345:11 - sorry the background color my bad is
345:12 - going to be curses undor color and then
345:15 - black so you put your foreground color
345:18 - and your background color pretty much
345:19 - all the colors you can think of are you
345:21 - know you can access them with colorcore
345:22 - their name and then now that we have the
345:25 - initialization pair if I actually want
345:27 - to use this color what I have to do is
345:29 - the following I'm going to say bluecore
345:31 - andore black is equal to and this is
345:35 - going to be curses Dot and I believe
345:37 - this is color pair again let me just
345:39 - have a quick look at my cheat sheet here
345:40 - to remember this yes it's color pair and
345:42 - we're going to put the ID of the color
345:45 - pair we want to use so since I reference
345:47 - this with id1 or created with id1 now I
345:50 - reference id1 and that's going to give
345:51 - me a color of blue and black and the way
345:54 - I apply that now to my text is I just
345:56 - pass another argument to add string with
345:59 - this so blue and black and now when I
346:01 - start displaying this it should be blue
346:02 - and black so let's do this let's run the
346:04 - code and notice I get Hello World in
346:06 - blue text and the black is just the
346:08 - default background so it doesn't change
346:10 - the background color but if I wanted it
346:11 - to be like a white background I would
346:13 - say color white and then if I draw this
346:15 - now so let's rerun this uh notice I get
346:18 - kind of a white background for that text
346:20 - great but let's go back to color block
346:22 - okay so that's the first color pair
346:23 - while we're here let's initialize
346:25 - another color pair cuz I want blue and
346:27 - black I also want red and black
346:29 - so let's change this to red and let's
346:31 - make that to uh and then we'll use these
346:33 - later on I don't actually want to write
346:35 - hello world onto the screen so let's
346:37 - actually just comment all of that out
346:38 - for now uh and let's work on the bread
346:41 - first search algorithm and then we can
346:43 - actually start displaying stuff on the
346:44 - screen so the first thing I want to
346:46 - handle is printing this maze out so
346:48 - obviously I want to view the maze on the
346:50 - screen so to do that well how am I going
346:52 - to do that I'm going to write a function
346:53 - here I'm just going to call this print
346:55 - Maze and to be able to print the maze I
346:57 - need the maze that I'm going to print I
346:59 - need the standard screen or the standard
347:01 - output screen that I'm going to print
347:02 - the maze to and then I'm going to take a
347:04 - variable here or an argument called path
347:08 - now path is going to be the path I want
347:10 - to draw on the maze obviously we don't
347:12 - know what the shortest path is yet but I
347:14 - can pass a path here of coordinates and
347:16 - then whatever values are in that path
347:19 - I'll draw them a different color in the
347:21 - Maze so you'll see what I mean in a
347:22 - minute so that's print maze uh now
347:25 - inside of here I'm going to grab my two
347:27 - colors that I want to use
347:29 - so I'm just going to say blue is equal
347:30 - to and then this will be curses do
347:34 - colorcore pair this will be one let's
347:37 - say red is equal to curses. color pair 2
347:40 - just so I can use both the blue and the
347:41 - red we'll draw the default maze as blue
347:44 - and then the path as red okay continuing
347:47 - I'm going to Loop through everything in
347:49 - my maze because this a two-dimensional
347:50 - array so I have kind of all my rows and
347:52 - then the columns would be the individual
347:54 - values in each row so I'm going to say
347:56 - four and this is going to be I comma row
347:59 - in a numerate maze now if you're
348:01 - unfamiliar with a numerate this is going
348:03 - to give me the index as well as the
348:05 - value so I'm going to get every one of
348:07 - these rows as a row or every one of
348:10 - these nested arrays as a row and then I
348:12 - will be what row I'm currently on okay
348:15 - continuing I'm going to say 4 J comma
348:18 - value in enumerate and then I'm going to
348:20 - enumerate over the row the reason I can
348:22 - do this is because I have a list or an
348:25 - array whatever you want to call it but
348:26 - list in Python so row is my list then
348:29 - I'm going to numerate over the list that
348:31 - I have I'm going to grab whatever column
348:33 - I'm currently on which is what J is
348:35 - going to represent and then the value is
348:36 - going to be whatever symbol here is in
348:38 - the column okay so that's what I have
348:41 - then what I want to do is I want to
348:43 - simply draw this onto the screen so I'm
348:45 - going to do the following I'm going to
348:46 - say STD screen Dot and we're going to
348:49 - add string and now we need to determine
348:51 - where we want to add this string well
348:54 - where I want to add it onto the screen
348:56 - is going to be whatever position I'm
348:57 - currently on which is going to be
348:59 - represented by I and J so I is going to
349:01 - tell me the row I'm on J's going to tell
349:03 - me the column so what I can do is simply
349:05 - add whatever I'm drawing here at
349:07 - whatever row and column I'm currently at
349:10 - so I'm going to say i j as the position
349:12 - and then I'm going to say value and
349:14 - value is just going to be either an
349:15 - empty string a number sign an O an X
349:18 - whatever it is that I'm currently
349:19 - looking at hopefully that makes sense
349:22 - but that's what we want for print Maze
349:23 - and then I'll handle the path in one
349:24 - second for now though let's actually try
349:27 - printing the maze so I'm going to
349:28 - uncomment the clear I'm going to
349:30 - uncomment the refresh and the get CH and
349:33 - now rather than adding my own string I'm
349:35 - going to call Print maze I'm going to
349:38 - pass to it the maze variable which is
349:40 - just a public variable or a global
349:41 - variable that's fine I'm going to pass
349:44 - my STD screen and then this is a default
349:46 - argument of empty list so I don't need
349:48 - to pass that okay so let's run this now
349:51 - uh let me just make the terminal a bit
349:52 - bigger first let's run this and notice
349:55 - my maze is printing out now this looks a
349:57 - little bit squish together uh like it's
349:59 - too close to me so to spread this out a
350:01 - little bit what I'm going to do is
350:03 - simply multiply the row and the column
350:06 - that I want to draw this at by two uh
350:08 - and actually we can leave the row as
350:10 - just regular I we can just spread the
350:12 - columns out a little bit more so now we
350:14 - should get kind of two spaces between
350:15 - each of our elements and also let's add
350:17 - a color here so let's add blue and now
350:20 - it should be drawn in blue so let's run
350:21 - this and I guess I need run again okay
350:25 - and there we go that looks a lot better
350:26 - the maze is spaced out uh and we can
350:28 - kind of see it all nice great so let me
350:31 - exit that all right so now that we are
350:32 - printing the maze out and I guess that's
350:35 - pretty much all we're doing I need to
350:37 - talk a bit about how this algorithm
350:38 - works so let me head over to the
350:40 - Whiteboard I will explain that to you
350:42 - and then we'll start coding it out so in
350:43 - front of me I have a very simple maze
350:45 - I'm also going to refer to this as a
350:47 - graph uh and this is what I'll use to
350:48 - demonstrate the breath first search
350:50 - algorithm so the goal here is to find
350:52 - the shortest path from some starting
350:54 - node to some ending node and I'm going
350:56 - to reference these nodes by their
350:58 - position in the graph so we see these
351:00 - are different rows these are different
351:02 - columns and I'm going to have my
351:04 - positions in row column format which
351:06 - means I would refer to this here as one
351:08 - Zer so Row one column zero just keep
351:11 - that in mind as I write the positions
351:13 - because uh you might be confused if
351:14 - you're reading it the other way and like
351:16 - here this would be 03 all right so how
351:18 - does the breath first search algorithm
351:20 - work well the concept behind the breath
351:22 - first search algorithm is that we're
351:24 - going to continually expand outwards
351:26 - from a point in until we find the ending
351:30 - point that we're looking for or the
351:31 - ending node I'm just referring to every
351:33 - single one of these squares as a node
351:34 - okay in kind of graph Theory that's what
351:36 - you would call them so we're going to
351:38 - start here at this start point and we're
351:40 - essentially going to slowly expand
351:42 - outward by looking at all of the
351:44 - neighbors of this point so we're going
351:45 - to look at this neighbor and this
351:47 - neighbor and if there was a downwards
351:48 - neighbor or a left neighbor we'd look at
351:50 - those as well uh but there isn't any
351:52 - left or down neighbor so obviously we're
351:54 - starting here so we expand here and then
351:56 - from both of these points we're going to
351:57 - look at all of their neighbors so maybe
351:59 - we start with this one we would look at
352:00 - this neighbor then we would look at this
352:02 - one then we continue the process and we
352:04 - do this one iteration at a time which
352:07 - means that once I finish considering
352:09 - this neighbor here I go and I do this
352:11 - one then of course we're going to move
352:12 - up to here we're going to move up to
352:14 - here and since we're doing this one step
352:16 - at a time as soon as we hit the ending
352:18 - node we will actually be guaranteed to
352:21 - have found the shortest path because
352:23 - we're only expanding our path from the
352:25 - starting node by one new node at every
352:28 - single iteration now that's a super
352:30 - highlevel recap of how this works of
352:32 - course I'm going to walk you through the
352:33 - code and more complicated demo uh but
352:36 - that's kind of the concept here one step
352:38 - at a time we're slowly expanding
352:40 - outwards from this node and expanding
352:42 - our current path by one until eventually
352:45 - we reach this end node and as soon as we
352:47 - find the end node we know that we have
352:49 - found the shortest path because every
352:51 - other path that we have is either going
352:52 - to be the same length uh or longer to
352:55 - find this path okay so let's now look at
352:58 - demo of how we actually do this so first
353:00 - of all we're going to use a data
353:01 - structure called a q now Q I believe is
353:04 - spelled like that I'm also just going to
353:06 - refer to it with the letter q and this
353:08 - is what's known as a first in first out
353:11 - data structure or a last in last out
353:13 - data structure whatever you prefer to
353:14 - call it essentially what that means is
353:16 - that if I enter some item into the queue
353:19 - just kind of like a phone queue or any
353:21 - other lineup that you would be in if I
353:23 - enter this item first then this is going
353:25 - to be the first item to come out and the
353:27 - second second item that I enter into the
353:29 - queue that's going to be the second item
353:31 - to come out now that's important because
353:33 - we're going to process elements in the
353:34 - order in which they're entered into the
353:36 - que so just keep that in mind so for our
353:39 - que we can have a back and a front so we
353:41 - can say that this is the front of the
353:44 - que excuse my messy handwriting and then
353:47 - this is the back just so we're clear on
353:49 - uh kind of what element we're going to
353:51 - process next so what we're going to
353:53 - start by doing is we're going to place
353:54 - our starting node here inside of the
353:57 - cube now the way I do that is I just
353:58 - place the position of the node that I
354:00 - want to start looking from so I'm going
354:03 - to put a position of three and then zero
354:05 - because it's in row three and column
354:07 - zero now every single step in my
354:09 - algorithm what I'm going to do is I'm
354:11 - going to pop an element off of my Q I'm
354:14 - going to take the element that's
354:15 - currently at the front of the queue I'm
354:17 - going to remove it from the queue and
354:19 - I'm going to start processing it now the
354:21 - way I process an element is I
354:23 - essentially just look at all of its
354:24 - neighbors and try to find if we're
354:26 - currently on the end element or not so
354:29 - in this case I take three off the que
354:32 - and I say okay I want to process all of
354:34 - this element's neighbors and kind of
354:35 - expand outwards from this until
354:37 - eventually I get to this note so what
354:40 - I'm going to do is look at the neighbors
354:42 - I'm going to determine I have two of
354:43 - them and I'm going to check if these
354:45 - neighbors are the end node if they are
354:48 - then I'm done the algorithm I found the
354:49 - shortest path but if they're not what I
354:51 - need to do is add them onto the que so
354:54 - now they can be processed and we can
354:55 - continue expanding until eventually we
354:57 - find this and note so let's erase this
355:00 - from the Q here so 3 uh We've now
355:03 - processed that element I'm going to add
355:05 - this into some set here so let me just
355:07 - create a set uh this set will be known
355:09 - as our visited set and okay it's kind of
355:12 - hard to draw this the way that I want to
355:14 - so let's just do this 3 0 and the reason
355:17 - I'm putting it in a set is just so I
355:19 - know okay I've processed this element I
355:21 - don't have to look at it another time
355:23 - anyways processing the element again
355:25 - involves looking at all the neighbors so
355:27 - the two Neighbors here are two 0 and
355:30 - what do we have we have 31 so I'm going
355:32 - to add those positions into the que
355:34 - doesn't matter the order that I add them
355:36 - in so I'm going to add two and what was
355:39 - this zero and then my other one is three
355:42 - and one okay so these are now the two
355:45 - new elements that I need to process to
355:47 - continue expanding my path so what do I
355:49 - do well I'm going to pop now the first
355:51 - element off of the Q and I'm going to
355:53 - process this one and well repeat
355:54 - everything that I was doing so let's
355:57 - cross it off erased in a second this is
355:59 - the current one that we're looking at so
356:01 - now we need to consider all of this
356:02 - node's neighbors now it has a neighbor
356:04 - down and a neighbor up it also has one
356:06 - to the right but since the one to the
356:08 - right is an obstacle we don't look at
356:09 - that and for the one that's below us
356:12 - here we see that the one below us is an
356:14 - element that we've already looked at and
356:16 - the reason we know that is because it's
356:18 - in this visited set so I can skip the
356:20 - neighbor below us because we've already
356:22 - looked at it I don't need to process the
356:23 - same element twice and I can just go
356:25 - directly to the element above so I'm
356:27 - going to add a single neighbor here to
356:29 - my q and this neighbor is going to be uh
356:32 - in one and then zero so now I've
356:36 - processed this element it was not the
356:38 - final node that we were looking for so
356:39 - let me delete it here and now we're
356:41 - going to add this into this visited set
356:43 - now I didn't mean to butcher my element
356:46 - here so let's go here uh what was that
356:48 - position that was two and zero so let's
356:51 - add this in to zero like that and now
356:54 - we've visited those two notes now we're
356:56 - going to continue so we're going to take
356:57 - the next element off of the Q which is
356:59 - 31 so I'll just delete it here we will
357:02 - add it into this set so you might as
357:03 - well just add it right now okay three
357:06 - and one and then from 31 that's right
357:08 - here we need to look at all of its
357:10 - neighbors so it has one going to the
357:12 - right and it has one going to the left
357:14 - well of course the one to the left we've
357:16 - already processed so we can just add the
357:18 - one to the right which is right here and
357:20 - that has a position of 32 so what I do
357:22 - is I add 32 to my Q uh if we can that's
357:26 - a really bad three we get the point we
357:28 - add 32 and we continue and this process
357:31 - is going to repeat until eventually we
357:34 - hit this end node and again as soon as
357:36 - we hit this end node we know that we
357:38 - found the shortest path because that's
357:39 - the first time we found it and we would
357:42 - have found it on another path if there
357:44 - was a shorter path to get to it so I
357:46 - mean I could continue this example but
357:48 - hopefully you kind of get the idea we're
357:50 - expanding outwards one node at a time
357:52 - until eventually we find the ending node
357:55 - and then I will show you in the code how
357:57 - we actually kind of keep track of what
357:59 - path we were on because that is a little
358:00 - bit more complicated but this is the
358:02 - basic idea we have a Q we add elements
358:04 - onto the que we process them one at a
358:07 - time in the order in which they were
358:08 - inserted into the que this guarantees
358:11 - that every kind of new element that
358:12 - we're looking at is only expanding our
358:14 - current path by at most one node as soon
358:17 - as we find the end node then we can just
358:19 - say okay well we found the shortest path
358:21 - let's end the algorithm let's draw the
358:23 - path out hopefully that gave you a very
358:25 - brief explanation of how this works I
358:27 - don't want to go through the whole thing
358:28 - CU it will take uh too much time now
358:31 - though let's start coding this out and
358:32 - hopefully everything will be cleared up
358:34 - all right so let's code out a function
358:36 - here called findor path and we're going
358:40 - to take in here the Maze and then this
358:43 - is going to be the standard screen uh
358:46 - and I think that's all we need for find
358:48 - path now for find path I'm just going to
358:49 - declare a few variables here I'm going
358:51 - to say start is equal to X end is equal
358:54 - to O uh and actually is this no we're
358:58 - going to say start is equal to O end is
359:00 - equal to X and what else do we want here
359:03 - uh we want to figure out what the
359:04 - starting position is of our maze now we
359:07 - could just hardcode in the position
359:09 - right here but instead I'm going to
359:11 - write a function that will essentially
359:12 - look for this o and tell me where in my
359:15 - maze I'm starting from because we're
359:16 - going to start from this position we
359:17 - need to know the coordinates of this
359:19 - right so in this case it'd be 0 1 2 3 4
359:23 - 5 okay it's in uh row zero so it would
359:26 - be 0 five that would be the the position
359:28 - here of the start but we want a function
359:30 - that will tell us that so we don't have
359:31 - to manually do that so for now I'm going
359:33 - to say Define find underscore start and
359:37 - just because I didn't really explain
359:38 - this I just jumped right in uh what
359:40 - we're doing here is we're going to start
359:41 - coding out that breath first search
359:42 - algorithm that you just saw so that's
359:44 - what fine path is going to do but first
359:45 - we need to find the starting position so
359:48 - we're going to take in the Maze here and
359:49 - we're going to take in whatever the
359:51 - starting symbol is and what I'm going to
359:53 - do in here uh is simply say four and
359:56 - this is going to be I comma row in a
359:57 - numerate maze and then for J comma value
360:01 - in a numerate row I'm going to say if
360:03 - the value is equal to start then I can
360:06 - simply return I comma J so I'm going to
360:09 - return the row and the column where I
360:11 - found this starting symbol and we're
360:13 - going to assume that we just have one of
360:14 - those symbols okay now otherwise we'll
360:18 - just return none if for some reason we
360:19 - couldn't find the start okay so now in
360:22 - here we're going to say startor pause is
360:25 - equal to find start then we're going to
360:27 - call The Maze and the starts now we know
360:29 - the starting position now what we want
360:31 - to do is set up our q and set up those
360:33 - iterations and finding the neighbors and
360:35 - all that stuff I was discussing so for
360:37 - the Q we have this Q module and we're
360:40 - going to use it so the way we do that is
360:42 - we're going to say Q is equal to and
360:44 - then q.q and again this is a first in
360:47 - first out data structure so the first
360:49 - element I insert is the first element
360:51 - that comes out that's very important
360:53 - because the order in which we process
360:55 - the nodes really matters when we're
360:57 - doing the bre for search we don't want
360:59 - to process the most recent node we've
361:00 - added to the queue we want to process
361:02 - the node that's been in the queue the
361:04 - longest just like we would if you were
361:06 - accepting you know a bunch of phone
361:07 - calls or if there was a lineup or
361:08 - something like that that's exactly what
361:10 - a q is right so we have our q and we
361:13 - need to insert something into the queue
361:14 - so to insert something we use this put
361:16 - method here and we're going to put a
361:20 - actually um a tupple and the tupple is
361:22 - going to contain the starting uncore
361:26 - position and and it's going to contain a
361:28 - list that has the startor pause in it
361:32 - now the reason why we're adding two
361:34 - elements in here is because in the queue
361:37 - I want to keep track of the current
361:39 - position or the node that I want to
361:41 - process next as well as the path to get
361:44 - to that node now the reason I want the
361:47 - path to that node is because as soon as
361:48 - I find the ending node I'm going to take
361:51 - whatever path I currently have and I'm
361:53 - going to start drawing that onto the
361:54 - screen I'm going to show that on the
361:55 - screen so for now since we haven't found
361:58 - the end node our current path just
362:00 - includes the start position but every
362:02 - time I process a new neighbor or
362:04 - something along those lines I'm going to
362:06 - change the path and the path will
362:08 - continue to grow uh and I'll be able to
362:10 - see what path we're at for every single
362:13 - note hopefully that makes a bit of sense
362:15 - but that's why I'm storing two pieces of
362:16 - information the position I'm currently
362:18 - on as well as the path and in fact we
362:21 - could even optimize this further and
362:22 - just store the path and grab the last
362:24 - element from it uh but I'm just going to
362:26 - do two things here just so it's Crystal
362:28 - Clear when I code this out it's not the
362:29 - most efficient thing in the world but
362:30 - for this tutorial it's fine okay so for
362:32 - now we put that in the queue we also
362:34 - want to make a visited set which is
362:37 - going to contain all of the positions
362:38 - that we've currently visited now that we
362:40 - have all that set up I'm going to say
362:42 - while we still have any elements in the
362:44 - Q so while not and then Q Dot and I
362:48 - think this is either is empty or just
362:50 - empty I believe it's just empty so while
362:52 - the Q is not empty what we're going to
362:54 - do is we're going to get the most recent
362:56 - element from the Q the one that's kind
362:58 - of next in Q so I'm going to say current
363:01 - underscore position and path is equal to
363:06 - q.g now get's just going to give me the
363:08 - element at the front of the Q and since
363:10 - I have two things for every element I
363:12 - have my path as well as the position uh
363:14 - I'll grab the current position which
363:16 - will just give me the first element and
363:17 - the path which will give me the second
363:18 - element okay now that I have the current
363:20 - position I'm going to say the row and
363:22 - column is equal to current position so
363:24 - I'm going to break down the position
363:26 - into its two components the row and the
363:27 - column and I'm going to find all of the
363:30 - neighbors of this position and start
363:33 - processing them if they are not the end
363:35 - node so first I'm going to say if Maze
363:39 - and then this is going to be at row
363:41 - call is equal to and this is going to be
363:44 - the end so we're going to say end like
363:46 - that so we're going to look in the Maze
363:48 - and see if this position is equal to an
363:49 - X if it is that means we found the end
363:52 - and so what we can do here uh is simply
363:55 - return the current path because again as
363:58 - soon as we find the end node we know
364:00 - that we've found the shortest path or
364:02 - one of the shortest paths because there
364:03 - could be two paths that are both the
364:04 - shortest we'll find one of them so we
364:06 - can just return the path and then we can
364:08 - draw that if we want okay continuing now
364:11 - what we need to do if we haven't found
364:13 - the end node is we need to continue
364:15 - branching out so we need to find all the
364:16 - neighbors of the current node and then
364:18 - expand towards them so we're going to
364:20 - write another function here called
364:21 - findor Neighbors now the tricky thing
364:24 - with the neighbors is that we need to
364:26 - make sure that the neighbor that we're
364:28 - finding is not an obstacle and that it's
364:30 - a valid position in the Maze so you'll
364:32 - see what I mean here but we're going to
364:33 - take an a maze a row and a call and
364:36 - we're going to say our
364:38 - neighbors is equal to an empty list and
364:41 - we're going to determine
364:42 - programmatically what all the neighbors
364:43 - are of this current position so we're
364:45 - going to look up left right and down if
364:47 - you wanted to you could do diagonal but
364:49 - I'm not doing diagonal in this tutorial
364:51 - but adding that is is fairly easy so for
364:53 - now I'm going to say if the row is less
364:56 - than then uh not zero sorry if the row
364:58 - is greater than zero then I'm going to
365:00 - add a neighbor and this neighbor will be
365:03 - the neighbor above I'm going to say
365:05 - neighbors. append and I'm going to
365:07 - append the row minus one and then the
365:10 - current column so we can add a comment
365:12 - here and say this is going to go up now
365:14 - the reason I have to check if the row is
365:16 - greater than zero is because if the row
365:18 - currently is zero I have no more rows to
365:20 - look up I'm at the bounds of my Maze and
365:23 - so I can't add that but if the row is
365:25 - greater than zero so it's one at minimum
365:26 - then I can subtract one from it and
365:28 - that's still a valid position next I'm
365:31 - going to say if the row and this will
365:33 - be+ one is less than the Len of the maze
365:38 - then I can add the row below so I'm
365:39 - going to say neighbors. append row plus
365:41 - one and then call again because if the
365:44 - row + one is equal to the length of the
365:47 - maze then that means if I were to add
365:49 - row plus one I would get an index out of
365:51 - bounds eror I'd be too far that means
365:53 - I'm already at the bottom of my maze but
365:55 - if this is true then that means I can
365:57 - add one more without going out of bounce
365:59 - so that's for the rows now we want to do
366:01 - the same thing with the columns for so
366:02 - for left and right so I'm going to say
366:04 - if the column is greater than zero then
366:06 - this is going to be left what I can do
366:08 - is say neighbors. append and I can
366:11 - append the current row and the column
366:13 - minus one okay and I'm going to say if
366:16 - the column is column + one is less than
366:20 - the Len of maze 0 now the reason I need
366:23 - to check maze Z is because my maze may
366:25 - not necessarily be squ Square in this
366:27 - case I don't actually think it is square
366:29 - we may have more columns than we have
366:31 - rows so I need to check how many columns
366:33 - we have and I can just do that by
366:35 - grabbing the first row and seeing how
366:37 - many elements are in there so that's
366:39 - what I'm doing here if we don't have a
366:40 - first row this will cause an error but
366:42 - we're always going to have first row so
366:43 - that's fine and then I'm going to say
366:44 - neighbors. append row and call plus one
366:48 - and then here I'm going to return
366:49 - neighbors and let's just put a comment
366:51 - here for
366:52 - right now in here we did not check if
366:55 - these positions are obstacles we'll do
366:58 - that inside of here for now we've just
367:00 - got all of the valid positions that are
367:02 - neighbors now we're going to check if
367:03 - they're obstacles or not as we Loop
367:05 - through them so I'm going to say
367:07 - neighbors is equal to and then this is
367:09 - going to be find neighbors uh not find
367:11 - path find neighbors and we are going to
367:14 - pass to it the maze as well as the row
367:16 - and the column of the current position
367:18 - that we're processing right finding all
367:19 - of their neighbors we're then going to
367:21 - say for
367:22 - neighbor in neighbors and we are going
367:26 - to check if this is an obstacle or not
367:28 - and if we've already visited it before
367:30 - because if we've already visited it we
367:31 - don't need to process it so I'm going to
367:33 - say if the neighbor is invis then
367:36 - continue because we don't want to
367:38 - process it and I'm going to say if the
367:40 - neighbor and actually sorry I need to
367:43 - break this down I'm going to say row
367:45 - call is equal to neighbor and actually
367:48 - we'll just go RC so that we don't Shadow
367:50 - the variable name up here but I'm going
367:52 - to say RC is equal neighbor standing for
367:54 - row and column I'm going to say if the
367:57 - maze at and this will be RC is equal to
368:01 - a pound sign okay then what we want to
368:05 - do is continue okay now if this is not
368:09 - the case so if the neighbor is not inv
368:10 - visited and the neighbor is not a pound
368:12 - sign then that means we need to process
368:14 - this neighbor so I need to add it to my
368:15 - Q so I'm going to say q.p put and I'm
368:18 - going to put inside of here my uh
368:20 - position so I'm going to put the
368:22 - neighbor okay which is going to be a
368:23 - topple containing the row and column and
368:25 - I also need to put the new new path that
368:27 - now contains this neighbor so I'm going
368:29 - to say my new path is equal to and this
368:32 - is going to be whatever the current path
368:33 - is up here okay so where do I have path
368:36 - path is right here and then this is
368:38 - going to be plus and inside of another
368:41 - list because I can add two list together
368:43 - I'm going to put the uh what is it the
368:46 - neighbor so all this is doing is kind of
368:48 - tacking the neighbor onto the current
368:50 - path this is not the most efficient
368:52 - possible way to do this uh you guys can
368:54 - try to optimize this if you want but for
368:55 - now this is fine and for the Simplicity
368:57 - of the video I'm going to do it in this
368:59 - way and then I'm going to put New Path
369:01 - so I'm adding the neighbor as well as
369:02 - the New Path and the New Path is just
369:04 - whatever the current path is plus the
369:06 - current neighbor that I'm considering
369:07 - right uh that's what I have uh when I'm
369:09 - adding to the que okay hopefully that
369:11 - makes sense uh lastly what we need to do
369:14 - is say visited. add and we add the
369:16 - neighbor to that to make sure we don't
369:17 - process it multiple times and that's
369:19 - actually all we need for the breath
369:20 - first search algorithm again I know this
369:22 - looks pretty complicated but that's all
369:24 - we need uh now what we want want to do
369:27 - is make it so that we draw all of this
369:28 - stuff out so we can kind of see this
369:30 - happening and then I'll walk through the
369:31 - algorithm one more time just to make
369:33 - sure it's Crystal Clear so where we had
369:36 - this here right where we were printing
369:37 - the maze I'm going to copy that and I'm
369:40 - going to put that inside of this wallo
369:43 - because at every step I want to draw out
369:46 - what I'm currently considering so I'm
369:48 - going to go up here and I'm going to
369:49 - paste this before we're checking if
369:51 - we're at the final uh element or the the
369:54 - final node and I'm going to print the
369:56 - maze except this time I'm going to pass
369:59 - my path and when I pass the path now
370:01 - this will allow me to draw out the path
370:03 - right so I'm going to clear the screen
370:04 - I'm going to print the Maze and I'm also
370:06 - going to add something to print maze so
370:07 - we draw the path and then I'm going to
370:09 - refresh the screen and I'm going to do
370:10 - this every while loop iteration so that
370:12 - I can see the progress going on as I go
370:14 - through this algorithm so now let's go
370:16 - to print Maze and let's make it so that
370:18 - we print the path in a different color
370:21 - so here I'm going to say if and this is
370:23 - going to be I comma J is in the the path
370:28 - so if it's in the path that we have
370:29 - right here that's valid to check that
370:31 - then what I want to do is draw this in a
370:32 - different color otherwise I'll do this
370:35 - so I'm just going to copy this line I'm
370:37 - going to paste this in here I'm going to
370:40 - change from value to be X because X is
370:43 - going to represent the current path and
370:45 - I'm going to change the color to be red
370:47 - so now rather than drawing an empty
370:49 - string I'm going to draw in X and I'm
370:51 - going to draw it in red and I'll draw it
370:53 - at the same position I would have before
370:55 - but again we're just changing what we're
370:56 - drawing
370:57 - okay so that's pretty much all we need
370:59 - last thing we need to do here is just
371:01 - call this function so this function is
371:03 - find path and it takes in the Maze and
371:07 - the STD screen at least I believe that's
371:10 - correct and I think with that this
371:12 - should all work now there's a chance I
371:13 - made a mistake and we'll have to fix
371:14 - that but for now let's run the code and
371:16 - give this a test so let's make the
371:18 - terminal nice and large let's run this
371:21 - and notice it just instantly found the
371:23 - path and we get that now of course we
371:25 - want to be able to visualize this so we
371:26 - can make it a bit slower and the way we
371:28 - can do that is by using this time module
371:30 - so if I go here uh where my refresh is
371:34 - pretty much anywhere in here what I can
371:35 - do is time. sleep and I can sleep for
371:38 - like 0.2 seconds 0.5 seconds whatever
371:41 - you want just so that you have some time
371:43 - to kind of process what's going on so
371:45 - let's sleep for 0.2 let's make this
371:47 - larger and let's run this and notice
371:49 - that now you can watch the breath for
371:51 - search algorithm in action and see every
371:53 - path that is currently considering and
371:55 - there you go we just found the finished
371:57 - path and the algorithm is done all right
372:00 - so there you go that project is now
372:01 - finished uh was a bit longer than I was
372:04 - expecting but obviously I want to
372:05 - explain this as best as I could let's
372:07 - walk through it step by step to make
372:08 - sure everything's clear uh and then
372:10 - we'll move on to the next one so we
372:12 - start here with main we've already
372:13 - talked about curses we know how this
372:14 - works and we call fine path now we call
372:17 - fine path we pass the maze in the
372:18 - standard screen and inside of fine path
372:21 - the first thing that we need to do is
372:22 - determine where the start position is in
372:24 - our mace because we're using coordinates
372:26 - right and we're trying to use that so we
372:28 - need to know the starting position so in
372:29 - start of fine start we just Loop through
372:31 - the maze we go through all the rows we
372:33 - go through all of the values in each row
372:35 - and if we find a value that's equal to
372:37 - the start symbol which I'm denoting as O
372:39 - then we're just going to return whatever
372:40 - position that's in and that way I can
372:42 - now very easily change the start
372:44 - position put it anywhere in the Maze and
372:46 - this will adapt and in fact let's just
372:47 - do that by putting an O up here okay
372:50 - let's save and let's make sure there is
372:51 - a path uh yes that's fine okay uh
372:55 - continuing we then have our Q so we
372:57 - Define our first in first out data
372:59 - structure and we add our starting
373:00 - position and the starting pause now I'll
373:03 - give you guys kind of a challenge here
373:04 - if you want try to do it by just having
373:06 - the path and not having the starting
373:08 - position there is a way to do that again
373:10 - I just haven't done that in this video
373:12 - then I have my visited set keeping track
373:14 - of all the elements I visited I'm saying
373:16 - while the queue is not empty what I'm
373:17 - going to do is get the current position
373:19 - and the path from whatever's at the
373:21 - front of the que I'm then going to get
373:23 - the row and the column of the current
373:24 - position and I'm going to draw out the
373:26 - main is with whatever current path I'm
373:27 - on whatever one I've got to at this
373:29 - point I'm going to check if I'm at the
373:31 - end if I am at the end then I can return
373:34 - the path because I found that end node
373:36 - if I've not then I need to continue
373:37 - looking for the end node right so I'm
373:39 - going to say neighbors equal to find
373:40 - neighbors maze row and call I'm going to
373:42 - Loop through all of the different valid
373:44 - neighbor positions I'm going to check if
373:46 - they're visited and I'm going to check
373:47 - if they're an obstacle if they are I'll
373:50 - skip them if they're not I need to add
373:53 - them to the path and add them into the
373:55 - que because we need to check now if
373:57 - they're the end node and if we need to
373:59 - expand from them right that's how this
374:00 - algorithm works then I add them to the
374:02 - visited set and this continues until we
374:04 - either find the path or we visit every
374:07 - single node that we have so every single
374:10 - one of them has been added into visited
374:11 - that's not an obstacle and we can't find
374:14 - a path so this will end if either
374:16 - there's no path or you find the PATH
374:17 - that's how that works all right find
374:19 - neighbors pretty straight forward
374:20 - forward gives us the valid neighbors and
374:23 - then print maze I won't explain that we
374:25 - walked through that already okay so that
374:27 - is that project let's just run this one
374:28 - more time for a sanity check that it's
374:29 - going to work when we change the
374:31 - starting node and let's see what the
374:33 - shortest path is here okay uh and there
374:36 - we go we have found the shortest path of
374:38 - course make this maze as large as you
374:40 - would like and you can see you know how
374:42 - that works all right so with that said
374:43 - that is Project number one hopefully you
374:46 - guys enjoyed that definitely actually
374:47 - the most complicated one that we have
374:49 - now that I think of it now though let's
374:51 - move on to project number two all right
374:53 - so now we're moving on to project number
374:55 - two which as I said is going to be the
374:57 - NBA project where we're grabbing
374:59 - basketball data there's a ton of data
375:01 - you can get if you're into basketball
375:02 - this is going to be really cool for you
375:04 - and even if you're not you'll learn how
375:05 - to work with an API how to process some
375:07 - data external data in an application
375:10 - kind of display that in some format send
375:12 - a request Etc so what I'm on right now
375:14 - is a link it's data. nba.net
375:17 - prv1 today. Json this is a free API and
375:21 - what this gives you is links to all of
375:23 - the pieces of data that you have access
375:25 - to for free so it's kind of weird but
375:28 - this link gives you the links that
375:29 - you're going to look at to get specific
375:31 - data so for example if I search for
375:35 - let's zoom in oh that's a lot easier to
375:36 - see so for example we have this calendar
375:39 - okay so this says calendar and it's prod
375:42 - v1c calendar. Json what that means is I
375:45 - copy What's called the endpoint and I
375:47 - just tack that on oops that's not what I
375:49 - meant to click uh to the end of this
375:51 - here so I paste that so now I'm going to
375:53 - calendar. Json and if I hit that it
375:56 - gives me a calendar uh that contains I
375:58 - guess some calendar data I don't know
376:00 - exactly what this is doing or what this
376:01 - is showing uh but the point is that it
376:03 - gives you a bunch of links for all
376:05 - different types of stats that you can
376:06 - get so you can get like Allstar R roster
376:08 - League config standings League div
376:11 - standings whatever you want you can have
376:13 - a look at and you can grab that data but
376:14 - you first go to this link and then it
376:16 - gives you the link to that data that's
376:18 - how that works okay hopefully that makes
376:20 - a bit of sense I'm going to leave that
376:22 - open now though we want to essentially
376:24 - grab the data that that links providing
376:26 - from Cod and the way we're going to do
376:28 - that is we're going to send a request to
376:30 - that link it's going to return to us
376:32 - something called Json which stands for
376:34 - JavaScript object notation I have an
376:36 - entire video on Json on this channel but
376:38 - pretty much this is a python dictionary
376:40 - that's the way you can think of it and
376:41 - we can access the different key value
376:43 - pairs grab the links for data sources
376:46 - that we want and then send a request to
376:48 - those links and get data from that so
376:51 - it's kind of a two-step process we send
376:53 - a request to that URL it gives us some
376:55 - data on the different links we then send
376:57 - a request to one of those links and get
376:58 - the data that we actually want and a
377:00 - request is essentially our computer
377:03 - requesting information from a remote
377:04 - server we're going to send something
377:06 - called a get request which as it says
377:08 - request information there's other type
377:10 - of requests like post request put
377:12 - requests patch delete requests uh that
377:14 - do other types of stuff but that's kind
377:16 - of beyond the scope of this tutorial
377:18 - however before we can do all of that we
377:19 - need to go and install the request
377:21 - module now the way you do that is
377:23 - similar to how we installed curses
377:25 - before go to your terminal and type pip
377:27 - install and then request like that again
377:30 - if that doesn't work try pip 3 if that
377:31 - doesn't work try python hyphen M pip
377:33 - install otherwise you can watch those
377:35 - two videos that will be linked in the
377:37 - description and it should show you how
377:38 - to fix that but you need the request
377:39 - module installed if you're on Windows
377:41 - and Mac you do need to install this
377:43 - unlike curses it uh will not be
377:45 - installed by default and again just
377:46 - reminder try pip 3 in case that doesn't
377:49 - work uh and then you can try python
377:52 - hyphen M pip or Python 3 hyphen M
377:55 - anyways I have this installed so that's
377:56 - all working for me and let's now go in
377:59 - here and start writing some code so I'm
378:01 - going to say from requests import and
378:04 - we're going to import get and I'm going
378:06 - to say from and this is going to be
378:08 - print import and we're going to import
378:10 - the pretty printer like that I'll show
378:13 - you the pretty printer kind of a cool
378:14 - thing in Python it's built in and it
378:16 - gives us a nice formatted output for
378:18 - Json data then what we're going to do is
378:21 - have our basore URL which is going to be
378:24 - equal to htps col slash slash and this
378:27 - is going to be data.
378:29 - NBA do and then net okay this is the
378:32 - base URL and then the endpoint is going
378:34 - to be the specific data that we want so
378:36 - I'm going to say all Json is equal to
378:38 - and this is going to be SLR slv1 slay.
378:44 - Json and today. Json is the original one
378:47 - we were looking at that gives us all
378:48 - those links now though we want to send a
378:50 - request to this link so the way we do
378:52 - that is we say our response because
378:54 - every time you send a request you get a
378:56 - response is equal to and we're going to
378:58 - say get and we're going to say base URL
379:01 - we're going to append this or we're
379:02 - going to concatenate this to all Json so
379:05 - we'll have you know the full URL built
379:07 - out and then we're going to have a look
379:09 - at what's known as the Json of this so
379:12 - whenever you send a request here you
379:14 - have access
379:15 - tojson again think of this as a python
379:17 - dictionary and now we can print all of
379:19 - that out however you're going to see if
379:21 - I print this with a print statement so
379:23 - let's try this here if I print the
379:24 - response then we get get kind of this
379:26 - garbage in the terminal that's just
379:28 - impossible to read so instead of
379:30 - printing it using a regular print
379:32 - statement we're going to use a pretty
379:33 - printer really cool thing if you haven't
379:35 - seen this so to do this we're going to
379:37 - say printer is equal to pretty printer
379:39 - make sure you add your parentheses and
379:41 - then we can use the printer by saying
379:43 - printer Dot and then PR print so pretty
379:46 - print and we're going to print the
379:47 - response and really we should call this
379:50 - data because we're grabbing the data the
379:52 - Json associated with so let's say data
379:55 - okay so let's run this and now notice
379:58 - that I get much nicer formatting here
380:01 - everything's kind of separated on
380:02 - different lines that's what we had
380:03 - before this is what we have now when we
380:05 - use the pretty print so inside of here
380:08 - uh we can see that we have a bunch of
380:09 - links now these links give us access to
380:12 - all of these different things right so
380:14 - game book lead tracker um mini box score
380:18 - whatever data it is that you want you
380:19 - can pretty much get all of it so what we
380:21 - want is the current scoreboard because
380:23 - we want to get information about games
380:25 - that are currently going on or that are
380:26 - going to happen today so what I'm going
380:28 - to do is try to grab this current
380:30 - scoreboard key and get the uh link
380:33 - that's associated with it so the way I
380:35 - do this first of all is I need to access
380:38 - the links key right so that I can start
380:40 - looking at this dictionary then I need
380:42 - to access the let's have a look the
380:44 - current scoreboard so we'll do it step
380:46 - by step uh let me just close this
380:49 - terminal and let's do this so we have
380:51 - our data now we want to say links is
380:53 - equal to data at and then links
380:56 - and let's print this out so printer.
380:59 - pprint and then links okay so let's have
381:03 - a look at that and now when I print out
381:05 - the links we just get all of the links
381:07 - in here and now the link that I want is
381:09 - the current scoreboard so I'm going to
381:11 - grab the current scoreboard links so I'm
381:12 - going to copy that there and now I'm
381:14 - going to say that my scoreboard is equal
381:18 - to and this is going to be links and
381:20 - then we're going to paste in here the
381:22 - current scoreboard so now let's have a
381:24 - look at the scoreboard okay let's run
381:26 - this and notice here that this is the
381:29 - URL so prod V1 2022 whatever scoreboard.
381:32 - Json now that I have that as it was
381:35 - saying I need to send a request to this
381:37 - endpoint the endpoint is the slash after
381:39 - the base of the URL so that I can get
381:41 - that information so now that we have
381:43 - that we have the scoreboard URL let's
381:45 - make a function here and let's say getor
381:49 - scoreboard okay let's
381:52 - put uh let's put this inside of here
381:56 - and we're just going to separate things
381:57 - to make it a bit cleaner I'm going to
381:58 - say Define getor
382:00 - links okay and inside of here we're just
382:03 - going to return
382:07 - links and now what I'm going to do is
382:09 - rather than links I'm going to say get
382:10 - underscore links like that and then I'm
382:13 - going to access the current scoreboard
382:14 - so I've just made it so I can reuse this
382:16 - function here so that GES G gets me all
382:18 - of the links sorry so now I get the
382:20 - links access the specific link that I
382:22 - want and now I'm going to send a request
382:24 - to that link so I'm going to say get and
382:26 - we're going to say base URL and this
382:28 - time we're going to say plus scoreboard
382:30 - okay and we'll say that this is response
382:33 - and actually I guess we could just do
382:35 - data is equal to and then we can get the
382:37 - Json and then again we can use the
382:39 - printer so printer.
382:42 - pprint and we can print out our data
382:45 - okay so now all we need to do is call
382:47 - the get scoreboard function so let's
382:48 - call that and what's going to happen now
382:51 - is it's first going to send a request to
382:54 - what was it to the all Json URL it's
382:57 - going to give us the links we're then
382:58 - going to access current scoreboard then
382:59 - we're going to send a request to that
383:01 - get the data and printed out so let's
383:02 - clear this and let's run and notice that
383:06 - I get all kinds of data here right and
383:08 - this is kind of hard to read um like
383:10 - there's a lot of stuff so it's difficult
383:12 - to look at what the keys are so what I
383:14 - like to do here to actually see how I
383:16 - can kind of Traverse this data is I
383:18 - would like to print out the keys because
383:20 - remember this is a python dictionary so
383:22 - since it's a dictionary what I can do is
383:24 - just grab all the keys of the the
383:25 - dictionary and then I can see what data
383:27 - I want to grab next so if I run this now
383:30 - and we scroll to the bottom notice that
383:31 - my keys are internal num games and games
383:34 - so I probably want to access the games
383:36 - so let's clear that and just access the
383:38 - games for now so now I can go
383:41 - Json and games and now let's have a look
383:45 - at what this data looks like so let's
383:47 - run this and notice again I got a bunch
383:49 - of stuff so now I probably want to have
383:51 - a look at uh the keys of this so let's
383:54 - say data
383:56 - dokeys okay let's run this and what does
383:59 - it say here a list object has no
384:01 - attribute Keys okay so what that means
384:04 - sorry guys is that the games is a list
384:06 - of all of the different games so what I
384:08 - can do instead now is I can say for game
384:11 - in games because this is a list we just
384:13 - found that out and now I can simply
384:15 - print the game. keys and just break and
384:18 - what that means is I'm just going to do
384:19 - this one time so I'm just grabbing you
384:21 - know the first game and printing out all
384:23 - of the keys associated with a game so I
384:24 - can view that that so now let's run this
384:28 - okay and name games is not defined oh my
384:31 - apologies let's call this games not data
384:35 - okay let's clear the screen let's run
384:39 - and now I get all of these Keys okay all
384:42 - of this information I have access to for
384:44 - every individual game and the games are
384:46 - games that are going to be happening
384:47 - today uh that that's what the games are
384:49 - so now I got to pick what information I
384:51 - want to display because I probably want
384:52 - to print out you know who's playing with
384:54 - the score the game is uh you know what
384:56 - time is it is in the game that's the
384:59 - stuff I had before at least so I'll
385:00 - probably do the same here so we can kind
385:02 - of pick what we want but we have V team
385:04 - and we have H Team those stand out to me
385:06 - as the visitor team and the home team we
385:08 - also have period and we should have
385:10 - clock so I think those are the four ones
385:12 - I want for right now so let's grab those
385:15 - so we're going to say homeor team is
385:18 - equal to and this is going to be game at
385:20 - and then this is going to be H Team
385:22 - right because that's the key we want to
385:24 - access and then I'm going to say I guess
385:27 - away
385:28 - team uh is equal to and not a team but V
385:32 - team and we can print out I guess the
385:35 - clock and the period as well we'll say
385:37 - clock is equal to game clock and we'll
385:39 - say period is equal to game period and
385:42 - now we don't need to use the pretty
385:43 - printer because we're just going to
385:45 - print these uh on one line and we will
385:48 - print an F string and we can say home
385:53 - team versus
385:56 - and then a away team and then we might
385:57 - as well just print the clock and the
385:59 - period as well just to have a look at
386:01 - what those are and then we'll continue
386:02 - from there okay clock and period so if
386:05 - you're unfamiliar with this in F string
386:07 - allows you to embed Expressions directly
386:09 - inside of a string when they're in curly
386:10 - braces so I mean this is pretty
386:12 - intuitive but in F string only works in
386:14 - 3.6 plus so python 3.6 plus so I'm just
386:17 - putting the home team versus away team
386:19 - comma clock comma period just so I can
386:21 - see what those look like and I'm going
386:22 - to do that for every single game so just
386:25 - just to separate these a bit then let's
386:27 - add a bit bit of a separator just so
386:30 - that we can see uh the difference in
386:31 - games that's clear let's run the code
386:34 - and notice that I get all of this data
386:37 - okay so for each team I have a team ID a
386:39 - TR code wins losses Series wins series
386:42 - losses I get a bunch of data right and
386:44 - then the score of those teams because I
386:46 - guess some of these games are actually
386:47 - happening right now so what I can do is
386:49 - print out the TR code if I want to see
386:53 - you know the actual name of the team and
386:54 - then I could print out their score as
386:56 - well so let's try doing that now so for
386:59 - our home team that's fine uh now we're
387:02 - going to say home team and inside of
387:04 - here we'll say TR code and for the away
387:07 - team same thing we'll say TR code uh
387:10 - just to clean it up a little bit so
387:12 - let's run this now and see what we're
387:14 - getting in terms of the difference uh so
387:16 - now we notice we actually get the uh
387:18 - abbreviations for the team then we're
387:20 - looking at what was the next thing we're
387:22 - printing the clock okay so 44.1 is
387:24 - what's on the clock for this one uh and
387:26 - then we have the period And it says what
387:28 - the current period is for the games that
387:30 - are currently going on okay nice so
387:33 - let's get rid of clock and period so
387:36 - those are the teams next thing that I
387:38 - want to print is the score of each team
387:39 - right so I'm going to print F and then
387:43 - this is going to be the home team and
387:45 - not the tri code but the score this is
387:47 - the score in the current game and then
387:49 - we'll print the away team and the score
387:51 - as well and so now we get the teams that
387:53 - are playing as well as their scores the
387:55 - game and then we can print the clock and
387:57 - and period after that okay so let's
388:00 - clear let's
388:01 - run and notice here that we get uh I
388:05 - guess what is that Chicago I I don't
388:07 - know what these teams are but something
388:08 - 171 19 3122 14 19 Etc Great and then
388:13 - here we're just getting a hyphen because
388:15 - these teams are not yet playing and z00
388:16 - I guess those guys just started okay
388:19 - continuing now we want to print the
388:21 - clock uh as well as the period so let's
388:25 - say print and we'll print F and I guess
388:28 - we'll
388:29 - go we should probably do should we do
388:31 - clock or period first let's go clock
388:33 - period and then we'll see what keys we
388:35 - have on those so let's run
388:37 - this okay and we get current so that's
388:41 - what we want to access for the period
388:42 - and then it looks like the clock just
388:44 - gives us a value uh so that's fine we
388:46 - can just grab the clock itself okay so
388:48 - let's go clock and then period and we
388:50 - want to get current like that okay let's
388:54 - run this again
388:56 - and now notice that we get 32.0 and then
388:59 - that's period 1 and then 142 period 1
389:01 - 409 period 1 you guys can format this
389:04 - better I'm just giving you the basics
389:05 - obviously okay so that's what we wanted
389:08 - for getting the scoreboard now we also
389:10 - can get a bunch of other data and like I
389:12 - showed you we can get uh stats for the
389:14 - teams so their points per game I guess
389:17 - their points allowed per game there's
389:18 - all these different stats I'm not a huge
389:20 - basketball guy I just thought this would
389:21 - be cool but let's write one now that
389:23 - gives us the teams and we can view their
389:25 - stats and like I had before we will rank
389:28 - them based on points per game so to do
389:31 - this one we're going to want to look at
389:33 - get links again so let's not call get
389:35 - scoreboard let's call get links okay
389:38 - let's clear this and let's run the code
389:41 - and let's see what links we have for
389:43 - stats ah I didn't print sorry need to
389:45 - print this let's print get
389:47 - links and actually we should probably
389:49 - use the printer to do this so printer.
389:51 - pprint okay so let's have a look here
389:54 - and these are all the ones that we have
389:55 - now let me remember which one I was
389:57 - using I think it was League team stats
390:01 - yeah League team stats leaders okay this
390:04 - is the one that I want to get stats of
390:05 - course there's a lot of other ones so
390:07 - I'm going to copy that key and now we're
390:09 - going to write another function I'm
390:10 - going to call getor stats uh okay that's
390:14 - fine for now and I'm going to say stats
390:17 - is equal to and then this is going to be
390:19 - getor
390:21 - links and we're going to reference this
390:24 - right here the league team stats leaders
390:27 - okay then we will send a request so
390:29 - let's just copy this and rather than
390:31 - games I guess this is going to be teams
390:33 - and we'll have the base URL plus the
390:36 - stats and then Json and then we want to
390:39 - print out all those keys so we see what
390:41 - we have access to so let me take this in
390:43 - here and rather than get links we'll
390:45 - print
390:46 - out should really call this data so
390:48 - let's call this data okay now let's call
390:51 - get stats so get stats like that
390:55 - okay let's run
390:57 - this and let's see what we get and
391:00 - notice we get a lot of information okay
391:03 - uh I want to print out just the keys
391:05 - that's my bad I meant to do that so
391:06 - let's do do keys and let's see what we
391:09 - actually get for
391:10 - that okay scroll down and we get League
391:13 - okay so that's the only key so let's
391:15 - access league so let's just put League
391:18 - here uh there's internal as well but we
391:20 - don't care about that that's some other
391:22 - data let's see what keys are associated
391:24 - with league so let's run that uh we have
391:26 - standard Africa Sacramento Vegas Utah
391:29 - I'm assuming we want just the standard
391:30 - League okay so let's grab standard okay
391:34 - let's run that and for the keys we have
391:37 - season year preseason regular season
391:39 - playoffs uh I'm assuming we probably
391:41 - want regular season but again you can
391:43 - change this if you want so let's now
391:45 - grab regular season let's print that and
391:49 - we only have the key teams okay so now
391:51 - let's grab
391:53 - teams and then this will be called teams
391:55 - let's see if there's any keys for teams
391:57 - so let's run this now and it says oh
392:00 - data is not defined so let's change this
392:02 - to teams
392:04 - okay and rerun list object has no
392:07 - attribute Keys okay so this a list
392:08 - meaning that if we want to grab the keys
392:09 - for each team we can just do something
392:11 - like teams zero. keys and if we have a
392:14 - look at this now we get all of these
392:16 - different pieces of information for the
392:18 - stats of each team so I can get the
392:20 - nickname the name the team ID team code
392:23 - abbreviation min fgp TPP I don't know
392:26 - what a bunch of these mean but I know
392:27 - PPG is points per game so that's the one
392:29 - that we're going to use cuz I know what
392:30 - that means anyways those are the
392:32 - different Keys we can get for each team
392:34 - so now we can Loop through every single
392:36 - team uh and we can print out information
392:38 - for them so let's do that so let's say
392:41 - for team in teams and then we'll grab
392:46 - the names say name is equal to team name
392:49 - uh what else do we want I guess we'll
392:50 - get the ID we'll say the ID actually no
392:53 - I don't need the ID we'll just go with
392:55 - name and I suppose we get the nickname
392:58 - as well nickname is equal to team
392:59 - nickname and let's go PPG is equal to
393:02 - team and then
393:03 - PPG okay and then let's just
393:06 - print for now we'll do an F string and
393:10 - we'll print the
393:11 - name the nickname and the points per
393:14 - game okay so let's have a look at this
393:16 - now let's clear and let's
393:18 - run and there we go okay so apparently
393:20 - we have a bunch of teams here that are
393:23 - not in the regular season or don't have
393:25 - a rank or something so we'll have to
393:26 - filter those out we'll do that in a
393:27 - second but for now we have the uh all
393:30 - the teams right so we have the name we
393:32 - have the nickname we can choose which
393:34 - one we want to use and then we get
393:36 - average and we get rank for points per
393:38 - game so this is where it gets a little
393:39 - bit more complicated I want to display
393:41 - these teams in the order of their rank
393:44 - right so I want rank one to be at the
393:45 - top and I guess rank 29 30 whatever to
393:48 - be at the very bottom but I also need to
393:50 - filter out these guys because I guess
393:52 - there're a bunch of teams that we don't
393:53 - really need in our data set I don't know
393:55 - why those are being returned to us so
393:57 - the first thing I'm going to do here is
393:58 - I'm going to filter all of the teams
394:01 - that have a name of team so way I'm
394:03 - going to do that say teams is equal to
394:06 - filter I'm going to say Lambda X I'll
394:08 - explain this in a second don't worry and
394:10 - I'm going to say x at
394:12 - Team like this does not equal and then
394:16 - we're going to say team because anyone
394:18 - that had the name team was like a blank
394:20 - team that we didn't really need and then
394:21 - we'll do this on teams okay so what the
394:24 - filter function does is it will run a
394:26 - function against every single element in
394:29 - our teams in this case that's what we're
394:30 - passing and if the function returns true
394:33 - it will keep the element if the function
394:35 - returns false it will remove it so this
394:37 - is an anonymous function that's what a
394:39 - Lambda function is this is our uh
394:41 - parameter essentially the function
394:42 - called X so I write Lambda x uh and then
394:45 - I say colon X team does not equal team
394:48 - I'm saying let's grab whatever the team
394:50 - key is of every one of our dictionaries
394:52 - and if it is not equal to team then we
394:54 - will return true so like this expression
394:57 - returns true or false so if the function
394:59 - returns true we keep the element uh if
395:01 - returns false we don't keep it hopefully
395:03 - that makes a bit of sense I can't really
395:04 - explain it more than that however when
395:06 - you have a filter function here it
395:08 - returns a filter object not a list so
395:11 - you just need to convert it to a list
395:13 - okay so now that we have that let's just
395:15 - run this again and you should see that
395:17 - all those kind of empty teams will be
395:19 - removed so let's run it and uh key error
395:22 - team uh oh sorry not team this needs to
395:24 - be name okay let's fix that let's rerun
395:28 - and there we go so now all the ones that
395:30 - had just team are removed now what we
395:32 - need to do though is sort our teams by
395:34 - their rank in their points per game so
395:37 - to do this we're going to say teams.
395:41 - sort and we're going to say key is equal
395:43 - to and again we're going to put an
395:44 - anonymous anonymous function we're going
395:46 - to say Lambda X and then this is going
395:48 - to be x p perg PPG for points per game
395:51 - and then this is going to be rank like
395:53 - that and this is going to be
395:56 - int now this is going to sort in um what
396:00 - is it ascending order so we're going to
396:01 - get rank one first rank 30th 30th last
396:04 - now the reason I'm doing this is because
396:06 - points per game is a dictionary
396:08 - containing the rank and the average I
396:10 - want the rank so I'm grabbing points per
396:12 - game rank for every team converting that
396:15 - to an INT so then we sort it as an
396:17 - integer not as a string because notice
396:19 - these are string values right uh and
396:21 - that's that's how this works you can
396:22 - pass this key function and that's what
396:24 - you're going to sort every element by
396:26 - when you're sorting now let's run this
396:29 - and notice that we're going to have all
396:31 - the ranks in the correct order now of
396:33 - course I don't want to display you know
396:35 - this weird dictionary I'd prefer to
396:37 - display the following PP PPG and then
396:41 - AVG like that for the average so now if
396:43 - we rerun this we get the average number
396:46 - of points that each team scores per game
396:48 - and we get them ranked from 1 to 30th
396:51 - lastly if we want another touch here we
396:52 - could do the following I'm going to say
396:54 - I +1 Dot and I'm going to say for I
396:57 - comma
396:59 - team in enumerate teams and now it will
397:02 - say the rank beside each team so let's
397:04 - do that now and let's run and notice
397:07 - that now I get my rank and I also could
397:09 - have just done uh PPG at rank as opposed
397:13 - to doing i+1 but this works as well okay
397:16 - so that is going to wrap up this project
397:18 - let me quickly walk you through it so we
397:20 - start by defining the URL that we're
397:22 - going to send our request to we had to
397:25 - import and install the request module we
397:27 - set up our pretty printer we have get
397:29 - links which gives us the link we're
397:30 - going to send our request to to get
397:32 - specific data we then have this function
397:35 - to get the scoreboard that is the games
397:37 - that are currently running uh and so we
397:39 - have current scoreboard we get the Json
397:41 - we grab all the games associated with
397:42 - that for every single game because this
397:44 - is now a list we Loop through we get the
397:46 - home team uh the visiting team the clock
397:49 - and the period and then we display this
397:50 - data and of course you can display this
397:52 - nicer you can get some more info I
397:53 - thought this was good enough for the
397:54 - tutorial then we have our get stats
397:57 - function and get stats is going to grab
397:59 - the league team stats leaders uh it's
398:02 - going to do the filtering it's going to
398:03 - do the sorting and it's going to go
398:04 - through and display all of the teams
398:06 - ranked by points per game so I just
398:08 - called get stats to run that uh you can
398:10 - call get scoreboard to run this you can
398:11 - run both of them you could write a
398:13 - little program that asks the user which
398:14 - one they want to run I'll leave that to
398:16 - you guys now we're going to move on to
398:17 - project number three all right so now
398:20 - we're moving on to project number three
398:22 - which is a currency converter now for
398:24 - this project we need to go to this
398:26 - website free. currency converter ai.com
398:29 - to get an API key that we can use with
398:31 - this API now this a free API as it says
398:34 - in the name you are rate limited which
398:36 - means you have two requests or sorry 100
398:38 - requests per hour uh you can do a
398:40 - maximum of two currency pairs when
398:42 - you're getting the exchange rates per
398:43 - request uh and you're allowed to go back
398:45 - one year in history now you can pay for
398:48 - a premium version of this obviously we
398:50 - don't need to do that for this tutorial
398:51 - though we just want to get uh the
398:53 - exchange rate data now this data is
398:55 - updated I believe every 60 minutes when
398:58 - you're on the free version I think if
399:00 - you go to the paid version you get it
399:01 - every minute or 60 seconds or something
399:03 - like that again doesn't really matter
399:04 - for this tutorial anyways go to the
399:06 - website link in the description click on
399:07 - get your free API key enter your email
399:10 - it will send you the API key but make
399:12 - sure you verify your email because if
399:14 - you don't do that then it won't activate
399:16 - your API key anyways I already have my
399:18 - key uh and you don't want to share this
399:20 - with anyone of course it's the video I
399:22 - don't really care I'm going to have to
399:23 - share with you uh but what I'm going to
399:25 - do is make a variable here in a new file
399:27 - called API key and I'm going to paste in
399:29 - my key which I'm just going to grab from
399:32 - my other screen now while we're at it
399:34 - we're going to paste in another variable
399:36 - here called base URL now this is going
399:38 - to be equal to a different URL than you
399:40 - just saw it is free.cc kurv.com so
399:45 - that's the URL we want to be sending our
399:47 - requests to for this project to get the
399:50 - um up-to-date currencies right okay then
399:53 - what we're going to do is say from uh
399:56 - request import get now if you were not
399:58 - following along with the previous uh
400:00 - project which is fine what you need to
400:01 - do is install requests so pip install
400:05 - requests like that you can also try pip
400:07 - three install requests and if that
400:09 - doesn't work try python hyphen M pip
400:12 - install lastly you can try Python 3
400:14 - hyphen M pip install if that doesn't
400:16 - work there is two videos Linked In the
400:17 - description that will show you how to
400:18 - fix that command one for mac and one for
400:21 - Windows okay now that we have that we're
400:24 - just going to import the pretty printer
400:26 - as well just so we can use that again we
400:28 - used this in the last uh videos sorry so
400:31 - from PR print not last video last
400:33 - project we are going to import the
400:36 - pretty printer okay so this API Works a
400:40 - little bit differently than the last one
400:41 - we need to send what's known as some
400:43 - query parameters when we want to get
400:44 - some specific data and the first thing
400:47 - I'm going to do here show you how we can
400:48 - get a list of all of the currencies and
400:51 - then how we display those currencies
400:52 - then we can get the exchange rates and
400:54 - all of that stuff for now though I'm
400:55 - going to set up a printer so I'm going
400:57 - to say printer is equal to pretty
400:58 - printer again if you weren't following
401:00 - with the last video then what this
401:01 - allows you to do is get some nicely
401:03 - formatted output for your Json the Json
401:06 - is essentially a python dictionary
401:08 - that's going to be returned to you when
401:09 - you send a request to a URL uh okay so
401:13 - now that we have that let's get the
401:15 - currencies the way that we get the
401:16 - currencies is we say endpoint is equal
401:19 - to and then I need to copy this in so
401:21 - let me just copy this from my other
401:22 - screen and this is going to be API v7c
401:26 - currencies and then question mark now
401:29 - this starts what's known as a query
401:30 - parameter a query parameter is
401:32 - essentially a parameter some data that
401:34 - you're going to send to the URL uh and
401:37 - in this case what we need to add is our
401:38 - API key so we're using an F string
401:40 - available in Python 3.6 and above we're
401:43 - embedding the API key directly in here
401:45 - and that's what's going to allow this to
401:47 - work if you don't have the API key uh
401:49 - then this won't be validated and you
401:50 - won't be able to send a request now
401:52 - let's actually do this in a function so
401:53 - I'm going to say Define get currencies
401:56 - like that and we're going to say this is
401:58 - our endpoint and we're going to say that
402:00 - our
402:01 - URL is equal to our base URL plus our
402:04 - endpoint and then we're going to say
402:06 - that our data is equal to and this is
402:09 - going to be get we're going to send a
402:11 - get HTTP request to this endpoint uh so
402:14 - we're going to say get URL and then Json
402:17 - like that and for now we're going to say
402:19 - printer. pprint standing for pretty
402:21 - print and we're going to print out the
402:22 - data and we'll just call the get
402:25 - currencies function okay so that's all
402:28 - we need for now to look at the
402:29 - currencies so let's run this uh and no
402:32 - module name requests okay it needs to be
402:33 - request plural my apologies let's run
402:36 - this again and notice that we get all of
402:38 - our different currencies okay so when I
402:41 - have a look at what we're getting
402:43 - returned here uh we get a key that says
402:45 - results now again this is just a python
402:47 - dictionary that's the way you can think
402:48 - of it really is Json but we it gets read
402:51 - in as python dictionary so I can access
402:53 - this results key which is then going to
402:55 - give me a dictionary that has keys for
402:58 - every single currency and then the value
403:01 - of all of those currencies is going to
403:02 - have an ID a currency name and
403:05 - optionally a currency symbol so I want
403:07 - to be able to display that data to the
403:09 - screen so what I'm going to do here is
403:11 - from this function I'm going to return
403:14 - the data and then this is going to be at
403:17 - results like that uh and I'm also going
403:20 - to sort all of the results before I
403:22 - return them so I'm going to say that
403:25 - this is results okay I'm then going to
403:29 - say
403:30 - here data. sort so actually what I'm
403:34 - going to do here on a new line is I'm
403:35 - going to say data is equal to and then
403:37 - this is going to be the list of data.
403:40 - items the reason I'm doing this is
403:42 - because data right now after I get
403:44 - results is going to be a dictionary as
403:46 - we can see I don't want it to be a
403:48 - dictionary I want it to be a list and
403:49 - the reason I want it to be a list is so
403:51 - that I can sort it by the different
403:53 - currency names so I'm going to convert
403:55 - it into a list by getting all of the
403:57 - items the items will give me topples
403:59 - that contain the key so that be the
404:00 - currency and then the dictionary
404:02 - associated with each currency then I'm
404:04 - going to sort this by default it will
404:06 - sort by the first item in Python so
404:08 - it'll sort by the currency name and then
404:10 - I'm going to return my data like that so
404:13 - now I can say down here data is equal to
404:16 - get currencies and I can say printer.
404:19 - pprint and data and hopefully this will
404:22 - look a little bit cleaner now and it
404:24 - should be sorted so let's clear the
404:25 - screen let's run this uh and then notice
404:28 - we're getting tles here right where it
404:30 - contains the currency I guess you could
404:31 - call it ticker uh and then the
404:33 - information associated with that
404:34 - currency and it's in alphabetical order
404:36 - based on I'm going to call it the ticker
404:38 - or the ID whatever for the for the
404:40 - currency so now what we want to do is
404:42 - write a function that can display this
404:43 - in a much nicer format so we're going to
404:45 - say Define printor currencies we're
404:49 - going to take in our currencies and
404:51 - we're going to Loop through them and
404:52 - print them out so we have data there
404:54 - that's fine so now we're going to say
404:56 - for uh
404:58 - currency and then this will be well we
405:00 - should probably spell currency correctly
405:03 - so for currency in
405:06 - currencies uh we are going to grab the
405:09 - name of the currency so if we look here
405:11 - we see we have currency name uh we want
405:13 - the ID and then potentially the currency
405:16 - symbol but not all of them have it so
405:18 - we're going to have to write some code
405:19 - for that okay so let's say name is equal
405:23 - to and then this going to be
405:25 - currency and I believe it's currency
405:27 - name and then we want the ID so we're
405:29 - just going to say underscore ID I don't
405:32 - want to use ID because that's a built-in
405:34 - keyword in Python and this is going to
405:35 - be currency actually no it's just going
405:37 - to be
405:38 - ID okay and then the symbol uh will be
405:43 - so symbol is going to be equal to
405:45 - currency and then this is going to be
405:48 - doget and we're going to try to get the
405:51 - currency symbol like that and if it does
405:54 - not return a symbol then we're just
405:56 - going to get an empty string so when you
405:57 - use. getet that will try to find this
406:00 - key in the dictionary if it exists it
406:01 - gives you the value otherwise it gives
406:03 - you the default value which is an empty
406:04 - string which I'm passing right here okay
406:07 - now that we have that we can print this
406:09 - out so we're just going to print an F
406:11 - string again and we'll have the ID first
406:16 - because that's going to be the threel
406:17 - symbol uh then we will have the name and
406:21 - then optionally we will have the symbol
406:23 - there there okay hopefully that makes
406:26 - sense let's now call this so printor
406:30 - currencies let's pass our data and let's
406:33 - see what our output looks like here
406:35 - after I clear the screen okay let's run
406:37 - it and tle indices must be in integers
406:40 - or slices not string my apologies guys
406:43 - so we're going to say for
406:45 - currency uh let's do this
406:49 - for name comma currency and currencies
406:52 - the reason we have to do this is because
406:53 - this a list of tles forgot about that so
406:56 - now if I run this it should be good and
406:58 - there we go now we fixed the problem so
407:00 - we can see that we get our little ticker
407:03 - currency if there's a symbol it will
407:04 - display the symbol uh if there's not a
407:06 - symbol then well we don't show it okay
407:08 - nice so now that we have that we want to
407:11 - write something that can get an exchange
407:13 - rate so I'm going to say Define uh
407:16 - exchange uncore rate I guess like that
407:19 - and for the exchange rate we need two
407:21 - currencies that we want to get the rate
407:22 - for right right so we're going to say
407:24 - currency 1 and currency
407:27 - 2 now these currencies are going to be
407:30 - the IDS of the currencies we listed out
407:33 - so like CAD USD whatever the like the
407:36 - IDS is what we need to pass to this
407:38 - function for this to work now the
407:40 - endpoint for this I'm just going to copy
407:41 - it in here is going to be the following
407:44 - endpoint is API V7 convert uh question
407:48 - mark Q okay for query right we're going
407:50 - to say is equal to currency one and then
407:52 - notice this is underscore currency 2 so
407:55 - a little bit weird how this works but
407:57 - for this specific URL you pass the first
408:00 - currency uncore the second currency and
408:02 - that's the pairing that you want to get
408:04 - information about now you can pass
408:06 - multiple pairings like I could do USD
408:09 - CAD here and it would give me both of
408:11 - the results now we're just going to do
408:13 - one at a time and then you say and
408:15 - compact equals Ultra and API key equals
408:18 - API uh when you do compact Ultra gives
408:21 - you the most compact uh version where
408:23 - it's just going to give you the exchange
408:26 - rate and then of course you need your
408:27 - API key as well so we're going to embed
408:29 - that in this way hopefully that makes
408:31 - sense now we're going to send a request
408:32 - here so we're going to say URL is equal
408:34 - to base URL plus endpoint we're going to
408:36 - say response is equal to get url. Json
408:40 - and sorry not that Json we're going to
408:42 - say
408:44 - data data is equal to response. Json and
408:48 - let's now just print this out so let's
408:50 - go printer. pprint
408:53 - and we're going to have to handle
408:55 - potential errors that can occur here if
408:56 - you pass invalid currencies so for now
408:59 - though we can comment this out and we
409:00 - can just call the exchange rate and
409:03 - let's pass this with USD and Cad and it
409:06 - will give us the exchange rate between
409:08 - USD and CAD not from CAD to USD although
409:10 - I guess you could go both ways okay
409:13 - let's run this and notice that we get
409:15 - USD Cad and it's 1.25 9 025 looks about
409:18 - right and if we passed the second
409:20 - pairing it would have given us this key
409:22 - for whatever ever the second pairing was
409:24 - and then the value uh hopefully that is
409:26 - clear but that's what we're getting from
409:28 - that so what we need to do now is
409:31 - essentially check to make sure that this
409:34 - actually worked and the reason I'm
409:35 - saying that is because if I pass
409:37 - something like you know random string
409:38 - here and I run this notice that my data
409:41 - is empty because there was no pairing
409:43 - with that name so what I'm going to do
409:45 - here is I'm going to say if the Len of
409:48 - data is equal to zero then I'm just
409:51 - going to print out
409:53 - invalid
409:55 - currencies I guess we could just do uh I
409:58 - guess that doesn't really work we'll do
409:59 - invalid currencies and then we'll just
410:02 - return otherwise though we want to get
410:04 - the pairing and we're only going to have
410:06 - one pairing here in here one pairing
410:09 - here and here okay interesting how I
410:10 - said that but we're going to return data
410:13 - and then this is going to
410:15 - be do
410:18 - items actually not do items do values
410:21 - and we're going to convert this to to a
410:23 - list first of all because when you get
410:24 - the values it gives you kind of this
410:25 - special object and then we'll grab the
410:28 - zeroi value uh and we can actually
410:30 - that's already a float so we don't need
410:32 - to convert that okay so let's now say
410:34 - rate is equal to that and then print
410:38 - rate okay and then this will be USD so
410:41 - what I'm doing is I have my endpoint
410:43 - right I have my URL I'm getting my
410:45 - response I'm getting the data associated
410:47 - with that I'm saying if the line of data
410:49 - is is zero then print invalid currencies
410:52 - I also realize that we can just clean
410:53 - this up so let's just make this data
410:55 - like that uh now if the length is zero
410:57 - that means well we didn't have a valid
410:59 - pairing so we print that out and we
411:00 - return otherwise though we're going to
411:02 - convert all of the values it's just
411:03 - going to be one value really uh to a
411:05 - list we're going to grab the zeroth
411:07 - element which will just give us whatever
411:08 - the rate is and then we can print that
411:10 - out here okay so let's run this and
411:13 - notice we get
411:15 - 1.25
411:16 - 925 nice okay so now that we have gotten
411:20 - that uh maybe I want to add some output
411:23 - in here actually that tells me a bit
411:25 - nicer what the rate is so let's do that
411:27 - I'm going to
411:29 - say uh actually not print I'll say rate
411:32 - is equal to this and we will return the
411:35 - rate but before I return the rate I'm
411:37 - just going to print
411:39 - out and we'll do an F string here and we
411:42 - will say
411:45 - that um what is this going to be
411:47 - currency one okay uh to currency 2
411:54 - is equal to rate I don't know if this is
411:56 - exactly the way that I would write this
411:57 - but I think that's fine like usd2 CAD
412:00 - for example is this rate yeah you know
412:02 - what for now we're just going to go with
412:03 - this uh we'll say is equal to that that
412:05 - that's fine for me okay so let's just
412:07 - run this one more
412:08 - time and notice that I get USD to CAD at
412:11 - 125 9025 okay perfect that works for me
412:16 - now that we have that we're going to
412:18 - write one more that is going to take a
412:20 - dollar value and convert that do dollar
412:23 - value uh to the other currency so we're
412:25 - going to utilize this function but I'm
412:27 - going to say Define and then this is
412:30 - going to be I don't even know what I
412:32 - would call this here I guess convert and
412:34 - convert will take currency one currency
412:36 - 2 and an amount now in here we're going
412:39 - to say the rate is equal to exchange
412:41 - rate of currency one currency 2 and I'm
412:43 - going to say if the rate is none so if
412:46 - we're returning from here meaning we had
412:47 - an invalid currency then we're just
412:50 - going to return we don't need to do
412:52 - anything otherwise though we're going to
412:54 - try to convert the amount that was
412:55 - passed here to a float so I'm going to
412:57 - say
412:58 - try and then I'm going to say amount is
413:01 - equal to float amount I'm going to say
413:03 - accept and then what I will do is say
413:06 - print invalid amount so if you pass like
413:09 - a string amount for example here um
413:12 - something that I can't convert to a
413:13 - float I say invalid amount and then just
413:15 - return so that that way we don't have
413:17 - any issue when we try to do a
413:18 - multiplication which you're going to see
413:20 - in a second okay so we try that that
413:22 - doesn't work we we say invalid amount
413:24 - otherwise we're going to say converted
413:26 - uncore amount is equal to and this is
413:29 - going to be rate multiplied by whatever
413:31 - the amount is right and then what we can
413:33 - do is print with an F string here and we
413:37 - can say uh let's say
413:40 - amount and then currency
413:44 - one and let's just say is equal to and
413:49 - then we'll say converted
413:51 - amount currency
413:54 - 2 okay and then just because we might as
413:57 - well just return the converted amount
413:59 - okay so now we have four functions get
414:02 - currencies print currencies exchange
414:04 - rate and convert so now what we want to
414:07 - do essentially is just write a program
414:08 - that keeps asking the user for a command
414:11 - and allows them to quit but they can
414:12 - type in a command and do whatever they
414:14 - want with the currency converter so I'm
414:16 - going to say defin main inside of here
414:18 - I'm going to say currencies is equal to
414:21 - get currencies
414:23 - okay uh and then I will just print out
414:25 - like a little welcome message so welcome
414:27 - to the
414:29 - currency
414:31 - converter okay exclamation point uh and
414:33 - then we'll print the different commands
414:35 - so I'll say list list the different
414:39 - currencies okay we'll say print and then
414:42 - this is going to be convert uh
414:46 - convert from one currency to another
414:50 - okay and then print uh we'll just call
414:52 - this
414:53 - get the exchange
414:56 - rate of two
414:59 - currencies okay now that we have that
415:01 - let's just do one empty print statement
415:03 - just there's a separator and now we'll
415:04 - say while
415:06 - true and we're going to ask them to
415:08 - enter command so we'll say the command
415:10 - is equal to input and we'll
415:13 - say enter a command and we'll just say
415:16 - that they can type Q to quit like that
415:19 - okay so now in here we're going to say
415:21 - actually first let's convert this to to
415:22 - do lower just so that we can check um
415:25 - even if they type something uppercase
415:26 - we'll still get the command so first
415:28 - we'll check if they quit so if command
415:30 - is equal to Q uh we need two equal signs
415:33 - here then we can just break out of the
415:35 - wall Loop so let's break we'll say l if
415:38 - the command is equal to list then simple
415:42 - enough we can just print the currencies
415:44 - okay so print currencies like that uh
415:47 - that's all we need for list we'll say l
415:49 - if the command is equal to and then I
415:51 - guess we can handle convert then we need
415:53 - to ask the user for two currencies as
415:56 - well as an amount so we're going to get
415:58 - currency one which is equal to input uh
416:01 - enter a currency name okay actually
416:03 - let's say ID all right then we'll
416:05 - convert that uh actually we're going to
416:08 - convert it to uper not. lower now let's
416:11 - copy this again so let's say that's
416:14 - currency
416:15 - 2 actually we'll say enter a base
416:18 - currency ID enter a
416:21 - currency 2 convert to uh maybe we'll
416:24 - just do this I think this reads a bit
416:25 - better enter base currency enter
416:27 - currency to convert to and then we want
416:29 - one for amount so I guess I could have
416:30 - just written this from scratch we'll do
416:32 - this in between I'll say amount is equal
416:34 - to input enter and amount and then we'll
416:36 - say in and this will be in the base
416:39 - currency so we can say in uh and then
416:41 - currency one okay and well we don't
416:44 - really need to convert that to Upper
416:46 - because it's just going to be at a value
416:47 - once they do all of that then we can
416:49 - call our function which is convert and
416:51 - we can pass our value so we can say
416:53 - convert like that and we pass currency
416:56 - one currency 2 and amount okay lastly so
416:59 - we say l if the command is equal to rate
417:03 - then we just want to get the two
417:04 - currencies so let's grab currency one
417:06 - and currency 2 and let us call exchange
417:10 - rate so exchange rate of currency one
417:14 - and currency 2 and else we'll say
417:19 - print
417:21 - unrecognized command
417:24 - okay I think that is all we need now we
417:27 - need to of course call the main function
417:30 - okay let me zoom out a little bit just
417:31 - so you guys can read a bit more so we
417:33 - have our main function we're getting all
417:35 - the currencies we're just printing a
417:36 - little welcome message and then we're
417:38 - running a wall Loop and we're saying
417:39 - while true we're going to ask them to
417:40 - enter a command uh Q to quit of course
417:43 - if they enter Q we will break so that
417:44 - will quit if they enter list we will
417:46 - print the currencies if they enter
417:48 - convert we'll ask them for the
417:49 - information we need then we will convert
417:51 - and convert here here uh we'll do
417:53 - everything we need and print out the
417:55 - output then we have our rate where we
417:57 - get our two currencies and same thing we
417:59 - get the exchange rate and that will
418:00 - handle printing out uh the output as
418:03 - well so I believe that's it let's run
418:05 - this though and test it out so run and
418:08 - welcome to the currency converter let's
418:10 - zoom in a bit here uh list convert and
418:13 - rate enter command so let's try list
418:15 - okay there we go list everything out
418:18 - let's try to do the rate and let's do
418:21 - USD and Zar okay and gives us 14944 okay
418:27 - let's now
418:28 - try was it exchange no is convert
418:32 - convert enter a base currency let's go
418:34 - USD uh enter an amount in USD let's go
418:37 - 1,000 let's go xoff which is one I just
418:40 - saw up here West African CFA Frank okay
418:44 - and there we go gives us the conversion
418:46 - nice then if I hit Q I can quit and that
418:49 - is all the program needs to do for this
418:52 - project we're going to build a YouTube
418:54 - video downloader now the way this will
418:56 - work is you will just type in a URL of
418:59 - video you want to download you will then
419:00 - open up the browse window so you'll kind
419:02 - of select the location you want to save
419:04 - it to and then it will just be
419:05 - downloaded very nice so let's create a
419:08 - new file here I'll just call this
419:10 - YouTube dopy and similarly to the last
419:14 - project we are going to install a module
419:16 - here that will make our life easier so
419:17 - we're going to go here and say pip
419:19 - install PBE same thing as before gonna
419:22 - want to change this to pip three
419:23 - depending on your operating system okay
419:26 - so let's install P tube you can see I've
419:28 - already got it installed all right so
419:29 - now that that's installed we're going to
419:31 - do a few Imports here we're going to say
419:33 - from PBE import YouTube you can guess
419:37 - why we need that we're then going to say
419:39 - import
419:41 - tkinter this is built into python by the
419:43 - way as TK and we're going to say from
419:47 - tkinter import the file dialogue like
419:51 - that now you'll see why we need this in
419:53 - a second but tkinter is a very basic 2D
419:56 - Graphics library or kind of like goey
419:58 - utility library and python that lets you
420:01 - build some graphical user interfaces
420:03 - we're simply going to use it just to
420:04 - have a directory popup so you actually
420:07 - get like a visual kind of place where
420:09 - you can select where you want the file
420:11 - to be saved you'll see what I mean in a
420:13 - second but you can do some more cool
420:14 - stuff with it so if you're interested
420:16 - you can check out teer pretty simple to
420:18 - get started with anyways first thing we
420:20 - want to do is figure out how to download
420:21 - a YouTube video so we're going to make a
420:23 - function here which is download video
420:26 - and what we need to download a video is
420:28 - the URL and the path that we want to
420:30 - save the file to now similarly to before
420:33 - we're going to do a try and accept block
420:35 - because stuff can always go wrong when
420:37 - you're using these kind of apis so we're
420:39 - going to say accept exception as e and
420:42 - then we're going to say print e here and
420:44 - inside the tri block we're going to
420:45 - start writing the code that we need to
420:47 - actually download the video now we're
420:49 - going to say YT standing for YouTube is
420:52 - equal to YouTube and we are going to
420:54 - pass in the URL now what this will do is
420:57 - grab kind of an instance of the YouTube
420:59 - video based on the YouTube url that we
421:01 - pass and then we can kind of do a few
421:04 - things with it like we could get some
421:05 - stats about it but in our case we
421:07 - actually just want to download it now to
421:09 - download it there's a few ways to go
421:10 - about doing this but we want to download
421:12 - the highest resolution version so the
421:14 - first thing we're going to do is get
421:16 - access to all of the different streams
421:18 - of this video so we're going to say yt.
421:21 - streams. filter we're going to say
421:24 - progressive is equal to true and we're
421:27 - going to say the file
421:29 - uncore
421:31 - extension is that how you spell
421:33 - extension I think it is is equal to MP4
421:37 - now you can change this if you want but
421:38 - I think MP4 is just the default that
421:40 - most of us are going to use okay now
421:42 - that we have access to all of the
421:43 - different streams this is all the places
421:45 - we could be downloading it from we're
421:47 - going to get the highest resolution
421:49 - stream so we're going to say highest res
421:52 - stream is equal to
421:56 - streams.
421:58 - getor highest
422:00 - uncore resolution like that now this is
422:03 - going to give us access to that stream
422:05 - now that we have access to that stream
422:07 - we're going to download the video so
422:08 - we're going to say highest res
422:10 - stream. download we're just going to say
422:13 - the output uncore path is equal to the
422:16 - save path which is the parameter passed
422:18 - into here that's it we can then go and
422:22 - say
422:23 - print video
422:26 - downloaded successfully exclamation
422:29 - point okay pretty straightforward but we
422:31 - can go ahead and test this out so we can
422:33 - just say URL is equal to and we'll grab
422:35 - a YouTube video URL and then for the
422:38 - save path we want to specify where we
422:40 - want to save it now if we don't pass
422:41 - anything it will just save it in the
422:43 - current directory where we currently are
422:45 - uh but I'll show you again in a second
422:46 - how we can kind of fix the path a little
422:48 - bit so that it's a bit easier to figure
422:50 - out where we want to save it now in my
422:52 - case I'll just manually type in the path
422:54 - so I'm going to say C drive SL users SL
422:58 - Tim SL desktop SL python automation
423:05 - which is the name of the folder that we
423:07 - are currently in okay now we can call
423:10 - the function so download video URL and
423:14 - save path and now what we need to do is
423:16 - just get a YouTube video URL let me just
423:18 - grab one of my videos and I'll be right
423:20 - back all right so I just loaded up one
423:22 - of my YouTube videos three types of
423:24 - projects that make you a programmer but
423:26 - I couldn't help but notice look at this
423:27 - link here enroll in my free software
423:29 - development introduction course that
423:31 - looks interesting let's click on that
423:33 - and you can see that we have start your
423:35 - career in software development and
423:36 - there's actually a free intro course you
423:38 - guys can take if you want that teaches
423:40 - you about how to break into software
423:41 - development if you are looking to
423:43 - actually land a job not going to show
423:45 - this too hard obviously there is a paid
423:47 - course here as well but there is a
423:48 - completely free one that gives you a ton
423:49 - of value it is 1 hour long if you guys
423:52 - want to check it out do that from the
423:54 - link in the description anyways we have
423:56 - our link let's copy the link and paste
423:59 - that inside of the URL variable and now
424:03 - let's save and let's run our code so
424:05 - python youube dopy give this a second to
424:09 - download okay and you can see now that
424:11 - we get the three types of projects that
424:13 - make you a programmer video downloaded
424:15 - successfully and I'd be able to open
424:17 - that up now and actually watch it if I
424:19 - wanted to pretty straightforward so now
424:21 - similarly to before what we want to do
424:23 - is make this code a little bit better
424:25 - just so that we don't have to manually
424:27 - type in this path and we don't have to
424:28 - manually type in the URL so let's scrap
424:31 - all this and let's now write something
424:33 - that makes it a little bit more user
424:34 - friendly so what we're going to do is
424:36 - make a function here called open file
424:39 - dialogue this is going to open the file
424:41 - dialogue which will kind of pick where
424:43 - we're going to save the folder with a
424:46 - file sorry first though we're going to
424:48 - say root is equal to tk. TK now what
424:52 - this does is just instantiate the TK
424:54 - module and kind of creates a TK window
424:58 - uh TK window right to be able to use
425:00 - this file dialogue you need a window but
425:02 - the thing is it doesn't have to be shown
425:05 - so what I can do is I can say root do
425:08 - withdraw now what that will do is it
425:10 - will just hide the window so you don't
425:12 - see it uh kind of appearing on the
425:13 - screen so we initialize the window hide
425:16 - the window and now we're actually able
425:18 - to use this root variable here um or
425:21 - really any tkinter typee stuff to be
425:23 - able to open the file dialogue so what
425:25 - I'm going to do inside of this directory
425:27 - is say folder is equal to the file
425:31 - dialogue okay and this is going to be
425:33 - ask
425:34 - directory and then I'm going to say if
425:36 - the folder path so if they actually type
425:38 - something in then we're going to say
425:41 - print the FST string selected folder and
425:45 - I'm just going to print out what the
425:46 - folder was that they selected and then
425:48 - I'm going to return the folder here okay
425:52 - great so now I'm going to go down and
425:54 - I'm just going to make one single line
425:55 - here I'm going to say if uncore name is
425:59 - equal toore uncore maincore uncore now
426:02 - you might be asking what the heck is
426:04 - this crazy line that I'm looking at Tim
426:06 - well what this line will do is make sure
426:08 - that you are directly running this
426:10 - python file before it executes anything
426:12 - that happens under this that's it all
426:15 - that means is that if you run this code
426:16 - directly this will run if you don't it
426:19 - won't the reason you would ever even
426:21 - need this is because sometimes you'll
426:23 - have some code inside of here that might
426:25 - be reused by another file so for example
426:28 - maybe our currency. file uses something
426:30 - inside of here if we don't have this
426:32 - line and currency were to import this
426:34 - module that would actually run all of
426:36 - the code like it would run all this
426:38 - stuff here so actually with that in mind
426:41 - let's put this here so that anything we
426:43 - do is only going to happen if we
426:45 - directly run this python file I'm hoping
426:48 - that makes a bit of sense but you guys
426:49 - can ask chat she with here look it up if
426:50 - you want some more clar ification pretty
426:52 - standard uh python syntax anyways we're
426:55 - going to say the video URL is equal to
426:58 - input and we're going to say please
427:01 - enter a URL and this is going to be a
427:05 - YouTube URL and notice I just added a
427:08 - space here the reason for that is this
427:10 - input doesn't automatically put a space
427:12 - after it so I just put a space so that
427:14 - we'll get some separation with the colon
427:16 - okay so we're going to get the video URL
427:18 - we're then going to get the save
427:20 - directory so I'm going to say save
427:22 - is equal to the open file dialogue and
427:25 - I'm just going to quickly do something
427:26 - here I'm going to say if not folder like
427:29 - this and I'm going to say print
427:31 - please select folder dot dot dot we got
427:35 - to change this to say save directory and
427:38 - then I'm going to type continue like
427:40 - actually not
427:42 - continue uh yes please select the dur
427:45 - okay then I'm going to put an else here
427:47 - and I'm going to say download
427:50 - video video URL and save directory and
427:54 - actually rather than please select the
427:55 - folder I'm going to say invalid save
428:00 - location okay so what did I just do here
428:03 - I wrote a very simple line that simply
428:05 - asks for some input so it's going to get
428:07 - the video URL I then had this save
428:10 - directory so we're going to open the
428:12 - file dialogue you're going to see how
428:13 - that works in one second I'm just going
428:14 - to make sure that they actually did
428:16 - select a folder because it's possible
428:17 - they could just exit out of it if they
428:20 - did so which is actually in the lse
428:22 - statement here I'm going to download the
428:24 - video if they didn't which is what this
428:26 - is checking I'm going to print they have
428:27 - an invalid save location now if we want
428:29 - this to be a bit more clear we could
428:31 - actually swap these around and say if
428:33 - they have a save directory then we'll
428:34 - download the
428:35 - video otherwise we'll do this and if we
428:38 - want we could do a little print
428:39 - statement here and say print
428:42 - started download just in case the
428:44 - download takes a while or you have slow
428:46 - internet so people know something is
428:47 - actually happening got zoom out a bit so
428:50 - we can read more of the code at once
428:52 - again all of this will be available from
428:54 - the description and let's give this a
428:56 - test python
428:58 - youtube. enter a URL uh okay that's not
429:01 - the URL that I wanted let's go back here
429:04 - and grab my URL paste that in okay then
429:08 - notice it brings up a location so I
429:10 - could go desktop and what was this
429:13 - python automation okay now it's actually
429:16 - going to this isn't going to be good
429:18 - because it's going to save in the same
429:19 - thing okay let's just save it to to my
429:21 - downloads I'm going to select downloads
429:23 - as folder notice it says started
429:25 - download okay we'll give this a second
429:27 - and then it should be downloaded inside
429:29 - of my downloads so if I go to my
429:31 - downloads CD dot dot CD dot dot CD
429:37 - downloads LS you can see that we have
429:40 - three types of projects that make you a
429:42 - programmer and it's been downloaded okay
429:45 - so that was it for project number two
429:47 - hope you enjoyed let's move on to the
429:49 - last project moving on to our last
429:52 - project we are going to write some code
429:54 - that will do an automatic folder backup
429:56 - for us this is actually pretty simple uh
429:58 - but I just wanted to show it to you
429:59 - because it is kind of a realistic and
430:01 - real world project anyways what we need
430:03 - to start by doing is installing a python
430:05 - module just like before so we're going
430:07 - to say pip install and we're going to
430:11 - install the schedule module you could
430:13 - probably guess what this is going to do
430:15 - but it is going to help us schedule a
430:17 - kind of task to run now this will show
430:19 - you how to schedule really any task task
430:21 - doesn't have to be a folder backup we're
430:23 - going to make a new uh python file here
430:25 - I'm just going to call this backup dopy
430:28 - and inside of here we're going to import
430:29 - a few things that we need so we're going
430:31 - to import OS which stands for operating
430:33 - system we're going to import shoe util
430:36 - or however you pronounce this which will
430:38 - do some copying operations for us we're
430:40 - going to import date time because when I
430:42 - back up a folder I actually want to save
430:44 - the new folder as the date that this was
430:46 - backed up so we can kind of have a
430:48 - history of all our backups I'm then
430:50 - going to import
430:51 - the schedule module and I'm going to
430:54 - import the time
430:56 - module okay we've got our Imports now
431:00 - what we need to do is specify what the
431:02 - source directory is so the thing that we
431:04 - want to back up and what the destination
431:07 - directory is so what I'm going to do is
431:10 - say my source dur is equal to and I'm
431:13 - just going to manually type in the path
431:14 - for this that I want it to be so I'm
431:16 - going to do
431:17 - c/ users SL Tim SLP pictures SL
431:23 - screenshots now you can do any folder
431:25 - that you want you just have to find the
431:26 - path to it now if you're wondering how
431:28 - do I find the path to it well there's a
431:30 - few ways you can do this now I have to
431:31 - show you on uh what do you call Windows
431:33 - CU I'm obviously on Windows but if I
431:36 - open up my file explorer here and I go
431:38 - to my if I can do this pictures and
431:42 - screenshots what I can do is just click
431:44 - in the address bar here and it just
431:46 - gives me the path okay so that's how you
431:47 - would do this on something like Windows
431:50 - now on Mac you should be able to just
431:51 - open up a folder so you should be able
431:53 - to like right click on it and go to the
431:55 - properties of that folder or get more
431:57 - info about the folder and it should show
431:59 - you the path to where that folder is
432:01 - that's how you can pick the location
432:02 - although I'm sure you guys can probably
432:04 - figure out how to find the PATH now we
432:06 - also need to have the destination
432:08 - directory so I'm going to say
432:09 - destination dur is going to be equal to
432:13 - and then here what I'm going to do is C
432:15 - colon SL users SL Tim SL desktop SLB
432:20 - backup
432:21 - now I just made a new folder on my
432:23 - desktop called backups you can put the
432:25 - folder wherever you want but obviously
432:27 - just make sure the folder exists that
432:28 - you're going to be backing up into okay
432:30 - so now we have the source directory and
432:31 - the destination directory we're going to
432:33 - make our function so we're going to say
432:34 - copy folder to
432:38 - directory and inside of here we're going
432:41 - to take in our source and our
432:44 - destination and we're going to say first
432:46 - of all
432:47 - today is equal to date time. date
432:51 - do today now what that's going to do is
432:53 - simply give us the current day today
432:56 - that's all this does okay just gives us
432:57 - the day today based on our computer
432:59 - we're then going to say the destination
433:02 - directory is going to be equal to os.
433:05 - path. jooy and we're going to take in
433:08 - our destination which is passed here and
433:11 - we're going to combine this with the
433:13 - string of today's date now the reason
433:16 - I'm doing this is that we're essentially
433:17 - going to have this backups directory
433:19 - okay and inside inside of here we're
433:21 - going to have a bunch of folders all
433:23 - these folders will be our backup and
433:25 - those folders will be labeled like 11
433:27 - you know 23 2023 right which is the
433:30 - current date so what I'm doing is I'm
433:32 - getting the current date and I am
433:34 - combining the current date with my
433:36 - destination directory so that inside of
433:38 - this directory I have a new directory
433:40 - which contains the backup which is named
433:42 - today's date okay now similarly to
433:45 - before we're going to do a try and we're
433:47 - going to say show you till. copy tree
433:50 - now copy just copies everything
433:52 - recursively which means anything inside
433:54 - of the folder it will copy and we're
433:56 - going to copy from our source to our
433:59 - destination directory okay make sure you
434:02 - don't use DES use destination directory
434:04 - because that's the new directory we just
434:06 - set up awesome then we'll do a little
434:08 - print statement here we can do an F
434:10 - string we can say folder copied to the
434:14 - destination
434:16 - directory and then we can do accept
434:18 - exception as e and actually I'm going to
434:21 - do something different because I'll show
434:22 - you how this works I'm going to accept
434:24 - the file exists error and I'm going to
434:28 - print NF string and say folder already
434:33 - exists
434:36 - in the destination now what this is
434:40 - doing essentially saying okay it's
434:41 - possible that an error occurs here when
434:43 - I try to copy my source directory to my
434:45 - destination directory if that's the case
434:48 - that means there's actually already a
434:49 - directory with the same name inside of
434:53 - this uh what do you call it base
434:55 - destination directory so we are just
434:57 - going to catch that error so that our
434:59 - program doesn't crash and we are going
435:02 - to handle that by just printing out hey
435:03 - this is the error that occurred okay
435:05 - we're almost done so first of all right
435:07 - now if I want I can just do this so copy
435:10 - folder directory and I can pass my
435:12 - source directory and my destination
435:15 - directory now let's just open that up so
435:17 - if we go here and we go to desktop you
435:20 - can see I have backups nothing's inside
435:21 - of here okay now if I go ahead and run
435:25 - my code python backup. py we'll see if
435:28 - we get an A not it says folder copied
435:30 - here okay so if I open this up now you
435:32 - can see we have screenshots appearing
435:34 - now the name is a little bit glitched uh
435:36 - don't worry this actually will be named
435:38 - the correct thing for some reason
435:40 - whenever you copy a Windows created
435:42 - folder which is the one that I did it uh
435:45 - it kind of glitches in the ID so you can
435:46 - see date created actually shows the
435:48 - correct name here right but it just
435:50 - appear as screenshots cuz there's some
435:52 - kind of weird caching issue in Windows
435:53 - Explorer so it does actually have the
435:55 - correct name just trust me I was messing
435:57 - with this before too uh for some reason
436:00 - it it has like this weird um kind of
436:02 - caching thing if you were to like
436:03 - restart the computer you should see the
436:05 - correct name anyways not a huge deal I'm
436:07 - sure for you guys that worked because I
436:09 - got it working before but now what we
436:11 - want to do is we want to schedule this
436:13 - to run every single day at a certain
436:15 - time right because we want to back up
436:16 - consistently so what we can do is the
436:19 - following we can say
436:21 - schedule
436:23 - every. day do at and we can specify a
436:27 - time and 24-hour time code that we want
436:29 - to do this backup at now for me right
436:31 - now it's about 652 so I'm going to just
436:34 - put this to 655 right now we can change
436:36 - that in a second and I'm going to do do
436:39 - and I just put the name of the uh
436:41 - function that I want to run whenever
436:43 - this schedule occurs so what we've done
436:45 - now is we've scheduled this task which
436:47 - is just a function right so notice I
436:49 - didn't call the function I just put the
436:51 - name of the function and what this will
436:53 - do here is call the function on my
436:56 - behalf now what we're going to see is
436:58 - that there's a little bit of an issue
436:59 - because we have our source and we have
437:01 - our destination which are parameters
437:03 - that we need to pass to this function so
437:05 - what we can actually do is write kind of
437:07 - a fancy line of python code which if you
437:09 - made it this far I will treat you with
437:11 - which is something known as a Lambda now
437:13 - I'm going to say Lambda and inside of
437:16 - here I'm going to put my
437:18 - sourcer and I'm going to put my Des
437:21 - J now what I've done is I've essentially
437:24 - written what's known as an inline or
437:26 - Anonymous function so the idea is this.
437:30 - do takes a function that it needs to
437:32 - call the problem is we need to pass some
437:36 - parameters to that function there's a
437:38 - few other ways to do this but one way to
437:40 - do this is okay we're actually going to
437:41 - write the C of the function with the
437:43 - parameters that we need but we don't
437:46 - want to call the function we got to pass
437:48 - a function to this argument so what we
437:51 - do is we write our Lambda and now what
437:53 - this does is it actually wraps a
437:55 - function so it says okay Lambda is a
437:57 - function that's going to call this so
437:59 - now we're saying okay well we have a
438:00 - function inside of here so when we have
438:03 - do we call this Lambda function which
438:06 - then goes ahead and does this I know it
438:08 - seems weird but it's the same thing as
438:09 - doing this Define l and then inside of
438:12 - here you put this okay so let's copy
438:15 - this and paste that here and then rather
438:18 - than writing the Lambda we just put l
438:20 - which is the name of our function okay
438:22 - this is the exact same thing so the
438:24 - function does this which just calls this
438:26 - rather than doing this we use this
438:28 - Lambda which is this kind of inline
438:30 - Anonymous function bit more of advanced
438:32 - python syntax but hopefully you found it
438:34 - cool okay last thing we need to do we're
438:38 - going to say while true like this and
438:41 - we're going to say schedule. runor
438:45 - pending and we're just going to say time
438:47 - do sleep 60 seconds
438:51 - now let's just move this down a bit and
438:54 - I'll explain so what we're doing is
438:56 - we're scheduling a task run every day at
438:58 - 655 however the way this schedule works
439:01 - is that it's not actually going to
439:02 - execute the task for us until we have
439:04 - this schedule. run pending call so what
439:07 - we're doing is inside of a w Loop which
439:08 - means just infinitely we are going to
439:11 - consistently run this run pending
439:13 - command which will look for any
439:15 - scheduled tasks that have been scheduled
439:17 - that haven't yet ran and it will run
439:19 - them for us we're then going to sleep
439:21 - for 60 seconds or 1 minute so we don't
439:23 - just constantly keep calling this but
439:25 - every 1 minute we're going to check
439:28 - because this will go up every minute
439:30 - right if the task needs to be ran and if
439:32 - it needs to be ran we'll run it if it
439:34 - doesn't well nothing will run so
439:36 - technically you could just leave this
439:37 - python file running forever in the
439:39 - background on your computer and every
439:41 - day at whatever time you put it's going
439:43 - to update your code obviously if you
439:45 - turn off the computer you need to rerun
439:47 - the python file but this is how you
439:48 - schedule a task to run at certain
439:50 - increment now you can also do every week
439:52 - every year every minute every second
439:54 - like any increment you want pretty much
439:56 - you can set and you can schedule a tasks
439:58 - in our case we did every day but you can
440:00 - do any increment you want now I need to
440:02 - make the time a bit further because it
440:03 - took longer to explain and we can test
440:06 - this so I'm going to say Python and
440:09 - backup. piy currently it is oh issue
440:13 - invalid time format for a daily job uh
440:16 - okay I think we need to do sorry it's
440:19 - cuz I have 650 7 it would need to be
440:21 - 0657 but what I actually want to put is
440:25 - the 24-hour time code which is
440:27 - 1857 so now if I run this it's good it's
440:30 - just because I didn't have four digits
440:32 - for my time code so actually a good
440:34 - error to run into there uh we want four
440:36 - digits now it's 6 uh 56 p.m. not 5656
440:41 - a.m. s so that's why I had that issue
440:43 - anyways I'm just going to wait 1 minute
440:45 - here and we should see that it will
440:46 - automatically actually do the backup for
440:48 - us let's give this a second and I'll be
440:51 - right back all right so it actually
440:52 - worked it says folder already exists cuz
440:54 - the folder is already in that location
440:56 - that we're trying to do anyways though
440:58 - it did automatically run this task as
441:00 - soon as it hit
441:01 - 657 now we could just continue to let
441:04 - this run and tomorrow at the exact same
441:06 - time it would then go ahead and run this
441:08 - backup task okay so I'm going to close
441:10 - this by hitting contrl C that's how you
441:12 - can actually quit this program when you
441:14 - have it running and there you go that
441:16 - will finish this uh video If you're
441:19 - looking for a quick pipe python project
441:21 - that you can use to practice your skills
441:23 - and learn about some new python features
441:25 - then this video is for you what we're
441:27 - going to do here is build the popular
441:28 - game known as Mastermind this takes
441:31 - about 75 lines of code I'd rank it kind
441:33 - of intermediate difficulty and it's
441:35 - going to teach you a lot about python
441:37 - especially if you're kind of a beginner
441:39 - or getting into those intermediate
441:40 - stages I'm also going to show you how to
441:43 - properly lay out a program even though
441:45 - this is small you're going to see how an
441:46 - experienced programmer names their
441:48 - variables creates the different function
441:50 - and kind of just sets up the general
441:52 - structure of the program which is some
441:53 - valuable information so with that said
441:55 - let me give you a quick demo of the game
441:57 - so you understand how it works and then
441:58 - we'll get into building the
442:01 - [Music]
442:07 - project all right so I've got VSS code
442:10 - open here this is where I'm going to run
442:11 - and write all of the code for this
442:13 - project if you don't already have it I'd
442:15 - recommend you download it from the link
442:16 - in the description regardless you can
442:18 - still use the python idle or whatever
442:20 - your preferred environment is this is
442:22 - just what I'm using for this video now
442:24 - I've already ridden the project just so
442:25 - I can demo it for you so let's have a
442:27 - quick look at how it works so this game
442:29 - is Mastermind the general idea is you're
442:31 - going to have a player in this case
442:33 - that's going to be us who has to guess a
442:34 - four col or kind of four-digit code so
442:38 - in this case the computer is going to be
442:39 - the one generating the code typically
442:41 - you play with two people and one person
442:43 - is kind of the code maker okay so I've
442:46 - actually printed out what the code is
442:47 - here just so that we can see it and kind
442:49 - of compare to it as we go through this
442:50 - demo typically you wouldn't show the
442:52 - user what the code is so it says welcome
442:54 - to Mastermind attempt to guess the
442:55 - four-digit code you have 10 tries the
442:57 - colors that can make up the code are red
442:59 - green blue yellow white and orange so
443:01 - you're going to make a guess of four
443:02 - colors try to guess what the code is I
443:05 - always like to start with just one color
443:06 - so red red red red okay so now we can
443:09 - see that we have zero colors that are in
443:10 - the correct position and zero colors
443:13 - that are in the code that are in the
443:14 - incorrect position so now I'm going to
443:16 - go with say white white white white okay
443:18 - zero again now obviously we can see the
443:20 - code so let's speed this up and go with
443:22 - four yellows now it tells me that I have
443:25 - two colors here that are in the correct
443:26 - position and zero that are in the
443:28 - incorrect position that's because these
443:31 - two y's are in the correct position if
443:33 - there was another y but I didn't have it
443:34 - in the correct position then this would
443:36 - give me a one okay so now we have y y y
443:38 - y so let's do GG y y now it tells me I
443:42 - have three in the correct position but I
443:44 - don't know which those are necessarily
443:46 - so I'm going to go with maybe W actually
443:49 - not W let's go with like
443:52 - o uh actually g o y y okay and now it
443:57 - tells me I have two in the correct
443:59 - position one in the incorrect position
444:00 - the reason I'm getting incorrect is
444:02 - because I have a green here so I've put
444:04 - that there it's in the code but it's in
444:06 - the incorrect position so hopefully that
444:08 - makes sense that's why it's showing it
444:09 - to me and now we can just go ahead and
444:11 - guess the code all right and there we go
444:14 - we guess the code in six tries there you
444:16 - go that is The Mastermind game it'll
444:18 - make more sense as we go through the
444:19 - tutorial all right so let's go ahead and
444:21 - start building this project now I'm just
444:23 - going to spend a minute here and discuss
444:25 - what it is that we actually need in
444:26 - terms of the sub components for this
444:29 - project then we can build those one at a
444:31 - time and then kind of tie them all
444:32 - together at the end this is a good
444:34 - practice whenever you're writing code
444:36 - you want to think about it for a second
444:37 - before you just dive into the code so
444:39 - the first thing we need to do is we need
444:40 - to generate a random code this is going
444:42 - to be four colors or four digits
444:44 - whatever you want to refer to it as and
444:46 - they have to use kind of the six colors
444:48 - that are part of the game okay that's
444:50 - step one generate a code next we need a
444:52 - way for a user to guess what the code is
444:55 - and we want to make sure that what
444:56 - they're guessing is valid so if they
444:57 - guess only three colors or if they guess
444:59 - five colors or if they guess a color
445:01 - that doesn't exist we need to give them
445:02 - some feedback and tell them hey that's
445:04 - invalid make another guess now after
445:06 - that we need to compare their guess to
445:08 - what the real code is to do that we need
445:11 - to determine the number of correct
445:13 - colors the ones that are in the correct
445:14 - position and the number of colors that
445:16 - are in the code that are in the
445:17 - incorrect position so we can give them
445:19 - that output
445:20 - this is probably the most challenging
445:21 - part don't worry I'll walk you through
445:23 - how we do that after that we kind of
445:25 - just need to tie the game together right
445:27 - we need to do 10 guesses we need to
445:29 - constantly give the output saying this
445:31 - is how many correct this is how many are
445:33 - incorrect we need to determine if the
445:34 - user got the correct code and we need to
445:37 - determine if the user lost the game
445:39 - that's really all we have to do what I
445:41 - like to start doing is building out each
445:43 - of the individual components and then at
445:45 - the end I kind of tie them together so
445:47 - let's go ahead and do that step one is
445:49 - going to be to generate our code so
445:51 - since we're going to be generating a
445:52 - random code I'm going to start by
445:53 - importing the random module and now I'm
445:56 - going to Define all of the colors that
445:57 - we're going to be using so I'm going to
445:58 - say colorss in all capitals the reason
446:00 - I'm doing capitals is because this is a
446:02 - constant and that's kind of a convention
446:04 - in Python it's a variable that's not
446:06 - going to change so for my colors I'm
446:07 - just going to refer to my cheat sheet
446:09 - here for what we have we have red green
446:12 - blue yellow white and orange I don't
446:16 - know if these are the real colors that
446:18 - are used in the game but these are just
446:19 - the one that we're going to use and in
446:20 - the real game it has six colors that's
446:22 - why I'm doing six okay next I'm just
446:24 - going to Define a variable called tries
446:26 - I like to put all my constants at the
446:28 - top of the program just so they're easy
446:30 - to find to find sorry and this is the
446:32 - number of tries you get in the real game
446:33 - so I'm doing kind of the same thing 10
446:35 - tries okay next we're going to write a
446:38 - function which is going to generate the
446:39 - code for us so I'm going to say Define
446:43 - generate uncore code like that now I'm
446:47 - actually going to make another constant
446:49 - called code length and make that equal
446:51 - to four just because if I wanted to make
446:53 - this game harder maybe I make the code
446:54 - length five and I increase the tries you
446:56 - can kind of make this Dynamic by
446:58 - changing these different values assuming
447:00 - that we use them properly throughout the
447:01 - program okay so for generating the code
447:03 - we need to create in this case a list
447:06 - the list is going to contain all of the
447:07 - elements in our code and we're going to
447:09 - have four elements so I'm going to say
447:11 - my code is equal to an empt list inside
447:14 - of my function by the way a function is
447:16 - just a reusable block of code that you
447:19 - can call mult multiple times if you're
447:20 - unfamiliar with it it's just something
447:21 - that we can use later on so I wanted to
447:24 - mention that okay now that we have our
447:26 - code list we're going to insert four
447:29 - random colors into that list to do that
447:31 - I'm going to say four underscore in
447:34 - range and then I'm going to go the range
447:36 - of my code underscore length and this
447:39 - underscore is essentially a placeholder
447:41 - for what you would normally put here
447:42 - which is like I or X or some value in
447:45 - this case I don't care about what
447:46 - iteration I'm on so I can just put an
447:48 - underscore meaning I don't really care
447:50 - about what that variable is it's kind of
447:52 - like a placeholder it's known as an
447:53 - anonymous variable okay what I'm going
447:55 - to do now is select a random element
447:58 - from this color list the way that I do
448:00 - that is I say color is equal to random.
448:05 - Choice and then of colors okay that's
448:09 - going to randomly select a color from
448:10 - this colors list I'm then going to say
448:12 - code. append and then I'm going to
448:15 - append that color into my code this for
448:18 - Loop is going to run four times which
448:19 - which is our code length it's going to
448:20 - randomly select four colors and then put
448:22 - that into our code okay then I can
448:25 - return the code from this function uh
448:28 - which is what I can access when I call
448:29 - this function so the way this would work
448:31 - is I'd say code is equal to generate
448:34 - code then it's going to give me a list
448:36 - of four random colors perfect okay now
448:40 - we have a way to generate the code the
448:42 - next thing we need to do is allow the
448:44 - user to guess the code so I'm going to
448:45 - make a function for that and I'm going
448:47 - to call this guess uncore code
448:50 - all right so for guessing the code we're
448:52 - going to have to ask them to enter some
448:53 - input so I'm going to say their guess is
448:57 - equal to input this allows the user to
448:59 - type in the console and I'm going to say
449:01 - guess colon like that now what I'm going
449:04 - to do is convert their guess to all
449:06 - upper cases just so that if they type
449:07 - like a lowercase G here we're going to
449:10 - convert that to an uppercase G so when
449:11 - we compare it to the real code we don't
449:13 - get an issue if they typed in lower case
449:16 - then what I'm going to do is use the
449:18 - split function now I'm going to put a
449:20 - space inside of here and what this is
449:22 - going to do is it's going to take all of
449:24 - the input and turn it into a list based
449:27 - on all of the spaces so for example if I
449:29 - have g g g g like that and I have spaces
449:32 - in between them then what that dos spit
449:34 - function is going to do is use all of
449:36 - the spaces to create elements in a list
449:38 - so I'm going to get a list that has four
449:41 - G's inside of it and it's going to
449:43 - remove all of those spaces for me
449:46 - hopefully that makes a bit of sense but
449:47 - it's just going to take all the spaces
449:49 - and kind of grab all of my individual
449:51 - colors uh using the spaces as what's
449:53 - known as a delimiter if you wanted to do
449:55 - it with commas you change this to a
449:56 - comma and then you would expect an input
449:59 - like this uh if I could type that
450:02 - correctly okay hopefully that makes a
450:04 - bit of sense but that's what split does
450:06 - all right now that we have a list
450:08 - containing all of the different colors
450:09 - the user inputed we're going to check
450:11 - the length of that list and see if it's
450:13 - equal to four that will tell us if they
450:14 - inputed four colors or not so I'm going
450:16 - to say if guess or if the Len
450:20 - of guess does not equal four then I am
450:23 - going to
450:25 - print you must guess four colors okay
450:31 - and really rather than doing four I'm
450:33 - going to change this to be the code
450:35 - length so that later on if we want we
450:36 - can change what the code length is and
450:39 - then here I'm going to use an FST string
450:40 - and do code length as well an F string
450:43 - is available in Python 3.7 and above and
450:46 - allows you to embed variables directly
450:48 - inside of a string using curly braces
450:50 - you put an F before the string and then
450:52 - curly braces like this and you can
450:53 - insert the variable directly in the
450:55 - string now while I'm at this I'm going
450:57 - to put all of this inside of a wall Loop
450:58 - because if they input an invalid code
451:01 - then I need them to go through the loop
451:03 - again and give me another guess so here
451:05 - inside of this if statement I'm going to
451:08 - have a continue and what continue will
451:10 - do is just bring me to the top of this
451:11 - Loop okay so if the length of the guess
451:13 - uh is not equal to the code length we
451:15 - print this and then they're going to
451:16 - have to guess again and keep doing that
451:17 - until they give us four digits
451:20 - lastly I need to make sure all of the
451:21 - colors that they guess are actually in
451:23 - the colors list so to do that I'm going
451:25 - to say four color in guess which is now
451:28 - a list and I'm going to say if color not
451:31 - in colors then what I'm going to do is
451:34 - say print another F string invalid color
451:39 - and then we'll put what the color was
451:41 - and we'll say try again okay then what
451:45 - we can do is we can break out of this
451:48 - then we can do is we can put an else
451:50 - statement here and we can say break now
451:53 - I'm going to explain what this means uh
451:55 - but here I'm just going to return my
451:58 - guess okay I think that's all we need uh
452:00 - but let's have a look at it so
452:01 - essentially what I'm doing here is I'm
452:02 - looping through every single color in
452:04 - the user's guess because now this is a
452:06 - list and it contains all of the
452:08 - individual colors that were separated by
452:09 - spaces I'm going to say if any of the
452:11 - colors are not in this colors list so
452:14 - that's all of the valid colors here then
452:16 - I'm going to tell them hey this is
452:18 - invalid please try again and I'm going
452:20 - to break out of this for Loop now when I
452:22 - break out of this for Loop what that's
452:24 - going to do is essentially just make it
452:26 - so I continue with this wall Loop now
452:29 - what this else statement does here is
452:31 - essentially check if I didn't break out
452:33 - of the for Loop so what I'm doing is I'm
452:36 - saying if I never encountered this break
452:38 - keyword inside of the for Loop this L
452:41 - statement is going to run that means
452:43 - that all of the colors they had were
452:45 - inside of the colors list because if
452:47 - this never happened and I never break
452:49 - that means every single color I had was
452:51 - valid okay now that brings me into the
452:53 - else here because I didn't break so
452:55 - that's what the else is doing telling
452:56 - you if you didn't break out of the for
452:58 - Loop and then from this else I'm
453:00 - breaking out of the while loop so this
453:02 - is while true so the only time I get out
453:04 - of this W Loop is if I pass through this
453:06 - for Loop and all of the colors are valid
453:09 - hopefully that makes sense but this is
453:10 - what you can do on a for loop it's
453:12 - actually a really cool syntax allows me
453:14 - to determine if I broke or not I didn't
453:15 - break so I'm going to break here out of
453:17 - the W Loop and then return with whatever
453:19 - the guess is that the user gave me okay
453:22 - so that is guess code now that we have
453:25 - guess code the next thing we're going to
453:26 - do is say check code okay and here we're
453:29 - going to take the guess and the realore
453:31 - code and we're going to check uh how
453:33 - many are correct all right so this is a
453:35 - little bit more complicated and what
453:37 - this involves is essentially looking
453:39 - through every single color in our code
453:42 - and first of all determining if the
453:44 - guessing color matches the real code
453:47 - color that's the first thing that we
453:48 - need to do that's the easy part now we
453:50 - can determine how many colors are in the
453:52 - correct position once we do that though
453:55 - the more difficult part is determining
453:57 - the colors that are in the code but that
453:59 - are not in the correct position the
454:01 - reason for that is that we could have
454:03 - colors that are in the correct position
454:05 - and we don't want to count those as
454:07 - being in the code but being in the
454:09 - incorrect position again I know this
454:11 - seems a little bit weird but there's a
454:12 - few things we have to do here so just
454:14 - try to follow along with me and I'll
454:15 - explain it as we go kind of Step by Step
454:17 - but step one is going to be check the
454:19 - the correct position then we need to
454:20 - check the colors that are in the
454:22 - incorrect position and it's important we
454:24 - do it in that order to make sure we
454:25 - don't double count a color so what I'm
454:28 - going to do here is I'm going to say
454:29 - colorcore count or counts is equal to a
454:33 - dictionary and then I'm going to say
454:35 - corrector pause is equal to zero and
454:38 - incorrect underscore pause is equal to
454:39 - zero to keep track of the colors in the
454:41 - correct position and the incorrect
454:42 - position all right first thing I'm going
454:44 - to do here is I'm going to say for color
454:46 - in the realore code and I'm going to
454:50 - keep track of the counts of all of the
454:52 - colors so I want to know do I have two
454:53 - Reds do I have one yellow do I have one
454:55 - green I'm going to store that inside of
454:57 - the color counts dictionary so I'm going
454:59 - to have something like green and then
455:01 - two which means we have two greens
455:03 - inside of the code the reason I want
455:05 - that is so that later when I'm checking
455:07 - the incorrect colors I can make sure
455:10 - that I'm not using colors that were in
455:13 - the correct position or counting those
455:14 - towards my incorrect you'll see what I
455:16 - mean but just try to follow along all
455:19 - right so I'm saying for color in real
455:21 - code I'm going to say if the color is
455:24 - not in the color counts which means the
455:27 - key right so like key meaning like this
455:30 - green and sorry I need to get out of
455:32 - this uh if the key is not inside of the
455:34 - dictionary then I want to add it so to
455:36 - add it I'm going to say colorcore count
455:39 - and then this is going to be at color is
455:41 - equal to zero and then no matter what
455:43 - let me just close this I'm going to say
455:45 - color counts at color plus equals 1 so
455:49 - again I'm looping through all of the
455:50 - colors in my real code I'm saying if
455:53 - this color is not a key in the
455:54 - dictionary then we need to add it so I'm
455:56 - setting that key to zero the reason for
455:58 - that is that if I try to increment a key
456:00 - that doesn't exist I'm going to get an
456:01 - error so if the color is not there I add
456:03 - it in and then no matter what I
456:05 - increment the count for that color in my
456:08 - dictionary if you're unfamiliar with
456:10 - dictionaries I have a ton of python
456:11 - tutorials I think I have one
456:12 - specifically on dictionaries you can
456:14 - check that out from my Channel all right
456:17 - so now that we have the counts what I
456:19 - want to do is find all of the colors
456:21 - that are in the correct position so I'm
456:22 - going to say for Guess undor color
456:27 - realore color in and then I'm going to
456:29 - use a fancy function called zip and I'm
456:32 - going to zip the guess and the real
456:35 - code now what this ZIP function does is
456:38 - the following it's going to take my two
456:40 - arguments and it's going to combine them
456:42 - into tles so if I have guess and real
456:45 - code let's say my guess is equal to like
456:48 - G and R and my real is equal to like w
456:54 - and yellow then what the zip is going to
456:56 - give me is the following it's going to
456:57 - give me a list that has if we could do
457:01 - this properly has G and W and has
457:07 - R and Y okay so it's going to
457:10 - essentially combine the elements at the
457:12 - same position into topples and then give
457:14 - me a list of that the reason for that or
457:16 - the reason I'm doing that is so I can
457:17 - easily compare them because now I have a
457:19 - tupple and then what I'm doing here is
457:21 - decomposing the tupple into its two
457:24 - individual elements so I'm getting the
457:26 - real color or sorry the guess color and
457:28 - then the real color which are the two
457:30 - elements from my tle hopefully that
457:32 - makes a bit of sense but that's how the
457:33 - zip function works so now that I have
457:37 - that I can compare them so I'm going to
457:39 - say if the guess color is equal to the
457:42 - real color because again these are at
457:43 - the same positions in our um codes then
457:47 - what I'm going to do is say my correct
457:49 - uncore positions plus equal 1 and I'm
457:52 - going to decrease the count from my col
457:56 - counts dictionary so I'm going to say
457:57 - color count at and then we can use
458:00 - either the real color or the guest color
458:02 - because of the same it doesn't matter at
458:04 - Guest color minus equals 1 the reason
458:07 - I'm doing this is I want to mark that
458:09 - this color that I just found is in the
458:11 - correct position so I don't want to
458:13 - potentially count that when I'm counting
458:15 - the colors that are in the incorrect
458:16 - position so you'll see how it work works
458:18 - when I start looking at the incorrect
458:20 - position but I'm essentially getting rid
458:21 - of that color from the count to make
458:24 - sure that I don't use it again and count
458:26 - it as an incorrect color because it's
458:27 - not incorrect it's in the correct
458:29 - position so now I need to kind of remove
458:31 - it and forget about it because I've
458:32 - already handled it okay now we've done
458:34 - all of the correct colors pretty easy
458:36 - straightforward with the for Loop now we
458:38 - need to do the same thing but for the
458:40 - incorrect colors so again I'm going to
458:42 - copy this kind of for Loop structure and
458:44 - now I'm going to say if the guess uncore
458:48 - C is in the coloror counts I could use
458:53 - the real code or color counts it doesn't
458:55 - matter if I use color counts it's
458:56 - checking if I have a key that exists in
458:59 - color counts so it's the same thing
459:02 - and
459:04 - colorcore count at the guor color is
459:10 - greater than zero all right sorry for
459:12 - the cut here but I wanted to quickly
459:14 - demo to you an example of a real code
459:16 - versus our guess and what we would tell
459:18 - the user user and kind of why we're
459:19 - writing the code the way we are so here
459:22 - we have our real code which is green
459:23 - orange orange orange and then we have
459:25 - our guest which is green green ww in
459:27 - this case what we tell the user is that
459:30 - they have one color in the correct
459:32 - position that's it they have zero colors
459:34 - in the incorrect position the reason for
459:36 - that is that the greens here are in the
459:38 - correct position so that means if I see
459:40 - another green I'm not going to say
459:42 - that's in the incorrect position because
459:44 - there's not another Green in the code
459:46 - that it doesn't match with right here we
459:48 - have these two greens they kind of
459:50 - cancel each other out and now as we go
459:51 - through the rest of the guess and we
459:53 - compare that to the real one we don't
459:55 - say to the user hey this is in the
459:57 - incorrect position we would only do that
459:59 - if there was another Green in the code
460:01 - so hopefully that makes a bit of sense
460:03 - now the reason we're going through this
460:05 - whole process of keeping track of the
460:06 - count is so that as we go through here
460:09 - and we see this green we make sure we
460:11 - don't tell the user it's in the
460:12 - incorrect position just because a green
460:15 - existed before it this green since it
460:18 - matched up with a green that was in the
460:19 - correct position shouldn't be looked at
460:21 - anymore hence why we're subtracting it
460:24 - from this color count hopefully that
460:26 - makes a little bit of sense but that's
460:28 - why we're keeping track of the counts
460:29 - and that's why we need to First go
460:31 - through and keep track or find all of
460:33 - the colors in the correct position then
460:36 - only after we do that and we determine
460:38 - how many other colors are left to kind
460:39 - of match up we go through this okay you
460:43 - can mess around with a few different
460:44 - examples and try kind of changing the
460:46 - code around and you'll see what I mean
460:47 - uh but hopefully that gave you somewhat
460:49 - of idea of why we're writing the code
460:51 - the way we are anyways what I'm doing
460:53 - here is I'm saying if the guest color is
460:55 - in the color counts so if the key exists
460:57 - and the key there is greater than zero
461:00 - meaning we still have a color that we
461:02 - can use to kind of match with this one
461:04 - then we're going to say the incorrect
461:06 - position plus equals 1 and again we're
461:09 - going to subtract our color count so
461:11 - color count at the guess color minus
461:15 - equals 1 because now we found one color
461:17 - that's in the in in correct position so
461:19 - we want to make sure that we're not
461:20 - going to say another one is in the
461:22 - incorrect position if there was only say
461:24 - one color to match with so we need to
461:26 - every time we tell the user one's in the
461:28 - correct position or in the incorrect
461:29 - position kind of eliminate that color
461:31 - from the code to be matching against as
461:33 - we continue kind of doing this check and
461:35 - matching all right now that we have this
461:38 - we should know how many correct and
461:40 - incorrect positions there are so we can
461:42 - return both of those pieces of
461:43 - information with correct pause incorrect
461:46 - pause separated by a comma uh we can
461:48 - just get both those pieces of
461:49 - information out of the function okay now
461:53 - we have the three main components of our
461:55 - game we now need to link them together
461:57 - with some main kind of game logic so I'm
461:59 - going to make another function called
462:01 - game inside of here I'm going to start
462:03 - by generating the code so I'm going to
462:05 - say the code is equal to generate code
462:08 - like that all right that gives us our
462:10 - code next I'm going to have a for Loop
462:12 - and I'm going to say four actually
462:15 - attempts in range and then this is going
462:17 - to be one one comma and then
462:21 - tries plus one Okay the reason I'm doing
462:25 - this is because the range function will
462:26 - go up to but not include the last value
462:29 - here so I'm going to just start at one
462:31 - and go to in this case 11 which means
462:33 - I'm going to go from one to 10 uh so
462:35 - that I have kind of the correct try
462:38 - number hopefully that makes a bit of
462:39 - sense but you'll see why I'm doing that
462:41 - in a second all right then the first
462:43 - thing we need to ask the user to do is
462:45 - guess the code so I'm going to say guess
462:47 - is equal to guess unor code very simple
462:51 - you can see how our functions are
462:52 - helpful now this is going to get the
462:53 - user's guess once we get the user's
462:56 - guess we want to compare that to the
462:58 - code so I'm going to say correct
463:01 - pause incorrect pause is equal to and
463:04 - then what I call this check undor code
463:06 - we're going to pass the guess and the
463:09 - code then we need to tell the user some
463:11 - output so we're going to say print F
463:14 - string and we're going to say correct
463:20 - positions and then this is going to be
463:23 - corrector pause I'm going to do a pipe
463:26 - and then I'm going to say incorrect
463:28 - positions and then
463:31 - incorrect undor pause okay uh very good
463:35 - and then it's going to ask them to guess
463:37 - again so that's really all we need uh
463:40 - although I want to check if the user one
463:43 - or if they got the code so actually
463:44 - before I do this I'm going to say if
463:47 - corrector position
463:49 - is equal to the code length that I'm
463:52 - going to print
463:55 - U guest the code in and we'll do an F
464:00 - string here as well and then this is
464:02 - going to
464:03 - be attempts and then tries like that and
464:07 - then I'm going to break out of the for
464:09 - Loop so I don't tell them this after I
464:11 - already told them that they guessed the
464:12 - code all right then we're going to have
464:15 - an else statement here and I'm going to
464:16 - say print
464:18 - you ran out of tries the code was and
464:24 - then I'm going to do
464:26 - Asis and then the code now what this
464:29 - will do is just print out every
464:31 - individual element from my list so
464:33 - essentially what asterisk does is just
464:35 - takes every individual element and kind
464:37 - of passes it to the print function which
464:39 - means the code is going to be printed
464:41 - space separated uh from this variable
464:43 - you'll see what I mean if we actually
464:45 - encounter this case but it's kind of a
464:46 - cool thing you can use to print out a
464:48 - list and have it look decent with kind
464:50 - of space separated values all right I
464:53 - think that's all we need uh I'm just
464:55 - looking here and making sure this is
464:57 - okay and yeah I think that's it lastly
465:00 - what we can do is just print kind of
465:02 - some intro text here so we're going to
465:05 - say print you know welcome to
465:07 - Mastermind you have and then this is
465:10 - going to be F
465:13 - string tries to
465:16 - guess the code dot dot Dot and then I'm
465:18 - going to say
465:19 - print and then the
465:23 - valid colors are and then again asteris
465:27 - and then this time we're going to do
465:28 - colors okay lastly we need to call this
465:31 - game function so I'm going to say if
465:33 - uncore name equals uncore main then game
465:38 - this will run the game one time if you
465:40 - wanted to run the game multiple times
465:41 - you could put this inside of a while
465:43 - loop and then continue asking the user
465:44 - do you want to play again if they enter
465:46 - yes you run the game again by calling
465:47 - the fun fun if they enter no then you
465:49 - just quit and stop running the game if
465:51 - you're wondering what this line is here
465:53 - this just makes sure that we're actually
465:55 - directly running this python file
465:57 - because you can import python files and
465:59 - if you were to import this file without
466:01 - having this line like let's say you just
466:02 - had game here then it would run the game
466:05 - when maybe you don't want to do that you
466:07 - just want to be using some of the
466:08 - functions that are inside of our code so
466:10 - this just makes sure you're directly
466:12 - running the python file all right I
466:14 - think that's going to be it for the game
466:16 - I want to quickly run through the code
466:17 - then we'll just just make sure it's
466:18 - working so let's go through this first
466:20 - we're printing you know our welcome
466:21 - messages we generate the code and then
466:23 - for the number of attempts that we have
466:25 - we're going to do this we say the guess
466:27 - is equal to guess code okay that just
466:29 - gets the user to guess our code we then
466:31 - compare the code to the real code and
466:33 - then we tell them or sorry we check
466:35 - first if they actually guessed the code
466:37 - if they did guess the code and we can
466:39 - determine that by seeing if their
466:40 - correct position equal to code length we
466:42 - tell them they guessed it in this number
466:44 - of attempts and then we break out of
466:46 - this for Loop otherwise we tell the
466:48 - number of correct positions and
466:49 - incorrect positions they had in their
466:51 - guess if we get to this else statement
466:53 - here what that means is we never broke
466:56 - out of this for Loop which means the
466:57 - user never guessed the code and the for
467:00 - Loop ended so they ran out of tries we
467:01 - tell them you ran out of tries and then
467:03 - we tell them what the code was Prett
467:05 - straightforward that is game we have
467:08 - check code we already ran through that
467:10 - guess code and generate code and then
467:12 - all of our constants at the top of the
467:14 - program and you can see kind of how this
467:15 - program is well laid out it's very easy
467:17 - easy to understand what's going
467:20 - [Music]
467:26 - on all right so now let's run our code
467:28 - and see if this works okay so I'm going
467:30 - to run it here we have welcome to
467:32 - Mastermind you have 10 this should say
467:33 - tries to guess the code the valid colors
467:36 - are the following I always like to start
467:37 - with just one color okay so correct
467:39 - position one incorrect position zero
467:42 - okay now let's try this uh correct
467:44 - positions two okay that tells me the Y
467:46 - is in the correct position or sorry not
467:49 - the Y the R so I'm going to go r y
467:52 - ww okay so now I know my Y is somewhere
467:55 - else so I'm going to go R Let's Go Blue
467:59 - y w two correct positions okay let's go
468:03 - r o y o and we guessed it okay nice got
468:08 - the code that was actually pretty lucky
468:10 - there that we guessed that on uh Tri
468:12 - five now of course we could run the code
468:13 - multiple times test out all of the
468:15 - different cases but I think for now
468:17 - that's it and our code is working in
468:20 - this video I'll share with you how to
468:21 - build a custom aim trainer in Python
468:23 - that you can make as easy or challenging
468:25 - as you want now this is a great project
468:27 - for anyone who's a beginner or
468:29 - intermediate python programmer just
468:31 - looking to work on something fun that
468:32 - will help you practice your skills I
468:34 - don't assume any advanced python
468:36 - knowledge in this video but I am
468:37 - assuming that you've worked with python
468:39 - before you've maybe done a project or
468:41 - two in the past and you have some idea
468:42 - about basic syntax like for Loops
468:45 - functions classes Etc regardless this is
468:48 - a great project I won't delay the intro
468:50 - anymore let's go ahead and get into it
468:52 - and I'll show you how we can build this
468:53 - aim trainer so now that I've gone
468:55 - through that let's go into a new file
468:57 - here and let's start working on this aim
468:59 - trainer but actually I'll just quickly
469:00 - demo it so we can talk about kind of
469:01 - what we need to do here so you can see
469:03 - that what I'm doing is tracking some
469:04 - different stats so I've set a number of
469:06 - lives that's essentially how many
469:08 - targets you have to miss before the aim
469:10 - trainer is going to finish and tell you
469:12 - what your stats are I've set it really
469:13 - high for the demo but typically we'd
469:15 - have this at something like three or
469:17 - five we then have stats that are keeping
469:19 - track of the number of hits you have the
469:21 - number of targets you press per second
469:23 - and the total time elapsed obviously we
469:25 - have targets that appearing randomly on
469:27 - the screen you can press on them and
469:29 - you'll see that they are shrinking and
469:31 - kind of growing as they appear so they
469:33 - grow up to a certain size pause for a
469:35 - second and then shrink back down that's
469:37 - exactly what we're attempting to do okay
469:40 - so now that we've looked at that quick
469:41 - demo we have some kind of idea of what
469:43 - we need to build here let's go into a
469:44 - new python file which I'm in right now
469:46 - and let's start working on this project
469:48 - now for this project I'm going to use a
469:50 - module called pame now pame is something
469:52 - we need to install so what we're going
469:54 - to do here is go to our command line or
469:56 - terminal and type pip install and then
470:00 - py game now I already have this
470:01 - installed so I'm not going to run that
470:03 - command for you you may need to do pip
470:05 - three install pame if you're on Mac or
470:07 - Linux you can also try python hyphen M
470:11 - pip install py game or Python 3 hyphen M
470:14 - pip install P game if none of those work
470:16 - I will leave two videos on the screen
470:17 - that show show you how to install py
470:19 - game okay so now that we have pame
470:21 - installed we can start working it so
470:23 - we're just going to do a few Imports
470:24 - here Define our pame window don't worry
470:27 - if you've never used pame before it's
470:28 - super straightforward and it's actually
470:30 - a really great thing to build some basic
470:31 - user interfaces in Python so I'll walk
470:33 - you through all the steps let's start by
470:36 - importing pame we are then going to type
470:38 - py game. AIT which is going to
470:41 - initialize pame and initialize the fonts
470:43 - and some other things that we need I'm
470:45 - then going to go up here and before pame
470:47 - I'm going to import math because we're
470:48 - going to use that I'm going to import
470:50 - random we're going to need that as well
470:52 - and then I'm going to import
470:54 - time okay I think that's all we need now
470:57 - that we've done that we're going to
470:59 - define the width and the height of our
471:00 - window we're going to create a window
471:02 - object and then we're going to create
471:03 - what's known as the main Loop for our P
471:05 - game project so we're going to say width
471:07 - comma height is equal to and then I'm
471:10 - going to go with
471:11 - 8600 now keep in mind if you're on a
471:14 - smaller display you need you may need to
471:15 - make this a little bit smaller I'm on
471:17 - quite a a large display so you'll see
471:18 - that this is kind of a good size but for
471:20 - some of you you may want to do 600 by
471:22 - 400 this is the number of pixels you're
471:24 - going to be using for the window okay so
471:27 - now that we have the width and the
471:29 - height I'm going to define a window
471:30 - object so I'm going to say wind is equal
471:33 - to py game. display. setor mode and
471:37 - inside a set of parentheses I'm going to
471:39 - pass my width and my height now what
471:41 - this we'll do is initialize a pame
471:43 - window and display that on the screen so
471:45 - this is going to pop up kind of a black
471:47 - window that will have an 800 width and a
471:50 - 600 height because we passed that inside
471:52 - of the parenthesis once we have this
471:54 - window we can then draw things onto it
471:56 - which we'll do in a minute so next we're
471:58 - going to say py game. display. setor
472:01 - caption and the caption for this is
472:03 - simply going to be aim trainer now the
472:05 - caption is just the name of the window
472:07 - you don't need to set this but I like to
472:08 - do this for my projects okay so now that
472:11 - we've done that let's create what's
472:13 - known as the main Loop of our program
472:15 - which is essentially an infinite Loop
472:16 - that we'll check for different events so
472:18 - pressing on the screen quitting the
472:20 - window if a Target appeared or
472:22 - disappeared that's what we're going to
472:23 - be doing inside of the main Loop so
472:25 - we're going to say Define main which is
472:26 - our main function now inside of here
472:28 - we're essentially going to create a
472:29 - while loop that will run forever until
472:31 - we quit the window so we're going to say
472:33 - while run and we'll Define a variable
472:35 - here called run we'll make that equal to
472:37 - true and inside of the while loop what
472:40 - we're going to do is Loop through all
472:41 - the different pame events and see if the
472:44 - user quit the window now you'd think
472:46 - that it's already built in when you
472:47 - press the x button it's going to close
472:49 - the window that's actually not the case
472:50 - here in pame what happens when you press
472:53 - the x button is an event will be
472:54 - triggered and we then need to respond to
472:56 - that event and close the window for the
472:58 - user so to do that we're going to say
473:00 - for event in py game. event. get now
473:04 - what this is going to do is Loop through
473:06 - all of the different events that are
473:07 - occurring so that will be kind of equal
473:09 - to the event here and then we will check
473:12 - if this event is equal to the quit event
473:14 - if it is then we'll quit so we'll say if
473:16 - event . type is equal to pame do quit
473:21 - like that then we're simply going to say
473:24 - run is equal to false and we're going to
473:27 - break out of this for Loop here okay so
473:29 - now what we have is a wall Loop that's
473:31 - going to run while this variable is true
473:33 - we then Loop through all of the
473:34 - different events that are occurring as
473:36 - we go through this wall Loop so pretty
473:37 - much every millisecond or however fast
473:39 - this wall Loop is running we're looking
473:40 - at all of the events if one of the
473:42 - events is quit then we're going to break
473:44 - the loop and get outside of it so now if
473:46 - we're out of the loop we're going to say
473:48 - py game. quit and that's going to quit
473:51 - the pame window and close it and then
473:54 - we're going to come down here and we're
473:55 - going to say if uncore name is equal
473:57 - toore main then run the main function
474:02 - now what this will do is just ensure
474:04 - that we're only running the main
474:05 - function if we're executing this file
474:07 - directly don't worry too much about this
474:09 - if you haven't seen it before just a
474:10 - nice line to add in to make sure if we
474:12 - import one of these functions from
474:13 - another file it doesn't cause this game
474:16 - to run so now let's quickly test this
474:17 - out you can see when I run this a window
474:20 - appears that says aim trainer which is
474:21 - 800x 600 and then if I click on X it
474:24 - closes the window and all is good
474:27 - perfect that's all we needed for right
474:28 - now okay so now that we have our main
474:30 - Loop implemented what we need to do is
474:32 - start putting some Targets on the screen
474:35 - viewing those targets then seeing them
474:36 - kind of shrink and grow so what we're
474:39 - going to do is create a class which is
474:40 - going to represent our targets so we're
474:42 - going to say class Target like that and
474:45 - inside of the class we're going to
474:46 - define a few variables that we need for
474:47 - the Target remember it's kind of growing
474:49 - and shrinking so we're going to set a
474:51 - maximum size for the Target which is
474:53 - essentially the size at which we want to
474:55 - start shrinking so we'll grow up to the
474:56 - maximum size as soon as we hit that
474:58 - we'll start shrinking so the max size
475:00 - will be 30 you can change all these
475:02 - values by the way I'm then going to say
475:05 - the growth
475:06 - rate is equal to 0.2 now this is how
475:10 - many pixels we want to grow the target
475:12 - per frame now we'll talk about frames in
475:14 - one second but both of these values you
475:16 - can adjust and as you adjust it it will
475:18 - make the aim trainer more difficult or
475:20 - easier depending on the direction you go
475:21 - in then I'm going to set the color for
475:23 - my target equal to Red uh you'll see why
475:26 - we want that in a second just so that we
475:28 - can kind of change the color Target
475:29 - quite easily okay next we are going to
475:33 - Define an initialization this is what's
475:35 - known as The Constructor for our Target
475:37 - inside of here I'm going to take in self
475:39 - X and Y self will refer to the Target
475:42 - itself that we are calling this
475:43 - Constructor on and X and Y will be the
475:45 - position where we want to place this
475:46 - target Target on the screen so we'll
475:48 - kind of randomly generate those
475:49 - positions and then we'll store them
475:51 - inside of the target object so we'll say
475:53 - self.x is equal to X and self.y is equal
475:57 - to Y we're then going to Define two
475:59 - variables here one is self. size is
476:02 - equal to zero now the size will be the
476:04 - radius of the target it's going to start
476:06 - at zero and then we're going to increase
476:08 - it by this growth factor until it hits
476:10 - the maximum size once it hits the
476:12 - maximum size we'll start shrinking it
476:14 - down so then it gets to zero and then
476:16 - once it's at zero will make the target
476:17 - disappear from the screen we're also
476:19 - going to have an attribute here called
476:21 - grow we're going to start this equal to
476:23 - true but then we need to make this false
476:25 - as soon as we hit the maximum size so we
476:27 - start shrinking rather than growing
476:30 - great so now let's write a method that
476:32 - we can call to update the target size
476:34 - which we'll need to do so we're going to
476:36 - say Define update and we're going to
476:37 - take in s now what we'll do in here is
476:40 - we'll essentially check if we should be
476:42 - growing or shrinking and then adjust the
476:44 - target based on that so we know that we
476:46 - need to start shrinking the target as
476:48 - soon as the current size of the target
476:50 - is going to be greater than the maximum
476:51 - size so I say if the self-d size
476:55 - plus the self. growth rate is going to
476:59 - be greater than or equal to the self.
477:02 - maximum size then I need to say self.
477:05 - grow is equal to false so as soon as I
477:09 - add this growth rate and it causes the
477:11 - size of my target to be greater than or
477:12 - equal to the maximum size I need to set
477:14 - grow equal to false okay
477:17 - then I'm going to come down here I'm
477:19 - going to say if self. grow so if we are
477:22 - growing then self. size plus equals the
477:26 - self do growth rate otherwise if we're
477:28 - not growing we must be shrinking so
477:30 - we'll say self. size minus equals the
477:33 - self. growth rate okay so now we have a
477:35 - function that will handle sizing our
477:37 - Target and making it larger or smaller
477:39 - based on if we're growing or not okay
477:42 - now we need a function that actually
477:44 - draws the target onto the screen so
477:47 - we're going to say Define draw we're
477:48 - going to take in self and we're going to
477:50 - take in a window object that we want to
477:52 - draw this target onto Now The Way We
477:55 - Draw Something in P game is different
477:57 - depending on the thing that we're
477:58 - drawing but in our case we want to draw
478:00 - a circle so we're going to say
478:03 - pame dot draw do Circle okay now what we
478:09 - pass here when we're drawing a circle is
478:11 - the window we want to draw the circle
478:12 - onto the color of the circle and then
478:15 - the center position of the circle Circle
478:17 - as well as the radius okay having all of
478:19 - those different pieces of information
478:21 - allows pame to put this on the surface
478:23 - so in P game we're constantly dealing
478:25 - with surfaces this window here is going
478:27 - to be our window object that we've
478:29 - created and we're saying yes we want to
478:30 - draw this circle onto the window where
478:32 - do we want to draw it what color is it
478:34 - how big should it be that's what it's
478:36 - asking us so we're going to put when
478:37 - because that's where we want to draw it
478:39 - we're going to put self.cut because
478:40 - that's the color we want the target to
478:42 - be and then we're going to pass a tupple
478:44 - that contains the XY position of the
478:46 - center of the target so we're going to
478:48 - say self.x self.y that's the center of
478:50 - the target then we're going to pass the
478:52 - radius or the size of our Target so
478:54 - we're going to say self. size and when
478:56 - we pass self. size whatever the current
478:58 - size is well that's the size we'll be
479:00 - drawing for the radius of the target
479:02 - meaning as the size increases we'll be
479:04 - drawing larger and larger circles now
479:07 - for now this is just going to draw a red
479:09 - circle however if we want to draw kind
479:11 - of that Target style Circle where we
479:13 - have you know red white red white Etc we
479:16 - actually need to draw four circles the
479:18 - first one will be the largest Circle
479:19 - then we'll draw smaller and smaller
479:21 - circles that will will overlap each
479:23 - other sory and cause this kind of ring
479:25 - pattern to appear so what I'm going to
479:27 - do is draw four circles here so I'll
479:29 - just kind of copy this down four times
479:31 - and what we'll do is we'll adjust the
479:32 - size so we'll say self do size times 0.8
479:36 - now it's important that we do this by
479:37 - some kind of multiplication Factor so
479:39 - that as the size of our Target changes
479:42 - so does the size of all the Rings inside
479:44 - side of the target sorry I can't just
479:46 - say draw this size 20 draw the next one
479:48 - size 30 I need to do it dynamically
479:50 - based on what the current size of our
479:52 - Target is because it's going to grow and
479:53 - it's going to shrink right okay so we do
479:56 - time 0.8 then we're going to do time 0.6
479:59 - and then time 0.4 and if you want the
480:01 - Rings to be spaced out differently then
480:03 - you can adjust these values but I think
480:05 - this will give us a nice ring shape for
480:07 - our Target now what we need to do is
480:09 - just adjust the size or S out the size
480:11 - the color of our targets so we have
480:13 - self. color here and in fact let's go
480:16 - and say
480:17 - we have a second color which is equal to
480:20 - White okay so we'll use the color
480:23 - variable for the red rings and the
480:25 - second color variable for the white
480:26 - rings so now I'm going to go here and
480:29 - change each uh kind of second target
480:31 - drawing here to be the second color so
480:34 - we have color second color color Second
480:36 - Color you can see that we're constantly
480:38 - going smaller in size so what happens is
480:40 - we draw this very large Circle then on
480:43 - top of that Circle we draw one that is a
480:45 - little bit smaller then on top of that a
480:47 - little bit smaller on top of that a
480:49 - little bit smaller and what that does is
480:51 - overlap these different circles causing
480:53 - us to have this kind of ring shape in pi
480:56 - game the order in which you draw things
480:57 - is important when you draw something
480:59 - after something else it's going to go on
481:01 - top of that object or overlap it so
481:04 - that's why we're able to accomplish this
481:05 - here with these four draws okay that's
481:08 - fantastic so now we have our Target
481:10 - we've created that and what we need to
481:11 - do is start making these targets appear
481:13 - on the screen so how are we going to do
481:15 - that well we need to go into domain here
481:17 - and we need to create a variable called
481:20 - targets now this is where we're going to
481:22 - store all of the different targets then
481:24 - what we'll do is we'll Loop through all
481:26 - the targets we have we'll update their
481:28 - size and we'll draw them on the screen
481:30 - but every X seconds we need to kind of
481:33 - place a new Target onto the screen so to
481:35 - do this we're going to create what's
481:37 - known as a custom event now this event
481:40 - will essentially be triggered every 500
481:42 - milliseconds or 600 milliseconds or
481:44 - whatever we want we can then check for
481:46 - that event when that event occurs we can
481:48 - then make a new Target at a random
481:50 - position and add it inside of this array
481:53 - so let me show you how that works we're
481:55 - going to go to the top of our program
481:56 - and we're going to Define two variables
481:58 - here the first variable we're going to
481:59 - Define is the target uncore increment
482:04 - now this is going to be equal to 400
482:06 - milliseconds now you can change this if
482:08 - you make it uh slower or sorry if you
482:10 - make it less so like 300 200 it's going
482:13 - to be much harder if you make it larger
482:15 - it's going to be much easier cuz the the
482:16 - targets appear later so I've gone with
482:18 - 400 milliseconds you can adjust that as
482:20 - you want next I'm going to say Target
482:23 - event is equal to py game. user event
482:27 - and then I'm just going to Define
482:28 - another variable here which is the
482:30 - target padding which is essentially how
482:32 - many pixels I want this to be off the
482:34 - edge of the screen we'll just put this
482:36 - here for now and then we'll kind of look
482:37 - at that in a second but I'll set that to
482:39 - be 30 okay so we have a custom event
482:42 - which is the target event which is a
482:44 - pame do user event we then have the
482:46 - increment which is the number of
482:47 - milliseconds that we want to delay until
482:49 - we create another Target now that we've
482:51 - defined those variables we're going to
482:52 - start using them down here sorry I
482:54 - didn't mean to kind of scroll through
482:56 - that crazy so what I'm going to do is
482:58 - essentially create a timer so I'm going
483:00 - to say py game. time. setor timer and
483:05 - the timer that I want to trigger is the
483:07 - target event then I'm going to put the
483:10 - target increment now what this says is
483:12 - trigger this event every Target
483:15 - increment milliseconds so we're going to
483:17 - trigger the target event every 400
483:19 - milliseconds that's what we're doing
483:20 - okay so now that we have that timer what
483:23 - we'll do is we'll go inside of our event
483:24 - Loop here and we'll listen for that
483:26 - event and when that event occurs we'll
483:28 - make the target appear on the screen so
483:31 - I'm going to say if event. type is equal
483:33 - to and now we're going to use our custom
483:35 - event which is the target event so as
483:37 - soon as I see this occurring I want to
483:39 - create a new Target to create a new
483:41 - Target I need to randomly generate an X
483:43 - and Y position for it then create the
483:45 - Target and add that to my target array
483:47 - or my target list so I'm going to say x
483:50 - is equal to random. random integer and
483:53 - we're going to generate a random integer
483:55 - for X in the range of our Target padding
483:59 - and our width minus our Target padding
484:03 - now the reason I'm doing this is to
484:04 - ensure that my targets don't appear off
484:06 - the screen since we're drawing from the
484:08 - center position of our Target that means
484:10 - the radius of our Target will go to the
484:13 - right and it will go to the left so if I
484:15 - had a position like 10 10 so I'm drawing
484:18 - at X position 10 x position y but my
484:21 - target has a radius of 30 that means my
484:24 - target will really appear from kind of
484:27 - -20 here all the way to 30 right uh or
484:32 - sorry not 30 all the way to 40 because
484:35 - the radius is 30 so it's going to take
484:36 - up 30 pixels on each side of the X and Y
484:40 - coordinate hopefully that makes sense
484:42 - but if this is the center position then
484:43 - the radius kind of expands outwards so I
484:46 - need to make sure my Center position is
484:48 - such that when the radius is applied to
484:50 - my target it doesn't appear off the
484:52 - screen so that's why I have this target
484:53 - padding here I'm generating a random
484:56 - integer between the target padding and
484:57 - between the width minus the target
484:59 - padding to ensure the center position
485:01 - causes the target to not be off the
485:03 - screen now I'm going to do a similar
485:05 - thing for my y I'm going to say Y is
485:07 - equal to the random. randint and this
485:10 - will be again the target padding and
485:12 - then the height minus the target padding
485:16 - okay I'm then going to say Target is
485:19 - equal to Target and I'm going to pass my
485:21 - X and Y so I'm initializing a new
485:23 - instance of the target class then I'm
485:26 - going to say targets.
485:28 - append Target and what this will do is
485:31 - now push this new Target object into
485:33 - this list so then we can use it and loop
485:35 - through it great so now every X seconds
485:39 - every 400 milliseconds whatever we
485:40 - Define in the variable we will create a
485:42 - new Target what we need to do next is
485:44 - update all of our targets and draw them
485:46 - on the screen now what I like to do is
485:48 - put all of my drawing inside of a
485:50 - separate function so I'm going to write
485:51 - a new function here called Draw I'm
485:53 - going to take in a window object and I'm
485:55 - going to take in my targets now in pi
485:58 - game remember I told you that the order
486:00 - in which we draw things is important if
486:02 - we draw something over top of something
486:04 - else what that's going to do is overlap
486:06 - it so essentially what we need to do
486:07 - inside of this draw function is we need
486:09 - to clear the screen every single time we
486:12 - draw so we're going to wipe the entire
486:14 - screen clear by drawing something over
486:15 - top of it
486:16 - then we're going to draw all of our
486:18 - objects then we're going to update the
486:20 - display and we're going to do this every
486:22 - single frame so every frame we wipe what
486:24 - was on the screen previously then we
486:26 - draw onto it what we want to see next so
486:28 - it's kind of frame by frame rendering
486:30 - that's what we're doing here that's not
486:31 - how it works in every single system
486:34 - anyways what we do is we type win. blit
486:37 - uh sorry not blit do fill and then we
486:41 - can fill the window with a specific
486:42 - color now you can just write in a string
486:45 - the color you want so if want it to be
486:46 - yellow you can write yellow if you want
486:47 - it blue write blue but if you want a
486:49 - more specific color coding like what we
486:51 - have then you can use an RGB value so
486:54 - what I'm going to do is go to the top of
486:55 - my program and I'm going to say my BG
486:58 - color is equal to and then I'm going to
487:00 - specify the red green blue value that I
487:03 - want to draw so in this case it's going
487:04 - to be 0o 25 and 40 now if you're not
487:08 - familiar with how RGB works this is
487:09 - essentially three values in the range of
487:12 - 0 to
487:13 - 255 now all three of these values tell
487:15 - you the number of red green and blue so
487:18 - the first value zero means I want to
487:20 - have no red 25 means I want 25 uh green
487:24 - and then 40 means I want 40 blue and the
487:27 - maximum is 255 so as you kind of change
487:29 - these values you get different colors
487:32 - that's kind of how RGB Works in Python
487:34 - you define three values in a tuple and
487:36 - then you can use them inside of a
487:38 - function like this so I can pass my
487:40 - background color and now I'm going to
487:42 - fill the entire window with the
487:44 - background color next I'm going to Loop
487:46 - through all of my targets so I'm going
487:48 - to say for Target in targets then what
487:51 - I'm going to do is say target. draw and
487:55 - I'm going to pass this window object so
487:57 - if we go and we look at the draw
487:58 - function here you can see that it
488:00 - accepts the window so we just pass the
488:02 - window here Loop through all of the
488:04 - targets draw them all on the screen
488:06 - lastly we type py game.
488:09 - display. update now the display is only
488:12 - going to draw all of the things that
488:13 - we've kind of rendered up until this
488:15 - point when the update function is called
488:17 - so once we've drawn all of the targets
488:19 - and we filled the screen in then we will
488:20 - call update and we'll draw them onto the
488:23 - screen perfect that's the draw function
488:25 - so now we need to make sure we call the
488:26 - draw function so I'm going to go inside
488:28 - of my wall Loop and I'm going to call
488:30 - draw and then I need to pass my window
488:32 - in my targets so I'm going to pass win
488:35 - and targets like that now we're almost
488:37 - done at least with this step what we
488:39 - need to do next is we need to make sure
488:41 - that we update all of our targets before
488:43 - we draw them so I'm going to say four
488:46 - Target in targets and I'll simply call
488:50 - target.
488:52 - update okay so now what this will do is
488:54 - update all of the targets by updating
488:56 - them we're going to change their size
488:58 - right we're going to make them grow or
488:59 - Shrink depending on where they currently
489:01 - are in the animation now there's a few
489:02 - more things we need to do but for now
489:04 - let's run this and see what
489:06 - happens okay so actually just need to
489:09 - fix something there let's run and you
489:12 - see that the targets kind of appear very
489:14 - quickly on the screen now the reason
489:16 - they're going so quickly here is we
489:17 - haven't set what's known as the frame
489:19 - rate for our window so let's fix that
489:21 - then you should see that things get a
489:22 - little bit better okay so how do we fix
489:25 - the frame rate well inside of this W
489:27 - Loop here essentially what's going to
489:28 - happen right now is all of this stuff is
489:30 - just going to run as quickly as our
489:32 - computer can execute this wall Loop
489:34 - because it's kind of an infinite Loop
489:35 - right but what we can do is regulate the
489:37 - speed at which this runs by introducing
489:40 - a frame rate so to introduce a frame
489:42 - rate we're going to create a clock
489:43 - object we're going to say clock is equal
489:45 - to P game. time. clock we're then going
489:49 - to go inside of here and we're going to
489:51 - say clock. tick and we'll just put a 60
489:54 - inside of here now 60 means I want you
489:56 - to run this W loop at 60 frames per
489:59 - second meaning that no matter what
490:01 - computer we're on as long as it can run
490:03 - minimum 60 frames per second then we're
490:05 - going to run at 60 frames here so this
490:07 - tick just regulates the speed at which
490:10 - this W Loop runs which means this code
490:12 - should run at the same speed on your
490:13 - computer as it does on mine if we didn't
490:15 - have this we're running based on the
490:17 - processor speed which can vary
490:19 - drastically even just based on what
490:20 - you're doing on the computer okay so
490:22 - let's go ahead and run this now and we
490:24 - should see that now our targets are kind
490:26 - of appearing a little bit better right
490:27 - so they're growing they're shrinking yes
490:29 - some of them are overlapping that's fine
490:31 - we have an introduced Logic for that and
490:33 - they're appearing on the screen now what
490:35 - you'll notice is if we let this code run
490:37 - for a while it will start to get slower
490:39 - and slower now the reason it's going to
490:41 - get slower and slower is because we're
490:42 - not disposing of our targets once we put
490:45 - them uh or sorry once we shrink them
490:47 - down to a zero size right now what
490:49 - happens is this targets list just keeps
490:51 - getting larger and larger and larger and
490:53 - larger every time this event happens
490:55 - what we actually need to do now is we
490:57 - need to make sure we remove these
490:59 - targets as soon as they have a zero size
491:01 - so we start growing them and then as
491:03 - soon as they shrink all the way down to
491:05 - zero we want to get rid of them so our
491:07 - computer doesn't have to handle them
491:08 - anymore so how do we do that well the
491:11 - way we do that is the following we're
491:13 - going to say if the Target do size is
491:17 - less than or equal to zero then we want
491:20 - to remove this target from the target's
491:22 - list so we're going to say targets.
491:25 - remove and then Target now that's just
491:28 - going to get rid of it and take it out
491:30 - of this list meaning the next time we
491:31 - run this code we're not going to be
491:33 - iterating over it which means we won't
491:35 - kind of be doing all of these
491:36 - unnecessary operations on a Target
491:38 - that's currently invisible hopefully
491:40 - that makes a bit of sense why we're
491:41 - doing that but we just need to remove it
491:42 - as soon as it has a zero size now the
491:44 - reason we put this if statement here and
491:46 - not before the update is because we want
491:48 - to update it first which means if it
491:51 - currently had a size of zero cuz it
491:53 - starts out on zero size and it's growing
491:55 - then what will happen is it will get a
491:56 - size of 0.2 or 0.4 whatever the size
491:59 - ends up being meaning we don't remove it
492:01 - if we just added it inside of this array
492:04 - if I had put this if statement before
492:06 - then we would never see a Target
492:07 - appearing on the screen because as soon
492:09 - as it was added it would have a zero
492:10 - size and then we would remove it so
492:12 - since we're updating first that means if
492:14 - we just added the target it will be
492:16 - growing so it will have a larger size
492:18 - than zero so we won't we won't remove it
492:20 - Sor until its size shrinks back down to
492:22 - zero after it has already been displayed
492:25 - okay so let's run this now and you'll
492:27 - see that the code works the exact same
492:29 - now what happens though is as soon as
492:30 - the target reaches zero we remove it and
492:33 - we don't get any errors okay there we go
492:36 - so now our targets are appearing on the
492:38 - screen the next thing we should probably
492:39 - do is make it so that we can press on
492:41 - the targets so what we need to do is
492:43 - essentially get our Mouse position
492:44 - whenever we click
492:46 - see if that's colliding with the Target
492:48 - and if it is then we need to remove that
492:49 - Target and then increment some kind of
492:51 - variable indicating that we pressed on
492:52 - the target so how do we do that well the
492:55 - first thing that we're going to do here
492:56 - is just Define some variables related to
492:58 - kind of our analytics as we play this
493:00 - game so we're going to have a variable
493:02 - called Target pressed which is equal to
493:04 - zero we're then going to have the number
493:06 - of clicks that we've made in total which
493:08 - will be zero we then want to track our
493:10 - time so we're going to say the start
493:11 - time is equal to time.time you can find
493:15 - the time imported all the way up here
493:17 - okay so the reason I'm doing this I just
493:19 - want to say okay when did we start
493:21 - running this code and then what I can do
493:23 - is track how much time has elapsed since
493:26 - we started and that will give us the
493:28 - total duration of the round that we're
493:30 - currently in now I also want to have
493:32 - misses now misses essentially means that
493:34 - we missed a Target so it popped up on
493:36 - the screen and then it disappeared as
493:38 - soon as we have a certain number of
493:39 - Misses then we're going to end the game
493:41 - so that's kind of what we're tracking
493:42 - here and I think those are the only
493:43 - variables we need right now okay so now
493:46 - we have those let's go here and where we
493:48 - have if Target size is less than or
493:50 - equal to zero what we need to do is
493:52 - increment our misses by one so miss plus
493:55 - equals 1 because as soon as the target
493:56 - is removed because the size is equal to
493:59 - zero that means we didn't press on the
494:01 - Target and it appeared and disappeared
494:02 - and we didn't see it so we need to
494:04 - increment misses whereas if we collide
494:06 - with the target when we're pressing our
494:07 - Mouse on it then that means it was a
494:09 - successful click okay so now what I'm
494:11 - going to do is I'm going to write a
494:12 - variable called click and I'm going to
494:15 - make this equal to false what I'll now
494:17 - do is I'll look inside of my events I'll
494:19 - see if the user pressed the mouse down
494:21 - if they did then I want to set click
494:23 - equal to true so then we check if the
494:25 - current Mouse position has collided with
494:28 - the target so I'm going to say if event.
494:30 - type is equal to and this is going to be
494:34 - pame do event dot actually no it's going
494:38 - to be pame do mouse button down sorry
494:41 - that's the event there then we're going
494:43 - to say click equals true and we're going
494:45 - to say clicks plus equals 1 cuz we've
494:48 - pressed so we're going to increment the
494:49 - number of clicks that we have in total
494:51 - okay great so we've Now set click equal
494:53 - to True clicks plus equals 1 now we need
494:55 - to handle colliding with our targets now
494:58 - the way that I like to do this is just
494:59 - by writing a simple method on each of my
495:02 - targets or on my target class so I'm
495:04 - going to go here and say
495:07 - define collide and we're going to take
495:09 - in an X and Y position which will
495:13 - represent the mouse position that we
495:14 - want to see if if we've collided with
495:16 - this circle all right so performing
495:18 - Collision for our circle is fairly
495:19 - straightforward because we're just
495:21 - looking at the center coordinate of our
495:23 - Mouse position versus the center
495:24 - coordinate of our uh Circle position so
495:27 - what we can do is we can simply take the
495:30 - straight line distance from the two
495:32 - points and see if that distance is less
495:35 - than or equal to the radius of our
495:36 - Circle if that's the case then we've
495:38 - pressed on the circle I don't really
495:40 - know how to explain it much more than
495:41 - that but essentially if you have some
495:43 - kind of distance between your mouse
495:44 - position in the circle and it's less
495:46 - than or equal to the radius then you're
495:48 - within the circle if it's greater than
495:49 - the radius then you are outside of the
495:51 - circle there's other ways to reform this
495:53 - Collision but this is probably the
495:54 - easiest so how do we get this well what
495:56 - we need to do is use the distance to a
495:59 - point formula uh and that is going to be
496:01 - the following it's going to be self x
496:04 - minus X and then all of this is going to
496:06 - be raised to the exponent 2 we're then
496:10 - going to add that to the self.y minus
496:13 - the Y and we're going to raise that to
496:15 - the exponent 2 and we're going to take
496:17 - the square root of all of this we're
496:18 - going to say math.sqrt
496:21 - of all of that that's going to be the
496:23 - distance between the two points I'm
496:24 - going to double check this because it's
496:25 - been a long time since I've written this
496:27 - formula and then we are simply going to
496:29 - return if the distance is less than or
496:33 - equal to the size and this is going to
496:35 - be the self. size okay now the only
496:37 - thing you need to kind of follow when
496:38 - you're writing this formula is that
496:40 - whatever order you put the coordinates
496:42 - in you need to maintain that so in this
496:43 - case I'm using the coordinates of my
496:45 - circle first and then the coordinates of
496:47 - my mouse since I'm raising this to the
496:49 - exponent to it essentially gives me the
496:51 - absolute value of this first component
496:54 - then the same thing will happen here all
496:55 - I'm trying to say is I can't Swap this
496:57 - and do like y minus self.y if I wanted
497:00 - to do that I would have to swap the
497:01 - other coordinate as well and say xus
497:04 - self.x either order works you just have
497:06 - to maintain the same order when you do
497:08 - this we'll go in this order and you'll
497:10 - see this is fine okay so now we have
497:11 - this Collide function now that we have
497:13 - that we can start using it so notice
497:15 - we've kind of tracked if we clicked here
497:17 - so if we did click then we want to check
497:19 - if we're colliding with our different
497:20 - targets so I'm going to say if
497:23 - click and then we will say target.
497:28 - Collide and then we need to get our
497:29 - Mouse's position so up here I'm going to
497:31 - say the mouse uncore position is equal
497:34 - to
497:35 - pame mouse. getor pause and then what
497:41 - I'll do is pass that position so I'm
497:43 - actually going to pass an asteris and
497:45 - then the mouse pause now when you use an
497:47 - asterisk inside of a function arguments
497:50 - what this will do is break down the
497:52 - topple into its individual components so
497:55 - that might be confusing but Mouse
497:56 - position gives us the XY coordinate of
498:00 - the mouse in P game so since this is a
498:03 - tupple this is considered one object
498:05 - right like pause is equal to XY but you
498:07 - can see that inside of our function
498:11 - right we're taking X and Y we're not
498:13 - taking an a tupple
498:15 - that contains X and Y so what we need to
498:18 - do is break this tupple into its
498:19 - individual Elements by using the asteris
498:21 - so when I do this it essentially takes
498:23 - the first element passes that as one
498:24 - positional argument takes the second
498:26 - element passes that as another
498:27 - positional argument so it's equal or
498:30 - equivalent to me passing most position
498:31 - zero and most position one it's just a
498:34 - short hand for doing that okay so we're
498:36 - just going to use the asteris this is
498:37 - known as the Splat operator okay so if
498:40 - we have clicked and we are colliding
498:43 - with this target then make it disappear
498:45 - so to make it disappear we'll simply
498:46 - remove the Target and we'll increment
498:49 - the targets pressed by one okay so
498:51 - Target pressed plus equals 1 there you
498:54 - go that's all we need to do for handling
498:55 - our Collision so let's run this now and
498:58 - let's see if this works and we get an
499:01 - error what is the error here it says
499:05 - some issue let me just run this again
499:07 - with the terminal open for some reason
499:08 - my terminal keeps cutting off the
499:11 - errors uh it says int object has no
499:13 - attribute self a y do self okay so I can
499:17 - see why we got that error so let's go
499:18 - back and fix this I'm sure you guys
499:19 - probably caught that yourself it's not
499:21 - y. self it's
499:23 - self.y okay so now let's run this and
499:27 - see what happens when we press the
499:28 - targets and notice that they disappear
499:29 - meanwhile if I click outside the target
499:31 - it doesn't disappear because well we
499:33 - weren't within the bounce so now we've
499:35 - already kind of got the core logic
499:37 - working here for pressing the targets
499:39 - what we need to do next is really just
499:40 - display some of our statistics and then
499:42 - end the game and we'll be finished with
499:43 - this tutorial all right so what we're
499:45 - going to do now is we're going to draw
499:47 - kind of a top bar that will contain some
499:49 - of the statistics uh for our app or for
499:52 - our round or game or whatever you want
499:53 - to call it so the way we'll do that is
499:56 - we'll write a new function here called
499:59 - Define draw top bar now to draw this top
500:03 - bar we're going to take in the window
500:04 - and we need to take in some stats right
500:06 - some information that we want to display
500:08 - so what we'll take is the elapsed time
500:12 - we'll take the targets PR rest and we'll
500:16 - take the number of Misses that you
500:17 - currently have because what we'll do is
500:19 - we'll kind of track the number of lives
500:21 - remaining until we need to end the game
500:23 - right so that's the next thing we need
500:24 - to do as well if you've missed more than
500:26 - three targets well we need to end the
500:27 - game or however many lives we Define so
500:29 - let's actually Define that up here let's
500:31 - go and say lives is equal to and let's
500:34 - set our lives equal to three we can then
500:36 - just quickly write some code down here
500:39 - we can say if the misses is greater than
500:42 - or equal to the lives then what we we
500:45 - will do is we'll just say pass but
500:47 - really this is where we need to end the
500:49 - game okay so if the number of Misses we
500:50 - have the number of targets we have impr
500:52 - pressed is greater than or equal to the
500:53 - number of lives we have then we end the
500:56 - game we also could just subtract from
500:57 - the lives but I think this is fine uh as
500:59 - well okay then while we're at it we'll
501:02 - just call draw top bar and we'll pass in
501:05 - the information we need so we need the
501:06 - window we need the elapse time well to
501:09 - get the elapse time we'll create a
501:10 - variable so we'll say elapse time is
501:12 - equal to time.time minus start time so
501:16 - remember I was telling you if we have
501:18 - access to the start time then we can get
501:19 - the amount of time that's been elapsed
501:21 - by taking the current time and
501:22 - subtracting that from the start time
501:24 - that's all that's doing gives us current
501:25 - time minus the time we started this will
501:27 - give us the number of seconds that have
501:29 - elapsed so now we'll pass the elapse
501:32 - time variable we then will pass the
501:35 - targets pressed and then we'll pass the
501:37 - number of Misses that we had okay uh why
501:40 - is that kind of highlighting
501:43 - here all right not sure what that's
501:45 - giving us that weird error but
501:46 - regardless let's go here okay so now
501:49 - inside of this function we want to draw
501:51 - this top bar now this top bar is really
501:52 - just going to be a rectangle that has
501:53 - some text on it so let's draw a
501:55 - rectangle and then we'll draw the rest
501:57 - of the stuff we need so let's say pame
501:59 - do draw. rect now this how you draw a
502:01 - rectangle you use rect not rectangle
502:04 - then we're going to draw this on the
502:05 - window we need to choose the color we
502:07 - want so I'll just go with gray and then
502:09 - we need to pass a rectangle object now
502:12 - rectangle object is going to be the X
502:14 - and Y of the top leftand corner where we
502:17 - want to draw the rectangle and then the
502:18 - width and the height for that
502:20 - corresponding rectangle so we're going
502:22 - to draw this at 0 because we want it to
502:24 - take up the entire screen 0 0 by the way
502:26 - is going to be the top leftand corner of
502:29 - our P game window okay so we always
502:31 - start at 0 from the top left then we
502:34 - need to pass the width and the height
502:36 - well the width of our rectangle is going
502:37 - to be the width of the window so we'll
502:39 - just pass width and then the height is
502:42 - going to be some defined height that
502:44 - we're actually going to put in a
502:45 - variable so we'll go here and we'll say
502:47 - top bar height is equal to and we'll
502:51 - just go with a height of 50 we can use
502:53 - whatever height we want but I think 50
502:55 - is fine then I'm just going to pass my
502:57 - top bar height here and draw it there
503:00 - okay so now this will draw a rectangle
503:01 - onto the screen next what we need to do
503:03 - is draw a bunch of different kind of
503:06 - text objects on the screen that
503:07 - represent our different statistics so
503:10 - this is where it gets actually a little
503:11 - complicated but whenever we want to draw
503:13 - text in pi game we need to create a font
503:16 - object and then render an instance of
503:18 - that font so what we'll do is go to the
503:20 - top of our program and we'll say our
503:21 - label font is equal to py game. font. Sy
503:27 - font and then we need to pass a font so
503:30 - in this case I'll go with comic Sands
503:32 - you can pick any font you want uh that's
503:34 - supported by pame but I just recommend
503:35 - going with this and then you choose the
503:37 - font size in this case I want to go with
503:39 - 24 now you can see there's some other uh
503:41 - kind of things you can do here too like
503:43 - you can pass if it is bold it's metallic
503:45 - Etc in our case we'll just go with the
503:46 - standard comic Sands of size
503:49 - 24 okay so now we need to render this
503:52 - font so the process is create the font
503:54 - object then you render an instance of
503:56 - the font then you draw that onto the
503:58 - screen so the first thing we'll draw is
503:59 - our time so we're going to say the
504:02 - _
504:04 - Lael is equal to and this will be our
504:06 - label font. render now what you do in
504:09 - the render is you pass a string of the
504:12 - text you want to render you pass one for
504:14 - anti-aliasing don't worry about that
504:16 - just pass one and then for the color you
504:18 - pass the color that you want it to be in
504:19 - this case we can draw it in Black now
504:22 - for the text that we want to draw here
504:23 - essentially we want to take our time
504:25 - which is in seconds and we want to
504:27 - convert it into minutes seconds and then
504:29 - milliseconds so the way I'm going to do
504:31 - that is I'm just going to write a
504:32 - function called formator time now format
504:35 - time is going to take in the number of
504:37 - seconds that we have and it's going to
504:38 - return to us a string that contains a
504:40 - number of milliseconds seconds and
504:41 - minutes in a nicely formatted kind of
504:43 - thing okay so we're going to say Millie
504:45 - for milliseconds is equal to math. floor
504:49 - which will round something down inside
504:51 - of here we're going to take the int of
504:54 - our
504:55 - seconds
504:57 - multiplied by
504:59 - 1,00
505:01 - modulus 1,000 divided by 100 now what
505:06 - this will do is just give us the number
505:07 - of millisecs um that we want to be
505:10 - displaying okay I know this seems a
505:11 - little bit weird I'm not really going to
505:12 - explain it too much you can try to kind
505:14 - of break it down yourself it just gives
505:15 - us the number of milliseconds from the
505:17 - seconds which will contain a bunch of
505:19 - decimal places then we're going to have
505:21 - seconds now seconds is going to be equal
505:23 - to the
505:24 - int of the rounded seconds mod 60 and
505:30 - we're going to round this to the first
505:31 - decimal
505:32 - place okay what we're doing is we're
505:35 - taking the number of seconds we're
505:36 - modding it by 60 that'll give us the
505:37 - number of seconds that we have and then
505:39 - we will handle the number of minutes
505:41 - here by doing an integer division so I'm
505:42 - going to say minutes is equal to int and
505:46 - then this is seconds integer ID 60 we
505:48 - need the mod here to make sure we don't
505:50 - get something like 70 seconds or 90
505:52 - seconds because that's going to be
505:53 - handled by our minutes okay so now
505:57 - actually sorry this shouldn't be seconds
505:58 - this should be sex like this because we
506:00 - need to use the same value all right now
506:03 - that we have that we're going to return
506:04 - a string I'm going to return an F string
506:07 - which is new in Python 3 I believe s and
506:09 - above or maybe 3.6 and above anyways
506:12 - inside of the F string you can use these
506:14 - curly braces to embed variables so I'm
506:17 - going to say minutes colon 02d now this
506:20 - 02d means I want to pad this number such
506:23 - that it always has two digits and if it
506:25 - doesn't have two digits start it with
506:27 - zero so this will format it such that
506:28 - you get like 0 1 02 03 or 0 0 if we have
506:32 - no minutes which is kind of what we want
506:34 - then we're going to do seconds we're
506:35 - going to do the same thing 02d and this
506:37 - is also why I need to convert these into
506:39 - ins because this only works when you
506:40 - have an INT type as opposed to a float
506:42 - type okay so we have our 02 02d for the
506:45 - formatting and then we will just put our
506:47 - milliseconds here like that which I
506:49 - actually already formatted for us and we
506:51 - can put that with a DOT we can do a DOT
506:54 - or we can do a callon up to you I'm
506:55 - going to go with a DOT okay so format
506:57 - time will give us a nicely formatted
506:59 - time string so now inside of our label
507:01 - font we're going to put an F string
507:03 - we're going to put time
507:05 - colon then we're going to call format
507:07 - time with the elapse time so that will
507:09 - give us the string that we want to
507:11 - display inside of here after we have
507:13 - time okay okay now that we have this
507:15 - time label we want to display this on
507:16 - the screen to do that I'm going to say
507:19 - window. blit blit is how you display
507:21 - another surface in this case I want to
507:23 - display the time label surface which
507:25 - we've just created I'm going to put what
507:26 - I want to display which is time label
507:29 - then I'm going to put the XY coordinate
507:32 - of the top left hand corner of the
507:34 - object I want to display so I'm going to
507:36 - go with 55 which means the top leftand
507:39 - corner of this time label will be at 55
507:41 - and we will draw downwards and to the
507:43 - right from there to draw our text okay
507:47 - so I think that's all we need now uh
507:50 - what I'm just going to do is I'm going
507:51 - to take this py game. display. update
507:55 - out of my draw function and I'm going to
507:57 - put that inside of here all right so I'm
508:00 - going to kind of put that down here and
508:02 - what's the issue here it says targets
508:04 - pressed is not defined did I not have
508:06 - that defined targets press okay and then
508:10 - let's go here to The Click targets
508:14 - pressed plus equals 1 okay so I just
508:15 - need to fix that variable name apologize
508:18 - put that I have my display now outside
508:20 - of these two functions so we're
508:21 - displaying afterwards and now if we run
508:24 - the code we should see we get our time
508:26 - displaying up here nicely so notice
508:27 - since I drew at 5 five it's five pixels
508:29 - down five from the left that's kind of
508:31 - what we're seeing okay so now that we
508:34 - have the time we want to display some
508:35 - other information like the number of
508:37 - Misses number of lives Etc that we have
508:39 - remaining so let's go here and do the
508:41 - rest so the next one I want to do is the
508:43 - speed
508:45 - now your speed is simply equal to the
508:47 - number of targets you've pressed based
508:49 - on the current time so like the targets
508:51 - per second so the way we do that is we
508:53 - take the targets that you've pressed and
508:54 - we divide that by the elapse time so I'm
508:57 - going to use my round function I'm going
508:59 - to take targets press and divide that by
509:01 - a lapse time and I'm going to round this
509:03 - to the first decimal place so we get
509:04 - something like 2.1 or 1.1 or something
509:07 - along those lines now that we have the
509:09 - speed we'll create our speed
509:11 - label right which can be equal to the
509:14 - label font. render and then we can go
509:17 - here with an F string and we can say
509:19 - speed colon speed and then I'll put a
509:22 - t/s standing for targets per second I'm
509:25 - then need to put my one for the anti-
509:26 - yellow thing to be true and then black
509:28 - and then we can draw this on the screen
509:30 - so we'll take this paste this down here
509:32 - change this to our speed label and then
509:34 - we're just going to set the x coordinate
509:36 - we want to draw this at so I want the
509:38 - y-coordinate to be the same but the X I
509:39 - need to space this out from my time
509:41 - label so I'll just set this to be 200 so
509:43 - it goes a bit further to the right now
509:45 - let's do the rest of our labels so let's
509:46 - copy this so next we'll have the hits
509:49 - label this is the number of targets that
509:50 - we've currently pressed so we'll say
509:53 - hits and this will be targets pressed
509:57 - get rid of the
509:58 - t/s and then we'll blit that one so copy
510:01 - this and then draw the hits label rather
510:04 - than 200 this time we can go with
510:06 - something like
510:07 - 450 and then lastly we need to display
510:10 - the number of lives we have remaining so
510:12 - we'll say lives lab is equal to and then
510:15 - I really should just copy this so let's
510:17 - copy that there and we'll say lives is
510:20 - equal to the total number of lives minus
510:24 - the number of Misses that we currently
510:25 - have okay then we'll draw this one with
510:29 - the lives label and we'll draw this at
510:33 - 650 okay so I think that's going to be
510:36 - good for the top bar let's run this now
510:39 - and you should see that as we press
510:40 - targets we start updating our different
510:42 - stats however you'll notice that some of
510:43 - our targets are appearing at the top bar
510:45 - I'm going to show you how we fix that in
510:46 - one second and you can see our lives are
510:48 - subtracting kind of as we miss the
510:50 - targets okay so why are they appearing
510:52 - in the top bar well the reason they're
510:54 - appearing in the top bar is because we
510:55 - haven't padded where we want to render
510:57 - the targets based on the position of the
510:59 - top bar so what we'll need to do now is
511:02 - go to where we have the randomly
511:04 - generated positions and for our x
511:06 - coordinate we'll just say our Target
511:08 - padding plus the top bar height just to
511:11 - make sure the minimum y-coordinate is
511:13 - always going to be beneath that top bar
511:16 - so now that we've done that if we run
511:18 - this we should see that none of our
511:19 - targets will be rendered in that top bar
511:21 - anymore they can be close to it but
511:23 - they're always going to be bordering it
511:24 - they'll never be kind of beneath it
511:25 - meaning we're not going to miss them now
511:27 - obviously I'm performing quite poorly
511:28 - here because well I'm under pressure and
511:31 - I'm on the video I'm sure you guys will
511:33 - be doing better than me okay almost done
511:35 - here last thing we need to do is simply
511:38 - end the game once the user uh has no
511:40 - more lives so how do we do that well to
511:43 - end the game we are simply going to call
511:45 - a function that will display the user
511:47 - stats so very similar to drawing the top
511:49 - bar we're going to draw a bunch of stats
511:52 - onto the screen so I'm going to write
511:54 - another function called n screen now
511:57 - this is the last function we need and
511:59 - inside of n screen we're going to take
512:00 - win the elapse time the targetscore
512:05 - pressed and the number of clicks that
512:07 - you had that we can calculate what the
512:09 - accuracy is now what we'll do in here is
512:11 - we'll essentially kind of pause the
512:14 - execution of our code and we will render
512:16 - something onto the screen that displays
512:18 - the stats and then as soon as the user
512:20 - presses a button we'll just end the game
512:21 - okay so what I'm going to do is say win
512:24 - sorry win. blit and then we're going to
512:27 - blit the background color so that we
512:28 - clear whatever was currently on the
512:30 - screen because what I want to do is just
512:31 - have some text that appears in the
512:33 - middle of the screen so what we'll now
512:35 - do is we'll copy kind of all of the text
512:37 - we had from here and we'll paste this in
512:40 - but now I only want to display a few
512:42 - things so I don't need to display the
512:43 - lives anymore I can display the hits but
512:47 - I also want to display the accuracy okay
512:49 - so accuracy I don't know if I spelled
512:51 - that correctly and then I'm going to
512:53 - define the accuracy here so for the
512:55 - accuracy this is simply going to be
512:57 - equal to the number of targets we've
512:59 - pressed divided by the number of clicks
513:00 - that we had so I'm going to say
513:03 - round the targets pressed divided by the
513:06 - clicks multiplied by 100 we'll round
513:10 - that uh actually do we even need to
513:12 - round this yeah we'll round that to one
513:14 - decimal place okay so this is going to
513:16 - be the accuracy that we have so now
513:17 - we'll just change this text to be
513:19 - accuracy and then we'll display the
513:22 - accuracy and then percent now what I'll
513:25 - do is I'll take these different labels
513:27 - and I'll just render them in a slightly
513:28 - different position on the screen so that
513:30 - it uh is in the center right cuz here
513:32 - we're displaying them on the top bar now
513:34 - we want to display them in the middle of
513:35 - the screen so to display them in the
513:37 - middle of the screen I'll actually copy
513:38 - this rather than the lives label now
513:41 - have the accuracy label and we just need
513:43 - to change these here so that we're
513:45 - rendering in the middle of the screen
513:47 - now the way we render in the middle of
513:48 - the screen when we're using a label is
513:50 - we need to take the middle coordinate of
513:52 - the screen okay so it's a bit difficult
513:54 - to explain this uh visually or without
513:57 - having visual so let's actually go into
513:58 - paint quickly here let's imagine we have
514:01 - a screen okay if we want to display
514:03 - something in the middle of the screen
514:05 - like this the natural thing to do would
514:06 - be okay well let me just find kind of
514:08 - this middle X position and then start
514:10 - drawing here well that works if you have
514:12 - something like a circle where you're
514:13 - drawing in the middle of the circle but
514:14 - in our case we're drawing from the top
514:16 - leftand Corner which means if we draw
514:18 - something from the middle coordinate we
514:20 - end up drawing it to the right and down
514:23 - so what we actually need to do is draw
514:25 - from the middle so let's say this is X
514:27 - over 2 minus the width of the object
514:31 - we're drawing minus two or sorry not
514:34 - minus two over two so if you take the
514:35 - width of the object over two which is
514:37 - this right here and you now move back by
514:39 - that to here then you start drawing the
514:43 - object in the middle of the screen
514:44 - hopefully that makes a bit of sense what
514:46 - I just explained we're going to take the
514:48 - kind of width of the entire screen
514:50 - divide that by two then subtract that by
514:53 - the width of the object that we're
514:54 - drawing over two that will then give us
514:56 - the EXP position where we need to draw
514:58 - the top left hand corner such that the
515:00 - object will be in the middle so let's
515:02 - get rid of that and let's make a
515:03 - function that calculates that for us so
515:06 - we'll say Define get middle this is
515:08 - going to take in a
515:11 - surface okay and what this is going to
515:13 - return
515:14 - turn is that middle position so we're
515:16 - going to say width over two minus the
515:18 - surface. getor
515:20 - width over two so now we can use this
515:23 - function on our different labels to
515:25 - determine what x coordinate we should
515:26 - draw them at so we're going to say for
515:29 - the time label well we want to draw this
515:31 - at get middle of the time label then for
515:36 - the speed this is going to be get middle
515:38 - of the speed label and then for the hits
515:41 - this is going to be get middle of the
515:43 - hits label and then for the accuracy get
515:46 - middle of the accuracy
515:50 - label okay so that should be good and
515:52 - that should draw everything on the
515:53 - screen however what I want to do is have
515:55 - it so it kind of pauses until the user
515:57 - presses something so what I'm going to
515:59 - do here is I'm going to manually update
516:00 - the screen so py game. display. update
516:03 - I'm then going to run a while loop in
516:05 - here that will wait for the user to
516:06 - press something once they press
516:07 - something it will then close the screen
516:09 - so I'm going to say run equals true I'm
516:11 - going to say while run I'm going to say
516:13 - for event in pame do event. getet I'm
516:19 - going to say if event. type is equal to
516:23 - pame Dot and all capitals quit then I am
516:28 - simply going to say quit like that
516:31 - otherwise I'm going to say if event.
516:34 - type is equal to pame and this will be
516:39 - Dot and we'll go with key down so this
516:42 - just means if we press any key down then
516:44 - I'm going to say run equals false and I
516:47 - will break out of this Loop now what
516:49 - this quit function will do is just
516:51 - completely quit the Python program for
516:52 - us and then what this will do is kind of
516:54 - just exit the loop which will then cause
516:56 - us to get out now what I could actually
516:57 - do is just put quit here as well or I
516:59 - could make this even a little bit more
517:00 - elegant and I could copy this all and
517:04 - say or it equals this and now we just
517:08 - have that in one line so we really just
517:09 - have this one wall Loop this just kind
517:11 - of running forever and just waiting for
517:12 - us to press and any key or to click quit
517:14 - as soon as we do that we just close the
517:16 - window okay so now all we need to do is
517:18 - call this end screen function as soon as
517:20 - we uh kind of lose the game so we'll go
517:22 - here and rather than pass we'll call end
517:24 - screen and we'll pass this the
517:26 - information we need so we need the
517:29 - window what else do we need the elapse
517:31 - time the targets
517:34 - pressed so targets pressed and the
517:37 - number of clicks okay so now we should
517:41 - be fully finished our program let's run
517:44 - this and make sure it works and let's
517:46 - just see what happens now if we kind of
517:48 - click a few of the things here and then
517:50 - we kind of let some of our Lives run out
517:53 - okay two one and we got an error let's
517:56 - see what that error
517:58 - is uh was it an error or did it just
518:02 - quit
518:04 - immediately let's see here give this a
518:09 - second okay argument one must be pame
518:11 - surface not tupple uh wind up blit ah
518:15 - okay sorry about that guys let's go fix
518:18 - this now go in end screen and rather
518:19 - than wind up blit this is going to be
518:21 - win do fill so we need to fill with the
518:25 - background color not blit with it that's
518:27 - my bad let's give this another shot here
518:29 - click a few
518:33 - targets
518:34 - okay and now let's
518:36 - lose so two lives one live and it shows
518:40 - our information however it's showing it
518:42 - all on one single line that's because we
518:44 - didn't change the Y positions so let's
518:46 - make these like
518:49 - 100 200 300 and 400 and while we're at
518:54 - it let's change the color here to be
518:56 - white because black is a little bit of
518:58 - an eyesore there on the blue background
519:00 - so let's change these all to be white
519:03 - and white and let's run this and now
519:07 - let's just run a few targets or click a
519:08 - few targets and kind of let this lose
519:11 - and see if it displays correctly for us
519:14 - all right so there you go we got our
519:15 - time our speed our hits and our accuracy
519:18 - and we have finished this project in
519:20 - this video I will be teaching you some
519:22 - valuable python scripting skills by
519:24 - running you through a complete project
519:27 - specifically I be showing you how to
519:28 - deal with command line arguments how you
519:31 - can copy different files or directories
519:33 - search for different files or
519:35 - directories use modules like OS Sy
519:38 - subprocess and a bunch of other modules
519:40 - that are very helpful when you're trying
519:42 - to create python scripts that can
519:44 - automate workflows and just make your
519:46 - life easier personally just knowing a
519:48 - few of these commands has helped me and
519:50 - Sav me countless hours in different
519:52 - development projects and the project
519:54 - that I'm actually working on here with
519:55 - you is kind of a variation of something
519:58 - I actually had to do when I was working
520:00 - for my startup and creating kind of an
520:02 - advanced script that had to go through
520:03 - and automatically compile a bunch of
520:05 - code for me anyways thank you guys will
520:07 - find some great value in this so with
520:09 - that said let's get into the video all
520:10 - right so let me start by walking you
520:12 - through the project that we we're going
520:13 - to complete now this is a project that
520:15 - kind of mocks what you would be doing in
520:17 - a real world scenario obviously I don't
520:19 - know what you guys need to automate or
520:21 - what scripts you need to write so I've
520:23 - tried to create something that's very
520:24 - general that allows you to get a bunch
520:26 - of knowledge in a ton of different areas
520:28 - so this may not cover everything you
520:30 - need to do but it will give you a ton of
520:32 - that base knowledge and show you what's
520:33 - possible with python scripting and how
520:36 - you can kind of set up these scripts to
520:37 - be as effective as possible and what
520:40 - commands you should be using for a lot
520:41 - of the common operations so let's have a
520:43 - look at it here first thing that I want
520:45 - to look at is just the directory I have
520:46 - on the left side of my screen now you
520:48 - guys can download This by going to my
520:50 - GitHub uh I will leave a link in the
520:52 - description of course and just clone the
520:54 - repository download the repository and
520:56 - get access to this data directory here
520:59 - now this data directory is going to kind
521:01 - of simulate kind of a large project some
521:04 - code or some files that you would
521:05 - already have and that you want to
521:07 - Traverse through and do something
521:09 - specifically with now that's usually
521:11 - what automation is or scripting is for
521:12 - me in Python it's going through some
521:14 - existing data or an existing file
521:16 - structure and kind of parsing things out
521:18 - grabbing specific data looking for
521:21 - certain names or writing code into
521:23 - different files so I've tried to kind of
521:24 - emulate that here so you can see we have
521:26 - this data directory here and inside of
521:28 - here I have a bunch of stuff right I
521:30 - have some empty directories I have some
521:32 - directories that are representing kind
521:34 - of games that would be written in go I
521:36 - have some random python files they're
521:38 - just empty just for example purposes I
521:40 - have a text file I have another kind of
521:42 - go file here and you can see that
521:44 - there's a bunch of stuff in this
521:45 - directory now what we're interested in
521:47 - here for this kind of mock project is
521:49 - parsing out all of the game directories
521:52 - so what we want to do is want to take
521:54 - all of the games that are inside of this
521:56 - directory we want to copy these into a
521:58 - new directory we want to change the
522:00 - names of the directory such that we
522:02 - don't have this game kind of suffix on
522:05 - them and then we want to compile all of
522:07 - the game code that exists inside of
522:10 - these game directories now this is
522:12 - something I actually had to do when I
522:13 - was working for my startup as I
522:15 - mentioned in the intro so I've kind of
522:16 - put a variation on it here now to go
522:19 - even a step further once we get all of
522:21 - this game data we parse it out we put it
522:23 - into a new directory and we compile all
522:25 - of the code I want to write a Json file
522:28 - into that directory that gives us some
522:30 - metadata or information about what we
522:32 - just did so how many games are there
522:34 - what are the name of our game
522:35 - directories Etc and that's something
522:37 - that we could kind of quickly look at to
522:38 - get a summary of the information so you
522:40 - could imagine this would be something
522:42 - similar to what you may want to do when
522:44 - you are writing your own Python scripts
522:46 - okay so I have uh kind of the project
522:48 - text here excuse any spelling mistakes
522:50 - that are in this file but I just wanted
522:52 - to walk you through very organized step
522:53 - by step what we're going to be doing
522:55 - some so some assumptions here sorry uh
522:57 - the data directory contains many files
522:59 - and directories so imagine this is
523:01 - massive right there's a ton of different
523:02 - code in here and it's not feasible for
523:04 - us to do this manually we want to have a
523:06 - script that automatically does it for us
523:08 - obviously that's not really the case
523:09 - here but again kind of picture that we
523:11 - had you know thousands of files in that
523:13 - case it would be very helpful to have a
523:15 - script to help us do this you are only
523:17 - interested in the games contained in
523:18 - this directory so you don't care about
523:20 - the rest of the junk in there you just
523:22 - want the games which are going to be
523:24 - stored in a directory that contains the
523:27 - word games so whenever we see the word
523:29 - game and that's in the directory name
523:31 - that we know that we're interested in
523:32 - that directory next each game directory
523:35 - contains a single Doo file that must be
523:38 - compiled before it can be run okay
523:40 - perfect that makes sense and these go
523:42 - files could be named different things
523:44 - notice one is called main one is called
523:46 - code one is called file so we're going
523:48 - to have to do um kind of special stuff
523:50 - to handle these different names and
523:53 - compile all of this code okay so now
523:55 - what are we going to do for this project
523:56 - well we're going to find all of the game
523:58 - directories from the data directory
524:00 - we're going to create a new slash games
524:02 - directory or whatever we want to call it
524:04 - that's going to contain all of our game
524:06 - code we're going to copy and remove the
524:08 - game suffix of all of the games into the
524:11 - games directory so that means copy the
524:13 - directory strip off that kind of game
524:16 - aspect of it put it into the new
524:17 - directory we're going to create a Json
524:19 - file with the information about the
524:21 - games so how many games what the game
524:23 - names are Etc we're going to compile all
524:25 - of the game code and then run all of the
524:28 - game code now we may not actually run it
524:30 - here but we will at minimum go to the
524:32 - compile step perfect so the only thing
524:35 - we need to do here to get started is
524:37 - make sure we have python installed I'm
524:39 - going to be using python 3.9 I believe
524:41 - but I think anything above 3.8 should
524:43 - work and if you want to be able to
524:45 - compile and run this go code then what
524:48 - I'm going to suggest to you is that you
524:49 - download a go um interpreter or compiler
524:53 - so let me just bring this up here go
524:55 - code I'll leave this link in the
524:57 - description as well but if you go to go
524:59 - dodev pretty simple URL click download
525:01 - it will download and install go it will
525:04 - automatically add it to your path then
525:05 - you'll have access to the go command
525:07 - that we'll be using later in the video
525:10 - last thing if you want there's some
525:11 - helpful extensions here here in VSS code
525:13 - if you're using VSS code you probably
525:15 - want to install the python extension and
525:17 - the go extension as well okay so now
525:20 - that we've got through that let's start
525:22 - writing our code so I have a python file
525:24 - here called get game data you can call
525:26 - this whatever you've want and notice
525:28 - I've put this in the same directory as
525:30 - where my data directory is now you don't
525:33 - need to do that but it is going to be
525:34 - helpful to have it kind of close to the
525:36 - data directory so you know the path to
525:38 - where that is so again if you want go to
525:40 - the GitHub I'll leave that link in the
525:42 - description
525:43 - download this code it will have the
525:45 - finished code as well but you can just
525:46 - kind of delete the file and write it
525:48 - along with me if you want and then
525:49 - you'll have this data directory so you
525:51 - don't have to kind of create this on
525:52 - your own so you want to work in a python
525:54 - file that is in the same directory as
525:56 - the data directory now the first thing
525:58 - we're going to do here is just import a
525:59 - bunch of modules that we're going to be
526:01 - using so we're going to import the OS
526:03 - module which I believe stands for
526:04 - operating system we're going to import
526:07 - Json which is how we're going to work
526:09 - with Json files we're going to import
526:11 - shtil pill uh which is going to allow us
526:14 - to kind of do some copy and overwrite
526:17 - operations we're going to say from
526:20 - subprocess import and we're going to
526:23 - import pipe and run now this is going to
526:26 - allow us to run really any terminal
526:28 - command that we want so we can for
526:30 - example compile and run the go code
526:32 - using this and then we are going to
526:34 - import Sy which we are going to use to
526:37 - get access to the command line arguments
526:39 - so the very first thing I want to start
526:41 - by doing here if we go back to our
526:42 - project text is we want to find all of
526:45 - the game directories from some directory
526:47 - in this case is called SL data we want
526:49 - to create a new directory some kind of
526:50 - Target directory where we're going to be
526:52 - copying this into so what I want to do
526:54 - is I want to grab from commandline
526:57 - arguments what the source directory and
527:00 - the target directory is relative to the
527:03 - current path so that I know where I
527:05 - should be storing kind of all of the
527:06 - games that I find and where I should be
527:08 - looking for those games to make this
527:09 - script a bit Dynamic so what is a
527:12 - command line argument well let me just
527:13 - show you down here in the terminal so a
527:15 - command line argument is something like
527:16 - python I pass my uh file name so get
527:19 - game data and then I do something like
527:21 - Hello World okay so hello and world are
527:24 - command line arguments you've seen this
527:26 - before whenever you've ran any commands
527:28 - like when you make a folder MK dur and
527:29 - then you put the folder name the folder
527:31 - name is a command line argument so in
527:33 - this case we might do something like
527:34 - python get game data then we pass slash
527:37 - dat which is going to be our source
527:39 - directory and then we pass something
527:41 - like Slash new games or something like
527:43 - that and that's our output or Target
527:45 - directory so I want to show you how we
527:47 - can parse out those command line
527:48 - arguments so to do that we're going to
527:50 - use the system uh module so first I'm
527:53 - going to say if uncore name is equal
527:56 - toore
527:57 - main then in here I'm going to grab the
528:00 - uh command line arguments now the reason
528:02 - I'm using this is because I only want to
528:05 - execute the main script here if I'm
528:08 - running this python file directory uh
528:10 - directly sorry if I'm not Direct
528:12 - directly running this python file I
528:14 - don't want to be executing the code
528:16 - that's going to run through and do all
528:17 - of our operations uh otherwise if we
528:20 - tried to import the python file and we
528:22 - didn't have this line it would go ahead
528:24 - and run all of that code when we don't
528:25 - want that to happen so when you have
528:27 - this here this just checks that you ran
528:29 - the file directly and it won't execute
528:32 - anything in here if you were importing
528:34 - say a function or class or something
528:35 - from this file hopefully that makes
528:37 - sense what I'll do here is say args is
528:39 - equal to sy. argv okay now just to show
528:43 - you how this works we'll print out args
528:46 - and let's run our code so I'm going to
528:47 - say python get game data data new data
528:51 - okay hit enter and notice that my
528:52 - command line arguments are first of all
528:55 - the name of the Python file and then I
528:57 - have my two command line arguments so
528:59 - data and new data that I passed here now
529:02 - if you are on Mac you will probably need
529:04 - to run Python 3 get game data okay so
529:07 - now that we have our arguments I want to
529:09 - make sure that we have a valid number of
529:11 - arguments which in this case is going to
529:13 - be three three because we have the file
529:15 - name and then we have the two extra
529:17 - arguments and we want to make sure we
529:18 - have those two extra arguments so I'm
529:20 - going to go here and say if the
529:23 - Len of
529:25 - args does not equal three then I will
529:28 - raise an exception and here I will say
529:31 - You must pass a
529:34 - source and Target
529:38 - directory only okay so that's fine so
529:42 - now if we run our code here and I only
529:45 - pass for example The Source directory
529:47 - then notice that I get my exception if I
529:49 - pass my target as well then all is good
529:53 - okay so now I want to get my um source
529:56 - and Target directory so I'm going to say
530:00 - Source Target is equal to sy. argv and
530:05 - then I'm going to do one like this
530:06 - and actually we can put this as args now
530:09 - the reason I'm doing one is just to
530:10 - strip off the name of our python file
530:13 - which we don't want and just get the two
530:15 - arguments here and then store them in
530:17 - separate variables okay now that we've
530:19 - done that I'm going to create a function
530:21 - and this main function is going to
530:23 - accept our source okay and our Target
530:28 - and I don't know if that's actually the
530:30 - right thing that we want to call it um
530:33 - yeah I guess that makes sense source is
530:35 - where we're looking Target is where we
530:36 - want to put our new directory so that's
530:38 - fine we can leave it like that and then
530:39 - here we'll go and call the Main
530:42 - passing our source and Target directory
530:45 - names perfect now that we've done that
530:48 - what we actually need to do here before
530:50 - we go any further is we need to create a
530:52 - complete path from the location where
530:55 - we're running our python file to
530:57 - whatever this directory is so in the
531:00 - case where I pass you know data or
531:02 - Target well I want to get the full
531:05 - qualified path from say like my C drive
531:08 - all the way to this directory so that
531:10 - it's going to work in my program if I if
531:12 - I just try to use data or I just try to
531:13 - use Target uh we can get some weird
531:15 - errors depending on what operating
531:17 - system we're running on so what I'm
531:18 - going to do here is say my source _
531:20 - paath is equal to os. path. jooy and the
531:25 - first thing we need here is the current
531:27 - working directory which I can get by
531:29 - using the command I got to check my she
531:31 - cheat sheet here because I always forget
531:33 - os. getet
531:35 - CWD okay so I'm going to join the path
531:38 - of CWD and my source directory now now
531:42 - you should always use os. path. jooin
531:45 - when you're trying to create paths don't
531:47 - think you're going to be clever here and
531:48 - have a path like you know C drive colon
531:51 - SL slash and then you add like you're
531:53 - doing a string concatenation don't do
531:56 - that the reason you should not do a
531:57 - string concatenation is because if
531:59 - you're working on different operating
532:00 - systems the path dividers are different
532:03 - when you use os. path. jooy it
532:05 - automatically will join the path based
532:08 - on the operating system you're working
532:09 - on so you always want to use this don't
532:11 - do string concatenations uh to try to
532:13 - create paths it might work sometimes but
532:16 - it's not kind of a good practice to do
532:17 - that okay so we've created our source
532:19 - path now just with to explain this line
532:21 - here CWD is our current working
532:23 - directory which means the directory we
532:25 - ran this python file from so wherever we
532:28 - ran this python file from uh that's the
532:30 - working directory so in this case it's
532:32 - going to be users Tim desktop python
532:34 - scripting then whatever these paths are
532:37 - are going to be relative to that working
532:39 - directory so I combine them together
532:41 - right so now directory will be this and
532:44 - then it will have my source which would
532:46 - be data right and the next one will be
532:48 - my target okay so let's copy this and
532:51 - make this Target and change this here to
532:54 - be Target okay so now we have our source
532:57 - path and our Target path now what do I
533:00 - need to do next here well I need to find
533:02 - all of the game directories from my
533:04 - source directory so let's write a
533:07 - function that can do that we'll say find
533:10 - all game d like like that we need to
533:12 - know where to look so we go Source okay
533:16 - now I'm going to create a variable up
533:17 - here and this is going to specify what
533:19 - we're looking for in our directory so
533:22 - like what needs to be in their name so
533:24 - in this case I'm going to say game dir
533:28 - pattern is equal to and we'll just call
533:31 - this game which essentially means we're
533:33 - going to look for the string game in any
533:35 - directories uh and that will tell us
533:37 - that we want that directory right now
533:40 - what we're going to do is we're going to
533:41 - to essentially walk through the source
533:44 - directory look at all the files and
533:46 - directories and then match any
533:48 - directories that have this game in them
533:50 - um and if we have that then we'll add
533:52 - them to a list we'll return them Etc
533:54 - okay so let's do this I'm going to say
533:56 - my gamecore paths is equal to and this
533:59 - is going to be a uh what do you call it
534:01 - just empty list and actually I want to
534:03 - change this say find all game paths
534:07 - because it's going to give us the full
534:08 - path not just the directory name next
534:11 - I'm going to say for or root I believe
534:13 - this is going to be dur files in os.
534:18 - walk and I'm going to walk the source
534:20 - path okay now what walk will do is walk
534:25 - recursively through whatever the source
534:27 - directory is that you pass uh to this
534:30 - this os. walk command so it's going to
534:32 - give you the root directory the
534:34 - directories and the files that are
534:36 - contained in the current level that it's
534:38 - walking through now what this will do is
534:40 - recursively continue to look so in this
534:43 - case it'll look in data but then it
534:44 - would after looking in data look inside
534:46 - of blank then look inside of hello world
534:48 - then look inside of rock paper scissors
534:50 - game it would look through all of those
534:52 - directories now we only care about the
534:54 - directories that are immediately inside
534:55 - of data however if you wanted to
534:57 - recursively look through all of them
534:59 - this is what you would use hence why I'm
535:01 - showing it to you here now since we only
535:03 - care about the first kind of top level
535:05 - directory we only really need to run
535:07 - this command one time so at the end of
535:10 - my for Loop I'm just going to put a
535:11 - break so that I only do this once and
535:14 - this is just an easy way for me to grab
535:16 - kind of all of the values one time right
535:18 - so you just break at the end of the four
535:19 - Loop so we only run this one time okay
535:22 - now that we've done this uh we need to
535:24 - Loop through all of the directories so
535:26 - I'm going to say four and you should not
535:29 - use dur because that's a built-in
535:30 - command so I'm going to say directory in
535:33 - dur like that and then I want to get the
535:36 - name of my directory and match that
535:38 - against my game dur pattern so what I
535:42 - would do is say if my game dur pattern
535:46 - is in my directory. lower and I'll put
535:50 - this lowercase just in case we have a
535:51 - capital game or like a capital on the G
535:53 - or something like that you don't have to
535:55 - do this but I think it makes sense to do
535:56 - that if this is the case then I'm going
535:58 - to add this path uh to my game paths so
536:03 - what I will do here is say my path is
536:07 - equal to os. path. jooy and then I'm
536:12 - going to take my source and I'm going to
536:14 - take my directory like this and I'm
536:17 - going to say game paths do append my
536:20 - path okay then down here we will return
536:25 - our game paths now the reason I'm doing
536:27 - this is because this uh dur list here
536:30 - gives me all of the names of directories
536:33 - not the paths to those directories now
536:35 - here I want the full path the reason I
536:38 - want the full path is so that I can
536:39 - easily copy it later on if I don't have
536:41 - the full path I can still create that
536:43 - full path but it's just easier to return
536:45 - all of the full paths right now so
536:47 - that's why I'm doing it so I'm saying
536:48 - path is equal to os. path. join taking
536:50 - my base path where I know this directory
536:52 - is contained inside of and then I'm
536:54 - joining them together right taking the
536:56 - directory name adding it to the base and
536:57 - then adding this to my array or list of
537:00 - paths and then I will return that
537:03 - fantastic so let's try this out now uh
537:05 - and make sure that this works so let's
537:06 - say our gamecore pass is equal to find
537:10 - all Game Pass and and then we'll pass
537:12 - here the source path and will'll print
537:15 - our Game Pass okay so let's give this a
537:19 - shot here and see if we get any errors
537:21 - or not so here we're going to pass data
537:23 - that's going to be our source directory
537:25 - so make sure you have data there and
537:27 - then Target will be our Target although
537:29 - it doesn't matter right now all right so
537:30 - notice now that I get my full paths to
537:32 - all of the directories that contain the
537:34 - name game so I have my hello world I
537:37 - have my rock paper scissors game and I
537:39 - have my Simon Says game now not no that
537:41 - I've ignored the blank directory I've
537:43 - ignored any files even if my file had
537:45 - the name game inside of it because I was
537:47 - only looking in
537:49 - directories fantastic okay so that is
537:52 - working the next thing that I want to do
537:54 - here is I want to take all of these
537:57 - paths and I essentially want to just get
538:00 - the new directory name that I want to
538:03 - copy these directories to I know this
538:05 - seems a bit weird but remember what
538:07 - we're doing here is we're taking all of
538:09 - these directories and we're copying them
538:11 - into a new directory but we're removing
538:14 - the game part from that directory name
538:16 - so when I copy you know Simon Says game
538:19 - I'm just going to copy Simon says not
538:21 - the game part into a new directory so I
538:24 - need to get that kind of destination
538:26 - path before I can perform that copy
538:28 - because to do a copy I need a source I
538:30 - need a destination right now we just
538:32 - have the source so we have to create the
538:33 - destination now one thing we also have
538:35 - to do is create the new directory and we
538:37 - can actually create the new directory
538:38 - right now so let's make a new um
538:42 - function here and say creatore dur and
538:45 - all we'll take for this is the path to
538:47 - the directory that we want to create
538:50 - inside of here I'm first going to check
538:52 - if this directory exists if it exists I
538:54 - don't need to create it if it doesn't
538:56 - exist then I will create it so I'm going
538:57 - to say if not and then this is OS do uh
539:02 - actually is this going to be I think
539:04 - it's os. path. exists yes okay that's
539:06 - correct so if this does not exist then I
539:09 - will say os. MK d which stands for make
539:12 - directory and I will make the directory
539:14 - at this path okay that's it for creating
539:17 - the directory so let's go here and let's
539:19 - say creat D and the directory that we
539:22 - want to create is going to be the target
539:24 - path right so we'll just pass the target
539:26 - paths path there sorry okay next we want
539:30 - to get all of those destination paths so
539:33 - I need to make a function that is
539:34 - essentially going to look at this whole
539:36 - path and it's just going to give me the
539:39 - directory name uh but removing the game
539:42 - aspect now I know this seems a bit
539:44 - backwards how I'm doing it I'm doing it
539:45 - intentionally so that I can show you how
539:47 - you strip apart paths and take like
539:49 - certain components of the path so
539:51 - believe me I know there is an easier way
539:53 - to do this but I'm trying to show you
539:54 - like how you can use a lot of different
539:56 - commands here so hopefully appreciate it
539:58 - anyways let me just quickly look at my
540:00 - cheat sheet here okay uh and I'm going
540:02 - to say that this is called get name from
540:06 - path and I'm going to take in my paths
540:09 - and I'm going to take in what I want to
540:11 - strip off of my directory name so I'll
540:13 - call that two strip I don't really know
540:15 - what else we would call that okay so I'm
540:17 - going to go here and say new names is
540:19 - equal to an array and I'm going to say
540:21 - four path in paths now what I want to do
540:26 - is I want to split my path into the just
540:29 - the directory and the base part right so
540:32 - like The Parent Directory of just the
540:34 - directory because remember we have the
540:36 - full entire path so when we had game
540:39 - passs we have the entire path to the
540:40 - game directory so we're going to split
540:42 - it to just the game directory and then
540:43 - whatever that base path is now the way
540:46 - we do that is we can say underscore
540:47 - because we don't care about the
540:48 - beginning part and then we can say duror
540:51 - name is equal to os. paath dosit and
540:54 - then we can just split the path now this
540:55 - is automatically just going to give you
540:57 - the very last aspect of the path whether
540:59 - it's a directory or a file or whatever
541:01 - it is and then the remaining part of the
541:02 - path on the left side again don't try to
541:04 - get clever and do this Yourself by
541:06 - splitting different uh like slashes or
541:08 - trying to find the PATH divider just use
541:11 - these buil-in functions because they
541:12 - handle the different operating systems
541:14 - for you okay so now we have the dur name
541:16 - now what we need to do is remove the
541:18 - game aspect or whatever aspect from this
541:20 - durame so I will say new
541:24 - durame is equal to my
541:27 - durame do
541:29 - replace and I'll replace whatever the
541:31 - two strip string is that we pass which
541:33 - will be game with an empty string which
541:35 - will'll just get rid of it from the uh
541:36 - the directory then I will say new
541:39 - names do append
541:42 - my new dur name then I will return my
541:46 - new names fantastic okay so now let's
541:48 - get our new names so let's say new game
541:52 - dur is equal to get name from paths and
541:56 - our paths are going to be the game paths
541:58 - and to strip we're just going to strip
541:59 - off the string game fantastic now let's
542:04 - print our new Gamers all right now
542:08 - notice I've have create directory as
542:09 - well so we should see that a new
542:10 - directory gets that's created here when
542:11 - I run this let's try it and see what we
542:15 - get and notice now that we get Hello
542:16 - World rock paper scissors Simon Says
542:18 - plus the target directory was created so
542:20 - I'll delete that uh so we can create
542:22 - again later okay now we do have the
542:25 - underscore here now that makes sense
542:27 - right because we're just looking for
542:28 - game now in this case we can look for
542:30 - underscore game and we can remove that
542:32 - entire thing but it's up to you how you
542:34 - want to do this right if you look for
542:35 - underscore game then if you started the
542:37 - directory name with just game it
542:39 - wouldn't count or wouldn't remove it so
542:41 - can do some Advanced logic to remove
542:42 - this if you want but for now we'll just
542:44 - make it underscore game I think you guys
542:46 - know what I'm saying here okay so let's
542:48 - clear that uh and what do we need to do
542:50 - next well now that we have our kind of
542:52 - destination our source directories for
542:54 - all the games as well as where we want
542:56 - to put these games now we need to well
542:59 - need to write them right like we need to
543:00 - actually do the copy operation so what
543:03 - I'm going to do is make a new directory
543:04 - uh or new function not directory and I'm
543:07 - going to call this copy okay now what
543:11 - copy is going to do is take a source and
543:13 - a destination and it's going to copy the
543:15 - source into the destination now I will
543:17 - actually um kind of change this a little
543:19 - bit and I will say copy and overwrite
543:22 - now the reason for this is that if the
543:23 - directory already exists I want to
543:25 - overwrite it and I will show you how we
543:27 - can do that now keep in mind the
543:29 - commands I'm going to use here are just
543:30 - one option to do this there's like a
543:32 - million ways you can go about copying
543:34 - and deleting directories but I'm going
543:35 - to show you how we delete a directory if
543:37 - it already exists and then of course how
543:39 - we copy it and this will be a recursive
543:41 - copy which will copy everything so if
543:43 - there was another directory inside it
543:45 - would copy that directory as well and
543:46 - all of the contents of that directory a
543:49 - lot of the copy operations don't do that
543:50 - so just keep in mind if you want a
543:52 - recursive copy you probably want to use
543:54 - the option I'm showing you here so I'm
543:55 - going to say if os. path. exist
543:59 - destination then I need to start by
544:01 - removing the destination folder which
544:02 - I'm going to use my Shu till uh for so
544:05 - I'm going to say Shu till. RM tree which
544:09 - stands for remove tree which is
544:10 - essentially a cursive delete and this is
544:12 - going to be the destination now after
544:15 - this I'll say s huil do copy tree and
544:20 - then I will copy the source to the
544:24 - destination all right that's all good
544:26 - that's all we need for copying and
544:28 - overwriting or overwriting however you
544:31 - want to I think overwrite is the correct
544:33 - term there okay so now that we've done
544:35 - that we can use this function so we need
544:37 - to essentially Loop through all of the
544:39 - different paths that we have so The
544:41 - Source paths as well as the destination
544:42 - paths and then we need to run this copy
544:44 - command so I'm going to say for and
544:47 - we'll call this uh SRC destination in
544:52 - I'm going to use this ZIP function I'll
544:54 - explain how this works in one second but
544:55 - I'm going to pass my game paths and my
544:57 - new game directories I'm going to start
545:00 - by saying my destination path is equal
545:03 - to os. path. jooin and I'm going to join
545:06 - my target path with my destination
545:09 - folder name
545:11 - then I will run the copy and overwrite
545:13 - function with my SRC and my destination
545:18 - path okay so let me explain how zip
545:21 - Works what zip will do is it will take
545:25 - matching elements from two arrays and
545:27 - combine them into a tupple which then
545:29 - gives me access to them at the same time
545:31 - so notice right these arrays or these
545:33 - lists are going to be the same length so
545:35 - this first one is going to be all of the
545:36 - original game paths and this is going to
545:38 - be our new game directory names that
545:40 - have this underscore game removed now I
545:43 - want to be getting the game path
545:45 - associated with the new game directory
545:47 - name because I want to copy whatevers
545:49 - here into this new directory name so I
545:52 - zip them together so show you a quick
545:53 - example if we have one 2 3 and we have
545:57 - like a b c then if you zip these
546:01 - together what you're going to get is an
546:03 - array that has one and a or a topple
546:05 - sorry that has one and a 2 and B Etc it
546:09 - just combines them together so the
546:11 - matching elements at their indices get
546:12 - kind of matched up and that's why I can
546:14 - say Source destination here and iterate
546:16 - through the zip okay so now this should
546:20 - actually be good however I need to make
546:21 - sure that I create this directory before
546:24 - I do this otherwise we're going to get
546:25 - an error where it say our path doesn't
546:27 - exist okay so let me slow down for one
546:29 - sec I'll explain what we've done we can
546:30 - run it and then we can continue so what
546:32 - we've done here right is we've gotten
546:34 - the source path as well as the directory
546:36 - path we have found all of the game paths
546:38 - that we're interested in so essentially
546:40 - those d dories from The Source directory
546:43 - we have then found what we want our new
546:45 - game directory names to be we have then
546:48 - created the target directory where we
546:50 - want to copy all of these into and now
546:52 - we are actually performing that copy
546:54 - operation okay so we're at that point so
546:56 - let's run this and see how it works so
547:00 - python get game data and then we're
547:02 - passing data and Target I hit enter and
547:05 - when I look in Target here you can see I
547:07 - now have Hello World rock paper scissors
547:09 - and Simon Says with the contents of
547:12 - those directories CU I just copied them
547:13 - in perfect so now let me delete this and
547:17 - we can continue so the next thing I want
547:19 - to do is write a Json file that just has
547:21 - some metadata about the different games
547:23 - so what the game directory names are and
547:25 - how many of them there are this is
547:27 - fairly straightforward so let me create
547:28 - a function I'll say make
547:32 - Json metadata file and here I will just
547:36 - take my path so what do I want the file
547:39 - to be or where do I want it to be and
547:41 - then I will take my game dur okay now
547:46 - here I'm going to say that my data this
547:48 - is the data I want to write into the
547:49 - Json file is going to be equal to I will
547:53 - say my game
547:54 - names is simply my game directories and
547:58 - I will say number of games and this will
548:02 - be the Len of my game very
548:05 - straightforward not the most useful data
548:07 - but just want to show you how we write
548:08 - Json so now there's a few ways to do
548:10 - this but the preferred method is to do
548:11 - the following I'm going to say with open
548:14 - path in W mode W stands for right this
548:18 - will override the file if it already
548:19 - exists if you wanted to read the file
548:21 - you'd use R so I want to write and
548:23 - override if it exists so I'm using W and
548:26 - I'm going to say as F and then I'm going
548:28 - to say
548:30 - json. dump and I'm going to dump my data
548:33 - into my file now if you've ever seen
548:37 - Json be used before with dump s dump s
548:40 - stands for dump string and that's going
548:42 - to dump the uh Json data you have into a
548:46 - string we don't want that we want to
548:48 - dump it into a file or just really save
548:50 - it into a file so we pass the data that
548:52 - we want to save which in this case is a
548:54 - python dictionary which can kind of be
548:56 - represented as a Json object and we want
548:58 - to save it into this file object that
549:00 - I'm opening using something known as a
549:02 - context manager now the reason I use
549:05 - this is because as soon as we're outside
549:07 - of this with we are automatically going
549:09 - to have the file closed for for us if we
549:11 - didn't use wi we would have to manually
549:13 - close the file and there can be some
549:15 - problems doing that especially if an
549:17 - error occurs before we're able to close
549:19 - the file we can have kind of a memory
549:20 - leak going on so it's just preferred to
549:22 - use this it's referred to as a context
549:24 - manager that just makes sure your
549:25 - cleanup operations happen no matter what
549:28 - essentially okay so we have this uh Json
549:30 - metadata file so let me copy this
549:32 - function let's paste it here we'll say
549:35 - make Json metadata file and now we need
549:37 - to pass a uh path that we want to use so
549:40 - I'll say Json path is equal to
549:45 - os. path. jooin and I will join my
549:49 - target path with my metadata. Json name
549:55 - so I've just come up with this name you
549:56 - can name it anything you want and then I
549:58 - will pass here the Json path and my new
550:01 - game dur right there we go okay so let's
550:05 - run this again and see if it creates the
550:07 - Json
550:09 - file okay go go to Target and notice we
550:12 - now have our Json file if I save it will
550:14 - auto format here and you can see we have
550:16 - our game names and our number of games
550:20 - fantastic okay so let me delete
550:23 - that all right now that we have done
550:26 - that I need to show you how we can
550:27 - compile this go code and how we can run
550:31 - the go code all right so let's write a
550:33 - function here that will allow us to
550:34 - compile the code inside of a directory
550:37 - now let me just space up my functions
550:38 - here so bit easier to read okay and
550:41 - let's do it here so Define this will
550:43 - be
550:45 - compile game code now here we'll take a
550:50 - path which will be the path to the
550:52 - directory we want to compile the code
550:54 - inside of now what we need to do here is
550:57 - we need to locate or determine the name
551:00 - of the file that we want to compile you
551:03 - know no pun intended or rhyme intended
551:05 - there but you know what I mean so we
551:06 - have main we have code we have file now
551:09 - in this case we get hard code that but
551:11 - we don't want to do that we want to have
551:12 - this Dynamic so it works with kind of
551:14 - any go file no matter what the name is
551:16 - so essentially we're going to look
551:17 - through the directories of our games uh
551:20 - and we're going to search for any file
551:21 - that ends in Dogo right so let's create
551:23 - a uh variable here and say game code
551:28 - extension and I'll just make
551:30 - this.o so that's what we'll search for
551:32 - now if we find that uh then we'll
551:34 - compile that code now we could compile
551:36 - all of the files that have that name or
551:38 - we could compile just the first one and
551:40 - this case I'll just do the first one
551:41 - because we're assuming we only have a
551:42 - single code file in each of our
551:45 - directories all right so let's say code
551:48 - file name is equal to none uh and then
551:52 - let's walk through this directory like
551:54 - we did before so we're going to say root
551:56 - dur files in os. walk our path and this
552:02 - time we're only interested in the files
552:04 - so I'm going to say for file in files
552:08 - and let's not forget to break here at
552:09 - the end of our four Loop so we only do
552:11 - this one time not recursively okay so
552:13 - four files in files I'm going to say if
552:16 - the code what did I even call this the
552:21 - what game code okay game code extension
552:23 - if the game code extension is in the
552:26 - file then I will say my code let's do
552:31 - this my code file name is equal to file
552:34 - and then I will break okay that's
552:37 - actually all we need I know I went fast
552:38 - there but that's all we need to
552:39 - determine what the name of our code file
552:41 - is so we Loop through all of our files
552:44 - here right so for file and file and we
552:46 - say okay if this Dogo extension uh is
552:49 - associated with the file then we'll say
552:51 - code file name is equal to file uh and
552:53 - then we'll break which means we'll just
552:54 - find the first one we don't need to
552:56 - continue looking now what I just
552:57 - realized though is that this could be a
553:00 - little flawed because I could
553:01 - technically have a file that's likego
553:03 - dopy I know that would be a weird name
553:05 - but that wouldn't be a dogo file that
553:07 - would be a python file right well I
553:09 - think that a python file but it would be
553:11 - a bit weird either way if we had
553:12 - something like that so what I'm going to
553:13 - do instead uh is use a little bit of a
553:16 - better way of doing this I'm going to
553:17 - say if file do ends with so I'm going to
553:21 - check if this is at the end of the file
553:23 - I think that's a better way to do this
553:25 - check okay perfect so now what I'm going
553:28 - to do is I'm just going to make sure
553:29 - that we did have a code file if we don't
553:32 - have one I'm going to return if we do
553:33 - have one then I'm going to run the
553:35 - command to compile this so I'm going to
553:36 - say if the code file name is is none
553:41 - then just return just so that we don't
553:43 - get an error when we try to compile a
553:45 - file that doesn't exist now we need to
553:48 - actually compile the file so the first
553:50 - thing I'm going to do is say my command
553:52 - is equal to and then I'm going to make a
553:55 - variable up here which will be my
553:56 - compile command so I'm going to say game
553:59 - compile command now the way you write
554:01 - these commands is just in an array of or
554:04 - I keep saying array and a list of
554:07 - strings that represent the commands that
554:09 - you need to run
554:10 - so it's going to be go and then build so
554:13 - this is the command go build then
554:15 - whatever the name of the file is so this
554:16 - is my like base command so I'm going to
554:19 - say my command is equal to my game
554:21 - compile
554:22 - command plus and then I'm going to put
554:24 - another list here and I'm going to add
554:26 - inside of here the code file name now
554:29 - what this will do is make the command be
554:31 - go build and then whatever the file name
554:33 - is then I can pass this to a function
554:36 - that I'm going to write which will just
554:37 - run any command that I pass it so we're
554:40 - going to say run command uh we do
554:43 - actually need the path that we want to
554:45 - be running this command from okay so now
554:49 - I'm going to say that our current
554:51 - working directory is equal to os. getet
554:56 - CWD is that is that what it is get CWD
554:59 - yes that's correct and I'm going to show
555:01 - you how we change our working directory
555:03 - into this path the reason for that is
555:06 - that I need to run this command well I
555:08 - don't need to but I'm going to run this
555:09 - command directly in the directory where
555:12 - our game code is so rather than being in
555:14 - the directory where my python script was
555:16 - run I'm going to change into that
555:17 - directory run the command and then
555:19 - change back to a different directory
555:21 - just to show you how you do that so I'm
555:22 - going to say OS uh CH dur which stands
555:25 - for change directory and I'm going to
555:27 - change into the path directory then I
555:30 - going to go and run the command now to
555:33 - run the command we're going to use the
555:34 - subprocess command run which I believe I
555:37 - imported from up here yes I did so we're
555:40 - going to
555:41 - say run and we're going to run our
555:45 - Command and we're going to say our
555:46 - standard output is equal to pipe and our
555:50 - standard input is equal to pipe and I'm
555:53 - going to say Universal new lines is
555:56 - equal to true now this is where the
555:58 - command gets a little bit complicated
555:59 - right um you know what does all this
556:01 - mean well the standard output and the
556:03 - standard input is the location where the
556:05 - command is well accepting input and
556:07 - spitting out the output now pipe is kind
556:09 - of kind of this special thing that we
556:12 - can use that makes a bridge between our
556:15 - python code and the process that we're
556:17 - using to run this command now I'm not
556:20 - really going to explain it more than
556:21 - that but just understand that that's why
556:23 - we're putting it here it essentially
556:24 - allows us to communicate between the
556:26 - process that can actually run this
556:28 - special command because this command is
556:30 - not a python built-in Command right like
556:32 - this is a command we just run in our
556:34 - terminal or in our Command problem again
556:36 - you don't have to understand it maybe
556:38 - that explanation was good maybe it
556:39 - wasn't but this is how you do it you
556:41 - import run and pipe from sub process you
556:44 - pass the command again the command is
556:45 - just going to be an array of all of the
556:47 - different words that are in that command
556:48 - or a list of all of the different
556:50 - commands uh and then if you wanted the
556:52 - result uh it will be given to you in
556:54 - this result variable so you could print
556:56 - out the result you could read it in as a
556:57 - Json object blah blah blah you could do
556:59 - whatever you want and you could see what
557:01 - that result is and in fact we'll print
557:04 - out the result uh just so you can see
557:05 - what it looks like so I'll
557:07 - say compile result like that okay now
557:13 - the last thing we'll do just as good
557:14 - practice is we're going to change our
557:16 - directory back to the current working
557:19 - directory we were in before we ran or
557:22 - before we changed directories into this
557:23 - path just to make sure when we run this
557:25 - command another time uh we don't get any
557:28 - potential errors okay so we got the
557:30 - working directory we were in changed
557:32 - into this path directory ran the command
557:35 - and then we went back into whatever the
557:37 - previous directory was just so that we
557:39 - don't have any potential problems here
557:41 - now we need to call this function so
557:42 - we'll say run command uh and command and
557:45 - path that's actually fine we can just
557:47 - pass those values great so now where do
557:50 - we call our compile game code function
557:53 - well we're going to call that from
557:55 - inside of our copy here so I'm going to
557:58 - say compile game code and I will compile
558:00 - game code in the destination path
558:03 - because once we've done the copy and
558:04 - overwrite once this is finished now that
558:06 - directory exists let's compile the game
558:08 - code then move on to the next
558:10 - directories so at this point the project
558:13 - is pretty much finished let's run it
558:15 - though make sure it
558:17 - works okay compile result compile result
558:20 - and notice it gives you kind of this
558:22 - like result object right I'm not going
558:25 - to uh again kind of dig into exactly how
558:28 - this works but you can see that if you
558:29 - wanted to look at the standard out then
558:31 - it would be STD out from this compiled
558:33 - process or sorry not compiled completed
558:36 - process and if this had any result like
558:38 - if there was an error you'd be able to
558:39 - see it there and the return code would
558:41 - most likely be an error return code as
558:43 - well now let's look at Target here so we
558:45 - have Target we have hello world and now
558:46 - notice inside of my directories I have
558:48 - my compiled code right I have main.exe
558:51 - code. exe file.exe Etc if you were on
558:55 - Mac or Linux you would get I believe a
558:57 - sh file uh or an executable file on your
559:00 - operating system it would be different
559:02 - than if you were on
559:03 - Windows okay so I think I'm going to
559:06 - wrap up the video here all of this code
559:08 - will be available on on GitHub I will
559:10 - also zoom out a bit and kind of slowly
559:11 - scroll through in case any of you want
559:13 - to pause the video and have a look at
559:15 - any of the lines here but I thought this
559:17 - was a useful project just to teach you
559:19 - some basic kind of automation I don't
559:21 - want to call it automation scripting um
559:24 - syntax tools commands you can use in
559:26 - Python I write code like this all the
559:29 - time in Python it's really helpful this
559:30 - is kind of my go-to language when I need
559:32 - to do like file or file system
559:34 - operations so hopefully you guys found
559:36 - some value from this and of course if
559:38 - you did make sure to leave a like
559:40 - subscribe to the channel you guys can
559:41 - check out my programming expert course
559:43 - if you want to learn how to become a
559:44 - python programmer or a software engineer
559:46 - as fast as possible and I look forward
559:48 - to seeing you in another YouTube
559:51 - [Music]
559:58 - video