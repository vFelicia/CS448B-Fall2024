00:00 - hey guys and welcome back to the third
00:02 - video in my PI game scroller game series
00:06 - and in today's video I'm going to be
00:09 - going over the collision between the
00:10 - character and the different objects and
00:12 - then I'm also gonna be going over like
00:15 - what happens to the character so for
00:17 - example before nothing was happening so
00:19 - we're gonna have him like falling over
00:20 - and then just a few other minor tweaks
00:23 - and kind of bug fixes for the program
00:25 - before we move into the final stage
00:27 - which is gonna be kind of scoring like
00:29 - an end screen maybe I'll see what I want
00:31 - to do with that so for right now you
00:34 - might have noticed in the last video we
00:36 - did a hitbox furball to saw and for the
00:39 - spike but we didn't end up doing a
00:41 - hitbox for the character so what we want
00:44 - to do here now is do a hitbox for that
00:46 - and the reason I left that over the
00:48 - other video was because it's a fairly
00:49 - complex kind of hitbox sequence because
00:52 - our character moves right like he's
00:53 - jumping up and down he's sliding so his
00:56 - hitbox is gonna vary depending on what
00:58 - action he's doing right so that's why I
01:01 - just wanted to save it for now to make
01:02 - sure that I could test and everything
01:04 - was working and I didn't give you an
01:06 - incorrect hitbox so I've got those hip
01:09 - boxes now for you it's just gonna be
01:11 - easier if I just copy and paste them in
01:12 - here and then I'll give you something to
01:13 - copy them down so it's very important
01:16 - where I'm placing this so I'm in this is
01:18 - my player class right here and I'm in
01:20 - the draw method so what I need to do
01:23 - here now is go to this first part so
01:27 - when our character is jumping now our
01:29 - hitbox when our character is jumping is
01:31 - going to be placed right here so just
01:33 - underneath the if-statement not inside
01:36 - of the if-statement just below it okay
01:38 - and then this is what it's gonna be so
01:40 - selfless for comma self dot y and then
01:44 - self dot with -24 it's very important
01:47 - and then self dot height -10 make sure
01:51 - you copy that down pause the video as
01:52 - I'm gonna move on to the next one now
01:54 - okay so our next hitbox is here and this
01:59 - actually involves us to type in a whole
02:02 - new section of code so this is actually
02:05 - a two liner here so I'm going to copy it
02:07 - and paste it in so this is in our kind
02:10 - of bottom part here now if you haven't
02:13 - noticed this
02:13 - part in the other tutorials I added this
02:15 - into the github don't worry about it
02:17 - just if you don't have most recent
02:19 - version and you don't have this or self
02:20 - thought slide up make sure you edit that
02:22 - you can just fix that by looking at my
02:24 - class here now underneath our slide
02:27 - count equal equal to 80 so we're gonna
02:30 - do another Elif like this so it's gonna
02:33 - say Elif and then slide count so it's
02:36 - just all this right here we want to copy
02:37 - this down
02:38 - so if our slide count is greater than 20
02:40 - and less than 80 meaning that our
02:43 - character is actually lying down that's
02:45 - what the image looks like then the
02:47 - hitbox is gonna be this so it's gonna be
02:48 - self dot X self dot y plus three self
02:53 - thought width minus eight and self dot
02:55 - height minus 35 okay copy that down
02:58 - again pause the video and now we'll move
03:01 - into the next part so the next hitbox is
03:03 - gonna be render Neath where we're
03:05 - drawing everything so do this and we're
03:10 - we have slide count greater than 100
03:12 - tons we're still in this little LF
03:13 - statement here underneath this we're
03:17 - gonna say self dot hitbox equals self
03:20 - dot X plus four self dot y self thought
03:24 - with minus 24 and self dot height minus
03:26 - ten okay so the next hip box goes just
03:31 - where we're running here so it's gonna
03:32 - go like this and there we are now we're
03:36 - just going to add something else to this
03:37 - class so sorry I'll give you a second
03:38 - here you can copy this down so self dot
03:40 - X plus for self dot Y self thought with
03:44 - minus 24 in self to hide minus 13
03:47 - okay copy that down and now I'm going to
03:49 - the next part we're just gonna add an
03:51 - attribute in our class here's a self dot
03:54 - and then up here it's going to be
03:56 - falling and we're gonna set this equal
03:59 - to false just so we that we can we don't
04:01 - to come back to this class after we'll
04:03 - just do this now and then right here
04:05 - above this else statement we're going to
04:08 - do an L if we're going to say L if self
04:11 - dot falling and then in here we were
04:15 - just going to simply say win dog blitz
04:18 - and then we're going to do a picture
04:20 - it's gonna be called fall and then in
04:23 - here and say self dot X
04:25 - and self-taught why -35 believe earth
04:33 - well yeah
04:34 - 35 like that just so it moves our
04:36 - character down down a bunch I think that
04:39 - looks about right and then obviously if
04:42 - we're gonna be drawing the picture of us
04:44 - falling that means we need to have the
04:46 - picture of us following and sorry this
04:47 - isn't a - this is a bus I keep getting
04:49 - mixed up because in PI game we're gonna
04:50 - leave it as 30 actually when you add to
04:53 - the Y you move downwards just gonna have
04:55 - plus 30 and then we need to get our
04:58 - image so you guys already have this
04:59 - image if you downloaded my thing from
05:03 - the github you downloaded all this files
05:04 - you will already have this image so just
05:06 - type this in exactly as I do it like
05:08 - safe all equals and then PI game got
05:12 - image got load same thing in here when I
05:16 - say OS path join our folder is called
05:21 - images and then this image really easy
05:24 - it's called 0 dot PNG just like that
05:26 - okay there we go we're finished with
05:29 - this player class now and the hitbox for
05:32 - this should be working now if we want to
05:33 - draw the hitbox it's the very last step
05:36 - I just to make sure that everything
05:38 - really is working well we'll go down to
05:39 - the bottom in our draw method and we can
05:42 - just say PI game doc draw dot rect win
05:48 - will draw it red again just like the
05:51 - other ones we're gonna just draw hugging
05:54 - our self dot hip box like that and then
06:00 - - so that we are drawing it with two
06:04 - thickness then we'll go ahead we'll run
06:06 - the program and we can just make sure
06:07 - hitbox working and there we go we can
06:09 - see we have our player hitbox like this
06:11 - when he slides it changes it could it
06:15 - should actually be changed a little bit
06:17 - different than that so we're gonna have
06:18 - to look into that for one second to make
06:19 - sure that that everything is fine there
06:21 - and you can see that we can jump over
06:23 - everything
06:24 - the jumping hitbox works fine just the
06:26 - sliding hitbox that we're running into a
06:28 - bit of an issue with so we'll make sure
06:29 - that we get that fixed right now so in
06:31 - the sliding hip box the reason that
06:33 - we're running into an issue I believe is
06:37 - because we're drawing the hitbox in
06:39 - position yeah that's right we're gonna
06:41 - take this self-taught hitbox here that I
06:44 - have in that I've actually put in the
06:46 - wrong position we're gonna copy that now
06:49 - we're just gonna move it up in here so
06:52 - must be inside this if statement my bad
06:54 - make sure you just move that into here
06:56 - and then everything should hopefully be
06:58 - working fine yep there we go now
07:01 - everything looks to be working okay so
07:04 - now that everything's working it's time
07:05 - to move on to the next step which is
07:08 - going to be collision so now that we've
07:10 - have all the hitboxes pretty much
07:13 - perfect for at least our character saw
07:15 - and our spike we're gonna do the
07:18 - collision between them so the way that I
07:19 - like to do this is just by adding a
07:22 - method inside of our both our objects so
07:25 - we could do one in our player but it's
07:27 - just easier to do it in our objects and
07:29 - we're just gonna call it collide so
07:32 - we're gonna start off by going to their
07:33 - saw class say define collide self and
07:36 - then it's gonna take a rectangle so what
07:39 - the rectangle is is just gonna be the
07:40 - hitbox of our player pretty well and
07:42 - then in here
07:44 - we are simply just gonna type if and
07:46 - then we let me just get this so I don't
07:49 - get this wrong here on my other screen
07:50 - so if rect 0 which is the x position of
07:54 - our player plus his width this is the
07:58 - hitbox right is greater than
08:00 - self-thought hitbox and that's going to
08:04 - be zero because we're checking the X
08:05 - right now we have wrecked 0 again the x
08:09 - coordinate of our player it's less than
08:11 - self-thought hitbox 0 plus self dot
08:17 - hitbox 2 because that's how width that
08:22 - and then so this checks if the x
08:25 - coordinates are within each other now
08:27 - that we have the X we have to check the
08:28 - y so since we're just checking the saw
08:31 - object here all we have to say is if the
08:34 - rectangle 1 so that's our players Y
08:37 - position plus his height which is gonna
08:40 - end up being his feet is greater than
08:43 - self-thought hitbox1 because we know
08:47 - that the character is never going to be
08:50 - below the saw because it can
08:53 - go lower than like that ground level we
08:55 - only have to bother checking if his feet
08:57 - are below where the top of the saw is it
09:01 - if so if the X are there and it's below
09:03 - the top of the saw then we know that
09:04 - it's collided so we can leave off one
09:06 - little part that we may have added for
09:08 - collision in different games so if that
09:11 - happens we're gonna return true
09:12 - otherwise we are going to return false
09:15 - like that then we're gonna go ahead and
09:17 - we're gonna copy this and we're gonna
09:20 - paste the same thing in our spike we're
09:22 - gonna make one minor tweak here and it's
09:25 - just gonna be in the Y because that the
09:27 - X is the same thing but for the Y what
09:29 - we need to do is we're going to say if
09:30 - rect 1 and then in this case is less
09:34 - than self-thought hitbox 1 or hitbox 3
09:38 - sorry and this is because we know that
09:40 - the y coordinate of our player is never
09:44 - going to be above the the top of the
09:48 - spike right he can't jump that high and
09:50 - we know how you can jump so we only have
09:52 - to bother checking if the y coordinate
09:56 - is then above the bottom of the spikes
09:58 - at the bottom of the spikes since it
09:59 - starts at 0 is just going to be equal to
10:01 - whatever the height of the spike is hope
10:04 - that makes sense it's pretty
10:06 - straightforward
10:06 - so now that we've done that what we need
10:09 - to do is we're gonna have to check for a
10:10 - collision so we we have the colliding
10:12 - methods but we don't actually check it
10:14 - anywhere so inside of our while loop we
10:16 - already have it set up so that for every
10:18 - object we're doing something right so
10:20 - we're moving the object and then we're
10:21 - checking if it's off the screen so why
10:23 - don't we as well now check if it's
10:24 - colliding with the player so we're gonna
10:26 - say if object with two T's dot collide
10:30 - and then inside of here we're just going
10:33 - to do runner because that's what we
10:34 - named our player I just keep calling a
10:35 - player runner dot hitbox like that and
10:40 - then if that happens then we're gonna
10:43 - execute what happens when he's hit right
10:46 - so when he when he gets hit when we
10:49 - collide something then we're just gonna
10:50 - say runner daughter
10:51 - falling which we set up earlier is equal
10:54 - to true now I'm also here just gonna
10:57 - delay the game just so we know when he
10:59 - gets hit so PI game time don't delay I'm
11:01 - gonna take this out later but this is
11:02 - just gonna show us where exactly he's
11:05 - getting hit so for one second it's gonna
11:06 - pause so we
11:07 - can see it and that should be good so
11:11 - let's go ahead and check everything out
11:13 - here and make sure that everything's
11:14 - working fine so we can see here we have
11:17 - our little guy we're going to wait for
11:18 - something to spawn onto the screen and
11:21 - then we'll see if the objects collide so
11:26 - actually let me try to jump over this
11:27 - one oh so we see they've collided it
11:31 - keeps delaying the game because they've
11:32 - collided like a bunch of times you can
11:34 - see collide collide collide collide
11:38 - there we go
11:40 - and we shred into an issue here named
11:42 - fall is not defined oh my bad there why
11:45 - we come up here we just need to say
11:46 - sorry this is inside our player class
11:48 - when we're drawing the fall self
11:51 - thoughtful okay let's run it one more
11:54 - time see if everything's working again
11:58 - so you can see our hip box looks to be
12:00 - pretty good could be improved slightly
12:04 - but I mean it's not a huge deal for
12:05 - right now and if we collide then we fall
12:09 - down like that perfect awesome okay and
12:12 - once that happens obviously I'm not
12:13 - gonna be delaying the game so it's not
12:14 - gonna look like this he's just gonna be
12:16 - sliding and falling and yeah awesome
12:19 - alright so now all we need to do is
12:22 - figure out what we're gonna do once the
12:24 - player actually collides so once he
12:26 - collides we don't want to delay the game
12:27 - because we saw what's happening they're
12:28 - just lagging what I want to do is I kind
12:31 - of want to pause the game so I want to
12:32 - make it stop and then we can ask the
12:35 - player do you want to play again so on
12:38 - maybe show a high score table so I'll
12:40 - get that starting now but we're really
12:42 - gonna be doing a lot of that in the next
12:43 - video so I'm gonna make a new function
12:44 - I'm just gonna call it define huh maybe
12:47 - call it reset yep and what that'll do is
12:51 - it's gonna reset all their global
12:52 - variables for us so we'll do that inside
12:54 - of the function and then it's gonna
12:56 - maybe call like the end screen to show
12:58 - us that that good stuff there okay so
13:02 - I'm just gonna type pass in here for now
13:03 - because I'm gonna get on to that in the
13:05 - next video so if this video was useful
13:08 - and you guys liked it please make sure
13:09 - you leave a like and subscribe and I
13:11 - will see you in the next video where
13:13 - we're gonna go over again those end
13:14 - screens and get into the final parts the
13:16 - game that's gonna be the final video for
13:17 - this series
13:19 - [Music]