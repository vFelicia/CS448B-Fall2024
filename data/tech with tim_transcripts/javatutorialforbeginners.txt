00:00 - hello everybody and welcome to this java
00:02 - course
00:03 - for beginners so before we get into the
00:05 - content let me just take a quick minute
00:06 - to give an introduction
00:08 - talk about who this course is for and
00:10 - where you can find some resources and
00:11 - just some other
00:12 - necessary information that i need to
00:13 - tell you so first of all this course
00:15 - right here is designed as i said for
00:17 - absolute beginners for people with no
00:19 - coding experience before
00:21 - or people with very little programming
00:23 - experience now of course if you're more
00:25 - experienced you're welcome to follow
00:26 - along with this
00:27 - and in fact there's timestamps in the
00:29 - description that you can click on that
00:30 - will show you all of the different
00:31 - things that i'm covering
00:32 - in this video now it's worth noting that
00:35 - this actual content so all of the
00:37 - content for this video was filmed over a
00:39 - year ago
00:40 - so i've had these videos on my channel
00:42 - for a really long time and what i
00:43 - figured i would do is re-edit them kind
00:45 - of make them a little bit nicer and put
00:47 - them into one
00:47 - larger video so more of you guys can
00:49 - find out about my java content and will
00:51 - be able to follow along with this course
00:54 - so that's pretty much all i wanted to
00:55 - say this course is designed for
00:57 - beginners people with
00:58 - little to no experience these videos are
01:00 - older but i've re-edited
01:01 - them and kind of put them into one
01:03 - larger video to make it easier to follow
01:05 - along with
01:06 - and well i hope you enjoy so with that
01:08 - said let's get into the content and
01:10 - learn the java programming language
01:21 - so before we dive in i need to thank
01:22 - jetbrains academy for sponsoring this
01:24 - video
01:25 - jetbrains academy provides amazing
01:27 - resources that teach you how to code in
01:29 - a project-based approach
01:31 - using jetbrains academy you can follow
01:32 - along with learning tracks related to
01:34 - java
01:35 - python kotlin and web development each
01:37 - track has a catalog of awesome projects
01:39 - you can create and that are designed for
01:41 - programmers of all levels
01:42 - you can solve simple problems in the
01:44 - jetbrains online code editor
01:46 - and then start learning professional
01:47 - development tools by creating your
01:48 - projects in the jetbrain ides
01:51 - this will allow you to develop the
01:52 - skills to use a professional ide
01:54 - and improve your coding at the same time
01:56 - jetbrains also provides another great
01:58 - feature called the knowledge map
01:59 - this gives you an entire view of all of
02:01 - the learning content and allows you to
02:03 - see how single concept topics are
02:05 - connected
02:05 - you can also use the knowledge map to
02:07 - plan out your own learning goals and
02:08 - track your own progress
02:10 - get started using jetbrains academy by
02:12 - signing up for three months of access
02:14 - completely free from the link in the
02:16 - description in fact i'd encourage you
02:18 - all to install the jetbrains educational
02:20 - ide
02:20 - to use to follow along with this
02:22 - tutorial video unfortunately for me
02:24 - at the time of filming these videos this
02:26 - ide was not around and that's why you'll
02:28 - see me using a different one in this
02:30 - video
02:30 - with that said let's jump into the
02:32 - content so let's go ahead and get
02:33 - started the first thing we need to do is
02:35 - download a
02:36 - ide and this is where we're going to be
02:38 - writing our java code okay
02:39 - so it's called eclipse this one i'm
02:41 - going to use use whatever you want but
02:42 - if you're a beginner i recommend you
02:43 - just follow along with this because
02:45 - some of the things i'm going to do are
02:46 - specific to eclipse so go to this link
02:49 - it's in the description down below
02:51 - and just click on download and then
02:53 - obviously 32 or 64 bit i recommend
02:55 - 64-bit as most tv you probably have a
02:57 - 64-bit machine
02:59 - once you download this uh if we go sorry
03:01 - i've already got an open here but if we
03:03 - go to our downloads we will see
03:05 - that it should give us something like
03:06 - this double click on it
03:09 - wait for this to boot up might take a
03:10 - second
03:13 - okay it's going it's going let's see and
03:16 - once we're in here we're simply going to
03:18 - select
03:18 - eclipse ide for java developers we don't
03:21 - need to be using any of this other stuff
03:23 - just this one right here okay so we're
03:25 - going to install this i already have it
03:27 - installed so i'm not going to do that
03:29 - now it is going to ask you for a project
03:32 - directory something like that
03:33 - so if it asks you for that just choose
03:34 - wherever on your computer it doesn't
03:35 - really matter
03:37 - okay so once you've had that installed
03:40 - you chose your project directory now
03:42 - we're going to be in eclipse
03:43 - now to start a new project what we need
03:46 - to do so it should look something like
03:47 - this by the way
03:48 - i'm going to click on file new and then
03:50 - java project
03:52 - now here i'm just going to name mine
03:54 - tutorial and
03:55 - then let's see here you can just leave
03:58 - all the rest of this stuff blank if you
03:59 - want to change the location
04:00 - go ahead all right click finish and
04:03 - there we are
04:04 - so once we have this it's going to pop
04:05 - up in our left bar the package explorer
04:07 - i'm just going to shrink this a little
04:08 - bit
04:08 - and what we're going to do is we're
04:09 - going to go down to source or oh i
04:11 - already have a
04:12 - package name tutorial one second i'm
04:13 - just gonna create a new one really
04:14 - quickly and then
04:15 - walk you through this so it's fresh uh
04:18 - tutorial
04:19 - one okay finish all right we got
04:21 - tutorial one
04:22 - and we get source okay now inside of the
04:26 - source what we're gonna do is we're
04:27 - going to right click on this we're going
04:28 - to click
04:28 - new and we're going to click on package
04:31 - now i recommend you just leave this
04:32 - package name the same
04:34 - as your project so i'm going to do that
04:36 - and click finish
04:37 - and then inside of your package name i'm
04:40 - going to click
04:40 - new and class okay so once i click class
04:44 - it's going to pop up here it's going to
04:45 - allow you to select the package and the
04:46 - source will just leave those blank
04:48 - and the name you can name this whatever
04:50 - you want in my case i'm going to name it
04:51 - main okay type name is discouraged
04:55 - okay so let's name it main with a
04:57 - capital m all right
04:58 - just because java likes that and then
05:00 - what we're going to do is make sure you
05:01 - check on this public static void main
05:04 - uh we need to check mark this because
05:05 - we're going to need this function
05:06 - created
05:07 - so that we can start all right i
05:09 - inherited abstract methods you can
05:10 - uncheck that
05:11 - actually we'll check that it doesn't
05:12 - really matter for right now okay
05:15 - so now we're in and we've got a little
05:16 - bit of code going here and i'm going to
05:18 - explain
05:19 - what this is and then we'll get into
05:21 - just coding like a really basic thing
05:22 - just printing a few things to the screen
05:24 - before we move into the next tutorial
05:25 - where we talk about data types
05:27 - so java is an object-oriented program
05:30 - language
05:30 - meaning that everything happens inside
05:32 - of something called classes and
05:33 - everything is known as
05:34 - like objects all right now you're not
05:36 - going to understand very much about
05:37 - of this right now if you're a beginner
05:39 - but for some of you guys that are more
05:40 - advanced you should kind of understand
05:41 - what this means
05:42 - so classes are these okay and everything
05:45 - in java is written in a class
05:47 - or an interface or something else but in
05:49 - our purpose just think everything is
05:50 - written in a class right now okay
05:52 - now inside of this class we have a
05:54 - special uh
05:55 - method is what it's called and these
05:56 - methods are what i'm highlighting right
05:59 - now
05:59 - inside these curly brackets public
06:01 - static void main okay
06:03 - you don't have to know what all that
06:04 - those words mean just know this method
06:06 - is important and this is what we're
06:07 - gonna be writing all of our java code in
06:09 - for right now
06:09 - so if you try to write code outside of
06:11 - these little curly braces um
06:13 - not inside of this method that's what
06:15 - we're calling it right now okay uh your
06:17 - code is not gonna execute properly
06:18 - unless you know what you're doing
06:20 - which in our case we don't yet so all
06:22 - the code for writing goes
06:23 - inside of this public static void main
06:26 - inside of these curly braces all right
06:29 - now the first thing i'm going to get us
06:30 - to do is just print something to the
06:32 - screen
06:32 - so to print something in java we're
06:34 - going to type system
06:36 - dot out dot my computer's lagging one
06:39 - second dot print
06:40 - ln and this simply stands for print line
06:44 - okay now inside of these brackets here
06:46 - we can print a string
06:48 - or whatever we want to print so a string
06:50 - in
06:51 - java is anything encapsulated by two
06:53 - quotation marks whenever we're printing
06:54 - something we want to do it in two
06:55 - quotation marks at least for right now
06:57 - and in this case i'm going to say the
06:59 - classic hello world with an exclamation
07:02 - point okay
07:04 - now at the end of every line we write in
07:06 - java with exception of lines that start
07:08 - or end with
07:09 - uh curly braces we need to put a
07:12 - semicolon and now you can see once i put
07:15 - the semicolon
07:16 - that our system.out.println uh gets
07:18 - highlighted and we can see that it now
07:20 - has syntax highlighting
07:21 - uh and syntax pretty much means any code
07:23 - that we write in the program
07:25 - so we have to make sure that whenever
07:27 - we're done writing a line we terminate
07:28 - that with a
07:29 - semicolon okay so now we've officially
07:32 - ridden our first program
07:33 - all it does is print hello world to the
07:35 - screen but how can we run this
07:37 - uh so first we're gonna have to save so
07:38 - i'm gonna hit ctrl s
07:40 - and to run this there's a little green
07:42 - button up here and it says run
07:44 - main.java so we're going to click that
07:46 - and you can see that down here a little
07:48 - thing popped up called console and we
07:50 - printed to the screen hello world
07:53 - now we've officially created our first
07:55 - java application
07:57 - very simple and that is how we go about
07:59 - setting up
08:00 - a new class and everything that we write
08:02 - for right now again remember is going to
08:03 - happen inside this method that's what
08:05 - we're calling it i'm going to explain
08:06 - that later
08:07 - public static void main we have to put
08:09 - in here
08:10 - now if you want to print another line
08:11 - you want to print something else after
08:13 - we can do that i'll show you how that
08:14 - works so i'm going to say
08:17 - system.out.println
08:18 - and i'll say like hello world 2. and if
08:20 - i save this
08:21 - and run again we get hello world and
08:23 - hello world 2.
08:25 - now that has been the introduction
08:27 - tutorial in the next video i'm going to
08:29 - go into
08:29 - data types and primitive data types and
08:32 - we're going to talk about like integers
08:34 - and strings
08:35 - and all that fun stuff so if you guys
08:37 - enjoyed the video and you're excited for
08:38 - the next one make sure you leave a like
08:39 - and subscribe and i will see you there
08:41 - as you can see we uh are right where we
08:43 - left off with printing two lines hello
08:45 - world and hello world 2 to the screen
08:47 - and in this video i'm going to be going
08:48 - over variables and data types the
08:50 - absolute fundamentals we have to
08:52 - understand before we can move on to
08:53 - anything more complex
08:55 - so let's talk about what a variable is
08:58 - now a variable just like in mathematics
09:01 - is something that holds a value
09:03 - now in our case that doesn't have to be
09:04 - just a number it could be a string
09:06 - it could be a boolean an integer like
09:09 - we're going to talk about the different
09:11 - values and those are what are
09:12 - known as data types or objects
09:16 - so let's start by just creating a
09:17 - variable
09:19 - to create a variable we need to first
09:21 - figure out what type our variable is
09:22 - going to be
09:23 - in this case i'm going to start with an
09:25 - integer and then we're going to go
09:26 - through all the different types and talk
09:28 - about the differences
09:29 - so to start we're going to type int i'm
09:32 - declaring that this variable that we're
09:34 - about to type out is going to be an
09:35 - integer
09:36 - we are then going to give a variable
09:38 - name now the variable name
09:40 - should contain typically just letters
09:43 - and underscores
09:44 - now i believe you can use numbers as
09:45 - long as it's at the end but in our
09:47 - purpose we're not going to do that when
09:48 - we create a variable name you have to
09:50 - make sure you do not use any spaces
09:52 - and you don't use any special characters
09:54 - as well so i'll go through a few
09:55 - examples of valid variable names and
09:56 - invalid variable names
09:57 - so a valid variable name for example
09:59 - could be hello
10:01 - that's valid because we don't have any
10:02 - spaces we don't have any
10:04 - special characters and there's no
10:05 - numbers in it okay now an invalid
10:08 - variable name would be something like
10:09 - hello name okay this whole thing as our
10:13 - variable name
10:13 - is invalid because it contains a space
10:17 - now if i try to put like a
10:20 - what do you call it percent sign like
10:21 - this or i try to put like an asterisk
10:23 - that is not a valid variable name so
10:25 - don't use any special characters
10:27 - you can end with an underscore you could
10:29 - start with an underscore if you want to
10:31 - but we're not going to be doing that in
10:33 - this case typically when you create a
10:34 - variable
10:35 - if you want to make a name be like two
10:38 - words
10:38 - the way you do it is you type like hello
10:41 - and then you would do a capital and then
10:42 - the next word or you would do an
10:44 - underscore representing a space and then
10:47 - next word okay so that's enough about
10:48 - valid variable names it's not super
10:50 - important right now
10:51 - so i'm going to create my first variable
10:53 - into hello world
10:54 - and that's going to be equal to by just
10:56 - putting an equal sign
10:57 - whatever integer i want so in this case
10:59 - i'm going to say 5 and then remember in
11:01 - java whenever we end the line so this is
11:03 - just saying my integer hello world
11:05 - is equal to 5 we need to terminate with
11:06 - a semicolon
11:08 - so there we go and we see we get int our
11:10 - variable name is now highlighted
11:12 - in yellow and there's no issues so if i
11:15 - let's just see what it says
11:16 - this very uh is never used okay that's
11:18 - fine
11:19 - so we've officially created a variable
11:22 - the variable name hello world
11:24 - now points to the integer 5. so
11:27 - to prove this to you i am simply going
11:29 - to print out the value of
11:32 - hello world like this okay
11:35 - so i'm going to say system.out oh that's
11:37 - a comma isn't it
11:39 - system.out.println and what we're going
11:41 - to do is we're going to say okay
11:42 - so hello underscore world that's our
11:46 - variable name
11:46 - and that variable holds five so when we
11:48 - print this we should be printing
11:50 - five the way this works in the computer
11:52 - right is it says okay hello world
11:54 - let's see where hello world is it's up
11:55 - here all right hello world is equal to
11:56 - five so we print that
11:58 - okay so there we go and we get five
12:00 - printed down here in the bottom of the
12:01 - screen
12:02 - now i want to show you something quickly
12:04 - and this is just going to go this is a
12:05 - really important fundamental thing a lot
12:07 - of people don't talk about in
12:08 - programming tutorials
12:10 - and it's kind of like order of
12:11 - operations or execution so
12:14 - i am going to now put my variable
12:16 - underneath
12:18 - my system.out.println okay so i'm first
12:21 - going to print hello world
12:22 - and then i'm going to set hello world
12:23 - equal to 5. hopefully
12:25 - you guys have realized what the issue
12:27 - might be here
12:29 - if not i'll talk about it really quickly
12:31 - and the problem is that
12:32 - i am trying to print the value of hello
12:34 - world before
12:36 - i've declared it because the in
12:37 - programming the way things work
12:39 - is unless you otherwise specify uh we're
12:42 - going to be reading from top
12:43 - to bottom and left to right just the way
12:45 - you'd read a book right
12:47 - so we first read this line
12:49 - system.out.println uh hello world
12:51 - and then we create hello world so here
12:53 - we don't know what hello world is
12:55 - so if we try to do this you can see
12:58 - it warns me there's an error i'm gonna
12:59 - say okay you know there's an error let's
13:00 - proceed anyways
13:01 - and you can see that down here we get a
13:03 - bunch of red text and it says
13:07 - hello world cannot be resolved to a
13:08 - variable because we haven't yet
13:11 - declared that variable so we have to
13:12 - make sure whenever we're referencing or
13:14 - using variables that we first have them
13:16 - declared
13:17 - somewhere above our like the line that
13:21 - we're using them in okay
13:23 - so there we go we've created a variable
13:24 - hello world we print that to the screen
13:26 - now let's create a few different
13:28 - variables and talk about what these
13:30 - types are so in case i didn't really
13:31 - specify int
13:32 - stands for integer and that pretty much
13:35 - stands for any
13:36 - number that does not have a decimal
13:38 - point so as soon as i put a decimal like
13:40 - this like 5.0
13:41 - this actually becomes a new data type
13:43 - and that data type is called
13:45 - a float now float stands for floating
13:48 - decimal point
13:49 - which means any number that has a
13:51 - floating decimal point so i'm going to
13:52 - say float
13:53 - uh let's see num 2 is going to be my
13:57 - variable name
13:58 - is equal to and in this case i'm going
14:00 - to say 5.0
14:03 - uh what's the issue here add cass from
14:06 - double to okay one second we're just
14:07 - gonna say double
14:08 - okay sorry i made a mistake there we're
14:10 - just gonna type double here
14:12 - as the name okay not float don't worry
14:13 - about float right now we'll talk about
14:14 - that later
14:15 - so anyways we have double num2 equals
14:18 - 5.0
14:19 - now double is exactly what i was
14:20 - explaining before anything that has a
14:22 - floating decimal point so even though
14:24 - this is still the exact same value as
14:26 - this in terms of mathematics
14:27 - because it has a floating decimal point
14:29 - in our computer is
14:31 - referenced as a double okay
14:34 - now there's some other data types as
14:37 - well that we're going to talk about so
14:38 - we have int
14:39 - we have double we also have something
14:40 - called boolean now boolean
14:43 - is true or false and these are going to
14:46 - be really important in the next few
14:47 - videos that we talk about so
14:49 - boolean i'm just going to say b as my
14:51 - variable name is going to be equal to
14:53 - and in this case i'm going to say true
14:55 - and again make sure i'm putting my
14:57 - semicolon now there's only two values
14:59 - that a
15:00 - uh that your a boolean data type can
15:03 - have
15:03 - that is true or false now why these are
15:07 - important is because
15:08 - based on the value of a boolean type
15:10 - we're going to be doing things later in
15:12 - our program like if b was equal to true
15:13 - we're going to print something otherwise
15:15 - we won't print something
15:16 - so that's really important so another
15:18 - data type
15:19 - that we have is known as char
15:22 - now char is any character okay
15:25 - so this is a little bit different from a
15:26 - string that i talked about in the last
15:28 - video but i'm going to talk about string
15:29 - as well so i'm going to say char
15:30 - c is equal to and whenever we create a
15:33 - character
15:34 - there's two ways that we can do it we
15:35 - can do it with unicode which you
15:37 - probably don't know what that is
15:38 - or we could do it with single quotation
15:40 - marks so by just simply hitting the
15:42 - single quotation marks we can put one
15:44 - letter
15:45 - in the single quotation marks and that
15:46 - is a character because that's what char
15:48 - stands for a character so like something
15:50 - on your keyboard
15:51 - in quotation marks now character could
15:53 - be for example
15:55 - nine in quotation marks so that's still
15:56 - a valid character
15:58 - um because it's in quotation marks it's
15:59 - different than the number
16:01 - like nine if i were to type that up here
16:03 - okay
16:04 - so any letter or character
16:08 - that goes into quotation marks is a char
16:10 - now we have to be careful because
16:12 - chars can only be one one character if i
16:14 - try to do like
16:15 - zero three you can see that we're
16:17 - getting red text and java is yelling at
16:18 - us and it's saying no that's not allowed
16:20 - because we can only have one thing all
16:23 - right now i just want to show you i want
16:24 - to go over again really quickly what the
16:26 - main difference is between
16:27 - this 9 and this 9 up here we've declared
16:31 - we're going to have an integer
16:32 - named hello world and it's set equal to
16:34 - nine okay
16:35 - that's what it is this is a character
16:38 - and since it's in quotation marks
16:39 - this is not the same thing as nine the
16:42 - way like the data types
16:43 - really do matter in this sense okay so
16:46 - i'm just gonna change this back to like
16:47 - h
16:48 - or something for now okay char c equals
16:50 - h
16:51 - so that is extremely important now
16:54 - string
16:54 - this is another data type it's a
16:56 - different kind of data type which we'll
16:57 - talk about in a second but to make a
16:59 - string
16:59 - we do string i believe with a capital
17:01 - we'll see and
17:04 - then we give a name so for our variable
17:05 - in this case i'm just going to say str
17:08 - is equal to and then at this time for
17:10 - string we use
17:11 - double quotation marks okay and i'm just
17:13 - going to say tim
17:15 - in here so chars single quotation marks
17:18 - and strings are double quotation marks
17:21 - okay
17:21 - and strings can contain anything in them
17:23 - so i could have like
17:24 - six seven three underscore uh star
17:27 - that's a completely valid string
17:29 - we can put any characters as long as
17:31 - they're with inside of these quotation
17:33 - marks
17:33 - okay same thing with the character if
17:35 - you put a nine in a string this is
17:37 - different than
17:37 - a nine like this okay so these are our
17:42 - main data types there are a few other
17:44 - ones but i'm not going to go into them
17:46 - right now because they uh
17:49 - they're a bit more complex than that we
17:50 - can handle right now so pretty much
17:52 - though you might notice that
17:54 - this string is highlighted as a
17:55 - different color than these
17:57 - and see in this orange doubles orange
17:59 - booleans orange charge orange
18:01 - why is string blue now the reason it's
18:04 - blue
18:04 - is because it's a different type of data
18:07 - type
18:08 - these four data types i talked about up
18:09 - top here are known as
18:12 - primitive and wow i really just did that
18:15 - i'm used to typing python
18:16 - uh primitive data types okay and what
18:19 - that stands for
18:20 - is not changeable okay and we're gonna
18:24 - we're gonna talk more about primitive
18:25 - data types and not primitive data types
18:26 - later on
18:27 - but just know that these ones that i
18:28 - talked about here are known as primitive
18:30 - in java and this one is not primitive
18:33 - okay
18:34 - so anyways let's just see now i'm
18:37 - printing out like some of these data
18:39 - types like what we get when we print
18:40 - them to the screen right
18:41 - so if i print for example c to the
18:43 - screen well you should guess what we're
18:45 - going to get
18:45 - we get h because that's c if we print
18:49 - str we get 9
18:52 - and so on now last thing i want to show
18:54 - you with variables is that we can
18:55 - actually make variables
18:56 - equal to other variables and we can add
18:59 - variables we can subtract variables
19:00 - and so we're going to be doing a lot in
19:01 - the next video but i want to just
19:03 - quickly introduce you
19:04 - so for example i want to create a new
19:05 - integer okay i'm going to say new
19:07 - integer
19:08 - and i'm going to call it let's just call
19:10 - it tim why not
19:12 - now i want this integer to be equal to 9
19:15 - okay but i don't want to type 9 out
19:17 - what i'm going to do is i'm actually
19:18 - going to type hello on your scroll
19:21 - underscore world like this now what
19:23 - we've essentially done
19:24 - is we've taken the value from hello
19:26 - world and we've assigned it to tim
19:29 - so now if we were to print tim to the
19:31 - screen
19:32 - we get the value nine now if i want to
19:34 - print
19:36 - uh hello world to the screen oh
19:39 - you can see that we are still getting
19:41 - the value of nine so now tim points to
19:43 - hello world which points a nine right
19:45 - so tim is equal to nine and hello world
19:47 - is equal to nine and
19:48 - we can do that and we can add variables
19:50 - together we can subtract variables we
19:52 - can do all kinds of cool things
19:53 - and that's really the point of variables
19:55 - right so we just have to make sure when
19:57 - we're doing this for example that we
19:58 - don't do something like this
20:01 - string tim equals hello world you can
20:03 - see here now it says
20:04 - cannot converge from int to string
20:06 - because the data type string is
20:08 - obviously not the same as
20:09 - nine so we can't do that until we learn
20:12 - about something called typecasting which
20:13 - will be in a future video
20:15 - so anyways that has been it for this
20:17 - video i hope you
20:18 - now understand what variables are how
20:21 - they work and how we can create them
20:23 - in java in the next video we're going to
20:25 - be talking about
20:26 - operations so adding variable
20:28 - subtracting dividing doing stuff like
20:30 - that
20:30 - and then we'll be moving on to some more
20:32 - advanced stuff as always if you guys
20:34 - liked the video please make sure you
20:35 - leave a like and subscribe to the
20:37 - channel i will see you again in the next
20:38 - one now in this video i'm going to be
20:39 - adding on to some of the stuff i did
20:41 - with variables in the last video and i
20:43 - am going to be talking about basic
20:44 - operations like plus
20:46 - minus subtraction division uh
20:48 - exponential
20:49 - all of that fun stuff so without further
20:52 - ado let's get started
20:54 - now what i'm first going to do is just
20:55 - talk about another way that we can
20:56 - create variables in java
20:58 - so earlier you you saw me do something
21:00 - like this into x equals
21:02 - six okay this is fine this works we
21:04 - already know this
21:05 - but there's another way that we can
21:07 - actually create this variable and to do
21:08 - that we can actually omit this equal six
21:11 - so if we do this we just say int x what
21:14 - happens now is we've declared that x is
21:17 - a variable
21:18 - uh it exists but we've not given it a
21:20 - value so we've declared it but we have
21:22 - not
21:22 - initialized it i'll show you what i mean
21:25 - by this by just doing
21:27 - system.out.println
21:29 - and we are simply going to print x and
21:31 - just see what we get
21:33 - oh i probably help if i spell to print
21:35 - correctly okay
21:37 - wow i really messed that one up print lm
21:39 - okay
21:40 - run this and you can see we are already
21:42 - warned that there is an error
21:44 - so we'll proceed but and it says the
21:46 - local variable x may not have been
21:48 - initialized so before we can actually
21:49 - use the variable x when we set it up
21:51 - like this we have to initialize it now
21:53 - to do that
21:53 - any line underneath this declaration we
21:56 - can just say x is equal to and then
21:58 - whatever value we want it to be as long
21:59 - as it's an integer value so in this case
22:01 - i'm going to say x
22:02 - equals 6. and now if we run the program
22:04 - everything works fine
22:05 - and we get 6. now obviously we can do
22:07 - this with every
22:08 - data type so if i do like char and
22:12 - char x right that's fine and i say char
22:14 - x equals
22:16 - single quotation marks f like that okay
22:19 - then we can print that out and that will
22:20 - work fine
22:22 - now what i want to talk about now is
22:24 - operations
22:25 - so i am going to create a few variables
22:27 - i'm going to say integer x
22:28 - equals 5 uh don't forget your semicolon
22:32 - integer y equals 7 and i'll say into z
22:37 - is equal to 56 okay
22:40 - and i'll create one more variable and
22:42 - this is where we're going to start
22:43 - talking so
22:44 - what i want to do now is i want to sum
22:47 - all of these
22:48 - variables so 56 7 and 5. but
22:51 - i don't want to write like 56 plus 7
22:55 - plus 5 okay because yeah that's the
22:57 - value of these variables this works fine
23:00 - but what if i were to change this
23:01 - variable y well that means i have to go
23:03 - down here and i have to change this as
23:05 - well to whatever i change y to
23:06 - what if i want to change x and y well
23:08 - that means i have to change both of
23:09 - these
23:10 - so there's a really cool thing we can do
23:12 - and we can just use the variable names
23:13 - and just add them up
23:15 - so we can say x plus y plus
23:18 - z like this okay and now our variable
23:21 - sum
23:22 - stores the value of the sum of these
23:24 - three variables and
23:26 - to prove it to you i will print it to
23:28 - the screen and you can see that we get
23:30 - 68 as our sum now
23:33 - furthermore if we wanted to take the
23:34 - difference of all these and subtract
23:36 - them
23:36 - all we have to do is simply replace this
23:38 - with a minus sign
23:40 - and we get negative 58 okay
23:44 - now to multiply things this is another
23:46 - operator we can do
23:47 - multiplication like this and i'll
23:49 - replace this one with multiplication and
23:51 - we'll multiply all these out together
23:52 - you can see we get uh 1960 as our value
23:56 - to divide we can use the uh forward
23:59 - slash now i'm not going to do that right
24:00 - now because that is kind of a different
24:02 - topic like there's a weird thing with
24:04 - division i have to talk about
24:06 - but that's how you do that so those are
24:08 - four basic operators now
24:10 - these work just like they work in math
24:13 - in terms of
24:14 - order of operations right so we're going
24:15 - to start off with exponents and then go
24:17 - brackets or
24:18 - brackets exponents division
24:21 - multiplication
24:22 - and so on through the process okay i
24:25 - assume you guys know order of operations
24:27 - so that means if i do something like x
24:30 - times
24:30 - y minus said what's first going to
24:33 - operate is
24:34 - x multiplied by y and then we're going
24:36 - to subtract z from whatever this value
24:38 - is
24:38 - now again if i switch this and i get
24:40 - like y multiplied by said
24:43 - what's going to happen first is y
24:44 - multiplied by z and then the subtraction
24:46 - is going to happen
24:48 - now for example if we have um the
24:51 - operators that have the same presence or
24:52 - the same
24:53 - i don't know like order of operation
24:56 - level
24:56 - i don't know what to call it um it's
24:58 - just gonna order it uh
25:00 - operate from left to right so it's gonna
25:01 - do x multiplied by y
25:03 - multiply by z so this is a common
25:05 - occurrence a lot of people understand
25:06 - this
25:07 - uh if we do division sign we're first
25:08 - gonna multiply x times y and then we're
25:10 - gonna divide by z
25:12 - afterwards okay so that's how that works
25:15 - now when we're whenever we're doing
25:16 - operations like this we can also add
25:18 - brackets in so if i wanted to for
25:19 - example
25:20 - uh say x multiplied by y and then
25:23 - divided by
25:24 - z i could do something like this by
25:26 - throwing brackets in here so now it's
25:27 - showing 100
25:29 - that we're going to multiply this before
25:31 - we divide and same thing if i did this
25:33 - now whatever's in the brackets is going
25:34 - to happen first and then i can divide by
25:37 - said
25:37 - and obviously we can embed more brackets
25:39 - in here so i can say like multiplied by
25:42 - y times y okay like get out as many
25:45 - brackets and layers as you want and
25:47 - that's totally acceptable and that
25:48 - totally works okay
25:51 - so now we are going to talk about
25:53 - division more specifically and then go
25:55 - into a few more operators because
25:56 - division works a little bit different
25:58 - uh in java is it just in general okay
26:02 - so if i want to divide 56 by seven so i
26:05 - want to divide
26:06 - z by y okay and i s
26:10 - some let's just do uh u okay
26:13 - i'm gonna call this u and i print this
26:15 - out to the screen
26:16 - 56 divided by seven gives me a value of
26:19 - eight
26:20 - that is because our data type for the
26:22 - variable u which
26:24 - is holding the value of z and y
26:27 - or is that divided by y is an integer so
26:30 - it actually isn't
26:31 - able to give us a floating point number
26:33 - although we know
26:34 - that this number is a floating point
26:36 - number or is it
26:37 - let's see let's make sure this is not
26:39 - messed up 57 divided by this okay
26:42 - yeah so it can't give us a floating
26:43 - point number because this is well and
26:46 - into data type so it assumes that we
26:47 - want an integer in return so therefore
26:49 - it's just going to give us the value
26:50 - and terminate all the decimals okay so
26:52 - say this number's like eight point
26:54 - something
26:54 - just gives us eight right removes the
26:57 - remainder now if i want to get decimal
26:59 - points which you will want to do most of
27:00 - the time
27:01 - i could try to do something like this
27:04 - okay double
27:06 - of u equals z divided by y and you mean
27:09 - okay that makes sense double like it's
27:11 - going to give us the floating point but
27:12 - watch what happens
27:13 - if i run this we just get 8.0 well we
27:16 - know that 57 divided by 7
27:17 - is not 8.0 it has some decimal component
27:20 - to it that i couldn't tell you right now
27:22 - but why aren't we getting that well that
27:24 - is because the two data types
27:26 - that we are dividing are both integers
27:30 - which means when we get a value back
27:31 - from this
27:33 - it's going to be an integer value and
27:35 - then all we do is convert it into a
27:37 - double because we have this
27:38 - double here okay just by adding that dot
27:40 - zero so how can we ensure that we get a
27:42 - floating point
27:44 - well there's two things we could do we
27:46 - could first change the bottom
27:48 - to be a double and we could change the
27:50 - top to be a double so i could
27:53 - do like this okay it's like double and
27:56 - could change this to be a double all
27:58 - right and if we have both of these
27:59 - double and we try this now
28:02 - you can see that we get our decimal
28:04 - point okay
28:05 - and it shows up and gives us like
28:07 - whatever that is now what if i just make
28:10 - one of these so i say into y and this is
28:12 - double let's try this now
28:13 - you can see we still get our floating
28:16 - point
28:17 - that is because if one of the values
28:19 - that we're dividing here is a double
28:21 - it's going to automatically make the
28:23 - whole thing a double so
28:24 - one of them is a double everything
28:26 - becomes a double and this is the way it
28:27 - works for all of the operations
28:29 - so if you have double u and in this case
28:32 - we say like
28:34 - x times y or let's say x
28:37 - times z since z is a double x is not
28:40 - we're still going to get a double value
28:42 - so if we run this you can see that we
28:43 - get this little point o
28:44 - so if one of our operands is a double
28:46 - then that means everything is going to
28:48 - be a double when we
28:50 - use it or whatever okay now exponent
28:53 - um the way that we can do exponent is we
28:55 - have to bring in module i believe um but
28:58 - it's like
28:58 - math dot pow
29:01 - and then in here you put the uh
29:04 - what do you call the bass and the x the
29:06 - exponent there's not a
29:08 - star star like in most languages okay
29:10 - i'm to say
29:12 - ins of d is equal to
29:15 - math.pal and here i'm simply going to
29:18 - raise
29:18 - x to the power y all right so we get
29:20 - math.pal let's see what is this saying
29:22 - convert
29:23 - okay so let's do this
29:30 - cannot convert form double to form int
29:33 - interesting why it's telling me that
29:35 - let's just try this maybe
29:39 - there we go okay so whenever we get x uh
29:41 - x
29:42 - exponents apparently they have to be in
29:43 - the form double okay didn't know that
29:45 - but all right
29:46 - uh so now if i want to print out d
29:48 - what's going to happen
29:50 - is we get the exponent for this okay
29:53 - so math.how this is your base and this
29:55 - is what you're raising the exponent to
29:57 - so 5 to the 7 apparently is equal to
29:58 - that
29:59 - okay so that is pretty much it
30:02 - for operators i guess obviously you can
30:06 - have as many operators in one line as
30:07 - you want you now
30:08 - understand how things work in terms of
30:10 - doubles and in so if one of the
30:11 - operators
30:12 - in the whole chain of operators or
30:14 - offers variables that you're adding
30:16 - subtracting dividing whatever
30:17 - is a double then that means you're going
30:19 - to get a double value back for 100
30:22 - if all of them are integers that means
30:23 - you're going to get an integer value
30:24 - back
30:25 - now same thing here so i have let's
30:27 - change y
30:28 - back to double and let's change u
30:32 - to be int okay so it says into you
30:35 - x times it so now that's x times x
30:38 - times y okay so now you can see we're
30:40 - getting
30:41 - an error here cannot convert from double
30:43 - to int and that is because we're trying
30:44 - to say
30:45 - that the integer u is equal to x times y
30:48 - but y is a double value so when we get a
30:51 - value back here it's going to be double
30:53 - so we can't convert that into an integer
30:56 - just by doing this and there's another
30:57 - way that we can do it that i'm going to
30:58 - show you in a second okay
31:00 - so we would have to make sure that this
31:02 - stays as double and it's nice in this
31:04 - ide it tells you when you made a mistake
31:06 - like that because a lot of times you
31:06 - might not really
31:07 - see that in your program okay now i'm
31:10 - quickly going to go over something
31:11 - called typecasting
31:12 - we're going to talk about this a lot
31:14 - more later but i'm just going to
31:16 - show you like fairly quickly how this
31:19 - works i'm just going to delete this line
31:20 - and we're going to turn these back into
31:23 - integers
31:25 - okay so if i want to do something like x
31:27 - divided by y
31:28 - okay and i want to make sure that i'm
31:30 - getting that value
31:32 - the decimal point value okay like so a
31:34 - double rather than converting
31:37 - these like the declaration of our
31:38 - variable to a double
31:40 - something we can do called typecasting
31:42 - and to typecast
31:43 - we are changing inline without changing
31:46 - the declaration the type of the variable
31:48 - the way to do this is to simply put in
31:50 - brackets the
31:51 - type that you want to convert your
31:53 - variable into and then directly
31:54 - afterwards is
31:55 - the variable you want to convert so in
31:56 - this case it's double and then we have y
31:59 - okay so if i run this now and i print
32:02 - u instead of d you can see that we get
32:05 - the decimal value that we're looking for
32:07 - if i remove this double right then
32:11 - we do not get that or we do just because
32:13 - it says double but
32:14 - you guys see the point okay so anyways i
32:17 - think that is going to be it for
32:19 - this video in the next video what are we
32:21 - going to be covering got to look at my
32:22 - guide here we're going to be talking
32:24 - about input and
32:25 - output so how can we actually get input
32:26 - from the user in the console and then
32:28 - doing things based on that input
32:29 - printing them to the screen adding
32:30 - subtracting whatever okay
32:32 - so if you guys enjoyed the video as
32:33 - always please make sure you leave a like
32:35 - and i will see you again in the next one
32:36 - so in this video
32:37 - i'm just gonna be teaching you one more
32:39 - operator that i forgot to mention in the
32:40 - last video
32:41 - and we're going to be talking about
32:42 - getting input from the user using
32:44 - something called a
32:45 - scanner now this scanner is going to
32:47 - allow us to grab like text
32:49 - numbers strings all that fun stuff from
32:51 - the user and then do something with that
32:53 - input
32:54 - and that is kind of the basis of
32:55 - programming right based on what a user
32:57 - does we want to do something in most
32:58 - cases
33:00 - so the first thing that we're going to
33:02 - do is just teach this other operator it
33:04 - is the remainder operator it's not going
33:05 - to take me very long
33:07 - in this case i'm just going to say intex
33:09 - is equal to
33:10 - 56 modulus and this is what the name of
33:13 - the operator is modulus it's simply a
33:15 - percent sign
33:16 - pick a number in this case i'm going to
33:17 - pick five
33:19 - okay so what this remainder operator
33:21 - does it's called
33:22 - modulus okay some people like to call a
33:24 - remainder operator and it's simply a
33:26 - percent sign
33:27 - gives us the remainder of this division
33:29 - so this division is actually equal to
33:31 - uh what do you call it 56 divided by 5
33:34 - should give us
33:34 - 11. okay 11 remainder 1 is what this
33:38 - division actually is equal to
33:40 - so if we print x we should get a value
33:43 - of 1.
33:44 - and there we go and that's literally all
33:47 - the remainder operator is gives you the
33:48 - remainder of a division
33:50 - i don't think i need to talk about it
33:51 - too much more i'm sure you guys want to
33:53 - get into the input so i will leave that
33:55 - alone for now
33:56 - okay so let's get rid of this line and
33:58 - now let's talk about how we can get
34:00 - input
34:01 - so using a scanner is what we're going
34:03 - to do so the first thing we need to
34:04 - actually do is at the top of your
34:05 - program you might notice i have a new
34:06 - line here
34:07 - now this says import java.util.scanner
34:11 - i need you guys to type this out for me
34:13 - java.util.scanner make sure you add your
34:15 - semicolon
34:15 - because this is what we're going to be
34:16 - using to get input and whenever we use
34:18 - certain tools in java
34:20 - we need to import them at the top of our
34:22 - program
34:23 - so that we can simply just type like
34:25 - certain data types and
34:26 - we'll get into this later when we talk
34:28 - about classes and methods and all that
34:30 - stuff
34:30 - okay so once we've done that we need to
34:32 - set up a new scanner object
34:34 - so we're going to type scanner the name
34:36 - of our scanner is going to say sc
34:38 - is equal to a new scanner
34:41 - and inside of the scanner we're going to
34:43 - type system
34:44 - dot in okay in this brackets this might
34:47 - seem confusing
34:48 - but all this is doing is it's saying
34:50 - scanner is a data type just like string
34:52 - is the data type
34:53 - just like boolean's data okay it's a
34:55 - different type of data type but it is in
34:57 - a data type
34:58 - its name is sc and instead of typing
35:01 - like one
35:02 - or like putting quotation marks and
35:04 - typing a string we're going to say well
35:05 - it's equal to a new
35:07 - scanner and what this scanner is going
35:09 - to be is
35:10 - system.in which means typing on your
35:12 - keyboard and there's different types of
35:13 - scanners
35:14 - which we'll get into later not in this
35:16 - video
35:17 - so once we've set up our scanner we need
35:20 - to actually
35:21 - uh use the scanner so how can we do this
35:24 - so what i'm going to type now is i'm
35:25 - going to say
35:27 - let's say string scanned
35:31 - is equal to sc dot next
35:35 - and i think we can just use next yeah
35:38 - so what this does is we're creating a
35:41 - new variable string
35:42 - it's called or it's a string type called
35:44 - scanned and it is going to get
35:46 - the next uh stream of input from this
35:49 - scanner object okay
35:51 - so sc.next is what allows us to get a
35:53 - string from the user
35:55 - so i'm just going to print out scans
35:57 - after we get it because i want to show
35:58 - you what happens so i'm just going to
35:59 - run the program and illustrate and we'll
36:00 - talk about it
36:01 - so now you can see if i go down here my
36:03 - cursor uh shows up and i'm able to type
36:06 - this because i'm going to type hello
36:07 - okay watch
36:08 - watch what happens when i hit enter it
36:10 - prints hello
36:11 - underneath it so hello which we typed in
36:15 - was the input it got scanned in by the
36:18 - scanner object
36:19 - using sc.next it got stored in the
36:21 - variable scanned and then we were able
36:23 - to print scanned out to the screen okay
36:26 - pretty straightforward that's how it
36:28 - works with strings
36:30 - now watch this if i type one one works
36:33 - fine
36:34 - but i i just need to show you that now
36:36 - i'm going to do this with indicate
36:38 - so i'm going to say int scan equals
36:40 - sc.next well what's what's happening
36:42 - what's wrong
36:44 - well the issue right now is we are
36:47 - trying to
36:48 - turn a string which is which is what
36:50 - this returns to us
36:52 - into an integer so we can't actually do
36:54 - that because what
36:55 - per say we proceed we just run into an
36:58 - error we cannot convert from string to
37:00 - int
37:01 - because what this method gives us is a
37:03 - string
37:04 - now if we wanted to be able to get an
37:06 - integer from the user for them typing in
37:07 - we have
37:08 - to use a another method okay and this
37:11 - one is called
37:12 - next int and now you can see we're
37:14 - getting no more red lines everything
37:15 - seems to be working fine
37:17 - sc.nextint and if we run this
37:21 - then we type like 54 that works fine
37:23 - prints that out for us
37:25 - watch what happens though if i try to
37:27 - type in something like hello so there's
37:28 - no errors right now like java is not
37:29 - telling us there's anything wrong
37:31 - if i type hello we get an issue now
37:33 - that's because
37:34 - this was expecting me to type in a
37:37 - integer
37:38 - and what happens in here like this
37:39 - little line of code what it actually
37:41 - does
37:41 - is it tries to convert what i'm typing
37:44 - in which automatically comes in as a
37:45 - string into an integer so when it tried
37:47 - to do this
37:48 - it tried to convert hello into an
37:49 - integer and no one not you not you
37:52 - not you or me knows how to convert hello
37:54 - into an integer so it threw us an error
37:55 - and said no that's not allowed you can't
37:57 - do that
37:58 - so i'll show you what we can do now if
38:00 - we want to get booleans and other types
38:02 - and i'll show you a way to work around
38:03 - an
38:04 - error like this okay so if we want to
38:06 - get a boolean value
38:07 - we could type boolean scan equals next
38:10 - and would you look at this boolean
38:12 - that's literally the name to get a
38:14 - boolean
38:14 - sc.net boolean okay so let's run
38:18 - this now note a boolean has to be true
38:21 - spelled correctly or false with lower
38:23 - cases i'm pretty sure
38:24 - so true that works fine but if i try to
38:27 - type like hello or
38:28 - five or something in there that's going
38:30 - to crash it's going to give us an issue
38:31 - okay
38:32 - so boolean that's how you do that one if
38:34 - we want to get a double you could do
38:35 - double
38:36 - equals next and guess what this one is
38:40 - next double there you go and now it's
38:42 - going to expect a number of some sorts
38:44 - like six would work fine but i'm
38:46 - just gonna do 6.3 and it prints out 6.3
38:49 - let's actually just test 6
38:50 - vd6 yeah it just gives a 6.0 so that
38:52 - works fine okay
38:53 - um to getting doubles now i want to work
38:55 - around the issue of
38:57 - uh what happens like we get that crash
38:59 - okay we don't we don't want that crash
39:01 - so how can we fix that if for
39:03 - per se when it's expecting a double i
39:04 - type in like hello
39:06 - well what we should do is always get a
39:08 - string so we should always say
39:10 - sc.next and always turn this into a
39:13 - string and that's because a string can
39:15 - be anything like anything we type in
39:17 - here
39:18 - is fine to be a string because remember
39:19 - a string is simply anything in double
39:20 - quotation marks so if i type
39:22 - true although yeah we know it's a
39:24 - boolean it's in the quotation mark so
39:26 - it's really a string okay
39:27 - if i type 1 that's a string type 1.6
39:31 - it's a string like anything can be
39:32 - converted into a string
39:34 - pretty much so that works fine for us
39:36 - now once we have it as a string
39:38 - we can then convert it into an integer
39:41 - sorry i had to take a quick cut there
39:43 - but what we're going to do
39:44 - now is we're going to attempt to convert
39:47 - this value
39:48 - into a different type so in our case i
39:50 - want to convert it into an integer
39:52 - so way that we can do that is we first
39:53 - need to set up a variable so i'm going
39:54 - to say into x in this case
39:56 - is equal to scanned now
39:59 - i need to put something with this scan i
40:02 - can't just say in x equals scanned i
40:04 - can't i can't just do that it's not just
40:06 - going to be able to convert that for me
40:07 - it doesn't know how to do that
40:08 - so what we need to do here is actually
40:11 - do
40:12 - dots and or sorry we need to type here
40:17 - integer dot parse int
40:20 - okay and then inside of the brackets for
40:22 - parseint we're going to put
40:24 - scanned and what this is going to allow
40:27 - us to do is well convert into an integer
40:29 - and if you guys just highlight over this
40:30 - if you don't know what it does it you
40:31 - can actually read through the
40:32 - definitions in this case
40:33 - it's going to say parses the string
40:34 - argument as a sine decimal integer the
40:37 - character
40:38 - in the string must be all decimal digits
40:40 - except the first character may be an
40:41 - ascii minus sign okay so we can tell you
40:44 - it tells you exactly what this does
40:45 - it tells you what integer does uh
40:47 - integer is a class
40:48 - so yeah it they'll convert that for us
40:51 - so then if i want to print
40:52 - x to the screen that would work fine now
40:55 - the thing is though and this is what
40:56 - we're going to be doing in the next
40:57 - video
40:58 - is we still run into the same issue
41:01 - because
41:02 - again like now if i type something like
41:04 - hello
41:06 - we still get a crash because how do we
41:07 - can convert hello
41:09 - into an integer well we should really
41:11 - first check
41:12 - if the value is an integer and i'm going
41:15 - to be showing you in the next video i
41:17 - believe
41:18 - the next one or the one after that how
41:19 - we can actually do that using if
41:21 - statements and else statements
41:22 - and uh error catching later on so stay
41:25 - tuned for that but this is the way for
41:27 - right now if you know you're going to be
41:28 - getting an integer
41:29 - that you can convert it in or obviously
41:31 - you could just do next
41:32 - int and turn this to an inch like that
41:35 - and everything works fine for you
41:37 - anyways that has been it for this video
41:40 - uh and again in the next video we're
41:42 - gonna be going over conditional
41:43 - statements
41:43 - and then probably we'll be going into uh
41:46 - if and else is
41:47 - the one after that anyways if you guys
41:49 - enjoyed as always please make sure you
41:50 - leave a
41:51 - like and subscribe and i'll see you
41:52 - again in the next video so in this video
41:54 - we're going to be talking about
41:55 - comparison
41:56 - operators uh select greater than less
41:58 - than equal to
41:59 - not we're going to be talking about
42:01 - chaining conditionals together
42:02 - uh which you'll see if you don't really
42:04 - understand what that is right now
42:05 - throughout the video
42:06 - and how we can use those boolean
42:08 - variables to
42:09 - do certain things for us so that's what
42:11 - we talked about in the first few videos
42:12 - and if you guys don't really know
42:13 - what the point of boolean is well this
42:15 - video will show you so without further
42:17 - ado
42:17 - let's get started so i'm just going to
42:19 - start off by typing a few numbers here
42:21 - because it's just the easiest way to
42:22 - compare things
42:23 - to start and then we'll do some other
42:25 - stuff so i'm going to create three
42:26 - variables
42:27 - they're integers uh x is six
42:31 - y is seven and z is ten now i'm going to
42:33 - create a boolean variable
42:35 - so boolean and let's call it compare
42:38 - and we'll just set that blank for right
42:40 - now so what i wanna do
42:42 - is i want to compare x and y and z
42:46 - using some different comparison
42:48 - operators so in java i'm going to write
42:49 - them out here
42:50 - we have i believe four main comparison
42:53 - operators four or five so
42:55 - i'll type them on we can see so the
42:56 - first one is greater than
42:58 - and then we have less than we have equal
43:00 - to oops
43:01 - we have greater than or equal to less
43:03 - than or equal to and
43:05 - not equal to now i know i just went
43:07 - through those fast but they're pretty
43:08 - straightforward this
43:09 - is simply going to state whether
43:10 - something is greater than the other
43:12 - thing
43:13 - this is less than the other thing or
43:14 - whatever way you have it right
43:16 - this is is equal to so the double equal
43:19 - sign is different than the single equal
43:21 - sign
43:21 - double equal sign is when you're
43:22 - comparing two values to see if they're
43:25 - the same and the single equal sign like
43:26 - this one here
43:28 - is if you're assigning a value so make
43:29 - sure you remember that because a lot of
43:31 - people when they compare things
43:32 - they forget to add the other equal sign
43:34 - and they just use one and they end up
43:35 - running into some issues
43:37 - okay so greater than or equal to pretty
43:39 - straightforward less than or equal to
43:40 - same thing and not equal to is an
43:42 - exclamation point and an equal sign
43:44 - now i'm going to go through these and
43:46 - show what all these do so i guess
43:48 - actually i'll leave that there
43:49 - and because i just remember that i have
43:50 - been forgetting to teach you this
43:52 - if you do two slashes in java this
43:55 - stands for a comment
43:56 - and a comment is simply something that
43:58 - the computer is going to ignore
43:59 - and it's sim it's just there for the uh
44:01 - the programmer so they can look at it
44:03 - and be like
44:04 - okay this is what this line of code does
44:06 - um
44:07 - whatever the computer doesn't care so
44:09 - whenever it sees a line that has starts
44:10 - with two slashes this is how you do a
44:12 - comment
44:12 - uh it just ignores that line and moves
44:14 - on so that's simply what a comment is
44:16 - and it just grays out in here to show us
44:17 - that that's a comment
44:18 - okay so compare so i'm going to compare
44:22 - x and y and i want to say see if x is
44:25 - less than y so say
44:26 - if x is less than y and what this
44:30 - statement right here that we're typing
44:31 - here is going to return a value of
44:32 - either true or false
44:34 - so we can look at this we say well 6 is
44:36 - that less than 7
44:38 - yes it is that should give us a value of
44:39 - true so if we print compared to the
44:42 - screen
44:43 - then you can see we get true like that
44:46 - now if i flip this around and i say
44:47 - greater than okay what do you think
44:50 - we're going to get
44:51 - well we get false it's pretty
44:53 - straightforward to compare the two
44:54 - values to see if they're the same
44:56 - we can do two equal signs and in this
44:58 - case we get false
45:00 - and now this this comparison operator
45:02 - some people get confused by but if i do
45:04 - not equal to what this is going to tell
45:07 - me is if the two values on the left side
45:08 - and the right side of the comparison
45:10 - operator
45:11 - are not the same so if they're not the
45:12 - same i get true if they are the same i
45:14 - get false so in this case
45:16 - they're not the same so we should be
45:17 - getting true okay
45:19 - and i guess i can show you greater than
45:22 - equal to but
45:22 - they're pretty straightforward in terms
45:24 - of how they work at least on numbers
45:25 - okay
45:26 - now these work fine so greater than or
45:28 - equal to less than or equal to on
45:30 - numbers but what if i want to compare
45:31 - strings so i'm just going to change
45:34 - x and y i'm just going to make two
45:35 - strings here i'll say
45:37 - oops string x i will say hello
45:42 - and string y
45:45 - and this is equal to high okay
45:49 - so see now i'm getting this blurred out
45:52 - or this red line here it's saying
45:53 - the comparison operator greater than or
45:55 - equal to is undefined for strings
45:58 - so the only ones that i'm allowed to do
45:59 - on strings at least for right now that
46:01 - we're going to talk about
46:02 - are two equal signs or not equal to
46:05 - okay and not equal to is simply going to
46:08 - say right
46:09 - if the strings are not the same and if
46:11 - they are the same so in this case i say
46:12 - not the same
46:13 - i'm going to get true if i try to say if
46:15 - they are the same
46:16 - i get false now i want to just show you
46:19 - one thing here if i type hello
46:21 - and i add a capital o at the end of
46:23 - hello like this
46:24 - do we think that this is the same as
46:26 - hello with all lower cases or not
46:28 - well i'll show you it is not so capital
46:32 - letters do
46:33 - matter in programming right and let's
46:35 - say with variable names like the capital
46:36 - variable y
46:37 - is different than the lowercase variable
46:39 - y okay so that's how we can compare
46:41 - those
46:42 - and i want to see actually can we use
46:44 - greater than
46:45 - no we can't use greater than or less
46:46 - than on strings either okay
46:48 - so what i'm going to do now is i want to
46:51 - chain
46:51 - multiple conditions together so i'm
46:53 - going to show you the and operator the
46:55 - or operator
46:56 - and the not operator and these are how
46:59 - we can add
46:59 - multiple conditions together to get one
47:02 - like main
47:03 - condition if that makes sense i'm going
47:05 - to change these back to
47:06 - two numbers might be faster just to type
47:08 - them out into x equals what did i have 6
47:11 - into y equals let's just do like 23 why
47:14 - not okay
47:15 - so now i'm going to compare multiple
47:17 - things at once so i first want to
47:19 - compare
47:20 - if x is greater than y but i also want
47:22 - to compare if
47:23 - z is greater than x say i want to check
47:26 - two things perfectly valuable in many
47:27 - cases you'd want to do that
47:29 - the way that we can do that in java to
47:31 - compare if two
47:32 - things are the same is using this and
47:34 - operator and the and operator
47:36 - is looks like this so it's these two and
47:38 - signs okay
47:39 - and then we have to add another
47:40 - condition after this in this case i'm
47:42 - going to say
47:43 - if z is let's just say z is less than y
47:47 - okay you can see that's fine we're not
47:49 - getting any red lines
47:50 - and what this does is it's going to
47:51 - compare the operation on the left side
47:54 - it's going to do the comparison on the
47:55 - right side and then we're going to end
47:56 - up getting two values
47:58 - so in this case x is greater than y so 6
48:00 - is that greater than y no we're going to
48:01 - get false so i'll just type it out as if
48:04 - this is what's happening in the computer
48:05 - right and then is z less than y
48:08 - yes it is so we get true
48:11 - like this okay now we have a false
48:14 - and we have a true but we have this and
48:16 - operator in between them
48:17 - what this and operator is going to do is
48:19 - it's going to check if both of the
48:20 - conditions on the left side and the
48:22 - right side are true
48:23 - if they are both true it returns true to
48:25 - us if they're both
48:27 - or if one of them is false or both of
48:29 - them are false then we get a false value
48:31 - so in this case
48:32 - since this one is false we're going to
48:34 - get a false value because both of them
48:35 - have to be true for this to evaluate
48:37 - to true so i'll show you if i do this
48:40 - okay
48:41 - and i print this to the screen you can
48:42 - see we get a false value because this is
48:44 - saying
48:44 - if this and this are true then the whole
48:48 - thing is true okay now another operator
48:51 - that we have is the or operator
48:53 - and the or operator is two straight up
48:55 - lines like this i don't know what
48:56 - they're actually called uh
48:58 - the key for that but anyways so this is
49:01 - going to do kind of it's similar to and
49:03 - but in the other way around if one of
49:05 - the two conditions are true
49:06 - the whole thing is going to be true
49:09 - otherwise if both of them are false
49:11 - it's false right so the way that
49:15 - we can determine this again right is
49:16 - we'll do this condition we'll see what
49:17 - this is equal to and then we'll see what
49:18 - this is equal to and if one of them are
49:20 - true we get a true value so
49:21 - let's run and there we go you see we get
49:23 - a true value
49:25 - now we have a not operator
49:29 - now what not does is simply going to
49:30 - reverse anything
49:32 - and this is the way i like to think
49:33 - about it whatever you have if you see
49:34 - the not just reverse it
49:36 - so what this does is it's going to say
49:38 - if this condition
49:39 - is not true then we get uh
49:43 - false or if this condition is false
49:45 - sorry so not true
49:46 - then we get true other way around if
49:48 - this condition is true then it's false
49:50 - because it's checking if it's not true i
49:53 - hope that makes sense you kind of just
49:54 - have to
49:55 - play with it to make sense of it but in
49:57 - this case since we get a true value
49:59 - and we have this exclamation point which
50:00 - is our not operator
50:02 - it is going to give us false as you can
50:03 - see here we get false now if in here i
50:06 - were to put
50:08 - a false value so let's literally i'll
50:10 - just show you by typing in the value
50:13 - i say not and then false in there you
50:15 - can see that we get a true value
50:17 - so it simply just reverses like anything
50:19 - that you're looking at
50:20 - now i want to show you that we can
50:22 - actually combined all of these operators
50:24 - together
50:24 - so what we can do is we can use like
50:26 - ands and orders and we can have an
50:28 - infinitely long chain of a condition
50:30 - that will eventually evaluate to true
50:32 - now this is actually some kind of like
50:33 - math problems you have to do typically
50:35 - in university i'm going to have to do it
50:36 - next semester
50:37 - where you have like a ton of different
50:39 - conditions and you have to figure out if
50:40 - you're going to get true or false based
50:42 - on them
50:42 - so i'll show you like a pretty basic
50:43 - example so i'll say if
50:45 - x is less than y and
50:49 - y is greater than z or
50:53 - z plus 2 is less than 5
50:56 - or what do you call it like x plus
51:00 - 7 is greater than y okay so i just typed
51:03 - a bunch of conditions right
51:05 - how do we determine which ones which of
51:08 - these are going to evaluate first
51:10 - well that is a good question and
51:11 - typically you'd never type it like this
51:12 - because just looking at this like even
51:14 - i'm looking at it right now after i just
51:15 - typed it i'm like
51:16 - wow okay how do i determine uh
51:19 - which one of these is going to happen
51:21 - first typically you put things in
51:22 - brackets so i would say something like
51:24 - this it's like x and y
51:25 - okay so i have this first condition now
51:27 - right you put in brackets it's going to
51:29 - evaluate this and in this case we'll get
51:31 - i'm not going to bother doing the actual
51:32 - evaluation but let's say we get true
51:34 - okay
51:35 - or so we have true or whatever this
51:39 - evaluated with this is so what this is
51:41 - going to do now
51:42 - is it's going to look at z plus 2 if
51:44 - that's less than 5.
51:46 - if that's true then we get true or and
51:48 - then whatever this is
51:50 - and then we could treat this as if this
51:51 - is in brackets like this okay
51:53 - so now the way that this would work is
51:55 - we do everything in brackets here we get
51:56 - a value of like true or false
51:58 - we do everything in brackets here we get
51:59 - a value of true or false and then we'd
52:01 - see if either of them are true
52:03 - and return that value so you know what
52:04 - let's just print it to see what we get
52:06 - we get true okay i don't even know how
52:08 - that worked to be honest
52:10 - and yeah that's how we could do that we
52:12 - can also throw knots in here too so if i
52:14 - wanted to throw a knot like this
52:15 - then we can do that now typically you're
52:17 - not going to see
52:18 - massive chained conditionals like this
52:20 - because of the exact problem we're
52:22 - running into it's difficult
52:23 - to determine what they are by just
52:25 - reading it and you'll see when we go
52:26 - into if and else statements in the next
52:28 - video
52:29 - how we can use these conditions to
52:30 - evaluate certain things i just want to
52:32 - show you that you can
52:34 - combine multiple things and for example
52:36 - i don't only have to use variables you
52:37 - can see that here i put
52:38 - z plus 2 less than 5. that's a perfectly
52:40 - valid condition
52:42 - that works perfectly fine could change
52:43 - this is equal to 5 right um you can add
52:46 - constants like i could just say two is
52:48 - equal to five if i wanted to
52:50 - but that's fine you can compare with
52:52 - constants and with strings just remember
52:53 - you can do less than or equal to
52:55 - or sorry not less than not not equal to
52:57 - or equal to
52:58 - and you can compare floats with ins and
53:01 - you'll see as we continue going through
53:02 - the video it's too long to go through
53:03 - all of them right now
53:05 - anyways that has been it for this video
53:06 - in the next video we're gonna get into
53:08 - if else and l-if statements and yeah if
53:11 - you guys enjoyed please make sure you
53:12 - leave a like and i will see you in the
53:13 - next one in this video we are going to
53:14 - be going over if
53:16 - else and l if statements in java so
53:19 - quickly uh just i want to fix a really
53:21 - small mistake i made in the last video
53:22 - so if you guys don't know i
53:23 - am like a python programmer typically so
53:26 - i'm doing java obviously but python is
53:28 - like my first language so i'm used to
53:29 - being able to use two equal signs on
53:31 - pretty much anything because that's what
53:32 - you can do in python
53:33 - but in the last video i showed you using
53:35 - two equal signs on strings
53:36 - now that's not incorrect to do that but
53:39 - it's not going to work the way you
53:40 - think right now so if you want to
53:42 - compare if two strings are
53:44 - logically the same like the actual
53:46 - string values are the same what you
53:47 - should actually do is say you have a
53:48 - string so
53:49 - s in this case uh you have to do dot
53:52 - equals okay
53:53 - and then inside of this equals here
53:55 - you're going to put the string that you
53:56 - want to compare it to or you're going to
53:57 - put another variable which is a string
53:59 - so in this case if i want to say if like
54:00 - my scanner object which i've just typed
54:02 - out before this video is equal to hello
54:04 - this is how i would do it with this dot
54:06 - equals sign
54:07 - not the two equal signs you the two
54:10 - equal signs isn't wrong but it's going
54:11 - to give you a different answer
54:13 - and we will talk about that in future
54:14 - videos but it's too advanced to go into
54:16 - right now so just remember if you want
54:17 - to compare two strings
54:18 - use dot equals my apologies about that
54:20 - from the last video
54:22 - so what we want to do now is we're going
54:24 - to be doing using if and else statements
54:25 - so pretty much
54:27 - if something happens do this otherwise
54:30 - do this and this is the basis of
54:33 - programming
54:34 - uh using conditions based on like user
54:36 - input or based on certain events that
54:37 - happen we're going to do
54:39 - different things right so they're really
54:41 - important to understand
54:42 - so first of all what i'm doing here is
54:43 - i'm just getting i'm just setting up a
54:45 - new scanner object i'm just going to get
54:47 - input from the user we've already talked
54:48 - about this and what i want to do is i
54:50 - want to
54:51 - check that user's input and based on
54:53 - what they type in i want to do something
54:55 - so the basic syntax for if and else is
54:57 - in java is you simply type
54:58 - if you put brackets and inside of these
55:01 - brackets is going to be your condition
55:03 - and this is why i spent so much time
55:04 - talking about conditions in the last
55:05 - video
55:06 - the condition here is if this condition
55:08 - evaluates to true
55:10 - whatever's inside of what i'm going to
55:11 - show you here whatever's inside of these
55:13 - curly braces is going to happen so let's
55:15 - start with the condition
55:16 - i'm going to say if s dot equals not to
55:19 - equal signs
55:20 - and in this case i'm going to say tim so
55:23 - if the user types in tim
55:26 - when we're when we prompt them for input
55:28 - then i want to do something
55:30 - and what's going to happen is inside of
55:31 - these curly braces and this
55:33 - denotes a block so this is known as like
55:35 - an if statement or an if block
55:37 - so this block simply goes the syntax if
55:40 - then we have this
55:42 - these brackets inside the brackets as a
55:43 - condition the condition can be as long
55:45 - as it wants
55:46 - as long as you want as long as you're
55:48 - going to get a true or false value back
55:49 - from it
55:50 - and then we have these curly braces so
55:52 - an open brace and
55:53 - a closed brace and inside of these
55:55 - braces anything that i type in here is
55:56 - going to happen
55:58 - if this condition is true so let's just
56:00 - do a quick little test here and i'm
56:02 - going to do system.out.println
56:04 - and in this case we'll just say you
56:08 - typed tim okay wow types
56:11 - you types you typed tim okay and let's
56:14 - run the program and see what happens so
56:16 - when i run this
56:18 - uh if it loads up that's odd okay um
56:22 - give me one second okay so we're back i
56:24 - accidentally closed my console
56:26 - and uh yeah we're running into some
56:27 - issues with that so i got that up and
56:29 - running now
56:30 - uh let me just restart this quickly okay
56:34 - wow okay i don't know why that's white
56:35 - but anyways let's just type out
56:38 - i don't know what are we going to say
56:39 - here let's type hello and see what we
56:40 - get
56:41 - well we get nothing because we didn't
56:43 - type tim
56:44 - so let's run it again let's try and this
56:46 - time i type tim
56:47 - and it says you typed tim so there we go
56:50 - our basic
56:50 - if statement is working now i want to
56:53 - just put another
56:55 - system dot out over here so that we can
57:00 - see what happens when we have like just
57:02 - with this example okay
57:03 - i'm just going to print i'm literally
57:05 - going to print print okay
57:07 - so now what i want to show uh what
57:09 - happens here is
57:11 - like what is the program going to run so
57:13 - if we type tim
57:15 - we're going to get this you typed him
57:16 - but are we still going to get this print
57:18 - out here are we not going to get it well
57:20 - let's test this out and see okay so in
57:21 - this case i typed tim so when i typed
57:23 - him it says you typed him and then it
57:25 - says print okay
57:26 - now the reason that happens is because
57:27 - this print is not within this if block
57:30 - right so it's just going to execute
57:32 - simply after this if block happens so
57:34 - now same thing right if i type
57:35 - like hi it's still going to print out
57:38 - print to the screen because right it
57:41 - didn't go through this if block but this
57:43 - is not inside of the if block or the if
57:45 - statement or whatever
57:46 - so that executes okay so that's pretty
57:48 - straightforward
57:49 - now i'm going to show you else and else
57:51 - if we're going to start with else
57:53 - so else is very straightforward it can
57:56 - only come
57:57 - after an else if or an if so like the
58:00 - start of the block has to be if
58:02 - and then this else you can't just have
58:04 - it like a loan it has to come after an
58:06 - if statement or an else if statement
58:07 - which we're going to go into in a second
58:09 - okay
58:10 - uh there's different ways to format this
58:11 - some people like to put the else like
58:13 - this so it has
58:14 - the closing brace and then the open
58:15 - brace i personally like to do it like
58:17 - this
58:18 - some people like to do it like this it's
58:20 - however you want okay
58:21 - this just works fine just make sure that
58:23 - your curly brace doesn't look something
58:25 - like that
58:26 - all the way out there because that's
58:27 - kind of hard to read okay so what i'm
58:29 - going to do now is i'm going to put this
58:30 - print statement
58:31 - and i'm going to put it in my else
58:33 - statement all right
58:34 - now the way this else works is if this
58:37 - happens
58:37 - that's fine we're going to go in here
58:39 - we're going to print this out and then
58:40 - we'll
58:41 - move down to the end of the uh the block
58:43 - so we'll go
58:44 - to here as our next execution line now
58:47 - if this doesn't happen so
58:48 - other words or else then we print this
58:52 - so we're either printing you type tim or
58:54 - print we're never printing both because
58:55 - one of them is if and one of them is
58:57 - else
58:57 - all right so let's test this out if i
59:00 - type tim
59:01 - we get you type tim okay if i type
59:03 - anything else so like some random
59:04 - letters
59:05 - and i hit enter you get print so the way
59:07 - this else works is it's meant to do
59:09 - something
59:10 - if this condition is not true right okay
59:13 - so that's pretty straightforward i don't
59:14 - think i need to talk about that anymore
59:15 - the next one i'm going to show you is
59:16 - else if now this is a way that we can
59:19 - add
59:19 - multiple if conditions in one kind of
59:21 - block okay
59:22 - so what i can do now is i can do like
59:26 - else if and now it's the exact same
59:28 - syntax
59:29 - as a regular if statement except you
59:32 - just have this else before
59:33 - and obviously since uh this is an else
59:36 - it has to come after
59:37 - an initial if statement so you can have
59:40 - as many of these else ifs as you want
59:42 - now first i'll just put a condition in
59:44 - here so say uh s
59:46 - dot equals in this case
59:49 - let's just say like hello okay and then
59:52 - here we'll just do
59:53 - system dot out dot print
59:56 - ln and we'll just say hi because we want
59:59 - to create them back
60:00 - they said hello okay so again the way
60:02 - this is going to work
60:03 - is we're going to go through we're going
60:04 - to check we're going to get our scanner
60:06 - input get s
60:07 - say okay what's s is s equal to tim if
60:10 - it is
60:10 - we're going to print this and then we're
60:12 - going to move down after the last else
60:14 - statement we're not going to even bother
60:16 - checking if it's uh something else
60:17 - because if it's equal to tim
60:19 - then we know that we shouldn't bother
60:21 - looking at the elsif's right
60:23 - now if it's not equal to tim what we're
60:25 - going to do is we're going to go through
60:26 - and we're going to check we're going to
60:27 - say okay
60:27 - else if that's our next block is it
60:30 - equal to hello
60:31 - if it's equal to hello we're going to
60:32 - print hi we're going to move on with our
60:34 - lives we're going to move down here
60:35 - we're not even going to bother going to
60:36 - the else okay
60:37 - now if it's not equal to hello we're
60:40 - going to go into the else statement and
60:41 - we're just simply going to print
60:42 - print there's no condition it's just
60:44 - automatically going to happen if you
60:45 - print anything other than hello or tim
60:47 - we're going to print print okay so let's
60:50 - try this out
60:51 - and let's type hello and you can see we
60:54 - get
60:54 - hi all right now if i print type
60:57 - anything else in here so like some
60:58 - random letters
60:59 - we get print okay and that is how that
61:03 - works now i can show you i can add as
61:05 - many
61:05 - lsifs as i want so if i copy this and i
61:08 - simply paste it down here
61:10 - gonna have another lcf and in here i
61:12 - could have hi
61:13 - and then here i could type hello and we
61:16 - could keep going
61:17 - and we could do as many lsips as we want
61:19 - just know that whenever you have
61:20 - kind of a block that looks like this it
61:22 - has to start with an if statement
61:24 - and it does actually doesn't have to end
61:26 - with an else so an else just
61:28 - is should be the last thing so if you
61:30 - have any else ifs
61:31 - else will be your last thing like i
61:33 - couldn't do an lf here
61:35 - and then try typing like that's that's
61:36 - not okay you can't do that
61:38 - um but if i omit this else that's
61:41 - perfectly fine so now i have if we type
61:43 - tim
61:43 - we type hello or we type hi let's run
61:46 - this and let's type none of them let's
61:47 - let's type a bunch of letters we get
61:49 - nothing printed to the screen because we
61:50 - don't have that else statement
61:52 - now if i type hi you see we get hello
61:56 - because right we went through it wasn't
61:57 - equal to tim it wasn't equal to hello so
61:59 - we printed
61:59 - hi now i want to show you this this is a
62:02 - bad example but
62:03 - it it'll work if i put hello here
62:06 - and i put hello here which one are we
62:09 - going to print so remember we're only
62:10 - going to print one of these things we're
62:12 - not going to print more than one
62:13 - so which one is it is it high or is it
62:15 - hello
62:16 - well let's test it out if i type
62:20 - hello in here we print hi now the reason
62:23 - we're printing high is because this else
62:25 - if
62:25 - is above this one and this is the first
62:27 - one that's going to be looked at when we
62:29 - type something in just the way i kind of
62:30 - went through it
62:31 - sequentially so since we print high here
62:34 - well we're like okay well that happens
62:36 - so there's no point in checking this
62:38 - and we just move on okay straightforward
62:41 - now again i could do more if statements
62:42 - down here you could keep typing like do
62:44 - a bunch of stuff
62:45 - just understand you can have as many
62:47 - lsifs as you want you don't need an
62:48 - elsef like we could just do an if and an
62:50 - else but
62:51 - every time you have kind of like an if
62:52 - statement or block starting it has to
62:54 - start with an if
62:55 - um it can have as many elses as you want
62:57 - and the last thing has to be
62:59 - an else if you're adding the l so you
63:02 - don't have to have that else there
63:03 - so anyways i think that's all i'm going
63:05 - to show for
63:07 - if statements else ifs and else they're
63:08 - pretty straightforward any condition can
63:10 - go here so anything that i showed you
63:12 - before like you could have a
63:13 - really long uh chain condition with a
63:15 - ton of stuff
63:16 - same thing here you could have any
63:18 - condition like it doesn't matter
63:19 - anything that gives you a true or false
63:20 - value you could also literally just type
63:22 - true and like that would always happen
63:24 - okay so anyways that's been it for this
63:26 - video if you guys enjoyed and learned
63:27 - something please make sure you leave a
63:29 - like and subscribe and i will see you
63:30 - again in the next one
63:32 - in this video we are going to be kind of
63:34 - taking a step back and just going
63:35 - through everything that we've
63:37 - already learned summarizing that putting
63:39 - that into a program
63:40 - to make sure that you guys really
63:42 - understand all of that and we're also
63:43 - going to be talking about nested
63:45 - statements so how you can kind of
63:46 - add things within other things like so
63:49 - if statements within other if statements
63:51 - variables and the way i'm going to do
63:52 - this is just by creating a simple
63:53 - program and what it's going to do is
63:55 - it's going to ask the user to input
63:56 - their age
63:57 - and then based on that age we're going
63:59 - to do certain things with that we're
64:00 - going to tell them like
64:01 - i don't know good examples like on a
64:02 - roller coaster like if you're 13 or
64:04 - older you can ride otherwise you can't
64:06 - so we're going to do something like that
64:07 - okay
64:08 - so i'm going to keep these scanners up
64:09 - here that i have because we want to get
64:11 - the user's age
64:12 - but i'm first before i set up the
64:13 - scanner is i'm just going to print a
64:15 - line to the screen here so i'm just
64:16 - going to say system dot out
64:19 - dot print instead of print ln and in
64:22 - this case i will just say
64:23 - input your page simply okay
64:27 - so this way it should uh if i'm doing
64:29 - this correctly make it so that uh
64:31 - we just get the age right after this
64:33 - line okay you'll see when we do that in
64:34 - a second
64:35 - anyways what i'm going to do now is i'm
64:37 - just going to kind of start typing and
64:38 - we'll go through
64:38 - how this works after so i'm going to say
64:40 - if and we're actually just going to
64:42 - convert this to an
64:43 - int first i think string to an int yeah
64:46 - so using that parseint that i was
64:47 - talking about
64:48 - so say int of age is equal to
64:51 - s dot or integer i always forget how to
64:55 - do this
64:57 - integer.parseint and then
64:59 - in here we need to type s so we're going
65:02 - to convert whatever they type in to an
65:03 - integer
65:04 - in this case so we're going to assume
65:06 - that they type in an integer
65:07 - so we'll say if age is greater than or
65:10 - equal to 13 then we will
65:14 - simply print uh system.out.println
65:22 - you can ride okay exclamation point
65:26 - now if they're not older than 13 that
65:28 - must mean that they are
65:29 - less than 13 or younger than 13 so in
65:31 - this case we will simply print
65:33 - that they cannot ride system.out
65:37 - and you cannot
65:41 - write exclamation point okay pretty
65:43 - basic program uh we kind of gone through
65:45 - how all this work so let's test it out
65:47 - input your age five you cannot ride okay
65:51 - let's try this now input your age do 43
65:54 - you can ride awesome okay so
65:56 - everything's working fine for right now
65:58 - now what i'm going to do is i am going
66:00 - to add a elsif here and i'm going to
66:02 - change kind of the problem that we're
66:04 - looking at so i'm going to say now i
66:06 - want to classify
66:07 - the person based on their ages either an
66:09 - adult a teenager
66:11 - or just like younger than a teenager
66:13 - okay i don't know what do you call those
66:14 - whatever
66:14 - younger than teenager is okay so if we
66:17 - are greater than or equal to 18
66:18 - i want to print u r and adult
66:22 - okay now otherwise so if they are not
66:25 - greater than 18 we want to check if they
66:27 - are less than 18.
66:28 - so or if they're actually well we'll do
66:30 - it in a cool way that's going to make
66:32 - sense here in a second so
66:34 - else if age is not greater than or equal
66:36 - to 18. we know it's less than 18.
66:38 - so all we actually have to check is if
66:41 - they are
66:41 - older than 13 right or greater or
66:44 - older than or equal to 13 because that's
66:46 - what a teenager would be okay
66:48 - and the reason we don't have to check if
66:50 - they are uh
66:51 - what do you call it younger is or if
66:54 - they're older
66:55 - is because uh we already know that
66:56 - they're going to be younger than 18
66:58 - so no we're they're within that range so
67:00 - i already butchered that explanation but
67:02 - that's okay so system
67:03 - dot out dot print ln and in this case
67:06 - we'll just say
67:08 - you are a teenager
67:11 - okay like that and then in this last
67:13 - case well we know they're not older than
67:15 - or equal to 18 we know they're not older
67:16 - than or equal to 13 that meaning they
67:18 - must be less than which is you are not a
67:20 - teenager
67:23 - or an adult okay like that
67:27 - so let's test our program out make sure
67:29 - everything is working so if we input an
67:31 - age of 14 we get you are a teenager
67:33 - awesome okay let's try it again if we
67:35 - input an age of 19.
67:37 - get you an adult and if we input an age
67:40 - of zero yet you are not a teenager
67:44 - or an adult now i want to show you what
67:47 - happens if i input like a negative
67:48 - number like what if i do like
67:50 - negative 98 you are not a teenager or an
67:53 - adult because right we have this else
67:54 - statement
67:55 - and that's not greater than or equal to
67:56 - 13. it's not greater than or equal to 18
67:59 - so we get you're not a teenager or an
68:01 - adult okay
68:02 - now that is pretty straightforward what
68:05 - i'm going to show you now
68:07 - is how we can ask like another question
68:09 - or how we can check something else
68:11 - so what i'm going to do here is i want
68:12 - to say if they're 18
68:15 - and only if they're 18 i want to ask
68:17 - them a question
68:19 - what should the question be i want to
68:20 - ask them what their favorite food is
68:22 - okay
68:23 - so i'm simply going to do now exactly
68:25 - what i've done up here
68:26 - except just throw it um inside of this
68:29 - if statement so if this happens we're
68:30 - going to do this and this is going to
68:31 - show you nesting okay
68:32 - so i'm going to say sc or we'll say
68:35 - string i guess we can just do ins
68:36 - because we're going to assume that our
68:38 - string i guess because only food yeah
68:39 - we'll say string food is equal to sc
68:43 - dot next uh line like this
68:46 - okay and what i'm gonna do is i'm gonna
68:48 - print up here again what we're looking
68:49 - for so i'll just copy this save me a
68:51 - second
68:52 - and in this case i'll say input your
68:55 - fav food okay now what i want to do is i
68:58 - want to check
68:59 - what their favorite food is so i want to
69:01 - say if their favorite food is pizza
69:02 - i'll say mine too otherwise i'll say
69:05 - that's not my favorite food or something
69:06 - like that okay
69:07 - so we'll say if and we have our
69:10 - condition in here we'll say if food
69:12 - dot equals and in this case
69:16 - we'll simply type pizza right
69:20 - then we will system dot out dot
69:24 - print ln and we'll say
69:28 - mine wow inside of the quotes hopefully
69:33 - say mine to and then otherwise so the
69:36 - else
69:37 - what we'll do is we'll simply type
69:39 - system
69:40 - dot out dot parent ln and
69:43 - in this case we'll say not mine okay
69:47 - so this is showing you now it looks a
69:48 - bit more complicated but
69:50 - we can actually put if statements and
69:51 - else statements we can do things with
69:53 - inside of the if statement
69:54 - and i'll show you that this works so if
69:56 - i type uh i'm 19
69:59 - it's going to say input your fav food
70:00 - okay my favorite food let's try pizza
70:03 - it says mine too awesome that's working
70:05 - now if i
70:06 - type something else i type like four it
70:08 - just tells me i'm not a teenager an
70:09 - adult because we don't have anything
70:11 - else happening inside of this if
70:12 - statement or this else over here okay
70:15 - now that's really cool and that allows
70:16 - us to do some neat things and you can
70:18 - continually nest
70:19 - and this is called nesting putting a
70:21 - statement inside of another statement
70:23 - you can continually do that as much as
70:25 - you want so i just wanted to show that
70:27 - to you because a lot of people
70:28 - think that that's not possible or they
70:29 - don't understand that you're able to do
70:31 - that because they haven't been shown
70:32 - that right
70:33 - so again if i want to ask another
70:34 - question i could do that inside of here
70:36 - and i could just keep going
70:38 - but anyways i think that that probably
70:40 - gives you guys a good
70:41 - um explanation of how that works and
70:44 - shows you that i don't need to go any
70:45 - further
70:45 - so with that being said i'm going to end
70:47 - the video here in the next video we're
70:49 - going to be getting into
70:50 - looping which is some more advanced
70:51 - stuff some cooler stuff and we're
70:53 - continually moving through and we're
70:54 - going to be getting more advanced now uh
70:56 - getting out to kind of the more basic
70:57 - stuff of java
70:58 - that being said if you guys enjoyed the
70:59 - video please make sure you leave a like
71:01 - and subscribe and i'll see you in the
71:02 - next one
71:03 - okay so i know i said in this video i
71:04 - was going to be talking about for loops
71:06 - and looping but i actually forgot that i
71:08 - haven't yet talked about arrays
71:10 - so we're going to be going into arrays
71:11 - in this video and that will lead us
71:13 - really nicely into for loops and wallops
71:15 - in future videos
71:16 - because that's kind of one of the main
71:17 - things you do with arrays is you loop
71:19 - through them and you look at things so
71:20 - we first need to know about arrays
71:22 - before we can really move into loops or
71:23 - at least so that it makes more sense in
71:25 - this series so anyways what is an array
71:27 - well an array
71:28 - is a collection pretty much of elements
71:32 - that is a set size so rather than having
71:35 - like a variable equal to one
71:36 - you'd have an array and it would have a
71:38 - bunch of different values
71:40 - in there that you can index at certain
71:42 - points and you'll see when i
71:44 - start talking about them here if you're
71:45 - a little bit confused but how to create
71:47 - an array is to first
71:48 - you have to declare the type that you
71:49 - want your grade to be so all the values
71:52 - in the array
71:52 - at least right now have to be the same
71:54 - type so in this case i'm going to create
71:55 - an integer array
71:56 - and to declare that this is going to be
71:58 - an array you simply do these little
72:00 - square brackets you say in square
72:01 - brackets the name of your array in this
72:02 - case i'm going to say new
72:04 - arr standing for array is equal to and
72:07 - then in this case you're going to say
72:08 - new int square brackets and inside of
72:11 - the square brackets
72:13 - you have to define how many elements or
72:15 - how long your array is going to be
72:17 - in this case i'm just going to say five
72:19 - okay so you can see that's fine not
72:21 - getting any issues here just because
72:22 - we're not using new ar
72:24 - um but yeah this is the syntax so
72:26 - whatever type you want it to be you type
72:28 - the type so if i want to be string i do
72:30 - string and then this obviously i would
72:32 - have to be the same
72:33 - string like that okay square brackets
72:36 - name of your array equals new and then
72:40 - the type square brackets how long you
72:42 - want the array to be
72:44 - now there's another way to declare this
72:45 - i'll show you in a second but this
72:47 - is like a set length like you can't
72:50 - change this length
72:51 - so you have to make sure that when
72:52 - you're declaring your arrays you know
72:54 - how many elements you want to have
72:56 - because you can't if you make an array
72:57 - length zero then there's no point in
72:59 - using it you can't add
73:00 - you can't add anything past like that
73:02 - length okay
73:03 - and what it's going to do is it's going
73:04 - to by default set all of these elements
73:07 - to like null uh so they have no value
73:10 - but they exist like they're there they
73:12 - just aren't holding anything right now
73:13 - okay
73:14 - the way you can kind of think of it is
73:15 - you're initializing like five containers
73:17 - that are all
73:18 - gonna hold something but they're not yet
73:20 - holding anything it's nice it's a good
73:21 - way to visualize so we're gonna keep the
73:23 - string array for now
73:24 - i'm gonna show you how we can add things
73:26 - to array
73:27 - um and change values and print them out
73:30 - and see what that looks like okay
73:32 - so the way that you index things in an
73:34 - array an array is going to be
73:36 - is going to look like these curly braces
73:37 - okay so i'm just going to type some
73:38 - stuff out and
73:39 - just follow with me right so my string
73:41 - array i want to have
73:42 - hello uh i need double quotes
73:46 - hi uh tim
73:50 - maybe i should have done less values
73:51 - bill
73:53 - and joe okay now these are the five
73:56 - values
73:56 - in my string array this don't type this
73:59 - out with me this is just showing you an
74:00 - example
74:01 - now the way that we start counting in
74:03 - computers uh
74:04 - or actually let's first say this every
74:07 - element in our array is going to have an
74:08 - index
74:09 - okay and the index is going to be a
74:11 - number that represents its position
74:13 - so in this case you'd say like this is
74:14 - position one this is position two and
74:16 - this would be position five
74:18 - now if i were to ask for position zero
74:21 - or sorry position one it would give me
74:22 - hello
74:23 - but the thing is that seems logical but
74:25 - in computers we actually start counting
74:26 - at zero
74:27 - meaning that position one which i'm
74:29 - saying is hello
74:30 - is actually going to be position zero
74:32 - and that means that
74:34 - whatever the length of my array is the
74:36 - uh
74:37 - so in this case five the last position
74:39 - in my array is going to be the length
74:41 - minus one so in this case
74:42 - four so joe would be position four and
74:44 - these are known as indexes
74:45 - so like index zero is hello index one is
74:48 - high index
74:48 - two is tim this allows us to really
74:51 - easily grab
74:51 - different elements um without having to
74:53 - know their value we just know the
74:54 - position of them
74:55 - in the array okay so 0 1 2 3 4.
74:59 - that's how we count in computers okay
75:02 - so how can we actually access these
75:03 - different elements well i'm going to
75:05 - create
75:05 - a variable i'm just going to say string
75:08 - x
75:08 - equals and in this case i want to get
75:12 - like value two in my array so first of
75:15 - all i haven't actually added anything to
75:16 - my array but we'll do that in a second
75:18 - but how i would do that
75:19 - is i would type like new ar and then i
75:22 - put square brackets and then in here i
75:24 - put the position
75:25 - so position uh so i want to get hello i
75:28 - think that was the first or second
75:30 - position i
75:30 - will see anyways i would type one and
75:33 - what this would give me is the second
75:34 - value
75:36 - in my array because remember we start
75:37 - counting at zero so the first value
75:39 - would be zero
75:39 - and the last value would be four now
75:42 - maybe this is going to look a little
75:43 - easier once i start adding things into
75:44 - my array
75:45 - so the way that we can actually add
75:47 - things into the array is well we've
75:48 - declared an array and we said it has
75:51 - length five which means that these
75:52 - elements already exist or those buckets
75:54 - they're just not holding anything so
75:55 - what we have to do is we have to say
75:57 - new ar 0 is equal to and in this case
76:01 - let's give it a value so let's say
76:02 - hello okay put our semicolon there we go
76:06 - we've just set
76:07 - position zero index zero whatever uh to
76:10 - hello
76:10 - okay so now if i copy this a few times i
76:13 - can set the values of all the elements
76:15 - in my array so i do zero
76:17 - one two and three and here i can just
76:19 - change these
76:20 - so i'll say hi i'll say tim
76:24 - i will say bill and we can add one more
76:27 - but we don't have to so if we
76:29 - let's let's just add one more for the
76:30 - sake of it and new
76:33 - 4 is equal to uh
76:36 - we call it geo oh i don't know why it's
76:38 - doing that for me
76:39 - okay geo like that all right so if i say
76:43 - string x equals
76:44 - new ar 4 then that's going to be equal
76:46 - to joe
76:47 - so to print this out to the screen now i
76:48 - can do system.out.println
76:52 - and in this case i will say x and let's
76:55 - see what we get
76:56 - we get joe right because we added all of
76:59 - these
76:59 - into the array now if i just comment
77:02 - this out by doing
77:04 - that uh let's see what happens when we
77:05 - do new arr4 let's
77:08 - see what we get we get no now that's
77:10 - because remember what i said when we
77:11 - initialize this array
77:13 - we set it of a length of five and we say
77:15 - we okay these are our containers we've
77:17 - got five containers five buckets they're
77:19 - going to hold values we don't know what
77:20 - the values are yet
77:21 - all right so if we haven't set a value
77:24 - for the fourth index or the fourth
77:25 - position
77:26 - well we don't know what it is so we're
77:27 - just going to return null meaning
77:28 - nothing is there right now
77:30 - okay so yeah so those are that's how you
77:33 - add
77:33 - things into an array now there's i'm
77:36 - gonna create another array and show you
77:38 - a kind of an easier way to do this if
77:39 - you're just gonna like statically type
77:41 - in
77:41 - uh numbers okay so i'm going to say int
77:43 - this this time we're going to do an
77:44 - enter edge to save me from doing all
77:46 - these quotation marks i'm going to say
77:48 - inside let's say nums is equal to new
77:51 - int square brackets or actually we don't
77:53 - need that because we're going to do the
77:54 - other way
77:55 - we're just going to put two curly braces
77:57 - and in here we're going to type out our
77:59 - array
77:59 - so in this case this is now my number
78:02 - array so i put it in
78:04 - curly braces and i have an array of 2 3
78:07 - 54
78:08 - 6 and 6. now again just to recap 2 would
78:11 - be at index zero
78:12 - three would be at index one okay because
78:14 - that's the way we start counting
78:16 - and now if i wanted to instead of having
78:19 - x equal to new arr i'm gonna say
78:22 - nums four which should be six right
78:25 - and what's our error here change
78:28 - this has to be an int my bad and x
78:31 - equals nums4
78:32 - we print this out you can see we get the
78:34 - value 6. so that's another way to create
78:36 - an array
78:37 - if you're just going to be like typing
78:38 - in all of the numbers like that okay
78:41 - and obviously you can create arrays of
78:43 - different types like ins we could do
78:45 - string we do float we do double
78:47 - so you say like a double array of nums
78:50 - 2 is equal to and then in here you like
78:53 - 2.0
78:54 - 3.0 there you go we now have a
78:58 - uh well really i forgot that okay well
79:01 - you need that
79:02 - but that works okay we now have a double
79:04 - array at index zero we have 2.0 at index
79:07 - 1 we have 3.0
79:08 - and yeah so arrays can get
79:12 - fairly complicated they're not really
79:14 - the best thing to be using for a lot of
79:15 - example cases but
79:17 - for right now we have to understand them
79:19 - in later videos i'm going to be talking
79:20 - about collections which are going to
79:22 - allow us to do some cooler things rather
79:24 - than like
79:24 - indexing elements like this there's some
79:26 - cool methods that we can use on those
79:29 - but for now i would just want to make
79:30 - sure that we do understand
79:32 - arrays okay and in the next video i'm
79:35 - going to go through looping
79:36 - through arrays and we'll be talking
79:37 - about that more using for loops and
79:39 - while loops
79:39 - so as always if you enjoyed please make
79:41 - sure you leave a like and i will see you
79:42 - in the next video
79:43 - so in this video i'm going to be talking
79:45 - about for loops now for loops are
79:47 - fundamental aspect of every programming
79:49 - language
79:50 - and they're very important to understand
79:52 - i can almost guarantee you that any
79:53 - program you write will
79:54 - use multiple for loops so pretty much
79:57 - what for loop is it allows us to kind of
79:59 - automate a task do something a
80:01 - set amount of times and typically when
80:03 - you use a for loop
80:04 - you're using that because you know how
80:06 - many times you want to do something
80:08 - or like a condition is going to tell you
80:09 - how many times to do something as
80:11 - opposed to what we're going to talk
80:12 - about in future videos which is a while
80:13 - loop
80:14 - well you're not really sure how long
80:15 - it's going to go for so you do something
80:17 - based on a condition but we'll talk
80:18 - about that when we get to it
80:20 - so let's start um and just do an example
80:23 - of what a for loop can really like solve
80:25 - for us
80:25 - for example okay so say this is a pretty
80:28 - simple
80:28 - example and you guys will see in a
80:30 - second but i create an integer
80:32 - uh let's see into x equals zero and say
80:35 - that i want to
80:36 - add one and then i want to add two to it
80:38 - and then i want to add three to it and
80:39 - four and five and six
80:40 - and like an infinite amount of times i
80:42 - want to add to that variable well we
80:43 - could do like
80:44 - x plus equals one we could do x
80:47 - plus equals two like and keep going and
80:50 - adding things to x and we could just
80:51 - keep copying and pasting this down our
80:54 - program
80:54 - but obviously that's terribly
80:56 - inefficient in terms of a typing
80:57 - standpoint
80:58 - and what if we wanted to change this
81:00 - what if every time we run the program we
81:02 - want to ask the user how many times they
81:03 - want to add like
81:04 - a pattern like this to x well then we
81:07 - would have to constantly keep changing
81:10 - the numbers here right so this is where
81:11 - for loop can kind of come in handy so
81:14 - the syntax for fourth i'm just going to
81:15 - type it out and then
81:16 - we will talk about exactly what it does
81:19 - so it has these brackets here and in
81:20 - here we're going to put
81:22 - three things typically okay so what
81:24 - you're going to do is you're going to
81:25 - first start off by declaring a variable
81:28 - so in this case i'm going to say
81:29 - intex is equal to zero okay now this can
81:32 - be called whatever you want typically
81:34 - people call it i
81:35 - i like to use x but you know what let's
81:37 - just use i uh and then what you're gonna
81:39 - do
81:40 - for this next so you're going to put a
81:41 - semicolon and then the next thing you're
81:43 - going to do is you're going to set a
81:44 - condition
81:45 - so i'm just going to do this and then
81:47 - talk about it because it's hard to kind
81:48 - of do them step by step because they all
81:49 - work together
81:50 - uh less than equal to 10 and
81:54 - i plus plus okay so what i've just done
81:58 - here actually
81:59 - is i've first started by declaring a
82:01 - variable i it's equal to zero
82:03 - and then i've said we're going to do
82:04 - this while i is less than or equal to 10
82:06 - and we're going to add one to i
82:08 - so pretty much the way this works is
82:10 - every time we execute what's in these
82:12 - little square brackets here
82:14 - i is gonna have one added to it so this
82:16 - is what's known as the increment
82:18 - and this comes at the end of your for
82:20 - loop so this is what you're adding to
82:22 - the variable i which you're declaring
82:24 - here every time you run the loop
82:27 - now this here is your condition and this
82:29 - is going to state
82:30 - how many times the loop is going to run
82:32 - so in our case we're going to run the
82:34 - loop
82:34 - and well i is less than or equal to the
82:37 - value
82:37 - 10 meaning we're going to start at the
82:39 - value 0 because i equals 0
82:41 - we're going to run this loop then we're
82:44 - going to come back up here
82:45 - we're going to say okay what are we
82:46 - doing we're adding 1 to i then we're
82:48 - going to check this condition so i is
82:49 - not equal to 1
82:50 - we're going to say well is 1 less than
82:51 - or equal to 10 no it's not and then
82:53 - we're going to loop through and we're
82:54 - going to continue looping through until
82:55 - eventually we get to the point where we
82:57 - add to i
82:58 - it's equal to 11. 11 well that's greater
83:00 - than 10
83:01 - so we break out of this loop and you
83:03 - guys will see
83:05 - when i start printing stuff to the
83:06 - screen exactly how this works but i hope
83:08 - that was a decent
83:10 - explanation of the way to do this so
83:13 - what i'm going to do is i'm just going
83:13 - to print i here and i'm going to tell
83:15 - you right now what's going to happen
83:16 - right so we're starting i at 0.
83:18 - so the first loop here we're gonna come
83:19 - through i is equal to zero we're gonna
83:21 - print zero
83:22 - next loop we come up we add one to i
83:24 - check the condition we're okay we can
83:26 - keep going
83:26 - we're at one and we're gonna print from
83:28 - zero to ten so watch when i run here
83:31 - we get zero all the way up to 10
83:34 - okay that's how the for loop works so we
83:37 - execute whatever is in between these
83:38 - little curly braces
83:40 - 10 times or 11 times in this case
83:42 - because 0 to 10 is 11.
83:44 - all right now we can change this
83:46 - increment we can change this condition
83:48 - there's a lot of things that we can do
83:49 - in this for loop so here we say 4 into i
83:53 - equals 0 i could do
83:54 - 4 into i equals 5 and i can start at the
83:56 - value 5. and now we're going to start
83:58 - and we're going to go from 5 to 10
84:00 - looping one two three four five six
84:02 - times right we're printing six different
84:03 - values okay
84:04 - um so that's if you can do that if i try
84:07 - to do something like i
84:08 - equals 11 well watch what happens
84:11 - nothing prints to the screen
84:12 - and that's because 11 well that's
84:14 - greater than or equal to 10
84:16 - so the loop doesn't even run one time
84:18 - right so let's go back and let's start
84:20 - at zero
84:20 - and now let's show what we can do in
84:22 - terms of incrementing so
84:24 - to increment here we can do i plus
84:27 - equals and then any value you want so in
84:29 - this case if i do five
84:31 - we're gonna start at zero we're going to
84:32 - add five we're gonna add five again so
84:34 - we get zero five and ten and you can
84:35 - change this to whatever value that you
84:37 - want
84:38 - okay same thing here with the condition
84:40 - these can also be variables
84:42 - i feel like i don't need to tell you
84:43 - that but if i do something like in x
84:45 - equals
84:46 - 5 then i could do i plus equals x
84:49 - right and we can add that integer to it
84:51 - we could add x as the bound here so less
84:53 - than or equal to this could be greater
84:55 - than
84:55 - this could be greater than or equal to
84:57 - so i'm just going to quickly go over one
84:59 - thing that a lot of people get confused
85:01 - with
85:01 - uh for with for loops and it's when
85:04 - we're going to stop and when we're going
85:05 - to start so when we say
85:06 - less than or equal to 10 this means
85:08 - we're going to start at this value and
85:10 - now assuming we're adding one okay
85:12 - we're going to stop but include 10
85:15 - meaning that
85:15 - i will hit the value 10 we will print 10
85:19 - to the screen
85:20 - now if i remove this equal sign this is
85:22 - only going to happen while i is less
85:24 - than 10 which means that if i
85:26 - is 10 well 10 is not less than 10 so we
85:28 - are not going to print 10. so if i run
85:30 - this
85:31 - you can see we only get up to the value
85:32 - 9. now the reason i'm talking about this
85:35 - is because
85:35 - what we typically want to do with loops
85:37 - is we want to loop through something or
85:39 - look at some data and typically that
85:41 - data is in the form of an array so now
85:43 - and this is why i talked about arrays
85:44 - before i'm going to create an array so
85:46 - an integer array
85:47 - it's called arr is equal to and
85:50 - let's just give it some values here it's
85:52 - like 1 5 7
85:53 - 3 4 5 okay this is going to be our
85:56 - integer array
85:57 - now what do i want to do if or how am i
85:59 - going to do this if i want to look
86:01 - through my array
86:02 - and look at look at these values and
86:04 - maybe check if a value is equal to 7 our
86:06 - value is equal to 5 or something
86:08 - like that well the way that i can do
86:09 - this and this is like
86:11 - a dynamic way to do it is i could
86:14 - count the length of the array i could
86:16 - say 1 2 3 4
86:18 - 5 6. okay 6 elements so i would put
86:21 - i is less than six here but a more
86:23 - useful way to do this is to just get the
86:25 - length of the array and the way that i
86:27 - can do that is just to do
86:29 - a r dot length or i actually don't need
86:32 - this bracket sorry
86:33 - um so we'll just do this in this way say
86:36 - the user had typed in a bunch of
86:37 - elements we had put them in an array
86:39 - we don't know how many elements they
86:40 - type in per se so we're going to use
86:42 - this length
86:43 - so that we can change this loop and this
86:45 - loop will never crash it will always
86:47 - work
86:48 - because we're just simply getting the
86:49 - length of the array now if i were to do
86:51 - equal here
86:52 - i hope you guys realize this would cause
86:54 - us an issue and that's because
86:56 - we have six elements in the array right
86:58 - but it's going to allow us to get i
87:00 - to the value 6 because that's the length
87:02 - of the array now what happens if i try
87:04 - to do this
87:05 - arr of six well we should know from the
87:09 - last video that that will actually crash
87:11 - our program and that's because
87:12 - when we start we start at zero and our
87:15 - last element in the array is actually
87:16 - going to be index
87:17 - 5 right because we go 0 all the way
87:20 - to the length minus 1 which is 5. so ray
87:22 - 6 does not actually exist
87:24 - so what i'm going to do now is i'm just
87:26 - going to write a little
87:28 - program inside this for loop and i'm
87:29 - just going to say if the value is equal
87:31 - to 5 we're going to print it out
87:33 - so how do i do this i'm going to say if
87:35 - arr
87:36 - at index i is equal to the value 5
87:41 - then we're simply going to do a system
87:43 - dot out
87:44 - dot print ln i just realized there's a
87:47 - comma there all right
87:49 - semicolon and we're simply going to
87:51 - print the value so in this case we could
87:52 - print ari which we know is going to be 5
87:54 - or we could just type 5 because we know
87:56 - that is there so in this case let's just
87:57 - do
87:59 - found a5 exclamation point okay that's
88:02 - what we'll print to the screen
88:04 - so again the reason this is gonna work
88:06 - is because we're looping through
88:07 - starting at zero and going to but not
88:11 - but not including the length of the
88:12 - array make sure you move that equal sign
88:14 - otherwise you're going to get a crash
88:15 - okay
88:15 - so that way we're going to look at every
88:17 - single element in this array we're going
88:18 - to check its value
88:20 - and then if we find a 5 we're going to
88:21 - print it so let's see if this works
88:23 - found a 5 and found a 5. now if i wanted
88:26 - to be more precise and say like where i
88:27 - found this 5 i could say found a 5
88:30 - at index and we'll just put a plus sign
88:34 - and then we can put i
88:35 - and what this is going to do is it's
88:36 - actually just going to automatically
88:37 - convert this into a string for us
88:39 - and print it out with this index so
88:42 - we're going to put a space here just so
88:43 - i don't get smudged together
88:44 - but it says found a five at index one
88:46 - found a five at index five and we know
88:48 - this is true
88:49 - index one is here index five is here and
88:51 - that's a really simple way
88:53 - that we can loop through a list and look
88:55 - for a certain value
88:57 - okay now in the next video i'm going to
89:00 - talk about
89:01 - looping through arrays in a different
89:04 - way
89:04 - that is easier than this and it's called
89:07 - four each
89:08 - okay that'll be in the next video and
89:10 - then after that we're gonna go into
89:11 - while loops and then once we finish
89:12 - while loops we'll be going into
89:13 - collections like sets
89:14 - and stuff like that and then getting
89:16 - into all the object orientated program
89:18 - anyways if you guys enjoyed the video
89:19 - please make sure you leave a like and
89:20 - subscribe and i will see you again in
89:22 - the next one
89:22 - so in this video i'm going to be showing
89:24 - you a different kind of for loop which
89:26 - is known as a for each loop
89:27 - and this is going to allow us to loop
89:29 - through the elements of a list
89:30 - or a collection data type and do
89:33 - something with those elements
89:35 - i'm also going to be showing you ways
89:36 - that we can break out of the loop at
89:38 - certain points so if the condition is
89:40 - not met
89:40 - uh or like we just want to get out of
89:42 - the loop the way that we can do that
89:44 - and i'm going to be showing you some
89:45 - common examples of where we use
89:47 - loops so let's go ahead and get started
89:50 - so you can see that i have two uh
89:52 - arrays here once named names and one is
89:54 - named ar i just added this names one
89:57 - it's just a blank uh blank array for
90:00 - right now okay
90:00 - so what i first want to do is in the
90:02 - last video i looped through this array
90:04 - and the way i did that was by having a
90:06 - variable i we waited until it was uh
90:09 - what do you call it greater than
90:11 - the length of the list and then once it
90:13 - was we simply
90:15 - broke out of that uh that loop right
90:17 - okay so
90:18 - a easier way to do this is to do
90:20 - something like this
90:21 - so we're going to have the same exact
90:23 - syntax except in these brackets
90:25 - something is going to be
90:27 - different okay what i'm going to do if i
90:29 - want to loop through every element
90:31 - in this list is i can do something like
90:33 - this i can say for
90:34 - element colon arr now what this is
90:38 - actually going to do
90:39 - i have to to do this sorry string
90:42 - element
90:43 - or i can't say string because that's
90:44 - something we type int element
90:46 - in our array so what i'm doing now is
90:49 - i'm saying that every time
90:50 - we loop through this
90:53 - loop right what we're going to do is
90:55 - we're going to declare a new variable
90:57 - called element and it is going to be
90:58 - equal to the next element
91:01 - in our array so in this case when we
91:04 - first loop element is going to be equal
91:05 - to 1
91:06 - and that element's going to be equal to
91:07 - 5 and then it's going to be equal to 7
91:08 - and then 3 and then 4 and then 5.
91:10 - and this is a way easier way if i wanted
91:12 - to like print out the element
91:14 - or look at certain elements to do so
91:16 - rather than having to
91:18 - have like a counter variable i and then
91:19 - index all of the different elements
91:21 - especially if we don't know the length
91:23 - of the array or we don't want to do
91:24 - length because this is automatically
91:25 - going to go from start to end
91:27 - okay now i'm going to show you because
91:31 - obviously we need an example to really
91:33 - understand this but
91:35 - the first example i typically like to do
91:37 - is just printing out all these
91:39 - elements to show you that is indeed
91:41 - working so in this case we'll say
91:42 - element
91:44 - okay and we'll just print this to the
91:45 - screen and see what we get so in this
91:47 - case you see we get one five seven
91:48 - three four five so right starting at the
91:50 - beginning going to the end
91:52 - the way this works with the colon is
91:53 - again we're just grabbing the elements
91:55 - in order and we're using those as a
91:57 - variable element
91:59 - now a lot of times what you want to do
92:01 - with this is
92:04 - you want to be checking the element but
92:05 - you also want the index as well
92:07 - so you want the element and you want the
92:09 - index now we could use what we used in
92:11 - the last video where we just have a
92:12 - counter variable and that way we have
92:13 - the index and the element because we can
92:15 - do like
92:16 - arr of one like all that okay i have i
92:19 - um but a way that people typically do
92:21 - this is with like an
92:22 - outside counter variable that you
92:24 - increment yourself so
92:26 - i'll show you how this works so what
92:28 - we're going to start off by doing is
92:29 - just creating a variable that's called
92:30 - int count equals 0 and then within this
92:33 - loop we're going to
92:34 - increment count ourself so now
92:37 - every time that we run the loop we're
92:39 - adding one to count
92:40 - so that count is keeping track of the
92:42 - index of the element so if i
92:44 - print out the element plus we'll just i
92:47 - guess i can't do that plus a space
92:49 - plus our count you can see that this is
92:52 - keeping track of the index so what's
92:54 - happening here
92:54 - says one is at index zero five index one
92:57 - and it keeps track of all these
92:58 - different indexes for us
93:00 - and that's a really easy way to do that
93:01 - i just want to show it doesn't really
93:02 - make sense for this example case but i
93:04 - just wanted to show you because
93:05 - there will be situations where you want
93:07 - both the element and
93:08 - the index and it's easier to get the
93:10 - element just by doing this with this
93:12 - colon
93:12 - okay so again when you're doing a four
93:15 - each this is what this is known as
93:16 - because it's going through four each
93:19 - element in
93:20 - the array we are doing something okay
93:24 - all right so the next thing that i want
93:26 - to do is i want to show you how we can
93:28 - populate an array using a
93:31 - for loop so right here for example we
93:34 - have
93:35 - a uh what do you call it a new string
93:37 - array that's empty right like all these
93:38 - elements are null
93:39 - and we want to populate them so the way
93:41 - that we would go about doing this and
93:42 - this is a common example of what you
93:44 - want to do this one i'm showing you this
93:46 - is we create a variable we're going to
93:47 - say again into
93:50 - equals zero we'll say well i is less
93:53 - than
93:53 - and then names dot length right
93:57 - and then we'll do semicolon and we'll
93:58 - simply add one to i so this is the exact
94:00 - same thing as we've done before
94:02 - but i'm just going to show you how we
94:03 - can actually add the elements because
94:04 - it's a really common use case
94:06 - so what i'm going to do here is i'm
94:08 - actually going to use the
94:09 - scanner to get a new variable or to get
94:12 - like a name from the user so i'm just
94:14 - going to say
94:16 - scanner sc equals
94:20 - new scanner and then we need system dot
94:23 - in okay and i actually think i should
94:26 - probably
94:27 - not declare this every loop but put it
94:29 - up here because we're just going to use
94:30 - the scanner right
94:31 - so we'll say string of
94:35 - input equals
94:38 - sc dot next line like this
94:42 - and this way every time we run the loop
94:44 - we are going to get
94:45 - input from the user and you know what
94:46 - let's also just print out here
94:50 - system.out.println and just tell the
94:52 - user
94:52 - uh we want actually we'll just do print
94:54 - not ln
94:55 - we'll say input like this so that way
94:58 - they know what to type in okay so input
94:59 - we're getting input
95:00 - and now what i'm going to do is i'm
95:01 - going to add the user's input into
95:04 - our array so how can i do this well this
95:06 - is really easy i can just do names
95:09 - i is equal to input right so we're just
95:12 - declaring that
95:13 - whatever um index we are in the loop
95:16 - right now so whatever value of i
95:17 - well that value in the list or sorry the
95:21 - list i keep calling it list it's an
95:22 - array i'm just used to python
95:23 - it's going to be equal to whatever we
95:24 - typed in and then if we want to print
95:27 - out
95:27 - the entire array what we can do is we'll
95:29 - use another for loop so we'll just say
95:31 - four
95:32 - and then this time it's going to be a
95:33 - for each loop right so we'll say four
95:35 - and let's just stand for name
95:37 - i should need string n
95:40 - and names okay then we'll simply just do
95:46 - system.out.println
95:48 - and we will print every value of n
95:51 - okay so that's two good examples let's
95:52 - run this and just make sure everything's
95:54 - working
95:54 - so we run this input i'm just going to
95:56 - type hello oh i guess it wanted names
95:58 - didn't it tim
96:00 - bob joe bill
96:03 - and then there we go so we ran that five
96:06 - times
96:06 - and we get hello tim bob joe and bill
96:10 - awesome there we go so that uh gives us
96:13 - all the values that we need okay okay so
96:17 - now what i want to show you guys
96:18 - is how we can break out of the loop so
96:21 - if we're in the loop and we're going
96:23 - through and we're doing operations and
96:24 - we've not yet met the condition
96:26 - where or like so the loop is going to
96:27 - keep going like i is not greater than
96:29 - whatever value
96:30 - or what not okay then we want to
96:34 - break out a bit how can we do that so
96:36 - how can we just get out of it in the
96:37 - middle of looping
96:38 - well there is this magical little
96:40 - keyword called break
96:42 - and what this does is whenever this is
96:44 - encountered inside of a loop
96:46 - it simply breaks out of the loop so in
96:49 - this case what would happen is since i
96:51 - have break
96:52 - at the end we would do these first three
96:54 - lines
96:55 - then we just break and this would only
96:57 - happen one time no matter what no matter
96:59 - what any of this stuff said
97:00 - this loop would only happen once now i'm
97:03 - going to show you just down here
97:05 - in this loop how we can break out based
97:08 - on like a certain condition
97:09 - so for example say we encounter the word
97:12 - n
97:12 - um or what do you call it the word tim
97:15 - what am i saying and i was just reading
97:16 - that
97:16 - if we encounter like the word tim while
97:18 - we're reading through the list of names
97:20 - then we just want to break out like we
97:21 - don't want to print any more names
97:22 - anymore we just want to break out so the
97:24 - way that i can do this right now i can
97:25 - say well we're going to we're going to
97:26 - print tim
97:27 - but we'll break after tim okay so what
97:29 - i'm going to do in the dual if statement
97:30 - i'm going to say if
97:31 - n equals equals or not equals equals dot
97:34 - equals
97:35 - okay and in this case we'll just simply
97:37 - put
97:38 - tim in here then what we're going to do
97:41 - is we're going to break and in this case
97:43 - now whenever we encounter tim
97:45 - we are simply breaking out of the loop
97:46 - and that means we'll not print the rest
97:49 - of the names so if i run this
97:51 - just drag this console up here and we
97:53 - run and we say hello
97:55 - and we say name and then we say tim and
97:57 - i'll just show you this
97:58 - tim and tim and i run this here you see
98:01 - we get hello
98:02 - name and tim and these other two tims do
98:05 - not print
98:06 - and again that's because once we hit tim
98:09 - and n is equal to tim
98:10 - we simply break okay and we get out of
98:12 - the loop
98:13 - and that's like a really easy way to
98:15 - just break out of the loop and this is
98:16 - going to work for wallops that we do
98:19 - in what he called the next video now
98:21 - typically break is not something you
98:22 - want to be using a lot like you only use
98:24 - this if you really
98:25 - have to it's better to just make these
98:28 - conditions work the way they
98:30 - should and have the loop run like as
98:33 - many times as it needs to run you know
98:34 - what i mean
98:35 - uh so just try not to use this too much
98:37 - but i mean there's nothing really wrong
98:39 - with using it people just are
98:40 - frowned upon in the programming world
98:42 - using the word break okay
98:44 - so anyways that's been it for this video
98:45 - in the next video we're going to talk
98:46 - about while loops which is very similar
98:48 - to for loops but they just work
98:49 - a little bit of a different way again if
98:51 - you enjoyed the video please make sure
98:52 - you leave a like and subscribe and i
98:54 - will see you in the next one
98:55 - so in this video we are going to be
98:56 - talking about while loops now while
98:58 - loops are very similar to for loops
99:00 - anything you do with the for loop you
99:02 - can indeed do with the while loop
99:04 - that being said they do have different
99:05 - use cases in terms of where they're most
99:07 - useful
99:08 - but just remember anything you do with
99:09 - the for loop you can do with the while
99:11 - loop anything you do with the while loop
99:13 - you can do with the for loop they're
99:14 - completely interchangeable
99:15 - and if you only had one of them in
99:17 - programming you'd still be able to do
99:18 - everything it just might be
99:20 - not as i don't know nice to code
99:23 - that's the right word for it or elegant
99:25 - is probably the better word
99:26 - so a while loop is going to work when
99:29 - you typically don't know
99:30 - how many times you want to loop through
99:32 - something so it's kind of like a
99:33 - question
99:34 - um like you know it's going to be based
99:36 - on this condition but you're not really
99:38 - sure
99:38 - like if a for loop is more like you know
99:41 - you're going to do it a set amount of
99:42 - times a while loop
99:43 - is it could change based on the program
99:45 - based on user input okay something like
99:46 - that
99:47 - so what we're going to do here with this
99:48 - while loop is i'm just going to set one
99:50 - up and then we'll just talk about
99:51 - exactly what it does
99:52 - so in this case uh what i want my while
99:55 - loop to do is i want it to just
99:56 - continually keep asking the user for
99:58 - input
99:59 - until they give me like a certain word
100:01 - or like one or of two words
100:03 - okay so in this case what i'm gonna do
100:04 - i'm just gonna say
100:07 - let's see here maybe just getting
100:08 - answers be faster say
100:10 - ins x equals sc dot next
100:13 - int like this okay and what i'm going to
100:16 - do is i'm just going to keep
100:17 - looping through until they type the
100:19 - number 10 okay
100:20 - so while i can do this is you just type
100:22 - the keyword wow in here
100:24 - and then in these brackets is going to
100:27 - be your condition
100:28 - now this is why i focus so much about
100:30 - conditions in the
100:31 - first two videos because they go a lot
100:33 - with if loops while loops for loops
100:35 - so whenever while this condition is true
100:38 - then we're going to run the loop so in
100:40 - this case i'm going to say wow
100:42 - x does not equal 10
100:46 - okay um yeah exactly okay that's true so
100:50 - in if they type in 10 then it will not
100:53 - continue to do this
100:54 - otherwise we will continue to do this so
100:57 - that means i'm also going to have to get
100:59 - the int in here
101:00 - because every time that we run this loop
101:03 - we want to continue getting x so in this
101:05 - case we already have x to find we just
101:06 - do x
101:07 - and what i'm going to do is if they
101:09 - don't type in 10
101:10 - i'm simply going to tell them like type
101:12 - in 10. so we'll just say dot
101:14 - print ln in this case i will just say
101:20 - type 10 dot dot and you know what we're
101:23 - also just going to print out
101:24 - uh because i like to do this we'll just
101:26 - do system.out
101:28 - dot parent ln and in this case we'll say
101:32 - type a number so the user knows what
101:34 - we're looking for okay
101:36 - and that means we're also going to have
101:37 - to print this here
101:39 - and it should just be print not print
101:41 - println my apologies okay
101:43 - so again the way this is going to work
101:44 - is we're just going to continually keep
101:46 - looping through this until eventually
101:48 - the user types in 10
101:50 - in that case we will break it okay and
101:52 - we will not loop through this anymore so
101:54 - let's run this
101:55 - type a number let's type four it says
101:57 - type 10.
101:58 - type a number type 5. it doesn't work
102:00 - type 10
102:02 - there we go and we broke out of the loop
102:03 - and it no longer asked us for that
102:05 - number
102:06 - now these are actually really simple um
102:07 - it just wow
102:09 - this condition is true do everything
102:10 - that's in here and that's all you really
102:12 - have to know about while loops
102:14 - now again like we can what i was saying
102:16 - we can do everything that
102:17 - uh with for loops with while loops
102:19 - because we can also count in wallops as
102:20 - well so just like i did before i could
102:22 - do something like int
102:23 - count equals zero and then every time we
102:26 - run this loop we could just say
102:27 - count plus plus and then maybe at the
102:29 - end of our loop we wanted to do like
102:31 - tell them how many times they messed up
102:33 - okay what am i saying print
102:36 - system.out.println
102:38 - and in this case we'll just say you
102:41 - tried tired you tried
102:45 - and then plus count plus
102:49 - times okay make sure we add a little
102:51 - space here all right so now if we run
102:53 - this
102:53 - and we'll say like one two three and
102:56 - ten you tried three times until like
103:00 - eventually you got it okay
103:01 - so that's like a really simple way to do
103:03 - stuff with while loops
103:04 - now you guys might notice that this code
103:06 - here like this
103:08 - these lines are repeated up here so i
103:10 - have this intex
103:11 - and this type of number so how can i do
103:13 - this without repeating those lines
103:16 - because i don't want to have to type
103:17 - like what if i wanted to ask a ton of
103:19 - different questions and then do the
103:21 - while loop well i don't want to have the
103:22 - same section of code
103:24 - appearing multiple times so there's
103:26 - actually something called a do while
103:27 - loop
103:27 - so what i'm going to do is i'm just
103:28 - going to erase all this and i'm going to
103:31 - set up this
103:32 - do while loop and it's pretty much what
103:34 - it says we're going to do
103:35 - everything while this is true and you'll
103:39 - see how it works in just a second so i'm
103:40 - going to type the keyword do
103:42 - brackets and now everything in this
103:44 - brackets is what is going to happen
103:47 - while the condition that i put down here
103:50 - is true so the condition here is going
103:52 - to be the same well
103:54 - x does not equal 10. we're going to do
103:57 - everything in here so now you can see
103:59 - this is working fine there's no issues
104:00 - and what i'm going to simply do is i'm
104:02 - going to take this
104:03 - these two lines here i don't need that
104:04 - scanner because we're not going to
104:05 - redefine that every time
104:07 - and i'm going to paste them in here and
104:09 - what this is going to allow us to do now
104:11 - is x does not equal zero
104:14 - create local gosh okay uh let's just do
104:17 - this
104:19 - int x and then x
104:22 - okay perfect there we go so sorry that
104:24 - was just a quick issue but what this is
104:25 - going to allow us to do
104:27 - is we're automatically going to do this
104:29 - once no matter what this is going to
104:31 - happen
104:31 - once because we're going to do this and
104:33 - at this point x is not equal to 10. so
104:35 - we're automatically going to do this
104:36 - once which means we don't have to have
104:38 - it up top and then down below
104:39 - so we do that and then we check the
104:41 - condition if it's true
104:43 - we'll do it again or uh yeah and if it's
104:45 - not then we will break
104:46 - so we can do this we'll say type a
104:48 - number let's do four let's do five let's
104:50 - do
104:51 - negative zero is that a number yeah okay
104:53 - and
104:54 - ten and there we go we break out of the
104:56 - loop and everything is working fine
104:59 - and that is pretty much it for while
105:01 - loops again if you wanted to sell one up
105:03 - to look like a for loop
105:04 - then you'd literally just have to create
105:06 - a variable in this case say like into x
105:08 - equals zero you can set up a while loop
105:11 - so you say wow
105:12 - and you say x is less than or equal to
105:16 - ten and then in here you just say x
105:19 - plus equals one or plus equals two or
105:22 - whatever
105:22 - value you wanna add to it and then you
105:24 - can just do what you would do in the for
105:26 - loop
105:26 - underneath your increment or you could
105:28 - put the increment typically you put it
105:29 - at the end
105:30 - so at the end of the loop you're adding
105:31 - one and then you're checking okay but
105:32 - that's pretty much been it for while
105:34 - loops they're very simple
105:35 - uh in the next video what are we going
105:37 - to go over let me check my
105:39 - sheet here we're going to go over sets
105:41 - and collections
105:42 - like we're going to talk about hash
105:43 - tables and stuff um getting a bit more
105:45 - advanced
105:46 - and moving away from some like the basic
105:48 - stuff in java that being said if you
105:49 - guys enjoyed the video please make sure
105:51 - you leave a like
105:52 - and subscribe and i will see you again
105:54 - in the next one now in this video i'm
105:55 - going to be talking about
105:56 - sets and lists now sets and lists
106:00 - are from something known as the
106:03 - collection interface from java i believe
106:05 - that's what it's called someone correct
106:06 - me if that's wrong but i think that's
106:08 - the name
106:09 - and they are fairly complicated now i'm
106:12 - just going to talk about really like the
106:13 - basics of them
106:14 - there's a lot more to do with sets and
106:17 - lists
106:18 - i know i'm probably going to get some
106:19 - comment from some guy who says wow you
106:21 - really you didn't talk about a lot of
106:23 - this
106:24 - but i can't explain all of it to you
106:26 - guys right now because
106:27 - it's very difficult to understand if you
106:29 - don't know a lot about data structures
106:31 - which in our case we don't so i'm just
106:34 - going to talk about what a list is what
106:35 - a set is quickly and a very basic
106:37 - standard implementation of them now
106:40 - the reason i'm doing this is because
106:41 - whenever you're programming stuff like a
106:43 - lot of java tutorials you watch probably
106:45 - won't talk about these
106:46 - um because they're really complicated
106:48 - but
106:49 - you're going to need them to do certain
106:51 - things so for example with an array uh
106:54 - what i talked about before how you could
106:56 - like you had to set the size of the
106:58 - array like you had to know how many
106:59 - elements you wanted
107:00 - you don't need to do that with a set or
107:02 - with a uh
107:04 - list and that's the main advantage of it
107:06 - because a lot of times we're gonna be
107:07 - adding things into per se a list or a
107:09 - set and we don't know how many things
107:10 - we're gonna be adding so we can't
107:12 - define like an array of that length if
107:15 - that makes sense to us
107:17 - so let's actually just get started we're
107:18 - gonna talk about sets first and then
107:19 - we'll move into lists
107:21 - so i'm just going to create a set and
107:23 - i'm just going to type it out and then
107:24 - kind of explain exactly what i'm doing
107:26 - i'm just going to call this set t
107:27 - equal to
107:31 - new so we need new hash set
107:34 - and integer
107:38 - okay so this already probably looks
107:40 - confusing
107:41 - and if you're typing this out with me
107:42 - you're getting these red lines now
107:44 - what we should do uh to get rid of these
107:46 - red lines is we just have to hover over
107:47 - them and click
107:48 - import set uh by like clicking on
107:52 - whatever it says there if you don't have
107:53 - we're not using this ide
107:55 - just literally type import java.util.set
107:58 - and for hash set same thing we're just
107:59 - going to click on it and import it
108:01 - just because this isn't like built into
108:02 - main uh
108:04 - the java functionality all right so we
108:07 - have a set
108:08 - now what is a set how do we create it uh
108:11 - well a set
108:12 - is a collection of unordered elements
108:15 - that are unique meaning that a set
108:17 - cannot contain
108:18 - the same element twice and it doesn't
108:20 - know where that element exists
108:22 - so you can kind of think of a set as
108:24 - just like a big bubble and you kind of
108:26 - just throw things into it
108:27 - and it doesn't really know where they
108:29 - are it just knows that they exist
108:31 - there now you also have to understand
108:33 - that can only be unique things
108:35 - so for example i've created this integer
108:37 - set and this is the way that you do it
108:40 - so you type the keyword set uh in these
108:42 - little uh like greater than sign less
108:44 - than sign wherever you want to call it
108:45 - tags
108:46 - if you're talking html you type integer
108:49 - and i have the name
108:50 - t and i'm setting that equal to new hash
108:52 - set
108:53 - now you don't have to understand what a
108:54 - hash set is just know that it's like the
108:56 - standard
108:57 - implementation of a set and then same
108:59 - thing the type so integer and then these
109:01 - brackets here
109:02 - now inside of these brackets if you had
109:04 - another set you had created like say i
109:06 - said
109:06 - created a set uh called like w i could
109:09 - put
109:09 - w in here and assuming it had any
109:12 - elements in it this set would
109:14 - get all of the elements from w and start
109:16 - with that and then you could add things
109:17 - into it and whatnot okay
109:20 - so to add things to a set i'm just going
109:21 - to do this we'll go through and see how
109:23 - it works right
109:24 - you simply type dot add so i'm going to
109:26 - say t t.add in this case i'm going to
109:28 - add 5
109:29 - and we'll just copy this and we'll add
109:31 - like a few different
109:32 - numbers into our sets in this case i'll
109:34 - add 7 and we'll add 5 again
109:36 - and then we'll add 9 okay now what i'm
109:39 - going to do is i'm just going to print
109:40 - this set out to show you what it looks
109:42 - like now remember i said
109:44 - unordered collection of unique elements
109:46 - okay so let's
109:47 - print this out and you can see that we
109:49 - get five seven
109:50 - and nine and notice that this ad right
109:53 - here actually didn't do
109:54 - anything and that's because since we
109:56 - already have a five in our set
109:58 - when we try to add another five to it
110:00 - since it already exists
110:02 - uh it doesn't care and it just doesn't
110:04 - add it
110:05 - all right now i'm gonna add another
110:07 - element in this case let's add like
110:08 - negative
110:09 - negative zero negative eight all right
110:11 - as our element
110:12 - uh and you can see that we don't have
110:15 - any specific
110:16 - order now see when i printed this like i
110:18 - had added five
110:19 - seven nine and negative eight so you
110:21 - think that should be the order that we
110:22 - get it or it should come in some sorted
110:24 - order or something like that
110:25 - that doesn't happen with a hash set okay
110:27 - a standard hash set
110:29 - and that's just because again we're just
110:31 - a bubble we just know that things exist
110:33 - we don't care where they exist
110:37 - or how many times they exist we just
110:39 - care if they exist
110:41 - now to see if something exists in a set
110:43 - and this is typically something you want
110:44 - to do like this is a main
110:46 - operation checking if something exists
110:48 - that's why you use a set
110:49 - uh you can type t dot contains or like
110:52 - your set name dot contains
110:54 - and then any element in here that you
110:55 - want so in this case i can do like
110:58 - if five is contained in the set and it's
111:01 - gonna be able to tell me that
111:02 - really fast now i can't really explain
111:05 - to you
111:06 - why sets are so fast but just know that
111:08 - whenever you're looking for something in
111:10 - a set
111:11 - you can do that very quickly like very
111:13 - fast like in constant time it doesn't
111:15 - matter how big the set is the set could
111:17 - be 2 million elements
111:19 - or it could be five elements it will
111:20 - take you the same amount of time to look
111:22 - if something exists in the set
111:24 - okay and same thing with adding and
111:26 - removing things from the set that
111:27 - happens almost instantly
111:28 - as opposed to with arrays the larger the
111:30 - array gets the longer it's going to take
111:32 - us to look through
111:33 - and find certain elements okay just we
111:35 - have to understand that
111:36 - so what i'm going to do is create a
111:37 - variable i'm just going to call boolean
111:40 - x is equal to this and what i'm going to
111:43 - do is i'm simply just going to print
111:45 - x now to see if that is contained
111:48 - and in this case yes it is 5 is
111:50 - contained again if i do something like 0
111:54 - then obviously we get false it's not in
111:55 - there to remove something
111:58 - we can type t dot remove or our set name
112:01 - dot remove
112:02 - and then whatever the element is that we
112:04 - want to remove so in this case if i want
112:05 - to remove like nine from my set i would
112:07 - do that
112:08 - then if i print my set so in this case t
112:12 - we just get five seven negative eight
112:14 - because we removed nine
112:15 - those are kind of like the standard
112:17 - operations uh
112:19 - two i'm trying to think if there's any
112:21 - other ones okay so there's one more
112:23 - or there's a few more but i don't know
112:24 - which ones are important you can clear
112:26 - an entire set
112:27 - by just doing dot clear so just simply
112:29 - remove everything from it
112:31 - like that to see if a set is empty
112:34 - you can do dot is empty and this will
112:37 - literally just tell you if it's empty or
112:38 - not
112:39 - to get the length of the set you can do
112:42 - dot
112:42 - size and this will tell you how many
112:44 - elements so in this case if i do
112:46 - size change this to an int
112:49 - and just print x here then we get
112:53 - a size of three so like again if we had
112:55 - nothing in there the size would be zero
112:57 - so is empty and that are kind of like
112:59 - similar in the sense that you can just
113:01 - check by the size
113:02 - um and yeah so that's a hash set
113:06 - a hash set is like the standard set um
113:09 - and that's the way that it works the way
113:10 - i explained it to you now they also
113:12 - have a tree set and
113:15 - we also have a linked hash set
113:18 - now whenever you use these things
113:20 - they're going to pop up here
113:22 - i'm not really going to talk about what
113:23 - these do too much i'm just going to kind
113:24 - of show you
113:25 - the way a tree set works now a tree set
113:28 - is similar to a set in the sense that
113:29 - you can only have
113:31 - the or a hash set sorry that you can
113:33 - only have unique elements
113:35 - but these are actually ordered and
113:36 - they're ordered in a tree data structure
113:39 - you don't have to understand what this
113:40 - means just know that it's like it shows
113:42 - up ordered
113:42 - what's what's our problem here just want
113:44 - to read this error
113:46 - tree set cannot be resolved to a type
113:49 - interesting okay tree set well let's
113:51 - just try this
113:53 - um that still worked okay so anyways
113:56 - i don't know why i was showing me an
113:57 - error but tree set is gonna actually
113:59 - give us an order
114:00 - so if i type t like this
114:04 - you can see that we actually have an
114:05 - order for the set now so negative eight
114:07 - five
114:07 - and seven now like arrays like we can't
114:10 - just
114:10 - index the set and we can't just say like
114:13 - t
114:14 - zero like that doesn't work doing that
114:17 - like we were able to do with arrays but
114:19 - when we print it out or when we look
114:21 - through the set
114:22 - it maintains this order in like a tree
114:25 - functionality that i can't really
114:27 - explain to you now linked hash sets
114:30 - are this so linked hash set again we're
114:32 - gonna have to
114:34 - import this up there it's linked set and
114:36 - this is similar to a basic set it's just
114:38 - faster on certain operations
114:40 - so i'm not like i don't really want to
114:43 - talk about them too much because i feel
114:44 - like i'm already confusing you guys but
114:46 - just understand if maybe you know a bit
114:48 - about like operations and speed and time
114:50 - complexity uh they have a linked hash
114:51 - set a regular hash set
114:53 - and a tree hash set or tree set or
114:55 - whatever i typed okay
114:57 - all right so that's enough for sets um
115:00 - don't worry if this is a bit confusing
115:01 - like we're
115:03 - we're not going to be using these too
115:04 - much i just want to show you because i
115:05 - feel like you guys are going to need to
115:07 - do this for some of your projects or
115:08 - whatnot if you're learning this for a
115:09 - reason
115:11 - now we also have lists now lists these
115:13 - are easier to understand don't worry
115:15 - but there is again two types so to
115:17 - create a list what we're going to do is
115:18 - we're actually going to type array
115:20 - list we're going to give it a type in
115:22 - this case i'm just going to give my
115:23 - integer type and notice how i'm not
115:26 - typing int i'm typing integer just
115:28 - that's important that we need to use
115:29 - integer here instead of int okay
115:31 - so arraylist integer i'm going to call
115:32 - this one t again equals new
115:35 - arraylist and we'll type
115:38 - integer and we'll put brackets and there
115:41 - we go
115:42 - now we're going to have to import this
115:43 - so import arraylist up there
115:45 - and we now have a list and what a list
115:48 - allows us to do is it's
115:49 - you can almost think of it as the exact
115:51 - same thing as an array
115:53 - except it's a bit slower and it can
115:55 - change sizes so we can add things to it
115:57 - we can remove things from it
115:58 - and if we get to like the end of the
116:01 - array or the end of the list sorry we
116:03 - can just add another element into it
116:05 - it doesn't matter so we can have like a
116:07 - dynamically sized array
116:09 - these have pretty much identical
116:11 - properties to the set
116:13 - so to add things you can do t dot add
116:16 - and you can add like in any element you
116:18 - want so you have like
116:20 - one right okay that works fine to remove
116:22 - things t dot remove
116:24 - uh now to index things because just like
116:26 - an array we can actually index things
116:28 - with the list because this is going to
116:29 - care about the position
116:30 - it's not going to just care that it
116:33 - exists like a set
116:35 - what we can do is we can do t dot get
116:38 - and then we can give an index right so
116:40 - it's even it's showing it's always
116:41 - saying index right
116:42 - here so i do dot index 0 then that would
116:45 - give me
116:46 - 1 right because 1 is added in there now
116:48 - to like put thing
116:50 - put something or to set something at a
116:52 - certain index what you do this is t dot
116:54 - set and you type the index and the
116:57 - element
116:58 - so i wanted to set index one per se
117:01 - to be equal to like five then that's the
117:04 - way i would do it index one is five okay
117:07 - we print out t here just to show you
117:10 - what it looks like
117:13 - okay sorry that's we can't do that we
117:15 - have to do t we have to add something in
117:17 - so to set something like this sorry
117:19 - uh you have to actually have something
117:20 - added at that index i forgot i didn't
117:22 - add that so i'm just going to add
117:24 - two so what i'm doing now essentially is
117:27 - what this set actually does
117:28 - is you have to have something already
117:31 - existing
117:32 - at that index and this is going to
117:33 - change that index for you so this is to
117:36 - change an already existing index and
117:37 - before i was trying to set one
117:39 - we didn't have that in so that was my
117:40 - mistake but anyways there we go so now
117:42 - that works
117:43 - uh we've changed two to equal to five
117:45 - and two is that position one right so
117:46 - that's the way that that works
117:48 - i've got a thing up here i'm just gonna
117:49 - read through a few of these uh
117:51 - set yeah okay so that's the basic ones
117:55 - again we have dot size so t dot size
117:59 - we can do t dot empty or is empty and
118:01 - this is actually really useful and it's
118:03 - called sub list
118:04 - and what this allows us to do is get
118:06 - from certain indexes
118:08 - so t dot sub list let's see add argument
118:10 - yeah so we just need
118:11 - ins so this is going to allow us to get
118:13 - within a certain range
118:15 - so say i add like these a bunch of times
118:20 - okay so we have six elements now
118:23 - what i want to do is i want to get from
118:24 - like index 1 to index
118:27 - 3 and i want to print that to the screen
118:29 - so let's just take this
118:31 - and put this here instead so let's get
118:34 - rid of t
118:35 - get rid of the semicolon and print out
118:37 - and see what we get
118:40 - so we get here now is five and one
118:42 - because although our
118:44 - uh list actually has what do you call
118:46 - it's like six elements in it from here
118:48 - we can just get the elements from one to
118:50 - three
118:51 - not including three so if i type like
118:54 - one to four
118:55 - then you should see we get one more
118:57 - element in here we get
118:58 - five one and two because that's from
119:00 - from index one to index four but not
119:02 - including index four
119:04 - that's what we're grabbing we're getting
119:05 - all those elements in the uh the sub
119:08 - list like that
119:09 - now this is array list we also have
119:12 - linked list
119:13 - again this is another data structure
119:15 - that i can't really explain to you
119:17 - just understand that it is faster um
119:21 - at certain operations than an arraylist
119:23 - so for any of you that understand the
119:25 - difference between this you have linked
119:26 - lists and arraylist
119:28 - and you guys i recommend you to play
119:30 - with those and figure them out on
119:31 - yourself
119:32 - anyways we're coming up on about 15
119:34 - minutes now almost
119:36 - uh and that's pretty much all i wanted
119:37 - to talk about with sets and lists now i
119:39 - know this video might have been a bit
119:41 - confusing um
119:42 - there's a lot of stuff that i wasn't
119:43 - able to explain to you guys but just
119:45 - understand that
119:46 - if you're trying to do something and you
119:47 - don't know how long
119:49 - you want something to be like a list uh
119:51 - or an array you don't know how long you
119:53 - want it to be
119:54 - it's a different amount of elements like
119:56 - you don't know you would just use
119:57 - an arraylist the way that i showed that
119:59 - to you before
120:00 - so arraylist like that because then you
120:02 - can add things you can get things you
120:04 - can set things
120:05 - and you don't have to worry about like
120:06 - having a designated length the reason
120:09 - you use a set
120:09 - is when you don't care how many times
120:12 - something exists
120:13 - or where it exists you just care if it
120:16 - exists
120:17 - and the reason a set is better is
120:18 - because it's
120:20 - simpler and it's a lot faster to do
120:22 - operations on in terms of like a
120:23 - computer efficiency standpoint that's
120:26 - when you would use a set
120:28 - anyways i'm sorry about the confusing
120:29 - video in the next one
120:31 - i am going to be talking about hash
120:33 - tables which again are similar to this
120:35 - but then after that we're gonna be
120:36 - moving into object oriented programming
120:38 - getting into classes
120:39 - and that stuff's not as hard it is just
120:41 - a bit more information to remember
120:42 - anyways that's been it for this video if
120:44 - you guys enjoyed please make sure you
120:45 - leave a like on the video
120:46 - and subscribe to the channel if you are
120:48 - not and i will see you again in another
120:49 - one
120:50 - so in this video i am going to be
120:51 - talking about hash maps
120:54 - or like java maps the reason i say it
120:56 - like that is because there's a few
120:57 - different implementations of maps
120:59 - similar as to how those different
121:01 - implementations of lists
121:03 - and like array lists and all that stuff
121:06 - so
121:06 - maps if you're coming from python like
121:08 - me you can think of them as
121:09 - dictionaries and i'm going to be talking
121:11 - about three different types of maps so a
121:13 - hash map a tree map
121:15 - and what was the last one i got it
121:16 - written down here uh linked hash map
121:18 - sorry i just forgot about that one
121:20 - so pretty much a map is known as a key
121:22 - value pair
121:23 - in any other languages they're typically
121:25 - called dictionaries or hash tables or
121:27 - hash maps or whatnot okay
121:29 - so to create a map and i'm just going to
121:30 - do this and then we'll talk about
121:32 - exactly what it does i'm just going to
121:33 - create a map
121:33 - m it's going to equal to new hash
121:37 - map like this okay and this
121:41 - is your simple syntax now to you have to
121:43 - import this so i'm just going to import
121:45 - java.util so just by clicking on it
121:47 - and we have to import map as well so
121:49 - we'll import
121:50 - the map there so you see it's all coming
121:52 - up now for us
121:53 - okay so now that we have that i want to
121:55 - talk about exactly what a map
121:57 - is now a map like i said is a key value
122:00 - pair
122:01 - meaning that it's similar to like a list
122:03 - and an array
122:04 - in the sense that you can index things
122:06 - but instead of indexing them by numbers
122:08 - you index them
122:09 - by keys now keys can be anything that
122:12 - you want a key could be a string a key
122:14 - could be an array
122:15 - actually i'm not sure if it could be an
122:16 - array but it could be a string it could
122:17 - be a number it can be a char
122:19 - uh it could be a float like pretty much
122:21 - whatever you want can be the key
122:23 - and that key links us to a value
122:26 - so the easiest way to kind of
122:27 - demonstrate this is just to do it and
122:29 - then
122:30 - to talk about what's really happening so
122:32 - to put a new value into
122:35 - a hashmap or into a map what you do
122:38 - is you have to specify a key and a value
122:41 - so you type whatever the name of your
122:43 - map is in this case m
122:44 - dot put and then you need to put a key
122:46 - in a value so in this case for my key
122:48 - i'm going to type
122:49 - tim and it is going to lead to the value
122:52 - 5. so i type tim and then the value is
122:55 - 5.
122:56 - so i put that in there and now i'll just
122:58 - show you
122:59 - uh what it looks like if we print this
123:01 - out to the screen
123:02 - because i think it will give us a decent
123:04 - representation system dot
123:07 - what am i saying system.out.println
123:10 - sorry guys i'm a little tired today
123:12 - and we'll print m and see what we get so
123:15 - in this case you can say we have c
123:17 - this the curly braces says tim is equal
123:19 - to five
123:20 - meaning that if we're to index tim we
123:22 - get the value five
123:24 - now how do we do that so how do we
123:26 - actually get a value based on a key
123:28 - the way we can do this is if you put
123:30 - square brackets next to your map
123:32 - actually you can't do like that this is
123:34 - python we have to m dot and then
123:36 - get sorry i'm still used to the python
123:38 - syntax here guys
123:39 - we type m.get okay and then we put the
123:43 - key
123:43 - in here so in this case i'm going to put
123:45 - tim as my key
123:47 - and well you should already be
123:48 - predicting what we're going to get out
123:50 - to the screen
123:51 - in this case we get the value 5 and that
123:53 - is because the key
123:54 - tim leads us to the value five now to
123:57 - put
123:57 - another thing into our map we can do
123:59 - this right so we do tim we could do like
124:02 - joe and joe doesn't have to point to a
124:04 - number it could point to another string
124:05 - and that string could be like
124:07 - uh i don't know x okay and we can just
124:10 - do whatever we want like we can have the
124:12 - the key one and or the key 11 and the
124:15 - key 11 points to 999
124:16 - okay and now if i just print m out
124:19 - you'll see that we don't get any issues
124:22 - and that this works fine we get joe
124:24 - equals x tim equals five eleven equals
124:26 - nine nine nine
124:26 - okay now this is an extremely fast
124:30 - data set uh meaning or data type
124:32 - whatever you wanna call it
124:34 - meaning that everything from adding to
124:36 - removing
124:37 - to overriding to getting happens in
124:40 - constant time now again like i talked
124:42 - about in my sets video you don't really
124:44 - have to understand what that means but
124:45 - if you do that's great
124:46 - and just know that this does happen in
124:48 - constant time
124:50 - now i'm going to show a i guess i'll
124:52 - show the tree map
124:53 - and the uh what was the other map i
124:56 - talked about linked hash map first
124:58 - and then we can kind of talk about the
125:00 - differences between them so with the
125:02 - hashmap
125:03 - as opposed to the other type of maps i'm
125:04 - going to show you this one does not
125:06 - retain an order so all of these maps can
125:09 - only contain unique elements or unique
125:12 - keys meaning that if i try to add
125:13 - another key so i try to add 11 and i try
125:15 - to add this to be 998
125:17 - instead of adding another key that's
125:18 - equal to 11 we're simply overwriting
125:21 - this already existing key that is 11. so
125:23 - in this case you can see that we
125:24 - overwrite it and we get 998. you cannot
125:26 - have
125:27 - two of the same keys existing in the map
125:30 - but you can have two of the same values
125:32 - if you'd like to okay
125:34 - so sorry that kind of got me off track
125:36 - but that was important to understand
125:37 - so this hash map does not guarantee the
125:40 - order in which we add things
125:41 - in so you can see that i added 10 then i
125:44 - added joe and then i added 11
125:46 - and it's showing me joe tim and eleven
125:49 - now this is not any kind of sorted order
125:51 - because how do we sort numbers
125:53 - and uh strings and all that stuff
125:55 - together it's not in the order that we
125:57 - added it in so what order is it in well
125:59 - it is in
126:00 - no order and that is why this hash map
126:02 - is extremely fast because it does not
126:04 - keep track of the order of elements when
126:06 - they go in
126:07 - so just know that if you're trying to
126:09 - like look through the map because you
126:10 - can iterate through maps and i'm going
126:12 - to show you that in a second
126:13 - uh it doesn't keep it in the correct
126:16 - order okay
126:17 - now the next map that we're going to
126:19 - talk about is the
126:20 - tree map okay now this tree map is
126:23 - well we're going to import it of course
126:26 - is similar to the tree
126:28 - list or the tree set or whatever one i
126:29 - showed you in the other video
126:31 - and that when we add things in it's
126:33 - actually going to keep it in a sorted
126:34 - order
126:35 - so if i run this i'm actually curious to
126:37 - see what kind of sort we're going to get
126:38 - okay so we don't get anything so that's
126:40 - that's actually a good area to run into
126:41 - whenever we're using a tree map
126:43 - the types that we add to the map have to
126:46 - be the same meaning that the keys
126:48 - have to be the same data type at least
126:51 - i'm pretty sure
126:52 - so i'm just going to see if i remove
126:53 - this if this is going to work for us
126:55 - yes so in that case we do get in
126:57 - assorted order we get joe and then we
126:59 - get tim
127:00 - because obviously j is before t and
127:02 - that's the way it's going to sort
127:03 - strings so if i try to put like an
127:05 - a value in here so it's yeah it's even
127:07 - showing me a key value
127:09 - i'll literally just put like a is equal
127:12 - to
127:12 - b and i guess we can't say equal we have
127:14 - to say comma uh
127:17 - what's our error semicolon i'm always
127:19 - forgetting those aren't i
127:20 - okay so we'll run this there we go so
127:22 - you see we get a first because obviously
127:24 - a well that's the first letter in the
127:25 - alphabet so that's going to show up
127:26 - before joe
127:27 - and before tim so that sorts the order
127:29 - for us and that means that the data
127:30 - types for the keys that we pass
127:32 - in have to be the same so we could use
127:34 - numbers we could use strings using
127:35 - whatever data type you want they have to
127:37 - be
127:37 - completely the same for that map now for
127:40 - the other type is a
127:41 - linked hashmap and what this does
127:44 - is it's similar to a list in that it
127:48 - keeps the
127:49 - same order that you add things into it
127:51 - so in this case if i print
127:53 - out m you can see we get tim joe and
127:55 - then a
127:56 - and that's because it's actually going
127:57 - to maintain the order in which we added
127:59 - elements so it's going to say tim that
128:01 - was the first element so that's going to
128:02 - be the first thing that we show
128:04 - and then joe that's going to be the
128:05 - first thing and then a or sorry second
128:07 - and then a this is gonna be the third
128:08 - thing because that's the order in which
128:10 - we added them in
128:11 - and those are the only main differences
128:13 - um other than like the speed of which
128:15 - these things run at
128:16 - uh that you have to kind of understand
128:18 - right now okay and typically whenever
128:19 - you do anything you're just gonna be
128:20 - using a hashmap you don't really need
128:23 - like a linked hashmap or a tree hashmap
128:26 - or treemap whatever it's called for any
128:28 - of the stuff that we're going to be
128:29 - doing
128:30 - right now so what i'm going to do now is
128:33 - i'm just going to show you a few methods
128:34 - how we can kind of clear
128:35 - the maps how we can like remove elements
128:37 - and some useful things that you might
128:38 - want to do
128:40 - so what we can do to get all of the key
128:43 - values or to get like a certain key
128:44 - value we can say
128:46 - actually i'll just show this one first
128:49 - what we can actually do is there's cool
128:51 - things that are going to be really
128:52 - useful to you
128:54 - and uh doc contains value so this is
128:57 - let's see this method contains values
128:59 - not available for type map
129:02 - interesting match contains value object
129:04 - yeah so we just have to put something in
129:06 - there okay
129:07 - so m.contains value and then in here
129:10 - we're just going to put
129:11 - uh like any value on so in this case b
129:13 - so what this is going to do
129:15 - is it is actually going to check for us
129:16 - if this value exists
129:18 - in the map and remember the values are
129:20 - always the second elements here
129:22 - and they are linked up or like attached
129:24 - to the key so it's going to tell us if b
129:26 - exists now we can do the same thing with
129:28 - keys and the keys are more useful and
129:30 - i'll show you why in a second
129:32 - contains key and in this case for the
129:35 - key i can put like contains the key five
129:38 - right and that will give us a true or
129:39 - false value similar to what we're doing
129:40 - with sets and lists in the last video
129:43 - okay now the reason keys are more useful
129:46 - is because if i try to do something like
129:49 - m dot
129:50 - get and i put the key let's say five
129:52 - well the key five
129:54 - does not exist the value five exists but
129:56 - the key five does not exist
129:57 - so watch what happens when i run the
129:58 - program m.5 actually let's just see what
130:02 - this is printing out to us
130:03 - because i'm curious if this is going to
130:05 - crash for us or not let's let's see here
130:10 - m.5 no yeah so this isn't going to
130:13 - actually crash
130:14 - for us if we try to get a uh
130:17 - what do you call it a key that does not
130:18 - exist in the map but it's going to
130:19 - return us a null
130:21 - value because this key does not exist in
130:23 - the map
130:24 - that's actually interesting i didn't
130:25 - know that in python if you try to
130:28 - get a key from a map or from a
130:30 - dictionary and it doesn't exist you
130:31 - actually get an error so
130:33 - that's interesting to know uh anyways i
130:35 - guess another method i could show
130:37 - is let's see here dot values so what
130:41 - this is going to do
130:42 - is it actually just prints out all of
130:44 - the values in the map
130:45 - so if i copy this
130:48 - and i simply print it down here we get m
130:51 - dot values
130:52 - and in this case it'll just give me xb
130:54 - and five which are all these and you can
130:56 - see it gives me that in no particular
130:58 - order it's important to remember
131:00 - values let's see if there's any other
131:02 - ones we can use um
131:04 - we can use clear so i've just got a text
131:06 - document beside me because i always
131:07 - forget all these
131:08 - to show you i always forget which ones
131:10 - so m.clear obviously this is just going
131:12 - to remove everything from
131:14 - the uh what do you call it the map so we
131:16 - get an empty map
131:18 - and i believe the last one is is empty
131:20 - and
131:23 - this one like that is simply just going
131:25 - to tell us if
131:26 - the map is empty or if it's not empty
131:29 - now how much time we have 10 minutes
131:30 - so i actually i am not going to show you
131:32 - an example of using these maps
131:34 - but uh if you want to think about this
131:36 - and maybe try programming this yourself
131:38 - using the maps that i just showed you be
131:40 - good exercise
131:41 - and that is given a string or like an
131:44 - array of characters
131:47 - count all of those characters into a map
131:50 - so have a key that's equal
131:52 - to let's say the letter and then the
131:55 - value for that key
131:56 - is equal to the how many times that
132:00 - letter occurs or how many times that
132:01 - character occurs
132:02 - and try to do that yourself and if
132:04 - you're able to accomplish that well then
132:05 - you're definitely learning and you're
132:07 - understanding the stuff that i'm
132:08 - explaining
132:09 - so anyways that's been it for this video
132:10 - if you guys enjoyed please make sure you
132:11 - leave a like and subscribe and i will
132:13 - see you again in the next one so in this
132:15 - video i'm actually not going to be
132:16 - teaching you guys anything
132:17 - new so if you're more interested in just
132:19 - like speeding through and learning
132:20 - everything i suggest you just move to
132:21 - the next video
132:22 - but what i'm going to be doing is
132:23 - showing you some common problems that
132:25 - you're going to want to solve
132:26 - and how you can do that with the
132:27 - information i've showed you so far so
132:29 - kind of bringing everything in now
132:31 - mixing it all together and using all the
132:33 - things and this is a really good way
132:34 - to kind of like apply all the knowledge
132:36 - that we've just learned into
132:38 - solving like a few common computer
132:40 - problems
132:41 - because a lot of time you guys learn how
132:43 - to do all this stuff but you don't know
132:45 - how to kind of mix it all together and
132:48 - that's what i'm trying to do in this
132:49 - video so i'm also going to be showing
132:50 - you some like useful methods and some
132:51 - things that i may have forgotten to talk
132:53 - about in in
132:54 - previous videos so yeah that's what this
132:56 - video is going to be about
132:57 - so in the last video i mentioned that a
132:59 - good exercise to do would be
133:02 - if you have like i don't know a word and
133:05 - you want to count or like a sentence or
133:06 - a string
133:07 - you want to count all the letters and
133:09 - store them in like a hash map and have
133:10 - the letter as the key and the value
133:12 - being how many times they appear
133:14 - so i figured for any of you guys that
133:16 - were uh brave enough to attempt that on
133:18 - yourself i would show you a solution
133:19 - here quickly to doing that and for any
133:21 - of you guys who didn't see that
133:23 - make sure you pay attention because this
133:24 - is really useful it's going to help you
133:26 - also to understand kind of how maps work
133:27 - and how you can use them
133:29 - so what i'm going to do first of all is
133:30 - i'm just going to create a string
133:32 - let's call str is equal to and i'll say
133:37 - hello my name is tim
133:40 - and i am cool all right very creative
133:44 - string name
133:45 - anyways um so we're going to do that
133:48 - just because we're going to count all of
133:49 - the letters in this string
133:51 - now the human way to count this would be
133:53 - to go through and literally read like
133:54 - each letter and be like okay so i have
133:56 - an l how many times does it l up here
133:57 - but i'm gonna show you how we do this
133:58 - with maps and for loops like very
134:00 - efficiently
134:01 - um in computing so what i'm gonna do is
134:03 - create a for loop
134:04 - what we're gonna do is we're gonna loop
134:06 - through the string and the way that we
134:08 - can do this
134:09 - is because if i try to do like for char
134:12 - or like x because it's going to be a
134:14 - character right
134:15 - and in str you see we get this red line
134:18 - it says we can't iterate over
134:20 - a string so the way that we can do this
134:22 - is actually a cool method and a useful
134:24 - method
134:25 - and it is going to convert this string
134:27 - into a character array for us
134:29 - the way that we can do that is by doing
134:30 - uh i guess a dot
134:33 - dot 2 char array and this
134:36 - is if i literally just print this out
134:38 - for you if you want to see what it looks
134:39 - like
134:42 - system.out.println
134:44 - is simply just going to put every
134:46 - character so including the spaces
134:48 - into a character array for us so let's
134:50 - just run this
134:51 - uh and you can see it just it's
134:53 - literally just printing this entire
134:54 - thing but it's actually in an array and
134:56 - this is going to allow us to loop
134:58 - through it so you'll see in a second
135:00 - okay so what i'm going to do now
135:04 - is every character i'm going to see if
135:06 - that key
135:07 - already exists in the map if it does
135:10 - i'm going to get the value because that
135:12 - value is going to be how many times it
135:13 - exists so in this case say
135:14 - i'm looking for like m it already exists
135:16 - in the map i'm just going to add 1 to it
135:18 - and then overwrite that key with a new
135:19 - value
135:20 - and you'll see what i mean here in a
135:21 - second so i'm going to say if
135:23 - m dot contains key of
135:27 - x then what i'm going to do is i'm going
135:29 - to say
135:30 - old i will say int old
135:34 - equals get and then the key is going to
135:37 - be x
135:39 - and then what we're going to do is
135:41 - what's the issue here
135:42 - m add cast and if m i need this
135:47 - for getting all my brackets into old
135:49 - equals m get
135:51 - x and x should be
135:55 - interesting one second saying i have to
135:57 - cast this to an integer
135:58 - okay let's just do this i don't think we
136:00 - actually need to do this but let's just
136:01 - cast it to an
136:02 - end all right anyways and then we'll say
136:06 - m.put and for the key is going to be x
136:09 - because that's going to be the character
136:11 - and we're going to say old plus one now
136:14 - what this should do for us is just
136:16 - increment the
136:17 - the amount so that's going to go up by
136:18 - one now otherwise so
136:20 - if that key does not exist what we're
136:21 - going to do is we're going to put into
136:23 - our map
136:24 - a new key and the key's value is going
136:26 - to be 1 because we just found the first
136:28 - occurrence of that letter and the key is
136:30 - going to be x
136:31 - standing for the letter and that should
136:33 - work
136:34 - now after we do that i want to see the
136:37 - counts of all these letters so to do
136:38 - that
136:39 - it's probably helpful i spell it system
136:40 - correctly
136:42 - we're going to print the line and we're
136:44 - going to print m okay so
136:46 - quickly i know i did this fast and you
136:47 - might not really understand exactly
136:48 - what's going on but we're just looping
136:50 - through every letter
136:51 - in this string we're going to check the
136:53 - first check is going to see if
136:55 - the map contains that letter already so
136:58 - as a key
136:59 - if it does not what we're going to do is
137:01 - we're simply going to add in a key and
137:02 - it's going to be equal to that letter
137:04 - and it's going to have a value of 1.
137:06 - because we just found it it occurs one
137:07 - time we already know that
137:09 - now if for some reason or if that key
137:11 - does exist what we're going to do is
137:13 - we're going to get that
137:14 - previous count and then we're going to
137:16 - add 1 to that previous count and
137:18 - override the key so like if the count is
137:19 - 4 it goes up to 5.
137:21 - pretty straightforward so if i run this
137:23 - you can see we get
137:25 - space well there's 8 spaces we get a
137:27 - there's three a's c there's one d
137:29 - there's one and it goes through and it
137:30 - counts all of the different letters for
137:31 - us and if we wanted to confirm if that
137:33 - was correct
137:34 - we could go through and count them like
137:36 - that
137:37 - and just by looking at it here it does
137:39 - look as though that is correct
137:41 - so yeah that's a really common way to
137:42 - use a map
137:44 - yeah it's really useful and there's a
137:46 - lot of cases in which you want to do
137:47 - something like that okay so the next
137:50 - thing i want to show you guys is
137:51 - something i forgot to do in the last
137:52 - video and this is really just going to
137:53 - take like 10 seconds but
137:55 - pretty much to remove an element from a
137:57 - map you probably already guessed but
137:58 - it's literally just
137:59 - m.remove and then you just type the key
138:02 - so i just felt like i had to say this
138:04 - because i watched back my other video
138:06 - and i realized i forgot to say it
138:08 - so to remove an element you do m.remove
138:10 - and just put the key so if i wanted to
138:11 - remove like all the spaces which
138:13 - actually wouldn't be a bad idea to
138:14 - remove
138:15 - from our counts then if i do that
138:19 - interesting why it's not letting me
138:21 - remove that
138:23 - let's try that maybe oh it's because
138:25 - it's not it's because it's a character
138:26 - my bad sorry guys i've been doing string
138:28 - a character of a space is different
138:30 - uh yeah so then it actually removes the
138:32 - uh that character the space
138:33 - from our program or from our map
138:36 - whatever okay
138:37 - now the next thing i wanted to show
138:39 - actually is sorting
138:41 - so sorting is something you typically
138:42 - want to do on arrays
138:44 - so i'm actually going to remove all this
138:45 - and i'm going to create a new array
138:47 - an integer array i'm going to say int x
138:50 - equals
138:51 - in this case let's do like three and
138:52 - let's do a bunch of different
138:54 - values and see if we can get this to
138:56 - sort for us
138:57 - uh let's do negative 99.
139:00 - semicolon there for us and to sort this
139:03 - is actually really easy all we have to
139:04 - do
139:05 - is just type arrays
139:08 - dot sort and then what it takes is it
139:10 - takes two arguments now the first
139:12 - argument
139:13 - is obviously going to be our array so in
139:16 - this case
139:16 - x and then the other two arguments are
139:19 - actually optional
139:20 - and what these do sorry so there's three
139:22 - arguments not two what these arguments
139:24 - do
139:24 - is from a certain index so if we wanted
139:27 - to sort just
139:28 - let's say like this part of the list
139:30 - that's highlighted
139:31 - we can actually do that and the way that
139:33 - we would do that is we would type 1
139:35 - because we're going to start at 1
139:36 - and then if we were going to 7 1 2 3 4 5
139:40 - 6 7 funny enough we would actually type
139:43 - 7. now i know this is index 6 but the
139:45 - thing is it's going to sort
139:46 - up but not including to that index so if
139:49 - we type 7
139:50 - it's going to that's 7 but it's only
139:52 - going to sort up to
139:53 - like the actual number 7 okay and what
139:56 - this does
139:57 - and i believe is actually just changes
139:59 - the list we don't need to say like
140:02 - x equals arrays.sort we just say
140:05 - arrays.sort
140:06 - and then what we can do is we can do
140:11 - system.out.println
140:12 - and we can print x and let's see if it
140:15 - did
140:16 - end up sorting that section of the list
140:17 - for us okay so we actually uh man of
140:20 - course we can't do that
140:21 - we're gonna have to set up a basic for
140:22 - loop to print these out just because
140:24 - when we try to print a raise i forgot we
140:26 - get that little loop
140:27 - or we get that message because that's
140:28 - the memory address but
140:30 - anyways let's say for uh int
140:35 - i in x and then we'll simply just
140:38 - print out i it's got to make it
140:41 - complicated for us doesn't it
140:43 - uh and instead of printing ln we're just
140:46 - going to print
140:46 - and we'll just add a comma here just to
140:49 - make it separated
140:50 - okay so let's run that so there we go so
140:52 - it actually did
140:53 - sort this middle section of the list for
140:55 - us right so we got 1 2
140:57 - four five six seven and you see eight
140:58 - and zero were not touched and
141:00 - negative 99 was not touched now if you
141:02 - want to sort the entire thing and you
141:03 - don't want to worry about these indexes
141:05 - you can just put x in this case if we do
141:07 - this we're going to get negative 99
141:08 - 0 all the way up to 8. and yeah so you
141:12 - could sort like from three to five or
141:14 - three to six or whatever okay
141:16 - and you can see it's only going to sort
141:17 - like a few of the elements in the list
141:19 - for us
141:20 - or in the array for us so that's a
141:22 - really useful way
141:23 - to sort things out quite quickly
141:25 - actually and quite easily
141:26 - using just arrays.sort and remember you
141:30 - don't have to do
141:30 - like x equals arrays.sort because what
141:34 - it's actually going to do is just sort
141:35 - in place all the elements of x and swap
141:37 - them around
141:39 - rather than creating like a new version
141:40 - of x that is sorted
141:42 - so anyways i know this has been like a
141:44 - quick video but i just wanted to show
141:45 - you and for some of the guys that might
141:46 - have been struggling
141:47 - um how we can kind of incorporate some
141:50 - of these things together
141:51 - and how to create like a basic
141:52 - problem-solving program maybe a way you
141:54 - go about doing that
141:55 - hopefully this was useful to you guys
141:57 - let me know in the comments down below
141:59 - and in the next video we're gonna be
142:00 - getting into object-oriented programming
142:02 - and that's gonna be the rest of the
142:03 - tutorial series
142:04 - uh it's a bit more complex but it's
142:06 - definitely like the
142:08 - heart of java and it's something that we
142:09 - have to understand so if you guys
142:10 - enjoyed the video please make sure to
142:11 - leave a like and i will see you in the
142:13 - next one so in today's video we're going
142:15 - to be introducing
142:16 - object oriented programming and talking
142:18 - about what objects are and getting a
142:20 - little bit into classes
142:22 - and methods so i think the first thing
142:24 - to really talk about is what is
142:25 - an object so an object essentially is
142:28 - just
142:29 - an instance of a certain data type so we
142:32 - know we have data types like ins
142:33 - strings bulls scanners like all kinds of
142:36 - different things that we can use like
142:37 - arraylist
142:38 - hash table hash list whatever hash map
142:41 - all that stuff okay
142:43 - and those are all known as data types
142:45 - right or classes
142:46 - if you want to say that so whenever we
142:48 - create an instance by doing something
142:49 - like
142:50 - this like scanner sc equals new scanner
142:53 - essentially what we're doing is uh
142:55 - pointing this variable sc
142:56 - to a scanner object okay and
143:00 - whenever we create any kind of variables
143:01 - like just typing like and x equals 5
143:04 - we're essentially saying x is equal to
143:06 - an int object
143:07 - of value 5 okay and these objects are
143:11 - what allow us to have
143:13 - different properties for different data
143:15 - types so you know how we can add
143:16 - integers together or how we can do like
143:19 - dot parse int on um on strings and we
143:22 - can have like a bunch of different
143:23 - methods and stuff
143:24 - those are all specific to the type of
143:26 - object
143:27 - that we're using so for example we can
143:30 - see here i have the scanner object right
143:32 - so sc is equal to a new scanner object
143:35 - that's taking system.in as an argument
143:37 - okay
143:38 - so we can only use this.next method on
143:40 - sc
143:41 - because it is a scanner type if i try to
143:44 - do x dot next
143:46 - and i do a little semicolon here you can
143:47 - see that we're getting can't invoke next
143:50 - method on
143:50 - primitive type in because well that
143:52 - method doesn't exist
143:54 - for int okay and that's like a really
143:57 - basic way to kind of understand
143:58 - what objects are essentially whenever
144:00 - we're creating a new variable so like
144:02 - even just doing like string
144:03 - like str equals hello
144:06 - what we're doing is we're saying well
144:08 - str is actually equal to
144:10 - a string object with the value hello
144:13 - and because uh or based on the different
144:15 - types of objects we have different
144:17 - properties different attributes things
144:19 - we can do with them methods we can call
144:21 - uh and that's just kind of important to
144:23 - understand you'll see more how we create
144:25 - like
144:25 - objects and whatnot that are specific
144:28 - to like classes that we're going to make
144:30 - in later videos okay so it'll all start
144:31 - to come together
144:32 - but just now kind of know that when i'm
144:34 - calling things objects essentially
144:35 - that's like you have a variable
144:37 - of a certain type and it's equal to
144:38 - something you're creating an object of
144:40 - that type okay that's
144:42 - all we can have to understand for now so
144:44 - now let's talk about methods so some of
144:46 - you may already understand what methods
144:47 - are because i think i went through a
144:48 - very brief like explanation of them
144:51 - in uh previous videos but essentially
144:53 - methods are anything that you call
144:55 - on an object or on an instance of an
144:57 - object
144:58 - so just to clarify what instances when
145:00 - we're creating a variable like this of a
145:02 - new scanner object we can say that we're
145:04 - creating sc is now an
145:05 - object like a scanner object or we can
145:07 - say
145:08 - sc is a new instance of uh scanner
145:12 - of like the type scanner and those kind
145:14 - of are interchangeable so if i say
145:15 - instance instead of
145:16 - object they're very similar okay so just
145:19 - bear with me on that
145:20 - so anyways when we call this.next method
145:24 - we call it on the like variable right so
145:27 - that's that's pointing to our scanner
145:29 - object
145:30 - so our scanner object allows us to use
145:32 - this method
145:33 - again i showed you before if i tried to
145:35 - call that on for example uh the variable
145:37 - x that was like an integer that doesn't
145:39 - work
145:39 - because that object doesn't have that
145:42 - method
145:43 - associated with it so a method is
145:45 - anything really that's just like a dot
145:47 - and then whatever the method name is and
145:48 - typically brackets for example if we had
145:51 - like uh
145:52 - an array like say we have or let's do
145:54 - actually a string so we're just going to
145:55 - take another string probably shouldn't
145:56 - have deleted all these
145:57 - but that's okay we'll say string h
145:59 - equals hello and i can do something like
146:01 - h dot
146:02 - at length and this is a method that
146:04 - simply returns to us the length of the
146:06 - string
146:07 - and again this works on our object
146:10 - which is a string but it's not going to
146:11 - work on our sc because well what is the
146:14 - length of a scanner
146:15 - so if i type that you can see that we're
146:17 - getting this red line here and that's
146:19 - obviously not giving us anything because
146:20 - this length method
146:21 - is not defined for a scanner type so
146:24 - that's kind of a bit about like how we
146:26 - call methods and you guys have already
146:27 - seen a lot of different
146:28 - examples of methods that we can use on
146:30 - different objects and different data
146:32 - types okay
146:33 - and same thing when i say like data
146:35 - types and objects data types are kind of
146:37 - like what the object is created off of
146:39 - and you'll see that more in in future
146:42 - videos just want to clarify in case
146:43 - anyone's kind of confused okay
146:45 - so how can we create our own methods
146:48 - well currently since we don't really
146:49 - know anything about classes
146:50 - we're going to be creating methods
146:51 - inside of this main class okay now this
146:54 - main class
146:55 - is special because it is it contains
146:57 - this method and remember i was telling
146:59 - you guys at the beginning
147:00 - this method automatically runs whenever
147:02 - we run the program
147:03 - well that's different than other methods
147:05 - we're going to have in classes we create
147:07 - in future videos so it's a bit hard to
147:08 - explain
147:09 - this method per se but this is a method
147:12 - because a method is typically anything
147:13 - that sits inside of a class and the
147:15 - class
147:16 - is what's going to define like our data
147:18 - types so scanner
147:20 - in java we can't see it right now
147:21 - there's actually somewhere that says
147:23 - public class scanner
147:26 - and inside of that scanner class so if
147:28 - you do like brackets like this
147:30 - it has a ton of different methods a ton
147:32 - of different attributes
147:34 - that we can use by calling them from
147:36 - within this function okay
147:38 - so if we want to create our own method
147:40 - within this main class what we can do
147:43 - and this is just the default way that
147:44 - we're going to do it for now i'm going
147:45 - to show you why we use certain keywords
147:47 - and stuff
147:47 - in future videos but it's a bit advanced
147:49 - right now we're simply going to type
147:51 - public static okay and then whatever
147:56 - return type we want which we'll talk
147:57 - about in a second uh so in this case i'm
147:59 - going to do void
148:00 - and then the name of our method so in
148:02 - this case i'm going to say like tim
148:03 - okay so we have a public static void tim
148:08 - it has zero parameters again talk about
148:10 - that in a second and then it's going to
148:11 - do something in here in this case i'm
148:13 - just going to say system
148:15 - dot out dot print ln and we'll just say
148:19 - when you call that it just says tim like
148:21 - that okay
148:23 - so what i've essentially done here is
148:25 - create a static method
148:27 - that we can call from anywhere within
148:29 - this class okay and actually outside of
148:31 - the class as well
148:32 - so what we need to do to call this
148:34 - method from inside this class
148:36 - is we can literally just type the method
148:38 - name so in this case if i
148:40 - type tim and i put a semicolon like that
148:43 - and we run the program you see that we
148:46 - get
148:47 - is it running system that out one second
148:50 - here sorry
148:51 - okay so i figured out why it wasn't
148:52 - working because we had this
148:54 - sc.next coming in here so i'm just going
148:56 - to comment that out for right now
148:58 - and we'll run this one more time and you
149:00 - can see that we get tim to the screen
149:02 - now i know i didn't really explain what
149:04 - this is or how this worked but
149:05 - essentially what i've done here
149:06 - is i've created kind of like a function
149:08 - okay and
149:10 - it's known as a method but in other
149:11 - programming languages you might see this
149:12 - as a function
149:14 - and this void keyword what this means
149:16 - here is it returns
149:17 - nothing okay because in functions we can
149:19 - actually return values which i'm going
149:20 - to show or sorry functions methods we
149:22 - can return values which i'm going to
149:23 - show you in just a second
149:24 - so this stands for we are going to not
149:26 - return anything we're just going to do
149:28 - something in here
149:29 - so in this case we're just printing
149:30 - something to the screen all right now we
149:32 - have tim
149:33 - and this is the name of our method and
149:35 - that's what we call here to trigger
149:37 - this to run right so if i wanted to
149:40 - pass some information to tim so say i
149:42 - wanted to print whatever string i passed
149:45 - to tim well what i would do in here is i
149:47 - would type
149:49 - string and then let's just say str like
149:52 - that
149:52 - and now this means that whenever we call
149:55 - this tim method
149:56 - we have to actually pass it one piece of
149:58 - information and that piece of
150:00 - information
150:00 - has to be a string okay so i'm going to
150:02 - show you right here so i type str
150:04 - i put tim and i put uh tim in here like
150:08 - this
150:08 - okay and we run the program now we see
150:11 - we're printing out tim if i change this
150:12 - like
150:12 - with a bunch of ms you can see if we run
150:14 - this we're getting tim
150:16 - now the way that this works is this is
150:19 - called a parameter so str
150:21 - is a parameter of type string and that
150:23 - means that whenever we call
150:25 - this function we have to type in
150:27 - arguments and what
150:28 - arguments are is what the parameter is
150:31 - going to be
150:32 - when we get to the the method so
150:34 - anything that goes in here in the call
150:35 - statement which is what this is known as
150:37 - where we're like triggering the method
150:38 - to run
150:39 - is known as an argument okay so tim is
150:41 - an argument
150:42 - when we call this what's happening is
150:44 - we're passing tim as
150:46 - str so now it's saying like str equals
150:49 - tim like that or whatever the string is
150:50 - okay and then
150:52 - we're simply going to print to the
150:53 - screen whatever it is that we were
150:55 - passed so in this case
150:57 - tim right now we can actually do
150:59 - multiple uh
151:00 - parameters as well so if i wanted to do
151:02 - another parameter i wanted to pass two
151:03 - pieces of information every time we call
151:05 - this function i would say maybe
151:07 - int and x okay and now it means
151:10 - that i have to pass not only a string
151:12 - but i have to pass an int so that means
151:14 - we have to type an integer here in this
151:16 - case i'm going to do 4. what i'm going
151:18 - to do now is i'm going to say 4
151:20 - and we'll say int i and we'll say i
151:23 - is less than x let's say
151:27 - i plus plus we're just going to print
151:30 - uh this that many times okay so let's
151:32 - see here
151:34 - boom okay so system.out.printline what's
151:37 - what are we getting here
151:38 - initialize variable ah gotta do that
151:39 - sorry okay so now we pass an end
151:43 - and we pass a string and what we're
151:44 - going to do is simply print this as many
151:46 - times as like the int that we typed in
151:48 - okay
151:49 - so you can see that now we get tim four
151:50 - times to the screen
151:52 - and that's how that works so we have
151:54 - arguments in here the two arguments are
151:55 - tim
151:56 - and four and then we have our parameters
151:58 - which are str
151:59 - and x and when we pass our information
152:01 - and str gets equal to tim
152:03 - and x gets equal to four okay and then
152:05 - in here we can now use those values
152:07 - by referencing str and x like i've done
152:10 - so okay so i hope that makes sense now
152:13 - in terms of this public static
152:15 - i'm going to talk about this in the next
152:16 - video for right now all this means is
152:18 - that you can call this
152:20 - not on an instance of the class which is
152:23 - kind of what we're doing here when we're
152:24 - just calling tim
152:25 - okay because we don't have any object
152:27 - that's like
152:28 - a class main which you'll see in the
152:30 - next video okay
152:31 - so that's kind of how we can create our
152:33 - own methods again we can create
152:35 - methods that return things so that's
152:36 - what i wanted to talk about now so all
152:37 - i'm going to do is i'm going to create
152:38 - another method and i'm going to say this
152:39 - is
152:40 - public static and in this case i want to
152:43 - return an integer value
152:44 - to whoever's calling this okay or
152:46 - wherever this is being called so i'm
152:48 - going to type int because this is what
152:49 - i'm going to return and the function is
152:50 - going to give back to us so the method's
152:52 - going to give back to us
152:53 - and i'm going to say add to as the name
152:56 - and we're simply going to take an
152:57 - integer x as our one
153:00 - parameter here see what the issue is
153:01 - here method must return yeah okay
153:04 - so you can see it's already giving us a
153:06 - red line saying that we have to return a
153:08 - value in this
153:09 - method because we typed in the fact that
153:12 - we were going to turn an int okay
153:14 - so what i'm going to do here is i'm
153:15 - simply going to return
153:17 - x plus 2. and what this is doing now
153:21 - semicolon is it's just taking a value x
153:23 - and it's adding 2 to it and it's
153:25 - returning the value
153:26 - to our program wherever we call it so
153:28 - let's just do something up here
153:30 - and show you how this is working so i'm
153:32 - going to say system
153:35 - dot out dot print ln and here i'm simply
153:38 - going to type
153:39 - add 2 and then give it a number in this
153:41 - case 6.
153:42 - now you can probably guess what this is
153:44 - going to give us but essentially what's
153:46 - happening here
153:47 - is we're calling add two we're giving it
153:50 - the value six so our argument is six
153:51 - it's coming in here and the parameter x
153:54 - is now set equal to six
153:55 - we're going to return so back to
153:57 - wherever we called this
153:59 - x plus two in this case eight so we get
154:01 - eight here as a value and we go
154:03 - and we bring it up here and now this
154:05 - little line is equal to eight so we're
154:06 - going to print eight to the screen
154:08 - and you can see that we get eight as a
154:09 - value like that now obviously in
154:12 - methods like this you're probably going
154:13 - to do some more advanced things than
154:14 - just adding two
154:15 - that shows you how we can return values
154:17 - and i'll do one last example of
154:19 - returning maybe like a string value
154:20 - so public static string
154:24 - okay and we'll just say str
154:27 - as their name because i don't really
154:28 - know what to do and we'll take a string
154:31 - x okay and then in here we have to
154:34 - return a string value so what we could
154:36 - do is we could return
154:37 - x plus and an exclamation point
154:40 - but i think i need to put that in double
154:42 - quotation marks
154:43 - like that so what we're doing now is
154:45 - we're adding an exclamation point to the
154:47 - end of our string and we're returning
154:49 - that so if i call
154:51 - str here okay so we'll i don't know why
154:55 - it keeps doing with my brackets we'll do
154:56 - str
154:57 - and then inside our brackets we'll give
154:59 - it high
155:00 - it should return to us high with an
155:02 - exclamation point and indeed it does
155:04 - and yeah that's kind of how methods work
155:07 - basically
155:08 - and in our the next video we're going to
155:10 - be talking about
155:11 - classes and creating our own kind of
155:12 - data types and moving forward and that's
155:15 - what we're going to
155:15 - continue be doing with the rest of the
155:17 - tutorial series so if you guys enjoyed
155:18 - the video it helped you out please make
155:20 - sure you leave a like and subscribe and
155:21 - i will see you in the next one so in
155:23 - today's video we're going to be going
155:24 - over
155:24 - classes we're gonna be talking about
155:25 - creating classes creating some methods
155:27 - constructor methods
155:29 - uh all that fun stuff creating instances
155:31 - and objects
155:32 - uh and yeah so this is gonna be kind of
155:34 - an advanced video
155:36 - uh don't if you've been following along
155:37 - so far you'll definitely be able to
155:38 - follow along with it but just know that
155:40 - now we're kind of getting into some
155:41 - harder aspects of java so if you guys
155:43 - don't understand this please don't
155:44 - hesitate to join my discord server ask
155:46 - me some questions leave a comment down
155:48 - below
155:48 - because this is absolutely fundamental
155:50 - and you have to understand this before
155:52 - you can really start doing any serious
155:53 - programming
155:54 - and that goes for kind of all languages
155:56 - but java especially since it is an
155:58 - object-oriented language
155:59 - we need to understand classes and how to
156:01 - create classes
156:02 - so without further ado let's get started
156:04 - so so far we've been working in this
156:06 - class called main
156:07 - now this is not really a true class
156:09 - because this class all it's doing for us
156:12 - is just running some code right away
156:14 - when we run the program and that's why
156:16 - we have this public static void main
156:18 - function
156:18 - that automatically triggers whenever we
156:20 - click this little green run button
156:22 - okay so what i'm going to do now and you
156:25 - can see that i have some methods that
156:26 - i've added in here that we just kind of
156:27 - use
156:28 - within here earlier okay what i'm going
156:31 - to do now is i'm going to create my own
156:32 - class
156:33 - from scratch from scratch and we're
156:35 - going to start coding so to do this
156:37 - we're going to go to whatever our
156:38 - package is so in this case tutorial one
156:40 - for me and i'm going to go new and class
156:41 - and i just did that by right clicking
156:43 - and now i'm going to give my class a
156:45 - name now for this example i'm going to
156:47 - create a dog class
156:49 - and yeah you guys can create whatever
156:51 - you want but i would recommend you
156:52 - follow along with me since you guys are
156:53 - most likely new to classes
156:56 - okay so now we have this thing and it
156:58 - says public class dog and you can see we
156:59 - open up in a new file
157:01 - so whenever we create a new class in
157:02 - java we have to actually create a new
157:04 - file for that
157:05 - now it's actually good because it makes
157:06 - it really easy to navigate between
157:09 - different classes whereas in something
157:10 - like python you can just have all your
157:12 - classes in one file
157:13 - okay so what we're going to do now is we
157:15 - have this public class dog
157:17 - so what does this what does this mean
157:19 - like what is a class well a class is
157:21 - pretty much
157:21 - a a data type and whenever we create an
157:24 - instance of a class like an
157:25 - object of a certain type all we're doing
157:27 - is we're just using all the information
157:29 - within the class to like create an
157:30 - object so you can almost think of it as
157:32 - like a blueprint
157:33 - for an object now what problems do
157:36 - classes solve for us like why are they
157:37 - useful
157:38 - so i'm going to introduce kind of a very
157:40 - simple problem right so i want to create
157:42 - five dogs okay i want to have five dogs
157:44 - i want each dog to have a name i want
157:46 - each dog to have an
157:47 - age and i want to uh at some point be
157:50 - able to like call something
157:52 - and print out the each dog's name and
157:54 - age in like a nice form okay
157:56 - now we could do that we know how to do
157:58 - that um if we went back into
158:00 - main here what we could do in this
158:02 - little what do you call it method here
158:04 - is we could just type a bunch of ants we
158:05 - could say into like
158:06 - dog one and this is equal to four and
158:08 - that's dog one's age we say inch
158:10 - dog two and that's equal to five and we
158:12 - could go on and we could create
158:13 - 10 variables 5 for the age and 5 for the
158:16 - the names right and then we could go and
158:18 - we could print out each one each time
158:20 - but that is incredibly inefficient and
158:22 - what if i wanted to have like
158:24 - 10 000 dogs well what what would i do
158:26 - then
158:27 - well we could use like lists to create
158:29 - or lists or arrays to create names and
158:31 - ages
158:31 - but that's just not efficient it doesn't
158:33 - look as good um
158:35 - in our actual coding so what we're going
158:36 - to do is we're going to use a class and
158:37 - you'll see how we can kind of accomplish
158:39 - this problem
158:40 - so within classes uh we have methods and
158:43 - we have
158:44 - attributes okay now attributes are kind
158:46 - of like variables
158:47 - that hold information for us so in this
158:49 - case we want to have two attributes in
158:51 - our dog class
158:52 - and these are going to be the name and
158:54 - the h to create our attributes since the
158:56 - first thing we typically do when we
158:57 - create a class
158:58 - is right at the top of our class we're
158:59 - going to type the keyword private
159:02 - and then we're going to give a data type
159:03 - so in this case we're going to say
159:04 - string and then the name
159:06 - of our attributes in this case name okay
159:08 - and this is all we have to do we're just
159:09 - declaring
159:10 - that at some point in time we're gonna
159:11 - have uh the attribute name and it's
159:13 - gonna be storing some information
159:15 - later on in our program okay we can also
159:17 - do private
159:19 - int uh and in this case i'll do age
159:22 - and this is gonna obviously represent
159:24 - the dog's age now if you want to have
159:26 - some other attributes weave it again
159:28 - type private and we could keep going and
159:30 - type a bunch of attributes
159:32 - now what is this private keyword and why
159:34 - do we have public up here and private
159:36 - here
159:37 - well what this private keyword does is
159:39 - it ensures that this name
159:41 - and this age are only accessible within
159:44 - this class
159:44 - meaning that if i tried to do something
159:46 - over here and i wanted to use
159:48 - this age and this name from this class i
159:50 - wouldn't be allowed to do
159:52 - that and the program would say no this
159:53 - is a private attribute you can't access
159:55 - that
159:56 - why do we do that well you would find
159:57 - out in larger programs but we can also
159:59 - create public attributes as well that
160:01 - are accessible
160:02 - to the other classes okay so if i wanted
160:05 - my things to be public
160:06 - i could put public for now whenever
160:08 - we're using attributes we're going to
160:09 - use private
160:10 - and it's best practice to use more
160:11 - private things okay
160:13 - and same goes for methods which you'll
160:14 - see in a minute
160:16 - okay so now i need to create something
160:18 - called a constructor method
160:20 - now this you typically only create one
160:22 - of these although you can create
160:23 - multiple
160:24 - and what this is going to do is it is
160:26 - going to run automatically whenever we
160:28 - call this
160:29 - dog class and the way we create this
160:31 - constructor and we typically need one of
160:33 - these when we have a class
160:34 - is we're going to do public and we're
160:37 - just going to type
160:38 - the name of our class once again so in
160:39 - this case i'm going to say public dog
160:41 - like this okay and you can see that now
160:44 - we're getting no errors everything's
160:45 - fine
160:45 - and in here we're going to type the
160:47 - parameters or the information that we
160:49 - need to be passed in
160:51 - whenever we're creating a dog object now
160:54 - in some instances you may have nothing
160:55 - in here when you create a dog
160:56 - object all you need to do is just say
160:58 - you're creating a dog object you don't
160:59 - need to give any information and that's
161:01 - fine
161:01 - but in our case we want to be able to
161:03 - create an age and a name
161:05 - with our dog so what i need to do here
161:06 - is i need to type string
161:08 - name and int age okay
161:11 - just meaning that whenever we create a
161:13 - dog object we need to give it a name and
161:15 - we need to give it an age
161:17 - now what i'm going to do is i'm going to
161:18 - set these values
161:20 - so these attributes equal to whatever we
161:22 - pass in
161:23 - okay so what i'm going to do is i'm
161:25 - actually just going to use a keyword and
161:26 - it's
161:26 - the keyword is this it's kind of hard if
161:29 - you weren't watching you'd think i'm
161:30 - just like saying this is the key word
161:32 - i'm pointing something but this like
161:33 - actually typed out
161:34 - and then i'm doing this dot name is
161:36 - going to be equal to name
161:38 - and this dot age is going to be equal to
161:40 - age
161:41 - so what is this this this keyword
161:44 - actually doing
161:45 - well it is referencing the uh attributes
161:49 - of the class okay
161:50 - so when we type this uh it is going to
161:52 - be looking up here to find
161:54 - all of our like private attributes and
161:57 - in this case we have an age and we have
161:58 - a name
161:59 - all right and that's how we reference
162:00 - things that are part of the
162:02 - specific instance we have this dot name
162:04 - and this dot h okay and i'm gonna
162:05 - explain more and more of this as we keep
162:07 - going
162:07 - uh it's hard to do it in like small
162:10 - steps okay
162:11 - so now that i have this constructor
162:13 - method created
162:14 - we can go on to create one more method
162:16 - and then we can actually start using
162:17 - this class really simply okay so what
162:19 - i'm going to do now is i'm going to
162:20 - create another method in this case i'm
162:22 - going to type a public
162:23 - i'm not going to return anything so i'm
162:25 - going to use void okay
162:26 - and the name is going to be speak and
162:28 - what this is going to do is it is simply
162:30 - going to
162:30 - say something or print something out to
162:32 - the screen so i'm going to say system
162:34 - dot out dot print ln
162:38 - why did that okay print ln and all we're
162:41 - going to do is we're going to say i
162:42 - am and i want to say that the dog's name
162:44 - so in this case we'll say
162:46 - this dot name okay
162:49 - and we'll say plus and i
162:52 - am another plus we'll say uh
162:55 - this dot age plus
162:59 - years old okay so it's simply going to
163:02 - say like i
163:03 - am whatever the name is and i am uh
163:06 - however many years old not great grammar
163:07 - but
163:08 - that's fine so now how do we actually
163:10 - create
163:11 - a instance of this or how do we use this
163:12 - dog class well
163:14 - from our main class here which we should
163:16 - still have open
163:17 - and you know we can delete all these we
163:18 - don't need all that so we'll get rid of
163:20 - all this stuff here
163:21 - we can actually create a object and to
163:23 - do that of type dog
163:25 - what we're simply going to do is we're
163:26 - going to type dog and we're going to
163:27 - give it a name in this case i'm going to
163:28 - say
163:28 - tim is equal to new dog
163:32 - okay and then remember that we have to
163:35 - give
163:36 - dog some parameters right so or argument
163:39 - because we have the name and we have the
163:41 - age so what we need to do is we need to
163:42 - give it a name and an h in this case i'm
163:44 - going to type
163:44 - tim and i'm going to type four and now
163:48 - you can see no red line we're looking
163:49 - good
163:50 - so our dog's name is tim and it's hs4
163:53 - okay so that's great let's run the
163:54 - program make sure this is working
163:56 - everything's fine
163:57 - now what i want to do is i want to use
164:00 - that speak method
164:01 - so how can i use that well what i'm
164:04 - going to do is i'm going to type tim
164:05 - which is the name of my dog or like the
164:06 - variable for it dot
164:09 - speak like this okay semicolon and let's
164:12 - see what happens
164:13 - we get i am tim and excuse me i am four
164:17 - years old
164:18 - so the way that this worked right is we
164:20 - created a instance of the dog
164:22 - class and the instance was named tim and
164:25 - referenced a dog object okay
164:27 - so now when we created that instance we
164:29 - said okay so this instance this specific
164:31 - one
164:32 - is going to have an age of four and a
164:33 - name of tim
164:35 - all right so it stored that information
164:36 - up here in our private string and our
164:38 - private int
164:39 - and then later on when we decided we
164:41 - wanted to call this well it said okay
164:43 - well give me the instance you're calling
164:44 - it on
164:45 - so in this case we're calling it on tim
164:47 - we're gonna say okay so tim what's tim's
164:48 - name well it's name is well it's tim
164:50 - okay so we'll say tim
164:51 - what's its age it's age that's four so
164:54 - we'll print four to the screen
164:55 - now we can obviously create multiple dog
164:57 - objects so let's copy this and let's
164:59 - create a few more
165:00 - we'll create three dog objects i'm gonna
165:02 - say this is bill
165:05 - and he is seven and we'll say this is
165:08 - bob and he is eleven okay
165:11 - let's copy this and oh keep naming the
165:14 - same thing let's go
165:15 - bob and let's go bill
165:18 - and then we can simply call the speak
165:20 - methods on them okay so we'll say bill
165:23 - and we'll say bob all right and just to
165:25 - prove something i'm going to say tim dot
165:26 - speak again and we'll talk about why i
165:28 - do that in just a second okay
165:30 - so let's run this let me say i am tim
165:32 - and i'm four years old i'm bill i'm
165:34 - seven
165:34 - and go on and you can read through them
165:36 - okay now notice
165:38 - when we call tim again it still retains
165:40 - its age and its name
165:41 - when we do this we're not actually
165:43 - changing
165:44 - like this is not one variable we
165:46 - actually now have
165:48 - three different names right we have tim
165:50 - we have bill we have bob
165:51 - and they're specific to each of these
165:53 - variables that are storing that dog
165:55 - object okay so that means that
165:57 - uh we can hold like unique values for
166:00 - each of our different instances and we
166:01 - can have like
166:02 - infinite amount of instances of a class
166:03 - okay
166:05 - all right so that is about
166:08 - it i think i'm going to talk about
166:09 - quickly i already talked about private
166:12 - versus public
166:13 - let's create some more methods in here
166:15 - and see what they can do and i'll talk
166:16 - about a bit more about constructors
166:17 - because we're only at like 11 minutes
166:19 - so what i'm going to do now is i'm going
166:20 - to create another method
166:22 - and i'm going to call this uh get age
166:25 - okay so i'm going to say public
166:26 - and in this case we'll say int get
166:29 - age right and all we're going to do in
166:32 - here is simply
166:33 - return the age to uh let's see a return
166:36 - statement
166:37 - to wherever we're calling it from so in
166:38 - this case i'm going to say i'm going to
166:40 - return
166:40 - this dot h now the reason i need to do
166:44 - this
166:44 - is because say i want to get the age of
166:45 - one of my dogs right like say i created
166:47 - it i changed it around i don't know what
166:48 - it is i want the age
166:49 - well we can't simply do something like
166:52 - in other languages we'd be able to do
166:53 - like tim
166:54 - dot age right now you see when we do
166:56 - this we get
166:57 - um these little red lines and it says
166:59 - the field dog.h
167:01 - is not visible and that is because again
167:03 - it's private so it's not letting us see
167:05 - it from over here in this main function
167:07 - only within
167:08 - this sorry method only within this class
167:11 - can we actually reference this variable
167:13 - right
167:13 - so to get the age what we can do is we
167:15 - can call tim dot
167:17 - get age like that okay and we can print
167:20 - that to the screen and say like
167:22 - and x equals i'm going to say system
167:25 - dot out print ln and oh
167:28 - x is already there great so now if we
167:30 - run this
167:32 - we can see that we get 4 down here
167:34 - excuse me
167:35 - at the uh at the bottom of the screen
167:37 - now we can actually do the same thing
167:39 - with uh like setting the age so say we
167:40 - wanted to change the age at some point
167:42 - maybe tim got a year older well what we
167:44 - would do is we have to create another
167:45 - method in here
167:46 - in this case we're going to make it
167:47 - public again we're going to say public
167:49 - and we don't need int this time because
167:50 - we're just going to change something
167:51 - we're not going to return so we'll say
167:53 - public void
167:54 - and we'll say set age okay
167:57 - and then we're going to take an age
167:58 - because we need to know what we're going
167:59 - to set it to
168:00 - and we'll just say this dot age equals
168:03 - age
168:04 - so just like we've done up here it's the
168:06 - exact same thing except we're just going
168:07 - to do it within the method set age
168:09 - so now if i want to change the age so
168:11 - let's say
168:12 - instead of that we'll say set h and
168:15 - we'll give it a value of 10.
168:18 - then we print out uh let's just say
168:20 - tim.speak again
168:24 - what's going to happen now sorry guys
168:25 - i'm a bit sick if i keep coughing all
168:27 - over the place
168:28 - uh what i'm going to do is oh what's our
168:30 - error tim dot set age 10
168:32 - return type of set age to int
168:37 - one second here sorry public let's try
168:39 - this
168:41 - inset h public void
168:44 - i know i'm making a mistake over here oh
168:46 - okay that's why i can't
168:48 - do i can't set equal to a variable i
168:49 - have to call like 10.78 my bad on that
168:51 - guys
168:52 - we do speak we can see now it says i am
168:54 - tim and i am 10 years old and we've
168:56 - changed from the age of four so that's
168:58 - how we would go about
168:59 - changing these attributes uh later on
169:02 - within the
169:03 - the class okay now i want to do one last
169:05 - one i want to create a private method
169:07 - and show you what this is okay
169:09 - so i'm going to create a private uh void
169:12 - actually no let's do int okay and we're
169:15 - going to call this add two
169:17 - it's not going to make any sense with
169:18 - the dog class but just it's just for an
169:20 - example okay
169:21 - and in here we're going to take actually
169:22 - we won't take anything but we're going
169:24 - to return
169:24 - we're going to return this dot age
169:28 - plus 2 okay now this is a
169:31 - private method meaning that it can only
169:34 - be used and seen within this dog class
169:37 - so say i wanted to use this ad to maybe
169:39 - i could do this i could do
169:41 - add two here okay and just do a little
169:44 - semicolon
169:45 - and there we go i could use add two and
169:48 - that that works fine there's no issues
169:50 - with that okay
169:50 - and that's how you use methods within
169:52 - side of the class
169:54 - so like speak i could easily every time
169:56 - we initiate the dog
169:58 - call the speak method as well and to do
170:00 - it within the class you don't need to do
170:01 - like something dot you just call the
170:03 - actual name because it's really visible
170:05 - within here right
170:06 - now watch what happens if i go over here
170:09 - and i try to use that so add two so i'll
170:11 - say
170:11 - tim dot add two like this
170:15 - and you can see that again we're getting
170:16 - a red line and says this is not visible
170:19 - you can't use it because it's a private
170:21 - method okay
170:23 - so i think that's going to wrap it up
170:26 - for this video on classes hopefully you
170:27 - guys now understand kind of how you can
170:29 - create classes
170:30 - uh how to create methods somewhat and in
170:32 - the next video we're going to go more in
170:33 - advance we're going to talk about
170:34 - inheritance we're going to talk about
170:35 - multiple constructors
170:37 - and then we're just going to keep on
170:39 - going again more and more advanced as we
170:40 - go
170:41 - so as always if you guys enjoyed the
170:42 - video please make sure you leave a like
170:44 - and subscribe and i will see you again
170:45 - in another one
170:46 - so in today's video we're going to be
170:47 - going over inheritance so this has to do
170:49 - with classes and this is going to be how
170:51 - we can inherit methods and
170:52 - attributes of previously made classes
170:55 - into like a new class and then override
170:57 - methods and
170:58 - all kinds of fun stuff this is really
171:00 - important this will save you a ton of
171:01 - time
171:02 - and yeah so let's get started
171:06 - so you can see here i have this sorry
171:08 - this dog class that we created in the
171:09 - last video
171:10 - and pretty much the goal what i want to
171:12 - do at least in this video the problem is
171:14 - i want to create a cat class that is
171:17 - identical to this dog class
171:19 - except in this speak method here instead
171:22 - of saying i
171:23 - am whatever i just wanted to say meow my
171:25 - name is
171:26 - whatever right so i just want to change
171:27 - one of these methods to do something
171:29 - different
171:29 - but other than that i want all of this
171:31 - to be the same so
171:33 - intuitively what we think we do is we'll
171:34 - be just take all this
171:36 - copy it put it into a new file called
171:38 - cat and then just change this to be what
171:40 - we want
171:41 - well we could do that and that'd be fine
171:43 - but when we have classes that are like
171:45 - thousands
171:46 - and thousands of lines long ideally we
171:48 - don't want to be repeating code and
171:50 - continually
171:50 - typing like the same thing a bunch of
171:52 - times right it also just makes it more
171:53 - difficult to read
171:54 - so what we're going to do is we're going
171:55 - to use something called inheritance so
171:57 - i'm going to create a new class
171:58 - i'm going to go new class and in this
172:01 - case i'm going to call mine
172:02 - cat right and i'll just click finish
172:04 - like that
172:05 - and then here we have public class cat
172:08 - now
172:08 - whenever we do this inheritance what we
172:11 - can actually do to inherit all of the
172:13 - properties all of the methods
172:14 - everything from this dog class is up
172:17 - here when we define the class we can
172:19 - type
172:19 - extends if we spell it correctly
172:22 - extends and then the class dog like this
172:25 - okay
172:26 - now what this is going to do is it is
172:28 - going to grab everything from dog class
172:30 - and apply it to
172:31 - cat class so this is known as our super
172:34 - class because it's kind of above the cat
172:36 - class
172:37 - and then cat is known as our subclass so
172:39 - we have
172:40 - you can also call it a child class or a
172:42 - derived class and this could be also
172:43 - called a parent class all right
172:45 - and that's because it's kind of
172:46 - underneath it's getting everything from
172:48 - there but then it's going to be changing
172:49 - a few things and maybe adding a few
172:50 - methods to it
172:51 - so typically you start off like the most
172:53 - abstract with
172:55 - a parent class and then your child
172:56 - classes or your drive classes or your
172:58 - sub classes because they're all the
172:59 - exact same thing just everyone likes to
173:01 - use different words for them
173:02 - are going to have some slight
173:03 - modifications to them and kind of work
173:05 - based off of that
173:06 - super class right so or the parent class
173:09 - okay so what we need to do when we
173:11 - first do this as you can see here it
173:12 - already is telling us we need to use the
173:14 - constructor for dogs so we're inheriting
173:16 - from dog
173:17 - but we need to use the same constructor
173:19 - otherwise all this stuff
173:20 - and all these attributes well they're
173:22 - not going to work unless we set up our
173:24 - class when we first create it the same
173:25 - way as we did dog
173:27 - so what i'm going to do is i'm actually
173:28 - just going to click on this and you can
173:29 - see it automatically generates this
173:31 - constructor for us
173:32 - now i could have typed it out but this
173:34 - is a yeah this is what it's going to do
173:36 - so since in our dog class we get name
173:39 - and we get age
173:40 - we need to make sure that we have a
173:42 - constructor inside of our cat class that
173:44 - gets
173:44 - name and gets an age and we have to
173:47 - actually explicitly call
173:49 - our super class constructor which is
173:51 - going to be the dog constructor
173:53 - using this formation or this syntax
173:56 - super
173:56 - and then we give it the name and we give
173:58 - it the h now this doesn't stop us from
174:00 - being able to type in other
174:02 - properties or other attributes so for
174:03 - example i could do something like
174:05 - uh int and i don't know food or
174:08 - something it's like how much food they
174:09 - should get
174:09 - and this works perfectly fine and we can
174:11 - go ahead and we can create another
174:13 - attribute here so we say private
174:14 - i don't know let's just say food okay
174:18 - and this should say int food
174:21 - and then in down here we can go ahead
174:23 - and we can just type this dot
174:25 - food equals food okay right and that
174:28 - works perfectly fine and now we're gonna
174:30 - have
174:31 - since we're inheriting from this we're
174:32 - gonna have age we're going to have name
174:34 - and inside of this cat class we're going
174:36 - to have food as well and that works
174:38 - uh just fine okay so just to uh i don't
174:42 - know let's go over this again because
174:43 - then
174:43 - i've kind of gone through it pretty
174:44 - quickly but all of these methods here
174:47 - we're going to be able to use within
174:49 - our cat class because what we're
174:50 - inheriting we're grabbing all of them
174:52 - from the dog class
174:53 - so this cat class when we first extend
174:55 - it and do nothing is identical to the
174:57 - dog class
174:58 - and then as soon as we start changing a
174:59 - few things in here it's going to become
175:01 - a little bit different but still
175:03 - use all this functionality so we still
175:06 - have the attribute age the attribute
175:07 - name we're setting them equal because
175:09 - we're going to call this constructor
175:10 - method right
175:11 - from our what do you call it super right
175:14 - here so we call this constructor so we
175:15 - set up age and we set up name
175:17 - and then we have speak we have get age
175:18 - and we have set age now before i move
175:20 - any further let me just prove this to
175:22 - you
175:22 - so if i go to main here and i just
175:24 - create a cat object so i'll just say cat
175:26 - tim
175:26 - equals new cat and remember we have to
175:29 - give it three parameters or three
175:30 - arguments this time because that's what
175:31 - we typed in so for name we can obviously
175:33 - do tim
175:34 - age we'll do 18 and food let's say they
175:36 - get 100 i don't know grams of food or
175:38 - something whatever you want to
175:39 - say there okay now i can use this speak
175:41 - method
175:43 - on tim so you see we're getting no
175:45 - errors here
175:46 - even though in my cat class there's no
175:48 - speak method but
175:50 - since there's one in dog and we inherit
175:52 - from it we can use it so i'll prove
175:54 - again to you
175:54 - run this i am tim and i am 18 years old
175:57 - and that works perfectly fine
175:59 - so now remember i said though i want
176:00 - this speak method to do something else i
176:02 - want to change it
176:03 - so how can we do that within the cat
176:05 - class well the way to do this
176:07 - is to just rewrite the method in here
176:09 - because when we do that we're simply
176:11 - going to overwrite whatever's in the dog
176:12 - class
176:13 - so the child class or the subclass
176:15 - whatever you want to call it whenever
176:16 - there's something the same in here it
176:18 - automatically is going to override or
176:20 - overwrite
176:21 - whatever's in the dog class so if i do
176:23 - public
176:25 - void speak okay so this is the exact
176:27 - same name as the other one
176:29 - all right and in here i change i do
176:31 - something right so i change something so
176:33 - i'm just going to say
176:34 - system dot out dot print ln
176:38 - and in here what did i want to say like
176:39 - meow
176:41 - and my name is
176:44 - let's say plus this dot name and you
176:47 - know we'll even add like a little food
176:49 - thing
176:49 - and i get fed
176:52 - um i don't know let's see here plus
176:56 - this dot food okay i don't know it's
176:59 - good enough for me what's the issue here
177:01 - change visibility of name to protect it
177:03 - uh
177:04 - okay one second i gotta do something
177:05 - here i
177:07 - can't this just needs to be sorry
177:11 - public and public
177:15 - sorry this is just because we're not
177:16 - actually able to see these attributes
177:18 - because they're defined in the dog class
177:19 - from within our cat class so we just
177:21 - need to change them to public
177:22 - so that we're actually going to be able
177:23 - to use them within our speak method we
177:25 - can also use something called protected
177:26 - which i'm going to talk about near the
177:28 - end of this video okay so right now this
177:30 - is public because i don't want to get
177:31 - into protected but
177:32 - let's see what happens now if i run my
177:34 - tim.speak
177:35 - now we can say meow my name is tim and i
177:37 - get fed 100
177:39 - okay and that's because even though in
177:41 - the dog class we had speak
177:43 - since we wrote it again in our cat class
177:45 - and cat class is the one that we're
177:47 - using
177:47 - we're simply going to take this one and
177:48 - we're going to override the the one
177:51 - in our dot class okay now obviously when
177:53 - we're doing inheritance you've already
177:54 - seen we can add our own methods we can
177:56 - add more stuff and we do whatever we
177:57 - want right
177:58 - so in here i can add more methods i can
178:00 - say public void i don't know
178:02 - eat and in this case we'll just have
178:04 - like
178:05 - int i don't know x like as how much
178:07 - they're eating
178:08 - and we can say this dot food minus
178:11 - equals uh
178:12 - x okay and just subtract from it however
178:15 - much they ate
178:16 - and then we can use eat in the cat class
178:18 - but it's not going to be seen in the dog
178:20 - class right so we just have to
178:21 - understand this does go one way
178:22 - uh all the stuff we do in the cat class
178:24 - is not going to be visible to stuff in
178:26 - dog class because well dog does not
178:27 - extend
178:28 - cat right so it's kind of a hierarchy
178:30 - where like dogs at the top and then cat
178:32 - branches off and we could have other
178:33 - things extend the dog class as well
178:35 - we'd have something extend the cat class
178:38 - we could just keep going and going and
178:39 - going and extending and extending and
178:40 - extending
178:42 - also known as like inheriting right so
178:43 - that's kind of it for
178:45 - inheritance now i want to show something
178:48 - called
178:48 - multiple constructors okay so there is
178:51 - sometimes um when we're setting up a
178:54 - class we want to be able to pass it like
178:56 - a different
178:57 - piece of information and set up the
178:58 - class differently right so for example
179:01 - my cat class here gives name age and
179:03 - food what if however i only wanted to
179:05 - give it
179:06 - name and age well we can leave both
179:09 - options available they don't have to be
179:10 - mutually exclusive right i could give it
179:13 - either these three arguments to set it
179:14 - up
179:14 - or i could give it just two and to do
179:17 - this we have to create
179:18 - another constructor so i'm going to do
179:21 - the exact same thing as above
179:23 - pretty well identical except i'm just
179:25 - going to leave out one of the parameters
179:26 - here okay
179:27 - so we'll set into age and then here
179:29 - we'll simply call
179:30 - super and name and h okay
179:34 - and you can see no red lines everything
179:36 - looks fine
179:37 - and what we're essentially doing here is
179:39 - we're giving it another way to set up
179:41 - the cat class
179:42 - another way to construct all of our
179:44 - attributes and set up the cat class
179:46 - so we can either call the cat class
179:48 - using three parameters or three
179:49 - arguments
179:50 - or we can call it using two and you know
179:52 - what maybe we could set one up
179:53 - only using one we're only using uh zero
179:56 - so let's do one with one just to show
179:57 - you
179:58 - how this might work okay so if i do
180:01 - string name
180:02 - and then ant age okay
180:06 - and then here i call super oh sorry i
180:09 - should just get i should actually get
180:10 - rid of this because we're only going to
180:11 - use one right not bad
180:12 - i'm going to give name but what about
180:14 - age what am i giving super for
180:16 - uh for our age well i don't know how are
180:19 - we going to set it up if they only give
180:21 - us
180:21 - one uh argument well i would think that
180:24 - if they don't give us an age then we
180:26 - should just automatically assume that
180:27 - their age is zero
180:28 - so let's do that i'm going to put in
180:30 - zero just hard code that in here
180:32 - so that way this means now say for
180:34 - example they only want to give us a name
180:36 - then we'll just automatically give them
180:37 - an age of 0. they want to give us a name
180:39 - and an age that's fine we can do that
180:41 - but maybe what we should do in here if
180:43 - they give us a name and age is we should
180:44 - make sure that food is set equal to
180:46 - i don't know maybe let's give it a
180:47 - default value of 50. so if they don't
180:50 - define how much food the cat eats we're
180:51 - just going to assume that they eat 50
180:53 - okay
180:54 - and this is kind of a weight you can do
180:55 - like it's known as like default
180:56 - parameters
180:58 - if they don't type something in just
180:59 - automatically set a value for that
181:01 - so that everything still works fine i
181:03 - hope that makes sense so let's show now
181:06 - the three different ways that we can
181:07 - create a cat say cat bob
181:09 - equals new cat and in this case we'll
181:12 - give it a name so we'll say
181:13 - bob and we'll give it an age of seven
181:16 - and no red lines this works fine again
181:19 - this defines a cat right because that's
181:21 - another constructor that we had so let's
181:22 - do this one more time
181:23 - and in this case let's just only type a
181:25 - name we're going to name this one
181:27 - joe like the name joe all right
181:31 - and there we are so now we could
181:33 - obviously do like bob.speak
181:36 - and we could do joe.speak and these are
181:40 - the three ways that we have that we can
181:41 - define a cat okay
181:43 - so meow my name is joe i get fed zero
181:45 - bob i get fed 50.
181:47 - right it can go on like that so again
181:49 - when we have one now we just see a quick
181:51 - error that maybe we want to fix
181:53 - we should probably give them food as
181:54 - well so we say this.food
181:56 - equals 50. okay as like our default
181:58 - value for how much they get fed
182:00 - so that is a way that you can do
182:01 - multiple constructors and now i'm going
182:04 - to talk about protected values
182:06 - so protected values are something that
182:08 - we can use
182:10 - similar to private and public but
182:12 - they're
182:13 - they just act a bit differently so
182:14 - pretty much if you use the protected
182:16 - keyword instead of public when you're
182:17 - defining things
182:19 - so for example here in my dog class i'm
182:20 - going to go up and change public
182:22 - to protected this means that only things
182:25 - that are within the same package
182:27 - or are subclasses of the class can have
182:31 - access to this pretty much like name
182:34 - okay so that means any of these files or
182:36 - any of these classes within this package
182:38 - are able to see this but if i had
182:40 - another package
182:42 - which you typically do if you have large
182:43 - java programs anything in there would
182:45 - not be able to see this okay
182:47 - so with whenever we're using um what do
182:49 - you call it whenever we're creating like
182:50 - a main class or a parent class
182:54 - protected wow okay
182:57 - we're going to want to use the protected
182:58 - keyword at least for
183:00 - what do you call it sorry our attributes
183:02 - so that we can change them and access
183:04 - them from within the
183:06 - subclass all right now for these methods
183:08 - it's fine
183:09 - they're public anyways right so we can
183:10 - make these protected as well
183:12 - if we didn't want another package to be
183:14 - able to access them
183:15 - now if we create private methods right
183:17 - if we create a private method here
183:19 - i'm actually going to try this because i
183:20 - don't remember if this is going to allow
183:22 - us to
183:22 - use this now out here so let's say like
183:24 - tim dot i don't even know which one i
183:26 - changed
183:27 - uh get age okay say tim dot
183:30 - get age say int x
183:34 - equals see if this is going to work yeah
183:37 - so again this is not going to allow us
183:38 - to use this
183:39 - because well we made it private right if
183:42 - we made that protected it would allow us
183:44 - to use it here but not
183:45 - outside of the the package now i want to
183:48 - try this though and see if i can get
183:50 - this use this get age from within our
183:53 - cat class
183:54 - so if i do for example when i want to
183:56 - speak i'll say
183:57 - this don't get aged and yeah so this
184:01 - isn't working as well
184:02 - which means that again if we want to use
184:04 - those methods we have to make sure
184:06 - they're either public or protected
184:08 - rather than private okay the only time
184:11 - you're really going to create private
184:12 - methods
184:13 - is if within the class is the only area
184:15 - you're using the method so for example
184:16 - maybe you're doing
184:17 - a math calculation and you only do that
184:19 - from within the class and you don't want
184:21 - anyone outside of the class to be able
184:22 - to do that
184:23 - then you create a private method to do
184:25 - that because you could do that from
184:26 - within the class right
184:27 - so anyways i think i am probably going
184:30 - to end it here
184:31 - in the next video we're going to be
184:32 - talking more about classes doing some
184:34 - more advanced stuff and then in the
184:36 - future we're going to get into like
184:37 - interfaces and some other cool java
184:39 - stuff
184:40 - so again if you guys have any questions
184:41 - feel free to join my discord server or
184:43 - leave a comment down below
184:44 - uh and as always if you enjoyed the
184:45 - video please make sure you leave a like
184:47 - and subscribe and i will see you again
184:49 - so in today's video we're going to be
184:50 - going over uh kind of class variables
184:53 - and
184:53 - the keyword static so you may have seen
184:56 - that we've used static in a few things
184:58 - in like our main thing here actually i
185:00 - got to delete all this
185:01 - uh it says static right here and
185:04 - no one's really explained i guess i
185:06 - haven't really explained what static
185:07 - means and that's what i'm going to be
185:08 - doing in this video
185:10 - so let's get started and talk about
185:13 - class variables
185:14 - so right now we have something called
185:16 - attributes okay so we have these two
185:17 - attributes
185:18 - which are specific to each instance of
185:21 - our dog
185:22 - so when we created multiple dog objects
185:24 - each dog had their own name
185:26 - and their own age and other dogs were
185:28 - not affected when we changed one of the
185:29 - dog's name or one of the dog's age
185:31 - unless that dog was them obviously right
185:34 - and that's great because we can have a
185:36 - ton of different values that are
185:37 - specific to different objects or
185:38 - different instances of this dog class
185:41 - now sometimes we want to have variables
185:44 - that will change or are the same for
185:46 - each instance
185:48 - so we can change them in one instance
185:50 - and if we do change them in one instance
185:51 - they will change in the other now those
185:53 - are known as
185:53 - class variables not instance variables
185:56 - because instance variables are like kind
185:57 - of attributes okay
185:58 - the way that we can create these class
186:00 - variables is we can do something like
186:01 - this i'm gonna say protect it again
186:03 - say protected uh and by the way i'm just
186:05 - in my dog class i deleted a bunch of
186:07 - stuff out of it
186:08 - uh just to make it a bit easier to work
186:09 - in and i still have the cat class but
186:11 - it's just uh i'm not using it for this
186:12 - video okay
186:13 - so we'll say protected static int
186:16 - count equals zero now i know that that
186:19 - is a mouthful
186:20 - but what we're doing here essentially is
186:23 - we're creating a
186:24 - class variable which is an int named
186:26 - count
186:27 - equals zero which is protected okay i
186:29 - know it's a lot of keywords
186:31 - but what does this static keyword do so
186:32 - what this is actually going to do
186:34 - is it's going to allow us to statically
186:36 - change count
186:37 - which means it's not going to change for
186:39 - each instance it's only going to change
186:41 - um
186:42 - or sorry it it'll change uh like all
186:45 - together right so
186:46 - what i was explaining before and that's
186:48 - what this static keyword is going to
186:50 - allow us to do so we don't actually care
186:52 - about what instance
186:52 - this variable is a part of we just care
186:54 - that it's a part of the dog class all
186:56 - right
186:57 - so if i want to change this value x well
187:00 - i do need still need to call it this
187:02 - and i can say this dot count equals and
187:04 - then
187:05 - actually i'm going to say plus equals
187:06 - one okay because what i want to do with
187:08 - this count here
187:10 - i'm going to say static field dog should
187:11 - be accessed in a static way
187:14 - okay let's just do this one second okay
187:17 - what i'm doing here sorry one second
187:19 - i'll explain this is i'm just going to
187:20 - add one to this count because i want to
187:22 - keep track of how many dogs we have
187:24 - so that if i wanted to i don't know like
187:26 - see how many dogs have been created i
187:28 - could just simply call like dog.count
187:30 - and then figure that out right so what
187:33 - i'm doing here instead of calling
187:34 - this.count which does actually work
187:36 - is i'm calling dog.count because since
187:38 - this is a static
187:40 - variable or static yeah static variable
187:42 - class variable whatever you want to call
187:43 - it
187:44 - it doesn't actually care about what
187:45 - instance i'm changing it on because it's
187:47 - going to change for all the instances
187:49 - so i can actually use the name of the
187:51 - class to change it
187:52 - and that's why it gave me that little
187:54 - yellow line i'm not sure if you guys
187:55 - read that
187:56 - it said we should do this in a static
187:57 - way because well it's a static variable
188:00 - so i could however call like this dot
188:03 - count
188:04 - right and that would work fine because
188:06 - uh
188:07 - this was an instance of the dog class so
188:09 - it knows where to look for the variable
188:10 - count but
188:11 - it's much better to do dog.count like
188:14 - plus equals one okay
188:16 - now i'm going to prove this to you that
188:18 - this does indeed
188:19 - actually work i'm not just making things
188:20 - up so let's create some dog objects here
188:22 - i'd say tim or dog
188:26 - tim equals new wow
188:29 - typing is not great today new dog and
188:32 - we'll save tim
188:33 - and let's go 9 for age and we'll just
188:36 - copy this and
188:38 - what should we do let's do bill maybe
188:41 - say bill
188:42 - and that is new dog name bill
188:45 - age 10 okay now since this
188:49 - static variable here is protected i can
188:51 - actually access it
188:52 - from main so what i'm going to do to
188:54 - change count now or to print count out
188:56 - first of all
188:57 - is i'll prove to you that system
189:00 - system dot out dot println
189:03 - i keep thinking we're in python here and
189:05 - i'll just simply print out
189:07 - dog dot count like this okay and just
189:10 - see what we get as a value first of all
189:12 - okay so we get two so uh we already know
189:14 - that this is indeed working because well
189:16 - when we added one to count
189:18 - uh if it was this different for each one
189:20 - then it would just be one but
189:21 - anyways and if i want to change
189:23 - dog.count what i can do is you can say
189:25 - dog
189:25 - dot count uh let's say equals like seven
189:29 - okay and that's fine that works if i
189:31 - print out uh
189:32 - dog.count we get seven now i'll show you
189:34 - two if i do like tim.count
189:36 - uh this will give us the same answer so
189:38 - you can see we get seven
189:40 - even though in tim we didn't do anything
189:42 - with tim to change account since it's a
189:44 - dog
189:44 - part of the dog class it has this count
189:46 - variable and it's changing obviously
189:48 - within tim as well okay so that's kind
189:50 - of how
189:50 - the class variables work now time to
189:53 - talk about static methods
189:54 - okay this was a static variable or class
189:57 - variable i like to call it class
189:58 - variable just because that's what i'm
189:59 - used to but you can call it whatever you
190:00 - want
190:01 - now we're going to talk about static
190:02 - methods and what that is so it's very
190:04 - similar to this
190:06 - kind of the way that this works but it
190:08 - is a little different so i'm going to do
190:09 - here i'm going to say
190:10 - public static void display
190:14 - okay and in here all i'm going to do
190:17 - is simply do uh
190:20 - system dot out dot parent ln
190:24 - and i'll just print i am a dog
190:28 - okay so what this is doing now is i'm
190:31 - saying static void
190:32 - display now in here what's gonna happen
190:36 - essentially is we don't need an instance
190:38 - to call this so i can actually just call
190:40 - this
190:40 - on the the dog class so i can say like
190:43 - dog
190:44 - dot display like this
190:47 - and since it's a static method this
190:49 - works fine and this will indeed say i am
190:51 - a dog
190:52 - now as opposed to if this was a regular
190:54 - method so let's just make a regular
190:55 - method to kind of do a comparison here
190:57 - so let's say public
190:58 - void and we'll say uh display2
191:02 - okay and we'll literally just take this
191:05 - and put it word for word in here
191:07 - just to show you the difference so now
191:08 - watch what happens if i try to do
191:11 - dog.display2 you can see that we're
191:14 - getting a red line
191:14 - and saying that we need to make this
191:16 - static because
191:18 - we need an instance to call display2
191:21 - meaning that we need to have first
191:22 - create a dog object and then we can use
191:24 - that dog
191:25 - object to call display 2 or we can do
191:28 - like this
191:29 - dot display 2 and that works fine
191:31 - because that's calling it on the
191:32 - instance right because this
191:33 - represents the instance that we're using
191:35 - so
191:36 - the static is going to allow us to call
191:37 - it just simply using dog
191:40 - but the thing with static is it has no
191:43 - way to access our uh what do you call it
191:46 - our values or our attributes right
191:48 - so if i wanted to access like a dog's
191:50 - name or a dog's age well
191:52 - i can't do that from a static method
191:53 - like i can't type like this.age
191:56 - that just simply doesn't work because if
191:58 - you think about it
192:00 - well what what uh what instance are we
192:02 - calling it on there's no instance we're
192:03 - just simply calling it on the dog class
192:05 - so we have no idea what age to look for
192:07 - or what name to look for
192:08 - so the only time we use static methods
192:10 - is when we don't care about the instance
192:12 - and we just want to do something and we
192:14 - want to store it within that class
192:15 - you can almost think of it as a function
192:17 - if you if you know other programming
192:18 - languages
192:19 - but that is ideally how static works so
192:22 - whenever you want to be able to call
192:23 - something and you don't care about
192:25 - the uh like the instance you don't care
192:26 - about the attributes you can make it
192:28 - static and that way you can call it
192:29 - without having an instance
192:32 - so yeah so hopefully that makes sense to
192:35 - you guys
192:35 - i'll quickly go over what this void does
192:37 - one more time in case anyone forgets
192:39 - remember in our functions we can return
192:41 - values when you put void
192:42 - all this does is say we're not returning
192:44 - anything we're just going to do
192:46 - something right so we could be like
192:47 - manipulating an array
192:48 - or in this case printing something out
192:50 - to the screen okay
192:51 - or maybe getting like input from the
192:53 - user but we're just not returning any
192:54 - value back to uh
192:56 - the call statement so anyways as always
192:58 - if you guys have any questions please
192:59 - make sure to leave a comment down below
193:01 - or join my discord server
193:02 - and if you enjoyed the video please make
193:04 - sure you leave a like and subscribe and
193:05 - i will see you again in another one
193:06 - so in today's video we're going to be
193:08 - going over how we can compare
193:10 - objects and how we can get a string
193:12 - representation of different objects
193:15 - and you'll see what i mean in just a
193:16 - minute but these are really useful
193:18 - and i guarantee you guys will be using
193:19 - this a lot especially if you have
193:21 - objects like maybe like point objects or
193:22 - like some kind of mathematical objects
193:24 - that you'd want to compare without
193:27 - having to
193:28 - i don't know make things too complicated
193:30 - for yourself let's just say that all
193:31 - right
193:31 - so what i'm going to do here or what
193:33 - i've already done i guess is i have this
193:35 - student class set up and this is just
193:36 - what we're going to work with right now
193:38 - because the other classes i had in
193:39 - previous videos were already like
193:41 - finished and they had other stuff in it
193:42 - so we just have a student
193:43 - and currently the only attribute the
193:45 - student has is a name okay
193:47 - now in my main.java here i've just
193:50 - created a few different students
193:52 - and then i'm just going to be printing
193:53 - something out to the screen so that's
193:54 - why i have that right now
193:56 - so we can see student class right we
193:58 - just create a name for our student
193:59 - now i just want to show you uh quickly
194:02 - how we would go about like comparing
194:03 - objects intuitively right
194:05 - so say i wanted to check if joe and bill
194:09 - were the same right like if we want to
194:10 - see if they were equal to each other
194:11 - well we know how to do that already
194:13 - so what i would do is i'd say like joe
194:15 - is equal to bill
194:17 - now intuitively you probably said well
194:19 - no their names are not the same so
194:20 - they're
194:20 - not going to be equal to each other and
194:22 - well that would be correct
194:24 - but not for the reason that you think
194:26 - and i'll demonstrate that to you so we
194:28 - have joe and bill compared to each other
194:30 - so watch what happens if i try to i make
194:32 - these the same name right
194:33 - so you'd think well these would be the
194:35 - same object or they'd be the same thing
194:36 - right because they have the same name
194:37 - but watch what happens when i run
194:39 - we still get false now why is that uh
194:43 - exactly well pretty much when we use
194:45 - this double equal sign
194:46 - on two objects right so like joe and
194:49 - bill
194:51 - the computer doesn't know how to compare
194:52 - them so by default
194:54 - what it does is it compares the actual
194:58 - object and you see here how we're
194:59 - creating a new student so a new object
195:01 - and here we're creating another new
195:03 - student another new object these are
195:05 - actually two
195:06 - different objects like in memory okay so
195:08 - in your computer's ram
195:10 - these are two different entities and
195:12 - they are completely unique
195:13 - although yes they have the same name
195:16 - since we can change names and we can do
195:17 - things
195:18 - these need to be separate objects so
195:21 - when we compare here
195:23 - it's actually saying well we're going to
195:24 - look and see if these are the exact same
195:26 - object and well
195:27 - they are not now that's useful in some
195:30 - cases because sometimes we want to see
195:32 - if it's like the exact same object
195:34 - but in other cases we want to see if
195:36 - these objects have like the similar
195:38 - values right so in this case we'd
195:41 - probably want to compare
195:43 - the two names of the students to see if
195:44 - they were the same
195:46 - and in that case we would say well yes
195:48 - these are uh
195:49 - the same student or we're going to say
195:51 - yes they are they are the same right
195:52 - when we do the like double equal sign
195:54 - so what i'm going to do now is i'll
195:56 - delete this let me show you how we can
195:58 - go about doing that so inside of our
195:59 - student class
196:01 - i'm going to add a method okay i'm going
196:02 - to call this public boolean
196:05 - not boolean boolean and we're going to
196:07 - say
196:08 - equals and then here we're going to take
196:11 - a student object
196:12 - known as other okay and then we'll go
196:15 - like that
196:16 - and there we are so what i'm going to do
196:18 - in here
196:19 - is when we want to compare our student
196:21 - okay we're going to pass another student
196:24 - and we're going to compare their names
196:26 - right so we're going to call this dot
196:28 - equals
196:28 - on one of our students that already
196:29 - exists we're going to give it another
196:31 - student
196:32 - and then we're going to see if they're
196:33 - the same so how did we say we're going
196:34 - to check
196:35 - the same well we're going to look at
196:36 - their names okay so
196:38 - what i'm going to do is i'm going to say
196:40 - if and then we'll say
196:42 - this dot name and i guess i need uh
196:46 - brackets here as well i always forget
196:48 - about those if this dot name
196:50 - equals equals okay and then we'll say
196:52 - other
196:53 - dot name then what we'll do is we'll
196:56 - simply
196:56 - return true okay now otherwise so if
196:59 - these names are not the same
197:01 - what we will do is we will return false
197:04 - like that
197:05 - okay and that's all we need to do for
197:07 - our dot equals
197:08 - so now what's going to happen right is
197:10 - we'll pass uh
197:12 - on one student we'll call this we'll
197:13 - check name and then we'll check the
197:14 - other student's name
197:15 - see if it's true if it is or if they're
197:17 - the same will return true otherwise
197:18 - you'll return false
197:19 - so now we can try this out so these two
197:21 - are the same names so let's say
197:22 - is joe dot equals
197:26 - and then here i guess we will put bill
197:28 - so let's run this
197:30 - and you can see we get a value of true
197:32 - and then if i change
197:33 - bill back to say bill
197:37 - then we can run this and we can see we
197:39 - get false
197:40 - so now we officially have something
197:41 - checking for equality between the names
197:44 - now we could create more um kind of ones
197:46 - like this like equals
197:48 - grade like whatever if you want to do
197:49 - that but this is how we can check for
197:51 - equality between objects and this method
197:53 - is like really
197:54 - easy to add in obviously if you had a
197:56 - student with a bunch more values so
197:57 - maybe you had like grades maybe you had
197:59 - other stuff like that
198:00 - or like a last name you could check to
198:02 - make that sure those are all the same or
198:04 - you can just kind of customly do it the
198:05 - way that you want to say
198:07 - two different objects are the same right
198:09 - okay
198:10 - so the next thing i want to be able to
198:12 - do is compare things using like greater
198:15 - than sign or less than sign right
198:16 - so i want to see if like joe is greater
198:18 - than bill or bill is greater than tim
198:20 - and we should intuitively like do that
198:22 - based on alphabetical order right
198:24 - so i can't really show you like a way to
198:26 - do it here because i don't think it's
198:27 - gonna work right like joe
198:28 - greater than bill yeah see that that
198:31 - just is undefined there's no way to do
198:33 - that
198:34 - so what we're going to do is we're going
198:35 - to use a method called compare to
198:37 - okay and what we have to do to compare
198:40 - two
198:40 - is we have to uh what do you call it sir
198:44 - we have to implement something into our
198:46 - class so we're going to say
198:48 - implements at the top of our class and
198:50 - we're going to spell implements
198:50 - correctly
198:51 - and we're going to type comparable
198:54 - and then in here we're going to do
198:56 - student now what we're actually doing
198:58 - here
198:58 - when we uh bring this in is we're
199:01 - actually implementing something called
199:02 - an interface
199:03 - now an interface i'm going to talk about
199:05 - in i think like two videos from now
199:08 - but pretty much it's just like a set of
199:10 - methods that we have to use
199:12 - for the class to work so when we
199:14 - implement this comparable thing that
199:16 - means we're allowed to bring in a method
199:17 - that is going to allow us to uh
199:19 - to compare two objects okay so
199:22 - what we'll do now is we'll say public
199:26 - and actually what is the
199:30 - thing for this the return type public
199:32 - ins and
199:34 - compare two and then in brackets here
199:37 - again we're going to take
199:39 - student and this will be other
199:42 - and then we'll put our brackets here
199:43 - like this okay so now again we're going
199:46 - to have to return
199:47 - some kind of integer and i'll show you
199:49 - how that works i just got to get it up
199:50 - on my other screen so i don't mess this
199:51 - up okay
199:52 - so what i'm going to do now is i'm going
199:54 - to return this
199:56 - dot name dot compare to and in this case
200:00 - we're going to compare it to another
200:01 - string so the other string will be
200:03 - other dot name okay
200:07 - so essentially what this is going to do
200:09 - is it is going to compare
200:10 - this name to this other name and it's
200:12 - going to give us an integer value saying
200:14 - kind of how far away they are right
200:16 - so uh it's it's kind of hard to like
200:19 - explain so i'm just actually going to do
200:20 - it from
200:22 - over here and you'll see what i mean so
200:24 - if i go joe
200:25 - dot compare to and then again let's do
200:28 - bill
200:30 - let's see what we get so we get a value
200:33 - of eight
200:35 - now what this means is joe is greater
200:37 - than bill
200:38 - by a distance of eight meaning that when
200:41 - we compare these first two letters they
200:42 - are eight away
200:43 - i believe okay so if we wanted to check
200:46 - if joe was
200:47 - greater than bill what we do is we check
200:49 - if this integer value returned was
200:51 - greater than zero
200:52 - so here greater than zero that's going
200:54 - to tell us true if joe is greater than
200:56 - bill and false if he's less
200:59 - so we run this and we get true now let's
201:02 - see if we compare joe to tim
201:04 - okay so t obviously is ahead of j in the
201:08 - alphabet
201:08 - so we get a value of false okay and if
201:10 - we get rid of this greater than zero
201:13 - then we can see exactly what we're
201:14 - actually getting as a value so negative
201:16 - 10 right
201:17 - because that's how far away uh j is from
201:20 - t
201:20 - when we're comparing them and that's
201:22 - what the compare t does for us okay
201:24 - so if we wanted to check if joe was less
201:26 - than 10 then we check if this value was
201:28 - less than zero
201:29 - in this case we get true so that's a
201:31 - really easy way that we can compare
201:33 - different objects using that compareto
201:36 - method okay
201:37 - so like this a public and compare to and
201:38 - you just have to remember to implement
201:40 - comparable student and then you can use
201:43 - uh
201:43 - exactly this return statement here now
201:46 - the last thing i want to show
201:47 - is a string representation of an object
201:50 - so i want to show you first what happens
201:52 - when i just want to print out my object
201:53 - to the screen
201:54 - so i want to print tim and maybe ideally
201:57 - i'd like to see like uh
201:58 - tim's name right come out to the screen
202:00 - well look what we get here we get
202:02 - tutorial1 dot student at
202:04 - and then all these uh different letters
202:06 - what this is printing is actually the
202:08 - memory location
202:10 - of our object so all of our objects are
202:12 - actually stored in memory
202:13 - uh in ram in like really fancy ways that
202:16 - i can't really explain to you guys
202:17 - but anyways this is like the address for
202:19 - it's like when the computer looks it up
202:21 - this is what it's actually
202:22 - uh using to find tim and find all its
202:25 - values and obviously it's telling us
202:26 - where it is in the tutorial one uh
202:28 - like folder file whatever okay so
202:31 - this is no use to us we this does not
202:34 - help us as programmers at all we want to
202:36 - see like something that's a string
202:38 - and gives us some valuable information
202:40 - so what i need to do is i need to
202:42 - implement
202:42 - a another method here that's going to
202:44 - change this to a string
202:46 - so we've used this dot to string before
202:49 - but this is exactly what
202:51 - i'm going to use we're going to say
202:52 - public string
202:54 - and then we'll say tostring
202:57 - like this okay and what we're going to
202:59 - do in here
203:00 - is we're just going to return a string
203:02 - representation of our object
203:04 - so what we can do essentially is i can
203:06 - just return
203:08 - this dot name and this can be what we're
203:10 - going to use to represent our object
203:12 - now typically you might see people do
203:14 - something like this okay and just
203:15 - follow me for one second they do student
203:18 - and they have a bracket
203:19 - and then we're going to add this dot
203:21 - name
203:22 - and then they add that with another
203:24 - bracket here so this way you'll see when
203:26 - i print it out to the screen what it
203:27 - looks like okay
203:28 - we get student and then tim and this is
203:31 - just simply telling us
203:32 - uh that the object we're printing is a
203:35 - type of student
203:36 - and the name value is tim okay and we
203:39 - can even get more fancy and we could add
203:41 - like
203:41 - double brackets around this dot name if
203:43 - we want to show that this dot name was a
203:45 - string type okay
203:47 - now for our purpose i'm just going to
203:48 - get rid of this student
203:50 - and this bracket here and you can see
203:52 - again when we
203:54 - print this it goes tim now notice when
203:56 - i'm printing this
203:57 - i'm not actually calling this two string
203:59 - method like i'm not
204:00 - not doing dot 2 string that's because
204:03 - java actually knows that when we have
204:06 - this tostring method in here
204:07 - this is going to represent a string
204:09 - right so when we try to print it it's
204:10 - automatically gonna call that dot two
204:13 - string
204:13 - method okay so now uh what we can do is
204:17 - we can also just
204:18 - call like two string so i can if i
204:20 - wanted to i could just call
204:22 - dot two string like this and i could
204:24 - convert it to a string and this will
204:25 - work the exact same way as before
204:27 - you can see we get bill okay again in
204:30 - here
204:30 - you can change this up however you'd
204:32 - like in some cases like say your student
204:33 - had some grades maybe you wanted to
204:35 - write their name and then after you have
204:36 - like an array of all their grades or
204:38 - something like that okay
204:39 - so anyways that has been it for this
204:41 - tutorial in the next tutorial we're
204:43 - going to be talking about inner classes
204:44 - then we're going to be going into
204:45 - interfaces and enums and some more
204:46 - advanced stuff that i think is pretty
204:48 - cool in java
204:49 - uh if you guys enjoyed the video as
204:50 - always please make sure you leave a like
204:52 - and subscribe and i will see you again
204:53 - in another one so in today's video we
204:55 - are going to be going over
204:56 - inner classes now inner classes are
204:58 - pretty uh pretty easy actually all they
205:00 - are is really just a class
205:01 - inside of another class or inside of a
205:03 - method and i'll show you some examples
205:05 - as we go along
205:06 - but since we already know all about
205:07 - classes and methods and static
205:09 - and whatnot i'm not going to explain too
205:11 - much of it i'm just going to kind of
205:12 - show you how we can
205:14 - create instances of inner classes in
205:16 - different ways
205:17 - so what i'm going to start by doing is
205:19 - inside this outer class here that i've
205:21 - already created
205:22 - you can see on the side here i'm just
205:24 - going to create another class called
205:26 - inner class right now inner class is
205:29 - just going to simply have one method in
205:31 - it
205:31 - and i'm just going to make this a public
205:34 - void
205:35 - display and in here all i'm going to do
205:38 - is simply just display something to the
205:40 - screen
205:40 - so we know that we're actually uh in the
205:42 - right
205:44 - class here okay and i'll say this
205:47 - is an inner class okay
205:51 - and what's our error here class at token
205:54 - hmm interesting i must have made a
205:57 - mistake somewhere here one second guys
206:03 - oh
206:04 - sorry i put these two brackets here
206:06 - don't know why i added those anyways
206:08 - okay so this
206:09 - is an inner class now outside of this
206:12 - class i'm going to create another method
206:14 - that's going to be a part of the outer
206:15 - class okay so this
206:17 - is actually contained within the outer
206:18 - class meaning that
206:20 - currently since it's private we can only
206:22 - actually access it from within our class
206:25 - so if we want to create an instance of
206:26 - this that means we must need a method
206:28 - in our class to do that so in this case
206:30 - i'm going to say public void
206:32 - enter and in here we're going to take
206:34 - nothing and all we're going to do is
206:35 - we're going to create an instance of our
206:36 - inner class and just display okay so
206:38 - we're just going to say
206:40 - inner class i n equals new
206:45 - your class like that okay and then all
206:48 - we're going to do is just call i n dot
206:49 - display
206:50 - and make sure that this is working
206:53 - okay so now our class is finished we
206:55 - have an inner class and we have this
206:57 - void inner and all that does is create
206:59 - an instance of our inner class
207:01 - and uh print it to the screen again note
207:03 - that this is private meaning we can only
207:04 - access it from within
207:06 - our our class okay so now if i go to my
207:09 - main.java
207:10 - i can run a command so or whatever
207:13 - create an object so we can see this
207:14 - so first of all what i have to do is
207:16 - create an outer class object
207:18 - so that we can call that inner class so
207:20 - outer class
207:22 - out equals new and then outer
207:25 - class now it is worth noting that i
207:28 - don't have any constructors here meaning
207:30 - that
207:31 - i don't need to give any information to
207:33 - my elder class or my inner class when i
207:35 - first call it and that's why i can just
207:37 - leave these blank brackets okay
207:39 - so now if i want to see my inner class
207:40 - what i have to do is i have to do out
207:42 - dot enter okay so we'll call that method
207:45 - to create
207:46 - the inner class and then run that so
207:48 - let's run quickly here
207:50 - and we can see we get this is an inner
207:52 - class awesome so that's working fine
207:55 - now i'm just going to make this public
207:56 - now i'm going to show you how we can do
207:58 - this
207:59 - from outside of the class so right now
208:01 - what we need to do is we need to create
208:02 - an instance of outer class and then we
208:03 - need to call the method
208:05 - inner to be able to create the inner
208:06 - class and that's because this was
208:08 - private
208:08 - but now that it's public we should be
208:10 - able to create an instance of it
208:12 - outside of the class so the way that we
208:13 - do that is we still need an instance of
208:16 - outer class because
208:18 - this class is defined within outer class
208:21 - so we need to first create this so that
208:23 - this is kind of created right
208:25 - so we did that we have outer class now
208:27 - what i can do is i can say elder class
208:30 - dot inner class okay and we'll just call
208:33 - this one i n
208:34 - equals oops lowercase equals
208:37 - out which is going to be our instance of
208:40 - outer class
208:40 - dot and then in this case we're going to
208:43 - type
208:44 - inner class believe this is correct
208:48 - but i guess we'll see oh i probably need
208:50 - an equal sign and we'll type
208:52 - new new out dot inner class and let's
208:55 - see what our little red line is create
208:56 - class inner class in package out
208:59 - interesting one second guys okay so
209:01 - that's for the issue i knew it was
209:02 - something like this what we need to do
209:04 - is we need to do out
209:05 - dot new and then inner class because
209:07 - we're creating a new
209:08 - instance inside of this right of outer
209:10 - class of inner class okay
209:12 - so now what we've done is we've created
209:14 - this i n which is an object which is a
209:16 - new inner class so now we can simply use
209:19 - in
209:20 - um which is an instance of uh inner
209:22 - class right to display
209:24 - so now we can do a i n dot display
209:27 - okay so if we run this see this is an
209:29 - inner class and that is working fine so
209:31 - those are two ways we can
209:32 - access the inner class now right now you
209:34 - might be like okay well why the heck
209:36 - would i do this because
209:37 - now it's just like a ton more lines well
209:39 - there's many times where you don't
209:40 - really care about like this instance and
209:42 - you just want
209:43 - an instance of the object inside of it
209:45 - so in that case
209:46 - this would make more sense to do and
209:48 - obviously you would most likely have
209:49 - more methods than just one that you're
209:51 - going to be using okay
209:52 - all right so now that we have that i
209:54 - guess let's show creating this kind of
209:56 - inner class stuff so i'm going to delete
209:58 - this
209:58 - inside of a method so we can actually
210:02 - create these inside of methods which are
210:04 - really useful because sometimes within
210:05 - the method we want to use a class and we
210:07 - don't want to have to define like a new
210:08 - file for another class okay
210:11 - so we have this public void inner so i
210:13 - guess let's just work with this right
210:15 - now you know we'll even leave in a class
210:17 - right now and i'll show you how this
210:18 - works
210:19 - so all i can do in here then say uh we
210:22 - can do publicly private in this case i'm
210:24 - just going to say i'm going to say
210:25 - class let's see
210:28 - class inner class and then here yes that
210:31 - works fine
210:31 - we're just going to redefine display uh
210:34 - so we'll just say
210:35 - public void display
210:38 - and now that i think of it i probably
210:39 - could have just copied all my other code
210:41 - but
210:41 - whatever got some practice typing print
210:44 - ln and then in here again uh well
210:48 - this should probably be a t we will just
210:51 - type
210:53 - inner class okay so this is going to
210:56 - work perfectly fine whenever we call
210:57 - this void inner
210:58 - then we have this class inner class
211:00 - we're going to create an instance of it
211:02 - and we're going to display it so if i
211:04 - run this
211:05 - i guess wow i really should have just
211:07 - kept all that code but that's fine
211:10 - why is this not giving you the
211:12 - autocorrect outer class
211:14 - uh out equals new and we go
211:18 - outer class and brackets
211:22 - and then in this case we'll simply just
211:23 - call out dot inner
211:26 - okay so now we can see what should
211:28 - happen is again we should print
211:30 - uh inner class so there we go
211:33 - and we get inner class now pretty much
211:36 - you can do this like wherever you want
211:37 - the reason i'm not saying this is public
211:39 - or private is just because like it's
211:40 - already within this void
211:42 - so to use it we're going to have to call
211:44 - this void so there's no really there's
211:45 - not really any point in putting like
211:46 - private or public
211:48 - um but again like if you wanted to you
211:50 - could type public class
211:51 - interclass or oh actually saying you
211:54 - can't do that so i guess i was right the
211:55 - first time
211:56 - so since it's inside of this void you're
211:57 - only going to be able to use it when we
211:58 - call this
211:59 - so there's no point in really giving it
212:01 - like a public or private method
212:03 - or class name sorry because in here we
212:05 - can still do public and private methods
212:07 - because well outside of the class we
212:08 - might be using those methods right
212:10 - so you can see obviously since i'm
212:12 - creating this instance inside of the
212:14 - the void so inside of inner and if i
212:16 - tried to do that outside of it it
212:18 - wouldn't work because this class is only
212:20 - defined when we call
212:21 - the inner method okay so
212:24 - i think that's kind of been it for inner
212:26 - methods there are like
212:28 - anonymous inner methods and some few a
212:30 - few like other cool things
212:31 - you can do with it but i don't find them
212:33 - particularly useful so i'm not going to
212:34 - teach them here especially in like a
212:36 - beginner's tutorial but if you guys
212:37 - are interested in learning about them i
212:39 - will leave a link in the description
212:40 - just for any of you guys that are
212:42 - curious and as always if you enjoyed the
212:44 - video please make sure to leave a like
212:45 - and subscribe and i will see you again
212:47 - in another one hey guys
212:48 - and welcome back to the java programming
212:50 - tutorial so in today's videos we're
212:52 - going to be going over
212:53 - interfaces now interfaces are uh i think
212:56 - they're unique to java actually because
212:57 - i haven't heard of them in any other
212:58 - languages
212:59 - but they're somewhat similar to classes
213:02 - uh they have to do with like inheritance
213:04 - and anyways you guys will see as we go
213:05 - through the video but they're pretty
213:06 - useful
213:07 - um and yeah they're an important part of
213:09 - java so we need to learn them
213:11 - so what we're going to do first of all
213:12 - is we're going to create a new interface
213:14 - now just like we created a new class
213:16 - we're just going to right click on
213:17 - tutorial 1 our package
213:19 - go to new instead of class obviously
213:20 - we're going to click interface
213:22 - now i'm just going to name this one
213:24 - vehicle for the example that i'm going
213:26 - to be doing so i'll click vehicle
213:29 - and that's all you need to do there's no
213:30 - like you don't have to package
213:32 - generate comments that's fine just do
213:33 - vehicle all right now we have an
213:35 - interface
213:36 - called vehicle so what is an interface
213:39 - well pretty much it is something that is
213:41 - completely
213:42 - abstract now this is kind of a new
213:44 - concept but it means that
213:46 - we're not actually going to like do you
213:47 - can't create an instance of
213:49 - an interface all it's meant to do is to
213:52 - be inherited from
213:54 - so if we have a class like car for
213:56 - example that i've created here
213:58 - car could implement the interface and
214:00 - use it but we're never going to create
214:02 - an instance of an interface it's just
214:04 - here so that we can implement it into
214:06 - different classes
214:07 - hope that makes sense so inside of our
214:10 - interfaces and you'll see in a second
214:11 - we can only have um public methods and
214:15 - we actually don't define
214:16 - anything inside the methods or the uh
214:19 - the attributes
214:20 - so when i create a method in an
214:22 - interface and i'll just make one now i
214:23 - guess
214:24 - i'm gonna do let's see here void
214:27 - speed up and we'll take as a parameter
214:30 - into a
214:31 - that's all i do when i create a method i
214:34 - don't put the
214:35 - the brackets i don't do anything inside
214:36 - the method i just create this
214:39 - now you can see that this is completely
214:40 - abstract because it doesn't actually do
214:42 - anything it just defines the fact that
214:44 - this method
214:45 - exists so similar to when you create a
214:48 - variable and you don't give it a value
214:49 - that's kind of what we're doing here
214:51 - because we're going to use this
214:53 - in our car class and you'll i kind of
214:55 - have to go through all of it before
214:56 - you're really going to understand
214:58 - but when you create a method just know
214:59 - that you don't give it any content
215:01 - all you do is just say like this method
215:03 - will exist in any of the classes that
215:06 - implement this okay
215:07 - so i'm going to create a few methods
215:08 - here and what do you call it like a
215:11 - attribute and then we'll just move into
215:13 - actually using the interface that's the
215:14 - easiest way to uh
215:15 - understand it so i'm going to say we
215:17 - have speed up we're going to have slow
215:19 - down
215:20 - and we'll have uh let's go change gear
215:23 - as well okay
215:25 - just going a classic example that we're
215:27 - gonna implement a vehicle
215:28 - from a car and you guys will see what i
215:30 - mean okay uh
215:31 - change gear okay and then i'm gonna add
215:34 - a attribute
215:35 - now any attributes that i add in here
215:37 - like variables or whatever you guys want
215:38 - to call them
215:39 - they have to be final now i'm not sure
215:42 - if you remember in the last video but
215:43 - final means that it's a constant and it
215:45 - cannot change okay like we can't change
215:47 - this value
215:48 - so i'm going to say final int a
215:52 - equals and then let's just say five okay
215:54 - actually or let's just go
215:57 - gears okay like final into gear equals
215:59 - five saying that each thing we're using
216:00 - is going to have
216:01 - five gears now watch if i try to just do
216:03 - int gears equals five
216:05 - that still works but it's not going to
216:07 - work in the way that
216:08 - we want okay so just make sure whenever
216:10 - you're doing this you make them final
216:12 - if you want to have like variables or
216:14 - whatever that you want to use
216:16 - in all of the different classes they
216:18 - must be final okay so right now we've
216:20 - defined three methods and we have one
216:22 - attribute
216:22 - which is just called gears okay so how
216:25 - do we use this interface now and how
216:26 - does that how does that work
216:28 - well the way we use it is we type uh
216:31 - implements and you might have seen this
216:33 - before and then the name of the uh
216:35 - the interface so in this case vehicle
216:37 - okay you can see already that we're
216:39 - getting a red line we're getting an
216:40 - error so there's nothing wrong here
216:41 - because we can implement it but car is
216:43 - saying
216:44 - uh the type car must implement the
216:45 - inherited abstract method
216:47 - okay so that means that since we've
216:49 - defined these three methods here
216:51 - inside of our interface a vehicle we
216:54 - have to define them
216:55 - inside our car class so whatever methods
216:58 - we put here if we implement
217:00 - one of the interfaces we have to define
217:02 - them because right now they're
217:04 - completely abstract
217:05 - and if we call them we have no idea what
217:07 - to do because there's no content for
217:09 - them right
217:09 - so we're going to have to create a void
217:11 - which is change gears i'm going to say
217:12 - public void
217:16 - change what did i call it gears or gear
217:19 - let's see change gear okay so change
217:21 - gear
217:22 - and then it's going to have to take one
217:24 - parameter in this case we're going to
217:26 - say
217:26 - int gear so like what gear do we want to
217:28 - change to okay and then we're just going
217:30 - to go up here and we're just going to
217:31 - say
217:33 - private int gear
217:36 - because we're going to define that when
217:37 - we when we change gears right
217:39 - okay so now we're going to go to and
217:42 - make another uh the other one that we
217:43 - need so let's just check here we need to
217:45 - speed up so we'll say public void
217:47 - speed up and in here we'll have int
217:50 - speed
217:50 - as like what speed or actually not speed
217:53 - we're gonna go int
217:54 - uh change so how much we're gonna speed
217:56 - up by and then we'll do one more so
217:58 - public void slow
218:01 - down like this and again we need this
218:04 - change
218:05 - and there we go so this now we're
218:09 - getting no errors because we've
218:10 - implemented
218:11 - all of the methods that were abstract
218:13 - over here okay
218:14 - now gears we don't need to do anything
218:15 - with it it's just like if we wanted to
218:16 - use it we could okay
218:18 - so what i'm gonna do now is inside i'm
218:20 - actually gonna create another private
218:21 - and
218:22 - i'm gonna call this speed okay
218:25 - what i'm gonna do now is i'm going to
218:27 - just just uh fill up these uh
218:29 - what do you call these methods so i'm
218:30 - gonna say when we change gear we're just
218:31 - gonna say
218:32 - uh this dot gear equals whatever gear
218:36 - we're changing it to
218:37 - and then for speed up i'm gonna say uh
218:40 - this.speed
218:42 - actually plus equals change
218:46 - okay and then down here we'll say
218:48 - this.speed minus equals change okay
218:52 - and change perfect okay
218:55 - so now what we're going to do is we're
218:57 - actually just going to add one more
218:58 - method just to show how this works so
219:00 - we've implemented
219:01 - the things we need to implement from our
219:03 - interface
219:04 - and now what we're going to do is we're
219:06 - going to uh just create another method
219:08 - so in this case i'm going to make this
219:09 - like a display method so that we can uh
219:12 - display our i don't know car pretty
219:14 - easily okay so public void
219:16 - display and inside of here i'm just
219:18 - going to print out a few things
219:19 - the screen so system dot out dot
219:23 - and in this case we'll just say i am a
219:26 - car
219:26 - comma and then we'll just add uh
219:29 - actually let's say going and
219:33 - how fast are we going we're going this
219:34 - dot speed
219:37 - and if we wanted to we could add like a
219:38 - little kilometers per hour so let's do
219:40 - that
219:41 - and i am in gear
219:45 - and we'll just add whatever the gear is
219:47 - so this dot uh the stuck here
219:50 - perfect okay so let's now
219:53 - actually use this so we have our
219:56 - interface vehicle okay
219:57 - and we have our car so what we're going
220:00 - to do now is we're going to create car
220:01 - objects we'll say car
220:02 - uh i don't know let's say ford
220:05 - okay equals new
220:09 - car okay perfect and now what we're
220:12 - gonna do is we're gonna say
220:13 - car dot uh or ford i guess is what we
220:17 - need to do we'll say four dot
220:19 - speed up and let's maybe change it to 10
220:21 - we'll add 10 to it
220:22 - and i just realized that we're actually
220:24 - gonna have to make this speed default at
220:25 - like zero and gears
220:27 - let's just do that default zero as well
220:29 - otherwise we're going to run into an
220:30 - error
220:31 - um actually gear i guess you can't
220:32 - really be in gear zero can you let's
220:34 - change that to one
220:35 - okay perfect okay so four dot speed up
220:38 - and we'll say four dot
220:40 - change gear and let's just change to
220:41 - gear two okay
220:43 - and then if we want to display our
220:45 - forward we can do four dot
220:46 - display perfect okay so let's run this
220:50 - now and see if everything's working
220:51 - so we say i'm a car going 10 kilometers
220:53 - an hour and i am in
220:54 - gear two perfect so that's working fine
220:57 - and we've implemented all that stuff
220:59 - from
220:59 - our interface vehicle interface so now
221:02 - i'm going to show you some cool things
221:03 - we can add into our interfaces that make
221:05 - them a lot more useful
221:07 - so say for example you've used a bunch
221:10 - of interfaces
221:10 - with a bunch of classes you've inherited
221:12 - from them and now
221:14 - what you want to do is you want to add a
221:15 - method to all of those classes that are
221:17 - inherited from it well what you could do
221:19 - is you could do the same thing here and
221:20 - you could type something like this
221:22 - and then you could go into every single
221:23 - one of your classes and you could change
221:25 - them to be whatever you want
221:26 - but if you want the method to be the
221:28 - same for all of them we can actually use
221:30 - something this is why
221:31 - interfaces are kind of useful called
221:33 - default okay
221:34 - so if we type default and then maybe in
221:36 - this case void
221:38 - and let's just say like out like we're
221:39 - going to print something out just make
221:40 - it easy
221:41 - what we'll do here is we'll just um we
221:44 - can just create a method and we can use
221:45 - this
221:46 - from any of the classes that inherits
221:48 - our
221:49 - our interface okay so i'll do here it'll
221:52 - say system
221:54 - uh dot out dot println in this case i'll
221:58 - just say
221:58 - uh default uh method okay
222:03 - i know very creative how did i just
222:06 - spell system
222:09 - am i okay anyways all right i'm tired
222:11 - guys i apologize system.out.println
222:14 - default method okay so now that we have
222:16 - that
222:17 - from within this car class we can use
222:19 - that default method so say when we
222:21 - display we want to print that and then
222:23 - we want to do the default
222:24 - what we could do i believe is we can say
222:27 - just out maybe and yes that actually
222:31 - works fine
222:32 - so now that we have out because that is
222:34 - a method within our
222:36 - vehicle class and we implemented let's
222:38 - see what happens when we run our program
222:40 - we get i am a car going 10 kilometers an
222:41 - hour and i am in gear 2
222:43 - and then it says default method and it's
222:45 - using that default method that we
222:46 - created inside of our interface
222:49 - now i believe we can actually use static
222:51 - methods as well so this would be known
222:53 - as something that's not a static method
222:55 - because we have to call it from within
222:58 - our uh
222:59 - our class but we can actually create
223:01 - static methods within our interface that
223:02 - we can then um
223:04 - just call statically like we don't have
223:06 - to have an instance to call them
223:08 - so if you don't know what i mean just
223:09 - follow along for a second as i'm going
223:10 - to
223:11 - create a static uh i don't know let's
223:13 - just do like
223:15 - ins let's return something let's change
223:17 - it up let's just call this
223:18 - math actually i feel like math is a key
223:20 - word
223:22 - that's fine we'll just do math okay
223:23 - we're going to take uh int b
223:26 - and all we're going to do is we're just
223:28 - going to return b
223:29 - plus nine okay i know very basic but
223:32 - that's all we're going to do just to
223:33 - prove a point
223:34 - so now say i'm in my main.java all right
223:37 - and we get rid of this we don't create a
223:39 - car object
223:40 - and i want to use this static method
223:42 - inside of my interface
223:44 - well what i can do is i can do vehicle
223:47 - dot and then you can see it already has
223:49 - this function coming up here this method
223:51 - dot math give it a value like five
223:54 - i'm just gonna actually set this equal
223:56 - to a variable so we'll say into x
223:58 - equals that and then we can system dot
224:00 - out that
224:01 - and see what we're actually getting as a
224:03 - value in this case we should be getting
224:06 - 14 right yeah so 14 there we go so let's
224:08 - say you can create a static method
224:11 - inside of your interface so in some
224:13 - cases you can kind of think of these as
224:15 - functions all right
224:16 - say you had actually you know i'll just
224:18 - do one as an example because this is
224:19 - kind of useful
224:20 - if i go new interface and we call this
224:23 - math okay then inside here you could do
224:26 - a bunch of static methods
224:29 - that uh will do like math operations for
224:31 - you like maybe you have the quadratic
224:32 - formula maybe you had um
224:34 - i don't know like euclidean distance
224:36 - like i don't know a bunch of different
224:37 - math formulas
224:38 - you put them all in this math interface
224:39 - and then when you want to access them
224:41 - it would come in here and you'd say well
224:43 - math
224:45 - dot maybe like square root like sqrt
224:47 - okay
224:48 - and then there you'd be able to use all
224:49 - of those i want to call functions but
224:51 - they're really methods inside the
224:53 - the interface uh really easily so that
224:57 - is a really good example of when
224:58 - you can kind of use interfaces so
225:00 - anyways that's been it for interfaces
225:02 - if you guys continue on with java you
225:03 - will see that in many cases especially
225:06 - making games and stuff you're going to
225:07 - be implementing other people's
225:08 - interfaces
225:09 - so it's good to know kind of how to
225:10 - create them how they work in the back
225:12 - end
225:13 - typically you probably won't be creating
225:14 - any of your own interfaces unless you
225:16 - have like large programs and a lot of
225:17 - abstraction and inheritance
225:19 - but anyways they're good to know so as
225:21 - always if you enjoyed the video please
225:22 - make sure you leave a like and subscribe
225:24 - and i'll see you again in another
225:25 - in today's video we're going to be going
225:26 - over enums now enums are pretty much
225:29 - a collection of constants that we can
225:32 - reference and then we can do things with
225:33 - those constants
225:34 - and uh they are pretty cool and just
225:37 - make our code more readable
225:38 - and yeah you guys will see when we go
225:40 - through the video so the first step
225:41 - is to create an enum now to do that it's
225:44 - similar to creating a class or an
225:45 - interface or whatever
225:47 - go to your package right click and click
225:49 - new and then
225:50 - enum so for enum i'm just going to name
225:52 - mine
225:54 - actually i'm just going to name mine
225:55 - level because
225:57 - you'll see why it just makes sense for
225:58 - this example so again the
226:00 - syntax here is a public enum level
226:02 - rather than like class or interface or
226:04 - whatever right
226:05 - so in here is where we're going to
226:07 - define our constants okay
226:09 - now this is really useful because we
226:10 - don't have to do like public static
226:12 - and whatever like the name like we can
226:14 - literally just type whatever value we
226:16 - want our constant to be and typically
226:18 - it's a string
226:19 - so in my case i'm going to go for level
226:20 - i'm going to go in all caps you don't
226:22 - have to go in all caps i'm going to go
226:23 - high
226:24 - medium and low okay
226:27 - now these are the three constants i'm
226:29 - going to store in my
226:30 - level enum so we have high medium low
226:33 - and
226:33 - yeah that's literally all i'm gonna do
226:35 - right now for my enum it just means we
226:37 - have three constants that we can
226:38 - reference from level and these the three
226:40 - and obviously you could do as many as
226:42 - you want and just keep going with commas
226:44 - on
226:44 - and i think you can put them on the same
226:45 - line as well it just makes it more
226:46 - readable if you do them
226:47 - like other lines okay so there we go
226:49 - three constants now i'm going to show
226:51 - you how we can actually
226:52 - use this enum and you'll start to
226:53 - understand uh how it works so to use
226:55 - this enum we have to create a new uh
226:57 - instance of it so to do this i'm going
226:58 - to say level and we'll say lvl
227:01 - equals new uh actually i think
227:04 - it's like this it goes level dot and
227:08 - then yeah so we say high
227:09 - low and medium so in my case i'll just
227:11 - pick low and i'll put a semicolon
227:13 - and now you can see it's all showing up
227:15 - in different colors and this is working
227:17 - fine
227:18 - so now that we have this as a constant
227:21 - we can do certain things with it right
227:23 - so typically you might want to check
227:26 - uh what value your constant is so like
227:28 - what value is level so we can obviously
227:30 - use these in an if statement
227:32 - like so so if i say like if lvl
227:35 - equals equals and then like it's level
227:38 - uh
227:38 - dot and it will start at low i guess and
227:41 - we'll just work our way up to high
227:43 - and we'd say l if or else if
227:46 - and we'll say lvl equals equals and then
227:51 - level dot and medium
227:54 - okay we'll do something in there and
227:55 - then finally else because if it's not
227:57 - lower medium it must be high then we'll
228:00 - just use something here so in this case
228:01 - we'll just say system.out.println
228:05 - and we're just going to print level for
228:06 - all of them because i want to show uh
228:08 - what this does okay oh what the heck did
228:11 - i just do there
228:12 - okay anyways okay so now we're just
228:15 - printing level each time and actually
228:16 - let's just run this now and see what
228:17 - happens
228:18 - so you see we get low so when we print
228:21 - out level it's simply just going to
228:22 - print like whatever the constant is that
228:24 - we have
228:25 - and that's because uh it has like a two
228:28 - string method built in so we can convert
228:31 - these into a string and i'll show you
228:32 - what i mean by that
228:33 - so pretty much say we wanted to get this
228:35 - because right now like it's not a string
228:37 - it's not an it's not a boolean we don't
228:38 - really know what type it is it's just
228:40 - like
228:40 - in level like it's an enum so to
228:42 - actually get this as a string value if
228:44 - we wanted to do something with it or
228:45 - store it
228:46 - we can use dot tostring so if i say
228:48 - string
228:49 - let's say e end why not why not
228:52 - i will say is equal to lvl lvl.2string
228:57 - and that's just going to convert this to
228:58 - a string for us and then we can do all
229:00 - our string operations or whatnot with
229:02 - that all right
229:03 - so that's how you get it to a string now
229:04 - another really useful thing with enums
229:06 - is we can actually get
229:07 - all the different values of enums and
229:09 - print that to the screen so i do system
229:12 - dot out dot print ln
229:15 - and i believe the way we do this is we
229:17 - go level
229:18 - dot values yes there we are so we go
229:21 - level dot values and if we hit that or
229:24 - we type that in you're going to see when
229:25 - we run this now
229:26 - it gives us well it is actually giving
229:29 - us an array with the values
229:31 - so when we try to print that we're
229:32 - getting like you know the memory address
229:34 - of it so once we have these values i'm
229:35 - actually just going to store this in
229:36 - array so that we can then
229:38 - iterate through it and print them out
229:39 - what i'm going to do is i'll say
229:41 - level array and this is the way you have
229:44 - to do it
229:45 - let's say arr is equal to and then
229:48 - level dot values okay so that's working
229:50 - fine so what we're going to do now
229:52 - is we'll just create a quick for loop so
229:53 - and i'll show you how we can loop
229:54 - through all the different values
229:56 - so say 4e hormone which should be
230:00 - s level level e
230:04 - and then we'll say in arr
230:08 - what we'll do is we'll simply just print
230:10 - out e okay
230:12 - so system will print out e and then we
230:14 - can see all the different contents that
230:16 - we're going to get
230:16 - so let's go here and you see we get high
230:19 - medium low and then just prints low
230:20 - again just because we're doing the silly
230:21 - if statement here okay
230:22 - and that's how you can loop through all
230:24 - the different values so that's really
230:26 - cool
230:26 - um but you might say okay well that's
230:28 - cool tim but is this really that useful
230:30 - like we just have these constants well
230:32 - there's a few other things that we can
230:33 - do inside of this enum we can add some
230:35 - methods
230:36 - uh and some constructors as well so that
230:38 - these constants actually point to
230:40 - certain values kind of similar to like a
230:41 - hash table or hash map that i showed you
230:43 - before
230:44 - so the way that we can do that is we
230:47 - need to create
230:48 - first of all a variable that's going to
230:49 - be private so in this case i'm going to
230:50 - say private
230:51 - and i'll say uh actually int
230:56 - level lvl num okay so this is going to
230:59 - just be a private value that's just
231:01 - going to store the value of each
231:02 - of these so like low medium high value
231:05 - of all these levels
231:07 - so to set this value what we need to do
231:09 - is we need to create a constructor for
231:11 - our edium and you'll see how this works
231:13 - in a second so i'm just going to say
231:14 - public
231:16 - level ins and then
231:19 - num okay and in here actually what are
231:22 - we getting here
231:24 - remove invalid modifiers legal modifier
231:27 - for enum contract only private increment
231:28 - okay so let's just do this
231:30 - private sorry my bad private because
231:32 - we're just going to call it on here
231:33 - you'll see in a second
231:34 - private level into num and then we're
231:36 - just going to say this dot
231:38 - lvl num is equal to num
231:41 - okay there we go so now what i can
231:43 - actually do is you see how these are
231:45 - highlighting in red
231:46 - so since this is a private constructor
231:48 - that means we're going to define this
231:50 - variable based on what constant we
231:52 - choose for the enum
231:53 - so i'm going to put brackets here and
231:55 - i'm going to define high as 3
231:57 - medium as two and low as one
232:01 - now what this is going to do is it's
232:02 - going to keep our same constants of high
232:04 - medium and low
232:05 - but when we create a new constant it's
232:07 - going to
232:09 - activate this constructor of level and
232:11 - it's going to set this level numb
232:12 - equal to whatever value we put in the
232:15 - brackets here so in this case three two
232:16 - one we could obviously have multiple uh
232:19 - what he called parameters here and we
232:20 - could have multiple arguments here and
232:21 - we can have a ton of different values
232:23 - and yeah so the only issue is since this
232:26 - value is
232:27 - private we're going to need a way to
232:29 - access it
232:30 - from our main here because that's
232:31 - probably where we're going to want to
232:32 - use it
232:33 - so that means we're going to have to
232:34 - create a few methods to we'll change
232:36 - that level num and to get that level
232:38 - number so we've done this before but
232:40 - actually i don't think i can do a public
232:43 - and we'll see if we can public get level
232:47 - and then in here we'll simply return
232:51 - i guess this is going to need to be an
232:52 - int public into get level
232:54 - we'll simply return this dot
232:57 - lvl num okay yeah so that does work fine
233:01 - i just can't do a public construct okay
233:02 - so this is just going to give us the
233:03 - level num
233:04 - if we call get level on our enum okay
233:07 - now to
233:08 - change this uh uh what do you call it
233:10 - level numb what i'm going to do is i'm
233:11 - going to do
233:13 - set lvl and instead of having interior
233:16 - it's just going to be a void
233:18 - okay and all we're going to say is this
233:20 - dot
233:21 - lvl none is equal to num and then we're
233:23 - going to put in here
233:24 - into okay perfect so now what we're
233:28 - doing is we have a way to
233:29 - not only get the level number but to
233:31 - change it so now let's try using this
233:33 - out in our main and see how this works
233:35 - so i'm just going to get rid of all this
233:36 - stuff because we don't need this for
233:37 - right now
233:38 - so right now we have our level and it's
233:40 - level.low
233:42 - so to actually get the value of this
233:44 - level we can use something
233:45 - called getvalueof or we can use that
233:48 - method that we had here so in this case
233:50 - i'm going to say get level so what i'll
233:51 - do is i'll say
233:53 - system dot out
233:56 - dot print ln and in here we'll say lvl
234:00 - dot and then what was the thing we were
234:02 - using get level like this
234:04 - so now if we print this out of the
234:05 - screen we should be getting one and
234:07 - indeed we are we're getting one
234:09 - so now i want to show you this thing
234:10 - it's called get value of
234:12 - okay and is it it's value every get
234:15 - value of not sure we'll see so i'm
234:17 - pretty sure if we do something like this
234:18 - level dot value of yes that is exactly
234:21 - what it is
234:22 - and then we pick uh we type in whatever
234:24 - the enum is so in this case we could say
234:27 - low it's going to give us let's see
234:30 - what's the issue here
234:33 - okay yeah so the issue is i just got to
234:35 - put this in string i just forgot about
234:36 - that so i do
234:37 - level dot get value and say i put a
234:39 - string in here so like say someone was
234:40 - typing in and
234:41 - um into the computer and they type in a
234:43 - string right and you want to pass this
234:44 - into get value we see
234:46 - what we're actually going to get is we
234:48 - get low right because that is the value
234:50 - of this string
234:52 - in the enum although it's not a string
234:54 - it can like determine that okay so
234:56 - that's what value of is used for
234:57 - i can't really give you any good
234:58 - examples of them because i don't really
234:59 - know any good examples of using value of
235:01 - but
235:02 - for any of you that might see some use
235:03 - in it i figured i would show it to you
235:06 - so i guess we can do an example now of
235:07 - just setting the level just to make sure
235:09 - that all of that is working
235:11 - say lvl dot set level and in this case
235:14 - let's say five
235:15 - and then let's just grab this again
235:17 - actually
235:18 - and we can delete this from up here and
235:20 - now i'm just simply going to print out
235:22 - uh we call it lvl dot
235:26 - get level and just make sure that
235:27 - everything is changing and working fine
235:29 - and there we go we get
235:31 - a level of five so that is how we can
235:34 - use enums
235:35 - pretty much they're used for when you
235:36 - want to have a collection of different
235:38 - constants maybe you want to loop through
235:39 - see what those constants are
235:41 - and it just makes our code kind of
235:42 - readable right because we have level.low
235:44 - and then that low can point to like five
235:46 - two one whatever and that's all stored
235:48 - within our enum right here
235:50 - obviously you can have as many enums as
235:51 - you want and you'll really see the use
235:53 - of them further on in java when you're
235:54 - creating like larger programs okay
235:56 - so anyways that has been it for this
235:58 - video if you guys enjoyed please make
236:00 - sure you leave a like
236:01 - and subscribe and i will see you again
236:02 - in another video
236:11 - you