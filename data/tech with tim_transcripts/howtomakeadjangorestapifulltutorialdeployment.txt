00:00 - in this video I'll teach you how to make
00:01 - a d Jango API using Python and the D
00:04 - Jango rest framework the API will look
00:06 - something like this and we'll be able to
00:08 - create read update and delete data now
00:11 - at the end of the video I'll even show
00:12 - you how we deploy this API to a public
00:14 - URL and if you want to test out the API
00:17 - that we'll be building I'll leave a link
00:18 - in the description right now if you
00:20 - click on that link it's going to bring
00:22 - you to a platform called Acorn now I've
00:24 - teamed up with them for this video this
00:25 - is a completely free platform you can
00:28 - sign in with your GitHub account and
00:29 - what will happen is it will actually
00:30 - start running an instance of this API
00:33 - once it's finished running you can click
00:35 - on this button right here and it will
00:36 - bring you to a deployed public version
00:38 - of it where you can actually test it out
00:40 - so you can go to slash blog post and
00:43 - this will be your own instance of the
00:45 - API you can mess around with it you can
00:46 - do whatever you want and you can test it
00:48 - out so I'm going to show you exactly how
00:50 - we do that so once the video is finished
00:52 - you can deploy the API that we made you
00:54 - can share it with people and you can use
00:55 - it from the internet not just from Local
00:58 - Host with that said let's get into the
01:00 - video so to begin we need to do a little
01:01 - bit of setup here and install the
01:03 - necessary packages at this point I'm
01:05 - going to assume that you have python
01:06 - installed on your system and what you'll
01:08 - do next is open up an editor something
01:10 - like vs code and simply open a folder in
01:13 - this case I've opened a folder called
01:15 - API it's important that we are working
01:16 - inside of a folder and that our terminal
01:18 - is in that location for the commands
01:20 - that I'm going to show you to run now
01:22 - what we'll do is we'll create a new file
01:24 - where we'll specify the requirements
01:26 - that we need for this project so we're
01:28 - going to say requirements. TX XT and
01:30 - inside of here we're going to write out
01:31 - Django Django rest framework and then we
01:35 - also want environs like that okay so
01:38 - these are the three packages that we're
01:39 - going to need to install in order for us
01:41 - to work with d Jango now that we have
01:43 - these in the requirements.txt file what
01:46 - we'll do is install them using the PIP
01:48 - command so from our terminal here in the
01:50 - same directory where we have our
01:52 - requirements.txt file we're going to
01:54 - type pip 3 install hyphen R
01:56 - requirements.txt this will simply
01:59 - install all of the the packages that are
02:00 - inside of this file now if you're on
02:02 - Windows you're going to change this
02:03 - command to Simply Be pip if you're on
02:05 - Mac or Linux it'll be pip 3 so we're
02:08 - going to go ahead and hit enter and it
02:09 - should install all of these for us once
02:12 - that's installed we have most of the
02:13 - basic setup done and now what we need to
02:15 - do is create a new D Jango project so
02:17 - now that we have our dependencies
02:19 - installed we're going to use a command
02:20 - to create a new D Jango project now to
02:23 - do that we're going to type
02:25 - django-admin start project and then
02:27 - we're going to call this my site you can
02:29 - call it whatever you want but I
02:30 - recommend you go with the name my site
02:32 - now for some of you this command will
02:34 - work for others it will not in my case
02:36 - this command does not work so the way
02:38 - that I fix this is I'm going to remove
02:40 - the admin and I'm going to type Python
02:43 - 3-m and then Django start project my
02:46 - site so if you're on Mac it's going to
02:48 - be Python 3 if you're on Windows it's
02:50 - simply going to be python okay so go
02:52 - ahead and run that and we should see
02:54 - that we get a new directory being
02:55 - created here called my site this is
02:58 - where we'll write our API and where
02:59 - we'll run the next commands so we're
03:01 - going to change directories into my site
03:04 - so now notice I'm inside of this
03:06 - directory in my terminal from here we're
03:08 - going to create a new app now inside of
03:10 - our projects we have various apps apps
03:12 - are ways to separate out different
03:14 - pieces of logic in this case we're going
03:16 - to have a simple app this will be for
03:18 - the API so we always need at least one
03:21 - app so we're going to create one called
03:22 - API to do that we're going to type
03:25 - Python 3 manage.py notice that's the
03:28 - file that's right here and then we're
03:29 - going to say start app and we're going
03:31 - to give this a name I'm going to go with
03:33 - API and I recommend you give it the same
03:35 - name go ahead and hit enter and you'll
03:38 - see a new directory is created here
03:39 - called API now what we need to do is we
03:42 - need to connect this app with our main
03:45 - python project or our Django project
03:47 - sorry and the way we do that is we go
03:49 - into my site directory we go into
03:52 - settings.py let's make this a little bit
03:54 - easier to see and we go into where we
03:56 - see installed apps here and we add our
03:59 - application into the installed apps to
04:01 - do that we simply add a string and we
04:03 - give it the same name as the project
04:06 - name or the app name sorry which is API
04:08 - so notice we created a new app called
04:10 - API and I've added that here to the
04:11 - installed apps now as well as that we're
04:14 - going to add the D Jango rest framework
04:16 - in here because this is something we'll
04:17 - use to have some nice clean views for
04:20 - our API so we're going to say
04:22 - restore framework inside of the
04:25 - installed apps and for now that's all we
04:26 - need to change inside of settings.py now
04:29 - we have linked our API with our project
04:32 - what we want to do is start building out
04:33 - the model or the data that our API is
04:36 - going to interact with now you can
04:37 - obviously have multiple data sources in
04:39 - this case multiple models we're going to
04:41 - start with a single model what we're
04:43 - going to do is open the API folder
04:45 - inside of the API folder we see that we
04:47 - have a file called models.py now this is
04:50 - where we Define the different database
04:51 - models now D Jango uses something known
04:53 - as an OM now an omm is an object
04:56 - relational mapping and what this does is
04:58 - it Maps a pip python object to a
05:01 - database instance this is really nice
05:03 - because it allows us to use multiple
05:05 - types of databases and have D Jango
05:07 - handle all of the low-level commands
05:09 - that actually create update and retrieve
05:12 - data and in our case we can use a higher
05:14 - level python wrapper which is known as
05:16 - the omm to access our data create our
05:18 - data Etc you'll see how easy Django
05:21 - makes it using the Django rest framework
05:23 - in just a second but bear with me while
05:25 - we create our first database model so
05:27 - we're going to create a class here this
05:29 - is how you do it in Jango and we're
05:30 - going to say that this is blog post now
05:33 - this needs to inherit from the models.
05:35 - model when we do that we get all of the
05:37 - basic functionality of a database model
05:39 - which in this case is really equivalent
05:41 - to a table in something like a SQL
05:43 - database now what we need to do is
05:45 - Define all of the different columns that
05:47 - we have for our model or the fields or
05:50 - type of information sorry that it will
05:51 - store so we're going to begin with a
05:53 - title and we're going to say that this
05:54 - is the models. charfield and inside of
05:58 - the charfield we can specify a parameter
06:00 - which is the maximum length equal to
06:02 - something like 100 next we're going to
06:04 - specify that for each of our blog posts
06:06 - we'll have some content this will be a
06:09 - models. text field keep in mind you can
06:12 - make this anything you want but I'm just
06:13 - going with some basic Fields here and
06:15 - then we're going to have a published
06:16 - unor date and this is going to be equal
06:18 - to the models. DAT time field and we're
06:21 - going to add a parameter here called
06:23 - Auto add now which is equal to True
06:27 - which specifies that we don't need to
06:29 - set what the time and date is whenever
06:31 - we create a new instance of this model
06:34 - so we have a new row in our database
06:36 - it's going to automatically kind of fill
06:37 - in the publish date for us next we're
06:40 - simply going to say Define uncore string
06:42 - uncore uncore we're going to take in a
06:44 - self and we're going to return the self.
06:46 - tile of the model just so that if we end
06:48 - up printing out this model we actually
06:49 - see some information about it so that's
06:51 - really it for the model you can get much
06:53 - more complicated here and store a lot of
06:54 - different types of data you can have
06:56 - relationships you can have multiple
06:57 - models but for now we're going to do a a
06:59 - very simple one we're going to focus on
07:01 - the API views and then later on you can
07:03 - adjust the models and you can create
07:04 - multiple views for making different
07:06 - types of models now that we have our
07:08 - model we need to create something known
07:10 - as a serializer so I'm going to make a
07:12 - new file here and it's going to be
07:13 - called serializers do PI now inside of
07:17 - here what we're going to do is specify a
07:19 - class that will take this model and
07:22 - convert it into Json compatible data if
07:24 - you're unfamiliar with Json this is
07:26 - Javascript object notation and whenever
07:28 - we work with an API we're essentially
07:30 - sending and receiving Json data it looks
07:33 - something very similar to a python
07:34 - dictionary but the idea is that we're
07:36 - going to have all of these python
07:38 - objects that we'll be working with in
07:40 - our code and these represent information
07:42 - in our database we want to create what's
07:44 - known as a serializer that will take an
07:46 - instance of this python object and
07:48 - convert it into something that we can
07:50 - actually return and interact with from
07:52 - our API so it might seem a little bit
07:55 - abstract right now but bear with me it
07:56 - will make sense so we're going to say
07:58 - from the rest frame workk import the
08:00 - serializer where they going to say from
08:03 - do models
08:05 - import the blog post like so now we're
08:08 - going to go and create a class and we're
08:10 - going to call this the blog post
08:12 - serializer and this is going to inherit
08:14 - from the serializers doth model
08:17 - serializer so a lot of this is already
08:19 - done for us we just need to kind of hook
08:21 - up the different models now we're going
08:23 - to create something known as a meta
08:24 - class so we're going to say class meta
08:26 - and we're going to say the model is
08:28 - equal to the blog post and we're going
08:30 - to specify the fields that we would like
08:32 - to serialize and return when we use the
08:35 - serializer now the fields are going to
08:37 - be ID
08:39 - title content and the published date now
08:43 - you don't have to do all of these but if
08:45 - you don't include one of them it's not
08:47 - actually going to be returned uh in the
08:49 - API okay so you need to make sure that
08:51 - any field you want to be returned from
08:52 - your API you specify in here ID is a
08:55 - field that will automatically be added
08:56 - to all of our models we don't need to
08:58 - specify that when we create the model
09:01 - okay so we now have our serializer and
09:03 - we have our model the next step is to
09:05 - create a view that actually utilizes the
09:07 - model and the serializer so we're going
09:09 - to go inside of views.py and we're going
09:11 - to use some D Jango rest framework views
09:13 - now the really nice thing about the
09:14 - Jango rest framework is that it provides
09:16 - some default views for creating updating
09:19 - deleting Etc and doing the standard
09:21 - operations that you would with a rest
09:23 - API hence why we installed the Django
09:25 - rest framework so what we're going to do
09:27 - here is import a few things from Jango
09:29 - rest framework they give us something
09:31 - known as a generic View and that's that
09:33 - nice view that you saw when I gave you
09:35 - that original demo at the beginning of
09:37 - the tutorial so we're going to say from
09:39 - the rest framework import generics like
09:43 - so now generics contains generic views
09:47 - that can be used to update delete Etc
09:49 - any type of model so what we're going to
09:51 - do is create a simple view for now and
09:53 - we're going to say class blog post list
09:57 - create is equal to the
09:59 - generics do list create API View and
10:03 - then inside of here we just need to
10:05 - specify a few basic things the first
10:07 - thing we need to do is specify the query
10:09 - set now the query set is going to be
10:11 - equal to blog post which we're going to
10:13 - import in a second dot objects. all that
10:17 - means we now need to import blog post so
10:19 - we're going to say from
10:21 - doels import the blog post now what
10:24 - we're doing here is we're just getting
10:25 - all of the different blog post objects
10:27 - that exist this is how you do it using
10:30 - the omm in Django the object relational
10:32 - mapping if you want to get all of them
10:34 - you simply say the name of the model
10:36 - which is what we specified here doobs
10:38 - doall gives you all of the instances of
10:40 - our blog post now that is our query set
10:43 - and then beneath this we specify the
10:45 - serializer that we want to use when
10:47 - we're actually returning this data so
10:49 - we're going to say
10:51 - serializer class is equal to and then
10:54 - this is going to be the blog post
10:57 - serializer which we also need to import
10:59 - so we're going to say from dos
11:01 - serializers import the blog post
11:03 - serializer now that's actually it we've
11:06 - just created a view we now need to
11:08 - connect it with a URL what this view
11:10 - will provide is a way for us to create a
11:12 - new blog post and to get all of the blog
11:15 - post that exist you can extend this and
11:17 - you can make it more complicated but
11:18 - right now just with what we have once we
11:21 - add a URL for it it will automatically
11:23 - allow us to create and then return all
11:25 - of the different blog post objects
11:27 - that's what this generic AP I view does
11:29 - there are a ton of other generic API
11:31 - views you can look them up from the
11:33 - documentation and I'll show you one more
11:35 - after this now that we have the view
11:37 - though what we need to do is specify a
11:39 - root or a URL that allows us to access
11:41 - the view to do that we need to make a
11:43 - new file so we're going to make a file
11:45 - inside of our API app called urls.py now
11:48 - there's a two-step kind of routing
11:50 - system here what will happen is inside
11:53 - of my site in the urls.py file so I know
11:56 - it's a little bit difficult to see let's
11:58 - close that if you go into my site and
12:00 - urls.py you can see that we actually
12:02 - have the ability to forward URLs to
12:05 - different apps the way this works is we
12:08 - will always start by looking in this
12:10 - file and we'll look for a specific
12:12 - pattern and then we'll take the
12:14 - remainder after that pattern and forward
12:16 - it over to a different app in this case
12:19 - if we go to admin so we go to the URL of
12:21 - our server and then admin it's going to
12:23 - take whatever comes after the slash here
12:26 - and it's going to forward it over to the
12:27 - admin. site URLs to parse the rest of
12:30 - the request in our case what we want to
12:33 - do is we want to take any URL so
12:35 - anything that they type in and we want
12:37 - to forward that over to our API app the
12:40 - reason why we have this file here is you
12:41 - might have different apps and they may
12:43 - all have different prefixes and then
12:45 - have similar types of URLs you'll see
12:47 - what I mean in a second but for now we
12:48 - can actually remove the import from
12:50 - admin because we don't need that and we
12:52 - can change what's here to say path and
12:55 - just be an empty path and then we're
12:56 - going to write a function called include
12:58 - include and we're going to include the
13:00 - api. URLs and we're going to import the
13:04 - include function now what we're saying
13:06 - here is whenever we receive any type of
13:09 - URL it doesn't matter what it starts
13:11 - with what it ends with doesn't matter
13:13 - we're going to take it and we're simply
13:14 - going to pass it over to the api. URLs
13:18 - file where it will then be parsed from
13:20 - there keep in mind that if you wanted to
13:22 - you could do something like API slash
13:24 - and now if we want to access a URL that
13:26 - we write inside of our API app to get
13:28 - get there we would do something like the
13:31 - server URL slash API slash and then
13:34 - whatever the root is for our different
13:36 - views again I know it's a little bit
13:38 - confusing but you'll see what I mean
13:39 - when we write the URLs in our API so now
13:42 - we have the URLs being forwarded over to
13:44 - that app so let's just make this an
13:45 - empty string again let's go over to
13:47 - urls.py now and let's write these
13:49 - different URLs and connect them with the
13:51 - views that we just made the view is the
13:53 - root it's what's going to be rendered
13:55 - onto the screen or what will return data
13:57 - and the URL is how we get there so we're
13:59 - going to say from Django do URLs import
14:03 - path and we're going to say from dot
14:06 - import views the dot just means the
14:09 - current directory or the current package
14:11 - in this case so we're going to do that
14:13 - and import the views file where we will
14:15 - then be able to access the view that we
14:16 - wrote we're then simply going to say the
14:18 - URL patterns is equal to an array and
14:22 - inside of here we're going to make a new
14:23 - path and the path we're going to have is
14:25 - blog posts and then slash and make sure
14:28 - you have this trailing slash now what
14:30 - we're going to do is we're going to say
14:33 - views. the blog poost list create. asore
14:38 - View and we're simply going to give this
14:40 - a name and we're going to say this is
14:42 - the blog post view create view now I
14:47 - know it's a little bit long but let's
14:49 - zoom out here so you can read all of it
14:50 - what we're doing importing the path from
14:53 - the D Jango URLs we are importing the
14:55 - views and then what we're using is
14:56 - something known as a class-based view
14:59 - that's what we've created here this is a
15:00 - generic View and the way that we render
15:02 - it is we say views dot whatever the name
15:05 - of the class is do as view this pretty
15:07 - much means anytime we go to the blog
15:10 - post route here we're going to be
15:11 - brought to this page where we can then
15:13 - interact with the API now keep in mind
15:16 - we're going to do this from the browser
15:17 - but you can do this from postmen you can
15:20 - do this from a different server you
15:21 - don't have to do this graphically it's
15:23 - just nice to be able to view it
15:24 - graphically as we go through the
15:25 - tutorial so we were actually just about
15:27 - to run the server but before we do that
15:29 - there's actually one step that we need
15:31 - to do which is migrating our database
15:34 - now we'll talk about that step but first
15:35 - of all i' just like you to go into the
15:36 - models.py file and notice that we have
15:39 - this Auto add now it actually needs to
15:42 - be Auto now add I just had or I just
15:45 - found that story while I was looking at
15:46 - it so let's just fix that small mistake
15:47 - there that I had inside of the published
15:49 - date now what we're going to do is we're
15:51 - going to bring up the terminal and we're
15:53 - going to apply a database migration now
15:55 - anytime you create a new model or you
15:57 - make any changes to your models what
15:59 - you'll do is you'll make a new migration
16:01 - and you'll apply it and what that's
16:02 - going to do is use the D Jango om to
16:05 - automatically create the correct SQL
16:08 - tables or do whatever it needs to do
16:09 - essentially in the database for this to
16:11 - work properly so the way we do that is
16:13 - we make sure we're inside of our mysite
16:15 - directory and we type Python 3 manage.py
16:19 - and then we're going to say make
16:22 - migrations now make migrations is going
16:24 - to create the files that will specify
16:26 - what migrations need to be applied and
16:28 - this case you can see we're going to
16:29 - create a model blog post now we need to
16:32 - actually apply the migrations and to
16:34 - apply the migrations we simply type the
16:36 - command migrate so Python 3 manage.py
16:39 - make migrations wait for that to finish
16:41 - then Python 3 manage.py migrate when we
16:44 - do that we'll see that this is actually
16:46 - applied and we've now created the tables
16:48 - in our SQL database which is called db.
16:51 - SQL light 3 now we can clear and we can
16:54 - type the command Python manage.py and
16:57 - then run server and when we do that it
16:59 - will start running our python API so
17:01 - let's go ahead and do that we shouldn't
17:03 - get any errors here again make sure you
17:05 - fix this so it says Auto now add and you
17:08 - will see that we have this URL which is
17:10 - where our API is being ran so what we
17:12 - can do now is simply go to this in our
17:13 - browser so I'm going to control click it
17:16 - it's going to show me an error right
17:17 - away don't freak out the reason for this
17:19 - is because we need to go to the blog
17:21 - post URL so we're going to go slash blog
17:24 - post and we when we do that we'll see
17:26 - our API view now inside of here we can
17:29 - create a new blog post to do that we can
17:31 - do something like title and then test
17:34 - content and we can click on post and now
17:37 - you'll see a new blog post is created we
17:39 - have the option to call get when we call
17:41 - get it gives us an array that contains
17:43 - all of these now in this case we get a
17:45 - nice graphical view showing us how the
17:47 - API works but of course you can use this
17:48 - from something like Postman curl the
17:50 - command line doesn't matter you just
17:52 - need to call the API correctly with the
17:54 - correct headers and the correct field
17:55 - names in this case the field names will
17:57 - be title and and content those are the
17:59 - two required ones to create a new blog
18:01 - post okay so that is that route but I
18:04 - now want to shut down the server and I
18:06 - want to show you how we create some
18:07 - other roots that allow us to do some
18:09 - more specific things so first of all
18:11 - let's go into the views.py file and I
18:13 - want to mention that you may have
18:14 - noticed we didn't actually have the
18:16 - ability to delete any of the blog posts
18:18 - that we had now we can make it so that
18:20 - we can delete all of the blog posts in a
18:22 - single rout the way we can do that is by
18:25 - adding a root here to this API view
18:27 - because we can actually override the de
18:29 - default view sorry or we can actually
18:32 - create a new route that allows us to
18:35 - delete individual blog post so let's do
18:37 - that first and then I'll show you the
18:38 - override what I'm going to do is create
18:40 - a new class here and this is going to be
18:42 - the blog post and then the retrieve if I
18:46 - spelled that correctly
18:48 - update and Destroy view now inside of
18:53 - here this is going to be generics Dot
18:55 - and this is the retrieve destroy API
18:57 - view or actually sorry retrieve update
19:00 - destroy API view I know it's a little
19:02 - bit long so let's make this a bit easier
19:05 - to see and inside of here we're going to
19:07 - specify the same thing that we did
19:08 - before so we're going to copy the query
19:10 - set and the serializer class we're going
19:13 - to paste that inside of here and we're
19:15 - going to have the lookup field be equal
19:18 - to PK which stands for primary key which
19:21 - in this case is going to be the ID of
19:23 - our uh blog post now all this is doing
19:26 - is giving us another generic View this
19:28 - will allow us to access an individual um
19:31 - post and then we can update that post
19:33 - and delete that post so that's it for
19:35 - the view now what we'll do is we'll go
19:37 - over to our URLs and we'll make a URL to
19:39 - map to that view hopefully you're kind
19:41 - of getting the process by now so we're
19:43 - going to put a comma here we're going to
19:44 - make a new path and this path is going
19:46 - to be blog post slash and then in this
19:49 - case we're actually going to take a path
19:51 - parameter to do that we're going to say
19:53 - int colon and then this is going to be
19:55 - PK which stands for primary key we're
19:58 - going to have another slash then we're
20:01 - going to say
20:02 - views. the blog post and this is the
20:05 - retrieve update destroy View and we're
20:08 - going to say asore view like that and
20:11 - then we're going to give this a name and
20:13 - we can just say update I'm just giving
20:15 - it a short name for now because I don't
20:16 - want to write out the whole thing okay
20:18 - so what we've done here is specified hey
20:20 - we're going to have the same route with
20:21 - blog post but this time if you pass as a
20:24 - part of that path the ID of the object
20:26 - you want to retrieve what you can do is
20:29 - you can update delete it retrieve it
20:31 - that's it so now what we'll do is we'll
20:34 - go here and rerun our server we'll open
20:37 - it up again so let me bring it over here
20:39 - and if I go over to slash1 uh sorry
20:42 - slash blogpost SL one we'll see that we
20:47 - access the blog post with id1 which is
20:50 - the following one here so I could say
20:51 - test content update this and then put
20:56 - and then if I want I can delete this by
20:57 - click clicking on the delete button and
20:59 - now if we go back and we view all of the
21:01 - blog posts you'll see that we don't have
21:02 - any because we deleted them okay so
21:05 - that's almost all that I wanted to show
21:07 - you last thing I will quickly run you
21:09 - through run you through here sorry
21:11 - before we get into the deployment is how
21:12 - we override some of our views so if we
21:15 - go to views.py you'll notice that inside
21:17 - of here what we can actually do is
21:19 - override any HTTP method if we wanted to
21:22 - make this slightly more custom so in
21:24 - this case we're just using the generic
21:25 - views from Django because they're quite
21:27 - good and they're quite useful however we
21:29 - can override them so what I could do is
21:31 - I could say Define delete inside of here
21:35 - now for delete I need to take in self
21:38 - request star args and star star quars
21:41 - like that I then will say blogpost
21:46 - doobs doall and then I can say something
21:50 - like delete and then I can return a
21:53 - response which we're going to have to
21:54 - import in a second and we're going to
21:56 - say the status is equal to status.
21:58 - httpcore 204
22:02 - noore
22:03 - content like that and now what we'll do
22:06 - is simply import from the rest framework
22:10 - uh actually yes from the rest framework
22:12 - we'll import status and then we'll say
22:14 - from the rest
22:17 - framework dot
22:19 - response import response and now what
22:23 - we've done is we've just ridden our own
22:25 - route and what this will do is add a
22:27 - delete route now to this API View and
22:30 - what will happen is it will just delete
22:31 - all of the different blog posts that
22:33 - exist and then return a response which
22:34 - is HTTP to a for no content which is
22:37 - what we're supposed to return when we
22:39 - delete something so just to quickly show
22:41 - that to you so you can see how easy this
22:42 - is and how it works now if I load up my
22:45 - server and I go to the page slash blog
22:49 - post okay you'll see that now a delete
22:53 - button exists and if we click that
22:54 - delete button it will actually just
22:56 - delete all of the blog posts that we
22:57 - have because that's the custom logic
22:59 - that we wrote here we just deleted all
23:01 - of the blog posts so to wrap up writing
23:03 - our views I'll show you creating a
23:05 - custom API view because this can be
23:07 - somewhat useful so I'm going to say from
23:09 - the rest framework. viws import the API
23:13 - View and I'm just going to paste in a
23:15 - view here that you can reference if you
23:17 - want to do this so let's say we want to
23:18 - make our own Roots where we don't want
23:20 - to use the generic ones well what we can
23:22 - do is inherit from the general API View
23:25 - and then what we can do is write
23:26 - different methods BAS Bas on the name of
23:28 - the method we want to implement so in
23:30 - this case get but we could write post
23:32 - delete put patch Etc and they'll
23:34 - automatically be added for us to
23:36 - whatever the root is that we write now
23:39 - in this case this is simulating getting
23:41 - all of the blog posts that have a
23:42 - matching title so what I've done is I've
23:44 - said okay well maybe I'm going to have a
23:45 - query parameter here called title what
23:48 - I'll do is check if the title exists if
23:50 - it does and I want to find any of the
23:52 - blog post that have that information
23:53 - contained in their title then if I don't
23:56 - have a title I'll get all of the blog
23:58 - posts I'll manually serialize them by
24:00 - using the blog post serializer which I
24:02 - can do using this and then I'll return a
24:05 - response that contains the data provided
24:08 - from the serializer with a status of
24:10 - HTTP 200 now if I wanted to connect this
24:14 - with the URLs same thing I would just
24:16 - have whatever the name of this is do as
24:18 - View and then that'd be it I just simply
24:21 - have written a simple API view here that
24:23 - allows me to query based on the name of
24:26 - a object all right so that's going to
24:27 - wrap up the coding phase of this video
24:29 - the next thing that I want to show you
24:31 - how to do is actually deploy this API so
24:33 - you can share it with other people and
24:35 - you can get it running on a public
24:36 - endpoint because currently we have this
24:38 - simply running on local host on our Port
24:41 - 8000 but instead we might want to run
24:43 - this on a public URL so it's a bit more
24:45 - flexible other people can use it and we
24:47 - can actually test it in a production
24:49 - environment so to do that bear with me
24:51 - I'm going to run you through the steps
24:53 - now for the deployment here we're going
24:54 - to use something known as acorn acorn is
24:57 - free you do not need to pay to use it
24:58 - and I have teamed up with them for this
25:00 - video now what Acorn allows us to do is
25:03 - create something known as an acorn file
25:05 - now this Acorn file will specify our
25:07 - entire application and pretty much
25:09 - describe how it should be deployed we
25:12 - can then use this Acorn file to build an
25:14 - acorn image somewhat similar to
25:16 - something like a Docker image we can
25:18 - then publish that image and we can use
25:20 - it to deploy as many instances of our
25:22 - application as we like now this is great
25:24 - because it allows us to actually deploy
25:26 - this out quite quickly but it also
25:28 - allows us to share our application with
25:30 - other people by giving them the acorn
25:32 - image you're going to see what I mean
25:33 - and I made an entire video about this if
25:35 - you want some more details so I'll link
25:37 - that here by putting it on the screen
25:38 - and leaving a link to it in the
25:40 - description now the first thing we need
25:41 - to do here is actually create a Docker
25:44 - file which specifies how we run our
25:46 - application and then the acorn file will
25:49 - specify all of the services and the
25:50 - additional configuration we need when we
25:52 - actually want to deploy this out so
25:54 - we're going to make a new file inside of
25:56 - my site called called Docker file now
25:59 - I'm going to paste in the contents of
26:00 - this file and you can copy it from the
26:02 - links in the description all of this
26:03 - code will be available on GitHub it just
26:05 - doesn't make sense for me to write all
26:07 - of this out because it's fairly long so
26:09 - let's quickly go through what this file
26:11 - actually looks like we start by
26:13 - specifying the Syntax for the docker
26:14 - file we specify the image we want to
26:17 - build this from then we have that we're
26:19 - exposing Port 8000 because that's where
26:21 - our server will be running we specify
26:23 - the working directory we install some
26:25 - system dependencies we copy the
26:27 - requirements.txt file which means we
26:29 - actually need to take this file and we
26:31 - need to put it inside of the my site
26:33 - directory so make sure it's inside of
26:35 - there we then use the PIP command to
26:37 - install all of the requirements we copy
26:40 - all of the contents of this directory we
26:42 - specify the entry point which is using
26:44 - Python 3 and then the command that we
26:46 - want to run to run our server which is
26:48 - Python 3 manage.py run server and then
26:50 - we just specify we want to run it on all
26:52 - the public endpoints so the docker file
26:54 - is pretty straightforward it's just
26:56 - explaining how we actually run the the
26:57 - application now the thing that we're
26:59 - missing though is all of the
27:00 - instructions for deploying the
27:02 - application we know how to run it when
27:04 - we want to deploy an app we need to do
27:06 - things like set up the database we may
27:07 - need to do some database migrations
27:09 - there's some other steps and that's
27:11 - where the acorn file comes in now before
27:13 - I write that Acorn file I'm just going
27:15 - to create a new file inside of my site
27:18 - and this is going to be db-
27:20 - script.sh and this is going to be a
27:22 - simple script that we're going to use
27:24 - whenever we start running our
27:26 - application so that we Mig the database
27:28 - and ensure that everything is set up so
27:29 - I'm just going to paste this in here
27:31 - again you can copy it from the link in
27:32 - the description we're running the Python
27:34 - 3 manage.py make migrations and then
27:37 - we're migrating just so that if we make
27:38 - any changes to the database that'll
27:40 - automatically be applied and when we do
27:42 - a new deployment the database that we're
27:44 - connecting to will have those tables
27:46 - created so this is a script that will
27:48 - run and I'll show you how we'll end up
27:50 - running that okay so now we have our
27:51 - Docker file we have our database script
27:54 - and we're going to go outside of this
27:55 - core directory here and we're going to
27:56 - make a new file file and we're going to
27:58 - call this the acorn file like this now
28:01 - for the acorn file to be a little bit
28:02 - more useful to us we're going to go into
28:04 - the extensions here in vs code and we're
28:06 - going to install the acorn extension it
28:08 - just gives us some syntax highlighting
28:10 - for this Acorn file so go ahead and do
28:12 - that and now I'm going to paste in the
28:14 - acorn file and quickly walk you through
28:16 - it now this can seem a little bit
28:17 - overwhelming but I promise you that if
28:19 - you read through the documentation it's
28:21 - not overly complex and there is all
28:23 - kinds of examples in the acorn docs for
28:25 - creating your own Acorn file this is
28:27 - just one for jeno okay so what are we
28:30 - doing here well inside of the acorn file
28:32 - we're essentially specifying everything
28:34 - we need to be able to deploy this
28:36 - application so we have some Services we
28:38 - have some jobs we have the containers
28:40 - that we need to run and we have the
28:41 - images that we're using so we start with
28:43 - some arguments and the one argument that
28:45 - we need is the Jango database name which
28:47 - is what we'll use when we actually
28:48 - create the database with whatever
28:50 - database server service sorry we choose
28:52 - to use so we're calling this D Jango DB
28:55 - we then have a service we're going to
28:57 - use now for our Django app we need to
28:59 - have a database this database can be
29:01 - many different types it could be postp
29:03 - it could be mongodb in this case we're
29:04 - going to use the Maria DB or Mariah DB
29:07 - whatever you want to call this what we
29:09 - do is just specify that for this
29:10 - database we are going to have the
29:12 - argument of Jango database name which is
29:14 - simply D Jango DB and we're using this
29:17 - image to essentially create a database
29:19 - for us so that's a service that's going
29:21 - to be a part of our deployed application
29:23 - we then have a job now what the job will
29:26 - do is initialize the database for us so
29:28 - we've called this dbit we're going to
29:30 - build images. app. container build which
29:33 - we specify down here so don't worry
29:35 - about that we have an environment inside
29:38 - of the environment we're using some
29:40 - environment variables or we're actually
29:41 - creating environment variables that come
29:43 - from this service so whenever we connect
29:45 - to a database well we need a username
29:47 - password address port and database name
29:50 - so we're just specifying what all of
29:51 - these are as accessible variable names
29:54 - that we can use within our code which
29:55 - we'll actually do in just a second we're
29:57 - consuming the database we have an entry
29:59 - point where we're using this script the
30:00 - bin bash and then the command that we
30:02 - want to run is this what this does is
30:05 - make our database script file executable
30:07 - and then it executes the database script
30:09 - file so we actually go and apply the
30:11 - migrations to our new database that
30:13 - we're connecting to we then have a
30:15 - container this is the container that
30:16 - runs our application the job is what
30:18 - runs beforehand to set everything up
30:21 - then what we do is we build the image
30:23 - that we specified down here which is
30:24 - inside of our Docker file this describes
30:27 - how to run the application we make sure
30:29 - we publish HTTP on Port 8000 we make
30:32 - sure we depend on this job so this job
30:34 - needs to finish before we start running
30:36 - this container and then we consume the
30:38 - database service that we specified up
30:40 - here we have some arguments for being in
30:42 - Dev mode like the directories that we're
30:44 - going to be using and then again we
30:46 - specify the variables that we need in
30:48 - our environment for this application to
30:50 - run properly down here we just specify
30:53 - the containers so where they're located
30:54 - essentially where the docker file is I
30:56 - know it seems seems a bit complicated
30:58 - but trust me if you've ever worked with
30:59 - Docker before or you start doing
31:00 - deployment you'll see how easy this is
31:02 - to actually write out okay so now that
31:04 - we have the acorn file there's a few
31:06 - last adjustments we need to make and
31:07 - then I'm going to show you how we run it
31:09 - so from my site we're going to go into
31:11 - requirements.txt and we're just going to
31:14 - add a package that we need when we start
31:15 - working with a mySQL database we're
31:17 - going to say MySQL clients like this
31:20 - which will allow us to work with the
31:21 - Mariah or Maria DB okay now that we have
31:24 - that what we're going to do is we're
31:25 - going to go into my site we're going to
31:27 - go to settings.py and we're going to
31:29 - make a few adjustments to allow this to
31:31 - actually be deployed because right now
31:33 - this is just for development on our
31:34 - local machine and we just need to adjust
31:36 - a few things so it works in a deployed
31:38 - environment so first of all we're going
31:39 - to go to alloud host and we're just
31:41 - going to add an exclamation or sorry an
31:43 - asterisk here which lets us run this on
31:45 - any host the reason we want that is so
31:47 - that we're able to run this on the acorn
31:50 - host which you're going to see in a
31:51 - second we're now going to make a
31:52 - variable here which is csrf uncore and
31:55 - this is going to be Trust trusted uncore
31:59 - Origins and this is going to store The
32:02 - Trusted Origins for when we submit our
32:04 - forms so we're going to have HTTP colon
32:06 - SL SL then this is going to be
32:08 - asteris uh do
32:10 - on- Acorn like that doio we're then
32:14 - going to copy this and we are going to
32:17 - paste it and just change this to
32:19 - https now we just need this so that when
32:21 - we're submitting the forms from the API
32:23 - site we don't get any csrf issues so
32:25 - we're just allowing all of the corn
32:27 - Origins because that's where we're
32:28 - deploying it to last thing we need to do
32:31 - is we need to import Os from the top
32:33 - here so we can access some environment
32:35 - variables and we're going to change our
32:37 - database configuration here so that we
32:39 - end up using the database that is
32:41 - created for us by the aord file for our
32:44 - deployment so what we'll do is we'll go
32:46 - down to databases and I'm just going to
32:48 - copy this in again you can copy it from
32:50 - the link in the description we're going
32:52 - to change default to be equal to this
32:55 - now what we've done is we've specified
32:56 - that that the engine we want to use is
32:58 - the back ends. MySQL engine this is
33:00 - different than the SQL light 3 engine we
33:02 - were using before we then want to
33:05 - connect to the Maria DB database so we
33:07 - have the name user password host and
33:09 - Port which all come from the environment
33:11 - variables which are specified inside of
33:14 - the acorn file so basic idea is Acorn
33:16 - file will spin up a database for us and
33:18 - then we want to make sure we use the
33:19 - environment variables that allow us to
33:21 - connect to that specific database so
33:24 - that's why we need to modify that inside
33:26 - of our python API or our Jango API okay
33:30 - that's all of the setup required now
33:31 - that we have that finished what we need
33:33 - to do is simply run the acorn file or
33:36 - run the acorn image or build the acorn
33:38 - image whatever you want to call it now
33:39 - in order to do that we first need to
33:41 - install the acorn CLI which is pretty
33:43 - straightforward let me get the command
33:44 - for you all right so I just have this
33:46 - page open which shows you how to install
33:48 - the acorn CLI you can go to docs. aorn
33:50 - doio install we can Brew install this if
33:54 - we're on Mac or Linux which is what I'm
33:55 - going to do so I'm going to copy that
33:56 - command or you can use scoop this is a
33:58 - tool that you need to install on Windows
34:01 - okay so I'm just going to go into my
34:03 - command prompt here and I'm going to
34:05 - paste in this command I already have
34:07 - Acorn installed so this should be fairly
34:09 - fast and for you guys it should install
34:11 - the acorn CLI now we simply run the
34:14 - command Acorn login when we do that it
34:17 - will log us into our Acorn account again
34:18 - you can just use GitHub to do this it's
34:20 - completely free and once we're logged in
34:22 - which I already am what we can do is run
34:25 - our Acorn file now to do do that we're
34:27 - going to CD into the root directory here
34:30 - so notice we have our Acorn file and
34:31 - then we have my site and now what we're
34:33 - going to do is simply type Acorn Dev and
34:36 - then dot now when I do that it's going
34:38 - to start running the acorn image for me
34:40 - and it will actually give us a deployed
34:42 - version of our app and then I'll show
34:43 - you how we can share this so let's hit
34:46 - enter we're going to give this a second
34:47 - to spin up you're going to see that it
34:49 - creates a database for us it gets a
34:51 - public URL it exposes the port just runs
34:53 - through everything which is really
34:55 - really nice and then we can access
34:56 - access the deployed URL which you'll see
34:58 - in a minute all right so you can see now
35:00 - that it actually ends up giving us an
35:01 - end point because this was deployed
35:03 - successfully so I can click on this open
35:05 - it up and now you'll see that we have
35:07 - our API and if I go here to SL blog
35:11 - posts we're able to view the API view
35:14 - but now this time it's on a publicly
35:15 - deployed https URL endpoint which could
35:18 - be quite useful especially in deployment
35:21 - now the way that I ran this is using
35:22 - something known as Dev mode Dev mode
35:24 - will give you some file synchronization
35:26 - and it just really quickly spins this up
35:28 - for you so you can start using it and
35:30 - you don't have to actually go to the
35:31 - acorn website however what I want to
35:33 - show you now is how you would actually
35:34 - share this with someone else so what you
35:37 - can do is simply create an acorn image
35:39 - you can publish that image and then you
35:41 - can just give someone the URL to that
35:43 - image and now they can create the same
35:45 - instance of your application pretty much
35:47 - instantly they can mess around with it
35:49 - they can break it they can change it and
35:50 - it doesn't affect your deployment
35:52 - because every time you deploy the acorn
35:55 - image you get a new deployment which is
35:57 - quite cool so let me show that to you
35:59 - and then we'll explain more about how it
36:00 - works all right so I just shut this down
36:02 - by hitting contrl C and now we're just
36:03 - going to run a command that allows us to
36:06 - actually kind of tag this image and
36:08 - upload it to a registry so other people
36:10 - can use it and you can share it now to
36:12 - do this we first need to log into a
36:14 - registry now the one most of us are
36:15 - familiar with is the docker one so
36:17 - that's what we're going to sign into
36:18 - we're going to say Acorn log and then
36:21 - index. docker.io now I'm already signed
36:23 - in but in your case just sign into to it
36:25 - and this allows you now to have a place
36:27 - where you can publish your different
36:28 - images there's a bunch of other
36:29 - registries as well uh but this is one
36:31 - that I'm sure most of you are probably
36:32 - going to want to use now what we're
36:34 - going to do is simply build the image so
36:36 - we're going to say Acorn build- T which
36:39 - stands for the tag name and then we're
36:40 - going to do the name of the registry
36:42 - which is index. docker.io slash this is
36:45 - going to be your username on the
36:47 - registry in this case mine is Tech with
36:49 - Tim Z and then you're going to give the
36:51 - name to your image so I'm going to say
36:53 - Jango tutorial YouTube like that okay
36:57 - I'm going to go ahead and run that it's
36:58 - going to build an acorn image for us
37:00 - once the acorn image is built we can
37:02 - then push it to the registry and we can
37:04 - really easily share it with other people
37:05 - all right so this has been built now
37:07 - that it's built what I want to do is
37:08 - push this so I'm just going to change
37:10 - the command so that rather than having
37:12 - Acorn build we simply say Acorn push and
37:15 - then it's just the same name of the
37:17 - image we just created when I do that it
37:19 - will push it to the registry and then we
37:21 - can simply take this name and we can
37:23 - create a URL that allows other people to
37:26 - deploy this image really really cool
37:28 - it's just like a Docker image except in
37:30 - this case it specifies the entire
37:32 - deployment of the application which
37:34 - makes it really easy to share and deploy
37:36 - without interfering with your actual
37:38 - code so you can see that this finished
37:40 - so I'm just going to copy the name of
37:41 - what it is that we deployed there or
37:44 - what we pushed sorry and now we can
37:46 - simply go to the acorn website so let me
37:48 - just load this up here so I just simply
37:51 - went to
37:56 - here and what I can do is click on my
37:58 - username I can click on shared acorns
38:01 - and then you can see that it shows me
38:02 - actually all the stats for different
38:03 - acorns that I have shared what I'm going
38:05 - to do is just paste in the image which
38:07 - is this and notice it gives me a link
38:09 - that I can share with people so now I
38:11 - can copy that link this will actually be
38:12 - what's in the description by the way and
38:14 - now you can simply paste that link into
38:17 - your browser when you do that it's going
38:19 - to bring you to the acorn platform it's
38:21 - going to show you the acorn image so we
38:23 - can view the source file of the acorn
38:26 - file we want we can pick where we want
38:28 - to deploy it to so what project or what
38:30 - folder we can just press on deploy and
38:32 - it's going to deploy a new instance for
38:34 - us so this is exactly what you guys will
38:36 - be able to do whatever you just saw
38:38 - pretty much in my terminal is going to
38:40 - happen exactly for you in your own Acorn
38:42 - account and you're going to get a
38:43 - running instance here that allows you to
38:45 - mess around with it now it's worth
38:46 - noting that these are not going to be
38:48 - deployed persistently they are going to
38:50 - be in kind of a container that will die
38:52 - after a few hours you can extend that
38:55 - time and you can still use Acorn to
38:57 - deploy persistently but it's a little
38:58 - bit of a different process and not
39:00 - something that I'm going to get into in
39:01 - this video all right so the acorn is
39:03 - finished provisioning here and you can
39:05 - see that it is running what I can do now
39:07 - is I can simply click on this button and
39:09 - it's going to bring me now to a URL this
39:11 - is different than the one that we have
39:12 - before where this is deployed now same
39:14 - thing I can go to SL blog post I now
39:17 - have a new instance of the API here that
39:19 - I can mess around with and do whatever I
39:21 - want with so there you go that's pretty
39:22 - much it for deploying with Acorn I think
39:25 - this is really cool especially because
39:26 - in a development environment it makes it
39:28 - really easy to share this with other
39:30 - people I now don't need to spin up a
39:32 - virtual private server I don't need to
39:34 - go do all this Linux config I just write
39:36 - a Docker file like I normally would I
39:38 - write an acorn file I now have the
39:40 - entire deployment of the application
39:42 - described I can just send this to my
39:44 - boss I can send this to a coworker and
39:46 - they can spin up their own version they
39:47 - can have it alive for as long as they
39:49 - want they can mess with it they can
39:50 - break it and it doesn't affect me and I
39:52 - don't have to constantly change things
39:54 - around or fix things that they're
39:56 - breaking
39:56 - anyways guys that's going to wrap up
39:58 - this video as a reminder all of this
40:00 - code will be available from the link in
40:01 - the description if you want to deploy
40:03 - your own version of this API you can
40:05 - click the acorn link that I have below
40:07 - and I look forward to seeing you in
40:08 - another
40:10 - [Music]
40:16 - video