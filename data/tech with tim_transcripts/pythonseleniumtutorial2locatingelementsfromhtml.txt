00:02 - [Music]
00:06 - hello everybody and welcome to the
00:08 - second tutorial in the selenium
00:10 - webdriver tutorials series now in this
00:13 - video what we're going to be doing is
00:14 - talking about how to actually access
00:16 - elements on the page so before you saw
00:19 - that we did things like print out the
00:21 - title we can access tech with Tim done
00:23 - net we can quit but that's as far as we
00:25 - went so what I want to show you now
00:26 - actually as an example on my website
00:28 - bring it up here I do have the selenium
00:30 - documentation for our reference so on my
00:33 - website I have a search bar and what I
00:35 - want to do is access this search bar
00:37 - search for something and then actually
00:39 - be able to grab all of the search
00:41 - results and have that in our Python code
00:43 - so that's gonna be our challenge for
00:45 - this video that's gonna teach us a lot
00:47 - about how to access different elements
00:49 - and how to nest inside of kind of
00:51 - different divs and things like that
00:52 - but I need to start by giving you a very
00:54 - brief overview of HTML code and how we
00:57 - access elements in HTML so she let me go
01:00 - back to this so when you're on a website
01:02 - in google chrome at least if you want to
01:05 - look at the HTML or the page source what
01:08 - you can do is click on any element that
01:09 - you'd like to look at right click and
01:11 - hit inspect element here you'll see I
01:14 - have this zoom down on my screen so you
01:15 - can see it better but it shows me the
01:17 - HTML that was used to define that
01:19 - element now this is important because
01:22 - when we access elements we need to
01:24 - access them by a few different
01:25 - properties or one of a few different
01:27 - properties so we have an ID we have a
01:30 - class we have a name we have the tag
01:32 - there's a bunch of different ways to
01:34 - access the elements but the most common
01:36 - ways are gonna be ID name and class name
01:38 - now if you look here we can see that the
01:41 - input here has a class it has a name but
01:45 - it does not have an ID so that means we
01:48 - need to find some way to access this
01:49 - input tag by using what's defined inside
01:52 - of here so most likely we'll use a name
01:54 - but kind of the general hierarchy and
01:56 - what we want to use is ID first because
01:58 - an ID in HTML is guaranteed to be unique
02:01 - then secondly if there is no ID we
02:04 - probably can go with something like name
02:05 - name is not necessarily unique but it
02:07 - usually is on the page then in worse
02:10 - situation we can
02:12 - you something like class now class name
02:14 - is okay to search by but the issue with
02:16 - it is when we search for elements using
02:19 - slam it returns to us the first element
02:22 - that it finds on the page so a class is
02:25 - not necessarily going to be unique so
02:27 - what that means I could write search
02:29 - field for something else on the page and
02:31 - if that element was above the element I
02:34 - was looking for then when I search for
02:36 - it it's gonna return the one above not
02:37 - this one because it returns the first
02:39 - one it finds now there's all different
02:41 - ways to get around this we can find all
02:43 - the elements on a page and then kind of
02:45 - go through them we can search for the
02:47 - specific HTML like the actual string
02:49 - representation that's right here but
02:51 - I'll show you a few different ways just
02:53 - keep that in mind
02:53 - ID class name when you're looking for an
02:56 - element try to search by ID if you can't
02:58 - do it by ID do it by name then class and
03:00 - there's some other ways as well so what
03:02 - I'm gonna do right now is since input
03:05 - has a name and it doesn't have an ID I'm
03:07 - gonna steal that name which is just s
03:08 - and I'm gonna show you how we can search
03:10 - for that name so in here I'm gonna say
03:12 - search and this is just a variable that
03:15 - represents what it is I'm gonna be
03:17 - storing here what I found is gonna be
03:19 - driver find element by name so notice
03:23 - here it's showing me all the different
03:24 - ways I can search for things so by link
03:26 - text by partial text by CSS selector by
03:29 - class name by link text there's a whole
03:31 - bunch we're gonna use by name and then
03:34 - here we're gonna put s now what this
03:36 - will do is simply return to us an object
03:39 - that represents that search bar that we
03:41 - can now actually interact with and mess
03:44 - around with now notice at the top of my
03:46 - program I've included this new import
03:48 - which is from a selenium webdriver
03:50 - common keys import keys now I meant to
03:54 - type this out with you but not a huge
03:55 - deal I'm assuming you guys can figure
03:57 - that out for yourself what this is gonna
03:58 - do is actually give us access to things
04:01 - like the Enter key the escape key so
04:03 - that we can type something in this
04:05 - search bar and then hit enter and be
04:07 - able to see all the search results so
04:09 - what I'm gonna do now is actually show
04:11 - you how we can send text to a box like
04:13 - this so this search box is just an input
04:15 - field is gonna be very similar when we
04:17 - work with forms and later videos what we
04:20 - can do is say search send underscore
04:22 - keys like that and then inside here just
04:24 - put what
04:25 - it is that we want to type in the search
04:26 - box in this case I want to search for
04:28 - tests that'll be the test or the string
04:31 - we want to search for so I'll put that
04:32 - in there and then after we search for
04:35 - tests we want to hit enter so that it
04:38 - actually brings us to the search results
04:40 - for that page so we'll say search dot
04:43 - send keys and now we're gonna say keys
04:45 - which I imported up here don't return
04:49 - now commonly reach enter is referred to
04:51 - as return I think the actual name of the
04:53 - key is return but most people just call
04:56 - it enter but anyways that's the idea so
04:58 - now we found s which is that search box
05:00 - we typed in tests and that we hit enter
05:03 - so we can run this now and see what
05:05 - happens but first I imported time as
05:07 - well notice that so I'm gonna just sleep
05:10 - so we can actually see what's happening
05:11 - so it's time to sleep five seconds this
05:14 - just delays the program by five seconds
05:16 - so that it doesn't quit immediately so
05:18 - we can actually see what those search
05:19 - results are so let's run this give it a
05:22 - second to boot up here my website is
05:24 - fairly slow so some of this will take a
05:26 - second and there we go search results
05:28 - for test wait our five seconds and we'll
05:30 - notice that it closes there we go all
05:33 - right so that is how that works we
05:35 - accessed s we sent the key test we hit
05:39 - enter and then it searched for test so
05:41 - now that we've done that what I want to
05:43 - do is actually bring in the search
05:45 - results into here and be able to access
05:47 - all those and list out the titles so
05:49 - we'll start by showing you a way to
05:52 - actually access the entire HTML page so
05:54 - once we go to a specific page what I can
05:57 - actually do is print out the page source
05:59 - so I can do something like print in this
06:02 - case driver dot page source excuse me
06:07 - now this isn't gonna be that useful but
06:09 - I just want to show you what this looks
06:10 - like so you get an idea that we can
06:11 - scrape and access the entire website so
06:15 - wait for that to run here give it a
06:17 - second and notice it brings this big
06:19 - blob of text here but this is the entire
06:21 - source code for the page you can see all
06:24 - of it popping up here so that's the idea
06:26 - behind this we have the entire source
06:28 - code so if we have that we can access
06:30 - anything from there that we want so
06:32 - let's get rid of that now I just want to
06:35 - show you that was a feature and now what
06:37 - I'm gonna do is actually go to my
06:38 - website hee
06:39 - I'm gonna go to the search bar type in
06:42 - test and just see where it brings us
06:44 - because I want to start inspecting the
06:45 - page and see how I can actually access
06:47 - all of these different things here so
06:50 - notice that it has the dates you know
06:52 - HTTP methods this a little bit messed up
06:54 - like some of the spacing is off but what
06:56 - I want to actually do is be able to so
07:00 - for some reason this is all glitched I
07:02 - think there's like a title in here yeah
07:05 - there should be where can I get it here
07:07 - I think there's like a hidden title here
07:10 - that's just showing up in white text
07:12 - like that's the reason I can't read it
07:13 - because my cursor keeps hovering over
07:15 - top of it so I want to print all of
07:17 - those out or at least print out like all
07:19 - of the different search results that are
07:20 - here now of course I can't do all of
07:22 - them because they're not all on this
07:24 - page I would have to go over to page two
07:25 - to get the rest of them but you get the
07:28 - point I just want to find all these
07:29 - search results so to do that I'm gonna
07:32 - hit inspect I'm gonna have a look at how
07:34 - these are formatted so that I can figure
07:36 - out how I want to start looking through
07:38 - the tags to get all these different
07:40 - things so I noticed that right away all
07:43 - of the search results are inside of this
07:45 - main tab so they're inside a main like
07:47 - that so I'm gonna start start by
07:49 - searching for main I want to find all
07:51 - the stuff that's inside a main first and
07:53 - then from there I can start looking at
07:54 - all these articles which seem to be the
07:57 - individual results in the search tab and
07:59 - we can see that there is what like a few
08:02 - of them here so let's try that
08:04 - let's go ID main let's search for that
08:07 - inside of selenium so we're gonna say
08:09 - after well we don't need to sleep
08:12 - immediately we'll just say main equals
08:15 - in this case I guess give me driver dot
08:18 - find element by name or not name ID and
08:23 - that's gonna be main and now that we
08:25 - have main let me just show you that I
08:27 - can actually print out all of the text
08:29 - inside of main just by doing that
08:32 - so we'll print main dot text just we can
08:35 - look at what that is and to ensure that
08:37 - we're gonna have enough time to actually
08:38 - hit the next page before we run into
08:41 - main I'm gonna show you a way that we
08:44 - can actually make selenium wait because
08:46 - what's gonna happen right now and I'll
08:48 - show you is uh once we
08:50 - run this this test right so we run tests
08:53 - we hit enter it takes a few second
08:55 - seconds before it actually redirects us
08:57 - to the page so we could potentially run
09:00 - into an issue where we start trying to
09:01 - look for this ID main before we've
09:04 - actually hit the next page because it's
09:06 - just directly after and that's gonna run
09:08 - into an error for us we're gonna have an
09:09 - exception right so to fix that there's
09:12 - actually a way in selenium that we can
09:14 - wait for a specific thing to exist on
09:16 - the page before we start looking for it
09:18 - so that is actually where I have the
09:20 - documentation up here we can see that I
09:22 - mean you guys can read it if you want
09:24 - explicit weights what we can do is say
09:27 - try element dot web driver weight driver
09:30 - ten dot until EC presence of element
09:33 - located by ID this so what this is
09:35 - essentially saying is we're gonna wait
09:37 - until the presence of this element is
09:39 - located on the page before we decide to
09:42 - move on to the next part of the script
09:44 - so I'm gonna do that I'm gonna copy this
09:46 - in here we're gonna have to copy some of
09:47 - the imports as well and I'll put that
09:49 - like that and instead of having element
09:52 - equals all this we're gonna say main and
09:55 - then instead of this we're gonna say
09:59 - main now of course I need to take some
10:02 - of those imports so the import was all
10:05 - of three of these so from selenium
10:07 - webdriver comment by import by support
10:10 - you I import webdriver wait support
10:13 - import expected conditions as EC okay so
10:16 - let's import that at the top here again
10:19 - you can find this from the selenium
10:21 - documentation or you can just type it
10:22 - out it's nice and big here you guys
10:23 - should be able to read that and now that
10:26 - we have that this should actually work
10:28 - fine so it's gonna load main I can get
10:30 - rid of this now and then after it loads
10:33 - main I can print main dot text like that
10:35 - okay so let's go ahead and run this
10:38 - script and see what we're getting now
10:41 - okay give it a second
10:45 - loading loading loading how slow is my
10:51 - site okay so I don't know if that worked
10:54 - okay so maybe that actually we ran into
10:57 - an issue your print main text so I guess
10:59 - main was not defined okay so I figured
11:02 - out what the problem was here I have
11:03 - this has
11:04 - not accept I guess I was just copying
11:06 - blindly without really looking at it I
11:08 - don't want to quit
11:09 - unless this actually doesn't work so
11:11 - what this line is saying let's just
11:12 - clarify is web driver weight driver so
11:15 - that's the name of our web driver ten
11:17 - seconds that essentially means we're
11:18 - gonna wait a maximum of ten seconds
11:20 - until this thing here so II see the
11:24 - presence of element located so that's
11:25 - saying expected conditions dot presence
11:28 - of element located by ID main so by ID
11:32 - we can actually put in here like by name
11:34 - as well we can do class name there's all
11:36 - these different things that we have
11:37 - access to inside of by but I'm just
11:40 - gonna use ID for now so by ID main and
11:43 - then I had finally which meant no matter
11:45 - what if this works or not quit we don't
11:48 - want that we just want it to quit if
11:49 - this doesn't work right so yeah so
11:53 - that's what we'll put except there I
11:54 - mean and really I should be putting I
11:55 - mean text inside of the try it's not a
11:58 - huge deal for what we're doing but we'll
12:00 - make it a little bit better so let's run
12:01 - that now and see what we get give it a
12:04 - second and it just goes ahead and quits
12:06 - right away so let's see if it actually
12:07 - printed anything it did so main dot text
12:10 - actually gives me all of this so search
12:12 - results for tests we have a dates HTTP
12:14 - methods dates you know all this stuff
12:16 - great alright so what I'm gonna do now
12:19 - is actually make it so that we can find
12:21 - all of the headers of the different
12:24 - search results and print those out so
12:26 - notice that everything was inside of me
12:29 - right so now that I have access to main
12:30 - if we go back here and I inspect what I
12:34 - want to do is figure out where I would
12:36 - be able to find the headers of all of
12:38 - these different things so I can print
12:40 - out the search results well it looks as
12:41 - though they're inside of article tags
12:43 - and they're in a div called what is this
12:47 - header entry header and then entry title
12:50 - so what I'm actually gonna do is I'm
12:53 - gonna search for all of the article tags
12:54 - that are inside of this main tag and
12:56 - then inside of those I'm gonna look for
12:59 - all of the entry titles which are these
13:01 - right and then from there I'm just gonna
13:04 - print those out so I'll show you how we
13:06 - go ahead and do that I'm gonna say that
13:09 - once we find me and should I put it
13:11 - inside of except she adds do finally
13:14 - well leave that as finally we'll get rid
13:16 - of quit and we'll do everything
13:17 - inside of here so we'll say once we have
13:20 - main let's find all of the elements that
13:22 - are articles so articles equals main dot
13:26 - find elements elements by if I can find
13:31 - this here oops
13:33 - find underscore elements by tag name so
13:37 - what I'm doing is finding elements so
13:40 - plural by their tag name of article so
13:42 - this is gonna give me a list of all of
13:44 - the article tags so all of those
13:46 - elements which now I should build a loop
13:49 - through and print out the header tags
13:51 - for so I'm gonna say for article in
13:55 - articles like that and then we'll just
13:58 - say header equals article dot find
14:04 - element by in this case I think it's
14:06 - actually class name so find element by
14:10 - class name the class name I forget what
14:12 - it was so we're gonna have to go back in
14:14 - here and find that this is entry title
14:18 - so class entry title I can copy that
14:20 - here so let's do that
14:22 - by class name entry title and then
14:25 - simply print the header dot text so what
14:30 - this is saying is for every single
14:31 - article in the articles that we found
14:34 - from the main body tag then what we're
14:37 - gonna do is loop through them we're
14:38 - gonna find any class that says entry
14:41 - title inside of that article tag so it
14:43 - will only give us that one header and
14:45 - then print out that header so that's
14:48 - what we're trying to do so let's run
14:49 - this and see if this works okay give it
14:54 - a second and if we look here we can see
14:59 - that it's printed all of the text but
15:02 - there's nothing so there's all these
15:03 - blank lines so rather than doing the
15:05 - entry title let's change this to entry
15:08 - summary which I think was another class
15:09 - so entry summary so let's do that
15:11 - instead and see what results we get this
15:13 - time so the issue is that there was no
15:15 - actual title so it was printing
15:17 - something it just wasn't printing the
15:18 - correct titles so here you can see now
15:21 - we've printed all this research search
15:23 - results so we have these to do dot and
15:27 - yeah that's how we got all of the
15:29 - results so I think with
15:31 - I'm gonna leave the video here zoom out
15:33 - so you guys can read all of the code at
15:35 - once if you want but the idea behind
15:37 - this is we search something so we access
15:39 - that search bar search for an element
15:40 - then what we did was we redirected so we
15:43 - waited using this wait code here until
15:46 - we got to the next page then we found
15:48 - all of the elements inside of a specific
15:51 - tag so inside of main that had the
15:54 - article tag we looped through all of the
15:56 - articles and then we found the title we
15:58 - were supposed to find the titles but we
16:00 - found the summary of all those entries
16:02 - and simply printed them out so that's
16:04 - what we did that's what this tutorial
16:05 - covered I hope you guys enjoyed if you
16:07 - did make sure you leave a like subscribe
16:08 - and I will see you guys in the next
16:10 - selenium tutorial