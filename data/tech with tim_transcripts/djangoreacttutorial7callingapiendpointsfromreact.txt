00:02 - [Music]
00:08 - hello everybody and
00:09 - welcome back to another django and react
00:11 - tutorial video in this video we're going
00:13 - to be continuing from where we left off
00:15 - what we're actually going to be doing is
00:16 - making a view so we can look at room
00:18 - details so right now we're able to
00:20 - create a room you can see this is
00:21 - working this is fully functioning
00:23 - but now we need a way to actually view
00:25 - this room so how can we use this code
00:27 - to access the room so what we're going
00:29 - to do is set up a page that will allow
00:30 - us to go to something like slash room
00:32 - and then slash whatever this code is
00:34 - and then that will pull up the details
00:35 - related to that room and then from there
00:37 - we will allow users to join the room
00:39 - we'll add the media player which will
00:41 - allow us you know play pause we'll hook
00:42 - up with spotify
00:44 - there's a ton of other things that we
00:45 - still need to do i'm going slowly i want
00:46 - to explain
00:47 - everything that i can uh but yeah i just
00:49 - wanted to give you kind of an idea of
00:50 - where we're at and what we're going to
00:52 - be doing in the rest of the videos
00:54 - so let's get started uh the first thing
00:57 - that i want to do here is actually make
00:59 - a new component
01:00 - so i'm going to go inside of components
01:01 - and i'm going to make a component called
01:03 - room.js
01:04 - this is going to be responsible for
01:06 - handling the page that is simply like
01:08 - once we're in the room or we've created
01:09 - a room
01:10 - this is what we see so this is kind of
01:11 - maybe like the main application or the
01:13 - main page
01:14 - of our application uh so inside of here
01:17 - i'm going to say import
01:18 - react component from
01:21 - react like that then we're going to make
01:23 - our class we're going to say export
01:25 - default class we'll call this one
01:28 - room and that extends components like
01:31 - that
01:32 - and then we can say constructor this
01:34 - will take props
01:36 - like that we will need to call the
01:38 - superconstructor so we'll say super no
01:40 - not that not subtle i don't even know
01:42 - what that was something cryptocurrency
01:43 - okay
01:44 - super and then props like that
01:47 - and then inside of here while we're in
01:49 - here i'm just going to define the state
01:51 - that we're going to be using so i'm
01:52 - going to say this dot state
01:53 - equals and then what i'm going to put
01:54 - inside of here is votes
01:56 - to skip this will start at default i
01:59 - guess
01:59 - 2. it doesn't really matter what we put
02:01 - as the default here but we'll just put
02:02 - it at 2
02:03 - then we need the guest can pause that
02:06 - will start
02:07 - at false we could make it true again
02:09 - default doesn't really matter
02:10 - and finally one new one which is is host
02:13 - and that's going to be default
02:14 - false so these are just the pieces of
02:16 - information that i want to know about
02:17 - each room obviously i want to know the
02:19 - room code as well but we'll talk about
02:20 - that in a second
02:21 - but i need the votes to skip i need
02:23 - guest can pause and i need if the user
02:26 - is the host or not
02:27 - let's define a render function down here
02:31 - and what we can do is just return and
02:33 - actually let's just return the state and
02:35 - just have a look at what that is
02:36 - so i don't know if there's an easy way
02:37 - to convert that to a string but we can
02:39 - just kind of do our own thing so let's
02:40 - return
02:41 - a div slash div we'll make it you know
02:44 - somewhat pretty just so we can see
02:46 - some things nice here so we'll say p and
02:49 - then end the p
02:50 - tag inside of here we'll add this
02:53 - dot state dot votes to skip
02:56 - and then we can just put maybe like a
02:58 - little prefix before this votes
03:00 - uh i would copy that but we're gonna
03:02 - have to write most of it so now we'll
03:04 - say
03:05 - guest can
03:08 - pause and that will be equal to
03:12 - this dot state dot
03:15 - guest can pause and then last one for
03:18 - host
03:18 - so p and the p tag and we'll say host
03:22 - and that will be equal to this dot state
03:26 - dot is host like that all right so now
03:29 - we have a component
03:30 - called room and what we're going to do
03:33 - is pretty much figure out how we can
03:34 - actually get to this page so
03:35 - how do we get to this room page now the
03:38 - way that i'm planning on handling this
03:40 - is having it so that we go to a url
03:42 - where we go to slash room and then slash
03:44 - the room code
03:46 - you can see that i've tried this out
03:47 - previously i have a room code there
03:49 - but for example we go to this code down
03:51 - here that we just typed in
03:52 - and then that would bring us to this
03:53 - room page so i'm planning on determining
03:56 - what the code of the room is
03:57 - by just looking in the url bar and i
03:59 - don't really care if it's visible in the
04:00 - url bar
04:01 - because well you need to know what the
04:02 - code is to be able to access a room so
04:04 - you can just access a room if you know
04:06 - the code by typing it in the url
04:08 - or by using our ui and we'll make a page
04:10 - that allows you to join a room and all
04:11 - that kind of stuff
04:12 - but ideally after you press this create
04:14 - a room button you should be redirected
04:16 - to a page
04:17 - that is you know has this code and
04:19 - represents that room
04:20 - so let's go now to homepage.js and let's
04:23 - set up a route to allow us to actually
04:25 - do that so i'm going to say
04:27 - root like that i'm going to say path
04:29 - equals then inside of here we'll go
04:31 - slash
04:32 - room and then slash colon room code
04:35 - now whenever you add a colon this
04:37 - denotes we're going to have a parameter
04:38 - in our url or we're going to have some
04:40 - kind of variable there
04:41 - and then i'll say the component is going
04:43 - to be equal to room and we'll have to
04:44 - import that
04:45 - so let's go up to the top before we
04:47 - forget and let's import room
04:48 - so let's import room from
04:52 - uh dot slash room semicolon like that
04:56 - okay so what's actually going to happen
04:58 - here is we've set up a route or a route
04:59 - whatever you want to call it that allows
05:00 - us to go to room
05:02 - slash and then whatever the room code is
05:03 - and then we have a component equal to
05:05 - room
05:05 - now the way the react router works is it
05:07 - will by default pass
05:09 - some props to our room component here
05:12 - that will have information relating to
05:14 - how we got there so it'll actually give
05:15 - us a prop
05:16 - called match match pretty much tells us
05:19 - how it
05:19 - matched the url we went to with this
05:22 - string here
05:23 - and that will give us access to the
05:24 - parameters from this url and from that
05:26 - parameters we can grab
05:27 - room code and well we can see that so to
05:29 - show you that let's go to room.js
05:32 - and i'm just going to write a variable
05:33 - here that says this dot
05:35 - room code and that is going to be equal
05:37 - to this dot props
05:39 - dot match dot params dot room
05:43 - code so match is the prop that stores
05:45 - all the information about essentially
05:47 - how we got to this component
05:49 - from react router so that's what react
05:51 - router does it adds
05:52 - match as a prop to this component when
05:54 - it's rendered and of course we can
05:56 - access the room code from the parameters
05:58 - of
05:58 - the url so now let's simply show the
06:00 - room code i guess we can show this in
06:01 - maybe a heading let's go something like
06:02 - h3
06:04 - and then inside of here we don't even
06:05 - have to say room code we can just show
06:07 - room code because i think we'll know
06:08 - what it is
06:09 - so we'll say this dot room code all
06:12 - right so now all we have to do
06:13 - if we go to home page we can see we set
06:15 - up this route so let's go to urls
06:18 - and let's set one up on the back end
06:19 - just to make sure we don't crash when we
06:20 - go there so we're going to go to path
06:22 - and then this is going to be room slash
06:24 - and inside of here i'm going to say
06:26 - string
06:27 - room code just setting up a dynamic url
06:30 - and that will bring us
06:31 - to index so this is very similar to what
06:34 - i just did inside of react it's pretty
06:35 - much saying hey we'll accept
06:37 - any string here after room uh that's
06:40 - really all there is to it it's just a
06:41 - dynamic url i think that's what they're
06:43 - called
06:43 - if you want to be an int you would put
06:45 - int right you put whatever the
06:47 - python representation of the object is
06:49 - colon and then whatever you want the
06:50 - name of the parameter to be we don't
06:52 - really care in this case but i'll just
06:53 - keep it consistent at room code
06:55 - so now let's just give it a shot and
06:56 - let's go to slash
06:58 - room slash and let's actually go to the
07:01 - code that we already
07:02 - used so that one right there and if we
07:05 - paste we can see that we get the room
07:07 - code
07:07 - votes guests can pause and host uh now
07:10 - it's strange it's not showing me guests
07:11 - can pause and host i can look at that in
07:13 - a second
07:14 - but you can see it showing us the room
07:15 - code at a minimum now i just want to
07:16 - show you something if i go to hello
07:18 - notice that this works any string works
07:21 - so we will need to forbid people from
07:22 - going to a page where a room does not
07:24 - yet exist
07:25 - but that's something that we'll do in
07:26 - just a second all right so now that
07:28 - we've done that we have a way to
07:29 - actually
07:30 - get to that room uh we need a way to get
07:32 - these other details right we need the
07:33 - votes to skip we need guests can pause
07:35 - and we need is host uh
07:36 - or not and yeah so how do we do that
07:39 - well what we have to do is we have to
07:40 - send a request
07:41 - to our backend for this information so
07:43 - what we're going to do is give our
07:45 - backend the room code and then the back
07:46 - end will look at that room code find the
07:48 - room and then give us the information
07:49 - that we want
07:50 - which is votes to skip guess can pause
07:51 - is host and maybe anything else
07:53 - so let's go to views.pi inside of api
07:56 - and let's make a new view that can do
07:57 - that for us
07:58 - now before we do that i need to thank
08:00 - algoexpert for sponsoring this video and
08:02 - this series
08:03 - in my opinion algo expert is the best
08:05 - way to prepare for your coding
08:06 - interviews or to learn data structures
08:08 - and algorithms extremely fast
08:10 - now an interesting fact about algo
08:12 - expert is that i actually teach on the
08:14 - platform
08:14 - so if you're preparing for your coding
08:16 - interviews and you want to hear even
08:17 - more of my voice then head over to algo
08:19 - expert and use the code tech with tim
08:21 - for a discount on the platform
08:22 - the link is in the description so what
08:25 - we can actually do
08:26 - is go right here and we can say class
08:29 - room retrieve like that or we can say
08:33 - like get room you know what maybe get
08:34 - room makes more sense it's easier to
08:35 - type too
08:36 - let's say class get room this is going
08:38 - to inherit from api view just like we
08:40 - used
08:41 - for the create room view and then inside
08:43 - of here we're going to define two things
08:44 - we're going to find our serializer class
08:46 - which is going to be equal to
08:47 - the room serializer and then we're going
08:49 - to define our lookup
08:51 - underscore url underscore quark standing
08:54 - for keyword argument and that's going to
08:55 - be equal to code
08:57 - so essentially what this means is that
08:58 - when we call this get room
09:00 - api view and we call it with the get
09:02 - request well that's what we're going to
09:03 - be using
09:03 - we need to pass a parameter in the url
09:06 - called code
09:06 - and that code will be equal to the room
09:08 - that we're trying to get so we'll say
09:10 - define
09:10 - get we'll say self we'll say request and
09:13 - then we can say the optional format
09:15 - equal to none
09:16 - then here the first thing we're going to
09:18 - do is we're actually going to get what
09:20 - the code is
09:21 - from the url so we're going to say
09:23 - request
09:24 - dot get dot get
09:27 - and then self dot look up underscore url
09:31 - come on if you can type properly url
09:34 - underscore
09:35 - quark like that and sorry this should be
09:37 - equal to that's probably why i wasn't
09:38 - getting
09:39 - the autocomplete uh but when you look at
09:41 - request.get this is giving you
09:42 - information about
09:44 - the url from the get request when i say
09:47 - dot get we're looking for any parameters
09:49 - in the url and i'm looking for one that
09:51 - matches the name code i'm going to get
09:52 - that and that will tell me essentially
09:54 - what that parameter was equal to
09:56 - so now i'll have access to the code and
09:57 - then i can look up the room by the code
10:00 - and well we can go from there so now i'm
10:02 - going to say if
10:03 - code does not equal none so just make
10:06 - sure we actually
10:07 - do have a code here that was passed in
10:09 - the url then what we'll do is we'll say
10:11 - room equals and well we'll have to
10:13 - filter
10:14 - all of our room objects and figure out
10:16 - which room has this code so we can
10:18 - simply say room
10:19 - dot objects dot filter and then
10:23 - inside of here we'll say code equals
10:25 - code now since code is unique that
10:28 - should always give us
10:29 - the correct value or it should always
10:32 - give us sorry what am i saying
10:34 - now since code is unique that should
10:35 - always give us only one value
10:37 - so we'll just have to make sure that we
10:38 - do indeed have a room and then if we do
10:41 - we can grab that value out and do what
10:42 - we want with it
10:43 - so if we do have a room we'll say if the
10:46 - len of room is
10:50 - greater than zero then we will say
10:53 - that our data is equal to
10:57 - room serializer we're gonna serialize
11:00 - the room zero so the first entry in our
11:03 - room
11:04 - and then we're gonna get the data from
11:06 - that so this is strange but what i'm
11:07 - doing is i'm serializing the room
11:09 - we know that there's only gonna be one
11:11 - room right so we can just access it at
11:12 - room
11:13 - zero and then i'm taking the data which
11:15 - will just kind of be like a python
11:16 - dictionary and kind of extracting that
11:18 - from the room serializer
11:20 - so typically if we were to just return
11:22 - the room serializer which i think we
11:24 - have done
11:25 - if you look here i'm returning the dot
11:27 - data right so here i'm just storing it a
11:29 - variable instead
11:30 - and now i'm going to add some things to
11:31 - it like for example is the user the host
11:34 - of this room
11:34 - so now what i'm going to do is i'm going
11:35 - to say data and then we're going to
11:37 - actually
11:38 - pass is underscore host or we're going
11:40 - to make is underscore host as a new key
11:42 - inside of our data
11:43 - and that's going to be equal to the
11:45 - following expression so self
11:47 - dot request dot session dot session
11:50 - underscore key is equal to
11:54 - room 0 dot host now the reason i'm doing
11:57 - this is because
11:58 - the host is going to be the session key
12:00 - of whoever is the host of this room
12:02 - so i can check our current session key
12:03 - so whatever user sent this request
12:05 - and see if it's equal to this and if it
12:07 - is that means that this user is the host
12:10 - if it's not that means they are not the
12:11 - host so i can just store that in a key
12:12 - called is host on my data
12:14 - it's just a python dictionary so i can
12:16 - simply add it to that like what i just
12:18 - did
12:18 - and then i can return a response
12:22 - and in the response i can return my data
12:24 - and i can say status
12:26 - equals status dot http
12:29 - underscore 200 underscore okay now in
12:32 - the situation where this is not true we
12:33 - don't actually have a room then let's
12:35 - return a response that says no
12:37 - there is no room there so we'll say
12:38 - return
12:41 - response instead of returning data we'll
12:43 - return our own kind of
12:44 - custom object here and we'll say bad
12:48 - request and then this will be equal to
12:50 - invalid
12:52 - room code and actually we can say
12:55 - instead of
12:56 - that we'll just say room not found
12:58 - invalid room code and then for the
13:00 - status we can say that is equal to
13:03 - status dot http underscore 404
13:06 - because we did not find the room so 404
13:08 - just means you know like not found
13:09 - you've probably seen a 404 page before
13:11 - uh next if none of this is true so in
13:14 - the situation
13:14 - we actually weren't given a code in the
13:16 - url then what we need to return is that
13:18 - hey you know we didn't get the right
13:19 - data so we couldn't give you something
13:20 - so we're going to say
13:21 - return response inside of here we can
13:24 - say
13:24 - bad request and then we'll say
13:29 - code parameter not
13:32 - found in request something like that
13:36 - and then just say status equals status
13:39 - dot http underscore 400 underscore bad
13:41 - request
13:42 - all right so that should be our get room
13:45 - class now let's hook that up with an
13:46 - endpoint so let's go to urls
13:49 - let's go here and we'll make a new path
13:51 - we'll simply call this one
13:53 - get hyphen room and then i guess we'll
13:56 - import
13:57 - the get room so like that and get
14:01 - room dot as underscore view
14:04 - all right so that should work so let's
14:07 - actually go to our url here and let's
14:08 - try this out so i'm going to say
14:10 - api hyphen get room question mark and
14:13 - then i'm going to pass the code
14:15 - equal to when you put a question mark
14:16 - that's saying we're passing a parameter
14:18 - essentially or like some variable
14:19 - and let's just do this with hello i
14:21 - don't remember what the code was so
14:22 - let's pass it as hello
14:23 - and notice it says room not found
14:25 - invalid room code now what happens if i
14:27 - don't pass a parameter
14:28 - well we get code parameter not found in
14:30 - request and then if i do actually pass a
14:32 - valid one well i'm gonna have to find it
14:34 - now
14:34 - api rooms or what was it api room
14:38 - okay let's just look for this one that
14:40 - we created so we'll steal that
14:42 - api get hyphen room question mark
14:45 - code equals that and there you go we see
14:48 - we get the information that we wanted as
14:49 - well as this thing that says is host and
14:51 - that is equal to
14:52 - true so now all we have to do is send
14:55 - this request
14:56 - from our javascript and we'll be able to
14:58 - update our state on our room page
15:00 - so now i'm just going to make a method
15:02 - inside of here called
15:03 - get room details
15:07 - and all we'll do inside of here is
15:09 - simply fetch the details that we want so
15:10 - we'll say fetch and then we'll fetch
15:13 - slash api slash get hyphen room
15:16 - and then we'll add that to question mark
15:19 - code equals plus this
15:23 - dot room code because we have that there
15:26 - and that should be a string
15:27 - so there we go that is the request that
15:29 - we want to send then what we will do is
15:31 - say
15:32 - dot then response
15:36 - arrow function and we can do whatever we
15:38 - want inside of here which is just going
15:39 - to be return
15:40 - the response dot json
15:44 - now i don't think i actually need to
15:45 - write return i think i can just do that
15:47 - yeah that's perfectly fine we'll just
15:48 - say response.json
15:50 - just kind of a trick here when you're
15:51 - doing an arrow function that's only one
15:53 - line so you only have one thing
15:54 - it just assumes that whatever you write
15:56 - after the arrow if you only write one
15:57 - thing and there's no
15:58 - squiggly brackets then that's what's
16:00 - going to be returned so if i just write
16:02 - response.json without the return
16:03 - statement it just assumes that's going
16:05 - to be returned
16:06 - then i can do another dot then so i'm
16:07 - going to say dot then i'm going to say
16:09 - data so this will get the response.json
16:12 - and that will then go to actually a full
16:14 - function and what we'll do inside of
16:15 - here is we'll say
16:16 - this dot set state
16:20 - and inside of set state we'll say votes
16:23 - to skip
16:24 - and that's going to be equal to data dot
16:26 - votes
16:27 - underscore to underscore skip because
16:29 - remember it's passing those keys to us
16:31 - as underscores because in python we use
16:32 - the snake case
16:33 - and then we'll say guest can pause colon
16:36 - data dot
16:37 - guest underscore can underscore pause
16:40 - and then is
16:41 - host will be equal to data dot
16:44 - is underscore host okay so now we
16:47 - actually have a function that can simply
16:49 - get for us the room details so what we
16:51 - will do now
16:52 - after we have the room code is we'll say
16:54 - this dot get room details
16:56 - now that will update the state for us
16:57 - and then hopefully that will make it or
16:59 - that will sorry not hopefully it will
17:00 - force a re-render whenever this is done
17:03 - being called when we set the state and
17:05 - it should show us the details about the
17:06 - room if we go to a room with the correct
17:08 - code
17:09 - so let's go here i'm just going to steal
17:11 - this code
17:12 - and now rather than go to api get room
17:14 - let's go to code
17:15 - or code what am i saying let's go to
17:17 - room slash and then paste that in there
17:20 - okay so it's still giving us votes too
17:22 - guests can pause nothing host nothing
17:23 - um technically this is right i just went
17:25 - back and looked at uh what the
17:27 - votes for this room actually were and it
17:28 - is too uh but i want to make sure that
17:30 - we actually see all this information so
17:31 - i'm just going to quickly convert
17:33 - this information to a string so i'm
17:36 - going to say
17:36 - 2 i think it's literally just two string
17:39 - yep so it does look like it's
17:40 - two strings so i'll put dot 2 string
17:42 - here and then i'll put dot
17:44 - 2 string here as well just so we can
17:46 - actually see those values let's go back
17:47 - here now
17:48 - let's do a fresh and we get yes the host
17:50 - is true and guess can pause is true
17:52 - and votes too so that is indeed working
17:54 - we're getting the correct information
17:55 - that's being updated on
17:57 - room all right so now that all of that
17:59 - is working let's go to the create
18:00 - room page and let's make it so that when
18:02 - we press that create room button it
18:05 - actually redirects us
18:06 - to the correct page so what we're going
18:08 - to have to do is go to the function
18:10 - where it handles the button pressed
18:12 - we're going to have to redirect right
18:13 - here so you see notice we just have data
18:15 - constant log data we have to redirect
18:18 - our user
18:19 - to the web page that's corresponding
18:21 - with slash room slash
18:22 - code so to do that we're going to say
18:24 - this dot
18:25 - props dot history this is another one
18:28 - that react
18:29 - router will automatically add to the
18:32 - props when it renders this component and
18:33 - we're going to say dot push
18:35 - and what we're actually going to do is
18:37 - push to slash room
18:39 - and then slash plus
18:42 - not this sorry data dot code
18:45 - now i think it comes in just straight as
18:47 - code but this should give us the room
18:49 - code so we'll go to
18:50 - room slash wherever the room code is so
18:53 - we can test this out let's go
18:54 - to the create page so let's close this
18:57 - and let's
18:57 - go to create and now let's simply create
19:00 - a room and notice that it redirects us
19:02 - to this room so that's awesome let's now
19:04 - change the votes to be like four let's
19:06 - say no control create room
19:08 - and notice that boom this gets updated
19:09 - votes for guests can pause
19:11 - false so yeah that is all i wanted to
19:13 - show us in this
19:15 - tutorial video in the next video what
19:17 - we're going to be doing is working a bit
19:18 - more on this room page
19:20 - let me go to it here just making it
19:21 - obviously look a little bit better we
19:23 - may or may not add the media player
19:25 - i think it's a little bit too early to
19:26 - do that but i also want to work on the
19:28 - join room page
19:29 - we've got a lot of stuff to do i'm not
19:30 - quite sure exactly what we'll tackle in
19:32 - the next video but it'll be something
19:33 - along those lines of you know joining
19:34 - the room
19:35 - uh or you know making this one look a
19:36 - little bit prettier or whatever that may
19:38 - be so anyways i hope you guys enjoyed if
19:39 - you did make sure to leave a like
19:41 - subscribe to the channel and i will see
19:42 - you in the next tutorial video