00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video
00:11 - so in today's video i'm going to be
00:12 - showing you how to write cleaner code
00:14 - now the way i'll be doing that is by
00:16 - going through a script that i wrote
00:17 - about three or four years ago
00:18 - just pointing out some of the flaws in
00:20 - it and showing you how we can make some
00:21 - minor refactors and changes
00:23 - that just make this code much cleaner
00:25 - easier to read and just
00:26 - better in general now clean code is a
00:29 - subjective
00:30 - topic some people will say one script is
00:32 - better than the other or this way of
00:33 - doing things
00:33 - is better than the other way but a lot
00:35 - of stuff that i'm going to cover here is
00:36 - not really controversial
00:38 - this is just stuff that generally will
00:39 - make your code cleaner and so take
00:41 - everything i say with a grain of salt
00:42 - but generally the stuff i'm going to
00:44 - show you here is a best practice and at
00:46 - least in python what you should be doing
00:48 - so before i actually get into this i'll
00:50 - just quickly mention that all of the
00:52 - code here again
00:53 - is from a tutorial that i made about
00:55 - three or four years ago so this tutorial
00:57 - was called projectile motion in python
00:59 - using pi game i'll put the video up on
01:01 - the screen it's still on my channel
01:03 - so if you want to actually you know
01:04 - figure out what all of this code is
01:06 - because i'm not really going to be
01:07 - explaining what all of it does we're
01:08 - just going to be refactoring it
01:10 - then you want to go back to that video
01:12 - watch that video it's it's pretty old
01:13 - but i'll show you what the kind of
01:15 - output of this code is
01:16 - so it's actually a little game that
01:18 - allows you to simulate projectile motion
01:20 - so obviously you have your cursor and
01:22 - you can see that this line is kind of
01:23 - you know
01:24 - sorry the line is tracking the cursor
01:26 - the further you go out the more power
01:27 - and then you can pick the angle you want
01:29 - to shoot the ball out and well it's just
01:30 - meant to kind of you know be a little
01:31 - bit of a
01:32 - physics simulator sorry i didn't
01:34 - implement any bouncing in this but i
01:36 - have
01:36 - another version not really of a tutorial
01:39 - but of a game that i showcase where this
01:41 - uh this ball actually does bounce on the
01:42 - screen anyways enough of that just
01:45 - wanted to show you what the output was
01:46 - now let's actually go through and
01:48 - refactor this i'll start by just a high
01:49 - level overview of all of the code it's
01:51 - not too long
01:52 - and then we'll see what's kind of not
01:53 - clean and what we can change
01:55 - so this is a python game using pygame so
01:57 - you're going to see a lot of stuff
01:58 - related to pygame we're not really going
02:00 - to be changing any of that because
02:01 - that's just the module itself
02:03 - what we will be changing however is
02:05 - stuff like the ball class right or like
02:07 - the different
02:08 - functions that we have so first of all
02:10 - we can see
02:11 - that i've defined the width and the
02:12 - height of the screen i've set up a
02:14 - window
02:15 - i've set up the name of the window and
02:17 - then i've created a ball class
02:19 - now in this ball class i have a few
02:20 - attributes the x y radius
02:22 - and color of this ball right the
02:24 - properties of it i have this draw method
02:26 - this method allows me to actually draw
02:28 - the ball onto the screen
02:30 - and then i have a static method that
02:31 - allows me to calculate the path of the
02:33 - ball based on a power angle start x
02:35 - start y
02:36 - and amount of time okay so that's what
02:38 - that's doing this is kind of running a
02:40 - lot of the physics here it's calculating
02:42 - where the ball should be moving to at a
02:43 - certain point in time
02:45 - okay we have this redraw window function
02:47 - this will redraw the window every frame
02:49 - so you actually see the ball moving
02:51 - we have find angle this finds the angle
02:53 - between the mouse
02:55 - cursor and the ball yeah so where your
02:57 - mouse is relative to the ball it's kind
02:58 - of that line it's finding the angle of
03:00 - that line
03:00 - we then create the golf ball we have a
03:02 - few variables here that we're using
03:04 - we have our main while loop we have some
03:06 - clock
03:07 - and then we have if we are shooting the
03:09 - ball do all of this stuff
03:11 - okay we defined the line so the line
03:14 - goes between the golf ball
03:15 - and the cursor and then we are drawing
03:17 - the line constantly
03:18 - and then we have an event loop this
03:20 - event loop is just handling okay
03:22 - what actually happens when we press the
03:24 - mouse button down or when we quit the
03:26 - window
03:27 - okay so high level overview there and as
03:28 - i've scrolled through this you guys have
03:30 - probably already realized a few things
03:31 - that
03:32 - aren't really that clean and that could
03:33 - be fixed now the first huge thing that
03:36 - screams to me when i read this code here
03:38 - is why are you not using snake case now
03:40 - i'm going to kind of be speaking in
03:41 - third person here because
03:42 - i can't remember what i was thinking
03:43 - when i wrote this code three or four
03:44 - years ago
03:45 - but i look at this and i say okay the
03:46 - python convention is snake case
03:48 - and all of the module stuff like set
03:50 - mode set underscore caption
03:52 - it's all using snake case but everything
03:54 - else is using camel case
03:56 - now it would be okay if everything was
03:58 - just in camel case that's still not
03:59 - preferred but at least that's consistent
04:01 - but we're mixing and matching here and
04:03 - since we're using a module that has
04:04 - snake case and then we have
04:05 - camel case for the rest of it that's
04:07 - just not good that's not very clean you
04:09 - want to be consistent
04:10 - even if you make the wrong choice at
04:12 - least consistently make the wrong choice
04:13 - that
04:14 - everything's the same so the first thing
04:15 - i want to do here is just go and change
04:17 - everything from what is this camel case
04:20 - to snake case because in python
04:21 - we don't use camelcase also stuff like
04:24 - this w screen
04:26 - h screen these aren't really the best
04:28 - variable names yeah i can figure out
04:30 - this is width and height but i probably
04:32 - want to change this to just say
04:33 - width and height and also these are
04:35 - constants let me zoom in on this a
04:36 - little bit
04:37 - these values i don't think are changing
04:39 - anywhere in the program in fact no
04:41 - they're not
04:42 - and since they're constants the
04:43 - convention in python is to make them
04:45 - capital so what i'm going to start by
04:46 - doing now is just changing these here
04:49 - to be all capital so i'm going to say
04:51 - width
04:52 - for the first one oops that's not what i
04:54 - want to do i want to find and replace so
04:55 - we'll replace that
04:57 - with width okay replace all and then
05:00 - we're going to go
05:01 - here and we're going to replace this
05:03 - within all capitals height
05:05 - okay replace all nice now the next thing
05:08 - that i'm realizing even if i'm just
05:10 - on line seven here is i don't have a
05:11 - space after the comment now this is not
05:13 - a huge deal again these are very
05:14 - nitpicky things
05:15 - but i like to have spaces after all of
05:17 - my commas that's just usually
05:18 - best practice okay so now up here at
05:21 - least this is fine imports are at the
05:22 - top of the program i can live with that
05:24 - let's move down
05:25 - okay next i see this class now the first
05:28 - thing that really bugs me about this
05:29 - class is inherits from object
05:31 - now i know why i did this because back
05:34 - when i
05:35 - was yeah three or four years ago i guess
05:36 - whatever age it was at that point in
05:38 - time
05:38 - i just always would inherit from object
05:40 - because in python 3
05:42 - all classes do inherit from object and
05:44 - so like doing this
05:45 - doesn't make a difference but the point
05:47 - is we don't need to do this so there's
05:49 - no reason to inherit the class
05:52 - from object or have the super class b
05:53 - object so we can just remove that
05:55 - the next thing that's bugging me here is
05:57 - this class name does not have a capital
05:58 - at the start so i'm going to change this
06:01 - find and replace here to have a capital
06:04 - so
06:04 - like that this is because the convention
06:06 - in python
06:08 - is to have pascal case for your classes
06:10 - so you want to have a capital on the
06:12 - first word capital on the rest of the
06:14 - compound words
06:15 - inside of it so there we go now this
06:16 - says ball that's better looking nice
06:18 - okay
06:19 - same thing here i don't have any spaces
06:20 - after my commas so i'm just going to add
06:22 - those in because again that's just
06:23 - something i like
06:24 - this is fine right here for the init and
06:27 - the draw method looks fine as well
06:28 - but the next thing i see and again these
06:30 - are all really nitpicky things but just
06:31 - small things you can do that just make
06:33 - your code higher quality
06:34 - is that i have a different amount of
06:36 - spaces between my methods here
06:38 - so notice i have this first method this
06:41 - second method and this third method and
06:43 - there's two spaces here
06:44 - and one space here vertical space right
06:46 - so what i'm going to do is just keep
06:48 - this consistent and the python
06:49 - convention is to have one space in
06:50 - between the methods
06:51 - and so i'm going to make that one space
06:53 - and just move this method up
06:55 - nice now i'm looking inside of this
06:56 - method there's not really much we can do
06:58 - to clean up here i mean i can add in my
07:00 - spaces which i like
07:01 - and again notice how it wasn't
07:02 - consistent right i didn't have spaces
07:04 - here but then i had spaces here so at
07:06 - least
07:06 - be consistent in what choice you make
07:08 - and then same thing here i like to have
07:10 - spaces in between any operation so i can
07:12 - more clearly see what the operator
07:13 - actually is
07:14 - so we'll just add the space between the
07:16 - minus all right
07:18 - next i'm coming here to ball path all
07:20 - right now
07:21 - immediately i'm a little bit confused
07:23 - because i start by defining
07:25 - angle equal to ink now ang is my
07:28 - parameter
07:29 - angle is here it doesn't look like i'm
07:31 - changing angle at all
07:33 - and so this doesn't really make much
07:35 - sense for me to do what i'm going to do
07:37 - is just change the parameter name to
07:39 - angle
07:40 - rather than renaming it inside of here
07:42 - okay so we'll see if we have to change
07:44 - anything anywhere else because of that
07:45 - but that's fine um
07:48 - yeah okay so now the next thing that i'm
07:50 - seeing is again this method name
07:52 - is not snake case so i want to change
07:54 - this to snake case not camelcase
07:57 - so let's find and replace and let's
07:59 - replace this with ball
08:00 - underscore path okay uh replace all
08:03 - nice okay now we have that
08:06 - now same thing here for my bell x and my
08:09 - bell y
08:10 - i want to change these both to be uh
08:12 - snake case so
08:13 - let's replace vel x with
08:16 - vel underscore x obviously we got to
08:18 - spell that correctly
08:20 - and vel x is fine uh that's descriptive
08:23 - enough
08:23 - but normally i would probably name that
08:25 - velocity x velocity y
08:27 - but that's fine we can leave it the way
08:29 - it is okay so let's replace
08:31 - and there we go okay that is better now
08:33 - same thing here with this
08:34 - x and dist y and even notice if i go
08:36 - back here right i had vel y
08:38 - but i didn't have a capital y and now i
08:40 - have dist x and i have
08:41 - a capital x and i have a capital y and
08:43 - so i wasn't being consistent
08:44 - and you want to be consistent again even
08:47 - if you make the wrong choice
08:48 - just be consistent with making the wrong
08:50 - choice okay so let's go here
08:52 - and let's change this to be dist
08:54 - underscore x
08:56 - so replace all and then let's go here
08:59 - and let's change this to be dist
09:00 - underscore y
09:02 - okay and again that stands for distance
09:04 - it might be useful to actually add the
09:05 - distance x and distance y
09:07 - but i think that's descriptive enough
09:09 - most people can probably figure out what
09:10 - that is that's the whole point you want
09:11 - other people to be able to read it
09:13 - okay now i see start x and i see star y
09:15 - same thing here we need to change these
09:17 - so that they are camelcase so start
09:19 - underscore x
09:21 - start underscore y and by the way i
09:22 - should have mentioned this before but
09:24 - feel free to go through this and find
09:25 - all of these errors yourself
09:26 - i'm just kind of walking through it as i
09:28 - would if i was going to refactor
09:29 - something and clean it up
09:31 - trying not to cut or anything but i
09:32 - understand it might be a little bit
09:33 - boring
09:34 - okay so next thing i'm seeing here is
09:36 - that this spacing is fine i did my
09:37 - velocity
09:38 - i do my distances i figure out my new x
09:40 - and my new y now the new x and the new y
09:42 - need to be changed as well i can just
09:43 - manually change that it'll probably be
09:45 - faster
09:46 - and then what i'm doing after this is
09:47 - i'm returning new x and new y in
09:50 - a tuple now the thing is in python i
09:52 - don't need to do that
09:53 - when i return multiple values they're
09:55 - automatically going to be packed
09:56 - together in a tuple and so i'm going to
09:57 - remove those brackets
09:59 - because even though they don't really
10:00 - cause any harm being there they're
10:02 - unnecessary and well
10:03 - you shouldn't really add unnecessary
10:04 - stuff to your code that just has
10:07 - you know the potential to make it more
10:08 - confusing now in this case you could say
10:10 - all right well maybe this adds some
10:11 - clarity because you're defining that
10:12 - it's a tuple but anyone that works in
10:14 - python and who would be reading this
10:15 - would already know that so that's fine
10:17 - okay so now the top part of our program
10:18 - is looking better i'm happier with that
10:20 - now and we still have more name changes
10:22 - to make right redraw window
10:23 - need to change this so that it is going
10:25 - to be snake case so let's go
10:27 - redraw underscore window replace all
10:31 - nice okay now we have a few other
10:32 - variable names i'm just going to keep
10:33 - changing them
10:34 - i think you guys get the idea now golf
10:36 - ball needs to be changed to golf
10:38 - underscore ball it's going to be a lot
10:40 - of a snake case we need to change or
10:42 - sorry a lot of camel case we need to
10:43 - change to snake case
10:44 - all right so now i'm going inside of
10:46 - here and i actually called this gold
10:48 - ball
10:48 - so let's just rename this to golf ball
10:52 - my bad okay and now let's see what else
10:56 - we could potentially change so we have
10:57 - win.fill 64 64 64.
11:00 - okay pygame.draw.line win color
11:04 - line okay i'm going to fix the spacing
11:05 - here with the commas same thing here
11:08 - but what i want to point out here is
11:09 - that we don't know what 646464 is right
11:13 - i have no
11:14 - idea what this is i'm saying fill the
11:15 - window in with this i know this is a
11:17 - color just because i work in pi game
11:19 - before but i don't know what color this
11:20 - is
11:20 - and so really what i should do here is i
11:23 - should store this in a variable
11:24 - and define what color it is so that i
11:27 - actually know what color
11:28 - i'm drawing on the screen so i'm going
11:29 - to go to the top of my program here and
11:30 - i actually don't know what this is but i
11:32 - think it's a gray
11:33 - i'm going to put gray in all capitals
11:35 - notice because this is a constant
11:37 - is equal to this okay and now i'm going
11:39 - to swap this out here
11:40 - with gray so this way when i'm reading
11:43 - this program the feature i know okay i'm
11:44 - drawing
11:45 - right onto the screen that's where i'm
11:46 - drawing gray now same thing here this
11:48 - color 0 0 0 this is black
11:50 - now what i'm going to do is i'm just
11:52 - going to put the variable name black
11:53 - here it's going to be a constant as well
11:55 - i'm going to define black up here just
11:57 - to make it easier to read
11:59 - okay so just small things but again
12:00 - makes a big difference okay
12:02 - let's continue here line zero and line
12:04 - one is fine
12:05 - all of this looks okay and now we're on
12:07 - to find angle all right so we need to
12:09 - change the name
12:10 - of this one again so let's go find
12:13 - underscore angle oops not in capitals
12:16 - find
12:16 - underscore angle okay replace alt
12:19 - and now let's look inside of here okay
12:21 - so the first thing i see that kind of
12:22 - bugs me
12:23 - is well pause i mean we could make this
12:26 - position but pause i think is fine
12:28 - but s x and s y i don't know what
12:31 - s x and s y means now i understand i'm
12:33 - getting the x and the y of the golf ball
12:35 - but i don't know why i have to have an
12:36 - s before i don't know if that means
12:38 - something specific and so i'm just going
12:39 - to go ahead and assume that it's
12:40 - actually fine if rather than having sx
12:43 - i just have x because i'm not using the
12:45 - variable x
12:46 - so let's just do that replace all oops
12:49 - what did that do oh
12:50 - sorry i need to do this okay sx replace
12:53 - that
12:53 - with x replace all and then same thing
12:56 - for y
12:57 - okay so here this was just a little bit
12:58 - confusing i don't know why
13:00 - i have sx and sy and again they're using
13:03 - camel case which is wrong so let's just
13:04 - change that to x and y
13:06 - and i think that's fine okay next thing
13:08 - here i'm using a try and accept
13:10 - now i guess this is fine i don't know
13:11 - exactly why i needed to do this try and
13:13 - accept
13:14 - but really you want to avoid using a try
13:15 - and accept when you're not actually
13:17 - accepting an exception
13:19 - in this case i'm not you know accepting
13:21 - a specific exception i just have a
13:22 - general accept and i'm saying okay if
13:24 - something goes wrong in this line i'll
13:26 - do this
13:26 - again that's fine you can do that
13:28 - there's not a huge problem with that
13:30 - but it's just not best practice really
13:32 - what i should do is kind of handle this
13:34 - error manually and say okay
13:36 - if whatever is going to cause this to
13:38 - error out occurs just don't do this do
13:40 - this instead so replace the try and
13:41 - accept with an if and an else statement
13:43 - that would be better
13:44 - unfortunately i don't know why this is
13:46 - an error my trigonometry
13:48 - is not primed i'm sure if i have like a
13:50 - zero or a negative or something maybe
13:52 - this fails
13:53 - but for now i'm just going to kind of
13:55 - leave that as is and note that that
13:56 - should probably be an if statement not
13:58 - to try and accept
13:59 - okay so now i come here and i say if
14:01 - pause one and pause zero if pause one
14:04 - less
14:04 - y pause zero okay so all of this looks
14:06 - fine i'm not really going to mess with
14:07 - this too much because i don't remember
14:09 - exactly what all this is doing
14:11 - but one thing that i will note is that i
14:13 - have pause one and pause zero
14:15 - now that is getting the x and the y
14:17 - coordinate of
14:18 - my position so really what i would
14:20 - prefer to do
14:22 - is to make a variable called mousex that
14:24 - is equal to
14:25 - pause 0 and then make a variable called
14:27 - mouse y
14:29 - which is equal to pause one in this way
14:32 - rather than me just having pause zero
14:33 - and not knowing if this is the ball
14:35 - position or if this
14:36 - is the uh what do you call it the actual
14:38 - position of the mouse
14:40 - i have this variable and that's easier
14:42 - to read so what i would do now is swap
14:44 - out all of pause zeros
14:45 - with mousex and with mouse y so let's
14:47 - just go ahead and do that
14:49 - we're gonna swap this with mouse
14:52 - underscore x
14:53 - okay replace all we'll have to why that
14:56 - not work pause zero
14:58 - mousex okay so i don't know why that
15:00 - wasn't working i think i had one of the
15:01 - modes wrong and it goes in like a regex
15:03 - expression or something
15:04 - uh but let's just replace all of those i
15:06 - hope that didn't change anything down
15:08 - here
15:08 - although it might have okay and then
15:10 - let's do the thing same thing here
15:12 - so we'll do pause one replace that with
15:14 - mouse y
15:15 - and then we'll have to change these back
15:17 - so these are gonna be pause
15:18 - zero and pause
15:21 - one okay nice so
15:24 - that's all right for now the next thing
15:27 - i'm realizing though is that
15:28 - i'm using golf ball but i'm not passing
15:31 - golf ball into this
15:32 - function right golf ball is defined down
15:35 - here
15:36 - i'm not passing that as a parameter i'm
15:37 - using this as a global variable that is
15:40 - bad
15:40 - don't do that so what i'm going to do
15:42 - now is i'm going to change this so golf
15:44 - ball is now going to be a parameter
15:46 - because
15:46 - it should be a parameter i shouldn't be
15:48 - able to just reference it out of nowhere
15:50 - and same thing here with line right this
15:52 - shouldn't be a global variable i'm going
15:53 - to put that here
15:54 - and i'm just going to go and look if
15:56 - anywhere else i have this being a global
15:58 - variable
15:59 - i don't think so but that's going to
16:01 - require me make some changes later in
16:02 - the program so same thing here i'm
16:04 - referencing
16:05 - golf ball but it wasn't passed in as a
16:06 - parameter and so
16:08 - anytime golf ball this variable is
16:10 - defined anywhere outside of this
16:11 - function
16:12 - that's what i'm going to be referencing
16:13 - and that is not good i don't want that
16:14 - so i'm going to change this so it's no
16:16 - longer a global variable
16:18 - okay so that's good for now now i see
16:20 - golf balls defined here that's all right
16:22 - and then i see i have my variables now
16:23 - one thing i would do is i would just add
16:24 - a space here just to kind of separate
16:26 - the fact that okay i got all my
16:27 - variables
16:28 - in fact this guy can be a part of this
16:29 - kind of stack of variables here
16:31 - i'll just make sure that my vertical
16:33 - spacing is consistent so after this
16:34 - function
16:35 - i should have one vertical space because
16:37 - all of my functions are separated by one
16:38 - vertical space
16:39 - and you'll note here that the class has
16:41 - two vertical spaces after it again
16:42 - that's kind of a python convention
16:44 - okay anyways now we're here into our
16:47 - wallet
16:48 - so i'm not going to go through a ton of
16:49 - this stuff because a lot of it if you
16:51 - don't know what it means
16:52 - it's going to be pretty hard to uh to
16:53 - actually determine but the first thing
16:55 - i'll say here is i have golf ball
16:56 - i'm setting the color to white but again
16:58 - this isn't in a variable and so if i
17:00 - don't know my rgb i'm not going to know
17:01 - that's white so i'm going to go
17:03 - up here i'm going to say that white
17:06 - is equal to and then 255 2v5285 and
17:09 - notice i've kind of put all of my colors
17:11 - beside each other i put my width and my
17:12 - height beside each other
17:14 - and this way it's just much easier for
17:16 - me to figure out
17:17 - what is the find where and i might even
17:19 - maybe add a comment here
17:20 - and just say you know colors and maybe
17:24 - screen size something like that this is
17:26 - pretty obvious i don't need to add this
17:27 - comment but maybe you do something like
17:29 - that
17:30 - okay now i also just realized that i am
17:32 - using win
17:33 - i believe if i go to redraw window as a
17:35 - global variable here
17:36 - and so i'm going to take in win as well
17:39 - i'll take in
17:39 - window uh just to make sure that this is
17:42 - not global and actually no we'll just
17:43 - leave it win
17:44 - okay nice okay so now we're inside of
17:47 - the wall
17:48 - so i'm just gonna start reading through
17:49 - some of this uh most of it looks
17:51 - good so far all right so most of this
17:53 - looks good however i see this p
17:56 - o right and this is just a really
17:58 - undescriptive
17:59 - variable name i don't know what this
18:00 - means even adding like an s to it right
18:02 - this would be a lot better
18:03 - i know that this is position but po is
18:06 - kind of meaningless to me and even now
18:07 - reading at this i don't know exactly
18:09 - what this is i think this must be the
18:10 - new ball position
18:11 - but i'm not sure and so i'm going to
18:13 - change change this is a new
18:15 - ball underscore pause i'm going to
18:16 - assume that's what it is say new
18:18 - underscore ball underscore pause okay
18:20 - and then
18:21 - new underscore ball underscore pause
18:24 - nice
18:24 - okay now while i'm at this i just
18:26 - remembered something let's go back to
18:28 - this function here
18:29 - and notice how i said mouse x equals
18:30 - pause zero and mouse y equals pause one
18:33 - there's actually a way to do this in one
18:34 - line now you can make an argument for
18:36 - which is better which is worse but i'm
18:38 - just going to show you the way that you
18:39 - would do this in one line because it's
18:40 - more pythonic
18:42 - so if i go to mouse zero there or sorry
18:45 - mouse y there and then pause zero plus
18:47 - one so this is kind of the replacement
18:48 - of those two lines there i'm gonna leave
18:49 - it like this because i think this makes
18:51 - sense because these two variables are
18:52 - kind of grouped together in a sense
18:54 - okay but this will automatically sorry
18:56 - it needs to be like this actually
18:58 - uh this will decompose the position and
19:00 - then put it into mouse x
19:01 - and mouse y so the x obviously here the
19:04 - y obviously here
19:05 - now the other way i had it like this
19:06 - this works as well but that kind of
19:08 - defeats the purpose
19:09 - this oops let's go back here is called
19:12 - tuple decomposition and this is just a
19:14 - better
19:14 - you know cleaner way to do it okay so
19:17 - let's continue
19:18 - time power angle shoot okay that all
19:20 - looks good
19:22 - this looks good but now i have my line
19:25 - okay so this is fine i can define the
19:27 - line here but i
19:28 - think it would be better if i define the
19:30 - line at the top
19:32 - of my while loop now i understand why
19:34 - i'm doing it actually let's see here i
19:36 - think the reason i'm doing it after is
19:37 - because i'm calculating the line
19:38 - based on the new golf ball position so
19:41 - maybe that needs to be there
19:42 - i won't question the logic for now i'll
19:44 - leave it there but typically i would
19:46 - prefer
19:46 - to define that at the top of the while
19:48 - loop just to make it easier to see
19:49 - okay and then i'm redrawing the window
19:51 - and then i have
19:52 - my event loop okay so this is fine the
19:55 - only thing that i'm noticing here
19:57 - is this if statement so it says if not
19:59 - shoot and then in another indentation
20:01 - level i have all of this stuff i'm going
20:03 - to show you a little trick here
20:04 - to avoid having all of these indentation
20:06 - levels in python when you have a
20:08 - condition like
20:09 - if not something what you can actually
20:11 - do is
20:12 - reverse the condition and then simply
20:15 - bypass the rest of the for loop and put
20:18 - everything else below the condition so
20:20 - what i'm going to do here is say rather
20:22 - than not
20:22 - if not shoot i'm going to say if shoot
20:25 - continue
20:26 - so the condition i wanted to check was
20:28 - if i'm not shooting i was saying if i'm
20:29 - not shooting i want to do all of this
20:31 - stuff
20:32 - so rather than me checking if i'm not
20:33 - shooting and then doing all of this
20:35 - inside of here i'm going to check if i
20:37 - am shooting and if i am shooting i'm
20:38 - going to continue which means i'm going
20:40 - to skip
20:41 - all of this stuff so only if i'm not
20:43 - shooting will i end up actually hitting
20:44 - this
20:45 - and this is just a cleaner way and this
20:46 - is showing you kind of the break
20:48 - condition of the for loop or the
20:49 - continue condition of the for loop
20:51 - rather than the condition for when this
20:53 - should occur so this should always occur
20:55 - unless this happens so again you can
20:58 - make arguments for which is better
20:59 - but i prefer to have less indentation
21:01 - levels and so i usually do it like this
21:03 - because it's easier to read
21:05 - now here i'm just going to fix a few
21:06 - small things notice i have pause is
21:08 - equal to this okay that's fine
21:11 - now i have line one one line two two
21:13 - okay i'm just going to space these
21:14 - things out because again
21:16 - i like to have spaces between my
21:18 - operators so i can see what's going on
21:19 - here
21:20 - okay let's space space space that
21:23 - and that is better okay see i find this
21:27 - way easier to read than what i had
21:28 - before
21:29 - and then everything else here looks good
21:32 - so let's just do a quick spot check
21:34 - through here see if there's anything
21:35 - else that i could change and maybe clean
21:37 - this up
21:38 - but i think for now that that is
21:41 - all good again i don't really want to
21:43 - get into changing the logic i'm sure i
21:44 - could mess around with some of the logic
21:46 - and make this
21:46 - shorter code maybe easier to understand
21:48 - code but i just wanted to show you
21:50 - a few small and very easy things that
21:52 - you can do in pretty much
21:53 - any program to just make it look cleaner
21:56 - right
21:57 - add these constant variables always
21:59 - define your constants at the top of the
22:00 - program makes it really easy to go and
22:02 - change something
22:03 - right for example let's say i was using
22:05 - some color
22:06 - a bunch of times in my program i could
22:08 - keep writing the same color
22:10 - using the rgb tuple or i could just
22:12 - define a variable that holds that color
22:15 - and then use that variable everywhere
22:16 - that way later in my program all i have
22:18 - to do is
22:19 - change that variable to change the
22:21 - entire look of the program right
22:23 - stuff like that is just really good
22:24 - practice i'd recommend you just get in
22:26 - the habit of doing that even in short
22:28 - programs because the way you practice is
22:30 - the way you're actually going to write
22:31 - you know industry code or code that you
22:32 - submit to people
22:34 - all right so with that said i think i'm
22:35 - going to end the video here i do
22:36 - apologize if this was a little bit
22:38 - boring but i just wanted to walk through
22:39 - show you my thought process when it
22:41 - comes to refactoring and cleaning up
22:43 - code
22:43 - and hopefully you guys got something
22:44 - from this and just saw how you can make
22:46 - your code a little bit more readable
22:48 - and just make it a bit cleaner one of
22:50 - the big ones and it only showed up once
22:52 - here but one of the big things
22:53 - is this the indentation levels if you
22:55 - can think of it this way if you can
22:57 - negate the condition that you're
22:58 - checking
22:59 - and then simply skip the rest of the
23:01 - block if that condition
23:03 - is true then that's going to save you or
23:05 - just make your code look a lot cleaner
23:07 - because you're going to have you're
23:08 - going to be able to avoid all these
23:09 - indentation levels right
23:11 - and something simple to show you here is
23:13 - a lot of times people will do these like
23:14 - very nested if statements they'll say
23:16 - if this and then they'll say you know if
23:20 - this
23:21 - if this if this and they'll have like
23:24 - four levels of indentation
23:26 - and then inside of here it's like okay
23:28 - do this right so it's saying okay check
23:30 - all of these four things and then if all
23:31 - those four things are true
23:32 - do this now of course you could combine
23:34 - these into an and and put those in one
23:36 - if statement but maybe there's a reason
23:38 - why you have it this way
23:39 - but what you could do here is you could
23:41 - change this and make this flat
23:43 - by simply changing it to be like this
23:45 - you could say
23:46 - if not this
23:50 - if not this if not this
23:53 - if not this and then do this and then
23:56 - what you would do here is you would just
23:58 - say
23:58 - continue or break right depending on
24:01 - what you're doing you would say continue
24:02 - or break to get out of the for loop or
24:04 - to
24:05 - continue with the next iteration and
24:07 - then you can do
24:08 - what you want to do so of course there's
24:10 - exceptions to this
24:11 - it depends on the situation that you're
24:12 - in but always think of it like this and
24:14 - ask yourself can i make this a
24:16 - flat indentation can i do four separate
24:18 - if statements or do i have to nest them
24:20 - in with each other
24:21 - because it's really good to avoid having
24:23 - a ton of nested statements it just makes
24:24 - the code really complicated and you want
24:26 - to have
24:26 - as many flat kind of levels as possible
24:29 - all right so with that said i think i'm
24:30 - going to end the video here i hope you
24:32 - guys enjoyed if you did make sure to
24:33 - leave a like
24:34 - subscribe to the channel and i will see
24:35 - you in another one