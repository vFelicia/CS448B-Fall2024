00:00 - in this video I'll teach you everything
00:02 - you need to know about typescript as
00:04 - fast as possible so let's start with
00:06 - what typescript is now typescript is a
00:09 - superset of JavaScript which means it
00:11 - extends the capabilities of JavaScript
00:12 - by adding optional static types
00:15 - developed and maintained by Microsoft it
00:17 - was first released in 2012. now
00:19 - typescript helps you write more robust
00:21 - and maintainable code thanks to its type
00:24 - checking features it catches potential
00:26 - errors during development rather than at
00:28 - runtime which saves you tons of time and
00:30 - effort now don't worry about browser
00:32 - compatibility as typescript compiles
00:34 - down to plain JavaScript ensuring that
00:36 - your code runs smoothly across different
00:38 - platforms typescript is well suited for
00:41 - large-scale applications or when working
00:43 - with teams as it enhances the code
00:45 - readability and maintainability to sum
00:47 - it up typescript brings the benefits of
00:49 - static typing to JavaScript making it a
00:51 - powerful Ally for developing modern web
00:53 - applications now let's dive into setting
00:56 - up typescript and writing our first
00:57 - typescript code alright so I'm going to
00:59 - get into setting up and installing
01:01 - typescript but I did want to mention
01:02 - that if you're looking to get better at
01:04 - programming I do have a programming
01:05 - course called programmingexpert.io that
01:08 - you guys can check out from the link in
01:09 - the description and if you're at all
01:10 - interested in blockchain and web3
01:12 - technology and becoming a developer in
01:14 - that space then check out my other
01:15 - course blockchain expert again from the
01:17 - link in the description now let's set up
01:19 - typescript so the first thing we need to
01:21 - do to set this up is download node.js I
01:24 - imagine many of you already have this
01:25 - installed if you don't go to the node.js
01:28 - website install node.js once you have
01:31 - that installed we're going to open up
01:32 - some kind of directory that will do this
01:34 - project in and we're going to install
01:36 - typescript globally just so we have
01:38 - access to the typescript command from
01:40 - any directory so I'm going to type npm
01:42 - install Dash G and then typescript this
01:46 - only works when you have node.js
01:47 - installed now this will install
01:49 - typescript globally for us I'll be back
01:51 - once it is finished alright so that
01:52 - command finished pretty quickly if we
01:54 - want to check if this is working we can
01:55 - type the command
01:57 - tsc-v and that should give us the
01:59 - version of typescript that we're using
02:01 - if you see some output here then that
02:02 - means that installation was successful
02:04 - now that we've done that I'm going to
02:06 - create a new directory here or a new npm
02:08 - package sorry and then we're going to
02:10 - set up typescript by creating a
02:12 - tsconfig.json file so I'm going to type
02:15 - npm init Dash y this is going to create
02:18 - a package Json file for me in this
02:20 - directory so now I have an npm project
02:22 - and now I'm going to create a new file
02:24 - this is TS config dot Json this is where
02:28 - we're going to put configuration for
02:30 - typescript so I'm just going to paste in
02:32 - here a fairly basic configuration and
02:33 - then we'll go through the options so you
02:35 - can see that we have a Json object we
02:37 - have our compiler options and then we're
02:39 - specifying the target is es5 the type of
02:42 - module is common.js we're using strict
02:44 - mode the output directory is dis-t now
02:48 - this is the directory that our compiled
02:50 - typescript code will go inside of so
02:52 - essentially it's going to transpile our
02:53 - typescript code into JavaScript and that
02:56 - will then live in the dist folder and
02:58 - then I have skip libcheck which which is
03:00 - just going to skip checking any of our
03:01 - node modules or libraries so we don't
03:04 - have to actually go through the process
03:05 - of doing all the type checking on them
03:07 - you can disable this if you want but I
03:09 - usually just enable it and then I have
03:10 - include and this is specifying what
03:13 - files I want to include in my kind of
03:15 - typescript project here so in this case
03:17 - I'm including anything inside of SRC
03:20 - this here means that it can be any
03:22 - subdirectory of SRC and then I'm
03:25 - specifying that it needs to end in dot
03:27 - TS so this is a basic configuration for
03:31 - typescript now notice here if I hover
03:33 - over this that I'm getting an error and
03:34 - saying no inputs were found in the
03:36 - config file and that's because we have
03:38 - not created this SRC directory so what
03:42 - I'm going to do is create a directory
03:43 - here called SRC this is where typescript
03:45 - expects that our files are going to live
03:47 - and then I'm going to create a file here
03:49 - called index.ts and note that TS is the
03:53 - typescript extension and then you get
03:55 - the little TS logo here if you're inside
03:57 - of Visual Studio code alright so now
03:59 - inside of our TS file I'm just going to
04:01 - write some very basic typescript and
04:03 - then show you how the transpiling or
04:05 - compiling whatever you want to refer to
04:06 - it as works so I'm going to say let X
04:10 - number equal three okay so some basic
04:13 - typescript code where I'm specifying the
04:15 - type of this variable and now I want to
04:17 - show you that if I want to compile this
04:19 - code into JavaScript all I need to do is
04:22 - run from the directory where my ts
04:24 - config file is the TSC command this is
04:27 - kind of the Alias for building so if I
04:30 - do this and hit enter it's going to
04:31 - build our project into this DISD folder
04:34 - and you can see that we have our
04:35 - index.js where we have the same thing
04:38 - that we had here except now kind of
04:40 - converted into regular JavaScript where
04:42 - we don't have this type annotation all
04:44 - right so now that we've set up
04:45 - typescript let's have a look at some of
04:46 - the types that you can use within
04:48 - typescript so let's create some
04:50 - variables let's say let X colon and we
04:53 - can start with a number equal three just
04:55 - like we had before now note here that
04:57 - this is the way that you annotate types
04:59 - you put a colon and then you specify the
05:02 - type that this variable is going to be
05:04 - in this case I've made it equal to three
05:06 - I also could just Define the variable
05:08 - like this and then I could assign it
05:09 - later on so like x equals 2. now if I
05:12 - try to do something like x equals hello
05:14 - you're going to see that I get an error
05:15 - here it's telling me the type string is
05:17 - not assignable to type number there you
05:19 - go you've already seen a massive benefit
05:20 - of typescript in regular JavaScript you
05:23 - wouldn't get this type of error because
05:24 - there would be nothing specifying that X
05:26 - needs to be a number so very helpful for
05:29 - larger development projects regardless
05:31 - that's one of the most common types
05:33 - another type you can use here is a
05:35 - string fairly straightforward you can
05:37 - also use a Boolean values that's going
05:40 - to be true or false and you can use the
05:42 - any value now the any value is
05:45 - essentially skipping creating a type for
05:48 - a variable or for whatever it is that
05:50 - you're attempting to type this means
05:52 - that you can have anything inside of the
05:55 - X variable so really it's kind of saying
05:57 - no type so you put any I don't know if
05:59 - that makes sense or not but I can do
06:01 - something like x equals 4 x equals hello
06:04 - and typescript will not get mad at me
06:06 - because it has the type of any now one
06:08 - thing to note here is that you don't
06:09 - need need to manually specify the types
06:11 - for your variables they can actually be
06:13 - implied that's the same with your
06:15 - functions and with really anything else
06:17 - in typescript so if I do something like
06:19 - const hello is equal to hello world and
06:23 - then I go down here and I try to say
06:25 - something like hello minus eight you're
06:28 - going to see that I get an error and
06:30 - that's because it knows that the type of
06:32 - hello is a string right so the left hand
06:34 - side of an arithmetic operation must be
06:36 - of type any number or big int and since
06:38 - this is not of that type it's not going
06:40 - to work if I hover over this uh it
06:42 - actually doesn't tell me that it's type
06:44 - string but it does know implicitly that
06:46 - it is the type string because that's
06:48 - what I assigned to this variable alright
06:49 - so continuing we have the type of
06:51 - unknown so I could do something like
06:54 - let y
06:57 - unknown like that now the difference
07:00 - with unknown and any is that if you
07:02 - attempt to use the unknown type you're
07:04 - going to have to type cast this or
07:06 - convert it into a different type to be
07:08 - able to use it properly whereas with any
07:10 - it essentially kind of Skips doing any
07:12 - of the type checking we'll have a look
07:14 - at this later on but understand that any
07:16 - and unknown are different any is just
07:18 - going to kind of allow you to skip all
07:20 - of the type checking whereas unknown is
07:22 - going to now force you to do all kinds
07:23 - of type casting and checking to be able
07:25 - to use this variable properly alright so
07:28 - next we have the type of void now void
07:30 - is used when you want to specify the
07:31 - function is not going to return any
07:33 - value so let's say we create a standard
07:35 - function here I'm going to say function
07:37 - X and then we'll just put our
07:40 - parentheses here now if I wanted to
07:41 - annotate this function which I don't
07:43 - need to do but I can do I can put a
07:45 - colon here and then put void and this
07:48 - now indicates this function is not
07:50 - returning any type of value now same
07:52 - thing if I wanted to do function
07:53 - parameters here I could do something
07:55 - like let's say num one and this is a
07:58 - number and num2 this is a number as well
08:01 - now I've kind of typed this function and
08:04 - I know that I'm accepting two numbers
08:05 - for my parameters and I am returning
08:07 - nothing okay so that is the void type
08:11 - UL obviously could put a different type
08:12 - here like number and then that would
08:14 - mean that you're going to return a
08:15 - number however I have to actually return
08:17 - a number otherwise this is going to get
08:19 - mad at me so I'm returning num1 plus
08:21 - num2 and now I don't get any errors all
08:24 - right the next type that we have is no
08:26 - so of course I can do something like VAR
08:28 - uh vowel no is equal to no that is
08:34 - perfectly fine that is the null type
08:36 - continuing we have the undefined type so
08:39 - if I say Val undefined then obviously I
08:43 - can make this equal to an undefined
08:45 - value sometimes that's useful and we'll
08:47 - look at some more complicated types
08:48 - where you might use undefined all right
08:51 - next we have the array type so I can of
08:53 - course do something like VAR nums
08:56 - and then say number like this and then
08:59 - put my array symbol here or my two
09:01 - brackets then make this equal to
09:04 - an array of different numbers that is a
09:07 - valid type we can then have a
09:08 - two-dimensional array if we wanted to do
09:10 - that so now we're going to have to have
09:12 - an array inside of an array for this to
09:13 - be a valid type now Beyond array we
09:15 - actually have another type known as a
09:17 - tuple or a tuple however you want to
09:19 - refer to it as so let's say I have kind
09:21 - of an interesting object here let's just
09:22 - call this obj where what I actually want
09:24 - to have is a string and a number so what
09:28 - I can do is specify the type like this
09:30 - this is now a tuple type and that means
09:32 - that I have to have an array that has
09:34 - exactly two values one of which is
09:36 - string and one of which is a number so
09:38 - I'll say hello
09:39 - and two like that and now this is valid
09:42 - that's how you specify a tuple
09:44 - continuing we have the object type so I
09:47 - can put
09:48 - object like this and now it's expecting
09:50 - that we have some kind of object here
09:52 - there you go those are the core types in
09:55 - typescript now let's have a look at how
09:58 - we can create custom types which are
09:59 - probably the more useful things that
10:01 - you're going to be using quite a bit in
10:02 - typescript and some more examples of
10:04 - just typing our objects and using these
10:06 - different typescript features all right
10:08 - so moving on now to custom types which
10:10 - is probably why most of you are watching
10:12 - this video in typescript if you want to
10:14 - create a custom type use the type
10:15 - keyword and then you set the name for
10:18 - the type so I'll do a type like animal
10:20 - inside of here I now specify all of the
10:23 - properties that I want something of this
10:25 - type to have so I can do something like
10:27 - name and this can be a string maybe we
10:30 - have age
10:31 - this is going to be a number maybe we
10:34 - have the colors of this animal and this
10:35 - will be a string array and then maybe we
10:38 - have some optional Fields like let's say
10:40 - legs and this can be a number now notice
10:43 - I'm using this question mark here to
10:45 - specify that this is an optional value
10:47 - so we might have it or we might not have
10:49 - it and that means implicitly typescript
10:51 - is going to say that legs is a number or
10:55 - an undefined type because we might not
10:58 - have this property so it could be
11:00 - undefined or if we do have it it's going
11:02 - to be a number and I'll show you how we
11:04 - handle that in just a minute okay so
11:06 - this is a very basic type now of course
11:09 - we can continue and create different
11:10 - types and typically it is a good idea to
11:12 - put all of your types inside of a types
11:15 - file so you might have a types.ts file
11:17 - inside of here you might say something
11:19 - like export type call this maybe type
11:22 - one and then you would specify the type
11:24 - and then you would import this in the
11:25 - files that you needed it obviously that
11:27 - can get a bit messy if you have tons of
11:29 - different types you might want to
11:30 - separate them by subdirectory or where
11:32 - they're being used but just something to
11:34 - note that a lot of people will kind of
11:36 - dump all of their types inside of one
11:37 - file like types.ts all right so let me
11:40 - just create an animal here I'm going to
11:42 - say const dog is equal to and then I'm
11:45 - going to say name
11:47 - is Tim
11:49 - I will say the age is 10 and the colors
11:53 - are
11:54 - Brown
11:56 - and black okay so now I've created
11:59 - something that does actually adhere to
12:01 - this animal type but you'll notice that
12:03 - if I hover over it it's not specifying
12:05 - that this is type animal and that's
12:07 - because I've not annotated it as an
12:09 - animal so I don't need to do that to be
12:12 - able to use this like an animal object
12:14 - but sometimes it's going to be helpful
12:16 - for you to manually animate annotate
12:18 - this story so that you know that it's of
12:20 - this type so I'm saying dog now it's
12:22 - telling me it's a type animal so that's
12:24 - one way to do that another way to do
12:26 - this is to type as
12:28 - and then animal this is essentially a
12:31 - type cast or conversion where what we're
12:33 - doing is we're taking this type and
12:35 - we're telling uh typescript to treat it
12:37 - as the animal type so now if I hover
12:39 - over this same thing we're able to uh
12:41 - implicitly kind of Define that this is
12:43 - of type animal now let's just remove
12:45 - this just so I can show you that we can
12:46 - use this like an animal
12:48 - so I'm going to create a function here
12:50 - let's say const
12:53 - print animal
12:55 - we'll make this equal to an arrow
12:57 - function and we'll just take in an
12:59 - animal that is of type animal and then
13:02 - what I can do is say console.log
13:05 - and I will print the animal.name and the
13:09 - animal.h now you'll notice that if I
13:12 - pass this to print animal
13:14 - this is fine I don't get any type errors
13:17 - here and that's because again this can
13:19 - be treated as the animal type because it
13:21 - has the correct Fields if I were to
13:23 - comment out one of these fields here and
13:25 - get rid of the name then notice that I
13:27 - get an error because it says argument of
13:28 - type h colors is not assignable to
13:30 - parameter of animal uh property name is
13:33 - missing in this type and same thing if I
13:35 - try to now annotate this as an animal
13:37 - we're still going to get this error
13:39 - because we don't have name defined which
13:41 - is a property that we need however even
13:43 - though we are not including legs
13:45 - everything is fine now let me quickly
13:47 - show you what happens if we try to
13:48 - access this legs property so if I go
13:51 - here and I say animal dot legs it's fine
13:54 - and the reason why we can do this in the
13:56 - print statement is because it's either
13:57 - going to print undefined if it's not
13:59 - defined or the number of legs but if I
14:01 - tried to do something like
14:03 - const X is equal to
14:07 - animal.legs minus five notice I'm going
14:10 - to get an error here because this could
14:12 - be an undefined value so if this is the
14:14 - case what you can do and I don't
14:16 - recommend this but you can do this is
14:18 - you can use the bang operator and what
14:20 - this will do is make it so that
14:21 - typescript treats this as if it's a
14:23 - defined value now the issue with doing
14:25 - this is that you can sometimes have an
14:28 - undefined value that you attempt to use
14:30 - a bang on and that means we're now going
14:32 - to have undefined minus five and when we
14:35 - have that that's going to raise an
14:36 - exception for us at runtime which we
14:38 - don't want to occur so instead of using
14:40 - this bang what I'll typically do is
14:42 - something like this I'm going to have
14:43 - animal
14:44 - question mark
14:46 - animal dot legs colon and then probably
14:50 - something like zero now what this is
14:52 - saying is if animal dot legs is defined
14:54 - so pretty much if it's not undefined
14:57 - right that's kind of what I'm checking
14:58 - here if we want it to be more explicit
14:59 - we could say does not equal undefined
15:02 - then we will use animal dot legs
15:04 - otherwise we will use zero so this is a
15:07 - safe way for us to access that property
15:09 - just wanted to quickly show you them
15:10 - okay so now that we've kind of looked at
15:12 - that I just want to show you an example
15:14 - with some more complicated types and how
15:16 - we can kind of Nest types together so
15:19 - let's say that we have maybe something
15:20 - like a farm type okay on this Farm we're
15:25 - probably going to have animals which
15:26 - means we'll likely want to use our
15:28 - existing animal type so obviously we can
15:30 - do that we can specify animal
15:32 - and say that we're going to have an
15:33 - array of different animals now maybe we
15:36 - actually want to have say animal names
15:39 - to objects
15:41 - well what we could do is use some kind
15:43 - of mapping type which again is a more
15:45 - complicated type in typescript that I'll
15:46 - show you so oftentimes you want to have
15:49 - an object where you have some kind of
15:51 - key that is a specific value that maps
15:54 - to a value well the way that you do that
15:56 - is you define an object here inside of
15:58 - square brackets you specify the key so
16:01 - I'm going to have name
16:02 - which is a string and then this is going
16:05 - to map
16:07 - to the type of animal
16:09 - okay so I've said I have an object
16:11 - inside the object I have keys which are
16:13 - the name of type string and then the
16:16 - value associated with them is an animal
16:18 - so that's how you would do this using
16:20 - objects of course you can get more
16:22 - complicated here have nested objects
16:23 - nested types all that kind of stuff but
16:25 - these are kind of the common you know
16:27 - ways that you're probably going to
16:28 - Define different types all right so
16:30 - continuing here I want to show you a few
16:32 - operators you can use to join types
16:34 - together or to essentially allow for
16:37 - different types so let's say that for
16:39 - some reason maybe we want colors to be
16:41 - equal to a string array or a string we
16:46 - have the ability to do that in
16:47 - typescript by using this operator right
16:49 - here which is the pipe so what I can do
16:51 - now is specify that I have colors and
16:54 - that can be the type of a string array
16:56 - or just a single string I could then of
16:59 - course continue and add different types
17:01 - here as well that this could be equal to
17:03 - now obviously you don't want to go crazy
17:05 - because it makes it a little bit
17:06 - difficult when you're checking these
17:07 - different values and trying to use them
17:09 - but this can be useful if you want to
17:11 - have say two different types or an
17:14 - option for the types now continuing
17:16 - let's say
17:17 - that we have another type and this type
17:19 - is going to have everything that animal
17:21 - has plus a few other values well what I
17:25 - might do is the following let's say we
17:27 - have a type of I don't even know what
17:29 - would make sense here maybe like a
17:31 - monkey
17:32 - and let's say that on our monkey we want
17:34 - everything from animal but we also want
17:36 - to have a diet and let's just say the
17:39 - diet is a string I don't know some
17:40 - description of what they eat well rather
17:43 - than me writing all of this again inside
17:45 - of Monkey what I will do
17:48 - is have this type and then put an and
17:50 - symbol and then put animal now what this
17:53 - will do is an intersection of the two
17:57 - different types which means I must have
17:59 - all the properties on animal
18:01 - and on this original monkey type for it
18:04 - to be type monkey okay hopefully that
18:07 - makes a bit of sense but now if I look
18:08 - at my type monkey it is Diet plus all of
18:12 - the different values from animal so if I
18:14 - wanted to make a monkey I said const m
18:19 - monkey like this now I need to specify
18:22 - all of those types so I'll have my diet
18:24 - which we'll just say is food even though
18:27 - I know that's not very specific and then
18:29 - note here it's giving me an error
18:30 - because I need to specify name age
18:33 - colors Etc all right so just to wrap
18:35 - this up I'm just going to show you a
18:36 - small Edge case here when it comes to
18:38 - annotating types so let's say that we're
18:40 - defining a set for example in JavaScript
18:42 - so const s is equal to new set not
18:46 - setting new set like that and actually
18:49 - that reminds me I'm just going to go to
18:50 - TS config here and I'm going to change
18:52 - es5 to es6 because that's what I need if
18:55 - I want to use a set okay so now set is
18:57 - working fine notice though if I hover
19:00 - over set it says new unknown and then
19:04 - specifies the set type and it has
19:06 - iterable iterable whatever Etc now
19:08 - that's because right now um typescript
19:11 - doesn't know what the type of our set is
19:12 - going to be because we haven't put any
19:14 - values inside of it so what we can do if
19:17 - we wanted to ignore that is we could put
19:19 - at any and now we're not going to have
19:21 - that unknown type and we can just have
19:22 - anything inside of our set however what
19:25 - you're probably going to want to do is
19:26 - specify what the actual type will be so
19:28 - you can say new set and then specify
19:30 - that this is a number inside of these
19:32 - angle brackets and now if I hover over
19:34 - this we know that we have a set that
19:36 - contains numbers we could also do this
19:39 - where we specify the type here so we're
19:42 - going to say new set
19:44 - number like that and now this is the
19:47 - same thing so whatever way you want to
19:48 - do it is fine typically I let it
19:50 - implicitly uh kind of pick up what the
19:52 - type is by just specifying it here but
19:54 - you can obviously annotate it on the
19:56 - variable itself alright so now that
19:58 - we've discussed custom types I want to
20:00 - talk to you about interfaces and the
20:02 - advantage of using them over types in
20:04 - specific scenarios keep in mind this
20:06 - will be a high level overview there is a
20:08 - lot of differences between interfaces
20:10 - and types in typescript I'm just going
20:12 - to scratch the surface here and give you
20:14 - an introduction all right so let's have
20:15 - a look at this example here where we
20:17 - have both a type fish and a type dog now
20:20 - this is fine we have two types they
20:22 - share one property here which is the
20:24 - name and then we have a function that we
20:26 - want to be able to use on both our dog
20:28 - and our fish now in typescript we know
20:31 - that we can simply just put a pipe
20:33 - operator here and specify all of the
20:35 - different types that we can accept as an
20:37 - argument to this function now in this
20:39 - situation here where we have two
20:41 - different types we know that we can
20:43 - access the shared property of these
20:45 - types because well they both have the
20:47 - same property right so both dog and fish
20:49 - have name which means it doesn't matter
20:50 - what you pass here we're able to access
20:52 - name okay so that's fine we can print
20:55 - out their name now the issue arises here
20:57 - when we have all of a sudden like 20
21:00 - types 30 types 40 types that we
21:02 - potentially want to accept inside of
21:04 - this function that we all know are going
21:06 - to have this name property well I don't
21:09 - want to constantly keep adding you know
21:11 - that other type the other type the other
21:14 - type because really all I care about is
21:16 - that these types have the property name
21:19 - on them so rather than creating a new
21:21 - type and using that here I'm going to
21:23 - specify something known as an interface
21:26 - so I'm going to say interface animal
21:28 - like this
21:30 - and then we're going to specify that
21:33 - name
21:33 - is a required property now what I will
21:36 - do is I will switch the type annotation
21:39 - from fish or dog to be animal now what
21:43 - that allows me to do is to pass any type
21:46 - of object regardless of its type that
21:48 - implements the animal interface which
21:51 - means it simply needs to have this name
21:53 - property on it that allows me now to
21:56 - access name now I could access any other
21:59 - property that is on this interface and
22:01 - this makes it very easy and kind of more
22:03 - reusable for me because I don't need to
22:05 - constantly keep adding types to the type
22:07 - annotation and if for some reason
22:08 - anything changed in my animal interface
22:11 - then it automatically changes here
22:13 - rather than me maybe mistakingly
22:15 - removing a name from my dog or my fish
22:18 - and then breaking all of this code
22:20 - hopefully that makes a tiny bit of sense
22:22 - but typically you're using an interface
22:25 - when you want to view a specific object
22:27 - or type through the lens of another type
22:30 - so the interface is not going to be the
22:33 - type of any individual variable that you
22:35 - define I'm not going to say something
22:37 - like const X animal is equal to and then
22:41 - specify a name I can do that it's valid
22:44 - for me to do that but instead I'm most
22:46 - likely going to have a fish where then I
22:49 - Implement a function like swim so we say
22:51 - swim does this and then I will pass my
22:55 - fish and view it as if it's an animal
22:57 - inside of this function I know that
23:00 - might be a little bit confusing again
23:02 - there's a lot of overlap between how you
23:04 - can use interfaces and types inside of
23:07 - typescript typically though again you're
23:09 - using an interface when you want to
23:11 - ensure that whatever's being passed to a
23:13 - specific function or used in a certain
23:15 - area has certain properties on it but
23:18 - you don't care about the additional
23:19 - properties that exist on that object or
23:22 - what the original type actually is you
23:24 - just want to view it as this specific
23:27 - type alright so now I want to talk about
23:29 - enums or enumeration now to illustrate
23:32 - why we would want to use these let me
23:34 - just paste in a function example here so
23:36 - let's say we have a function where we
23:37 - want to get the price of a specific
23:39 - shirt however the only types of shirts
23:42 - we can have are small medium or large
23:44 - well in this case we can actually just
23:46 - write the three values that we're
23:48 - willing to accept here for shirt size
23:50 - um as the literal strings themselves so
23:52 - small medium large and then maybe we
23:54 - have some kind of switch statement where
23:55 - we're returning you know ten twenty
23:57 - dollars thirty dollars depending on the
23:58 - price of these shirts now that's fine
24:00 - you can do this however a problem arises
24:03 - when you want to change maybe small to
24:06 - be small right now I need to change that
24:08 - here as well and then I need to change
24:10 - any function signatures so that they're
24:13 - now passing that capital S also what
24:15 - happens if I add an additional shirt
24:17 - what happens if maybe I want to use
24:19 - these three values in a different type
24:21 - of function this is not very reusable
24:23 - and this is not great practice so you
24:25 - probably don't want to do something like
24:27 - this instead you'd want to create an
24:29 - enum so what I can do here is say enum
24:31 - shirt
24:33 - size
24:34 - is equal to or not equal to just have my
24:37 - parentheses like this and then I can say
24:40 - small is equal to small
24:43 - medium
24:44 - is equal to medium
24:48 - and large is equal to large and now
24:53 - rather than using small medium and large
24:55 - here I'm simply going to specify that
24:58 - I'm accepting a shirt size which now
25:00 - means I'm going to have one of these
25:01 - three values
25:03 - now for my cases I say shirt size dot
25:06 - small
25:08 - shirt size dot medium
25:12 - and shirt size
25:14 - dot large there you go I've just
25:17 - refactored this code so now first of all
25:19 - it's a little bit more clear what the
25:21 - type actually is and if I go and change
25:24 - any of my string values here like maybe
25:26 - now I want them to be lowercase or I
25:27 - want to add an additional size I can do
25:30 - that and I'm not breaking anything
25:31 - inside of this code now if I wanted to
25:34 - actually use this function what I would
25:36 - do is something like const price
25:38 - if we can type that correctly is equal
25:40 - to get shirt price and then I would pass
25:42 - my shirt size dot small like that so
25:45 - this is just a better practice a better
25:47 - way to do things I'm sure many of you
25:49 - seen enums before these are very useful
25:52 - and a lot of times I like to actually
25:54 - store a bunch of strings inside of my
25:56 - enums you of course can even store
25:57 - something like one two three you can do
26:00 - whatever you want but this allows you
26:02 - again to now use this type in multiple
26:04 - different places rather than writing in
26:06 - literal values which I don't like to be
26:07 - doing unless I have to I'm now using my
26:10 - enumerated value and then again it's
26:12 - kind of more reusable and flexible
26:13 - hopefully you guys can see the benefit
26:15 - of enums now let's move on alright so
26:17 - now I just want to spend a minute
26:18 - discussing what happens if you do
26:20 - actually want to have some kind of
26:22 - function or block of code what you're
26:24 - accepting different types so in this
26:26 - case I have an animal that could be a
26:28 - fish or a dog let's say this is the
26:29 - intended Behavior I actually want to do
26:31 - that and if it's a fish I want to call
26:33 - this swim function if it's a dog then I
26:36 - want to call this bark function well
26:38 - obviously I I can't just come here and
26:39 - go animal dot bark because bark is not a
26:43 - property property sorry that's shared
26:45 - between both the fish and the dog type
26:46 - same with swim I'm gonna get an error if
26:49 - I do that now to get around this what I
26:51 - could do is say animal
26:54 - as fish dot swim and this doesn't give
26:57 - me uh kind of a problem or a red
26:59 - squiggly but this is going to raise a
27:02 - runtime exception If instead of passing
27:04 - a fish I were to pass a dog to this
27:06 - function so before I can run this code
27:09 - with confidence that's actually going to
27:11 - work I need to check what the type of
27:13 - this variable is now unfortunately I
27:16 - can't just use the type of operator that
27:18 - I would normally use that's because our
27:21 - custom types here don't really allow us
27:23 - to use type of now I'll show you what I
27:25 - mean if I try to say if the type of
27:27 - animal is equal to fish which might be
27:30 - what you try
27:31 - you'll notice that this doesn't work it
27:33 - says this condition will always return
27:34 - false since the type's string number
27:36 - begin Etc uh have no overlap so when I
27:40 - check the type of one of my variables
27:42 - here it's only going to return one of
27:44 - these possible values in our case it's
27:46 - going to be an object it's not going to
27:48 - return what the name of the type is that
27:51 - we typed it of typed it as or using
27:54 - typescript that was a lot of types in
27:55 - one sentence anyways how do we get
27:58 - around this well what we actually need
28:00 - to do is create our own custom type
28:02 - check or type guard so what I'm going to
28:05 - do is create a function here called is
28:07 - fish
28:09 - now four is fish
28:11 - I'm gonna take an animal and this animal
28:13 - again could be a fish
28:15 - or a dog and then I'm gonna return from
28:18 - this function the animal
28:21 - is if we can type this correctly fish
28:25 - and then I'm going to have an arrow
28:26 - function I need to return this now what
28:29 - I'm essentially saying when I write
28:30 - animal is fish is that I'm returning if
28:32 - the parameter animal is of type fish so
28:35 - that's what this type annotation means
28:37 - when I write that now inside of here for
28:40 - me to actually check that I need to make
28:42 - sure that a fish has this swim method on
28:45 - it so to do that I'm going to return
28:49 - my animal as a fish
28:52 - dot swim
28:54 - does not equal undefined when I do that
28:57 - notice everything is fine because what
29:00 - I'm doing is I'm first converting my
29:02 - animal to the type fish I'm trying to
29:05 - access the swim property and if that's
29:07 - not undefined that means all is good I
29:10 - can go ahead and I can return my fish or
29:13 - I can return true that this is a fish
29:16 - if swim is undefined then I'm going to
29:18 - return false and that would mean that I
29:20 - had a dog
29:21 - hopefully this makes a little bit of
29:23 - sense I know it's kind of complicated
29:25 - but this is known as a custom guard or a
29:27 - type guard and now we can use this is
29:29 - fish function inside of here to ensure
29:33 - that when we call the fish.swim method
29:36 - it's going to be valid and not give us a
29:38 - runtime exception so I can now say if is
29:41 - fish and this is animal then I can say
29:45 - animal dot swim like that
29:48 - otherwise I can say animal dot buck and
29:52 - notice that now bark is going to work
29:54 - because if it's not a fish then it must
29:56 - be a dog so it's able to kind of imply
29:58 - that using this if else check statement
30:01 - that I've done here now my function is
30:03 - valid just wanted to show you that
30:04 - because sometimes you will need to write
30:06 - this kind of code all right so that is
30:08 - about to wrap up this video the very
30:10 - last thing I want to show you is how you
30:12 - ignore type checking for specific lines
30:14 - sometimes it can be very complicated to
30:16 - actually type annotate something or
30:18 - you're bringing something in from a
30:19 - library and you just want to ignore the
30:22 - kind of squiggly line that you're
30:23 - getting or the problem that's occurring
30:25 - so let's do a very simple example where
30:27 - we have something like const
30:29 - or we say something like let X number
30:32 - equal three and then we say or sorry
30:35 - equal to and then X is equal to hello
30:37 - let's say that we just want to ignore
30:39 - this problem for some reason we do
30:41 - actually want to do this well what I can
30:43 - do is go slash slash at t s Dash ignore
30:47 - and I put that right above this line and
30:50 - that's going to ignore what's on the
30:52 - next line so that I no longer get this
30:54 - compiler error or this what you call it
30:56 - linter error there's all kinds of other
30:58 - kind of comments you can do here that
31:00 - will ignore specific types of problems
31:02 - you're not just ignoring the entire line
31:03 - but I just wanted to show you this
31:05 - shortcut because sometimes it can be
31:07 - useful obviously don't overuse it you
31:09 - shouldn't have to use this but sometimes
31:11 - it is necessary so that's why I wanted
31:13 - to throw it out here anyways with that
31:16 - said I think I'm going to wrap up the
31:17 - video here this was meant to be a quick
31:19 - overview of typescript I think I got a
31:20 - little bit carried away showing you a
31:22 - ton of different features obviously I
31:24 - want to be thorough I want to make sure
31:25 - you guys have enough knowledge to
31:26 - actually be able to use this effectively
31:28 - so if you appreciate shaded the video
31:29 - make sure you leave a like subscribe to
31:31 - the channel and I will see you in the
31:33 - next one