00:00 - hello everybody and welcome to video
00:01 - three in the c plus plus tutorial for
00:04 - beginners
00:05 - now in this video we're going to be
00:06 - talking about variables and data types
00:09 - these are extremely important and this
00:11 - is where we'll actually start learning
00:12 - something new right because in the
00:13 - previous videos i kind of just showed
00:15 - you the same thing again
00:16 - with more detailed explanation here
00:18 - we're actually going to learn about how
00:19 - we can create variables
00:21 - how we can store values what the
00:22 - different types of variables mean and
00:24 - very foundational and important topics
00:26 - we need to know about c
00:28 - plus or any typed language in general so
00:30 - with that said
00:31 - let's dive into the video
00:35 - [Music]
00:41 - so the first thing that i'm going to
00:42 - start discussing here is something
00:43 - called data types
00:45 - now data types are extremely important
00:47 - in any programming language but
00:48 - especially important in a language like
00:50 - c
00:51 - plus which is statically and strongly
00:53 - typed now to really understand why data
00:55 - types are important we need to talk
00:56 - about variables which we will do in a
00:58 - minute
00:58 - but just like in math in programming we
01:01 - can have
01:02 - variables that store values so for
01:05 - example we may have a variable called
01:06 - x it may store the value 2. now if you
01:09 - saw an equation
01:10 - something like 4x plus 2 you would
01:12 - probably be able to tell me that this
01:13 - equals 10 because you know
01:14 - the value of x is 2. now x is what we
01:17 - consider a variable
01:18 - in this algebraic equation right and it
01:21 - has the value 2.
01:22 - now the value that is stored by a
01:24 - variable has a certain type
01:26 - in this case this value is just a number
01:28 - right the type of this value is a number
01:30 - we might call it an integer because it's
01:32 - a whole number we might call it a
01:33 - floating point decimal if it had say
01:35 - something like 2.9 or a floating point
01:37 - number
01:38 - you get the idea now in programming we
01:39 - have all these different data types
01:41 - these data types are used in different
01:43 - ways and they can be stored in a
01:45 - variable so variables can store
01:46 - different types and there's all kinds of
01:49 - different types in c
01:50 - plus and in any programming language now
01:52 - the five main data types i want to show
01:54 - you right here
01:55 - are the kind of foundational really
01:56 - important ones in c plus plus and they
01:58 - are the phone
01:59 - we have an int we have a float we have a
02:02 - bool
02:02 - we have a string and oops we have a
02:05 - character
02:06 - or a char these are the five most
02:09 - important data types that you need to
02:11 - understand in c
02:12 - plus now again when i'm saying data type
02:14 - i'm really just talking about the type
02:16 - of data the type of information that
02:18 - something may store
02:19 - or that we may use now an int stands for
02:22 - integer
02:22 - and an int is any whole number that does
02:25 - not contain
02:26 - a decimal so it doesn't matter whether
02:27 - it's positive negative or zero
02:30 - any whole number that does not contain a
02:32 - decimal point in it
02:33 - isn't it so the number seven isn't it
02:35 - the number 98 is an end the number
02:37 - negative nine isn't it
02:38 - number negative nine seven five seven
02:41 - six five isn't it
02:42 - zero is an int and so on and so forth
02:45 - ten is an int
02:45 - you get the idea so anything that does
02:47 - not contain a decimal is an int
02:49 - now a float is very similar to an int
02:52 - but it's any number that contains a
02:54 - decimal point contains a level of
02:56 - precision
02:57 - so if i have something like 7.0 even
03:00 - though
03:00 - this number theoretically in math is an
03:02 - integer because it's a whole number
03:04 - it is actually considered a float in our
03:07 - programmer in c
03:08 - plus because it has this decimal point
03:10 - right here and decimals are treated much
03:12 - differently in our program
03:13 - the way that binary represents them and
03:15 - everything like that is just a lot
03:16 - different than an integer
03:17 - and so that is why they are considered
03:19 - floats so something like negative
03:21 - 9.8 is a float something like 0.2 is a
03:24 - float
03:25 - something like 2.1 is a float whenever
03:27 - you have a decimal it doesn't matter
03:28 - what that decimal value is as soon as
03:30 - you see a period and is attached to a
03:32 - number
03:32 - then you know that you have a floating
03:34 - point value or you have
03:36 - this data which is considered a float so
03:38 - that's the difference between int and
03:39 - float
03:40 - really get that into your brain make
03:41 - sure you memorize that because you need
03:43 - to understand the difference
03:45 - next we move on to boolean now bool or
03:48 - boolean bool is the short form for
03:49 - boolean stands for
03:50 - true and i actually believe this is
03:53 - lowercase story
03:54 - and false so boolean value can be one of
03:57 - two things it can be true
03:58 - or it can be false now this is just like
04:00 - in binary where you can have a 1
04:02 - standing for true or you can have a 0
04:03 - standing for false so
04:05 - these are boolean values we're going to
04:07 - use these later on in this tutorial
04:08 - series but they're very important and
04:10 - just understand that a bull or a boolean
04:12 - is either true or false it's one of
04:13 - these two values
04:14 - nothing else and it must be with a
04:17 - lowercase
04:18 - so as soon as i go like this this is not
04:20 - a boolean this is actually nothing this
04:21 - is not a data type
04:23 - because it does not have the lowercase t
04:25 - but now when i put the lowercase d this
04:27 - becomes true so
04:28 - capitalization is very important in
04:29 - programming make sure you understand
04:31 - that as well
04:32 - int right here that's highlighting in
04:33 - kind of this turquoisty color
04:35 - is not the same as int with a capital
04:37 - lock they are very different
04:38 - all right so now we move on to string
04:41 - now string
04:42 - is actually a type that we need to
04:43 - import or not import we need to include
04:46 - in our program
04:47 - so a string is simply anything that is
04:49 - surrounded by double quotation marks
04:51 - anything inside of double quotation
04:53 - marks doesn't matter what it is
04:55 - is a string so if i do h this is a
04:57 - string if i do 7.0
04:59 - this is a string the reason it's a
05:00 - string is because it's surrounded by
05:01 - double quotation marks
05:03 - even though 7.0 technically speaking is
05:05 - a float right we can see 7.0 right here
05:07 - under float
05:08 - since it is surrounded with double
05:09 - quotation marks that makes it a string
05:11 - now we could have 7.0 hello we could
05:13 - have a bunch of random characters
05:14 - any character on the keyboard we can
05:16 - type if it's inside of double quotation
05:18 - marks it is a string
05:19 - a string can be any length a string
05:20 - could be zero length like this
05:22 - a string can have a ton of spaces inside
05:24 - of it it could have you know brackets
05:25 - whatever
05:26 - anything in double quotation marks is a
05:28 - string now a character
05:30 - is any single character on your keyboard
05:33 - doesn't have to be uh numeric or
05:34 - alphanumeric it can be a special
05:36 - character as well
05:37 - that is inside of single quotation marks
05:39 - this is the differentiator between a
05:40 - string and hr
05:42 - char again standing for character so x
05:44 - this is a character
05:45 - zero this is a character because it's
05:47 - inside of single quotation marks
05:49 - this is not valid because this is two
05:51 - characters inside of single quotation
05:52 - marks you cannot have that you have to
05:54 - have only one
05:55 - inside of single quotation marks to
05:57 - represent a character now if you have
05:59 - double quotation marks and you have one
06:01 - uh single character here this is still a
06:03 - string because it's inside of double
06:04 - quotation marks okay now as soon as you
06:06 - switch that
06:07 - into single uh quotation marks this
06:09 - becomes a chart
06:10 - or right care so there you go those are
06:12 - the main data types
06:13 - memorize what they are make sure you
06:15 - understand what they mean because they
06:16 - are extremely extremely important i
06:18 - cannot emphasize that enough
06:20 - now the next thing i'm going to show you
06:21 - here is just something to do with string
06:23 - so this string data type you're going to
06:25 - use all the time it's very important
06:26 - however it is not
06:27 - built in to c sharp or c sharp what am i
06:30 - talking about
06:31 - it is not built in to c plus by default
06:33 - what i mean is we must include
06:35 - the library that contains string
06:38 - into our program to use this string data
06:40 - type so what i'm going to do is copy
06:42 - this
06:42 - first line right here and i'm going to
06:44 - put include
06:46 - string like that what this is going to
06:48 - do
06:49 - is include the string library into this
06:51 - program
06:52 - this now means when we define something
06:54 - as a string this will actually work
06:56 - if you don't include string and then you
06:57 - try to use this string data type
06:59 - you will have an error because you
07:00 - cannot find string you won't be able to
07:02 - find a reference to it
07:03 - and also notice that string is not
07:04 - highlighting in this turquoise decoder
07:06 - like these other data types are
07:08 - so those are our main data types and
07:09 - this is a good point in time for me to
07:10 - talk to you about something called
07:11 - comments because i'm going to comment
07:13 - these out
07:14 - so obviously this is not valid code what
07:15 - i have right here i can't just write
07:16 - this
07:17 - this is just me trying to illustrate
07:18 - what the data types are
07:20 - so whenever you have something that you
07:22 - don't want your compiler or your c
07:24 - plus program to actually read but you
07:26 - want to have in your code maybe for
07:28 - reference for yourself or
07:29 - someone else to read you can create
07:31 - something called a comment
07:32 - now a comment is anything uh preceded by
07:36 - two forward slashes so if you have two
07:38 - forward slashes
07:39 - anything you type on this line is
07:41 - considered a comment it will be ignored
07:43 - by your program
07:44 - it is simply here to help you the
07:45 - developer you the programmer
07:47 - understand the program write something
07:49 - down it's just anything that you would
07:50 - like to ignore
07:51 - so this is what's known as a single line
07:53 - comment as soon as i start typing below
07:55 - this notice it no longer highlights in
07:56 - gray this is no longer
07:58 - a comment this will be interpreted by
07:59 - the compiler now that is a single line
08:01 - comment a multi-line comment is the
08:03 - following
08:04 - you have a forward slash and an asterisk
08:06 - and then an asterisk and another forward
08:08 - slash
08:08 - and this is a multi-line comment
08:10 - anything between these two lines
08:12 - will highlight in gray and will be
08:13 - ignored by the compile so as a single
08:15 - line comment and a multi-line comment
08:17 - usually you use single line comments
08:19 - however you have multiple lines you
08:20 - would like to comment out
08:21 - you use a single line comment or sorry
08:24 - what am i saying a
08:25 - multi-line comment which is this okay so
08:27 - there you go uh hopefully that is clear
08:29 - again this is multi-line
08:31 - you must have a terminator for it if you
08:32 - don't have a terminator you're going to
08:34 - have a crash in your program
08:35 - uh and then this is a single line
08:36 - comment like that okay so what i was
08:38 - going to do i actually had it in the
08:39 - multi-line comment was i was just going
08:41 - to leave these data types commented out
08:42 - in this multi-line comment at the bottom
08:44 - of my program just so it's ignored by my
08:46 - compiler
08:46 - and you guys can still read it so we
08:48 - will continue in one second but i need
08:49 - to quickly thank the sponsor of this
08:50 - video and this series which is algo
08:52 - expert aligo expert is the best platform
08:54 - to use from preparing for your software
08:56 - engineering coding interviews
08:57 - they have over 140 coding interview
08:59 - questions on the platform
09:00 - and i actually happen to work there as
09:02 - an algorithms instructor
09:04 - so with that said check out algo expert
09:05 - from the link in the description and use
09:07 - the discount code
09:08 - tech with tim for a discount on the
09:09 - platform so now that we understand data
09:11 - types
09:12 - let's talk about variables now variables
09:14 - are extremely important
09:15 - they're very versatile and they're used
09:17 - all over the place not just
09:18 - in program like i was saying before you
09:21 - could have a variable in math maybe
09:22 - x equals 2 and then you know substitute
09:25 - that into an equation or something
09:26 - whenever you reference x it's going to
09:27 - give you the value 2.
09:28 - now in programming it's very similar
09:30 - there's many different ways to define a
09:32 - variable but just think of a variable as
09:34 - some name to store some value some way
09:36 - to access some information
09:38 - you access the variable gives you that
09:40 - information you can also modify
09:41 - variables you can add variables you can
09:43 - change them you can assign variables to
09:45 - other variables
09:46 - very versatile you can do a lot with
09:47 - variables now to define a variable as i
09:50 - said there's a few different ways the
09:51 - first way to do this
09:52 - is to define the type of the variable to
09:54 - find the variable name
09:56 - put an equal sign which stands for an
09:57 - assignment operator
09:59 - so the equal sign is the assignment
10:01 - operator and then put
10:02 - some value here that is the type of the
10:04 - variable you defined
10:06 - and store it in that variable so when i
10:08 - write this line this is saying i am
10:10 - defining a variable called
10:11 - x it is of type int is an integer this
10:14 - means
10:14 - x may only hold integers and x is going
10:18 - to be assigned to
10:19 - the value 2. so now what i can do is i
10:22 - can actually
10:23 - c out x so c out and then i'll do my uh
10:26 - what is the stream insertion operator
10:28 - and then
10:29 - if i run this you will see that two will
10:31 - print out to the screen
10:33 - so the idea being again we defined that
10:35 - the type of variable is an int
10:36 - is called x it is equal to two let's now
10:39 - uh
10:39 - characters output x okay so let's run
10:42 - this
10:43 - uh if i go g plus plus and now i do
10:46 - run program notice to print to the
10:49 - screen
10:50 - there we go that is the basics of
10:51 - variables so when you define a variable
10:54 - it's very important that the value you
10:55 - store in the variable is the same type
10:57 - as the variable you defined
10:58 - now let me actually just show you what
11:00 - happens if i assign a type to this
11:02 - variable that is not
11:04 - the correct type so let's do this let's
11:07 - actually assign
11:08 - x equal to a string so this is a string
11:10 - because it's in double quotation marks
11:12 - the type of the variable x is an
11:14 - int and let's see what happens when we
11:15 - compile this program
11:17 - so when we compile this program we get
11:18 - an error it says invalid conversion from
11:20 - const char to int it says intex equals
11:24 - string
11:24 - and this is where the problem is so you
11:27 - don't have to worry about what this
11:28 - error message is really
11:29 - it's just kind of telling us that we
11:30 - cannot assign a string to an int because
11:32 - this variable is of typing
11:34 - however if i now try to do something
11:35 - like 2.7
11:37 - and i assign that to x let's see what
11:38 - happens so when i do this
11:40 - notice that the program actually
11:42 - compiles fine and now when i run the
11:44 - program though notice that we get 2
11:45 - printing out
11:46 - not 2.7 this is not me running a
11:49 - previous iteration of the compilation
11:51 - this is what happens when you assign a
11:53 - value that is not an integer
11:55 - to an integer variable what will happen
11:57 - is c plus plus will try
11:58 - to convert this value here in to an
12:01 - integer
12:02 - so whenever you try to assign a value to
12:05 - a variable that is not the correct type
12:07 - it will try to convert that variable or
12:09 - sorry not that variable that value
12:11 - into the correct type so in this case to
12:13 - convert a float to an int you simply
12:14 - chop off the floating point part
12:16 - so you remove the decimal and there you
12:18 - go you get the n2
12:19 - to show you another example if we did
12:21 - 4.7 and we run this now
12:24 - and then we run program we get four
12:26 - right it just chops off the decimal
12:28 - point
12:28 - so that is kind of some areas you may
12:30 - run into if you try to assign values to
12:32 - a variable that are not the correct type
12:33 - that is the first way to define a
12:35 - variable now of course we can define
12:36 - other types of variables as well we
12:37 - could say
12:38 - string we can say y and then we can make
12:40 - this equal to say
12:42 - tim so now let's see out y
12:46 - and let's see what happens so g plus
12:48 - plus
12:49 - run our program and then tim prints out
12:51 - to the screen no problem
12:53 - don't worry that this isn't highlighting
12:54 - it's just because it's from the uh the
12:56 - library it's not
12:57 - like built in by default into your
13:00 - standard c
13:00 - plus coding environment or whatever you
13:02 - may call it so that's another variable
13:04 - so when you create variables there are a
13:06 - few rules that you need to keep in mind
13:07 - and these are specific to the naming
13:09 - of your variables so when you name a
13:12 - variable you want to make sure that this
13:13 - name is unique
13:14 - so if i'm defining a new variable that i
13:16 - have not created before
13:18 - the name of this variable must be unique
13:20 - what that means is that i cannot
13:22 - redefine a variable i've already created
13:24 - so if i have something like intex equals
13:25 - 4.7
13:26 - i create the variable x and i store 4.7
13:29 - inside of it
13:30 - now if i try to say string x equals tim
13:33 - let's just see out x here so we don't
13:35 - get that error let's see what happens
13:37 - let me clear the screen
13:38 - let's run this notice we get an error it
13:40 - says that there was a previous
13:41 - declaration as
13:42 - index so we now cannot define this
13:45 - variable name as x because it was
13:46 - defined before now that's just one of
13:48 - the rules but there's a few more rules
13:49 - as well
13:50 - another rule is that your variable names
13:52 - may not contain any special characters
13:54 - other than underscores so you cannot
13:56 - contain spaces you cannot contain
13:58 - asterisks
13:58 - you cannot contain ampersands anything
14:00 - like that the only special character
14:02 - you're allowed is an underscore
14:03 - other than that you may contain letters
14:05 - and numbers they may be uppercase
14:07 - letters if you would like
14:08 - but you cannot start your variable name
14:09 - with a number so i cannot have a
14:11 - variable called 1y
14:13 - if i try to do this the compiler is
14:14 - going to yell at me and it's going to
14:16 - tell me that i cannot do that just
14:17 - not a lot okay but however i can put a 1
14:21 - at the end of the variable name so i can
14:22 - say something like y1
14:23 - so now let's try this let's see if the
14:25 - compiler yells at me
14:26 - it does not i can run the program
14:28 - everything still works
14:30 - now you can contain numbers in the
14:31 - middle of your variable name as well i
14:33 - could say like y
14:34 - one s right and that is totally fine
14:36 - that is valid you just cannot start
14:38 - with a number now a lot of times when
14:40 - you're creating variables you want to
14:41 - make sure that your variable name is
14:42 - descriptive so whatever your variable is
14:44 - holding you want to have the name
14:46 - actually be descriptive so a variable
14:47 - name like x
14:48 - is not very descriptive maybe it works
14:50 - in this case because we're just holding
14:51 - a number
14:52 - but in this case if i'm holding like my
14:53 - name in a variable i would want to call
14:55 - my variable name
14:56 - just so that it makes sense anyone else
14:58 - reading my program knows what this
14:59 - variable is holding
15:00 - because you have to remember as a
15:01 - programmer a lot of times you're not the
15:03 - only person
15:04 - reading or using the code that you wrote
15:06 - so just keep that in mind
15:08 - try to name your variable something
15:09 - relatively descriptive and the point of
15:11 - me saying that is a lot of times when
15:12 - you try to do this name them something
15:13 - descriptive
15:14 - you're going to realize that you need
15:15 - kind of multiple words to describe what
15:17 - your variable is holding
15:19 - if that's the situation what you want to
15:20 - do is the phone you want to use an
15:22 - underscore to act as a space so you
15:25 - could say something like name
15:26 - tim like that and then this would
15:28 - actually separate
15:30 - the variable right into kind of two
15:31 - separate words and since you can't use a
15:33 - space use an underscore instead
15:35 - now traditionally in c plus plus it is
15:37 - better practice to use something called
15:38 - camel case to do something like this so
15:40 - if i wanted to say
15:41 - name of user i would type it like this
15:44 - rather than typing it with underscores
15:46 - so name underscore of
15:49 - oops underscore user so this is the
15:52 - preferred way
15:52 - when you use camel case rather than what
15:54 - this is called which is snake case
15:56 - now you can use whatever you want you're
15:58 - not writing any production level code it
15:59 - doesn't really matter at this point but
16:00 - just figured i would mention that to you
16:02 - the kind of standard way for using
16:03 - multiple words is to have
16:05 - camelcase so that is the first way you
16:07 - define variables you do the type name of
16:09 - variable equal and then what is equal to
16:11 - although sometimes you would like to
16:12 - create a variable but you do not want to
16:14 - initialize it when i say initialize it i
16:16 - mean assign a value to it immediately
16:18 - in that instance what you can do is type
16:20 - the phone you can type the type of the
16:22 - variable
16:23 - then the variable name so in this case i
16:24 - can say index and what i've done is i've
16:26 - created the variable x but i have not
16:29 - assigned any value to it
16:30 - or i have not really initialized the
16:32 - variable what i can do now though
16:34 - since i've defined the type of this
16:36 - variable is i can assign something to it
16:38 - without having to rewrite the type
16:40 - so i can now say something like x equals
16:41 - 7 and then i can c
16:43 - out x and this will totally work so
16:46 - let's do this
16:46 - let's compile our program and what is it
16:49 - saying expected a semicolon
16:50 - uh where was it expecting the semicolon
16:54 - i realized that when i see outed x here
16:56 - i made a mistake i needed to add my uh
16:58 - stream insertion operator so let's now
17:01 - try this
17:02 - and we should see this works that was
17:03 - the error that i was getting okay
17:05 - compile is fine
17:06 - now we run and we get seven printing out
17:08 - to the screen so this is a way to define
17:10 - a variable
17:10 - uh kind of a little trick here if you
17:12 - want to define multiple variables but
17:14 - you don't want to assign anything to
17:15 - them you can say x
17:16 - comma y you can do the type beforehand
17:18 - and now you've created two variables
17:20 - that are both type int one called x
17:21 - one called y i assigned a value to x i
17:24 - have not yet assigned anything to y
17:26 - uh if i compile this program you'll see
17:27 - that this does work
17:29 - and we don't get any errors that's
17:30 - totally fine and you can also change the
17:32 - value of a variable
17:33 - once it has been initialized or once it
17:35 - has been created so now i can say
17:36 - something like x
17:37 - equals six and then maybe i'll say
17:39 - something like x
17:40 - equals eight and now what's going to
17:42 - print out well it's going to be eight
17:44 - so let's have a look here and we see
17:47 - that we get
17:48 - oops trying to get to the run program we
17:51 - get eight because at the point when we
17:53 - printed out the value of eight it had
17:54 - been changed or not eight
17:56 - of x it had been changed to eight so
17:58 - hopefully that's clear
17:59 - but that is kind of the very basics on
18:01 - variables there's a few other ways you
18:02 - can create variables with these two ways
18:04 - of the standard ways
18:05 - you can also have variables interact
18:06 - with each other so let's say i define
18:09 - y equals and i make this equal to
18:10 - something like 4. what i can do now is i
18:12 - can see out x and then right
18:14 - after i can see at 1. so let's have a
18:17 - look at these
18:18 - right here let's compile the program
18:21 - let's run it oops i accidentally
18:23 - compiled it again let's run it and we
18:24 - get 8
18:25 - 4. now we're not getting 84 we're
18:26 - getting 8 4 but they're just being kind
18:28 - of mushed together because we don't have
18:29 - a space
18:29 - in between that's fine but now let's see
18:32 - what happens if i do this
18:34 - x equals y and let's just see out x now
18:37 - take a guess what do you think is going
18:38 - to print out let's compile the program
18:42 - let's run the program and we got four
18:45 - the reason we got four is because we
18:47 - changed the value of x to whatever y is
18:49 - equal to
18:50 - which in this case is four so that is
18:52 - kind of the way that variables work
18:54 - just keep in mind you can change the
18:55 - value of variables but the value you
18:57 - change them to must be the same type as
18:59 - that variable
19:01 - so again when you define the variable
19:03 - type name
19:04 - equals assignment or you just do type
19:07 - name
19:07 - and then you can assign something to
19:08 - that variable or use it
19:10 - without having to redefine the type so i
19:13 - think that's pretty much all i need to
19:15 - show you about
19:16 - variables just keep in mind the data
19:18 - types are very important you must assign
19:20 - the correct type to a variable
19:22 - if you try to assign a type to a
19:23 - variable that is not the type of that
19:25 - variable
19:26 - c plus plus will try to convert that
19:28 - variable or convert that value sorry to
19:30 - the correct type and it can do that for
19:32 - a lot of instances
19:33 - but in some instances it cannot so you
19:35 - may get weird strange errors and that
19:37 - may be because you're trying to assign a
19:39 - value to a variable that is not the
19:41 - correct type so with that said that is
19:43 - going to conclude this video
19:44 - i hope that this was helpful and i look
19:45 - forward to seeing you in another c plus
19:47 - plus tutorial video
19:56 - you