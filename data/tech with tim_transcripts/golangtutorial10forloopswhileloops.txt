00:02 - [Music]
00:06 - hello everybody and welcome back to the
00:08 - golang tutorial so in this video we're
00:11 - gonna be talking about four loops now
00:12 - there's a fair amount to cover when it
00:14 - comes to four loops especially because
00:16 - for loops actually are the same thing as
00:17 - while loops in Ingo which is different
00:20 - than a lot of other programming
00:21 - languages and they've actually made
00:23 - these for loops pretty flexible in the
00:24 - way that you write them so there's like
00:26 - five or six different styles of for
00:28 - loops you can write so I'll try to cover
00:29 - them all but just keep in mind that I
00:31 - might not go into extreme depth in each
00:33 - of these these different paradigms of
00:35 - writing the for loop so first of all
00:37 - what is a for loop I'm sure some of you
00:39 - are probably wondering what that is well
00:41 - the idea behind a for loop is being able
00:43 - to execute the same block of code
00:45 - multiple times so obviously you could
00:48 - understand why this would be useful
00:49 - right if we wanted to print something a
00:51 - hundred times it's probably not a good
00:53 - idea to actually type the print
00:55 - statement a hundred times right like I
00:56 - don't really want to write fmt dot print
00:59 - line hello a hundred times if I want to
01:01 - print it a hundred times and in fact a
01:04 - big issue occurs too when you know you
01:05 - get asked to print it a hundred times by
01:07 - your employer whoever it is and then the
01:09 - next day they say actually printed 25
01:11 - times so actually I only printed ten
01:12 - thousand times right you got to change
01:14 - all the code rewrite a bunch of stuff to
01:16 - do that where if we use something like a
01:17 - for loop all we would have to do is
01:19 - change one number and boom we could
01:21 - modify that so let me show you what a
01:23 - for loop looks like and then we'll just
01:25 - get into some examples and understand
01:26 - how they work so a for loop starts with
01:29 - the keyword for now the only necessary
01:32 - thing for a for loop is the keyword for
01:34 - and these brackets now this gonna seem
01:37 - weird because in other programming
01:38 - languages you actually need to write
01:40 - three parts to a for loop that's the
01:42 - variable declaration the condition and
01:44 - then what you want to do at the end of
01:46 - each loop so the increment or the
01:47 - decrement at the end of each loop now
01:50 - with golang these work as while loops as
01:53 - well no a while loop essentially loops
01:54 - wallis certain condition is true so for
01:57 - a for loop what we can do is we can just
02:00 - write some condition here so let's say
02:02 - we have some vow act so let's an X colon
02:04 - equals three and maybe while X is less
02:07 - than five we want to leap well this is
02:10 - actually a valid for loop and goaling we
02:12 - say for X less than five do this and
02:15 - what that says is essentially while X is
02:18 - less than five
02:18 - keep doing what whatever is inside of
02:21 - this four loop now we define the
02:23 - variable up here we're checking the
02:24 - condition here and what we'll need to do
02:26 - to make sure that this isn't an infinite
02:28 - loop is we need to modify the value of x
02:31 - we need to add something to it so that
02:32 - at some point in time we actually escape
02:35 - this for loop right because if I just
02:37 - wrote something like for true here this
02:39 - is a condition that's fine I can write
02:41 - this here it's true that's always true
02:43 - which means there's no way for me to
02:45 - escape this for loop at least with our
02:47 - current understanding and this will just
02:48 - go on forever and ever and ever and ever
02:50 - until the program crashes are until you
02:52 - tell it to quit so keep that in mind
02:54 - that it's very easy to make what's known
02:56 - as infinite loops and you always want to
02:58 - make sure that your loop has some way of
02:59 - ending so that you don't get stuck in
03:02 - the issue of having to close your window
03:03 - or close the command prompt because you
03:05 - made an infinite loop so anyways what
03:07 - I'm gonna do is just say X plus equals 1
03:09 - here and then up at the top what I'm
03:11 - gonna do is say FM t dot println and
03:14 - let's actually print the value of x so
03:17 - this is the first kind of idea behind a
03:19 - for loop you have a variable you write
03:21 - out what is this saying it's your place
03:23 - with X plus plus ok that's fine let's
03:25 - just do X plus we sorry what you just
03:27 - saw there I'm gonna interrupt myself is
03:29 - I had X plus equals 1 and if go language
03:33 - told me to change it to plus plus
03:34 - because plus plus just adds one minus
03:37 - minus will subtract one that's known as
03:39 - increment and then in case I haven't
03:41 - shown this what plus equals does is
03:43 - simply add whatever the value is on the
03:45 - right hand side here to the value X so
03:48 - this would add 5 to 3 would you give me
03:51 - 8 right but if I just want to add one
03:52 - then I put plus plus now the idea is
03:55 - that at the end of each loop I'm gonna
03:57 - add 1 to the value of X so I can kind of
04:00 - keep track of where X is so we start at
04:02 - 3 we go ahead we say okay is X less than
04:06 - 3 or is X less than 5 yes it is because
04:08 - its value 3 so we go ahead we print 3
04:11 - now we add 1 to X so now we come back up
04:13 - to the top of the for loop X is 4 and we
04:16 - say okay it's 4 less than 5 yes it is so
04:18 - we print 4 we add 1 to X what is that
04:21 - now 5 we go back up to the top of the
04:23 - for loop is 5 less than 5 no
04:25 - not so we break out of the for loop and
04:27 - we stop looping that's the process
04:29 - behind this so let's actually have a
04:30 - look at this and I'll show you so CL s
04:33 - go run tutorial dot go so we print out
04:37 - the value three four and that's all we
04:39 - get for this for loop now of course I
04:41 - can start at something like zero as well
04:43 - if I start at zero then we should see
04:45 - let's have a look
04:47 - 0 1 2 3 4 5 and say we wanted to include
04:49 - the value 5 then I could change this to
04:52 - 6 or I could change this to less than or
04:54 - equal to so then this condition will be
04:56 - true when X is 5 which means we can
04:59 - print 5 so let's go ahead and do that
05:01 - and we get there you go 0 1 2 3 4 5 now
05:05 - there's a lot of practical uses of for
05:07 - loop this probably one of the most used
05:09 - piece of syntax in programming is a for
05:11 - loop so it's important to understand how
05:13 - these work so this is the first kind of
05:15 - design you make some kind of variable
05:17 - here you have a condition and then you
05:19 - increment it somewhere in the loop now
05:21 - the issue with this is you have to
05:22 - remember to do all this right you got to
05:23 - remember to define the variable you got
05:25 - to put the condition you got to remember
05:26 - to increment it so there's another style
05:28 - of for loop and I'll write it so that it
05:30 - does the exact same as this down here
05:33 - now this style um does the exact same
05:36 - thing it just looks different so you say
05:37 - for you define a variable so let's say X
05:40 - less than equal to 0 you put a semicolon
05:42 - actually here then you say X you put
05:45 - your condition so I'll say X less than
05:47 - equal to 5 and then you say X plus plus
05:49 - and then inside of here you say fmt
05:52 - println X now this does the exact same
05:55 - thing as this in just a different way of
05:58 - writing it so rather than defining the
06:00 - variable outside the loop and
06:02 - incrementing inside the loop we say X is
06:05 - equal to 0 define that here X less than
06:08 - equal to 5 and then X plus plus so the
06:10 - formula goes definition or declaration
06:13 - of the variable condition some kind of
06:15 - increment and we separate those by
06:17 - semicolons then we can go ahead and
06:19 - print that line and let's actually run
06:22 - this I'm just gonna comment this out I
06:24 - haven't shown this before but this is a
06:26 - multi-line comment so if you do a
06:28 - forward slash and then the asterisks and
06:30 - then at the end of wherever you want to
06:32 - stop commenting out you do an asterisks
06:34 - and a forward slash it will comment out
06:36 - the entire kind of block of that so in
06:38 - between those
06:39 - things okay so let me run this now and
06:41 - let's just make sure it does the same
06:42 - thing okay so we get if we look here and
06:48 - I scroll up to 0 1 2 3 4 5 so there you
06:53 - go so that printed all the way up to 5
06:55 - starting at 0 and of course we can add
06:58 - more than one if we wanted to at the end
07:00 - of this loop - so I could say X plus
07:01 - equals 2 and when out what's gonna
07:03 - happen is we're gonna count by two so if
07:05 - we run this and we have a look we get
07:08 - zero to four right so we didn't print 6
07:10 - because as soon as we got to the value 6
07:13 - that wasn't valid for the loop so we
07:15 - didn't enter it and we didn't go inside
07:17 - okay so those are kind of the two main
07:19 - styles so what you can do is you can
07:21 - write it like this where you just put
07:23 - the condition or you can write it with
07:25 - all of them at the top here separated by
07:27 - semicolons and that's like the basics
07:30 - behind writing for loops now I'm gonna
07:32 - show you a few examples of how we use
07:33 - for loops so you it makes sense to you
07:35 - why I've even shown you all this but the
07:37 - other style and I showed this at the
07:38 - beginning right is I can actually just
07:40 - do four like this if I wanted to and
07:43 - this what this will do is actually set
07:45 - up what's known as an infinite loop
07:46 - which we talked about so this is the
07:48 - same as writing like for true if you
07:50 - just omit the true and just write for
07:51 - but how do I get out of this well
07:54 - there's actually two keywords that I
07:55 - need to show you that can be used inside
07:57 - of a for loop that are gonna really mesh
07:59 - well with the example I'm about to show
08:00 - so these two keywords are break and
08:03 - continue now what break does is actually
08:06 - just immediately exits the loop so say
08:09 - that we're here right and as soon as we
08:11 - hit this break keyword it doesn't matter
08:13 - what the value of x is it doesn't matter
08:15 - if it's still satisfying this condition
08:16 - X is less than equal to 5 it just breaks
08:19 - the loop and it goes immediately to the
08:21 - end of this bracket it skips anything
08:23 - below it it doesn't do anything below it
08:25 - and then it continues the program from
08:27 - there so as soon as I hit break I jump
08:29 - from line eight to line ten and I'm done
08:31 - I'm done the for loop
08:32 - now what continue does a little bit
08:34 - different as soon as I hit continue
08:36 - it does skip everything below it but it
08:39 - actually immediately jumps to the top of
08:42 - the loop so it goes back to the
08:44 - beginning of the loop and keeps running
08:46 - from there so nothing changes with these
08:48 - counting variables all it does is
08:50 - immediately just go back to the
08:52 - beginning of the
08:52 - loop so that anything below it no longer
08:54 - happens so you can think of break exits
08:57 - and goes to the end continue doesn't
08:59 - mess anything up just goes right back to
09:01 - the very beginning and there's many
09:02 - different uses for why we would want to
09:04 - do something like this
09:05 - so let's actually do an example and what
09:08 - I want to do is I want to print out I'm
09:11 - trying to think of this a good way to do
09:14 - this I want to print out all the numbers
09:16 - that are divisible by five seven and
09:18 - nine that are in between zero and a
09:21 - thousand so I'm gonna make my loop go up
09:23 - to a thousand I'm gonna count by one so
09:25 - just X plus plus we're going to start at
09:28 - zero and all the numbers that are
09:30 - divisible by always that I set like 3 7
09:33 - 9 I don't know we'll pick some random
09:34 - ones we'll print those out so how can I
09:36 - go about doing that well what I'm
09:38 - actually gonna do is make an if
09:39 - statement inside the for loop and I'm
09:41 - gonna say if X does not equal 0 and so
09:45 - we do this'll end here and X mod 3
09:49 - equals equals 0 so that says if X mod 3
09:52 - which is the remainder of X divided by 3
09:55 - is equal to 0 which means 3 evenly
09:58 - divides X then that means it's divisible
10:01 - so then after that we'll say and X mod 7
10:05 - equals equals 0 and X mod 9 equals
10:11 - equals 0 so if that's all true then that
10:14 - means that X is divisible by 3 7 & 9
10:16 - then we're gonna print out X so since a
10:18 - fmt dot print line let's just print X
10:21 - and then what I'm gonna say is continue
10:24 - and what that means is just jump back to
10:26 - the beginning of the loop now down here
10:28 - what I'm gonna say is FMT dot print line
10:31 - like this and I'm just gonna print a big
10:34 - end so essentially if the number is not
10:37 - divisible by what is it by all these
10:39 - things or this condition isn't true we
10:41 - print n otherwise we're gonna print the
10:44 - actual number so what this is gonna do
10:46 - is it's gonna make sure that when we
10:48 - find a number that's divisible by all of
10:51 - these things we don't print n we only
10:54 - print n when it's not divisible by that
10:57 - now in fact this is gonna be I don't
10:59 - want to actually print n I just wanted
11:01 - to show you an example of when we would
11:02 - use continue like say there was stuff
11:03 - down here that you don't want to do
11:06 - when this if statement doesn't happen
11:08 - well you could there's two ways to do
11:10 - this right we can use the continue
11:12 - statement which we'll just go back to
11:13 - the top of the loop or I can put in else
11:16 - here and put this inside of here now
11:19 - typically it's a lil bit cleaner to use
11:20 - continue but we can use the else
11:22 - statement as well but actually for this
11:24 - example I'm not gonna print n just cuz
11:26 - in the output I want to actually be able
11:28 - to see these numbers which is gonna be
11:30 - hard to do if we print n so let me erase
11:32 - that and let's boot this up here run and
11:37 - see what we get
11:38 - okay oh so I didn't save my file one
11:40 - second let's run this again and there we
11:45 - go so these are all the numbers that are
11:46 - divisible by three seven and nine that
11:50 - are in the range of zero and a thousand
11:52 - so that's a cool example of how we can
11:54 - use a for loop is we can loop through a
11:56 - bunch of numbers and then we can check
11:57 - if they meet some condition if they do
11:59 - we can print them out otherwise we don't
12:01 - have to now in fact what I'm actually
12:03 - gonna do now is I want to say let's
12:05 - print out the first number that
12:07 - satisfies this condition so the first
12:09 - number where it's divisible by three
12:11 - seven and nine and only that number what
12:14 - I've done is I've made this a break so
12:15 - as soon as this happens we'll print the
12:17 - number and then break the for loop so
12:19 - now what happens if we look at it is we
12:21 - should just get that first number that
12:23 - was in that list of values which is 63
12:25 - right so that's the idea behind break
12:27 - and continue and hopefully that's
12:29 - explained for loop to you so I think
12:31 - with that I'm gonna wrap up the video
12:32 - here I hope you guys enjoyed if you did
12:34 - make sure you leave a like subscribe and
12:36 - I will see you in the next goal and
12:38 - tutorial