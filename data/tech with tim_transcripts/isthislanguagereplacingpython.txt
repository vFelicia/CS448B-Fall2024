00:00 - if you watch my videos then you know
00:01 - that I love python it's one of my
00:03 - favorite programming languages I use it
00:06 - all the time and I have literally
00:07 - hundreds of hours of content teaching it
00:09 - on this channel with that said though
00:12 - I'll be the first to admit that there's
00:13 - a lot of issues with python it's
00:16 - notoriously Slow It suffers from the
00:18 - global interpreter lock and that means
00:20 - that a lot of programmers start out
00:22 - learning Python and then move on to some
00:24 - more capable languages like C plus plus
00:26 - go rust Java Etc they might not want to
00:29 - do that they might love the syntax of
00:31 - python but they have to due to a lot of
00:33 - its limitations now fortunately for all
00:35 - of us python users there may be a
00:37 - solution coming very quickly called Mojo
00:40 - now Mojo is a new programming language
00:42 - designed by a company called modular
00:44 - it's not even available yet you can't
00:46 - even download the compiler but from what
00:48 - it's promising on its website in The
00:50 - Limited documentation that I've read it
00:52 - seems like it can be a great solution
00:54 - for anyone who wants to use Python but
00:56 - get the performance of a language like C
00:58 - C plus plus or rust in fact Mojo even
01:01 - claims to be 35
01:02 - 000 times faster than Python and if
01:04 - that's even remotely true then this is
01:06 - going to be a pretty big deal so with
01:07 - that said let's have a look at Mojo and
01:09 - just go through some of the features
01:10 - that it's promising after I share with
01:12 - you another really cool tool that's
01:14 - going to rapidly speed up your workflow
01:16 - which is the sponsor of this video
01:18 - Docker Docker is a suite of software
01:20 - development tools for creating sharing
01:23 - and running containers and can
01:24 - dramatically accelerate and simplify
01:26 - your workflow for millions of developers
01:28 - a Docker is the de facto standard to
01:31 - build and share containerized apps from
01:33 - the desktop to the cloud now fortunately
01:35 - it's got even easier to work with Docker
01:37 - with their new release of Docker init
01:40 - the new Docker init CLI generates assets
01:43 - for your projects making it even easier
01:45 - and faster to create Docker images and
01:48 - containers running Docker knit walks you
01:50 - through the entire creation of necessary
01:52 - files with sensible defaults these files
01:55 - include Docker file dot Docker ignore
01:58 - and dockercompose.yaml Docker in its
02:00 - simplifies project creation saves you
02:03 - time and effort and best of all is
02:05 - completely free now if you're like me
02:06 - and you value time and speed this tool
02:09 - is an absolute Game Changer and you can
02:11 - download it by just downloading the
02:12 - latest version of Docker desktop from
02:14 - the link in the description not to
02:16 - mention Docker is also running a
02:18 - giveaway where they're going to be
02:19 - giving away 50 sets of Docker swag all
02:22 - you have to do to enter that is join my
02:23 - Discord server at discord.gg
02:26 - twt that link will be in the description
02:29 - as well thanks again to Docker for
02:31 - sponsoring this video now let's get into
02:33 - it so let's start with what we know
02:34 - about Mojo first of all this is aiming
02:37 - to be a super set of python that means
02:40 - that all of the Python features you know
02:41 - and love eventually you'll be able to
02:43 - use directly inside of the Mojo language
02:45 - that also means that Mojo will provide
02:47 - additional features that you can use
02:49 - that should speed up the execution of
02:51 - your program and allow for things like
02:53 - strong type checking so think typescript
02:55 - for JavaScript that's kind of how Mojo
02:57 - is positioning itself except it's prom
02:59 - promising massive benefits in terms of
03:02 - speed so if I scroll through the website
03:04 - here Mojo is really focused on AI and
03:06 - systems level developers where what you
03:08 - need is actually raw performance you're
03:10 - trying to manipulate maybe memory or
03:12 - some lower level features that you don't
03:14 - typically have access to in Python and
03:17 - by doing that you're able to speed up
03:18 - the compilation and interpretation of
03:21 - your code so I'll just scroll through
03:22 - some of the main points that they have
03:23 - here first of all usability and
03:25 - programming write everything in one
03:27 - language so write python or scale all
03:29 - the way down to the metal program the
03:31 - multitude of low-level AI Hardware no C
03:33 - plus plus or Cuda required so it goes
03:35 - through a few of the different features
03:36 - it has here I'm sure to many of you this
03:38 - means nothing but for people that are
03:40 - low level developers that typically
03:42 - would have to write libraries in C plus
03:43 - plus Mojo can be a pretty big deal
03:46 - allowing you now to do this in Python
03:48 - and use these additional features to get
03:50 - closer to the metal continuing unlock
03:52 - python performance so utilize the full
03:54 - power of Hardware including multiple
03:56 - process course Vector units Etc so the
03:59 - basic example here pretty much
04:00 - illustrates this in your standard Python
04:02 - programming language you have a global
04:04 - interpreter lock meaning even if you
04:06 - have a multi-threaded application it's
04:07 - only going to run on one CPU core at a
04:10 - time really limiting its performance
04:12 - with Mojo that's not an issue you have
04:14 - access to multi-threaded and parallel
04:16 - processing which means you can actually
04:18 - run your different threads on multiple
04:20 - CPU cores at the same time continuing
04:23 - Mojo is promising up to 35
04:25 - 000 times faster execution times than
04:28 - native python obviously I can't verify
04:30 - this this is just what they have on the
04:32 - website and I'm sure this is only the
04:33 - case for very specific tasks however you
04:36 - get the idea here it's kind of giving
04:37 - the comparison with the different
04:38 - compilers languages Etc now one of the
04:41 - great things about Mojo at least again
04:43 - according to their website is that you
04:45 - will be able to import any existing
04:46 - python libraries or modules that means
04:49 - that anything you would have used in
04:50 - Python say like the numpy package you
04:52 - can just import directly inside of your
04:54 - mojo code and use it just like it was
04:56 - normal python going through here there's
04:58 - a bunch of other stuff that's kind of
04:59 - focused on AI I won't get into that
05:01 - right now and just as a reminder to you
05:03 - this is not currently available right
05:05 - you can't download the compiler and mess
05:07 - with it what you can do is go into this
05:09 - playground that I just got access to and
05:11 - kind of run your code in a Jupiter
05:12 - notebook which we'll do in just a second
05:14 - so we're going to dive into that
05:15 - notebook in a minute but I just want to
05:17 - give you a high level overview of some
05:19 - of the problems with python so python
05:21 - obviously has This Global interpreter
05:23 - lock what that really means is that if
05:25 - you have a multi-threaded program where
05:27 - you've split your program up into
05:28 - different pieces that can be executing
05:30 - independently since we have this lock
05:32 - only one of these threads can execute at
05:35 - a time now there's a way to get by that
05:37 - using something known as
05:37 - multi-processing but this becomes much
05:39 - more complicated and gives you all kinds
05:41 - of problems when it comes to accessing
05:43 - shared memory and resources that I don't
05:45 - want to dive into here so first of all
05:47 - Mojo essentially removes that Global
05:49 - interpreter lock with the compiler and
05:51 - interpreter that it uses again we don't
05:53 - need to dive into the weeds there the
05:55 - next problem with python is that
05:56 - although it does provide a lot of
05:58 - bindings for C and C plus plus code this
06:01 - means that if you want to write any
06:02 - performant application in Python what
06:04 - you're really doing is writing some C or
06:06 - C plus code building some kind of
06:08 - wrapper around that and then importing
06:10 - that or using that from python now this
06:12 - can make it extremely complicated to
06:13 - debug that code to find the errors that
06:16 - are occurring and just to write that
06:17 - code in the first place now all of a
06:19 - sudden you want to do something very
06:20 - performed in Python like systems
06:22 - programming and you need to go and
06:23 - become a c plus developer and then learn
06:25 - all of the intricacies between the
06:27 - different Python compilers and how
06:29 - you're going to actually be kind of
06:30 - injecting or importing this code into
06:32 - python very very high level overview it
06:35 - might not be entirely accurate but you
06:36 - get the point here if I want to do
06:38 - something performance now I'm outside of
06:39 - the Python ecosystem I'm learning
06:41 - something like C or C plus plus and
06:43 - that's probably not the best use of my
06:44 - time or something I really want to be
06:46 - doing if all I'm trying to do is just
06:48 - squeeze performance out of this language
06:49 - now there's various other problems with
06:51 - python as well a lot of them coming from
06:53 - how python code is compiled and
06:55 - interpreted and the fact that python is
06:57 - a dynamically typed language meaning
06:59 - there's a lot of inferences that cannot
07:00 - be made during the compilation phase of
07:03 - your python code which really reduces
07:05 - the performance so again Mojo is aiming
07:08 - to solve most of these problems with
07:10 - this new superset of python alright so
07:12 - I've just jumped into the Mojo
07:13 - playground here we'll have a look at
07:15 - some of the features that is promising
07:16 - and you can kind of see the advantages
07:17 - of this language by the way I'm not at
07:20 - all endorsing Mojo I've not been paid by
07:22 - them or contacted by them I just wanted
07:24 - to talk to you about this language and
07:25 - see what you guys thought so let me know
07:27 - in the comments down below so first of
07:29 - all a cool thing about Mojo is that the
07:31 - file extension for Mojo can actually be
07:33 - this fire Emoji you heard me right you
07:35 - can literally do like Pi or script Dot
07:38 - and then this fire Emoji or you can use
07:40 - dot Mojo So I thought that was kind of
07:42 - an interesting feature when you're going
07:44 - to be compiling or running your mojo
07:45 - code you use the Mojo compiler which
07:48 - doesn't yet exist where you're typing
07:49 - Mojo and then whatever the name is okay
07:52 - so going through here you can see that
07:54 - just like in regular python we can print
07:55 - hello world or in this case Hello Mojo
07:58 - and that's going to work entirely fine
07:59 - now the first feature that Mojo is
08:02 - adding here is something known as let
08:03 - and VAR declarations now if you're
08:05 - familiar with Java JavaScript Etc you
08:08 - may have seen these before they're
08:09 - actually not necessarily intuitive
08:11 - compared to something like JavaScript
08:12 - but they allow you to Define constants
08:15 - or immutable values as well as mutable
08:17 - values so if you use the let this is
08:20 - actually going to Define an immutable
08:21 - value and if you define a VAR this is
08:24 - going to be mutable so if we have a look
08:25 - down here you can see that if I Define
08:27 - my variable C using this let declaration
08:29 - it now is immutable meaning if I try to
08:32 - do this it's not going to work it's
08:33 - going to tell me this immutable and I
08:35 - can't change it so actually a useful
08:36 - feature that currently does not exist
08:38 - inside of python without using some
08:40 - pretty complicated classes and kind of
08:42 - properties and all these things that I'm
08:43 - not going to discuss so you can do that
08:45 - now you can also just Define a regular
08:47 - variable right so if I just say actually
08:48 - not a equals two let's go like x equals
08:50 - six this would be perfectly valid good
08:52 - I'm now just using the dynamically
08:54 - declared variable from python coming
08:57 - down here we have the ability to do
08:58 - things like late initialization which
09:00 - again we can't do in Python so I can
09:02 - initialize a variable to find the type
09:04 - of that variable this would be int this
09:06 - would be float64 float32 Etc and then
09:09 - later on I can initialize that value
09:11 - continuing go has structs now structs
09:14 - are similar to classes but they work a
09:16 - little bit different when it comes to
09:17 - Performance and the way that they are
09:19 - created and handled and if you're
09:20 - familiar with C plus plus or go you've
09:22 - probably seen these before now a struct
09:24 - is statically initialized which means
09:26 - that you cannot add instance methods or
09:29 - properties to it during run time so in
09:31 - Python if I create a class I can go
09:33 - ahead and add a property I can add an
09:35 - attribute I can add another method I can
09:37 - do all kinds of very weird and dynamic
09:38 - changes with structs I can't do that
09:41 - however in a lot of cases that's what
09:43 - you want and this allows the compiler to
09:45 - actually make a ton of inferences about
09:47 - the code which allows you during
09:48 - interpretation to speed up the code
09:50 - execution quite significantly
09:52 - essentially when you use a struct what
09:54 - you're doing is trading flexibility for
09:56 - performance and speed so if we go
09:58 - through here there's a bunch of kind of
10:00 - different features of the struct so
10:01 - first of all we need to declare all of
10:03 - the instance methods we want to have so
10:05 - I declare those as mutable values using
10:07 - VAR and I have to declare those right
10:09 - away so again I can't declare the string
10:11 - run time I have to declare them before
10:13 - or I guess during compile time now
10:15 - another cool features of our structs is
10:17 - just like in Python we can overload
10:18 - different methods so here I can overload
10:21 - my LT Which is less than and then
10:23 - Implement that less than operation on
10:25 - this struct type now notice here that
10:28 - we're using FN instead of Def now this
10:30 - is a new type of function that you can
10:32 - Define inside of Mojo that has some
10:34 - performance optimizations to it and
10:36 - allows you to define the different
10:37 - values or types of the different
10:40 - parameters that you have so in this case
10:42 - I'm using in out what that actually
10:43 - means is I have a mutable parameter here
10:46 - where I can modify what's being passed
10:48 - in there's another thing which is called
10:50 - Boro if I use Boro that allows me to
10:52 - Define this as an immutable parameter
10:54 - again we don't need to dive into it we
10:56 - can kind of see some of the flexibility
10:57 - that's being provided here continuing we
10:59 - also have strong type checking if you
11:01 - know what that is great if you don't I'm
11:03 - not going to explain all of that
11:04 - continuing we have overloaded functions
11:06 - and methods so this is actually quite
11:07 - cool and something that you can
11:09 - typically do in like C plus Java Etc but
11:11 - that you can't currently do in Python so
11:14 - here I've actually defined two versions
11:15 - of the init Constructor one version that
11:18 - takes an additional parameter here takes
11:20 - actually different parameters here R and
11:22 - I where this one only takes X that means
11:25 - that based on how I call the Constructor
11:27 - of this complex struct I'll actually
11:29 - enter into a different function or a
11:31 - different method here based on the one
11:32 - that I called so quite useful thing
11:34 - that's being added next we have these FN
11:37 - definitions which as we've kind of seen
11:38 - are new ways to Define functions that
11:41 - differ from def now first of all Def and
11:44 - FN are always interchangeable from an
11:46 - interface level that means that I can
11:48 - change a function to use FN or Def and
11:50 - that doesn't affect the behavior or the
11:52 - way in which I would call this function
11:53 - so if I'm viewing some function I don't
11:55 - need to know if it's defined with FN or
11:57 - def I just call it how I would call any
11:59 - other function that's good to know but
12:01 - there is a few important changes here or
12:03 - differences between the functions now
12:05 - I'm just going to actually read from my
12:06 - notes here because I don't want to mess
12:07 - this up so one of these changes is the
12:09 - following all values passed into a Mojo
12:11 - function use value semantics by default
12:13 - compared to python this is an important
12:16 - difference as a Mojo function receives a
12:18 - copy of all arguments it can modify
12:20 - those arguments inside of the function
12:22 - but those changes are not visible
12:24 - outside of the function that's the
12:26 - default with an FN function whereas in
12:28 - Python when you have a def function if I
12:30 - pass a mutable argument to the function
12:32 - I can mutate the value of that argument
12:35 - and it will be seen and affected outside
12:37 - of the function this is something I've
12:39 - talked about in quite a few videos and
12:41 - is a mistake that quite a lot of
12:42 - beginner python programmers make so in
12:44 - Mojo it disables that behavior by
12:47 - default and you have to explicitly
12:48 - enable that which allows you to avoid a
12:51 - lot of errors that you might typically
12:52 - have now that leads me into the last
12:54 - part of this video where I'm just going
12:55 - to quickly share with you my thoughts
12:56 - about this language so first of all this
12:58 - is extremely early if everything they're
13:01 - saying is true then this is really cool
13:02 - this is a powerful language I'm
13:04 - definitely going to check it out and I'd
13:05 - probably do a tutorial series on it
13:07 - however it's really too early for us to
13:09 - know I have no idea if this is going to
13:11 - live up to all of the expectations if
13:13 - this is going to be as good as it says
13:15 - it actually is and if this is going to
13:17 - be something that even really matters
13:19 - for your typical python developers it
13:21 - seems like they're really positioning
13:22 - themselves here for AI Developers for
13:24 - low-level programmers not for your
13:26 - typical Python devs and that might mean
13:28 - for you and me who don't do that every
13:30 - single day the Mojo isn't really
13:32 - something that we need to learn or
13:33 - something we need to be concerned about
13:35 - we can just keep going about our day
13:36 - using typical Python and not worry about
13:38 - this however maybe a lot of people will
13:40 - be using Mojo it'll become more popular
13:42 - and that'll be something that you kind
13:44 - of just expected to learn I have no idea
13:46 - but I just wanted to make this video to
13:47 - introduce this to you in case you
13:48 - haven't heard of it yet and give you the
13:50 - opportunity to check it out for yourself
13:51 - before it's released and before it
13:53 - becomes kind of a big hype thing which I
13:55 - think is a potential regardless I hope
13:57 - you guys enjoyed this video If You did
13:59 - leave a like subscribe to the channel
14:00 - and I will see you in the next one
14:03 - [Music]
14:06 - foreign