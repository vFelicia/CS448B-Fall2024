00:03 - foreign
00:15 - [Music]
00:22 - JavaScript by going through a complete
00:24 - project I'm going to explain to you all
00:26 - of the syntax what it does and how it
00:28 - works but I'm also going to show you my
00:30 - thought process when it comes to
00:32 - building this program and explain to you
00:34 - how to structure your code some best
00:36 - practices and a lot of other useful tips
00:38 - that you're not going to get in just a
00:39 - complete beginner tutorial now this
00:42 - video will be a little bit Advanced if
00:44 - you've never looked at coding before but
00:46 - it's definitely something you can still
00:47 - follow along with at a minimum it's
00:49 - going to give you a little bit
00:50 - experience and exposure and show you
00:52 - what it's like to actually complete an
00:54 - entire project now the project we're
00:56 - going to be building here is a slot
00:57 - machine the way that this is going to
00:59 - work is you're going to deposit some
01:01 - money so maybe 100 bucks 200 bucks
01:02 - whatever it may be you're then going to
01:04 - spin the slot machine by betting on a
01:06 - certain number of lines now in a slot
01:09 - machine you have something called reels
01:10 - those are kind of the vertical columns
01:12 - and those contain different symbols so
01:14 - we're going to be responsible as the
01:16 - programmer for coming up with what
01:17 - symbols are on those reels and then kind
01:20 - of spinning those which is really just
01:21 - randomizing what's on the reels and then
01:23 - generating some kind of payout if the
01:25 - symbols are matching in a row I'll
01:27 - explain this more when we get into the
01:29 - video but this is a really good project
01:31 - for introducing a little bit of
01:32 - complexity and really making you think
01:34 - about the code but not taking a ton of
01:37 - time all of this is going to happen in
01:39 - our terminal we're going to be using
01:40 - node.js and I quickly want to clarify
01:42 - here that I have ridden this project
01:44 - before in Python but I've never done it
01:46 - before in JavaScript and I don't have
01:48 - any cheat sheet in front of me so
01:49 - everything you see here is just me raw
01:52 - coding thinking about everything that
01:53 - I'm doing and explaining to my thought
01:55 - process as best as I can so with that
01:57 - said let's dive into the video after a
01:59 - quick word from our sponsor before we
02:02 - get started I need to thank lenode for
02:03 - sponsoring this video I've been using
02:06 - and working with lenode for nearly three
02:07 - years now and they've consistently been
02:09 - my go-to choice for hosting my
02:11 - applications and servers in fact right
02:14 - now I'm using the node to host the
02:15 - official Tech with Tim Discord bot a
02:17 - website multiple of my domains and a
02:19 - kubernetes cluster now lenode was just
02:22 - recently acquired by Akamai and as a
02:24 - part of this acquisition they're going
02:25 - to be adding more than a dozen new data
02:27 - centers around the world in the next
02:29 - year lenode makes it super easy to spin
02:31 - up servers with their one-click app
02:32 - Marketplace and have tons of written
02:34 - guides and YouTube videos on their
02:36 - channel to help you get started now if
02:38 - you're having any issues you can reach
02:39 - out to the 24 7 support team and
02:42 - actually talk with a real human being
02:43 - now the nodes pricing is simple with no
02:46 - hidden fees and full transparency and
02:48 - you can test out the node services for
02:50 - free by using the link in the
02:51 - description and claiming in a hundred
02:53 - dollar sixty day credit for any new
02:55 - accounts it's been an absolute pleasure
02:57 - to work with lenode over the past few
02:58 - years and one last thank you to them for
03:00 - sponsoring this video
03:02 - [Music]
03:08 - all right so let's dive into the project
03:10 - now the first thing to mention here is I
03:12 - do not at all support gambling I'm just
03:15 - doing this project because it's a really
03:16 - good one for beginners and to really
03:18 - dive into code and kind of see how to
03:20 - create a complete project but please do
03:22 - not gamble I don't gamble myself that I
03:24 - would never encourage anyone to do that
03:26 - regardless I'm going to quickly explain
03:27 - to you how a slot machine works in case
03:29 - you haven't seen it before if you
03:30 - already understand feel free to skip
03:32 - through but here we're going to do like
03:33 - a simplified version of one just to make
03:35 - it a bit easier for us so I have the
03:37 - whiteboard in front of me and I'm just
03:38 - going to draw out in a very messy manner
03:40 - here kind of the idea behind what we're
03:42 - creating so we're going to imagine here
03:44 - that we have three reels now in each of
03:46 - the reels we're going to have three
03:47 - symbols so maybe we have something like
03:49 - a b c a
03:52 - b c and then maybe we just do a
03:57 - now excuse my handwriting here this is
03:59 - with my mouse now what we're going to
04:00 - have here for our slot machine is three
04:03 - lines now whenever you play a slot
04:04 - machine there's a certain number of
04:05 - lines that you can win on usually it's
04:07 - like 80 lines or 60 lines or stupid
04:09 - amount in our case we're just going to
04:11 - do three and they're just going to be
04:13 - each row okay so these are the three
04:15 - possible lines that you could win on now
04:17 - you only win when you have three symbols
04:19 - that match in a row so in this case we
04:21 - would have a win but we would not have a
04:23 - win in either of these two rows because
04:25 - we don't have three symbols now each
04:27 - symbol will have a varying multiplier so
04:29 - if I bet say one dollar on the line and
04:32 - the symbol had a multiplier of five then
04:34 - that would mean that we won five dollars
04:36 - on that specific line and we're going to
04:38 - allow the user to bet on a certain
04:40 - number of lines so if they bet on one
04:42 - line they just bet on this so they need
04:44 - to have something in this section if
04:46 - they bet on two lines then they're going
04:47 - to be betting on both of these lines if
04:49 - they bet on three lines and they bet on
04:51 - all three of these and whatever bet
04:53 - amount they make is going to be
04:54 - multiplied by the number of lines that
04:56 - they bet on so if they bet one dollar on
04:58 - three lines then they bet three dollars
05:00 - in total and if they get symbols in any
05:03 - one of the rows then they're gonna win a
05:04 - certain amount of money based on what
05:06 - the multiplier is for that simple
05:10 - [Music]
05:15 - all right so let's dive into it here
05:16 - first we just have a little bit of setup
05:18 - I'm using node.js so make sure you
05:20 - download node.js I can leave a link for
05:22 - that in the description and then I'm
05:24 - using visual studio code feel free to
05:26 - write your code wherever you want now
05:28 - I've opened up a folder here on my
05:30 - desktop where I'm going to be writing
05:31 - the code and the first thing I'm going
05:33 - to do is create a new file so I'm going
05:35 - to say project dot JS this is my
05:37 - Javascript file then I need to set up a
05:40 - kind of node directory here because I'm
05:43 - going to install one package which is
05:45 - going to allow us to get some user input
05:47 - so I'm going to go here to my terminal
05:48 - notice I'm inside of the directory where
05:51 - I'm going to be working and I'm going to
05:53 - type npm init now this command will only
05:55 - work once you've installed node.js if
05:58 - for some reason it's not working and you
05:59 - installed node.js then restart vs code
06:01 - or your terminal or restart your
06:03 - computer come back in and then the
06:04 - command hopefully should work for you
06:06 - okay so when I type npm init it's going
06:09 - to walk me through kind of setting up
06:10 - all of this information you can fill it
06:12 - in if you want but you don't have to I'm
06:13 - just going to click enter through all of
06:15 - this and now you're going to see that we
06:17 - have a package.json file inside of our
06:19 - directory now that we have that I have
06:22 - the ability to install my package which
06:24 - I need which is called prompt
06:27 - and then sync so npm I prompt Dash sync
06:31 - this is what we're going to use to
06:32 - collect user input so go ahead and run
06:35 - that command again just installing that
06:37 - package to do this again you need
06:39 - node.js installed need to be in some
06:40 - directory and whenever you're in the
06:42 - directory type npm init npmi or npm
06:45 - install prompt sync have some Javascript
06:48 - file ready to go and now we can start
06:50 - writing our code
06:52 - foreign
06:53 - [Music]
06:58 - so the first thing I'm going to show you
06:59 - how to do here in JavaScript is collect
07:01 - user input but before I do that I
07:03 - quickly want to explain kind of the
07:05 - steps that we need to go through so that
07:07 - we understand what it is that we're
07:09 - going to be building before we start
07:10 - writing any code this is an important
07:12 - step whenever you're working on a
07:14 - project you want to kind of break it
07:15 - down into some sub components so you
07:18 - know what it is that you actually have
07:19 - to do and then you can prioritize those
07:21 - tasks so let's do some comments here I
07:24 - keep thinking I'm in Python using the
07:25 - pound symbol but the first thing that we
07:27 - need to do here when we're setting up a
07:29 - slot machine is we need to know how much
07:30 - money the user has to play with they're
07:32 - going to deposit or put some money into
07:34 - the slot machine so the first thing we
07:36 - need to do is deposit some money
07:39 - okay next thing we need to do is
07:41 - determine how much the user is betting
07:43 - on the slot machine so we need to
07:45 - collect a bet amount but before we do
07:49 - that before we determine the bet we
07:51 - probably need to know the number of
07:52 - lines that they want to bet on do they
07:54 - want to bet on one line two line or all
07:56 - of the lines which in our case is three
07:57 - so I'm going to make another comment
07:59 - here to
08:01 - determine number of lines to Baton okay
08:05 - and then three is collect the BET amount
08:09 - now next we need to actually roll the
08:11 - slot machine or spin the slot machine
08:13 - and then see if the user wants we're
08:14 - going to say spin
08:16 - the slot machine
08:18 - and then five
08:20 - check if the user won and then lastly
08:24 - after we check if they win we need to
08:26 - then give them the money right so give
08:28 - the user
08:30 - their winnings or in the case where they
08:32 - lost then we would take their BET right
08:35 - and then lastly we probably need to play
08:38 - again or handle a situation where the
08:40 - user has no money left okay so those are
08:43 - our seven steps so what I like to do now
08:46 - that I have these steps and I've kind of
08:48 - thought through the program a little bit
08:49 - is start going through them one by one
08:51 - it doesn't really matter the order that
08:53 - I complete them in but kind of creating
08:55 - little pieces of code or functions that
08:57 - Implement each step or each thing that
09:00 - we're doing so let's start with step one
09:02 - that kind of makes sense where we're
09:03 - going to collect a deposit from the user
09:06 - so to collect the deposit we're going to
09:08 - create a function a function is a
09:10 - reusable block of code that you can call
09:12 - that's going to do something for you so
09:15 - don't worry about it too much if you
09:16 - haven't seen functions before there's
09:17 - two ways to create them in JavaScript
09:19 - the first way is to write function and
09:22 - then to give the function a name in our
09:24 - case the name of the function is going
09:25 - to be if I could spell this correctly
09:27 - deposit then you're going to do two
09:29 - parentheses like this any arguments or
09:32 - parameters you have for the function are
09:33 - going to go inside of here these are
09:35 - things that the function may need to
09:36 - handle that you're going to pass in to
09:38 - the function for it to use while it's
09:40 - doing some code in our case we don't
09:42 - have any of those we just want to get a
09:44 - deposit and then we're going to open two
09:46 - curly braces like this or open a curly
09:48 - brace and close a curly base and then
09:50 - inside of these is going to be the body
09:52 - of our function which will run when we
09:54 - call this function
09:56 - so I can call the function by writing
09:58 - the name of the function and then
09:59 - putting two parentheses like this that's
10:01 - going to call the function trigger it to
10:03 - run function is going to do whatever is
10:05 - inside of the curly braces or the body
10:07 - of the function and then we have the
10:09 - ability to return something from the
10:11 - function so for example I could return
10:12 - one if I return that it's going to be
10:15 - returned to where the function was
10:17 - called so in this case if I had a
10:18 - variable I said const x equals deposit
10:21 - then what that means is that if I return
10:23 - 1 the variable X is going to be equal to
10:26 - 1 because that's what this function call
10:27 - returned hopefully that makes sense but
10:30 - that is your 20 second lesson on how
10:31 - functions work now this is the first way
10:33 - to make a function the next way to make
10:35 - a function is to do the es6 style which
10:38 - is to write a variable so in this case
10:39 - I'm going to do const which stands for
10:41 - constant meaning this variable does not
10:43 - change that's going to be the case for
10:45 - our function I'm going to give it a name
10:47 - I can't name it deposit because that's
10:50 - what this one is named but that's fine
10:52 - I'm gonna get rid of this so let's
10:53 - comment that out then I'm going to say
10:55 - this is equal to and then a set of
10:56 - parentheses then I'm going to kind of
10:58 - make an arrow here so an equal sign and
11:00 - then a greater than sign then I'm going
11:02 - to open my curly braces and this is
11:04 - exactly the same as this function right
11:06 - here at least that's the way that you
11:07 - can think of it so in fact we're going
11:08 - to use this style of function because
11:10 - this is kind of the newer style that
11:11 - most people are using works the exact
11:13 - same way is called the same way and we
11:15 - can return stuff from this function okay
11:17 - so inside of the deposit function what
11:19 - we need to ask the user to do is to
11:21 - enter a certain amount so how we're
11:24 - going to get the user input is using the
11:26 - package that we installed called prompt
11:28 - sync so the way that we're going to do
11:30 - that is import the package so we're
11:32 - going to say const which stands for
11:33 - constant we're going to say prompt which
11:36 - is going to be the name of the function
11:37 - we're going to use in a second this is
11:39 - equal to and then this is going to be
11:41 - required
11:42 - and then prompt sync like that and then
11:45 - make sure you add another set of
11:47 - parentheses here because what we
11:48 - actually need to do is require this
11:50 - package or this module that we're using
11:52 - that kind of imports it into the program
11:54 - then when you call this
11:56 - um with these parentheses here it's
11:58 - going to give you access to a function
12:00 - and it's a bit confusing that you can
12:01 - use to get user input okay so now that
12:04 - we have prompt here we're going to say
12:06 - const and then we're going to say let's
12:09 - go with deposit amount
12:13 - is equal to and then this is going to be
12:15 - prompt
12:16 - and then inside of parentheses we're
12:18 - going to put a string which we do two
12:19 - quotation marks for and we're going to
12:21 - say uh kind of what we want to ask the
12:23 - user so I'm going to say enter a
12:26 - deposit amount then I'm going to do a
12:29 - colon and a space and I'm just doing a
12:31 - space so that when the user starts
12:33 - typing they have a little bit of space
12:34 - from the cool and if I didn't do a space
12:36 - they'd kind of be typing their deposit
12:37 - amount right beside the colon we don't
12:39 - want that we want them to have a little
12:40 - bit of space
12:41 - okay and then I'm going to come here and
12:45 - just for testing purposes I'm going to
12:46 - call the deposit function okay so I know
12:49 - if you're new to programming this might
12:50 - be a little bit overwhelming but all
12:51 - we're doing here is asking the user to
12:53 - enter a deposit amount storing that in
12:55 - this variable and then I'm calling the
12:57 - function so when I call the function
12:58 - it's going to run the code inside of
13:00 - here and then it's going to ask the user
13:02 - input something they're going to input
13:03 - something and that's all we have for the
13:05 - program right now so how do we run this
13:07 - code well we're going to use node.js so
13:08 - we're going to go to our terminal make
13:10 - sure you're in the directory where your
13:12 - project file is or where your code is
13:14 - and you're going to run node and then
13:16 - the name of your file which in this case
13:18 - is project.js so it says enter a deposit
13:21 - amount and then notice my cursor is here
13:23 - and I can start typing so I'm going to
13:24 - type something like 100 perfect I've now
13:27 - entered my deposit okay so now that we
13:30 - have the deposit amount what we need to
13:32 - do is convert this deposit amount to an
13:34 - integer or to a number type in
13:36 - JavaScript because by default what's
13:38 - going to be returned here by the prompt
13:39 - is a string a string is anything that's
13:42 - inside of Double or single quotation
13:44 - marks so we're going to convert this to
13:46 - a number and the reason we want to do
13:47 - that is because we're going to have to
13:48 - be subtracting from it adding from it
13:50 - Etc and we also want to make sure the
13:52 - user entered a valid number for example
13:54 - if they enter negative 100 then they
13:56 - have no balance and well they can't play
13:58 - so the way that we convert this to a
13:59 - number is the following we're going to
14:01 - say const number
14:03 - deposit amount is equal to and then this
14:07 - is going to be parse float and then
14:10 - deposit amount
14:12 - now this parse float function is just
14:15 - going to take a string and it's going to
14:16 - convert it into its floating point value
14:18 - so if I had a string that was like 17.2
14:21 - then that function is going to give us
14:23 - 17.2 pretty straightforward now if we
14:26 - have a string that is not a number so a
14:28 - string like hello and we use this parse
14:30 - float function it's going to give us
14:31 - something called not a number so Nan
14:34 - like that and if we get not a number
14:36 - that means that they didn't enter a
14:38 - valid deposit amount and we need to ask
14:39 - them to do that again or we can just
14:41 - quit the program and they would have to
14:43 - try again kind of up to you what you
14:44 - want to do there I'm going to make it so
14:45 - they have to enter the number again all
14:47 - right sorry for the cut there my cat was
14:49 - going a bit crazy so I had to deal with
14:50 - that anyways what we're going to right
14:52 - now what we're going to do now is check
14:53 - if this is a valid number so to do that
14:55 - we're going to say if and then we're
14:57 - going to use a function called is Nan
14:59 - now is Nan checks if something is not a
15:02 - number so I'm going to say if is Nan
15:04 - number deposit amount or and you
15:07 - represent or with the two pipes here two
15:10 - vertical lines on the keyboard or number
15:12 - deposit amount is less than or equal to
15:15 - zero then we're going to say console.log
15:19 - uh invalid
15:22 - deposit amount
15:24 - try again okay so we're just simply
15:27 - checking is it not a number if it's not
15:29 - a number or the number is a number but
15:31 - it's less than or equal to zero then
15:33 - this is invalid so we need to tell the
15:35 - user that hopefully that makes sense I
15:37 - don't think I need to explain that much
15:39 - more okay so let's quickly run the code
15:41 - and just make sure this works so I'm
15:42 - going to say node project.js I'm going
15:45 - to enter hello and then notice I get
15:47 - invalid deposit try again now if I enter
15:49 - a number like 10 all is good and if I
15:52 - enter a number like negative 10 then
15:53 - same thing I get in invalid number okay
15:56 - perfect now next what we need to do is
15:59 - return the number from this function we
16:01 - also need to make the user enter a
16:03 - number again if it's inbound so the way
16:05 - we do that is the following we're going
16:07 - to say well
16:09 - true
16:10 - and then we are going to put
16:12 - all of the code that we just wrote
16:14 - inside of this while statement now this
16:16 - wall statement is a loop this here is
16:18 - the condition for when we should
16:20 - continue looping so right now I'm saying
16:22 - while true which just means forever so
16:24 - it's essentially an infinite loop we're
16:25 - going to continue to do this so we're
16:27 - going to ask the user to enter deposit
16:28 - amount convert it and then we're going
16:31 - to check this now in the case in which
16:34 - this is a valid number so in the else
16:36 - case here we're simply going to return
16:38 - the number deposit amount which is going
16:41 - to break this while loop hopefully that
16:44 - makes a bit of sense but We're looping
16:45 - forever okay so we're just gonna
16:47 - continue to keep looping we do this we
16:50 - check if it's an invalid deposit amount
16:51 - if it is we're going to console.let like
16:53 - this and then we're just going to ask
16:54 - the user to do this again and continue
16:56 - asking them until they give us a valid
16:58 - amount now otherwise which is where this
17:00 - else statement comes in so if this is
17:02 - not the case then we're going to go in
17:04 - this else statement and we're going to
17:05 - return the number deposit amount to this
17:08 - deposit function call so to show you
17:10 - this I'm going to say const deposit
17:13 - amount is equal to deposit by the way
17:16 - I've said this before but cons stands
17:17 - for constant and it's how you declare a
17:19 - variable so constant deposit amount is
17:21 - equal to deposit and then I'm going to
17:22 - say console.log and then the deposit
17:26 - amount okay so now let's go here and
17:29 - let's run our code and check this out
17:31 - so node project.js enter a deposit
17:34 - amount let's go hello invalid enter
17:36 - again negative 10 invalid 10 and then it
17:39 - prints out 10 because that's a valid
17:41 - amount all right so we've just finished
17:43 - step one here to deposit some money I
17:46 - realized I spelled this wrong but that's
17:47 - okay now that we've determined uh what
17:50 - the user has deposited the next thing
17:52 - that we're going to do is write a
17:54 - function to get the number of lines that
17:56 - they want to bet on and then we're going
17:57 - to collect the bet so let's go ahead and
18:00 - do this we're going to say const
18:02 - get number of lines
18:07 - and notice that all of these different
18:09 - tasks I'm putting in a function so
18:11 - that's very clear where that code lives
18:13 - it's easy to go change it find it later
18:15 - on it just makes the code very
18:16 - structured and easy to understand okay
18:19 - number of lines let's do this we're
18:22 - going to ask the user to input
18:23 - number of lines that they want to bet on
18:25 - so we can really do the same thing that
18:28 - we did here we can kind of copy all of
18:29 - this code and paste it in but rather
18:31 - than a deposit amount this is going to
18:34 - be number of lines The Prompt is going
18:38 - to be enter
18:40 - the number of lines to bet on and then
18:43 - we can just kind of hard code in here
18:45 - between one to three
18:47 - okay and then we're going to say uh
18:50 - actually let's just do lines for this
18:52 - and then this can be number of lines and
18:54 - then here we can go
18:56 - and change this to lines okay so already
18:59 - we're doing the exact same thing we did
19:00 - before we're getting the number of lines
19:02 - we want to bet on between one and three
19:04 - we're then saying constant number of
19:05 - lines to equal to this and same thing we
19:07 - want to check if
19:09 - the number of lines
19:11 - is not a number or the number
19:15 - of lines is less than or equal to zero
19:17 - or the number of lines is less than or
19:21 - equal to three because these are the uh
19:24 - lines they could possibly bet on so
19:26 - actually sorry if it's
19:27 - no not if it's less than equal three
19:29 - sorry if it's greater than 3 my
19:31 - apologies I'll re-explain that so we're
19:33 - checking if is what they entered known
19:35 - number if it is okay that's invalid is
19:38 - what they entered less than or equal to
19:39 - zero if it is that's invalid is what
19:41 - they entered greater than three if it is
19:43 - it's invalid now we just need to change
19:45 - the message we're going to say invalid
19:48 - number of lines try again and then here
19:52 - we're going to return
19:54 - the number of lines now I went a bit
19:56 - faster here just because I've already
19:57 - kind of explained how a lot of this code
19:59 - works just note here that you can
20:01 - combine as many conditions as you want
20:03 - and you're just going to go through and
20:04 - check one by one so we check is this
20:06 - true no is this true no is this true no
20:08 - okay we go to the else statement if any
20:10 - one of these three are true it's invalid
20:12 - we print that and then we try again okay
20:14 - so now let's get the number of lines so
20:16 - I'm going to say const number of lines
20:18 - is equal to get number of lines like
20:23 - that and now we can run the code so
20:25 - first it's going to ask us for our
20:27 - deposit because we did that first then
20:28 - it's going to ask us for our number of
20:30 - lines and notice that I'm kind of
20:32 - writing these functions in the order in
20:33 - which I have them here doesn't really
20:35 - matter where I put them so long as I
20:37 - place them above where I'm using them so
20:39 - they need to be defined before I call
20:41 - them
20:42 - all right let's run our code so clear
20:44 - node project.js enter deposit amount
20:47 - let's do 100 and then we're gonna have
20:49 - to fix this prompt but enter the number
20:50 - of lines to bet on let's do four invalid
20:53 - let's do three all is good we can bet on
20:55 - three lines okay so let's move on here
20:58 - after I fix this prompt
21:00 - all right what is next collect a bet
21:02 - amount so we need to figure out how much
21:04 - the user is betting now the amount that
21:07 - the user can bet is going to be based on
21:09 - whatever their current balance is right
21:11 - they're going to have some kind of
21:12 - balance and that's going to be based on
21:14 - whatever they deposited so rather than
21:16 - having the const deposit amount here
21:19 - let's actually change this variable and
21:21 - let's say that this is let
21:23 - balance equal deposit now that's because
21:27 - the starting balance is going to be
21:28 - equal to whatever they start by
21:30 - depositing and then we're going to
21:32 - adjust the balance based on what they're
21:33 - betting and what they're winning now
21:35 - notice that's why I changed the type of
21:37 - this variable here to be let rather than
21:39 - having a constant I'm changing it to let
21:41 - now what lets me do is adjust the value
21:45 - of this variable so later on I can say
21:47 - add to the variable subtract it I can
21:49 - change what it's storing whereas if I
21:52 - have a constant I can't do that I can't
21:54 - change the value of a constant because
21:56 - it's constant but a variable using let
21:58 - you can change the value of it so that's
22:00 - why I needed to change the variable type
22:02 - here
22:02 - okay so we have the balance we have a
22:05 - number of lines and now we're going to
22:07 - write a function
22:08 - that allows us to get the total bet so
22:10 - we're going to say const get bet
22:14 - and the bet is going to be based on the
22:17 - balance that the user has because they
22:19 - can't have a bet that is more than their
22:21 - current balance so I'm going to take
22:23 - balance as what's known as a parameter
22:25 - what that means is I need to pass a
22:27 - balance to this function when I call it
22:29 - and now inside of the function we can
22:31 - use this balance variable to determine
22:34 - what the maximum bet is so same thing
22:37 - here I'm going to copy this code really
22:39 - we could probably write a function that
22:41 - you know reworks this but for our case
22:42 - it's fine to kind of copy it and just
22:44 - adjust it
22:45 - so I'm gonna have again well true now
22:48 - this time I'm gonna have const bet is
22:51 - equal to enter the
22:54 - total bet like that we're gonna have
22:57 - number bet just because I'm converting
22:59 - it
23:00 - now here
23:01 - we're gonna put bet and then again we
23:03 - just need to change a few of these
23:04 - things we're going to say number bet
23:09 - number bet and then we're gonna say
23:12 - number bet is greater than the balance
23:16 - this time because now the maximum they
23:18 - have is the balance not a fixed number
23:19 - like three and then here we're going to
23:21 - say invalid bet
23:25 - try again and then we're going to return
23:27 - the number back so I know this is fairly
23:31 - repetitive that's kind of why I'm going
23:32 - through it quickly but you get the idea
23:34 - these are three kind of input functions
23:36 - get the deposit get the number of lines
23:37 - get the BET make sure all of those are
23:39 - valid once we have all of that we can
23:41 - kind of do the more interesting stuff
23:42 - which is spinning the slot machine and
23:44 - calculating how much the user won so now
23:46 - let's call This Bat function so we're
23:49 - going to say const and then we're going
23:51 - to say bet is equal to and then this is
23:53 - going to be get
23:55 - the BET and the bet is going to be based
23:59 - on the balance perfect so let's test
24:01 - this out and make sure it's working
24:04 - clear node project okay let's enter
24:07 - deposit like 100 let's do three lines
24:09 - enter the total bet and let's bet two
24:12 - okay great now while I was doing this I
24:15 - just realized that the bet that you're
24:17 - going to have is going to be multiplied
24:19 - by the number of lines so this is
24:21 - actually not quite correct because right
24:24 - now we're only allowing you to uh we're
24:27 - allowing you to bet based on your
24:29 - balance but not based on the number of
24:30 - lines really the maximum bet you can
24:33 - make is whatever your balance is divided
24:36 - by the number of lines that you're going
24:37 - to bet on because that's how many uh
24:40 - places you're going to place the bet if
24:41 - you bet two really your total BET's
24:43 - going to be six because you're placing
24:45 - that on three lines so I'm going to
24:47 - change this here to say enter the bet
24:49 - per line
24:50 - okay and then we're going to now take in
24:55 - the number of lines
24:56 - in here
24:58 - we're going to pass the number of lines
25:00 - now we're going to make sure that the
25:02 - number is not greater than the balance
25:05 - multiplied by
25:08 - the lines uh sorry not multiplied
25:10 - divided by the lines and just make this
25:12 - clear we're going to put these in
25:14 - parentheses I guess actually we don't
25:16 - need the parentheses it just removed it
25:17 - for me so that's fine hopefully you're
25:19 - getting what I'm saying there since the
25:20 - bet is distributed between multiple
25:22 - lines based on the number of lines you
25:23 - bet on that's going to affect what the
25:25 - maximum bet can be
25:27 - okay now that we have this let's just
25:29 - try this one more time okay so here
25:32 - enter deposit let's enter 50. number of
25:35 - lines is three now let's try to bet say
25:38 - 40. invalid bet try again because that's
25:40 - going to be over based on the number of
25:42 - lines that we have now if we try 20 same
25:44 - thing it's invalid it's going to be over
25:46 - based on number of lines if we do 15
25:48 - that's fine we can bet 15 per line okay
25:51 - perfect so we've done the first three
25:54 - things here which is deposit some money
25:56 - determine the number of lines collect a
25:58 - bet amount now we need to spin the slot
26:00 - machine this is where it gets a little
26:02 - bit more challenging but that's okay
26:03 - let's dive into it alright so as we dive
26:06 - into building the slot machine here I'm
26:07 - going to give myself a bit of room at
26:09 - the top of the program because I'm going
26:10 - to start defining some variables that
26:12 - are going to depict how big the slot
26:14 - machine is and how many symbols we can
26:16 - potentially have in each row so first
26:20 - let's just Define the number of rows and
26:21 - columns we want to have so really the
26:23 - number of reals and the number of
26:25 - symbols that will appear in each reel
26:27 - then we need to know what symbols we
26:29 - have in total so do we have five
26:30 - different symbols seven different
26:31 - symbols Etc and what is the value of
26:34 - each symbol as well as the quantity of
26:36 - each of them in the real that's what's
26:38 - going to Define uh kind of the payout
26:40 - structure the probability
26:42 - Etc I'm not going to make this balance I
26:43 - don't really know what I'm picking here
26:44 - it's a little bit random but I like to
26:46 - declare all of these as what I refer to
26:48 - as Global variables and I do all of my
26:51 - Global variables at the very top of the
26:53 - program so it's very easy to see them
26:55 - and to change them so all I need to do
26:57 - if I want to adjust say the slide size
26:58 - of the slot machine is go to the very
27:00 - top of the program change a clearly
27:01 - named variable to say four five some
27:04 - larger number and all of a sudden I have
27:06 - a bigger slot machine and my entire
27:07 - program will work you'll see what I mean
27:09 - but let's define these variables so
27:11 - first of all you'll notice I'm going to
27:13 - do this beneath where I have my prompt
27:15 - so the typical tradition is you want to
27:17 - have all of your Imports and kind of
27:19 - libraries at the top of your program
27:20 - then your Global variables then your
27:23 - classes and functions and then the main
27:25 - line or the other aspects of your
27:27 - program which is kind of what I'm
27:28 - following right now so I'm going to say
27:30 - const because all of these are going to
27:31 - be constants and the first variable I'm
27:33 - going to have is rows now I don't need
27:35 - to make this a constant but it's
27:37 - typically a practice of any of your
27:38 - Global variables that are constants are
27:41 - in all capitals I know it seems a little
27:43 - bit weird but that's what we're doing
27:44 - here so I'm going to say const rows
27:45 - we're going to have three rows and const
27:48 - calls is going to be equal to 3. okay
27:51 - next thing we need to Define is the
27:54 - symbols so first of all we need to know
27:56 - what symbols we're going to have and how
27:58 - many of them we can have in each real so
28:00 - each column and then we need to know
28:03 - what the value of each symbol is which
28:05 - is just going to be some multiplier
28:06 - based on your bet
28:08 - so we're going to create a map and the
28:10 - way we can do this is the following uh
28:12 - actually we're going to create an object
28:14 - it's kind of similar but you'll see
28:15 - we're going to say const
28:17 - symbols is equal to and actually I'm
28:19 - going to say symbols underscore count
28:21 - you'll notice that I'm going with snake
28:24 - case here which uses an underscore for
28:26 - kind of a space separator rather than
28:28 - camel case and that's because I'm doing
28:30 - this in all capitals and that's the
28:31 - convention
28:32 - anyways for my symbols I'm going to have
28:34 - A's which will be my most valuable
28:36 - symbol and we'll say there's only two
28:38 - A's in each reel okay I'm gonna have
28:41 - these we'll say there's four of those
28:43 - we're gonna have C's we can say there's
28:45 - six of those and then D's we can say
28:47 - that there is eight of them again I
28:49 - don't know if this is going to be
28:49 - balanced or not but these are the
28:51 - symbols that you can possibly have in
28:53 - each real or each column and we're going
28:55 - to randomly select from these number of
28:57 - symbols okay
28:59 - now this object allows me to have keys
29:02 - mapped with different values so I have a
29:04 - key a here mapped with the value two so
29:07 - that means if I were to do something
29:09 - like symbols count at a this would give
29:12 - me the value which is two
29:14 - hopefully that makes a bit of sense uh
29:16 - but that's like a very quick
29:17 - introduction to objects in JavaScript
29:19 - allow you to have keys or Properties or
29:21 - attributes associated with values okay
29:25 - all right next
29:27 - we're gonna have our symbol
29:29 - values okay
29:31 - now the values
29:33 - are going to be similar here but we're
29:36 - going to say a is five
29:38 - B is four
29:40 - C is three
29:43 - ND is 2. now this means if I get a line
29:46 - of A's I'm going to multiply the BET by
29:49 - 5. that's going to be the payout because
29:51 - of that line if I get a line of B's I'm
29:53 - going to multiply the BET by 4
29:55 - Etc so this is the multiplier or the
29:57 - value of each symbol uh relative to what
30:00 - we're going to multiply it by
30:01 - okay so now that we have our constants
30:03 - what we need to do is create a function
30:06 - that kind of spins a slot machine now
30:08 - really spinning the slot machine is just
30:10 - going to be randomly selecting based on
30:12 - these counts what symbols we have in
30:14 - each reel then we need to determine if
30:16 - the user won anything okay so let's do
30:19 - this we're going to say
30:21 - const
30:22 - and we're going to say spin
30:24 - okay now for the spin we don't need to
30:27 - take in any parameters we can just
30:29 - generate uh the different reels so to
30:32 - generate the reels the first thing that
30:33 - we need to do is figure out how many
30:35 - symbols we have now we know that based
30:38 - on this but what I'm going to do here is
30:40 - I'm going to put all of the possible
30:42 - symbols that we could use inside of a
30:44 - list or inside an array and then I'm
30:47 - going to randomly select them out of the
30:48 - array and remove them from the array
30:51 - every single time that we use them while
30:53 - we're generating each reel so we're
30:56 - going to generate individual columns
30:58 - right that's what we need to do
31:00 - um yeah let's let's generate the columns
31:02 - and then you'll see what I mean all
31:04 - right so as I was saying let's generate
31:05 - an array that contains all of the
31:07 - possible symbols that we could have so
31:09 - I'm going to say const and then this is
31:12 - going to be symbols is equal to and then
31:15 - an empty array now notice that even
31:18 - though we're going to be adding elements
31:19 - into this array I still made this
31:21 - variable type a constant that's because
31:23 - I'm not going to change the value of the
31:26 - array I'm not going to actually change
31:27 - what array I'm using I'm instead just
31:29 - going to be adding elements inside of it
31:31 - I know that seems a little bit
31:33 - misleading or a little bit confusing
31:35 - this is something to note in JavaScript
31:37 - an array is what's known as a reference
31:39 - data type which means I can manipulate
31:41 - what's inside of the array without
31:43 - changing the reference to the array
31:46 - itself so I don't need to assign a new
31:48 - value to symbols I can just add stuff
31:50 - inside of this array and that's not
31:52 - going to violate the principle of this
31:53 - being a constant variable it's a little
31:56 - bit strange a lot of people get confused
31:57 - by that uh hopefully that gives you a
31:59 - bit of an explanation so what I need to
32:01 - do now is I need to Loop through all of
32:03 - the different entries that I have inside
32:05 - of my symbols object or my symbols uh
32:09 - count here okay now notice that I got
32:11 - rid of my quotation marks uh you don't
32:13 - actually need quotation marks for your
32:15 - keys or for your Properties or
32:16 - attributes in JavaScript you do in
32:18 - Python hence why I added them because I
32:20 - thought we're in Python but no we're in
32:22 - JavaScript okay so I'm going to make a
32:24 - for Loop here I'm going to say four and
32:27 - then this is going to be symbol
32:29 - of and then I'm going to say this is
32:32 - object Dot
32:35 - entries
32:36 - of and then our symbol underscore count
32:40 - okay
32:42 - so the way that you Loop through all of
32:44 - the different entries inside of an
32:46 - object and our entries are going to be
32:49 - this right so A2 B4 C6 d8 is you use
32:54 - this right you use symbol of object dot
32:57 - entries and actually we're going to say
32:58 - symbol
32:59 - and count of object dot entries and we
33:03 - need to put these inside of an array and
33:05 - we need to put our const here okay sorry
33:08 - I'm getting a little confused because I
33:10 - usually work in Python it's a bit
33:11 - different but we're going to say
33:12 - constant and then inside of an array
33:14 - we're going to say symbol and count of
33:16 - object.entries that's going to Loop
33:18 - through all of the different entries in
33:19 - our symbol count and it's going to give
33:21 - us first of all what the key is or what
33:23 - the symbol is and then what the value is
33:25 - associated with each of those so to
33:27 - quickly illustrate that I'm just going
33:28 - to console.log the symbol and the count
33:32 - and I'm just going to call this spin
33:34 - function here just so you can see how
33:36 - the looping Works before we go any
33:37 - further so let's quickly run this and
33:40 - notice I get A2 B4 C6 and d8 okay so I'm
33:44 - looping through all of them and now I'm
33:45 - just going to get out of this uh I guess
33:48 - I need to just enter some values here
33:50 - okay perfect so now we're out of that
33:52 - all right so that's how the looping
33:54 - works now that we have the symbol and
33:56 - the count we're going to add that many
33:59 - symbols into our symbols array so we're
34:02 - going to do another for loop we're going
34:03 - to say four I'm going to say let I equal
34:06 - zero I is less than and this is going to
34:10 - be count and I'm going to say I plus
34:12 - plus and then I'm going to say symbols
34:14 - dot push and I'm going to push the
34:17 - symbol into the array now this is just
34:19 - going to add however many symbols we
34:21 - have so in this case if we had two A's
34:23 - it's going to add two A's into this
34:26 - symbols array the way that you add them
34:28 - in is by pushing them into the array so
34:30 - typically in other languages you'll see
34:32 - append in JavaScript it's pushed that's
34:34 - how you insert a new element inside of
34:36 - an array and an array is just a
34:38 - collection of multiple elements so I
34:39 - could have a a b
34:42 - b b like that inside of the array okay
34:45 - hopefully that is clear so for every
34:47 - single symbol and for the count of those
34:49 - symbols we're going to have another for
34:51 - Loop and we're going to insert that many
34:52 - symbols into the array so now again just
34:54 - quickly before we go any further let's
34:56 - print out what the symbols array looks
34:58 - like after we run this code
35:00 - so let's call the spin function
35:03 - let's go here and run it and notice that
35:06 - this is our array okay so we have two
35:08 - a's Four B's six C's and eight D's the
35:11 - point of doing that is now that we are
35:13 - going to be able to uh one sec let me
35:16 - get out of this here I'll randomly
35:17 - select elements from the symbols array
35:19 - when we are inserting them in our reels
35:21 - okay
35:23 - so
35:24 - let's do this we're going to say const
35:27 - reels is equal to and then we're going
35:29 - to create three nested arrays
35:32 - now this is simply an array inside of an
35:34 - array you can do that it's valid just
35:36 - like we add elements inside of here we
35:38 - can have arrays inside of arrays and
35:40 - each one of these arrays is going to
35:41 - represent a column inside of our slot
35:45 - machine okay so if we had a a a really
35:48 - you'd visualize that like a
35:51 - a a okay so each one of these kind of
35:53 - nested arrays is a column and we're
35:55 - going to generate what's inside of them
35:56 - using this symbols array
35:59 - okay how do we do that well we need to
36:01 - go through each one of our reels so
36:03 - we're going to say four and then this is
36:07 - going to be let I actually yeah we'll
36:10 - say let I equals zero I is less than
36:14 - and this will be the number of columns
36:17 - that we have and then we're going to say
36:18 - I plus plus so this first for Loop here
36:21 - is going to be for each one of our reels
36:24 - so for every single reel that we have or
36:25 - every single column that we have we need
36:27 - to generate what's inside of it then for
36:30 - every single column we need to pick the
36:32 - three elements or the X elements
36:34 - whatever the number of roses that we
36:35 - have that are inside so then we're going
36:37 - to say 4 and we're going to say let J
36:40 - equals zero J is less than rows and then
36:44 - J plus plus
36:46 - like this so we have a nested for Loop
36:48 - the reason we need that is because we
36:50 - have nested arrays so for every single
36:52 - array generate the number of rows and
36:54 - number of elements that need to go
36:56 - inside of that array or inside of each
36:58 - reel hopefully that's making a bit of
37:01 - sense but that's kind of what we're
37:02 - doing here now in case you're confused
37:04 - by this syntax the way this works is we
37:06 - Define some counter variable that we can
37:08 - use while we're running through this for
37:10 - Loop to keep track of how many more
37:11 - iterations or Loops we need to perform
37:13 - we then set how many Loops we want to do
37:16 - so we say while I is less than the
37:19 - number of columns that's what this means
37:20 - it means while I is less than the number
37:22 - of columns keep looping as soon as it's
37:24 - equal to or greater than we're going to
37:26 - stop
37:26 - then we have what's referred to as our
37:28 - increment we're saying every time we do
37:30 - this Loop one time increment the
37:32 - variable I by One allowing us to keep
37:35 - looping keep track of what Looper on and
37:37 - then eventually exit the for Loop so
37:39 - obviously same thing is happening here
37:40 - uh for J I'm just using a different
37:43 - variable because we can't have the same
37:45 - variable for both of our loops
37:47 - all right now inside of here we need to
37:49 - randomly select elements from our
37:51 - symbols but remember that the elements
37:53 - that we can have or the symbols we can
37:54 - have in each real are for each real so
37:57 - what I actually need to do here is
37:59 - create another variable I'm going to say
38:01 - const real yeah yeah we'll say real
38:05 - symbols is equal to and then this is
38:08 - going to be an array now actually what
38:10 - this is going to be is an array and
38:12 - we're going to say dot dot
38:14 - and then symbols now what this is going
38:17 - to do is just copy the symbols that we
38:19 - have available to choose for each reel
38:21 - into another array the reason we're
38:24 - doing that is because for every single
38:26 - one of our reels these are all the
38:28 - available symbols that we have so what
38:29 - I'm going to do is randomly select a
38:31 - symbol and then I'm going to add that
38:33 - into the real and I'm going to remove it
38:35 - from the available symbols to continue
38:37 - to select so if I already use two A's in
38:39 - one real I can't have any more A's I
38:41 - need to remove them so I don't pick them
38:43 - again but when we move on to the next
38:45 - real we have to have those A's available
38:47 - for the next real so I can't be removing
38:50 - elements from this symbols list I need
38:52 - to remove them from one that's specific
38:54 - to each reel so inside of our for Loop
38:57 - remember this is for every one of the
38:59 - reels that we have we generate the
39:00 - available symbols then we're going to
39:03 - remove from them as we add the symbols
39:05 - into each reel I know this is a little
39:07 - bit confusing and I said real probably a
39:09 - hundred times there hopefully it's a
39:11 - little bit clearer why we're doing that
39:12 - but it's because each reel has has their
39:14 - own symbols that they can pick from so
39:16 - we need to have a copy of the available
39:17 - symbols that we're manipulating inside
39:19 - of the for Loop okay let's continue here
39:22 - I'm going to say that our symbol so I'm
39:25 - going to say const
39:27 - selected symbol is equal to and then I
39:31 - need to randomly select an element from
39:33 - this array now the way I randomly select
39:36 - an element from array is I randomly
39:38 - choose an index or a position in the
39:40 - array so quick recap here if we have
39:43 - some things in our array say we have a b
39:46 - c each one of these things has an index
39:48 - in the array now the first index is zero
39:51 - the next is one and the last is two so
39:54 - you always start at zero you count up by
39:55 - one fairly straightforward so what I
39:57 - want to do is randomly select one of
39:59 - these indices or indexes and then choose
40:02 - the element there remove it from the
40:04 - existing array and insert it into my
40:07 - real that's what we need to do so we
40:09 - need to randomly pick one of the indices
40:11 - now how do we randomly select an index
40:13 - well we need to use our random function
40:15 - so we are going to say
40:18 - uh actually this is going to be real
40:21 - symbols at the index now the way that
40:24 - you access elements at a specific index
40:26 - is you write square brackets and then
40:28 - you put 0 1 2 3 whatever the index is so
40:32 - for accessing the fourth element we put
40:34 - index three now the question is what is
40:38 - the random index so we can go here and
40:40 - say const
40:41 - random index
40:43 - is equal to and then in all capitals
40:46 - we're going to type math
40:48 - dot random and we're going to multiply
40:51 - this by whatever the length of our real
40:54 - symbols is
40:55 - so we're going to say real
40:57 - symbols dot length and then we're going
41:01 - to put around this math dot floor
41:05 - okay
41:06 - then here this is going to be random
41:09 - index like that all right what are we
41:11 - doing well we are generating a random
41:13 - index now what I've done is I've taken
41:15 - math.random and math.random is going to
41:17 - generate a random number between 0 and
41:20 - 1. so it's a floating floating point
41:21 - value between zero and one then we take
41:23 - that number and we multiply it by
41:25 - whatever the length of our symbols is
41:27 - that means that the maximum possible
41:29 - number that this expression is going to
41:31 - generate for us is going to be however
41:33 - many symbols we have it's the maximum
41:34 - possible number then we're going to say
41:37 - math dot floor now the reason we're
41:39 - doing math.floor is we're going to round
41:42 - this number down to the nearest or to
41:45 - the lowest whole number so if we had
41:47 - like 1.9 we're going to round it to 9.
41:49 - the reason we do that is because really
41:51 - the possible numbers that we can pick
41:53 - from the possible indices we can pick
41:55 - from is the length of our array minus
41:58 - one so we don't want to round up because
42:00 - that would give us an index that's
42:01 - possibly out of the array we need to
42:04 - round down so we get one that is less
42:06 - than the real symbols.length so again
42:09 - just to kind of clarify what's happening
42:10 - here this is going to generate a random
42:12 - number between 0 and then whatever the
42:13 - length of our reels is minus one and
42:16 - then we can use that to select the
42:18 - element or the symbol from our real
42:20 - symbols array I know it's a bit
42:22 - complicated here but that's why I wanted
42:23 - to do this project to give you a bit of
42:25 - a challenge so now that we have our
42:26 - selected symbol and we know the random
42:28 - index we're going to first say reals and
42:31 - then this is going to be at index I now
42:33 - index I is going to represent the real
42:35 - that we're currently working on so if
42:37 - we're working on the first real I zero
42:39 - so it's index 0. if it's the first real
42:41 - or sorry the second reel then I is 1 so
42:44 - it's index one so I'm going to say reals
42:46 - I
42:47 - dot push so I'm pushing into the
42:49 - interior array
42:51 - the selected symbol okay we're almost
42:54 - done last thing we need to do is remove
42:56 - this symbol so we can't select it again
42:58 - while we generate this real
43:00 - so we say reels symbols dot splice and
43:05 - we're going to splice at whatever the
43:06 - random indexes that we selected because
43:08 - that's the position that this element
43:10 - exists of that or this symbol exists of
43:12 - that and then we're going to put one
43:14 - now one just means remove one element so
43:16 - that's all we need for that and random
43:18 - index is the position at which we're
43:20 - removing that element so we're selecting
43:22 - the symbol at this index we're adding it
43:25 - into this array here and then we're
43:28 - removing it so we don't select it again
43:29 - when we continue generating this real
43:31 - and that's all we need for generating
43:33 - our reels now we can
43:35 - return the reels like that now I just
43:39 - want to quickly uh print out what we're
43:41 - going to get for our reel so I'm going
43:42 - to say const reels is equal to spin just
43:45 - to make sure this is working before I go
43:47 - on to explain too much more stuff
43:49 - I will walk you through this again but
43:51 - let's just quickly run this so I'm going
43:53 - to say node project.js and then notice
43:57 - this is what we get for our reels so c d
43:59 - d d a d d d now notice we get a lot of
44:02 - D's because we have eight of them
44:05 - available in our symbols cap if I run it
44:07 - again so let's just get out of this okay
44:10 - and run it one more time I notice that
44:12 - we get different values here in our reel
44:14 - so it is indeed random
44:17 - okay so that means now that we have
44:20 - completed these four deposit some money
44:22 - determine the number of lines collect a
44:24 - bet amount spin the slot machine now we
44:26 - need to check if they won which is
44:27 - fairly simple we need to give the user
44:29 - their winnings and we need to play again
44:32 - let me quickly recap what we did here
44:33 - then we'll get into those steps so we
44:36 - started by generating an array of all of
44:38 - the available symbols that we can pick
44:40 - from when we are going to choose what's
44:42 - inside of each reel randomly choose so
44:45 - this contains all the available symbols
44:47 - then we create an array here kind of
44:49 - temporary array that we're going to add
44:50 - to that has all of the different reels
44:53 - so we have one real second reel third
44:56 - reel we Loop through all the reels that
44:58 - we have which is represented by the
45:00 - number of columns now really I just
45:02 - realized uh it's a little bit flawed
45:04 - what we're doing here because if the
45:06 - number of columns is different than
45:07 - three we're going to get a bit of an
45:09 - error here so I'm just going to quickly
45:11 - fix this even though I don't love
45:12 - changing this all right now by saying
45:14 - reals.push and then I'm going to push an
45:16 - array here and now we can remove this
45:19 - the reason that's going to work is
45:21 - because for every single real or column
45:23 - we have we add one inside of here okay
45:26 - and then once we add it we can now push
45:28 - elements inside of that reel hopefully
45:31 - that fix uh makes a bit of sense anyways
45:33 - once we do that we then copy all of the
45:36 - available symbols that we have so we now
45:38 - have kind of a unique array to pick from
45:39 - for this specific reel then we Loop
45:42 - through all of the rows all of the rows
45:44 - is the number of symbols we're going to
45:45 - have in each reel and we randomly
45:47 - generate one of the available uh symbols
45:50 - we pick one of the symbols that are
45:51 - available and we insert that into our
45:54 - real so we say our random index is this
45:56 - we get our selected symbol so that's
45:58 - going to be whatever the symbol is at
45:59 - that index we push that into the current
46:02 - reel that we're working on which is
46:03 - represented by I and then we remove that
46:06 - from the available symbol so we don't
46:08 - select that again perfect okay then we
46:11 - return reels and we are all good let's
46:14 - continue now and work on generating or
46:16 - checking if the user won anything all
46:18 - right so let's go ahead and continue now
46:20 - first thing to mention here is that with
46:22 - our reels and by the way I'm just going
46:23 - to take these and move them down because
46:25 - that's kind of The Logical order we need
46:27 - here uh our reels look like this when we
46:30 - get them so we have a raise right and
46:32 - each one of our arrays let's just do a b
46:36 - c maybe d d d uh a a a uh these are our
46:42 - kind of vertical
46:44 - um columns right these are yeah our
46:46 - columns now what we want to be doing
46:48 - when we're checking if a user is winning
46:50 - is we want to check in the rows now
46:52 - right now based on the way that we have
46:54 - our data it's going to be a little bit
46:55 - difficult to check each row and see if
46:58 - every element in the row is um is the
47:00 - same so what we're going to do is we're
47:02 - going to transpose this array into all
47:06 - of the rows so again I know this is a
47:08 - little bit weird but these right now are
47:09 - our columns what we we want to have is
47:12 - an array that has all of our rows once
47:14 - we have the rows we can then check who's
47:16 - who's winning or what row is winning and
47:18 - we can then present that to the user so
47:21 - when we're looking at this right we have
47:23 - these as our columns but we want to
47:24 - instead have it like this where we have
47:27 - rows so our rows would look like this a
47:29 - d a and notice I'm taking a
47:32 - d a because that's what's going to be in
47:34 - row one these are all in unique columns
47:36 - then we're going to have b d a and then
47:39 - we're going to have c d a again if we
47:43 - look at Row 2 here that's b d a we look
47:46 - at Row three c d a so we need to turn
47:49 - our data into this format and then once
47:52 - we have that
47:53 - we can continue now this is called
47:55 - transposing a matrix or transposing a 2d
47:58 - array whatever you want to refer to it
47:59 - as so we're going to write some code
48:01 - that does that we're going to get the
48:02 - transposed
48:04 - um kind of Matrix reels wherever you
48:06 - want to call it then we can check who's
48:08 - winning or what rows are winning uh how
48:10 - much money they want Etc and we can
48:12 - continue from there
48:13 - so let's write a function here uh let's
48:15 - actually just call it const we're going
48:17 - to say transpose again this is going to
48:19 - give us the rows so we're going to take
48:21 - in our reels
48:23 - and we're going to transpose them so how
48:26 - do we transpose well first we need a new
48:28 - array so we're going to say const uh
48:30 - we'll just call this rows like that
48:33 - and for our rows uh that's fine for now
48:36 - so what we're going to do here is we're
48:38 - going to create a for Loop that goes to
48:39 - the number of rows that we have for each
48:41 - row so row 0 Row one row two or Row one
48:44 - two three whatever you want to refer to
48:45 - them as we're going to collect all of
48:46 - the elements from our columns that are
48:48 - in that row and then push that into the
48:50 - rows array so we're going to say 4 let I
48:54 - equal zero I is less than and then this
48:57 - is going to be the number of rows and
48:59 - then I plus plus
49:01 - okay then what we're going to do is say
49:05 - Rose dot push and we're going to push a
49:08 - new row because for every single row we
49:10 - need to have an array that represents
49:11 - that so we push those inside of here
49:13 - then we're going to say 4 let's
49:16 - J equal 0 J is less than and then this
49:21 - is going to be the number of calls and
49:23 - then J plus plus like this so for every
49:27 - single row Loop through every single
49:29 - column so now for every column that we
49:32 - have we're going to grab the uh the
49:34 - element that's in the first row in that
49:36 - column and push it into our rows array
49:39 - so we're going to say that rows at row I
49:44 - because that's the current row that
49:45 - we're building dot push
49:49 - and then we're going to push the reels
49:52 - at and then this is going to be column J
49:56 - at row I I know seems a little bit weird
50:00 - but we're accessing each of the
50:02 - individual columns so we're going
50:03 - through the three columns that we have
50:04 - or however many columns that we have so
50:06 - we're accessing that column then for
50:08 - each one of those columns we're getting
50:10 - the element in the row that we're
50:12 - currently building which is represented
50:13 - by I
50:14 - okay then we can simply return
50:17 - our rows and that's how you transpose
50:20 - now I'm going to print this out and
50:21 - you'll see what the transposition looks
50:23 - like and then it'll make this a bit more
50:24 - clear okay so we have our reels now I'm
50:27 - going to say const uh let's call it rows
50:30 - is equal to
50:32 - trends
50:33 - pose
50:35 - okay
50:36 - and then we're going to transpose the
50:37 - reels now we're going to just
50:39 - console.log
50:41 - the reels
50:44 - and then we're going to console
50:46 - .log the rows and you'll see the
50:49 - difference in how that transposition
50:50 - occurs so let's run this
50:53 - say node project.js okay let's run
50:57 - through this
50:58 - and here we go so we can see that we
51:01 - have all of our individual columns so
51:03 - CID c d c d b d now let's look at our
51:07 - first row remember this is kind of
51:08 - flipped so for our first row we have C
51:11 - C and then D that's what we want for our
51:14 - second row we have a d and then B okay
51:17 - and then for our third row we have d c b
51:22 - so now that we have those what we can do
51:24 - is simply print those out and we can
51:27 - kind of represent to the user what it is
51:29 - that they actually spun okay so we're
51:32 - going to make another function here
51:33 - that's going to print our rows so we're
51:35 - going to say const print we could say
51:38 - print slot machine or print rows is fine
51:40 - and we're going to take in our rows
51:42 - we're just going to print out all these
51:44 - elements in some kind of styled way okay
51:47 - so we're going to Loop through every
51:48 - single one of our rows and then prints
51:50 - we're going to say four and we're going
51:52 - to say let I
51:55 - actually do we need to go I I'm going to
51:57 - say for cons row of rows
52:01 - okay then we want to Loop through every
52:04 - single row and kind of build a string
52:06 - that represents that row and then print
52:08 - that out so I'm going to say let row
52:11 - string equal this is going to be an
52:14 - empty string and essentially what I want
52:16 - is this like a pipe B pipe C and we're
52:19 - going to build that uh using a for Loop
52:21 - going through each of the elements in
52:23 - our row now by the way this is iterating
52:25 - by item which means that I'm going to
52:27 - get an array here so I'm looping through
52:29 - every array every nested array every row
52:31 - inside of my rows array remember it's a
52:34 - two-dimensional array so this will be an
52:36 - array that I can then Loop through and
52:37 - get each of the elements okay so we have
52:40 - our row string here and I'm going to say
52:42 - four
52:43 - and this time I need to do
52:45 - um a different style for Loop here I'm
52:47 - going to say for const and then we're
52:50 - going to go with I
52:53 - symbol
52:55 - of row dot entries I think I can access
52:59 - dot entries on an array we're going to
53:01 - see if that works then we're going to do
53:03 - the following we're going to say row
53:04 - string
53:06 - plus equals
53:08 - and then this is going to be the symbol
53:10 - so when you do plus equals you're kind
53:12 - of concatenating a string so you're
53:14 - adding elements into the string so if I
53:16 - go plus equals a to my empty string I
53:18 - get a if I go a plus a then I get a a so
53:23 - that's what we're building here okay
53:24 - that's what we're doing with the
53:25 - concatenation
53:26 - then we need to determine if we're going
53:28 - to add our pipe operator or not now
53:30 - we're only going to add the pipe
53:31 - operator if it's not the last symbol
53:34 - that we have because again we have a b c
53:39 - we don't want to have a pipe here so we
53:40 - need to make sure we don't add that
53:42 - so we're going to say if I does not
53:45 - equal
53:46 - rows.length minus 1 because this is the
53:50 - maximum possible value I can be equal to
53:53 - then
53:54 - what we'll do is we'll say row string
53:58 - and then this is going to be plus equals
54:02 - plus equal story and then we're going to
54:04 - add a space and a pipe and a space I
54:08 - think that is correct and then in terms
54:11 - of this here sorry I'm just going to
54:13 - change this to say row dot entries and
54:16 - then this is going to say row dot length
54:18 - I don't want to use rows we're already
54:19 - doing that here we want to Loop through
54:20 - our individual row now that we have the
54:23 - row string we're going to say
54:25 - console.long log sorry the row string
54:28 - and now we're going to print each of our
54:30 - individual rows and they'll be nicely
54:31 - laid out and we'll kind of see each of
54:33 - the elements that's in each row and
54:35 - column hopefully that's making a bit of
54:37 - sense again we're going through every
54:39 - single Row in our rows that's going to
54:40 - give us an array representing the
54:42 - elements in that row we're then going to
54:44 - Loop through both the index and the
54:47 - element that exists in this row so if we
54:50 - have rows like a
54:52 - B
54:53 - C then what we're going to be getting
54:55 - here is zero so zero a
54:59 - 1 b 2 C because it gives us the index as
55:04 - well as the element we're then checking
55:06 - okay is the index the last index or the
55:09 - last element if it is then we are going
55:11 - to not put the pipe if it isn't then
55:13 - we're going to put the pipe and the
55:15 - separator in this string so we build
55:16 - this string up
55:17 - and then we can print it out here and
55:20 - that's fine for printing the rows so
55:21 - let's go print rows rows like that
55:27 - let's go here and clear and rerun okay
55:30 - let's do this here
55:32 - and there we go we get our nicely
55:34 - printed slot machine now in this case we
55:36 - didn't win at all but if we did win well
55:38 - that's what we're gonna handle next
55:39 - seeing if user one giving them their bet
55:42 - amount or whatever they want
55:44 - Etc okay so let's just quickly recap
55:46 - here we've done depositing some money
55:48 - determining the number of lines
55:49 - collecting a bad amount spinning the
55:51 - slot machine we then transpose the slot
55:53 - machine now that we have it transpose
55:55 - it's going to be really easy to check if
55:56 - the user won we're going to do that and
55:58 - then we need to determine their winnings
56:00 - uh to get back to them right
56:01 - okay so let's
56:04 - go ahead
56:05 - and do that so we're going to say const
56:08 - get winnings all right now to do this
56:12 - we're going to take the rows
56:14 - we're going to take the BET amount and
56:17 - we're going to take the lines
56:19 - that the user bet on that's what we need
56:21 - to know to be able to determine what
56:22 - they want if they only bet on one line
56:24 - we're only checking the first row the
56:25 - bet on two checking both those rows if
56:28 - they bet on three then we're checking
56:29 - all of the rows okay so let's go through
56:33 - this so we're gonna Begin by saying
56:35 - let's
56:37 - winnings equal zero and then we'll add
56:40 - to that whenever they win something all
56:42 - right so to do this we're going to Loop
56:44 - through all of the lines which is really
56:46 - the row indices that we want to be
56:48 - checking so we're going to say four and
56:51 - we can say let row equal zero row is
56:56 - less than lines row plus plus now the
56:59 - reason this for Loop is going to work
57:00 - for us is if lines is one that means
57:03 - we're only ever going to look at row at
57:05 - index 0. if lines is two we're going to
57:07 - look at index 0 and index one which will
57:09 - be the first two rows if it's three we
57:11 - look at zero one and two and that means
57:13 - that we're going to look at all of the
57:15 - rows that are inside of R well rows okay
57:18 - so now we're going to say const
57:21 - um
57:22 - symbols is equal to and then this is
57:25 - going to be rows at whatever the row
57:27 - index is all right so now that we have
57:29 - all the symbols we just need to check if
57:31 - all of them are the same so I'm going to
57:33 - create a variable here and I'm going to
57:34 - say let
57:35 - all same
57:38 - equal true now what we're going to do is
57:40 - if we find that one of the symbols is
57:43 - not the same we're going to make this
57:44 - variable false we're then going to use
57:45 - that later
57:46 - to determine if the user won in this
57:50 - specific row okay so we're gonna go four
57:53 - and then we're gonna say
57:56 - const symbol of symbols Again iterating
58:00 - by item here looking at each of the
58:02 - individual symbols all we're going to do
58:04 - here is we're going to say if
58:06 - the symbol
58:08 - does not equal
58:09 - symbols at index 0 then we're going to
58:13 - say all the same equals false and we're
58:16 - going to break out of the fourth there's
58:18 - a bunch of different ways to go about
58:19 - doing this what I'm doing is not
58:20 - necessarily the most efficient because
58:22 - we're going to be repeating a certain
58:24 - check but it's fine for the purposes of
58:26 - this tutorial so the reason I'm doing
58:28 - this is I'm saying okay I'm going to
58:29 - Loop through every single one of the
58:31 - symbols that I have now if every single
58:33 - symbol that I have is the same as the
58:34 - first symbol all of them are going to be
58:36 - the same so I'm just using the first
58:38 - symbol AS what it is that I'm going to
58:39 - compare against and again if all of them
58:42 - are the same as the first symbol then
58:43 - all of them must be the same so in the
58:45 - situation where one of them is not the
58:47 - same so symbol does not equal symbols at
58:49 - index zero then I'm going to say all
58:51 - same equals false and then I'm going to
58:53 - break out of this for Loop because
58:55 - there's no reason to continue looking if
58:58 - on one of the symbols is not the same
59:00 - now this break keyword as I just
59:02 - described is simply going to exit the
59:03 - for Loop so it doesn't matter what
59:04 - iteration you're at if you see this
59:06 - break keyword boom you're done iterating
59:08 - so we're setting all same equal to false
59:10 - and that means we did not win in this
59:13 - specific line or in this specific row so
59:16 - now we come down here after we've
59:17 - iterated through and if all the same is
59:19 - false we didn't win all same is true we
59:22 - did win because if it's true that means
59:23 - we got through here this was never the
59:25 - case and that means that all of the
59:27 - symbols are the same so we're going to
59:29 - say if
59:31 - all same
59:33 - then winnings and this is going to be
59:36 - plus equal the bet
59:38 - multiplied by and then this is going to
59:42 - be the not rows sorry
59:46 - the symbol values at symbols at index 0.
59:51 - I know a little complex here but
59:54 - remember symbol values is what we have
59:56 - all the way up here we have five four
59:58 - three two right this is the multiplier
60:00 - so we need to find that multiplier uh
60:02 - and multiply that by our bet so if we
60:04 - had a row of A's then we're going to
60:06 - take whatever our bet is and we're going
60:07 - to multiply it by five again we're only
60:09 - doing that if all the symbols were the
60:11 - same we're determining what the symbol
60:13 - is that we want to look for the
60:14 - multiplier for by just grabbing the
60:16 - first symbol in the row at this point we
60:18 - know that all of them are the same so we
60:19 - could really grab any index from the row
60:21 - but we know we're always going to have
60:23 - at least one symbol uh so this is fine
60:25 - to do
60:26 - okay so that's actually all we need for
60:28 - this now we're going to return our
60:31 - winnings
60:32 - all right uh hopefully that is all clear
60:35 - I think that that is correct if I made
60:37 - any mistake of course I will fix that
60:39 - and also let me just get rid of this
60:41 - actually no we want the const.log sorry
60:43 - I don't know why I was gonna remove that
60:44 - all right so now after we print our rows
60:47 - we want to determine what the uh the
60:51 - winnings is we're going to say const
60:53 - winnings is equal to get and did I call
60:57 - this winnings yes and then what do I
60:59 - need to pass here my rows my bet and my
61:02 - lines so we're going to say rows
61:05 - we're going to say bet and then we're
61:07 - going to say lines now I just want to
61:10 - confirm here what the bet is actually
61:12 - going to be because if the bet is the
61:14 - total bet that's not what we want we
61:16 - want the BET per line so let's look at
61:18 - get bet
61:20 - okay so get bet uh return number bet yes
61:24 - okay so it looks like the bet that we're
61:26 - returning here is the bet that we have
61:27 - per line which is what we want uh
61:30 - because that's what we're multiplying by
61:31 - if we have an entire line
61:33 - okay so now we have our winnings now I'm
61:35 - just going to print
61:37 - you one
61:39 - and then we can say comma
61:43 - and a dollar sign and then we can say
61:46 - plus and sorry this is not print this is
61:48 - console.log I'm writing in Python right
61:50 - now and then we can say plus winnings
61:53 - and I don't know if we have to dot two
61:54 - string or not uh but I'm going to put
61:57 - this dot two string okay so we have cost
61:59 - winnings equals get winnings rows bets
62:01 - lines it tells us how much money we won
62:03 - so we're gonna get that and we're gonna
62:04 - print out U1 and then whatever that
62:06 - dollar amount is then we're gonna have
62:09 - to kind of continue this game a little
62:10 - bit but for now this should give us one
62:12 - round or one spin of the slot machine so
62:15 - let's try this
62:17 - okay enter a deposit amount let's
62:19 - deposit 100 let's bet on all three lines
62:22 - let's enter the BET per line of maybe
62:24 - ten dollars and we got an error here it
62:27 - says lines is not defined okay so that's
62:29 - at line 144 uh lines here Ah that's
62:33 - because we need number of lines
62:37 - okay so that was the issue let's quickly
62:39 - fix that
62:40 - let's come back here and Run 100 3 and
62:44 - then ten and we won zero dollars okay
62:47 - let's try it again
62:48 - 100 3 10 you won zero dollars uh okay
62:54 - hopefully we're gonna win something so
62:56 - let's see here three ten you won twenty
62:59 - dollars okay perfect and the reason we
63:01 - won twenty is because we uh bet ten
63:03 - dollars on three lines and we won with
63:06 - this line here giving us twenty dollars
63:07 - because we had a two times multiplier
63:09 - with the D's now if we want to multiple
63:11 - lines of course we'd get the winnings
63:12 - for all of them all right so that is
63:15 - really the core Logic for our game now
63:17 - what was the last thing we need to do
63:18 - here we need to give the user their
63:19 - winnings and we need to play the game
63:21 - again so let's work on that uh and once
63:24 - we do that then we're gonna be finished
63:25 - this game all right so how are we going
63:27 - to turn this into a fully functioning
63:29 - game we have the core logic here but
63:32 - after we determine what the user wins we
63:34 - need to give them those winnings we also
63:36 - need to subtract whatever their bet is
63:39 - um from their balance right so let's
63:41 - make a function let's say Define
63:44 - are not defined again I keep writing in
63:46 - Python sorry guys we're going to call
63:48 - this game now this will just be one
63:50 - round uh will this be one round of the
63:52 - game no it's okay this can be the entire
63:54 - game so we're gonna go game and then
63:56 - we're gonna call the game function down
63:58 - here uh just to kind of clarify where
64:00 - everything is for our code okay so we
64:02 - start by determining the bounce that's
64:04 - fine then we get the number of lines the
64:06 - bet the reals the rows Etc now all of
64:09 - this stuff here we're gonna do no matter
64:11 - what right we're just gonna keep playing
64:12 - if the user wants to continue playing so
64:15 - I'm going to say
64:16 - while true here
64:18 - and then I'm going to do
64:19 - all of this okay now we're going to add
64:22 - some more code obviously but we're going
64:23 - to keep doing this if they run out of
64:25 - money then we are going to break or if
64:27 - they say they don't want to play anymore
64:28 - then we're going to break the while loop
64:29 - and kind of get out of it so we start
64:31 - get the number of lines we get the bet
64:34 - we get the reels we get the rows we
64:35 - print this out we get the winnings now
64:37 - let's start handling some logic here so
64:39 - after we collect what the user's bet is
64:40 - we are going to take the balance and
64:44 - we're going to subtract so minus equals
64:46 - this means take the balance and subtract
64:48 - from It Whatever the bet is multiplied
64:51 - by the number of lines because this bet
64:53 - is per line so whatever number of lines
64:55 - I bet on that's what we're removing okay
64:57 - so we remove that from the balance
64:59 - subtract it then we generate our reels
65:03 - we print the rows we tell the user what
65:06 - they want and then we have to add this
65:07 - to their winnings so we're going to say
65:10 - balance
65:12 - plus equals
65:14 - winnings perfect
65:16 - now at the top here we should probably
65:19 - always tell them what their balance is
65:20 - so they know what it is before they spin
65:22 - again so we're going to say print
65:25 - you have a
65:29 - balance of and then we're gonna do a
65:32 - dollar sign and then we're gonna do a
65:34 - plus and then we're going to put the
65:36 - balance so that it looks like it's money
65:38 - okay so we print what their balance is
65:40 - sorry this needs to be console.log I'm
65:42 - gonna keep making that mistake we have
65:45 - the winnings and now all we need to do
65:47 - down here is we need to check if they
65:48 - have zero dollars left if they do then
65:51 - we are going to quit the game or we're
65:53 - going to ask them do you want to walk
65:54 - away do you want to stop gambling Etc if
65:55 - they say yes then we're gonna break so
65:57 - I'm gonna go here I'm gonna say if
65:59 - the balance is we can say less than or
66:02 - equal to zero but really it's never
66:04 - going to be able to be at that but
66:05 - that's fine we'll say if it's less than
66:06 - or equal to zero then we're going to
66:09 - break but first we'll go console.log
66:12 - you ran out of
66:16 - money exclamation point
66:18 - okay
66:19 - and then we're going to say
66:23 - after this we're going to ask the user
66:25 - if they want to play again so we're
66:27 - going to say cons play again
66:30 - is equal to
66:32 - prompt
66:34 - do you want to play again question mark
66:38 - and then we're going to accept as an
66:40 - answer either y or n and if they type
66:43 - anything other than
66:45 - why then we are going to quit so I'm
66:48 - going to say if
66:50 - play again does not equal y then we can
66:54 - simply break notice that when you're
66:56 - just doing a one line
66:58 - um kind of if statement or you have a
66:59 - one line body you don't actually have to
67:01 - add the curly braces here you can just
67:03 - write it directly after the if statement
67:05 - so if they didn't type yes to wanting to
67:07 - play again then we're just going to
67:08 - break and leave the game otherwise we
67:11 - just keep playing so if they run out of
67:12 - money we quit or if they tell us they
67:14 - want to leave then we break
67:16 - okay hopefully that's clear Let's test
67:18 - our game make sure everything's working
67:19 - uh and then that's gonna pretty much
67:21 - wrap up this project so let's go here
67:23 - node project.js let's deposit 100 we
67:26 - have a balance of 100 enter the number
67:28 - of lines to bet on let's bet on two
67:29 - lines enter the BET per line let's do
67:32 - five dollars you won zero dollars okay
67:35 - do you want to play again yes you have a
67:37 - balance of ninety dollars and to the
67:39 - number of lines to bet on let's bet on
67:40 - three lines
67:41 - a per line of ten dollars you won zero
67:44 - dollars do you wanna play again all
67:45 - right this isn't going too well for us
67:46 - you have a balance of sixty dollars
67:48 - that's a number of lines to bet on three
67:51 - bet per line two we won six dollars so I
67:54 - guess we had a three times multiplier
67:56 - there with our C's
67:58 - play again
67:59 - and you get the idea we can continue
68:00 - playing this obviously we could clean up
68:02 - the terminal a little bit make it a bit
68:03 - cleaner and kind of easier to understand
68:05 - let me just go through this here so I
68:07 - can quit
68:08 - and exit but I think that is going to do
68:10 - it for now
68:12 - all right so let's quickly run through
68:13 - everything one last time I'll just like
68:15 - kind of high level overview the code and
68:17 - everything that we did by the way all
68:18 - this code will be available from GitHub
68:20 - then we're going to wrap up the video so
68:22 - first of all we have prompts or
68:24 - requiring this module so we can get some
68:25 - user input we Define some Global
68:28 - variables here we do them in all
68:29 - capitals just so it's clear there
68:31 - constants and they're at the top of our
68:33 - program
68:33 - okay we have our function deposit talked
68:36 - about that continually ask the user for
68:38 - a valid deposit get number of lines get
68:41 - the number of lines or rows in this case
68:43 - that the user wants to bet on get the
68:45 - BET same thing we're going to get a
68:46 - valid bet amount per line based on the
68:49 - balance uh that they have and the number
68:51 - of lines they are betting on next we are
68:53 - going to spin the slot machine to do
68:56 - this we need to generate all of the
68:57 - possible symbols in each wheel we then
68:59 - need to randomly select them put them on
69:01 - a real uh and that's what we've done
69:03 - okay then we have transpose this is kind
69:06 - of a helper function that's going to
69:07 - convert all of our columns into all of
69:09 - our rows so we can better use this
69:12 - information it's easier for us to check
69:13 - if the user want anything and it's easy
69:16 - for us to kind of print out this
69:17 - information
69:18 - next we have print rows again this is
69:20 - just going to print out all of our rows
69:22 - and kind of nice fancy formatting then
69:24 - we have get winnings determining all of
69:25 - the winnings in user one from the
69:28 - specific rows or reels that they had in
69:30 - the slot machine lastly we have our game
69:32 - function where we continually play the
69:34 - game until the user runs out of money or
69:36 - until they tell us they don't want to
69:38 - play anymore
69:39 - alright so I hope with that said you
69:41 - guys have learned a lot in this video I
69:44 - know this is not perfect again I was
69:45 - doing this just from scratch I didn't
69:47 - have any cheat sheet this was just me
69:48 - thinking about it on the Fly I wanted to
69:51 - show you how I think about problems how
69:52 - I solve problems how I structure the
69:54 - program and hopefully you guys found
69:55 - some value in that if you like these
69:57 - styles of videos let me know in the
69:59 - comments down below I always appreciate
70:01 - all of your support and your feedback
70:03 - really you guys the ones who give me all
70:04 - the kind of ideas for videos to make and
70:07 - someone on a previous video said hey you
70:09 - should make a video like this for
70:10 - JavaScript so that's what I did
70:12 - regardless I hope you guys enjoyed if
70:14 - you did make sure to leave a like
70:15 - subscribe the channel I will see you in
70:17 - the next one
70:18 - [Music]
70:24 - foreign