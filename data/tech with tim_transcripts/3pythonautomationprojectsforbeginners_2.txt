00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video in today's video i'm going
00:13 - to be sharing with you three python
00:15 - automation projects for beginners now
00:17 - these are simple python projects that
00:19 - are meant to show you a real world use
00:21 - case of python so even if you don't end
00:24 - up using these for automation you will
00:26 - learn a lot and you'll learn
00:27 - specifically some standard libraries as
00:30 - well as how to interact with apis and a
00:32 - few other things that you probably don't
00:33 - know as a beginner python programmer
00:36 - with that said for all of these projects
00:38 - i'm going to assume you have a basic
00:39 - understanding of python so maybe you
00:42 - know about for loops you know about if
00:43 - statements you know about variables just
00:45 - the very basics i'll explain everything
00:47 - in as much depth as possible and
00:49 - hopefully after following along you'll
00:51 - have three completed automation projects
00:53 - with that said let me list out the
00:55 - projects and then we'll get into them so
00:57 - the first project we're going to work on
00:58 - is a multi-clipboard this is a program
01:01 - that's going to allow you to actually
01:02 - store multiple things on your clipboard
01:05 - at the same time you'll see how that
01:06 - works when i demo it in a second then we
01:09 - are going to work on a weather api
01:11 - application so this is going to allow
01:13 - you to get the weather of any city in
01:15 - the world as well as the temperature and
01:17 - some other information like that and
01:19 - then lastly we are going to work on a
01:21 - program that allows you to send an email
01:23 - in python so three pretty useful things
01:26 - you can learn how to do again even if
01:27 - you don't use these projects they will
01:29 - teach you a lot with that said let's go
01:31 - ahead and get into it after a quick word
01:34 - from our sponsor
01:35 - before we dive in i need to thank ltm
01:37 - designer for sponsoring this video ltm
01:40 - designer is the world's most trusted pcb
01:42 - design system that enables engineers to
01:44 - effortlessly connect with every facet of
01:46 - the electronics design process ltm
01:49 - designer has used 35 years of innovation
01:52 - and development to create a truly
01:53 - unifying design environment that makes
01:55 - it the most used pcb design solution on
01:58 - the market ltm designer provides an
02:00 - intuitive and powerful interface that
02:02 - lets you design pcbs rapidly while
02:04 - interacting and collaborating with your
02:06 - mechanical designers the interface
02:08 - provides a photo realistic 3d
02:10 - environment collaboration and
02:12 - synchronization with tools including
02:14 - solidworks ptc creo and autodesk
02:16 - inventor realistic rigid flex designs
02:20 - multi-board assembly and much more ltm
02:23 - designer is the most popular ecad tool
02:25 - and electronics design software and you
02:27 - can get started with it today for free
02:29 - by pressing the link in the description
02:31 - and registering for a free trial thanks
02:34 - again to altium designer for sponsoring
02:36 - this video and now let's dive in all
02:38 - right so let's go ahead and get started
02:40 - now i just want to run you through my
02:42 - environment here so you understand the
02:43 - different tools that i'm using right now
02:45 - i have visual studio code open this is a
02:48 - free code editor that you can write
02:49 - python code in you do not need to use
02:52 - this in fact you can use anything that
02:53 - you'd like so long as you understand how
02:56 - to use the tool and how to run your
02:57 - python code if you don't already have
02:59 - something to write python code in i
03:00 - would recommend vs code you also can
03:02 - just use the standard idle application
03:04 - that comes with python when you install
03:06 - that by default great now i'm going to
03:08 - be using python version 3.9 for this
03:11 - video you can use any version of python
03:13 - that is 3.6 or above so just make sure
03:16 - it's 3.6 or above you really should be
03:18 - using that version anyways because the
03:19 - other ones are quite old at this point
03:21 - in time
03:22 - all right so with that said let's get
03:24 - into this first application here this
03:26 - first project which is going to be the
03:27 - multi-clipboard now the idea behind this
03:30 - application is to be able to store
03:32 - multiple things on your clipboard right
03:34 - so the clipboard is when you copy and
03:36 - paste stuff currently you only have
03:38 - access to kind of one save slot so you
03:40 - copy something paste it and then when
03:42 - you copy something else it's going to
03:43 - override what you already have now the
03:45 - idea here is to build an application
03:47 - that allows us to store multiple things
03:50 - from our clipboard and then easily load
03:52 - all those things to our clipboard so
03:54 - essentially we have a multi-clipboard
03:56 - now it's not going to be as seamless as
03:58 - you know a bunch of keyboard shortcuts
03:59 - but you'll see how it works here as i
04:01 - demo the project so i actually am in a
04:03 - different folder not the one that i have
04:05 - open in vs code where i have a working
04:07 - version of this application and the way
04:09 - it works is you run python
04:11 - multi-clipboard.pi this is the name of
04:13 - the file and then you pass a command now
04:15 - the command can be add
04:17 - or sorry not add save
04:20 - load or list so what i'm going to do
04:21 - right now
04:22 - is i'm going to type save and it's going
04:24 - to ask me a key to save this data under
04:27 - now the data is whatever is currently on
04:28 - my clipboard so whatever i've copied
04:30 - previously so what i'm going to do here
04:32 - is just say test and now it's going to
04:34 - say data saved now if i want to view all
04:37 - of the different pieces of data or all
04:39 - of the clipboard items that i have in
04:41 - this application i'm going to pass the
04:43 - command list and you're going to see
04:44 - that i have a key test associated with
04:47 - email message that's what i had on my
04:49 - clipboard you can see here if i paste
04:51 - that's what it is email message right so
04:53 - that's why it's saved there i also have
04:55 - f and that corresponds with an ethereum
04:57 - address
04:58 - anyways let's now use this to actually
05:00 - load a key so what i'm going to do is
05:02 - pass load and now it's going to ask me a
05:04 - key to load the data from so i'm going
05:06 - to type in f
05:08 - and when i do this now my clipboard has
05:11 - that on it so it's controlling your
05:12 - clipboard and it's going to take what
05:14 - you have on the clipboard and save it or
05:16 - change what's on your clipboard to be
05:17 - whatever the key is that you passed
05:20 - hopefully that makes sense this is a
05:21 - pretty useful thing to do and of course
05:23 - i will demonstrate how we do that so
05:25 - that said what we're going to want to do
05:27 - here is open up a new python file this
05:29 - is called multiclipboard.pi you can call
05:31 - it whatever you'd want and just open it
05:33 - in a folder or someplace on your
05:35 - computer that you know the location of
05:37 - it because we're going to have to
05:38 - actually run the python code from the
05:40 - command line rather than hitting this
05:42 - nice run button if we just hit the run
05:44 - button it's not going to work as we
05:46 - expected although i can show you kind of
05:48 - a workaround in case you don't know how
05:49 - to run it from the console okay so we
05:51 - have multi-clipboard.pi now the first
05:53 - thing i want to do in here is just
05:54 - import a few modules and then talk to
05:56 - you about how we actually accept kind of
05:59 - keyword arguments or command line
06:01 - arguments from our python script so i'm
06:03 - going to import the module sys i'm also
06:06 - going to import the module clipboard now
06:08 - this is built into the python standard
06:11 - library which means you don't actually
06:13 - need to install any of these modules
06:14 - they already exist i'm also going to
06:16 - import something called json now the
06:18 - idea here is i want to actually store
06:20 - all of these clipboard items in a file
06:23 - so the file i'm going to use is a json
06:25 - file and i'll talk to you about how a
06:26 - json file is kind of formatted in a
06:28 - minute for now though let's have a look
06:30 - at how we use the clipboard module
06:32 - because it's very straightforward so
06:34 - what i can actually do is say
06:36 - data is equal to clipboard dot and then
06:39 - let me just reference my cheat sheet
06:41 - here
06:42 - and i'm going to go with paste now what
06:44 - paste does is exactly what it sounds
06:46 - like it's going to paste the data from
06:47 - your clipboard to this data variable so
06:50 - let's just print out data
06:53 - and notice that if i paste right now
06:54 - this is the data that i have on my
06:56 - clipboard and when i run my code here by
06:58 - hitting this run button you'll see that
07:00 - it should just print out what's on my
07:01 - clipboard so easy enough that's how you
07:03 - actually get the data from a user's
07:05 - clipboard use clipboard.paste
07:07 - now to actually save data to the user's
07:09 - clipboard you do the following
07:11 - do clipboard
07:13 - like this dot and then i believe this is
07:16 - copy
07:18 - and i'm just going to put something like
07:19 - abc okay so i'm just going to say
07:20 - clipboard.copyabc
07:22 - i'm going to run this and then i'm just
07:24 - going to paste and notice now that i
07:25 - have abc on my clipboard so there you go
07:27 - you've just learned how to use the
07:29 - clipboard module okay so now that we've
07:30 - looked at that what i want to do next is
07:32 - show you how we can run this python
07:35 - script directly from a command line so
07:38 - using the python command rather than
07:40 - actually hitting a button so this is
07:42 - something that might be a little bit
07:43 - difficult if you haven't done this
07:44 - before i'm going to try to explain it in
07:46 - as many ways as possible and if you know
07:48 - how to do this maybe just fast forward a
07:49 - minute or two in the video and you'll
07:51 - get to the point we actually start
07:52 - writing the rest of the code anyways the
07:54 - point is i don't want to be able to hit
07:56 - this button i want to actually run the
07:58 - code from my command line now the
07:59 - command line is your terminal or your
08:01 - command prompt if you're on mac or linux
08:03 - it's going to be your terminal if you're
08:05 - on windows it's going to be your command
08:07 - prompt now if you're working in vs code
08:08 - this is really easy for you all you have
08:11 - to do is kind of open up this bottom
08:12 - window here which you can get from just
08:14 - dragging from the bottom and you'll see
08:16 - that you should have either a terminal
08:17 - or a command prompt open depending on
08:19 - your operating system now this here kind
08:21 - of to the left of this angled bracket is
08:24 - the path that your terminal or command
08:26 - prompt is currently in now you want this
08:28 - path to be the same location where your
08:30 - python file is so notice i have users
08:33 - tim tutorial
08:35 - and then if i type the command der
08:37 - this is actually going to show me all of
08:38 - the stuff that's in this folder and well
08:40 - what's inside of here is
08:41 - multiclipboard.pi
08:43 - if you're on mac or linux you could type
08:45 - ls and then that would show you all of
08:47 - the files as well
08:49 - anyways the point of me showing you that
08:50 - is that i'm currently in the correct
08:52 - location where my python file is and
08:54 - that allows me to actually directly
08:56 - access this file and run the python
08:58 - command with it so i can say python
09:00 - multi-clipboard.pi and run the file now
09:03 - i'm going to show you how to get here if
09:04 - you're not already here you're not
09:06 - working in vs code so if that's the case
09:09 - first you want to figure out where your
09:11 - your file actually is right so you can
09:13 - do that by going to your finder or going
09:14 - to your windows explorer i know where
09:16 - mine is mine is on this pc it's in c
09:19 - drive it's in users tim and then i have
09:22 - a folder here called tutorial uh i gotta
09:25 - find where this is all right so i've
09:29 - just opened the folder here i just had
09:30 - to search for it for a little bit
09:31 - anyways i have this tutorial folder and
09:33 - you notice this is where my
09:34 - multi-clipboard python file is now again
09:37 - if you are on mac or linux or windows
09:39 - whatever just open up in finder or open
09:42 - up in windows explorer this location and
09:44 - then look for the path of this file if
09:46 - you're on windows it's really easy you
09:48 - should see it right in this search bar
09:49 - and you can just copy it directly so
09:51 - ctrl c if you're on mac you might need
09:53 - to right click click on something like
09:55 - get info and then it should show you the
09:57 - path to this file you just want the
09:59 - location of it now once you have that
10:01 - location what you can do is open up your
10:03 - command prompt or open up your terminal
10:05 - so just by going to maybe the windows
10:06 - bar and typing command prompt or if
10:08 - you're on mac you're going to go to the
10:10 - spotlight search and type for terminal
10:12 - linux you should be able to open the
10:13 - terminal and what you want to do i can
10:15 - actually just do this directly here is
10:17 - type in the command cd this stands for
10:19 - change directory and then you want to
10:21 - paste in the path to where your python
10:23 - file is so in this case this is my path
10:26 - and what cd again change directory so
10:28 - i'm going to change into this directory
10:30 - so cd
10:31 - into this right now so now i'm inside of
10:33 - tutorial and now that i'm here i'm able
10:35 - to use the python command to actually
10:36 - run my python file which i will now show
10:39 - you so hopefully at this point in time
10:40 - you've been able to get into the correct
10:42 - directory there's not really much more
10:43 - that i can explain you might have to
10:45 - look it up on a different video or kind
10:47 - of go to stack overflow or something but
10:49 - at this point we can actually run our
10:50 - python file using the python command so
10:52 - i can type python and then the name of
10:55 - my file notice i don't have to type the
10:56 - same the whole thing i can just type in
10:58 - m ul and then hit tab it completes the
11:01 - whole file name and then when i do that
11:02 - it will actually run the python file now
11:05 - if you're on mac or linux you'll likely
11:06 - have to use the python3 command so
11:08 - python3 multi-clipboard.pi
11:11 - and this should work now notice i'm
11:12 - getting an error here because i'm on
11:14 - windows but try python or python3 and
11:16 - then that will actually run your python
11:18 - file
11:19 - okay again can't really explain that
11:21 - much more you need to be able to open
11:23 - and run your python file from the
11:24 - command line either terminal or command
11:26 - prompt again the way you do that is you
11:28 - change the directory into the directory
11:30 - where your python file is you can find
11:32 - the location of that by going to finder
11:34 - or windows explorer and then you type
11:36 - the command cd space and then whatever
11:39 - that full location is and it should
11:40 - bring you to that directory where you
11:42 - can then run the python file now the
11:44 - whole reason why we need to do that is
11:45 - because we're passing command line
11:47 - arguments to our python file when we run
11:49 - it i'm going to show you how we do that
11:51 - now so the way that we actually can pass
11:53 - command line arguments to our python
11:55 - file is we do something like
11:58 - python
11:59 - multi-clipboard.pi and then like you saw
12:01 - me do we pass for example the command
12:03 - test or the command save now how do i
12:06 - actually access those in python well
12:07 - that's why we have the sys module import
12:10 - so what i'm going to do here is just
12:11 - print out sys dot and then this is going
12:14 - to be arg v now arg v is going to give
12:16 - you all of the command line arguments
12:18 - that are passed alongside when you run
12:20 - this python file so anything that comes
12:22 - after multi-clipboard
12:24 - actually this will be passed as well so
12:26 - i'm going to save this now i'm just
12:27 - going to type test
12:29 - hello world like this and when i hit
12:31 - enter here notice it's going to give me
12:33 - a list that's containing all of the
12:35 - stuff that i passed after the keyword
12:37 - python so this is how you access the
12:39 - different command command line arguments
12:41 - hopefully that makes sense
12:43 - but that's what we're going to use for
12:44 - this tool so i need it to explain it now
12:46 - if i want to access say just test or
12:48 - just hello or just world maybe all the
12:49 - ones that come after this name right
12:51 - here there's a few ways to do that the
12:53 - first thing i could do is take a slice
12:54 - so i could say one colon which means now
12:57 - i'm not going to include the first
12:59 - element right here but i'll include the
13:00 - rest of them so now if i run this so
13:03 - let's just run the same command notice
13:04 - now i just get test and hello world
13:07 - awesome so for our application we only
13:09 - want to accept one command after the
13:12 - multi-clipboard upir after the python
13:14 - file name so to do that we are going to
13:17 - write an if statement that checks if the
13:19 - user has passed exactly one command so
13:22 - i'm going to say if and actually
13:24 - yeah i'm going to say if the len of
13:26 - sys.rgv
13:29 - is equal to 2. now the reason i'm
13:31 - checking if it's 2 is because i'm going
13:32 - to have the name of my python file and
13:34 - then the name of the command so it needs
13:36 - to be exactly two command line arguments
13:39 - if this is the case then i want to get
13:40 - the second argument so i'm going to say
13:42 - my command is equal
13:44 - to sys.rgv
13:46 - at index one right because i'm accepting
13:49 - the second argument which is going to be
13:50 - the first index in the list
13:53 - then i'm going to print out
13:55 - my command
13:57 - okay so let's run this now
13:59 - when i do this
14:00 - notice now that my command is test
14:02 - that's exactly what i want once i get
14:04 - the different commands and i can start
14:05 - actually handling them and just to
14:06 - clarify here in case i didn't mention
14:08 - this the multi-clipboard.pi again let's
14:10 - name my python file what i have named
14:12 - right here if you named your python file
14:14 - something different you're going to
14:15 - change multi-clipboard.pi to whatever
14:17 - you named your python file if you named
14:18 - it test you're going to do test if you
14:20 - named it main you're going to do main
14:21 - hopefully that is clear okay so we have
14:23 - the command now and what i want to do is
14:25 - i want to check if the command is equal
14:27 - to the three commands that we're going
14:29 - to allow which is going to be save load
14:31 - and list so i'm going to say if
14:34 - the command is equal to save then we can
14:37 - do something for now we'll just print
14:39 - save but we will actually save something
14:41 - we're going to say alif the command is
14:44 - equal to load
14:46 - then what we want to do is we want to
14:48 - load something and don't worry i'll
14:49 - pause you guys can copy all this down
14:51 - and i'll say lf command is equal to
14:54 - list
14:55 - then i want to print list and then
14:59 - otherwise i'm going to say
15:01 - print
15:03 - and we'll just type
15:05 - unknown command okay
15:08 - nice what am i doing wrong here awesome
15:11 - okay so now i'm handling the different
15:13 - commands that we can type in if you type
15:14 - one that we don't know we're gonna do
15:16 - unknown command now the way that this is
15:18 - working in case you're not familiar with
15:19 - the if statements is we're checking if
15:21 - the command is equal to these different
15:23 - strings i think that's pretty
15:24 - straightforward whatever's in the
15:25 - indented block is going to happen if the
15:28 - condition here which is just checking
15:30 - for equality is true now the elif says
15:32 - that i'm only going to check this right
15:34 - here so this condition if this one was
15:36 - false so if the command wasn't save i'll
15:38 - check if it's load if it wasn't load
15:40 - i'll check if it's list and if it wasn't
15:41 - save load or list then i will print out
15:43 - unknown command nice now one other thing
15:46 - i'd like to do is make it so that if you
15:47 - don't type in exactly two arguments then
15:50 - you get an error message that says
15:52 - please type in a command or something
15:54 - like that right so say print
15:56 - please pass
15:58 - exactly
16:01 - one command okay so now you get an error
16:03 - message if you don't type in exactly two
16:05 - which is really one command because one
16:07 - includes the python file name
16:09 - okay so now that we've done that
16:11 - what i want to do is figure out how i'm
16:13 - actually going to store these commands
16:14 - and as i mentioned we're going to use a
16:16 - json file to do that so i'm going to
16:18 - make a new file and i'm going to call
16:20 - this
16:21 - clipboard dot json and i realized i said
16:24 - we were saving commands no we're not
16:26 - saving commands we're going to be saving
16:27 - things that are on our clipboard
16:29 - now a json file is very similar to a
16:31 - python dictionary and it allows us to
16:33 - store key value pairs so inside of the
16:37 - json file we can have something like key
16:40 - and then have it associated with some
16:43 - value now this is again very familiar or
16:45 - very similar to a python dictionary and
16:47 - we're going to use the json file to
16:49 - store all of the keys and all of the
16:50 - values where each key is a clipboard
16:53 - item or a clipboard key and each value
16:55 - is what was actually on the clipboard
16:56 - right that we were associated with that
16:58 - key so hopefully that makes a bit of
16:59 - sense but this is the basic kind of
17:01 - syntax for json you have double
17:03 - quotation marks for your key name you do
17:05 - a colon and then you can store some
17:06 - different values we're just going to be
17:08 - storing strings but you could store
17:09 - numbers you could store booleans
17:12 - notice that there's no capital here it's
17:13 - just going to be a lowercase for the
17:15 - true you could store arrays or lists
17:18 - like this you can store other json
17:20 - objects json is really cool and i
17:21 - actually have a video on json it's
17:23 - either live now or going live soon
17:25 - anyways you can check my channel and see
17:27 - if that's up right now okay so this is
17:29 - our clipboard file i'm actually gonna
17:30 - delete this for now because we're going
17:31 - to create this from code but i just
17:33 - wanted to show you kind of the json
17:34 - syntax and why we're going to use that
17:36 - to store our data so now that we've
17:38 - looked at that i want to write a
17:40 - function that's able to create a json
17:42 - file for us and one that's able to read
17:45 - a json file for us so let's create one
17:46 - first so i'm going to say define i'm
17:48 - going to say save
17:50 - and let's just call items like that now
17:53 - inside of save items what i want to take
17:55 - in is a file path
17:57 - now the file path is where i want to
17:58 - save this essentially and then i want to
18:00 - take in some data and the data is going
18:02 - to be well the data that i want to save
18:04 - to this file
18:05 - now what i'm going to do is i'm going to
18:06 - open a file so i'm going to say with
18:08 - open i'm going to put file path as the
18:11 - file that i want to open because we're
18:12 - going to pass that as a parameter to the
18:14 - function and i'm then going to put this
18:16 - in r mode now r stands for read so i'm
18:18 - going to be sorry i want this to be w
18:20 - mode good job i said that because w
18:22 - stands for write this means i'm going to
18:24 - override this file if it already exists
18:27 - or i'm going to create a new one so i'm
18:29 - going to say with open file path w i'm
18:32 - going to put as f essentially that just
18:34 - means that f is going to store whatever
18:36 - i've opened right here and then here
18:38 - what i can do is use the json library to
18:41 - actually dump some data to a file
18:43 - which you're going to see right now so
18:45 - i'm going to say json.dump
18:47 - and i'm going to dump the data
18:49 - to the file f and that's as easy as it
18:51 - is to actually save data to a json file
18:54 - so let's just look at what this is doing
18:56 - we've defined a function the name of the
18:57 - function is save items if you're
18:59 - unfamiliar with functions you call them
19:01 - by writing the name of the function and
19:03 - then passing the corresponding
19:04 - parameters so these are two pieces of
19:06 - data that we need to pass so i could
19:08 - pass something like test.json
19:10 - and then since json is very similar to a
19:13 - python dictionary the data that i'm
19:15 - going to pass here is just going to be a
19:16 - python dictionary so i'm going to pass
19:18 - some key
19:19 - associated with some value right this is
19:22 - just a kind of a dummy function call so
19:23 - you can see how this works anyways
19:25 - that's what i'm passing so i'm saying
19:26 - save items the name of the file is
19:28 - test.json then we have our key and value
19:30 - in a python dictionary so that's our
19:32 - data
19:33 - then what i do is i say with
19:35 - open i'm opening the file path which is
19:37 - test.json in w mode which means i'm
19:40 - going to create a new file
19:41 - or override an existing file if it's
19:44 - there so just pretty much recreate it
19:46 - but empty anything that's currently
19:47 - inside of it i'm going to open this as
19:49 - the variable f
19:51 - then i'm going to say json.dump what
19:53 - this will do is write the python
19:54 - dictionary as a json object to this file
19:58 - so i'm going to dump the data to the
19:59 - file f and then it will create the file
20:01 - for us so let's just run the code and
20:03 - you'll see that this should work
20:05 - so i'm just going to run it like that it
20:06 - gives me unknown command that's fine but
20:08 - notice test.json was created and it
20:10 - wrote key and value inside of here
20:12 - hopefully that makes sense but that is
20:14 - how you write json data and now that we
20:16 - have this file we're going to use it to
20:18 - actually load the keys and values so the
20:20 - clipboard items that we've saved so now
20:22 - that we created this what i'm going to
20:24 - do is write another function that's
20:25 - going to read the json file for us so
20:27 - i'm going to say define
20:28 - load json i'm going to take in a file
20:31 - path and what i want to do here is i
20:33 - want to open
20:34 - the file path this time i'm going to
20:36 - open it in r mode which stands for read
20:39 - i'm going to open it as f and i'm going
20:41 - to say that my data is equal to
20:44 - json.load and i'm going to load f okay
20:47 - so i'm just loading in this file now
20:49 - what's going to happen is going to read
20:50 - this file and it's going to give me the
20:52 - python dictionary a representation of
20:54 - this json data in case i didn't mention
20:57 - it json stands for javascript object
20:59 - notation it's just a specific file type
21:01 - that you can use in pretty much all
21:02 - types of applications it's very standard
21:04 - specifically when you're working with
21:06 - things like apis which we're actually
21:07 - going to see later
21:09 - so then from here i'm going to return my
21:10 - data this is going to be a python
21:12 - dictionary i'm going to access that
21:14 - inside of here when i'm kind of loading
21:16 - and saving my different clipboard items
21:18 - okay
21:19 - all right so now we know how to save
21:21 - items we know how to load our json so
21:23 - i'm actually just going to make this
21:24 - load items because that probably makes
21:26 - more sense so now that we have our two
21:27 - functions here that are able to read and
21:29 - write the data
21:31 - what i want to do is utilize them so
21:33 - let's start by actually writing the save
21:35 - command now the save command needs to
21:36 - take whatever is currently on our
21:38 - clipboard and save it as a key in our
21:40 - dictionary or i guess in this case in
21:42 - our json file now for now let me just
21:44 - delete this json file because we don't
21:45 - actually need this one so the first
21:47 - thing i need to do when you want to save
21:48 - something is i need to prompt you to
21:50 - type in a key and that key is what i'm
21:52 - going to use in the dictionary to be
21:54 - associated with your clipboard item so
21:56 - i'm going to say key is equal to input
21:59 - input allows the user to actually type
22:00 - something in right so i'm going to say
22:02 - enter
22:03 - a key
22:04 - like that okay
22:05 - now that we have the key what i'm going
22:07 - to do is i'm going to say that my data
22:10 - at key
22:12 - is equal to and then this is going to be
22:14 - clipboard and uh let's type it all out
22:17 - dot paste right because paste is how you
22:19 - get what's currently on the clipboard
22:21 - then after this i'm going to say save
22:24 - underscore items i'm going to pass a
22:27 - file path which i'll define in a second
22:28 - and then i'm going to pass my data and
22:30 - my data is going to be the variable data
22:32 - now some of you may have noticed i don't
22:33 - yet have the variable data defined so
22:36 - what i need to do up here is say data is
22:38 - equal to and then this is going to be
22:40 - load items and i'm going to load the
22:42 - json file here now i need to create a
22:45 - variable that stores the name of my json
22:46 - file so i'm going to say
22:49 - saved underscore data
22:51 - like this is equal to and then we'll
22:53 - call this file
22:55 - clipboard.json okay
22:58 - clipboard.json like that so let's put
23:00 - save data inside of here and let's put
23:03 - saved data here all right so what i've
23:05 - done is just made a variable it's going
23:06 - to store the name of where i want to
23:08 - save my data essentially the first thing
23:09 - i'm going to do is load all of my items
23:11 - or load my data so i actually could
23:13 - maybe rename this load data that's
23:15 - probably going to make more sense so
23:16 - let's rename these
23:18 - okay data
23:21 - and data so i'm going to attempt to load
23:23 - this file right here that's now going to
23:25 - give me a python dictionary that
23:27 - contains whatever the data is inside of
23:29 - there so now if you type in save we're
23:31 - going to ask you for a key we're going
23:33 - to then store inside of this data
23:35 - dictionary the key associated with
23:37 - whatever the value is that's on your
23:39 - clipboard then we're going to call save
23:40 - data and that's now going to rewrite
23:42 - this file and save all of that data
23:44 - persistently great okay hopefully this
23:47 - is making a little bit of sense now one
23:49 - thing that i do want to mention here is
23:50 - that when i try to load this data we're
23:52 - actually going to get an error if the
23:54 - file that we're trying to load doesn't
23:56 - exist now the file we're trying to load
23:57 - is clipboard.json right now that file
23:59 - doesn't exist so we have two options we
24:01 - can create the file and we can just give
24:04 - it some kind of default value so
24:05 - essentially put nothing inside of it or
24:08 - we can kind of handle the error where
24:09 - this file doesn't exist which is what i
24:11 - would prefer to do so here i'm going to
24:13 - write a try now a try something that you
24:16 - can use when you're not sure if a line
24:18 - of code or a section of code is going to
24:20 - execute or not without an error so i'm
24:22 - going to say try i'm going to try to do
24:24 - all of this and then i'm going to write
24:25 - an accept statement and the accept is
24:27 - essentially going to be entered if what
24:30 - i tried to do in here failed so if an
24:31 - exception was raised if an error
24:33 - happened when i was doing this then
24:34 - we're going to go inside of the accept
24:36 - block and i'm just going to return
24:38 - in empty dictionary like this so
24:40 - essentially we're going to try to load
24:42 - this file if this file doesn't exist
24:44 - then i'm going to return an empty
24:46 - dictionary and that's that's really all
24:48 - we need to do hopefully that makes sense
24:49 - but that's what we're doing in that
24:51 - function okay so now the save command
24:53 - should actually work so before we go any
24:54 - further let's try that out so let me
24:57 - just get out all this here so let's now
25:00 - run the command
25:02 - python this is going to be
25:04 - multi-clipboard.pi
25:06 - and let's try to save what's currently
25:07 - on our clipboard okay so it's going to
25:09 - say enter a key for now let's just go
25:11 - with python as our key and if we go to
25:14 - clipboard.json now we can see that we
25:16 - have python and then nothing was on our
25:17 - clipboard so it just had an empty string
25:20 - there you go the save is working
25:22 - all right now i just want to print
25:23 - something out here that says data saved
25:25 - just so that we have a little bit of
25:27 - output for our user
25:29 - okay so data saved nice now let's do
25:31 - load so if i want to load something this
25:33 - is actually pretty straightforward the
25:34 - first thing i need to do is ask the user
25:36 - for a key for the data that they want to
25:38 - load i need to make sure that key exists
25:40 - in the dictionary and if it does i'll
25:42 - give them the data if it doesn't then i
25:44 - need to return an error message
25:46 - so i'm going to go here i'm going to say
25:48 - let's actually just do the same thing
25:50 - here
25:51 - key equals enter key i'm going to say if
25:54 - the key
25:55 - is in data
25:57 - actually i'm going to say if the key is
25:58 - not in data
26:01 - no you know what no we'll go if key and
26:02 - data so if the key is in the dictionary
26:05 - so we actually have a key that they
26:06 - typed in here then what we will do
26:09 - is say
26:11 - clipboard dot and then this is gonna be
26:14 - copy and we're gonna copy data at key
26:18 - otherwise we're going to print
26:22 - key does not exist okay and then i'm
26:24 - going to print a message here and say
26:27 - print
26:29 - data copied to clipboard okay
26:33 - well let's add a period
26:35 - so quickly recap here we asked them to
26:37 - enter a key we're going to check if this
26:38 - key exists in the dictionary this is a
26:40 - very simple way to do that say if key
26:42 - and data if the key is in the data then
26:44 - i'm going to say clipboard.copy
26:46 - data key so i'm going to access what the
26:47 - value of that key is in the dictionary
26:49 - and copy it to their clipboard i'll
26:51 - print out the data is copied to
26:52 - clipboard otherwise i'll print key does
26:54 - not exist great so now we can actually
26:56 - try to load this so let's run this
26:59 - command with save let me copy something
27:02 - first so let's copy this let's run this
27:04 - command with save let's go test okay so
27:06 - our data was saved now let's run this
27:09 - with load let's type in python
27:13 - okay data copy to clipboard when i paste
27:15 - there's nothing there great now let's
27:17 - run this again let's type in test and
27:20 - now when i paste notice i have what i
27:22 - actually stored in the multi-clipboard
27:26 - okay hopefully that is all good now the
27:28 - last thing that we need to do is the
27:29 - list command the list command is very
27:31 - straightforward all we're going to do is
27:33 - print out the dictionary where we're
27:34 - going to print out the different keys in
27:36 - the dictionary up to you how you want to
27:37 - do this but i am just going to print out
27:39 - data now when i do that it's just going
27:41 - to give me all of the keys and all of
27:43 - the values so i can see what's in my
27:45 - multi-clip
27:46 - so let's run this now
27:48 - and let's go with list and when i do
27:51 - that notice i get python associated with
27:53 - nothing and test associated with
27:55 - clipboard.copy now one feature you may
27:58 - want to add to this program here is the
28:00 - ability to delete a key i'm going to
28:01 - leave that to you guys as kind of say
28:03 - homework if you want to do that it's
28:05 - pretty straightforward but i'm not going
28:06 - to implement in this project because i
28:07 - don't really even see a huge value in
28:09 - deleting because what happens is if you
28:11 - want to override a key that already
28:12 - exists you just type the same key and it
28:15 - will override the key that's already on
28:16 - the clipboard right that's the way that
28:17 - we've implemented so with that said
28:19 - that's going to wrap up this first
28:21 - project i apologize if this was a little
28:23 - bit slow for some of you but i'm not
28:24 - sure the exact audience is going to be
28:26 - watching this so i just want to make
28:27 - sure it's accessible as possible to
28:29 - everyone right so kind of over
28:31 - explaining rather than underexplaining
28:33 - that's the motto that i usually go with
28:35 - anyways that's how it works to do a
28:37 - quick summary we import our modules here
28:39 - we have our saved data variable that has
28:41 - clipboard.json that's just the name of
28:43 - the file we're going to use to store the
28:44 - multi-clipboard we have our two
28:46 - functions here that are able to write or
28:48 - sorry yeah write the json file and read
28:50 - the json file we're then going to make
28:52 - sure that we have exactly two command
28:54 - line arguments one being the name of the
28:56 - python file the next being the command
28:58 - that we want to run we're going to grab
29:00 - what that command is we're going to load
29:02 - our data from the json file we're going
29:04 - to say if the command is equal to save
29:06 - then we want them to enter a key we're
29:08 - going to get what's from their clipboard
29:09 - and save it in our dictionary we're then
29:12 - going to save that persistently to the
29:13 - json file if they type in load same
29:16 - thing we want a key we're going to check
29:17 - if the key is in the dictionary if it is
29:20 - then we are going to take whatever the
29:22 - value is and put that on the user's
29:23 - clipboard otherwise we'll tell them key
29:25 - doesn't exist and if they type in list
29:27 - then we're just going to print out what
29:28 - the data is
29:30 - all of this code will be available from
29:31 - the link in the description now we're
29:33 - going to move on to project number two
29:35 - all right so now we're moving on to
29:37 - project number two now in this project
29:39 - i'm going to show you how to work with
29:40 - an api an api is an application
29:43 - programming interface now this is a
29:45 - resource on the web that's either going
29:47 - to give us some data or allow us to send
29:50 - a request to it and then modify some
29:52 - information you've probably heard of
29:53 - apis before we're going to work with a
29:55 - very simple one here that's going to
29:57 - give us data about weather right so
29:59 - weather information for any city in the
30:01 - world pretty useful and again even if
30:03 - you don't really care about the weather
30:04 - aspect of this i'd still follow along
30:06 - because it shows you how to work with
30:08 - apis and you can take this knowledge and
30:09 - apply it to pretty much any api say you
30:12 - want to get maybe the scores of a hockey
30:14 - game or something same type of thing as
30:15 - what you're going to do here to get that
30:17 - information okay so now that we've
30:18 - talked about that i'm not going to demo
30:20 - the project because i think i explained
30:22 - it well enough we're going to go to this
30:24 - website i'll leave a link to it in the
30:25 - description because this is the api it's
30:27 - completely free that we're going to be
30:29 - using for this project now you do need
30:31 - to create an account on this website
30:32 - it's just going to require an email
30:34 - address no credit card or anything like
30:36 - that and when you create an account it
30:37 - should give you an api key now i'll show
30:40 - you how to get to the api key if you
30:41 - don't notice it that's the main thing
30:43 - that we're going to be looking for once
30:45 - you have the api key you pretty much can
30:46 - get off this website
30:48 - so notice here that i've signed in with
30:50 - an account and when you click on this in
30:52 - the top right it says my services my api
30:54 - keys just click on my api keys here and
30:56 - then it should show you your key now you
30:58 - can click on the copy button and grab
31:00 - the key uh or no sorry that's edit api
31:04 - key but you should be able to just grab
31:06 - it like this and copy it or generate a
31:08 - new one anyways you want the key so copy
31:11 - your key and don't share this one with
31:13 - anyone else i'm going to delete the
31:14 - account before i post this video so i
31:16 - don't really care but we're going to go
31:18 - to our python file i've just made a new
31:20 - one called weather and i'm going to type
31:22 - in api key is equal to and then i'm
31:24 - going to paste the api key in like this
31:26 - once you have the api key we don't
31:28 - really need to use this website anymore
31:30 - although i will show you how we look at
31:32 - the different apis and kind of interact
31:34 - with them so if i go back to the api
31:36 - page here and notice we have current
31:39 - weather data there's a bunch of other
31:40 - apis that you can look at as well so
31:42 - hourly forecast one call api whatever
31:45 - i'm just going to do the current weather
31:46 - data so i'm going to click on the api
31:48 - documentation
31:50 - and it's going to show us here how we
31:51 - actually call this api so you can read
31:53 - through this again this link is in the
31:55 - description you can find this page i
31:57 - just want to show you this is the
31:58 - documentation and this is essentially
32:00 - how i figured out how to do this
32:02 - okay so now that we have the api key
32:04 - what we actually need to do is install a
32:06 - module in python which allows us to send
32:08 - a request to this api now this module
32:12 - very fittingly is called request and i'm
32:14 - going to show you how to install it so
32:16 - you need to open up a command prompt or
32:17 - a terminal depending on your operating
32:19 - system and in the command prompt doesn't
32:21 - matter the location you don't need to
32:22 - get in a specific directory just type in
32:25 - the following command pip install
32:27 - and then request like this
32:30 - now when you do that it should install
32:31 - the request module for you however i
32:34 - know a lot of you are going to have an
32:35 - issue with this command if you do have
32:37 - an issue try the following command pip 3
32:39 - install request if that command doesn't
32:42 - work try python
32:43 - hyphen m
32:45 - pip install request if that doesn't work
32:48 - try python 3 hyphen m pip install
32:50 - request and if none of those work i'll
32:52 - leave two videos on the screen showing
32:54 - you how to fix this command just follow
32:56 - along with those videos and they will go
32:58 - through okay so at this point in time
33:00 - i'm going to assume that you have
33:02 - successfully installed the request
33:04 - module and if you have then you can go
33:06 - to your python file
33:08 - and you can import requests
33:10 - now a request is essentially what it
33:13 - says it's a request for some type of
33:14 - data a request to do something and we're
33:17 - going to be hitting what's known as an
33:18 - endpoint essentially a url on some
33:20 - remote server so on the internet that's
33:22 - going to give us some data or update
33:24 - some database in this case we're just
33:26 - going to be getting some data we're
33:28 - going to be getting the weather data so
33:30 - the first thing that we need to know to
33:31 - be able to send a request is where we
33:33 - are sending the request to so we're
33:35 - going to say the base url is equal to
33:38 - and then i'm going to copy this in again
33:39 - this code will be available in the
33:41 - description but i'm sure you could
33:42 - probably just write it out this is going
33:43 - to be http colon slash
33:46 - api.openweathermap.org
33:48 - data 2.5
33:50 - weather okay this is the endpoint the
33:52 - url that we want to hit and we're going
33:54 - to send what's known as some query
33:56 - parameters these are things that we send
33:58 - alongside this base url telling it what
34:01 - data we want so essentially what city we
34:03 - want to get the weather data from so
34:05 - once we have our ap api key and we have
34:07 - our base url we now need to get the city
34:10 - for our weather data so i'm going to ask
34:12 - user to enter that so i'm going to say
34:14 - city is equal to input i'm going to say
34:17 - enter
34:18 - a city name okay now not every city is
34:21 - going to work but i think there's over
34:23 - 200 000 cities that are stored in this
34:25 - api database and you can read the
34:27 - documentation if you want to look at the
34:29 - specific cities but most big ones that
34:31 - you would know hopefully should work
34:32 - here okay so once we have the city what
34:35 - i need to do is actually build kind of a
34:37 - url that looks similar to this that
34:39 - includes the city and my api key in it
34:42 - to be able to send the request so what
34:44 - i'm going to do is say that my request
34:47 - underscore url is equal to i'm going to
34:49 - use an f string now an f string allows
34:52 - you to directly embed
34:54 - variables and expressions inside of a
34:56 - string this is only available in python
34:58 - version 3.6 and above but i can do
35:00 - something like place curly braces and
35:03 - then type base url now when i do this
35:05 - it's going to paste the value of base
35:07 - url directly inside of this string and
35:10 - then allow me to add other string
35:12 - characters like an equal sign here which
35:14 - is quite nice so i'm going to say base
35:16 - url question mark i'm then going to say
35:19 - app underscore id uh no it's going to be
35:22 - app with no space id i'm going to look
35:24 - at my cheat sheet here this is going to
35:26 - be equal to my api key okay
35:31 - and then i'm going to put an n sign and
35:33 - then a q
35:34 - is equal to and then this is going to be
35:36 - inside of curly braces my city now let
35:39 - me just close this here so the way this
35:41 - works is we have our base url we then
35:43 - are passing along our api key as what's
35:45 - known as a query parameter that's
35:47 - anything that comes after the question
35:48 - mark and then i'm putting in ampersand
35:50 - because i'm going to pass another query
35:52 - parameter which is q funny enough q
35:55 - stands for query and for the query i put
35:57 - a city and that means i'm going to look
35:59 - for the data associated with the city
36:01 - that the user types in
36:03 - hopefully that makes sense but this is
36:04 - the url that we want to hit now we
36:06 - actually need to send a request to this
36:08 - url now whenever we send a request
36:10 - there's different types of requests we
36:12 - have a put request a post request a
36:14 - delete request these are all forms of
36:16 - http requests so basically you know the
36:19 - standard internet requests we want to
36:21 - send a get request because we're
36:22 - retrieving data so what we're going to
36:24 - do is say that data or actually we'll
36:26 - say the response is equal to request.get
36:31 - and then we're just going to call the
36:33 - request url okay so what this is going
36:35 - to do is use the request module the one
36:37 - that we installed to send a get request
36:39 - to this url it's going to then give us a
36:42 - response and the response is going to
36:44 - contain some data that data is going to
36:46 - be the information associated with our
36:48 - city
36:49 - however this response may have an error
36:51 - there's a potential that maybe there was
36:53 - an issue with our url maybe our api keys
36:56 - expired or something along those lines
36:58 - so we want to check to make sure this
36:59 - response was successful before we try to
37:01 - get the data or the payload that was
37:04 - kind of returned to us so what i'm going
37:06 - to do is check the status code of this
37:08 - response now a status code of 200 means
37:11 - that this response was successful you
37:13 - may be familiar with the status code of
37:15 - say 404 i believe that's not found right
37:18 - maybe 400 that stands for bad request
37:20 - there's a ton of different status codes
37:22 - out there but 200 means okay or
37:24 - successful so we're going to check to
37:26 - make sure it was successful now if it
37:27 - wasn't successful then i'm going to
37:29 - print
37:30 - an error occurred okay
37:33 - and inside of here when we are
37:35 - successful what i want to do is get the
37:36 - data associated with this response now
37:39 - remember we looked at json in the
37:40 - previous project well the data is going
37:42 - to be returned to us as json
37:44 - conveniently so i'm going to say that my
37:46 - data is equal to response.json
37:49 - so this is something you can use on the
37:50 - response object this will give you the
37:52 - json data as a python dictionary and for
37:55 - now
37:57 - we can just print this out and see if
37:58 - this works okay so we went through a lot
38:00 - there let's run the code and see if this
38:02 - is going to work so we're going to run
38:04 - enter a city name i'm going to go with
38:07 - new york
38:09 - okay
38:10 - and then notice it gives me a bunch of
38:11 - data associated with new york
38:14 - now let's see if i can make this a bit
38:16 - larger okay that's better and we can see
38:19 - here that we have the weather
38:22 - we have main we have all of these keys
38:24 - it's kind of hard to read but we have
38:26 - coordinates associated with this python
38:28 - dictionary weather associated with a
38:31 - list now this list contains a bunch of
38:33 - different data i'm trying to figure out
38:34 - where it ends okay it ends right here we
38:37 - have base we have main main is
38:39 - associated with the temperature the
38:40 - feels like so we need to kind of look at
38:43 - this response here and figure out how we
38:45 - want to access the different elements
38:47 - from it now i want to get the weather so
38:50 - i want the description where it says
38:52 - overcast for example
38:53 - and i also want the temperature now the
38:55 - way i get the weather is access the
38:57 - weather key and then i access the first
39:00 - element in this list
39:02 - which is just this right here right
39:03 - because we have a list then if i want
39:05 - the temperature i need to access main
39:07 - and i need to access the key temperature
39:09 - so let's go ahead and do that so the
39:11 - first thing i'll get is the weather so
39:14 - say the weather is equal to data at
39:16 - weather
39:17 - okay so now we can print out weather
39:19 - like that and then i will say that the
39:21 - temperature
39:24 - is am i spelling this correctly is equal
39:26 - to data at and remember this was the
39:29 - main key and then the next key we wanted
39:31 - after that was temp
39:33 - and then i can print out
39:36 - the temperature like that
39:37 - okay so let's try this now and see if
39:39 - what we're getting so when i run this
39:41 - i'm going to type in let's just go with
39:44 - new york again and we get a list so i
39:46 - need to access the first element in here
39:48 - and then i get the temperature in kelvin
39:50 - and if i want to convert that to celsius
39:52 - i need to subtract
39:54 - 273.15 i believe that's the conversion
39:57 - i'll i'll do that in a second anyways
39:59 - now we need to get the correct thing for
40:01 - temperature so i accessed the
40:03 - temperature key but it gave me a list so
40:05 - i now want to access the first element
40:06 - in the list and then i want to access
40:08 - the description so let's do that
40:11 - so i'm going to access element
40:14 - wait sorry this is for weather my bad
40:17 - i want to access zero and then i want to
40:19 - access the description
40:21 - okay so let's paste that like that and
40:23 - then for the temperature i'm just going
40:25 - to subtract 273.15
40:29 - i may be incorrect but i believe that's
40:30 - the conversion to celsius okay so let's
40:33 - run this one more time
40:34 - now when i type in my city let's go with
40:36 - new york and i get the description of
40:38 - broken clouds and then i get kind of
40:40 - some
40:41 - very long number here right 2.68 so what
40:44 - i'm going to do now is just round this
40:45 - i'm also going to write celsius we'll do
40:47 - a bit of formatting to make this look
40:49 - nicer and then that'll pretty much wrap
40:50 - up this project so now that we have the
40:53 - temperature
40:54 - let's round this
40:56 - to the nearest two decimal places
40:59 - okay so just to get rid of all those uh
41:01 - extra decimals that we had and then for
41:03 - the weather
41:04 - that's fine for now however i do want to
41:06 - print out kind of like weather is this
41:08 - right rather than just printing out what
41:10 - it is
41:11 - so now what i'm going to do is i'm going
41:12 - to say print
41:13 - i'm going to say the weather and then
41:15 - comma and i'll print out the weather
41:18 - and then i'm going to print and i'll say
41:20 - the temperature and then this is going
41:21 - to be equal to the temperature
41:23 - and
41:24 - sell
41:25 - see us like that okay just so we know
41:27 - the unit great so let's run this now
41:29 - it's going to ask us for a city name
41:31 - let's just go with boston i know that
41:34 - actually is that going to work let's see
41:36 - if that's going to work okay it does
41:37 - work we get overcast clouds then we get
41:39 - 1.14
41:41 - celsius nice there we go okay so that is
41:44 - this project we could run this a few
41:46 - more times and see if this works for
41:47 - some other cities let's go with tokyo
41:49 - okay we have a few clouds 5.27 degrees
41:52 - celsius you guys can mess around with
41:53 - this but i think this will work for most
41:55 - of the major cities that you guys would
41:56 - know this is all the code that is how
41:58 - you work with an api that is this
42:01 - project there's some more data that you
42:02 - can access i'll let you guys look at
42:04 - that you can just print out the data
42:06 - variable here and then you'll see all of
42:07 - the different keys hope this was helpful
42:09 - let's go on to project number three
42:11 - alright so now we're moving on to the
42:13 - third and final project which is sending
42:15 - an email in python now this is really
42:18 - just a lot of syntax using the built-in
42:21 - python libraries to send an email of
42:23 - course i will explain it all to you i do
42:25 - want to mention though that i'm showing
42:26 - you the most basic usage of this so
42:29 - sending an html or plain text email if
42:32 - you want to attach files if you want to
42:33 - send to multiple people if you want to
42:35 - do you know all the kind of advanced
42:37 - email stuff you may want to do you're
42:39 - going to have to look up some other
42:40 - documentation or maybe find another
42:42 - tutorial online this is really just
42:44 - meant to show you the basics and kind of
42:46 - get you introduced to sending emails
42:47 - with python it would take me a very long
42:49 - time to go through all of the different
42:51 - possibilities when it comes to sending
42:53 - emails now i'm going to show you
42:54 - specifically how to send an email from a
42:56 - gmail account so make kind of a dummy
42:59 - gmail account if you want you can use
43:00 - your own account that's fine
43:02 - however you do need to modify one
43:04 - setting when you make the gmail account
43:06 - i'm just going to get to that page right
43:07 - now and i'll show you what it is
43:09 - so i'm in my google account this is kind
43:12 - of a dummy email that i use for youtube
43:14 - videos live streams that type of stuff
43:16 - now what you want to do here is click on
43:17 - manage your google account that's how
43:19 - i've gotten to this page
43:20 - and then go to security
43:23 - and you should see something that says
43:25 - less secure app access now you need to
43:27 - check this to on if you don't have this
43:30 - on then it's not going to allow python
43:32 - to actually send an email so again you
43:34 - want to go to your google account
43:35 - settings or manage your google account
43:37 - however you get there you want to click
43:38 - on security and you wanna make sure this
43:40 - is on if it's not on you're not gonna be
43:42 - able to send an email okay nice
43:45 - now i have my inbox open here just so we
43:47 - can see the different emails obviously
43:49 - you can see i was messing around
43:50 - previously
43:51 - sending some emails from python okay so
43:53 - let's close that
43:55 - let's go here
43:56 - now let's start writing some code and
43:57 - send an email with python so to do this
43:59 - we need to import a few python modules
44:01 - now i just want to note that i'm going
44:02 - to be looking at my cheat sheet over
44:04 - here because i can't memorize all of
44:05 - this so if you see me looking in this
44:07 - direction that's what i'm doing just
44:08 - looking at some other code so i can copy
44:10 - it in
44:10 - so the first thing that we want to
44:12 - import here is the smtp lib we also want
44:15 - to import ssl for the secure socket
44:18 - layer and then we are going to say from
44:21 - email
44:23 - dot message
44:24 - import and this is going to be email
44:27 - message like so
44:28 - now all of these are built into python
44:30 - so you don't need to install them so
44:31 - they should just work again though make
44:33 - sure you're using python version 3.6 and
44:35 - above if you're not then this import
44:37 - here will probably give you some errors
44:39 - okay so let's start coding out some of
44:41 - the things that we we know we're going
44:42 - to need for an email so a subject a
44:44 - recipient a sender a body and then i
44:48 - guess we're going to need the password
44:49 - for the user who wants to send the email
44:52 - so let's go with uh
44:55 - subject is equal to and let's say email
44:59 - from python of course make this whatever
45:01 - you want let's go with the body of the
45:03 - email equal to this is a test email from
45:07 - python
45:09 - okay exclamation point let's go with the
45:11 - sender underscore email this is going to
45:14 - be equal to whatever email address that
45:16 - you have so in my case it is code
45:19 - racer live
45:21 - stream app at gmail.com now i'm just
45:24 - going to send this email to myself but
45:26 - it will work to send it to anyone else
45:28 - that you want they don't have to have
45:29 - the secure app you can send the email to
45:31 - anyone it's just that if you want to
45:32 - send from an email you need to have the
45:35 - secure app or less secure apps on i
45:38 - think that makes sense
45:39 - okay let's say receiver
45:42 - did i spell this incorrectly looks like
45:43 - i did okay receiver email will be the
45:45 - same email
45:46 - and then is there anything else that we
45:47 - need yes we need a password so for the
45:50 - password i'm just gonna say input
45:52 - and then enter a password like this now
45:55 - you can put the password in plain text
45:56 - here in the code if you want not
45:58 - necessarily the best practice to do that
46:01 - but the reason why i'm doing a little
46:02 - input field is because i'm just going to
46:04 - cut out the
46:05 - the part of the video when i enter the
46:07 - password so that you guys do not
46:09 - actually see what my password is for
46:10 - this email okay so there we go we have
46:13 - subject body sender email receiver email
46:15 - and password now what we actually need
46:17 - to do is build the email and the way
46:19 - we're going to build that is by using
46:21 - the email message then i'll show you how
46:23 - to send the email so i'm going to say
46:25 - that my message is equal to an email
46:27 - message
46:28 - we need to instantiate this class right
46:30 - here
46:31 - now that we do that we need to kind of
46:33 - enter a few fields so i'm going to say
46:35 - message
46:36 - and then from
46:38 - notice this is kind of in a dictionary
46:39 - format is going to be equal to and then
46:42 - this is going to be the sender email
46:44 - we're going to say message
46:46 - to
46:47 - and this is going to be equal to the
46:49 - receiver email and then we're going to
46:50 - say message and this is going to be the
46:53 - subject i believe is going to be equal
46:55 - to the subject okay
46:57 - there we go now when we want to actually
47:00 - set content for the email so the body of
47:02 - the email essentially what we do is the
47:04 - following
47:05 - we say message dot set
47:09 - underscore content and then we pass in
47:11 - here the body okay so i'm going to do
47:13 - body now i'm going to show you how to
47:14 - send html emails in a second so you can
47:16 - format them nicely and have bolding and
47:18 - styling and whatever but for now we're
47:20 - just going to send plain text and then
47:21 - we'll get to html okay so we've actually
47:23 - done most of the work here
47:25 - next we need to say context is equal to
47:28 - ssl dot and then this is going to be
47:30 - create
47:32 - underscore default context so the reason
47:34 - why i'm doing this is because when we
47:36 - connect to gmail we need a secure
47:38 - connection so i can't really explain
47:40 - this much more in depth but what this is
47:41 - going to do is give us a context for a
47:43 - secure connection that we can use when
47:45 - we're actually using the smtp library
47:48 - and connecting to the gmail server
47:49 - because we don't have our own mail
47:51 - server here we're connecting just to the
47:53 - default gmail one and again we need ssl
47:55 - to do that
47:56 - hopefully that makes a tiny bit of sense
47:58 - you don't really have to understand all
47:59 - of this you can still send an email if
48:01 - you don't know what one or two of the
48:02 - lines of code does
48:03 - okay continuing here i'm going to say
48:05 - with smtp lib
48:07 - dot and this is going to be in all
48:09 - capitals smtp and then underscore ssl so
48:13 - we're connecting with the secure socket
48:15 - layer what i'm going to do is put in the
48:17 - server that i want to connect to which
48:19 - is smtp.gmail.com
48:23 - now the port for connection which is the
48:25 - argument here is going to be 465
48:28 - and then the context is going to be
48:30 - equal to the context that we just
48:31 - defined we're going to say this is as
48:34 - the server okay so all we're doing right
48:36 - now is connecting to
48:39 - uh what the heck did i do something
48:41 - wrong here sm sorry let me just fix the
48:43 - spelling smtp loop there we go all we're
48:45 - doing here to continue is just
48:47 - connecting to the gmail server and again
48:49 - we need to do this in a secure way
48:50 - that's why we're using ssl
48:52 - okay so now that we've connected what
48:54 - we're going to do is use the server to
48:55 - log into our email account so then we
48:57 - can send an email so we're going to say
48:59 - server
49:00 - dot login yeah i think login is what we
49:03 - need and we're going to do the sender
49:04 - underscore email
49:06 - and then the password that the user
49:07 - typed in okay so now that we are logged
49:10 - into the server we actually can read
49:11 - emails i'm not going to show you how to
49:12 - do that but that is possible we also can
49:15 - send emails now to send emails is pretty
49:17 - easy we're going to say send
49:19 - mail like that and we're going to do the
49:21 - sender email we're going to have the
49:24 - receiver
49:26 - underscore email and then we're going to
49:28 - have message and we're going to do as
49:31 - underscore string so the reason why we
49:33 - need to do as string here is because we
49:35 - need to convert the message object that
49:37 - we were kind of building up here into a
49:40 - string so that we can then send this as
49:42 - a string email now again i'll show you
49:44 - how to do html in one second but for now
49:46 - write all of this out i'm sure some of
49:48 - this doesn't quite make sense but this
49:50 - is kind of the best explanation i can
49:51 - give you without going too in depth on
49:53 - how to send an email with python now we
49:55 - can test this out but i just want to do
49:57 - a little bit of output here so i'm going
49:58 - to print
49:59 - say sending
50:01 - email and then i'm going to print after
50:03 - here
50:06 - success okay just so that we know when
50:08 - this is finished because it could take a
50:09 - second or two to actually send the email
50:11 - so let's just space this out a bit
50:13 - and now let's run this code i will type
50:15 - in my password and blur that and then
50:17 - we'll see if this works so i'm going to
50:19 - enter my password it's going to blur out
50:21 - so hopefully you guys cannot see this
50:23 - editors please make sure you blur this
50:25 - gonna hit enter
50:26 - sending email success okay now the only
50:28 - way to actually test if this works is to
50:30 - go to the email inbox i'm gonna go here
50:32 - and refresh notice i just got an email
50:35 - it says email from python that's subject
50:37 - and then this is a test email from
50:39 - python awesome we successfully sent an
50:41 - email from python very good
50:43 - now we want to do html
50:45 - so to do html is actually fairly
50:47 - straightforward let me just have a look
50:50 - here
50:50 - and see exactly how i did this before
50:53 - alright so to do html we are going to
50:55 - first create the html that we want to
50:57 - send now because i'm lazy i'm just going
50:59 - to copy this in so this is my html
51:02 - notice that i'm just having an h1 tag
51:04 - which is equal to the subject and then i
51:06 - have a p tag which is equal to the body
51:08 - those are the two variables up here i'm
51:10 - using a multi-line f string again only
51:12 - available in python 3.6 and what i want
51:15 - to do now is rather than setting the
51:17 - content here i'm going to say
51:20 - message dot and this is going to be add
51:23 - underscore alternative and i'm going to
51:26 - pass html and i'm going to say subtype
51:29 - is equal to html
51:31 - now this is adding an alternative thing
51:34 - rather than just like plain text content
51:35 - we're adding html content so now
51:37 - hopefully we should actually be sending
51:40 - email with html okay now of course i
51:43 - need to define the subtype as html
51:45 - stating that this is going to be html
51:46 - because i can add other types of things
51:48 - like files for example binary whatever
51:51 - to the email okay so i'm going to save
51:53 - this now and let's run the code
51:55 - let me type in my password again editors
51:57 - make sure you blur this
52:01 - okay sending email success so let's now
52:04 - go to our inbox
52:05 - and that's not my inbox this is my inbox
52:08 - let's see if this works okay refresh
52:10 - when i come in here notice we get our
52:12 - beautifully formatted html we have our
52:14 - h1 tag and we have our p tag and of
52:17 - course if you know html you can make
52:18 - this look a lot nicer but that was all i
52:20 - wanted to show you for uh sending an
52:22 - html email okay so this is the finished
52:24 - code here i'll kind of scroll through it
52:26 - slowly so you guys can have a look again
52:28 - all of this will be available in the
52:29 - description and with that said i am
52:31 - going to end the video here now i do
52:34 - want to remind you that i do have a
52:35 - course called programming expert dot io
52:38 - it goes over a lot of the python syntax
52:40 - that you would have seen here if you
52:41 - were confused at all about this syntax
52:43 - you just want to learn more about python
52:44 - get into more advanced programming
52:46 - definitely check that course out you can
52:48 - use the discount code tim go to
52:50 - programming expert dot io slash tim with
52:53 - that said i will end the video here
52:54 - again i hope you guys enjoyed if you
52:56 - want to see more videos like this please
52:57 - leave a comment down below subscribe to
53:00 - the channel and i hope to see you in
53:01 - another one
53:04 - [Music]