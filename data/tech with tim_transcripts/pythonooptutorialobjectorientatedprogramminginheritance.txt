00:00 - hey guys and welcome to the third video
00:02 - in my Python object and class tutorials
00:05 - series now in today's video I'm gonna be
00:07 - going over inheritance and this is an
00:09 - extremely important and a little bit
00:10 - more complicated topic dealing with
00:12 - inheriting attributes and methods from
00:15 - other objects I just want to start off
00:17 - by quickly saying though if you guys are
00:19 - finding the video is a bit too slow for
00:20 - you and I'm kind of explaining things a
00:23 - lot of time the reason I do that is
00:24 - because I'm not sure the level of person
00:26 - that's gonna be watching the video and I
00:28 - want to make sure that the people that
00:29 - will understand quickly can get the
00:32 - information within like the first few
00:33 - minutes and then the people that really
00:35 - need so extra reinforcement have that
00:37 - opportunity to watch through the entire
00:39 - like 11 or 12 minutes and have it
00:41 - explained to them multiple time so if
00:42 - you guys are finding it's a bit too slow
00:44 - and you want to move faster just fast
00:46 - forward the video or skip to the next
00:48 - one if you guys are done with whatever
00:50 - I've been talking about cuz like in the
00:52 - last video for example I watched it back
00:53 - and I kind of explained a few the same
00:55 - thing a few times that's just for the
00:57 - people that need a bit of extra help and
00:58 - that's kind of what I aim to do with a
01:00 - lot of my videos so that people that
01:02 - need help can you know grab that if they
01:04 - want to okay so let's get started and
01:07 - I'm just gonna modify this dog class
01:08 - just delete Li we'll get rid of change
01:12 - age and add weight and we're just gonna
01:14 - have name age so on like that okay and
01:16 - we can get rid of this stuff down here
01:18 - now what I'm actually gonna do is I'm
01:20 - gonna create a new class and I'm gonna
01:22 - call this cat okay now cat is gonna have
01:26 - very similar attributes as dog in fact
01:29 - let's just copy them over
01:31 - okay so we'll paste them like here we
01:33 - have name age hi I am whatever okay now
01:36 - I'm just gonna add one thing in this
01:38 - case I'm gonna add let's see color okay
01:42 - today self-taught color is equal to
01:45 - color okay now this cat object it's
01:47 - obviously gonna work the same as dog I
01:48 - don't think I need to show you now just
01:51 - take note of what I just did I just
01:53 - copied all of this stuff from here into
01:55 - cat now if you know anything about
01:58 - programming you know that programmers
02:00 - don't like to copy and paste and that
02:02 - you really shouldn't be copying and
02:03 - pasting code so python has actually come
02:05 - up with the solution to what I just did
02:07 - that allows us to not have to do that
02:09 - and that is called inheritance so I'm
02:11 - gonna delete all this and I'm gonna go
02:12 - back in to cat
02:13 - I'm gonna type dog you know what this
02:16 - little bracket up here means is it means
02:18 - parent so whenever you're talking about
02:21 - inheritance you always have a parent or
02:23 - a superclass and then you have a child
02:26 - or a like derived class okay and there's
02:29 - a bunch of different words for them
02:30 - they're not really that important just
02:31 - know parent and child it's the most
02:32 - basic okay so in this case cat is going
02:35 - to inherit from dog which means dog is
02:38 - the parent class and cat is the child
02:41 - class and it is derived so it's taken
02:44 - from dog so that means if I do class dog
02:47 - and if all I do in here is just type one
02:49 - thing so I type in its underscore
02:51 - underscore and in here I'm just gonna
02:53 - put name age and color and I'm just
02:58 - gonna do something that's gonna look
02:59 - confusing haven't explained it after
03:01 - okay super dots punch crunch coordinates
03:04 - underscore underscore underscore and I
03:07 - give it name age say self dot color
03:11 - equals color and then I create a new
03:16 - object of cat so I'm just gonna say tim
03:18 - equals cats give it a name agent colors
03:21 - in this case will do tim age five color
03:25 - bully blue cat I know okay so we do that
03:29 - we press play no errors okay I'm just
03:32 - gonna show you ready Tim dot speak what
03:36 - do you thinks gonna happen take a guess
03:38 - says hi I'm Tim and I'm five years old
03:40 - now how the heck does all this work and
03:42 - what did you just do I know that's
03:44 - probably the question you're asking
03:44 - probably fix that to say color so the
03:47 - way this works is when you inherit from
03:49 - another object or another class sorry
03:51 - you actually inherit all of the
03:53 - properties and attributes and methods of
03:55 - that class so when I do tim dot speak
03:59 - you can see well Tim is an object of
04:00 - type cat and cat well I don't see speak
04:04 - here how does that work well since the
04:06 - speak method belongs already in the dog
04:09 - class and we're inheriting from the dog
04:11 - class it is actually carried on to the
04:14 - cat class and we're able to use it like
04:17 - that okay
04:17 - so Tim that speak now what I did here
04:20 - this super dot an it I know this looks
04:23 - confusing but pretty much in the
04:25 - initialization of
04:27 - which is unique to cat because it has
04:29 - this added parameter color I simply
04:32 - called the initialization of dog first
04:34 - which means that when I gave it name and
04:37 - I gave it age it automatically added
04:40 - self dot name and self dot age to my cat
04:43 - object of Tim you see how here I didn't
04:46 - type self dot name equals name I didn't
04:47 - type self taught age equals age all I
04:49 - did was called the constructor method or
04:51 - the initialization method of the
04:53 - superclass and the superclass simply
04:55 - means dog and it did that for me now in
05:00 - this example it seems like well why in
05:02 - the world would you want to do that
05:04 - that like that doesn't make sense
05:06 - there's not that many lines whatever if
05:07 - you have really long methods and really
05:09 - long classes it makes a lot of sense to
05:11 - inherit so in this example it's hard to
05:13 - show but in long ones you do want to
05:15 - inherit now I want to show you that you
05:18 - can add and overload things from the
05:22 - parent class so for example the parent
05:25 - class has speak I'm gonna add one more
05:26 - method in here I'm gonna say define
05:28 - let's just say talk okay and in here
05:32 - it's gonna say print bark because it's a
05:36 - dog okay
05:37 - now obviously in our cut class if we
05:40 - want to talk we don't want to bark right
05:43 - and that's what's gonna happen right now
05:44 - if we do tim dot talk it's just gonna
05:46 - say park so if we wanted to change this
05:48 - we can actually overload this override
05:51 - this method so if I do define talking
05:54 - here I can print and in here now I'm
05:57 - like I'm not gonna do bark I'm gonna do
05:59 - yeah okay like that a little exclamation
06:02 - point so now if I do Tim dot talk this
06:06 - you can see that we get meow instead of
06:10 - bark and that goes for anything in
06:13 - inherited classes okay so anything that
06:16 - we do in here is going to override
06:18 - whatever is happening in this dog class
06:20 - so say we wanted to change speak we
06:23 - could say define speaking here and then
06:25 - whenever we put in this speak method
06:26 - would overwrite what's in here now
06:29 - that's not to say that it's gonna change
06:30 - if you create a dog dog objects of I do
06:32 - like I don't know let's say Jim is equal
06:36 - to dog give it a name
06:39 - give it Jim clearly age is an old dog
06:42 - meaning at 70 okay and we do Jim talk
06:45 - well we're still gonna get if I spell
06:48 - Jim correctly bark right so we get arc
06:51 - em yeah so we don't actually change
06:53 - anything in this class we just say that
06:56 - well if you create a class or if you
06:57 - could I can't
06:58 - object then it's gonna have this talk
07:00 - method which overrides the talk method
07:02 - that we created in dog and this is the
07:04 - same if you do something with like these
07:06 - attributes so if I do like self thought
07:08 - name and I just statically type in a
07:11 - name like I type tech okay then when we
07:16 - do Tim don't speak now you would think
07:20 - that that's gonna get hello I am Tim
07:22 - because that was the name right and I am
07:24 - five years old but instead we're gonna
07:26 - get tech so it says hi I am tech and I
07:29 - am five years old and that is because
07:30 - although we set name up here to be equal
07:33 - to whatever name we type in the pin as a
07:35 - argument we are changing it to tech and
07:38 - that overrides whatever happens in this
07:40 - dog class okay
07:41 - so I hope that makes sense now what else
07:44 - can we override from those classes well
07:47 - we can inherit like multiple times we
07:49 - can inherit different classes from upper
07:51 - class I'm going to talk about the way
07:52 - you'd want to do in inheritance okay so
07:55 - the way you typically want to inherit is
07:56 - you want to have one really general
07:58 - class that kind of applies that's a bit
08:01 - smaller that applies like a bunch of
08:03 - different classes so I'm gonna delete
08:04 - these and I'm just going to type out
08:05 - them and show you an example what I mean
08:07 - by general class so if I create a class
08:09 - and I called it vehicle like that okay
08:13 - it's not how you spell vehicle I don't
08:15 - care we're just gonna leave it like that
08:16 - okay and then I created an
08:18 - initialization here okay and the
08:20 - initialization is gonna take like price
08:24 - gasps and color okay I know these are
08:28 - random but just just fall along
08:29 - self-taught chrysippus price self
08:31 - thought gas just gas and self thought
08:35 - cut there equals color okay now I'm just
08:37 - gonna give it a method I'm gonna call it
08:39 - define fill-up tank like this okay and
08:44 - what students say in a self-taught gas
08:46 - equals I'm just gonna say that each gas
08:48 - tank has a maximum of 100 okay
08:50 - say define empty tank and this is just
08:56 - gonna say self dot gas equals zero and
08:59 - I'm gonna say define gas left and this
09:04 - is simply gonna return self dog gas
09:07 - okay and the reason I have this is
09:10 - because well in all vehicles
09:11 - we're probably gonna want to have gas
09:14 - right all of our vehicles are gonna have
09:16 - gas if they're not electric obviously
09:18 - we're not gonna deal with that for now
09:19 - so Philip tank empty tank and gas left
09:22 - is probably something we want to know
09:23 - for all of our different vehicles now
09:26 - for example if I create another class
09:27 - that's a class car okay and car is gonna
09:32 - inherit from vehicle like that okay and
09:34 - all we're gonna do for the Annette is
09:36 - we're just gonna call the vehicle in it
09:40 - so how we do that is to do super dot I
09:43 - just put a net underscore and obviously
09:46 - this needs now a price gas and a color
09:52 - so we're gonna pass it price gas and
09:56 - color like that and then that's our
09:58 - initialization and in car all we're
10:00 - gonna have is we're gonna have a method
10:02 - and it's gonna call what's mmm
10:05 - actually let's add one more thing here
10:08 - speed okay self dot speed equals speed
10:13 - okay and then here as a method let's
10:17 - just have like beep okay and all this is
10:19 - gonna do is simply print beep beep okay
10:24 - now I know these aren't great examples
10:26 - but just follow so we have now if you
10:28 - have the vehicle class okay and it has
10:30 - these things that deal with gas and
10:32 - obviously gas is gonna work for all of
10:34 - our different types of vehicles and then
10:37 - we create a car class that inherits your
10:38 - vehicle and in here all it does is it
10:40 - has an extra attribute called speed and
10:42 - it has a method called beep now affected
10:44 - another class instead of car I want to
10:47 - do truck now truck he's not gonna say
10:52 - beep beep it's gonna say honk honk
10:55 - like that ok and instead of having self
10:57 - that speed we're gonna have self thought
11:00 - tires ok equals tires because that's a
11:04 - property we're gonna care about for our
11:07 - trucks because sometimes eight it like
11:09 - six tires 18 you know what I mean that's
11:11 - driving my truck okay so you can see
11:13 - that we have a really general class
11:15 - vehicle that simply has a color a gas
11:17 - and a price and obviously within our
11:20 - truck and car class we're gonna care
11:22 - about those attributes of price gas
11:23 - color but in truck we care about tires
11:26 - and when we click beep we want to say
11:28 - honk honk and for a car we care about
11:31 - the speed that the car can go and when
11:34 - we call beep we want to sprint beep beep
11:37 - okay so that is an example of where you
11:41 - would use inheritance I know this is a
11:42 - really small example along the classes
11:44 - you're gonna end up building are gonna
11:46 - be like massive and inherit from like
11:50 - other classes and you're gonna have like
11:51 - large files full of classes but this is
11:53 - the best example I can kind of give you
11:54 - if one inheritance would be useful and
11:57 - same thing if I wanted to do like define
11:59 - motorcycle then you could do the same
12:01 - thing there and four wheels you do like
12:02 - self dot wheels equals to like stuff
12:05 - like that okay so I think I'm gonna end
12:07 - the video here hopefully you guys have
12:09 - an idea of how inheritance works one
12:11 - quick thing if I wanted to I could
12:13 - inherit from car as well so if something
12:15 - is inheriting from something you can
12:17 - also inherit from it so that would mean
12:18 - that now truck has all the attributes of
12:20 - car and all the attributes of vehicle
12:22 - because well car has the attributes of
12:24 - vehicle
12:24 - so since car has it we're inheriting
12:26 - from car truck is gonna get as well just
12:28 - want to add that in before yet anyways
12:29 - make sure you guys leave a like and
12:31 - subscribe and I will see you again in
12:32 - the next video
12:33 - [Music]