00:03 - foreign
00:09 - you some valuable python scripting
00:12 - skills by running you through a complete
00:14 - project specifically I will be showing
00:16 - you how to deal with command line
00:18 - arguments how you can copy different
00:20 - files or directories search for
00:22 - different files or directories use
00:24 - modules like OS sys sub process and a
00:27 - bunch of other modules that are very
00:29 - helpful when you're trying to create
00:30 - Python scripts that can automate
00:32 - workflows and just make your life easier
00:35 - personally just knowing a few of these
00:37 - commands has helped me and save me
00:38 - countless hours in different development
00:40 - projects and the project that I'm
00:42 - actually working on here with you is
00:44 - kind of a variation of something I
00:46 - actually had to do when I was working
00:48 - for my startup and creating kind of an
00:50 - advanced script that had to go through
00:51 - and automatically compile a bunch of
00:53 - code for me anyways thank you guys will
00:55 - find some great value in this so with
00:57 - that said let's get into the video after
00:59 - a quick word from our sponsor before we
01:01 - get started I need to thank lenode for
01:03 - sponsoring this video I've been using
01:05 - and working with lenode for nearly three
01:07 - years now and and they've consistently
01:09 - been my go-to choice for hosting my
01:11 - applications and servers in fact right
01:13 - now I'm using the node to host the
01:15 - official Tech with Tim Discord bot a
01:17 - website multiple of my domains and a
01:19 - kubernetes cluster now lenode was just
01:21 - recently acquired by Akamai and as a
01:23 - part of this acquisition they're going
01:25 - to be adding more than a dozen new data
01:27 - centers around the world in the next
01:28 - year lenode makes it super easy to spin
01:30 - up servers with their one-click app
01:32 - Marketplace and have tons of written
01:34 - guides and YouTube videos on their
01:36 - channel to help you get started now if
01:38 - you're having any issues you can reach
01:39 - out to the 24 7 support team and
01:41 - actually talk with a real human being
01:43 - now the nodes pricing is simple with no
01:46 - hidden fees and full transparency and
01:48 - you can test out the node services for
01:50 - free by using the link in the
01:51 - description and claiming in a hundred
01:53 - dollar sixty day credit for any new
01:55 - accounts it's been an absolute pleasure
01:57 - to work with lenode over the past few
01:58 - years and one last thank you to them for
02:00 - sponsoring this video alright so let's
02:02 - dive into this project I just quickly
02:04 - want to mention if you don't already
02:05 - know I do have a programming course it's
02:07 - called programming access expert.io
02:09 - great place to become a software
02:10 - engineer and learn how to code
02:12 - specifically in Python and go check it
02:15 - out if you haven't already I'll leave a
02:16 - link in the description alright so let
02:18 - me start by walking you through the
02:19 - project that we're going to complete now
02:21 - this is a project that kind of mocks
02:23 - what you would be doing in a real world
02:25 - scenario obviously I don't know what you
02:27 - guys need to automate or what scripts
02:28 - you need to write so I've tried to
02:30 - create something that's very general
02:31 - that allows you to get a bunch of
02:33 - knowledge in a ton of different areas so
02:35 - this may not cover everything you need
02:37 - to do but it will give you a ton of that
02:39 - base knowledge and show you what's
02:40 - possible with python scripting and how
02:43 - you can kind of set up these scripts to
02:44 - be as effective as possible and what
02:47 - command you should be using for a lot of
02:48 - the common operations so let's have a
02:50 - look at it here first thing that I want
02:52 - to look at is just the directory I have
02:53 - on the left side of my screen now you
02:55 - guys can download This by going to my
02:57 - GitHub I will leave a link in the
02:59 - description of course and just clone the
03:01 - repository download the repository and
03:03 - get access to this data directory here
03:06 - now this data directory is going to kind
03:09 - of simulate kind of a large project some
03:11 - code or some files that you would
03:13 - already have and that you want to
03:14 - Traverse through and do something
03:15 - specifically with now that's usually
03:18 - what automation is or scripting is for
03:19 - me in Python it's going through some
03:21 - existing data or an existing file
03:23 - structure and kind of parsing things out
03:25 - grabbing specific data looking for
03:28 - certain names or writing code into
03:29 - different files so I've tried to kind of
03:31 - emulate that here so you can see we have
03:33 - this data directory here and inside of
03:35 - here I have a bunch of stuff right I
03:37 - have some empty directories I have some
03:39 - directories that are representing kind
03:41 - of games that would be written in go I
03:43 - have some random python files they're
03:45 - just empty just for example purposes I
03:47 - have a text file I have another kind of
03:49 - go file here and you can see that
03:51 - there's a bunch of stuff in this
03:52 - directory now what we're interested in
03:54 - here for this kind of mock project is
03:56 - parsing out all of the game directories
03:59 - so what we want to do is want to take
04:01 - all of the games that are inside of this
04:03 - directory we want to copy these into a
04:05 - new directory we want to change the
04:07 - names of of the directory such that we
04:09 - don't have this game kind of suffix on
04:12 - them and then we want to compile all of
04:14 - the game code that exists inside of
04:17 - these game directories now this is
04:19 - something I actually had to do when I
04:20 - was working for my startup as I
04:22 - mentioned in the intro so I've kind of
04:23 - put a variation on it here now to go
04:25 - even a step further once we get all of
04:28 - this game data we parse it out we put it
04:30 - into a new directory and we compile all
04:32 - of the code I want to write a Json file
04:35 - into that directory that gives us some
04:37 - metadata or information about what we
04:39 - just did so how many games are there
04:40 - what are the name of our game
04:42 - directories
04:43 - Etc and that's something that we can
04:44 - kind of quickly look at to get a summary
04:46 - of the information
04:47 - so you can imagine this would be
04:48 - something similar to what you may want
04:50 - to do when you are writing your own
04:51 - Python scripts okay so I have a kind of
04:54 - the project text here excuse any
04:57 - spelling mistakes that are in this file
04:58 - but I just wanted to walk you through
04:59 - very organized step by step what we're
05:01 - going to be doing so so some assumptions
05:03 - here sorry uh the data directory
05:05 - contains many files and directories so
05:07 - imagine this is massive right there's a
05:09 - ton of different code in here and it's
05:10 - not feasible for us to do this manually
05:12 - we want to have a script that
05:13 - automatically does it for us obviously
05:15 - that's not really the case here but
05:17 - again kind of picture that we had you
05:19 - know thousands of files in that case it
05:21 - would be very helpful to have a script
05:22 - to help us do this you are only
05:24 - interested in the games contained in
05:25 - this directory so you don't care about
05:27 - the rest of the junk in there you just
05:29 - want the games which are going to be
05:31 - stored in a directory that contains the
05:34 - word games so whenever we see the word
05:36 - game and that's in the directory name
05:38 - that we know that we're interested in
05:39 - that directory next each game directory
05:42 - contains a single dot go file that must
05:44 - be compiled before it can be run okay
05:47 - perfect that makes sense and these go
05:49 - files could be named different things
05:51 - notice one is called main one is called
05:53 - code one is called file so we're gonna
05:55 - have to do kind of special stuff to
05:58 - handle these different names and compile
06:00 - all of this code okay so now what are we
06:02 - going to do for this project well we're
06:04 - going to find all of the game
06:05 - directories from the data directory
06:07 - we're going to create a new slash games
06:09 - directory or whatever we want to call it
06:11 - that's going to contain all of our game
06:13 - code we're going to copy and remove the
06:15 - game suffix of all of the games into the
06:18 - games directory so that means copy the
06:20 - directory strip off that kind of game
06:22 - aspect of it put it into the new
06:24 - directory we're going to create a Json
06:26 - file with the information about the
06:28 - games so how many games what the game
06:30 - names are Etc
06:31 - we're going to compile all of the game
06:33 - code and then run all of the game code
06:35 - now we may not actually run it here but
06:37 - we will at minimum go to the compile
06:40 - step
06:41 - perfect so the only thing we need to do
06:42 - here to get started is make sure we have
06:44 - python installed I'm going to be using
06:46 - python 3.9 I believe but I think
06:49 - anything above 3.8 should work and if
06:51 - you want to be able to compile and run
06:53 - this go code then what I'm going to
06:55 - suggest to you is that you download a go
06:58 - interpreter or compiler so let me just
07:00 - bring this up here go code
07:03 - I'll leave this link in the description
07:04 - as well but if you go to go.dev pretty
07:07 - simple URL click download it will
07:09 - download and install go it will
07:11 - automatically add it to your path then
07:12 - you'll have access to the go command
07:14 - that we'll be using later in the video
07:16 - last thing if you want there's some
07:18 - helpful extensions here in vs code if
07:20 - you're using vs code you probably want
07:22 - to install the python extension and the
07:24 - go extension as well okay so now that
07:27 - we've got through that let's start
07:29 - writing our code so I have a python file
07:31 - here called get game data you can call
07:33 - this whatever you want and notice I've
07:35 - put this in the same directory as where
07:37 - my data directory is now you don't need
07:40 - to do that but it is going to be helpful
07:42 - to have it kind of close to the data
07:44 - directory so you know the path to where
07:45 - that is so again if you want go to the
07:47 - GitHub I'll leave that link in the
07:49 - description download this code it will
07:51 - have the finished code as well but you
07:53 - can just kind of delete the file and
07:54 - write it along with me if you want and
07:56 - then you'll have this data directory so
07:57 - you don't have to kind of create this on
07:59 - your own so you want to work in a python
08:01 - file that is in the same directory as
08:03 - the data directory now the first thing
08:05 - we're going to do here is just import a
08:06 - bunch of modules that we're going to be
08:07 - using
08:08 - so we're going to import the OS module
08:10 - which I believe stands for operating
08:12 - system
08:13 - we're going to import Json which is how
08:15 - we're going to work with Json files
08:17 - we're going to import shutil which is
08:20 - going to allow us to kind of do some
08:22 - copy and overwrite operations
08:25 - we're going to say from sub process
08:28 - import and we're going to import pipe
08:31 - and run now this is going to allow us to
08:33 - run really any terminal command that we
08:35 - want so we can for example compile and
08:38 - run the go code using this and then we
08:40 - are going to import sys which we are
08:42 - going to use to get access to the
08:44 - command line arguments so the very first
08:47 - thing I want to start by doing here if
08:48 - we go back to our project text is we
08:50 - want to find all of the game directories
08:52 - from some directory in this case is
08:54 - called slash data we want to create a
08:56 - new directory some kind of Target
08:58 - directory where we're going to be
08:59 - copying this into so what I want to do
09:01 - is I want to grab from command line
09:04 - arguments what the source directory and
09:07 - the target directory is relative to the
09:10 - current path so that I know where I
09:12 - should be storing kind of all of the
09:13 - games that I find and where I should be
09:15 - looking for those games to make this
09:16 - script a bit dynamic so what is a
09:19 - command line argument well let me just
09:20 - show you down here in the terminal so a
09:22 - command line argument is something like
09:23 - python I pass my uh file name so get
09:26 - game data and then I do something like
09:28 - Hello World okay so hello and world are
09:31 - command line arguments you've seen this
09:33 - before whenever you've ran any commands
09:34 - like when you make a folder mkdir and
09:36 - then you put the folder name the folder
09:38 - name is a command line argument so in
09:40 - this case we might do something like
09:41 - python getgame data then we pass slash
09:44 - data which is going to be our source
09:46 - directory and then we pass something
09:47 - like Slash new games or something like
09:50 - that and that's our output or Target
09:52 - directory so I want to show you how we
09:54 - can parse out those command line
09:55 - arguments so to do that we're going to
09:57 - use the system module so first I'm going
10:00 - to say if underscore underscore name is
10:02 - equal to underscore underscore Main
10:05 - then in here I'm going to grab the
10:07 - command line arguments now the reason
10:09 - I'm using this is because I only want to
10:12 - execute the main script here if I'm
10:15 - running this python file directory
10:17 - directly sorry if I'm not directly
10:19 - running this python file I don't want to
10:21 - be executing the code that's going to
10:23 - run through and do all of our operations
10:25 - otherwise if we try to import the python
10:28 - file and we didn't have this line it
10:30 - would go ahead and run all that code
10:32 - when we don't want that to happen so
10:33 - when you have this here this just checks
10:35 - that you ran the file directly and it
10:38 - won't execute anything in here if you
10:40 - were importing say a function or class
10:42 - or something from this file hopefully
10:44 - that makes sense what I'll do here is
10:46 - say RX is equal to sys dot ARG V okay
10:49 - now just to show you how this works
10:51 - we'll print out args and let's run our
10:54 - code so I'm going to say python getgame
10:55 - data data new data okay hit enter and
10:59 - notice that my command line arguments
11:00 - are first of all the name of the Python
11:02 - file and then I have my two command line
11:05 - arguments so data and new data that I
11:08 - passed here now if you are on Mac you
11:10 - will probably need to run Python 3
11:12 - getgame data okay so now that we have
11:15 - our arguments I want to make sure that
11:17 - we have a valid number of arguments
11:19 - which in this case is going to be three
11:20 - three because we have the file name and
11:22 - then we have the two extra arguments and
11:24 - we want to make sure we have those two
11:26 - extra arguments so I'm going to go here
11:28 - and say if the Len
11:30 - of args
11:33 - does not equal three then I will raise
11:35 - an exception and here I will say you
11:39 - must pass a source
11:42 - and
11:43 - Target directory
11:46 - only
11:47 - okay so that's fine so now if we run our
11:51 - code here and I only pass for example
11:53 - The Source directory then notice that I
11:55 - get my exception if I pass my target as
11:58 - well then all is good okay so now I want
12:01 - to get my source and Target directory so
12:05 - I'm going to say
12:06 - Source Target is equal to sys Dot argv
12:11 - and I'm going to do one colon like this
12:13 - and actually we can put this as args now
12:16 - the reason I'm doing one is just to
12:17 - strip off the name of our python file
12:20 - which we don't want and just get the two
12:22 - arguments here and then store them in
12:24 - separate variables
12:25 - okay now that we've done that I'm going
12:27 - to create a function
12:28 - and this main function is going to
12:30 - accept our source okay
12:33 - and our Target and I don't know if
12:36 - that's actually the right thing that we
12:38 - want to call it
12:39 - um
12:40 - yeah I guess that makes sense source is
12:42 - where we're looking Target is where we
12:43 - want to put our new directory so that's
12:45 - fine we can leave it like that and then
12:46 - here we'll go and call the main passing
12:50 - our source and Target directory names
12:52 - perfect now that we've done that what we
12:56 - actually need to do here before we go
12:57 - any further is we need to create a
13:00 - complete path from the location where
13:02 - we're running our python file to
13:04 - whatever this directory is so in the
13:07 - case where I pass you know data or
13:09 - Target well I want to get the full
13:12 - qualified path from say like my C drive
13:14 - all the way to this directory so that
13:17 - it's going to work in my program if I
13:19 - just try to use data or I just try to
13:20 - use Target we can get some weird errors
13:23 - depending on what operating system we're
13:24 - running on so what I'm going to do here
13:26 - is say my source underscore path is
13:28 - equal to
13:29 - os.path.joint and the first thing we
13:32 - need here is the current working
13:34 - directory which I can get by using the
13:37 - command I gotta check my cheat sheet
13:39 - here because I always forget oh s dot
13:41 - get CWD
13:43 - okay so I'm going to join the path of
13:45 - CWD and my source directory now you
13:49 - should always use
13:51 - os.path.join when you're trying to
13:52 - create paths don't think you're going to
13:54 - be clever here and have a path like you
13:56 - know C drive colon slash slash and then
13:59 - you add like you're doing a string
14:01 - concatenation don't do that the reason
14:03 - you should not do a string concatenation
14:05 - is because if you're working on
14:07 - different operating systems the path
14:09 - dividers are different when you use
14:11 - os.path.join it automatically will join
14:14 - the path based on the operating system
14:16 - you're working on so you always want to
14:17 - use this don't do string concatenations
14:19 - uh to try to create paths it might work
14:21 - sometimes but it's not kind of a good
14:24 - practice to do that okay so we've
14:25 - created our source path now just with to
14:27 - explain this line here CWD is our
14:30 - current working directory which means
14:31 - the directory we ran this python file
14:34 - from so wherever we ran this python file
14:36 - from that's the working directory so in
14:38 - this case it's going to be users Tim
14:40 - desktop python scripting then whatever
14:43 - over these paths are are going to be
14:44 - relative to that working directory so I
14:47 - combine them together right so now the
14:49 - directory will be this and then it will
14:51 - have my source which would be data right
14:54 - and then the next one will be my target
14:56 - okay so let's copy this and make this
14:58 - target
15:00 - and change this here to be Target
15:03 - okay so now we have our source path and
15:05 - our Target path now what do I need to do
15:07 - next here well I need to find all of the
15:10 - game directories from my source
15:12 - directory so let's write a function that
15:14 - can do that we'll say find
15:16 - all
15:17 - game endures like that we need to know
15:20 - where to look so we'll go source okay
15:22 - I'm going to create a variable up here
15:24 - and this is going to specify what we're
15:26 - looking for in our directory so like
15:29 - what needs to be in their name so in
15:31 - this case I'm going to say Game Dirt
15:35 - pattern is equal to and we'll just call
15:38 - this game which essentially means we're
15:40 - going to look for the string game in any
15:42 - directories uh and that will tell us
15:44 - that we want that directory right now
15:47 - what we're going to do is we're going to
15:48 - essentially walk through the source
15:50 - directory look at all the files and
15:53 - directories and then match any
15:55 - directories that have this game in them
15:58 - um and if we have that then we'll add
15:59 - them to a list we'll return them Etc
16:01 - okay so let's do this I'm going to say
16:03 - my game underscore paths is equal to and
16:05 - this is going to be a
16:07 - uh what do you call it just empty list
16:09 - and actually I want to change this say
16:11 - find all game
16:13 - paths because it's going to give us the
16:14 - full path not just the directory name
16:17 - next I'm going to say for root I believe
16:20 - this is going to be durs files in OS dot
16:25 - walk and I'm going to walk the source
16:27 - path okay now what walk will do is walk
16:31 - recursively through whatever the source
16:34 - directory is that you pass uh to this
16:37 - this os.walk command so it's going to
16:39 - give you the root directory the
16:41 - directories and the files that are
16:43 - contained in the current level that it's
16:45 - walking through now what this will do is
16:47 - recursively continue to look so in this
16:50 - case it'll look in data but then it
16:51 - would after looking in data look inside
16:53 - of blank then look inside of hello world
16:55 - then look inside of rock paper scissors
16:57 - game it would look through all of those
16:58 - directories now we only care about the
17:01 - directories that are immediately inside
17:02 - of data however if you wanted to
17:04 - recursively look through all of them
17:06 - this is what you would use hence why I'm
17:08 - showing it to you here now since we only
17:10 - care about the first kind of top level
17:12 - directory we only really need to run
17:14 - this command one time so at the end of
17:17 - my for Loop I'm just going to put a
17:18 - break so that I only do this once and
17:21 - this is just an easy way for me to grab
17:23 - kind of all of the values one time right
17:25 - so you just break at the end of the for
17:26 - Loop so we only run this one time okay
17:29 - now that we've done this uh we need to
17:31 - Loop through all of the directories so
17:33 - I'm going to say
17:34 - 4
17:35 - and you should not use dur because
17:37 - that's a built-in command so I'm going
17:38 - to say directory in ders like that and
17:42 - then I want to get the name of my
17:44 - directory and match that against my game
17:47 - dir pattern so what I will do is say if
17:50 - my game dur pattern is in my directory
17:55 - dot lower and I'll put this lowercase
17:57 - just in case we have a capital game or
17:59 - like a capital on the G or something
18:01 - like that you don't have to do this but
18:02 - I think it makes sense to do that if
18:04 - this is the case then I'm going to add
18:06 - this path uh to my game paths so what I
18:10 - will do here is say my path is equal to
18:15 - OS dot path dot join and then I'm going
18:19 - to take my source and I'm going to take
18:21 - my directory like this and I'm going to
18:25 - say game paths dot append my path okay
18:28 - then down here
18:30 - we will return our Game Pass now the
18:33 - reason I'm doing this is because this uh
18:36 - durs list here gives me all of the names
18:39 - of directories not the paths to those
18:41 - directories now here I want the full
18:43 - path the reason I want the full path is
18:45 - so that I can easily copy it later on if
18:48 - I don't have the full path I can still
18:50 - create that full path but it's just
18:51 - easier to return all of the full paths
18:53 - right now so that's why I'm doing it so
18:54 - I'm saying path is equal to os.path.join
18:57 - taking my base path where I know this
18:59 - directory is contained inside of and
19:01 - then I'm joining them together right
19:02 - taking the directory name adding it to
19:04 - the base and then adding this to my
19:06 - array or list of paths and then I will
19:08 - return them
19:09 - fantastic so let's try this out now and
19:12 - make sure that this works so let's say
19:14 - our game underscore pass is equal to
19:17 - find all Game Pass and then we'll pass
19:19 - here the source path it will print
19:22 - our Game Pass
19:24 - okay so let's give this a shot here and
19:27 - see if we get any errors or not so here
19:29 - we're going to pass data that's going to
19:31 - be our source directory so make sure you
19:33 - have data there and then Target will be
19:35 - our Target although it doesn't matter
19:36 - right now all right so notice now that I
19:38 - get my full paths to all of the
19:40 - directories that contain the name game
19:42 - so I have my hello world I have my rock
19:44 - paper scissors game and I have my Simon
19:47 - Says game now notice that I've ignored
19:49 - the blank directory I've ignored any
19:51 - files even if my file had the name game
19:53 - inside of it because I was only looking
19:55 - in directories
19:57 - fantastic
19:58 - okay so that is working the next thing
20:00 - that I want to do here is I want to take
20:03 - all of these paths and I essentially
20:05 - want to just get the new directory name
20:08 - that I want to copy these directories to
20:11 - I know this seems a bit weird but
20:13 - remember what we're doing here is we're
20:15 - taking all of these directories and
20:17 - we're copying them into a new directory
20:19 - but we're removing the game part from
20:22 - that directory name so when I copy you
20:25 - know Simon Says game I'm just going to
20:26 - copy Simon says not the game part into a
20:30 - new directory so I need to get that kind
20:32 - of destination path before I can perform
20:35 - that copy because to do a copy I need a
20:36 - source I need a destination right now we
20:38 - just have the source so we have to
20:40 - create the destination now one thing we
20:41 - also have to do is create the new
20:43 - directory and we can actually create the
20:44 - new directory right now so let's make a
20:48 - new um function here and say create
20:50 - underscore dir and all we'll take for
20:53 - this is the path to the directory that
20:55 - we want to create
20:56 - inside of here I'm first going to check
20:59 - if this directory exists if it exists I
21:01 - don't need to create it if it doesn't
21:03 - exist then I will quit so I'm going to
21:04 - say if not and then this is OS dot uh
21:09 - actually is this going to be I think
21:11 - it's os.path.exist yes okay that's
21:13 - correct so if this does not exist then I
21:16 - will say OS Dot MK dir which stands for
21:18 - make directory and I will make the
21:20 - directory at this path
21:23 - okay that's it for creating the
21:24 - directory so let's go here
21:26 - and let's say Creator and the directory
21:29 - that we want to create is going to be
21:30 - the target path right so we'll just pass
21:32 - the target paths path there sorry
21:35 - okay next
21:37 - we want to get all of those destination
21:39 - paths so I need to make a function that
21:41 - is essentially going to look at this
21:43 - whole path and it's just going to give
21:45 - me the directory name but removing the
21:49 - game aspect now I know this seems a bit
21:50 - backwards how I'm doing it I'm doing it
21:52 - intentionally so I can show you how you
21:54 - strip apart paths and take like certain
21:57 - components of the path so believe me I
21:59 - know there is an easier way to do this
22:00 - but I'm trying to show you like how you
22:02 - can use a lot of different commands here
22:03 - so hopefully you appreciate it anyways
22:06 - let me just quickly look at my cheat
22:07 - sheet here okay uh and I'm gonna say
22:10 - that this is called get name from has
22:13 - I'm going to take in my paths and I'm
22:16 - going to take in what I want to strip
22:18 - off of my directory name so I'll call
22:20 - that two strip I don't really know what
22:22 - else we would call that
22:24 - so I'm going to go here and say new
22:25 - names is equal to an array and I'm going
22:28 - to say four half in paths now what I
22:32 - want to do is I want to split my path
22:35 - into the just the directory and the base
22:38 - part right so like The Parent Directory
22:41 - of just the directory because remember
22:43 - we have the full entire path so when we
22:45 - had Game Pass we have the entire path to
22:47 - the game directory so we're going to
22:49 - split it to just the game directory and
22:50 - then whatever that base path is now the
22:52 - way we do that is we can say underscore
22:54 - because we don't care about the
22:55 - beginning part and then we can say der
22:57 - underscore name is equal to OS dot path
23:00 - dot split and then we can just split the
23:02 - path now this is automatically just
23:03 - going to give you the very last aspect
23:05 - of the path whether it's a directory or
23:07 - a file or whatever it is and then the
23:08 - remaining part of the path on the left
23:10 - side again don't try to get clever and
23:12 - do this Yourself by splitting different
23:14 - uh like slashes or trying to find the
23:16 - PATH divider just use these built-in
23:18 - functions because they handle the
23:20 - different operating systems for you okay
23:22 - so now we have the dur name now what we
23:24 - need to do is remove the game aspect or
23:26 - whatever aspect from this turning so I
23:29 - will say new your name
23:32 - is equal to my dur name
23:34 - dot replace
23:37 - and I'll replace whatever the two strip
23:39 - string is that we pass which will be
23:40 - game with an empty string which we'll
23:42 - just get rid of it from the uh the
23:43 - directory then I'll say new names
23:46 - dot append
23:48 - my new dur name
23:51 - then I will return my new names
23:54 - fantastic okay so now let's get our new
23:55 - names so let's say new game dirs
24:00 - is equal to get name from paths and our
24:03 - paths is going to be the game paths and
24:05 - to strip we're just going to strip off
24:06 - the string game
24:09 - fantastic now let's print
24:12 - our new game dirts all right now notice
24:15 - I have create directory as well so we
24:16 - should see that a new directory gets
24:18 - created here when I run this let's try
24:20 - it
24:21 - and see what we get and notice now that
24:22 - we get Hello World rock paper scissors
24:24 - Simon Says plus the target directory was
24:27 - created so I'll delete that so we can
24:29 - create again later
24:30 - okay now we do have the underscore here
24:33 - now that makes sense right because we're
24:35 - just looking for a game now in this case
24:37 - we can look for underscore game and we
24:38 - can remove that entire thing but it's up
24:40 - to you how you want to do this right if
24:42 - you look for underscore game then if you
24:43 - started the directory name with just
24:45 - game it wouldn't count or it wouldn't
24:47 - remove it so you could do some Advanced
24:48 - logic to remove this if you want but for
24:51 - now we'll just make it underscore game I
24:52 - think you guys know what I'm saying here
24:54 - okay so let's clear that and what do we
24:56 - need to do next well now that we have
24:58 - our kind of destination our source
25:00 - directories for all the games as well as
25:02 - where we want to put these games now we
25:04 - need to well we need to write them right
25:06 - like we need to actually do the copy
25:08 - operation so what I'm going to do is
25:10 - make a new directory or new function not
25:13 - directory and I'm going to call this
25:15 - copy okay now what copy is going to do
25:18 - is take a source and a destination and
25:21 - it's going to copy the source into the
25:23 - destination now I will actually
25:25 - um kind of change this a little bit and
25:27 - I will say copy and overwrite now the
25:29 - reason for this is that if the directory
25:31 - already exists I want to overwrite it
25:33 - and I will show you how we can do that
25:34 - now keep in mind the commands I'm going
25:36 - to use here are just one option to do
25:38 - this there's like a million ways you can
25:40 - go about copying and deleting
25:41 - directories but I'm going to show you
25:43 - how we delete a directory if it already
25:44 - exists and then of course how we copy it
25:46 - and this will be a recursive copy which
25:48 - will copy everything so if there was
25:50 - another directory inside it would copy
25:52 - that directory as well and all of the
25:54 - content tense of that directory a lot of
25:56 - the copy operations don't do that so
25:58 - just keep in mind if you want a
25:59 - recursive copy you probably want to use
26:01 - the option I'm showing you here so I'm
26:02 - going to say if
26:04 - os.path.exist destination that I need to
26:07 - start by removing the destination folder
26:09 - which I'm going to use my shutil for so
26:12 - I'm going to say shutil dot RM tree
26:15 - which stands for remove tree which is
26:17 - essentially a recursive delete and this
26:19 - is going to be the destination
26:21 - now after this I'll say s h util dot
26:25 - copy tree
26:27 - and then I will copy the source to the
26:31 - destination all right that's all good
26:33 - that's all we need for copying and
26:35 - overwriting
26:36 - or overriding however you wanna I think
26:39 - overwrite is the correct term there okay
26:41 - so now that we've done that
26:42 - we can use this function so we need to
26:44 - essentially Loop through all of the
26:46 - different paths that we have so the
26:48 - source paths as well as the destination
26:49 - paths and then we need to run this copy
26:51 - command so I'm going to say four and
26:54 - we'll call this uh
26:56 - SRC destination in I'm going to use this
27:00 - ZIP function I'll explain how this works
27:02 - in one second but I'm going to pass my
27:03 - game pass and my new game directories
27:06 - I'm going to start by saying my
27:08 - destination path is equal to OS dot path
27:11 - dot join and I'm going to join my target
27:14 - path with my destination folder name
27:18 - then I will run the copy and overwrite
27:20 - function with my
27:22 - SRC and my destination
27:26 - okay
27:27 - so let me explain how zip Works what zip
27:29 - will do is it will take matching
27:32 - elements from two arrays and combine
27:34 - them into a tuple which then gives me
27:36 - access to them at the same time so
27:38 - notice right these arrays or these lists
27:40 - are going to be the same length so this
27:42 - first one is going to be all of the
27:43 - original game paths and this is going to
27:45 - be our new game directory names that
27:47 - have this underscore game removed now I
27:50 - want to be getting the game path
27:52 - associated with the new game directory
27:54 - name because I want to copy whatever's
27:56 - here into this new directory name so I
27:59 - zip them together so to show you a quick
28:00 - example if we have one
28:02 - 2 3 and we have like a b
28:06 - C then if you zip these together what
28:09 - you're going to get is an array that has
28:11 - one and a or a tuple sorry that has one
28:13 - in a
28:14 - 2 and B
28:16 - Etc it just combines them together so
28:17 - the matching elements at their indices
28:19 - get kind of matched up and that's why I
28:21 - can say Source destination here and
28:23 - iterate through the zip
28:25 - okay so now this should actually be good
28:27 - however I need to make sure that I
28:28 - create this directory
28:30 - before I do this otherwise we're going
28:32 - to get an error where it says our path
28:34 - doesn't exist okay so let me slow down
28:36 - for one sec I'll explain what we've done
28:37 - we can run it and we can continue so
28:39 - what we've done here right is we've
28:40 - gotten the source path as well as the
28:42 - directory path we have found all of the
28:45 - game paths that we're interested in so
28:46 - essentially those directories from The
28:49 - Source directory we have then found what
28:51 - we want our new game directory names to
28:54 - be we have then created the target
28:56 - directory where we want to copy all of
28:58 - these into and now we are actually
29:00 - performing that copy operation okay so
29:02 - we're at that point so let's run this
29:04 - and see how it works
29:06 - so python get game data
29:09 - and then we're passing data and Target I
29:11 - hit enter and when I look in Target here
29:13 - you can see I now have Hello World rock
29:15 - paper scissors and Simon Says with the
29:18 - contents of those directories because I
29:19 - just copied them in
29:21 - perfect so now let me delete this
29:23 - and we can continue so the next thing I
29:26 - want to do is write a Json file that
29:27 - just has some metadata about the
29:29 - different games so what the game
29:31 - directory names are and how many of them
29:32 - there are this is fairly straightforward
29:35 - so let me create a function I'll say
29:37 - make
29:38 - Json
29:39 - meta data file and here I will just take
29:43 - my path so what do I want the file to be
29:46 - or where do I want it to be and then I
29:48 - will take my game
29:50 - durs okay now here I'm going to say that
29:54 - my data this is the data I want to write
29:56 - into the Json file is going to be equal
29:58 - to oh I will say my game names
30:02 - is simply my game directories and I will
30:05 - say number of games
30:08 - and this will be the Len of my Gamers
30:11 - very straightforward not the most useful
30:14 - data but just want to show you how we
30:15 - write Json so now there's a few ways to
30:17 - do this but the preferred method is to
30:18 - do the following I'm going to say with
30:20 - open
30:21 - half in wmode W stands for right this
30:25 - will override the file if it already
30:26 - exists if you wanted to read the file
30:28 - you'd use R so I want to write and
30:30 - override if it exists I'm using W and
30:33 - I'm going to say as F and then I'm going
30:35 - to say Json
30:37 - dot dump and I'm going to dump my data
30:40 - into my file now if you've ever seen
30:44 - Json be used before with dump s dump s
30:47 - stands for dump string and that's going
30:49 - to dump the uh Json data you have into a
30:53 - string we don't want that we want to
30:55 - dump it into a file or just really save
30:57 - it into a file so we pass the data that
30:59 - we want to save which in this case is a
31:01 - python dictionary which can kind of be
31:03 - represented as a Json object and we want
31:05 - to save it into this file object that
31:07 - I'm opening using something known as a
31:09 - context manager now the reason I use
31:12 - this is because as soon as we're outside
31:14 - of this width we are automatically going
31:16 - to have the file closed for us if we
31:18 - didn't use with we would have to
31:20 - manually close the file and there can be
31:22 - some problems doing that especially if
31:24 - an error occurs before we're able to
31:25 - close the file we can have kind of a
31:27 - memory leak going on so it's just
31:29 - preferred to use this it's referred to
31:30 - as a context manager that just makes
31:32 - sure your cleanup operations happen no
31:34 - matter what essentially
31:36 - okay so we have this uh Json metadata
31:38 - file so let me copy this function
31:40 - let's paste it here we'll say make Json
31:42 - metadata file and now we need to pass a
31:45 - uh path that we want to use so I'll say
31:48 - Json underscore path is equal to OS Dot
31:52 - half dot join and I will join my target
31:57 - path with my
32:00 - metadata.json name
32:01 - so I've just come up with this name you
32:03 - can name it anything you want and I will
32:05 - pass here the Json path and my new game
32:08 - durs right there we go okay so let's run
32:12 - this again and see if it creates the
32:14 - Json file
32:16 - okay go to Target
32:18 - and notice we now have our Json file if
32:21 - I save a little Auto format here and you
32:23 - can see we have our game names and our
32:25 - number of games fantastic
32:28 - okay so let me delete that
32:31 - all right now that we have done that I
32:33 - need to show you how we can compile this
32:35 - go code and how we can run the go code
32:38 - alright so let's write a function here
32:40 - that will allow us to compile the code
32:42 - inside of a directory now let me just
32:44 - space up my functions here so a bit
32:46 - easier to read okay and let's do it here
32:48 - so Define this will be
32:51 - compile
32:53 - and a game code
32:54 - now here we'll take a path
32:58 - which will be the path to the directory
33:00 - we want to compile the code inside of
33:01 - now what we need to do here is we need
33:04 - to locate or determine the name of the
33:07 - file that we want to compile you know no
33:10 - pun intended or rhyme intended there but
33:12 - you know what I mean so we have main we
33:14 - have code we have file now in this case
33:16 - we get hard code that but we don't want
33:18 - to do that we want to have this Dynamics
33:19 - so it works with kind of any go file no
33:22 - matter what the name is so essentially
33:23 - we're going to look through the
33:24 - directories of our games and we're going
33:27 - to search for any file that ends in dot
33:29 - go right so let's create a variable here
33:32 - and say game code
33:34 - extension and I'll just make this dot go
33:37 - so that's what we'll search for now if
33:39 - we find that uh then we'll compile that
33:41 - code now we could compile all of the
33:43 - files that have that name or we could
33:45 - compile just the first one in this case
33:47 - I'll just do the first one because we're
33:48 - assuming we only have a single code file
33:50 - in each of our directories
33:52 - all right so let's say code file name is
33:57 - equal to none and then let's walk
33:59 - through this directory like we did
34:01 - before so we're going to say root durs
34:04 - files in OS dot walk our path and this
34:09 - time we're only interested in the files
34:11 - so I'm going to say four file in files
34:14 - and let's not forget to break here at
34:16 - the end of our for Loop so we only do
34:17 - this one time not recursively okay so
34:20 - four files in files I'm going to say if
34:23 - the code what did I even call this the
34:28 - well game code okay game code extension
34:30 - if the game code extension is in the
34:33 - file then I will say my code
34:37 - Sue that's my code file name is equal to
34:40 - file
34:41 - and then I will break okay that's
34:43 - actually all we need I know it went fast
34:45 - there but that's all we need to
34:46 - determine what the name of our code file
34:48 - is so we Loop through all of our files
34:51 - here right so for file and file and we
34:53 - say okay if this dot go extension is
34:56 - associated with the file then we'll say
34:57 - code file name is equal to file uh and
35:00 - then we'll break which means we'll just
35:01 - find the first one we don't need to
35:03 - continue looking now what I just
35:04 - realized though is that this could be a
35:07 - little flawed because I could
35:08 - technically have a file that's like dot
35:10 - go dot Pi I know that would be a weird
35:12 - name but that wouldn't be a DOT go file
35:14 - that would be a python file right well I
35:16 - think that would be a python file but it
35:18 - would be a bit weird either way if we
35:19 - had something like that so what I'm
35:20 - going to do instead is use a little bit
35:22 - of a better way of doing this I'm going
35:24 - to say if file dot ends with so I'm
35:28 - going to check if this is at the end of
35:29 - the file I think that's a better way to
35:31 - do this check
35:33 - okay perfect so now what I'm going to do
35:35 - is I'm just going to make sure that we
35:37 - did have a code file if we don't have
35:39 - one I'm going to return if we do have
35:41 - one then I'm going to run the command to
35:42 - compile this so I'm going to say if the
35:45 - code file name
35:46 - is none
35:48 - then just return just so that we don't
35:50 - get an error when we try to compile a
35:52 - file that doesn't exist now we need to
35:55 - actually compile the file so the first
35:57 - thing I'm going to do is say my command
35:58 - is equal to and then I'm going to make a
36:02 - variable up here which will be my
36:03 - compile command so I'm going to say game
36:06 - compile commit now the way you write
36:08 - these commands is just in an array of I
36:11 - keep saying array and in a list of
36:14 - strings that represent the commands that
36:16 - you need to run so it's going to be go
36:19 - and then build so this is the command go
36:21 - build then whatever the name of the file
36:23 - is so this is my like base command
36:25 - so I'm going to say my command is equal
36:27 - to my game compile commands
36:30 - plus and then I'm going to put another
36:32 - list here and I'm going to add inside of
36:34 - here the code file name now what this
36:36 - will do is make the command B go build
36:39 - and then whatever the file name is then
36:41 - I can pass this to a function that I'm
36:43 - going to write which will just run any
36:45 - command that I pass it
36:47 - so we're going to say run command and we
36:49 - do actually need the path that we want
36:51 - to be running this command from
36:54 - okay
36:55 - so now
36:56 - I'm going to say that our current
36:58 - working directory is equal to OS dot get
37:01 - CWD
37:03 - is that is that what it is get CWD yes
37:06 - that's correct and I'm going to show you
37:08 - how we change our working directory into
37:10 - this path the reason for that is that I
37:13 - need to run this command well I don't
37:15 - need to but I'm going to run this
37:16 - command directly in the directory where
37:19 - our game code is so rather than being in
37:21 - the directory or my python script was
37:23 - run I'm going to change into that
37:24 - directory run the command and then
37:26 - change back to a different directory
37:28 - just to show you how you do that so I'm
37:30 - going to say OS CH dir which stands for
37:32 - change directory I'm going to change
37:34 - into the path directory then I am going
37:38 - to go and run the command now to run the
37:40 - command we're going to use the sub
37:41 - process command run which I believe I
37:44 - imported from up here yes I did so we're
37:47 - going to say
37:49 - run and we're going to run our Command
37:52 - and we're going to say our standard
37:54 - output is equal to pipe and our standard
37:57 - input is equal to pipe and I'm going to
38:01 - say Universal new lines is equal to true
38:04 - now this is where the command gets a
38:06 - little bit complicated right um you know
38:07 - what does all this mean well the
38:09 - standard output and the standard input
38:10 - is the location where the command is
38:12 - well accepting input and spitting out
38:14 - the output now pipe is kind of this
38:17 - special thing that we can use that makes
38:20 - a bridge between our python code and the
38:23 - process that we're using to run this
38:25 - command now I'm not really going to
38:27 - explain it more than that but just
38:29 - understand that that's why we're putting
38:31 - it here it essentially allows us to
38:32 - communicate between the process that can
38:34 - actually run this special command
38:36 - because this command is not a python
38:38 - built-in Command right like this is a
38:39 - command we just run in our terminal or
38:41 - in our command prompt again you don't
38:44 - have to understand it maybe that
38:45 - explanation was good maybe it wasn't but
38:47 - this is how you do it you import run and
38:49 - pipe from sub process you pass the
38:51 - command again the command is just going
38:52 - to be an array of all of the different
38:54 - words that are in that command or a list
38:56 - of all of the different commands and
38:58 - then if you wanted the results
39:00 - uh it will be given to you in this
39:01 - result variable so you could print out
39:03 - the result you could read it in as a
39:04 - Json object blah blah you could do
39:06 - whatever you want and you could see what
39:08 - that result is and in fact
39:10 - we'll print out the result uh just so
39:12 - you can see what it looks like so I'll
39:13 - say
39:15 - compile
39:16 - result like that
39:19 - okay now the last thing we'll do just as
39:21 - good practice is we're going to change
39:22 - our directory back to the current
39:25 - working directory we were in before we
39:28 - ran or before we change directories into
39:30 - this path just to make sure when we run
39:32 - this command another time uh we don't
39:34 - get any potential errors okay so we got
39:37 - the working directory where we're in
39:38 - changed into this path directory ran the
39:41 - command and then we went back into
39:43 - whatever the previous directory was just
39:45 - that we don't have any potential
39:46 - problems here now we need to call this
39:49 - function so we'll say run command and
39:51 - command and path that's actually fine we
39:54 - can just pass those values great so now
39:57 - where do we call our compile game code
39:59 - function well we're going to call that
40:01 - from inside of our copy here
40:04 - so I'm going to say compile game code
40:06 - and I will compile game code in the
40:08 - destination path
40:10 - because once we've done the copy and
40:11 - overwrite once this is finished now that
40:13 - directory exists let's compile the game
40:15 - code then move on to the next
40:17 - directories
40:18 - so in this point the project is pretty
40:20 - much finished
40:21 - let's run it though
40:23 - make sure it works
40:25 - okay compile result compile result and
40:28 - notice it gives you kind of this like
40:29 - result object right
40:31 - I'm not going to uh
40:33 - again kind of dig into exactly how this
40:35 - works but you can see that if you wanted
40:36 - to look at the standard out then it
40:38 - would be STD out from this compiled
40:40 - process
40:41 - or sorry not compiled completed process
40:43 - and if this had any result like if there
40:45 - was an error you'd be able to see it
40:47 - there and the return code would most
40:48 - likely be an error return code as well
40:50 - now let's look at Target here so we have
40:52 - Target we have hello world and now
40:53 - notice inside of my directories I have
40:55 - my compiled code right I have main.exe
40:58 - code.exe file.exe Etc if you were on Mac
41:02 - or Linux you would get I believe a DOT
41:04 - sh file uh or an executable file on your
41:07 - operating system it'll be different than
41:09 - if you were on Windows
41:11 - okay so I think I'm gonna wrap up the
41:14 - video here all of this code will be
41:16 - available on GitHub I'll also zoom out a
41:18 - bit and kind of slowly scroll through in
41:19 - case any of you want to pause the video
41:21 - and have a look at any of the lines here
41:22 - but I thought this was a useful project
41:25 - just to teach you some basic kind of
41:27 - automation I don't want to call it
41:29 - automation scripting
41:30 - um syntax tools commands you can use in
41:33 - Python I write code like this all the
41:36 - time in Python it's really helpful this
41:37 - is kind of my go-to language when I need
41:39 - to do like file or file system
41:41 - operations so hopefully you guys found
41:43 - some value from this and of course if
41:45 - you did make sure to leave a like
41:46 - subscribe to the channel you guys can
41:48 - check out my programming expert course
41:50 - if you want to learn how to become a
41:51 - python programmer or a software engineer
41:53 - as fast as possible and I look forward
41:55 - to seeing you in another YouTube video
41:58 - [Music]