00:01 - hey guys I just want to do a quick
00:03 - little intro before the intro kind of in
00:06 - this video series because I want to give
00:07 - you guys for the information
00:08 - pretty much when recording this I wasn't
00:10 - sure how long it was gonna take me to do
00:12 - all of the content and do all of the
00:14 - code for this snake game so I ended up
00:17 - just recording it all in one sitting
00:18 - that means that I'm gonna break this up
00:20 - into 15-minute segments it was about an
00:23 - hour worth of footage so that should be
00:25 - four videos and if the last video ends
00:28 - abruptly or whatever one you're watching
00:29 - just know that it's gonna start exactly
00:31 - where it left off in the next video it's
00:34 - just because I wasn't sure when I was
00:36 - gonna be ending it and splitting up that
00:37 - I didn't really do like a formal
00:38 - conclusion or reintroduction in the next
00:41 - video just wanted to give you guys heads
00:43 - up for that and with that being said
00:44 - enjoy the video hey guys and welcome
00:49 - back to another youtube video in today's
00:51 - video and i guess the next few videos
00:53 - i'm gonna be doing a tutorial on coding
00:56 - snake in python so let's just go ahead
00:58 - and get a look at what this final
01:00 - product is gonna look like so on like an
01:03 - x by x grid so whatever you want it to
01:05 - be you have a little snake moving around
01:07 - there's a snack is what i want to call
01:10 - it that i shows up and as you collect it
01:12 - it increases the length of the tail and
01:14 - then obviously if you run into yourself
01:16 - and I just did that by clicking the back
01:17 - key while I was going forward it gives
01:19 - you a little error message here says you
01:21 - ran into your tail of your length was
01:23 - nine dog whatever and then you can
01:26 - continue and play as long as you want so
01:29 - yeah it's pretty cool it's not super
01:32 - crazy hard to make but there is quite a
01:34 - bit of code for it so this is probably
01:35 - gonna be a few videos anyways what I'm
01:38 - gonna be doing in here is gonna be
01:39 - coding everything object-orientated I
01:41 - know that there's a much faster and
01:43 - easier way to do this but doesn't really
01:45 - teach you that much this way you're
01:47 - gonna learn a bit about objects about
01:48 - classes how we can kind of work with
01:51 - them and you'll see like how the flow of
01:53 - my program goes and you should learn
01:55 - quite a bit especially if you're
01:56 - somewhat a beginner programmer what
01:59 - we're gonna be using to make this as a
02:00 - module called pygame if you don't know
02:02 - about pygame and you want to learn about
02:04 - it before you do this i would recommend
02:06 - that if not that's fine but anyways if
02:09 - you want to learn about that'll put a
02:10 - little card in the top right corner here
02:11 - i have a tutorial series it goes through
02:13 - that
02:14 - and you can skim through that and learn
02:15 - a bit about bagging before we get into
02:17 - it here all right so let's start coding
02:19 - so pretty much what I've done is I've
02:21 - just set up the flow of the program all
02:23 - the classes and the function just to
02:25 - remind myself what I need to write and
02:27 - while I'm talking here it's probably
02:28 - good ideas if you guys copy this down so
02:31 - what we're gonna have is we're gonna
02:32 - have two main objects gonna have a cube
02:33 - object and a snake object and our snake
02:35 - object is gonna contain cube objects if
02:38 - that makes sense
02:39 - so each one of those little red I don't
02:42 - know squares was moving around is a cube
02:43 - object and the whole thing is our snake
02:45 - object we're gonna have a few functions
02:47 - here draw a grid redraw window random
02:50 - snack message box and main and this
02:53 - first video I'm just gonna go through
02:55 - and I'm gonna code the two classes
02:56 - pretty well and I'll get this draw a
02:59 - grid function working a little bit of
03:00 - the main loop and then we'll go into
03:02 - like the message box getting more into
03:05 - some of the methods here in these
03:06 - classes in the next few videos so let's
03:09 - get started with our main function here
03:11 - and this is what's gonna be our main
03:13 - loop so essentially what I need for the
03:15 - main loop to start is we need to make a
03:17 - surface so in my game to do this we do
03:19 - when equals high game dot display got
03:23 - set on your story mode and then I'm
03:25 - gonna set it let's see here what don't
03:29 - let the height to be nice a width and
03:32 - height like this oops bad spelling and
03:36 - I'm just going to make a variable here
03:37 - called width equals height equals and
03:40 - we'll just set this to 500 by but I have
03:44 - 500 like so now we need another variable
03:47 - and BSF this as rows can delete this
03:50 - down here it's gonna do something we'll
03:52 - do that later and this is how many rows
03:54 - you're gonna have rows or columns
03:55 - whatever you can set us to whatever you
03:57 - want just make sure it divides 500
03:59 - evenly otherwise you're gonna have like
04:01 - weird-looking rows if you don't even so
04:03 - I'm just gonna set mine to 20 that's
04:05 - what I'm using the other one but if you
04:06 - want to make it harder set it to
04:07 - something like 10 and there won't be as
04:09 - much room for the snake to move around
04:10 - and the games will go faster pretty well
04:13 - okay next what we need to do is we need
04:15 - to set up a snake object so I know that
04:18 - we haven't even created like anything in
04:20 - the snake class yet but I'm gonna do s
04:22 - equals snake and I'm just gonna give it
04:25 - a position
04:25 - so in this case we want to color sari
04:30 - she's gonna be red because red green
04:32 - blue 255 4 red and I'm gonna give a
04:34 - position we're gonna start in the middle
04:35 - so I'm gonna start at 10 10 now let's
04:38 - move into our main loop so I'm just
04:40 - gonna say wow
04:41 - flag create my variable up here like
04:44 - equals true and then we're just gonna
04:49 - start by doing a tie game
04:50 - tick so pygame got time delay 50 like so
04:56 - and that's just gonna delay us I want to
04:58 - say like 25 or 50 milliseconds every
05:01 - time so our program doesn't run too fast
05:04 - I'm also just gonna create this clock
05:08 - tock tick I'm gonna put that at 10 and
05:10 - what I'm going to do is I'm going to
05:11 - create a clock object up here and this
05:14 - is a built-in thing in tie game and what
05:16 - this is gonna do is like splint in just
05:17 - one second once I finish typing it tie
05:19 - game duck clock I believe it is loops
05:22 - time dot clock like so so what this
05:27 - clock tick is actually gonna do is it's
05:30 - gonna make sure that a game doesn't run
05:31 - more than 10 frames per second so that
05:34 - would mean essentially that our snake
05:36 - would be able to move like 10 blocks in
05:39 - one second and again we don't want it to
05:41 - be that fast so that's why we're also
05:43 - delaying like a few milliseconds here if
05:46 - you put this to low then again it's
05:49 - gonna move too low you can play around
05:50 - with the speed this is kind of what I
05:51 - found was the best speed and it may vary
05:54 - depending on what machine you're on it
05:56 - shouldn't it might so you might want to
05:57 - just change these numbers again the
05:59 - lower this goes is the faster it's gonna
06:02 - be and the lower this one goes is the
06:04 - slower it's gonna be so they're kind of
06:06 - inversely proportional like that alright
06:09 - next what are we gonna do here I'm just
06:13 - gonna call redraw window and I butcher
06:19 - that's so bad oops
06:21 - redraw window like so I'm just gonna
06:23 - give it a surface which is in this case
06:24 - gonna be win that we've created up here
06:26 - and for now that's all I'm gonna put in
06:29 - my main loop here and we'll move more
06:32 - into that once I start coding some other
06:34 - stuff okay so now that we have our
06:36 - redraw window being called here I'm
06:38 - gonna go and I'm going to start code
06:39 - a redraw window so what this is
06:42 - essentially gonna do because we first
06:43 - needed to update the display so pygame
06:45 - type display dot update like so and we
06:51 - also need to draw the grid
06:53 - so we're something to draw a grid we're
06:56 - gonna pass it on same surface that we
06:57 - were given and move on for that we're
07:00 - also gonna fill the screen so when dot
07:03 - fill in this case I'm just gonna use
07:06 - block so it's a zero zero zero and there
07:09 - we are that's all we need to do right
07:10 - now but essentially we're also going to
07:12 - need to draw the snake we're gonna need
07:14 - to draw a few other things on the screen
07:15 - that will we'll get to later
07:17 - okay so draw a grid let's move into this
07:19 - one now what we need to do here is a set
07:21 - draw a grid which is pretty easy to do
07:25 - so what we do is we're given rows and
07:28 - surface so it's probably a good idea if
07:30 - I actually pass in the rows on the
07:32 - surface so I'm just gonna global them
07:34 - here so that I can reference them I
07:36 - think this is going to work well the
07:37 - global rows and width like that and here
07:43 - we also need to make these global just
07:45 - because I don't have passed them and
07:46 - every time I draw a grid we're gonna say
07:48 - wit and rows and this height variable is
07:53 - actually not necessary because we are
07:56 - just gonna draw a square like a square
07:59 - surface every time so we can just make
08:01 - this the same we don't need two
08:02 - variables for width and height do it or
08:04 - gonna contain the same number anyway so
08:05 - global width and rows I go here draw a
08:08 - grid given width Rose and surface so now
08:11 - we're gonna put in well first we're
08:14 - gonna put our rows right oops
08:16 - width row and surface like that okay so
08:22 - that should be working now in here what
08:24 - we first need to do when we're drawing a
08:26 - grid is we want to figure out how big
08:30 - each square in the grid is going to be
08:32 - because what we're gonna do is we're
08:34 - going to just draw lines going down and
08:37 - across but we need to figure out where
08:38 - to draw those lines so we have to figure
08:40 - out kind of like the gap between each of
08:42 - the lines so the way we do that I'm just
08:44 - going to create a variable here a size
08:46 - between is equal to our width integer
08:49 - divided by our rows
08:50 - this is just so that we don't get like
08:52 - large decimal numbers because that we
08:54 - cannot pass into our draw line method in
08:58 - a in Python okay so now I'm just gonna
09:00 - create X variable and Y variable and I'm
09:04 - gonna set these to zero I'll just say
09:05 - for L in range and this is just stating
09:10 - for Lion pretty well and rows like that
09:12 - now what I'm gonna do is I'm going to
09:14 - increment my X by the size between I'm
09:18 - gonna increment my Y by the same so y
09:21 - equals y plus size between and get rid
09:27 - of one of the spaces here know what okay
09:30 - there we go and now we're simply just
09:32 - gonna draw two lines so to draw a line
09:34 - in pygame
09:35 - all we have to do is tie game dot draw
09:38 - dot line and the arguments of that takes
09:41 - is a surface we need a color in this
09:44 - case is gonna be white so we do 255 255
09:47 - 255 for white we're gonna draw at X 0
09:51 - comma X W and I'll go through this in
09:54 - just one second what this does and I'm
09:57 - just gonna copy this and draw one more
09:58 - and then explain how this is gonna work
10:00 - pretty well okay so now we need 0 Y and
10:07 - W walk like so okay so what this is
10:11 - gonna do is this is going to draw two
10:12 - lines for us every loop of this for loop
10:15 - and these arguments here is the start
10:17 - position of the line and the end
10:18 - position of the line so the first line
10:20 - that we want to draw is going horizontal
10:22 - which means we don't want to change the
10:24 - Y value at all so what we need to do is
10:27 - we need to find the X and then we're
10:29 - gonna put Y at 0 because we're gonna be
10:32 - at the top I think that's right at least
10:34 - oh sorry this list line is drop being
10:36 - drawn down not being drawn to the right
10:38 - I was getting confuse it okay so we're
10:39 - gonna change the X but we're going to
10:41 - keep the y at 0 and then we're gonna
10:44 - stay at that same X and we're gonna keep
10:46 - the Y at the width of the screen so that
10:48 - we're going far enough down and then
10:50 - same thing here this one is going
10:52 - horizontal excuse me I mess that up
10:53 - before so our X is always going to stay
10:55 - at 0 and our Y is gonna be what's
10:57 - changing as we draw a horizontal lines
10:59 - across the screen I hope that makes
11:01 - sense stereo
11:02 - how that works anyways I'm gonna move on
11:04 - from that and that's all we need for the
11:05 - drug grid function so let's just go
11:08 - ahead I probably made a mistake here but
11:10 - we'll run the program to see if
11:11 - everything's working again our name Wynn
11:14 - is not defined when don't fill ah so
11:16 - I've called this when one really needs
11:18 - to be surface like that so let's try it
11:22 - out and there we go we get a nice little
11:23 - grid on our screen like so twenty by
11:26 - twenty grid there we are so now let's
11:29 - move into another function or actually
11:32 - let's start coding on the classes here
11:34 - so like I was talking about before we're
11:36 - gonna have a snake object which is going
11:37 - to contain a bunch of cube objects so
11:40 - essentially what we're gonna do is we're
11:41 - gonna have a list of cubes and that's
11:43 - gonna be known as the snake body so
11:44 - let's go ahead and write that in now
11:46 - what I want to do for that is just
11:48 - create a list so we're just going to say
11:50 - your body is equal to and then a blank
11:53 - list I'm also just well we're already up
11:55 - here in creating a class variable I'm
11:56 - gonna create turns is equal to and it's
12:00 - just going to be this set of squiggly
12:02 - brackets here that will we'll get into
12:03 - in a bit okay so now that we're already
12:06 - in the snake function what we need to do
12:09 - is we just need to define our parameters
12:12 - here that we're passed in so we're just
12:13 - going to say self dot color equals color
12:16 - set a self dot head equals cube which
12:22 - I'll get into in a second given the
12:24 - position say self thought body dot
12:27 - append our head self dot head like this
12:31 - so what we're doing here now is we're
12:33 - saying okay so the head of our snake
12:34 - which is going to be important because
12:35 - we need to know where that is at all
12:37 - times so we can move accordingly is
12:38 - equal to a cube at the given position
12:41 - and the given position is what we pass
12:43 - in here and it's like the starting
12:45 - position of our snake or we could create
12:47 - a new snake like we'd have multiple
12:48 - snakes moving around and anyways that's
12:50 - the position now we're saying we're
12:52 - gonna append to the body this head so
12:55 - now this is in our list here and then we
12:59 - can go through that list we can draw
13:00 - things we can move it we can check
13:01 - things we want all of our cubes to be
13:03 - ordered within this list so that's why
13:05 - I'm putting that in first now I'm just
13:07 - gonna give this one which is called turn
13:10 - X is equal to zero and turn Y which is
13:14 - equal to what
13:16 - so what this is going to do is we have a
13:18 - direction for X and a direction for Y
13:20 - for moving our snake so obviously these
13:23 - are going to be a value like negative 1
13:25 - 1 or 0 and that's gonna be the same for
13:29 - Y and X if Y or X is equal to 1 negative
13:32 - 1 then the other one is gonna be equal
13:33 - to 0 because you can only be moving in
13:35 - one direction at the same time and this
13:37 - is just going to keep track of what
13:39 - direction we're moving in and we'll use
13:40 - this in the next function that we're
13:42 - gonna code which is our move function so
13:44 - moving is pretty straight forward at
13:47 - least in terms of just if you have one
13:49 - object moving around the screen getting
13:51 - it to go left straight right but when
13:52 - you have the snake object it has to turn
13:55 - at certain points so when I click left
13:58 - the rest of the snake is still moving
14:00 - forward once it reaches the point where
14:02 - the head turned left then it has to turn
14:04 - left so that's where things can get a
14:05 - bit complicated
14:07 - [Music]