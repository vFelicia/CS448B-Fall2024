00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video i'm
00:13 - going to show you why random numbers are
00:15 - not so random what i mean by that is
00:18 - that random numbers in most computer
00:20 - programming languages are actually
00:22 - generated deterministically that means
00:24 - that you can predict exactly what
00:26 - numbers will be generated randomly from
00:29 - whatever generates the random number and
00:31 - you can actually control it as well now
00:33 - i'm going to show you a few examples
00:34 - here in python but you can likely try
00:37 - this in other programming languages as
00:38 - well and you'll see that the sequence
00:40 - you're getting is not quite random now
00:43 - there is a lot of techniques used to
00:44 - make it seem random but really what's
00:47 - actually used behind the hood of python
00:49 - and other languages when generating
00:50 - random numbers is a pseudo random number
00:53 - generator so that means it's not a real
00:55 - random number generator and it's not
00:58 - truly truly red alright so with that
01:00 - said let's dive into the video but first
01:02 - i need to talk to you about something
01:03 - that's not random which is the sponsor
01:05 - of this video before we get started i
01:06 - need to thank the sponsor of this video
01:08 - which is alco expert algo expert is the
01:11 - best platform to use from preparing for
01:13 - your software engineering coding
01:14 - interviews and has the highest quality
01:16 - coding interview practice questions with
01:18 - 160 practice questions detailed
01:21 - solutions in nine of the most popular
01:23 - programming languages a feature-packed
01:25 - browser-based coding environment
01:27 - extensive test suites and conceptual
01:29 - overviews and code walk-throughs for
01:30 - each and every problem algo expert is
01:33 - the best resource to use to ace your
01:34 - coding interviews algoexpert also has a
01:37 - data structures crash course coding
01:39 - interview assessments and a mock
01:40 - interviews feature i can highly
01:42 - recommend algo expert as a former
01:44 - customer myself and now an official
01:46 - instructor on the platform get started
01:48 - using algo expert today by clicking the
01:50 - link in the description and using the
01:52 - code tech with tim for a discount on the
01:54 - platform all right so let's go ahead and
01:56 - dive in now first thing i want to
01:59 - mention here is that if you want to read
02:00 - more about this i will leave a link in
02:02 - the description to the random module
02:05 - from python documentation so you
02:07 - actually see it says generate pseudo
02:09 - random numbers the term pseudo tells you
02:11 - these are not truly random numbers and
02:14 - well you can go through here and this
02:15 - pretty much explains what i'm going to
02:16 - recap here in this video
02:19 - anyways let's go back to this screen and
02:21 - let me show you what i mean by being
02:23 - able to generate the same sequence of
02:25 - random numbers and why the numbers are
02:27 - not quite random so i'm in python so i'm
02:29 - going to import the random module this
02:31 - has a bunch of functions allowing you to
02:33 - generate distributions random numbers
02:35 - random choices of elements all kinds of
02:37 - stuff like that regardless what i will
02:40 - do is say 4 underscore in range and then
02:43 - i'm going to go with 10
02:45 - and i'm just going to print out
02:47 - random
02:48 - dot rand range
02:50 - and we go with 0 to 10. so this would
02:53 - generate a random number in the range of
02:55 - 0 to 10 but it won't give us 10. so to
02:57 - go 0 to 9 10 is kind of the upper bound
03:00 - which is not included anyways let's just
03:02 - run this
03:03 - and notice here this is the sequence
03:04 - that we get so i'm going to copy this
03:06 - sequence
03:07 - and i'm going to run this script
03:09 - one more time and just show you that we
03:11 - don't get the same sequence again right
03:13 - so this sequence clearly does not match
03:14 - this sequence and so at first glance it
03:16 - seems like okay it is actually giving me
03:18 - a random number however i'm going to
03:20 - show you that i can make it so it gives
03:22 - me the exact same sequence and the way
03:25 - i'm going to do that is by using this
03:27 - method called seed so i'm going to say
03:30 - random.seed i'm going to pass a seed of
03:32 - 1. now some of you may already know
03:34 - what's going to happen here but let's
03:36 - clear this out and let's run this
03:38 - so this is the sequence that we get of
03:40 - 10 numbers okay i'm going to put it
03:42 - inside of quotation marks like this and
03:46 - now i'm gonna run it again
03:48 - now notice when i run it again i get the
03:49 - exact same sequence now i'm not lying to
03:51 - you i actually am re-running the code
03:53 - you can see that it's flashing and i'm
03:55 - re-running the code a bunch of times and
03:57 - every single time i rerun it i get the
03:59 - exact same sequence
04:01 - why is that well the reason why i'm
04:03 - getting the same sequence is because i
04:05 - have the same seed so you can actually
04:07 - control the random sequence that you get
04:10 - based on a seed
04:12 - and the reason why that's the case is
04:13 - the seed is actually the starting value
04:16 - of generating random numbers and the way
04:18 - that a pseudo random number generator
04:20 - works is it starts at a specific value
04:23 - and performs deterministic changes to
04:26 - that value to give you some random value
04:29 - and so whenever you're starting at the
04:30 - same seed you always get the exact same
04:33 - random sequence now this might actually
04:35 - sound really familiar especially if
04:36 - you've ever played the game minecraft a
04:38 - lot of you have probably played
04:39 - minecraft and you've seen that you can
04:41 - import or give a seed and every time you
04:44 - use the same seed you get the exact same
04:46 - map and this works the exact same way
04:48 - you give a seed the seed is what
04:51 - generates the actual random sequence
04:52 - really it's kind of the starting point
04:54 - of it and so if you put in the same seed
04:55 - somewhere else you get the exact same
04:58 - map
04:59 - same thing here when we're generating
05:00 - random numbers in python now let's just
05:02 - do one more example let me change the
05:04 - seed to 2. now notice when i change it
05:06 - to 2 we get an entirely different
05:07 - sequence but if i keep running this i
05:10 - get the exact same sequence
05:12 - so how does the computer actually
05:14 - generate a random number then what does
05:16 - it use for this seed if it can't
05:18 - generate something truly random how does
05:20 - it pick something random for the seed
05:22 - well the truth is what's actually used
05:24 - for the seed by default is the system
05:26 - time so whatever the current time is
05:28 - when you run the code is what's passed
05:30 - to this seed so that it's always
05:32 - different the time is always different
05:34 - but again if you ran the code at the
05:36 - exact same system time like to the exact
05:38 - same millisecond
05:40 - you would get the exact same random
05:41 - sequence all right so now that we've
05:43 - looked at that let's actually look at an
05:45 - example where we use the system time as
05:47 - a random seed now this will kind of
05:49 - simulate what goes on behind the scenes
05:51 - just so you can get an idea of what the
05:52 - random module actually does when it's
05:55 - giving you random numbers so let's do
05:57 - this let's import time
06:00 - now to get the system time in python you
06:02 - do time dot time
06:03 - now this doesn't give you like the date
06:06 - time this gives you i believe the number
06:08 - of seconds past the specific date so
06:11 - there's some date in which they like
06:13 - just picked arbitrarily i guess to do
06:15 - this from but it's something like the
06:17 - number of seconds past like march 2nd on
06:20 - 1979 i'm completely making up that
06:22 - number or that date there but it's the
06:24 - number of seconds past a specific date
06:26 - so if i print this out and i go print
06:29 - time.time like this you'll see that we
06:31 - get this right so just like
06:33 - a huge number it's not telling me you
06:34 - know it's january or february or
06:36 - whatever the month is just giving me a
06:38 - number anyways if i use time.time
06:41 - i can put it like this
06:42 - now every single time i run the code
06:45 - let's just get rid of this here
06:47 - i'm going to get a different sequence so
06:48 - i get a different sequence because the
06:50 - seed is different and the time is
06:52 - constantly changing so that's the way
06:54 - that python actually does this if you
06:56 - don't manually set the seed of the
06:57 - random generator then it just uses the
07:00 - time and obviously we don't need to set
07:02 - this
07:02 - if we just do this right it continues
07:05 - using the time
07:06 - perfect so that's what happens when you
07:07 - use the system type so now that we've
07:09 - talked about this i'm just going to take
07:10 - a minute to discuss how do you actually
07:13 - generate something that's truly random
07:15 - because in a lot of cases this is no
07:17 - good using a pseudo random number
07:20 - generator can actually lead to a lot of
07:22 - security issues and this is really
07:24 - important especially if you're talking
07:25 - about something like cryptography which
07:27 - relies on the fact that random numbers
07:29 - are not guessable they're not
07:30 - predictable now in this instance it is
07:32 - completely predictable and so if you
07:34 - know the starting point of the sequence
07:35 - you're able to generate the random
07:37 - sequence you can do the entire thing to
07:40 - infinity as long as you know the
07:41 - starting point so when you're actually
07:44 - trying to generate something random you
07:46 - need to pick some external source from
07:48 - outside of the computer to use as your
07:51 - random seed or to use to generate
07:54 - randomness so an example of this which
07:56 - seems really extreme is actually
07:58 - radioactive decay so in a lot of
08:00 - instances when you're trying to generate
08:02 - a super random number a real random
08:04 - number you actually will monitor an atom
08:07 - and check for the radioactive decay of
08:10 - that atom and that is something that is
08:13 - random in the universe you can't predict
08:15 - when the decay is going to be you can
08:17 - predict it to you know a minute or to
08:19 - some level of precision but you don't
08:21 - know exactly when it's going to occur so
08:23 - a lot of computer systems that need to
08:24 - generate truly random numbers will
08:27 - observe something random in the universe
08:29 - like an atom and look for decay in that
08:31 - atom or more naively they'll use
08:34 - something like a mouse so as my mouse is
08:35 - moving around the screen this is a
08:37 - completely random pattern you can't
08:38 - predict how i'm moving the mouse and so
08:40 - that's something you could use to
08:41 - generate randomness as well or like the
08:44 - sequence in which i hit keys on the
08:46 - keyboard or the timing for that all
08:48 - kinds of things like that can be used to
08:49 - generate randomness and as a seat now
08:52 - i'm no expert on this topic i'm just
08:54 - giving you you know the little bit of
08:55 - knowledge i have from reading about this
08:57 - for a few days but i thought this was
08:59 - interesting and i figured i would share
09:00 - with you in case any of you find it
09:02 - interesting as well with that said if
09:04 - you enjoyed the video make sure to leave
09:05 - a like subscribe to the channel and i
09:06 - will see you in another one
09:10 - [Music]