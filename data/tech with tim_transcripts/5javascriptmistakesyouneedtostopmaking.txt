00:00 - if you've ever written any code in
00:01 - JavaScript you might have noticed that
00:03 - it's a little bit of a strange language
00:04 - and there's a lot of unexpected behavior
00:07 - and weird things that go on now this
00:09 - leads many beginner and Junior
00:10 - developers to making a lot of mistakes
00:12 - in JavaScript simply because they don't
00:15 - know about these weird features so in
00:17 - this video I'm going to share with you
00:18 - the top beginner JavaScript mistakes and
00:21 - how you can fix them with that said
00:23 - let's dive in so first thing to mention
00:25 - is that if you want to get better at
00:26 - programming and become a software
00:28 - engineer I do have a course it's called
00:30 - programmingexpert.ao I'll leave a link
00:31 - to it in the description and if you're
00:33 - interested in blockchain or web3
00:34 - technology I have a course for that as
00:36 - well it's called blockchain expert again
00:38 - that will be in the description now
00:40 - let's dive into mistake number one so
00:43 - the first mistake that many JavaScript
00:44 - developers make is misunderstanding the
00:47 - use of the double or the loose and the
00:49 - triple or the strict equality operator
00:51 - so in many programming languages you
00:53 - only have access to the double equal
00:55 - sign which tells you if two objects are
00:57 - equivalent however in JavaScript we have
00:59 - the triple equal sign which tells you if
01:02 - they are strictly equivalent now that
01:04 - means that a lot of people mix this up
01:05 - and they use both of these operators
01:07 - kind of willy-nilly without
01:08 - understanding what the difference is you
01:11 - should always use the triple equal sign
01:13 - here the strict equality operator unless
01:16 - you have a reason to specifically use
01:18 - the double equal sign and that's what
01:19 - I'm going to talk about now so notice
01:21 - here that I have my number one equal to
01:23 - the number 42 and number two equal to
01:25 - the string 42. now these are different
01:28 - objects they're different types and
01:29 - really they are not equivalent however
01:31 - when I use the double equal sign or the
01:34 - loose equality operator and I run my
01:36 - code notice that it says that they are
01:38 - equivalent now that's because the
01:40 - elusive quality operator is going to
01:41 - convert the first number here into a
01:43 - string and then compare the two strings
01:45 - against each other to tell me that this
01:48 - is actually true or equivalent now this
01:50 - works with other types as well and can
01:52 - give you some strange Behavior if you're
01:53 - not careful for example if I compare
01:56 - null
01:58 - and undefined using the loose equality
02:00 - operator notice we get true if I compare
02:04 - something like false and then the string
02:07 - false here
02:08 - notice that we get false so it's not
02:10 - necessarily intuitive right in this case
02:12 - you would have thought oh yeah that's
02:13 - going to tell me it's true because it'll
02:15 - just convert the Boolean to a string or
02:17 - vice versa but it doesn't now let's look
02:19 - what happens if we do it in the other
02:20 - order just for a sanity check here if we
02:22 - go false double equal to the string
02:24 - false then we get false as well so just
02:26 - showing you there's a very strange
02:27 - Behavior now continuing I can say false
02:30 - is double equal to undefined okay so
02:32 - that's equal to false what about false
02:34 - equal to null okay so that's false so
02:37 - not necessarily intuitive gives you a
02:39 - lot of weird results and that's why I
02:41 - wanted to show you here that when you're
02:42 - using this double equal sign is checking
02:44 - for loose equality where it's going to
02:46 - attempt to convert the different types
02:48 - into one another so instead of using
02:50 - that you should use the triple equal
02:51 - sign like this now when you use the
02:54 - triple equal sign this is a strict
02:55 - equality which means that you're only
02:57 - going to say that something is equal if
02:59 - it is the same type so in this instance
03:02 - when I use the triple equal sign if I go
03:04 - and say node and then solution.js you
03:07 - can see that it says using triple equals
03:09 - num1 and num2 are not equal and then we
03:12 - could repeat all of those examples that
03:13 - I showed you with the triple equal sign
03:14 - and you see that they would not be
03:16 - equivalent if they were not the same
03:18 - type alright so the next mistake that
03:20 - many JavaScript developers make is
03:22 - misusing the VAR let and const keywords
03:25 - or using them synonymously when they
03:27 - actually do have different use cases now
03:29 - when we're declaring variables in
03:31 - JavaScript as I just said there's three
03:32 - different ways to do this we can use the
03:34 - bar keyword the let keyword or the const
03:36 - keyword now a const is going to be used
03:38 - when we're declaring a constant value
03:40 - that cannot change let is going to be
03:42 - used when we're declaring something that
03:44 - can change and then VAR will do the same
03:46 - it will declare a variable that could
03:48 - change however VAR and let are not the
03:50 - exact same they're not synonymous they
03:52 - work differently and the way that they
03:54 - differ is in the scope in which they
03:56 - Define a variable a lot of people don't
03:58 - know this but you cannot just treat VAR
04:00 - the exact same as using let so have a
04:03 - look at this example pause the video if
04:04 - you want to and kind of read through if
04:06 - you can understand but I'll walk you
04:07 - through it so you see that we have a
04:08 - function here and inside of the function
04:10 - I start by declaring a variable using
04:12 - the VAR keyword now when I do this we're
04:15 - actually going to declare a variable
04:16 - within this scope okay the scope is
04:19 - essentially going to be the nearest
04:21 - function that we're inside of now
04:23 - there's some other weird edge cases
04:24 - there but in this case it's kind of the
04:26 - nearest function that we're enclosed in
04:28 - so in this case it is example okay then
04:30 - we say if true so we're just executing
04:32 - this if statement here to create a new
04:33 - block we declare a another variable with
04:36 - the same name as this using the VAR
04:38 - keyword now obviously here when I go to
04:40 - print this out we're going to print out
04:41 - the value of 2 which is this new
04:43 - variable that was declared however when
04:46 - I come outside of the block here notice
04:48 - that I will be printing 2 as well when
04:51 - you might have thought that I would have
04:52 - printed the value of 1. now the reason
04:54 - we're getting 2 here is that when I use
04:56 - this VAR keyword it doesn't declare this
04:58 - variable inside of the block it declares
05:01 - it inside of the current scope so the
05:03 - block is the if statement the scope is
05:04 - the function so it actually overrides
05:07 - the value of the variable that existed
05:09 - before it in the current scope to be
05:10 - equal to 2 which is different than what
05:13 - the let keyword does so now if I come
05:15 - and have a look at using let you can see
05:17 - that we Define let equal to one we say
05:19 - if true then we Define it equal to 2 and
05:21 - then we print out what the value is
05:23 - inside of this if statement Block in
05:26 - this case it's 2. however when we exit
05:28 - the Block it's equal to one now it's
05:31 - equal to one because let only defines
05:33 - the variable within the current block
05:35 - not within the current scope so this
05:38 - variable only accessible and usable
05:40 - inside of this if statement block and
05:42 - then outside we revert back to using
05:44 - this one because this statement did not
05:47 - modify or override this variable
05:49 - hopefully that makes a little bit of
05:50 - sense VAR is the current scope which is
05:53 - the function let is the current block
05:55 - which would be something like an if
05:56 - statement for Loop Etc
05:58 - then we have const now when we use cons
06:01 - it's going to do the current block as
06:03 - well so exact same as let so you can see
06:06 - here we say it's equal to one we come in
06:08 - and we Define the constant equal to 2.
06:10 - inside the Block it's equal to 2 outside
06:12 - of the block it is equal to one make
06:14 - sure you understand those important
06:16 - differences and you use VAR let and
06:18 - const accordingly based on that so the
06:21 - next mistake that many JavaScript
06:22 - developers make is misusing mutable and
06:24 - immutable types or not understanding the
06:27 - difference now in JavaScript we have
06:29 - this concept of mutability this means
06:30 - that some objects are mutable meaning
06:32 - they can change and some are immutable
06:34 - meaning they cannot change now this is a
06:37 - very important concept to understand
06:38 - especially when you're working with
06:40 - objects or nested structures so before I
06:42 - actually dive into this example I'm just
06:44 - going to illustrate a immutable objects
06:46 - you can see the standard and typically
06:48 - expected Behavior
06:50 - so let's have a constant x equal to one
06:52 - and a constant Y is equal to X and then
06:55 - I say something actually let's make
06:57 - these let's so they can change their
06:59 - values
07:00 - like
07:01 - X
07:03 - plus equals one
07:04 - and Y plus equals two
07:07 - now in this case what happens here in
07:09 - this example is we Define x equal to one
07:11 - now one is an immutable object that
07:14 - means once we Define it it cannot change
07:16 - and then we say Y is equal to X now that
07:19 - means that we are going to essentially
07:21 - copy whatever the value inside of X was
07:23 - into y so now Y is equal to 1 as well
07:27 - however it's a different one than the
07:30 - one here so now if I say X plus equals 1
07:32 - x becomes equal to 2 and then if I say y
07:35 - plus equals 2 y becomes equal to 3. me
07:38 - changing X or Y does not affect the
07:40 - other variable even though I had
07:42 - something like let Y equals X I know
07:45 - this seems completely trivial but in
07:46 - some cases you might actually think that
07:48 - because I said Y equals X now if I
07:51 - change y it affects X and if I change X
07:53 - it affects y but that's not the case
07:55 - because this is an immutable object so
07:58 - in JavaScript types like booleans
08:00 - numbers strings these are immutable
08:03 - meaning once we Define them they're not
08:05 - going to change and if I assign them to
08:07 - to another variable so something like Y
08:09 - equals X now Y is a copy of that object
08:13 - now this is different when we look at
08:15 - immutable objects like arrays or objects
08:17 - so if I have something like an array
08:19 - here and then I say let Y equals X and
08:22 - then I do something like y dot push one
08:25 - what actually happens is both X and Y
08:28 - now are the array that contains one
08:31 - inside of them now the reason for that
08:33 - is when I'm storing an array or any
08:34 - mutable object I'm actually storing
08:36 - what's known as a reference to that
08:38 - object so when I act on the variable I'm
08:41 - acting on the reference which then
08:43 - modifies the underlying array which can
08:45 - be pointed to by multiple different
08:46 - variables so here x is essentially this
08:49 - x goes to a reference
08:52 - which goes to this array and then when I
08:55 - say Y is equal to x what I do is I copy
08:58 - the reference to that same array so now
09:01 - if I change X that affects y because I'm
09:04 - changing what the reference points to Y
09:06 - was not storing a copy of X it was
09:09 - storing a reference to X meaning any
09:12 - change to X affects Y and any change to
09:14 - Y affects X because they are pointing to
09:16 - the same underlying object so this can
09:19 - be better Illustrated with the example I
09:21 - have on my screen you can see I have a
09:23 - person object with a name age and
09:25 - address now I create a new object using
09:28 - the original person object so I say
09:29 - updated person is equal to person then
09:31 - what I do is I change the name of my
09:34 - updated person to be Jane Doe and I
09:36 - change the address dot City to be equal
09:38 - to Los Angeles so now if I open up my
09:41 - terminal and run my code notice again
09:42 - I'm printing the person and the updated
09:44 - person that I actually get the exact
09:46 - same object in the exact same data so
09:49 - again keep in mind I said updated person
09:51 - is equal to this person an object you
09:53 - might assume that makes a copy of the
09:54 - person object but it doesn't it makes a
09:57 - reference to the original object so now
10:00 - when I do things like update the name
10:02 - or update the city of the address what
10:04 - that does is that actually affects the
10:07 - original object which is both of these
10:09 - variables so updated person and person
10:11 - are both pointing to the same object
10:13 - hence why when I make a change to one it
10:15 - affects the other so how you can avoid
10:17 - this well you can make a deep copy of
10:20 - the actual object now first of all I
10:22 - just want to show you
10:23 - that if I do something like dot dot dot
10:26 - person using the spread operator what
10:28 - this will do is copy all of the
10:30 - properties of my original person so now
10:33 - if I run this we're going to get a
10:34 - slightly different result where you can
10:36 - see that I get a different name so I
10:38 - have John Doe which was the original
10:39 - name and then I have Jane Doe however
10:42 - notice that the city in my person is
10:45 - still changed to Los Angeles so again
10:47 - just have a look here we update the name
10:48 - and we update the city of the address so
10:51 - in this case I retained my original name
10:54 - in the person object but the city still
10:57 - changed in the address now the reason
10:59 - for that is when I do this copy
11:01 - operation this is what's known as a
11:02 - shallow copy it's copying all of the
11:05 - properties however since one of the
11:07 - properties is an object it's essentially
11:09 - copying the reference to the object
11:11 - associated with that property now that
11:14 - means when I change something on that
11:17 - object that wasn't deeply copied it was
11:19 - just shallow copied it's going to affect
11:21 - the underlying object which is nested
11:23 - inside of the person object I know that
11:26 - seems a little bit confusing feel free
11:27 - to pause the video and kind of read
11:28 - through this but you need to understand
11:29 - what happens when you're working with
11:31 - these mutable types so to fix this we'll
11:34 - have a look at our solution here and you
11:35 - can see that what we're actually doing
11:37 - now is we're using a form of a deep copy
11:39 - now there's better ways to do a deep
11:41 - copy in JavaScript won't get into that
11:43 - right now essentially the way we deep
11:45 - copy everything that exists inside of
11:47 - this person including the nested object
11:50 - sorry
11:50 - is we say json.parse and then
11:53 - json.stringify the person so we convert
11:55 - the person object into a string which is
11:57 - an immutable type and then we parse that
12:00 - string as an object and that gives us a
12:03 - brand new object which is a deep copy an
12:05 - actual copy not just an alias or a
12:07 - reference to this object so now if I
12:10 - come here and I run my solution so let's
12:14 - do that you can see that our address
12:16 - does not change in the original object
12:18 - all right the next mistake that many
12:21 - JavaScript developers make is not
12:23 - understanding the difference between the
12:25 - context of the this keyword inside of
12:27 - Arrow functions and regular functions
12:30 - let's have a look at this example so you
12:31 - can see what I mean so first of all when
12:34 - we Define a function this is different
12:36 - than defining an error function a lot of
12:38 - people just use them synonymously and
12:40 - they think that an arrow function works
12:42 - the exact same as a regular function now
12:44 - in a lot of scenarios it does but if you
12:46 - start using this keyword so the one
12:48 - that's in Orange here it works
12:50 - differently so if we have a look at this
12:51 - example we have a function this is kind
12:53 - of a factory for a car object here and
12:56 - what we do is we return a make model and
12:58 - year for the car and then we have two
13:00 - functions one that's regular function
13:02 - and one that's an arrow function
13:03 - associated with these properties now
13:05 - they do the exact same thing just one is
13:07 - a regular function one's an arrow
13:09 - function now if you look at all of the
13:11 - comments here you can see that when we
13:12 - use the regular function we get the
13:14 - output we expected right we get the make
13:16 - of the car the model of the car and the
13:18 - year of the car and that's because when
13:20 - we use a regular function this is bound
13:22 - to whatever called the function so when
13:25 - I call the function using my car this
13:27 - references the car that I called it on
13:30 - which has the make modeling year on it
13:32 - however when we use an arrow function
13:34 - this is actually going to inherit
13:37 - whatever the current this context is
13:40 - where it was defined I'm going to show
13:42 - you an example of that in one second but
13:44 - what that means is that since this was
13:45 - defined inside of this function it's
13:48 - going to inherit this context from this
13:50 - function now this context of this
13:53 - function is currently the global scope
13:55 - which means it's going to reference
13:57 - Global I know this seems a little bit
13:59 - strange but essentially we're inheriting
14:02 - this context whereas here the context is
14:04 - different based on what invoked or
14:06 - called the function so just to prove to
14:08 - you that I'm not making this up let's
14:10 - change into directory 4 and let's go
14:13 - node and then mistake.js and you can see
14:16 - that we get what we expected and then
14:18 - when we use the arrow function we get
14:19 - undefined values so now let's have a
14:22 - look at the solution and you'll see what
14:24 - I mean with the arrow functions so when
14:26 - we have a look at our Arrow function now
14:28 - you can see that what this is actually
14:30 - going to do is inherit this context from
14:33 - where it was defined
14:35 - so go ahead pause the video if you want
14:37 - to understand this more but we have an
14:38 - object inside of the object we have a
14:40 - name property and then we have a
14:42 - property that is a regular function then
14:45 - inside of that function we Define
14:47 - another function so now the arrow
14:49 - function inside of this function
14:51 - inherits this from the function it's
14:54 - defined inside of so now when I call say
14:57 - hello from my object this Arrow
15:00 - functions this is going to be whatever
15:03 - this is from the function it was defined
15:05 - inside of very hard to explain because
15:07 - this is a word that I used to explain
15:09 - and it's also the actual word that I'm
15:12 - talking about but hopefully this makes a
15:14 - bit of sense so if I run this now and I
15:16 - say node and then solution.js it says
15:19 - hello from John and then the arrow
15:21 - function says hello from John as well
15:22 - again that's because the context of this
15:25 - keyword in the arrow function inherits
15:26 - from wherever it's defined in this case
15:28 - it's defined inside of a function that
15:30 - is going to have this context be equal
15:32 - to whatever object called it so when I
15:34 - reference this Dot name here it's
15:36 - referencing the object that called it
15:37 - which has the name John so moving on to
15:40 - our last mistake and this is mishandling
15:42 - asynchronous code so let's have a look
15:44 - at this example here we have a fetch
15:46 - data function now this function is
15:48 - essentially mimicking the result of an
15:50 - API call so let's say use the fetch
15:52 - function and you're attempting to get
15:53 - some data from an API that's what this
15:55 - is attempting to mimic okay so what
15:58 - we're doing is we're returning a new
15:59 - promise the promise has a resolve and a
16:01 - reject function and the promise is just
16:03 - to set timeout that waits for one second
16:05 - before it calls this resolve callback
16:07 - function don't worry too much about this
16:09 - if you don't understand how it works
16:10 - essentially what we're doing is we are
16:12 - triggering the dot then if you're
16:13 - familiar with that in JavaScript after
16:16 - one second
16:17 - so what I'm doing here now incorrectly
16:19 - is I'm saying okay I want to get the
16:20 - data from this function I want to
16:22 - retrieve this from my API so I say data
16:25 - it's equal to fetch data and then I
16:27 - print out data and then whatever the
16:29 - result of data is now the mistake here
16:31 - is that I didn't wait for this data to
16:34 - be returned so what happened is I get
16:36 - the result promise pending let me show
16:39 - this to you if we go into directory five
16:41 - and then we say node
16:44 - mistake.js you can see that I get
16:46 - promise pending the reason I'm getting
16:48 - that is I essentially immediately print
16:50 - whatever the result of data is before I
16:52 - wait for this promise to resolve so at
16:55 - that point it's just a promise that is
16:57 - pending data so how am I going to fix
16:59 - this well if I go to my solution here
17:01 - you can see that now we have two ways to
17:03 - actually handle this correctly the first
17:05 - way is to use the dot then and the dot
17:07 - catch and the second way is to use async
17:09 - and await so let's start with DOT then
17:11 - and Dot catch now what we can do is on a
17:14 - promise we can use this dot then
17:15 - function What DOT then we'll do is
17:18 - trigger as soon as the promise resolves
17:20 - so as soon as this resolve function is
17:22 - called internally from the promise a lot
17:24 - of times you don't actually see that as
17:25 - happening behind the scenes then this
17:27 - will be triggered and then you can
17:29 - actually go ahead and print the data
17:30 - this is essentially saying hey wait for
17:32 - the problems to resolve once it resolves
17:34 - run this function and then execute this
17:36 - code perfectly fine then we have our
17:39 - catch and the catch is going to run when
17:41 - the promise resolves to an error so when
17:43 - the promise rejects really and that's
17:44 - pretty much when it runs right so if an
17:45 - error occurs then you go into dot catch
17:47 - if an error doesn't occur and the
17:49 - promise resolves correctly you're going
17:50 - into dot then now one thing to note here
17:53 - is that when you do this you're not
17:55 - going to have blocking code what that
17:57 - means is that if I go down here and I
17:59 - say something like const num is equal to
18:01 - one this line is going to execute
18:04 - immediately it's not going to wait for
18:06 - this promise to resolve so that's kind
18:08 - of nice because what you can do is say
18:09 - Okay I want to do this kind of stuff
18:11 - once this promise resolves but I don't
18:13 - want to block my code I want to continue
18:15 - going down from there so that's what
18:17 - happens we continue executing the rest
18:19 - of the code in the function and then as
18:21 - soon as the promise resolves we'll
18:23 - actually print out whatever the result
18:24 - is here okay so that's way one using dot
18:27 - then and Dot catch way two is to use
18:29 - async and wait
18:31 - so inside of here I have a try catch
18:33 - block now I'm using a try catch block
18:35 - because there could be an error that
18:36 - occurs that I actually want to handle
18:38 - with my promise anyways what I do is I
18:40 - say const data is equal to a weight now
18:43 - when I say a weight this is a blocking
18:45 - keyword and what this means is I'm going
18:47 - to wait for the promise to resolve
18:49 - that's exactly what happens here now the
18:51 - reason why I needed to put an async here
18:53 - before my function is because to be able
18:55 - to use the await keyword I need to be
18:57 - inside of an asynchronous function so if
18:59 - I put async then I have the ability to
19:01 - use the await keyword now here when I
19:04 - say constant.log data with async await
19:06 - I'm only going to print this line once
19:08 - the promise resolves because I'm
19:09 - essentially waiting just kind of
19:11 - stalling right here on this line line 26
19:13 - until I get that data then I print it
19:16 - out now that's different than if we go
19:18 - back here where I said const data is
19:20 - equal to fetch data at this point I'm
19:22 - not waiting I'm just saying okay trigger
19:24 - the promise and then we go immediately
19:26 - to the next line whereas if we go back
19:28 - here we're waiting for it to resolve
19:30 - then we're printing out the
19:31 - now it's important here that we have
19:33 - this try catch because again there could
19:35 - be a error that happens inside of our
19:37 - promise if that's the case then we want
19:39 - to handle that and since we're not using
19:41 - the dot catch like we are over here we
19:43 - need to kind of do that manually with
19:44 - our try catch block okay so with that
19:48 - said that's going to wrap up this video
19:49 - These are the common mistakes that
19:51 - JavaScript developers make hopefully you
19:53 - found this helpful and I showed you how
19:54 - you can avoid making these mistakes in
19:56 - the future if you did make sure to leave
19:58 - a like subscribe the channel and I will
19:59 - see you in the next one
20:05 - [Music]
20:07 - foreign