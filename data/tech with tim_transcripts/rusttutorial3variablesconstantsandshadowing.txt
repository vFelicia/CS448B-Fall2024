00:02 - [Music]
00:08 - hello everybody and welcome to video
00:10 - three in this rust programming tutorial
00:13 - series in this video i'm going to be
00:15 - showing you variables now i know that
00:17 - sounds basic i know many of you know
00:18 - variables but they work a lot
00:20 - differently in rust than in other
00:22 - languages so make sure you stay tuned
00:23 - and pay attention to all of the details
00:25 - because there is quite a few and it's
00:27 - pretty fundamental to understand this
00:29 - before moving forward if you guys are
00:31 - enjoying the series please do leave a
00:32 - like leave a comment let me know you'd
00:34 - like to see uh in the future of this
00:36 - series i myself am no rust expert i've
00:39 - just been learning the language for a
00:40 - few days and obviously i feel qualified
00:42 - enough to teach you kind of the basic
00:44 - stuff and go through some of the cool
00:45 - features
00:46 - so with that said we can dive in here i
00:48 - will mention though i do have a
00:49 - programming course programming expert
00:51 - dot io if you guys haven't yet just
00:53 - check it out from the link in the
00:54 - description even if you don't want to
00:55 - purchase it i'd love to hear your
00:56 - feedback on the course what you think of
00:58 - the curriculum so far we've had great
01:00 - feedback from people that have actually
01:02 - purchased it and well if you want to
01:03 - become a software engineer learn
01:04 - advanced programming and all that stuff
01:06 - check it out from the link in the
01:07 - description and use discount code tim
01:10 - okay so let's get into this here
01:12 - uh what i want to start with is
01:14 - variables so how do we make a vary well
01:16 - to make a variable there's a few ways
01:17 - but the first way is to do something
01:19 - like let x equals and then we can go
01:21 - with something basic like before so
01:23 - there we go we've just defined a
01:24 - variable the name is x and it is storing
01:27 - four now the first thing we need to
01:29 - understand here is that rust is a
01:31 - statically and strongly typed
01:32 - programming language what that means is
01:34 - that when you define a variable it's
01:37 - going to be given a type now you can
01:39 - explicitly define that type meaning you
01:41 - actually write out what the type is
01:43 - manually or you can let the compiler
01:45 - implicitly decide the type so here this
01:48 - is what's known as an implicit type
01:50 - assignment or type decision because
01:52 - we're not manually specifying what the
01:54 - type of x is but at compile time so when
01:57 - the compiler starts running it's going
01:59 - to see that x is storing an integer and
02:01 - it's going to implicitly assign the type
02:04 - of x to be a type int i'm going to get
02:06 - into data types in the next video so
02:08 - stay tuned for that but just keep that
02:10 - in mind you have explicit and implicit
02:12 - and by default when you're doing this
02:14 - it's implicitly assigning the type and
02:16 - what that means is you cannot change the
02:18 - type of this variable
02:20 - throughout the program so in python for
02:22 - example you could do something like let
02:24 - x equals four you wouldn't have black
02:26 - keyword but you'd have x equals four and
02:28 - then down here you could just go x
02:29 - equals
02:30 - and then make it a string here that does
02:32 - not work and the reason that doesn't
02:34 - work is because you can't assign a
02:36 - string to type int
02:37 - okay
02:38 - now one quick thing here if you want to
02:40 - explicitly define the type you would put
02:43 - a colon here and you would write the
02:44 - type so if i did something like u32 then
02:47 - i would be assigning this to a you int
02:49 - or unsigned integer 32 type um again
02:52 - we're going to talk about that in the
02:53 - next video just want to quickly show
02:54 - that for anyone wonder okay so we have
02:56 - let x equals four let's just start by
02:59 - printing this out so we'll go print line
03:01 - exclamation point with our semicolon and
03:04 - then we're going to put what's known as
03:05 - a formatting string so i'm going to
03:07 - write something like
03:08 - x is colon
03:10 - and then i'm going to put my curly
03:11 - braces here
03:13 - and then i'm going to put a comma and
03:14 - i'm going to put x and what this will do
03:16 - is embed the value of x inside of my
03:19 - curly braces in the outputted string so
03:21 - to show you this let's just go to our
03:23 - terminal notice i'm inside of tutorial 3
03:25 - here i just created that before the
03:27 - video and now i can do something like
03:30 - cargo run and you will see that we get
03:33 - oh wait why are we getting hello world
03:35 - uh i think i'm in the wrong main file
03:37 - sorry about that guys let's go to
03:38 - tutorial 3 source main let's paste that
03:41 - in and let's rerun if you have no idea
03:44 - what i did don't worry but now we have x
03:46 - is four okay so that's working and
03:48 - that's how you embed a variable in a
03:50 - string however let's try doing something
03:53 - that you know seems obvious that we'd be
03:55 - able to do but that we actually can't do
03:58 - if i go here and i type something like x
04:00 - equals five
04:01 - uh obviously you're going to assume if
04:02 - you come from another programming
04:04 - language that okay yeah x is gonna be
04:05 - changed to the value five now it's gonna
04:07 - print out five but watch what happens
04:09 - here when i go to my compiler and i run
04:12 - this notice that i actually get an error
04:14 - here it says cannot assign twice to
04:16 - immutable variable x that's my main
04:18 - error it gives me kind of a snapshot of
04:20 - the program and it actually tells me
04:22 - exactly what i need to do to fix this
04:23 - error as well as where the error
04:25 - occurred so i'm actually very impressed
04:28 - with the error handling and messages
04:30 - from the rust compiler i haven't seen
04:32 - anything quite this good in many other
04:35 - languages so just something to note
04:36 - there anyways the reason we're getting
04:38 - this error is because by default in rust
04:41 - all variables that we define are
04:43 - immutable now immutable just means we
04:45 - cannot change them and so when i do
04:47 - something like let x equals 4 by default
04:50 - i cannot change x i just can't reassign
04:53 - a value to it without redeclaring the
04:55 - variable
04:57 - so the way we would fix this
04:58 - is by putting this keyword mut here now
05:01 - mutt or mut stands for mutable so by
05:04 - default it's immutable but we can
05:06 - explicitly define this is going to be a
05:08 - mutable variable and now this will work
05:11 - so i said let mutable x equals 4 and now
05:14 - i'm allowed to change the value of x
05:16 - throughout the program because i've made
05:18 - it mutable okay so let's go here let's
05:21 - run this and we should see that we don't
05:22 - get any errors and we get x is four and
05:24 - x is five great now one thing to note
05:27 - here is you may get some warnings uh in
05:29 - your program so for example i do this
05:31 - like let uh mutable x equals four and
05:33 - then x equals five and then i run the
05:35 - code it will compile
05:37 - but we will get some warnings so you can
05:39 - see x is 5 and we're getting a warning
05:41 - it says value assigned to x is never
05:43 - read now the reason we're getting this
05:46 - is because we've defined a variable x
05:48 - here we've then changed the value and we
05:51 - didn't really need to do this this is
05:52 - kind of illogical code right really what
05:55 - i would do is change it to be like this
05:57 - so we just directly assigned to x
06:00 - because
06:01 - why am i writing x equals 5 down here
06:03 - it's kind of hard for me to really
06:04 - articulate it more than that but that's
06:06 - why we're getting a warning because we
06:07 - kind of have code that's not really
06:09 - necessary now when we run this code
06:12 - well it's clear and around again we're
06:14 - going to get another warning and says
06:15 - variable does not need to be mutable
06:17 - that's because we're not changing x so
06:18 - we don't need this mutable keyword so if
06:20 - i remove this now and rerun of course we
06:24 - are going to get uh compiling with no
06:26 - warnings okay so that was the basics
06:28 - there on variables now let's see how we
06:31 - actually change the value of x without
06:33 - making it mutable so what i can do is
06:36 - something like let x equals five
06:39 - now at first glance you're going to
06:41 - think probably if you're coming from
06:42 - another language that i'm gonna get an
06:44 - error here and the reason you would
06:45 - think that is because i'm redefining a
06:48 - variable that already exists in this
06:50 - scope scope just being the function that
06:51 - i'm writing however this is actually not
06:54 - a problem in rust and when i go and
06:56 - compile the code here you're going to
06:58 - see that this is completely fine i get x
06:59 - is 4 and x is 5. now the reason for this
07:02 - is i am actually allowed to kind of
07:04 - recreate x here what i'm actually doing
07:06 - here is creating a brand new variable
07:08 - that has the same name as x and i'm just
07:11 - assigning it now to the value 5. so i'm
07:13 - kind of overriding in a sense this
07:16 - previous variable
07:17 - and just giving it the same name which
07:19 - in this case it's five so now if i go
07:21 - here
07:22 - and i run this
07:24 - you're gonna see xs4 xs5 no problem
07:26 - whatsoever and that's one of the ways
07:28 - you can get around that kind of
07:29 - mutability issue right because if i had
07:32 - x equals 5 then i would need to make
07:33 - this mutable but if i don't want to make
07:35 - the variable immutable then instead what
07:38 - i can do is just redeclare it using the
07:40 - let keyword and similarly i can do
07:42 - something like let x equals x plus one
07:45 - and now i'm going to increment the
07:46 - previous value of x and assign that to a
07:48 - new variable called x and there's no
07:50 - problem doing this so let's go here and
07:53 - rerun
07:54 - and notice that xs4x is five no problem
07:56 - whatsoever ok
07:58 - so that was the first thing to show you
08:00 - the next thing to show you with this
08:02 - kind of way of declaring variables is
08:04 - what happens when you have kind of name
08:07 - shadowing from different scopes
08:09 - now if you're unfamiliar with name
08:10 - shadowing essentially this means you use
08:12 - the same variable name but from a
08:14 - different scope now a scope we can kind
08:17 - of think of as these indentation levels
08:19 - here in the curly braces
08:20 - we'll get more into them later when we
08:22 - talk about functions and all of that
08:23 - but let's have a look at this example so
08:26 - what i could do is just make my own
08:28 - scope now i'm just making a scope by
08:29 - putting a set of uh what is it curly
08:31 - braces here you don't have to worry
08:33 - about exactly why this works but let's
08:35 - watch what happens when i do something
08:36 - like let x equals two
08:38 - then i say fmt or fmt i'm thinking of go
08:41 - here
08:42 - print ln exclamation point and then i
08:45 - put x is
08:47 - colon
08:49 - i really could have just copied this i
08:50 - guess and then x
08:52 - so just take a guess pause the video if
08:54 - you want and tell me what you think the
08:56 - output of this program is going to be
08:57 - okay so i'm going to run the code now
08:59 - let's go here
09:00 - let's run this and notice that i get x
09:02 - is 4 x is 2 and x is 5. now you can kind
09:06 - of have a look at them side by side here
09:08 - i'll put it to the right it's a little
09:09 - bit weird why we're getting this right
09:11 - you might have imagined that what was
09:12 - gonna happen is we'd get x is four x is
09:15 - two and then x is three and the reason
09:17 - you'd probably guess that is because
09:19 - we're saying let x equals two well when
09:21 - we do that you'd think x is going to
09:23 - change right we're redefining x now the
09:25 - reason that doesn't happen is because
09:27 - we're saying let x equals 2 inside of a
09:30 - different scope so let me go back to the
09:32 - code here so this and this are in the
09:34 - same scope this is kind of an interior
09:37 - scope to this this main function so what
09:39 - that means when i say let x equals 2 x
09:42 - is only equal to 2 inside of these curly
09:45 - braces right here as soon as we come
09:47 - outside x is no longer equal to two uh
09:50 - that's just not it's only equal to two
09:52 - here when we come outside x is equal to
09:55 - four because inside of that scope that's
09:57 - what we define x to be equal to
10:00 - i know seems kind of weird uh but that's
10:02 - really how it works when i define it in
10:03 - this scope it's not being changed in the
10:05 - parent scope it's only being changed in
10:07 - this current scope so when i come down
10:09 - here we're reusing the previous value of
10:11 - x not the one that was defined in the
10:13 - interior scope
10:14 - now though let's get even more
10:15 - complicated and let's do something like
10:17 - x and actually let's just go minus 2. so
10:20 - now again take a guess of what you think
10:22 - the result is going to be i'm about to
10:23 - run the code let's go cls and cargo run
10:26 - and notice i get x is 4 x is 2 and x is
10:28 - 5. now the point of this example is that
10:31 - i can use the x from the exterior scope
10:34 - in the interior scope right so this is
10:36 - exterior this is interior i'm able to
10:39 - access this x from inside of here and
10:42 - use it totally fine that's all right but
10:44 - again it doesn't change the x outside
10:46 - because i'm defining it inside of this
10:47 - scope we'll see a lot more of examples
10:49 - of this later on but that is what i
10:51 - wanted to show you here in terms of kind
10:53 - of the name shadowing and the i don't
10:55 - want to call it strange behavior but the
10:57 - behavior that occurs when you do this
10:59 - okay so that is the basics on variables
11:02 - here
11:03 - one more thing to have a look at is that
11:04 - when you're using this let and you're
11:06 - redefining variables you can change
11:09 - their type so when i do something like
11:10 - let x equals
11:12 - hello here if i close my uh
11:15 - what do you call this my double
11:16 - quotation mark this will actually work
11:18 - fine
11:19 - so if i go back here and i clear and
11:22 - cargo run notice we don't get any
11:24 - problems and we're printing out hello
11:26 - now that sounds contradictory to what i
11:28 - showed you before but the reason this
11:29 - works is because i'm redefining x so x
11:32 - is now a new variable it's going to get
11:34 - a new type the new type here is going to
11:36 - be hello and this works completely fine
11:38 - so sorry the new type is going to be
11:39 - string not hello but it is string
11:42 - because we put hello here so this was an
11:44 - int this is a string however if i tried
11:47 - to do this right where i have mutable
11:50 - and then i run the code
11:52 - now you're going to see that we get an
11:53 - error it's expected integer but found
11:55 - the type of string
11:57 - hopefully this is kind of coming full
11:58 - circle but since i'm not making a new
12:00 - variable i'm trying to mutate an
12:02 - existing one i can't change the type but
12:04 - if i just go let x creating a new
12:06 - variable i can change the type and
12:07 - that's completely fine okay that's
12:09 - almost everything i have to cover last
12:11 - thing i'm going to cover is constants
12:14 - so a constant value
12:15 - might seem very similar to a
12:18 - what is it an immutable variable it is
12:20 - actually similar but the construct and
12:23 - kind of the sort not the construct the
12:24 - convention on how you write it is
12:26 - different and there's a few rules that
12:27 - you need to follow so when you use this
12:29 - const keyword you're actually creating
12:31 - something called a constant right you're
12:33 - not creating a variable a constant is
12:35 - something whose value and type cannot
12:37 - change throughout the entirety of the
12:39 - program once it's defined so let's just
12:41 - have a look at some examples here the
12:43 - convention when you write a constant is
12:45 - to write the name in all uppercases
12:47 - separated with underscores so i could do
12:49 - something like seconds in
12:52 - and then minute and this is how you're
12:54 - actually supposed to write it so all
12:55 - capitals uh you do again using
12:57 - underscores instead of kind of camel
12:59 - case and this is actually referred to as
13:02 - i think it's capital snake case or
13:03 - something like that now when you define
13:05 - a constant you also have to specify the
13:08 - type of this constant so i have to do
13:10 - something like say u32 standing for
13:12 - unsigned integer 32 and then make this
13:14 - equal to a value
13:16 - i need to define a value for it i can't
13:17 - leave it kind of blank right
13:19 - so here i'll just go with 60 and put my
13:22 - semicolon now that we can print this out
13:23 - so let's say print ln exclamation point
13:26 - and let's just do kind of an empty
13:28 - formatting string here and then do
13:30 - second in minute
13:32 - okay so let's run this cargo run
13:35 - and notice that we get 60 no errors
13:37 - everything is working fine however if we
13:39 - were to remove this type we would get an
13:41 - error and if we try to change this
13:43 - right seconds and minutes is equal to
13:45 - 100
13:47 - and i go here
13:48 - we'll get an error it says cannot assign
13:50 - to this expression
13:51 - because this is a constant now same
13:53 - thing if i do something like
13:55 - const let's just redefine this and
13:57 - change the value here
13:59 - and let's see what we get
14:01 - okay so let's go
14:03 - let's clear cargo run and notice i get a
14:06 - problem oh it's saying it didn't find a
14:07 - semicolon so let's just fix that first
14:09 - before we look at the other error okay
14:12 - clear and run and again i still get this
14:15 - problem it says seconds and minute is
14:16 - defined multiple times so unlike a
14:18 - variable you cannot reassign or kind of
14:21 - redefine this constant once you create
14:23 - it once it's there you cannot change it
14:25 - you cannot redefine it
14:27 - okay so i think with that said i am
14:28 - going to end the video here i know i
14:31 - didn't show you that much but there was
14:32 - a lot of details related to the
14:34 - variables into the constants and i
14:36 - wanted to spend some time on this to
14:37 - make sure it was super clear because
14:39 - there is a lot to kind of unpack here
14:41 - with a strongly and statically typed
14:42 - language especially if you're unfamiliar
14:44 - with that in the next video we'll talk
14:46 - about data types we'll start to clear
14:47 - some of this up then we'll get into
14:49 - console input and if statements and all
14:51 - the other kind of cool features that
14:53 - rust has that other languages don't if
14:55 - you guys enjoyed make sure to leave a
14:56 - like subscribe to the channel check out
14:58 - programmingexpert.io and i will see you
15:00 - in another one
15:03 - [Music]