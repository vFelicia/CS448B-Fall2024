00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video i am
00:13 - going to be showing you how to build a
00:14 - personal dashboard which is going to
00:16 - allow you to track your progress towards
00:18 - something like 100 days of code and view
00:21 - all of your github statistics now i'm
00:23 - just going to give you kind of the
00:24 - foundation and then you guys can extend
00:26 - this and build on it as you please but
00:28 - since it's pretty difficult for me to
00:29 - explain what this is without showing you
00:31 - let me show you a demonstration of what
00:33 - we're going to be building so this is
00:34 - kind of going to act as an internal tool
00:36 - a dashboard for yourself and of course
00:39 - you can customize this just what i've
00:40 - come up with so far so you can see we
00:42 - have a commit history in the top left we
00:44 - have all of our repositories from github
00:46 - showing here along with the description
00:48 - the branch the primary language and then
00:50 - i have 100 days of code tracker now i
00:53 - know a lot of you guys do this where you
00:55 - participate in 100 days of code and i
00:57 - see people posting tweets about it and
00:58 - trying to kind of keep track of their
01:00 - progress so i figured this would be a
01:02 - cool thing to showcase how you can come
01:04 - up with a very simple form here where
01:05 - you can implement the day the date maybe
01:08 - the repository that you used put a
01:10 - resource url and then add a bunch of
01:12 - notes about maybe what you accomplished
01:14 - for this day of 100 days of code then
01:16 - you could click log and what would
01:18 - happen is you would log this down here
01:20 - in kind of i guess your logs and of
01:22 - course this is just showing you a very
01:23 - rough look at what it is that you typed
01:25 - in you could display this in a different
01:27 - format just trying to show you that it's
01:29 - very easy to actually kind of make a log
01:31 - with the tool we're going to be using
01:32 - here which i'll get to in a second
01:34 - anyways let's just go to the commit
01:36 - history i'm going to type in my username
01:38 - which is tech with tim if i type it
01:41 - correctly i spelt it wrong then you'll
01:43 - see it'll give me all of my history here
01:45 - as a bar chart so there's all kinds of
01:47 - stuff we can do with this software i'm
01:49 - going to talk about a lot of it in this
01:50 - video but this is kind of going to be
01:52 - the final project building this nice
01:54 - personal dashboard shows you your commit
01:56 - history or any user's commit history for
01:58 - that matter shows you all of your
02:00 - repositories and gives you a way to
02:02 - actually track your progress of course
02:04 - you can do something other than 100 days
02:06 - of code i'm going to show you how to add
02:07 - something into a database and have this
02:09 - stored persistently so with that said
02:11 - let me head over to another website and
02:13 - i'll talk to you about the tool we're
02:15 - actually going to be using to build this
02:17 - project alright so i'm here on
02:18 - retool.com now retool is the sponsor of
02:21 - this video but they're also the platform
02:23 - that we're going to be using to build
02:24 - this internal dashboard now retool is an
02:27 - awesome platform it is built for
02:29 - developers but it's also low code so
02:31 - what it lets you do is very rapidly
02:33 - build internal applications and
02:35 - aggregate a ton of data sources together
02:38 - so say you have data from a rest api a
02:40 - few sql databases maybe a mongodb
02:42 - database maybe you have your own
02:44 - database that you're creating whatever
02:46 - it may be you can aggregate all of that
02:48 - in one location have some preset queries
02:50 - that you want to run on this data and
02:52 - then use those queries to update your
02:54 - dashboard so maybe you have a few
02:56 - different tables some charts whatever
02:58 - it's going to be retool will
02:59 - automatically refresh those whenever you
03:01 - rerun the queries and it's really
03:03 - awesome to just quickly build an
03:04 - internal tool and kind of visualize data
03:07 - in fact the application that i built
03:08 - here took me about an hour when i was
03:10 - kind of tinkering and still learning the
03:12 - platform and so i'm going to show you
03:13 - how to build it here even quicker and we
03:15 - are messing with multiple databases
03:17 - multiple data sources and showing a
03:19 - bunch of different components now retool
03:21 - also has a graphical user interface that
03:24 - allows you to drag components directly
03:26 - onto the screen use javascript code to
03:28 - dynamically render what's inside of
03:30 - those components it's very cool and
03:31 - anyways i'll show you more about it when
03:33 - we actually get into the platform now
03:35 - retool is free you can try it for free
03:37 - by going to the link in the description
03:39 - and signing up for an account and
03:40 - everything i do in this video is going
03:42 - to be from a free trial account so i'm
03:44 - not showing you any features that you
03:45 - won't directly have access to now even
03:48 - once your free trial ends if you've
03:49 - already built the application you can
03:51 - still view it use it as you normally
03:53 - would it's like a functioning
03:54 - application it's hosted online for you
03:56 - for free and yeah that's pretty much all
03:58 - i need to talk about for retool so let's
04:01 - sign into an account i'm going to assume
04:03 - you guys have done that at this point in
04:04 - time and then we'll create a new project
04:06 - and we'll start building out this
04:07 - application all right so i've just set
04:09 - up a fresh retool account and now i've
04:11 - been brought to this page now this is so
04:13 - we can set up our first application and
04:15 - you can see it's asking me to connect a
04:17 - database or an api now there's a ton of
04:19 - different options here we are going to
04:21 - set up a postgres database later on but
04:24 - for now i want to do the github
04:26 - integration or the github api because
04:28 - that's how we're going to retrieve the
04:29 - different repositories that we have as
04:31 - well as our contribution history so i'm
04:33 - going to click on github here and i'm
04:35 - just going to give this a name i'll just
04:36 - say github and then i'll go with tech
04:40 - with tim
04:41 - because that's my username now for the
04:43 - username i'm going to do this and then
04:45 - we need a personal access token now you
04:48 - can click on this link and it will allow
04:49 - you to generate a token i already have
04:51 - one so i will insert one here test my
04:53 - connection and then create this resource
04:55 - i'm going to assume you guys can get
04:56 - through this step again just read this
04:58 - kind of thing here to make a personal
04:59 - access token paste it in and then you
05:02 - should be good to go all right so i've
05:03 - just inserted my personal access token
05:05 - and now the github resource is set up
05:08 - now you're going to see that it brings
05:09 - you through a tutorial feel free to go
05:10 - through this it's probably helpful i've
05:12 - already looked at how to do this though
05:13 - so i'm just going to skip the tutorial
05:15 - for now so let's just kind of do a quick
05:17 - platform overview and then we'll start
05:18 - building the application so right down
05:20 - here you have kind of your query view
05:22 - now this is where you can view all of
05:23 - your different resources and you can set
05:25 - up queries that can run whenever you
05:27 - want so for example we just have a sql
05:29 - query here that's going to select
05:30 - everything from a database this is just
05:32 - a database that's provided to you to do
05:34 - some testing operations it's called
05:36 - onboardingdb now we're not going to use
05:38 - that but you can see we have github tech
05:40 - with tim that's our github resource
05:43 - and now inside of here i can write
05:44 - graphql if i want and actually do
05:46 - queries if you're unfamiliar with
05:48 - graphql you're going to have to find a
05:50 - tutorial on that i'm not really going to
05:51 - explain it a ton in this video but i
05:53 - will show you a few queries that you can
05:55 - run that will give you repository
05:56 - information
05:57 - contribution information all that type
05:59 - of stuff anyways though you select your
06:01 - resource you can choose when you want
06:03 - this query to run and then you can
06:05 - actually have the query in here you can
06:07 - put variables headers and then
06:09 - transformers and event handlers these
06:11 - are really cool because for example if
06:13 - the query fails you can show like an
06:14 - error message on the screen to the user
06:17 - all kinds of other stuff you can do and
06:18 - then of course you save as many queries
06:20 - as you want here and you can have them
06:22 - triggered when other queries run and do
06:24 - all kinds of stuff
06:26 - okay so i'm going to close that for now
06:27 - that's kind of the query view we'll get
06:28 - to that in a second on the right hand
06:30 - side we have i guess the component view
06:32 - and this is where you're actually able
06:33 - to view all of the components that you
06:35 - can just drag right onto the user
06:37 - interface so i can just take a table and
06:38 - just put it here and then i could select
06:40 - the data that i want here it's saying
06:42 - query1.data so that would be this now
06:45 - currently we don't actually have
06:46 - anything in query one i also haven't
06:48 - saved query one and so that's why it's
06:50 - not updated anyways i'm going to delete
06:51 - the table i just wanted to showcase that
06:54 - to you okay come on delete
06:57 - let's delete it like that all right
07:00 - continuing we have our inspect so if i
07:02 - click on an element like this i can view
07:04 - all the different properties of it you
07:05 - know i can change the layout of the menu
07:08 - change the styles i can also change the
07:10 - name of it because i can access this in
07:12 - javascript code when i'm actually i
07:14 - guess dynamically showing stuff on the
07:16 - screen alright so i think that's pretty
07:17 - much it for the platform overview very
07:19 - simple and intuitive to use i'll also
07:21 - mention you can preview the app here and
07:23 - you can share this app with other people
07:24 - by clicking on the share button for now
07:27 - though what i want to do is just modify
07:28 - the name of this app and i'll just call
07:30 - this
07:31 - personal
07:32 - dashboard for now uh feel free to name
07:34 - it whatever you want all right so my
07:36 - screen just updated now we are on the
07:38 - personal dashboard project and the first
07:40 - thing i want to do is just set up a few
07:42 - interface components and then we'll
07:43 - actually link some data to them and you
07:45 - can see how it kind of updates in live
07:47 - time so i'm going to drag in a text
07:49 - input here from the right hand side and
07:51 - this is going to be to enter the github
07:53 - username that you want to view the
07:54 - commit history for so for the
07:56 - placeholder here i'm going to call this
08:00 - and i'm going to make this enter and
08:01 - then github like that and then username
08:05 - for the label i'm actually going to hide
08:07 - the label i don't want any label here
08:09 - i'm going to show the clear button
08:10 - that's fine
08:11 - and then for the prefix icon
08:14 - let's go with a user
08:16 - so let's click user like this and we'll
08:18 - just do a little user icon looks good to
08:20 - me
08:21 - um other than that i want kind of a
08:23 - chart so that i can actually view the
08:26 - github history right so let's go with
08:27 - chart let's drag this in
08:30 - i'll make this a little bit bigger
08:32 - and then we can extend this so it just
08:34 - lines up with the chart now we will
08:36 - write the content of the chart in a
08:37 - second but for now i just want to put
08:38 - that in and for the title of the chart
08:42 - i should be able to find this somewhere
08:46 - bar chart data source okay
08:50 - title here we are let's go with commit
08:53 - history like that perfect that's our
08:56 - title
08:57 - and we'll leave it as a bar chart for
08:58 - now now i will change the name to just
09:00 - be commit
09:02 - history and i'm also going to change the
09:04 - name of this input field here to be
09:07 - github and then username because we're
09:09 - going to reference this in our code
09:11 - perfect okay so now we have our input
09:14 - and we have our chart the next thing i'm
09:16 - going to do is insert a table and this
09:18 - table is going to show all of our github
09:19 - repositories so right now you can see
09:21 - the data is from query1.data we'll
09:23 - change that in a minute but let's put
09:25 - some text above this and i'll show you
09:28 - that with the text it's really cool you
09:29 - can actually directly just use markdown
09:31 - inside of this text so if i go here i
09:33 - can select markdown or plain text with
09:36 - markdown what i can do is something like
09:38 - this i can do
09:40 - let's go with three pound signs for
09:41 - heading three and then let's make this
09:45 - repositories
09:47 - did i spell that right repositories i
09:49 - think i did okay now if i want this to
09:51 - be center let's just lay that out in the
09:53 - center i'm going to make that go down
09:55 - just so it lines up a bit with that
09:57 - field and for now that looks good to me
10:00 - perfect now let's just change the name
10:01 - of this table and let's make this repo
10:04 - table
10:06 - great okay so there we go we have kind
10:07 - of the first part of our ui so let's
10:09 - deal with this part right now and then
10:11 - we'll work with the hundred days of code
10:13 - track
10:14 - okay so i want to display some data in
10:16 - the commit history and this data is
10:18 - going to be based on whatever i type in
10:20 - here right so if i type tech with tim
10:22 - then i want to display tech with tim's
10:23 - commit history so what i need to do is
10:25 - run a query on my github resource here
10:29 - and that's going to give me all of the
10:30 - commit history for a specific user so
10:33 - the first thing i'm going to do here is
10:34 - just change the name of this query so
10:36 - let's just click rename here and let's
10:39 - make this get
10:41 - commit
10:43 - like this
10:44 - and then data now before i even do the
10:47 - query i'll show you that if we want to
10:48 - use the data from this query in commit
10:50 - history what we can do is just go to
10:52 - data source here and just put the name
10:55 - of the query so getcommit.data you can
10:57 - see the autocomplete showing up and the
10:59 - reason why i'm putting this inside of
11:00 - two curly braces is because this is a
11:02 - javascript code so whenever you want to
11:04 - embed javascript code you just do it
11:05 - inside of two curly braces and you can
11:07 - see it's actually going to give me
11:08 - whatever the return data is right here
11:10 - and i can view it underneath and if i
11:12 - want to pop this out i just click this
11:14 - button and then this little bit larger
11:15 - so i can read this easier okay so i'm
11:18 - not going to go through the query and
11:20 - kind of how you come up with it i'm just
11:21 - going to paste it in from my other
11:23 - screen because it will be pretty
11:24 - complicated if i explained all of these
11:27 - these queries so i'm just going to paste
11:29 - in this query i'll pop this up so you
11:31 - guys can read this a little bit easier
11:32 - we have query user the login is going to
11:35 - be text input one dot value now this is
11:37 - actually the incorrect name i need to
11:39 - reference
11:40 - this field right here which is the
11:42 - github username so i'm going to put
11:45 - github
11:46 - username like that and now whatever they
11:48 - type in this field is going to be passed
11:50 - as the login and the login is just the
11:52 - username of the user now i need to make
11:54 - sure i do value to actually get the text
11:56 - value and what i'm looking for here is
11:58 - the name the contributions collection
12:01 - contribution calendar colors total
12:03 - contributions weeks and then all of this
12:05 - other data again i can't necessarily
12:07 - explain how you come up with this query
12:09 - because you have to look at the github
12:10 - api for that but this is going to give
12:12 - us every single day or sorry every
12:14 - single week and how many commits we had
12:17 - during each day of that week so we'll be
12:19 - able to kind of parse through this data
12:21 - here and then access what it is that we
12:23 - want which is going to be the number of
12:24 - commits per day which will display in
12:27 - this chart as a bar chart so anyways
12:29 - i'll click done here and now what i can
12:31 - do is i can save and run this query so
12:33 - let's do that and if i go here notice it
12:36 - gives me that my name is timmersica
12:38 - right it shows me the different colors
12:40 - gives me all of my weeks for each week
12:43 - we have the contribution days let me
12:45 - make this a bit larger so we can read
12:46 - this alright so i've made this a bit
12:48 - larger and we can see that when we ran
12:50 - this query we're going to get weeks now
12:52 - weeks will be a list all of the elements
12:54 - in this list are going to be json
12:56 - objects and they're going to have the
12:57 - contribution days
12:59 - key i guess and that's going to allow us
13:01 - to access other json objects that have a
13:03 - color
13:04 - and the number of contributions that we
13:06 - did in that specific day
13:08 - so you can see i haven't done too many
13:09 - contributions this year
13:11 - regardless though if we scroll through
13:13 - here we will see all the different
13:14 - contributions that i have
13:16 - for the entire year and it also gives us
13:18 - the color that would have shown up on
13:19 - kind of like the github colored
13:22 - commit history
13:23 - bar chart whatever you want to call okay
13:26 - so that is that query so now that we've
13:27 - ran this query we can access the data of
13:30 - this query from anywhere now the format
13:32 - of this data is not going to be in the
13:34 - correct format for us to actually graph
13:36 - it directly so we'll have to transform
13:38 - it slightly but i'll show you how to do
13:39 - that so for now when i have
13:41 - getcommit.org getcommitdata.data
13:44 - notice it's not showing anything in here
13:46 - the reason it's not showing anything is
13:48 - again because the format of this data is
13:50 - kind of incorrect to be graphed so what
13:52 - i'm going to do now is actually add a
13:54 - javascript transformer and what this is
13:56 - going to allow me to do is view the
13:58 - return value of that
14:01 - query and transform that data using
14:04 - javascript into a format that's going to
14:06 - be easier for me to graph so essentially
14:08 - what i want to do here in this
14:10 - transformer is i want to take the data
14:12 - from this query and i want to flatten
14:14 - all of the weeks so that i have each
14:17 - individual day as one element in an
14:19 - array because what i want to do here
14:21 - when i'm graphing this is i want to use
14:23 - the date of each of my days as the
14:25 - x-axis and the number of contributions
14:27 - on that day is the y-axis so i need to
14:30 - flatten these into individual elements
14:31 - so that i can choose the x and y axis
14:34 - anyways let me show you how we do that
14:36 - so i'm going to rename this transformer
14:38 - to
14:39 - flatten
14:41 - commit data
14:42 - and then what i'll do here is the
14:44 - following
14:45 - i will say return and then to access my
14:48 - query i'm going to put inside of curly
14:49 - braces the get commit data like that now
14:52 - i want the data so i'm going to do dot
14:54 - data now the reason i'm doing dot data
14:56 - is because
14:57 - let's save this first
14:59 - if we look here we have data that's
15:01 - going to be returned as a key then we
15:03 - have user then we're going to have
15:04 - contribution collection
15:06 - then calendar then weeks then
15:08 - contribution days so on and so forth so
15:11 - i'll show you how we get all of that but
15:12 - that's why i'm doing data and if i hover
15:14 - this you can see it actually shows me
15:16 - that the other key is user so now i'm
15:18 - going to access dot user then after user
15:21 - i want contribution collection
15:23 - then contribution calendar then dot
15:25 - weeks now since doll weeks is going to
15:27 - be a list as it's showing me right here
15:29 - i need to map all of the values in these
15:32 - weeks
15:33 - to a function that's going to give me
15:36 - all of the days in those weeks so i'm
15:38 - going to put after the curly braces here
15:40 - dot map
15:41 - and then inside of parentheses i'll put
15:43 - week because i'm mapping all of my weeks
15:44 - to a week and then what i'm going to do
15:46 - is return from here
15:48 - the week dot and then this is going to
15:51 - be the
15:52 - contribution
15:54 - days
15:55 - okay i think that is good let me just
15:58 - save this and now go check this data so
16:01 - we can see yeah we have contribution
16:02 - days so let's go to flat and commit data
16:04 - let's preview this
16:06 - and this is what it's returning so let's
16:07 - make this a bit larger so we now have a
16:10 - bunch of lists inside of a list however
16:13 - i want all of these lists to be
16:14 - flattened so what i'm going to do is do
16:16 - dot flat
16:18 - and then 1 and now if i save this and i
16:21 - preview it notice that each element now
16:24 - is going to be an individual day so i
16:26 - have all of my different days and then i
16:28 - have each day which is a color
16:30 - contribution count date and weekday
16:32 - hopefully that makes sense but i'm just
16:34 - going to use the date and the
16:35 - contribution count again for my x and y
16:37 - axis
16:38 - perfect so now we have this transformer
16:41 - so what i can do is go to my commit
16:43 - history and i can change the data here
16:46 - to rather than get commit data to be the
16:48 - return value of my transformer so i'm
16:50 - going to say flatten commit data dot and
16:52 - then dot value and also just in case
16:54 - you're confused on how to write this you
16:56 - can click on this little button right
16:57 - here to learn more about how to write js
17:00 - transformers
17:01 - anyways i have the value now but the
17:03 - issue is i'm not seeing the graph and
17:04 - the reason why i'm not seeing the graph
17:06 - is because if we look at value we just
17:08 - have a bunch of json objects that's not
17:10 - good enough to actually graph this i
17:12 - need to manually specify the x and the y
17:14 - axis so i can do that from plotly so if
17:18 - i go to plotly here
17:19 - what i can actually do inside of here is
17:21 - i can write a specification for this
17:24 - graph now i'm not going to necessarily
17:25 - explain plotly again you can click here
17:27 - to read more about plotly but i will
17:29 - show you how we specify the x and y axis
17:32 - values as well as the name of the graph
17:34 - the type of the graph that type of stuff
17:36 - so for the type of this graph i want
17:38 - this to be a bar graph so i'll just
17:39 - specify bar like that
17:41 - and then for the x-axis i'm going to say
17:43 - x
17:44 - and i'm going to reference
17:46 - the flatten commit data dot and then
17:48 - this is going to be value and then i
17:50 - need to map every single one of these
17:53 - values here which is going to be my
17:54 - individual days to the contribution or
17:57 - sorry to the date because that's going
17:59 - to be my x-axis so i'm going to say dot
18:01 - map
18:02 - and then inside of here we will take in
18:04 - i guess a day
18:06 - and we will map this
18:08 - to day and then this is going to be dot
18:11 - date like that so now we should have all
18:13 - the dates on our x-axis but i of course
18:15 - need to do the y-axis
18:17 - so let's go here and let's do y
18:20 - so we're going to go y and then rather
18:21 - than date this is going to be
18:23 - contribution
18:26 - like that
18:27 - and then
18:28 - count
18:29 - okay let's hit done and now if i put in
18:32 - a name uh hopefully this should actually
18:35 - start graphing all right so i realized i
18:37 - made a quick mistake here i accidentally
18:39 - added the the curly braces when i don't
18:42 - need to do that because i'm just going
18:43 - to directly have the return value here
18:45 - from this map function so let me just
18:46 - remove these and now we should see that
18:48 - it's actually showing up okay awesome
18:50 - now we're actually getting the graph i
18:51 - was looking at that like why is this not
18:53 - working now one thing we see here is
18:55 - that we have this trace zero for kind of
18:58 - the legend of what these blue bars are
19:00 - so what i'm going to do is just put
19:01 - something in here that says a name
19:03 - and the name is just going to be
19:05 - commit
19:07 - and then that will tell us if i spell
19:09 - commits correctly
19:10 - what the legend should be for this all
19:12 - right hopefully that makes sense there's
19:14 - a ton of other things you can add to
19:16 - this plotly i guess json specification
19:19 - again you can read those from this link
19:20 - right here this is the basics you pass
19:22 - all the values for x and all of the
19:24 - values for y and then it should
19:25 - automatically plot it for you as we can
19:27 - see it's showing up with my commit
19:29 - history now if we put someone else's
19:30 - commit history in this will work as well
19:33 - i don't know anyone else's username off
19:34 - the top of my head i know mine though
19:36 - tech with tim and if you guys do this
19:38 - you put in my username you will see my
19:39 - commits because those are publicly
19:41 - available you won't see any commits to
19:43 - private repositories but any of my
19:44 - public commits you can see right here
19:46 - that's why i have so few of them
19:48 - anyways now what we can do is update
19:50 - this repository table because i've
19:52 - showed you how we can actually write the
19:54 - uh the query how we save the query how
19:56 - we have the transformer so now let's
19:58 - delete query one and let's make a new
20:00 - one here that's going to give us all the
20:02 - repositories that we have in our account
20:05 - so i'm going to go for new query i'm
20:07 - going to go resource query and yes we're
20:09 - going to use github again we'll run
20:11 - query automatically when inputs change
20:13 - perfect so that means like when we
20:14 - change this here it's going to
20:16 - automatically update the query although
20:18 - this is not going to be for this table
20:20 - which i'll show you in a second so what
20:21 - i'm going to do is paste in a query i
20:23 - just have to find it from my other
20:26 - screen here so let's grab the query
20:29 - and let's paste this in okay so this is
20:31 - the query to get all the data about your
20:34 - repositories this will just give you the
20:36 - public repositories i believe it may
20:39 - give you the private ones but i think
20:40 - it's just your public repositories and
20:42 - you'll see that you'll get all the
20:43 - information like name description the
20:45 - default branch the primary language etc
20:48 - so let's rename this query after i save
20:51 - it so let's rename this to say
20:54 - get
20:55 - repo info
20:57 - like that again you guys can pause the
20:59 - video and type this out i'm not going to
21:00 - explain the query and now if i preview
21:03 - this
21:04 - you're going to see that
21:06 - we will get all of the data for my repos
21:08 - so we'll get data we'll get viewer
21:10 - repositories total count then it gives
21:13 - me the nodes and every single node is
21:15 - going to have the information about the
21:17 - repository so i have pi game tutorials
21:19 - golf game side scroller game etc so now
21:21 - what i want to do is use that data
21:23 - inside of this table so to do that i'm
21:26 - going to change from query1.data to be
21:29 - get repo
21:31 - info.data
21:33 - and it says invalid value try passing in
21:36 - an array of objects or the result of a
21:38 - sql query with something like
21:39 - query1.data now if i actually look at
21:42 - data you can see that we're
21:43 - getting.viewer.repositories etc so what
21:46 - i need to do here is i just need to
21:47 - access the specific key that i want to
21:49 - display which in this case
21:51 - is going to be repositories and then
21:53 - note
21:54 - so let's go data
21:55 - dot and then viewer dot and then
21:58 - repositories dot and then nodes and now
22:01 - you can see it's going to show me all of
22:02 - this information right the name the
22:04 - default branch and the primary language
22:06 - however this doesn't look very
22:07 - attractive it's kind of all you know
22:10 - like jsonified we have like name master
22:12 - name python so what i can do is i can
22:14 - specify for each column what i actually
22:16 - want to display
22:18 - by going to the columns and then having
22:21 - a specific mapped value for this column
22:24 - so i'm going to say self this is inside
22:26 - of actually the name column can stay the
22:28 - same sorry i don't want to do name let's
22:30 - do
22:31 - let's go here let's do default branch
22:33 - ref
22:34 - and for here we will just say
22:37 - self
22:38 - dot and then name now when i do that
22:40 - it's going to access the name attribute
22:42 - on the json object representing this
22:45 - column and so i just get the actual name
22:47 - rather than all that other stuff so like
22:49 - the key beforehand
22:51 - okay now let's go to primary language so
22:53 - i keep clicking out of this let's go
22:55 - primary language and same thing here
22:57 - we're just going to say
22:59 - self dot and then this is going to be
23:01 - name
23:02 - and now it should just show us python
23:05 - perfect and then i also want to view the
23:06 - description as one of the columns
23:08 - although for some reason it's not
23:09 - showing up so let's see if we can enable
23:11 - that
23:11 - if i go to description let me just hide
23:14 - that and show that and then there we go
23:16 - we can see the description now if i want
23:17 - to resize these i can just kind of move
23:19 - them around so that's what i'll do here
23:21 - and that looks good to me so that's as
23:24 - simple as it is to display your
23:26 - repositories now we could change like
23:28 - the cosmetics of this if we want you can
23:30 - see i can click on columns and sort them
23:32 - by name and whatnot let me click back on
23:34 - this table and let's go and have compact
23:39 - mode now when i do compact mode it's
23:40 - going to show me a bunch in the table
23:42 - which is kind of what i want here and
23:43 - then i'll have less pages to click
23:45 - through so i'm just going to select that
23:47 - and then you can toggle the download
23:48 - button loading state refresh button all
23:50 - that type of stuff
23:52 - perfect now let's just look at this
23:53 - query again because i didn't really
23:55 - explain this at all if i go to get repo
23:57 - info
23:58 - that's not what i want to look at i want
23:59 - to look at this right here notice how i
24:01 - have affiliations owner now what this is
24:04 - doing is specifying that you can only
24:06 - view the data of the owner of the github
24:08 - account that's currently linked so when
24:10 - you actually connected the github api
24:12 - you would have done some authentication
24:14 - right by putting in your personal access
24:16 - token now that means that you are the
24:19 - owner of this github account and so when
24:21 - i put owner that's what it's showing you
24:23 - it's showing you all of the repositories
24:24 - for the owner so me changing this here
24:26 - isn't going to modify this and i can't
24:28 - look up the repositories of everyone
24:30 - else at least not using this query so in
24:32 - this case i'm just using owner and
24:34 - showing me my current repositories which
24:35 - is what i want to see now i also have
24:37 - first being 100 so it's only going to
24:39 - show me the first 100 repositories if
24:42 - you wanted more you could put say 200
24:44 - or if you wanted less maybe go with like
24:45 - 50
24:47 - whatever right so i'm just going to go
24:48 - with 104 right now anyways that's kind
24:50 - of how the query works again don't
24:52 - really want to get too much into the
24:53 - graphql you can look at the github api
24:55 - to see how these work just showing you a
24:57 - few of them kind of for example purposes
24:59 - okay so now that we have that let's
25:02 - start building the form that's going to
25:04 - allow us to log information about 100
25:06 - days of code so to build this component
25:08 - i'm going to start by dragging in a
25:09 - container now this container is just
25:11 - going to hold everything or all of our
25:14 - components for kind of the form and for
25:16 - the form what i want people to enter is
25:18 - the day the date the repository that
25:21 - they used if they use any repository
25:23 - that will be optional and then any
25:25 - resource url they want to store and then
25:27 - any notes right so you saw what it looks
25:28 - like in the demo but that's kind of the
25:30 - information we want and then there'll be
25:31 - a button that says log and when you
25:33 - click that it will add that information
25:34 - to the database assuming it's not
25:36 - conflicting with any other data so let's
25:39 - just start dragging in some components
25:40 - here for the date i'm going to have or
25:42 - sorry for the day i'm going to have a
25:44 - number input so let's drag this guy in
25:45 - we can make it pretty small
25:48 - then what else do we want we're going to
25:49 - want the date so let's see if we can
25:51 - find a date input here perfect there's
25:54 - one right here so let's go with date i
25:56 - don't really care about the time so we
25:57 - can just make a date
25:59 - and then we want to have the repository
26:02 - so we need like a select or like a drop
26:04 - down
26:06 - uh yeah i think select is fine we go
26:08 - with select like that uh yep okay
26:10 - awesome and then we also want to have a
26:14 - url so we'll put a url like that
26:17 - okay so let's start styling these and
26:19 - make them look a little bit better first
26:21 - this guy can be
26:22 - a little bit larger so let's drag that
26:25 - over gotta move this over now too
26:28 - okay
26:29 - label will go in
26:31 - here
26:32 - nice
26:33 - okay so for this one let's call this the
26:36 - day input
26:38 - let's spell input correctly let's make
26:41 - the default value 1 because day 0
26:44 - doesn't make too much sense
26:46 - we don't really need enter value i mean
26:48 - we could say enter day if we want
26:50 - and for the minimum let's make it one
26:52 - and for the maximum we don't really need
26:54 - a maximum because i guess you
26:55 - theoretically could go over 100 days now
26:57 - for the label i'm just going to say day
26:59 - and then number like that all right so
27:02 - that's good for day now for the date
27:05 - let's just add the name here of date
27:08 - let's make this date
27:11 - input like that and then new date is
27:13 - fine and the default value will just be
27:15 - the current date which is great
27:17 - okay now for this one here we want to
27:19 - have repository
27:20 - so
27:21 - i'm going to
27:23 - say select a
27:25 - repo like that
27:26 - and then for the label we'll say
27:29 - repository
27:30 - and what we want is we want a list of
27:33 - all of our repositories now thankfully
27:35 - we already have a query that gives us
27:37 - all of the repositories so let's
27:38 - actually use the list of all of the
27:41 - repository names here as our options for
27:44 - the dropdown so if i go back here i can
27:46 - see that how i get this is
27:48 - getrepoinfo.data.viewer.repositories.nodes
27:52 - so now what i want to do is just map
27:53 - every single node to the name of the
27:55 - repositories
27:56 - so that's what we'll do so let's go here
28:00 - let's go to values
28:02 - and for values
28:04 - this is going to be
28:05 - getrepoinfo.data.viewer.repositories.nodes.map
28:09 - and then we'll map a repo
28:12 - to
28:13 - the repo oops type that in incorrectly
28:17 - okay again to the repo
28:19 - dot name okay so that should be good now
28:22 - we have all that now for the labels i'm
28:25 - going to paste the exact same thing
28:26 - because theoretically you could have
28:28 - different labels than values and that
28:30 - means when you click on a value or you
28:32 - click on a label sorry it would
28:33 - associate with the value in this case i
28:35 - just want them to be the same thing you
28:36 - can see if i highlight over this here
28:38 - we're getting all of the names of our
28:40 - different repositories perfect
28:42 - okay so now if i click on this we can
28:44 - see that we have all of our repositories
28:45 - showing up in here i can select one
28:48 - awesome looks good now one thing i want
28:50 - to do is make it so that the
28:52 - label and the input field are closer
28:55 - together now i forget exactly how to do
28:57 - that but i think i can do something like
29:00 - specify the width of my label yes that's
29:02 - right here so let's make the label width
29:04 - just something like 20 so that we have a
29:06 - larger kind of field here for our uh our
29:09 - input now we're gonna do the same thing
29:11 - with url so we're gonna call this the
29:13 - url input
29:15 - okay and then for the label width can i
29:19 - find that somewhere okay that's right
29:20 - here let's make that
29:23 - 20
29:24 - and instead of retool.com
29:27 - actually we can leave retool.com and url
29:29 - let's name this instead
29:34 - oh no pattern will be you are okay
29:35 - that's fine but for the label where is
29:37 - the label here it is i want this to be
29:40 - resource url
29:42 - perfect okay so that's kind of the top
29:44 - of our container now we can set the
29:45 - title of this container we don't really
29:47 - need to name it anything for the title i
29:49 - will say a hundred
29:50 - days
29:51 - of code
29:53 - tracker that's fine we want to center
29:55 - this so let's put it in the center and
29:57 - then if you want to make it larger just
29:58 - remove one of those and there we go
30:00 - okay so now we want some notes or
30:02 - something so let's see if i can find
30:05 - maybe not note maybe this is going to be
30:06 - like text input okay rich text editor
30:09 - that's what i want to drag in here so
30:11 - let's try to get this inside of the
30:13 - component okay there we go
30:16 - and now let's just make this a lot
30:17 - larger and you can see that we have all
30:19 - the formatting options here too right so
30:22 - we're able to actually bold uh italicize
30:25 - underscore or underline whatever right
30:27 - let's make that even larger and now we
30:29 - just want a button at the bottom let's
30:31 - call this though notes
30:34 - input
30:36 - and we want a button and this button
30:37 - will let us log so let's put the button
30:40 - right
30:41 - if i could get this in it's a little bit
30:42 - tricky to get it in the component here
30:44 - okay i successfully placed the button at
30:46 - the bottom of the component now let's
30:48 - just resize this a little bit and for
30:51 - the text on the button let's call this
30:53 - log and then we can just call this log
30:56 - button like that all right so now what i
30:59 - want to do is actually utilize a sql
31:01 - database to store the information in
31:03 - here when i hit this log button so i'm
31:05 - going to need to make a new query here
31:06 - to actually create the new database
31:08 - table so i'm going to make a new
31:09 - resource query this is going to use the
31:12 - manage db this is an internal database
31:14 - that you have access to and that you can
31:15 - create new tables with
31:17 - manageddb
31:18 - postgresql and then from here i'm just
31:20 - going to again
31:22 - copy in a query feel free to pause the
31:24 - video and paste this if you want it's
31:25 - going to create a table called days of
31:27 - code it's going to have an id key a day
31:30 - key a date time a repo a resource url
31:34 - and notes which will be text now i'm not
31:37 - going to explain sql again you can read
31:39 - all kinds of tutorials about sql online
31:42 - but essentially it will create this
31:43 - table if it does not exist and then it
31:45 - will have all of these keys inside of it
31:47 - so i can just run this query
31:49 - it should just create the table for me
31:50 - i'm not going to get any data back now
31:52 - that the table exists i'll be able to
31:54 - actually add data to it so the first
31:56 - thing i'm going to do is add a or rename
31:59 - this query let's make this
32:01 - create table
32:03 - and now let's make a query that can just
32:05 - give us all of the data from the table
32:07 - and insert data into the table so
32:09 - actually it probably makes sense to do
32:10 - the insert first let's make a new
32:12 - resource query let's call this
32:15 - insert log
32:17 - and then again i'm going to paste
32:18 - something in here
32:20 - and i will explain how this works so i'm
32:22 - going to say insert into days of code
32:24 - and i'm going to put all of the columns
32:26 - that i want to insert values for so in
32:28 - this case day date time repo resource
32:30 - url and notes and then the values
32:34 - i'm going to modify here
32:35 - to be equal to the corresponding fields
32:37 - that i have so for the first value which
32:39 - is my day
32:41 - i want this to be
32:43 - let's go with day input
32:46 - and then dot value
32:48 - okay for the next value i need to put
32:50 - inside of curly braces because i'm
32:52 - accessing variables here i want the date
32:54 - so i'm going to go with the date input
32:56 - dot value
32:57 - okay
32:58 - and then for the repo i'm gonna go with
33:01 - the repo input or what did i call this
33:04 - um
33:05 - oh select one i gotta rename this let's
33:07 - call this repo input okay
33:09 - so now we're going to make this the
33:12 - repo
33:13 - input dot value
33:16 - and you can probably guess what we're
33:17 - going to do for the next one we're going
33:18 - to do the
33:19 - resource url what i call this
33:22 - this is the url and input spelled
33:25 - incorrectly so let's fix that name okay
33:27 - so let's go with
33:29 - the url
33:31 - and then input dot value
33:34 - and then finally after this
33:36 - we want the notes so i'm going to go
33:38 - with the note input
33:39 - dot value
33:41 - okay so there we go now we have all of
33:42 - the information that would have been
33:43 - typed into this form so what happens is
33:46 - we're now going to need to trigger this
33:48 - query whenever we hit the log button
33:50 - which i will show you in a second
33:52 - however we're not really going to know
33:53 - if this works yet until we actually able
33:55 - to display the data so now let's make a
33:57 - table that can display the data from
33:59 - another query that we're going to write
34:00 - which will give us essentially all of
34:02 - the rows from this new table that we
34:04 - made so i'm going to go to insert
34:06 - let's go with table
34:08 - okay we'll add a heading for it later
34:10 - but for now i just want the data and for
34:12 - the data in this table i'm going to
34:14 - delete all of this
34:16 - and we'll make it equal to a query that
34:17 - we're going to create now so i'm going
34:19 - to make a new query
34:20 - and let's call this query
34:24 - get logs
34:25 - and we're just going to say select
34:27 - asterisks from and then a hundred
34:30 - again it's not going to be 100 it's
34:31 - going to be days of code okay
34:34 - so let's actually preview this query
34:36 - we're gonna see that we get id
34:38 - day date time repo resource url and
34:40 - notes because those are all the columns
34:42 - that we have but we currently have no
34:43 - data in here so we're not getting any
34:45 - rows
34:46 - okay
34:47 - uh if i go to create table i'll just
34:50 - mention to you that the name of the
34:51 - table is days of code so that's why i'm
34:53 - using days of code when i'm selecting
34:55 - from the table same with inserting i'm
34:57 - inserting into days of code okay so
34:59 - let's go to get logs here this is the
35:02 - query that we want to now run or we want
35:05 - to use for this table so for this table
35:08 - here i'm going to say get
35:10 - logs dot
35:11 - and then it's either data or values okay
35:14 - data is good you can see all of our
35:15 - columns are showing up
35:17 - now what we want to do is make it so we
35:19 - hit the log button we actually call the
35:21 - insert log query and then we run that
35:24 - query and insert the data so let's go to
35:26 - the log button
35:27 - and let's go to our event handlers now
35:30 - let's make a new event the event is on
35:32 - click the action is trigger query but we
35:35 - could do a bunch of other things like
35:36 - confetti as well i'm going to show you
35:38 - that in a second actually because the
35:39 - confetti is really cool but now for the
35:41 - query it's going to be insert log and
35:43 - that's actually all we need to do we
35:44 - just run the insert log query it already
35:47 - has that there for us perfect now we can
35:49 - make another event handler so i'm going
35:51 - to go event handler
35:52 - and if i wanted to i can make it so
35:54 - confetti is going to go on the screen
35:56 - when we click this so i could go
35:58 - confetti or export data or anything else
36:00 - however i only want to show confetti if
36:02 - this is successful so i'm going to show
36:04 - you how we can do that it's not going to
36:05 - be from here
36:06 - anyways now let's actually insert some
36:08 - data and let's see if this works so for
36:10 - a repository let me select kibi
36:13 - let's just go https
36:14 - coloncolontechwithtim.net
36:18 - okay for the text i will go with
36:22 - hello world because this is day one and
36:24 - then let's hit lock
36:26 - okay so it looks like that happened
36:28 - successfully but notice this table
36:30 - didn't update now the reason this table
36:32 - didn't update is because we haven't
36:34 - re-ran the get logs query so it's only
36:36 - going to show us what this query is
36:38 - displaying and we haven't re-ran it so i
36:40 - need to manually run this to update it
36:42 - or we can actually have it so this query
36:44 - gets triggered when the insert log query
36:47 - is finished which i'll show you how to
36:48 - do in a second for now though let me
36:50 - just refresh
36:52 - which is going to rerun the query so i
36:53 - did that and now we can see we have id 1
36:56 - day 1 date time repo resource url and
36:58 - notes and it's going to give us to them
37:00 - give it to us in html sorry
37:03 - perfect okay so that is showing up that
37:05 - is working now one thing i do want to
37:06 - add is an ability to delete this i'll do
37:09 - that last though because that's pretty
37:10 - easy for now though i want to make it so
37:12 - when we hit the log button and we run
37:14 - the insert log query if this is
37:16 - successful we update this table
37:18 - automatically we don't have to hit
37:19 - refresh so to do that i'm going to add
37:22 - an event handler to this query which is
37:24 - something you can do which is really
37:26 - cool and i'm going to say on success
37:28 - trigger query and the query i want to
37:30 - trigger is
37:32 - get logs
37:33 - so now that query will be reran and the
37:36 - table will automatically be updated
37:38 - whenever we add an item in so let's test
37:40 - this let's make the day 2.
37:42 - let's increment the date to the 16th
37:46 - we can change the repo here hello world
37:49 - two all right so let's hit the log
37:51 - button and now notice when i do this it
37:53 - automatically updates the table for us
37:55 - and adds this new entry awesome okay so
37:58 - now what i will do is make it so
38:00 - confetti shows up when this is
38:01 - successful so to do that i can go to
38:04 - the insert log and i can add a new event
38:07 - handler and on success i can simply put
38:10 - confetti
38:11 - awesome and that means whenever i hit
38:13 - log in is successful confetti will show
38:14 - up on the screen i can also add another
38:16 - event handler
38:17 - and say on failure
38:19 - then what i want to do is not run a
38:21 - query but i actually want to show a
38:22 - notification so i'm going to say show
38:24 - notification i'm going to say
38:27 - failure like that
38:29 - and we'll go
38:31 - failed to create lock okay
38:34 - and then let's go for type let's go with
38:37 - error
38:38 - duration we'll just leave it at the
38:40 - default of 4.5 and that looks good to me
38:42 - okay so let's save and i'll show you
38:44 - actually how we can do a failure if i
38:47 - try to add a day that already exists
38:49 - because of a constraint i have in the
38:50 - database this will fail so if i hit log
38:52 - now notice we get failure failed to
38:54 - create log right because this day
38:56 - already exists now if i make this day
38:57 - three and i log then we get confetti
39:00 - showing up on the screen awesome
39:02 - okay so that is now updating the table
39:04 - we're able to create the logs let's now
39:06 - see how we can delete the logs so to
39:08 - delete the logs i want to add a new
39:10 - column in here that says actions or
39:13 - something like that and i have a little
39:15 - button that says delete and when i hit
39:16 - delete i'm going to run another query
39:18 - that's going to delete this from the
39:19 - table so we can make that query first
39:22 - let's go new resource query
39:24 - let's say
39:28 - delete log and then let me reference my
39:31 - cheat sheet here although this is pretty
39:32 - straightforward to write we're going to
39:34 - say delete from this is going to be days
39:36 - of code i could put capitals but
39:38 - lowercase is fine and i'm going to say
39:40 - where
39:41 - day
39:42 - is equal to and then this is going to be
39:45 - what's this table name let's call this
39:49 - logs table
39:50 - okay so let's go
39:53 - logs table like that dot selected row
39:56 - dot id
39:57 - uh actually n is id going to work
40:01 - yes i think id will work i think that's
40:03 - fine okay so logs table dot selected row
40:05 - and then sorry this is going to be data
40:09 - dot id and that should give me the
40:12 - correct id perfect now notice if i
40:14 - select say this here and i go to id it's
40:17 - showing me four so it's going to delete
40:18 - the item with id equals that which
40:21 - actually means i need to change this
40:22 - sorry to be where id equals this because
40:24 - i was going to do day but i changed my
40:26 - mind and now we're going to do id all
40:27 - right so all this is going to do is
40:28 - delete whatever the row is that we are
40:31 - on however we're only going to trigger
40:32 - this query when we hit the delete button
40:35 - on one of these rows so let's now add a
40:37 - delete button so to do that i need to
40:39 - add another column so if i'm in this
40:42 - table let's go custom column
40:44 - let's call this
40:47 - actions okay column type will be
40:52 - can i do like a button do they have a
40:54 - button here uh looks like there might be
40:58 - let me look here
40:59 - okay button awesome so we can do button
41:01 - uh the value of the button we can just
41:04 - say
41:05 - delete that's fine for now and then on
41:08 - click of the button we want to run a
41:09 - query the query we want to run is delete
41:12 - log
41:13 - perfect that's all we need to do so now
41:16 - when i hit the delete button let's test
41:17 - it out
41:18 - it should just delete this item and it
41:20 - did actually delete it so if i refresh
41:22 - here you can see it's going to go away
41:23 - the issue is again we have we aren't
41:26 - manually calling the query to
41:28 - automatically refresh the table so we
41:30 - need to do that in the delete query
41:32 - event handlers so now when i go to sorry
41:35 - not delete query delete log when i go to
41:36 - delete log on success i'm going to
41:38 - trigger a query and this query is going
41:40 - to be get logs like that so now when we
41:43 - hit delete it should automatically
41:45 - update the table now let's add another
41:47 - event handler though to show uh confetti
41:49 - so let's go
41:51 - confetti on success nice
41:53 - and then one more for an error
41:55 - let's go
41:57 - event failure
41:58 - and let's go show notification
42:01 - we'll do
42:04 - failure like that and then we'll say
42:06 - could not
42:08 - delete log
42:10 - and type will be air
42:12 - perfect
42:14 - okay so let's try to add another log
42:17 - uh we can add day three sure
42:19 - let's log that
42:20 - okay it shows up uh the day is three id
42:23 - is five okay let's try to delete this
42:25 - one
42:26 - and automatically refreshes
42:28 - awesome so with that said we're pretty
42:30 - much done uh the last thing i'll do is
42:32 - just add a title here above this just so
42:35 - this is a little bit cleaner so let's
42:37 - give some space
42:38 - let's insert some text
42:42 - okay i want it to go about right here
42:45 - this text will be in markdown and we'll
42:48 - go with three headers and we will say
42:52 - i guess days
42:55 - of code logs and we might as well just
42:57 - put 100 days
43:00 - okay 100 days of code logs nice now i
43:02 - want this to be centered so let's center
43:03 - that and that looks good to me awesome
43:06 - so now we've completed this app and if
43:08 - we want to preview it we can go to
43:10 - preview
43:11 - and let's see how it looks okay so that
43:12 - looks a lot better than in our kind of
43:14 - ui earlier so now what i can do is type
43:17 - in username so let's go to tech with tim
43:19 - it's showing all of this and then we'll
43:20 - be able to see all of our data and
43:22 - create locks
43:24 - awesome all right so that is going to
43:26 - wrap up this application we also have a
43:28 - header that we could have modified but
43:29 - i'm not going to modify that for right
43:30 - now or really worry too much about the
43:32 - styling if you guys would like to view
43:34 - the code for this application i will
43:35 - leave a link to it in the description so
43:37 - you can just copy and paste anything you
43:39 - like and you can actually mess around
43:40 - with this app and view it kind of in the
43:42 - testing mode but yeah that's pretty much
43:44 - all i have for you so i hope you guys
43:46 - enjoyed the video if you did make sure
43:47 - to leave a like subscribe to the channel
43:49 - one more massive thanks to retool for
43:51 - sponsoring this video and i will see you
43:53 - in another one
43:56 - [Music]