00:00 - hello everybody and welcome to video 6
00:02 - in this tutorial Series where I'll be
00:04 - showing you how to deploy our cartei
00:06 - decentralized application now before I
00:08 - get into all of the steps I just wanted
00:09 - to show you this site here which is
00:11 - called rollup laab the URL is rollup la.
00:14 - it's powered by caresi and it showcases
00:17 - a bunch of interesting projects that
00:18 - have been built using cte's framework
00:21 - most of these are Community projects
00:22 - some of them are built during things
00:24 - like hackathons and you guys can
00:26 - definitely be a part of this and check
00:27 - it out for inspiration in fact one of
00:29 - cartez these main goals is actually to
00:31 - get more developers reaching out to them
00:33 - and experimenting with the technology
00:35 - they have a team called the dev ad team
00:37 - which is happy to talk to any of you on
00:39 - one-on-one calls brainstorm ideas give
00:42 - you some inspiration Etc and that team
00:44 - is also offering up to $5,000 to build
00:47 - decentralized apps with cartei
00:49 - development tools Etc so if you're
00:51 - interested at all in building something
00:53 - definitely reach out to their team you
00:54 - can also submit any existing project
00:56 - that you've built and it's uh possible
00:58 - you'll be eligible for some grants money
01:00 - or at least to get some mentorship and
01:02 - other opportunities now what I want to
01:03 - do is go through the deployment steps so
01:06 - what we'll be doing here is deploying to
01:07 - a test Network so obviously you don't
01:09 - need to have any ethereum you don't need
01:11 - to have any money to be able to do this
01:12 - but there are a few steps that we're
01:14 - going to go through so first thing here
01:16 - is we're going to open up our project in
01:17 - Visual Studio code or whatever code
01:19 - editor you want to use now there's a few
01:21 - files that we're going to modify just to
01:24 - specify the name of our decentralized
01:26 - app so when we go through the deployment
01:28 - process we know what it is so first of
01:30 - all we're going to go to Docker uh-
01:32 - bake. override HCL now I've already
01:36 - changed this but for you guys you'll see
01:37 - that we have things like Target server
01:39 - console machine and you'll have dap
01:42 - colon then you'll have a name here and
01:45 - then kind of the tag server tag console
01:47 - Etc now in your case you're probably
01:49 - going to have something like Echo python
01:51 - here what you want to change this to
01:52 - instead is rock paper scissors or
01:55 - whatever name you want to give this
01:56 - decentralized app so just make sure in
01:59 - your Docker bake
02:00 - that after Dap You have a name that
02:02 - you're going to remember so actually
02:03 - just copy it rock paper scissors now
02:05 - change that in all of these places now
02:08 - we're also going to go to the docker
02:10 - compose file and same thing here where
02:12 - we have our server manager we're going
02:14 - to make sure that we change the name so
02:16 - that rather than Echo python it's rock
02:19 - paper scissors now don't delete the
02:20 - devil server leave that just wherever
02:22 - you see the existing name like Echo
02:24 - python you're going to want to modify
02:26 - that now if we go in the docker file
02:28 - this should be fine we don't need to
02:29 - change anything here we can look in some
02:31 - of the other files and I think that's
02:33 - all good it's just this Docker bake and
02:35 - this Docker compos file that we're going
02:37 - to want to modify so now that we've made
02:39 - those changes the rest of the steps that
02:40 - we're going to follow are just going to
02:42 - be in our Dev guide so I'm going to open
02:44 - up the dev guide here on the left hand
02:45 - side of my screen I'll open up WSL on
02:48 - the right hand side and we can start
02:50 - going through some of these commands now
02:52 - I'm just going to follow this step by
02:53 - step so please open this up on your
02:55 - computer as well so you have all of the
02:56 - commands to copy and paste first thing
02:58 - we're going to do is is we're going to
03:00 - sign up to Alchemy which will allow us
03:02 - to have some URLs for our application
03:05 - and to actually get some test net
03:07 - ethereum now we're going to use the
03:08 - sapoia test Network so ethereum sapoia
03:11 - test net that's just the one we'll do
03:13 - for this tutorial but there's a few
03:14 - other that you can use sorry like
03:16 - arbitrum optimism polygon Etc we're just
03:19 - going to use spolum for here so let's go
03:21 - over to Alchemy actually let me just
03:23 - open that in a new tabs we're going to
03:25 - scroll all the way down here until we
03:27 - get to the deployment instruction
03:30 - okay deployment I'm just going to right
03:32 - click and open a new tab so we still
03:34 - have that available now I already have
03:35 - an account so I'm just signed into it uh
03:38 - but what you'll do is make a new Alchemy
03:39 - account and then we're going to make a
03:41 - new app so I've already got an app
03:43 - created here but I can go ahead and make
03:44 - a new one so create new app and we're
03:47 - going to give this a name now I'll just
03:49 - call this rock paper cartesia like that
03:52 - I don't need to give it a description
03:53 - that's fine and for the network we're
03:55 - going to change this to ethereum sepolia
03:58 - okay so just make sure you have an app
03:59 - name it whatever you want make sure the
04:01 - Chain's ethereum and the network is
04:03 - ethereum sepolia okay so now this has
04:06 - been created we'll just leave this page
04:08 - open because we're going to use this
04:09 - later on now what we need to do is we
04:11 - need to get some sapoia test net
04:13 - ethereum so we're able to actually
04:15 - deploy our app because we need a little
04:17 - bit of ethereum to pay the gas fees on
04:19 - the test Network don't worry this is
04:21 - completely free so what we'll do is go
04:23 - to the sapoia faucet so again I'm going
04:25 - to open this link in a new tab here and
04:27 - we need to sign in with Alchemy so we're
04:30 - going to click Alchemy login we're going
04:31 - to sign in should just automatically
04:33 - sign you in if you were signed in with
04:34 - the other Tab and we're going to open up
04:36 - metamask now for metamask we got to type
04:39 - in our password so let me do that first
04:42 - and we're going to go to any account
04:43 - that we want so in this case I'll just
04:45 - go to account number one I already have
04:47 - some ethon here but that's fine what
04:49 - we'll do is we'll copy the clipboard the
04:51 - address and we'll make sure that we're
04:53 - on the aoia network so if we go to
04:54 - networks we should have the test
04:56 - networks down here if you don't see them
04:57 - you can toggle this button and click on
04:59 - on seoa again you're going to copy the
05:01 - address of whatever account it is that
05:03 - you want to use we'll have to eventually
05:05 - have uh some ethon 2 accounts but I'll
05:07 - show you how to do that in a second and
05:08 - we'll paste our wallet address we'll do
05:11 - the capture and we'll just say send me
05:13 - eth so it should send us some ethereum
05:15 - might take a minute or two to go through
05:17 - but it should kind of pop up the
05:18 - transaction here and just give us some
05:21 - of this test net eth all right so now I
05:23 - have sufficient ethereum because I've
05:25 - used that faucet and what I can do is
05:27 - actually start building my application
05:29 - for deployment mode so what we're going
05:31 - to do is copy this Command right here
05:34 - and we're going to go into our terminal
05:35 - again if we're on Windows we're going to
05:37 - use WSL and we're going to change into
05:39 - the directory where our application is
05:41 - so in this case it's going to be CD rock
05:43 - paper scissors okay so I'm inside of the
05:45 - rollups examples rock paper scissors and
05:48 - I'm going to paste this command and I'm
05:50 - going to make sure the docker desktop is
05:51 - running all right so my Docker desktop
05:53 - is running and we're going to go to
05:55 - where it says Network here and we're
05:57 - just going to change this to say sapoia
05:59 - now make sure it's sapoia not sepoi this
06:02 - is actually just a small typo that
06:03 - should be resolved in the version that
06:05 - you have but for me we'll just put seoa
06:07 - okay so we're going to go ahead and hit
06:09 - enter and it should build everything
06:11 - that we need once that's done I'll be
06:13 - right back keep in mind this can take a
06:15 - minute or two there's quite a few things
06:16 - it does need to build so the build phase
06:19 - is now finished and we are ready to
06:20 - actually deploy the onchain components
06:23 - for our cartei dap now what we'll be
06:26 - deploying is something known as the
06:27 - cartei DAP Factory which will be the
06:30 - onchain part of our whole decentralized
06:32 - app later we'll then actually run a node
06:35 - and the node will be what's sitting
06:36 - offchain communicating on chain and kind
06:39 - of logging the results of the rollups
06:42 - anyways to be able to perform this
06:43 - deployment we need to actually export a
06:46 - few variables so the first thing we're
06:47 - going to need to get access to is our
06:49 - 12w neonic I don't know if that's how
06:51 - you pronounce it but essentially the 12
06:53 - word secret key that gives us access to
06:55 - our metamask wallet now it's very
06:57 - important for this next step that you
06:59 - are alone and that you're not sharing
07:01 - this information with anybody even in my
07:04 - case it's a bit risky to be recording
07:05 - this because you guys can access my
07:07 - wallet fortunately I don't have any
07:08 - funds here so even if I were to leak
07:10 - something it's okay but as soon as you
07:12 - get access to these this 12w pneumonic
07:14 - here you want to make sure no one's
07:16 - looking at your computer you don't store
07:17 - this anywhere insecure because this will
07:19 - give access to your entire metamask
07:21 - wallet but we do need this for the
07:23 - deployment phase so if you already know
07:25 - where that is great if you don't I'll
07:27 - show you how to retrieve it from
07:28 - metamask so if you open up metamask here
07:31 - and you go to the three dots and you
07:32 - click on settings you can go to security
07:34 - and privacy and what we want to do is
07:36 - reveal our secret recovery phrase now
07:39 - it's going to ask you a few questions uh
07:41 - and it's going to say for example if you
07:42 - lose your secret recovery phrase
07:43 - metamask cannot help you okay if someone
07:47 - is asking for this phase you're being uh
07:50 - scammed sorry so we'll go here and then
07:51 - we'll click continue okay so now we need
07:53 - to enter our password and make sure no
07:55 - one is looking I will hide this part
07:57 - here but once you enter the password it
07:59 - will will give you that kind of 12-word
08:01 - key and then we're going to use that in
08:02 - our terminal in a second so make sure
08:04 - you copy it all right so I have my
08:06 - 12-word pneumonic now what we're going
08:08 - to do is export a variable here in our
08:10 - terminal so I'm going to go to clear and
08:12 - I'm going to type export and then in
08:14 - capitals this is going to be m n m o n i
08:18 - c pneumonic is equal to and inside of
08:21 - Double quotation marks we are going to
08:23 - paste our kind of secret recovery uh
08:25 - phrase sorry which should be those 12
08:27 - words so paste them inside of here then
08:29 - hit enter I'm going to do that then
08:31 - clear my terminal so you guys don't see
08:33 - them but make sure that you do this in
08:35 - the instance of the terminal where
08:37 - you're going to be running the following
08:38 - commands if you were to stop the
08:40 - terminal and restart it you would
08:42 - actually need to repeat this step again
08:44 - because this variable only exists in the
08:46 - current instance of this terminal again
08:48 - meaning as soon as you close the
08:49 - terminal or you're using a different
08:50 - terminal you would need to repeat this
08:52 - step okay let me go ahead and do that
08:53 - I'll be right back all right so my
08:55 - 12-word phrase is now exported as the
08:58 - variable here which gives us access to
08:59 - metamask keep in mind by default this
09:02 - will use the first account that you have
09:04 - in metamask when it does the deployment
09:06 - now the next thing we need is not
09:08 - something that's secret and this is
09:09 - going to be the sepolia RPC URL so what
09:12 - we're going to do is go over to Alchemy
09:14 - we're going to click on API key here
09:16 - obviously don't leak your API key but
09:18 - for the uh URL we need just this https
09:21 - URL it's fine if this is leaked so we're
09:24 - going to copy that here we're going to
09:26 - go back to our guide and we're going to
09:28 - type export and then
09:30 - RPC URL and this will be equal to and we
09:34 - can simply paste the URL here okay so
09:36 - now we have the URL and we have the
09:38 - pneumonic now what we're going to do is
09:40 - actually deploy this uh to the Target
09:43 - Network so we're going to copy this
09:44 - Command right
09:46 - here okay we're just going to fix any of
09:49 - the potential line breaks sometimes you
09:50 - can copy in a new line character so
09:52 - that's why I fix that right there I'm
09:54 - going to go to EnV and I'm going to
09:56 - change this topolia so where we see
09:59 - Network we need to replace that with the
10:00 - network name which is sepolia and for
10:02 - the DAP name this is going to be the
10:04 - name that we changed in the very first
10:05 - step of the video where we were in those
10:08 - kind of Docker files and we changed it
10:10 - from Echo python to rock paper scissors
10:13 - so we'll say rock paper scissors like
10:16 - that just to clarify again if we go to
10:18 - VSS code it's what you have here that we
10:20 - changed in the docker bake and the
10:22 - docker compos override okay that's the
10:24 - DAP name so let's go back open up our
10:28 - guide and we're going to go ahead and
10:30 - hit enter now what this should do is
10:32 - spin up the necessary I don't know
10:34 - volumes containers Etc and then actually
10:37 - deploy this to the test Network that
10:39 - we're using so give this a second to run
10:42 - once it's finished I'll be back all
10:43 - right so the deployment is finished you
10:45 - can see some logging information here
10:47 - and now that this is done what we're
10:49 - going to do is tear down the components
10:51 - and the volumes that we no longer need
10:53 - and we're going to do that by copying
10:55 - the command that is in the next step of
10:57 - our Dev guide so we're going to C copy
10:59 - this in here again we're going to fix
11:01 - our line braks and we're going to
11:03 - replace wherever it's this network with
11:04 - the test Network we're using which in
11:06 - this case is sepolia and the DAP name
11:09 - with the DAP we deployed which is rock
11:12 - paper scissors like that okay so go
11:15 - ahead and hit enter it's going to remove
11:17 - all of those containers and volumes that
11:19 - we no longer need now we can go ahead
11:21 - and press clear now at this point we've
11:23 - kind of done the onchain component where
11:25 - we've deployed this cartez dap Factory
11:28 - which essentially creat the DAP on chain
11:30 - for us what we'll need to do next is run
11:32 - node now this is just like running a
11:34 - regular ethereum node in this case we're
11:36 - running it on Layer Two but this node
11:38 - will actually run the back end for us
11:40 - and allow us to inspect the state and
11:42 - see information about our app so this is
11:44 - also one of the advantages of cartei is
11:46 - that we can create our own
11:48 - infrastructure and run our own nodes and
11:50 - anybody that's interested in the state
11:52 - of our application can either use an
11:53 - existing node that maybe we Expos to the
11:55 - internet or they can just run their own
11:57 - node and they can process all of the
11:59 - inputs that have gone through sorry and
12:01 - the state of the cartisian machine will
12:02 - be at whatever the current state of it
12:04 - is on the network I'm hoping that makes
12:06 - a bit of sense but in order to actually
12:08 - use the application you need to have a
12:09 - running node uh it relies on these nodes
12:12 - that are on Layer Two it's kind of the
12:14 - whole part of the framework anyways what
12:17 - we can do now is we can have a look at
12:20 - what the address of our deployed
12:22 - contract is by using this cat command or
12:24 - we can just go and do it from vs code so
12:26 - if we go to vs code here we can go into
12:29 - the deployment folder and you should see
12:31 - that we have a folder for sepolia so if
12:34 - we click here you can see we have roll
12:35 - ups. Json and we have rock paper
12:37 - scissors and this gives us the address
12:40 - of our dap so this is something we'll
12:41 - use later on but just keep in mind that
12:43 - we have that information inside of seoa
12:46 - okay now that we have that let's go back
12:50 - and run the node and then I'll show you
12:52 - how we interact with it from the front
12:53 - end so next thing we need to do here in
12:56 - the same terminal instance as before is
12:58 - need to export the WSS URL which is the
13:01 - web socket endpoint so what we'll do is
13:04 - go to Alchemy we'll go to API key again
13:07 - and we'll copy the WSS uh URL we're then
13:10 - going to go here and type export WSS
13:14 - okay so WSS URL let's make sure that's
13:18 - all in capitals and this will be equal
13:20 - to and we'll paste the URL in here okay
13:23 - so now we have all the variables in this
13:25 - instance we have the neonic we have the
13:27 - RPC URL and we have the WSS URL now what
13:31 - we'll do is we'll actually build a
13:33 - server manager for our Target Network
13:35 - and then run a validator node which will
13:38 - just be happening on our local computer
13:40 - now I'll talk more about how these nodes
13:41 - work and how to run different instances
13:43 - later on but what we want to do for now
13:45 - is simply build this so we're going to
13:46 - copy this command paste this in notice
13:49 - sepolia is already in uh inputed for us
13:52 - sorry for the network argument so we're
13:54 - going to have Docker build X bake server
13:55 - load set the argument of network to a
13:58 - polio so let's hit enter again give that
14:01 - a second to run and then I will be right
14:03 - back okay so our build is now complete
14:05 - and all we need to do is run this
14:06 - validator node now you'll notice there's
14:08 - two commands here the one below for host
14:10 - mode is if you want to actually be
14:12 - debugging the application while you're
14:13 - running it you can run it in host mode
14:16 - we don't need to do that we're just
14:17 - going to run this normal validator node
14:19 - now again I am just going to fix some of
14:23 - the line breaks here because when you
14:24 - copy in the command sometimes you get
14:25 - those new line characters I'm going to
14:27 - change the network to be POA and for the
14:30 - DAP name same thing we want this to be
14:34 - rock paper and scissors or whatever you
14:37 - change the name to okay so go ahead and
14:40 - run that going to take a second to spin
14:43 - up and now we have a validator node
14:46 - which is actually running our backend
14:47 - inside of the cartez machine so at this
14:50 - point our dap is pretty much deployed we
14:53 - have what we need on chain and we have
14:56 - the backend validator node running now
14:58 - again you can run as many of these nodes
15:00 - as you want and if you wanted this to be
15:02 - available to anyone you would need to
15:04 - expose the port that this is running on
15:06 - to the Internet so it gets a little bit
15:08 - more complex in that instance but pretty
15:11 - much we have a server running on Port
15:13 - 50005 which gives us access to inspect
15:17 - the cartisian machine right so if we go
15:19 - back to our front end I'll kind of
15:21 - explain some things while this runs in
15:22 - the background we have this default URL
15:24 - right this URL is what we're sending
15:26 - requests to to get information about the
15:29 - state of the carian machine now in this
15:31 - instance since we're running this
15:32 - validator node on our local computer
15:35 - this is going to work completely fine
15:36 - and we don't need to change anything
15:37 - because we're connected to our own node
15:39 - running on Local Host if we wanted to
15:41 - connect to a different node that wasn't
15:43 - running locally then what we need to do
15:45 - is put the public IP address of that
15:47 - node or whatever the domain is and then
15:50 - 50005 SL inspect right so we would have
15:53 - to have some node that's exposing this
15:55 - port or exposing whatever Port they want
15:57 - to forward it through and we would have
15:59 - to connect to that node and then use the
16:01 - correct um kind of address right SL
16:03 - inspect I'm hoping that makes a little
16:05 - bit of sense but this is just like
16:06 - connecting to any other node on any
16:08 - blockchain network if we want to be
16:10 - sending requests to it well we need to
16:11 - know the address of that and the port
16:13 - Etc in our case since we're running it
16:15 - on our local computer we're fine we
16:17 - don't need to change this now what we do
16:19 - need to change in our front end is the
16:21 - address of our decentralized application
16:23 - and the input box address now the DAP
16:26 - address we can find by going to
16:28 - deployments sepolia and then rock paper
16:31 - scissors right so we'll just go and
16:33 - we'll copy the address here and we'll
16:35 - put that as our dap address this is
16:37 - going to change now because we're
16:38 - running this on a different network so
16:40 - there you go that's our dap address next
16:42 - thing we need to do is find the input
16:43 - box address now contracts like input box
16:47 - are part of the rollups framework which
16:50 - are deployed by cartei on the different
16:52 - test networks that are available or on
16:55 - ethereum mainnet for example in this
16:57 - case we're working on sapoia
16:59 - so all of the different contracts that
17:00 - you need like input box are already on
17:03 - there and they've been deployed for you
17:04 - by cares you don't need to deploy a
17:06 - duplicate version of these it's just one
17:08 - that works for all of your cartez daps
17:10 - so what we'll do is we'll just go to a
17:12 - URL that I'll leave in the description
17:14 - that shows you what all of the addresses
17:15 - of these contracts are so this is in the
17:17 - description we have all of the
17:19 - deployments for all of the rollups that
17:21 - are on chain so we have main net
17:23 - optimism Etc we want sapoia now here you
17:26 - can see all of the different contracts
17:28 - that exist this that can be used for
17:29 - again kind of transferring assets Etc
17:32 - we're going to go to input box because
17:33 - this is what we use to send inputs to
17:35 - our D now we're going to copy the
17:37 - address here don't worry again this will
17:39 - be linked in the description so you can
17:41 - find this exact page and we're just
17:43 - going to change the input box address
17:46 - here to be that okay so now what we've
17:49 - done is we've modified the DAP address
17:51 - we've modified the input box address and
17:53 - that's it we can now run our front end
17:54 - and interact with our onchain dap so
17:57 - we're going to see the inter rock paper
17:58 - scissors CD into front end and yarn
18:01 - start once that starts I'll be right
18:03 - back and I'll show you how we interact
18:05 - with the DAP okay so our front end is
18:07 - now running and you can actually see
18:08 - that we're getting some logs here on the
18:10 - right hand side of our screen that are
18:12 - showing that the inspect request that
18:14 - we're sending is actually working
18:15 - properly you can see when I send the
18:17 - inspect request story we get received
18:19 - finished status received inspect request
18:21 - data Etc gives us the logs we had before
18:23 - we were running this in development mode
18:25 - so interacting with this node is working
18:27 - locally
18:28 - now what we want to do is make sure we
18:30 - can actually send inputs now remember
18:32 - sending inputs requires the blockchain
18:35 - so let's try to create a challenge and
18:37 - see how this works so we go to create
18:39 - challenge okay we're going to send a uh
18:41 - what do you call it transaction here
18:43 - this will use the input box contract and
18:46 - send the transaction to the DAP address
18:49 - that we specified in our front end and
18:51 - remember we've changeed that now so that
18:53 - that is the DAP address of our onchain
18:56 - uh kind of cartei dap right so that
18:58 - transaction has been sent and I will
19:01 - note that it will take a little bit of
19:02 - time here could take up to a few minutes
19:04 - for us to actually get this update in
19:06 - our front end and the reason for that is
19:08 - that we had to use the blockchain so we
19:10 - need to wait for a certain number of
19:12 - confirmations before this is actually
19:14 - going to pop up in our back end and be
19:15 - handled by the back end so just be
19:17 - patient wait a little bit and then once
19:20 - our backend gets that advanced uh kind
19:22 - of request data here when we update our
19:25 - challenges we should see that updated
19:27 - challenge so right now we're not seeing
19:28 - it again we're just going to wait a few
19:30 - minutes we'll get the request popping up
19:32 - in the back end and then we'll be able
19:33 - to interact with it like we did before
19:35 - so this input has now been handled by
19:37 - our back end if I scroll up you can see
19:39 - some logs related to it like the payload
19:41 - input Etc and you can see here now that
19:44 - we have challenge zero which is our
19:45 - active Challenge and we're just waiting
19:47 - on an opponent so now what we should be
19:49 - able to do is change over to another
19:51 - account notice I have some uh test
19:53 - ethereum here in this account as well CU
19:55 - I set that up and when we refresh the
19:57 - page you you see now that we have the
19:59 - ability to accept the challenge so I'm
20:01 - working exactly like before I can change
20:03 - this to paper and click on accept
20:05 - Challenge and now similar thing we're
20:07 - just going to need to wait for all of
20:08 - the confirmations and then the input
20:10 - will get sent to our backend and then we
20:13 - should have the ability to reveal our
20:14 - moves once that's finished and the back
20:16 - end picks up this input I'll be back and
20:19 - we'll kind of repeat you know the reveal
20:20 - process and just make sure everything is
20:22 - working all right so the next input has
20:24 - been accepted here by the backend and
20:26 - you can see now we have the same state
20:27 - we have when we're doing local
20:29 - development the opponent has a move
20:30 - that's hidden we have a move that's
20:32 - hidden we can go ahead and reveal so
20:34 - let's click on this and send the reveal
20:37 - transaction and then we'll go do the
20:38 - same thing from the other account so
20:40 - let's switch over here to our account
20:43 - number one and
20:46 - refresh and reveal the move okay and now
20:50 - we'll wait for both those inputs to be
20:51 - handled and we'll just make sure that
20:53 - everything's kind of working properly
20:54 - and that we see the log of the winner
20:57 - which I believe should be the player who
20:59 - selected paper which I think was account
21:01 - number two all right so both those
21:02 - inputs have been processed now by the
21:04 - back end and we can see that we were
21:06 - getting the log of the challenge saying
21:07 - the winner is the opponent the opponent
21:09 - made the move paper and we made the move
21:12 - Rock now if we go back to our other
21:15 - account here and we give this a refresh
21:18 - we should see that we get the opposite
21:19 - we are the winner because we made the
21:21 - move paper and the opponent made the
21:23 - move Rock so everything is working our
21:25 - deployment is successful again it's
21:27 - going to take longer on a real Network
21:29 - when you need to process those
21:30 - transactions so just be patient and I
21:32 - promise you things will pop up we did
21:34 - everything properly and you can see the
21:35 - deployment process was actually
21:37 - relatively straightforward so that is
21:39 - pretty much it just to clarify what you
21:40 - would need to do if you want this front
21:42 - end to actually be working for anyone
21:44 - first of all you need to deploy the
21:45 - front end so you'd have some kind of URL
21:47 - and just deploy this using whatever you
21:49 - normally would you could use for sell or
21:50 - something you need to have some kind of
21:52 - node this node would need to expose the
21:54 - port for the inspect server and then you
21:56 - just need to have the front end
21:58 - communicate with this node or any node
22:00 - that you want to be able to get
22:02 - information about the caresan machine
22:04 - once you do that everything should just
22:06 - be working and you'd have a fully
22:07 - decentralized application that anyone
22:10 - with a metamask account or really any
22:11 - blockchain network account would be able
22:13 - to access and use so now as we wrap
22:15 - things up I will quickly show you
22:17 - another tool that you might find useful
22:19 - if you start working with cartez more
22:21 - and doing some more deployments building
22:23 - Etc now this tool is called Su noo I'm
22:26 - not sure actually how you pronounce this
22:28 - I'll leave the link in the description
22:29 - but this is a framework for developing
22:31 - decentralized applications built on top
22:33 - of caresia Technology it helps
22:35 - developers to create build run test
22:37 - deploy Monitor and doctor or verify
22:39 - their application so a lot of the
22:41 - complex commands that we just went
22:43 - through using Docker Etc we wouldn't
22:45 - need to actually type in if we're using
22:48 - the Sue noo package so this just again
22:50 - kind of wraps and Abstract some of the
22:52 - things that we went through and created
22:54 - manually and gives you a kind of better
22:56 - API and experience I for actually
22:59 - working with and developing caresia daps
23:01 - so with that said that will wrap up this
23:03 - video in the next videos in the series
23:05 - we'll go more in depth the carteia life
23:07 - cycle and architecture and we'll talk
23:09 - about some next steps and things you
23:11 - might want to consider as you continue
23:12 - to get better at web3 development and
23:15 - working with Technologies like caresia I
23:17 - hope you enjoyed this video and I look
23:18 - forward to seeing you in the next
23:21 - [Music]
23:26 - one