00:00 - hey guys and welcome back to the second
00:03 - video in my programming problem-solving
00:07 - series and in today's video we're moving
00:09 - into a bit more of a complex problem so
00:12 - the last video I did we had a decent
00:15 - problem it wasn't too hard it wasn't too
00:17 - difficult
00:18 - is fairly straightforward and fairly
00:20 - simple if you guys are new to
00:21 - programming and you're new to solving
00:23 - problems I'd recommend you go watch that
00:25 - one first I'll leave a card up in the
00:26 - top right hand corner and I kind of give
00:28 - a little intro and go over what the
00:30 - series is about if you're wondering
00:31 - about that so let's just get right into
00:33 - this problem today this one is called
00:35 - magic squares now pretty much what this
00:38 - is is we all just read it out to you the
00:40 - introduction of magic squares a 2d
00:42 - matrix composed of n to the power of 2
00:44 - or n squared integers where n is the
00:47 - length of one row or one column and in a
00:49 - Magic Square each row each column and
00:51 - two and the two diagonals must sum to
00:54 - the same value so we'll look at the
00:56 - example below here and you can see we
00:58 - have a square we have two nine four
00:59 - seven five three six one eight and all
01:02 - of them some to 15 so the diagonals here
01:06 - and so they'll sum to 15 so how can we
01:10 - figure out if a square is a Magic Square
01:14 - and that's what the problem says here so
01:16 - it says given a 2d matrix which is the
01:18 - same thing as this right here in the
01:21 - same form as shown and as mentioned
01:23 - above your program must determine if the
01:25 - square is magic or not magic it will
01:27 - output magic or not magic accordingly so
01:30 - your program will first take an input n
01:32 - representing the length of one row of
01:34 - the matrix it will then take n lines
01:36 - with input containing n integers
01:37 - separated by spaces and then if we look
01:41 - below I have my sample input and output
01:42 - that I've written here for you guys
01:43 - obviously this first one is pretty
01:45 - straightforward just to show you the
01:47 - obvious Nastase if all of the numbers
01:50 - are the same then obviously the square
01:52 - is going to be magic because no matter
01:53 - where you add where you sum all the
01:57 - things they're all going to equal four
01:58 - so what am i saying six in this case and
02:01 - you can see if you didn't quite
02:02 - understand input line here what's first
02:05 - gonna happen is your program is gonna
02:06 - take one line here which is gonna tell
02:08 - you how long one row is and how many
02:10 - rows there are so it tells you three
02:13 - three rows and then in each row you have
02:15 - three elements right so this next one is
02:19 - a more complex case you can see we have
02:21 - a length of four so this square is
02:24 - indeed magic it might not look like it
02:27 - and it's hard to tell and that's why we
02:28 - write programs to determine this so when
02:30 - you guys are testing out your program
02:31 - make sure you test out different all
02:33 - these different test cases so I have
02:35 - these two that are magic I also have
02:37 - another one here that's not magic I just
02:39 - made these numbers up and wrote them in
02:41 - here so if you guys just make up your
02:42 - own numbers and type them in then you
02:45 - can also test if those are not magic
02:46 - squares so yeah I'll give me a second
02:50 - here to pause the video if you guys want
02:52 - the actual sheet here that I have then I
02:56 - have actually shared a Google tribe with
02:58 - you in the description down below I
02:59 - forgot to mention this in my last video
03:01 - but if you go to the description it'll
03:03 - say my solutions or my answers or
03:06 - whatever click on the link there it
03:08 - should bring you to a Google Drive and
03:09 - then on that Google Drive you can see
03:12 - the the folder I have go to the
03:15 - according problem so it'll say magic
03:17 - squares and then you'll be able to see
03:18 - this and my python file is with the
03:20 - solution as well so I'll scroll through
03:21 - it here so you guys can have a look
03:23 - pause the video when you feel like it
03:25 - and go ahead and try the problem again
03:29 - this is slightly more advanced so I'd
03:31 - say this is probably about a novice
03:33 - problem and it should take you about 15
03:35 - to 20 minutes to complete may be a bit
03:37 - long okay so I hope you guys have had a
03:45 - chance now to complete the the program
03:48 - hopefully you were able to get it
03:50 - working if you've noticed it's not too
03:52 - difficult to actually code this it just
03:54 - is slightly tedious and it takes a few
03:55 - steps so let's get into the solution now
03:58 - okay so the solution so I have already
04:01 - here in Python my solution so the first
04:05 - part of the problem is understanding how
04:06 - it works so this one wasn't too
04:09 - complicated we have a square and we just
04:12 - have to figure out all the numbers do
04:13 - they add to the same thing so the first
04:15 - part actually after we figure out so I
04:18 - guess the second part is now taking the
04:19 - input and you'll notice as I introduce
04:22 - more problems the input for them is
04:23 - gonna become a little slightly more
04:24 - complex and even just taking the input
04:26 - for the Perl
04:27 - is going to be something that you have
04:29 - to figure out yourself so here we said n
04:32 - is equal to the int of input so I'll
04:35 - just show you when I run the program all
04:37 - I have here I don't have any prompts it
04:38 - just all you do is you type a number and
04:40 - then you're prompted to type the next
04:43 - row of numbers accordingly like so I'm
04:47 - and yeah and then it will output
04:49 - whatever they obviously that didn't work
04:50 - so I didn't type the right amount
04:51 - anyways we then set up a new array where
04:55 - I guess the list in Python I'm calling
04:57 - this a matrix and then I'm saying four
05:00 - rows in range n so we take however many
05:03 - rows or is gonna be and then for all
05:05 - those rows were then gonna take all
05:07 - those numbers on each line so we say
05:10 - nums are equal to that input of that
05:12 - line again this can happen say if we had
05:15 - four rows this will happen four times
05:16 - and then we append all those numbers
05:20 - into a list into a two-dimensional list
05:24 - so we actually end up having a matrix of
05:27 - matrix that looks something like this
05:29 - and it has a bunch of lists inside of it
05:31 - and that's called a two-dimensional
05:32 - array or two-dimensional list and that's
05:34 - the way that I like to set up the
05:36 - problem just so that I can kind of
05:37 - visualize it as well and that's each one
05:39 - of these would represent one one row so
05:41 - if we had one one one one one one one
05:45 - one one this would be a Magic Square
05:48 - with three rows and three elements in
05:51 - each row all right so three columns and
05:54 - you can see that if we were add all
05:55 - these together then we would get three
05:57 - for all of them and it would all work
05:58 - out like that okay so I'm gonna get rid
06:00 - of this now but that was just an example
06:02 - to show you so that's what that that's
06:04 - what this line is doing here it's just
06:06 - pretty much setting it up into a
06:07 - two-dimensional array and then I've just
06:09 - written a comment here saying we can
06:11 - take a three step approach so there are
06:14 - three things that the square has to
06:16 - satisfy right so the rows must add to
06:18 - each other the columns must add to each
06:20 - other and the diagonals must add as well
06:22 - so let's check all three of those things
06:25 - individually you can do them all in one
06:27 - big step but I prefer just to do them
06:30 - individually it keeps the program
06:31 - cleaner and it's easier to read
06:33 - especially for you guys so I first just
06:35 - start off by setting a variable called
06:37 - magic now what this is going to do is
06:39 - we're just
06:41 - gonna set this to false the second we
06:42 - find that the square is no is no longer
06:44 - magic because once we find that it's not
06:46 - magic there's no point in continuing we
06:48 - can just set it to false right away so
06:51 - now what I'm doing here is I'm creating
06:54 - a new matrix and this is called C matrix
06:56 - so this might seem a little confusing at
06:59 - this point but pretty much we have a two
07:00 - dimensional list up here which I'm
07:02 - calling matrix that has all of our rows
07:04 - and columns it looks exactly like this
07:07 - if you were to print it out onto the
07:08 - screen that's what it would look like
07:10 - your Magic Square and then here I'm
07:12 - setting up a column matrix now what I'm
07:15 - doing is I'm just adding a new level
07:19 - into the array a new dimension into the
07:21 - list according how many rows we have how
07:24 - many columns we have and then after this
07:26 - I'm just grabbing the value that we want
07:28 - to check so because we know that all of
07:31 - the columns and all the rows need to add
07:32 - up to the same value we can just pick
07:34 - any column any row that we want and just
07:38 - get the sum of it and say well we need
07:39 - to make sure that everything equals that
07:40 - value so that's why I've just picked to
07:42 - the sum of matrix 0 so this is Rho 0
07:44 - that's the sum of it and then we start
07:47 - by checking the rows so here I have a
07:50 - new for loop say for X row in enumerate
07:54 - matrix if you don't know what enumerate
07:55 - does it pretty much allows you to have a
07:58 - counter variable and a variable that has
08:00 - the actual value in the matrix so it's
08:04 - really useful to use that so we say if
08:06 - the sum of our row which is going to be
08:10 - equal to obviously the row it is not
08:12 - equal to value which is 1 we've checked
08:15 - up here then we're just gonna instantly
08:17 - say magic equal to false that's it we're
08:20 - done we don't need to do anything else
08:22 - and we know the square is no longer a
08:24 - magic so we check all of the rows now
08:27 - say that they are they do all add to the
08:31 - same thing
08:31 - well now what we need to end up to do is
08:34 - we need to set up our column matrix so
08:36 - the first matrix I set up has the rows
08:38 - in it now we want ones with the columns
08:40 - in it so that we're able to add all of
08:42 - the columns up together so we're going
08:44 - across adding not and now we want to add
08:46 - down so I just do this in the same step
08:49 - as I'm checking the rows because it
08:50 - makes sense to do it in the same for
08:52 - loop rather than setting up a new one
08:53 - again I'm saying for
08:55 - a common element in a numerate row so
08:57 - for every element in our row I'm going
09:00 - to add that element into the
09:03 - corresponding matrix for the column so
09:06 - into so for each row I'm gonna have a
09:09 - different dimension that each element
09:11 - goes into so for example this is this
09:14 - one if we're on zero zero right now
09:16 - we're gonna go into the first first
09:19 - column and this is the first element in
09:21 - the first column and then we continue on
09:23 - and then the second element well that's
09:25 - gonna be in the second column the third
09:27 - element in the row that's gonna be in
09:28 - the third column and then once we go
09:30 - down to the second row so now we're on
09:32 - row two then we put this this is the
09:34 - second element in the first column and
09:37 - so on and so forth okay so now that
09:41 - we've set up our column matrix we go
09:44 - ahead and we can check our columns so
09:45 - now that we have them we can do the
09:46 - exact same thing we did up here except
09:48 - instead of using rows we're using
09:49 - columns and we're using the other matrix
09:52 - and we're just gonna say well if these
09:53 - columns if they don't sum up to the
09:55 - value that we've set at the beginning
09:56 - here then we know it's not magic so
09:59 - we'll set magic equal to false okay so
10:01 - this that part was fairly
10:03 - straightforward I know I went kind of
10:04 - fast through it but what we do here now
10:07 - is a little more complicated and this is
10:09 - with diagonals so I'm just setting up
10:12 - two variables to start here I and J now
10:14 - I equals zero Jake
10:15 - this is gonna correspond this is row and
10:18 - this is column okay so I've just set up
10:21 - now a little diagonal two-dimensional
10:24 - list as well and this is gonna have the
10:26 - diagonal on the left side and the
10:28 - diagonal on the right side and the
10:30 - reason I can do this rather than having
10:31 - to set it up variable wise like I have
10:34 - up here is because I know that no matter
10:36 - how big the square is we're only gonna
10:38 - have two diagonals corner to corner so
10:41 - it's fine to do it like this now I'm
10:43 - saying for X in range and so for the
10:46 - amount of elements or the amount of rows
10:48 - so on
10:49 - we're gonna say a diagonal zeros to the
10:51 - left side and we're gonna add matrix I
10:54 - and matrix J now what this does is since
10:59 - we're starting at 0 0 it's gonna add 0 0
11:01 - and I'm just gonna pull up this actually
11:03 - because it's gonna make it a bit easier
11:04 - to understand so we're gonna have 0 0
11:06 - here which gonna be 2 and
11:08 - and from the right side we're gonna say
11:10 - n minus 1 minus I now what this does is
11:14 - it we're on the same row so if I get
11:17 - back here we're on the same rail we're
11:19 - still here in the same Jake J value but
11:23 - we need to go we need to go back because
11:25 - right now we're here we want to get to 6
11:27 - so how do we do that
11:29 - the way we do that is we say well we
11:31 - know that there's 3 elements in here if
11:34 - we're currently at 0 then we need to
11:37 - first subtract 1 because obviously
11:39 - there's not a third what do you call
11:42 - them here it's only it only goes up to 2
11:44 - if we're counting like programmers which
11:46 - we are so we say n minus 1 now we're at
11:48 - 2 & 2 minus I since I zero that plops
11:52 - this over to here where 6 is so we can
11:54 - get the other diagonal value now after
11:57 - we do that we're gonna add 1 to both of
11:59 - these values so you can see that over
12:00 - here we add 1 to both of them so that
12:02 - means we're now moving down and we're
12:05 - moving to the right so I've started at 0
12:08 - 0 I'm now going down 1 to the right
12:09 - where I get 5 and same thing from this
12:13 - side I'm here starting at that so now
12:15 - that our values gone up by 1 and we've
12:18 - subtracted 1 from it mine is from a done
12:20 - or whatever and now we're back in the
12:22 - middle as well
12:22 - and then we moved down one more time so
12:26 - for here we move down and then we move
12:28 - to the right for this one here and then
12:31 - here we're moving to the left so we're
12:33 - moving down or moving to the left so we
12:34 - can get that value and we just stored
12:36 - them in this diagonals two-dimensional
12:38 - list here and then we're just checking
12:40 - with a simple if statement here if
12:42 - diagonal 0 does not equal value or the
12:45 - sum of diagonals 1 does not equal value
12:47 - magic equals false
12:48 - and finally the conclusion if magic
12:51 - after all of this checking still equals
12:54 - true we haven't found any contradictions
12:56 - in the sums
12:58 - then we print magic otherwise we print
13:01 - not magic and yes that is my solution
13:05 - now I know this is a little little bit
13:07 - harder but these are good problems to
13:09 - start thinking about this one is just
13:11 - more tedious than it is difficult and in
13:14 - the next video we're gonna get into one
13:15 - that's maybe not as long but it's gonna
13:17 - require a bit more thinking so I'm gonna
13:20 - go ahead and run my program now
13:22 - prove to you guys that it does indeed
13:24 - work so first we'll start with the very
13:27 - basic case like that
13:32 - tu-tu-tu-tu-tu-tu like that we get a
13:35 - magic square run the program again I'm
13:37 - gonna put some random numbers in here
13:39 - this time dude 3 4 5 3 2 4 5 3 4 5 not
13:47 - magic
13:47 - now if I pull up my output here this 4 1
13:53 - the one that you guys should be checking
13:54 - as well pull it up again how can I get
13:57 - this oh it's on the screen and I have to
13:59 - push it all the way over okay
14:01 - and let's make this a bit smaller there
14:04 - we are I'm gonna start by typing 4 and
14:06 - then 60 1 2 3 13 5 11 10 8 9 7 6 12 and
14:17 - 4 14 15 1 and we get magic so we can
14:24 - confirm that this program is indeed
14:26 - working and if you guys again have any
14:30 - other better way of doing this you found
14:31 - a more efficient solution make sure you
14:33 - either send me a link in the comments
14:35 - below or just post your code down there
14:37 - I'll have a look at it and if it is
14:39 - indeed faster than mine that I'll be
14:41 - sure to show you guys out in the next
14:42 - video so that's been it for this video
14:45 - if you guys enjoyed please make sure you
14:46 - leave a like on the video and subscribe
14:48 - to the channel and make sure you're
14:50 - around every Thursday for new
14:51 - programming problems
14:54 - [Music]