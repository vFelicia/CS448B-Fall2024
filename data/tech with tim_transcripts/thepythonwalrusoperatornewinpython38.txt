00:00 - hello everybody and welcome back so as
00:02 - many of you know python 3.8 was released
00:04 - about three months ago on October 14
00:06 - 2019 now this is my first time getting a
00:09 - look at all of the changes in
00:10 - experimenting with them by myself and
00:12 - one of the major changes that I wanted
00:14 - to talk to you guys about is the
00:15 - assignment expressions operator also
00:18 - known as the walrus operator now this is
00:20 - probably the most controversial and
00:22 - exciting feature to come to Python 3.8
00:24 - almost everyone that writes code in
00:26 - Python will be able to use this in some
00:28 - sense as opposed to some of the other
00:30 - changes like for example positional only
00:33 - parameters which probably argument to
00:35 - apply to more beginner or intermediate
00:36 - level programmers now that being said
00:39 - before I go too far there is a ton of
00:41 - different changes in 3.8 a lot of them
00:43 - are smaller lower level changes or to
00:45 - specific libraries or packages but I
00:47 - will leave this link in the description
00:49 - in case you guys like to have a look at
00:50 - them
00:51 - so now let's dive into the walrus
00:53 - operator and give a few examples of when
00:55 - we might actually use this and what this
00:57 - does now the actual operators syntax
00:59 - itself is a colon followed by an equal
01:02 - sign now this is designed to be used
01:04 - inside of expressions so essentially
01:07 - what it does is assign a variable to
01:09 - some part of an expression so let's have
01:12 - a look at the first example here where
01:14 - we say if n colon equals the length of a
01:17 - is greater than 10 then what we can do
01:20 - is print out this statement right here
01:22 - now what exactly is this doing well it's
01:24 - fairly intuitive essentially what's
01:26 - happening is we're assigning the length
01:28 - of a so that value to the variable N and
01:31 - then we're just evaluating this
01:32 - expression as if this n didn't even
01:34 - exist here that is the way that this
01:36 - works within this expression if we'd
01:38 - like to take part of it and store it in
01:40 - a variable what we do is we put a
01:42 - variable name colon equal whatever part
01:44 - of the expression we want and then we
01:46 - can complete the expression and this
01:48 - will be evaluated and then we can print
01:50 - whatever it is we want to do or go into
01:52 - the loop or you know move forward in the
01:54 - program now in this case we can see that
01:57 - the reason we've done this is because we
01:58 - actually want to print out the amount of
01:59 - elements in a and rather than typing the
02:02 - length of a to x will simply type it
02:04 - once in the actual expression at the top
02:07 - store that value and then we can print
02:08 - it later on now a better example might
02:11 - be down here when we
02:12 - using the what is this called when we're
02:14 - using the regular expressions library in
02:16 - Python we can see that what we're doing
02:18 - here is looking for read search so we're
02:21 - searching for a specific I guess pattern
02:23 - here and then we're gonna see if that
02:24 - pattern exists which is the expression
02:26 - and we're going to assign that pattern
02:28 - to M oh so I guess wherever that was
02:30 - found we're gonna put that inside of mo
02:32 - this way later on in the loop when we
02:34 - want to use mo rather than retyping this
02:36 - entire expression and performing this
02:38 - logic again we already have that value
02:40 - and we can simply use it later on in our
02:42 - program and that's kind of the point of
02:44 - using this expression operator and I'm
02:45 - gonna show some examples in my own code
02:47 - editor that provide maybe a little bit
02:49 - better reason why you might want to do
02:50 - this now this is a good example as well
02:52 - a lot of times you're gonna want to use
02:54 - this inside of a while loop because what
02:56 - you can do is essentially say well my
02:59 - condition is if F dot read 256 does not
03:02 - equal blank but I actually want the
03:03 - value of F dot read so rather than
03:06 - having to get that value again or maybe
03:08 - do it above the while loop and then do
03:10 - it later on before the while loop or
03:12 - some point inside of the while loop we
03:14 - can just use this assignment expression
03:15 - operator assign block equal to F dot
03:18 - read and we're good to go we can process
03:20 - block inside of here okay so I'm gonna
03:22 - close this now we can go to my examples
03:24 - that I have here just to illustrate
03:25 - exactly how this works a little bit
03:27 - better and maybe in a little bit simple
03:29 - terms for some other people all right so
03:30 - let's run through a few quick examples
03:32 - that hopefully will better illustrate
03:33 - why you would even want to use this well
03:36 - here is a quick one so for example we
03:38 - have a variable called not roll risk we
03:40 - want that to store the expression X less
03:42 - than 7 we also want to print out the
03:45 - value of that variable so we have these
03:46 - two separate lines and we do that here
03:48 - now if I skip down and I use the walrus
03:51 - operator well what I can do is simply
03:52 - assign the value of walrus to the
03:54 - expression while printing it out at the
03:56 - same time so this will print out the
03:58 - value true for us just like this one is
04:00 - gonna print out true as well and then if
04:02 - I want to use this variable later on I
04:04 - can do that and I can print that later I
04:06 - can use another expression or whatever
04:08 - it is that I want so that's a quick
04:10 - example hopefully that helps a little
04:11 - bit now let's move on to the second one
04:13 - this is where we see kind of the massive
04:15 - advantage of the walrus operated and
04:17 - where I expect I will probably use it in
04:19 - some of you guys might as well so this
04:21 - is example two what I'm doing is simply
04:23 - just having a little script here that
04:25 - asks the user to type
04:26 - numbers while they're typing invalid
04:28 - numbers we'll add those numbers to a
04:29 - list otherwise once they stop typing in
04:31 - a valid number then we'll just stop
04:33 - asking them so that's what this is doing
04:35 - here you can see we have to ask the
04:36 - input before because we need to check
04:38 - that it's a digit before we get into the
04:40 - loop and then we ask again in here now
04:42 - there's another way to write this loop
04:44 - but either way you're still gonna have a
04:46 - few extra lines that you don't really
04:47 - need an art that clean whereas if we
04:49 - come down here with the walrus operator
04:51 - we can kind of avoid some of this messy
04:53 - code that we have above here and simply
04:55 - say WOW num which is equal to type a
04:58 - number like this dot is digit we can
05:01 - append that number and we can keep doing
05:03 - this and we only have to have this num
05:04 - and this question asked once whereas up
05:07 - here we had to ask this twice all right
05:10 - so that was example two now for example
05:11 - three again this should hopefully show
05:13 - you some of the advantages in terms of
05:15 - readability of using the walrus operator
05:17 - the walrus operators don't really
05:19 - achieve anything that we can't do
05:21 - without it as you can see obviously I'm
05:23 - doing without walrus and with walrus
05:25 - there's nothing that really the walrus
05:26 - operator will do that we can't do
05:27 - without using that but we have here is
05:30 - let's just say bar equals five if R is
05:33 - equal to five we will ask a question so
05:35 - you know type your answer and if answer
05:37 - does not equal blank then what we'll do
05:39 - is print nice now I've shortened this
05:42 - very similar code down here this is
05:43 - pretty much equivalent we say if bar
05:45 - equals five and in this case answer is
05:49 - cool and equal to input type your answer
05:51 - then we can print answer now you know
05:54 - here is probably what actually made
05:56 - sense of my print answer because now
05:57 - this is gonna be the same code you guys
05:59 - get the idea this is where the Walters
06:01 - operator has an advantage where you
06:03 - might want to use it typically inside of
06:04 - if statements as this one has allowed us
06:06 - to actually avoid a level of indentation
06:08 - and example two will probably be the
06:11 - most used use of this being able to use
06:13 - it inside of a while loop expression if
06:15 - you need this value that you're you know
06:17 - the expression is inside of the actual
06:19 - loop so it means that has been it for
06:21 - the walrus operator I hope I give you
06:23 - guys a few meaningful examples and you
06:25 - can see when you might use it I would
06:27 - love to hear from you guys what you
06:28 - think of the walrus operator as I know a
06:30 - lot of people in the Python community
06:31 - are not happy that it was implemented in
06:33 - personally I don't really care I think
06:36 - it's cool it's another tool if you don't
06:37 - want to use it you don't have to use it
06:38 - and for me it definitely
06:40 - you know cleans a few things up
06:41 - especially with while loops like that so
06:43 - with this being said leave a comment
06:44 - down below let me know and I'll see you
06:46 - guys in another video