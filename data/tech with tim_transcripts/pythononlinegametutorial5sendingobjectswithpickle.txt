00:00 - hey guys and welcome back so in the last
00:03 - video we successfully set up our server
00:05 - and clients so that you can see that we
00:06 - can do something like this where we move
00:08 - a square on one of our clients and it's
00:10 - moving around on the other now I would
00:14 - prove this by bringing my laptop up and
00:16 - downloading the code on there and like
00:18 - but right now I don't have my laptop on
00:19 - me otherwise I would do that for you
00:21 - guys but essentially this does work
00:23 - anywhere on your network feel free to
00:24 - try this out if you have another
00:25 - computer download all of the code like
00:28 - all the client code that you need onto
00:31 - that computer run an instance on there
00:32 - then run an instance on another computer
00:35 - and you'll see that it actually does
00:36 - indeed work ok it doesn't have to be on
00:39 - the same machine now there's a quite a
00:42 - few issues that we may run into when
00:45 - we're doing this so I've set this up
00:47 - essentially to be kind of like an
00:48 - example program or like an example
00:50 - problem to give you guys an idea of the
00:53 - way we go about doing things in terms of
00:54 - server and network but it's really not
00:58 - ideal the way that we've coded things so
00:59 - far now I did plan this for to do what
01:02 - we're about to do but essentially I'm
01:04 - gonna redo what we've just done in a
01:08 - much more elegant and nicer way that's
01:10 - going to allow for a better scalability
01:13 - of this program ok so what we're gonna
01:16 - do is I'm gonna redo it here I'm gonna
01:17 - show you how we can actually send
01:18 - physical or not physical but like send
01:21 - objects to the server and from the
01:23 - server back to the client rather than
01:25 - just string data and then in the next
01:27 - videos we're actually gonna scrap all
01:29 - this code that we've written and we're
01:31 - gonna start fresh and code like a
01:33 - networking game there's gonna be a lot
01:35 - more complex than just a few squares
01:37 - moving around the screen so that's my
01:39 - plan for this series let me know what
01:40 - you guys think of that I know it might
01:41 - be little bit frustrating to get rid of
01:42 - this code but now that we understand how
01:44 - a lot of this works it's gonna be really
01:46 - fast to rewrite it in a much more
01:47 - elegant way so what I need to first
01:51 - start by doing it's just taking this
01:53 - player class ok and I'm just gonna copy
01:55 - it into its own file so really
01:57 - straightforward I'm just go to new
01:58 - Python file I'm gonna call this player
02:00 - with a lower case and then just copy
02:02 - that player class in there and just
02:04 - imports pygame up here ok import potter
02:09 - game now I'm just going to go back into
02:10 - client we can delete this player class
02:12 - now
02:13 - and what I'm gonna do really basically
02:14 - it's just from player import player like
02:18 - that okay and that's the first step now
02:22 - remember I said we were gonna send
02:24 - objects so that actually means that
02:26 - we're not gonna need this read pause and
02:28 - make pause thing and it's kind of
02:30 - annoying how we've had to well take that
02:33 - tupple object decompose it turn it into
02:35 - integers and then change object
02:37 - properties and then when we want to send
02:39 - something we got to put it into a string
02:41 - and we gotta send it in just the pain
02:42 - and we don't want to have to do that
02:43 - especially when we're sending tons of
02:45 - different bits of information not just
02:47 - that same positional data right so well
02:50 - you're actually gonna delete this so we
02:51 - can delete this client number I don't
02:52 - know why I have that there and we're
02:54 - gonna start just making some
02:55 - modifications in terms of sending data
02:57 - and receiving data so it'll start on the
03:00 - client side and then we'll go over the
03:01 - network the server side and fix some of
03:03 - that so wherever we see like read pause
03:05 - and make pause we can just get rid of
03:07 - that for right now we don't actually
03:09 - need any of that we're not gonna need
03:11 - this p2x stuff we don't need P to not
03:15 - update well we'll get rid of all this
03:17 - for right now you know actually let's
03:18 - get rid of start position let's get rid
03:20 - of P and let's get rid of P 2 and we're
03:22 - gonna recode all this okay so actually
03:26 - um P to P I can stay there P done move
03:29 - is fun okay so we got rid of all that
03:31 - and you can see we've just cleaned up
03:32 - this file bit and we'll start working
03:34 - with some more stuff in a second now
03:36 - what I want to do actually is go to this
03:37 - network file that we have and we're
03:39 - gonna start making some modifications in
03:41 - here as well so what we're gonna be
03:43 - doing is we're gonna be sending objects
03:44 - so that means we're gonna send like an
03:45 - instance of the player class and that's
03:48 - actually what we're gonna be sending
03:49 - instance of a player class to our server
03:52 - as opposed to sending like string data
03:54 - and then updating the object on or then
03:57 - updating this string data on the server
03:58 - and then sending it back and then
04:00 - updating the object that's just a lot of
04:01 - work it's a lot easier just to send the
04:03 - actual object so we can do that using
04:05 - something called pickle okay now it's a
04:08 - weird module name but it comes default
04:10 - with Python and this allows us to do
04:12 - something that's called serialized
04:13 - objects and that just means we turn into
04:15 - byte information which is like all the
04:17 - zeros and ones send it over the body
04:20 - codes send it over the network and then
04:22 - we can decompose that turn it back into
04:25 - an object
04:26 - and use that it's really easy to do that
04:28 - so what we're gonna do here is we're
04:30 - gonna modify a few things in our network
04:33 - class so first thing instead of having
04:34 - self dub pause we're gonna say self
04:36 - thought P okay this game equal to self
04:40 - dot connect and so saying get position
04:42 - will this to get P and then we returned
04:45 - self dot P okay and that's all we need
04:47 - to modify for that but now in the
04:49 - connect in the send we're gonna change a
04:52 - few things as well so since we're gonna
04:55 - be getting object data what we have to
04:57 - do in the connect is we have to
04:59 - decompose that object data so to do that
05:01 - you do pickle dot loans okay now what
05:05 - this stands for is a sense for load byte
05:07 - data okay and we'll talk more about this
05:09 - as we keep going through but that's
05:10 - essentially what it means and same thing
05:12 - here in send instead of encoding this
05:15 - data what we're gonna do and I guess
05:17 - decoding as well is we're going to dump
05:20 - it into a pickle object and then send it
05:23 - so to do that we're gonna use I say
05:25 - pickle at least one pickle yet don't
05:29 - don't dumps like that and we'll just put
05:32 - data in there okay and then when we
05:34 - receive we'll do the same thing as
05:36 - before we'll say pickle dot loads and
05:40 - then we'll load that in so now
05:43 - essentially what we're doing is we're
05:44 - going to be receiving an object
05:46 - decomposing that object getting the
05:48 - actual object not the bytes form of it
05:50 - and then we're sending it we're gonna
05:52 - first like what do you call it encrypt
05:55 - it like sent it into that byte
05:56 - information and then on the server side
05:58 - will decompose that as well okay so
05:59 - we'll go through that but also we need
06:01 - for the network side so now let's go to
06:04 - server and start making some
06:05 - modifications so same thing here we no
06:07 - longer need this read pause and make
06:09 - pause functions we're not going to be
06:10 - using those and we don't need this pause
06:12 - list either we're gonna change this
06:14 - actually to be players and it's gonna be
06:17 - equal to two new players so notice that
06:20 - we're gonna actually store the player
06:22 - object on the server as opposed to on
06:26 - the client side and this is not only
06:28 - like safer because it means that the
06:30 - player technically can't really mess
06:31 - with the player objects they can only
06:33 - like do commands to update them but it's
06:36 - also just like it's gonna be a lot
06:38 - easier and you guys will see how it
06:39 - works we I said play
06:39 - and we'll do another instance of player
06:41 - and in here what we're gonna do is we're
06:43 - just gonna create two new players so you
06:45 - say zero zero 50 50 and we'll give it a
06:49 - color in this case the first color will
06:50 - be red so we'll say red green blue like
06:54 - that and for the other player we'll
06:55 - start them out a hundred a hundred like
06:57 - before with a fifty fifty and then we'll
06:59 - make his color blue why not so do that
07:02 - okay so now you notice that we're
07:05 - getting a little error for player here
07:07 - just cuz we forgot to import it so you
07:08 - say from player import player like that
07:13 - and that's why I made this new file by
07:15 - the way just so that we'd be able to see
07:16 - it from the server side and the client
07:18 - side as well and then wherever we're
07:21 - doing this like send encoding stuff
07:23 - we're gonna change this so let's do that
07:25 - now actually so instead of con dots and
07:27 - instead of encoding some string
07:29 - information we're just gonna send the
07:31 - player object so what we'll do is we'll
07:33 - say players like this and then player
07:39 - right so exact same kind of concept as
07:41 - before in that we're gonna send the
07:44 - initial like starting position of the
07:45 - player we're like the but in this case
07:48 - we're just setting the initial player
07:49 - object which means any information
07:51 - that's stored in that player will be
07:52 - given to the client as opposed to just
07:55 - the position okay so next what we'll do
07:58 - is instead of saying data equals read
08:00 - pause and decoding we're gonna get rid
08:02 - of this dot decode and we're gonna put
08:05 - pickle dot loads okay
08:09 - and actually when I'm sending this
08:10 - player object my bad here guys we got to
08:13 - do pickle dot dumps okay and then we're
08:18 - just gonna have to import pickle up here
08:19 - so import pick alright sweet okay so
08:23 - pick a lot loads pickle dumps and then
08:25 - it's obviously instead of pause player
08:27 - equals data we're gonna say player
08:30 - players player equals data and again
08:34 - same concept as before what's gonna
08:35 - happen is the what II called the client
08:38 - is gonna send us a player object we're
08:40 - gonna replace the existing player object
08:42 - with that new player object and then
08:45 - we're gonna send back the other player
08:46 - objects like the other clients okay so
08:49 - now what we're gonna do is just change
08:51 - these pauses to be player
08:53 - players like that okay same thing here
08:57 - players and then when we send it back
09:00 - what we'll do is we will just turn it
09:03 - into a object right so we'll just do
09:05 - that pickle Don dumps and send it back
09:07 - so we'll say pickle dot dumps reply like
09:12 - that and that should actually be about
09:14 - it so let's go back or sorry there's
09:17 - something we need to do in client um so
09:19 - now what we're gonna do is essentially
09:21 - we've set up our network class so that
09:23 - we're gonna be able to send that object
09:24 - down it we've set up the server so we're
09:27 - gonna be able to receive that object
09:29 - data we're gonna modify the objects
09:32 - we're storing in the list here and then
09:34 - we're gonna send back the other ones to
09:35 - the other client so in clients all we
09:38 - have to do now is set up player 1 and
09:40 - player 2 and then send that data so
09:42 - really straightforward it's very similar
09:44 - to before what we're gonna do first of
09:45 - all I'll just say p1 we're actually just
09:47 - P I guess is equal to and get P okay
09:52 - because in the network class remember
09:54 - what we're doing is when we initially
09:56 - connect so let's go back to server we're
09:58 - just gonna send the initial player
10:01 - object which is going to be whatever
10:02 - player it is so 0 or 1 so let's just say
10:05 - that this clients player object is gonna
10:07 - be and get P ok and then we'll say
10:10 - actually I think that's all we have to
10:12 - do for yeah that is all we have to do
10:13 - for that inside this while loop now what
10:16 - we're gonna do is every frame we're
10:17 - gonna send this player object which
10:20 - we'll be updating with P dot move and
10:22 - we'll just get the reply and say that
10:24 - that's p2 so we're gonna do is when I
10:26 - say p2 equals and then in this case
10:30 - we'll just say P dot or not P and don't
10:33 - send P and that's all we have to do and
10:37 - notice here that we don't have to do
10:39 - with all this like make what do you call
10:41 - it make pause read pause all that stuff
10:43 - and I believe this should be working if
10:46 - I didn't make any mistake so let's cross
10:47 - the fingers and let's try this out
10:48 - waiting for connection let's go to
10:51 - client one run that okay and client two
10:54 - running that and now notice that these
10:57 - rectangles are the same color and watch
11:00 - what happens if I move this red one
11:02 - see how it's red on the other screen as
11:04 - well now that already shows us one of
11:06 - the
11:07 - of doing it this way is that we can
11:09 - store information like color as well not
11:11 - just position and if we want it to store
11:13 - maybe like there is a text attribute on
11:15 - each of these players we could store
11:16 - that as well but we wanted to store more
11:18 - information in the player like a health
11:20 - or something like that be a lot easier
11:22 - to do that by just sending the actual
11:24 - player object that has like an unlimited
11:26 - amount of attributes rather than just
11:28 - sending that little tupple that has like
11:29 - five six or eight which is the position
11:31 - so the reason I went through the trouble
11:33 - of showing you the other way is to show
11:35 - you the massive advantage of doing it
11:37 - this way and just to give you kind of
11:39 - perspective if you're making something
11:40 - really simple and you don't use any
11:41 - objects that's how you can do it with
11:43 - string data but I think this way is a
11:45 - lot easier and we've just cleaned up
11:47 - quite a bit of code we've gotten rid of
11:48 - a bunch of functions and moving forward
11:50 - this is gonna make things a lot easier
11:52 - for us so with that being said this is
11:54 - gonna be it for with this video the next
11:56 - videos I'm gonna scrap most of what
11:57 - we've done and we're gonna start working
11:58 - on a legitimate project it's gonna show
12:00 - you what much more in depth how we can
12:03 - do a legitimate game how we can store a
12:06 - lot better things on the server because
12:07 - right now all we're storing is two
12:09 - players but realistically we probably
12:10 - want to store a ton of information and
12:12 - make like a really cool game so that's
12:13 - what we're gonna be doing
12:14 - [Music]