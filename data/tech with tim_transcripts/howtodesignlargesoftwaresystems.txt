00:02 - [Music]
00:08 - in this video i aim to give you a solid
00:10 - introduction to the key considerations
00:12 - and topics that you need to think about
00:15 - as you design or write a large software
00:17 - system now this will be a really good
00:19 - video for kind of intermediate
00:21 - programmers or people that are starting
00:23 - to work on larger projects and are
00:25 - considering what else they need to do
00:27 - other than just straight writing code as
00:30 - it turns out as you get into large code
00:32 - bases you get into large projects
00:34 - there's a lot of considerations and
00:36 - concerns that pop up and it's a lot
00:38 - easier to be thinking about them from
00:39 - the beginning than to have to worry
00:41 - about them after you've already ridden
00:43 - half of the code or you've designed
00:44 - something that maybe is sub-optimal i'm
00:47 - not going to teach you how to design
00:48 - netflix i'm not going to teach you how
00:49 - to design google we're not going to get
00:50 - into anything technical it's just going
00:52 - to be these key considerations and
00:54 - concerns and kind of a good way to get
00:56 - your brain in the correct place as you
00:58 - start working on something a bit larger
01:00 - so with that said sit back relax and let
01:03 - me explain to you some of these key
01:04 - considerations and concerns related to
01:06 - large-scale software systems now moving
01:09 - immediately to a small tangent here when
01:12 - i design a youtube video i need to think
01:14 - about the actual content itself how i
01:16 - want the youtube video to flow the
01:18 - different sections or chapters and also
01:20 - the monetization strategy now in this
01:22 - video the strategy is a sponsor which
01:24 - you're about to watch before we get
01:26 - started i need to thank filestack for
01:28 - sponsoring this video filestack lets you
01:30 - simplify your file handling by providing
01:32 - a simple file uploader and powerful apis
01:36 - to upload transform and deliver any file
01:38 - into your app with file stack you can
01:40 - accelerate innovation through reusable
01:42 - components and automate content workflow
01:45 - tasks into a single api call
01:47 - filestack can handle borders and effects
01:50 - document conversions object detection
01:52 - explicit content detection and much much
01:55 - more using file stacks easy to use ui
01:58 - allows you to create reusable workflows
01:59 - that require no coding knowledge and can
02:01 - be modified rapidly over a hundred
02:04 - thousand people are currently using file
02:05 - stack and you can join them today for
02:07 - free by clicking the link in the
02:09 - description thanks again to filestack
02:11 - for sponsoring this video now let's get
02:13 - into it so as i was saying when i design
02:15 - a youtube video i kind of break it into
02:17 - sections or chapters to keep it
02:19 - organized and the sections i'm going to
02:21 - share with you here are the following
02:22 - the first is actually breaking a system
02:24 - into subsystems which is kind of what
02:26 - i'm doing right now with this video the
02:28 - second is testing the third is
02:30 - deployment then i have documentation
02:32 - scaling and security now before you can
02:35 - even really consider any of these things
02:37 - i do feel like you need to have a
02:39 - fundamental understanding of programming
02:42 - and of kind of organizing code in
02:44 - general so this is at a larger level but
02:46 - you need to actually understand how you
02:49 - break code into modules into packages
02:51 - into functions how you keep your code
02:54 - clean and organized because if you can't
02:56 - do that none of this is really going to
02:58 - matter when it comes to writing a large
02:59 - scale system if you want to learn that i
03:01 - have a ton of free videos here on
03:03 - youtube i also have a course it's called
03:05 - programmingexpert.io you can use
03:06 - discount code tim from the link in the
03:08 - description but i wanted to mention that
03:10 - you should have a fundamental
03:12 - understanding here before starting to
03:14 - design any really large scale systems
03:16 - you should be confident in your
03:17 - programming abilities so moving in here
03:19 - to point number one i have breaking a
03:21 - system into sub systems now this is one
03:24 - of the more important points on this
03:26 - list and this is really going to dictate
03:28 - how much of a pain in the asset is to
03:30 - develop your project or your application
03:32 - or whatever it is that you're making
03:34 - it's very important that from the
03:35 - beginning of your software project life
03:38 - cycle that you actually determine what
03:41 - subsystems are going to make up the
03:43 - system as a whole now what i mean by
03:45 - this is rather than having say one
03:47 - massive code base that does everything
03:49 - right you want to break it into
03:51 - individual and kind of logical
03:53 - components which work together to solve
03:55 - a problem now this is very important
03:57 - because if you can break one system into
03:59 - say 20 30 maybe 40 subsystems now you
04:02 - can be confident that each individual
04:04 - system is working as it should be
04:06 - because it's much easier to test smaller
04:09 - pieces of code rather smaller systems so
04:11 - maybe you have an authentication system
04:13 - you have a messaging system you have an
04:15 - achievement system you have all of these
04:16 - different subsystems they're a lot
04:18 - easier to write because you're only
04:19 - writing one at a time a lot easier to
04:21 - maintain a lot easier to debug to test
04:24 - and to scale up or scale down depending
04:27 - on kind of what is required in your
04:29 - application essentially you're reducing
04:32 - complexity in a code base by splitting
04:34 - your system up into multiple subsystems
04:37 - and like i said that provides a lot of
04:39 - different advantages especially based on
04:41 - the different considerations i'm going
04:42 - to have coming up next so if we were to
04:45 - consider say a mobile game
04:47 - maybe you have your authentication
04:49 - system maybe you do have live messaging
04:51 - between players that would be its own
04:53 - separate system maybe you have the user
04:55 - interface as a whole that you could
04:57 - consider a system that interacts with
04:59 - all of the back end systems that you
05:01 - have maybe you have the achievement
05:03 - system maybe you have some system
05:05 - related to actually playing the
05:06 - different games if it's a mobile game or
05:08 - mobile app or something like that right
05:10 - you may have a system related to keeping
05:12 - score uh you may have you know all kinds
05:15 - of different subsystems it really
05:16 - depends on what you're doing but what i
05:18 - like to do when i start a project is
05:20 - determine kind of in a vague sense what
05:22 - these systems are that i'm going to have
05:25 - now i may add more i may remove some or
05:27 - combine them together but at least i'm
05:29 - considering how i'm going to break this
05:31 - apart to make it much easier for me to
05:33 - manage later on and if i needed to i
05:35 - could say outsource the development of
05:37 - one of these systems to someone else so
05:39 - hopefully that kind of puts your mind in
05:41 - the right place at the beginning of
05:43 - development how do i break this down how
05:45 - do i make this nice and simple and then
05:47 - from there when you have a subsystem you
05:49 - would then break that down into
05:50 - individual classes individual modules
05:52 - individual packages and go to the finest
05:55 - level of detail essentially you can to
05:57 - make it as easy as okay i need to do
05:59 - this function this function this class
06:01 - and this class once i build all of that
06:03 - i now have this subsystem then i build
06:05 - all of my subsystems and i have the
06:07 - entire application so moving on here to
06:09 - topic or consideration number two i have
06:12 - testing now testing is extremely
06:14 - important especially as you start to
06:16 - write a lot of code and move into a
06:18 - complex code base that has a lot of
06:20 - different systems and a lot of different
06:22 - stuff going on but it's also very
06:24 - important to consider how you're writing
06:26 - code based on the fact that you're going
06:28 - to have to test that code so i'll
06:30 - elaborate on that more later on when i
06:32 - say testing i'm talking about any type
06:35 - of testing manual testing integration
06:37 - testing unit testing uh testing a
06:40 - database testing back-end functions
06:42 - there's a million different tests that
06:43 - you can write front-end test ui
06:45 - component tests you can test practically
06:48 - anything in your application so you need
06:49 - to consider right from the beginning
06:51 - okay what do i want to test how much of
06:54 - a focus or emphasis do i want to have on
06:57 - testing is it absolutely necessary that
06:59 - i test every single component or every
07:01 - single function in my application uh and
07:04 - am i going to be say mocking different
07:06 - components or mocking different modules
07:09 - in my testing do i want to have a live
07:10 - test that actually uses say a real
07:12 - database do i want to mock the database
07:15 - these are all things you want to think
07:16 - about and consider and the thing with
07:18 - testing is that yes it is very important
07:20 - but you also don't want to be slowed
07:22 - down a time by writing tests it does
07:24 - take a long time to write automated
07:26 - tests especially ones that are high
07:28 - quality and actually give you confidence
07:30 - that this test is meaningful but again
07:33 - they take a long time so do you want to
07:35 - do that for the entire application is it
07:37 - absolutely necessary those are things
07:39 - that you need to consider now moving
07:41 - into kind of the second stage of testing
07:43 - here it's important to be thinking about
07:45 - this stuff because as you're writing
07:47 - code you need to write code that is
07:49 - testable if you want to be testing a
07:51 - certain amount of code or certain
07:53 - features you have to write it in a very
07:55 - specific way because if you make it too
07:57 - complicated or too difficult to test in
08:00 - isolation you're not going to be able to
08:02 - test it or you're going to have to
08:03 - rewrite the code to be able to test it
08:06 - properly so that's really what this
08:08 - section is about and i'll just lastly
08:10 - say here that at the beginning of
08:12 - development it will seem like testing is
08:14 - slowing you down like it's taking a lot
08:16 - of time and that it's not really
08:17 - meaningful because you can easily
08:19 - manually test everything that you're
08:20 - doing
08:21 - however as you get into more and more
08:23 - features more and more subsystems being
08:25 - integrated into your software you
08:27 - realize the importance of testing
08:29 - because now rather than having to
08:31 - manually test everything you press a
08:33 - single button or you run a single
08:35 - command and all of a sudden you have
08:37 - confidence that you haven't broken
08:38 - something else in your application
08:40 - by writing new code
08:42 - and in the same light here if you were
08:43 - to add new people to your code base that
08:45 - maybe weren't as familiar with it as you
08:48 - they could have confidence that they're
08:49 - not breaking something or messing
08:51 - something up by running automated tests
08:53 - so moving on here to topic number three
08:56 - i have deployment now this is concerned
08:58 - with how you're actually going to be
09:00 - serving your application or software so
09:02 - you've ridden it in a development
09:04 - environment maybe you have it on
09:05 - localhost or you're testing it on an
09:07 - emulator or something along those lines
09:09 - now how are you going to take this code
09:11 - and deploy it so that users can actually
09:13 - access it is this going to be on mobile
09:15 - is it going to be on web are you going
09:17 - to have it automatically be deployed
09:19 - say every hour or every day or every
09:22 - time you make a change to the code base
09:24 - are you going to deploy it maybe in set
09:26 - intervals every week are you going to be
09:28 - pushing updates to users where they
09:30 - would have to download something to
09:32 - get new features in the application how
09:34 - are you communicating with your users
09:36 - are you going to do that through a
09:38 - deployment where you're actually
09:39 - modifying the code base or maybe you
09:41 - have some back-end system that you can
09:44 - kind of play with or mess with that then
09:45 - serve something new to the front end of
09:47 - the application and gives a message to
09:49 - your users i'm just rattling off kind of
09:51 - random ideas here there's not a lot of
09:53 - content i have for this specific section
09:55 - but of course it's important to consider
09:57 - okay i've ridden this stuff in
09:59 - development how am i going to actually
10:01 - give this to my users how am i going to
10:02 - test that it's working properly how am i
10:04 - going to emulate my development
10:06 - environment in a deployment environment
10:08 - how am i going to scale this do i have
10:10 - multiple systems being deployed all at
10:12 - the same time maybe i'm only deploying
10:14 - my front end when i make a change in my
10:16 - back end stuff will stay the same i
10:19 - don't know i'm just trying to give you
10:20 - examples to think about here because
10:22 - deployment is very important and it's
10:23 - something a lot of people leave until
10:25 - the very last step and then they realize
10:28 -  i need to change the way i'm doing
10:29 - this because it doesn't work with how
10:31 - i'm gonna deploy this code anyways
10:33 - that's what i have for that on to the
10:35 - next one so now moving on to
10:36 - consideration number four which is all
10:38 - of your favorites and this is
10:40 - documentation now clearly that's a joke
10:42 - everybody hates documentation they hate
10:44 - writing it they hate reading it they
10:46 - hate using it whatever they just don't
10:48 - like documentation and i don't blame
10:50 - them i am like you guys as well i really
10:52 - dislike writing documentation i'd much
10:54 - rather write code but it is something
10:56 - important that you have to do
10:59 - now a lot of code bases and i'll say
11:00 - this from personal experience
11:02 - they'll start off very simple very easy
11:04 - to understand maybe it's just you or two
11:06 - or three people working on this code and
11:08 - it seems like a waste of time to write
11:10 - documentation especially when you're
11:12 - just explaining something that you
11:14 - already know or that your teammates
11:15 - already know but it becomes more and
11:17 - more important as the code base gets
11:19 - larger because you may go a few months
11:22 - without viewing a certain portion of
11:23 - this code base or without viewing a
11:25 - feature that you worked a very long time
11:27 - on and now it's completely finished or
11:29 - alternatively maybe you're working for a
11:31 - startup like i'm doing right now and
11:33 - then the company grows and you bring on
11:35 - new developers and now you're tasked
11:37 - with writing documentation for two weeks
11:39 - to help onboard them into the code base
11:41 - so again something you want to consider
11:44 - do i need documentation for this section
11:46 - is this something i'm going to remember
11:47 - forever probably not should i write
11:50 - documentation on how to set the code
11:52 - base up in case maybe non-technical
11:54 - people need to do that should i write it
11:56 - on specific features
11:57 - or systems you don't have to go
11:59 - overboard here so what i'm really
12:01 - talking about here is just being
12:02 - cognizant of the fact that this code is
12:04 - likely going to live for a long time
12:06 - assuming whatever you're doing is
12:07 - successful you're probably going to
12:09 - bring new people onto it and you
12:11 - yourself will likely forget some of the
12:13 - stuff that you knew really well as the
12:15 - code base matures and you're working on
12:17 - other features with that in mind you
12:19 - probably want to be writing
12:20 - documentation you don't need to kill
12:22 - yourself and go overboard with it but
12:24 - maybe dedicate you know half an hour a
12:26 - day or a few hours a week to documenting
12:28 - different features and making sure that
12:30 - anyone that comes to this code base will
12:32 - have a decent idea of what is going on
12:35 - and what they need to do to maybe get
12:37 - things set up and to add code for
12:39 - example to the code base
12:40 - so moving on to topic number five we
12:43 - have scaling now scaling is something
12:45 - that again a lot of people don't
12:46 - consider because many projects start off
12:49 - with only a few users or they're only
12:51 - being used for a hobby and a lot of
12:53 - people never really envision their
12:54 - software being used by hundreds of
12:56 - thousands of people or millions of
12:58 - people or people around the world in
13:00 - different time zones and geographic
13:02 - regions and languages and all of this
13:03 - type of stuff and it is something that
13:06 - even though you may not necessarily
13:07 - implement immediately you want to be
13:09 - thinking about when you're writing code
13:11 - because it can save you a lot of time
13:12 - and money down the line
13:14 - for example right now i am writing a lot
13:17 - of code using firebase now firebase is
13:19 - notoriously expensive and the way in
13:21 - which you do database reads and writes
13:24 - and say serverless function calls can
13:27 - drastically impact the cost of your
13:29 - hosting and project for example if i
13:31 - write an algorithm that's n squared time
13:33 - relative to maybe database reads and
13:35 - writes but i could have optimized that
13:37 - to be o n time where it's just linear
13:39 - time that's saving me drastic amounts of
13:42 - money right especially if i have tens of
13:44 - thousands of users that are all
13:46 - interacting with this algorithm or
13:47 - whatever's reading and writing from the
13:49 - database so you want to be very
13:50 - cognizant of that because it would suck
13:53 - to get to a point where okay now you
13:55 - have a bunch of users your apps taking
13:56 - off oh but it's costing you a hundred
13:58 - thousand dollars a month to host it
14:00 - because you didn't consider how
14:01 - expensive it was going to be for example
14:03 - to scale your application
14:05 - now that's one scenario you can also
14:07 - have other scenarios where you just are
14:09 - unable to scale the way you've written
14:11 - code you can't deploy it on multiple
14:13 - servers you can't actually scale it up
14:16 - or you're just having a lot of lag and a
14:19 - lot of delay based on how you've done
14:20 - things because you didn't consider the
14:22 - fact you were going to have a million
14:24 - entries in your database again all
14:26 - things you want to think about earlier
14:27 - rather than later i'm just trying to put
14:29 - those in your head alright so moving on
14:31 - here to topic number six which
14:33 - admittedly i probably should have put
14:35 - earlier but this is security now this
14:38 - becomes very important especially when
14:40 - you have a lot of separate systems in
14:41 - your application you need to find a way
14:44 - to almost synchronize your authorization
14:46 - or authentication between these
14:48 - different systems and ensure that users
14:50 - only have access to what is intended for
14:53 - them to have access to you need to be
14:55 - very careful with the way that you
14:56 - protect say your database for example
14:58 - with rate limiting with
15:00 - the authorization to read or view
15:02 - different documents or tables or rows or
15:04 - whatever it is that you're using
15:06 - and you need a way to easily
15:08 - authenticate your users as well
15:10 - are you going to be storing passwords on
15:12 - your server are you going to use
15:13 - something like oauth or google sign-in
15:15 - or facebook sign-in what is your
15:17 - authentication system and how are you
15:19 - going to verify that the users that are
15:21 - signed in are who they say they are very
15:24 - important to do another thing to
15:25 - consider related to security is stuff
15:27 - like rate limiting ddos
15:29 - what's going to happen if someone were
15:31 - to say mess with your software or your
15:33 - front end and hit an api a million times
15:35 - per second i know that's an exaggeration
15:37 - but you get what i mean are you going to
15:39 - stop them from doing that how are you
15:41 - handling those types of scenarios
15:43 - fortunately there's a lot of stuff
15:44 - that's built that does this for you but
15:47 - you need to just consider the security
15:49 - of your application as you're building
15:51 - it out and imagine that there may be and
15:53 - probably will be bad actors in your
15:56 - system that are trying to break the
15:58 - application that are trying to hack into
16:00 - someone's profile that are trying to
16:01 - manipulate say their score or their
16:03 - leaderboard ranking or something along
16:05 - those lines again you need to really
16:07 - think about that and consider that when
16:09 - you're building yeah all right so with
16:10 - that said guys i think i'm gonna start
16:12 - wrapping it up here if you did stick
16:13 - around until the end of the video thank
16:15 - you very much i'm gonna leave you with
16:17 - the image of my cat sleeping on my desk
16:20 - her name is sophie i actually have two
16:21 - cats and if you can remember guess the
16:24 - name of my other cat in the comment
16:25 - section down below if one of you gets it
16:27 - correct then i will pin your comment
16:29 - anyways i hope you guys enjoyed if you
16:31 - did make sure leave a like subscribe to
16:33 - the channel i will see you in another
16:35 - one
16:36 - [Music]