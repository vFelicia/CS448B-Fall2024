00:00 - hey guys and welcome back to another
00:02 - object and classes tutorial video in
00:05 - today's video I'm gonna be going over
00:06 - loading default Python methods and why
00:10 - these are extremely useful now if you
00:11 - don't know what I'm talking about just
00:12 - stick around for one second and I will
00:13 - explain it so first of all I just want
00:16 - to talk about what I've already coded
00:17 - here I just have a very basic point
00:18 - class and you can see that our point
00:20 - object has three kind of attributes an X
00:23 - Y and then our coordinates which is self
00:24 - dot X and self dot Y we have very basic
00:26 - method that can simply move us by X and
00:29 - by Y when we type it in ok I've created
00:31 - four points down here and these are what
00:33 - we're going to use to kind of test up
00:34 - some examples and I'm about to create so
00:37 - in Python remember in my first video I
00:39 - was talking about the fact that if you
00:41 - create integer objects so for example I
00:42 - say like I equals five and like the Z
00:45 - equals five if I wanted to add these
00:48 - together all I simply have to do is well
00:50 - put a plus sign right and Python knows
00:52 - that this plus sign means okay these two
00:54 - things together now how does it know
00:57 - this and how does it know what to do
00:59 - well integers is pretty straightforward
01:00 - but what if we start doing things like
01:02 - strings right if you do S and then you
01:06 - go like six seven eight how but does
01:08 - Python know how to add these two strings
01:10 - together well it would make sense to it
01:12 - just appended on top but someone
01:14 - actually had to code this functionality
01:16 - in and that's exactly what we're gonna
01:18 - be doing in this video except with our
01:19 - custom point object okay and you'll see
01:22 - what I mean in just a second so pretty
01:24 - much what we want to eventually do at
01:26 - the end of this video is to be able to
01:27 - add multiply subtract in compare points
01:31 - without having to reference their
01:34 - attributes outside of the class so right
01:37 - now if I do p1 plus p2 our programs
01:39 - gonna crash because it doesn't know what
01:41 - that means but by the end of this video
01:43 - we're gonna be able to do that okay so
01:44 - that's what I'm gonna show you right now
01:46 - so in Python there's a bunch of defaults
01:49 - kind of operations and methods that you
01:52 - can apply on classes and by default that
01:55 - are not defined right on our point class
01:57 - if we try to add two things right now
01:58 - that doesn't make sense
01:59 - so what we're gonna do is add that
02:00 - method so to do this to add the add
02:04 - operation you're just going to do to
02:05 - find underscore underscore add okay and
02:08 - then in here you need to give another
02:10 - point object so what happens
02:13 - when I try to add a point and another
02:16 - point object well whatever we're going
02:18 - to return a new point okay that is
02:22 - simply equal to self dot X plus P dot X
02:25 - and then self dot y plus P del Y so what
02:29 - this is doing is since we're passing
02:31 - another point object so when we do like
02:33 - P 1 plus P 2 P 2 becomes P and P 1
02:37 - becomes self so we're gonna grab the
02:40 - coordinates of P 1 add them to P 2 and
02:42 - return that in a new point object okay
02:45 - now the same works for subtract multiply
02:49 - and divide and for a few others as well
02:51 - so I'm just saying simply gonna copy
02:53 - this okay and paste it one more time and
02:55 - instead of add now you're probably guess
02:57 - I'm going to put sub and what this is
03:00 - going to do is allow us to subtract
03:02 - points so it's gonna be the exact same
03:05 - except now we are simply going to
03:07 - subtract the coordinates now with
03:09 - multiplication this one is simply
03:11 - defined underscore underscore mole
03:13 - underscore underscore and this going to
03:14 - allow us to use the asterisks or the
03:16 - star to multiply two different point
03:19 - objects so same thing it takes a point
03:20 - and in this case when we multiply points
03:23 - I could return a new point with
03:25 - multiplied coordinates but the way it
03:27 - actually works if you know anything
03:28 - about vectors is we're simply gonna
03:29 - return the scalar product which means
03:31 - you multiply the first two x-coordinates
03:34 - get a value in this case we get nine and
03:37 - then you actually add it to the
03:39 - y-coordinates multiplied together so in
03:41 - this case we'd have nine what do you
03:43 - call it plus eight and that would give
03:45 - us 17 we're not returning a new point
03:48 - object it's a scalar or like just a
03:50 - number value okay so we're gonna do here
03:52 - is we're gonna return self dot X
03:54 - multiplied by P dot X plus self-thought
03:58 - Y multiplied by P dot y and those are
04:02 - the three that I'm going to stick with
04:03 - right now and I'm gonna show you a bunch
04:05 - more that we can use to compare point
04:06 - objects using greater than equal then
04:08 - sign in just a second so I want to test
04:10 - if this is working so let's create a new
04:11 - point when say point five is equal to p1
04:15 - plus p2 and I'm gonna say point six is
04:18 - equal to P for minus t1 okay and then
04:22 - we'll even go as far as creating p7 and
04:25 - applying p2 and p3 just to make sure
04:29 - everything's working so now I'm simply
04:30 - going to print to the screen p5 p6 and
04:35 - p7 and let's see what we get so you can
04:39 - see here I get main point object main
04:42 - point object and 9 now the way that this
04:46 - worked and the reason that we're not
04:47 - actually getting a coordinate value is
04:49 - because I have to show you another
04:50 - method that we can use so that this was
04:52 - actually gonna give us something
04:53 - meaningful because right now when we
04:55 - point printout our point objects right
04:57 - because 0.5 is a new point object
04:59 - because when we add point 1 and point 2
05:01 - we are returned sorry a new point object
05:04 - right so if we want to make this
05:07 - meaningful and not just show us the
05:09 - address in memory where the point is
05:11 - stored which it currently is right now
05:12 - we need to add another method and this
05:14 - one is called STR okay what this is
05:18 - gonna do is this is going to be called
05:21 - every time we try to convert our point
05:23 - object into a string so when we try to
05:25 - print our point object it automatically
05:28 - looks for STR and if it doesn't find it
05:30 - it gives us this kind of gibberish right
05:33 - here but if it does find it it's simply
05:35 - going to well use the value that we
05:37 - returned so in this case we want to
05:39 - return I think we'd want to return from
05:41 - string probably the self dot coordinates
05:44 - right so I want it to look something
05:46 - like this
05:47 - we have brackets and then plus STR and
05:50 - then self dot X plus a comma plus STR
05:57 - self-thought Y and plus and then another
06:01 - bracket like this ok so now if I try to
06:03 - print point five point six at point
06:05 - seven you can see what we get and there
06:07 - we go so now instead of getting that
06:09 - gibberish we get 6 6 negative 3 and
06:11 - negative 3 now keep in mind you can make
06:14 - this anything you want but you do have
06:16 - to return a string value here for this
06:18 - to work ok so the next methods we're
06:21 - going to talk about I'm just gonna put
06:23 - them above string here just for good
06:25 - practice is going to be comparing two
06:27 - points so this is great now we can add
06:29 - we can subtract we can multiply but what
06:32 - if we want to compare so what if we want
06:33 - to see if point 1 is greater than 0.2 or
06:35 - if point 3 is greater than point
06:37 - well how do we do that we first have to
06:40 - determine how are we gonna compare
06:42 - points are we simply going to compare
06:44 - the exes and the Y's or are we gonna
06:47 - find like the magnitude of a point like
06:49 - what are we gonna do to compare which is
06:51 - larger in my case I want to find the
06:54 - length of a point from the origin so in
06:57 - this case the way this would work I
06:59 - think I can just bring up a little grid
07:00 - program here and just draw it for you
07:03 - quickly so if you have an origin like
07:06 - this okay I'm just using my mouse right
07:07 - now and you had a point here and a point
07:10 - here well from the origin this would
07:12 - have a distance and from the origin this
07:14 - would have distance obviously this could
07:16 - be like a distance of seven this could
07:18 - be a distance of two and seven would win
07:20 - right because we don't really care about
07:21 - the negatives if you had something all
07:23 - the way over here with a larger distance
07:24 - then what we would want that to win
07:26 - right so that's the way that we're gonna
07:27 - compare them and I'll talk about that
07:29 - and how we do that in one second so to
07:32 - compare we have four major comparisons I
07:36 - think that we can do and it goes I'll
07:37 - type down and we'll see so one of them
07:39 - is greater than and that is GT okay and
07:43 - you can do self and you also need
07:45 - another point object like this another
07:48 - one is greater than or equal to and
07:50 - greater than equal to simply GE okay and
07:53 - then the same thing we need P we have
07:56 - less than so define and you can probably
07:59 - guess LS or sorry LT what am I saying
08:02 - less then and then we also have less
08:06 - than or equal to so L II like that and
08:11 - we have one more and this is simply
08:13 - equal to so this is if we do the double
08:15 - equal sign then it's going to give us a
08:17 - comparison now in these methods we need
08:19 - to return a true or a false value so n
08:22 - greater then remember the way I said I
08:24 - wanted to compare them is to get like
08:26 - the magnitude of the point from the
08:28 - origin so I'm just gonna add a method in
08:30 - here I'm just gonna call it
08:32 - let's do length maybe okay and then in
08:36 - here I'm simply actually we don't need
08:38 - to take anything we're just going to
08:39 - return the math dot sqr T and I'm gonna
08:44 - import math right up here and this is
08:47 - simply how you get the length from the
08:48 - origin okay
08:49 - of self dot X ^ 2 + on again self dot
08:58 - why should the exponent - and this is
09:01 - gonna give us the length okay
09:02 - so import length so when I'm doing
09:04 - greater than I want to see if return
09:08 - self thought X first what am I saying
09:11 - self thought length is greater than P
09:15 - dot length like this okay
09:17 - and I believe we do actually need these
09:19 - square brackets here so all this is
09:21 - going to do is it's a boolean condition
09:22 - it says well if the length of our self
09:24 - is greater than the other length we'll
09:26 - then we're simply greater than so let's
09:27 - just copy this and put it in here and in
09:30 - this case we're just going to be greater
09:31 - than or equal sign because this is
09:33 - greater than or equal to copy this again
09:35 - change this around to less than and one
09:38 - more time and this is now just gonna be
09:40 - less than or equal to now if we're
09:42 - seeing if two things are equal to each
09:44 - other well that's pretty easy as well
09:46 - all we can do is simply take this or
09:50 - actually the way we're going to do this
09:51 - is just see if the coordinates are the
09:52 - same because if we try doing the math
09:54 - dot square root and we get like a large
09:56 - decimal number sometimes decimals kind
09:58 - of mess up in Python and they don't get
09:59 - the same precision so let's just return
10:02 - if self-thought x equals equals P dot X
10:06 - and self dot y equals equals P del Y
10:10 - because that would mean that they are at
10:11 - the same point right okay so let's do
10:13 - some comparisons now so let's just
10:15 - simply print if P 1 equals equals P 2
10:20 - and then we'll print if p1 is greater
10:23 - than p2 and we can print if P 4 is less
10:28 - than or equal to p3 okay and just test
10:32 - these out okay so we get false true and
10:35 - true and you guys are welcome to mess
10:37 - around with these and kind of figure
10:39 - those out for yourself so I will show
10:41 - you I'm not going to go through all the
10:43 - methods because there's a lot of ones
10:44 - that you can overload but I'll show you
10:46 - how you can have a look at all of the
10:47 - different methods okay so I'm just gonna
10:50 - pull up a web page here that has like a
10:52 - large list of all of the kind of
10:54 - built-in methods that you can override
10:55 - or like what'd he call it overload there
10:59 - is a way in Python to like see all of
11:01 - them in print
11:02 - to the screen but I completely forget
11:04 - the command so I apologize when you guys
11:05 - knows that command please let me know in
11:07 - the comments because I've been looking
11:08 - for it I can't find it but anyways you
11:10 - can see here there's a ton like I think
11:13 - there's like a hundred or something of
11:14 - built-in ones that you can use like add
11:16 - sub mold if true to Florida can read
11:19 - through here and see what they all do
11:20 - some useful ones I will mention is
11:23 - probably Len I probably should have
11:25 - talked about that one but it's if you
11:27 - call the Len function on something so
11:30 - actually I'll show you Len really
11:31 - quickly just because I feel like I
11:33 - should have talked about so instead
11:34 - doing length here I could have just done
11:36 - define underscore underscore Len
11:39 - underscore underscore and what this
11:41 - would have done now is if I call like
11:43 - Len of p1 it's just gonna return
11:47 - whatever value I have here so mapped on
11:49 - square root okay that's like a really
11:51 - useful one too so I don't know why I
11:52 - didn't talk about that but anyways so
11:54 - I'll go back to this page for one second
11:55 - you can see real numbers slice slice can
11:58 - be useful if you're dealing with kind of
12:00 - like list objects that you're creating
12:01 - items and slices you can go through all
12:04 - these and kind of read them yourself I'm
12:06 - not going to talk about all of them
12:07 - because I'm sure these you guys probably
12:08 - want to end up using very much the ones
12:10 - that are very important are the ones I
12:12 - talked about so yeah so you can see
12:13 - built-ins like there's something you can
12:15 - do with like their built-ins to see them
12:17 - all
12:17 - alright and yeah I'll leave this link in
12:20 - the description in case any of you guys
12:21 - are interested in having a look at these
12:22 - but there is some way in Python again if
12:24 - you know that way please let me know ok
12:27 - guys so that's been it for this video in
12:28 - the next video I'm gonna be talking
12:30 - about static and class methods and then
12:33 - in the future video I'm gonna be talking
12:34 - about private private and public classes
12:36 - in Python so if you guys enjoyed the
12:39 - video please make sure you leave a like
12:40 - and subscribe and I'll see you again in
12:41 - the next one
12:42 - [Music]