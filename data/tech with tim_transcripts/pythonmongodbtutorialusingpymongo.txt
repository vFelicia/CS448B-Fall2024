00:00 - so this video is gonna show you how to
00:02 - use MongoDB with Python and the Python
00:05 - module pi now MongoDB is an
00:08 - awesome database it's super easy to get
00:10 - set up and in this video I'm gonna be
00:11 - showing you how you can get 500
00:13 - megabytes of free data in the cloud that
00:15 - you can use for any applications that
00:17 - you want
00:18 - so let's get ahead go ahead and get
00:20 - started setting up what's known as a
00:21 - cluster and then we're gonna start
00:22 - working with the actual Python code and
00:24 - seeing how we can do different
00:26 - operations on our database retrieve
00:28 - information delete information add
00:30 - information all of that kind of fun
00:32 - stuff now just quickly before I move too
00:34 - far I just want to say that this is a
00:35 - beginner tutorial so I'm going to be
00:38 - showing you just kind of the basics of
00:39 - MongoDB it's capable of a lot more but
00:42 - if I were to show you everything this
00:43 - would be hours long so I'm hopefully
00:45 - hoping this will take about 10 to 15
00:47 - minutes and the Python code I'm gonna go
00:49 - through will just show you the basic
00:50 - operation so like add search delete and
00:53 - find modify update that kind of basic
00:56 - stuff so that being said let's get
00:58 - started so we're gonna have to head over
01:00 - to MongoDB comm and create some kind of
01:03 - account here now I already got one but
01:05 - what you guys need to do is just go
01:06 - ahead and click sign up or try for free
01:08 - and then it should bring you to a page
01:10 - that looks like this that is obviously
01:13 - once you've created an account so what
01:15 - we're gonna do is go ahead and click
01:16 - build my first cluster and now we're
01:18 - gonna select some options for our free
01:20 - cluster so you get one free cluster with
01:23 - MongoDB in the cloud at least and you
01:26 - can also host this locally on your own
01:27 - machine but that's a whole different
01:29 - process that I'm not going to talk about
01:31 - today so I'm just gonna go ahead and
01:33 - stick with the default here so Amazon
01:35 - Web Services North Virginia obviously
01:38 - you're gonna want to pick the free tier
01:39 - that is closest to you so you get the
01:41 - lowest latency to your database but I
01:44 - haven't had any issues with speed or
01:45 - anything like that now obviously if you
01:48 - want to you can update some of this
01:49 - stuff and you will have to pay for it on
01:52 - a monthly basis or an hourly basis or
01:54 - something like that but I'm just gonna
01:55 - go through the free tier in North
01:57 - Virginia and click create cluster now
01:59 - creating your cluster does take a few
02:01 - minutes because it actually has to set
02:03 - up and allocate some space on a physical
02:05 - machine for you so give this a few
02:07 - minutes should take about 710 that's
02:09 - what it says here and once that's done
02:11 - we'll get started working with
02:12 - the actual cluster alright so now that
02:14 - our cluster is created we're gonna go
02:16 - ahead and set up a sample database to
02:18 - start and then choose some connection
02:19 - options so we're gonna click right on
02:21 - cluster 0 right here we're gonna go to
02:24 - collections and then we're gonna create
02:26 - a new database so to do this right click
02:27 - add my own data and now type in a
02:30 - database name and a collection name so
02:33 - databases are like specific to your
02:35 - application at least that's the way that
02:37 - I typically do it so let's say we have
02:39 - an application maybe my disc or bought
02:40 - for example I would name this discord
02:43 - and then inside of collections that's
02:44 - going to be the specific information
02:46 - associated with that database so these
02:49 - are like kind of sub lists of the
02:51 - database so maybe you want to have your
02:53 - information organized by like users
02:54 - messages connections something like that
02:58 - whatever it is then you're gonna have
02:59 - three different collections for that now
03:01 - in our case we're just gonna have one
03:02 - collection and one database and I'm
03:05 - gonna talk more about this in a little
03:06 - bit once we actually get to the code so
03:08 - I'm just going to name both of these
03:09 - tests and click create you don't need to
03:11 - cap the collection although you can if
03:13 - you want so we're gonna do that it's
03:15 - gonna take a second load up and now we
03:17 - actually have a database and a
03:19 - collection so you can see that this
03:20 - right here that's showing is actually
03:22 - our database and then this is the
03:24 - collection and you can create new
03:26 - collections by just clicking add here
03:28 - and then adding a new collection like
03:30 - that so once we've done that we're gonna
03:33 - go back to project 0 and we're gonna go
03:35 - to this connect option under cluster 0
03:37 - now this is pretty straightforward and
03:40 - it kind of walks you through exactly
03:41 - what you need to do the first step is to
03:43 - whitelist your IP so there should be a
03:45 - little button here that says whitelist
03:46 - IP just click that if you're gonna be
03:48 - working on a different computer again
03:50 - need to whitelist that IP as well this
03:52 - is just the allowed IP addresses to
03:54 - access the database then we're gonna
03:57 - create a MongoDB user so that we can
03:59 - login so in this case I've already done
04:01 - one but just fill in the information
04:02 - user name and password next choose a
04:05 - connection option we're gonna go to
04:06 - connect your application we're gonna
04:09 - change this driver to Python because
04:11 - that's we're gonna be using select the
04:12 - option or version you're gonna be using
04:15 - this case 3.6 or later for myself and
04:18 - we're gonna click on copy now once we've
04:20 - done that we're all done everything we
04:21 - need to do from the web browser side and
04:23 - it's time to actually run into our
04:24 - Python code so I'm just
04:26 - paste that connection ID that I had
04:28 - right here in my Python code and now
04:31 - it's time to install the Python module
04:33 - pymongo
04:34 - so to do this we're gonna go to our
04:36 - command prompt and simply type pip
04:38 - install pymongo
04:40 - now this will take a second and I'm
04:43 - assuming you guys already have pip
04:44 - installed on your machine it comes
04:46 - default with Python but if for some
04:47 - reason your pip does not work leave a
04:50 - comment down below or click on the card
04:52 - that I'm gonna leave in the top right
04:54 - hand corner here it'll show you how to
04:55 - fix this command so if you type pip and
04:58 - you get something like pip is not a
05:00 - recognized command click that video
05:01 - it'll show you how to fix this alright
05:04 - so now that we have pymongo installed as
05:06 - our python package it's time to start
05:08 - working with it so the first thing we're
05:10 - going to do is import pymongo from the
05:12 - top of our code here and we're gonna say
05:14 - from PI import client now
05:19 - what we're gonna do is setup our initial
05:21 - connection to what that cluster is so
05:23 - that cluster is the first thing we
05:25 - created and what we're gonna do is we're
05:26 - gonna say in this case I guess we just
05:28 - did cluster is equal to client and
05:32 - then in here we're gonna put this URL
05:34 - that we had inside of quotation marks so
05:36 - we'll put that in here and we just need
05:39 - to modify this slightly so where it says
05:41 - password in here where you're actually
05:42 - gonna just type in your password now my
05:45 - password was just 1 2 3 4 so I'm gonna
05:47 - put that there and for any of you that
05:48 - think you're just gonna go and mess with
05:50 - my database I'm obviously deleting this
05:52 - before I've released the tutorial so go
05:54 - ahead but you won't be able to now after
05:56 - we do that we're going to define what
05:58 - database we're working with and what
06:00 - collection we're working with so this is
06:01 - the connection to that actual cluster so
06:04 - the machine that's holding our database
06:06 - but now we have to pick what database we
06:08 - want so I'm gonna say DB standing for
06:10 - database is equal to cluster and then
06:13 - just like you would index something in a
06:14 - dictionary we're gonna put the name of
06:16 - our database which was test inside of
06:18 - quotation marks inside of brackets like
06:20 - this now we need to choose our
06:23 - collection that we're going to be
06:24 - working with so now we've gone from
06:25 - client to database now collection so
06:28 - we're going to say collection is equal
06:31 - to in this case DB and we name that one
06:34 - test as well so we'll put test right
06:35 - there and now we have access to our
06:37 - collection and we can actually start
06:39 - adding some
06:40 - into our database so the first thing I'm
06:42 - gonna show you is how to add something
06:43 - so to do this what we're gonna do is
06:46 - take collection dot insert underscore
06:49 - one like that and we're gonna put in
06:52 - here what's known as a post now it's
06:55 - time to talk about what a post is so the
06:57 - way that things work in MongoDB is we
07:00 - have starting with our cluster which is
07:02 - kind of that space in the cloud then we
07:04 - have a database and a set of collections
07:07 - now a collection is kind of like a mini
07:09 - database that's the way you can think of
07:10 - it and each collection contains what's
07:12 - known as posts so you can think of them
07:14 - just as entries but we call them posts
07:17 - now posts have a few properties
07:19 - associated with them they look like a
07:21 - Python dictionary when we're dealing
07:23 - withwith them in Python code or like a
07:25 - JSON file or something like that and
07:27 - they always have what's known as this
07:29 - underscore ID tag now this ID is how
07:32 - you're actually going to access all of
07:33 - these posts so you want to make this
07:35 - something meaningful now when we start
07:38 - creating a post what we essentially do
07:39 - is just create a bunch of dictionary
07:41 - keys that map to values so in this case
07:44 - I have underscore ID this is going to be
07:45 - a property of my post or an entry or
07:48 - some kind of information associated with
07:50 - that post and in this case I'm just
07:52 - gonna set like ID 0 ok now maybe we want
07:56 - to have some more information in this
07:57 - post and we're gonna make me call this
07:59 - name so I'm gonna do name and then I'll
08:01 - set this value equal to 10 maybe I want
08:04 - to have the date or maybe I want to have
08:06 - some kind of number associated with Tim
08:08 - maybe I'll do like score and this is
08:11 - going to be equal to I don't know let's
08:13 - say 5 so this is how you create
08:15 - information and as a post in MongoDB so
08:19 - again we go from database to collection
08:21 - to post and then inside a post we have
08:24 - these fields we always have this
08:26 - underscore ID field and if we decline to
08:29 - give it a value it'll automatically
08:31 - generate an ID for us or some
08:33 - arbitrarily arbitrary number and then we
08:35 - can give some values here like name is
08:37 - Tim and score is 5 so now that we've
08:40 - created this post I'm just gonna call
08:41 - this one post like that what we do is we
08:43 - simply insert it by just doing
08:45 - collection don't insert underscore 1
08:47 - post now if I actually run this code and
08:50 - we look at our database you will see
08:51 - that I insert a post that looks like
08:53 - so let's go ahead and do this control B
08:55 - to run our code no output obviously
08:57 - because this is just gonna work now if I
08:59 - go and I have a look at my cluster and I
09:02 - go inside of collections and we go to
09:04 - test you can see that we have a post
09:06 - here and this is ID 0 named Tim score 5
09:10 - now these are also called documents I
09:13 - kind of just call them post because
09:15 - that's what they do in the tutorial but
09:16 - they're known as documents or posts
09:18 - whatever one you want to call them and
09:20 - they have fields associated with them so
09:21 - ID name score now I want to quickly show
09:24 - you what happens if I don't add an ID so
09:26 - let's say ID now insert something so
09:28 - named Tim score 5 and I run this code
09:31 - now if I go and look at my database
09:34 - what you can see if i refresh this is
09:36 - give it a second here that we just
09:39 - completely create some random ID which
09:41 - is known as an object ID and obviously
09:44 - this does not mean much to us so I
09:45 - recommend that you always create some
09:48 - kind of ID when you pass in a post or a
09:50 - document or whatever you want to call it
09:52 - into your database but again you don't
09:54 - have to one will be created for you if
09:56 - you do not alright so now let's talk
09:58 - about some more things that we can do
09:59 - with our database alright so another
10:01 - thing we might want to do is insert more
10:02 - than one post so to insert multiple
10:04 - posts and actually as many posts as
10:06 - you'd like
10:06 - what we can use is the insert many
10:08 - methods we're gonna say collection dot
10:11 - insert underscore many and in here we're
10:14 - gonna put a list of the post we want to
10:16 - insert so really easy straight
10:17 - straightforward similar to before where
10:19 - a new post one and post two which are
10:21 - two posts I've just created here again
10:23 - we're just gonna make sure they have an
10:24 - underscore ID if you don't give it an
10:27 - underscore ID it's gonna generate that
10:28 - gibberish that we saw before so I'm
10:30 - gonna run this we're gonna wait a second
10:31 - and have a look at our database and see
10:34 - what we got so we gave it a second and
10:37 - now you can see that we have ID five Joe
10:39 - ID six Bill alright pretty
10:42 - straightforward that's how insert many
10:44 - works next thing we're going to talk
10:45 - about is find so something you're
10:47 - probably gonna want to do with your
10:48 - database is find information now to do
10:51 - this we're gonna use what's called a
10:53 - query now query sounds all fancy and
10:56 - complicated but it's actually really
10:58 - easy and the way that this is set up in
11:01 - MongoDB just makes it super simple so
11:03 - all you do is you put these dictionary
11:05 - things here like this
11:07 - and now you're simply just gonna type
11:08 - the attribute or the field you want to
11:10 - search by and you can search by more
11:12 - than one field so in this case maybe I
11:14 - want to look for a post that has the
11:16 - name Bill well what I do is I put a name
11:19 - here and then I put the value that I
11:21 - want to look for so in this case we'll
11:23 - do name and we'll do Bill and what I can
11:26 - do here is say like results equals
11:29 - collection defined and then I can print
11:31 - out results like that now if we give
11:36 - this a second we'll run the program and
11:38 - we'll see what we get by running that so
11:41 - we get this MongoDB cursor object so
11:44 - obviously that's not very useful to us
11:45 - we don't really know what that means so
11:47 - if we want to actually look through all
11:49 - these results what we need to do is loop
11:51 - through them so we're gonna say four
11:54 - results in results and then we'll just
11:58 - simply print result like that and now
12:01 - let's see what we get
12:02 - so if we do that now you can see that we
12:04 - get this dictionary ID six named Bill
12:07 - and that is the result that we found now
12:09 - say you just want to access an
12:10 - individual element here so maybe you
12:12 - just want the name or maybe you just
12:14 - want the ID of this result well you just
12:16 - do it like you access a dictionary you
12:18 - put your bracket so you put some
12:19 - quotation marks and then you put the
12:21 - field so in this case maybe you want to
12:22 - access what the ID of our result was so
12:24 - we'll just put ID run this and now you
12:27 - can see that it prints out six now if we
12:30 - had more than one attribute or document
12:33 - or post or whatever you want to call in
12:34 - our database that have the name bill
12:35 - that would return all of the results
12:37 - that meet this criteria essentially so
12:41 - this would give us more than one result
12:43 - to printing out now if we want to search
12:44 - by ID what will end up happening is
12:47 - we'll just be finding one document so in
12:49 - this case we do underscore ID and then
12:51 - here we put whatever our ideas so maybe
12:53 - our ID is five again loop through this
12:56 - and I don't know let's just print it out
12:58 - and see what we get well obviously we
13:00 - get the ID of five all right so that's
13:02 - kind of how that works for searching now
13:04 - if you want to do more advanced
13:05 - searching and finding you can actually
13:07 - use regular expressions so I could do
13:11 - something like name and then I'd
13:13 - actually don't really use regular
13:14 - expressions at all so I don't really
13:16 - know how to use them but you can just
13:17 - put a regular expression inside of
13:19 - quotation marks
13:20 - and it will search for anything that
13:22 - meets that criteria now if you want to
13:24 - search for what do you call it like
13:27 - different things as well like you want
13:29 - to search for name and ID and maybe a
13:31 - date or you want to search by multiple
13:32 - fields all you do is put a comma and
13:34 - then put the other field you want to
13:36 - search by and it will return those
13:38 - results so you guys can mess with this
13:39 - and figure out how it works pretty
13:41 - straightforward and pretty simple
13:42 - now this gave us a cursor object which
13:45 - meant that we had to loop through all of
13:46 - our results but sometimes we just want
13:48 - to find one result so if we just want to
13:50 - find one result and we're certain that
13:52 - that's in the database or whatever we
13:54 - can just do fine underscore one and then
13:57 - what we can do in here is the exact same
13:59 - thing as before so we can just query by
14:02 - whatever we want and try to find one
14:04 - result now the important thing is here
14:06 - that we you're probably going to want to
14:07 - search by ID because if you find more
14:09 - than one result I believe this returns
14:11 - the first one but it may actually run
14:14 - into an error so obviously if you're
14:15 - doing find one you're gonna want to make
14:17 - sure that you're only gonna find one so
14:19 - let's go by ID and maybe in this case I
14:20 - go by ID zero and see what we get as
14:23 - that results so let's do this
14:25 - I'm sorry I'm gonna have to print
14:27 - results and here otherwise you're not
14:28 - gonna see anything and give this a
14:30 - second and now you can see I don't have
14:32 - to loop through it to see the results I
14:33 - can just simply have a look at this
14:35 - alright so next thing after find and
14:38 - find one I actually started before I
14:40 - move on I want to show you guys what
14:42 - happens if you find and you don't put
14:44 - any criteria in here so if I just do
14:46 - find and I do that we'll have to go back
14:49 - to this looping example so we'll just
14:50 - say for I don't know X and results print
14:56 - X what happens if you just put brackets
14:58 - like this obviously this means you have
15:01 - nothing you're searching for but what it
15:03 - ends up doing is returning everything
15:04 - because everything fits this format of
15:07 - just being a dictionary so it's gonna
15:09 - return everything so if I do this and I
15:12 - don't know why I'm going to command
15:13 - prompt but I can just run it like this
15:14 - you can see that we print all of the
15:16 - results in our database and we get all
15:18 - four objects or documents or whatever is
15:20 - there so that's how you find that's how
15:22 - you find one and now I'm gonna show you
15:24 - how we can delete and then finally
15:26 - replace so to delete something is really
15:29 - simple as well all we're gonna do is
15:31 - just go in this case
15:32 - results equals collection dot delete and
15:36 - if we do delete underscore one and then
15:39 - in here maybe we'll do like hi
15:41 - underscore ID : 0 well again it's just
15:45 - gonna find the one document that fits
15:47 - this criteria and delete it so let's go
15:49 - ahead and run this give it a second now
15:53 - if we go into our database and we have a
15:54 - look here we can see that ID 0 has been
15:58 - deleted from the database so that's as
16:00 - easy as it is to delete more than one
16:02 - document we can do delete underscore
16:04 - many and then we can fill whatever
16:06 - criteria in here we want so maybe we
16:08 - want to delete all the IDS that have 5
16:12 - or maybe we want to delete any name that
16:13 - has bill or maybe we just want to delete
16:15 - everything by putting this in here well
16:18 - if we run that then it will delete
16:21 - everything from our database so now if I
16:23 - run this can I have a look here and
16:26 - everything is gone
16:28 - so a powerful command don't abuse it but
16:30 - that is how that works
16:31 - now I just realize I'm gonna have to add
16:33 - some stuff back in here because well we
16:35 - need to do some more tests so let's
16:37 - would he call it
16:38 - insert underscore many and just insert
16:42 - post one and post two here just so we
16:44 - can actually do some more tests and make
16:46 - sure that this is working so let's run
16:48 - that and now what we're gonna do is
16:51 - update and replace so sometimes you want
16:54 - to update entries in your database you
16:56 - don't want to just delete them and
16:57 - re-add them or have to do any stuff like
16:59 - that so what we can do to do that is
17:01 - update so in here we can say update and
17:05 - now again we need to update many or
17:07 - update one in this case we're just going
17:09 - to do update one and what we'll do is
17:11 - we'll do a search query for what is the
17:13 - document we want to update and then
17:16 - we're gonna add what's known as updates
17:18 - what does it update operators or
17:20 - something like that it will tell us what
17:22 - we need to update on so I'll show you
17:24 - how that works in just a second so if I
17:27 - put underscore ID here and let's say we
17:29 - update what IDs do we have ID 5 now what
17:33 - we're gonna do is we're gonna put an
17:34 - update operator which is I'll talk about
17:37 - them in this second here so something
17:39 - like set alright and then we're gonna
17:42 - put a colon and the value we want to set
17:44 - so I'll show you how this works but
17:46 - looking up the documentation here so
17:48 - essentially what we do is we have
17:50 - something like increment or min or max
17:52 - or mol rename these are the different
17:55 - update operators for fields there's some
17:58 - update operators for arrays some update
18:00 - operators for modifiers bitwise I'll
18:02 - leave a link to the description down
18:03 - below but these essentially do what they
18:05 - say they do so set will set the value of
18:08 - the field in the document which we will
18:10 - define set on insert will do what this
18:12 - says unset will remove a field max will
18:15 - go to the max value of that field
18:17 - increment will increment it by a certain
18:19 - amount so if I show you guys how this
18:21 - works here essentially what we do is we
18:24 - go set and then we put : we put whatever
18:27 - the values we want to update so in this
18:29 - case maybe we want to update let's say
18:30 - name and we want to change that to be
18:33 - Tim well that's all we do we do set name
18:36 - Tim now if I run this here like that and
18:38 - we go into our database you can see that
18:41 - we've actually changed those things that
18:44 - were added so now we have an entry that
18:46 - says Tim so there we go ID 5 now says
18:49 - Tim instead of saying whatever the other
18:51 - one did now if we want to add a new
18:53 - field here all we do is just write the
18:55 - field in so let's say like hello and
18:56 - maybe that's equal to 5 and we let that
19:01 - run well now we'll add a new field
19:03 - called hello and that will be a part of
19:05 - this document and give that a second and
19:08 - now you can see that we have hello and 5
19:11 - so that's as easy as it is to update
19:13 - fields really straightforward if you
19:15 - want to update more than one you can do
19:17 - update many and then same thing here you
19:19 - can just change this to be what do you
19:22 - call it like something that will access
19:23 - more than one document and then this
19:25 - will stay the same whatever you want to
19:27 - set or change or update or increment or
19:29 - whatever that is will happen there so
19:32 - let's say I actually want to increment
19:33 - hello I'll just show you how this works
19:34 - quickly so I go increment and then I go
19:37 - hello instead of now just setting it to
19:40 - 5 what's actually gonna happen is we're
19:42 - gonna add 5 because increment means
19:43 - increment by whatever this value is so
19:46 - if I run this by hitting ctrl B we go
19:49 - back here we refresh now we can see that
19:53 - we've actually updated hello to 10 by
19:55 - using that increment set operator or
19:57 - update operator sorry and you can see
19:59 - all these are here again link in the
20:01 - description all right so the final
20:03 - things that we might want to do is
20:05 - actually count the amount of documents
20:07 - that meet a certain criteria so what
20:09 - we're gonna want to do to do that is you
20:11 - use count underscore documents so I can
20:13 - say post underscore count equals
20:16 - collection dot count underscore
20:19 - documents like that and then all I do in
20:22 - here is put some kind of query so what
20:24 - documents I want and if I print out post
20:27 - count it'll give me an integer value for
20:29 - all of the posts or documents that fit
20:32 - that criteria so in this case I'm
20:34 - searching for everything so it should
20:35 - just give us however many documents we
20:37 - have in there so let's go ahead and run
20:39 - this and you can see that we get two
20:41 - because again we only have two documents
20:43 - that are in our database so that is kind
20:46 - of as easy as it is to it you can see
20:49 - that everything is pretty intuitive we
20:50 - have count documents we have insert many
20:53 - insert one replace all that kind of
20:55 - stuff anyways I hope you guys got some
20:57 - value out of this video and now you're
20:58 - able to use PI and MongoDB again a
21:02 - really awesome resource really easy to
21:04 - use for your own personal projects you
21:06 - want to host some stuff in the cloud you
21:08 - guys have any questions don't hesitate
21:09 - to leave a comment down below we're
21:11 - joined by discord server message me on
21:13 - twitter message me on instagram i'm
21:14 - always helping out people in that way
21:16 - and finally if you guys did enjoy the
21:18 - video and got some value please make
21:20 - sure you hit that like button and
21:21 - subscribe to the channel for more
21:22 - content