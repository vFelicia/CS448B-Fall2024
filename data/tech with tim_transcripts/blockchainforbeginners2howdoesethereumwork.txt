00:01 - hello everybody and welcome to part two
00:03 - of this video series in this part i'm
00:06 - going to be explaining to you the theory
00:08 - behind blockchain technology so
00:10 - specifically going through some key
00:11 - terms like private keys public keys
00:14 - cryptographic hash functions what those
00:16 - are how those work i will talk about
00:18 - transactions how a transaction is
00:20 - created and signed and secured i will
00:23 - talk to you about blocks how blocks are
00:25 - connected together i will then start
00:27 - talking about proof of work which
00:29 - involves minors and securing the
00:30 - blockchain and while all of this is very
00:33 - very interesting and i try my best to
00:35 - break it down as simply as possible for
00:37 - you in this video so in a second we're
00:39 - going to hop over to the drawing tablet
00:41 - i'm just going to start doing some
00:42 - diagramming and explaining and i
00:44 - encourage you to sit back relax and
00:46 - enjoy the explanation however before we
00:48 - do that i quickly need to thank the
00:49 - sponsor of this video and this series
00:51 - which is cartesi now cartesia is a
00:53 - company that is dedicated to making the
00:55 - blockchain more accessible and
00:57 - affordable and when i say affordable the
00:59 - reason that's important is because as
01:01 - you're going to see as we go through the
01:02 - rest of these videos here deploying
01:04 - smart contracts is very very expensive
01:07 - now cartesi offers a bunch of solutions
01:09 - that can actually cut this cost by a
01:11 - factor of almost 100 and really just
01:13 - make it much easier to work on the
01:15 - blockchain anyways we'll hear more from
01:17 - them later on and we'll actually start
01:19 - using some cartesi technology hopefully
01:21 - in a future series but regardless
01:23 - they're an awesome company they've been
01:25 - helping me come up with the content for
01:26 - this video and i'm just super grateful
01:28 - and happy to be working with them
01:30 - regardless let's dive into the video
01:35 - [Music]
01:41 - all right so i'm now on the blackboard
01:43 - ignore the black screen there will be
01:44 - some drawing in one second but for now
01:47 - i'm gonna start by explaining to you
01:49 - some key terminology related to
01:51 - cryptocurrency specifically private key
01:54 - public key and address so let's actually
01:56 - start by looking at what's known as a
01:58 - cryptographic hash function because it's
01:59 - very important to understand this
02:01 - concept so we have a function let's say
02:04 - f x
02:05 - and this is equal to y this means you
02:07 - take some input x you get some output y
02:10 - pretty standard now with most regular
02:12 - functions you can compute what's known
02:13 - as the inverse now the inverse of f is
02:15 - known as f inverse and then you would
02:17 - take y
02:18 - and this will give you x so the idea
02:20 - here is that given some output and given
02:23 - the function that computed that output
02:25 - tell me what the input to that function
02:27 - would need to be to get that output so
02:29 - the inverse is like this you take the
02:31 - output you pass that to the inverse
02:33 - function and it gives you the input
02:34 - required to pass to the original
02:36 - function to get that output so let's
02:38 - just look at one concrete example
02:40 - let's say we have something like y is
02:43 - equal to x plus 2.
02:46 - well if 2 is my input then y is 4. now
02:49 - compute the inverse of this function the
02:51 - inverse of this function you simply
02:52 - compute by isolating x so you would just
02:55 - say y minus 2 is equal to x that's the
02:58 - inverse and so if i give you the value 4
03:00 - you can tell me 2 was used to compute
03:02 - that
03:03 - great so now that we understand what the
03:05 - inverse is the first property of a
03:07 - cryptographic hash function is that it
03:09 - has no inverse so we're going to call
03:11 - this now
03:12 - the hash
03:14 - function so let's do hash func this is
03:16 - going to be our input and this is going
03:18 - to be our hash
03:20 - otherwise known as a digest okay you
03:22 - don't really need to know that but hash
03:24 - is what i'm probably going to be
03:26 - referring to this as as we go through
03:27 - this video so the first factor or the
03:30 - first property of a cryptographic hash
03:32 - function is that it has no inverse now
03:34 - what that really means is that given y
03:36 - you cannot find x so if you're given the
03:39 - function and the output of the function
03:41 - there's no way to figure out what the
03:42 - input is that's very very important so
03:45 - to clarify here when i say we can't find
03:47 - the inverse of a cryptographic hash
03:48 - that's not necessarily true now it's
03:51 - important to note that here i'm not
03:52 - talking about the cryptographic hash
03:54 - function i'm talking about the actual
03:57 - hash itself that was the output of this
03:59 - function
04:00 - so currently there is no efficient way
04:02 - or formula that we know that we can use
04:04 - to take an individual hash and determine
04:07 - its inverse however it may be possible
04:10 - to invert a hash using a brute force
04:12 - approach where you would blindly guess
04:14 - and try several different values until
04:16 - you determine what the original input
04:18 - value was that generated this hash now
04:21 - this brute force approach would take
04:23 - billions of years to perform and that's
04:25 - why we say a cryptographic hash has no
04:27 - inverse because it would take an
04:28 - extremely long and unfeasible amount of
04:31 - time to compute it so yes theoretically
04:33 - it may be possible to compute the
04:35 - inverse of an individual hash but it
04:37 - would take such a long time that we just
04:39 - simplify things by saying it has no
04:41 - inverse so moving on the next property
04:44 - of a cryptographic hash function is that
04:46 - it is deterministic that means that any
04:48 - input x1 always leads to one output y1
04:52 - so second property deterministic again
04:54 - meaning that one input always points to
04:56 - the exact same output
04:58 - next property is that every output is
05:00 - unique so if i pass x1 i get y1 nothing
05:04 - else points to y1 so if i have x2 it's
05:07 - not possible for me to get the same y1
05:09 - as soon as i have something like x2 and
05:11 - they both point to the same output this
05:12 - is no longer a cryptographic hash
05:14 - function so again i need to add a small
05:16 - clarification here theoretically it is
05:19 - possible to have two inputs mapped to
05:21 - the same output using a hash function
05:24 - now when that happens this is known as a
05:26 - collision now the thing with
05:27 - cryptographic hash functions is that for
05:29 - that to happen for you to find a
05:31 - collision just like finding the inverse
05:33 - that would take you say billions of
05:34 - years a very very long time to do so we
05:37 - can kind of operate on the assumption
05:39 - that there will be no collisions but
05:41 - theoretically if we're talking about the
05:42 - exact definition there could be so i'm
05:45 - going to kind of be speaking in this
05:46 - video in definitives just understand
05:48 - there is some nuance behind those but
05:50 - it's just much easier to operate under
05:52 - these assumptions and well hopefully
05:53 - that makes sense
05:55 - okay so those are the first three
05:56 - properties of this function the next is
05:58 - that the hash that you get is
06:00 - uncorrelated to the input so what this
06:02 - means is that if i have something like f
06:04 - of 1 1 maybe this gives me a hash of a b
06:07 - c 2 3. now you might be trying to guess
06:10 - here that if i had a hash of 1 2 then it
06:13 - would give me something similar to this
06:15 - maybe you would think we get a b c 2 4
06:18 - or something along those lines because
06:20 - you would imagine that the output here
06:22 - is correlated to the input but with a
06:23 - cryptographic hash function this is not
06:25 - the case if i were to pass 1 2 so just
06:27 - one number is different i get a
06:29 - completely different hash
06:30 - so i might get something like d
06:32 - f a
06:33 - two nine four or seven or whatever you
06:36 - know what i mean we just get a
06:37 - completely different hash there's no way
06:39 - to reasonably guess what the hash is
06:42 - going to be by looking at the input all
06:44 - right so that is great the very last
06:46 - property is that this is quick to
06:47 - compute so computing the hash of some
06:49 - input is very very fast those are the
06:52 - five properties of a cryptographic hash
06:54 - function okay so moving forward we're
06:56 - now going to talk about private keys
06:58 - public keys and addresses
07:01 - so let's start with our private key
07:04 - now the private key
07:06 - i like to think of as the master
07:08 - password for our ethereum account so the
07:11 - private key is actually what allows us
07:12 - to access our account and to send money
07:15 - so if you have access to a private key
07:17 - you have access to an ethereum account
07:19 - and while you can send money on that
07:21 - account that means you need to keep this
07:24 - private you do not want to share this
07:25 - with anyone and in fact we don't even
07:27 - look at what our private key is when we
07:29 - use metamask it's generated for us and
07:32 - stored in an encrypted fashion in kind
07:34 - of the back end of metamask so that no
07:36 - one can actually see it now when i say
07:38 - encrypted this is actually one of the
07:40 - reasons why we need to pass a password
07:42 - when we created our meta mask account so
07:44 - what happens in metamask is it will
07:46 - generate a private key for us but it
07:48 - won't store it in plain text so if the
07:50 - private key was one two three it will
07:53 - never store one two three instead it
07:55 - will store what's known as an encryption
07:57 - or an encrypted version of this private
07:59 - key and it will encrypt it using our
08:01 - password so we have some special
08:03 - function that's going to take in our
08:05 - private key and our password and then it
08:07 - will give us some output okay
08:10 - and then the only way to go from this
08:11 - output back to what this private key is
08:14 - is to know what the password is okay so
08:16 - we need to use the password every time
08:17 - we sign in so that we can decrypt our
08:19 - private key so that we can then use the
08:21 - private key to actually send
08:23 - transactions okay that is the private
08:25 - key and what the private key actually is
08:27 - is just a string of characters that's
08:29 - really all it is it's extremely long and
08:31 - again you usually are not going to be
08:32 - looking at this yourself it's going to
08:34 - be stored in some secure way so next
08:37 - from our private key we generate what's
08:39 - known as a public key
08:41 - now the public key is generated from the
08:44 - private key so you need the private key
08:46 - to get to the public key and we use a
08:48 - cryptographic hash function to generate
08:50 - this which means if you know the public
08:52 - key there is no way to go back to the
08:54 - private key you cannot do that because
08:56 - the way we generated it was using a
08:58 - cryptographic hash function that's very
09:00 - important because someone could
09:02 - theoretically figure out your public key
09:04 - if they do figure out what that is that
09:05 - doesn't matter there's no way for them
09:07 - to go to the private key hence why this
09:08 - is private and this is public the public
09:10 - one can be shared anywhere
09:12 - okay moving forward the next thing we
09:14 - have is our address now the address is
09:17 - generated from the public key so a
09:19 - private key and a public key actually
09:20 - make up an ethereum account and then the
09:22 - address is what you're going to actually
09:24 - send money to now what the address is is
09:27 - actually a few characters when i say a
09:29 - few it's something like 20 characters of
09:31 - the hash of this public key that's
09:33 - pretty much all i will say it's kind of
09:35 - just a simplified version of the public
09:36 - key and the way you get the address is
09:38 - you generate it from the public key so
09:40 - you go private key public key address
09:42 - and from the public key again you can
09:44 - knock it back to the private key from
09:46 - the address you cannot get back to the
09:47 - private key and that's very important
09:49 - because as soon as you have the private
09:50 - key you have access to the ethereum
09:52 - account so you give the address to
09:54 - whoever you want to send money to you
09:56 - and that is how you will reference your
09:58 - account on the ethereum network by this
10:00 - address
10:01 - great so the whole point of the address
10:03 - as i was saying is it's just a
10:04 - simplified version of the public key so
10:06 - it's a little bit easier to be using on
10:08 - the blockchain rather than writing the
10:10 - public key everywhere so now that we
10:11 - understand private key public key and
10:14 - address we need to talk about
10:15 - transactions and then how the blockchain
10:17 - actually handles transactions so let's
10:19 - say we have the example where we have
10:21 - maybe account one
10:23 - in account two and account one wants to
10:25 - send some ethereum maybe 0.1 f to a
10:28 - count two how do we do this well to do
10:30 - this we need a transaction now anyone
10:33 - can create transactions on the
10:35 - blockchain anyone can do it and what's
10:37 - involved in a transaction
10:39 - is an amount
10:40 - so this is going to be 0.1 f
10:42 - we're going to have a 2 wallet so what
10:44 - address we're going to so we're going to
10:46 - be going to account two and then from
10:50 - this is going to be account one now the
10:52 - only problem right now with this
10:53 - transaction is that we kind of have to
10:55 - trust that who's making this transaction
10:58 - is the person who's sending the money
11:00 - right the from address but
11:02 - theoretically account two
11:04 - could make this transaction and say oh
11:07 - yeah account one is sending me all of
11:08 - its ethereum anyone could just make a
11:10 - transaction you could add as many as you
11:12 - want and you could just throw them on
11:13 - the blockchain and while if there was no
11:15 - security then you would just have random
11:17 - people adding transactions all of the
11:19 - time
11:20 - that is why we have something known as a
11:22 - digital signature
11:24 - so a digital signature is a very special
11:27 - hash that involves the actual private
11:30 - key of the account trying to send the
11:32 - money so of the from account as well as
11:35 - all the information associated with the
11:36 - transaction now i won't talk too much
11:38 - about the signature because it's pretty
11:39 - mathematically complicated but to be
11:41 - able to actually create a transaction
11:43 - that is valid what you need is the
11:45 - private key of the account you're trying
11:48 - to send ethereum from so this signature
11:50 - here again as i was saying is going to
11:52 - require
11:53 - the private
11:55 - key as well as the transaction itself so
11:57 - the transaction i'm just going to
11:58 - represent by tx and then there's
12:00 - actually another part of this as well
12:02 - and anyways you hash all of this it
12:04 - gives you some you know random string of
12:06 - characters and this string of characters
12:08 - you can verify is a correct
12:11 - signature for this transaction now the
12:13 - way that you actually verify this
12:14 - signature is simply by using the public
12:17 - key of the account that's sending this
12:19 - ethereum so if we see a transaction
12:21 - that's coming from account number one we
12:23 - don't need to know account number one's
12:24 - private key to determine that the
12:26 - signature is valid we can just use their
12:28 - public key and a special kind of
12:30 - mathematical computation to determine
12:33 - that this signature is valid and that it
12:34 - was actually signed by the account
12:36 - that's sending the ethereum because
12:38 - again you can only send this ethereum if
12:40 - you have access to the private key of
12:42 - the account that's supposed to be
12:44 - sending the ethereum so just know for
12:46 - now that you can verify a signature very
12:48 - easily without knowing the private key
12:50 - of the account you just use a certain
12:52 - aspect of the public key i'm not going
12:54 - to go into too much more detail but that
12:56 - is how you verify a signature so anyways
12:58 - that is how you actually secure a
12:59 - transaction you digitally sign it using
13:02 - your private key and a few other things
13:04 - we don't have to manually do that
13:05 - ourself it's done by metamask when we
13:07 - actually send a transaction okay so
13:10 - let's remove all this and now let's see
13:12 - how we actually associate a transaction
13:14 - with a block and how we actually you
13:16 - know use the blockchain and put a
13:18 - transaction on the blockchain because
13:20 - right now we made this transaction
13:21 - that's fine but we need to send it on
13:23 - the blockchain we need to attach it to a
13:25 - block before it's actually going to go
13:26 - through before our money gets sent to
13:28 - the other person
13:30 - so let's look at what a blockchain is
13:32 - let's say we have one block like this
13:34 - another block like this and a third
13:37 - block like this now all of these blocks
13:39 - are connected together in a chain now
13:41 - they would be of equal size i've
13:43 - obviously drawn mine a little wonky here
13:45 - but all of these blocks contain some
13:46 - information on them as well as all of
13:48 - the transactions and smart contracts
13:51 - that were added to them at the current
13:53 - point in time
13:54 - so what this blockchain actually does is
13:57 - it represents a digital ledger of the
13:59 - entire history of the ethereum network
14:01 - when we're talking about ethereum here
14:03 - right so every single transaction is a
14:06 - transaction that has taken place and we
14:07 - know the order in which they took place
14:09 - because they're ordered on the block and
14:11 - then all of these blocks are ordered and
14:13 - this is very similar to something like a
14:14 - ledger that you would have at a bank so
14:16 - a bank would keep track of every single
14:18 - transaction you had sent and everyone
14:20 - else had sent it would know all of that
14:21 - information well same thing here with
14:23 - the blockchain we just do it in a
14:24 - different way and one of the key
14:26 - properties of the blockchain is that it
14:27 - is decentralized
14:29 - this means it is not controlled by a
14:31 - bank is not controlled by a single
14:32 - person it is controlled by a network of
14:34 - computers that are owned privately by
14:36 - random people around the internet and
14:39 - the reason why this is important is
14:40 - because as soon as something is owned
14:41 - centrally so by one person or one
14:43 - organization or one entity they have the
14:46 - ability and the power to do something
14:48 - with it that is corrupt or that is
14:50 - malicious or that anyone else just
14:52 - doesn't have the ability to do or that
14:54 - they shouldn't maybe have the ability to
14:56 - for example if you own a bank account
14:58 - the likelihood this is going to happen
15:00 - is very slim but theoretically the
15:01 - government could just force the bank to
15:03 - hand over all of your funds maybe you
15:05 - need to pay your taxes or something
15:06 - whatever the idea is there's a central
15:08 - organization that controls this and so
15:10 - at any point in time this central
15:12 - authority could go in and actually
15:13 - modify what's on the ledger they could
15:16 - change the account balance they could
15:18 - take money from you but here when we're
15:20 - talking about a blockchain that is
15:21 - actually not possible because this is
15:23 - not owned by one person or one entity it
15:26 - is used and controlled by all of the
15:28 - computers around the world that
15:30 - contribute to the network and we'll talk
15:31 - about what those are in a second but to
15:33 - be able to do anything malicious on the
15:35 - blockchain you would have to control
15:36 - almost all of the computers around the
15:38 - world that are storing a copy of the
15:40 - blockchain and that are on the
15:42 - blockchain network
15:43 - okay hopefully this makes a tiny bit of
15:45 - sense but let's have a look at one
15:47 - individual block kind of see how that
15:49 - works in the context of transactions and
15:51 - then we'll talk about proof of work and
15:52 - a bunch of other very important aspects
15:54 - of the security of the blockchain so
15:56 - let's say we have a single block okay
15:59 - we can just call this something like
16:02 - block
16:03 - number two okay now the reason why i'm
16:05 - naming it number two and not number one
16:07 - is because the first block in a
16:08 - blockchain is a special block contains
16:11 - some configuration and initialization
16:13 - related stuff because well it's the very
16:14 - first block so that's kind of a special
16:16 - one we're going to ignore block one for
16:17 - now and just move straight to block two
16:20 - now block two is going to contain some
16:22 - transactions on it
16:23 - the transactions i'm going to represent
16:25 - by these squiggly lines now these
16:27 - transactions are exactly what i showed
16:28 - you before they have a to address a from
16:30 - address and a mount a signature and they
16:32 - have a few other things as well in fact
16:34 - every time you send a transaction
16:36 - you usually have to pay a very small fee
16:38 - and this fee will be given to the miners
16:40 - that are trying to secure and validate a
16:42 - block
16:44 - anyways this block has some transactions
16:46 - on it
16:46 - now this is where we get into the
16:48 - concept of miners so miners are
16:50 - computers that are sitting around the
16:52 - world that are supporting the ethereum
16:54 - network they're actually what allow it
16:56 - to run and they're what secure the
16:57 - blocks and make sure that you can't just
17:00 - hack the network okay so we'll dive into
17:02 - miners in a second i just want to take a
17:03 - quick step back here so whenever you're
17:05 - sending a transaction you need this
17:07 - transaction to be associated with a
17:09 - block and this block has to be mined
17:11 - which we'll discuss in a minute before
17:13 - your transaction actually goes through
17:15 - and is completely successful up until
17:17 - that point your transaction will be
17:19 - pending but once it's been added to a
17:21 - block and that block has been mined then
17:23 - it is successful now a new block is
17:25 - added to the ethereum network
17:27 - approximately every 15 seconds so very
17:29 - very quickly anyways now let's talk
17:31 - about mining
17:33 - so what are miners well as i discussed
17:35 - miners are just computers that are
17:36 - sitting around the world this is going
17:38 - to be my computer just a bunch of kind
17:39 - of deformed squares here right so
17:42 - there's a bunch of these guys sitting
17:43 - all around the world connected to the
17:46 - ethereum blockchain now every single
17:48 - time a new block is created and all the
17:50 - transactions are added it gets sent to
17:52 - every single miner so all these miners
17:54 - are kind of nodes on the network they're
17:56 - all sitting there waiting for
17:57 - transactions to get added to the current
17:59 - block when this happens what these
18:01 - miners do is try to mine the block now
18:03 - mining the block consists of performing
18:05 - some computations particularly some very
18:08 - difficult computations that are very
18:09 - time consuming and trying to guess a
18:12 - number that makes the hash of a block
18:14 - which we're going to get to in a minute
18:16 - have some specific properties now the
18:18 - point of doing this for these miners is
18:20 - that if they're able to guess a specific
18:22 - number they successfully mine the block
18:24 - and they will be given a reward so let's
18:26 - say minor one actually guesses what the
18:28 - number is i'll discuss what that number
18:30 - is in a second and they will be given
18:31 - some reward now this reward will be made
18:33 - up of two things the first thing it will
18:35 - be made up of is a block reward now a
18:38 - block reward is a reward that is hard
18:40 - coded into the ethereum network and
18:42 - actually decreases over time and this is
18:44 - new ethereum that will be created and
18:46 - given to the miner as a reward for
18:49 - mining this block i'm not sure what the
18:50 - current block reward is right now it's
18:52 - probably something like one ethereum but
18:54 - the point is that this is new ethereum
18:55 - that then gets added to the ecosystem
18:57 - and is circulating around so yes some
18:59 - cryptocurrencies and here specifically
19:01 - ethereum do have an inflationary aspect
19:03 - to them because new currency is being
19:05 - created but it's not something you
19:06 - really need to be worried about and
19:08 - while there's a whole field of
19:09 - cryptocurrency called tokenomics that
19:11 - kind of discusses this and why this is
19:12 - maybe actually a good thing i'm not
19:14 - really going to get into this in this
19:16 - video point being don't be too worried
19:17 - about the fact that new ethereum is
19:19 - being created so the second thing that
19:21 - you're going to have is going to be your
19:22 - fees now every time you send a
19:24 - transaction you're going to pay a very
19:26 - small fee this fee goes to the miners
19:28 - that are mining the block and so the
19:30 - successful miner the miner that actually
19:32 - guesses the number that mines the block
19:34 - is going to get the block reward and any
19:36 - fees associated with all the
19:38 - transactions on the block okay hopefully
19:40 - that makes sense i'm just trying to
19:41 - explain the incentive structure here for
19:42 - people to actually mine
19:44 - so continuing now we need to talk about
19:46 - what the miners are actually doing what
19:49 - the miners are doing are trying to guess
19:51 - a number that gets added at the end of
19:54 - the block so i'm going to say num equals
19:55 - question mark that makes the hash of
19:58 - this block equal to a certain number
20:01 - so what they're trying to do here is
20:03 - they are trying to find some number that
20:05 - they can add as kind of a dummy
20:07 - transaction at the very end of the block
20:10 - so that when i take a hash of this
20:13 - entire block so i run this to a
20:14 - cryptographic hash function the hash
20:16 - that i get starts with a certain number
20:18 - of zeros i believe right now what
20:20 - they're trying to find is a number that
20:21 - starts with 30 zeros but it could be
20:24 - actually higher or lower i'm not sure
20:25 - what the exact number is the point is
20:27 - that what these miners are going to be
20:28 - doing is trying to guess some number
20:31 - right this is a random number that you
20:32 - add at the end of the block and then
20:34 - when you hash the entire block so all of
20:36 - the transactions associated with the
20:38 - block and the number together it gives
20:41 - you some hash some digest right that has
20:44 - 30 numbers at the beginning or 30 zeros
20:46 - at the beginning sorry and then the rest
20:47 - of it doesn't really matter what that is
20:49 - but you're just trying to find something
20:50 - that has a certain number of leading
20:52 - zeros so the point of this is that the
20:54 - more zeros that you have in that number
20:56 - you're trying to guess the harder it is
20:57 - to guess that number because the
20:59 - probability just decreases that you're
21:01 - going to guess the correct number right
21:02 - here and again i'm just really trying to
21:04 - reiterate here that what's going to
21:06 - happen is you're going to take a hash of
21:08 - all of this everything inside of the
21:09 - block including this number and then you
21:11 - want it to give you some number that
21:13 - starts with 30 zeros but the thing is
21:16 - there's no way to figure out what this
21:17 - number is other than just guessing and
21:20 - checking because the cryptographic hash
21:21 - function has that property that there's
21:23 - no known inverse so since we can't
21:25 - compute the inverse we have no better
21:27 - way of finding out what this number is
21:28 - other than guessing and checking and so
21:30 - these miners are just guessing and
21:32 - checking as quickly as they possibly can
21:34 - and the one that gets the correct number
21:35 - then adds that to the block that mines
21:38 - the block and then we create a new block
21:39 - and continue moving forward now this is
21:41 - an oversimplification but that's the
21:43 - general idea of what these miners are
21:45 - doing
21:46 - okay so hopefully that kind of makes
21:47 - sense but that is what these miners are
21:49 - attempting to do and you might be
21:51 - wondering well there's so many miners so
21:53 - is it only actually one miner that's
21:54 - guessing this number and the answer is
21:56 - yes at every single block you're only
21:58 - having one minor that is going to guess
22:00 - what the correct number is and get the
22:02 - reward that's why you'll have pool
22:04 - mining which means you'll have like
22:06 - hundreds of thousands of computers that
22:08 - will split their processing power
22:09 - they'll say okay we're all going to try
22:11 - to guess a number together and if any of
22:13 - us get the number we're going to split
22:14 - the rewards between everyone because the
22:16 - probability that one of us can guess the
22:18 - number consistently is very very low in
22:20 - fact if you only had one computer mining
22:22 - and it was not mining very quickly your
22:24 - probability of ever getting a block
22:26 - reward would be almost zero because
22:27 - there's just so many other computers
22:29 - doing it and you would have to get
22:30 - extremely extremely lucky so that's why
22:32 - you would mine with a bunch of other
22:33 - people so that your probability of
22:35 - getting a reward is much higher and then
22:36 - you would split that based on how much
22:38 - work all of you have done okay so let's
22:41 - continue here now what i want to do is
22:43 - draw a few blocks and we'll see how
22:45 - these are connected and kind of the
22:47 - security aspect of this so let's just
22:49 - paste this block over here and for now
22:51 - we can just go with two blocks okay so
22:54 - we have block two and then this guy is
22:56 - going to have to be
22:58 - block three let's fix your corner right
23:01 - there
23:02 - okay so we have block two and we have
23:04 - block three now this will be coming from
23:05 - block one we don't need to worry about
23:07 - that right now now the thing is these
23:08 - blocks are connected together right so
23:11 - we have block three we have block two
23:12 - block three is connected to block two
23:14 - and obviously it comes after block two
23:16 - now how do we know that well obviously
23:18 - these arrows aren't actually there we
23:20 - don't really have arrows connecting
23:22 - these things but what we do have is a
23:24 - field in every single block that
23:26 - represents the hash of the last block so
23:28 - we have something like last is equal to
23:30 - and then whatever the hash of this block
23:32 - is including the number that we guessed
23:35 - that is what we put right here to
23:36 - represent this is the last block in the
23:38 - chain so let's say when we hash all of
23:41 - this we get a number that is 0 0 0 0 4 9
23:45 - a b
23:46 - now this will usually be a hexadecimal
23:48 - number that is 64 characters long but
23:50 - for simplicity we'll just go with this
23:52 - for now so to get this hash we would
23:54 - also have guessed this number let's just
23:56 - say it's seven and what we were trying
23:58 - to do was to get a hash that started
23:59 - with four zeros which we've done so next
24:02 - what we'll do is we'll write this hash
24:03 - here so zero zero zero zero four nine a
24:06 - b
24:08 - so now in block three we know the
24:10 - previous block was block two and block
24:12 - two would also have this field it would
24:13 - say last is equal to the hash of
24:15 - whatever block one is so now block three
24:17 - we get a bunch of transactions on here
24:19 - we add them all on and we say okay we
24:21 - want to mine block three so what we need
24:23 - to do now when we mine block three is we
24:24 - have to find some number such that when
24:26 - we hash all of this including this last
24:29 - field right that's gonna be included in
24:30 - the block where we're hashing we get a
24:32 - number
24:33 - that starts with four zeros so what this
24:35 - really means here is that if the hash of
24:37 - block two ever changes for some reason
24:40 - then this is no longer going to be
24:42 - correct because this is going to be
24:43 - referencing block two which now no
24:45 - longer exists and so this will be
24:47 - disconnected from the blockchain you can
24:49 - kind of imagine that this arrow would
24:51 - get erased now i'll continue explaining
24:52 - this but again what we're doing is we're
24:54 - trying to mine block three so we'll
24:56 - guess some number let's say we guess
24:57 - some number nine and then we end up
24:59 - getting some hash here i guess i can
25:00 - just do it in maybe a purple color 0 0 0
25:03 - and then maybe this is 7
25:05 - 9 ba okay
25:07 - this is the hash that we end up getting
25:09 - so now where the real security feature
25:11 - of the block chain comes in
25:12 - is that let's say i am a malicious
25:14 - entity here and i want to change one of
25:16 - the transactions on the blockchain
25:18 - so let's say i take my copy of the
25:20 - blockchain and i go to block 2 and i
25:23 - change the transaction instead i add
25:25 - this fraudulent transaction right here
25:27 - well as soon as i change this
25:29 - transaction
25:30 - this hash here
25:32 - changes right and the reason this is
25:33 - going to change is because when i take
25:35 - the hash of this block
25:37 - now since this transaction has changed i
25:39 - get something completely different and
25:40 - so what i'm probably going to end up
25:42 - getting here is something that doesn't
25:43 - start with four zeros so say maybe i get
25:46 - one zero two a b b c one that's my hash
25:50 - so now since this hash doesn't start
25:51 - with four zeros i need to recompute this
25:54 - number and remind this entire block
25:56 - because now the number seven is no
25:59 - longer correct to give me a hash that
26:01 - starts with four zeros so let's say i'm
26:03 - successful in doing that and i guess uh
26:05 - you know the number let's go 275 or
26:08 - something and now i get a hash like 0 0
26:10 - 0 0 1 2 3 4. okay that's my new hash
26:14 - well now the problem is this hash
26:17 - does not match this hash right here and
26:19 - so this block is disconnected from this
26:21 - block and so if i want to actually keep
26:24 - this fraudulent transaction in block 2
26:26 - what i need to do now is modify block 3
26:28 - because i have to change this last to
26:30 - match what my new last on block 2 is so
26:34 - what i do now is i come here and i would
26:37 - need to change this now to whatever this
26:39 - is so 0 0 0 0 1 2 3 4. but now that i've
26:43 - changed this the hash here is going to
26:45 - be completely different
26:47 - right because we're going to get a
26:48 - different value when we have something
26:49 - different inside of the block so now i
26:51 - get a hash maybe that doesn't start with
26:52 - zeros right 1 0 0 2 3
26:55 - a b c whatever some random hash so now i
26:58 - need to recompute this block recompute
27:00 - this random number and remind it so that
27:02 - i now find a hash that starts with four
27:04 - zeros and you get the point i have to do
27:06 - that for every single block in the
27:08 - blockchain right because these blocks
27:10 - are connected together and as soon as
27:12 - these blocks are no longer connected i
27:14 - don't have a valid blockchain and if i
27:15 - try to send this on the ethereum network
27:18 - all of the other computers on the
27:19 - network are going to be like uh no that
27:21 - is not correct your blocks are not
27:23 - connected your hashes are all messed up
27:25 - and i have a different version than you
27:26 - have so no i'm not going to accept that
27:28 - as a transaction i'm not going to accept
27:29 - that as a block because that is
27:31 - fraudulent
27:32 - so hopefully this makes a bit of sense
27:34 - but this is a concept known of hashes of
27:36 - hashes or hashing of hashes and so what
27:38 - we're doing is we're taking a hash of
27:40 - this block putting it inside of here and
27:42 - then taking a hash of this block that
27:44 - contains the hash of the previous block
27:46 - and so any change to the previous block
27:48 - means that this will no longer be valid
27:51 - and so we have to change pretty well
27:52 - every single block in the blockchain to
27:54 - be able to modify everything and that is
27:56 - why this is so secure and that is what
27:58 - leads me to the concept of proof of work
28:02 - so what we're doing when we're mining is
28:03 - we are proving that we have spent a
28:05 - certain amount of time before adding
28:08 - this block to the blockchain and the
28:09 - reason that's important is because the
28:11 - more time we spend the harder it is to
28:14 - modify the blockchain if you had an
28:16 - absolute supercomputer and you could
28:18 - just remind these blocks instantly then
28:20 - you would be able to go and change the
28:22 - blockchain that would be fine you could
28:23 - do that because you could just
28:24 - regenerate every single block with all
28:26 - of your fraudulent transactions added
28:29 - however since that's pretty well
28:31 - impossible and we have so many computers
28:33 - working on the blockchain at the exact
28:35 - same time for you to be able to do that
28:37 - you would need more computing power than
28:40 - all of the other computers on the
28:41 - blockchain combined and you would need
28:43 - to be able to not only rewrite the
28:45 - entire blockchain previously to what
28:48 - it's currently at you would also need to
28:49 - be able to catch up to all of the other
28:51 - computers that are working on the new
28:53 - blocks being added to the chain and kind
28:55 - of beat them and you'd be like racing
28:56 - against them in a sense i'm sure this is
28:58 - very abstract but this is what makes the
29:00 - blockchain so secure that these blocks
29:02 - are actually linked together you need to
29:04 - perform this mining process which is
29:06 - proving you've done a certain amount of
29:08 - work this work takes some amount of time
29:11 - this amount of time you can calculate
29:13 - using probability the probability you're
29:15 - going to guess a random number and how
29:16 - quickly you can guess random numbers and
29:18 - all of that and as the blockchain
29:20 - continues to grow being able to
29:22 - potentially modify it becomes harder and
29:23 - harder and harder so anything that is
29:25 - added to the blockchain is pretty well
29:27 - permanent and you cannot remove it
29:29 - without having to rewrite the entire
29:31 - blockchain so this is all great but one
29:33 - other thing i will mention here is that
29:35 - another security feature that's built in
29:37 - is that every single computer that is
29:39 - mining the blockchain or mining the
29:41 - current block has a copy of the existing
29:43 - blockchain and so what that means is if
29:45 - you try to change something on say the
29:47 - current block every single other
29:49 - computer knows what the current block
29:51 - looks like and so if you're submitting a
29:53 - block that looks different from that
29:54 - it's going to be able to tell that very
29:56 - very quickly it can just take the hash
29:57 - of the block if it doesn't match the
29:59 - hash that it has it's going to be like
30:00 - no this is the incorrect block i'm not
30:03 - going to accept this block or accept
30:04 - this transaction because well it doesn't
30:06 - match what i currently have
30:08 - so hopefully this is all starting to
30:10 - come full circle just a little bit you
30:12 - don't have to understand this stuff
30:13 - super super well but you just have to
30:15 - have a general idea of why the
30:17 - blockchain is so secure this concept of
30:19 - decentralization and kind of how
30:21 - transactions get added to the blockchain
30:23 - and what mining actually means right and
30:26 - that's the reason why there's been a
30:27 - huge gpu crisis in the past and recently
30:30 - as well a bunch of people are mining
30:31 - cryptocurrency for the incentive of
30:33 - trying to earn these different rewards
30:36 - all right so that is all great and
30:38 - really what i just spent the last 10 or
30:40 - 15 minutes explaining is proof of work
30:42 - so pretty much everything starting from
30:44 - when i started talking about blocks was
30:46 - trying to explain to you how proof of
30:47 - work works and while that uses raw
30:50 - computing power typically gpus to
30:53 - perform hashing which then secures the
30:55 - blockchain in the ways that i mentioned
30:57 - however and i understand some of you may
30:59 - be a little frustrated here ethereum is
31:01 - actually switching over now to proof of
31:03 - stake i'm not sure exactly when that's
31:05 - going to happen but it's supposed to
31:06 - have happened for a long time and i know
31:08 - it's going to happen very very soon and
31:10 - the difference is that with proof of
31:12 - stake which is going to be kind of the
31:13 - new method and algorithm this is a type
31:16 - of consensus mechanism which is going to
31:18 - be used to validate the transactions
31:20 - versus using raw computing power now
31:22 - proof of stake pretty much means that if
31:24 - you own cryptocurrency you can stake
31:27 - your coins by staking them you're kind
31:29 - of putting them in a locked container
31:31 - that's the way you can think of it and
31:32 - what this does is give you the right as
31:34 - the staker of these coins to check new
31:37 - blocks of transactions and to add those
31:39 - to the blockchain now i'm not going to
31:41 - explain proof of stake in this video
31:43 - maybe we'll explain that in another
31:44 - video point being ethereum is slowly
31:47 - switching over or actually probably
31:49 - pretty quickly switching over to proof
31:51 - of stake and that's going to be the new
31:52 - method now i will just say that even
31:54 - though ethereum is switching over to
31:56 - proof of stake that does not mean that
31:57 - what i just explained to you was a waste
31:59 - of your time it is still very very
32:01 - valuable to understand how proof of work
32:03 - works and that is currently what is
32:05 - being used and is being used for a lot
32:07 - of other cryptocurrencies as well proof
32:09 - of stake is just another method of doing
32:11 - this and while i'm not going to explain
32:12 - that further in this video but maybe
32:14 - we'll talk about that in the future
32:16 - regardless with that said that pretty
32:18 - much wraps up everything that i needed
32:20 - to cover if you guys made it to the end
32:21 - of the video give yourself a pat on the
32:23 - back i hope that this maybe cleared up
32:26 - how the blockchain works and gave you at
32:27 - least a little bit of the insight into
32:29 - the theory behind it if i were to go
32:31 - through and explain all of the
32:32 - mathematics of this not only would i
32:34 - probably make a ton of mistakes but this
32:36 - video would probably be four or five
32:37 - hours long so really if you can grasp
32:39 - the core concepts here you have a good
32:42 - enough understanding to kind of proceed
32:44 - and to move forward and start writing
32:45 - smart contracts and to be quite honest
32:47 - with you you don't necessarily need to
32:49 - have all of this mastered to actually
32:50 - write a smart contract it's just very
32:52 - helpful and something that i think is
32:54 - fundamental before moving forward
32:56 - anyways with that said i will finally
32:58 - end the video here thank you guys again
33:00 - for watching if you enjoyed leave a like
33:01 - subscribe to the channel and i will see
33:03 - you in another one
33:06 - [Music]
33:12 - you