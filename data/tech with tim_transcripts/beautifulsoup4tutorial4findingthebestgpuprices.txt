00:00 - hello everybody and welcome to the
00:01 - fourth and final video in this python
00:04 - web scraping tutorial series in this
00:06 - video i'm going to be showing you how we
00:08 - can find the cheapest in stock products
00:11 - on newegg now i was going to have a
00:14 - bunch of other websites combined into
00:15 - this search however that's just going to
00:17 - take way too long to do so what i show
00:19 - you here you can modify slightly and
00:21 - apply it to other websites and you can
00:23 - combine say four or five websites
00:25 - together when you're searching for a
00:26 - specific product now the product i'm
00:29 - going to be targeting here is a graphics
00:30 - card now you can really do this with any
00:32 - product in fact the script i'm going to
00:34 - write here should work with pretty much
00:36 - any product you can search up on newegg
00:38 - and again we're just going to be looking
00:40 - for the cheapest uh in stock graphics
00:43 - card and we can pick whatever graphics
00:45 - card model that is in fact i'll make it
00:47 - dynamic so it'll ask you what graphics
00:49 - cards you want to look for and then you
00:51 - can search for those graphics cards now
00:53 - what we're going to do is just spit out
00:54 - a huge list that will have the price of
00:56 - the graphics card the name of the
00:58 - graphics card obviously there's a ton of
01:00 - different models and then the link for
01:02 - that gpu in case you wanted to go and
01:04 - actually purchase that so that said
01:06 - let's go ahead and get started
01:10 - [Music]
01:16 - all right so in front of me i have my
01:17 - python script i have these imports so
01:20 - beautiful suit for requests and re for
01:23 - regular expression we're going to need
01:24 - all of these the first thing i'm going
01:26 - to do though is ask the user what
01:28 - graphics card it is they want to search
01:30 - for so i'm going to say
01:32 - gpu equals input
01:35 - like that and i'll say
01:36 - what gpu do you
01:39 - want
01:40 - to search for and really we could change
01:42 - this to what
01:44 - product
01:45 - do you want to search for okay so and
01:49 - then we'll do a space there nice so the
01:50 - user is going to input what product it
01:52 - is they want to search for then what i'm
01:55 - going to do is send a request to newegg
01:57 - so i'm going to say url is equal to i'm
02:00 - just going to copy in the url here but i
02:02 - will go to this url so you can see what
02:04 - it looks like so this is actually the
02:06 - url
02:07 - that we want and let me just describe
02:09 - what some of this is
02:11 - so first of all let's actually just go
02:12 - to newegg so notice i'm on newegg i
02:14 - searched 3080 and then i went here and i
02:17 - checked the in stock for availability
02:20 - option now what that did is change the
02:22 - url up here to say d equals 380 so
02:25 - that's our search term
02:26 - and then n equals 4 1 3 1 which is the
02:29 - filter so that's saying only give me
02:31 - ones that are in stock so you can see it
02:33 - shows in stock right here if i remove
02:36 - the and n
02:37 - like that notice it no longer is only
02:39 - giving me the ones that are in stock
02:41 - so that is kind of how that works so
02:43 - what we can do is if we want to change
02:45 - what we're searching for
02:46 - we can just change this d parameter so
02:48 - change that to 3070 notice this now
02:50 - changes to 30 70 and now we're looking
02:52 - for 30 70s so that's kind of how this
02:54 - works and this is what the url is i'm on
02:56 - dot ca obviously if you're in a
02:58 - different country change the i guess
03:00 - extension whatever you call that dot com
03:01 - whatever okay so anyways that's what
03:04 - we're going to look for so this is what
03:06 - we want to send the request to so we're
03:08 - going to say
03:09 - page is equal to
03:11 - requests
03:13 - if we spell this correctly dot get i
03:16 - want to get the url and then dot text
03:20 - and then i want to read this in with
03:21 - beautiful soups so say doc is equal to
03:23 - beautiful soup
03:25 - page and then this is going to be the
03:28 - html dot
03:29 - parser or is it parser.html i forget no
03:32 - html.parser is correct so let me just
03:34 - put these together
03:36 - okay and now that we have this the first
03:38 - thing that i actually want to do here is
03:41 - i want to figure out how many pages of
03:43 - results we have so if you go here notice
03:46 - how we have five pages right page one of
03:48 - five so i actually wanna figure out how
03:50 - many pages we have because i don't wanna
03:52 - just look on the first page i wanna look
03:53 - on all of the pages and note if i go to
03:55 - like page four here see how the url
03:57 - changes and says at page equals four so
04:00 - we can easily send another request to
04:02 - get the next page if we have the and
04:05 - page and we know how many pages we need
04:06 - to look through
04:07 - so what i want to do is find this text
04:10 - right here on this page excuse the voice
04:12 - crack find what this number is and then
04:15 - use that to determine how many pages we
04:17 - have and loop through all of the pages
04:19 - and repeat you know finding all of the
04:21 - products so it's a little bit
04:22 - complicated to do this but i just
04:24 - clicked right on what i want so on the
04:27 - text here and pressed inspect and then
04:29 - notice it actually highlights it in this
04:31 - window for me so we're inside of this
04:33 - strong tag and it's inside of a span
04:36 - that has the class list tool page
04:39 - pagination text so what we can do is
04:41 - search in the document for a uh a tag
04:44 - that has this class and then we can look
04:46 - in the strong tag and then we can try to
04:47 - find this number five again not super
04:49 - easy but i will show you how we do that
04:51 - so
04:52 - uh let's go here just make this full
04:55 - screen and i'm going to say
04:58 - page underscore text is equal to doc dot
05:02 - find and then it's going to be class
05:03 - underscore equals
05:05 - and then put this inside of quotes
05:07 - okay so let's just print this out and
05:09 - see what we get
05:11 - page underscore text
05:13 - okay uh so what product you want to
05:14 - search for let's go with 3080 actually i
05:17 - realize i can't use this
05:20 - to do that because
05:23 - sublime text doesn't work for console
05:24 - input for python so sorry just excuse me
05:26 - as i run this script
05:28 - python web scraping 4 i think dot pi
05:32 - okay so i'm just going to run it from
05:33 - terminal you can excuse what's happening
05:35 - but anyways let's go to 3080 and let's
05:39 - see what we get okay so we get this span
05:42 - and then we want what's actually inside
05:44 - of the strong tag right it says one over
05:47 - four so since we're going one over four
05:50 - then what i want to do is grab the four
05:54 - so let's first get the strong tag so
05:55 - let's do dot strong
05:57 - and now let's see what we get
06:00 - and okay let's just go 3080
06:03 - and now notice we actually get this this
06:05 - sorry now what i want to do is i want to
06:08 - grab this 4. however if i try to access
06:10 - the string that's inside of here i'm
06:12 - going to get an error because these
06:14 - comments are kind of messing everything
06:16 - up
06:17 - so what i'm actually going to do
06:19 - seems a little bit counter-intuitive but
06:21 - what i'm going to do is turn this whole
06:22 - thing into a string i'm going to split
06:25 - the string
06:26 - and find what's on the right-hand side
06:28 - of the slash
06:29 - i'm then going to split the string again
06:33 - such that i can grab this 4. so it's
06:35 - going to seem a little bit weird but
06:36 - just
06:37 - follow along with me here so i'm going
06:38 - to say pages
06:40 - equals page text
06:42 - i'm going to convert this to a string
06:45 - and then i'm going to say dot split i'm
06:47 - going to split this at the slash and i'm
06:49 - going to get the last element
06:51 - now actually sorry i'm going to get the
06:53 - second last element and you'll see why
06:55 - in a second so if we look at this here
06:57 - notice that we have a slash and then we
06:59 - have this slash so what happens when i
07:01 - split this string is it's going to give
07:03 - me a list that has this as the first
07:05 - element
07:06 - has this as the second element and this
07:08 - as the third element so i want the
07:10 - second element uh the second last
07:12 - element really second element or second
07:14 - last element and so i'm going to grab
07:15 - that which will give me this
07:17 - so now
07:18 - if i print
07:21 - pages and i go here and run this
07:25 - let's go to 3080
07:27 - notice that i'm getting this so now what
07:29 - i'm going to do is since i don't know if
07:32 - the pages is going to be
07:34 - a number that is more than one digit so
07:36 - like 25 or 100 pages or something like
07:38 - that i can't just grab this index i need
07:41 - to split the string again at
07:44 - this so i'm going to split it at the i
07:46 - guess this is the less than sign or the
07:48 - greater than sign i'm going to split it
07:50 - at that regardless then i'm going to
07:52 - remove the very last character and then
07:54 - i'm going to grab whatever number is
07:56 - here and that should work if we have
07:57 - multiple pages so
07:59 - let's do this again so i'm going to now
08:01 - split
08:02 - this i'm going to split this at this
08:04 - symbol and i'm going to actually just
08:06 - look at what that is to start so let's
08:08 - go here
08:10 - and let's go 30 80.
08:13 - and now notice that's what this looks
08:14 - like so i want to grab the last element
08:16 - and then remove that so let's grab that
08:19 - so let's go
08:20 - negative one
08:21 - and then we're going to go colon
08:22 - negative one and what that will do is
08:24 - remove the last element for us so now
08:27 - let's print this out
08:29 - excuse me
08:30 - 3080 and we get 4. now the only last
08:33 - thing we need to do here is convert this
08:34 - to an int so we're going to say int of
08:36 - this
08:38 - and now if we go here same thing it
08:40 - should just work let's actually go 30 70
08:42 - and see if we get a different number of
08:44 - pages and here we get five pages
08:46 - perfect so now that we have the pages we
08:49 - want to loop through all of the pages
08:51 - and grab all of the elements on those
08:54 - pages so i'm going to say for
08:56 - page and range pages
08:59 - and then i'm going to copy this right
09:01 - here
09:02 - the reason i'm going to copy this
09:04 - is because now i want to send another
09:05 - request
09:06 - but i want to change this by adding a
09:09 - page
09:11 - is equal
09:12 - to page right so i'm going to look for
09:14 - the specific page
09:16 - now i think this is fine yeah that looks
09:19 - fine to me
09:21 - i was gonna do something else i think
09:23 - that's actually okay for right now okay
09:25 - yeah so what this will do is give us the
09:26 - gpu search result at a specific page ah
09:29 - what i need to do is change the range so
09:31 - page is plus one so the reason i'm
09:33 - making this change here is because we
09:34 - don't to start at zero whenever we're in
09:36 - a for loop and we just use range with an
09:38 - end value we start at zero i want to
09:40 - start at page one and then i want to go
09:42 - up to
09:43 - page whatever the number is so i need to
09:45 - add one to this otherwise we won't hit
09:47 - the last page which is how for loop and
09:49 - the range function works okay so now we
09:52 - are sending a request and grabbing every
09:53 - single page and now on every single page
09:56 - i need to grab every single item that
09:58 - says 3080 in it so the thing is
10:01 - not all of the items that are on here
10:04 - are actually going to say
10:07 - 3080. i'm pretty sure so what i want to
10:09 - do is just do my own filter and make
10:11 - sure that i'm only grabbing items that
10:13 - actually say 3080 in them or whatever
10:16 - the
10:16 - gpu is that i'm looking for so we're
10:19 - going to do that
10:20 - we're going to say doc
10:22 - dot find underscore all this is going to
10:24 - be
10:26 - we'll call this results
10:29 - actually no we'll call this items is
10:31 - equal to docs.findall and i'm going to
10:33 - say text is equal to
10:35 - re.compile
10:37 - and i'm just going to look for the text
10:39 - of whatever the
10:41 - gpu is that i'm looking for now i really
10:44 - should call this something else probably
10:45 - so let's rename this
10:47 - from gpu to
10:49 - search term
10:51 - just so that it's more dynamic
10:53 - okay and the reason i'm doing re.compile
10:55 - here is because when i do this it will
10:58 - actually match any text that contains
11:01 - this if i just put search term i didn't
11:04 - put inside of the regular expression it
11:05 - would not match the text that
11:08 - there was anything different than
11:10 - the search term i miss explain that
11:13 - really what i'm saying is like let's say
11:14 - we have the text
11:16 - 3080 and we're looking for 30 80. this
11:18 - will match with 3080 but if i had like
11:21 - 30 80
11:22 - for the win and i just was looking for
11:24 - 3080 it wouldn't match because this has
11:26 - extra characters in it whereas using
11:28 - this both of these will be a match
11:30 - hopefully that makes sense but that's
11:32 - why i'm using re.compile and now i want
11:35 - to loop through all of the items so i'm
11:36 - going to say for item
11:38 - in items
11:39 - print
11:40 - item and let's just look at what items
11:42 - we're actually getting here so let's run
11:45 - this
11:46 - let's look for a 3080
11:48 - and let's see
11:50 - okay so obviously we're getting a ton of
11:51 - stuff it's going to keep printing stuff
11:53 - out so let's go here whoa okay we have
11:57 - many many things here um okay
12:02 - yeah so we're getting
12:04 - quite a few things printing out okay
12:05 - that's fine anyways we're going to
12:07 - continue now we're going to look for the
12:08 - name of the item the price of the item
12:10 - and the link for the items so we will
12:12 - continue in one second we need to
12:14 - quickly thank the sponsor of this video
12:16 - and this series which is algo expert
12:18 - algo expert is the best platform to use
12:20 - when preparing for your software
12:21 - engineering coding interviews they have
12:23 - over 160 coding interview practice
12:25 - questions that cover everything you need
12:27 - to know to ace your software engineering
12:29 - interviews check them out from the link
12:30 - in the description and use the code tech
12:32 - with tim for a discount on the platform
12:34 - all right so i was just examining the
12:36 - output that we got there and i was
12:38 - realizing that we weren't quite getting
12:40 - exactly what i was looking for now let
12:42 - me just inspect on one of these right
12:44 - here and show you that what i actually
12:46 - want to look for
12:48 - is only items that are inside of this
12:51 - div right here so i'm going to copy this
12:53 - class name but if you look at this div
12:56 - this div is where all of the content is
12:58 - from my search results now
13:00 - if i just look for say
13:02 - 3080 or 3070 it's going to give me like
13:05 - the text up here as well i don't want
13:07 - that i only want actual items so what
13:09 - i'm going to do is copy this class name
13:12 - because this is the div that has the
13:13 - table inside of it and then i'm going to
13:15 - look only inside of this div for any
13:18 - text that matches what product we're
13:20 - looking for so how am i going to do that
13:22 - i'm going to say
13:24 - div
13:25 - is equal to doc dot find and then we're
13:29 - going to say class underscore equals
13:31 - that
13:32 - and then this needs to be inside of
13:34 - quotation marks again all this code will
13:37 - be available in the description in case
13:38 - i'm losing you here and then rather than
13:40 - saying doc we're going to change this to
13:42 - div so now we're only looking inside of
13:44 - the diff
13:45 - okay so now when i print item we should
13:47 - get some better results here so let me
13:50 - clear this
13:51 - let's run this
13:52 - and let's go 3080
13:55 - and now let's see what we get that's
13:56 - much better so now notice we're only
13:58 - getting the text we're not getting a
14:00 - bunch of other random crap that we don't
14:01 - need just text is what we're getting
14:03 - here so that's exactly what i want and
14:05 - now that i have this text
14:07 - what i need to do is look at the parent
14:09 - of this text because that text is great
14:12 - but that is this right so oops let me
14:15 - get out of this okay so let me
14:16 - right-click on this so this is the text
14:18 - that we're getting we're getting what's
14:20 - inside of this link right so the first
14:22 - thing i can do is i can grab the href
14:24 - from this link so the parent of all this
14:26 - text is going to be a link so what i
14:28 - will do is grab the href so the actual
14:31 - link from
14:32 - the link from the text uh so let's do
14:35 - that now
14:36 - let's go
14:38 - parent
14:39 - is equal to item
14:41 - dot parent and then what i want to grab
14:44 - is the href now the thing is
14:47 - i'm still going to get some results here
14:49 - that for some reason
14:50 - will not actually have a parent tag
14:52 - which is the a tag
14:54 - just weird things can occur and well if
14:56 - i try to access the href property of a
14:58 - tag that doesn't have that i'm going to
15:00 - get an error so i just need to make sure
15:02 - that the parent
15:03 - is actually an a tag before i try to do
15:05 - that so i'm going to say if
15:07 - parent
15:08 - dot name
15:09 - equals
15:10 - equals a
15:12 - then what i can do is say
15:15 - link equals
15:16 - and this will be
15:17 - parent
15:19 - href like that and then i can print
15:23 - the link and i'm just going to say
15:27 - link equals none for now just so that
15:29 - this print statement doesn't crash so
15:31 - now let me try this i'm going to look in
15:32 - the parent which will be the a tag i'm
15:34 - going to try to grab the link so the
15:36 - href from that okay so let's do this uh
15:40 - actually let me just clear this first
15:42 - because it's probably better
15:44 - and now let's run it 3080 and see what
15:48 - we get okay so now notice we're getting
15:50 - a bunch of links and we're also getting
15:51 - a bunch of nuns so it seems like we get
15:54 - link none link none link none and i
15:57 - think when we're getting none that's
15:58 - because we're finding 3080 as maybe the
16:00 - attribute of some tag or something along
16:02 - those lines so what i'm going to do is
16:04 - say okay if the parent tag is not an a
16:06 - tag then we're just not going to bother
16:08 - adding it in we'll just skip it so let's
16:11 - do that now we'll say if parent dot name
16:14 - does not equal a
16:16 - then we will
16:17 - continue otherwise we'll say the link is
16:20 - equal to parent href and we can remove
16:22 - this link equals num great so now we're
16:24 - getting the link and we already have the
16:26 - name that stored in item the last thing
16:28 - we need is the price so how are we going
16:30 - to get the price let's go back here
16:32 - so the price
16:34 - is kind of hard to find but if you
16:36 - notice here inside of item container we
16:40 - have
16:40 - this which is the image we have item
16:43 - info inside of item info we have where
16:45 - our actual name is so from the name our
16:48 - parent is item info and the parent of
16:50 - that is item container and that's what
16:52 - we want so now we want to look up two
16:54 - parents we want to go the parent of the
16:57 - parent so we get item container and then
16:59 - from item container if we go inside of
17:02 - here
17:03 - let's look at this we want to look at
17:05 - item action
17:07 - price and then whatever the current
17:09 - price is so price hyphen current so
17:12 - let's do that now we're going to say
17:15 - um
17:17 - next parent
17:18 - is equal to parent
17:20 - dot parent and then we're going to try
17:23 - to find the price so now we're going to
17:24 - say price is equal to next underscore
17:27 - parent dot find and this is going to be
17:29 - price
17:31 - hyphen current and this is the class
17:33 - name so we're going to say class
17:34 - underscore equals that and then we'll
17:36 - print out the price and see what we're
17:38 - getting
17:39 - okay so let's try this clear
17:42 - and
17:43 - 3080
17:45 - and we get a bunch of nuns okay so
17:48 - that's interesting why we're getting a
17:49 - ton of nuns uh let me have a look here
17:51 - and see if i have messed this up somehow
17:53 - all right so i think i'm having some
17:54 - issue with the parents here uh for some
17:57 - reason parent.parent is not giving me
17:59 - the div that i'm looking for so what i'm
18:01 - going to do is show you
18:03 - kind of an interesting thing that we can
18:04 - actually do here to locate a specific
18:06 - parent so if we go here the parent that
18:09 - we actually want is
18:12 - item container right we want the one
18:14 - that has item container as the class
18:17 - so what i'm going to do is rather than
18:18 - trying to you know find how many parents
18:20 - there are i'm going to use an
18:22 - interesting method that we have here
18:24 - which is item dot
18:26 - find underscore parent so what this will
18:28 - do is actually look for any parent so
18:31 - any ancestor in the tree that has a
18:33 - specific class name in our instance so i
18:36 - want this to be item container
18:38 - so now let's see if this is actually
18:40 - going to work so again this will look up
18:42 - in the tree and find the first parent
18:43 - that has this class name
18:46 - let me make sure that's correct yes that
18:47 - looks correct okay so let's clear this
18:50 - run this
18:52 - and go 3080 and now notice we're
18:54 - actually getting all of the prices right
18:56 - so they're showing up kind of inside of
18:58 - this span and inside of uh
19:01 - what do you call it the strong tag
19:03 - so what i'm going to do now is look for
19:04 - the strong tag of this price current
19:09 - class or price current div or whatever
19:10 - it is
19:11 - so now let's do dot strong
19:14 - and let's see if we get anything better
19:17 - okay
19:18 - 3080 and then notice we get all of this
19:21 - so now that i have the strong tag i can
19:24 - just look at the string of this
19:26 - so let's just go string like that
19:28 - and let's run this
19:31 - 3080 and now notice i'm going to get all
19:34 - of the prices so that's exactly what i'm
19:36 - looking for i have now found all of the
19:38 - prices of all of the gpus so now what i
19:41 - want to do is take all of this and put
19:44 - this inside of some type of data
19:46 - structure so that i can use it and print
19:47 - it out later on in the program so up
19:49 - here i'm going to say
19:52 - items
19:53 - underscore found is equal to
19:56 - this is going to be a dictionary now
19:58 - what i'm going to do
19:59 - is i'm going to say
20:01 - items underscore found and this is going
20:03 - to be at the name of the item so i'm
20:06 - going to say item which is the actual
20:07 - text that contains 3080
20:10 - is equal to and then it's going to be
20:12 - another dictionary
20:13 - that has the price so we can put the
20:16 - price
20:17 - and has the link which will be equal to
20:20 - the link
20:21 - so there we go
20:22 - now
20:23 - down here
20:25 - i can print out
20:27 - items found
20:28 - so let's go ahead and run this i'll
20:31 - pause for a second so you guys can see
20:32 - what i just wrote but i just created the
20:34 - dictionary and added as a key another
20:38 - dictionary and then the sorry not as a
20:40 - key as a value another dictionary and as
20:42 - the key i'm using the actual text that
20:44 - contains 3080. okay so let's go here and
20:47 - i keep saying 3080. it's whatever text
20:48 - you type in here like if i do 3070 we'll
20:50 - get different results obviously but 3080
20:53 - is just the one that i've been using so
20:55 - this is going to take a second because
20:56 - it needs to go through all of the pages
20:57 - before we get any output but now we're
20:59 - going to get the output and it is kind
21:00 - of a mess here we'll clean this up in a
21:02 - second but notice we have price we have
21:04 - the link and so on and so forth now the
21:07 - last thing i need to do is convert
21:09 - this price to an integer because right
21:12 - now as a string it's not that good to us
21:15 - and for me to be able to convert this to
21:16 - an integer i need to remove the comma
21:18 - from the price so i'm just going to say
21:20 - dot replace
21:22 - and then i will remove the comma and
21:24 - replace it with an empty string okay so
21:26 - now we should have prices that do not
21:28 - have the comma in them and now what i
21:30 - want to do is sort all of these items by
21:33 - their price and then have some nicer
21:35 - output for them
21:36 - so this is a little bit of more advanced
21:38 - python code to sort a dictionary to sort
21:41 - a dictionary you need to first convert
21:43 - it to a
21:44 - list of some sort sort the list and then
21:46 - convert it back to a dictionary now in
21:48 - this case i'm actually happy with my
21:50 - items being in a list
21:51 - and so what i'm going to do is the
21:54 - following and in fact it kind of defeats
21:56 - the purpose of making a dictionary but
21:57 - regardless i'll show you how this works
21:59 - i'm going to say sorted
22:01 - underscore
22:03 - items is equal to and then we're going
22:05 - to say
22:06 - actually sorted
22:08 - we're going to put
22:10 - our items found dot items so if you're
22:13 - unsure what items does it's going to
22:15 - give us a tuple that has the key and
22:17 - then the value
22:19 - and then i'm going to sort it with the
22:20 - following function
22:21 - lambda x
22:23 - x 1 at
22:25 - price this might seem a little bit
22:27 - confusing
22:28 - but what this is going to do is create
22:30 - all of the tuples that contain the key
22:33 - and the value the value is a dictionary
22:35 - that has price and link inside of it and
22:37 - then i'm passing the function that i
22:39 - want to use to sort this as lambda so
22:42 - this is an anonymous function we take
22:44 - one parameter x which will be all of
22:46 - these items
22:47 - we then say x1 so this will give us the
22:50 - second item which will be the
22:52 - dictionary right here and then we access
22:55 - the price
22:57 - again a little bit confusing but
22:58 - hopefully that makes sense we're just
22:59 - sorting by the price of all the items in
23:01 - the dictionary and now what i can do is
23:03 - loop through sorted items and print them
23:04 - out so i'm going to say for item
23:07 - in sorted items
23:09 - and here we will print the price of the
23:12 - item the name of the item and the link
23:14 - of the item on different lines
23:17 - so i'm going to say print
23:18 - item and item 0 will be the name because
23:21 - that's the key it's in the first tuple
23:24 - it's the key
23:25 - sorry first
23:26 - what would you call this index of the
23:28 - tuple and then i'm going to print
23:34 - items one of
23:37 - price
23:38 - and i'm going to put a dollar sign
23:40 - near it too so i'm going to make an f
23:42 - string
23:43 - and i'm going to put a dollar sign oops
23:46 - i did this the wrong way
23:48 - i want a dollar sign
23:50 - and then i want to put this inside of my
23:52 - curly braces okay so now we'll actually
23:54 - print dollar sign then we'll print the
23:56 - price
23:57 - and then
23:58 - i'm going to print the link so we'll say
24:01 - items
24:03 - one
24:04 - link now just to clarify because i'm
24:06 - sure some of you are kind of confused
24:07 - here when i do dot items what this gives
24:10 - me is a list of items so the items would
24:13 - look something like this
24:14 - you know 30 80 for the win and then we
24:18 - would have price let's just go like two
24:20 - nine nine whatever and then we would
24:22 - have link
24:23 - and then there'd be some link here so
24:25 - that's what all of our items are gonna
24:26 - look like so that's why i'm accessing
24:28 - them in this way because i'm gonna sort
24:30 - all of the items by the price
24:32 - and then what i'm going to do is print
24:34 - out item 0 which is the name and then
24:36 - items 1. sorry this is item not items so
24:40 - item 1 of price which will give me the
24:42 - price and then item 1 of link which will
24:44 - give me the link
24:45 - hopefully that makes sense okay so let's
24:48 - now run this
24:49 - and see what we get
24:51 - so let's go here
24:53 - and let's go 30 70 this time oops never
24:55 - mind 3080 and none type object has no
24:58 - attribute string interesting okay so dot
25:01 - strong
25:02 - apparently for some reason that's not
25:04 - giving us the string uh so let me see
25:07 - what's wrong with that all right so i'm
25:08 - just debugging this for a minute or two
25:10 - and found a few mistakes that i'll go
25:12 - through right now so first of all this
25:14 - is a modification so for some reason i
25:17 - guess a few of the entries don't have a
25:20 - strong field um i'm not sure this will
25:23 - happen sometimes where some of the html
25:25 - will be off on some of the stuff that
25:26 - you're doing so to fix this not very
25:28 - good practice wise i just put a try and
25:30 - accept block so pretty much if this
25:32 - fails and i'm not able to find the
25:35 - string from the strong tag and i change
25:37 - this to fine strong rather than just dot
25:39 - strong that shouldn't make a difference
25:40 - but i was just trying it in case that
25:42 - was going to make a difference
25:43 - anyways so i put the triangle and then
25:46 - changed it in in this way and then all
25:48 - is good now i also added key equals i
25:50 - forgot to do this before i had it like
25:52 - this so you need to do key equals lambda
25:54 - and then that will actually allow you to
25:56 - sort so let's make sure we have that and
25:58 - then one thing i'm going to do before i
25:59 - show you the output here is i'm just
26:01 - going to print a bunch of dashes here
26:03 - just to kind of separate them because
26:04 - it's really hard to read it otherwise
26:06 - and now let's go here you can see i was
26:08 - testing it let's run this let's go 3080
26:12 - and let's see what we get
26:14 - so now we get all of our results uh we
26:18 - can see that the cheapest 380 in stock
26:20 - two thousand dollars
26:23 - two 2223
26:23 - four oh nine two six one three two six
26:26 - four nine and then the link is available
26:28 - for all of them so if i click on this
26:29 - one right here
26:30 - uh let's grab it
26:32 - and
26:33 - let's actually paste it in
26:36 - and let's see here if this is available
26:38 - and there you go so we have the 38 ti i
26:40 - believe we had the correct price for
26:42 - that yes we did and then we could go
26:44 - ahead and purchase it now i'm curious if
26:46 - this one is just showing me 380 ti's no
26:48 - okay it's showing me 30 80s as well so
26:49 - let's just try this link out and make
26:52 - sure this is working
26:54 - okay so let's grab this
26:56 - and paste this in here and then there we
26:58 - go we have this perfect all individual
27:01 - project okay so this is you have to buy
27:03 - this in a combo i guess or something
27:05 - like that regardless
27:07 - it worked so with that said i think i'm
27:09 - going to end the video here i just
27:11 - wanted to show you how you would
27:12 - actually go about doing this to automate
27:14 - some type of task in my opinion this is
27:16 - pretty useful pretty interesting
27:17 - especially if you're looking for
27:18 - graphics cards or any product really
27:20 - rather than going and having to find it
27:21 - yourself you could write a little script
27:22 - like this although given that might take
27:24 - more time than searching for it
27:26 - regardless hope you guys enjoyed the
27:28 - video if you did make sure to leave a
27:29 - like subscribe to the channel and i will
27:31 - see you in another one
27:34 - [Music]