00:02 - [Music]
00:08 - so we need now a way to actually update
00:10 - these posts that when we like it
00:11 - we can tell that we've liked this post
00:14 - so let's work on that next uh and then
00:16 - we'll actually work on loading all of
00:17 - these and and
00:18 - you know showing them at the start of
00:20 - our application so let's go back to post
00:23 - and now let's modify a few things um so
00:25 - that we can actually
00:26 - update some stuff when the user likes
00:29 - the post
00:30 - so first thing i'm going to do is i'm
00:31 - just going to say void
00:33 - update like that and then i'll simply
00:36 - call
00:38 - this dot update after we like the post
00:40 - so then it will get
00:41 - all of the likes that we have and it
00:43 - will call this method which will
00:44 - hopefully update it for us
00:46 - so inside of here i'm going to call a
00:47 - method that we're going to create now
00:49 - in database so inside of our database
00:52 - file i'm going to make a method called
00:53 - update post so i'm going to say void
00:57 - update post this will simply take a post
01:00 - and what this will do is it will say
01:03 - post
01:04 - dot underscore id dot update
01:07 - like that and there's a reason i can't
01:09 - reference underscore id
01:12 - okay so let's not do that then instead
01:14 - of doing that let's take a post
01:16 - and let's take a database reference
01:20 - of id so now what we're saying is okay
01:22 - give us the post and give us the
01:24 - reference to the item
01:26 - the database object here and then we'll
01:27 - say id dot
01:29 - and in this case it's just going to be
01:31 - update and we can simply update with
01:33 - post
01:34 - dot to json so this is like really basic
01:37 - super simple
01:38 - what i'm saying is okay let's take a
01:40 - post object
01:41 - let's take the database reference that
01:43 - we already have and then let's simply
01:45 - update it with the post.json
01:48 - now we don't really need to make a
01:49 - method or a separate function inside of
01:51 - database to do this but
01:52 - since i want to keep everything kind of
01:54 - contained i will and that means that now
01:56 - if we go back to post
01:58 - what we need to do inside of here is
01:59 - call that update post
02:01 - so we're going to say update post like
02:04 - that
02:04 - for post we're going to pass this
02:06 - because we're passing the
02:08 - current post and for id we're going to
02:10 - pass this dot underscore id
02:12 - like that so that's all we need to do
02:14 - we're giving the database reference
02:16 - which is right here
02:17 - and then we're going to pass the actual
02:19 - post object itself which is this
02:21 - we will automatically convert that to
02:23 - json
02:24 - from the database thing right here when
02:26 - we're calling.2json and that should
02:28 - update the post for us
02:29 - so let's actually have a look at this if
02:31 - this is working or not so let's refresh
02:33 - and let's open up firebase and let's get
02:36 - the app going at the same time
02:37 - and let's go sign in with google choose
02:40 - my account
02:41 - and now let's just go hello we need to
02:44 - make a new message here
02:45 - you can see that gets added and now when
02:47 - i like this notice that every time i
02:49 - like it this is highlighting in yellow
02:51 - so we have one like on it and now we
02:53 - have this user-liked thing popping up
02:55 - and it gives us the id
02:56 - of the user that liked this now if we
02:59 - have that and i unlike this
03:00 - you can see that that disappears it
03:02 - highlights in red and it goes away
03:04 - so that is kind of how firebase works
03:06 - and that's why i wanted to use this too
03:07 - because it's super simple
03:08 - super intuitive and graphically it's
03:10 - like really easy to look at
03:12 - i make sure you're doing things properly
03:14 - okay so now that's working
03:15 - and all we need to do is actually load
03:17 - these messages at the beginning so that
03:19 - we can see all the messages persistently
03:21 - because obviously
03:22 - i have four messages right now but we
03:25 - aren't seeing them
03:26 - we need them to show up somewhere all
03:27 - right so now let's write the function
03:28 - that's actually going to return
03:30 - all of the messages that are loaded in
03:32 - our database
03:33 - so i'm going to call this one get all
03:35 - messages
03:36 - we're going to make this async like that
03:38 - and then at the bottom here i'm just
03:40 - going to have a return
03:41 - statement for a blank list just because
03:43 - now i'm going to make this a
03:44 - future that's going to take a list
03:48 - of posts like that so essentially what
03:51 - i'm saying is that since this is an
03:52 - asynchronous function
03:53 - we have to wait for the database to be
03:55 - queried we might have to wait
03:57 - for this to actually be finished so we
03:59 - might not immediately get a result when
04:01 - we call this
04:01 - so that's why we wrap the list that
04:03 - we're returning it's going to have a
04:04 - bunch of posts in it with a future
04:06 - next what we're going to do is we're
04:07 - going to say data snapshot
04:10 - and then we're going to say data
04:11 - snapshot is equal to and this is going
04:13 - to be
04:14 - database reference dot
04:17 - child inside of here we want the child
04:19 - to be posts that's what we want to
04:21 - reference
04:22 - and then we're going to say dot once
04:25 - like that so what is the error here
04:29 - we need to put in a weight before this
04:32 - so like that so since this is an
04:34 - asynchronous call as well
04:35 - we will await it which means just wait
04:38 - for this to finish essentially
04:40 - okay so now we have data snapshot what
04:42 - i'm going to do is i'm going to say list
04:44 - post we're going to call this posts
04:47 - equals a blank list
04:48 - and this will be the list that we
04:49 - populate with the post
04:51 - now remember that all of this data here
04:54 - inside of our firebase datastore
04:56 - or whatever you want to call it realtime
04:57 - database is not actually a post
05:00 - object it is simply kind of like a json
05:02 - object it's a it's a map or a dictionary
05:04 - right
05:05 - so we need to now take that and
05:08 - translate this into a proper
05:10 - post object that we can then actually
05:11 - return in the list
05:13 - so first thing we're going to do is just
05:15 - say if
05:17 - and this would be datasnapshot.value
05:21 - does not equal null then what we will do
05:26 - is we will actually grab all of the
05:28 - values that are in this data snapshot
05:30 - convert them into post objects and add
05:32 - them to the list
05:34 - so we're going to say data snapshot dot
05:37 - value because it's not null which means
05:39 - we actually found something there
05:41 - dot 4 each like that and inside of here
05:44 - we're going to make an arrow function
05:46 - we're going to say
05:47 - key comma value
05:50 - and then we will do whatever's inside of
05:52 - this function body
05:53 - so what i'm saying essentially is that
05:54 - since this is a list this value
05:57 - for every single value in the list
05:59 - they're going to have a key
06:00 - and they're going to have a value and
06:02 - then what we will do is we'll use that
06:03 - key in that value to actually
06:05 - translate this into an object and add
06:08 - that to the post list
06:09 - so the first thing i'm going to do is
06:10 - say post post equals
06:13 - i'm going to write this here and we'll
06:14 - fill this in later but i'm going to say
06:16 - create
06:16 - post which is a function we're going to
06:18 - write that will actually create
06:20 - a new post given a value
06:23 - so we'll have a look at these actually
06:24 - we might have a look at these after but
06:26 - essentially what this kind of looks like
06:27 - is you have a key the key
06:31 - is whatever that unique id is so
06:33 - actually let me just go to firebase and
06:35 - i can walk us through it
06:36 - so this right here is the key like this
06:38 - kind of
06:39 - let's zoom in this thing that i'm
06:41 - highlighting is the key
06:42 - and then the value is actually the
06:45 - author
06:46 - and the body so the value will uh will
06:48 - store another key which will be author
06:50 - and another key which will be body and
06:52 - the value of that key will be
06:54 - you know tim and the value of body will
06:57 - be hello
06:58 - so it's kind of like a nested statement
07:00 - thing so when i'm saying
07:01 - value what i'm doing is i'm actually
07:03 - grabbing just the information associated
07:05 - with this key which is actually the data
07:07 - that we want
07:08 - so create post obviously doesn't exist
07:10 - yet so we'll have to make that function
07:12 - but we'll leave that there for now
07:14 - now once we get that post we're going to
07:15 - say post dot set
07:17 - id and i think set id is the name of it
07:20 - uh
07:21 - did we have set id yep set id that's
07:23 - what it is and we're simply going to set
07:25 - the id
07:26 - as the value and the reason for that is
07:29 - because the value
07:30 - is the id right sorry not the value what
07:32 - am i saying that's going to be the key
07:34 - as the key because that key again is
07:36 - this right here which is the id that we
07:38 - want
07:39 - but we need to turn this into a database
07:41 - reference because we don't want to just
07:43 - pass
07:44 - the key if we do that then we're just
07:46 - getting a string we need to turn that
07:47 - into a reference so what we can say
07:49 - is uh database reference dot child
07:52 - so not slash sorry dot child and then
07:55 - we're gonna say
07:56 - posts slash plus key
07:59 - so essentially we want to reference the
08:01 - uh key that is in
08:03 - this post field right this so we'll just
08:05 - concatenate those two strings together
08:07 - okay so then we have that and finally
08:09 - we'll say posts
08:10 - dot add and we'll add post and that's
08:13 - the list that we have up here
08:15 - and then instead of returning a blank
08:16 - list we'll return posts
08:18 - like that so now all we need to do is
08:20 - make this create post
08:21 - function so to do that i'm actually
08:23 - going to put that inside of post i just
08:25 - think it makes sense
08:26 - to put it there and let's simply say
08:28 - post
08:30 - create post let's take one record or one
08:34 - value or whatever you want to call it
08:35 - and then inside of here let's make that
08:37 - post all right so what i'm going to
08:39 - start by doing is i'm going to make a
08:41 - map
08:41 - i'm going to say map string dynamic
08:45 - and we'll just call this attributes
08:48 - like that it's going to be equal to a
08:50 - new map so a new dictionary
08:52 - and you'll see what i'm going to do in
08:53 - here it's going to seem strange but it
08:54 - will make sense in a second so first i'm
08:56 - going to say
08:56 - author and i'm just going to make that a
08:58 - blank string
08:59 - then i'm going to say users liked
09:03 - i'm going to make that a blank string or
09:04 - sorry not a blank string a blank
09:06 - list and then i'm going to say body and
09:08 - i'm going to make that a blank string
09:10 - essentially what i'm going to do is kind
09:11 - of just have a cleaner way of updating
09:13 - the things that i need
09:15 - so we'll say you know author starts up
09:17 - as blank
09:18 - users liked starts off as a blank list
09:20 - and the body starts off as blank and
09:22 - then we're going to look through all of
09:23 - the different key value pairs in this
09:25 - record
09:26 - and if any of them are any of these keys
09:29 - right here then we will update what
09:31 - these values are and then we'll make a
09:32 - new post using them
09:33 - so pretty straightforward we're going to
09:35 - say record dot for
09:37 - each i think for each will work and then
09:39 - we're going to say
09:40 - key comma value
09:44 - arrow function like that and inside of
09:46 - here you'll see why i've made the
09:48 - dictionary now or the map i'm going to
09:49 - say attributes
09:51 - and i'm going to say attributes key
09:54 - equals value
09:55 - so essentially what this is doing and is
09:58 - there a reason why the semicolon
09:59 - expected to find
10:00 - a it's the reason do i have too many of
10:04 - those
10:06 - i don't know why it's expecting to find
10:09 - this uh i'll have a look at that in one
10:11 - second but essentially
10:13 - all of this right is going to have let's
10:15 - go back to the firebase it's going to
10:16 - have like author
10:18 - tim sika body hello so the key will be
10:20 - author the value will be timor sika the
10:22 - qb body
10:23 - the value will be hello so i'll just use
10:25 - that same key which we have right here
10:27 - and
10:28 - set that equal to whatever the value is
10:30 - now i don't know why
10:32 - that was saying we expected to find
10:34 - blank thing okay i guess we can just
10:36 - leave that like that
10:37 - that's fine for now and next what we're
10:39 - going to do is we're going to say
10:41 - post post equals new post and inside of
10:45 - here
10:46 - we're going to say attributes and the
10:48 - first thing that we need to pass i
10:49 - believe is the body
10:51 - and then attributes and then we want the
10:55 - author
10:57 - and then what's the other positional
10:58 - argument that we need here i actually
11:00 - don't think we need any other positional
11:02 - argument so let me just look at post
11:04 - quickly but we're making a new post
11:05 - right so if i go to
11:07 - post which is actually just up here we
11:09 - can see we actually take sorry the body
11:11 - and then the author so let's swap those
11:13 - around
11:14 - uh oh did we do that correctly we did do
11:16 - that correctly so body and author
11:18 - and then what i'll do is i will say if
11:22 - um attributes
11:25 - and we'll say
11:28 - users liked and actually i'm thinking i
11:30 - don't think i need to do what i was
11:31 - going to do
11:31 - i'm actually just going to say that
11:34 - post dot users liked
11:38 - equals set dot from
11:41 - attributes users liked and this is going
11:43 - to have to be new
11:45 - so this might seem kind of confusing but
11:47 - what this is doing is essentially saying
11:48 - okay
11:49 - this is a list right this information
11:51 - we're getting from the database we want
11:53 - that to be a set
11:54 - because we have a set stored here for
11:55 - users liked so let's make a set
11:58 - from this list which just takes this
12:00 - list and just actually
12:01 - makes a set of it and then store that in
12:03 - user select
12:04 - then we can return the post
12:08 - like that okay so that should be the
12:11 - create post method done
12:12 - that should hopefully mean that if we go
12:14 - back to database
12:16 - this should be working uh undefined
12:18 - named post uh post post
12:20 - why is that giving me the wrong name can
12:23 - we do post
12:24 - underscore can i do posts like that
12:29 - okay let's just go var
12:33 - post equals that and then expect
12:36 - an identifier oh sorry guys this needs
12:39 - to be
12:39 - comma okay so for some reason i've added
12:42 - this arrow function here which just
12:44 - really messed things up for me
12:45 - i just need to get rid of that arrow
12:47 - that was here i was like why is this not
12:49 - working but it's because i have that
12:50 - arrow so let's get rid of that
12:51 - and let's add our semicolons and now all
12:53 - of this should actually be working to
12:54 - get all the messages
12:56 - so now all we need to do is actually use
12:57 - this function i know this has been a lot
12:59 - of code and a lot of stuff going on but
13:01 - now we just have to use this and
13:02 - actually load it up
13:03 - so let's now go to my home page and what
13:06 - we're going to do is inside of my home
13:07 - page
13:08 - we're actually going to load all of
13:10 - those posts
13:11 - when we load this up actually i don't
13:14 - know if we're going to put it in here
13:16 - or if we're going to throw it somewhere
13:17 - else we might actually do it inside of
13:19 - post
13:20 - lists let's have a look here okay so i'm
13:23 - actually going to do this inside of my
13:24 - home page so let's go over there
13:26 - and what we need to do is essentially
13:27 - load all of these messages
13:29 - whenever this home page is loaded so
13:31 - what i'm going to do is i'm going to
13:32 - make this function
13:33 - i'm just going to call it update i'm
13:35 - going to say void
13:36 - update messages like that
13:40 - and what this will do is we will call
13:42 - get all
13:43 - posts like that is get all post what i
13:46 - called it i called it get all messages
13:48 - great let's call it get all posts that
13:50 - makes more sense
13:51 - so get all posts and then i'm going to
13:52 - say dot then and what that means is once
13:55 - this is done
13:56 - so once get all posts actually loads
13:59 - then we'll have a function
14:01 - which will take the posts this will go
14:05 - to an arrow function
14:06 - and inside of here we're going to say
14:08 - this dot set
14:09 - state and what we're going to do is set
14:11 - the state and change
14:13 - these posts right here to be equal to
14:15 - the post that we have so we'll say this
14:16 - dot posts equals posts
14:20 - and i think that should actually be all
14:22 - that we need
14:24 - assuming that all that is great okay so
14:26 - i just fixed some of my semicolons and
14:27 - stuff i think that's actually correct
14:29 - and what that does obviously is set the
14:31 - state so it will redraw any of the
14:33 - widgets below it
14:34 - that use any of this so that means we
14:36 - will automatically refresh the messages
14:38 - every single time that we go in here now
14:40 - what i'm going to do as well is i'm
14:42 - going to add another method i'm going to
14:43 - say
14:43 - void and in here i'm going to call this
14:45 - one init
14:46 - state i think we've used this before but
14:49 - this is an override method
14:50 - so i'm going to say at override and then
14:52 - what i'm going to do is go super
14:56 - dot sets no sorry not set state super
14:59 - dot
14:59 - init state like that and inside of here
15:02 - i will call
15:03 - update so update posts like that
15:06 - uh and nope update messages why am i
15:10 - calling this this needs to be update
15:12 - posts
15:13 - and that can be update posts okay so
15:15 - i've just
15:16 - mangled all the names but i changed this
15:18 - from update messages to update posts now
15:20 - i'm calling update post
15:21 - so essentially whenever this page gets
15:23 - loaded we will update and you know we
15:25 - can
15:26 - manually update as well but this just
15:27 - means right when this gets loaded
15:29 - update all those messages and that
15:32 - should
15:32 - be good to go for now so let's actually
15:36 - load this app and see if this is working
15:39 - it's a high likelihood that i've made a
15:40 - few mistakes here because this has been
15:42 - a lot of code that we've been writing
15:43 - but
15:44 - let's take a look at it all right so the
15:46 - app is loaded let's sign in with google
15:48 - choose our account and let's see what we
15:50 - get
15:52 - and there we go all of our posts
15:53 - actually load up immediately
15:55 - so now i can like unlike so let's
15:57 - actually see if i like that
15:58 - and then i go back and i can sign in
16:00 - with google there we go we can see that
16:02 - that is liked
16:03 - and that is exactly what i was going for
16:05 - so let's add one more
16:09 - test essage so we have test essay here
16:11 - now let's just make sure this is working
16:12 - because i'm not super confident
16:14 - sign in again and there we go it is
16:16 - popping up
16:18 - all right so that is i think pretty much
16:21 - all that i wanted to show us so now we
16:23 - have the database set up
16:24 - uh we have authentication working we
16:27 - have messages we have likes we have
16:29 - text input i've shown you guys a ton of
16:31 - stuff and i may be ending the tutorial
16:33 - series here
16:34 - if you guys comment enough and you
16:35 - bombard me i might add some more
16:37 - episodes to this series depending on
16:38 - what you guys want
16:39 - i'm thinking the only thing that would
16:40 - make sense now is to kind of associate
16:42 - comments with each of these posts and
16:44 - make it so when you click into them
16:46 - you can kind of view them more in depth
16:47 - but anyways let me know if you want to
16:49 - see that
16:50 - with that being said i hope you enjoyed
16:51 - this series so if you did leave a like
16:53 - subscribe to the channel and of course i
16:55 - will see you again in another flutter
16:56 - tutorial series or another video on this
16:59 - [Music]
17:02 - channel
17:06 - you