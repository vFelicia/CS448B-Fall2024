00:02 - [Music]
00:08 - in this django tutorial i'll show you
00:10 - how to set up authentication for a
00:12 - django website specifically how to
00:14 - create new user accounts sign in to
00:16 - those user accounts and then sign out
00:18 - i'll also talk to you about user
00:19 - permissions and groups so how to assign
00:22 - specific permissions to users and
00:24 - restrict parts of our websites to those
00:26 - users for example in the website that
00:29 - we're going to build out here we're
00:30 - going to have two groups of users a
00:32 - default user and a mod user the default
00:35 - user will have the ability to post and
00:37 - to delete posts that they've created
00:39 - themselves and then the mod user will
00:41 - have the ability to delete anyone's
00:43 - posts because they're moderating the
00:44 - website as well as to ban users and if a
00:47 - user becomes banned then they will no
00:49 - longer have the ability to post but
00:51 - they'll still be able to view specific
00:52 - posts this will give you a really
00:54 - in-depth and kind of thorough
00:56 - understanding of the django permission
00:58 - system and grouping and allow you to do
01:00 - a lot of advanced stuff on your website
01:02 - and manage different users lastly i will
01:05 - also show you how we build out a really
01:06 - cool dashboard where we can view all of
01:08 - our different users see what groups they
01:10 - are in change the groups of users really
01:13 - simply from this dashboard as well as
01:15 - view some statistics like the new users
01:17 - per day the number of posts per user
01:19 - what type of users we have so default
01:21 - users mod users and view it all from one
01:24 - page now this dashboard that i have in
01:26 - front of me is going to be built using
01:28 - something called retool now we'll slowly
01:30 - build this out throughout the video but
01:31 - i do need to mention that retool is the
01:33 - sponsor of this video they are free to
01:35 - use you do not have to pay for this and
01:37 - it just allows us to really easily
01:39 - visualize our different data and for
01:41 - people that aren't programmers to come
01:43 - in here and actually say make a
01:44 - modification to our database and affect
01:46 - our application without having to go
01:48 - into the django shell you know type in
01:50 - lines of code and we can also do stuff
01:52 - like add charts and add graphs and a
01:55 - bunch of other customizations that we
01:56 - can't really do from a regular django
01:58 - admin page so yes some of this stuff is
02:01 - going to be redundant with django admin
02:03 - but again if you weren't a programmer
02:04 - this is going to be a much more
02:05 - preferred way to go in and view the
02:07 - database
02:08 - change different aspects of the database
02:10 - like which users are in which groups and
02:12 - then create some different charts and
02:13 - statistics and really anything you want
02:16 - anyways let me give you a quick demo of
02:17 - what we're going to build out here i
02:18 - apologize for the long intro but it is
02:20 - necessary to talk about this so here you
02:22 - can see that we have a simple website
02:24 - where users are able to sign in right
02:25 - now i'm signed in as joey and i can do
02:27 - something like create a post
02:29 - so let's just say tutorial i am
02:33 - demoing the app exclamation point let's
02:36 - make a post okay post has been created
02:39 - now let's go and log out here and let's
02:42 - sign in as the user tech with tim which
02:44 - is a super user
02:45 - and notice here that this user has the
02:47 - ability to delete anyone's posts even
02:49 - posts that they have not made themselves
02:51 - and to ban users now of course i can't
02:53 - ban myself but we just have the button
02:55 - there anyways so let's do something like
02:57 - ban joey and if i ban joey now let's log
03:00 - out and let's sign in as joey
03:03 - and now notice that if i try to make a
03:05 - post here so no i don't want to save
03:06 - that
03:07 - you'll see that i'm not allowed to do
03:09 - that now we can make a custom page for
03:10 - this for now i've just made it forbidden
03:12 - i'm still able to delete my own post
03:13 - because i have that permission but i no
03:15 - longer have the permission to make a
03:17 - post now if i sign in as a different
03:19 - user
03:20 - let's sign in as say susan here
03:23 - you will see that i have the ability to
03:25 - delete anyone's posts and the reason i
03:27 - can do that is because if i go here
03:29 - susan is a mod so since susan is the mod
03:31 - they can't ban anyone but they have the
03:33 - ability to delete anyone's post so i
03:35 - could delete joey's posts i can delete
03:37 - the admins post we could change that if
03:39 - we want to but the point is we have
03:40 - different users that have different
03:42 - permissions and that changes what
03:44 - they're able to do on the website
03:45 - obviously kind of a more advanced thing
03:47 - but that's what i want to show you in
03:48 - this video so anyways with that said
03:50 - that is enough for this intro i
03:52 - apologize that this was long now let's
03:54 - head over to visual studio code and
03:56 - start working on this project alright so
03:58 - i'm inside of vs code and now we can go
04:00 - ahead and get started so there's a few
04:02 - setup steps that we need to go through
04:04 - we're going to start by installing
04:05 - everything kind of setting up a
04:07 - boilerplate django application linking
04:09 - our urls and views and all of that then
04:11 - we're going to create a remotely hosted
04:13 - database using postgres i'll talk about
04:15 - that when we get to that step then we
04:17 - will build out the website we'll build
04:19 - out the dashboard and all the other
04:20 - stuff that we need to do so to get
04:22 - started i've created a folder here
04:23 - called django user management tutorial
04:25 - doesn't really matter where you place it
04:27 - but i've opened it in vs code feel free
04:29 - to use any editor you want but i'm just
04:30 - going to use vs code now i'm inside of
04:33 - this directory here which is going to be
04:34 - important for the next step but first we
04:36 - need to install a few modules so since
04:38 - we're working with the django website
04:39 - i'm going to pip install django i
04:41 - already have that so i'm not going to
04:42 - run that command if that doesn't work if
04:44 - you try pip 3.
04:46 - if that doesn't work for you try python
04:48 - hyphen m pip install if that doesn't
04:50 - work for you try python 3 hyphen and pip
04:52 - install if none of those work i will
04:54 - leave two videos on the screen that show
04:56 - you how to fix the pip command
04:58 - now since we're here at this step we're
04:59 - also going to install a few other things
05:01 - we're going to type pip install and then
05:03 - we're going to install crispy and
05:06 - actually i don't know if this is what
05:08 - it's called uh it's going to be crispy
05:10 - hyphen
05:12 - bootstrap
05:14 - 5 like that now this is going to allow
05:16 - us to have some pre-built forms that we
05:19 - can render on the screen using bootstrap
05:21 - so that's why we're installing this and
05:23 - then you also want to install crispy
05:25 - forms although this should already be
05:26 - installed when you install crispy
05:28 - bootstrap so just install this in case
05:30 - it will probably tell you it's already
05:31 - there but let's just make sure that we
05:32 - have that before we move on okay so now
05:34 - that we installed that django crispy
05:36 - bootstrap 5 and crispy forms we can
05:38 - create a django project now i will
05:41 - mention here that this tutorial is not
05:42 - meant for complete beginners in django i
05:45 - do have a ton of django tutorials on my
05:46 - channel so you can check those out if
05:48 - you're getting a little bit lost here
05:49 - with what i'm doing but i'm going to
05:51 - kind of skim over some of the
05:52 - explanations of the most basic stuff
05:54 - regardless though let's create a project
05:57 - here so i'm going to say django admin
05:59 - and then this is going to be start
06:02 - project and the name of this project can
06:04 - be whatever you want i'm going to call
06:05 - mine website now make sure you run this
06:08 - command in the directory where you want
06:10 - this folder to be created so in this
06:12 - case i'm running it in this directory
06:14 - that's where i want it to be but if you
06:15 - want it on your desktop then you'd make
06:16 - sure the path here is desktop you just
06:18 - have to navigate through your terminal
06:20 - or command prompt to get to the right
06:21 - path okay so let's run that now we see
06:23 - that we get this website directory
06:26 - and inside of the website folder inner
06:28 - folder
06:29 - we have all of our files here
06:31 - that are containing the stuff that we
06:32 - need as well as dot pi so now that we've
06:34 - done that we want to make an application
06:37 - for our django project
06:39 - so i'm going to cd into website and i'm
06:41 - going to type the following
06:42 - python and this is going to be manage.pi
06:45 - and then start app and i'm going to call
06:48 - my app main now you can call your app
06:50 - whatever you'd like but if you do change
06:51 - the name from main then you're going to
06:52 - have to tweak some other things so i'd
06:54 - recommend you just call it main for now
06:56 - to follow along so make sure you're
06:57 - inside of the website directory where
06:59 - the manage.pi file is and you type
07:01 - python manage.pi start app and then main
07:04 - and then you'll see it makes this main
07:05 - directory here and in case you're
07:07 - unfamiliar the app is where we're going
07:09 - to write most of the logic
07:11 - for our website and we're going to kind
07:13 - of link the app to the main website so
07:15 - the way that we do that is inside a
07:16 - website we go to settings.pi and there's
07:19 - this thing called installed apps now the
07:22 - app that we just made is called main so
07:24 - we need to throw that in here so the way
07:25 - we do that is we type main
07:28 - dot apps dot and then main config now if
07:32 - you're wondering where this is if you go
07:33 - to main and you look at apps dot pi you
07:36 - can see we're referencing this main
07:37 - config class right here so that's what
07:39 - we're adding in here
07:41 - main.apps.mainconfig
07:42 - of course if you change the name of your
07:44 - app maybe it was auth or something then
07:46 - you need to change this and it would be
07:49 - auth.apps.auth.config okay and if you
07:51 - want to check then again you can go to
07:52 - apps.pi and you'll see exactly what the
07:54 - name is okay
07:56 - so now that we have that installed apps
07:58 - we're also going to add a few other
07:59 - installed apps specifically the crispy
08:01 - forms and crispy bootstrap 5 that we had
08:04 - before so we'll start with crispy
08:06 - underscore forms because we're going to
08:08 - want to use that later and then we will
08:10 - add crispy underscore
08:12 - boot
08:13 - strap
08:14 - 5 like that so that it styles our forms
08:17 - with bootstrap and they look
08:19 - nicer than the default forms okay now
08:21 - that we have that inside of settings.pi
08:23 - that's all we need for right now we've
08:25 - linked the main app to the website so
08:28 - let's just run our server and make sure
08:30 - everything's working so i'm going to
08:31 - type python
08:33 - manage.pi run server
08:35 - and when i do that i should see that
08:37 - we're getting this running on our
08:38 - localhost port 8000 so i'm going to
08:40 - control click on that to open it up
08:43 - and let's go to our browser here let me
08:45 - bring this over and you can see this
08:47 - install works successfully
08:48 - congratulations and you're seeing this
08:50 - page because debug equals true okay
08:51 - that's fine and we have not configured
08:53 - any urls
08:54 - so next what we're going to do is
08:55 - configure some urls so let me close this
08:58 - server here although i could have kept
08:59 - it running because when you keep it
09:00 - running it will just update when you
09:02 - change stuff but that's fine for now
09:04 - okay
09:05 - so we have some urls
09:07 - inside of urls.pi and actually before i
09:09 - do this let's make a new
09:11 - file here in our main app
09:14 - called urls.pi so what we need to do
09:16 - essentially is link the urls from this
09:19 - main app to our actual website so that
09:22 - we can access the different views from
09:23 - our main app
09:25 - so i guess we can really start wherever
09:26 - we want let's just start here
09:28 - we're going to import something called
09:30 - include alongside path
09:32 - and we're going to put a new path here
09:34 - and this is just going to be an empty
09:35 - path and this is going to go to and then
09:39 - this is going to be include
09:42 - and we're going to put main dot urls
09:44 - like that now what this is saying is
09:46 - that the prefix is going to be nothing
09:48 - and we want to get all of the urls from
09:50 - main.urls and access them with well this
09:52 - prefix which is nothing so that
09:54 - essentially means that now any urls we
09:56 - put inside of this file so the urls.pi
09:59 - file will be able to access on our
10:00 - website and notice we already have these
10:02 - admin urls which are pre-built for us
10:04 - which kind of give us the admin panel
10:06 - and admin page which we'll have a look
10:08 - at later for now though let's go to urls
10:11 - and let's actually set up the urls
10:12 - inside of here so what we need to write
10:14 - here is from django import
10:17 - and then this is going to be path and
10:19 - then from dot views
10:22 - import or sorry not from dot views from
10:25 - import from dot sorry import views
10:28 - now dot is referencing the current
10:30 - directory because this is a python
10:31 - package by the presence of the init.pi
10:34 - file and so we're able to access this
10:35 - views file
10:37 - okay so now we're going to type url
10:39 - patterns is equal to a list
10:41 - and this is where we can place all the
10:42 - urls for our app so for now i just want
10:45 - a url for the home page so i'm going to
10:46 - type path we're just going to make it an
10:48 - empty path so when you go to the default
10:49 - page this is what shows up and we want
10:52 - to display the views.home function which
10:54 - is a function we've yet to create okay
10:56 - so that's what we need for that
10:58 - now we want to go to the views file
11:00 - which is going to contain all of our
11:01 - different views and here we want to
11:03 - write the home view so we're just going
11:04 - to say define
11:06 - home we're going to take in request we
11:09 - don't need star args and star quarks
11:11 - okay and then for now we can just return
11:14 - a string and we can just put a p tag in
11:16 - here that says home and in a minute
11:18 - we'll write all of the templates so the
11:20 - html that we actually want to render
11:21 - from these different views so actually
11:23 - quick cut here i remembered that we
11:25 - can't actually do this i'm used to
11:26 - working in flask where this works this
11:28 - is going to cause an error for us so
11:30 - what we need to do is actually make a
11:32 - template a template is just html
11:34 - essentially that we're going to be
11:35 - rendering onto the screen so we need to
11:38 - do that before we can actually view
11:39 - anything from this root so let's go into
11:41 - this main app and it's very important
11:43 - here that you name everything what i'm
11:44 - about to name it sorry i keep opening
11:46 - and closing this but let's make a folder
11:48 - here and this folder needs to be named
11:51 - templates and it needs to be inside of
11:52 - the main app if you name it something
11:54 - else then it's not going to work so
11:56 - we're putting templates inside of here
11:57 - then we need to make another new folder
12:00 - and this folder needs to be the name of
12:01 - your app and i'm going to call this main
12:04 - okay
12:04 - and then while we're at it we're going
12:05 - to make one other folder
12:07 - and we're going to call this
12:08 - registration and we'll have a look at
12:10 - that in a second but this is going to
12:12 - contain all of our authentication urls
12:14 - or authentication templates sorry
12:16 - okay so we have main and we have
12:18 - registration we're going to go inside of
12:19 - main
12:20 - and we're going to make a template here
12:23 - called base.html and we're going to make
12:25 - another template here called home.html
12:28 - now django uses something called jinga
12:31 - which is a templating engine
12:33 - j-i-n-j-a i'm probably pronouncing that
12:35 - incorrectly what this allows us to do is
12:38 - write what's known as a base template
12:40 - and the base template can contain uh
12:42 - like a navigation bar and you know
12:45 - default stuff that we want on every
12:46 - single web page and then what we can do
12:48 - is inherit from that template in
12:50 - specific templates like home.html and
12:53 - just override parts of it like we can
12:55 - override the main content of the page
12:57 - without changing for example the nav bar
12:59 - so this is going to take a minute here
13:00 - but we're going to write
13:02 - the html now someone showed me a
13:04 - shortcut here i might not type it
13:06 - exactly correct but if you go here to
13:09 - the language if you're working in vs
13:10 - code this only works in vs code i
13:12 - believe if you have like the html
13:14 - extension i think that's what you need
13:16 - but most you will probably have this but
13:17 - if you change the language to just
13:19 - regular html
13:21 - apparently you can type html colon five
13:24 - like this yeah okay you can see and it
13:25 - actually generates a kind of boilerplate
13:28 - template for you so this is actually
13:29 - what we want so this is good we'll start
13:31 - with this for now and we want to write
13:33 - the rest of this base template now what
13:36 - i want to do is add bootstrap here so we
13:38 - can use bootstrap for styling of course
13:39 - you can style with whatever you want but
13:41 - it's just the easiest way for tutorials
13:43 - for me at least
13:44 - so let's go here yeah it's because this
13:46 - isn't running that's fine and let's just
13:47 - type in boot and i always spell this
13:50 - wrong boot strap okay come on and let's
13:53 - go to bootstrap here
13:55 - so here from the bootstrap website we
13:57 - can click on get started and we can just
13:59 - copy the cdn which is this right here so
14:02 - i'm going to click on copy
14:04 - as well as the different scripts that we
14:06 - need for bootstrap so i'm going to copy
14:09 - that i'm going to put this into my head
14:11 - tag so put this link right here again
14:14 - you can just search up bootstrap click
14:15 - on get started and then you know copy
14:17 - the the link put that in the head tag
14:20 - then what we need to do is copy a few
14:21 - scripts and we need to put those in the
14:24 - body so let's go back here to bootstrap
14:26 - okay for bootstrap it says if you decide
14:29 - to go with separate scripts okay
14:31 - include every bootstrap javascript
14:32 - plugin and dependency with one of our
14:34 - two bundles okay
14:36 - i think we can just copy this one right
14:38 - here for the bundle and this will give
14:40 - us everything that we need as opposed to
14:42 - copying the separate scripts so let's do
14:44 - that
14:45 - and just at the bottom of our body i
14:47 - guess in our body here we're just going
14:48 - to paste in this script and now we have
14:50 - added bootstrap to our website so now
14:53 - that we've done that i'll talk to you a
14:54 - little bit about template inheritance
14:57 - and how we override parts of this base
14:59 - template from another template so for
15:00 - now let's close that and what we're
15:02 - going to do here is create something
15:03 - called a block
15:04 - so i'm going to type percent percent
15:05 - like this block and i'm going to give
15:07 - the block a name and i'm going to call
15:09 - it title
15:10 - now what this does is it sets up a part
15:13 - of this html page here that can be
15:16 - overridden from a page that inherits
15:18 - this template so let me just end the
15:20 - block here so we're going to type n
15:21 - block and we can put a default value in
15:24 - here like my site and what this allows
15:27 - me to do now is go inside of this
15:29 - template i can rewrite this block and it
15:31 - will change what's inside of it with
15:33 - whatever i wrote in the home page you'll
15:36 - see when we start going through the
15:37 - example but for now that's what we want
15:39 - and then we're going to do the same
15:40 - thing inside of the body
15:42 - but first i'm going to say div i'm going
15:43 - to say class is equal to and i'm just
15:46 - going to make this a container which is
15:47 - a class from bootstrap and actually
15:49 - we'll make this container fluid
15:52 - and then what we want to do here is uh
15:54 - place the
15:57 - what is it the block so i'm going to
15:59 - percent percent
16:01 - block
16:02 - content and i'm going to do another
16:03 - block here and type and block and also
16:06 - i'll just note here that all this code
16:08 - will be available from the description
16:09 - in case you'd uh rather just copy this
16:11 - out or not copy this out copy it from
16:13 - github as opposed to typing it out and i
16:16 - realize i'm going to change the
16:16 - container back to regular container
16:18 - because i don't actually want this to be
16:20 - fluid okay so now i have two blocks a
16:22 - block for my title and a block for my
16:23 - content
16:24 - and what i want to do here is just place
16:26 - a nav bar that will let me navigate
16:28 - through the website so we're going to
16:29 - type nav
16:30 - let's end the nav here
16:32 - we want the class here these are going
16:34 - to be some bootstrap classes
16:36 - to be navbar
16:38 - nav
16:39 - bar expanded and then large like that
16:43 - and then
16:44 - nav bar this is going to be dark and
16:46 - then bg dark if you're unfamiliar with
16:49 - the syntax it's just from the bootstrap
16:51 - website you can kind of just copy it out
16:52 - we're just going to get a nicely styled
16:54 - nav bar here we're going to make a div
16:57 - this is going to be container and this
16:58 - time we want it to be fluid fluid makes
17:01 - it so it takes up the whole screen then
17:03 - we're going to make a div inside of here
17:06 - now the first div that we have is going
17:08 - to contain the links on like the left
17:09 - hand side of our page and then the next
17:11 - div that we have is going to contain the
17:14 - person that's logged in so it'll be like
17:16 - you know the left and right side of the
17:18 - navbar essentially so div here we're
17:20 - going to make a ul because we're going
17:22 - to have some different list items here
17:24 - and inside of ul we're going to have a
17:26 - class which is equal to navbar nav so we
17:30 - can just have navbar nav like that
17:33 - and then we want to have the different
17:34 - links on our nav bar so do li
17:37 - the class is going to be a nav and then
17:40 - item like that although that needs to be
17:43 - inside of a string and we should
17:44 - probably spell class correctly
17:46 - let's end our li
17:49 - and then inside of this we want to have
17:51 - a link so we're going to say a class
17:53 - equal to nav link
17:55 - we need the href to be equal to
17:58 - and then in this case i'll just make it
18:00 - slash home
18:01 - okay and then we'll end the link and it
18:04 - will say home okay so now let's copy
18:05 - this
18:06 - let's paste this and now let's just have
18:08 - another one for creating a post
18:10 - obviously we don't have these pages made
18:12 - yet but we'll make them later okay so
18:14 - clock slash create post and there we go
18:16 - we have now the left side of our navbar
18:18 - so now let me copy this div and paste it
18:21 - again and then we'll do a similar thing
18:23 - here for logging in so let's just make a
18:25 - button right now or a link that says
18:27 - login and we can deal with showing who's
18:29 - logged in later
18:31 - okay hopefully you guys are following
18:32 - for now though that is what we have for
18:33 - the base template we will add a few
18:36 - things to this uh but for now that's all
18:38 - we need okay so let's go to home
18:40 - and from home we essentially just want
18:42 - to take everything that's inside of here
18:45 - and we want to override the title so it
18:46 - says home we want to override the
18:48 - content so it shows like you know you're
18:50 - on the home page and eventually it will
18:52 - show all the posts that we have so the
18:54 - way that we do this is we type percent
18:55 - percent
18:57 - extends and then we're going to extend
18:59 - and make sure this is single quotes here
19:01 - the main slash and then base dot html
19:05 - template
19:06 - okay now that we've extended the
19:08 - template that's all we need to do to
19:09 - extend it
19:11 - we can use any of the blocks from the
19:13 - template so i can do something like
19:14 - block title
19:15 - and say home page
19:17 - and then i can end the block so percent
19:19 - percent
19:20 - and block like that
19:22 - and then let's do another blocks percent
19:24 - percent
19:25 - block content and then we will end the
19:28 - block and this is where we can place any
19:30 - html that we want to go inside of that
19:33 - div so if i go back to base here
19:35 - this is now where we can write
19:37 - essentially all the html and kind of
19:38 - inject it into this container so if i go
19:41 - to block content i can just do something
19:42 - like h1
19:44 - and then let's just go
19:45 - home page exclamation point and then
19:48 - slash h1
19:50 - and make sure when you save this uh it
19:52 - always does this it separates the block
19:55 - and the content you get an error if it's
19:57 - not on the same line so when i do this i
19:59 - just hit ctrl shift p
20:01 - and i hit save without formatting so
20:03 - save without formatting you can just
20:04 - type that in because my auto formatter
20:07 - like messes everything up you may not
20:08 - have the autoformatter you may not have
20:10 - to do that but i have one so i have to
20:12 - go ctrl shift p
20:13 - save that format
20:15 - okay apologize that we've just gone
20:16 - through a lot there very quickly but we
20:18 - created the base page we created the
20:20 - home page a lot of the html we need to
20:22 - write is done i'm going to go to views
20:24 - now and start rendering this page
20:26 - so from use we already have render
20:29 - so i'm now going to return
20:31 - render
20:32 - i'm going to render the request
20:34 - and then i'm going to render main
20:36 - slash home.html
20:38 - okay that's all we need for right now
20:40 - for the home page and if we go to urls
20:42 - we can see we're already referencing
20:44 - that home function so now everything
20:46 - should be good if i rerun the server so
20:48 - let's try python manage.pi
20:51 - run server and we should get a nav bar
20:53 - with some different links assuming that
20:55 - we've done everything correctly although
20:57 - it's possible we've made a mistake so
20:58 - let's refresh now and there we go we get
21:00 - a page we get home and post and these
21:04 - are on
21:05 - uh separate lines which is a bit messed
21:07 - up i don't want them to be on separate
21:08 - lines i want them to be beside each
21:10 - other so let me have a look at what i
21:12 - messed up there and i'll be right back
21:13 - all right so i found the error here i
21:15 - accidentally typed uh typed expanded
21:18 - instead of expand so just change this to
21:20 - navbar expand hyphen lg
21:23 - save and then if we go back here and we
21:24 - refresh
21:25 - we should see if this is large enough
21:27 - that they're going to be the sidechain
21:28 - now when the page shrinks yeah they do
21:30 - go on the same line but that's fine so
21:32 - we're all good for them okay so now that
21:34 - we have done that uh what we want to do
21:37 - is start setting up authentication right
21:39 - so we've created a homepage we have our
21:40 - views now we want to have the ability to
21:42 - create users log in as users and then do
21:44 - the different user management create
21:46 - posts all that type of stuff
21:48 - so let's go now
21:50 - to views
21:52 - and let's start creating what we need
21:53 - for authentication so actually i lied i
21:55 - forgot that for authentication we first
21:57 - need to set up our database so we could
21:59 - do all of this locally and not host a
22:01 - database remotely but i want to show you
22:03 - how we can host one using heroku
22:05 - completely for free you don't have to
22:06 - pay for this and then that's going to
22:08 - allow us from retool to actually connect
22:10 - to the database and use and modify the
22:12 - database without using the django
22:14 - application so you'll see what i mean
22:16 - but let's go to our browser and let's go
22:19 - to heroku
22:20 - and let's start creating the database so
22:24 - go to heroku you're going to need to
22:25 - create account if you don't already have
22:26 - one
22:27 - again it's completely free you don't
22:28 - have to pay for anything and then you
22:30 - should be able to get to this dashboard
22:31 - so if for some reason you can't get
22:33 - there then just type in https colon
22:35 - slash
22:36 - dashboard.heroku.com and then what
22:38 - you're going to do is type on new here
22:40 - and create a new application now this
22:42 - app is just going to host the database
22:43 - for us and it won't host it forever like
22:46 - i believe six hours of every day the
22:48 - database does go down but this is just
22:50 - for testing purposes and to show you how
22:52 - to connect to a remote database so let's
22:54 - call this something like tutorial
22:57 - tutorial is not available okay django
22:58 - tutorial
23:00 - is fine okay actually let's spell django
23:02 - correct though django tutorial how about
23:04 - one two three
23:05 - django1234 okay great let's go with that
23:08 - now for the region i mean you guys can
23:10 - select i'm gonna go united states
23:13 - okay
23:14 - and then we need to add an application
23:16 - to this so to do that we're gonna go to
23:19 - resources we're gonna go to add-ons and
23:21 - we're going to click on find more
23:23 - add-ons and it's going to bring us to a
23:25 - page that looks like this we are going
23:27 - to search for postgres which is the
23:29 - database that we're going to use hit
23:31 - enter and we should see heroku postgres
23:34 - so that's what we want
23:35 - we're going to install this
23:38 - and now what we need to do
23:40 - is select our plan in this case it's
23:43 - going to be hobby dev free i mean you
23:45 - could pay for this if you want but we're
23:46 - just going to use the free plan search
23:48 - for an app to provision so we need to
23:50 - select the one that we just created
23:52 - django tutorial1234
23:54 - and then just submit the order form and
23:56 - what this will do is add this resource
23:58 - to our application okay so let's hit
24:00 - submit
24:02 - give this a second
24:04 - and there we go okay so it has been
24:06 - installed and now what i can do is click
24:08 - on roku postgres like this it's going to
24:10 - bring me to kind of the database view i
24:13 - guess
24:14 - and not found okay there we are
24:17 - everything is good so we have a database
24:18 - we have a maximum size i think of like
24:21 - 100 megabytes or one gigabyte or
24:23 - something like that again for testing
24:24 - purposes this will be more than enough
24:26 - now what we want to do here is go to
24:28 - settings
24:29 - and we want to click on database
24:30 - credentials now obviously you don't want
24:32 - to share this with anyone else but we're
24:34 - going to use these database credentials
24:35 - to connect to our database from django
24:38 - without having to do any major
24:39 - modifications
24:41 - inside of jenk so let me put this on the
24:43 - right side of my screen
24:44 - let's get this not in full screen mode
24:46 - and put this on the left
24:48 - now what we want to do is make it so
24:50 - that all of our data is not stored in
24:52 - this you know local database on our
24:53 - computer but again it's stored in heroku
24:55 - then we can access it from other places
24:57 - as well so we're going to go to
24:58 - settings.pi
25:00 - and let me just make this a little bit
25:02 - easier to read let's move that down and
25:04 - we need to add something uh let me just
25:07 - scroll through here and try to find this
25:09 - okay so where it says databases this is
25:11 - what we want to modify so that rather
25:13 - than connecting to our local sqlite
25:15 - database using our base directory we're
25:17 - going to connect to the database that is
25:20 - hosted on heroic so let's change
25:23 - this engine here first of all to be
25:27 - dot django.db.backends.com then this is
25:28 - going to be postgres like that and then
25:32 - ql okay because that's the type of
25:34 - database that we have then for the name
25:36 - of the database that's going to be the
25:37 - name that we have here from the
25:38 - credentials so let's copy that in the
25:41 - string okay then we need to pass our
25:43 - username password host and port so we're
25:46 - going to type
25:47 - user in all capitals and this is going
25:50 - to be the user that we have here so
25:52 - let's copy our user
25:53 - put that in the string
25:55 - okay next we need to have our password
25:58 - so let's go
25:59 - password like that and the password is
26:01 - going to be the password that we have
26:03 - here okay so let's paste that in
26:06 - uh continuing
26:08 - we need to have the port and the host so
26:11 - the host
26:13 - is going to be whatever host it says
26:14 - here so we're going to copy that
26:17 - okay
26:18 - and then lastly we want to have the port
26:21 - now this port should be the same for
26:23 - everyone but it's going to be five four
26:25 - three two
26:26 - and that needs to go into string as well
26:29 - okay so now that we've done that believe
26:30 - it or not that's pretty much all we need
26:33 - to have this connect to the um the
26:36 - postgres database that we have hosted
26:37 - remotely we don't actually really need
26:39 - to change anything else there may be one
26:41 - thing we need to install but we'll test
26:42 - that out in a second so what we can do
26:44 - now to make sure this is working is we
26:46 - can go to our command line and we're
26:49 - going to use manage.pi just to update
26:51 - the database here on postgres and then
26:53 - we can check here and see if it worked
26:55 - so we're going to type the following
26:56 - command it's going to be python
26:58 - manage.pi and then we're going to type
27:00 - migrate and what this will do is apply
27:02 - all of the changes in our database to
27:05 - now our new database which is hosted on
27:06 - postgres so python managed up pi migrate
27:08 - let me see if i can make this a little
27:10 - bit bigger so you guys can read this
27:12 - okay that's better python managed pi
27:14 - migrate this will take a second and then
27:17 - assuming this command runs fine for you
27:19 - that means that everything is all good
27:21 - and you have connected to the correct
27:23 - remote database now if that didn't work
27:25 - for you you can try installing the
27:28 - following library because i had to do
27:29 - this previously
27:31 - pip install and then this is
27:33 - cop g2 binary for some reason i had to
27:37 - install this previously when i was
27:38 - messing around with this so if that
27:39 - doesn't work try installing this and
27:41 - hopefully that should fix it for you if
27:44 - that doesn't work i'm not exactly sure
27:45 - what the problem is but this should be
27:47 - good okay so now that we have that let
27:49 - me just refresh the page over here and
27:52 - we should see that some data has been
27:53 - added to this database and notice we've
27:55 - gone from zero rows to 48 rows and we
27:57 - have a maximum of 10 000 that we can use
27:59 - and our database size is 8.6 megabytes
28:01 - so that's good that means all the tables
28:03 - that we need have been created
28:04 - successfully and now our database is
28:06 - hosted remotely on postgres so now that
28:09 - we've done that we're going to start
28:10 - setting up a retool application that
28:12 - allows us to view this database and view
28:14 - all the different tables then of course
28:16 - we'll go through all the authentication
28:18 - as i was talking about before so we're
28:20 - going to go to the retool website here
28:22 - so retool.com
28:24 - make a new account again this is
28:25 - completely free you don't have to pay
28:26 - for it or sign in if you already have
28:28 - one i'm going to sign into my account
28:30 - and notice i have a bunch of apps here
28:32 - so i'm going to create a new application
28:34 - i'm just going to make a blank app but
28:36 - you could make this from one of the
28:37 - default ones and we'll go django
28:40 - tutorial like that
28:41 - as my application name okay so i'm
28:44 - brought here now to retool so let me
28:46 - just give you a quick demo of how this
28:48 - works and how we connect to a database
28:50 - and all that kind of stuff so you
28:51 - understand kind of the power of this
28:53 - application so what we can do here is
28:55 - drag and drop different components
28:57 - directly into the app right now it's
28:58 - just showing me some sample data but i
29:01 - can you know modify this i can make it
29:03 - larger i can make it smaller and i can
29:04 - view all of the stuff related to it on
29:06 - the right hand side of my screen so
29:07 - there's stuff like event handlers
29:09 - pagination i can select the different
29:11 - columns i can select the data that i
29:13 - want to use and what retool allows you
29:15 - to do is connect to a bunch of different
29:17 - data sources so if i go down here you
29:19 - can see that i have some sources i've
29:21 - already connected to like a django
29:22 - database github history a managed
29:24 - database that i have but we can also add
29:26 - our own resources here and view multiple
29:29 - resources in the same place so that's
29:30 - what makes this really powerful is that
29:32 - i can connect to a ton of different data
29:33 - sources and then aggregate those data
29:35 - sources together and view them all in
29:37 - one place so let's start by making a new
29:40 - resource here in retool because we need
29:42 - to connect to our database and view
29:44 - information about our different users
29:46 - and tables and all that kind of stuff
29:48 - so just in case you don't see this you
29:50 - can toggle the bottom panel using these
29:52 - buttons or the left panel and the right
29:53 - panel as well but click here where it
29:55 - says resource you should have a default
29:57 - query for some reason you don't have
29:58 - that you can make a new query and go to
30:00 - where the resource is and just hit
30:02 - create new resource and we're going to
30:04 - select postgres because that's the
30:05 - resource we want of course there's a ton
30:07 - of different ones that you could connect
30:08 - to so let's go here and now we need to
30:10 - copy that information from the
30:11 - credentials page again into here so i
30:14 - won't bore you with doing that let me
30:15 - grab all that data then i'll be right
30:17 - back all right so i've added all of that
30:18 - data again you can find that from the
30:20 - credentials tab on heroku
30:22 - now just make sure you check connect
30:24 - using ssl you don't have to modify this
30:25 - but you need ssl otherwise this isn't
30:28 - going to work and actually let me have a
30:29 - look at this right here
30:31 - we are not going to check that we don't
30:33 - need the self-signed certificate that's
30:34 - fine for now though for the name of this
30:36 - we can call this whatever we want i'll
30:38 - just call this django tutorial
30:40 - okay as our resource all right so let me
30:42 - create this resource here
30:44 - and now
30:46 - what we should be able to do is actually
30:48 - send queries just regular sql queries to
30:50 - this and view that data so what i'm
30:52 - going to do here is just write a query
30:54 - that allows me to view all of the
30:56 - default tables that we have in our
30:58 - database just to get a sense of how this
31:00 - works and then we'll come back to this
31:01 - tool later on so for now i'm going to
31:03 - type select star
31:05 - from and then i want to select this from
31:08 - the pg underscore and then this is
31:10 - catalog
31:12 - i don't know if i spelled that correctly
31:14 - i think that's fine and then dot pg
31:16 - underscored tables and this will give
31:18 - you all of the tables that are in the
31:20 - database so let's just run this save and
31:23 - run and when i do that i should get a
31:25 - preview password authentication failed
31:28 - okay so let me just edit this resource
31:30 - because i guess the password i put in is
31:32 - wrong all right so i just updated the
31:33 - password looks like i just made a
31:34 - mistake there when i was typing in let's
31:36 - rerun this though and now you'll see
31:38 - that we actually get some data so let me
31:40 - make this a bit larger so that we can
31:41 - view this you can ignore this warning we
31:43 - don't need that oh we don't need to
31:44 - worry about that for right now i notice
31:45 - we can view all of the different tables
31:47 - that are by default going to be added
31:50 - into our uh what do you call it postgres
31:52 - database so we have django migrations
31:54 - django content type auth permission auth
31:56 - group auth group permissions pg type off
31:59 - user these are just by default in django
32:02 - in the database and then of course if we
32:03 - create our own models uh those will be
32:06 - added here as well
32:07 - anyways that is what i wanted to show
32:08 - you for now we also can make it so that
32:11 - this table shows us all of that if we
32:13 - want so to do that i would just click on
32:15 - this table here
32:16 - it's called table 1. i can say you know
32:19 - tables because we're going to view all
32:20 - the tables and for the data i can remove
32:23 - this
32:24 - and i can actually instead reference the
32:26 - value of this query now the way i
32:28 - reference the value of the query is i
32:29 - put this inside of two sets of curly
32:32 - braces and i type in the name which is
32:34 - going to be get tables.data
32:36 - so now it's accessing this query that we
32:39 - wrote here and i can just view all of
32:41 - the data that i'm viewing down here
32:42 - inside of this table so just a demo
32:44 - there of how easy it is to actually use
32:46 - retool to visualize some data okay
32:49 - anyways now that we have that let's
32:50 - leave that page open
32:52 - we don't need to look at it right now
32:54 - let's set up the authentication and then
32:57 - we can come back here and we can view
32:58 - all the users and stuff that's being
33:00 - created in our database okay so let's go
33:02 - back to vs code uh we can get out of
33:05 - settings for now
33:07 - and we can now go to actually where do
33:10 - we want to do this so sorry for the bit
33:12 - of confusion here i'm just trying to
33:14 - think what order i want to do this in
33:15 - because there's many different ways to
33:16 - go about doing this
33:18 - let's actually get it out of views my
33:20 - apologies let's go to urls.pi here
33:23 - for our website so what i need to add
33:25 - here is a path this is just going to be
33:27 - an empty path again and then this is
33:29 - going to be include and we're going to
33:31 - include django dot and then contrib
33:35 - dot auth dot urls now these are a bunch
33:38 - of pre-built urls that will actually
33:40 - automatically do things like login log
33:44 - out password reset uh there's a bunch
33:46 - inside of here and all you need to do to
33:49 - allow these to work is to write the
33:52 - forms for them or to write sorry the
33:53 - html templates for them so that's why i
33:56 - said we had to make this registration
33:57 - folder inside of templates because now
33:59 - what i can do is make a template called
34:02 - login.html i don't have to manually
34:04 - render this template what will happen is
34:06 - that the login route that's provided by
34:09 - django will automatically render this
34:11 - login page whenever i go to the slash
34:15 - login url hopefully this makes a tiny
34:17 - bit of sense but these are kind of
34:18 - pre-written urls or routes and they will
34:21 - render specific templates that have
34:22 - specific names now those templates need
34:25 - to be inside of the registration folder
34:27 - and they need to have whatever the
34:28 - corresponding name is of the url so
34:30 - login is one of them but you can also
34:32 - override like the forbidden template you
34:34 - can override password reset you can
34:36 - override a bunch of them i just want to
34:38 - override the login one though and i'll
34:40 - show you again how this works so let's
34:42 - go into login and what we're going to do
34:45 - is type extends
34:47 - and we're going to extend from the main
34:50 - slash and let's just make these single
34:52 - quotes to be consistent
34:53 - and then this is going to be based.html
34:56 - okay we want to extend that template we
34:57 - then want to override our two blocks so
34:59 - we're going to say percent percent block
35:01 - title
35:02 - let's end our block
35:04 - uh percent percent and
35:07 - block okay and let me just copy this and
35:09 - we'll do the same with content
35:11 - okay block
35:13 - content like that for the title we'll
35:16 - say log in and then for the content
35:17 - we're going to have a few more things
35:19 - now above the content i also need to
35:21 - write a another tag here and this is
35:23 - going to say load and we're going to
35:25 - load the crispy underscore form
35:27 - underscore tags like that and actually
35:30 - it's going to be crispy forms tags now
35:32 - this is going to allow us to get access
35:34 - to the following two tags uh the tags
35:37 - that we need are the percent percent
35:39 - crsf and then underscore token
35:44 - let me just make sure i spelt that right
35:45 - crsf nope cs
35:48 - cs and then rf token okay
35:52 - and then we need one more and this is
35:53 - going to be
35:55 - form and then we're going to pipe and
35:57 - we're going to put crispy okay
36:00 - let me just code out a bit of html here
36:02 - and then i'll explain why we need this
36:03 - so we're going to have a form
36:05 - and then we're going to end the form
36:08 - okay so what we're doing here for the
36:09 - login page is we want to display a form
36:12 - that's provided to us by django that's
36:15 - why we wanted to have crispy forms now
36:17 - whenever we have a forum that has an
36:18 - action like post because the method of
36:21 - this form
36:22 - is going to be a post form
36:24 - that means that we need to add the csrf
36:27 - token inside now this token is kind of a
36:29 - security feature i won't explain exactly
36:32 - how it works i'm not an expert on it but
36:34 - essentially whenever you have some type
36:35 - of form that has an action and it's
36:37 - going to be hitting an endpoint on your
36:38 - server you need the csrf underscore
36:41 - token so if you get something saying
36:43 - csrf token missing then add this inside
36:46 - of your form now you don't need to load
36:49 - the crispy form tags to be able to do
36:50 - this at least i'm pretty sure you don't
36:53 - but this part you do need the crispy
36:54 - forms tag loaded for so let me just take
36:56 - a quick pause here and explain what's
36:57 - going on so we have our form it has a
36:59 - method of post but if add another method
37:00 - like delete put whatever it'd be the
37:02 - same thing whenever we have that we need
37:04 - to place the csrf token inside of the
37:07 - form now this is kind of a security
37:09 - feature for django i won't explain it
37:11 - much more than that but if you ever get
37:12 - an error saying you're missing your csrf
37:15 - token it's because you need to embed it
37:17 - inside of every form on the page that's
37:19 - going to be actually interacting with
37:21 - the server or sending a request to it
37:22 - and of course this post is going to do
37:24 - that
37:24 - this form is going to do that because
37:26 - it's a post method
37:27 - then we have form crispy now what this
37:30 - is doing is saying there's going to be a
37:31 - variable here passed to this template
37:34 - called form now form is going to contain
37:37 - like the email address the password
37:40 - anything else that you would need to
37:41 - sign in in this case the form is going
37:42 - to have all of that and we put this
37:44 - little pipe here which i believe in
37:46 - django actually stands for filter uh and
37:49 - then we put crispy now what that means
37:51 - is we are going to use crispy forms to
37:53 - display this form that's essentially
37:55 - what's going on now in case you're
37:56 - unfamiliar with this whenever you want
37:57 - to embed a variable inside of your
37:59 - template
38:00 - you do it with two curly braces like
38:02 - this so that's why we're writing two
38:04 - curly braces writing form which is a
38:06 - variable and then we're kind of using
38:08 - this crispy i'm gonna call it a filter
38:10 - could be really it's probably called
38:11 - something else but we're gonna use this
38:13 - crispy filter to actually display the
38:15 - form
38:16 - okay that's pretty much all we need i
38:18 - will just add a few other kind of nice
38:20 - touches here so i'm going to add an a
38:23 - tag this is going to have an href
38:26 - equal to and this will be slash sign up
38:30 - and i'm going to say
38:31 - don't have
38:32 - an account question mark and we'll say
38:35 - create one and actually i realized that
38:37 - i've done this kind of wrong this needs
38:39 - to be a p tag
38:40 - and then inside of here we're going to
38:42 - have an a tag
38:43 - and
38:44 - we're going to
38:45 - create one
38:47 - here
38:48 - so that you can create a new account by
38:49 - clicking on that button okay that's good
38:51 - and then lastly we just need a button
38:53 - here and the button is gonna submit the
38:55 - form for us and allow us to log in so
38:57 - i'm gonna say button
38:58 - type is equal to submit for the class
39:01 - we're going to say btn btn success this
39:04 - just makes a green button and then we'll
39:06 - say log in and when you hit that button
39:07 - it will submit the form
39:09 - so i'm going to save this notice it kind
39:10 - of messes everything up right so i've
39:12 - got a
39:13 - change this manually to make sure these
39:14 - are on the same line let's save without
39:17 - formatting and now the login
39:20 - template has been created okay so pause
39:22 - the video if you need to complete that
39:23 - but going back here urls.pi since we've
39:26 - added these urls now you'll see when i
39:28 - go to the login page it will display
39:30 - this template automatically so let's run
39:32 - our server i'm not sure if it's running
39:34 - already it doesn't look like it is
39:37 - okay so python
39:38 - managed up high
39:41 - uh oops let's cd into website first
39:43 - cdn's website
39:45 - python manage dot pi
39:47 - run server
39:49 - okay
39:50 - and the file name directory or label is
39:53 - incorrect
39:55 - okay let me have a look here and see
39:57 - what's wrong okay so i'm just searching
39:59 - around for that problem kind of a weird
40:01 - error first of all go to your
40:02 - settings.pi and under your installed
40:05 - applications just drag in these two
40:07 - lines here or i guess type them in
40:09 - crispy allowed template packs and crispy
40:11 - template pack this just makes it so
40:12 - we're going to use bootstrap 5 as the
40:14 - default templates okay so drag those in
40:17 - you might not need to add those but for
40:18 - me at least i needed to add those and
40:21 - then what i'm going to do is rerun my
40:23 - server so python manage.pi
40:26 - run server and everything should be good
40:29 - now when you guys ran your server it may
40:30 - have worked for you um i had some other
40:32 - problem that i've fixed it's not really
40:34 - relevant to you it's just in my
40:35 - environment i was running a virtual
40:37 - environment that didn't have bootstrap 5
40:39 - crispy template pack installed or
40:41 - whatever so i had to deactivate that
40:43 - anyways though now
40:45 - let's see what happens if we go back
40:47 - here we refresh
40:49 - and we go to slash login now when i go
40:52 - there notice it brings me to a login
40:54 - page so we have our login right we have
40:58 - this that we've added don't have an
40:59 - account create one here and then we have
41:01 - the login button and the form is
41:02 - automatically generated for us now you
41:04 - can customize this form if you want but
41:06 - i'm not going to do that in this video
41:08 - this is just kind of the default login
41:10 - form that django will provide you all
41:12 - right so now that we have all that
41:14 - this will actually handle signing in a
41:17 - user for us automatically so we don't
41:18 - need to do that manually and once you
41:20 - have users created you can go to login
41:23 - sign in with them and again that will be
41:24 - handled for you now a few other things
41:26 - we want to add here so go to our
41:28 - settings.pi go to the very bottom so
41:30 - just put inside of here two variables
41:33 - first login redirect url so this is
41:35 - where you want to go after you log in so
41:37 - i want to go to the slash home page
41:39 - after i log in and then we're going to
41:41 - change this to be the log out redirect
41:43 - url and where do you want to go when you
41:45 - log out
41:46 - well i want to go to slash login okay so
41:49 - you can change dynamically where you're
41:51 - going to be placed when you log in and
41:53 - log out and then we just want to add a
41:55 - root for slash home now so let's go to
41:57 - urls.pi and let's just add another path
42:01 - and let's just make this home
42:03 - okay so now if you go to home it will
42:05 - bring you to the same page as when you
42:07 - go to the empty root
42:09 - okay let's save
42:11 - let's what's it saying login is not
42:12 - defined we go to settings.pi
42:15 - i think we're fine let's rerun this
42:18 - everything should be good okay
42:20 - so now let's just have a look at
42:21 - something if i go here
42:23 - and i go slash
42:24 - log out notice it redirects me to the
42:27 - login page so i wasn't logged in so
42:29 - obviously it didn't need to do anything
42:30 - but when you go to log out it would log
42:32 - you out and then bring you back to the
42:33 - login page
42:35 - okay so now that we have done all of
42:36 - that we need to be able to create user
42:38 - accounts so to create user accounts we
42:41 - actually need to set up the route for
42:42 - that ourself so we're going to make a
42:45 - new template here inside of registration
42:47 - and this is going to be called sign
42:49 - underscore up dot html and we'll copy
42:52 - everything that we have from login and
42:54 - just place that into the sign up we'll
42:57 - just change this slightly
42:58 - so for sign up we just want to make it
43:01 - so that rather than having login we have
43:04 - register
43:05 - okay
43:06 - and then rather than don't have an
43:08 - account we're going to say have an
43:10 - account question mark and then we'll say
43:13 - log in
43:14 - log in here and then we'll change this
43:16 - to slash
43:17 - log
43:18 - okay uh for the page we'll do
43:21 - sign up and i mean i guess you can make
43:22 - this sign up as well i'm just going to
43:23 - make it register and that's actually all
43:25 - we need for the sign up page
43:27 - okay so let's save that
43:29 - all right so we now have sign up and we
43:30 - have login we now need to go to our
43:33 - views
43:34 - and we need to make a view here for sign
43:37 - up we actually have to write this
43:38 - ourselves so i'm going to say define
43:40 - sign up
43:41 - we're going to take in a request
43:43 - and since when we go to this page let's
43:45 - have a look here we have a form that has
43:47 - a method of post so that means when we
43:49 - go to the page what we want to happen is
43:51 - if we're having a get request we want to
43:53 - render the page so show the html
43:56 - but if we have a post request we want to
43:59 - read the data from the form and create a
44:01 - new account so we have to handle that
44:02 - here so i'm going to say if
44:04 - the request
44:06 - dot and then this is going to be method
44:08 - is equal to post then we're going to say
44:11 - form is equal to and this is going to be
44:14 - register form we're going to write this
44:16 - form in one second but we're going to
44:18 - pass to this the request.postdata
44:20 - okay now otherwise we're going to say
44:23 - form is equal to register form like that
44:26 - and we're going to say return render
44:28 - request we're going to render
44:30 - registration like that slash and then
44:33 - this is going to be signup.html
44:36 - and we're going to pass to this a form
44:39 - which is equal to our form variable now
44:42 - again i know a lot of this seems
44:43 - confusing if you haven't seen this
44:44 - before what we're going to do is create
44:46 - a register form now when you create
44:49 - these forms what that allows you to do
44:50 - is pass post data to them and then they
44:53 - can automatically validate the data for
44:55 - you and you can simply render the form
44:58 - using this kind of uh you know filter
45:00 - again it's probably not a filter but
45:01 - that's what i'm calling it uh inside of
45:03 - a template so now let's create the form
45:05 - and then this will make more sense so
45:06 - inside of main we're going to make a new
45:08 - file here it's going to be called
45:09 - forms.pi
45:11 - and we're going to make the registration
45:13 - form
45:14 - so the way that we do this is we say
45:16 - from
45:17 - django
45:19 - import and then we're going to import
45:22 - forms like that and then we're going to
45:24 - actually extend the user creation form
45:27 - which is the default form from django so
45:29 - i'm going to say from
45:30 - django dot contrib
45:33 - dot and then this is going to be auth
45:35 - and this is not forum this is
45:37 - from django.contrib.off dot forms i want
45:41 - to import the user creation field so
45:44 - user creation sorry form like that and
45:47 - then i'm going to say from
45:49 - django
45:50 - dot and then this is going to be
45:52 - actually contrib and then dot auth dot
45:55 - models i also want to import the user
45:57 - model okay so i'm going to say class
46:00 - registration form this is going to be
46:04 - uh user creation form like that i'm
46:06 - going to say email is equal to forms dot
46:08 - email field i'm going to say required
46:10 - equals true
46:12 - i'm going to say class meta i'm going to
46:14 - say the model is equal to user and then
46:17 - the fields is equal to and i'm going to
46:19 - list all of the fields that i want to be
46:21 - required uh when we sign in so i'm going
46:23 - to say username
46:24 - email and sorry not sign in this is
46:26 - create an account password1
46:29 - and password2 okay i know i just went
46:31 - through a lot and didn't really explain
46:32 - it but i'm importing forms importing the
46:34 - user creation form which is the default
46:36 - form provided from django for creating
46:39 - new user i'm then importing the user and
46:41 - user is well where we're going to store
46:43 - different users so this is already built
46:45 - into django we don't have to make a user
46:46 - model it has one for us and all i'm
46:49 - doing here is adding a form to the
46:51 - default user creation form called email
46:54 - because i want this form to show kind of
46:56 - you know custom stuff i want it to show
46:58 - the username the email password1 and
47:00 - password2 and by default there's not an
47:02 - email so i have to add that in here by
47:04 - making this custom form so i'm saying
47:06 - okay we're having a registration form
47:08 - overriding or extending the user
47:09 - creation form inheriting from it we then
47:12 - have our email field which we're adding
47:14 - then what class meta is doing inside of
47:15 - here is saying okay well what are we
47:17 - creating with this form we're creating a
47:18 - user and the fields that we want to have
47:21 - from the user model our username email
47:24 - password1 and password2
47:26 - hopefully this makes a little bit of
47:27 - sense i can't really explain it much
47:29 - more than that feel free to read the
47:30 - django documentation for a more in-depth
47:32 - explanation again just extending this
47:34 - form adding the email field and now we
47:37 - can have our custom signup page and if
47:38 - you wanted to require more information
47:40 - here you can add different fields so you
47:42 - could add i don't know maybe a birth
47:44 - date or something right and then you
47:45 - would just add that into fields here and
47:47 - then you'd have to fill in all of that
47:48 - when you're creating a user and it will
47:50 - automatically be added to the user model
47:52 - okay so let's go to signup.html or sorry
47:55 - views dot pi and now we are going to
47:58 - import this registration form so we're
48:01 - going to say from and this will be dot
48:04 - and then forms
48:06 - import and we're gonna import the
48:08 - register and i called it registration
48:10 - let's just call this register and we can
48:12 - change it here to be register form
48:16 - okay and now we're gonna use this form
48:18 - so in views what we're saying is okay if
48:20 - we have a post request then we're going
48:22 - to fill the register form with whatever
48:25 - the data was that's in the form that we
48:27 - displayed if it's not a post request so
48:29 - if it's a get request then we're going
48:30 - to create a form that's empty that
48:32 - doesn't have any data and we're going to
48:34 - render that as the form
48:36 - hopefully you guys are following let's
48:37 - go back here though
48:39 - let's now go to actually i forgot we
48:41 - need to go to urls and we need to create
48:43 - the signup route so now in urls
48:47 - let's paste in another path let's call
48:49 - this sign up and now instead of use dot
48:52 - home this is going to be views dot sign
48:54 - up and the name will be
48:56 - sign up
48:58 - okay
48:59 - i think that is good now we can go back
49:01 - to our browser and we should be able to
49:03 - just go to sign up so sign up like that
49:06 - and there you go now it brings us to
49:08 - this page so we have username we have an
49:09 - email we have a password and we have our
49:11 - password confirmation and again notice
49:13 - this entire form is built for us we did
49:15 - not have to make this ourself quite nice
49:17 - then if we go log in bring this login
49:18 - page go sign up brings us to the signup
49:20 - page all right so now the form is
49:22 - displaying nicely what we want to do is
49:25 - actually handle what happens when we hit
49:26 - this button so it will validate the form
49:29 - for us but the thing is we want to send
49:31 - a post request and then in the post
49:32 - request we need to create a new user
49:34 - because right now all we're doing is
49:36 - we're just getting the form right we're
49:38 - not actually creating a new user so we
49:40 - need to make a user so to make a user
49:41 - we're going to say the following we're
49:43 - going to say if
49:44 - form dot is and then it's going to be
49:47 - valid
49:48 - so there's actually a method on the form
49:50 - that will validate this form is indeed
49:51 - correct then what i want to do is say
49:53 - user
49:54 - is equal to form dot save okay then what
49:58 - i can do is log in the user now
50:02 - to log in the user we need to import
50:03 - this so we're going to say from and then
50:05 - this is going to be django.contrib.off
50:09 - import and we're going to import login
50:12 - and while we're out add it we can import
50:14 - log out and then authenticate and i'll
50:17 - just show you how we use these slides
50:19 - later on okay so we have a login
50:20 - function log out function and
50:22 - authenticate and now if i go here after
50:25 - i create my user
50:27 - what i can do is the following i can log
50:29 - in my user so i can say log in i can
50:32 - pass my request and i can pass my user
50:35 - so that's as easy as it is to create a
50:36 - new user again we overrode the form
50:39 - right for the user creation form inside
50:41 - of here when we send a post request so
50:43 - from the form on the html we are going
50:45 - to
50:46 - populate the form using whatever the
50:48 - data was
50:49 - we're going to say if form is valid then
50:51 - we will save the user and we will log in
50:54 - okay so now that we have that let me
50:56 - just import
50:58 - redirect and i actually want to redirect
51:00 - the user here so i'm going to return a
51:02 - redirect okay and i don't want url4 i
51:06 - just want to have a redirect to
51:09 - and let's go slash
51:12 - so now they'll just redirect us to the
51:13 - slash home page and i think that should
51:15 - be good for the sign up view
51:18 - so let's now go back here and let's try
51:20 - to sign up so let's refresh the page
51:23 - okay let's go username tim let's go
51:25 - email tim gmail.com
51:28 - let's type in a password let's
51:30 - intentionally mistype the password and
51:33 - then notice it tells me hey the two
51:34 - password fields don't match so it
51:35 - automatically does that for us i don't
51:37 - have to handle that okay let's now type
51:39 - it correctly and let's hit register and
51:42 - when i do that it brings me to the home
51:44 - page because i've now signed it now i'll
51:46 - show you how we check who's signed in
51:48 - but now what we can do is go to retool
51:50 - and we can try to have a look at all of
51:52 - our different users and see if that was
51:54 - actually created correctly so notice
51:56 - here that we have we look at the
51:58 - different tables let's actually search
52:00 - them by table name we have auth group
52:02 - auth permissions auth permission auth
52:04 - user now auth user is what actually
52:06 - contains our different users
52:07 - so what i can do now is just make a
52:09 - request or make a query to the auth user
52:12 - table and view all of the users in that
52:14 - table so if i make a new query here
52:17 - resource query
52:18 - let's call this
52:20 - let's say get
52:22 - underscore users
52:24 - then i can say
52:25 - select asterisks from and then auth
52:29 - underscore user
52:30 - and let's save and run that
52:33 - and notice that i have an id1 i have my
52:35 - password hash i have my login is super
52:38 - user i have the username tim and i have
52:40 - the email and all of the other data like
52:41 - first name last name we didn't populate
52:43 - that but if we wanted to add that to the
52:45 - form we could have
52:46 - and now if i want to view that in a
52:47 - table here let's just drag a table in
52:50 - okay and it actually automatically threw
52:52 - in my getusers.data for me so now i can
52:54 - view my users really easily
52:56 - there you go we now see that user has
52:58 - been created so now let's actually log
53:02 - this user out so let's go log out so now
53:04 - that i've logged out let's just try to
53:06 - log in let's go tim
53:08 - and log in and notice that works fine
53:10 - brings me to the homepage now let's see
53:12 - what happens if i try to log in as tim12
53:14 - notice says please enter a correct
53:16 - username and password it automatically
53:17 - populates a message on the screen so at
53:20 - this point i have actually showed you
53:21 - how to login users sign up new users
53:24 - and the basic authentication system of
53:26 - django you can see all this stuff is
53:28 - built in like we don't have to write a
53:29 - lot of this and you can go in and
53:31 - customize it but for most websites this
53:33 - is going to be pretty much all that you
53:34 - need so i just want to quickly recap you
53:36 - because that was kind of an important
53:37 - section and i know there's a lot of
53:39 - stuff that we went through here so we
53:40 - started buying urls.pi adding this auth
53:44 - urls right now when we add that it gives
53:46 - us a bunch of pre-built urls that we can
53:48 - use
53:49 - then what we did is we created a login
53:50 - and signup form now in the login and
53:53 - signup form we're using the crispy forms
53:56 - kind of module to allow us to just
53:58 - display a form that's passed to this
54:01 - template so when we went to views for
54:03 - example and we had sign up we passed
54:04 - this variable form and we are able to
54:07 - display that entire form using the
54:09 - crispy form tags in our template
54:11 - then
54:12 - for login for example
54:14 - the root for this is already created so
54:16 - when we go to login it just displays
54:17 - this form and then all of the
54:19 - authentication is handled so it will
54:20 - automatically authenticate us
54:22 - automatically log us in we don't have to
54:24 - handle that again you can hook into that
54:26 - and customize the behavior all you have
54:27 - to do is create a form add your csrf
54:30 - token do something like this and then
54:32 - you can customize it how you like and
54:34 - add a button here to submit the form
54:37 - okay continuing if we go back to
54:39 - views.pi we need to manually handle the
54:41 - signup form just because we want to
54:43 - display our own form right so we created
54:45 - a register form so if we go to forms we
54:48 - have the register form overriding the
54:49 - user creation form we've added email
54:51 - because that's not by default in the
54:53 - registration form and we could have also
54:56 - added first name and last name so if i
54:58 - want to show that to you i could do
54:59 - something like first name is equal to
55:01 - forms dot and then we can just make this
55:03 - a char field and say required equals
55:05 - true and then for another form that we
55:08 - want to show or another field we want to
55:09 - show we just put first name and now
55:12 - if i go back here
55:14 - and i go to
55:16 - this notice the first name field's
55:18 - automatically added right so of course i
55:19 - could add the last name field as well i
55:21 - don't really need to do that it's fine
55:22 - and i don't actually want the first name
55:23 - field so let's remove it but i just want
55:25 - to show you that you can add your own
55:26 - custom fields on there
55:28 - for the user model and you can kind of
55:30 - customize it as you please
55:31 - and yeah that's pretty much it uh from
55:35 - views we also had login and we've saved
55:37 - the form we validated the form but
55:38 - that's how you handle authentication now
55:41 - the logout route is already written so
55:42 - when you go to slash logout it logs you
55:44 - out now though what i want to show you
55:46 - is how we view the current user that's
55:48 - signed in how we get their username how
55:51 - we display that for example on the nav
55:53 - bar so let's do that to do that we're
55:56 - going to go to our base template so
55:58 - let's go to base and in this second part
56:01 - of the navbar here where it just says
56:02 - login i'm now going to write a little
56:04 - bit of logic that will show a different
56:06 - thing if the user is already logged in
56:08 - so we'll show log out if they're not
56:09 - logged in
56:10 - and it will show
56:12 - what is it the username as well as
56:15 - log out if they already are assigned it
56:17 - so for now i'm going to say
56:18 - percent percent i'm going to write an if
56:20 - statement which you can do here inside
56:22 - of jenga i'm going to say if user dot is
56:24 - authenticated then i don't want to show
56:27 - login right
56:28 - so we're gonna put
56:30 - for some percent else here and then
56:32 - we're gonna have percent percent and
56:34 - block
56:36 - okay
56:36 - we're gonna copy this li tag
56:39 - we're gonna put it here except we're
56:41 - gonna say log out
56:42 - and we're going to have slash
56:45 - log out as the link so now we have log
56:48 - out but i also want to display the name
56:49 - of the user so to do that i'm going to
56:52 - say span
56:53 - and this is going to say class is equal
56:55 - to and i'm just going to put this as
56:58 - navbar text
57:00 - i'm going to end our span tag here
57:03 - and i'm going to say logged in as
57:07 - and i'm going to say user
57:09 - dot
57:10 - and then username like that okay and
57:12 - then i'm just going to put a pipe here
57:14 - just so it separates this li tag because
57:16 - these are going to be on the same line
57:18 - okay so now
57:19 - let me save this and let's quickly talk
57:21 - about what we did so user is a variable
57:23 - that's accessible to a template no
57:25 - matter what so we don't have to manually
57:27 - pass this to the template it can always
57:29 - access this user variable so i can check
57:31 - if the user is authenticated now if the
57:34 - user is not authenticated of course this
57:35 - is false and that means that we will
57:38 - show this right we'll just show login
57:40 - now if the user is authenticated we're
57:41 - going to show logged in as and then
57:42 - whatever their username is so you can
57:44 - just access the username and then we'll
57:46 - show log out and it'll bring it to the
57:48 - logout url so pretty straightforward but
57:50 - inside a template you can use something
57:51 - like is authenticated you can also use
57:53 - stuff like is super user has permission
57:56 - i'll show you that in a minute for now
57:58 - though let's go back here
58:00 - and let's refresh
58:02 - and we got an error here it said n block
58:04 - expected and if sorry so when i have end
58:06 - block here just need to change this to
58:08 - end if that's how you add an if
58:10 - statement let me save
58:12 - let's go back and refresh
58:14 - and notice this as i'm logged in as tim
58:16 - if i log out now it shows log in brings
58:18 - me to the login page try to sign in as
58:20 - this guy incorrect so let's change this
58:22 - to tim
58:23 - login and then it says logged in as tim
58:26 - and then i have the logout button okay
58:29 - so our authentication is pretty much
58:30 - handled now we want to start dealing
58:32 - with user permissions and allowing
58:35 - specific users to create posts so
58:37 - actually we'll do creating posts first
58:38 - and then we'll deal with the different
58:39 - permissions so i was just editing this
58:41 - video and watching it back and realized
58:43 - that i missed something in here so i
58:45 - want to jump in and add it so here is
58:47 - the documentation for using the django
58:49 - authentication model method whatever
58:52 - there's a lot of stuff in here i'll link
58:53 - this in the description
58:55 - but it's very thorough and it goes
58:57 - through how you authenticate users how
58:58 - you do permissions i'm going to show you
59:00 - a bunch of this stuff but obviously i
59:01 - can't cover the entire documentation
59:04 - so please reference this if there's
59:05 - something in this tutorial that you're
59:07 - missing or i guess something i didn't
59:08 - cover that you need
59:10 - anyways with that said if i keep
59:11 - scrolling down here it says using the
59:14 - views okay so django provides several
59:16 - views that you can use for login logout
59:18 - and password management now password
59:21 - management is not what i talked about
59:23 - and that's what i wanted to quickly
59:24 - mention here so when you include the
59:26 - urls which we did you get all of these
59:28 - urls
59:29 - login logout password change password
59:31 - change password reset password reset
59:33 - reset reset done
59:35 - and i want to show you
59:36 - that if we go here we have some views
59:39 - that are already built
59:41 - for example
59:42 - password reset uh was it password reset
59:45 - it was password underscore reset so if i
59:48 - go to
59:49 - password
59:50 - underscore reset you see it brings us to
59:52 - this page here where i'm actually able
59:54 - to reset my password now there's also
59:56 - password change
59:58 - like this
59:59 - so obviously these don't look very good
60:01 - so you can override these views if you
60:03 - want to so just like we overrode the
60:05 - login view by making that login.html
60:08 - template you can make templates that
60:10 - have these names
60:12 - and then it will render those templates
60:14 - and display the form and and all of that
60:16 - so i just wanted to show that to you uh
60:18 - you can continue to read this to see
60:19 - exactly how that works but stuff like
60:21 - password reset uh and password changing
60:24 - is handled by django and again the way
60:27 - you have to do this if you want to
60:28 - override the view is you have to create
60:30 - a template in the registration folder
60:32 - that has the same name as this so
60:34 - password underscore change dot html and
60:37 - then show the form like we did for the
60:40 - login page okay that's all i wanted to
60:42 - add in hopefully that is helpful to you
60:44 - again this will be linked in the
60:45 - description please check it out there's
60:46 - a lot of useful stuff in there alright
60:48 - so i've been a little bit all over the
60:49 - place here because there's a lot of
60:51 - stuff you have to do in multiple
60:52 - different files so hopefully you guys
60:53 - are following along okay again i will
60:56 - remind you all of this code will be
60:57 - available from the description so if you
60:59 - can't get everything down at once which
61:00 - is understandable then please feel free
61:02 - to reference the code there copy and
61:04 - paste what you need of course i'm going
61:06 - to write everything from scratch though
61:07 - because i want you to see exactly how
61:09 - everything is done
61:10 - what we want to do now we've completed
61:12 - the base page is we want to restrict
61:15 - page access and we want to be able to
61:16 - create posts so we can do this in really
61:18 - any order that we'd like but ideally we
61:20 - shouldn't be able to access the home
61:22 - page unless we're signed in and right
61:24 - now we can just go there right if i sign
61:27 - out let's let's go back here let's log
61:29 - out
61:30 - and let's just go
61:31 - to slash it brings me here no problem so
61:33 - ideally i want it to not let me go there
61:35 - if i'm not signed in
61:37 - so how are we going to do that well to
61:39 - do that i can actually use a decorator
61:41 - on top of this function that requires
61:43 - that i'm logged in so we're going to say
61:45 - from django dot
61:48 - contrib
61:50 - if we could spell that right dot auth
61:52 - dot decreators import login required
61:54 - sometimes i swear my autocomplete can
61:56 - hear me because it gives me almost
61:58 - everything that i'm looking for whenever
62:00 - i'm looking for anyways we're gonna do
62:02 - here is put login required
62:04 - and we're gonna put log in underscore
62:05 - url is equal to and then slash login
62:09 - now we just need to do this so that
62:11 - we're telling the decorator where to
62:13 - redirect us if we're not signed it so if
62:16 - we are not logged in it's going to
62:18 - redirect us to this login url okay
62:22 - if you don't have that it will redirect
62:23 - you to something
62:24 - like
62:25 - slash author slash accounts slash login
62:29 - which of course is not the url that
62:31 - we're using
62:32 - okay anyways we have at login required
62:34 - so now that i've added that it's as
62:35 - simple as refreshing here and you'll see
62:37 - that it brings me to login page right so
62:39 - if i try to go to home it just doesn't
62:41 - let me go there it just redirects me
62:43 - over here to the login page perfect so
62:46 - now let's log in let's go tim
62:50 - and notice that i'm able to access the
62:51 - homepage right
62:52 - and if i go slash sign up
62:55 - and then i go slash home
62:59 - i'm still signed in and so i can still
63:00 - view it okay so that's as easy as this
63:02 - to restrict page access
63:04 - for logged-in users now of course if you
63:06 - want only specific users to view
63:08 - specific pages uh that's a bit more
63:10 - challenging but we will look at that
63:11 - later
63:12 - okay so now that we've done that we've
63:14 - seen you know the basics on restricting
63:15 - page access
63:17 - let us have a look at how we can create
63:20 - different posts for users and then only
63:22 - let users who created a specific post
63:25 - delete their own post
63:26 - so let's go to models because we need to
63:29 - make a model here for a post now we're
63:31 - going to make a really simple model
63:34 - and to do this we're going to start by
63:36 - saying from django
63:38 - dot
63:39 - con trib
63:41 - dot auth dot models import user because
63:43 - we need a relationship between posts and
63:46 - users so we know which user made which
63:48 - post so we're going to say class post
63:50 - and this will be
63:52 - models.model and we're going to put in
63:54 - everything that we need so the first
63:55 - thing we need for a post is an author
63:58 - and this author is going to be a user so
64:01 - we're going to have a foreign key that
64:03 - goes to our user model and we're going
64:06 - to have on
64:07 - underscore delete equal to
64:09 - models.cascade now what this is saying
64:11 - is that if the user that's being
64:13 - referenced here is deleted this post
64:15 - will be deleted as well
64:17 - that's all that means if you didn't have
64:19 - this then you would have a bunch of
64:20 - posts inside of your
64:23 - what do you call it database that are
64:25 - linked to authors that were deleted or
64:27 - no longer exist right of course you
64:29 - don't want that so we're adding the on
64:30 - delete
64:31 - okay so that's our author uh now we want
64:34 - to have a title the title is going to be
64:36 - models.char field we can have the max
64:38 - length equal to something like 200
64:41 - we then want a description again this
64:43 - will be a models dot actually we'll go
64:45 - with text field
64:47 - and i will not limit how large this is
64:50 - although you could do that if you want
64:53 - then we want to have two things we want
64:54 - to have created at so i'm going to have
64:55 - a models.datetime field
64:58 - auto now add true yes we want that
65:00 - because whenever you created this we
65:01 - want it to automatically add the time
65:04 - and then we will have an
65:06 - updated at and i'm just going to have
65:08 - auto now and that's going to be equal to
65:10 - true so whenever we update the model it
65:12 - should update this now we're not
65:13 - actually going to make it so you can
65:14 - update the model but just a good field
65:16 - typically to add to your models all
65:18 - right lastly we're just going to add a
65:20 - string method here just so we can view
65:22 - this nicely so we're going to say string
65:24 - and we're going to return the self.title
65:27 - plus and then a backslash n plus and
65:29 - then the self.description just that if
65:32 - we print out a post we're able to view
65:34 - this nicely all right that's it for
65:36 - adding the model uh these different
65:37 - fields you can reference from the django
65:38 - documentation but this is just
65:40 - characters this is text this is the date
65:42 - time i think you guys understand the
65:43 - foreign key is probably the most
65:44 - complicated but this requires that we
65:46 - pass a user object to the post when we
65:48 - make it and then we're kind of linking
65:51 - each one of our posts to a specific
65:53 - author and so we can access like the
65:55 - author's username
65:56 - and all that type of stuff when we view
65:58 - a post okay that's all we need for
66:00 - models
66:01 - now that we have created that model what
66:03 - we can do is just quit here and we're
66:06 - going to run the command python
66:07 - manage.pi
66:09 - and then migrate
66:10 - and this should make a new table now
66:12 - your model and mains have changed
66:14 - they're not your reflected migration
66:15 - okay sorry so first we need to type make
66:18 - migrations so first what we need to do
66:20 - here sorry is make migrations and then
66:22 - once we make the migrations we can
66:24 - migrate so we'll actually apply all of
66:26 - these migrations to the remote database
66:28 - so i'm going to say python manage.pi
66:30 - make migrations the migration is it
66:32 - created the model post okay and then
66:34 - python managed up pi migrate
66:36 - and then that should be good and
66:37 - actually applies it to our database nice
66:40 - okay so now that we've done that let's
66:41 - rerun the server
66:43 - and let's now set up a way to actually
66:45 - make a new post so we have our post
66:47 - model
66:48 - and to make a new post similarly to
66:50 - before we need some form that's going to
66:52 - allow us to do that so i'm going to go
66:54 - to forms and type class and this is
66:57 - going to be the post form
67:00 - now for this form we're going to write
67:02 - it a little bit differently than we did
67:04 - the other one it's going to be
67:07 - forms
67:09 - dot and then this is going to be model
67:10 - form and all we're going to put in here
67:12 - is class meta and we're going to say
67:15 - model is equal to post and then fields
67:18 - these are the fields that we want the
67:19 - user to have to fill in
67:20 - are just going to be the title
67:22 - and the description
67:24 - okay and then we need to import the post
67:26 - model so we're going to say from dot
67:29 - models
67:30 - import post
67:32 - now again what this is going to allow us
67:34 - to do is simply create an instance of
67:35 - this form pass this to a template and
67:38 - then the template will display the form
67:39 - for us that has the title and the
67:41 - description so we'll be able to grab the
67:43 - title and description data and then we
67:45 - can add other things like the author
67:47 - which is required to create a post
67:49 - before we actually manually make the
67:51 - post so now let's go to views.pipe and
67:55 - let's write a view here we're going to
67:56 - say define create underscore post we'll
67:59 - take in request
68:01 - and then again we're going to have a
68:02 - form here on
68:04 - this create post html so we could have
68:06 - the potential method of post being sent
68:09 - to this root so we have post or we have
68:10 - get right so we're going to say if
68:13 - this will be request.method is equal to
68:15 - post then we're going to say form is
68:17 - equal to and this is going to be a post
68:19 - form and we're going to pass the
68:20 - request.postdata so we need to import
68:22 - the post form as well so let's import
68:25 - that from up here
68:26 - then similarly we want to check if the
68:28 - form is valid so we're going to say if
68:30 - the form is valid then what we're going
68:32 - to do is say the post is equal to form
68:34 - dot save but we're going to say commit
68:36 - is equal to false now the reason i'm
68:37 - doing this is because when you save a
68:39 - form as you can see right here it
68:41 - actually will create this entry in the
68:44 - database automatically
68:46 - if the commit is not passed to this so
68:49 - by default commit is equal to true which
68:51 - means when you save the form whatever
68:53 - the model was that the form is connected
68:55 - to so user or post it's going to create
68:57 - that entry in the database so i don't
68:59 - want to create that yet because this oh
69:01 - sorry let's go back here this form is
69:05 - incomplete right i have my description i
69:07 - have my title but i need to add my user
69:09 - to this form as well before i can do
69:11 - that so i have to say post.author is
69:14 - equal to and then this is going to be
69:15 - request.user and this is how you can
69:17 - access the user that's currently signed
69:19 - in request.user
69:20 - okay then we're going to say post.save
69:23 - and when we save the post now it will
69:25 - actually create that in the database
69:27 - which is what we want all right then we
69:29 - can do a return redirect
69:32 - and we will simply redirect to slash
69:35 - home once we make the post
69:37 - now otherwise i guess we don't really
69:39 - need an else because we have actually
69:41 - yes we do need an else we're going to
69:42 - have an else we're going to say
69:45 - form is equal to and this is going to be
69:47 - post form just an empty post form
69:49 - and then we're going to return the
69:51 - render
69:53 - of the request this will be
69:54 - main.createpost we'll make that html in
69:56 - a second and then for the form
69:59 - we'll simply pass our form right so
70:01 - pretty much the exact same thing as
70:02 - signup now for making a post we first
70:04 - want to be logged in right so i'm going
70:06 - to say log in required
70:08 - and then log in underscore url
70:10 - is equal to y let's give me log out this
70:12 - should be login okay
70:14 - so now that we've done that let's just
70:15 - make the createpost.html form now
70:18 - luckily for us we can really just copy
70:20 - the login form
70:22 - or the signup form whatever one we want
70:24 - go new file
70:26 - let's go create underscorepost.html
70:30 - paste that in and let's remove this
70:32 - and rather than log in now we're just
70:34 - going to say
70:35 - post and then the name will be
70:38 - create a post
70:40 - okay nice so let's save that and again
70:42 - that's all we need here because the form
70:44 - that we're passing will automatically
70:45 - handle you know creation deleted
70:47 - deletion all of that type of stuff
70:49 - okay uh function object has an attribute
70:51 - user uh request dot user
70:55 - let me see why we're getting that error
70:57 - okay so i just re-ran the server and
70:58 - everything was good that happens
71:00 - sometimes you just need to manually
71:01 - rerun so i re-ran looks like we're good
71:03 - now
71:04 - let's just give a refresh here and let's
71:07 - go log out now let's try to post uh it
71:10 - says create post not found okay that's a
71:12 - good hint that we need to add the create
71:14 - post url forgot to do that so let's add
71:16 - that let's go here
71:18 - let's just make a new path
71:21 - and this will be create
71:23 - post okay
71:24 - and this will be views dot create post
71:29 - and then the name will be
71:31 - create post
71:33 - okay uh now we have that let's go back
71:37 - let's refresh
71:38 - and notice that it is not allowing me to
71:41 - post because i'm not signed in right so
71:42 - now let's sign in
71:44 - and when i sign in
71:46 - it should bring me to the post page
71:48 - great and i have my title and i have my
71:49 - description and since this is a text
71:51 - field i can expand this make it larger
71:53 - so let's do something like hello world
71:56 - and then hey everyone and this should
71:58 - actually work so let's go post
72:00 - and brings us the homepage now we're not
72:01 - viewing any of the posts right now what
72:03 - we can do is go to retool here and we
72:05 - can now view some of the posts if we'd
72:07 - like to do that so let's
72:09 - write a query that lets us view the post
72:11 - so let me just make that a bit smaller
72:13 - let's write a new query let's call this
72:16 - one
72:17 - go here get underscore posts okay
72:20 - and i'm going to say select asterisks
72:22 - from and actually let me just refresh
72:25 - this here and let's see now if we have a
72:27 - post table
72:29 - and we do it's main post main underscore
72:31 - post is what it's called so let's access
72:33 - the main post
72:35 - so let's go from main
72:36 - underscore post like that let's save and
72:39 - run
72:40 - and we should see that we have post id 1
72:42 - title hello world description created
72:44 - out updated at and then author id is 1.
72:46 - now author id
72:48 - is the id of the user right that created
72:51 - this post and if we go and look at our
72:52 - users we can see this has id one so we
72:55 - created this with uh tim right now we
72:57 - can do a join operation if we want to
73:00 - have information about the author
73:02 - directly on the post but we'll deal with
73:04 - that later i just want to show you that
73:06 - we do indeed have a post
73:07 - and just for
73:09 - easy viewing here let's create another
73:11 - table
73:12 - and there we go we can now view the post
73:14 - data
73:15 - okay so now that we have ability to
73:17 - create a post we want to view the
73:19 - different posts so let's view them on
73:21 - the home page and then we'll make it so
73:23 - you can delete a post but only if you
73:25 - are the owner of that poster if you were
73:27 - the one who created that post all right
73:28 - so let's go to the home page because
73:31 - that's where we want to view the posts
73:33 - and for home here right now we're just
73:36 - rendering a template but let's grab all
73:38 - of the posts and just display all of the
73:39 - posts so to do that i'm going to say
73:41 - from
73:42 - dot models
73:44 - import post
73:46 - and then i can do something like posts
73:48 - is equal to post.objects.all
73:51 - and i'll just give me all the posts that
73:52 - i have so now i can pass that as a
73:54 - variable so i can say posts
73:57 - is equal to the post
73:59 - and that will allow me now to go inside
74:01 - of my home html template and start
74:04 - displaying all of the posts
74:06 - so to do that
74:07 - we're going to have to write a fair
74:09 - amount of html just because i want this
74:11 - to look decently or these i want this to
74:14 - look decently i want this to look decent
74:15 - so i'm going to write a div i'm going to
74:17 - say class is equal to we're going to
74:19 - write a card and this is going to be
74:22 - margin top 2 and let's end the div and i
74:26 - want all of these cards to represent a
74:28 - single post so i'm going to loop through
74:29 - all of the posts the way i can do that
74:31 - is using a for loop directly inside of
74:33 - here so i'm going to say 4
74:34 - and then post in
74:36 - posts like that
74:38 - let's just end the for loop before we
74:39 - forget so
74:41 - this is going to be
74:43 - and four okay so we now have a card for
74:46 - every single post inside of the card i
74:49 - want to have the following i want to
74:51 - have a header so i'm going to have my
74:52 - card header and this is going to contain
74:54 - the name of the user who made this post
74:57 - so not post that title but
74:59 - post.author
75:00 - and this is going to be at and we can
75:02 - actually say post.author
75:05 - and i think i can just type user name or
75:07 - dot author might do it let's do that
75:09 - username for now
75:11 - that will be inside of the cart header
75:13 - okay then we want to have our card body
75:16 - so i'm going to say div
75:18 - class is equal to card and then this
75:20 - will be body and then we also want to
75:22 - have this be a display flex a flex row
75:25 - and we want to justify content between
75:29 - and what this will do is push content to
75:30 - the left and right hand side of the card
75:33 - you'll see why we need this in a second
75:34 - but it's for adding some buttons and
75:36 - having them being floating on the right
75:38 - hand side anyways inside of here now
75:40 - we're going to create two divs
75:42 - and the first div doesn't actually need
75:44 - a class we can just have it be a div and
75:47 - we'll have one more
75:49 - now just for simplicity here this div
75:52 - we'll say buttons and this these will be
75:54 - the buttons to delete a post and to ban
75:56 - a user we're just not going to handle
75:57 - those right now and in the first part
76:00 - i'm going to display the kind of content
76:02 - of the post so we'll have an h5 tag i
76:06 - will have class is equal to
76:08 - and this can be card title
76:12 - and
76:14 - inside of this div we want to display
76:16 - the title of the post so we can say post
76:18 - dot and then title like that
76:20 - and sorry this needs to be slash h5 and
76:23 - then we'll just display a p tag
76:25 - that has the description of the post so
76:27 - we can say
76:30 - post dot description and then the last
76:32 - thing that we can do is add a footer for
76:35 - the post that displays when it was
76:36 - posted so we have a card footer
76:39 - let's end that div
76:42 - okay and then inside of the footer we're
76:44 - going to have uh actually we can just
76:47 - make it like this
76:48 - text muted
76:50 - and we can just put the text that we
76:51 - want which is going to be
76:54 - post dot and then this is created at
76:57 - like that okay so let me save
77:00 - i just now need to fix some of this
77:01 - because it always messes it up okay
77:04 - command shift p save and now in home we
77:06 - should be viewing all of the posts one
77:09 - thing i can do is i can check if the
77:12 - posts are empty or not as well so i can
77:14 - do something where right before my end
77:17 - four
77:18 - i just add
77:19 - a tag called empty and what this will do
77:22 - is essentially check if there's no posts
77:24 - inside of post
77:25 - now if there isn't any what i can do is
77:27 - display
77:29 - ap tag
77:30 - that just says no
77:32 - posts
77:33 - yet sad face okay
77:36 - let's save all right let's now go back
77:38 - to the homepage
77:40 - let's refresh and there we go we now see
77:42 - our post and notice i was showing you
77:44 - the buttons are going to be on the right
77:45 - hand side that's why i coded it that way
77:46 - so now we want to write two buttons a
77:49 - button to delete and a button to ban the
77:51 - user but we only want to show those
77:53 - buttons
77:54 - to people that have the ability to
77:56 - delete a post
77:57 - and to people that have the ability to
77:59 - well ban a user
78:01 - so it is a little bit complicated to do
78:03 - that but the first one
78:05 - that deals with deleting a post we can
78:08 - do it in the following way
78:10 - we can go inside of buttons here
78:12 - and we can write an if statement
78:15 - we can say percent percent
78:16 - like this
78:18 - okay percent percent
78:20 - if and we can say if request
78:24 - dot user is equal to the post dot author
78:28 - then we'll allow them to delete the post
78:30 - now we'll also allow them to lead to
78:32 - delete it if they're a mod or if they
78:33 - have permission to delete the post we'll
78:35 - handle that in a second because again
78:36 - that's a bit more complicated so request
78:39 - is something that we should have access
78:40 - to directly inside of the template if we
78:43 - don't we can manually pass it but i
78:44 - believe requests we always have access
78:46 - to so we can say if request.user or
78:48 - actually sorry we can just say user i
78:50 - figure out that in the template we have
78:52 - access to users so we're going to say if
78:53 - user
78:54 - is equal to the post.author then of
78:56 - course they should be able to delete
78:57 - this and we'll check this on the backend
78:59 - as well but this will be our front-end
79:01 - you know display so we're going to make
79:03 - a form
79:04 - so let's actually do this first we'll
79:06 - say form
79:08 - the method here is going to be equal to
79:12 - delete okay
79:13 - and then we're going to have slash form
79:16 - like that
79:18 - and then inside of the form we're going
79:20 - to have our
79:21 - sf token
79:23 - or csrf token keep messing that one up
79:26 - and then we need a button
79:28 - and this button will have a type equal
79:30 - to submit we'll have class btn and then
79:32 - we'll have btn danger which makes this a
79:35 - red button
79:36 - and we'll have
79:38 - delete like that
79:39 - okay
79:40 - uh let me again fix this because i saved
79:45 - and
79:46 - save the format all right so that should
79:48 - be good so if the user is the
79:49 - post.author we have a form we have crsf
79:51 - token we have a button that allows us to
79:53 - delete however we need some way to know
79:56 - what post it is that we want to delete
79:58 - because right now this doesn't tell us
79:59 - what post we were clicking on so what
80:01 - we're going to do is add a value here
80:04 - and the value is going to be equal to
80:06 - the currentpost.id
80:08 - now this is going to allow me to access
80:11 - the id of the post that i hit the delete
80:13 - button for however i need a name for
80:16 - this i'm going to say name is equal to
80:18 - and then the name will be
80:21 - we'll just call this
80:22 - actually we'll go post id
80:24 - okay so essentially this button when i
80:26 - click it it's going to add post id with
80:29 - a value of whatever the id of the post
80:31 - is to the form data that will be
80:33 - submitted as the delete request to this
80:36 - url so now if i go back to views.pi
80:40 - inside of home i can do the following
80:43 - i can say if request
80:45 - dot method is equal to
80:47 - delete then i can say the post
80:50 - underscore id is equal to and then i
80:53 - think this is going to be request dot
80:56 - and i think i can do
80:57 - request.post.get and then post id
81:00 - however i might have to change the type
81:03 - to post or i don't know if we have
81:05 - access to delete
81:07 - we can try this for now
81:09 - so let's just print out the post id
81:13 - and see if that works otherwise we'll
81:15 - have to make a quick fix
81:16 - okay let's try this out though for now
81:18 - we've added this in home
81:20 - we've created the button here that the
81:22 - user can click on
81:23 - so at minimum we can see if it's showing
81:25 - up for the user so let's refresh and we
81:28 - got an issue here it says n4 expected l
81:30 - if else or end if uh did you forgot to
81:34 - add that
81:35 - okay and four
81:37 - ah sorry i need to end my if statement
81:39 - so we have the if right here i forgot to
81:41 - end it so let's end it right here
81:42 - percent percent and if
81:45 - okay
81:46 - and save and now we should be good okay
81:48 - let's go back let's refresh
81:51 - and another error empty expect it and
81:53 - block did you forget this uh okay let me
81:57 - have a look
81:58 - all right another problem we have the n4
82:00 - right here when the n4 needs to be at
82:02 - the end so i had a duplicate n4 that's
82:04 - why i was getting that so let me get rid
82:06 - of that
82:07 - okay
82:08 - and let's try this one more time
82:10 - let's refresh and there we go it's
82:12 - showing the delete button now let's see
82:14 - what happens if we log out and i guess
82:16 - we need another account to sign in so
82:17 - let's make one joey
82:21 - joe at
82:22 - gmail.com uh let's add a password
82:26 - i'm just gonna keep using the same one
82:28 - so don't forget it okay let's register
82:30 - and now notice it doesn't show the
82:32 - delete button because well joey is not
82:33 - the author of this post can joey make a
82:36 - post let's say hi i
82:38 - am
82:40 - joey
82:42 - hello everyone
82:44 - post
82:45 - and there you go now we can delete this
82:46 - post now let's try it so let's hit
82:48 - delete
82:50 - and
82:51 - let's see so it didn't delete the post
82:52 - didn't look like whoa well that's
82:54 - because we haven't actually written the
82:55 - code to do that but if i come here you
82:57 - can see that i
82:59 - was passing all this stuff post id
83:01 - equals two but nothing was printed out
83:04 - from up high so we're not we're not able
83:06 - to print the post id
83:09 - so it looks like this did not
83:10 - necessarily work so let's change this to
83:12 - be post and let's see if that works now
83:14 - so let's go back here and let's hit the
83:17 - button okay so same thing here it was
83:19 - not printing out the post id all right
83:22 - so i've kind of figured out the problem
83:23 - here is that we're sending a get request
83:25 - for some reason when i hit the um button
83:29 - so maybe the method needs to be
83:30 - lowercase
83:31 - so let's see if i can change the method
83:32 - to that of course i need to make this
83:35 - change again
83:36 - okay let's see if now it's going to send
83:38 - a delete so let's refresh
83:40 - let's hit that
83:42 - and
83:43 - okay it's still sending a get request so
83:45 - i guess that's not a action that's
83:47 - allowed from the form
83:49 - so let's just change the method here to
83:50 - be post
83:51 - and let's save and let's come back here
83:54 - and let's refresh
83:56 - and let's try this now and now it's
83:58 - actually sending a post okay so i guess
84:00 - we just have to have a post here my
84:01 - apologies there guys for some reason i
84:02 - thought we could do delete so now when i
84:04 - do
84:05 - request.post.get this should work
84:07 - however we need to change the request
84:09 - method to be checking if it's post so
84:12 - now let's come back here let's refresh
84:14 - again
84:15 - okay continue
84:16 - and
84:18 - let's sorry let's just do this get rid
84:20 - of all this stuff
84:22 - okay
84:24 - here home
84:26 - delete
84:27 - and it prints out the id of two okay
84:29 - that's what we're looking for all is
84:30 - working apologies about all of the
84:33 - confusion there all right so now that we
84:34 - have the post id
84:36 - what we need to do is confirm that this
84:39 - user owns this post and that this post
84:42 - exists before we actually delete it
84:44 - right so to do that we need to first get
84:46 - the post so we're going to say
84:48 - the post is equal to post.objects.get
84:52 - and then we can get the id equal to post
84:54 - id although actually this needs to be
84:56 - filter not get okay so we're looking for
84:58 - this post id
85:00 - and we'll grab the first element here so
85:03 - we now need to check first of all if the
85:05 - post exists so i'm going to say if post
85:08 - and
85:09 - we'll say the post dot author
85:13 - is equal to and this will be the request
85:16 - dot user then we can delete the post so
85:18 - we can say post dot delete like that
85:21 - and i think that's actually all we need
85:23 - to do to delete the post all right so
85:25 - that looks good to me
85:27 - let's just save this
85:29 - and let's go here and refresh
85:32 - no let's just do this now let's try to
85:34 - delete the post and when we do that the
85:36 - post goes away awesome okay so deleting
85:39 - the post is now functioning uh and yeah
85:42 - there we are all right so now that we
85:44 - know how to delete the post i would like
85:46 - to start setting up the different groups
85:48 - and creating a mod group as well as kind
85:50 - of an admin user who's allowed to ban
85:53 - different users so let's see how we can
85:55 - do that
85:56 - all right so as i was saying we're now
85:57 - going to move on to kind of the user
85:58 - management aspect of this tutorial where
86:01 - we start assigning users to different
86:02 - groups and looking at specific
86:04 - permissions so we're going to create a
86:07 - new group the group i want to start by
86:09 - creating is a mod group i also want to
86:11 - make a default group now the default
86:14 - group is going to be a group that has
86:15 - the ability to make a post and the um
86:19 - what do you call it here the the mod
86:21 - group will have the ability to delete
86:23 - anyone's posts we'll then also have a
86:25 - super user or an admin uh we don't need
86:27 - to manually make this because django
86:29 - already has this notion of an admin and
86:31 - this will have the ability to ban users
86:34 - so mods can delete anyone's posts but
86:36 - they can't ban users admins can delete
86:38 - anyone's posts and they can ban users
86:40 - and then a default user will just have
86:42 - the ability to make posts and delete
86:44 - their own post now with the default user
86:47 - they will also have the ability to be
86:49 - removed from the default user so if they
86:51 - get banned they'll be removed as a
86:52 - default user and that means they no
86:55 - longer have the ability to create posts
86:57 - they can still delete their own posts
86:58 - but they won't be able to make posts so
86:59 - that's kind of what i'm going to set up
87:01 - here and that will give you a good
87:02 - example of how to handle permissions
87:05 - restrict page access all of that type of
87:07 - stuff so to do this is a little bit
87:09 - complicated because we need to first
87:11 - create a super user that we can sign
87:13 - into django admin with and then we need
87:15 - to make some groups and i'll show you
87:17 - how to do it programmatically as well
87:19 - but for now what we're going to do is
87:21 - the following we're going to type python
87:23 - manage dot pi and then we want to make a
87:26 - super user so to do that we're going to
87:27 - type create
87:29 - super
87:30 - user okay uh so making super user we
87:33 - need a username so i'll just go with
87:34 - tech with tim uh we need an email i'm
87:37 - just gonna have an empty email for the
87:38 - password let me type this in okay
87:42 - same thing here and then the super user
87:44 - was created so now let's re-run our
87:46 - server python manage the pi run server
87:49 - and now that we have this user we can
87:51 - use as a regular user account so if i
87:53 - log out i can sign in with my tech with
87:56 - tim user so let's do that
87:57 - and notice this works fine because well
87:59 - the user's been created however i can
88:01 - also go to the admin page
88:03 - and since i'm signed in as a super user
88:06 - i'm able to view the admin page now if
88:08 - you're not a super user you can't view
88:10 - this page so if i log out and now i try
88:12 - to go to slash admin
88:16 - it's going to prompt me to sign in with
88:17 - my account and if i try to sign in with
88:19 - the regular tim account for example
88:21 - that's not a super user notice it tells
88:23 - me i can't do that so i need tech with
88:24 - tim instead
88:25 - okay so i'm signing in with tech with
88:26 - tim and i have the ability to view
88:28 - different users and groups so i can view
88:31 - them here just like i can view them on
88:32 - retool and there's a lot of stuff you
88:34 - can do here in the django admin panel
88:37 - but i'm kind of treating this retool
88:39 - application like my django admin so i
88:42 - don't want to spend a ton of time
88:43 - setting stuff up in here i'd prefer to
88:44 - do it just directly on retool because
88:46 - it's way easier to visualize and see and
88:49 - later when we set up the different
88:50 - graphs and stuff you'll see why you know
88:52 - it's easier to use kind of a drag and
88:53 - drop as opposed to programmatically add
88:55 - stuff to the django app and panel but i
88:57 - do want to mention that you can you know
88:59 - add a bunch of stuff here and customize
89:00 - stuff in here now to add a group i can
89:02 - do it right here from django admin or i
89:04 - can do it programmatically so let's do
89:06 - one here from django admin then we'll do
89:07 - the other one from what you call it uh
89:11 - programmatically okay so let's add a
89:12 - group
89:14 - so to add a group i just need to give it
89:15 - a name
89:16 - so for right now we'll have default now
89:19 - we need some permission right so there's
89:21 - some permissions here related to posts
89:23 - so i can just drag them in so i can do
89:25 - or i can click on them so for example
89:27 - can add post
89:28 - let's add that permission now can view
89:30 - post we'll have that permission as well
89:33 - but change post and delete posts for now
89:35 - we won't have that
89:36 - so as we're viewing the permissions here
89:38 - i just want to mention that every model
89:40 - that you add to django so custom model
89:42 - in this case the post model is going to
89:44 - create four permission objects for by
89:46 - default those permissions are going to
89:49 - be add view it change and delete and you
89:51 - can see that on all the models here we
89:53 - have those default four permissions now
89:55 - when i add a permission here to a group
89:57 - that means that any user or part of this
89:59 - group has this permission however django
90:02 - is not going to enforce these
90:03 - permissions for me so it will know that
90:05 - this user has this permission but it's
90:07 - not going to disallow a user from doing
90:10 - something if it doesn't have a
90:11 - permission you as the programmer have to
90:13 - manually do that yourself so you have to
90:16 - check if you know this user has this
90:18 - perm and if they do you allow them to do
90:20 - something or you don't allow them to do
90:22 - if they don't have the perm so keep that
90:24 - in mind these are just permission
90:25 - objects they're really just internally
90:27 - strings they're saying okay this user
90:29 - has this ability this user has this
90:31 - ability then you as the programmer you
90:33 - go in and you check those now you can
90:35 - add your own permissions as well
90:36 - for example maybe you want to allow a
90:39 - user to update only the author of a post
90:42 - actually that probably wouldn't make
90:43 - sense maybe only the description or only
90:45 - the title of the post you don't want
90:46 - them to update everything you want them
90:48 - to just be able to update one specific
90:50 - thing
90:50 - if that's the case you can make your own
90:52 - custom permission object add that to
90:55 - your user and then you can check for
90:57 - that permission object i'm not going to
90:58 - show that to you here but i will show
91:00 - you pretty much everything else so how
91:01 - to check for the perms and then creating
91:03 - them is relatively straightforward okay
91:05 - so now that we have these two perms here
91:07 - can add post can view post
91:09 - let's save this group here
91:11 - and now we have the default group and if
91:13 - we have a look we can see what
91:14 - permissions they have right so to add a
91:16 - user to a group we can do that from
91:18 - django admin i believe at least so let's
91:20 - try here if i go to joey
91:23 - let's see if i can add him to a group uh
91:25 - so yeah i can click this move it over
91:27 - and then i've added joey into the group
91:29 - that's fine so let's hit save
91:31 - and there we go now joey should have
91:34 - those perms so that's great we can do
91:35 - that right here from django admin i will
91:38 - also show you how to do it directly from
91:39 - retool just so we can have everything on
91:41 - one page and kind of pick what we want
91:42 - to view but of course a lot of the stuff
91:44 - you can do from django admin anyways
91:46 - there we go we've just created a new
91:47 - group we've added a user to that group
91:49 - now i want to show you how you do this
91:51 - programmatically because you're not
91:52 - always going to want to do this from the
91:54 - admin table or from the admin page so
91:56 - let's close this let's go cls and i'm
91:59 - going to show you the code we'd write
92:00 - now this is more complicated but i think
92:02 - it's worth showing
92:04 - so we're going to type python manage.pi
92:07 - and i think it is shell that we're going
92:09 - to type yeah so when we type shell it's
92:11 - going to bring us into an interactive
92:13 - console
92:14 - and we're going to start typing the
92:15 - fault
92:16 - so we're going to say from
92:17 - django.contrib
92:19 - dot off
92:20 - dot models
92:22 - we're going to import group
92:24 - we're going to import permission
92:27 - and we're going to import user so we
92:29 - created that default user now i want to
92:32 - create the mod user okay
92:34 - so to do this i need to import a few
92:35 - other things just bear with me here i'm
92:37 - going to say from django dot contrib dot
92:40 - and then actually not off
92:43 - dot this is going to be content
92:45 - types
92:46 - import and then content
92:49 - type like that no why'd that go away
92:52 - come on
92:53 - okay let's type this out again from
92:55 - django.contrib
92:57 - dot content types
92:59 - import
93:01 - content
93:02 - type
93:03 - uh okay and then this is sorry dot
93:06 - models
93:08 - okay so we have that uh then we want to
93:11 - create a group so to create a group we
93:13 - do the fong we say mod
93:16 - created
93:17 - is equal to and then this is going to be
93:19 - group
93:20 - dot
93:21 - objects dot and then get underscore or
93:24 - underscore
93:25 - create like that and then we are going
93:28 - to say name
93:30 - is equal to and then give it a name i'm
93:32 - going to give it mod so this is as easy
93:34 - as it is to create a group so that
93:36 - should have created groups now if i type
93:37 - mod you'll see we have group mod and if
93:39 - i type created
93:40 - we get true so we've now created a group
93:43 - now that we've created a group though we
93:44 - want to add permissions to it so to add
93:47 - permissions to it we first need to find
93:48 - the appropriate permissions so i'm going
93:50 - to see say ct standing for content type
93:54 - is equal
93:55 - to content type like that
93:58 - dot objects dot get underscore for
94:01 - underscore model
94:03 - okay and then i'm going to say
94:06 - actually model
94:08 - is equal to and then this needs to be
94:10 - the model that i want to get the
94:11 - permissions for so i'm going to type
94:12 - post it's not going to work right now
94:14 - because i haven't imported post so let's
94:15 - import that i'm going to say from main
94:17 - dot
94:18 - models
94:20 - import post okay and now when i run this
94:23 - if i look at ct my content type is main
94:26 - post now you'll see why we need this
94:27 - again there's a lot of stuff i have to
94:28 - code before i get to like kind of the
94:30 - main part but we're looking for the
94:32 - content type of post so that i can now
94:35 - get all of the permissions related to
94:37 - that post so to do that now i'm going to
94:39 - say perms are equal to and then this is
94:42 - going to be permission
94:44 - and then this is dot
94:46 - objects dot filter and then this is
94:49 - going to be content underscore type
94:52 - is equal to ct so now if i look at perms
94:57 - we get a query set containing all of
94:59 - this so what i can do is say perms dot
95:02 - can i look at all
95:04 - okay i mean it gives me the same thing
95:05 - but now notice i get all of the
95:06 - permissions related to my post okay so i
95:08 - have the post for add
95:10 - for change for delete for view now that
95:14 - i have all of these posts if i want to
95:16 - add these permissions sorry now that i
95:18 - have all these perms if i want to add
95:20 - them to the group i do the font
95:24 - i say mod
95:25 - which is my group right
95:27 - mod dot
95:28 - and then this is going to be
95:30 - permissions
95:33 - dot add
95:34 - and then i pick the perm that i want
95:36 - so if i want the ability to
95:40 - we're going to say i guess a mod can add
95:42 - posts
95:43 - change posts uh delete posts view posts
95:46 - i guess we'll give them access to all of
95:47 - them
95:48 - uh i think i don't know if i can pass it
95:51 - all of them or not let's see if i pass
95:53 - asterisks perms i think that adds all of
95:56 - the perms so let's now see this mod and
95:58 - then mod dot
96:00 - permissions and
96:02 - okay i can't view all of those at once
96:04 - but you get the point so what i've just
96:05 - done here is i've added all of the
96:07 - permissions for my post
96:09 - to the mod group okay so i've done that
96:12 - programmatically and now let's see how
96:14 - we add a user to the mod group so to do
96:18 - this i need to get a user so i'm going
96:19 - to say user is equal to user dot objects
96:23 - dot filter we're gonna say username is
96:26 - equal to and then
96:28 - what was my other user i had
96:30 - i guess we'll go to retool to have a
96:32 - look here uh i had where was it
96:36 - users let's refresh this
96:39 - and
96:40 - let's bring this down uh or let's just
96:43 - go next we have tech with tim tim and
96:45 - joey
96:46 - okay tim so that's the other user that
96:47 - we want so let's go username is equal to
96:49 - tim
96:50 - okay so now we have our user and what i
96:53 - can do is mod dot underscore or mod.user
96:56 - underscore set
96:58 - and then this is going to be dot add and
97:01 - we are going to add the user
97:03 - all right the reason i got that issue
97:04 - there is because
97:06 - i need to do user.first
97:09 - and there we go okay
97:11 - again i know that was a lot you're going
97:12 - to have to probably watch that again if
97:14 - you want to see all of the commands but
97:15 - that is programmatically how you add a
97:18 - user to a group as well as how you
97:20 - create a new group and how you add
97:21 - permissions to the group so obviously
97:22 - it's way easier to do it uh from the
97:24 - django admin console but we imported
97:27 - these okay we created our group that's
97:28 - how you create the group by the way very
97:30 - easy get or create and then we had our
97:32 - content type this is just so that we can
97:33 - actually get all the permissions for a
97:35 - specific content type we then have the
97:38 - content tab okay we had to recreate that
97:39 - to import it we then get all of the
97:41 - permissions by filtering by the content
97:43 - type that then gives us a list of all of
97:46 - the perms for that in this case post and
97:49 - then what we can do is say
97:51 - mod.permissions.ad i did asterix which
97:53 - just stands for essentially all of the
97:55 - permissions so i added all of those then
97:57 - i got the user that i wanted to add to
97:58 - the mod group and then i wrote this
98:01 - mod.userset.add and then user.first just
98:04 - because that was a query so i had to get
98:05 - the first element from
98:07 - all right a lot i know let's quit though
98:10 - now we should have a mod group
98:13 - with the user tim inside so if we go
98:16 - back to
98:17 - django admin here and we go to groups
98:21 - we should see that if we re-run the
98:24 - server so python
98:26 - manage.pi
98:27 - run server we should see that we have
98:29 - that group so let's have a look here
98:32 - okay let's refresh and we have default
98:34 - mod nice now that we've done that i just
98:37 - want to write something inside of retool
98:39 - that allows us to easily add users to
98:42 - groups and to view what groups the users
98:44 - are inside of so i'm going to change
98:47 - this here so let's just make this full
98:48 - screen so rather than viewing all of the
98:50 - tables now we're going to be able to
98:52 - view all the users and then it has what
98:54 - groups they're in on one kind of
98:56 - straight line so we'll write kind of a
98:57 - more advanced query to do that so if
98:59 - we're looking at the different tables
99:00 - that we have here in retool we have auth
99:03 - user which we know gives us all our
99:04 - users we have auth user groups and then
99:06 - we have auth user or sorry auth groups
99:09 - as well so if i go back actually to page
99:12 - one we have off group right
99:14 - we have auth user and auth user groups
99:17 - now all three of these tables allow us
99:19 - to determine what group a user is in and
99:21 - this is actually good to look at so
99:23 - let's write a new query here
99:25 - that is going to just get for us
99:28 - something else so resource query i won't
99:30 - name it for now but i'm just going to
99:32 - select star from and then this is going
99:34 - to be off underscore group and if i run
99:37 - this
99:38 - you see that i get the following
99:40 - i get all my groups right so i have
99:41 - default and i have mod okay so that's
99:43 - how i get my groups but the issue is
99:45 - this is not telling me what users are in
99:47 - the groups what tells me that is off
99:50 - user
99:51 - underscore groups so if i save and run
99:53 - this
99:54 - then notice that we have a bunch of id
99:56 - so we have id user id and group id so
99:58 - it's saying the user with id 2 is in
100:00 - group 1 and the user with id 1 is in
100:03 - group 2. so that's not very useful to me
100:06 - what i need to do is write a query
100:07 - that's going to tell me all of my users
100:09 - and then what groups they're inside of
100:11 - so that's going to involve a few join
100:12 - operations so let me show you how we do
100:15 - that so i'm going to say select and then
100:17 - i'm actually going to specify what
100:18 - columns i want so in this case i want
100:20 - the auth underscore user dot
100:23 - username
100:24 - and i want to grab the auth underscore
100:27 - group
100:29 - dot name or auth groups.name okay
100:31 - because that's gonna give me the name of
100:32 - the group
100:33 - and for now that's actually fine and
100:36 - we're going to select this from the auth
100:38 - user table but i need to join this with
100:42 - two other tables so i'm going to say
100:43 - from off user i'm going to left join
100:46 - this
100:47 - with the auth underscore users
100:50 - underscore group
100:51 - on the column
100:53 - off underscore user dot id
100:57 - equal to and then this will be auth
101:00 - underscore users
101:02 - underscore group dot user id
101:05 - okay so let's go on like that uh and
101:08 - sorry let me actually remove this for
101:09 - now
101:10 - and let's actually just select asterisks
101:12 - okay so we'll do it one step at a time i
101:14 - don't want to confuse you too badly so
101:15 - we're selecting everything from the auth
101:17 - user table we're left joining that with
101:19 - the auth users group and then this is
101:22 - how we're joining it so i'm saying okay
101:23 - i want to join every row that has the
101:26 - auth user id equal to auth users
101:29 - group.userid so if i save and run this
101:31 - here
101:32 - notice that we got auth users group does
101:35 - not exist uh is it auth user groups i
101:38 - think that's what it's called
101:40 - let's try this missing from clause ah so
101:42 - i just need to fix this one as well so
101:44 - auth user groups like that
101:47 - let's try this and fingers crossed okay
101:49 - so there we go so now we have
101:50 - every single user as well as their group
101:54 - id okay so if we're looking here right
101:56 - we're getting all our user information
101:58 - like we got before and now we get the
101:59 - user id and the group id as well so what
102:02 - i now need to do is i want to have this
102:04 - group id be associated with the actual
102:07 - name of the group so i know this is a
102:09 - complicated query but let's just
102:11 - continue it one more time so now we're
102:13 - going to left join this again
102:16 - and we're going to left join it with the
102:18 - auth underscore group
102:20 - on and then this is going to be the auth
102:23 - underscore user underscore groups
102:25 - dot group underscore id
102:28 - is equal to and then this is going to be
102:30 - the auth group dot id
102:34 - all right so now instead of selecting
102:35 - star i'm going to select the off
102:37 - underscore user
102:39 - dot username and the off underscore
102:41 - group
102:42 - dot and then this will be name so let me
102:45 - run this
102:47 - all right and group well that's groud
102:50 - that should be group id where did i type
102:53 - that group id like that
102:56 - okay let's save
102:58 - and there we go so now we have username
103:00 - as well as the group that they are in
103:02 - and if we want to we can say as
103:05 - group underscore name just that's not
103:07 - confusing
103:09 - and there we go okay so i know this is a
103:10 - complicated query especially if you
103:12 - don't look at sql but we're just joining
103:13 - the tables together so we get the
103:14 - information that we want so now we see
103:16 - user joey is in the default group tim is
103:19 - in the mod group and then tech with tim
103:20 - currently has no group
103:22 - now it has no group because he's a super
103:24 - user so what i could also do is
103:26 - uh this would be auth underscore user
103:29 - dot is
103:30 - we actually have something called is
103:32 - staff and when we look at this now
103:34 - you'll notice that tech with tim is
103:36 - indeed staff so what i can do is view
103:38 - this in a table now so rather than
103:40 - viewing all the tables here that i have
103:43 - let's change this so instead of get
103:45 - tables
103:46 - we're going to say get
103:47 - user underscore groups like that and
103:51 - then we'll grab that so get
103:54 - user underscore groups
103:57 - okay and let's spell that correctly
103:59 - and now we get our users and the group
104:02 - and if we want to we can rearrange these
104:03 - columns let me just drag this guy over
104:05 - here
104:06 - so now we view
104:08 - the username then the
104:10 - group name okay i've made a mistake in
104:13 - the query sorry guys we need the as
104:16 - group name
104:17 - to be right here okay
104:21 - uh that should be better yeah username
104:22 - group name is staff and then we can move
104:24 - this up if one although we no longer
104:26 - really need this table so let's get rid
104:27 - of this one
104:29 - and we can continue to view the posts as
104:31 - we please alright so now that we've done
104:33 - that i just want to make a quick form
104:35 - inside of here that allows us to change
104:37 - a user's group just so you can see how
104:39 - that works inside of retool so to do
104:41 - that let's drag in a form component
104:44 - okay let's make this a little bit larger
104:46 - and we just want to add two select items
104:49 - inside of here that allow us to select a
104:51 - user as well as to select a group that
104:55 - we want to add that user to
104:56 - and then we have the submit button so we
104:58 - can deal with that okay let's just make
105:00 - these
105:00 - go a bit further
105:02 - all right
105:04 - nice so for the first thing we're going
105:06 - to ask to select a user so we need to
105:09 - have the label here as user
105:12 - and then for this one
105:14 - excuse me we're going to have the label
105:15 - as group now we need these options to be
105:18 - filled in with the user's names and the
105:20 - optional group names as well right that
105:22 - we can add the user to so to do that we
105:24 - need a way to grab all the users and
105:26 - populate them as these items
105:29 - so what i'm going to do is go to the
105:30 - select component here and i'm going to
105:32 - change map and i'm also going to change
105:34 - the name here to be user
105:36 - just so we can access that data later on
105:38 - and i'm going to select a source that i
105:39 - want to map this from so here if i were
105:41 - to select a query like get users right
105:44 - now it's automatically populating a few
105:46 - things in here based on each item but
105:48 - what i can do is have the value of item
105:49 - id sure that's fine but change this to
105:52 - be item dot
105:53 - and then username as the label so let's
105:56 - just get rid of that
105:58 - and
105:59 - actually don't need that as well it
106:01 - could just be that
106:03 - okay and hopefully now i think it's
106:05 - going to show me my username so if i
106:07 - click here i notice i get tim tech with
106:09 - tim joey and then it shows the email as
106:10 - well for every single item so kind of a
106:12 - cool thing let me go back here
106:14 - from sorry guys i need to click
106:17 - uh on the select item over here so i've
106:19 - selected the get users query which is
106:21 - the data i want to use here and then i'm
106:23 - saying item.id item is just every item
106:25 - that i have in the array that's being
106:27 - returned here i'm getting the item
106:28 - username
106:30 - right and the ids we get 132 which is
106:32 - what we wanted for the users then the
106:34 - caption is the item.email
106:36 - and that's fine if i go look at get
106:37 - users we're just selecting star from
106:39 - auth user now that's great but for the
106:41 - groups we want to get all the names of
106:43 - the groups
106:44 - so i don't know if i have a query that
106:45 - just gets the groups i don't so let's
106:47 - make a new one here
106:49 - let's call this
106:51 - and we can say get underscore groups
106:54 - like that
106:56 - and to get the groups
106:57 - i can say select asterisks from auth
107:00 - underscore group like that
107:03 - let's just see what this one gives us i
107:05 - notice we get the id and the name so i
107:07 - could do a similar thing for this select
107:09 - where i just get the item.name however i
107:11 - want to show you that in retool there's
107:13 - something called a javascript
107:14 - transformer and what this allows us to
107:16 - do is actually transform data
107:19 - and kind of have it in whatever format
107:21 - we want using javascript so if i want to
107:23 - get the group names for example i can do
107:25 - something like const data is equal to
107:29 - and then i can say get underscore groups
107:32 - dot and then data and i can say okay
107:34 - well like let's let my return value
107:37 - equal an empty array let's loop through
107:39 - all the entries that we have here so
107:41 - let's say let i
107:43 - equal zero
107:44 - i less than data
107:47 - dot length i could say i plus plus and
107:49 - then i can say something like let name
107:51 - equal data and then this is going to be
107:53 - dot name
107:54 - at i and if you hover over this you'll
107:57 - see that the data that we have here is
107:59 - we have two columns right or two keys we
108:02 - have id and we have name now name is an
108:04 - array so is id so i'm accessing the name
108:07 - key here and then i'm accessing the ith
108:10 - element in there so i'm saying that's
108:11 - the name and then i need the id as well
108:13 - so i say let the id equal data dot id
108:17 - at i and then i can say rv
108:19 - dot push and i could push a tuple in
108:22 - here or i could push an object like name
108:24 - id
108:26 - and then return rv all right so let me
108:28 - just make a quick change here and say i
108:30 - dot name.length just because i was
108:31 - trying to access the length of the data
108:34 - but it's keys right so that's not going
108:35 - to work so let's save this
108:37 - and now if i preview this
108:39 - you'll notice i get my different
108:40 - elements right and it shows me the keys
108:43 - so the reason you do something like this
108:44 - is if you want to transform your data
108:46 - into a different format of course retool
108:48 - can handle lots of different formats
108:50 - with the you know different components
108:51 - you have here but i just want to show
108:53 - you that we have this transform so let's
108:54 - call this get
108:57 - group names like that and now if i go to
109:00 - the select component for the group names
109:02 - let's go mapped and let's just use the
109:04 - get group names
109:06 - okay and then for the value it'll be the
109:07 - id and for the label it will be the
109:09 - item.name and then if i select this we
109:10 - have default and mod so now that we have
109:12 - that we just need to hook up this submit
109:15 - button so that when we press it it will
109:17 - insert a new uh what do you call it user
109:20 - into a group so the way i do that is i
109:22 - write a new query here all right so we
109:23 - have a new resource query here let me
109:24 - just call this
109:27 - insert
109:29 - user group something like that and
109:31 - remember that the table that we want to
109:33 - use to actually have the mappings
109:35 - between users and groups is going to be
109:37 - off user groups so what i can do here is
109:40 - say
109:41 - insert
109:43 - and then this is going to be into off
109:46 - underscore user underscore groups and
109:48 - then the data that i want to insert here
109:51 - is going to be the following let me just
109:54 - look at my code here because i already
109:57 - forget it's going to be user id and then
110:00 - this is going to be group id the id will
110:02 - automatically be populated for us and
110:04 - i'll say values and
110:07 - we need to access values from this form
110:10 - so let's just change the title of this
110:12 - form and some other things here uh
110:14 - let's access this okay
110:15 - so for our form
110:17 - let me click on the form here
110:19 - this is going to be called
110:21 - i don't know let's just call it userform
110:23 - okay
110:24 - and then this is user this select here
110:27 - needs to be group
110:29 - so let's call that group okay so the way
110:31 - that we do this now to reference the
110:33 - values inside of there
110:35 - is
110:36 - we write the following it's give you the
110:38 - name of our form which is
110:40 - user form and then this is going to be
110:41 - dot data dot and then we have first the
110:45 - user
110:47 - and then second
110:48 - we're going to have the user form dot
110:51 - data dot and then the group
110:55 - okay so that should actually be good so
110:57 - now we just need to make it so we hit
110:59 - this button we run this query so let's
111:01 - do that if we click on the submit button
111:03 - we can go
111:04 - and we can add an event handler so where
111:07 - it says event handlers we're going to
111:08 - say add
111:09 - and we're going to say submit trigger
111:11 - query
111:12 - the query is going to be insert user
111:14 - group okay and we can only run
111:17 - when a certain condition is true now in
111:19 - this case i'll actually write the
111:20 - condition and i'll say
111:23 - when and i guess we'll say user
111:26 - dot value
111:27 - does not equal an empty string
111:31 - and
111:32 - when this will be the group dot value
111:35 - does not equal an empty string as well
111:37 - just to make sure that we have some
111:38 - value inside of here uh now it's
111:40 - actually saying that's true so let's say
111:42 - does not equal
111:43 - undefined
111:45 - um okay wait what is the current value
111:47 - uh it's oh no okay so it does not equal
111:50 - no
111:51 - and this does not equal null as well
111:54 - okay there you go so now we won't try to
111:56 - enter or input something if that is null
111:59 - and let's just add a title for the forum
112:01 - so form title let's say
112:04 - change user group all right so we're
112:06 - just about ready to test this i just
112:07 - want to add something though so i'm
112:09 - going to go to this query insert user
112:11 - group and i'm just going to add an event
112:13 - handler here and i'm going to say when
112:14 - this is successful right then we want to
112:17 - actually not trigger a query but let's
112:19 - show confetti on the screen so when this
112:21 - is successful let's show some confetti
112:23 - and let's say when there's a failure
112:25 - here
112:26 - then let's not trigger a query but let's
112:29 - actually show notification so we're
112:31 - going to show a notification
112:33 - and i don't know how exactly it would
112:35 - show
112:36 - the error
112:37 - let's say error like that and then the
112:39 - description
112:41 - can be
112:42 - and let's see what it's saying here
112:45 - insert user group dot air okay so if
112:47 - there is an error then we can display
112:49 - that
112:50 - nice
112:51 - all right so there we go let's save that
112:54 - okay now let's try testing this out so
112:55 - let's go here let's have tech with tim
112:59 - no i want this to be tech with tim come
113:01 - on
113:02 - check with tim select an option let's
113:04 - add to the default group let's hit
113:06 - submit
113:07 - okay it's running and then we get
113:08 - confetti which means it should have been
113:09 - added successfully so if i refresh this
113:12 - here we should now see tech with tim is
113:14 - in the default group which we do see so
113:17 - that is indeed working awesome okay so
113:19 - we've now added that form on retool
113:21 - we're now able to see our users now that
113:23 - we've done that finally
113:25 - let's go back to vs code and let's have
113:27 - a look at how we restrict page access
113:30 - and
113:31 - i guess access the model based on the
113:32 - permissions each user has all right so
113:35 - what we can do here to get started is
113:37 - make it so you cannot access the create
113:39 - post page unless you have permission to
113:42 - make a post so first we will have the at
113:44 - login required decorator but we're going
113:47 - to add another decorator here called
113:48 - permission required so what i can do is
113:51 - simply add this permission required
113:53 - and now right before here i can say app
113:56 - permission required and then i need to
113:58 - put the string name of the permission
113:59 - now the way you access the name or find
114:02 - the name is is going to be the name of
114:03 - your app which in this case is main dot
114:05 - and then you're going to have add and
114:07 - then the name of the model so in this
114:09 - case post now if you wanted to be delete
114:11 - it would be delete i believe update is
114:14 - update
114:15 - and i think view
114:17 - would be view now in this case let's
114:18 - just go with
114:20 - what was it add post
114:21 - okay then i'm going to say
114:24 - the login url is slash login so that if
114:26 - you don't have permission it's going to
114:27 - redirect you there and we're going to
114:29 - say raise exception equals true so that
114:32 - this will raise an exception if you
114:34 - don't have permission okay
114:36 - and that's good for that so let's just
114:39 - test this first of all
114:41 - and see now if we're gonna be able to do
114:43 - this so
114:44 - let's go here to
114:47 - django and let's go to slash okay
114:52 - like that let's try to post and then we
114:54 - can create a post because we have that
114:56 - permission
114:57 - now let's
114:59 - log out let's create a new account
115:01 - that's not going to be in a group and
115:02 - that shouldn't have that permission so
115:04 - let's go
115:05 - susan okay susan
115:08 - susan gmail.com okay let me type in the
115:11 - password
115:13 - and
115:14 - again
115:15 - and let's see here okay and let's go to
115:17 - post
115:18 - and notice we cannot create the post
115:19 - because we don't have that permission
115:22 - now though if we go here and we add
115:24 - susan to that group so let's just do a
115:27 - refresh here just so that the query is
115:29 - going to rerun
115:30 - okay and now
115:32 - we should have susan as a user here okay
115:35 - so i just reran the query down here and
115:37 - once i reran it now it gives it to me so
115:38 - i have susan okay and then for the group
115:41 - let's add them to the default group
115:42 - let's submit okay it's going to take a
115:44 - second looked like that worked so now
115:47 - let's go to post and notice that i have
115:49 - the ability to make the post because i'm
115:50 - now added to the default group
115:52 - great so that is working fine
115:55 - now that we've checked that permission
115:57 - we want to make it so that mods have the
115:59 - ability to delete anyone's post so to do
116:02 - that i can go here instead of use and
116:04 - where i'm checking if the post.author is
116:06 - equal to request.user
116:08 - i can also check the following so i'm
116:10 - going to say
116:12 - or and then i want to check if the
116:15 - current user has the permission to
116:17 - delete the post so the way i do that is
116:18 - request
116:20 - dot user
116:22 - dots and then this is going to be let me
116:25 - just find this has underscore perm and
116:28 - again i can check main dot and then this
116:31 - is going to be this time delete
116:32 - underscore post
116:34 - okay so if the user has the ability to
116:36 - delete the post then i will let them now
116:38 - i want to do the same thing though in my
116:40 - template so where i'm checking if the
116:43 - user is equal to post.author i can also
116:45 - check so we're going to say or
116:48 - or user dot and then what do i have has
116:53 - underscore perm
116:55 - and this would be main dot delete
116:58 - underscore post now it might be a little
116:59 - bit different than that so let me just
117:01 - check uh actually it's going to be the
117:03 - following sorry
117:04 - it's going to be
117:05 - perms
117:06 - dot and then let's go back here main dot
117:08 - main.deletepost
117:10 - so i forgot every single time you're in
117:12 - a template you have access to this perms
117:14 - object and this perms object will simply
117:16 - tell you
117:17 - if a user has access to a specific
117:19 - permission or not so i'm saying
117:21 - perms.main which is my main app right
117:23 - and then dot delete post and well that
117:25 - tells me if they have that permission or
117:27 - not okay straightforward enough let's
117:29 - save and let's just go to retool quickly
117:32 - and let me have a look here again at
117:34 - what user is a mod so tim is a mod so
117:36 - let's sign in as tim so log out
117:40 - let's go tim okay log in
117:43 - and let's see here and well okay that's
117:45 - my own post so i do have the ability to
117:47 - delete it okay that was kind of a fail
117:48 - let's sign this tech with tim and make a
117:50 - post just for testing purposes here
117:52 - let's say
117:53 - hey world okay
117:55 - uh
117:56 - hello okay post
117:58 - let's now
118:00 - log out okay let's sign in as tim who is
118:03 - a mod
118:05 - and i have the ability to delete someone
118:07 - else's post and i guess i could try this
118:09 - so let's try to delete tech with tim's
118:10 - post and it works because i am a mod
118:13 - however if we sign in with
118:16 - susan now so let's sign in with susan
118:18 - you will see that we do not have the
118:20 - ability to delete tim's post because
118:22 - well we are not a mod and then of course
118:24 - the admin they have like the admin user
118:26 - has permission for everything so they'll
118:28 - already have the perm to delete other
118:29 - people's posts
118:30 - okay hopefully that makes sense but
118:32 - that's what we've just done now though
118:35 - we want to make it
118:37 - so that we can ban users so banning
118:40 - users should only be done if you are a
118:42 - super user right so i will show you how
118:44 - we check that so let's actually after
118:46 - this if statement add another and we're
118:49 - going to say if and this is going to be
118:51 - user dot and we'll say is
118:54 - underscore
118:55 - underscore staff okay so we're going to
118:57 - check if they are a staff user
119:00 - if they are staff then we can end the if
119:03 - statement and inside of here we're going
119:05 - to put the exact same thing except this
119:07 - time rather than having the button
119:08 - that's going to delete we're going to
119:10 - have a button that says band so here
119:12 - we'll say
119:14 - fan user and then rather than the post
119:16 - id this will be the user id and we're
119:18 - going to get the post
119:20 - dot author
119:22 - dot id
119:23 - so that way we know what user it is that
119:25 - we're going to ban so that's actually
119:26 - all we need for this and again this will
119:28 - only show if your staff and staff pretty
119:29 - much means you're a super user
119:31 - or your group is a part of the staff
119:33 - group although i haven't shown that
119:34 - again there's so much stuff you could
119:36 - show with authentication and user
119:38 - management anyways we've now handled
119:40 - that so we should now have that button
119:41 - so if i come back here i'm signing this
119:43 - tech with tim so if i refresh i should
119:45 - see the band user button nice now let's
119:48 - just add uh button and then warning
119:53 - just so that this looks different okay
119:55 - now let's come back and let's refresh
119:58 - and now we have band user we can add a
119:59 - margin between them but for now i think
120:01 - that's fine
120:02 - so now that we have that let's go to
120:04 - views.pi and let's handle what happens
120:07 - if we are going to be banning a user so
120:10 - here when we're checking uh we're
120:11 - checking for a post request now the
120:13 - issue is another post request is going
120:14 - to be sent but this one is going to have
120:16 - a different id rather than post id it's
120:18 - going to be user id so we have post id
120:22 - we have post so we're going to have to
120:23 - write kind of another if statement here
120:24 - and say if post id
120:27 - then do all of this
120:30 - otherwise then we're going to try to get
120:33 - the um
120:34 - what do you call it the the user id so
120:36 - we'll say user underscore id is equal
120:39 - request.post.getuserid i'll say
120:42 - l if and then this will be user
120:45 - underscore id
120:47 - then i'm going to say
120:48 - the user is equal to and this is going
120:50 - to be user.objects
120:53 - not get but dot
120:55 - filter we're going to filter by id equal
120:57 - to user id and then get the first user
121:00 - we're going to say if user and the
121:02 - current user so and request.user dot and
121:05 - not has perm but dot is underscore
121:08 - staff
121:09 - then we will ban this user now the way
121:11 - that we ban this user is we simply
121:14 - remove them from the default group
121:16 - because once they're removed from the
121:17 - default group then they won't have
121:19 - permission
121:21 - to what he called to delete posts or to
121:23 - do any of that kind of stuff we also
121:25 - could just remove a specific permission
121:26 - from them but in this case i'll just
121:28 - remove them from the group so that way
121:30 - if there's any other permissions we
121:31 - wanted to remove when they're banned it
121:33 - would just be removed because they're no
121:34 - longer in that group right so i'm going
121:36 - to say group
121:38 - is equal to and then it's going to be
121:39 - group.objects.filter
121:42 - and it's not going to be user it's going
121:44 - to be name is equal to and then i need
121:46 - to find the default group i need to
121:48 - remove them from it now we also need to
121:50 - import group uh so i need to do that
121:52 - from here so that's gonna be from
121:56 - django.contrib it actually was showing
121:58 - it to me.auth.models uh we need to
122:00 - import user as well as group so good job
122:02 - we did that
122:04 - okay
122:05 - then where were we here we have the
122:07 - group
122:08 - now we're going to say group
122:10 - dot and this will be user underscore set
122:15 - dot remove
122:16 - and we're going to remove the user from
122:18 - it
122:19 - and there we go now we also should
122:20 - remove them from the mod group just in
122:22 - case they're in that so let's do this
122:24 - again we're going to say group is equal
122:26 - to and then this will be
122:28 - mod and then the same thing will remove
122:29 - them from the mod group now i believe
122:31 - this will not crash if they are not in
122:33 - the group we also could just put a try
122:35 - catch here right or try accept so we can
122:37 - just do that in case so we can say try
122:40 - accept
122:41 - and just pass okay
122:43 - because well if they're already banned
122:44 - then banning them again you know is
122:46 - isn't going to do anything so that's
122:47 - fine and then accept and then pass
122:51 - okay
122:53 - so that is it for banning a user now the
122:56 - one thing that we need to handle is that
122:58 - by default when users are created
123:00 - they're not added
123:02 - into the um so i need to get out of this
123:05 - here you can't get out of this stem
123:07 - terminal okay
123:08 - so the one thing we need to do sorry is
123:09 - that when users are created they need to
123:11 - automatically be added to the default
123:14 - group so we're going to need to handle
123:15 - that because right now we have to
123:16 - manually add them and i'd like to have
123:18 - them automatically added in now doing
123:21 - this is not extremely simple
123:23 - it requires that we go into our main
123:26 - config here so we need to go to apps and
123:28 - main config so inside of here we need to
123:30 - write some code that's a little bit
123:31 - complicated but i'll walk you through it
123:33 - so i'm going to say from django.conf
123:36 - import and then we're going to import
123:38 - settings and we're going to write a
123:40 - method here called ready
123:42 - now this is going to be called as soon
123:44 - as this app is registered
123:46 - and ready to use essentially and then
123:48 - inside of here it's important you do the
123:50 - imports in here if you don't do them in
123:52 - here you're going to get an error
123:53 - because you need to load the app first
123:55 - before you can import this we're going
123:56 - to say from django.contrib.off
124:00 - dot models import and then import group
124:04 - and then we're going to say from
124:06 - django.contrib
124:08 - dot actually not contrib sorry from db
124:13 - dot models dot signals
124:15 - import post save
124:18 - okay we're now going to write a method
124:20 - inside of here or a function called add
124:22 - to
124:23 - default underscore group
124:26 - and we're going to say sender
124:28 - asterisk actress kwargs like that we're
124:31 - going to say user is equal to quarks and
124:34 - this is going to be
124:35 - instance okay we're going to say if
124:38 - kwargs
124:39 - and this is going to be
124:41 - created
124:43 - then we're going to say group
124:45 - ok
124:46 - is equal to and that's going to be
124:48 - group.objects.get or create name is
124:50 - equal to default okay i'm going to say
124:53 - group
124:55 - dot user underscore set
124:57 - dot add and we're going to add the user
125:00 - to it
125:00 - now i know this is a lot we have one
125:02 - more line here we're going to say post
125:04 - underscore save
125:05 - dot connect and we're going to say add
125:07 - default group and then this is going to
125:09 - be sender is equal to settings dot and
125:11 - then this is going to be auth user
125:13 - underscore model
125:15 - okay
125:16 - let me walk you through this i know
125:18 - that's a lot of stuff to look at so we
125:20 - imported settings and then we're hooking
125:21 - into this ready method again this will
125:23 - be called as soon as the app is ready
125:25 - then we can import these two things if
125:26 - you try to do this before
125:28 - you put those up here you're going to
125:29 - get an error so make sure you import
125:30 - them inside of here
125:32 - we're then writing essentially what we
125:34 - want to happen
125:35 - whenever the auth user model is created
125:39 - so i'm saying postsave.connect now that
125:41 - says okay after this model here is saved
125:45 - what do we do so every time we create a
125:46 - new user we're going to call this
125:49 - function right here and we're going to
125:50 - pass to it a sender as well as quarks
125:53 - now instead of quarks we're going to
125:54 - have an instance the instance is the
125:56 - user model that was created and we're
125:59 - saying if that user was successfully
126:01 - created then we're going to check for
126:03 - the group default so either get it or
126:04 - create it and we're going to add the
126:06 - current user to that group
126:08 - easy as it is i know it looks really
126:09 - complicated but that's what's going on
126:11 - and this happens again we we add this
126:14 - connector so that every time a new user
126:16 - is created it's going to automatically
126:18 - be added to the group it's kind of
126:20 - waiting for something to be saved and
126:21 - then once it's saved it runs this code
126:23 - right
126:24 - there you go so that is how we do that
126:26 - now every user will by default be added
126:28 - to that group
126:30 - and we are pretty much good to go that's
126:32 - almost everything i need to show you
126:34 - although we need to test the band user
126:36 - feature and see if that works so let's
126:37 - run
126:39 - uh our server here so let's go actually
126:41 - back here looks like it's already
126:43 - running so that's good
126:45 - let's now refresh
126:47 - let's log out and let's create a new
126:49 - user and see if they are added by
126:51 - default to that group so we can just go
126:54 - new
126:55 - new
126:56 - gmail.com let's type in our password
127:00 - okay register
127:03 - and now let's see if we can make a post
127:06 - and we can because we were added to the
127:08 - default group nice so let's make a post
127:10 - let's go hello world what is up okay
127:14 - post i'm very creative i know let's now
127:17 - log out and let's sign in as our super
127:19 - user okay and let's now ban new
127:23 - okay so i've banned i'm not getting any
127:25 - feed feedback because i haven't
127:26 - implemented that but that's fine
127:28 - so now let's go and sign in as new
127:31 - okay
127:32 - and
127:34 - now let's see if i can make a post
127:36 - and okay i was able to make a post so
127:39 - that was not working as i anticipated so
127:42 - let me have a look at what's going on
127:44 - here and i'll be right back all right so
127:46 - i've found the issue here the issue is
127:47 - that we did not actually ban the user
127:49 - and i saw that it because if i go to
127:51 - retool here you can see that new is
127:53 - still in the default group so they were
127:54 - not actually banned or removed from that
127:56 - group so what i'm going to do is go here
127:58 - and just change some of this code
127:59 - because i messed it up so rather than
128:01 - objects
128:02 - we're going to do dot get here for the
128:04 - group so this is group.objects.get and i
128:07 - can just say name and then same thing
128:08 - here
128:10 - dot get i think that should fix it
128:12 - because that's the only change i'm
128:13 - seeing for now
128:15 - we also have if user and
128:17 - request.user.staff
128:19 - there is potentially an issue with the
128:20 - user id so let's just have a look here
128:23 - in the home template and make sure we've
128:25 - done this correctly okay so it is user
128:26 - id
128:27 - post.author.id that should be fine
128:31 - let's try this one more time we're going
128:33 - to try to ban the the new user so let's
128:35 - go here let's log out
128:38 - and sign in okay and let's go to new and
128:41 - ban user now let's see if that worked so
128:44 - let's refresh here
128:45 - and notice new is now has the default
128:47 - group moved okay so that did work
128:49 - changes are all good so now let's sign
128:51 - in as new
128:53 - all right
128:55 - and
128:56 - now let's try to post
128:58 - and notice we cannot post because we
129:00 - have been banned awesome okay so that is
129:03 - pretty much all i had to show you
129:04 - related to the groups and permissions
129:07 - now this is a general introduction of
129:09 - course i could spend like seven hours
129:10 - showing you all the built-in features in
129:12 - django there's a lot more stuff with
129:14 - permissions and i'm gonna get you to
129:16 - reference the documentation to see how
129:17 - that works but you now generally know
129:19 - how to restrict page access how to show
129:22 - different features to different people
129:24 - you know how to set up groups i think i
129:26 - gave you a good amount of knowledge to
129:27 - get started here so the last thing that
129:29 - i would like to do here is go to retool
129:32 - and i want to build out that dashboard
129:33 - that you saw at the beginning where
129:34 - we're able to see some you know nice
129:36 - graphs
129:37 - we already have this form that we made
129:39 - but we can see the breakdown of users by
129:42 - their group we also will be able to see
129:44 - the number of posts number of
129:45 - registrations per day a bunch of stuff
129:47 - that you can't easily add to an admin
129:50 - dashboard right so the admin dashboard
129:51 - is useful
129:52 - but retool can kind of replace that for
129:55 - you and just make it a lot more
129:56 - interactive and easier to see so let's
129:59 - start building that out now let me just
130:00 - make this full screen
130:02 - we want to add the following so we're
130:05 - going to add a graph for the users by
130:08 - group we're going to have one for new
130:10 - users
130:11 - per day and then we'll have the post per
130:13 - user um that we're showing i guess so to
130:16 - do that let's grab some graphs there's a
130:19 - bunch of different things you can see
130:20 - here or charts i guess you'd call them
130:23 - uh so let's have this chart okay
130:26 - let's insert another chart
130:29 - where was it all the way down here
130:32 - okay
130:33 - and let's add another one
130:37 - let's go chart
130:39 - and
130:40 - let's drag that in okay
130:42 - all right so for this first chart here
130:45 - uh let's change the data source to b
130:48 - let's use the drop down here
130:50 - this is going to be get user groups okay
130:53 - and we don't want a bar chart we want a
130:55 - pie chart and we want the value labels
130:58 - here to be group name now for the data
131:01 - set we're just going to hit new here and
131:04 - sum now that's what this is doing we
131:05 - have data series 1 okay and the
131:07 - aggregation method is sum which
131:09 - essentially means we're just going to
131:10 - sum all of the different groups that we
131:12 - have right so if we have four default
131:14 - users you know add those all together we
131:16 - get a value of four we display that in
131:18 - the pie chart null just means you don't
131:20 - have any groups that would be like our
131:21 - admin users and then mod of course is
131:23 - our mod user so in this case we have
131:24 - three default users one mod user and one
131:26 - null user now it is worth mentioning
131:28 - that these can overlap like a user can
131:30 - be a default user as well as a mod um
131:33 - that's possible of course
131:35 - but that's it for the pie chart now we
131:36 - can add a title for this if we want and
131:38 - say
131:40 - users by group
131:41 - okay nice
131:43 - and now let's go to the second chart so
131:44 - for the second chart i'd like to see the
131:46 - number of new users we have per day this
131:49 - one is a little bit more complicated to
131:50 - write
131:52 - but let's do it anyways so to do this
131:54 - i'm going to write a javascript
131:55 - transformer because i need to write
131:58 - something that's going to give me
131:59 - essentially how many users i have per
132:01 - day right and that's you know not
132:02 - trivial to write a query for
132:04 - so let's have users
132:07 - per day and the way we're going to get
132:09 - this information is we're going to look
132:10 - at the users table so if i were to run
132:13 - this
132:14 - and we're going to look at when they
132:15 - joined and we're going to put a graph
132:17 - there now this is a common thing you'd
132:18 - probably want to see some information
132:20 - about you know how many daily average
132:21 - users you have so let's write that so
132:23 - users per day so inside of here we're
132:25 - going to say const rv standing for
132:28 - return value and we're going to say 4
132:30 - and we're going to get the date
132:33 - of and then this is going to be the
132:36 - get users so let's have
132:38 - get underscore users like that dot and
132:41 - then this is going to be date
132:43 - or sorry not date.data and then dot
132:46 - datejoint so what i'm going to do here
132:48 - is i'm going to look at all my date
132:49 - joins these are what they look like i'm
132:51 - going to grab the individual date and
132:53 - i'm going to push that into rv then i'm
132:56 - going to count how many of those dates
132:58 - exist and however many of those dates
133:00 - exist well that's how many people on
133:02 - that date joint so pretty
133:04 - straightforward actually let me just
133:06 - write this out first so string date is
133:07 - equal to date
133:09 - dot split let's split this at t then
133:12 - we're going to grab the first aspect of
133:13 - that i don't know
133:15 - sorry this is date if that's going to
133:16 - give me a preview of it right now okay
133:18 - doesn't look like it but then what i can
133:19 - do is just rv.push
133:21 - and push in the string date
133:24 - okay and then just return the rv
133:28 - so let's just save and preview that and
133:31 - then notice this is what i get inside of
133:33 - my array so now that i have this right
133:34 - they're all on the same day because i'm
133:35 - doing this well today
133:37 - but i can just count how many of those
133:38 - there are similar to the pie chart and
133:40 - just display that on the chart so here
133:43 - rather than get users let's use the drop
133:45 - down here and let's select
133:47 - users per day and okay that's
133:50 - interesting that's not exactly what we
133:51 - wanted
133:52 - we can remove some of these data sets
133:55 - because we only need one data set all
133:57 - right so for this chart here i've just
133:59 - cleared pretty much everything in here
134:00 - and i've selected uh use
134:03 - users per day as my data source now i
134:05 - want this to be bar chart and i need to
134:07 - make a new data set here so i've cleared
134:10 - all those out right so now let's make a
134:11 - new one this is going to be count and
134:14 - what i want to count here is
134:17 - the following
134:19 - so it's going to be users per day dot
134:21 - value so we count how many of those we
134:23 - have and then this is going to be
134:27 - users
134:28 - okay
134:29 - so now that we have that
134:31 - we need to make it so that we have some
134:33 - x-axis values
134:35 - or what we're i guess we can't actually
134:36 - group by we need some x-axis values so
134:38 - the x-axis values here
134:40 - are going to be
134:42 - the users per day dot value so all those
134:45 - values that we have
134:47 - now let's just put this down on a new
134:49 - line just so it's a bit big enough that
134:51 - we can actually see it okay uh would it
134:53 - do to our other chart we'll move that in
134:55 - a second okay so i've kind of just
134:56 - re-jigged this a bit so that's easier to
134:59 - see
135:00 - but we have this graph here right
135:02 - and it's showing us that we had five
135:04 - users on march 18th now of course if we
135:06 - made more users it would show them in
135:07 - different bars but that's fine for now
135:10 - okay let's give this a title though
135:12 - the title should be
135:14 - users
135:16 - per day okay
135:17 - and lastly we want something that gives
135:19 - us the number of posts that each user
135:22 - has so this is a little bit more
135:24 - complicated again
135:25 - we need to write a sql query that
135:27 - essentially will count the number of
135:29 - posts per user so to do that i'm going
135:31 - to say
135:32 - resource query
135:34 - let's have a new one down here um no i
135:37 - want to save that so let's save for
135:39 - query seven we're going to call this
135:41 - posts
135:43 - per
135:44 - underscore user now i can make this pop
135:46 - out so let's just pop this out so it's a
135:48 - little bit easier to see and we're going
135:50 - to say select
135:51 - and we want username
135:53 - and then we want to count
135:55 - the main underscore post
135:58 - dot id
136:00 - as post
136:01 - from and then this is going to be auth
136:03 - underscore user and we're going to left
136:06 - join
136:07 - on main post which shows us our posts
136:09 - right and then this is going to be on
136:11 - the auth user dot id is equal to the
136:14 - main post dot and then author id
136:18 - and we're going to group all of these by
136:21 - the auth user dot id
136:23 - okay
136:24 - so let's
136:25 - now save and preview that
136:28 - and let's go here
136:30 - and actually make that a bit larger
136:32 - notice susan has one post tech with tim
136:33 - zero joey zero and jimmy zero uh jimmy
136:36 - did i create a jimmy user i guess i must
136:38 - have accidentally created one um or oh
136:41 - i'm using the wrong database sorry let's
136:43 - go to jango tutorial
136:44 - let's rerun that
136:46 - and that's better let me make sure that
136:48 - i wasn't using the wrong database on any
136:50 - of the other ones okay no it looks like
136:52 - i was using the right one i just
136:52 - selected the wrong resource okay rerun
136:55 - and yeah that's better all right so now
136:57 - that we have that we're gonna go to this
136:59 - chart here and we're going to change
137:00 - this so that now it shows us well the
137:02 - number of posts per user so we can say
137:05 - posts per user
137:08 - okay
137:09 - for our data this is going to be
137:12 - posts per user.data
137:16 - okay
137:17 - there we go
137:18 - and then for x-axis values those will be
137:21 - usernames but we need a data set
137:23 - and the data set that we want here or
137:25 - data series whatever you want to call it
137:28 - i guess we can say that this is going to
137:30 - be posts and we want to have no
137:33 - aggregation method because we've pretty
137:35 - much already done the aggregation method
137:37 - and then this is going to be posts
137:39 - per
137:41 - dot user.data.posts
137:42 - okay so then we get zero zero one one
137:44 - zero okay that's what we wanted uh it's
137:46 - still showing us the passwords here
137:49 - let's change that okay username there we
137:51 - go that's better that's what i was
137:52 - looking for okay that's what we have so
137:54 - we have susan tim tim new joey we have
137:56 - tim with one pose new with one post and
137:58 - then the rest with zero this is a bar
138:00 - chart of course we could change this if
138:02 - you want if you want a line chart if you
138:03 - want a scatter plot if we want pie chart
138:05 - uh whatever you want although i guess
138:07 - what makes most sense is going to be
138:08 - bartra nice
138:10 - okay so now that we have done that that
138:13 - pretty much wraps up what i wanted to
138:14 - show you for this video so we create a
138:16 - cool retool dashboard that allows us to
138:18 - view the users as well as what groups
138:20 - they're in
138:21 - allows us to view all of the different
138:23 - posts that we have so i'm just viewing
138:24 - them in here but we can also view them
138:26 - in kind of a graph format like this we
138:28 - have the ability to actually make
138:29 - changes on our database and of course i
138:32 - can add other queries for other
138:33 - databases if i wanted to make this a
138:35 - larger dashboard and view some more
138:37 - things now one thing you can do here is
138:39 - you can actually share this right so you
138:41 - can share this as an editor so if you
138:44 - add people to your retool organization
138:46 - then they can come in here and edit the
138:47 - dashboard you can allow people just to
138:49 - view the application who aren't editors
138:51 - who are also in your retool account or
138:53 - organization or whatever it is and then
138:55 - you have public access if you enable the
138:57 - public link then you can give this to
138:59 - anyone and they can go in there and have
139:00 - a look uh you could add password
139:02 - protection whatever so you can share
139:03 - this dashboard with people and that's
139:04 - kind of one of the cool things right is
139:05 - that you could make this for someone in
139:07 - your organization who is not technical
139:09 - and then they can come in and
139:10 - everything's just done for them they
139:12 - don't have to deal with django admin
139:13 - they don't have to set up a local
139:15 - project they can you know manipulate the
139:16 - database as they see fit of course you
139:19 - can also preview this so if you preview
139:21 - the application then we can view it in
139:22 - this mode which obviously looks a lot
139:24 - nicer
139:25 - and you know i can use this as i would
139:26 - before right so i can navigate between
139:28 - here i can change maybe new let's add u
139:31 - to the mod group
139:33 - and if i do that
139:34 - then here if i refresh
139:36 - it will show that now new is in the mod
139:38 - group all right so with that said i am
139:40 - going to wrap up the video here again
139:42 - all of this code will be available from
139:44 - the link in the description another
139:46 - massive thank you to retool for
139:47 - sponsoring this video if you guys
139:49 - enjoyed make sure to leave a like
139:50 - subscribe the channel and i will see you
139:52 - in another youtube video
139:54 - [Music]
140:02 - you