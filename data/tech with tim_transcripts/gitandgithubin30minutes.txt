00:02 - [Music]
00:08 - hello everybody and
00:09 - welcome to this get slash github
00:11 - tutorial
00:12 - in this video i'm going to be showing
00:14 - you everything you need to know about
00:15 - git slash github to get started as
00:17 - fast as possible now yes this video is
00:20 - fairly long but it's because i really
00:22 - want to make sure you understand
00:23 - how git and github work the differences
00:26 - between them and what these commands
00:27 - actually do
00:28 - with that said what i'm going to be
00:30 - covering here is initializing a local
00:32 - repository i'm going to be talking about
00:34 - tracked files
00:35 - untracked files staged changes and
00:37 - unstaged changes
00:38 - as well as branches remote repositories
00:41 - and all of those other things that you
00:42 - just really need to know and are
00:43 - fundamental to git
00:45 - and github after this video you should
00:47 - be comfortable using these two tools
00:49 - and in any kind of industry environment
00:51 - you're probably going to know about 90
00:52 - of the commands that you need to so
00:54 - anyways let's get into the video
00:56 - after a quick word from our sponsor
00:58 - before we dive in i need to thank code
01:00 - cloud for sponsoring this video
01:02 - and talk to you about an awesome
01:03 - platform called code cloud engineer
01:05 - code cloud engineer is an all-in-one
01:07 - platform designed to make you an expert
01:09 - in devops technology
01:10 - and the best part is that it is
01:12 - completely free once you register on
01:14 - code cloud engineer you will start
01:15 - working as a systems administrator
01:17 - at a fictional company and move up in
01:19 - the ranks as you gain experience
01:21 - as you complete tasks related to bash
01:23 - linux networking
01:24 - ci cicd and many other devops related
01:27 - topics you'll be promoted to a devops
01:29 - engineer
01:30 - senior devops engineer and finally a
01:32 - devops architect
01:33 - this structure allows you to simulate
01:35 - what it's actually like to work as a
01:36 - devop engineer
01:37 - at different levels and develop the
01:39 - necessary skills you need
01:41 - code cloud has hundreds of tasks
01:42 - explanation videos and three large
01:44 - projects you can complete
01:46 - you'll start basic by learning about
01:47 - linux bash and common commands and move
01:49 - into working with databases
01:51 - system design and much more if you have
01:53 - any trouble doing your tasks you can ask
01:55 - other engineers for help or request a
01:57 - review of your work
01:58 - code cloud engineer has over 3 600
02:01 - engineers on the platform
02:02 - many of which have landed jobs at tech
02:04 - companies like dell
02:05 - apple google microsoft and many others
02:08 - get started today
02:09 - for free by signing up from the link in
02:11 - the description so we'll get into the
02:13 - commands in one moment but i want to
02:14 - quickly describe the difference between
02:17 - git and github so when we talk about git
02:20 - we're talking with the actual version
02:22 - control software
02:23 - now typically git is run as a command
02:25 - line tool and it's run
02:27 - locally on your machine this is the
02:29 - software that we're actually going to
02:30 - install before we get into all of the
02:32 - commands
02:33 - now what git does is it allows you to
02:35 - track your code and version history
02:37 - it allows you to work on different
02:39 - versions or different branches of a code
02:41 - base
02:41 - and it helps everybody synchronize their
02:43 - different versions of code so
02:45 - say a local repository versus a remote
02:47 - repository
02:48 - how do you sync those repositories
02:50 - together well you can use git to do that
02:52 - now this differs from github these are
02:54 - two separate things
02:55 - github is a web application or a website
02:58 - that hosts
02:59 - remote git repositories it's owned by
03:02 - microsoft and it's deeply integrated
03:04 - with git
03:05 - and really what it does is it just
03:06 - provides extra functionality on top of
03:08 - git
03:09 - and kind of a nice user interface to use
03:11 - git on
03:12 - now github is usually used by teams of
03:14 - two or more people
03:15 - the reason for this is that when you
03:17 - have a remote repository
03:18 - anyone can access this repository from
03:21 - anywhere around the world
03:22 - and so that would be kind of where your
03:24 - main code base lives and then all of
03:26 - your developers would have a copy of
03:28 - this code base on their local machine so
03:30 - a local git repository
03:32 - and then when they make changes locally
03:33 - they would push those changes up to the
03:35 - remote repository
03:36 - that's hosted on github so those are
03:38 - kind of the differences between git
03:40 - and github of course there's a lot more
03:42 - but just understand that because git and
03:44 - github are different
03:45 - and really what i'm going to be covering
03:46 - here is git although i will show you how
03:48 - we can host a remote
03:50 - github repository so i figured i would
03:52 - include this step in case any of you
03:54 - haven't already done this you do need to
03:55 - install git so to do that you need to
03:58 - download git from this website i'll
04:00 - leave a link in the description
04:01 - choose the appropriate version mac
04:03 - windows or linux and then run the
04:05 - installer with the default options you
04:07 - obviously can change them if you want
04:08 - the default is totally fine
04:10 - and then you'll be ready to follow along
04:11 - with this tutorial so now that we've
04:13 - installed
04:14 - git we can actually create our first git
04:16 - repository
04:17 - what we're going to be doing is
04:18 - initializing what's known as a local
04:19 - repository
04:20 - this differs from a remote repository
04:22 - because a local repository lives on your
04:25 - local machine on your actual file system
04:27 - whereas a remote repository would live
04:29 - somewhere like github
04:30 - anyways the command to initialize an
04:32 - empty git repository is
04:34 - get init now don't type this in yet or
04:37 - don't press
04:37 - enter yet until you've changed the
04:39 - directory of your command prompt or
04:41 - terminal to be in the folder where you
04:43 - want to initialize this repository for
04:45 - now a repository is really just like a
04:47 - project just like you may have a folder
04:49 - that stores all of the information or
04:51 - all of the code relating to a website
04:53 - well you would have a git repository
04:54 - that has all of the files related to
04:56 - that
04:57 - website so what i've actually done is
04:58 - i've created a folder here on my desktop
05:00 - it's called get
05:01 - demo i've opened it up here instead of
05:03 - sublime text this is just a lightweight
05:05 - code editor that i like to use for
05:07 - videos you can download it from the link
05:09 - in the description
05:10 - anyways you don't need this but what you
05:12 - do need to do is open up your command
05:13 - prompt or terminal
05:14 - you will likely be in your home folder
05:17 - when you first open this
05:18 - and you need to navigate to the folder
05:20 - or directory you want to initialize this
05:21 - repository for
05:22 - please do not initialize a repository in
05:24 - your home folder that means all of the
05:26 - files in
05:27 - your home folder including all of the
05:29 - subdirectories will be a part of that
05:31 - git repository which is just not ideal
05:33 - and you do not want to have that
05:35 - so what you're going to do is go cd and
05:37 - then change
05:38 - directory to whatever location you need
05:39 - to go to in this case i'm going to go to
05:41 - my desktop
05:42 - and then i'm going to go to my git demo
05:44 - folder
05:45 - now here's a little shortcut for you
05:46 - guys if you are on windows what you can
05:48 - do is actually use the regular file
05:50 - explorer to navigate to your
05:52 - folder you can see i have get demo open
05:54 - right here you can go
05:55 - inside of this address bar here and type
05:57 - cmd
05:58 - and it will actually open up a command
06:00 - prompt that is in that location you can
06:02 - check that by looking at the path right
06:03 - here that's showing up
06:04 - so now that i'm inside of this folder
06:07 - right here in my command prompt what i'm
06:08 - going to type is get
06:09 - init and press enter this will
06:11 - initialize an empty git repository it
06:13 - shows you the path that initializes
06:15 - initializes it in sorry and you can see
06:17 - that what it actually does is create an
06:19 - empty folder
06:20 - called dot git this folder indicates
06:22 - that everywhere inside of this directory
06:24 - is a part of this git
06:25 - repository and if you open up this
06:27 - folder here you can see a bunch of
06:28 - information relating to the repository
06:30 - now the reason i'm able to see this
06:32 - folder and many of you won't see it is
06:33 - because i have hidden items
06:35 - showing in my file explorer if i uncheck
06:37 - that you see it goes away
06:39 - so it is actually a hidden folder the
06:41 - way you can see it if you're on windows
06:42 - at least is you can check hidden items
06:44 - if you're on mac i believe you can right
06:46 - click in the finder and there's
06:47 - something that
06:48 - shows hidden items although i may be
06:50 - incorrect but that anyways you don't
06:51 - have to worry about this folder but if
06:53 - you wanted to delete this git repository
06:54 - you would need to delete this folder so
06:56 - you would just delete it like that
06:57 - don't worry that won't delete any of
06:58 - your files it will just delete the
07:00 - information relating to the versions of
07:02 - all of those files
07:03 - now it's worth noting that you can
07:04 - initialize a git repository in a
07:06 - directory where files already exist or
07:08 - where there's already code written
07:10 - that's totally fine all that means is
07:12 - that anything that you've done before
07:13 - you initialize the repository
07:15 - will not be tracked by git so the
07:17 - version controller the version history
07:19 - of that story
07:20 - will not be tracked by git because well
07:22 - git wasn't tracking it when you
07:23 - originally wrote that code
07:24 - so now that we've initialized our first
07:26 - git repository it's a good time to
07:28 - discuss
07:28 - tracked versus untracked files and then
07:31 - the staging area
07:33 - in git now first i must correct myself
07:35 - previously i was saying that wherever
07:37 - you initialized a git repository
07:39 - all of the files that were in that
07:41 - directory would automatically
07:42 - be a part of that repository that is
07:46 - incorrect you actually need to manually
07:48 - add files
07:49 - to the git repository which i will show
07:51 - you now
07:52 - so we're talking about git we have this
07:54 - thing called the staging area
07:56 - we have this concept of tracked and
07:58 - untracked files
07:59 - right now i have three files here and
08:01 - these three files
08:03 - currently are being untracked you can
08:04 - see as i highlight these little bubbles
08:06 - in sublime text it's saying
08:07 - untracked what that means is that git is
08:10 - currently
08:11 - not keeping track of these files so any
08:13 - changes that i make to these files
08:14 - git does not care about it's not saving
08:16 - it doesn't know
08:18 - because we have not added these files to
08:20 - what's known as the staging area and
08:22 - started tracking
08:23 - now the way that you can see if you have
08:24 - any untracked files is you type a git
08:27 - status in your command line here so when
08:29 - you type git status it will tell you a
08:31 - bunch of information some of which is
08:32 - not really relevant right now
08:34 - but notice it says untracked files and
08:36 - it shows us these three files right here
08:39 - so this means that if i do make a commit
08:41 - right now which i'll discuss what that
08:43 - is
08:43 - these three files will not be a part of
08:45 - it so now let's
08:46 - briefly discuss commits and kind of the
08:49 - workflow in get
08:51 - so in git we have three main areas we
08:53 - have our local area
08:54 - we have the staging area and then we
08:56 - have a commit or the actual
08:58 - repository so when we're discussing our
09:01 - local area that's stuff that you see
09:03 - that stuff that's on your file system
09:04 - these three files here
09:06 - even though they're not a part of the
09:07 - git repository they do live on our file
09:09 - system they're in our kind of
09:10 - local file area whatever you want to
09:12 - call it then we have a staging area
09:15 - what the staging area is is a temporary
09:17 - area that allows you to decide
09:20 - what files and what changes you want to
09:22 - be a part of a commit
09:23 - so if i wanted these files to be tracked
09:26 - by git i would add them to the staging
09:28 - area
09:29 - and then i would make a commit now what
09:31 - a commit is
09:32 - is kind of a bundle of changes so i like
09:35 - to think of a commit as a checkpoint
09:37 - every time you do something significant
09:39 - in git you should make a commit so if
09:41 - you fix a bug if you implement a new
09:43 - feature
09:44 - if you refactor some code anything that
09:46 - you'd want to potentially go back to in
09:48 - the future
09:49 - you would kind of bundle all of those
09:50 - changes in a commit
09:52 - and what the commit is is kind of a
09:54 - little dot on a timeline at least that's
09:56 - the way i like to think of it
09:57 - so whenever you make a commit git is
09:59 - actually storing that information
10:01 - and so you're able to go back to that if
10:04 - you say mess something up in the future
10:05 - you can go back to a previous commit
10:07 - however anything that you do not commit
10:09 - so any changes in between two commits
10:12 - you cannot get back to you can only get
10:14 - back to the state
10:15 - at a commit so hopefully that makes
10:17 - sense but you go from your local area to
10:19 - the staging area to a commit
10:21 - all of those commits are actually stored
10:22 - in the git repository
10:24 - and that's kind of the point the
10:25 - repository is to keep track of the
10:27 - version of code
10:28 - but you have to define what versions you
10:30 - want to store by creating
10:32 - commits at whatever point makes sense
10:34 - for you
10:35 - so now let me show you how we add these
10:36 - files to the staging area
10:38 - so the command to add them is git add if
10:41 - you want to add all of them you type
10:42 - git add dot if you want to add
10:44 - individual files you type git add
10:46 - and the name of the file so i'm going to
10:48 - add another dot pi to the staging area
10:51 - and if i type git status now it's going
10:53 - to tell me that i have
10:54 - some changes that are ready to be
10:56 - committed what that means is this file
10:58 - now is being tracked by git
11:00 - because it's been added to the staging
11:01 - area however these two files are
11:03 - untracked and not
11:04 - staged so i'm going to add another one
11:06 - i'm going to say git add
11:08 - and then test dot py and
11:11 - then if we look at git status we now
11:13 - have two files that are in the staging
11:15 - area
11:16 - and that are ready to be committed
11:19 - whereas this one is still
11:20 - not tracked now to remove a file from
11:23 - the staging area what you can do is type
11:25 - git rm hyphen hyphen cached
11:28 - then the name of the file so let's do
11:30 - test.py
11:32 - and now if you look at git status you
11:33 - can see it is untracked so let's add
11:35 - that one back in though test.py
11:37 - git status all right so now let me show
11:41 - you how we actually make a commit and
11:42 - what's going to happen here when we have
11:44 - these two files in the staging area
11:46 - and this one is not so to make a commits
11:48 - what you do is you type git
11:49 - commit hyphen m that stands for message
11:53 - and then you list the message that is
11:54 - associated with this commit afterwards
11:56 - now whenever you write a commit message
11:58 - it should be in present tense it should
12:00 - be relatively short and it should
12:02 - accurately describe in as few words as
12:04 - possible
12:05 - what the changes are that you made the
12:07 - reason for this is that when you're
12:08 - looking at commits later on and you need
12:10 - to roll back your code to something
12:11 - previous
12:12 - you want to actually be able to you know
12:14 - figure out what what you did in what
12:16 - commit if you're just typing you know
12:17 - commit one commit to commit three
12:19 - that's not very helpful so here i'm just
12:21 - going to say first commit
12:22 - this is valid because well this is
12:24 - actually our first commit
12:26 - but going forward i would want to
12:27 - describe the actual changes i made so
12:29 - like you know fix this bug
12:30 - implemented this feature so on and so
12:32 - forth all right so we typed that in now
12:33 - we can see we have two files changed
12:35 - three insertions that's just the number
12:36 - of lines that we actually inserted
12:38 - and then it gives us some information
12:40 - saying that we created two brand new
12:42 - files
12:42 - notice though there's no information
12:44 - relating to this not tracked file
12:45 - because well it's not tracked so if i
12:47 - type git status what you can see is this
12:49 - file still is not tracked
12:51 - all right so now let me make a change to
12:53 - this file here so let's delete this line
12:55 - print test and now what i'm going to do
12:57 - is type git status
12:59 - now when i type git status notice we
13:01 - have changes not staged for commit
13:03 - then we have untracked files so by
13:05 - default
13:06 - any of the files that were associated
13:08 - with the last commit
13:09 - are being tracked by git so any files
13:12 - that existed in the previous commit or
13:14 - the most recent commit
13:15 - in your repository they're being tracked
13:17 - so any changes that you make to them git
13:19 - is able to detect
13:21 - we can see that because it's telling us
13:22 - that we've modified this test.pi
13:24 - file even though i haven't manually
13:26 - added this to the staging area
13:28 - and that's simply because it's being
13:29 - tracked however this
13:31 - change has not been staged so again
13:34 - there's kind of a difference we have
13:35 - tracked files and then we have a staged
13:37 - changes or staged files so this tells us
13:40 - that that change we made to test.pi is
13:42 - not staged
13:43 - so this means that if i decide to make a
13:45 - commit now this modification will not
13:47 - actually be included in this commit
13:49 - because i've not staged that change so
13:52 - whenever you make a commit it's only
13:53 - things that are
13:54 - staged that will be a part of it so to
13:56 - actually stage this what you need to do
13:58 - is
13:59 - re-add this file to the staging area you
14:01 - type git
14:02 - add and then test.py and now if i type
14:06 - git status it's green
14:08 - because we've actually now staged this
14:10 - change so now if i decide to make a
14:12 - commit
14:13 - and i say you know changed and we can
14:16 - just say
14:16 - test dot py then that will actually be a
14:19 - part of the commit we have one file
14:21 - changed one insertion
14:23 - all right so let me just show you a few
14:24 - more examples here i'm going to make a
14:26 - change to not tracked i'm just going to
14:27 - say
14:28 - console.log and we'll just log
14:31 - test like that my semicolon and again
14:35 - notice here now if i type git status
14:37 - still not being tracked and now if i try
14:39 - to make a commit so
14:40 - git commit hyphen m and i say you know
14:43 - js or something
14:45 - nothing's going to happen the reason
14:46 - nothing happens and we get this message
14:48 - is because i didn't make any changes
14:50 - and while there is just nothing to
14:51 - commit all right so hopefully that is
14:53 - clear but that is how you make
14:54 - commits that is kind of the staging area
14:56 - and tracked versus untracked files
14:59 - now what i'm going to talk to you about
15:00 - is branches so what a branch is
15:03 - is really a variation of the code base
15:06 - now i would like to say
15:07 - version of the codebase but that has a
15:09 - little bit of a different meaning so i
15:10 - think variation is a better way
15:12 - to describe it but essentially the point
15:14 - of branches is that you can kind of
15:16 - have a branch that is say your master
15:18 - branch
15:19 - and the master branch is where all of
15:20 - your production level code is that's
15:22 - where stuff that's been tested
15:24 - that has been code reviewed and all of
15:25 - that is kind of going to be sitting and
15:27 - living so you're 100 sure
15:29 - that all of that code is perfect clean
15:30 - and up to standard
15:32 - whereas you may have some other branches
15:34 - where you're say working on a feature or
15:36 - you're doing something that's not yet
15:38 - quite
15:38 - finished and that you don't want to be
15:40 - living in say the master code base that
15:42 - all of the other developers are looking
15:44 - at
15:44 - you want to be kind of off to the side
15:46 - so that a few people can work on it
15:48 - without interfering with the main
15:49 - code base so hopefully that makes sense
15:52 - but what you can actually do with
15:53 - branches
15:54 - is you can branch off from other
15:56 - branches so you have
15:57 - one main branch and you would have seen
16:00 - this when i typed git status that says
16:02 - we're on at the
16:02 - master branch so the master branch is
16:05 - your standard
16:06 - default branch and then what you can do
16:08 - is branch off
16:09 - of that branch so we'll be at right now
16:12 - a certain commit right
16:13 - at this point in time the last commit is
16:15 - kind of the commit that this branch
16:17 - is at and so if i decide to create a new
16:20 - branch i will make a copy
16:22 - of this master branch at this point in
16:25 - time so whatever the last commit had on
16:27 - it
16:27 - will be what is on the new branch and
16:29 - then once i go on that new branch i can
16:31 - make commits to
16:32 - that branch without affecting the master
16:35 - branch
16:36 - so it's easier just to see this with an
16:37 - example but to go to a new branch you
16:39 - type get
16:40 - checkout hyphen b and then the name of
16:43 - the branch hyphen b
16:44 - just stands for new branch so what i'm
16:46 - going to type now is let's say
16:48 - i don't know new hyphen feature is our
16:50 - branch name
16:52 - and now i've switched to a new branch
16:53 - new feature so now what i can do is make
16:55 - some changes on this branch so let's
16:57 - just you know print test a few times
16:59 - here let's save this
17:01 - and just like we would do in a regular
17:03 - git repository like we've done before
17:05 - so we're going to add this change the
17:06 - staging area so git add and then another
17:09 - dot pi
17:10 - and it's worth noting that if you just
17:11 - want to add all files to the staging
17:13 - area you can type
17:14 - git add dot this will add everything in
17:17 - this directory to the staging area
17:19 - including this not tracked file here
17:21 - so now if i type git status you can see
17:23 - that this not tracked file new file
17:25 - and another dot pi has been modified and
17:28 - now what i can do is make a commit so i
17:30 - can say git
17:30 - commit hyphen m and i can say uh new
17:34 - feature on new branch or something like
17:36 - it doesn't really matter what i'm typing
17:38 - here because this is just an example
17:40 - but again usually you want to make these
17:41 - descriptive all right so now i have two
17:43 - files changed
17:44 - three insertions and notice that i have
17:46 - kind of these
17:47 - two test things inside of here right i'm
17:49 - printing tests three times sorry
17:51 - so now what happens if i go back to the
17:54 - master branch so i've made a commit on
17:56 - this branch
17:57 - and this commit does not affect my
17:58 - master branch so to get back to the
18:00 - master branch
18:01 - you can type git checkout and then the
18:03 - name of the branch that you want to move
18:05 - to
18:05 - so when i type git checkout master
18:07 - you're going to notice that this file
18:09 - now changes
18:11 - why does this file change well the
18:13 - reason it changes
18:14 - is because the commit that i made on the
18:17 - previous branch didn't affect this
18:18 - branch so any changes there did not
18:20 - affect what was here
18:22 - and notice that this not track.js file
18:24 - actually was deleted when i switched
18:26 - back over to the master branch
18:28 - because right now it only lives on that
18:31 - other branch now this is kind of a
18:32 - little bit of
18:33 - strange behavior some of you may be
18:34 - wondering why this happens but if you
18:36 - don't add a file to the branch and then
18:38 - you add it to a secondary branch
18:41 - and then you swap back to the master
18:42 - branch well it like deletes that file
18:44 - because that's the change in the two
18:46 - branches
18:46 - but since it was on that last branch
18:48 - that we're on to that new feature branch
18:50 - but it's not on the master branch git
18:51 - just removes it when we check out
18:53 - the master branch so i'm just going to
18:55 - remove this right here but then i'll
18:57 - show you if i go back to new feature so
18:59 - git
18:59 - checkout new feature then now that file
19:02 - is going to show up again you can see
19:03 - not track.js shows up and now another.pi
19:05 - has those changes i made on the previous
19:08 - branch
19:08 - so this branch is what's known as one
19:10 - commit ahead of the master branch
19:13 - the reason it's one commit ahead of the
19:14 - master branch is because if we're
19:16 - comparing it to the master branch
19:18 - there's one commit on this branch that
19:19 - does not exist on the master
19:21 - branch so that is really the basics of
19:24 - branches and you can kind of branch out
19:26 - as many times as you want so from this
19:27 - branch
19:28 - i can create a new branch i can say git
19:31 - checkout hyphen b i can say you know
19:34 - extended or something call it whatever
19:36 - you want and now on this branch i can
19:38 - make any changes that i want so maybe i
19:39 - go in test.pi
19:40 - and maybe i just print hello world a
19:42 - bunch of times and i save that
19:44 - and maybe i even delete a file right
19:46 - maybe i delete this not tracked file so
19:48 - we'll delete that file
19:49 - then i add all of this stuff to the
19:51 - staging area and i make a commit so get
19:53 - commit hyphen
19:54 - m or sorry just m not am i'm going to
19:56 - say
19:57 - removed file and change
20:00 - test.py and then what i can do now
20:04 - is go back to the previous branch and
20:06 - you'll see that this will not have
20:07 - affected that so if i say git
20:09 - checkout new hyphen feature uh oops
20:13 - i have to spell checkout correctly so
20:15 - git check out
20:16 - new feature then what you're going to
20:18 - see is well we get this file back
20:20 - test.pi goes back to normal another.pi
20:22 - is what it's at
20:23 - and then i can even check back out to
20:24 - the master branch so get checkout master
20:27 - and then from master branch i could even
20:29 - check out
20:30 - extended right and then i go back there
20:32 - so that's how the checkout command
20:34 - works now if you want to view all of the
20:36 - branches that you have you can type
20:38 - git branch this will show you all of
20:40 - them and the asterisks one
20:41 - is the one that you are currently on and
20:44 - yeah that is kind of the basics of
20:45 - branches
20:46 - so now what i can show you is what's
20:48 - known as merging branches now this is
20:49 - where it gets a little bit complicated
20:51 - but the idea is that we've made some
20:53 - changes on a branch right
20:55 - now these changes are good we've tested
20:56 - them we're ready to say put them into
20:58 - the master branch
20:59 - well how do we go about doing that well
21:01 - what we need to do is merge these two
21:03 - branches together specifically we're
21:04 - going to take all of the commits
21:06 - on say this extended branch or whatever
21:08 - branch it is that we want to merge
21:10 - and we're going to overlay them or kind
21:11 - of lie them down onto the master branch
21:14 - so it's hard to maybe visualize this but
21:17 - we're taking all the commits on one of
21:18 - these branches
21:19 - that are different than this master
21:21 - branch and kind of adding them in
21:23 - and trying to you know combine these two
21:25 - branches together
21:26 - so what i'm going to do is i'm going to
21:28 - type git merge
21:30 - and then i can type the name of the
21:31 - branch that i want to merge with the
21:33 - existing branch
21:34 - however i don't really want to merge
21:36 - anything on the extended branch
21:38 - what i want to do is actually go to the
21:39 - master branch and then take the work
21:41 - that i've done on the extended branch
21:43 - and bring that to the master branch so i
21:45 - can say git
21:46 - check out master and then i can type git
21:50 - merge extended now what this is going to
21:53 - do is take all of the work from the
21:55 - extended branch and just overlay it
21:57 - onto this branch so uh now i'm going to
21:59 - have this
22:00 - another dot pie i'm going to have this
22:02 - test dot pi i'm going to have all that
22:04 - work here
22:05 - and there we go okay so that's all great
22:07 - but now what i want to show you is
22:08 - what's known as a merge conflict which
22:10 - happens all the time is really annoying
22:12 - and you definitely need to know how to
22:14 - fix
22:14 - so a merge conflict arises when you try
22:17 - to combine two branches together
22:19 - that have conflicting changes now it's
22:21 - best just to show you this with an
22:22 - example
22:23 - let's say that i actually change this
22:25 - text here to say text and i change this
22:27 - to maybe say
22:29 - tim is great and then i want to make a
22:32 - commit
22:33 - so i can say git add dot although i'm
22:36 - going to show you a little shortcut here
22:37 - if you want to make a commit and just
22:38 - add
22:39 - everything from the current directory to
22:41 - that commit you can type
22:42 - git commit hyphen am and then the
22:46 - message so this means like add
22:48 - everything and then the message so the
22:50 - message in this case is going to be just
22:52 - test okay so i've now made this commit
22:56 - notice that i didn't have to add
22:57 - anything before that because i added the
22:58 - a
22:59 - now what i'm going to do is get to check
23:00 - out the extended branch
23:03 - and now that i'm on the extended branch
23:04 - i'm going to make a change so here we
23:07 - have hello world or something so i'm
23:08 - going to change this line to just be an
23:10 - empty string i'm going to say git commit
23:13 - hyphen
23:14 - am and i'll just say modify test dot py
23:17 - okay so now i'm going to go back to my
23:20 - master branch
23:21 - so get checkout master we should see
23:23 - this file change in one second
23:25 - yes it does and now i'm going to merge
23:28 - the extended branch with this master
23:29 - branch so i'm going to say
23:30 - git merge extended like that
23:34 - now when i do this notice that i get a
23:36 - conflict it says
23:37 - auto merging test.pi conflict content
23:40 - merge conflict in test.pi
23:42 - automatic merge failed fix conflicts and
23:45 - commit the result
23:46 - so you can see we're getting a little
23:48 - thing here and it's saying that
23:50 - we have a conflict and notice that now
23:52 - in this file it actually
23:54 - shows us the version of our current
23:56 - branch and then the version of the
23:58 - extended branch and so what we now need
23:59 - to do is
24:00 - fix this conflict so to fix this
24:02 - conflict what you need to do is just
24:04 - modify the file so it's what you want it
24:06 - to look like so
24:07 - what we can do is say all right do i
24:08 - want the changes from this current
24:10 - branch do i want the changes from the
24:12 - extended branch or do i want a
24:13 - combination of both
24:15 - now what i can do is just delete this i
24:17 - also could leave this in
24:18 - leave this in if i want i don't have to
24:20 - remove that
24:21 - and then i'm going to save this file so
24:23 - once i've kind of fixed those changes
24:25 - then what i do now is i continue this
24:29 - merge okay so now that i fix this
24:31 - conflict what i do is i commit
24:33 - the result so this is what's known as a
24:35 - merge commit so i can say git
24:37 - commit hyphen m and i can just say merge
24:41 - extended okay so i realize i first need
24:43 - to add these files to the staging area
24:45 - sorry so i'm just going to type git
24:46 - commit hyphen am
24:47 - merge extended and then we are all good
24:50 - now notice it's not telling me there was
24:51 - any insertions or deletions
24:53 - the reason for that is because this was
24:55 - a commit simply to fix that merge
24:57 - conflict that we had so now the last
24:59 - thing that i need to show you is remote
25:01 - repositories so what i'm going to do is
25:03 - open up
25:04 - github and i'm going to create a new
25:06 - remote repository and be right back
25:08 - so now we've discussed most of the core
25:09 - commands and git that you need to know
25:11 - of course there's many many many more
25:13 - and i welcome you to look them up on
25:15 - your own
25:16 - however we're going to talk about remote
25:17 - repositories now so i'm on github you do
25:19 - need to make an account for this to work
25:21 - and what we're going to do is create a
25:22 - new repository so go and press this plus
25:24 - button up here
25:25 - and you can either import a repository
25:27 - do all this kind of stuff or create a
25:28 - new one which is what we're going to do
25:30 - so we're going to input the name here
25:32 - the name can be whatever i'm just going
25:33 - to call this test
25:35 - repo and then obviously it'd be a good
25:36 - idea to put a description you make this
25:38 - public or private i'll just make mine
25:40 - public for right now
25:41 - and then you have some options right
25:43 - here so if you are going to be importing
25:46 - an existing repository you don't want to
25:48 - select any of these now what that means
25:49 - is you've already worked on some code on
25:51 - your machine
25:52 - you're not starting completely from
25:54 - scratch and you want to actually upload
25:56 - that code to github then you wouldn't
25:58 - select any of these
25:59 - however if this is the first time you're
26:01 - kind of creating any repo whatsoever
26:03 - you would check one of these and i'll
26:04 - kind of go through both options with you
26:06 - in a second but for now we're not going
26:07 - to press these because we want to take
26:08 - the code that we have on our machine and
26:10 - kind of upload it to github
26:12 - so now i'm going to press create
26:13 - repository all right so now you can see
26:15 - some instructions are showing up on the
26:16 - screen on how we can actually upload our
26:18 - repository here now there's a few
26:19 - different ways to do this i'm going to
26:20 - show you the simplest way
26:22 - so notice it's kind of assuming here
26:24 - that we haven't already initialized a
26:25 - repository so it's telling us you know
26:27 - get a net
26:28 - get add readme git commit we've already
26:30 - done all of that and then what this
26:31 - actually does get branch hyphen
26:33 - m main is it renames the branch our
26:36 - master branch to main
26:38 - now the reason for this is github has
26:39 - recently changed master to main i won't
26:41 - go through the reasons behind why they
26:43 - did that
26:43 - but anyways on our local machine our
26:46 - main branch
26:47 - is called master and so we must rename
26:49 - it to main
26:50 - so kind of these three steps here what
26:52 - we need to follow along with the
26:53 - important thing is that you take
26:54 - this url if you grab this url here so
26:57 - whatever your kind of username is and
26:58 - then the name of the repo
27:00 - then you don't need to reference this
27:01 - page anymore i'll show you how we can do
27:02 - this
27:03 - so what i'm going to do now is i'm going
27:05 - to go here to my
27:06 - kind of terminal and i'm going to start
27:08 - by renaming my master branch to main so
27:10 - to do that i'm going to say
27:11 - git branch and first actually need to
27:13 - make sure i'm on the master branch so
27:14 - i'm going to say git
27:16 - checkout master i'm already on master
27:18 - that's good okay so now i'm going to
27:19 - rename it so git
27:20 - branch hyphen main i've now renamed this
27:24 - branch so now if i type
27:25 - get branch git
27:29 - branch like that you can see this is now
27:30 - called me all right now what i need to
27:32 - do is
27:33 - add what's known as the remote
27:35 - repository
27:36 - as kind of a like url to this repository
27:39 - so this line right here is what you're
27:41 - going to want to copy get remote at
27:42 - origin
27:43 - i'll just type it out git remote add
27:46 - origin now what this is saying is okay
27:48 - remote we want to add a location for a
27:51 - remote repository you can have multiple
27:53 - of these by the way you don't only have
27:54 - to have one
27:55 - and this is the name of that location so
27:58 - let's say you had like five or six
27:59 - different servers or you had different
28:00 - github repositories or something
28:02 - and you wanted to potentially push to
28:04 - multiple of them when i say push i just
28:06 - mean take the code locally
28:07 - and push it to those different
28:09 - repositories
28:11 - like upload it essentially to them then
28:13 - you could add different remote locations
28:15 - but git remote add
28:16 - the name of the location you can call
28:18 - this whatever you want but origin is
28:19 - kind of the standard
28:20 - and then space and then you're putting
28:22 - the actual url for that remote location
28:24 - which is well
28:25 - this and yours is going to be different
28:27 - so i'm going to press enter
28:28 - now it's going to add this as a remote
28:31 - if you type
28:32 - git remote you should actually see all
28:34 - of the ones you have in this case we
28:35 - just have origin
28:37 - so now all we need to do is type git
28:39 - push hyphen u origin master
28:41 - now what the hyphen u stands for is
28:43 - remember these settings
28:45 - and so git push is saying all right
28:47 - let's take all of this code that's local
28:49 - and let's put this somewhere else
28:50 - so when i say git push hyphen u it's
28:52 - saying all right we'll save the options
28:54 - i'm going to put here
28:55 - you then say where you actually want to
28:58 - push this code to
28:59 - and what branch you want to push it to
29:01 - so in this case i'm taking
29:02 - the origin that's that's where i want to
29:04 - send all of my local code to
29:06 - and i'm pushing the main branch so now
29:08 - if i type git push hyphen new origin
29:10 - main
29:10 - and i press enter it's going to take a
29:13 - second we will see that you know some
29:14 - like loading stuff is happening here
29:16 - and then if we actually go and refresh
29:19 - this page
29:20 - we're going to see that all of our code
29:21 - is now here we have another dot pi
29:23 - and test.pi on the main branch
29:26 - now what we can do though is we can push
29:28 - up multiple branches right so if i go to
29:30 - a different branch i say git
29:32 - checkout and let's just go to the
29:34 - extended
29:35 - branch like that i can actually push
29:37 - this branch again
29:38 - to the origin so i can say git and then
29:41 - i guess
29:42 - push origin and then i can choose
29:46 - the extended branch and now what this
29:49 - will do is push the extended branch so
29:51 - now
29:51 - if i actually refresh this here i can
29:54 - look at this little option here i can
29:56 - see that there's now another branch
29:57 - called extended and in this branch i
29:59 - will see some some different things
30:01 - so hopefully that is clear but that is
30:03 - how you push something up to a remote
30:05 - repository now sometimes other people
30:07 - will be pushing to a remote repository
30:09 - as well and your branch on your local
30:11 - machine may become
30:12 - outdated for example let's say we decide
30:15 - to add a readme here to the main branch
30:17 - i'm just going to
30:17 - keep it with a title that says test
30:19 - readme so i've just added that here from
30:21 - the actual
30:22 - github user interface and now this
30:24 - branch has one commit that is ahead
30:26 - of this branch right here so if i go
30:28 - ahead and get checkout main
30:30 - notice this says your branch is up to
30:32 - date with origin master that's actually
30:34 - not correct
30:35 - because now if i use the command git
30:37 - pull what this is actually going to do
30:39 - is pull all of the changes from the
30:40 - remote repository and update my local
30:43 - branch with
30:44 - those changes so here we now got a
30:46 - readme file and now if i
30:47 - come and look here we can see that this
30:49 - readme file does actually
30:51 - exist so hopefully that's kind of clear
30:53 - but if you want to get
30:54 - changes from the remote repository use
30:56 - git pull that will then update your
30:58 - local branch with
30:59 - those changes all right so now that
31:01 - we've covered that the last thing i want
31:02 - to show you is what is known as the git
31:04 - clone command so if you go into any kind
31:07 - of remote repository and you press this
31:09 - code button here you'll see that there
31:10 - is a url
31:12 - if you copy this url you can actually
31:14 - clone this repository
31:15 - to your local machine so in fact let's
31:17 - go to like a microsoft repository
31:19 - microsoft vs code github and i'll show
31:21 - you something that's not mine
31:23 - so here we go we have microsoft vs code
31:25 - i'm going to copy
31:26 - this url right here and then i'm going
31:28 - to be able to actually kind of clone
31:30 - this entire repository to
31:31 - my machine so what i can do now is i can
31:34 - kind of go in my command prompt here
31:35 - this is different from the repository
31:37 - we've been working on before so let me
31:38 - actually close this one
31:40 - and i can navigate say to my desktop so
31:41 - cd.dot
31:43 - and then i can type git clone and the
31:45 - url of the repository i want to clone
31:48 - when i type this it will likely take a
31:50 - second but it will start taking all of
31:52 - the files from that remote repository
31:54 - and actually putting them in a folder
31:55 - called vs code which is on my desktop
31:58 - alright so now if i go to my desktop i
32:00 - should see there's a folder called vs
32:02 - code there is a folder called vs code
32:04 - and it has
32:04 - all of that stuff from that remote
32:06 - repository that i just cloned
32:08 - so i'm going to delete that one because
32:09 - i don't really care about that but i was
32:10 - just showing you guys how you actually
32:12 - clone something
32:13 - now when you clone a repository by
32:16 - default there is a remote setup that is
32:18 - called
32:18 - origin so now if you make any changes to
32:20 - this repository on your machine and you
32:22 - want to actually
32:23 - change the remote repository what you
32:26 - can do
32:27 - is you can push whatever branch it is
32:29 - that you've worked on or whatever
32:30 - changes it is that you've made
32:31 - uh directly to the remote repository
32:33 - just by typing git
32:34 - push origin and then the name of the
32:36 - branch that you want to push you don't
32:38 - need to explicitly set the origin branch
32:40 - because when you clone a repository the
32:42 - origin is
32:43 - uh this url right here and so it's
32:45 - already set for you
32:47 - anyways i think that's all i want to
32:48 - cover for this video if you guys have
32:50 - any questions please feel free to leave
32:51 - them in the comments
32:52 - if you enjoyed make sure leave a like
32:53 - subscribe to the channel and i will see
32:55 - you in another youtube video