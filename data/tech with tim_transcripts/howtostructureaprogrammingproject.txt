00:00 - if you want to make an absolutely killer
00:02 - programming project that you can put on
00:03 - your resume share with recruiters and
00:06 - talk about interviews then make sure you
00:07 - do these 10 things they're super simple
00:10 - but they will make you stand out and
00:12 - they really do demonstrate to someone
00:13 - reviewing your project that you know
00:15 - what you're doing and you're worthy for
00:17 - a job or worthy at least for
00:19 - consideration now I'm someone who has
00:21 - reviewed literally hundreds of
00:22 - programming projects in fact on this
00:24 - channel we ran something called a
00:26 - timathon or a code jam and for that code
00:28 - Jam I had to review all kinds of GitHub
00:30 - repositories and literally hundreds of
00:33 - different projects going through those
00:34 - projects I've identified the few things
00:36 - that I think are really important yet
00:38 - super simple so make sure you watch this
00:40 - entire video to learn how you can stand
00:42 - out when making a programming project so
00:45 - the first thing that you need to do
00:46 - before you even start worrying about the
00:48 - structure of your code is understand
00:50 - what problem it is that your project is
00:53 - going to solve now you can just make a
00:55 - game and you can do something fun that's
00:57 - fine but a lot of times the best
00:58 - projects are actually solved loving real
01:00 - world problems and if you're in an
01:02 - interview the best thing you can
01:03 - possibly do to present your project is
01:05 - to start by talking about a problem you
01:07 - had and how you solve that with code
01:10 - even if it's not the most complicated
01:11 - problem in the world these make the best
01:14 - stories and the best type of projects I
01:16 - can tell you from experience I've done
01:18 - literally hundreds of programming
01:19 - projects and the ones that stand out the
01:21 - most are the simpler ones that solve a
01:23 - real world problem that's relatable to
01:25 - other people so make sure you understand
01:27 - the problem and you can explain that
01:29 - clearly now the next thing that all
01:31 - great programmers have in common is that
01:33 - they're subscribed to this Channel and
01:34 - they check out the sponsor of this video
01:36 - internext is the world's most secure
01:38 - cloud storage providing strong
01:40 - end-to-end encryption modern zero
01:42 - knowledge protocols and being entirely
01:44 - open source meaning your files are
01:47 - always a hundred percent private and
01:49 - secure now let me share with you a
01:50 - personal story as to why I've switched
01:52 - to cloud storage up until a few months
01:54 - ago all of my data existed on a local
01:56 - file server now this was great up until
01:59 - my province start experiencing wildfires
02:01 - flooding and random power outages I
02:04 - realized quite quickly that all of my
02:05 - data could be wiped out in a matter of
02:07 - seconds and everything I've worked for
02:09 - could be gone for that reason I switched
02:11 - to cloud storage for the reliability
02:13 - security and convenience of accessing my
02:15 - files from anywhere internax has all of
02:18 - these benefits and provides three main
02:19 - Services Drive photos and send they make
02:22 - it extremely easy to organize sync and
02:25 - share your different files and photos
02:26 - not to mention their extremely fast
02:29 - download and upload speed so you can
02:31 - skip waiting hours to back up your data
02:33 - if you want to test out internets for
02:34 - yourself and secure your data then click
02:37 - the link in the description and get
02:38 - access to a 25 discount on their
02:41 - lifetime plans that's right pay once and
02:44 - secure your data forever thanks to
02:46 - internext for sponsoring this video
02:48 - alright hopefully you guys are
02:49 - appreciating my sponsor Segways recently
02:51 - regardless let's move on to the next
02:53 - thing you need to do when you're working
02:55 - on a programming project now this is
02:57 - plan now you don't need to go crazy you
03:00 - don't need to create a ton of different
03:01 - system diagrams and sequence diagrams
03:03 - and all that fancy stuff you might see
03:05 - online but you really should spend a bit
03:07 - of time before you dive into your
03:09 - project and come up with a very basic
03:11 - plan for me I like to at minimum decide
03:14 - okay what tech stack am I going to use
03:16 - what database am I going to have what's
03:18 - my back end going to look like what's my
03:19 - front end going to look like and what
03:21 - are the general components in my system
03:23 - that I'm going to need now recently I
03:25 - posted a video where I talked about a
03:26 - python security system and in that video
03:28 - I showed you a bunch of design documents
03:30 - I created before actually writing by
03:32 - code that's really good practice and if
03:34 - you can talk about that in an interview
03:36 - or even have those design documents in
03:38 - your GitHub repo that's really going to
03:40 - stand out but if you don't want to go
03:41 - that far at minimum jot down a few
03:44 - things you should consider and start
03:45 - thinking about the big systems that
03:47 - you're going to have to build before you
03:49 - dive into the project so at this point
03:51 - you've understood the problem you've
03:53 - created a plan and now it's time to work
03:55 - on your directory and folder structure
03:57 - so before you go crazy and start writing
03:59 - a ton of code you want to start setting
04:01 - up your repository setting up your code
04:03 - base and understanding vaguely where
04:06 - you're going to be placing different
04:07 - parts of the system and code now this is
04:10 - where it can really get tricky and where
04:11 - you're probably going to evolve this
04:13 - over time this also is really going to
04:15 - depend on the type of framework that
04:16 - you're using because in a lot of times
04:18 - applications like react or Django or
04:20 - flask are going to have their own
04:22 - directory structure and kind of
04:23 - conventions to stick with if you're
04:25 - making something completely from scratch
04:27 - that's up to you you can do whatever you
04:29 - want but generally speaking stick to the
04:31 - conventions with the framework that
04:33 - you're using and if you're not sure
04:34 - about the different conventions you can
04:36 - go and look at examples of large
04:38 - applications that use that framework see
04:41 - how they've created the structure or you
04:43 - can go to chatgpt you can look it up and
04:45 - you can just use your intuition now what
04:47 - I'm going to do is quickly hop over to
04:48 - the computer and share with you a few
04:50 - tips and just generally kind of how I
04:52 - structure my programs this way you'll
04:54 - have a bit of a sense how to do this
04:55 - regardless of what framework or Library
04:57 - you're using so I've popped over to vs
04:59 - code here and I'm just going to share
05:00 - with you a very simple directory
05:02 - structure that I've set up and go over
05:04 - some tips as we go through some of these
05:06 - folders now the first thing to keep in
05:08 - mind is however you decide to structure
05:10 - your project be consistent okay so even
05:13 - if you think you're doing it incorrectly
05:14 - whatever you decide make sure you do
05:17 - that every single time so if you're
05:19 - always going to have a capital letter at
05:21 - the beginning of your folders always do
05:23 - that if you're going to have DOT test to
05:25 - indicate kind of a test file then always
05:27 - have DOT test if you're going to use
05:29 - underscores instead of spaces or dashes
05:31 - always use underscores whatever you do
05:34 - be consistent that's one big thing I've
05:36 - learned over the years it's way easier
05:38 - to change something around when
05:40 - everything is the same rather than a
05:42 - bunch of inconsistent files random name
05:44 - and conventions again whatever you do
05:46 - even if it's horribly wrong just always
05:48 - do it that way okay so we have our
05:50 - directory structure here now again this
05:53 - really depends on the type of project
05:54 - you're working on but what I would
05:56 - typically do is kind of reserve the root
05:59 - of my Repository
06:00 - for General folders and try not to have
06:03 - too many files right in the root of my
06:05 - uh directory or of my repository the
06:08 - reason for that is I want to quickly
06:09 - have access to things like a readme file
06:11 - design documents other important
06:14 - information that may not necessarily be
06:16 - code right in the root of my repository
06:18 - so typically what I'll do is I'll
06:20 - separate things out by having like a
06:21 - readme file here I might have a folder
06:23 - for design files I'll have one big
06:26 - folder which is going to contain really
06:27 - all of the source code for my app and
06:29 - then I'll have things like my GitHub
06:31 - actions and other random scripts that I
06:33 - might need in the root of the directory
06:35 - but a lot of times I see tons of files
06:37 - right in the root of the repository it's
06:40 - not necessarily bad but for me I like to
06:42 - quickly be able to access different
06:43 - things from directories rather than
06:45 - reading through like a hundred different
06:47 - files right okay so now if we go inside
06:49 - of something like apps right what I'm
06:51 - going to do is usually put my back end
06:53 - front end and any libraries I have in
06:55 - separate directories now this is one
06:57 - point we can touch on a lot of times
06:59 - you're going to have code that you need
07:01 - to share between different systems that
07:03 - might be helper files that might be
07:04 - different functions that might be types
07:06 - types is a really common one in
07:08 - something like typescript if that's the
07:10 - case I recommend that rather than
07:12 - creating a mono repo which means putting
07:14 - everything inside of one large project
07:16 - you separate out your different systems
07:18 - and create a separate library that has
07:21 - all of the shared types so rather than
07:23 - importing code from your backend in your
07:25 - front end or importing code from your
07:26 - front end and your back end take that
07:28 - shared code put it in a library or a lib
07:31 - you can look up how to do that online
07:32 - it's very straightforward especially in
07:34 - something like typescript and now all of
07:36 - your shared code lives in one place and
07:38 - you only need to change it in one
07:40 - location so you can see I've created
07:42 - some Libs here where I have say helpers
07:44 - and types and that's where I would
07:45 - include any of the shared resources and
07:48 - I would even make separate libraries
07:49 - depending on the type of resources I'm
07:51 - going to have depends how large and
07:53 - complicated the project is but in this
07:55 - case I might have one directory for all
07:56 - of my types and another directory for
07:58 - all of my helper files and I know that's
08:00 - all of my shared code from there I would
08:02 - then have a front-end directory inside
08:04 - of something like front end again
08:05 - depends on the library or framework
08:07 - you're using I'm typically going to have
08:09 - SRC which contains all of my main source
08:11 - code I might separate things out into
08:13 - components into the Redux within Redux I
08:16 - might have the different actions and
08:18 - reducers I'm using I'm going to have
08:19 - screens within screens I'll probably
08:21 - separate those into folders
08:22 - authentication screens main screens
08:25 - whatever categories of screens you may
08:27 - have maybe Navigators would be a
08:29 - directory as well then I'm going to have
08:31 - something like tests I'm probably going
08:32 - to have test setup scripts wherever you
08:34 - have code you want to make sure it lives
08:36 - in a place that makes sense and
08:37 - describes its purpose without having to
08:39 - read through all of the code you can see
08:41 - the way that I've structured this I know
08:43 - that if I go into Redux and I go into
08:45 - actions all I'm looking at is different
08:47 - actions right if I go into reducers all
08:49 - I'm looking at is different reducers
08:51 - that's really what you want to try to
08:52 - achieve and having more folders
08:54 - typically is going to be better than
08:55 - having less so oftentimes I'm only going
08:58 - to have 10 50 1820 files in a directory
09:01 - as opposed to having hundreds of them
09:03 - and trying to come up with really
09:04 - creative names this way I can also
09:06 - duplicate names of files if I need to do
09:08 - that if they're in different directories
09:10 - okay from there I might have assets so I
09:13 - might separate this into my gifs my
09:15 - images my Rye files whatever I'm using
09:17 - you guys get the idea just wanted to
09:19 - share with you a basic directory
09:21 - structure alright so now that we've gone
09:23 - through that and we have our directory
09:25 - structure set up what we want to do is
09:26 - start using a Version Control System
09:28 - immediately don't wait until the very
09:31 - end which I'm very guilty of doing I do
09:33 - this all the time to push all of your
09:34 - code to GitHub start doing it right at
09:37 - the beginning because this is going to
09:38 - allow you to practice creating commits
09:40 - making pull requests pushing things to a
09:42 - remote repository and it's going to show
09:44 - if someone goes and looks at your commit
09:46 - history that you know how to separate
09:48 - different commits this is a big thing
09:50 - that a lot of people even more senior
09:52 - programmers never really learn how to do
09:54 - is separate out the type of work that
09:56 - they're doing into individual commit
09:58 - messages that actually actually make a
10:00 - meaningful git history git is a very
10:03 - useful tool especially as you get into
10:04 - larger projects and oftentimes you'll
10:07 - find yourself reverting back to previous
10:09 - versions of the code base and you need
10:11 - to have good commit messages and kind of
10:13 - sizable and let's say logical code
10:17 - changes in those commits so that you're
10:19 - actually able to go back and do that so
10:21 - right away as you begin to write any
10:23 - code you're going to initialize your git
10:24 - repository you're going to start adding
10:26 - your different files and you're going to
10:27 - start writing meaningful commit messages
10:29 - that are small and that allow you to
10:32 - actually have a real history so if you
10:34 - were to go and view the branch you could
10:36 - actually see everything that you did how
10:38 - long it took you to get there and you
10:40 - can go back to any state of the code
10:41 - base which trust me in a large project
10:43 - is very valuable alright so now we are
10:46 - actually ready to start writing some
10:47 - code we've got our Version Control
10:48 - System set up we have our directory
10:50 - structure now we actually have to build
10:52 - the project now at this point you can
10:54 - start coding but you want to make sure
10:56 - that you are separating everything out
10:58 - and you are being module in your
11:00 - approach it's better to have more files
11:03 - and more components more reusable things
11:05 - in your code than it is to have less a
11:08 - lot of times people will just create
11:09 - these really massive files that have 400
11:12 - 500 a thousand lines of code in them
11:14 - that is no good it makes it very very
11:16 - difficult for someone to review or read
11:18 - that code and for you later on to go
11:21 - back and understand what's happening now
11:23 - sometimes it is kind of unavoidable
11:25 - depending on what you're building but
11:26 - generally speaking you want to have
11:28 - short reusable easy to understand
11:30 - components that make sense right and
11:32 - that are in a cohesive group so that
11:35 - means if you have a helper's file or you
11:37 - have some module You're Building like a
11:39 - math module you only want to have code
11:41 - that makes sense to be grouped together
11:43 - in that file if it doesn't make sense
11:45 - you can take that function out put it in
11:47 - a file that does make sense and now
11:49 - again whenever I'm reading any
11:51 - directories or files I know what to
11:53 - expect in the file that I'm going to
11:55 - read a lot of this stuff might seem
11:57 - redundant and annoying at first
11:58 - especially in a smaller project but I
12:01 - promise you you start to get into a lot
12:03 - of code very very quickly especially
12:05 - when you're working on like mobile apps
12:06 - websites Etc and you need to make sure
12:09 - you stay organized and you keep code in
12:12 - logical places where it makes sense to
12:14 - be and it's easy to navigate to if you
12:16 - can't find where a function is by simply
12:18 - reading the different directories and
12:20 - names then you probably have it in the
12:22 - wrong place but at this point we're
12:24 - doing everything great we've written our
12:26 - code it's clean it's beautiful it scales
12:28 - fantastically what do we need to do next
12:30 - well the next thing we need is some
12:32 - documentation now I'm not a fan of over
12:34 - documenting and I don't recommend
12:36 - writing tons and tons of documentation
12:38 - for your code but it is very helpful to
12:41 - at minimum have the following few things
12:42 - I'm going to list the first is an
12:44 - installation guide or troubleshooting
12:46 - guide now a lot of times you're going to
12:49 - be trying to run your code on multiple
12:51 - platforms multiple locations multiple
12:53 - places around the world wherever it may
12:55 - be and you're going to have a lot of
12:56 - issues that you run into and I recommend
12:58 - that you dock document those issues as
13:00 - long as well as sorry the solution to
13:02 - that issue in some kind of gut so
13:05 - generally you want to instruct someone
13:06 - who's never run this code before how
13:09 - would they run this code what do they
13:10 - need do they need any keys from you do
13:12 - they need special access do they need to
13:14 - contact an administrator whatever it may
13:16 - be all of the installation steps are
13:19 - going to follow and then I recommend
13:20 - having a separate document that goes
13:22 - through all of the issues you've ran
13:23 - into or other people have ran into and
13:25 - the solutions for it I know a lot of
13:27 - people aren't going to do this I'm
13:29 - guilty of not doing this but it would be
13:31 - super helpful if I had written a guide
13:33 - for when I was running say a react
13:34 - native application and just gone through
13:36 - all of the little issues and tools I
13:38 - needed to install and kind of Mark those
13:40 - down so that I could tell another
13:41 - developer or even myself if I'm running
13:43 - this on a different computer really
13:45 - quickly how to get past these roadblocks
13:47 - rather than having to kind of reproduce
13:49 - the issue and come up with the solution
13:51 - again now beyond that you probably want
13:53 - to have some kind of contributing
13:55 - guideline if this is going to be an open
13:57 - source project where you're telling
13:58 - people how they they can contribute what
14:00 - you're going to expect what a PR should
14:02 - look like and just general tips that you
14:05 - know they can follow you may also want
14:06 - to have a guideline for issues or a
14:08 - template for issues now this can be set
14:10 - up on GitHub you don't need to do this
14:11 - directly in your code but it's always a
14:13 - good idea to have some kind of template
14:15 - or process and procedure that people can
14:17 - follow if they're filing issues or if
14:19 - they're going to be contributing beyond
14:21 - that if you have really large blocks of
14:23 - code or a ton of different subsystems
14:25 - it's not a bad idea just to throw a few
14:27 - readme files within the root of those
14:29 - directories so maybe a readme file for
14:31 - the back end for the front end for the
14:32 - libraries just to quickly describe
14:34 - what's going on and your thought process
14:36 - in terms of what code is going to exist
14:38 - in this directory I know that's helped
14:40 - me in the past and whenever I have
14:42 - complicated scoring systems or math
14:43 - going on I typically write a little bit
14:45 - of documentation just so that I can
14:47 - refer to that rather than having to
14:49 - refer to the code for more complex and
14:51 - typically math related operations
14:53 - alright so now we're moving on to
14:55 - everybody's favorite thing testing now
14:58 - test thing is not something you really
15:00 - need for a hobby project right you're
15:02 - not writing a critical application
15:04 - that's going to result in people losing
15:05 - money or you know a rocket ship blowing
15:07 - up whatever it may be but it does really
15:10 - show that you have that commitment to
15:12 - proper software development kind of life
15:14 - cycle and I guess methodology when you
15:16 - write even some basic tests in something
15:19 - like a hobby project I know for me if I
15:21 - go and look at a repository and I see
15:23 - someone has actually written some pretty
15:24 - decent tests even if they have minimum
15:26 - code coverage I'm like damn that person
15:29 - actually put in the effort I'm sure they
15:30 - hated writing those but they did it
15:32 - because they knew it was important and
15:34 - you know that says something right that
15:35 - stands out to me so whether it be a few
15:37 - unit tests maybe one integration test an
15:40 - end-to-end test whatever it is that you
15:42 - want to write even having a few tests
15:44 - and just being able to kind of
15:45 - demonstrate that with things like test
15:47 - folders and naming your tests and
15:48 - writing them correctly can really stand
15:50 - out especially if you hook that up with
15:52 - the next step that I'm going to talk
15:53 - about so actually I lied we're going to
15:55 - talk about that in the next step what I
15:57 - want to talk about here is dependency
15:58 - Mana management there was not a ton to
16:00 - go through because again this is very
16:02 - specific to the type of project you're
16:03 - working on but you want to keep this in
16:05 - mind and make sure using dependencies
16:07 - that are secure that are being
16:09 - maintained and you want to manage them
16:11 - properly with things like pip mpm pnpm
16:15 - whatever it is that you want to use you
16:16 - just want to consider dependency
16:18 - management have the correct files for
16:20 - that and ideally try to use dependencies
16:22 - that aren't out of date that are
16:24 - maintained that aren't deprecated and
16:25 - that are secure all right so moving on
16:27 - to our final things here the next thing
16:30 - you're probably going to want to
16:31 - implement is some type of continuous
16:32 - integration and continuous deployment
16:35 - now really what this means is automated
16:37 - testing with something like GitHub
16:38 - actions and automated deployment using
16:40 - whatever service it is that you use to
16:42 - deploy now if you want your programming
16:44 - project to actually be used especially
16:46 - by someone like me who hates running
16:48 - through setup steps you're going to want
16:49 - to make sure it's as easy as possible to
16:51 - run and typically that means it's
16:53 - deployed in some type of environment so
16:55 - whether that means it's deployed in a
16:57 - Docker container and you can quickly
16:58 - spin that up or it's deployed as a
17:00 - website and you can go to a URL where
17:02 - it's a one-click install where you've
17:04 - bundled it into an installer whatever
17:06 - you need to do even if it's a pain such
17:08 - that someone can really quickly get your
17:10 - app running especially if they're
17:11 - non-technical is going to help you out a
17:13 - ton and it's going to show that you
17:15 - understand that other stage or that
17:16 - other side of software development which
17:18 - is how do you actually deploy these
17:20 - applications out how do you test them
17:21 - and make sure they're secure and working
17:23 - which is something a lot of more Junior
17:25 - developers don't know how to do or never
17:27 - do and it really makes you stand out
17:29 - alright so very last thing to mention
17:31 - here is reviewing your code refactoring
17:33 - and changing it in the future now any
17:36 - software project is going to have code
17:38 - that changes code that's removed codes
17:40 - added Etc but what I would recommend for
17:42 - any programming project especially kind
17:44 - of a hobby one or one you're putting on
17:46 - your resume is after you finish the
17:48 - project take a few days enjoy it relax
17:50 - don't look at the code or look at some
17:52 - other code and then come back to it a
17:55 - few days later and see where you can
17:57 - improve and any changes you can make
17:58 - almost certainly there's going to be a
18:00 - few things you can modify a few ways you
18:02 - can clean it up even if that's
18:03 - indentation levels organizing your
18:06 - variables making some variables
18:08 - constants that you didn't have constants
18:09 - whatever it could be really simple
18:11 - things but a lot of times you're only
18:12 - going to notice that if you take a step
18:14 - back from the code base and don't kind
18:16 - of obsess over it right away and then
18:18 - jump back into it a few days later I
18:21 - know for me a weekend does wonders even
18:23 - just one or two nights or a day or a few
18:25 - hours where I'm not looking at the code
18:26 - can really change my perspective and let
18:28 - me get in there and improve my code a
18:30 - significant amount so with all of that
18:32 - said that is going to wrap up this video
18:34 - I wanted to share with you all of the
18:36 - tips and tricks that I've learned over
18:38 - the years and seen people do well and
18:40 - really poorly when they are working on
18:42 - programming projects hopefully this
18:44 - helps you create a great programming
18:45 - project if it does make sure to leave a
18:47 - like subscribe to the channel and I will
18:49 - see you in the next one
18:51 - [Music]