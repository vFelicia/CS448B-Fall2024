00:02 - [Music]
00:08 - hello everybody and welcome to a brand
00:10 - new
00:11 - tutorial series in this series we're
00:13 - going to be working on a full stack
00:14 - web application using python and django
00:17 - and
00:18 - javascript and react python and django
00:20 - are obviously going to be handling our
00:22 - backend
00:22 - they're going to be running the web
00:24 - server and react and javascript are
00:26 - going to be handling our front end and
00:27 - they're going to be making this fancy
00:28 - web page that you can see
00:30 - right here now i will go into what the
00:32 - kind of idea and project is that we're
00:34 - going to be working on
00:35 - but i'll just quickly mention that this
00:36 - tutorial series is designed for you to
00:39 - learn
00:39 - a ton as much as yes we're going to be
00:41 - working on a project and you will have
00:42 - something to show from your kind of
00:44 - hours put into watching these videos
00:46 - this is really just designed to teach
00:48 - you about how these frameworks and kind
00:49 - of modules and all this stuff work so
00:51 - that if you want to go out and make your
00:52 - own project you're comfortable doing
00:54 - that
00:54 - and you have the skills and knowledge
00:56 - necessary to do so this specific project
00:59 - we're going to be obviously learning
01:00 - about django obviously learning about
01:01 - react and also how we can integrate our
01:03 - project with third-party apis
01:05 - something that's not very easy to do and
01:07 - well it's just really good to know
01:09 - because a lot of times when you're
01:10 - making a project you want to integrate
01:11 - it with google or in this case
01:13 - spotify or some other popular companies
01:15 - and have kind of their services working
01:17 - on your app
01:18 - so anyways that is the basic idea last
01:20 - thing this is not really designed for
01:22 - beginners
01:23 - yes if you're a beginner that's totally
01:24 - fine you can try to follow along
01:26 - but i would at least recommend you have
01:27 - some general programming experience and
01:30 - you've used python or javascript before
01:32 - don't worry about django and react i'll
01:33 - explain those from scratches if you
01:35 - don't know them
01:36 - but yeah that is the basic idea so just
01:38 - to tell you about the project in a
01:39 - little bit more detail
01:41 - the way this is going to work is it's
01:42 - going to be a collaborative music
01:44 - playing system
01:45 - so it's a way for a group of people to
01:47 - kind of control the music that's being
01:48 - played
01:50 - in some sense of unity right so there
01:52 - will be one host who
01:54 - can create a room ideally this host will
01:56 - be the person who's actually controlling
01:58 - the music wherever they are say
01:59 - at their house right house party or in
02:02 - some restaurant or gathering or whatever
02:03 - it may be
02:04 - and then they can give out a code to a
02:06 - bunch of people that want to join
02:08 - the room and be able to control the
02:09 - music and then those people can join the
02:11 - room
02:12 - they can vote to skip the song they can
02:14 - pause the song play the song
02:16 - whatever permissions you give them
02:17 - that's what they will be able to do
02:19 - and that will actually physically change
02:21 - the music playing you know out of the
02:22 - speaker or out of your phone it's pretty
02:24 - cool you can press like a pause or play
02:25 - button
02:26 - and you will see that spotify on
02:28 - whatever device it is that you have it
02:29 - connected to even if it's not on the
02:31 - same network
02:32 - will actually respond to that command so
02:34 - that's what we're going to be doing
02:35 - hopefully you guys are excited
02:36 - about this again can't stress enough how
02:38 - much you are going to learn
02:39 - from this series so we'll dive in in a
02:41 - second but i need to first thank the
02:43 - sponsor of this video
02:44 - and this series which is algo expert
02:47 - algo expert is a coding interview prep
02:49 - platform that has over 100 coding
02:51 - interview questions
02:52 - it's designed to help you ace your
02:53 - coding interviews and was personally
02:55 - what i use to land an internship at
02:57 - microsoft and an offer from shopify
02:59 - it has full video explanations for each
03:01 - unique coding question
03:02 - and other resources like a data
03:04 - structures crash course and behavioral
03:06 - interview tips
03:07 - you can check it out from the link in
03:08 - the description and use code tech with
03:10 - tim
03:10 - for a discount on the platform all right
03:12 - so now that we've gone through that i
03:14 - apologize for the long introduction
03:15 - but let's talk about what we need to get
03:17 - started first thing is we need a code
03:19 - editor now i'm going to be using vs code
03:22 - i would highly recommend that you do get
03:23 - vs code as well because there's some
03:25 - specific things and
03:26 - some nice extensions and plugins and
03:28 - stuff we'll be using but you can
03:29 - download that from the link in the
03:30 - description
03:31 - we're gonna need python obviously you
03:33 - can download the latest build from
03:35 - this website and then we're gonna need
03:37 - npm
03:38 - and node.js which again i'll leave a
03:39 - link in the description you can download
03:41 - from there
03:42 - all right so now that we have all of
03:44 - that stuff downloaded let's go to vs
03:46 - code you can see i've already created a
03:47 - folder here i've called it react
03:49 - django tutorial and the first thing
03:51 - we're going to do if you're using vs
03:53 - code is install a few extensions
03:55 - now the first extension i want us to get
03:57 - is prettier this is just going to make
03:58 - our life a lot easier when we're writing
04:00 - javascript and html code
04:02 - you can download that from the
04:04 - extensions pane here and just type in
04:06 - prettier
04:07 - next what we're going to need from the
04:08 - extensions pane is the python extension
04:11 - so you can get that here you can see it
04:12 - has 26 million downloads
04:14 - i just type in python then we're going
04:16 - to get the django extension
04:18 - pick whichever one you want but i'm just
04:20 - going to go with the one that has the
04:21 - most downloads
04:22 - then lastly we want the react extension
04:25 - so we'll get the es7
04:26 - react redux graphql so on snippets
04:30 - didn't mean to press that but you get
04:31 - the point i just make our life a little
04:33 - bit easier and actually one more
04:35 - i lied we're gonna get the javascript
04:37 - extension as well
04:38 - you can see i already have these
04:39 - installed but javascript es6 code
04:41 - snippets
04:42 - again just to make our life a little bit
04:44 - easier all right so now that we have all
04:46 - of those extensions
04:47 - what we need to do is actually install a
04:48 - few python packages specific for django
04:51 - so we can actually start using that
04:53 - so obviously i'm assuming you have
04:54 - python installed at this point
04:56 - if you do you should also have a tool or
04:58 - command called pip installed
05:00 - so go to a terminal whether it's your
05:01 - command prompt whether it's your
05:03 - terminal on mac or linux or the terminal
05:05 - and vs code
05:06 - and type pip and see what happens
05:09 - now notice for me something did happen i
05:12 - didn't get an error essentially that
05:13 - that thing popped up
05:14 - that is good that's what you want to see
05:16 - if you're on mac or linux and pip isn't
05:18 - working for you then type
05:19 - pip3 again i don't know actually why
05:21 - that's popping up with that
05:23 - command prompt window but ideally you
05:25 - just want to not get an error when you
05:26 - type these commands
05:28 - once you have that and pip is working
05:29 - then what we're going to do is install
05:31 - django and install
05:32 - django rest framework now for some
05:34 - reason your pip command isn't working i
05:35 - will leave some links in the description
05:37 - two videos that i've created that pretty
05:39 - much show you how to fix pip they're not
05:41 - called how to fix pip but i promise they
05:42 - show how to do that
05:44 - so you can watch those videos and
05:45 - hopefully figure it out anyways once we
05:47 - do that we're going to type pip
05:49 - install and then we're gonna oops if i
05:51 - can get rid of that extra a and then
05:53 - we're gonna type
05:53 - django and django rest
05:57 - framework so separated by spaces first
05:59 - one django
06:00 - and then django rest framework and go
06:02 - ahead and press enter
06:04 - now here i don't know again why it's
06:05 - popping up that command prompt for me
06:07 - but it is but
06:08 - you could see the command prompt
06:09 - installed those make sure that installs
06:12 - and once you have those installed we're
06:13 - good to go and we can start using django
06:15 - alright so now we have those modules
06:17 - installed first thing we're going to do
06:18 - make some folders somewhere on your
06:20 - desktop or wherever it is that you want
06:21 - to use this
06:22 - name it something doesn't actually
06:23 - matter what you name it i've named mine
06:25 - react
06:25 - django tutorial get into that folder
06:27 - from your command prompt if you're on vs
06:29 - code just open open up a terminal you
06:31 - can drag that up from the bottom of the
06:32 - screen
06:33 - and what we're going to do is we're
06:34 - going to type django hyphen
06:36 - admin and then we're going to type start
06:40 - project followed by the name of our
06:42 - project
06:43 - django admin should be a command that
06:45 - will work once you've installed django
06:46 - on your system
06:48 - alright so from here we're going to pick
06:49 - a name i'm going to pick
06:51 - music underscore controller as the name
06:54 - of our app
06:55 - or our project but you can name it
06:56 - whatever you want so there we go
06:58 - now we see we get a folder here and
07:00 - inside of this folder we have another
07:01 - folder
07:02 - called the same thing and a file called
07:04 - manage.pi
07:05 - we'll talk about these files
07:06 - specifically later but just to go
07:08 - through them quickly we have settings.pi
07:11 - this is where all of the settings for
07:12 - our project are going to be
07:14 - and kind of this folder right here will
07:15 - be the project folder
07:18 - and you'll see why that's important in a
07:19 - second because when we make a django
07:21 - app what we actually have is kind of the
07:23 - project and then we have
07:24 - apps within that project so this is our
07:27 - project music controller
07:28 - the next thing we're going to do is make
07:30 - an app and an app is what we need to do
07:32 - if we actually want to say render
07:33 - something on the screen or have
07:34 - database models or all those kind of
07:36 - things so now i'm going to say django
07:38 - admin and substart project i'm going to
07:40 - type start app
07:41 - and then i'm going to name my app now
07:43 - the first app that i want to create here
07:45 - is going to handle our api so i'm going
07:47 - to call this one api
07:49 - but again call it whatever you'd like so
07:51 - django admin
07:52 - start app api and actually before i do
07:55 - that
07:55 - i'm going to cd into this music
07:58 - controller directory because i want this
08:00 - app
08:01 - to be inside of this directory here not
08:04 - alongside it right so not in the same
08:06 - exterior directory
08:08 - all right so now i guess we can go
08:10 - django admin
08:12 - i'm just going to modify this line start
08:15 - app and we will call this one
08:17 - api go ahead and hit enter and we can
08:19 - see an api folder shows up
08:21 - inside of our music control folder now
08:24 - if we open this one up you'll notice
08:25 - that there's a few different things
08:26 - inside of here
08:27 - we have this migrations folder you don't
08:29 - have to worry about that a nit.pi this
08:31 - is just to make this a python package
08:33 - admin dot pi app stop pi models.pi
08:37 - that's where our database models are
08:38 - going to go
08:39 - test.pi this is where you would put
08:40 - tests if you were testing views or
08:42 - models or whatever it may be
08:44 - and then views.pi this is where we're
08:45 - going to put the code that's actually
08:47 - responsible
08:47 - for rendering our views or actually our
08:50 - api
08:50 - endpoints in this case so the first
08:53 - thing we're going to do here
08:54 - is we need to add this app that we just
08:56 - created
08:57 - to our project so remember this music
08:59 - controller folder inside of this other
09:01 - music controller folder
09:02 - is kind of our project settings and a
09:04 - project folder in a sense
09:06 - so inside of here we're going to go to
09:08 - installed apps
09:10 - and we're simply going to add the
09:11 - following line assuming that you called
09:14 - your app api if you call it something
09:15 - else then you're going to change
09:16 - wherever you see api
09:18 - to be that name we're going to say api
09:20 - dot
09:21 - apps this will be the same regardless of
09:23 - what you named it
09:24 - and then dot api config
09:28 - now api make sure that it's lower case
09:31 - on the p and i and i'll show you where
09:32 - we're getting this from
09:33 - but we're trying to reference or just
09:36 - add this app sorry to the
09:38 - to the project so api.apps.api config
09:41 - now if we go to api
09:42 - and we have a look at the apps file here
09:45 - we have api config this is a class that
09:47 - was automatically created when we
09:48 - created this app
09:49 - so that's what i'm referencing i'm
09:50 - saying api the dot apps file
09:53 - and then the dot api config class that
09:55 - you see right there
09:56 - so that's the way that you can kind of
09:57 - figure out what you need to put here to
09:59 - add the app
10:00 - now that we're already here we're also
10:01 - going to add rest framework which is
10:03 - another
10:04 - app that we need for our project so
10:07 - api.apps.api config
10:08 - and then rest framework all right now
10:11 - that we have that
10:12 - i'm actually just going to show you how
10:13 - we can create our first view and start
10:15 - running this django server that's kind
10:17 - of the first steps i guess for this
10:18 - video
10:19 - so we're going to go inside of api and
10:21 - api is our first app and inside of here
10:23 - we see
10:23 - views now views this is where we're
10:25 - going to write all of our endpoints now
10:27 - what i mean by endpoint is something
10:28 - like say slash
10:29 - hello or slash high like hello would be
10:32 - an end point
10:33 - high would be an endpoint an endpoint is
10:35 - just pretty much
10:36 - after the slash right it's like a
10:37 - location on the web server that you're
10:39 - going to
10:40 - now we can write some pretty advanced
10:41 - endpoints and functions and stuff we're
10:43 - going to keep it pretty simple right now
10:45 - we're going to make a function we're
10:46 - going to define this as main
10:48 - this is going to take in a request and
10:50 - this is required when we make our view
10:52 - we need to have a request parameter in
10:54 - our function
10:54 - and what this function will do is simply
10:56 - return a response
10:57 - so whenever you have a web server what
10:59 - happens is there's an incoming request
11:01 - right denoted by this request variable
11:03 - that goes to an endpoint and then that
11:05 - endpoint will return a response to the
11:08 - sender right and that response will be
11:09 - in some kind of format
11:11 - maybe it will be json maybe it will be
11:12 - an html response right in which case
11:14 - we'll render something onto the web page
11:17 - so when we do this what we need to do is
11:18 - actually import
11:20 - http response we're going to say from
11:23 - django.http
11:25 - import http response now this is just to
11:28 - show you an example we won't actually
11:30 - use this
11:30 - later in the video but we're going to
11:32 - say http response
11:34 - this will be returned sorry and inside
11:37 - of here we can simply return some text
11:38 - so we can say something like hello
11:40 - and this is just what will be shown on
11:42 - the web page uh when we actually hit
11:45 - this end point all right so now we have
11:46 - http response returning hello
11:49 - now what we need to do is actually
11:50 - figure out how the urls are going to
11:52 - point to this function because right now
11:54 - all i've done
11:54 - is just define a function we need some
11:56 - way of figuring out well what's the path
11:58 - to this function like do i type slash
11:59 - hello
12:00 - do i type slash main how do i actually
12:02 - get here well that's where we're going
12:03 - to configure the urls
12:04 - first thing i'm going to do is make a
12:05 - file inside of api and i'm going to call
12:07 - this
12:08 - urls.pi we're going to need this and
12:10 - this is going to store all of the urls
12:12 - local to this app you'll see what i mean
12:15 - by that in a second but we will just
12:16 - keep this file open because we'll use
12:18 - this in fact
12:18 - i will split this on the right of my
12:20 - screen all right next what i will do is
12:22 - i'll go to the urls.pi file inside of
12:25 - musiccontroller now this i want you to
12:28 - be over here and in fact the split might
12:30 - not be a bad idea
12:32 - or might be a bad idea because my text
12:33 - is so big but inside of here you can see
12:35 - we have urls now this is where the main
12:38 - url is going to be sent whenever
12:40 - something is typed in so whenever i type
12:42 - whatever it may be you know domain dot
12:44 - com
12:45 - slash and then i type slash hello after
12:48 - the slash will be sent
12:49 - to this file and then this file will
12:51 - kind of dispatch these urls to the
12:53 - correct applications
12:54 - in fact you can see right here this is
12:56 - saying okay if we see a url that looks
12:58 - something like slash admin and then
13:00 - slash dot dot dot whatever else on that
13:02 - side
13:03 - then send that url to admin.site.urls
13:07 - it will take care of it and it will
13:08 - render whatever needs to be rendered
13:10 - right
13:10 - now we could add something else that
13:12 - says oh maybe not admin maybe we want to
13:14 - say you know
13:15 - hi or something so now when we hit the
13:17 - endpoint high it will dispatch
13:19 - that url to this file essentially
13:22 - anyways we want to add our own and we
13:24 - want to dispatch urls
13:26 - to this file right the one that we will
13:27 - write shortly so inside of here we're
13:30 - going to say
13:30 - path we're going to add our own path now
13:32 - instead of having some kind of
13:34 - i don't know a prefix i guess we'll just
13:37 - leave this blank meaning we if we get
13:38 - any url we're going to send it over to
13:40 - this file
13:41 - and inside of here we're going to type
13:43 - something called include
13:45 - we now need to import that from up here
13:47 - that's just a function
13:48 - and inside of include we're going to
13:50 - type api
13:52 - dot urls now what that's saying is all
13:54 - right whatever the url is that's sent
13:56 - here
13:56 - dispatch it and send it over to api dot
13:59 - urls
14:00 - so now inside of api.urls i'm actually
14:02 - just going to copy this code here
14:04 - although we won't use most of it
14:05 - we'll go inside of here and now we will
14:08 - write some urls
14:09 - and instead of including another file
14:11 - we'll simply point them to
14:13 - this view that we created right here or
14:15 - i guess that we'll just point one
14:16 - endpoint because we only have one
14:18 - uh but this is this right urls nope this
14:20 - is the right urls file we can get rid of
14:22 - the import for admin
14:23 - and actually get rid of the import for
14:25 - include as well
14:26 - and we're going to import up here from
14:30 - dot views import main
14:33 - the function that we just wrote and now
14:35 - what we'll do is we'll have this blank
14:37 - string
14:37 - and what it will return is main
14:41 - so what this is saying is if we get a
14:43 - url that is blank
14:44 - that doesn't have anything on it then
14:46 - call the main function
14:47 - and do whatever it says inside the main
14:49 - function so return hello
14:51 - as an http response all right so now
14:54 - that we've done that what we're going to
14:55 - do is actually run the web server but
14:56 - before we do that we need to type in the
14:58 - following command i'll explain what it
14:59 - does in a second so python
15:01 - manage.pi and then make migrations
15:04 - now the reason we have to do that is we
15:06 - just have to update the database and
15:08 - there's actually not really one created
15:09 - right now that's why we're making
15:11 - migrations
15:12 - to store the current changes that we've
15:13 - made to this app now we don't need to do
15:15 - this all the time
15:16 - but whenever we make a change to a model
15:18 - or make a change to the database
15:20 - we need to run this now the reason we're
15:22 - running this is because
15:23 - this is our first time doing the
15:24 - application or first time i guess
15:27 - booting up the application so we need to
15:29 - initialize
15:29 - the database now you might be like what
15:31 - database we haven't made a database
15:32 - django automatically creates one and it
15:34 - stores some admin related stuff
15:36 - so whenever we start we just say python
15:38 - manage.pi make migrations
15:40 - notice no changes detected okay perfect
15:43 - then we're going to say python
15:44 - manage.pi migrate like that
15:48 - now that we did that notice that all
15:49 - this stuff happened okay you know
15:50 - applying all of these migrations blah
15:52 - blah admin auth so on so forth
15:55 - now we're good we can actually go ahead
15:56 - and run the web server again don't worry
15:58 - if you don't understand why we did that
15:59 - but now see this this db.sqlite3 file
16:03 - has showed up
16:03 - and that's the database that we need for
16:06 - application
16:06 - so now we're going to say python
16:08 - manage.pi
16:10 - run server this as it says is going to
16:12 - run the web server
16:14 - so we run that notice it says okay you
16:16 - know performing checks all looks good
16:18 - and it says start development server at
16:20 - and then this url
16:21 - so what i'm going to do is press control
16:23 - click on this url
16:24 - and notice that what do we get oh we get
16:27 - hello
16:28 - all right so that is the html that was
16:29 - returned and that is rendered on the
16:31 - screen
16:32 - now let's just have a look at what
16:33 - happens if i change this to be
16:35 - say an h1 tag instead so now h1
16:39 - and i go ahead and save that and notice
16:41 - down here
16:42 - that my server is automatically
16:44 - restarting every time i make a save
16:47 - to one of these python files even if i
16:49 - don't change anything and i just do
16:50 - control
16:50 - s it should actually rerun it yeah reran
16:53 - right there so that's
16:54 - something nice about django you only
16:55 - have to run the server once unless you
16:57 - make a major change to something like
16:58 - the database models
17:00 - and it will automatically update for you
17:01 - but let's go back here let's refresh the
17:03 - page
17:03 - and now we get our nice h1 tag and
17:05 - notice that it says hey we had a get
17:07 - request at
17:08 - blah blah whatever right the slash now
17:11 - let's just mess with the urls a little
17:12 - bit more
17:13 - just to make sure we understand them so
17:15 - what i'm going to do is go inside of
17:17 - here and actually put
17:18 - home so now you'll see what happens the
17:21 - server is going to restart when i go
17:22 - here
17:23 - i actually don't get a page because
17:25 - there's no route
17:26 - to nothing it's funny but there is
17:28 - there's no route to get to nothing so
17:30 - instead if i type slash home
17:32 - now notice it brings me to this page now
17:35 - let me just show you again
17:36 - in this main urls file i know i'm going
17:38 - kind of fast what happens if i do
17:40 - something like slash
17:42 - api or actually sorry not slash api but
17:45 - api
17:46 - slash what's going to happen now if i
17:49 - try to go
17:50 - to slash home well let's run this and
17:52 - obviously we get a page not found
17:54 - but now what happens if i go to slash
17:56 - api
17:58 - well if i go to slash api we still get
18:00 - nothing found but now if i go to slash
18:02 - api
18:03 - home it brings me to hello so i just
18:05 - want to illustrate how this works
18:07 - but you see we have api slash and then
18:09 - inside of here we have home
18:11 - so that's saying okay whenever we get
18:13 - api slash
18:14 - send the rest of the url
18:17 - to this file and then we check inside of
18:19 - here for the rest of the url and if we
18:21 - see home
18:21 - we render this page now just to note we
18:24 - could technically do something like
18:26 - path and then just leave this blank and
18:29 - also make this home
18:30 - and there we go wait what's happening
18:33 - here oh sorry not home
18:34 - main my bad oops and now if we run this
18:38 - and we go to api slash it it brings the
18:41 - same function so we can have
18:42 - multiple endpoints that go to the same
18:44 - place but anyways
18:46 - that is all i wanted to show so that's
18:48 - actually it for this first video
18:50 - we're just setting up django getting
18:51 - things working hopefully understanding
18:53 - the basis and getting an idea of what
18:55 - this tutorial series is going to look
18:56 - like
18:56 - again it's going to be a long tutorial
18:58 - series please do let me know what you
18:59 - want to see in the comments down below
19:01 - that being said i hope you enjoyed if
19:03 - you did make sure to leave a like
19:04 - subscribe to the channel and i will see
19:05 - you in the next one
19:10 - [Music]
19:14 - you