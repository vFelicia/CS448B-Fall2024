00:00 - chances are that you've seen a class
00:01 - that looks something like this something
00:04 - pretty straightforward where you're just
00:05 - storing a few different values and maybe
00:07 - you have something like an equal method
00:09 - and a reer method in this case we have a
00:11 - two-dimensional point and we're just
00:12 - storing two values X and Y now what if I
00:15 - told you there was a way that we could
00:16 - eliminate writing all of these different
00:19 - methods and write this class in only
00:21 - four lines of code well if that sounds
00:23 - interesting to you then stick around and
00:25 - I'm going to share something that's
00:26 - really cool in Python which is data
00:28 - classes so let's Di into Data classes
00:31 - but first let's just run this code so we
00:33 - can get a look at what the output is and
00:35 - then compare it to when we use a python
00:37 - data class so all we do here is
00:39 - Implement a two-dimensional point we
00:40 - store the value X and Y in our
00:43 - representation method we print out what
00:45 - the point looks like so we have the X
00:47 - attribute and the Y attribute and then
00:49 - we have a way to compare these two
00:50 - points where we just check if the x
00:52 - value is the same and the Y Valu is the
00:54 - same we just have a little bit of output
00:56 - down here after we create two different
00:58 - points and you'll see that when I run
00:59 - the the code here we get our first point
01:02 - our second point and then the fact that
01:04 - these points are not equivalent because
01:06 - their X and Y values are different so
01:08 - now I'm going to write this class using
01:10 - a data class you'll get a sense of how
01:12 - that works and you'll see the difference
01:14 - so there we are we now have the exact
01:16 - same program it does the same thing you
01:18 - saw before and this class has the exact
01:20 - same functionality so let's run the code
01:22 - just to make sure this is indeed working
01:24 - and you can see we get the exact same
01:26 - output we got before but this time we
01:28 - didn't need to write any of that boiler
01:30 - play code like defining the
01:32 - initialization the reer method and the
01:34 - equal method this is the python data
01:37 - class decorator and what it does for us
01:39 - is actually fill in a bunch of methods
01:41 - that we typically have to write on our
01:42 - own it's super interesting and I'm going
01:44 - to share with you more about how it
01:45 - works in this video so let's begin by
01:48 - talking about what a data class is and
01:50 - what actually happened when we wrote
01:51 - these lines of code well this first line
01:54 - of code simply Imports the data class
01:56 - decorator from the data classes module
01:58 - and this was something that was added in
02:00 - Python version 3.7 it's somewhat new but
02:03 - the point is you don't need to install
02:04 - this it's something that's built into
02:06 - python now what this is called is a
02:08 - decorator a decorator is something that
02:10 - will modify what's defined below it so
02:12 - in this case we're modifying a class
02:14 - however we could be modifying a function
02:16 - or method and there's all kinds of other
02:18 - decorators in Python for example you may
02:20 - have seen the static method decorator
02:22 - before or the class method decorator
02:24 - before and there's all kinds of other
02:25 - ones that you can import from built-in
02:27 - python modules now in this case what the
02:30 - data class decorator will do is it will
02:32 - read the contents of our class and
02:34 - specifically it will focus on the
02:35 - different fields that we've defined now
02:38 - what we've done here is to find a field
02:39 - X and a field Y and we've given the type
02:41 - annotation that it's going to be of type
02:43 - int or the type hint in Python now these
02:46 - are known as fields and what the data
02:48 - class decorator does is read these and
02:50 - populate three common methods that
02:53 - typically we'd have to write on our own
02:55 - so in this case what it's going to
02:56 - populate is the anit repper and equal
02:59 - method methods now these are Dunder
03:01 - methods otherwise known as double
03:02 - underscore methods or magic methods
03:05 - which allow us to provide some special
03:06 - functionality to our python classes now
03:09 - starting with the init method this is
03:11 - something that's called when we create a
03:12 - new instance of our class so when we do
03:14 - something like P equals point we're
03:16 - going to call the anit method and then
03:18 - we need to provide any arguments or any
03:20 - parameters that are specified in AIT now
03:23 - what data class will do is it will read
03:25 - the different fields that we've defined
03:26 - and automatically specify those as
03:28 - mandatory parameters that we need to
03:30 - provide to the initialization so in this
03:33 - case I need to provide an X and A Y in
03:35 - that order because that's the order in
03:37 - which I defined these different fields
03:39 - so I need to pass something like one and
03:41 - two now it also implements a repper
03:44 - method now the repper method is
03:45 - something that will be called when we
03:46 - try to print out or view the contents of
03:49 - the object specifically in something
03:50 - like our terminal so if I go print P
03:53 - what we'll happen implicitly is we're
03:54 - actually going to call the wrapper
03:56 - method and then whatever that returns is
03:58 - what we'll output now as we we saw
04:00 - before the way that repper will be
04:01 - implemented is it will simply return a
04:03 - string that contains the name of the
04:05 - class so in this case it's point a set
04:07 - of parentheses and then inside the
04:09 - parentheses it will specify all of the
04:10 - field names as well as their
04:12 - corresponding value so we'll get
04:14 - something like Point X1 and then Y = 2
04:17 - that's just the default implementation
04:19 - for repper and that's how it will be
04:20 - implemented when we use the data class
04:22 - decorator lastly it will implement the
04:25 - equal Dunder method the equal Dunder
04:27 - method is something we can use when we
04:28 - compare two instances of the same object
04:30 - so if I do something like P equals point
04:32 - and then P2 equals point the way that
04:35 - equal will be written is it will simply
04:37 - compare all of the different attributes
04:39 - for their direct quality so we'll see if
04:41 - the X's are the same and if the Y's are
04:44 - the same and if they are then it will go
04:46 - ahead and say these objects are equal so
04:47 - if I go p is equal to P2 like that and
04:52 - we run our code you'll see that we get
04:54 - the value true I apologize for the messy
04:57 - terminal so just a quick pause here for
04:58 - any of you that are serious but becoming
05:00 - software developers if you want to be
05:02 - like Max who landed a 70k per year job
05:05 - in Just 4 months of work consider
05:07 - checking out my program with course
05:08 - careers now this teaches you the
05:10 - fundamentals of programming but also
05:12 - lets you pick a specialization taught by
05:14 - an industry expert in front end backend
05:17 - or devops beyond that we even help you
05:19 - prepare your resume we give you tips to
05:21 - optimize your LinkedIn profile how to
05:23 - prepare for interviews we really only
05:26 - succeed if our students actually get
05:28 - jobs that's the entire goal of the
05:30 - program so if that's at all of interest
05:31 - to you we do have a free introduction
05:33 - course that has a ton of value no
05:35 - obligation no strings attached you can
05:37 - check it out for free from the link in
05:38 - the description so that's the absolute
05:40 - basics of the Python data class but
05:42 - there's a ton of other things that we
05:44 - can do so I'm going to show you a few
05:45 - examples now and go through some more
05:47 - advanced Behavior so the example you see
05:49 - now is directly from the python
05:50 - documentation and it shows you a
05:52 - slightly more complex class in this case
05:55 - we've actually implemented our own
05:56 - method which is totally fine we can
05:58 - write as many methods as we'd like and
06:00 - you'll notice that we have some type
06:01 - hints here so if you're unfamiliar with
06:03 - the syntax all we're doing is just
06:05 - adding some type hints which allow us to
06:07 - have some better autocomplete and
06:10 - understand what different methods and
06:11 - functions should be accepting or
06:12 - returning they're not actually enforced
06:15 - in Python which means you could return
06:16 - something other than a float but in this
06:19 - case we're just writing them out to kind
06:20 - of document how the code should look now
06:23 - what data class will do here is it will
06:25 - add those three methods we described so
06:27 - a knit repper and then the method now if
06:30 - you're curious what the inip method
06:31 - would look like it would look exactly
06:33 - like this so let me zoom out a little
06:35 - bit so that we can read it this is what
06:37 - would be generated by data class again
06:39 - this is right from the python
06:40 - documentation it's going to take all of
06:43 - the different fields that we've written
06:44 - out here so name unit price quantity on
06:47 - hand it's going to add the type hints
06:49 - for all of them and in this case you see
06:50 - that we have a default value so it's
06:52 - default equal to zero which means if I
06:55 - don't pass something for quantity on
06:56 - hand it's just going to be assign the
06:57 - value zero now it's worth noting here
06:59 - the data class has a ton of additional
07:01 - arguments that you can pass to it to
07:03 - modify how it works for example you can
07:05 - pass if we should generate the
07:07 - initialization if we should generate the
07:09 - repper the equal we have one for order
07:11 - we have a bunch of other arguments here
07:13 - and I'll leave a link to this
07:14 - documentation in case you want to check
07:16 - it out from below now one notable one
07:18 - you may be considering using is called
07:20 - order now what order will do is
07:22 - implement the ltle GT and GE methods
07:25 - which allow you to use the common
07:27 - arithmetic operators like the less than
07:29 - sign less than or equal to greater than
07:31 - Etc now the way this works is it will
07:33 - actually compare the different objects
07:35 - using a tuple of all of their field
07:38 - values we don't need to get into that in
07:40 - this video but in case you're curious
07:41 - I'll link this in the description now
07:43 - jumping back into the code here I want
07:45 - to show you an example that you're bound
07:46 - to run into if you use this frequently
07:48 - and that's having a mutable default
07:50 - parameter for one of your different
07:52 - field values now just to illustrate why
07:54 - this is an issue let's have a look at a
07:56 - common example here in Python so you can
07:58 - see that what I have have here is a
07:59 - simple function what we do is we have a
08:02 - list as the default value for the LST
08:05 - parameter now this is mutable meaning it
08:07 - can be modified uh and we will really be
08:09 - storing a reference to this list as
08:11 - opposed to a new instance of this list
08:13 - for every single call of the function
08:15 - now what that means is that when we
08:17 - print this out you're actually going to
08:18 - see that the list will be modified
08:19 - between function calls so when I run the
08:22 - code you can see that we get one and
08:24 - then we get one one now this is
08:25 - obviously an issue and this is a bad
08:27 - practice in Python that you need to
08:29 - avoid but how do we fix that when we're
08:31 - using the data class what if I want to
08:33 - do something like the different sizes
08:35 - that we have and I want this to be a
08:37 - list where we store maybe some strings
08:40 - well I can't simply assign this to a
08:43 - list because if I do that I'm going to
08:45 - get that same issue that we're seeing
08:47 - right here so how do I fix that well the
08:49 - way we fix that is by using a function
08:51 - that's provided from the data classes
08:53 - module now that function is called field
08:55 - and we can import it like this now it
08:57 - has a bunch of different param that we
08:59 - can pass to it what we're going to focus
09:01 - on here is the default and the default
09:04 - Factory so what I can actually do here
09:06 - is rather than specifying this as a
09:08 - normal list is I can write this as a
09:11 - field now within the field what I can do
09:13 - is I can pass to this something known as
09:15 - the default undor Factory and I can give
09:18 - this a function that should be called
09:21 - anytime we initialize a new instance of
09:23 - this class so this is now going to
09:25 - completely solve our problem and anytime
09:27 - we initialize a new instance of this
09:29 - class this default Factory function will
09:31 - be called and whatever it returns is
09:33 - what we'll use as a default value so
09:35 - we'll get a new list every single time
09:38 - not a reference to an existing list now
09:40 - if you do want to use this field and you
09:42 - don't want to have default Factory
09:44 - instead maybe you want to have a literal
09:45 - value that is immutable you can actually
09:48 - just specify a default and if you
09:50 - specify a default you can pass a value
09:53 - say like this now in this instance we'll
09:55 - get the same issue as before because
09:56 - this is a mutable default value however
09:59 - this is another parameter that you can
10:01 - pass to field now with field there's a
10:03 - few other things that we can specify
10:04 - here as well for example we can indicate
10:07 - whether or not we want it to be included
10:08 - in the initialization in the
10:11 - representation in our compare methods so
10:13 - things like equals less than greater
10:15 - than Etc and those are the main ones to
10:17 - take note of so for example maybe we
10:19 - don't want this to be included in the
10:21 - initialization then we would say a nit
10:23 - equals false and now it's not going to
10:25 - be something that we need to pass when
10:27 - we have that anit method now just as a
10:29 - quick side note here if you're curious
10:30 - what the code generated by this
10:32 - decorator will look like you can use the
10:34 - help function and pass the name of your
10:36 - class so I can say help inventory item
10:38 - and now when I run my code if I look in
10:40 - my terminal I can actually see all of
10:42 - the different definitions of my methods
10:44 - so for example I have my Constructor
10:46 - here it's specifying all of the
10:48 - different things then I have my methods
10:50 - like equal a knit repper Etc just
10:53 - something interesting in case you wanted
10:54 - to see that so now we're going to move
10:56 - on and discuss something you've probably
10:57 - had a question about and and that is how
10:59 - do I define a class variable when I use
11:01 - the data class decorator well to do that
11:04 - we can simply import the class VAR
11:07 - typing from the typing module we can
11:09 - then come here and Define something like
11:11 - class variable we'll give the typeint as
11:14 - the class VAR and then inside of here
11:16 - we'll specify what we actually want the
11:18 - type of the variable to be this could be
11:20 - something like an INT and we can make
11:22 - this equal to 100 now when we do that
11:24 - data class will actually recognize that
11:26 - this is a class variable because it will
11:28 - read the fact that this is a class far
11:30 - and it will not include it in any of the
11:32 - methods that it generates so it won't
11:33 - put it in the init the repper or any
11:35 - other one that it's making it's simply
11:37 - going to ignore it because it's a class
11:39 - variable so now we're moving on and
11:40 - we're talking about inheritance now in
11:43 - this example we have a data class that
11:44 - is inheriting from a non data class now
11:47 - when that's the case the initialization
11:49 - that's written by default from the data
11:52 - class decorator is not going to call the
11:54 - initialization of the base class so this
11:57 - is something that we need to do manually
11:59 - and we can Implement that by writing the
12:00 - post AIT Dunder method so when I write
12:03 - the post AIT Dunder method what will
12:05 - happen here is data class will do the
12:07 - exact same thing it did before implement
12:09 - the anit the repper and the equal method
12:12 - and then it will call this post anit Now
12:15 - by default it's going to call it without
12:17 - any parameters and then we have the
12:18 - ability to call the Base Class Dunder
12:21 - method or the Base Class initialization
12:23 - which is what we're doing now at this
12:25 - point we know that any of our Fields
12:27 - will have already been defined so it's
12:29 - fine to actually use them here when we
12:30 - call for example the rectangle base
12:32 - class now this is an example that's
12:34 - provided directly from the python
12:35 - documentation but it gives you a good
12:37 - kind of sense of how this works so we do
12:39 - need to manually call this when we're
12:41 - inheriting from a non dat class base
12:44 - class so here's another example where we
12:46 - inherit from another data class now when
12:49 - we do that things change slightly and
12:51 - what ends up happening is we'll actually
12:53 - write an initialization for this child
12:55 - class right here which contains the
12:57 - attributes which we inherited from the
13:00 - base class so in this case we've
13:01 - inherited the width and the length and
13:04 - then we have color now what that means
13:06 - is that in our Constructor we're going
13:07 - to actually take the width the length
13:09 - and then the color and the reason that's
13:11 - the case is because we actually look up
13:13 - all of these different fields using
13:15 - something known as reverse method
13:17 - resolution order now I don't want to get
13:19 - into that too much in this video but
13:21 - pretty much what it means is we start at
13:23 - the very very Base Class so whatever the
13:25 - top of the chain is so if something was
13:27 - uh being inherited from this one we'd
13:29 - start at that but in this case we start
13:31 - at rectangle and then we go to the child
13:33 - class colored rectangle which means we
13:35 - have the width the length and the color
13:37 - and you can see that this is the correct
13:38 - initialization now the same thing is
13:40 - going to happen for other methods so for
13:42 - equal repper Etc we're going to use the
13:45 - attributes or the fields in that order
13:47 - again starting with the base class and
13:49 - then going into the child class now in
13:52 - this case there's no need to write that
13:53 - post init the reason we don't need to
13:55 - write the post init is because the init
13:57 - is automatically going to have have
13:59 - these attributes or Fields already
14:01 - because of how it's inherited so now we
14:03 - move on to the last example which is the
14:05 - most advanced and this is where we need
14:07 - an initialization variable so let's say
14:09 - that we're actually writing a class and
14:11 - there's a value we need to accept during
14:13 - initialization but it's not a field that
14:15 - we want to be included in the class or
14:17 - something that's going to be used Beyond
14:19 - just the initialization now this is a
14:21 - good example where what we actually need
14:23 - to do is accept a database during
14:26 - initialization and then we look
14:27 - something up in that database but we
14:29 - don't need to store that afterwards or
14:31 - we don't care about the value after
14:33 - right we don't want this to be included
14:34 - in say the repper or in the equal method
14:37 - or anything else it's going to be
14:38 - generated by the data class other than
14:40 - the initialization now there's other
14:42 - ways to do this but what we can do is we
14:44 - can specify this as an AIT bar which is
14:46 - what we've imported here from data class
14:49 - and now what it means is that it will be
14:51 - included in the constructure but it
14:53 - won't be included in those other methods
14:55 - it also means that it's going to be
14:57 - passed automatically as a parameter to
14:59 - our post AIT method so we can use it for
15:02 - doing any custom logic or lookups that
15:05 - we need so in this case you see that
15:06 - post and nit will accept this the reason
15:09 - it accepts it is because it's defined as
15:11 - an initialization variable which tells
15:13 - data class to automatically pass it when
15:16 - it calls the post AIT method then in
15:18 - here what we can do is we can make sure
15:20 - that J is none and database is not none
15:23 - and if that's the case we can then
15:24 - assign self. J which is a field that we
15:26 - want to store persistently on this class
15:29 - with the database. lookup of J which in
15:31 - this case would give us value or
15:33 - whatever the lookup function would do
15:35 - this is just kind of a mock example
15:36 - right here anyways that is something I
15:38 - wanted to show you because it can get
15:40 - kind of advanced and just the point is
15:42 - that pretty much any scenario you've
15:43 - thought of has actually been handled by
15:45 - python there is a ton of documentation
15:48 - that you can read I will link this page
15:50 - in the description so with that said
15:52 - guys that's going to wrap up this video
15:53 - that has covered all of the important
15:55 - parts of this documentation if you found
15:57 - this helpful go ahead and leave a like
15:59 - subscribe to the channel and I will see
16:01 - you in another
16:02 - [Music]
16:09 - one