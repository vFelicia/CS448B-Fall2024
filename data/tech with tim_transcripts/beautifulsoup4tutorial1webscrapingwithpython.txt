00:00 - hello everybody and welcome to a brand
00:02 - new tutorial series on this channel
00:04 - which is on beautiful soup 4. now
00:06 - beautiful soup 4 is kind of a web
00:08 - scraping and html parsing module so what
00:11 - this allows you to do is actually
00:12 - extract information from html documents
00:15 - and then modify html documents as well
00:18 - so you could use this for web scraping
00:20 - you could also use this to read in say
00:22 - an html file modify it programmatically
00:25 - using python code and then recreate like
00:28 - a new html file that has those
00:30 - modifications to it it's very versatile
00:32 - there's a ton of stuff to show you but
00:34 - in this first video here what i will be
00:36 - doing is just giving you an introduction
00:37 - to how it works showing you how to read
00:39 - in a local file showing you how to read
00:41 - an html from the web and then i'll kind
00:44 - of just give you you know like a brief
00:45 - walkthrough of how beautiful soup works
00:47 - and some of the main most common
00:49 - functionality that you're going to want
00:50 - to know in the very last video of this
00:52 - series i will show you how to write a
00:54 - relatively automated web scraping
00:56 - program that goes and looks for prices
00:58 - of graphics cards i know a lot of people
00:59 - are looking for graphics cards right now
01:01 - so i thought that would be an
01:02 - interesting application that we could
01:03 - kind of
01:04 - conclude everything with that's writing
01:06 - that code anyways i hope you guys are
01:07 - excited if you are make sure to leave a
01:09 - like subscribe to the channel let me
01:11 - know in the comments anything you want
01:12 - to see in this series let's go ahead and
01:14 - get started
01:18 - [Music]
01:24 - alright so in front of me i have the
01:25 - beautiful soup 4.9 documentation i'll
01:28 - leave a link to this in the description
01:30 - in case you'd like to read this yourself
01:32 - pretty much everything i'm going to show
01:33 - you here is coming directly from this
01:34 - documentation page i've just kind of
01:36 - summarized it and grabbed what i figured
01:38 - was the most important stuff from here
01:40 - anyways if you want to see all of the
01:42 - functionality you can see there is quite
01:44 - a bit of it this is quite a long
01:45 - document then you can click the link in
01:47 - the description all right so the first
01:48 - thing we need to do when we're going to
01:49 - start working with beautiful soup is we
01:51 - need to install it now what we need to
01:53 - do is install the python package which
01:55 - comes from pip so if you're on windows
01:57 - open up command prompt if you're on mac
01:58 - or linux open up your terminal and then
02:01 - type the following pip install and then
02:03 - this is
02:05 - beautiful
02:06 - soup
02:07 - for like that i think i spelt that
02:09 - correctly so you're going to pip install
02:11 - beautiful soup 4 and then that should
02:14 - install the package for you now for some
02:16 - reason this command does not work for
02:17 - you try pip 3 install beautiful soup 4.
02:20 - if that doesn't work for you try python
02:23 - hyphen m pip install beautiful soup four
02:25 - and if that doesn't work try python
02:27 - three hyphen m pip install beautiful
02:29 - suit four lastly out of three here those
02:31 - are the kind of different combinations
02:32 - you can try if none of those work i do
02:34 - have some videos i'll leave in the
02:36 - description that show you how to fix
02:37 - your pip anyways at this point i'm going
02:40 - to assume that you've installed that
02:41 - python package i'm using python version
02:44 - 3.8 i believe right now but you can do
02:46 - this in pretty much any version it
02:47 - should work the same alright so now that
02:49 - we've got that installed we can start
02:50 - writing our python code i am currently
02:53 - in sublime text you can use any editor
02:55 - that you like this is just the one that
02:56 - i prefer for these types of videos and
02:58 - what i'm going to do is start by
03:00 - importing from bs4
03:02 - import beautiful
03:05 - soup like that so this is what you need
03:07 - to do to get started and then what we're
03:09 - going to do after this is i'm going to
03:10 - show you how to read in an html file and
03:13 - then to modify that file then later in
03:15 - the video i will show you how to read in
03:16 - kind of a web page
03:18 - so if you want to read an html file
03:21 - first of all you need an html file so i
03:23 - have this kind of dummy html file here
03:25 - i'll leave a link in the description
03:26 - it's a github repository that has all
03:28 - the code that i write here including
03:29 - this document so you can grab it from
03:31 - there if you want but this is just kind
03:32 - of a dummy html file okay so this is in
03:35 - the same directory as where i have this
03:37 - web scraping.pi file make sure it's in
03:39 - the same directory otherwise it's going
03:41 - to be a bit of a headache and what
03:42 - you're going to do is open this file and
03:44 - then use beautiful soup to read it so
03:46 - we're going to say with
03:47 - open and then this is going to be index
03:50 - dot html comma and then we're going to
03:53 - say html dot parser so
03:56 - oh sorry not html.parser this is going
03:58 - to be r because we're opening this in
04:00 - read mode i'm getting a little bit ahead
04:01 - of myself and i'm just going to call
04:02 - this f standing for file okay so with
04:05 - open index.html in read mode as f and
04:09 - then what i'm going to do is say my
04:10 - document is equal to beautiful soup and
04:14 - then i'm going to put f as the document
04:16 - that i want to read in here and then i'm
04:18 - going to do
04:19 - html.parser so there's a few other
04:21 - parsers you can use here i'm not really
04:24 - going to talk about what those are but
04:25 - pretty much since this is an html
04:27 - document we want to parse it as an html
04:29 - document so we write html.parser this is
04:31 - like an accepted type for the beautiful
04:34 - soup
04:35 - module okay
04:36 - then what i'm going to show you is just
04:37 - what this looks like but as kind of a
04:39 - python object so i'm going to print out
04:42 - the doc and run my code and show you
04:45 - that we get the html document like that
04:48 - so that's as easy as it is to actually
04:50 - read in an html file this is local on
04:53 - your machine now what i'm going to show
04:55 - you is one cool thing that you can do
04:56 - here so it's usually better because your
04:58 - html is always going to be all kind of
04:59 - like jumbled together to prettify this
05:01 - before you print it out so if you print
05:03 - doc dot pretify then what this does is
05:06 - give you all the indentation and you can
05:07 - see this is a lot nicer and it obviously
05:10 - is much easier to read okay so that is
05:13 - how you read in a document now i'm going
05:14 - to show you a few pieces of the
05:16 - functionality so usually what happens
05:18 - when you read an html file like this is
05:20 - you want to search for a specific aspect
05:22 - if we're going to the example i
05:23 - mentioned at the beginning of the video
05:24 - maybe you're looking for the price of
05:26 - something maybe you're looking for the
05:27 - name you're looking for maybe a table
05:29 - usually searching for some type of
05:30 - information so you need to be able to
05:33 - find that in the document so the first
05:34 - thing i'm going to show you is how you
05:36 - can find things by the tag name so
05:39 - actually i should go here and just print
05:41 - this out again so obviously we have like
05:43 - the head tag the html tag the center tag
05:45 - all of these things it's really easy to
05:48 - actually find stuff that is named a
05:49 - specific tag in beautiful soup what you
05:52 - can do is doc dot and then the tag name
05:55 - and this will actually give you access
05:57 - to the first tag that has this name in
06:00 - the document so just bear with me for a
06:02 - second here i'm going to say tag is
06:04 - equal to doc dot and then we'll go with
06:06 - title and then what i can actually do
06:08 - here is print out the tag and you'll see
06:11 - that this is the title tag right so if
06:13 - you want to access specific tag just put
06:15 - the name now obviously if there's
06:17 - multiple things named or using the same
06:19 - tag it's only going to give you the
06:21 - first one i'll show you how to get all
06:22 - of them in a second okay so now that we
06:25 - have the tag what if i just want to
06:27 - access what's inside of here well to
06:29 - access the string that is being held
06:31 - inside of a tag what you can do is use
06:33 - dot string so i can say tag dot string
06:36 - and then notice it gives me your title
06:38 - here
06:39 - now one of the cool things about this
06:40 - though is i can also modify these tags
06:43 - so what i can do is something like tag
06:45 - dot string is equal to
06:47 - and then hello and now if i print out my
06:50 - tag
06:51 - notice that it's actually modified this
06:53 - in place and changed it to hello now
06:56 - what i can also do is show you that when
06:58 - i print the entire document again so
07:00 - print doc we don't need to prettify it
07:02 - if we go here and we find the title
07:04 - notice it's actually changed in the
07:06 - document so the same way that you can
07:08 - access things you can change pretty
07:10 - straightforward now there's a lot of
07:11 - other things you can change as well i'll
07:13 - show you those in later videos but
07:14 - that's kind of the basics that's how you
07:15 - access what's inside of a tag and then
07:18 - how you actually get the string within
07:20 - the tag
07:21 - okay now what else can we do here well
07:23 - we need to be able to find tags that
07:25 - aren't just the first ones that occur in
07:27 - the document so in order to do that what
07:29 - you can do is say doc
07:31 - dot find and then you can put the tag so
07:34 - if i put the tag a for example here this
07:36 - will give me any links but again this is
07:38 - only going to give me the first tag that
07:40 - occurs that has a inside of it so what
07:43 - you can do instead is find all
07:46 - and excuse me here if now i print
07:49 - tags you'll see this will give me all of
07:52 - the a tags in the document actually i'm
07:53 - going to go with p because i don't know
07:55 - if there's multiple a tags here and when
07:57 - i do this notice i get all of the p tags
07:59 - being printed out right here and also
08:01 - shows me what's inside of these p tags
08:03 - okay so that is how you can get that so
08:05 - as you probably noticed here these p
08:07 - tags have things inside of them right
08:10 - like this p tag has another tag inside
08:12 - of it so i'm going to show you now how
08:14 - you can actually access the nested tags
08:17 - now this is the exact same way that you
08:18 - would access the tags just from your
08:20 - regular document but now you're going to
08:22 - do it on an existing tag so this will
08:25 - show you kind of how this works but
08:27 - so this is pretty straightforward but
08:28 - just
08:29 - so this is pretty straightforward but
08:30 - let's just have a look here so let's say
08:32 - we want to access the very first tag so
08:35 - tag 0 in fact let's just put a 0 right
08:37 - here and i want to access let's say the
08:40 - actually let me print this out and see
08:43 - what we get here uh maybe i want to
08:44 - access the b tag right or all of the
08:46 - bold tags
08:48 - well if i want to do that what i can do
08:49 - is the following i can say tags
08:51 - dot find all just like i found
08:53 - everything on my document
08:55 - and then i can access
08:57 - the b text and when i do this now it
08:59 - gives me all of the different b texts
09:01 - right and then same thing within here i
09:03 - could go and access the text of these b
09:05 - tags or i could go and access maybe the
09:07 - italics tag or whatever i want but
09:09 - that's kind of how you can search
09:10 - through and parse the document and again
09:12 - i'll do an entire video on how you can
09:14 - actually find stuff in more detail so we
09:16 - will continue in one second but i need
09:17 - to quickly thank the sponsor of this
09:19 - video and this series which is alco
09:21 - expert algo expert is the best platform
09:23 - to use when preparing for your software
09:24 - engineering coding interviews they have
09:26 - over 160 coding interview practice
09:28 - questions on the platform taught by the
09:31 - best instructors one of which is me if
09:33 - you want to prepare for your technical
09:35 - coding interviews make sure to check out
09:36 - algo expert today by clicking the link
09:38 - in the description and using the code
09:39 - tech with tim for a discount on the
09:41 - platform all right so now that i've
09:43 - showed you how to read in an html file
09:44 - from your local system remember actually
09:46 - have this file here in the same
09:48 - directory i'm going to show you how you
09:49 - can read in html from a website so what
09:52 - i'm going to do is go to my command
09:54 - prompt here in the same way that we
09:55 - install beautiful soup we are going to
09:58 - now install requests so follow the same
10:01 - format of installing as i showed you
10:03 - previously but pip install requests
10:06 - and you notice obviously i already have
10:08 - this installed but you guys won't most
10:10 - likely and now we can actually access a
10:13 - website so the website that i want to
10:15 - access is actually nueck and as i
10:18 - mentioned we're going to be looking for
10:19 - gpu prices later in the video series but
10:22 - for now let's say i just want to check
10:24 - the price of a specific gpu so i'm going
10:26 - to steal this link right here this is
10:27 - for a 3080 and this is the price i'm
10:30 - going to show you how we can actually
10:32 - find and access this price okay so what
10:35 - i'm going to do now is i need to leave
10:38 - this import and i need to import
10:41 - requests now what i'm going to do is say
10:44 - that my url is equal to the url of
10:47 - whatever website i want to access and
10:49 - then what i'm going to do is i'm going
10:52 - to send a request so i'm going to say my
10:54 - result
10:55 - is equal to
10:57 - requests.get and i'm just going to put
10:58 - my url url like this so super simple all
11:01 - this is doing is sending an http get
11:03 - request to this url it's going to return
11:06 - the content of the page and the content
11:08 - of the page will be stored in
11:10 - result.text so if i do this and i run my
11:14 - code notice we're going to get a bunch
11:15 - of gibberish here but we are actually
11:17 - getting an html document okay now to
11:20 - prove this to you what i'm going to do
11:22 - is now read in result.text using
11:25 - beautiful soup so i just need to jump in
11:27 - here for one second and quickly mention
11:28 - that the url that we're using here does
11:31 - actually allow us to grab its html from
11:34 - a script now there is a lot of websites
11:37 - amazon is one of them that i tried and
11:39 - that i failed with that have like bot
11:41 - protection built in and that don't
11:43 - actually let you grab the html of a page
11:46 - by just doing what i'm doing right here
11:48 - this is a super simple way we're just
11:49 - sending a get request from a python
11:51 - script websites can detect you're using
11:53 - a script and they'll try to actively
11:55 - block you now there's some kind of like
11:58 - policy and legal related stuff when it
12:00 - comes to scraping websites so just make
12:02 - sure you're not like spamming requests
12:04 - on any websites or like dosing or
12:05 - ddosing anyone or something like that uh
12:08 - what we're doing here is is most likely
12:10 - fine but i just want to mention that
12:11 - that there is a lot of websites this
12:13 - won't work for and if they don't work
12:14 - for it i'm not necessarily going to show
12:16 - you how to get around the anti-robot
12:18 - stuff regardless let's continue the
12:20 - video so i'm going to say that my doc is
12:24 - equal to beautiful soup result.text and
12:27 - then in the same way as before we want
12:28 - to use the html
12:30 - dot parser and then i'm going to print
12:32 - out the doc dot pretify okay so let's
12:36 - run this i'll go back to that code in a
12:38 - second in case i went too fast for you
12:40 - and now notice obviously it's quite long
12:41 - but we are actually getting the html
12:44 - document perfect so we can see all the
12:46 - div tags and everything like that so now
12:48 - what i want to do is actually find the
12:50 - price of this gpu so let me go back to
12:53 - the website right here and notice that
12:55 - this is what the price looks like now
12:57 - i'm going to assume that i don't know
12:59 - what the actual figure is i don't know
13:01 - that it's two thousand six hundred
13:02 - dollars and i just wanna look for the
13:04 - dollar sign and then find the price
13:07 - afterwards so to do that is actually
13:09 - pretty easy what we can do here is go to
13:12 - let's just make a new variable and let's
13:14 - say
13:16 - prices is equal to and then doc dot find
13:19 - underscore all but this time we're not
13:21 - looking for a specific tag we're looking
13:23 - for some text the text i'm looking for
13:25 - is a dollar sign so i'm going to say
13:27 - text is equal to dollar sign like that
13:31 - and then i'm just going to print out
13:32 - prices and show you what we get
13:35 - so run this and notice we get two dollar
13:37 - signs now that's not very helpful
13:39 - obviously we want the entire thing we
13:41 - want the actual price not just the
13:43 - dollar sign but the thing is these
13:45 - dollar signs actually allow us to access
13:48 - what the price is and the way we can do
13:50 - that is by using this thing called a
13:52 - parent so the way that this is kind of
13:54 - set up beautiful soup is everything is
13:56 - in a tree-like structure so when you
13:58 - read in the document the html tag is
14:01 - kind of the first
14:03 - i don't even know what to call it branch
14:04 - of the tree if you want to call it that
14:06 - or the root of the tree and then there's
14:08 - all kinds of tags inside of the html tag
14:10 - right so if i have html here i have a
14:13 - head tag inside of the html tag inside
14:15 - of the head tag i have the title tag and
14:18 - we kind of have this tree-like structure
14:20 - where a descendant of html is the head
14:22 - tag and the body tag a descendant of the
14:25 - head tag is the title tag and then these
14:28 - tags right here also have a parent so
14:30 - the title tags parent is the head tag
14:33 - the head tag's parent is the html tag
14:36 - pretty straightforward but it just works
14:37 - in kind of a general tree structure and
14:39 - so what we've accessed here let me just
14:41 - write some kind of pseudo-html here is
14:44 - imagine we have a p tag
14:46 - uh okay
14:47 - and another p tag
14:49 - and then we have like our dollar
14:51 - and
14:53 - 2613 whatever it is we've accessed this
14:56 - single dollar sign right here and so if
14:58 - i access this dollar sign and i want the
15:00 - entire price what i want is the parent
15:04 - of this dollar sign because this just
15:06 - like everything else is a descendant of
15:08 - whatever its parent is and so if i
15:10 - access the parent this will give me the
15:12 - contents of the entire tag that this
15:14 - dollar sign is in and then i can try to
15:16 - search for the 2613.
15:19 - hopefully that kind of makes sense but
15:21 - that's the best way that i can really
15:22 - explain that to you so anyways we have
15:24 - these prices what i'm going to do now is
15:26 - say price is 0
15:28 - dot
15:30 - parent and let's just print out what
15:31 - this is so let's just say parent is
15:33 - equal to that
15:34 - and let's print
15:36 - the parent and run this and notice we
15:39 - get this kind of large tag here right
15:41 - and we have this list item tag
15:44 - and then we have the price current label
15:46 - and then we have strong and then we have
15:48 - what the actual price is
15:50 - so what i want here is what's inside of
15:52 - this strong tag i want the actual value
15:54 - so what i'm going to do now is search
15:56 - for the strong tag within the parent tag
15:59 - and then i'm going to look for the
16:00 - contents of the strong tag so now what
16:02 - i'm going to do is say
16:04 - strong
16:06 - is equal to parent dot find
16:10 - and then i'm looking for strong and then
16:13 - i will print not stung strong
16:16 - like that
16:18 - so now when i do this notice that we get
16:20 - two thousand six hundred and thirteen
16:22 - perfect now i just wanna get the two
16:24 - thousand six hundred thirteen so what do
16:26 - i do i use my dot string and i get two
16:29 - thousand six hundred thirteen
16:32 - all right so with that i am going to end
16:34 - the video here i just want to give you a
16:36 - quick introduction to how this module
16:38 - works in later videos i will show you
16:40 - more advanced stuff and all the other
16:41 - features that you need to know in my
16:43 - opinion this is a pretty cool thing
16:45 - really easy to use hope you guys enjoyed
16:47 - the video if you did make sure to leave
16:49 - a like subscribe to the channel and i
16:50 - will see you in another one
16:54 - [Music]