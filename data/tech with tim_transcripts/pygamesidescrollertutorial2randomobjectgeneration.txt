00:00 - hey guys and welcome back to the second
00:02 - video in my PI game scroller series I
00:06 - guess that's what we can call it this
00:07 - little side-scrolling game in this video
00:10 - I'll just give you a quick sneak peek of
00:11 - what we're gonna be doing pretty much
00:13 - we're gonna be setting up some different
00:16 - objects that can be moving on the screen
00:17 - to act as obstacles where then we can
00:21 - then we're gonna set up the hitboxes but
00:22 - of those objects and the character and
00:25 - then in the next video we're gonna go
00:26 - over collision and in the one after that
00:29 - we're gonna be doing scoring and like
00:31 - the end game and stuff like that so I'll
00:33 - give you a sneak peek here just by
00:34 - running my other code my other program
00:36 - so you can see here so wait a second
00:39 - we've got a saw with some spinning
00:41 - blades and the red boxes are just to
00:43 - simulate where the hitbox is gonna be so
00:46 - that we know when our character's
00:48 - jumping up and down if he's actually
00:49 - gonna be hitting that object so right
00:51 - now obviously I don't want the collision
00:53 - set up you can see that everything's
00:55 - working well and we randomly kind of
00:57 - generate objects on the screen like this
01:00 - so that's what I'm gonna be doing in
01:02 - this video makes you guys stay tuned
01:03 - until the very end if you have any
01:05 - questions always leave them in the
01:06 - comment down below okay so let's get
01:10 - started alright so the first thing we
01:12 - need to do for this is we need to set up
01:14 - our different obstacles or objects I'm
01:16 - just gonna call them obstacles in this
01:17 - case so I'm gonna start by just creating
01:19 - a new class and this one I'm gonna call
01:21 - my salt class okay so we're gonna
01:24 - inherit from objects oops I do our
01:30 - initialization function like this or
01:32 - method let's go we're gonna do the same
01:34 - that we got from here these ones here so
01:38 - XY with type so and then we'll set them
01:44 - up down here so self dot x equals x self
01:48 - del y equals y and so on
01:57 - oK we've got that set up now in here I'm
02:00 - also gonna create one more variable I'm
02:02 - just gonna call this self thought hip
02:03 - box and we'll just set that equal to
02:07 - blank for right now actually we'll do
02:09 - this
02:09 - X Y width and height so there we go
02:17 - okay and now we need one more method in
02:19 - here and this is gonna be a draw method
02:21 - and that we're done with this just gonna
02:22 - do self.window and then here we're gonna
02:26 - do wind dog blitz can just will pull
02:30 - this image I'm going to fill this in a
02:31 - second self-taught image and then in
02:33 - here we're going to do self thought X
02:35 - and self thought what and then actually
02:40 - underneath here I'll just go step
02:41 - forward and we're gonna do pygame
02:44 - dot draw dot rectangle and then we're
02:48 - gonna draw to the window we're gonna
02:49 - draw it red so by doing that and then
02:54 - we're gonna draw our hip box so let's do
02:56 - self dot hitbox as it's already in the
02:59 - rectangle format here and then we'll
03:02 - draw with a thickness of two and then in
03:05 - here we're gonna set up the hip box
03:07 - afterwards so one second we'll do just
03:11 - so we remember self-thought hitbox equal
03:15 - to that and then we're gonna change
03:16 - these properties in here as our
03:17 - characters moving around okay so now we
03:19 - need to get the image so we've done that
03:21 - class just like I have at the top of
03:23 - these classes here I loaded up all the
03:25 - images this one just gonna be I think
03:27 - it's like four images for our saw with
03:30 - the spinning blade so to do this we're
03:33 - just gonna I'm just gonna call this what
03:36 - I call it image equal to this and then
03:40 - in here we need to do pygame dot image
03:44 - dot load and then in here we're gonna
03:47 - type OS not half don't like join now
03:51 - what this does here if you haven't seen
03:53 - it before is pretty much it allows us to
03:54 - access an image that's inside of a
03:55 - folder so in like a subdirectory or
03:59 - something like that so that that way we
04:00 - don't have all the images mixing with
04:02 - our Python scripts and then first image
04:05 - is called saw zero I'm going to copy and
04:08 - paste this
04:09 - three times and each time I'm just gonna
04:13 - change this so it's gonna say saw one
04:15 - now the next one saw two and the last
04:20 - one is going to be saw three and you
04:26 - should already have all those images if
04:27 - you download them from the github and
04:30 - there we are okay so now we need to kind
04:33 - of animate through our images so right
04:35 - now all I'm doing is I'm just drawing
04:36 - the one image we actually need to count
04:38 - through the images and draw them
04:40 - accordingly just like we do up at the
04:43 - top so just give me one second okay so
04:49 - now we're just gonna do another variable
04:53 - up here or attribute I'm just going to
04:55 - call this self dot let's say here is a
04:58 - self talk count that's fine for now set
05:00 - equal to zero and then in here we're
05:03 - gonna say if self dot count is greater
05:07 - than four actually not for let's see
05:10 - what number do we want to do here we're
05:13 - gonna do eight greater than or equal to
05:16 - eight and I'll explain why I'm using
05:17 - this number in a second that we're just
05:19 - gonna reset our rotate our count
05:21 - variable here to zero and then in here
05:25 - what I'm gonna do them and say wind up
05:27 - lit self-thought image and then we're
05:29 - gonna say self dot count inside of this
05:33 - image right here integer divided by two
05:36 - so what interior division does is it
05:38 - pretty much just is going to find the
05:43 - even amount that can go into something
05:45 - so for example if you're dividing four
05:47 - by three then it's gonna give you an
05:49 - answer of one rather than the decimal
05:51 - answer that you get there so this way
05:53 - every two frames we're drawing one frame
05:55 - of the sauce so that doesn't move too
05:57 - fast and this is kind of how I animated
05:59 - up here just with different numbers this
06:02 - is just an easier example that's why I
06:03 - didn't leave it in the starter file and
06:05 - that should all work like that and that
06:08 - we actually we just make sure that we're
06:09 - incrementing our account otherwise
06:10 - that's not gonna work
06:11 - so we'll do self thought count plus
06:14 - equals one like so okay so now our first
06:15 - objects done are saw object now we want
06:19 - to move on to our next object which I
06:21 - just like to call like a spike
06:23 - so I'm just gonna call this one class
06:25 - spike we're gonna inherit from our saw
06:28 - object but just by typing saw because
06:29 - that's up here and that's gonna save us
06:31 - a bit of time because now we don't need
06:32 - to retype out this we're just gonna
06:34 - change the draw method so now all we
06:37 - need to do is we need to find the image
06:38 - so this spike image is not moving it's
06:40 - just a still image this makes it a
06:42 - little bit easier for us so we're just
06:43 - gonna do image equals and then pygame
06:47 - got image got load same thing as before
06:51 - Oh s dot path join in here when you get
06:55 - images call MA and then I believe I just
06:58 - called my picture spike dot PNG oh that
07:02 - reminds me for all these images up here
07:04 - where we have saw zero we need adult PM
07:07 - G's here otherwise you're gonna run into
07:08 - an error with that so let me just do
07:11 - that quickly dot PNG my bad so I wrote
07:17 - that okay so now we've got the image now
07:20 - we need to make our draw method so we're
07:22 - gonna do define draw then in here self
07:25 - when same as up here and all we're gonna
07:29 - do here is we're gonna do my game or
07:32 - actually win so up blitz then our image
07:36 - so self dot image and then self dot X
07:42 - and self double line like so now after
07:48 - that we want to draw our hitbox so we
07:50 - first have to change our hitbox so we're
07:51 - gonna say self thought hitbox is equal
07:55 - to and we're gonna change it in a second
07:56 - and then we're gonna say tie game
08:01 - dot draw dot rectangle same thing as
08:05 - before on our window color red RGB here
08:09 - and then we're gonna say self dot hitbox
08:12 - and too thick there we go okay so now
08:18 - you take a breath here quickly we've got
08:20 - our spike class and we've got our saw
08:23 - class this one inherits from here so
08:25 - it's going to have these same properties
08:26 - for the initialization method I've got
08:30 - our images loaded up and everything
08:32 - should hopefully be work
08:34 - so now we're gonna do the hitboxes so as
08:38 - I showed you in the other program we'll
08:40 - run that quickly here the reason that we
08:42 - create hitboxes is because an image is
08:44 - not perfect right so everything in
08:46 - pygame becomes erecting but when you
08:47 - draw it as an image and you can see here
08:49 - that if we didn't have the hitbox then
08:51 - if you were to hit even where it doesn't
08:53 - look like there's a spike then it would
08:56 - classify as you like knocking into it or
08:58 - hitting it right so when we do do
09:00 - character collision it's important that
09:02 - we have the hitbox for these different
09:04 - objects so that you're not running into
09:06 - things and you don't even know you're
09:08 - running into them so for example this
09:09 - saw here you might even go well to move
09:11 - the hitbox down a little bit and the
09:13 - hitbox just is what's in red so that
09:15 - we're not running into these corners
09:16 - here because we can't actually really
09:18 - create a circular hitbox without a lot
09:21 - of really complex coding which we're not
09:22 - going to cover in this tutorial okay so
09:25 - that's why we have the hitbox so now I'm
09:27 - just gonna tell you the numbers I use
09:29 - for these hitboxes just to speed up
09:31 - things make it a little faster pretty
09:33 - much is relative to the position of the
09:35 - object right so for our first object
09:37 - which is our saw this is what I have
09:41 - here I have self-thought X plus 5 not
09:46 - just moving it two to the right five and
09:48 - then we'll have self-thought Y plus five
09:51 - moving it down five and then self-taught
09:55 - width minus 10 so that's the same on
09:57 - both sides and self dot height minus
10:00 - five like that there we go and now after
10:06 - this actually for this height here we
10:07 - can just leave this like this just
10:08 - realize that now for the next one
10:10 - spike we have self-thought X plus ten
10:16 - self dot y self-thought width per
10:20 - actually I think I just made this a
10:22 - static number yeah I did it is 28 just
10:25 - because of the width I know the width of
10:27 - the thing that we're drawing there and
10:29 - then 315 like that okay so now let's
10:33 - let's just draw these on the screen so
10:34 - that we can we see them in action make
10:36 - sure they're working so I'm just
10:38 - temporarily doing this you don't have to
10:39 - do this if you don't want but I'm just
10:41 - gonna create two objects I'm just gonna
10:42 - call SAW
10:44 - saw and then in here we're gonna do
10:47 - let's draw a 300 0 48 320 and then we'll
10:55 - just do oh sorry this is spike actually
11:00 - just change that quickly
11:01 - we'll say SAW is equal to a new salt
11:04 - object we're gonna draw this I don't
11:06 - know where do we want to draw this we'll
11:07 - just draw it in the middle screen just
11:09 - we can see it 300 300 and is 64 by 64
11:12 - perfect now in here we got to make sure
11:15 - we actually are drawing them spike don't
11:17 - draw on the window and saw a girl on the
11:24 - window now I'm just gonna add e and a W
11:27 - here because I realized that the same
11:28 - name is the class we're gonna run into
11:30 - an issue there and there we go
11:32 - so now you can see we've gone our images
11:34 - loaded up here and we can see the hitbox
11:36 - on a spike and the hitbox on the saw now
11:38 - notice the saw is massively large that's
11:41 - just because we're gonna change it and
11:43 - make a little bit smaller I just wanted
11:44 - to show you that first so when we do
11:46 - actually do that the hitbox will be
11:48 - correct so there we are everything looks
11:50 - like it's working this Aussie little
11:51 - animation going so now let's get the saw
11:55 - to be the right size so to do this what
11:57 - we're gonna do is just a little thing in
12:00 - PI game where we can actually transform
12:03 - an image so to do that what we need to
12:05 - do is just type or use a little trick in
12:08 - PI game which allows us to actually
12:10 - transform an image so we can scale it
12:12 - down or scale it up so in this case we
12:14 - want to scale down so where our images
12:16 - in our saw here we're gonna do PI game
12:18 - dot sorry transform dot scale and we'll
12:25 - just put this in brackets our image and
12:27 - then in here what we want to scale it
12:29 - down to so in this case 64 by 64 now
12:32 - we'll go ahead and we'll run the program
12:35 - and we ran into an issue saw drama is
12:38 - not defined hmm let's see here oh that's
12:42 - because I shouldn't put another W here
12:44 - my god alright well I really can't type
12:50 - today can I so make sure you spell
12:52 - pygame correctly and then everything
12:55 - should be working there we go so now you
12:56 - can see the salt looks pretty
12:58 - correct the hip marks might be a little
12:59 - bit low but that's not gonna matter
13:01 - because our characters never gonna go
13:02 - lower than this point anyways and yeah
13:05 - everything looks pretty good for our two
13:07 - hip boxes so let's get our objects now
13:11 - moving randomly onto the screen so we
13:13 - don't just want them floating in the
13:14 - middle like that obviously we want them
13:15 - to be moving so there's a few things we
13:18 - need to do now so we're gonna get rid of
13:20 - these two objects here these were just
13:22 - used to test out our program and now
13:24 - we're gonna create a new list I'm just
13:26 - in this while loop here and we're just
13:27 - gonna call it well I'm gonna say objects
13:30 - it's gonna set it equal to a blank list
13:33 - right now now what I'm gonna do
13:36 - quickly before I don't forget we're
13:38 - gonna say for object another T just so
13:41 - it doesn't mess up in our program in
13:45 - objects we're going to do object dot
13:49 - row like that feel free to change the
13:51 - names all this stuff if you want you can
13:52 - make it X if you like it doesn't really
13:55 - matter I just like to make it so make
13:56 - sense so this would break as well next
13:58 - don't draw it and then in here put
13:59 - window sure you know what we'll just
14:00 - leave like this for now now in here what
14:03 - we need to do is every time this event
14:06 - is triggered remember we increase the
14:08 - speed and this happens every half a
14:10 - second so what we want to do is now we
14:13 - want to create another event that's
14:15 - gonna happen every like two or three
14:16 - seconds we can change that randomly if
14:19 - we want so that we can then create a new
14:21 - object based on that so let's create a
14:23 - new event so we're gonna say pie or game
14:25 - time the center score timer so this
14:27 - timer again is gonna trigger at whatever
14:30 - time we send it so I'm going to so you
14:32 - use your event plus two and then in here
14:34 - I'm gonna do random dot R and range and
14:39 - we'll just make it between 2000 and 3500
14:44 - so that we don't know exactly when it's
14:45 - going to come but we know it's within
14:47 - two seconds and 3.5 seconds so add a
14:49 - little element of randomness here now
14:51 - make sure that well before we run our
14:53 - program here we import random at the top
14:57 - okay and then we can come back down and
15:00 - there we go so now that this event is
15:02 - being triggered we need to check when
15:04 - the event is triggered so just like we
15:06 - did here I'm just gonna copy and paste
15:08 - this save myself a bit of time
15:11 - then we're gonna change this to two and
15:13 - in this case here we're gonna now append
15:16 - a new object into our lists or new
15:19 - obstacle so objects dot append and then
15:23 - it up here we're just going to start by
15:26 - randomly selecting which objects we want
15:28 - to append so if it's if we get 0 so I'm
15:31 - just gonna say R equals random dot R and
15:34 - range between 0 and 2 if we get 0 then
15:38 - we're going to append our our spike
15:40 - otherwise we're gonna append our saw and
15:42 - it doesn't matter what way you do it
15:43 - just so that we don't know exactly what
15:46 - one we're getting so we'll just say if R
15:47 - was equal to 0 we'll save objects dot
15:51 - append and then this is gonna be a saw
15:53 - and in here we're gonna make our X it's
15:57 - gonna be again we're gonna do a random X
15:59 - actually come on to random we'll just do
16:01 - 8 10 so that we know that it's on the
16:04 - right side of the screen so that we
16:05 - don't see it quite yet it doesn't just
16:06 - pop up and magically appear in our
16:08 - screen it's gonna look like it's sliding
16:10 - in the Y value if we're gonna set at 3
16:13 - 10 and then after that we are going to
16:16 - do 64 by 64 for our width and our height
16:20 - okay now we'll just do else because we
16:22 - know if it's not 0 it's got to be 1
16:24 - because this can't be two we'll copy
16:26 - this and paste this down here and in
16:30 - this case we're gonna make this a spike
16:31 - and then in here we're not I will put it
16:34 - at 810 I guess and then for our Y value
16:38 - is gonna be 0 we have 48 as our whip and
16:41 - then for our height believe we have put
16:44 - 320 and there we go that should be good
16:47 - so now that we're appending to the
16:49 - screen our objects there's one more step
16:51 - that we need to do we need to move the
16:53 - objects so after we're drawing our
16:55 - objects we're creating our objects we
16:58 - need to move so we're gonna do this
16:59 - another thing I'm here going to say for
17:02 - object another T in objects that we're
17:07 - just gonna say object dot X plus equal
17:13 - cork minus equal 1.4 because that's
17:17 - because we're moving it left right so
17:18 - just like we're moving the background
17:19 - we're also gonna be moving the x value
17:22 - of our objects so it looks like it's
17:23 - sliding left onto this
17:24 - Green another step I'm gonna do here is
17:26 - I'm just gonna say if object dot X is
17:30 - less than and we'll say negative object
17:36 - dot width with two T's so that it's off
17:41 - the screen and we can no longer see it
17:42 - and we'll just multiply this by a
17:43 - negative one so that's the negative then
17:46 - we're gonna get rid of the object so to
17:47 - do that say objects are list dot pop now
17:51 - what pop does is it removes an object
17:53 - add an indices so we have to find the
17:55 - indices we're removing the object so to
17:57 - do this I hate typing this we're just
18:00 - gonna say objects dot index and then in
18:03 - here object like that so a lot of
18:07 - objects here but I picked up pop we find
18:10 - the index of where object is and then we
18:12 - remove it from our list like that okay
18:15 - so that should be it let's go ahead and
18:16 - run our program and see if everything's
18:17 - working okay and give it a second to
18:20 - spawn in some objects so you can see we
18:21 - have a saw coming in now another sauce
18:24 - these are a little bit close together so
18:25 - we might want to increase the time
18:26 - increment for our random and there we go
18:29 - if you got two spikes another saw so it
18:31 - seems to be working pretty well so what
18:34 - we want to do now is maybe just change
18:36 - the time increment so just play around
18:38 - with it maybe two two seconds a little
18:40 - bit too quick so maybe we'll make this
18:42 - between three seconds and five seconds
18:46 - right you guys can play around with this
18:47 - as you like but that's probably good
18:49 - time increment and that's gonna do it
18:51 - for this second video so in the next
18:53 - video I'm gonna go over the collision
18:55 - and then I'm gonna go over scoring that
18:58 - also might lead into a fourth video but
19:00 - that's gonna be it it's only gonna be
19:01 - four videos so if you guys liked the
19:03 - video please make sure you leave a like
19:04 - and subscribe to the channel and I will
19:06 - see you again in the next one
19:08 - [Music]