00:02 - [Music]
00:05 - now what this will let us do is use all
00:09 - the classes inside of locators to access
00:12 - those locators so let's go to page I
00:15 - just need to look at this documentation
00:16 - on the left side here to make sure
00:18 - you're not getting lost so I'm gonna say
00:20 - main page locators dot Go button so I
00:24 - want to find and sorry inside of here
00:26 - out to click the Go button what I want
00:28 - to do is find the element that is
00:30 - denoted by the locator that I put in the
00:32 - main page locators right so if we went
00:34 - back to locators we see we have this
00:36 - locator here and inside a page we're
00:38 - gonna search by that now we need to add
00:40 - a little asterisks here what this stands
00:42 - for is unpack and essentially you can
00:44 - think of it like this if I have a couple
00:46 - that is one two if I unpack it so I put
00:49 - the star in front of it some people also
00:51 - call this splat then what this will do
00:53 - is separate it into arguments so rather
00:56 - than having this happy one object as a
00:58 - tupple it will separate it into two
00:59 - entities so you can think of like if I
01:02 - didn't have the start then what would go
01:04 - in here would be let me just copy this I
01:06 - don't have to retype it at Apple one two
01:08 - but as soon as I put the star what this
01:11 - actually translates to is 1 comma 2 now
01:15 - you might be like well how is that
01:16 - different well these are two objects
01:18 - whereas before it was 1 and it split
01:20 - that into two objects so we can pass
01:22 - that as an argument to the find elements
01:24 - so that's the idea behind that so let's
01:26 - go back to star main page locators again
01:30 - that's called splat or unpack it's
01:32 - fairly useful actually thing in Python
01:34 - it's used quite often so there we go so
01:36 - that's the click go button we have the
01:38 - locators imported so from locator import
01:40 - star and I think this one is actually
01:44 - getting pretty pretty good so now we're
01:46 - going to find another class which is
01:48 - called search page oops if we can type
01:52 - here it's hard to type when I'm looking
01:54 - at the other screen Serge
01:56 - paid search result page I should type
01:58 - this correctly otherwise this could be a
01:59 - mess okay so a search result page and
02:01 - then we'll inherit from base page again
02:03 - which means we're just gonna use this
02:04 - initialization and then inside of here
02:07 - we're gonna say define is underscore
02:11 - results
02:13 - underscore found self :
02:16 - return the string and I'll talk about
02:19 - this after no results found period not
02:25 - in self driver dot page source okay
02:33 - so I think that's right page source yep
02:36 - so what this is essentially saying is
02:37 - okay so we have this search page result
02:39 - class this inherits from the base page
02:41 - and what this is gonna tell us is if any
02:44 - results are found from the the source
02:47 - page so essentially if this string does
02:49 - not exist on that page in the HTML then
02:52 - we will say this worked that was good
02:54 - otherwise that'll be false right so
02:56 - that's the idea for the search result
02:58 - page now I have a feeling these are
02:59 - templates because I don't think they use
03:00 - them but anyways that's the idea okay so
03:05 - now that we have that what we're
03:06 - actually gonna do is go up and create
03:08 - something called element so element is
03:11 - actually gonna be very useful
03:12 - I don't probably draw it try to do an
03:14 - example with this to show you what I
03:15 - mean so from here we're gonna do at the
03:17 - top of this from selenium-webdriver dot
03:21 - support dot UI imports web driver wait
03:26 - okay so we're gonna say class base page
03:30 - element if we don't have that in
03:32 - capitals will inherit from object and
03:35 - what this file is gonna do is actually
03:37 - represent one element on the page so for
03:41 - example it will represent the search bar
03:43 - it will resent a form input and the idea
03:46 - behind this is that it's gonna be really
03:47 - easy to access and change elements if we
03:51 - have kind of one interface to do that
03:53 - and that's what we're defining here so
03:55 - we're defining a base page element and
03:57 - this is what's gonna be used for all
03:59 - other elements and I kind of just have
04:01 - to write this first and then I will
04:02 - really explain why this is useful we're
04:05 - gonna say define set self object value
04:09 - now notice this has two underscores so
04:11 - underscore and square set underscore
04:12 - underscore we'll talk about what that
04:13 - means but this is called a dunder method
04:15 - it's actually part of the Python data
04:17 - model which is an advanced aspect of
04:20 - Python and then we're gonna say web
04:22 - driver weight and I'll talk about this
04:24 - again driver
04:26 - a hundred dot until lambda driver :
04:33 - driver dot find underscore elements
04:39 - underscore by underscore name self dot
04:44 - locator okay so we have that web driver
04:47 - great let me make sure I typed that
04:49 - correctly okay and then driver dot find
04:54 - element by name self dot locator we'll
04:59 - talk about what the locator is in a
05:01 - second that's sorry duck clear and we're
05:04 - gonna copy the same thing but send keys
05:06 - now the syntax should look fairly
05:08 - familiar except for the lambda so I'll
05:10 - talk about that a second but element by
05:12 - I by name dot send underscore keys about
05:19 - you okay so what this is saying is when
05:22 - we have some element on the page if we
05:25 - want to set its value so we want to set
05:28 - you know what it's equal to so say that
05:30 - that search box we want to set it well
05:32 - what we need to do is always follow this
05:35 - process so for any element that we want
05:36 - to set the value for we're gonna do that
05:39 - by following this process we're gonna
05:41 - have the driver which is equal to the
05:43 - object driver now I know you don't know
05:45 - what object stands for yet but you'll
05:47 - see what that is in a second that's
05:48 - gonna be equal to the it's hard to
05:52 - explain this is an advanced Python
05:53 - concept but once we go to the other page
05:54 - I'll I'll show you but essentially this
05:56 - will be the web driver that's what it is
05:57 - and we're gonna say web driver waits so
05:59 - with the web driver up to 100 seconds
06:01 - until this function is true so until
06:06 - we're able to run this so this a
06:08 - function lambda stands for anonymous
06:10 - function so lambda with the argument
06:13 - driver driver dot find element by name
06:15 - self dot locator now self dot locator
06:18 - will be equal to the name that we want
06:21 - to use to locate the element now we
06:23 - haven't defined one yet but what we
06:25 - could do is say locator write equals
06:30 - locator if I get smells correctly
06:32 - spelling is off today if we do locator
06:34 - equals Q or something then what this
06:36 - will do is so we're gonna find the
06:38 - element with the name
06:39 - q and then we're gonna say a driver dot
06:42 - find element by name self dot locator so
06:44 - again that same locator dot clear so
06:46 - clear that input field so that it's
06:49 - empty and that we can now type into it
06:50 - and we'll send whatever value is passed
06:52 - here to that now I know this is
06:54 - confusing you have to promise me that
06:56 - I'm gonna explain this but it's you we
06:59 - have to do it kind of part by part so
07:00 - that's the first one now the next one's
07:02 - gonna be get so let's say we want to get
07:04 - the value of an object right well what
07:07 - we had to do before if I go back to
07:08 - tutorial one was we had to do that wait
07:10 - we had to the implicitly wait so what
07:12 - this element page is saying for us is
07:14 - don't worry about waiting anymore we'll
07:17 - set up this base object that will
07:19 - anytime we try to access or change of
07:22 - value automatically implement this
07:24 - functionality so this will kind of be
07:26 - hidden behind the scenes but what it
07:28 - will do is make it so that any new
07:29 - element we want to access we no longer
07:31 - have to wait for that element we can
07:33 - just use this base class to implement
07:35 - that functionality so that's the idea
07:37 - but here we're gonna say object owner
07:40 - like that and then we're gonna say
07:42 - driver equals object driver web driver
07:45 - wait this is pretty much the exact same
07:47 - thing for the first two lines so I'm
07:50 - gonna copy that and then what it has
07:54 - here is element equals driver defined
07:59 - element by name self dot locator and
08:03 - then return element dot get underscore
08:09 - attribute value okay so now what this is
08:15 - saying is all right so if we want to
08:16 - access the value of an attribute what
08:19 - we're gonna do is or not an attribute of
08:21 - an element my bad is we're gonna say the
08:24 - web driver is a Google web driver let's
08:25 - wait for that element to exist on the
08:28 - page and then let's say that elements is
08:30 - equal to the driver to find element by
08:32 - name locator right and then element get
08:35 - attribute value now there's other ways
08:37 - to do this but what this is saying is
08:38 - you know get the attribute from this
08:40 - HTML field of value and return that so
08:43 - hopefully this makes sense this is
08:44 - setting the value this is getting the
08:46 - value and these will be used for every
08:49 - object from now on so that we don't need
08:51 - to implement this
08:52 - every time we've just written this once
08:53 - and now if we go to page pi we can
08:57 - simply import this so we can say from
08:59 - element imports base page element like
09:04 - that so now let's say there's an element
09:07 - on the page we want to access well what
09:09 - I can do is make it class I gets a class
09:11 - and I'm just going to use the example
09:13 - that they have here which is search text
09:18 - elements like that this one Herot from
09:21 - base page element like that and then
09:23 - we'll simply define the locator that we
09:25 - want to use to locate this so now all I
09:28 - have to do is for each element that I
09:30 - want to locate on the page and be able
09:31 - to manipulate define some class that
09:34 - names the element whatever I want and
09:35 - set a locator so let's say we want to
09:37 - locate the Go button right well assuming
09:40 - that go button had the name I mean this
09:42 - is a bad way to do it just cuz we've
09:43 - already done that but we gets a locator
09:45 - equals you know go like imagine that was
09:47 - the go button name and then here our
09:50 - class would be go fun element and now if
09:55 - we want to access the value if we want
09:56 - to change the value I mean it doesn't
09:57 - work for that obviously because it's a
09:59 - button but if it was like a field or
10:01 - something we wouldn't have to implement
10:03 - any of this functionality because it's
10:04 - already here and we've just inherited
10:06 - from the base page element so again this
10:09 - is I know it's a lot this is this is
10:10 - difficult coding especially from
10:12 - selenium I wouldn't I was not expecting
10:14 - them to make it this complicated but I'm
10:17 - trying my best to explain this as clear
10:19 - as possible so a search text element was
10:21 - just equal to that search box because
10:23 - now we found the locator Q and if I go
10:26 - back to Python here and we hit inspect
10:30 - on the search box
10:31 - notice that the ID name is Q right so
10:34 - name is Q so what it's saying is let's
10:36 - find the element Q and then since we
10:39 - have element defined here we can set it
10:41 - and send keys to it by calling the SAP
10:43 - method and calling the gap method now
10:45 - those are underscored for a reason we'll
10:47 - talk about that in a second but let's go
10:49 - to main page here and let's define
10:51 - something as a attribute so we're gonna
10:53 - say search underscore text underscore
10:57 - element is equal to search text element
11:02 - okay so I've defined this here now
11:05 - what this is actually is doing is
11:06 - creating what's called a descriptor now
11:08 - the idea behind this is you want to hide
11:10 - the functionality of a specific
11:12 - attribute so you do something like what
11:14 - we've done here now this is obviously a
11:16 - complex example but the idea being that
11:18 - every time we access this variable
11:20 - search text element we decide to change
11:23 - it or we decide to get the value from it
11:25 - what it's gonna do is use this set and
11:27 - use this get so if I had you know search
11:31 - I don't want to type all this out search
11:33 - text elements like that and I set it
11:37 - equal to five so we don't we had define
11:39 - it in the other class but you know say
11:40 - we set equal to five what actually
11:43 - happens behind the scenes is the class
11:45 - that this is defined in which I believe
11:47 - is where is it here so main page is
11:51 - passed to the set as object and five is
11:55 - passed as value so what this does now is
11:57 - says object driver which is equal to
12:00 - this main page which has a driver
12:02 - because that's from the base page
12:03 - missile initialization right and then
12:06 - the value is the argument here which is
12:08 - five so it says okay we'll take the
12:10 - driver but the locator is defined
12:12 - already inside of this object right
12:15 - right here and then what we'll do is
12:17 - send the key value so if I set this five
12:20 - it will send the key five and that's the
12:23 - idea behind this you know if I set it
12:24 - equal to five it will just send the
12:26 - value of five and if I set the keys like
12:29 - hello and actually five sorry would have
12:31 - had to be been in a string but anyways
12:33 - if I set the value hello it will send
12:35 - the value hello and input that into the
12:38 - search field now if I do something like
12:39 - x equals search text element what will
12:43 - happen now is will call the get method
12:45 - and it will say okay the object will be
12:47 - equal to the object before and actually
12:49 - I'm I don't really know what the owner
12:51 - is supposed to be equal to I mean we
12:53 - could print it out if we want I'm pretty
12:54 - sure the owner will be equal to
12:56 - something to do with the classes or
12:58 - maybe actually this variable name here
13:00 - that that's possibly the answer but
13:02 - anyways what it will do is since we have
13:03 - the object it will get the driver it
13:05 - will wait until we find that element
13:07 - then what it will do is return the value
13:10 - of that to X so when we say search text
13:13 - element really what we're saying is call
13:15 - this get method and that's pretty
13:17 - how that works so that's the descriptor
13:20 - this is an advanced Python feature very
13:22 - advanced features don't feel you know
13:24 - bad if you're confused but that's pretty
13:26 - much how that's working and I kind of
13:28 - need to explain that because I feel bad
13:30 - you know just skipping through it and
13:32 - not explaining what really is happening
13:33 - there so that's the idea behind that so
13:36 - I think actually if I'm looking here
13:38 - we've pretty much finished this this uh
13:40 - this first page here for paged up high
13:43 - elements looks good locators looks good
13:46 - so now let's go back to the main page
13:48 - because there's actually something I
13:49 - wanted to add on the main page so we go
13:51 - to main pay main type I let me just make
13:52 - sure all of these are saved here what
13:55 - we'll do now is we're gonna actually
13:56 - make another test key so we'll keep test
13:58 - title like that we're gonna save define
14:00 - I'm going a little bit different than
14:02 - documentation now test underscore search
14:05 - underscore Python or something okay so
14:09 - now we're gonna say itself like that :
14:11 - and now what we're actually gonna do um
14:14 - hmm this might be a little bit confusing
14:16 - is say okay I'm actually gonna move this
14:21 - around a bit so let's get rid of this
14:23 - just cuz I've seen the way they've done
14:25 - this in it makes sense so let's go
14:27 - define test search Python will say mean
14:30 - main page equals page Don main page so
14:33 - remember that's accessing this class
14:35 - right here which inherits from this so
14:37 - let's go back here and we're going to
14:39 - assert that main page dot is title match
14:42 - so that will call that method for main
14:44 - page which says is Python in driver
14:46 - title alright sweet now we're gonna put
14:48 - a comp
14:48 - now what comma stands for is do these
14:51 - operations afterwards essentially is
14:54 - what it's saying and then we can assert
14:55 - something afterwards so we'll assert
14:57 - this and assuming that's true do this so
15:00 - now we're going to say main page dot
15:02 - search text element which is equal to
15:05 - what we defined here which is that
15:07 - descriptor which implements the Get Set
15:08 - functionality it's equal to that so
15:11 - sorry dot that is equal to hi o'clock so
15:15 - when we pass PyCon again is gonna go
15:17 - through and call set with value equal
15:19 - PyCon and set that attribute so main
15:21 - page dot search text element equals
15:23 - PyCon and then we'll say main page like
15:26 - that dot click go button okay nice now
15:30 - we'll say search result
15:31 - so search result page search underscore
15:34 - results on your score page
15:39 - I really am having trouble typing today
15:41 - it's gonna be equal to page dot search
15:44 - page result or search result page
15:47 - self-direct okay so this make sense of
15:49 - self driver and then what we're gonna do
15:52 - after here and these sorry should all do
15:55 - they only commas after them actually I
15:57 - don't believe they do no we're gonna say
16:00 - assert search result page dot is result
16:07 - about okay so let's let's digest this
16:09 - now so what's happening is we're gonna
16:11 - load the main page we're gonna say
16:13 - assert main page is title matches now I
16:16 - feel like this column might be an error
16:17 - because I don't think the comma should
16:19 - be there although I might be a little
16:21 - bit confused but anyways the commas
16:22 - going there and then what we're gonna
16:24 - say after we check if this is true or
16:26 - not is main page search text element
16:29 - equals Pikul so search sex element is
16:31 - equal to element we talked about that
16:32 - then we're gonna click the Go button to
16:34 - search for that and then we're gonna say
16:36 - this search result page is equal to page
16:38 - dot search result page self dot driver
16:41 - okay so we initialize a new search
16:44 - result page which is equal to if we go
16:46 - to the page drop I this right which now
16:50 - influenced this method returned no
16:52 - results found in not in self driver top
16:54 - page source awesome so we go back here
16:57 - then that will just tell us essentially
16:59 - if we found any results by searching for
17:01 - the value hike on that is how this works
17:04 - and that is pretty much the test
17:06 - framework so let's run this and we got a
17:09 - value we got an issue I think it is the
17:11 - comma actually yeah so I don't know why
17:12 - they had a comma there in the
17:13 - documentation I was confused by that as
17:15 - well but anyways let's get rid of the
17:16 - comma and let's run this so setup boom
17:20 - runs here failed errors equals one so
17:22 - let's see what the error is here
17:24 - missing one required potential argument
17:26 - positional argument driver's so sorry
17:28 - that's my bad guys we need to add self
17:29 - driver into here so page equals main duh
17:32 - page self driver so we'll add that and
17:35 - run this here so setup give it a second
17:38 - see if I made any other syntax errors
17:39 - notice it searched PyCon ran and then it
17:43 - said the test
17:44 - okay so that is how that works now I
17:47 - mean we don't need to close if we want
17:48 - to see the results but this is how you
17:50 - set up the unit test frame again
17:52 - confusing I agree but hopefully this
17:55 - video helped you somewhat understand how
17:58 - this works now of course you don't need
18:00 - to set up your test as robust as this
18:02 - but this is very good practice and
18:04 - notice how easy it is for me to really
18:07 - go and find anything that I need let's
18:10 - say the name changes for that search
18:11 - text element all I need to do is change
18:13 - the locator here boom script works
18:15 - totally fine let's say that we want to
18:17 - add some other method or some new thing
18:20 - to test okay I want to test a separate
18:22 - functionality well what I can do is I
18:24 - can you know add another search
18:25 - statement in here if I want or I can
18:27 - just make a new method and go ahead and
18:29 - test that okay we move from this the
18:32 - main page to the search page let's make
18:34 - a new search page object there we go
18:36 - that's all we need to do I want to
18:38 - change the value of a field boom that's
18:40 - all I need to do search text element I
18:42 - don't need to do that wait find set send
18:45 - keys I can just access it directly
18:47 - because of that implementation that we
18:49 - did locator changes no problem I can go
18:52 - ahead and change it in here so that is
18:54 - pretty much how you do the unit test
18:56 - framework for selenium again I'm sure I
18:58 - probably lost most of you by now because
19:00 - this is get very complex syntax but
19:03 - hopefully this helps you understand how
19:05 - this works so with that being said I'm
19:06 - gonna leave the video at that I hope you
19:08 - guys enjoyed if you did make sure you
19:09 - leave a like subscribe to the channel
19:11 - and I will see you guys in another
19:12 - Python video