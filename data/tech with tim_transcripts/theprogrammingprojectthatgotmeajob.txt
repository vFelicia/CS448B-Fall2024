00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video
00:11 - so in this video what i'm going to do is
00:13 - show you the programming project they
00:15 - got me a job offer
00:16 - from shopify so i just want to give you
00:18 - some context before i dive into this
00:20 - project but i will show you of course
00:22 - the finished product and then kind of
00:23 - walk through some of the code
00:25 - and show you how i built it anyways this
00:27 - was back in february of 2020 after i had
00:30 - just received my first two interviews
00:32 - for my first
00:33 - software engineering internship so i was
00:35 - looking for an internship
00:36 - i was 19 at the time i had no prior
00:39 - experience working
00:40 - you know for a company or doing any real
00:42 - software engineering work
00:44 - other than what i had done on youtube
00:46 - and well i received interviews at
00:47 - microsoft and
00:48 - shopify so i was actually on my way back
00:50 - from my microsoft interviews which were
00:52 - in seattle
00:53 - when i got an email from shopify saying
00:55 - that i had received an interviewer we
00:57 - had the interview set up for a specific
00:59 - day
00:59 - so the first interview was an online
01:01 - interview it's what they called a life
01:02 - story
01:03 - interview and i really just had an
01:05 - hour-long conversation with the
01:06 - recruiter essentially and then they
01:08 - called me in for on-site interviews
01:10 - and they said during your on-site
01:11 - interview you're going to need to
01:12 - present
01:13 - some type of personal coding project
01:15 - that you've worked on
01:16 - it should be related to back-end
01:17 - development because the position i was
01:19 - applying for was a back-end
01:21 - developer intern you're going to have to
01:22 - walk through the code talk about how it
01:24 - works
01:25 - you know you should be an expert on this
01:26 - project that's what they said they said
01:28 - that there would also be some kind of
01:29 - design
01:30 - problem or coding question at the
01:31 - interview which there was so anyways i
01:34 - had maybe about a week to work on some
01:35 - personal project or
01:37 - clean something up that i had already
01:38 - finished so i decided i would write
01:40 - something from scratch which is this
01:41 - project
01:42 - right here now i actually worked on this
01:44 - project during a live stream on youtube
01:46 - i'll leave a link to that in the
01:47 - description
01:48 - also if you want the code for this
01:50 - project there will be a github
01:51 - repository down below
01:52 - anyways that's kind of the context here
01:54 - but when i got to the interview i had to
01:56 - go through this project literally walk
01:58 - through almost every single line of code
02:00 - discussed why i decided to do certain
02:02 - things kind of the architecture and
02:05 - design of what i did here
02:06 - and then talking about the database
02:08 - integration and a ton other stuff like
02:10 - that so really back end heavy
02:12 - anyways keep that in mind the position i
02:13 - got was a back-end developer intern
02:15 - position
02:16 - and it was mostly because of this
02:18 - project right here i also did have to
02:20 - answer a short design question
02:22 - uh but you know there were two parts the
02:24 - interview one was the project
02:25 - one was the design question i passed
02:27 - both and if i had had a poor project
02:29 - i wouldn't have gotten the job so
02:30 - anyways i apologize for the long
02:31 - introduction
02:32 - but let's dive into the video after a
02:34 - quick word from our sponsor before we
02:36 - get started i need to thank new lab for
02:38 - sponsoring this video and talk to you
02:39 - about their awesome project and code
02:41 - management software
02:42 - which is called backlog backlog is an
02:45 - online platform that provides your team
02:47 - with everything they need to release
02:48 - great projects backlog's simple yet
02:51 - powerful interface can be quickly
02:52 - adopted by anyone
02:54 - and you can use it to work with
02:55 - developers clients designers and other
02:57 - team members
02:58 - all in one platform use backlog to
03:01 - visualize
03:01 - keep track and prioritize work using
03:04 - kanban style boards
03:05 - gantt charts and burn down charts you
03:07 - can also see which tasks have been
03:09 - completed
03:09 - are currently in progress or need to be
03:11 - adjusted across your entire
03:13 - project lastly you can create comment
03:15 - and update tasks
03:16 - on the go using backlogs ios and android
03:19 - native apps which are free and
03:21 - automatically sync with your online
03:22 - workspace
03:23 - backlog's rich feature set including
03:25 - things like built-in git
03:26 - and svn support for code management make
03:29 - it a superior alternative to something
03:31 - like asana
03:32 - which is not nearly as flexible or agile
03:34 - for developers
03:35 - backlog is trusted by over 10 000
03:37 - companies and will definitely increase
03:39 - your team's efficiency and organization
03:41 - each backlog project also has a
03:43 - collaborative wiki that all of your team
03:45 - members can edit
03:46 - access and organize to keep track of
03:48 - important documentation or
03:49 - resources get started with backlog today
03:52 - by hitting the link
03:53 - in the description alright so i've got
03:54 - the app running now the web server is
03:56 - running on my computer now this app is
03:58 - also running on my ipad
04:00 - and my iphone this is simply a web
04:03 - application so i'm just
04:04 - going to a specific url to access this
04:06 - page
04:07 - but i just want to talk to you about
04:08 - what this is and then of course i'll
04:10 - kind of demo everything
04:11 - so this is simply a local area network
04:14 - chat room or
04:15 - chat application so you don't need a
04:16 - password you don't need an account or
04:18 - anything like that
04:18 - if you're on the same network as someone
04:20 - you can go to whatever url the server is
04:22 - running on
04:23 - and then you can just start globally
04:24 - chatting with anyone else on the network
04:26 - that's
04:26 - also you know using this application so
04:29 - that's pretty much all i need to explain
04:31 - but that's kind of what this is this
04:33 - uses socket io this uses flask
04:35 - it uses some front-end javascript and
04:38 - something else i think that's about it
04:40 - anyways i'm just gonna kind of sign in
04:42 - here as tim to sign in all you do is you
04:44 - just pick some name for yourself
04:46 - you don't need um what do you call like
04:47 - a password or an account or anything you
04:49 - just
04:49 - pick a name and that's what represents
04:51 - you in the room so anyways i've signed
04:53 - in as tim you can see i was just messing
04:54 - with this before the video to make sure
04:55 - everything was working
04:56 - and now i'm kind of in this chat room
04:58 - and i can start typing i can say
05:00 - something
05:00 - like you know hello sure hello my name
05:02 - is test and send that and then notice
05:04 - that sends in here
05:05 - now what i'm going to do is i'm going to
05:06 - sign into this chat room on my ipad
05:09 - and on my phone over here i'll kind of
05:11 - throw it up on the screen because i'm
05:12 - recording on these devices
05:13 - and then you'll see how this works so
05:15 - i'm going to sign in as ipad from my
05:17 - ipad
05:18 - now i'm in the chat room i'm going to
05:20 - say hi and notice that now ipad
05:22 - says hi comes in now let's just sign in
05:25 - from my phone i'll just put this as
05:27 - iphone and inside here let me say
05:30 - something
05:31 - i'm just going to say what's up now when
05:34 - i say what's up you can see it
05:35 - automatically scrolls to the bottom and
05:37 - you can see the iphone
05:38 - is typing what's up and then obviously
05:40 - on all devices they're getting the same
05:41 - messages so this is just kind of a
05:43 - demonstration of
05:44 - sockets and how you in live time update
05:47 - like a chat room so that's literally all
05:49 - this
05:49 - application is not very complicated
05:51 - whatsoever again i i
05:53 - built this out a few days before the
05:54 - interview because i built it from
05:56 - scratch
05:56 - and if i go to history you can see all
05:58 - of the message history for the person
06:00 - that's signed in
06:00 - so i'll do that on my ipad as well and
06:03 - on my phone
06:04 - and that's literally all there is to the
06:06 - app and then you can log out so i log
06:08 - out i can sign back in as say
06:10 - joe and now i can go in the chat room i
06:12 - can see all of the message history and
06:14 - notice that
06:14 - since tim's not my user it's in a
06:16 - different color now i can say
06:18 - what's going on and i can also send that
06:22 - by pressing the enter key so really
06:23 - not complicated nothing crazy this is
06:26 - the app
06:27 - that i created now i'll jump into the
06:29 - code kind of walk you through it a bit
06:31 - and talk to you about what the devs
06:32 - liked about this project and what they
06:34 - didn't like so maybe you know if you're
06:36 - going to be interviewing at shopify or
06:37 - any other company and you need to kind
06:39 - of show off or demonstrate a project
06:41 - all right so i'm in vs code now what i'm
06:43 - going to start by doing is walking you
06:44 - through kind of the project directory
06:46 - how i organized some files and all of
06:48 - that just just showing you the basics of
06:50 - how this app actually works
06:52 - and why this actually ended up getting
06:53 - me a job now i want to just preface this
06:55 - by saying that i'm not at all trying to
06:57 - say that this is the best practice that
06:59 - what i did here is perfect
07:00 - and that you know you have to make
07:02 - something like this the point of this
07:03 - video is to show you that you don't need
07:05 - to build something that's extremely
07:07 - complicated or massive to be able to get
07:10 - a job or to demonstrate your knowledge
07:11 - in fact
07:12 - the amount of time i put into this
07:13 - project in total was probably about six
07:15 - or seven hours
07:16 - and a lot of the stuff i did here i
07:18 - didn't know how to do until i started
07:19 - working on this project
07:21 - what i wanted to do was bring a project
07:22 - that i knew really well that was
07:24 - relatively simple that was going to be
07:25 - easy to explain
07:27 - and that just showed that i know kind of
07:28 - some solid programming principles i
07:30 - could write clean code
07:32 - i knew how to organize files and
07:34 - directories and that you know i knew how
07:36 - to program that was
07:37 - really what i was trying to demonstrate
07:38 - to the devs and again i had two
07:40 - developers that were kind of singing
07:41 - over my shoulder
07:42 - by laptop in front of me and that's how
07:44 - i was demonstrating this project to them
07:46 - as i was walking through the code
07:47 - anyways let's go through the directory
07:49 - structure so first of all i have this
07:50 - folder called old message server
07:52 - before i implemented this using socket
07:54 - io and flask
07:56 - i had originally coded my own message
07:58 - server using just sockets
07:59 - i just included this in case it was
08:01 - something i could talk about with the
08:02 - devs i'm not going to talk about this
08:04 - here
08:04 - but in case you're looking at the github
08:06 - repository and you see this that's what
08:08 - that is
08:08 - anyways let's go into the website folder
08:10 - so of course i have my readme i have my
08:12 - git ignore i have my requirements.txt
08:15 - and then i have this so i have my
08:17 - application folder i have a
08:18 - env folder or env file sorry that stores
08:21 - all my environment variables
08:23 - i have a config file and then my main.pi
08:25 - file which is the main entry point for
08:27 - the web server or the main entry script
08:30 - then inside of the application folder i
08:32 - have most of the actual code for the
08:33 - website
08:34 - i have a static folder for my javascript
08:36 - i have a templates folder for all my
08:38 - html
08:39 - and then i have a database file filters
08:41 - up hi and views.pi i'm going to go
08:43 - through all the files so we'll get to
08:44 - them in a second
08:44 - but let's start with the the website
08:47 - directory here
08:48 - so of course this is where the website
08:49 - all the code for the website actually is
08:51 - and we'll start in main.pi so inside of
08:53 - main.pi i just have my all my imports
08:55 - for flask
08:56 - i set up the app and i set up socket io
08:58 - and notice as i go through this project
09:00 - that i documented everything i really
09:02 - wanted to show that i knew how to write
09:04 - clean code
09:05 - i followed pretty well all of the
09:07 - programming standards you would when
09:08 - writing clean code although i'm sure
09:10 - some of you guys will point out things
09:11 - that i didn't do correctly
09:12 - and yeah that was kind of one of the
09:14 - main things i really focused on when i
09:15 - was writing this out
09:16 - so as i have a bunch of comments say
09:18 - communication functions and the first
09:19 - thing i define in here
09:20 - is just my socket.io on event function
09:23 - so what this event does
09:25 - is it will simply take the message that
09:26 - is sent and we'll save it to the
09:28 - database that's literally
09:29 - the only thing that needed to be handled
09:32 - on the backend for socket io
09:34 - so then this also runs the web server
09:36 - here and
09:37 - i use the value from my config file to
09:40 - run this so that's main.pi
09:41 - really straightforward let's go into
09:43 - config.pi inside of config.pi what i do
09:46 - is i load a bunch of environment
09:47 - variables that are specific to this
09:49 - development environment
09:50 - so for example are we testing are we in
09:52 - debug mode what's the secret key
09:54 - uh for our session what is the server or
09:57 - server ip address sorry that we're going
09:58 - to run this on i load that from my
10:00 - env file which is right here and stores
10:03 - the environment variables
10:04 - so there you go that's the basics for
10:06 - these three files right here
10:07 - and the reason they liked this they
10:09 - specifically said this was very nicely
10:11 - set up it's really easy to change things
10:13 - easy to see where things are stored and
10:15 - i wanted to show off the fact again that
10:16 - i knew how to use environment
10:18 - variables which of course is an
10:19 - important programming thing so now let's
10:21 - get into application so inside of
10:23 - application
10:24 - i will kind of walk through the front
10:25 - end first and then i will go to the back
10:27 - end
10:27 - so in the front end i used flask if
10:30 - you're not familiar with flask this is
10:31 - going to seem
10:32 - maybe a little bit complicated but when
10:34 - you write a html template in flask you
10:38 - use something called the
10:39 - jenga templating engine it's like
10:41 - j-i-n-g-a
10:42 - but you can write standard html which is
10:44 - what i did i had all my custom css
10:47 - classes here
10:48 - just to make things kind of nice i'm not
10:49 - going to go through those i had jquery
10:51 - imported that's what i used i had
10:54 - a few other things as well i bootstrap
10:56 - that i used and then you can see there's
10:57 - these blocks here so whenever you see a
10:59 - block
11:00 - this means that i'm able to actually
11:02 - pass a value that will be placed inside
11:04 - of this block
11:06 - in code or in in the templating language
11:09 - and you'll see that in a second
11:10 - but anyways i had my nav bar i had this
11:12 - block to show all those flashed messages
11:14 - so when you saw things like logged out
11:16 - or
11:17 - you were successfully logged in as
11:18 - whatever the user is that's what's
11:20 - handling this um
11:21 - this right here all right so now we'll
11:22 - go to history.html so it's worth noting
11:24 - that this base.html file
11:27 - is the base template for the entire
11:29 - website so
11:30 - all of these other templates you see
11:32 - will kind of place themselves
11:34 - inside of this content block right here
11:36 - so they'll all
11:37 - use this as the main base template for
11:40 - themselves and they have some specific
11:41 - html
11:42 - that's going to be inserted in here so
11:44 - if i go to history.html
11:45 - you can see this extends base.html which
11:48 - means we're using that as the base
11:49 - template
11:50 - and then inside of the content block i
11:52 - have what i actually wanted to display
11:54 - for the history page right so this is
11:57 - showing all of the messages in history
11:58 - and you can see it for message in
11:59 - history
12:00 - we're going to take all this information
12:02 - and then just display it nicely
12:04 - in html so that's just this is the jenga
12:06 - templating engine
12:07 - then we have index.html so this is
12:09 - obviously the main page or the home page
12:11 - you can see i had to set up my own
12:13 - message flashing here
12:14 - then i have some style tags block
12:16 - content and the form to actually submit
12:19 - your username and to sign it
12:20 - then we have login.html again login page
12:24 - right there
12:25 - and i won't go through much more than
12:27 - that you get the basic idea
12:29 - all right so we have our four templates
12:31 - we then have static so inside of here i
12:33 - have a bunch of javascript
12:35 - now essentially what i need to do was
12:37 - fetch new messages whenever an event
12:39 - occurred so whenever someone sent a
12:41 - message
12:41 - there would be a socket event that was
12:43 - emitted and then we would have to keep
12:45 - track of that on the front end
12:46 - or i guess handle that event actually
12:49 - occurring and then display a new message
12:50 - on the server
12:51 - so i first had this async function to
12:53 - add messages
12:54 - keep in mind i was not applying for like
12:56 - a javascript role or anything or
12:58 - anything related to front-end so they
12:59 - didn't really care about
13:01 - what i did with the javascript although
13:02 - i did kind of explain it to them
13:04 - so i won't go through this but this is
13:05 - just generating the new messages
13:07 - whenever they come in so whenever an
13:08 - event occurs
13:09 - and then i had some fancy thing that
13:11 - would automatically scroll to the bottom
13:13 - of the div that all the messages were in
13:15 - whenever a new one was added that
13:17 - extended the height then i had another
13:19 - thing for load name so this
13:20 - loads the user's name themselves so you
13:22 - can actually display it on the page
13:24 - i had something to load all of the
13:26 - messages so the first time you hop into
13:28 - that message
13:28 - chat uh yeah i guess message chat what
13:31 - would you call it global chat
13:33 - you need to load all the messages this
13:35 - was the thing that would automatically
13:36 - change the height of the screen so
13:37 - that's proper i had my thing to scroll
13:39 - to the bottom
13:40 - i had some function that would take the
13:42 - date um
13:43 - and it gave me like a certain format for
13:46 - the date for my messages that's
13:47 - essentially what this did so i had the
13:49 - current day
13:50 - then the hours and then the minutes i
13:51 - didn't want the seconds
13:53 - then this was kind of the main logic
13:55 - here to handle all of these socket
13:57 - events
13:58 - so essentially when someone connected
13:59 - what do we need to do well we emitted an
14:01 - event saying this user connected to the
14:03 - server
14:04 - then i had something for the message
14:06 - form so when we submitted
14:08 - a new message we needed to do something
14:10 - which involved emitting a socket event
14:12 - with the message and the name of the
14:13 - user
14:14 - and then that was handled by the backend
14:15 - which i'll show you in a second we also
14:17 - had an event for
14:18 - when someone disconnected and when a
14:20 - response was added
14:21 - we would add a new message anyways i i
14:24 - know i'm just like really quickly going
14:25 - through this but i just want to show you
14:26 - kind of what i did
14:27 - all right so now that was the front end
14:29 - or the index.js
14:31 - now what i'm going to do is i'm going to
14:32 - show you the views.pi file this is not
14:35 - very large but in flask it's super easy
14:37 - to set up
14:37 - backend api endpoints so i have my login
14:40 - endpoint you can read through it
14:41 - yourself
14:42 - i'd log out i had my home page this
14:45 - would render the template
14:47 - i had my history page i had my get
14:50 - name api endpoint here to actually get
14:53 - the name of the user
14:54 - i had my get messages api endpoint i had
14:56 - get history same thing
14:58 - remove seconds from message just a
15:00 - utility function right here
15:01 - and notice i commented out with
15:03 - utilities so pretty organized
15:05 - pretty easy to see what everything does
15:07 - not too much code going on
15:08 - and a lot of the stuff that these
15:10 - endpoints were doing here was
15:12 - they were modifying things in the
15:13 - database so you'll see things like
15:16 - get history like this function right
15:17 - here right you'll see things like
15:19 - um well let's hear db.getallmessages
15:22 - remove seconds or messages so a bunch of
15:24 - utility functions everything was
15:26 - pretty nicely organized and really easy
15:27 - to find all right so now i'm going to go
15:29 - over to database.pi
15:31 - now this was the file that i used
15:33 - specifically to handle all the database
15:35 - operations so i used an sqlite3 database
15:38 - that's stored in the messages.db file
15:40 - right here and
15:42 - well this file was kind of like an
15:44 - interface almost for my database just to
15:46 - make it really easy to get all the
15:47 - information that i wanted so i had my
15:49 - init
15:50 - this would try to create the database if
15:51 - it didn't already exist and create a sql
15:54 - cursor i then obviously had to close the
15:56 - cursor i had my create
15:58 - table function or method get all
16:00 - messages
16:01 - this actually went through used a little
16:02 - bit of sql so you can see sql right here
16:05 - and it was funny because when i was
16:07 - showing them this function they were
16:08 - like
16:08 - hey why did you use python to sort all
16:11 - of the results like couldn't you i've
16:12 - done that in sql and i just was honest
16:14 - with them and i said
16:15 - yeah i probably could have done that in
16:16 - sql but i didn't know the query to write
16:18 - so i just decided to use python
16:20 - because well i knew how to sort in
16:22 - python so
16:24 - anyways i have get messages by name and
16:26 - then save messages so just a really easy
16:28 - to use interface
16:29 - that i could use to handle all of the
16:30 - database related operations
16:32 - and what was stored in the database was
16:33 - literally just all of the users
16:35 - and all of their messages so every time
16:36 - you went back into that global chat you
16:39 - would be able to see the history of all
16:40 - the messages
16:41 - and then for each individual user you
16:42 - could check all of their specific
16:44 - message history
16:45 - now that was literally it i also had
16:47 - this file uh for filters this was i'm
16:50 - not really going to talk about this
16:50 - because it's very specific
16:52 - to flask and jenga but it was just to
16:55 - actually split
16:56 - a string in the templating language for
16:59 - jenga i had to write something custom
17:01 - like that
17:01 - but yeah that was pretty much it i had
17:03 - in a nit.pi file that also did a little
17:05 - bit here
17:06 - so i created this application folder as
17:08 - a python package and then this was
17:10 - actually what initialized
17:12 - and returned to me uh the app that i
17:14 - then ran
17:15 - so again just you know there's a lot to
17:17 - go through i could walk through this
17:18 - project for hours if i wanted to but
17:20 - that is the project that i built and
17:22 - this is what got me a job at shopify
17:24 - so the point of this video really was
17:25 - just to kind of demonstrate that you
17:27 - don't need to make anything super crazy
17:28 - i just made something that showed off
17:30 - that i understood how to work on the
17:31 - back end
17:32 - that i could write clean code that i
17:34 - understood how to hook up a front end
17:35 - with a back end
17:36 - i understood how to use a database it
17:38 - was a lot of things that weren't
17:39 - super complicated or super fancy but i
17:41 - just did a bunch of kind of small things
17:43 - that tied really nicely together
17:45 - i made my code really organized and easy
17:47 - to find everything
17:48 - and the devs were definitely very
17:50 - impressed as they voiced to me and i
17:51 - guess
17:52 - in the offer letter that they sent to me
17:54 - later so anyways that was kind of all i
17:55 - had for this video i hope this was
17:57 - somewhat helpful to you
17:59 - again there will be a link in the
18:00 - description to the github repository
18:02 - where you can you know mess around with
18:03 - this for yourself
18:04 - or look at the code if you care to do
18:06 - that so anyways if you guys enjoyed make
18:07 - sure to leave a like
18:08 - subscribe to the channel and i will see
18:09 - you in another youtube video
18:13 - [Music]
18:19 - you