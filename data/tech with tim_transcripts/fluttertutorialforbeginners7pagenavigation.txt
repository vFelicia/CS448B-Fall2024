00:02 - [Music]
00:07 - hello everybody and welcome back to the
00:09 - flutter tutorial
00:10 - so in today's video what we're going to
00:12 - be doing is actually dealing with page
00:14 - navigation
00:14 - and we're going to be continuing to
00:16 - build this app that we've been working
00:17 - on since the beginning of this series
00:19 - so what we're actually going to be doing
00:20 - is making a home page which will kind of
00:22 - let us type in our username
00:24 - we're not going to do any passwords or
00:25 - validation or anything like that at
00:27 - least for right now
00:28 - but we'll let the user type in some name
00:30 - and then that will be the name that
00:31 - they're given when they actually create
00:33 - a post
00:33 - because if you notice right now whenever
00:35 - we make a post we're just simply putting
00:37 - tim
00:37 - as the name but obviously if someone
00:39 - else is coming onto the phone or someone
00:41 - else is using the app their name is
00:42 - probably not tim
00:43 - so what i'm going to try to do here is
00:45 - make a page where we can get the user's
00:46 - name
00:47 - and then i want to pass that over to the
00:49 - home page that we already have created
00:50 - here
00:51 - so that when they actually make a post
00:52 - the author of that post is whatever name
00:54 - they typed in
00:55 - so that's what we're going to be working
00:56 - on here but the first thing i want to do
00:58 - is actually show us how we can clean
01:00 - this code up just a little bit
01:02 - so looking through this code here we can
01:04 - see it's starting to get a little bit
01:05 - messy and there's quite a few different
01:06 - things in this file
01:07 - and they're not all really related to
01:09 - each other in any way
01:10 - so what i want to do is i want to make a
01:12 - bunch of different files that store
01:14 - all of these different classes just so
01:16 - that as this app continues to get larger
01:18 - and larger it's a lot easier
01:19 - for us to figure out where things are
01:21 - and keep things kind of separated
01:23 - into what they actually are doing so to
01:25 - do this all we're going to do is just
01:26 - make a new file inside of this lib
01:28 - folder so you can see on the left hand
01:29 - side of my screen here i'll zoom in just
01:31 - a tiny bit
01:32 - hopefully that'll be a little bit better
01:33 - for you guys but now let's go to lib
01:36 - let's create new file and what i'm going
01:37 - to do is i'm going to name all of these
01:39 - files
01:40 - whatever the classes that i'm going to
01:41 - store in them dot dart
01:43 - so in this case i'm going to make one
01:44 - called post so i'm going to say
01:46 - post.dart like that
01:48 - and now i'm just going to simply take
01:49 - this post class like this
01:51 - and i'm going to delete it from here and
01:53 - put it inside of this file
01:55 - there we go that's as easy as it is now
01:58 - we're going to have to handle some
01:59 - import statements and all of that
02:00 - but that's what we're going to be doing
02:02 - is just separating a few a few things
02:03 - out and then we'll go in and import
02:05 - everything that we need
02:06 - okay so next uh my app so i will leave
02:09 - my app and this void function in this
02:11 - main file right here which is the one
02:13 - that runs
02:14 - but i'm gonna take everything else out
02:15 - and separate it where it needs to go
02:17 - so first let's take my home page so this
02:19 - is a stateful widget
02:20 - so i'm going to grab my home page like
02:23 - this i'm going to copy all of that
02:25 - let's make a new file let's call it my
02:28 - home page dot dart and let's put it in
02:32 - here
02:33 - awesome now ignore all of the squigglies
02:35 - we'll fix those after
02:36 - so let's delete that from inside of here
02:39 - now we're going to take our text input
02:41 - widget
02:42 - now i just realized and someone had
02:43 - actually commented this so thanks to
02:45 - whoever did that
02:45 - we have a spelling mistake in this i'm
02:47 - sure you guys probably saw that but i
02:48 - just realized
02:49 - so i can simply add a d there to make
02:51 - that actually widget instead of
02:53 - widget or whatever it is right now but
02:55 - i'm just going to simply copy this
02:57 - and i'm going to find all references or
02:59 - actually sorry i'm going to hit ctrl
03:01 - h so ctrl h is find and replace so
03:04 - control h
03:05 - on the keyboard and instead of text
03:07 - input widget with just the g
03:09 - we're going to put the d where it needs
03:11 - to go so now hopefully that should
03:13 - change
03:13 - everywhere so i'm just going to keep
03:15 - hitting hitting enter to change it
03:16 - everywhere that we need to change it
03:18 - and there we go so regardless fix that
03:20 - spelling mistake i'm going to grab this
03:22 - whole text input widget now
03:24 - i'm going to put that inside of its own
03:26 - new file so let's go
03:28 - text input widget like that dot
03:32 - dart okay that's looking
03:36 - good let's go back here we can get rid
03:39 - of text input widget which we did
03:40 - now let's make a post list and i think
03:42 - that should be the last thing yes it
03:44 - should be
03:45 - all right so now one more file
03:48 - new file and let's call this post list
03:51 - dot dart we can put that in here and now
03:54 - let's start handling our import
03:56 - statements
03:56 - so in all of these files i'm going to
03:58 - take this first import statement here
04:00 - which is
04:00 - importing the flutter material.dart
04:03 - which essentially is just what we need
04:05 - to use um that gives us things like
04:07 - material apps stateless widget
04:09 - all of the stuff that we've been using
04:11 - that is kind of proprietary to flutter
04:12 - so we just need to import
04:14 - that in all these different files so
04:15 - we're going to import that one here
04:17 - we're going to import that one in text
04:20 - input widget
04:22 - like that and then in my home page as
04:25 - well
04:26 - now we don't need to put inside of post
04:28 - because post doesn't use any flutter
04:30 - stuff it's just our own class that we
04:31 - created
04:32 - so we don't need to actually import the
04:34 - flutter material package because we
04:36 - don't use that here
04:37 - now inside of my home page which i am
04:39 - right now we can see that we have a post
04:41 - so i need to import the post class so we
04:43 - can use that
04:44 - and then i also need to import text
04:45 - input widget which is now going to have
04:47 - to have a d
04:48 - there instead of just the g as well as
04:51 - post list
04:51 - so let's import all of those so to
04:53 - import those all we have to do is just
04:55 - import the
04:56 - package that stores them so we're going
04:57 - to go import our single quotation marks
05:00 - and then inside of here
05:01 - i'm just going to use the things that i
05:02 - need to import so in this case it's
05:04 - going to be post
05:05 - dot dart like that and let's just copy
05:08 - this and what else do we need to import
05:11 - we need to import post list dot dart
05:15 - and finally i believe we need the text
05:18 - input
05:19 - widget so let's get
05:22 - that one okay so text input widget post
05:24 - list and post
05:26 - so that's good for this file looks like
05:28 - this one has some problems right now so
05:29 - let's import post because we need that
05:32 - so we're gonna say import and it should
05:35 - be post
05:37 - dot dart awesome
05:40 - and anything else in here no that one
05:42 - looks good and then my home page we need
05:44 - to import my home page
05:45 - so let's do that sorry not my home page
05:48 - from the main file
05:50 - let's import oops my
05:54 - home page dot dart
05:58 - okay sweet so now everything is imported
06:00 - and if i've done this successfully let's
06:02 - look at our emulator here and i think
06:03 - everything should still be working
06:06 - yeah it looks like it is so actually
06:07 - when i type some text
06:09 - for some reason the text is not showing
06:12 - up
06:13 - maybe i need to reload this app just to
06:15 - see if that's going to work
06:16 - all right so i was realizing that for
06:18 - some reason my messages
06:20 - weren't popping up when i was typing
06:21 - something in so you can see like i was
06:22 - go
06:23 - like that and just nothing would show up
06:25 - and then i realized that's because i
06:26 - called the widget callback
06:28 - after i cleared the controller field so
06:30 - of course we can't do that
06:31 - what i need to do is i need to call this
06:33 - callback before
06:35 - i actually clear the controller field so
06:37 - that was just a silly mistake on my part
06:38 - so if you guys have that same mistake
06:40 - make sure you fix that that's just
06:41 - inside of
06:42 - text input widget inside of the click
06:45 - callback method or whatever you want to
06:46 - call it
06:47 - i just have this widget right here after
06:49 - the clear so of course
06:50 - we got to swap those around so let's
06:51 - just have a look now and make sure this
06:53 - is working because for some reason i
06:54 - couldn't get that and there we go so now
06:56 - it's working
06:57 - looks like our like buttons are working
06:58 - as well and now we just need to actually
07:00 - make the original kind of login page if
07:02 - you want to call it that so that these
07:04 - authors will be accurate
07:05 - based on what we typed in so what i'm
07:07 - going to do is actually make another
07:09 - file and i'll show you how we can
07:10 - navigate between pages but let's make
07:12 - the page first and then we'll do that
07:14 - so new file and this case i'm just going
07:16 - to call this one login dot dart
07:19 - and then now let's just make a login
07:21 - page so i'm going to steal this
07:23 - import from one of these packages here
07:25 - that we need so package colon flutter
07:27 - slash material.dart
07:29 - and let's now make actually a stateful
07:31 - widget that's going to hold our login
07:33 - page
07:34 - the reason i'm making it stateful is
07:35 - because the user is going to be typing
07:37 - in text there
07:38 - and ideally i would like to save the
07:40 - text that they have typed in there so
07:41 - say they
07:42 - exit the messaging app and come back in
07:44 - or sorry exit
07:45 - the page where they're messaging and go
07:47 - back to the login page it has the last
07:48 - thing they typed in
07:50 - so let's go ahead and do that we're
07:51 - going to type stful
07:54 - that stands for stateful if you press
07:55 - enter it brings this thing up which
07:57 - we've seen
07:58 - and now what i'm going to do is just
07:59 - call this login page
08:01 - like that okay so super simple and then
08:04 - what i'm going to do is inside of login
08:06 - page state
08:06 - i'm going to make a string and i'm just
08:08 - going to call this name
08:10 - so string name like that awesome and
08:13 - that's really all we need
08:15 - now i'm actually going to go over to my
08:17 - home page and we can see that
08:19 - my home page is using a scaffold with an
08:21 - app bar and a body and all of this
08:23 - so what i'm actually going to do is i'm
08:25 - going to steal what we have right here
08:26 - and i'm kind of
08:28 - going to kind of replicate this story
08:30 - over in login
08:31 - so inside our build method i've just
08:33 - copied all this scaffold stuff
08:34 - let's put it over here let's replace
08:36 - container and now we have our own
08:38 - scaffold
08:39 - now we're not going to be using text
08:40 - input widget or even a column at all
08:42 - here for body
08:43 - so let's actually get rid of all of that
08:46 - but we will make our own body in just
08:47 - one second i can get rid of one of those
08:49 - set of brackets okay
08:51 - so now just keep things clean i like to
08:54 - usually do this i'm just going to say
08:55 - actually should we do this yeah let's go
08:59 - class body like that and we'll actually
09:01 - have to make this a stateful widget
09:03 - so let's go stateful widget let's just
09:05 - call this body inside of here
09:07 - and then we can simply go body and we
09:10 - can put body like that
09:12 - now that actually means that i don't
09:13 - think my login page
09:15 - needs to be a stateful widget i think i
09:17 - can just make this a
09:18 - regular widget and then actually the
09:20 - body can be a stateful widget
09:22 - that stores the name so let's do that my
09:24 - apologies on that guys we're going to
09:26 - keep this scaffold so i'll copy that
09:28 - but i'm going to delete everything else
09:30 - i've done here and just make a regular
09:31 - widget so i'm just going to make a
09:33 - stateless widget
09:34 - if you type st it should show up here
09:36 - and you can tab to it and
09:37 - we're just going to call this one login
09:40 - page like that
09:41 - and then we'll return the scaffold with
09:43 - the app bar and the body
09:45 - awesome so that's what we need for login
09:47 - page i think that should be good for now
09:49 - i'm just going to check my other screen
09:51 - to make sure i didn't mess anything up
09:52 - yep so that looks good to me
09:54 - and now let's actually go inside a body
09:56 - and let's add a state
09:58 - not there sorry but inside of here for
10:00 - the name
10:01 - so let's say string name like that
10:05 - awesome now i'm also going to make a
10:07 - text editing controller here we're going
10:09 - to need to put a text field right
10:11 - that the user is going to type into so
10:13 - we're going to say text editing
10:15 - controller which we've seen before
10:16 - i'm just going to call this controller
10:20 - equals new text editing controller like
10:24 - that
10:24 - awesome so now we have our name and we
10:26 - have our controller
10:27 - and now let's actually start kind of
10:28 - building the ui here and putting what we
10:30 - need
10:31 - so what i'm going to do is inside of my
10:32 - build method i'm actually going to start
10:34 - by putting in a line class
10:36 - what this is going to do is allow us to
10:38 - align our widget in the very center of
10:40 - the screen
10:40 - i think we used this previously but it's
10:42 - really easy to use you just go align
10:44 - and then you can pick the alignment so
10:46 - alignment is one of the arguments here
10:48 - and then i'll say alignment dot and you
10:51 - can simply put oops if i spell
10:53 - alignment right you can simply put
10:55 - center so that will put it right in the
10:57 - center
10:57 - of course if you want to put it
10:58 - somewhere else you can put it in you
11:00 - know bottom center bottom left bottom
11:01 - right so on and so forth
11:03 - we're going to keep it in the center
11:04 - like that and what we're going to do is
11:06 - we're going to say
11:06 - child and we're actually going to make
11:08 - the child equal to padding
11:10 - and i'm going to add some padding for
11:11 - whatever widget we decide to put in here
11:14 - and i just want to make sure it's
11:15 - separated off the walls a little bit so
11:17 - it doesn't seem like it's extending the
11:18 - entire screen
11:19 - and give it say like you know 10 pixels
11:21 - of padding or something like that
11:23 - so we're going to say for padding we're
11:24 - going to go padding colon
11:26 - and then i think we can do edge oops
11:30 - edge insets like that and then we're
11:32 - going to do dot
11:33 - all and what this says is what padding
11:35 - do we want on
11:36 - all sides of the widget and in this case
11:39 - i want to put 10 pixels of padding on
11:41 - every side
11:42 - and then we're going to go child for
11:44 - padding i'm going to add a comma
11:46 - oops and i was hoping that was going to
11:48 - tab us down a line but for child
11:50 - now we'll put the text field that we
11:52 - actually want to display
11:54 - so essentially we've done is we're
11:55 - aligning everything right in the center
11:57 - we for the child of this alignment has
11:59 - 10 pixels of padding so we're going to
12:01 - put
12:01 - whatever inside of here will be padded
12:03 - by 10 pixels on all sides
12:05 - and then we're going to put a text field
12:07 - so we've used text field before
12:08 - we're going to say text field like that
12:12 - and if i click save it brings us to a
12:14 - next line i'm going to say
12:16 - controller colon controller because it's
12:19 - going to be equal to the controller we
12:20 - have here
12:21 - we could reference this with this dot
12:23 - controller but it doesn't matter
12:24 - whatever way we want i guess i'll just
12:25 - leave this here
12:26 - to differentiate and then what else do
12:28 - we need for our text field well we need
12:30 - that input decorations we can add
12:32 - um you know a border we can add a nice
12:34 - little label text or something like that
12:36 - so let's go
12:37 - i believe it is decoration
12:40 - that's going to be equal to input
12:41 - decoration
12:43 - if we come on hit enter here let me go
12:45 - to the next line awesome
12:46 - so input decoration which we have right
12:48 - here and then for input decoration
12:50 - there's a ton of different stuff we can
12:51 - put in here
12:52 - like we can put you know a prefix icon a
12:54 - suffix icon the text we have what
12:56 - happens when we press the button
12:58 - all of that and in fact if i go over to
13:00 - text input widget which is one of the
13:02 - files we have right here
13:04 - we can actually see all the stuff for
13:05 - decoration right here so
13:07 - rather than typing all this out again
13:08 - i'm just going to copy what i have here
13:11 - for text input widget so all the stuff
13:13 - related to input decoration
13:15 - you can see prefix icon label text
13:17 - suffix icon
13:18 - icon so on so forth so let's take all
13:21 - that and let's simply replace that
13:23 - here okay so i actually copied the
13:26 - decoration tag too
13:27 - that seems okay um
13:30 - is all good here am i missing a bracket
13:34 - yes i am so let me add one more bracket
13:36 - and there we go now the indentation is
13:37 - correct
13:38 - and now let's just start changing some
13:39 - of these things that actually make sense
13:41 - so rather than type a message i'm going
13:42 - to say
13:43 - type oops type
13:46 - your name like that so that will be
13:50 - what our what do you call label text is
13:53 - for the prefix icon this is the icon
13:56 - that comes before
13:57 - where we're actually typing i'm going to
13:59 - make this a person so i'm going to say
14:00 - icon
14:01 - dot people or is there a one for person
14:04 - awesome there is
14:05 - now the reason i'm making it person is
14:07 - because like you are typing in your name
14:08 - so i figured that makes sense
14:11 - and then for the suffix icon rather than
14:13 - making it a send button
14:15 - let's make it a like finish button or
14:17 - something do we have that or like
14:18 - done yeah done you know check button
14:21 - that's fine for now
14:22 - we can leave it at that uh the color
14:25 - blue is fine
14:26 - and the tool tip do we want post message
14:28 - probably not let's just do
14:32 - for this button i guess let's say
14:36 - submit you know that's good enough
14:38 - that's all we really need
14:39 - the on pressed we have this dot click so
14:41 - that's fine let's actually make a method
14:43 - inside of here which
14:44 - it can be called so we'll call it this
14:46 - dot click and that will just handle what
14:48 - happens when we actually press that
14:49 - button that's within this text field
14:52 - so for anyone confused right now the
14:54 - input decoration
14:55 - is storing the prefix icon is storing
14:57 - the label text and it's going to have
14:59 - the suffix icon which is actually going
15:01 - to be a button that we can press to
15:02 - submit our name
15:04 - so exact same that we did when we were
15:06 - looking at text input widget
15:07 - now in fact i actually want to add one
15:09 - more thing here i want to add a border
15:11 - just so that it actually looks like it's
15:13 - surrounded in something
15:14 - so to do this is actually kind of hard i
15:16 - was struggling to make the border last
15:18 - time
15:19 - but i think what you do is you go
15:20 - outline uh oops not outline button
15:23 - this should be outline input border so
15:26 - that's what we're putting here for
15:27 - border this should say you know
15:28 - outline an input field with a border and
15:31 - then
15:31 - inside of here what we need to do is
15:33 - actually put i think a border
15:35 - sign or something along those lines so i
15:38 - believe it is
15:40 - border side and that is equal to border
15:43 - side
15:44 - and inside of border side what does it
15:46 - take it has a color
15:48 - and a width so we're going to go with
15:50 - and we'll make that however wide we want
15:52 - to be i'm
15:52 - just going to make it 5 pixels wide and
15:54 - then for the color
15:55 - what do we want this to be i'm going to
15:57 - say colors
15:59 - dot and let's just make it black you
16:01 - guys can of course change that to be
16:02 - whatever you want
16:04 - but for me i just prefer to have it that
16:06 - actually let me get rid of that okay so
16:08 - now we have the border
16:09 - now all we need to do is add this method
16:11 - for on pressed
16:12 - so i'm kind of over the place here but
16:14 - hopefully you guys are following so
16:15 - let's add a method
16:16 - let's say void click and this is what
16:18 - will be called
16:19 - now when we press this button okay so
16:22 - i know this looks like a mess but again
16:24 - hopefully it makes sense
16:26 - and what we're going to do is we're
16:27 - simply going to set this
16:29 - name equal to whatever the controller
16:31 - text is
16:32 - and then we're actually going to
16:33 - navigate over to the next page so i'll
16:35 - show you how this works but let's go
16:37 - this dot name equals
16:40 - controller oops dot text
16:44 - like that okay and then what we're going
16:46 - to do is navigate over to the other page
16:48 - so first of all let's go to main dot
16:50 - dart
16:50 - and rather than rendering my home page
16:52 - let's start by rendering this
16:54 - login page so the login page which oops
16:57 - so i can find it here
16:58 - is just simply going to have that one
17:00 - field on it we'll render that to start
17:02 - and then when they press the button
17:03 - we'll move over to the message page
17:05 - where we'll know what who the author is
17:06 - and then from there they can move back
17:08 - they can change their name so on and so
17:10 - forth all right
17:12 - so instead of my home page let's go
17:15 - login page
17:16 - like that and do we have login page
17:18 - imported we do
17:19 - awesome we imported login at the top
17:21 - there so i'm going to close that so we
17:23 - have home
17:24 - is equal to the login page so now
17:26 - technically we should be rendering
17:28 - this and before we even move any further
17:30 - let me actually just see if this is
17:31 - working and awesome there we go so this
17:33 - is
17:33 - what it looks like this is kind of the
17:35 - field we've created of course
17:36 - change anything you want but we have a
17:38 - nice border it says type your name we
17:40 - have the person icon and we have the
17:42 - little check mark
17:43 - so if i type something blah blah perfect
17:47 - looks good to me okay so now we need to
17:49 - make a way to actually navigate over so
17:51 - to do that
17:52 - we're actually going to type navigator
17:56 - like that and we're going to say dot and
17:58 - i believe this is push
18:00 - so the way that this navigator thing
18:01 - works is essentially you can think of
18:03 - this as a stack
18:04 - so when you push a page onto the
18:06 - navigator it goes to the top of the
18:08 - stack
18:08 - which means that is the page we're
18:10 - currently going to be viewing so think
18:11 - like a stack of plates right
18:13 - if i push a plate on top of the stack of
18:16 - plates then that is the current plate
18:17 - that's the plate i can see it's at the
18:19 - very top
18:20 - if i pop that plate then what that means
18:22 - is i'm popping from the very top
18:24 - and i'm removing that plate so you're
18:25 - going to see how this works when we
18:27 - actually navigate over
18:28 - but the whole point of this navigator
18:29 - class is to keep track of where you've
18:31 - gone so if i keep pushing different
18:33 - pages onto the navigator class
18:35 - every time i press back i will go in the
18:37 - opposite order
18:39 - like back through the pages right so the
18:41 - most recent page i was on
18:42 - i'll go back to that one and then back
18:44 - to the previous one and so on so forth
18:46 - so that's how this thing kind of works
18:47 - so the main methods we're going to use
18:49 - is push and pop so you can pop meaning
18:52 - simply just
18:53 - go back to wherever i came from that's
18:55 - what that is saying
18:56 - or you can push which means go to this
18:58 - page that i'm about to show you
19:00 - so i hope that kind of makes sense but
19:03 - anyways we're going to go navigator.push
19:05 - we're going to type context and then
19:07 - we're going to do
19:10 - oops if i can get this going here
19:14 - material page root which is just telling
19:16 - us okay we're moving to a next page
19:18 - and inside of here i need to type
19:20 - builder and this is
19:22 - kind of a lot it's not doesn't make
19:23 - perfect sense and i need to context
19:26 - arrow and then i need to pick where i
19:28 - actually want to go which in this case
19:30 - is going to be
19:31 - my home page which is
19:34 - right there okay so let me save that uh
19:37 - did i import my home page or i did
19:39 - import that or it
19:40 - automatically imported i guess when i
19:41 - did this but essentially what i'm doing
19:43 - is i'm saying okay we're going to
19:44 - navigate
19:45 - uh with the current context which is
19:47 - just a variable that tell we need to
19:48 - pass when we're doing this
19:50 - we're going to go material page root
19:52 - this has a builder
19:53 - parameter here this takes a context and
19:56 - simply calls my home page so that's what
19:59 - this is doing it's just pushing this
20:00 - on to the navigator stack and then we'll
20:02 - load my home page
20:04 - and you'll see that when we're on my
20:05 - home page if we click the back arrow
20:07 - we simply pop off the stack and we can
20:09 - go back to where we came from
20:10 - so let's actually have a look at this
20:12 - all right so if i'm in here now and i do
20:14 - hello and i press that button
20:16 - you can see that brings us over to this
20:18 - page
20:19 - and if i click click the back arrow it
20:21 - brings us back to the original page
20:23 - so that's what this navigator class does
20:26 - you can see there's these nice
20:27 - animations
20:28 - and clicking that back arrow actually
20:30 - drops it down whereas pressing the arrow
20:32 - um
20:33 - to go to the next page brings it up
20:35 - right so there's specific animations for
20:37 - each
20:38 - operating system when you use this
20:39 - navigator class and that's why we're
20:41 - using that
20:41 - we could technically just render a
20:43 - widget in place of where we are
20:46 - but this is a better way to kind of deal
20:48 - with navigating between separate pages
20:50 - all right so now we're here and what i'm
20:52 - going to do is i'm just going to type
20:53 - say hello
20:54 - or something like that and oops
20:57 - jillo that's fine you can see that the
20:59 - name is tim so now we need to handle how
21:02 - can we actually change the name
21:03 - we've got the name they're typing it in
21:05 - but we need to actually pass that
21:07 - to my home page so that it can use it
21:09 - properly all right so we have that
21:11 - click you know whatever this.name equals
21:13 - controller.txt
21:14 - navigator.push now let's go to my home
21:17 - page
21:18 - and let's change this so that rather
21:19 - than just using tim here
21:21 - we're going to use whatever name we
21:22 - actually pass to my home page
21:24 - so since my homepage is a stateful
21:26 - widget what i'm going to do is i'm going
21:28 - to say string
21:29 - oops actually final
21:33 - final string name like that
21:37 - and then let's go my home page and
21:40 - inside of here we're just going to say
21:42 - this dot name so we're simply just
21:43 - setting up a constructor here
21:45 - that says okay every time we make a new
21:47 - home page pass me
21:49 - a name right so that when we load this
21:51 - we can just pass a name in and then it
21:53 - will use that as the author
21:54 - now we need the same thing here so
21:57 - instead of using
21:58 - what do you call it instead of using tim
22:00 - in new post we're going to say widget
22:02 - dot yep dot name like that and that
22:06 - should be all we need to do on the my
22:07 - home page side
22:08 - to actually get this operating properly
22:10 - so now let's go back
22:12 - to login.dart and notice that we're
22:14 - getting the squiggling
22:15 - line now on my home page so all we need
22:17 - to do is simply pass it a name so we'll
22:19 - just say
22:21 - this dot name so now whenever we go to
22:23 - my home page we give it a name and
22:25 - hopefully it's going to use that as the
22:26 - author
22:27 - so let's check this uh oops uh
22:30 - unimplemented handling of static
22:32 - target already change i think that just
22:34 - means i need to reload this
22:37 - not sure i just think it can't handle
22:39 - that um
22:40 - if we in the hot reload if we do
22:41 - something crazy like that okay so
22:43 - restart application looks like this is
22:44 - working let's try this now
22:46 - hello let's press the check button
22:48 - brings us over here
22:49 - let's type something and there we go now
22:51 - the author is
22:52 - hello so let's go back let's change this
22:55 - to be
22:57 - tim like that and now let's type
22:59 - something
23:00 - and now the author is tim so the author
23:02 - changes based on whatever we type in on
23:04 - that first page
23:05 - now you may have noticed that when i go
23:07 - between these two pages here
23:09 - it doesn't save the messages that we had
23:11 - there that's fine we're going to deal
23:13 - with all that once we start looking at
23:14 - the database stuff and how we actually
23:16 - populate this list originally
23:18 - but for now i think that's all i'm
23:20 - actually going to do in this video so
23:22 - quick recap there what we did here is
23:23 - separate everything out into a bunch of
23:25 - different files
23:26 - we worked on this login page and then we
23:28 - worked on
23:29 - actually getting it so that we could
23:30 - change the author based on the name that
23:32 - the user typed in
23:33 - so that's kind of the start of say if we
23:35 - wanted to have some kind of login system
23:37 - now obviously when we move to the next
23:39 - page we know what user is there and we
23:41 - can do something with that user
23:43 - so anyways if you guys enjoyed this
23:45 - video make sure you leave a like
23:46 - subscribe to the channel and i will see
23:48 - you again in another flutter tutorial