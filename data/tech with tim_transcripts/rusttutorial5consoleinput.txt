00:02 - [Music]
00:08 - hello everybody and welcome to video 5
00:11 - in this ross programming tutorial series
00:14 - in this video i'll be going over
00:15 - collecting user input before i do that i
00:18 - will again mention that i have a course
00:19 - programming expert dot io best place to
00:22 - learn how to code over 250 practice
00:24 - questions actually now i think it's
00:26 - almost close to 300 practice questions
00:28 - assessments projects all kinds of stuff
00:30 - to interactively learn how to code of
00:33 - course not in rust and go and python but
00:35 - great languages to learn regardless if
00:37 - you haven't checked it out yet please do
00:38 - from the link in the description now
00:40 - though let's get into user input so the
00:42 - first thing i want to discuss here is
00:44 - that in any of our rust programs we have
00:46 - something called a prelude now the
00:48 - prelude is essentially a bunch of
00:50 - functionality that's automatically
00:52 - imported and added to our rust file or
00:55 - rust code without us having to manually
00:57 - import it so that's kind of what allows
00:59 - us to use things like print line or fn
01:02 - or different types or a bunch of
01:03 - reserved keywords and functionality from
01:06 - the rus standard library so every
01:08 - programming language has a standard
01:10 - library that comes with a bunch of
01:11 - default functionality that you can use
01:13 - and rust imports a bunch of that in the
01:15 - prelude for you so you don't have to
01:17 - manually import it however if you want
01:19 - to get user input this is not included
01:22 - in the prelude and you do have to
01:23 - manually import it so that's what i'm
01:25 - going to show you now so that's kind of
01:26 - why i wanted to discuss that again the
01:28 - prelude just brings in a bunch of basic
01:30 - functionality that you're almost always
01:31 - going to use it's kept pretty minimal
01:33 - and then there's a ton of standard
01:34 - library packages that you can import and
01:37 - a package in rust which is essentially a
01:40 - collection of code is referred to as a
01:42 - crit so if you hear me say crate i'm
01:44 - really referring to a package or a
01:46 - library they're kind of synonymous and
01:48 - then within each of those packages or
01:50 - libraries or crates we have something
01:52 - called a module which is a specific
01:54 - piece of functionality
01:56 - for example here we're going to use the
01:58 - i o module so what i'm going to do here
02:00 - at the top of my program above this
02:02 - function is where i use std standing for
02:05 - standard library and then colon colon io
02:08 - so what i'm doing is using the std crate
02:10 - or the std package or library and then
02:13 - i'm bringing in the i o module which
02:15 - stands for input output and is going to
02:17 - allow me to get input from the standard
02:20 - input so if i want to start collecting
02:22 - input here the first thing i need to do
02:24 - is declare a variable that's mutable
02:26 - that's going to allow me to store my
02:28 - input so i'm going to say let and then
02:30 - this is going to be mut and i'm just
02:32 - going to call this input for now and
02:35 - this is going to be equal to string with
02:37 - a capital s
02:39 - colon colon new now what this operator
02:42 - is right here we've seen it already is
02:43 - the path separator operator so it allows
02:46 - us to go from something like a package
02:48 - to a module and then from something like
02:50 - a module to a specific function or
02:52 - method that's defined inside of there so
02:54 - here i'm using string and then i'm
02:56 - grabbing the new function i'm going to
02:58 - call it a function i believe that's what
02:59 - it is which is kind of a constructor and
03:02 - going to create a new empty string
03:04 - object for me we're going to talk about
03:06 - strings in another video because they're
03:08 - not as straightforward as some other
03:10 - programming languages say like python or
03:11 - javascript for now though just
03:13 - understand we're creating a mutable
03:14 - string that we'll be able to change
03:17 - later on okay so now that we've created
03:18 - this string we have a variable where we
03:20 - want to assign our input we now need to
03:23 - collect the input so to collect the
03:24 - input we're going to use i o colon colon
03:26 - and then this is going to be std in now
03:29 - i believe std in stands for standard
03:31 - output in and the standard output is
03:33 - kind of just like your terminal right
03:34 - whether you're on mac or linux or
03:36 - windows your terminal your command
03:37 - prompt is kind of the standard output so
03:39 - when you're typing in there and we have
03:41 - std in you know that's what that's doing
03:43 - so hopefully that makes sense okay so we
03:45 - have stdn then we're going to call
03:47 - readline and we're going to say at mutt
03:50 - and then input like this now this is
03:52 - difficult to explain without getting
03:54 - into some much more advanced rust
03:56 - features essentially what we're doing
03:58 - here is we're actually creating what's
03:59 - known as a mutable reference to this
04:02 - input variable which is going to allow
04:04 - this function or method whatever you'd
04:05 - like to call this to directly modify the
04:08 - data that's stored inside of this
04:10 - variable
04:11 - again i know this is kind of weird but
04:13 - by default in rust when you pass
04:15 - something say like input to a function
04:17 - you're passing actually a copy of
04:20 - whatever the value is here in input even
04:23 - though this is mutable by default when i
04:24 - put input here what's going to happen is
04:27 - this function if you're familiar with
04:28 - what i'm talking about here is going to
04:30 - create a copy of this value and that
04:32 - means if it were to say change that copy
04:34 - it's not going to change the input value
04:36 - here and that's not helpful to us
04:37 - because we want to grab the
04:39 - the input in this variable so instead we
04:42 - need to use a reference now reference is
04:43 - this ampersand we're going to get all
04:45 - we're going to get into this in later
04:47 - videos so don't worry if this is
04:48 - confusing for right now however a
04:50 - reference by default is immutable
04:52 - meaning i can't actually change the
04:54 - reference if i pass this to the function
04:56 - so instead i need to say at mutt and
04:59 - then input giving me a mutable reference
05:02 - which i can modify essentially all you
05:04 - really have to understand here is this
05:05 - is allowing us to actually access the
05:07 - input value and change what's being
05:09 - stored here to the input that's typed in
05:12 - in the standard input i know confusing
05:14 - uh but that's that's what's going on
05:16 - okay so then we need to go here and say
05:18 - expect and i'm going to say
05:20 - failed to read line
05:22 - okay so let me describe what we just did
05:24 - here so we grabbed the standard input
05:26 - function from the i o module we're then
05:29 - using the read line method that's what
05:31 - i'm going to call this we are passing a
05:32 - mutable reference to where we want to
05:34 - store the input and then what this dot
05:36 - expect is doing is essentially catching
05:39 - any errors that are going to occur so
05:41 - what's actually returned here from
05:43 - reline is something known as a result
05:45 - object i don't want to get into it too
05:46 - much because it's confusing especially
05:48 - if you're not familiar with these more
05:49 - advanced programming features but what
05:51 - this requires us to do is to call this
05:54 - dot expect on now when we do that it's
05:57 - just gonna check if this gave us a valid
06:00 - value so if we actually got some input
06:02 - or if for some reason it couldn't read
06:04 - what we were insert that's all it's
06:06 - doing there so if it couldn't read if we
06:08 - couldn't read the line we're going to
06:09 - say failed to read line you know the
06:11 - error is going to be handled and we'll
06:12 - see this kind of in the terminal
06:14 - otherwise though we'll just have the
06:16 - value be assigned here to this input
06:18 - variable all right so let's just
06:20 - continue here and we can go back and
06:21 - look at this more so now i'm going to
06:22 - say print line and i'm just going to
06:24 - print out what the user typed in so i'm
06:25 - going to do
06:26 - my curly braces like that and then input
06:29 - okay let me make sure i have my
06:30 - semicolons let's go here and let's just
06:32 - go cargo and then run and let's see what
06:35 - we get and notice we get hello comma
06:38 - world and then no it's giving me my
06:40 - cursor right like it's blinking here so
06:42 - i can type something like hello and when
06:43 - i hit enter hello gets printed out there
06:46 - you go so let's run this one more time
06:48 - we have hello world my cursor starts
06:50 - going this means i'm allowed to type
06:52 - something in here i say hello what is up
06:55 - and then it's going to print out exactly
06:56 - what i typed it okay so that is how you
06:58 - get standard input or that's how you get
07:00 - input from the console so now that we've
07:02 - done that let me just remove this expect
07:04 - and show you what happens so the code
07:06 - actually should execute just fine
07:08 - however you will see that we get a
07:09 - warning so let's run this and notice now
07:11 - that i get this unused result that must
07:13 - be used so i'm getting the warning from
07:15 - this line because as i said it's
07:16 - returning a result value that we're not
07:18 - using now result is going to contain as
07:20 - it says here a potentially an error now
07:23 - if it has an error we need to handle
07:25 - that with the dot expect if it doesn't
07:28 - have an error then all is good and again
07:30 - we get that value assigned to our
07:31 - variable so in this case i'm not really
07:33 - going to be causing an error by typing
07:34 - anything in the console but there is
07:36 - situations in which we can't read the
07:38 - line and that expect will be triggered
07:40 - so it does let us actually execute the
07:42 - code but again we get that warning so
07:43 - you want to have this dot expect here to
07:46 - handle an error that is returned by
07:48 - result if an error were to occur
07:50 - okay that is really all i need to show
07:52 - you though in terms of standard input
07:54 - there's not much to go through here one
07:56 - thing to note is that when we're getting
07:57 - standard input we're gonna be using a
07:59 - string
08:00 - let's see what happens if we change this
08:01 - to something like a number right let's
08:03 - change that's like four
08:04 - so let's go here
08:06 - and let's clear
08:08 - and let's run and notice that we get a
08:10 - problem here it says we expected a
08:12 - string but found an integer so when
08:14 - we're getting the standard input using
08:15 - readline we need to have the type here
08:17 - be equal to a string and that's why i
08:20 - did string colon colon new because i
08:22 - need to initialize this value first of
08:24 - all and i just need an empty string so
08:25 - that the type is going to be strings
08:27 - then we can change this to be the string
08:29 - that the user typed in
08:30 - all right with that said i will leave
08:32 - the video here i hope this was helpful
08:34 - showed you how to get user input in the
08:35 - next video i believe we're going to look
08:37 - at some arithmetic as well as how we
08:39 - change the types of stuff and then we'll
08:40 - continue on to some more advanced rust
08:42 - features as always if you enjoyed leave
08:44 - a like subscribe to the channel and
08:45 - we'll see you in the next one
08:49 - [Music]
08:55 - you