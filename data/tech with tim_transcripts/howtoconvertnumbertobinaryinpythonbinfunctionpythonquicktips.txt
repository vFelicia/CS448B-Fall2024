00:00 - hey guys and welcome back to other
00:01 - Python quick tips in today's video we're
00:03 - gonna be talking about the bin function
00:04 - which is also known as the binary
00:06 - equivalent function so what this does is
00:08 - return to a string that represents any
00:10 - integer number as a binary number
00:11 - starting with the letter 0b I'll show
00:14 - you what I mean by that essentially if I
00:15 - print out bin num this is gonna turn 23
00:18 - into a binary number when I print this
00:20 - you see we get 0 B 1 0 1 1 1 now the
00:23 - zero B just stands for this is a binary
00:25 - equivalent and actually the type that's
00:27 - returned by this is a string and not
00:29 - some kind of number there's no specific
00:31 - type in Python for a binary number it
00:33 - just gives you a string now this is
00:35 - important because if we try to do
00:36 - something like turn our binary number
00:38 - back into an integer I'll show you what
00:39 - happens so notice this is our binary
00:41 - number now I'm just gonna remove the
00:43 - zero B from it and the way that you can
00:45 - do that since this is a string is just
00:47 - by indexing and getting from index 2
00:49 - onward which means we're gonna start
00:50 - here and go to the end of the string so
00:52 - when I do that you see we get 1 0 1 1 1
00:54 - now let's just convert this into an
00:56 - integer by putting int and let's see
00:58 - what we get I mean in theory you think
01:00 - we should get 23 back because you're
01:01 - gonna convert from a binary but what we
01:03 - really end up getting is the same thing
01:05 - with the actual 10111 which obviously
01:09 - was not the same number that we
01:10 - converted into binary so just be aware
01:13 - of that once you go into binary you
01:14 - cannot go backwards unless you have some
01:16 - like weird conversion method and you've
01:17 - written something to do that but anyways
01:19 - that's kind of how bin works I'll show
01:21 - you one more thing here on how we can
01:22 - actually use this on our own type of
01:23 - objects this is a really basic object
01:26 - I've set up I just called it my object I
01:27 - know I'm extremely creative and anyways
01:30 - what we can actually do is we can write
01:32 - this underscore underscore index
01:33 - underscore underscore index method as a
01:36 - part of any of our objects and this will
01:38 - return what we want to convert into
01:39 - binary so I know you might be confused
01:41 - here but just watch what happens
01:42 - essentially what I get here is when I
01:45 - call bin on my object since I've
01:47 - implemented the functionality of this I
01:50 - return self dot X plus self dot y which
01:53 - in this case is actually going to be the
01:54 - value 4 so right here is gonna be 4 and
01:56 - then that's converted into the binary
01:58 - equivalent which is 1 0 0 now I know
02:01 - this is strange but essentially whenever
02:03 - you call bin on an object that has this
02:04 - implemented on it what it will do is
02:06 - return some integer value and then just
02:08 - turn that integer value into the binary
02:10 - equivalent which is what we've done here
02:12 - you can see if I add 3 here
02:13 - and I do this now we get five as the
02:15 - binary equivalent so one zero one and
02:17 - obviously I know I can mess around with
02:18 - this and go for o not s we can go for
02:21 - ten there and you can see that we get a
02:22 - new binary number so that's kind of how
02:24 - the bin function works sometimes it's
02:25 - useful when you want to work with
02:26 - binaries and you don't want to have to
02:28 - convert them manually with that being
02:29 - said that has been it for this video if
02:30 - you guys enjoyed it make sure you leave
02:31 - a like and let me know what you want to
02:33 - see on the future with Python quick tips