00:00 - in this video I'm gonna be going over
00:01 - some useful set methods and continuing
00:04 - to talk about sets more detail than
00:06 - showing you some more advanced things
00:08 - that you can do with them if you haven't
00:09 - seen my previous video just talking
00:11 - about how a set works it's an unordered
00:14 - unique data set or collection of
00:16 - elements sorry I recommend you go watch
00:19 - that if you already know about sets then
00:20 - just stay here and I'm just gonna go
00:21 - through some really useful methods and
00:23 - pretty much wanted me to talk about are
00:24 - here right in this little box so feel
00:26 - free to just read through them and kind
00:28 - of experiment with them yourself but if
00:29 - you want a more like in-depth kind of
00:31 - tutorial on them then watch through the
00:33 - whole video I'm going to go through what
00:34 - all of these do and how they work so
00:36 - sets are really useful in Python because
00:38 - they come with a lot of methods and if
00:41 - any of you guys are in linear algebra
00:42 - then you know that there's a lot of
00:44 - things you want to do with sets like
00:46 - subsets super sets differences
00:48 - intersections unions and those can be
00:50 - annoying to have to code yourself so yes
00:53 - you can code them yourself just using
00:54 - typical lists but these sets allow you
00:57 - just to type like one method and have it
00:59 - all done for you and it saves you a lot
01:01 - of time it also just looks cleaner in
01:03 - your code so I'm going to start by
01:04 - creating two sets so I'm just going to
01:06 - say s is equal to like 1 2 3 7 & 8 and
01:11 - why not just a little string in here
01:12 - we'll do a test I'm going to do a set T
01:15 - I'm gonna set this equal to 3 4 5 8 9
01:19 - tests like this okay
01:22 - now one of the most useful methods that
01:25 - you can use on sets is I would want to
01:29 - say intersection and intersection is
01:31 - gonna give you the most or any elements
01:34 - that are in both of the sets and this is
01:36 - really useful there's a lot of
01:37 - applications and so I'll show you how
01:39 - you can do it you can do s dot
01:42 - intersection of T like this and what
01:45 - this is gonna do is it's gonna return a
01:46 - new set containing all of the elements
01:49 - that are common within set so when I do
01:52 - that you see we get 8 test and 3 and
01:54 - those are because they occur in both
01:55 - sets another one that's really useful is
01:58 - Union and what this does is it simply
02:00 - just combines all of the elements in the
02:02 - set together so if I do s dot Union T
02:04 - then you can see we get all of the
02:06 - elements combined together and notice
02:08 - because it's a set we don't have any
02:10 - duplicate elements it just finds ones
02:13 - just like bushes these two sets together
02:16 - another one that's useful is is subset
02:19 - so I'm gonna just create a small set
02:21 - anesthetic SS is equal to like 1 2 3
02:25 - that's not a set is it it's a list of my
02:27 - bad because we're not gonna be able to
02:29 - use this on list so SS equals that and
02:31 - we'll just do like TT equals and let's
02:36 - do 1 2 now if we want to determine if TT
02:40 - is a subset of SS there's a way that we
02:43 - can do this we can say is is subset is
02:46 - actually the method so say SS or TT DUT
02:49 - is subset of SS and that gives us a true
02:54 - value and the way that this works is it
02:56 - pretty much finds and our it looks at TT
02:58 - and says are all the elements in TT also
03:01 - contained in SS and if they are then
03:04 - that means this is indeed a subset of
03:06 - the set SS ok so let's do this again
03:10 - except let's just change this around so
03:11 - SS is SS a subset of TT well I'll let
03:15 - you guess by having a look and the
03:19 - answer is no and that is because if we
03:21 - look at SS is every element SS in TT no
03:25 - it's not so this is going to give us a
03:26 - false value now another one that we can
03:28 - use is is superset and it's kind of just
03:30 - like a reverse of this so if I do
03:33 - ss is superset of TT now it's going to
03:40 - check and see if all the elements in TT
03:43 - are in SS so it's doing the same thing
03:45 - as is subset just kind of in Reverse so
03:48 - it's giving us a true value now so that
03:50 - means that this contains all the
03:52 - elements that are in like the lower
03:53 - bound set kind of so again if we flip
03:56 - this around we do TT SS we get false ok
04:01 - so another one that's really useful is
04:04 - difference and what difference is gonna
04:06 - do it's gonna give us all the elements
04:07 - that are in one set but are not in the
04:10 - other so if I say s dot difference I'm
04:13 - going to go back up to these tops that's
04:14 - now and use these I start difference of
04:17 - T then we get set of one two and seven
04:20 - so these are the elements that are in s
04:22 - that are not in T
04:24 - and same thing if we do TDOT different s
04:29 - then we get the elements that are in T
04:31 - but our 9s and again that's useful as
04:33 - well you want to find elements that
04:34 - aren't common to both sets now we can
04:37 - also do something called a symmetric
04:38 - difference and with some symmetric
04:41 - difference does is it's going to find
04:42 - elements that aren't in either of these
04:45 - sets okay so if we do symmetric
04:48 - difference of T then we get one two four
04:51 - five seven nine and the way that
04:53 - symmetric works is it finds the elements
04:55 - set like aren't in common with the set
04:57 - so you can see one does not exist in
04:59 - this set two does not exist in this set
05:02 - three does we don't get three and four
05:05 - well that doesn't exist in the other set
05:07 - so we add four five doesn't exist in the
05:08 - other sets we had five seven eight does
05:11 - exist so nice so it finds all the
05:13 - elements that are not common in both of
05:15 - the sets and combines them into a new
05:17 - set now it's good to notice here what
05:20 - these are doing is they're returning us
05:21 - a new set and we can see that because
05:23 - they're printing it out to the screen so
05:26 - it's not actually changing s and it's
05:27 - not changing T and I can press NT it's
05:31 - just returning a new set now the last
05:33 - one I'm going to show you this is pretty
05:35 - straightforward since sets are mutable
05:36 - sometimes you may want to make a copy of
05:38 - them and you can't actually RL test but
05:41 - I'm pretty sure you can't do something
05:42 - like this so set H equals s : yeah we
05:45 - get an error so that would be how you
05:47 - copy lists so how do you copy a set the
05:50 - way to copy a sent is through H is equal
05:52 - to s con
05:53 - copy now for any of you guys that are a
05:55 - bit more advanced this is creating a
05:56 - shallow copy of s you don't have to know
05:59 - what that means but I'm just giving it
06:00 - to you guys in case that means something
06:02 - to you so that's how you would make a
06:04 - copy so now if you change something in H
06:06 - sources like each dot remove what's in s
06:08 - let's see like one and we print H and
06:12 - then we print s we can see we did not
06:14 - end up changing s because we made a copy
06:17 - anyway so that's been it for some of
06:19 - these useful set methods if any of you
06:21 - guys are in linear algebra I hope you
06:22 - appreciate these because coding these
06:24 - can be kind of difficult and also just
06:26 - take a lot of time so these methods save
06:28 - you a ton of time and just help you out
06:31 - when programming
06:32 - anyways that's been it for this video if
06:33 - you guys enjoyed please make sure you
06:34 - leave a like and subscribe and I'll see
06:36 - you again in another one
06:38 - [Music]