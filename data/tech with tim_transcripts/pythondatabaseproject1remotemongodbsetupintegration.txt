00:02 - [Music]
00:08 - hello everybody and welcome to a brand
00:10 - new tutorial series on a simple database
00:13 - app with python
00:14 - using mongodb so for those of you that
00:16 - are not familiar with mongodb
00:18 - this is what's known as a nosql database
00:21 - it's super easy to use especially in
00:23 - python
00:24 - and what we're going to be doing here is
00:25 - actually setting up a remote
00:27 - database so we're going to first start
00:29 - by working a little bit on a remote
00:31 - linux server
00:32 - don't worry if that sounds intimidating
00:33 - to you i'll be walking through every
00:35 - step all you have to do is kind of just
00:36 - follow along with me to get things set
00:38 - up
00:38 - and what that means is that the database
00:40 - that we create is not just going to be
00:42 - local on your machine it will actually
00:44 - be hosted in the cloud
00:45 - so say you actually want to make some
00:47 - kind of real application that maybe
00:48 - you're going to deploy
00:49 - or that people from different machines
00:51 - you're going to use no problem
00:53 - this will definitely work for it and
00:54 - that's why i wanted to do this series to
00:56 - show you how we can actually set up a
00:57 - remote
00:58 - database so anyways once we get that
01:00 - database set up
01:01 - then i'll be talking about how we
01:02 - actually work with mongodb how we can
01:04 - connect to that database
01:06 - and then we'll wrap kind of our aim of
01:08 - this series which is going to be to just
01:10 - learn about databases
01:11 - to a simple project and the project that
01:14 - i'm going to be talking about here
01:15 - is kind of a basic car dealership system
01:17 - so what i'm going to do is have it so
01:19 - that we'll have a bunch of cars in the
01:20 - database
01:21 - a user can kind of search through and
01:23 - look for all of those cars and then they
01:24 - can quote unquote purchase a car
01:26 - and i'll show you how we would handle
01:28 - the database operations around that
01:30 - and then the user input and all of that
01:32 - with that being said sorry for the long
01:34 - intro
01:34 - let's get started in just one second
01:36 - after a quick word from the sponsor of
01:38 - this series who's actually going to be
01:39 - allowing us
01:40 - to use all of this database technology
01:42 - for free i need to start by giving a
01:44 - massive thank you to lenode for
01:46 - sponsoring this video and this series
01:48 - i've been using lenod for well over a
01:50 - year now and i can personally attest to
01:52 - what a great company they are
01:53 - in fact they are so great that they've
01:55 - actually set up a live event on
01:57 - september 29th
01:58 - at 11 a.m est for me to run through the
02:01 - second part of this series live
02:03 - with a ton of time for questions and
02:05 - interactions from all of you
02:06 - you can sign up if you want to attend
02:08 - this live event from the link in the
02:10 - description
02:11 - if you can't make it on the 29th
02:12 - register anyways and you'll get the
02:14 - on-demand
02:15 - lab when in your inbox now let me tell
02:17 - you a bit about lenode
02:18 - so lenode makes it easy and affordable
02:20 - to host your own app
02:22 - service or site in the cloud maybe you
02:24 - started with an entry-level hosting
02:25 - service when you were new to coding
02:27 - lenode is your step up to powerful fast
02:30 - fully configurable cloud computing
02:32 - with server plans starting at just five
02:34 - dollars plus no hidden fees or surprise
02:36 - overages
02:37 - lenode offers no-nonsense hosting at a
02:39 - price you can afford
02:40 - lenode has a full api integrating with
02:42 - tools like terraform and kubernetes
02:44 - making it the perfect environment for
02:46 - development projects
02:47 - get started today by heading to the link
02:49 - in the description and you'll be given
02:50 - access to a hundred dollars in free
02:52 - lenode credits
02:53 - so one last thank you to lenode now
02:55 - let's go ahead and continue the video
02:57 - alright so once you've signed up for
02:58 - your free 100 credit and made your new
03:01 - account on lenode
03:02 - we should be good to go and actually
03:04 - create our first server so obviously the
03:05 - first step here is going to be to make a
03:07 - server
03:07 - the server is going to store our mongodb
03:10 - instance if you want to call it that
03:11 - and we will connect to the server when
03:13 - we actually want to use mongodb
03:16 - now it's really easy to do this to
03:17 - actually set up the server we're going
03:18 - to press on create
03:20 - we're going to click on lenode which is
03:21 - just the standard server that we want to
03:23 - use
03:23 - and then we're going to actually go
03:24 - ahead and click on marketplace now just
03:27 - note that within here you can select
03:28 - like all your different plan options
03:30 - what you want like root password
03:32 - you can make the server as configured as
03:34 - you want to whatever your need is
03:36 - but in our case we're going to go to
03:38 - marketplace and select
03:39 - the mongodb image right here now
03:42 - essentially what this does if we select
03:44 - one of these here and you can see
03:45 - there's a bunch of them like
03:46 - github minecraft so on uh this just sets
03:49 - up the server to automatically have
03:51 - this technology or tool or whatever it
03:53 - is installed on there for us
03:55 - so we'll select mongodb that means we
03:57 - don't need to install that and set it up
03:59 - that's going to be really nice
04:00 - and now what we're going to do is enter
04:02 - our mongodb password
04:03 - now make sure you remember what this
04:05 - password is that's going to be mine i'm
04:07 - not going to tell you guys what it is
04:09 - because we are going to need to use that
04:10 - when we actually set up mongodb
04:13 - next regions i live close to toronto so
04:15 - i'm going to select toronto
04:17 - obviously select the server that's
04:18 - closest to you or where most of your
04:20 - users would be
04:22 - next we get to choose what plan we
04:24 - actually want for our server
04:25 - note that the cheapest plan here is the
04:27 - nan node it's five dollars a month one
04:29 - gig of ram one cpu
04:31 - that'll actually be enough if you want
04:32 - to use that for this tutorial
04:34 - now since i have a few credits on here
04:36 - i'm just gonna use lenode four gigabytes
04:38 - so four gigs of ram two cpus
04:40 - and again that will be more than enough
04:41 - that we need for this tutorial
04:44 - keep in mind that if you're going to
04:45 - have an app that has a lot of database
04:47 - read and write operations you're
04:48 - probably going to want to go up to maybe
04:50 - 8 gigs of ram or mess around and see
04:52 - what you actually might want to use here
04:54 - for your hardware but obviously
04:56 - the more the better the hardware the
04:57 - faster your database is going to be
04:59 - next you can change the name if you want
05:01 - i'll just leave it like this and then
05:02 - you need a root
05:03 - password for the root password again i'm
05:06 - not going to tell you guys what this is
05:07 - because you will see my server ip so
05:09 - you'll be able to log in
05:10 - but select something that is a strong
05:12 - root password you don't want to get
05:13 - hacked on your server obviously
05:15 - and then press create now this is going
05:17 - to take a minute or two to actually
05:18 - create the node it just has to set
05:20 - everything up install mongodb
05:22 - and all that stuff once that's done i'll
05:24 - be back and i'll show you how we can
05:26 - actually get into our lynn node
05:27 - and start working on it directly so myla
05:30 - node is ready to go now what we need to
05:32 - pay attention from this page before we
05:34 - leave it
05:34 - is just the ip address so grab the ip
05:37 - address you can copy it just by pressing
05:39 - the button
05:40 - we're going to need that for our server
05:41 - and then obviously remember your root
05:43 - password and your mongodb password those
05:45 - could be the same
05:46 - we're going to need both of those in a
05:48 - few steps in just a second
05:50 - all right so now what we need to do is
05:52 - actually get onto our server and start
05:54 - working on it so what we're going to do
05:55 - is download putty
05:56 - this is a tool that we can use to just
05:58 - ssh into our server
06:00 - and actually start working on it uh well
06:02 - remotely i guess if you want to say so
06:04 - from this computer we can access
06:06 - it we can run commands on it and do what
06:08 - we need to do so i'm going to download
06:09 - putty actually i already have it
06:10 - downloaded but i will leave a link in
06:12 - the description where you guys can get
06:13 - it from
06:14 - once that's downloaded open it up and
06:16 - then we will go through the next steps
06:18 - all right so once putty is open what i'm
06:20 - going to do is simply input the ip
06:22 - address right here in the bar where it
06:24 - says host name or ip address
06:26 - and then i'm going to make a new profile
06:28 - and save this in here so i'm just going
06:30 - to say tutorial you can see i've been
06:31 - testing this out before
06:33 - and i will simply press save that will
06:36 - save the ip address and any of the other
06:37 - settings i
06:38 - choose here now just to make it easier
06:40 - for you guys to read you don't have to
06:42 - do this i'm going to go to appearance
06:44 - and change my cursor size
06:46 - or font size sorry to be 22 not 222
06:50 - 22 so you guys can actually read this
06:52 - terminal window when it comes up
06:53 - all right so then once you've done that
06:55 - you can go back to session
06:56 - you can press on your profile and you
06:58 - can press save
06:59 - if you change the font size and that
07:01 - will just save all the settings
07:02 - next i'm going to press open you might
07:04 - get a pop-up like this if you see this
07:06 - press
07:06 - yes i'm not going to explain really what
07:08 - that is but you can just press yes
07:10 - and then we're good to go now we need to
07:12 - log into our server
07:13 - so assuming your server is up and
07:15 - running and you type the ip address in
07:16 - you should be following along at this
07:18 - point and at this step
07:19 - we're going to sign in as the root user
07:22 - and then we're going to use the roots
07:23 - password which is the one we inputted
07:25 - when we set
07:26 - this server up so i'll type my password
07:29 - in you should see if the password is
07:31 - correct you get something that looks
07:32 - like this
07:33 - and now what we're going to do is start
07:34 - setting up our mongodb
07:36 - server so there's a few steps here
07:38 - they're not super complicated but you
07:40 - need to make sure you follow them
07:41 - precisely
07:42 - if you don't you're going to have
07:43 - problems connecting to the mongodb
07:45 - server
07:46 - and it's going to be a lot more
07:47 - difficult to go back and figure out what
07:49 - you missed rather than just doing it
07:50 - correct the first time
07:52 - so the first thing we're going to do is
07:53 - we're going to type hyphen u
07:56 - and then we're going to type admin
07:57 - hyphen p
07:59 - hyphen hyphen authentication database
08:03 - admin now what this is doing is pretty
08:05 - much
08:06 - starting the mongodb shell and we're
08:08 - saying okay we're going to use the
08:10 - admin user which is the default user for
08:12 - mongodb it always has an admin user
08:15 - and we're going to use the authentic
08:16 - authentication database which is admin
08:19 - what we're going to do here as soon as
08:20 - we get inside of the shell you can see
08:22 - it's asking me for a password for admin
08:24 - this is going to be the password we
08:25 - inputted when we were setting up the
08:27 - server
08:27 - what we're going to do here inside of
08:29 - the shell is we're going to add a new
08:30 - user that is going to have
08:32 - access to a certain database the
08:35 - database that we'll be using
08:37 - for our project so the first thing we
08:39 - need to type is
08:40 - use admin what this is saying is use the
08:43 - admin database
08:44 - so what we want to do is add a new user
08:46 - into the admin database
08:48 - that's not actually the admin user
08:50 - because we want to give
08:51 - our application its own user to access
08:54 - the mongodb database
08:55 - and we just need to add its credentials
08:58 - to this database
08:59 - so what we need to do now is we need to
09:01 - type db.create
09:03 - and i can't zoom i can't scroll up
09:05 - unfortunately but
09:06 - we'll say db.create user and then what
09:09 - we're going to do
09:10 - is inside of curly braces inside of
09:12 - other parentheses like this we're going
09:13 - to say user
09:14 - colon we're going to put the name of the
09:16 - user so in this case i'm just going to
09:18 - pick
09:18 - tim we're going to go comma pwd
09:22 - which stands for password obviously
09:24 - we're going to put our password in
09:25 - double quotation marks
09:26 - i'm just going to make my password tim
09:28 - that's fine you guys will
09:29 - be able to log into the server but i
09:31 - will change it after
09:32 - and then next we're going to say roles
09:35 - now this one is important
09:36 - what we put inside of roles is what we
09:39 - want our user to be able to do so if we
09:41 - want them to be able to read from a
09:42 - certain database or write to a certain
09:44 - database
09:44 - we write it inside of here so in this
09:47 - case we want the user that we're setting
09:48 - up here which is tim to be able to read
09:50 - and write from whatever database
09:52 - we're going to use when we actually
09:55 - start connecting
09:56 - to mongodb so we haven't created this
09:58 - database yet
09:59 - but we're just going to put in what the
10:01 - name of it will be and then our user
10:02 - will be authenticated
10:04 - on that database when we eventually
10:05 - create it so what i'm going to put
10:07 - inside of here is curly braces so i know
10:09 - this seems a little bit confusing
10:10 - we'll add some text on the screen so you
10:12 - can see exactly what this looks like
10:14 - but i'm going to put curly braces i'm
10:16 - going to put rule and then
10:18 - colon and then inside of double
10:20 - quotation marks i'm going to type
10:21 - read write like this it needs to be
10:24 - spelled like this
10:25 - if you just want it to be read obviously
10:27 - you would just write read if you just
10:29 - want it to be right you would just write
10:31 - write and this is telling us what
10:33 - permissions this
10:34 - user is going to have for whatever
10:35 - database we specify here
10:37 - now i'm going to type db this is saying
10:39 - okay what is the database
10:41 - name that this user has this role for
10:43 - and in this case we're going to call
10:45 - this
10:45 - dealership so the database we're going
10:47 - to call use is
10:48 - dealership i know it's cutting off again
10:50 - we'll put the text on the screen
10:52 - and now i can simply press enter and we
10:54 - can see that successfully added the user
10:56 - so if you get that text you are good to
10:58 - go what we can type next
11:00 - is quit uh oops quit sorry with two
11:03 - brackets
11:04 - that will exit out of the mongodb shell
11:06 - now what we need to do is simply set up
11:08 - authentication and make sure our server
11:10 - is listening on the right ip address
11:13 - and then what we can do is connect to it
11:14 - and actually start writing some python
11:16 - code
11:16 - so the next thing that we're going to do
11:18 - is we're going to type sudo
11:20 - nano nano is simply kind of the text
11:22 - editor for linux
11:24 - and then we're going to type slash etc
11:27 - mongod dot conf so this is simply the
11:30 - configuration file for our mongodb
11:32 - database what we're going to do here is
11:34 - once we press enter
11:36 - we're going to actually just make sure
11:37 - that this is listening on the right i p
11:39 - address and then
11:40 - enable authorization sorry to make sure
11:43 - that we can't access this database
11:45 - unless we're an authorized user
11:47 - by default uh we off authorization is
11:50 - not enabled so we have to enable it
11:52 - so first thing we're going to do is
11:53 - we're just going to use the arrow keys
11:54 - on our keyboard to go down and move to
11:56 - where the net section is where it says
11:58 - network interfaces
12:00 - and what we're going to do is change
12:01 - where it says bind ip to say
12:03 - instead of 127.0.0.1
12:06 - 0 000 like that so 0.0.0.0
12:12 - what this is saying is bind rip to our
12:14 - public ip address
12:16 - rather than our local ip address so if
12:19 - we just have it if we left it the way it
12:20 - was
12:21 - what that would mean is we can only
12:22 - access this server if we are
12:24 - on this server so it's like running on
12:26 - the local host if you want to think of
12:28 - it that way
12:29 - obviously we don't want that so we want
12:31 - this to run on the public ip address so
12:33 - we'll change the bind ip to be that
12:35 - next we're going to go to the security
12:37 - page or the security tab or whatever you
12:39 - want to call it
12:40 - notice how there's a little i guess what
12:42 - do you call this number sign here at
12:43 - pound sign
12:44 - we're just going to delete that and then
12:46 - under security
12:47 - we're going to type authorization so off
12:50 - oops
12:50 - let's not tab all the way in we're going
12:52 - to type two spaces sorry and then
12:54 - off oriezation
12:57 - make sure you spell it correctly and
12:59 - we're simply going to say
13:01 - enabled like that and actually
13:04 - i have to put enabled in quotation marks
13:06 - my apologies
13:07 - just checked that but authorization and
13:10 - then colon
13:11 - enabled so what this is going to do is
13:12 - make sure that we cannot access the
13:14 - database again
13:15 - unless we are authenticated and we will
13:17 - use the user we just created
13:19 - to authenticate all right so to save
13:21 - this you're going to type
13:22 - control x on your keyboard
13:25 - like that and then you're going to
13:26 - simply press y
13:28 - next you can press enter to say yes this
13:30 - is the file name i want to save it to
13:32 - and then it should save last thing we
13:35 - need to do is
13:35 - restart mongodb and then we can get out
13:37 - of this server and start writing some
13:39 - code
13:39 - so to restart mongodb we're going to
13:42 - type sudo
13:43 - service d and
13:46 - then restart like that so give this a
13:49 - second
13:50 - it will restart the mongodb service now
13:52 - we can actually close putty and get out
13:54 - of it
13:55 - and we can go ahead and connect to this
13:56 - from some python code
13:58 - all right so we've almost reached the
13:59 - coding part there's one more thing we
14:01 - need to do
14:02 - which is install what's known as like an
14:04 - engine or a driver for mongodb
14:06 - usually mongodb works with javascript
14:09 - but since we're going to be using it
14:10 - with python
14:11 - what we need to do is install module
14:13 - called pi
14:14 - so what what we'll have to do is go into
14:17 - our command prompt or terminal if we're
14:18 - on windows or linux or mac
14:20 - obviously the appropriate one for that
14:22 - we're going to type pip
14:24 - install pi now of course you need
14:27 - python installed on your system for this
14:29 - to work i'm going to assume you have
14:30 - that already
14:31 - if you are on windows this is the
14:33 - command you want to type if you're on
14:34 - mac you want to type
14:35 - pip 3 install pi and if you're on
14:38 - linux it will be pip3
14:40 - as well so go ahead and type that press
14:43 - enter
14:44 - you'll see for me it's already installed
14:46 - but if for some reason this command does
14:47 - not work for you that means you don't
14:49 - have pip installed or it's not on your
14:51 - system path
14:52 - so what i will do is i will leave a link
14:54 - in the description
14:55 - as well as a card in the top i believe
14:57 - it'll be left hand corner i think i'm
14:59 - pointing to the right one
15:00 - and you will see a link that says how to
15:03 - install pygame
15:04 - don't worry you can follow along with
15:06 - that video and it will show you how to
15:07 - fix your pip
15:08 - and instead of typing pygame you're just
15:10 - going to type pi
15:12 -  so pi is obviously the
15:13 - module we want to be installed
15:15 - anyways follow along with that once that
15:17 - is installed in your python
15:19 - interpreter or your python version we're
15:21 - going to open up a new python file i'm
15:23 - going to use vs code for this tutorial
15:24 - but you can use whatever you want
15:26 - and we're simply going to type import
15:28 - pie game like that
15:30 - or sorry what am i saying pie game
15:31 - import find i've been using pi
15:33 - game too much recently
15:35 - now what we're going to do is just press
15:36 - the run button here and just make sure
15:38 - that everything runs we don't get any
15:40 - errors and if you've made it this far
15:42 - then we are good to go and we can now
15:44 - connect to our server
15:46 - so remember i said keep track of that
15:47 - server ip address don't worry if you
15:49 - forgot it you can go back to the node
15:51 - website and grab it in fact i might have
15:53 - to do that in one
15:54 - second but what we're going to do is
15:55 - import pie and then we're going to
15:57 - say client
15:58 - equals pie dot
16:01 -  client like that and inside of
16:04 - here we're going to type kind of a url
16:06 - that will allow us to connect to our
16:08 - server so let me grab my server ip
16:09 - address which i need and then i'll show
16:11 - you how we
16:12 - put the url in and how we connect all
16:14 - right so i got my ip address
16:16 - now what i'm going to do is i just put
16:18 - in a variable here just to store it for
16:19 - right now
16:20 - i'm going to show you how we type in
16:21 - this url so to connect what we're going
16:23 - to do is inside of this right here
16:25 - instead of client
16:26 - we're going to type db colon
16:30 - slash slash we're going to type our
16:32 - username for the user we just created
16:34 - which in this case is tim for me we're
16:36 - going to type colon
16:38 - the password for that user my password
16:41 - was tim
16:41 - i just kept it the same as the username
16:43 - we're going to type the at sign
16:45 - and then we're going to put this ip
16:46 - address in afterwards
16:48 - and then we can simply do a slash and we
16:51 - should be good to go
16:52 - this is all we need to do to actually
16:54 - connect to our remote
16:56 - mongodb server so we just go mongodb
16:59 - colon slash
17:00 - tim which is our username colon tim
17:03 - which is the
17:04 - password for that user and then at
17:07 - and the ip address of our server that
17:09 - you can get from lenode
17:12 - followed by one more slash and that
17:13 - should be all we need
17:15 - so what we can do now is simply press
17:17 - run and make sure that this works if you
17:19 - don't get any errors we should be
17:20 - working everything should be
17:21 - functioning fine and now what we're
17:23 - going to do is actually create a
17:24 - database
17:26 - create a collection and create some
17:28 - documents
17:29 - so this brings me into the first thing i
17:30 - need to explain about mongodb
17:32 - rather than having tables and schemas
17:35 - and all the stuff you may have in other
17:36 - database systems
17:37 - there's three main things that we talk
17:39 - about here in mongodb
17:40 - the first is a database a database can
17:43 - store
17:44 - multiple tables if you want to think of
17:46 - it as an sql database
17:48 - but really what a table is referred to
17:50 - in mongodb which is just a collection of
17:52 - a certain type of data
17:53 - is a collection so it actually makes
17:55 - sense to be called a collection
17:57 - but you can think of the hierarchy like
17:58 - database so
18:00 - a database like that collection
18:03 - and then underneath collection we have
18:06 - what's known as
18:07 - documents so one database can store
18:10 - multiple collections and the documents
18:12 - are actually the pieces of information
18:14 - that are in each collection so maybe we
18:16 - have a collection for our purpose called
18:18 - cars right then inside of cars we would
18:21 - have all of the information relating to
18:23 - a specific car
18:24 - and that'd be stored inside of the
18:25 - documents right so each document would
18:27 - store one car
18:28 - the collection stores all of the cars
18:30 - and the database stores everything
18:32 - related to the dealership
18:34 - so we'll have some other collections in
18:35 - here maybe like our customers maybe like
18:37 - any purchase orders or anything like
18:39 - that right
18:40 - that is kind of the way that this works
18:42 - so the first thing we need to do is we
18:44 - need to create a database
18:46 - so to create a database is actually
18:47 - really easy i'm going to say db
18:50 - equals and then client open two brackets
18:53 - like this
18:54 - and inside of here i'm going to type the
18:56 - name of my database
18:57 - so what do i want i want to name my
19:00 - database dealership
19:01 - you need to name it this because again
19:03 - we added the permissions for our user
19:05 - to read and write to the database
19:07 - dealership and then
19:09 - let's run this and see what happens all
19:11 - right so nothing went wrong
19:12 - we should have technically created this
19:14 - database when we just wrote that line
19:17 - i know this is like how did you just
19:18 - create a database doing that but the way
19:20 - it works is that if we say
19:21 - client which is just the mongodb client
19:24 - and then we
19:24 - put brackets like this what it's saying
19:26 - is okay does a database exist called
19:29 - dealership
19:29 - if it does access that database if it
19:32 - doesn't create
19:33 - a new one so we're saying db equals
19:35 - client
19:36 - dealership next what i want to do is
19:38 - create a collection
19:40 - so remember we can have multiple
19:41 - collections inside of each of our
19:43 - databases
19:44 - so i'm going to have three collections
19:46 - and what i'm going to do for this
19:47 - project
19:48 - is i'm going to have cars i'm going to
19:50 - have customers and i'm going to have
19:52 - purchases so essentially a purchase will
19:54 - link a car to a customer
19:56 - and then obviously a car and a customer
19:58 - pretty straightforward
19:59 - so i'm going to say cars equals sorry
20:03 - db and then inside of here i'm simply
20:06 - going to call the collection
20:07 - cars so now we have a reference to the
20:09 - database
20:10 - and this works the same way we want to
20:11 - create a collection we just add our
20:13 - braces like this
20:14 - it says okay does this collection exist
20:16 - if it does access it
20:17 - otherwise create one so cars equals db
20:20 - cars we're going to say customers
20:24 - equals db
20:27 - customers and then finally we're going
20:29 - to say purchases equals db
20:32 - purchases now technically these
20:35 - collections
20:36 - will not be created until we insert a
20:39 - document
20:40 - into them so i just want to show you how
20:42 - we insert something in
20:43 - really quickly i know i'm kind of
20:44 - skipping through a few things because we
20:46 - need to actually create the collection
20:48 - and then i can prove to you that
20:49 - it was created because we inserted
20:51 - something so a document
20:53 - is simply some kind of dictionary so if
20:55 - we're thinking about python
20:56 - if we have a dictionary like this a
20:58 - document is really just key value pairs
21:00 - so it's
21:00 - key and then value like that
21:04 - the key can be whatever we want the keys
21:06 - do not need to be the same in all of the
21:07 - documents that are in the same
21:09 - collection
21:10 - but we just have some key and then some
21:12 - value associated with that key
21:14 - so if we were talking about cars we
21:15 - might have something like the
21:17 - make right and then maybe that's equal
21:19 - to say
21:21 - ford right or honda or mazda or whatever
21:23 - it may be
21:24 - and then we would have a model and maybe
21:27 - that's equal to you know the for
21:29 - edge or whatever it's going to be that's
21:31 - kind of how we create a document
21:33 - so let me show you first of all how we
21:34 - insert something and we'll just insert
21:36 - something into the car's
21:37 - collection so i'm going to say cars dot
21:40 - insert
21:41 - underscore many or sorry not instruct
21:43 - many insert one
21:45 - that's leading to what we'll do next but
21:47 - cars.insert1 and then
21:49 - inside of here what i'm going to do is
21:50 - i'm going to put a document so to create
21:52 - a document i just open up a dictionary
21:54 - and now what i need to do is add the key
21:56 - value pairs so
21:58 - we'll delete this one after but i'm just
22:00 - going to say make and then i'll say this
22:01 - is a ford
22:02 - and then i'll say model and this
22:06 - is an edge all right so we'll insert one
22:09 - you're not going to see anything happen
22:10 - but let's just insert one and see if we
22:12 - get any problems
22:13 - we don't that's awesome all right so now
22:15 - that we inserted something into the cars
22:17 - collection let's see how we can actually
22:19 - retrieve it and look at it
22:21 - so to look at something in mongodb what
22:23 - we can do is instead of cars.insert
22:26 - we can say cars.find so i'll get into
22:29 - this in more detail in a second
22:30 - but if i want to look at all of the
22:32 - entries in a certain collection or all
22:34 - of the documents in a certain collection
22:36 - i simply just put an open document like
22:38 - this so just
22:39 - open braces because what we could do
22:41 - inside of here is add what we call a
22:43 - filter
22:44 - or yeah i guess a filter is the best way
22:46 - to say it or a query if you want to put
22:48 - it that way
22:48 - and that means we'll only look for
22:50 - documents that match
22:52 - what we put inside of here so
22:53 - technically if we pass an empty document
22:56 - everything will match an empty document
22:58 - because everything is a document right
23:00 - if if that makes any sense but if i were
23:02 - to put in here say like
23:03 - make colon and then forward this would
23:06 - only return to me cars that have the
23:09 - make that is equal to ford
23:10 - so again we'll get into that later but i
23:12 - just want to show you how we can look at
23:14 - something
23:14 - so that we can prove that it's actually
23:16 - in here so result equals cars.find
23:19 - and then i'm going to print result like
23:21 - that so let's
23:22 - run this and you can see that if we have
23:24 - a look here we get
23:27 - piemongo.cursor.cursor object
23:29 - at some memory location so obviously
23:31 - that's gibberish to us that doesn't mean
23:33 - very much
23:33 - so what we need to do is actually figure
23:35 - out okay well this returned to us
23:37 - something but how can i see what that is
23:39 - so since this actually returns to us a
23:42 - cursor which we just saw
23:44 - what we need to do is actually iterate
23:46 - over that cursor if we want to get all
23:48 - of the values that are from it right so
23:50 - i clearly can't just print
23:51 - result what i need to do is actually
23:53 - loop over it and then what i can do is
23:56 - look at all of those results and do
23:57 - something with those in my python code
23:59 - so what i can do is say for results in
24:02 - and this should really say results
24:04 - because there could technically be
24:06 - multiple things here if we had inserted
24:08 - multiple documents
24:09 - and now what i can do is print
24:13 - the result so let's run this now and
24:16 - notice i know it's popping up small here
24:18 - we have this document that tells us an
24:21 - id
24:21 - a make and a model and notice this is
24:24 - the make and model that we
24:26 - inserted so that is kind of the basics
24:28 - on how you grab
24:29 - and how you insert something obviously
24:31 - i'm going to go into more in depth
24:32 - and first though what i want to cover is
24:34 - this thing called id
24:36 - so notice that there's this underscore
24:37 - id it's equal to an
24:39 - object id what that is telling us is
24:42 - this is the unique identifier for this
24:44 - document
24:45 - so every time we insert something into a
24:48 - collection
24:48 - it needs to have a unique id now we can
24:51 - set the id
24:52 - ourself if we want or what we can do is
24:55 - simply just let mongodb
24:57 - do it for us so if when i inserted
24:59 - something
25:00 - i actually added a field that said
25:04 - underscore id then that id that you just
25:07 - saw here would be overwritten with
25:09 - whatever we passed it
25:10 - but since we didn't give it the actual
25:12 - id it just automatically generated one
25:14 - for us
25:15 - so that's actually a benefit of using
25:17 - mongodb and inserting it like that it
25:19 - can just generate the id for us
25:21 - but obviously if we want we can override
25:23 - the id and have it be like id1
25:25 - id2 as long as it's unique and there's
25:28 - not going to be something else that's
25:29 - inserted with the same id
25:31 - no problem we're good to go and of
25:33 - course the reason we need a unique id is
25:35 - because
25:36 - we need a way to differentiate documents
25:38 - even if they have the same information
25:40 - in them so what i'm going to show you
25:41 - now is actually a tool we can use to
25:42 - view our databases and collections and
25:44 - documents
25:45 - so we don't have to keep running these
25:46 - manual queries when we insert something
25:48 - in the database
25:49 - so what you can do is go to the link in
25:51 - the description it's called mongodb
25:53 - compass
25:54 - and this is just a really cool tool it's
25:55 - made by mongodb themself
25:57 - and allows us again to connect to the
25:58 - database and then just view it
26:00 - so select whatever version you want i'm
26:02 - going to go with just the windows
26:04 - 64 bit 7 plus the exe version
26:07 - and press download now mine's actually
26:09 - already downloaded so i'll cancel that
26:11 - but once you guys finish the download
26:12 - then obviously come back and we're going
26:14 - to open up that tool and i'll show you
26:15 - how it works
26:16 - all right so once you open up the tool
26:17 - all we actually need to do
26:19 - is just grab the url that we use to
26:21 - connect here from our code
26:23 - except we don't want the quotation marks
26:25 - this time obviously
26:26 - and we're just going to pass it in here
26:28 - so just do control v
26:30 - and you can see that we'll just have
26:31 - mongodb colon slash
26:33 - and then username password so username
26:36 - colon password
26:37 - at and then the ip address that it's at
26:39 - we'll press connect
26:40 - that should authenticate us and you can
26:42 - see all of the databases that we have
26:44 - notice you can actually create stuff
26:46 - from here as well so you can mess around
26:48 - and just
26:49 - actually create kind of some data if you
26:51 - wanted to query it on your own or
26:52 - something like that
26:53 - but anyways i'm going to press on
26:54 - dealership notice we have a collection
26:57 - called cars
26:58 - note that even though i made customers
26:59 - and purchases there's no collection
27:01 - there yet simply because we haven't
27:03 - added a document
27:04 - into the collection so it was not
27:06 - created all right so now i'm going to
27:08 - press on cars
27:09 - and when we go inside here we can see
27:11 - that car object that we made
27:12 - we have make forward and model edge so
27:15 - we'll use this tool i'm going to leave
27:16 - it open in the background just so that
27:18 - we can check what's happening with our
27:19 - database
27:20 - when we start performing some of these
27:21 - operations all right so i've showed you
27:23 - how to add something in
27:25 - i've talked about what a document is i
27:27 - want to be very clear
27:28 - that when we create documents and we put
27:31 - them inside of a collection
27:32 - they don't need to be the same so if you
27:35 - were looking at like
27:36 - a standard sql database every single
27:39 - document that you would put in there
27:40 - every single
27:41 - entry or row had to look the same
27:43 - meaning it had to have the same amount
27:45 - of columns
27:46 - it had to have a certain type of
27:48 - information
27:49 - it's what's known as a schema that was
27:51 - being enforced on the data you were
27:53 - sending in
27:54 - now with mongodb that is not the case we
27:56 - can store
27:57 - anything we want in the collections so
27:59 - that's good
28:00 - and that's bad but just keep that in
28:02 - mind
28:04 - so what i want to do right now is i
28:05 - actually want to add three
28:07 - functions inside of here that let us add
28:09 - information to the cars database the
28:11 - customers database
28:12 - and the purchases database so i'm going
28:14 - to go through this quickly because it's
28:16 - pretty straightforward but first we're
28:17 - going to say define
28:18 - add cars and what i'm going to do is
28:20 - pretty much define what i want the cars
28:22 - database or cars collection to look like
28:25 - so what keys do i want in there what
28:27 - values do i want in there
28:29 - well what i want is i want a make i want
28:31 - a model
28:32 - i want the year of the car i want the
28:35 - engine
28:36 - horsepower we'll just put a lot of stats
28:39 - here so it's interesting later on when
28:41 - we do some queries
28:42 - i'm going to go with the vehicle
28:44 - actually no i don't want to do that one
28:45 - let's do make model year engine
28:48 - horsepower
28:49 - msrp meaning the price of it and then
28:51 - we'll add
28:52 - a actually that's all we need for right
28:54 - now okay so these are the few things
28:56 - that we're going to have to pass
28:58 - to add cars or add car when we want to
29:01 - create a new vehicle in our database
29:03 - now what we'll do in here is we'll say
29:05 - document
29:06 - equals and we'll actually just make the
29:08 - document and then we'll insert it on the
29:10 - next line
29:11 - so what i'm going to do is i'm going to
29:12 - say make colon make
29:14 - i'm going to say model inside of
29:17 - quotation marks with the capital so it's
29:19 - nice and formatted
29:20 - model colon model we're going to say
29:24 - year colon year and
29:27 - oops your colon year i'm going to say
29:30 - engine horsepower colon
29:33 - and then engine horsepower and you get
29:36 - the point we're going to say msrp
29:38 - colon msrp
29:42 - now actually this probably shouldn't be
29:44 - capitals we're going to make this
29:45 - lowercase just to make this proper
29:49 - msrp and finally what i'm going to do is
29:51 - i'm going to say
29:52 - date added like that colon and i'm going
29:55 - to import at the top of my program
29:58 - date time so this is built into python
30:01 - you don't need to install it
30:02 - but import date time and then here we're
30:04 - going to say datetime.datetime.now
30:06 - this is simply going to give us the
30:08 - current date so we can tell
30:10 - when we actually added this entry to the
30:11 - database
30:13 - next what we're going to say is well
30:15 - what collection do we want to insert
30:16 - this into
30:17 - cars so we're going to say cars dot
30:20 - insert
30:22 - and underscore one and we'll simply put
30:24 - the document that we just uh created in
30:27 - there
30:27 - and in fact we're actually going to
30:28 - return this and the reason for that is
30:31 - that this will return to us
30:32 - some kind of object that tells us about
30:34 - the status of what we just inserted
30:37 - the most important thing is it actually
30:39 - allows us to type the following so say i
30:41 - said
30:42 - car equals add car and i added all my
30:45 - entries
30:46 - i could type car dot inserted underscore
30:49 - id
30:50 - and this would tell me the id of this
30:53 - document that i just inserted
30:55 - the reason that's important is because
30:56 - we didn't set the id so we don't know it
30:59 - so if we want the id we have to return
31:02 - to this value
31:03 - which will give us the id of whatever we
31:05 - just inserted if we call
31:07 - dot insert id on it hope that makes
31:10 - sense but
31:11 - that's the basis of this function next
31:14 - what we're going to do is we're going to
31:15 - create
31:16 - the customer function
31:19 - so define add customer i'm going to say
31:23 - first underscore name last name
31:26 - and dob which stands for date of birth
31:29 - for our customer database or a customer
31:31 - collection i'm just going to have it so
31:32 - we have their first name last name and
31:34 - date of birth
31:35 - we obviously can add more but since this
31:37 - is a tutorial i'm not going to go crazy
31:39 - with all of the fields
31:40 - so i'll say document equals and then i'm
31:43 - going to say
31:44 - first name colon first
31:48 - underscore name i'm gonna say last
31:52 - name colon last name i'm gonna say
31:57 - date of birth is d-o-b and then finally
32:01 - i'm going to say date added and i'm
32:02 - going to add the same thing that we had
32:04 - up here
32:05 - so datetime.datetime.now
32:08 - all right so i hopefully get the hang of
32:09 - this next we're going to add a purchase
32:11 - and i'm going to talk now about what
32:13 - we're going to do with this purchase um
32:15 - what do you want to call it document
32:17 - collection and so on all right so now we
32:19 - need to talk about what a purchase
32:21 - actually is and how we're going to kind
32:22 - of set up this collection
32:24 - so essentially what i want to do with
32:26 - the purchase collection is i want to be
32:27 - able to link a customer to all of the
32:30 - cars that it's purchased
32:31 - now remember that each document that we
32:34 - add has a unique id
32:35 - and that's unique within the collection
32:38 - so technically if i have an id for a car
32:40 - and i have an id for a customer if i can
32:43 - somehow store those together
32:45 - i can determine that a certain car was
32:47 - bought by a certain customer
32:49 - that a certain car was like or that a
32:52 - certain customer bought
32:53 - a certain car so the other way around
32:54 - obviously now some people
32:56 - what they might do if you're familiar
32:58 - with other databases is they might do
32:59 - something like okay
33:00 - let's just add a field to customers that
33:03 - says purchases
33:04 - and inside of here what we'll do is
33:06 - we'll just store a list
33:07 - of all of the cars that the customer
33:09 - purchased now that
33:11 - would work technically if we wanted to
33:13 - figure out what cars customer purchased
33:15 - and store that on the customer
33:17 - the reason that might not be the best
33:18 - thing to do is because if we have
33:20 - any other information relating to the
33:22 - purchase of the car
33:24 - say like how much they have on financing
33:27 - how much money they put down
33:29 - what method of purchase they did when
33:31 - they bought the car
33:32 - it's going to be tough to store all of
33:33 - that within the customer and it doesn't
33:35 - really make sense
33:36 - to have the customer collection itself
33:39 - storing anything
33:40 - other than information about the
33:42 - customer so what we'll do instead
33:44 - is we'll simply create a purchases
33:46 - collection
33:47 - and inside of the purchases collection
33:49 - we will have a document that has the id
33:52 - of the car
33:53 - the id of the customer and then any
33:55 - other information we want associated
33:57 - with the purchase
33:58 - so let me show you what i mean before
34:00 - the parameters here i'm going to say car
34:02 - id
34:04 - customer underscore id and then method
34:07 - now method is just going to stand for
34:09 - method of payment i'm just kind of
34:10 - making up some fields so that we have
34:12 - some more information inside of here
34:14 - obviously this would usually be
34:15 - much larger but hopefully you're getting
34:17 - the point so what i'm going to do is say
34:19 - car id
34:20 - colon car underscore id and i'll explain
34:22 - this more thoroughly in a second
34:25 - customer id colon customer id
34:30 - and then method
34:34 - like this is equal to method all right
34:37 - and then finally we'll say date so like
34:40 - the date that this happened and this was
34:42 - purchased
34:43 - and we can simply just add i don't know
34:45 - why i needed to scroll up for that
34:49 - datetime.datetime.now great so then what
34:52 - we'll do is we'll do the same thing
34:53 - we'll
34:53 - insert this in and in fact i forgot to
34:55 - insert it inside a customer so we'll do
34:57 - that in one second
34:58 - we're going to say purchases dot insert
35:01 - one
35:02 - document and then return that and just
35:04 - finish this off up here
35:06 - return customers dot insert one
35:09 - document great so the way this is gonna
35:12 - work is we're gonna take an id
35:14 - of a document that's a customer right
35:16 - and a document that's a
35:17 - car we're going to store that inside of
35:20 - the purchase and then we're going to
35:21 - store the method and the date
35:23 - this way if we ever want to check what
35:25 - cars a customer has purchased we can
35:27 - look through all of the purchases
35:28 - and just check if the customer id of
35:30 - that purchase is equal to the customer
35:32 - that we're looking at
35:33 - and in the next video what i will do is
35:35 - i will discuss how we can do that and
35:37 - go through some more advanced queries
35:38 - and stuff like that but that is the
35:40 - basis for adding all of these things in
35:42 - and hopefully that's kind of making
35:44 - sense so what i'll do now is i'm going
35:46 - to add a customer and i'll add a
35:47 - purchase and i'll kind of show you what
35:49 - i mean
35:49 - all right so now let's add a customer
35:51 - and let's add a purchase and let's make
35:53 - sure everything is working
35:54 - in fact what i'm actually going to do is
35:56 - add another car you'll see why it's just
35:57 - going to make
35:58 - some things simpler for us i'm going to
35:59 - say car equals add underscore car
36:02 - and then what's the information we need
36:03 - we want the make model year engine
36:05 - horsepower and msrp
36:07 - so let's say the make is going to be a
36:11 - mazda let's say the model is a cx-5
36:15 - uh what else do we need we need year
36:18 - engine horsepower msrp let's go
36:20 - 2020 let's go horsepower 250
36:23 - and let's go with msrp of 45 000.
36:27 - i have no idea if that's correct but
36:29 - let's just do that
36:30 - next let's add a customer and a purchase
36:32 - let's go customer
36:34 - underscore yeah customer equals
36:38 - add underscore customer let's give it a
36:40 - name
36:41 - tim tech for the last name and
36:44 - then for date of birth let's go july
36:48 - 20th 2000
36:49 - that is actually my birthday and then
36:51 - we'll go with purchase
36:55 - equals add underscore purchase
36:58 - and now what we need to do is we need to
37:00 - add the id of the car
37:01 - the id of the customer and the method
37:04 - now fortunately for us
37:05 - what we can do is we can simply say car
37:09 - dot inserted id
37:10 - because we just inserted it so we can
37:12 - grab the id we can say customer
37:14 - dot inserted id and we can say method
37:17 - the method of payment i'll just make it
37:18 - up and say
37:19 - cash all right so now these technically
37:21 - should be added
37:23 - into our database i'm going to hop over
37:25 - to the other tool after i run this
37:27 - so let's run it now and make sure that
37:29 - that worked all right so i'm over here i
37:31 - just pressed the refresh button to
37:32 - refresh
37:33 - the database here and you can see that
37:35 - now we have those other collections so
37:37 - customers and purchases
37:38 - if i go in customers we can see the
37:40 - customer i just added if i go in
37:41 - purchases we can see
37:43 - the car id customer id method and the
37:45 - date that was added
37:46 - if i go to cars we can see the two cars
37:49 - that we have
37:50 - so that is again how we actually insert
37:52 - all of this stuff
37:53 - now i quickly show you how we can
37:55 - actually delete stuff
37:56 - and then how we can update stuff all
37:59 - right so to learn about updating and
38:01 - deleting i need to quickly cover a basic
38:03 - kind of querying thing which i've
38:05 - already shown a little bit
38:06 - but essentially the way that we get
38:08 - specific data from this database
38:10 - is we'll use the collection so we'll say
38:12 - cars we'll say dot find
38:15 - and you could say dot find underscore
38:16 - one that's fine that will just give you
38:18 - the first one that pops up
38:20 - in the query that we find you can use
38:21 - some other ones find one and delete find
38:24 - one and replace
38:25 - there's all kinds of methods we can use
38:26 - so if i show you one that you haven't
38:28 - seen before or you think of another way
38:29 - it doesn't necessarily mean that's wrong
38:31 - it's just another way to do it
38:32 - but typically what i do is i say
38:34 - cars.find
38:36 - and then inside of here what i will do
38:38 - is have a collection and i will simply
38:40 - put
38:40 - the filters that i want to find so if i
38:42 - only want to look for cars that are the
38:44 - make of
38:45 - mazda then i would do this i would say
38:46 - make masta now if i wanted all the cars
38:49 - that were the make of mazda
38:50 - and the model of cx3
38:54 - then i would say model comma cx3
38:58 - now what this next parameter is there's
39:01 - two parameters to find here
39:02 - what it allows you to do is not only to
39:05 - filter what you want to look for
39:06 - but to filter the columns that you want
39:08 - to be returned so what you can do is you
39:10 - can add another
39:11 - set of brackets here and then you can
39:13 - simply say okay i want the make
39:15 - column so if you want the make column
39:17 - you would say make colon one which
39:19 - stands for yes i want this column
39:21 - you would say okay i also want the model
39:24 - column so i'd say model
39:26 - colon one and then any other columns you
39:28 - don't mention
39:29 - other than the id column will
39:30 - automatically not be given back to you
39:33 - which means it will return to you
39:34 - only the make and the model of whatever
39:37 - cars you find as well as the id
39:39 - now this is kind of tricky because the
39:40 - way they set this up is strange
39:42 - you can't technically like write make 0
39:45 - model 1
39:46 - what that would mean is just give me the
39:48 - model column because model has the one
39:49 - beside it a 0 means
39:51 - don't give me that you can only use
39:54 - ones or zeros so i say i wanted all the
39:56 - columns except
39:57 - make and model then i would go make 0
39:59 - model 0 it would give me
40:01 - everything else other than make and
40:02 - model now the only exception to this
40:05 - is that if you add the underscore id
40:07 - field which is on every single um
40:10 - what do you call a document you can
40:11 - change this to be zero or one
40:13 - and that doesn't mean that the make and
40:15 - model have to
40:16 - change right so i could do something
40:17 - like id 0
40:19 - and then 1 1 which means just give me
40:22 - the make and model
40:24 - don't include the id now if i said id1
40:27 - and i said make 0 model 0
40:31 - that means i'm just going to get the id
40:34 - and all the other columns
40:35 - except the make and model hopefully that
40:37 - makes sense you can mess around with it
40:39 - but anyways that's kind of how you find
40:40 - stuff
40:41 - so i'm going to say cars.find that's how
40:43 - we query and if i run over that like
40:45 - we've seen it'll give me all the
40:47 - documents that are like that now if i
40:48 - want to remove something
40:50 - it's the same thing so i say cars.remove
40:53 - and what this will do is remove any
40:55 - documents that fit this description so
40:57 - let's actually just do it with not the
40:59 - mazda but let's do it with the ford
41:01 - so let's say ford and let's say edge
41:04 - and let me just run this and cars.remove
41:08 - is deprecated oh sorry it's not removed
41:10 - my bad guys it is
41:11 - delete so i can say delete one
41:14 - and what this will do is delete only one
41:16 - entry that has this so if it finds this
41:19 - whenever it finds this
41:21 - whether it's going like from top to
41:22 - bottom or however it's searching it will
41:24 - just delete the first one it finds
41:26 - and if i go delete many this will delete
41:28 - anything
41:29 - that is um that fits this description so
41:32 - hopefully that makes sense this
41:34 - also returns an object so i can say
41:36 - result equals cars.delete many
41:38 - and then i could say result dot deleted
41:41 - count and that will tell me how many
41:42 - things have been deleted
41:44 - i think there's also a deleted ids
41:47 - maybe not maybe it's just deleted count
41:49 - that's telling you how many things were
41:50 - removed
41:51 - anyways let's just run this with delete
41:53 - many and see if this works
41:55 - seems to have worked i'm going to go
41:57 - back to the tool here refresh
41:59 - my cars and notice that the forward is
42:03 - gone for some reason there's three
42:04 - masses i think i might have accidentally
42:06 - ran that code
42:07 - to create the masses multiple times but
42:09 - you notice that that forward edge
42:11 - is now gone all right oh yeah that's
42:13 - because these are all here and i didn't
42:14 - delete it and i was running this a few
42:16 - times but anyways you get the point
42:17 - that's how you delete
42:19 - all right now i'm going to show you how
42:20 - we can update so instead of doing delete
42:22 - many you can say
42:25 - update many you can pick what you want
42:28 - to update so in this case i want to
42:29 - update anything that matches
42:31 - this criteria and then this one's kind
42:34 - of weird
42:34 - what you have to use is this like little
42:36 - set thing so you do a dollar sign and
42:38 - then
42:39 - set and what this is saying is okay i
42:41 - want to set this
42:42 - attribute to be this value now there's a
42:44 - lot more of these as well that you can
42:45 - use but i'm not going to talk about them
42:47 - here
42:47 - so i'm going to say set and then inside
42:49 - of another set of curly braces
42:51 - i'm going to go all right what do i want
42:53 - to update so in this case
42:54 - maybe i want to change the and i'll have
42:57 - to change this to be a mazda
42:59 - maybe i want to change the make of all
43:02 - the mazda cx-3s to be
43:05 - a forward i know this obviously doesn't
43:07 - make any sense but let's just do that so
43:08 - let's say make
43:10 - and then colon and we're just going to
43:11 - put this as ford
43:13 - so that is saying set this column to be
43:16 - this so let's actually try that and just
43:19 - see if this works
43:20 - all right so it doesn't look like
43:21 - anything went wrong let's refresh this
43:24 - and let's see and since i have cx5 here
43:27 - and i put
43:28 - cx3 there obviously that's going to be
43:30 - wrong so let's change this to cx5
43:32 - and let's run this now and let's have a
43:35 - look
43:35 - and refresh and we can see that now the
43:38 - make of all of these has been changed to
43:40 - ford so of course you can set more than
43:42 - one thing inside of here i can
43:44 - change the model as well so i could say
43:45 - model colon and then change this to just
43:48 - be an edge so we're changing all of that
43:49 - to be a ford edge in fact let's just run
43:51 - that
43:52 - and see if that updates and well it's
43:55 - because now
43:56 - the make is no longer mazda so i have to
43:58 - change this story to be afford
44:00 - that's why that wasn't working now if we
44:02 - actually query the right thing and
44:04 - update it
44:05 - and refresh we can see that the model
44:08 - has been changed to an
44:09 - edge so that is the basic operations in
44:12 - mongodb
44:13 - that's how you update that's how you
44:15 - delete that's how you add
44:17 - and in the next video we're going to
44:19 - actually add more to this project
44:20 - to add some kind of like user interface
44:23 - and allow people to actually won't
44:24 - really be a user interface it'll be more
44:26 - of like a text console
44:27 - that will allow people to kind of query
44:29 - through cars we'll add a bunch more cars
44:31 - and we'll do
44:32 - um some other more interesting stuff
44:34 - with the database like some more
44:35 - advanced queries
44:36 - some more advanced updates deletes and
44:38 - just everything you would probably need
44:39 - to do in a project i'll be showing that
44:41 - in the next video
44:42 - so i apologize that this was long i
44:44 - really did want to go over everything
44:45 - and make sure you guys understand
44:47 - as well as really focus on setting up
44:48 - this server so you guys could
44:49 - authenticate and connect
44:51 - and be able to use this in a real
44:52 - production application so if you guys
44:54 - enjoyed make sure you leave a like
44:56 - and subscribe look out for the next
44:58 - video reminder that there is a live
45:00 - event running on september 29th
45:02 - that is kind of what the next video is
45:04 - going to be i'm going to be recording
45:05 - that live event that's
45:07 - hosted by lenode you guys can check all
45:09 - the details related to that in the
45:10 - description
45:11 - and then i will be taking that recording
45:13 - and i will be posting that on youtube so
45:15 - you guys can kind of feel like you were
45:17 - at the live event
45:18 - even if you are not able to make it so
45:20 - anyways if you enjoyed of course
45:21 - like subscribe i will see you in the
45:23 - next one