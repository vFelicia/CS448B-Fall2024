00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video in today's video i will be
00:13 - showing you how to make an api in go now
00:16 - specifically we're going to be using a
00:18 - framework called jin this is a high
00:20 - performance and relatively simple web
00:22 - framework that allows us to very quickly
00:24 - design and create an api in go now
00:27 - before i get into the actual content
00:28 - here and start writing any code i just
00:30 - want to give you some prerequisites
00:32 - because this tutorial is not for
00:34 - absolute beginners so i'm going to
00:36 - assume that you have some familiarity
00:37 - with go if you do not and you want to
00:39 - learn go i have an entire tutorial
00:41 - series on this channel so i'll put
00:43 - something on the screen and there'll be
00:44 - a link in the description to that series
00:46 - but i'm going to assume you have some
00:48 - familiarity with the language and with
00:50 - apis now i will explain a lot of the api
00:52 - concepts like a get request a po post
00:55 - request a response a request but it will
00:58 - be helpful to have some of that
00:59 - knowledge already and that's pretty much
01:01 - it for the prerequisites so with that
01:03 - said let's go ahead and get into the
01:04 - video after a quick word from our
01:07 - sponsor thanks to server pronto for
01:09 - sponsoring this video server pronto
01:11 - provides dedicated bare metal servers
01:13 - and private cloud hosting that you can
01:15 - rely on server pronto's unique data
01:18 - center is a service model that lets you
01:20 - get the benefits of having your own data
01:22 - center like customization full access
01:24 - and the security and reliability of a
01:26 - private environment without the huge
01:28 - upfront investment with server pronto
01:31 - you select the setup that is perfect for
01:32 - your use case and pay a fixed monthly
01:34 - fee with no surprise costs server pronto
01:37 - will even help you set up your server
01:39 - provide 24 7 support give you full root
01:42 - access and personalized solutions
01:44 - whether you're building the next tech
01:46 - startup deploying a hobby project
01:48 - hosting mission critical business tools
01:50 - or just looking for an affordable place
01:52 - to back up your data server pronto has a
01:54 - solution for you you can get started
01:56 - with server pronto today by clicking the
01:58 - link in the description and get 10 off
02:00 - by using the promo code creator 21.
02:03 - thanks again to server pronto for
02:05 - sponsoring this video now let's get into
02:07 - it alright so let's go ahead and get
02:10 - started now in front of me i have visual
02:12 - studio code this is the editor i'm going
02:14 - to use for this video you can use
02:16 - whatever you want but i will recommend
02:18 - vs code just because of the built-in
02:19 - terminal that's going to be helpful when
02:21 - we're actually testing our api i've also
02:24 - created a go file called main.go you can
02:26 - name it whatever you want but please put
02:28 - it in a folder so i have a folder on my
02:30 - desktop called go api tutorial now you
02:33 - can ignore the vs code it's just storing
02:34 - some settings related to my vs code
02:37 - environment anyways other than that i'm
02:39 - going to assume that you have go
02:41 - installed already and it's all set up on
02:43 - your machine because what we need to do
02:45 - now is install some dependencies for
02:47 - this project specifically the gin
02:49 - framework that i mentioned in the intro
02:51 - so we're going to be using jin high
02:53 - performance high productivity web
02:55 - framework pretty popular in the go
02:57 - community however it's typically for
02:59 - simple apis or simple web applications
03:01 - if you're doing something more advanced
03:03 - there's lots of other frameworks that
03:04 - you can look at but for something like
03:06 - this just a very simple api gin is great
03:08 - so that's why we're going to use it now
03:10 - to install this dependency the first
03:12 - thing we need to do is set up dependency
03:14 - tracking for our go project so to do
03:16 - that i'm going to go to my command line
03:18 - so my terminal or command prompt
03:19 - depending on your operating system i'm
03:21 - going to go inside of the folder where
03:22 - my go
03:23 - file is here
03:25 - i'm going to type the following
03:27 - go mod init and then example slash and
03:30 - then the name of my folder which in this
03:32 - case is go
03:34 - if i can type this correctly api to
03:36 - torque so you can see my folder is go
03:38 - api tutorial and i have go mod init
03:41 - example slash go api tutorial now this
03:44 - is going to create a go.mod file which
03:46 - is going to keep track of the different
03:47 - dependencies now the example here is
03:50 - what i would recommend you use as well
03:52 - usually this is supposed to be the path
03:54 - to where you could download
03:56 - this go package from i don't know
03:58 - exactly how this works but essentially
04:00 - since we're not actually going to be
04:01 - releasing this package for other people
04:03 - to install we just put example and then
04:05 - the name of our folder someone else in
04:08 - the comments can probably clarify
04:09 - exactly why we do this but for now just
04:11 - do example slash and then the name of
04:13 - your folder so i'm going to type enter
04:14 - here and then notice it's going to
04:16 - create a go.mod file you can see it
04:18 - right here all right so now that we've
04:19 - done that we're going to use the go get
04:21 - command to download the dependency that
04:23 - we need which is the gin framework so
04:25 - i'm going to type go get and then this
04:27 - is going to be github dot com slash gin
04:30 - hyphen jonic like that slash and then
04:33 - gym let me make sure this is correct
04:36 - looks good to me i'm going to type enter
04:38 - this is going to take a second
04:40 - once it's finished we should see that it
04:41 - actually installs this framework and
04:43 - then we'll be good to go and we can
04:45 - start writing the uh the go api all
04:47 - right so the gin framework is now
04:49 - installed so what i'm going to do is
04:50 - quickly describe the example we're going
04:52 - to go through here for actually building
04:54 - an api then we'll do all the import
04:56 - statements and everything that we need
04:57 - so for this api i want to build kind of
04:59 - a library api where we store a bunch of
05:02 - books and we're able to check in a book
05:04 - check out a book add books view all the
05:07 - different books get a book by its id all
05:09 - of that kind of stuff that'll give us a
05:10 - few different functions we can write and
05:12 - routes that we can have for our api so
05:14 - to get started i'm going to have my
05:16 - import statements here now i want to
05:18 - have net slash http this is built into
05:21 - go we also want to have the one that we
05:24 - installed so github dot com slash gin
05:28 - jonic
05:29 - jin and then we want to have errors
05:31 - which we'll use later on
05:33 - now we're getting red lines because
05:34 - we're not using these right now that's
05:36 - fine we'll use them later now since
05:38 - we're going to have a library we want to
05:40 - store books now to store our books we're
05:42 - going to use a struct
05:44 - so i'm going to create a type here i'm
05:45 - going to say type book struct
05:48 - and then i'm going to put a bunch of
05:49 - field names here now it's important that
05:51 - the field names start with a capital
05:53 - letter i'll explain this in a second but
05:55 - this will make it an exported field name
05:57 - and for our api we need that so i'm
05:59 - going to say id this is going to be a
06:01 - string i'm going to say title
06:04 - this will be a string as well did i
06:07 - spell title correctly of course i did
06:09 - okay title that's going to be a string
06:11 - we want an author for our book
06:15 - okay this will be a string as well and
06:17 - then lastly we want a quantity because a
06:20 - library probably has like you know two
06:22 - or three versions of the book okay now
06:24 - we'll go with int
06:25 - for that now before we go any further
06:27 - i'm going to add a few things to this
06:29 - struct which are going to allow it to be
06:31 - serialized and converted to json so our
06:34 - api can actually return the struct
06:36 - directly or it can take in kind of the
06:39 - json version of the struct and convert
06:41 - it to a struct in go i know this seems a
06:43 - little bit weird but essentially we're
06:45 - going to be using json for our api so
06:47 - javascript object notation that's kind
06:49 - of the standard thing we use in apis and
06:51 - we're going to be returning that we're
06:52 - also going to be receiving that as data
06:54 - if we wanted to say add a new book
06:57 - so here i need to make sure that this
06:58 - can be kind of represented in json and
07:01 - the way i do that is by adding another
07:03 - uh i don't even know entry here at the
07:05 - end
07:05 - which is going to be the json
07:07 - representation or the json field name
07:10 - for all of these fields in our struct so
07:12 - i'm going to put backticks so backtick
07:14 - json colon then i'm going to put in
07:16 - double quotation marks the lowercase
07:18 - version of this field
07:20 - okay so let's continue here this is
07:22 - going to be json and then
07:25 - title uh it's going to give it to me
07:27 - nice json and then author and then what
07:29 - else do we want json and quantity
07:32 - okay so let's explain this for a second
07:34 - why is this
07:35 - i need the other backtick okay there we
07:37 - go
07:38 - so the reason i have the uppercase names
07:39 - here is because this makes this an
07:41 - exported field and that essentially
07:43 - means that it's a public field or that
07:45 - it can be viewed by modules outside of
07:48 - this module that we're in right now or
07:49 - outside of this go file so that's why i
07:51 - had to make these names uppercase
07:53 - however in our json we want them to be
07:55 - lowercase
07:57 - so we add this field here that
07:59 - essentially says when we are serializing
08:01 - this with json convert this field name
08:04 - to lowercase or if we're taking a json
08:06 - object and turning it into the book
08:08 - struct then we're going to look for the
08:09 - id lowercase field and convert it to the
08:12 - id uppercase field hopefully that makes
08:14 - sense again you need to make sure all of
08:16 - these are capitals so that they're all
08:18 - exported if you want to see what happens
08:19 - if you don't do that
08:21 - then you can make them lowercase and
08:22 - you'll notice that every time you try to
08:23 - return books it's just going to be an
08:25 - empty json object because it wasn't
08:27 - actually able to read all of the
08:29 - different field names from this struct
08:31 - okay
08:32 - i'm hoping that makes sense i understand
08:34 - that might be a little bit confusing now
08:36 - i'm just going to copy in something here
08:38 - which is a list of books or a slice of
08:40 - books uh you can you know pause the
08:42 - video and copy this in if you want also
08:44 - i'll leave the code in the description
08:46 - but we just want to have a data
08:47 - structure that represents all of our
08:49 - different books because for this api
08:51 - we're not going to implement a database
08:52 - we're just going to do all of it in
08:53 - memory now if you had a real api you
08:55 - would use a database but that's kind of
08:57 - beyond the scope of this tutorial so
08:59 - i've just created a slice of the book
09:01 - struct we have a bunch of books here so
09:03 - we have you know in search of lost time
09:05 - the great gatsby war and peace and we
09:07 - have our quantities
09:08 - as well now we're going to allow people
09:10 - to check in and check out the books that
09:12 - will just increase the quantity or
09:13 - decrease the quantity of course i'll
09:15 - show you how to do that okay so now that
09:17 - we've ridden this what we're going to do
09:19 - is write our main function so we're
09:20 - going to say function main now inside of
09:23 - here we're going to set up our router
09:24 - which is going to be responsible for
09:26 - handling different routes and kind of
09:28 - the different endpoints of our api so
09:30 - what i'm going to do is say my router
09:32 - is cool and equal and then this is going
09:34 - to be gin dot default like that let me
09:38 - make sure that's correct okay that looks
09:40 - good now what we can do with the router
09:42 - variable is we can route a specific
09:44 - route to a function so for now i'm going
09:46 - to write a function
09:48 - i'm going to call this function get
09:49 - books and what this is going to do is
09:51 - simply handle the root of getting all of
09:55 - the different books right so it's going
09:56 - to return the json version of all of
09:58 - these books now the way we do that is we
10:01 - need to accept and hear something known
10:02 - as a context i'll explain this in a
10:04 - second but for now we're going to say
10:06 - g.context is the type that we want to
10:08 - accept specifically a pointer to it
10:11 - sorry this is going to be gin.context
10:13 - not g.context and then all we're going
10:14 - to do is c dot
10:16 - and then indented json
10:19 - and we're going to return here http dot
10:21 - status okay and then the json that we
10:24 - want to return which in this case is
10:25 - just going to be our slice of books
10:28 - okay i understand there's a lot of stuff
10:29 - that i haven't explained i just need to
10:30 - write kind of this boilerplate code and
10:32 - then i can go through all of it okay so
10:34 - now here i'm going to type type
10:36 - router.get
10:38 - and my root is going to be slash books
10:40 - and then i'm going to route this to my
10:42 - getbooks function
10:44 - okay
10:44 - then i'm going to say router.run
10:47 - and is this a capital yes this is a
10:49 - capital and i'm going to run this on
10:52 - localhost
10:53 - port 8080. okay there we go so let's
10:57 - take a step back let me explain what i
10:58 - just did because we've actually just
10:59 - implemented an api here so what i did is
11:02 - i created a router now the router is
11:04 - coming from gin and that's going to
11:06 - allow us to handle different routes now
11:08 - the route that i want to handle here is
11:09 - slash books which means when you go to
11:11 - local host colon 8080 slash books it's
11:14 - going to call this function
11:16 - and this function is going to take in a
11:18 - gin context the gin context is
11:21 - essentially all of the information about
11:22 - the request and it allows you to return
11:25 - a response
11:26 - so here i'd do c dot indented json
11:30 - this just means we're going to get
11:31 - nicely formatted json that has the
11:32 - proper indentation the status code of
11:35 - this response that we're sending here is
11:37 - status ok and then what we're sending as
11:40 - the data is our books so since i added
11:42 - these fields here right i added my json
11:44 - id my json title my json author my json
11:47 - quantity
11:48 - this book struct here is able to be
11:50 - serialized and we can also serialize a
11:53 - slice of this struct so what's going to
11:55 - happen is we're going to return a json
11:56 - object that has all of these books in it
11:59 - from this function right here now notice
12:02 - that i had a get request so that means
12:04 - if you're sending a get request to this
12:06 - route then it will handle or it will
12:07 - call this function however if you send a
12:10 - post request it's not going to handle
12:11 - that because well this says get
12:13 - now in terms of running our router or
12:15 - running our web server here we just do
12:17 - router.run and then we put the ip
12:19 - address that we want to run this on now
12:20 - in this case i'm just doing localhost
12:22 - i'm running this on port 8080 you can
12:24 - pick pretty much any port that you want
12:26 - okay hopefully that makes a bit of sense
12:28 - but that is the basics for creating kind
12:30 - of a very simple get request or very
12:32 - simple get endpoint on our api again the
12:36 - indented json is just giving us a nice
12:38 - format of json we also can return files
12:40 - we can return html we can return all
12:42 - kinds of stuff the status okay here is
12:45 - coming from this net http module this is
12:48 - just going to go to 200 we need to first
12:50 - return a status response
12:52 - saying okay what was the status of the
12:54 - request well it was okay so that's why
12:56 - we're using status okay and then what's
12:58 - the data well that's books which will be
12:59 - automatically serialized for us into
13:02 - json
13:03 - all right
13:04 - now i'm just going to comment out errors
13:05 - here because we're not using this quite
13:07 - yet we'll use that in a second so what i
13:10 - want to do now is test this api and see
13:12 - if it's working so the way that i can do
13:14 - that is simply run my go file so i'm
13:16 - just going to type go run and i can type
13:18 - dot or i can type main.go
13:20 - so i'm going to do main.go let's give it
13:22 - a second here and you can see that it's
13:23 - listening and serving http on localhost
13:26 - colon 8080. now to test this we need to
13:28 - use the curl command so i'm just going
13:30 - to open up another terminal by splitting
13:32 - this here
13:33 - let's move this all over i'm going to
13:35 - use the curl command you can use this on
13:37 - mac linux windows and we're just going
13:39 - to curl the endpoint that we created
13:41 - which is slash books so i'm going to say
13:43 - curl
13:44 - local host colon
13:46 - 8080 slash books
13:49 - let's go like that okay so when i do
13:52 - that you're going to see that we get our
13:53 - indented json right and we get all of
13:55 - our books being returned to us here and
13:57 - notice we have the lowercase field name
13:59 - not the uppercase field name again
14:01 - because we have our json stuff right
14:03 - here
14:04 - okay and then you can see the response
14:05 - came in here we have status code 200 we
14:08 - got or we're getting the slash books
14:10 - endpoint perfect now let's quit this so
14:13 - i'm just going to ctrl c to get out of
14:15 - that and we can now close this and we'll
14:17 - get back to that later
14:19 - okay so we have now just created a get
14:21 - endpoint what i want to do next is add
14:23 - an endpoint that allows us to actually
14:25 - add a book to this slice
14:27 - so to do that i'm going to say function
14:30 - add book or actually let's go with
14:32 - create book
14:34 - again we're going to take in our context
14:36 - so gin.context just to reiterate this
14:38 - stores all of the information related to
14:41 - a specific request so if you had query
14:44 - parameters if you had a data payload if
14:46 - you add headers all of that type of
14:47 - stuff is going to be in this variable
14:49 - here which is c so i'll show you how we
14:51 - actually get query parameters and how we
14:54 - can get the data associated with a
14:55 - specific book so we have create book and
14:58 - inside of here what i need to do is get
15:00 - the data of the book that we're going to
15:02 - be creating right from the request so to
15:05 - do this i'm going to create a variable
15:06 - i'm going to say var
15:08 - new book
15:09 - is of type book and then i'm going to
15:11 - use something from c here so from our
15:13 - context to actually bind the json that
15:16 - was a part of the data payload of this
15:18 - request to this book object or who this
15:21 - book struct so i'm going to say
15:23 - if error colon equals and then this is
15:26 - going to be c dot bind json like that
15:29 - and we're going to try to bind the json
15:32 - again that's a part of this request to
15:34 - the new book struct now we're passing
15:36 - the pointer to new books that we can
15:38 - actually directly modify the field
15:40 - values and then we're going to check if
15:41 - we got an error or not so if the error
15:44 - is not equal to null that means that we
15:46 - did actually get an error and if that's
15:48 - the case we'll simply return now when we
15:50 - return this will automatically pass a uh
15:53 - what he called a status message as a
15:56 - response so if we just return from a
15:57 - function without actually using the like
16:00 - indented json or something else that
16:02 - i'll show you in a second then what's
16:04 - going to happen is it will just
16:05 - automatically give kind of an error
16:06 - response now we'll test that out in a
16:08 - second to see how that works but for now
16:10 - i'm just going to return inside of here
16:12 - however though if i don't end up
16:14 - returning then we will have bound the
16:16 - json to this new book struct so now we
16:18 - have a struct that contains all of the
16:20 - data that was passed to this function or
16:23 - to this endpoint so what i can now do is
16:25 - append this to our books slice and then
16:28 - i can simply return a status message and
16:30 - a response so i'm going to say append
16:33 - and i'm going to append i forget what
16:35 - order i do this but i think i do book
16:36 - two books
16:38 - let's see if that's correct or if it's
16:39 - the other way around nope i did it wrong
16:41 - so it's going to be books 2 and then new
16:44 - book like that and then what i want to
16:46 - do is c dot and then again we're going
16:49 - to do indented json except this time for
16:51 - the status message we're going to say
16:52 - http dot status and this is going to be
16:57 - created like that okay status created
17:00 - and then for the data we'll just pass a
17:03 - new book now what is the error here um
17:07 - value of type book is not used
17:09 - ah my apologies here i totally forgot
17:11 - that i need to do books is equal to and
17:13 - then append books new book i come from
17:16 - many other programming languages so
17:17 - often i make the mistake income anyways
17:19 - there we go we have books is equal to
17:21 - append books new book
17:23 - what is the problem here
17:26 - function create book is not used okay
17:27 - we're going to use that in one second
17:29 - okay so just to quickly recap what we
17:30 - did here we created the variable new
17:32 - book which is of type book we then try
17:34 - to bind the json of the request data to
17:37 - the new book by passing its pointer if
17:40 - we got an error from doing that we
17:41 - simply returned which is going to
17:43 - automatically pass kind of an error
17:44 - response message back to whoever sent
17:47 - this then we're going to have books is
17:49 - equal to append books new book so if we
17:51 - didn't get an error and we were
17:52 - successfully able to bind the json to
17:54 - this book struct then we have a new book
17:56 - that we're creating so we're going to
17:58 - create that book by simply appending it
17:59 - to the books slice we then are going to
18:02 - return the book that we just created
18:04 - with the status message or status code
18:07 - status created great
18:09 - okay so now all we need to do is
18:11 - actually add a root for this so we're
18:14 - going to say router dot and then this is
18:16 - going to be post and we'll post to slash
18:18 - books and then create books we'll use
18:20 - the same endpoint but we'll just have a
18:23 - post request here that's going to create
18:24 - the book and a get request is going to
18:26 - give you the different books alright so
18:28 - now we can actually test this api so to
18:30 - do so i'm going to run the go code again
18:33 - so let's go go run and then this is
18:35 - going to be main.go i'm going to split
18:38 - the terminal and we're going to use the
18:40 - curl command however since we need to
18:42 - send json data to the create book
18:45 - endpoint what i'm going to do is create
18:46 - a file here that's going to contain kind
18:48 - of the data that we want to send as json
18:51 - it's just going to be easier to write it
18:52 - in a file than it would be to write it
18:54 - directly in here it's going to get
18:55 - really messy so we're going to create a
18:56 - new file uh let's just call this
18:59 - body dot json
19:02 - let's not save it as django text let's
19:04 - save it as all files okay
19:06 - and inside of here we'll define our json
19:08 - so we want an id the id is going to be a
19:11 - string this will be equal to 4.
19:13 - we want a title
19:15 - we can go with hamlet for the title here
19:19 - we want an author so let's type that in
19:21 - here this is going to be
19:24 - william
19:26 - shake sphere i think that's how you
19:28 - spell his name okay and then we'll go
19:30 - with a
19:31 - quantity and this will be equal to two
19:35 - now again make this whatever you want
19:36 - i'm just doing a real book i think that
19:38 - makes sense for this example okay so
19:39 - that is our body.json so now our api is
19:42 - running let me just close the file view
19:45 - and let's now send a curl request to it
19:48 - let's get rid of this untitled file too
19:50 - so i'm going to say curl local host
19:55 - colon 8080 slash books now we're going
19:58 - to
19:59 - do an include so we're going to say that
20:01 - we want to include
20:03 - a header
20:04 - this header is going to be
20:06 - content hyphen type
20:09 - application slash json because that's
20:12 - the type of data that we're sending and
20:14 - we're going to do hyphen d for data
20:16 - and then we're going to do the at sign
20:19 - and it's going to be body
20:20 - dot json now i think that's actually all
20:23 - we need to do we might need to make it
20:26 - so that the type is a post request
20:29 - so let's just do that as well in case
20:30 - this isn't going to work so i'm going to
20:31 - say hi for knife and request
20:33 - and then in double quotes we're going to
20:34 - do all capitals post okay so let's hit
20:36 - enter here and see if this works and
20:38 - notice that it does so we get a 201 we
20:41 - have post and then slash books so 201
20:44 - status created and we get our book back
20:47 - id4 title hamlet author william
20:49 - shakespeare quantity two
20:51 - awesome okay so i think
20:53 - that is it for testing that just to
20:55 - quickly go through this curl command
20:56 - because i went through this fast we are
20:58 - curling to localhost 8080 books we are
21:00 - going to include the header i actually
21:02 - don't even think you need to have the
21:04 - include to be honest the header is
21:06 - content type application json defining
21:08 - the type of data that we're sending
21:10 - hyphen d stands for data
21:12 - the ad symbol means a file so we're
21:14 - going to say at body.json because that's
21:16 - the file that we want to use for the
21:18 - data and then we specify the request
21:20 - type as a post request and there we go
21:22 - we send the request using
21:25 - great we have now created that so now
21:26 - let's send a curl request and look at
21:28 - all the books so http actually we don't
21:30 - need http we just do local host colon
21:33 - 8080 slash books and when we do that we
21:36 - now have id4 hamlet has been added as a
21:39 - book
21:40 - great okay so let's continue here and
21:42 - let's now look at how we could do
21:44 - something like checking out a book
21:46 - checking in a book uh getting a book by
21:48 - id let's actually do getting a book by
21:50 - id first all right so to get the book by
21:52 - id i'm going to write a helper function
21:54 - that will return to us the book object
21:57 - represented by a specific id then we'll
21:59 - write a separate function that handles
22:00 - the root so i'm going to say function
22:02 - get book
22:04 - by id we want an id of type string and
22:07 - then we're actually going to return
22:10 - a pointer to a book
22:13 - and we're going to return an error
22:16 - now the error could potentially be nil
22:18 - or null or whatever you want to call it
22:20 - and the reason why we're doing this is
22:21 - because if the book that you requested
22:23 - or the id that you requested doesn't
22:24 - exist then we need to return an error
22:26 - right so let's re-import errors
22:29 - because we're going to use that in here
22:31 - okay so let's do a loop
22:34 - and look for the book
22:35 - so we're going to say
22:37 - 4
22:38 - i comma book and then colon equals and
22:42 - actually i can't even do book after b
22:44 - colon equals and then range
22:47 - books like this will loop over all of
22:49 - the books we want to check if the book
22:52 - id is equal to this id so we're going to
22:54 - say if
22:56 - b dot id
22:58 - is equal to id
23:00 - then we want to return and we're
23:02 - actually going to return books at i but
23:04 - we're going to return a pointer to it so
23:06 - we're going to turn ampersand books at i
23:08 - and
23:09 - nil like that because we don't have an
23:11 - error if we actually find the successful
23:13 - book then the reason i'm returning the
23:14 - pointer to the book is that we can
23:16 - modify the attributes of this book or
23:18 - the fields of this struct from a
23:21 - different function okay hopefully that
23:22 - makes sense
23:24 - that looks good to me and then here we
23:27 - will simply return
23:29 - nil and then this is going to be errors
23:31 - dot new and then book not found
23:34 - great so i think that's all we need for
23:36 - get book by id just telling us that's
23:38 - unused that's fine so now let's write a
23:41 - function that will get the book by id so
23:43 - we'll just say
23:44 - book
23:45 - by id
23:47 - okay and then here we're going to take c
23:50 - and this is going to be gin.context
23:52 - and then what we want to do is say that
23:55 - our book is colon equal to and this is
23:58 - going to be get book by id
24:01 - and we're going to pass for the id the
24:04 - id which we now need to get so i'm going
24:06 - to say id is equal to c dot param now
24:09 - param means that this is going to be a
24:10 - path parameter i will show you that in
24:12 - one second but essentially it would be
24:14 - something like slash books slash 2.
24:17 - now that would be the id 2 would be the
24:19 - id right i'll show you how we set that
24:21 - up in the group okay so that's the id so
24:23 - we're going to say book is equal to get
24:24 - book by id
24:26 - going to pass the id however we also
24:28 - could potentially have an error so we're
24:29 - going to say book comma error is equal
24:31 - to this
24:32 - and then we're going to check if we have
24:34 - an error if we do have an error then we
24:36 - need to well return an error to the user
24:38 - so we're going to say if error does not
24:40 - equal nil
24:42 - like that then simply return this will
24:44 - just give us a bad request automatically
24:46 - as we saw before otherwise we'll just
24:49 - return the book so we'll say c dot
24:51 - indented json http dot
24:54 - status okay
24:56 - and then this will be book
24:58 - okay now i think that is going to be
25:01 - good uh i don't think i need to
25:03 - de-reference the book i might need to
25:06 - we'll see if this is going to work
25:07 - though okay so we have book by id now
25:09 - let's set up the root for this so let's
25:11 - go to main and we'll do another get
25:14 - we're going to say router dot get
25:16 - and we're going to say
25:17 - slash
25:19 - books slash
25:21 - and then colon id now this is how you
25:23 - set up a path parameter so as you saw
25:25 - here we had
25:27 - c dot param now this is going to access
25:29 - whatever is associated with the id
25:31 - parameter in the path so if i want this
25:33 - to be a parameter i just do colon id
25:35 - it's going to default to a string type
25:37 - and then it will give me that when i'm
25:39 - actually handling the root
25:41 - hopefully that makes sense i think
25:42 - that's straightforward enough though
25:44 - let's now make this go to book by id
25:47 - okay now we can test this out so let's
25:50 - re-run our api
25:52 - okay go run main.go
25:55 - let's clear this let's send a curl
25:57 - request to slash books slash and let's
26:00 - just go with id2 notice we get id2 now
26:03 - of course id4 is not going to work so
26:05 - we're going to get uh wait gave us 200
26:09 - that should have given us a bad
26:11 - request okay i'll look at that in a
26:13 - second but book four i just wanted to
26:15 - show you wasn't going to give us
26:16 - something because we were storing them
26:17 - in memory so even even though we added a
26:19 - book in the previous test run of the api
26:21 - it wasn't going to be there that points
26:23 - out an error so let's see how we can fix
26:25 - that so i was just looking into this
26:27 - error here and i realized what the
26:28 - problem was so what we were having was
26:30 - we were getting a status code of 200
26:33 - when we actually wanted to get the
26:34 - status code of 404 not found so it
26:37 - wasn't returning us any data but it
26:39 - wasn't giving us the correct status code
26:41 - and well i'm going to explain the reason
26:42 - so first let's look at create book so we
26:44 - can create a book i kind of falsely
26:46 - mentioned before that since we were
26:47 - returning it was automatically giving us
26:50 - a bad request status code and giving a
26:53 - response now the return statement is not
26:55 - what's doing that it's the c dot bind
26:57 - json that's doing that so since this was
26:59 - getting an error it was automatically
27:01 - returning a response saying that the
27:03 - request was bad and then we were just
27:05 - returning from the function so we didn't
27:06 - end up doing any of this now what i did
27:09 - was i kind of thought that we could just
27:11 - return here and that would automatically
27:12 - give us a bad request that was incorrect
27:15 - because again the c dot bind json is
27:17 - doing that learning experience for both
27:19 - of us so what we need to do in here is
27:21 - we need to actually return a custom
27:23 - response saying bad request we're saying
27:26 - 404 not found and then whatever data we
27:28 - want to return with that and then return
27:31 - so we're going to say c dot indented
27:32 - json and we're going to do http dot and
27:35 - then status actually i don't want to go
27:37 - with bad request i want to go with not
27:39 - found that seems to make more sense here
27:41 - and then what we want to return
27:44 - is the following we're going to do gen
27:46 - dot h and we're going to say message and
27:49 - for the message we can just say book
27:52 - not found okay exclamation point like
27:54 - that or we just go with the period now
27:57 - the gin.h is kind of a shortcut to allow
27:59 - us to just write our own custom json
28:01 - like that it actually maps to a type
28:03 - that has string to an interface i'm not
28:06 - going to explain exactly how that works
28:08 - but just for now you can type gin.h and
28:10 - that allows you just to write here the
28:12 - json that you want to return
28:14 - okay
28:15 - so now we can test this out and see if
28:16 - it's going to work so let's run our api
28:20 - let's then send a request here with an
28:22 - id that doesn't exist and notice now
28:24 - that we're getting 404 and it says
28:27 - message book not found
28:29 - very good we have now fixed that okay so
28:31 - let's just shut off the api
28:34 - and now what i want to do is write two
28:36 - more routes one to allow us to check in
28:38 - a book and to check out a book or i
28:40 - guess return a book and shut up check
28:42 - out a book now what these methods are
28:43 - going to do is they're not going to
28:45 - validate that the correct person is
28:46 - checking them in or checking them out or
28:48 - whatever it's just going to subtract one
28:50 - from the quantity
28:51 - of the book and then add one to the
28:53 - quantity and it's not going to let you
28:55 - check out a book if there's no books
28:57 - available right so if the quantity is
28:58 - zero
28:59 - hopefully that makes sense but that's
29:00 - kind of what i'm going to go with here
29:01 - so let's write a function here and let's
29:03 - call this check out
29:05 - is check out one word yeah i think we
29:07 - can do that check out book let's take in
29:09 - our context so gin.context and then what
29:12 - i want to check in here is what book we
29:14 - want to check out we're going to do that
29:16 - by the id of the book except this time
29:18 - i'm going to accept that as a query
29:20 - parameter rather than a path parameter
29:22 - just to show you how we handle those now
29:24 - the query parameters are what comes
29:26 - after the question marks you have
29:27 - question mark like x equals two that's a
29:29 - query parameter in your path right so
29:32 - let's see how we get that so i'm going
29:33 - to say id
29:34 - colon
29:35 - equals and then it's going to be c dot
29:37 - get
29:38 - and then query like that and we're going
29:40 - to look for id now what this also
29:42 - returns is an error so it has id error
29:45 - is equal to c dot get query so if this
29:48 - id does not exist as a query parameter
29:49 - then we get an error so the first thing
29:51 - we can check is if error does not equal
29:54 - nil
29:55 - so if it doesn't equal nil then we need
29:57 - to return a indented json so we're going
29:59 - to say http status and then this is
30:01 - going to be bad request because you
30:03 - didn't pass the correct correct query
30:05 - parameter and then we're going to say
30:07 - gin.h
30:08 - and for the message this time
30:11 - we will say
30:13 - invalid
30:15 - our missing
30:16 - id query parameter
30:19 - okay there we go that's good and then we
30:21 - can recheck so what's the error here
30:23 - it's saying cannot convert nil to bool
30:25 - okay so error sorry
30:27 - this actually okay my apologies so we're
30:29 - going to say if ok
30:32 - is equal to false meaning that this key
30:35 - does not actually exist as a query
30:37 - parameter then we'll do this it's not
30:39 - giving us an error instead it's giving
30:41 - us a boolean telling us if the key
30:42 - exists okay so we're going to check that
30:44 - now if we do actually have an id then
30:46 - we're going to try to get the book so
30:47 - we're going to say book colon equals get
30:50 - book by id but we're gonna do book
30:52 - comma error like that
30:54 - and we'll get the id and then similarly
30:56 - to before we're gonna say if
30:59 - error does not equal nil then we can
31:01 - just return what we already have here
31:03 - which is book not found
31:05 - so let's go book like that
31:07 - and then lastly we can actually return
31:10 - the book and we can subtract the
31:12 - quantity from the book saying that okay
31:15 - like we've reduced the quantity because
31:17 - you've checked out one book that reminds
31:19 - me though we need to check to make sure
31:20 - that there is at least one book for them
31:22 - to check out so let's check that we're
31:24 - going to say if book dot quantity is
31:27 - equal to zero let's just see less than
31:29 - equal to zero
31:30 - then we want to return a message
31:33 - very similar here so we're going to say
31:35 - c dot index json status
31:38 - i guess we can just go bad request uh we
31:40 - can say book
31:42 - not available
31:44 - okay and then return
31:46 - and then lastly we can say book
31:49 - dot quantity
31:51 - minus equals one to reduce the quantity
31:54 - if they were able to check one out and
31:56 - then we'll return what book it was that
31:57 - they had so we'll say status okay and
31:59 - we'll say gin dot h
32:02 - and then this will be a
32:04 - message
32:06 - or not a message sorry what am i doing
32:07 - we're just going to return the book
32:09 - okay
32:10 - so i think that is good let's quickly
32:11 - recap what we did here so we tried to
32:13 - get from the query parameter the id uh
32:16 - we checked if we had an id or not what
32:18 - is it saying here should omit comparison
32:20 - can okay so let's just do what they say
32:22 - here let's do not okay rather than okay
32:24 - equals false so we're going to check if
32:26 - we actually had id as a query parameter
32:27 - if we did not we're going to return the
32:29 - message missing id query parameter
32:32 - and then if this is not the case we are
32:34 - going to try to get the book by the id
32:36 - if the book does not exist we're going
32:38 - to say that
32:39 - and then we're going to check the
32:40 - quantity so if the quantity of the book
32:42 - is less than zero you can't check it out
32:43 - so we return an error message now if all
32:45 - of those things are false so we don't
32:46 - get into any of these conditions then
32:48 - we're going to subtract the quantity by
32:50 - one because we're going to check out
32:52 - this book and we're going to return that
32:53 - this was okay and we're going to give
32:55 - them the book now we also could give a
32:57 - message maybe and say something like
32:59 - book checked out but for now i'll just
33:00 - give them the book that's fine
33:02 - okay so let's add a root for this so
33:05 - this time since we're going to be
33:06 - updating something that currently exists
33:08 - i can use a patch request and we're just
33:10 - going to do slash
33:12 - check out and then we will put this to
33:17 - checkout book
33:18 - okay so let's test this before we move
33:20 - on to checking in a book or returning a
33:22 - book so let's go go run main.go
33:25 - okay and then we want to send a request
33:28 - here now this is going to be a little
33:30 - bit more complicated than before
33:32 - localhost colon8080
33:34 - check out
33:35 - question mark and then we want id equal
33:37 - to let's check out book two and we're
33:39 - going to do
33:40 - hyphen knife and request
33:42 - and this is going to be patch i think
33:44 - that's all we need let's run this and
33:46 - there we go okay we were able to check
33:48 - out a book
33:49 - now when we get the book is the quantity
33:51 - less than it was before let's see
33:53 - so the quantity that we had was 5 and
33:55 - when it returns to us the quantity it's
33:57 - giving us 4 which is telling us okay we
33:59 - did indeed update the quantity of this
34:01 - book
34:02 - sweet so that seems to be working now
34:04 - that we have checkout function let's
34:06 - actually just try this a few more times
34:08 - so i'm going to check out quantities 3
34:10 - check out quantities 2 1
34:12 - 0 and now book not available perfect so
34:14 - that is working let's try with an id
34:16 - that doesn't exist so id 4 says book not
34:20 - found let's try without the query
34:22 - parameter id
34:24 - and missing id query parameter perfect
34:26 - okay so that is all working let's close
34:29 - this
34:30 - and now let's write the return book so
34:34 - let's go function
34:36 - return book
34:37 - okay this is going to take in our
34:39 - context so gen dot context
34:43 - let's look for the query parameter for
34:45 - the id that they're going to be
34:46 - returning or
34:48 - yeah i guess we'll just do it as a query
34:49 - parameter we'll let them return by just
34:51 - saying the id of the book they want to
34:53 - return so we'll do what we did before
34:55 - i'm just going to copy actually all of
34:57 - this
34:58 - okay so let's go ctrl c
35:01 - and ctrl v because if they try to return
35:03 - a book that doesn't exist well we can
35:04 - say book not found
35:06 - and after we do all of that what we want
35:09 - to do is update the quality by adding
35:11 - one and then return i guess book return
35:14 - successfully or just the book so we'll
35:16 - say book dot quantity
35:19 - and this will be plus equals one
35:21 - okay and then we'll say
35:24 - c dot indented json
35:26 - status okay
35:28 - and then return the book now i am just
35:29 - noticing here that we are doing a lot of
35:31 - repetitive work in both of these
35:33 - functions now i think for now this is
35:35 - fine i'm not really going to clean it up
35:36 - but you could probably separate this out
35:38 - into another function and then uh kind
35:40 - of use that you know from here as well
35:42 - as from here because we are doing the
35:44 - exact same thing twice at least for
35:45 - these i don't know 10-ish lines of code
35:48 - anyways i'm going to leave it like this
35:49 - for now i think that's fine let's
35:51 - implement the root now for this so let's
35:53 - say router dot patch
35:56 - and let's go slash and then for this one
35:58 - we will go
36:00 - return
36:01 - and then this will be return book now
36:03 - while i'm here i realize that i forgot
36:05 - to mention get post and patch requests
36:07 - so the get request is getting
36:08 - information the post request is adding
36:10 - information or creating something new
36:13 - and the patch request is updating
36:14 - something so we are updating the
36:16 - quantity of the book that's why i'm
36:17 - using patch you might be able to argue
36:19 - for using a different type of request
36:20 - here but i think this is fine for now
36:22 - okay so let's test the api and see if we
36:24 - can return books as well now
36:26 - so let's go go run main.go
36:28 - let's now send a curl and let's check
36:31 - out a book
36:33 - we can check out let's say book with id2
36:36 - so id is equal to two
36:38 - okay now let's try to return it so
36:40 - rather than check out
36:42 - let's just go return and looks like the
36:45 - quantity gets updated and we added one
36:47 - now to test some of the errors here
36:49 - let's go id
36:50 - 8 okay book not found
36:52 - let's try
36:54 - to do it without the query parameter
36:56 - okay we get the error message
36:58 - and now let's try to reduce the quantity
37:00 - so much that we can't do it so id2
37:03 - or actually sorry i guess we can't even
37:04 - do that because we're just returning a
37:05 - book so it should just keep going up
37:07 - okay awesome
37:08 - so with that said i think that's going
37:10 - to wrap up this video again i just want
37:13 - to give you an introduction to this
37:14 - framework and show you how to make a
37:16 - simple api there's of course a lot more
37:18 - stuff that you can do with this i would
37:20 - encourage you to read through the
37:21 - documentation which i will link in the
37:23 - description but i think this was a good
37:24 - start we have get post patch we know how
37:27 - to send json data how to receive json
37:30 - data we know how to serialize a struct
37:32 - which is what we did right here uh we
37:35 - also know how to get the context how to
37:36 - return different status codes we
37:38 - understand how to handle the errors uh
37:41 - yeah we did quite a few things here and
37:43 - hopefully this was a good introduction
37:44 - to the gin framework and creating a go
37:46 - api with that said i will end the video
37:49 - here i hope you guys enjoyed if you did
37:51 - make sure to leave a like subscribe to
37:52 - the channel i will see you in another
37:54 - one
37:56 - [Music]