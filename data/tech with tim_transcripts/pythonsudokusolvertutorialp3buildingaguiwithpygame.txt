00:00 - hey guys and welcome back so originally
00:03 - I wasn't planning on doing kind of a
00:04 - part 3 to this series but a lot of you
00:06 - guys asked me to do some kind of GUI for
00:09 - the sudoko and make it into an actual
00:10 - game so that's what I did this morning
00:12 - probably took me about two hours to get
00:15 - everything working with the bugs and
00:16 - everything so I'm not gonna be doing a
00:18 - full tutorial on the GUI but I will be
00:20 - walking through how I kind of made this
00:23 - and then providing all of the code to
00:24 - you guys via my website tech with Tim
00:26 - net quick reminder if you didn't already
00:28 - see you guys should definitely go follow
00:30 - me on instagram at tech underscore with
00:32 - underscore tim if you guys want to get
00:34 - exclusive updates on what's going on
00:36 - pretty well in my personal life and kind
00:38 - of sneak freaking to projects and all
00:41 - that so anyways let's talk about this
00:43 - GUI so just a reminder I'm actually on
00:46 - my website editor right now so you guys
00:48 - I have all the code up there she'll be
00:50 - able to download it right as this video
00:51 - is out so anyways essentially the way it
00:54 - works is you can kind of select what do
00:55 - you call it different squares here and
00:57 - these are obviously the squares that
00:59 - come default with like the beginning
01:01 - game so let's say I want to put one here
01:03 - I can start by penciling it in by just
01:05 - hitting whatever key on my keyboard and
01:07 - then to confirm that I actually want to
01:09 - place that there I can hit enter and if
01:11 - it is actually valid it will let it go
01:13 - there now for example if I try to put
01:15 - one say here
01:16 - well that conflict' with this one and
01:18 - this one so if I go to the square and I
01:19 - hit enter then you can see that it
01:21 - simply clears that square and gives me
01:23 - an X saying that I got that wrong now I
01:25 - don't really have any system where if
01:27 - you get a certain amount access you just
01:28 - lose it just kind of just show you that
01:30 - you messed up that many times and it
01:33 - works like this this just works now
01:35 - obviously I'm not gonna play the entire
01:36 - thing so it'll take a second but once
01:38 - you eventually get down to the point
01:40 - where there's only like like you've
01:42 - completed the board it'll simply just
01:45 - say like you won and then you're done
01:47 - and then obviously a keeping track of
01:48 - how long you've been playing in the
01:50 - corner here now it's neat because you
01:52 - can kind of pencil multiple things in
01:54 - they go in the top corner and gray and
01:56 - then when you're ready to confirm them
01:57 - you can hit enter and if it's correct
01:59 - obviously it would go in the right
02:00 - square so yeah so that's how the GUI
02:03 - works what I did to use this was just
02:05 - make a very basic kind of pie game like
02:08 - GUI I guess some people said you used to
02:11 - Kenter but I just no I'd rather use PI
02:13 - game
02:13 - and I'm just using the script that we
02:15 - wrote in the last two videos so this
02:17 - whole thing here to actually see if when
02:20 - I put something into the board if it's a
02:22 - valid solution or not and the way that
02:24 - I'm doing that is by doing two things
02:26 - I'm first making sure that using this
02:28 - valid function that we wrote that it's
02:30 - valid to go into the board if it is then
02:33 - what we do is I call the solve method on
02:35 - that board and then it checks to see if
02:38 - we will be able to actually come to some
02:40 - kind of solution based on what we just
02:42 - put in the board and then based on the
02:44 - results from true or false from these
02:46 - functions that'll determine whether it
02:48 - allows me to put that in or not so up
02:50 - here all I've done is imported that file
02:53 - there in the same directory obviously
02:54 - and then just use the method Psalm and
02:56 - the method valid to do that now the
02:58 - starting board gets stored in this main
03:01 - grid class and this is like what you
03:04 - would modify if you want to change the
03:06 - starting position I didn't really go too
03:08 - hard with this GUI and there's a lot of
03:09 - things to be improved on this is just
03:11 - kind of the standard like it works its
03:14 - functional GUI because I don't want to
03:16 - spend too much time on it but if you
03:17 - want to modify the actual board you
03:19 - could do it have a method that
03:20 - randomizes this and randomly picks some
03:23 - kind of solvable state or you could just
03:25 - modify it by hand and change some of the
03:28 - numbers
03:29 - so yeah that's essentially how it works
03:30 - we have two objects here that I'm using
03:33 - for the game I have this great object
03:35 - and/or class sorry and then I have this
03:37 - cube class and essentially the grid
03:39 - holds a bunch of different cubes in like
03:42 - a row column structure so actually in
03:44 - this identical structure just holding
03:46 - the cube objects and then each cube
03:48 - object let's go down to these actually
03:50 - have all of these different values so it
03:52 - holds a temporary value which is the
03:54 - value that kind of gets penciled in at
03:56 - the top if you ever played sudoko before
03:57 - that's how you do it and then the actual
04:00 - value which is like it's set it can't be
04:03 - changed once it's that value so you'll
04:04 - notice once you actually get a valid
04:07 - value in the board you can't change that
04:09 - right and that's the way it should be
04:10 - and then obviously the draw methods will
04:13 - this draw method is just gonna actually
04:14 - draw that little box little square to
04:16 - show you that it's selected if it is
04:18 - selected and then it will also draw the
04:21 - number on that Square I have set and set
04:24 - temp which will do obviously what they
04:26 - say there
04:27 - and then a bunch of methods for
04:28 - board-like click which will simply
04:30 - return the position of the cube that we
04:32 - clicked on I was so a little bit of math
04:34 - there is finished we'll simply just make
04:35 - sure that where it'll check actually if
04:38 - there's no empty squares left in the
04:40 - board and then we have clear which is
04:43 - simply given a what do you call it
04:45 - that's currently selected oh I forgot to
04:48 - show you guys that actually let's do
04:49 - that quickly so for example if I type
04:50 - like 6 in here I don't want 6 anymore
04:52 - well I could type another number but I
04:54 - can also just clear it by hitting del
04:56 - and then that way it just goes away so I
04:58 - don't see it but notice how I try to hit
04:59 - del on one that doesn't have anything
05:01 - penciled in or is one like this just
05:04 - nothing happens right and that's the way
05:05 - it works same thing like I can't change
05:06 - these values I can only change ones that
05:09 - aren't already set so yeah that's
05:11 - essentially how that works
05:13 - select what this does is simply select
05:16 - the square that you press on and that
05:20 - needs to modify a variable for the class
05:22 - and then draw obviously is gonna draw
05:24 - all those grid lines that you were
05:25 - seeing so a certain thickness every
05:27 - three lines and then it's gonna draw all
05:29 - of the cubes what else do we have your
05:31 - sketch all this is doing is setting the
05:32 - temporary value for the cube object that
05:36 - we like hit a button on and then place
05:40 - is setting the permanent value and just
05:41 - making sure that it is valid to do so
05:43 - and this is where we're using that valid
05:45 - and solve methods from the previous
05:48 - script that we wrote update model so the
05:51 - way that this works essentially is we
05:52 - have the board which is what the user
05:55 - sees and then we have a model and the
05:56 - model is the board that we're gonna send
05:59 - to solver to attempt to solve so we need
06:02 - to essentially update this model because
06:04 - we're only gonna update this when we
06:05 - need to what do you call it attempt to
06:08 - see if the solution can be solved I
06:10 - won't I'm not gonna talk about how this
06:12 - works exactly too much but essentially
06:13 - it's so that when we send this over to
06:16 - solver we can send it a slightly
06:18 - different solution than an actual board
06:20 - that's here because the board that here
06:21 - has to show us like penciled in values
06:23 - and all that stuff but when we send it
06:24 - to solver we don't care about the pencil
06:26 - invaluable integer values are so we need
06:31 - to get all the integer values which is
06:32 - what it does this from the cube objects
06:34 - because in the board we only store cube
06:36 - objects but we need to actually store
06:38 - integer values to pass that
06:40 - over to our solver method I hope that
06:43 - makes sense
06:44 - and other than that that's pretty much
06:46 - it for the GUI I mean you guys are gonna
06:47 - be able to look at all the code on my
06:49 - website there's a link in the
06:50 - description read through if you have any
06:51 - questions please don't hesitate to ask
06:53 - me and again I apologize for not making
06:55 - a full tutorial on this but that would
06:56 - just take way too long
06:57 - and I'm kind of want to move on to the
06:59 - next project now so with that being said
07:01 - if you guys enjoyed the video please
07:02 - make sure you leave a like and subscribe
07:04 - and I'll see you again in another one
07:06 - [Music]