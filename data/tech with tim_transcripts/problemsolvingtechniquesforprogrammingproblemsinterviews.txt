00:00 - hello everybody and welcome back so in
00:02 - this video I'm gonna be sharing with you
00:03 - my tips tricks and advice to getting
00:05 - better at solving problems now my
00:07 - opinion problem-solving is one of the
00:09 - most important skills that you can have
00:10 - especially as a programmer the ability
00:13 - to look at a complex topic question
00:16 - problem whatever it may be and break
00:18 - that down into smaller components that
00:20 - you then solved is something that's
00:21 - really important and in fact a lot of
00:23 - people know this look at the big tech
00:25 - companies like Amazon Facebook Google
00:27 - the number one thing that they evaluate
00:29 - you on when they bring you in for a
00:30 - technical coding interview is your
00:32 - ability to problem solve I can speak
00:35 - firsthand that during my coding
00:36 - interviews there was some situations
00:38 - where I didn't even have to write much
00:40 - code because by the time I had got done
00:41 - solving the problem on the board talking
00:44 - about my solution and kind of walking
00:46 - through how I was about to code it the
00:48 - interview was already satisfied that you
00:50 - know I had come up with the solution
00:51 - they had seen me code previously and
00:53 - they're like hey you know what don't
00:54 - worry about it you can skip this section
00:55 - you don't even need to code that out so
00:57 - as much as it is very important to know
00:59 - your tools and know the language that's
01:01 - what they really are a programming
01:03 - language in my mind is a tool and you
01:05 - need to be good at problem-solving to be
01:07 - able to use that tool effectively to
01:09 - solve problems right and that's what in
01:11 - my opinion makes a good programmer
01:12 - someone who knows their language knows
01:14 - their tools well and can apply them into
01:16 - a problem that they've never seen before
01:18 - so in this video what I'm gonna do is
01:20 - pop a question on the screen and I'm
01:22 - going to show you my thought process and
01:24 - strategy to break this down this is
01:26 - hopefully going to show you how you can
01:28 - approach problems you've never seen
01:29 - before and immediately make them a lot
01:32 - easier for yourself alright so with that
01:33 - being said let's go ahead and get into
01:35 - the question and talk about how you can
01:36 - get better at solving problems
01:41 - [Music]
01:45 - all right so we'll get to the question
01:47 - in just a second but I want to show you
01:48 - the platform that I'm taking this
01:50 - question from and what my personal
01:52 - recommendation is for people that are
01:54 - looking to get better at coding
01:55 - interviews are problem-solving in
01:56 - general so the platform on right now is
01:58 - called algo expert there's a link to it
02:00 - in the description as well as a discount
02:02 - code if you want to purchase this this
02:03 - is a premium paid platform but there's a
02:06 - reason for that this is really high
02:07 - quality and it is a great platform this
02:09 - is really what I used to prepare for my
02:11 - coding interviews and it made a world of
02:13 - a difference so essentially this is algo
02:15 - expert as a hundred coding questions on
02:17 - it they're all ranked by difficulty and
02:19 - category so you can see whatever ones
02:21 - you want here but the thing that really
02:22 - makes this stand out is not the
02:24 - questions you can pretty much find these
02:25 - anywhere it's the interface that you get
02:27 - to use so it's just way easier to
02:29 - actually write and test code because you
02:31 - have the question on the side here you
02:33 - have a bunch of hints if you get stuck
02:35 - you have their solutions if you need to
02:36 - look at them these are way better than
02:38 - leet code sleeve solutions in my opinion
02:40 - you have a full video explanation you
02:42 - can look at a bunch of different test
02:44 - cases and tests and all this stuff to
02:45 - see what's happening and it just it's a
02:48 - really encompassing interface that makes
02:50 - it way easier to actually get down and
02:51 - start practicing questions so anyways if
02:53 - you want to purchase this platform I do
02:55 - have the discount code
02:56 - I believe it's tech with Tim that should
02:58 - give you 15% off link is in the
03:00 - description anyways the question we're
03:02 - doing is River sizes so I'll read the
03:04 - question out and actually we'll zoom in
03:06 - quite a bit here and then I'm gonna go
03:07 - to my what is it whiteboard on my
03:10 - computer and actually start solving this
03:11 - for you so it says you're given a
03:13 - two-dimensional array a matrix of
03:15 - potentially unequal height and width
03:17 - containing only zeros and once each zero
03:19 - represents land at and each one
03:21 - represents a part of a river a river
03:23 - consists of any number of ones that are
03:25 - either horizontally or vertically
03:26 - adjacent but not diagonally the number
03:28 - of adjacent ones forming a river
03:30 - determines its size write a function
03:32 - that returns an array of the sizes of
03:34 - all rivers represented in the input
03:36 - matrix the sizes do not need to be in
03:38 - any particular order so this is the
03:39 - example and essentially what it's asking
03:41 - us to do is find all of the connecting
03:43 - ones or the number of rivers inside of
03:46 - this matrix so that is somewhat of a
03:48 - difficult problem and I'm going to show
03:50 - you how we break this down on the
03:51 - whiteboard before we even start
03:53 - coding and go about actually solving
03:55 - this problem so let's head over to the
03:57 - whiteboard and we'll get into the
03:58 - solution
03:58 - so the first step whenever you're
04:00 - looking at a problem like this is to
04:02 - make sure you actually understand what
04:04 - the problem is asking so you want to
04:06 - understand what the input is what the
04:08 - output is and we are actually being
04:10 - asked to do you don't want to go wrong
04:12 - right at the beginning because you make
04:13 - an assumption or you do something that's
04:16 - not actually a part of the problem a lot
04:18 - of times people will read through a
04:19 - problem quickly and it'll sound like a
04:21 - problem that they've done before so
04:22 - they'll just start coding it based off
04:24 - memory but then they realize halfway
04:26 - through that hey that's actually not
04:27 - what they're being asked and now they've
04:29 - made a huge mistake and they've wasted
04:31 - so much time so you really want to make
04:33 - sure that you have a thorough
04:34 - understanding of what's being asked
04:35 - before you move forward so what I like
04:37 - to do is just state a few observations
04:39 - and kind of redefine the problem in my
04:41 - own words
04:42 - before I move forward so what I believe
04:44 - is being asked is to find the length of
04:46 - all of the rivers that are present in an
04:49 - array or in this matrix so that's the
04:52 - problem we want to find the lengths of
04:54 - all of the rivers that are present so
04:57 - that would mean to me if there was four
04:58 - rivers than I would have four lengths
05:01 - that I would be returning in some kind
05:02 - of array so the input is a matrix I'm
05:05 - returning the length of the rivers okay
05:07 - great
05:08 - so we've defined the problem I think we
05:10 - have an understanding of what it is we
05:11 - need to do this is a simpler problem but
05:13 - you know you get the idea that's a
05:15 - really important first step okay so we
05:17 - want to return the length of all of the
05:19 - rivers so how do we determine the length
05:21 - of a river and in fact what is a river
05:24 - let's make sure we understand that
05:25 - before we move any for any further we
05:28 - want to really make sure that every
05:29 - single thing there we can define in our
05:31 - own terms and that it makes complete
05:33 - sense so let's have a look at this
05:35 - question again and let's look at what
05:36 - says a river is because we need to know
05:39 - what a river is to be able to do this a
05:40 - river consists of any number of ones
05:43 - that are either horizontally or
05:44 - vertically adjacent okay good so that
05:48 - means that this would be a river so I
05:50 - can't highlight it but this one here
05:52 - this one here so there's all these
05:54 - rivers in here that seems just to be
05:56 - vertical here but I guess they could be
05:57 - horizontal as well so that's something
05:59 - we're going to want to make sure we
06:00 - understand what is a river is the one up
06:03 - here I don't know if you can see my
06:04 - mouse connected dying
06:05 - - those ones want to make sure we get
06:07 - that so let me now go ahead and draw a
06:10 - few examples and see if these will be
06:12 - rivers see if I could determine myself
06:14 - if this would be a river so I'm gonna do
06:16 - a little example I'll actually do it on
06:18 - this side of the screen here I won't do
06:20 - too many numbers but let's just do zero
06:22 - zero zero I'll just do like a three by
06:24 - here one one one one zero one zero zero
06:31 - zero okay so this is my example and this
06:34 - kind of moves us into step two so I
06:35 - understand the question I'm kind of
06:37 - trying to figure out what a river is now
06:38 - so my initial instinct is to start
06:41 - drawing because in my opinion you know I
06:43 - need to explain to my interviewer or to
06:45 - myself or to anyone for that matter what
06:47 - it is I'm doing and I can do that better
06:48 - when I'm drawing something out on the
06:50 - board I can make some illustrations you
06:52 - know even if they're rough which all of
06:54 - my stuff is still helps quite a bit so
06:56 - the question I want to ask myself now is
06:58 - well what is a river here is this two
07:00 - rivers or is this one river do we
07:03 - include these two bottom ones in the
07:04 - river so that's a good question so that
07:06 - might involve me having to ask the
07:08 - interviewer to go back and read again
07:09 - now I know that this whole thing would
07:13 - be considered a river because it says
07:14 - that they're horizontally or vertically
07:16 - adjacent then that's a river and since
07:19 - all of these are connected together
07:20 - that's one River I guess it's just too
07:22 - wide at this point right because we
07:24 - didn't have any diagonals up here
07:26 - because if I added the diagonal you know
07:27 - we wouldn't do that but oh wait that
07:30 - would even still be a river because I
07:31 - could connect all of them vertically and
07:33 - horizontally adjacent so that's what I
07:35 - start doing I start playing around with
07:37 - a few examples seeing if there's any
07:38 - examples that I can think of off the top
07:40 - of my head that maybe I'm not clear on
07:42 - right away and make sure I clear that up
07:44 - so that when I start doing this
07:46 - algorithm I really understand that and
07:48 - sometimes you won't see these kind of
07:49 - edge cases until you start going through
07:51 - the algorithm but it's important to try
07:53 - to think about them and say okay what
07:54 - could mess me up here I understand what
07:57 - a river is okay good I understand the
07:59 - problem let's draw it out
08:01 - let's make ourself an example that we
08:02 - haven't seen and see if our
08:04 - understanding holds on that new example
08:06 - that's a really important thing make
08:08 - your own examples because the example
08:10 - they give you can sometimes be a little
08:12 - bit of a trick and they almost want you
08:13 - to draw it out yourself great so we have
08:16 - the example up here we kind of
08:18 - understand what a river
08:19 - now and I'm gonna say it's now the time
08:21 - that I'm gonna start thinking about how
08:22 - I'm actually to solve this so we know
08:24 - that rivers are represented by once we
08:26 - know zeros aren't here so the first
08:28 - thing that I'm probably gonna have to do
08:30 - if I'm solving this problem is well this
08:33 - couldn't be this might not be the first
08:34 - thing but look through all of the
08:36 - elements in this matrix right so say 2d
08:39 - matrix right so these are technically
08:41 - arrays like this or lists or whatever
08:44 - you want to call them so my first step
08:46 - is gonna be to start looking through all
08:48 - of these different elements so I'm gonna
08:49 - say one look through oops
08:55 - elements now excuse my handwriting it's
08:58 - quite messy with this drawing table but
09:00 - hopefully this at least gives you an
09:01 - idea so look through elements so what I
09:03 - mean by that is go one by one and start
09:06 - you know searching through all these
09:07 - elements looking for something specific
09:09 - so in fact what am I looking for well I
09:12 - want to find the length of all of the
09:14 - rivers so I need to find the start of a
09:17 - river and then see how long that River
09:19 - goes for right so the first thing I'm
09:21 - actually gonna be looking for I guess we
09:23 - could say maybe not a sub point maybe
09:25 - let's put part to check if element is
09:32 - one if the element is one that means
09:36 - that I've hit the start the middle some
09:38 - point of a river and well I should
09:40 - probably do something with that right if
09:41 - I hit the start of River so that's my
09:42 - thought process you guys might have a
09:43 - different idea but I'm thinking that I
09:45 - want to look for ones because that's the
09:47 - start of a river and something that I
09:48 - care about okay so I want to check if
09:51 - the element is a one what do I do if the
09:54 - elements a one what should I do if it's
09:56 - a one well I'm thinking if I find one
09:58 - what I should do is find all of the ones
10:01 - that would be in that River so find the
10:03 - river that contains that one because in
10:05 - that case then I can determine the
10:06 - length of that River I can add that
10:09 - River into something I can do something
10:10 - with it so I'm thinking that when I hit
10:12 - a one what I should do is start looking
10:14 - for all of the other ones that are in
10:16 - that River so I'll say three start
10:22 - looking for rest of River
10:26 - okay so rest of
10:29 - River like that okay so that's point
10:31 - three so I'm saying that once I hit a
10:32 - one now what I want to do ideally is
10:35 - find all these other ones so find the
10:37 - river that contains this one that's what
10:38 - I'm looking for
10:39 - nice all right so that's step three what
10:42 - do I do after that
10:43 - well once I find all of these ones what
10:46 - I probably want to do is store or
10:48 - determine the length of this river so
10:51 - I'm going to say determine length of
10:57 - river great so now I've found a one I
11:01 - found the river that contains it and I
11:03 - found the length of that river good
11:05 - we're moving towards what seems to be a
11:07 - solution here so what I'm gonna do now
11:08 - is I'm gonna store the length of that
11:10 - river I need to put it somewhere I need
11:11 - to print it out right so I'll say store
11:14 - five store lengths of river great okay
11:22 - so after we store the length of the
11:24 - river what should we do next well we
11:26 - could just go back up to step one and
11:28 - repeat the process so let's actually see
11:30 - if this works and this is what I'll do
11:31 - in interviews you know I don't know if
11:32 - I'm at the solution yet I just keep
11:33 - practicing and I keep going through and
11:35 - seeing if anything messes up so okay so
11:37 - currently we have look through all the
11:38 - elements
11:38 - so let's look through them blah blah
11:40 - blah look through all the elements go
11:42 - through all of them okay let's follow
11:43 - next step so look through them find a
11:45 - one I found a one nice check of element
11:47 - is one yes it's a one start looking for
11:49 - the rest of the river okay great so
11:51 - let's look for the rest of the river and
11:52 - let's find this so determine the length
11:55 - of the river that could be like the
11:56 - finishing step like we found all the
11:58 - ones now we sum them up and we determine
12:00 - that this is like five store the length
12:02 - of the river okay so I probably need an
12:03 - array or something to do that so I'm
12:05 - gonna store lengths of River like that
12:07 - five boom great okay we got that in
12:09 - there now what do I do next well let's
12:11 - go back up to the top let's look through
12:13 - all the elements I was at this element
12:15 - right when I stopped so now we go here
12:17 - hmm okay so I'm already starting to see
12:19 - that there might be an issue here I
12:20 - start looking for the rest of the river
12:21 - now cuz this elements a one determine
12:24 - the length of the river store the length
12:25 - of the river well if I did that then I
12:27 - would get another five because I would
12:29 - find this one here this this this I
12:31 - would find all those ones but I've
12:32 - already used them okay so this is a
12:34 - little bit of a breakthrough for me this
12:36 - is telling me that once I find all of
12:38 - these elements in the river what I
12:40 - probably need to do is store
12:41 - summer or save those or say hey we've
12:43 - already used this river so what I'm
12:45 - going to say is store the length of the
12:47 - river and six store positions maybe I'll
12:52 - store the positions of the ones that
12:53 - I've used so store positions of ones
12:58 - used so the ones that have already been
13:00 - a part of some of those rivers great so
13:02 - now at step two I'll check if element is
13:04 - one and we'll say not used so I know
13:08 - this is really messy I'm just trying to
13:10 - fit it in here but I'm just trying to
13:11 - say and we haven't used that one so now
13:14 - I've kind of came up with an algorithm
13:15 - that I think might make sense let's look
13:17 - through all the elements check if the
13:18 - element is one and we haven't used it
13:20 - yet then we'll start looking for the
13:22 - rest of the river if that's true if
13:23 - that's true we'll determine the length
13:25 - of the river will store the length of
13:27 - the river and we'll store the positions
13:28 - of the ones that we used and then
13:30 - finally at the end we can just return
13:32 - all the lengths of the rivers because we
13:34 - would have found them all when we reach
13:35 - that last element so there you go I've
13:37 - kind of successfully came up with an
13:39 - algorithm and a series of steps that I
13:40 - want to follow here so now all I need to
13:43 - do is think about the tools that I know
13:44 - in my programming language to accomplish
13:46 - this so look through all the elements
13:48 - hey that's gonna be a double for loop
13:49 - because it's a duck two dimensional
13:51 - matrix great we know it's not
13:53 - necessarily square that's something to
13:55 - keep in mind when we do that okay check
13:57 - if the element is one and it's not used
13:59 - well we're gonna see if the elephant's
14:01 - is equal to one and then we're gonna
14:03 - check in some set or some hash table
14:05 - whatever it is you may decide to use if
14:07 - the current position that we're on was
14:09 - used in in another River because we'll
14:11 - store that in a set or a hash table
14:13 - great part three start looking for the
14:16 - rest of the rib how am I gonna look for
14:18 - the rest of the rivers starting on a
14:19 - position well I'm probably gonna do that
14:21 - in a breadth-first way or a depth-first
14:23 - way that's a tool that I know in
14:25 - programming that's a fairly easy
14:26 - algorithm to implement a depth-first
14:28 - search to look for all the other ones
14:30 - that are potentially in this river
14:32 - great how am I going to determine the
14:34 - length of the river well every time I
14:36 - find a new one let's add one to it
14:38 - variable and we'll just keep track of
14:40 - how long the river is that we found
14:41 - storing the length of the river okay so
14:43 - once I've guess I found all of the
14:45 - elements that were in the river I need
14:47 - to store that length which would have
14:48 - been in a variable and I need to store
14:50 - the positions of all the ones that were
14:52 - used so maybe while I'm looking for all
14:54 - of these
14:55 - when I find a one that's attached to
14:57 - this one so a part of that river I just
14:59 - throw it into the set and say hey this
15:01 - has been used I've used that before then
15:03 - we reach the end of this you know I've
15:04 - just kind of even told you verbally how
15:06 - I would go about solving this and we
15:08 - have an array that's storing all the
15:09 - lengths of our rivers boom so we'd have
15:11 - five six whatever it is we can return
15:14 - that we've successfully complete
15:15 - completed the problem so I've taken this
15:17 - problem it might not have seemed that
15:19 - complex and I've just broken it down
15:20 - into the steps that I need to take and
15:22 - now I have kind of a rough idea of what
15:25 - I want to do and I'll take this and
15:27 - translate it into code in whatever
15:28 - languages that I'm gonna use so that is
15:31 - kind of my idea of doing this the
15:33 - process I followed again was define the
15:36 - problem make sure I really understand
15:38 - make some observation some things that I
15:40 - might notice about the problem things
15:42 - that you know I'm gonna have to consider
15:43 - for my solution and then what do I do I
15:46 - make sure I know all the definitions so
15:48 - I know what a river is I think about any
15:50 - edge cases I've drawn a diagram and
15:52 - thought of some examples that might
15:54 - break my current understanding once I
15:56 - really make sure I understand it I start
15:58 - breaking it down into really small steps
16:00 - that I can easily follow and try to come
16:02 - up with some kind of algorithm maybe my
16:04 - first version of the algorithms not
16:06 - correct I reach something that doesn't
16:08 - make sense to me so I go back and I
16:10 - modify it a little bit and I change the
16:11 - steps around now at the end of this
16:14 - problem I've thought of these steps they
16:15 - make sense to me and what I'll do is
16:17 - I'll take these steps and I'll translate
16:19 - them into code notice that I didn't
16:21 - really talk about any coding stuff here
16:23 - there wasn't anything with depth first
16:25 - search breadth first search I was just
16:27 - discussing in my mind how I would go
16:29 - about solving this problem the steps
16:30 - that would need to be taken if I was
16:32 - just doing this as a human for one
16:34 - example then I take that and I can
16:36 - convert that into an algorithm that I
16:37 - can apply for any example of course
16:40 - there's a lot more things you need to do
16:41 - than just this but I wanted to walk you
16:43 - through how I mentally break down and
16:46 - think about a problem and hopefully this
16:48 - gives you an idea of what you can start
16:50 - doing when you see a problem that you
16:52 - don't immediately know how to solve
16:53 - don't necessarily just think about the
16:55 - coding aspect think about logically what
16:58 - you need to do the steps that need to be
17:00 - accomplished and then solve them one at
17:01 - a time I think we can all agree that B
17:04 - SEC six steps are easier to solve than
17:06 - just reading that problem at the
17:07 - beginning
17:08 - like it is right so again this video is
17:11 - really designed to just help give you an
17:12 - idea of how you go about solving
17:14 - problems the thought process that's
17:15 - involved and if you do really want to
17:17 - practice this kind of stuff I would
17:19 - highly recommend algo expert which again
17:21 - is the platform I took this question
17:22 - directly from and that I used to prepare
17:24 - for my coding interviews so I think with
17:27 - that I'm gonna wrap up the video here I
17:29 - know this was long but I really did want
17:31 - to try my best to give you guys all the
17:32 - knowledge I could in this area so with
17:34 - that being said I hope you enjoyed like
17:36 - the video if you did subscribe to the
17:37 - channel and I will see you in the next
17:39 - one