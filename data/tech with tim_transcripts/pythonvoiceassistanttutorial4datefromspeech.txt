00:00 - hello everyone and welcome back so in
00:01 - the next few videos in this series we're
00:03 - going to be doing is working with the
00:05 - Google Calendar API and essentially what
00:06 - we've just created with this get events
00:08 - function to figure out if we have events
00:11 - in the upcoming days weeks months and so
00:13 - on
00:14 - so what I'm kind of envisioning here is
00:15 - like I can ask the assistant to say do I
00:18 - have anything on Monday or do I have
00:20 - something next Saturday or what do I
00:21 - have on September 9th and then it can
00:24 - list out all of those events and pretty
00:26 - much tell me if I'm free or if I'm busy
00:27 - on those days now I'm just gonna do this
00:29 - pretty simply for this tutorial series
00:31 - but hopefully everything I show you will
00:33 - allow you guys to customize it to your
00:34 - liking and that's kind of the goal of
00:36 - this series here is not to make
00:37 - everything super specific but to give
00:39 - you enough knowledge to be able to just
00:41 - really easily tweak a few things and
00:42 - make it exactly how you'd like it now
00:45 - keep in mind we're not programming like
00:46 - Cortana or Google home or anything like
00:48 - that
00:49 - and there is gonna be some bugs with the
00:51 - stuff that we do but I'm trying to make
00:52 - this as easy and as flexible as possible
00:55 - for everyone ok so the first thing we
00:57 - need to do if we actually want to figure
00:59 - out if we have events on a certain day
01:01 - is we need to figure out what day to be
01:03 - looking for those events on now keep in
01:06 - mind we're gonna be doing this with
01:07 - speech right so we're gonna be asking or
01:09 - really speaking something to the
01:11 - assistant and then it has to figure out
01:13 - what day we're talking about or what
01:15 - days or whatever it is now that actually
01:17 - is a pretty tricky task because if you
01:19 - think about it
01:20 - you can ask and talk about the date in
01:22 - so many different ways you can say you
01:24 - know like September 3rd you can say next
01:26 - Wednesday you could say the following
01:28 - Sunday you can say so many different
01:31 - things that we need to make sure that we
01:33 - capture all of those and are able to
01:35 - figure out the correct date based on
01:36 - that now the way I'm gonna program this
01:38 - function here is always assuming we're
01:40 - talking about in the future and not in
01:42 - the past because it really doesn't make
01:45 - sense to ask what we had in the past so
01:47 - that's the way I'm gonna be making this
01:49 - or anyways let's go ahead and get
01:50 - started what we're gonna do is create a
01:51 - function it's gonna be called get
01:53 - underscore date and the point of this
01:55 - function is to determine what date it is
01:57 - that we're talking about from a string
01:59 - of text so in here it's gonna take text
02:02 - and what we're just gonna start off by
02:03 - doing a save text equals text dot lower
02:06 - now at the top of our program here I'm
02:08 - just gonna write a few global variable
02:10 - I'm gonna need the first one I'm gonna
02:12 - create is gonna be called days now
02:14 - inside days I'm gonna have Monday
02:17 - Tuesday Wednesday and so on and you know
02:21 - what I think I'll actually just copy
02:22 - this in because you guys probably don't
02:24 - need to watch me just type these so I'm
02:25 - just gonna copy in these lists that I
02:26 - have here again code will be in the
02:29 - description if you just want to copy
02:30 - this but essentially we have four months
02:32 - January February March April May so on
02:34 - and then days Monday Tuesday all the way
02:37 - through Sunday and then day extensions
02:39 - which is like you know the first the
02:41 - third the fifth are gonna be B's right
02:44 - here so that we can actually determine
02:45 - you know if we're talking about a date
02:48 - or if we're talking about a number based
02:50 - on if we see these extensions because
02:52 - someone could say you know what do I
02:53 - have on September 5 and that'd be easy
02:56 - for the program to detect because we
02:57 - could look for the number 5 but if they
02:59 - said the 5th
03:00 - we can't just determine if this string
03:02 - is digit because it has that th on it so
03:05 - we need to kind of slice through and
03:06 - figure out how we can detect what are
03:09 - actually numbers and what are actually
03:10 - days so that's what we're doing here
03:11 - okay so well after we add these up to
03:13 - the top here we can go back into our get
03:15 - date function and let me just scroll
03:17 - over here to look at what we need to do
03:19 - next okay so we're gonna start by just
03:20 - defining today's date and this is gonna
03:23 - be important because if we say something
03:24 - like you know what do I have on Sunday
03:26 - well that's two days away from now so we
03:29 - need to figure out you know where we're
03:30 - starting to get to Sunday right so we're
03:33 - gonna say today equals date time dot
03:37 - today actually
03:39 - sorry it's daytime date dot today and
03:42 - you guys should have already imported
03:43 - date time from the last tutorial but if
03:45 - you didn't just go to the top of your
03:46 - program and import date time like that
03:50 - okay so now that we have that we're
03:53 - gonna start doing is breaking up our
03:55 - text into all of the different words and
03:57 - figuring out what it does but the first
03:59 - thing I'm just gonna say is if the text
04:01 - dot count equals equals today we're
04:05 - simply just gonna return
04:07 - today's date so this is pretty much
04:09 - saying you know if we pass in some kind
04:10 - of text here and it contains the word
04:13 - today
04:14 - what am I saying if text uh County if
04:16 - text uh count today is greater than zero
04:20 - I'm sorry about that then we will return
04:22 - to
04:22 - and that just means you know if we see
04:24 - today then we're just gonna return
04:25 - today's date because that's probably
04:27 - what this person is talking about all
04:29 - right so next what we're gonna do here
04:31 - is just set up some variables to store
04:32 - the day the month the year and so on so
04:35 - we're gonna say day equals negative one
04:37 - because right now we don't have a day
04:38 - I'm gonna say day underscore of
04:40 - underscore week equals negative one
04:43 - we're gonna say month equals negative
04:46 - one and we're going to say year equals
04:48 - today dot year now cool thing whenever
04:52 - you define a date object like this you
04:54 - can actually call dot year month dot I
04:58 - guess day as well and and get that
05:01 - information so we're just doing assume
05:02 - that we're always talking about the
05:03 - current year unless we specify a month
05:06 - that is you know past the current year
05:09 - so let's say we're in like September and
05:10 - the user says January then we're going
05:13 - to assume they're talking about 2020
05:15 - January as that is what comes in the
05:17 - future and we'll get into that as we
05:20 - continue through this function so
05:21 - anyways we're gonna do now is just split
05:23 - up our text between to say forward in
05:25 - text dot split what this is gonna do is
05:29 - just split everything by spaces we get
05:31 - each word we're gonna say here is if
05:33 - word in months like this then we're
05:37 - gonna do is say months or not month will
05:39 - say month pools months dot index and
05:43 - then month plus one now let me just slow
05:46 - down here and kind of explain exactly
05:48 - what we're doing kissing gets confused
05:50 - so essentially what's gonna happen is we
05:52 - are going to ask the user to say
05:53 - something so maybe they say and I'll
05:55 - type it down here you know what do I
05:57 - have planned on when's our let's say
06:02 - like September 9th like that like maybe
06:07 - that's what they say right so we're
06:09 - gonna pass this string of text into this
06:11 - get date function what we're gonna do is
06:13 - initially make everything lowercase
06:14 - we're gonna get the current date we're
06:16 - gonna see if we talk about today
06:17 - anywhere in the string if we do we'll
06:19 - just return today's date otherwise we're
06:21 - gonna start looping through and looking
06:23 - for a few certain keywords so we're
06:25 - gonna look for the word September which
06:27 - is one of the months right or any of
06:29 - those months and if we find that what
06:30 - we're gonna do is figure out what index
06:33 - so what number correspond with that so
06:35 - in
06:35 - case we have all of our months ordered
06:37 - as the way they should be so if we find
06:39 - September then we know that that is the
06:41 - ninth month or like the 8th index
06:43 - because that's the 8th or the 9th
06:45 - element in our list so we go 0 1 2 3 4 5
06:48 - 6 7 H and that is the index right so
06:52 - that's how we can figure that out and
06:53 - we're gonna do the same thing for days
06:55 - as well so like Monday Tuesday Wednesday
06:57 - Thursday when we index those okay so now
07:00 - that we've done that so we understand
07:01 - how that works after we look for months
07:04 - we need to look for days so what we're
07:06 - gonna do now is say L if word in days
07:11 - then what we're gonna do is say day
07:13 - underscore of underscore week and we're
07:15 - gonna do the same thing here we're gonna
07:16 - say equals days dot index and in this
07:21 - case day erase it's work like that now
07:24 - we don't have to add one to this because
07:26 - the way that we actually do the days
07:28 - like in terms of Monday Tuesday
07:30 - Wednesday starts at index zero in the
07:32 - day time module but anyways you guys get
07:34 - the point the next thing we're gonna do
07:36 - here is say L if and in this case we
07:39 - find a digit so we're gonna say lef word
07:42 - dot is digits then what we're gonna do
07:47 - is simply say day equals int just like
07:53 - this int word so that means if someone
07:55 - said something like what do I have on
07:57 - Friday 9 I know that's a weird thing to
08:01 - say but like let's say they say that
08:02 - then what we'll do is say okay well if
08:04 - the word is just a digit and we parse
08:06 - through maybe we just see 9 all we'll do
08:08 - is just take that turn it into an int
08:10 - and say that's the day now the last
08:12 - thing we need to do here is let's say
08:14 - that we go through and we don't find any
08:15 - of those now what we're gonna look for
08:17 - is words that have one of these endings
08:20 - so our d th and st and if they do have
08:23 - that ending we're gonna take whatever
08:25 - the number is that's before that and use
08:28 - that as the day so this is a little bit
08:30 - more complicated where I say for EXT
08:31 - which i'm just going to say is like
08:32 - extension in day underscore extensions
08:36 - which is what i've called that list it
08:37 - has like th all those we're gonna say
08:39 - found equals word dot index or sorry i
08:43 - don't think we're going to index oh we
08:45 - could but let's say were defined EXT we
08:48 - just
08:48 - give us the start position or index of
08:52 - where we find that extension and then
08:53 - we're gonna say if found is greater than
08:56 - zero which essentially means if we're
08:58 - not at the very beginning of the list
09:00 - we're going to take what's before that
09:03 - word and turn that into a number
09:05 - actually yes I think I think that's what
09:11 - that's doing but I'm pretty sure what
09:12 - found is saying when it's greater than
09:14 - zero that means if we have something
09:16 - before that so if we have something
09:18 - before that we'll see if it's a digit
09:19 - and then try to turn it into a number
09:22 - and if we can then we use that as the
09:23 - day I hope that makes sense so I'm gonna
09:26 - do a try-catch here just because I don't
09:27 - want to bother having to write all this
09:29 - or try except so here we'll do pass like
09:35 - this but I'm just gonna say day equals
09:38 - int word Pollin found now the reason
09:43 - that this works is because we're gonna
09:44 - slice to where we found the extension so
09:47 - let's say you know like our word is like
09:48 - v well we're gonna find th right and
09:52 - that's gonna be at index 1 because we
09:53 - start we go 0 and then we go 1 so what
09:56 - we're gonna do now is we're gonna say
09:57 - okay well that's index 1 so let's go
09:59 - from index 0 to index 1 which is where
10:03 - this th starts and then take that number
10:05 - which is just the 5 here and store that
10:07 - in day so that's that's what we're doing
10:08 - for that ok so now that we've done that
10:11 - what we're gonna do here is continue on
10:13 - and actually figure out how we can get
10:16 - the correct date using the date/time
10:18 - module so so far all we've done is just
10:21 - started programming this function that's
10:22 - gonna take in you know this text and
10:24 - then figure out what day we're talking
10:26 - about and right here we're determining
10:28 - you know what days in the string what
10:31 - day the week is in the string and what
10:32 - month so that we can figure out what to
10:34 - do so that's in the next video where I
10:35 - can you this function and keep going
10:37 - there is quite a bit more to do so I
10:38 - just want to split this up into two
10:39 - sections
10:40 - um but yeah just make sure you guys head
10:42 - up to the next video to see how that
10:43 - works