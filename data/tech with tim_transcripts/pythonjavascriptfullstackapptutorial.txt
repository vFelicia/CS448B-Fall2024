00:00 - in this video I'll be showing you how to
00:02 - build a full stack application using
00:04 - both Python and JavaScript the idea here
00:07 - is to demonstrate how we design a larger
00:09 - piece of software that has both a front
00:12 - end and a back end now for the back end
00:14 - we'll use Python and flask and we'll
00:16 - build out an API we'll also connect that
00:18 - with the database and then for the front
00:20 - end we'll use react and JavaScript you
00:22 - don't need to be an expert in either of
00:24 - these Frameworks or languages but you
00:26 - should have some experience with both
00:27 - Python and JavaScript to make this a
00:30 - little bit easier to follow along with
00:32 - the main goal is to teach you how you
00:33 - design this system overall we're not
00:35 - going to make anything super complicated
00:38 - but you're going to see how we separate
00:39 - the responsibilities and the roles and
00:41 - you get a better sense of how these
00:43 - larger systems work and how we do
00:45 - interactions between two different
00:47 - software components this is going to be
00:49 - a really interesting video and this is
00:51 - really what's going to bring you from
00:52 - that beginner or intermediate level up
00:55 - to the point where you have some more
00:56 - comfortability building your own apps
00:58 - and designing different system systems
01:00 - and components so we'll get into the
01:01 - content but I do want to share with you
01:03 - that I am running a giveaway right now
01:05 - that will give you a chance to win an
01:06 - RTX 480 or some DLI credits courtesy of
01:10 - Nvidia now I've partnered with them for
01:12 - this video to promote the GTC this is
01:15 - the global technology conference it
01:17 - happens every year this year is
01:18 - happening from March 17th to 21st in San
01:21 - Jose California now there is actually an
01:24 - in-person event you can pay for tickets
01:26 - to enter that one or there is a
01:27 - completely free virtual component where
01:29 - you can can register for all kinds of
01:31 - great events workshops live sessions Etc
01:34 - and really learn about what's going on
01:36 - in the state of AI just to quickly give
01:38 - you a rundown we've got sessions on
01:40 - generative AI we have stuff for creators
01:43 - we have computer vision related sessions
01:45 - and then three sessions that I'm
01:46 - personally interested in are the
01:48 - following large scale production
01:50 - deployment of rag pipelines so talking
01:52 - about retrieval augmented generation and
01:54 - llms this has been a big interest of
01:56 - mine recently I've posted a bunch of
01:58 - videos on the channel they've also got a
01:59 - session on the future of extended
02:01 - reality and generative Ai and then one I
02:04 - think a lot of you guys will like which
02:05 - is exploring AI assisted developer tools
02:08 - really cool sessions I'll link them down
02:10 - below and if you're wondering how to
02:11 - enter the giveaway all you have to do is
02:13 - attend the GTC the virtual component of
02:16 - it is completely free and then I'll link
02:18 - a Google form in the description all you
02:20 - have to do is put in your email country
02:22 - of residence Etc so we know where to
02:24 - ship the GPU to if you win and then just
02:26 - attach a screenshot of you attending the
02:28 - GTC anyways that's it thanks to Nvidia
02:31 - for running this giveaway good luck to
02:33 - any of you if you do decide to attend
02:34 - the GTC just make sure you fill out this
02:36 - form so you can be entered in the
02:37 - giveaway and with that said let's get
02:39 - into the video okay so I'm on the
02:41 - computer now and I want to give you a
02:43 - quick demo of what it is that we're
02:44 - going to be building now keep in mind
02:46 - that this is a relatively simple
02:48 - application however the type of things
02:50 - that we're going to do here will really
02:51 - show you how you architect out a front
02:53 - end and a back end how they communicate
02:56 - with each other and that's really where
02:57 - the real value is it's not necessarily
03:00 - in the project obviously I could have
03:01 - made this a lot better but the idea is I
03:03 - want to give you a template I want to
03:05 - teach you the base and then allow you to
03:07 - extend this and go build your own
03:08 - applications rather than you guys
03:10 - watching me say style a web page for 3
03:12 - or 4 hours that's not going to give you
03:14 - the same value then it will be for me to
03:16 - actually show you all of the backend
03:17 - architecting how you design this how you
03:20 - set up the different endpoints how an
03:21 - API works that's what you're going to
03:23 - learn in this video so keep that in mind
03:25 - even though I know the finished project
03:26 - is a little bit boring regardless this
03:28 - is a contact list this uses a persistent
03:31 - database so if I refresh you can see
03:34 - everything is still here we have the
03:35 - ability to update delete create and
03:38 - fetch or to get the different entries so
03:40 - this is kind of a crud create read
03:42 - update delete application you can see
03:44 - here that I could go and maybe change
03:45 - the email to say Tim 2@gmail.com when I
03:48 - do that you'll actually see a
03:49 - corresponding request get sent to my
03:51 - back end which is running in the
03:52 - background if I want to create a new
03:54 - contact I can do that maybe Sarah I
03:57 - don't know let's go Jose I know that
04:00 - doesn't really make sense but we'll do
04:01 - it at
04:04 - gmail.com create new contact and if we
04:06 - want we can delete one of the contacts
04:08 - and as I showed you we can update so
04:10 - that's about it this front end is built
04:12 - in react it's pretty straightforward you
04:14 - can style it after if you want and it
04:16 - allows us to interact with the back end
04:18 - which is ritten in Python with flask so
04:21 - with all that said let me open up a new
04:22 - folder here and let's get started
04:24 - building out this application all right
04:27 - so I'm inside of Visual Studio code and
04:29 - we're going to go ahead and get started
04:31 - here now I've opened up a new folder
04:32 - called tutorial and I want to mention
04:34 - that if at any point in time you're
04:36 - getting stuck all of the code that I
04:38 - write in this video will be available
04:40 - from the link in the description now at
04:42 - this point I'm going to assume that
04:43 - you've installed both Python and node.js
04:46 - and you have worked with react and
04:48 - python before you don't need to be an
04:50 - expert if you're still beginner with
04:51 - those libraries it's fine but you should
04:53 - have seen them before used them a little
04:55 - bit because this isn't going to be a
04:56 - completely from scratch beginner
04:58 - tutorial I'm assuming that you're kind
05:00 - of more at that intermediate level feel
05:03 - free to follow along regardless but just
05:04 - want to mention that so that you don't
05:06 - get super intimidated as I go through
05:08 - now what we're going to do here inside
05:09 - this new folder I've opened in vs code
05:11 - is we're going to make a folder called
05:14 - backend now that we have back end that's
05:16 - where our backend and our python app is
05:18 - going to live and in our terminal we're
05:20 - going to create a new uh react
05:23 - application now as of 2024 the command
05:25 - to do this has changed I'm going to
05:27 - paste in the command because it's a
05:28 - little bit long this is npm create V
05:32 - Vite whatever you want to say at latest
05:34 - and then you're going to give the app a
05:36 - name in this case we're going to call it
05:38 - front end and then two dashes then--
05:41 - template react okay so go ahead and hit
05:44 - enter with this command and this should
05:46 - make a new folder for us you can see
05:48 - that we have the front end folder now it
05:50 - gives us some commands to actually run
05:52 - the front end so we can CD into front
05:54 - end and then we can type npm install to
05:57 - install the necessary packages so let's
05:59 - go ahead and do that okay so while that
06:01 - runs let's quickly talk about the order
06:03 - we're going to go in here we're going to
06:05 - start by building the back end now
06:08 - typically when you're building an
06:09 - application like this you want to build
06:10 - the API or the backend first and what
06:13 - this acts as is kind of the structure of
06:15 - the application and really the different
06:18 - operations that you can perform so in
06:21 - our case we're going to be creating a
06:22 - crud backend now this stands for create
06:24 - read update delete so we want to
06:27 - implement these four main operations in
06:29 - our case it's going to be on one
06:31 - instance or one object which is kind of
06:32 - a contact right we're creating a contact
06:35 - we're updating a contact we're deleting
06:36 - a contact or we are fetching or getting
06:39 - the different context now that's really
06:43 - all that we're doing here uh with the
06:44 - back end and what that involves is
06:46 - setting up some different Roots so some
06:48 - things that can be called now these
06:50 - roots or these end points can be called
06:52 - from really any type of application it
06:54 - doesn't have to be a react front end it
06:56 - could be any front end it could be
06:57 - another backend the idea is we create
07:00 - this protocol or this application
07:02 - programming interface that now defines
07:04 - the set of operations that our
07:06 - application has and then we can go
07:08 - Implement a nice front end we can build
07:09 - it in an app we can do really anything
07:11 - we want to call these different methods
07:14 - you'll see what I mean as we go through
07:15 - here but that's kind of the high level
07:17 - overview that you should understand at
07:19 - this point okay so now we're going to
07:21 - change directories and we're going to go
07:23 - into our backend directory so we go into
07:25 - the root directory and then CD into
07:27 - backend and we're going to install a few
07:29 - different python modules that we're
07:30 - going to need for this tutorial now the
07:33 - python modules we're going to need are
07:34 - the following we're going to say pip
07:38 - 3
07:40 - install and then flask now if you're on
07:42 - Windows it's probably going to be pip
07:44 - rather than pip three so this is going
07:46 - to install flask for us so let's go
07:48 - ahead and hit enter you can see I've
07:49 - already got that installed as well as
07:51 - flask we're going to need flask and then
07:53 - Dash SQL and then Alchemy now this is
07:57 - something known as an OM which is an
07:58 - object relational mapping which allows
08:01 - us to connect to a SQL database and kind
08:03 - of map the entries in SQL into a python
08:06 - object so we can operate on our objects
08:08 - quite a bit easier so we're going to pip
08:10 - install flask SQL Alchemy I already have
08:12 - that installed so I'm not going to
08:13 - install it and then we also going to
08:15 - install flask Das cores notice the
08:19 - capitalization is different here and
08:21 - this is going to allow us to have cross
08:23 - origin requests which we'll talk about
08:25 - when we get to that point so again you
08:27 - want flask flask SQL Alchemy and then
08:29 - flask course okay so install all of
08:32 - those and for your pip command that
08:34 - should be working if not you can also
08:36 - try python hyphen M pip install and
08:39 - always if you're on Mac or Linux it's
08:41 - going to be Python 3 whereas on Windows
08:43 - it's going to be python which makes my
08:45 - job a little bit harder to explain but
08:46 - hopefully you guys know the difference
08:48 - in those commands Okay so now that we
08:50 - have that we're going to go into backend
08:52 - and we're going to create a few files
08:54 - we're going to have
08:56 - main.py we're going to have models. pi
09:00 - and we're going to have config if we can
09:02 - spell this correctly dop okay now config
09:06 - config sorry is going to contain the
09:07 - main configuration of our application I
09:09 - like to separate this out in a separate
09:11 - file so it's nice and easy to see and to
09:14 - find main is going to contain our main
09:16 - roots or the main end points if we had a
09:18 - really large app we might separate this
09:20 - into multiple files but in our case it's
09:22 - pretty straight forward and the models
09:24 - is going to contain all of our database
09:26 - models so pretty much how we interact
09:28 - with the database when we use flask SQL
09:30 - Alchemy what we do is we create a python
09:33 - class which represents kind of an entry
09:35 - or a row in our database kind of like a
09:37 - table and we Define the different
09:39 - columns and data that this object will
09:41 - be storing okay so that's it for these
09:44 - files first thing we're going to do is
09:46 - we're going to go into config and we're
09:48 - going to configure our application
09:49 - remember we're building the API first
09:51 - which happens in flask so we're going to
09:54 - say from flask import flask with a
09:57 - capital f we're going to say say from
10:00 - flask underscore if we could spell this
10:03 - correctly and this is going to be SQL
10:05 - Alchemy import and then SQL Alchemy
10:09 - we're then going to say from flask cores
10:13 - Import in all capitals cores now this
10:15 - stands for cross origin request and what
10:18 - this allows us to do is send a request
10:20 - to this back end from a different URL
10:23 - Now by default uh when you send requests
10:25 - they're going to be kind of protected so
10:27 - that our server can't be
10:29 - hit from a different URL that might be a
10:32 - little bit confusing for you but in our
10:33 - case we have a front end which is a
10:35 - different server than the back end we
10:37 - want the front end to be able to
10:38 - communicate with the back end in order
10:39 - for that to work we're going to have to
10:41 - remove this kind of Coors error which
10:43 - can pop up so that's what this cores uh
10:46 - modules doing if you've never seen the
10:47 - error before it's going to be confusing
10:48 - if you have you'll know exactly what I
10:50 - mean okay so we're going to say app is
10:53 - equal to flask and then we're going to
10:54 - say underscore uncore name underscore
10:56 - uncore okay this initializes the flask
10:59 - application now that we have this we're
11:01 - going to have a few more things of
11:02 - configuration so we're going to wrap our
11:05 - app in course so just going to say cores
11:08 - and then app like this all that does is
11:10 - it's going to essentially disable that
11:12 - error for us so now we'll be able to
11:14 - actually send cross origin requests to
11:16 - our app next thing we need to do is
11:18 - initialize some database things so we're
11:20 - going to say
11:21 - app.
11:23 - config and then inside of set of square
11:26 - brackets we're going to say SQL Alchemy
11:29 - in all capitals uncore database
11:33 - URI is equal to and then this is going
11:36 - to be sqlite and then
11:39 - Colony database. DB what we're doing
11:43 - here is specifying the location of the
11:46 - local sqlite database that we're going
11:48 - to be storing on our machine so all
11:50 - we're doing is we're just storing
11:51 - essentially a file which is going to be
11:53 - a SQL light database this is really easy
11:55 - to work with in flask so we need to
11:57 - specify okay well where do we want to
11:59 - save it or what is the name of it so you
12:00 - always start that with SQL light colon
12:02 - SL slash and actually there's going to
12:04 - be three slashes my bad not two and then
12:07 - the name of your database which is my
12:08 - database. DB you can name this anything
12:11 - that you would like okay next we're
12:13 - going to say
12:15 - app. config and this is going to
12:18 - be
12:20 - SQL Alchemy assuming I spelled that
12:23 - correctly I think I did underscore track
12:27 - underscore modifications
12:29 - and for now we're going to make this
12:30 - equal to false now all this does is mean
12:33 - we're not going to track all of the
12:34 - modifications we make to the database uh
12:36 - you may want to enable that but for our
12:38 - development purposes it's just going to
12:39 - make our life a little bit easier so
12:41 - we're going to disable it last thing
12:43 - we're going to do here is we're going to
12:44 - create an instance of the database we're
12:47 - going to say TB is equal to SQL
12:50 - Alchemy and then we're going to pass our
12:52 - app now what this is going to do is
12:54 - create a database instance which gives
12:56 - us access to the database that we
12:57 - specified here so we can create modify
13:00 - delete Etc and you're going to see how
13:02 - easy it is to do that using this
13:04 - database object from flask SQL Alchemy
13:07 - again what this acts as is an orm object
13:10 - relational mapping meaning we can have a
13:12 - python class that just normal python
13:15 - code and and using normal python code
13:17 - sorry we can modify this SQL database
13:19 - because pretty much any command we
13:21 - perform will be kind of translated for
13:22 - us automatically into SQL and then apply
13:25 - to the database making our life really
13:28 - really easy easy okay so that is
13:31 - config.py next thing we're going to do
13:33 - is we're going to start defining our
13:34 - database models now notice the order
13:36 - that I'm going in here right I start
13:38 - with my configuration then I'm going to
13:40 - go to my database the reason I do this
13:43 - is I want to know the different piece of
13:45 - data that I'm going to be working with
13:46 - so that when I start writing my code I
13:48 - already have that out of the way so I
13:51 - start with my basic configuration okay
13:53 - this happens first that makes sense next
13:55 - we do our database models and now we'll
13:57 - know what kind of field we need how
13:59 - we're going to be adding them how we're
14:01 - deleting them different keys that we
14:02 - might want to check so always kind of
14:05 - start with the data first and then once
14:06 - you know the different data you're going
14:08 - to have you can start creating different
14:09 - views that will allow you to create that
14:11 - data or modify that data which is really
14:13 - what the API is going to be responsible
14:15 - for doing so what we're going to do here
14:18 - is we're going to say from config import
14:21 - DB now this is a uh relative import and
14:24 - this is happening from this config file
14:26 - so we're saying okay we have this config
14:27 - python file it's got this DB um variable
14:30 - we're going to import that because this
14:32 - is the instance which is going to give
14:33 - us access to SQL Alchemy now we're going
14:36 - to create a
14:38 - class and this class is going to be
14:40 - called Contact and it's going toer
14:42 - inherit sorry from db. model so what
14:45 - we're saying is this is going to be a
14:46 - database model represented as a python
14:49 - class and now in Python code we can
14:51 - Define the different fields that this
14:54 - object will have so first we're going to
14:56 - have an ID you always need to have an ID
14:58 - for all of your database instances so
14:59 - we're going to say idid is equal to db.
15:03 - column and inside of here we're going to
15:05 - specify the type of the field which is
15:07 - going to be an integer next we're going
15:10 - to say the primary undor key is equal to
15:14 - true and what this means is that this is
15:16 - the key we're going to use to Index this
15:18 - and it must be unique for every single
15:21 - entry inside of the database we're then
15:23 - going to specify the other things that
15:24 - we want to store for a contact now for a
15:27 - contact we're going to have a first name
15:28 - a last name and an email that's it we
15:30 - could add a lot more later if we want I
15:32 - just want to keep it nice and simple so
15:33 - I'm going to say
15:35 - db. column and then here we're going to
15:38 - say that this is db. string and whenever
15:41 - you specify a string column you have to
15:43 - give it a maximum length so in this case
15:45 - we'll give it a maximum length of 80
15:48 - we're then going to say unique is equal
15:50 - to false and
15:53 - nullable is equal to false now what that
15:56 - means is that you cannot pass a null
15:58 - value so let me just make this a little
15:59 - bit easier to read here so if you try to
16:02 - make the um first name null you're going
16:04 - to get an error so you have to pass
16:05 - something for first name that's all
16:07 - knowable does now we're going to copy
16:09 - this twice and paste it down here for
16:12 - this one we're going to change it to
16:13 - last name and it's going to stay exactly
16:15 - the same because we just want the same
16:16 - field but for the last name then we're
16:19 - going to have an email so we're going to
16:20 - say email is equal to this and what
16:22 - we'll do is make the email unique so
16:25 - that no two contacts can have the same
16:26 - email and then what we're going to do is
16:28 - just make this a little bit longer and
16:30 - we'll say okay the maximum length for an
16:31 - email we'll make it 120
16:34 - characters okay so that's about it the
16:37 - next thing we're going to do is Define a
16:39 - function here called 2or Json and this
16:43 - is going to be something that can take
16:45 - all of the different fields that we have
16:47 - on our object here and convert it into a
16:49 - python dictionary which we can then
16:51 - convert into Json which is something we
16:53 - can pass from our API so when we build
16:56 - an API typically the way we communicate
16:58 - is we use something known as Json Json
17:00 - is a JavaScript object notation and it
17:02 - really just looks like a python
17:04 - dictionary so what we'll be doing is
17:05 - we'll be passing Json back and forth so
17:08 - the API will return Json and then we
17:11 - will send Json to the API for creating
17:13 - our different objects so what I want to
17:15 - do is say okay I've got all these
17:16 - different fields that I'm storing in my
17:18 - contact but now I want to make it so
17:20 - that I can convert them all into this
17:22 - Jon object so it's really easy for me to
17:24 - take a contact and give that to the
17:26 - front end or to anyone who's requesting
17:28 - to get our different context so what
17:30 - we're going to do is say return we're
17:32 - going to return a python dictionary and
17:34 - we're going to say ID is equal to self.
17:37 - ID we're going to say first name like
17:41 - this is equal to self. first name we're
17:45 - going to say last name is equal to self.
17:48 - last name and then email is equal to
17:52 - self. email now quick pause here you'll
17:55 - notice that what I did is I pretty much
17:56 - just wrote the same field names except
17:58 - in camel case without any spaces or
18:01 - anything and then Associated it with
18:02 - their value now the reason I'm using
18:04 - camel case here is because when we use
18:07 - Json the convention is to have camel
18:09 - case Fields so camel case is just like
18:11 - the word and then you have a capital
18:13 - letter on the next word whereas snake
18:15 - case which is what we're using here is
18:17 - the convention for python so it gets a
18:19 - little bit confusing but when we're
18:20 - writing python code so a variable like
18:22 - this we do it in snake case when we're
18:24 - working with Json or when we're going to
18:26 - be kind of returning value from our API
18:29 - we want to do this in camel case so that
18:31 - it matches the convention of Json data
18:34 - it's kind of just a style thing it
18:36 - doesn't really matter how you do it but
18:37 - I just wanted to mention uh why we have
18:39 - that all right so that's it for our data
18:41 - so we have our data and we have our
18:43 - configuration and now we're going to go
18:44 - into Main and we're going to start
18:46 - writing different roots that we need now
18:48 - before I start writing anything I like
18:50 - to kind of figure out what are the
18:52 - different endpoints or rootes that I
18:53 - want for my API to access different data
18:56 - resources to create resources Etc now in
19:00 - our case we want a crud app which is
19:02 - create read update delete so we need an
19:05 - operation for creating for reading or
19:07 - getting for updating and for deleting so
19:09 - we can kind of write those out in some
19:11 - comments right we can start by saying
19:12 - okay well we want to create and then we
19:15 - have to specify when we create what do
19:17 - we need well to in order to create a
19:19 - contact we need our first name
19:23 - right we need our last name and we need
19:27 - our email so what that tells me is that
19:30 - when I submit a request and I'll talk
19:32 - about this request and response
19:33 - structure in just a second to the create
19:35 - endpoint I need to pass these different
19:38 - values now let's quickly talk about this
19:40 - because I want to make sure I'm not
19:41 - confusing a lot of you with end points
19:43 - so when we create an API what we
19:45 - typically have is a server that's
19:47 - running the API now the server has some
19:49 - kind of address in our case the address
19:51 - is going to be something like Local Host
19:53 - colon 5000 because we're running this on
19:55 - our local machine now this is the domain
19:57 - or the servers URL if we're talking
19:59 - about other like websites you've gone to
20:02 - something like google.com right that is
20:04 - the domain or the URL now an endpoint is
20:07 - simply anything that comes after this
20:09 - domain so if I have Local Host col 5000
20:12 - slome the endpoint is home right so
20:15 - we're going to the home endpoint so in
20:17 - our case we're going to have a create
20:19 - endpoint right we'll probably call it
20:20 - something like create contact now what
20:23 - I'm saying is when we hit this endpoint
20:24 - or when we submit a request to the
20:27 - endpoint we're we going to have to
20:28 - submit some data alongside just the
20:31 - endpoints we're saying okay yes we're
20:32 - going to go to this endpoint but we want
20:34 - to create the contact what do we need
20:36 - for that we need the first name last
20:38 - name and we need the email now let's
20:40 - quickly talk about request and
20:43 - response a request is anything that we
20:46 - send to some kind of server in our case
20:48 - an API now what we're doing is we're
20:51 - requesting something to happen and our
20:53 - request has a type now this type can be
20:57 - one of many different things but the
20:58 - typical ones are going to be the
21:00 - following the first type that's very
21:02 - common is a get request now a get
21:04 - request means that we're trying to
21:05 - access some type of resource so it just
21:07 - means we want to get something we want
21:09 - to retrieve something another type of
21:11 - request we have is a post request a post
21:14 - request means we're trying to create
21:16 - something new so in the case where we
21:18 - are using create contacts when we send a
21:20 - request here the type of our request is
21:22 - going to be a post request because we
21:24 - want to create a new contact now we also
21:27 - have a
21:28 - put or a patch request now this is
21:32 - something that you use when you want to
21:33 - update something so I want to maybe
21:35 - update a contact so I'm patching it I'm
21:37 - changing it we then have a delete
21:40 - request and we have a bunch of other
21:41 - requests as well that you can use but
21:43 - these are the four most common ones now
21:45 - as well as the type we also have some
21:47 - other data that we can send and one of
21:49 - this piece of data can be Json data now
21:52 - Json data is exactly what I kind of
21:54 - wrote out before and it's information
21:56 - that can comes alongside our request
21:58 - that's going to be used while we're
22:00 - handling the request to do something so
22:01 - in this case we want to delete a contact
22:04 - well we need to pass the type of contact
22:05 - we want to delete or what contact it is
22:07 - right in the case where we want to
22:09 - create a contact we need to pass the
22:10 - data to create the contact so that is
22:12 - the really Basics on a request we send a
22:15 - request in our case the front end is
22:17 - going to send a request to our back end
22:19 - and the back end is going to return a
22:23 - response now a response will contain a
22:25 - few things it's going to contain a stat
22:28 - stat and the status specifies if the
22:30 - request was successful so a status of
22:33 - 200 means success and you may have seen
22:35 - a status like 44 before and that means
22:37 - not found right so when you see those
22:39 - 404 pages that means hey you went to a
22:42 - URL you tried to receive some HTML to be
22:45 - rendered on your screen but it wasn't
22:46 - found so what did you get you got a
22:48 - status of 404 you know request not found
22:51 - right we were not able to do this
22:53 - because what you requested didn't exist
22:55 - we also have things like 400 which is
22:57 - bad request we have stuff like 403 I
22:59 - believe which is forbidden or
23:01 - unauthorized there's all different types
23:03 - of response statuses or codes that we
23:05 - can use to indicate what happened we
23:07 - also can return some Json so in the case
23:10 - where we maybe want to get a contact
23:13 - then when we have a response we're going
23:15 - to be responding with a Json which is
23:17 - equal to whatever that contact is
23:20 - hopefully this is making a little bit of
23:21 - sense but the idea is we have these
23:22 - different endpoints right they're just
23:24 - code written in Python they can handle a
23:27 - request which will come from some
23:29 - external Source in our case the front
23:30 - end or a website and then our API is
23:33 - going to return a response which
23:35 - contains how that request was handled
23:37 - it's going to say yes this was
23:38 - successful here's the result you're
23:39 - looking for or no there was some kind of
23:41 - error so that's what we're building here
23:43 - we're building this API and this
23:45 - structure so let's get started doing
23:47 - that and I promise it'll start to make a
23:48 - bit more sense so I'm going to say from
23:51 - flask
23:54 - import request and Json ify now what
23:58 - jsonify will do is allow us to return
24:00 - Json data which you've kind of already
24:02 - seen we're then going to say from config
24:06 - import the app and import our database
24:10 - and we're going to say from Models
24:13 - import the contact model so from config
24:17 - we're importing the app and we're
24:18 - importing our database from Models we're
24:20 - importing contact and then from flask we
24:23 - just need this request object and we
24:24 - need jsonify okay now first thing we
24:27 - need to do is we need to run our flask
24:29 - application so we're going to say if the
24:32 - name is equal toore maincore underscore
24:36 - keep in mind these are two underscores
24:38 - here then what we're going to do is say
24:40 - app. run and then debug equals true now
24:44 - what this checks is if we're running
24:46 - this file directly so it means hey if
24:48 - you actually ran
24:50 - main.py then execute the code that's
24:52 - inside of here this essentially avoids
24:54 - us running this code if we were to maybe
24:56 - import something from this file instead
24:58 - because in Python when you import
25:00 - something from a file it's going to
25:01 - execute all of the code in that file but
25:03 - when we have this line it kind of
25:05 - protects us from that which means hey if
25:07 - we import this file don't do this but if
25:09 - we run the file directly do this now
25:11 - another thing we need to add here is we
25:13 - need to instantize our database now I
25:16 - know I butchered that word but you get
25:18 - the idea so we're going to say with
25:20 - app.app
25:21 - uncore
25:23 - context db. create all now what this
25:28 - does is say okay right when we start the
25:31 - application or we're about to start the
25:32 - application we're going to get the
25:34 - context of our application don't worry
25:36 - too much about this code I'm not going
25:37 - to explain in depth how it works then we
25:39 - have db. create all now what this says
25:42 - is go ahead and create all of the
25:44 - different models that we have defined in
25:47 - our database Now it only does this if
25:49 - they're not already created but the idea
25:51 - is we need to actually spin up the
25:53 - database if it doesn't already exist so
25:55 - that's what this code is doing here it's
25:56 - saying okay do we already have the
25:57 - database well if we don't we got to
25:59 - create it so let's go ahead and do that
26:01 - then we start running the code and that
26:03 - will run all of our different endpoints
26:05 - and our API okay so let's begin by just
26:09 - writing the um get method okay so the
26:13 - first thing we'll want to do right is
26:14 - like get some context so how do we get
26:16 - these different contexts and I want to
26:18 - show you how that works so we're start
26:20 - by saying at app. root and then inside a
26:24 - set of parentheses here we specify the
26:26 - root or the end point that we're going
26:28 - to go to so I'm going to say slash
26:32 - context then beside this we're going to
26:34 - say methods equal to a list and we're
26:37 - going to specify the valid method types
26:40 - okay before I go any further let me
26:42 - explain this this here is something
26:43 - known as a decorator now this goes above
26:46 - a function which we're going to write in
26:47 - a second you don't need to know exactly
26:49 - how it works but you just know the name
26:50 - decorator inside of here right CU we're
26:53 - saying okay we're creating a new route
26:55 - we specify what route we're going to go
26:57 - to in this case B it's SL contacts and
26:59 - then we specify the valid methods and
27:01 - remember I was telling you we have
27:02 - methods like post delete patch Etc but
27:04 - those are only valid for certain URLs in
27:07 - our case we only want to be able to use
27:09 - the get method for this URL so that's
27:11 - what we're doing now beneath here we're
27:13 - going to write a function so we're going
27:14 - to say Def and then
27:16 - getor context you can call this function
27:19 - anything you want so long as it's Unique
27:21 - and then inside of here we can actually
27:23 - specify how we want to handle a get
27:26 - request that is sent to the route so
27:28 - what I'm going to do is say contacts is
27:32 - equal to
27:34 - contact. query and then
27:37 - doall now what this does is it uses
27:40 - flask SQL Alchemy which is our om to get
27:44 - all of the different context that exists
27:46 - inside of the contact database that's
27:48 - all it's doing it's just getting all of
27:49 - the different contacts and I told you
27:51 - it's super easy to do that so it gives
27:53 - us a list of all the different contacts
27:55 - the issue is these contacts are python
27:58 - objects right like they look like this
28:00 - they're python object that have the
28:02 - fields ID first name last name email now
28:04 - we can't return python objects from our
28:07 - code what we can return instead is Json
28:10 - data so what we need to do is take all
28:12 - these python objects and we need to
28:14 - convert them into Json now that's why we
28:16 - wrote this two Json method here that
28:18 - we're going to use from main.py so I'm
28:21 - going to do a little bit of fancy python
28:23 - here but what we're going to do is say
28:26 - Json _ contacts are equal to and I'm
28:30 - going to use this map function now in
28:32 - the map function I'm going to pass a
28:34 - function which is Lambda I'm going to
28:35 - talk about this in a second I'm going to
28:37 - say Lambda X and then
28:39 - x. 2or Json and then I'm going to pass
28:44 - my
28:45 - contacts okay what is this doing well
28:48 - our contacts is a list of contact
28:51 - objects we know that all of these
28:53 - contact objects have the 2 Json method
28:56 - so what we need to do is call them call
28:57 - that method sorry for all the different
28:59 - contacts and then create a new list that
29:01 - just contains the uh Json for the
29:03 - contact so what map does is it takes all
29:07 - the elements from this list and applies
29:09 - a function to them and gives us the
29:11 - result in a new list now the function
29:13 - we're using here is just known as a
29:15 - Lambda function it's just a shortcut for
29:17 - writing a function in one line you say
29:19 - Lambda you specify a variable in this
29:21 - case it's the parameter and then you can
29:23 - use that parameter and call anything you
29:25 - want so in this case X is always going
29:27 - to be of the contacts from our list
29:28 - we're going to call to Json on that
29:30 - contact and then it's going to put it
29:32 - inside of a new list the only thing is
29:34 - this map actually returns a new map
29:37 - object what we want instead is a list so
29:39 - we're just going to convert this to a
29:41 - list nice and easily like that okay now
29:44 - what we're going to do is we're going to
29:46 - say return and we're going to say
29:48 - jsonify and we're simply going to return
29:50 - a Json object that says context and that
29:53 - is equal to Json context what we're
29:56 - doing so saying okay we have this
29:58 - context key in our python dictionary
30:00 - it's going to be associated with the
30:02 - Json context which is what we just
30:04 - created here which is a list of all the
30:06 - contacts we have this python uh
30:08 - dictionary object we convert it into
30:10 - Json data using this jsonify function
30:13 - and that's it that's all we have to do
30:15 - so now if we run our code I'll show you
30:18 - how this works so I'm going to clear I'm
30:21 - going to type Python 3 main.py now if
30:25 - you're on Windows it's just going to be
30:26 - python
30:27 - notice that it's going to start running
30:29 - our server so let's bring this up here
30:30 - it says this is a development server
30:32 - blah blah blah and then it gives us the
30:33 - URL so we can copy the URL here which
30:36 - just Local Host Port 5000 and if we open
30:39 - up a new browser window so let's open up
30:42 - one here let me just make this a new tab
30:44 - so it's a little bit easier to see okay
30:46 - you can see that I pasted the URL in
30:48 - here and now I'm going to go to slash
30:50 - contacts because contacts is the get URL
30:54 - and I'm going to hit enter and notice
30:55 - that we get this response it says
30:57 - contacts and it's an empty list so what
30:59 - we did when we use the browser here by
31:02 - default is we send a get request to any
31:04 - URL that we put here so we put the URL
31:06 - of our server we put the endpoint which
31:08 - is/ contacts and then it gave us this
31:10 - Json reply which is contacts well we
31:13 - don't have any of those yet okay there
31:16 - you go that is how it works for actually
31:19 - getting the context so now we can shut
31:21 - the server down if we want by hitting
31:22 - contrl + C we don't have to it will
31:25 - actually Auto refresh I'll just shut it
31:27 - down for now and we'll start writing the
31:28 - other roots for actually creating
31:30 - updating Etc the contexts all right so
31:33 - we're back here and now we'll write the
31:34 - root for creating the context now to do
31:37 - that we're going to say at app. Roots
31:40 - we're going to say this is going to be
31:42 - slash
31:43 - creatore contact and this time the
31:46 - methods that will be allowed will be
31:48 - post because we're going to be creating
31:50 - which is the post method right so now
31:53 - inside of here we need to write a
31:54 - function so we're going to say Define
31:55 - create under _ contact and what we need
31:59 - to do is we now need to get the data
32:02 - associated with the contact we want to
32:03 - create now remember I said that with
32:05 - request we can submit Json data so what
32:08 - we're going to do is look at that Json
32:09 - data that was submitted here and we're
32:12 - going to make sure that it's valid for
32:13 - creating our contact and let me zoom out
32:15 - a little bit just so it's bit easier to
32:16 - read some more code notice that we have
32:19 - this request object imported from flask
32:21 - so we're going to start using that we're
32:23 - going to say first uncore name is equal
32:25 - to request do Json
32:29 - doget and we're going to get the first
32:32 - name property now we're going to do the
32:34 - exact same thing for the last name okay
32:36 - so this equal to
32:38 - request. Json doget and then last name
32:42 - and then we're going to do the same
32:43 - thing for email which is request. json.
32:48 - getet and then email okay so all we're
32:51 - saying is okay let's look in the Json
32:52 - data we're going to use do get because
32:54 - we don't know if this key is going to
32:56 - exist or not and if it doesn't exist
32:57 - it's going to return none otherwise it's
32:59 - going to give us the value of the first
33:00 - name last name and email key now we want
33:03 - to make sure that all these values exist
33:04 - because if they don't exist then we
33:06 - can't make a contact so we're going to
33:08 - say if not first name or not last name
33:13 - or not email okay then we're going to
33:17 - return essentially an error message
33:19 - saying hey this didn't work so we're
33:20 - going to say return jsonify and we're
33:22 - going to put inside of here a string
33:24 - that says message and that says you
33:28 - must include a first
33:31 - name last name and email and then we are
33:36 - going to specify the response error code
33:39 - which is 400 standing for bad request at
33:42 - least I believe that's what the correct
33:44 - message is so again we're saying okay if
33:46 - you did not give us first name you did
33:48 - not give us last name or you did not
33:49 - give us an email we're going to return
33:51 - an error response here the way we do
33:53 - that is we return a Json message so we
33:56 - say hey here's the message so that you
33:57 - can read it and then we actually do a
33:59 - comma and we return 400 and that says
34:02 - what the status message of the request
34:05 - is now by default it's going to be 200
34:07 - so here I could have just put 200 and
34:09 - that means success okay we don't need to
34:11 - put that though because that's the
34:12 - default if you don't include it whereas
34:14 - in this case we want to tell them hey
34:16 - this didn't work so we're manually
34:17 - specifying 400 okay so now if that was
34:21 - not the case what that means is that we
34:22 - did have valid first name last name and
34:24 - email if that is the case we need to
34:26 - make make a new contact add that in the
34:29 - database and then tell them hey this
34:30 - worked right this was good so we're
34:32 - going to say newor contact is equal to a
34:38 - contact and we're going to specify our
34:40 - values we're going to say first name is
34:41 - equal to first name last name is equal
34:43 - to last name and email is equal to email
34:47 - so notice that for all the fields here
34:49 - right other than the ID because this
34:50 - will be autogenerated for us first name
34:53 - last name and email I'm just passing
34:55 - those into the Constructor of my contact
34:57 - so now I create this new contact object
34:59 - that has these different fields and what
35:01 - I can now do is I can add it to my
35:03 - database now to do that I'm going to do
35:05 - a try and accept block so I'm going to
35:07 - say try db. session. add new contact
35:12 - then I'm going to say
35:14 - db. session. commit and then I'm going
35:18 - to say accept exception as e and then
35:22 - what we're going to do is say return
35:25 - jsonify
35:27 - don't worry I'll slow down here in a
35:28 - second we're going to say message is the
35:31 - string of e and then we're going to
35:33 - return the status code of
35:36 - 400 okay so let's quickly break this
35:38 - down when we want to add a new entry to
35:41 - the database we just create the python
35:43 - class corresponding to that entry we
35:46 - then add it to the database session once
35:49 - it's added it's kind of in the staging
35:51 - area so it's not yet actually been fully
35:53 - written to the database it's just ready
35:54 - to write to the database then we commit
35:58 - when we commit that means okay anything
35:59 - in the session go ahead and actually
36:01 - write that into the database permanently
36:03 - which is what commit does now the thing
36:05 - is errors can occur when we do this so
36:07 - we put it inside of a try accept blocked
36:09 - and in the accept block we just catch
36:11 - any exception and if there's an
36:13 - exception we simply return that as a
36:14 - Json message to the user telling them
36:17 - hey sorry you know something went wrong
36:19 - status code 400 great now if we get past
36:23 - the tri accept block what we can do is
36:26 - say return
36:27 - jsonify and we can say message and we
36:30 - can just do something like user created
36:33 - and then we can return a status code of
36:35 - 201 which stands for created okay it can
36:38 - be 200 as well but 2011 is a little bit
36:40 - more specific so what we're doing is
36:42 - saying okay well we handled all the
36:44 - errors if no errors occurred we're going
36:46 - to tell you that yes this did indeed
36:48 - work we're going to return to a one and
36:50 - now you've created a new contact so
36:52 - there you go that's how that works now
36:54 - the thing is for us to actually be able
36:55 - to test this it's a a little bit
36:57 - complicated so I'm not going to test it
36:59 - right now um what I'm going to do is
37:01 - just write the other roots and then once
37:03 - we have these roots you just kind of
37:04 - have to trust me that they work and we
37:06 - will test them from the front end but I
37:08 - don't want to get into using postmen
37:10 - doing all this other stuff that's going
37:11 - to just take us a lot of time and not
37:13 - really necessary for such simple Roots
37:15 - however usually what you would want to
37:17 - do is test your API before you even
37:20 - start working on the front end so you're
37:21 - going to want to ensure hey everything
37:23 - that I wrote here in the back end is
37:25 - working I'm able to create my data
37:27 - delete it update Etc now that I have all
37:29 - my data related stuff done we're going
37:31 - to go to the front end we're going to
37:32 - make it nice and pretty and we're going
37:33 - to interact with the backend API now in
37:36 - order to do that there are tools and one
37:39 - of the tools you can use is called
37:40 - Postman Postman allows you to send these
37:43 - more specific requests like post
37:44 - requests with Json data to an API
37:47 - especially in a development environment
37:49 - to test it out in our case we don't want
37:51 - to get into that cuz it's going to be a
37:52 - bit more complicated so we're just going
37:54 - to write the next route okay so this is
37:56 - create contact pause the video if you
37:58 - need to okay so after creating we want
38:01 - the ability to update however when we
38:05 - update we need to know what contact it
38:07 - is that we are updating and then we need
38:09 - to have some data that we're going to
38:11 - perform the update with so maybe we're
38:12 - updating the name the email we don't
38:15 - know so keep that in mind as I write
38:17 - what's going to happen next I'm going to
38:18 - say at app. root this is going to be SL
38:21 - update contact and then what I'm going
38:24 - to do is specify a path parameter here
38:26 - which indicates the exact context we
38:29 - want to update so I'm going to say int
38:32 - colon user ID now what this is doing is
38:36 - saying okay we need to pass to this
38:39 - route update contact and then a number
38:43 - indicating the ID of the user that it is
38:46 - we want to be updating so what that's
38:48 - going to look like if we call this is
38:52 - slash update contact slash1 or slash 9
38:56 - or whatever the ID of the user is we
38:58 - want to update and then beneath that we
39:01 - will actually grab any of the update
39:03 - information and then update the contact
39:05 - so to do this we're going to say Define
39:08 - update
39:09 - contact we're going to take in user ID
39:12 - and notice that the variable name here
39:15 - matches whatever the path parameter is
39:17 - that I specified here okay now I'm going
39:20 - to say contact is equal to
39:24 - contact. query
39:27 - doget with user ID now what this is
39:30 - doing is saying okay I want to look in
39:31 - my contact database and I want to find
39:33 - the user that has this ID because in
39:36 - order for us to update a user it needs
39:37 - to exist so the first thing we're doing
39:39 - is looking for the user and now we're
39:41 - going to check if the user doesn't exist
39:43 - so we're going to say if not contact so
39:45 - if no user with that ID exists return
39:49 - jsonify and then we're going to say
39:51 - message and then this is going to be
39:54 - user not found like that and also this
39:59 - reminds me that for the root we're going
40:01 - to need to specify the valid methods so
40:03 - we're going to say methods is equal to a
40:04 - list and for this one uh we'll actually
40:06 - put patch as the method we can change it
40:09 - later if we want it could be post as
40:11 - well but patch is fine okay and for the
40:14 - status code we're going to go 404
40:16 - actually because we're saying hey we did
40:18 - not find the contact now if that's not
40:21 - the case and we did find the contact
40:23 - we're going to start pursing through the
40:24 - Json data so we're going to say data is
40:26 - equal to request. Json and now we're
40:29 - going to get the first name last name
40:31 - email Etc so what we're going to do is
40:34 - say
40:36 - contact. first name is equal to data
40:42 - doget first name like that and then
40:45 - comma contact do first name now what
40:51 - this is doing is the following we're
40:52 - saying okay we're going to modify this
40:54 - contacts first name to be equal to
40:57 - whatever the Json data first name is
41:00 - that was given to us so if you gave us a
41:03 - new first name essentially we're going
41:05 - to use that to update the first name
41:07 - otherwise we're just going to leave it
41:09 - at whatever it was now the way the doget
41:11 - works is it looks for a key inside of a
41:15 - dictionary which is what this will be if
41:16 - the key exists it returns to us that
41:19 - value if it doesn't exist it instead
41:22 - returns whatever the second parameter is
41:24 - inside or the second argument is sorry
41:26 - inside of the get function so in this
41:28 - case if first name exists gives us a
41:30 - first name if it doesn't we just keep
41:32 - whatever the first name was for the
41:34 - contact now we're going to do the same
41:36 - thing for the last name we're going to
41:39 - say this equal to data.
41:41 - getet last name and then
41:44 - contact. last name and then you guess
41:47 - that we're going to do the same thing
41:48 - for the email so contact. email is equal
41:50 - to data doget email and then contact
41:56 - email so this way whatever it is that
41:59 - they pass here is what we're going to
42:01 - update so if they give us a new first
42:02 - name we update just the first name if
42:04 - they give us first name and a last name
42:05 - we update those it handles any possible
42:08 - combination of the different data they
42:10 - could be passing us because they may
42:11 - only update one field they may not
42:13 - update all of them right which is what
42:15 - we're kind of checking now what we've
42:17 - done is we've modified the contact what
42:20 - we can simply do is db. session. commit
42:24 - and since this contact already existed
42:27 - it's already added in the session so
42:29 - when we commit the session it makes that
42:31 - change
42:32 - permanently we then can say return
42:35 - jsonify like this and we can pass again
42:38 - a message and the message can say user
42:42 - updated like that and then we can just
42:44 - return 2011 for success I believe
42:46 - there's another exact uh status code we
42:48 - could use but I think 200 is totally
42:50 - fine okay so that's it for updating
42:53 - creating and getting last thing we need
42:56 - to do is handling deleting so let's do
42:58 - that and then the API will be finished
43:00 - and we can go over to the front end
43:01 - which is where we'll actually see the
43:02 - interact ability here in our application
43:05 - okay so let's write another rout we're
43:07 - going to say at app. root and this is
43:10 - going to be SL delete contact and same
43:13 - thing we're going to specify a path
43:15 - parameter here for the ID of the contact
43:17 - we want to to leave this will just be
43:19 - user ID now for the methods we'll say
43:21 - methods are equal to a list and this
43:24 - time it's going to be the delete method
43:27 - okay now we're going to Define our
43:29 - function we're going to say delete
43:31 - contact and then this is going to be
43:33 - user uncore ID and similarly to before
43:36 - we're just going to copy this exact code
43:38 - which is going to give us this
43:40 - contact so we're going to paste that in
43:43 - we're going to say okay let's look for
43:44 - the contact with the user ID if it
43:46 - doesn't exist we're going to return 404
43:48 - otherwise we'll simply delete it and
43:50 - deleting it is quite easy we're going to
43:51 - say db.
43:53 - session. delete and we're going to
43:55 - delete delete this contact and then db.
43:59 - session do commit and then again return
44:03 - and this is going to be
44:05 - jsonify of a message and the message is
44:09 - going to say user
44:12 - deleted okay and then status 200 okay
44:16 - that's it that finishes our API so if
44:19 - you need to pause the video finish
44:21 - coding this out of course you can also
44:23 - reference the code from the link in the
44:24 - description we can quickly run through
44:26 - it we have the ability to get where we
44:28 - query all the contacts we just convert
44:30 - them into Json and return them we have
44:32 - the ability to create this is a post
44:34 - request we get all of the Json data we
44:37 - make sure that we do actually have a
44:38 - first name last name email then we
44:40 - create the new contact add it into the
44:42 - session and then tell them hey this was
44:44 - created for updating we need to know the
44:46 - contact we're updating so we get the
44:47 - contacts ID we use that to get the
44:50 - specific contact we then update the data
44:53 - did not mean to do that and then same
44:55 - thing for delete we get the contact we
44:58 - delete it and we return our success
45:00 - message so what I want to do now is I
45:02 - want to move over to the front end we're
45:04 - going to start coding this out and we're
45:05 - going to see how to interact with this
45:07 - back end all right so I've just expanded
45:09 - the folder here for front end and we're
45:11 - going to start just cleaning this up a
45:13 - little bit and then we'll start writing
45:15 - a few different components that we need
45:16 - now it's not a ton of code but what we
45:18 - want to do is be able to interact with
45:19 - the back end by pressing buttons using
45:22 - input Fields Etc so what I like to do
45:25 - right away is go to source and just
45:26 - start deleting a few things that we
45:28 - don't need so for example in assets we
45:30 - can just delete this folder we don't
45:32 - need that I want to go to main. jsx
45:35 - actually this looks good we're going to
45:37 - go to
45:38 - app.jsx and we're going to remove the
45:40 - import of the v logo and the assets here
45:44 - we're then just going to delete
45:45 - everything inside of here except for
45:47 - this fragment and we'll get rid of that
45:50 - okay so that's what we want for app now
45:52 - for public we can delete this logo we
45:56 - don't need that and we can go to our
45:59 - index.html and we can remove the
46:01 - reference to the logo and then for the
46:04 - title we can change this
46:06 - to contact list okay so that's kind of
46:10 - all we need what I want to do to begin
46:13 - is just fetch the contacts that we have
46:16 - now by default we're not going to have
46:18 - any but I just want to show you how it
46:19 - works in terms of sending that request
46:21 - and then we'll display all of those and
46:23 - then add the form for creating contact
46:26 - updating deleting Etc so what we'll
46:29 - actually do is from our backend notice
46:31 - I'm my back end here we'll just run this
46:34 - so Python 3
46:36 - main.py just so that that's going so we
46:39 - can actually test that in a second and
46:41 - then from App we're going to set up some
46:43 - state which is going to store our
46:45 - contacts so we're going to say constant
46:48 - and then inside of a set of square
46:49 - brackets contacts and set contacts is
46:54 - equal to use state
46:56 - and this is going to be an empty list
46:58 - because that's what we're going to have
46:59 - for the context then we're going to make
47:01 - a function we're going to say const
47:03 - fetch contacts is equal to an arrow
47:07 - function here and react this is actually
47:10 - going to be an asynchronous function
47:11 - because it's going to need to wait a
47:12 - second to fetch the contacts and what
47:14 - we're going to do is send a request to
47:16 - the backend to get the context how do we
47:19 - do that well we say const response is
47:23 - equal to await and then we're going to
47:26 - use fetch fetch is something you can use
47:28 - to send a request by default it will
47:30 - send a get request which is the type
47:31 - that we want to send and we're going to
47:33 - send to
47:35 - http colon SL slash make sure you have
47:38 - the HTTP by the way otherwise it's not
47:39 - going to work and then
47:42 - 127.0.0.1 Port
47:44 - 5000 which is what our flask server is
47:47 - running on SLC context all we're doing
47:50 - is sending a get request to the SL
47:52 - contacts endpoint now we're waiting for
47:56 - this to give us a response once it gives
47:58 - us a response we want to get the Json
48:00 - data associated with the response so we
48:02 - can say cons data is equal to await
48:08 - response. Json that's going to give us
48:11 - the Json and then we can say set context
48:14 - and this is going to be data. context
48:17 - okay because what's going to happen is
48:19 - it's going to return the Json remember
48:21 - the Json that we return looks like
48:23 - contacts and then contains a list so so
48:25 - we grab the context property that gives
48:28 - us this value right here which is all of
48:29 - our context we then set that in the
48:32 - state so for now if we want to see what
48:34 - this is we can just say
48:38 - console.log
48:40 - data. contacts and now we would just
48:42 - want to call this whenever this
48:44 - component renders we just want to call
48:45 - it once as soon as we load the website
48:47 - essentially so to do that we're going to
48:49 - import use effect and we're going to put
48:52 - a use effect hookup here we're going to
48:54 - say use effect
48:57 - okay we're going to pass an arrow
48:58 - function then inside of this function
49:00 - we're going to call the fetch contacts
49:03 - function okay so all we're doing is
49:05 - saying okay as soon as this component
49:07 - renders as soon as it loads call this
49:09 - function and then here we call this it's
49:11 - going to give us the contacts and set it
49:13 - in the state and then we can use that to
49:15 - list all the contacts out again right
49:16 - now we're not really going to see
49:17 - anything because we don't actually have
49:19 - any contacts it's going to be an empty
49:20 - list but this will at least allow us to
49:22 - test that we're able to send the request
49:24 - to our backend and I'll show you how we
49:25 - do that so here you go on this side of
49:28 - the screen we have our what is this
49:31 - server our API I'm going to split my
49:33 - terminal and I'm going to CD into the
49:36 - front end directory I'm going to clear
49:39 - and to run my code we type npm run Dev
49:43 - make sure you're in the front end
49:44 - directory for that it's going to spin up
49:46 - the front end server for us and you can
49:47 - see that this is running on Port 5173
49:50 - maybe different for you I'm going to
49:51 - press on control on my keyboard or
49:53 - command if you're on Mac and press press
49:55 - on that and it's going to open up the
49:57 - browser let me just put this in a new
49:59 - window now if we
50:01 - refresh we should see that every time we
50:03 - refresh we get a new get request
50:05 - happening in our backend server over
50:07 - here so just you can test that and you
50:08 - can see that it's sending the request
50:11 - and if we right click here and go on
50:13 - inspect we should see in the console
50:15 - that we're getting an array with zero
50:17 - elements right so every time I refresh
50:19 - we get that again so we get this kind of
50:20 - empty array uh because well that that's
50:23 - what's happening right we're fetching
50:24 - the contexts and none of them exist so
50:26 - it's giving us an empty array okay so
50:29 - that's that and I think that's it for
50:32 - right now in terms of fetching we can
50:33 - leave these running for now what we want
50:35 - to do next is we want to actually
50:38 - display all of the different contexts
50:40 - that we have I'll show you how we can
50:41 - mock some data by the way so we can
50:43 - actually view if it's working and then
50:44 - we want to create a form that allows us
50:46 - to create a new contact so what I'm
50:49 - going to do is make a new component in
50:50 - this Source folder here and I'm going to
50:52 - call this my contact list
50:57 - jsx now this is where we will write the
51:01 - uh what do you call component for
51:03 - rendering our context so I'm going to
51:04 - say import react from react and we're
51:09 - going to make a new component to do that
51:11 - we're going to say
51:12 - const contact list is equal to a
51:18 - function and inside of this function
51:20 - we're going to take a prop and this prop
51:23 - is going to be contacts because we need
51:24 - to have all the context that we can
51:26 - render them so we're going to accept
51:27 - that and then what we're going to do is
51:29 - start writing out some basic HTML this
51:31 - is something you've probably seen before
51:32 - it's going to be very straightforward
51:34 - that will just render our context in a
51:35 - table so that we can view all of them so
51:37 - we're going to return a div we're going
51:39 - to have a header so we're going to say
51:41 - header two contexts and now we're going
51:43 - to create a table so we'll make a table
51:46 - in HTML to start we're going to define
51:48 - the head of the table and then beneath
51:50 - that we can Define the body of the table
51:53 - by the way if you just want to copy this
51:54 - out again you you can do from the link
51:55 - in the description in the head we need a
51:58 - table Row in the row we need our table
52:00 - headers which are
52:02 - th first one is going to be first name
52:06 - the second one is going to
52:09 - be last name we need another one so
52:14 - table head this is going to be email and
52:18 - then one more is going to be actions
52:22 - because we're going to have actions like
52:23 - updating and deleting uh the different
52:26 - entries so there you go that's it for
52:28 - the head now we want to do the body now
52:30 - this is going to be dynamically rendered
52:32 - because it's going to be based on all
52:33 - the contacts that we actually have so
52:35 - inside the body we're going to put a set
52:37 - of braces here and we're going to say
52:41 - contacts. map and we're going to map
52:44 - with a function here all of the contexts
52:47 - that we have and we're going to return a
52:49 - new row for them so we're actually going
52:51 - to do a set of parentheses and we're
52:53 - going to say t R and then here we're
52:56 - going to pass a key whenever you have
52:58 - Dynamic data you need a key so for the
53:00 - key this is just going to be the
53:02 - contact. and then inside of the table
53:05 - row we're going to have table data for
53:07 - all of the different entries we want to
53:08 - show so we're going to have the contact
53:12 - DOT first
53:15 - name if we could spell that correctly
53:18 - we're going to do the same thing for the
53:22 - contact do last name
53:25 - and then we need the email so we're
53:27 - going to have contact. email and then we
53:33 - need the buttons so we're going to have
53:34 - table data and then inside of here we're
53:36 - going to have two buttons so we're just
53:37 - going to say button first one we'll say
53:40 - update and the second one we'll say
53:45 - delete okay so that should be it this
53:48 - again dynamically rendering all the
53:49 - different table rows for our different
53:52 - contexts pretty straightforward
53:53 - JavaScript and react here we have our
53:55 - table data which contains first row last
53:57 - row or last name sorry first name last
53:59 - name apologies email and then we have
54:01 - our buttons update and delete we'll hook
54:03 - those up with some functions in a second
54:05 - but for now what we'll do is we'll
54:07 - actually render this component from
54:08 - app.jsx so we need to export the contact
54:10 - list I just remembered so we're going to
54:12 - go down here and say export default
54:14 - contact list needs to be exported for us
54:17 - to be able to import it we're going to
54:19 - go to app.jsx and we're going to import
54:21 - it so we're going to say import the
54:23 - contact list from do/ contact list and
54:27 - now we're just going to render the
54:28 - contact list so for return we can just
54:31 - say contact list and then contacts can
54:34 - be equal
54:36 - to contacts like that now right now
54:40 - we're not going to see anything because
54:41 - we don't actually have any contacts
54:43 - however if we go to our web page so let
54:45 - me open this up here oh looks like I
54:48 - closed it so let's rerun it okay let's
54:51 - open this
54:52 - again boom you you see that we get
54:55 - contacts first name last name email
54:57 - actions now it's not very spread out we
54:59 - can obviously change the styling if we
55:01 - want but now what we can do if we want
55:03 - to test a contact is we can simply go
55:07 - here we can comment this out and we can
55:11 - just set a mock contact which is what
55:13 - I'm going to do so I'm going to say
55:14 - first name
55:17 - Tim last name spell that
55:21 - correctly my last name let me just save
55:24 - this I'm going to say
55:26 - email let's go email and then
55:29 - ID of one and I actually realized I
55:32 - don't need to have a string for all of
55:34 - these but that's fine so now I'm just
55:35 - setting like a mock contact so we can
55:37 - test this and let's move this over so we
55:38 - can read it and now if we go back here
55:41 - you can see we get first name last name
55:42 - email actions Tim Vera email update and
55:45 - delete obviously it doesn't look very
55:47 - pretty we can fix the styling later on
55:49 - and in fact if we want to just make it
55:51 - look a bit more plain we can go to
55:54 - app.css
55:56 - and we can just remove all this so if I
55:58 - grab that and just remove it if we go
56:01 - back here we kind of get moved over here
56:02 - and then if we go to index.css same
56:05 - thing if we remove all of that now we
56:07 - get kind of the original HTML now if we
56:10 - want to just space these out a little
56:12 - bit we can do that a bit easier so
56:14 - inside of index.css or app.js app.css
56:18 - doesn't matter which one you do we could
56:19 - say dot T head and we can just say the
56:24 - margin
56:25 - is something like 10 pixels and now if
56:28 - we go back here uh actually we're not
56:30 - getting any spacing there H maybe we
56:33 - want to do it ah it's cuz I haveth we
56:37 - just want th like that now if I refresh
56:40 - okay sorry about the cut there but now
56:42 - that is finished in terms of viewing our
56:44 - contacts what we're going to do now is
56:46 - we're going to make a component that
56:48 - allows us to create some contact so
56:50 - let's remove this mock contact cuz we
56:52 - don't need this anymore and we're going
56:54 - to make a new one here and we're going
56:55 - to call this the contact form. jsx okay
56:59 - so inside of contact form uh we're going
57:01 - to well create a form so we're going to
57:03 - say import and this is going to be U
57:07 - state from react we're then I'm going to
57:11 - make a function and we're going to say
57:14 - actually we could do it the other way
57:15 - the way we did it before we'll say const
57:16 - and this will be contact
57:19 - form equals an arrow function inside of
57:23 - here we're going to take two s uh and
57:26 - actually we won't write them yet cuz I
57:27 - don't want to confuse you we'll write
57:28 - them afterwards anyways inside this
57:30 - function we need some state for our form
57:32 - so we're going to need to store the
57:33 - first name last name and email and then
57:36 - we're going to use that and actually
57:37 - submit that to the API to create a new
57:39 - contact so we're going to say
57:40 - const first name and then set first name
57:48 - is equal to use State and empty string
57:50 - we're then going to say
57:52 - const last name set last name for some
57:57 - reason my shift key is bit sticky here
57:59 - not really working that well we'll say
58:02 - use State and then
58:05 - const email set email is equal to use
58:10 - State and this will be an empty string
58:12 - okay so that's it in terms of the
58:15 - different content we're going to want to
58:16 - store next we're going to return the
58:19 - form so we're going to say return and
58:21 - we'll actually return a form now inside
58:24 - of the form here we're going to have a
58:26 - div now inside of this div we're going
58:29 - to have uh our first kind of label our
58:32 - first input element which is going to be
58:33 - for our first name so we're going to say
58:35 - label this is going to be HTML 4 is
58:39 - equal to the first name inside the label
58:43 - we're just going to say first name colon
58:46 - like that we're then going to have an
58:48 - input tag and for the input tag this is
58:51 - going to be type is equal to text we're
58:54 - going to have the ID
58:56 - equal to the first name we're going to
58:59 - have the value equal to the first name
59:04 - and we're going to have on change is
59:06 - equal to and then this is going to be a
59:09 - function which is e and then set first
59:12 - name and then e.
59:15 - target. value and let's see if we can
59:18 - format that okay for some reason the
59:20 - formatter doesn't seem to want to be
59:21 - working so it's a bit difficult to read
59:24 - uh let me see if I can get that working
59:25 - all right so there we go I got the
59:26 - format working so now we're actually
59:28 - able to read this okay so anyways we
59:31 - have our onchange which is again a
59:32 - function e set first name e. target.
59:35 - value now we're going to copy this exact
59:37 - same thing and we're going to paste it
59:39 - twice one for the last name and one for
59:41 - the email so we're just going to change
59:43 - these manually to say last name this is
59:47 - going to be last
59:48 - name last name and this will be set the
59:52 - last
59:53 - name and then we want email so we'll
59:56 - make this
59:58 - email and rather than that just say
60:03 - email
60:05 - email email and set email okay so now we
60:10 - have a basic form that's first name last
60:12 - name and email we just want a button now
60:15 - that we can press on uh that will
60:17 - actually create this element so we're
60:18 - just going to say button and this is
60:20 - going to say create contact and and then
60:24 - for the type we'll say type is equal to
60:27 - submit and now we want what we want to
60:29 - do is create a function story so that
60:30 - when we actually press on this button it
60:32 - does something and it creates this
60:34 - content and what I also want to do is
60:36 - export this I'm going to say export
60:38 - default and
60:40 - then contact form like that okay so what
60:44 - we'll do is make a function now so we're
60:46 - going to say const on
60:50 - submit is equal to this and inside of
60:53 - our form we're going to set this up so
60:55 - we're going to say
60:57 - onsubmit is equal to onsubmit so
61:00 - essentially that means once we press
61:02 - this button we're going to go into this
61:04 - function naming this function we're
61:05 - going to say e. prefent default and
61:09 - we're going to take in E that just means
61:10 - we're not going to refresh the page
61:12 - automatically which we don't want to do
61:14 - so that's kind of removing that standard
61:16 - behavior and now we're going to set up a
61:18 - post request so that we can actually
61:20 - create the um the contact I also realize
61:23 - this needs to be called set last name
61:25 - not sure how I made that set last time
61:28 - okay so first thing we're going to do is
61:29 - start defining the data that we actually
61:31 - want to pass with our Json as the
61:34 - request so we're going to say con data
61:36 - is equal to an object and we're just
61:38 - going to pass in the first name the last
61:41 - name and the email which corresponds
61:44 - with what we're looking for in the API
61:45 - when we create a new contact we then are
61:48 - going to specify the URL so we're going
61:51 - to say const URL is equal to HT TTP
61:56 - col1
61:58 - 127.0.0.1
62:01 - colon 5000 SLC creatore contact okay so
62:07 - that's the URL or the route that we want
62:08 - to go to now that we have this we're
62:10 - going to set up some options for our
62:12 - requests so we're going to say con
62:14 - options is equal to first thing we're
62:16 - going to do is specify the method in
62:18 - this case the method is post when you
62:20 - are not doing a get request you need to
62:22 - actually manually specify all the
62:24 - different options whereas with a get
62:25 - request it just automatically does it
62:27 - for you so that's what we're writing
62:28 - here we're going to pass something known
62:30 - as a header so we're going to say
62:32 - headers this is going to be an object
62:34 - again and we're going to say the
62:37 - content-type is equal to application SL
62:41 - Json now what we're pretty much
62:43 - specifying here is that we're about to
62:45 - submit Json data so we need to include
62:47 - that in a header when we send this
62:49 - request that the API knows that we
62:51 - actually have Json data we're then going
62:53 - to say body is co and equal to Json and
62:56 - all capitals do stringify and we're
62:58 - going to stringify this data might seem
63:01 - a bit weird what we're doing this but
63:02 - essentially this is a JavaScript object
63:05 - just like in Python we need to convert
63:07 - this into a valid Json object so what we
63:09 - do is we take json. stringify that
63:11 - converts it into a Json string which we
63:13 - then include in the body of our request
63:16 - now what we need to do is actually send
63:17 - the request so we're going to say const
63:20 - response is equal to await and we're
63:23 - going to say fetch
63:25 - the URL and we're going to fetch this
63:27 - with the options that we specified and
63:29 - since we're using async here we need to
63:32 - put async for our function uh on the
63:35 - onsubmit so we're going to do that so
63:36 - say con response equal to A8 fetch URL
63:39 - options we then are going to check if
63:42 - this was successful so we're going to
63:43 - say if the response. status does not
63:47 - equal to a one or the in actually sorry
63:52 - not or we're going to say and
63:54 - the response. status does not equal 200
64:00 - so essentially we're just checking hey
64:02 - if you did not give us a valid response
64:04 - if it wasn't 200 or it wasn't to A1 then
64:07 - what we want to do is we want to alert
64:08 - the user that there was an error so
64:10 - we're going to say con message is equal
64:13 - to await
64:16 - response. Json and then we're going to
64:19 - say alert and we're going to alert the
64:22 - message do message because what happens
64:25 - is inside of the Json which actually we
64:27 - could just call data to make this a bit
64:29 - more clear we have a key called message
64:32 - that contains the error message so we're
64:33 - just going to alert the user of that
64:36 - otherwise we can say that this was
64:39 - successful and eventually in a second we
64:41 - will do something here now this actually
64:43 - completes this form let me zoom out a
64:46 - little bit so we can read it better we
64:48 - have the state for all of the three
64:49 - variables that we need we have our
64:51 - onsubmit might seem a bit confusing but
64:53 - really it's it's not overly complex
64:55 - we're just defining the data defining
64:57 - the URL endpoint setting the options for
64:59 - the request sending the request checking
65:01 - if it was successful if it wasn't we're
65:03 - going to alert them with an error
65:05 - otherwise we'll kind of indicate it was
65:06 - successful but we're not going to do
65:07 - that this second okay so that's about it
65:11 - here for the contact form now we need to
65:13 - actually render the contact form so to
65:15 - do that we're going to go to
65:17 - app.jsx and we're just going to make a
65:20 - fragment here and we're going to take
65:22 - this and place it inside of the fragment
65:26 - and then beneath it we're going to
65:28 - render the contact form like that now
65:33 - let me just actually format this so that
65:37 - it looks a little bit nicer and there we
65:39 - go and now we'll remove the comment on
65:41 - fetch contacts and now we should have a
65:44 - form that will allow us to uh create a
65:46 - new contact so we can test that out and
65:48 - we should have the ability to get that
65:51 - contact once it is created so let's go
65:53 - back here you you can see that we have
65:54 - our form again a little bit messy but we
65:56 - can clean that up in a second for the
65:58 - first name let's go with Tim last name
66:01 - here we're going to go Tim atgmailcom
66:03 - let's click on create now notice we
66:06 - don't get any output the reason we're
66:07 - not seeing anything is because we
66:08 - haven't forc refresh the screen however
66:11 - if we refresh here you'll see that now
66:13 - we actually get this contact appearing
66:15 - and if we go back to vs code and we look
66:18 - here you can see that we had a post
66:20 - request come in right where it created
66:22 - the new contact and returned the status
66:24 - of 2011 now let's see what happens if we
66:26 - press this and um you know we don't have
66:29 - any values it says You must include a
66:30 - first name a last name and email if we
66:32 - just do Tim same thing we're going to
66:34 - get that error there right and if we try
66:36 - to repeat the same
66:38 - email we should actually get an error as
66:41 - well it says here there's some error
66:43 - that occurred here unique constraint
66:45 - failed on contact. email essentially
66:47 - meaning that the email is not unique
66:49 - right and as we said we need it to be
66:51 - unique okay so that's it for the form
66:54 - now we'll make it look a little bit
66:55 - nicer in a second but you can see that
66:57 - we're getting all those error messages
66:58 - in our API and while we are successfully
67:00 - calling the API and creating new
67:03 - contacts okay so now we know how to
67:05 - create new contacts and fetch them what
67:08 - we want to do now is be able to delete
67:10 - them and to update them we also just
67:12 - want to prettify the form a little bit
67:15 - and what I want to do is I want to make
67:17 - it so that if we go back here we only
67:19 - see this form if we press uh create or
67:23 - update so the idea is we can reuse the
67:26 - same form for updating and for creating
67:29 - because it's going to be the exact same
67:30 - information so what I want to do is make
67:32 - it so that we pop this up into modal
67:34 - modal is just something that's kind of
67:36 - hovering on top of the screen it's like
67:37 - a little window that pops up so we're
67:39 - going to implement that modal
67:41 - functionality so that this form is only
67:43 - visible when we're creating or updating
67:45 - and then we'll reuse it or kind of
67:47 - modify it to be able to update the
67:48 - contact as well okay so setting this up
67:52 - is a little bit complex but it's okay we
67:54 - can handle it so let's go to app.jsx and
67:57 - let's start kind of handling this modal
67:59 - component so we're going to say const is
68:02 - modal open and then set is modal open is
68:09 - equal to use State and then false so
68:14 - what we'll do is we'll set this state to
68:15 - True when we want to actually open the
68:17 - model now we need some functions that
68:20 - will allow us to toggle the model so
68:22 - we're going to say cont
68:24 - and this is going to be I'll actually
68:26 - start with close model is equal to this
68:30 - and we'll just say set is modal
68:34 - open to false we'll then have const open
68:38 - and the thing is though this model can
68:40 - be opened in two ways so it can be
68:42 - opened when we're creating a new contact
68:45 - or when we're editing a contact so I'm
68:47 - going to say open create
68:51 - model okay what this is going to do is
68:53 - it simp simply going to say if not is
68:57 - modal open then we're going to say set
69:00 - is modal open to true so if it's not
69:02 - already open then we will go ahead and
69:05 - open it and now that I think of it
69:08 - actually yeah that's good that's what
69:09 - we'll do so if it's not open then we'll
69:11 - open it up okay now we need something
69:13 - that will display the model so let's go
69:15 - down here and let's write this out we're
69:17 - going to have a block here and we're
69:19 - going to say is modal open and if that's
69:24 - the case we're going to render a
69:26 - div now inside of this div we're going
69:29 - to have a class name so this is going to
69:31 - be equal to modal we're going to use a
69:33 - little bit of CSS in a second here we're
69:36 - then going to have another div this is
69:38 - going to have a class name equal to
69:40 - modal Das content and then inside here
69:44 - we're going to have a close button and
69:46 - we're going to have our contact form so
69:47 - we're going to take the contact form and
69:49 - paste it inside of here and then above
69:51 - this we're going to have a span we're
69:54 - going to have class name is equal to
69:57 - close and we're going to have on click
70:01 - this is equal to close the modal and
70:05 - then inside of here we're going to put
70:07 - the
70:08 - ENT times and then a semicolon which is
70:11 - just the x button okay that's what we're
70:13 - kind of representing here okay so now we
70:16 - have what we need for the model we can
70:19 - test this I believe actually however we
70:21 - don't have a way yet to open it so so
70:23 - let's make a button and we're going to
70:25 - say button and this is going to say
70:27 - create new contact and for the button
70:32 - we're going to have onclick equal to the
70:35 - open create
70:37 - model okay so we'll see if this works or
70:40 - not for now we should if we refresh here
70:43 - when we click create new contact you see
70:44 - it opens up and when I click the x
70:46 - button it closes however I want it to
70:47 - kind of appear a little bit nicer than
70:49 - that so we'll write some CSS so that
70:51 - it's styled but you can see it is
70:52 - opening and closing so that's working at
70:55 - least okay so let's go to app.css and
70:58 - let's start writing some of this CSS so
71:01 - we're going to say modal let's zoom in a
71:03 - bit here we're going to say it has a
71:05 - position which is fixed by the way you
71:09 - can of course copy this from the link in
71:10 - the description we're going to give it a
71:12 - z index of one meaning it will appear on
71:15 - the top of the screen we're going to
71:17 - give it a left of
71:18 - zero and a right of zero okay setting
71:22 - its position we're going to say the
71:25 - width is equal to 100% the height is
71:29 - equal to
71:31 - 100% we're going to say overflow
71:35 - Auto and then we're going to say the
71:37 - background color is equal to the
71:40 - following this is going to be rgba and
71:42 - we're going to have 0 0 0 and then 0.4
71:46 - opacity that's going to give us a nice
71:48 - gray color okay then we're going to have
71:51 - dot modal
71:54 - content and for the modal content we're
71:57 - going to have a background color and the
71:59 - background color can be pound Fe Fe Fe
72:03 - like that okay we're going to have a
72:06 - margin for the margin it's going to be
72:08 - 10% and then Auto we're going to have
72:11 - some padding this is going to be 20
72:14 - pixels we're going to have a border
72:17 - around the content and this is going to
72:18 - be a one pixel solid border and the
72:22 - color of it is going to be a
72:24 - 888 okay so you can kind of see the the
72:26 - preview right there we're then going to
72:28 - have a width of
72:31 - 80% okay so let's add our semicolon here
72:35 - so that doesn't give us an error okay
72:37 - almost done we're now going to have a
72:39 - close so the close is going to be the
72:41 - close button right so we're going to say
72:42 - color is equal to pound a a a like that
72:46 - we're going to say float to the right so
72:49 - this just means hey put this to the
72:51 - right side of the content we're then
72:53 - going to say the font size is equal to
72:56 - 28 pixels this will Define the size and
72:59 - the font
73:00 - weight is Boldt okay so that's it for
73:04 - our styles again you can just copy them
73:05 - from the link in the description if you
73:06 - don't want to type them out now if we go
73:08 - back here we refresh and we click on
73:11 - this now that's not quite how I wanted
73:13 - it to appear um give me a sec here guys
73:17 - I'm going to look at what's wrong and
73:18 - then I'll come back and we can fix this
73:20 - up okay looks like I'm missing a comma
73:22 - here inside of my rgba color so that
73:25 - might have been the error let's see if
73:26 - we do this now okay no it's still giving
73:28 - us an issue so give me a second aha so I
73:31 - see here in my modal I have a position
73:33 - of left zero right zero I actually
73:35 - wanted left zero top zero so let's try
73:40 - this now and that's better that's what I
73:42 - wanted so now you can see that what it's
73:43 - doing is kind of filling the whole
73:45 - screen with this opacity uh and then
73:47 - it's showing me the modal here and I can
73:49 - close it by clicking the x button and
73:52 - now what we can do is just add a bit of
73:53 - space spacing between our fields and
73:54 - then that'll be kind of done for the
73:56 - styling and we can hook up updating and
73:58 - deleting so let's go to index.css and
74:02 - inside here I'm just going to do a
74:03 - general Style on all my input tags where
74:05 - I say they have a margin top of 10
74:09 - pixels I'm then going to do the same for
74:12 - my button and my label so I'll say input
74:14 - comma button comma label I just want all
74:17 - of them to have a slight margin so now
74:19 - you'll see when I click on this there's
74:20 - a little bit of margin and it looks a
74:22 - bit nicer
74:24 - okay now that we've got that finished
74:26 - let's go and make it so we are able to
74:28 - actually edit these contacts all right
74:30 - so to be able to actually edit these
74:32 - contacts what we pretty much need to
74:34 - know is what contact it is that we're
74:35 - editing which means from our contact
74:37 - list here when we press on this update
74:40 - button we kind of need to go back into
74:42 - the app.jsx component and we need to
74:44 - indicate what that contact actually was
74:48 - and then open the modal using that
74:50 - context so there's a few changes here
74:52 - and these components are going to be
74:53 - intertwined what we'll need to do is in
74:55 - the contact list we're going to have to
74:57 - have a a button be pressed that button
75:00 - is going to tell the main app component
75:02 - hey we want to edit a contact it's then
75:04 - going to open up a modal and we're then
75:06 - going to need to pass that contact to
75:08 - the contact form and then the form will
75:11 - allow us to edit that contact so what
75:13 - that means is we'll start with the form
75:15 - and inside contact form we're going to
75:17 - take in some props so we're going to say
75:20 - that my
75:21 - existing contact is equal to an empty
75:25 - object and then we're going to take in
75:27 - an update call back which is a function
75:29 - we're going to call as soon as we
75:31 - perform any updates now what we're going
75:33 - to do is for our first name last name
75:35 - and email is we're going to use the
75:38 - existing contacts first name last name
75:40 - or email if it exists so we're going to
75:42 - say existing contact DOT first name by
75:47 - the way sorry if you guys can hear those
75:48 - Sirens here it's it's quite loud but
75:50 - we're going to keep going we'll say
75:51 - existing contact
75:53 - last name and we'll say existing
75:56 - contact.
75:58 - email or an empty string so what this is
76:01 - pretty much doing is saying okay let's
76:02 - look at the existing contact if we have
76:05 - one meaning we're actually editing a
76:06 - contact we'll put in what their first
76:08 - name last name and email is otherwise
76:10 - we'll just have an empty string that's
76:12 - all that's doing now at the same time I
76:14 - also need to know here whether or not
76:16 - I'm updating or creating a new contact
76:18 - because we'll have to change what we're
76:20 - doing inside of here based on if it's an
76:22 - update or if it's a create so we're
76:25 - going to say
76:26 - const
76:28 - updating okay if we can spell this
76:31 - correctly is equal to object. entries of
76:35 - the existing
76:36 - contact. length does not equal zero now
76:40 - what this tells us is okay if you passed
76:42 - us an object that has at least one entry
76:46 - inside of it that means that we're
76:49 - updating it because we actually have
76:50 - some existing data if it doesn't that
76:52 - means we're creating a new contact so
76:54 - that's kind of how we know here uh with
76:56 - with updating okay so now what we'll do
76:59 - is we'll change a few things based on if
77:01 - we're updating or if we're creating so
77:03 - really the only change that we actually
77:06 - need to handle is just in the URL here
77:08 - because whether we're updating or we are
77:10 - creating we're going to be submitting
77:12 - the same data which is whatever is in
77:14 - this form so what we'll do is we'll go
77:16 - to the URL here we'll remove the create
77:18 - contact and we're going to append to
77:20 - this some Dynamic data which is going to
77:22 - be the end point
77:23 - so we're going to say if we're updating
77:26 - question mark then we're going to put
77:28 - some back ticks which are just where the
77:30 - Tilda key is on your keyboard usually
77:32 - beneath the Escape key and we're going
77:34 - to say well if we're updating then we're
77:35 - going to call the update contact but we
77:38 - need to pass to this the ID of the
77:41 - contact we're updating so we're going to
77:42 - pass in a dollar sign in our braces
77:44 - allowing us to embed a variable and
77:46 - we're going to say that this is the
77:47 - existing contact. ID cuz if we have an
77:51 - existing contact if we're updating well
77:53 - this is the one that we're updating so
77:54 - we're calling update contact with that
77:56 - as the path parameter otherwise we just
77:59 - put create contact like that and that's
78:03 - pretty much it so it just changes the
78:04 - URL based on if we're updating or
78:06 - creating to be either update or create
78:09 - nice then when we have the else here
78:11 - we're just going to call the update call
78:13 - back and what this update call back will
78:15 - do is just tell uh the app.jsx component
78:18 - hey we actually finished this we didn't
78:20 - update or create operation and that will
78:22 - then close the model for us uh and allow
78:25 - us to update the data that we see from
78:28 - uh what do you call it the contact list
78:31 - okay so we have the contact form and the
78:33 - thing is we need to pass to this the
78:35 - existing contact if we are um what do
78:38 - you call it updating right so how do we
78:41 - do that well we need to actually go to
78:42 - contact list and from contact list we
78:45 - need to take in some functions as well
78:47 - that we can call if we want to update a
78:49 - contact so I'm going to say
78:51 - update contact and
78:55 - update callback now the idea is whenever
78:58 - we perform an update we'll call the
79:00 - update call back and whenever we want to
79:02 - update a contact we'll just call this
79:04 - function with the contact we want to
79:05 - update so what we'll do is we'll go to
79:09 - the update button here and we'll say on
79:11 - this click so on click is equal to and
79:15 - this is going to be a function and this
79:17 - function is going to call the update
79:20 - contact and it's going to pass the
79:23 - contact okay so we're saying okay if you
79:26 - click on click we're going to have a
79:27 - little function here Arrow function that
79:29 - will call update contact with the
79:32 - contact that we want to update so now
79:34 - when we press that what will happen is
79:36 - if we go back to app.jsx here we want to
79:39 - make it so that that update contact call
79:42 - opens the modal that then allows us to
79:44 - update the contact so for our contact
79:46 - form here we need to pass in something
79:50 - what is it that we wanted to pass let's
79:52 - remember here we need the existing
79:54 - contact and the update call back okay so
79:56 - let's actually do that after we do the
79:57 - contact list so we're going to make a
80:00 - new function here we're going to say
80:02 - open edit
80:05 - model okay now for the open edit model
80:09 - what we want to do here is open the
80:11 - model with our contact so we're going to
80:13 - say contact like that and what this is
80:16 - going to do is say if the modal is open
80:20 - simply return otherwise we're going to
80:23 - actually set some new state so we're
80:25 - going to make some new state here we're
80:27 - going to say const and this is going to
80:29 - be the contact it's actually going to be
80:32 - the
80:34 - current contact and then Set current
80:38 - contact is equal to use State and this
80:41 - will be an empty object and the idea is
80:43 - this will store the Conta that we're
80:45 - currently editing so if we go here to
80:48 - this function we're going to say Set
80:51 - current contact
80:53 - to be equal to this contact and then
80:56 - we're going to open the modal so we're
80:57 - going to say set is modal to be equal to
81:01 - True okay so if you say open edit modal
81:03 - so if we call this function we're going
81:05 - to check if it's open if it is we're
81:07 - just going to return otherwise we're
81:08 - going to set the current contact and
81:10 - then we're going to open the model so
81:11 - we're going to say on uh what is this
81:14 - actually it's going to say update
81:16 - contact is going to be equal to and
81:18 - we're going to pass it the open edit
81:21 - modal function like this and then in the
81:24 - contact form here we're going to say the
81:26 - existing contact is equal to the current
81:29 - contact okay we're now going to do one
81:31 - more thing when we close the model we're
81:34 - going to say Set current contact to be
81:38 - equal to an empty object because as soon
81:41 - as we close it now we're kind of
81:42 - resetting it right so we have open the
81:44 - create model which does this open the
81:45 - edit model and then we have Clos modal
81:48 - now we need one more function which is
81:49 - what's happening when we actually
81:50 - perform an update so we're going to say
81:52 - const on
81:55 - update on update what we're going to do
81:58 - here is we're going to close the model
82:00 - which will do all this and then we're
82:02 - going to fetch the contacts again
82:04 - because they could have been updated
82:06 - after the on update so now for our
82:09 - contact list we're going to have the
82:11 - update call back which is equal to on
82:15 - update and we need the same thing for
82:17 - our contact
82:19 - form okay so we have update call back
82:23 - okay I think that this is good for now I
82:26 - know this is a little confusing but
82:27 - let's test it and then we can move
82:29 - forward so we're going to go create new
82:31 - contact you see it opens up the modal
82:33 - and when I click on edit you see it
82:34 - opens the modal but this time it passes
82:36 - in our contact information now the only
82:39 - thing is that this says create contact
82:40 - when really we want it to say edit
82:42 - contact so let's go change that we're
82:44 - going to go to contact form going to
82:46 - scroll down to where it says create
82:47 - contact and again we can just do some
82:49 - Dynamic rendering so we can say editing
82:52 - uh or what is this
82:55 - updating question mark then we'll say
82:57 - update otherwise we'll say
83:00 - create okay so we can test this again if
83:03 - we go create new contact shows us create
83:05 - if we go update shows us update let's
83:07 - try like Tim two when I click on update
83:11 - okay uh I guess maybe we're getting an
83:13 - error because that didn't do what I was
83:14 - expecting it to do so let's go
83:17 - inspect console and it says syntax error
83:21 - is not valid Json okay server responded
83:25 - with a status of 405 method not allowed
83:28 - so I suppose we're just submitting the
83:29 - wrong request type so let's have a look
83:31 - at this we can go here and notice that
83:34 - we get a post which is not valid okay so
83:37 - I believe that's cuz we used a patch so
83:39 - let's go back to our contact form and
83:42 - there's one more thing we need to change
83:43 - here which which is the method so we're
83:45 - going to say updating question
83:49 - mark then we're going to call the patch
83:52 - method method otherwise it's post so my
83:54 - apologies there guys but the method was
83:56 - not allowed so you actually saw here
83:57 - right it said hey responded with 405
84:00 - method not allowed because we tried to
84:01 - send a post request when really we need
84:03 - to send a patch request so let's call
84:05 - update again let's change this to tim2
84:09 - update and now notice it worked this
84:11 - time and it actually changed our email
84:12 - to be Tim 2@gmail.com we can create a
84:15 - new contact let's go Jeff uh Dean okay J
84:21 - gmail.com
84:23 - create and then notice it shows up here
84:25 - the only thing we need to handle is the
84:27 - delete if we call update you can see we
84:29 - can update this to be Jeff 2 and that
84:31 - works completely fine okay so let's
84:34 - handle the delete and then we will be
84:37 - close to finished so let's go back here
84:40 - to our contact list and we need an on
84:43 - delete function so we're going to say
84:46 - const on
84:48 - delete now for delete we just need the
84:51 - ID of the user that we want to delete so
84:53 - we're just going to say ID like that and
84:56 - now we need to send a request that
84:59 - allows us to delete the user so what
85:01 - we'll do is the following we will say
85:04 - try and we're going to say const
85:06 - response is equal to await fetch which
85:10 - tells me I need to make this an async
85:12 - function so let's go ahead and do that
85:14 - and we're going to await the following
85:17 - http
85:18 - colon1 127.0.0.1
85:23 - delore contact and we're going to change
85:26 - these to back ticks so we can embed a
85:28 - variable in here and the variable we're
85:30 - going to have is going to be slash and
85:32 - then the dollar sign the braces and the
85:34 - ID of the user we want to delete now we
85:37 - need some options for this so we're
85:39 - going to say const options are equal to
85:43 - and in this case all we need to do is
85:44 - specify the method so we're going to say
85:46 - method is equal to delete we don't need
85:48 - to do the application type Json we don't
85:50 - need to have all that Json data because
85:53 - all we're doing is just calling this
85:54 - with the delete method so that means
85:56 - we're going to pass options
85:58 - here that's now going to send that
86:00 - delete request now what we need to do is
86:02 - we need to again check the status and
86:04 - see what happens so we're going to say
86:06 - if the response. status is equal to 200
86:12 - that means it was successful so we're
86:13 - going to call the update call back
86:16 - otherwise there was an error so we're
86:17 - going to say console. error like this
86:21 - console
86:23 - error if we can spell that and we're
86:26 - going to say failed to delete and then
86:29 - we're going to have a catch block here
86:31 - and we're going to catch the error and
86:34 - we're going to say console. error and
86:36 - actually we can just alert the error so
86:38 - we're going to say alert and then we'll
86:41 - just alert whatever the error actually
86:44 - is okay so I think that should be good
86:47 - let me quickly run through this cuz I
86:49 - know it went a little bit fast there we
86:51 - have a try and a catch just because we
86:52 - could potentially get an error when we
86:54 - try to delete the contact we set the
86:56 - options equal to Method delete we send
86:59 - the request this time it's going to be
87:01 - this URL with options we're using the ID
87:04 - of the contact we then check if it was
87:07 - successful which needs to be if
87:09 - response. status is equal to 200 not two
87:12 - if it was successful we call the update
87:14 - call back that's going to tell our
87:16 - app.jsx here that we should close the
87:19 - modal and then fetch the contacts again
87:20 - because now we've deleted one right and
87:23 - then what we do if we have an error is
87:24 - we say failed to delete or we catch it
87:26 - and we alert okay so that's it now we
87:29 - just need to call this function so we're
87:31 - going to have on click is equal to again
87:34 - a function and we're going to say on
87:37 - delete and we're going to pass the
87:40 - contact.
87:41 - ID okay we can test this out now so
87:45 - let's go here refresh and click on
87:47 - delete and it says failed to fetch uh
87:51 - connection refused
87:52 - okay I potentially just typed something
87:54 - wrong here so let's see looks like I
87:55 - forgot my port 5000 so let's add 5,000
88:00 - in there go back and delete and now
88:03 - notice that it works and I can update
88:06 - okay Tim two create new contact Jeff do
88:11 - J.O
88:13 - gmail.com and create and you see that we
88:16 - create the contact all of this going
88:19 - through our backend API you can see the
88:21 - post request get request and the patch
88:23 - request of course and the delete request
88:25 - as well okay so I think guys with that
88:28 - said that is going to wrap up this video
88:31 - as I said I know it's not the most
88:32 - complicated project in the world but I
88:34 - think this Illustrated to you how we
88:37 - architect out the front end and the back
88:39 - end the order in which we go about doing
88:41 - things how we communicate between a
88:42 - front end and a back end the different
88:44 - HTTP requests we can set and what it's
88:46 - like actually treating the back end is
88:48 - kind of a separate system that has all
88:50 - of the data and has that protocol that
88:52 - we can then use from the front end keep
88:54 - in mind now we can use this data
88:57 - anywhere we want in any type of
88:58 - application doesn't need to be the react
89:00 - app which is the whole benefit of having
89:02 - a separate backend now it's very
89:04 - flexible to go and create different
89:05 - front ends different interfaces and
89:07 - different ways to communicate with the
89:09 - backend API so I will wrap it up here if
89:11 - you enjoyed leave a like subscribe to
89:13 - the channel and I will see you in the
89:15 - next
89:16 - [Music]
89:20 - one
89:23 - w