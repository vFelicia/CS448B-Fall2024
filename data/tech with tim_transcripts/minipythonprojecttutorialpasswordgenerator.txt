00:03 - foreign
00:12 - [Music]
00:15 - I'll be walking you through a mini
00:17 - python project where we'll create a
00:19 - password generator this will be a
00:21 - relatively simple project beginner
00:23 - friendly and a quick way to practice
00:25 - some python skills and potentially learn
00:27 - some new stuff in the Python language
00:29 - with that said if you're looking to
00:31 - learn more about Python and become a
00:33 - software engineer check out my course
00:34 - programming expert I'll leave a link in
00:36 - the description if you're interested in
00:38 - web3 and blockchain development then
00:40 - check out my other course blockchain
00:42 - expert which again will be linked in the
00:43 - description with that said let's dive
00:45 - into it and create a password generator
00:52 - [Music]
00:53 - all right so let's dive into the project
00:56 - just as a quick brief here what we're
00:58 - going to do is create a password manager
01:00 - that allows us to generate passwords
01:02 - with a minimum length so maybe you pass
01:04 - a minimum length of seven that means any
01:06 - password you get will have well a
01:07 - minimum length of seven continuing we're
01:10 - also going to allow the user to set if
01:12 - they want the password to contain
01:13 - special characters and if they wanted to
01:15 - contain numbers this way it's slightly
01:17 - Dynamic and we can create some different
01:19 - types of path passwords sorry so that
01:21 - said let's get into the project so I'm
01:24 - here in Visual Studio code I assume that
01:26 - you have a python environment set up you
01:28 - can do this in really any version of
01:29 - python and we're going to start at the
01:31 - top of our program here by importing two
01:33 - modules that we're going to use so we're
01:35 - going to import random and we're going
01:37 - to import string now we're going to use
01:39 - string to just grab all of the lowercase
01:41 - and uppercase letters that exist and
01:43 - then all the special characters as well
01:45 - as all the numbers or digits kind of a
01:47 - cool thing that you may not have seen
01:49 - before now there's two different things
01:51 - that we need to do here the first first
01:52 - thing we need to do is ask the user what
01:54 - the minimum length is if they want
01:56 - numbers if they want special characters
01:58 - Etc and then we need to write a function
02:00 - which is actually going to generate the
02:02 - password we can do this in any order
02:03 - that we want for now I'm going to start
02:05 - by writing the function so I'm going to
02:07 - say Def and then I'm going to say
02:09 - generate underscore password and for the
02:13 - parameters of this function I'm going to
02:15 - pass the following which is the minimum
02:17 - length then I'm going to pass numbers
02:21 - is equal to true and then special
02:24 - underscore characters is equal to true
02:28 - and for now I'm just going to write pass
02:30 - here while I explain this so these are
02:32 - the parameters the things that you need
02:33 - to pass the function when you call it
02:35 - again we start with the minimum length
02:37 - which will be a number and then we have
02:39 - two optional parameters here where we
02:41 - can specify if we want the password to
02:42 - include numbers or if we wanted to
02:44 - include special characters the way you
02:46 - would call this function is like so so I
02:49 - would say generate password and if I
02:51 - passed just 10 then that would create a
02:53 - password for me that has minimum length
02:55 - of 10 and includes numbers and special
02:57 - characters if we passed say like 10 and
03:00 - then false that would mean we'd have a
03:02 - password of minimum like 10 would not
03:04 - include numbers but would include
03:06 - special characters so you can see that
03:07 - if I only pass one of the different
03:09 - arguments then I'm kind of substituting
03:11 - that here for this parameter obviously I
03:14 - could pass both of them as well if I
03:16 - wanted to do that so I could say false
03:17 - and false but by default if you don't
03:19 - pass them we're going to have that equal
03:21 - to true okay all right so now that we're
03:24 - here I just want to grab all of the
03:25 - potential characters so like numbers
03:28 - special characters letters Etc that we
03:31 - could be using so I'm going to say
03:32 - letters is equal to string dot ASCII
03:35 - underscore characters uh is it ASCII
03:38 - characters or ASCII letters I think it's
03:40 - ASCII letters then I'm going to say
03:42 - digits is equal to string Dot and then I
03:46 - think it's digits uh yes that's correct
03:48 - and then I'm going to say special
03:49 - underscore chars is equal to and then
03:53 - this is going to be actually let's make
03:56 - this special is equal to string dot
03:59 - punctuation I think I spelled that
04:01 - correctly okay now I'm just going to
04:03 - quickly print these out just so you can
04:04 - see what they look like
04:06 - and then we will continue so I'm going
04:09 - to say generate password and we'll just
04:12 - pass 10 for now just so that we can see
04:13 - what these are okay so when I call the
04:15 - function you can see that what we get
04:17 - printed here is all of the lowercase and
04:19 - uppercase English letters then we get
04:21 - all of the digits and then we get all of
04:23 - these special characters which are
04:24 - really just all the punctuation on our
04:26 - keyboard perfect so I just want all of
04:28 - those so that I can kind of create the
04:30 - set of characters that I'm going to
04:32 - select from when I generate this
04:34 - password so now we need to combine all
04:37 - of these into one kind of list or one
04:39 - large string that we're going to
04:41 - randomly choose from however that string
04:43 - that we're going to randomly choose from
04:45 - should only contain uh what we have
04:47 - specified here so for example if we're
04:49 - including numbers and we're including
04:50 - special characters then we want to be
04:52 - picking from all three of these
04:54 - variables so either a letter number or
04:55 - special character every single time we
04:57 - kind of generate a new character for the
04:59 - password if we're not using numbers and
05:01 - obviously it's just letters and special
05:03 - and then if we are using numbers but not
05:05 - special characters then it's just
05:06 - letters and our special characters
05:09 - so how do we do this well we're going to
05:11 - say the following we're going to say
05:14 - um should I do the selections now let's
05:16 - call this characters is equal to letters
05:18 - because we're always going to have
05:19 - letters no matter what then I'm going to
05:22 - say if
05:23 - numbers
05:24 - like this then characters plus equals
05:29 - and then digits so if this variable is
05:32 - true for including numbers I'm going to
05:34 - take all of my digits which by the way
05:35 - are inside of a string and I'm going to
05:37 - add those to the letter string so now
05:40 - they're combined and then I'm going to
05:42 - say if special characters
05:46 - like this then characters plus equal
05:50 - special like that so now if we have our
05:53 - special characters we add that to our
05:55 - characters which will allow us to select
05:57 - from those when we are generating the
05:59 - password perfect so now what we're going
06:01 - to do is start a loop and during every
06:03 - iteration of that loop we're going to
06:05 - generate a new character to add to our
06:07 - random password and we're going to
06:09 - continue that Loop until we meet the
06:10 - criteria so until we have for example a
06:13 - number a special character and we are at
06:15 - the minimum length so we need to set up
06:17 - a few variables here the first variable
06:19 - I'm going to create is PWD which stands
06:21 - for password and this is what will store
06:23 - the password the next variable is going
06:25 - to be called meet criteria and actually
06:27 - this will be meets criteria I'm going to
06:29 - make this equal to false now we're going
06:32 - to set this variable to True once the
06:34 - password meets the criteria and meeting
06:36 - the criteria will mean that it includes
06:38 - a number and a special character or it
06:41 - just includes a number or just includes
06:42 - a special character Etc and that's going
06:44 - to be based on what the input is to this
06:46 - function so we want to make sure that we
06:48 - have at least one special character and
06:50 - at least one number if you made these
06:51 - equal to True next we're going to have a
06:54 - variable that tells us if we do have a
06:56 - number in our password so we're going to
06:57 - say has number for right now that's
06:59 - going to be equal to false and then
07:01 - we're going to have has special and
07:04 - that's going to be equal to false as
07:05 - well okay so now that we have these
07:07 - variables we're going to create a while
07:08 - loop and we're going to say well
07:11 - not meets underscore criteria uh like
07:16 - that and actually not and or PWD the Len
07:21 - of PWD is less than the min
07:25 - length
07:27 - okay so this is the condition for our
07:29 - for Loop or for our while loop sorry so
07:31 - we're saying while we are not meeting
07:33 - the criteria so while we don't have a
07:35 - special character or don't have a number
07:36 - or whatever that criteria is or the
07:39 - length of our password is not yet equal
07:41 - to or greater than the minimum length
07:43 - we're going to continue doing this where
07:44 - we're going to continue adding
07:46 - characters to our password hopefully
07:48 - that makes a little bit of sense now I'm
07:50 - going to generate a random character
07:52 - that I want to add to my password add it
07:54 - and then if it's a number I'm going to
07:55 - set has number equal to true if it's a
07:57 - special character I'm going to set has
07:59 - special equal to true and then at the
08:01 - bottom of the while loop I'm going to
08:02 - adjust this meets criteria variable to
08:04 - tell me if the password currently meets
08:06 - the criteria based on these two
08:08 - parameters so we're going to say new
08:11 - underscore Char is equal to random dot
08:15 - Choice and then this is going to be from
08:17 - the characters uh kind of string here so
08:20 - we've built this character string which
08:22 - has all of our available characters we
08:23 - can pick from so we're going to randomly
08:25 - pick one using random.choice just picks
08:28 - a random element out of the string for
08:29 - us that's why we imported random and
08:31 - we're going to add that to our password
08:32 - so PWD plus equals and then the new
08:35 - underscore chart we're now going to say
08:37 - if the new character is in our digits so
08:41 - is in digits like that then has
08:45 - underscore number
08:47 - is equal to true and we're going to say
08:49 - l if the new Char is in our special
08:52 - characters
08:53 - then has special
08:55 - is equal to true so again this is
08:58 - telling us if this character exists
09:00 - inside of the digits which we have up
09:02 - here and it's telling us if it exists
09:04 - inside of our special characters which
09:06 - we have right here if it does then we're
09:08 - going to adjust these variables so we
09:10 - know now if we have a special character
09:11 - and if we have a number there's a few
09:13 - other ways to go about doing this but
09:15 - the way I'm coding this is one of the
09:16 - more efficient ways rather than
09:17 - rechecking the entire password every
09:20 - single time to see if it has a special
09:21 - character or see if it has a number okay
09:25 - so next what we need to do now is update
09:28 - this meets criteria variable so it's a
09:30 - little bit strange how I'm going to do
09:32 - this but I want to show you a kind of a
09:34 - more complicated way just as a bit of a
09:36 - learning experience here so I'm going to
09:38 - say meets criteria
09:40 - is equal to true now you're going to see
09:42 - this as a common pattern when you're
09:44 - programming that you actually start a
09:46 - variable equal to true and then you try
09:48 - to prove that the variable is false and
09:50 - then if that's the case you set it to
09:52 - false so I'm going to say meets criteria
09:54 - is equal to true then I'm going to check
09:55 - a few things and set it to false if it
09:58 - needs to be false okay that's how it's
10:00 - going to work and if I didn't set it to
10:01 - false that means well I've met the
10:03 - criteria so I'm going to say if
10:06 - numbers like this and remember numbers
10:08 - is telling me that I should include
10:10 - numbers in the um in the password so I'm
10:12 - going to say if numbers then meets
10:16 - criteria is equal to and in this case we
10:20 - can just say numbers or not numbers
10:22 - sorry has underscore uh number
10:27 - then we're going to say if special and
10:30 - did I just call it special no
10:32 - special characters then meets criteria
10:36 - is equal to meets
10:39 - criteria and in this case uh special has
10:46 - underscore
10:47 - special
10:48 - okay
10:49 - now the way this works is I'm starting
10:51 - by saying if we should include a number
10:53 - then we're going to set the meets
10:54 - criteria variable equal to if we have a
10:57 - number or not so if we do have a number
10:58 - this is going to be equal to true if we
11:00 - don't it's going to be equal to false
11:01 - then after that no matter what so
11:04 - whether this is true or false I'm going
11:05 - to do this other if statement where I
11:07 - say if we have special characters or if
11:09 - we should include special characters
11:10 - then meets criteria is going to be equal
11:12 - to meet criteria and has special now the
11:17 - reason I'm using this and here is
11:18 - because if has number was equal to false
11:21 - or if at this point meets criteria is
11:23 - equal to false then it doesn't meet the
11:25 - criteria right if we don't have a number
11:26 - but we're supposed to include a number
11:28 - we don't meet the criteria so it doesn't
11:30 - matter what has special is this should
11:32 - return false so that's why I'm putting
11:33 - beats criteria here then I'm checking
11:35 - that with has special so if we did have
11:38 - a number for example if this if
11:40 - statement was true then this is equal to
11:42 - true and if we have a special character
11:44 - then that's equal to true so meets
11:46 - criteria is equal to true if we didn't
11:48 - have a number but we do have a special
11:50 - character then this is equal to false
11:52 - hopefully you can kinda understand where
11:55 - I'm going here and how this works
11:56 - there's a bunch of other ways I could
11:58 - probably have written this a little more
11:59 - clear but I just wanted to show you an
12:01 - approach of kind of doing it in this
12:02 - format and using a what would you call
12:04 - it a chain conditional or a compound
12:06 - conditional here with the and keyword if
12:09 - you're not familiar with the and keyword
12:10 - this expression returns true only if
12:13 - both the left hand side and the right
12:15 - hand side are true so try if you don't
12:18 - understand to pause the video and kind
12:19 - of figure out what I'm doing here and
12:20 - how that works but this will now kind of
12:23 - finish our generate password function so
12:26 - from here I'm now going to return my
12:28 - password and at this point it's
12:30 - guaranteed that my password is going to
12:31 - have at least one number and at least
12:34 - one special character and be the minimum
12:36 - length assuming that this was true and
12:38 - this was true all right so let me zoom
12:40 - out here we'll run through the code
12:41 - quickly and then we can do our inputs so
12:43 - the user is going to tell us the minimum
12:45 - length if it should have a special
12:46 - character Etc and we'll kind of test the
12:48 - program out so we get our letters digits
12:51 - and special characters fairly
12:53 - straightforward we then create a string
12:54 - that contains all of the different
12:56 - characters we could be selecting from so
12:58 - we've already explained how that works
12:59 - then we say our password is empty we
13:02 - currently do not meet the criteria we do
13:04 - not have a number and we do not have a
13:06 - special character now we say while not
13:09 - meets criteria or the length of our
13:11 - password is less than the minimum length
13:13 - so if either of these two are true then
13:16 - we're going to continue
13:17 - then we generate a new character by
13:19 - randomly selecting from the characters
13:21 - we can pick from we add that to our
13:23 - password and then we determine if that
13:25 - new character was a number if it was
13:26 - we're going to say has numbers equal to
13:28 - true and if it was a special character
13:29 - we're going to say has specialist
13:30 - equally true then we're going to set
13:32 - meets criteria equal to true and if we
13:35 - have a number or if we should include a
13:37 - number sorry I keep mixing this up but
13:39 - if we should include a number but we
13:40 - don't have a number we're going to set
13:42 - meets criteria equal to false if we
13:44 - should include a number and we do have a
13:45 - number that meets criteria will stay
13:47 - true okay then we go here and we say if
13:50 - special characters then meets criteria
13:52 - is equal to meets criteria and has
13:54 - special which is what I just explained
13:56 - which will make sure that this is going
13:58 - to be equal to false if we don't have
14:00 - one of the two things that we need then
14:03 - when these conditions are false so when
14:05 - we are meeting the criteria and when the
14:07 - length of the password is at least the
14:09 - minimum length then we will return the
14:11 - password okay so let's just try calling
14:13 - generate password using some manual
14:15 - inputs then we can grab our user inputs
14:17 - I'm going to say PWD is equal to
14:19 - generate password and then I'm going to
14:21 - print
14:22 - PWD here and for now we're just going to
14:24 - generate it with 10 minimum characters
14:26 - and containing numbers and special
14:28 - characters okay notice that this is the
14:31 - password that we got we can run it again
14:33 - we'll get another password and we can
14:35 - keep running this as many times as we'd
14:37 - like so now the last step is to ask the
14:39 - user to give us the information that we
14:41 - pass to this function so we're going to
14:43 - say
14:44 - the Min underscore length is equal to
14:48 - input let me zoom in a little bit here
14:50 - so we can read this better and I'm going
14:52 - to say enter the minimum length Okay
14:56 - then we're going to convert this to an
14:59 - integer because we need this as a number
15:00 - value we're just going to assume they
15:02 - give us a valid integer if they don't
15:04 - it's going to crash the program but we
15:05 - don't need to handle that right now
15:07 - we're just going to assume they give us
15:08 - valid input then we are going to say
15:11 - uh has
15:13 - number is equal to and then input
15:17 - do you
15:19 - want
15:21 - to have a number or do you want to have
15:24 - numbers
15:27 - question mark and then we'll say that
15:28 - we're going to accept either y or no all
15:31 - right and then
15:33 - we're going to have has special
15:36 - we're going to say do you want to have
15:38 - special characters now for both of these
15:41 - inputs I'm going to convert them to
15:43 - lower cases so dot lower is just going
15:45 - to take whatever the user types in and
15:47 - convert it into lowercase
15:48 - so we're gonna do that here and then I'm
15:50 - going to check if this is equivalent to
15:52 - Y so if the lowercase thing that they
15:54 - typed in is equal to the lowercase
15:56 - letter Y then that means yes we should
15:58 - have a number and then same thing here
16:00 - check if this equal to lowercase y so
16:02 - they if they type anything other than y
16:04 - either uppercase or lowercase then we
16:07 - are not going to include the number
16:08 - we're not going to include the special
16:10 - character okay so this is going to
16:11 - return a Boolean for us giving us either
16:13 - true or false next I'm going to go down
16:16 - here to PWD and I'm going to pass all my
16:19 - parameters so I'm going to say Min
16:21 - length
16:22 - has number and has special and then I
16:27 - can print
16:29 - the generated password is and then
16:33 - whatever the password is all right so
16:36 - quickly run through this we asked them
16:38 - first what is the minimum length they
16:39 - want we convert that into an integer
16:41 - because we need a number value and by
16:43 - default whatever is entered in the input
16:45 - statement is going to be a string so we
16:46 - had to convert that to an INT then we
16:48 - ask them if they want to include a
16:49 - number we cast that or convert that to
16:52 - lowercase and then we check if it's
16:53 - equal to Y the double equal sign in
16:55 - Python checks for equivalence so we're
16:57 - checking if they're exactly the same if
16:59 - it is then this is true and we will
17:01 - include a number then we do the same
17:03 - thing for special characters we take all
17:05 - of our three values here that we've
17:06 - asked the user for pass that to our
17:08 - function and then print out with the
17:10 - generated password is so let's run this
17:12 - okay Enter the minimum length Let's Go
17:14 - with 25 do we want to include numbers
17:16 - yes do we want to include special
17:18 - characters let's go with no and there
17:20 - you go we get our password we can run
17:22 - this again minimum length let's go with
17:24 - 20 numbers no special characters yes and
17:28 - we actually got a small error here it
17:30 - says local variable meets criteria
17:31 - referenced before assignment let me have
17:34 - a look at why we're getting this we'll
17:35 - fix that error and then we'll be done
17:36 - alright so the issue is that I
17:38 - accidentally spelled this wrong so
17:40 - criteria has to have the i a and I only
17:43 - had a so it was saying I referenced it
17:45 - before assignment because I spelled the
17:47 - variable wrong so let's just run this
17:48 - again and test this one more time so 20
17:51 - uh yes and no and there you go we're all
17:55 - good we generated our password alright
17:57 - so with that said I've just zoomed out
17:59 - so you can read all of the code here I'm
18:00 - going to start wrapping it up if you
18:02 - want to get better at programming and
18:03 - python checkout programming expert if
18:05 - you're into web 3 and blockchain check
18:07 - out blockchain expert and if you have
18:09 - other ideas for mini python projects
18:11 - leave them in the comments down down
18:13 - below I hope you enjoyed if you did make
18:15 - sure to leave a like subscribe the
18:16 - channel and I will see you in the next
18:18 - one
18:23 - [Music]