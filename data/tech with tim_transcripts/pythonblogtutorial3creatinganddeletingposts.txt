00:00 - hello everybody and welcome to the third
00:02 - video in this flask blog tutorial series
00:05 - in this video i'm going to be showing
00:06 - you how we can actually create posts so
00:08 - how users can sign in
00:10 - create a post and then have all of those
00:12 - posts showing up on the home page of the
00:14 - blog
00:14 - i'll also show you how we can view all
00:16 - of individual users posts
00:18 - so let's say i have like six or seven
00:20 - different posts you can click on my name
00:22 - and you'll see all of the posts simply
00:23 - by me
00:24 - so with that said let's dive in
00:35 - all right so right now we have a working
00:36 - login and signed up
00:38 - page however we have a very small error
00:40 - and i just realized this after filming
00:42 - this intro
00:43 - so right now i'm actually signed in you
00:45 - can see that because i can access the
00:46 - home page
00:47 - but it's only showing me the login and
00:49 - sign up kind of buttons in this navbar
00:51 - now that doesn't really make much sense
00:53 - if the user is logged in i probably
00:54 - shouldn't show them these
00:56 - two i should show them the log out
00:58 - button and so what i'm going to start by
00:59 - doing is just making this nav bar
01:01 - only show the login and sign up button
01:03 - if the user is not logged in
01:06 - and if the user is logged in then what i
01:08 - will do is show the
01:09 - log out button instead then after that
01:11 - just to give you kind of a vision of
01:13 - what we're going to do here i want to
01:14 - turn this home page
01:15 - into kind of the main page of the blog
01:17 - so when you go here you'll see everybody
01:19 - else's posts
01:20 - so just in chronological like time order
01:22 - you'll see all of the posts
01:24 - that all users have made and then what
01:26 - you can do is you can click on a user's
01:28 - username and you'll be able to view all
01:29 - of their posts
01:30 - kind of like their blog this will be
01:33 - kind of a half blog half
01:34 - social media site regardless just wanted
01:37 - to show you or tell you that's kind of
01:38 - the vision for this tutorial right
01:40 - here okay so first thing we need to do
01:41 - is change that nav bar
01:43 - so i'm going to go to templates and
01:46 - base.html
01:47 - and inside of here i'm going to start
01:49 - changing some of the stuff on the navbar
01:51 - so notice right now i have home
01:53 - login and sign up now what i want to do
01:55 - is add a
01:56 - log out button and so i'll just add one
01:59 - right here
02:00 - and we will say that this is going to go
02:01 - to log out
02:03 - and this will say log out now what i can
02:06 - do inside of here is i can actually
02:08 - check if the current
02:10 - user that i have is logged in or not so
02:13 - what we'll do is we'll check if the
02:14 - current user is logged in
02:15 - if they're logged in then we will show
02:17 - the logout and home button
02:19 - otherwise we will show the login and
02:22 - sign up button so what i'm going to do
02:23 - here is put an if statement and i'm
02:25 - going to say
02:25 - percent percent if user dot is
02:28 - underscore
02:29 - authenticated i don't know if i spelled
02:32 - that correctly
02:33 - okay let's do that then percent percent
02:36 - and if
02:37 - so we'll do this oops if i could type
02:40 - properly and then i'm going to put in
02:41 - else here and then i'll just rearrange
02:43 - where i have these nav items
02:45 - so i always want to show this home
02:46 - button so we can do that
02:48 - right here and then if the user is
02:50 - authenticated i don't want to show login
02:53 - instead i want to show log out so i will
02:56 - put
02:56 - log out inside of the main body of the
02:58 - if statement and then inside of the else
03:00 - here i will show
03:02 - the login and sign up so if the user is
03:04 - authenticated then we will show
03:05 - log out and we'll always be showing home
03:07 - otherwise we will simply show
03:09 - login and sign up nice okay so that
03:11 - should hopefully work for us now
03:13 - but notice that i called or used this
03:15 - user variable
03:16 - and i'm not necessarily passing this
03:18 - user variable to this template so i need
03:20 - to make sure i'm doing that
03:22 - so what i'm going to do now is go to my
03:24 - views so auth and views.pi will start
03:26 - inside of
03:27 - auth and what i'm going to do is pass to
03:29 - the render template the variable user
03:32 - so i'm going to say user is equal to and
03:34 - this is going to be current user
03:36 - like that so when i do this this will
03:38 - pass the user object that represents
03:40 - the currently logged in or not logged in
03:43 - user and then inside of here i can do
03:44 - this check and check if the user is
03:46 - authenticated
03:47 - now when i check is authenticated that
03:49 - simply tells me is the user logged in or
03:51 - are they
03:51 - not logged in obviously if they're
03:53 - logged in this will be true
03:55 - if they're not logged in this will be
03:56 - false so this comes
03:58 - from flask login notice how i imported
04:00 - current user up here
04:02 - so we need to make sure in all of our
04:03 - views we're passing user equals current
04:05 - user
04:06 - so what i'm going to do is go down here
04:07 - to sign up same thing i'm going to pass
04:10 - user equals current user
04:11 - we don't need to do it in logout because
04:12 - we're just having a redirect
04:14 - but if we go to views.pi
04:17 - okay we have name but instead i'm just
04:20 - going to make this user is equal to
04:22 - currentuser
04:23 - okay so now we should be passing the
04:25 - current user in all of our views so if i
04:27 - go back here
04:28 - and i refresh okay it logged me out
04:31 - because i refreshed there notice it's
04:32 - showing log in
04:33 - and sign up let's log in here i made an
04:35 - account which is tim
04:37 - gmail.com and then my password
04:41 - will be this okay uh email does not
04:43 - exist
04:44 - okay give me one second guys all right
04:46 - sorry about the cut there guys but i
04:47 - realized we have a small error very easy
04:50 - fix but essentially any account that we
04:52 - created
04:53 - during one run of our website was
04:55 - instantly deleted
04:56 - after the website was reran or the
04:58 - server was reran
04:59 - because we weren't actually creating a
05:01 - database our database was simply being
05:03 - stored in memory
05:05 - and then as soon as the app reran all of
05:07 - the accounts that we created well they
05:08 - just disappeared and were deleted
05:10 - that's because i had a very small smell
05:12 - uh spelling mistake here sorry
05:14 - inside of a knit dot pie notice how this
05:16 - says sql
05:17 - underscore alchemy this needs to be sql
05:19 - alchemy so no spaces i've made that
05:21 - mistake a few times now
05:22 - so now when i save this notice that this
05:25 - re-ran and we actually see this
05:26 - database.db
05:27 - file so you probably may have noticed
05:29 - that in the previous tutorial it wasn't
05:32 - actually creating this file
05:33 - now we have this file and so when the
05:36 - application is rerun we should actually
05:38 - have all of the accounts that we created
05:40 - still created and stored in the database
05:43 - so let me just make a new account here
05:45 - because
05:45 - obviously my account's gone now so we're
05:47 - gonna say tim gmail.com
05:49 - tim one two three four five six seven
05:52 - and one two three four five six seven
05:54 - okay so sign up
05:55 - user created now notice it's showing me
05:57 - home and
05:58 - log out it's not showing me the sign in
06:00 - and sign up so if i press
06:02 - log out please log into axis's page i
06:04 - guess because it redirected me to the
06:05 - home page
06:06 - and now what i can do is log in so tim
06:09 - gmail.com
06:10 - one two three four five six seven log in
06:13 - and then notice it's showing me these
06:14 - right here
06:15 - perfect okay so that is all good nice so
06:18 - now that we've fixed
06:19 - those small errors right there we can
06:20 - actually get started on creating posts
06:23 - so the first thing i want to do to
06:24 - create a post is make an html form here
06:28 - that allows us to actually well make the
06:29 - post so i'm going to make this on a
06:31 - separate page
06:33 - and what i'm going to have is a button
06:34 - on the home page that says create a post
06:37 - and when you press create a post then it
06:39 - will redirect you to this page will just
06:40 - be a very simple form
06:42 - which is a text box and a button and you
06:44 - can just type out what you want
06:45 - and we'll make a post now you guys could
06:47 - add images to this and other attachments
06:49 - and stuff in the future if you want
06:51 - but for now we're just going to do
06:52 - simply text all right so to do this
06:54 - we need to create a form let me just go
06:56 - to my cheat sheet here to make sure i
06:58 - don't mess this up
06:59 - so actually the first thing we'll do is
07:00 - make an h1 tag
07:02 - this h1 tag can be in the center of the
07:04 - screen so we'll say line
07:06 - equals center and then quite simply we
07:08 - will say make
07:10 - a post and i believe center here needs
07:12 - to be
07:13 - lowercase alright so make a post that
07:15 - will be our h1 tag we're then going to
07:17 - make a form
07:18 - the method is going to be equal to post
07:21 - because we're going to post data
07:22 - to our backend so let's end the form
07:25 - here
07:25 - and then inside of the form we're going
07:27 - to put a text
07:28 - area so text area name is going to be
07:31 - equal to text
07:32 - the id will be equal to text and the
07:35 - class will be equal to form
07:37 - hyphen control that's a bootstrap class
07:40 - all right we can end the text area
07:42 - so oops slash text
07:45 - area like that nice now we're going to
07:48 - do a break line
07:50 - uh just to make sure we go down to the
07:51 - next line and there's some spacing
07:53 - i'm now going to make a div this div is
07:55 - going to be aligned in
07:57 - the center and then inside of here we're
07:58 - going to put a button so we'll say
08:00 - button like that we will end
08:03 - the button and then the type
08:06 - will be equal to and this will be sorry
08:10 - submit and the class will be equal to
08:12 - btn
08:13 - btn hyphen lg and then vtn hyphen
08:17 - primary to make that a nice blue color
08:20 - this button will say
08:21 - post and then we will end the div here
08:25 - and save and i think that's all we need
08:27 - so let me just check here make sure i
08:28 - didn't mess anything up
08:29 - i think we are all good all right so
08:32 - this is the html for our create a post
08:34 - page now we need to make a view for this
08:37 - so that we can actually
08:38 - render this page so let's go to views.pi
08:40 - let's go at
08:42 - views.root we can call this
08:46 - create hyphen post or slash create post
08:50 - and then this will be at login required
08:52 - as well you can't make a post unless
08:53 - you're logged in
08:54 - define this will be create underscore
08:57 - post
08:58 - and here what we will do is actually say
09:01 - that the methods allowed for this will
09:03 - be get
09:04 - and post because we want to be able to
09:06 - get the html of the page
09:08 - we also want to be able to post data to
09:10 - this view that data will be the text
09:12 - that makes up the post from the user
09:14 - right
09:14 - so let's just start by returning the
09:15 - html so return render template
09:18 - name of our template here is create
09:20 - underscore post
09:22 - dot html and then we need to make sure
09:24 - we pass our user so user is equal to
09:26 - current user
09:27 - all right so that's all we need for
09:28 - right now so let's rerun our application
09:31 - and
09:32 - let's see if this works so let's go here
09:34 - let's refresh
09:35 - notice i'm still signed in because now
09:37 - my database is actually saved
09:38 - and if i go to slash create hyphen post
09:42 - like that
09:43 - it brings me to the make a post page of
09:45 - a text area
09:46 - and i can press post awesome okay so now
09:50 - we need to handle
09:50 - what happens when you press post so the
09:53 - only piece of data we have
09:55 - is our text so we just need to grab that
09:58 - from the form attribute of our request
10:01 - when the method here is post we're going
10:03 - to say if
10:05 - request dot method equals equals post
10:08 - we're going to make sure we import
10:10 - request from the top of our program here
10:12 - so if request.method equals equals post
10:15 - then we're going to say the text is
10:16 - equal to request
10:18 - dot form dot get and this will be
10:22 - text okay we're then going to make sure
10:24 - that we actually have some text
10:26 - so we'll say if not text then what we
10:28 - want to do
10:29 - is flash the message saying let's say
10:32 - post cannot be empty
10:36 - and the category is going to be equal to
10:40 - error we need to make sure we import
10:42 - flash so let's import that
10:44 - right there so if that's the case we
10:46 - will flash that
10:48 - otherwise that means we do actually have
10:49 - some text so we need to create a new
10:51 - post
10:52 - using this text so for now i'm just
10:54 - going to flash a message saying
10:56 - post created exclamation point
11:01 - the category will be equal to success
11:04 - nice okay so we will now actually end up
11:07 - creating a post but to create a post we
11:09 - need a database
11:10 - model that's going to store the post so
11:13 - let's go back to models.pi
11:15 - and now we're going to make a model that
11:16 - will represent our post
11:18 - so we're going to say class post this
11:20 - needs to inherit from db.model
11:23 - notice how i'm not inheriting from user
11:25 - mixin that's because this was a special
11:27 - class we only inherited from
11:29 - from our user class that we're using to
11:31 - sign in and log out users
11:33 - in this case we'll just have a regular
11:34 - database model this is called post
11:36 - and now we need to uh what does it
11:38 - define all of the columns or
11:40 - fields that each post is going to have
11:42 - so we have to think about this for a
11:43 - second
11:44 - what do we want each post to have on it
11:46 - well first we need an id
11:48 - so we can copy this because this is
11:49 - going to be the same for all of our
11:50 - database models we need an id
11:52 - that is unique that is the primary key
11:54 - then what else do we need
11:56 - well we need the text associated with a
11:57 - post so i'll say text is equal to and
11:59 - then
12:00 - db dot column this will be db
12:04 - dot text and uh this will be
12:09 - what do i want to say here nullable
12:11 - equals
12:12 - false so this just means we must have
12:14 - some text you can't have
12:15 - no text associated with a post then
12:18 - after that so after we have our id
12:20 - and our text we probably want the date
12:22 - that this post was created at so let's
12:24 - do that
12:24 - date created we can just copy this field
12:26 - right here and then lastly we need a
12:28 - user that created this post right we
12:30 - need to know who was the actual author
12:32 - of this post so we'll say author
12:34 - is equal to db dot and then this is
12:37 - where it gets a little bit tricky this
12:38 - is where i'm going to talk to you about
12:39 - something called foreign keys
12:41 - all right so let's talk about foreign
12:43 - keys and how you can actually relate
12:45 - database models and tables together so
12:48 - as i was saying we need some
12:50 - author that made this post the thing is
12:53 - though i need to make sure
12:54 - that the author actually exists right
12:56 - because what i could do
12:58 - is i could do something like db.column
13:00 - and then db.integer
13:03 - and maybe this column here is just going
13:05 - to store an integer
13:06 - that represents the id of the user who
13:09 - created this post
13:11 - now that would work i could just put the
13:12 - id of the user and then i would be able
13:14 - to
13:14 - access the user using its id but this
13:17 - does not enforce that the user actually
13:20 - exists when i create a post so what i
13:22 - mean by that is i could make a post and
13:24 - i could pass for author
13:25 - some random integer representing the id
13:28 - of a user but that user may not actually
13:30 - exist
13:31 - so that's kind of one problem that
13:32 - you're going to run into there another
13:34 - problem is that
13:35 - i don't really have a good way to find
13:38 - all of the posts that a user has
13:40 - created if i do it in this way so if i
13:42 - just do this i just store the id of the
13:44 - user
13:45 - i can find all of the posts that the
13:47 - users created but it's a lot less
13:49 - inefficient or sorry a lot less
13:51 - efficient not a lot less inefficient
13:53 - and while i'm going to show you kind of
13:54 - the proper way to actually relate two
13:56 - tables together because ideally from the
13:59 - post
13:59 - i want to be able to access the user and
14:01 - all of the information related to the
14:02 - user
14:03 - and from the user i want to be able to
14:04 - access all of its posts so this is where
14:06 - we talk about foreign key
14:08 - and what's known as a relationship so
14:10 - what i'm going to do here say author is
14:11 - equal to db.column
14:13 - db.integer but then i'm going to add a
14:16 - foreign key okay so
14:17 - foreign key like this so i think it's
14:20 - foreign
14:21 - is it like that or is it underscore key
14:23 - i gotta check no this is correct
14:24 - so db.foreign key and then what i'm
14:27 - going to do is put the name of the table
14:29 - and the field in the table that this
14:31 - foreign key is going to reference
14:33 - so i'm going to say user dot id so by
14:36 - default even though this class name has
14:38 - an upper case
14:39 - inside of the actual database this will
14:41 - be represented with a lowercase
14:44 - so this table name in our actual sql
14:46 - database
14:47 - is lowercase user not uppercase user and
14:50 - so i'm accessing the table using a
14:51 - lowercase so user that's referencing the
14:54 - table
14:54 - and then id is referencing the id field
14:56 - in that table
14:58 - so i'm saying whatever integer is here
15:00 - must match
15:01 - one integer on the user table in the id
15:04 - field
15:04 - so i know which user created this post
15:08 - then what i also need to do here is add
15:09 - something called on delete so i'm going
15:11 - to say on delete
15:12 - is equal to and then cascade and just
15:15 - cascade need to be in capitals yes it
15:17 - does so we're going to go cascade like
15:19 - that
15:20 - so what this is saying is when i delete
15:23 - the user that this table is referencing
15:26 - i want to
15:27 - cascade and delete all of the posts that
15:30 - this user has
15:31 - so that's what this ondelete is doing if
15:33 - you don't add this you will have
15:34 - posts associated with a user that has
15:37 - been deleted
15:38 - so let's just make sure if the user gets
15:39 - deleted all of the posts that the user
15:41 - has
15:42 - gets deleted as well and then the last
15:44 - thing i need to add here is nullable
15:46 - equals false
15:47 - just to make sure this table must have a
15:49 - value and it cannot be null
15:51 - okay so that is the author field so i've
15:53 - added the author field
15:55 - and by doing this now i'm able to access
15:57 - the user who created this post
15:59 - but from the user i want to access all
16:02 - of their posts
16:03 - so now what i need to do is create
16:04 - something known as a relationship
16:06 - so i'm going to say post notice how this
16:08 - is plural
16:09 - is equal to db.column
16:12 - and inside of this column or sorry it's
16:14 - actually not db.com
16:16 - it's db.relationship inside of here
16:19 - what i'm going to do is put the name of
16:21 - the table that this post is referencing
16:23 - so in this case it's going to be post
16:26 - like that and then i'm going to add the
16:27 - two
16:28 - following things back graph is going to
16:30 - be equal to
16:31 - user i'll describe what this is in one
16:33 - second and
16:34 - then i got to look here i'm going to add
16:36 - this passive
16:38 - oops like this underscore deletes with
16:42 - plural
16:43 - is equal to true so let me describe what
16:46 - i just did here
16:47 - so on the user model or on the user
16:49 - database table i'm now adding a new
16:51 - column
16:52 - called posts now this column is going to
16:55 - be a relationship
16:56 - and what that means is this is going to
16:58 - reference all of the posts
17:00 - that this user has so any post that has
17:03 - the author which is equal to the id of
17:05 - the current user
17:06 - there will now be kind of an addition on
17:09 - this user table
17:10 - that references all of the posts that
17:12 - this user has created so that's why the
17:14 - relationship is going to post
17:16 - now what is the back ref well a back
17:18 - graph stands for back
17:20 - reference and this means from the post
17:22 - how do i
17:23 - access the user object that created the
17:26 - post
17:27 - well what i do is i use dot user this is
17:30 - a little bit confusing but by adding
17:31 - this back
17:32 - reference what this allows you to do is
17:34 - rather than using this author field here
17:36 - to access the id
17:38 - of the user it allows you to actually
17:40 - write something like
17:41 - post dot user so let's say we had some
17:43 - posts created we have p
17:45 - or p is equal to post and let's say we
17:48 - filled in all of the values that we need
17:50 - okay
17:50 - now if i want to access the user that
17:53 - owns this post i can do
17:55 - p dot user and this actually gives me
17:57 - access to all of this
17:58 - whereas if i did p dot id this would
18:01 - give me some
18:02 - integer not the actual user model itself
18:05 - hopefully that kind of makes sense but
18:06 - that is what back reference does and
18:08 - we'll use this in a minute
18:09 - and then passive deletes this kind of
18:11 - goes hand in hand with the cascade thing
18:14 - this allows all of the posts to be
18:16 - deleted
18:17 - when this user object is deleted so if
18:19 - you want to make sure that's the case
18:21 - that all posts get deleted when the
18:22 - author of those posts is deleted
18:24 - you need passive deletes equals true and
18:26 - on delete equals cascade
18:28 - okay so that's about the best
18:30 - explanation i can give you if you don't
18:31 - fully understand it
18:32 - that's fine but this is how we set up a
18:34 - relationship a one-to-many relationship
18:37 - one user has many posts awesome okay so
18:40 - let's continue now so now that we've
18:42 - created this model
18:43 - what i need to do is go back to init.pi
18:45 - and i need to import this
18:47 - from my model so that it's created when
18:49 - i create my database so from.models
18:51 - import user
18:52 - and import post okay
18:56 - now we're going to go to model stop pi
18:57 - or sorry views dot pi
18:59 - and we're going to say from dot models
19:03 - import post and now what i'm going to do
19:06 - is when i have my create post here and i
19:08 - actually get some
19:10 - valid text i'm going to create a new
19:11 - post so i'm going to say post
19:14 - is equal to post i'm going to say that
19:16 - the text is equal to
19:18 - the text i'm going to say that the
19:20 - author is equal to and this will be
19:22 - current user dot id
19:24 - and i believe that's all i need i don't
19:26 - think there was anything else we had on
19:28 - this post model no
19:29 - date created an id will automatically be
19:31 - generated for us
19:32 - so now that i've created the post i need
19:34 - to add it to my session so i'm going to
19:36 - say
19:37 - db dot session dot add
19:40 - and i'm going to add the post and then
19:42 - db
19:43 - dot session dot commit to actually save
19:46 - the post in the database
19:47 - before i do that though i need to import
19:49 - db so i'm going to say from dot
19:52 - import db and now i have access to that
19:55 - database object so i can actually use
19:57 - this so that should actually create the
19:59 - post for us
20:00 - so let's go ahead and try this out i'm
20:02 - going to go to python dot slash app.pi
20:05 - i'm going to now go back here refresh
20:08 - okay so let's just press enter like that
20:11 - and let's see what happens now if i
20:12 - actually type something in so hello
20:14 - my name is tim okay i press post
20:17 - and we get some errors there's no such
20:19 - table post
20:20 - so the reason i'm getting this error
20:22 - here is because
20:24 - we need to recreate the database because
20:26 - this database here is kind of
20:28 - stale it has only the user model in it
20:31 - and the reason it only has the user
20:32 - model in it is because we haven't
20:34 - recreated the database
20:35 - when the server reran because it already
20:37 - exists so if you look at init.pi here
20:40 - we have this function this function
20:43 - creates the database for us but it
20:44 - checks first
20:45 - if the path already exists so what we
20:47 - need to do is delete this database so we
20:49 - just manually delete it
20:51 - and then we're going to refresh our app
20:52 - here so let's just stop this
20:54 - and re-run it and now the database
20:56 - should be recreated
20:57 - and this time it should create the post
21:00 - table
21:01 - hopefully that makes sense but whenever
21:03 - you get that type of error
21:04 - just manually delete the database and
21:06 - then rerun the app and it should
21:08 - recreate it
21:09 - so if you're adding or changing around
21:10 - all of the models and stuff
21:12 - you'll have to do that there's other
21:13 - ways to get around that but for now this
21:15 - is kind of the easiest way so if i
21:16 - refresh this now
21:17 - and i continue the form resubmission
21:19 - okay i've got to log in so let's
21:21 - actually create account because we've
21:22 - deleted the database so tim
21:24 - gmail.com tim and this will be one two
21:27 - three four five six seven
21:28 - one two three four five six seven sign
21:31 - up
21:32 - user created okay let's make a post so
21:34 - slash
21:35 - create hyphen post okay let's go
21:38 - hello my name is tim let's press post
21:41 - and then it created the post
21:43 - awesome so that actually worked we got
21:44 - that flashed message
21:46 - now we need to actually view the posts
21:48 - and we want to redirect the user back to
21:50 - the home page
21:51 - when they actually create their post so
21:53 - let's go ahead and do that
21:55 - okay so let's go back to views.pi we've
21:57 - now created the post
21:58 - and after we create this post here and
22:00 - we flash the message
22:01 - let's return a redirect
22:05 - okay to the url underscore four and this
22:08 - will be views
22:10 - dot home like that okay so we now need
22:13 - to import both
22:14 - re direct and url underscore four
22:19 - okay and that's fine and what were we
22:22 - going to do next we now want to view all
22:23 - of the posts
22:24 - on the home page all right so what i'm
22:26 - going to do now
22:27 - is inside of the home page when we go to
22:30 - the home page i'm going to get all of
22:32 - the posts
22:33 - the way i'm going to do that is by
22:34 - saying posts is equal to and this is
22:36 - going to be post
22:37 - dot query dot and actually i think
22:42 - i can do all um yeah we'll do
22:45 - post.query.all
22:47 - let me check if that is correct okay so
22:49 - that is correct
22:50 - and then what i want to do is pass all
22:52 - of these posts
22:54 - to this template right here so i can
22:56 - then access them
22:57 - inside of the base template so what i'm
22:59 - going to do is say post
23:00 - is equal to posts so now inside of the
23:04 - home template i should have access to
23:06 - the variable posts
23:07 - and i can start looping through all of
23:08 - the posts and showing them on the screen
23:11 - so we'll make this look nicer in a
23:12 - minute but for now let's just see if we
23:13 - can actually view these posts
23:15 - so we can test if this is working or not
23:17 - so let's go to home.html
23:18 - and inside of the content block here
23:22 - we're going to start viewing all of the
23:24 - posts so we're going to make a for loop
23:26 - we're going to say percent percent for
23:28 - post
23:29 - in posts we're going to end the 4
23:33 - and then we're going to see if we can
23:34 - just view the post.text so we're going
23:35 - to go
23:36 - like this and say post dot txt now this
23:39 - may not work
23:40 - but it also may work let's see if it
23:42 - does
23:43 - so let's just go here and refresh oops
23:47 - we want to get so we'll do that and then
23:50 - go back to the home page
23:51 - and there we go we get hello my name is
23:53 - tim so we actually are able to view
23:55 - the post nice now obviously there's some
23:58 - more things that we want to view
23:59 - associated with each post but for now
24:01 - that's pretty good
24:02 - so let's now see if we can also view
24:04 - maybe the author of the post
24:06 - so that's the post text but after we
24:09 - view the post text
24:10 - how can we view maybe the username of
24:12 - the person who posts this
24:14 - well what we can do is say post dot user
24:17 - dot and then
24:18 - username so if we do that and we refresh
24:21 - here
24:22 - node says hello my name is tim and then
24:23 - the username of the person who created
24:25 - the post
24:26 - is tim we access that by saying
24:28 - post.user.username
24:30 - now notice if we just did post.author
24:33 - like that
24:34 - what this would give us is the id of the
24:37 - user who was the author of this post
24:39 - so just keep that in mind that's kind of
24:41 - the difference there nice
24:42 - so that is all working now that we've
24:44 - done that i want to view these posts a
24:46 - little bit nicer right
24:47 - i want a nice little box for them i want
24:49 - the date they were posted at i want to
24:51 - actually see the username
24:52 - so let's start writing some html to
24:54 - actually view the post in kind of a nice
24:56 - format so we will continue in one second
24:58 - we need to thank the sponsor of this
24:59 - video and this series which is algo
25:01 - expert
25:02 - algo expert is the best platform to use
25:04 - when preparing for your software
25:05 - engineering coding interviews
25:06 - they have 160 coding interview practice
25:08 - questions which really are the best
25:10 - resources to prepare for any technical
25:12 - interviews at large tech
25:14 - companies get started using algo expert
25:16 - today by clicking the link in the
25:17 - description and using the code tech with
25:19 - tim for a discount on the platform
25:21 - okay so let's start writing some html to
25:23 - display the posts
25:24 - the first thing i'm going to do here is
25:25 - make a div i'm going to say div id
25:28 - is equal to posts we'll put the for loop
25:31 - inside
25:32 - of the div now outside of the div i'm
25:34 - going to put an h1 tag just to say hey
25:37 - these are all the posts so i'll say a
25:38 - line
25:39 - equals and then center and then post
25:42 - and then slash h1 okay
25:46 - now we will keep the for loop inside of
25:48 - our post div but i'll delete this
25:50 - for now because we're going to display
25:51 - this a little bit nicer what i'm going
25:53 - to do is use a card to display all of my
25:55 - posts
25:56 - a card is kind of like an outline box
25:58 - that has some nice properties from
25:59 - bootstrap
26:00 - so we're going to make a div we're going
26:02 - to end the div
26:04 - the class is going to be equal to card
26:07 - with a dark border so border dark so
26:10 - that will be our card
26:12 - then we want a header for the card and a
26:15 - footer for the card
26:16 - the header which is going to be kind of
26:17 - like a top bar will show the username of
26:20 - the person who posted
26:21 - the post and then we'll have some main
26:23 - text that will be the actual
26:25 - post text then we'll have the date and
26:27 - time that the post
26:28 - was posted at so we're going to make
26:30 - another div here
26:32 - uh this div is going to have a lot of
26:34 - classes on it
26:35 - we're not necessarily utilizing all of
26:37 - them right now you'll see in a second
26:39 - why we need them so i'm going to say
26:40 - card
26:41 - hyphen header this is going to be d
26:44 - hyphen flex this is going to be
26:45 - justify hyphen content hyphen and
26:49 - between and then this is going to be
26:51 - align
26:53 - oops hyphen items hyphen
26:56 - center so again i'll discuss why we need
26:58 - this in one minute for right now you can
27:00 - actually just leave it as
27:01 - card header but i'm just adding these
27:03 - classes here so i don't forget to add
27:04 - them later on
27:05 - this is because we're going to show like
27:06 - a like button and there's going to be a
27:08 - comment button and a delete button and
27:10 - stuff
27:10 - and so this kind of aligns the buttons
27:12 - nicely but we're not adding all of those
27:14 - right this second
27:15 - okay so that's the header so inside of
27:17 - the header
27:18 - what i want to do is show the author of
27:20 - the post
27:21 - so i'm just looking at my kind of cheat
27:23 - sheet here to see how i'm going to show
27:25 - that
27:26 - i believe i'm going to do this with an a
27:28 - tag so a link i'm going to say
27:29 - a ahref is going to be equal to and this
27:33 - is going to be slash
27:34 - and then user slash and then inside
27:38 - of the variable here i'm going to put
27:40 - the user name so i'm going to say
27:43 - post dot user dot user name so when you
27:46 - click
27:47 - on the user's name it will redirect you
27:49 - to the page user slash their name where
27:51 - you can view all of their posts
27:53 - so yeah i guess we can do actually we
27:55 - can say posts that makes a bit more
27:57 - sense
27:58 - and then i'll end the a tag and i will
28:00 - put inside of here
28:03 - post dot user dot user name
28:06 - okay so before we go any further let's
28:08 - just refresh the page here and see what
28:10 - this looks like
28:11 - so if i refresh notice now i get a card
28:14 - and it's showing me
28:14 - the username when i click on this it
28:16 - brings me to a page we haven't yet
28:18 - created yet
28:19 - but that's good it's working so it's
28:20 - showing tip nice so
28:22 - now what we want to do is actually have
28:23 - some content inside of our card so i'm
28:25 - going to make a new class here
28:27 - this class is going to be called card
28:29 - body so div class
28:31 - is equal to card hyphen body i think
28:34 - that's all we need here
28:35 - nice i'll end the div and then inside of
28:38 - here we're going to have another div
28:41 - this class will be equal to card hyphen
28:44 - text
28:45 - and then here we're just going to put
28:47 - the post dot
28:48 - text okay so let's end the div oops
28:52 - let's save and let's see what this is
28:54 - looking like now
28:55 - so let's refresh notice now we get hello
28:58 - my name is tim so nice we have the
29:00 - author we have the text of the post
29:03 - and finally i want the date and time
29:05 - this post was posted
29:06 - at so the way i'm going to do that i'm
29:08 - going to add another div
29:10 - i'm going to say class is equal to and
29:13 - let me go
29:13 - find this right here uh this is going to
29:16 - be
29:16 - card hyphen footer and then text
29:20 - hyphen muted and inside of here
29:24 - we are going to put a date so we're
29:27 - going to say
29:28 - post dot date like that uh and this is
29:31 - actually sorry
29:32 - date created okay so let's refresh this
29:36 - and now notice we get the date and time
29:38 - that this post was created act
29:40 - perfect so hello my name is tim this is
29:42 - by tim and we have
29:44 - our date and time so now we can actually
29:46 - see all of the posts
29:47 - now the last thing i want to add here is
29:49 - the ability to delete
29:51 - a post so how do we delete a post or who
29:54 - should be able to delete a post
29:56 - well only the person who created the
29:57 - post should be able to delete it
29:59 - so what i'm going to do is put in kind
30:01 - of an if statement and a little button
30:03 - that allows you to actually press a
30:05 - delete button only if you are the author
30:08 - of the post so we're going to create
30:10 - this delete button on
30:11 - the card header and the point of this is
30:13 - that the delete button will be on the
30:15 - far
30:15 - right hand side and you can kind of
30:17 - press on it it will show you a little
30:18 - drop down menu
30:19 - that drop down menu will say delete you
30:21 - can press delete and then it will
30:23 - actually delete the post it will
30:24 - implement that functionality in a second
30:26 - so let's go inside of the card header
30:28 - and let's add
30:30 - a div this class will be called button
30:34 - hyphen group it may be btn group yeah it
30:36 - is btn group
30:38 - so btn group let's now end the div
30:42 - and inside of here we're going to put
30:43 - kind of like a drop down button
30:45 - so we're going to say button and this is
30:48 - going to be class
30:49 - or sorry type is equal to button
30:53 - class is equal to btn btn hyphen sm
30:57 - which stands for
30:58 - small button and we're going to say btn
31:00 - hyphen primary because we want this nice
31:02 - blue color
31:03 - and this is going to be drop down and
31:06 - hyphen toggle like that
31:09 - okay we're going to end the button like
31:12 - that and what we're going to do is add
31:15 - one more thing here which is going to
31:17 - say data
31:18 - hyphen bs hyphen toggle
31:22 - is equal to and this is going to be
31:24 - equal to
31:26 - a drop down okay so this is just saying
31:29 - what are we going to toggle when we
31:31 - press this button well it's going to be
31:33 - the kind of drop down menu that we
31:35 - create called drop down
31:37 - okay so now underneath here we're going
31:40 - to say
31:41 - ul we're going to start a list this list
31:44 - will be for all of the buttons in our
31:45 - drop down menu
31:47 - we're going to say li we're going to end
31:49 - the li
31:51 - this is going to say delete and the ul
31:53 - is going to have the class
31:54 - equal to drop down hyphen menu
31:58 - okay we're then going to put a link
32:01 - inside of
32:02 - our li our list item so href is going to
32:05 - be equal to something we'll define that
32:07 - in a min minute and then we will end the
32:10 - a tag
32:10 - now this is going to have a class which
32:12 - is equal to
32:14 - drop down item so drop down
32:17 - hyphen item and for now
32:20 - i think i'm going to leave it at that
32:22 - okay so let's just do a quick summary of
32:23 - what i did here because i just wrote a
32:24 - lot
32:25 - we have a div the class is equal to a
32:27 - button group that's because we're going
32:28 - to have multiple buttons in the drop
32:30 - down menu well in this case we only have
32:31 - one but we could add more
32:33 - we have a button this button is type
32:36 - button class btn btn small btn primary
32:39 - and we are toggling the drop down toggle
32:42 - or
32:42 - the classes drop down toggle so it's
32:44 - going to toggle drop down to
32:45 - come down we have data bs toggle is
32:48 - equal to
32:49 - drop down and then we have a class drop
32:52 - down menu we have a
32:53 - list item which is delete and then we
32:56 - end
32:56 - the list of all of our drop-down buttons
32:59 - okay so when we press
33:00 - on uh this button right here it should
33:02 - toggle these
33:03 - to come down okay so let's just try this
33:06 - quickly
33:07 - let's refresh notice our button is on
33:09 - the right hand side of the screen
33:11 - and when i press this it toggles delete
33:13 - to come down
33:14 - awesome that is exactly what we want now
33:16 - when we press delete right now it
33:17 - doesn't do anything but i will make it
33:19 - so it goes to a page that deletes
33:20 - the post nice okay and the reason
33:24 - why again we wanted all of this stuff is
33:25 - so that delete button
33:27 - went to the far right hand side of all
33:29 - of our uh what do you call its
33:31 - posts okay so now what we're going to do
33:34 - inside of here is make this go to delete
33:36 - hyphen post slash and then this is going
33:39 - to be the id of the post that we want to
33:40 - delete so post dot id
33:42 - nice now we're almost done the last
33:44 - thing i need to do is make it so we only
33:46 - showed this
33:47 - button if the user is actually the owner
33:50 - of this post
33:51 - so only if the user that's logged in
33:53 - wrote the post that we're seeing are we
33:55 - going to allow them to
33:56 - to delete it sorry no other user can
33:58 - delete this post so we're going to do an
33:59 - if statement
34:00 - percent percent if user dot
34:03 - id is equal to post dot and in this case
34:07 - we can just say author because that
34:09 - stores the id
34:10 - of the user who created this post so if
34:13 - that's the case then we'll show all of
34:14 - this
34:15 - so we can just end the if down here so
34:17 - we'll say percent percent
34:20 - and if all right so if i refresh this it
34:22 - should still work we should still see
34:24 - the delete button because we
34:25 - are the author of this post but now if i
34:28 - log out and let's create a new account
34:31 - so let's go sign up
34:32 - and let's go tim2 gmail.com
34:35 - tim2 make a password
34:39 - okay sign up now notice it's not showing
34:42 - me the delete button because well this
34:43 - isn't my post
34:44 - so let's make a post create hyphen post
34:48 - let's say hello test post and put
34:52 - and see now that i can actually press
34:53 - the delete button on the post that i
34:55 - created all right we're getting close to
34:57 - done here a few more touches we need to
34:59 - add
34:59 - obviously we don't want these posts
35:00 - smooshed together so what i'm going to
35:02 - do is add a
35:03 - break line at the end of my for loop so
35:06 - that there is kind of a space between
35:07 - all of my posts so let's go here
35:09 - and let's add a br and now if i refresh
35:13 - you should see that there's a bit of a
35:14 - space so i just added a br right before
35:16 - the
35:16 - end of the for loop so after all the
35:18 - cards that i create
35:20 - we're gonna have that break line nice so
35:22 - now what we need to do
35:24 - is make it so we can actually delete the
35:26 - post so when i press on this button it
35:27 - should redirect us to a page called
35:29 - delete post
35:30 - that's going to take the id of the post
35:32 - that we want to delete we should then
35:33 - delete that
35:34 - refresh the page and well be good to go
35:37 - all right so let's do that let's go to
35:38 - views.pi
35:39 - and let's make a view that can delete
35:41 - our post we're going to say add views
35:43 - dot root we're going to say slash delete
35:45 - hyphen post
35:46 - slash and then i'm going to show you how
35:48 - we can add a variable
35:50 - to our path here so you add angle
35:53 - brackets
35:53 - like this and then you put the name of
35:56 - the variable
35:57 - that you want to kind of grab when
35:59 - someone goes to this group so this is
36:01 - called a dynamic path or a dynamic route
36:04 - so if i say delete post and then i say
36:06 - id what i can do now is say define
36:09 - delete underscore post i can put my id
36:12 - inside of here and whatever the user
36:14 - types in for the id of the post will be
36:16 - passed to this function
36:18 - as the parameter id so this says you can
36:21 - go to delete post
36:22 - and then after that you're going to have
36:23 - some parameter this can be whatever
36:26 - value and that's going to be called id
36:28 - then inside of here we'll grab the id
36:30 - we'll check this is the valid id for a
36:31 - post we'll make sure the person trying
36:33 - to delete this post
36:34 - is the correct person and then of course
36:36 - we'll delete that post or is the
36:38 - authorized person sorry okay so we're
36:40 - going to make this
36:41 - login required as well and what we're
36:43 - going to do here
36:44 - is we are going to actually yeah we can
36:47 - leave this as a get request
36:48 - we're going to start by checking if
36:50 - there is a post that has this id
36:52 - so we're going to say post is equal to
36:54 - post with
36:55 - a capital dot query dot filter
36:59 - underscore by
37:00 - we're going to say id is equal to id
37:03 - so again we're just checking if there's
37:05 - some post that has this id
37:08 - that we would have passed through this
37:09 - parameter if there is not
37:11 - so actually we need to add a dot first
37:14 - here to get the first result
37:16 - so we're going to say if not post then
37:18 - flash
37:21 - post does not exist okay
37:24 - and the category
37:28 - is going to be equal to error okay so
37:30 - we're going to flash that
37:31 - then we're going to return a redirect
37:33 - for the url underscore 4 and this is
37:36 - going to be views.home
37:38 - because we're actually going to kind of
37:39 - go to this page try to delete the post
37:41 - and then just automatically redirect
37:43 - them back home
37:44 - and in fact i'm realizing we can
37:46 - actually just put this here because no
37:47 - matter what happens we're always going
37:48 - to redirect them back to the home page
37:51 - all right so we're going to flash that
37:52 - now else we're going to check
37:55 - if the current user is the owner of this
37:58 - post we're going to say alif
37:59 - the current underscore user dot id is
38:01 - equal to the
38:03 - sorry post dot id so if this is the case
38:07 - we can delete the post but we can
38:09 - actually make this a not equal to
38:11 - okay so now we will flash a message and
38:13 - we will say
38:14 - you do not have permission
38:17 - to delete this post okay and then
38:21 - finally else so if the post does exist
38:23 - and we have the right to delete the post
38:25 - then we will delete it so to do that
38:27 - we're going to say db
38:28 - dot session dot delete
38:32 - post and then db dot session dot
38:35 - commit and then we're going to flash the
38:38 - message
38:40 - post deleted with the category equal to
38:45 - success all right so i think that is all
38:48 - good so that should actually work for
38:50 - our delete post method so we have
38:52 - delete post we take an id we check if
38:55 - this post
38:55 - exists we get the first result if that
38:57 - post does exist we then check
38:59 - okay is the post here do we have a post
39:01 - if we don't have a post the post doesn't
39:03 - exist we flash this
39:04 - otherwise we check if the current user
39:06 - so the logged in user actually did
39:08 - create this post
39:09 - if they didn't then you don't have
39:10 - permission to delete this post
39:12 - otherwise we actually delete the post
39:14 - and then flash yes you deleted the post
39:15 - and i'll just add a period right there
39:17 - okay so let's try this i'm going to
39:19 - rerun the app
39:21 - i'm going to go here and refresh now i'm
39:24 - already signed in as tim2 so i'm going
39:25 - to try to delete this
39:26 - when i press delete we get post deleted
39:29 - awesome and there we go now let's just
39:31 - see what happens if i go to
39:33 - delete hyphen post slash one
39:37 - if i do that you do not have permission
39:39 - to delete this post
39:40 - now i'm noticing that it doesn't seem to
39:43 - be showing me this
39:44 - in red so let's quickly fix that so we
39:46 - make sure the error message
39:47 - shows up as an error message and we can
39:49 - do that by going to
39:51 - base.html okay so if i go to base.html
39:56 - and i find my message flashing which is
39:58 - this mess right here
39:59 - we will check okay so if the category is
40:02 - equal to
40:03 - error then we are showing this otherwise
40:07 - we are showing this okay so this should
40:10 - be working because
40:11 - the category should be equal to
40:14 - error i'm interested in
40:18 - why we're not getting this because if
40:20 - category is equal to error
40:22 - we should show the alert danger
40:23 - otherwise we should show this
40:25 - okay so give me a second i'll be right
40:26 - back okay so it turns out that was quite
40:28 - a silly mistake i'm sure you guys
40:29 - probably noticed that when i was doing
40:30 - this but i forgot to add this category
40:33 - equals error
40:34 - to this flashed message right here so
40:36 - when it was showing this message it
40:37 - wasn't showing it in red
40:39 - but now it is showing it in red you can
40:41 - see if i go here and i try to delete
40:42 - post one you do not have permission to
40:44 - delete this post
40:45 - shows up in red alright so that was my
40:47 - mistake now
40:48 - let's continue so deleting the post
40:50 - works adding the post works the last
40:52 - thing i want to do here is make it so we
40:54 - have a little button that says
40:55 - create post it brings you to the create
40:57 - post page so that you don't have to go
40:58 - to manually slash create post
41:00 - so let's do that i'm going to go to
41:02 - home.html
41:04 - i'm going to go underneath the for loop
41:05 - here i'm going to make a div
41:07 - class sorry not class align is equal to
41:12 - center okay we're going to end the div
41:15 - we're going to put a button here so
41:17 - we're going to say button
41:19 - type equals button class
41:22 - equals btn btn hyphen primary
41:26 - and then i'm going to go with button
41:27 - large i'm going to go slash
41:29 - and this is button and i'm going to make
41:32 - this same
41:33 - create a post now this should
41:36 - redirect us so i actually forget if i
41:39 - need to put an a tag around this or not
41:41 - let me go look at my cheat sheet okay
41:45 - yes i'm going to put an a tag around
41:47 - this that goes to the page that we want
41:49 - so i'm going to say a
41:50 - href equals and this is going to be
41:52 - slash and
41:53 - create hyphen post and i will end my a
41:56 - tag after the button
41:58 - nice okay so now i have this so we're
42:00 - going to go to create post
42:02 - and we have the button and we should be
42:04 - all good okay so
42:06 - let's refresh and now we have this
42:08 - create a post button
42:10 - when i press that it brings me to this
42:11 - page now the last thing i want to do is
42:13 - make a back button on this page
42:15 - so i can go back to the home page
42:16 - without having to manually go here and
42:18 - press
42:18 - home so let's do that let's go to create
42:21 - post
42:22 - let's simply add another button that
42:24 - goes after
42:25 - this form so we'll add a break line here
42:28 - so br
42:29 - okay and then this button will be type
42:32 - button this class will be button button
42:34 - large button primary sure and then we
42:36 - can make this say
42:37 - back okay and then lastly we're going to
42:39 - add an a tag
42:41 - we're going to say a href equals slash
42:43 - home
42:44 - and then this will be slash a
42:48 - like that okay so we now made our button
42:50 - let's
42:51 - refresh and if i go to create a post
42:54 - i now have a back button when i press
42:56 - back i go back to the other page
42:58 - i'm thinking it might make sense to
43:00 - actually change the color of this button
43:02 - so i'm going to do that and rather than
43:04 - making it primary i'm going to make it
43:05 - the default color which is kind of like
43:07 - a gray
43:08 - so if i refresh now oops is default not
43:11 - one hmm
43:12 - let's make this secondary rather than
43:15 - default let's make it secondary and
43:17 - let's see what we get
43:18 - okay that's what i wanted secondary
43:20 - gives us kind of that gray button
43:21 - so now we can go back and we could
43:23 - change the size of those buttons if we
43:25 - want but i think for now
43:26 - that is fine all right so now we are
43:28 - going to end off the tutorial by making
43:30 - it so when we press on a user's name it
43:32 - brings us to kind of their profile
43:34 - where it shows all of their posts so to
43:36 - do that we're going to start by creating
43:37 - a view
43:38 - so our view here is going to be at views
43:42 - dot root so at views dot root this is
43:46 - going to be slash
43:47 - post slash and then we're going to say
43:49 - user name like that
43:51 - we're then going to make this login
43:52 - required we're going to say define
43:55 - and this is going to be posts i guess
43:58 - and this will take a username and then
44:00 - what we're going to do is just query all
44:02 - of our posts so i'll copy this right
44:04 - here
44:04 - but instead of querying it by an id
44:06 - we're going to query it by a username
44:08 - so we're going to say username is equal
44:10 - to username and rather than getting the
44:12 - first result we're going to get
44:13 - all of the results so we're going to
44:15 - filter by the username that we typed in
44:17 - here
44:18 - grab all of the results and then we're
44:20 - just going to pass that
44:21 - to actually we could pass it to the home
44:23 - template but i'm going to pass it to a
44:25 - different template
44:26 - just so that we can make this a bit more
44:28 - unique so once we get all the posts by a
44:30 - certain user
44:31 - then what we can do is say return and
44:34 - this will be
44:35 - render template and this template will
44:38 - be post
44:38 - dot html we'll pass the user equal to
44:42 - current user
44:43 - and we'll pass the posts equal to post
44:46 - like that this should be a plur okay so
44:49 - that's fine
44:50 - now the next thing that i'm going to do
44:51 - here is just a quick check to make sure
44:53 - that the username
44:54 - the person typed in actually does exist
44:56 - so the way i'm going to do that is say
44:58 - user is equal to user
45:00 - dot query dot filter underscore by
45:03 - i'm gonna go username is equal to
45:05 - username and then
45:07 - get the first result the reason i'm
45:09 - doing this is because i don't really
45:10 - want to show a page
45:12 - if the user that this person typed in
45:14 - doesn't actually exist so let's make
45:16 - sure the username does exist
45:18 - if it does exist we can do this we can
45:20 - show all of their posts
45:21 - otherwise we can just flash a message
45:23 - and say hey no user with this name right
45:26 - so i need to import user so let's go to
45:29 - models and import user and let's just
45:32 - make sure the user exists we're going to
45:33 - say if
45:34 - not user then we're going to flash a
45:37 - message
45:38 - we're going to say no user with that
45:41 - username exists okay the
45:45 - category is going to be equal to error
45:48 - and then we're going to return a
45:50 - redirect for the url
45:53 - underscore four we'll move this in in a
45:56 - second
45:57 - views dot home okay so let's grab this
46:01 - let's put this here and then otherwise
46:04 - we can
46:04 - do this and we can show all of their
46:06 - posts nice so now what i'm going to do
46:08 - is go to the post.html page
46:11 - all right so we're now on post.html now
46:13 - what i want to do is i want to have the
46:15 - title of this page
46:17 - be like user names posts right and then
46:20 - i want to have a header that says
46:21 - post by whatever this person's username
46:23 - is so what i'm going to do here is go to
46:25 - views.pi
46:26 - and i'm just going to pass one more
46:27 - thing i'm going to say
46:30 - username is equal to username just so i
46:33 - can access
46:34 - this right here the variable that's a
46:36 - part of the url
46:38 - so now if i go to post.html i can make
46:41 - the title
46:42 - be user name
46:46 - and then apostrophe s post right so
46:48 - that'll be the title of this page
46:50 - and in the same way i'll copy this and
46:52 - i'll use this for kind of the header
46:53 - that will display on the page so inside
46:55 - of the content
46:56 - block what i'm going to do is say
46:59 - h1 slash h1 we'll say align
47:03 - is equal to center and then same thing
47:06 - we'll put this right here
47:07 - okay so now that i have this i want to
47:09 - display all of the posts right
47:11 - and the way i'm going to display the
47:12 - post is going to be the exact same as
47:14 - what i've already done
47:15 - on this home page so rather than me
47:17 - writing all of this code again
47:18 - what i'm going to do is take all of this
47:20 - code and put it into a template and i'm
47:22 - going to inherit from that template
47:24 - on both the home page and the post
47:27 - page so i'll show you how this works but
47:28 - we're going to copy all of this code
47:30 - here
47:31 - that's inside of what is it home.html so
47:34 - we're going to copy
47:35 - all of that and we're going to go inside
47:36 - of post div and inside of the content
47:39 - block
47:40 - we're going to paste it okay so now we
47:42 - have all of the code that we have
47:44 - from the home page now i'm just going to
47:45 - start kind of reconfiguring a few things
47:47 - here so i'm going to take this div
47:49 - which is right here so this div
47:51 - corresponds with this div tag
47:52 - i'm just going to move it up so that it
47:54 - ends at the for loop so notice now when
47:56 - i save this we have a separate div here
47:59 - and then we have this div right here now
48:01 - what i'm going to do
48:02 - is i'm going to start creating some
48:03 - blocks inside of this template so i have
48:06 - this header right
48:07 - and this header is going to be different
48:09 - based on the page that i'm displaying
48:11 - the post on
48:11 - on the home page i want to say posts but
48:14 - on the post page i want to say the user
48:16 - names posts right
48:17 - so the way i'll do this is i'll say
48:19 - block and then
48:21 - oops this needs to be done differently
48:23 - percent percent i'm going to say block
48:25 - header like that and i'm going to end
48:28 - the block here so i'm going to say
48:29 - percent percent
48:30 - and block now i could actually
48:34 - just put this right inside where the
48:36 - text is so i can end the block there
48:38 - and start the block here so this way all
48:40 - we have to do is just type in the text
48:42 - we don't need to rewrite the h1 tag
48:44 - perfect so that is my block for the
48:47 - header
48:47 - now this is all going to be the same
48:49 - right this entire div is going to be the
48:50 - exact same
48:51 - for all of my pages however this button
48:54 - here at the bottom may not be
48:55 - so what i'm going to do is just put this
48:57 - inside of its own block as well i'm
48:58 - going to say block
49:00 - and i'll just say button or i can say
49:02 - maybe
49:03 - footer because it's the end of the page
49:05 - and then i can say percent percent
49:07 - and end block so there we go so what
49:10 - i've done now is i've created this
49:11 - template this template extends base.html
49:14 - and now i'm going to go to home.html and
49:17 - i'm going to extend from
49:19 - the postdiv.html so post underscore div
49:22 - and this is a plural i believe
49:25 - nice now i actually don't need to change
49:27 - anything here i can override
49:29 - the block title like i have done before
49:31 - and this should just show me the correct
49:33 - page because i'm just inheriting
49:34 - this post div template here which has
49:37 - all of the stuff that i had before
49:39 - on the home page now though i'm going to
49:42 - go to post.html and rather than
49:44 - inheriting from base.html i'm going to
49:46 - inherit from post
49:47 - underscore div dot html now i can change
49:50 - the title like this
49:51 - that's fine and for the block content
49:54 - i'm going to get rid of
49:55 - this okay and rather than actually i'll
49:58 - leave this here but rather than it being
49:59 - block content
50:00 - i'm going to make this block header and
50:02 - then all i'll do
50:04 - is just put user names posts like that
50:07 - inside of the header block and i think
50:11 - for now that's actually all i need to do
50:13 - now i may want to remove the button for
50:15 - creating a post
50:16 - so the way i can do that is i can just
50:18 - override the block and put nothing there
50:19 - so i can say block
50:21 - footer and i can say percent percent
50:24 - and block so let's just rerun this and
50:28 - see if this is working at all
50:29 - but you can see why this is advantageous
50:31 - because now if i ever change how the
50:33 - posts are displayed
50:34 - i only need to change them in one place
50:36 - and both my post page
50:38 - and my home page will update based on
50:41 - the changes made to this template right
50:42 - here
50:43 - so let's go and refresh this and okay
50:45 - we're getting some type of error i guess
50:47 - it's just not
50:47 - showing the correct post so let's try to
50:50 - go to posts
50:52 - slash tim and see if that does anything
50:54 - no okay that's not working
50:56 - so let me just have a quick look here
50:58 - and see what's wrong okay so i found the
51:00 - error if you go to the home page here
51:01 - notice how i was writing block content
51:03 - and end block
51:04 - since i was doing that i was overriding
51:05 - the content block from mypostdiv.html
51:08 - so if you just remove that and you press
51:10 - save so now you just have the title and
51:12 - you go here and you refresh
51:14 - notice how it actually shows you the
51:15 - proper post however when i click on this
51:18 - here
51:19 - i get some error it's saying
51:21 - website.model.post has no property
51:23 - username
51:24 - the reason i'm getting that is because
51:25 - i've made a mistake inside of
51:27 - myviews.com
51:28 - so if you go here notice i have
51:31 - where is it here post username equals
51:34 - username
51:35 - that's not going to work i clearly
51:36 - cannot query the post by the username
51:39 - what i need to do instead is query the
51:40 - post by the author
51:42 - so i'm going to say author is equal to
51:46 - and this is going to be user.id so i've
51:48 - now got the user right
51:50 - so i have the id of the user this is
51:52 - storing the id of the user who owns the
51:54 - post
51:54 - and so i'm going to query all of the
51:56 - posts by the id
51:58 - right by the author so i just need to
52:00 - change that and now
52:01 - this should actually work properly so if
52:03 - i go back to post and i refresh
52:05 - notice i get tim's posts there we go
52:08 - perfect the last thing i want to do here
52:11 - is i want to make it
52:12 - so that we have a little back button
52:13 - that brings us back to the home page so
52:15 - that's pretty easy to do i'm going to go
52:17 - to
52:19 - post.html notice how we already have the
52:21 - block
52:22 - footer so inside of the footer block i'm
52:25 - just going to go
52:25 - to the post div i'm going to copy
52:29 - this div right here and i'm just going
52:31 - to put a button that goes somewhere else
52:33 - so rather than create a post i'm going
52:35 - to say back and this is just going to go
52:37 - back
52:37 - to slash home there we go so now i have
52:41 - that button here
52:42 - same as what we've done before and if we
52:44 - refresh we have the back button
52:45 - and i can go back and it brings me to
52:47 - the posts page
52:48 - perfect so with that i think i'm going
52:51 - to end the video here
52:52 - a reminder that all this code will be
52:54 - available on github if you guys enjoyed
52:56 - the video please make sure to leave a
52:57 - like
52:57 - subscribe to the channel and i will see
52:58 - you in another one