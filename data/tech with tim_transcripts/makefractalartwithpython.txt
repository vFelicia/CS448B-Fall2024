00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video
00:11 - so in today's video i'm gonna be showing
00:13 - you how we can create some fractal art
00:15 - using python and the turtle module
00:18 - now specifically we'll be using
00:19 - recursion to actually create these
00:21 - fractals
00:22 - well in case you're unfamiliar with what
00:23 - fractals are let me just show you a
00:24 - really quick example here of what we're
00:26 - actually going to create in this video
00:28 - now what i'm showing you here is really
00:29 - just scratching the surface of what's
00:31 - possible with this kind of method of
00:33 - drawing things and creating these types
00:34 - of patterns
00:35 - you can get really creative with this i
00:37 - actually remember back when i was in
00:39 - about grade 11 i think this was given to
00:41 - us as a school project
00:42 - and we had to create fractal art and i
00:44 - remember people came up with all kinds
00:46 - of really really interesting stuff
00:48 - that uses this kind of method of
00:50 - repeating a pattern over and over again
00:52 - or repeating a series of step steps over
00:54 - and over again sorry to create a pattern
00:56 - or a fractal like this
00:58 - so fractal is a pretty hard thing to
00:59 - define but really
01:01 - as i was saying you're kind of repeating
01:03 - a series of steps and that ends up
01:04 - creating an infinite pattern
01:06 - that kind of looks really interesting
01:07 - and cool in a lot of abstract art you'll
01:10 - see stuff that kind of looks like
01:11 - fractals or may
01:12 - resemble a fractal and well here you can
01:14 - see we have a snowflake and we have a
01:15 - tree
01:16 - these are the two things i'll show you
01:17 - how to create here but as i was saying
01:19 - you can kind of go and extend this and
01:20 - modify these
01:21 - and create some really interesting
01:23 - fractals with this method
01:24 - so that said let's dive into the video
01:26 - after a quick word from our sponsor
01:28 - before we dive in i need to thank
01:30 - typingdna for sponsoring this video
01:32 - typingdna uses typing biometrics to
01:34 - verify users identities and provide a
01:36 - seamless two-factor authentication
01:38 - method
01:38 - typing dna helps you avoid annoying and
01:40 - unnecessary sms
01:42 - authentication messages and only uses
01:44 - sms and email verification
01:46 - as the root of trust not the default
01:48 - authentication method
01:49 - not only are typing biometrics
01:51 - convenient but they're also secure
01:53 - typing dna uses proprietary typing
01:55 - biometrics authentication technology
01:57 - coupled with key phrases of high
01:59 - complexity regarding the number of
02:00 - different characters
02:01 - the way they are dispersed throughout
02:02 - the keyboard layout and the vertical and
02:04 - horizontal travel
02:05 - one of the best parts of typing dna is
02:07 - that it's free and also extremely easy
02:09 - to implement
02:10 - start using typing dna and typing
02:12 - biometrics today to provide a better
02:13 - experience and seamless authentication
02:15 - method for your users
02:17 - check it out from the link in the
02:18 - description and create an account to try
02:20 - out the demo
02:20 - you see here all right so let's just go
02:22 - ahead and dive in here the first thing
02:24 - i'm going to show you is just a little
02:26 - bit about the turtle module so kind of a
02:27 - little summary about that just show you
02:29 - some of the methods and functions that
02:30 - we're going to use here
02:32 - then i will show you how we can build
02:34 - the tree and then how we can make
02:36 - the snowflake now the first thing we
02:38 - need to do here is we need to use the
02:39 - turtle module we need to import the
02:41 - turtle module so i'm going to say from
02:42 - turtle
02:44 - import asterix or import star what this
02:46 - will do is import everything from the
02:48 - turtle module
02:49 - so we can use all of the methods without
02:50 - having to prefix them with turtle dot
02:53 - and then whatever else
02:54 - now i realize i haven't really explained
02:55 - what the turtle module is so this is a
02:57 - 2d
02:58 - graphics module in python allows you to
03:00 - make very simple kind of
03:02 - art i guess you could call it uh or
03:04 - illustrate things or kind of visualize
03:06 - things usually this module is meant for
03:08 - kind of beginners or intermediates but
03:09 - you can make a lot of cool stuff with it
03:11 - super simple it's built into python by
03:13 - default you don't need to install it
03:15 - and actually have an entire tutorial
03:16 - series on my channel showing you how to
03:18 - use the turtle module
03:19 - so if you want to follow along with that
03:20 - if some of this stuff is confusing and
03:22 - you want
03:23 - i guess some information about it
03:24 - beforehand feel free to check that out
03:26 - i'll leave a link to it in the
03:27 - description and
03:28 - put a card to it in the top right hand
03:29 - corner of the video
03:31 - okay so from turtle import star now what
03:33 - i want to do is just give you a quick
03:34 - summary of how the turtle module works
03:37 - the first thing that we need to do here
03:38 - is we just need to type main loop
03:40 - now the reason we need to type this is
03:41 - because what this will do
03:43 - is make it so the turtle module screen
03:46 - or kind of canvas
03:47 - doesn't close immediately as soon as we
03:49 - run the program because right now if we
03:51 - run the program what's going to happen
03:52 - is we're going to import everything from
03:53 - turtle then we're immediately going to
03:55 - end the program so when you put main
03:56 - loop here
03:57 - this will make it so that we kind of
03:58 - stay in the program until we press the x
04:01 - button on the turtle screen so if i run
04:02 - my program now
04:04 - you can see that there's a little x and
04:05 - now when i press x obviously it closes
04:07 - now one last thing i'll note i'm sure
04:09 - some of you guys will ask i'm using
04:10 - sublime text here this is a free text
04:13 - editor
04:14 - you can use this if you want but really
04:15 - the only prerequisites for this video
04:17 - you have python installed and you have
04:19 - some text editor you want to use
04:20 - you can use the default idle that comes
04:22 - with python
04:24 - or you can use whatever one you're
04:25 - comfortable with all right so now we
04:27 - have
04:27 - mean loop okay so when we do main loop
04:29 - you can see it pops up the canvas there
04:31 - and that's where we're actually going to
04:32 - be kind of drawing stuff now the reason
04:34 - this module is called turtle is because
04:36 - you have this little
04:37 - i don't even know what to call it kind
04:38 - of pointer cursor
04:40 - cursor is probably a better word for it
04:42 - and the cursor starts at zero zero in
04:44 - the very middle of the canvas
04:46 - and then you move the cursor around and
04:48 - every time you move it it's going to
04:49 - draw a line
04:50 - based on where you move it so the best
04:52 - way for me to show you this to you is to
04:53 - just move the cursor forward
04:55 - by a certain number of pixels so the
04:57 - first method that i'm introducing here
04:58 - is called forward
04:59 - it takes a number of pixels you do
05:01 - forward number of pixels and then it's
05:03 - going to move your cursor
05:04 - forward that number of pixels now notice
05:06 - how this isn't a turtle but you can
05:07 - actually change this to be a turtle in
05:09 - fact
05:10 - i'll show you how you do that if you do
05:11 - shape
05:13 - and then turtle like this there's a few
05:15 - other ones as well
05:16 - and then you run this notice now this
05:18 - changes to a turtle hence the name of
05:20 - the module
05:20 - regardless though you saw it starts
05:22 - facing right it starts at zero zero so
05:24 - the
05:25 - directions or the coordinate system of
05:27 - turtle is the middle is zero zero
05:29 - as you go up the y increases as you go
05:31 - down the y decreases
05:33 - as you go to the left the x decreases as
05:35 - you go to the right the
05:36 - x increases so it starts facing the
05:38 - right when you go forward it's going to
05:39 - move to the right
05:41 - okay so now i'll show you how we can
05:43 - change the direction of the cursor head
05:46 - so if you wanted to say turn this turtle
05:48 - so it's going to the left
05:50 - what you could do is say left 90 and
05:52 - what this will do is relative to the
05:54 - current
05:54 - position it's facing it will turn the
05:57 - cursor
05:58 - uh 90 degrees to the left so if i do
06:00 - this
06:01 - and then i say forward 100 like that
06:04 - see how we go here then we make a right
06:06 - angle turn and we go left and we go
06:08 - forward by 100 because what we have left
06:10 - 90 forward 100. now you don't have to do
06:12 - them on right angles you could do
06:13 - you know 45 degrees if you do this
06:15 - notice we turn 45 degrees and then we go
06:18 - there
06:19 - all right so that is kind of the basics
06:20 - now in the same sense that there's left
06:22 - there's also right
06:23 - so maybe we go right by 90 after we go
06:26 - left 45 and then we go forward by
06:28 - another 100 there you go you can see
06:30 - we've kind of created the top of a
06:31 - triangle here
06:32 - nice now another method to show you is
06:35 - backward
06:36 - so you can also go backwards in the same
06:38 - way you can go forwards right so i don't
06:40 - think i need to explain what that does
06:41 - you can see that now it goes back nice
06:44 - now there's a bunch of other methods
06:45 - i'll kind of get to them as we go
06:47 - through here but that's the very basics
06:48 - just wanted to give you a
06:50 - quick you know kind of explanation of
06:51 - what's going on here and what we're
06:52 - doing
06:53 - all right so now that we have that what
06:54 - i'm going to do is i'm going to leave
06:56 - the shape
06:56 - equal to turtle but i want to change the
06:59 - speed of this so when you set the speed
07:00 - equal to zero and actually let me go
07:02 - back to what we have before so i can
07:03 - show you
07:04 - what this will do is make the turtle as
07:06 - fast as possible now since we're going
07:07 - to be drawing a lot of stuff it's a good
07:09 - idea to do that otherwise it's going to
07:10 - take a long time
07:11 - so notice i had speed equal to zero and
07:12 - this happened almost instantly
07:14 - obviously because it's very fast now
07:16 - nice okay so now that we have our shape
07:18 - equal to our turtle
07:19 - and speed equal to zero what we can do
07:22 - is start drawing
07:23 - the tree so let's get into that part of
07:25 - the video i'm going to create a function
07:27 - here
07:28 - and i'm going to call this tree and what
07:30 - i want to take for this tree
07:31 - is the size of it the number of levels
07:34 - in this tree
07:35 - and then the angle at which all of the
07:37 - branches should be
07:38 - in this tree so let me just run my
07:40 - previous example here
07:42 - so we can kind of look at the tree
07:43 - that's created and then i'll discuss
07:45 - exactly how we're going to go about
07:46 - making this
07:46 - using recursion so notice here that we
07:49 - kind of have a lot of different levels
07:50 - in this tree right
07:51 - we have our first level which is these
07:53 - two branches where my my mouse is so
07:55 - just these two ones here
07:56 - then off of each of those branches
07:58 - there's two more right and then off of
08:00 - all of those branches there's two more
08:02 - and that's kind of where the recursive
08:04 - aspect comes in here every time we draw
08:05 - a branch we're going to draw two more at
08:07 - the end of that branch
08:08 - until we reach the number of levels that
08:10 - we specified for this tree
08:12 - now i believe the number of levels for
08:14 - this tree is six it's either five or six
08:16 - we have one two three four five okay so
08:19 - there's five levels in this tree
08:20 - this first line doesn't count as a level
08:23 - and anyways that's what a tree of five
08:25 - levels looks like but
08:26 - as you increase the number of levels you
08:28 - increase the number of branches and
08:29 - obviously the tree gets larger and more
08:30 - complex
08:32 - nice so that's kind of the basic so what
08:33 - we want to do is want to go up want to
08:35 - draw a branch to the left
08:36 - draw branch to the right and then off of
08:37 - all of those branches same thing left
08:39 - right left right so on and so forth
08:41 - but how do we actually do that well when
08:42 - we go up we need to determine what
08:44 - direction we want to turn the turtle to
08:46 - the right so at what angle
08:48 - then we need to turn it back to the
08:50 - other side to draw the other branch
08:52 - then we need to draw both of the
08:53 - branches off of those so i'm going to
08:55 - show you how we go about doing that
08:57 - but i just wanted to kind of give you an
08:59 - example here so you can see what it is
09:00 - we're going to be trying to create
09:01 - because it is pretty abstract when i
09:03 - start writing a lot of this stuff
09:04 - so the first thing i need to do here is
09:06 - since it's going to be a recursive
09:07 - function we're going to call this
09:08 - function from inside of itself is i need
09:10 - to define a base case
09:11 - essentially telling this function hey
09:13 - when do i stop when am i allowed to stop
09:16 - recursively calling myself
09:17 - you need a base case if you don't have a
09:18 - base case you're going to run into an
09:20 - infinite loop
09:21 - and you'll have some error pop up saying
09:22 - maximum recursion depth exceeded
09:24 - if you see that that means you didn't
09:26 - implement a base case and your function
09:28 - just never stops running
09:29 - so what i'm going to do here is say if
09:31 - the levels
09:32 - are equal to zero then what i want to do
09:35 - is return
09:36 - and the reason i'm going to do this is
09:37 - because what's going to happen is i'm
09:38 - going to call this function
09:39 - i'm going to pass it some size let's say
09:41 - 90 i'll pass it levels maybe like 6 and
09:44 - then we'll pass some angle let's just
09:45 - say 60 degrees
09:46 - and inside of this function we're going
09:48 - to call itself but every time we call
09:50 - ourself we're going to say
09:51 - with the size levels minus 1
09:54 - and then the angle now forget about this
09:56 - first and last parameter
09:58 - what you want to look at is this levels
09:59 - parameter here every single time we
10:01 - recall ourself we're going to subtract 1
10:04 - from levels
10:05 - so eventually we're going to get to a
10:06 - point where we have levels equal to 0
10:08 - we reach our base case and then we move
10:10 - on with the rest of the program
10:12 - hopefully that makes sense but just
10:13 - trying to give you some explanation here
10:14 - in case you haven't seen
10:16 - recursion a lot before okay so let's
10:18 - keep going here the first thing i want
10:19 - to do
10:20 - inside of this function is i want to go
10:22 - forward
10:23 - by whatever the size of the tree is
10:27 - so this will be responsible for drawing
10:28 - that very first line we saw that first
10:30 - up
10:31 - vertical line but this will also draw
10:33 - all of the branches as well
10:35 - this is actually going to be the uh is
10:36 - this the only forward that we have
10:38 - uh yes this is actually the only four
10:40 - that we have because
10:42 - every single time we get to a point
10:43 - where we're drawing forward we're ready
10:45 - to actually draw a branch and by the way
10:46 - if you see me looking over here
10:47 - i just have another screen open that has
10:50 - the code for this so i don't forget
10:51 - because
10:52 - it's very easy to mess this up there's a
10:53 - lot of stuff that needs to be
10:55 - pretty specific all right so we're going
10:56 - to go forward by the size of the tree
10:59 - and then once we've drawn our current
11:01 - branch what we want to do is draw
11:02 - two more branches one to the left and
11:04 - one to the right so what we're going to
11:05 - do is we're going to go to the right by
11:07 - whatever our angle is
11:08 - and we're going to draw another branch
11:10 - now to draw a branch we're going to call
11:12 - this tree function because
11:13 - inside of the tree function we have this
11:15 - board and then it will draw more
11:16 - branches right so we're going to call
11:18 - tree
11:18 - but this time when we call tree we're
11:20 - going to pass size
11:22 - multiplied by 0.8 so pretty much we want
11:25 - to pass
11:25 - 80 percent of whatever the current size
11:27 - was to be the length or the size of the
11:30 - next tree branch so that they actually
11:31 - get smaller right and it makes sense
11:33 - and then for levels we're going to say
11:35 - levels minus one because at this point
11:36 - we would have already drawn
11:38 - one level and so now we're passing
11:40 - levels minus one
11:41 - to indicate hey now when you go to the
11:44 - next step we're going to be at you know
11:45 - five levels left to draw four levels
11:47 - left to draw
11:48 - so on and so forth and then for the
11:49 - angle we're just going to always pass
11:51 - the same angle unless you want to tweak
11:52 - this feel free to
11:53 - multiply it by a random number or
11:55 - something and you'll see kind of
11:56 - different
11:57 - uh angled branches which is always
11:58 - interesting to do maybe we'll do that
12:00 - yeah
12:00 - okay so we have tree size times 0.8
12:03 - levels minus 1
12:04 - angle that is going to draw our right
12:06 - tree branch now we want to draw the left
12:09 - tree branch so to do
12:10 - that we need to go to the left so we're
12:11 - going to say left
12:13 - and we're going to go to the left by
12:14 - angle multiplied by 2.
12:16 - now the reason we're multiplying the
12:17 - angle by 2 is because if we just
12:19 - went to the right by our angle so
12:21 - imagine we're straight we're straight up
12:23 - if we went to the right by some angle i
12:25 - know that's your left but that's my
12:26 - right
12:26 - then if we want to get back to the
12:29 - middle we would have to go the opposite
12:30 - direction by the same angle so if this
12:32 - is 60 degrees
12:33 - and we want to go back to the middle we
12:34 - have to go back 60 degrees so if we want
12:36 - to go to the other side
12:38 - by the additional amount of the angle we
12:40 - need to go two times the angle so from
12:41 - here
12:42 - two times the angle brings us over there
12:44 - hopefully that kind of makes sense i'm
12:45 - sure the hand gestures
12:46 - are a weird way to visualize this but
12:48 - that's why we need angle times two
12:50 - i can actually show you what happens if
12:51 - we don't do that but angle times two is
12:53 - correct okay so now we've gone left what
12:56 - we need to do is draw the other tree
12:57 - branch so we're going to say tree
12:59 - same thing we'll say size multiplied by
13:02 - 0.8
13:04 - levels minus one and then angle
13:08 - okay and then what we want to do is we
13:10 - want to go to the right
13:12 - by our angle the reason we're doing this
13:14 - is because we're going to straighten
13:15 - ourselves back up now so we've gone
13:18 - to the uh to the right by the angle
13:20 - we've gone to the left by two times the
13:22 - angle and now we're going to the right
13:23 - by the angle so now we're right back in
13:25 - the middle that's kind of where our head
13:26 - is
13:26 - and then we're going to go backwards so
13:28 - that our turtle goes back to where it
13:31 - started from
13:31 - so you'll see why we need this in a
13:33 - second we're going to say backward and
13:35 - then
13:35 - by the size because we went forward by
13:38 - the size
13:39 - right then we turned right then we drew
13:41 - the next tree branch
13:43 - this when we have this recursive call
13:44 - here is going to draw
13:46 - the entire right subtree then what we're
13:48 - going to do is go to the left
13:50 - draw the entire left subtree then we're
13:52 - going to strain ourselves back out
13:54 - and we're going to come back now at this
13:55 - point in time this will actually work
13:57 - i'm just going to show you what this
13:58 - looks like so that we can see what we've
14:00 - done and then i'll explain exactly how
14:01 - this works
14:02 - so let's draw a tree we just write tree
14:05 - size give it whatever you want i'm gonna
14:06 - give it 70.
14:07 - levels i'd recommend you go with
14:09 - something like under eight
14:11 - if you go eight or above it's just going
14:12 - to take a really long time to draw
14:14 - and then angle 60 is a good angle but
14:16 - you can go with any angle that you'd
14:18 - like
14:18 - but i would recommend making it above 20
14:21 - otherwise you're going to see a very
14:22 - kind of squish tree
14:23 - anyways let's just run this and let's
14:25 - see what we've done here so notice that
14:27 - when i do this
14:28 - we get this kind of strange looking tree
14:30 - right
14:31 - and it's even more weird looking because
14:33 - of the fact that it is sideways so what
14:35 - i'm going to show you how to do now
14:36 - is turn it to the left so the first
14:39 - thing we're going to do before we even
14:40 - draw the tree
14:41 - is we're just going to go left 90
14:43 - degrees so left 90. so now when we
14:45 - actually draw the tree
14:46 - it doesn't look quite as strange so
14:48 - there you go we got a tree
14:50 - now the reason this looks so weird is
14:51 - because the angle we gave here was 60
14:54 - degrees and so at every single kind of
14:56 - point where we need to draw another
14:57 - branch
14:58 - we were going off by 60 degrees and so
14:59 - here you can see this is 120 degree
15:01 - angle
15:02 - because well 60 times 2 right and so if
15:04 - we want to make this look a little bit
15:05 - more normal
15:06 - we can decrease the angle and make that
15:07 - something like 30
15:09 - and now we can see that this tree is
15:10 - looking a bit more as we would expect
15:12 - right
15:13 - that is really how you go about drawing
15:14 - the tree now i'm just going to change
15:16 - the speed here
15:17 - so that it's one so it's the slowest it
15:19 - can possibly be so we can actually see
15:21 - what goes on here so notice we went up
15:22 - we want right we want right we want
15:25 - right we went right
15:26 - then we went back then we went left then
15:29 - we went back then we went left right
15:31 - then we went right left then we went
15:32 - back
15:33 - just kind of watch what goes on here as
15:36 - we draw this tree it draws the branch
15:37 - then it returns back to its original
15:39 - position
15:40 - then it draws the other side it draws
15:42 - that other branch
15:43 - and that's why we had that backwards
15:45 - there and then notice once we get here
15:46 - it goes
15:46 - all the way back to the very beginning
15:49 - the reason why we needed this right the
15:50 - reason why we need it backward
15:52 - is so that we return back to the
15:54 - original position before we try to draw
15:56 - the next branch because if we don't do
15:59 - that if i don't include this backwards
16:00 - here
16:01 - watch what happens you're going to see
16:03 - we get a very strange looking tree
16:05 - that kind of just goes off in random
16:07 - directions right because we're not
16:08 - returning back to the point
16:10 - where we were going to draw that next
16:12 - branch and so that's why we need the
16:13 - backwards there
16:14 - and same thing with you know left angle
16:16 - times 2 if i don't have
16:18 - times 2 and i run this you're going to
16:20 - see what happens
16:22 - we get something that looks like this
16:23 - again a very kind of strange looking
16:25 - thing
16:26 - if you actually run this you'll notice
16:27 - this pattern does kind of repeat and it
16:29 - makes something that looks
16:30 - you know somewhat interesting but
16:32 - obviously that's not a tree that's not
16:34 - what we wanted okay i'm going to stop
16:35 - running that
16:36 - all right so hopefully that kind of
16:37 - explained why we need the backward
16:38 - recursion is a very difficult thing to
16:40 - explain especially when you have a lot
16:42 - of different calls
16:43 - but let's just run through this to make
16:44 - sure it's super clear so we have tree
16:46 - right we're taking size levels angle
16:48 - obviously we understand the base case if
16:49 - level is equal to zero
16:51 - then we're not doing anything we will do
16:52 - something in a second to have those
16:54 - little green bubbles but
16:55 - skip that for now all right so then
16:57 - inside of this the first thing we do is
16:58 - we go forward by whatever the size of
17:00 - our branch is
17:01 - this is good because this means that
17:03 - after we go right
17:05 - and after we call this tree function
17:07 - again we immediately draw the branch
17:10 - that we had wanted to draw right we
17:12 - called tree
17:13 - and then we're already angled the right
17:14 - direction so we just go forward by
17:16 - whatever the size was that was past this
17:18 - function
17:18 - and we draw that first branch that's why
17:20 - that first one is vertical because the
17:22 - first thing we do here is we just go
17:23 - straight up and we draw that branch okay
17:26 - then we turn to the right
17:27 - this is so that we can draw the right
17:29 - subtree so all of the right subtree now
17:32 - once we hit this function here
17:34 - what happens is we go back up here right
17:36 - we go back
17:37 - into this recursive function so now
17:39 - we're calling with size
17:41 - times 0.8 so 80 percent the size one
17:43 - less level
17:44 - and the same angle now we're already
17:46 - turned to the right because in the
17:47 - previous step we had turned to the right
17:49 - so the first thing we do is we go
17:50 - forward
17:51 - right and then we turn right again so we
17:53 - angle by 30 degrees
17:55 - and then we call this recursive function
17:57 - and we draw the right subtree
17:59 - of the right subtree hopefully that
18:01 - makes sense but we draw the right
18:02 - subtree of the right subtree
18:05 - then we get back into this function
18:06 - right so now we go forward again we're
18:08 - already angled the right way
18:10 - we go forward we turn right and then we
18:12 - draw the right subtree of the right
18:13 - subtree of the right subtree and this
18:15 - repeats until obviously we get through
18:17 - all of the levels now as soon as we're
18:19 - at the point where levels is equal to
18:20 - zero
18:21 - what that means is the function that
18:23 - called this we can now go to the next
18:25 - step because we've gone through all of
18:26 - the recursive calls
18:28 - so now we go to the next step and we say
18:29 - okay well we had turned
18:31 - right by a ton so now we need to turn
18:33 - left by the angle times two to draw the
18:35 - left subtree of whatever function just
18:37 - finished
18:37 - so then we go back we return to the left
18:40 - and then we draw the left subtree
18:42 - and now the process repeats here except
18:44 - with the left subject
18:46 - so now we draw the left subtree so we
18:48 - come back up here we say level is equal
18:49 - to zero no it's not so we go forward in
18:51 - whatever the direction was that we were
18:53 - pointed
18:53 - then we turn to the right and we draw
18:55 - the right subtree
18:57 - of the left subtree and then we continue
18:59 - and continue and continue and continue
19:01 - and eventually we get to a point where
19:03 - we have drawn the left
19:04 - subtree of some left subtree
19:07 - and now levels is equal to zero so as
19:10 - soon as we get to the point where
19:11 - this function is done and we return to
19:13 - wherever this was called from
19:15 - now we turn right so we go back straight
19:17 - right
19:18 - and then we go backwards and we return
19:20 - back to the original position that we
19:22 - were at
19:23 - so again the reason we need this is
19:24 - because remember in the first step here
19:26 - we went forward
19:26 - so after we do all of this stuff we need
19:29 - to go backwards to make sure we go
19:31 - back to where we started from so then
19:33 - when we draw the next subtree
19:34 - we're not drawing it from the end of the
19:37 - right subtree
19:38 - that corresponds with the left subtree
19:39 - we're drawing it from kind of the origin
19:41 - of where this function was called from
19:43 - this is very confusing obviously to
19:45 - explain but if you do this in the very
19:46 - slow speed you can kind of see
19:48 - how this works and and why we actually
19:50 - get the tree that we do
19:52 - okay perfect so i'm going to change the
19:53 - speed back to 0 here unfortunately
19:55 - that's the best explanation i can give
19:56 - you let me know in the comments if that
19:58 - was sufficient
19:58 - but what i'm going to show you now is
20:00 - how we can actually draw those kind of
20:01 - green little bubbles right
20:03 - so what i'm going to do here is i'm
20:04 - going to change the color of my turtle
20:06 - to be green so you say color
20:07 - put it in a color there's you know some
20:09 - preset ones one of them is green so we
20:11 - do in a string green
20:13 - that changes the color of our cursor to
20:15 - green
20:16 - then what we can do is say dot what we
20:18 - can actually do here
20:20 - is we can pass whatever the size is that
20:23 - we're currently on so when we get to the
20:24 - last level
20:25 - and we will make a green dot with the
20:27 - radius of this size
20:29 - so we can do that and then we can say
20:31 - color and we can make this black
20:33 - all right so now if we run this you're
20:36 - going to notice that as soon as we get
20:37 - to the point we're at the end of our
20:39 - branch so we reach our base case we do
20:41 - that little dot right
20:42 - and i just want to show you what happens
20:43 - when i increase the number of levels so
20:45 - instead of 5
20:45 - i go to 7. so now when i go to 7 notice
20:48 - how we're going to get a more
20:49 - complex tree and obviously you guys are
20:51 - welcome to mess around with whatever
20:53 - number of levels that you want
20:54 - and change the angle and maybe you can
20:56 - implement some type of random stuff in
20:57 - here change the color of the branches
21:00 - goham do whatever you'd like i'm just
21:02 - showing you kind of the basic one you
21:03 - guys can extend an add-on from that
21:05 - but there you go a beautiful tree nice
21:07 - okay now we have that
21:09 - let's do the snowflake now the snowflake
21:11 - is i don't want to say
21:12 - more complicated but it's very different
21:15 - how we draw the snowflake so let me just
21:17 - run that previous program here so we can
21:18 - actually have a look
21:19 - at this snowflake uh and actually sorry
21:21 - i'm just going to change this so it's a
21:23 - little bit of a more simple example so
21:25 - that
21:26 - we can have a better look at how this
21:27 - works so i'm just looking at my other
21:29 - script here bear with me
21:31 - okay let's run this there you go that's
21:33 - what i want to look at okay so ignore
21:35 - the tree
21:36 - just look at the snowflake for now and
21:38 - see if you can kind of pick up the
21:39 - pattern that's going on here now it's
21:40 - fairly obvious but
21:41 - this has to do with triangles so the way
21:44 - that this snowflake is actually going to
21:46 - work
21:47 - is we are going to draw three sides of
21:50 - the triangle
21:51 - so the first side is going to go from
21:53 - where this uh this red
21:54 - cursor is to where my mouse is the
21:57 - second side
21:58 - will go from where my mouse is to kind
21:59 - of this point right here
22:01 - and then the third side will go from my
22:02 - mouse to this cursor here
22:04 - so we're going to draw three sides all
22:06 - three of these sides will be generated
22:08 - with the recursive function
22:10 - and we'll kind of connect them together
22:12 - in the sense of a triangle right drawing
22:13 - three sides of the triangle
22:15 - now the way this recursive function is
22:16 - going to work is it's going to draw one
22:18 - of these sides and in fact let me show
22:19 - you what happens
22:20 - when i draw just one side so you can
22:22 - kind of see what it looks like
22:24 - all right so this is what one side of
22:25 - our snowflake looks like
22:27 - now as i was saying we're going to
22:28 - connect three sides together in kind of
22:30 - a triangle form so we'll connect the
22:31 - sides at 60 degree angles so that it
22:33 - creates the snowflake
22:34 - but just examine and kind of look at
22:36 - this pattern here and i'll show you
22:38 - obviously
22:38 - how we make this but the way it works is
22:40 - we draw one small triangle we draw one
22:42 - large triangle and then one small
22:44 - triangle but on the large triangle
22:46 - we draw smaller triangles and this large
22:48 - triangle is comprised of smaller
22:50 - triangles
22:51 - the way it works is we have these three
22:52 - small triangles making up this one
22:54 - larger and so this is with a depth of
22:57 - two
22:58 - now watch what happens when i change the
23:00 - depth here to b1
23:01 - so when i change the depth to b1 notice
23:03 - how we just do one
23:04 - large triangle right and now if i change
23:07 - the depth
23:08 - to b3 what happens is we have a bunch of
23:11 - triangles right so we've kind of
23:12 - replicated that smaller side you saw so
23:14 - with the depth of two we put those on
23:16 - both sides and then we have one
23:17 - kind of a larger triangle with a bunch
23:19 - of triangles on top of it
23:20 - in the middle so that's kind of the way
23:23 - this works
23:24 - i'm just going to walk you through the
23:25 - process of making this and then
23:26 - obviously we can run it we can see what
23:28 - it looks like
23:29 - and i can explain how this works but
23:31 - that's kind of the pattern there so we
23:32 - draw
23:32 - one of those sides once we can figure
23:34 - out how to do one side it's pretty easy
23:36 - to connect them together and we can
23:37 - connect
23:38 - you know a bunch of different sides
23:39 - together it doesn't just have to be
23:40 - three sides
23:41 - okay so we have all of this stuff for
23:43 - tree what i'm going to do is make
23:44 - another function here
23:45 - and i'll just call this snowflake like
23:48 - that
23:49 - and actually in fact this function is
23:50 - going to be called create snowflake
23:52 - because we're going to have two
23:53 - functions one that will create the
23:55 - snowflake
23:56 - side and one that actually creates the
23:57 - snowflake as a whole so inside of this
23:59 - create snowflake function i'm not going
24:01 - to do anything for right now
24:02 - i'm going to start by just making my
24:04 - snowflake function
24:05 - really this will be a snowflake side so
24:08 - the snowflake side function what this is
24:10 - going to take
24:10 - is a length and again the number of
24:13 - levels that we want to have or kind of
24:15 - the depth i guess we could say you know
24:16 - we'll leave it as levels
24:18 - for this side so inside of here same
24:20 - thing as before in our base case we're
24:21 - going to say if
24:22 - levels is equal to zero then what we're
24:25 - going to do
24:26 - is return but before we do that we're
24:29 - going to go
24:29 - forward by the length now it's a little
24:32 - bit different than what we did inside of
24:34 - this
24:35 - tree function here where we started by
24:37 - going forward here we're going to
24:39 - end by going forward now you'll see how
24:41 - this works in a minute
24:42 - but just kind of bear with me so i'm
24:43 - going to say length
24:45 - divided by equals and then 3.0
24:48 - i'm then going to say snowflake side so
24:51 - i'm recursively calling this function
24:54 - and what i'm going to do is pass the
24:56 - length and
24:57 - the levels minus 1. then what i'm going
25:00 - to do is turn the cursor
25:02 - so i'm going to go left by 60 degrees
25:05 - i'm then going to call snowflake side
25:07 - again
25:08 - and i'll actually just paste this
25:10 - because we're going to do this four
25:11 - times i'm going to go
25:12 - right by 120 degrees i'm going to call
25:15 - snowflake's side again and then i'm
25:16 - going to go
25:17 - left by 60 degrees
25:20 - and this is actually all we need to do
25:22 - to create a snowflake side so let me
25:23 - just run this function
25:25 - and then i'll walk you through exactly
25:26 - how this works so let's
25:28 - remove this tree for now and let's
25:30 - remove this left
25:31 - and let's just say snowflake side and
25:34 - let's simply pass this a length
25:36 - i guess we'll give it a length of maybe
25:37 - 200 and then
25:39 - for the levels we'll just pass two all
25:42 - right
25:42 - so let's run this okay so let's have a
25:44 - look at this alongside
25:46 - the code just to see exactly what goes
25:48 - on here so we start in our very first
25:50 - recursive call by dividing the length by
25:51 - three
25:52 - then we see this recursive call
25:54 - snowflake side so what we do
25:56 - is we pass the length which is now
25:57 - divided by three and levels minus one so
25:59 - now we come back up here
26:01 - and at this point in time the length is
26:02 - equal to you know three times less
26:04 - whatever the original length was
26:06 - and the levels is equal to one because
26:07 - originally levels was equal to 2.
26:09 - all right we then divide the length by 3
26:11 - again we then call snowflake side
26:13 - so now the length is even smaller we've
26:15 - divided by 3 two times
26:16 - now levels is equal to zero so at this
26:19 - point we see levels equal to zero so we
26:20 - hit our base case so we go forward
26:22 - by the length that we have which at this
26:25 - point in time is going to be
26:26 - 1 9 of our total length so you can see
26:29 - that's kind of this first line right
26:30 - here
26:31 - is because this first recursive call has
26:33 - now finished all right so now we are
26:34 - done
26:35 - all of those so what happens is the last
26:37 - place to call this
26:39 - we now return back to here and now we
26:41 - turn left
26:42 - by 60 degrees so we turn left by 60
26:44 - degrees
26:45 - at this point when we're kind of at this
26:47 - next recursive call
26:48 - our length has been divided by 9 because
26:51 - three two times
26:52 - and then we call snowflake side so we
26:54 - turn left by 60 degrees
26:55 - then we come back up to levels levels is
26:58 - now
26:58 - equal to zero and so what that means is
27:00 - we're in our base case so we go forward
27:02 - and we draw this kind of line right here
27:05 - okay so now we finish
27:06 - this recursive call so we go and we see
27:08 - right 120
27:10 - so we turn right by 120 degrees and then
27:12 - we call snowflake side again
27:14 - now what happens is well levels is equal
27:16 - to zero because levels was equal to one
27:18 - now it's equal to zero so when we're
27:20 - down in our base case we go down
27:22 - okay then what we do is this recursive
27:24 - call is finished so we go left by 60
27:26 - degrees
27:27 - so that kind of allows us to turn in
27:29 - this direction we call snowflake side
27:31 - and obviously level is equal to zero so
27:33 - we go four all right so now we've kind
27:34 - of finished these four lines right here
27:36 - so this first kind of triangle that's
27:38 - drawn with the two
27:39 - lines on the side that's done all right
27:42 - so we've now finished this entire first
27:44 - call here so line 32 that's done so now
27:47 - we're back at kind of this original
27:49 - top level call to this function and now
27:52 - what we're doing is we're turning left
27:53 - by 60
27:54 - and then we're calling snowflake side
27:56 - this time we're going to be passing
27:57 - levels equal to
27:58 - 1 not 0 because remember at the top
28:01 - level call so levels is equal to two we
28:03 - subtract one from it at the function
28:04 - call
28:05 - so we turn left by 60. that gives us
28:07 - this kind of angle right here hopefully
28:08 - you guys can see my mouse
28:09 - and now we call snowflake sides so we
28:11 - call snowflake sides
28:13 - levels is equal to one we're not in the
28:14 - base case and so now we repeat this
28:16 - entire process again
28:18 - and that's what then allows us to draw
28:20 - this line this line this line this line
28:22 - notice that this right here it's really
28:25 - hard to show you this but you can see my
28:27 - mouse kind of going over this line
28:28 - that's the same as this so really all
28:31 - we're doing is combining
28:33 - this one kind of very standard pattern
28:35 - which is that triangle with the two
28:36 - lines together
28:37 - we're just combining that at a bunch of
28:38 - different angles such that it creates
28:40 - this kind of pattern
28:41 - so i think i'm going to stop explaining
28:42 - it there because it's really difficult
28:44 - to explain the recursive calls i'm sure
28:45 - i'm confusing a lot of you guys
28:47 - but now we know how to do one sign so
28:50 - now we know how to do one side
28:51 - we need to figure out how we can combine
28:53 - the sides but i'm just going to show you
28:54 - what happens if i make the step
28:55 - equal to like 4 for example so if i do
28:57 - this like notice how small this gets
28:59 - and how advanced this is going to look
29:02 - obviously as you increase
29:03 - increase the depth it exponentially is
29:05 - going to have more and more lines and
29:06 - stuff that's going on
29:07 - just want to show you that okay so now
29:09 - that we've done one side
29:10 - as i was saying we need to do all of it
29:12 - so how do we do all of it
29:14 - well we just need to draw three sides
29:16 - and connect them together but i don't
29:18 - want to keep it super simple and just do
29:19 - three sides
29:20 - i want to show you how we can do any
29:22 - number of odd numbered sides
29:24 - okay so for this function what i want to
29:27 - take and i just want to look at my
29:29 - cheat sheet here is the signs and
29:32 - the length for the snowflake that i want
29:35 - to create
29:35 - and what i'm going to do is say for
29:37 - underscore in
29:39 - range the number of sides that we pass
29:42 - what i want to do is draw a snowflake
29:45 - side
29:46 - and what am i going to pass to snowflake
29:47 - side i'm going to pass
29:49 - my length and i'm going to pass the
29:52 - number of sides that i have as
29:54 - the number of levels that i want to draw
29:56 - for my snowflake side
29:57 - then what i'm going to do is i'm going
29:59 - to turn right by
30:00 - and this is going to be 360
30:04 - divided by the number of sides so what
30:07 - this is going to do
30:08 - is i mean i could run this and show it
30:09 - to you but what this is going to do is
30:11 - draw
30:11 - the number of sides that we pass and
30:13 - it's going to kind of rotate where the
30:15 - next side is drawn
30:17 - based on how many sides that we have so
30:18 - in a circle we have how many degrees
30:20 - we have 360 degrees which means if we
30:22 - want to have these sides connected all
30:24 - the way around
30:25 - we need to angle them at whatever 360
30:29 - divided by the number of sides that we
30:31 - have is so
30:32 - i'll show you how this works with three
30:34 - sides so rather than doing snowflake
30:36 - side let's do create
30:39 - underscore snowflake we're going to pass
30:41 - for the sides 3
30:42 - we'll pass for the length 200 and yeah
30:46 - okay
30:46 - that works so let's just run this and
30:47 - look at what we get here
30:49 - so we do one side that's one side we
30:51 - just did a second side and now we're
30:52 - doing a third side right there
30:54 - and for me to actually show you better
30:56 - when or where the sides are created
30:58 - what i will do here is show you how we
31:00 - can change the color so
31:02 - i'm just going to do this quickly
31:03 - because it's more for illustration here
31:05 - but let's say
31:06 - green uh blue
31:12 - and yellow
31:15 - okay and we're just gonna say color
31:19 - is equal to colors at i plus one okay
31:22 - you don't have to understand what i just
31:23 - did here
31:24 - but this is going to just gonna do
31:26 - different colors so let's run this and
31:27 - you'll see
31:28 - where the different sides are oops index
31:31 - out of range oh crap
31:33 - that's my bad sorry it needs to be that
31:34 - okay
31:36 - so now you can see these are our three
31:38 - sides and notice that when it gets to
31:40 - this point what actually happens is the
31:42 - turtle turns 120 degrees because we had
31:44 - three sides so 360
31:46 - over 3 is 120 draws the next side turns
31:49 - 120 degrees again then draws the other
31:51 - side
31:52 - now let's see what happens if we draw
31:54 - four sides so if i draw
31:56 - four sides i'm actually nervous to see
31:57 - if this is going to work or not because
31:58 - i haven't tried four
31:59 - sides yet first of all this is going to
32:01 - take a second so once this is done i'll
32:02 - be right back all right so i decided to
32:04 - change something to make sure this
32:05 - worked but you can see that we've drawn
32:06 - this with
32:07 - four sides i just added another color
32:08 - which was orange but this works with
32:11 - four sides and if you go with five it's
32:12 - going to work as well the way that i've
32:13 - kind of programmed this out it's dynamic
32:15 - so you can just change the number of
32:16 - sides
32:17 - and well that will change this the shape
32:19 - of
32:20 - the snowflake but that is how that works
32:22 - right now here
32:23 - rather than turning 120 degrees we're
32:25 - turning at 90 degrees right you can kind
32:26 - of see there's this little interior
32:28 - square if you were to draw a square
32:29 - inside of here it'd be a perfect square
32:30 - because once we get here we turn 90 90
32:32 - 90.
32:33 - and we're good we have connected on all
32:36 - sides
32:36 - so that is how you do the snowflake
32:38 - that's pretty much all i needed to show
32:40 - you
32:41 - now i mean i could continue going
32:42 - through this and explain the recursion
32:43 - but i think
32:44 - that's pretty much all you guys need to
32:46 - know if you wanted to make multiple
32:48 - snowflakes you could call this multiple
32:50 - times
32:51 - but you would probably want to move the
32:52 - turtle to different positions
32:54 - now i'll just show you um like how you
32:56 - do this i think you can say
32:58 - move or maybe it's two pause
33:01 - uh there's a way to set the position i
33:03 - think i have it oh it's called go to
33:05 - if you want to change the position of
33:08 - the turtle
33:09 - what you can do is say go to xy and then
33:12 - we'll actually go to that position
33:14 - uh so i just wanted to show you that so
33:16 - you guys can see how you can draw
33:17 - multiple snowflakes draw a snowflake
33:20 - move the turtle
33:20 - draw another one move the turtle draw
33:22 - another one so on and so forth
33:24 - all right but that is it i will leave a
33:26 - link to this code
33:27 - in the description if i forget someone
33:29 - please do remind me uh but yeah that's
33:31 - really how you can mess around with
33:33 - fractals and recursion in python using
33:35 - the turtle module
33:36 - i'll zoom out so you guys can read all
33:38 - of the code if you would
33:40 - like to do that if you're not on a
33:41 - mobile device i guess because it's
33:43 - pretty hard to read that
33:44 - and yeah there you go now as i was
33:46 - saying this is kind of just scratching
33:48 - the surface of what's possible with this
33:51 - you can imagine if i made this slightly
33:52 - random if i didn't make everything you
33:54 - know perfect
33:55 - angle stuff would be off a little bit
33:57 - but you'd be able to make some really
33:59 - interesting stuff and if you were to add
34:00 - to this maybe rather than doing two tree
34:02 - branches you do three four or five tree
34:04 - branches you're going to see how much
34:05 - more advanced and interesting these
34:07 - shapes get
34:08 - and you can just mess around with
34:09 - different angles different sizes and
34:11 - you'll see you get some really really
34:12 - interesting pictures
34:13 - all right so with that said i think i'm
34:14 - going to end the video here hope you
34:16 - guys enjoyed if you did make sure that
34:18 - like subscribe to the channel and i will
34:19 - see you in another one