00:02 - [Music]
00:06 - hello everybody and welcome back to the
00:08 - golang tutorial so in this video we're
00:11 - going to be talking about arithmetic
00:12 - operators and how you can perform basic
00:14 - mathematical operations in golang now
00:17 - this is pretty straightforward but
00:18 - there's a few nuances here that I want
00:20 - to show you because these are things you
00:21 - will often run into or problems you will
00:23 - often run into so let's go ahead and get
00:25 - started
00:26 - now the basic operators that we have in
00:28 - golang we're actually performing
00:30 - arithmetic is plus minus we have slash
00:34 - we have multiplication that we have mod
00:36 - which is the percent sign so these are
00:38 - what the five can standard arithmetic
00:40 - operators are of course we have a set of
00:42 - brackets that we can use just like we
00:44 - would you know in regular math so we can
00:46 - put expressions inside of the brackets
00:48 - and then other operators outside of them
00:49 - but that's the basics for this now the
00:51 - important thing in going is that
00:53 - whenever we use these operators so
00:55 - plus/minus division multiplication I
00:57 - assume you all know how those work the
00:59 - types that we have so the operands on
01:01 - the left and right side of that operator
01:04 - need to be the same type so in this case
01:07 - since num1 and num2 are both ins we can
01:10 - perform these different operators on
01:11 - them so I can do num1 plus num2 and say
01:15 - num1 - num2 num1 divided by num2 let me
01:19 - know issue in doing that because these
01:20 - are the same type
01:22 - now what happens though in an issue that
01:24 - occurs is if this becomes all of a
01:25 - sudden so like a float 64 even if this
01:29 - value is still you know an integer value
01:31 - like this right so let's actually do
01:33 - this you're gonna notice that we get a
01:34 - little squiggly line here and it says
01:36 - invalid operation mismatch types float
01:38 - 64 and int so even if the value seemed
01:41 - like they would make sense to perform
01:43 - the operation on so like you know eight
01:44 - point five over four it doesn't work
01:47 - like that they need to be these same
01:48 - types so I'm gonna show you really
01:50 - quickly how if you have say a float like
01:52 - this and an int like this you can still
01:54 - perform these mathematical operations
01:55 - now ideally what you're gonna want to do
01:57 - is you're gonna want to convert any in
01:59 - so you have in two floats and then do
02:02 - those floating-point arithmetic so I can
02:04 - actually convert this num2 to a
02:06 - floating-point number simply by typing
02:09 - float64 like that and then putting
02:11 - brackets around
02:12 - num2 so now what this actually does is
02:15 - converts num2 to the value of float64 so
02:19 - pretty much remember we're working with
02:20 - numeric types so floats and in so those
02:22 - are kind of the basics we can convert
02:23 - between them by just using something
02:25 - like this so like int we put some float
02:28 - value in here and what this will
02:29 - actually do is just make this value
02:31 - become 6 it will round it down and just
02:34 - round off the decimal point well I guess
02:35 - it's not really rounding it's just
02:36 - stripping off decimal point and making
02:38 - it whatever the whole number equivalent
02:40 - is to this so that's how you can do
02:42 - basic conversions you can use something
02:43 - like in 32 you know in 8u int 8 if you
02:47 - wanted to do that between all these
02:48 - numeric types and convert between them
02:50 - so just keep that in mind you really
02:53 - need to make sure that the types that
02:54 - you're doing this arithmetic on are the
02:56 - same and yeah that is pretty much the
02:58 - answer so let me show you actually what
03:00 - happens let me change this back to int
03:02 - so let's make this int let's just go and
03:06 - get rid of this float here
03:07 - let's do num1 let me make this 9 and
03:10 - let's divide by 4 now what I want to
03:12 - show you is what actually happens when I
03:14 - do 9 divided by 4 and I print out the
03:16 - answer here so let me look at this I'm
03:18 - gonna have to actually get this terminal
03:20 - back up so let's go to terminal CMD go
03:25 - run tutorial go let's see what we get we
03:29 - get 2 so notice that 9 divided by 4
03:33 - the answer is actually not 2 it's 2
03:35 - point something right 2.25 or whatever
03:38 - that value actually is that's the answer
03:40 - but we're just getting to the reason for
03:42 - that is whatever type these two values
03:44 - are so these two operands on the left
03:46 - and right side that's what this answer
03:48 - is going to be so what the evaluation of
03:51 - this expression if they're both in so
03:52 - the answer will be an int which means
03:54 - that this will just give you the integer
03:57 - representation of whatever that actually
03:59 - was right because we're not dealing with
04:00 - any floating-point numbers now if we
04:02 - wanted a floating-point result we would
04:04 - have to change these values to float so
04:06 - if I change this to float 32 and float
04:08 - 32 and now I actually go ahead and run
04:11 - this you can see that we get opens oops
04:15 - I need to change this to % gee sorry for
04:17 - it so the outputs correct but let's have
04:19 - a look at this we get the value of 2.25
04:23 - so that is how you deal with floating
04:25 - points and integers
04:26 - the biggest issue any of you are
04:28 - probably gonna have is that conversion
04:29 - between floats and intz and dealing with
04:31 - all those things so just keep in mind
04:33 - that you know they need to be the same
04:34 - now of course in go just like all pretty
04:36 - much all other programming languages we
04:38 - do follow bed mass to some extent so bed
04:41 - mass is an acronym I'm gonna try to type
04:43 - it in here let's see so be without the
04:46 - autocomplete it's just auto auto
04:48 - completing my lines yes
04:50 - okay so bed mass this is the acronym so
04:53 - this stands for brackets exponents
04:54 - division multiplication addition
04:56 - subtraction so this is the basic order
04:58 - of operations in mathematics I'm sure a
05:01 - lot of you've heard that acronym before
05:03 - but essentially what that means is I can
05:04 - do something like this like I can put
05:05 - brackets around here you know I can add
05:07 - that five and obviously we'll make sure
05:09 - we do the division first which would
05:11 - have happened anyways and then add B
05:13 - five to that so just keep that in mind
05:14 - anything that you know from basic math
05:16 - pretty well holds here and go there's a
05:18 - few nuances but that's about it okay so
05:21 - now I'm gonna show you what's called the
05:22 - mod operator so let me change these back
05:25 - to int my caps locks can be deactivated
05:28 - and I'll show you what mod does so I'm
05:30 - actually just gonna print out the value
05:32 - of num1 mod num2 now what mod does is
05:35 - give you the remainder after division so
05:38 - if you think back to kind of elementary
05:40 - school math before you were dealing with
05:42 - fractions and all that what you would do
05:44 - when you do division is you would say
05:46 - like 9 divided by 4 is 2 remainder 1
05:49 - because 4 goes into 9 2 times and then
05:52 - you can't put another 4 in but there's
05:54 - one left over so whatever that leftover
05:56 - is so the remainder is what the modulus
05:58 - will actually give us so let me do 9 mod
06:00 - 4 that will give us the value of 1 so
06:02 - let me actually go down here and run
06:04 - this and we'll have a look and I keep I
06:08 - always forget to do this I got to change
06:09 - this back to D here just show it so it
06:12 - shows it properly ok so we get 1 right
06:14 - so that's the remainder now if I change
06:15 - this to 10 then the mod value that we're
06:18 - gonna get will be what is it to right
06:21 - now the only cases I want to show you
06:23 - that you probably wouldn't necessarily
06:25 - guess is if I do something like the 0
06:27 - mod 4 I mean what do you think this
06:29 - one's gonna be take a guess let's see
06:31 - the mod of that is 0 now this is one
06:34 - that you need to watch out for is when
06:36 - you do something like this so if you mod
06:37 - with 0 as I guess the what do you call
06:40 - that
06:40 - the divisor or something or whatever
06:42 - that is as if num2 is zero so you're
06:45 - modding by zero you're gonna run into an
06:47 - issue and I'll actually show you the
06:48 - error that you're gonna have it's called
06:50 - a division by zero issue so let's our
06:52 - error whatever that is so if we look
06:54 - here you can see that what happens is
06:57 - when we go go run tutorial let go we
06:58 - have a panic this is go Lang's kind of
07:00 - idea of an exception or an error it's
07:03 - just a panic that's what they call it so
07:04 - here we can see a runtime error integer
07:06 - divided by zero so that's not allowed
07:08 - you cannot divide by zero just like in
07:10 - your calculator that's gonna return an
07:12 - error but just notice that this actually
07:14 - happened at runtime which meant like my
07:16 - code was able to compile I was able to
07:19 - execute this fine and actually run the
07:20 - code but what happened was when it had
07:23 - that division by zero though this is
07:25 - known as a runtime error then it crashed
07:28 - so beforehand go didn't notice anything
07:30 - was wrong because the division by zero
07:32 - didn't happen yet but once it occurred
07:34 - then that happened whereas if I did
07:36 - something like you know 3.2 here and I
07:39 - saved this will get a little squiggly
07:41 - line popping up that tells us you know
07:43 - this isn't okay you can't do this right
07:45 - and if we try to run the code actually I
07:47 - don't know if this one will run or not
07:49 - but let's see here it shouldn't actually
07:51 - even let us get into yeah so here it
07:53 - says so constants 3.2 Trunk kids
07:55 - integers so this means we actually
07:57 - weren't even able to run and execute the
07:59 - code it told us before we could do that
08:01 - that hey there's a problem you can't run
08:03 - the code so that's just something to
08:03 - keep in mind we'll talk more about
08:05 - errors and panics later on okay but
08:07 - that's how num that's how mod works
08:08 - that's how division addition subtraction
08:10 - works the last thing we'll say is that
08:13 - if you want to do math like exponents
08:15 - for example or you want to do like
08:16 - arctangent or cosine there is a package
08:19 - called the math package if you import it
08:21 - up here just under fmt then what you can
08:23 - do is use math dot I think like
08:26 - square root for example abs there's a
08:28 - bunch of ones popping up here exponent
08:30 - exponent to float 64 there's all these
08:32 - different functions that you can use
08:33 - there's actually a mod function here
08:35 - there's logarithms like anything you
08:36 - would need will be inside this math
08:38 - package so if you need a specific
08:40 - mathematical function that's not in here
08:42 - you need a constant like pi or something
08:44 - you can get it from that math package
08:46 - but with that being said I think that's
08:47 - pretty much it for arithmetic I mean
08:49 - it's pretty basic like you can ask those
08:51 - brackets order of operations holds plus
08:53 - minus
08:54 - vision multiplication exponents mod all
08:57 - of that if you understand that you were
08:58 - good to go and that being said I hope
09:00 - you guys enjoyed the video if you did
09:01 - make sure you leave a like subscribe and
09:03 - I will see you in the next goal aang
09:04 - tutorial