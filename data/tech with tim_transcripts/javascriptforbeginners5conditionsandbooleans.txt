00:00 - hello everybody and welcome back so in
00:02 - this video what we're gonna be doing is
00:03 - talking about conditions and comparison
00:05 - operators now these are extremely
00:07 - important this is kind of the foundation
00:09 - of the next like five or six lessons
00:12 - that we're gonna go through so really I
00:14 - kind of encourage you guys if you
00:15 - haven't been watching the entire videos
00:17 - maybe now is the time to start and make
00:19 - sure you really understand this before
00:20 - moving forward otherwise things gonna be
00:22 - a bit more difficult so I want to
00:24 - refresh you that we started talking
00:25 - about datatypes and a few videos ago and
00:28 - we mentioned the datatype called boolean
00:29 - now we said that we could have that
00:31 - downside called boolean let me just say
00:33 - B here and that value could either be
00:35 - true or that value could be false and
00:38 - remember that we can't have that capital
00:39 - false or that capital two it's only
00:42 - those two special values but what are
00:44 - the point of those values and where do
00:46 - we actually use them well this is where
00:48 - I'm gonna show you how these are views
00:49 - or how these are actually generated so
00:52 - let me create some variables on SI x
00:53 - equals 8 and VAR y equals 9 just like we
00:57 - used in some previous videos now a lot
01:01 - of times when we're doing some
01:02 - computations or we're adding numbers
01:04 - we're doing something we need to do some
01:06 - kind of comparisons maybe we want to see
01:07 - if the value of 8 is greater than the
01:10 - value of 9 or if you know 8 minus 9
01:13 - gives us enough a remainder and if we're
01:15 - looking at like a shopping cart and we
01:17 - see if they have over $100 in the
01:19 - shopping cart that then maybe they get a
01:20 - discount on their order there's lots of
01:22 - instances where we need to do
01:23 - comparisons with numbers and I'm gonna
01:25 - show you guys how we can do that now
01:27 - typically we're doing comparisons
01:28 - between variables but sometimes it can
01:30 - be between constant values as well and
01:32 - what I mean by constant value is just if
01:34 - I type in some number rather than
01:36 - actually using two variables so let's
01:38 - start by going through some of the
01:39 - comparison operators which are what I'm
01:40 - going to show you now okay so the first
01:43 - comparison operator is the less than
01:45 - sign now a lot of people will say oh no
01:48 - that's a greater than signs don't the
01:49 - less than sign it really matters in
01:50 - which way this is pointing related to
01:52 - your variables in this instance what
01:54 - we're saying is X less than Y that's
01:57 - what this statement means but if I
01:59 - decide to put a sign like this then we
02:01 - could read it like is X greater than Y
02:04 - or is y less than X right it doesn't
02:07 - matter if none of these are really the
02:09 - greater than sign or less than sign it
02:10 - really matters what weight we put them
02:11 - so we have these two signs
02:13 - greater-than less-than and we also have
02:15 - the ability to add an equal sign to the
02:17 - end of either of these two signs now
02:19 - this is going to change this comparison
02:21 - to say rather than less than Y or
02:23 - greater than Y and this key is going to
02:25 - say is X greater than or equal to Y now
02:29 - notice that I keep saying is X greater
02:31 - than or equal to Y or is y less than or
02:33 - equal to X or whatever it is that's
02:34 - because this statement or this
02:37 - expression that I've typed here is
02:38 - actually going to return to me a boolean
02:41 - value which is true or which is false
02:44 - and that true or false is gonna tell me
02:46 - the answer to this expression that I've
02:47 - put here now I know some of you might be
02:49 - able to confused but I will I don't know
02:51 - how I just did that log out my answer
02:53 - and show you what I mean by it all right
02:56 - so let's refresh this and you can see we
02:58 - get a value of false now why do we get a
03:00 - value of false
03:01 - well because X is not greater than or
03:04 - equal to Y so when this expression is
03:07 - evaluated this comparison happens
03:09 - between eight and nine and we get the
03:11 - value false now if I decide to reverse
03:14 - these signs like this you can see we get
03:16 - can be value of true and if I decide to
03:18 - change maybe X to say 11 instead of nine
03:22 - and we refresh this now we're back down
03:24 - to false and that is precisely how these
03:27 - basic comparisons work so these less
03:29 - than greater than or equal now it's
03:31 - important you can not do something like
03:32 - equal that and greater than this is a
03:35 - different statement you can see it's
03:36 - just changed colors completely when I do
03:38 - something like that so make sure you add
03:39 - the equal sign after that comparison
03:42 - operator alright so the next operator to
03:44 - talk about is actually the equivalence
03:45 - operator which is the equal to or the
03:48 - two equal sign so is equal to is what we
03:51 - call this now notice that this is two
03:53 - equal signs and not one equal sign now
03:56 - one equal sign is what we call the
03:57 - assignment operator and that is
03:59 - assigning some value to a variable right
04:01 - that's typically what we're doing with
04:03 - the assignment operator whereas with
04:05 - these two equal signs what we're doing
04:07 - is checking for equivalence now there is
04:10 - another operator which is the three
04:12 - equal signs which stands for is equal to
04:14 - value and is equal to type now I'm not
04:18 - going to explain really how this works
04:20 - in difference with the two equal signs
04:22 - because it's kind of hard to understand
04:24 - until you get into objects and some more
04:27 - Vance data type so we'll talk about it
04:28 - as we go through later but for now just
04:30 - understand you can use the two equal
04:32 - signs or the three equal signs and 99.9%
04:35 - of the time these are gonna do the same
04:37 - thing and they're gonna achieve whatever
04:38 - you know functionality is you're trying
04:40 - to get at now equal then equal them so
04:44 - this is just gonna compare if these two
04:45 - values are the same so obviously in this
04:47 - case 11 is not equal to 9 so let's do
04:50 - this comparison and we can see we get
04:52 - the value false however if I were to
04:54 - change my value Y to be 11 and we do
04:57 - this comparison we get true and just
04:59 - notice if I add a third equal sign like
05:01 - this we get true as well now if you're
05:04 - in doubt and you're like well do I use 2
05:06 - or do I use 3 just use 3 its but we'll
05:09 - explain why later but just use 3 now let
05:11 - me do something I'm gonna change this to
05:13 - 11 I'm actually gonna try to demonstrate
05:15 - the difference because I feel like it's
05:16 - important enough to try we have this
05:18 - variable X which is 11 and we have this
05:20 - variable Y now notice that 11 and 11 are
05:24 - the same right like if we're looking at
05:26 - this as humans we see 11 we see 11 okay
05:28 - those are the same value so this should
05:30 - evaluate to true watch what happens when
05:32 - I run this we actually get the value
05:34 - false now why do we get the value false
05:36 - well this 11 is different from this 11
05:40 - because they're different types this is
05:42 - a number and this is a string and
05:44 - remember that now if we try to do
05:46 - something like X plus y well this is a
05:49 - string and this is a number so what
05:51 - happens when we add a string and a
05:52 - number well we convert the other number
05:55 - to a string so in this case this is now
05:57 - gonna turn into the string 11 and we
05:58 - mush them together we don't actually
06:00 - compare do a logical addition there we
06:03 - just add these numbers together so
06:04 - rather than getting 22 which we might
06:06 - have expected you can see here we're
06:08 - getting 1 1 1 1 so that's important to
06:10 - understand okay so let's do these two
06:12 - equal signs now all right so what
06:15 - happens when I do two equal signs and I
06:16 - compare these well we actually get the
06:18 - value of true so why did that work well
06:21 - that worked because this two equal signs
06:24 - compares the value and does not look at
06:27 - the type whereas the three equal signs
06:30 - compares the difference in the type and
06:32 - the value and only if both of these are
06:34 - the same will we get that equal alright
06:37 - awesome so now what I'm going to show
06:39 - you is kind of the
06:40 - opposite to this which is the not equal
06:42 - to now there is a not equal to and
06:44 - there's a not equal to equal to which is
06:47 - the two equal signs like that so we'll
06:48 - talk about both so let's start by doing
06:50 - not equal to so exclamation point equal
06:53 - sign what does this do
06:54 - well it literally just gives you the
06:55 - opposite result that you would get if
06:57 - you did two equal signs so here since
07:00 - these values actually are the same what
07:02 - I'm getting is the answer false the
07:04 - reason I'm getting the answer false is
07:05 - because this operator is going to tell
07:07 - me if X is not equal to Y and in this
07:10 - instance it is equal to Y so obviously
07:13 - this condition is false and all of these
07:15 - that I'm typing here are known as
07:17 - conditions so that's important to
07:18 - understand now what happens if I add a
07:20 - third equal sign like that
07:22 - let's run this we get the value true why
07:25 - do we get the value true because
07:26 - obviously 11 and 11 when we're doing 3
07:29 - equal sign comparison are not the same
07:31 - because this is a string and this is a
07:33 - number so when we do this we get false
07:35 - or sorry what am I saying we get true
07:37 - because these are not actually the same
07:40 - values and that's kind of how that works
07:41 - now let's just do another basic example
07:43 - with 9 and you know if we do X not equal
07:46 - equal to we still get true because
07:47 - obviously these aren't the same but if I
07:49 - were to change this to 11 then we still
07:51 - you know we get false because these are
07:53 - actually these same value now that is
07:55 - kind of the basics of the basic
07:58 - comparison operators now I'm going to
08:00 - show you how we can actually chain these
08:01 - together and use something called and or
08:04 - and not now and or not are very powerful
08:07 - and they allow us to kind of create some
08:09 - more complicated conditions so I'm gonna
08:11 - do more advanced example now just
08:13 - because numbers are really easy to
08:14 - understand typically so I'm gonna say
08:16 - var name equals Tim and I say move our
08:20 - other underscore name equals 10 all
08:25 - right so let's do a comparison of these
08:27 - so what I'm gonna do is simply log out
08:29 - if name is equal to equal to other
08:32 - underscore name well what do you guys
08:34 - think looking at this do we think
08:35 - they're the same do we think they're
08:37 - different
08:37 - does this two equal sign is it gonna
08:38 - make a difference if we used 2 or 3 what
08:41 - do you think well let's run this and
08:42 - have a look we get the value false why
08:45 - do we get to value false because there
08:47 - is a capital here and capitals actually
08:49 - make a big difference what we're doing
08:50 - comparisons this
08:52 - him is not the same as this Tim there
08:54 - are different strings however if I do
08:56 - change this to be like that
08:57 - now we'll get the value true okay so
09:00 - that's great we've done those
09:01 - comparisons now what I'm gonna do is
09:03 - actually add some other variables so
09:04 - we'll say yeah well you know we'll add
09:06 - some more numbers here bar x equals 10
09:08 - bar y equals 9 now what if I want to
09:11 - print if name is equal to other name and
09:15 - another condition is true what if I want
09:18 - to chain multiple things together and
09:19 - see if those two things are true well
09:21 - what I can do is actually use what's
09:23 - called B and operator or the and kind of
09:26 - comparison chain or whatever you want to
09:27 - call this now this is what this looks
09:30 - like to and signs these are above the
09:32 - what key is it on your keyboard
09:34 - B 7 key on your keyboard and what this
09:36 - is actually gonna do is compare both of
09:40 - these conditions together and see if
09:41 - they're both true now I'm going to add
09:43 - another condition here where I'm going
09:44 - to say X is I'll say Y actually is less
09:48 - than X so what this and does is it
09:51 - starts by evaluating the condition on
09:53 - the left side which in this case is name
09:55 - equal equal to other name we know that
09:58 - this is true right above here this value
10:00 - is true then what it's gonna do is see
10:03 - if this one is true as well so if Y is
10:05 - less than X now if both of these
10:08 - conditions are true and only if both of
10:11 - these conditions are true this whole
10:13 - thing that we've typed here will
10:14 - evaluate to true if one of them are
10:17 - false or both of them are false it
10:19 - doesn't matter which one or if both of
10:21 - them are false then we're gonna get a
10:22 - false value so let's refresh this here
10:25 - and we can see we get the value true
10:27 - because we know that this is true and
10:29 - this is true but what if I do Y is
10:32 - greater than X well obviously we know
10:34 - this is true but we know that this is
10:36 - false and since this is the and kind of
10:38 - chain comparison I don't know the actual
10:40 - proper name for it we're gonna get the
10:42 - value false and we can see that here so
10:45 - this and checks if condition1 and
10:48 - condition2 are true and we can go
10:51 - through and we can do as many ends chain
10:53 - them together as we'd like and we can do
10:55 - you know seven equals equals and nine
10:57 - like we can add that at the end here and
10:59 - obviously we're gonna continue to get
11:01 - false and what's gonna happen here now
11:02 - is we're gonna check if this and this
11:04 - and
11:05 - and this is are true and if all three of
11:07 - those are true will be true otherwise if
11:09 - any one of them are false or any
11:11 - combination of them are false we will
11:12 - get the value false all right
11:14 - the next one we need to talk about is or
11:16 - so let's change this to or now or is
11:19 - simply two straight lines I think you
11:21 - call this the pipe but I don't actually
11:23 - know the proper name for this character
11:26 - but it is where is it exactly it's kind
11:29 - of underneath the backspace character on
11:31 - your keyboard anyways the or is a little
11:33 - bit different than ant what orders gonna
11:35 - do is a similar thing it's going to look
11:37 - at the condition on the left it's going
11:38 - to look at the condition on the right
11:39 - and if either of them are true or both
11:42 - of them are true it's going to give us a
11:44 - true value so in this case we know that
11:45 - this is false Y is greater than X but we
11:47 - know that this is true so if we run this
11:49 - we can see hey what am I getting name
11:53 - equals equals other name or y greater
11:55 - than X that should be giving me true sir
11:58 - I don't know why that wasn't refreshing
11:59 - anyways there we go
12:00 - true now what if I change this to be a
12:03 - not equal equal to then obviously we
12:05 - know that this is gonna be false and
12:07 - this is gonna be false so what is the or
12:09 - gonna give us it's gonna give us a value
12:10 - of false because well neither one of
12:12 - these are true but if I change this now
12:14 - it's to be Y greater than X actually sir
12:18 - it should be Y less than X my bad and we
12:20 - refresh this we can see we get the value
12:23 - true so that is how the or works now we
12:25 - can combine ORS and ends together so we
12:28 - can do you know another and sign here
12:30 - and we can add I don't know something
12:32 - like eight equal equal to eight and we
12:35 - can chain all these together and what's
12:38 - gonna happen here
12:38 - well let's run this we get the value
12:40 - true and the way that we do this is we
12:43 - simply read left to right so if we're
12:45 - gonna combine all this it's kind of
12:47 - complicated sometimes to understand how
12:49 - we're actually doing this what we're
12:51 - gonna do is compare name and other we're
12:53 - gonna get some value let's say obviously
12:54 - this is false now what we're gonna do is
12:57 - say false or what's this value well this
13:01 - value is going to be true so this whole
13:04 - thing here if we're comparing with or is
13:06 - gonna be true like that then we have
13:09 - this end where we're comparing with here
13:10 - which is going to be true true and true
13:12 - returns to us a true value and that's
13:15 - how we get that now what I'm going to
13:17 - show you finally is
13:18 - just a knot and then I'll do a big chain
13:20 - of all them together and I know this
13:21 - video has been long but I want to show
13:23 - you guys all this in one video so what
13:25 - I'm gonna do is simply show you the not
13:27 - operator which is an exclamation point
13:29 - all this does is simply reverse whatever
13:33 - the current thing is that you have so if
13:35 - you have true and you put a knot on it
13:37 - it gives you false if you have false and
13:41 - you put a knot on it it gives you true
13:43 - like that and that's as easy as it is
13:45 - and this works in any condition so in
13:48 - this case if I do something like X less
13:50 - than Y well we know that X is not less
13:52 - than Y so this is false but since we
13:54 - have a knot outside of it and these
13:55 - brackets around this condition well what
13:59 - I'm gonna get is the value of true and
14:01 - this is what I want to show you as well
14:02 - we can change conditionals by using
14:05 - these brackets so let's do not X and y
14:08 - or name equals equals of their
14:11 - underscore name and let's do something
14:15 - like nine greater than zero so what I've
14:18 - done now is chained these together what
14:20 - I can actually do is put these in
14:21 - brackets if I wanted to and do something
14:24 - like a knot sign here in front of this
14:26 - and now what's gonna happen is we're
14:28 - gonna evaluate this expression get the
14:30 - knot of it we're gonna evaluate this
14:32 - expression this expression we're gonna
14:34 - and them together I think I might need
14:37 - another bracket at the end here I think
14:41 - that's right yes okay that is right then
14:42 - we're gonna knock them then we're gonna
14:44 - do the or of this side and this side and
14:46 - see what that result is I'm too lazy to
14:47 - calculate so let's just refresh and that
14:49 - value is staying true so that is how
14:52 - that works this is our comparison
14:54 - operators this is how we combine them so
14:55 - or and and remember or either one of
14:58 - them needs to be true or both of them
15:00 - can be true and if we have that we need
15:02 - both conditions to be true and if we
15:04 - have a knot that's simply gonna reverse
15:06 - whatever it is that we have with those
15:08 - combinations of operators we can create
15:09 - any kind of conditions that we would
15:11 - like and that has been it for this video
15:14 - as always if you guys enjoyed make sure
15:16 - you leave a like and subscribe and I'll
15:17 - see you guys another JavaScript tutorial