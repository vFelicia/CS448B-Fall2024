00:00 - if you've never worked as a software
00:01 - engineer then chances are you've never
00:03 - seen a big code base so today I'm going
00:05 - to show you exactly that I've got a code
00:07 - base for a mobile app that I've been
00:09 - working on for a long time I've
00:11 - developed this with another software
00:12 - engineer we've got a few hundred, lines
00:15 - of code hundreds of different files
00:17 - quite a large structure there's a lot of
00:19 - different components to it and I think
00:20 - you're going to learn quite a bit in
00:22 - this video so with that said let's start
00:24 - exploring a large code base so I've got
00:26 - the code loaded here in vs code and I'll
00:28 - walk you through the over structure and
00:31 - give you a sense of what you can expect
00:32 - as a code base gets bigger and bigger
00:34 - and bigger now with that said even
00:36 - though this is quite a bit of code it's
00:38 - nowhere near as large as some other code
00:40 - bases that are maintained and developed
00:42 - by hundreds if not thousands of
00:44 - developers one of the code bases I
00:46 - worked on at my time at Microsoft was
00:48 - probably 200 times the size of this so
00:51 - even though this is quite large just
00:53 - imagine it can get much bigger than this
00:56 - this is just sufficiently large enough
00:57 - that I can kind of walk you through what
00:59 - ends up happening in in a large codebase
01:01 - so we'll dive into that but I do want to
01:03 - mention that I have a free school
01:04 - Community this is a place where you can
01:06 - network with other developers I've
01:08 - teamed up with a few YouTubers so we've
01:10 - got myself Kenny gunderman Nick white
01:12 - Kevin if you know who those guys are in
01:14 - the community we're already at over
01:16 - 7,000 members it's completely free you
01:18 - do not need to pay for it and you can
01:20 - join it from the link in the description
01:22 - anyways let's start walking through this
01:24 - project so a bit of context here this is
01:26 - for a react native mobile application
01:28 - for the startup that I'm currently
01:30 - working for it's closed source so I
01:32 - won't leak too much to you but I can
01:34 - walk you through the kind of General
01:35 - structure so we have a few different uh
01:38 - folders here in the root directory we
01:40 - have a GitHub or dot GitHub file or
01:43 - folder sorry where we have some
01:44 - workflows this is for running automated
01:46 - tests automated deployments Etc we have
01:48 - a CMS directory this is for the content
01:51 - management system we have functions this
01:53 - represents the backend we're using
01:55 - serverless functions hosted with
01:57 - Firebase for this project we have some
01:59 - Libs this is for some shared types and
02:01 - shared configuration and also functions
02:04 - that we use across both the front end
02:06 - and the back end and then we've got the
02:07 - main folder here which is for the actual
02:10 - application so the react native app that
02:11 - would run on your phone so notice right
02:14 - away we have kind of four sub projects
02:16 - within the main project we could have
02:18 - put these into separate repos but it
02:19 - made sense to kind of stick them
02:21 - together now if we go into something
02:22 - like velocity V2 the first thing you'll
02:25 - notice immediately is there is a ton of
02:27 - configuration files this is what starts
02:29 - happen quite quickly once you have a lot
02:31 - of folders a lot of files a lot of code
02:34 - a bunch of configuration is necessary to
02:36 - make sure that this works across all
02:38 - different types of devices and that you
02:40 - are configuring it properly for the
02:41 - different environments that you're
02:42 - running it in so for example if I go
02:45 - into EnV here you can see that we have
02:47 - some variables for the dev environment
02:49 - the production environment the staging
02:51 - environment and we need to manage those
02:52 - appropriately within the code and make
02:54 - sure when we load up the code and we're
02:56 - doing it a development versus staging
02:58 - versus production we have have the
03:00 - correct scripts that load everything in
03:02 - and give us the correct environment the
03:04 - absolute last thing we want is to be
03:05 - running the dev environment and
03:07 - accidentally modifying the staging or
03:09 - the production database that would be
03:11 - horrible right now along with all the
03:13 - configuration files here things like TS
03:15 - config reactnative config package Json
03:17 - gulp files fire. Json we have some
03:20 - custom scripts that will run before we
03:23 - actually start executing any code so
03:25 - things like generating the Google
03:26 - service file parsing some game data
03:28 - parsing some xcode configuration there's
03:31 - some things that we just need to do
03:32 - before we can start actually running the
03:34 - app and I wrote These in Python rather
03:36 - than writing them in typescript so
03:38 - that's the idea here you're going to
03:40 - have a lot of configuration a lot of
03:42 - different files a lot of environments
03:44 - and handling those becomes quite complex
03:46 - then of course we have our source now
03:48 - the source is where we actually have the
03:49 - code written for the actual application
03:52 - and inside of here we've got all kinds
03:54 - of different directories to really
03:55 - separate out all of the different uh
03:57 - what do you call it components use cases
03:59 - systems whatever you guys want to call
04:01 - them so we have things like utilities
04:03 - and within utilities we just have one
04:05 - file here we have styles we have some
04:07 - base Styles and a way to normalize some
04:09 - Styles we use RVE this is a way to do
04:11 - some Advanced animations we have a Redux
04:14 - folder within the Redux we have actions
04:16 - we have unit tests for all of our
04:17 - different actions same with the reducers
04:19 - we have all the different reducers and
04:21 - all the unit tests going up here we have
04:24 - some files just for navigation so how do
04:27 - we have the correct Navigators for
04:28 - registration login authentication Etc we
04:32 - have some different modules we have
04:34 - hooks so these are just react hooks that
04:36 - we put in their own separate folder we
04:38 - have some things related to the Google
04:39 - services so we need this when we're
04:41 - using Google signin and some other
04:43 - features we have a folder for different
04:45 - games in our application we have the
04:47 - source assets V directory we have a
04:50 - bunch of different components so inside
04:51 - of here we have all of the different
04:52 - react native components so we have
04:54 - components that are screens organized
04:56 - into different subdirectories so we have
04:58 - a loading screen we have main these are
05:01 - main screens like module details more
05:03 - profile public profile Etc we have
05:06 - registration screens again split into
05:08 - login profile username Etc we have
05:10 - welcome screen inside of its own folder
05:13 - so everything is meant to be super clear
05:15 - and easy to navigate So within just a
05:17 - few clicks I can immediately find the
05:18 - type of code that I'm looking for and I
05:20 - don't need to start searching through
05:21 - tons of different files now as well as
05:24 - that we've got a bunch of assets so same
05:25 - thing here for the assets we want to
05:27 - keep these nice and organized so we have
05:28 - fonts we have icons we have different
05:31 - logos we have uh some main assets like
05:33 - background some module details now that
05:36 - I'm looking at this some of the stuff
05:37 - could be named better we just got a lot
05:39 - of stuff going on we then have a file
05:41 - for an API call I don't actually know
05:43 - why that's there that should probably be
05:44 - removed but the idea is everything is
05:46 - nice and organized it's separated into
05:48 - different folders and directories and
05:50 - that way we can very easily find the
05:52 - code that we're looking for now as well
05:53 - as that we even started doing some
05:54 - localization so for example if we click
05:57 - into here you can see that we have all
05:58 - kinds of Vari Ables for the localized
06:01 - text and the strings that are going to
06:02 - be inside of our application right now
06:04 - we just have it in English but we knew
06:06 - that eventually we were going to want to
06:07 - add multiple languages so we should
06:09 - start doing that right away so we don't
06:10 - have to refactor a ton of stuff later on
06:13 - now what else do we have here that I can
06:15 - mention to you I think that's about it
06:16 - inside of this directory but you get the
06:19 - idea that there's quite a bit more than
06:20 - just writing in a specific framework
06:22 - right we've got a lot of scripts got a
06:24 - lot of configuration we have a bunch of
06:26 - tests and we have scripts that will
06:28 - automatically execute all those tests
06:30 - for us as well for example in our
06:32 - workflows here with GitHub we're
06:33 - automatically running all of the tests
06:35 - for our react native application but
06:37 - we're not going to allow you to merge a
06:38 - pull request unless the test pass so now
06:41 - I guess another thing I can show you is
06:42 - the libs directory so inside of Libs for
06:45 - example we have a bunch of different
06:46 - types and some shared variables that we
06:49 - want to use in both the back end and the
06:51 - front end so rather than copying them
06:53 - and having them in both the back end and
06:54 - the front end we made a shared Library
06:56 - this is a bit of a pain in the ass to
06:58 - actually Implement and Import in both of
07:00 - the projects but we knew it would be
07:02 - worth it because we need to have the
07:03 - same types shared across the front end
07:06 - and the back end uh pretty common with a
07:08 - typescript project so for example we
07:10 - have a bunch of different constants here
07:11 - which are separated into things like
07:13 - enums we have some other constants here
07:16 - I don't want to share too much uh we
07:18 - have an index file just to make this
07:19 - import a bit easier because we have
07:21 - path-based Imports and then we have a
07:22 - ton of different types which again are
07:24 - going to be shared across the projects
07:26 - I'm trying not to leak too much but I do
07:28 - want to show you a bit of the code then
07:30 - if we go inside of functions right we
07:31 - have service accounts now we need
07:32 - service accounts so that we're able to
07:34 - actually deploy this locally we can have
07:36 - different permissions based on who's
07:38 - actually executing this code that's for
07:40 - uh kind of Google services Firebase all
07:42 - that kind of stuff and then we have a
07:44 - ton of different functions that are
07:45 - called from our front end so we have
07:48 - functions related to the feed we have
07:50 - Libs this is actually a um I forget the
07:52 - name it's some kind of link not going to
07:54 - get into that right now we have things
07:55 - for modules we have things for
07:57 - notifications for the profile for the
07:59 - registration for social followers
08:02 - following making posts right and notice
08:04 - for every single one of these functions
08:07 - we have we have unit tests now in my
08:09 - case I really like to make sure that we
08:11 - have unit tests specifically for
08:12 - everything that's on the back end
08:14 - because as long as the data base is
08:15 - consistent and we know that we are
08:18 - correctly retrieving results and that
08:19 - all the backend functions are working
08:21 - properly the front end is a lot easier
08:23 - to test and we're not going to have bad
08:25 - data being sent to the front end so my
08:27 - idea in terms of getting speedier
08:29 - development here is we're going to make
08:30 - sure we test everything really
08:31 - thoroughly on the back end and then for
08:33 - the front end we can kind of test that
08:34 - later on or not be as strict because we
08:37 - know that all of the data is working
08:39 - correctly everything's being called
08:40 - correctly we have the correct error
08:42 - messages Etc right now that's pretty
08:44 - much all that I wanted to show you
08:45 - obviously I could walk through this
08:46 - codebase I could explain a million
08:48 - things and complex patterns and how to
08:50 - reuse code but I just wanted to give you
08:52 - a sense of what it's like once you start
08:54 - getting into a bit of a bigger code base
08:56 - you have a lot of different directories
08:58 - you have a lot of structuring you're
08:59 - making sure the naming is correct you
09:01 - want to obviously make sure you're not
09:02 - reusing code so setting up something
09:04 - like a shared library for different
09:06 - types or utility functions you really
09:08 - need to be careful with the
09:09 - configuration right so how do we manage
09:11 - different environments how do we store
09:13 - sensitive data uh how do we make sure
09:15 - that we're not manually doing a ton of
09:17 - things and that everything is as
09:18 - automated as possible so we're running a
09:20 - bunch of scripts that maybe do a manual
09:22 - operation that we typically would need
09:24 - to write ourself or typically need to
09:25 - perform ourself how do we make sure that
09:27 - someone who's not technical can run the
09:29 - app and has decent instructions for how
09:31 - to do that that's why you would include
09:33 - something like a readme file I think you
09:35 - guys get the idea here and hopefully
09:36 - this video gave you a bit of value and
09:38 - at least just kind of Expos you to
09:39 - what's possible once you start getting
09:41 - into some bigger code bases again this
09:43 - is by no means big in consideration of
09:46 - all the code bases that exist but I know
09:48 - a lot of you have never worked as a
09:49 - software engineer or you've never even
09:51 - seen a code base anywhere near this size
09:53 - you've worked in one or two files
09:54 - probably at most so I wanted to kind of
09:56 - give you a taste of what it's like
09:58 - anyways if you guys enjoyed make sure to
09:59 - leave a like subscribe to the channel
10:01 - and I will see you in the next
10:03 - [Music]
10:10 - one