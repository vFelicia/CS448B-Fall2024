00:02 - [Music]
00:05 - hello everybody and welcome back so in
00:08 - today's video what I'm gonna be doing is
00:10 - teaching github fundamentals so
00:12 - essentially everything you need to know
00:14 - to be effectively using github and all
00:16 - of the common commands that you'll use
00:18 - 99% of the time I will note that getting
00:21 - github are extremely complicated tools
00:23 - when you get to the advanced level
00:25 - there's a lot of things that you can do
00:27 - and there is like thousands of commands
00:29 - and variations of commands that you can
00:31 - use within git and github of course I'm
00:34 - not gonna be showing you all those these
00:35 - are kind of things if you need to use
00:37 - them you're gonna look up and use them
00:38 - once in a blue moon the stuff I'm gonna
00:41 - be showing you here is what I can almost
00:42 - guarantee you you'll use literally 99%
00:45 - of the time so with that being said what
00:47 - I'm gonna do in this video is really
00:48 - focused on actually trying to teach you
00:50 - how get and github work I don't want you
00:53 - to just memorize the commands I want you
00:55 - to actually understand what those
00:56 - commands are doing so that if something
00:58 - goes wrong or you need to figure out
01:00 - what command to use you actually have
01:02 - some idea of what's happening on a lower
01:04 - level so with that being said I'm gonna
01:06 - hop over to the kind of blackboard here
01:08 - where I'm just gonna do some drawings
01:09 - and illustrations talk about first the
01:12 - difference between git and github then
01:13 - we'll talk about the workflow of github
01:15 - we'll talk about branches and then we'll
01:18 - actually get into all of the different
01:19 - commands and that will probably be near
01:21 - the second half of this video so I'm
01:23 - here on the blackboard and the first
01:24 - thing that I want to discuss is the
01:26 - difference between git and github so a
01:29 - lot of people seem to think the getting
01:31 - github are one in the same that they're
01:33 - the exact same thing that is not true
01:35 - these are actually different things they
01:37 - obviously integrate very well with each
01:39 - other and they're very similar and what
01:41 - they actually do but they are two
01:43 - separate things and I think it's
01:44 - important to understand the difference
01:45 - and github is really just a website I
01:48 - like to think of it as kind of like a
01:50 - nice add-on or extension to get and what
01:53 - github does is it gives us a nice UI and
01:55 - gives us some features that git doesn't
01:56 - have and it lets us host remote
01:58 - repositories and work collaboratively
02:00 - with a lot of other people now what git
02:03 - does is this is actually what handles
02:05 - all the version control stuff so when
02:07 - you're doing something like merging code
02:08 - together or when you're doing something
02:10 - like making a commit or making a change
02:12 - or pulling or push
02:13 - you're using get get is the version
02:15 - control version control software this is
02:18 - what we're really gonna be learning how
02:19 - git works github is kind of just like a
02:22 - layer on top of git that gives us a
02:24 - bunch of commands it gives us a bunch of
02:26 - UI features it has a fancy website and
02:29 - it has a bunch of other things that get
02:30 - just doesn't have so these are two
02:32 - separate things please do not confuse
02:34 - the fact that they are the same and I
02:36 - want to make it clear that we can use
02:37 - git without even having to touch github
02:40 - because github is not required it's not
02:42 - a dependency of get it is just something
02:44 - that we use on top of git and there's
02:46 - lots of other tools that go on top of
02:48 - git as well so with that being said
02:50 - let's actually get now into kind of the
02:52 - workflow when we use a github repository
02:54 - and let's actually discuss what I mean
02:57 - when I say the word repository so let's
03:00 - go here so to kind of explain what I
03:02 - mean by repository and so through the
03:05 - differences of what we call a local and
03:07 - a remote repository which i think is the
03:08 - first important thing to understand I
03:10 - want to consider an example where we
03:12 - have a team of four developers let's say
03:14 - we have four people and they're working
03:16 - on some kind of game
03:17 - well what these people probably want to
03:20 - do is they're all gonna have their own
03:22 - machines they're all gonna be coding and
03:23 - they want to kind of sync up with each
03:25 - other right when one person finishes a
03:27 - feature or they make some changes they
03:28 - want to send it to the other person when
03:30 - the other person has some changes they
03:31 - want to send it to them and they want
03:33 - some kind of system that keeps track of
03:34 - those changes and that means that you
03:37 - know everything goes fine so essentially
03:39 - we're not sending zip folders to each
03:40 - other we actually have some kind of
03:43 - automated system like yet that is
03:45 - controlling this version control stuff
03:47 - for us so let's say we have our four
03:49 - developers what I'm gonna do is I'm
03:51 - gonna draw four boxes down here in the
03:54 - corner of my screen and these will be my
03:56 - developers now here we're gonna draw a
03:59 - big circle and this is what I'm gonna
04:00 - call my remote repository so a
04:03 - repository is really just a store it is
04:06 - a place where we have a bunch of code
04:08 - and it can be a remote or it can be
04:09 - local a local repository is something
04:12 - that sits on your machine so it sits on
04:14 - your end in front of you other people
04:16 - don't see it it's your version of the
04:18 - code that is a local repository so each
04:21 - of these four developers have their own
04:22 - local repository on their machine so
04:25 - let's say we started out in development
04:26 - and
04:27 - just started there's a little bit of
04:28 - code that already exists the first thing
04:30 - that all these developers would do is
04:31 - they'd look at the remote repository
04:33 - which is going to be kind of our source
04:35 - of truth this is going to be the place
04:37 - that really has all of the up-to-date
04:40 - code this is where all of the changes go
04:42 - to this is where it starts from this is
04:45 - where we have the most recent version
04:46 - the version that's working that's what
04:48 - we think of when we think of a remote
04:50 - repository this is the place that all
04:52 - four of these developers kind of trust
04:54 - that has the most up-to-date version and
04:55 - they'll be making changes to this place
04:58 - and they'll be asking for new changes
05:00 - and that is what the remote repository
05:01 - does so essentially these four
05:03 - developers have four local repositories
05:06 - on their computer they are some kind of
05:07 - version based off of this remote
05:09 - repository
05:10 - they'll make changes on their local
05:12 - version and then they will push those
05:14 - changes to the remote repository and
05:16 - when someone else makes some changes
05:17 - they will pull those changes down so
05:20 - this is the basic workflow right we have
05:21 - this remote repository when we start out
05:23 - all of these developers kind of take a
05:25 - copy of this repository so they'll say
05:28 - okay let's copy it onto our local
05:30 - machine so let's say at the very
05:32 - beginning at time zero all of these
05:34 - developers have the same copy of this
05:37 - remote repository now let's say you know
05:39 - developer one starts working on a new
05:41 - feature
05:41 - well his code base immediately locally
05:43 - is gonna look different than developer
05:45 - two and it's gonna look different than
05:46 - the remote repository right that's just
05:49 - how it works so let's say developer 1
05:51 - makes some changes on his local machine
05:52 - he test them out they look good and what
05:55 - he does is he says okay let me push
05:57 - these changes to the remote repository I
05:59 - want my other teammates to see them I
06:01 - want to check it in I want to make sure
06:03 - everything's good so he pushes those
06:04 - changes to the remote repository now the
06:08 - next day he says to developer - hey I
06:10 - made some changes pull those down from
06:12 - the remote repository what he does is he
06:15 - asks the remote repository hey give me
06:17 - any new changes and then it compares the
06:19 - remote repository with his local
06:21 - repository and changes anything that
06:23 - changed so it gives him all of these new
06:26 - changes maybe a new file was added maybe
06:28 - some files change lines whatever that's
06:30 - what get does for us it pretty much
06:32 - handles the interaction between changes
06:35 - and making changes right like that's all
06:38 - its really doing it's when changes
06:39 - happen
06:40 - handles that for us and the nice thing
06:42 - with git is that since it is a very
06:44 - complex tool it can do things like
06:47 - automatically merge code together like
06:49 - let's say you and I have worked on the
06:50 - same file but we changed different parts
06:52 - of those files
06:53 - well git can actually figure out what's
06:55 - happened in those two files and then
06:57 - automatically merge those changes
06:59 - together such that there's no conflict
07:01 - now sometimes there is but that's beside
07:03 - the point this is kind of the basic
07:05 - workflow of git and that's what I wanted
07:07 - to cover here all right so the next
07:09 - thing I want to talk about is get
07:11 - history and branches now this is really
07:14 - important and if you can understand this
07:16 - part here you're pretty much gonna be
07:17 - good to understand like 99% of github or
07:21 - the stuff that you're actually gonna
07:22 - have to use all github really does for
07:25 - us is track a history of what we call
07:27 - commits now a commit is simply a change
07:30 - that you've made now that's not
07:33 - necessarily like you change one line of
07:35 - code I wouldn't call that a commits what
07:37 - a commit is is essentially you make a
07:39 - bunch of changes on your local machine
07:40 - and then you commit those changes so you
07:43 - say hey I want to save all these changes
07:45 - I want to bundle them up into their own
07:47 - little package and I want to store the
07:49 - fact that I changed all of this stuff at
07:51 - this point in time that's what a commit
07:53 - is essentially like a checkpoint a way
07:55 - to return back to a previous point if
07:57 - something goes wrong so not every single
08:00 - time we save the file are you making a
08:02 - commit you have to actually manually
08:04 - make a commit so let's say I add on like
08:06 - a new feature or I have a bug fix I
08:08 - would commit that so that that way say I
08:11 - messed something up in the future in the
08:13 - codebase I can always come back to that
08:14 - commit and say hey at this point in time
08:17 - this was working this was functioning
08:20 - that's the point of a commit and it
08:22 - stores a bunch of data with it who made
08:24 - the commit what time the commit happened
08:26 - at who changed what files you know when
08:29 - they were changed within each file it
08:30 - stores a ton of different information
08:32 - and that information is really valuable
08:33 - when we start talking about branches and
08:36 - kind of a timeline in github so we have
08:39 - all of these commits and commits are
08:40 - just changes what you do is on your
08:42 - local machine so in your local
08:44 - repository here you know you make a
08:46 - bunch of changes you do whatever you're
08:47 - doing and then you commit those changes
08:49 - locally so inside your local version of
08:52 - the repository you commit those
08:53 - Changez once you've made all of your
08:55 - commits so you can make multiple commits
08:57 - it doesn't make as many as you want you
08:58 - know just checkpoints you're just saving
09:00 - whenever you want to essentially you
09:02 - will take those commits and you will
09:04 - push them up to the remote repository so
09:06 - this is your local repository and this
09:08 - would be the remote repository now the
09:11 - remote repository will have a look at
09:13 - all of these commits and it will attempt
09:15 - to bring all of those commits and push
09:17 - them into the branch of the remote
09:20 - repository so I haven't talked about
09:22 - branches yet so I'm trying not to say
09:23 - that word but essentially just imagine
09:25 - it takes these commits and it somehow
09:27 - kind of merges them with the existing
09:29 - code base and adds them into that that's
09:31 - what happened it happens when you push
09:32 - commits up now let's say that you're on
09:35 - a local repository and you know it's
09:37 - been a few days since you've updated
09:38 - your repository the remote repository
09:41 - has changed people have made some
09:42 - changes well what do you need to do you
09:44 - need to get those changes so what you do
09:46 - is you do what's known as a pull so you
09:48 - pull all of the changes down from the
09:50 - remote repository so let's just say the
09:52 - remotes up here pretend this one's gone
09:54 - you pull all these down and then what it
09:57 - does is it gives you all of the new
09:59 - commits that have happened since you
10:01 - last pulled down these changes now you
10:04 - have all these commits coming from the
10:05 - remote repository and you merge them
10:07 - into your local repository so you take
10:10 - them and you combine them with the work
10:11 - you currently have and that is kind of
10:13 - how this system works with a bunch of
10:15 - commits now what github does for us is
10:18 - it tracks all of these commits so let me
10:20 - attempt to erase all this let's get rid
10:23 - of that as well so in github we have
10:25 - these things called branches and the
10:27 - first branch I want to discuss is what's
10:28 - known as the master branch now we have
10:31 - all these commits these are all our
10:32 - checkpoints all our kind of saves and we
10:35 - push commits up and we pull commits down
10:37 - now the remote repository and even your
10:39 - local repository as well keeps track of
10:41 - all of these commits and everything that
10:43 - happens to the repository so if at any
10:45 - point in time something goes wrong I can
10:47 - always roll back to a previous commit or
10:49 - I can just look at all of the history
10:51 - and what's happened in this code base
10:53 - which is very valuable so all of these
10:55 - dots that I'm gonna put here are commits
10:57 - and imagine this being a time line we're
11:00 - back here is in the past previous
11:02 - commits and right here so at the very
11:04 - end of the time line is what the current
11:06 - code base looks like
11:07 - and it's the most recent commit so what
11:09 - stores all of these commits kind of on
11:11 - this timeline maybe they all happen from
11:13 - different people maybe they're all the
11:14 - same person whatever there's all these
11:16 - commits these are all the changes that
11:17 - happen now this is on what we call the
11:20 - master branch so the main branch of our
11:23 - repository is really just what we think
11:27 - of when we think of the code base we
11:28 - have a branch and a branch is just one
11:31 - version of this codebase essentially and
11:34 - it's hard to describe until I show you
11:35 - what another branch looks like but just
11:37 - imagine that the core code base that
11:39 - you're looking at is pretty much always
11:41 - going to be the master branch
11:43 - now this master branch is what we want
11:45 - to make sure is always working think of
11:47 - if we're working on a large project I
11:49 - don't want to modify this master branch
11:51 - with some code that's broken or not
11:54 - working right because if another
11:55 - developer pulls it down now all of a
11:57 - sudden their local repositories messed
11:59 - up because you've made a change to the
12:00 - master branch they pull down the master
12:02 - branch and now they're all you know
12:04 - they're all messed up on their end
12:06 - because you made a bad change the master
12:08 - branch so instead of always making
12:10 - changes to the master branch so instead
12:12 - of always putting these bubbles so these
12:13 - commits right on to here sometimes what
12:16 - we use is what's known as another branch
12:18 - and what a branch essentially is is a
12:21 - copy of a repository at a certain point
12:23 - in time that has different changes so
12:26 - let's do this
12:27 - so another branch could look something
12:29 - like this so maybe this branch
12:31 - I'm gonna call feature are like a new
12:33 - feature so when you ever you have a new
12:35 - branch you give it a name you can call
12:37 - it whatever you want and the point of
12:38 - this branch is to essentially be able to
12:41 - work on a new feature push it up to the
12:43 - remote repository without actually
12:44 - directly putting it into the master
12:47 - branch so if I make a new branch maybe I
12:50 - branched off starting at this point
12:52 - right here so I branched off at this
12:54 - point in time at this commit now this
12:56 - branch has whatever the repository had
12:58 - up until this point right so everything
13:00 - behind it it has all of those changes
13:03 - and you've branched off and now these
13:05 - dots here are your changes on this
13:08 - branch so you are just making different
13:10 - changes on this branch so that you are
13:12 - not affecting the master branch until
13:15 - you're sure that this branch is fully
13:17 - functioning because imagine say you and
13:19 - for
13:19 - other developers are working on a new
13:21 - feature you're not done yet you haven't
13:23 - finished up you need to work on it
13:24 - together
13:25 - well you might make a new branch off the
13:27 - master branch so that you don't affect
13:29 - the master branch of code the stuff that
13:31 - everyone else sees and then as soon as
13:33 - this branch you're satisfied that it's
13:36 - actually working that everything is good
13:38 - what you do is you merge it with the
13:40 - master branch so you take all of these
13:43 - commits here and you say okay I want to
13:45 - merge those into the master branch and
13:48 - then get does its magic which I won't
13:50 - really discuss and it takes all of these
13:52 - commit messages and aligns them onto
13:55 - this master branch in the order that
13:56 - they should go and makes all of the
13:58 - appropriate changes that is essentially
14:00 - what happens when you have what's known
14:01 - as a branch and again you branch off
14:04 - because what you want to do is make sure
14:06 - that you're not modifying the master
14:08 - branch until you're sure what you're
14:10 - doing is working and functioning and of
14:12 - course on this branch here on this
14:14 - feature branch you can still update this
14:17 - branch from the master branch what you
14:19 - can do is you can say hey give me all
14:21 - the most recent updates from the master
14:22 - branch throw them on here so that this
14:24 - one is staying up to date with the
14:25 - master branch but it has some new
14:27 - changes that aren't yet in the master
14:29 - branch that is what another branch is
14:31 - kind of meant to do and you can even
14:34 - branch off from branches so when you get
14:36 - into really complicated projects maybe
14:38 - you have like another feature you're
14:40 - working on on top of a feature well you
14:43 - could branch off from another branch
14:44 - merge it on to this branch so merge like
14:47 - that and then merge all of this on to
14:49 - the master branch I know okay so this
14:52 - was a long explanation of branches of
14:55 - git of github but I think we've gone
14:56 - through a lot of theory most of the
14:58 - theory we kind of need to understand and
15:00 - now it's gonna be really easy to get
15:02 - into the commands and start actually
15:03 - doing some examples so with that being
15:05 - said let's head over now to come to the
15:07 - terminal and actually github and let's
15:09 - set up a repository let's go through
15:11 - some examples and let's learn what these
15:13 - different commands do all right so I'm
15:15 - on github here and I actually just
15:16 - wanted to show you an example of a large
15:18 - repository and what it kind of looks
15:20 - like in terms of branches and commits
15:22 - before we get into the commands so this
15:24 - is actually the repository I work on at
15:26 - work so I work at Microsoft this is an
15:28 - open source repository this is the
15:30 - extension for vs code so python
15:33 - four vs code and I just wanted to show
15:35 - you that if you're looking on github
15:37 - this is github the website not yet you
15:39 - can see that right here this repository
15:41 - has 4,500 commits and 22 branches so if
15:45 - I click on commits I gotta accept this
15:48 - let's let's see if this go through here
15:50 - okay so I'm in commits now and you can
15:52 - see that this is what I'm talking about
15:53 - I say branch master and here you can see
15:56 - all of the commits that's that have
15:58 - happened that have been pushed into this
16:00 - branch so it shows you on what day all
16:02 - of these commits happened and then you
16:04 - can click on a commit let me just click
16:06 - on one here and let's just have a look
16:08 - at what this is you can see the things
16:10 - that have changed in all of the
16:12 - different files and what actually
16:13 - happened in this commit so that's why
16:16 - it's really valuable to have these
16:17 - different branches and to have these
16:19 - commits because you can look back at the
16:21 - history of anything that's happened in
16:22 - their repository now if you go to
16:24 - branches you can see there's a bunch of
16:27 - branches here that people have been
16:28 - working on and these are branches that
16:30 - are off of the master branch right so
16:33 - let me click on my branches and you can
16:34 - see that I haven't pushed any branches
16:36 - of the repository but if I go to maybe
16:38 - active branches let's see how many
16:40 - active branches we have we have all
16:42 - these branches that are currently active
16:44 - that people are working on so that is
16:46 - what I mean by branches and commits and
16:48 - now I want to get us started with our
16:50 - first github repository so the first
16:52 - thing that we need to do is actually
16:54 - download and install the tool called git
16:56 - now this is gonna be the same on Mac and
16:59 - Windows all of the commands that I show
17:00 - you but you need to go and download
17:02 - install git I'm gonna assume most of you
17:04 - have this so I won't go through the
17:05 - steps but I will leave a link in the
17:07 - description that has the link to
17:09 - download and install git once you have
17:11 - that what we're gonna do is we're gonna
17:13 - start by making a local repository on
17:15 - our machine and experiment with how all
17:17 - of those things work and then we'll talk
17:19 - about remote repositories so let me
17:21 - actually change directories to my
17:23 - desktop if I could make it there so I'm
17:27 - on my command line CD stands for change
17:29 - directory this is a common tool you're
17:31 - gonna see me use some command line tools
17:33 - here I'll explain what they do but these
17:35 - should be the same on Mac and Windows
17:37 - and Linux as well so don't worry about
17:39 - that but get into your terminal so open
17:41 - a terminal open a command prompt and
17:42 - then go to your desktop or go to some
17:44 - location where you're okay to make a new
17:46 - folder and
17:47 - m'kay dirt and the name of your folder
17:49 - which in this case I'm gonna call test
17:51 - underscore repo so this is gonna be my
17:53 - test repository this is what I want to
17:55 - just kind of experiment with so I'm
17:57 - gonna make a new folder on my desktop
17:58 - that's what mkdir stands for make
18:01 - directory called test repo next I'm
18:03 - gonna see B into my test repo like that
18:06 - and now what I'm going to do is
18:08 - initialize a new git repository so
18:11 - there's many different ways to kind of
18:12 - start up and you get repository the most
18:15 - common way if you're working on a brand
18:16 - new project and you're starting it on
18:18 - your local machine is that type gets an
18:20 - it so let's say that you're about to
18:23 - start working on something you know you
18:24 - haven't worked on it yet and you're just
18:26 - booting up the repository it doesn't
18:28 - already exist what you do is you type
18:30 - get an it and that will make whatever
18:32 - folder you're inside of a github
18:34 - repository so keep in mind you can do
18:37 - this anywhere but as soon as you
18:39 - initialize a folder as a github
18:40 - repository anything inside of that now
18:43 - is going to be tracked by git and what
18:45 - that means is that you can add files you
18:47 - can use all your git commands within
18:49 - this folder but only if you've
18:52 - initialized a git repository so here let
18:54 - me just type git commit and you'll see
18:56 - that um this works everything's fine but
18:59 - if I actually CD back so I CD back to my
19:02 - desktop and I type the same thing so
19:04 - let's go get commit that it says fatal
19:06 - not a git repository so just make sure
19:08 - that you're actually in a git repository
19:10 - before you start doing all of these git
19:13 - commands okay so I've made a git
19:16 - repository and what I'm gonna do now is
19:17 - I'm gonna open this up in subline text
19:19 - so I'm going to file open folder test
19:22 - repos right there awesome and now I'm
19:24 - just gonna make a new fold make a new
19:26 - file server so file new file let's just
19:30 - name this readme MD and let's save that
19:33 - inside of test repo and let's just make
19:36 - a this is a markdown file let me just do
19:38 - pound hi so that's just like a header
19:40 - I've just made in a markdown file great
19:43 - so I have that now and I've made a
19:44 - change to this repository so let's
19:46 - imagine you know I added my code I'm in
19:48 - the repository I've made a new change
19:50 - the first thing I need to do if I want
19:52 - to commit or kind of like store this
19:54 - change so I want to make that checkpoint
19:56 - is they need to add all of the files
19:58 - that I want to actually
20:00 - commit so this is where we talk about
20:02 - something called a staging area so
20:04 - inside of gets what we have is a staging
20:07 - area this is where we're temporarily
20:09 - adding or removing files that we want to
20:12 - be in our next commit so let's say I
20:14 - added that final write and I believe I
20:16 - called that test or something what I
20:18 - would do if I want to add this to my
20:20 - next commit I'm not committing yet but I
20:22 - want to add it in and it's a temporary
20:24 - area called the staging area as I type
20:26 - get add and then the name of the file
20:28 - which in this case is readme MD so let's
20:32 - do that we see that nothing goes wrong
20:34 - everything happens fine and now if we
20:35 - want to check what we actually just did
20:37 - we type git status now you can see that
20:40 - it says we're on the master branch which
20:42 - is by default just our core branch we
20:44 - don't need to make that or anything
20:45 - it says no commits yet and it says
20:47 - changes to be committed it says we made
20:49 - a new file called readme MD so that is
20:52 - because I added this readme file to the
20:55 - staging area that I typed get status to
20:57 - look at what was happening in the
20:59 - staging area okay so I had a small error
21:01 - there but anyways do we now have this
21:03 - file inside of the staging area so we've
21:05 - added this in and now what this means is
21:08 - that it is ready to be committed so I
21:10 - can go ahead and add more files into
21:12 - here in the staging area and when I'm
21:14 - ready when I've made the changes that
21:15 - I've want I can go ahead and commit now
21:18 - usually you commit once you've made some
21:20 - kind of progress once you have something
21:21 - that's kind of working or maybe you're
21:23 - like in the middle of something and you
21:24 - want to store it at that point that's
21:26 - when you make a commit
21:27 - you're not really doing it like every
21:29 - 5-10 minutes you might do it like every
21:30 - few files you change or every like you
21:33 - know kind of milestone you hit when
21:35 - you're programming if you want to put it
21:37 - that way but anyways once we have that
21:39 - staged what you can do is type git
21:41 - commit - M which stands for message and
21:45 - then inside of quotation marks you put
21:48 - what's known as the commit message now
21:50 - the commit message to be something
21:51 - that's under fifty characters long and
21:53 - accurately describes what you changed in
21:56 - this commit so in this case what I did
21:58 - was I added readme dot MD that's what I
22:02 - did in this commit I made it a new I
22:03 - made a new breed me file so I'm gonna
22:04 - type git commit - M added readme MD now
22:08 - look what happens it says master root
22:11 - commit this is actually the commit ID it
22:13 - says
22:14 - Rini thought md1 file changed one
22:17 - insertions and create mode something
22:19 - readme MD so now we have just committed
22:23 - that file and we've made a change now if
22:26 - I actually type git status to look at
22:28 - our staging area we see on branch master
22:30 - nothing to commit working tree is clean
22:33 - and that is as easy as it is to make a
22:36 - change to a git repository you add your
22:39 - files you make a commit and there you go
22:41 - you've now stored that and you've saved
22:43 - that commit now what we can do is look
22:47 - at some other ways to add files and to
22:49 - make commits so let me go here now and
22:51 - once actually make a change to this file
22:53 - so let me just add another one that says
22:56 - hello let me save that file it's
22:57 - important that I save it and let's go
22:59 - back here and now let's type git status
23:02 - and now when I type git status we can
23:05 - see changes not staged for commit so
23:07 - this is telling me what I've made the
23:09 - changes that I made that have not yet
23:10 - been staged that I haven't added and it
23:13 - says okay we modified readme MD and then
23:16 - it says okay use git add file to update
23:18 - what will be committed use git checkout
23:20 - to discard changes in the working
23:22 - directory so we don't want to do that
23:24 - what we actually want to do is we want
23:26 - you add this file we want to stage it
23:28 - and we want to make another commit so
23:30 - what I can do is I can type git add in
23:32 - the name of that file or what I can do
23:35 - is actually type git add period and what
23:37 - this stands for is add all files so add
23:41 - everything that I've in the repository
23:43 - that's what this stands for just add it
23:45 - to the commit so when you do dot that
23:47 - literally means just add everything so
23:49 - I'm gonna do get add dot that's gonna
23:52 - automatically add this file now i can
23:54 - type git status and i can see that it
23:56 - says boom this is green we've put this
23:58 - it's changes ready to be committed and
24:00 - now we can go ahead and do another
24:02 - commit so get commit - a.m. and we'll
24:06 - say sorry not an as she's gonna be m
24:08 - made changes you know this is not very
24:11 - descriptive usually you want to be more
24:13 - descriptive but that's okay we're just
24:14 - gonna say made changes and now boom we
24:17 - have our new commit made changes one
24:18 - file change three insertions one
24:21 - deletion awesome next thing I'm going to
24:23 - show you is branches so let's say that
24:26 - at this point in time
24:27 - what I want to do is actually want to
24:29 - make a new branch and I want to start
24:30 - working on something and not modifying
24:32 - my master branch keep in mind all of
24:34 - this is happening locally so I have my
24:36 - master branch of code we're just going
24:38 - to imagine that this is for one user
24:40 - just ourself because this is a local
24:42 - repository and I really don't want to
24:44 - mess up the master branch I don't want
24:45 - to make any changes on there I want to
24:47 - make them on another branch and then
24:48 - maybe later on I'll merge that with the
24:50 - master branch well what I can do is make
24:54 - a new branch so I can say git checkout -
24:57 - B I believe is actually the command and
25:00 - then the name of the new branch that I
25:02 - actually want to check out - so git
25:04 - checkout is how you changed between
25:06 - branches when you do - B I believe that
25:09 - stands for make a new branch and now you
25:11 - can put the name of your branch so what
25:13 - I'm gonna do here is just call this
25:15 - branch new so get checkout - beet knew
25:17 - what this did now is to switch to a new
25:20 - branch new so now what I've done is I've
25:23 - gone from my master branch and I've
25:24 - branched off so I've copied everything
25:27 - in my master branch onto this branch new
25:29 - and now any changes I make on my new
25:31 - branch are not gonna happen on the
25:33 - master branch
25:33 - so let's actually split these screens
25:36 - and let's look at this so let's go here
25:39 - and say new branch insider readme MD and
25:42 - let's now on our new branch new make a
25:46 - new commit so let's say get aa dot let's
25:50 - add those changes let's say git commit -
25:53 - M and let's make this first commit on
25:55 - new branch boom let's make that commit
25:59 - and now let's change back to the master
26:02 - branch and see if the master branch
26:04 - changed because remember I just made
26:05 - these changes on the new branch so to
26:08 - change branches what you do is you type
26:10 - git checkout and then the name of the
26:14 - branch so if I want to go to the master
26:16 - branch I type master since I'm already
26:18 - on the new branch I can't change to it
26:21 - right but let's do this
26:22 - get checkout master and now look at this
26:26 - did you see the file it automatically
26:27 - removed that change because I had made
26:30 - it on the other branch so now we have
26:32 - two branches one branch which is a head
26:35 - of the master branch because it has new
26:36 - changes and the master branch which has
26:38 - our original changes right so let's
26:40 - actually add a new file
26:41 - here let's just do this test dot py and
26:45 - let's just say like imports hi game or
26:48 - something like that okay now let's make
26:50 - a commit so let's go get Ad dot so let's
26:53 - add all these files let's type git
26:55 - status we have our new file test stop hi
26:58 - let's do git commit - M added test dot
27:03 - PI boom inserted that awesome now let's
27:07 - change over to our new branch so let's
27:09 - say git checkouts new now I'm on this
27:13 - new branch and give us a second you
27:15 - notice that inside of this folder so
27:17 - let's get rid of that we have the change
27:20 - that we made previously on that branch
27:21 - and we don't have the new file that was
27:23 - on the master branch so let's say that
27:25 - what I actually want to do is I want to
27:27 - update this branch with what's on the
27:29 - master branch so a change happened on
27:31 - the master branch which is a new file
27:32 - was created and I actually want to get
27:34 - that change and bring that to my new
27:36 - branch how do I actually go ahead and do
27:38 - that well when we're working in this
27:40 - kind of system what I can do is actually
27:42 - merge the master branch with my branch
27:45 - so I can actually type git merge and
27:48 - then type master and what this will do
27:50 - is take all of the changes from the
27:51 - master branch and merge them with my
27:53 - branch so let's do this
27:55 - git merge master merge made by the
27:57 - recursive strategy and now look we're on
28:00 - our new branch here and we have this
28:02 - test file we have our readme file that
28:04 - still has this change here and now we're
28:07 - looking pretty similar to the master
28:08 - branch except we have this line of code
28:10 - now let's change branches again let's
28:13 - say git checkout master and watch you're
28:17 - gonna see that this new branch on line
28:19 - five here will disappear and there you
28:21 - go it's gone so we have these two files
28:23 - now but that line is gone this is kind
28:26 - of the power of git and that is how the
28:28 - two branches work you check out make a
28:31 - new one with the - be in the git
28:33 - checkout command and then you can make
28:35 - commits you can change and you can merge
28:37 - these things together now that hopefully
28:39 - you have a basic understanding of some
28:41 - git commands let's look at setting up a
28:44 - remote repository and get all of this
28:46 - working now in the cloud rather than
28:48 - just on our local machine so what I'm
28:50 - gonna do is go over to github and I'm
28:52 - gonna make a new repository so you need
28:54 - to make an account
28:55 - signing on github I'm going to assume
28:57 - you guys can figure that out now I'm
28:58 - gonna go to the plus sign and I'm gonna
29:00 - click new repository so let's do this
29:02 - and what I'm just trying to set up here
29:04 - is a remote repository something that
29:06 - other people can look at that's not
29:08 - local on my machine I'm gonna call this
29:10 - one a test repository I'm gonna call
29:13 - this test underscore because test is
29:15 - already taken I'm gonna make this a
29:17 - public repository I'm not gonna give any
29:19 - description and I'm not going to
29:21 - initialize this with a readme file you
29:24 - can if you want but for this step I
29:25 - would recommend you don't because I'm
29:27 - gonna show you how we can link our local
29:29 - repository with this remote repository
29:31 - and push what we currently have up so
29:34 - let's go ahead and click create new
29:35 - repository let's give it a chance here
29:38 - and here it goes it says quick setup if
29:40 - you've done this kind of thing before we
29:42 - haven't so what we're actually gonna do
29:44 - is follow the commands that are right
29:46 - here essentially what this is saying is
29:48 - we made a new repository but we haven't
29:50 - initialized it yet so we haven't
29:52 - actually set anything up what we need to
29:54 - do is we need to actually push some
29:56 - changes to this repository first to have
29:59 - it actually be set up remotely so what
30:01 - it's saying to do here is essentially
30:03 - what we've already done it says make a
30:04 - new repository on our machine add a new
30:07 - file make a commit and then we need to
30:10 - follow these two steps so what I'm gonna
30:12 - do is copy this line of code
30:14 - you guys are need to gonna need to copy
30:16 - this as well so git remote add origin
30:18 - and then this line right here so make
30:21 - sure you copy this and at least make
30:24 - sure you have this URL to your remote
30:25 - repository because you're gonna need
30:27 - that so let's go to our command line now
30:29 - let's actually put this on the side and
30:31 - let's type in that line by just
30:34 - right-clicking so if you copy something
30:35 - and you're in terminal you can right
30:37 - click on your mouse and it should paste
30:39 - it in and then go ahead and hit enter
30:41 - what this has just done is added what's
30:44 - known as a remote now a remote is
30:46 - essentially a URL to another repository
30:49 - so what we've done is we've said hey I
30:51 - want to add this remote repository as
30:53 - kind of a link as something that we know
30:56 - of here in our local repository so that
30:59 - we can actually push changes to it and
31:01 - pull changes from so that's what we've
31:03 - done when we say git remote add origin
31:07 - I said I'm adding a new
31:08 - remote that's called origin that has
31:11 - this URL so now when we use the word
31:14 - origin we'll be referencing this URL
31:17 - that's all we're doing we're literally
31:18 - mapping the word origin to this URL when
31:21 - we type git remote app you can add as
31:23 - many remotes as you want some people
31:26 - will commonly call this also like
31:27 - upstream so you can have an Origin which
31:30 - is typically your remote repository
31:33 - because you can work on more than one
31:35 - remote repository and then maybe like
31:37 - the company's remote repository will be
31:40 - your upstream repository or something
31:41 - like that anyways so we have that let me
31:44 - just clear the screen here and now I'm
31:46 - going to show you how we push changes to
31:48 - this repository so it shows us here that
31:50 - the command is get push - you origin
31:53 - master so the first thing I want to do
31:55 - is make sure that I'm on the right
31:56 - branch so I want to check out usually
31:59 - you wouldn't have more branches before
32:00 - you do this but I want to check out to
32:02 - the master branch so get check out
32:03 - master see we're already on the master
32:05 - branch but it's important we're there
32:07 - and then what we're gonna type is git
32:09 - push - you forage in master what this is
32:14 - saying is let's push all of our commits
32:16 - to the origin remote repository and
32:19 - let's push them to the branch master so
32:22 - we're picking where and what branch we
32:25 - want to push these two because we can
32:27 - push to another branch as well which
32:28 - I'll show you in a second
32:29 - - you says save these settings what that
32:33 - means is that next time we do this all
32:35 - we have to type is git push and it will
32:38 - automatically remember that it was
32:39 - origin and master that we pushed you so
32:41 - let's hit enter and let's see what
32:43 - happens here enumerated objects counting
32:46 - objects and boom there we go branch
32:48 - master set up on track remote branch
32:51 - master from origin so now if I go ahead
32:54 - and refresh this here let's have a look
32:56 - and says readme dot MD test up high and
32:59 - you can see that we look at a readme and
33:01 - we have these changes now on github so
33:03 - if you had any problems pushing there I
33:05 - probably know why I think I approach
33:07 - this at the beginning of the video but I
33:09 - kind of forgot so I'm gonna bring it in
33:10 - here what we need to do before we can
33:12 - actually work with the remote repository
33:14 - and the reason it worked for me is
33:15 - because I've already done this is set up
33:17 - a username and an email so don't worry
33:19 - if that push didn't work just follow
33:21 - along with what I'm about to show
33:22 - you this may not work either this gets a
33:25 - little bit tricky because you do need to
33:26 - authenticate yourself locally on your
33:28 - machine before you can just push and
33:30 - pull from any remote repository right so
33:33 - what I'm gonna do here is I'm gonna
33:35 - start by saying git config - - global
33:39 - user dot name and let me make this
33:42 - fullscreen actually so you guys can't
33:44 - see it and what I'm gonna do is put in
33:45 - quotation marks the name that I want to
33:47 - be represented by in this remote
33:49 - repository so on your local repository
33:51 - it doesn't matter but on the remote
33:53 - repository other people will see this
33:55 - potentially so you want to have some
33:56 - name that identifies you so I'm gonna
33:58 - put Tim as my user dot name so there we
34:01 - go now I've set up my global name so now
34:04 - this is stored on github locally and
34:06 - anytime I make a change to a remote
34:08 - repository I push or I pull or whatever
34:10 - I'm gonna be identified by the name of
34:13 - Tim now the next thing I want to do is
34:15 - use email so I want to say git config -
34:18 - - global user dot email and in here I'm
34:20 - gonna put the email that I use on github
34:23 - now this should hopefully authenticate
34:25 - you you might not you might have to
34:27 - actually use I might have to it might
34:29 - ask you to sign into github there's a
34:30 - bunch of different things that could
34:31 - happen here I don't remember how you
34:33 - authenticate locally to be able to push
34:35 - to be honest so you might have to look
34:37 - up how to do that there is something
34:39 - called a personal access token which you
34:41 - can use as well if you're on Windows at
34:42 - least but anyways let's put in our email
34:45 - so I am just gonna put a random email
34:47 - because I'm already authenticated so
34:48 - this is fine and I'm gonna put Tim at
34:50 - gmail.com actually I'm not gonna save
34:52 - that cuz I have another email that I
34:54 - don't want to share with you but anyways
34:56 - just put your email and hit enter and
34:58 - once you've done that you will have
34:59 - configured your name and your email on
35:02 - git so now you can try to push again and
35:05 - see if that works it may ask you for
35:07 - your password for github it might ask
35:09 - you to login if that doesn't happen
35:11 - unfortunately you're probably gonna have
35:13 - to go to the internet and figure out how
35:14 - to authenticate but let's say that now
35:16 - you guys are authenticated and you were
35:18 - able to push to this remote repository
35:20 - if you were able to do that what we need
35:22 - to do is move on to the next step which
35:24 - is understanding how to pull from the
35:26 - remote repository so I'm in my
35:27 - repository now I've pushed my changes up
35:30 - and I'm
35:30 - actually gonna make a change on this
35:32 - remote repository so let's go here and
35:34 - let me actually go to the edit button
35:35 - and I'm just gonna make a change that's
35:37 - hopefully gonna simulate what someone
35:39 - else might change on a remote repository
35:40 - so let's just move it so that the readme
35:43 - only has hello now and you can see that
35:45 - I can commit my changes right from
35:47 - github I'll just say updated readme
35:49 - commit changes all right so I've
35:51 - committed that now let's go back to test
35:53 - and we see that we've made a change and
35:55 - that just happened now let's go back to
35:58 - our command line and now let's figure
36:00 - out how we can actually get this change
36:01 - from the remote repository well the way
36:04 - to do that is to use what's known as a
36:06 - pull so I'm gonna say git pull origin
36:09 - master what I'm stating is what I want
36:13 - to pull so what I want to do where I
36:15 - want to pull from and what branch I want
36:17 - to take in this case I want to pull the
36:19 - from the origin which is the remote that
36:21 - we set up and I want to pull the master
36:23 - branch so let's go and hit enter and it
36:26 - says mm and boom go ahead and we have
36:29 - those changes so that happened
36:32 - everything worked and now if I go back
36:33 - to my sub line text you can see that
36:35 - Hello is the most recent change because
36:38 - that's what we modify now let's do this
36:40 - let's make a change here I'm gonna add
36:43 - hi and I'm gonna actually go ahead to
36:45 - this repository here and I'm gonna make
36:47 - a change on here as well I'm gonna put
36:49 - hello and I'm going to delete actually
36:55 - let's see here I'm gonna add hi I'm
36:59 - gonna add hi again on line four I'm
37:02 - trying to find a way that I can make
37:03 - this conflict so let's do this okay so
37:05 - I'm gonna commit this change here on
37:07 - this repository and now what I'm gonna
37:09 - do is we're gonna add my change here so
37:11 - I'm going to say get add cuz I made a
37:13 - change
37:13 - I say get commit - M change and now what
37:18 - I want to do is want to pull from this
37:20 - remote repository actually what I want
37:22 - to do is push to this remote repository
37:24 - so I've made some changes here I want to
37:26 - push them up to this repository but
37:28 - notice and oops let's go back here that
37:30 - I made a change to this remote
37:32 - repository that I don't currently have
37:34 - on my local machine so I change this
37:37 - just to be high and I don't have that on
37:39 - this local machine so watch what happens
37:41 - when I try to push this
37:43 - to the remote repository so get push and
37:46 - you see that says failed to push some
37:48 - refs too and then that origin updates
37:51 - were rejected because the remote
37:52 - contains work that you do not have so
37:55 - what what I need to do and what this is
37:57 - saying to me is hey there's changes on
37:59 - the remote repository that you don't
38:00 - have yet you need to pull those down
38:02 - before I'm gonna let you push your
38:04 - changes up that's what it's saying so if
38:06 - you get a message like this what you
38:08 - need to do is just get pull first so I'm
38:10 - gonna say git pull origin master and now
38:13 - look what it said and said ok boom we're
38:16 - gonna go ahead and we are going to pull
38:19 - all of these changes down now look what
38:21 - it says here
38:21 - automatic merge failed fix conflicts and
38:24 - then commit the result so what this is
38:26 - telling me is that hey we pulled some
38:28 - changes down but when we pulled those
38:30 - changes we had a conflict in readme dot
38:33 - MD the reason we had a conflict is
38:36 - because we changed two of the same lines
38:38 - and git doesn't know what to keep so on
38:41 - this remote repository I change the same
38:44 - line that I changed on this repository
38:46 - and this local machine right so now if
38:49 - we actually go ahead and look in here we
38:50 - can see that this is showing me there's
38:52 - a merge conflict so when you go ahead
38:54 - and you actually do a like you try to
38:58 - pull it down and there's a merge so we
39:00 - can't automatically sorry there's a
39:02 - conflict it can't automatically merge
39:04 - the code what you need to do is manually
39:06 - tell git what this code should look like
39:08 - so here what this is showing you is that
39:11 - hey there was a merge and there's merge
39:13 - conflict you need to fix this so what
39:15 - you have to do is delete all these
39:17 - arrows delete all this stuff and just
39:19 - make this file look how you want it to
39:21 - actually look so I'm gonna change it to
39:23 - look like this I'm gonna save it and I'm
39:25 - gonna resolve this merge conflict it
39:27 - can't automatically merge it so I need
39:29 - to manually come in and make the fixes
39:31 - which I've done and now what I will do
39:33 - is I will go ahead and I will actually
39:36 - commit this change so git commit - M
39:39 - change okay so I realize that what I've
39:41 - forgotten to do is just add the new
39:43 - change that I wanted to make so pretty
39:44 - much what happens is when you have a
39:46 - merge conflict what you need to do is
39:48 - fix the file so resolve the conflict you
39:51 - need to add those changes and then you
39:53 - need to commit those changes and then
39:55 - you should be good so we're gonna say
39:56 - gits
39:57 - ah dots we're gonna say get commit - em
40:01 - change boom we made the change that's
40:04 - known as our merge commit so we
40:06 - committed the merge conflict that we
40:08 - fixed and now I can go ahead and say get
40:11 - push so if I do this now you can see
40:13 - that I'm totally fine to push up to the
40:15 - remote repository because I pulled I got
40:17 - the most recent changes I fix the merge
40:19 - conflict and then I pushed back up to
40:22 - the remote repository and I made the
40:24 - change that I wanted to make that is
40:27 - kind of what happens and actually
40:29 - happens quite often is you get a merge
40:30 - conflict and hopefully you have some
40:32 - kind of software tool in this case I
40:33 - have sub line text that was able to help
40:35 - me a little bit in fixing that but all
40:37 - you have to do is go into the file that
40:39 - had the conflict sometimes will be
40:41 - multiple files fix the conflict add that
40:44 - file back in commit the change and then
40:46 - you can push again and pull again and
40:48 - everything should be working and
40:49 - functioning now the last thing I'll show
40:52 - you is pushing another branch and then
40:54 - after that I think we've pretty much
40:55 - covered everything we need to do so I'm
40:57 - gonna say git checkout and we're gonna
40:59 - go to the new branch and now what I'm
41:01 - gonna do is just push this branch up to
41:02 - the remote repository so I'm literally
41:04 - just gonna say git push and now I'm
41:06 - going to say origin for where I want to
41:08 - push it to and new so I need to specify
41:11 - that I want to push this here as the
41:13 - branch new to the new remote repository
41:16 - so I'm gonna go ahead and do that and
41:17 - now we will push this branch up to the
41:20 - remote repository so if we come here you
41:23 - can see that it says hey you've pushed a
41:25 - new branch called new and it says do you
41:27 - want to compare and make a pull request
41:28 - why it's saying this is because it knows
41:31 - that what we commonly use branches for
41:33 - is actually merging them with the master
41:36 - branch once they're ready and once
41:37 - they're good so let me refresh this here
41:39 - you notice it says two branches if I
41:42 - click we can see the new branch updated
41:44 - 17 minutes ago and let's click on it and
41:46 - go new pull request now it says you
41:48 - can't automatically merge because
41:51 - there's conflicting changes well let me
41:54 - go here and make this a girafft pull
41:56 - request so I'm just gonna submit it here
41:58 - just do this just to show you something
42:00 - and I'm gonna go to files change and you
42:02 - can see what it's showing me here this
42:04 - is what I added and this is what I
42:06 - removed from the previous file so that
42:09 - is how this works
42:10 - and this is kind of the basis of merging
42:13 - things into master is you make what's
42:15 - known as a pull request by having a new
42:17 - branch and then you compare that to the
42:19 - master branch and you merge them kind of
42:21 - squash them together so with that I
42:24 - think I've covered pretty much
42:26 - everything I can for github fundamentals
42:29 - I do apologize if this video is slightly
42:31 - confusing I'm trying my best here to
42:33 - explain everything sometimes it's hard
42:35 - to think back to the point where I've
42:36 - never used github before cuz I've been
42:37 - using it for a very long time but
42:40 - hopefully that at least gave you a good
42:42 - enough introduction that you kind of
42:44 - understand what's happening in github
42:45 - now maybe some of the commands you need
42:47 - to go look up again but now you have
42:49 - like a good foundation you kind of
42:51 - understand what a commit is what pushing
42:52 - is what pulling is what a merge conflict
42:54 - is how to make new branches all of the
42:56 - stuff that I cover so anyways if you
42:58 - guys enjoyed this video please do leave
43:00 - a like subscribe to the channel and of
43:02 - course I will see you in another YouTube
43:04 - video