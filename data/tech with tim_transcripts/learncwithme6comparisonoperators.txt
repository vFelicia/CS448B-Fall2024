00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial for beginners
00:04 - now in this video i'm going to be
00:06 - covering comparison operators
00:08 - i'm going to be showing you how we can
00:09 - compare different values not just
00:12 - numeric values
00:13 - strings characters and boolean values as
00:15 - well so with that said
00:16 - let's dive into the video
00:21 - [Music]
00:26 - so in the previous video i showed you a
00:28 - ton of different arithmetic
00:30 - operators the arithmetic operators had
00:32 - numeric operands and they returned a
00:34 - numeric value
00:36 - when i say numeric i'm talking about the
00:37 - int and float data type or
00:39 - data types so in this video i'm going to
00:42 - show you something called comparison
00:43 - operators
00:44 - now i'm actually going to start by just
00:45 - listing out all of the comparison
00:47 - operators
00:47 - we have less than greater than less than
00:50 - or equal to
00:51 - greater than or equal to is not equal to
00:54 - and
00:54 - is equal to the order i'm listing these
00:57 - means nothing
00:58 - there's no um like importance in this
01:00 - order so don't read into that
01:01 - but what comparison operators do is they
01:04 - compare
01:04 - the values of different variables right
01:07 - or just they compare values in general
01:09 - so whenever we write an expression and i
01:11 - will discuss what an expression is when
01:13 - i show it but it's just anything that
01:14 - involves these operators essentially
01:16 - they're going to return to us a true or
01:19 - false value
01:20 - more specifically they're going to
01:21 - return a boolean value
01:23 - so remember we saw this data type called
01:25 - boo now bool is always equal to either
01:28 - true or false it's one of these two
01:30 - values no matter what
01:32 - so when we use these operators right
01:34 - here the expression that contains them
01:36 - returns to us true or false or it
01:38 - evaluates to true
01:40 - or false the reason for that is it's
01:41 - telling us whether or not our comparison
01:43 - was true
01:44 - or whether it was false so to give you a
01:46 - really simple example
01:47 - let me make a variable called test it's
01:50 - going to be the bool data type which is
01:51 - short form for boolean and what i'm
01:54 - going to say
01:54 - is 1 is less than 2. now using some
01:58 - critical thinking skills here what do
01:59 - you think this is going to give us right
02:01 - is 1 less than 2
02:02 - well 1 is clearly less than 2 and so
02:05 - this should evaluate to true because
02:07 - this comparison
02:08 - was indeed correct it was true now if we
02:11 - flip around this sign
02:12 - and we ask if 1 is greater than 2 then
02:14 - obviously this is going to evaluate to
02:16 - false
02:17 - because 1 is not greater than 2. so that
02:19 - is what you use comparison operators for
02:21 - i will go through all of them but
02:22 - they're fairly intuitive and
02:23 - straightforward
02:24 - and they don't only need to be used on
02:26 - what you call numeric values we can use
02:28 - them on characters we can use them on
02:30 - strings
02:31 - we can use them on booleans we can use
02:32 - them on other data types as well
02:35 - now you want to be a little bit careful
02:36 - when you're using these operators on
02:38 - strings or characters
02:40 - because they don't necessarily work the
02:41 - way in which you think they will
02:43 - in fact whenever you're using these type
02:45 - of operators uh so like greater than
02:47 - less than less than or equal to greater
02:48 - than or equal to with
02:50 - strings or with characters they evaluate
02:52 - or compare the strings
02:54 - using something called the lexi
02:55 - graphical or lexigraphical ordering
02:58 - i'll put the word up on the screen
02:59 - because i'm probably mispronouncing it
03:01 - this is a specific way of comparing
03:03 - strings or comparing characters together
03:05 - i will show it to you in a second but i
03:06 - just want to be really clear that
03:08 - when you use this with characters or you
03:10 - use this with strings the result
03:12 - may not necessarily be intuitive you may
03:14 - not actually be able to guess what it's
03:15 - going to be
03:16 - unless you understand how the comparison
03:17 - is performed anyways enough of that
03:19 - let's just
03:20 - continue with this kind of more simple
03:21 - example i'm just going to see out test
03:23 - right here
03:24 - i just want to show you what i get so if
03:26 - i go ahead and compile my program here
03:29 - oops i didn't mean to run the program i
03:31 - want to compile
03:33 - and now run notice that we get 0.
03:36 - now the reason we're getting 0 here is
03:38 - because whenever we see out a boolean
03:40 - value it's going to give us the numeric
03:42 - representation of that boolean
03:44 - so if you remember back to one of the
03:46 - first videos true
03:48 - is always equal to one and false
03:51 - is always equal to zero so
03:55 - i don't oh it's because i don't have the
03:56 - semicolon yeah that's why it wasn't
03:57 - highlighting
03:58 - anyways you got the idea so true is
03:59 - equal to one false is equal to zero
04:01 - so if you see us printing out zero that
04:03 - means that this test variable was
04:05 - actually equal to false
04:06 - if you see us printing out one that
04:08 - means this test variable was equal to
04:09 - true
04:10 - and just to prove this to you uh even
04:11 - more if i try to just see the actual
04:13 - value of true right here
04:15 - you're going to see that even this is
04:16 - going to give us a 1. so let's do this
04:18 - and you see that we get a 1.
04:20 - so now let me just go through a few more
04:21 - of the comparison operators i'll then
04:23 - show you the comparisons on strings and
04:25 - characters
04:26 - and then we'll get into like a kind of a
04:28 - cool example where we get some user
04:29 - input and then we'll print out some
04:31 - comparisons between different user
04:33 - inputs
04:33 - anyways we have this uh this boolean
04:35 - test variable we obviously have just
04:37 - looked at the less than and greater than
04:39 - comparison now something to note here is
04:41 - if i say 1 is greater than 1
04:43 - this is false right because 1 is not
04:45 - greater than 1. if i wanted this to be
04:46 - true so i wanted greater than
04:48 - or equal to then what i would do is i
04:50 - would tack on the equal sign at the end
04:52 - here
04:53 - and now what this says is 1 greater than
04:55 - or
04:56 - equal to one so if these two values are
04:58 - the same this returns true
05:00 - or if the value on the left-hand side is
05:02 - greater than the value on the right-hand
05:03 - side
05:04 - this returns true now same holds in
05:06 - reverse here if i switch this to less
05:08 - than
05:08 - now i'm checking if one is less than or
05:11 - equal to one
05:12 - however if i just put a less than this
05:15 - is false because one is not
05:17 - strictly less than one so a lot of times
05:19 - people will read this and they'll say
05:20 - strictly less than to really emphasize
05:22 - the point that you are making sure they
05:24 - are not the same values it actually
05:26 - must be less than this other value so i
05:29 - think
05:29 - i mean i'm not going to compile the
05:30 - program and go through these i think you
05:31 - guys get the idea
05:33 - but that is the basics of these four
05:35 - operators right here
05:36 - so now let's look at the is not equal to
05:39 - and is
05:40 - equal to now make sure you do not
05:42 - confuse these operators with the
05:44 - single equal sign so this single equal
05:46 - sign right here and we've seen this if i
05:48 - do something well
05:49 - we're seeing it right here is what's
05:50 - known as the assignment operator
05:53 - so we are assigning some value to some
05:56 - variable
05:57 - or to some container whatever it's going
06:00 - to be but we're assigning something to
06:02 - something else whereas when we have two
06:03 - equal signs
06:05 - we are checking for equivalence or com
06:07 - or we're comparing two values together
06:09 - so i like to read this as is equal to
06:12 - not
06:12 - just equal to because when i say that
06:14 - sometimes people get confused and they
06:16 - think i'm talking about one equal sign
06:18 - anyways let's use the single equal sign
06:20 - or the double equal sign sorry so if i
06:22 - say
06:22 - 1 equals equals 1 what this is checking
06:24 - is if the left-hand side
06:26 - is equivalent or is equal to the
06:28 - right-hand side
06:30 - so now let me just see out test let's
06:32 - see what we get if we compare one and
06:33 - one
06:34 - so if i do this and i run the program we
06:36 - get true obviously because one is equal
06:38 - to one
06:39 - now the exclamation point equals sign is
06:42 - uh
06:42 - not equal to you can read this as is not
06:45 - equal to
06:46 - so pretty much you can just check for
06:48 - comparison and then whatever that is you
06:49 - can flip it so if the two things
06:51 - are the same when you have the not equal
06:54 - sign this means you are going to get
06:56 - false because if the two things are the
06:57 - same and you're checking if they're not
06:58 - the same then obviously this is false
07:00 - whereas if these two things are
07:02 - different this expression is going to
07:03 - give you
07:04 - true because you're checking if they are
07:06 - not equal to each other and obviously 1
07:08 - is not equal to 2. so i think that's
07:10 - probably straightforward enough i'm not
07:11 - going to go into a huge detailed
07:13 - explanation but if i have 1 does not
07:15 - equal 2
07:16 - and now i run this and i compile we get
07:18 - true because they are not the same
07:20 - however
07:20 - if i make them the same then you're
07:22 - going to see here
07:23 - when i run this that we get false
07:25 - because well they are
07:27 - the same and we're checking if they were
07:28 - not the same so that is kind of the
07:30 - basics of how you use comparison
07:32 - operators now what i'm going to do is
07:35 - show you how we use these
07:36 - with characters and with strings so i'm
07:38 - going to start with characters because
07:39 - they're a little bit simpler
07:41 - and then i will show you strings so
07:42 - first thing to note here and
07:44 - remember that a character is one single
07:46 - character surrounded by single quotation
07:48 - marks
07:49 - if you want to have more than one
07:50 - character you need to use a string which
07:52 - is double quotation marks
07:53 - but let's compare the character a uh to
07:56 - the character uppercase a so just take a
07:59 - guess here
07:59 - and i'll actually make these uh the two
08:01 - equal signs so we'll check if these are
08:03 - equal to each other
08:04 - do you think that this a is equal to
08:06 - this a
08:07 - just take a guess i'm going to compile
08:09 - the program here and let's see what we
08:11 - get oops
08:12 - compile and run notice we get 0.
08:15 - so the reason i want to show you this
08:16 - example is because uppercase letters are
08:18 - different than lowercase letters now it
08:20 - seems obvious but a lot of times people
08:22 - mix this
08:22 - up a lowercase a is not the same as an
08:25 - uppercase a so when we're checking for a
08:27 - comparison between characters or strings
08:30 - we need to make sure we're accounting
08:31 - for the fact that one of them may be a
08:32 - capital the one
08:33 - another one may be lowercase right so
08:35 - just keep that in mind
08:37 - but if i have a lowercase a is equal to
08:40 - lowercase a obviously this will give us
08:43 - true because they are the same
08:44 - character so that is how you compare
08:46 - characters at least when you're checking
08:48 - for equivalence
08:49 - so we will continue in one second but i
08:51 - need to quickly thank the sponsor of
08:52 - this video and this series which
08:54 - is algo expert algo expert is the best
08:56 - platform to use when preparing for your
08:57 - software engineering coding interviews
08:59 - they have detailed solutions to all of
09:01 - their over 140 practice interview
09:03 - questions
09:04 - in over nine programming languages and
09:06 - you can check them out from the link in
09:08 - the description and use the code tech
09:09 - with tim for a discount on the platform
09:11 - now
09:12 - what happens if i do something like
09:14 - lowercase a
09:15 - is less than and then lowercase b well
09:18 - again take a guess what do you think
09:19 - we're going to get do you think this is
09:20 - even going to work but do you think i
09:21 - can make this comparison is it going to
09:23 - crash my program
09:24 - oops didn't mean to close that all my
09:26 - all my tabs just closed all of a sudden
09:28 - okay let's bring that back up but let's
09:30 - compile let's run and notice we get a 1.
09:33 - so this is actually true this is a
09:34 - totally valid comparison we can check if
09:37 - one character is less than another
09:38 - character
09:39 - and what this actually does is this
09:41 - compares what's known as the
09:42 - lexi graphical yeah i think it's
09:44 - lexigraphical i'll put up something on
09:46 - this
09:46 - the screen because i'm 100
09:48 - mispronouncing this word
09:49 - but i believe it's called lexigraphical
09:51 - ordering of characters
09:53 - so really that this is fancy for saying
09:55 - we're going to look at what's called the
09:56 - ascii value of these two characters and
09:59 - compare them together
10:01 - so there's this thing called ascii asc
10:04 - i believe again i'll put that up on the
10:06 - screen so you guys can see it i'm not
10:07 - giving you wrong information
10:08 - but this is a table and every single
10:11 - character on your keyboard every single
10:13 - character you could possibly type
10:14 - has a numeric representation in this
10:17 - ascii table
10:18 - so for example the lowercase letter a i
10:20 - believe has the representation 97
10:23 - the lowercase letter b has a
10:25 - representation 98
10:26 - and this makes sense right right after a
10:28 - we have b and so that's 98
10:30 - c is 99 d is a hundred so on and so
10:33 - forth
10:33 - so when we do this comparison you can
10:35 - kind of imagine that we are converting
10:37 - both of these characters
10:38 - to whatever their ascii value is
10:40 - whatever number represents them on this
10:42 - table
10:43 - and then we're just comparing those two
10:44 - numbers together so in this case we're
10:45 - going to have 97 less than 98
10:48 - that gives us true and so we are all
10:49 - good but now i want to show you
10:51 - something interesting
10:52 - what happens if i compare lowercase a to
10:55 - uppercase b is this going to change
10:57 - anything obviously we know that
10:59 - uppercase and lowercase letters are
11:00 - different
11:01 - and while b is going to have a different
11:02 - representation on the ascii table
11:04 - than lowercase b so just take a guess
11:07 - you're probably not going to know the
11:08 - answer this but i will show you now
11:10 - and you can see that we actually get 0.
11:13 - the reason we get 0
11:14 - is because even though a comes before b
11:17 - and the alphabet
11:18 - this ascii value is greater than the
11:21 - ascii value of
11:22 - capital b in fact capital b has an ascii
11:25 - value i believe
11:26 - of 66 because i know or i'm pretty sure
11:29 - that uppercase a
11:30 - has an ascii value of 65. so this is
11:34 - something that you're not going to
11:34 - memorize you just kind of have to
11:35 - understand that
11:36 - when you do comparisons of characters or
11:38 - strings it's not necessarily intuitive
11:40 - and that you have to know what the ascii
11:41 - values are to actually understand what
11:43 - you're going to get as your
11:44 - result anyways though if i change this
11:47 - to uppercase a
11:48 - this expression now will be true because
11:51 - uppercase a
11:52 - is indeed less than uppercase b when we
11:54 - compare their ascii values so let's go
11:56 - ahead and run this
11:57 - run the program and now we get true
12:00 - awesome so that is comparing characters
12:03 - now i'm going to show you how we can
12:04 - compare strings so of course when we
12:06 - compare these characters as well we
12:07 - could have used the less than or equal
12:09 - to we could have used the greater than
12:10 - or the greater than or equal to we can
12:12 - use any of the comparison operators
12:14 - just be aware that when you're doing
12:15 - this with characters and strings again
12:17 - it's not necessarily intuitive
12:18 - now i will show you with strings though
12:20 - so let's compare two strings together
12:22 - let's actually compare the string hello
12:26 - to the string hello
12:29 - now take a guess what do you think we're
12:31 - going to get here let me go ahead and
12:33 - compile the program
12:34 - and let's run this and we get 0. the
12:37 - reason we get 0 is because this
12:38 - uppercase e here
12:39 - is different than this lowercase e and
12:41 - so these strings are different right and
12:43 - so we're getting false
12:44 - whereas if i change this now to actually
12:47 - match this string we should see that we
12:49 - get true
12:50 - so let's do that and we get true now
12:52 - there is other ways to compare strings
12:54 - i'm actually going to do an entire video
12:55 - just talking about strings because
12:56 - they're really important
12:58 - but for now you can use the double equal
13:00 - sign like this and then of course you
13:01 - can use the not equal to
13:03 - as well and this will tell you if these
13:05 - two strings are not equal to each other
13:06 - so we compile
13:07 - we run we get zero because obviously
13:09 - these are equivalent to each other
13:11 - now let's try this though what if i have
13:13 - hello and then i have hello with the
13:15 - space at the end are these two strings
13:16 - the same
13:17 - what do you think well let's try it out
13:20 - and we can see
13:20 - that we actually get uh sorry this is
13:23 - because we're checking if they're not
13:24 - equal to each other so this is telling
13:26 - us these two strings are not the same
13:28 - the reason they are not the same is
13:29 - because a space well that's a character
13:31 - that has some value on the ascii table
13:33 - as well and since this string has a
13:34 - space and this one doesn't they are not
13:36 - the same
13:37 - so just make sure you're aware of that
13:39 - again not necessarily intuitive some
13:40 - people may say hello and hello the space
13:42 - at the end are the same but to our
13:44 - computer no they are different because
13:45 - this string has a character that this
13:47 - one
13:47 - does not so that's kind of the basics of
13:50 - comparisons
13:51 - now what i'm going to do is show you how
13:53 - we can actually get input for the user
13:55 - from the user story and then compare it
13:57 - against something and we'll just do like
13:59 - no a more realistic example essentially
14:01 - so what i'm going to say here
14:02 - is int n and or actually i'll say into
14:05 - num1
14:07 - and int num2 and i'm going to ask the
14:09 - user to type in two numbers so i'm going
14:10 - to say c out
14:11 - i'm going to see out type a
14:16 - number like that and then what i will do
14:18 - after this is i will see
14:20 - in and i will see in whatever they type
14:22 - into num1 now for this example we're
14:24 - just going to assume that the user
14:25 - actually gives us valid input
14:27 - we already know how to handle invalid
14:29 - input from the previous video
14:30 - so i'm just not going to cover that
14:31 - right here so now after i have
14:33 - my cn what i'm going to do is have
14:35 - another c out so i'm going to have
14:37 - another c out that says
14:38 - type a number and then i'm going to say
14:40 - c in and i'm going to see
14:41 - in num2 then what i'm going to do after
14:44 - this
14:45 - is i'm going to print out whether or not
14:47 - these numbers are the same
14:49 - so i'm going to say the following i'm
14:50 - going to say c out and i'm going to say
14:53 - these two numbers oops if i can type
14:57 - here
14:58 - numbers are the same colon and then
15:01 - i'm going to c out and i'm going to say
15:04 - num1
15:05 - is equal to num2 so this is kind of
15:07 - going to tell us if we get a 1 these two
15:09 - numbers are the same if we get a 0
15:11 - they are not the same and i think that's
15:13 - pretty much all i need actually for
15:15 - this program uh so hopefully that's
15:17 - clear we're collecting two numbers from
15:18 - the user
15:19 - we are then printing out these two
15:20 - numbers are the same and we're just
15:22 - checking whether or not they are the
15:23 - same
15:24 - so let's compile this i'll compile the
15:26 - program
15:27 - and we seem to have gotten an error uh
15:29 - what exactly is the error here
15:31 - let me just look here all right so i
15:32 - just had a look at this um actually the
15:34 - error i was getting here is that i need
15:35 - to parenthesize this expression
15:38 - the reason i need to do this is because
15:39 - when i had num1 is equal to num2
15:42 - the compiler was getting confused and it
15:44 - was reading
15:45 - this entire c out and kind of trying to
15:47 - end it here and then it saw the two
15:49 - equal signs and then it wasn't sure
15:51 - essentially what it should do and this
15:53 - kind of makes sense because these two
15:54 - equal signs could be replaced with this
15:56 - right
15:56 - so how is the compiler supposed to know
15:58 - that we're actually trying to compare
15:59 - these two values
16:00 - and then c out this comparison so
16:02 - whenever you have those kind of arrows
16:03 - just try to parenthesize your expression
16:06 - so when you put these in parentheses now
16:07 - this is telling the compiler hey
16:09 - i want to evaluate this first so now i
16:12 - know that i'm going to be c
16:13 - outing a true or a false value whereas
16:15 - before it was having a hard time
16:16 - determining
16:17 - that we were trying to do the evaluation
16:19 - of this comparison
16:21 - before all the c out stuff so hopefully
16:23 - that's kind of clear but
16:24 - if you run into that error just you know
16:26 - try something like this using
16:27 - parentheses is always a decent idea
16:30 - if anything it just makes your code more
16:31 - clear so anyways let me uh
16:33 - recompile this here now we can see this
16:35 - is all good let me rerun the program
16:37 - asked me to type a number let's type a
16:39 - number three let's type three again
16:41 - these two numbers are the same gives me
16:42 - a one saying yes these are the same
16:44 - awesome so let's run this one more time
16:46 - let's go three four and then it tells me
16:48 - these two numbers are same no
16:50 - they are not the same they are different
16:51 - because we are getting zero
16:53 - so that's really all i want to show you
16:54 - i just wanted to implement this into
16:55 - like a really basic example so you can
16:57 - see how this might work
16:58 - uh now try messing around with this with
17:00 - floats uh with booleans with
17:03 - characters all of that and yeah just see
17:05 - how these different comparison
17:06 - operators work it's always a good idea
17:08 - to kind of do stuff after the video
17:10 - because i can only show you so much and
17:11 - this is meant to give you an
17:12 - introduction
17:13 - to really learn these concepts you have
17:15 - to practice and play around with them on
17:16 - your own so with that said i hope you
17:18 - guys enjoyed if you did make sure to
17:19 - leave a like
17:20 - subscribe to the channel and i will see
17:21 - you in another youtube video