00:02 - [Music]
00:08 - now i'm sure many of you just like
00:10 - myself are guilty of using the standard
00:12 - print debugging method where all you do
00:14 - is you go in your program and you do
00:16 - something like print run or print run
00:19 - and then the value of a variable and you
00:20 - just have a bunch of print statements
00:22 - kind of scattered all over the place and
00:24 - this is really what you're using as your
00:25 - debugging log this is giving you
00:27 - information now there's nothing
00:29 - inherently wrong with doing this and in
00:30 - small programs this is completely fine
00:33 - once you get into larger programs or you
00:35 - start dealing with stuff that's a lot
00:36 - more complicated you definitely want to
00:38 - have some type of persistent log that's
00:40 - going to store all of the data from your
00:42 - program and have different levels of
00:45 - logs what i mean by that is you could
00:46 - have something that's an info or
00:48 - something that's a warning something
00:49 - that's critical or an exception or an
00:51 - error it's just going to be better and a
00:53 - more sustainable practice so in this
00:55 - video i'm going to give you a quick
00:56 - introduction to the logging module show
00:58 - you how simple it is to use and then you
01:00 - can implement this in your next projects
01:03 - now before we dive in i do quickly want
01:04 - to mention that if you want to get
01:05 - better at python go and programming in
01:08 - general then do check out my programming
01:10 - course programming expert dot io this is
01:12 - the best place to learn how to code it's
01:14 - interactive has over 300 practice
01:17 - questions has programming projects
01:19 - teaches fundamental programming advanced
01:21 - programming object-oriented programming
01:23 - software design and so much more if you
01:25 - guys want to support me check it out
01:26 - from the link in the description and you
01:28 - can use discount code tip with that said
01:30 - let's get into the logging all right so
01:32 - let's get started the first thing to do
01:34 - here is import logging now this is a
01:36 - built-in module in python you do not
01:38 - need to install this and it comes with a
01:40 - bunch of basic functionality that you
01:42 - can use right out of the box so first of
01:44 - all we have a bunch of different levels
01:46 - of logging now the first level here is
01:48 - going to be debug so let's just type
01:50 - that out
01:51 - the next level we're going to have is
01:53 - going to be info
01:55 - after this we are going to have a
01:57 - warning
01:58 - and then continuing we are going to have
02:01 - an error
02:02 - and then finally we are going to have a
02:04 - critical
02:06 - okay so these are the five levels of
02:07 - logging that we have and they go in this
02:10 - order so debug is kind of the least
02:12 - important info second warning third
02:15 - error fourth and critical fifth now by
02:17 - default when you use the logging module
02:20 - you're only going to get the output for
02:21 - anything that's at the warning level or
02:23 - above so warning error and critical will
02:26 - actually log to your console anything
02:28 - that's info and debug will not and i'll
02:30 - show you how we change that later on but
02:32 - for example if i just go in here and i
02:34 - say debug i say info
02:36 - i say warning
02:38 - i say error
02:40 - and i say critical and then i run the
02:42 - code you'll see in my console here that
02:44 - i just get three errors here warning
02:46 - root warning and sorry not uh errors but
02:48 - logs error root error and then critical
02:51 - root critical now root actually stands
02:53 - for what logger i'm using and i'm using
02:56 - the root logger because we haven't
02:57 - configured our own which i'll show you
02:59 - later on obviously this is the logging
03:01 - level and then this was the message that
03:03 - we actually had that we wanted to lock
03:05 - so right out of the box you can do this
03:07 - you will get a log it will go to your
03:09 - console but this really isn't much
03:11 - better than what we had previously when
03:13 - we're using print debugging so what i
03:15 - want to show you now is how we configure
03:17 - our logger so we can get this to go to a
03:19 - file and we can change the format of
03:21 - these messages here so we get something
03:22 - like the time then error curta or some
03:25 - other information that you might want so
03:27 - to configure our logger here what we can
03:29 - do is logging dot and then this is going
03:31 - to be basic config now the first thing
03:33 - we can do is pass a level now the level
03:35 - here is going to be what level we want
03:37 - to start outputting or logging at so if
03:40 - i pass debug this means we're going to
03:42 - log everything at the debug level and
03:44 - above
03:45 - if i were to pass
03:46 - say info then same thing it's going to
03:48 - be at info and above so we would skip
03:50 - debug so this is really useful because
03:52 - later on if you want to get a log of
03:54 - only say the errors and criticals you
03:56 - can go in and change this to be say
03:58 - error or critical and then you'll get a
04:00 - log only containing those and then in
04:02 - the future maybe you want to get all of
04:04 - the different types so you go in and
04:05 - again you would change it to something
04:06 - like debug or info for now we'll leave
04:08 - it at info but i want to show you how we
04:10 - actually get this to go to a file so to
04:13 - do that we're going to say file name and
04:15 - we're going to put the name of the file
04:16 - we want this log to go to so for now
04:18 - i'll just go with something like log.log
04:20 - so now that we've done the file name we
04:22 - just need to do the file mode and we're
04:23 - going to say file mode is equal to w and
04:26 - what this means is we are going to
04:27 - create this file every single time
04:29 - overriding a file if it already exists
04:32 - there's a few other modes you can put
04:33 - here but usually you're just going to
04:34 - use w again that will create the file
04:36 - and override it if it already exists if
04:39 - you wanted this to create say logs based
04:41 - on the time or something then you would
04:43 - change this name to use a variable and
04:44 - be dynamic so maybe the name of your log
04:47 - is going to be based on the current time
04:49 - or something along those lines anyways
04:50 - if i run the code here oops we got an
04:53 - issue it says basic config is not
04:54 - defined let's just put logging before
04:57 - that because i forgot to put that let's
04:59 - rerun here and now i get log.log and
05:02 - inside of this log file i have this
05:03 - information now if i do rerun this code
05:06 - then it's going to override this log.log
05:08 - file and place inside of it whatever we
05:10 - logged in the next kind of run hopefully
05:12 - that makes sense uh anyways that is the
05:15 - basics there that is how you set up the
05:17 - logger to go to a file there's a bunch
05:19 - of other options i'll show you shortly
05:21 - but really this is the fundamentals of
05:23 - using your locker now one thing i do
05:25 - quickly want to mention here is that
05:26 - this command can only be ran one time so
05:29 - as soon as you make any logs you do
05:31 - debug info warning any of these methods
05:34 - here this will no longer work and you'll
05:36 - get some type of exception or kind of
05:37 - weird error so only do this one time
05:40 - typically right at the beginning of your
05:41 - program
05:42 - okay now one more thing i want to show
05:44 - you with the basic config here is that
05:46 - we can change the format of our logged
05:49 - messages so right now we're getting the
05:51 - logging level we're getting the name of
05:53 - the logger and then we're getting the
05:54 - message associated with that however we
05:57 - can change this to be much more specific
05:59 - and to be really whatever we want
06:01 - so i'm going to put this on a new line
06:02 - here what i'm going to say format is
06:05 - equal to as another argument here and
06:07 - now i can put in a formatting string
06:09 - that's going to be used to format all of
06:11 - my logs so to do that i'm going to do
06:13 - something like percent and then i'm
06:15 - going to use this special property here
06:17 - called asc time which is essentially a
06:19 - human readable time i'm then going to
06:21 - put a hyphen i'm going to put percent
06:24 - and then i'm going to put inside of my
06:25 - parentheses here the level name i'm
06:28 - going to put an s and then i'm going to
06:29 - put hyphen i'm going to put percent
06:32 - inside of here i'm going to put message
06:33 - and then i'm going to put an s now this
06:36 - is just a standard formatting string in
06:37 - python you have percent you have your
06:39 - parentheses and then you have your type
06:41 - in this case we're putting s for string
06:43 - so inside of here we're going to have a
06:45 - bunch of different properties that are
06:46 - valid to place here now you may be
06:48 - wondering you know how do you know asc
06:50 - time level name
06:52 - message etc well there's an entire list
06:54 - of attributes that you can use from the
06:56 - python documentation so let me actually
06:58 - open that up here and bring it over to
07:00 - this page uh if i scroll down here you
07:03 - can see that we have args ase time
07:05 - created uh
07:07 - exe info file name funk name all this
07:10 - type of stuff and it shows you how you
07:12 - would actually uh do the formatting for
07:14 - this so you can have a look at this i'll
07:15 - leave this link in the description
07:17 - anyways let's have a look at what
07:18 - happens now when i save and run my code
07:21 - and i go back to log.log notice we get
07:23 - some better formatting here where we
07:25 - actually get a human readable time
07:26 - string we get the level and then we get
07:28 - the message and of course we can add a
07:30 - bunch of other stuff in the future if
07:31 - we'd like to all right so now that we've
07:33 - looked at that i'm going to show you a
07:34 - few ways to log some more stuff you may
07:36 - be interested in logging for example how
07:38 - do you log the value of a variable how
07:40 - do you log a stack trace and then we
07:42 - will get to custom loggers
07:44 - so let's have a look at how we log a
07:46 - variable first of all this is pretty
07:48 - straightforward you can just embed it in
07:50 - a string in really any way that you'd
07:51 - like but let's say we have a variable
07:53 - like x it's equal to two
07:55 - i can do something like the value of x
07:58 - is and then inside of curly braces i can
08:01 - simply put my variable name and i'll
08:03 - just put an f before this string and
08:05 - i'll use an f string to embed this
08:06 - variable inside of the string now you
08:08 - also could just use a concatenation you
08:10 - can do something like plus string x you
08:12 - could use a standard formatting string
08:14 - in python like we were doing up here
08:16 - really any way works but if you're using
08:18 - python 3.6 or above this is the simplest
08:20 - just put an f before your string write
08:22 - the string and then anything you want to
08:24 - embed put in curly braces and it will
08:25 - show up so let's save the code here go
08:28 - to log.log and ah sorry it's because my
08:31 - logging level is info this isn't showing
08:33 - up so let's just change this to info
08:34 - here let's go to log.log uh okay let's
08:38 - run one more time go back here and then
08:40 - you see the value of x is 2.
08:42 - perfect so that is how you log the value
08:44 - of a variable next if you want to log a
08:47 - stack trace so an exception occurred and
08:49 - you actually want to log that
08:51 - there's a few ways to do that so let's
08:53 - just write a try except block here i
08:54 - have something like try oops i didn't
08:56 - want all of that
08:57 - let's go with one over zero we know this
08:59 - will raise an exception i'm going to say
09:01 - exep accept and i'll accept the zero
09:03 - division error as e and then there's a
09:06 - few ways the first way to log this
09:08 - exception here would be doing something
09:09 - like logging.error
09:11 - and then inside of here i'll just do
09:13 - something like zero division error and
09:14 - then i pass this parameter here
09:17 - exc info is equal to true and sorry this
09:19 - is an argument not a parameter and this
09:22 - will actually log the exception that
09:23 - occurred as well as the zero division
09:26 - error message
09:27 - so let's save this
09:29 - let's run let's go to log.log and now
09:32 - notice we get the traceback here as well
09:34 - after the error that we looked so that's
09:36 - the first way to do this the next way to
09:38 - do this is to actually use this custom
09:40 - function here called exception uh now
09:42 - inside of here we don't we don't need to
09:44 - pass the exe info equals true instead we
09:47 - just pass some type of string message
09:49 - and when i run the code now it will
09:51 - automatically give me the stack trace as
09:53 - well as the message and the message type
09:55 - will be error to prove this to you let's
09:57 - just change this to be test so you know
09:59 - i'm not using the old log when i rerun
10:02 - this and go here we get test type error
10:04 - and then we get our trace back
10:06 - okay so that is the basics that's
10:08 - probably all the stuff you're really
10:09 - going to want to log other than that you
10:11 - can embed it in a string however you see
10:13 - fit now let's have a look at custom
10:15 - loggers so often times when you're
10:17 - working in larger projects you want to
10:18 - have separate log files and each log
10:21 - file will contain some different
10:23 - information right you may also want to
10:25 - send the logs through say http you may
10:27 - want to send an email with the logs you
10:29 - can do all of that using the logging
10:31 - module now i'm not going to go through
10:32 - http and emails that's a bit more
10:34 - complicated you can find that from the
10:35 - documentation but i will show you how we
10:37 - separate into different log files and
10:40 - use kind of custom loggers so to create
10:43 - a custom logger we're going to say
10:44 - logger is equal to logging dot and then
10:47 - this is going to be get logger now
10:49 - inside of here you simply put the name
10:51 - of the logger that you want and if this
10:54 - logger exists it will give it to you if
10:56 - it doesn't exist it will create it for
10:58 - you so this actually means if you have
11:00 - multiple python modules for example you
11:02 - don't need to pass this logger object
11:04 - around you can simply use the
11:06 - logging.getlogger
11:08 - and if there is a logger that already
11:09 - exists with this name it will give it to
11:11 - you otherwise it will just create a new
11:13 - one now the convention is to use the
11:15 - underscore underscore name variable
11:17 - as your logger and to have one logger
11:19 - for each python module now you don't
11:22 - have to do that this is just the
11:23 - convention and the reason you would use
11:25 - name is because that gives you the name
11:27 - of the current module and you know
11:29 - that's going to be unique in your python
11:31 - project at least if you've set it up
11:32 - correctly so we have logger is equal to
11:35 - logging.getlogger we're going to use
11:37 - name now this one won't already exist so
11:39 - it will give us a new one and now what
11:41 - we can do is use this custom logger to
11:43 - log a message so let's do this i'm going
11:45 - to say logger so rather than logging
11:47 - it's logger which is the variable we
11:49 - have here and then we'll go dot and we
11:51 - can just do something
11:53 - like actually info here and we'll just
11:56 - say test the custom
11:58 - logger now let's run the code let's go
12:01 - to log.log and then notice we get test
12:03 - the custom log so that's great but you
12:05 - notice here that it's going inside of
12:07 - the original log file that we set up
12:09 - using the logging.basicconfig it's also
12:11 - using this format and this file name and
12:14 - all of that stuff so if we want to
12:16 - change that and we want this to go into
12:17 - a separate file we need to set up
12:19 - something called a handler now a handler
12:21 - is just what allows us to configure this
12:24 - logger essentially
12:25 - so i'm going to say my handler is equal
12:27 - to logging dot and then this is going to
12:29 - be the file handler there's all kinds of
12:32 - other handlers related to say http email
12:35 - i imagine the most basic one you guys
12:37 - are going to use is just file ones so
12:39 - that's why i'm going with filehandler
12:41 - and then inside of here i just pass the
12:42 - name of the file that i want my logs to
12:45 - go to so handler is equal to
12:47 - logging.filehandler and i have test.log
12:50 - now that i have this i also want to set
12:51 - up a formatter and then i want to
12:53 - configure my handler with the formatter
12:56 - and then add my handler to my locker i
12:59 - know this seems a little bit confusing
13:00 - you set up a handler that's what's going
13:02 - to handle how this info is getting
13:04 - logged you then have a formatter and
13:06 - that's going to format the logs and then
13:08 - you add that to whatever logger you want
13:10 - and that kind of sets everything up and
13:11 - configures it for you so let's make our
13:13 - formatter we're going to say formatter
13:15 - is equal to logging.formatter and then
13:17 - we can use the exact same format that we
13:19 - had before or we could change this
13:21 - slightly if we want so let's actually go
13:23 - and add one more attribute in here that
13:26 - is going to be the name of the logger
13:28 - just so we can see this so i'm going to
13:30 - go
13:31 - name like that and that will give us the
13:32 - name of whatever logger it is actually
13:35 - logging to this output
13:37 - okay so now that we have that we need to
13:39 - set the formatter for our handler so
13:41 - we're going to say handler.setformatter
13:44 - and then we'll set the formatter and
13:46 - then we need to add the handler to our
13:48 - logger so logger
13:49 - dot add handler
13:51 - and then handler like that okay so now
13:54 - we have logger.info and when we do this
13:56 - we should see that it goes to a new log
13:58 - file called test.log so let's run the
14:01 - code and now test.log has underscore
14:04 - underscore main as the name that's what
14:06 - we're expecting we have info test the
14:08 - custom logger and the time as well
14:11 - perfect and then log.log is unchanged
14:13 - because uh we did not override this or
14:15 - do anything in this we were now using
14:17 - the custom logger from this phone so
14:19 - with that said i do think i'm going to
14:20 - wrap up the video here i do know that i
14:22 - went very fast in this video i just
14:24 - wanted to be concise and give you the
14:26 - information as quickly as i could this
14:28 - is a pretty useful module definitely
14:30 - recommend it in a larger
14:32 - project and this is super useful if you
14:34 - have some type of production code base
14:36 - because you can actually send the logs
14:37 - to yourself you can view them afterwards
14:39 - and again you have that persistent data
14:41 - as opposed to having a few print
14:43 - statements and having to kind of parse
14:45 - through the console and find the
14:46 - information that you're looking for with
14:48 - that said if you guys enjoyed please do
14:49 - leave a like subscribe to the channel
14:51 - and i will see you in another one
14:55 - [Music]
15:01 - you