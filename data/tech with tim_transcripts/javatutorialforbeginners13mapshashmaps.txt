00:00 - hello and welcome so in this video I'm
00:03 - gonna be talking about hash maps or like
00:06 - Java Maps the reason I say it like that
00:08 - is because there's a few different
00:10 - implementations of maps similar as to
00:12 - how there's different implementations of
00:14 - lists and like array lists and all that
00:16 - stuff so Maps if you're coming from
00:19 - Python like me you can think of them as
00:21 - dictionaries and I'm gonna be talking
00:23 - about three different types of maps so a
00:25 - hash map a tree map and what was the
00:28 - last one I got it written down here
00:29 - linked hash map sorry just forgot about
00:31 - that one so pretty much a map is known
00:33 - as a key value pair in any other
00:36 - languages they're typically called
00:37 - dictionaries or hash tables or hash maps
00:40 - or whatnot okay so to create a map and
00:42 - I'm just gonna do this and then we'll
00:43 - talk about exactly what it does I'm just
00:45 - gonna create a map M it's gonna equal
00:47 - two new hash map like this okay and this
00:52 - is your simple syntax now too you have
00:55 - to import this so I'm just gonna import
00:57 - java.util so just by clicking on it and
00:59 - we have to import map as well so we'll
01:01 - import the map there so you see it'll
01:04 - it's all coming up now for us okay so
01:06 - now that we have that I want to talk
01:08 - about exactly what a map is now a map
01:10 - like I said is a key value pair meaning
01:13 - that it's similar to like a list in an
01:15 - array in the sense that you can index
01:17 - things but instead of indexing them by
01:19 - numbers you index them by keys now keys
01:23 - can be anything that you want a key
01:25 - could be a string a key could be an
01:26 - array actually I'm not sure if it could
01:28 - be an array but it could be a string it
01:29 - could be a number it can be a char it
01:32 - can be a float what like pretty much
01:33 - wherever you want can be the key and
01:35 - that key links us to a value so the
01:39 - easiest way to kind of demonstrate this
01:40 - is just to do it and then to talk about
01:42 - what's really happening so to put a new
01:45 - value into a hash map or into a map what
01:50 - you do is you have to specify eight key
01:52 - and a value so you type whatever the
01:55 - name of your map is in this case m dot
01:56 - put and then you need to put a key and a
01:58 - value so in this case for my key I'm
02:00 - gonna type Tim and it is gonna lead to
02:03 - they value five so I typed Tim and then
02:06 - the value is five so I put that in there
02:09 - and now I'll just show you what it looks
02:12 - like if we print this out to the
02:13 - screen because I think it will give us a
02:15 - decent representation system DUP what am
02:19 - I saying system.out.println sir he has a
02:23 - little tired today and we will print em
02:25 - and see what we get
02:27 - so in this case you can say we haz see
02:28 - this so curly braces says Tim is equal
02:31 - to five meaning that if we're to index
02:34 - Tim we get the value 5 now how do we do
02:37 - that so how do we actually get a value
02:39 - based on a key the way we can do this is
02:41 - if you put square brackets next to your
02:43 - map actually you can't do like that this
02:46 - probably thought we have to MDOT and
02:47 - then get sorry I'm still used to the
02:50 - Python syntax here guys we type M dot
02:52 - gets okay and then we put the key in
02:55 - here so in this case I'm gonna put Tim
02:57 - as my key and well you should already be
03:00 - predicting what we're gonna get out to
03:02 - the screen in this case we get the value
03:04 - five and not is because the key Tim
03:06 - leads us to the value five now to put
03:09 - another thing into our map we can do
03:11 - this right so we do Tim we could do like
03:13 - Joe and Joe doesn't have to point to a
03:16 - number they could point to another
03:17 - string and that string could be like I
03:19 - don't know X okay and we can just do
03:22 - whatever we want like we can have the
03:23 - the key one and or the key 11 and the
03:27 - key 11 points to nine nine nine okay
03:29 - and now if I just print em out you'll
03:31 - see that we don't get any issues and
03:33 - that this works fine we get Joe equals x
03:36 - Tim equals five eleven equals nine nine
03:38 - nine okay now this is an extremely fast
03:42 - data set meaning or data type whatever
03:45 - you want to call it meaning that
03:46 - everything from adding to removing to
03:49 - overriding to getting happens in
03:52 - constant time now again like I talked to
03:55 - it in my sets video you don't really
03:56 - have to understand what that means but
03:57 - if you do that's great and just know
03:59 - that this does happen in constant time
04:01 - now I'm gonna show a I just will show
04:04 - the tree map and the what was the other
04:08 - map it talked about linked hash map
04:09 - first and then we can kind of talk about
04:12 - the differences between them so with a
04:14 - hash map as opposed to the other type of
04:16 - Maps I'm going to show you this one does
04:18 - not retain an order so all of these maps
04:21 - can only contain unique elements or
04:23 - unique keys meaning that if I try to add
04:25 - another key so I try to add a lot
04:27 - I try to add this to be 998 instead of
04:29 - adding another key that's equal to 11
04:31 - we're simply overriding this already
04:33 - existing key that is 11 so in this case
04:35 - you can see that we overwrite it and we
04:37 - get 998 you cannot have two of the same
04:39 - keys existing in the map but you can
04:42 - have two of the same values if you'd
04:45 - like to okay so sorry that kind of got
04:47 - me off track but that was important to
04:49 - understand so this hash map does not
04:51 - guarantee the order in which we add
04:53 - things in so you can see that I added
04:55 - Timman then I had a Joe and then I added
04:57 - 11 and it's showing me Joe Tim and 11
05:01 - now this is not any kind of sorted order
05:03 - because how do we sort numbers and
05:05 - strings and all that stuff together
05:08 - it's not in the order that we added it
05:09 - in so what order is it in well it is in
05:11 - no order and that is why this hash map
05:14 - is extremely fast because it does not
05:16 - keep track of the order of elements when
05:18 - they go in so just know that if you're
05:20 - trying to like look through the map
05:22 - because you can iterate through maps and
05:23 - I'm gonna show you that in a second
05:25 - it doesn't keep it in the correct order
05:28 - okay now the next map that were going to
05:31 - talk about is the tree map okay
05:34 - now this tree map is what we're gonna
05:36 - have imported of course is similar to
05:38 - the tree list or the tree set or
05:41 - whatever one I showed you in the other
05:42 - video in that when we add things in it's
05:45 - actually gonna keep it in a sorted order
05:46 - so if I run this I'm actually curious to
05:49 - see what kind of sort we're gonna get
05:50 - okay so we don't get anything so that's
05:52 - that's actually a good area to run into
05:53 - whenever we're using a tree map the
05:55 - types that we add to the map have to be
05:58 - the same meaning that the keys have to
06:00 - be the same data type at least I'm
06:03 - pretty sure so I'm just gonna see if I
06:05 - remove this if this is gonna work for us
06:07 - yes so in that case we do get in a
06:10 - sorted order
06:10 - we get Joe and then we get Tim because
06:12 - obviously J is before T and that's what
06:15 - it's gonna sort strings so if I try to
06:16 - put like an a value in here so it's yeah
06:19 - it's even sure I need key value I'll
06:21 - literally just put like a is equal to B
06:24 - and I guess we can't set equal we have
06:26 - to say comma ah what's our air semicolon
06:31 - I always forget in those aren't I okay
06:32 - so we run this there we go so you see we
06:34 - get a first because obviously a will its
06:36 - first letter in the alphabet so that's
06:37 - going to show up before Jo and before
06:39 - Tim so that
06:40 - sorts the order for us and that means
06:42 - that the data types for the keys that we
06:43 - pass in have to be the same so we could
06:46 - use numbers we can use strings using
06:47 - whatever diets hope you want their shop
06:48 - to be completely the same for that map
06:50 - now the other type is a linked hash map
06:54 - and what this does is it's similar to a
06:57 - list in that it keeps the same order
07:01 - that you add things into it so in this
07:03 - case if I print out m you can see we get
07:06 - Tim Jo and then a and that's because
07:08 - it's actually gonna maintain the order
07:10 - in which we added elements so it's gonna
07:12 - say Tim that was first element so that's
07:14 - gonna be the first thing that we show
07:15 - and then Jo that's gonna be the first
07:17 - thing and then a or a second and then a
07:19 - this is gonna be the third thing because
07:21 - that's the order in which we added them
07:22 - in and those are the only main
07:24 - differences other than like the speed of
07:27 - which these things run out that you have
07:29 - to kind of understand right now okay and
07:31 - typically whenever you do anything
07:32 - you're just gonna be using a hash map
07:33 - you don't really need like a linked hash
07:35 - map or a tree hash map or tree map
07:39 - whatever it's called for any of the
07:40 - stuff that we're gonna be doing right
07:42 - now so what I'm gonna do now is I'm just
07:45 - gonna show you a few methods how we can
07:46 - kind of clear the maps how we can like
07:48 - remove elements and some useful things
07:50 - you might want to do so what we can do
07:53 - to get all of the key value so to get
07:55 - like a certain key value we can say
07:58 - actually I'll just show this one first
08:00 - what we can actually do is just cool
08:03 - things that are gonna be really useful
08:05 - to you and dot contains value so this
08:09 - isn't C this method contains values not
08:11 - available for type map hmm interesting
08:14 - match contains value object yeah so we
08:17 - just have to put some in there okay so m
08:19 - dot contains value and then in here
08:22 - we're just gonna put like any value on
08:24 - so in this case B so what this is gonna
08:26 - do is it is actually going to check for
08:28 - us if this value exists in map and
08:31 - remember the values are always these
08:32 - second elements here and they are linked
08:35 - up or like attached to the key so it's
08:37 - gonna tell us if B exists now we can do
08:40 - the same thing with keys and the keys
08:41 - are more useful and I'll show you why in
08:43 - a second contains key in this case for
08:47 - the key I could put like contains the
08:48 - key five right and that will give us a
08:51 - true or false value similar to what
08:52 - we're doing with sets and lists in the
08:54 - video okay now the recent keys are more
08:58 - useful is because if I try to do
09:00 - something like and don't get and I put
09:03 - the key let's say five
09:04 - well the key five does not exist the
09:07 - value five exists but the key five does
09:08 - not exist so watch what happens when I
09:10 - run the program em not get five actually
09:13 - let's just see what this is printing out
09:14 - to us because I'm curious if this is
09:16 - gonna crash for us or not let's let's
09:18 - see here I'm not getting five no yeah so
09:24 - this isn't gonna actually crash for us
09:26 - if we try to get a what do you call it a
09:29 - key that does not exist in the map but
09:31 - it's gonna return us a null value
09:33 - because this key does not exist in the
09:35 - map that's actually interesting I didn't
09:37 - know that in Python if you try to get a
09:40 - key from map or from a dictionary and it
09:43 - doesn't exist you actually get an error
09:44 - so that's interesting to know anyways I
09:48 - guess another method I could show is
09:50 - let's see here
09:51 - don't values so what this is gonna do is
09:53 - it actually just prints out all of the
09:56 - values in the map so if I copy this and
10:00 - I simply print it down here we get M
10:03 - values and in this case it'll just give
10:06 - me X B and five which are all these and
10:08 - you can see it gives me that in no
10:09 - particular order it's important to
10:11 - remember values let's see if there's any
10:14 - other ones we can use we can use clear
10:17 - so I just got a text document beside
10:19 - because I always forget all these to
10:21 - show you I always forget which ones so m
10:23 - dot clear obviously this is just gonna
10:24 - remove everything from the what you call
10:27 - it the map so we get an empty map and I
10:30 - believe the last one is is empty and
10:34 - this one like that's is simply just
10:37 - gonna tell us if the map is empty or if
10:39 - it's not empty now how much time we have
10:42 - ten minutes so I actually I am NOT going
10:44 - to show you an example of using these
10:45 - maps but if you want to think about this
10:48 - and maybe try programming this yourself
10:50 - using the maps that I just showed you be
10:52 - good exercise and that is given a string
10:55 - or like an array of characters count all
10:59 - of those characters into a map so have a
11:02 - key that's equal to let's say the letter
11:06 - and then the value for that key is equal
11:09 - to the how many times that letter occurs
11:13 - or how many times that character occurs
11:14 - and try to do that yourself and if
11:16 - you're able to accomplish that well then
11:17 - you're definitely learning and you're
11:19 - understanding the stuff that I'm
11:20 - explaining so anyways that's been it for
11:22 - this video if you guys enjoyed please
11:23 - make sure you leave a like and subscribe
11:25 - and I will see you again in the next one
11:26 - [Music]