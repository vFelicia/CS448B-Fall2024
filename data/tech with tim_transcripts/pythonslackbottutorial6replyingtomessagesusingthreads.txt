00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - slack bot tutorial
00:12 - so in this video what we're going to be
00:13 - doing is actually filtering our messages
00:15 - to make sure there's no inappropriate
00:17 - words inside of them
00:18 - and then i'll be showing you how we can
00:19 - first of all delete those messages or
00:21 - how we could actually reply to them in a
00:23 - thread
00:24 - now this will also explain kind of what
00:25 - i did in the previous video where i was
00:27 - updating the last message
00:29 - i realized that i didn't go into enough
00:30 - depth on that and it might be slightly
00:32 - confusing as to why i was actually able
00:34 - to update that specific message
00:36 - so that hopefully should explain that so
00:38 - anyways let's get started the first
00:40 - thing that i want to do though is just
00:41 - modify something quickly related to what
00:43 - we did in the previous
00:44 - video so here when i say if text.lower
00:47 - equals equals start
00:48 - what this is saying essentially is every
00:50 - single time i type start into the chat
00:53 - i'm going to send a new welcome message
00:55 - now i really don't want to do that
00:57 - because i don't want to have the
00:58 - situation where people are just spamming
01:00 - start start start
01:01 - start all the time and then getting all
01:02 - these messages popping up
01:04 - in fact let's have a look at an example
01:05 - here i'll bring up my uh
01:07 - slack thing let me make sure my bot's
01:09 - actually running
01:10 - uh yep it is okay and let's have a look
01:13 - here
01:14 - so if i type start in the chat and you
01:16 - can see what i was doing before i was
01:17 - just messing around here
01:19 - and we have a look at our dms we get
01:21 - this message popping up right
01:22 - as it should now let's go back to start
01:24 - again or to test again and type start
01:27 - one more time
01:28 - and we should get another dm popping up
01:30 - and we do now look what happens when i
01:32 - react to this top message up here
01:34 - so if i react to this one notice that
01:37 - this message actually doesn't get
01:39 - updated with the check mark
01:40 - the bottom one does the reason for that
01:42 - is that this message at the bottom
01:44 - is now the current one that we're
01:45 - storing in our memory in that dictionary
01:47 - that we had
01:48 - this one gets tossed away because we
01:50 - overwrote it right
01:51 - which means when we react to any of the
01:53 - message really in this channel
01:55 - it's going to update the most recent
01:57 - message that we sent so we might not
01:59 - necessarily want that to happen so i'm
02:01 - just going to make it so that we can't
02:04 - type start again and have another
02:05 - message come unless this one is
02:08 - gone right unless we've you know done it
02:10 - so you'll see how this works
02:12 - that's a poor explanation but it's
02:14 - pretty straightforward so right here
02:16 - where it says if text.lower equals
02:17 - equals start
02:18 - all i'm going to do is inside of here
02:20 - actually i can do it inside of send
02:22 - welcome message that might make more
02:23 - sense
02:24 - is make sure that we haven't already
02:26 - sent a welcome message
02:27 - all right so what i'm going to do here
02:29 - is i'm going to start by writing this
02:30 - condition so i'm going to check first of
02:32 - all to see if the channel
02:33 - is inside of our welcome messages we
02:35 - have that condition
02:36 - here right but i want to check that
02:38 - beforehand
02:39 - just to make sure that this is actually
02:42 - going to make sense and in fact i can
02:43 - actually move this condition
02:44 - all the way up i guess uh yeah so let's
02:47 - do that let's say
02:48 - if channel is not in welcome messages
02:51 - then go ahead and add the channel in
02:53 - now the next thing i will say is if user
02:57 - not in welcome messages
03:02 - channel then we can go ahead and do all
03:04 - of this
03:05 - now in fact what i'm actually going to
03:06 - do is reverse this condition so i'm
03:08 - going to say if user in welcome messages
03:10 - channel
03:10 - then we will return so what this is
03:12 - doing now is first checking okay you
03:14 - know
03:14 - is the channel currently in our welcome
03:16 - messages if it's not
03:18 - then we're going to go ahead and add it
03:19 - like we did here same thing that we did
03:21 - before
03:22 - and then i'm going to say okay well is
03:23 - the user currently in
03:25 - the welcome messages channel now we
03:26 - won't run into a problem here because if
03:28 - the channel didn't already exist we
03:29 - would have added it
03:30 - and in that situation we won't return
03:32 - obviously right because the user
03:34 - won't be in the welcome messages but if
03:36 - the channel already existed
03:37 - obviously this condition won't happen
03:39 - and then we'll check if the user is
03:41 - already in the channel and if they are
03:42 - that means we already sent them a
03:43 - welcome message so we'll simply return
03:45 - and just escape from this function so
03:47 - anyways let's test this
03:49 - out i feel like i might have messed up
03:50 - yeah i got to rerun the bot here
03:52 - uh oh what's wrong with this so i've
03:54 - messed up some indentation just going to
03:56 - move that if statement forward one
03:58 - okay let's run this and now let's see
04:00 - what happens so remember that
04:02 - since this is all running in memory
04:03 - every time we reload the bot
04:05 - technically we're clearing that entire
04:06 - dictionary of welcome messages
04:08 - but let's type start let's see our dm
04:10 - come in
04:11 - great okay and now let's go back to test
04:14 - let's type start again and let's see if
04:16 - it sends us a dm
04:18 - it doesn't look like it's sending us one
04:19 - so awesome so now let me react to this
04:22 - there we go it should update the message
04:24 - and we're good to go
04:25 - now we could make it that once you react
04:27 - to this message we can send you another
04:29 - one
04:29 - but really once we've sent the user one
04:31 - welcome message we don't really want to
04:32 - send them another one right
04:34 - okay so perfect that's what i wanted to
04:35 - do for that now the next thing i'm going
04:37 - to show you how to do
04:38 - is how we can look in a user's text so
04:41 - whatever they're sending to us
04:42 - and make sure that they don't have any
04:44 - like bad words or prohibited words now
04:46 - i'm not going to type any swear words
04:47 - out in this tutorial just
04:49 - because youtube want to be careful with
04:50 - demonetization but you get the point you
04:52 - could obviously
04:53 - type a swear word in place of what i'm
04:55 - going to do here so i'm going to make a
04:57 - list at the top of my program here i'm
04:59 - going to call it bad words i'm going to
05:00 - set it equal to a list
05:02 - and i'm just going to put a bunch of bad
05:04 - words in lowercase that i don't want to
05:06 - appear in my program
05:08 - so in this case i'm going to say bad
05:09 - words equals like hum i don't know just
05:11 - a random one we'll make no another bad
05:13 - word
05:13 - and let's make tim another one and you
05:16 - could put a whole phrase in here if you
05:17 - wanted to
05:18 - anything you put in this list will make
05:19 - sure it's not contained in the message
05:22 - uh before we actually allow that message
05:25 - to go through
05:25 - or we delete the message or whatever
05:27 - we're going to do with that all right so
05:29 - bad words hum
05:30 - no tim now what i'm going to do is set
05:32 - up a function
05:33 - that can look through any string and
05:35 - tell me if there's any of those bad
05:36 - words inside of it so i'm going to say
05:38 - define
05:39 - check if bad words
05:43 - we're going to take a message like that
05:45 - and then we're going to do a few other
05:46 - things so the first thing i'm going to
05:47 - do is make this message all lowercase
05:50 - just so that if they were to type like
05:51 - in all capitals no we would catch that
05:53 - and we would remove that so just make
05:55 - sure all of the
05:56 - words inside of here are lowercase
05:57 - because we are going to be converting
05:58 - the message to lowercase
06:00 - of course you could reverse this make
06:01 - the message uppercase and make the words
06:03 - uppercase as well
06:04 - all right so message equals
06:06 - message.lower now the next thing i'm
06:07 - going to do is something
06:08 - weird that you probably haven't seen
06:10 - before but i'm going to remove
06:12 - all of the punctuation and special
06:14 - characters from this message
06:16 - the reason for that is i don't want
06:17 - someone to be able to get away with
06:18 - doing like h
06:20 - h dot m dot right something like that if
06:23 - they're gonna do like you know like
06:24 - an s in between that's fine like i can
06:27 - live with an extra character
06:28 - we could try to look for that but i'm
06:30 - just gonna try to avoid the fact that
06:32 - someone could do like you know like an
06:34 - f star star star right if we were going
06:35 - to look for that word so we're going to
06:37 - remove
06:38 - all of these special characters or you
06:39 - know if they did something like this or
06:41 - if they had like all of the
06:42 - you know special charac like letters in
06:44 - between there we're just trying to avoid
06:46 - that
06:46 - so to do this what i'm going to do is
06:48 - say message dot translate this is a
06:50 - somewhat new function i believe in
06:52 - python
06:52 - or at least there's a different
06:54 - implementation now in python 3. and i'm
06:56 - going to say
06:56 - str dot make trans i'll explain what
06:59 - this does in a second
07:01 - empty string oops empty string comma
07:04 - empty string comma string which we're
07:06 - going to import
07:07 - from above in one second and then dot
07:10 - punctuation
07:11 - now string.punctuation i believe is
07:13 - simply a list of all of the punctuation
07:16 - characters so rather than us having to
07:17 - type it out this just gives us access to
07:19 - that if you want to see what it's like
07:21 - just print string.punctuation and you
07:23 - will see
07:23 - but to use this we need to import it so
07:25 - i'm going to go up to the top of my
07:27 - program here
07:28 - i'm going to say import string like that
07:32 - okay so import string okay so what this
07:34 - line is saying right here
07:36 - is we're going to translate the string
07:39 - using what's known as a
07:40 - translation table i believe that's what
07:42 - it's called the
07:44 - table essentially will take a uh
07:47 - a bunch of letters and map them to
07:49 - something that we want to replace them
07:50 - with so this is actually a cool
07:51 - thing so if i had like string dot make
07:54 - trans what make trans is doing is making
07:56 - a translation table for
07:58 - us what this is actually going to be is
08:00 - a dictionary and the dictionary is going
08:01 - to look something like this like the
08:03 - letter a
08:03 - goes to none which would mean any time
08:06 - we see the letter a in the string
08:07 - replace it with none
08:09 - now if i had b and i've mapped that to c
08:11 - that would mean any time we see the
08:13 - letter b
08:14 - map that to c so what this does is
08:17 - construct this table for us or construct
08:19 - this dictionary for us
08:20 - make trans and keep in mind str is a key
08:23 - word in the language right
08:24 - takes an in string and an out string so
08:27 - these strings
08:28 - must be the same length and what they
08:30 - mean is okay
08:31 - if i have a as one argument then i have
08:33 - b is the other whenever i see a
08:35 - map it to b if i had ac and bb
08:38 - that would mean whenever i see a map it
08:40 - to b whenever i see
08:41 - c map it to b i picked bad letters for
08:44 - the pronunciation there but you get the
08:45 - point that's how that works
08:47 - now the last argument which is the only
08:48 - one we're actually really passing in
08:50 - here
08:51 - simply says take everything in this
08:54 - everything in this string
08:55 - and map this to none so that means that
08:58 - all of the punctuation characters
09:00 - if we see them we will replace them with
09:02 - nothing which just means we will remove
09:04 - them
09:04 - hopefully that makes sense again you can
09:06 - look up the syntax if that's unclear
09:08 - this story is not a list this is
09:10 - actually just going to be a string which
09:11 - makes sense considering this is a string
09:13 - and it will have all the punctuation
09:15 - characters great so pretty
09:16 - straightforward
09:17 - now what we're going to do is say return
09:19 - any
09:20 - now what i'm going to do inside of here
09:21 - is check if this message contains any of
09:24 - our bad words
09:25 - so this is pretty straightforward i'm
09:26 - going to say word uh oops
09:29 - yeah word in msg
09:33 - for word in bad underscore words so what
09:36 - i'm doing is using a comprehension here
09:38 - and i'm going to say
09:39 - for every word in the bad words list
09:41 - let's see if that word
09:43 - is contained inside of message and of
09:45 - course message is going to be translated
09:47 - here
09:48 - because we called message.translate and
09:51 - now i actually need to make this equal
09:52 - to message so
09:53 - msg equals message.translate because
09:55 - this is going to return to us a string
09:58 - not change the string in place hopefully
10:00 - that's making sense
10:01 - we translate the message we made a
10:03 - lowercase then we're checking if any of
10:05 - our bad words are inside of the message
10:07 - now any what this does is tell us if
10:10 - there is any element in this list that
10:12 - is true because what this will do is
10:13 - make a list
10:14 - that will be like true false true false
10:15 - for all of the bad words
10:17 - if there is at least one true inside of
10:20 - this list
10:20 - then any will return true so there you
10:23 - go learning about some advanced python
10:24 - syntax
10:25 - we can kind of kill two birds with one
10:27 - stone slack tutorial and more advanced
10:29 - python stuff
10:30 - anyways that makes sense so now let's go
10:32 - down to
10:33 - message and what we're going to do is
10:35 - just pass our message
10:36 - to check if bad words and if we see a
10:39 - bad word i'm going to show us how we can
10:40 - reply to that message and be like
10:42 - hey that was a bad word so let's now go
10:45 - under
10:45 - under here if text dot lower equals
10:47 - start and let's say
10:49 - l if text dot wise
10:52 - yeah we don't do text all lower let's
10:54 - say l if
10:55 - and then we're going to say check if bad
10:57 - words that function we just made
10:59 - we're going to pass text to it and this
11:01 - will tell us hey
11:02 - was there any bad words or was there not
11:04 - if this is true then what we will do
11:06 - is respond to this message and just tell
11:08 - them hey you know bad word
11:10 - so to respond i'm not actually going to
11:13 - use the
11:14 - post message command i'm going well i am
11:16 - going to use the post message command
11:17 - but i'm going to use it in a way that we
11:19 - reply
11:20 - in a thread so if i open up my
11:23 - slack here and we bring it over to the
11:24 - side and we have a look at our channel
11:27 - i can press reply right if i go here and
11:29 - press the reply button
11:30 - i can oh that's share my bad where's
11:32 - reply
11:33 - i feel like that would be oh there you
11:35 - go replying thread i can reply
11:37 - underneath so if i said hello
11:39 - then notice that it goes in a thread
11:41 - underneath that message so that's what i
11:42 - wanted to do
11:43 - so let's do that let's go here we say
11:46 - lift check if bad
11:47 - words and then what we will do is say
11:49 - client
11:51 - oops dot post underscore or chat
11:54 - post underscore message and then we'll
11:56 - do the same things we've done before
11:58 - so we're going to say channel and that's
12:00 - going to be equal to the channel id
12:02 - which we have up here and then what we
12:04 - need to do is actually get the timestamp
12:06 - of this message so we're going to say
12:07 - ts equals event dot get
12:11 - ts this is going to give us the time
12:13 - stamp that this
12:14 - original message that was passed in was
12:16 - sent at
12:17 - and what we're going to do is we're
12:18 - going to say thread underscore
12:20 - ts so thread underscore timestamp equals
12:24 - ts this is telling us what message we
12:26 - should reply to
12:28 - and then finally the text is going to be
12:30 - equal to what we want to say so i'm
12:31 - going to say
12:32 - that is a bad word or something like
12:34 - that so that they know you know
12:36 - we didn't approve of this message so
12:37 - let's save that and what this
12:39 - ts is doing just so this is clear the ts
12:42 - is the timestamp of the message and the
12:44 - timestamp is like
12:45 - extremely precise i think it's down to
12:47 - like nanoseconds or something like that
12:49 - so we can pretty much be guaranteed that
12:52 - never are there going to be two messages
12:53 - that were sent
12:54 - at the exact identical same time so that
12:57 - way we can use the timestamp of a
12:59 - message like the id
13:01 - of a message and that's how we're
13:02 - referencing this thread so we know which
13:05 - message to actually
13:06 - post into now i'm not sure if there is a
13:08 - situation where you could have two
13:09 - messages that have the same timestamp
13:12 - i don't think that's possible or
13:13 - something that we need to think about so
13:15 - just understand that we can use the
13:16 - timestamp almost like an id for the
13:18 - message
13:19 - and that's what we did previously and
13:21 - why we were updating the timestamp
13:23 - of our welcome message so that we know
13:25 - how we can reference it once again
13:27 - all right so let's go and make sure that
13:29 - this is still running and i didn't mess
13:30 - anything up
13:31 - it's not so i made a mistake but that's
13:33 - all right now let's go to slack and
13:35 - let's see if this works
13:36 - so let's type a bad word let's go no
13:39 - and let's see if we get a reply there
13:41 - you go bot replies let's have a look
13:43 - that is a bad word awesome and there we
13:46 - go
13:46 - now i'll quickly show you how we can
13:47 - delete that message so say instead of
13:49 - just replying to it you actually wanted
13:50 - to remove it
13:51 - all right so unfortunately guys after
13:53 - doing some digging i just realized we're
13:55 - not going to be able to delete
13:57 - other users messages right now with our
13:59 - current permission level and i'll talk
14:01 - about why this is an issue in a second
14:02 - we can only delete messages that we sent
14:05 - ourselves
14:06 - so here i'm trying to delete a message
14:08 - that's not ours and i was getting this
14:10 - pop-up
14:11 - saying that you know you can't delete
14:12 - this message that's the problem blah
14:13 - blah blah
14:14 - so i was looking and trying to figure
14:15 - out why that was happening and it turns
14:17 - out that with our current permission
14:19 - level of having a bot
14:20 - token we just simply can't delete other
14:23 - people's messages
14:24 - now it makes sense if you think about it
14:25 - because as a bot we really shouldn't be
14:28 - able to modify and delete users
14:30 - messages because in theory i could you
14:32 - know make a user
14:33 - sound like they're saying something that
14:35 - they didn't really say which could be
14:36 - quite dangerous if you think about it
14:38 - so what we would need to do to be able
14:40 - to do this
14:41 - is add what's known as a user token
14:43 - scope or add a user token
14:45 - right now we have a bot token and you
14:46 - can see these are all the things that
14:47 - our bot is able to do right
14:49 - and that works perfectly fine but one of
14:51 - the things our bot cannot do
14:53 - is delete messages unless we have this
14:55 - token so what i wanted to do is go
14:57 - inside of here
14:58 - and make a user token and then we were
14:59 - just going to replace our slack token
15:01 - that we set up previously
15:02 - with this user token and we just re-add
15:05 - all the stuff that we needed
15:06 - so in this case i've add channel history
15:08 - that's what i need to actually delete a
15:10 - message that's the scope but now just
15:12 - watch what happens when i try to add
15:13 - something in here so let's say
15:15 - channel and let's go you know admin
15:17 - conversations right so i'm going to try
15:19 - to add that says okay
15:20 - you know you change the scope reinstall
15:22 - your app so let's reinstall
15:23 - and this is what we get this app cannot
15:26 - be installed on this workspace
15:27 - app with this features are only
15:29 - available to enterprise level customers
15:31 - so i'm
15:31 - not an enterprise level customer and i
15:33 - don't plan on becoming one so
15:35 - unfortunately we can't use anything
15:37 - other than this plain
15:38 - admin scope inside of this user token
15:41 - now i know this is kind of confusing
15:43 - but here you can see that now we have
15:44 - two tokens the oauth access token and
15:47 - then the user oauth access token
15:49 - so what we were going to do is just
15:50 - replace this token here
15:52 - with this one in our code and then in
15:54 - theory we'd be able to delete it but
15:56 - again because i don't have the paid
15:58 - version of slack i guess i can't do that
16:00 - so that is the explanation on why that
16:02 - doesn't work you can reference the api
16:04 - documentation if you want to learn more
16:06 - but i think with that i'm just going to
16:07 - end the video here i can't delete that
16:08 - message so i showed you how we replied
16:10 - to one i showed you how we filtered out
16:11 - some stuff
16:12 - and then we modified something from the
16:13 - previous video in the next video what
16:16 - i'm going to be doing is showing us how
16:17 - we can actually schedule messages
16:19 - so that being said i hope you guys
16:20 - enjoyed if you did make sure to leave a
16:21 - like subscribe to the channel and i will
16:23 - see you in another youtube video