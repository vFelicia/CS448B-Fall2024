00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video i am
00:13 - going to be showing you how to create a
00:14 - sorting algorithm visualizer in python
00:17 - using pygame now i have the demo in
00:20 - front of me so let me show you exactly
00:21 - what the finished product will look like
00:23 - and then i'll talk about some
00:24 - prerequisites and we'll get into the
00:26 - code alright so this is the program you
00:28 - can see right now we're going to be
00:30 - looking at the bubble sort algorithm in
00:31 - ascending order if i hit space we can
00:34 - actually view the visualization now
00:36 - there is ways to speed up this
00:37 - visualization right now i just have it
00:39 - on kind of a default setting so you can
00:41 - actually view what's going on but of
00:43 - course if i want to i can reset so this
00:45 - would just give me a new starting list
00:47 - here to actually sort i can change the
00:50 - algorithm that i want to view so in this
00:51 - case i'll go to insertion sort and now
00:54 - we can see that you know obviously
00:55 - something different is happening and
00:56 - then if i want to i can change from
00:58 - ascending order to descending order so
01:01 - once this is done i'll be able to do
01:02 - that right now i can't because uh what
01:04 - do you call we're in the middle of a
01:06 - sort anyways if i stop this by resetting
01:08 - and now i change this to
01:10 - sorry ascending order or descending
01:11 - order whatever it is you can see that
01:13 - we'll go in the opposite direction well
01:15 - that's kind of how this program works
01:17 - now i'm only going to show you how to
01:19 - implement insertion sort and bubble sort
01:21 - but the way i've written this code is
01:22 - that it's going to be very easy to plug
01:24 - in pretty much any other sorting
01:26 - algorithm that you want you will have to
01:28 - do some manual changes and figure a few
01:30 - things out but if you wanted to
01:31 - visualize say heap sort or some other
01:33 - type of algorithm you just have to write
01:35 - that sorting algorithm make it so it
01:37 - draws the different steps and well this
01:39 - program would work for you all right so
01:41 - with that said let's talk about a few
01:43 - prerequisites before going through all
01:45 - of this code in this long tutorial and
01:47 - then of course i'll show you how to
01:48 - build this so the first thing i'll state
01:50 - is that this tutorial is not designed
01:52 - for beginners i'm going to assume you
01:54 - have some familiarity with python and
01:56 - with programming in general i'm going to
01:58 - be showing things like object-oriented
02:00 - programming functions i'm actually going
02:02 - to show you a generator as well although
02:04 - i'll explain that when we get to that
02:05 - part but if you are not familiar with
02:07 - python and you want to follow along with
02:09 - this then you should check out
02:11 - programmingexpert.io from the link in
02:12 - the description now programming expert
02:15 - is the best platform to learn how to
02:16 - code if you had gone through that
02:18 - content you would have learned literally
02:19 - everything you need to know to follow
02:21 - along with this tutorial and hundreds of
02:23 - others that are for intermediate
02:24 - programmers on my channel anyways check
02:27 - it out from the link in the description
02:28 - you can use the code tim for a discount
02:30 - on the platform other than that we're
02:32 - going to be using pie game here pie game
02:34 - will be for the visuals you don't have
02:36 - to know pi game i will explain to you
02:38 - the few features that we use as we go
02:40 - through the code so that said let me
02:42 - head over to sublime text and we can
02:44 - actually start implementing this project
02:46 - all right so i'm in sublime text this is
02:48 - the code editor i'm going to use for
02:50 - this video you can use any editor that
02:52 - you would like and i have python version
02:54 - 3.9 installed as well as pygame now you
02:57 - can use any version of python above 3.6
03:00 - now the first step here is going to be
03:02 - to install pygame if you don't already
03:04 - have it installed then you go to your
03:05 - command prompt or your terminal and
03:07 - simply type in pip install pi game if
03:10 - that doesn't work for you i will leave
03:11 - two videos on the screen that show you
03:13 - how to install pi game one for mac and
03:15 - one for windows once we have pi game
03:18 - installed though let's go into our
03:19 - python code file just notice i have mine
03:22 - called tutorial.pi and let's import
03:24 - pygame let's import the random module
03:27 - i'm going to use this to generate the
03:29 - starting list when we actually want to
03:31 - sort something right and then i'm just
03:32 - going to say pygame
03:34 - dot init
03:35 - all right so the first thing we can do
03:37 - here is we can set up our pi game window
03:39 - and a few kind of global constants that
03:42 - we want to have access to throughout the
03:43 - entirety of the program so what i could
03:46 - do here is to find maybe like 20 or 30
03:48 - global variables
03:50 - stuff like different colors stuff like
03:52 - the window size width height all of that
03:54 - but that means that when i'm accessing
03:56 - these values in functions i'm going to
03:58 - be accessing a global value and i don't
04:00 - like using global variables because that
04:02 - means any of the functions that i write
04:04 - here i can't port them over to another
04:06 - program if they're using something from
04:07 - the global scope so instead what i'm
04:10 - going to do is set up a class i'm going
04:12 - to call this class game information or i
04:14 - guess not game information i guess it
04:15 - would be something like drawing
04:17 - information and i'm going to put all of
04:19 - the stuff in here in this class that i
04:21 - want to have as kind of
04:23 - global values to be accessed you'll see
04:26 - what i mean in a second but for now
04:27 - let's create a class i'm going to call
04:29 - this
04:30 - what do we want to call this draw
04:32 - and then information like that now the
04:35 - idea here is we'll instantiate this
04:37 - class at the beginning of our program
04:39 - and pass to its stuff like the width the
04:41 - height the starting list it will then
04:43 - store all of those values as well as any
04:45 - additional values that we need and then
04:47 - we can just pass this instance to all of
04:49 - the different functions that need it and
04:51 - it can access all of this information so
04:53 - the first thing i'm going to do here is
04:54 - just to find a bunch of colors so i'm
04:56 - going to say black is equal to 0 0 0 i'm
04:58 - going to say white
05:00 - is equal to 255 255 255. these are in
05:04 - rgb so red green blue obviously the
05:07 - maximum value is 255. we're also going
05:09 - to want green so i'm going to say green
05:12 - is equal to zero 255 and then zero we'll
05:15 - want red this is going to be equal to
05:17 - zero
05:18 - or sorry 255 zero and zero i want a gray
05:23 - this will be equal to 128
05:27 - 128 and 128
05:30 - and then i want my background underscore
05:33 - color so let's do this if i could get
05:36 - the autocomplete background color to be
05:39 - equal to white okay so notice i'm
05:41 - defining all of these kind of global
05:43 - values as class attributes that just
05:46 - means they're defined directly in the
05:47 - class body as opposed to a constructor
05:50 - okay so those are all i need for right
05:51 - now i will define a few more in a second
05:54 - and by the way if you see me looking
05:55 - over here to kind of the right of my
05:57 - screen that's because i'm referencing
05:58 - the code that i already wrote obviously
06:00 - i don't have all of this memorized okay
06:02 - so now that we have all of our colors
06:04 - defined these are what we're going to
06:05 - use for our different rectangles and the
06:07 - bars and the text and all of that i want
06:09 - to define an initialization and this
06:11 - initialization here is going to take in
06:13 - a width
06:14 - a height
06:16 - and then a list which will be lst now
06:18 - this list is going to be the starting
06:20 - list that we actually want to sort and
06:21 - we're going to store that inside of this
06:24 - instance
06:25 - so i'm going to say self.width
06:27 - is equal to width i'm going to say
06:29 - self.height
06:31 - is equal to height and then i will
06:34 - actually set up a few other attributes
06:36 - in here that we're going to need so the
06:37 - first additional attribute i'm going to
06:39 - add here is going to be the window so
06:41 - whenever working with pi game we need to
06:42 - set up a screen or a window that we're
06:44 - going to draw everything on now we need
06:46 - to access that pretty much everywhere in
06:48 - the program so i'm going to put that as
06:50 - an attribute on the class so that it's
06:52 - very easy to access so i'm going to say
06:54 - self.window is equal to pygame dot
06:57 - display
06:58 - dot set
07:00 - underscore mode and then i'm going to
07:01 - pass as a tuple here
07:03 - the width and the height so whenever you
07:06 - create a window in pi game this is how
07:07 - you do it say
07:09 - pygame.display.set underscore mode pass
07:11 - the width and the height as a tuple and
07:14 - we will set the width and the height in
07:15 - a second when we actually initialize
07:17 - this instance
07:18 - okay then i want to set a caption for
07:20 - this window so i'm going to say
07:23 - pygame
07:25 - dot display
07:27 - dot set underscore caption not a capital
07:30 - but caption like that and then i can say
07:33 - sorting
07:35 - algorithm and then visualization or
07:38 - visualizer whatever you want to call it
07:39 - but this will be kind of the name of the
07:41 - window and then after that i'm going to
07:44 - call a new method that i'm going to
07:45 - define called set
07:47 - underscore list and pass this lst
07:50 - so now i'm going to go and make a method
07:52 - i'm going to say define this is going to
07:53 - be called set underscore list
07:56 - this is going to take in self if i could
07:59 - type properly as well as lst and what
08:02 - we're going to do here is set a bunch of
08:03 - attributes that we need related to the
08:05 - list so now i want to talk about how
08:07 - we're actually going to create kind of
08:09 - the visualization so you saw that i had
08:11 - a bunch of bars on the screen in fact
08:13 - let me just run the other program here
08:14 - because this will give us a good
08:15 - visualization okay so you can see i have
08:17 - a bunch of different bars here right now
08:19 - first of all i have these bars in three
08:21 - different colors just so that they're
08:22 - easy to see i kind of have a dark gray
08:24 - lighter gray and then the lightest gray
08:26 - right so i have three different colors
08:28 - now all of these bars have a specific
08:30 - width and a specific height however the
08:33 - width of these bars is going to depend
08:34 - on how many of them i have for example
08:37 - if i go to my other program here just
08:38 - bear with me for one second and i change
08:41 - the number of values that i have to say
08:43 - 25 as opposed to 100 because previously
08:46 - i had 100 notice how we're going to have
08:48 - bars that are a little bit wider right
08:50 - so we need our bars to adjust based on
08:53 - the number of values in our list and
08:55 - then same thing with the height of our
08:56 - bars the height of our bars is going to
08:58 - be determined by the range of values in
09:01 - our list so if we have a range of say 1
09:04 - to 100 then each one pixel or each value
09:08 - one is going to be represented by four
09:10 - or five pixels right whereas if we have
09:11 - a range of one to a thousand then maybe
09:14 - the value one is only represented by 0.5
09:16 - pixels hopefully that kind of makes
09:18 - sense but the idea is we want this to be
09:20 - dynamic so we need to kind of calculate
09:22 - the width of all of these bars and what
09:25 - the height of one individual kind of
09:27 - unit one number will be based on the
09:30 - range of values we have within our bars
09:33 - okay hopefully that makes a little bit
09:34 - of sense but that's what i'm going to
09:36 - attempt to do now so the first thing i'm
09:38 - going to do in here is just say self.lst
09:40 - is equal to lst because i just want to
09:42 - store this list internally i'm going to
09:45 - say self. and this is going to be max
09:47 - underscore value is equal to the maximum
09:50 - of the list this is going to give me the
09:52 - maximum number in there and i'll say
09:53 - self.min underscore value is equal to
09:56 - the min in the list and just because i
09:59 - think it makes sense to do this we're
10:00 - going to put the min before the max
10:02 - okay great so now that we have this the
10:05 - first thing i want to do is calculate
10:08 - the width of every one of our bars now
10:10 - the width of these bars will be
10:11 - determined by how many of them we have
10:14 - and the width of our screen and in fact
10:16 - if i run this one more time you'll see
10:18 - here that we actually have kind of a
10:20 - padding on the left and the right hand
10:22 - side so we want to include that in the
10:24 - calculation as well if we want to have
10:26 - say 100 pixels from the left or right
10:28 - hand side so that the bars are kind of
10:30 - in the center and they don't look like
10:31 - they're kind of touching the edge of the
10:33 - screen hopefully you see what i mean but
10:34 - essentially we have a little bit of
10:36 - padding and that's kind of what i'm
10:37 - talking about you can see the padding is
10:38 - maintained when i reset this
10:40 - so let's now implement one more variable
10:43 - here i'm going to call this the i've got
10:46 - to go look at my cheat sheet to make
10:47 - sure i'll mess this up i'm going to call
10:49 - this the side pad
10:51 - and the side pad is going to be equal to
10:53 - 100 pixels now what this is going to
10:55 - tell me is i want 100 pixels in total as
10:57 - the padding from the left and the right
10:59 - hand side so 50 pixels on the left and
11:01 - fix 50 pixels on the right
11:04 - okay
11:05 - so what i'm going to do here is say self
11:06 - dot and then this is going to be pixel
11:08 - underscore width
11:10 - and really this should be like block
11:12 - width or something but for now i'll just
11:13 - go with pixel width
11:15 - kind of a weird name but that's what i
11:17 - did in my other sheet so just so i don't
11:18 - mess myself up we'll go with that and
11:20 - what i'm going to do is i'm going to
11:21 - take the self.width
11:24 - and i am going to divide that or sorry
11:27 - first of all i'm going to subtract that
11:28 - from my self dot side pad
11:32 - okay so let's go self.sidepad
11:35 - and then i'm going to divide that by the
11:38 - length of my list so i need to put
11:39 - parentheses here
11:41 - but let's talk about why we're doing
11:42 - this so we have the width of our screen
11:44 - which is say 500 pixels or something
11:46 - like that and then we have a side
11:48 - padding and in this case i've made it
11:50 - 100. now this is the total amount of
11:51 - padding including the left and the right
11:53 - hand side so i want to determine how
11:55 - wide my pixels should be based on how
11:57 - much area i'm going to have to put them
11:59 - in and the length of the number of kind
12:02 - of blocks that i'm going to need and in
12:03 - fact you know what let's just call this
12:04 - block width because pixel width is
12:06 - really throwing me off that's a very
12:08 - poor name okay so we have block width so
12:10 - i'm taking the self.width dividing it by
12:12 - the self.sidepad
12:14 - and that's going to tell me the total
12:16 - area i actually have to represent each
12:18 - of my blocks in so then i'm going to
12:20 - take whatever my total kind of drawable
12:22 - area is and divided by the length of my
12:24 - list which is the number of blocks that
12:25 - i have
12:26 - now i'm just going to round this value
12:28 - because we can't draw like fractional
12:30 - amounts so i just want to round that to
12:32 - whatever the nearest decimal is okay
12:34 - that's great for the block width now
12:37 - for the block height this is going to
12:39 - represent the height of one kind of unit
12:42 - of a block this is really weird to
12:44 - explain but let's say we have the number
12:46 - 100 essentially i want to multiply this
12:48 - by the block height to determine how
12:51 - high a hundred should be right how large
12:54 - should that be on the screen and this is
12:56 - going to depend on the largest number in
12:58 - my list and the smallest number on my
13:00 - list because again if say the largest
13:02 - number is 10 000 then 100 is going to be
13:04 - quite small but if the largest number is
13:06 - 100 then this is going to be the maximum
13:08 - possible height hopefully that makes
13:10 - sense but that's what this next
13:11 - calculation is going to do which is a
13:13 - little bit complicated so i'm going to
13:14 - say the self.height then this is going
13:17 - to be minus the self.top underscore pad
13:20 - and the top pad is going to be the
13:22 - padding that we're going to have to
13:24 - allow us to draw like the controls and
13:26 - some of the text at the top of the
13:27 - screen so i'm going to implement my top
13:29 - pad now i'm going to say top pad is
13:31 - equal to and for now we'll go with 150
13:33 - pixels we can always modify this later
13:35 - on
13:36 - okay so we're going to have the
13:37 - self.height minus the self.top pad this
13:40 - is going to tell us again the total
13:41 - drawable area that we have and then what
13:44 - we're going to do
13:45 - is divide this
13:46 - by the self.max value
13:49 - minus the self.min value and we're going
13:51 - to round all of this
13:53 - so let's round all of this in
13:54 - parentheses
13:56 - so the reason i'm doing this is the
13:58 - maximum value minus the minimum value is
14:00 - going to tell me the number of values in
14:02 - my range so if the minimum value is 1
14:06 - and the maximum value is 100 then the
14:08 - range of numbers i have is 99 right i
14:10 - have 99 distinct numbers whereas if we
14:12 - have something like a thousand and maybe
14:14 - negative 10 thousand i'm going to have a
14:15 - lot much larger range and so the height
14:18 - of kind of one unit is going to be a lot
14:20 - smaller
14:21 - again hopefully that makes sense but
14:22 - that's kind of what this calculation is
14:23 - doing okay now the last thing i'm going
14:26 - to do is say that the self.start
14:28 - underscore x so this is where i'm going
14:29 - to start drawing my blocks for the x
14:32 - coordinate is going to be equal to and
14:34 - then this will be
14:36 - the self dot side pad integer divided by
14:40 - 2 just to make sure i get a whole number
14:42 - now just to quickly explain the
14:43 - coordinate system system of pi game in
14:45 - case you're unfamiliar let me load this
14:47 - screen back up the top left hand corner
14:49 - of the screen is zero zero so as you go
14:51 - down the y increases and as you go to
14:53 - the right the x increases so when i say
14:55 - something like start at self dot side
14:58 - pad over two that's telling me to start
14:59 - kind of right here where this block is
15:01 - starting right hopefully that makes
15:02 - sense
15:03 - okay so there we go we are almost
15:04 - finished the draw information class
15:07 - there's a few other things we need to
15:08 - add but for now i think this is fine and
15:11 - i'm just double checking to make sure we
15:12 - didn't mess anything up looks good so
15:14 - far
15:15 - okay so now that we have this class the
15:17 - next thing i want to do is write a
15:19 - function that's going to generate the
15:20 - starting list for us because we need a
15:22 - starting list to actually sort
15:24 - and we'll be able to determine you know
15:26 - how many elements we want in the list
15:27 - and what the range of the elements is
15:29 - so i'm going to create a function
15:31 - i'm going to call this generate
15:33 - starting underscore list
15:36 - okay and this will take in n
15:39 - and then min
15:41 - and max and i'll just make these
15:43 - val so they don't shadow the min and max
15:45 - function
15:46 - okay so n will be the number of elements
15:48 - that we want in our starting list min
15:50 - will be the minimum possible value and
15:52 - max will be the maximum possible value
15:54 - and we'll just randomly generate a list
15:56 - here so i'm just going to say lst is
15:58 - equal to that and i'll say 4 underscore
16:01 - in range n so just do this n times
16:04 - essentially then i'm going to generate a
16:06 - random value so i'm going to say value
16:08 - is equal to random.randint
16:10 - and i'm going to put this between the
16:12 - min value and the max value and this
16:15 - will give me a number within this range
16:17 - inclusively meaning it will include both
16:19 - the minimum and maximum value as
16:22 - possible values to generate okay then
16:24 - i'm going to say lst
16:26 - dot append
16:27 - value like that and if i wanted to i
16:29 - could shuffle this list but this will
16:30 - already give me a random list of values
16:32 - so what i can do here
16:34 - is just return lst great now we have our
16:38 - starting list generate now that we've
16:40 - done that i actually want to put
16:41 - something on the screen i want to see my
16:43 - window so i'm going to implement a
16:45 - function which is going to be kind of
16:46 - our main driver code which i'll call me
16:49 - so i'm going to say define main
16:51 - and then inside of here what we're going
16:52 - to do is we're actually going to render
16:54 - the screen we're going to set up our
16:56 - main event loop which is going to allow
16:58 - us to press buttons click the x button
17:00 - all of that kind of stuff and then we'll
17:01 - start drawing our list onto the screen
17:03 - that will be the next step
17:05 - so for now what i'm going to do is say
17:07 - that run
17:08 - is equal to true this is just going to
17:09 - be a variable for my while loop i'm
17:11 - going to say i'll run like that and
17:13 - inside of here i'm going to set up my pi
17:15 - game event loop so whenever you
17:17 - implement something in pi game you need
17:18 - a loop constantly running in the
17:20 - background because if you don't have
17:22 - that then you'll just say draw something
17:24 - on the screen and the program will
17:25 - immediately end so i need a loop that's
17:27 - going to be handling all of the events
17:29 - that are occurring like me attempting to
17:31 - start sorting right or changing from
17:34 - descending order to ascending order or
17:36 - trying to exit the program whatever we
17:37 - need a loop to handle that so this is
17:39 - going to be my loop right here and one
17:41 - thing that we can do inside of our loop
17:43 - is we can put something called a clock
17:44 - which will regulate how quickly this
17:46 - loop can run so i'm going to say clock
17:48 - is equal to pi game dot time
17:51 - dot and then with a capital c like that
17:54 - clock
17:55 - so i'll explain the clock in a second
17:56 - but let's go clock.tick
17:59 - i'm going to put 60 60 would be our fps
18:01 - so this is the maximum number of times
18:03 - that this loop can run per second right
18:05 - now i'm going to make it 60. you could
18:07 - of course increase this to whatever you
18:09 - want but we'll just go with a hard code
18:10 - of 60 for right now and now i'm going to
18:12 - do my kind of handling of events so i'm
18:15 - going to say for event
18:16 - in
18:17 - and then pygame.event.get
18:19 - this is going to return to us a list of
18:21 - all of the events that have occurred
18:23 - since the last loop so since last time
18:25 - this was called it'll give it give it to
18:27 - us in the event variable and then we can
18:29 - check the event variable for specific
18:31 - events so i can do something like if
18:34 - event
18:35 - is equal
18:36 - to
18:37 - pygame.quit with all capitals make sure
18:39 - it's all capitals then i can say run
18:42 - is equal to false and then at the end of
18:44 - this while loop here i can say pi game
18:47 - dot quit so as soon as we break out of
18:49 - this while loop we will then end the pi
18:51 - game program
18:52 - perfect now one thing i want to do in
18:54 - here though is i want to actually draw
18:56 - the window and show that on the screen
18:58 - so all i'm going to do is say pygame
19:01 - dot display
19:03 - dot update and when you do this it will
19:05 - update the display now right now we
19:06 - haven't drawn anything onto this display
19:08 - so we're not going to see that when i
19:10 - call update it will just render the
19:11 - display so we'll actually see it and
19:14 - then we can continue from there okay uh
19:17 - last thing i want to do here is just say
19:18 - if underscore the score name underscore
19:20 - underscore equals underscoring score
19:22 - main underscore underscore then i want
19:25 - to call the main function now this is
19:27 - just going to make sure that we actually
19:28 - are running this module by clicking the
19:30 - run button or running this module
19:32 - directly before we call the main
19:34 - function if we were to import this
19:36 - module this line would not run but if we
19:38 - actually run this module directly then
19:40 - we run the main function
19:42 - okay and just to go over something that
19:43 - i don't think i mentioned this right
19:45 - here so if event equals pi game dot quit
19:48 - essentially that is hitting the red x in
19:50 - the top right hand corner so you need to
19:52 - manually handle that if you click the x
19:54 - and you don't have this it's not going
19:55 - to do anything so you always want to
19:57 - implement this first to make sure you
19:59 - can actually quit the game
20:00 - okay
20:01 - so there we go we've written a good
20:02 - amount of code already what i'm going to
20:04 - do now is run this code
20:06 - and display mode not set
20:09 - oh okay so this is an interesting error
20:11 - to run into so i'm getting a problem
20:12 - here it's saying display mode not set
20:15 - because i've not yet instantiated my
20:18 - window right remember i told you we need
20:19 - a window or a screen to actually draw on
20:22 - so before i can update the window i need
20:24 - to create it and to create it i'm going
20:25 - to have to instantiate this draw
20:27 - information class so i'm going to go to
20:29 - the top here
20:31 - and i'm going to say draw underscore
20:33 - info is equal to draw information and
20:36 - then what do i need to pass here well i
20:38 - need to pass a width a height and an lst
20:41 - so let's decide on our width and height
20:44 - for now i'm going to go with 800
20:46 - 600 if this is too big for your screen
20:49 - then make it a little bit smaller but
20:50 - this should be a good size to start with
20:52 - and then i need to pass a list now for
20:54 - the list i'm just going to say lst is
20:56 - equal to create starting list and i'm
20:58 - going to pick my values here now be
21:00 - helpful to put them in a variable so i
21:02 - can change them very easily later so i'm
21:04 - going to say n is equal to 50.
21:07 - i'm going to say
21:08 - min val is equal to let's go with zero
21:12 - and let's go max val is equal to 100
21:15 - and then we're going to pass n
21:17 - min val
21:18 - and maxwell
21:20 - now one thing to notice here is i'm
21:21 - doing everything very dynamically i'm
21:23 - using lots of variables and i'm making
21:25 - sure that if i change one or two values
21:27 - the entire program will update to
21:29 - represent that right that's why i'm
21:31 - putting everything in variables just so
21:32 - it's really easy for me to see where i
21:34 - can change something and so that if i
21:36 - ever have to reuse these variables which
21:38 - we will actually in a second i don't
21:39 - have to hard code the same thing
21:41 - multiple
21:42 - times okay now inside of draw info i'm
21:45 - going to pass lst as the last argument
21:48 - and now we should actually be good to
21:49 - run this and hopefully see a screen
21:51 - showing up so let me run this
21:53 - and create starting list is not defined
21:56 - did i
21:57 - not define that oh sorry generate
21:59 - starting list is what that's called so
22:00 - let's change this to
22:03 - generate i mean generate create pretty
22:05 - much the same thing
22:07 - let's run and there we go okay so we get
22:09 - a window it says sorting algorithm
22:11 - visualization and obviously nothing's
22:12 - showing up because we haven't drawn
22:14 - anything so now it is time to draw
22:16 - something and actually it looks like the
22:17 - x button is not working
22:20 - so let me tell you why it's not working
22:22 - because i see the error so to close this
22:23 - i'm going to have to manually close it i
22:26 - think i can do control c or control alt
22:28 - c what was my
22:30 - button to break this i got to figure
22:32 - this out tools
22:34 - cancel build control shift c okay that's
22:36 - how i cancel my build in subline
22:38 - anyways
22:39 - the reason this is happening is because
22:41 - i forgot to add my type here so you have
22:43 - to say ifevent.type is equal to pi
22:45 - game.quit not just event event has the
22:48 - type property on it so you have to
22:49 - access that first okay let's just try
22:51 - this one more time to make sure i didn't
22:53 - mess anything up
22:54 - let's click x
22:55 - closes the program awesome we can now
22:58 - actually draw the list
22:59 - okay so to draw the list i want to write
23:02 - a function in fact i want to write two
23:04 - functions one function that's
23:05 - responsible for just drawing the general
23:07 - screen and the second function that's
23:09 - responsible for actually drawing the
23:11 - list right the thing that we're going to
23:13 - be sort so i'm going to do a function
23:15 - doesn't really matter where i put it and
23:17 - i'm just going to call this draw and
23:18 - what this is going to take in is draw
23:20 - info okay so we're going to take in draw
23:23 - info and then what we're going to do is
23:24 - fill the screen with the background
23:26 - color of our screen so i'll explain this
23:29 - in a second and then after that we'll
23:30 - update the display and then we will draw
23:32 - the list so for now i'm going to say
23:34 - draw info dot window so i'm accessing my
23:38 - window here and then i'm going to say
23:40 - dot fill and what dot fill takes is a
23:43 - color and it will fill the entire screen
23:45 - with this color now in pi game the way
23:47 - that drawing works is you draw a bunch
23:49 - of stuff onto the screen and then as
23:50 - soon as you want to apply that drawing
23:52 - and actually see it you update the
23:54 - display so what you do first
23:56 - usually at least this is what i do i
23:58 - fill the entire screen with the color to
24:00 - kind of get rid of any of the previous
24:02 - drawing that would have occurred so it's
24:04 - overriding everything on the screen then
24:06 - i draw a bunch of stuff
24:07 - then i update it and then the next time
24:09 - i draw i clear everything redraw it
24:12 - again and continue this is not the most
24:14 - efficient way to do things but it makes
24:16 - it so that if you kind of were drawing a
24:18 - bunch of stuff you're not seeing
24:20 - overlays or shadows or multiple things
24:22 - on the screen when you shouldn't see
24:23 - that you're just redrawing the entire
24:25 - canvas every single frame
24:27 - hopefully that makes a bit of sense
24:29 - we'll see this in a second but for now
24:30 - i'm going to say that i want to do this
24:32 - with the draw info dot background color
24:35 - right because i put background color as
24:37 - a class attribute right here it's equal
24:39 - to white
24:40 - white's this
24:41 - so now i'm going to fill the screen with
24:43 - whatever the background color is and
24:44 - that way if i want to change the
24:45 - background color i just go here change
24:47 - one attribute and we're done okay now
24:50 - that i've done that i want to update
24:51 - directly in here so i'm going to say
24:53 - pygame.display
24:55 - dot update okay so let's just call the
24:58 - draw function and make sure that works
24:59 - and then we'll draw the list so i'm
25:01 - going to go to main and now right under
25:03 - my clock.tick i'm just going to say draw
25:06 - and i'll pass draw info which is an
25:08 - instance of the draw information class
25:11 - great
25:12 - okay now what i can do is run the code
25:15 - and let's see if it's white there we go
25:17 - we now have a white background awesome
25:19 - we can now close
25:20 - okay so now that we've done that we want
25:22 - to draw the list now i'm going to put
25:24 - drawing the list in a separate function
25:26 - because we're going to do some more
25:27 - drawing stuff in here but drawing the
25:29 - list is kind of a separate thing right
25:31 - so i'm going to say define draw list
25:34 - like that
25:35 - i'm going to take in draw info
25:38 - and
25:39 - for now i think that's actually all we
25:40 - need now this is a little bit
25:42 - complicated here drawing the list i will
25:45 - explain obviously as i go through but we
25:47 - have to look at every single element in
25:49 - our list we have to determine the height
25:51 - of that element and the x coordinate of
25:53 - that element and then draw a rectangle
25:55 - representing it and we also want to make
25:57 - sure that we're drawing all of these
25:59 - rectangles in a slightly different color
26:01 - so a different gray right so we can
26:03 - actually see them because if we don't
26:04 - draw them in a different color it's just
26:05 - going to be all kind of squished
26:06 - together so now what i want to do is add
26:09 - the three different colors for my what
26:12 - do you call it blocks rectangles
26:14 - whatever
26:15 - so let's go to draw information
26:17 - and let's create something called
26:19 - gradient
26:20 - i think that's how you spell gradient
26:22 - i'm going to do gradients now this is
26:24 - just going to store three colors which
26:27 - are going to be kind of my gray
26:28 - gradients now i don't think they're
26:29 - really gradients i could probably call
26:31 - them grays but i went with gradients so
26:33 - we're going to keep them so for now the
26:35 - first one will just be gray and then the
26:37 - next one is going to be one
26:40 - and let me look at my cheat sheet here
26:42 - okay 160 160 and 160
26:46 - and then the last one will be
26:49 - 192 192
26:51 - 192. now i also could put these in
26:53 - variables and call them like dark gray
26:55 - light gray medium gray whatever for now
26:57 - we'll just do this
26:59 - in fact it's probably gonna make sense
27:00 - just get rid of gray actually
27:02 - and just manually hard coat it in
27:05 - because there's not really a point to me
27:06 - having one of those as a variable but
27:08 - not the others
27:09 - okay so there we go these are our gray
27:11 - gradients and now i can use these when
27:13 - i'm actually drawing my rectangles okay
27:16 - so now let's go inside of draw list and
27:19 - what i'm going to do is iterate over my
27:21 - list so i'm just going to say that lst
27:24 - is equal to
27:25 - drawinfo.lst just so i don't have to
27:27 - keep writing out drawinfo.lsd
27:29 - i'm going to say for i val
27:31 - in enumerate lst now enumerate's going
27:34 - to give me the index as well as the
27:36 - value of every single element in my list
27:38 - so this will be good to use when looping
27:40 - through
27:41 - now what i need to do is calculate the x
27:42 - coordinate and the y coordinate for the
27:45 - top left hand corner of this rectangle
27:47 - because when we draw a rectangle in
27:49 - python we draw it from the top left hand
27:51 - corner then we draw it down and to the
27:53 - right depending on the height and the
27:55 - width okay we also need to calculate the
27:57 - color because we're going to have a
27:58 - different gray color depending on what
28:00 - rectangle we drop so i'm going to say x
28:02 - is equal to and then this is going to be
28:05 - draw info dot start underscore x this is
28:09 - the starting x position plus and then
28:11 - this is going to be i multiplied by and
28:14 - then the draw info
28:17 - dot and this is going to be the block
28:18 - width
28:19 - i think that's actually good for x that
28:22 - will tell us where we want to draw
28:24 - our block and if i is 0 so it's the very
28:27 - first block then that means we're going
28:28 - to draw it exactly at the starting x
28:30 - position which is what we want
28:32 - perfect now we're going to do y now y is
28:35 - going to be at
28:37 - this is actually going to be
28:39 - the value
28:41 - multiplied by the draw info dot and then
28:44 - this is going to be the block height
28:47 - however i need to offset this by a
28:49 - certain amount so actually let me load
28:51 - up the program again and just talk about
28:53 - this because it's a bit more complicated
28:54 - that i remember so what we need to do
28:57 - here is we need to draw the taller
28:59 - rectangles higher on the screen right so
29:02 - you can see this guy's obviously higher
29:03 - than this guy now we start drawing from
29:06 - the top left-hand corner which means i
29:08 - need to draw from a higher y-coordinate
29:10 - meaning like a lower y coordinate value
29:12 - because y 0 is up here so y say 200 is
29:16 - where my mouse is right so i need to
29:18 - kind of do the reverse of what is
29:20 - intuitive here i'm going to figure out
29:21 - what the height of this rectangle needs
29:24 - to be and then i'm going to subtract
29:25 - that from the height of this screen and
29:27 - that will tell me the starting
29:29 - coordinate so then i draw it downwards
29:31 - starting from there
29:32 - hopefully that makes a bit of sense but
29:34 - this is going to be a bit different than
29:35 - what i wrote out here in fact it's going
29:36 - to be completely different so what i'm
29:38 - going to do here is write draw
29:40 - underscore info dot height so the height
29:43 - of the screen and then i'm going to
29:44 - subtract that from and then this is
29:47 - going to be a little bit different here
29:48 - i'm going to take this outside of the
29:50 - parentheses and i'm going to say this is
29:52 - going to be the value
29:53 - minus and then this is going to be the
29:55 - draw info dot minimum value
29:58 - so the reason for this is that i can't
30:00 - just use the value itself to actually
30:03 - determine the height of the rectangle
30:06 - the reason i can't do that is because we
30:07 - have a range of values we could
30:09 - potentially have in fact we could have a
30:11 - range of like negative 100 to 0. if
30:13 - that's the range that we have and i just
30:15 - multiply my value by my draw info.block
30:17 - height i'm going to get a negative
30:19 - amount and it's going to give me like a
30:20 - ridiculously high size for the smallest
30:23 - value so we need to actually take
30:25 - whatever our value is and subtract it
30:27 - from the minimum value to determine how
30:30 - much larger it is than the minimum
30:32 - because the minimum is going to be
30:34 - represented as a height of 0 or as a
30:36 - height of 1 i forget exactly how it's
30:38 - going to be but the idea is we'll
30:39 - subtract the minimum value that tells us
30:42 - how much larger we are than the minimum
30:44 - and then we multiply that by the block
30:46 - height and that will give us the correct
30:48 - height hopefully that makes sense that's
30:50 - really the best explanation i can give
30:51 - you
30:52 - next what we're going to do we're just
30:54 - going to look at my code over here is
30:57 - we're going to determine the color that
30:58 - we want to draw with so i'm going to say
31:00 - the color is equal to and this is going
31:02 - to be the draw info dot gradients and
31:05 - then this is going to be at i mod 3.
31:08 - now we have three elements inside of
31:10 - gradients which means we have the
31:11 - indices 0 1 and 2. so when i take the
31:15 - division or the remainder after division
31:17 - of three this is always going to give me
31:19 - zero one or two and all of the elements
31:21 - beside each other will have a different
31:23 - mod three right so like element at
31:25 - position one two and three are gonna
31:27 - have different values for i mod three
31:29 - and so that's gonna allow me to have all
31:31 - three of the elements that are beside
31:33 - each other having a different color
31:35 - hopefully that makes a bit of sense but
31:36 - essentially every three elements we're
31:38 - going to reset and we'll go back to the
31:39 - original gray but for those three
31:41 - elements we'll have the light gray
31:42 - medium gray and then the dark gray then
31:44 - we'll reset and continue that's what
31:46 - imod 3 will do
31:47 - now that we've done that we can actually
31:49 - draw this onto the screen so i'm going
31:51 - to say
31:53 - pygame.draw.rect this is how you draw a
31:54 - rectangle i'm going to pass the
31:57 - position or sorry
31:59 - screen where i want to draw this i'm
32:00 - going to say draw info
32:02 - dot window
32:03 - i'm going to pass the color which is
32:04 - going to be this
32:06 - and then i'm going to pass my rectangle
32:07 - which is going to be x y
32:09 - this is then going to be the block width
32:12 - so draw info dot block width
32:15 - and then draw info.block height is
32:18 - correct
32:19 - but
32:20 - we're going to need to determine
32:22 - how high this block actually is so that
32:24 - we know how far down to draw right
32:26 - because we figured out the top left hand
32:28 - corner position but now we need to
32:30 - figure out how much downwards we want to
32:32 - draw now we could really just do this
32:35 - we could just do height and in fact that
32:37 - will work because if anything will draw
32:39 - off the screen but we will always fill
32:41 - down to the bottom of the screen so
32:43 - hopefully that makes a bit of sense like
32:44 - if the height of our block is 300 then
32:47 - we can just draw a height of 500 because
32:49 - if we draw 200 over it just won't show
32:51 - up because it's going to be beneath the
32:52 - screen so i'm just going to be lazy and
32:54 - go with that for now you could calculate
32:55 - the precise height using the value but i
32:58 - don't want to do that so i'm just going
32:59 - to do this okay so i think that's going
33:02 - to be good
33:03 - for now yeah that should actually be
33:04 - good we can just draw the list like that
33:07 - so now what i'm going to do is inside of
33:08 - the draw function
33:10 - after i clear the screen i'm going to
33:12 - draw the list so let's go draw list
33:15 - let's pass draw info like that and then
33:18 - we'll update the display here and
33:20 - fingers crossed we should be seeing the
33:21 - list showing up on the screen now if i
33:23 - run the code okay so let's go ahead and
33:25 - do this
33:27 - and let's see what we get and it says
33:28 - block width is not defined
33:31 - okay so let's see where i did block
33:33 - width
33:34 - oops i need to do draw
33:36 - underscore info dot block width when i
33:39 - am drawing my rectangle okay so make
33:41 - that fix and hopefully we should be good
33:43 - now
33:44 - let's try this and there we go we can
33:46 - see we have all of our rectangles
33:48 - showing up and let me just run this a
33:50 - few times and show you that it's going
33:51 - to work for different values right
33:52 - because i'm randomly generating the
33:54 - values and we initialize this so we
33:56 - should be getting slightly different
33:57 - sizes for our stacks or blocks or
33:59 - whatever you want to call them
34:00 - okay perfect that is looking good to me
34:03 - now what i want to do is just implement
34:06 - the ability to reset the stack size just
34:08 - so that we can go through a bunch of
34:09 - different options and check to make sure
34:11 - that's working
34:12 - so i am going to now
34:15 - implement a key press for the r key on
34:18 - your keyboard so when you click that it
34:21 - will then reset the uh the list okay
34:24 - so i'm going to say if
34:25 - and then this will be
34:27 - pygame
34:29 - dot event
34:31 - is equal to pygame dot
34:34 - key down
34:35 - and i'm actually going to say if this is
34:36 - not equal to key down
34:38 - then continue so if we're not pressing
34:41 - any key down we're going to continue it
34:42 - just means we're going to go to the next
34:44 - event in the for loop
34:45 - otherwise though so if we do get past
34:47 - this it means we did have a key down i'm
34:49 - going to say if
34:52 - pygame.event.key is equal to
34:55 - pygame.capital k underscore r uh you
34:58 - kind of have to look them up for all of
34:59 - the different keys but this will give
35:01 - you r if you wanted a you'd be like k
35:03 - underscore a if you wanted space it'd be
35:05 - k underscore space with all capitals on
35:07 - the space for all the letters it's
35:09 - usually just the lowercase letter so in
35:10 - this case we'll just go with r
35:12 - and now what i will do is i'm just going
35:14 - to reset the list so i'm going to say
35:16 - that lst is equal to this
35:19 - so we'll say lst is equal to generate
35:20 - starting list n min val and max val
35:23 - notice why i put these variables here
35:24 - now so that we can reuse them again and
35:27 - then i need to set the list on my draw
35:29 - info class so i'm going to say draw info
35:32 - dot set list
35:33 - and then pass lst because remember draw
35:36 - info is storing this list so we need to
35:38 - reset it on the draw info class
35:40 - otherwise it's not going to update when
35:41 - we're actually drawing because look all
35:43 - we're passing is draw info right
35:45 - so now when i press r it should actually
35:47 - reset this so let's run the code and
35:50 - let's see if that's the case
35:51 - okay so when i click r
35:53 - it doesn't seem to be working so let me
35:55 - see what i messed up here and then i'll
35:57 - be right back all right so for some
35:59 - reason i decided to put a preface of pie
36:02 - game before my events
36:04 - we don't need to do that we do need them
36:05 - here before key down and k underscore r
36:08 - but i don't need pie game dot event
36:09 - because i just want to access the event
36:10 - variable so that's the issue i was
36:12 - having so i'm gonna remove those and
36:13 - hopefully now this should be good
36:15 - okay so let me try
36:17 - and okay it still doesn't seem to be
36:19 - working so let me have a look and i'll
36:21 - be right back all right another silly
36:23 - mistake here i really should just look
36:24 - at my code because i'm trying to do this
36:26 - off the top of my head but i need to add
36:27 - a dot type here so i was saying if event
36:29 - is equal to pi game dot key down i can't
36:31 - do that i need to do dot type just like
36:33 - i did here now hopefully this should
36:36 - work fingers crossed
36:38 - let's run the code let's hit r and then
36:41 - there we go we can see we're getting
36:42 - many different stack sizes showing up on
36:43 - the screen exactly what i want
36:46 - perfect okay so now that we have that
36:48 - really what we can do is actually
36:50 - implement the sorting algorithm itself
36:53 - and then start actually kind of drawing
36:55 - the steps in the sorting algorithm
36:57 - that's going to be the most complicated
36:59 - part but we've got kind of the main i
37:01 - guess foundation done for this
37:02 - application and really all we need to do
37:04 - is make it so now we can draw what's
37:06 - happening in the sorting algorithm which
37:08 - of course involves implementing the
37:09 - sorting algorithm itself so the first
37:11 - thing i'm going to do here is implement
37:13 - a key press for space so when you hit
37:15 - the space key it actually allows you to
37:17 - start sorting and then we'll implement
37:18 - the sorting algorithm so just like i did
37:20 - here i'll actually copy this
37:23 - i'm going to say
37:24 - alif because if it wasn't that key r
37:26 - then we'll check it with something else
37:27 - so l if event dot key is equal to pi
37:30 - game dot key underscore space because
37:32 - this is how we're going to start sorting
37:34 - then what i want to do is just set a
37:35 - variable here i'm going to say sorting
37:38 - is equal to true okay so i'm going to go
37:40 - up to the top of my program i'm going to
37:42 - say sorting
37:44 - is equal to false and then this will
37:46 - kind of tell us okay are we sorting are
37:48 - we not sorting and i'm also going to add
37:49 - something here that says and sorting
37:52 - is equal to false
37:54 - double equals to make sure that we can't
37:56 - start sorting if we're already sorting
37:58 - right whereas if we want to reset that's
38:00 - fine we can reset if we're currently
38:01 - sorting in this case we'll actually say
38:04 - sorting is equal to false so if we do
38:06 - reset what's on our screen then we want
38:07 - to stop sorting because we would have
38:09 - changed the list so we'll say sorting
38:10 - equals false
38:11 - okay that's really all we need for that
38:14 - the next thing i will implement is
38:16 - ascending or descending so i'm going to
38:18 - say
38:19 - ascending
38:20 - is equal to true and then i'll implement
38:23 - the key presses to toggle ascending or
38:25 - descending so if you hit a it will be
38:28 - ascending if you hit d it will be
38:29 - descend so let's copy this
38:32 - let's go here we'll just say l if event
38:34 - dot key is equal to c pi game dot k
38:37 - underscore a
38:38 - then we'll just set ascending equal to
38:40 - true so we'll say
38:43 - ascending equal to true like that
38:45 - and then we can go here say alif event
38:47 - dot key equals k underscore d then
38:50 - ascending
38:52 - is equal to false and i'll just make
38:54 - sure that we can't do this while we're
38:55 - sorting so i'll say and not sorting
38:59 - and not sorting
39:01 - okay
39:03 - nice
39:05 - now i actually uh want to wait to the
39:07 - very end to do this sorting algorithm
39:09 - part i just want to draw on the screen
39:10 - the different controls so i'll show you
39:12 - what this looks like but if you look at
39:14 - my window notice how we have kind of
39:16 - like what we're currently doing and then
39:18 - we have reset space a d and the
39:20 - different toggling for the different
39:22 - sorts so i want to actually draw that
39:24 - onto the screen and then we'll implement
39:25 - the sorting algorithm
39:26 - so to do that we need to set up a font
39:28 - so whenever you want to draw something
39:30 - in pi game you need a font
39:31 - and you get that by using the follow do
39:34 - something like font
39:36 - is equal
39:37 - to pygame.font.sys
39:40 - font then you need to give it a
39:43 - actual font so i'm going to say comic
39:45 - sans
39:46 - there's a bunch of options here but
39:48 - comic sans is just always the one that i
39:49 - use then you need to give it a size for
39:52 - now i'll go with 30. now this is going
39:54 - to be my regular font i also want to
39:56 - have a large font
39:58 - and the large font is going to have a
39:59 - size of 40.
40:01 - okay so there we go i've just defined
40:02 - the fonts on draw information so we can
40:05 - access them any place that we're drawn
40:07 - perfect so now let's go to draw and
40:10 - let's actually implement kind of the
40:11 - control text so whenever i want to show
40:14 - text on the screen what i need to do is
40:16 - use a font to render a text kind of
40:18 - surface or object or painting or
40:20 - whatever and then i put that onto my
40:22 - window so i'm going to do the following
40:24 - i'm going to say controls is equal to
40:27 - and then this is going to be
40:29 - draw info
40:31 - draw underscore info dot font and then
40:34 - dot render and then i'm going to put
40:36 - what i want to render so let me actually
40:38 - just copy this in so i don't mess it up
40:41 - okay let's grab it for my other screen
40:44 - so this is going to be
40:45 - r is reset and then i have the pipe and
40:47 - then space is start sorting a is
40:50 - ascending and d is descending i'm going
40:52 - to put a one this is the anti-aliasing
40:55 - just make this one it's essentially like
40:56 - the sharpness of the lines so always
40:58 - make the middle parameter one here and
41:00 - then the color and in this case i just
41:01 - want it to be black so i'm going to say
41:03 - draw info
41:05 - dot black of course you could hard code
41:07 - in black as well but we'll just go with
41:08 - that to make it more readable okay so
41:10 - now that we've actually rendered the
41:12 - font let me see if i can just let you
41:14 - guys see this so it's still on the
41:15 - screen here for a second what i need to
41:17 - do is actually display this on the
41:19 - screen and i want to display this
41:21 - perfectly in the center so i'll show you
41:22 - how to do it so to draw
41:25 - i guess text
41:26 - onto the screen you do draw
41:28 - info dot
41:30 - window
41:31 - need to access your window then you're
41:33 - going to use dot blit blit will just
41:34 - take a surface and blend it onto another
41:37 - screen so that's what we're doing here
41:39 - i'm going to pass the surface which is
41:40 - controls that i want to actually blit
41:43 - and then i pass the x y coordinate where
41:45 - i want to display it now the y
41:47 - coordinate i can just manually set as
41:49 - like 10
41:50 - or something like 5 so it's very close
41:51 - to the top of the screen but for the x
41:54 - coordinate since i want it perfectly
41:55 - centered i need to do some kind of math
41:57 - to figure that out so i'll show you
41:59 - what the math looks like i'm just going
42:01 - to open up paint
42:03 - so let's go paints like that
42:05 - and we can see what it looks like okay
42:07 - so let's say i have a window that looks
42:09 - like this
42:10 - and i have some text and i want it
42:12 - perfectly in the center of the screen
42:14 - well i have the width of the window
42:16 - which is like w right and then i have
42:18 - the width of my text let's just call
42:20 - this t okay
42:22 - so the way that i actually determine
42:24 - where this coordinate is because that's
42:26 - what i want to determine right i need
42:27 - the top left hand corner of the text
42:29 - because then it will draw going from the
42:31 - right of the top left hand corner the
42:33 - way i determine this is i start by
42:34 - saying okay well the middle of the
42:36 - screen is right here that is w over 2.
42:39 - now i'm just using my mouse so please
42:41 - excuse the massive discrepancy in font
42:43 - size but w over 2 is the middle of the
42:45 - screen
42:46 - now that's fine if my text was say one
42:49 - pixel i could just draw it right here
42:50 - however if i start drawing my text right
42:52 - here then it's going to go off the
42:53 - screen it's not going to be centered so
42:55 - what i now need to do is take t over 2
42:58 - so the
42:59 - what is it width of the text and then if
43:01 - i take the width over 2 and i subtract
43:04 - it from the text over 2 that actually
43:06 - gives me this coordinate right here so
43:08 - hopefully that makes sense but if you
43:09 - see that we have a width of let's get
43:12 - rid of all this
43:13 - if this is half the width of the text
43:15 - right that's how much further to the
43:17 - left from the middle of the screen i
43:19 - need to go to draw the text perfectly in
43:21 - the middle of the screen
43:23 - that's really the best explanation i can
43:24 - give
43:25 - that is how you draw it perfectly in the
43:26 - middle of the screen that's what i'm
43:27 - going to implement now you could do the
43:29 - same thing with the y if you wanted to
43:30 - but i don't want this in the middle and
43:31 - the y coordinate i only want it in the
43:33 - middle for the x coordinate
43:34 - okay so let's now do this we're going to
43:37 - say the
43:39 - uh not game info the draw info
43:42 - dot
43:43 - width over two subtracted by the
43:46 - controls dot get underscore with
43:49 - over two this is a useful method you can
43:52 - use on any of your text objects just do
43:54 - controls or whatever the name of it is
43:56 - dot get with and then you can divide it
43:58 - by two like i did so this will put it
43:59 - perfectly in the middle of the screen
44:01 - and then if you change what's in here it
44:03 - will automatically adjust
44:05 - okay great so that's controls now
44:08 - underneath that i want to have i guess
44:11 - sorting
44:12 - so sorting is to like change the sorting
44:14 - algorithm that we're going to use
44:16 - so we'll just copy this one in as well
44:19 - so we're going to have
44:22 - i for insertion sort and b for bubble
44:25 - sort now we haven't implemented those
44:26 - yet because we don't yet have the
44:27 - sorting algorithm but that's what i can
44:29 - do and then when i draw this all i have
44:31 - to do here is change a few things so
44:32 - i'll just say
44:34 - sorting and then rather than drawing it
44:37 - at five i'm going to draw it at 35 so
44:39 - it's 30 pixels below
44:41 - the controls right here
44:43 - okay so that's all i need for drawing
44:45 - the text on the screen to draw what
44:47 - we're currently sorting i'll do that in
44:48 - a second because we don't yet have the
44:49 - sorting algorithms but let me run this
44:52 - code and let's see what we're getting so
44:53 - far okay perfect there we go so we have
44:55 - r reset space start sorting a ascending
44:57 - d descending i insertion sort b bubble
45:00 - sort
45:01 - perfect that looks good to me really the
45:03 - last step now is implementing the
45:05 - sorting algorithms all right so now we
45:07 - can go ahead and implement these sorting
45:09 - algorithms now i'm not really going to
45:10 - be discussing the logic behind these
45:12 - different sorting algorithms there's all
45:14 - kinds of videos and tutorials on the
45:16 - internet talking about how these work
45:18 - i'm just going to code them out
45:19 - relatively quickly and then i will show
45:21 - you how we can make it so we draw the
45:22 - steps so let's write a function i guess
45:25 - we can do it right above main and let's
45:27 - call this bubble underscore sort now for
45:30 - any of our sorting functions if we want
45:32 - them to work with our code what we need
45:34 - them to take in here is draw info and
45:37 - then ascending and i'm just going to
45:38 - have a default value equal to true so
45:41 - i'm going to make it so the bubble sort
45:42 - and the insertion sort can sort either
45:44 - an ascending or descending order because
45:46 - we have that as kind of a parameter for
45:48 - our sorting algorithm visualizer anyways
45:51 - for the bubble sort i'm going to say
45:52 - that my lst is equal to draw info dot
45:55 - lst just so i don't have to write out
45:57 - draw info a bunch of times and then i'm
45:59 - going to say 4i in range and this is
46:02 - going to be the len of lst minus 1
46:05 - and then i'm going to say 4j
46:07 - in range
46:08 - and this is going to be the len of lst
46:11 - minus 1 minus i now we could do it in
46:14 - the other order as well but this will be
46:16 - fine for now
46:17 - and then i'm going to say num1 is equal
46:20 - to lst at and this will be j
46:23 - and then num2 is equal to lst
46:26 - at j plus
46:28 - one
46:29 - okay
46:30 - uh and now we're going to compare the
46:32 - values so i'm going to say if num1 is
46:36 - let me look at my cheat sheet here
46:37 - greater than num2 and ascending so we're
46:41 - going in ascending order then i want to
46:42 - swap these values so i'm going to say
46:44 - lst at j
46:46 - lst at j plus 1 is equal to the reverse
46:50 - so lst at j plus 1 and lst at j this is
46:54 - how you can swap in one line without a
46:56 - temporary variable in python this will
46:59 - just swap the values in the array
47:01 - and then after this
47:03 - i want to draw
47:04 - the list again okay so i'm going to talk
47:07 - about how we can do this in a second for
47:09 - now i'll just leave this commented out
47:10 - but this should work to actually sort
47:12 - the list
47:13 - and then i'm going to do something
47:15 - that's going to look a little bit weird
47:16 - but i'm going to yield true now i'm
47:19 - going to discuss why we need this in a
47:20 - second but finally at the end of the
47:22 - algorithm i will return lst and now all
47:25 - i want to do is make it so this can sort
47:27 - in descending order as well so it's
47:29 - going to look a little bit strange but
47:30 - i'm going to put this i'm going to say
47:32 - if num1 is greater than num2 and
47:34 - ascending
47:35 - or
47:36 - if num1 is less than num2 and not
47:42 - ascending so this is essentially
47:44 - checking the descending case
47:46 - then we will still do the same thing so
47:48 - if we are ascending and number one is
47:49 - greater than number two then let's swap
47:51 - them if we're sorting in descending
47:52 - order so not ascending then if num1 is
47:55 - less than num2 then we can swap them now
47:57 - let me make sure that condition is
47:58 - correct i believe it is
48:01 - awesome now let's talk about this yield
48:03 - keyword so the reason why i'm yielding
48:05 - here is because what i want to do is
48:07 - call this function for each kind of swap
48:10 - so i want to call this function every
48:12 - time i want a swap to occur so rather
48:14 - than having this go through
48:16 - and run the entire algorithm i want it
48:18 - to perform a swap and then yield control
48:21 - back to wherever it was called from and
48:23 - wait to be called again until it's going
48:25 - to perform the next step now this is
48:27 - called a generator this is going to work
48:29 - similar to an iterator like you might
48:31 - have for a for loop and again what this
48:33 - lets you do is pause the execution of
48:35 - the function kind of halfway through and
48:37 - then resume it from whatever this yield
48:39 - keyword
48:40 - came from so yield is obviously
48:42 - different than return yield is going to
48:43 - pause but store the current state of the
48:46 - function so that means the next time i
48:48 - call this generator to run it's going to
48:51 - run sorry starting at wherever it
48:53 - yielded from last time so theoretically
48:55 - i can yield anything that i want i'm
48:56 - just yielding true because that probably
48:58 - makes the most sense but i just want to
48:59 - have the yield keyword so that i can
49:01 - stop the function and then resume it and
49:03 - again you'll see why i want that in a
49:04 - second but essentially this is going to
49:06 - allow me to be able to continue to use
49:09 - the controls like reset um exit out of
49:12 - the screen all of the other buttons
49:13 - because if i don't yield then this
49:15 - function is going to have control the
49:17 - entire time it's doing the sorting and
49:19 - i'm not going to be able to press any
49:20 - other buttons on my keyboard the program
49:23 - can't respond to anything else if this
49:25 - is not yielding
49:27 - okay so now let's talk about the drawing
49:29 - aspect so the reason i pass draw info
49:30 - here is one because we need lst but two
49:33 - because in this function itself i'm
49:35 - going to manually draw
49:37 - the
49:38 - blocks or the list that's being sorted
49:41 - now what i want to do is i want to
49:43 - redraw the entire list on the screen but
49:45 - i want to color the two things that i'm
49:48 - swapping so i want to color j and j plus
49:50 - one in red and in green now you can put
49:52 - them in whatever color you want but
49:54 - that's what i want to do so what i'm
49:56 - actually going to do here is i'm going
49:57 - to go to draw list and i'm going to add
50:00 - one more parameter here which is going
50:01 - to be color
50:03 - positions like that now this is going to
50:05 - be equal to a dictionary and i'm going
50:07 - to pass in a dictionary of indices and
50:09 - then have that correspond with different
50:11 - colors that i want to make them when i
50:13 - drop so you'll see how this works again
50:15 - in a second i know i keep saying that
50:16 - but i can't explain all of it at one
50:18 - time
50:19 - what i'm going to do here though is i'm
50:20 - going to say if and then we're going to
50:22 - say i in and then this will be color
50:25 - underscore positions
50:27 - then color is going to be equal to color
50:29 - positions at i pretty simple this will
50:32 - be a dictionary the index will map to a
50:34 - color and then we will just manually
50:36 - override the color that we set here to
50:37 - either i guess green or red depending on
50:39 - the color that we are drawing
50:41 - we'll do something else as well inside
50:43 - of here which is actually going to be
50:44 - clearing the portion of the screen where
50:46 - the list is being shown so right now
50:49 - what we have is inside of our draw we
50:51 - draw the list after we draw all of this
50:54 - stuff and after we fill the window so
50:56 - that means we're not seeing double or
50:58 - anything because we're filling the
50:59 - window then we are drawing the list now
51:02 - from my bubble sort function here i
51:05 - could theoretically just call this draw
51:07 - function and everything would work fine
51:09 - however that's not super efficient
51:11 - because i don't need to be re-rendering
51:13 - this text every single frame when this
51:15 - is going to be static right this text is
51:17 - going to stay the exact same so instead
51:19 - of kind of redrawing the entire window
51:22 - what i want to do is just draw the list
51:26 - so what i'm going to do here is
51:27 - implement something that's going to
51:29 - clear just the portion of the screen
51:31 - where this list is being drawn and then
51:33 - redraw the list over top of it again so
51:36 - i'm not redrawing all this stuff i'm
51:38 - just redrawing the list every frame
51:41 - okay so let's do that i'm going to add a
51:43 - parameter here called clear underscore
51:45 - background and make this equal to false
51:47 - by default now if this is true we're
51:49 - just going to override this portion of
51:51 - the screen so i'm going to say if
51:54 - clear underscore bg
51:56 - then the clear rectangle is going to be
51:59 - equal to and i now need to calculate
52:02 - kind of the rectangle on the screen that
52:04 - i want to clear the position for so
52:06 - remember we are drawing our list in uh
52:09 - kind of a certain section of the screen
52:11 - right we're going to be drawing it a few
52:14 - pixels padded from the left and from the
52:16 - right and a few pixels padded downwards
52:18 - so that's kind of the rectangle i want
52:19 - to generate here so that's what i'm
52:21 - going to try to come up with now i'm
52:22 - just going to look at my cheat sheet
52:23 - because this is not
52:25 - simple to do on the top of my head but i
52:27 - believe what we want here is draw info
52:29 - dot side pad divided by two the reason
52:32 - we want it divided by two is because the
52:34 - starting x coordinate is going to be
52:36 - half of the side pad for when we're
52:38 - drawing our list
52:40 - then i want this to be draw info dot and
52:42 - this is going to be the top pad because
52:44 - this is where we'll actually start
52:46 - drawing the list from the vertical
52:48 - position from the y coordinate
52:49 - and then after this i need to calculate
52:51 - the width and the height now the width
52:53 - is simply going to be draw info dot with
52:56 - minus draw info dot side pad this will
53:00 - subtract the left and the right hand
53:02 - side pad so this is correct
53:03 - and then i want the draw info dot height
53:07 - and this is going to be subtracted by
53:08 - draw info dot top pad although again it
53:11 - doesn't really matter if we subtract
53:13 - this or not because theoretically if i
53:16 - just draw the entire height since we're
53:18 - drawing downwards any extra rectangle i
53:20 - draw will just be off the screen and we
53:21 - won't see it so i'll leave this in for
53:23 - now just to show you that this does work
53:25 - we don't really need to actually
53:27 - implement the top pad now let's put this
53:29 - on a second line just so it's a little
53:31 - bit easier to see
53:33 - and hopefully you can read all
53:35 - okay great actually let me zoom out a
53:36 - bit and maybe this makes it a little bit
53:38 - easier okay
53:39 - so now that we've done that what i want
53:41 - to do is actually draw the rectangle so
53:43 - i just came up with a rectangle just
53:44 - because it's easier to put in a variable
53:46 - first but now i'm going to say
53:47 - pygame.draw.rect
53:49 - and i'm going to draw this on the
53:51 - drawinfo dot window the color will be
53:55 - the draw info dot background color and
53:58 - then i'm just going to draw this at the
54:00 - rectangle
54:01 - so rather than putting all this stuff
54:02 - inside of here i just put the variable
54:04 - which is actually called clear rect
54:07 - perfect now since i'm doing that at the
54:09 - bottom here i also need to say if clear
54:12 - background then pygame dot
54:16 - display dot update because i'm not going
54:19 - to be updating in here
54:22 - usually because we update right here
54:23 - after we draw the list so if we are
54:25 - calling this directly so we pass clear
54:27 - background equal true then we need to
54:28 - make sure we update the screen as well
54:30 - all right so i think that's it for draw
54:32 - list hopefully that all makes sense now
54:35 - let's go back to bubble sort and let's
54:37 - actually call draw list
54:38 - and pass kind of these new parameters
54:40 - now so when i call draw a list i'm going
54:42 - to pass a draw info because we are going
54:44 - to be redrawing the entire list then
54:46 - what i'm going to pass is color
54:48 - positions now for color positions all
54:50 - i'm going to do is say j
54:52 - is going to correspond with draw info
54:55 - and then this will be dot green
54:57 - and then i'm going to say j plus 1 is
55:00 - going to correspond with draw info
55:03 - dot red now feel free to change these
55:05 - colors to whatever you like i'm just
55:06 - using green and red and you could swap
55:08 - the order too you could have j be red
55:10 - and j plus one be green i'm not really
55:12 - using them to indicate anything specific
55:14 - i'm just showing the two elements that
55:15 - i'm swapping at this step
55:18 - great then i'm yielding true okay so now
55:20 - we have the bubble sort algorithm done
55:22 - now insertion sort will be pretty simple
55:25 - but let's first see if this is actually
55:27 - going to work and call the bubble sort
55:28 - algorithm
55:29 - so what i'm going to do here is i'm
55:31 - going to make a variable and i'm going
55:33 - to call this sorting underscore
55:35 - algorithm
55:36 - and this is going to store the function
55:39 - that's going to represent the current
55:40 - sorting algorithm that we have so in
55:42 - this case i'm going to call it bubble
55:43 - sort i'm going to use bubble sort but we
55:45 - would change this function to be
55:46 - insertion sort merge sort whatever other
55:48 - sort we're using if that's what we
55:50 - wanted to do now i'm trying to write
55:52 - this in a very flexible way so that all
55:53 - you have to do is write another function
55:56 - that takes in draw info and ascending
55:58 - and obviously will have to be tweaked a
56:00 - little bit depending on the sort but all
56:02 - you'll have to do is literally just put
56:03 - the name of the function right here and
56:05 - then that will change the sorting
56:06 - algorithm that's being used for the
56:08 - visualization
56:09 - okay so we're going to say sorting
56:11 - algorithm is equal to bubble sort i'm
56:13 - going to say sorting
56:15 - algo name is equal to and we're just
56:17 - going to hard code this in as bubble
56:19 - sort just so we can display this on the
56:21 - screen and then what i'm going to do is
56:24 - i am going to go to where we start the
56:26 - sorting so it'll be right here and i'm
56:28 - going to say
56:29 - that my sorting
56:32 - algorithm
56:34 - actually this is going to be a little
56:35 - bit tricky here
56:38 - okay so i just made a cut there because
56:39 - i had to think about something for a
56:41 - second i actually want to add one more
56:42 - variable here which is going to be
56:44 - sorting
56:46 - algorithm
56:47 - generator because we're going to use the
56:49 - generator to actually generate or
56:52 - perform the sorting algorithm this is
56:54 - just going to represent what sorting
56:55 - algorithm we want okay so let's now go
56:58 - here and we're going to say that the
57:00 - sorting algorithm underscore generator
57:03 - is equal to and this is going to be the
57:05 - sorting algorithm that we chose and then
57:08 - we're going to call this function and
57:09 - we're going to pass to it draw info
57:12 - and ascending
57:14 - okay so remember we have this ascending
57:16 - variable here this is going to be equal
57:17 - to true by default but we can toggle it
57:19 - to be false and so if we make it false
57:21 - then we'll pass false for ascending and
57:23 - so we'll sort in the other order now
57:25 - what's going on here is we're creating a
57:26 - variable sorting algorithm generator
57:28 - which is going to store the generator
57:30 - object that will be created when we call
57:33 - this function so this is something about
57:35 - generators
57:36 - as soon as you put a yield keyword it
57:38 - makes a function a generator which means
57:40 - when you call it the first time you call
57:42 - it it actually returns to a generator
57:45 - object so it's not going to return to me
57:46 - lst it's not actually going to run any
57:48 - of this code it's going to give me a
57:50 - generator and then for me to actually
57:52 - use that generator i need to manually
57:54 - call
57:55 - the next method on it or iterate over it
57:58 - so this isn't meant to be an entire
57:59 - lesson on generators i do actually have
58:01 - a video on my channel i'll put it up on
58:03 - the screen it's generators explained in
58:05 - python in case this is very confusing
58:07 - you can go through that you could also
58:08 - check out programming expert we have an
58:10 - entire lesson on that as well whole
58:12 - point though again is that when you call
58:14 - a generator gives you a generator object
58:16 - generator object has this next function
58:19 - on it the next function gives you the
58:21 - next thing to be yielded from the
58:23 - generator so the first time we call next
58:26 - it's going to yield true and it's going
58:27 - to perform all of the steps up until
58:29 - this first yield the next time we call
58:31 - next it's going to continue running
58:32 - until it hits the yield again
58:34 - hopefully that makes a bit of sense but
58:36 - if i had a generator like define gen
58:39 - and then i yielded
58:41 - one
58:42 - and i yielded two when i call my next
58:45 - method i know i'm spelling this
58:46 - incorrectly the first time i call it
58:49 - this is going to give me 1.
58:51 - the next time i call it this is going to
58:53 - give me 2. so i would say something like
58:54 - gen
58:56 - is equal to gen or maybe we go g is
58:59 - equal to gen and then i would call next
59:01 - on g that would give me 1 and then i
59:02 - would call next on g again that would
59:04 - give me 2. and then if i try to call it
59:06 - one more time
59:07 - what it's going to give me is a stop
59:10 - iteration exception
59:13 - if i can okay you guys get the point i
59:14 - can't type properly today but stop
59:16 - iteration so it's going to raise an
59:17 - exception and tell me that hey there's
59:19 - no more elements to be yielded and so
59:21 - we're raising an exception to tell you
59:22 - the generator is done hopefully that was
59:24 - like a mini little lesson on generators
59:26 - but let's continue now
59:28 - so now that we have actually created the
59:30 - generator object i want to put something
59:33 - at the top of my while loop here and i
59:34 - want to say if sorting so if we are
59:37 - currently sorting then what we want to
59:39 - do is try to call the next method on our
59:41 - generator so we're going to say try
59:44 - and oops that's not what i wanted i'm
59:46 - going to say try and then this is going
59:48 - to be next on
59:50 - and what is it called our sorting
59:52 - algorithm generator right here and then
59:54 - i'm going to accept the stop iteration
59:57 - exception and i'm simply going to say
59:59 - sorting
60:01 - like this
60:02 - is equal to false
60:05 - okay and then otherwise
60:07 - i will just normally draw
60:09 - so let's explain this here why is this
60:12 - my autocomplete is just being annoying
60:14 - right now draw
60:16 - tab okay there we go
60:17 - so what i just did here i understand
60:19 - this a bit confusing is i said if we are
60:21 - currently sorting then what i'm going to
60:22 - do is try to call this next method now
60:25 - if this doesn't work which essentially
60:27 - means the generator is done i'm going to
60:29 - raise or i'm going to accept the stop
60:31 - iteration exception and i'm going to set
60:33 - sorting equal to false because that
60:34 - would mean okay the generator is
60:36 - finished now if it's not we're just
60:37 - going to keep calling this constantly
60:39 - until we finish sorting the list once
60:41 - we're done sorting the list stop
60:42 - iteration is raised we then accept that
60:44 - we say sorting is equal to false and
60:46 - then we could sort a different list or
60:47 - reset it or do whatever we want but i'm
60:49 - just calling next on sorting algorithm
60:51 - generator which we initialize right here
60:53 - when we start sorting and the way we do
60:55 - that is by using the sorting algorithm
60:57 - variable which i put right here which is
61:00 - equal to bubble sort so bubble sort is
61:02 - the name of the generator function we
61:04 - call bubble sort gives us the generator
61:06 - object we then call next a bunch of
61:08 - times and hopefully by now you get the
61:09 - point so at this point we can try this
61:11 - out we can see if this is going to work
61:13 - or not i have a feeling we'll get a few
61:14 - bugs but
61:15 - let's try it and see
61:17 - okay so i'm just going going to hit
61:19 - space
61:20 - and i see that nothing is happening
61:23 - currently
61:24 - i hit space nothing is happening and i
61:27 - believe
61:29 - that may be because we're not actually
61:32 - oh okay so it did sort but it wasn't
61:35 - showing me any updates on the screen
61:37 - that's a little bit strange let me have
61:39 - a look here and then i will be right
61:40 - back all right so i found the error i'm
61:42 - sure many of you probably saw this but i
61:44 - forgot to pass my other attribute or
61:46 - other parameter here true so if i go to
61:49 - draw list we have clear background equal
61:51 - to false by default i wasn't passing
61:53 - true so we weren't actually clearing the
61:55 - background and seeing the updates on the
61:57 - screen so now if i pass true we should
61:59 - see that because it looked like it did
62:01 - sort the list it just wasn't showing us
62:03 - the live progress so let's try this now
62:05 - let's run the code
62:08 - okay and let's hit space and notice it's
62:10 - showing this to us now we're getting a
62:12 - bit of red at the top the reason for
62:14 - that is that my background
62:16 - i guess i must have drawn it in the
62:17 - wrong location so we'll fix that in a
62:19 - second but you can see that is actually
62:20 - giving us the visualization and there we
62:22 - go that looks pretty good so let's try
62:25 - to fix this now because it looks like i
62:27 - messed this up so
62:28 - let's go
62:30 - to where are we draw list okay so i'm
62:33 - drawing
62:34 - uh the top y coordinate at draw info dot
62:37 - top pad but it looks like we're drawing
62:40 - i guess the the rectangles above the top
62:42 - pad for some reason
62:44 - that's a little bit strange to me why
62:46 - the rectangles would be drawing above
62:47 - the top pad i just want to see in my
62:50 - other code here what i would have put
62:52 - for this and why this isn't working so
62:54 - let me have a look and i will be right
62:56 - back alright so i've just found the fix
62:58 - my apologies for this guys but this
63:00 - happens from recording recording
63:01 - hour-long videos anyways i have a
63:03 - self-adopt block height here and
63:05 - previously i had route
63:07 - now when i round this what ends up
63:09 - happening is that i'm going to have a
63:11 - bunch of pixels kind of being larger
63:13 - than i want them to be because of the
63:15 - fact that i'm going to round values up
63:17 - now i understand this is a little bit
63:18 - weird to comprehend but let's say that
63:20 - block height before rounding is
63:23 - something like 4.55 pixels meaning for
63:25 - every kind of one unit i have i want to
63:28 - draw that at 4.55 pixels high so now
63:31 - imagine i have a 100 units that i want
63:33 - to draw at 4.55 well if i round this
63:36 - value up to 5 that's going to give me an
63:39 - additional say 20 pixels or something
63:41 - like that that i'm drawing additionally
63:43 - which is going to be going into my
63:45 - self.top pad because i round it up so
63:47 - i'm getting kind of a rounding precision
63:49 - error so what i want to do instead of
63:51 - rounding is i just want to math.floor
63:53 - this which is going to put this down
63:55 - automatically so even if not like 4.99
63:58 - it's just going to round it directly to
63:59 - the floor to make sure i'm never going
64:02 - to be above this top pad there might be
64:04 - a better solution to this but i think
64:06 - math.floor is the easiest so we're just
64:08 - going to go with that because it will
64:09 - still make the scaling correct for all
64:11 - of our values we just won't be utilizing
64:13 - as much space as possible in some
64:15 - situations which is fine so i'm just
64:17 - going to say math.floor however that
64:19 - means we need to import math so make
64:20 - sure you import math at the top of the
64:22 - program now that should be the fix i
64:24 - think that should be good so let's run
64:26 - this here and let's test out our code
64:28 - because we're pretty much almost done so
64:30 - i'm going to hit space
64:31 - looks like everything is working fine
64:33 - and yeah that is uh looks great to me
64:36 - now i'll show you how to speed this up
64:37 - in one second
64:39 - but for now this is a pretty good speed
64:40 - and you can see that we sort this
64:42 - successfully so let's reset using r
64:44 - let's change this to descending we'll
64:46 - have to add our title to tell us what
64:48 - algorithm and if we're ascending or
64:49 - descending we'll do that in a minute
64:51 - but now let's run this and we should be
64:53 - getting it in the opposite order because
64:55 - i toggled this to descending instead of
64:57 - a set
64:58 - perfect that looks good to me
65:00 - nice and quick sort although not really
65:03 - considering we're using bubble sort but
65:04 - yeah
65:05 - looks good awesome so let's reset and
65:08 - yeah looking good okay
65:10 - so now what we will do is we will add
65:12 - the title telling us what sorting
65:14 - algorithm we have if we're ascending or
65:16 - descending
65:17 - and there was something else that i
65:18 - wanted to do
65:20 - that i forgot about uh i wanted to show
65:22 - you how to speed this up yes okay so if
65:23 - you want to speed this up just change
65:25 - your clock dot tick here to be a higher
65:27 - number so watch what happens if i make
65:28 - this 120 now
65:31 - and you will see that we should go a lot
65:32 - faster yeah so when i hit space you can
65:34 - see we're going significantly faster
65:36 - than we were before and if you want this
65:37 - to go at the maximum possible speed
65:40 - then just remove the clock tick
65:42 - now for some of you even when you
65:43 - increase the clock tick to a large
65:45 - number it's not going to go any faster
65:46 - that's because you're being limited by
65:48 - the speed of your processor in this case
65:50 - i have a pretty fast processor so this
65:51 - is running quickly but if you're on an
65:53 - older computer you may notice this
65:55 - happens significantly slower than what's
65:56 - happening here
65:58 - okay so let's add the title now in order
66:00 - to add the title i need to pass a few
66:02 - more things to draw so when i draw here
66:06 - i need to pass the algo underscore name
66:08 - and then ascending as well telling me if
66:11 - we are ascending or not ascending so
66:13 - let's now pass those values when we call
66:15 - the draw function
66:16 - so let's go to draw
66:18 - and let's pass the sorting algorithm
66:22 - name okay
66:23 - and ascending perfect so now we can go
66:26 - inside of here and what we're going to
66:28 - do is just render some text and display
66:29 - that information
66:31 - so i actually want to render this above
66:32 - my controls and my sorting so what i'm
66:34 - going to do is now put these a bit lower
66:37 - i'm going to draw this at 35
66:39 - and i'm going to draw this at 65 and
66:42 - then the other text that we draw i'll
66:44 - just draw at 5. okay
66:47 - so now we're going to have instead of
66:49 - controls this is going to be
66:51 - i guess title title is fine for now
66:54 - we then want to blit
66:56 - the title again we want this in the
66:58 - middle of the screen so we're going to
66:59 - put this to title but what we actually
67:02 - want for the title is going to be
67:03 - different i'm going to put an f string
67:04 - here and i'm just going to put inside of
67:07 - curly braces the algo name
67:09 - and then this is going to be a little
67:11 - bit weird if you haven't seen this but
67:12 - i'm going to write an if statement that
67:14 - writes ascending if we're ascending and
67:16 - writes descending if we're not ascending
67:17 - so i'm going to say
67:19 - ascending make sure you're using single
67:21 - quotation marks by the way if you use
67:22 - double then you're going to get an error
67:24 - because we surrounded the f string with
67:25 - double quotation marks but i'm going to
67:27 - say ascending if and then this will be
67:29 - ascending else this will be decent
67:32 - perfect i think that's pretty intuitive
67:34 - to understand what's going on there but
67:36 - that's what we have
67:38 - and that looks good now the f string is
67:40 - only in python version 3.6 or above so
67:43 - if you're using a lower version then
67:44 - this may not work for you in that case
67:46 - you can just use a string concatenation
67:48 - if you're familiar with python that
67:50 - should be relatively simple to uh to
67:52 - replace
67:53 - okay so let's try this now
67:54 - and let's see if the title is showing up
67:57 - okay so bubble sort ascending nice now i
67:59 - want this to be a bit bigger so i'm
68:00 - going to use rather than the font
68:03 - the oops not there the large font that i
68:06 - declared earlier
68:08 - so again remember here we have large
68:09 - font
68:10 - just 10 pixels larger and then rather
68:12 - than drawing this in black
68:14 - i'm just going to draw this in green
68:15 - just so it stands out
68:17 - okay let's try this now
68:20 - okay looks good might want to move the
68:22 - controls down a little bit so let's do
68:23 - that let's make this at 45 and this at
68:27 - 75
68:28 - okay let's run this
68:30 - and there we go that looks good to me so
68:32 - now let's see if i change this to
68:34 - descending okay we can see the text is
68:36 - updating and now all we need to do is
68:38 - implement insertion sort because as we
68:40 - can see our sorting algorithm is
68:42 - visualizing is working properly okay
68:46 - so let's now do insertion sort
68:48 - so insertion sort i do not have
68:49 - memorized so i'm going to have to look
68:51 - at my other screen so please excuse me
68:53 - while i do this but let's set this up so
68:55 - i'm going to say define
68:57 - insertion underscore sort just like
68:59 - bubble sort we need to take in the draw
69:02 - info and the ascending make this by
69:05 - default equal to true
69:07 - then what i will do is say lst is equal
69:10 - to just like before
69:11 - drawinfo.lst and i will set up a for
69:14 - loop so 4i
69:15 - in range this will be 1 and then the len
69:19 - of lst
69:21 - then i'm going to say that current is
69:23 - equal to lst at index i
69:25 - i'm going to say wow true and then i'm
69:28 - going to write the two conditions for if
69:30 - this loop should let me swap something
69:33 - based on if i'm sorting an ascending
69:35 - order or a descending order so i'm going
69:37 - to say ascending underscore sort is
69:40 - equal to i
69:41 - greater than zero and lst at i minus 1
69:46 - is greater than current and ascending i
69:50 - understand that's a lot there but we're
69:52 - going to copy this now and do it again
69:54 - and i'm going to say descending sort
69:56 - this time
69:58 - okay descending sort this time it's
70:00 - going to be i greater than 0 and we're
70:02 - just going to swap this sign and say not
70:04 - ascending so these are kind of my two
70:06 - conditions for if i should be continuing
70:09 - in this while loop if you're not
70:10 - familiar with insertion sort again watch
70:12 - a tutorial on it or something i'm not
70:13 - going to explain it in this video but
70:15 - the point is if we're ascending then
70:16 - this is the condition and if we're
70:18 - descending then this is the condition
70:20 - and i'm just writing them in variables
70:21 - so it's easier when i do this next check
70:23 - so i'm going to say if not and then this
70:25 - is going to be ascending sort or not
70:28 - descending sort
70:30 - sorry this is going to be and not
70:32 - descending sort then i want to break
70:35 - otherwise though i'm going to do a bunch
70:37 - of swaps so i'm just checking if either
70:39 - of these conditions are not true if one
70:40 - of them is true i will continue if both
70:42 - of them are not true then i don't need
70:44 - to do any swaps so i break
70:46 - okay so i'm going to say lst at i
70:48 - is equal to lst at i minus 1. i'm going
70:52 - to say i is equal to i minus 1. i'm
70:55 - going to say lst at i is equal to
70:58 - current
70:59 - that's the variable we have defined
71:01 - right here and then i'm going to say
71:03 - draw lst because we've just done our
71:05 - swaps
71:06 - and i'm going to pass draw info i'm
71:09 - going to pass i and then this will be
71:11 - draw info
71:13 - dot green and then we will pass
71:16 - i minus one and this will be draw info
71:20 - dot and then red
71:23 - okay
71:24 - then we need to pass true
71:26 - and i think after we yield true here
71:30 - and we finally return lst we should be
71:34 - good now i understand i just kind of
71:35 - speed coded that out so i'll walk
71:37 - through this quickly we have our list we
71:39 - have our for loop current is equal to
71:41 - lst at i and then while either of these
71:44 - two conditions is true based on if we're
71:46 - sorting in ascending or descending order
71:49 - we're going to perform the swaps so
71:50 - we're going to say lst at index i is
71:53 - equal to lst at i minus one
71:55 - i is then equal to i minus one so we're
71:58 - actually modifying this iterator
72:00 - variable right here and we're saying lst
72:02 - at i which we just changed here is equal
72:04 - to current which is this value so just
72:06 - moving it in the list
72:08 - then we've performed swaps here so the
72:10 - two values that i want to highlight is i
72:12 - and i minus 1. now this needs to be in
72:14 - capitals
72:15 - my apologies i'm going to do this in the
72:17 - other order i'm going to say i minus 1
72:19 - and then i like that just to be
72:21 - consistent with what we did here
72:23 - okay then i'm yielding true the reason
72:25 - i'm yielding true is because i just did
72:27 - a swap so every time you do a single
72:29 - swap you should yield just so that you
72:31 - give control back to the main loop so
72:33 - that you can then press a button reset
72:35 - pause
72:36 - whatever it is that you need to do okay
72:38 - so now we have insertion sort i think
72:40 - this is just good to go so let's now
72:42 - look at how we can swap between the two
72:44 - so what i'm going to do
72:46 - is add some buttons here
72:48 - one that is for i
72:50 - insertion sort and then b4 bubble sort
72:53 - so let's copy this
72:55 - let's paste this in twice
72:58 - and rather than pi game underscore d
73:01 - this is going to be i i don't care if
73:02 - i'm sorting or not
73:04 - actually maybe we won't let them swap it
73:06 - if they're still sorting so we'll leave
73:08 - that in and then if they hit i then what
73:10 - i'm going to do is say that the sorting
73:12 - underscore algorithm
73:14 - is equal to insertion sort
73:17 - and then we'll just change the algo name
73:19 - so sorting
73:20 - i'll go name okay and then the name will
73:23 - be insertion sort like that okay
73:27 - nice now let's copy these into here
73:30 - let's change this key to be b and then
73:33 - of course we just need to adjust this so
73:35 - that this is now going to be bubble sort
73:38 - so bubble sort like that and then this
73:41 - will be bubble sort okay that's actually
73:43 - all we need to do because now we will
73:45 - just change this
73:47 - function that we're using for the
73:48 - sorting algorithm and the sorting
73:49 - algorithm name everything else will
73:51 - automatically be handled for us and just
73:53 - like i was talking about before all you
73:55 - need to do to implement another sorting
73:56 - algorithm here is write a function that
73:58 - acts as a generator so you just need a
74:00 - yield keyword whenever you want to draw
74:01 - something make sure you take in draw
74:03 - info and ascending and then you should
74:05 - pretty much be good so long as you're
74:07 - calling draw list at the appropriate
74:09 - time in that sorting function now this
74:11 - has to happen in place if you're not
74:13 - doing this in place then you're going to
74:15 - have to kind of come up with a different
74:16 - visualization technique because this is
74:18 - only going to work for in-place sorting
74:20 - algorithms anyways let's run this now
74:22 - and see if this works to toggle the
74:24 - different algorithms so i'm going to
74:26 - click b
74:27 - i'm going to click i now we're in
74:28 - insertion sort ascending let's change it
74:30 - to descending and let's run this this
74:32 - looks different than bubble sort i think
74:36 - yeah it looks like insertion sort to me
74:37 - but let me just confirm and we'll run
74:39 - bubble sort and see if we get it
74:40 - differently okay so let's reset let's go
74:42 - to bubble sort and let's run this okay
74:45 - perfect so bubble sort is working
74:46 - differently than insertion sort which is
74:48 - what i expected
74:50 - awesome so i think with that said that
74:52 - is going to wrap up this video hopefully
74:55 - this gave you a good kind of platform to
74:57 - build a sorting algorithm visualizer
74:59 - there's a few optimizations that could
75:01 - be performed here not everything is
75:02 - completely perfect but i think for a
75:04 - youtube tutorial and again giving you
75:06 - kind of a foundation and base this is a
75:08 - really good starting point if you guys
75:09 - have any recommendations for how to
75:11 - improve this please leave a comment down
75:12 - below it's unlikely i'll make another
75:14 - video on this but you could help someone
75:16 - else out which is always appreciate if
75:18 - you guys enjoyed the video make sure to
75:19 - leave a like make sure to check out
75:21 - programming expert from the link in the
75:22 - description use code tim for a discount
75:25 - and i will see you in another youtube
75:26 - video
75:28 - [Music]