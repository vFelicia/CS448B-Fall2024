00:00 - I guarantee you that until you learn
00:02 - these three things you will struggle to
00:04 - write code fortunately once you learn
00:06 - them coding will genuinely seem
00:08 - effortless now the first of these three
00:11 - things is syntax and program structure
00:14 - you need to understand how your language
00:15 - works you need to have the fundamentals
00:17 - down you need to know how to write basic
00:19 - code and essentially to have all of the
00:21 - tools in the language you need to be
00:23 - able to solve a specific problem now
00:25 - many of you already know how to do that
00:26 - it's relatively easy to learn these
00:28 - skills in just a few weeks for example
00:30 - pick up functions pick of if statements
00:32 - variables you guys know what I'm talking
00:33 - about here and I'm sure you followed
00:35 - many online tutorials or even premium
00:37 - courses like my brand new software
00:39 - development course which I'll leave a
00:40 - link to in the description now once you
00:42 - learn syntax where many of you will
00:44 - struggle and kind of get stuck is
00:46 - program structure now what I'm talking
00:48 - about here is once you know a language
00:50 - and you know how to write basic code
00:52 - really what you're good at doing is
00:54 - solving small problems with those tools
00:57 - that you have where it becomes more
00:58 - difficult is when you want to take take
01:00 - on a larger task that's not well defined
01:02 - for example you want to build a website
01:03 - you want to build an entire project from
01:05 - scratch you want to make a game you want
01:07 - to do something that goes beyond those
01:09 - well-defined and small discrete tasks to
01:11 - something a bit more large and Abstract
01:14 - this is where many people fall apart
01:16 - because it requires knowledge of how to
01:18 - structure your code where to place
01:20 - different components and how to go about
01:22 - things systematically what I mean by
01:24 - this is where do you put the Imports
01:26 - where do you put all of the variables
01:28 - where do you put the different functions
01:29 - or classes how do these components
01:31 - interact with each other and how do I
01:33 - lay them out in a way that's
01:34 - maintainable and easy to understand now
01:37 - I can't teach you that in this short
01:39 - video but what I can recommend you do is
01:41 - follow along with other experienced
01:43 - programmers through some larger projects
01:45 - so you get a better idea of how you
01:47 - structure code again this is a skill
01:50 - that you need to learn to get beyond
01:51 - that intermediate programming level
01:54 - where do I put the different pieces of
01:55 - my code how do they interact with each
01:57 - other how do I keep it clean and
01:59 - organized and how do I know kind of what
02:01 - part of the code to write at a time
02:04 - again the best way I can recommend you
02:05 - learn that is by following along with
02:07 - for example free tutorials on YouTube
02:09 - where they build an entire project I
02:11 - have many of those on my channel even
02:13 - going to some GitHub repositories and
02:15 - viewing code that is written by
02:17 - experienced programmers you could for
02:18 - example check out my GitHub repository
02:21 - or you could of course join some more
02:22 - premium courses like my software
02:24 - development course which I'll leave a
02:25 - link to in the description that has an
02:27 - entire section specifically on structure
02:29 - in code and writing it in a clean
02:31 - organized manner now the next thing you
02:34 - need to look at is debugging if you can
02:36 - be a good debugger effective and not get
02:38 - frustrated when you run into an issue
02:40 - you're really going to see yourself
02:41 - Advance a lot as a developer or a
02:44 - programmer and you're going to be able
02:45 - to make a lot more progress a lot faster
02:47 - many people especially beginner
02:49 - programmers really get discouraged when
02:51 - they run into issues or bugs and they
02:53 - don't know the correct way to approach
02:55 - them and it causes Mass frustration
02:57 - depression demotivation things that
02:59 - we've probably all experienced before
03:01 - that can really hold you back and make
03:03 - it feel like coding is impossible now I
03:05 - want to share with you a few small
03:07 - pieces of advice that can make debugging
03:09 - easier for you first when you are
03:11 - debugging the mindset you should adopt
03:13 - is what you were really trying to do is
03:16 - isolate the problem to the smallest area
03:19 - of the code you possibly can now this is
03:21 - much easier said than done but the way
03:23 - you should attempt to solve bugs is to
03:26 - reduce the amount of possible things
03:28 - that could be impacting your program now
03:30 - it's hard to give you a specific example
03:32 - of this but what you really want to do
03:34 - here is try to disable as many things as
03:37 - possible in the code so you can narrow
03:39 - down where exactly you're running into a
03:42 - specific issue so let's say you have
03:44 - some form and there's an issue
03:45 - submitting the form now there's a lot of
03:48 - things that could be causing this
03:49 - problem right it could be a UI related
03:51 - problem it could be a backend related
03:52 - problem it could be something in the
03:54 - JavaScript code it could be in the front
03:55 - end in the HTML there's a bunch of
03:57 - different areas so immediately you want
03:59 - to start isolating what area that would
04:02 - be in right so you'd want to First go
04:04 - for example and maybe check the back end
04:06 - and say okay let me look at this in
04:07 - isolation when it's not attached to this
04:09 - form and see if this works as I
04:12 - anticipate it working now if that does
04:14 - work you've just crossed off a whole
04:16 - large section of code that you don't
04:18 - need to look at for the potential issue
04:20 - now maybe you go into the JavaScript
04:22 - code and you say okay let's check to
04:23 - make sure I'm collecting the form
04:25 - elements properly okay it looks like I
04:27 - am actually getting all of the correct
04:28 - data inside of here this specific area
04:31 - of the code is working hopefully you get
04:33 - what I'm saying here you're going to go
04:34 - through all of the different things that
04:35 - could be causing the problem check them
04:38 - off one by one and isolate it to the
04:40 - smallest possible area you can where
04:43 - then you can start going through the
04:44 - code line by line and seeing exactly
04:46 - what's going wrong it's impossible to
04:48 - analyze you know thousands upon
04:50 - thousands of lines of code you need to
04:52 - First cross off as many areas as you can
04:55 - isolate and get into the smallest part
04:58 - and then you can go through and do a
04:59 - more thorough dissection of where the
05:01 - actual bug lies now to be able to do
05:03 - this it's going to be helpful to know
05:04 - how to use professional debugging tools
05:06 - like the debugger that might exist
05:08 - inside of something like VSS code so I
05:10 - recommend spend 15 or 20 minutes learn
05:13 - how to use the debugger I promise you
05:15 - it's not actually that complicated and
05:16 - it can help you a lot to do what I just
05:18 - said isolate the problem now beyond that
05:21 - once you figure out where relatively the
05:24 - problem is you can use something known
05:26 - as the rubber ducky technique now this
05:28 - isn't something I person use all the
05:30 - time but I know it's very helpful
05:32 - especially to beginner programmers what
05:34 - you want to do is go through line by
05:36 - line in a smallish area right it's like
05:38 - a function or a class body or where you
05:41 - know the bug exists and you want to
05:43 - imagine that you're explaining line by
05:46 - line what's happening to a rubber ducky
05:48 - so some people actually have a rubber
05:49 - ducky on their desk that they do this
05:51 - with it could be any object you don't
05:52 - need to have some object in front of you
05:54 - but verbally out loud talk through each
05:57 - line that you have in your code and
05:59 - explain what it does now what this does
06:02 - is force you to actually analyze each
06:04 - line understand what it's doing and a
06:06 - lot of times when you have to explain
06:08 - something to someone else you'll see
06:10 - immediately what's actually causing the
06:12 - issue I know this happens to me all the
06:14 - time I'm explaining something maybe even
06:16 - in a tutorial and I start explaining I'm
06:18 - like wait that doesn't make any sense at
06:20 - all but I only realized that because I
06:22 - actually had to say it verbally and I
06:24 - couldn't skip over it in my mind I had
06:26 - to go through it very detailed now once
06:28 - you've learned all that the next thing
06:30 - that's really going to help you get
06:31 - better at programming is understanding
06:33 - how to plan before you code now one
06:36 - thing that I've been planning for a very
06:38 - long time is actually my new software
06:40 - development course in collaboration with
06:42 - course careers now the way this course
06:44 - works is you go through a software
06:45 - development fundamentals course which is
06:47 - taught by me and then you pick a
06:49 - specialization in frontend devops or
06:51 - backend taught by an industry expert
06:54 - like webdev simplified who actually
06:56 - teaches the front-end specialization now
06:58 - this course is kind of different than
07:00 - other courses that I've done before
07:01 - because we actually have a network of
07:03 - employers that are ready to hire and
07:05 - interview the top students coming out of
07:07 - the program not only do we have quizzes
07:10 - practice questions we actually have a
07:12 - proctored final exam and we really give
07:14 - you a real evaluation so you understand
07:17 - if your career ready we give you
07:19 - coaching one-on-one support a Discord
07:21 - server with a massive community and
07:22 - direct access to myself and a ton of
07:25 - other benefits that I really know a lot
07:26 - of you guys will find some value from so
07:28 - if you're interested check it out from
07:29 - the link in the description we do
07:31 - actually have a free introduction course
07:33 - which teaches you everything you need to
07:34 - do to break into software development so
07:37 - even if you don't purchase the course
07:38 - you can go through that free course and
07:40 - get a ton of value just sign up for free
07:42 - from the link in the description all
07:44 - right so let's get into planning now the
07:45 - basic idea here is that coding is
07:48 - already hard writing code and solving
07:50 - small problems is already a difficult
07:52 - thing to do what makes it significantly
07:54 - more difficult is when you need to break
07:56 - a task down into smaller tasks and
07:58 - figure out what you're going to be doing
08:00 - while you're writing code which is
08:01 - actually the way most people end up
08:03 - doing things what you should be doing
08:05 - instead is spending a bit of time before
08:07 - you write any code and breaking your
08:10 - problem down into smaller problems and
08:12 - eventually very small tasks that are
08:14 - discret and easy to understand and that
08:16 - you can Implement one at a time ideally
08:19 - before you get into any code you have a
08:21 - list of tasks these tasks are in an
08:23 - order and you know okay I need to do
08:25 - this first then I'm going to do this
08:27 - then I'm going to do this and these
08:29 - individual things are a lot easier for
08:31 - your mind to understand and a lot easier
08:33 - for you to actually code Out imagine
08:35 - coding three or four functions where you
08:38 - know exactly what each function needs to
08:39 - do versus coding an entire project that
08:42 - involves those four functions right
08:43 - since you spent a bit of time beforehand
08:45 - breaking down what it is you needed to
08:47 - write you now have a much easier task to
08:50 - solve rather than trying to solve this
08:51 - huge task all at once okay that's the
08:54 - basic idea and we call this problem
08:56 - decomposition breaking the problem down
08:59 - into smaller tasks that are easier to
09:01 - understand and ultimately easier for you
09:02 - to solve I guarantee you that The
09:04 - Upfront investment of time is actually
09:06 - going to save you a lot of time and make
09:08 - you much more efficient when you are
09:10 - writing code now Beyond this when you
09:12 - are planning especially if you're
09:13 - working on a slightly larger project
09:16 - it's important to do a little bit of
09:17 - research a lot of times the problem
09:19 - you're trying to solve has actually
09:21 - already been solved so you don't need to
09:23 - reinvent the wheel or try to come up
09:24 - with some genius solution you can just
09:27 - go online and you can look up exactly it
09:29 - is that you're trying to do you can read
09:31 - stack Overflow forums you can read
09:33 - documentation you can read articles or
09:35 - research papers and you can come up with
09:37 - a general idea of what it is that you
09:39 - need to do from what other people have
09:41 - done in the past and this is what I do a
09:43 - lot especially now when I'm trying to
09:45 - solve more complex problems you also can
09:47 - go to chat GPT you can type in exactly
09:50 - the problem you're trying to solve and
09:52 - it will often times give you a highlevel
09:54 - overview of the different types of
09:55 - solutions you can use and then you can
09:57 - pick one and adjusted to your needs so
10:00 - it's always important do a little bit of
10:02 - research and just Googling for a few
10:03 - minutes could genuinely save you a
10:05 - massive amount of time and you can even
10:07 - find there's a library that does this
10:08 - there's a framework that's already built
10:10 - and you now don't need to go build the
10:12 - thing you were planning on building
10:13 - beforehand anyways I think with that
10:15 - said guys I'm going to wrap up the video
10:16 - here I hope you found this helpful and I
10:19 - know that these three things were really
10:20 - what helped me get better at programming
10:23 - and feel confident to write pretty much
10:25 - any type of code any project and solve
10:27 - any kind of problem I hope that they
10:29 - will help you do the same and I look
10:30 - forward to seeing you in another YouTube
10:34 - [Music]
10:41 - video