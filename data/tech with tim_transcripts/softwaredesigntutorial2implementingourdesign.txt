00:02 - [Music]
00:07 - hello everyone and welcome back to part
00:09 - two of designing software systems
00:11 - now i'm making this video because there
00:13 - was a lot of demand to actually code out
00:15 - the system that we had designed and
00:16 - planned out in the previous video
00:18 - so if you guys appreciate this please do
00:20 - leave a like on the video and subscribe
00:22 - to the channel if you are not
00:23 - already what we're going to be doing is
00:25 - just taking this design that we kind of
00:27 - planned out in the previous video
00:29 - and translating this into some python
00:31 - code now i want to make it very clear
00:33 - here before we get started
00:34 - that what i'm doing here is just my
00:36 - opinion of what the best way to go
00:38 - is this isn't necessarily the only
00:40 - correct way there's many different ways
00:42 - you can implement systems like this
00:44 - and you know three four different people
00:46 - looking at this design are probably
00:47 - going to have different code that
00:48 - implements it
00:49 - so just keep that in mind that if you
00:51 - maybe have a different idea of how you'd
00:53 - want to do something
00:54 - it's not necessarily incorrect and i
00:56 - might actually make mistakes throughout
00:57 - this video and i'd love if you point
00:59 - them out in the comments down below
01:00 - so that i can learn from them and so
01:02 - that everyone else watching this video
01:03 - can see those as well
01:05 - so anyways with that being said let's go
01:07 - ahead and start coding this
01:08 - out but the first step to actually
01:10 - coding this out is going to be to
01:12 - determine where we should start
01:14 - now picking where to start can sometimes
01:16 - be a little bit overwhelming especially
01:17 - if you have a ton of different classes
01:19 - and a very large system
01:20 - the rule of thumb for me is usually just
01:22 - to pick the simplest classes
01:24 - and start programming those ones out
01:25 - first the ones that have the least
01:27 - amount of associations
01:28 - you know only a few properties maybe not
01:30 - such complicated methods
01:32 - and just start kind of at least making a
01:33 - template for those classes
01:35 - and getting those kind of into the
01:36 - system and then slowly you can start
01:38 - building your way into the more
01:39 - complex ones so my approach for this
01:42 - diagram right here
01:43 - is going to be to start with this
01:44 - address class the reason for that is
01:46 - because in my opinion this is the
01:48 - simplest it has one association between
01:50 - person
01:51 - and address so one association with
01:52 - person and it only has
01:54 - attributes inside of it as country city
01:56 - state and then i believe we had
01:58 - province and what else oh sorry no
02:01 - country city state
02:03 - postal code and street address were the
02:05 - attributes we have for address
02:06 - so pretty simple class and something
02:08 - that i think is good to start with
02:10 - next i'm going to go to person the
02:12 - reason i'm going to code out person is
02:13 - because this is an abstract based class
02:15 - for the student class and the professor
02:17 - class
02:18 - so i have to program this one before i
02:20 - program student and professor so of
02:22 - course that logically makes sense to do
02:24 - and then after i do person i'm gonna do
02:27 - student and professor
02:28 - because they simply inherit from person
02:30 - and then i'm gonna do course and enroll
02:32 - probably do course first and then enroll
02:35 - because enroll has an association
02:36 - between course and student
02:38 - so it makes sense to program enroll once
02:40 - all the other classes it's associated
02:42 - with are finished
02:43 - so that's kind of my game plan here
02:45 - things might change we might go on some
02:47 - different tangents as we go through the
02:48 - video
02:49 - but that's just kind of how i decide
02:51 - where i want to start
02:53 - so let's go and start programming
02:54 - address now notice that what i've done
02:56 - is i've just made a new folder
02:58 - and i've just put a new file in here
02:59 - they don't have anything in them right
03:01 - now they're just placeholders
03:02 - they're named the same as each of my
03:04 - classes now usually this is common
03:06 - practice and it's good to do just to
03:08 - make
03:09 - all of your classes in different files
03:12 - that are named
03:12 - that class so for example i'm going to
03:14 - do class person
03:17 - inside of the person.pi file right it
03:19 - just makes it way easier when you're
03:21 - importing stuff and finding things later
03:23 - but it doesn't really matter you can do
03:24 - all these in one file if you really want
03:27 - so i'm going to go ahead over here to
03:29 - address.pi i'm going to start making
03:31 - this class now this one's really simple
03:32 - it doesn't have any inheritance or
03:34 - anything like that
03:35 - we're just going to define our
03:36 - constructor which is something that
03:38 - we have to think about a little bit so
03:40 - when we make these classes
03:42 - they have a bunch of properties right
03:44 - and a bunch of different attributes and
03:45 - and all of that fun stuff
03:47 - so how do we decide what the constructor
03:49 - for all of our classes should look like
03:51 - well usually what i do is i take any of
03:54 - the attributes here
03:55 - and i say okay are these necessary do i
03:57 - need to have them
03:58 - when i create this class and if the
04:01 - answer is yes then i put them in the
04:03 - constructor
04:03 - now if there's any attributes there that
04:05 - aren't necessary that maybe are only
04:07 - going to be created or instantiated
04:09 - later in the class's life
04:10 - then i don't put them in the constructor
04:13 - now another thing to consider is
04:14 - associations
04:15 - so for example we have person and
04:17 - address which are associated together
04:19 - now each address will belong to simply
04:21 - one person right that's kind of what we
04:23 - decided beforehand
04:24 - so we could technically say that we want
04:27 - to have
04:28 - a person class in the constructor of
04:30 - address
04:31 - because every single address belongs to
04:32 - one person and we want that address to
04:34 - know what person it belongs to
04:36 - now we actually don't really need to do
04:39 - that because
04:40 - for this um system itself i don't think
04:43 - it matters if the address
04:44 - knows what person uh it belongs to right
04:47 - i think the address is just
04:48 - an object that stores you know the state
04:50 - of the address like this is where the
04:52 - address is just
04:53 - information and i don't think it needs
04:55 - to know what person actually
04:57 - is living at that address so i'm not
04:59 - going to actually associate
05:01 - going if i can get uh can i get this pen
05:03 - here yeah let's let's do some drawing
05:05 - i'm not actually going to do the
05:06 - association in this direction i'm only
05:08 - going to do the association
05:10 - in this direction so this is where we
05:11 - also talk about directional associations
05:13 - you can have an association that only
05:15 - goes one way
05:16 - and what that means is that one of the
05:18 - classes can view the other but the other
05:20 - cannot view
05:21 - that other class now i said other like
05:23 - six times there but hopefully that makes
05:25 - sense we're only going to associate
05:26 - person to address
05:28 - not address to person that's something
05:30 - we probably should have specified when
05:31 - we did the original design
05:33 - but not a huge deal and again as i said
05:34 - things will change
05:36 - as you actually go into the
05:37 - implementation so let's now
05:39 - just finish coding this out so we're
05:40 - going to say self
05:42 - country state city
05:46 - street and postal code like that so
05:49 - that's going to be what we have in our
05:50 - constructor
05:50 - and then we're just going to have to
05:52 - link all of these to a self attribute so
05:54 - self.country equals country
05:56 - self.state equals state self.city
06:00 - equals city self dot
06:04 - street equals street and self dot postal
06:06 - equals postal
06:08 - now i'm just going to change the name of
06:09 - this one to be postal code
06:11 - just because i think that's what we used
06:12 - when we were actually planning out
06:14 - this uh what do you call it this class
06:16 - so just to say consistent
06:17 - and with that the address class is
06:19 - pretty much finished we actually don't
06:21 - need to do anything else
06:22 - this is all we really need inside of
06:24 - this class and again the reason i
06:25 - decided to program it first
06:27 - so now that we've done address i'm going
06:28 - to move over to person i'm going to
06:30 - start programming this one
06:31 - now the first thing i'm going to do
06:33 - since the person class is actually going
06:34 - to be associated with the address class
06:36 - is i'm going to import that address
06:38 - class so i'm going to say from address
06:41 - import address like that now the way
06:43 - this works is that when you have files
06:45 - inside of the same folder
06:46 - you can simply name the python file
06:48 - without the dot pi extension
06:50 - and you can say from this python file
06:53 - import
06:54 - the class address that's all i'm doing
06:56 - i'm just saying okay
06:57 - let's look inside of this address file
06:59 - here and let's take
07:00 - this class and import it into here all
07:03 - i'm doing pretty straightforward
07:05 - now what i'm going to do is i'm going to
07:06 - say class person like that
07:08 - i'm going to define the constructor for
07:10 - my person
07:12 - now we always start with self but let's
07:13 - see what else we need inside of person
07:15 - so you need a first name last name date
07:17 - of birth and phone number so let's add
07:19 - that so i'm just going to say first last
07:22 - dob for date of birth and then phone
07:26 - now it doesn't really matter what you
07:27 - name these what is more important is
07:29 - what you
07:30 - name the self attribute so i'm going to
07:31 - say self.first
07:33 - underscore oops first underscore name
07:36 - equals first i'm going to say self.last
07:38 - underscore name
07:39 - equals last self.date underscore
07:44 - of underscore birth
07:47 - equals dob which just stands for date of
07:49 - birth and then self.phone
07:51 - equals phone now we're not quite done
07:53 - yet
07:54 - because we actually need to figure out
07:55 - how we're going to deal with this
07:57 - association
07:58 - which is a one to one to many with
08:00 - person and address
08:01 - so essentially what this is saying is
08:03 - that each person has to have
08:05 - at least one address but can have many
08:08 - so how do we deal with that association
08:10 - how do we actually create that
08:12 - well what i'm going to do here is i'm
08:14 - actually going to put
08:15 - address like that now this is because
08:18 - what i'm saying is that okay whenever we
08:20 - create a person
08:22 - we need to have at least one address
08:24 - that that person
08:25 - has so i say address like that and that
08:28 - is going to be a mandatory thing that we
08:30 - need to pass
08:31 - in now the question is what is this
08:33 - address like is it actually an
08:35 - instance of address of the class address
08:37 - or is it a list
08:38 - of different addresses right because if
08:40 - we look back at our diagram here
08:42 - we can have many different addresses we
08:44 - don't just have to have one
08:46 - so how do we determine if they're just
08:48 - getting one if they're getting many
08:50 - how do we deal with that right well this
08:52 - is where things can get a little bit
08:53 - tricky
08:54 - but i'm going to show you kind of my
08:56 - solution to this and again there might
08:57 - be better ways to do this but this is
08:58 - what i'm going to do
08:59 - so i'm going to say self.address is so
09:02 - self.addresses
09:03 - because there are multiple addresses
09:05 - equals a blank list
09:07 - and what i'm going to do is i'm going to
09:08 - allow this address parameter here this
09:11 - yeah address parameter
09:12 - to either be a list or to be an actual
09:14 - instance
09:15 - of an address and what i'm going to do
09:17 - is when this address is passed in
09:19 - i'm going to verify that this is the
09:21 - correct type
09:22 - and if it's not i'm going to raise an
09:24 - error to the user and say hey you know
09:26 - this is wrong
09:27 - pass me the right thing now this is good
09:29 - practice
09:30 - to make sure that your parameters are
09:32 - passed in as the correct type
09:34 - because python is not a typed language
09:36 - so if you want to make sure that you're
09:37 - getting the correct types and set
09:39 - inside of your classes then what you
09:41 - want to do is you want to
09:42 - verify that the types that are passed in
09:44 - as the parameters are correct
09:46 - so the way that we can do this is we can
09:47 - look at this address parameter here
09:49 - and we can check if it's an instance of
09:52 - this address class
09:53 - or if it's an instance of a list so if
09:56 - it's an instance of an address class
09:57 - then what we're going to assume is they
09:58 - passed us one
10:00 - address so when they made a new person
10:01 - they said something like you know
10:03 - person and then they blank blank
10:05 - whatever for all the other stuff so dot
10:07 - dot dot
10:08 - and then they passed us like an address
10:10 - that had you know all the information
10:12 - inside of it
10:12 - that's a potential what they could also
10:14 - pass us that would be valid would be
10:16 - something like and just ignore the other
10:18 - arguments there
10:20 - and then a list that has address classes
10:23 - inside of it right so that's another
10:25 - thing that they could pass in
10:26 - because we could either have one address
10:28 - or we could have many addresses
10:29 - associated with this person
10:31 - so we have to check for these two forms
10:33 - and make sure that those are valid
10:35 - so what i'm going to do is i'm going to
10:37 - say underneath here and we could put
10:39 - this in another method if we wanted to
10:40 - but i'll just write it in here for now
10:42 - if address is
10:45 - instance and then in this case address
10:49 - we will simply say self.addresses
10:52 - dot append address so we'll say if this
10:55 - is a singular instance of the class
10:57 - address which we've imported here
10:59 - then simply append that to our addresses
11:02 - list
11:02 - we'll say else well actually we can say
11:05 - l if address
11:08 - is oops i don't think i have to have
11:11 - double is a sorry just should be
11:13 - is instance and then in this case
11:16 - i believe i've been doing this wrong
11:18 - we're going to say is instance of
11:21 - address list like that
11:25 - then we can do something else here which
11:26 - i'm going to talk about in a second but
11:27 - let me just fix this one up here
11:29 - so sorry guys what we actually have to
11:31 - do is just say
11:33 - if is instance address address so we
11:35 - don't have to say address is instance
11:37 - that's just my bottom
11:39 - speaking other languages here but is
11:41 - instance address which is what was
11:42 - passed in
11:43 - of the class address then we append that
11:45 - to the addresses list
11:47 - otherwise if is instance address a list
11:50 - then what we need to do is make sure
11:52 - that each entry in the list is an
11:53 - address so we're going to say 4
11:56 - you know entry in address
12:00 - if is instance entry
12:05 - address like that then we'll keep going
12:08 - so actually what i'm going to say is if
12:10 - not is instance entry address and if we
12:13 - spell entry correctly
12:15 - then i'm going to raise an error that
12:17 - simply says
12:20 - in valid address like that dot dot
12:24 - dot so i'm just telling the user that
12:25 - hey this was invalid you gave me address
12:28 - that wasn't okay and i'm just crashing
12:30 - to make sure
12:31 - that they know hey this is wrong you
12:33 - need to give me a valid address this is
12:35 - just good practice
12:36 - i'd rather crash when someone creates
12:38 - the class than later on in the class's
12:40 - life
12:40 - when they try to do something and then
12:42 - it's not valid because they created it
12:44 - incorrectly that's just my idea behind
12:45 - this
12:46 - then what we'll say is self dot
12:48 - addresses
12:49 - equals address so what i've essentially
12:51 - done is said okay you know if it's a
12:53 - singular instance append it to our list
12:55 - if it's a list and all of the entries in
12:58 - that list are actually an instance of
12:59 - the address class
13:00 - then what we can do is just make this
13:02 - self.addresses attribute equal to the
13:04 - list that they passed in
13:05 - and then later on we can you know append
13:07 - things in here if we want to add another
13:08 - address and so on
13:09 - so the next thing i'm going to do is
13:10 - make a method here i'm going to say add
13:12 - underscore address
13:13 - like that we're going to go self we're
13:15 - going to take an address
13:17 - i'm going to do the same thing here
13:18 - we're going to say if not is
13:20 - instance address address
13:23 - then what we're going to do and actually
13:25 - let me just add an else statement here
13:26 - guys
13:28 - oops it's going to have to be after this
13:31 - so we'll go else
13:35 - raise error and then here we'll say
13:38 - in valid
13:43 - address dot dot dot so the reason i
13:45 - added this elf statement sorry i'm
13:47 - getting ahead of myself
13:48 - is because if it's not in these two
13:50 - forms if neither of these two is valid
13:52 - then it was invalid so we just tell them
13:53 - it's an invalid address
13:55 - okay so next one add address if not is
13:57 - instance address
13:59 - address then what we'll do is we'll
14:00 - raise the error and we'll say
14:03 - again invalid address dot dot dot
14:06 - a little bit repetitive but that's fine
14:08 - and then if that's fine so if we get
14:10 - past this if statement here
14:12 - what we'll simply do is we'll say self
14:13 - dot addresses
14:15 - dot append and the address like that
14:19 - awesome so that is add address we could
14:20 - add one for delete address as well but
14:22 - for now i think that's fine
14:24 - we're going to leave the person class at
14:25 - that so now we're going to do student
14:27 - and professor
14:28 - so you can see we've finished this one
14:30 - up we've checked that address is valid
14:33 - so we've done the is instance stuff
14:35 - we've raised our errors again the errors
14:37 - are to make sure we can't create an
14:38 - invalid class so that things crash now
14:41 - rather than crashing later which is kind
14:43 - of just
14:43 - better in software development you want
14:45 - that to happen and now we'll go ahead
14:47 - and do student and person which are
14:48 - going to inherit from person
14:50 - us student person student and professor
14:52 - so student
14:53 - has one extra attribute on it which is
14:55 - international and then it has is part
14:57 - time and
14:58 - probation as two methods so we're going
15:00 - to have to implement those as well
15:02 - but let's go ahead and make the student
15:04 - class so we're going to start by
15:05 - importing this person class because we
15:07 - need to inherit from it
15:08 - so we're going to say from person
15:12 - import person like that we're going to
15:14 - say class
15:16 - student like that inherits from person
15:20 - so in python this is the basic
15:21 - inheritance you just put it in brackets
15:23 - like that
15:23 - and now this means that the base class
15:25 - is person and the derived
15:27 - child class is student now we're going
15:29 - to start by defining our constructor
15:31 - now since we are inheriting from person
15:34 - we need to have the same constructor as
15:36 - person
15:36 - except with a few extra attributes that
15:38 - are going to be specific to student
15:40 - so i'm just going to copy these so we
15:42 - have define
15:43 - init self first last dob phone
15:47 - address and then what else do we have on
15:49 - student we had
15:50 - international like that
15:53 - so i think i spelt that correctly i'll
15:55 - make this a default parameter and just
15:56 - set it at false
15:58 - so what this means is that if you don't
16:00 - pass any value for international
16:02 - we're just going to assume that the
16:03 - student is not international
16:05 - that's a good practice as well for
16:07 - things that you may not necessarily
16:08 - always need to pass
16:09 - you can just make them a default
16:11 - parameter and then be kind of the class
16:13 - can assume if it doesn't see
16:14 - that no the student is not international
16:17 - so what we'll do here is we're going to
16:18 - say super
16:20 - like that dot underscore underscore net
16:22 - underscore underscore
16:24 - and we're gonna go inside here we're
16:25 - gonna say self first
16:28 - if we could get this correct last dob
16:32 - phone and address and what this is gonna
16:34 - do is simply call the person constructor
16:37 - with these arguments that we pass here
16:40 - then what the person class is going to
16:42 - do is it's going to assign
16:43 - all of these attributes that we've had
16:44 - here it's going to do this check that we
16:46 - had here inside of the init
16:48 - and then all we have to do is say
16:50 - self.international
16:51 - equals international so this will assign
16:54 - all of our
16:54 - properties attributes whatever you want
16:56 - to call them we can add one extra here
16:58 - that wasn't in
16:59 - this constructor and we're good to go
17:01 - and that's again one of the reasons we
17:02 - use this as a base class
17:04 - because now all that stuff that we wrote
17:06 - inside of here
17:07 - we can simply use by just writing super
17:09 - dot init and then passing the arguments
17:11 - that we need
17:12 - awesome so now that we have that we need
17:14 - to go back and look at our diagram
17:16 - and think about what associations this
17:18 - student class is going to have
17:20 - so the address association is already
17:22 - handled from our base class person
17:24 - but we are going to actually have
17:26 - another association with this enroll
17:28 - class that we're going to have to handle
17:29 - and oops i did not mean to do that
17:31 - let's get rid of that so need to handle
17:33 - the association with enroll
17:35 - so to do that what i'm going to do is
17:37 - i'm going to say self.enrolled
17:40 - equals a blank list now since when we
17:43 - create a student
17:43 - they're not automatically enrolled in
17:45 - anything there's no need to add anything
17:47 - to the uh
17:48 - what is it the constructor here what
17:50 - we'll do is we'll just add some methods
17:52 - that allow us to add a new enrollment to
17:54 - this student class
17:55 - so this is just a placeholder saying hey
17:57 - we're going to have an attribute that
17:58 - holds all of these enrollments
18:00 - and that will handle kind of the
18:02 - association between our student
18:04 - and our enrollment and that is as easy
18:06 - as it is so we're gonna define here add
18:08 - underscore
18:09 - i guess enrollment you can call these
18:12 - whatever you want i'm going to go with
18:13 - add enrollment
18:14 - we're going to take enroll like that and
18:17 - then what we're going to do is the same
18:18 - check that we've done before
18:20 - and we're going to make sure that this
18:22 - enroll here is actually a valid enroll
18:24 - class
18:24 - now since i've yet to code out the
18:26 - enroll class what i'm going to do in
18:28 - here is just go
18:28 - class and roll and just go pass for now
18:32 - just so that when i import this i don't
18:34 - get a crash so i think
18:36 - enroll i don't know if it's spelled with
18:37 - two l's or one excuse me if i'm spelling
18:39 - this wrong but i think
18:40 - it can be either way but regardless
18:43 - let's just
18:43 - stay consistent and let's go enrolled
18:47 - i don't know if that looks right i want
18:48 - to go 2l's let's just go 2l's uh and
18:50 - we'll change the name of this file so
18:52 - enroll
18:53 - and let me rename this one here to
18:56 - enroll okay so we've just done a
18:58 - placeholder just so i can import this
18:59 - from
19:00 - student so i'm going to say from enroll
19:04 - import and roll like that now we're
19:06 - going to do the same thing we did
19:07 - previously we're going to say if
19:09 - not is instance and rule enroll
19:13 - and this will have to have our two l's
19:15 - here then what we'll do is we'll simply
19:17 - raise
19:18 - an error like that and we'll say
19:22 - in valid in rule
19:25 - right and that's as easy as that is we
19:28 - can add that dot dot dot just stay
19:29 - consistent again it doesn't really
19:30 - matter
19:31 - and then what we'll do is say self dot
19:32 - enrolled
19:34 - dot append enroll like that so there we
19:37 - go we now have a way
19:38 - to add enrollments to a student and
19:40 - let's go back to student and check what
19:41 - else we need to do
19:42 - so we've already handled international
19:44 - we've handled the association between
19:46 - enroll and now we need is part-time and
19:48 - probation
19:49 - so i remember that i believe is
19:51 - part-time is if you're taking
19:53 - less than three classes you're
19:55 - considered part-time i forget exactly
19:57 - what the document said but we're just
19:58 - going to assume that for now
19:59 - and pre-probation i believe it was if
20:01 - your grade point average is less than 65
20:04 - then you're on probation so we don't
20:05 - necessarily need to implement these yet
20:07 - but we can say is define um what is
20:11 - is on probation
20:14 - like that this can be a self and for now
20:17 - we're just going to return false and
20:18 - we'll come back later and
20:20 - implement these methods just once we've
20:22 - coded out the enroll class so then we'll
20:24 - know how grades are handled and this
20:25 - will make more sense
20:27 - and then we're going to define is oops
20:30 - is underscore part underscore
20:33 - time like that self and now we're just
20:36 - going to return
20:37 - false as well and again we'll come back
20:38 - and implement this later once we have a
20:40 - better idea of how the enroll class
20:42 - actually works
20:43 - although now that i'm thinking about it
20:45 - what we can do is just say return
20:48 - the len of self dot enrolled
20:52 - is less than sorry is part time
20:55 - it's less than or equal to three so what
20:58 - this is saying is that if you have less
20:59 - than
20:59 - uh or equal to three classes so three
21:01 - two or one classes
21:03 - or zero i guess then you are considered
21:05 - a part-time student
21:06 - if this number is greater than this of
21:08 - course you're not going to be a
21:09 - part-time student
21:10 - so that's the student class now we're
21:12 - gonna go ahead and do the professor
21:13 - class
21:14 - so we're gonna go ahead and import
21:15 - person as well so we're going to say
21:17 - from person
21:17 - import person and now we're going to say
21:19 - class
21:22 - professor inherit from person
21:25 - and then we're going to do define
21:27 - underscore underscore init
21:29 - i'm going to go look at the professor
21:30 - class and see what we need here
21:32 - so the only main difference between
21:34 - professor and person is that it has this
21:36 - salary attribute here
21:37 - so let's go ahead and add that and we'll
21:39 - need to handle the association between
21:41 - course
21:42 - and then we'll code out course and
21:43 - enroll we should be done actually
21:45 - programming this system
21:46 - so we're going to say that we need the
21:48 - same stuff as person
21:50 - so need all of that so we'll paste that
21:53 - inside of here
21:54 - and what else do we need we need a
21:57 - salary
21:58 - all right so now we'll do the same thing
21:59 - we did inside of students so we'll say
22:01 - oops not self super dot underscore
22:04 - underscore knit
22:06 - we'll pass all of this stuff in except
22:08 - for salary of course
22:10 - and then what we'll do is we'll say self
22:12 - dot salary
22:13 - equals salary and we've done it the
22:16 - constructor
22:17 - except for the association with course
22:18 - so now we'll just say self
22:20 - dot courses equals a blank list like
22:24 - that now i remember that professor
22:27 - actually had
22:28 - are given a raise if they teach a
22:30 - certain amount of courses
22:31 - now we didn't actually define a method
22:34 - that we have on professor to handle you
22:36 - know
22:36 - do they get a raise or not but what i'm
22:38 - going to do is i'm just going to make a
22:39 - method here that says define
22:42 - check underscore for underscore raise
22:45 - and what this will do is just check to
22:47 - see if the professor deserves arrays
22:49 - based on how many courses that they're
22:50 - teaching so i think it was something
22:52 - like if they teach more than four
22:53 - courses
22:54 - a semester or five courses or whatever
22:55 - it is then they get a twenty thousand
22:57 - dollar raise so all i'm going to do here
23:00 - this is kind of just like mocking how
23:02 - you would really do this because this
23:03 - isn't necessarily
23:04 - precise i'm going to say if the length
23:07 - of
23:08 - self.courses is greater than or equal to
23:11 - 4
23:12 - then self.salary plus equals
23:16 - 20 000. so this is just going to say
23:18 - okay check for raise so whenever we call
23:19 - this and technically you can call this
23:21 - many different times if you wanted to
23:23 - right then we will add 20 000
23:26 - to the salary if they teach more than
23:27 - four courses now i'm just going to make
23:29 - another attribute here i'm going to say
23:31 - self.got
23:32 - underscore raise and i'm going to set
23:34 - this equal to false and this is just
23:36 - going to make sure
23:37 - that we can't get this raise multiple
23:39 - times so i'm going to say
23:41 - once we give them the raise self.got
23:44 - oops
23:45 - got underscore raise equals true and
23:48 - then i'm going to add inside of this if
23:49 - statement if the length of self.course
23:51 - is greater than or equal to 4
23:53 - and self.got raise so and
23:56 - not self.got raise then we'll go ahead
24:00 - and do this so again just to make sure
24:01 - that we can't just spam this and keep
24:03 - raising the professor's salary
24:05 - and have some level of kind of security
24:08 - here on the professor's salary because
24:09 - obviously that's an important thing
24:11 - now next what i'm going to do is i'm
24:13 - going to say define
24:15 - add underscore course so of course you
24:17 - need a way to
24:18 - add a course to this professor's course
24:20 - list so we're gonna say
24:21 - self and then we're gonna say course
24:23 - like that
24:24 - and then we're gonna do the same thing
24:25 - we've done many times before which is
24:28 - means we need to go over here to course
24:29 - and say class
24:31 - course like that and just do a pass so
24:34 - we can import this from inside a
24:36 - professor
24:37 - so now we're going to say from course
24:40 - import course and we're going to check
24:43 - to make sure that this is an instance
24:44 - so we're going to say if not is instance
24:48 - course of course then raise
24:51 - error like that and just tell them
24:55 - in valid course
24:58 - dot dot okay then we'll say self dot
25:02 - courses dot append course like that
25:05 - awesome so with that i believe the
25:08 - professor class
25:09 - should be done so we finished person
25:11 - student professor
25:12 - and address and now we need to do course
25:14 - and enroll
25:15 - now i believe i said i was gonna do
25:16 - course first so we'll do that and let's
25:18 - just look at what's in course so we have
25:20 - name
25:21 - code min max and is canceled now course
25:24 - is associated with professor
25:26 - and with enroll and you need at least
25:28 - one professor
25:30 - for a course to actually be run so when
25:32 - you create a course you
25:33 - need to give it a professor so that
25:35 - means inside of our courses uh what do
25:37 - you call it constructor we're gonna need
25:39 - to have a professor
25:40 - as an argument or as a parameter so
25:42 - let's go ahead and add that
25:43 - let's go define underscore underscore
25:46 - init
25:46 - underscore underscore itself we need a
25:48 - name for the course the code
25:50 - the max the min um what else was in this
25:54 - course i believe
25:55 - max min code name and then professor
25:58 - okay
25:59 - so professor awesome now since professor
26:02 - class is finished we can go ahead and
26:04 - import that at the top so we're going to
26:05 - say from
26:07 - professor import
26:12 - professor like that now we'll do the
26:15 - same thing we've done many times so
26:16 - we'll say self.name
26:17 - equals name self.code equals
26:22 - code self dot max
26:25 - equals max self.min equals min
26:29 - don't worry that these are highlighting
26:31 - this just means that this is a reserved
26:32 - keyword in python min
26:34 - and max uh i'm just going to be
26:36 - overriding them for this class it's not
26:38 - a huge deal although you usually don't
26:39 - want to do this so i could do something
26:40 - like max underscore
26:42 - min underscore just to avoid that so
26:45 - that we don't get those highlights so
26:46 - let's actually do that max min
26:48 - and then we'll say self.professor and
26:50 - usually i just say this equals professor
26:52 - but for now i'm going to say it's a
26:53 - blank
26:54 - list and the reason for that is because
26:56 - we need to check
26:57 - if this professor is one professor if
26:59 - it's a list of professors and if it's
27:01 - valid so again if we go back to our
27:03 - diagram we can see that we have a one to
27:05 - many
27:06 - associated with many which means a
27:08 - professor doesn't necessarily
27:09 - automatically teach a course when it's
27:12 - when a professor object is created
27:14 - but when we create a course object we
27:17 - must have at least one professor
27:18 - teaching that course so we're going to
27:20 - have to do the same thing we did inside
27:22 - of
27:23 - a person here with the address so i'm
27:25 - actually going to copy all of this here
27:27 - i'm just going to change the word
27:28 - address to be professor
27:30 - and that's because it's going to be
27:32 - handling the exact same thing but inside
27:34 - of the the course class so we're just
27:36 - going to say
27:37 - if is instance and i guess i can
27:39 - actually just do a control
27:40 - h here and i'll just say oh how'd it
27:43 - know that professor was what i wanted
27:44 - there
27:45 - wait address will replace address with
27:49 - professor
27:50 - and that should actually be good so
27:52 - let's go replace all
27:53 - so that's done everything except
27:56 - professors so we actually need to add
27:58 - es to this so professors is it
28:01 - professors yes or is it just
28:03 - s i'm just going to do s for now
28:04 - although i don't know if that's correct
28:07 - but that actually should be good so it
28:09 - says if is instance
28:11 - professor professor so this just needs
28:13 - to be a capital
28:14 - then we'll append into the professor's
28:17 - list
28:18 - that professor otherwise if instance
28:21 - professor list
28:22 - for entry in professor if not is
28:24 - instance
28:25 - entry professor with a capital p then
28:28 - raise error invalid professor
28:30 - and then self.professors equals
28:31 - professor uh
28:33 - awesome invalid professor okay so i
28:35 - think that looks good you guys can read
28:36 - through that if you're a little bit
28:37 - confused but again it's doing the exact
28:39 - same thing that i explained
28:41 - when we handled the address inside of
28:42 - person this time just with professor
28:45 - because it has that same
28:47 - lower bound of one up to many
28:49 - association
28:50 - okay so next we need a way to actually
28:53 - add courses
28:54 - to a professor sorry add professors to a
28:56 - course because say we're in the middle
28:58 - of a course
28:58 - maybe the professor changes or maybe we
29:00 - need to add a new professor
29:01 - that's something that could happen so
29:03 - we're gonna say define add underscore
29:06 - professor like that and i believe it's
29:09 - one
29:10 - f and two s's we're gonna say self
29:13 - professor and then inside of here we're
29:15 - gonna say if
29:16 - not is instance professor
29:20 - professor raise
29:23 - error like that and we're just going to
29:25 - raise error
29:27 - invalid professor like that
29:30 - dot dot okay then if that is good we'll
29:33 - say self
29:34 - dot professors dot append professor
29:38 - and we should be good to go so with that
29:40 - i don't know if course is done or not
29:43 - i think we have to add a method or two
29:44 - so we need to add the is
29:46 - canceled method and we actually need an
29:48 - association from course to enroll which
29:51 - i had forgotten
29:52 - so i'm going to go up here and i'm going
29:52 - to say self dot enroll
29:56 - mints like that is equal to a blank list
29:58 - we're going to do a very similar thing
30:00 - that we did with the student class when
30:02 - we were adding enrollments like that
30:05 - to the course so self.enrollments i
30:07 - think that makes sense to call this
30:09 - enrollments because you were enrolled in
30:10 - the course
30:12 - and then on the student side enrolled i
30:13 - think makes sense as well
30:15 - but let's add a way to actually add
30:17 - enrollments to this uh
30:18 - to this course so that's also going to
30:20 - involve first of all implementing enroll
30:22 - so from enroll import enroll
30:27 - and now let's go define add underscore
30:31 - enrollment we're going to take self
30:34 - and enroll and we'll do the same thing
30:36 - we've done before we're going to say
30:38 - if not is instance
30:41 - enroll enroll then raise error
30:47 - invalid enroll and then what we'll do is
30:49 - otherwise we'll say self.enrollments
30:52 - dot append in rule now the only thing we
30:54 - need to consider here is this max and
30:56 - this min
30:57 - so obviously we cannot enroll over the
30:59 - max so we'll have to do another check
31:01 - here
31:02 - that says if so we'll say if
31:06 - i guess the len of enrollment
31:10 - is equal to the max so
31:13 - so we'll say self.max like that then we
31:16 - need to raise an
31:18 - error that simply says cannot
31:22 - enroll course
31:25 - is full dot dot dot just to tell them
31:28 - that hey
31:28 - you know we can't enroll you in this
31:30 - because this course is
31:32 - full and that means that they need to do
31:33 - a check before they go ahead and enroll
31:35 - someone in here and make sure
31:36 - that it is not full so what i'm going to
31:38 - do here i'm going to say now
31:40 - add the other method that we needed so
31:42 - is canceled so we're going to say define
31:43 - is underscore canceled we can call this
31:47 - at any time
31:48 - and self is going to be in here and what
31:50 - we're going to do is simply return
31:53 - the len of self dot enrollment because
31:56 - that tells us how many people are
31:57 - enrolled
31:58 - is greater than or equal to self.min
32:01 - and actually sorry this is going to be
32:03 - less than or equal to so what this is
32:05 - saying is okay you know the course is
32:06 - canceled if we have
32:08 - less enrollments than the minimum amount
32:10 - of enrollments that we need i just got
32:12 - rid of that equal sign because
32:13 - if we're at the min we're not cancelled
32:15 - it's only if we're less than the minimum
32:17 - amount of students
32:18 - so with that i think that course is done
32:22 - again it might be a good idea to add a
32:23 - way to remove professor and remove
32:26 - enrollments
32:27 - but for the purpose of this video i'm
32:28 - not going to add that and the last thing
32:30 - we need to do is actually code out this
32:32 - class for enroll
32:33 - now this one is a very easy class to do
32:36 - this simply has an association
32:38 - between let's have a look at it here a
32:41 - professor or sorry not a professor a
32:43 - course and a student
32:45 - so this enroll class needs to have a
32:48 - student and needs to have a
32:49 - course on it right so he needs to have
32:52 - that associated
32:53 - and it needs to have the date that they
32:55 - were enrolled and the grade that they
32:57 - were um
32:57 - that they were given for that course
32:59 - that the professor
33:01 - that has access to the course will be
33:02 - able to change so the reason that the
33:05 - professor will be able to change the
33:06 - grade for a student is because
33:08 - it has a link to the course let me just
33:10 - make this full screen here so it has an
33:12 - association of the course
33:13 - so we can see what courses it's teaching
33:16 - it can go into the course it can look at
33:17 - all of the enrollments for that course
33:19 - and then for all inside of all those
33:21 - enrollments it can access the grade and
33:23 - it can change the grade for a specific
33:25 - student that's associated with that
33:27 - enrollment so that allows the professor
33:30 - to actually change the grade of a
33:32 - student so i just wanted to make that
33:33 - clear in case anyone's confused on how
33:34 - that would happen
33:36 - let's go class enroll we'll say define a
33:38 - net what we need for enroll is we need a
33:40 - person which is going to be our student
33:42 - and we need a course
33:44 - so same thing here we'll make sure that
33:46 - the student and the course are valid so
33:48 - we're going to have to import those here
33:49 - so we're going to say
33:50 - from course import
33:53 - course no not lowercase oops go back we
33:56 - want the
33:57 - capital and we'll say from student
34:00 - is it here i guess not from student
34:03 - import student
34:05 - so now we'll say if not
34:09 - is instant student student
34:12 - or not is instant
34:19 - of course if we get this typing
34:21 - correctly and in fact what i'm actually
34:22 - going to do is put this on another line
34:24 - just so we can have two custom error
34:25 - messages then what we'll do is the same
34:27 - thing we've done many times
34:29 - we'll say raise error
34:32 - invalid student
34:36 - dot dot dot and then same thing here
34:38 - we'll say
34:39 - raise error
34:42 - in valid course now let's assume that
34:46 - those ones are okay so we our student
34:47 - and our course are fine
34:49 - then we'll say self.student equals
34:52 - student
34:53 - and self.course equals course and we're
34:55 - going to say self.grade
34:56 - equals none because currently it has no
34:59 - grade and then we'll say self.date
35:02 - equals and here i'm going to import date
35:04 - so i'm going to say from
35:06 - actually i think it's datetime from
35:07 - datetime
35:09 - import datetime and i'm going to say
35:13 - datetime.now
35:15 - so that should give us the current time
35:17 - i think that's valid this
35:18 - might be incorrect but i'm pretty sure
35:20 - that's how you get the current time and
35:21 - then what this will do is automatically
35:23 - when a new enrollment happens it will
35:25 - keep track of the time that that
35:26 - enrollment occurred at
35:27 - we'll say the grade is none and then
35:29 - we'll add a method that says define
35:31 - set underscore grade we can go self
35:34 - grade and we can just say self.grade
35:38 - equals grade like that now there's other
35:40 - ways to go about doing this this is just
35:42 - a simple way so i'm going to do that
35:43 - here
35:44 - and this means anyone that can see this
35:46 - enroll class can just look at it and say
35:48 - hey
35:49 - set grade self.grade equals grade or
35:51 - just pass a grade in here and it will
35:53 - automatically set that grade
35:54 - for the student so with that all of our
35:57 - classes are actually finished
35:59 - and that is how you go about translating
36:02 - a uml class diagram
36:03 - to an actual system now of course
36:06 - currently
36:07 - none of this is really you know
36:08 - functioning right none of this is
36:10 - actually working these things nothing's
36:11 - being created
36:12 - we'd have to actually make a program
36:14 - that uses this class
36:15 - uses these classes to test it but the
36:18 - point of this was to show you
36:19 - pretty much how we handle these
36:20 - associations and some common practice in
36:23 - terms of
36:23 - checking the validity of different
36:25 - arguments right so in python a non-typed
36:27 - language
36:28 - we need to do something like this just
36:30 - to make sure
36:31 - that when items are passed in or
36:33 - arguments are passed in they're valid
36:35 - and that we don't have a class that has
36:37 - all these weird things that we we're not
36:39 - expecting right
36:40 - the general idea is we want to crash
36:42 - before we actually start running the
36:44 - program
36:44 - so i want to crash when someone you know
36:47 - creates an
36:47 - invalid person object rather than when
36:50 - the person tries to access something on
36:52 - the person object and it's not the item
36:54 - they were expecting right
36:55 - it just makes it easier to crash earlier
36:57 - on so that someone knows hey i need to
37:00 - make sure i add a valid address and they
37:02 - don't you know go through the whole
37:03 - program with a valid address inside of
37:05 - the person object
37:06 - and can't figure that out until later
37:08 - when it crashes at some random point in
37:09 - time right
37:10 - that's the idea behind that i hope that
37:12 - is kind of making sense
37:14 - and again that's kind of how you go
37:15 - about implementing this now as i said
37:18 - um you know there's many different ways
37:19 - to do this and in fact there's probably
37:20 - a lot of other methods and things that
37:22 - we should be adding to these classes
37:24 - for the purpose of this video i'm not
37:26 - going to do that because i don't want to
37:27 - get super complicated i don't want to go
37:29 - into actually doing a full
37:30 - implementation because again that's
37:31 - going to take a really long time
37:33 - but if you notice any holes or gaps in
37:35 - here please do leave a comment
37:36 - and let's have a conversation in the
37:38 - comments down below hopefully at minimum
37:40 - this video showed you you know the basic
37:42 - idea you know how you get started
37:43 - what you have to do when you make a base
37:45 - class like i've done here how you do the
37:47 - inheritance with student
37:49 - and with professor you know how you add
37:51 - some methods like this and how you
37:52 - should implement them
37:54 - how you can do something like this so we
37:55 - have this uh this class here that has
37:57 - just
37:58 - two uh what is it association student
38:00 - and course
38:01 - so we have self.student equals student
38:03 - self.course equals course
38:04 - and now from the course side if we look
38:06 - at an enrollment we can see
38:08 - what student is involved in that
38:10 - enrollment we can modify their grade
38:12 - and then the student themselves can look
38:13 - at their enrollment and they can see
38:15 - their grade right
38:16 - many different things like that is what
38:18 - i wanted to show so i think with that
38:20 - being said i'm going to end the video
38:21 - here
38:22 - of course any questions please do leave
38:23 - them down below in the comments
38:25 - like the video if you did enjoy
38:27 - subscribe to the channel and i will see
38:28 - you guys in another
38:29 - youtube video