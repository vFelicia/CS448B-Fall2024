00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video
00:11 - so in today's video i'm going to be
00:13 - discussing micro services and
00:14 - specifically the micro
00:16 - service architecture now not only will i
00:18 - explain to you what this is
00:19 - what is a micro service what is a micro
00:21 - service architecture but i will explain
00:23 - to you
00:24 - how you can actually implement these
00:25 - properly and effectively
00:27 - and some key points that you want to
00:28 - think about as you go about building out
00:30 - micro services for whatever program
00:32 - application or system it is that you are
00:34 - building now one thing i do need to note
00:36 - here is that i am absolutely no expert
00:38 - when it comes to micro services
00:40 - and that is why for this video i have
00:41 - teamed up with a company called
00:43 - blazedpath not only are they the sponsor
00:45 - of this video but they've helped me come
00:46 - up with a lot of the content i'm going
00:48 - to share with you right now
00:49 - so let's quickly have a word from them
00:51 - because they are actually a company
00:52 - that helps you implement microservices
00:54 - and scale your applications
00:56 - this video is sponsored by blaze path
00:59 - blazed path is a proven
01:00 - low code platform that can help you
01:02 - build applications with ease
01:04 - you can start with a simple application
01:06 - and the platform integrates all of the
01:07 - tools you need to grow
01:09 - scale and turn it into a big enterprise
01:11 - grade project
01:12 - inside blazepath you design build and
01:14 - deploy distributed microservices in the
01:16 - cloud
01:17 - with the help of a lot of integrated
01:18 - tools standard technologies embedded
01:20 - security consistency and integrity
01:22 - validations
01:23 - your team can be hyper productive and
01:25 - get the job done 10 times faster than
01:26 - with traditional development
01:28 - the best part of blazepath is that there
01:30 - are no vendor lock-ins and it produces
01:31 - human readable code
01:33 - that means that you can deploy your
01:34 - application anywhere you want and
01:36 - there's nothing that keeps your project
01:37 - captive in the platform
01:39 - blazedpath lets you manage the
01:40 - end-to-end lifecycle of your project
01:42 - microservices
01:43 - it handles security scalability logging
01:45 - apis message queues and
01:47 - cache blazedpath handles the continuous
01:49 - delivery of microservices features
01:51 - considering all of these and more
01:53 - critical aspects of distributed
01:54 - architectures that we will touch on in
01:56 - this video
01:57 - you can try blazepath for free with the
01:59 - link down in the description
02:00 - create your free account download your
02:02 - local studio and get additional credits
02:04 - using this link
02:05 - the one in the description thanks
02:06 - blazepath for sponsoring this video and
02:08 - now let's dive into it
02:10 - all right so i've said the word
02:11 - microservice about a hundred times so
02:13 - it's probably important that i define
02:14 - that so let's go ahead and do that
02:16 - now so specifically i'll define what a
02:18 - microservice architecture is and then
02:19 - that will kind of explain to you the
02:20 - rest of it
02:21 - so the micro service architecture is
02:23 - concerned with looking at a large system
02:26 - and splitting that system into a ton of
02:28 - small
02:29 - independent components that are loosely
02:31 - coupled and
02:32 - not dependent on each other now they
02:34 - communicate with each other
02:35 - traditionally using a lightweight
02:36 - communication protocol
02:38 - that is not associated with a specific
02:40 - programming language
02:41 - so when i say that part what i'm talking
02:42 - about is using a protocol like http or
02:44 - json or rest apis
02:46 - something that it doesn't matter what
02:47 - programming language you're using you
02:49 - can communicate with these different
02:50 - micro services
02:51 - so that is why they are called micro
02:53 - services because there's a ton of very
02:55 - very very small
02:56 - services that make up one large system
02:58 - as a whole and usually to group these
03:00 - services together you would use
03:02 - something like an api
03:03 - that's capable of kind of you know
03:05 - combining these services and
03:07 - just making them more easily available
03:09 - rather than having you know 500
03:10 - different services you need to look at
03:12 - or manage or something like that
03:14 - anyways the advantage of the
03:15 - microservice architecture
03:17 - is that scaling your application is much
03:19 - much easier
03:20 - development is usually simpler and just
03:23 - having independent components
03:24 - makes your life easier now i'll give you
03:26 - an example of what happens
03:27 - when you have a very large system that
03:29 - is not split into smaller components
03:32 - so let's imagine we're building like an
03:33 - online shopping platform
03:35 - now we take everything related to this
03:37 - online shopping platform
03:38 - you know the transactions actually
03:40 - purchasing something the inventory
03:41 - system the recommendation system
03:43 - the user's profile everything there the
03:45 - vendors all of that stuff and we
03:47 - throw that into one application one kind
03:49 - of source code block we put that on one
03:51 - server whatever
03:52 - now you can obviously imagine that
03:54 - different parts of these systems are
03:55 - going to have different performance
03:56 - requirements
03:57 - maybe your transaction parts actually
03:59 - buying something is is very easy that
04:00 - doesn't require a lot of resources
04:02 - maybe that doesn't have a ton of
04:04 - requests being sent to it whatever
04:05 - then maybe your machine learning
04:07 - recommendation model that needs a ton of
04:08 - different resources to work
04:10 - properly well now if you want to make
04:12 - your system faster or more performant or
04:14 - scalable
04:15 - you have to just provide more resources
04:17 - to this one thing you don't have options
04:19 - you can't just give more resources to
04:21 - your machine learning model you can't
04:22 - just give more resources to the
04:24 - inventory system
04:25 - all you have the option to do is give
04:26 - more resources to the one system as a
04:28 - whole
04:29 - and that makes it very very difficult to
04:30 - scale because it's hard to distribute
04:32 - those resources evenly between what
04:34 - actually needs them
04:35 - now on the same kind of note here same
04:37 - kind of thought it's very difficult to
04:39 - go and modify anything in this system if
04:41 - you want to go and change
04:42 - something there's a good chance that
04:43 - since everything's so deeply kind of
04:45 - wound together
04:46 - that your change here is going to affect
04:47 - all of the different parts of the system
04:49 - it's really easy to break something and
04:51 - if you want to be able to modify
04:52 - something
04:53 - usually you need an experienced engineer
04:55 - who's worked in this code base before
04:57 - to actually know what you can and cannot
04:59 - do and where you would even look to go
05:01 - and change a specific part of the system
05:03 - so hopefully this is kind of
05:04 - illustrating to you why it's usually a
05:06 - better idea
05:07 - to have your system split into small
05:08 - components that
05:10 - kind of fewer people are managing rather
05:12 - than having this large code base that
05:14 - just has a bunch of engineers that are
05:15 - trying to work on the exact same thing
05:17 - so that's kind of the advantage of
05:19 - microservices and what i'm going to do
05:20 - is give you a real world example here
05:22 - of a company that transitioned to
05:24 - microservices because of this reason
05:26 - so the reason i'm going to give you here
05:28 - is netflix so netflix obviously very
05:30 - large company
05:31 - has to deal with scalability issues all
05:33 - the time right we saw this in the
05:34 - pandemic
05:34 - they had what is it way too much demand
05:37 - and so you can only stream video in like
05:39 - 480p or something for a few days at
05:41 - least here in canada that that happened
05:42 - to us
05:43 - so back in 2003 2004 when netflix was i
05:46 - guess still a large company but a bit
05:47 - smaller
05:48 - uh they did not have their system in a
05:49 - bunch of different micro services they
05:51 - had maybe a few
05:52 - different components but everything was
05:53 - deeply wound together it was this very
05:55 - large system
05:56 - and they still had a ton of developers
05:57 - that were working on this and so that
05:58 - meant
05:59 - every time they wanted to do something
06:00 - add something delete something
06:02 - it was a huge hassle they're looking
06:03 - through millions of lines of code
06:05 - and it was just really difficult to do
06:06 - something without potentially breaking
06:08 - another part of the system
06:09 - and what happened was at one point in
06:11 - time they had three days of complete
06:13 - outage
06:13 - due to just too much demand and they
06:15 - weren't able to scale their system
06:17 - because of the fact that they didn't
06:18 - have these things kind of split into
06:20 - different separate components
06:22 - micro services so what they had to do
06:24 - was rewrite the entire code base
06:26 - pretty much and implement a micro
06:28 - service architecture
06:29 - so they could handle the demand that
06:31 - they were having and what they ended up
06:32 - doing was having very small micro
06:34 - services that were handled by small
06:36 - teams of developers maybe you know eight
06:37 - to ten people
06:38 - which is actually proven to be like the
06:40 - most effective uh
06:42 - team size something around the eight to
06:43 - ten people mark because those people can
06:45 - understand the code in the product
06:47 - they're working on very very well
06:49 - and then they can obviously make changes
06:50 - a lot faster than if they had to
06:51 - understand a super massive large code
06:54 - so that's just giving you an example
06:55 - there a lot of other large companies
06:57 - have done this as well
06:58 - uber facebook amazon you name them any
07:00 - of these tech giants
07:02 - one of the reasons they're so successful
07:03 - is because they can scale
07:05 - everything up or down based on the
07:07 - volume that they have and they can
07:08 - handle
07:09 - billions upon billions of users every
07:11 - day based on the architecture that
07:12 - they've implemented
07:14 - so a lot of companies will start out by
07:16 - not implementing a micro service
07:17 - architecture
07:18 - then realize that hey i can't scale this
07:20 - application to the level i need it to be
07:22 - at
07:22 - and then have to rewrite a lot of things
07:24 - and implement the micro service
07:26 - architecture to kind of handle all of
07:27 - the flaws that i stated
07:28 - with having this just kind of large code
07:30 - base where everything is deeply
07:32 - deeply connected together so hopefully
07:34 - that gave you an idea of what
07:35 - microservices are and kind of the
07:36 - advantage
07:37 - of this infrastructure so what i'm
07:39 - actually going to do now is explain to
07:41 - you
07:41 - some of the things you need to think
07:42 - about when you are trying to implement a
07:44 - micro service architecture
07:46 - because i'm making it sound relatively
07:48 - simple just split everything into these
07:49 - individual components
07:51 - but how do these components connect to
07:52 - each other how do they communicate with
07:54 - each other how is data going to be
07:55 - consistent across
07:56 - how is security enforced how do you
07:58 - actually go about scaling these things
07:59 - and making sure you have good
08:00 - performance
08:01 - that's kind of what i'm going to briefly
08:02 - talk about now so let's go ahead and get
08:05 - into that part of the video so the first
08:06 - thing you need to think about when
08:08 - you're implementing a microservice
08:09 - architecture is
08:10 - dependencies so the whole point of the
08:13 - microservice architecture is to have a
08:14 - bunch of
08:15 - independent components that can be
08:17 - hosted on their own can be deployed on
08:19 - their own
08:20 - and that are not highly dependent on the
08:22 - rest of the system
08:23 - however to have a system that works your
08:25 - components do need to work together and
08:27 - so the way in which your components
08:29 - communicate with each other
08:30 - is extremely extremely important and you
08:32 - really need to think about your
08:33 - communication
08:34 - protocol as you're building out
08:36 - microservices to ensure
08:38 - that your individual microservices are
08:40 - not highly dependent or
08:41 - linked to each other if you have a bunch
08:44 - of microservices
08:44 - but all of them rely on each other all
08:46 - of them cannot be hosted independently
08:49 - a change in one microservice is
08:50 - affecting the other one heavily
08:52 - you've pretty much implemented the same
08:53 - problem you had before when you didn't
08:55 - have microservices
08:56 - but now you just have a bunch of
08:57 - individual components that are kind of
08:58 - split up
08:59 - but still highly reliant on each other
09:01 - so you want to make sure you avoid
09:03 - you know deep dependencies between your
09:04 - micro services and the way you do that
09:06 - is by thinking about the way in which
09:08 - these services communicate with each
09:09 - other
09:10 - and that's why at the beginning of the
09:11 - video when i was explaining what
09:12 - microservices are
09:13 - i said you want to make sure you have a
09:15 - lightweight communication protocol
09:17 - something like json uh something like
09:18 - rest apis something like
09:20 - message streams maybe you have publish
09:22 - and subscribe patterns whatever it is
09:25 - something like that that's relatively
09:26 - easy to keep consistent
09:28 - across most of your different uh
09:29 - microservices and where a change in
09:32 - communication between the microservices
09:34 - has relatively you know minor effects on
09:37 - other services
09:38 - obviously you're going to have these
09:39 - services they're going to be
09:40 - communicating with each other
09:41 - and well if you change one it will have
09:43 - some slight effects on the other one but
09:44 - you want to minimize what that is
09:46 - and so you really have to think about
09:47 - the way in which you communicate and
09:49 - that's kind of what this first section
09:50 - is about
09:51 - again i'm not an absolute expert on this
09:53 - this stuff takes a lot of experience
09:55 - time and you know research to kind of
09:56 - figure out
09:57 - but that's one thing to think about is
09:59 - how these different services are
10:00 - dependent on each other so the next
10:02 - thing you need to think about as you are
10:03 - implementing the micro service
10:04 - architecture is
10:05 - consistency specifically data
10:07 - consistency
10:08 - so when you have a ton of small
10:10 - independent services chances are they're
10:12 - going to need to use the same data
10:14 - and oftentimes they're going to be
10:15 - storing copies of the same data
10:18 - now in one micro service though you may
10:20 - modify the data
10:22 - so how do you make sure that the data is
10:24 - going to be consistent across all of the
10:26 - micro services
10:27 - and you're not going to have conflicts
10:29 - between two of these different services
10:31 - where they have two different pieces of
10:32 - data
10:32 - and you don't know which piece of data
10:34 - is correct well i can't really give you
10:36 - the exact answer to this question
10:37 - because it's highly dependent on what
10:39 - exactly you are doing
10:40 - but there's a lot of design patterns and
10:41 - kind of architectural things that you
10:43 - can think about and implement
10:44 - to make sure this is the case now to
10:46 - give you a real world example of where
10:47 - this actually becomes a problem
10:49 - think about youtube oftentimes you guys
10:51 - go and refresh my video
10:52 - and the view count you see is not the
10:54 - actual view count of this video
10:56 - and that is because youtube has probably
10:58 - hundreds of thousands of servers
11:00 - running constantly picking up and
11:02 - counting all of these views and it's
11:03 - actually a very very advanced algorithm
11:05 - they use to determine
11:06 - what the correct number of views are but
11:08 - on my back end here on youtube i see a
11:10 - different view count than you guys see
11:12 - and that is an example of one of the
11:13 - problems with microservices
11:15 - is data consistency and you have to make
11:17 - sure you're thinking about this
11:18 - as you're implementing it because
11:20 - obviously that's could be a huge huge
11:22 - problem especially if you're talking
11:23 - about you know maybe different passwords
11:24 - or authentication
11:26 - and stuff that's very very sensitive
11:28 - data right anyways that's what i want to
11:30 - talk about for this section
11:31 - now let's move on to the next one so the
11:33 - next thing you need to think about as
11:34 - you're implementing this micro service
11:35 - architecture is
11:36 - performance now of course one of the
11:38 - core advantages of this architecture is
11:40 - that
11:40 - if anything is lagging behind as being
11:42 - slow you can go and
11:44 - individually scale up that component but
11:47 - how do you know which component is the
11:49 - slowest and why does it actually matter
11:51 - to really kind of analyze your system
11:53 - and figure out what compute power you
11:54 - need where
11:55 - well your system is going to perform at
11:57 - the speed of the slowest component
11:59 - right kind of that famous metaphor or
12:01 - quote or whatever it is
12:02 - the chain is only as strong as its
12:04 - weakest link same thing applies here to
12:06 - software development
12:07 - if the rest of your system is blazing
12:08 - fast but you have one part that's really
12:10 - really slow
12:11 - well your system is going to be slow and
12:13 - so you need to make sure
12:14 - that you're able to analyze and figure
12:16 - out which parts of your system need more
12:18 - resources
12:18 - and are more performant heavy and then
12:20 - obviously kind of take care of that
12:22 - and scale the system up accordingly so
12:24 - just something to consider the
12:25 - performance of your system and making
12:27 - sure that each of your components
12:28 - are performing at the level they need to
12:30 - be so that the whole system as a whole
12:32 - is not being bogged down by one
12:33 - individual component all right so the
12:35 - next thing to consider as you are
12:36 - implementing this architecture is
12:37 - scalability
12:38 - now of course one of the main reasons
12:40 - you would have gone with this
12:40 - architecture
12:41 - is because you want to be able to scale
12:43 - your system relatively easily
12:44 - but you still need to have a plan and
12:46 - understand how you're actually going to
12:48 - scale it
12:49 - and you need to design your system with
12:51 - that in mind such that you are able to
12:53 - scale it vertically or horizontally
12:55 - now there's two kind of common ways of
12:57 - scaling the vertical way
12:58 - simply means kind of making your server
13:00 - or your deployment
13:02 - platform sorry more powerful so maybe
13:04 - you have a server with two cpus and you
13:05 - add two more and you give it four cpus
13:07 - and
13:07 - boom you've scaled it vertically now it
13:09 - has more power but you also can scale
13:11 - horizontally
13:12 - where rather than just making your
13:13 - server more powerful maybe you add more
13:15 - servers right maybe you have
13:16 - five instances of the same kind of api
13:19 - whereas you could have one that's just
13:20 - super super powerful so you need to kind
13:22 - of understand
13:23 - what is going to be the best way to
13:24 - actually go about scaling your system
13:26 - now again i'm not expert in this i don't
13:28 - claim to have all of the answers but the
13:30 - things that you want to consider
13:31 - as you are designing your system and
13:33 - implementing a microservice architecture
13:36 - all right so the last point i have for
13:37 - you to consider when you are
13:38 - implementing
13:39 - this architecture is security now this
13:41 - is arguably the most
13:43 - important but you have to imagine that
13:44 - your security does become a little bit
13:46 - more complex
13:47 - when you have a ton of different
13:49 - individual components
13:50 - or services you need to make sure that
13:52 - all of these are using the same
13:54 - standardized way of authenticating users
13:56 - that you have some central way of
13:58 - actually authenticating and
14:00 - authorizing your users and distributing
14:02 - tokens and all those kind of things
14:03 - so to conclude here i will quickly kind
14:05 - of summarize what we've talked about
14:07 - the microservice architecture is
14:09 - concerned with splitting things up into
14:11 - individual components
14:12 - that are loosely coupled easy to work on
14:14 - and can be deployed independently of
14:16 - each other
14:17 - this is going to lead you to faster
14:19 - development times just easier
14:21 - development in general you can have
14:22 - small teams working on individual
14:23 - components which is what happens now at
14:25 - pretty much any successful
14:27 - large tech company and the micro service
14:29 - architecture does have a lot of things
14:30 - you need to consider when you build it
14:32 - but it is very advantageous if you can
14:34 - design it in a way
14:35 - such that all of those concerns that i
14:37 - kind of listed can be mitigated and kind
14:39 - of
14:39 - can be handled by what it is that you're
14:40 - doing so with that said i'm going to
14:42 - conclude the video here i hope you guys
14:44 - enjoyed if you did make sure to leave a
14:45 - like
14:45 - subscribe to the channel and i will see
14:47 - you in another one