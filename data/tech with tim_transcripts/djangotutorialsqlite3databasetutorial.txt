00:00 - hey guys and welcome back to another
00:01 - django tutorial so in today's video what
00:04 - we're gonna be doing is going through
00:05 - databases so how to set up databases add
00:07 - entries retrieve entries all that kind
00:10 - of stuff this will be kind of a beginner
00:12 - ish tutorial on databases I'm not gonna
00:14 - be going through absolutely everything
00:15 - as there's a ton of stuff to cover but I
00:18 - will give you guys a very good
00:19 - foundation and pretty much everything
00:21 - you actually need to be able to use the
00:22 - database then obviously you could
00:24 - probably look up some more stuff if you
00:26 - need that in the future now the database
00:28 - that we will be using is sqlite3
00:30 - now there is other kinds of databases
00:32 - that you can use but if you're a
00:34 - beginner and for our purposes SQLite is
00:36 - just the best and easiest to use it
00:39 - doesn't really make a massive difference
00:40 - if you use the other ones however if
00:42 - you'd like to use those go ahead and I
00:44 - will be showing you briefly how you can
00:46 - actually change your database now the
00:49 - reason I'm not going into templates and
00:50 - more advanced HTML right now is because
00:52 - likely the information that we're
00:55 - storing in our database is actually what
00:56 - we're gonna be wanting to show within
00:58 - our models or starting out models within
01:00 - our templates and HTML so it kind of
01:03 - makes sense to make the information
01:04 - first and then display it afterwards
01:06 - within templates and all that so we're
01:09 - not kind of redundantly typing things
01:12 - and modifying things later so with that
01:14 - being said let's get started now our
01:17 - first step when we're going to be
01:18 - working with the database is we actually
01:19 - need to modify our settings dot Pi file
01:22 - inside of our interior my site directory
01:25 - now to do this obviously we're just
01:27 - gonna go to settings up pi what we need
01:29 - to do is need to scroll down to
01:31 - installed apps we need to add our
01:33 - application in this case called main for
01:36 - me to our installed apps and the reason
01:38 - we need to do this is because when we're
01:40 - gonna be working with databases and just
01:42 - some things in the future
01:43 - we need to tell Jango that we have
01:45 - another application that has some
01:47 - dependencies and things that need to be
01:48 - set up inside of our project so to do
01:52 - this what we're gonna do is just go
01:53 - single quotes right at the end of this
01:55 - what do you call it wherever the comma
01:57 - is and we're just gonna type the name of
01:59 - our application in this case mine is
02:00 - called main yours this might be called
02:02 - something else and then we're gonna type
02:03 - dot apps dots and then main config and
02:09 - then add a comma after that now
02:11 - obviously if yours is named something
02:12 - else you're gonna change the
02:13 - so you can add a capital letter for
02:15 - whatever the name is and then yeah just
02:17 - put it there and and that'll work for
02:19 - you okay so we've done that and now
02:21 - we've told Jango that we actually have
02:23 - this application main and we need it to
02:26 - be configured and set up when we make
02:28 - some modifications to our project and
02:30 - stuff like that
02:31 - so our next the next thing that we
02:33 - actually have to do is we need to get
02:34 - into our my site directory so the same
02:37 - directory that has that managed up hi
02:39 - file in it and we have to run the
02:41 - following command which is Python
02:43 - managed up high and then migrate now
02:48 - when you type this what do you call it
02:51 - yours might yours should likely pop up
02:54 - like a bunch of text that says making
02:55 - migrations making changes now since I've
02:58 - done this because I was testing it
03:00 - before it's not showing that for me but
03:01 - you should do that what I've just done
03:03 - here essentially said we've updated the
03:05 - settings top PI file so let's run
03:07 - managed up high and get it to make any
03:09 - changes to the project that it might
03:11 - need to do and that's as far as I'm kind
03:13 - of gonna explain that all right so we've
03:15 - done that and now we're actually ready
03:17 - to start defining some of our models for
03:19 - our database so if you don't know how to
03:21 - a database works essentially it's just a
03:23 - collection of information and what we're
03:25 - gonna be doing is defining some models
03:27 - and some attributes that kind of go with
03:30 - each of the models and the model is just
03:32 - a way of well modeling information and
03:35 - it makes it just easier for us to grab
03:37 - information and we can add attributes to
03:39 - those models we can add some methods to
03:40 - them you guys will see how it works in
03:43 - just a second but essentially if we want
03:45 - to create a model what we're gonna do is
03:46 - we just going to create a class with the
03:48 - name of our model and we're gonna
03:49 - inherit it from models dot model which
03:52 - is like a database model class setup
03:55 - from Django already now for this
03:58 - application that I'm gonna write I want
03:59 - to create a to-do list so to do this I'm
04:02 - going to create two models one which is
04:04 - a to-do list and then the other one
04:06 - which is items that go on our to-do list
04:08 - and you guys will see how this works in
04:09 - a second so I'm just gonna say class
04:11 - to-do lists like this and it is going to
04:15 - inherit from models dot model now this
04:19 - essentially means that we're creating a
04:20 - database object which is called to-do
04:23 - list and now we're going to define some
04:25 - of the attributes and
04:27 - trees that each model to-do list is
04:30 - gonna have so our Fuhrer to-do list I'm
04:32 - gonna have a name so I'm gonna say name
04:34 - is equal to and in this case models char
04:39 - field and I'm gonna say max underscore
04:42 - length equals 200 now whenever we create
04:46 - a new attribute or yeah I guess just
04:49 - attribute of our information of our
04:52 - model what we do is we create it as a
04:54 - class variable and we simply do the name
04:57 - of the attribute and then we have to do
04:58 - the type of field that we want to be
05:01 - stored in our database all right guys
05:03 - I'm back so I don't a quick cut there
05:04 - cuz getting a phone call what I'm gonna
05:06 - do now is just define a method we'll
05:08 - just call this STR and I'm just gonna
05:11 - put self in here and simply return self
05:13 - thought name just so that if we ever
05:15 - want to print this out or see what it
05:17 - actually looks like we can get some
05:18 - meaningful text by using the string
05:20 - method on that so next what we're gonna
05:23 - do is define our other model which is
05:25 - item so same as before this will inherit
05:28 - from model stock model and this is gonna
05:30 - have some attributes as well now item is
05:33 - a little bit different just because it's
05:34 - actually related to to-do list and we're
05:37 - going to have items as a part of our
05:39 - to-do list so to do this again what
05:42 - we're gonna do is simply say to do list
05:46 - equals and in this case we'll say models
05:49 - duck for in foreign key and then in here
05:53 - we're gonna type to-do lists like that
05:57 - I'm gonna say on delete equals models
06:02 - dot cascade now the reason we're doing
06:06 - this is because remember how look up
06:10 - here we have character field right which
06:11 - is a type of field that we could store
06:13 - information in well we don't actually
06:16 - know the type of field or Django doesn't
06:18 - know the type of field that to-do list
06:20 - is because it's an object that's not
06:22 - defined within Django so we have to
06:24 - define the fact that we're gonna use a
06:25 - foreign key in this case a to do list
06:28 - object when we create an item okay and
06:31 - that's what we're doing now on delete is
06:33 - just saying well if we delete to do list
06:35 - since all items exist on a to do list
06:38 - we're gonna have to delete these as well
06:40 - and I've
06:40 - that's what on cascade is doing is just
06:42 - defining the fact that this has a
06:44 - special way of being removed okay so our
06:46 - next attribute is gonna be name so I'm
06:49 - gonna say R sorry not name will be text
06:51 - and text is gonna be equal to a
06:53 - character field as well and a character
06:55 - field is essentially just a string note
06:57 - that you do need this max length
06:58 - whenever you create a character string
07:00 - so make sure you add that in this case
07:01 - let's just make that 300 and now we will
07:03 - add one more field which will be a
07:06 - boolean field so models the boolean
07:10 - field and it'll just represent whether
07:12 - or not we've completed the item on our
07:14 - to-do list same thing here for string so
07:17 - self and we'll just return the text so
07:20 - return self dot text now remember in the
07:24 - future we can add to these models and
07:25 - modify them so for now I'm just keeping
07:27 - it simple we don't need anything too
07:28 - complex alright so now that we've done
07:31 - that we've modified our models we
07:33 - actually have to tell Django that we've
07:34 - modified our models and to do that what
07:37 - we're gonna do is we're gonna make sure
07:38 - we're in that same directory so my site
07:40 - I'm gonna say Python managed dot pie
07:44 - make migrations in this case we'll put
07:49 - the name of our app which is me now yes
07:53 - that's K so this should work and let's
07:55 - hit enter here and see what we get
07:57 - alright so there we go so now when you
07:59 - do that you should see something that
08:00 - says migrations for and then the name of
08:03 - your app which should be main and says
08:05 - we created a model to-do list and we
08:06 - created a model item now making
08:08 - migrations is similar it's like adding
08:10 - something to the staging area and get if
08:12 - you don't know what this is don't worry
08:13 - but it's similar to version control in
08:15 - that we make a change it'll save the
08:19 - change and then we can actually apply
08:20 - that change to our project so if I want
08:24 - to apply this change right now I've only
08:26 - made it I haven't actually applied it
08:27 - what I have to do is go python managed
08:31 - up high and then migrate and there we go
08:35 - it says applying migrations and it has
08:37 - applied the migrations and you should
08:39 - see if you go inside of your migrations
08:41 - folder inside of your app you should get
08:43 - something that looks like this and you
08:45 - can see if you actually open it up it
08:46 - tells you the exact migrations or
08:48 - changes that were made in case we have
08:50 - ID ID is automatically added for
08:54 - of the different models that you create
08:57 - as a field we have the name which is a
08:59 - character field we have text complete
09:01 - and to-do list there we go so that's
09:05 - kind of how that works it's nice because
09:07 - you can go back and view previous
09:09 - changes and then obviously revert to
09:11 - other changes by just using those files
09:13 - so yeah all right so now that we've done
09:16 - that what's actually next is to add some
09:19 - things into our database so right now we
09:20 - have a fully functioning database and
09:22 - I'm gonna show you how we can add stuff
09:24 - to it now the easiest way to show you is
09:26 - just from the command line because we'll
09:28 - just mess around with a few different
09:29 - commands get the syntax down and then
09:31 - start doing stuff from code so to get
09:33 - into a command line what I'm gonna do is
09:36 - just go Python managed up high and then
09:39 - shell
09:39 - this will open up our Python shell for
09:42 - us which will allow me to add some
09:44 - things into the database now our first
09:46 - step is we're gonna import our models so
09:48 - that we can use some of the methods and
09:50 - we can actually use those models to
09:51 - create objects and store them in the
09:53 - database so I'm gonna say from and in
09:55 - this case main got models because we're
09:57 - not in that main directory well imports
10:00 - what's the name of our models we have
10:02 - item and we have to do list like this
10:06 - there we are so front from main dot
10:08 - models import item and to do list and
10:10 - now what we're gonna do is we're gonna
10:12 - create a to-do list and add it to the
10:14 - database and this is really easy to do
10:16 - so I'm just gonna say T which is gonna
10:18 - be our to-do list will be to do list and
10:20 - then in here I'm just gonna give it a
10:22 - name and I'll say name equals in this
10:25 - case let's just say Tim's like that list
10:29 - sweet so Tim's list and hit enter now if
10:33 - we want to save this into the database
10:34 - watch how easy this is
10:36 - TDOT save and we have actually now saved
10:39 - this into the database and if I want to
10:41 - see all of the different objects what I
10:44 - can do is I can say to do list if I can
10:49 - get the capitalisation correct dot
10:52 - objects dot all and if I do that you can
10:56 - see we get a query set and it says to do
10:58 - list
10:58 - Tim's list and there we go we've
11:01 - successfully stored one to do list in
11:03 - our database so to get all of the to-do
11:07 - list that we have I just did
11:08 - objects dot all and obviously dot
11:10 - objects is just giving objects and dot
11:12 - all is actually gonna give me like a
11:14 - query set which will allow me to access
11:16 - objects now each of our objects have IDs
11:20 - associated with them and they have that
11:22 - name attribute associated with them so
11:24 - if I want to see the ID of some of my
11:26 - objects what I can using is a to-do list
11:29 - and I believe I can say dot gets and
11:32 - then in here I can say ID equals and
11:34 - then in this case the ID is gonna start
11:36 - at one and it's gonna increment as you
11:38 - add more objects but if I do that type
11:41 - up their to do list says no actually you
11:42 - get hmm I believe we might have to do
11:44 - dot objects dog yet dot objects dog get
11:48 - ah there we go so if I do dot objects
11:50 - get and I put the ID which is the thing
11:52 - that I'm looking for ID one you see we
11:54 - get a to-do list and it says Tim's list
11:56 - now if we didn't put that string thing
12:00 - here string method inside of to-do list
12:02 - it wouldn't be saying Tim's list it
12:04 - would be giving us like a memory address
12:05 - awesome so we have that now if we want a
12:08 - query by like name so what this is doing
12:10 - querying just means like getting all of
12:12 - the objects that contain the key you're
12:14 - putting what I can do is just say name
12:16 - equals in this case and say Tim's list
12:21 - like that and obviously it's gonna give
12:22 - me Tim's list now if I try to query for
12:25 - something that's not that doesn't exist
12:27 - like I say ID equals two you see we get
12:29 - an issue because there's no query that
12:31 - exists for ID 2 if I wanted that to work
12:34 - I would have to add another item into
12:36 - the database sweet so that's kind of how
12:39 - you do some of that now if we want to
12:41 - create an item what we can do for items
12:43 - is actually really nice is we can just
12:45 - let's see the best way to actually make
12:48 - an item is hmm let's see this we're
12:52 - gonna do t dot and in this case we're
12:54 - gonna say item underscore set and if I
12:57 - print this out dot all like this you're
13:00 - gonna see we get an empty query set now
13:02 - notice I did item underscore set right
13:06 - which would be an attribute of our to do
13:09 - list T right because we created two
13:11 - lists here we saved it and so the t
13:14 - object is still there but i said item
13:16 - underscore set but i haven't defined
13:17 - item underscore set in here
13:19 - this is is because I've added this
13:22 - relation between items and to-do lists
13:25 - each to-do list automatically is gonna
13:28 - have a set that stores a bunch of
13:30 - different items okay so another way that
13:32 - we add items into our database is a
13:35 - little bit different than how we create
13:36 - the to-do lists now because our items
13:39 - are related to our to-do list there's a
13:42 - special way that we can create them and
13:44 - create them within our to-do list
13:46 - so essentially remember we have that
13:48 - to-do list T I just tab down just a bit
13:50 - more space in its cleaner but we have
13:53 - that object T and if I printed that you
13:55 - can see that's our to-do list Tim's list
13:57 - now because of the relationship we've
13:59 - created here what I can actually do is
14:01 - say Tim underscore and then what item
14:05 - underscore set dot all and it actually
14:09 - gives me a set of items which are
14:12 - exactly these items and you just
14:14 - reference all of this with automatically
14:16 - with a lower case it's what it defaults
14:17 - to and yeah so essentially there is like
14:21 - a blank placeholder for our to-do list a
14:23 - whole too much item because of what we
14:25 - did here so if you want to create an
14:28 - item inside of this item set what we do
14:31 - is we say T dot item underscore set dot
14:34 - create and then here we give the
14:37 - parameters that we need for our item
14:39 - actually need a text and we need
14:40 - complete so what we'll do is we'll say
14:43 - text equals and in this case we'll just
14:46 - say like maybe go to the mall something
14:48 - you have to do and it completes
14:50 - obviously will be equal to false okay so
14:53 - we do that and now we see we have an
14:55 - item that says go to the mall so we've
14:58 - done that now we've created an item
14:59 - inside of our item set now if I do t dot
15:03 - item underscore set and then dot all you
15:08 - can see that we get all of the items and
15:10 - obviously if I want to get one of the
15:13 - items and I can say dot get and in this
15:16 - case it'll be ID one so I say ID one go
15:19 - to the mall again if I try to do ID too
15:21 - we're gonna run into an issue because ID
15:23 - two does not exist alright so now that
15:25 - we've created one item where I would
15:28 - create an item in a to-do list inside of
15:30 - our database what we can do is we can
15:32 - actually
15:33 - lay that information from some of our
15:34 - views and start using the web browser to
15:36 - see this information so the reason I did
15:38 - that from the command line is just
15:40 - because it was a lot it's gonna be a lot
15:41 - faster just to run that and actually add
15:43 - items to our database obviously if we're
15:45 - adding things into our database in
15:47 - future videos we're probably just gonna
15:48 - use our web browser and we'll have like
15:50 - a forum where we can input stuff and
15:52 - it'll automatically be added and that's
15:53 - obviously what we'll be doing later so
15:55 - what I'm gonna do is I'm gonna go to my
15:56 - views now and I'm actually just gonna
15:58 - get rid of u1 which means that if I go
16:00 - to URLs I should remove the path v1 now
16:04 - what I want to do is I want you to be
16:07 - able to type the ID of a certain to-do
16:09 - list in the address bar and it pop up
16:11 - the name of the to-do list and the items
16:14 - that exist in that so to do that I will
16:18 - briefly show a cool thing that we can do
16:22 - with paths and well it will elaborate on
16:24 - it in future videos but essentially I
16:26 - can actually put these two tags in here
16:28 - and say int and then in this case I'll
16:30 - just say IND or ID standing for ID and
16:33 - what this means now is what's gonna
16:35 - happen is we're gonna look for some
16:37 - integer in our path and we're gonna pass
16:41 - that to the function views dot index so
16:43 - that means that index now needs a
16:47 - variable called ID in it and what I can
16:49 - do is well show you basically without
16:51 - the database actually is if I just put
16:53 - like % ID and then or % s sorry and then
16:58 - outside here I do % ID it will actually
17:02 - what do you call it show me whatever
17:04 - number I type in in my what do you call
17:08 - it like all my web browser so I close
17:10 - the command prompt I shouldn't have done
17:12 - that
17:12 - Wow one second I should got a CD into my
17:16 - correct directories here
17:20 - Django CD my site and then we will just
17:24 - simply run our server so we can test
17:26 - this and I can show you what I mean so
17:27 - let's do Python managed up I run server
17:31 - I gotta activate my virtual environment
17:34 - apologize about this guys ok so there we
17:37 - go so we've got this running now so
17:38 - let's go to our web browser and let me
17:40 - show you what I mean by this so if I hit
17:43 - this now you can see we get an issue
17:45 - because it's
17:46 - that it didn't find admin or it didn't
17:48 - find some integer which was an ID so now
17:51 - if I type one in here so like slash one
17:53 - you can see it actually brings me to a
17:55 - page that says one and if I type three
17:57 - in here it brings it to a page says
17:59 - three if I type four we get four and
18:01 - actually anything that we type in that's
18:03 - a number will just show up in here so we
18:05 - do like four eight like it shows up
18:07 - there okay that's like the first kind of
18:09 - way that we can do dynamic pages in
18:11 - terms of the linking alright so what I'm
18:14 - gonna do now is I have this idea
18:15 - obviously so I don't want to just show
18:17 - the ID but I want to get the ID of that
18:20 - object as a to-do list from our database
18:22 - so to do that what I'm gonna do is
18:24 - similar what I've shown in the command
18:25 - line is I'm starting I'm gonna start by
18:27 - importing our models so in this case I'm
18:29 - going to say from dot models import and
18:31 - then this case will just import to do
18:33 - list cuz actually we might need item as
18:35 - well so we'll import item as well so
18:37 - their to do list and item and what I'm
18:39 - gonna do is get that to do list based on
18:42 - the ID so I'm gonna say that I'll say LS
18:46 - is equal to to do lists dot objects done
18:52 - yet
18:53 - and then in this case we'll say ID
18:55 - equals ID right so now we have that to
18:58 - do list object and now instead of
19:00 - printing the ID let's print what do you
19:04 - call it the name of our to-do list so I
19:06 - can just say LS dot name so now we
19:10 - should have made a modification and it
19:12 - should have just our servers running it
19:13 - should just automatically changed let me
19:15 - just copy this link again and if I bring
19:18 - out my tab uh-oh it's already there so
19:21 - if we do this and just change this ID to
19:23 - one now you can see that we actually get
19:25 - Tim's list because again the way this
19:27 - works is we go to URLs we type some
19:30 - number it gets that number it passes it
19:32 - through this function as the value ID
19:36 - we're just gonna say we're gonna go the
19:38 - similar thing we did in the command line
19:40 - little to-do list we got all the objects
19:42 - of type to-do list
19:43 - we'll get the one that has ID one and
19:45 - then we will simply take the name of
19:48 - that and print it to the screen or show
19:49 - it on the screen now again I could
19:52 - change this from ID and I can make it
19:54 - name and I can make the name like Tim's
19:56 - list so you'd have to type that in
19:57 - to get it so we can show that as well so
20:01 - in this case let's just do string and
20:03 - then we'll do name and now we'll just
20:05 - have to make sure that when we type it
20:07 - in our link bar here that we actually
20:09 - type everything correctly and make sure
20:11 - I save all this too if you type the name
20:13 - exactly like this so if I copy that and
20:15 - I put this here you can see that again
20:18 - it's showing up
20:19 - tim's list and we're not running into
20:21 - any issues but if i try to do like two
20:23 - here you can see that we're getting an
20:25 - issue because there's nothing with the
20:27 - name too in our database awesome so
20:30 - that's pretty straightforward that's how
20:31 - we get items and show them on the screen
20:33 - in the next video we'll do way more
20:34 - advanced stuff with this but if I want
20:36 - to get the items that are associated
20:37 - with the to-do list and show those as
20:39 - well well what I can do is let's go back
20:42 - to and now we'll just leave it as name
20:44 - so we don't need to change it now we'll
20:45 - get the items so to get the items we're
20:47 - gonna say items equals and then in this
20:49 - case to do list or actually LS cuz we've
20:53 - already got the to do list dot item
20:55 - underscore set and then dot all and then
20:59 - what we can do is we well we know we
21:01 - only have one item so let's just get the
21:03 - first item so as we just do dot gets and
21:07 - then ID equals one and we'll do is
21:10 - change this percent we'll add another
21:12 - one and we'll simply say item dot name
21:17 - or items not name I guess this should
21:19 - probably just be item will say item
21:21 - don't name or dot text my apologies okay
21:25 - so now that we have item dot text here
21:26 - we got to add another percent in here so
21:28 - I'm just gonna put another tag I'm just
21:30 - gonna say BR and then what do you call
21:33 - it BR just standing for go to the next
21:35 - line and we'll add another tag this case
21:38 - is just gonna be a key tag and we'll
21:41 - just put percent s like that so now if I
21:45 - go back to my bar here and instead of
21:47 - doing T I do
21:49 - Tim's list and I hit enter hmm what's
21:53 - the issue all right so I just realize we
21:55 - actually have to just put this string
21:56 - around item text don't know why that is
21:59 - but apparently that was the issue
22:00 - so anyways now if I go back to my web
22:02 - browser and refresh you can see we sit
22:04 - we get go to the mall now obviously this
22:07 - is a very basic example I'm gonna make
22:08 - this look a lot better in next week
22:10 - and we're not gonna have to do like this
22:12 - kind of weird HTML tagging and whatnot
22:15 - but that's kind of been it for this
22:17 - video I hope you guys have an idea on
22:18 - how to use databases will be continually
22:21 - using them adding things and removing
22:24 - things and all that kind of stuff so if
22:25 - you are still confused we will be going
22:28 - through that in the future videos but I
22:29 - just want to make sure we get everything
22:30 - set up and working for right now
22:32 - and with that being said I will see you
22:33 - guys in the next video
22:35 - [Music]