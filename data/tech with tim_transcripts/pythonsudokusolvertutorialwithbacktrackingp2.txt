00:00 - hey guys and welcome back to part 2 of
00:02 - Sudoku solver with backtracking now I
00:06 - guess let's just get right into if you
00:07 - only go out to more functions actually
00:09 - to code and then we'll go through the
00:10 - solution print out kind of some of the
00:12 - steps and look at exactly how it's
00:14 - working and why it's doing that
00:15 - one more time to just make sure everyone
00:17 - really understand what's actually going
00:19 - on here now what we need to do first of
00:22 - all is remember we were talking about
00:23 - the things we kind of need to do so
00:24 - obviously we need to be able to print
00:25 - the board out just for a nice visual and
00:28 - then we also needed to find empty sorry
00:31 - excuse me spaces which is what we're
00:33 - doing here now the next thing we need to
00:35 - do is find if the current board is valid
00:38 - so given kind of a position and a board
00:42 - check if by like when we try to put that
00:45 - in or given the board is it valid or not
00:48 - ah so to do this is pretty
00:49 - straightforward all we're gonna do is
00:51 - just define valid and we're gonna do is
00:53 - gonna take three parameters which is
00:54 - board number which is the the thing
00:59 - we've inserted and then a position now
01:02 - our position we'd like to come in as has
01:05 - actually missed this IGI here so what
01:08 - we'll do to start is what we need to
01:09 - check three things so essentially we
01:12 - need to check the row B column and kind
01:14 - of little square that would he called
01:17 - that we're in so to do this what we'll
01:19 - simply do is just say well we'll do the
01:22 - first step which is check row now
01:26 - checking the row is pretty
01:27 - straightforward so is checking the
01:28 - column the square is a bit more
01:29 - complicated but it's not that difficult
01:31 - so we're gonna do for the row is we'll
01:32 - simply loop through every single column
01:35 - in the in the given row so to do that
01:38 - well we'll just say for I in range the
01:43 - length of Bo 0 which I mean will be nine
01:48 - but I'm just doing this in case we like
01:49 - made the board bigger or something and
01:52 - then what we'll do is we'll say if Bo
01:55 - and we'll say position which is what
01:58 - we're gonna be given 0 which will stand
02:00 - for actually the row because remember
02:01 - we're gonna get it in as row column so
02:04 - position 0 of pause which will be a
02:06 - tupple will be the row so for this row
02:09 - will check if pause 0 and then
02:13 - equals equals num and if pause one does
02:20 - not equal I and then will simply say
02:23 - this return false now what this does I
02:25 - know I went through this kind of fast is
02:27 - essentially we're gonna check through
02:28 - each column just like each element in
02:32 - the row and we're gonna see if it's
02:34 - equal to whatever the number is that we
02:36 - just added in now what we'll do though
02:39 - is we'll say what do you call it as long
02:42 - at like we're gonna check that but if
02:44 - the position we're checking is actually
02:46 - the position that we we just inserted
02:49 - something into then we won't bother
02:51 - checking that so that's what this does
02:53 - here is essentially says well yeah
02:54 - obviously we're gonna find the number
02:56 - that we're looking for because we just
02:57 - put it in like that so we're gonna do in
02:59 - the other function
03:00 - you're gonna insert it into the board so
03:01 - we'll just make sure that when we're
03:03 - checking through the board that if it's
03:05 - the position we just inserted we ignore
03:07 - that position but if it's any other
03:09 - position obviously that work that's
03:10 - gonna matter because that means we have
03:12 - two of the same numbers in that row
03:14 - right okay so that's that's fine for
03:16 - that so now we're gonna check the column
03:18 - so uh vertically so to do this again
03:22 - it's pretty straightforward we're just
03:23 - gonna say for I in range and then the
03:26 - length of Bo what we're gonna do is
03:29 - literally like the exact same thing as
03:30 - this except we're just gonna change this
03:33 - right here and you'll see this in a
03:35 - second so I'm gonna say instead of this
03:36 - we're gonna say this is I yes that's I
03:39 - and this is pause one and then same
03:43 - thing here will just say if pause zero
03:45 - does not equal I now what this is gonna
03:47 - do is very is same thing as this scope
03:50 - is gonna go down now the weight goes
03:51 - down is we're gonna loop through every
03:53 - single row so 0 to 9 or 0 to 8 I guess
03:56 - in this case and then what we'll do is
03:58 - we'll just check if our current kind of
04:00 - x value or column value is equal to the
04:05 - same number that we just inserted for
04:07 - each row and again we'll make sure that
04:08 - it's not the exact position that we just
04:10 - inserted something into pretty
04:12 - straightforward okay and now we need to
04:14 - actually check like the 3 by 3 little
04:17 - cubes to make sure that the same numbers
04:19 - not in there this one is a bit more
04:21 - confusing but it's not that difficult so
04:24 - we're gonna do is we need to determine
04:25 - kind of way
04:26 - box were in so maybe I can bring up my
04:29 - output here yeah so we need to determine
04:31 - our B in this box this but like one of
04:33 - nine boxes so to do that we're just
04:36 - gonna use a bit of integer division to
04:38 - figure out essentially which box we're
04:40 - in so what I'm gonna say I'm gonna say
04:41 - box underscore X equals and we'll say
04:45 - box underscore y equals and for X all
04:48 - I'm gonna do is I'm gonna get well our
04:50 - exposition which is going to be the
04:51 - first position because that's our column
04:53 - right we're gonna insert your divide
04:55 - that by three and I'm going to say pause
04:58 - zero integer division by three now what
05:03 - this is going to do let me bring up this
05:05 - again is given a position so let's it
05:07 - like this position here is three or is 0
05:10 - 3 right so row 0 column 3 so we're gonna
05:14 - say well what box are we in so if our
05:17 - row is 0 well 0 integer division by 3 is
05:20 - 0 which means we're gonna be in the Box
05:22 - at position 0 ok which means like the
05:26 - highest up level box alright and then
05:29 - what we're gonna be in is well we're
05:31 - gonna be in box 1 in terms of X because
05:35 - well three integer division by 3 is 3 so
05:37 - that means well we're in this box so you
05:39 - can think of it like 0 1 or 1 0 whereas
05:42 - the top here is 0 0 so this box that I'm
05:44 - highlighting in the top left is 0 0 this
05:47 - one would be 0 1 this would be 0 2 then
05:49 - we go 1 0 1 1 1 2 and so on so forth ok
05:54 - that's how we're gonna do the boxes so
05:56 - now that we know what box were in where
05:59 - were we here we're gonna loop through
06:01 - that box so we're simply just going to
06:03 - loop through all nine elements in that
06:06 - box and then again make sure that we
06:08 - don't have the same element appearing
06:09 - twice so to do that is very
06:11 - straightforward we're going to say for I
06:13 - in range and we're gonna say box
06:15 - underscore Y x 3 comma box underscore y
06:21 - x 3 plus 3 and then we're gonna repeat
06:25 - this so I should do that except we're
06:29 - just gonna do J and we're gonna change
06:31 - this to be X and I'll talk about why we
06:33 - do this in one second ok so what are we
06:36 - doing here so essentially why are we
06:37 - multiplying by 3 is the main question
06:39 - well the thing is right
06:40 - this these values are gonna give us
06:42 - either zero one zero one or two so if we
06:45 - get something like two well that means
06:47 - we're in this box right on this side so
06:50 - some are on the far right hand side so
06:52 - to actually check through these elements
06:54 - well this element starts at index six
06:56 - and then seven and then eight so to get
06:59 - there what we need to do is mean to
07:01 - simply find what box are in and multiply
07:03 - it by three so if we're in box two well
07:05 - we need to multiply that by 3 to get to
07:08 - index six and then same thing for the Y
07:10 - value right like say we're down here
07:12 - well we've gotten to the right but now
07:14 - we need to get down so if we say that
07:16 - we're in box at Y value to what we need
07:18 - to multiply that by three so that's
07:20 - where we're gonna start here and by
07:22 - adding three what we'll do is we'll add
07:23 - one more than so we'll be like down
07:26 - outside of the screen or outside of the
07:27 - box but since the four loops only go to
07:30 - what is that they don't include the last
07:32 - element will end up looping through zero
07:34 - four zero one zero zero two zero seven
07:36 - right will loop through all those
07:37 - elements that's the way this works
07:38 - so now we'll simply do is we're gonna
07:40 - say if and we'll say Bo and in this case
07:44 - I J equals equals num and we'll say I J
07:51 - does not equal to position then we will
07:55 - return false so exact same thing as
07:58 - before we'll loop through the box we'll
08:00 - check if any other element in the box is
08:02 - equal to the one we just added again
08:04 - making sure that we're not gonna check
08:06 - the same position that we just added in
08:08 - and then if that's true we'll return
08:10 - false because obviously we found
08:11 - duplicate now if we make it to the end
08:13 - of all these checks then that means
08:14 - everything's fine is actually a valid
08:16 - position so we will return true and
08:19 - that's it for valid so now we just need
08:22 - to actually code the algorithm that's
08:23 - gonna use these functions and backtrack
08:26 - for us so to do this I'm just gonna call
08:28 - this solve and all it's gonna take is Bo
08:31 - which is just gonna stand again for
08:32 - board now to do this is actually fairly
08:36 - straightforward we're gonna do this
08:38 - recursively which means that we're gonna
08:40 - call this function from inside of itself
08:43 - now our base case for the recursion is
08:46 - gonna be that this is full meaning that
08:49 - we've actually filled up the entire
08:51 - board now remember
08:53 - the way that our backtracking algorithm
08:55 - works is actually once we get down to
08:58 - like this position here we've completed
09:01 - the board and we've found a solution
09:02 - because if we ever reach a position
09:05 - where that solution isn't valid right
09:07 - like say remember when we got here and
09:09 - we had eight we backtracked and we went
09:10 - back which means that eventually when we
09:13 - hit the end of our board we've actually
09:15 - found the solution because there's no
09:17 - other possible way to get there other
09:19 - than what we've done so far so that is
09:22 - essentially how that works once we reach
09:25 - the end of the board we fill everything
09:26 - up we've actually found the solution we
09:28 - don't need to check if that's a valid
09:29 - solution because we will have already
09:31 - found it based on the way that our
09:32 - algorithm works so what we'll simply do
09:34 - is we'll say if and then we're gonna
09:37 - check actually find empty so we're gonna
09:39 - say all right I will do this where I say
09:41 - find equals find empty given the board
09:45 - and we'll say if not find now if not
09:51 - find what we're gonna do is we're
09:53 - actually gonna return true which means
09:56 - that we've found the solution that we're
09:59 - done so this function simply returns to
10:01 - us either true or false
10:03 - indicating whether we found the solution
10:06 - or not now otherwise what I'm gonna do
10:08 - is I'm just gonna say row column equals
10:11 - find and then down here we're actually
10:14 - going to start our algorithm so this is
10:15 - the base case of recursion essentially
10:17 - what this means is once we reach this
10:19 - case we're done and we're gonna be
10:20 - working through the recursive algorithm
10:24 - to us eventually try and hit this case
10:26 - so once we get to a case where the board
10:28 - is full we finished we've completed we
10:30 - found the solution and that's what's
10:31 - known as our base case of recursion now
10:34 - if this is not the case well that means
10:36 - that find must have returned some value
10:39 - to us which is gonna be a row and a
10:41 - column now actually I think I need to go
10:43 - in to find empty and I need to actually
10:45 - go sorry go down here and return none
10:47 - now this just means that essentially if
10:50 - there is no squares that are equal to
10:52 - zero no blank squares return none which
10:55 - means that it will trigger this so we
10:57 - could return false as well and we'll say
11:00 - we're done ok so now after that we have
11:02 - row column equals find which was
11:04 - returned from here obviously so what
11:06 - we're gonna say now is we're gonna loop
11:08 - through the values 1 2 9 an attempt to
11:12 - put those in our solution remember
11:14 - that's what we do we're gonna check
11:15 - through all those values so do that
11:16 - we're gonna say for I in range 1 10
11:20 - which means we'll go through 1 & 9
11:22 - inclusively then what we'll do is we're
11:24 - gonna try this value inside of our
11:28 - solution so I'll show you this in one
11:30 - second okay so we're gonna say if valid
11:34 - and then board number and what he call
11:39 - its position which is gonna be row
11:43 - column because that's the position we
11:46 - found that was empty and num actually is
11:47 - gonna be I excuse me here so if this is
11:50 - valid what we'll do is we will plug in
11:53 - that value so to plug in that value what
11:56 - we're gonna do is we're essentially
11:58 - gonna put it in the board so we're gonna
11:59 - say board at position which is gonna be
12:02 - row column equals I like that okay so
12:07 - what we're gonna do is loop through
12:09 - values one to ten
12:10 - we're gonna make sure that if we add
12:11 - them into the board like they'll be
12:14 - valid so we'll add them and then what do
12:18 - you call it if they are valid or
12:20 - whatever like so if they're valid then
12:22 - we'll add it into the board and then
12:23 - what we're gonna do next is we're gonna
12:25 - make sure that or we're gonna we're
12:27 - gonna try to solve the solution from
12:28 - this point forward you as you see this
12:30 - works in second sopressa if solve Bo
12:35 - then we're simply gonna return true
12:38 - otherwise so we actually don't need
12:40 - analysis we will just say Bo row call
12:44 - equals zero and then at the end here
12:46 - we're gonna return false and this is
12:49 - actually our entire solution like we're
12:50 - actually finished but I'm gonna walk
12:51 - through step by step how this works as I
12:53 - know it's a bit confusing so what we're
12:55 - doing right is we're checking if we're
12:58 - gonna loop through values 1 to 10 or 1
13:00 - to 9 and we're gonna check if by adding
13:02 - those into our board it would be a valid
13:04 - solution okay we try that if it's valid
13:07 - what we'll do is we'll actually add it
13:09 - into the board and then what we'll do is
13:11 - we'll recursively try to finish the
13:14 - solution by calling solve on our new
13:17 - board so we're gonna add let's say like
13:19 - 1 into
13:19 - bored and then we're gonna call solve
13:21 - again with that new value-added and keep
13:24 - trying trying trying trying trying until
13:26 - eventually we either find a solution or
13:28 - we get to the point where we've looped
13:30 - through all the different numbers and
13:31 - none of them are valid now if that
13:33 - happens right if we loop through all the
13:35 - numbers and none of them are valid we're
13:37 - gonna return false which means that
13:39 - obviously solve isn't gonna be true so
13:41 - we're gonna backtrack and say that the
13:44 - last element that we just added reset it
13:47 - because that that can't be correct and
13:49 - maybe possibly try this for loop again
13:51 - with a different value right that's what
13:53 - we need to do so that's essentially the
13:55 - way the solution works if we can't
13:57 - finish the solution based on whatever
14:00 - value we've just added we need to reset
14:02 - that value and try a different value and
14:04 - then repeat that process again
14:06 - recursively and that's kind of the only
14:08 - way I can explain this if you don't
14:10 - understand it after that I'd recommend
14:11 - go back and watch the first video on how
14:13 - I went through all this stuff but now
14:15 - all we have to actually do to solve this
14:16 - solution is simply call solve on board
14:20 - now what I'm gonna do is print board
14:22 - before and print board after because I
14:26 - want to see the difference and I want to
14:27 - see the solved solution so that's all we
14:30 - need to do let me make sure they make
14:32 - any mistakes which I likely did okay so
14:35 - well I just pray I should probably use
14:37 - our function that's print board to get
14:40 - that nice output so let's do that
14:41 - actually my bad on that and let's also
14:45 - print a space so that we can actually
14:47 - see it let's just do that okay now let's
14:52 - try alright there we go so this is what
14:54 - we started with and this is our finished
14:57 - solution now I'll quickly skim through
15:00 - it and make sure that there's no like
15:01 - very visible mistakes but I'm pretty
15:04 - sure that this is correct and this
15:06 - actually did work so that is essentially
15:09 - how we use um this kind of method of
15:12 - backtracking to solve our Sudoku board
15:14 - and notice that this happened pretty
15:16 - well instantly like I didn't have to
15:18 - wait at all for this to happen and
15:19 - that's because of the backtracking but
15:21 - if I'd done the naive solution that we
15:23 - talked about before well we would still
15:25 - be sitting here and sitting here and
15:28 - probably waiting for a few days for this
15:30 - to actually happen which is obviously
15:31 - not ideal
15:33 - so anyways that is kind of it for any of
15:36 - you that really are still interested in
15:38 - still watching right now what I'm gonna
15:39 - do is I'm gonna print out step by step
15:41 - what happens to the board every time
15:44 - that we call this solve function so that
15:46 - you guys can get an idea of exactly what
15:48 - is going on so let's do this I'm gonna
15:52 - print this there's quite a few steps but
15:54 - let's go up to the beginning and look at
15:56 - some of them so I want to like obviously
15:59 - let's just look at this first row okay
16:01 - so what we start by doing is obviously
16:03 - this right here is the first 0 we find
16:05 - so we're gonna try to insert any valid
16:09 - values in here now the valid one that we
16:11 - find is 3 so we try 3 and then what we
16:14 - do is we go to the next step and we try
16:16 - 9 now we notice that one by putting nine
16:20 - in here at the next step there's no
16:22 - valid position we can use so what we do
16:25 - is we set nine back to zero so we
16:28 - backtracked okay and we changed the
16:31 - value of what is it of 3 because by
16:34 - using 3 we got 2 9 which means there's
16:37 - no about and then here there was nothing
16:38 - we could put so what we do is we
16:40 - backtrack we set that to 0 and then we
16:42 - change this to 5 and then notice that we
16:44 - keep on scrolling down we keep using 5
16:47 - because that's valid and then what we're
16:48 - doing is once we decide here my bad that
16:52 - we're 3 then we continue on for the next
16:54 - solution we find 9 we say 9 is valid and
16:57 - then we keep going going going going
16:59 - going until eventually we reach a valid
17:01 - solution and that is essentially how
17:04 - this works and that that's all there is
17:06 - really to it you can apply this
17:08 - algorithm to a ton of different problems
17:10 - I don't know it's really useful it's
17:13 - nice to know and I personally had a
17:14 - really awesome time making this and I
17:16 - think it's a really cool program so with
17:18 - that being said once again all the code
17:19 - is on my website if you want to download
17:20 - any of this if you guys enjoyed the
17:22 - video please make sure you leave a like
17:23 - and subscribe to the channel and if you
17:25 - like videos like this let me know
17:26 - because I'm really interested in doing
17:28 - them and I'll definitely make more
17:30 - [Music]