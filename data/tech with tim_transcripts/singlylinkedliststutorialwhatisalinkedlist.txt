00:00 - so now let's talk about singly-linked
00:02 - list now this a very common and honestly
00:04 - commonly confused data structure that is
00:07 - much faster in certain operations than
00:09 - an array now the major differences
00:11 - between this and an array are the way
00:13 - that it's stored in memory as well as
00:14 - the fact that it's dynamically allocated
00:17 - now it can also insert and delete items
00:19 - faster but the major disadvantage is
00:21 - that you can't index items randomly so
00:24 - using like 0 1 like we can't index by
00:27 - numbers and that's gonna take longer to
00:29 - find than an array so it's gonna run an
00:30 - O and time linear time as opposed to
00:33 - constant time like arrays do but anyways
00:35 - what is a singly linked list so it is
00:38 - comprised of what we call nodes now a
00:40 - node has a value which is the actual
00:43 - value of the item so maybe like Tim Joe
00:46 - one true whatever you're storing in the
00:48 - singly linked list and then it has a
00:50 - property which is called next and this
00:53 - is what we call a pointer to the next
00:55 - node in the list and you guys are gonna
00:57 - see how this works in a second now when
00:59 - we actually implement and create our own
01:01 - singly linked list what we typically do
01:03 - is we write a class I'm just gonna stay
01:05 - do SSL for short so singly linked list
01:07 - and this has a few different properties
01:10 - it has a head property which points to
01:12 - the first node in our singly linked list
01:15 - and then what it does is well it can
01:18 - have a like a counter node keeping track
01:20 - of how many nodes are in our list but it
01:22 - also just has a bunch of methods so
01:23 - maybe something like add maybe something
01:26 - like remove and maybe find and then I
01:31 - don't know we'll add another one says
01:32 - add first you can add as many kind of
01:34 - methods this as you want and make them
01:36 - as customizable as you want now when we
01:39 - create this singly linked list it looks
01:42 - something like this I'm gonna start
01:43 - drawing it these squares are nodes ok so
01:45 - each of these squares represents a node
01:46 - in this the first square is what we call
01:50 - our head node and it is what it's going
01:52 - to be stored here in this SSL singly
01:55 - linked list class now when we start our
01:58 - singly linked list we start head
02:00 - pointing to the value null and then when
02:02 - we originally add our first node we will
02:06 - create a new note and point head to that
02:07 - it's just a quick nuance there in case
02:09 - anyone's confused on how we start with
02:11 - that head
02:11 - but these nodes have two properties they
02:13 - have a value and they have a next
02:15 - property so the value is usually will be
02:17 - right in the middle so maybe something
02:18 - like seven is the actual value it's
02:20 - storing and then the next property means
02:23 - what it's doing is it's pointing to
02:25 - another node so what next is actually
02:27 - storing is this next node and this next
02:30 - node is an object just like the previous
02:32 - node and maybe it holds a value
02:34 - something like negative three and it
02:36 - again has a next property this next
02:39 - property points to the next node and
02:40 - then this node has a value maybe say one
02:43 - and then this has a next property and
02:45 - this next property points to you in this
02:46 - case and no because we don't have any
02:48 - more nodes in our list and that is as
02:51 - simple as this is now looking at this
02:54 - maybe you can kind of understand why
02:56 - this is faster in certain operations
02:58 - than an array now first of all this is
03:01 - dynamically allocated which means that
03:03 - whenever you add a new node all you need
03:05 - to do to add a new node to this is
03:07 - simply find the last node here so loop
03:11 - through our list traverse find this last
03:13 - node which is one and then set its next
03:15 - property to a new node that has whatever
03:18 - value in it that we want so now we'll
03:20 - say our next value is maybe eight and
03:22 - then this next property well goes to the
03:24 - next node which is no because there's
03:26 - none left and that's all you need to do
03:28 - to add a new node so it's a lot faster
03:30 - than having to shift every single
03:31 - element now that being said we still
03:34 - need to find this last node in the list
03:36 - to added to so we have to search for
03:39 - that but it is faster than an array to
03:40 - add that now same thing here if we want
03:43 - to insert a node somewhere else so let's
03:45 - say we want to insert a node I'm gonna
03:47 - keep that no there and we want to insert
03:49 - it in between three and one so I want to
03:51 - insert that same node which was eight
03:53 - has that next property well all I need
03:55 - to do to do this rather than shifting
03:57 - every single element in memory like we
03:59 - did with arrays is change the pointers
04:02 - on these nodes so I'm gonna change the
04:05 - pointer on this node to be equal to
04:07 - eight and then I'm going to add a
04:08 - pointer from eight to one in that way
04:11 - now when we loop through a list well we
04:13 - go seven negative three eight and one
04:15 - and it doesn't change the memory
04:17 - location of these nodes which saves us a
04:19 - lot of time so I'll change this pointer
04:21 - so it goes down to eight and then eight
04:23 - now is going to
04:24 - point to one and now that is the new
04:27 - order of our list if we want to insert
04:29 - more things it's as easy as changing the
04:31 - pointers and again I'm calling these
04:33 - pointers but it's just pointing to these
04:35 - nodes and these nodes are these little
04:37 - black boxes that have the value and have
04:39 - next now another very fast operation on
04:42 - these is adding to the beginning of the
04:45 - list and I'll let you kind of guess why
04:47 - that is like say I want to add an item
04:49 - to the very beginning of this list all I
04:51 - need to do to do that is put a node
04:54 - maybe we put one up here I'm just
04:56 - drawing it small because it's kind of
04:57 - hard to put here let's say the value is
04:59 - negative one now all I do is I add a
05:01 - pointer to this head value and I repoint
05:04 - head so now it goes to this and now when
05:07 - I want to access seven all I have to do
05:09 - is traverse through negative one then
05:11 - seven then negative three and so on and
05:13 - now this is the head node and the first
05:15 - note in our list it's very fast to do
05:17 - that because all you need to do is just
05:19 - point to the head and then change head
05:20 - to be this new node that we've added in
05:23 - I'm very fast right and that's why it's
05:25 - really really nice and a lot of people
05:27 - like using it now another massive
05:29 - advantage of the singly linked list is
05:30 - they don't use a lot of memory because
05:32 - they only have these pointers that are
05:34 - going to one on their note and a value
05:36 - as opposed to a doubly linked list which
05:38 - is or not doubly double linked list
05:40 - which is something that we'll talk about
05:42 - in another tutorial but anyways that is
05:44 - kind of how you know you add remove
05:46 - things and add to the front now I'm
05:48 - gonna show you with a little bit of
05:49 - pseudocode how we can actually do these
05:51 - operations so add remove find add first
05:54 - because a lot of people get confused on
05:55 - how that works so let's kind of just
05:57 - make this list a little bit simpler now
05:59 - and get rid of all those insertions I
06:00 - was doing and hopefully you understand
06:02 - how this Poynting works this head is all
06:04 - that we need to keep track of in SS sll
06:06 - since we have accesses head node all we
06:09 - actually need to do is keep going from
06:12 - the neighbors so the next of head and
06:14 - the next of that next and the next of
06:16 - that next of that next to look through
06:18 - all of the different elements that are
06:20 - inside of our linked list so I'm gonna
06:22 - do this with a while loop it's very easy
06:24 - to do and I'm sure you guys can probably
06:25 - figure it out on your own but
06:26 - essentially we're gonna start and use a
06:28 - variable get out of my eraser here
06:30 - that's called current and I say current
06:33 - equals head what I'm gonna do is make
06:36 - the condition on my while loop
06:38 - while current does not equal no so
06:44 - immediately this catches for us the
06:46 - first condition which is we have nothing
06:48 - in our list so if we want to be
06:50 - traversing the list and I'm just showing
06:52 - you a very basic traversal here if
06:53 - there's nothing in our list we won't
06:56 - bother even looking because current is
06:58 - gonna be equal to no right now if it's
07:01 - not and we do have a node then we can
07:03 - repeat the next process so let's say
07:06 - we're looking for a certain value and
07:07 - maybe we want that value to be
07:09 - represented as I don't know Val equals 5
07:13 - or something we're searching for that
07:15 - value in our list well what we can do is
07:17 - we can say if and in this case current
07:21 - dot value equals equals Val then we can
07:28 - simply break out of this loop because we
07:29 - found what we're looking for and then
07:31 - maybe we print out where it is or
07:34 - whatever we want to do right but that's
07:35 - how we can like search for a value now
07:37 - once we've done that so we've checked
07:39 - this condition we didn't break out of
07:40 - the loop the next step is to simply go
07:42 - to the next node so we say current is
07:45 - gonna be equal to current dot next now
07:52 - I'll walk you through this and kind of
07:53 - run this whole piece of code for you but
07:56 - this is very straightforward all we're
07:58 - gonna do is keep going to the next node
08:00 - until eventually there is no next node
08:02 - to go to and once we hit that no
08:04 - condition we've successfully traversed
08:06 - through our entire list and this is very
08:09 - easy to do so when you want to add
08:10 - something remove something find
08:12 - something you start with a basic
08:13 - traversal like this once you find the
08:16 - node that you want then you can do
08:18 - whatever operation there you need to do
08:20 - and then break out of the while loop but
08:22 - this is how you find whatever node and
08:24 - once you know how to find a node and
08:25 - Traverse this you can do any operation
08:27 - you want so we're gonna say value goes 5
08:30 - so if we're looking for value equals 5
08:32 - in here let's walk through how this
08:33 - works so current equals head that means
08:36 - head which is this right now is the
08:38 - first thing that we're looking at now if
08:40 - current value equals equals Val break
08:42 - does it the seventh equal five no it
08:44 - doesn't so what's the next thing we do
08:46 - we say current equals current next which
08:48 - now means current is negative three
08:50 - because the next value of head is
08:51 - three all right so we're actually
08:54 - pointing to this node right like this
08:56 - whole thing is what we're pointing to in
08:57 - same here we're pointing to this whole
08:59 - node now we have this node so what we do
09:01 - is say well current does not equal no
09:03 - well this one isn't no if current value
09:06 - equals Val break does it no it doesn't
09:08 - so now we move to the next node that is
09:11 - the next node from here so now we're
09:13 - looking at one and you guys get the
09:15 - point on how this traversal works we
09:17 - just keep going next next next ex next
09:19 - until eventually we come here we look at
09:21 - no and then we go no and we break and
09:24 - that is how you traverse a singly linked
09:27 - list now knowing this operation we can
09:29 - apply and Cree add/remove
09:31 - find and add first very easily if we
09:34 - want to add first well we don't even
09:36 - need to traverse because we actually
09:38 - know where that first element is so
09:39 - let's write the code to add the first
09:41 - element into our what do you call it
09:44 - singly linked list yeah I'm just gonna
09:45 - get the larger a syrup to get rid of
09:47 - this faster hopefully all right so if we
09:49 - want to write the code to simply add a
09:52 - new node at the beginning of our list
09:54 - and we want to write add first well to
09:56 - do that is very easy all we're gonna do
09:58 - is say in this case I'll say N equals
10:02 - node like this and then maybe we'll set
10:05 - a value for it so we'll say the value is
10:07 - like 10 maybe we pass that into a
10:08 - parameter however this node is working
10:11 - either we're setting the value next we
10:12 - do that or you know to make this more
10:14 - transfer and we say N equals node say n
10:16 - talk value equals whatever value we're
10:19 - adding maybe at 7 or maybe it's 8 okay
10:22 - so we'll change that to 8 all right so
10:23 - now that end up value is 8 all we need
10:25 - to do is point the head to end value and
10:28 - then point n sorry - whatever head is so
10:32 - we can say n dot next equals head right
10:37 - because now we're just gonna say if we
10:39 - have this new node we say eight we'll
10:41 - start by pointing this to here and now
10:45 - that we have that all we need to do is
10:47 - change the pointer of head to 8 so now
10:49 - we say head equals n and now our head
10:54 - node is n which is the new node we added
10:56 - which is up here 8 is now pointing to 7
10:59 - and we completely have a singly linked
11:00 - list and we've just changed the first
11:02 - element and that very quick there's only
11:04 - four lines of code right
11:05 - can even do this unless if we had it set
11:07 - up Prabhu all right so now that we've
11:09 - done that let's talk about removing a
11:11 - note we're finding and then removing a
11:13 - note so let's say we want to remove the
11:14 - note negative 3 there and I'll leave
11:16 - that aid in there for now so we can
11:18 - understand how this works well we'll
11:20 - start by doing a traversal of our list
11:22 - and we need to do this because we need
11:24 - to have access if we're going to remove
11:25 - 3 to the node before that and the note
11:28 - after that so we need to perform a
11:31 - traversal so that we can stop at the
11:33 - node before it and change the pointers
11:34 - accordingly so that 3 is removed so what
11:37 - we'll do is that same thing that we've
11:39 - done before so we'll say I'll just say
11:40 - cur equals head we'll say wow cur does
11:46 - not equal null and now what we'll say is
11:50 - if cur dot next equals equals and in
11:56 - this case whatever element we're looking
11:58 - to remove so we'll say like R equals
11:59 - negative 3 for what we want to remove
12:01 - then what we will do is start changing
12:04 - the pointers so we're gonna change the
12:06 - pointer of whatever current is so the
12:08 - next value is equal to whatever this is
12:11 - next value is so all we need to do to
12:13 - remove 3 is go like that
12:15 - so now there'll be no pointer to 3 and
12:17 - then 7 we'll have the pointer to 1 so we
12:20 - won't have removed one that's all we
12:22 - need to do because if you get rid of
12:24 - what do you call it if you get rid of
12:26 - this 1 here I don't know why that's
12:27 - doing that no need to change this to
12:29 - that we get rid of this pointer nothing
12:32 - points to 3 even though 3 still points
12:34 - to 1 that doesn't matter because we'll
12:36 - never actually access 3 so what I do is
12:39 - just say cur dot next or not neck sorry
12:44 - yeah actually curved dot next is equal
12:47 - to whatever current dot next dot next
12:54 - now the way that this works is the next
12:57 - value on current is negative 3 right and
13:00 - this negative 3 points to 1 so all I do
13:02 - is say that current dot next which is
13:04 - now pointing to 3 is actually equal to
13:05 - whatever current next on next is which
13:08 - points to 1 so where since we're
13:10 - pointing to 1 there we just change this
13:12 - pointer to 1 and then that's all we need
13:14 - to do and then we can simply break out
13:16 - of this while loop and we have
13:17 - successfully removed the
13:19 - now if we reach a point where we've
13:21 - looped through everything current equals
13:22 - null then that means three did not exist
13:24 - and therefore it did not get removed now
13:26 - that's as easy as it is to remove and
13:28 - add things to a singly linked list