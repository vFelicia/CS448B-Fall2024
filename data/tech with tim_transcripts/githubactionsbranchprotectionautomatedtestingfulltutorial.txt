00:04 - foreign
00:08 - I'll be giving you an introduction to
00:11 - GitHub actions and teaching you how to
00:13 - automate workflows specifically I'll
00:15 - demonstrate how you can run automated
00:17 - tests on every single pull request how
00:19 - to add Branch protection and how to
00:21 - insert environment variables and
00:23 - environment secrets into your workflows
00:26 - I'll also be giving you some more tips
00:27 - and tricks related to GitHub actions now
00:30 - before we get into all of that I do need
00:31 - to mention that this video is sponsored
00:33 - by Microsoft I've teamed up with them
00:35 - for this video and to deliver a 45
00:37 - minute webinar on May 9th as a part of
00:40 - the developer digital Meetup tour this
00:43 - webinar will go much more in depth on
00:45 - this topic and demonstrate automatic
00:47 - deployments it will of course include a
00:49 - live q a session and in general go
00:51 - through some more advanced developer
00:52 - workflows and share with you some best
00:54 - practices if you'd like to register for
00:56 - the webinar then please go to AKA dot Ms
00:59 - slash Tech with Tim or click the link in
01:01 - the description and with that said let's
01:03 - get into the video and learn about
01:04 - GitHub actions
01:09 - so as we dive in here let me just give
01:11 - you a quick primer on GitHub actions and
01:14 - explain to you some of the core
01:15 - functionality of it so essentially
01:17 - GitHub actions allows us to
01:19 - automatically run actions whenever some
01:21 - event occurs on a repository now
01:23 - typically this will be related to some
01:25 - kind of Branch so for example maybe we
01:27 - push some code to a branch maybe we have
01:30 - a pull request that we've created those
01:32 - are kind of the two main examples but
01:34 - there's all kinds of other triggers that
01:35 - you can set up where you can then run
01:37 - actions so typically you're going to be
01:39 - doing something like testing your code
01:41 - or deploying your code or building
01:42 - something but you can also run automatic
01:45 - scripts that maybe are going to compile
01:46 - some files for you that are going to
01:48 - move some code around maybe they clean
01:50 - up the code base or they close an issue
01:52 - you can do all kinds of advanced stuff
01:54 - here and this video is really just going
01:55 - to touch the surface of what's possible
01:57 - with GitHub actions so if I scroll down
02:00 - here you can see that you can run any
02:01 - workflow on any GitHub event you can
02:04 - share your workflows across different
02:05 - repositories and you can set up Enviro
02:07 - environment variables and just specific
02:09 - environments in general for all of your
02:12 - workflows to run so in this case you can
02:14 - see that we can create Matrix builds
02:15 - which means that we can run for example
02:17 - all of our tests on different operating
02:19 - systems and make sure that they work
02:21 - across kind of this entire stack or this
02:23 - entire um you know these entire
02:25 - environments sorry we can run any
02:27 - language we can choose the different
02:28 - type of containers and GitHub is
02:30 - actually going to automatically spin up
02:33 - what's known as Runners for us which are
02:35 - free up to a certain amount of minutes
02:36 - per month alternatively you can pay for
02:39 - like a premium GitHub account and get
02:41 - access to more minutes or you can set up
02:43 - your own Runners where you have your own
02:44 - external servers that are actually
02:46 - running all of this code there's all
02:48 - kinds of stuff here but what I usually
02:50 - use this for is automatically testing
02:52 - and making sure that I'm not going to
02:54 - put any code on my main branch or a
02:56 - production branch that is potentially
02:58 - broken or doesn't pass any tests so very
03:00 - great tool saves a ton of time and let
03:03 - me start showing you how to set it up
03:08 - all right so the first thing we're going
03:10 - to do here to set up GitHub actions is
03:12 - we are going to create a new GitHub
03:13 - repository I'm going to do this
03:15 - obviously from the GitHub website I'm
03:17 - just going to call this GitHub actions
03:20 - demo obviously you'd be doing this on a
03:22 - real repository but for this video and
03:24 - tutorial just do kind of a temporary one
03:25 - for now I'm not going to add a readme
03:27 - file I will not initialize the
03:29 - repository and that's because I already
03:30 - have some sample code that I'll share
03:32 - with you that we're going to use to kind
03:34 - of set this up so what we can do here is
03:35 - go through this where we're going to
03:37 - just essentially create our repository
03:39 - and then push it up here so I'm just
03:41 - going to copy this line because I
03:42 - actually have all the other ones
03:43 - memorized and I'm going to close this
03:45 - file go to vs code let me just quickly
03:48 - walk you through this project and then
03:49 - we're going to upload this to GitHub and
03:51 - I'll start explaining to you things like
03:52 - Branch protection and actually running
03:54 - GitHub workflows so here what I have is
03:57 - a very simple flask application this is
03:59 - simply a python web server if I go to
04:01 - main here you can see that I have just a
04:04 - very basic app where I am returning a
04:07 - backward string and then I have have a
04:09 - root here in flax flask sorry that's
04:12 - just going to access the environment
04:13 - variable mode I'm just doing this so I
04:15 - can demonstrate to you how you actually
04:17 - get access to environment variables from
04:19 - GitHub workflows anyways kind of a silly
04:22 - example but you see we have some flat
04:24 - screws here a basic flask website we're
04:26 - loading our stuff from our DOT EnV file
04:28 - and then if I go here I have a test file
04:31 - this is going to test the two routes
04:32 - that I have obviously we could have an
04:34 - npm project we could have anything that
04:36 - we want and what I'm going to show you
04:37 - here we'll kind of apply to all of those
04:38 - projects just with a few different
04:40 - changes continuing I have a git ignore
04:43 - file so I'm just ignoring my EnV file I
04:46 - have my readme in fact uh yeah I think
04:48 - that's fine I can leave that here for
04:49 - now and then I have requirements.txt
04:51 - just so I can use that to install all of
04:54 - the requirements for this project for
04:56 - python okay so this is not yet a git
04:59 - repository so what I'm going to do is
05:01 - type get a knit in my terminal to
05:03 - initialize this I'm going to run through
05:05 - the steps I'm going to type git add dot
05:07 - get commit hyphen M this can be our
05:10 - first commit I'm going to change the
05:12 - name of the master Branch to be main
05:14 - which is now what is on GitHub so I'm
05:16 - going to type git Branch hyphen M and
05:19 - then main that is just going to change
05:20 - the name of the master Branch to main
05:22 - okay I've done that now I'm going to add
05:25 - my remote so I'm going to say git remote
05:27 - add origin and then the URL to my GitHub
05:29 - repository and now that I've done that I
05:31 - can push my code to the main branch so
05:34 - I'm going to type git push origin and
05:36 - then main this should push everything up
05:39 - for me so now if we go to GitHub and we
05:42 - refresh you can see that we have our
05:44 - code okay perfect so now we have kind of
05:46 - our base code the next thing we need to
05:48 - do is actually create some workflows and
05:50 - ideally what we want to have happen is
05:52 - anytime we try to make a change to this
05:54 - repository we want to automatically run
05:56 - any of our tests so in this case I just
05:59 - have one single test but if I had
06:00 - multiple then I would set up the script
06:02 - to run all of my different tests and
06:04 - make sure that those are passing before
06:06 - I allow someone to merge their code into
06:08 - the main branch
06:12 - all right so how do we do this well the
06:14 - first thing that we need to do here is
06:17 - we need to go to GitHub and we need to
06:19 - set up some Branch protection rules now
06:21 - essentially what this is going to let us
06:23 - do is make it so that no one is able to
06:25 - push directly to this main or Master
06:27 - branch and instead they have to create a
06:29 - pull request if they want to contribute
06:31 - now this is typically good practice
06:33 - especially if you're working with
06:34 - multiple people you don't want to be
06:36 - able to accidentally push something to
06:38 - the main branch which is always supposed
06:40 - to be clean and fully functioning you
06:42 - want to First make sure you're passing
06:43 - all of the different tests and then if
06:45 - that's the case you usually want to have
06:47 - your pull request approved and then
06:49 - you're able to actually merge it in so
06:51 - any repository you've worked on that's
06:53 - some kind of public repository or has a
06:55 - bunch of people working on it you've
06:56 - probably seen there's Branch protection
06:58 - rules and all kinds of automatic tests
07:00 - and workflows that are going on and that
07:02 - uses GitHub actions at least typically
07:04 - it uses that okay so I'm going to go to
07:06 - settings here and I'm going to go to my
07:09 - branches now when I go to branches here
07:11 - you can see that I can add a branch
07:13 - protection rule so I'm going to do that
07:15 - now for the branch name pattern you can
07:18 - actually put a regular expression here
07:19 - that is going to match against any
07:21 - branch that you want in this case I'm
07:23 - just going to put main because I only
07:25 - want to run this on the main branch but
07:26 - if you wanted any branch that started
07:28 - with me and then you could do the regex
07:29 - for that okay continuing uh now I can go
07:32 - through kind of all these options
07:33 - there's a ton here but first yes I'm
07:35 - going to require a pull request before
07:37 - merging and I'm going to require
07:39 - approvals now in this case I'll just
07:41 - require one but you can require up to
07:42 - six approvals from contributors of the
07:45 - code base before you're actually allowed
07:46 - allowed to merge the sentence sorry so a
07:49 - few other options you guys can read
07:50 - through these in my case once a pull
07:52 - request is approved even if additional
07:54 - code is added to it I'm going to allow
07:56 - someone to merge that in okay next we
07:59 - have required status checks to pass
08:00 - before merging so status checks are
08:02 - going to be our automated workflows like
08:04 - automatically testing our code in this
08:06 - case yes I want those to pass before I
08:08 - allow someone to merge so I'm going to
08:10 - click this button now if we go here
08:12 - require branches to be up to date before
08:14 - merging this ensures pull requests
08:16 - targeting a matching branch have been
08:17 - tested with the latest code this setting
08:20 - will not take effect unless at least one
08:21 - status code or one status check is
08:23 - enabled yes I'm gonna check that button
08:25 - and don't worry about this for right now
08:27 - once we add our workflows then they will
08:29 - show up here okay continuing we have a
08:31 - few other options here I don't care
08:33 - about any of these and I want to make
08:35 - sure that I allow myself to bypass these
08:37 - settings because right now I'm just
08:38 - working as an individual so no one is
08:40 - going to be able to actually approve my
08:42 - pull request so I need to make sure I
08:44 - can kind of manually override that even
08:46 - though in a real production environment
08:47 - you would want someone to be approving
08:48 - your pull request before you merge it in
08:51 - okay we also have required deployments
08:53 - to succeed before merging we're not
08:54 - going to set up deployments here but if
08:55 - you check out that seminar with
08:57 - Microsoft that I'm doing on May 9th
08:59 - we're going to set up some automated
09:00 - deployments in that alright so now that
09:02 - we have selected these options anyone
09:04 - that tries to push to our main branch
09:06 - that is not administrator of this
09:08 - repository it's not going to allow them
09:10 - to do that because this branch is
09:11 - protected however if I were to try to do
09:14 - this since I do not have this setting
09:16 - checked here it will allow me to push
09:18 - because I am an administrator if I
09:20 - didn't want to allow that then I could
09:21 - check this box and then again it would
09:23 - allow me or it would not allow me sorry
09:25 - to bypass the above settings okay so now
09:28 - that we have done that we want to start
09:29 - writing a workflow and demonstrate what
09:31 - happens when we submit a pull request
09:33 - and try to kind of merge that onto the
09:36 - main branch
09:40 - all right so how do we create a workflow
09:43 - well to do that we're going to go to our
09:45 - code here first I'm just going to make
09:47 - sure I'm on the main branch so get
09:48 - checkout main okay very good and let's
09:51 - clear now to create a workflow what
09:54 - you're going to do is create a folder in
09:55 - the root of your GitHub project your
09:58 - repository called dot GitHub inside of
10:01 - the dot GitHub folder you're going to
10:03 - create another folder here and you're
10:05 - going to call that workflows now you
10:06 - also have like deployments and other
10:08 - types of actions that you can put here
10:10 - in this case we're just going with a
10:11 - workflow now the way you define a
10:13 - workflow is you put all of the syntax
10:15 - triggers command scripts you want to run
10:18 - inside of a yaml file so dot yml to do
10:21 - that we're going to create a new file
10:22 - here you can name this whatever you want
10:24 - but obviously you want to name it
10:25 - something that's meaningful in this case
10:27 - I'm going to call it flask test and then
10:29 - Dot yml
10:31 - okay now here is where I can start
10:33 - writing my workflow now before I do that
10:36 - there is a helpful extension here in vs
10:38 - code called GitHub actions so I've
10:41 - already typed that in and if I go here I
10:43 - can install that extension and it's
10:44 - going to give me a language server uh
10:47 - for GitHub actions and sorry just asked
10:49 - me to press allow here I'm going to
10:50 - select that so that I can kind of
10:52 - connect this to GitHub and this will
10:53 - actually let me view the status of any
10:55 - of my GitHub action runs so I'm going to
10:58 - allow vs code here okay let me open up
11:00 - this URL and let me just make sure all
11:03 - this is good I think we are good to go
11:06 - all right so now we have configured the
11:08 - GitHub actions extension and now that we
11:10 - have this as I was saying you're going
11:12 - to have some live autocomplete and
11:14 - you're going to be able to view the
11:15 - status of any of the workflows that have
11:17 - run based on set pull requests you
11:19 - submitted or something along those lines
11:21 - now that we have that let's go into our
11:23 - yaml file and start defining a workflow
11:26 - the first thing we're going to do is
11:27 - create a name so I'm going to call this
11:29 - flask app test and this is what you're
11:32 - going to see as kind of the description
11:33 - of the workflow when it's running next
11:35 - we need to Define what's known as a
11:37 - trigger and this is when this workflow
11:39 - runs so I'm going to type on and then
11:42 - I'm going to type pull underscore
11:43 - request and then make sure the
11:46 - indentation is here by the way it's
11:48 - important I'm going to type branches and
11:50 - then Dash and then Main
11:53 - so this is pretty obvious but what this
11:55 - is specifying is that I'm going to run
11:56 - the workflow that I Define below
11:58 - whenever a pull request is made on the
12:01 - main branch now of course you could also
12:03 - use push you could use a bunch of other
12:05 - triggers in fact let me bring up some of
12:07 - the triggers and show you a few examples
12:09 - all right so in front of me I've just
12:10 - brought up some documentation here I'll
12:12 - link this in the description that
12:14 - explains to you a few of the different
12:16 - triggers that you can use now there's
12:18 - more than a few in fact there's quite a
12:19 - lot if you look on the right hand side
12:21 - here you can see we have stuff like
12:22 - adding a branch protection rule check
12:24 - run create delete deployment Fork issues
12:28 - label Milestone project pull request
12:32 - pull request comment
12:34 - Etc so you can essentially run this on
12:36 - pretty well any kind of GitHub action
12:38 - that occurs and kind of go as custom as
12:41 - you want obviously I won't show you all
12:42 - these I'm just going to show you pull
12:43 - requests which is kind of the most
12:44 - common
12:45 - okay so let's go back here now that we
12:47 - understand a few of the triggers uh we
12:48 - have the trigger that we're going to run
12:50 - on the main branch next we need to find
12:52 - the jobs that we're going to be running
12:54 - so I'm going to type jobs here and here
12:57 - we can specify a bunch of different jobs
12:58 - but the job that we want to have in this
13:01 - case is going to be test
13:03 - okay now that we've specified that we're
13:04 - going to have a test job we need to
13:06 - specify where we are going to run this
13:09 - so what I mean by that is what operating
13:11 - system now as I said GitHub
13:13 - automatically has different Runners and
13:15 - these are going to be Mac windows and
13:17 - Linux operating systems and you can
13:18 - specify to run on multiple of them at
13:21 - the same time or you can just run on one
13:23 - in our case we'll just run on one so I'm
13:25 - going to type runs on colon and then
13:28 - this is going to be Ubuntu Dash latest
13:30 - of course you could look up the
13:32 - different versions that are available
13:33 - and run on any specific operating system
13:35 - that you want next we are going to
13:38 - specify a few defaults now you don't
13:40 - have to do this but I just want to show
13:41 - you so notice that all of my code is
13:43 - inside of this app folder at least the
13:45 - code that I want to run the test in in
13:47 - that case what I can do is Define the
13:49 - working directory that I want to use
13:51 - while I'm running my different scripts
13:52 - and that way it'll automatically kind of
13:55 - prepend that to my different paths so
13:58 - I'm going to type defaults run so now
14:00 - I'm specifying defaults for the Run
14:02 - command and then I'm going to type
14:04 - working
14:06 - like this and then Dash
14:08 - directory is equal to and I'm going to
14:11 - do dot slash app slash okay referencing
14:14 - this folder right here
14:16 - okay that's all I need for my defaults
14:18 - now that I have that the next thing that
14:20 - I can Define is the different versions
14:22 - that I want to use uh for example for
14:24 - running python code now you could do
14:25 - this with npm as well or really any type
14:27 - of code that you're running what you can
14:29 - specify is
14:31 - strategy okay if we spell strategy
14:35 - correctly then Matrix
14:38 - okay and then next we're gonna do python
14:41 - Dash version and what I can do is pass
14:44 - an array or a list here of the different
14:46 - python versions that I want to run this
14:48 - code on so in this case I just want to
14:50 - run this on python 3.8 but if I wanted
14:52 - to run on multiple python versions I
14:54 - could do something like 3.9 3.10
14:56 - whatever the specific sub version is I
14:59 - can kind of select all of those and
15:00 - since we have Matrix here that means
15:02 - we're going to run the same test or the
15:04 - same script on every single one of these
15:06 - versions same thing here if I were to
15:08 - create a array and then specify the
15:10 - different operating systems I wanted to
15:12 - run on it would do the same
15:14 - okay so after strategy uh what we can do
15:17 - is we can use some environment variables
15:19 - so if we want to use an environment
15:20 - variable we can say EnV and then we can
15:23 - specify the value of an environment
15:25 - variable so I could do something say
15:27 - like mode and then I could make this
15:29 - equal to a string maybe like Dev
15:31 - alternatively we could use an encrypted
15:33 - environment variable which I'm going to
15:34 - show you in a second which is known as a
15:36 - GitHub secret for now we'll just put Dev
15:38 - here we can specify any other variables
15:40 - we want inside of EnV then they're going
15:42 - to be used throughout the steps that I
15:44 - Define next by the way Microsoft has
15:46 - really good documentation on how to
15:48 - write all of these different workflows
15:49 - you do not have to memorize what I'm
15:51 - doing here I just want to kind of
15:53 - explain to you line by line so that it
15:54 - makes a little bit more sense rather
15:56 - than just reading all of the code at
15:57 - once
15:58 - okay so next I'm gonna have steps now
16:01 - these are the steps that I want to use
16:03 - to actually run the workflow so this is
16:05 - kind of the configuration I've set
16:06 - everything up I'm defining the runner
16:08 - I'm defining uh the strategy you know
16:10 - what python versions that I want to run
16:12 - on and then I have my environment
16:14 - variables next is what do you actually
16:16 - want to do what do you want to test what
16:18 - do you want to deploy Etc so the first
16:21 - thing that we need to use and this is
16:22 - going to be on pretty much all of our
16:24 - deployments is uses and then we're going
16:27 - to type actions slash and then checkout
16:31 - at and then this is going to be V3 now
16:34 - this is kind of a pre-made script that's
16:37 - provided by GitHub that automatically
16:40 - sets up our running environment for us I
16:42 - won't go through exactly what this does
16:44 - but in pretty much all of your workflows
16:46 - you're going to use this it just sets up
16:48 - the environment automatically for you
16:49 - and fortunately for these workflows we
16:52 - have a ton of different scripts that we
16:54 - can kind of bring in that are
16:55 - pre-written for us and then we access
16:56 - similarly to this so we could use a
16:58 - GitHub URL to access them or we can do
17:01 - you kind of a certain string here like
17:03 - you would have an npm package for
17:04 - example okay so this is what we're
17:07 - saying we're saying we're going to use
17:08 - this so that's going to actually do
17:09 - something it's going to set up some
17:10 - stuff for us next we're going to specify
17:13 - the name and what we want to do is we
17:15 - want to set up python so we're
17:17 - describing this step
17:19 - now for this step we're going to say
17:21 - this uses actions slash
17:24 - setup Dash python at and then this time
17:28 - we're going to use version V4
17:32 - okay now what this is gonna do as it
17:34 - kind of States here is set up python
17:35 - python for us on whatever environment
17:37 - that we're using on our Linux machine we
17:40 - do already have python installed but
17:41 - this is automatically going to install
17:43 - the correct python version for us and
17:45 - the way it's going to do that is by
17:46 - using python
17:48 - Dash version colon and then we are going
17:51 - to specify a variable here we do that
17:53 - with the dollar sign and then two sets
17:55 - of curly braces and we're going to type
17:57 - Matrix Dot and then python
18:00 - hyphen version okay so this is going to
18:02 - provide all of the different versions
18:04 - that we specify here in The Matrix
18:06 - whenever we're running the steps for
18:08 - every single one of the Python versions
18:10 - okay so that's it for that step next
18:13 - after we set up python python is all
18:15 - installed we need to install our python
18:17 - dependencies now at this point you would
18:19 - kind of change the script based on
18:21 - exactly what you're doing in my case I
18:23 - need to set up the dependencies and then
18:24 - run my test file for you you may have
18:26 - some additional steps as well so I'm
18:28 - going to type Dash name and then it's
18:30 - going to be install
18:32 - uh
18:33 - dependencies if we could spell this
18:36 - correctly okay let's go to our friend
18:38 - spell checker here
18:40 - and then we're gonna say that we want to
18:44 - run the following now this is where we
18:46 - can kind of write our own command so
18:48 - what I want to do is run two commands so
18:51 - I'm going to put this pipe operator here
18:52 - to specifying I can go down to the next
18:54 - line I'm going to type python hyphen M
18:58 - pip install dash dash upgrade and then
19:02 - pip it's a good idea to upgrade your pip
19:04 - before you run the PIP install command
19:06 - and then after that I'm going to type
19:08 - pip install hyphen R and then dot dot
19:12 - slash and then requirements Dot txt and
19:17 - the reason I'm doing dot dot slash is
19:18 - because my working directory is app so I
19:21 - need to get out of that to The Parent
19:22 - Directory where my requirements.txt file
19:24 - is
19:25 - okay now that I have that I'm gonna go
19:27 - to my next step so I have installed the
19:30 - dependencies I have kind of set up
19:32 - Python and now I need to actually test
19:34 - my app code so I'm going to say test app
19:36 - code and then what I'm going to run here
19:38 - is the script which is python
19:41 - dot slash main underscore test dot pi
19:45 - perfect so that's going to actually run
19:47 - my test and then if any of these tests
19:49 - fail you're going to see that the uh
19:51 - what do you call it workflow will fail
19:53 - and it will not allow me to actually
19:54 - merge my branch in if these all pass
19:57 - then assuming I have a review or an
20:00 - approval on my pull request I will be
20:02 - able to merge in my new branch
20:05 - okay so we'll just quickly recap this we
20:07 - have the name of our workflow we have
20:10 - what is actually happening so kind of
20:12 - the trigger here we have the different
20:14 - jobs in this case we want to run a test
20:16 - we can specify multiple jobs in this
20:18 - case we're just doing one we're
20:19 - specifying the operating system or
20:21 - environment we want to run on our
20:22 - default working directory then this is
20:25 - all the different python versions We
20:27 - could be using we could also have
20:28 - multiple things here like if we were
20:29 - setting up Python and mpm we could have
20:31 - multiple kind of arrays of versions here
20:34 - then we have an environment variable
20:36 - we're declaring which is mode later I'll
20:38 - show you how to actually use a secret
20:39 - which is encrypted and then we have the
20:41 - steps that are actually going to happen
20:43 - in our workflow okay so that's it make
20:45 - sure you put this in dot GitHub
20:47 - workflows and then the name of your
20:48 - workflow and if you had multiple
20:50 - workflows you would just create another
20:51 - yaml file here all right now that we've
20:55 - done that let's Commit This code so I'm
20:57 - going to say git add dot get commit
20:59 - hyphen M and I'm going to say create
21:02 - like this a workflow for now I'm going
21:06 - to push this directly to the main branch
21:08 - just so that it gets added then I'm
21:09 - going to create a pull request making a
21:11 - change and show you what happens when uh
21:13 - the workflow fails or passes Etc okay so
21:17 - we're going to type git
21:18 - push origin main again we typically
21:22 - won't be allowed to do this but since
21:23 - I'm an admin I can so I'm going to push
21:25 - this to the main branch okay very good
21:28 - and now if I go and have a look at my
21:31 - GitHub repository here I'm going to
21:33 - refresh
21:34 - you can see that we've created the
21:35 - workflow we have GitHub workflows and
21:38 - then we have our yaml file here okay now
21:41 - we actually want to see these actions
21:43 - running so how do we do that well we
21:45 - need to create a pull request because
21:46 - that's what the trigger is
21:51 - so I'm going to go get and in this case
21:55 - I'm going to actually pull so get pull
21:57 - origin main just to make sure I'm up to
22:00 - date okay then I'm going to type git
22:02 - checkout hyphen B and I'm going to go
22:05 - with let's just call this change
22:08 - okay let's clear let's go and make a
22:11 - change to main.pi so maybe I'll just
22:13 - remove that comment which shouldn't have
22:15 - actually been there okay so that's a
22:16 - change type git add dot get commit
22:19 - hyphen m
22:20 - remove comment and then I'm going to
22:23 - type git push origin change
22:27 - okay now we're pushing to GitHub we'll
22:30 - go back here and we'll create a pull
22:31 - request so let's do this remove comment
22:34 - looks good to me and now if we just wait
22:36 - a second it should automatically run
22:38 - this workflow on our Branch so let's
22:40 - give it a second here and refresh and
22:44 - notice that it started running this
22:45 - workflow so let me go details here and
22:47 - we can kind of watch the status of this
22:49 - once the runner is set up which is
22:51 - automatically going to happen for us
22:53 - from GitHub so it runs the checkout
22:55 - action which sets up our environment now
22:57 - we're installing the dependencies this
22:58 - was a very fast test so we passed it and
23:01 - now we would be able to actually uh
23:03 - create our or actually merge our pull
23:05 - requested now if you go here test app
23:07 - code you can see the output we passed
23:09 - both of our tests pretty well instantly
23:11 - because they're very fast and then if we
23:13 - go back here to our pull requests we get
23:15 - our little check mark and we would be
23:17 - good to submit this awesome now what we
23:20 - could do here is we could review our
23:22 - GitHub actions by using the GitHub
23:23 - action extension notice that we have a
23:25 - test that was ran I can view the test
23:27 - and then just like I was able to do on
23:29 - GitHub
23:30 - I can view all of that directly from vs
23:32 - code here and see all of the logs kind
23:35 - of a helpful extension to look at we
23:37 - also could manually trigger workflows
23:38 - I'm not going to show you that right now
23:39 - but you could do that from this
23:41 - extension okay now let's see what
23:43 - happens if we fail the test so let's
23:45 - kind of just make something where we
23:47 - raise an exception
23:48 - so let's just say raise exception like
23:50 - this
23:51 - okay now
23:53 - type get add dot get commit hyphen m
23:57 - ale and then git push
24:00 - origin change
24:02 - okay now when we go back here it should
24:04 - run the workflow again I think that's
24:06 - how we set it up in our settings
24:09 - okay so let's give it a second it's
24:10 - going to run again
24:11 - okay so the test is finished you can see
24:13 - that we failed uh this test right here
24:15 - it says an exception occurred tells us
24:17 - where it failed just like it would
24:18 - normally in any python unit test and
24:20 - then we would have to fix this resubmit
24:22 - and then we would be able to actually
24:23 - merge this in okay so I'm actually going
24:26 - to close this pull request because I
24:28 - don't really need this uh so I'm just
24:30 - going to go here and go close pull
24:31 - request okay
24:33 - now we can go back get checkout Main and
24:37 - I'm going to show you how we can use a
24:39 - GitHub secret
24:43 - so oftentimes when you are running these
24:46 - kind of deployments especially if you're
24:48 - testing on some kind of server you have
24:49 - a more complex setup you're going to
24:51 - have stuff like API keys or other
24:53 - secrets that you need access to now you
24:55 - don't want to pluck them for example in
24:57 - a DOT EnV file because if you do that
24:59 - then you're going to need to actually
25:00 - submit that EnV file to GitHub and then
25:02 - you'd be exposing that data so it can be
25:05 - a little bit tricky to figure out okay
25:06 - how do I get an API key or other
25:08 - sensitive data as a part of my workflow
25:11 - well the main way to do that is to use
25:12 - something known as GitHub secrets so
25:15 - what I showed you in the workflow by the
25:16 - way here it's just a standard
25:17 - environment variable like anyone can
25:19 - read this anyone can view what it is so
25:21 - you don't want to use that instead what
25:23 - you want to use what's known as an
25:24 - encrypted secret which you can get
25:26 - access to by going to settings on your
25:28 - repository let me make this full screen
25:30 - so I'm going to go here and I'm going to
25:31 - go to environments and the first first
25:33 - thing I need to do is set up an
25:34 - environment that I'm going to use for my
25:37 - workflows so I'm going to go new
25:38 - environment for now I can just call this
25:40 - Dev
25:41 - and inside of here what I can do is add
25:43 - a secret I can also add protection rules
25:45 - but we don't need to do that right now
25:47 - so I'm going to go add secret and this
25:49 - is just like an environment variable
25:50 - except it's going to be encrypted by
25:52 - GitHub and only visible by the
25:54 - administrators of the repository so in
25:56 - this case one of my secrets would be
25:57 - mode this is one of the environment
25:59 - variables we're using here in our code
26:01 - and then the value could be something
26:03 - like def although typically here you
26:05 - would put some kind of sensitive data
26:06 - like an API key or a password or
26:08 - something along those lines and then you
26:10 - can see here that it's locked you can
26:12 - edit it and view it as the administrator
26:14 - but no one else will be able to do that
26:16 - okay so now that we've created this
26:18 - what's going to happen is every time we
26:20 - run our workflow this is automatically
26:22 - going to be kind of applied and sent
26:24 - into the workflow so we'll have access
26:26 - to it and now I just need to show you
26:28 - how we actually use it well to use it we
26:30 - have to modify our workflow so what I
26:32 - can do here is go to
26:36 - envy and now rather than setting the
26:39 - environment variable mode equal to Dev
26:41 - I'm going to set it equal to my GitHub
26:43 - secret now I can't just use the GitHub
26:47 - secret normally so for example if I
26:49 - remove this I'm not going to be able to
26:50 - access the GitHub Secret in my python
26:53 - file as an environment variable
26:55 - instead I have to declare the
26:57 - environment variable name again and then
26:58 - make it equal to the secret value the
27:01 - way you do this though is dollar sign
27:04 - two braces then you're gonna type
27:06 - Secrets Dot and then the name of the
27:09 - secret in this case it's simply mode so
27:12 - that's going to access the GitHub secret
27:14 - mode for you and just one thing to note
27:16 - here if you try to say log the secret or
27:18 - view it uh GitHub is actually
27:20 - automatically going to redact that data
27:22 - for you so you're not going to be able
27:23 - to view the value of this Secret in any
27:25 - kind of logs which is the idea you don't
27:27 - want to expose this you want to keep it
27:29 - well Secret
27:31 - okay so I've modified this workflow now
27:32 - I'm just going to push directly to main
27:34 - so I'm going to type git add dot get
27:36 - commit hyphen M add EnV bar okay get
27:42 - push origin Main
27:44 - all right so that should now change uh
27:46 - the main branch now what I'm going to do
27:48 - is type git checkout hyphen B uh and we
27:51 - will just call this test all right and
27:54 - now what we can do is we can go to Main
27:59 - and I guess we can just make some change
28:01 - here so just go
28:02 - comment okay
28:04 - get add dot get commit hyphen m make
28:09 - change I'm just doing this so we can
28:10 - make a pull request and make sure this
28:11 - works apologize for the cut there I just
28:13 - had my cat running all over my keyboard
28:15 - so I had to deal with that quickly
28:16 - anyways now I'm gonna push to my test
28:18 - Branch so git push
28:20 - origin test okay
28:23 - and now if we go to GitHub and we
28:27 - refresh uh oops I was on the wrong
28:29 - Branch there let's just go back we
28:31 - should see that we can make a pull
28:32 - request so let's go ahead and do that
28:34 - and add our comments okay and we just
28:38 - have one file changed and now we'll just
28:40 - make sure that this workflow runs just
28:41 - to kind of prove that we can actually
28:43 - access that secret
28:45 - okay looks like everything is all good
28:47 - and now we would be able to merge this
28:49 - pull request in using that secret value
28:51 - so with that said I think I'm going to
28:54 - wrap up the video here hopefully this
28:56 - gave you a good introduction to using
28:58 - GitHub actions and showed you some of
28:59 - the core functionality of course there's
29:01 - all kinds of documentation like what I
29:03 - have in front of me here that shows you
29:05 - all kinds of stuff that you can do in
29:07 - terms of creating different jobs
29:09 - workflows triggers Etc this can get
29:12 - fairly complicated and it would take
29:13 - many hours for me to cover this in a
29:15 - single video however if you want to
29:17 - learn more then make sure you check out
29:18 - the webinar that I'm doing with
29:19 - Microsoft on May 9th where we'll be
29:22 - talking about automatic deployments and
29:24 - going through some more advanced topics
29:25 - related to GitHub actions now in the
29:27 - meantime I'll leave some links to
29:29 - documentation in the description in case
29:31 - you want to learn more and keep in mind
29:33 - that if you're doing a fairly common
29:34 - task like testing or deploying there's
29:37 - probably already a workflow out there
29:38 - written for you that you can copy modify
29:41 - slightly and then use in your own
29:42 - environment with that said I hope you
29:44 - enjoyed the the video I look forward to
29:46 - seeing you in another one
29:48 - [Music]