00:02 - [Music]
00:07 - hello everybody and welcome back to the
00:09 - goat length tutorial
00:10 - so in this video we're going to talk
00:11 - about mutable versus immutable data
00:13 - types and then a few strange behaviors
00:15 - that some data types in golang
00:17 - exhibit so let's go ahead and get
00:19 - started now the first thing i want to
00:21 - show you is kind of a primitive example
00:22 - of something we've seen before and i
00:24 - just want you to take a guess at what's
00:25 - going to happen so if i say y colon
00:27 - equals
00:27 - x like that and then i say y equals
00:30 - 7 and i go fmt dot print line
00:34 - x y what is going to print to the screen
00:36 - is my question for you when i run this
00:38 - code
00:39 - so i have the variable x i make that
00:40 - equal to 5 i
00:42 - set y equal to x and then i change the
00:45 - value of y to 7.
00:46 - so what is going to print out well let's
00:48 - have a run here and just look at it and
00:50 - then i'm going to talk to you about why
00:51 - this happens
00:52 - okay so we get 5 and 7. now that seems
00:54 - pretty straightforward i'm assuming
00:56 - 99 of you guessed that but why
00:59 - well when i say variable x is an integer
01:02 - of value 5
01:03 - and then i assign y to x what i'm really
01:06 - saying is y is equal to the value of x
01:09 - which in this case is 5. then i say y
01:12 - equals seven so i change the value of y
01:14 - and when i print this out obviously we
01:16 - get five and seven
01:17 - makes sense great okay so keep that in
01:20 - the back of your head that this worked
01:21 - we understand that
01:22 - and that is mostly because this is
01:24 - what's known as a immutable data type
01:27 - so we have immutable immutable data
01:29 - types and immutable data type
01:31 - means not changeable and a mutable data
01:33 - type means
01:34 - changeable so when i say y coord equals
01:36 - x what i'm really saying is y is equal
01:38 - to the value stored in
01:39 - x which makes it equal to 5. this line
01:42 - of code does not
01:43 - bind x and y together meaning that any
01:46 - change to y
01:47 - affects x and any change to x affects y
01:50 - that's not true
01:51 - but now what i want to show you is a
01:52 - different example using a mutable data
01:54 - type as
01:55 - a slice so i'm going to say var x and
01:58 - i'm going to say
01:59 - int like that equals int
02:03 - 3 4 5. so what i've said now is let's
02:05 - make a new slice of
02:07 - x it's slice of ins and it has three
02:09 - four five and then what i'm going to say
02:10 - is y
02:11 - coin equals x and i'm going to say y
02:13 - zero
02:15 - equals a hundred okay so now what do you
02:18 - think is going to print out to the
02:19 - screen
02:20 - does me changing x change y or does me
02:23 - changing y
02:24 - change x are they bound together somehow
02:26 - and if so why so let's run this and have
02:28 - a look
02:30 - that's strange so we actually see here
02:33 - that
02:34 - i printed x and then i printed y and
02:36 - nowhere here did i change the value of x
02:39 - right x was just equal to 3 4 5. all i
02:42 - did was i set y
02:43 - equal to x i modified y and somehow that
02:46 - changed
02:47 - x now that's because a slice is a
02:50 - mutable data type
02:51 - although that's not the only reason and
02:53 - some of the behavior of a slice which
02:54 - i'll discuss to you later
02:56 - is that when i say y is equal to
03:00 - x what i'm really saying is that y
03:04 - is equal to the slice that
03:07 - x is pointing to so what that means is
03:09 - that x and y
03:10 - are really just pointing to the same
03:13 - variable so the same
03:14 - underlying variable and if you change x
03:16 - or you change y
03:18 - you change both of them now i'm going to
03:19 - draw a big example to really illustrate
03:21 - how this works for you in a second so
03:22 - don't worry
03:23 - but that's the basic idea behind this
03:25 - now
03:26 - that is known as a mutable data type
03:29 - something that is
03:30 - changeable now this is weird because
03:32 - there's some mutable data types that
03:33 - don't behave like this
03:34 - but for now what you can understand is
03:36 - that when we use a slice
03:37 - and when we use a map and we do
03:40 - something like this
03:41 - what we're really going to do is just
03:43 - make another name for that map or
03:46 - for that slice so when i said y colon
03:48 - equals x
03:49 - you can almost think of this as just y
03:50 - being another name
03:52 - for x which means that if i modify y i
03:55 - modify x and if i modify x i modify y
03:58 - i've kind of just made a i don't want to
04:00 - say a copy
04:01 - but just another pointer to this
04:03 - underlying slice
04:04 - so any change to x or y will change this
04:07 - slice which will in turn
04:08 - change both of them again i'm going to
04:10 - draw an example in a second but this
04:12 - behavior for our current understanding
04:13 - applies to slices
04:15 - and maps so if i put a map here so if i
04:18 - actually go
04:19 - map string int and then we'll make that
04:22 - equal to
04:25 - map string int and let's just do
04:28 - hello colon 3 and then what i do is y
04:32 - colon equals x and i say
04:33 - y you know y y why not
04:37 - equals 100. let's print this out and see
04:39 - what we get now
04:41 - let's have a look and we get map hello
04:44 - 3 y100 map low 3y 100 so me modifying y
04:48 - here
04:49 - modified x right notice that that's what
04:51 - happens when we use a slice and when we
04:53 - use
04:53 - a map this behavior can be expected that
04:56 - when i just assign
04:57 - y equal to the variable x or equal to
05:00 - whatever the original map was all i'm
05:02 - really doing is giving another name
05:03 - to that map or to that slice and any
05:06 - modification to either of these
05:07 - variables will change
05:08 - both of them right and if i go here and
05:10 - i change x
05:11 - and i just add a key let's just do the
05:13 - string seven y naught
05:15 - is equal to seven uh let's have a look
05:17 - at this now and you'll see that that
05:18 - will change y
05:19 - as well so notice that both of them get
05:21 - that new key seven inside of them
05:24 - okay so that's how that works for maps
05:25 - and in slices now let me show you this
05:27 - with arrays because arrays are a bit
05:29 - different
05:30 - so if i go and i make an array which is
05:32 - a fixed length remember of
05:34 - ins and we'll change this to just be
05:37 - 2 here and let's just put a few in so
05:40 - we'll do
05:40 - 3 4 we need 2 n's in there i say y colon
05:42 - equals x
05:43 - and i say y 0 equals 100
05:46 - and we print this out at the bottom of
05:48 - our screen here let's have a look
05:50 - then what we get is 3 4 and 104. so when
05:53 - i assign
05:54 - y equal to the equal to x which i'm
05:56 - doing here
05:57 - this does not follow the same behavior i
05:59 - just showed you
06:00 - with those what is it slices and maps
06:03 - in fact what this actually does is make
06:05 - a copy of this array
06:07 - stores it in y so now when i modify y
06:11 - i'm not modifying x because y points to
06:13 - its own copy
06:14 - of this array 3 4. so that's something
06:17 - important to understand
06:18 - this is going to change based on what
06:20 - data types you're using
06:22 - but for now just understand that the
06:23 - only ones that behave weird
06:25 - where you you can change both of them
06:27 - from different variables
06:28 - is uh the maps and the slices now an
06:31 - array is actually a mutable data type as
06:33 - well
06:34 - so a slice a map and an array are known
06:37 - as mutable data types
06:38 - and what that really means is that they
06:40 - can change now the reason they can
06:42 - change is because well i can do this i
06:44 - can say y 0 equals 100
06:46 - i'm modifying this type without actually
06:49 - creating a whole new thing i'm just
06:51 - modifying one value inside of it
06:53 - and same thing with a slice i can do
06:55 - that and same thing with a map i can do
06:57 - that so that's what mutable stands for
06:59 - now mutable doesn't necessarily dictate
07:01 - the behavior i've just shown you here
07:03 - but it's something to import and
07:04 - understand that immutable data type can
07:06 - change where an immutable data type
07:08 - cannot
07:09 - i can't just do like if i have you know
07:11 - let's say z
07:12 - colon equals nine i can't just do like z
07:14 - plus 6 that doesn't change z
07:17 - to be equal to 15. i would have to
07:18 - reassign the value of z so z
07:20 - equals z plus 6 or z plus
07:24 - equals 6 to actually change its value
07:26 - whereas here i can just modify specific
07:28 - parts
07:29 - so now let me hop over to my drawing
07:31 - tablet and i'm going to show you why
07:32 - this actually happens
07:33 - all right so i'm on my drawing tablet
07:35 - now and i'm just going to do a little
07:36 - example to show you what actually
07:37 - happens
07:38 - on our computer's lower level and kind
07:40 - of behind the scenes
07:42 - when we write the code that i just
07:43 - illustrated to you and this is hopefully
07:45 - going to explain to you
07:46 - why we get that strange behavior with
07:48 - slices and maps
07:49 - or we're not just making a copy but
07:51 - we're actually pointing back to that
07:53 - same original
07:54 - slice or same original map so let's have
07:57 - a look here let's go
07:58 - x colon equals
08:02 - let's just make a slice of ins this is
08:04 - just for example purposes
08:05 - and let's make that 1 3. okay so we have
08:08 - x
08:09 - is equal to that now let's write y colon
08:11 - equals x
08:13 - and let's write y zero
08:16 - equals a hundred and then let's do x
08:19 - zero equals a hundred and let's go
08:20 - through all these lines and see what
08:21 - actually happens
08:22 - okay so on the right hand side of my
08:24 - screen here i've drawn a little box that
08:26 - i've labeled ram
08:27 - now this is my computer's memory and
08:29 - what i'm going to do here is show you
08:31 - what actually happens in the computer's
08:32 - memory
08:33 - when we execute these lines of code now
08:35 - i want to make this very clear this is
08:37 - not an
08:38 - accurate complete depiction of what's
08:40 - actually going on
08:41 - this is a very high level understanding
08:43 - the point of this is just
08:44 - to give you some kind of illustration
08:46 - and visual as to why
08:48 - this behavior that i've discussed
08:49 - actually happens so please don't assume
08:51 - that this is like the perfect
08:53 - representation
08:54 - because that would take a lot longer to
08:55 - explain okay
08:57 - so when we execute the line x colon
08:59 - equals
09:00 - the slice int one three what
09:03 - happens well there's two things that
09:05 - actually happen here
09:06 - the first thing we need to do and i
09:08 - talked about this when we talked about
09:09 - slices
09:10 - is we actually need to make the
09:11 - underlying array for this slice
09:14 - now i'm not going to do that here but
09:15 - you can imagine that the first step is
09:16 - actually to create an array of size 2
09:19 - with 1 and 3 inside of it and then make
09:22 - a slice
09:23 - that points to that array now i'm not
09:26 - going to make the array i'm just going
09:27 - to imagine it already exists
09:29 - but the first box that we're going to
09:31 - draw in a ram so the first thing that
09:33 - actually gets entered inside of there
09:34 - is some box gets labeled with some
09:38 - numeric digit i'm just going to label
09:39 - this
09:40 - um like three we'll just say this boxes
09:42 - id
09:43 - is three because each box in our
09:45 - computer's memory or ram
09:47 - has what's known as like a label or it
09:49 - has some id it has some numeric value
09:51 - that represents it ideally
09:52 - so we have that so we'll say okay box
09:55 - three
09:56 - and what this is going to be equal to is
09:57 - exactly this slice so it'll be equal to
09:59 - a slice
10:00 - so we'll just put this in here int
10:03 - and then one comma three
10:06 - okay so we make a box it's labeled some
10:09 - random thing
10:10 - and then it is equal to the actual value
10:12 - that we're storing in the variable
10:13 - then the next thing we do is we make a
10:15 - box i'm going to label this box
10:17 - x because that's the variable name that
10:19 - i've had here
10:20 - and then inside this box i actually put
10:22 - the address
10:24 - or the label of the box that stores the
10:26 - slice
10:27 - so notice here that what i've done is
10:28 - i've made two boxes i didn't just make
10:30 - one box that said x and was equal to
10:32 - the slice i made some box which was
10:35 - labeled something doesn't
10:36 - really matter what it was then i made
10:37 - another box that was labeled this
10:39 - variable name and it stored the value 3
10:42 - inside of it now 3 corresponds to where
10:45 - the slice is
10:46 - that x is holding so this is kind of our
10:48 - link right so x goes to 3
10:50 - 3 goes to 3 and that gives us our slice
10:53 - so whenever we're accessing or dealing
10:54 - with x we first have to get the value
10:56 - out of x
10:57 - and then we have to grab wherever that
10:59 - box is to get the slice that we're
11:01 - actually going to deal with
11:02 - so i hope that makes sense but this is
11:04 - the basics in our computer's memory
11:06 - great so that's this line of code here
11:08 - complete so now let's do this one y
11:10 - colon equals x
11:11 - so when we do y coordinates x what
11:13 - happens is we copy the contents of x
11:15 - into y so i make a box called y and then
11:19 - inside of here i put whatever was inside
11:21 - x which was 3.
11:22 - there we go so now we have this same
11:25 - link right because i've just copied
11:26 - whatever x was storing
11:28 - so since x was just storing the link or
11:30 - the address or the box that has the
11:32 - slice in it now y is storing that too so
11:35 - when i want to access this slice well
11:37 - what i do is i go and i look at
11:38 - the value inside of y and then i look at
11:41 - that box
11:42 - and then i get the slice so a very
11:43 - similar thing happening when i use
11:45 - y so now let's look at what happens when
11:48 - i do y
11:48 - 0 equals 100 well like i just discussed
11:52 - if i want to modify a value or i want to
11:54 - change anything or access it
11:56 - i first need to look in the box y and
11:58 - see where
11:59 - that slice is being stored so this slice
12:01 - is being stored in box three
12:03 - so let's go to box three which is right
12:05 - here and let's
12:06 - make this a hundred so let's change that
12:08 - first value to be
12:09 - a hundred great now what happens to x
12:13 - well x is still pointing to this box
12:16 - so that means that i have modified x
12:19 - because x is pointing to this box
12:21 - i modified this box so in turn i
12:23 - modified x
12:24 - and that's the basics behind how this
12:26 - works instead of
12:27 - storing a value like in the slice as two
12:30 - separate things
12:31 - inside of both x and y that have two
12:34 - different values and can change
12:35 - it's just being stored in one location
12:37 - so whenever i modify that location
12:40 - anything that's pointing to that
12:41 - location will in turn be modified
12:43 - so that is why x and y get modified now
12:45 - what happens when i do x
12:47 - 0 equals 100 well sorry this should have
12:49 - been x1
12:50 - let's imagine that's x1 well then i
12:51 - would come here to this box and i would
12:53 - modify this to 100
12:55 - so in turn i would modify y because y is
12:57 - pointing to that box
12:58 - so that is kind of how that works we
13:00 - have that pointer
13:02 - and that's the idea behind why that
13:05 - actually operates
13:06 - now this works the same for maps so you
13:08 - can imagine that if i just change this
13:09 - to a map definition
13:11 - we get the exact same result happening
13:13 - in my computer's ram
13:14 - if we're doing something like this now
13:16 - let me show you an example
13:18 - with a immutable type so something like
13:20 - an int and show you what happens there
13:22 - so i'm going to redraw ram we'll just
13:24 - make a little short one this will be a
13:26 - much quicker example
13:27 - and on the side of my screen here i'm
13:29 - just going to say x
13:30 - colon equals seven y colon equals
13:34 - x and then y equals 9. so when i do this
13:37 - what happens in my computer's ram and
13:39 - i'm going to go faster here
13:40 - is i actually make a box called x and it
13:42 - just stores the value 7.
13:44 - so rather than having this kind of
13:45 - pointer system that we had before
13:47 - we just store the value directly with x
13:50 - right so x is 7.
13:51 - then what i do is i say y colon equals x
13:53 - okay great so i say y
13:55 - and i copy the contents of x into y so
13:58 - now i put
13:59 - 7 here so y is equal to 7. notice how i
14:02 - have
14:02 - copies i have two 7s here it's not just
14:04 - 1 7.
14:05 - so when i change y to be 9 now so let's
14:08 - scribble that out
14:09 - y becomes 9 it does not affect x because
14:12 - they're storing the value directly
14:14 - inside of them now if we had a situation
14:16 - where we were storing that value in its
14:18 - own box like
14:19 - say that box is labeled one and we put
14:21 - seven here and these both had one in
14:23 - them
14:23 - right then if i was changing this yes i
14:26 - would change both of them
14:27 - but that doesn't happen with ins with
14:29 - strings with floats with booleans
14:31 - and with arrays as well those data types
14:34 - follow what i just showed you where they
14:36 - just store
14:36 - copies of themselves so when you assign
14:38 - y colon equals x and it's one of those
14:40 - data types i mentioned
14:42 - it just copies the contents into a new
14:44 - variable it doesn't just point
14:46 - to where the contents are so i hope that
14:48 - made sense
14:49 - and that is pretty much my explanation
14:51 - of mutable versus immutable data types
14:53 - now i'm going to show you one last thing
14:55 - that hopefully should make this even
14:57 - more clear just with a function and this
14:58 - is something common that you might see
15:00 - all right so the example i want to show
15:01 - you now is what happens when i make a
15:03 - function that accepts a mutable data
15:05 - type
15:06 - like a slice or a map this isn't going
15:08 - to apply to arrays just the ones that
15:10 - follow those weird behavior that we
15:11 - discussed before
15:12 - so let's say funk change first
15:16 - let's say that this takes some int slice
15:18 - so let's actually say sorry
15:19 - slice ins and it doesn't return anything
15:22 - but what it's actually going to do is
15:24 - just change the first element of this
15:25 - slice so it's going to say slice
15:28 - 0 equals a thousand nice
15:31 - so now inside of here i'm going to make
15:32 - a slice so i'm going to say var x
15:36 - in slice equals
15:39 - in three four five okay and then i'm
15:41 - going to call
15:42 - change first and i'm going to pass x
15:45 - and i'm going to print x before and
15:47 - after so i'm going to say fmt.printline
15:48 - x
15:49 - and then we'll copy this and we'll put
15:52 - it here
15:53 - now just have a look at what's happening
15:55 - we have this function change first
15:56 - takes a slice of integers and then
15:58 - changes that first value to be a
16:00 - thousand
16:01 - then here we print x we call change
16:03 - first we print x again
16:05 - let's look at this and see what happens
16:08 - okay so we get three four five and then
16:12 - a thousand four
16:12 - five so me passing x through this
16:15 - function
16:16 - i was actually able to modify x down
16:19 - here
16:20 - now the reason for that is because when
16:22 - i pass x in as the argument or the
16:24 - parameter or whatever you want to call
16:25 - it
16:26 - what is really happening in this
16:27 - function is it says slice is equal to
16:30 - x right it says the slice variable
16:32 - becomes
16:33 - equal to x whatever that's the value i
16:35 - passed in right
16:36 - and now we say slice zero equals a
16:39 - thousand
16:40 - well we're doing the same thing as the
16:41 - example where i showed you that i
16:43 - assigned y
16:43 - equal to x since slice is simply equal
16:46 - to x
16:47 - and x is equal to the pointer to this
16:50 - slice
16:51 - well what i'm doing is i'm modifying x
16:53 - and i'm modifying slice because i'm
16:55 - modifying that underlying slice
16:57 - so when i come back down here just
16:59 - because this function was in a different
17:01 - place it doesn't matter
17:02 - i still modified the value in x so this
17:04 - is something that you can do
17:06 - you can modify slices um and maps and
17:09 - a few other data types that we haven't
17:10 - mentioned yet from functions
17:12 - so i can make functions like change
17:14 - first or delete last or something like
17:16 - that
17:16 - that will modify the contents of
17:19 - whatever you pass in
17:20 - without actually having to return a
17:22 - value so i didn't return a new slice i
17:24 - simply modified the existing slice and
17:27 - that changed it out here and anywhere
17:29 - else that it was being referenced or had
17:31 - a variable assigned to it
17:32 - so with that being said i think i'm
17:34 - going to leave the video here i know
17:35 - this is a confusing topic so feel free
17:37 - to leave some questions if you have them
17:39 - i hope you guys enjoyed if you did make
17:40 - sure you like subscribe and i will see
17:42 - you in the next video