00:00 - in this video you'll learn about the
00:01 - seemingly complicated Lambda function in
00:04 - just a few minutes now the Lambda
00:06 - function is really just a online
00:08 - Anonymous function it's actually fairly
00:10 - simple it just looks a little bit
00:12 - complicated now let me Define one so you
00:14 - can see exactly how it works so I'm
00:16 - going to make a variable called add one
00:19 - and I'm going to make this equal to a
00:20 - Lambda and then I'm going to have some
00:22 - different parameters for my function now
00:24 - in this case I'll just take a parameter
00:26 - X I'm then going to put a colon and what
00:28 - I put after the colon is an expression
00:30 - that will immediately be returned from
00:32 - this function like I said it's a oneline
00:35 - Anonymous function the anonymous
00:37 - component means that I don't actually
00:39 - need to assign this a name in this case
00:41 - I am I'm storing it in a variable add
00:43 - one but I can use it without declaring
00:45 - it as a variable or associating it with
00:47 - some kind of name now if I want to use
00:49 - this function I can say add one and I
00:51 - can pass the value one to it we could
00:54 - store that in a result variable and we
00:56 - can print that out and you'll see that
00:58 - when we run the code we get the value of
01:00 - two now obviously we can make this a bit
01:02 - more complicated we could accept another
01:05 - parameter like X and Y and now I can do
01:08 - x + y this just means I need to pass
01:10 - another parameter here and if I save my
01:13 - code and run you see that now we get the
01:15 - value 8 Lambda functions can accept any
01:18 - number of parameters and they can return
01:20 - any valid python expression now just to
01:23 - show you the equivalent function if we
01:24 - were to do this without a Lambda I could
01:27 - say Define addore 1 one I could accept
01:31 - my parameters X and Y and then I could
01:33 - return X and Y these two lines are
01:36 - actually the exact same thing and the
01:38 - reason why we would prefer a Lambda
01:40 - function is we would Define this in a
01:42 - place where we don't need this function
01:44 - definition so maybe we're never going to
01:46 - use it again we're just passing this as
01:48 - an argument to a particular function in
01:51 - fact that's where Lambda functions are
01:53 - most useful when you're using them as an
01:55 - argument and you want to define the
01:57 - function in the place where you're using
01:59 - it because it doesn't makes sense to
02:00 - defin it as a standalone function you'll
02:02 - see what I mean now is we go into the
02:04 - examples of looking at map and filter
02:06 - which is where the Lambda function is
02:08 - most useful so let's look at an example
02:10 - here where we utilize the map function
02:12 - now what the map function does is take
02:14 - some list or some iterable object and
02:17 - apply a function to every single value
02:19 - inside of it in this case what we do is
02:21 - we take all of these numbers we pass
02:23 - them to the square function and we
02:25 - generate a new list that contains all of
02:27 - those results or all of those squares so
02:30 - if I run the code you can see that we
02:31 - get all of the squares from 1 to 10 now
02:34 - this is fine and in this case we've used
02:36 - a function that we've defined normally
02:38 - using the deaf keyword however this is
02:40 - really where we would want to use a
02:42 - Lambda function because it's a little
02:43 - bit more elegant and we don't need to
02:45 - use this Square function again it's kind
02:47 - of redundantly defined we're not going
02:49 - to utilize it again like we would a
02:51 - normal function so what I can do is
02:53 - remove that and instead place a Lambda
02:55 - function directly inside of here so I
02:57 - can say Lambda X and then x to the
03:00 - exponent 2 now this works well because
03:02 - this is a very simple function it's one
03:05 - line it's Anonymous meaning I don't need
03:07 - to store a reference to it after we're
03:09 - finished with this and now when I run
03:11 - the code you can see that we get the
03:13 - exact same result so that's really the
03:15 - use case of the Lambda function when you
03:17 - need to pass this as some kind of
03:19 - argument typically to another function
03:21 - now another common use case of the
03:23 - Lambda function is with the filter
03:25 - function now the filter function will
03:27 - simply apply a function to every single
03:29 - value inside of some kind of list or
03:31 - iterable object and if the function
03:34 - returns true it will keep this item if
03:36 - it returns false it will reject it so
03:38 - it's filtering some kind of iterable
03:40 - object for us now in this case I've
03:42 - written a Lambda function this takes in
03:44 - the value X is the parameter it does the
03:47 - modulus two of this and sees if that's
03:49 - equal to zero now really this is just
03:51 - checking if the value is even and if it
03:54 - is it will keep it otherwise it will
03:56 - reject it so when I run the code here
03:57 - you can see now that we get 2 4 68 10
04:00 - just another very common use where
04:02 - you'll see the Lambda function inside of
04:04 - the filter function as the function
04:06 - that's being used to filter the
04:08 - different elements now another instance
04:10 - in which you'll see this Lambda function
04:12 - is as the key function for some kind of
04:14 - sort now in this example here you can
04:16 - see that we have a list and we have a
04:18 - few different tles inside of here now we
04:20 - have a number we have a letter we have a
04:22 - string and it's kind of ambiguous which
04:25 - element we actually want to sort by or
04:27 - how we should sort these various
04:29 - elements now we can specify exactly how
04:31 - to sort that by passing a key function
04:34 - now in this case what the key function
04:36 - will do is simply take any one of our
04:39 - objects here and just strip out the
04:41 - element at index one which in this case
04:43 - is going to be the letter this now is
04:45 - the element that python will sort based
04:47 - on and it's a very common use case for
04:49 - using this Lambda function so if I run
04:51 - this code here you can see now that
04:53 - we're going to sort based on the middle
04:54 - element so the letter so we have a b and
04:57 - c and that's how the sort was applied
04:59 - now we can obviously change this and we
05:01 - can make it more advanced for example I
05:02 - could say X1 + X2 or something along
05:05 - those lines and then if we had a tie it
05:07 - would end up sorting by the second
05:09 - string so now let's save this and run
05:11 - and you can see that we end up getting 1
05:13 - 2 3 so now let's look at a few more
05:15 - advanced examples with the Lambda
05:17 - function now in order to do that I'm
05:19 - going to introduce a new function to you
05:20 - called reduce now the way the reduce
05:23 - function works is going to reduce down
05:25 - some kind of iterable object to a single
05:27 - value it does that by utilizing a reduce
05:30 - function now this function is going to
05:32 - accept two arguments the first is the
05:35 - accumulated value that we have so far
05:37 - and the second is the next value that
05:39 - we're going to be processing from our
05:41 - iterable object Now by default the
05:43 - accumulated value when we start will
05:45 - simply be the first value inside of the
05:47 - iterable and then X or the value we're
05:50 - processing will be the next one so as we
05:52 - begin and we'll reducing these numbers
05:54 - here 1 2 3 4 5 what's going to happen is
05:57 - the accumulator is going to be one and
05:59 - and X is going to be 2 that means that
06:02 - this function is going to return three
06:04 - now three will become the new
06:06 - accumulated value that's what we have so
06:08 - far and from three we're going to add to
06:10 - that the next value here which is three
06:13 - now that's going to give us six that
06:14 - means the next accumulated value will be
06:17 - six from the six we're going to add the
06:19 - next value which is four that gives us
06:22 - 10 that means the next accumulative
06:24 - value is going to be 10 so we're going
06:26 - to have 10 we're going to add five to
06:28 - that and we're going to get 15 which is
06:29 - eventually what the output will be so
06:31 - we've done that using a Lambda function
06:33 - that has two parameters that's all
06:35 - reduce is doing it's just taking
06:37 - whatever was returned from the last call
06:39 - passing that as the next accumulator and
06:41 - then adding in whatever that additional
06:43 - value is that we're processing now this
06:45 - is a simple example where we're just
06:46 - adding all of the numbers together but
06:48 - we also can use this to find the maximum
06:50 - value in some kind of list which is what
06:52 - we're doing down here now notice what
06:54 - I've done in this example is I've
06:56 - actually written an inline if statement
06:58 - and that's the expr R I'm returning from
07:00 - my Lambda function which is totally
07:02 - valid so I'm saying that I'm going to
07:04 - return the accumulated value if the
07:07 - accumulated value is greater than x
07:09 - otherwise I'll just return X now really
07:12 - all that means is I'm just going to keep
07:14 - the largest value that I have as soon as
07:16 - some value is larger than that then
07:18 - we'll return that one otherwise we'll
07:20 - keep the previous one because it was
07:21 - larger quite simple that's how we get
07:23 - the maximum value using reduce and using
07:26 - the Lambda function and as a quick last
07:28 - example feel free to have a look at this
07:30 - code right here it's completely useless
07:32 - and there's no reason why you would ever
07:33 - write it like this but this is valid
07:35 - python syntax and I figured you could
07:37 - have a look at it all we're doing is
07:39 - defining a Lambda function and then
07:41 - calling it directly in line by having
07:43 - the call symbol after the Lambda
07:45 - function definition again valid syntax I
07:47 - don't know why you would do this but it
07:49 - is something you can do so I figured I'd
07:51 - show it to you that's it that's going to
07:53 - wrap up this video If you enjoyed make
07:54 - sure to leave a like subscribe to the
07:56 - channel and I will see you in the next
07:58 - one he
08:02 - [Music]