00:02 - [Music]
00:08 - hello everybody and welcome to video 2
00:10 - in this linux for programmers tutorial
00:13 - series in this video what we're going to
00:14 - be doing is talking about common linux
00:16 - commands
00:17 - and how the linux file system actually
00:19 - works so let's go ahead and get started
00:21 - after a quick word from lenode which is
00:23 - the sponsor of this video
00:25 - simplify your infrastructure and cut
00:27 - your cloud bills in half with
00:28 - node's linux virtual machines develop
00:31 - deploy and scale your modern
00:33 - applications faster and easier using
00:35 - lenode
00:36 - lenode is a great company as i said i've
00:38 - been using them for well over two years
00:40 - now
00:41 - i trust them they have great support and
00:43 - i've never had an issue
00:44 - using lenovo so i can highly recommend
00:46 - them you guys should definitely check
00:47 - them out and use the link in the
00:49 - description if you have not already
00:50 - created a lenode account
00:52 - anyways one last reminder here from
00:54 - lenode is that if you have not already
00:56 - please sign up for these five
00:58 - videos so if you want to see these five
01:00 - videos which are the ending videos in
01:02 - this series
01:03 - and in my opinion the more interesting
01:04 - ones they will be live on youtube but
01:06 - probably not for a little bit if you
01:08 - want to see them immediately
01:09 - as soon as i finish editing them and
01:11 - uploading them then go ahead and
01:13 - register on this page it will let you
01:15 - know
01:15 - when they are ready to go and then you
01:16 - can have access them immediately
01:18 - before they are posted live to youtube
01:21 - and one last thing there is a quick
01:22 - guide you can follow along with for this
01:24 - video it does not cover everything that
01:26 - i'm going to talk about but it does
01:28 - cover kind of the ending commands that
01:29 - i'm going to go through in terms of how
01:31 - to find
01:31 - files i'll leave a link to that in the
01:33 - description in case you are interested
01:35 - all right so let's go ahead and get
01:37 - started you can see that i've signed in
01:39 - to my virtual server right here
01:41 - i went through how to do this in the
01:43 - previous video so check that one out if
01:45 - you are not currently on this step
01:46 - and the first thing that i want to talk
01:48 - to you about is a very common command
01:50 - which is ls now ls stands for
01:53 - list and this is going to list the
01:55 - contents of the current
01:56 - working directory now what is the
01:59 - current working directory well in fact
02:01 - to explain that i'm just going to start
02:02 - by explaining what this entire line
02:04 - actually means so this line right here
02:06 - that you're going to see a
02:08 - ton as we go through this video says
02:10 - root at localhost
02:12 - colon tilde and then the number sign or
02:15 - the pound side
02:16 - now root right here simply stands for
02:18 - your user or the user that is signed
02:20 - into this linux machine so in this case
02:22 - we signed in as the root user
02:24 - then the at sign is simply signifying
02:27 - that
02:28 - the thing after is going to be the
02:29 - location you are signed into
02:31 - we are currently signed into localhost
02:33 - although oftentimes this will say the ip
02:35 - address of your server
02:37 - then it's going to say colon colon
02:39 - simply signifies that we're ending
02:41 - this like roots at localhost thing and
02:43 - then afterwards is going to show you
02:45 - the current working directory now our
02:48 - current working directory is actually
02:50 - tilde what this pound sign means is okay
02:53 - you are now ready to start writing
02:55 - commands
02:55 - after this pound sign so it's just the
02:57 - delimiter between your working directory
03:00 - and
03:00 - the user uh that's signed into this
03:02 - machine
03:03 - so anyways tilde stands for our user's
03:06 - home directory so every single user and
03:09 - we can have multiple users on our linux
03:11 - device we'll have a home directory
03:13 - and for each user it will be in a
03:15 - different place but
03:16 - the tilde will mean you are in that
03:19 - user's home directory so right now we're
03:20 - in
03:21 - the root users home directory so when i
03:24 - type ls
03:25 - this is going to print out the contents
03:27 - of the user's home directory so when i
03:29 - do this i type ls
03:31 - you see that we get snap test1 tim.txt
03:34 - and you won't see these files i've
03:36 - created them previously just for this
03:37 - tutorial
03:38 - but it's just showing you all of the
03:39 - things in this directory
03:42 - now i want to talk to you about another
03:44 - common command that we're going to have
03:45 - to use
03:46 - to be able to start explaining how this
03:47 - file system actually works
03:49 - so now we know how to list out files but
03:52 - how do we actually navigate this file
03:54 - system how do i move
03:55 - out of this home directory how do i get
03:56 - into the folder test one or the folder
03:59 - snap or look
04:00 - at this file tim.txt well to do this we
04:03 - use what's known as cd
04:04 - now cd stands for change directory you
04:07 - simply type
04:08 - cd and then the path that you want to go
04:10 - to or the directory that you want to
04:12 - move
04:12 - into so if i would like to get inside of
04:14 - the test 1 directory
04:16 - what i can do is type cd test 1
04:19 - then press enter and this will change my
04:21 - working directory to be tilde which is
04:23 - my user's home folder
04:25 - and then test 1. now inside of here we
04:28 - can check the contents of this folder so
04:30 - if i type ls
04:31 - notice we see that there's a folder
04:32 - called test2
04:34 - so if i want to uh cd into this folder i
04:36 - can type cd test2
04:38 - and now i can check the contents of this
04:40 - directory so now i type
04:42 - ls and notice this is where the file
04:44 - tim.txt
04:45 - is located now there's also a tim.txt
04:48 - inside of this main folder here so don't
04:51 - get fooled there's two
04:52 - tim.txt files but anyways i want to show
04:54 - you how that works
04:56 - so now we're inside of the test2 folder
04:58 - we see that tim.txt is here there's no
05:00 - more folders to go into
05:02 - so how can we move back out or how can
05:04 - we move to the
05:05 - upper level directory or the parent
05:07 - directory of test2
05:09 - well to do that we can use cd again but
05:11 - instead of having the name of the
05:12 - directory we simply type
05:13 - dot dot now dot dot stands for go it to
05:16 - the parent
05:17 - directory one dot stands for the current
05:20 - directory two dot stands for the
05:22 - parent directory now don't get confused
05:24 - three dots does not bring you up
05:26 - another directory above that in fact if
05:28 - you want to move up
05:29 - two directory levels what you would type
05:31 - is cd dot dot slash
05:33 - dot dot this is just delimiting this and
05:35 - telling you yes i want to go to the
05:37 - parent of
05:38 - this parent so if i type cd dot dot
05:41 - this brings me to test one if i type cd
05:44 - dot dot again
05:45 - this brings me back to the user's home
05:47 - folder
05:48 - all right so now let's do something
05:50 - crazy let's type cd dot dot again
05:52 - and let's move into what we're going to
05:53 - call the root file system directory now
05:56 - the official name of this directory is
05:58 - the root directory
06:00 - but it's kind of confusing because there
06:01 - is technically a directory
06:03 - called root so when you just see a slash
06:06 - here this means you are in the highest
06:08 - possible directory
06:09 - so this is where everything is going to
06:11 - be stored and in fact if i type
06:13 - ls you can see that everything is here
06:16 - so we actually have
06:17 - all of the directories that are
06:19 - contained on this linux machine
06:21 - now again slash is just the main upper
06:24 - level
06:25 - file system directory everything is
06:27 - stored inside of this directory
06:30 - there might be a few exceptions to that
06:31 - but that's getting outside of the scope
06:32 - of this tutorial
06:34 - anyways you can see there's a bunch of
06:35 - folders here i just want to talk to you
06:37 - about some of the main ones and what
06:39 - they mean because they're kind of
06:40 - important to understand
06:41 - so i'm just going to quickly go through
06:43 - some of the important folders here give
06:44 - you a quick you know one or two sentence
06:46 - definition of what they are
06:47 - and then we'll move forward into some
06:48 - more interesting things so bin
06:50 - the bean directory simply contains user
06:53 - executable files that's all i need to
06:55 - say about that one
06:56 - the boot directory simply contains files
06:58 - that are required to boot the operating
07:00 - system
07:00 - the dev directory stores things related
07:03 - to uh hardware devices that are
07:05 - connected to this machine
07:07 - so not drivers but just information
07:09 - about hardware devices
07:10 - etc contains the local system
07:13 - configuration files for the host
07:15 - computer slash home is the home
07:17 - directory storage
07:18 - for user files so this is where it gets
07:21 - a little bit confusing where i need to
07:22 - give a bit of an explanation but
07:23 - the home folder is actually where all of
07:27 - our users
07:28 - home folders are going to be stored now
07:30 - it's weird because we have this home
07:32 - folder
07:32 - but this home folder is not actually the
07:35 - home
07:36 - folder for our users so in fact if i cd
07:38 - into
07:39 - not whom but into home and i type ls you
07:42 - notice that we don't see
07:44 - a root folder the reason we don't see a
07:46 - root folder is because
07:48 - the root user is a very special user
07:51 - in linux it is kind of like your super
07:53 - user it is the
07:54 - administrator in the sentence and in
07:56 - fact the home folder
07:58 - for the root user is located in a
08:00 - different place from all of the other
08:01 - users
08:02 - it's located in the root file system and
08:04 - then slash
08:05 - root but if we were to have another user
08:07 - on our machine so let's say we have the
08:09 - user named tim or the user named joe or
08:11 - whatever then we would see folders
08:13 - inside of this home folder that were
08:15 - called tim and joe
08:16 - and those folders would be those users
08:19 - home
08:20 - folders so slash home slash the user
08:23 - name
08:23 - is where users home folders are located
08:26 - except
08:27 - for the root user they had to make that
08:29 - confusing for us
08:30 - anyways hopefully that's clear but that
08:32 - is what the home folder is for
08:33 - user files essentially then we have
08:36 - slash
08:36 - lib this contains library files that are
08:38 - required to boot the system so
08:40 - similar to slash boot we have slash
08:42 - media this is where we're going to mount
08:44 - external and removable media devices
08:46 - celica usb
08:48 - we have mnt this is where you would
08:50 - mount uh temporarily
08:51 - i believe yeah i believe it's
08:52 - temporarily file systems
08:55 - i'm not going to get into that because
08:56 - that's kind of confusing slash opt
08:59 - this is optional files i don't really
09:01 - need to talk about that anymore
09:03 - we already talked about slash root slash
09:06 - sbin
09:07 - this stores binary files these are
09:09 - actually system binary files and they
09:11 - are executables used for the system
09:13 - administrator
09:14 - we have slash tmp this simply stores
09:17 - temporary files
09:18 - anything inside of this folder can be
09:20 - deleted at a moment's notice there are
09:22 - actually no notice whatsoever it could
09:23 - just be deleted at any point in time
09:26 - so don't store something in here that
09:27 - you want to permanently store
09:29 - slash usr this is used for shareable
09:32 - read-only files so for all users they
09:35 - can look inside of there
09:36 - and this includes executable files and
09:38 - stuff like that slash
09:40 - var this is going to be used by a lot of
09:42 - database software and this stores
09:43 - variable data files
09:45 - not really much more to talk about there
09:47 - now of course there's some more folders
09:48 - i didn't talk about
09:49 - not that important you can look them up
09:50 - if you want but those are the main ones
09:53 - anyways now that we know that let's go
09:56 - in
09:56 - to our users home folder now remember
09:58 - for our user that's going to be
10:00 - root although for other users it would
10:02 - be located in the home folder so we'll
10:04 - cd into root shows the tilde which means
10:06 - this is our home
10:07 - folder and now let's learn how we can
10:09 - actually make some new files and folders
10:11 - and all of that
10:12 - and in fact before we do that i'm going
10:13 - to show you my favorite command which is
10:15 - actually the clear command
10:16 - this is pretty straightforward you can
10:18 - guess what it does when you type clear
10:20 - it simply clears the contents of the
10:22 - screen so that one's useful i'm going to
10:24 - probably use that a lot through this
10:25 - tutorial series
10:26 - just to clean up some stuff on the
10:27 - screen in fact before i get into the
10:29 - next command there's a few keyboard
10:30 - shortcuts that are going to be really
10:32 - useful for you guys to know the first
10:34 - one is tab
10:35 - so when you're trying to change
10:36 - directories or just trying to
10:38 - type out a directory if you know what it
10:40 - starts with but you don't want to type
10:42 - out the entire directory and you know
10:43 - it's
10:44 - relatively unique in the sense that
10:46 - there's not like a bunch of directories
10:48 - that have a very similar name to it
10:49 - what you can do is type out the first
10:51 - few letters or even just the first
10:52 - letter of the directory name so if i
10:54 - type cd and then te
10:56 - and hit tab notice it's able to auto
10:58 - complete this directory name because
11:00 - there's no other directory that starts
11:02 - with te
11:03 - in fact if i were to just type t and
11:05 - press tab it's also to auto complete
11:07 - it's also able to auto complete that as
11:09 - well so this is very useful whenever
11:11 - you're
11:11 - trying to type out directories try
11:14 - pressing tab after you type a few
11:15 - letters and it should just auto complete
11:16 - it for you
11:17 - another useful one is the up arrow key
11:19 - this will cycle through all of the
11:21 - commands that you've previously used and
11:23 - then the down arrow key will go in the
11:24 - opposite direction
11:25 - so you can see that you can just look at
11:27 - those very easily um the
11:29 - the side arrow keys you can use to kind
11:30 - of like modify things on the current
11:32 - line
11:33 - you can't actually use the mouse to like
11:35 - move your cursor around on the line so
11:37 - just keep that in mind when you're on
11:39 - the command line pretty much everything
11:40 - comes
11:41 - as input from the keyboard so anyways
11:43 - now
11:44 - let's look at another command and this
11:46 - is going to be to make a new directory
11:48 - so
11:48 - right now type ls you can see we have
11:50 - test1 and tim.txt
11:52 - let's go ahead and make a new directory
11:54 - inside of this folder or inside of our
11:56 - working directory
11:57 - and let's call this uh test2 why not or
12:00 - to make it simpler we could just call it
12:01 - like a b something like that but to make
12:03 - a new directory the command is
12:04 - mk der pretty straightforward stands for
12:07 - make directory and you simply type the
12:09 - name of the directory afterwards
12:10 - so we could type mkdir a we do that
12:13 - now if i type ls we see we have a
12:15 - directory called a
12:16 - so let's cd into a now let's make
12:18 - another directory let's just call this
12:20 - one b
12:21 - now we can ls we see we have b now we
12:24 - can go back
12:24 - into the root directory and that is how
12:27 - you make a directory
12:28 - pretty straightforward next i'm going to
12:30 - show you how we can make a file so
12:32 - this method i'm going to show you right
12:33 - now will make an empty file
12:35 - i'll show you how to add contents to the
12:37 - file afterwards but
12:38 - this one is just for an empty file so if
12:40 - you want to make an empty file and
12:42 - oftentimes you actually do want to do
12:43 - this you can use the command called
12:45 - touch
12:45 - you simply do touch and then the name of
12:47 - the file usually you don't want to
12:49 - include any spaces or special characters
12:51 - in your file name so i'm going to say
12:52 - touch
12:53 - and then we'll just say new file
12:56 - dot txt like that if i do this type ls
13:00 - notice we now have new file.txt popping
13:03 - up as one of the contents for
13:04 - this directory now i'm going to show you
13:07 - another command this one is really
13:08 - straightforward it's called pwd
13:10 - this prints the current working
13:12 - directory so when i do that notice we
13:14 - get slash
13:15 - root that is equivalent to the tilde
13:17 - because again
13:18 - the tilde represents that we are in this
13:19 - user's home directory which is
13:21 - slash root now if i want to make a file
13:24 - or sorry not make a file if i want to
13:26 - read a file what i can do is use a
13:28 - command called cats now cat
13:30 - stands for concatenate actually does
13:32 - many different things i'm going to show
13:33 - you a few examples in a second
13:35 - but if i want to just read a file i can
13:37 - type cat and then the name of the file
13:40 - so in this case let's say i want to read
13:41 - tim.txt i can type
13:43 - cat and then tim.txt and notice it tells
13:46 - me that the output of this file or the
13:48 - contents of this file sorry
13:50 - is hello my name is tim now if i try to
13:53 - read the file we just made so new
13:55 - file.txt
13:56 - notice we get nothing because well there
13:57 - was no contents in that file
14:00 - so how do we add contents to that file
14:02 - very good question
14:04 - i'm going to show you now we can also
14:05 - use cat to do this
14:07 - so if we want to add contents to a file
14:10 - and in fact this is actually going
14:11 - to concatenate or add to the end of the
14:14 - file
14:14 - what we do is we type cat then we type
14:17 - two of these so you can call them arrows
14:19 - or greater than signs or less than signs
14:21 - or whatever you want
14:22 - and then the name of the file that we
14:24 - want to add something to so if i want to
14:26 - add some contents to new file.txt
14:28 - i say cat two of those little symbols
14:31 - then new file.txt
14:33 - notice it brings my cursor to the next
14:34 - line but does not
14:36 - terminate this command and now it's
14:38 - prompting me to actually type something
14:39 - so i'm just gonna say this
14:40 - is a new file now that i've done that
14:44 - i can press enter and notice that when i
14:46 - press enter nothing happens so how do i
14:48 - actually stop this you know how do i
14:50 - get this command or get this cursor to
14:52 - stop running well you just kind of have
14:54 - to know this
14:54 - but the thing that you're going to do is
14:56 - type control d so you're gonna use that
14:58 - shortcut
14:59 - that will end this and then it will add
15:01 - those contents so whatever you typed on
15:03 - these lines
15:04 - to that file so now after you've typed
15:08 - control d to terminate that you're gonna
15:10 - type cat
15:11 - and then the name of the file that you
15:12 - want to read the contents of new
15:13 - file.txt
15:15 - notice we get this is a new file now
15:17 - just to show you
15:18 - if i go ahead and add some more stuff to
15:21 - new files so let's just add
15:23 - last line and then we do ctrl d
15:27 - and then we run this again notice it's
15:30 - going to concatenate to the end of the
15:31 - file and not
15:32 - override the file so that is the basics
15:35 - of cast that's how you read with cat
15:37 - that's how you write contents into a
15:40 - file also if the file does not currently
15:42 - exist so let's say
15:43 - cat new file one we also could write
15:46 - directly into a file
15:48 - if it doesn't exist so cat and then the
15:50 - two arrows and then new file1.txt
15:53 - it's going to put the cursor up again
15:54 - now i can just type you know
15:56 - new stuff ctrl d and we should see
16:00 - that is going to write into this file
16:02 - all right so now we can read
16:03 - this file so cat new file and then one
16:06 - dot txt
16:08 - and notice we get new stuff inside of
16:10 - that file so there's some more stuff
16:11 - that you can do with cats in fact one of
16:13 - the most common things is to concatenate
16:15 - the contents of
16:16 - one file to another so let's actually
16:18 - concatenate the contents of new file one
16:20 - to a new file to do this we're going to
16:23 - say cat
16:24 - then we're going to save the file that
16:25 - we want to take the contents from so
16:27 - this file won't change so we'll say
16:28 - new file1.txt then those two little
16:32 - arrows again
16:33 - and then the file we want to add this to
16:35 - so we're going to say
16:36 - new file dot txt go ahead and press
16:40 - enter that's going to run that for us
16:41 - and now
16:42 - we can cycle through our commands we can
16:44 - read new file and notice it added the
16:46 - contents of new file 1
16:48 - to the end of new file 2. so there's
16:50 - some more stuff that you can do
16:51 - with cats but that is kind of the basics
16:53 - and that's all i'll show for right now
16:56 - so before we move any further i need to
16:57 - quickly thank the other sponsor of this
16:59 - video which is algo expert
17:00 - algo expert is the best platform to use
17:02 - when preparing for your software
17:04 - engineering coding interviews
17:05 - and alongside their algo expert product
17:07 - they also have a product called system
17:09 - expert
17:10 - which is used to prepare for system
17:11 - design interviews and
17:13 - learn how to build large-scale systems
17:15 - so get started using algo expert today
17:17 - by hitting the link in the description
17:19 - using the discount code tech with tim
17:21 - for a discount on the platform
17:23 - next thing that i want to show you is
17:25 - the mv command this stands for move
17:27 - so this is how you actually move a file
17:30 - this one is really straightforward you
17:31 - simply say move
17:32 - and then the file name or even the
17:34 - directory name if you want to move an
17:35 - entire directory
17:37 - and then to the location you want to
17:38 - move it to so in this case i want to
17:40 - move
17:41 - new file dot txt and i want to move this
17:45 - to
17:46 - in fact did we make a folder here i
17:47 - think we made the folder called a
17:49 - yeah we did so let's move it to a so mv
17:52 - new file.txt and then a like that
17:55 - press enter and now if i ls
17:59 - notice that new file is gone by cd into
18:02 - a
18:02 - i type ls we see that new file.txt is
18:05 - inside of there
18:06 - so that's the basics for moving you can
18:08 - also move multiple files at the same
18:10 - time
18:11 - you can say move and then what file do
18:13 - we have here
18:14 - tim.txt and new file1.txt we want to
18:18 - move this into a
18:20 - or sorry we actually we need to go back
18:22 - a directory to do this so cd.dot
18:24 - and then move new file1.txt
18:28 - and tim.txt to the folder
18:32 - a if we do this this should work type ls
18:35 - notice all those are gone cd into a ls
18:38 - and all of them
18:39 - are there awesome so now that we have
18:41 - that i'm going to show you the copy
18:42 - command
18:43 - so if we wanted to copy a file we're
18:45 - inside of a let's say we want to copy
18:47 - tim.txt
18:48 - we're going to say cp tim.txt again this
18:52 - stands for copy
18:52 - and then the name of the new file that
18:54 - we want to copy this to so let's just
18:56 - say
18:57 - copied.txt press enter
19:00 - ls and now notice we have a file called
19:03 - copy.txt
19:04 - and if we read this with cat so copy.txt
19:07 - we see hello my name is tim is the
19:09 - contents of that file
19:11 - awesome so now we have learned how to
19:13 - create new files how to create new
19:14 - folders
19:15 - let's learn how to delete them so to
19:18 - delete
19:18 - a file there's a command called rm this
19:20 - stands for
19:21 - remove there's a few different options
19:23 - here but the basic is to simply just
19:25 - type rm and then the name of the file
19:27 - that you want to delete
19:28 - now rm is specifically used for files
19:31 - although there is a flag we can pass to
19:33 - this
19:33 - to delete folders now to delete the
19:35 - files what i'll show first let's say we
19:37 - want to delete that
19:38 - copied file say rmcopy.txt
19:41 - now we type ls and boom that file is
19:44 - gone
19:44 - now let's say you are a little bit
19:46 - nervous to be deleting something
19:48 - you don't want to just delete right away
19:49 - maybe you want confirmation
19:51 - you could type rm hyphen i this stands
19:53 - for interactive
19:55 - and what this will do is prompt you if
19:57 - you want to delete the file so now
19:58 - notice it says cannot remove copy.txt no
20:01 - such file directory oh that's because we
20:02 - already deleted it
20:03 - but let's try to delete say tim.txt so
20:06 - rm hyphen i tim.txt
20:08 - it's going to say remove regular file
20:10 - tim.txt
20:11 - if you type y and press enter it will
20:14 - remove it if you type anything else it
20:16 - will not
20:16 - now when we ls notice that file is gone
20:20 - all right so now i will show you how we
20:22 - can actually remove some more things as
20:24 - well so let's say we want to remove a
20:26 - folder
20:26 - so we have this folder b right we cd
20:28 - into b and ls
20:30 - notice there's nothing inside of ls so
20:32 - let's cd out
20:34 - and now let's delete this b folder so to
20:36 - delete this folder
20:38 - i can't simply type rmb if i do this
20:41 - says cannot remove b
20:42 - because it's a directory so to remove a
20:45 - directory what you need to type
20:47 - is rm and then one or two different
20:50 - things so if the directory is empty you
20:52 - can type
20:52 - rm hyphen d this stands for directory
20:55 - and then that will delete this directory
20:57 - b since it's empty this will work but if
21:00 - it is
21:00 - not empty then you also need to delete
21:02 - the contents of the directory itself
21:05 - so you would need to type rm hyphen r
21:08 - and then the name of the directory now
21:09 - hyphen r
21:10 - stands for recursive and this means
21:12 - recursively delete
21:14 - everything inside of this directory so
21:17 - this is a dangerous command be careful
21:19 - when you run this
21:20 - but it will delete everything inside of
21:22 - b and b
21:23 - itself if there's something inside of b
21:25 - right but since b is empty we can just
21:27 - type rm hyphen db
21:29 - and then it will delete that directory
21:31 - type ls notice
21:32 - b is gone so that is how you remove
21:34 - directories and that is how you remove
21:36 - files using rm uh there's also a command
21:39 - rm
21:40 - dir rmdir is identical to rm hyphen
21:44 - d so this will just remove an empty
21:45 - directory for you
21:47 - rmdir cannot remove a directory that has
21:49 - any contents inside of it
21:51 - to do that you would need to use rm
21:53 - hyphen r i know this is a lot but
21:55 - there's just a lot of information and of
21:57 - course i'm not showing
21:58 - all of the details of these commands
22:00 - just the ones that i think you need to
22:01 - know
22:02 - all right so now that we know how to
22:04 - remove directories i'm going to quickly
22:05 - show you how we can remove something
22:07 - using pattern matching
22:08 - so we have these two files new file one
22:10 - and new file
22:12 - dot txt let's say we had like 25 million
22:15 - text files
22:16 - obviously i don't want to remove all of
22:18 - them by typing in all their individual
22:20 - names maybe i don't even know all their
22:21 - individual names
22:22 - you know i type ls my screen takes like
22:24 - 10 minutes to fill it all
22:25 - so if you want to remove everything that
22:27 - has a certain pattern so in this example
22:29 - every single test
22:30 - file you can use what's known as pattern
22:33 - matching now there's more advanced
22:34 - patterns than the one i'm going to show
22:35 - you here
22:36 - you can do something like rmstar.tx
22:40 - and the star simply means for anything
22:42 - and the star simply means
22:44 - anything so anything.txt i'm going to
22:47 - delete
22:47 - that's literally what this means i could
22:49 - also do something like you know test
22:51 - dot star and this means remove test dot
22:54 - and then
22:54 - any file extension for test so let's do
22:57 - star
22:58 - dot txt and now notice i type ls all of
23:02 - my files
23:02 - are gone so that's a good way to remove
23:05 - all of the files that
23:06 - have a certain pattern you would also do
23:09 - something like star.star and that would
23:10 - literally remove
23:11 - all files and just not remove any
23:13 - directories
23:14 - all right so the last two things that i
23:17 - want to show you are the locate command
23:18 - and the
23:19 - find command these are very useful when
23:21 - you're searching the file system for a
23:23 - certain file and you don't know if it
23:24 - exists or not
23:26 - okay so i lied i was going to show you
23:27 - the locate command but i'm actually
23:29 - going to skip that one for now i'm going
23:30 - to throw that in a later video because
23:32 - it takes a little bit of explanation i'm
23:34 - going to show you a different command
23:34 - though called the find command these two
23:36 - commands essentially do the same thing
23:38 - they just work a little bit different
23:39 - and have a different efficiency
23:41 - associated with them so the find command
23:43 - will
23:44 - search for a specific uh file or
23:47 - specific directory whatever you end up
23:48 - typing
23:49 - in your current working directory now
23:51 - you also can declare
23:53 - a different directory to search in but
23:55 - if you want to search in the current
23:56 - directory what you type is
23:57 - find dot hyphen name standing for i want
24:00 - to search for the name of a file
24:03 - and then the name that you're looking
24:04 - for so in this case let's say i'm
24:05 - looking for the file name
24:07 - a dot txt if i do that notice it shows
24:10 - me now
24:11 - where a dot txt is located from my
24:14 - current directory so it's saying okay
24:16 - go into the slash a folder there's one
24:17 - called a.txt there's also one
24:19 - right here called a.txt before this i
24:21 - created a bunch of files just so we
24:23 - could do this
24:24 - all right so now let's say i want to
24:25 - find a b
24:27 - txt great now let's say i want to find
24:30 - all txt files well let's do
24:32 - asterisks.txt
24:33 - and sorry that's my bad when you use
24:35 - pattern matching you actually need to
24:37 - put these in quotation marks so this
24:39 - will work now
24:40 - but whenever you use an asterisk or some
24:42 - special character in the name
24:44 - you need to just put it in quotes when
24:45 - you're using the find command that's a
24:47 - small detail but notice that now this
24:48 - works
24:49 - finds all my text files and notice i
24:51 - created a bunch of just random text
24:52 - files with
24:53 - these names so anyways that is kind of
24:55 - the basics of the find command there's
24:56 - also another one that's interesting
24:58 - this is the one that omits uh capitals
25:02 - so notice that if i were to say actually
25:05 - let me go back here if i were to look
25:06 - for
25:07 - a dot txt i don't find anything right
25:10 - but now if i
25:11 - change this flag here from name to i
25:13 - name
25:14 - this means don't consider capitals so
25:17 - look for
25:17 - any case so if i say find dot hyphen i
25:20 - name a dot txt
25:21 - now it's going to find the a dot txts
25:24 - that are lower case because it's not
25:25 - considering the case
25:26 - now that is how you look for files and
25:28 - how you ignore the case
25:30 - the last thing i'll show you is how you
25:31 - look for directories so let's say
25:33 - we're going to do find we're going to do
25:35 - hyphen type
25:37 - and then we're going to type d which
25:38 - stands for directory then we're going to
25:40 - say hyphen name then we're going to type
25:42 - the name of the directory
25:44 - again you don't need to memorize this
25:45 - you can look up this kind of stuff but
25:47 - just trying to show you the basics here
25:48 - so find dot
25:50 - hyphen type d hyphen name we're looking
25:52 - for a directory let's find directory
25:54 - called a
25:54 - notice we find one right there now i
25:57 - don't think i i think i delete that b
25:58 - directory so i don't think we're going
25:59 - to find it but that is the basics of the
26:01 - find command
26:02 - and actually with that i'm going to
26:04 - conclude this video
26:06 - so this was kind of a high level
26:08 - overview of linux as a whole
26:10 - how the file system works the basic
26:12 - commands and just
26:13 - how to be kind of comfortable navigating
26:15 - around and doing basic things
26:17 - of course there is a lot more to know as
26:19 - i'm going to cover in this series
26:20 - but hopefully this gave you a really
26:22 - good start and even after just
26:24 - watching this video you should be a
26:25 - little bit more comfortable dealing with
26:26 - the command line
26:27 - system or command line machine so
26:29 - anyways if you guys enjoyed make sure
26:30 - you have a like
26:31 - subscribe to the channel and i will see
26:32 - you in the next youtube video
26:38 - [Music]
26:42 - you