00:00 - hey guys and welcome back to the fifth
00:02 - video in my Python objects and classes
00:05 - tutorial series in today's video I am
00:07 - going to be talking about class methods
00:09 - static methods and class variables now
00:13 - these are very important and very useful
00:15 - especially if you're coding large
00:16 - projects with multiple different classes
00:18 - and they are fairly complex but I'm
00:21 - gonna try my best to explain them right
00:23 - now so pretty much you can see here I've
00:25 - already set up a class and I've already
00:26 - actually coded all the methods and class
00:28 - variables and all the stuff we're going
00:30 - to deal with and I'm just gonna go
00:31 - through and talk about it because it
00:32 - just saves a bit of time it makes things
00:33 - a bit easier so first of all let's talk
00:36 - about class variables now to create a
00:39 - regular variable within a class you can
00:41 - see that we have something like
00:42 - self-thought name equals name and we've
00:44 - been over this we know how this works
00:45 - now when you create a class variable
00:47 - typically you do this at the top of the
00:50 - class and you just simply write like a
00:52 - variable just not inside of one of your
00:55 - methods so you can see up here I have a
00:57 - list says dogs equals and then a list if
01:00 - I wanted to have something like X I
01:02 - could say X equals 5 or X equals 5 and I
01:05 - could put that at the top of my what do
01:08 - you call it class and then to reference
01:11 - that you have to be inside of the class
01:13 - so this sometimes is useful if you want
01:15 - to have variables that every object in
01:17 - your class is going to need to use and
01:19 - you don't want to have to do like
01:20 - self-thought x equals x within your
01:23 - initialization and it's just better
01:25 - practice to put variables that aren't
01:27 - going to be like statically used inside
01:31 - of the class if that kind of makes sense
01:33 - so the way that you reference these
01:36 - variables is the same as you would
01:37 - reference an attribute within your
01:39 - regular class so you can see here like I
01:42 - do self the name equals name to create a
01:44 - new variable self that name when I want
01:46 - to reference it later I would have to
01:47 - type self dot name right it's the same
01:49 - way to reference these class variables
01:51 - so you can't whereas you could but you
01:54 - wouldn't want to have the same name as
01:57 - this like in here and if you did that it
01:58 - would just overwrite this I see you'll
02:01 - see what I mean in a second but anyways
02:02 - what I'm essentially doing here inside
02:04 - of my initialization is I'm appending
02:07 - every single dog object that we create
02:10 - into the list dogs now this list dogs be
02:13 - against the class dog not to the actual
02:16 - instance of dog so Tim and Jim if I
02:20 - reference dogs and I print that out will
02:22 - be the same value
02:23 - it doesn't change dogs or like dogs
02:25 - that's not specific to Tim and it's not
02:27 - specific to Jim it's specific to the
02:29 - entire class for every dog object so
02:33 - it's the same for all that and Exce see
02:35 - it like five is gonna be the same for
02:37 - obviously Tim and Jim and all other dog
02:40 - objects I hope that kind of makes sense
02:42 - we'll walk through it in just a second
02:44 - okay so let's just first we'll just
02:46 - print and figure out like what's the
02:48 - point of this class variable like what
02:50 - can we do with this well first of all
02:52 - the good thing about class variables is
02:55 - if you want to access them you don't
02:57 - have to have an instance of the dog
03:00 - object to do so so to see this typically
03:03 - like if I want it to call so if I remove
03:05 - this class method I remove the static
03:06 - method you want a Cole method on a dog
03:08 - object you'd have to do name the dogs
03:10 - like Tim and then dot mark or Tim dot I
03:14 - don't know whatever else that we have
03:16 - like dot add dot add weight whatever you
03:18 - want to do okay but in this case we can
03:20 - just actually call it on the name of the
03:22 - class so if I cube dog dot and then you
03:25 - can see it's already coming up here dogs
03:27 - like this we should be able to print
03:30 - this to the screen and you can see that
03:31 - we do end up being able to print this to
03:33 - screen with a dog object and another dog
03:36 - object so the main difference here with
03:38 - class variables is that you can call
03:40 - them with you can still call like I
03:42 - could still do tim dot dogs but it I can
03:46 - also call them with the actual name of
03:48 - the class and that's what makes it
03:50 - useful so you don't have to have an
03:51 - instance to call that what do you call
03:55 - it variable if that makes sense and I
03:57 - guess that's all I'm going to explain
03:58 - cut after class variables because
03:59 - they're not that complicated if you play
04:00 - around with them you should be able to
04:01 - figure that out figure them out okay so
04:03 - next we're gonna talk about static and
04:05 - class methods now you can see here I
04:08 - have add static method and that class
04:11 - method these are known as decorators and
04:14 - you put these above your method like
04:16 - directly above them like this if you
04:18 - want to indicate that they are going to
04:20 - be a special type of method and that's
04:21 - what these two methods are so I'll start
04:23 - I'll first start talking about class
04:25 - methods because we kind of already have
04:26 - touched on it with
04:27 - class variables so the way that a class
04:29 - method works is that you can actually
04:30 - call it on simply the name of the class
04:34 - so you can see inside of here
04:35 - my parameters I only have one thing and
04:38 - it's called CLS it's not called self
04:40 - it's called CLS what this means is the
04:43 - name of the class so if I remove Tim and
04:47 - Jim so I say and just comment that out
04:49 - like that whatever then what I can do is
04:51 - I can say dog dot and then what do you
04:56 - call it numb dogs like this and this
04:58 - will actually work and you can see that
05:00 - I'm not calling it on an instance or
05:02 - like of the dog class or like a object
05:05 - of dog class I'm just simply calling it
05:07 - on the class so if I do this you can see
05:10 - that it gives me zero and that that
05:12 - works right now again you can call it on
05:16 - what do you call it like you can call it
05:19 - on the instance like if you say 10
05:21 - equals dog and named Tim I can still
05:25 - call it on Tim and this is still gonna
05:27 - work fine it's just that you don't need
05:30 - to do that right you can do it by just
05:33 - calling with the name now static methods
05:36 - are a little bit different they actually
05:38 - don't need the class to to be called so
05:42 - it doesn't pass in the class so that
05:45 - means that you can't reference anything
05:46 - within the class so the whole point of
05:48 - having this class passed in when you
05:50 - call this method is so that you can use
05:53 - class variables and you can use other
05:55 - methods within it with inside the class
05:57 - so for example if within num dogs I
05:59 - wanted to use a static method or I
06:01 - wanted to call it initialization or I
06:02 - wanted to do something that revolved
06:04 - around the dog class I would need the
06:06 - class name right so that's why it's
06:08 - passed through but with static methods
06:10 - we only pass whatever parameters we want
06:12 - so we don't have to have a self we don't
06:14 - have to have a class and we don't even
06:16 - have to have any parameters but in this
06:18 - case I'm giving one parameter n so I'm
06:21 - going to show you how this works so I've
06:23 - completely removed any instances of dog
06:25 - in my program there's no objects we're
06:27 - not printing anything whatever okay what
06:30 - I'm gonna do now is I'm gonna call bark
06:31 - without passing through any object or
06:35 - any class name and you can see how this
06:36 - works so what I have to do to do this is
06:39 - it has to know
06:40 - see where bark is right so it's inside
06:42 - the dog claw so I have to start by
06:43 - typing dog but then I can type bark like
06:47 - this and give it a number and you can
06:49 - see here I just wrote a little comment
06:50 - barks end time so if I run this you can
06:53 - see we get bark bark bark bark now
06:55 - notice that with inside the spark class
06:57 - I don't do anything like I don't touch
06:59 - any attributes I don't touch any class
07:01 - methods and there's actually no way for
07:03 - me to do that so if I were to try to say
07:06 - I wanted to get the value of the length
07:08 - of dogs right with inside the static
07:10 - method well I would be unable to do that
07:12 - because I don't have self write self is
07:15 - it's not working I don't have a class so
07:18 - how am I gonna be able to call a
07:20 - classroom variable or another class
07:23 - method I actually can't do that so the
07:25 - point of static methods is one you're
07:27 - just gonna be using them as a function
07:29 - but you want to organize them within a
07:30 - class so a really good use of static
07:34 - methods for example say you were created
07:35 - like a class and you called it math okay
07:39 - in here instead of having like an
07:41 - initialization and all this stuff you
07:43 - just had a bunch of static methods now
07:45 - why why do you put them in this math
07:47 - class why not just create them as
07:48 - functions well the thing is you want to
07:50 - build import modules within Python you
07:53 - guys have probably seen this before
07:54 - right you can import other files that
07:56 - you've created into like main files so
07:59 - when you create a bunch of like math
08:01 - methods or whatever way you do is you'd
08:03 - say class math and then you just say
08:06 - like app static method and then you
08:09 - define and you'd say like ah like this
08:12 - okay and you say like X and X 2 and then
08:15 - you could return X + X 2 and that way
08:20 - you don't have to create an instance of
08:22 - math you don't have to say like M equals
08:24 - math right you can just say math dot add
08:26 - give it two values and it will return it
08:28 - to you and you can do math odd subtract
08:30 - and you can organize all like the
08:31 - functions that you wanted to use within
08:33 - that class and then class methods right
08:36 - are more use for like if you want to
08:38 - access class variables without having to
08:40 - pass in an object because it's just
08:41 - gonna automatically pass whatever the
08:43 - class name is that you're giving it I
08:44 - hope that that makes sense now these
08:48 - I'll touch on these really quickly in
08:49 - case I didn't really talk about them
08:50 - these are known as decorators I know
08:53 - it's
08:53 - you're named but pretty much this just
08:55 - denotes the fact that you are creating a
08:58 - class method and you are creating a
09:00 - static method because otherwise it's
09:02 - probably gonna get them out of you and
09:03 - tell you that you need to type itself or
09:05 - you need to type in like another
09:06 - parameter or something like that so by
09:07 - doing this not only is it a visual
09:09 - representation for anyone that's reading
09:11 - your code but you're also just I'm
09:14 - telling Python that this is gonna be a
09:15 - static method this gave me a class
09:16 - method obviously you can have as many
09:18 - static methods as you want as many class
09:19 - methods as you want and actually really
09:21 - useful so anyways I'm gonna wrap up the
09:24 - video here if you guys have any
09:25 - questions if I don't need this stuff
09:26 - make sure you leave a comment down below
09:28 - and in the next video I'm going to be
09:30 - talking about public and private classes
09:32 - in Python anyways if you guys enjoyed
09:34 - the video please make sure you leave a
09:35 - like and subscribe and I will see you
09:37 - again in the next one
09:39 - [Music]