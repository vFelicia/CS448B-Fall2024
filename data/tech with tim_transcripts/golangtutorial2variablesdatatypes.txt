00:02 - [Music]
00:06 - hello everybody and welcome back to the
00:08 - golang tutorial so in this video we're
00:10 - gonna be talking about variables and
00:12 - data types which in my opinion are some
00:14 - of the most fundamental and important
00:16 - aspects of any programming language now
00:18 - there's a ton of different types there's
00:20 - a ton of different ways to make
00:21 - variables and access them so I'm gonna
00:23 - be showing you the most common and most
00:25 - important ways here in the next video
00:27 - I'm gonna go into more detail so if you
00:29 - think I missed something
00:30 - hold off I probably cover it in the next
00:32 - video okay so what we need to do to
00:34 - start is understand what a variable
00:36 - actually is so in programming we have
00:39 - variables what a variable is is
00:41 - essentially some way of storing and
00:43 - accessing information so it's gonna hold
00:46 - some value for us we may manipulate that
00:48 - variable so change it later in the
00:50 - program we may use it somewhere we may
00:52 - pass it around but the idea is it's just
00:55 - kind of a slot that store some type of
00:57 - information so using the classic example
01:00 - from your math class you often saw
01:01 - variables like X right maybe so X Y
01:04 - maybe you even saw is Zed if you got
01:05 - crazy in three dimensions but we have X
01:08 - maybe you saw something like x equals
01:11 - five now if I write the equation X plus
01:13 - five you can tell me that this is ten
01:16 - because you know the value of x is five
01:18 - now this works very similar in
01:20 - programming except what's on the right
01:22 - side of this equal sign might not always
01:24 - be a number so we might have a string
01:26 - which is something like this right we
01:27 - might have a character we might have a
01:29 - byte we might have a floating-point
01:31 - number there's different things and
01:33 - what's on the right side is actually
01:35 - what's known as a type so we have some
01:38 - type that goes on the right side of our
01:40 - variable and that type is very important
01:42 - in a language like golang so if you've
01:44 - worked in languages I want to say like
01:47 - JavaScript or Python you may not be
01:50 - super familiar with the notion of
01:51 - statically typed languages what that
01:54 - means is once a variable is declared to
01:56 - be a specific type it cannot change so
02:00 - if I make the variable X and I say that
02:02 - that variable is of type number now
02:05 - that's not a real type but we'll talk
02:06 - about that in a second then it can never
02:08 - be of type string it has to be of type
02:10 - number all the time unless
02:13 - redefine that variable or we you know I
02:16 - guess remove it and recreate it or
02:18 - something like that
02:19 - but that's the idea in a statically
02:21 - typed language is types do not change
02:23 - whereas in a dynamically typed language
02:25 - guess what they change so that's the
02:28 - idea
02:28 - now to make a variable the syntax is var
02:31 - that's the VAR keyword the name of the
02:35 - variable which can be anything I'm going
02:37 - to talk more specifically about this
02:38 - pretty much anything you want but it
02:40 - does have to follow a few rules so it
02:42 - has to be comprised of only letters
02:45 - numbers and underscores those are the
02:47 - only three characters you're allowed to
02:49 - use it may not start with a number and
02:51 - it may not contain any special
02:53 - characters or any spaces so a valid
02:56 - variables name is something like Tim
02:59 - underscore name - that's fine time
03:02 - underscore name - it has an underscore
03:05 - it has a number it has letters that's
03:06 - okay a valid variable name is Tim a
03:08 - valid variable name is Tim underscore a
03:11 - valid variable name is Tim underscore
03:12 - one an invalid variable name is one Tim
03:15 - because it starts with a number an
03:17 - invalid variable name is Tim hello
03:20 - because it contains a space an invalid
03:22 - variable name is Tim slash hello because
03:24 - it contains a slash that's the idea just
03:27 - follow those few rules only numbers
03:29 - letters underscores no spaces cannot
03:31 - start with a number you'll be good to go
03:33 - all right also cannot I believe be a key
03:36 - word so I don't think I can name a
03:38 - variable import I think that will cause
03:40 - a problem so stick away or stay away
03:43 - from naming your variables anything you
03:45 - would typically see like func
03:46 - you know fmt main you probably don't
03:49 - want to call it those things or you run
03:51 - into issues so I'm just gonna make a
03:53 - variable here and I'm gonna call this
03:54 - name now what I want this to be is of
03:57 - type string now notice it's actually
03:59 - showing me the suggestion here already
04:01 - but what you do is you type a VAR the
04:03 - name of the variable the type of the
04:06 - variable which we'll get to in a second
04:07 - in this case I'm gonna type string you
04:09 - put an equal sign and then on the right
04:11 - hand side you put some value some text
04:14 - some number that corresponds with the
04:17 - type you picked so in this case I pick
04:19 - string so that means on the right hand
04:21 - side here I need some string so I need
04:23 - something inside of double quotation
04:25 - marks now it can be just the
04:27 - double quotation marks that is still
04:28 - stringless known as the empty string but
04:30 - I could do something like hello Tim and
04:32 - this would be Val I have now just
04:34 - created the variable name this is a type
04:36 - string and it stores the value hello Tim
04:39 - that means if I print out the value of
04:41 - name it will show me hello Tim because
04:44 - that's what it stores that's the basics
04:46 - with variables now there's a few other
04:48 - ways to do this in fact what we can
04:50 - actually do is say well I want to make a
04:52 - variable called name that is of type
04:54 - string but I don't know what value it's
04:56 - gonna be yet so what you can do is
04:58 - define that you want to make a variable
05:00 - called name of type string and later on
05:02 - in the program so below that line you
05:05 - can type something like name equals Tim
05:08 - and that's fine what that will say is
05:11 - now name is assigned the value of Tim
05:13 - and if you want to change this later on
05:16 - you can say name equals let's say Bill
05:18 - or something like that and that will
05:20 - change the value of name to be Bill
05:23 - that is the basics of how variable works
05:25 - they're not too confusing now there's a
05:27 - few other ways to define variables I'm
05:29 - gonna talk about that in the next video
05:30 - where I talk about implicit versus
05:32 - explicit declaration or assignment sorry
05:34 - but that that's the idea these are
05:37 - variables okay so now that hopefully we
05:39 - understand variables I'm going to show
05:41 - you it is a few different types that we
05:43 - can set for our variables because
05:45 - remember we have bar we have the name of
05:47 - the variable and then we have the type
05:49 - right that goes here so we need to know
05:51 - what types we can have and what those
05:53 - mean and why we would use them okay so
05:55 - the types so I actually wrote a little
05:57 - thing here just to show you I just stole
05:59 - this from the golang site we have
06:01 - numeric types we have kind of string
06:04 - types boolean types there's a bunch of
06:06 - different ones but we're gonna go
06:07 - through them one by one so the first
06:09 - type of types now I know this is weird
06:11 - but like I guess category of types we
06:13 - have are integers so these are some kind
06:15 - of integer values they can be unsigned
06:17 - signed or machine-dependent and let's go
06:20 - through all of them so the first type is
06:22 - you int 8 now that stands for unsigned
06:25 - integer with eight bits
06:27 - now what is a bit well a bit is simply a
06:30 - 0 or a 1 represented in the computer
06:33 - right so all your computers represent
06:35 - information in zeros or ones unless
06:37 - you're using a quantum computer I
06:38 - believe yes I think
06:40 - anyways in standard computer zeros and
06:42 - ones so with 8 bits otherwise known as
06:45 - one byte which is another way to refer
06:47 - to you into eight you can represent the
06:50 - values at 0 to 255
06:52 - now the you extends for unsigned
06:54 - unsigned means this is not a negative
06:57 - value this is a positive value so with 8
07:00 - bits or one byte one byte is eight bits
07:03 - that's what it means you can represent a
07:05 - number between 0 and 255 so if you want
07:08 - to have a small positive number you
07:10 - would use the type you int 8 okay you in
07:12 - 16 straightforward this is between 0 & 6
07:16 - 5 5 3 5 notice that all this has done is
07:19 - added 8 bits to our representations so
07:22 - how much space this variable is actually
07:24 - taking up which means now we can
07:26 - represent a much larger number which is
07:28 - actually 2 to the 15 minus 1 I think
07:31 - you're 2 to the 16 minus 1 like if you
07:36 - do that exponent I think that's what's
07:38 - 65535 is anyways it might be wrong about
07:41 - that but I'm pretty sure that's right
07:42 - okay so now we have you int 32 now again
07:46 - all we've done is we've added 16 more
07:48 - bits and now this is the number we can
07:50 - represent which is exponentially larger
07:51 - and we go down to you in 64 and same
07:54 - thing so these are the ranges I've
07:56 - written on the right notice that you int
07:58 - 8 and byte are the same thing so you can
08:00 - write either byte or you int 8 they mean
08:02 - the same thing okay now we come down to
08:05 - signed integers now signed integers are
08:07 - pretty much the exact same as unsigned
08:09 - integers except they can be negative and
08:11 - all that means is the first bit of our
08:14 - of our data now sorry or of the number
08:16 - is actually going to represent whether
08:18 - it's a positive or negative number so
08:20 - here notice that you int 8 represents
08:23 - from 0 to 255
08:24 - now we represent from negative 128 to
08:27 - 127 so if you actually count the values
08:30 - that's the same number of numbers we can
08:32 - represent but the magnitude is different
08:35 - because we have the ability to represent
08:37 - negative numbers now so that first bit
08:39 - we need to use for either a negative
08:41 - sign or a positive sign I believe one
08:43 - means negative 0 means positive so
08:46 - notice that it is a hundred and I guess
08:48 - twenty eight numbers magnitude less
08:51 - right and that will be the same for all
08:52 - of these
08:54 - someone someone yes so now we'll go to
08:58 - int16
08:59 - and notice that this again is smaller in
09:01 - magnitude than this but it represents
09:03 - the same values and that's because it's
09:05 - 16 we need that first bit in 32 this is
09:08 - known as rune so same thing you can
09:10 - represent in 32 with word rune
09:12 - represents these values in 64 represents
09:16 - these values so typically you don't need
09:19 - to use more than 32 or more than you at
09:23 - 32 now it's common to just represent 4
09:26 - because our computers have so much
09:28 - memory in space now that it doesn't
09:30 - really matter what data types are using
09:32 - in terms of the magnitude of them unless
09:34 - you're writing a very memory efficient
09:36 - program but what to keep in mind here is
09:38 - if I write that my variable is of type u
09:41 - in 64 that means I'm gonna use 64 bits
09:45 - to represent it no matter how big it is
09:48 - so even if it's only the number one or
09:50 - its number zero we will still take up
09:52 - the same amount of space as a number
09:53 - that looks like this so that's why it's
09:55 - a good idea to use a smaller bit number
09:58 - so like you went eight if you're gonna
09:59 - represent smaller numbers because you
10:01 - will use up less space in the computer
10:03 - okay so now we're gonna go to machine
10:05 - dependent types so machine dependent
10:07 - types are just things that you can type
10:09 - and your computer will automatically
10:11 - kind of figure out how big these are
10:13 - supposed to be so if you type u int what
10:15 - this will do and I believe it actually
10:17 - looks at if your operating system is 32
10:19 - or 64-bit it will use 32 bits or 64 bits
10:23 - to represent an unsigned integer so it's
10:26 - common that you'll see people just type
10:28 - u int or int as their type and that
10:30 - means that based on the OS they're using
10:32 - it will either be 64 bits or 32 bits so
10:35 - this is the exact same as u int it will
10:38 - be 32 or 64 and then you int PTR um you
10:41 - can read this definition here I'm not
10:43 - really gonna describe exactly what that
10:44 - is I feel like that's a little bit above
10:46 - and beyond the audience here okay so now
10:49 - we're on to floating point numbers so
10:51 - the types here are float 32 and float 64
10:53 - now it's common just use float 64 but
10:56 - again this is the same thing so this
10:57 - means a floating-point number so some
11:00 - kind of decimal number with in this case
11:02 - 32 bits of precision so we're using ie E
11:06 - 754 if you know what that means
11:08 - great if you don't don't worry about it
11:09 - and this is a 32 bit precision number
11:12 - which means we're gonna use 32 bits to
11:13 - represent this float64 same thing here
11:17 - now float against tense or just a some
11:19 - decimal number like any if you add a
11:21 - decimal immediately becomes a float
11:23 - because we need to represent those
11:25 - decimals with some level of precision
11:27 - either 32 or 64 bits okay then we have
11:30 - complex types now complex types involve
11:33 - an imaginary part I'm not gonna talk
11:35 - about complex data types because we're
11:37 - probably never gonna use them in fact in
11:39 - this series I will tell you right now
11:40 - we're not gonna use these but if you're
11:42 - in physics are you doing some
11:43 - computational math there's some more
11:45 - advanced things you will likely need
11:47 - these complex sixty-four complex 128 so
11:51 - you can read through that definition but
11:52 - you know pretty straightforward strings
11:54 - as we talked about anything in double
11:56 - quotation marks I didn't add this in
11:58 - here but characters or anything in
11:59 - single quotation marks and then boolean
12:01 - values are either a true or a false so a
12:03 - boolean just tells us this is is true or
12:07 - it is false we're gonna use those a lot
12:08 - in this series and these take one bit so
12:12 - true is 1 and false is 0 but we just
12:15 - write true and false to represent that
12:17 - in our program alright so that's the
12:19 - basics of types and data types now let's
12:22 - just define a few variables of different
12:24 - types and then will pretty much be done
12:26 - with this this tutorial series so let's
12:27 - make some int let's say var number u int
12:32 - let's see EWP's you int equals and
12:36 - actually let's do 260 and see what
12:38 - happens so I'm gonna make this view into
12:39 - eight and we'll make this equal to 260
12:42 - which is out of the range of you int
12:44 - right so look you int eight is only up
12:45 - to 255 let's save this and let's
12:48 - actually run this and see what happens
12:50 - so we noticed that I'm actually getting
12:52 - this squiggly value here and it says
12:53 - overflows so that's telling me that this
12:57 - here is too big to fit into eight bits
12:59 - so if I change this to 16 and we hit
13:02 - save no more errors we're good but wait
13:06 - what's it saying here number declared
13:07 - but not used so whenever we declare a
13:10 - variable in golang or in fact whenever
13:12 - we declare anything for that matter if
13:14 - we don't use it that's actually an error
13:17 - so if I don't use number in some
13:19 - capacity then it's action
13:21 - a problem we're not allowed to declare
13:23 - it unless we use it so actually let me
13:26 - show you how we can type or display this
13:28 - number so I believe I can actually just
13:30 - do comma and then put number here and
13:32 - now what's gonna happen is we're gonna
13:34 - print hello world and then we're gonna
13:35 - print this number 260 afterwards so
13:38 - let's open up that console if I can find
13:42 - this let's go a few terminal back to
13:46 - full screen unless you go run tutorial
13:49 - and see what happens okay so a hello
13:52 - world to 6 so that's the basics that's
13:55 - how you can print out the value of the
13:56 - variable is by doing 260 now I can
13:58 - actually go ahead and do something like
14:00 - number equals number plus 5 and we'll
14:03 - talk about arithmetic operations later
14:05 - but if I do that this will change the
14:08 - value of number to be 265 because we'll
14:10 - add 5 to it so let's save let's run this
14:13 - down here to enter and now let's see
14:16 - what we print out we get the value 265
14:18 - so when we're printing things out with
14:20 - println we can separate things by commas
14:23 - and print multiple values we can print
14:25 - multiple variables if we want and just
14:27 - display things but I think that I'm
14:29 - gonna leave the tutorial here so that's
14:30 - a little bit about types and about
14:32 - variables
14:32 - hopefully this made sense I go very in
14:35 - detail with these things just because at
14:36 - the beginning I really want you to
14:38 - understand how how old this works and
14:40 - yeah with that being said I hope you
14:41 - enjoyed it if you did make sure you
14:42 - leave a like subscribe and I will see
14:44 - you in the next goal ink tutorial