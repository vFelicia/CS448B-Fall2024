00:00 - hello and welcome to the third video in
00:02 - my jabba programming series now in this
00:05 - video I'm gonna be adding on to some of
00:06 - the stuff I did with variables in the
00:08 - last video and I am going to be talking
00:10 - about basic operations like plus minus
00:13 - subtraction division exponential all of
00:15 - that fun stuff so without further ado
00:18 - let's get started now when I first gonna
00:21 - do is just talk about another way that
00:22 - we can create variables in Java so
00:25 - earlier you saw me do something like
00:26 - this in 2x equals 6 ok this is fine this
00:30 - works we already know this but there's
00:32 - another way that we can actually create
00:33 - this variable and to do that we can
00:35 - actually omit this equals 6 so if we do
00:38 - this we just say int X what happens now
00:41 - is we've declared that X is a variable
00:43 - it exists but we have not given it a
00:46 - value so we've declared it but we have
00:48 - not initialized it I'll show you what I
00:51 - mean by this by just doing
00:53 - system.out.println and we're simply
00:56 - going to print X and just see what we
00:58 - get
00:59 - oh probably help I spelled print
01:01 - correctly okay wow I really messed that
01:04 - one up
01:05 - print LM ok run this and you can see we
01:08 - are already warned that there is an
01:09 - error so we'll proceed but and it says
01:12 - the local variable X may not have been
01:14 - initialized so before we can actually
01:15 - use the variable X when we set up like
01:17 - this we have to initialize it now to do
01:19 - that any line underneath this
01:21 - declaration we can just say X is equal
01:23 - to and then whatever value you want it
01:25 - to be as long as it's an integer value
01:27 - so in this case I'm going to say X
01:28 - equals 6 and now if we run the program
01:30 - everything works fine and we get 6 now
01:32 - obviously we can do this with every
01:34 - datatype so if I do like char and char X
01:39 - right and that's fine I say char x
01:41 - equals single quotation marks F like
01:44 - that okay then we can print that out and
01:46 - that will work fine now what I want to
01:49 - talk about now is operations so I am
01:52 - going to create a few variables I'm
01:53 - going to say integer x equals 5
01:56 - don't forget your semicolon integer y
01:59 - equals 7 and I'll say int Z is equal to
02:04 - 56 ok
02:06 - and I'll create one more variable and
02:08 - swear we're gonna start talking so what
02:11 - I want to do now is I want to sum
02:13 - all of these variables so 56 7 and 5 but
02:17 - I don't want to write like 56 plus 7
02:20 - plus 5 okay
02:23 - because yeah that's the value of these
02:24 - variables this works fine but what if I
02:27 - were to change this variable Y well that
02:29 - means I have to go down here and I have
02:30 - to change this as well to whatever I
02:32 - change Y to what if I want to change x
02:34 - and y well that means I have to change
02:35 - both of these so there's a really cool
02:37 - thing that we can do and we can just use
02:39 - the variable names and just add them up
02:41 - so we can say X plus y plus Z like this
02:45 - okay
02:46 - and now our variable sum stores the
02:49 - value of the sum of these three
02:51 - variables and to prove it to you I will
02:54 - print it to the screen and you can see
02:55 - that we get 68 as our sum now
02:59 - furthermore if we wanted to take the
03:00 - difference of all these and subtract
03:02 - them all we have to do is simply replace
03:04 - this with a minus sign and we get
03:08 - negative 58 okay now to multiply things
03:11 - this is another operator we can do
03:13 - multiplication like this and replace
03:16 - this one with multiplication we'll
03:17 - multiply all these out together you can
03:19 - see we get 1960 as our value to divide
03:23 - we can use the forward slash now I'm not
03:26 - gonna do that right now because that is
03:27 - kind of a different topic like there's a
03:29 - weird thing with division I have to talk
03:31 - about but that's how you do that so
03:34 - there are four basic operators now these
03:37 - work just like they work in math in
03:38 - terms of order of operations right so
03:41 - we're gonna start off with exponents and
03:43 - then go bracket our brackets exponents
03:46 - division multiplication and so on
03:49 - through the process okay I assume you
03:51 - guys know order of operations
03:53 - something's if I do something like x
03:55 - times y minus said what's first gonna
03:59 - operate is X multiplied by Y and then we
04:02 - are going to subtract said from whatever
04:03 - this value is now again if I switch this
04:06 - on you're like y x said what's gonna
04:10 - happen first is y x z and then the
04:12 - subtraction is going to happen now for
04:15 - example if we have the operators that
04:17 - have the same presidents or the same I
04:19 - don't know like order of operation level
04:22 - I don't know what to call it
04:24 - it's just going to order operate from
04:26 - left to right
04:27 - so it's gonna do X multiplied by Y
04:29 - multiplied by Z so this is a common
04:31 - occurrence allowed people to understand
04:32 - this if we do a Division sign we're
04:34 - first gonna multiply x times y and then
04:36 - we're gonna divide by Z afterwards okay
04:38 - so that's how that works
04:41 - now one more whenever we're doing
04:42 - operations like this we can also add
04:44 - brackets in so if I wanted to for
04:46 - example say X multiplied by Y and then
04:49 - divided by Z I could do something like
04:51 - this
04:52 - by throwing brackets in here so now it's
04:53 - showing a hundred percent that's we are
04:56 - going to multiply this before we divide
04:58 - and same thing if I did this
04:59 - now whatever's in the brackets is gonna
05:00 - happen first and then I can divide by
05:03 - Sud and obviously we can embed more
05:05 - brackets in here so I can say like x y
05:08 - times y okay like get out as many
05:12 - brackets and layers as you want and
05:13 - that's totally acceptable and that
05:15 - totally works okay so now we are going
05:18 - to talk about division more specifically
05:21 - and then go into a few more operators
05:22 - because division works a little bit
05:24 - different in Java is it just in general
05:28 - okay so if I want to divide 56 by 7 so I
05:31 - want to divide Z by Y okay and I sum
05:36 - just do you okay we're gonna call this
05:40 - you and I print this out to the screen
05:42 - 56 divided by 7 gives me a value of 8
05:46 - that is because our data type for the
05:48 - variable U which is holding the value of
05:52 - Z and Y or does that divided by Y is an
05:55 - integer so it actually isn't able to
05:57 - give us a floating-point number although
05:59 - we know that this number is a
06:01 - floating-point number is it let's see
06:04 - let's make sure this is not messed up 57
06:06 - divided by this guy yeah so it can't
06:08 - give us a floating-point number because
06:11 - this is well and int data type so it
06:13 - assumes we want an integer in return so
06:15 - therefore just gonna give us the value
06:16 - and terminate all the decimals okay so
06:18 - say this numbers like eight point
06:20 - something just gives us eight right
06:22 - removes the remainder now if I want to
06:24 - get decimal points what you will want to
06:26 - do most the time I could try to do
06:29 - something like this okay double of U
06:33 - equals Z divided by Y and you mean okay
06:36 - that makes sense double like it's gonna
06:37 - give us the floating point but watch
06:38 - what happens if I run this we
06:40 - just get a point oh well we know that 57
06:43 - divided by seven is not 8.0 it has some
06:46 - decimal component to it that I couldn't
06:47 - tell you right now but why aren't we
06:49 - getting that well that is because the
06:51 - two data types that we are dividing are
06:54 - both integers which means when we get a
06:57 - value back from this it's going to be an
07:00 - integer value and then all we do is
07:02 - convert it into double because we have
07:04 - this double here okay just by adding
07:06 - that dot zero so how can we ensuring we
07:08 - get a floating point well there's two
07:11 - things we could do we could first change
07:13 - the bottom to be a double and we could
07:16 - change the top to be a double so I could
07:18 - do like this okay it's like double and
07:22 - could change this to be a double all
07:24 - right and if we have both of these
07:26 - double and we try this now I can see
07:28 - that we get our decimal point okay and
07:31 - it shows up and gives us like whatever
07:33 - that is now what if I just make one of
07:36 - these so I say int Y and this is double
07:38 - ID let's try this now you can see we
07:40 - still get our floating point that is
07:43 - because if one of the values that we're
07:45 - dividing here is a double it's going to
07:47 - automatically make the whole thing a
07:50 - double so one of them is a double
07:51 - everything becomes a double and this is
07:53 - the way it works for all the operations
07:55 - so if you have W and in this case we say
07:59 - like x times y or let's say x times Z
08:04 - since Z is a double X is not we're still
08:07 - gonna get a double value so if we run
08:09 - this you can see that we get this little
08:10 - point O so if one of our operands is a
08:12 - double then that means everything is
08:13 - going to be a double when we use it or
08:16 - whatever
08:17 - okay now exponent the way that we can do
08:20 - exponent is we have to bring in module I
08:23 - believe but it's like math dot POW and
08:27 - then in here you put the what he called
08:31 - the base and the exponent there's not a
08:34 - star star like in most languages guy let
08:37 - me say int of D is equal to math POW and
08:42 - here I'm simply going to raise X to the
08:45 - power of Y all right so we get math up
08:47 - POW let's see what is this saying
08:48 - convert okay so what's
08:51 - this int int int hmm cannot convert form
08:58 - double to form int interesting why it's
09:00 - telling me that let's just try this
09:02 - maybe there we go okay so whenever we
09:06 - get x x exponents apparently they have
09:09 - to be in the form double okay didn't
09:11 - know that but all right
09:12 - so now if i want to print out d what's
09:15 - going to happen is we get the exponent
09:18 - for this okay so math dot pow this is
09:21 - your base and this is what you're
09:22 - raising the exponent to so 5 to the 7
09:24 - apparently is equal to that okay so that
09:27 - is pretty much it for operators i guess
09:31 - obviously you can have as many operators
09:33 - in one line as you want you now
09:34 - understand how things work in terms of
09:36 - doubles and int so if one of the
09:37 - operators in the whole chain of
09:39 - operators that you're opera seria Buhl's
09:41 - that you're adding subtracting dividing
09:43 - whatever is a double then that means
09:45 - you're going to get a double value back
09:46 - for 100% if all of them are integers
09:49 - that means you're going to get an
09:50 - integer value back now same thing here
09:52 - so i have
09:53 - let's change Y back to double and so
09:57 - let's change u to be int okay so it says
10:00 - in to you x time set so now that's x
10:04 - times y okay
10:05 - so now you can see we're getting an
10:07 - error here cannot convert from double to
10:09 - int and that is because we're trying to
10:11 - say that the integer u is equal to x
10:13 - times y but why is a double value so
10:17 - when we get a value back here it's gonna
10:18 - be double so we can't convert that into
10:21 - an integer just by doing this and
10:23 - there's another way that we can do it
10:24 - that I'm going to show you in a second
10:25 - okay so we would have to make sure that
10:28 - this stays us double and it's nice in
10:30 - this IDE it tells you when you made a
10:31 - mistake like that because a lot of times
10:33 - you might not really see that in your
10:34 - program okay now I'm quickly gonna go
10:37 - over something called typecasting we're
10:39 - going to talk about this a lot more
10:40 - later but I'm just gonna show you like
10:43 - fairly quickly how this works I'm just
10:45 - gonna delete this line and we're going
10:48 - to turn these back into integers okay so
10:51 - if I want to do something like X divided
10:54 - by Y okay and I want to make sure that
10:56 - I'm getting that value the decimal point
11:00 - value okay like so a double rather than
11:02 - converting these like
11:04 - the Declaration of our variable to a
11:05 - double something we can do called
11:07 - typecasting into typecast we are
11:10 - changing in line without changing the
11:12 - declaration the type of the variable the
11:14 - way to do this is to simply put in
11:16 - brackets the type that you want to
11:18 - convert your variable into and then
11:20 - directly afterwards is the variable you
11:22 - want to convert so in this case it's
11:23 - double and then we have Y okay so if I
11:26 - run this now and I print you instead of
11:30 - D you can see that we get the decimal
11:32 - value that we were looking for if I
11:34 - remove this double right then we do not
11:37 - get that or we do just cuz it says
11:39 - double but you guys see the point okay
11:42 - so anyways I think that is gonna be it
11:44 - for this video in the next video what
11:47 - are we gonna be covering got a look at
11:49 - my guide here we're gonna be talking
11:50 - about input and output so how can
11:52 - actually get input from the user in the
11:53 - console and then doing things based on
11:55 - that input printing them to the screen
11:56 - adding subtracting whatever okay so if
11:59 - you guys enjoyed the video as always
12:00 - please make sure you leave a like and I
12:01 - will see you again in the next one
12:07 - [Music]