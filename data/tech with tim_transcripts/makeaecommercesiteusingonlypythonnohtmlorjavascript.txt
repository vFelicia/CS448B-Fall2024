00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video i'm
00:13 - going to be showing you how to make an
00:14 - ecommerce website using only python so
00:17 - you don't need to use javascript no html
00:20 - no css or styling all you need to know
00:23 - is python to follow along with this
00:25 - video and the way we're going to be able
00:26 - to make this ecommerce site is using a
00:28 - platform called anvil now anvil is the
00:31 - sponsor of this video but what this
00:33 - platform provides is a free way to use
00:36 - only python to do full stack development
00:38 - so you can write python for the front
00:40 - end you can write python for the backend
00:42 - you can use python to add components to
00:44 - your website it's a really really cool
00:47 - platform and if you're someone like me
00:48 - who's very good at python or only knows
00:51 - python then this is probably the best
00:53 - thing that you can use to get a full
00:55 - stack website that is fully capable of
00:57 - anything that you would be able to make
00:59 - in something say like react or in any
01:01 - other web framework anyways i'm going to
01:03 - walk through this platform and obviously
01:05 - give you an entire tutorial of how to
01:07 - make this website we're going to be
01:08 - doing everything from creating user
01:10 - accounts so having sign-in and sign-ups
01:12 - for our website to having stripe
01:14 - integrated to collect payments from
01:16 - users this is super cool let me hop over
01:19 - here and show you a quick demo of what
01:20 - we're going to build and then of course
01:22 - we'll get into the tutorial and the
01:24 - platform walkthrough alright so i'm here
01:26 - on the finished product i'm just going
01:28 - to give you a quick demo of what we're
01:29 - going to be building and talk to you
01:30 - about some of the core features that
01:32 - you're going to have in your application
01:34 - once you finish this tutorial so i just
01:36 - want to mention that i'm not focusing a
01:37 - ton on styling here or the actual
01:39 - content of the website more just on the
01:42 - functionality and adding user accounts
01:44 - the stripe integration for collecting
01:46 - payments and then different page
01:47 - navigation and the ability to kind of
01:49 - unlock perks or products for specific
01:52 - users once once they purchase them so
01:54 - here we are you can see i'm on the tech
01:56 - with tim shop this is kind of a course
01:58 - website of course you could change this
02:00 - to whatever you want and after you build
02:02 - this you're going to have a really solid
02:03 - foundation for any type of ecommerce
02:05 - site that you want anyways point being
02:07 - i'm selling courses so if i go here you
02:09 - can see it says view courses we have a
02:11 - python course and a javascript course
02:13 - and then you can sign into an account
02:15 - where you'll get access to the courses
02:17 - that you've purchased or be able to
02:18 - purchase these courses so i'm going to
02:20 - click on sign in i'm going to sign in
02:22 - with my google account i've already done
02:24 - that before so it just signs me in
02:25 - automatically and then you can see i
02:27 - already have access to the javascript
02:29 - course so i'm just going to go back to
02:31 - the view courses page i'm going to now
02:33 - purchase the python course and show you
02:36 - how i get access to it so you can see i
02:38 - clicked buy now it's now showing me the
02:40 - payment kind of form so i can type in my
02:42 - email and the card number and i could
02:44 - purchase this course so let me go ahead
02:46 - and do that okay so i've just filled in
02:47 - the payment information here obviously i
02:49 - don't want to give away my credit card
02:51 - details so i'm just using a fake one and
02:53 - right now this stripe integration is set
02:55 - up on kind of a test platform that's why
02:57 - you're seeing the 49 cents here it's not
02:59 - actually going to charge a credit card
03:01 - it's just for kind of developing and
03:02 - testing so i'm going to say pay 49 cents
03:05 - i do that we give it a second and notice
03:09 - that we are going to get a message that
03:11 - says success we have purchased the
03:13 - course what we can do is go to my
03:15 - courses and you should see that we now
03:17 - have access to the python course so
03:19 - that's kind of what we're going to be
03:20 - building here again you can extend this
03:21 - and change this to whatever type of
03:23 - website that you will like this will
03:24 - give you a really solid base for an
03:26 - e-commerce website with that said let's
03:28 - hop over to anvil let me start showing
03:30 - you the platform and then we'll start
03:32 - making this application all right so i'm
03:34 - here on the anvil website we're actually
03:36 - going to use our web browser to develop
03:38 - this application we don't need to
03:40 - download anything we don't need to have
03:41 - an ide open you could do this in an ide
03:44 - if you want but the online ide that
03:46 - anvil has is really good and that's what
03:48 - i used originally to make this site and
03:50 - i do want to mention that anvil is
03:51 - completely free so they do have some
03:53 - paid plans but you do not need them to
03:55 - make a website and you can actually even
03:57 - publish your website completely for free
04:00 - from anvil with the free plan so what
04:02 - we're going to do is go to this website
04:03 - just click on start building and then
04:05 - what it will ask you to do is to create
04:07 - an account and then once you do that it
04:08 - will bring you to a page that looks like
04:10 - this now obviously i've already created
04:12 - an account i'm just using an email that
04:14 - i use for my youtube videos that i had
04:15 - originally created in a live stream
04:18 - anyways what we're going to do from here
04:19 - is click on create a new app and start
04:21 - from a blank application now of course
04:23 - you could start from a bunch of other
04:25 - apps like this and in fact anvil has a
04:27 - ton of tutorials and full guides that
04:30 - you can actually follow along with if
04:31 - you want to build a different type of
04:33 - website so of course we're doing one
04:34 - related to stripe and collecting
04:36 - payments kind of an e-commerce store you
04:38 - can do all kinds of stuff even related
04:40 - to data science and they have guided app
04:42 - builds as well so if you want to build
04:44 - something different then of course you
04:45 - can follow along with these tutorials
04:47 - they have a bunch of examples as well
04:48 - and then if you want to look at some of
04:50 - the features well i'll kind of quickly
04:51 - run through these but this is very very
04:53 - capable platform it can do pretty much
04:55 - anything that you want anyways we're
04:57 - going to go to this blank app right here
05:00 - and we're going to click on material
05:02 - design that's what i want to start from
05:03 - this just gives me kind of a little menu
05:05 - bar which will be nice to start
05:08 - okay so let's go ahead and click on that
05:10 - it's going to load up what's known as
05:11 - the anvil beta editor this is the editor
05:14 - i'm using they have a classic editor but
05:16 - the beta one is quite good i haven't
05:18 - found any problems with it so we can
05:20 - just use that for now if you wanted to
05:21 - go to the classic you could click that
05:23 - button so i'm just going to kind of walk
05:24 - you through the different tabs and
05:26 - things on this website then we'll start
05:28 - building the different pages that we
05:29 - want
05:30 - so you can see here we actually are
05:32 - starting with a drag and drop editor
05:34 - that allows us to build our custom html
05:37 - so what i can do is in my toolbox here i
05:39 - can click on something like a label or a
05:41 - link and i can just drag it directly
05:43 - onto the page and this will automate and
05:45 - start building the html of this page for
05:48 - me so very useful that's why i'm saying
05:49 - we don't need anything other than python
05:51 - because we can make everything with just
05:53 - drag and drop so let's just drag that
05:55 - label back here and if i want to change
05:57 - this label what i can do is click in the
05:58 - properties tab here and just start
06:00 - messing with say its name within my
06:02 - python code i'll show you that in a
06:04 - second the text its role
06:06 - i can look at an icon maybe the layout
06:09 - for it there's all kinds of stuff and
06:10 - properties that you can mess with pretty
06:12 - much anything you would do in html you
06:13 - can do from this property tab now what
06:16 - i'm going to do is click on this code
06:17 - tab right here and show you that when i
06:19 - do this it gives me the code for this
06:21 - page so this is actually kind of my
06:23 - front end code and this allows me to say
06:25 - link buttons up and do page navigation
06:28 - change different properties and you saw
06:30 - here that when i go to design it says
06:32 - self.label1 what i can actually do is
06:35 - inside of here so inside of the init or
06:37 - inside of a method that i make i can
06:39 - change the properties of label1 i can do
06:41 - something like self.label1 dot text is
06:45 - equal to hello world exclamation point
06:48 - like that so if i go back to design
06:50 - notice that it's not showing anything
06:51 - but if i run my code by clicking on the
06:54 - run button it's going to bring this open
06:56 - let's make it full screen and notice
06:58 - hello world is right here because in my
07:00 - code i change the property of that label
07:02 - or the text of that label sorry and then
07:05 - if you go down here you can see we have
07:06 - our app console background tasks and we
07:08 - have the get integration okay so i'm
07:10 - just trying to show you a few different
07:12 - pieces here now if you want to split
07:14 - between the ui and the code you can do
07:16 - that by clicking on the split view and
07:18 - what these pages are called by default
07:20 - is forms they're pretty much just you
07:22 - know a page right like that we would
07:24 - have in our html or in our actual
07:26 - website
07:27 - okay so let me click on app here this
07:29 - little kind of file directory structure
07:31 - and you can see that now it's showing me
07:33 - my client code my server code and then
07:35 - any assets that i have so for example if
07:37 - i wanted to actually look at the html i
07:39 - could do that i could click on standard
07:41 - page.html it would show me the built-in
07:43 - javascript that it has as well as the
07:45 - html for the page that i have built then
07:48 - i could look at the css i could of
07:50 - course modify this if i want to we're
07:52 - not even going to touch these files in
07:53 - this tutorial okay then we have our
07:55 - client code and our server code so what
07:57 - anvil actually allows you to do as you
07:59 - see here is have some logic for the
08:02 - front end of your website so for the
08:03 - client and then we can have some logic
08:05 - for the back end so on the server side
08:08 - we can actually use python as well to
08:10 - set up some apis or different urls or
08:12 - routes that we can access from our front
08:15 - end and all of this stuff that's related
08:16 - to kind of secure information so our
08:18 - databases purchasing courses we're going
08:20 - to do that from the back end using our
08:23 - server code and we'll do that later in
08:24 - the tutorial okay so that's pretty much
08:26 - all we need to look at for now i'll just
08:28 - go through a few more of these kind of
08:29 - little tabs that we have and then we'll
08:31 - start writing some code so notice we
08:33 - have databases so there's built-in
08:35 - database integration in anvil this
08:37 - allows us to actually store different
08:39 - users that we have the different courses
08:41 - that we're going to have pretty much
08:42 - anything else so we can actually add a
08:44 - table to this default database when i do
08:47 - this i can start setting up all the
08:48 - columns i don't need to know any sql to
08:50 - do this i can just do this with kind of
08:52 - you know the built-in editor they have
08:54 - right here so i can change the name of
08:55 - the table i can add a new column of
08:58 - different types i can add all different
09:00 - types of keys permissions whatever
09:02 - we will look at this more later i'm
09:04 - going to delete this table for right now
09:06 - because we don't need it okay next we
09:08 - have settings so we can change the name
09:10 - of the app i'm just going to go with
09:11 - tutorial for now of course we could
09:13 - change the title as well
09:16 - the description and then the logo if we
09:18 - want to we have different python
09:19 - versions i'm just using python 3 basic
09:22 - python 3. we can go to dependencies we
09:24 - can install different apps
09:26 - or different modules sorry we have our
09:28 - data tables we have collaboration and
09:30 - this will actually allow you if you have
09:32 - the business plan to have someone live
09:35 - editing the code at the same time as you
09:37 - now what i will also do is in the
09:38 - description i will leave this link right
09:40 - here which allows you to just click on
09:42 - this and instantly open a clone of the
09:44 - website that i've built so in case you
09:46 - get lost or something's wrong you can
09:48 - just click this link it will clone this
09:49 - in your anvil workspace for you and then
09:51 - you can modify it all you like you of
09:53 - course can download the source code onto
09:55 - your computer using git or just as a
09:58 - file as well okay that's pretty much it
10:00 - for settings we then have logs not super
10:02 - important we have the theme so we can
10:04 - mess with the color theme here you can
10:06 - see that these are kind of the main
10:07 - colors that i have you can make them
10:08 - whatever you want and then we have
10:10 - search which allows us to just search
10:11 - through all of the code and different
10:13 - things in our application great so that
10:15 - is kind of the walkthrough of the
10:17 - platform hopefully you're getting the
10:18 - gist of how this works now what we're
10:20 - going to do is build our very first page
10:22 - we're just going to start with the
10:24 - design tab so i'm going to go here to
10:26 - form 1 and inside of here i'm just going
10:28 - to change its name so we're going to
10:29 - rename this i'm going to call this my
10:31 - base page now the idea is i want this
10:34 - page right here to actually render all
10:36 - of my other pages inside of it so i want
10:39 - to always have this menu bar on the
10:40 - screen i'm actually not going to have
10:42 - anything in the sidebar although you
10:43 - could put something there if you want
10:45 - and then the main content of our page
10:47 - will go right inside of here which is
10:49 - called the content panel now the content
10:51 - panel you can see is of type column
10:53 - panel and this will allow me just to
10:55 - render different components directly
10:57 - inside of here again so that we keep
10:59 - this kind of top menu bar on the screen
11:01 - all right so the first thing i'm going
11:02 - to do here now that we've talked about
11:03 - that is i'm just going to delete this
11:05 - label and instead of having a label i'm
11:07 - going to add a link so that's the thing
11:09 - that's highlighting in blue or
11:10 - underlined in blue this allows me to
11:13 - actually click on this and then be
11:14 - redirected to a page now i'm going to
11:16 - drag a link there i'm also going to drag
11:18 - two links over here and the reason i'm
11:21 - adding two here is because i want one
11:22 - button that's going to say sign in if
11:24 - i'm not already signed in and another
11:26 - button that if i am signed in is going
11:28 - to allow me to view the different
11:29 - courses that i have so for link 1 this
11:32 - is going to be kind of our title of the
11:33 - website and it will bring us back to the
11:35 - home page so i'm going to call this my
11:37 - title and then for the text i'm going to
11:40 - make this tech with tim shop of course
11:44 - feel free to change all of the wording
11:46 - here
11:47 - so let's go tank with tim shop and then
11:49 - i want to add an icon for this so i'm
11:51 - going to click on icon i could select an
11:53 - icon that already exists here but what i
11:56 - want to do is make it my own icon so i'm
11:58 - going to select the tech with tim's
11:59 - circular icon from my kind of social
12:01 - media kit that i have on my computer and
12:04 - now you can see i get this image showing
12:05 - up so very easy to do that for link 3
12:08 - i'm going to make this the my courses
12:10 - button so i'm going to go to here and
12:13 - call this my underscore
12:15 - courses like that let's make the text
12:18 - my courses with the proper
12:21 - capitalization and then let's add a icon
12:24 - here to the left that's going to be a
12:26 - book so let's just make it that that
12:28 - looks good for my courses now for link 2
12:31 - i want to make this called sign in
12:36 - and i want to make the text sign in so
12:39 - let's do that and let's add a icon for
12:42 - this so i want this to be
12:45 - kind of like person
12:47 - so do we have a person maybe we want to
12:49 - just call this sign in so we can go with
12:51 - that i mean we can really make this any
12:53 - icon that we want but that one looks
12:54 - fine to me and now we have our base page
12:57 - so what i'm going to do is just go into
12:59 - the code of this base page i'm going to
13:01 - get rid of this label one because now we
13:03 - no longer have the label one and well
13:05 - that's our base page so if we run our
13:07 - code now
13:09 - we can see we have my courses we have
13:11 - sign in and we have tech with tim shop
13:14 - perfect i'm going to stop this and now
13:16 - what we're going to do is build the home
13:18 - page so this is kind of the base but
13:20 - what i want to have is actual content on
13:22 - the home page of my website and then we
13:24 - can navigate between different pages
13:26 - based on the links that we're clicking
13:28 - so what i'm going to do is add another
13:29 - form here i'm just going to make this a
13:31 - blank panel and the reason i'm going
13:33 - with blank panel is because i'm going to
13:35 - render this page inside of the base page
13:38 - so you can see we have this kind of
13:39 - empty content panel i'm going to put the
13:41 - content of what i'm calling the home
13:43 - page right inside of this content panel
13:46 - you'll see how this works in a second
13:47 - but for now let's rename this to be home
13:51 - and let's start designing this page so
13:53 - for now all i actually want on here is
13:55 - an image so i gotta find image
13:58 - looks like there's an image right there
14:00 - what i want underneath that is some type
14:02 - of label so let's drag in a rich text
14:05 - label which is the second one right here
14:07 - and then i want a button and this button
14:10 - i think this is a button right here
14:11 - let's hover over and see if this says
14:13 - button yes it does for the button what i
14:16 - want this to be is to allow me to view
14:18 - the different courses that i can
14:19 - purchase right so it's going to say view
14:21 - courses like the finished website did so
14:23 - let's start here by adding the image so
14:25 - i'm going to go to image i'm going to
14:27 - call this maybe main
14:29 - image and then for the actual image
14:33 - where would i select that that's going
14:34 - to be source so i'm going to click on
14:36 - source and all i'm going to do is find
14:39 - one of my tech with tim logos that i can
14:40 - use here okay so this is actually the
14:42 - logo that i want i'm going to go with
14:43 - tech with tim extra large okay that's
14:45 - the one that i'm looking for again make
14:47 - this whatever you want for the rich text
14:50 - let's just call this label
14:52 - and for the actual text on this i won't
14:55 - go with anything crazy wait where is the
14:57 - text that's under content i'm going to
14:59 - say this is the tech
15:02 - with tim
15:04 - course shop
15:06 - exclamation point
15:08 - enjoy
15:09 - okay
15:11 - that's all we need for right now now i
15:12 - don't want the text to be this small so
15:14 - i want to make it a bit larger and put
15:15 - it in the center so to do that i'm going
15:18 - to go to layout uh actually that's not
15:20 - what i want i'm going to go to text i'm
15:22 - going to go to align center okay good
15:25 - for the font
15:26 - actually let's just change the font size
15:28 - let's make this font size something like
15:30 - maybe not 50 maybe 40 is good okay so
15:33 - that's actually good for the text i was
15:35 - going to change the font but let's make
15:37 - this down to 30. i think that looks fine
15:40 - then of course if i want i could resize
15:41 - these so maybe we'll make this text a
15:43 - little bit bigger or this image a little
15:44 - bit bigger sorry and now we can deal
15:46 - with the button so for the button what i
15:49 - want to do is go to appearance here and
15:51 - change the roll to be primary color now
15:53 - when i do that notice it's going to make
15:55 - it the primary color that i have set for
15:57 - my color theme of course i could go
15:58 - secondary color but for now we will go
16:01 - actually i think secondary color looks
16:03 - better because i like the orange so
16:04 - we'll go with that
16:05 - we don't really need an icon although
16:08 - maybe we do want one let's go can i do
16:10 - button or like
16:12 - arrow
16:13 - maybe we'll go arrow to the right maybe
16:16 - that makes sense
16:17 - and then for the text of the button i
16:19 - want to say view underscore courses like
16:22 - that we want this to be bold let's make
16:25 - the font size 22 nice and then do we
16:28 - want it underlined
16:30 - it doesn't really matter for now we can
16:31 - go with italics i think that looks fine
16:34 - okay so this is the home page of course
16:37 - i could go to the code not really
16:38 - anything we need to do on here right now
16:40 - but what i will do
16:42 - is i will make it so that we can now
16:43 - render the home page inside of the base
16:45 - page so what i'm going to do is go to
16:47 - code and inside of the init here i'm
16:50 - going to show you how from code i can
16:51 - actually take this home component and
16:54 - put it on this page actually all i'm
16:56 - going to do to do this is say self dot
16:58 - content panel dot add component and what
17:02 - i'm going to do is add the home
17:03 - component like this now to do that i
17:06 - need to import the home component so i'm
17:08 - going to say from and i believe we can
17:09 - just go with home
17:11 - import home
17:13 - like that now let me check my code here
17:16 - and see if this is correct we're
17:18 - actually going to have to go with from
17:19 - dot dot home so let's change it to that
17:22 - and now if i run my code we should
17:24 - actually see that the home page is
17:26 - rendered inside of the base page so
17:28 - let's try this let's go with run
17:30 - and now notice we have the home page
17:32 - right here we have view courses and it's
17:34 - inside of this base page so next what we
17:37 - need to do is set up a few pages for my
17:39 - courses for signing in for viewing
17:41 - courses and make it so when we click
17:43 - these buttons and these links it
17:45 - actually does something okay so let's
17:46 - stop running this and let's actually
17:48 - start by building the view courses page
17:50 - so when we click on this button it
17:51 - actually changes what page that we are
17:53 - on okay so let's go stop
17:55 - let's make a new page here so we're
17:56 - going to make a new form this again will
17:58 - be a blank panel because we're going to
18:00 - render it from this base page i'm going
18:02 - to rename this and let's call this
18:05 - courses like this this will be the page
18:07 - that allows us to buy different courses
18:10 - okay so on here
18:11 - what i actually want to do for now is i
18:14 - just want to put a panel so i'm just
18:16 - going to go
18:17 - to where is it right here
18:20 - column panel i'm going to add that in
18:22 - i'm just going to call this the content
18:24 - panel
18:25 - to be consistent with what we had before
18:27 - and what we're going to do later is
18:29 - we're going to make it so we read the
18:30 - information about our courses from a
18:33 - database and then we render that on the
18:35 - page so rather than statically adding
18:37 - the courses we store them in a database
18:39 - we then read all the courses from the
18:40 - database and we dynamically render them
18:42 - on the page that way if we decide to add
18:45 - any other courses or for you guys maybe
18:47 - products it will automatically add them
18:49 - here we don't need to hard code them in
18:51 - especially in multiple places so i'm
18:53 - going to put the content panel but just
18:54 - so that we see something inside of here
18:56 - i'll put a label and let's just put some
18:58 - text that just says
18:59 - course page
19:01 - we'll delete this later but just so we
19:03 - know that we're going to the right page
19:05 - okay so now that we have courses let's
19:07 - go back to our home page here and let's
19:09 - make it so when we click this button
19:11 - what it actually does is it brings us to
19:14 - the courses page so the way we're going
19:16 - to do that is we're going to click on
19:17 - this button right here and i called this
19:19 - button one let's just call this view
19:21 - underscore courses and let's go down to
19:24 - where it shows events so this is cool
19:26 - what i can actually do is i can set up
19:28 - an event for showing the button hiding
19:30 - the button and clicking so i'm going to
19:32 - go to click i'm just going to click on
19:33 - this like kind of double arrow right
19:35 - here and what it's going to do is
19:36 - automatically create a method for me
19:38 - that will be called when i press this
19:40 - button so it says this method is called
19:41 - when the button is clicked and inside of
19:43 - here i do whatever i want to happen when
19:45 - i click the button so what i actually
19:47 - want to do is i want to clear the
19:49 - content panel which is what's going to
19:51 - be holding all of this stuff we're going
19:53 - to actually make that in a second and
19:54 - then i want to render inside of the
19:56 - content panel the my courses page so
19:59 - very similar to what i'm doing from the
20:00 - base template here from the base
20:02 - template i'm adding this home page and
20:04 - then the home page is rendered within
20:06 - the base page now from the home page
20:09 - what i'm going to do is render the my
20:10 - courses page and kind of delete
20:12 - everything that's inside of this panel
20:14 - so to do that i need to first go to
20:16 - design here and i need to create a
20:19 - column panel so i'm going to grab column
20:21 - panel i'm going to put it right here and
20:23 - i'm actually going to drag all of this
20:25 - stuff inside of the content panel so
20:27 - let's go here
20:28 - and like that and now let's go to this
20:31 - main panel if i can find it and let's
20:33 - rename this to content underscore pen
20:37 - okay so now let's go to code and what i
20:39 - will do here is say
20:40 - self.contentpanel.clear
20:43 - this removes everything so all the
20:45 - components from inside of that panel
20:47 - then i'm going to say self.contentpanel
20:49 - dot add component and we're going to add
20:52 - the
20:52 - courses component like that
20:55 - okay now to do this i need to import
20:57 - courses so i'm going to say
20:59 - from.courses like that import courses
21:02 - great let's save that let's now run and
21:05 - let's see if this button works
21:07 - okay so loading the page let's click on
21:10 - my courses and notice when i do that it
21:12 - brings me to the course page now what i
21:14 - want to do is make it so when i click on
21:15 - this main button here it brings me back
21:17 - to the home page so let's do that then
21:19 - we can set up my courses and signing in
21:22 - okay so let me just remove some of these
21:23 - comments because we don't really need
21:24 - that
21:25 - let's go back to base and let's go to
21:27 - design and let's add something for when
21:29 - i click on this link right here so to do
21:32 - that i'm going to go down to events i'm
21:34 - going to go to click
21:36 - i'm going to now have the title click
21:38 - method and when this happens i'm just
21:40 - going to clear the content panel and
21:42 - then re-render the home page that way we
21:44 - will just get the home page on the
21:46 - screen doesn't really matter where i am
21:47 - if i click on this i just want the home
21:49 - page right so we'll say
21:50 - self dot in lower cases self dot content
21:53 - panel dot clear
21:55 - and then self dot content panel dot add
21:58 - component and we'll just add a new
22:00 - version of the home page okay
22:02 - that's all we need to do
22:04 - now that we have done that what i can do
22:06 - is simply rerun this
22:09 - and we can test it so let's now go to
22:11 - view courses let's click on that notice
22:13 - it brings me back to the home page
22:16 - awesome let's stop this and let me just
22:18 - quickly describe what this is actually
22:20 - doing when i say home with parentheses
22:22 - because i don't think i explained that
22:24 - so as you can see if we look at even
22:25 - like the base page right here we have a
22:27 - class and this class represents the
22:30 - actual page that we're seeing so if i
22:32 - want to treat a page as a component all
22:35 - i need to do is make an instance of that
22:37 - class so what i'm doing is saying make
22:38 - an instance of home and then if i put
22:41 - that inside of add component well it
22:43 - just adds it to the screen right it adds
22:45 - that home component inside of the
22:47 - content panel component and so that's
22:49 - how i'm kind of rendering hopefully it
22:51 - makes a bit of sense but this is the
22:52 - content panel right here i'm putting
22:54 - home inside of there and then from home
22:56 - when i click on view courses the home
22:59 - page then clears its content right it
23:01 - clears what's inside of there and
23:03 - instead renders the courses page
23:05 - perfect there's many different ways that
23:07 - we could do this but for now we're just
23:08 - going to do it in this type of way all
23:10 - right so now that i've done that let's
23:12 - code out the my courses page and then
23:14 - let's deal with our different users so
23:15 - how we can create new accounts sign in
23:17 - sign up etc
23:19 - so let's go to design let's make a new
23:22 - form this will be a blank panel as well
23:25 - and let's rename this here to be my and
23:28 - then courses like that now the only way
23:30 - we're going to access my courses is from
23:33 - the base page right we're going to click
23:34 - on my courses and so i want to make a
23:36 - link here that then renders the my
23:38 - courses page so i'm going to go to the
23:40 - my courses link i'm going to click on
23:42 - click
23:43 - then inside of here we're going to say
23:45 - self dot content panel dot clear and
23:48 - self dot content panel dot add component
23:51 - and we're gonna add the you guessed it
23:53 - my courses component that means that we
23:56 - need to import that so i'm gonna say
23:57 - from dot dot and then this will be my
24:00 - courses import my courses
24:03 - that's all we need to do to set up this
24:05 - link so let me save that
24:07 - let's now go to my courses and let's
24:09 - just add something on the screen we want
24:12 - a panel
24:13 - so i'm going to call this again the
24:14 - content panel
24:16 - and then i want a label
24:18 - and let's just look at this and call
24:20 - this
24:21 - my courses
24:23 - again we will delete that in a second we
24:26 - just need to see what page we are on
24:28 - all right so now that we have that
24:30 - let's test it out let's run the
24:31 - application
24:33 - let's click on my courses notice it
24:35 - brings me here let's go back to the home
24:36 - page let's click on view courses it
24:38 - brings me to the course page
24:40 - perfect now that we did that what we
24:42 - want to do is work with our different
24:44 - users so create accounts sign up sign in
24:47 - etc so to set up our users is actually
24:49 - super simple when we're in anvil we
24:51 - don't even need to make our own custom
24:53 - login forms or anything like that we
24:55 - don't even need to set up a database
24:57 - literally all we do is install kind of a
25:00 - service or a module for anvil and then
25:03 - that will actually pretty well do
25:04 - everything for us we just kind of need
25:06 - to handle when we sign the user in or
25:08 - when we log them in so i'm going to
25:10 - click on this little add button right
25:11 - here and notice we have a bunch of
25:13 - different features right we can go with
25:14 - a facebook api a microsoft api well
25:16 - that's from the business plan we have
25:17 - the stripe integration we have app
25:19 - secrets we have all of this kind of
25:20 - stuff but what i want is users so make
25:23 - it easy to sign up and authenticate
25:25 - users of your app sounds like exactly
25:27 - what we want when i do this it's going
25:29 - to bring me to this page here which
25:31 - pretty much explains everything i need
25:32 - to know about my users so notice that we
25:35 - can sign in with a bunch of different
25:37 - ways right
25:38 - we can do it with facebook we can do
25:40 - with google we could do with an email
25:41 - link or just with email and password now
25:43 - for now i'll just toggle the ability to
25:45 - sign in with both the email and the
25:47 - password or with your google account of
25:49 - course you could select facebook if you
25:51 - want it doesn't really change anything
25:52 - just select the ones that you want okay
25:54 - then we go to login options uh require
25:56 - secure passwords prevent users from
25:58 - changing passwords that are too short or
26:00 - that have been leaked online or sorry
26:02 - from choosing passwords my bad not
26:03 - changing so let's do that remember log
26:06 - in between sessions sure we can select
26:08 - that as well and then we can change this
26:10 - option let's remember the login for one
26:12 - year share login status with other apps
26:14 - users logged into this app will
26:16 - automatically be logged into other apps
26:17 - sharing the same users table they have
26:19 - this option enabled i don't want that
26:21 - and then require two-factor
26:22 - authentication i'm not going to do that
26:24 - as well
26:25 - now we have allow visitors who sign up
26:27 - users can create their own account
26:28 - otherwise need to manually create them
26:30 - we would like users to make their own
26:31 - accounts so we will do that and then new
26:34 - user accounts can be used right away
26:36 - users can log in as soon as they've
26:37 - registered registered sorry otherwise
26:39 - you must check the enabled box so the
26:41 - reason why
26:42 - you would want to undo this is if you
26:44 - need the user to go through some type of
26:46 - authentication process before you
26:48 - actually allow them to fully log in now
26:50 - we also have users need to confirm their
26:52 - email address by clicking a link before
26:54 - they use their accounts so we'll select
26:55 - all of these for right now and then
26:57 - notice is going to show me what the
26:58 - users table looked like so i have
27:00 - information like remember login signed
27:02 - up confirmed email end password failures
27:05 - password hash all this kind of
27:06 - information
27:08 - and again i didn't need to do any of
27:09 - that it literally just set it all up for
27:11 - me
27:12 - okay so now it shows me how i can
27:14 - actually log the user in so i have
27:18 - anvil.users.loginwithform i also have an
27:19 - ability to sign up a user
27:22 - and i have this ability to get a user so
27:25 - if you've ever used flask before this is
27:27 - very similar when you kind of sign in
27:28 - the user and then the user gets stored
27:30 - in the current session that's how it
27:31 - works here with anvil i just call get
27:34 - user and then that gives me all the
27:35 - information stored in the users table so
27:38 - let's start using some of these methods
27:40 - here we're going to do this from the
27:42 - base page and we're going to just call
27:44 - anvil.users.login with form and i'll
27:47 - show you how it actually automates a
27:48 - login form for us so let's go to code
27:51 - here
27:52 - and actually sorry not code let's go to
27:54 - design let's click on sign in and then
27:56 - for here let's do something for the
27:58 - click button click button sorry so now
28:01 - inside of the click button i'm just
28:02 - going to call
28:04 - anvil.users.login with form and this
28:06 - should be all i need to actually allow
28:08 - me to log in a user all right so this
28:10 - looks good to me just note that up here
28:12 - we're importing anvil.users so for some
28:14 - reason this doesn't work just make sure
28:16 - you have this import you need to import
28:18 - that otherwise this isn't going to work
28:19 - for you anyways what i can do now is
28:21 - just run the code and when i click on
28:23 - this sign in button it should just allow
28:24 - me to sign it so let's go to run
28:27 - and now let's see it says sign in okay
28:30 - when i click on this notice says i can
28:32 - sign up for a new account by clicking
28:33 - that or i can just sign in either with
28:35 - google or with my email and password now
28:37 - i'm going to do this with google so
28:39 - let's go here
28:40 - it automatically signs me in now that's
28:42 - because i only have one google account
28:43 - that i've already put the password in
28:45 - for if you had multiple it would give
28:47 - you the google options or your different
28:48 - account options then you could click
28:50 - them and sign in with the account that
28:51 - you want
28:52 - anyways that is working but we need some
28:54 - kind of indication that we're signed in
28:57 - in fact this sign in button should
28:59 - probably go away once we sign in or it
29:02 - should show us kind of our user's name
29:04 - or our user's email or something like
29:06 - that so let's actually go ahead and do
29:08 - that
29:09 - i'm going to go now to my base template
29:12 - i'm going to go to code and i'm going to
29:14 - make something that actually changes the
29:16 - text from my sign in button
29:18 - based on
29:19 - what you call it if we're signed in or
29:22 - not because also if i'm signed in and i
29:24 - click on the sign in button again i
29:26 - probably want to be able to sign out
29:27 - right rather than just signing in with a
29:29 - different account i need some way to log
29:31 - off or to sign up so i'm going to go to
29:33 - sign in with click
29:35 - and actually that's not where i'm going
29:36 - to go first i'm going to make a method
29:37 - first i'm going to say define change
29:41 - sign
29:42 - if i can type here in underscore text
29:45 - this is going to take self and what this
29:47 - is going to do is just check if a user
29:49 - is signed in and if they are it's going
29:51 - to change that sign in button so i'm
29:53 - going to say user is equal to and this
29:55 - is going to be anvil dot users dot get
29:58 - underscore user
30:00 - this will give me access to all of the
30:01 - information in the users table but what
30:04 - i can just do is say if user now if we
30:07 - don't have a user signed in this will
30:09 - return none to us if we do have a user
30:11 - signed in then what we can do is we can
30:13 - get their email and we can make that the
30:14 - text for the sign in bud so i'm going to
30:16 - say if user then email is equal to user
30:20 - and this will just be at email the way
30:22 - we access stuff from our database tables
30:24 - is by just using a dictionary key like
30:26 - this so i say user at email it will give
30:29 - us the email and then what i can do from
30:31 - here is change the text on that link so
30:34 - i can say self dot sign in
30:37 - dot text
30:38 - is equal to email like that
30:41 - otherwise so if we are not signed in
30:43 - then i want the self dot sign in dot
30:46 - text to be equal to sign in
30:49 - like that okay so now i just need to
30:51 - call this method so what i'm going to do
30:53 - is as soon as i render this home page
30:56 - here
30:57 - uh actually we can do before we enter
30:58 - the home page we'll just say self dot
31:00 - change sign in text and then what i also
31:02 - want to do is make it so that after i
31:04 - click the sign in button i call this
31:06 - method because once i've signed in then
31:09 - this will have changed right we will
31:10 - have someone signed in and so we need to
31:12 - change the text so i'm going to say self
31:14 - dot change sign in text and i just call
31:16 - that again after we potentially sign in
31:18 - or maybe don't sign it okay let's give
31:21 - this a shot here so let's press run
31:24 - and let's see what we get now
31:25 - notice that sign in is like this so i
31:27 - guess it didn't actually save my sign in
31:29 - or maybe i've messed something up i'm
31:31 - going to go to sign in though and i'm
31:33 - going to sign in with google and let's
31:34 - see if it now changes to my email okay
31:36 - perfect so it does change to my email
31:38 - now we get this here the other thing
31:40 - that i might want to change is just this
31:42 - icon because this icon doesn't really
31:44 - make much sense now if i'm not signing
31:46 - it so i'm going to do that but first
31:48 - let's see what happens if i click on
31:49 - this and notice when i click on this
31:51 - nothing is happening because i'm already
31:53 - signed in so we will make it so if you
31:55 - click on this it allows you to sign out
31:57 - but we'll do that after we change the
31:59 - icon or the logo i keep calling it logo
32:01 - but i mean icon so let's go back here
32:04 - the base page let's go to sign in
32:06 - let us go to our icon
32:09 - and let's change this to something that
32:11 - kind of looks like an account i'm just
32:14 - going to scroll through here i had one
32:15 - on my other website that i liked but i
32:17 - don't know what it was called i want to
32:20 - say it's called account but it doesn't
32:21 - look like it's called that
32:23 - do we have people do we have person
32:26 - do we have
32:27 - sign in
32:28 - okay uh let me check what the icon was
32:31 - and then i'll be right back all right so
32:32 - the only thing i didn't guess which is
32:34 - user is what i will do here so i will
32:36 - just go with the user icon and then this
32:38 - will work for sign in as well as for
32:42 - what he called if we are already signed
32:44 - it both of those work okay so now that
32:46 - we've done that let's go back to code
32:48 - and let's make it so that if you click
32:49 - on this button and you're already signed
32:51 - in it lets you log in so i'm going to
32:53 - say if
32:55 - actually let's say user is equal to
32:57 - and then anvil dot
33:00 - users.getuser like that
33:02 - if we have the user so if user
33:05 - then we don't want to do that so i'm
33:06 - going to say else like that
33:08 - instead what we want to do is allow the
33:10 - user to sign out so what i'm going to do
33:12 - here is actually ask the user if they
33:14 - want to log in now the way i can do that
33:17 - is by using a built-in function called
33:19 - confirm this will actually open kind of
33:21 - a dialog that will say do you want to
33:23 - log out and then they can click yes or
33:25 - no and based on if they click yes or no
33:27 - this will be true or false so i'm going
33:29 - to say log out
33:31 - is equal to confirm
33:32 - would
33:34 - you like to log out question mark and
33:38 - i'm going to say if log out so if they
33:40 - press the yes button then this will be
33:41 - true if they press the no button it will
33:43 - be false so the if statement will run so
33:45 - if log out then i'm going to say anvil
33:47 - dot
33:48 - users dot log out
33:50 - like that
33:52 - and then i'm not sure if there's
33:53 - anything else i want to do here actually
33:55 - if they do log out then what i will do
33:57 - is i'll just bring them back to the home
33:58 - page so i'm going to say self
34:00 - dot content panel
34:03 - dot clear and then
34:04 - self.contentpanel.addcomponent
34:07 - and then this will be home
34:10 - now that i'm thinking about it though i
34:11 - can probably put this in a method
34:14 - because i'm doing this a ton so i'm just
34:15 - going to make a method here and i'm just
34:17 - going to say define
34:19 - go to
34:21 - underscore home
34:22 - this will take in self
34:24 - we'll just paste this in here which
34:26 - allows us to go to the home page let's
34:28 - make sure our indentation is correct
34:31 - and then what i will do is instead of
34:32 - this here just call self dot and then go
34:35 - to home
34:36 - and i do this a few other times as well
34:39 - i do this right here so let's just say
34:41 - self dot
34:43 - go to home
34:44 - and then up here we can say self dot and
34:48 - then go to home as well
34:50 - okay
34:52 - that is all good
34:53 - let's now try this out and let's see if
34:55 - this lets me log out okay so let's run
34:58 - the code
34:59 - and
35:00 - let's first sign in
35:02 - okay so we're going to sign in with
35:04 - google
35:05 - brings me here
35:06 - let's click on this notice it says do
35:07 - you want to log out let's click yes and
35:10 - then it logs me up
35:12 - perfect that is all good the next thing
35:14 - that i want to do is just make it so
35:16 - this my courses button only shows up if
35:19 - i'm signed in because really how am i
35:22 - going to view my own courses if i'm not
35:23 - already signed into the account that
35:25 - doesn't really make much sense so we
35:26 - only want to show this button if we are
35:28 - assigned it
35:29 - so let's do that we're going to go to
35:32 - change sign in text is this where i want
35:34 - to do it
35:35 - let me look here and see where exactly
35:37 - we actually want to implement this
35:38 - functionality so let's actually make a
35:40 - method here just to make this a bit more
35:42 - readable and let's say define and then
35:44 - let's say
35:45 - toggle underscore my underscore courses
35:48 - underscore link
35:50 - and inside of here we're just going to
35:51 - say that self dot and then my courses
35:55 - dot visible is equal to and then this is
35:58 - going to be anvil dot users dot get user
36:02 - and this is going to be does not equal
36:04 - none
36:04 - so what this is going to allow me to do
36:06 - is set the visibility equal to true so
36:08 - we can see it if we are signed in and if
36:11 - we are not signed in then it will make
36:12 - it false now what i need to do though is
36:14 - i need to call this inside of the change
36:17 - sign in text method because whenever i'm
36:20 - changing the sign in text i also need to
36:22 - potentially change whether or not this
36:24 - button is visible so i'm going to go
36:25 - here and say self dot and then this will
36:28 - be
36:29 - what do we even call this toggle my
36:31 - courses link
36:32 - and now we should be good okay so let's
36:34 - run this and let's see if this works
36:38 - notice that it's not showing the button
36:39 - because i'm not signed in and then when
36:41 - i sign in
36:42 - let's sign it with google you will see
36:44 - that it now shows me the my courses
36:46 - button and changes this text so now i
36:48 - can click on this
36:49 - and we are good to go okay so now we
36:51 - have finished implementing the users
36:53 - hopefully you saw how easy that was to
36:55 - do it was literally like four or five
36:56 - lines of code and a few button clicks to
36:58 - get the users working and i'll just show
37:00 - you that if you click on this data tab
37:02 - right here we have the users table and
37:04 - inside of here we can actually add
37:06 - fields to the table if we wanted to do
37:08 - that so one field i'll add right now
37:10 - because we're going to use this in a
37:11 - minute is called purchased courses and
37:14 - this is because we need something to
37:15 - keep track of what courses a user has
37:17 - purchased so i'm going to add a simple
37:19 - object column this allows me to add a
37:22 - python object inside of here like a list
37:24 - so let's add simple object
37:26 - let me scroll over so we can see this
37:29 - and for this simple object i'm just
37:31 - going to put a list for now just an
37:32 - empty list and that's all we need for
37:34 - this first user okay that is good now
37:38 - what i will do is close this and we are
37:40 - going to start making our actual courses
37:43 - so as i was saying before what i want to
37:45 - do is i want to have a database that
37:47 - kind of stores all of my different
37:48 - products in this case they're courses
37:50 - but for you guys it could be an actual
37:52 - ecommerce product that you're selling
37:54 - and what i want to put in there is the
37:55 - name of the course the price of the
37:57 - course the id of the course maybe an
37:59 - image for the course pretty much any
38:00 - information related to it so i can just
38:02 - grab all that information right from my
38:05 - database so i'm going to make a new
38:07 - table here inside of the database i'm
38:09 - going to rename this and i'm just going
38:11 - to call this courses
38:13 - now we need a few columns for this
38:15 - course so the first thing i'm going to
38:16 - do is add a text column and i'm just
38:18 - going to call this the name
38:21 - now
38:21 - what we can do is manually add the names
38:24 - of our courses so the court first course
38:25 - that i want is going to be javascript
38:27 - and then the next course that i want is
38:29 - going to be python now other than that i
38:31 - want a price column so i'm going to add
38:33 - a number column and i'm going to call
38:35 - this price now for the javascript course
38:37 - we'll go with 37.99 and for python we
38:40 - can go with 49.99 and also feel free to
38:42 - add a lot more items as well i'm just
38:44 - going to go with 2 because we don't need
38:45 - a ton right now but you can add more if
38:47 - you want obviously
38:49 - next we have the name we have the price
38:51 - we're going to want a date time column
38:53 - for when we created this course
38:55 - and what we can do is if i right click
38:58 - on this
38:59 - i should be able to actually insert a
39:00 - date time okay perfect so i can insert a
39:02 - date time by just clicking on this
39:04 - for the time i don't know i'll just
39:05 - select a random time it doesn't really
39:06 - matter what it is so let's go with this
39:10 - that's the time that we created these
39:11 - two courses perfect
39:13 - after created the next thing that i want
39:16 - is the description of the course so i
39:18 - will just say for here
39:21 - learn javascript
39:23 - and become a pro
39:26 - did i spell this wrong uh yes i did okay
39:29 - and then i will say
39:31 - learn python
39:33 - and become a master okay
39:36 - just random stuff just so we have some
39:37 - content other than description the other
39:40 - thing that i wanted was actually the
39:42 - image for this course i'm going to add a
39:44 - media column
39:45 - and here i can add like a file or an
39:47 - image or something so i'm going to find
39:49 - two images in a second and add them here
39:50 - but for now i'll call this image and
39:52 - then lastly i want to have something
39:54 - called my id name now the point of this
39:57 - is just to be a lowercase version of the
39:59 - actual display name so that i can easily
40:02 - reference this course so i'm going to
40:03 - say
40:04 - javascript
40:06 - and i'm going to say python
40:08 - again the whole point this is just to
40:09 - have a lowercase version so that i don't
40:11 - have to get the capitalization correct
40:12 - on my courses which could have you know
40:14 - multiple words uh different
40:16 - capitalization all of that kind of stuff
40:18 - okay so what i'm going to do is take a
40:19 - break here find an image for both
40:21 - javascript and python and then i will
40:22 - upload them here and i'll be right back
40:24 - alright so i've just uploaded the two
40:26 - images that i'm going to use here as
40:27 - kind of the cover image for both of
40:29 - these courses it doesn't really matter
40:31 - what these images are i've just found
40:32 - some ones that are decent sizes and if
40:34 - you want these exact same images then
40:36 - you just need to clone this application
40:38 - again i'll leave the link down in the
40:40 - description when you click on it it will
40:42 - open a new anvil workspace that will
40:44 - have these images and have pretty much
40:46 - everything that i've worked on in the
40:47 - entire tutorial anyways we now have the
40:50 - courses database so we are kind of good
40:52 - to continue here now what i want to do
40:55 - is start talking about the server side
40:57 - of our anvil application so right now
41:00 - we've just been working on the client
41:01 - side we've been doing front end code and
41:03 - that's fine for now however we need a
41:06 - way to actually access the fields in our
41:08 - database and we want to do that from the
41:11 - server so we want to set up kind of a
41:13 - module or maybe an api if you want to
41:15 - call it on our server that gives us
41:17 - information about our courses now the
41:19 - reason we want to do this on the server
41:21 - is because whenever we're accessing
41:22 - information from a database or something
41:25 - that we don't want the client to be able
41:26 - to modify or change we need to do that
41:29 - from the server because if we do it from
41:31 - the client then they could potentially
41:33 - modify this code they could do something
41:35 - malicious so whenever security is
41:37 - important you want to be doing that type
41:38 - of operation on the server and then just
41:40 - calling or sending a request to the
41:42 - server from the front end to perform
41:44 - that operation so what i'm going to do
41:46 - here is make a new server module i'm
41:48 - going to rename this and i'm going to
41:50 - call this course details
41:52 - now this module is going to allow me to
41:54 - get the details of the different courses
41:56 - that i have from my database we're going
41:58 - to set up a few different api calls here
42:00 - or roots or methods or whatever you want
42:02 - to call them that allow us to get one
42:04 - all of the different courses and their
42:06 - information to the price of a specific
42:09 - course we're going to use this when
42:10 - we're at checkout and we're trying to
42:11 - charge the user and then three just get
42:14 - information about one specific course we
42:16 - want all of all three of those different
42:18 - routes we're going to use all of those
42:19 - now you can see here that to make
42:21 - something that's callable on the server
42:23 - you use
42:24 - anvil.server.call as a decorator above a
42:27 - function so this is an example right
42:28 - here let me uncomment this
42:30 - you can see that this is actually
42:32 - callable sorry from the front end
42:34 - because we have
42:35 - anvil.server.callable which means we can
42:37 - use kind of this
42:38 - specific function which is
42:40 - anvil.server.call
42:42 - to actually call this and get the data
42:43 - from it securely so i'm going to change
42:45 - the name of this to say get underscore
42:48 - course underscore details
42:51 - like that and then inside of here i'm
42:53 - going to say return and i'm going to say
42:56 - app tables which is going to reference
42:58 - my database tables then this is going to
43:00 - be dot courses and then this will be i
43:03 - got to look at my other thing here dot
43:05 - client readable now what this allows you
43:07 - to do is actually return a readable view
43:11 - to the front end of your website so it
43:13 - can read all of the information about
43:14 - the courses but it cannot change it so
43:17 - whenever you want to get all the info
43:18 - you just return client readable this
43:20 - means that again the client can read
43:22 - this information they can't change it
43:24 - they can't modify it that's what you
43:25 - want however if you were to return
43:27 - something like client writable i mean
43:29 - you can read what this says but return a
43:31 - view on this table that can be written
43:33 - by client code use keyword arguments to
43:35 - specify view restrictions this does not
43:37 - give client right access to other tables
43:39 - referred to by this table so i mean you
43:41 - can read what that says it's pretty
43:42 - straightforward but the point is that
43:44 - whenever you have information that you
43:45 - don't want the client to be able to
43:47 - change then you return readable if it
43:49 - say something like the client's name or
43:51 - their email or something that they maybe
43:54 - could change that's fine for them to
43:55 - modify then you would return client
43:57 - writable and you could change how the
43:59 - view is writable by adding keyword
44:01 - arguments i'm not going to go through
44:02 - that but there is a ton of tutorials on
44:04 - the anvil website that show you how to
44:06 - do that and in fact i'll just mention
44:08 - now if you want to do something that i'm
44:09 - not showing you here anvil most likely
44:12 - has documentation and tutorials for it
44:14 - in fact if i go here you can see that
44:16 - there is a punch of tutorials oops i
44:19 - didn't mean to open that
44:20 - and if i go here i mean you can click on
44:22 - the different tutorials and then you can
44:23 - also just look up the documentation i
44:25 - think there's docs right here yeah if i
44:27 - click on that it brings you in here and
44:29 - it shows you pretty much everything you
44:30 - can do okay so let's go back we have
44:33 - this view that we want i'm just going to
44:34 - get rid of all this i'm going to show
44:36 - you now how we can call this and how we
44:38 - can kind of view the information that's
44:39 - being returned for it so we've done this
44:41 - on the server side
44:43 - what i'm going to do now is go to my
44:46 - my courses page and on the my courses
44:48 - page what i want to do in the init is i
44:51 - want to load all of my courses from the
44:53 - database so for now let's just write a
44:55 - method
44:57 - and let's call this define
44:59 - load underscore courses like that
45:02 - let's put a self inside of here and then
45:05 - what we're going to do is the following
45:06 - we're going to say courses
45:08 - is equal to anvil dot server
45:11 - dot call and then what you do is you put
45:13 - as a string the name of the method on
45:15 - the server you want to call so if i go
45:17 - to course details this is called get
45:19 - course details sorry we should remove
45:21 - name from here we don't want name as a
45:22 - parameter and then if i go here i just
45:24 - put that and what this does is call that
45:27 - function now let's say you had some
45:29 - parameters you wanted to pass all you
45:30 - would do is put a comma and then you
45:32 - would pass all the parameters so if
45:33 - there was a name there then i would say
45:35 - you know name of course whatever right
45:36 - and if there was a keyword argument i
45:38 - could do something like k
45:39 - like this is equal to 2.
45:41 - that would be fine it would pass that as
45:42 - a keyword argument to the function okay
45:45 - so now we have courses what i'm going to
45:46 - do is just print courses
45:49 - and show you what this looks like for
45:50 - right now so what we'll do is we'll load
45:52 - the courses so self.loadcourses
45:55 - like that right when we load the my
45:57 - courses page
45:58 - okay hopefully that makes sense
46:00 - hopefully you've got that code down
46:01 - let's run
46:03 - now
46:04 - let us sign in
46:06 - and let's go sign in with google
46:09 - okay let's click on my courses and then
46:11 - notice if i go to run app console we say
46:13 - we get a live object and
46:15 - build.tables.table
46:17 - now that is because this is a special
46:19 - object that anvil is returning to us
46:21 - representing the database table if i
46:22 - actually want to be able to view the
46:24 - information i need to use a method on
46:26 - this called dot search
46:29 - now it actually shows you what this does
46:30 - says get rows from this data table if
46:32 - you specify keyword arguments you will
46:33 - retrieve only rows whose columns match
46:35 - those values so let's add dot search
46:37 - here and now let's see what we get and
46:39 - if this is actually going to work for us
46:41 - we might need to it right over this
46:43 - and let's go to sign in
46:45 - let us sign in
46:47 - let's go to my courses and now notice
46:50 - we're getting the search iterator so an
46:52 - iterator is something that we can loop
46:53 - through in a for loop so what this means
46:55 - is that if i want to actually get the
46:57 - information from this iterator i need to
46:59 - iterate over it so let's go ahead and do
47:01 - that now i just realized here that i'm
47:03 - actually inside of the wrong courses
47:05 - module this is my fault for naming them
47:07 - so similarly but i'm going to copy this
47:08 - code so load courses and yeah i guess
47:12 - just load courses and i'm going to put
47:13 - this inside of courses rather than load
47:16 - courses or sorry my courses because my
47:18 - courses is going to be my courses
47:20 - whereas courses is going to be all the
47:22 - different courses you could purchase so
47:23 - we want to start with this one and then
47:25 - we'll go over to my courses after so i'm
47:27 - just going to copy this in here
47:28 - so now we have what we had before and
47:30 - i'm going to loop through this iterator
47:32 - now and let's just print out some
47:33 - information about the courses so i'm
47:35 - going to say for
47:36 - course in courses and what this should
47:39 - do is give me one row of the database so
47:42 - each row will be one course and then
47:44 - what i can do here is just start by
47:46 - printing something like the course and
47:49 - then the name and see if we get the
47:51 - different courses that we want so now
47:53 - let's run
47:55 - and we don't actually need to sign in to
47:56 - do this we can just click on my courses
47:58 - and notice we get javascript and we get
48:00 - python as the two names of our course so
48:03 - now that we've accessed this information
48:05 - we need some way to display it now all
48:07 - of our courses are going to be displayed
48:10 - in the same way right we're going to
48:11 - have an image we're going to have a
48:11 - description we're going to have a button
48:13 - that says the price and when you click
48:14 - on that it's going to bring you to
48:15 - another page so what i'm actually going
48:17 - to do is set up a new form here and this
48:20 - form is going to be an individual
48:21 - component that i'm going to use to
48:23 - represent a single course so i'm going
48:25 - to make a blank panel so what i'm going
48:27 - to start with here is a panel so i'm
48:30 - going to import my panel let's call this
48:33 - the content underscore panel okay let's
48:37 - add an image
48:39 - we will just call this the image
48:41 - like that
48:43 - let's import a label so we'll put a
48:45 - label inside of the panel i'm just going
48:47 - to add some text to it so we can see it
48:48 - so let's just call this
48:50 - description and then we'll say this is
48:53 - going to be a
48:54 - description like that now we want this
48:56 - description to be in the middle so i'm
48:57 - going to go to text i'm going to align
49:00 - center for the font size let's go with
49:02 - 20. that looks like a decent size to me
49:05 - and i don't think we need anything else
49:06 - for that and then we'll add a button so
49:09 - let's add a button right underneath here
49:11 - this button i'm going to call by
49:14 - now this is going to just be align
49:16 - center okay we'll make it bold we will
49:18 - make the font size 20 as well
49:21 - uh we will actually won't underline it
49:23 - but for the role i will go with primary
49:26 - color
49:27 - and then that should be good for now i
49:30 - think that's all i need so i have my
49:32 - uh what do you call it i have my button
49:33 - i have my label and for some reason i
49:36 - think my button's inside of my label so
49:38 - let me try to pull that out
49:40 - uh okay maybe not maybe the label is
49:42 - just overlapping the button okay you
49:44 - know what that's fine for now i think
49:45 - that's fine let's make sure they're
49:46 - named good we have by description and
49:49 - image perfect what i'm going to do now
49:51 - is i'm going to turn this component here
49:54 - into a custom component now see how it
49:56 - says use as custom component
49:58 - what this allows me to do is pass values
50:01 - to this when i create it so that i can
50:04 - actually fill in this what i'm going to
50:06 - call course item in a second with the
50:08 - information for a specific course so the
50:10 - idea is rather than me making like four
50:12 - or five of these for all the different
50:13 - courses that i'm going to have i'll have
50:15 - kind of one standard layout and all of
50:18 - my courses will be represented in this
50:20 - way so i'm going to say use this custom
50:22 - component i'm going to say make this
50:23 - form available as a custom component i'm
50:25 - going to add a property specifically i'm
50:27 - going to add three properties now these
50:29 - properties are what i want to pass to
50:31 - this component when i create it so the
50:33 - first property i'm going to call is the
50:35 - name this will be the name of the course
50:38 - the next one that i want is going to be
50:40 - the image and then i also want the buy
50:44 - button or we'll just call this the
50:45 - button underscore callback
50:47 - now the idea is i need to pass some
50:49 - function here that's going to be called
50:51 - when i press the buy button so we're
50:53 - going to have to set that up in a second
50:55 - but let's change this from a string to
50:58 - be a object the object will just be the
51:01 - function
51:02 - to call when buying course or when
51:07 - i go we'll go with clicking course
51:09 - button
51:10 - okay
51:11 - uh that's fine now for the image this is
51:14 - going to be a can i make this a media
51:17 - let's go with
51:19 - okay let's go with object i think i can
51:20 - pass an image as an object here that
51:22 - will be fine and then let's go with name
51:24 - name will be a string the default value
51:27 - will be nothing and then i also want
51:29 - description so let's make this
51:32 - the
51:33 - description like that and that will be a
51:35 - string as well now i just realized that
51:37 - i probably want a title or kind of like
51:40 - a name of this as well so let's add a
51:42 - label at the very top
51:44 - and let's call this the name
51:47 - now for the content i'll just make it
51:49 - name for now just so we can see it let's
51:51 - make sure this goes in the middle so
51:53 - let's go align center font size want
51:56 - this to be fairly large so let's make
51:57 - that 30 and then do i want to make it
52:00 - bold
52:01 - let's see if i can do that let's go to
52:02 - advanced and actually
52:05 - uh you know what i'm fine with the bold
52:07 - for right now i could do that if i want
52:08 - but
52:09 - we don't need to be bold okay so that is
52:11 - going to be our course item so let's
52:13 - rename this here
52:16 - to be a course item now notice that
52:18 - beside it we're getting this little icon
52:20 - which represents it's a custom component
52:23 - so i'm going to show you how we use this
52:24 - but this is going to make our life a lot
52:26 - easier so i'm going to go to courses now
52:28 - and i'm going to import this course item
52:29 - i'm going to say from dot dot
52:31 - course item import course item now just
52:34 - for kind of example purposes right now
52:36 - i'm just going to load one course item
52:39 - on the screen just so you can see how we
52:41 - do that so i'm going to say
52:43 - self dot content panel dot add component
52:46 - and this is going to be a course item
52:47 - now what i need to pass to this course
52:50 - item is going to be the name the
52:52 - description the image etc so for now
52:55 - let's just pass a name so let's go with
52:58 - name is equal to and we'll just call
53:00 - this
53:01 - python now i'm also realizing at this
53:04 - point we probably need a price as well
53:06 - for this course or actually more
53:08 - specifically something that we want to
53:10 - put on the button so i'm going to go
53:11 - back to course or course item for one
53:14 - second and i'm just going to make
53:16 - another property so i'm going to go
53:17 - configure custom component i'm going to
53:19 - add a property here and i'm going to
53:21 - call this the button text so just what
53:23 - do we want to be on our button okay so
53:25 - let's close that let's go back to
53:28 - courses and let's go here and say button
53:32 - underscore text will be equal to
53:35 - buy for
53:37 - 39.99 we'll put a dollar sign
53:40 - what else do we want uh we need the
53:42 - image i won't pass that for right now
53:43 - we'll go with name button text we'll go
53:46 - description equals
53:49 - the best course
53:51 - exclamation point and then the button
53:53 - callback i won't pass either i'll show
53:55 - you how we do that in a second so let's
53:57 - go to course details now and sorry not
53:59 - course details course item and let's go
54:02 - to the code and let me show you now how
54:04 - i kind of take all of these properties
54:06 - in and actually set the different
54:09 - elements that we have here equal to
54:11 - those properties so inside of my
54:13 - initialization here i'm going to take in
54:16 - a name i'm going to take in a
54:19 - description
54:20 - and i'm going to take in a button text
54:23 - and we'll take in a few other things as
54:25 - well but for now that's all we want
54:27 - then what i'm going to do is say
54:28 - self.name is equal to name and this is
54:30 - going to be named.text actually
54:33 - i'm going to say self.description.txt
54:36 - is equal to description and i'm going to
54:38 - say self dot and this will be by
54:41 - dot and then text is equal to button
54:44 - text
54:45 - and that's all we need for right now
54:47 - so now what's going to happen is if i go
54:49 - back to courses here when i add this
54:51 - course item and let's just make this a
54:53 - variable to make this easier let's say c
54:55 - is equal to that
54:56 - it will take the name the button text
54:59 - and the description and then update
55:00 - whatever i set as the default values
55:02 - here to be equal to those right so
55:04 - that's kind of the point so let's just
55:06 - try this out for now and see if this
55:07 - works
55:08 - and then we'll continue from there
55:10 - so let's go run
55:12 - let's go view courses and then notice we
55:14 - have name description and buy for 39.99
55:18 - looks like i messed something up it says
55:19 - course item has a method or attribute
55:22 - name and a component called name this
55:24 - method or attribute will be inaccessible
55:26 - okay that makes sense the reason why i'm
55:27 - getting this problem is because what i
55:29 - named the property is the same as what i
55:31 - named kind of the element so i need to
55:33 - rename the element so that it doesn't
55:35 - match with the property that i passed it
55:37 - i guess that's a decent error to run
55:38 - into so then you guys don't run into
55:40 - that yourselves so let's go to course
55:42 - item
55:43 - and let's change this i'm going to call
55:44 - this name
55:45 - underscore label
55:47 - okay just to make that a bit more clear
55:50 - okay name underscore label that's fine
55:52 - uh image uh we'll call this image
55:55 - underscore
55:56 - uh i don't know let's go go with content
55:59 - for description we'll go with
56:01 - description underscore label and then
56:04 - for by we can leave it at this but i'm
56:05 - just going to change this to button
56:07 - because i think that's better assuming
56:09 - we spell it correctly okay so now let's
56:11 - go back into the code here and let's
56:13 - change this this is going to be name
56:14 - underscore label this is gonna be
56:16 - description underscore label
56:18 - and this is gonna be button
56:20 - like that
56:21 - okay so let's try this now
56:23 - and let's see if this works
56:25 - okay let's go view courses and now
56:27 - notice again we're getting the same
56:29 - problem name description buy for 39.99
56:32 - looks like for some reason we're not
56:34 - updating that so let me take a look at
56:36 - why this is happening and i'll be right
56:37 - back all right so it looks like the
56:39 - problem that we're getting is that i was
56:40 - trying to use text for my labels when
56:43 - instead for the rich text i want to use
56:45 - content now notice i can actually click
56:47 - on these right here and it shows me all
56:48 - their properties so i have my name label
56:51 - and i need to use content rather than
56:53 - using text so i'm just going to change
56:55 - this to content
56:57 - like that
56:58 - and i'm going to change this to content
56:59 - as well
57:00 - and then this should be good
57:02 - okay so let's run this
57:04 - and let's see what we get view courses
57:07 - notice we have python the best course
57:09 - and then 39.99
57:11 - awesome that's exactly what i wanted
57:13 - now we will continue and hopefully make
57:15 - all of this a bit nicer so i'm going to
57:17 - go into the design of my course item
57:19 - here and for my content panel i'm just
57:23 - going to go to roll i'm going to change
57:25 - this to a card now notice how it kind of
57:26 - raises it up a bit and adds a bit of a
57:28 - border that's going to look a bit nicer
57:30 - so we'll go with that for right now and
57:32 - then let's go back to our courses
57:36 - let's go to design and let's just get
57:38 - rid of this label here because i no
57:39 - longer want that inside of here okay
57:42 - perfect so now courses let's go to code
57:44 - and let's use this
57:46 - inside of here to actually render our
57:49 - different course items so let me go here
57:52 - let me just copy this and let me get rid
57:54 - of this
57:56 - and let's do the following we're going
57:57 - to say c is equal to course item it's
58:00 - going to be name and instead of name
58:01 - equal to python this is going to be
58:03 - course
58:04 - like that
58:05 - and then name and the button text is
58:07 - going to be equal to we're going to use
58:09 - an f string and we're going to say that
58:12 - this will be
58:14 - purchase 4 and then we'll have a dollar
58:18 - sign and then we want the price of the
58:20 - course this is going to be course and
58:22 - then at price then for the description
58:24 - this is going to be course description
58:28 - like that
58:30 - and then we need to add an image so
58:32 - we're going to say
58:33 - image
58:34 - is equal to and this will be course at
58:37 - image and then the other thing that we
58:39 - want is we want the button callback
58:42 - as well as do we want do we have
58:44 - something else i forget if we have
58:46 - something else that we need to pass
58:47 - there let me just close this so we have
58:48 - a bit more room let's go back to course
58:50 - item let's have a look we have our
58:51 - button we have a description we have our
58:52 - image we have our name nope that looks
58:54 - like that's all we need
58:55 - so that should be good and then we have
58:58 - our button
58:59 - underscore callback which for now i'm
59:02 - just going to make equal to none but we
59:04 - will fill this in with the function that
59:05 - we want to call when we press on that
59:07 - button in a minute okay so we have c now
59:09 - what i'm going to do is add this to the
59:11 - component or add this to the content
59:13 - panel sorry
59:14 - so self dot content panel
59:17 - dot add component
59:18 - i'm going to add c
59:20 - and that should be good all right so now
59:22 - that we've done that i just want to hop
59:23 - over to course item and i need to make
59:25 - it so that now we're going to add the
59:27 - image as well as something else that we
59:29 - passed that was new the button callback
59:30 - although we don't need to do that this
59:31 - second so i'm going to go here and i'm
59:33 - going to say self.image underscore
59:37 - content is equal to image and i'm going
59:40 - to now take in the image as well here so
59:42 - i'm going to say image and i'm going to
59:44 - take in the button underscore callback
59:47 - as well okay so we have name description
59:48 - button text image and button callback we
59:51 - now should be assigning all of those
59:52 - when we set the course items we're going
59:54 - to add all of the different courses that
59:56 - we have as course items and we're
59:57 - getting a syntax error here saying bad
59:59 - input i think that's to do with the
60:01 - indentation so let me see if i can fix
60:03 - that
60:03 - i think
60:05 - what's wrong here am i messing up a
60:07 - bracket ah so i see the problem here it
60:09 - is the fact that i have double quotation
60:11 - marks inside of double quotation marks
60:13 - so i just have to change the price here
60:14 - inside of my f-string to use single
60:16 - quotation marks and then we should be
60:18 - good to go okay so let me run this here
60:21 - and let's see if this is going to work
60:23 - for right now
60:25 - okay so it looks like we got an error we
60:26 - got bad input and if i scroll up here we
60:29 - can see that's on this line so let's
60:31 - click on that it's going to bring me
60:32 - here and it's saying that this is a
60:34 - problem all right so it looks like i
60:36 - forgot a comma classic rookie mistake so
60:39 - let's add that right here i also
60:41 - realized that i need to change this to
60:43 - say source so self.image content needs
60:45 - to have source after it okay apologize
60:48 - about the errors guys but that is just
60:49 - part of developing let us run the code
60:52 - and let's see if we're able to fix this
60:54 - and let's go to view courses
60:56 - and now notice we have javascript and we
60:58 - have python perfect the only problem is
61:01 - these are quite large and they're taking
61:03 - up one row each so instead of having
61:05 - them taking up one row or sorry yeah one
61:08 - row each i want them to just be on one
61:10 - single row so we have kind of javascript
61:12 - and then right beside it we have python
61:14 - so i'm going to show you how i can how
61:15 - we can do that how we can kind of align
61:17 - the two different uh
61:19 - elements here or the two different
61:20 - components so let's do that
61:22 - okay so we're going to go to courses
61:25 - and we have courses
61:27 - like this we're getting the course item
61:28 - we're adding this to the content panel
61:30 - what i'm going to do now is i'm going to
61:32 - create what's known as a grid panel and
61:34 - i'm going to add my courses into the
61:36 - grid panel and then render the grid
61:38 - panel in the main content panel so i'm
61:39 - going to say the following i'm going to
61:41 - say
61:42 - coarse and then underscore panel is
61:44 - equal to and this will just be grid
61:46 - panel you don't need to import anything
61:47 - you can just say grid panel like that
61:49 - now this allows me to pick the row and
61:51 - column that i want to insert an item at
61:54 - so now rather than self.content panel
61:56 - we'll just call this
61:58 - coursepanel like that so now after we
62:00 - pass the component that we want to
62:02 - render in the panel i need to choose
62:03 - what row and how long or how wide this
62:06 - component should be so i'm going to say
62:08 - row is equal to and right now i'll just
62:10 - go with 0 but i'm going to change that
62:12 - in one second i'm going to say call
62:13 - underscore xs equals 6. now what this is
62:16 - actually saying is when the screen is
62:19 - extremely small or larger than extremely
62:21 - small extra xs stands for extra small
62:24 - then i want this element here to take up
62:27 - six rows or sorry six columns of the 12
62:30 - possible columns in a row so a little
62:32 - bit confusing if you've never seen this
62:34 - before but in a grid we have 12 columns
62:37 - now we can have a component taking up
62:39 - any number of those 12 columns so i want
62:42 - this to take up six of the 12 columns
62:44 - which means we can have two components
62:46 - in each row so i'm going to place two
62:48 - components on each row each of them is
62:50 - going to take up half of the row which
62:52 - means that if i have more than two
62:53 - components they can't all be on row zero
62:56 - so the first two will be on row zero the
62:57 - next will be row one the next will be
62:59 - row two etc etc so the way i need to fix
63:02 - this is i need to say 4i comma course in
63:05 - and then this is going to be enumerate
63:07 - and this will be courses so this way we
63:09 - can get access to the index as well and
63:11 - i'm going to say that this is going to
63:13 - be the string of and this will be i
63:16 - divided by 2 or i mod 2. now i think
63:19 - that's correct let me just look at my
63:20 - cheat sheet over here that looks good to
63:22 - me so the idea here is as soon as we get
63:24 - to the second item or the second index
63:27 - that will be the third item which means
63:29 - that that will then move on to row
63:31 - number one because two integer divided
63:33 - by two is one whereas when we have the
63:36 - first item which is index zero and the
63:37 - second item which is index one then
63:39 - we're gonna be on row zero so this will
63:41 - just update based on the number of the
63:43 - item that we're on hopefully that makes
63:45 - sense but now that we have that we need
63:47 - to add the course panel to the content
63:48 - panel so i'm going to say self.content
63:51 - panel
63:52 - like this dot and then this will be add
63:54 - component and we'll add the course panel
63:57 - like that and i think that's pretty much
63:59 - all that we need so let me go to home or
64:02 - i actually don't need to go to home but
64:03 - i'm just going to run the page now and
64:05 - let's see if we're getting our layout a
64:06 - little bit nicer so let's go to view
64:08 - courses and now notice we have python
64:10 - and we have javascript it's a little bit
64:12 - messed up so let me take a look at
64:14 - what's going wrong here but we should be
64:16 - able to fix this fairly easily so i've
64:17 - made a little bit of a mistake here i've
64:19 - said call underscore xs when instead i
64:21 - wanted to say width xs what i was
64:24 - explaining before was the width i just
64:25 - had call there instead so we need to go
64:27 - with with underscore xs and this will
64:29 - then set the width of that item as you
64:31 - can see before we had kind of messed it
64:33 - up when i said call xs equals 6 what
64:35 - that meant is start in the sixth column
64:38 - and so that's why we were getting that
64:39 - problem okay let's try this now and
64:41 - let's see if this is good
64:43 - and let's go view courses and that is
64:46 - much better nice and we're getting a
64:47 - little bit of spacing between these two
64:48 - courses now what we need to do is we
64:50 - need to make it so when we click these
64:51 - buttons something is actually going to
64:53 - happen all right so let's get out of
64:55 - this here let's stop this application
64:57 - and let's now make a checkout page that
64:59 - allows us to buy a specific course so
65:01 - what i'm going to do is go to app i'm
65:04 - going to make a new form
65:06 - we know blank panel and we're going to
65:08 - call this checkup so let's rename this
65:11 - to checkout like that now let's just
65:13 - start designing what the checkout's
65:14 - going to look like and then after that
65:15 - we can make it dynamic so we can pass
65:17 - the price and all the stuff we did like
65:19 - with course item so let's start by
65:21 - adding two column panels here i actually
65:24 - want these column panels to be side by
65:25 - side so where's this i'm gonna go to the
65:28 - other side of it so notice they're
65:29 - taking up half the screen the first
65:31 - panel here i guess i can just leave it
65:32 - as column panel one that's fine
65:34 - this is going to display the information
65:36 - about the course that you're purchasing
65:38 - so we'll have the name the image the
65:39 - description
65:40 - then to the right side i'm going to have
65:42 - the price of the course you know it's a
65:44 - rating it's money back guarantee thing
65:46 - and then we'll have a buy button we'll
65:47 - also have a back button that allows you
65:49 - to go back to view the rest of the
65:50 - courses so inside of this first panel
65:53 - right here i just want to make this a
65:54 - card so i'm going to say card like that
65:57 - let's make this guy a card as well and
65:59 - now let's add a label and this label is
66:02 - going to be
66:04 - the name okay so we'll say name
66:06 - underscore label like we did before now
66:08 - for the content
66:09 - we can just put name right now
66:11 - that's fine we want to make this in the
66:14 - middle so let's go to layout
66:17 - let's go to text center
66:19 - font size
66:20 - maybe 24 is fine
66:22 - that's okay for right now
66:24 - then under there i want an image so
66:26 - let's go with image like that
66:28 - let us call this image underscore
66:30 - content and we won't have a source this
66:33 - second and then we will have more text
66:37 - this does not need to be rich text it
66:38 - can just be a regular label
66:40 - and we will call this self dot
66:43 - description underscore label for the
66:45 - text we'll just make this be
66:48 - description we'll align it in the center
66:51 - and for the font size one a bit smaller
66:53 - let's make it
66:55 - right here let's make maybe 14 just so
66:57 - it's a little bit easier to read okay so
66:59 - this will be information about the
67:00 - course then on this side it's going to
67:01 - be purchasing the course so let's add a
67:04 - rich text label here
67:06 - and let's call this actually i don't
67:09 - want to make this rich text let's just
67:10 - make this a regular text label
67:12 - so let's add regular text right here
67:14 - let's call this the price underscore
67:18 - label
67:19 - for the text let's go with buy or
67:22 - actually we can just put the price i
67:23 - guess we'll go with
67:25 - 49.99 just as some filler text let's
67:27 - make this bold let's make it nice and
67:29 - large make it size 45.
67:32 - let us make it in the middle as well
67:35 - and then do we want to underline it
67:38 - that's fine right now okay so 49.99
67:41 - under there i want to put the rating so
67:44 - i'm going to go with a
67:46 - actually we're going to go with a label
67:48 - and we're going to have to go with a
67:49 - bunch of labels because each one of
67:51 - these labels is just going to have an
67:52 - icon and this icon will be a star so i'm
67:55 - going to go to my icon here and i'm
67:58 - going to say star
67:59 - so we'll put a star like that
68:02 - and that should be fine but i want to
68:03 - make this star a bit bigger so i guess
68:05 - we'll have to go with font
68:08 - i'm curious if i make the font bigger
68:09 - okay it does make the star bigger so
68:11 - let's go with font maybe 30.
68:13 - okay now let's copy this label and let's
68:16 - paste it and let's put it on the same
68:19 - line as this and let's do this five
68:20 - times we're just going to say it has a
68:22 - five star rating to start so let's add
68:25 - that in oops want this over here
68:28 - okay
68:29 - and one more
68:32 - we'll go right there perfect so we now
68:34 - have our five stars
68:36 - i could try to make these a bit smaller
68:38 - nah you know what that looks fine to me
68:40 - let's add some more text
68:43 - this will go right underneath
68:45 - let's call this
68:47 - rating
68:48 - in lowercase
68:50 - and then for the text we'll say
68:52 - five like this five star
68:56 - rating exclamation point make that bold
68:59 - make that in the center make that a bit
69:00 - bigger let's go 24.
69:03 - i keep putting in the wrong thing let's
69:04 - go 24 okay nice and then underneath this
69:08 - i want to have a buy now button that is
69:10 - nice and large so let's go with a button
69:13 - let's go right here
69:15 - let's make this the secondary color so
69:17 - let's go to roll let's go secondary
69:20 - color we want this to say
69:23 - by
69:24 - in all capitals now exclamation point
69:27 - that will be bold and the font size will
69:29 - be 40.
69:31 - and ideally i would like to make these
69:32 - the same size so let's actually add a
69:35 - spacer in here
69:37 - the way that we can do that is we can
69:39 - take a spacer and just put it right in
69:41 - between and then we can make that a
69:42 - little bit smaller and then these should
69:44 - hopefully be the same size now i could
69:46 - also add some more text here i'm just
69:48 - keeping it simple doesn't look exactly
69:49 - like the demo but that's fine you guys
69:51 - can modify this if you want so now we
69:53 - have the buy now button i'm going to
69:54 - actually call this the buy button
69:57 - like that
69:58 - we have this right here oops how did i
70:01 - do that i didn't mean to drag that out
70:03 - okay let's put that back inside there
70:06 - okay go back in the card
70:08 - there we go uh this is called the price
70:10 - label this is our buy button this is the
70:12 - five star rating this is our description
70:14 - this is our image this our name and
70:17 - we're all good okay so the point of this
70:18 - checkout now is that we want this to be
70:20 - dynamic so this will work for any single
70:22 - product or course so i'm going to make
70:23 - this a custom component and make this
70:25 - form available as custom component add
70:28 - property we need the name of the course
70:30 - we need the
70:32 - we're going to go with price of the
70:34 - course
70:35 - we need this is going to be number
70:38 - other than price we're going to need the
70:39 - description
70:41 - and actually you know what i'm going to
70:42 - do this a little bit differently i'm
70:44 - going to get rid of all of these and i'm
70:46 - just going to take the id name of this
70:49 - and what i'm actually going to do is i'm
70:50 - going to call
70:52 - from the checkout my server to give me
70:55 - information about this specific course
70:56 - so rather than passing it all through
70:58 - all i need to do is just have the name
71:00 - of it i pass the name to the checkout
71:02 - and the checkout will get the
71:02 - information from the server that's going
71:04 - to be a better workflow for us so we'll
71:06 - do that in one second i do want to add a
71:07 - button here though and this button i
71:10 - want to allow us to go back to the view
71:12 - courses page so i'm just going to call
71:14 - this the back underscore button
71:16 - like that oops back button okay now what
71:20 - i want the text to be is just back okay
71:23 - now for a line yeah i'll make that
71:25 - center we'll make this the
71:27 - primary color and we'll add an icon as
71:30 - well that goes back so i think there
71:32 - should probably be a back
71:34 - actually let's just go arrow
71:36 - and then like that and that kind of
71:37 - represents that we're going to go back
71:39 - nice we'll add the binding for that in a
71:41 - second so when we click it it will do
71:42 - something for now let's go to code okay
71:44 - so i'm inside of here now what i want to
71:46 - do is i want to call the server and get
71:48 - information about a specific course that
71:50 - course is going to be the id name now
71:53 - the id name is just going to be the id
71:55 - name of the course that i want to get
71:56 - the information about but let me go to
71:58 - course details here and let's change
72:00 - this from get course details to get all
72:03 - courses
72:04 - and then let's make another function
72:06 - here let me just copy this
72:09 - and this will be called get and then
72:12 - course
72:14 - and then details like that okay so
72:16 - inside of here what i'm going to do is
72:18 - return information about one specific
72:20 - course not about all of them so instead
72:22 - of this i'm going to say dot get and
72:25 - this is going to be get and then course
72:28 - underscore name and i need to take in a
72:30 - course name here
72:32 - okay i think that's all i need actually
72:34 - i need to change this to say id
72:36 - underscore name just so that we know
72:38 - we're referencing the id name call so if
72:40 - you want to get one specific row from
72:42 - the database then what you do is you put
72:43 - the name of the column you want to query
72:45 - by which is id name and then the value
72:47 - you're querying with so in this case
72:48 - it's going to be the course name this
72:49 - will give me one row so i can then
72:51 - return that anyways i need to change a
72:53 - few things now because i rename this to
72:54 - get all courses so i'm going to go to
72:57 - uh where is it courses like this
73:01 - and i'm going to now change this call to
73:04 - say get all courses
73:07 - okay so that's good for that now that we
73:09 - have that i'm going to go to course item
73:11 - or not course item i'm going to go to
73:13 - where were we checkout all right so now
73:15 - i'm in the code for checkout so what i'm
73:17 - going to do is just take in the id name
73:19 - here which we need to pass to the
73:20 - checkout i'm going to make a method and
73:22 - i'm going to call this method update
73:25 - underscore form
73:26 - this will just take in self and id name
73:30 - and then what we'll do is we'll update
73:31 - the values in our checkout based on what
73:34 - we get for the information for the
73:35 - course so i'm going to say self
73:38 - dot update form i'm going to pass this
73:40 - the id name i'm now going to call my
73:42 - anvil server so i'm going to say course
73:45 - is equal to anvil dot server dot call
73:49 - we will call the get course details and
73:52 - then we'll pass the id name
73:54 - okay now we can update all of our fields
73:57 - so let's start with the name
73:58 - self.name.txt
74:00 - this is going to be name underscore
74:02 - label
74:03 - is equal to and then this will be course
74:06 - at
74:07 - and then name like that you can see my
74:09 - cat has decided to join me here
74:11 - next we're going to go with self dot and
74:14 - then this will be description label
74:16 - dot text is equal to course at
74:19 - and then description
74:21 - then we're going to have self dot price
74:23 - underscore label
74:24 - dot text is equal to and this will be an
74:27 - f string and inside of here we're going
74:29 - to put a dollar sign so let's do that
74:32 - and then this will be course at
74:34 - price
74:36 - and then usd
74:37 - okay and then what else do we have we
74:39 - have the image so self dot image content
74:41 - dot
74:42 - is equal to course
74:45 - at image okay so that should now update
74:47 - our checkout so that is all good the
74:49 - next thing that we need to do is we need
74:52 - to make it so that when we click the buy
74:54 - button it actually does something right
74:56 - it allows us to buy now we can't quite
74:58 - implement that yex we need to do the
74:59 - stripe checkout but i will add the
75:01 - method for that so let's go to buy now
75:05 - and let's go to click
75:07 - and now we have the by click method so
75:09 - when you click that it should actually
75:11 - bring up the stripe integration thing
75:14 - and allow you sorry to uh to buy this
75:16 - okay
75:18 - next what i'm going to do is i'm going
75:20 - to implement the back button so we're
75:22 - actually going to need to pass here is
75:24 - something to the checkout
75:26 - that allows us to go back
75:28 - seems a little bit weird but we need
75:30 - something that's going to kind of delete
75:31 - this checkout component and go back to
75:33 - where we were so what i need to also
75:35 - take here is back so we're just going to
75:37 - say back underscore button underscore
75:40 - callback which means when you press on
75:42 - the back button what do we do well we're
75:43 - just going to call this function so
75:45 - let's go to design
75:47 - let's click on our back button
75:49 - and let's go to click
75:50 - and then what we're going to do is pass
75:52 - a function to here which will be called
75:54 - back button callback and i will say
75:57 - self dot back underscore button
76:01 - underscore callback like that that's all
76:02 - we'll do inside of here we'll just call
76:03 - whatever was passed now i need to add my
76:06 - comma again because i keep forgetting
76:07 - that
76:08 - and now we are good with the checkup now
76:10 - we can't quite show the checkout because
76:12 - we need to actually pass the correct
76:14 - information to it so let's go to our
76:18 - course
76:19 - item
76:20 - would it be course item
76:22 - i don't know if it's going to be course
76:23 - item i actually think it's going to be
76:24 - in courses and notice how in courses
76:27 - what we actually need to do when we
76:28 - create a course item is we need to pass
76:30 - a button callback now the button
76:33 - callback is what happens when you press
76:34 - on this button right here so we need to
76:37 - now pass a function to course item that
76:40 - we can press or we can call when we
76:43 - click on that button so i'm going to go
76:44 - to design here i'm going to go to button
76:46 - one
76:47 - and i'm going to make a click so i'm
76:49 - going to go here and i'm just going to
76:51 - say self dot and then this is going to
76:53 - be button callback and we're just going
76:55 - to call that that's it and remember here
76:57 - we're taking button callback
76:59 - okay so let's go to courses
77:01 - and now let's create that function that
77:03 - we want to pass alongside every single
77:06 - course item that brings us to the
77:07 - checkout so i'm going to say define and
77:10 - i'm going to say
77:11 - let's go render underscore checkout
77:14 - now this is going to be self and this
77:17 - will take in our course underscore
77:20 - name
77:21 - okay
77:22 - now what we will do here is we will
77:24 - simply say self
77:26 - dot content panel dot clear
77:29 - and then self dot content panel dot and
77:32 - then this is gonna be add component
77:34 - and the component that we're gonna add
77:36 - is actually the checkout and we're going
77:38 - to pass to the checkout the course name
77:41 - so we're gonna say course name we also
77:42 - need to pass the function that we want
77:44 - to call when we go back which means that
77:47 - i need to make a back function i
77:48 - understand this is confusing i'm going
77:49 - to stop in a second and go through all
77:51 - of it but let's just code out some stuff
77:52 - right now so i'm going to say define
77:54 - back
77:54 - self and this is just going to say
77:56 - self.content panel dot clear and then
77:59 - self dot and then load courses like that
78:02 - okay
78:03 - now here i'm going to pass self dot back
78:07 - like that
78:08 - lastly i need to import my checkout so
78:11 - i'm going to say
78:12 - from
78:14 - dot dot checkout import check
78:17 - okay so let's just take a quick pause
78:19 - and then we'll continue what we've done
78:21 - is we've made this back button now what
78:22 - this back sorry function does is it's
78:25 - going to clear the content panel and
78:26 - then just reload the courses the point
78:28 - of this is that from this component from
78:30 - the courses component
78:31 - we are actually going to be showing the
78:32 - checkup so just like the base page is
78:34 - showing the home page the home page
78:36 - shows us the courses page and the
78:38 - courses page now shows us the different
78:40 - individual courses when we click an
78:41 - individual course it's going to load the
78:43 - checkout
78:44 - from this component and then if we want
78:46 - to unload the checkout so go back to the
78:48 - courses page we need to get rid of that
78:50 - from the screen
78:51 - so we clear that from the content panel
78:53 - and then we reload the courses on the
78:55 - screen great now what the render
78:57 - checkout method or function whatever you
78:59 - want to call it is going to do is it's
79:01 - going to be passed to our individual
79:03 - course items as the button callback so
79:06 - when we pass this function there and
79:07 - then we press the button to purchase the
79:09 - course it's going to clear the content
79:11 - panel and then render the checkout for
79:14 - that specific course that's why we
79:15 - created the checkout right so we'll pass
79:17 - the course name and we'll pass what we
79:19 - need to do if we click the back button
79:20 - which is call this function right here
79:23 - and then we'll be all good okay so
79:24 - hopefully that makes a tiny bit of sense
79:27 - what i want to do now is actually
79:28 - implement the button callback for my
79:30 - course item so what i'm going to do is
79:32 - go here and i'm going to say
79:34 - button
79:35 - underscore callback is equal to and then
79:38 - this is going to be self dot and then
79:41 - this will be render check it now i'm not
79:43 - going to call render checkout i'm just
79:45 - going to pass the render checkout object
79:47 - which is a function so that i can then
79:48 - call that function from inside of my
79:51 - course item so let's go to course item
79:53 - now and what i want to do is for my
79:55 - button click i want to say
79:56 - self.buttoncallback
79:58 - and then i want to actually pass to the
80:01 - buttoncallback the name of the course
80:03 - that i want to render the checkout for
80:05 - so i'm going to say self dot and then
80:07 - i'm actually just going to use the
80:10 - let's go with name underscore label and
80:12 - then this is going to be dot lower now
80:14 - actually sorry dot text and then dot
80:16 - load so the idea is that i'm storing the
80:19 - name inside of my name label so i'll
80:22 - just grab whatever that name is and i'm
80:24 - going to convert it to dot lower the
80:26 - reason i'm making a dot lower is because
80:28 - from my checkout i use the id name right
80:31 - i don't use the um
80:33 - what do you call the actual display name
80:35 - and so i'm just going to use the id name
80:36 - to get access to the course because i
80:38 - know that is in all lower cases okay
80:41 - hopefully that makes a tiny bit of sense
80:42 - let's run this and i'll do a quick recap
80:44 - of what we've done so far so i'm going
80:46 - to run
80:47 - we're going to go view courses we're
80:48 - going to click purchase and we get an
80:50 - error it says rich text object has no
80:52 - attribute text my bad we've made this
80:54 - mistake before i just need to change
80:56 - text to content so let's go back to
80:58 - course item and notice we're using text
81:02 - we're just going to use content like
81:04 - that
81:05 - now let's run
81:06 - and let's see what we get
81:08 - okay so let's click view courses let's
81:10 - go purchase and none type object is not
81:12 - callable okay we're getting an error
81:14 - here i guess that is from
81:17 - self.buttoncallback so it's saying
81:18 - buttoncallback is equal to none i'm not
81:21 - sure why we're getting that okay i'm
81:23 - sure now the reason why we're getting
81:25 - that is because i'm not storing the
81:26 - button callback so i need to say self
81:29 - dot button callback
81:31 - is equal to button callback so that from
81:33 - inside of here when i try to access it i
81:35 - still have it
81:36 - okay hopefully that makes sense i just
81:38 - because we weren't storing that we're
81:39 - only passing it as a parameter now what
81:42 - i'm going to do is press run
81:44 - and let's try this again
81:46 - okay let's go to view courses let's
81:48 - click purchase
81:49 - notice it brings me to the checkout so
81:51 - it's 37.99 for javascript now the back
81:54 - button callback is not working for some
81:56 - reason so let's go and fix that inside
81:59 - of check it
82:01 - okay
82:02 - so inside of checkout we have where are
82:05 - we we are calling the back button
82:07 - callback
82:08 - it looks like the back button callback
82:10 - we are never storing
82:12 - so i'm going to say
82:14 - self dot back button and then this is
82:17 - going to be call back okay back button
82:21 - callback is equal to back button
82:24 - callback but i also am not sure if we're
82:27 - actually passing back button callback to
82:30 - the checkout so let's try this where are
82:33 - we let's go to courses
82:34 - uh wait courses where's courses right
82:37 - here okay now inside of our render
82:39 - checkout we're saying self.back okay
82:41 - that is what we want so let's now run
82:44 - this and let's see if this works when we
82:45 - go back
82:46 - okay so let's go view courses let's try
82:48 - to view the python course okay let's go
82:50 - back and checkout object has no
82:52 - attribute back button callback okay i
82:54 - thought i fixed that problem but let's
82:57 - try this again and see what we're
82:59 - getting okay so we have self
83:02 - dot
83:03 - back button i spelt it incorrectly of
83:06 - course that's the mistake okay let's run
83:08 - it again and let's hope it's going to
83:10 - work this time
83:11 - the app has changed since you ran it
83:13 - click here to restart okay let's restart
83:15 - that's fine
83:17 - okay view courses
83:19 - go here go back it brings us back
83:21 - perfect so this is all working now we
83:23 - need to do is set up the buying and the
83:26 - ability to view our different courses
83:28 - once we are signed it we're in the home
83:29 - stretch here if you've made it this far
83:31 - let's keep going we are almost done all
83:34 - right so we're back in the code we're
83:35 - going to continue now and we're going to
83:36 - make it so we charge the user when they
83:38 - click on the buy now button using stripe
83:41 - first thing we need to do before we do
83:42 - this is integrate with stripe so i'm
83:44 - going to click on the add button here
83:46 - i'm going to click on stripe and it's
83:48 - going to open up this page right here
83:50 - all right so what you can do from this
83:52 - page once you've added stripe is you can
83:53 - connect a stripe account now you don't
83:55 - need to do this and i'm not going to do
83:57 - this and when you don't do that it just
83:59 - by default will run this in test mode
84:00 - which means you're not actually going to
84:02 - charge anybody it's just giving you the
84:04 - dialogues and simulating you charging
84:06 - people but it won't actually charge any
84:07 - money if you do want to charge you need
84:09 - to connect a stripe account there's not
84:11 - really anything different that you need
84:12 - to do you just have to do a bunch of
84:13 - stuff through the stripe website and
84:15 - then connect the stripe account i won't
84:17 - explain that it's pretty intuitive for
84:19 - now let's continue
84:20 - okay so we're at the checkout and when
84:22 - we click the buy button we need to make
84:24 - sure we're signed in before we allow the
84:26 - user to buy because if they buy
84:27 - something and they're not signed in we
84:28 - have no way to associate this product
84:30 - with their account so what i'm going to
84:32 - do is i'm going to check if we have a
84:34 - user signed in so i'm going to say if
84:36 - and then anvil dot
84:38 - users dot get user equals equals none
84:42 - then what i need to do is ask them to
84:43 - log in so i'm going to say anvil
84:46 - dot users dot and then log in with form
84:49 - i believe that's what we had then what
84:51 - i'm going to do down here is check again
84:52 - if they're logged in because they could
84:54 - potentially not log in from this form so
84:56 - i'm going to say if
84:58 - and then it will go with anvil dot
85:00 - users.get underscore user
85:03 - equals equals none then i want to pop up
85:06 - a dialog window telling them that they
85:08 - need to sign in
85:10 - and to try again so i'm just going to
85:11 - say
85:12 - i guess do we want confirm i think i
85:15 - have something for info one second let
85:16 - me let me do this okay we actually we
85:18 - have an alert that we can use and we can
85:20 - use the alert that says please sign in
85:24 - exclamation point and then we can just
85:26 - return from here so pretty much by the
85:28 - time we get past this return statement
85:30 - we know that we have a user signed in so
85:32 - now that we know that we have a user
85:34 - signed in we want to bring up the stripe
85:36 - dialog that asks them to input their
85:38 - payment information and then allow them
85:39 - to pay so i'm just going to say that
85:41 - user
85:43 - is equal to anvil and then this will be
85:46 - users like this
85:48 - dot get user and in fact we can actually
85:51 - do this right above this if statement
85:54 - and then we can put user instead of
85:56 - anvil.getuser again so then down here
85:59 - i'm going to first check before i
86:01 - actually let them pay if they already
86:03 - own the course so remember on our user
86:05 - table where would that be right here we
86:08 - have this new field that i added called
86:11 - columnate i want to call this
86:13 - purchased underscore courses good job we
86:15 - check that so make this called purchase
86:17 - course purchase courses sorry and then
86:20 - this is a simple object that's going to
86:21 - have a list inside of it the point of
86:23 - this is it's going to store the names of
86:25 - courses that we have access to
86:27 - so in this case in checkout i'm going to
86:30 - check if the user already owns this
86:31 - specific course so i'm going to just go
86:34 - up here and i'm going to say
86:37 - self dot course underscore name is equal
86:40 - to id name just so that i have that
86:42 - access in an attribute and i can then
86:44 - use that down here and i'm going to say
86:46 - if
86:47 - user and then this is going to be
86:50 - purchased
86:51 - underscore courses so i'm just checking
86:53 - to make sure they have this attribute
86:55 - and we're going to say
86:58 - self dot and then it's going to be
87:00 - course name
87:01 - is in
87:03 - user and then
87:05 - purchased
87:07 - underscore courses
87:09 - then what i want to do is i want to
87:11 - alert them that they already own this
87:12 - course so i'm going to say alert
87:16 - and if we could spell alert correctly
87:18 - that would be great and then you
87:21 - already own
87:24 - this course exclamation point and then
87:26 - again we will return so this is another
87:27 - check to make sure that uh what do you
87:30 - call it here that the user doesn't
87:32 - already own the course before they
87:34 - purchase it all right so now that we've
87:35 - got through this we've checked that the
87:36 - user does not already own the course and
87:38 - they are signed in we're going to import
87:40 - stripe it's just going to say import
87:41 - stripe like this again you need to add
87:43 - stripe for this to work and then we're
87:45 - going to charge the user using stripe so
87:47 - we're going to say token comma info is
87:50 - equal to and this is going to be stripe
87:52 - dot and i got a check not strike but
87:54 - stripe dot and i believe this is just
87:56 - check out and this is going to be dot
87:58 - get underscore token the amount is going
88:00 - to be equal to the self dot and then
88:03 - course at price and what i'm going to do
88:06 - is i'm just going to go here and notice
88:08 - how it says course here i'm just going
88:10 - to say
88:11 - self.course is equal to course so now we
88:14 - have access to all of the course
88:15 - information from this course variable
88:17 - which actually means i don't need to put
88:19 - the course name here i can instead
88:22 - when we check for the course name i can
88:23 - say self dot
88:25 - course and then just id underscore name
88:28 - like that that's going to be a lot
88:30 - better anyways point is we now say
88:32 - self.course price that is going to be
88:34 - how much we want to charge them then
88:36 - after this there's a few other things
88:38 - need to pass we need to pass the
88:39 - currency which is going to be in usd we
88:43 - then want to pass the title which is
88:45 - going to be equal to the course title so
88:46 - i'm just going to say
88:48 - course like that and then this will be
88:52 - the name so we can go like that then
88:55 - we're gonna get the description so i'm
88:57 - going to say
88:59 - uh the description is equal to and then
89:02 - this will be course at and then
89:05 - description
89:06 - if i can get this inside of the correct
89:08 - square brackets so let's
89:11 - do that this also needs to be
89:12 - self.course
89:14 - and let me close this so we have a bit
89:15 - more room
89:17 - okay come on close that nice so we have
89:19 - tokeninfo equals
89:20 - stripe.checkout.gettoken
89:21 - amount self.course price currency usd
89:24 - title course name description is sorry
89:26 - this needs to be self.course as well
89:29 - description is going to be self.course
89:30 - and then description and that's actually
89:32 - all we need for right now now what this
89:34 - is actually going to do is it's going to
89:36 - pop up a checkout window that's going to
89:38 - collect all the payment information from
89:40 - the user then it's going to store that
89:42 - payment information using something
89:43 - called a token the token is just kind of
89:45 - a unique
89:46 - string essentially that we can pass to
89:48 - the back end of our server and then the
89:50 - server will actually charge the user the
89:52 - reason why we need this is because it's
89:54 - not safe to charge the user from the
89:56 - front end we can collect their
89:58 - information and then we need to pass
90:00 - that information to the back end where
90:01 - they then will be charged so what we're
90:03 - going to do after this is we're going to
90:04 - say anvil dot server
90:07 - dot call and then this is going to be
90:09 - charge underscore user and what we're
90:11 - going to pass is the token as well as
90:14 - the email of the user and the name of
90:16 - the course that we're charging them for
90:18 - so we're going to say user and then this
90:20 - will be at
90:22 - email like that
90:24 - and then after this we will simply pass
90:27 - the self dot
90:29 - course and then the name like that
90:31 - okay now we haven't yet set up charge
90:33 - user we're going to do that in a minute
90:35 - what we want to do here though is after
90:37 - we try to charge the user we need to
90:38 - alert them that this was successful or
90:41 - this was not successful so we're going
90:42 - to say alert
90:43 - success but we're going to put this in a
90:45 - try catch because if this is not
90:47 - successful we need to tell them that
90:49 - something went wrong so we're going to
90:50 - say accept and we're going to say alert
90:52 - like this
90:54 - and then something
90:57 - went wrong
90:58 - exclamation point
91:00 - okay so that should be good for now
91:02 - that's mostly our front end done
91:04 - what we need to do now is set up the
91:06 - charge user api or
91:09 - root or backend or whatever you want to
91:11 - call it in the back end in the server so
91:13 - that we can actually call this so we're
91:14 - going to go now to our app we're going
91:16 - to make a new server module
91:18 - and we will call this
91:20 - rename let's go with
91:23 - purchase maybe it doesn't really matter
91:24 - what we call it but let's name it
91:25 - something that makes sense
91:27 - can delete all this
91:28 - we can comment out this and then we need
91:30 - to call this charge user
91:32 - charge underscore user now let's
91:34 - remember what we were taking that would
91:36 - be from checkout we want the token we
91:38 - want the email and want the course name
91:40 - so we're going to say token
91:43 - email
91:45 - and then course underscore name all
91:47 - right so from here we're actually going
91:48 - to charge the user now the way we need
91:50 - to do that is we have to create a stripe
91:52 - customer the striped customer will store
91:53 - the payment information of the user
91:55 - which it will get from the token and
91:58 - then we can use the stripe customer to
92:00 - charge the user's credit card so we're
92:01 - going to say stripe underscore
92:04 - customer is equal to anvil dot stripe
92:08 - dot new customer and this is going to
92:10 - take in the email
92:12 - and the token
92:14 - okay now make sure you have this
92:16 - imported here anvil.stripe otherwise
92:18 - that won't work
92:19 - okay now that we have that we are going
92:21 - to actually get the price of the course
92:24 - we want to get the price of the course
92:25 - from the back end to make sure the user
92:27 - didn't manipulate the price when they
92:28 - sent the request to this url so what
92:31 - we're going to do is go to course
92:32 - details and i'm just going to make a
92:34 - route here that's going to allow us to
92:36 - actually get the course price and we
92:38 - could actually you know what now that
92:39 - i'm thinking of it let's just do it from
92:41 - purchase because it's going to be very
92:43 - easy to do this i'm going to say the
92:45 - price is equal to and this is going to
92:46 - be app tables and then this will be dot
92:50 - courses and then dot and i believe we
92:53 - use dot get
92:54 - and we can get now by the id underscore
92:57 - name equal to the course name because
92:59 - the course name will be all lower cases
93:02 - then we want the price so we'll just put
93:04 - price like this and it should give us
93:05 - the price now we're going to say result
93:08 - is equal to and this is going to be
93:10 - stripe customer dot and then i believe
93:13 - we use charge now inside of charge we're
93:15 - going to pass the amount which is equal
93:17 - to the price
93:18 - and the currency which is equal to usd
93:22 - okay now we want to just print to the
93:24 - result so let's print results like that
93:27 - and we'll see if this was successful or
93:29 - not
93:30 - okay now we do need to after we do this
93:32 - give the user access to the course but
93:35 - i'm going to do that in a second i just
93:36 - want to see what the result is first and
93:37 - then we can show how we actually give
93:39 - the user access to a specific course so
93:42 - let's run this and see what we get
93:44 - okay running running running view
93:46 - courses
93:47 - let me go here purchase all right let's
93:50 - click buy now notice i need to sign in
93:52 - so it gives this to me i'm going to sign
93:53 - in
93:55 - all right
93:56 - looks like that didn't work okay let me
93:58 - sign in with google that time it worked
94:00 - nice now it brings up this javascript
94:02 - learn javascript and become a pro i'm
94:04 - going to enter my payment information
94:06 - click pay and we'll see if it works okay
94:08 - so there we go by the way if you want to
94:10 - enter payment information you can just
94:11 - enter this and it should work for you
94:13 - what i have here and obviously whatever
94:14 - email you want
94:16 - i'm going to click on pay we get the
94:18 - little check mark give it a second and
94:20 - then we get something went wrong okay so
94:22 - something went wrong which means that we
94:24 - hit that accept block so let's now
94:26 - actually log that exception so we can
94:28 - see what's going wrong and then we can
94:30 - continue from there so let's go to
94:31 - checkout
94:32 - let's go to alert and let's go accept
94:36 - exception
94:37 - as e and this is going to be sorry
94:39 - capital e and this will be lowercase e
94:41 - and we'll go something went wrong and
94:42 - rather than something went wrong let's
94:44 - just put e here so we can actually see
94:47 - what this is equal to and in fact we
94:50 - might have to go string e otherwise we
94:52 - might get a problem okay so let's try
94:54 - this again and let's see what the
94:55 - exception actually is
94:58 - okay
94:58 - view courses go here
95:01 - buy now
95:02 - sign in with google
95:04 - okay for some reason i have to sign in
95:06 - twice we'll look at that bug in a second
95:08 - okay let's enter our stuff and i'll be
95:10 - right back
95:11 - okay so i'm going to hit pay
95:13 - let's see what we get now
95:16 - and
95:18 - none type object is not subscriptable
95:20 - key price
95:21 - okay so the problem is coming from our
95:23 - server i actually think i know what this
95:25 - is let's go to purchase
95:27 - and it's saying that we cannot get the
95:28 - key price from a none type object so app
95:31 - type apptables.courses.get
95:34 - and id name equal to course name is not
95:36 - giving us the correct price there's a
95:38 - few things that could be going wrong
95:39 - here let's go to checkout though and
95:41 - let's see we're saying self.course name
95:44 - the problem is i need to pass id name
95:46 - instead of just name so let's change
95:48 - that now so that we're actually getting
95:49 - the id name when we're trying to look up
95:51 - the course
95:52 - let's run this and let's see if this is
95:54 - going to work this time again we'll look
95:56 - at that double log in issue in a second
95:58 - so let's go to javascript let's go buy
96:00 - now
96:01 - let's sign in
96:03 - okay okay so that time it actually
96:05 - worked so i guess we were just having
96:06 - glitch previous times go tim gmail.com
96:09 - i'll enter the payment information and
96:10 - be right back okay let's try this pay
96:12 - our 37 cents let's check mark and
96:16 - fingers crossed
96:17 - what do we get this time amount must
96:19 - convert to at least 30 pence 0.38
96:21 - converts to approximately 0.28 amount to
96:24 - small request id
96:26 - um okay i'm not sure exactly why that is
96:30 - happening so let's have a look and see
96:32 - what's going wrong now okay so i've just
96:35 - fixed the problem here what i actually
96:36 - did is just multiply the price by a
96:38 - hundred for some reason when i showed
96:40 - the price uh here it was showing uh 37
96:43 - cents rather than the actual price which
96:44 - is 37.99 so i just multiplied the price
96:47 - by 100 here inside of the checkout when
96:49 - i'm doing the stripe checkout and then
96:52 - inside of my purchase on my server
96:53 - module i multiplied the price by 100 as
96:55 - well just to ensure that they were going
96:56 - to be the same so that seemed to have
96:58 - actually fixed the problem for me and
97:01 - make it so that this was working anyways
97:03 - let me run the code and show this to you
97:04 - again just multiply your prices by a
97:06 - hundred and you should be good to go so
97:08 - let's go view courses let's go
97:10 - javascript let's go buy now sign in
97:13 - okay looks like the sign in was working
97:15 - let's enter our information
97:17 - okay pay 37.99 let's hit that and let's
97:21 - see what we get now
97:23 - okay all right and we get success
97:26 - perfect that looks good
97:28 - okay so what i'm going to do now is i
97:30 - want to look actually at what our output
97:34 - was okay so our output was live object
97:35 - anvil dot stripe dot charge when i
97:38 - printed if we go to purchase the result
97:41 - right here
97:42 - now inside of result we can actually see
97:45 - if the payment was successful by
97:47 - accessing a specific key
97:49 - this key is actually going to be called
97:53 - success or is it success i actually
97:55 - believe it's called result and then if
97:57 - result is equal to success that means
97:59 - that this was successful if it's equal
98:01 - to unsuccessful well it was unsuccessful
98:03 - so what i want to do is i want to check
98:05 - to make sure
98:06 - that the result was successful and if it
98:08 - was successful then i'm going to give
98:09 - the user access to this course okay so
98:12 - i've actually been making a little bit
98:13 - of a mistake here i've been trying to do
98:15 - this from the back end from the server
98:16 - when i actually need to do this from the
98:18 - front end so i'll show you that in a
98:19 - second but for now what i'm actually
98:21 - going to do is i'm just going to check
98:23 - if the user already owns the course
98:25 - inside of the back end just to make sure
98:27 - i don't charge them if they do already
98:28 - own the course so i'm going to say user
98:30 - is equal to and then this is going to be
98:32 - anvil dot users dot get underscore user
98:35 - and i'm going to say first of all
98:38 - if and we'll go with user at
98:41 - purchased underscore courses is equal to
98:44 - none then we're going to set this we're
98:46 - going to say user at purchased courses
98:49 - so let's go like this
98:52 - is equal to an empty list so the point
98:54 - of this is that for some users they may
98:57 - not have had their purchase courses list
98:59 - initialized yet because the default
99:00 - value is just none so if for some reason
99:03 - the user doesn't have that initialize we
99:05 - need to initialize that because then the
99:07 - net next thing that we're going to do is
99:09 - we're going to say if and then this is
99:11 - going to be course name is in user app
99:14 - purchase courses so let's go like this
99:16 - purchase courses like that then what we
99:19 - want to do is we want to simply return
99:22 - so we want to stop we don't want to
99:23 - charge the user because if we charge
99:25 - them then that means that they would
99:26 - have been double charged for a course
99:28 - they already own so we just return
99:29 - directly from there we don't end up
99:31 - charging them however if they don't
99:32 - already own the course then we can
99:34 - charge them so we're going to charge
99:35 - them like that and then after we charge
99:37 - them we'll give them access to the
99:38 - course so we'll simply say user and then
99:41 - this is going to be at
99:43 - purchased underscore courses is going to
99:46 - be equal to and we'll go with user at
99:52 - purchased underscore courses
99:54 - plus and then we'll put a list here and
99:56 - inside of here we're going to put the
99:57 - name of the course so we're going to say
99:58 - course underscore name like that so then
100:01 - this will add that to their purchase
100:02 - courses and they will have access to the
100:04 - course okay so that should be good what
100:06 - i want to do is go back to courses back
100:09 - to checkout actually
100:11 - and i'm going to go here to info and i'm
100:14 - just going to print out info
100:16 - after i do all this
100:18 - and actually i'm going to print out info
100:20 - and then result because this will
100:22 - actually tell us if we're successful or
100:24 - not so let's go here and let's run this
100:26 - and let's see what we get
100:28 - okay so i'm going to go view courses and
100:31 - i'm going to go purchase and i'm going
100:32 - to click buy now sign in with google
100:36 - okay and let me enter my information and
100:39 - then i'll be right back okay so let me
100:40 - click pay and let's see what we get
100:44 - fingers crossed here that nothing's
100:46 - going to go wrong and we get success
100:49 - perfect and then if we look here we get
100:50 - a key error on result so i'll fix that
100:52 - in a second anyways point is we now
100:55 - should have for our user access to that
100:57 - course the way we can check that right
100:59 - now at least is we can go to data we can
101:01 - go to users
101:03 - we can scroll over and we can see that
101:04 - we now have javascript in the purchase
101:06 - courses so now if that's in our purchase
101:09 - courses we should give them access to it
101:10 - which is what we'll do but first let's
101:12 - go to checkout and let me just print
101:14 - info rather than info result
101:16 - because for some reason we were getting
101:17 - an error there so i'm going to run this
101:19 - one more time i just want to look at
101:20 - what info is giving us
101:22 - okay so let's go view courses
101:24 - let's go purchase let's go buy now
101:27 - sign in
101:28 - okay
101:29 - and let me enter the information and
101:31 - i'll be right back okay let's click pay
101:34 - and let us see what we get
101:37 - for info when we print it out
101:40 - let's see we just get the email okay so
101:42 - that's fine we don't even care about
101:43 - that i guess i was wrong to even be
101:45 - looking at the result variable
101:47 - everything is good okay so we've
101:48 - purchased that now that we've purchased
101:50 - that we should have access to that
101:51 - course as well and now what we want to
101:53 - do is make it so that once you're signed
101:55 - in you can actually access the different
101:57 - courses that you have so how are we
101:59 - going to do that well what i'm going to
102:01 - do here is i'm going to get rid of
102:02 - printing info and i'm going to go to my
102:06 - my courses page and this is where we're
102:08 - actually going to show all of the
102:09 - courses that we own so i'm going to go
102:12 - to courses and i'm going to copy this
102:15 - load courses function that we have
102:17 - because we're going to do a very similar
102:18 - thing here except we're only going to
102:20 - load the courses that we have access to
102:22 - so we're going to go to my courses
102:24 - i'm going to paste this in i'm going to
102:26 - say self.load underscore courses like
102:29 - that and then what i'm going to do is
102:31 - rather than get all courses i'm going to
102:32 - say get underscore my
102:35 - underscore courses like that now we'll
102:37 - do the exact same thing in terms of
102:38 - rendering these courses onto the page
102:40 - except this time we're just going to get
102:42 - my courses which means that here it's
102:44 - only going to give us courses that we
102:45 - have
102:46 - so i'm going to make a new server module
102:48 - here and i'm going to call this course
102:50 - oops that means do that
102:52 - we want to call it here
102:54 - course underscore unlocks and then this
102:56 - is where we're going to put that
102:58 - call or that function
103:00 - that is going to be get all my courses
103:03 - now for some reason i can't highlight
103:04 - this okay let's get rid of that
103:06 - let's comment this out and now let's go
103:09 - with get my courses
103:11 - get underscore my underscore courses
103:13 - like that and we don't even need to pass
103:15 - anything here because we can just get
103:17 - the current user from this function so
103:19 - i'm going to say user is equal to anvil
103:22 - dot user or dot users dot get user we'll
103:26 - say if
103:27 - user equals equals none then we'll just
103:29 - return an empty list because if you are
103:31 - not logged in you have access to no
103:33 - courses
103:34 - otherwise we want to loop through all
103:36 - the courses that they have get those
103:38 - from the database and then return those
103:40 - so we're going to say that courses is
103:42 - equal to this and then we're going to
103:43 - say
103:44 - for
103:45 - course in user and then this is going to
103:47 - be purchased underscore courses like
103:50 - that now one thing that i want to do too
103:52 - is i want to make sure that we have
103:54 - access to this because if for some
103:55 - reason we don't have access to this then
103:57 - this is going to cause an error so i'm
103:59 - just going to go up here and say
104:01 - if
104:02 - user
104:04 - purchased courses like this
104:07 - because again this attribute could not
104:08 - be initialized so i'm going to say
104:10 - actually if not user purchase courses
104:12 - then just return an empty list
104:15 - otherwise what i'm going to do is for
104:16 - course and user.purchase course i'm
104:18 - going to get the information of that
104:20 - course and then simply add that into
104:22 - this courses list so i'm going to say
104:25 - course underscore info is equal to and
104:27 - this is going to be app not files but
104:29 - app tables
104:30 - dot courses dot get this is going to be
104:34 - id underscore name equal to course
104:37 - because remember this is going to be a
104:38 - list of strings then i'm simply going to
104:41 - add course info to courses so i'm going
104:43 - to say courses
104:45 - dot append
104:46 - and then course info like that and then
104:49 - we will return
104:51 - courses like so okay so that's all i
104:53 - need for get my courses now what i want
104:56 - to do is i just want to loop through all
104:59 - of them inside of my courses and then
105:01 - create the items like i would before so
105:03 - actually i think this should probably be
105:04 - fine i can say for i comma course in
105:07 - enumerate courses this should give me
105:09 - access to each of my individual courses
105:11 - i should then be able to show them on
105:12 - the screen and be all good
105:14 - the only thing is rather than showing
105:16 - purchase for i want to instead show
105:19 - view content because now you own the
105:21 - course you don't need to purchase it
105:22 - anymore and for the button callback
105:25 - what i'm actually going to do
105:27 - is
105:28 - we're going to have to put something
105:29 - else because it's not going to be
105:30 - self.rendered checkout we'll say
105:32 - self.rendercourse and we're not going to
105:34 - actually make any content for these
105:35 - courses so for now what it will do is
105:37 - just bring us to an empty page
105:39 - but we will make a function called
105:40 - render course so i'm going to say define
105:43 - render underscore course
105:45 - self and then this is going to be course
105:47 - underscore name like that
105:49 - and then what this will do is say self
105:53 - dot content panel dot clear and that's
105:55 - all we'll do for right now so we
105:57 - actually would normally show the course
105:58 - but since we don't have a course to show
106:00 - because we don't have any content for it
106:02 - we'll just clear the screen that kind of
106:03 - indicates okay you know we were viewing
106:05 - the course
106:06 - all right so let's just try this out we
106:08 - might have a few problems because i
106:09 - haven't looked through everything
106:11 - yet but yeah let's see what we get so
106:13 - let's go and run this
106:16 - and let us see what we get with my
106:18 - courses okay so i'm going to sign in
106:21 - i'm going to sign in
106:22 - with my google i'm going to click on my
106:25 - courses
106:26 - and we get an issue what is the problem
106:28 - list object has no attribute search okay
106:31 - i can see why we're going to get that
106:32 - problem i need to remove the dot search
106:35 - here because what we're going to get
106:36 - instead is a list of all of the courses
106:38 - we already have we don't need to search
106:40 - through them
106:41 - because it's not giving us that client
106:43 - readable view it's just giving us the
106:44 - information from the courses so let's
106:46 - run this now
106:48 - and let's see
106:49 - what we get
106:51 - okay let's sign in
106:53 - let us sign in with google let's go to
106:56 - my courses and course item is not
106:58 - defined okay so we need to import course
107:00 - item so let's go ahead and do that we're
107:02 - going to say from dot dot course item
107:06 - import course item
107:07 - i don't think i'm going to have any more
107:08 - problems although you never know fingers
107:10 - crossed let's run the code let's go to
107:13 - sign in
107:14 - let's sign in with our user let's go to
107:17 - my courses and notice we have javascript
107:19 - and python because while we both we
107:21 - bought both of them now i'm going to
107:22 - remove this in a second if we click view
107:24 - content notice it just clears the screen
107:26 - because that's what we made it do
107:28 - awesome so if we go to view courses
107:30 - let's try to purchase a course now that
107:31 - we're signed in notice says you already
107:33 - own this course that is exactly what we
107:35 - would expect let's try with python and
107:37 - you already own this course okay we are
107:39 - pretty much done just going to fix and
107:41 - polish up a few things and then we're
107:43 - going to handle some different urls and
107:44 - i'm going to show you how to deploy this
107:46 - so let's go to my courses let's go to
107:49 - design let's delete that label because
107:51 - we don't want that anymore
107:53 - and then there was something else we're
107:54 - going to do yes we were going to
107:57 - handle the urls
107:59 - so what i want to show now is that if i
108:02 - go to publish what i can actually do is
108:04 - publish this application
108:06 - and this allows me to have a temporary
108:08 - link sunnylittlewatch.anvil
108:10 - that i can actually use to view my
108:12 - application now if you have the pro
108:14 - version of anvil or the business version
108:16 - or the individual plan in this case you
108:18 - can switch to a custom domain and that
108:20 - means you can actually get whatever
108:21 - domain you want here but since we're
108:23 - just using the free version it just
108:24 - gives us kind of a random domain that we
108:26 - can use anyways i'm going to go to this
108:28 - link you're going to see that it shows
108:30 - us the website this is now live if i go
108:32 - here you can see we're on this website
108:34 - right here the thing is though i can't
108:36 - do something like slash
108:38 - courses right if i do that i don't have
108:40 - a matched url but i want to be able to
108:42 - do that so i'm going to show you how we
108:44 - can handle those different pages in a
108:46 - second for now they'll let you see how
108:47 - this works in the deployed version
108:50 - okay so i'm going to go to sign in
108:52 - and let's sign in with google
108:55 - okay for some reason that didn't work
108:56 - let's try it again let's go to my
108:58 - courses notice it shows the courses
109:00 - because we've already bought them now
109:01 - let me sign out okay let's log out and
109:04 - let's sign in with a new account all
109:05 - right so i've just created an account
109:07 - confirmed the email you can see i'm tim
109:08 - at mailinator.com if i go to my courses
109:11 - i don't have any courses let's actually
109:12 - add some text that says we don't have
109:14 - any courses we'll do that in a second
109:15 - for now though let's go to view courses
109:17 - okay and let's try to purchase one so
109:19 - let's go here let's click on buy now
109:22 - okay let me go and fill in the details
109:24 - and then i'll be right back okay let's
109:26 - click pay and let's see
109:29 - what happens now
109:31 - okay
109:32 - looks like we're good awesome so we have
109:34 - purchased now we go back let's go my
109:36 - courses and notice we have access to
109:38 - javascript but we do not have access to
109:40 - python because obviously we have not
109:41 - bought that
109:42 - sweet so i just want to show you it
109:43 - works on the deployed version you can
109:45 - see this is the url that i'm on okay let
109:47 - me close that let's go back to the anvil
109:50 - editor and let's continue to work okay
109:52 - so i'm going to start by adding that
109:53 - label that says you currently don't have
109:55 - any courses so i'm just going to throw a
109:57 - label right on the my courses page and
109:59 - we're just going to call this let's go
110:01 - with
110:02 - no
110:03 - underscore
110:05 - courses underscore label and we'll say
110:07 - you
110:08 - do not own any courses or something like
110:10 - that okay you do
110:12 - do not own any courses
110:16 - sad face
110:17 - okay and let's make this a headline like
110:21 - that
110:22 - and then what i can do is go to text
110:25 - more let's make it bold let's align it
110:27 - center and we'll leave that there for
110:29 - now now what i'm going to do is i'm just
110:30 - going to make it did i spell this wrong
110:32 - no i think that's fine i'm just going to
110:34 - make it so that
110:35 - when we have any courses it doesn't show
110:38 - this label so to do that i'm going to go
110:39 - to code and then when i load the courses
110:42 - i'm going to say
110:43 - if the len
110:45 - of courses is greater than 0 then no
110:48 - courseslabel.visible
110:49 - [Music]
110:51 - is equal to false okay so if we have
110:53 - more than one course then we'll just
110:55 - make that invisible so we no longer see
110:56 - it okay let's try this now let's run our
110:59 - code
111:00 - let's sign into our account
111:03 - okay we're going to sign in with google
111:05 - and now when i go to my courses
111:08 - we get an error it says no courses label
111:10 - is not defined okay that is most likely
111:12 - because i forgot to put the self beside
111:14 - it so let me stop that let's go to code
111:17 - yep that would be why okay let's go to
111:18 - self
111:19 - let's try this now
111:21 - and
111:22 - let us go sign in
111:25 - sign in with google
111:27 - and my courses and notice it's not
111:29 - showing that label but if we don't have
111:31 - any courses it will show that label i'm
111:32 - not going to show that to you but that
111:34 - will happen
111:35 - okay great so that is all working now
111:37 - the last thing i want to show you is
111:39 - handling the different urls in your web
111:41 - browser so let's go to the base page and
111:43 - we'll do that from here all right so
111:45 - what i'm going to do is i'm actually
111:46 - going to create a new python module
111:48 - inside of this form so just to kind of
111:50 - clarify here all of these different
111:52 - things that we have our forms these are
111:53 - like the front end user interface right
111:55 - we have the design page and the code
111:57 - page but we can just write regular
111:58 - python code inside of a python module
112:01 - that kind of belongs to this form so see
112:03 - where base is i'm going to click on the
112:05 - three arrows i'm going to click add
112:07 - module it's going to add a module inside
112:09 - of here now what i'm going to do is just
112:11 - rename this to urls
112:13 - i'm going to make a dictionary inside of
112:15 - here that's going to reference what url
112:17 - points to what form okay so i'm going to
112:20 - say from dot dot and then this is going
112:22 - to be home
112:24 - import
112:25 - home
112:26 - and i'm going to say from dot dot and
112:28 - this is going to be courses
112:31 - import courses and then from dot dot my
112:34 - courses import my courses okay what i'm
112:37 - going to do now is say urls is equal to
112:39 - this is going to be a dictionary i'm
112:40 - going to say home corresponds to home
112:43 - notice i'm not calling it i'm just
112:44 - writing the name of it and then i'm
112:46 - going to say
112:47 - courses
112:48 - goes to courses
112:51 - and i'm going to say my hyphen courses
112:54 - goes to my courses like that okay
112:57 - perfect so now i have my urls the point
112:59 - of this is just to better organize my
113:01 - code so i'm not defining this right
113:02 - inside of the base form
113:04 - now from base i'm going to import urls
113:07 - so i'm just going to say from urls
113:08 - import
113:10 - urls now i think we're going to need one
113:12 - dot although we'll see if that works or
113:13 - not
113:14 - then what i'm going to do is in the init
113:17 - i'm going to handle the potential
113:18 - different urls that i'm currently at so
113:21 - i'm going to say define
113:23 - handle underscore urls
113:25 - and then what i want to do is say that
113:27 - the url
113:28 - is equal to and this is going to be get
113:31 - and url hash
113:33 - i'll discuss what this does in a second
113:35 - and then i want to look at sorry i need
113:37 - self here as well i want to look at what
113:39 - the hash is and then go to the specific
113:42 - page based on the url hash so first of
113:44 - all what url hash is going to do
113:46 - is it's going to get what comes after
113:48 - the pound sign in our url so we're not
113:50 - going to use the slash to the page
113:52 - navigation we're going to use the pound
113:53 - sign because it's a single page
113:54 - application but the point is that this
113:56 - will get what is after it i'm going to
113:58 - convert this to dot lower so even if you
114:00 - type it in capitals it still works i'm
114:02 - then going to say if the url is in urls
114:06 - like this then what i want to do is go
114:08 - to that page so i'm going to say content
114:10 - panel so self.content panel like this
114:13 - dot clear
114:15 - and then i'm going to say self.content
114:17 - panel
114:19 - dot add component and this component is
114:21 - going to be urls
114:23 - at url
114:25 - like that and then i'm going to call it
114:27 - now this might seem a bit weird if you
114:28 - haven't seen this before but if i go to
114:30 - urls i'm just writing the name of the
114:32 - class right and so if i access the
114:34 - specific url it gives me the class and
114:37 - then what i do is i simply initialize
114:39 - the class and add that as a component to
114:41 - the content panel now i'm looking here
114:44 - to see if anything else if there's
114:45 - anything else that i need to do here
114:47 - doesn't look like i do
114:49 - although what i'm going to do after this
114:50 - is just say else
114:53 - and then self dot go to home so the
114:55 - point is that if you put in a url that
114:58 - does not
114:59 - reference
115:01 - a url that we have access to so if it's
115:03 - not in the url's file we'll just go to
115:05 - the home page and the home page is just
115:06 - going to
115:08 - clear the content panel and then go to
115:10 - sorry where am i clear the content panel
115:12 - and go to home now that actually means
115:14 - that what i can do is rather than
115:15 - putting self.go to home here i can just
115:17 - say self.handle urls and if we don't
115:20 - have a url that's
115:21 - in the urls file then we will simply go
115:24 - to the home page hopefully that kind of
115:26 - makes sense what i'm going to do now is
115:27 - just publish the application because i
115:28 - can only really look at the urls from
115:30 - the publish app i'm going to go to this
115:32 - url here and now i'll show you how we
115:34 - actually go to a specific page so let's
115:37 - go to hashtag and then let us go to
115:42 - what do we want here let's try courses
115:46 - okay now notice when i do that it
115:48 - actually didn't bring me to where i was
115:50 - expecting to go let me try this again
115:52 - and we see that it did bring me the
115:54 - course okay so i just had to hit enter
115:56 - twice there i'm not sure exactly why
115:58 - let's try going to my courses though let
116:00 - me just copy this and hit enter and hit
116:03 - enter again
116:04 - and you can see that now we go to my
116:07 - courses and i am signed in
116:09 - perfect that is all good
116:12 - okay so with that said that's pretty
116:14 - much going to wrap up everything that i
116:15 - need to cover in this video again i will
116:18 - leave a link to clone this anvil project
116:21 - in the description in case you got lost
116:22 - or in case you just want to get access
116:24 - to this project anvil was the sponsor of
116:27 - this video so you need to thank them
116:28 - again for doing that this is really an
116:30 - awesome platform i had a great time
116:31 - making this video and actually working
116:33 - with anvil and kind of prepping before
116:35 - this is a really cool platform to build
116:37 - an entire website from scratch using
116:41 - only python you saw here we didn't use
116:42 - any javascript we didn't use any html or
116:45 - css all we needed to know is python and
116:48 - we actually didn't really need to write
116:49 - that much code considering the type of
116:51 - website we made which was an e-commerce
116:53 - site with payment integration users and
116:55 - everything like that so again a massive
116:57 - thank you to anvil make sure you check
116:59 - them out from the link in the
117:00 - description and with that said i will
117:02 - end the video here thank you guys for
117:04 - watching if you enjoyed leave a like
117:06 - subscribe to the channel i will see you
117:07 - in another one
117:10 - [Music]