00:00 - in this video I'm going to show you how
00:01 - to build the most interesting fun yet
00:04 - simple python project that you've ever
00:06 - seen now I know that's saying a lot but
00:08 - what we're going to do here is build an
00:09 - AI Choose Your Own Adventure game in
00:12 - under a hundred lines of code now I'm
00:14 - going to walk you through step by step
00:15 - and I promise you even if you're a
00:17 - beginner programmer you're going to be
00:18 - able to follow along here and you're
00:20 - going to have a fantastic project that
00:22 - is going to be a lot of fun to play with
00:24 - now for those of you that just want to
00:25 - dive right into the code I'll leave a
00:27 - time stamp down below but I did want to
00:29 - mention that we're going to be doing
00:30 - this using an open AI GPT model and
00:33 - integrating that with an Apache
00:35 - Cassandra database recently they added
00:38 - Vector support and that means we can
00:40 - actually inject real-time data in a
00:42 - memory buffer into our AI model really
00:45 - really cool stuff I know it seems
00:47 - complicated but I promise I will break
00:48 - it down and it will be crystal clear now
00:51 - let's dive into a quick demo of the
00:53 - project so I'm going to run the code
00:54 - here quickly though I'll mention that a
00:57 - Choose Your Own Adventure game is a
00:58 - branching game where you have multiple
01:00 - different paths and kind of options that
01:02 - you can choose and each choice affects
01:05 - the choice in the future and eventually
01:07 - you're trying to go down the correct
01:08 - path these were really popular back in
01:10 - the day when I was a kid and I've built
01:12 - a bunch of hard-coded Choose Your Own
01:14 - Adventure games but they can be really
01:15 - tedious to write out so have a look at
01:17 - this welcome to Whispering Woods it is
01:20 - said that the Lost Gem of strandy Lies
01:21 - hidden in these Woods you must Adventure
01:23 - deep into the depths of the forest to
01:25 - find it before we begin what weapons
01:27 - would you like to take with you now
01:28 - notice I can choose any weapons I want
01:30 - here different from a traditional
01:31 - Chooser and Adventure game so go with
01:33 - maybe Shield
01:35 - and ax
01:37 - okay so I'm going to take those as my
01:39 - weapons very well you've chosen a shield
01:41 - in ax now let us enter the Whispering
01:43 - Woods and begin your quest okay
01:45 - let's see what it says next as you make
01:47 - your way through the forest you come
01:48 - across a fork in the path to the left
01:50 - lies a path of darkness and to the right
01:52 - lies a path of light let's go light that
01:55 - seems like the better option
01:57 - okay let's see what brings us you have
01:58 - chosen the path of light you continue
02:00 - down the path until you come to a
02:01 - clearing where a small cottage sits in
02:03 - the middle as you approach the door
02:04 - swings open in a mysterious figure
02:06 - beckons you inside will you enter yes I
02:09 - will
02:10 - okay let's see what we got here and you
02:12 - step inside and find yourself in a cozy
02:14 - room with a warm fire burning in the
02:16 - corner the mysterious figure greets you
02:17 - and tells you that the Gemma Serenity is
02:19 - hidden deep within the forest he then
02:21 - offers you a choice you can either go at
02:22 - it alone or with this help let's go
02:24 - alone
02:26 - now notice all the stuff you see here I
02:28 - didn't write this is being generated by
02:30 - the AI okay so keep that in mind very
02:32 - well you decide to go in alone do you
02:34 - enter the cave or do you turn back
02:35 - enter the cave I'm just trying to get it
02:37 - to a point where I either die or I find
02:39 - the stone so you guys can see how this
02:40 - ends uh you enter the cave as you make
02:42 - your way through uh you see a dragon do
02:45 - you want to sneak past or fight it let's
02:47 - fight the dragon and you attempt to
02:49 - fight the dragon but it proves too
02:50 - powerful for you you are quickly
02:51 - defeated and the dragon devours you
02:53 - whole the end there you go so this whole
02:56 - thing that you saw was generated by AI
02:58 - in real time as I was typing it and it
03:01 - uses memory so what that means is it
03:04 - knows all of the choices I've made
03:05 - previously so we can generate the next
03:07 - choice using contextual data really
03:10 - really interesting and I'm going to show
03:12 - you exactly how to build this now let's
03:14 - just quickly compare that to a
03:16 - traditional Choose Your Own Adventure
03:17 - game so this is some code I'm just going
03:19 - to quickly scroll through that would be
03:20 - a hard-coded version of that where you
03:23 - need to actually manually enter every
03:25 - single path every single option you need
03:27 - to check for a specific string you
03:29 - couldn't type what I typed where you do
03:31 - like an exclamation point at the end or
03:33 - you have a leading space so you kind of
03:34 - do a weird answer to the question you
03:37 - need to actually hard code all of this
03:39 - stuff out as you can see in here whereas
03:41 - what we're going to do is just give a
03:44 - really detailed prompt that describes
03:46 - how the game should be played and the AI
03:48 - is going to take over and handle all of
03:49 - it for us so I promise we're going to
03:51 - get into the code but stick with me here
03:53 - for a minute or two where I share with
03:54 - you some important information about how
03:56 - powerful what I'm going to show you
03:57 - actually is and how you can apply this
04:00 - outside of this simple tutorial so when
04:02 - we think about llms and these language
04:04 - models like chat GPT they're very
04:06 - impactful they can do a lot of really
04:07 - interesting stuff and the main benefit
04:09 - to us as developers is that they can
04:11 - reason based on information and a lot of
04:14 - times we'll want to take a model like
04:15 - this and use it in our application we
04:17 - want to implement generative AI now the
04:20 - main issue in bottleneck we're going to
04:21 - face here is that we don't really have a
04:24 - way at least many people don't know a
04:25 - way to inject real-time data into the
04:28 - model now what that means is that the
04:30 - model can only reason based on the data
04:32 - it was trained on right if it was
04:33 - trained back in September 2021 like chat
04:36 - gbt it doesn't know up-to-date
04:38 - information and it's going to give us
04:39 - kind of hallucinations where it's
04:41 - misrecalling things it's giving us the
04:43 - wrong data it doesn't know the answer to
04:45 - specific questions because it doesn't
04:47 - have the information to be able to
04:49 - answer what we're asking now at the same
04:51 - time these models have a very hard time
04:53 - remembering large chunks of information
04:55 - and recalling that data accurately go
04:58 - into a chat GPT window ask it a bunch of
05:00 - questions then ask it how many questions
05:02 - have I asked you and you're going to see
05:04 - quite quickly it'll get that wrong a lot
05:06 - even ask it to recall previous questions
05:08 - or prompts that you've given to it and
05:10 - again it's going to hallucinate and it
05:12 - will give you a lot of wrong answers so
05:14 - we as a developer need to mitigate that
05:15 - so that we can actually have a reliable
05:18 - generative AI tool that we can use and
05:20 - that can be production ready and user
05:22 - facing how do we do that well we need to
05:24 - essentially inject the data that we deem
05:27 - accurate and that we want the model to
05:29 - reason in in the prompt and then
05:31 - instruct the model to reason based on
05:33 - that information now this is a technique
05:35 - no known as rag or retrieval augmented
05:38 - generation now to go a step further what
05:40 - you can actually do is use the model ask
05:43 - it to tell you the information it needs
05:45 - and then based on its response retrieve
05:48 - the information feed it into the model
05:50 - and have it give you an accurate reply
05:52 - this is a big thing it's very trendy
05:54 - right now again rag rag anyways in this
05:58 - tutorial what I'm going to show you how
05:59 - to do is have a memory for our llm that
06:04 - means that we'll actually allow it to
06:06 - know all of the previous paths all of
06:08 - the previous replies so it can generate
06:10 - an accurate reply going forward for our
06:12 - Choose Your Own Adventure game so now
06:14 - comes the question how do we do all of
06:16 - that well obviously I'm going to show
06:17 - you here step by step but to be able to
06:19 - provide real-time data to an llm we need
06:22 - to have a very very fast database and in
06:25 - this video we're going to use a vector
06:27 - database provided from data Stacks I've
06:28 - actually teamed up with them for this
06:30 - video they've sponsored it and provide a
06:32 - free Vector database that you guys can
06:34 - use and you'll see exactly exactly why
06:36 - it's kind of the best tool for this type
06:38 - of application anyways what is a vector
06:40 - database well a vector database stores
06:42 - information as vectors in
06:44 - multi-dimensional Space versus a tabular
06:46 - database or like your typical kind of
06:48 - SQL database right this actually allows
06:50 - us to very very quickly search for
06:52 - information because we're searching in a
06:54 - multi-dimensional vector space where we
06:57 - can compare vectors together very
06:59 - quickly relative to searching in an
07:01 - index database that can kind of get out
07:03 - of hand when it gets very very large at
07:05 - small scale obviously none of this
07:07 - matters when you scale to the point
07:09 - where we're dealing with petabytes of
07:10 - data we have all kinds of information
07:12 - we'd want our llm to have access to we
07:14 - need to be able to retrieve that
07:15 - information instantly really really fast
07:18 - right so we need to use a vectorized
07:20 - database to do that or at least a very
07:21 - very fast database and this is the best
07:23 - one that I know of I'm going to show you
07:25 - how to set that up but again the vector
07:27 - database stores data in a different
07:29 - representation you can look it up it's
07:30 - actually really interesting how it works
07:32 - and it's kind of the ideal type of tool
07:34 - for something like an llm and the type
07:36 - of application we're going to build so
07:38 - as I was saying what we need for this to
07:40 - work is a vectorized database that can
07:42 - store and retrieve information for us
07:44 - now for that we're going to use the
07:46 - asterisk Sandra database which is a
07:48 - fully managed service from datastacks
07:51 - who is the sponsor of this video so
07:52 - click the link in the description you
07:54 - can sign up with them for free you don't
07:55 - need credit card or anything like that
07:57 - and we can make an instance of this
07:59 - database for free and everything will be
08:01 - handled for us typically Vector
08:03 - databases can be complicated to set up
08:05 - but in this case we just press like one
08:07 - or two buttons fill in some info and it
08:09 - will just create it for us and give us
08:10 - all the connection steps that'll walk
08:12 - you through alright so once you've
08:13 - signed in you should be brought to a
08:15 - page like this and what we can do is go
08:17 - and click create database now we're
08:19 - going to make a vector database again
08:21 - optimized for the AI application
08:23 - database name call this whatever you
08:25 - want I'm just going to call this
08:27 - choose your
08:29 - if we could spell this correctly own
08:32 - adventure looks like I need a language
08:35 - model to help me type for the key space
08:37 - name you can call this whatever you want
08:38 - I'm just going to go with database and
08:40 - then for the free tier you just have one
08:42 - region so just go with whatever the
08:44 - available one is and then same thing
08:45 - we're just going to go with Google cloud
08:47 - or actually I guess you can choose one
08:49 - of these different options but I'm just
08:50 - going to use Google Cloud okay we're
08:52 - going to create this database and it's
08:54 - automatically going to be handled for us
08:55 - it's going to take a few minutes to
08:57 - provision and be set up once it's
08:59 - finished kind of being set up then I
09:01 - will show you how we can connect to it
09:02 - alright so our database has been created
09:05 - what we're going to do now is go over to
09:06 - connect and we're going to download the
09:08 - appropriate authorization and kind of
09:10 - connection things that we need so what
09:12 - we'll do is we'll follow along with a
09:14 - few steps that are actually down here
09:15 - this is going to allow us to connect to
09:17 - the database and create a place where
09:19 - we'll store the memory for our llm once
09:22 - we have all of that we'll actually
09:23 - connect to open AI we will then generate
09:25 - the prompt and we'll start actually
09:27 - creating the game it's going to take a
09:29 - little bit of time bear with me here I
09:30 - promise this is worth it really really
09:32 - cool application okay so we're going to
09:34 - go from overview to connect
09:36 - we're going to click on generate token
09:38 - we're going to download the token
09:39 - details into the same directory where
09:41 - our python script is so you can see here
09:44 - I'm in vs code you can open any editor
09:46 - you'd like I've created a python file
09:48 - tutorial.pi and inside that same
09:51 - directory very important in the same
09:52 - directory I've put my Json file now
09:55 - obviously don't share that with people
09:57 - I'm just showing it here I'm going to
09:58 - delete the database afterwards okay next
10:01 - we're going to go to get bundle we're
10:02 - going to click on that we're going to
10:04 - click on our region and we're going to
10:05 - download the secret bundle again to the
10:08 - same directory where our python file is
10:11 - okay
10:12 - now next we need to install a few things
10:14 - but before we do that we are actually
10:16 - going to create a virtual environment
10:18 - where our code is going to live or where
10:21 - our dependencies are going to live if
10:23 - you're unfamiliar with a virtual
10:24 - environment this is an isolated
10:26 - container specifically for python where
10:28 - all of the Python packages related to a
10:30 - project are going to be stored very
10:33 - useful when you have a lot of different
10:34 - projects and dependencies anyways what
10:36 - we're going to do here if you're on
10:37 - Windows is you're going to open up
10:39 - Powershell to do that if you're in vs
10:41 - code you can go the little plus button
10:43 - where the arrow is and just click on
10:45 - Powershell if that's not an option you
10:47 - can go to the search bar and just type
10:48 - Powershell and you can just run the
10:50 - commands that I'm going to show you from
10:52 - there as long as you're in the correct
10:54 - directory in Powershell
10:56 - now if you are on Mac or Linux then what
10:59 - you're going to do is just open up a
11:00 - normal terminal environment and I'll
11:02 - tell you the corresponding command that
11:04 - you need to run so what we're going to
11:05 - do is we're going to say pip install
11:07 - virtual EnV now this is what will allow
11:10 - us to actually create the virtual
11:12 - environment if you're on Mac or Linux
11:13 - try pip3 install virtual EnV now I'm
11:18 - going to go ahead and run that you can
11:19 - see I already have it installed
11:21 - okay now that we have that we're going
11:22 - to type
11:23 - virtual EnV and then the name of the
11:27 - environment we want to make now
11:28 - typically you'll just call this EnV
11:31 - so I'm going to do EnV and this should
11:32 - be the same command for Mac or Linux
11:34 - okay so you see it created an EnV folder
11:37 - for us up here now what we're going to
11:39 - do is activate the virtual environment
11:41 - now this is where the command will
11:43 - differ depending if you're on Mac or
11:44 - Linux if you are on Windows though
11:47 - you're going to type dot slash EnV
11:50 - slash Scripts
11:52 - slash activate Okay go ahead and hit
11:55 - enter and you're going to see a little
11:56 - kind of uh parenthesized EnV here which
11:58 - means you're in the virtual environment
12:00 - now if you're on Mac or Linux you're
12:02 - going to type source and then that same
12:04 - thing so it's going to be dot slash EnV
12:07 - slash
12:09 - grips
12:11 - slash if you do the slashes the right
12:13 - way activate okay and that should
12:14 - activate the virtual environment for you
12:16 - now to deactivate it you can just type
12:18 - deactivate and you'll get out of it but
12:21 - now that we're inside the virtual
12:22 - environment I'm just going to make this
12:24 - half screen again
12:25 - and we're going to follow along with the
12:27 - installation steps so we're going to go
12:28 - here to python because this is the drive
12:30 - we're using and we're going to first
12:31 - start by installing the Cassandra driver
12:34 - so I'm going to right click there and
12:36 - click on pip install Cassandra driver
12:38 - this is going to take a second once it's
12:40 - finished I'll be right back all right
12:42 - now while we're installing packages
12:43 - there's a few more that we need to
12:45 - install let me make this full screen
12:46 - here these don't come directly from that
12:48 - documentation what we're going to use is
12:50 - something known as Lang chain which is
12:52 - going to allow us to interface with open
12:54 - AI so we're going to type pip
12:57 - install again inside of the virtual
12:59 - environment and we're going to install
13:01 - Casio
13:02 - we're going to install Lang chain like
13:05 - that open Ai and then tick and it's
13:09 - actually not Tick Tock although it looks
13:11 - like it tick token like that okay so
13:15 - install these Casio Lang chain open AI
13:18 - tick token and that should give us all
13:20 - of the dependencies that we need there
13:22 - might be one or two more but I think
13:23 - that's pretty much it
13:25 - okay so while those install we're gonna
13:28 - go back to half screen here
13:30 - and we are going to now run the next
13:33 - steps here so we already have this
13:34 - directory we don't need that we're just
13:36 - going to go and we're going to copy all
13:38 - of the code here and we're going to
13:40 - paste this inside of our tutorial script
13:43 - once we have that we can actually close
13:45 - this window
13:47 - and we can start working from this
13:50 - okay so what this is going to do here is
13:53 - connect us to the database now we're
13:55 - going to modify this script slightly but
13:57 - this is just going to essentially test
13:59 - the connection and make sure it's
14:00 - working properly so all we need to do is
14:02 - we just need to go where all these files
14:04 - are and we need to rename them to
14:06 - whatever they are actually named in our
14:08 - directory so you can see here my cloud
14:09 - config secure connect bundle and this is
14:12 - named secure connect Choose Your Own
14:13 - Adventure dot zip okay that's correct
14:15 - that's fine we're going to scroll down
14:17 - you can see this right here this is not
14:20 - correct we need to change this name of
14:21 - our Json file which is choose underscore
14:25 - your underscore if we could do this
14:27 - correctly on adventure like that and
14:32 - then token.json
14:33 - once that's there
14:35 - we're going to open up our terminal
14:37 - from our virtual environment we're going
14:39 - to run our Python scripts we're going to
14:40 - say Python and then this is called
14:42 - tutorial.pi so I'm going to run that and
14:44 - we're just going to make sure we get
14:45 - some output if we get this output right
14:48 - here or really anything that doesn't
14:49 - tell us an error occurred we're good and
14:52 - we have connected to our database all
14:54 - right so now that this is working we're
14:56 - just going to clean up the code a little
14:57 - bit and start adding some stuff so I'm
14:59 - just going to delete these comments here
15:00 - that we don't need and I'm going to go
15:02 - and just delete this kind of row code
15:04 - because we're not going to use that
15:05 - either now I'm going to create two
15:06 - variables that we're going to fill in in
15:08 - a second the first is going to be the
15:10 - Astra underscore DB underscore keyspace
15:13 - okay this is going to be whatever you
15:15 - named it when you were creating the
15:17 - database so in this case we called it
15:19 - database
15:20 - we're then going to have another
15:21 - variable here and it's going to be the
15:22 - open AI underscore API underscore key
15:25 - and this is going to be our openai API
15:28 - key which we'll retrieve later on now
15:30 - though what I'd like to do is I want to
15:32 - connect to the Astrid database or to the
15:36 - Cassandra Astra database whatever you
15:37 - want to call it and I want to initialize
15:39 - memory so I'm going to show you how we
15:41 - create the memory then what we'll need
15:43 - to do is retrieve from memory and inject
15:45 - that into an open AI prompt so we're
15:48 - going to write a fair amount of code
15:49 - here I'll try my best to break it down
15:51 - step by step obviously if I'm too slow
15:53 - for you feel free to speed up the video
15:54 - so what I'm going to do down here is say
15:56 - message underscore history is equal to
16:01 - Cassandra chat
16:04 - message
16:06 - history
16:07 - okay and we're going to import this from
16:10 - above so we're going to go up here to
16:11 - import and we're going to have a few
16:12 - things we need to import here we're
16:14 - going to say from langchain dot memory
16:17 - import and this is going to be
16:20 - Cassandra chat message history if you
16:24 - see me looking to the side that's
16:26 - because I do have a cheat sheet open I
16:27 - don't have all of this memorized
16:28 - obviously but I'm going to type it out
16:30 - with you so I can explain it line by
16:31 - line okay so inside of message history
16:33 - we're going to essentially initialize a
16:36 - place in our Vector database where we're
16:38 - going to store the log of the chat
16:40 - history for this specific application so
16:43 - we're going to say our session
16:45 - underscore ID is equal to and you can
16:47 - make this literally anything you want
16:49 - this is just a unique key that will
16:50 - allow you to retrieve the session later
16:52 - on so if you actually wanted to store
16:54 - the progress of the choose your
16:55 - adventure game as long as you know what
16:57 - the session ID is and you don't clear
16:58 - the history you can access this at any
17:00 - time you'll see what I mean in a second
17:01 - next we're going to say the session is
17:04 - equal to session which is the connection
17:06 - to our Vector database we're then going
17:08 - to say the key space is equal to because
17:11 - you can have multiple key spaces the
17:13 - Astra DB keyspace and then we're going
17:16 - to say TTL underscore seconds is equal
17:19 - to 3600 this stands for the time to live
17:23 - seconds which means we are going to
17:25 - store all of this for a maximum of 60
17:27 - minutes if it hits 60 minutes we're
17:29 - going to delete whatever was added
17:30 - inside of here automatically we're then
17:32 - going to say message history
17:34 - dot clear
17:35 - now that's going to clear the message
17:37 - history which is just going to delete
17:39 - all of it that means every time we rerun
17:41 - this application we'll get a new set of
17:43 - memory for the new instance of the game
17:44 - all right now that we've created message
17:46 - history we're going to use a wrapper
17:48 - around this that will allow us to easily
17:50 - add to the message history you'll see
17:52 - what I mean but all of this is coming
17:54 - from langchain if you're unfamiliar with
17:56 - Lang chain this essentially allows us to
17:58 - set up pipelines for dealing with models
18:00 - like llms language models Etc and a
18:03 - bunch of other stuff like databases you
18:05 - can see from linkchain.memory import
18:07 - this and this is a wrapper around the
18:10 - vector database right and same thing
18:12 - with a bunch of the other stuff we're
18:13 - going to use now actually from the same
18:14 - import line here sorry about the cut
18:16 - there guys we're going to import the
18:19 - conversation buffer memory like that
18:24 - we're then going to come down here and
18:26 - we're going to say that our Cass
18:27 - underscore
18:29 - buff underscore memory is equal to
18:33 - Cassandra not chat message history why
18:36 - do I keep doing Cassandra this is
18:38 - conversation buffer memory and inside of
18:40 - here we're going to have our memory
18:42 - underscore key and you can make this
18:44 - equal to whatever you want but I'm gonna
18:46 - go with chat history and you'll see
18:49 - where we use that in a second and then
18:50 - I'm going to say my chat memory is equal
18:53 - to the message history now this is going
18:55 - to make it easier for us to load this
18:56 - into the open AI prompt which you're
18:59 - going to see in a second all right so
19:00 - we're actually almost there just bear
19:01 - with me here for a second we're going to
19:03 - go back up here we're gonna import a few
19:04 - things from Lang chain again that we're
19:06 - going to use to interact with open AI
19:08 - we're going to say from Lang chain Dot
19:11 - llms
19:14 - Imports and this is going to be open AI
19:16 - because that's the one that we're going
19:17 - to use you could use other ones as well
19:19 - we're then going to say from langjain
19:21 - Dot and actually not DOT we're just
19:24 - gonna say from link chain import llm
19:26 - chain and the prompt template
19:31 - okay we're going to go down here we're
19:33 - going to initialize a connection with
19:35 - openai so we're going to say llm is
19:38 - equal to open Ai and we're going to pass
19:42 - the open AI underscore API underscore
19:45 - key equal to the open AI API key okay I
19:49 - think I spelled that correctly I believe
19:51 - I did so now we have our llm so we'll
19:54 - get this key in a second but for now
19:55 - we'll just write the code next we're
19:57 - going to say llm underscore chain is
20:00 - equal to llm chain and what we're going
20:02 - to do is connect this to our llm so
20:04 - we're going to say llm is equal to llm
20:06 - we're then going to say prompt is equal
20:09 - to
20:10 - and this is going to be a prompt which
20:11 - you'll see in a second
20:13 - and we're going to say our memory
20:15 - is equal to the Cassandra buffer memory
20:17 - so what this is doing Lang chain is just
20:19 - wrapping all the stuff that we need to
20:21 - do with a really easy to use API I know
20:24 - it seems weird because like where are
20:25 - you going to find all this information
20:26 - but this is just right from the
20:27 - documentation okay so that's kind of
20:29 - where I'm copying it from and how I've
20:30 - constructed this project now one thing
20:32 - that we do need to do now
20:34 - is we need to make something known as a
20:35 - prompt template now you may have seen
20:37 - this in some other videos of mine or
20:39 - some other applications but the template
20:41 - is a way where we dynamically inject
20:43 - data into
20:45 - um kind of Chachi BT or the llm or the
20:47 - prompt right that's what we're doing so
20:48 - I'm going to say prompt is equal to
20:51 - prompt template for the prompt template
20:54 - we specify the input variables that
20:56 - we're going to have which is our dynamic
20:58 - or changing data so we'll say input
21:00 - variables now the first variable is
21:03 - going to be chat history which matches
21:04 - with the name of our memory key okay so
21:07 - what we'll do actually let me just add
21:09 - the next one and then I'll explain this
21:11 - next we're going to say human input
21:13 - and then we're going to go here and
21:15 - we're going to say the template is equal
21:17 - to template and we're going to define a
21:19 - template here
21:20 - and we'll write this in a second
21:22 - okay so the idea is that we're going to
21:24 - have input variables that we're going to
21:26 - pass into this template you write the
21:28 - input variables like this chat
21:30 - underscore history now when I specify
21:32 - the input variables what will happen is
21:35 - we'll have some value for these we'll
21:37 - pass them into the template and then
21:39 - when we make a prediction we'll be using
21:41 - a template that contains this Dynamic
21:43 - data so if you go through step by step
21:44 - here right I have my llm chain which now
21:47 - we're going to use our prompt for
21:50 - and we're using our buffer memory the
21:52 - buffer memory key is chat history
21:54 - meaning now when I use the llm it's
21:56 - going to take that memory and it's going
21:58 - to inject it inside of the prompt as the
22:01 - chat history key it's then up to us to
22:04 - provide the human input alright we're
22:06 - almost there now let's fill in the
22:08 - template and we'll actually start making
22:09 - some predictions now I'm going to copy
22:11 - in the template you can copy this from
22:13 - the link in the description all of the
22:14 - code will be available there but I'm not
22:16 - going to obviously type all of this out
22:18 - and let's read through this template
22:19 - okay so what I've done is I've specified
22:22 - what it is that I want the AI to be kind
22:26 - of responding to or how I want it to act
22:28 - now this template is fully customizable
22:30 - you can change this to be whatever you
22:31 - want and this is really going to be you
22:34 - defining the rules of your Choose Your
22:36 - Own Adventure story so if I read through
22:37 - this here it says you are now the guide
22:39 - of a mystical Journey at Whispering
22:40 - Woods a traveler named alera seeks the
22:43 - Lost Gem of Serenity you must navigate
22:44 - her through challenges choices and
22:46 - consequences dynamically adapting the
22:47 - tale based on the Traveler's decisions
22:49 - your goal is to create a branching
22:50 - narrative experience where each choice
22:52 - leads to A New Path ultimately
22:54 - determining Alaris fate here are some
22:56 - rules to follow and this is where you're
22:58 - going to be specific and you're going to
22:59 - tell hey I want you to ask this type of
23:01 - question I want you to ask this first I
23:02 - want you to do this that's where you
23:04 - define the structure of the game it is
23:07 - going to be random but you can make it
23:08 - much more concrete if you make this
23:10 - prompt a lot more detailed so Rules
23:12 - start asking the player to choose some
23:14 - kind of weapons you saw that that's what
23:15 - it did when I asked me have a few paths
23:17 - that lead to success us have some paths
23:19 - that lead to death if the user dies
23:21 - generate a response that explains the
23:22 - death and ends in the text the end I
23:25 - will search for this text to end the
23:27 - game so you're telling with natural
23:29 - language the AI model how you want it to
23:31 - generate a game for you which is really
23:33 - going to be the future of programming
23:34 - kind of a cool way to Showcase that here
23:37 - anyways here is the chat history use
23:39 - this to understand what to say next boom
23:41 - provide the chat history here's the
23:42 - human input and then the AI is going to
23:44 - generate a response for us hopefully
23:47 - that makes a bit of sense but this is
23:49 - the template that we're now going to
23:50 - pass to the llm which will be chat gbt
23:53 - and now it's going to generate all of
23:56 - this stuff for the game for us we don't
23:58 - need to manually code it like we would
24:00 - have here with like all these if
24:01 - statements and print statements and all
24:02 - that crap we'd have in a traditional
24:04 - game we're almost there what we need to
24:06 - do now is make a prediction but before
24:08 - we can make a prediction we need to have
24:10 - our open API key so let me open up that
24:13 - site let me show you how we generate it
24:15 - alright so to generate your API key from
24:17 - openai you're going to go to
24:19 - platform.openai.com account slash API
24:22 - Keys you can find this pretty easily
24:24 - from the website by clicking over your
24:26 - name if you click that it will say view
24:28 - your API key anyways we're going to take
24:31 - this URL I'll leave this in the
24:32 - description paste it in the browser and
24:34 - we're going to go to create new secret
24:36 - now for this I'm just going to go with
24:38 - game
24:39 - it's going to create a secret key
24:40 - obviously I will delete this after the
24:42 - video you're going to copy the key and
24:44 - we're just going to take that and paste
24:46 - that here okay now we have our openai
24:48 - API key now that we have that we can
24:50 - start generating some predictions from
24:52 - our llm so to do that we say llm
24:56 - underscore chain dot predict like that
24:59 - and then we pass to this the human
25:02 - underscore input equal to and then
25:05 - whatever we want this to be so in this
25:06 - case let's just say
25:08 - start the game now what this will do is
25:10 - return a string to us so we're going to
25:12 - say response is equal to that and then
25:14 - we can print
25:16 - the response now notice that this human
25:19 - input variable matches with the input
25:20 - variable to my prompt template and we
25:22 - could have many other variables if you
25:24 - wanted to add those you just have to
25:25 - specify them here okay so if I go here
25:28 - now and I run my code so it's going to
25:30 - be Python tutorial dot Pi we should just
25:33 - get the output that begins the game for
25:36 - us and then I'll show you how we put
25:37 - this in a loop okay it actually gives us
25:39 - an issue here it says unknown key space
25:41 - database so it's possible that I entered
25:44 - the wrong keyspace name let me have a
25:46 - look and I'll be right back all right so
25:48 - it looks like I spelled the key space
25:49 - name wrong data BSE hence why it wasn't
25:52 - appearing so let's just go over here and
25:54 - change that to be the correct name I'm
25:56 - sure you guys can spell better than I
25:58 - can so you probably didn't have that
25:59 - issue anyways let's clear and rerun this
26:03 - here and let's finger cross and hope it
26:05 - gives us the output let's see there you
26:08 - go welcome to Whispering Woods you have
26:10 - come in search of the Lost gem before
26:12 - you embark on your journey you must
26:13 - choose a weapon will you take a sword
26:14 - staff but War ax boom and you see starts
26:17 - the game now what we want to do is put
26:18 - this in a loop and see that memory come
26:20 - into action where it starts generating
26:22 - us through the different paths so let's
26:24 - go down here and let's set up a little
26:26 - bit of a while loop for us so we're
26:28 - going to start by just saying choice is
26:30 - equal to and we're just going to say
26:32 - start like that
26:33 - we're going to say well true
26:36 - okay and then what we're going to do is
26:38 - we're going to generate the response
26:39 - based on the choice now the First Choice
26:43 - I'm just hard coding because I want the
26:45 - first thing the user sees to be some
26:47 - output from the AI so we need to First
26:49 - just give it like a start prompt so it
26:51 - just generates that initial message okay
26:54 - we have that we are then going to say uh
26:57 - choice is equal
27:00 - to inputs we're going to say your reply
27:04 - like that however before we do that
27:06 - we're just going to look at the response
27:08 - so we're going to print the response
27:11 - I'm going to do dot strip now I'm just
27:14 - going to strip it so it gets rid of any
27:15 - leading or trailing white spaces or new
27:17 - line characters because sometimes the AI
27:19 - generates those we're going to print out
27:21 - the response and then we're going to say
27:22 - if
27:23 - the end in
27:26 - response
27:28 - then we're just going to break now the
27:30 - reason for that is again if we go look
27:31 - at our prompt remember I have a rule
27:33 - here and it says if you die
27:35 - have the end and a period contained in
27:38 - the response so now if that's the case
27:41 - right so if the end is there we're just
27:43 - going to break which is going to end the
27:44 - game for the user that's it now you can
27:47 - make this any search string you want but
27:48 - that's what I told the bot to generate
27:50 - so I'm going to look for that and then
27:52 - we should be good hopefully this makes
27:54 - sense it's a little while loop here but
27:55 - this is just going to run the game
27:56 - infinitely until we win or until we die
27:58 - essentially until the AI gives us the
28:01 - end okay
28:02 - so let's go in here
28:05 - zoom in a little bit
28:07 - and let's try this python tutorial.pi
28:12 - if you guys can take a second here
28:13 - there's a little bit of latency
28:15 - and it says welcome to the Whispering
28:16 - Woods
28:17 - um what weapons will you choose let's go
28:19 - with ax and sword
28:22 - okay we're gonna dual wield here chosen
28:24 - ax and a sword good choice you know I
28:26 - must decide what path to take left right
28:28 - or straight
28:29 - let's go left
28:31 - okay you choose left as you venture
28:33 - further down the path you come across a
28:34 - large stone wall with a mysterious door
28:35 - what will you do
28:37 - open the door now look at this right you
28:39 - can type anything you want here kick
28:41 - down the door break the door run away
28:43 - like it's so dynamic because of the fact
28:45 - that we're using the AI which is why I
28:47 - really love this project anyways open
28:48 - the door you open the door cautiously
28:50 - and find yourself in a dark and ancient
28:51 - chamber as you explore the chamber you
28:53 - find the chest containing the gem you
28:55 - have success or you've succeeded sorry
28:57 - in your quest the end boom ends let's
28:59 - run it one more time
29:01 - okay and by the way if you want it to be
29:03 - longer you could just write in the rules
29:05 - you need to go down at least 10 paths or
29:07 - make 20 decisions before you reach the
29:09 - stone so if you want to make it harder
29:11 - you can just tell the AI make it harder
29:13 - in the prompt right okay welcome to
29:14 - Whispering Woods uh let's bring a shield
29:19 - okay
29:21 - and you've chosen Shield which way do
29:23 - you go let's go left
29:27 - okay and
29:29 - you enter the temple find a large chest
29:31 - you open the chest leave it
29:33 - okay and let's see what we get here you
29:35 - leave the chest and continue your
29:37 - journey as you walk through on the path
29:38 - you come across a bridge uh do you want
29:40 - to cross the bridge
29:41 - cross it
29:43 - okay
29:44 - let's see what happens now
29:46 - uh you cross the bridge and make your
29:47 - way to a cottage as you approach the
29:48 - door you hear a loud rumbling suddenly a
29:50 - giant Beast emerges you must fight for
29:52 - your life do you use your Shield or try
29:54 - to run away
29:55 - use the shield so notice it's using a
29:58 - decision I made previously the shield in
30:00 - this decision right which you can
30:02 - continue to prompt the AI in that main
30:04 - prompt to do you raise your shield and
30:06 - prepare for battle the Beast charge at
30:07 - you but your Shield holds strong and
30:08 - you're able to fend off the attack you
30:09 - defeated the Beast you found the Lost
30:10 - gem congratulations the end okay maybe
30:13 - not the most thrilling end to a story
30:14 - but again you need to instruct it with
30:17 - what you want in the prompt which is
30:19 - really up to you guys so with that said
30:21 - that's going to start wrapping up the
30:22 - video here that's all the code again
30:24 - I'll make it all available from the link
30:25 - in the description so you can just
30:27 - download it and fill in uh the few
30:29 - variables and files and you'll just be
30:30 - good to go and that is how you make an
30:33 - AI Choose Your Own Adventure game I
30:35 - think this was a really really cool
30:36 - project I had a lot of fun building this
30:38 - and I think if you guys adjust this
30:40 - prompt and really add some more rules
30:42 - and give this some more structure you're
30:44 - going to get a really really interesting
30:46 - game and a really cool project thanks
30:47 - again to datastacks for sponsoring this
30:49 - video such a pleasure to work with them
30:51 - and really a cool project that we're
30:52 - able to generate here I hope you guys
30:54 - enjoyed and found some value if you did
30:56 - leave a like subscribe and I will see
30:58 - you in the next one
31:00 - [Music]