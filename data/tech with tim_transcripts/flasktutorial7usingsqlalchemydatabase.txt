00:00 - hello everybody and welcome back to life
00:02 - last tutorial so in this video what
00:04 - we're gonna be doing is talking about
00:05 - databases and how we can actually save
00:07 - user specific information now I know we
00:10 - haven't gone into user authentication
00:11 - yet and talked to a password hashing and
00:13 - all of that and we're not gonna do that
00:15 - in this specific tutorial of probably
00:16 - the next one either but if you guys do
00:18 - want to learn how to do that let me know
00:19 - and maybe I'll make a video on that
00:21 - later but right now what we're gonna do
00:23 - is just work on saving information a
00:24 - database understand how that works
00:26 - creating some database models this will
00:28 - probably take you know two videos maybe
00:30 - three depending on how much we end up
00:32 - doing so if I don't get to everything in
00:34 - this video don't worry it's coming and
00:36 - the next one that one should be out soon
00:37 - alright so let's go ahead and get
00:39 - started so what I want to actually do is
00:41 - make it so that when a user logs in
00:43 - they're brought to a page that's almost
00:45 - kind of like a profile page like a very
00:47 - simple profile page where they can
00:48 - modify some information about themselves
00:50 - now to keep things simple we're just
00:51 - gonna make that information an email so
00:53 - each user has an email when they go
00:55 - there they can change their email they
00:56 - can update it they can delete the email
00:58 - they can do it ever they want and we'll
00:59 - save that in a database and then the
01:01 - next time that the user logs in we'll
01:03 - look for that email and we'll display it
01:04 - and then they can change it just give
01:06 - you an idea of how we have persistent
01:08 - information now we're gonna do this
01:09 - using something called SQL alchemy I
01:12 - believe that's how you say that so we're
01:14 - gonna start by actually just installing
01:16 - that I gotta stop this server so we're
01:18 - gonna go to command prompt and just do a
01:19 - pip install flask - SQL and then alchemy
01:24 - I believe is how you spell that so I
01:27 - already have that installed you guys run
01:29 - and enter on that again flask SQL
01:31 - alchemy and then we'll be good to go so
01:34 - we're gonna start by guest just
01:35 - importing that so we'll say import SQL
01:39 - alchemy which is gonna be our import and
01:41 - now we're actually just gonna work on
01:43 - some of the front-end stuff so getting
01:44 - that form set up grabbing some
01:45 - information from the form with a post
01:47 - request and then we'll get into the
01:48 - database so I'm gonna go to this user
01:50 - dot HTML file you can see I've cleared
01:52 - out what we had previously that showed
01:54 - you know
01:55 - welcome user because what I'm gonna put
01:56 - in here now is just a form that shows
01:58 - the users email so to do that we've done
02:00 - this before we're gonna say form I'm
02:02 - gonna say action equals just a pound one
02:05 - more time we'll say method equals post
02:08 - like that can end our form and then
02:11 - we'll put our input so we're gonna put a
02:13 - did not mean to do that we'll say input
02:16 - type equals email like that we're going
02:21 - to need a value which we'll do in a
02:24 - second but we also need a name
02:25 - so say name equals email we're gonna say
02:29 - what is it
02:30 - placeholder equals in this case which is
02:33 - going to be what's our placeholder B
02:35 - enter email and then we're gonna have a
02:38 - value which is going to be equal to this
02:40 - is gonna be kind of weird because we'll
02:41 - see how this works in a second email if
02:44 - email now the reason I'm doing this is
02:47 - because we're gonna pass a variable to
02:48 - this field or to this or a template
02:51 - that's called email so I'm going to
02:52 - check if email has a value and if it
02:54 - does we're gonna display that as the
02:56 - value for this email rather than
02:58 - displaying the placeholder on enter
02:59 - email so only the first time before the
03:02 - users typed anything in which will the
03:03 - placeholder otherwise we're gonna show
03:05 - the actual value of their email that we
03:06 - grabbed from the database which we'll do
03:08 - later so now let's make a submit button
03:09 - so say input type equals submit like
03:13 - that and we'll say value equals the same
03:16 - thing which is submit and I apologize
03:19 - for the sloppy typing all right so there
03:21 - we go we have our form in here now what
03:24 - else did I want to do oh I've actually
03:25 - already added this but let's just go
03:27 - over it in my base template now I've
03:29 - just added this thing that says div
03:30 - class equals container fluid this is a
03:33 - bootstrap class and I've just put my
03:35 - blog content in there so it gets off the
03:37 - left wall of our website just a little
03:39 - bit it just is a fluid container that
03:41 - covers the entire web page essentially
03:42 - I'm not gonna explain really what that
03:44 - is because I'm not a pro on it but it
03:46 - just makes it look a little bit nicer
03:47 - okay so now that we've done that what
03:50 - I'm gonna do is actually start doing
03:52 - some stuff with sessions and saving the
03:54 - users email in a session and then once
03:56 - we have it in a session we can kind of
03:58 - compare the difference between a session
04:00 - and a database and since we already know
04:01 - about sessions we'll get started with
04:03 - that so the first thing I'm going to do
04:04 - is change my user page here to have a
04:07 - method so it's gonna have methods I
04:09 - believe it's like that and we're gonna
04:11 - have post and get just like our login
04:14 - page before and now what I'm gonna do is
04:17 - actually inside my user function I'm
04:19 - gonna start setting up a bit of code and
04:21 - I'll walk through it after so I'm gonna
04:22 - start by saying oops not on all capitals
04:24 - and spelled correctly email
04:27 - equals none and now what I'm gonna do is
04:29 - check the current method if the users in
04:32 - session so essentially if we have a user
04:33 - if we've logged in now I'm gonna check
04:35 - what method we reach this page with if
04:38 - it was a poster if it was a get so I'm
04:39 - gonna say if I believe this is gonna be
04:42 - a request dot method equals equals post
04:46 - then what I'm gonna do is grab the email
04:48 - from that email field so to do that
04:50 - we're going to say email equals request
04:53 - dot form and that we remember we just
04:56 - use this key so we say email like that
05:00 - awesome so grab that email and then what
05:01 - I'm gonna do is actually store this in a
05:03 - session so I'm gonna say session we'll
05:05 - use the same key as an email equals
05:08 - email like that
05:10 - okay awesome so we're actually going to
05:12 - get rid of user equals user here I'm
05:14 - going to just do is say email equals
05:16 - email so now essentially what we're
05:18 - gonna do is we're going to pass in an
05:19 - email here and display that now what am
05:22 - I gonna say though is if the request dot
05:24 - method is not post so if it's a get
05:26 - request what I'm gonna do is get the
05:28 - email from the session so I'm gonna say
05:30 - email equals session email like that and
05:37 - we'll start by saying if the key email
05:39 - is in session now since we've already
05:44 - defined email equals not up here we
05:45 - shouldn't have any issues passing this
05:47 - email in and essentially if we pass a
05:49 - none email then we just won't display
05:51 - anything and we'll have that kind of
05:52 - template text that we talked about
05:53 - before that placeholder text okay so
05:56 - that's a bit about it for the session
05:57 - I'm just gonna pop the session when we
05:59 - log out to now so session dot pop email
06:02 - none just make sure we remove that when
06:04 - the user logs out so no one else sees
06:06 - that or the user doesn't see it when
06:07 - they log back in and yeah that should be
06:10 - about it so let's test this and we'll
06:11 - get into the database stuff okay so I'm
06:13 - gonna run this so python tutorial 7 pi
06:16 - I've already got this up here
06:18 - it's refresh you are not logged in all
06:21 - right so let's go Tim submit there we go
06:23 - login successful okay so I'm just
06:25 - entered my email here I just had to fast
06:27 - forward through that because I didn't
06:28 - want you guys to see all my emails
06:29 - because it was showing it so now if I
06:31 - click submit you can see that it submits
06:33 - that and our email is safe now we should
06:35 - probably show some message to the user
06:37 - to tell them that their emails saved so
06:39 - let's actually do that in flash a
06:40 - message
06:41 - in here so when they hit that submit
06:42 - button on the post request will say
06:44 - flash and will say email was saved like
06:50 - that okay awesome
06:51 - so let's go back in here and actually
06:53 - change this now let's just change that
06:55 - to ca submit we get email was saved okay
06:58 - so let's go to the home page and make
06:59 - sure that our session was working so go
07:01 - to the home page go back to slash login
07:03 - you can see that it still has this saved
07:05 - tam at gmail.com and then obviously if
07:07 - we close a web browser and this wasn't a
07:09 - permanent session this will go away and
07:10 - it won't be saved so now it's time to
07:12 - talk about databases okay so we've done
07:14 - all that that's all great and now let's
07:16 - start setting up a database you start by
07:19 - changing this import statement because I
07:20 - just realized this is wrong what our
07:23 - import really should be and I wasn't
07:24 - even close is flask under underscore SQL
07:27 - alchemy
07:28 - so from flask SQL alchemy import SQL
07:32 - alchemy now what we're gonna do is set
07:34 - up a database object which is gonna be
07:36 - equal to a new kind of SQL database so
07:40 - to do this we're gonna say SQL alchemy
07:42 - and then inside of here what we're gonna
07:44 - do is actually just put the parameter
07:46 - app now we're gonna set up a few kind of
07:48 - configuration properties here for our
07:50 - app to define some stuff to do with the
07:52 - database so to do that we're gonna say
07:53 - app duck config and then here I'm gonna
07:55 - have to copy this in because I don't
07:57 - want to mess it up I'm actually I'll
07:59 - just copy the entire line then you guys
08:00 - can see it so I'm gonna say app duck
08:02 - config SQL alchemy underscore database
08:05 - underscore you are I notice that's not
08:08 - an L that's an I equals SQLite and then
08:11 - users dot sqlite3
08:13 - now this right here is actually going to
08:15 - be the name of the table that you're
08:17 - gonna be referencing which we'll talk
08:18 - about in a second but for now we're
08:20 - gonna leave this as users because that's
08:21 - what we're gonna use
08:22 - and then again sqlite3 so make sure you
08:24 - have that I'm gonna copy in one more
08:26 - thing here this is optional but this is
08:28 - just gonna remove a warning that we get
08:29 - sometimes so SQL alchemy underscore
08:32 - track modifications equals false what
08:35 - this is gonna do is make it so we're not
08:36 - tracking all the modifications to the
08:38 - database believe that's correct and this
08:40 - just pops up and tells you know add this
08:42 - if you don't want a warning so I figured
08:43 - it will add it now so we don't see that
08:45 - popping up okay so now that we've done
08:47 - that we've actually set up the kind of
08:49 - database configuration and now it's time
08:51 - to create what we call a model which
08:53 - we're gonna store
08:53 - information it so the reason why I'm
08:55 - showing you guys this SQL alchemy is
08:57 - because it makes it way easier to save
08:59 - information because we can write all our
09:01 - database stuff in Python code rather
09:03 - than writing SQL queries so some of you
09:05 - may be familiar with SQL maybe you've
09:08 - use SQLite 3 before this is gonna be a
09:10 - little bit different syntax but you
09:11 - should hopefully be able to understand
09:13 - it so any kind of object that we want to
09:15 - represent or any pieces of information
09:17 - can be stored in rows and columns
09:19 - in our database now the columns are
09:22 - gonna represent pieces of information
09:23 - and rows are gonna represent individual
09:25 - items now in our case we want to store
09:27 - users and our users are gonna have in
09:30 - this case just a name and an email and
09:32 - that's all we want to store so what I'm
09:34 - gonna do is actually define a class
09:36 - which is gonna represent this user
09:37 - object in our database and it's gonna be
09:40 - called users now what I'm gonna do in
09:42 - here I think I'm gonna actually look at
09:44 - this because I forget what it is is say
09:46 - DB dot model as the inheritance which
09:49 - means this is actually gonna be a data
09:50 - based model which means it has a few
09:52 - methods and things that are inherited
09:54 - from it now what we actually do to
09:57 - define the properties that we're gonna
09:58 - save is write them as class attributes
10:01 - now this is pretty straightforward you
10:02 - can pretty much copy kind of the lines
10:04 - I'm doing and tweak their names if you
10:05 - want to store more in or different
10:07 - information but the first thing I'm
10:09 - gonna do is say name extra sorry not
10:12 - name underscore ID equals and in this
10:15 - case we're going to say DB
10:17 - dot column which again is representing
10:20 - the type of information and then here
10:22 - we're gonna put what this is gonna be so
10:23 - we're gonna say DB dot integer like this
10:27 - which is gonna be the type of
10:28 - information we're gonna put the name
10:30 - actually before that which is gonna be
10:31 - ID and then what we're gonna do is say
10:34 - primary underscore key equals true now
10:39 - what I've done here and this is a little
10:41 - bit confusing so I'm gonna walk you
10:42 - through it in case you don't know what
10:43 - SQL is or how this works
10:45 - is every single object that we have in
10:47 - our database needs to have a unique
10:49 - identification now that identification
10:51 - could be a string it could be a boolean
10:53 - so we only have two values it could be
10:55 - an integer it could be whatever it wants
10:56 - but it needs to be unique so what I'm
10:59 - doing here is saying them each object in
11:01 - our model is gonna have an ID it's gonna
11:04 - have its this is going to be an integer
11:05 - ID and a pry
11:06 - keek was true which means that this is
11:09 - the way that we're gonna reference all
11:10 - these objects and all of these every
11:12 - single one of these keys needs to be
11:14 - unique in our database or in our table
11:17 - so in this users table is what we call
11:19 - it every single row has to have a
11:22 - different ID and that's so that we can
11:24 - like tell the difference between due to
11:27 - two different objects because if we
11:28 - don't have that then technically we
11:29 - could add duplicate elements which will
11:32 - result in errors when we're trying to
11:33 - grab elements from the table because
11:35 - we'll have two of the exactly the same
11:37 - thing so we don't know which one to
11:38 - return right okay so I've explained that
11:40 - hopefully that makes sense if you have
11:41 - questions leave a comment but now what
11:44 - we're gonna do is define our name
11:45 - columns we're gonna say name equals DB
11:47 - column name let's say DB dot string and
11:51 - then here we're gonna put the length or
11:53 - the maximum length of the string that we
11:54 - want to store in this case I'm just
11:56 - gonna say 100 characters and I believe
11:59 - that's actually all we need and then
12:00 - we're gonna say what was the last one I
12:02 - want to email equals DB dot column and
12:07 - we'll say email and then again DB string
12:11 - a hundred okay so let me check to make
12:14 - sure I did that correct I did awesome
12:16 - awesome awesome I Tricia Lee we don't
12:19 - even need to define these names here
12:21 - because I don't do this if I don't
12:23 - define the name then what's actually
12:24 - gonna happen is it will just use this
12:25 - variable name which is fine that's all
12:27 - we need to do so we just need to find
12:28 - the type here so if you wanted to change
12:30 - this and add more attributes all you
12:32 - would do is literally just take this
12:33 - line so email paste it you could change
12:37 - this to an integer string I believe
12:38 - there's floats
12:39 - bullying's they have some other values
12:42 - as well but you guys don't have to look
12:43 - those up if you want the specific ones
12:44 - I'm not gonna walk through all of them
12:46 - and then that'll say this is a new
12:47 - column in our database and we can store
12:49 - that information for each user okay so
12:51 - now we're gonna define an it method and
12:54 - this init method is gonna take the
12:55 - variables that we need to create a new
12:57 - object because technically we can store
13:00 - some values in here that are gonna be
13:02 - none values or no values which means
13:04 - that for some objects they might not
13:06 - actually have a value for that property
13:07 - for example say we have you know gender
13:09 - as an option and you know now some
13:11 - people decide not to declare that so
13:13 - maybe we leave that as none and then for
13:15 - some people we have male and we have
13:16 - female but some people just don't have
13:18 - for that column so what I'm going to do
13:20 - here now is say name an email because
13:22 - these are the two things that we need
13:23 - every time we define a new user object
13:27 - this ID will actually be automatically
13:29 - created for us if we don't do that
13:30 - because it's a primary key and now what
13:33 - I'm going to say is just self dot name
13:34 - equals name and self dot email equals
13:39 - email
13:40 - okay so I've tried to explain this model
13:41 - hopefully this makes sense again you
13:43 - guys can always look up the
13:44 - documentation and read through all this
13:45 - if there's anything that I skim through
13:46 - I don't go into enough detail but okay
13:49 - so now that we've done that what I'm
13:51 - going to do at the bottom of my program
13:53 - is add something that we need which is
13:55 - DB dot create all now what this is gonna
13:58 - do is actually create this database if
14:01 - it doesn't already exist in our program
14:03 - whenever we run this application so
14:05 - that's important make sure you put that
14:06 - above the app dot run so that the app
14:09 - doesn't have an issue when you know that
14:10 - database doesn't exist and it starts
14:12 - running and with that we can actually
14:14 - start saving users