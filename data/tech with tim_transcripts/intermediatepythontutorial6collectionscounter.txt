00:00 - hey guys and welcome back to another
00:02 - YouTube video so this is the sixth video
00:04 - in my Python intermediate tutorials in
00:07 - this today's video I'm going to be
00:08 - talking about collections and more
00:10 - specifically counter which is a part of
00:13 - the collections module so what is the
00:15 - collections module pretty much it's a
00:17 - built in module in Python that's going
00:19 - to allow us to have different kinds of
00:20 - data types so that we can store
00:22 - information sort through information and
00:24 - do some cool things these are extremely
00:26 - useful on the second I found out about
00:28 - them I started using them all the time
00:30 - because a lot of the stuff that would
00:31 - usually take you a few four loops or a
00:32 - few lines on you can do in one line or
00:35 - two lines with these new collection
00:37 - types so I just was first off and start
00:39 - by saying that in Python it has
00:42 - something called containers so
00:43 - containers are pretty much a data type
00:46 - or an object that's gonna store multiple
00:49 - objects so it's like a container like a
00:50 - list is an example of a container a set
00:53 - is an example of container a dictionary
00:55 - and a tuple as well these are the four
00:58 - main ones with Python and in the
01:00 - collections module they introduce five
01:02 - new ones which are similar to these but
01:04 - they all have their own methods and cool
01:07 - things you can do with them so the one
01:08 - I'm going to talk about today is counter
01:09 - but the other ones are listed here DQ
01:11 - named tuple ordered dictionary and
01:13 - default dictionary you can kind of get
01:15 - an idea what some of them aren't by
01:16 - reading them but let's get into the
01:18 - counter one for right now okay so first
01:22 - thing we need to do whenever we are
01:22 - using collections is we need to import
01:24 - it so this first line up here is
01:26 - unnecessary but I just did that to show
01:27 - you and we're gonna import counter from
01:30 - collection so we can reference it
01:31 - directly without doing collections dot
01:33 - count you okay so I'm just going to
01:35 - start by creating a new counter so in
01:37 - size C equals counter now when you
01:40 - create a new counter what goes in here
01:42 - as the arguments can just be any I want
01:45 - to say that collection data type or any
01:47 - container so for example you put a
01:49 - dictionary set tuple you can put a list
01:52 - and you can also do something which is
01:54 - weird with these keywords I'll show you
01:56 - that in a second so for example I could
01:58 - create a counter like this by just
02:00 - putting a string and it's gonna count
02:02 - all the letters in the string and return
02:04 - them to me and I'll show you that in a
02:05 - second I could create another counter
02:07 - where in here I have a list so it's like
02:09 - a a E
02:13 - see and let's do one more see you like
02:17 - that I could to put a dictionary so I
02:20 - can do it so I like this
02:22 - I'll just make a small loan so we don't
02:23 - take too long
02:27 - whoops like that b2 and you can also put
02:32 - these keywords which is what I was
02:33 - talking about it's kind of cool because
02:35 - you don't have to type out or like use a
02:36 - for loop to create a list like this I
02:38 - could do something like oops
02:40 - cats equals four dogs equals seven like
02:45 - that and I can continue on with keywords
02:47 - and I don't have to actually put the
02:48 - quotation marks around these I can just
02:50 - name them exactly what they are so let's
02:52 - just go ahead and start printing some of
02:53 - these to the screen to see what actually
02:54 - happens when I create a new couch object
02:58 - and what does that look like in Python
02:59 - so we'll just print all these just give
03:02 - us an idea of what they really are okay
03:05 - so there we go so it says we have a
03:06 - counter object it is its own object it's
03:09 - not like a list or dictionary it's it's
03:10 - own thing it says a we have to I believe
03:14 - this is an L we have 2 G 1 D 1 and then
03:17 - same thing here ABC dogs cats so you can
03:21 - see it looks like a dictionary in terms
03:22 - of it has a key value pair but it works
03:25 - a little bit differently so now if we
03:27 - want to reference a specific item which
03:30 - is typically what we want to do from our
03:32 - counter we can just put the square
03:34 - brackets and put the name of the item of
03:36 - the key so in this case I'm gonna put
03:38 - cats and you can see now we get 4 as
03:41 - that's the direct value related to cats
03:43 - and something cool with this counter and
03:46 - a reason why I use it specifically is I
03:48 - can put an item in here that doesn't
03:51 - exist in the counter it doesn't have a
03:53 - key set and that will actually not
03:55 - return an error like might happen with a
03:57 - dictionary so for example I put a key
03:59 - like I don't know let's see pet then it
04:03 - just gives me 0 instead of returning an
04:05 - error so if I were to do this with the
04:06 - dictionary I'll say D equals like I
04:08 - don't know
04:10 - cat 2 and then I tried to do D pet like
04:15 - this and get the value we get an error
04:18 - because pet the key pet does not exist
04:21 - in our in our dictionary okay so let's
04:24 - move on to some more methods and
04:26 - how why these are extremely useful so we
04:29 - can see here one of the methods that we
04:32 - can use is we actually just list all of
04:34 - the elements out and this is useful if
04:35 - you want to like some something so let's
04:38 - just say list and then see doc elements
04:41 - like that and what this is going to do
04:44 - if I print it to the screen is it simply
04:47 - just gonna print out all of the elements
04:49 - in our counter so we say they had cats
04:51 - cats cats cats dogs dogs dogs like that
04:54 - and since here we've said cats equals
04:58 - four dogs equals seven then it prints it
05:00 - out like in a made list with that many
05:03 - indices which can sometimes be useful
05:05 - I'm just gonna change this to be named E
05:07 - so that we can now print out the one
05:08 - like this with a1 b2 and you can see we
05:12 - get a BB like so I hope if I do the same
05:15 - thing I'll change this to e
05:17 - we print it again then again we get
05:20 - another list that just has all of the
05:21 - elements in it so that's one useful
05:23 - method C dot elements another useful
05:26 - element or method sorry is most common
05:29 - now this one by far is probably the most
05:31 - useful ones and you can simply just type
05:33 - this so the name of your counter object
05:37 - and then dot most underscore common and
05:40 - then in the brackets here and put how
05:41 - many elements you want so if you wanted
05:44 - to find the number one most common
05:45 - element you'd put one if you want to
05:47 - find two you put two so let's print the
05:49 - subscreen see we get so and you can see
05:55 - we get the most common elements are a
05:56 - and C and it actually also returns us at
05:59 - out of those elements as well so it says
06:01 - a which occurs two times and C which
06:04 - occurs two times and that's returned to
06:06 - us in a tupple or to pull however you
06:08 - want to call it which is really useful
06:10 - okay so now another one we're gonna use
06:13 - I'm just gonna copy something I have
06:15 - open here just to save us but a time in
06:16 - terms of creating encounter objects so
06:18 - I'm gonna delete all this and I'm gonna
06:20 - make one counter which is equal to a or
06:22 - C and then I'm just making a list which
06:24 - is D and a BBC like this okay so you can
06:28 - actually do something as well with these
06:30 - counter objects you can subtract counts
06:33 - from them from using other integral
06:35 - objects or you can add like the count of
06:38 - objects to them so one method is called
06:40 - tract oops like this and it does pretty
06:45 - much exactly what it it says so we're
06:47 - gonna take this counter object this has
06:49 - to be called on a counter object by the
06:50 - way it says with these counts and we're
06:53 - going to subtract whatever the counts
06:55 - are from D of similar items so we have
06:58 - one A two B's and a C so if I do this
07:01 - and I print just the screen we should
07:04 - let's do a quick calculation here get a
07:06 - is equal to three
07:07 - B is equal to 0 C is 0 and D is still
07:10 - negative 2
07:11 - none oh it's because I didn't convert
07:13 - this to a list sorry about that let's do
07:17 - this maybe not entire brecht is not
07:21 - integral all right just give me a second
07:22 - guys there is a way that we can
07:24 - oh let's cuz we're doing this so C dot
07:26 - subtract doesn't actually return
07:29 - anything we just have to print see after
07:31 - we call that method okay so there we go
07:33 - and we do get what we had there okay so
07:36 - yeah C is negative 1 because 0 minus 1
07:38 - gives us negative 1 and there we are so
07:41 - it is working exactly like it should be
07:43 - okay the next one is update so I'll run
07:47 - this now C dot update and this is the
07:50 - exact same thing of subtract except it's
07:52 - simply just gonna add the count of
07:54 - whatever interval object you give it so
07:56 - in this case I'm gonna put D and note
07:58 - here that I'm using a list but I could
07:59 - be using like a dictionary I could be
08:01 - using another counter object I could be
08:04 - using a set a tupple whatever you want
08:07 - to say there it's still going to like
08:09 - work for update so let's see here and I
08:11 - didn't print C let's do that and there
08:17 - we go so we went originally so we
08:19 - changed our counter by subtracting and
08:21 - then we just updated it by adding so it
08:23 - should be the same as our original
08:24 - counter which it is ok so that's working
08:26 - well the next one that I'm going to talk
08:29 - about now is clear this one does pretty
08:31 - much what it states so if you see here
08:35 - we don't see dot clear and then I'll
08:37 - print C to the screen and all it's going
08:40 - to do is just remove all of the counts
08:41 - so we now have an empty counter object
08:43 - that we can use to count something else
08:45 - to add to to subtract so on okay so
08:49 - that's it for the methods pretty well
08:51 - there's one or two more but I don't find
08:52 - them very useful so I'm not gonna
08:53 - right now but there's something cool
08:56 - that you can do with these counters and
08:58 - there's a few operations that are
09:00 - applied to them so you can actually add
09:02 - counters using the plus sign so you do
09:03 - like this C plus D you can do C minus D
09:07 - you can subtract them you can add them
09:08 - and then the two operations which you
09:11 - wouldn't necessarily know intuitively is
09:13 - you can do something called intersection
09:15 - and union of counters so let's just
09:17 - first show what happens when I add these
09:19 - two counters together so C plus D oops
09:22 - and this needs to be a counter now
09:24 - because this isn't gonna work if it's a
09:26 - list there we go so make that a counter
09:28 - and i'll print C minus D and that will
09:33 - print another one after that so if I add
09:35 - them and subtract them you can see that
09:39 - it works like this so when I add them we
09:42 - get the counts
09:42 - I don't up like this and when we
09:44 - subtract we get it subtracted as well
09:48 - now some of you might be wondering here
09:51 - why we don't have the elements B C or D
09:54 - shown in our counter and that is because
09:57 - if the element count is less than zero
10:00 - or equal to zero it's not going to be
10:02 - shown in our counter when we do these
10:04 - operations by adding and subtracting so
10:07 - because of that you can see like with
10:10 - the why that happened because B is 2
10:12 - here and we have to be so I created 0 C
10:14 - is already 0 and D was negative 2 so
10:17 - when we subtracted it's not going to
10:19 - bother showing those in our new counter
10:22 - now the next operations that we can do
10:24 - is something called Union and
10:27 - intersection so the first one I guess
10:30 - I'm gonna show this intersection and the
10:32 - way that you can think of intersection
10:34 - is like the minimum elements in each of
10:36 - the the list so we're gonna have C
10:40 - intersecting with D in this case we
10:42 - should get a equals 1 B equals 2 and C
10:46 - equals 0 D equals negative 2 so let's
10:47 - just see if this works and here we go we
10:50 - get B is 2 is 1 and we're not showing
10:52 - the other ones again because they are
10:55 - like they're equal to 0 or less than 0
10:58 - so they're not being shown and this is
10:59 - the and sign is what I'm doing to do
11:01 - this intersection between the counters
11:03 - the next one that we can do is called
11:05 - Union and this one you can think of
11:07 - the max elements shown in each of our
11:09 - counters so it's gonna take a equal to
11:12 - four because that's our max it's gonna
11:13 - take B equal to two there's not some max
11:15 - between here C equals one and then again
11:18 - it shouldn't be showing us D because
11:20 - that's negative tip so there we go we
11:22 - get a is four B is 2 and C is 1 so this
11:25 - is pretty much going through looking at
11:27 - the counters and just taking the maximum
11:29 - element whereas before when we did our
11:31 - intersection it's taking the minimum
11:33 - shown of all those elements so that has
11:37 - pretty much been it for this video and
11:39 - counters from the collection there's a
11:41 - few things that you can do with them as
11:43 - well a few other methods if you want to
11:44 - learn about those just go to just look
11:47 - up collections counter Python you can
11:50 - read through the documentation and you
11:51 - can look at some more examples that I
11:52 - didn't show here specifically other than
11:55 - that I hope you guys enjoyed the video
11:56 - if you did play please make sure you
11:58 - leave a like and subscribe and I will
11:59 - see you again in the next one
12:02 - [Music]