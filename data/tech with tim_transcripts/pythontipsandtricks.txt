00:00 - hey guys and welcome back to another
00:02 - YouTube video so in today's video I am
00:04 - gonna be showing you some cool tips and
00:06 - tricks that you can use in the Python
00:08 - programming language now most of these
00:10 - tips are very specific to Python and you
00:12 - probably don't even know they exist but
00:15 - they're definitely gonna be able to save
00:16 - you a lot of time programming and they
00:18 - make things a lot easier so one of the
00:20 - great things about the Python language
00:21 - is it has a lot of built-in functions
00:23 - methods even modules that you can use to
00:26 - help you program and it's built around
00:28 - all the things that are wrong with other
00:30 - programming languages essentially so a
00:33 - lot of these tricks are you having here
00:34 - you probably don't even know exists and
00:35 - can save you a ton of time and a ton of
00:38 - work so go ahead and make sure you watch
00:39 - through the whole video is I'm going to
00:41 - be going through eight tricks in this
00:43 - one I'm gonna do a part two video later
00:44 - on but these tricks will save you a lot
00:47 - of time and when I found out about them
00:49 - I was very excited because I no longer
00:52 - had to go through rigorous coding to
00:54 - perform somewhat simple tasks so let's
00:57 - go ahead and get started and this first
00:58 - one kind of solves a problem that a lot
01:01 - of programs will run into if you're
01:03 - trying to well solve problems so that
01:05 - what you want to do is you want to have
01:06 - the index of a list and you also want to
01:09 - have the element in that list so I'm
01:10 - just going to write a list here to start
01:12 - and in this case I'm just gonna do a B
01:15 - and C very simple for the purpose of the
01:18 - example now what you would want to do
01:21 - essentially in a for loop is you'd want
01:22 - to have well the index of the item P
01:24 - also want to know what the item is so
01:26 - what you typically would write is
01:27 - something like this you'd say for X in
01:29 - and let's say alright actually we're
01:32 - gonna start we're gonna make it another
01:34 - variable hit respess a counter equal
01:36 - zero I'm gonna say for X in Li and then
01:40 - what you do is you increment counter
01:42 - plus equals 1 every time you run the for
01:45 - loop on and I can be print for example
01:48 - at counter and X so that you could know
01:52 - what index your elements at um I'm just
01:54 - gonna move this actually below print
01:56 - because that doesn't make sense what
01:57 - element your is like the index for your
02:01 - element and then you also won't know
02:02 - what the element is so you ID print them
02:04 - here so I'm printing the counter and
02:05 - then I'm printing X so you can see if I
02:07 - run program I get 0 a 1 B 2 C now that's
02:10 - great but you had to use this counter
02:12 - what python does it actually allows you
02:14 - to do this without using this counter
02:16 - variable in to shorten an upper limit so
02:17 - I'm going to show you how we do that
02:18 - here so free first of all it goes for I
02:20 - and then item in and now this is the
02:24 - keyword enumerate like that okay and
02:27 - then you just put your listing here so
02:29 - in this case Li and now what its gonna
02:31 - happen is I is gonna be assigned index
02:34 - of your element so in this case when
02:35 - we're going through first it's gonna be
02:37 - assigned 0 for a item is gonna be
02:39 - assigned to a so now you have both of
02:40 - them with two separate variables and you
02:42 - didn't have to make this counter
02:43 - variable so I'll show you how it works
02:45 - out again we'll print I and then item
02:48 - like that see if we run the program we
02:50 - get the same thing and we just shortened
02:52 - up two lines we no longer need to count
02:54 - your variable and we no longer need to
02:56 - we'll define that we're incremented at
02:58 - top so that's really useful you're gonna
03:00 - notice you use this a lot especially
03:02 - when you're trying to solve problems so
03:04 - that's a really cool one the next one
03:06 - I'm gonna talk about and a lot of you
03:08 - probably will know this but this is
03:10 - really cool as well especially if you're
03:11 - trying to print stuff to the console is
03:12 - you can actually do something called
03:13 - string multiplication in Python now it
03:16 - seems weird in most cases you can only
03:18 - add strings together called
03:19 - concatenation but you can actually
03:21 - multiply them in Python so I'll show you
03:23 - an example I have a string like Hello
03:25 - if you wanted to print this string like
03:28 - 4 times to the screen in other languages
03:30 - what you do is you do something like
03:31 - this plus S oh I have a capital S at the
03:36 - end there so let's just print it four
03:39 - times and you get hello hello hello
03:40 - right but what if you wanted to print
03:42 - this a hundred times you don't want to
03:44 - constantly keep adding maybe you go
03:46 - through a four loop to add all the esses
03:48 - together anyways in Python it's a lot
03:50 - easier all you have to do is s x and
03:53 - then an integer in this case I'm gonna
03:55 - do for now yet hello hello hello hello
03:57 - so that's really cool you can multiply
03:59 - strings together and that's not a useful
04:01 - trick in Python so the next one is a
04:04 - variable swap in this one you'll use a
04:07 - lot especially if you solve I don't know
04:10 - if you solve a lot of problems do you
04:11 - like programming exercises and stuff but
04:13 - you want to change two variables around
04:15 - so you want to change I don't know you
04:18 - want to change a to equal B and B to
04:19 - equal a now what you typically have to
04:21 - do and I'll show you here in any other
04:23 - programming language is what you want to
04:25 - do is you're going to
04:26 - temp ain't have to make a temporary
04:28 - we're gonna say temp equals a a equals B
04:31 - & B heated a like that
04:33 - so now you've effectively changed a to
04:35 - be B and you've changed B so see this
04:38 - I've even made a mistake here this
04:40 - should not be a should be equals temp
04:42 - because after you change a now it's
04:44 - equal to B you still want the value of a
04:46 - so you're gonna have to call that temp
04:49 - variable here that we just created so B
04:50 - equals temp so I'm just gonna do this so
04:52 - that we can kind of see a little bit
04:54 - better okay so now what you want to do
04:56 - in python is it actually makes it a lot
04:59 - easier so you can do is you can just go
05:00 - a comma B equals B comma K now this
05:04 - looks really weird in any of the
05:05 - programming languages probably give you
05:07 - an error but this actually works fine so
05:09 - you can say a equals B and B equals a
05:11 - now I'm just gonna do it one more time
05:13 - because since we already changed B and a
05:15 - up there they're gonna be different and
05:17 - then I if I print to the screen on each
05:19 - go a you can see it's equal to 2 when I
05:21 - print B it's equal to 1 so we had two
05:24 - and one up here but then by running this
05:27 - line it actually changed them around and
05:28 - they're just the reason I ran it twice
05:30 - in case do you understand it's because I
05:31 - changed it up here I just wanted to
05:32 - change it back so you could see from my
05:34 - original variables okay next trick and
05:37 - this one is kind of a similar trick and
05:39 - it's you can actually sign multiple
05:41 - variables to the value of a list so for
05:45 - if I want to make a new list I'm just
05:46 - gonna say Li it goes we'll just go yeah
05:49 - a B and C once again now I can do
05:54 - something like this which looks really
05:55 - weird but actually we're it's fine XYZ
05:57 - equals L I now if I print X I get a
06:00 - print B oh sorry print Y I get B and I
06:05 - print Z I get C so by just running these
06:08 - three variables here it assigns to the
06:10 - same the ones corresponding in the list
06:13 - which again any other programming
06:15 - language you think is like what the heck
06:16 - you can actually do that but yes that is
06:18 - something you can do now I'm just gonna
06:20 - restart this idea leaks I don't like
06:21 - working at the bottom it what about but
06:23 - I want it to be easier and you can see
06:24 - at the top so the next trick that I have
06:27 - here and this is one you might know
06:29 - about and it's really useful if you're
06:31 - trying to use like someone's else's
06:32 - modules or you want to figure out what a
06:34 - function does without having to look it
06:36 - up
06:36 - and it's called help function now it
06:40 - seems like oh why would I need to use
06:41 - this but it's actually extremely useful
06:43 - so you can call this on any function so
06:45 - for example I call help on the function
06:47 - Len
06:48 - then you see we get help on built-in
06:49 - function Len in module built-ins
06:51 - it says length it gives you the
06:53 - parameters so we need an object and then
06:55 - it returns the number of items in a
06:57 - container and that tells you what that
06:58 - oh so if I go help on function range for
07:01 - example then it goes through all the
07:03 - stuff that the range function does that
07:05 - you probably didn't even know so it runs
07:07 - through that pretty much the doc string
07:08 - of this function and it tells you all
07:10 - the things that you can do with well
07:13 - with that function so I'm just gonna
07:14 - open it again because I don't like
07:16 - working at the bottom I'm sure there's a
07:17 - way to clear it but I don't really know
07:18 - so we're just gonna do this for now the
07:20 - next one is similar and this one is
07:23 - actually called dirt now what this is
07:25 - gonna do is is actually gonna list all
07:27 - of the methods that you can use on a
07:30 - certain class so for example the class
07:33 - string has a ton of different methods
07:35 - like dot um I don't know what's a string
07:37 - method dot strip something like that
07:40 - right dot upper dot lower so if you run
07:42 - this it prints all of the different
07:44 - methods that exist on this class so we
07:48 - have our strip split split lines and
07:50 - then if you don't know what one of these
07:51 - does you can just go ahead and call the
07:53 - help function on that so you do I think
07:56 - it's like STR and then dot and then
08:00 - whatever one you want something it's our
08:01 - split well that should give us something
08:03 - maybe let's see yeah so then it says
08:05 - help on the method and it goes through
08:07 - and tells us exactly what our split does
08:09 - and that's really useful
08:10 - ok the next trick in Python and this is
08:13 - pretty well known but I just wanted to
08:15 - show in case some of you guys didn't
08:16 - know what it's called list comprehension
08:17 - and it's a way to create a list within
08:19 - one line without having to use a for
08:21 - loop so I'll show you what I mean here
08:23 - so we can actually do is you can do
08:24 - something like Li and that's just stands
08:26 - for list by the way I'm gonna say it is
08:28 - equal to X for X and range ten if X
08:34 - modulus two equals equals zero and now
08:37 - I'll break this down on what this
08:38 - actually does for us so it's gonna say
08:41 - the list is equal to X so an element X
08:45 - for X in range 10 so now what this is
08:48 - gonna do is gonna run X 10
08:49 - so zero to nine and now I'm just saying
08:52 - I'm only gonna add this element X if
08:55 - it's divisible by two so if it's an even
08:58 - number pretty well and I'll just show
09:00 - you what if I print a lie like this we
09:02 - get zero two four six eight and you can
09:04 - do this with multiple statements you can
09:05 - change this around so for example I can
09:07 - say 1 for X and range 10 now if I just
09:13 - wanted to create a list of ones so 10
09:15 - ones then that's what I'm doing here
09:18 - I get 1 1 1 1 1 and so on like that so
09:20 - that Driscoll I didn't say Li equals it
09:22 - just gave me that list you can see how
09:24 - that works and you can do multiple lists
09:26 - you can you can do a list inside of the
09:27 - list so you could say for X and range
09:31 - let's see oops nice and I'm like typing
09:36 - here and then we get 5 MP lists inside
09:39 - of another list and that's really useful
09:41 - in Python because in other languages if
09:44 - you want to create a list you'd have to
09:45 - do something like 4x in range 10 and
09:48 - then you'd have to do list dot append
09:52 - and so on so this gonna crash just cuz
09:54 - you can't use lists like that but
09:56 - anyways then you have to end the list
09:57 - and that means you need at least three
09:58 - lines cuz you have to create the list up
10:00 - there whereas in Python you can just do
10:01 - it in one and that saves a lot of time
10:04 - so the last two that I'm gonna get in
10:06 - here into here are just some functions
10:09 - that you can use on strings which are
10:11 - really really useful and they save a lot
10:13 - of effort so I'm just gonna copy a list
10:14 - that I've already have typed out here
10:16 - just to save us some time let me say
10:18 - hello ABC so on just a bunch of random
10:21 - words and letters and now there's a
10:23 - function called reversed and python now
10:26 - what this allows us to do is pretty well
10:27 - just reverse the list so I'm gonna say
10:29 - reversed Li and then if I it's cuz I
10:32 - didn't print it to the screen my bad
10:34 - we reversed Li hmm interesting why this
10:40 - isn't working to this it's cuz it's an
10:45 - object print list
10:49 - reversed Ella and they said look there
10:52 - we go so now we get a list that's
10:54 - reversed and so is tech Tim and so on
10:56 - like that what was happening here is I
10:58 - was literally just printing the actual
10:59 - function
11:00 - I wasn't converting it into a list so
11:03 - yeah that's why that wasn't working so
11:05 - anyways reversed Li it reverses the list
11:07 - next one is gonna be sorted so I'm gonna
11:09 - do the same thing here so I'm just gonna
11:11 - say print sorted and I'll just put a
11:14 - list around it in case this gives gives
11:16 - us an error again
11:17 - and then I'm gonna sort that list that I
11:21 - have a bit should I say sort Li and
11:24 - there we go now we get a sorted list
11:25 - based on alphabetical order now with
11:28 - this sorted function you can actually
11:30 - use something called keys which are
11:33 - again really useful so I'm just gonna do
11:36 - the same thing here just print this
11:38 - again and in this sordid function which
11:41 - can do a comma and I'm gonna say key is
11:43 - equal to Len now I'll give you a second
11:46 - to guess what this is gonna do just
11:49 - think about it if I add something called
11:50 - key equals Len you might be kind of
11:52 - confused but think at what this might
11:53 - give us so I'm gonna run the function
11:55 - and you can see now it actually gives us
11:57 - a list not sorted alphabetically but
12:00 - sorted by length so we go shortest to
12:03 - longest and again say you wanted it to
12:06 - go longest to shortest then you could
12:09 - just reverse this list using the
12:11 - reversed function and you would get that
12:13 - sorted list in the opposite order okay
12:16 - so now the last one that I'm gonna show
12:19 - you is this cool thing that you can do
12:21 - in IDL you might have seen me use it
12:23 - once so pretty much when we're ever
12:24 - running something on the console I want
12:26 - to save some time we don't keep using
12:28 - copy and paste if you put your cursor on
12:31 - any line in here so for example I'm
12:33 - gonna go print and just before right
12:36 - after the arrows and then you just click
12:38 - enter it's actually gonna copy whatever
12:41 - was on that line so after your cursor on
12:43 - to the next like the next running line
12:46 - in the editor which is really useful if
12:51 - you're trying to run the same thing over
12:52 - and over and test a program or just
12:54 - change like the argument so you don't
12:55 - have to keep typing it or copying and
12:56 - pasting and another thing that you can
12:59 - do is you could do something and this is
13:01 - kind of goes with that is if I just
13:03 - click
13:03 - underscore like this it's going to
13:06 - actually give me the last output here so
13:09 - let's do a better example I do a equals
13:11 - F and I'd do it hey gives me F like that
13:16 - right now if I just type an underscore
13:17 - and hit enter it gives me the last
13:19 - output that I got from my from my
13:22 - console here from my like ID le whatever
13:26 - you're running so again if I do
13:27 - something like B equals four nice type b
13:30 - and i do an underscore it's just gonna
13:32 - print simply what we just last have i
13:36 - don't know why that's useful but it's
13:37 - something that's cool
13:38 - I didn't say all these tricks were super
13:40 - useful but that's just another cool one
13:43 - that you can use like that so anyways
13:45 - that has been it for part one of this
13:48 - tips and tricks video in Python and the
13:50 - next one I'm gonna go over some more
13:51 - advanced tips and maybe some more useful
13:53 - tips these ones are kind of like the
13:55 - generic ones the cool ones people
13:57 - typically learn when they first start
13:58 - out in Python the next ones I'm going to
14:00 - be using collection types and these ones
14:02 - are seriously gonna save you a lot of
14:03 - time so make sure you look out for that
14:05 - video if you're more advanced with
14:07 - Python and you already knew some of
14:08 - these tricks anyways I hope you guys
14:10 - enjoyed the video if you did please make
14:12 - sure you leave a like and subscribe and
14:14 - I will see you again in another one
14:16 - [Music]