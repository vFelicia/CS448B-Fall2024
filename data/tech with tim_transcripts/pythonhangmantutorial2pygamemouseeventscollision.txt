00:02 - [Music]
00:06 - hello everybody and welcome back to part
00:09 - 2 of our hangman pygame tutorial now in
00:12 - this video what we're gonna be doing is
00:14 - really focusing on what I've kind of
00:15 - drawn right here which is these buttons
00:18 - so essentially a core concept of this
00:20 - game is gonna be to be able to press on
00:22 - these buttons which will have a bunch of
00:24 - letters on them so like ABC so on and
00:26 - then have this letter disappear when you
00:28 - press on it and have that letter if it
00:30 - exists in the word show up up here right
00:33 - so if I press a then if the word start
00:35 - with a it would show up here if it
00:36 - contained a it would pop up those A's
00:38 - everywhere in the word that is what we
00:41 - are trying to do and that's what this
00:42 - tutorial is gonna aim to kind of do is
00:44 - figure out first of all how do we draw
00:46 - all of these buttons how can we click on
00:48 - these buttons how do we make these
00:50 - buttons disappear and reappear and that
00:52 - is a fairly challenging thing but I hope
00:55 - you guys are up for and I'm gonna be
00:56 - explaining as best as I can all of the
00:58 - somewhat complicated math that we need
01:00 - to do to be able to handle all that so
01:02 - I'm just rying to get rid of that square
01:03 - there so the first thing we need to do
01:05 - before we can handle any of the logic
01:07 - here is actually drawing these buttons
01:09 - now when I make games I like to make
01:11 - sure everything is nice and center and
01:12 - what I want to make sure everything is
01:14 - perfect and essentially what I want is
01:16 - there to be equal distance between the
01:18 - button on the far left and the button on
01:20 - the far right in other words the set of
01:22 - buttons if you looked at them as one
01:24 - rectangle would be perfectly Center
01:26 - horizontally in the screen so how do I
01:29 - actually go about doing them well I'm
01:32 - gonna explain very quickly here how we
01:34 - do that a few other things we need to
01:36 - consider about drawing buttons and
01:37 - circles and all of that and then of
01:39 - course we'll get into all of the code so
01:40 - let me go to a red pen here and the
01:43 - first thing that we need to point out is
01:45 - a bunch of variables that we have access
01:47 - to so the first thing that we know is
01:49 - the width of the screen now remember the
01:52 - goal here is gonna be to draw all of
01:55 - these buttons perfectly center somewhere
01:57 - horizontally on the screen now what I'm
02:00 - gonna do to draw the buttons isn't me to
02:01 - use a for loop and I'm gonna start by
02:04 - drawing the very first button and then
02:07 - I'm just gonna add a certain distance at
02:09 - a certain distance keep adding a certain
02:11 - distance and drawing all of the buttons
02:14 - until I get to my second row of buttons
02:15 - where I'll keep drawing all the other
02:17 - ones so the problem right now that we
02:19 - really need to determine is first of all
02:21 - how many buttons are we drawing and
02:23 - where do we start drawing the buttons
02:25 - from because I'm gonna use a for loop to
02:27 - draw these buttons so I'm gonna start at
02:28 - some position and from that position I'm
02:31 - gonna continue to add numbers till I get
02:33 - to the end of the row
02:34 - then I'll move down to the next row
02:36 - which coincidentally will start at the
02:38 - same position that this one started at
02:40 - right and then we will continue the
02:41 - process that's what we need to do so
02:44 - what we actually know right now is we're
02:46 - gonna have 26 total buttons and of those
02:49 - 13 are gonna be in each realm so we're
02:50 - gonna have two rows that's the way that
02:52 - I want to do it make as many rows as you
02:54 - guys want but I'm gonna go with two rows
02:55 - 13 buttons in each row so what we now
03:00 - what we now know is that if we have 13
03:02 - in each row we're gonna have to fit 13
03:03 - of these in there's gonna be a space
03:05 - between each of these buttons right so
03:07 - it's gonna be some kind of gap that
03:08 - separates them the button themself is
03:11 - gonna be a certain width it's gonna have
03:13 - a certain diameter and there's gonna be
03:15 - 13 of them so using those numbers we
03:17 - have to determine essentially this
03:19 - position right here where do we want to
03:21 - start drawing these buttons from so I'm
03:24 - actually just gonna write the equation
03:26 - for you and then hopefully I can explain
03:28 - it really quickly and we'll actually be
03:29 - on and ready to start coding so the
03:31 - equation we're gonna use to do this and
03:33 - I'm just gonna write all of it out first
03:34 - is width - and then what we're gonna do
03:39 - is we're going to say gap plus radius
03:45 - multiplied by 2 and we're gonna multiply
03:48 - our sorry take this entire thing and
03:51 - divide that by 2 and actually let's go
03:55 - back here I forgot one very important
03:57 - part of this equation
03:58 - oops I do make small mistakes apologies
04:01 - here guys this whole thing times 13
04:04 - divided by 2 that makes a lot more sense
04:06 - so what I'm doing is I'm taking the
04:09 - width and I'm subtracting we can make
04:11 - this even more clear this whole equation
04:13 - here so I'm subtracting the gap plus
04:15 - radius times 2 times 13 now what this
04:19 - value is right here is essentially the
04:21 - distance between two buttons because
04:24 - when we start drawing a button in PI
04:26 - gamers circle we
04:27 - starting from the center so the distance
04:31 - between the two centers will be the
04:32 - radius times two right because that is
04:35 - the diameter that's the width of one
04:36 - button plus the gap
04:38 - so whatever gap we want in between the
04:40 - buttons will be here and the radius will
04:43 - span right to where that gap starts so
04:45 - that is actually the distance between
04:47 - any two buttons will be this so we
04:49 - multiply that by 13 why because we have
04:51 - 13 buttons so we want to figure out the
04:53 - total distance between all of these
04:55 - buttons that's that's essentially what
04:56 - we're trying to do when we do that then
04:58 - we take the width and we do and we minus
05:01 - that from this whole equation so we're
05:04 - taking this whole length right here and
05:06 - we're taking the width and we're
05:09 - subtracting it so what we're gonna get
05:10 - is we're gonna get a part here and we're
05:12 - gonna get a part here so whatever those
05:14 - are that'll be some together then we
05:16 - divide that whole thing by 2 and what
05:18 - that does is essentially give us one of
05:21 - these parts which is the start of where
05:23 - we want to start drawing the buttons and
05:25 - that is the basic way to explain this
05:27 - that's how we actually do this that's
05:29 - how we get that distance so I'm not
05:30 - gonna spend too much more time on this
05:32 - you're welcome to watch this back if you
05:33 - want to see how this works but that's
05:34 - the basics of figuring out how we
05:36 - actually start drawing these buttons and
05:37 - the center of it and then this next part
05:39 - hopefully this will explain this further
05:41 - I will note that this is a little
05:43 - finicky sometimes I I might not have
05:45 - done this a hundred percent correctly
05:46 - but this will pretty well perfectly
05:49 - Center the buttons and if you want to
05:50 - use another way that's totally fine of
05:52 - course there's lots of different math we
05:53 - can use to determine where to start
05:55 - drawing these from so don't worry if
05:57 - that was a little bit over your head but
05:58 - now we're gonna start actually coding it
06:00 - out and worst case you don't totally
06:02 - understand try messing with the numbers
06:04 - and seeing what actually happens when
06:06 - you change things around but I am just
06:08 - gonna go through the math that we did
06:09 - over there and just start kind of
06:11 - discussing how we actually use those
06:13 - numbers that we figured out again there
06:15 - might be a simpler way to do this this
06:16 - is the way that I came up with so if you
06:18 - do know a simpler way please do let me
06:19 - know in the comments the first thing
06:21 - that I'm gonna do is actually just make
06:22 - a what do you call it's another comment
06:25 - up here and I'm gonna say button VARs
06:28 - just for variables I could actually we
06:30 - could type variables so button variables
06:32 - I'm gonna say radius equals and then in
06:35 - this case I'm gonna put a radius of 20
06:37 - and I'm also going to define a gap
06:39 - science the gap size I want to
06:41 - uses 15 so we do want a gap and we do
06:44 - want 15 for to be that gap and then
06:46 - radius of 20 now down here and actually
06:49 - know what we can do it right up here
06:50 - with the button variables we don't need
06:52 - to go any lower I'm gonna go ahead and
06:53 - say buttons or actually letters sorry is
06:56 - equal to an empty list and this is where
06:58 - I'm gonna store all of the buttons that
07:00 - I'm about to create and then what I'm
07:02 - gonna do is have a start axe and a start
07:05 - Y variable that I'm gonna have to set up
07:08 - here so start X we talked about how to
07:09 - calculate that I want to figure out
07:11 - where we're gonna start the x position
07:13 - so to do that we're simply going to say
07:17 - and this is a little bit complicated
07:19 - round the width minus and then in here
07:25 - we're going to say radius times 2 plus
07:30 - gap like that multiplied by 13 and then
07:35 - we're gonna take this entire thing and
07:37 - we're going to divide that by 2 so
07:40 - essentially what we discussed the width
07:42 - of the screen which we already have that
07:43 - variable 4 minus the radius times 2 plus
07:46 - gap all of this will be multiplied by 13
07:48 - so we'll subtract the width from that
07:50 - and then we'll divide that by 2 for the
07:52 - start why we're just gonna pick a
07:54 - constant value of 400 this is because we
07:56 - don't want it to be perfectly centered
07:58 - we just want to start at some Y position
08:00 - the X is a lot more important than the
08:01 - whines all right next we're gonna make a
08:04 - for loop or we're going to say for I in
08:05 - range we're gonna put 26 inside of here
08:08 - and I'm gonna say x equals and y equals
08:10 - what we're gonna do in this for loop is
08:13 - determine the x position and y position
08:15 - for each bud so essentially we're gonna
08:18 - start with button 0 we're gonna figure
08:20 - out XY where we should draw that and
08:22 - then after we do that I'm gonna explain
08:24 - how we can actually implement letters
08:26 - and draw those on to the buttons or like
08:28 - make the buttons with letters so we're
08:31 - gonna say x equals now bear with me here
08:34 - because this is a little bit complicated
08:35 - start x+
08:37 - and we're actually gonna say gap times 2
08:41 - plus radius I believe that's right sorry
08:45 - yeah plus radius but this needs to have
08:47 - a set of brackets around it and we're
08:50 - going to put times 2 here plus gap
08:54 - and then multiply this entire thing by
08:57 - mod 13 now I know this is fairly
09:01 - confusing and in fact actually let me
09:03 - just put another set of brackets here
09:04 - just to make it a little bit more clear
09:06 - but let me talk about what's going on
09:08 - here so essentially each loop we have
09:10 - this counter variable I that tells us
09:12 - what button were on now first of all
09:14 - what does I'm on 13 - well I'm mod 13
09:17 - gives us the remainder of I after
09:21 - dividing by 13 so if I is 13 then I'm on
09:25 - 13 is 0 because they evenly divide
09:27 - there's no remainder if I is 1 then the
09:30 - remainder is 1 if I is 2 the remainder
09:33 - is 2 right if I is 15 the remainder is 2
09:36 - so essentially what this is trying to do
09:38 - for us is simulate like having two rows
09:41 - since I have I mod 13 this means that up
09:44 - until 13 I will just count normally and
09:47 - this can just be treated like it's I and
09:49 - as soon as we hit 13 it'll start
09:51 - recounting again starting at 0 going up
09:53 - to 13 that is kind of the goal of
09:56 - putting I'm on 13 now the reason I'm
09:59 - multiplying this by radius times 2 plus
10:00 - gap is because that's the distance
10:02 - between each new button that's strong
10:04 - right I have radius times 2 plus gaps so
10:07 - if you do radius times 2 that is the
10:09 - buttons would be right beside each other
10:10 - if you place them like that and then you
10:12 - add the gap and now that's how much
10:14 - distance between the last button so
10:16 - that's why we have that and then the
10:19 - reason I've added gap times 2 is just so
10:22 - that this offsets a little bit from
10:24 - where it would have started so that
10:25 - there's actually a gap between the right
10:29 - hand side of the screen and the left
10:30 - hand side of the screen so this seems
10:32 - like a weird thing to implement but
10:33 - essentially we need to do gap times 2
10:35 - just so that we stay a little bit offset
10:37 - from the edge of the screen that's what
10:40 - we're trying to do with this gap times 2
10:42 - you can try to remove it and you'll see
10:44 - what happens when you remove that now
10:46 - for why this one's a lot easier we're
10:48 - gonna say start why and we're simply
10:50 - going to multiply this by and we're
10:52 - gonna go I integer division 13 and then
10:56 - actually do we need to we can do + but
10:59 - we'll just do multiply because it
11:01 - doesn't matter here actually sorry let's
11:03 - let's do a plus sign my bad on that
11:05 - we're gonna do start X plus and then
11:07 - inside of the
11:08 - brackets i integer division 13 which
11:11 - I'll talk about in a second x and then
11:14 - inside of here we're gonna say gap plus
11:18 - radius times two so that's what we want
11:22 - here
11:23 - so essentially what integer division
11:24 - says is that whatever the actual
11:27 - division is excluding the decimal point
11:31 - is the answer to this so if we had three
11:33 - integer division thirteen the answer is
11:35 - zero because three does not go into
11:37 - thirteen evenly right if we had 13
11:40 - divided by 13 or integer divided by 13
11:43 - the answer would be 1 if we had 14
11:45 - integer divided by 13 the answer will be
11:47 - 1 because we're not taking any remainder
11:50 - we're not taking any decimal point we're
11:51 - just taking the whole number division
11:52 - that's what that says okay so once we
11:55 - have that now we have the XY position
11:57 - and what we're gonna do is we're gonna
11:59 - say letters dot append and we're
12:02 - actually gonna put in a another list
12:04 - like this XY so essentially we're gonna
12:08 - make a bunch of pairs why do I keep
12:09 - typing a period XY we're gonna put a
12:12 - punch a bunch of pairs of XY values into
12:15 - this list so this list at the end will
12:17 - look something like this right like 25
12:19 - 30 right and then it'll have another set
12:22 - and it'll go like 40 55 or whatever
12:25 - something like that okay it'll have a
12:27 - bunch of pairs inside of that list so
12:30 - that's what we're doing and then we're
12:31 - gonna take all of those pairs and draw
12:32 - them to the screen in fact we're gonna
12:34 - do that now so I can show you how to
12:36 - draw some circles and then we'll
12:37 - actually put the text onto those buttons
12:39 - which will be a little more complicated
12:41 - again so what I'm actually gonna do is
12:43 - because we're gonna be doing a lot of
12:45 - drawing stuff I want to do that in one
12:47 - separate area and I actually want to do
12:49 - that inside of a function so what I'm
12:50 - gonna do is I'm going to define a
12:52 - function I'm gonna call this draw the
12:54 - wave function works if you haven't seen
12:56 - it before is essentially you just make
12:59 - something you put a name you put a set
13:02 - of brackets like this and then to
13:04 - actually call this function you write
13:06 - the name of the function and another set
13:07 - of brackets what this does is it will
13:09 - execute all of the code that's inside of
13:12 - this function so for example if I said
13:14 - print X like that and then I go ahead
13:17 - and I write draw like this then we will
13:20 - go ahead and we will
13:21 - print sorry not Acts let's just say
13:23 - print five we'll print five and I can
13:25 - call draw as many times as I want and
13:28 - every time I call it no matter where I
13:30 - am in the program it will immediately
13:31 - jump to where this function is and do
13:33 - whatever is inside of it that's the very
13:35 - basics of functions I don't want to
13:37 - explain too much more so inside of here
13:40 - what I'm gonna do is take all of the
13:42 - drawing stuff I've been doing and put it
13:44 - in here so I'm gonna take these three
13:46 - lines here which are bleeding things to
13:49 - the screen and actually drawing
13:50 - something right I'm gonna take those and
13:52 - I'm put them inside this function now
13:54 - all I have to do is replace them with
13:57 - the word draw and what this will do is
13:59 - call this loop and every single time it
14:03 - will run this so every time that we hit
14:05 - this draw function so every loop we will
14:07 - run whatever code is in here and just
14:09 - draw it so it's just kind of a
14:10 - substitution alright so inside of here I
14:13 - want to draw my buttons so I'm gonna add
14:16 - a comment I'm gonna say draw buttons
14:19 - like this then what I'm gonna do is I'm
14:22 - gonna say four and we'll just say letter
14:24 - in letters now I know this seems like a
14:28 - weird name but we'll see why we're gonna
14:29 - do that in a second and what we'll do is
14:31 - we'll say XY equals letter now this
14:35 - seems strange but what this will do is
14:36 - since all of these are pairs like all of
14:38 - the letters inside of our letters list
14:41 - our pairs we can split them up into the
14:44 - two components the x and y value by
14:46 - saying X comma y equals letter
14:48 - so if letter looks like 4 5 then X would
14:52 - be 4 and Y would be 5 that's the way
14:54 - that we can do that
14:55 - so what's known as unpacking or just
14:57 - splitting up the variables so we're
14:58 - gonna do that and then we're gonna say
15:00 - is pygame dot draw like that dot circle
15:05 - and inside of here we're gonna put where
15:06 - we want to draw it so we want to draw it
15:08 - on the window and then we're gonna put
15:10 - the color that we want to draw so I'm
15:12 - actually going to go up here to where we
15:13 - had our colors and we're gonna define a
15:15 - new color which is going to be black and
15:17 - black is going to be 0 0 0 like that and
15:20 - then what we're gonna do is we're gonna
15:22 - draw this with black so we're just gonna
15:24 - put black there so win we're gonna draw
15:26 - it with the color block we're gonna draw
15:28 - it where we're gonna draw it at X Y so
15:30 - that's the center of the button where we
15:33 - want to draw the button that's the
15:34 - center of the button
15:35 - then what we're gonna do is we're gonna
15:36 - draw it with a radius and finally a
15:39 - width for the width of the actual button
15:43 - so how thick is that line that's
15:44 - outlining the button and I'm gonna make
15:46 - that three pixels so we're saying pygame
15:48 - draw circle draw it on the window draw
15:51 - it colorblock
15:51 - this is the center where I want to draw
15:54 - the button so when we draw a circle we
15:55 - draw it from the center not the top left
15:57 - this is the radius I want from my circle
16:00 - and I want it to be three thick so now
16:03 - let's actually go ahead and run the game
16:05 - and see what we're getting because we're
16:07 - pretty much done drawing the buttons
16:09 - except for adding the letters onto them
16:10 - so let's give this a second here to boot
16:12 - up and let's hope that we didn't crash
16:15 - anything which we may have very well
16:16 - done and would you look at that
16:18 - perfectly we have all these buttons
16:20 - showing up and they are perfectly
16:22 - centered and in fact I think we have
16:23 - enough so one two three four yep looks
16:27 - like we have 13 in each row all right so
16:30 - what we're gonna do now is actually draw
16:32 - text on the buttons so to do that is a
16:35 - little bit more difficult and the first
16:37 - thing that we need to do is we need to
16:39 - go to letters here and we need to modify
16:41 - this a little bit so rather than just
16:43 - storing a pair that has our XY I
16:46 - actually want to store a triplet that
16:49 - has XY and the letter that should be
16:52 - drawn on the button so that way when we
16:54 - press a button or we look at a button or
16:56 - whatever it may be
16:57 - we actually know what letter we're
16:59 - talking about that's the idea we need
17:01 - all these XY positions to coordinate
17:03 - with some kind of letter we're gonna
17:04 - draw that letter on the button and when
17:06 - we click those buttons we'll do
17:07 - something right and we'll try to guess
17:10 - that letter okay so to do this is
17:13 - actually pretty straightforward I'm
17:14 - gonna make a variable called a and I'm
17:16 - gonna make this equal to 65 now the
17:18 - reason I'm doing that is because in
17:21 - programming or in computing every single
17:24 - letter every single character on your
17:25 - keyboard is actually defined by a number
17:28 - and it just so happens that the
17:30 - uppercase a is defined by the number 65
17:33 - which means every time you add from
17:35 - there you go to the next letter so B
17:37 - would be defined as 66 so hopefully you
17:41 - understand what I'm about to do here
17:42 - since I have a equals 65 every loop I'm
17:46 - gonna add I to
17:48 - a-and that's gonna tell me what letter I
17:50 - should draw on this button because if I
17:52 - is - well then I'm on my third button
17:54 - because we go 0 1 2 so I add 2 to 65 I'm
17:58 - at 67 right and then I would get I
18:01 - believe C right that would be the letter
18:04 - again so let's redefine sorry I equals
18:05 - 65 and what I'm gonna do now is I'm
18:08 - gonna go right inside of this pair and
18:10 - I'm gonna say a I'm actually gonna say
18:12 - CHR sorry of a plus I now what this says
18:17 - is I'm gonna take the character
18:19 - representation of the number 65 plus
18:23 - whatever is so it's gonna take that
18:26 - number and it's gonna convert that
18:27 - number into the character that it
18:29 - actually is so that's how that works and
18:31 - now what we can do is go inside of our
18:34 - draw buttons loop and well we can start
18:37 - drawing this text on the buttons now to
18:40 - draw text in pygame what we need to do
18:42 - is create a font so I'm gonna go up here
18:45 - and I'm actually gonna make a new
18:46 - section I'm gonna call this fonts like
18:49 - this so fonts and then in here I'm gonna
18:52 - go ahead and I'm gonna make it font and
18:54 - I'm gonna say letter underscore font
18:56 - equals PI game dot font dot sys font
19:03 - like that and inside of here you can
19:06 - choose any font you want and the size
19:07 - that you want the font to be now what is
19:09 - the problem here PI game font sys font I
19:13 - think this is correct
19:14 - it is okay and for my font I'm gonna go
19:16 - with Comic Sans that's what I always
19:19 - pick from my font and for the size I'm
19:21 - gonna go with let's say 40 but we can
19:23 - always change this size after so
19:25 - essentially we're setting up a font by
19:27 - going PI game font sys font we're gonna
19:29 - store it in the variable letter font
19:31 - this is what the font will be and this
19:33 - is what the size of the font is so you
19:34 - can pick whatever you want here so long
19:36 - as it's a valid font I there is a way to
19:38 - look up all the pygeum fonts I don't
19:40 - remember how to do that but you're
19:42 - welcome to obviously mess and change
19:44 - this font around Comic Sans is just the
19:46 - easiest one for me to remember so that's
19:47 - why I always use it alright so now that
19:49 - we have that lets go to our drawing
19:51 - buttons and inside of our drawing
19:54 - buttons now what I need to do is
19:55 - actually draw the letter so instead of
19:57 - just having x comma y equals letter here
20:00 - because now letter is going to look
20:02 - something like this right it'll be X Y
20:04 - and it will actually have a letter
20:06 - because we're gonna have three things in
20:07 - our I guess we can't call it a para
20:09 - anymore in our triplet so we need to
20:12 - actually strip that out as well so we're
20:13 - gonna say X Y and then LTR which stands
20:16 - for letter is equal to letter so now we
20:20 - actually have the character that we want
20:23 - to draw so to actually draw that on the
20:25 - screen it's not super easy but I will
20:28 - explain to you how to do this we are
20:30 - going to first of all render this text
20:33 - so using the font we need to render the
20:35 - text that we want to draw on the button
20:37 - so I'm gonna say text equals and in this
20:40 - case it's letter font dot render you put
20:44 - the text you want to render which in
20:45 - this case is just that letter right then
20:47 - you put one which stands for
20:49 - anti-aliasing letter one and you put the
20:52 - color that you want to render it with so
20:53 - in this case I'm gonna put black and you
20:55 - can see it's showing me that suggestion
20:56 - here but that is what we need to do to
20:59 - render the fonts or text equals letter
21:01 - font dot render what we want to render
21:03 - the anti-aliasing which I always just
21:05 - put us one and then the color that you
21:07 - want to render it with now to draw this
21:10 - we're gonna say win dot blitz
21:12 - so we've seen wind up lip before and
21:14 - then inside of here we're gonna put what
21:16 - we want to render we actually want to
21:18 - render the text or sorry we want to draw
21:19 - the text and where we want to draw so we
21:23 - could draw it an X Y and in fact let me
21:25 - draw it at X Y and let me show you what
21:27 - happens when I draw the text at the same
21:30 - location as the buttons so let's run
21:32 - this and let's have a look here alright
21:35 - and we can see that these letters are
21:37 - not really where we want them to be
21:39 - right they are kind of hanging on the
21:42 - bottom right hand corner of all of our
21:43 - circles now why did that happen well the
21:46 - middle of each button is the X Y
21:48 - position right so when I draw at X Y
21:51 - what I'm really doing is starting to
21:54 - draw my my text in the middle of the
21:57 - button which means I'm starting at the
21:58 - top left of my text because that's how
22:00 - we draw anything that's kind of square
22:02 - which in this case is gonna be our text
22:04 - and it draws this way right because we
22:06 - just go the width that way and the
22:08 - height down we don't draw it actually
22:10 - right in the middle because we're
22:11 - starting to draw from the top left of
22:13 - all of this text so what I need to
22:16 - do if I want to draw this text in the
22:17 - middle of the button is use a little bit
22:20 - more math always fun to use lots of math
22:22 - so to do this is actually quite I don't
22:25 - want to say quite straightforward but we
22:26 - just say X minus so inside of here for
22:29 - our location we're gonna say X minus
22:31 - text dot get underscore width now get
22:35 - underscore width
22:36 - tells us how wide this image or this
22:39 - surface that we've just created by
22:41 - rendering this text actually is so it'll
22:44 - give us some number and we're gonna
22:45 - divide that by two
22:46 - now why we're gonna do the same thing so
22:48 - y minus tax not get underscore height so
22:53 - not width divided by two now the reason
22:55 - this works is because you have to
22:57 - imagine that where we want to draw these
22:59 - buttons right is right in the middle so
23:02 - to be able to draw them right in the
23:03 - middle we need to figure out where the
23:04 - middle is which we actually know it's X
23:06 - Y and then we need to kind of go
23:08 - backwards a little bit from the middle
23:10 - so backwards and up so that when we
23:12 - start drawing from the top left-hand
23:14 - corner of our object it actually draws
23:17 - the entire object in the middle we're
23:19 - essentially trying to find the position
23:20 - of the top left hand corner of our of
23:24 - our text right that's what we're trying
23:26 - to do so by divining the width of our
23:29 - text by two that's gonna tell us where
23:31 - the middle of the text would be and then
23:34 - we can just subtract that value and that
23:36 - should draw a perfectly so let's go
23:38 - ahead and run this and have a look here
23:40 - and see what we get
23:43 - and perfect there we go all of our
23:45 - letters are now pretty well perfectly
23:47 - drawn inside of our circles so you have
23:49 - ABCDE you know you get the point they're
23:52 - all drawn and they look pretty good so
23:54 - that is pretty much it for actually
23:55 - drawing all this stuff related to our
23:57 - letters and related to our buttons again
24:00 - I know this is complicated but since we
24:01 - want it to be perfect and we want it
24:03 - right in the center we do need to apply
24:04 - a little bit of logic and a little bit
24:06 - of math so now that we've drawn the
24:08 - button everything is showing pretty
24:09 - perfectly what we need to do next is
24:11 - actually check for collision with each
24:13 - of these buttons now unfortunately there
24:15 - is well there actually is a PI game
24:17 - collision check and kind of module I
24:19 - don't want to get into that so we're
24:20 - just gonna do this manually but since
24:22 - we're using circular buttons it's
24:24 - actually really easy to check for
24:25 - collision all we have to do is check if
24:28 - our mouse
24:29 - is less than the radius distance away
24:31 - from any of the center of the buttons
24:34 - because if the center of the button is
24:35 - here all I have to do is see if the
24:37 - distance of my mouse is further than the
24:39 - radius and if it is it's not inside the
24:41 - button but if it is if it's closer than
24:44 - the radius or equal to the radius then
24:45 - it must be inside that button because
24:47 - that is just how math works right that
24:49 - radius pretty much draws a line which
24:51 - creates that entire circle and if we're
24:53 - within that radius distance from the
24:55 - center of any button we've pressed that
24:57 - button so inside of the event here PI
24:59 - game mouse button down I'm gonna check
25:01 - every single button and see so yeah for
25:06 - every single button what I'm going to do
25:08 - saria's see if we've hit it so I'm gonna
25:09 - check if the mouse has hit that button
25:12 - so what we're gonna do is first of all
25:14 - I'm gonna change this to say M
25:16 - underscore X M underscore Y so
25:20 - essentially every time we press the
25:21 - mouse button down we're gonna get the
25:23 - x-coordinate and y-coordinate of the
25:25 - mouse then we're gonna say for letter in
25:29 - letters like this and now all I'm gonna
25:32 - do is find the distance between the
25:34 - position of the letter so the position
25:37 - of the center of this button which is
25:38 - gonna be X Y LT R equals a letter and we
25:42 - did this before so XY l TR equals letter
25:45 - now I'm gonna find the distance between
25:47 - the XY here and this XY now I'm gonna
25:50 - put that in a variable called dis which
25:52 - stands for distance and the way to do
25:55 - this is actually pretty straightforward
25:56 - we're gonna say math dot sq RT which
25:59 - means we have to go up to the very top
26:00 - of our program and import the math
26:03 - module so we'll do that right there
26:05 - we're gonna say the square root of the
26:08 - sum of the difference of the x
26:10 - coordinates and the Y coordinates sounds
26:12 - confusing it's really not what we can do
26:14 - is pick any coordinate we want so I'm
26:15 - going to say X minus M underscore X I'm
26:19 - gonna put that all in brackets so let me
26:21 - do another bracket here what is going on
26:24 - all my brackets are messed up okay so
26:26 - let's do a bracket there bracket here if
26:29 - I can type properly apparently not and
26:31 - then we're going to do two asterisks
26:33 - because that's an exponent and we're
26:34 - going to plus that with the Y minus M
26:38 - underscore Y to the exponent two
26:41 - now the reason it doesn't matter if we
26:44 - pick X or M X to the mouse position X
26:46 - the the actual position X of the button
26:49 - is because when we do this exponent both
26:52 - these values are gonna be positive right
26:54 - so we're essentially gonna add the
26:55 - distance from the X at the distance for
26:57 - the Y and take the square root and if
26:59 - you guys are familiar with I believe
27:00 - it's I don't know how you say this but
27:02 - it's like Pythagorean theorem I can't
27:04 - pronounce that whatsoever but you know
27:05 - what I'm talking about the thing with
27:06 - the triangle where you get the
27:07 - hypotenuse that's essentially what this
27:09 - is doing to determine the distance
27:11 - between two points so anyways that's
27:13 - what we're getting reading the distance
27:14 - between the mouse position and the
27:16 - position of the center of the button and
27:18 - then we'll say if the distance is less
27:21 - than the radius then we press that
27:24 - button so let's just print out for now
27:26 - the letter that we press so we can see
27:27 - if this is working so that's all we need
27:30 - to do for collision there's a few more
27:31 - things we're gonna check after but this
27:33 - will tell us hopefully if we've pressed
27:35 - the right button so let me rerun this PI
27:37 - game window and let's check it out and
27:38 - see if it's working all right so let me
27:40 - press the button and notice it says B T
27:43 - this says n o P looks to be working if I
27:47 - press right in the corner here that's
27:49 - not working I have to press right on the
27:50 - button and then it tells me what I
27:51 - pressed awesome so that's good that's
27:54 - functioning next thing I want to do is
27:57 - make it so the buttons disappear when I
27:58 - press on them to do this is a little bit
28:01 - more difficult not that much more
28:03 - difficult but what it's going to involve
28:04 - is adding one more thing to our letters
28:07 - list here so right now we're storing a
28:10 - bunch of pairs we're storing like you
28:12 - know 34 56 we're storing a letter so
28:16 - like a string a that would be a capital
28:19 - though and then that's all we're storing
28:21 - right so we're storing a bunch of these
28:22 - inside of this letters list a bunch of
28:25 - triplets that have the X Y so that's for
28:27 - the center of the button and then the
28:28 - letter what I want to do now is actually
28:31 - store one more thing with all of them
28:32 - that's a boolean value so I'm gonna go
28:34 - here and we're gonna start this boolean
28:36 - value as true now what this value is
28:39 - gonna tell us is whether the button is
28:40 - visible or invisible so essentially has
28:43 - it been clicked or have we not clicked
28:44 - it yet so all I'm gonna do to do this is
28:47 - go in to where I'm saying a letters dot
28:49 - append and simply add a field here and
28:51 - put true and now what this means is that
28:54 - we're gonna store four things
28:55 - in every single well now I can't call
28:57 - the pair but every single thing we're
28:59 - adding into letters right and that means
29:02 - we can check if we go down here to our
29:05 - draw loop if our button is visible so we
29:08 - add one more variable here because now
29:09 - we're gonna unpack for items rather than
29:11 - three and I'm just gonna check if
29:13 - visible before I draw anything so
29:17 - essentially that last value is telling
29:19 - us is the button visible is it invisible
29:21 - and we're gonna set that to be false so
29:23 - we're gonna change that value when we
29:25 - press down on the button so here we're
29:28 - only drawing the button if it's visible
29:29 - by default all of them start visible
29:31 - because we start by having that value be
29:33 - true and now when we check for collision
29:36 - what we get to say again is first of all
29:38 - okay so let's say X Y letter we need to
29:40 - make visible here now because there's
29:42 - one more variable we need to check for
29:43 - and we'll say if visible so essentially
29:46 - don't check for collision unless this
29:48 - button is visible there's no point in
29:50 - seeing if we hit it if we don't even see
29:51 - the button right and then if we actually
29:53 - have this happen so we actually collided
29:56 - with the button rather than just
29:57 - printing it let's actually set this
29:59 - visible to be false so let's say a
30:01 - letter 3 equals false the reason I can't
30:06 - just say visible equals false has to do
30:09 - with the way python works with lists and
30:11 - because what we're actually doing when
30:13 - we say X Y letter visible is we're
30:15 - taking all the values from here and just
30:17 - copying them into these variables I
30:19 - don't want to modify a copy of this
30:21 - variable I want to modify the actual
30:23 - variable so what I have to do is say
30:26 - letter 3 equals false and letter 3 is
30:29 - gonna be where that true value is held
30:31 - because remember we have 4 items right
30:33 - we have like 4 whatever does be a string
30:36 - here like a and then we would have true
30:38 - so what we're doing is we're saying
30:40 - letter 3 which would be where this true
30:41 - is and set that to false so now that
30:44 - letter doesn't show up anymore that's
30:46 - what this line is doing so let me show
30:48 - you what happens now when I go ahead and
30:49 - run this let's have a look and let's see
30:53 - okay so Y when I press it immediately
30:55 - that button disappears so that is how
30:58 - this works and that is the button
31:00 - collision button disappearing and pretty
31:02 - much everything we need to do for the
31:03 - buttons so with that that is pretty much
31:06 - it for this tutorial
31:08 - in the next video of course we're
31:09 - get into actually handling the word
31:11 - we're gonna get into displaying that
31:12 - text on the screen if you want if you
31:15 - lost all the other things that we need
31:16 - to make this game complete but this was
31:18 - definitely the hardest part doing all
31:20 - the collision doing all the math getting
31:22 - everything Center and now it's pretty
31:24 - much smooth sailing into the last video
31:26 - where we add all the kind of finishing
31:27 - touches and last functionality so with
31:29 - that being said if you enjoyed make sure
31:30 - you leave a like subscribe and I will
31:32 - see you in another YouTube video