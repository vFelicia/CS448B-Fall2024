00:02 - [Music]
00:06 - hello everybody and welcome back
00:08 - so in this golang tutorial what we're
00:10 - gonna be doing is talking about how to
00:12 - get user input and convert that input
00:14 - into numeric types so essentially this
00:16 - is gonna teach you how to convert a
00:17 - string to an integer where number or
00:19 - float or whatever it is you want as well
00:21 - as how to actually get input from the
00:23 - user from the console so if I go down
00:25 - here you can see that ideally what we're
00:27 - gonna want to have is something like
00:28 - type blank and then we're actually gonna
00:30 - let the user type in we want to take
00:32 - what they typed and do something with
00:33 - that and the example we're gonna go
00:35 - through here is asking the user to type
00:36 - in what year they were born in and then
00:38 - hopefully being able to tell them how
00:40 - old they're gonna be at the end of this
00:42 - year so as of December 31st 2020 that's
00:45 - when this tutorial is well 20 20 is when
00:47 - this is being made
00:48 - December 31st is obviously need last day
00:50 - so we're gonna tell them how old they
00:51 - will be at the end of this year so let's
00:54 - actually go ahead and get started with
00:55 - that problem so the first thing I'm
00:57 - going to do is actually import a few
00:58 - modules that we're going to need to use
00:59 - so to import multiple modules we are
01:02 - going to actually put the brackets like
01:04 - this outside of the import statement hit
01:06 - enter and then just type a list of all
01:08 - the modules underneath each other so FMT
01:11 - buf io we want OS and we're gonna use
01:15 - another one called STR on comps of
01:18 - string column sorry but we're not gonna
01:20 - use that right now so I'm going to leave
01:21 - that commented out now in case I forgot
01:23 - what this comment means is pretty much
01:26 - don't read this line it says we don't
01:28 - want to delete this line we just want it
01:29 - here so don't read it just leave it in
01:31 - oftentimes you'll see that people will
01:33 - leave comments that are descriptive
01:35 - that are kind of saying like what a few
01:36 - lines of code are doing or maybe you'll
01:38 - see something like this where it's kind
01:40 - of a line of code they want to keep
01:41 - there but they don't actually want
01:42 - delete so they just tell the program hey
01:44 - ignore this for now and then maybe later
01:45 - they remove those comments which is what
01:47 - we'll do so that's a comment two forward
01:49 - slashes it Gray's out the entire line
01:51 - anything I type on that line okay anyway
01:54 - so what's going to function and I'm
01:56 - gonna show you how we can actually get
01:57 - user input now this a little bit of a
01:59 - process but it's not that hard but what
02:01 - we need to do is gritty scanner object
02:02 - now my autocomplete is telling me pretty
02:05 - much what I'm gonna type but I'm gonna
02:07 - call this scanner and I'm gonna let this
02:09 - implicitly infer what the type is of
02:12 - what
02:12 - I type now so that's what this walrus
02:14 - operator does we talked about that in
02:16 - the last video and the type or what I'm
02:17 - gonna put here is actually gonna be buff
02:19 - IO dot new scanner with OS dot STD in
02:23 - now I know this is kind of a mouthful
02:25 - for a line and it looks looking a little
02:27 - bit confusing especially for some of you
02:28 - beginners but what this means is from
02:30 - the buff IO module which I believe is
02:32 - buffered input output could be wrong on
02:35 - that but I think that's what that stands
02:36 - for we're gonna make a new scanner
02:38 - object that is that has in here
02:41 - OS STD in so o s stands for operating
02:45 - system that's this module an STD in
02:47 - pretty much means like the input like
02:49 - the command line while we're typing in
02:51 - so that's how you set this up don't
02:53 - worry about it too much but this is how
02:54 - you make a scanner object which we'll
02:56 - need to use in just a second okay so now
02:59 - that we've created a scanner object if
03:00 - we actually want to scan what the user
03:02 - typed what we do is we say scanner dot
03:05 - scan with a capital ass like that this
03:08 - will scan the line and will actually
03:10 - store inside of this scanner object what
03:12 - the text is that was skinned so what we
03:15 - typed in now what we do if we want to
03:18 - actually store the value of what was
03:20 - scanned as we make a variable I'm gonna
03:21 - call it input and we set it equal to
03:23 - scanner dot text so you can see that we
03:26 - have scanner is equal to a scanner
03:28 - object we scan the line and then we
03:31 - store that in the variable input so that
03:33 - is pretty much the basics and now that
03:35 - we've done that all we have to do is
03:37 - print out what we typed in just to make
03:39 - sure that it was working so it's the FMT
03:41 - dot print F and we will say you typed
03:44 - colon percent Q comma input so pretty
03:49 - much no not input scanner just input
03:52 - what I want to do is let the user type
03:54 - something in then I just want to print
03:55 - out what they typed it so let's have a
03:57 - look at how this works let's go down
03:58 - here go run tutorial dot go let me start
04:02 - typing here so hello I type hello boom
04:06 - you typed hello so we can successfully
04:08 - grab the input from a line the way this
04:10 - works is as soon as you hit enter it
04:12 - will scan that line and then will start
04:14 - reading the next line so we wait on this
04:16 - line until you hit Enter and then we
04:18 - continue and we go down to here where we
04:20 - actually get the text and then we print
04:21 - it out pretty straightforward now the
04:23 - only thing is some
04:24 - I want to have a prompt before I type so
04:27 - I want to say ask a question so I want
04:29 - it to say like type your name colon and
04:31 - then they can add their name if I want
04:32 - to do something like that
04:33 - all I have to do is just print before I
04:35 - scan so I'll say fmt dot print F and
04:38 - here I'll say type something like that
04:41 - so : I'm gonna do a space just to make
04:44 - sure that when I start typing I'm one
04:46 - space away from the colon that I don't
04:48 - smush with the coin so I'll do that and
04:50 - now if I run here so go run tutorial dot
04:53 - go we get to type something let's say
04:55 - hello worlds and bye spell world
04:58 - correctly and you typed hello world so
05:01 - that is the basics that is how we scan
05:03 - and to get something in now the only
05:05 - thing is what I want to do is actually
05:06 - ask the user for the year that they were
05:08 - born so ideally what I'm gonna do is say
05:10 - what year were you born we're gonna
05:12 - subtract we're gonna take 20 20 year and
05:15 - then tell them how old they are so let's
05:17 - start with that problem so I'm gonna say
05:18 - type dates
05:22 - what is it type the year you were born
05:26 - I'm sure there's a better way so this
05:28 - may be your year your birth year or
05:29 - something like that but we'll just do
05:30 - that
05:31 - so type the year you were born we'll
05:33 - scan it in and then we'll print it out
05:35 - now the issue is though what type is
05:38 - what I'm passing in so what type is the
05:41 - stuff that I type in that's what I'm
05:43 - trying to ask is it a number is it
05:45 - whatever I type is it different does it
05:47 - change well the answer is actually that
05:49 - whatever we type in from the scanner
05:51 - here will automatically be stored as a
05:53 - string so even if I type in like 4.5
05:57 - which we know is a float floating-point
05:58 - number it actually gets interpreted as a
06:01 - string when we type it in or when the
06:04 - scanner grabs it so we need to actually
06:06 - convert whatever it is that we type in
06:09 - to a number before we can perform any
06:11 - arithmetic operations on it so before we
06:13 - can add subtract multiply and treat it
06:16 - as an int or a number before we can do
06:19 - that we need to convert the string into
06:20 - a number so let me just show you what I
06:22 - mean and what issue is gonna pop up so
06:24 - we say input equals scanner dot txt now
06:26 - what I'm actually gonna do is I'll say
06:28 - let's print you typed the digit of 20 20
06:33 - minus input and watch you say you are
06:36 - you will
06:38 - be percent the years old at the end of
06:45 - 2020 okay so that's my string and then
06:47 - the formatting is 20 20 minus input
06:49 - right I mean in theory this should work
06:51 - because it inputs a number and we type
06:53 - it in and say SATA type mm that's year I
06:55 - was born well this will tell me that you
06:57 - will be 20 years 20 years old at the end
06:59 - of 2020 or at least that's what we hope
07:01 - so let's just see what happens when I
07:02 - save this okay I save it and what are we
07:07 - getting so there's an error over here
07:08 - and this says cannot convert 20/20 type
07:10 - untyped number to type string so input
07:13 - this variable here is actually a string
07:15 - which means we need to convert it which
07:17 - is what I've been saying so that's just
07:18 - the proof I wanted to show you that here
07:20 - so how do we go ahead and actually
07:22 - convert this well what I do is I use
07:25 - this string comm that I've brought in so
07:27 - I'm gonna take away these what is it's
07:30 - two slashes here to the comment and I'm
07:32 - gonna change input to be string kampf
07:35 - dot and in this case we're actually
07:38 - gonna say parse and notice that a few
07:41 - options pop up so parsefloat purse bewl
07:43 - purse into purse UN's we're gonna parse
07:46 - in int of scanner dot txt like that what
07:51 - this is gonna do it means add a little
07:52 - bit more to this but ideally what this
07:54 - is gonna do is it's gonna take whatever
07:56 - is in here which will be the text that
07:58 - we scanned that we typed in and it will
08:00 - convert it to an integer that is of base
08:03 - 10 and size 64 so what we need to do
08:07 - when we create this string dot parse int
08:09 - is we need to pass the text that we want
08:11 - to parse notice I'm passing scanner text
08:13 - but I could very easily pass 10 like
08:16 - this so that string we need to pass the
08:18 - base
08:19 - so is this octal binary hexadecimal or
08:21 - decimal in this case it's decimal which
08:23 - is base 10 and then we pass the size of
08:26 - the integer we want to store which is 64
08:28 - so I'm gonna go back to the the string
08:30 - comp here so scanner text and now let's
08:33 - see if we get any errors when I save
08:35 - this so we look at this I'll give it a
08:36 - second to load and what is the issue
08:38 - here so parseint interprets a string s
08:42 - in a given base 0 to 60 third and bit
08:44 - size 0 64 and returns a corresponding
08:46 - value I so this looks to me like this
08:49 - should work but apparently
08:51 - is not mismatched one variable returns
08:54 - to values okay so what I actually need
08:56 - to do here sorry is put an underscore
08:57 - now what this is gonna do if I save and
09:00 - sorry the same tax is confusing so
09:02 - sometimes I don't want to introduce if I
09:04 - don't have to you but what this is gonna
09:06 - do is say if for some reason we can't
09:08 - take this text and convert it into this
09:11 - input we're gonna actually raise an
09:13 - error and it will store that right here
09:16 - where I put this underscore but since I
09:18 - actually don't really care about the
09:19 - error I'm just gonna put an underscore
09:21 - which says pretty much ignore it so if
09:23 - this doesn't work just to kind of ignore
09:26 - that and move on that's what that's
09:27 - saying for now we'll talk more about the
09:29 - syntax later on but the idea is that
09:31 - this returns an error if this doesn't
09:33 - work so if I don't type a number and it
09:35 - tries to parse a number and it can't do
09:37 - it it will return an error that error
09:39 - would usually go to the variable I put
09:41 - right here so input comma whatever the
09:43 - variable is but since I don't care about
09:45 - it I'm putting an underscore okay so let
09:46 - me run this now and let's see if we can
09:48 - actually get this to work
09:49 - so go around tutorial dot go and let me
09:52 - type so I was born in the year 2000
09:54 - which means you will be twenty years old
09:56 - at the end of 2020 so that does indeed
09:59 - work and that should actually work for
10:01 - any year that we type in so let's run
10:02 - this one more time let's just do like in
10:04 - 1960 or something so in 1960 you'll be
10:07 - sixty years old at the end of 2020
10:09 - it's around this once more and let's try
10:11 - not a number so let me try it below well
10:14 - at the end of this year you will be
10:15 - twenty twenty years old so that's
10:18 - because what happens is when there's an
10:20 - error and it cannot parse a number it
10:21 - can't find one this input string will be
10:23 - empty and that means 20 20 - nothing so
10:26 - - zero right is 20 20 so that's what
10:29 - it's printing out but yeah that is
10:30 - pretty much been the tutorial I showed
10:32 - you how to get user input how to convert
10:34 - a string to text that's what this line
10:37 - is doing right here and then how we can
10:39 - format that in print that out so
10:41 - hopefully you guys enjoyed it if you did
10:42 - make sure you leave a like subscribe and
10:44 - I will see you in the next goal aang
10:45 - tutorial