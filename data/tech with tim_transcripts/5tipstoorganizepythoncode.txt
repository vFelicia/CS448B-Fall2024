00:00 - in this video i will share with you five
00:02 - tips to better organize your python code
00:04 - these are not going to be life-changing
00:06 - they're not going to have to do with
00:07 - software design and software
00:09 - architecture there are simple things
00:11 - that you can implement that make your
00:12 - code much more readable and easier to
00:15 - navigate with that said let's get into
00:17 - tip number one
00:21 - [Music]
00:26 - alright so my tip number one is to use
00:29 - modules and packages now a module is an
00:32 - individual python file a package is a
00:34 - directory containing multiple python
00:37 - modules this is the best way to organize
00:39 - your python code whenever you're working
00:41 - on a relatively large project you
00:43 - definitely want to utilize both of these
00:45 - things right now i will give you a quick
00:47 - two-minute tutorial on how they work if
00:49 - you want to learn more and learn more
00:51 - about software design in particular then
00:53 - check out my course programming expert
00:55 - dot io i'll leave a link to it in the
00:56 - description you can use discount code
00:58 - tim if you are interested regardless
01:00 - let's have a look at this so here you
01:02 - can see that i have this physics package
01:04 - and what makes it a package is the fact
01:06 - that i have this init.pi file inside of
01:09 - it so whenever you want to make a
01:10 - package you do a directory you put some
01:12 - python modules whatever you want you
01:14 - don't have to have any but if you want
01:15 - some and then you put an underscore
01:17 - underscore in knit underscore underscore
01:20 - dot pi now this is a special file and
01:22 - i'll talk about how it works in a second
01:24 - but this is what makes this folder here
01:26 - a package okay
01:28 - so now that i've done that from main.pi
01:31 - i can come here and say import and then
01:33 - just import the name of the directory
01:35 - itself
01:36 - now notice when i run the code here
01:38 - there's no error i'm able to import this
01:40 - successfully and let's have a look at
01:41 - something cool here when i go inside of
01:43 - init.pi
01:45 - and i run the code or i have print hello
01:47 - world now when i come to main.pi
01:50 - and i run this notice hello world prints
01:52 - out now i didn't print anything from
01:54 - here i just imported the physics package
01:56 - and what happens is whatever's inside of
01:58 - init.pi that's going to run exactly one
02:02 - time the first time that this package is
02:04 - imported so from my main file i import
02:07 - the package and then whatever is inside
02:09 - of here runs exactly once now the power
02:12 - of this is that you can do some
02:13 - initialization code inside of your
02:15 - package you also can import things from
02:17 - a nit.pi which then allows main.pi to
02:21 - import them without knowing what's
02:23 - inside of the package so you'll see what
02:24 - i mean here but i have this class let's
02:27 - actually go with forces okay so i have
02:28 - this forces class
02:30 - so what i can do is go to init dot pi
02:32 - and i can say something like from
02:35 - dot and then forces import
02:38 - and then forces okay
02:40 - we'll continue to print hello world and
02:42 - now what this allows me to do is from
02:44 - main dot pi i can now say from
02:46 - physics
02:47 - import and i can import forces and the
02:50 - reason i can do that is because we've
02:52 - imported here now if i remove this line
02:54 - so let's actually remove it and try when
02:57 - i run this notice it says forces is not
02:59 - in the module fit or not on the package
03:01 - physics sorry can't find it
03:03 - let's clear that let's go back here
03:05 - let's re-import that now let's run and
03:07 - notice it prints out hello world but now
03:10 - i can also use forces if i want so i
03:11 - could say forces like this
03:14 - and when i initialize it it just prints
03:15 - something out so let's initialize it
03:17 - let's run and then i get hello world and
03:20 - forces so that is really the power of
03:21 - modules and packages you can put
03:23 - packages inside of other packages and
03:26 - what i was doing here in a net.pi is
03:28 - something called a relative import where
03:30 - i am importing from the current package
03:32 - that's what the single dot means the uh
03:34 - the forces file and then from the forces
03:37 - file i'm importing the forces class
03:39 - anyways that is tip number one use
03:41 - modules and packages don't be afraid to
03:43 - separate your code out if you have one
03:45 - large file containing multiple classes
03:47 - multiple functions all kinds of stuff
03:49 - that doesn't make sense to be in one
03:50 - place separate into multiple modules
03:53 - separate it into multiple packages and
03:55 - then write the appropriate import
03:56 - statements to bring everything into the
03:58 - file that you need alright so tip number
04:00 - two may be slightly controversial so let
04:02 - me know in the comments if you disagree
04:04 - with me of course there's exceptions to
04:05 - everything that i'm saying here and this
04:07 - is going to be to place a single class
04:09 - in a single file again there may be some
04:12 - exceptions some people may say do not do
04:14 - this but for me when i'm writing
04:16 - primarily object oriented style code in
04:19 - python i like to place each of my
04:21 - classes in an individual file so in this
04:24 - case i have an angular momentum class
04:25 - obviously it's a very simple example
04:27 - just for the video and i've placed it in
04:29 - a file called angular underscore
04:31 - momentum now another thing to note here
04:33 - when you're naming files in python the
04:35 - convention is to do snake case so snake
04:38 - case with all lowercase letters you
04:39 - should not have any capitals in there
04:41 - and if you want to have a space do an
04:43 - underscore but when you're naming a
04:44 - class you want to have this in pascal
04:46 - case so pascal case means capital on the
04:49 - first word capital on all the other
04:51 - words no spaces and no underscores so it
04:54 - looks a little bit weird because this is
04:55 - different than the file name but that's
04:57 - the convention in python that's what you
04:58 - are supposed to do according to pep 8.
05:01 - anyways that is what i'm saying for this
05:02 - tip place each class in an individual
05:04 - file i find this makes your code very
05:06 - organized very easy to find the
05:08 - different classes and if you need to use
05:10 - a class from another class then just
05:12 - import all right that is tip number two
05:15 - alright so for tip number three which is
05:17 - to group related functionality together
05:20 - i'm here on my organization's github
05:22 - page i'll leave it in the description if
05:23 - you want to contribute to open source
05:25 - projects then please check this out all
05:27 - of the stuff here is done by volunteers
05:29 - i have not written a single line of code
05:31 - and this is all organized and
05:32 - facilitated through my discord server
05:34 - discord.gdg
05:36 - twt i'll leave a link to the description
05:38 - we have like 33 000 members so please
05:40 - join that if you want to be a part of
05:42 - this and you can also ask some of the
05:43 - people who have set these repositories
05:44 - up hey how did you structure the code if
05:46 - you're curious about that anyways i'm
05:48 - going to go to this api directory here i
05:51 - don't know what a lot of this stuff is
05:52 - because again i've not written any of
05:54 - this code it's all volunteers but i'm
05:55 - just going to show you how they've kind
05:56 - of structured the different repositories
05:59 - and you'll see how easy it is to
06:00 - navigate everything and how someone like
06:02 - me who again has really never looked at
06:04 - this before can easily figure out where
06:06 - all of the different code is so the tip
06:08 - was as a reminder group related
06:10 - functionality together so immediately
06:12 - when i'm looking here i see a bunch of
06:14 - random files these files are fine to
06:15 - just be in the main directory because
06:17 - they're all kind of unrelated and since
06:19 - all these things are unrelated they'll
06:21 - all be in the same place so we're
06:22 - grouping the unrelated things together
06:24 - which you know in turn groups related
06:26 - things together uh anyways that we have
06:28 - utils tests docs and then api so
06:31 - immediately we have four packages or
06:33 - four directories that are separating out
06:35 - the main things that we have in our
06:37 - application so when i go to utils i see
06:39 - that i get some utilities notice i have
06:41 - my init dot pi inside of here we're
06:43 - importing a few things and saying all is
06:46 - equal to this another python convention
06:47 - i won't really talk about that
06:49 - then if i come here to test i have a
06:51 - bunch of different tests i have my test
06:52 - utilities so the utilities for the tests
06:55 - are in a separate uh i guess you could
06:58 - call this a package although it doesn't
07:00 - have the init.pi file but that's fine
07:01 - you can still kind of call it a package
07:03 - continuing we have our docs
07:05 - okay documentation here so we have an md
07:07 - file markdown file for how you actually
07:10 - run some of the different things here
07:12 - going back we have api inside of api we
07:14 - have models we have services we have
07:16 - versions if i go to services we have the
07:18 - different services if i go to versions
07:20 - we have a version v1 okay so this is
07:23 - where i'm getting at it's not super
07:24 - complicated there's not a ton of stuff
07:26 - that you have to do just think logically
07:28 - about what stuff makes sense to be
07:30 - together and put it together in this
07:32 - case they thought we had api
07:34 - documentation tests and utils that was
07:36 - the main group of stuff okay all the
07:38 - stuff related to that goes inside of the
07:39 - package if there's more specific stuff
07:41 - within say the api within the docs we
07:43 - make a new package or folder for that
07:45 - and we are good to go alright so my next
07:48 - tip is a quick one and this is to place
07:50 - all of your utilities in a single place
07:53 - so either a single file or a single
07:56 - package now there's a lot of times when
07:57 - you're writing kind of helper functions
07:59 - or functions that don't belong in a
08:01 - certain class or belong in a certain
08:03 - file and you don't really know where to
08:05 - put them for example maybe you want to
08:06 - convert a date from the date time object
08:09 - to a string or maybe you want to you
08:12 - know figure out the distance between two
08:13 - points whatever there's some random kind
08:15 - of helper functions that again aren't
08:17 - easily classified into a class or a file
08:20 - or some part that already exists in your
08:22 - application if that's the case what you
08:24 - want to do is create a utility package
08:26 - or a utility module if you only have say
08:28 - three or four functions that you're
08:30 - using and dump them all into there
08:32 - like i was saying before when you have
08:34 - stuff that's not related together all of
08:37 - the stuff that's not related you should
08:39 - put in one place because what relates it
08:41 - is the fact that it's not related to
08:42 - something else i know that's a little
08:44 - bit backwards but i just want to show
08:45 - you here in this code base they have the
08:47 - utils package right and inside of utils
08:50 - we have things related to permissions
08:52 - these are going to be used in multiple
08:53 - places they don't make sense to be
08:54 - anywhere other than the permissions file
08:57 - right same thing with response we have
08:59 - stuff related to the response we have a
09:00 - json response class
09:03 - time.pi okay this is doing stuff with
09:05 - time snowflake time whatever i don't
09:07 - know exactly what's going on but the
09:08 - point is the way they've named this and
09:10 - organized it it's very easy for me to go
09:12 - in and see where the utilities are being
09:14 - used and that way they're not clogging
09:16 - up different files and if i want to add
09:18 - something or change something i can do
09:19 - it all in one place in the utils package
09:22 - or utils file that was it for that tip
09:24 - let's move on to number five all right
09:26 - so my last tip for you here is to
09:28 - organize your import statements now i
09:31 - don't know if they've done it exactly
09:32 - the way i'm going to recommend in this
09:33 - code base but i can already see that
09:35 - they have this being done decently and
09:37 - this becomes very important when you
09:39 - have a ton of different imports and a
09:41 - large project so you'll see a lot of
09:43 - python files where you have like 20
09:44 - imports 30 imports in this case we have
09:46 - 11 imports and it's just really nice and
09:49 - easy when you actually organize and sort
09:51 - the imports so you can go in whatever
09:53 - style you want so long as you're
09:55 - consistent across your project what i
09:57 - like to do is import all of my
09:58 - third-party libraries first which is
10:01 - actually what they've done here so
10:02 - they're using fast api so they take all
10:04 - their stuff from fast api then from fake
10:07 - readies then from aio http then from
10:09 - logging although logging is actually a
10:11 - built-in module in python so i wouldn't
10:14 - put that exactly with all of this
10:16 - anyways i like to go third party imports
10:18 - then i like to go built in imports so
10:20 - something like os json logging stuff
10:23 - that you don't have to install that's
10:24 - built into python then i like to go with
10:26 - my local files or my relative imports
10:29 - so in this case these are all local
10:30 - files that they've coded themselves
10:32 - utils.response
10:34 - api config and then lastly i like to
10:37 - alphabetically order my imports although
10:39 - that can be a little bit challenging
10:41 - sometimes because you have to ask how
10:43 - are you doing it alphabetically are you
10:44 - doing it by the name of the package for
10:46 - example or the name of the module are
10:47 - you doing it by what you're importing so
10:49 - that one's not as important anyways this
10:51 - just makes it really easy to quickly go
10:53 - in locate the different things that
10:54 - you're importing see if you need to
10:56 - change something and know what block
10:58 - you're going to add a future import to
11:01 - so again they haven't done exactly like
11:02 - i would do it but this is pretty good
11:04 - they have all of their third parties
11:05 - then they have their built-ins i would
11:07 - put this one line down just to have
11:09 - third parties built in and then i have
11:11 - all of my local imports or relative
11:13 - imports so just to continue to test
11:15 - these guys and see if they've been
11:16 - consistent here let's go into another
11:18 - file
11:19 - and okay so here i already noticed a few
11:21 - inconsistencies so these are local files
11:24 - then we have another local file then we
11:26 - have our built-in which is typing
11:29 - then we have our third-party module then
11:31 - we have a local file then we have
11:32 - another local file now maybe they've
11:33 - organized it in this way for some reason
11:35 - that i'm not familiar with or that i
11:37 - just don't understand because again i
11:38 - don't write this code this is not my
11:40 - code base to maintain but what i would
11:42 - have done is swapped it around so it was
11:44 - in the order i said third party built-in
11:46 - and then your local files however again
11:49 - there's always exceptions and you can
11:50 - always make debates this is not a strict
11:52 - rule these are just tips that for me i
11:54 - find helpful and well hopefully they
11:56 - helped you with that said i will wrap up
11:58 - the video here if you guys enjoyed make
12:00 - sure to leave a like subscribe to the
12:01 - channel check out programming expert if
12:03 - you want to learn more about this topic
12:04 - and i will see you in another youtube
12:06 - video
12:09 - [Music]
12:15 - you