00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video i'm
00:12 - gonna be discussing five ways that you
00:14 - can get better at programming and
00:16 - writing code now obviously there's many
00:19 - more than five different ways that you
00:20 - can use to get better at programming and
00:22 - writing code but these methods here are
00:24 - things that work for me and things that
00:26 - allow me to write better cleaner more
00:28 - scalable and easier to understand code
00:31 - which is a really big deal especially if
00:33 - you're working for a company or you're
00:34 - working on some type of team where other
00:36 - people are going to be looking at your
00:37 - code and your code is going to
00:39 - potentially live in a code base for a
00:41 - very long time so with that being said
00:43 - let's get into the video after a quick
00:45 - word from our sponsor before we get
00:47 - started i need to thank the sponsor of
00:48 - this video which is alco expert algo
00:51 - expert is the best platform to use for
00:53 - preparing for your software engineering
00:54 - coding interviews and has the highest
00:56 - quality coding interview practice
00:58 - questions with 155 practice questions
01:01 - detailed solutions in nine of the most
01:03 - popular programming languages a
01:05 - feature-packed browser-based coding
01:07 - environment extensive test suites and
01:09 - conceptual overviews and code
01:11 - walkthroughs for each and every problem
01:13 - algo expert is the best resource to use
01:15 - to ace your coding interviews algo
01:17 - expert also has a data structures crash
01:19 - course coding interview assessments and
01:21 - a mock interviews feature i can highly
01:23 - recommend algo expert as a former
01:25 - customer myself and now an official
01:27 - instructor on the platform get started
01:29 - using algo expert today by clicking the
01:31 - link in the description and using the
01:33 - code tech with tim for a discount on the
01:35 - platform alright so let's go ahead and
01:37 - dive in the first way i have for you to
01:39 - write better code is to read other
01:42 - people's code now this is extremely
01:44 - important especially if you're working
01:46 - in some type of organization or you're
01:48 - working in a team of developers on some
01:49 - type of code base but reading other
01:51 - people's code helps you a ton in terms
01:54 - of writing better code and understanding
01:56 - kind of different ways of going about
01:58 - doing things speaking from personal
01:59 - experience here when i worked at
02:01 - microsoft as an intern one of the ways i
02:03 - actually learned how to properly write
02:06 - code within the code base i was working
02:07 - with was spending a few days just going
02:09 - through the code base and just reading
02:11 - it just trying to understand what was
02:13 - going on and then every single time one
02:15 - of my teammates would put a pull request
02:16 - up so they would try to add some code to
02:18 - the repository i would read through it
02:20 - thoroughly try to understand it and try
02:22 - to see the way in which they were doing
02:24 - things so that i could kind of match
02:25 - that or on the other side of things i
02:28 - could see what they were doing that i
02:29 - didn't understand and kind of some
02:31 - counter-intuitive logic that they were
02:33 - using and then make sure that when i put
02:36 - up a pull request i don't fall into
02:37 - those same kind of flaws now you guys
02:39 - will probably realize this but whenever
02:40 - you read someone else's code the first
02:42 - thing you probably do is come up with a
02:43 - ton of criticism for it you say oh you
02:45 - should have done it this way oh this is
02:47 - wrong oh i don't like this logic oh
02:48 - there's a better method oh this doesn't
02:50 - look very clean that's kind of what your
02:52 - mind immediately goes to because you
02:53 - have your own style of program so what
02:55 - you can do is take all of that criticism
02:57 - that you're applying to someone else's
02:58 - code that you're reading and try to
03:00 - reapply that to yours in the perspective
03:02 - of someone else reading your code to
03:04 - write good code someone else has to be
03:06 - able to understand it if you're doing
03:08 - this in the context of some team some
03:10 - project some organization so the last
03:12 - thing i'll say here because i'm sure
03:13 - some of you will ask me this is how do
03:15 - you actually go about reading other
03:16 - people's code especially if you're not
03:17 - working for a company if you're not
03:19 - involved in some team project well what
03:21 - you can do is go to github you can read
03:23 - my code you can read random repositories
03:26 - code you can go look at open source code
03:28 - you can find unlimited code on the
03:30 - internet to go and read it's just up to
03:32 - you what it is that you want to read and
03:33 - obviously you're going to want to pick
03:34 - something that you're somewhat familiar
03:36 - with so that it's not a huge hassle to
03:38 - try to understand everything but this is
03:40 - really important and this will help you
03:41 - a ton just reading through other
03:43 - people's code and understanding the way
03:44 - in which they have done things alright
03:46 - so the second way i have you to get
03:48 - better at programming is something that
03:50 - i say on this channel constantly and i
03:51 - apologize if you guys have heard it a
03:53 - ton of times and you're getting tired of
03:55 - it but this is to work on projects
03:58 - working on projects in my opinion is
04:00 - probably the best way that you can get
04:02 - better at programming especially if you
04:04 - work on projects that you do not already
04:06 - know how to build a lot of people that
04:08 - work on projects will pick something
04:10 - that they've built a hundred times
04:11 - they'll go build a clone of something or
04:13 - they'll build something that they're
04:14 - very very familiar with and comfortable
04:15 - with what you should do is pick a
04:17 - project that is challenging something
04:18 - that's outside of your comfort zone
04:20 - something that you have no idea how to
04:22 - accomplish and then as you work on this
04:24 - project you'll go and look things up
04:26 - you'll watch a few videos and
04:27 - immediately
04:28 - you'll take that knowledge and actually
04:29 - be able to apply that into your code and
04:32 - see if you're understanding it and learn
04:34 - a ton the way that i got better at
04:35 - programming when i was young was just
04:37 - picking a ton of projects i had no idea
04:39 - how to do and just trying to build them
04:41 - now yeah it took me a really long time
04:43 - to get through these projects but after
04:45 - you know the three weeks of coding this
04:46 - out and building a little application i
04:48 - had learned a ton because i needed to
04:50 - learn that to work on this project so
04:52 - there's not really much more to go
04:53 - through on this but working on projects
04:55 - is just a really really great way to get
04:57 - better at programming and if you're not
04:58 - doing it i highly recommend that you do
05:01 - all right so the third way i have for
05:02 - you to get better at programming is to
05:05 - understand data structures and
05:06 - algorithms and time complexity analysis
05:09 - now i know you guys are already upset at
05:11 - me you're going to say well i don't need
05:12 - to know how to implement a binary search
05:13 - tree or i've never had to write a linked
05:15 - list or whatever that's not the reason
05:17 - i'm telling you to learn this i'm not
05:19 - telling you to learn data structures and
05:20 - algorithms because i think you're going
05:22 - to go and implement these data
05:23 - structures and write complex sorting
05:25 - algorithms all the time that's not all
05:26 - the reason behind this point the reason
05:28 - behind this point is that by
05:29 - understanding these very fundamental
05:31 - computer science theoretical concepts
05:34 - you are able to have some intuition on
05:37 - what is going on behind the scenes in
05:40 - the programming language that you use so
05:42 - i'll give you an example of what i mean
05:43 - here but in programming languages let's
05:45 - go with python for example you have a
05:47 - bunch of methods and functions that you
05:49 - can use that help you to speed up your
05:50 - development time right you have maybe
05:52 - functions uh like sort or search or find
05:56 - or count or whatever length you can go
05:58 - through and you can come up with a bunch
05:59 - of examples all of these functions or
06:02 - these methods have some code behind them
06:05 - that's actually performing these
06:06 - operations they're not just these magic
06:08 - methods that can just figure this stuff
06:10 - out they actually need to do something
06:12 - they have some code that makes up that
06:14 - method or function and it's helpful to
06:16 - know how fast that code is going to be
06:19 - relatively what that code is doing so
06:22 - that you understand if the method that
06:24 - you're going to use makes sense in the
06:25 - context of your program now i'll give
06:27 - you an example here when i was younger i
06:29 - didn't know data structures and
06:30 - algorithms i didn't know time complexity
06:32 - analysis i didn't know how slow or fast
06:34 - different methods were and i look back
06:36 - at some of my code now and i realized
06:38 - that a lot of times i was using all of
06:39 - these fancy methods and tools because
06:41 - you know i thought they were interesting
06:42 - and i thought they were going to make my
06:44 - program simpler and easier to write
06:46 - but they actually made it extremely
06:48 - inefficient and i have a lot of code
06:50 - even some on this channel that's running
06:52 - you know 200 or 300 times slower than it
06:54 - needs to be simply because i didn't
06:56 - understand some of these very
06:57 - fundamental and core concepts and if i
06:59 - did i would have known that these
07:01 - methods were not the right thing to use
07:03 - in this specific situation so really the
07:05 - whole point behind this point right here
07:08 - is that by understanding these concepts
07:10 - you can understand what's going on in
07:12 - these methods functions and very helpful
07:14 - tools in programming languages and know
07:17 - if they make sense to use or not so the
07:19 - next way i have you to get better at
07:21 - programming is to learn design and
07:24 - architecture now this is kind of you're
07:26 - getting out of the beginner stages maybe
07:27 - in the intermediate starting to get into
07:29 - advanced stages of programming where
07:31 - you're getting much better the next step
07:33 - to really make yourself just a good
07:35 - programmer is to learn about design
07:38 - patterns and architecture and what i
07:40 - mean by that is thinking about a system
07:42 - like a program a system whatever as a
07:44 - whole rather than just thinking about it
07:47 - on the individual parts a lot of times
07:49 - when you start writing code you write
07:50 - very small programs right maybe
07:51 - something that's 50 lines 100 lines of
07:53 - code maybe even something that's a
07:54 - thousand lines of code that would still
07:55 - be considered a small program and in
07:58 - those programs it doesn't really matter
08:00 - the way that you do things a lot of
08:01 - times it's totally fine to kind of go
08:03 - with you know like a half-assed way or
08:05 - to not really organize your code very
08:07 - well or not structure things super
08:09 - importantly you can kind of go in and
08:11 - tweak things if they're wrong and it's
08:12 - not a big deal but as soon as you get
08:14 - into a very large code base you know
08:15 - you're talking tens of thousands of
08:17 - lines of code you really need to
08:19 - understand the way in which these
08:20 - different pieces of code are going to
08:22 - work together and the way that you're
08:24 - going to structure your program such
08:26 - that you're not going to have to go back
08:27 - and rewrite 10 000 lines of code such
08:30 - that your program or your system is
08:32 - going to scale if you have more users
08:33 - you need to add something to it and so
08:35 - this is kind of like as you're getting
08:37 - better at programming you need to learn
08:39 - these things so that you can actually
08:41 - work on large systems and get out of the
08:43 - very hobby projects and realize how to
08:45 - work on yeah just large systems and real
08:48 - code that you're actually going to see
08:49 - in a production environment so there's
08:51 - not really much more i can discuss there
08:53 - learning these things is not super
08:55 - simple there's not a ton of great
08:56 - resources online for them although i am
08:58 - planning on potentially making some in
08:59 - the future but it is just really
09:01 - important to understand how to kind of
09:02 - design a system you know even something
09:03 - simple like uml diagrams class diagrams
09:06 - system diagrams etc those are things
09:08 - that you probably want to know and that
09:10 - are very very helpful to learn all right
09:11 - so i'm going to share with you my last
09:13 - way to get better at programming but
09:15 - before i do that i'm going to share with
09:16 - you kind of a quote line sentence
09:18 - whatever you want to call it it really
09:20 - helps kind of emphasize this point and
09:22 - will help you remember it now i'm
09:23 - definitely misquoting this from someone
09:25 - so if you know the original statement or
09:26 - quote please do let me know but it goes
09:28 - something along the lines of the
09:30 - simplest things are the most difficult
09:32 - to come up with or to create
09:34 - now at first glance or first thought
09:36 - that seems contradictive
09:38 - you think of that and you say how can
09:39 - something simple be complicated to
09:42 - create and to answer that question i'm
09:44 - going to ask you to look at something
09:45 - like your smartphone right you look at
09:47 - your smartphone your smartphone is
09:49 - extremely complicated piece of
09:50 - technology the way that it actually
09:52 - works is extremely advanced it uses
09:55 - physics it uses math uses computer
09:56 - science uses chemistry uses a ton of
09:58 - different things so many different
10:00 - components yet you pick it up and you
10:03 - can use it with ease i can program an
10:05 - application for it fairly easily it is
10:08 - something that's very very intuitive for
10:10 - someone to use and that's one of the
10:11 - reasons specifically we're talking about
10:13 - iphone here a lot of people like to use
10:15 - these phones just because they are so
10:17 - simple at a core when it comes to what
10:19 - you're actually doing on this product
10:21 - now that is extremely hard to make it's
10:24 - a lot easier for me to make a very
10:26 - unintuitive complicated and feature-rich
10:28 - phone than it is for me to duplicate
10:30 - something like the iphone that has
10:32 - everything so streamlined simple and
10:34 - intuitive right that's kind of what i'm
10:36 - talking about here now of course it's a
10:38 - little bit different when you get into
10:39 - code but the same kind of factors apply
10:42 - it is a lot harder to write extremely
10:45 - readable clean easy to understand and
10:48 - most of all simple code than it is to
10:50 - write complicated and difficult to
10:52 - understand code go and look at some of
10:54 - your code and look at some of the
10:55 - methods and things that you've done in
10:57 - there you probably have some super
10:59 - complicated things that if you came back
11:00 - to in a year you would not be able to
11:02 - understand now you may feel like you
11:04 - know expert genius whatever for coming
11:06 - up with this super complicated logic but
11:09 - really if you had come up with something
11:11 - simple that would have been an advantage
11:12 - to everyone especially yourself if
11:14 - you're going to be looking at this in
11:15 - the future so i'm having a hard time
11:16 - really drilling into this point here but
11:18 - all i'm trying to get at is that it's
11:20 - really hard to write simple code and
11:23 - simple code is the best code because
11:25 - it's easy to debug it's easy to read
11:27 - it's easy for other people to understand
11:29 - and it will live in the code base for a
11:31 - long time and i know a lot of kind of
11:33 - junior engineers or beginner programmers
11:35 - myself included kind of fall in this
11:37 - trap of wanting to make things look
11:38 - super complicated and tricky and complex
11:41 - because we think it makes us look smart
11:43 - but really that's doing no one any
11:45 - advantage whatsoever and it would be a
11:47 - lot better if you could write the
11:48 - simplest most boring code possible and
11:51 - kind of ship that into a production
11:53 - environment or have that be your code
11:55 - because anyone can understand that and
11:57 - all the other reasons that i've kind of
11:58 - stated so again the simplest things are
12:01 - the hardest to create that applies to a
12:03 - lot of things in life in general if you
12:05 - guys want to elaborate on that in the
12:06 - comments i'd love to hear your kind of
12:08 - thoughts on that statement right there
12:09 - with that said i think i'm going to wrap
12:10 - up the video here so hopefully you guys
12:13 - enjoyed if you did make sure to leave a
12:14 - like subscribe to the channel and i will
12:16 - see you in another one
12:19 - [Music]