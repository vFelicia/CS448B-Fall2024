00:00 - hey guys and welcome back to another
00:01 - Java programming tutorial so in today's
00:03 - video we're going to be going over
00:05 - inheritance so this has to do with
00:06 - classes and this is going to be how we
00:08 - can inherit methods and attributes of
00:10 - previously made classes into like a new
00:13 - class and then override methods and all
00:15 - kinds of fun stuff this is really
00:17 - important this will save you a ton of
00:18 - time and yeah so let's get started
00:22 - so you can see here I have this sari
00:25 - this dog class that we created in the
00:26 - last video and pretty much the goal what
00:29 - I want to do at least in this video of
00:30 - the problem is I want to create a cat
00:33 - class that is identical to this dog
00:35 - class except in this speak method here
00:39 - instead of saying I am whatever I just
00:41 - wanted to say meow my name is whatever
00:43 - right so I just want to change one of
00:45 - these methods to do something different
00:46 - but other than that I want all of this
00:48 - to be the same so intuitively what we
00:51 - think we do is we'll be just take all
00:52 - this copy it put it into a new file
00:55 - called cat and then just change this to
00:57 - be what we want well we could do that
00:59 - and that'd be fine but when we have
01:01 - classes that are like thousands and
01:03 - thousands of lines long ideally we don't
01:06 - want to be repeating code and
01:07 - continually typing like the same thing a
01:09 - bunch of times right it also just makes
01:10 - it more difficult to read so what we're
01:12 - gonna do is we're going to use something
01:13 - called inheritance so I'm gonna create a
01:15 - new class I'm gonna go new class and in
01:18 - this case I'm gonna call mine cats
01:19 - alright and I'll just click finish like
01:22 - that and here we have public class cat
01:24 - now whenever we do this inheritance what
01:28 - we can actually do to inherit all of the
01:30 - properties all of the methods everything
01:32 - from this dog class is up here when we
01:35 - define the class we can type extends if
01:38 - we spell it correctly extends and then
01:40 - the class dog like this okay now what
01:44 - this is gonna do is it is gonna grab
01:46 - everything from dog class and apply it
01:48 - to cat class so this is known as our
01:51 - superclass because it's kind of above
01:52 - the cat class and then cat is known as
01:55 - our subclass so we have you can also
01:58 - call it a child class or a derived class
02:00 - and this could be also called a parent
02:01 - class all right and that's because it's
02:03 - kind of underneath it's getting
02:05 - everything from there but then it's
02:06 - gonna be changing a few things and maybe
02:07 - adding a few methods to it so typically
02:09 - you start off like the most abstract
02:11 - with
02:12 - a parent class and then your child
02:13 - classes are your derived classes or your
02:15 - subclasses because they're all the exact
02:17 - same thing just everyone likes use
02:18 - different words for them are gonna have
02:20 - some slight modifications to them and
02:21 - kind of work based off of that
02:23 - superclass right so or the parent class
02:26 - okay so what we need to do when we first
02:28 - do this as you can see here it already
02:30 - is telling us we need to use the
02:31 - constructor for dog so we're inheriting
02:33 - from dog but we need to use the same
02:35 - constructor otherwise all this stuff and
02:37 - all these attributes well they're not
02:39 - going to work unless we set up our class
02:41 - when we first created the same way as we
02:43 - did dog so what I'm gonna do is I'm
02:45 - actually just gonna click on this and
02:46 - you can see it automatically generates
02:48 - this constructor for us now I could have
02:50 - typed it out but this is a yeah this is
02:52 - what it's going to do so since in our
02:54 - dog class we get name and we get age we
02:57 - need to make sure that we have a
02:59 - constructor inside of our cat class that
03:01 - gets name and gets an age and we have to
03:03 - actually explicitly call our superclass
03:07 - constructor which is going to be the dog
03:09 - constructor using this formation or this
03:12 - syntax super and then we give it the
03:14 - name and we give it the H now this
03:16 - doesn't stop us from being able to type
03:18 - in other properties or other attributes
03:20 - so for example I could do something like
03:22 - int and I don't know food or something
03:25 - that's like how much food they should
03:26 - get this works perfectly fine and we can
03:29 - go ahead and we can create another a
03:30 - street here's they say private I don't
03:32 - know let's just say food okay and this
03:36 - should say int food and then int down
03:39 - here we can go ahead and we can just
03:41 - type this dot food equals food okay
03:44 - right and that works perfectly fine and
03:47 - now we're gonna have since we're
03:48 - inheriting from this we're gonna have
03:49 - age we're gonna have name and inside of
03:52 - this cat class we are gonna have food as
03:54 - well and that works just fine okay so
03:57 - just to know let's go over this again
04:00 - because they kind of gone through it
04:01 - pretty quickly but all of these methods
04:03 - here we're gonna be able to use within
04:06 - our cat class because well we're
04:08 - inheriting we're grabbing all of them
04:09 - from the dog class so this cat class
04:11 - when we first extend it and do nothing
04:13 - is identical to the dog class and then
04:15 - as soon as we start changing a few
04:17 - things in here it's going to become a
04:19 - little bit different but still use all
04:21 - this functionality so we still have the
04:23 - attribute age that
04:24 - we're setting them equal because we're
04:26 - gonna call this constructor method right
04:28 - from our what he call it's super right
04:31 - here so we call this constructor so we
04:33 - setup age and we setup name and then we
04:35 - have speak we have get age and we have
04:36 - set age now before I move any further
04:38 - let me just prove this to you so if I go
04:40 - to main here and I just create a cat
04:42 - object so I'll just a cat Tim equals
04:44 - blue cat and remember we have to give it
04:46 - three parameters or three arguments this
04:48 - time because that's what we typed in so
04:49 - for name you know obviously you Tim age
04:51 - will do 18 and food let's say they get a
04:53 - hundred I don't know grams of food or
04:55 - something whatever you want to Class A
04:56 - there okay now I can use these speak
04:58 - method on Tim so you see we're getting
05:02 - no errors here even though in my cat
05:05 - class there's no speak method but since
05:07 - there's one in dog and we inherit from
05:09 - it we can use it so I'll prove again to
05:11 - you run this I am Tim and I am 18 years
05:13 - old and that works perfectly fine so now
05:16 - remember I said though I want this speak
05:18 - method to do something else I want to
05:20 - change it so how can we do that within
05:21 - the cat class well the way to do this is
05:24 - to just rewrite the method in here
05:26 - because when we do that we're simply
05:28 - gonna overwrite whatever's in the dog
05:30 - class so the child class or the subclass
05:32 - whatever you want to call it whenever
05:33 - there's something the same in here it
05:35 - automatically is gonna override or
05:37 - overwrite whatever is in the dog class
05:39 - so I do public void speak okay so this
05:44 - is the exact same name as the other one
05:45 - alright and in here I change I do
05:48 - something right so I changed something
05:50 - so I'm just gonna say system dot out dot
05:53 - println and in here what did I want to
05:56 - say like meow and my name is let us say
06:02 - plus this dot name and you know it will
06:05 - even add like a little food thing and I
06:07 - get fed let's see here plus this dog
06:14 - food okay I don't know let's get enough
06:16 - for me what's the issue here change
06:18 - visibility of name to protect it uh okay
06:21 - one second I got to do something here
06:23 - cat this just needs to be sorry public
06:28 - and public sorry this is just because
06:33 - we're not actually able to see these
06:34 - attributes because they're defined in
06:36 - the dog class from within our cat class
06:37 - so we just need to change them to public
06:39 - so that we're actually gonna be able to
06:41 - use them within our speak method we can
06:42 - also use something called protected
06:43 - which I'm gonna talk about near the end
06:45 - of this video
06:46 - okay so right now this use public
06:48 - because I don't wanna get into protected
06:49 - but let's see what happens now if I run
06:51 - my team don't speak now we'd say meow my
06:54 - name is Tim and I get fed 100 ok and
06:56 - that's because even though in the dog
06:58 - class we had speak since we wrote it
07:01 - again in our cat class and cat class is
07:03 - the one that we're using we're simply
07:05 - gonna take this one and we're gonna
07:06 - override the the one in our dog class
07:09 - okay
07:09 - now obviously when we're doing
07:11 - inheritance you've already seen we can
07:12 - add our own methods we can add more
07:14 - stuff when we do whatever we want right
07:15 - so in here I can add more methods I can
07:17 - say public Boyd I don't know eat and in
07:20 - this case we'll just have like int I
07:23 - don't know X like as how much they're
07:25 - eating and we can say this dot food
07:27 - minus equals x ok and just subtract from
07:32 - it however much they ate and then we can
07:34 - use eat in the cat class but it's not
07:36 - gonna be seen in the dog class right so
07:37 - we just have to understand this does go
07:39 - one way all the stuff we do in cat class
07:41 - is not gonna be visible to stuff in dog
07:43 - class because well dog does not extend
07:45 - cat right so it's kind of a hierarchy
07:47 - where like dogs at the top and then cat
07:49 - branches off and we can have other
07:51 - things extend the dog class as well we'd
07:53 - have something extend the cat class and
07:55 - we could just keep going and going and
07:56 - going and extending and extending and
07:58 - extending also known as like inheriting
08:00 - right so that's kind of it for
08:02 - inheritance now I want to show something
08:05 - called multiple constructors ok so there
08:08 - is sometimes when we're setting up a
08:11 - class we want to be able to pass it like
08:13 - a different piece of information and set
08:15 - up the class differently right so for
08:17 - example my count class here at gives
08:19 - name age and food what if however I only
08:22 - wanted to give it name and age well we
08:25 - can leave both options available they
08:27 - don't have to be mutually exclusive
08:28 - right I could give it either these three
08:31 - arguments to set it up or I could give
08:32 - it just two and to do this we have to
08:35 - create another constructor so I'm gonna
08:38 - do the exact same thing as above I'm
08:40 - pretty well identical except
08:42 - I'm just gonna leave out one of the
08:43 - parameters here okay so set in to age
08:45 - and then here we'll simply call super
08:48 - and name and age okay and you see no red
08:52 - lines everything looks fine and what
08:55 - we're essentially doing here is we're
08:56 - giving it another way to set up the cat
08:58 - class another way to construct all of
09:01 - our attributes and set up the cat class
09:03 - so we can either call the cat class
09:05 - using three parameters or three
09:06 - arguments or we can call it using two
09:08 - and you know what maybe we could set one
09:10 - up only using one we're only using zero
09:13 - so let's do one with one just to show
09:14 - you how this might work okay so if I do
09:17 - string name and then int age okay and
09:23 - then here I call super oh sorry I should
09:26 - just get rushed I should get rid of this
09:27 - because we're only gonna use one right
09:28 - my bad I'm gonna give name but what
09:31 - about age what am I giving super for for
09:34 - our age well I don't know how are we
09:36 - gonna set it up if they only give us one
09:39 - argument well I would think that if they
09:42 - don't give us an age then we should just
09:43 - automatically assume that their age is
09:45 - zero so let's do that I'm gonna put in
09:47 - zero just hard code that in here so that
09:49 - way this means now say for example they
09:51 - only want to give us a name then we'll
09:53 - just automatically give them an age of
09:54 - zero they want to give us a name and an
09:56 - age that's fine we can do that but maybe
09:59 - what we should do in here if they give
10:00 - us a name in age is we should make sure
10:02 - that food is set equal to I don't know
10:04 - maybe let's give it a default value of
10:05 - 50 so if they don't define how much food
10:08 - the cat eats we're just going to assume
10:09 - that they eat 50 okay and this is kind
10:11 - of a weight you can do like it's known
10:13 - as like default parameters if they don't
10:15 - type something in just automatically set
10:17 - a value for that so that everything
10:19 - still works fine I hope that makes sense
10:21 - so let's show now the three different
10:23 - ways that we can create a cat say cat
10:25 - Bob equals new cats and in this case
10:29 - we'll give it a name so we'll say Bob
10:31 - and we'll give it an age of seven and no
10:35 - red lines this works fine again this
10:36 - defines a cat right because that's
10:38 - another constructor that we had so let's
10:40 - do this one more time and in this case
10:41 - let's just only type in a name we're
10:43 - gonna name this one do I like the name
10:46 - Joe all right and there we are
10:50 - so now we can obviously do like Bob does
10:52 - speak and we could do
10:55 - speak and these are the three ways that
10:58 - we have that we can define a cat
11:00 - okay so meow my name is Joe I get fed 0
11:02 - Bob I get fed 50 right it can go on like
11:05 - that so again when we have one now we
11:07 - just seen a quick error that maybe we
11:09 - want to fix we should probably give them
11:11 - food as well so you're saying this stop
11:13 - food equals fifty okay as like our
11:15 - default value for how much they get fed
11:17 - so that is a way that you can do
11:19 - multiple constructors and now I'm going
11:21 - to talk about protected values so
11:24 - protected values are something that we
11:26 - can use similar to private and public
11:28 - but there they just act a bit
11:31 - differently so pretty much if you use
11:32 - the protected keyword instead of public
11:34 - when you're defining things so for
11:36 - example here in my dog class I'm gonna
11:38 - go up and change public to protected
11:40 - this means that only things that are
11:43 - within the same package or are
11:45 - subclasses of the class can have access
11:48 - to this pretty much like me okay so that
11:52 - means any of these files or any of these
11:54 - classes within this package are able to
11:56 - see this but if I had another package
11:58 - which you typically do if you have large
12:00 - Java programs anything in there would
12:02 - not be able to see this okay so with
12:04 - whenever we're using what do you call it
12:07 - whenever we're creating like a main
12:08 - class or a parent class pro tected Wow
12:13 - okay we're gonna want to use the
12:15 - protected keyword at least for woody
12:18 - code sorry our attributes so that we can
12:20 - change them and access them from within
12:22 - deep sub class all right now for these
12:24 - methods it's fine
12:26 - they're public anyways right so we can
12:28 - make these protect it as well if we
12:29 - didn't want another package to be able
12:31 - to access them now if we create private
12:34 - methods right if we create a private
12:35 - method here I'm actually gonna try this
12:37 - but I don't remember if this is gonna
12:38 - allow us to use this now out here so
12:41 - let's say like Tim dot I don't even know
12:43 - which one I changed get aged okay say
12:46 - Tim to get aged so int x equals c this
12:52 - is gonna work yeah so again this is not
12:55 - going to allow us to use this because
12:57 - well we made it private right if we made
12:59 - that protect it it would allow us to use
13:01 - it here but not outside of the package
13:04 - now I want to try this though and see if
13:06 - I
13:06 - can gets this uses get aged from within
13:10 - our cat class so if I do for example I
13:12 - want to speak I'll say this get aged ad
13:17 - yeah so this isn't working as well which
13:19 - means that again if we want to use those
13:22 - methods we have to make sure they're
13:23 - either public or protected rather than
13:26 - private okay the only time you're really
13:28 - going to create private methods is if
13:30 - within the class is the only area you're
13:32 - using the method so for example maybe
13:34 - you're doing a Cometh calculation and
13:35 - you only do that from within the class
13:37 - and you don't want anyone outside of the
13:39 - class to be able to do that then you
13:40 - create a private method to do that
13:42 - because you could do that from within
13:43 - the class right so anyways I think I am
13:47 - probably going to end it here in the
13:49 - next video we're gonna be talking more
13:50 - about classes doing some more advanced
13:52 - stuff and then in future we're gonna get
13:53 - into like interfaces and some other cool
13:56 - Java stuff so again if you guys have any
13:58 - questions feel free to join my discord
13:59 - server or leave a comment down below and
14:02 - as always if you enjoyed the video
14:03 - please make sure you leave a like and
14:04 - subscribe and I will see you again
14:06 - [Music]