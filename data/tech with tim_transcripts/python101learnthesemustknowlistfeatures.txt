00:00 - do you know what the result of this
00:01 - python code is give it a shot pause the
00:03 - video and leave a comment with your
00:05 - answer now if you had any trouble coming
00:07 - up with that answer or you haven't seen
00:09 - this syntax before make sure you watch
00:11 - this whole video where I walk you
00:12 - through all of the must know python list
00:15 - features let's start by defining a list
00:18 - a list in Python is an ordered
00:20 - collection of elements now we can store
00:22 - any elements that we want they don't
00:24 - have to be the same data type they can
00:25 - be different ones in this case I have a
00:27 - list that has five elements and these
00:29 - are simp simply strings but if I wanted
00:31 - to I could mix and match and I could put
00:33 - true in here I could put a number
00:34 - doesn't matter the data types do not
00:36 - need to be the same Now list are mutable
00:38 - meaning once they're created they can be
00:40 - changed and every position in the list
00:42 - has something known as an index that
00:44 - means that I can actually access and
00:46 - change what exists at each position in
00:49 - this list by knowing the index now when
00:51 - we start indexing let's just write this
00:53 - out here we index at zero and then one
00:56 - and then two and then three and then
00:59 - four so we go up by one every single
01:01 - time the first index is always zero and
01:04 - the last index is whatever the length of
01:06 - the list is minus one in this case we
01:08 - have five elements in our list when we
01:10 - subtract one we get four so that's the
01:12 - last index now if we want to use the
01:14 - indexes we can do something like this
01:16 - LST at index zero if I decide to print
01:19 - this out that is going to access for me
01:21 - the first element let's have a look here
01:23 - I got to run this again and you see that
01:25 - we have a now if I put index 4 that will
01:28 - give us the last element which is
01:30 - Element e or string e now as well as
01:33 - accessing we can modify by the index so
01:36 - if I said LSD Z is equal to some big
01:39 - number like this and then I go ahead and
01:43 - print LST and run my code you see that
01:46 - now we've actually modified the list and
01:48 - changed it and replaced a with this
01:51 - large number great that's the basics on
01:53 - indexing now as well as indexing from
01:56 - the beginning of the list we can index
01:57 - from the end of the list so check this
02:00 - out we actually have -5 -4 if we can
02:04 - type this correctly -3 -2 And1 as valid
02:08 - indexes relative to the end of the list
02:11 - so to grab the last element we use 1
02:14 - second last element -2 third last
02:16 - element -3 so on and so forth so now if
02:19 - I were to print LST
02:22 - at5 clear and run you see that we get a
02:26 - because that's the fifth last element
02:28 - from the end of the list now the reason
02:30 - negative indexes can be useful is
02:32 - because in other languages what you
02:33 - typically have to write if you wanted to
02:35 - access the last element in the list is
02:38 - something like LST and then the length
02:40 - of the list this is how you get in
02:42 - Python by the way Len and then you
02:43 - surround the object in this case it's
02:45 - LST minus one so you can see this is a
02:48 - little bit more verbose it's kind of
02:49 - more difficult to read so instead in
02:51 - Python we just do negative 1 and that
02:53 - always gives us the last element in the
02:55 - list now we'll get into a bunch of other
02:57 - list features in a second but I want to
02:58 - quickly mention I just released a
03:00 - massive software development course the
03:02 - goal of this course is that everyone
03:04 - that graduates actually gets a job the
03:06 - way that we're supporting that is we
03:08 - actually have an employer portal where
03:10 - once you graduate and you go through our
03:12 - proctored final exam and all the
03:13 - projects that we have you'll show up in
03:16 - that employer database and employers
03:18 - will actually pay us money to interview
03:20 - you because we've already vetted you
03:22 - you've gone through an intense
03:23 - curriculum you know everything to be the
03:25 - best possible Junior developer you can
03:27 - be in both front end backend and devops
03:30 - now you can pick the specialization you
03:31 - want to go into and those
03:33 - specializations are taught by industry
03:35 - experts that are not myself so you have
03:37 - a front end expert devops expert and
03:39 - backend expert where I teach you all the
03:41 - fundamental skills so that you actually
03:43 - understand what specialization you want
03:45 - to choose anyways you guys can check it
03:46 - out from the link in the description now
03:48 - let's get back into our list now that
03:49 - we've looked at that let's see how we
03:51 - can actually add remove and insert
03:53 - elements from list if we want to add
03:54 - something to our list so actually a new
03:56 - element not replacing an existing
03:58 - element we can use the the do append
04:00 - method now if I append something like
04:02 - five this will simply go to the end of
04:04 - the list so if I run my code here we
04:07 - should print out the list so we can see
04:10 - it you will see that we get AB bcde e
04:13 - and then five that's how you append now
04:15 - what if you want to remove well if we
04:17 - want to remove from our list we can use
04:19 - this pop function now what this pop
04:21 - function does is actually remove and
04:23 - return the element at the end of the
04:25 - list in this case it's going to be e so
04:26 - if I print out remove and LST and I
04:29 - clear and run you see we get e and then
04:32 - the rest of the list except we no longer
04:34 - have e because we popped it or removed
04:36 - it now with the pop method we can
04:38 - actually specify the index at which we
04:39 - want to remove so let's say we want to
04:41 - remove C I can put two here which is the
04:44 - index of c and when I run this now I get
04:46 - a b no C and then d and e and C gets
04:49 - stored in this variable because that's
04:50 - what pop does now let's say we don't
04:53 - actually know the index of the element
04:54 - we want to remove if that's the case we
04:57 - can remove the element based on its
04:58 - value by using using the remove function
05:00 - so if I wanted to remove B I would do
05:02 - LST do remove and not n this is
05:05 - B and if I clear and run you see we get
05:08 - a c d e now an important thing to keep
05:11 - in mind with this method is it removes
05:13 - the first instance of that element so if
05:16 - I have two B's here you'll see that we
05:17 - only remove the first B we don't remove
05:20 - the last one so you need to run this
05:21 - method multiple times if you want to
05:23 - remove all of the different instances
05:25 - Also let's see what happens if we try to
05:27 - remove an element that doesn't exist I
05:29 - go here and run and notice we get an
05:31 - error because that element doesn't exist
05:33 - so you need to actually know that the
05:35 - element exists before you remove it I'll
05:37 - show you how you can find that in a
05:38 - second all right so a few last methods
05:40 - related to insertion or kind of adding
05:43 - or modifying the list we have an insert
05:45 - method this insert method will insert an
05:47 - element at whatever index you specify so
05:50 - let's say I do index 2 which is
05:51 - currently where C is and I insert some
05:54 - big number well now when I run my code
05:57 - notice I get a b and then I index to
05:59 - this new new element and the rest of the
06:00 - elements get shifted over to the right
06:02 - in the list that's great now one other
06:05 - thing to show you here let's see what
06:06 - happens if I append another list so
06:08 - maybe I have a list that has the
06:10 - elements one two well if I clear and run
06:12 - here notice that this actually gets
06:14 - added as its own element so the last
06:17 - index is specifying this list this is
06:19 - known as nesting list we'll look at that
06:21 - in a second sometimes though you don't
06:23 - actually want this Behavior you want to
06:25 - take both one and two and you want to
06:27 - put them in the list as individual
06:28 - elements if that's the case you can use
06:31 - this extend function now the extend
06:33 - function will take all of the elements
06:35 - in the iterable object that you specify
06:37 - in this case it's a list and add them as
06:39 - individual elements in the list so if I
06:41 - run this notice we get a bcde e b and
06:44 - then one and two which are the elements
06:46 - that existed inside of this list now
06:48 - that we've discussed that I want to talk
06:49 - about something known as mutability now
06:51 - lists are mutable that means we can
06:53 - modify them once they've been created
06:55 - now this is in contrast to immutable
06:57 - objects like a tupple so so in Python we
07:00 - have tuples these are using regular
07:02 - parentheses and you'll notice that if I
07:04 - go to my tupple and I do something like
07:05 - topple at index zero is equal to 100 and
07:08 - I run my code we actually get an error
07:11 - and it says tble object does not support
07:12 - item assignment that's because this is
07:14 - immutable once I create it I cannot
07:17 - modify it if I want to make a change to
07:19 - this I need to make a new tupple object
07:21 - that has that change that's different
07:23 - than lists lists we can actually modify
07:25 - in place and this gives them some
07:27 - special behavior so now let's what
07:29 - happens if I do something like this lst2
07:33 - is equal to LST and we'll say lst2 at
07:37 - index0 is equal to 100 and then we'll
07:40 - print both our
07:42 - lists now you'll notice when I clear and
07:45 - run here that we actually get the exact
07:47 - same list even though we only made the
07:49 - change to list two now the reason that
07:52 - happens is because this is a mutable
07:54 - object whenever you store mutable
07:56 - objects you're actually storing a
07:57 - reference to them so when I say LST is
08:00 - equal to this list I'm creating a new
08:01 - list and referencing that list that
08:04 - means when I have lst2 is equal to LST
08:07 - I'm actually just copying the reference
08:09 - to this list into another variable so
08:12 - whenever I make a change to LST it
08:14 - affects lst2 whenever I make a change to
08:16 - lst2 it affects LST because these are
08:19 - referencing the same underlying list so
08:22 - you need to keep that in mind if you
08:23 - want to copy a list you actually need to
08:25 - do that in a special way what we're
08:27 - doing right here is just creating
08:28 - another reference refence or something
08:30 - known as an alias to the same list now
08:32 - this becomes especially important when
08:34 - you start using lists as function
08:36 - parameters so for example let's I have a
08:38 - function defined funk I take in some LST
08:41 - and I just say LST 0 is equal to 100
08:45 - well now I can make I don't know
08:47 - new list here is equal to 1 2 3 and I
08:51 - can actually call my function on new LST
08:55 - and then print my new LST and you'll see
08:59 - that just like before we actually modify
09:01 - that list in place that's because again
09:04 - when we pass this value here to the
09:06 - parameter we're storing the reference to
09:08 - this list so we can actually modify a
09:10 - variable outside of the function because
09:13 - it's mutable very important to
09:15 - understand you need to know this to be
09:16 - able to use lists effectively okay so
09:19 - beyond that we have nesting of lists and
09:22 - we saw this briefly before but we can
09:23 - store lists inside of other lists so if
09:25 - I have LST is equal to a list like this
09:27 - I can actually store other list this and
09:29 - I can use kind of a double indexing
09:32 - method which you're going to see here in
09:33 - a second so let's say I want to access
09:35 - and we should really change this the
09:37 - value four well to access the value four
09:40 - I first need to access the list that
09:42 - stores four so I can print list at index
09:44 - one and I'm going to access this second
09:47 - list and you see that we get 3 four now
09:49 - that I have that list I can index it
09:51 - again and I can grab the second position
09:54 - or the first index of that list and that
09:57 - will give me the value four now this
09:59 - keeps going into Infinity like if I had
10:00 - another list here right now when I do
10:02 - one one you see that I actually get the
10:04 - list for so then I would have to access
10:06 - index0 here to be able to grab the
10:09 - actual value for that's nesting just
10:11 - quickly wanted to show that to you now
10:12 - that we've looked at nesting let's look
10:14 - at the most common issue I see with
10:16 - python list and this is using list as
10:18 - default parameters so let's say again I
10:20 - have my function and I have LST equal to
10:22 - a default parameter of say one two now
10:25 - maybe what I'll do inside of here is I
10:27 - will just say
10:30 - LST do
10:32 - append 100 and I will return my list so
10:36 - this is a simple function all it does is
10:38 - it just takes some list it appends 100
10:40 - to it and then it returns that list but
10:42 - what it has is a default value for its
10:45 - parameter that means I can call this
10:47 - function without passing in my own list
10:49 - and it will use the list right here
10:51 - which has the value one two so we're
10:53 - going to say lst1 is equal to Funk and
10:57 - lst2 is equal to Funk and LST 3 is equal
11:01 - to Funk we're just going to print all of
11:03 - these out and take a guess yourself what
11:05 - you think the output is going to be I've
11:07 - kind of hinted uh as to what's going to
11:09 - happen but pause the video take a guess
11:11 - and then I'm going to run the code okay
11:13 - so let's run our code here and notice
11:16 - that our lists continue to get larger
11:18 - and larger and in fact they're actually
11:20 - the same list this is a little bit weird
11:23 - what's happening well what's going on
11:25 - here is we have a default parameter
11:27 - which is a mutable list now that means
11:30 - that when I make a change so I do LST do
11:33 - append 100 I'm actually modifying this
11:35 - default parameter so every time I call
11:38 - function I'm appending 100 into this
11:40 - list and all of list one two and three
11:44 - have the same list that they're
11:45 - referencing cuz I'm returning a
11:46 - reference to this list which is a
11:48 - mutable object I know it seems a little
11:51 - bit confusing here but the kind of moral
11:53 - the story is don't use a list as a
11:55 - default parameter in fact don't use
11:57 - anything mutable as a default parameter
11:59 - unless you're going to be copying it and
12:01 - even then you probably don't want to do
12:03 - that so just as a quick demo here if I
12:05 - pass in my own list now so I'm passing
12:08 - three distinct lists here okay and I run
12:11 - you'll notice that we get what we expect
12:13 - 100 in each list okay whereas if I do
12:16 - something like a is equal to this and
12:18 - then I pass a here okay so a a and a
12:23 - you'll notice that we get the exact same
12:25 - list three times again because we're
12:27 - appending to a every single time because
12:29 - this is a mutable object now that we've
12:31 - got into that let's talk about slicing
12:33 - which is one of my favorite features of
12:35 - list now a slice is essentially like a
12:38 - for Loop in Python but for iterating or
12:40 - grabbing values out of a list so if I
12:43 - have my list like 1 2 3 4 five we'll
12:45 - just use numbers to keep it nice and
12:46 - simple here I can actually create a
12:48 - slice of this list so I can say print
12:51 - LST I can do my square bracket syntax
12:54 - and now I have the ability to use up to
12:56 - two colons now bear with me here there's
12:59 - a few things that you need to remember
13:01 - so first of all I can use one colon now
13:03 - when I use one colon right here what
13:05 - this actually does is create a copy of
13:07 - the list we're going to look at that in
13:09 - one second I promise now the first kind
13:12 - of thing to the left of the colon so the
13:14 - left of the colon here when you don't
13:16 - put anything there that indicates to
13:18 - start at the beginning of the list when
13:20 - you don't put anything to the right of
13:21 - the colon that indicates to go to the
13:24 - end of the list including the last
13:26 - element so if I just print out the list
13:28 - here with one colon this is actually
13:30 - valid syntax and you see we just get the
13:31 - exact same list now though if I do
13:34 - something like one colon what I'm
13:36 - actually specifying is I want to start
13:38 - at index one and I want to go to the end
13:41 - of the list including the last value
13:44 - when I run it now notice I get from two
13:46 - to the end of the list now let's do one
13:48 - colon and then index 6 what I'm doing
13:52 - now is specifying I want to start at
13:53 - index one and I want to go up to but not
13:56 - include index six now index 6 is seven
14:01 - so that means I'm going to have a list
14:02 - which is 2 to six and that's exactly
14:05 - what I get okay so you have your start
14:07 - colon and then your stop if you leave
14:09 - them empty the start is going to be the
14:11 - beginning of the list and the end is
14:12 - going to be the end of the list and it's
14:14 - going to include that last value now
14:17 - where things get a bit more complicated
14:19 - is when we have two colons now when we
14:21 - have two colons we actually go start
14:23 - stop step so I can do something like one
14:27 - six here and if I leave this step empty
14:29 - by default I'm going to have a step of
14:31 - one so I get the exact same list but if
14:33 - I put a two here I'm actually specifying
14:36 - that I want to step over every second
14:38 - element so now when I run my code I get
14:41 - 2 46 so I skip every second element this
14:45 - is similar to a for Loop where you set I
14:47 - equal to some value you go up to some
14:49 - value and then you increment by some
14:51 - step in this case the step we're using
14:53 - is two now slices can get pretty
14:55 - complicated and you can actually use
14:57 - negative values in slices
14:59 - so let's say I have a colon and then I
15:01 - do1 well what do you think we're going
15:03 - to get here let's run this and notice
15:05 - that we actually get the entire list
15:07 - minus the last element because we go up
15:09 - to everything but the last element
15:12 - whereas if I put a Nega -1 here as my
15:14 - start you'll see that we just get the
15:16 - last element in this list of the slice
15:19 - now one little trick you can use is you
15:21 - can actually step negative so I can do
15:24 - colon colon negative 1 now this is
15:26 - actually a very fast way to reverse list
15:28 - in Python when I do this you'll actually
15:31 - see that we get the entire list reversed
15:34 - okay we're starting at the beginning
15:36 - going to the end but stepping negative 1
15:38 - so stepping backwards which kind of goes
15:40 - circularly I won't really explain this
15:42 - much more in depth but negative or colon
15:44 - colon neg1 will reverse the list for you
15:46 - okay you can do all kinds of interesting
15:48 - things here with a slice now just as a
15:50 - last example here with our slice we can
15:52 - actually modify segments of a slice so
15:55 - let's say I do something like 2 colon 4
15:58 - I can actually make this equal to a list
16:01 - with just one element inside when I run
16:03 - my code now if I print
16:06 - out LST you'll see that what I've done
16:09 - here is I've inserted one in position of
16:12 - the slice from 2 to 4 now to make this
16:15 - more clear we can do like a th a th000
16:18 - and you'll see that I've essentially
16:19 - replaced what happens in this slice with
16:21 - whatever I put here so now we're going
16:23 - to go through some of the more useful
16:24 - methods that you can use on list first
16:27 - of all I want to show you how you can
16:28 - determine if something is inside of a
16:30 - list to do that we can say contains is
16:32 - equal to and then something like two in
16:34 - LST now this in operator simply tells us
16:37 - if whatever the value is on the left
16:39 - hand side is contained inside of the
16:41 - iterable in this case it's a list so if
16:43 - I print
16:45 - contains you can see that we get true
16:47 - indicating that two does indeed exist
16:49 - now let's say that you don't know what
16:51 - elements are inside of the list and you
16:53 - first want to check if something exists
16:54 - inside the list okay I found two it
16:56 - exists maybe now what I want want is the
16:59 - index of value two well what I can do
17:01 - now is actually grab the index by using
17:03 - the index method I can say LST do index
17:07 - and then two and now I can bring
17:10 - contains and index and it will tell me
17:12 - the index of element two which is one
17:15 - now a few other useful methods we can
17:16 - use are the count method so for example
17:19 - I can go here and say print LST do count
17:21 - and I can count three and if I clear and
17:25 - run you see that it tells me we have two
17:27 - instances of three in inside of the list
17:29 - now as well as those we can also sort
17:31 - our list so I can say LST do sort now
17:33 - what this is going to do is perform an
17:35 - inplace sort that means it's actually
17:37 - going to modify the list change all of
17:39 - the elements to be in the correct
17:41 - position so this is kind of interesting
17:43 - if I print out LST do sort you'll
17:46 - actually see that we get none the reason
17:48 - we get none is because this method
17:50 - doesn't return anything it actually just
17:52 - sorts the list for us so if I do another
17:54 - print statement here and now I print
17:57 - LST okay you can see that now we get the
18:00 - list in ascending order now we can also
18:02 - specify if we want it in descending
18:04 - order I believe we can say descend is
18:06 - equal to True uh I think that's the
18:08 - correct oh no sorry it's reverse equals
18:11 - true okay reverse equals true if we do
18:14 - that now it's going to sort it in
18:15 - descending order so we get from eight
18:16 - all the way down to one so that is
18:18 - sorting now as well as sorting we can
18:20 - actually reverse a list so same thing
18:22 - here I can say list. reverse now again
18:24 - this is going to happen in place so
18:26 - notice it returns none and reverses the
18:29 - list for us now as well as those sort
18:31 - and reverse methods we also have
18:33 - functions that will do this that
18:34 - actually return new objects to us so
18:36 - what I can do is actually wrap my list
18:39 - here in sorted and now if I print out
18:41 - sorted and then I print my list like
18:45 - this you'll notice that it actually
18:47 - doesn't modify my original List It
18:49 - returns a new list which is the sorted
18:51 - version of this list so very interesting
18:53 - to see that now as well as sorted we
18:55 - have reversed same thing and we'll
18:57 - return a new instance that does not
18:59 - modify the list in place now this is
19:01 - giving us something known as an iterator
19:03 - if we wanted to convert this to an
19:05 - actual list we would just wrap this in
19:07 - list not going to dive into that too
19:09 - much okay beyond that I did promise you
19:11 - I was going to show you how to make a
19:12 - copy of a list few ways to do this but
19:14 - the most common is to use the slice
19:16 - operation so I can say list 2 is equal
19:18 - to LST and then simply do a single colon
19:21 - now if I do LST at zero is equal to a
19:24 - big number and then I print my list and
19:27 - my list two you'll see that these are
19:29 - now different lists because we made a
19:31 - copy of the original list so notice
19:33 - we've only modified list two we did not
19:35 - modify list one because we made a copy
19:37 - here using the slice operator all right
19:40 - so one more cool thing to show you here
19:41 - is something known as the zip function
19:43 - let's say we have two lists here names
19:45 - and ages and they actually have
19:46 - corresponding indices right so the ages
19:48 - at index zero correspond with the name
19:50 - at index zero well we can actually use a
19:53 - function called zip so I can zip these
19:55 - together let me just say zipped if I can
19:57 - fix my cap locks here what is going on
20:00 - caps okay zipped is equal to zip and
20:03 - then I can pass my names and my ages and
20:06 - it'll actually create topples for us of
20:08 - all of the matching indices so if I go
20:10 - ahead and print the list of my zipped
20:14 - and I go here and run this you see that
20:16 - we actually get tles with the
20:17 - corresponding indices you can do this
20:19 - with as many different lists as you want
20:21 - so we can zip three four 5 100 lists and
20:24 - the reason why I put a list here is
20:26 - because this actually returns an
20:27 - iterator for us an iterator is something
20:29 - that we can Loop over but if we want to
20:31 - get all of the values in just a human
20:33 - readable form we do have to convert it
20:34 - to a list so now that we've looked at
20:36 - zip last really cool thing to show you
20:38 - here is list comprehensions you've
20:39 - probably seen this before but this is
20:42 - one of the coolest parts of python where
20:44 - what I can do is write a list and I can
20:45 - actually populate the list by using
20:47 - something known as a comprehension so I
20:49 - can do something like X forx in range 10
20:53 - now if I go here and print out my list
20:57 - you will will see that when I run this I
21:00 - get 0 through 9 now I can even make this
21:03 - a bit cooler I can say x for X in range
21:05 - 10 if xod 2 is equal to zero now this is
21:11 - just going to give me all the even
21:13 - numbers including zero I could go much
21:15 - further into how to do this you can also
21:17 - have list comprehensions of list
21:18 - comprehensions so I can actually just
21:20 - make this like that and this isn't going
21:24 - to be that useful let's take this so x
21:27 - for X there 4ore in range 5 now it's a
21:33 - bit difficult to read this let's zoom
21:35 - out a little bit what this is going to
21:36 - do for us is give us a list of even
21:38 - numbers five times so now when I run
21:40 - this you can see we get a nested list
21:42 - comprehension the syntax is like I have
21:44 - here you kind of can pause and parse it
21:46 - and see exactly how it works but I don't
21:48 - want to make the video too long here and
21:50 - continue going on about this anyways
21:51 - really cool you can do list
21:53 - comprehensions and you can write all
21:54 - kinds of wild syntax in Python if you
21:56 - want to learn more you should subscribe
21:58 - to my channel because I have a lot more
22:00 - python content anyways I'm going to wrap
22:02 - it up here if you guys enjoyed leave a
22:03 - like subscribe and I will see you in the
22:05 - next
22:06 - [Music]
22:13 - one