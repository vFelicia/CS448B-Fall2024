00:02 - [Music]
00:08 - hello everybody and welcome to the third
00:10 - video in this react tutorial for
00:12 - beginners
00:13 - in this video i'm going to be covering
00:14 - components and jsx so let's go ahead and
00:17 - dive
00:18 - in so the first thing we need to discuss
00:19 - is what a component is
00:21 - well component is really an aspect of
00:24 - your user interface
00:25 - now components in react are reusable
00:27 - this is one of the reasons why people
00:29 - love react
00:30 - because you have these really nice kind
00:31 - of streamlined uh components that are
00:34 - flexible
00:34 - dynamic and are reusable in many
00:36 - different areas of your application
00:38 - there's actually an entire component
00:40 - library or sorry entire component
00:42 - libraries that are built by people that
00:44 - contain just
00:45 - nice components that look nice on the
00:47 - screen have some good functionality
00:49 - and that you can use with your react
00:51 - application for example if you ever went
00:53 - and worked at you know shopify or
00:54 - spotify or facebook or whatever some
00:56 - place where they use
00:58 - react you would see that they probably
00:59 - have their own component library of all
01:01 - these different reusable components
01:03 - and you can use those to build different
01:05 - parts of whatever new user interface it
01:06 - is that you're going to go ahead and
01:07 - build
01:08 - regardless how do we create a component
01:10 - what does a component look like
01:11 - let's go through all of that so here i'm
01:13 - in my app.js file
01:15 - and this is our first component if you
01:16 - hover over this here you can see it's a
01:18 - jsx
01:19 - element that's what it returns and
01:21 - whenever you have something returning a
01:22 - jsx element
01:24 - in react by default that's going to be
01:25 - known as a functional component
01:27 - now there's two ways to create
01:29 - components one way is using functions
01:31 - like this
01:32 - another way is using classes i will show
01:34 - you the class way in a minute
01:36 - regardless since we are returning a div
01:38 - here inside the div we have some content
01:40 - whatever this is considered a component
01:42 - however if i go ahead and make a
01:44 - function and i say function
01:46 - and we just call this you know foo this
01:48 - is not a component
01:49 - i could return some string hello and
01:52 - this would work just like any other
01:54 - normal function would work uh this is
01:56 - not a component because well i'm not
01:57 - returning a jsx element
01:59 - which is uh this kind of div here we'll
02:02 - get into jsx at the end
02:03 - because there's some special syntax that
02:05 - i can show you but for now kind of
02:06 - assume that jsx is just your vanilla
02:08 - html with a few additions all right so
02:11 - anyways let me show you how we can make
02:13 - our own component and then hopefully
02:14 - this will
02:15 - kind of illustrate how they work so i'm
02:16 - going to say function and let's just
02:18 - make a
02:19 - let's say info component these are all
02:22 - going to be kind of silly examples for
02:23 - now
02:24 - just to illustrate what a component
02:26 - actually is now from this component what
02:28 - i'm going to do is
02:29 - return and actually i will return in
02:31 - parentheses here a
02:33 - div and then what i will do is have an
02:36 - h1 tag inside of this div so i'll say h1
02:40 - and the h1 tab and i will say inventory
02:45 - system whatever okay and then after this
02:48 - i'm going to put a p
02:49 - tag here and for the p tag i am going
02:52 - to say um manage
02:56 - your stuff okay really straightforward
02:59 - we don't need to do anything much more
03:01 - than that
03:01 - now we have created an info component
03:04 - now
03:04 - just note here that whenever you are
03:05 - trying to return kind of html or jsx
03:08 - from a component it needs to have one
03:10 - parent element
03:11 - so here if i remove this div and i try
03:13 - to just return my h1 mip
03:15 - we're going to get an issue the reason
03:16 - for this is these are two separate
03:17 - components
03:18 - uh they're not one so now if i do the
03:20 - div i'm kind of returning this one
03:22 - div component if you want to call it
03:24 - that uh that has two children inside of
03:26 - it so i'm kind of wrapping the two
03:28 - children
03:28 - so that this actually works so just keep
03:30 - that in mind if you're getting errors
03:31 - with that make sure you have kind of one
03:33 - top level or parent element for all of
03:34 - the stuff that's being returned
03:36 - all right so now i'll show you how we
03:38 - use this info component so if i go
03:39 - inside of app now
03:41 - what i can do is i can actually just
03:42 - render info
03:44 - like that this is how you use a
03:46 - component you just write out the name of
03:48 - it
03:48 - put it in angle brackets and then close
03:50 - the component like that you also can
03:52 - just do it like that with a slash you
03:53 - don't need to have two separate tags
03:55 - and so now you can see we get inventory
03:56 - management or inventory system and it
03:58 - says manage your stuff
04:00 - now the great thing about components is
04:01 - you can use them multiple times right so
04:03 - i can just put another one here and then
04:05 - shows up again and then i can put
04:07 - another one and it shows up again
04:09 - i'm going to show you how we can make it
04:11 - so when we use a component multiple
04:12 - times
04:13 - we can pass different properties to it
04:15 - that'll be in the next video
04:16 - so that it looks different based on kind
04:18 - of the arguments that we give it
04:20 - anyways for now we'll leave just this
04:21 - kind of one info component like this
04:24 - and there you go you have now created
04:26 - your first react component now what i'm
04:28 - going to do is make
04:29 - another component and this component
04:31 - will kind of make like maybe an input
04:33 - field or something
04:34 - so we'll say function and we'll say
04:36 - maybe
04:37 - add item whatever you can call them
04:39 - whatever you want obviously
04:40 - and from here what i'm going to do is
04:42 - return an input field
04:44 - so i will return a div and
04:47 - then inside of this div what i'm going
04:49 - to do is make an
04:50 - input i'm going to say type
04:54 - equals and this will be button or
04:56 - actually let's make it
04:58 - text and i think that's pretty much all
05:00 - we really need for that
05:02 - and then what we can do is what is it
05:04 - saying here uh oh
05:06 - sorry the input tag doesn't have an
05:07 - ending tag it just ends like that
05:09 - and then is there a value we can give it
05:11 - a default value or we can give it
05:13 - um so actually what i'm going to do here
05:15 - is change this div to be a
05:17 - form so let's make this a form instead
05:19 - so i can use my label tag
05:20 - so let's remove form let's now give this
05:23 - an id
05:24 - let's say id is equal to i don't know
05:27 - input or input's probably not going to
05:29 - be a good thing to make it uh let's just
05:31 - make this
05:32 - text text form
05:36 - okay and then we can do a label so i'll
05:38 - say label
05:39 - for equals and then a text hyphen
05:42 - form and then inside of here we will say
05:47 - type something like that all right so
05:50 - now we've created our ad
05:51 - item component now i'm going to use that
05:54 - inside of my app so now after
05:56 - info i'm going to say add
05:59 - item like that now actually let's just
06:02 - end it this way
06:03 - and now notice we have our type
06:04 - something we can type something in here
06:07 - that's all working
06:08 - and if i wanted to use this multiple
06:10 - times well i could do that right
06:12 - and there you go now if we wait we
06:14 - should see that we have three input
06:16 - fields popping up
06:17 - that i'll say type something then of
06:20 - course inside of our components we could
06:21 - render other components
06:22 - so inside of our add item what we could
06:25 - do is maybe we could render the info
06:26 - component right so we could say
06:27 - info like that then if we run this
06:30 - notice that every single time that we
06:33 - generate an add item component it's
06:35 - going to also render an info component
06:36 - and start showing up afterwards
06:38 - all right so now that we've seen how to
06:39 - render the add item three times onto the
06:42 - screen we've looked at some basics of
06:43 - components i'm going to talk to you
06:45 - about jsx
06:46 - now jsx stands for javascript xml and
06:49 - there's a few different things that you
06:50 - can do with it but the most valuable is
06:52 - being able to evaluate
06:53 - javascript expressions right inside of
06:56 - your kind of output html here this makes
06:58 - it really really useful to generate
06:59 - dynamic pages
07:00 - especially if you have a ton of data
07:02 - that you want to render obviously you
07:04 - don't want to manually write all of that
07:05 - out you're going to want to write some
07:06 - code that can do it more efficiently for
07:08 - you
07:08 - so i'm going to go inside of my info
07:10 - component here and what i'm going to do
07:11 - is i'm going to define a variable
07:13 - so i'm going to say const and we'll just
07:14 - make this maybe title
07:16 - i'll set this equal to this is my title
07:19 - okay like that now i want to show the
07:22 - value of this variable
07:24 - inside of my html here how do i do that
07:27 - well you might be tempted just to write
07:29 - something like
07:30 - title right and you might think that
07:32 - that's going to work but when i do that
07:33 - you see that it just shows me the actual
07:35 - string title
07:36 - if i wanted to show the value of this
07:38 - variable not just the string title what
07:40 - i would do
07:41 - is surround this in single curly braces
07:44 - so when i do this notice now it's
07:45 - showing me this is my title because when
07:47 - i've surrounded in curly braces
07:49 - it tells react hey this is a variable
07:51 - this is an expression of some sort
07:52 - so you need to evaluate it and then
07:54 - display whatever the evaluation is
07:56 - and so in the same way i can take title
07:58 - and i can put that inside of my h1 tag
08:00 - here
08:01 - and now you're going to see that it says
08:03 - this is my title now we can do some
08:05 - other cool things as well i can make
08:06 - another variable here and i could say
08:07 - const
08:09 - show underscore or show title
08:12 - is equal to and then maybe we make this
08:14 - equal to false
08:15 - and now maybe we're only going to show
08:17 - the title and i'm
08:18 - typing in python right now it needs to
08:20 - be lowercase we're only going to show
08:21 - the title if show title is equal to true
08:24 - now what i can do is i could say all
08:26 - right show
08:27 - title question mark title otherwise
08:30 - nothing now if i do this notice that
08:33 - when show title is equal to false
08:35 - nothing's showing up but
08:36 - if i make this equal to true then you're
08:39 - going to see that
08:40 - if i type true with a lowercase i'm so
08:42 - used to the uppercase
08:43 - it shows my title so this right here is
08:45 - what's known as a ternary expression
08:47 - actually i believe that's what it's
08:48 - called i always butcher the name someone
08:50 - can correct me in the comments if i'm
08:51 - mispronouncing that
08:52 - but what this allows you to do is write
08:54 - a condition and then you put question
08:55 - mark and this says okay i'm going to
08:57 - check if this is true
08:58 - if this is true do this otherwise do
09:01 - this and so we're evaluating this
09:02 - expression
09:03 - and what we see is that we're going to
09:04 - get title whenever this is true
09:06 - and we're going to get an empty string
09:08 - whenever this is false now i could
09:09 - change this to say
09:11 - no title and then if i make this to
09:14 - false you see that it goes to no title
09:16 - so just an example of something
09:18 - interesting that you can do
09:19 - inside of jsx now sometimes you actually
09:22 - want to return completely different
09:23 - stuff
09:24 - based on the value of a variable or
09:26 - based on some condition
09:27 - in that case you could do an if
09:28 - statement inside of this function right
09:30 - and i can say if
09:31 - and this isn't jsx this is just vanilla
09:33 - javascript but i can say
09:35 - if show title then i'm going to do
09:38 - this and maybe we'll just go here and
09:42 - say title
09:43 - otherwise though what i'm going to do is
09:46 - return something else and maybe i'm just
09:48 - going to return
09:48 - a p tag and say you know
09:52 - empty okay so now if i do this and i
09:55 - save notice it's showing me empty
09:56 - because show title's false
09:58 - but if i change show title to true then
10:00 - it's going to show me this is my title
10:01 - and manage your stuff
10:03 - so just showing you kind of how you can
10:05 - dynamically render different things here
10:07 - you can use these uh single curly braces
10:10 - to embed
10:10 - an expression and the expression can be
10:12 - like whatever you want right like i
10:14 - could do something like
10:15 - let's go inside of here and go 2 plus 4.
10:18 - if i do
10:19 - 2 plus 4 notice we're going to get 6
10:21 - right so we'll evaluate the expression
10:23 - and you also can do stuff like map
10:25 - filter you can use all kinds of
10:27 - different javascript functions inside of
10:28 - here
10:29 - and we'll see more and more of this as
10:30 - we go through this tutorial but that is
10:32 - the basics of kind of embedding
10:34 - variables or values
10:35 - inside of your output html here so we
10:39 - will continue in one second we need to
10:40 - quickly thank the sponsor of this video
10:42 - and this series which is algo expert
10:44 - as you know algo expert is the best
10:46 - platform to use when preparing for your
10:48 - software engineering coding interviews
10:49 - i actually work at algo expert as an
10:51 - algorithms instructor
10:53 - and you can find right now about 45 to
10:55 - 50 questions that were created by me on
10:57 - the platform
10:58 - check them out from the link in the
11:00 - description and use the code tech with
11:01 - tim for a discount on the algo expert
11:03 - platform
11:04 - now another thing to note here is how
11:06 - you use this kind of
11:08 - syntax i guess when you want this to be
11:10 - an argument to one of your
11:12 - components or one of the kind of html
11:14 - tags so for example
11:16 - maybe we want the four or maybe we want
11:19 - something related to let's let's go for
11:20 - input and let's say value
11:22 - maybe we want this to be equal to a
11:23 - variable we have maybe we have
11:25 - const value is equal to
11:28 - default or something like that and we
11:30 - want the value of this variable to be
11:32 - the value of this input box well in this
11:34 - case what you would do
11:36 - is the same thing you would just say
11:37 - value is equal to and then inside of
11:41 - these curly braces you would put value
11:43 - and now notice it's going to be equal to
11:44 - default
11:44 - if i change this and i say tim is great
11:48 - and we save notice it's going to give us
11:50 - tim is great now for the value so just
11:52 - another way that you can do that you can
11:54 - use the curly braces here
11:56 - okay so i think that was probably a good
11:57 - introduction to components
11:59 - and jsx syntax so using these kind of
12:01 - individual curly braces here and how it
12:03 - evaluates the expression
12:05 - the last thing i'm going to show you
12:06 - here is how we can create a class based
12:07 - component and how we can
12:08 - put these into different files because
12:10 - oftentimes we want to do that
12:12 - so in fact what i'm going to do is copy
12:13 - this info component right here
12:15 - you'll notice we'll get an error right
12:16 - now because we're trying to use info and
12:18 - while it's not defined
12:19 - what i'm going to do though is put it
12:20 - inside of its own file so i'm going to
12:21 - go to src
12:22 - i'm going to make a new file i'm going
12:23 - to call it info.js
12:25 - and then inside of here i'm just going
12:27 - to paste this now what i'm going to try
12:29 - to do is
12:29 - import this info function here from
12:33 - app.js now what you would do normally is
12:36 - you would say
12:37 - import and then you do the name of the
12:40 - component you want to import so info
12:42 - and then from and then dot slash
12:45 - and then info.js the reason you're doing
12:47 - dot slash is you're defining a relative
12:49 - path
12:50 - what that means is you're saying okay
12:51 - relative from where i am currently
12:53 - i want to look for info.js if you wanted
12:56 - to look in the public folder then you
12:58 - would have to type in obviously a
12:59 - different path then
13:00 - just dot slash info.js regardless you
13:02 - can see this isn't working it's saying
13:04 - attempting to import
13:05 - info.js does not contain default export
13:08 - and the reason for that is that
13:10 - when you are trying to import something
13:11 - from a function it must be
13:13 - export so what you can say here is right
13:15 - on the same line as the function
13:16 - export default function info
13:20 - and now this should work notice that
13:22 - everything is all good because we're
13:24 - exporting this function which means it's
13:25 - now allowed to be imported
13:27 - from here now if i didn't export this
13:30 - with default
13:31 - and i just said export what this will
13:33 - mean is i now need to surround
13:35 - info in these kind of curly parentheses
13:38 - here
13:38 - curly brackets and the reason for that
13:40 - this should work now um
13:42 - what's going on here unexpected token
13:44 - comma okay so i don't know why i was
13:46 - getting that error i just refreshed and
13:47 - everything's working now
13:48 - but regardless you can see that when i
13:49 - don't export this as the default export
13:51 - i need to surround it in
13:53 - parentheses or in these curly braces so
13:55 - when you exported default what that
13:57 - means is you can import it without
13:59 - these curly braces but when you do not
14:01 - export it default you just
14:02 - export it that means that you then need
14:04 - to surround it
14:06 - in these things right here and you can
14:08 - only have one default export
14:10 - so you say x4 default this is the
14:11 - default thing being exported but you can
14:13 - have as many other things being exported
14:15 - that are not the default if that makes
14:17 - sense
14:17 - so anyways we'll leave it as export
14:18 - default but what you can actually do is
14:20 - rather than writing it on the same line
14:22 - if you want to clean this up you can say
14:23 - export default
14:25 - and then info like that and now the same
14:27 - thing should work
14:28 - if we go over here and we
14:31 - run failed to compile i cannot import
14:35 - oh that's because we still have it in
14:36 - the curly braces let's remove the curly
14:38 - braces
14:39 - now you can see that this is if i
14:41 - refresh here
14:42 - still working awesome so that is good
14:44 - and here you can see we were exporting
14:46 - default app
14:47 - that's the reason why from index.js we
14:49 - could just import app
14:50 - if it wasn't the default export we would
14:52 - need to surround it
14:53 - in our curly braces okay so that is how
14:56 - you put stuff in different files
14:57 - it's usually a good idea to put your
14:58 - components in different files just to
15:00 - keep things nice and clean
15:01 - although sometimes you might have some
15:03 - small components in the same file and
15:04 - you export all of them out
15:06 - okay so now the last thing i'm going to
15:07 - show us is just how we can actually
15:09 - convert this info component that is a
15:11 - functional component to a class based
15:12 - component
15:13 - won't take us very long i just want to
15:14 - show you what a class based component
15:16 - looks like
15:16 - so what i'm going to do is say class and
15:19 - i will name this
15:20 - info and then this is going to extend
15:23 - react
15:23 - dot component now since we're extending
15:26 - react what we need to do is import react
15:28 - so we're going to say import
15:30 - react from and then this is going to be
15:33 - in all lower cases react
15:35 - make sure you don't import it from react
15:36 - dom if you do that you're going to get
15:37 - an error
15:38 - you want to import it just from react
15:41 - now this is the default export and so
15:43 - that means we can import it this way if
15:44 - it wasn't we would need to surround it
15:46 - in our kind of curly braces anyways now
15:49 - this should be working what i'm going to
15:50 - do is define a render method
15:52 - and inside of this render method you're
15:54 - going to write what you want to be
15:56 - returned
15:57 - to render on the screen so by default
15:59 - the return statement from a functional
16:02 - component
16:02 - is just kind of this render method
16:04 - whereas when you create a class you need
16:06 - to define manually the
16:07 - render method and so i'm going to copy
16:09 - this right here
16:11 - and paste it inside of there and i'll
16:13 - just delete it from inside here so we
16:14 - know that we've already got that
16:15 - now what i'm going to do is save you can
16:17 - see my stuff's auto formatting i'm going
16:19 - to show you in one second how you can
16:20 - set up the auto formatter if yours isn't
16:21 - doing that
16:22 - and then what i'm going to do is just
16:23 - copy my two variables here so const
16:25 - title and const
16:26 - show title and i'm just going to paste
16:28 - them for now inside of this render
16:29 - method
16:30 - we could put them as class variables if
16:32 - we wanted to but for now it's fine we'll
16:33 - just put them inside of rend
16:35 - then what i'm going to do is delete this
16:36 - so delete info
16:38 - save and you should see that now
16:39 - everything is working the way that it
16:40 - was before
16:41 - so all i've done is just now made a
16:43 - class-based component you can see that
16:45 - it works the exact same as a functional
16:46 - component
16:47 - except we kind of have to write more so
16:48 - we say class info extends
16:50 - react.component
16:51 - we have to define a render method and
16:53 - then it's just like a little bit
16:54 - different syntax that's really the main
16:56 - differences between a functional and
16:58 - class-based component
16:59 - just a little bit of a different syntax
17:01 - there is some performance differences
17:02 - but for our purposes they're not really
17:04 - worth maybe talking about if you're
17:06 - getting into you know professional react
17:07 - development then you can make the
17:08 - argument you know which is better
17:10 - functional or class-based components
17:12 - i believe right now react is
17:13 - recommending using functional components
17:15 - unless you have a ton of state in which
17:17 - they are saying you should use
17:19 - class-based components anyways we'll
17:20 - talk about that later when we actually
17:22 - discuss state
17:23 - but with that that's going to wrap up
17:24 - the video okay so i realized i totally
17:26 - forgot to show you guys with the auto
17:28 - formatter so i'll do that quickly right
17:29 - now there's an extension called prettier
17:32 - this is a really popular extension it
17:33 - has 12.35 million downloads
17:36 - anyways to find it go to the extensions
17:38 - pane in vs code
17:39 - search prettier and install it now that
17:41 - should auto format the code for you
17:44 - however you may have to configure this
17:45 - so what you can do is press ctrl shift p
17:48 - what this will do is open up the command
17:50 - palette and then if you type format
17:52 - you'll see format document with you'll
17:54 - see file save without formatting all of
17:56 - these different options
17:57 - and what you can press format document
17:59 - with and then for me i have multiple
18:00 - formatters but for you you'll probably
18:02 - just have one
18:02 - you can press prettier and then it will
18:04 - automatically format the document that
18:06 - you're on
18:06 - now if you want to format when you save
18:08 - i believe that's a default behavior
18:10 - but you can go to the vs code settings
18:12 - so if you go to settings
18:14 - and then i think you could probably look
18:15 - at format and here you go see editor
18:18 - format on paste format on save
18:19 - you can check these boxes based on the
18:21 - behavior that you would like
18:23 - and here's the let you guys figure that
18:24 - out that is the auto formatter again
18:26 - it's an extension called prettier and
18:28 - with that that's going to end the video
18:30 - i hope you guys enjoyed if you did make
18:31 - sure to leave a like subscribe to the
18:33 - channel and i will see you in
18:34 - another one