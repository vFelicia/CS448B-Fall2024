00:02 - [Music]
00:06 - hello everybody and welcome back so in
00:09 - this tutorial what we're going to be
00:10 - doing is building a coronavirus web
00:12 - scraper slash voice assistant so the
00:14 - idea being we're gonna collect all this
00:16 - data related to the coronavirus so cases
00:19 - deaths cases by country people tested
00:22 - pretty much any data that we want and
00:24 - then we're gonna set up a voice
00:25 - assistant that can actually serve that
00:26 - data to us so I can ask a question like
00:29 - how many cases in Canada how many
00:31 - worldwide cases right and it'll actually
00:33 - give us a response and this is going to
00:35 - work using reg X search patterns so
00:37 - rather than using like some ml or AI
00:39 - model to set up the voices system which
00:41 - we could do we'll keep it simple and
00:43 - this will allow us to really easily add
00:45 - some new patterns so if you guys want to
00:47 - change or modify this prop this program
00:49 - you're really easily able to do that and
00:52 - that's kind of the idea behind a lot of
00:53 - my tutorials is I want to teach you the
00:55 - basics I want to teach you kind of all
00:57 - the skills and tools you need and then
00:58 - you can customize the project's mess
01:00 - around with it and add your own stuff
01:02 - because you know how to do that so let
01:03 - me just show you how this works how many
01:07 - cases are there in Canada how many
01:14 - worldwide cases are there so that one
01:18 - didn't work but how many total cases are
01:20 - there so you get the idea that's the
01:28 - basics of how that works actually need
01:30 - to close this because I forgot to quit
01:32 - that application ok so we have a sub
01:34 - line here but that's the idea right so
01:36 - you ask it questions and then it gives
01:38 - you the answers based on those questions
01:40 - now I'm actually gonna be getting all of
01:42 - the data for this project from this
01:44 - website here so this is just the first
01:45 - search result when you search
01:46 - coronavirus cases I'll leave a link to
01:49 - everything that I show here in the
01:50 - description but you get the idea so we
01:53 - have coronavirus cases this is the total
01:55 - cases and then if we come down here we
01:57 - get country specific data so USA Spain
02:00 - and then all their related data notice
02:02 - that some of these blocks are missing
02:03 - because I guess they just aren't
02:04 - reported or something like that where
02:06 - they're not in yet but that's the idea
02:07 - behind this so what we need to do is
02:10 - find a way to get the information from
02:12 - this website into our
02:13 - Python code now usually this would
02:15 - actually be quite difficult we would
02:17 - have to do this using like beautifulsoup
02:18 - or selenium or some kind of web scraper
02:20 - and have to look for like IDs and tags
02:23 - and dig into the HTML you know I'm not a
02:26 - fan of doing that and neither is parse
02:27 - hub which is why they actually sponsored
02:30 - this video we're gonna be using them to
02:31 - do this web scraping now I know people
02:33 - get really weary whenever you hear the
02:35 - word sponsor this is free this is
02:37 - completely free I promise you this will
02:39 - save you a ton of time and you do not
02:40 - need to pay for this but we'll just be
02:42 - using this for the project so they do
02:44 - have paid plans but for our purpose and
02:47 - for a lot of purposes you don't need to
02:48 - buy purchases so just go to the
02:50 - description it's par sub comm and click
02:52 - download par sub for free when you do
02:55 - that will bring to a page that looks
02:56 - like this and essentially what this par
02:58 - sub tool does if any of you are
02:59 - questioning why you download it is it
03:01 - allows you to pretty much look at the
03:03 - website in kind of this graphical user
03:05 - interface tool so you actually see this
03:07 - website and just simply click on the
03:09 - data you want so you just click I want
03:11 - that number I want this I want that I
03:13 - want anything that looks like this and
03:15 - what it will do is it will scrape the
03:17 - website for you it will give you an API
03:19 - that you can call to get that data and
03:21 - will let you download the data in JSON
03:23 - format in CSV format
03:25 - and for free so that's the idea behind
03:27 - parse up but once you download it again
03:30 - parse up calm this will be in the
03:31 - description they have a sponsor this
03:33 - video on being transparent with you guys
03:34 - and open that up and what we're gonna do
03:37 - is actually make a new project so this
03:40 - is what the tool looks like I mean you
03:42 - can go through it look at the tutorials
03:44 - documentation if you want but all we
03:46 - need to do them I'll show you how to do
03:48 - this is is make a new project now this
03:51 - might open up a like tutorial for you
03:53 - they do it tries to walk you through you
03:55 - can exit out of that if possible if you
03:57 - have to go through it go through it it's
03:58 - probably worthwhile they'll actually
04:00 - teach you how the Tool Works but once
04:01 - you get out of that go to new project
04:03 - and what we're gonna do is actually put
04:06 - in the URL for that coronavirus website
04:09 - that we want so you can see it's already
04:10 - in here for me because I've used it a
04:11 - bunch of times already but when you do
04:13 - that so we'll be put in that URL for the
04:15 - coronavirus website which is in the
04:16 - description and click start project on
04:18 - this URL you can see that we can
04:20 - actually look at the website on the
04:21 - right-hand side of our screen
04:22 - and very shortly we'll be able to start
04:24 - selecting what elements we actually want
04:26 - to take
04:26 - the website so I'll select start project
04:29 - on this URL just give it a second
04:31 - sometimes this does lag a little bit you
04:33 - got to remember it's scraping a ton of
04:35 - information so that's likely why and
04:37 - what we can do is just start clicking on
04:39 - stuff that we want now it's a little bit
04:41 - more complicated than that but the idea
04:43 - is that on a page right so we have a
04:45 - page object we can select different
04:47 - items from the page and the first items
04:50 - that I want to select are related to the
04:52 - total coronavirus cases so I want to get
04:54 - all of these values here so how should
04:56 - we do that
04:57 - well let's make a new selection here and
05:00 - I'm gonna call this selection total so
05:03 - this will be like total cases total
05:05 - deaths like all of that and what I'm
05:07 - gonna do inside a total now is select
05:08 - each one like that and I'm gonna select
05:12 - the other one here so this deaths and we
05:18 - can see that my woody call it voice
05:21 - assistant is still running in the
05:22 - background cause I didn't close it
05:23 - properly so give me a second to close
05:25 - that okay so my voice assistant was
05:27 - actually running in the background I
05:28 - forgot to exit anyways what we're gonna
05:30 - do is just select what we want from the
05:32 - selection so in this case I want the h1
05:34 - tags to around virus cases deaths and
05:36 - recovered and notice when I selected
05:38 - this h1 tag these two highlighted in
05:41 - yellow which said these are very similar
05:43 - do you want to select these as well we
05:45 - did so I selected deaths and then as
05:47 - soon as I selected deaths it actually
05:49 - automatically selected recovered now the
05:51 - reason for that is because this can
05:53 - actually do like pattern recognition so
05:56 - as soon as you select a few items it
05:57 - will automatically try to select all the
06:00 - other items that are related to those
06:02 - items that are similar now that saves
06:04 - you a ton of time and that's pretty
06:05 - useful now what we're gonna do is we
06:07 - won't actually get these number values
06:08 - as well right and I want to link those
06:11 - two with this so I want to link them to
06:13 - coronavirus cases so that if we look
06:15 - here in our data that's being generated
06:17 - we can see we have total we have a bunch
06:19 - of entries and they each have a name now
06:21 - I want to make sure that these entries
06:23 - that have the name coronavirus cases
06:24 - have the correct value right so what I
06:27 - do is I go to total I click this little
06:29 - plus button on the side here and I hit
06:32 - relative select so when I do that I can
06:35 - click on one of the items have already
06:37 - selected which is this case writer this
06:39 - coronavirus
06:40 - cases and then I'll bring a little arrow
06:41 - and I can select the item that I want to
06:43 - relate to it which in this case is this
06:46 - value so I'll select that and now we can
06:48 - see it's a selection one and it shows me
06:51 - the value so if I want to change that
06:52 - name I go up here and I change it so
06:53 - I'll say instead selection one we'll
06:55 - call that value so now we have the name
06:58 - that corresponds to the value and what
07:00 - I'll do next is I'll select deaths I'll
07:03 - select its value and again notice it
07:05 - automatically does that for recovery so
07:08 - as soon as you do two selections it will
07:11 - automatically try to pattern match and
07:13 - if there's something that you don't like
07:14 - you can unselect it or you can select
07:16 - other things as if it missed it so
07:17 - that's how that works
07:18 - so notice now we have this JSON format
07:20 - down here and that's the data they will
07:23 - be able to access afterwards that's what
07:25 - it looks like and it this just generates
07:26 - it for you as you go so I think you can
07:28 - probably appreciate it why I'm using
07:29 - this tool because for a mass amount of
07:31 - data like this this is way easier and I
07:33 - think this is a pretty useful tool it's
07:35 - pretty cool and it's free so we can use
07:36 - it so let's now hit a new selection on
07:39 - the page so we have this total section
07:42 - right so total is right here but I want
07:44 - to make a new section inside of this
07:46 - kind of JSON so what I'm gonna do is go
07:48 - on page I'm gonna do new select and I'm
07:51 - gonna select now the name USA so I'll
07:54 - select USA there we go and now is select
07:57 - Spain so yes I'll do a check mark on
07:59 - that and we should see that it selects
08:01 - almost all the countries it misses a few
08:02 - though so since it missed some I'll
08:04 - select UK and then when I do that it
08:07 - notices out you want all of them and it
08:08 - selects all of them now if you want to
08:10 - see how many items you've selected you
08:12 - can see that over here it says like 212
08:14 - and what I'm gonna do inside of this
08:16 - select is put what I selected so in this
08:18 - case I selected country so we have total
08:21 - and we have country now you can see
08:23 - where it's it's extract that is like I'm
08:26 - taking the value from there so you can
08:28 - see we're taking the name so if I go it
08:30 - has a name and then it has a URL now I
08:34 - don't want the URL so I'm gonna delete
08:35 - it but it's by hitting that trash button
08:37 - like that I new seems pretty intuitive
08:39 - on how this works so what I'll do now is
08:42 - I want to link the the names that I've
08:44 - selected with their cases so we'll use
08:46 - the relative select tool I'll click plus
08:48 - relatives select I'll select the name
08:51 - and then I'll select the data I want
08:52 - which in this case is totally
08:54 - now I do need to name this so let's name
08:56 - this total underscore cases like that
08:59 - and now if we look here and we scroll
09:01 - down it's only doing it for us a yak so
09:05 - I need to select one more so we can see
09:06 - that for us H shows the total cases now
09:09 - for Spain what I'll do is I'll select
09:11 - again the cases here the pattern
09:13 - matching will happen and we'll notice it
09:15 - selects all of them except it forgets a
09:17 - few so let's link that up when we link
09:20 - that up now give it a second and all of
09:22 - them are select so if we scroll down we
09:25 - can see that it's showing us pretty much
09:26 - all of the total cases and it says 207
09:28 - more which we will get when we actually
09:30 - retrieve this data so let's do one more
09:32 - selection I want to actually add another
09:34 - relative select inside of here so we'll
09:37 - select USA and now we'll select the
09:39 - total deaths because all I really care
09:41 - about for my project is the cases and
09:43 - deaths but for you guys feel free to
09:44 - select as many values as you want so
09:46 - let's keep going and keep going ok so
09:51 - that should already be selected nice so
09:53 - now let's do UK and give it a second and
09:56 - we can see it selects pretty much all of
09:58 - them now notice there's a few gaps here
10:00 - so you'll see that this number might be
10:01 - a little bit smaller than some of the
10:03 - other values that's just because some
10:04 - countries don't actually have values for
10:06 - that and then I'm gonna call this total
10:08 - deaths like that okay so let's review
10:11 - our JSON we can see we have the name
10:13 - total cases total deaths looks good to
10:16 - me
10:16 - so what I'm gonna say is all right I'm
10:17 - done let's click get data now what get
10:20 - down it does is gives us a little
10:22 - interface that we can actually now run
10:24 - kind of the program we just created and
10:26 - scrape that website so let's click run
10:28 - when you click run what's gonna happen
10:31 - is it's actually just gonna scrape the
10:32 - website right so if we wanted to update
10:34 - the data that we had we would have to
10:36 - run this again and I'll show you ways
10:38 - that we can do that from the Python code
10:40 - so we don't actually have to go back
10:41 - into this tool this is just the first
10:43 - time we want to do this we do it in the
10:45 - tool so we set up what's called a run
10:47 - and then we can rerun that we can run
10:50 - another run like it's that's kind of the
10:52 - way it works we have projects and then
10:54 - we have runs and each run is like
10:56 - running your project and updating the
10:59 - data and you can access each of those
11:00 - runs which means like say every morning
11:02 - you wanted to run this and you want it
11:04 - to track you know the increase in cases
11:06 - and all of that
11:07 - this already does it for you but you
11:08 - could do that and you can access all of
11:10 - the runs that you've done in the past so
11:12 - there we go we can see our downa is
11:14 - ready this does take a few seconds
11:16 - because this actually runs on their
11:17 - servers it doesn't run locally which
11:20 - means that you're not using any of your
11:22 - system resources to do this web scraping
11:24 - you're using their servers and that's
11:25 - why they have some paid plans so if
11:27 - you're like an enterprise or something
11:28 - and you're doing this then you can just
11:30 - use their servers to do it and obviously
11:32 - they need to charge for that so here we
11:34 - have that we can download our data in a
11:36 - CSV in Excel format we can download it
11:38 - in JSON or we can use the API now we're
11:41 - actually going to use the API to do this
11:42 - which means we're gonna send a web
11:44 - request to this API and it will actually
11:47 - give us the data back now you could
11:49 - download the data if you want that's an
11:51 - option of course as well but it's just
11:53 - better probably to use this API for our
11:54 - purpose so since we're gonna use this
11:56 - API we need the details from this run so
11:59 - we need the API key
12:00 - we need the project token and we need
12:01 - the run token so let's grab those values
12:04 - and make sure we leave this open and
12:05 - let's go into a Python files I'm going
12:08 - to open one up here and let's start
12:09 - inserting those as variables so let's
12:11 - say API underscore key is equal to and
12:15 - then we'll copy the API key which is
12:18 - right here let's go project underscore
12:22 - token this is probably the most
12:23 - important one I actually don't know if
12:25 - we need the run token and it will access
12:27 - that and then run underscore token
12:32 - equals and then we'll steal that run
12:34 - token all right so there we go we have
12:37 - the data from this that we need now I'll
12:39 - show you the URLs and how we actually
12:41 - access this from like the parse of API
12:44 - but that's what we need from this so we
12:45 - can actually close that project now all
12:48 - right now what we're gonna do the first
12:50 - thing we actually need to do is you need
12:51 - to install something in pip so for this
12:54 - project we're gonna use a module called
12:55 - requests so import oops not all capitals
12:59 - import requests like that now request is
13:03 - a third party module to install it you
13:05 - tube tip install request now this is
13:10 - using something called the package
13:12 - installer for Python I don't know the
13:13 - formal name but that's pretty much what
13:15 - it is
13:15 - so if you have python on your system it
13:17 - automatically comes with pip although
13:19 - when you run this command
13:20 - you're gonna get one or two results
13:21 - you're gonna get that it's installing it
13:23 - already extols already installed and
13:26 - like this worked or you're gonna get
13:27 - something that says pip is not a
13:29 - recognized command now if you're on Mac
13:31 - or Linux or a Bunty or whatever OS
13:33 - you're on try pip 3 so if you're not on
13:35 - Windows try pip 3 and then install
13:39 - requests if you are on Windows you're
13:41 - gonna try pip and if those don't work
13:43 - for you then you have your pip kind of
13:45 - misconfigured it's not on your system
13:46 - path so I'm gonna leave a link to a
13:48 - video and a card in the top right which
13:51 - I guess for you is gonna be that and
13:53 - from there it'll show you how to fix pip
13:55 - so I know the video doesn't say like how
13:57 - to fix pip it says how to install PI
13:58 - game but it will show you how to
14:00 - reconfigure your pip so that that's
14:02 - working properly so follow that video
14:04 - and then again try to install the
14:06 - request module and a lot of a few other
14:08 - modules need we need to install later on
14:10 - ok so once you install requests now what
14:13 - we're actually gonna do and I'm gonna
14:14 - open up my other window here so because
14:17 - I don't remember these URLs off by
14:18 - hearts let me go coronavirus let's open
14:21 - that what we're gonna do is actually
14:23 - call a get request on the API from Parsa
14:27 - now I need to copy in this URL because I
14:29 - can't remember it off the top of my head
14:32 - and then let's get it so let me move
14:34 - this over here alright so the request
14:37 - that we're looking for is something like
14:39 - this so let me just copy this in and
14:40 - I'll show you how this works okay so
14:42 - let's go like that
14:44 - oops what the heck why is my copy and
14:46 - paste not working today
14:47 - let's go here copy all right and paste
14:54 - ok sweet so let me zoom out so this is
14:56 - the URL that we need to use to access
14:59 - our our information like art to get the
15:02 - data from that run that we just did and
15:04 - it's gonna return that to us in a JSON
15:07 - format but the idea is that we have this
15:10 - which I'll leave in the description
15:11 - again http:www.youtube.com/watch v have
15:19 - here is actually the project token so
15:21 - we'll put that in so projects what the
15:25 - heck is happening here so project token
15:27 - like that and then the params is equal
15:30 - to self dot params but
15:33 - we gonna put here cuz I just stole that
15:34 - from another piece is API underscore key
15:39 - I think that's what it is API key Jia :
15:42 - API key so this is kind of like the
15:45 - authentication for this get request we
15:47 - need to give our API key and the project
15:49 - token and what we're saying is let's get
15:51 - the last ready run so the last run that
15:54 - we did that is ready and let's get the
15:56 - data from that so we're saying the
15:58 - response is equal to request dot get and
16:00 - then I will show you that I can actually
16:01 - print this out once I format it and
16:03 - we'll get all the data so if I import
16:05 - the module of JSON which is built into
16:08 - Python you shouldn't need to install it
16:09 - then what I can say is data equals json
16:12 - dot i believe it's loads response and I
16:17 - think I can say response data um not
16:20 - what am I saying request response dot
16:23 - and I believe it's data like that so
16:26 - this should hopefully work again this
16:28 - will be in the description if you guys
16:29 - need to use this I'll link the code
16:30 - somewhere there as well so you can copy
16:32 - this but this is the URL I'm using an F
16:34 - string
16:35 - I put the project token here params API
16:38 - key equals API key for that's the up for
16:40 - the authentication and now if I print
16:42 - out data and I run this let's see I get
16:46 - an error what's the issue object has no
16:48 - attribute data so I think I can actually
16:49 - just leave it like response dot text
16:52 - that should work yeah okay so this needs
16:54 - to be response text not data but now if
16:57 - you see it gives me all of this data and
16:59 - we have you know China total cases
17:01 - 82,000 deaths
17:02 - 4,000 whatever and we have the total
17:05 - information for coronavirus cases value
17:07 - is that right and that's the idea so we
17:09 - can do something like that
17:11 - so now that we have this data all we
17:13 - need to do is kind of make some
17:14 - interface that's gonna let us access
17:16 - this data nicely so what we're gonna do
17:19 - for that is actually set up a class
17:20 - which we'll get started with now alright
17:22 - so I took a break there to grab a hall's
17:23 - cuz my throat is killing so if you hear
17:25 - that no that's why I have a holes in my
17:27 - mouth right now
17:28 - but what we're gonna do now is set up a
17:30 - class it's actually gonna let us kind of
17:32 - parse through this data and look at it
17:34 - nicely because right now right if I go
17:36 - to data I can go like total what did I
17:40 - even call this title call this total
17:42 - cases I guess we'll have to I'll have to
17:44 - look at this again cuz now I forget so
17:45 - let me print this
17:47 - print so we print this we can see that
17:50 - we have the keys of total okay so that's
17:53 - the first one and I think the other key
17:55 - that we had was country okay
17:57 - so let's look at data total so data
18:01 - total gives us now just the information
18:03 - related to total and if we look at data
18:05 - of country like that then it gives us
18:09 - all of the country related data so
18:11 - essentially we need a way so that we can
18:13 - find like all of the data related to USA
18:16 - or Italy really easily without having to
18:19 - like go to the check every single time
18:22 - so what I'm gonna do is I'm actually
18:23 - gonna set up a class and I'm gonna call
18:26 - this class data now inside if you were
18:28 - gonna define the NIP method we're gonna
18:31 - take a self we're gonna take a API key
18:35 - actually API key and we're gonna take a
18:37 - project token like that okay so now that
18:42 - we have that we'll say self dot API key
18:44 - equals API key and we'll say self dot
18:46 - Project token equals project token now
18:50 - I'm also gonna set up self dot params
18:52 - now this is gonna be the authentication
18:54 - so this is what we have to pass with
18:56 - every request to set yes this is me I
18:58 - have access to this so we're gonna say
19:00 - API key Quan and I actually I don't even
19:03 - think I need to do quotation right so
19:06 - maybe I do let's do it yeah I think I do
19:07 - API key is the self dot API key all
19:11 - right there we go self DUP Rams API key
19:14 - is self that API key so now we have that
19:17 - information what I'm gonna do is
19:18 - actually set up a method called get
19:22 - updated data or get data
19:25 - so what get data is actually gonna do is
19:28 - it's going to call this request and set
19:33 - the data attribute for this this object
19:35 - so we're gonna say self in here and then
19:38 - we're just gonna copy what we have here
19:40 - and put it here so this will say
19:43 - response equals that and then where'd
19:48 - the rest of my stuff go okay so I guess
19:50 - it just didn't copy that other line
19:52 - that's great this one will say self dot
19:55 - data equals json dot loads s
19:59 - it's Mons dot txt okay so essentially
20:04 - the reason I'm doing this in here is I
20:06 - want to make it so that I can call this
20:08 - method at any point and update the data
20:10 - that we have because notice is this last
20:13 - ready run that means it gets the most
20:16 - recent run for this project because what
20:18 - I can do right as I can go back to parse
20:20 - up and I can run this again if I want to
20:22 - so I can open up that project so let's
20:25 - go I guess it's gonna be this one the
20:26 - most recent one and I can click get data
20:28 - and I can do another run so what I want
20:31 - to do is make sure that this method that
20:33 - I have here is giving me the most recent
20:35 - run so what I'll do then is I'll call
20:37 - self dot get data and now what I've done
20:40 - is I'm pretty much setting up this data
20:41 - variable and that's pretty much how that
20:44 - works right so we'll get the data and
20:47 - yeah that's there we go
20:49 - so we have this set up and now we've
20:50 - done the exact same thing that we did
20:51 - before if I wanted to instantiate
20:55 - that ax equals data and here I'd have to
20:58 - pass the API key and the project token
21:00 - so I guess I could just put API key
21:03 - project token and what I can do is even
21:06 - just print I'm you know data dot data as
21:10 - weird as that is and this should give us
21:12 - the same result and it does so we've set
21:14 - up that class and now that works so what
21:16 - I want to do is set up a few methods in
21:18 - here they give us specific data so the
21:20 - first method that I want to do is set up
21:22 - one that gives us the total case so
21:23 - actually define get underscore total
21:26 - underscore cases let's put a self inside
21:30 - here and then what we'll do is we're
21:34 - just gonna return self data we'll put
21:38 - inside of here I guess total and then we
21:41 - need to figure out what that total cases
21:43 - was so I think that the key for that was
21:46 - the name equals coronavirus cases okay
21:49 - so we need to find an entry that has the
21:51 - name of coronavirus cases so to do that
21:54 - what we're gonna do is we're gonna have
21:56 - self duck get down a total and watch you
21:58 - have to modify this a bit so we'll say
22:01 - actually I'm just gonna say data equals
22:03 - self dot data total we'll say for
22:06 - content in data let's say if content
22:11 - name equals equals oops not that I
22:16 - wanted coronavirus cases I don't know
22:18 - why my ctrl C is uh is not working here
22:21 - then we'll paste that there so
22:23 - coronavirus cases and we'll go here and
22:26 - what we'll do then in this case is
22:28 - return content so if the content when
22:32 - we're looping through data if the name
22:34 - is equal to coronavirus cases then we
22:36 - can return content value now the logic
22:40 - behind this is that we will get this
22:43 - list right so this list up to here when
22:46 - we index at total then what we'll do is
22:49 - we'll loop through all of these will see
22:51 - if one of them has the name equal to
22:53 - coronavirus cases and if it does we'll
22:55 - simply return the value of that kind of
22:57 - like content of that little dictionary
22:59 - so in that case that will give us the
23:01 - value so we can do a very similar thing
23:03 - here instead of get total cases now
23:05 - we'll do get total deaths and okay I
23:08 - keep forgetting that I've like messed up
23:09 - my my copy and paste key here somehow so
23:12 - let's let's just use the built in so get
23:15 - total cases
23:15 - let's do get total deaths and then here
23:19 - instead of colonel virus cases i believe
23:21 - this just said deaths so we can check if
23:24 - we go here and look at this data it does
23:25 - just say deaths : so that will now give
23:28 - us the total deaths and if we wanted
23:29 - recovered we could set that up as well
23:30 - except i'm just gonna leave it at this
23:32 - for now okay so now we have get total
23:34 - cases and get total deaths let's test
23:37 - this so data get total cases let's run
23:41 - that and let's see we get the value
23:43 - three point six eight seven million nice
23:45 - and now let's do deaths okay and two
23:50 - hundred fifty-five thousand one hundred
23:51 - thirty so pretty straightforward this is
23:53 - pretty easy to do now all we need to do
23:55 - is get the information related to
23:57 - countries so let's do that let's get on
24:00 - define gets country do we want get
24:05 - country data yeah let's just say get
24:06 - country data and what this will do is
24:08 - just return all of the data for that
24:10 - country
24:11 - so we'll say get country data will put
24:13 - self we'll put the country here it's
24:15 - gonna be a very similar thing to what
24:16 - we've done here except with countries so
24:18 - we'll say data equals self data and i
24:22 - understand i might be confusing you by
24:23 - using too many datas here
24:25 - self data inside of here we need country
24:28 - because I believe that's what I called
24:29 - it so country like that and we'll say
24:31 - for Khan tent in data if content name
24:39 - dot lower this is important make sure
24:42 - it's not lower is equal to country dot
24:46 - lower will make sure that it doesn't
24:47 - matter about the capitalization then
24:49 - what we'll do is we'll return the
24:53 - content like that so there we go
24:55 - and I guess we can make it here if
24:58 - there's nothing for what we're asking
24:59 - we'll just return like blank I guess
25:03 - like we'd to return zero and then in
25:05 - this case we can return zero as well now
25:09 - I'm doing it as a string just cuz we're
25:10 - gonna be like saying it from the voice
25:13 - assistant but you could return an int
25:14 - value if you wanted just note that these
25:16 - values by default are strings so like
25:19 - all of the value inside of content is a
25:21 - string so if you want to convert that
25:23 - you'll need to convert that to an
25:24 - integer alright so let's try to get the
25:28 - country data for something so let's say
25:30 - get country data
25:32 - let's try Canada where I live run and
25:35 - there we go named Canada total cases
25:37 - total deaths so now if I got that and I
25:39 - want to access just the total cases I'd
25:41 - say total underscore oops cases like
25:46 - that and there we go we get sixty one
25:48 - thousand and that's the idea behind this
25:50 - and how that works okay so pretty much I
25:53 - mean this is kind of the only thing we
25:54 - really need for getting the data right
25:56 - so you've set up that class and now that
25:57 - we've done that we can start using the
25:59 - voice assistant and accessing data from
26:02 - it like this that's the idea we just
26:03 - want to set up a little interface so
26:05 - that it's really easy to grab data and
26:07 - of course you can make this more robust
26:09 - more complex I'm just doing it quickly
26:10 - because again the idea is not to go
26:12 - overboard just to show you what you need
26:14 - to know and then you can customize from
26:15 - there alright so let's leave that we'll
26:18 - add some stuff later we'll look to find
26:20 - data and now we need to set up the voice
26:22 - assistant now setting up the voice
26:24 - assistant is kind of a pain there's
26:26 - actually quite a few things we need to
26:27 - install so I'm just gonna open them up
26:29 - to make sure I don't forget to show you
26:31 - anything um but I do have a video
26:34 - tutorial on my channel showing this but
26:36 - I do have a requirement stop PI file
26:38 - here all
26:39 - try to link this in the description
26:40 - remind me if I forget but we need to
26:42 - install all of these modules so make
26:45 - sure you have your pip working and we're
26:46 - just gonna go through one by one I know
26:48 - the ones like the orders so we're just
26:50 - gonna say pip install the first thing
26:53 - we're gonna install is actually called
26:54 - PI win32 now you might not have this
26:58 - module this might not work but if you're
26:59 - on Windows you're gonna need this so pip
27:01 - install PI win32 I already have that but
27:04 - let's install that so PI 132 and then
27:06 - we're gonna install speech recognition
27:08 - and PI TTS x3 I think which is
27:11 - text-to-speech so let's do speech
27:14 - recognition so pip install speech
27:16 - recognition recognition I think I
27:19 - spelled that right there we go instance
27:21 - already satisfied notice these capitals
27:23 - are important so it's speech recognition
27:25 - and again I'll put this file in the
27:27 - description
27:27 - let's pip install pi
27:31 - TTS x3 I think that's right yes it looks
27:35 - like it
27:35 - it's install we can see that I already
27:37 - have that satisfied but again we're
27:38 - gonna need that and then the last one
27:40 - that we need to install is actually
27:42 - called pi audio now you probably won't
27:45 - be able to do it by just doing this so
27:47 - the default install is pip install pi
27:49 - audio but when you do that chances are
27:51 - you're gonna run into a bug or at least
27:53 - I did a bunch of times so what we
27:55 - actually need to do to install pi audio
27:57 - is go to a link that I'm gonna leave in
27:59 - the description it's in it's here so
28:01 - it's Python extension packages for
28:03 - Windows and this is specifically for
28:06 - Windows but because this wasn't working
28:07 - on Windows I had to do this we have to
28:09 - go to PI audio which is right here and
28:11 - find the version that corresponds to our
28:14 - version of Python so if I go and I type
28:17 - Python you can see that I have PI python
28:20 - version three point eight point two so
28:22 - what I need to do is find the PI audio
28:23 - version and starting notice it's 64 bit
28:25 - as well find the PI audio version that's
28:28 - AMD 64 and that's Python 3/8 now if you
28:31 - guys are on 37 you're gonna do cp3 seven
28:34 - right and then whatever 32 or 64-bit and
28:36 - if you're looking to determine what
28:38 - version of your Python go into your
28:40 - command prompt or your terminal window
28:42 - and type Python and then just look it'll
28:44 - show you here but I think you can also
28:46 - do something like Python - - version I
28:50 - think that shows you yeah so python - -
28:52 - very
28:53 - but you won't get the 64 or 32 bet so
28:55 - you might just want to type pipe on it
28:56 - and see what that is
28:57 - so anyways once we get here again link
29:00 - in the description download the
29:01 - appropriate file so I'm gonna download
29:03 - this one and just keep track of where it
29:06 - downloads because you're gonna need to
29:07 - know that so I'll download that
29:08 - downloads you notice it was already
29:09 - there and what we'll do now is I'll show
29:12 - you a little shortcut to actually be
29:14 - able to install this from your command
29:16 - prompt so if you're on Windows go to
29:18 - wherever you installed that so in this
29:19 - case downloads in this little top bar up
29:22 - here where it usually would type in like
29:24 - the URL I don't want to say URL the path
29:26 - to what you're looking at type CMD it'll
29:29 - open up a command prompt window and
29:31 - notice that here where your directory is
29:33 - will be inside of the directory that you
29:35 - did that so if I went to like my raw
29:37 - video recordings and I did CMD it would
29:40 - open it in raw video recordings so
29:42 - that's cool and it's just a little trick
29:44 - so that you don't have to let go CD
29:46 - downloads and and change directory
29:48 - manually anyways what we're gonna do now
29:50 - is do pip install and then this is gonna
29:52 - be PI audio so I'll just type P + tab to
29:56 - PI audio like that so we're gonna just
29:59 - install that we you'll file this is a
30:01 - pip wheel file this is pretty much the
30:03 - same thing as when you install PI audio
30:04 - it just will grab it from the internet
30:06 - so hit enter with that wheel file and
30:09 - then it should install app for you so
30:11 - that's pretty much how you do this on
30:13 - this again there's many ways this could
30:15 - go wrong leave a comment if you're
30:17 - having issues but the idea being that
30:18 - you want to download from this site the
30:21 - correct version and then install it like
30:22 - that okay so now that we have that we're
30:25 - gonna actually start working on the
30:26 - voice assistant now that's going to
30:28 - involve a few imports
30:29 - so the first import is we're gonna say
30:31 - import PI TTS X is it three I think
30:36 - that's right I'm just gonna open my
30:37 - other file to make sure that I'm not
30:38 - miss getting us here so let's get this
30:41 - open oh I see yeah pi TTS x3 so that's
30:44 - PI text-to-speech version 3 I guess and
30:47 - we're gonna import speech recognition
30:50 - which is actually speech underscore
30:51 - recognition as SR now that we have that
30:56 - the only other oops not will do it as SR
30:59 - we're gonna import re which stands for
31:01 - what is that reg X so reg X search
31:04 - patterns and we should have pretty much
31:06 - all the
31:06 - which we need for right now so let's go
31:08 - down here and let's start setting up a
31:11 - way that we can actually have the
31:12 - computers speak to us this is pretty
31:14 - easy we're just gonna define speak with
31:17 - text and then what we're gonna say is
31:19 - engine equals and I'm just looking at my
31:21 - other screen cuz I'm not gonna memorize
31:22 - all the syntax pi TTS x3 dot and knit so
31:26 - initialize the engine and then what
31:28 - we're gonna do is say engine dot say
31:31 - text and that engine dot i think it's
31:35 - say and weights run and weights as what
31:38 - is run and weight all right
31:41 - so what we're saying is this yes
31:43 - function right here takes some text we
31:45 - initialize the PI TTS x3 engine which is
31:48 - PI text-to-speech then we say and we
31:50 - wait for this to run until we exit
31:52 - so let's actually test this let's go
31:54 - speak hello now remember that you're
31:58 - gonna have to have your speakers set
31:59 - properly so if you go to audio here I'm
32:01 - on Windows it's gonna be different for
32:02 - mac change your audio settings to be
32:04 - what you want them to be so it comes out
32:07 - of the correct things you see mine's
32:08 - linked to my monitor which links to an
32:09 - external speaker but that's important
32:11 - because you know don't yell at me that
32:13 - didn't work when your speakers aren't
32:14 - configured so let's run this and see if
32:16 - it says hello there you go so I hope you
32:19 - guys heard that but it did say hello
32:21 - what is this thing still popping up on
32:23 - the left side here I can't get rid of
32:24 - this okay anyways no we'll just have to
32:27 - leave it for now okay so speak hello
32:30 - there we go said hello that's working
32:31 - okay so the next thing we need to do is
32:33 - define a function that can actually take
32:35 - our audio so we need to be able speak
32:37 - and we need to be able to so it needs to
32:39 - be to speak and let me spell to listen
32:41 - to us so this um this is a lot of people
32:44 - have issues with this again make sure
32:46 - your microphone is set up correctly and
32:48 - make sure it's not being used by another
32:50 - process so in this case I'm actually
32:52 - fortunate that my OBS doesn't mess with
32:54 - this mic cuz I'm using the same mic for
32:56 - OBS as I am to speak into this thing but
32:59 - if your mic is being used by another
33:01 - process you might have an issue doing
33:03 - this so just keep that in mind while you
33:05 - go through this tutorial so let's define
33:07 - get underscore audio like that we won't
33:11 - take any parameters we're gonna say R
33:13 - equals s r dot in this case recognizer
33:16 - now recognizer is just the speech
33:18 - recognizer I believe you
33:19 - actually change languages and stuff with
33:21 - this although I haven't looked into it
33:22 - that much
33:23 - we're gonna say with with SR dot
33:27 - microphone so like that as the source or
33:31 - using a context manager we're gonna say
33:33 - audio equals r dot listen and then
33:36 - inside here we're gonna put these source
33:38 - again I don't have this memorized so I
33:40 - just have to look on my other screen and
33:41 - then we'll go through it after okay
33:43 - so we're saying audio equals r dot
33:45 - listen source so you know listen on the
33:48 - source for some audio as soon as it
33:50 - starts hearing something it will start
33:52 - recording that and we'll store that
33:54 - inside the said variable here so we're
33:55 - gonna say is try because this does some
33:58 - time mess-up so we need to put in a
33:59 - try-catch r don't recognize google so
34:03 - these are the different ways that you
34:05 - are the different things you can use so
34:06 - you can use different engines so like
34:08 - our dot you can use Bing Google hound
34:13 - defy IBM Sphinx whatever Google clock
34:15 - these are like the different assistance
34:17 - I think you can pick I'm gonna pick
34:19 - Google just because I've used that and
34:21 - it works
34:21 - and inside of here on a put audio as the
34:25 - listening source so it's gonna recognize
34:27 - pretty much like it'll record it'll save
34:30 - that recording like in memory
34:32 - send that to this recognizer this
34:34 - recognizer will actually listen to that
34:36 - and then tell us in a text format what
34:38 - was said now this is pretty good like
34:40 - this hardly messes up but it does make
34:42 - mistakes sometimes so just keep that in
34:44 - mind all right so now we're gonna say
34:46 - accept exception as E and then we'll
34:52 - just print exception : eat and I think I
34:58 - need to put that in a string so we will
35:01 - like that okay
35:03 - so there we go so that is pretty much it
35:05 - now we'll return said dot lower and
35:09 - notice that if this messes up it will
35:11 - just return a blank string so that's the
35:14 - idea behind this that we're going to set
35:16 - up the recognizer set up the microphone
35:18 - listen on a source this will actually
35:20 - record the audio and then as soon as
35:22 - that's done so it's stopped listening
35:24 - it will pass that to the Google
35:26 - recognizer which will then translate
35:28 - that into some text if that works
35:30 - properly will return set lower
35:32 - now we can get some audio so let's
35:34 - actually print out we get audio and see
35:37 - what this does
35:39 - hello and there you go right so it says
35:43 - hello so we can speak into the
35:45 - microphone and we'll get audio and now
35:47 - all we need to do is pretty much set up
35:48 - a loop set up some speech patterns and
35:51 - then you know speak back listen speak
35:53 - back listen which is you know easier
35:55 - said than done but still it's not that
35:56 - hard so let's define a main function we
35:59 - don't have to put this in a function but
36:01 - I like to just so I can call it from
36:02 - other modules if I wanted to and let's
36:04 - set up a one true loop and then here
36:07 - what we're gonna do is just speak or
36:09 - we're gonna print sorry we're gonna
36:11 - print listening and then we're gonna say
36:14 - text equals get audio so essentially
36:18 - what we're gonna do is every loop we're
36:20 - gonna listen as soon as they start
36:22 - saying something we'll record we'll get
36:24 - their audio and then we'll loop and look
36:25 - at their audio and see if we want to
36:27 - respond to that in some way now there is
36:29 - some variables that I need to set up so
36:30 - the first thing I'm gonna do is print
36:32 - start it just so we know because
36:34 - sometimes this takes a second to get
36:36 - started so we'll say started program
36:39 - like that then what we're gonna do is
36:41 - we're gonna say the end underscore
36:44 - phrase equals and this is just how we
36:47 - end this loop I'm just gonna name it
36:49 - stop so essentially if stop is inside of
36:53 - any anything we say so if we here stop
36:55 - at all we'll just stop the loop so to do
36:58 - that I'm gonna say if text dot I guess
37:01 - find end phrase so if it finds stop
37:05 - anywhere in there then what we will do
37:08 - is we will break that loop like that so
37:10 - that's how we quit so we can add a
37:12 - little comment we can say stop loop
37:15 - there something like that okay so now
37:17 - that we have that what I'm gonna do is
37:19 - actually set up something on data that I
37:22 - needed to do so there's actually
37:24 - something that I want to get which is a
37:26 - list of all big countries now the reason
37:28 - for that is I want to see if the person
37:31 - says any country in their text and if
37:34 - they do then I know that I'm gonna be
37:36 - looking for country specific data but
37:38 - the only way for me to know if they've
37:40 - said about country is to have a list of
37:41 - all the countries so inside of my data
37:44 - class I'm gonna set up a new method
37:46 - I'm gonna call this define get list of
37:52 - countries like that now and here we'll
37:54 - put self and what we'll do is just loop
37:57 - through all of the names of the
37:58 - countries and return them
37:59 - so we'll say I guess countries equals
38:03 - that we couldn't do this in one line but
38:06 - I just want to you know spread it out so
38:08 - it makes sense to everyone
38:09 - and we'll say for country in self data
38:13 - and I guess if we put here country then
38:18 - what we'll do is we'll say countries dot
38:20 - a pen so add to the end the country name
38:28 - like that so this should give us a list
38:30 - of countries in fact we might actually
38:32 - want to make this a set we'll see you
38:36 - know what we'll do list of countries for
38:37 - now and then we can put it into a set
38:38 - later so then we'll return countries
38:41 - like that and in fact let's test that
38:43 - out so we haven't even called any of
38:45 - these functions so they won't run so
38:47 - let's call data dot get list of
38:51 - countries and let's print out this value
38:53 - and see if that works
38:54 - so print okay and you can see that here
38:58 - we go we get a list of countries and now
39:00 - what I'll actually do is I'll make these
39:02 - dot lower so dot lower it like that and
39:06 - now these are automatically all
39:08 - lowercase and we can see we have USA
39:09 - Spain Italy UK and they actually are
39:11 - organized by most amount of cases so we
39:13 - could use that as well if we wanted to
39:16 - but yeah that's that's how we get that
39:18 - okay so now we have bounce what we're
39:21 - gonna do is we're gonna start setting up
39:23 - a few search patterns so search patterns
39:25 - are pretty much what we're looking for
39:27 - in a text like what question we're
39:30 - looking at so I'm gonna say totaled
39:32 - underscore patterns like this is equal
39:36 - to a dictionary and I'm gonna start
39:38 - defining reg X search patterns and I'll
39:41 - talk a little bit about how reg ex works
39:43 - that I want to look for in their text
39:45 - essentially like we kind of need to come
39:47 - up with some phrases that we're going to
39:51 - try and detect so in my case before I'm
39:53 - just looking at my other screen I had
39:54 - something like if the word total in the
39:57 - word cases was in their text
39:59 - then we would return to them or speak
40:01 - back the total cases so to do something
40:03 - like that we say our compile and again
40:06 - re sory not R stands for rag X and
40:09 - inside of here we put a reg X search
40:12 - pattern now I'm not gonna go through
40:14 - what reg X is and how it works it's
40:15 - pretty easy but it does take a little
40:17 - bit of practice to get used to but the
40:19 - patterns that I'm gonna show you are
40:21 - pretty much all you'll really need to
40:23 - use unless you want to make this like
40:24 - way more complex but I will say that I'm
40:26 - not a master or pro at this so there's
40:28 - probably a better pattern to use than
40:29 - what I'm using
40:30 - but what we're gonna do is we're gonna
40:31 - say slash W / S Plus total we're gonna
40:37 - copy this we'll talk about this does in
40:39 - a second and then cases and I keep
40:42 - forgetting my damn copy and paste
40:43 - doesn't work so I have to use this I set
40:45 - like a key bind that messed it up okay
40:48 - so there we go
40:48 - so something total cases and we're gonna
40:51 - map that to something now the idea here
40:53 - is that I want to make a dictionary that
40:55 - has patterns that map to a function now
40:59 - the function is gonna be what value I
41:01 - want to speak out so what I want to
41:03 - return what I want to say the reason for
41:05 - this is gonna make it really easy to
41:08 - loop through all the patterns check if
41:10 - any of the patterns match our text and
41:12 - if they do just call the function we
41:14 - defined that matches that pattern right
41:16 - and and return that and speak that so in
41:19 - here instead of like calling a function
41:20 - I'm just gonna put the function I would
41:22 - call which in this case is data dot and
41:26 - I guess this is get total cases so I
41:30 - forgot to say what this reggae's pattern
41:33 - is this w / + what this says is any
41:37 - number of words so we're gonna look for
41:39 - any number of words then total then any
41:42 - number of words then cases that's what
41:45 - that means now I believe you there has
41:46 - to be at least one but the idea being
41:48 - like if you said how many total number
41:51 - of cases are there that would still work
41:53 - because we look for any number of words
41:55 - and then total any number of words and
41:57 - then cases right and if you wanted to
41:59 - make it so you could said like total
42:00 - number of cases remove that and that
42:04 - will work you just kind of have to mess
42:05 - with these red X search patterns and
42:07 - think like if what you typed in will
42:09 - match that pattern again like I'm not a
42:11 - pro at this so I really don't
42:13 - like explaining how all of this works
42:15 - but else so what I'm going to do is
42:17 - actually not call this function I'm just
42:19 - gonna leave it like that so without the
42:21 - curly braces the reason for that is
42:23 - actually I just want to define what I
42:25 - would call I don't want to actually call
42:27 - it and you can write this there's no
42:29 - nothing wrong with what I've written so
42:31 - far so I'm not gonna call it until we
42:33 - actually see that this pattern is
42:35 - matched and then we'll save us a little
42:37 - bit of like computing time and stuff too
42:38 - okay so now we have that I'm just gonna
42:40 - copy any other patterns that I have just
42:43 - to save us a bit of time and I'll go
42:44 - through what how they are and what they
42:45 - work okay so here we go so we have all
42:49 - these patterns now essentially what this
42:51 - is saying is I've just defined like two
42:54 - patterns for each of them so that I
42:55 - don't have to say anything in between
42:57 - total encases I can say something and
42:59 - then total cases and then what that will
43:02 - do is return to me data get total cases
43:05 - the same function we had from before now
43:07 - I've done the same thing with deaths
43:08 - it's the exact same except cases have
43:10 - been replaced with deaths and obviously
43:12 - the function we're gonna call now is get
43:13 - total deaths not get total cases so
43:16 - that's the idea behind these total
43:17 - patterns so let's now look at how we
43:19 - would actually use this and of course
43:21 - why my tab key doesn't seem to be
43:23 - working out either my keyboards just
43:24 - falling apart okay so let's so once we
43:27 - get this text right once I say something
43:29 - we want to loop through all of these
43:30 - patterns and we want to check if the
43:32 - text matches that so we're gonna save
43:34 - for pattern func right the function will
43:38 - call in in this case total patterns dot
43:41 - items what this will do is loop through
43:44 - and get this pattern and it will get
43:46 - this function for each of those entries
43:48 - right and then what we'll do is we'll
43:49 - say if pattern dot match since we did re
43:53 - compile this is a reg X pattern so we
43:56 - can call dot match on it if it match is
43:58 - text then what we'll do is we'll say
44:01 - result equals func and we'll call it now
44:05 - what this is pretty much saying is like
44:07 - the function is defined here but we
44:09 - haven't called it so no matter what
44:12 - pattern we match just call the function
44:14 - associated with it store that value in
44:16 - result which we're doing and then let's
44:18 - break now what we'll do at the bottom is
44:21 - will say if result and then speak
44:25 - result I got so we'll just say that
44:28 - number the reason for this is we're
44:30 - gonna check some other patterns so I
44:31 - just want to make sure that we don't
44:33 - possibly say two answers so rather than
44:35 - just speaking result here I'll break the
44:38 - loop and then we'll check at the bottom
44:40 - if result was defined and in fact if
44:42 - we're gonna do that we need to say
44:43 - result equals none to start so we'll
44:46 - check if it's equal to something if it
44:48 - is then what we'll do is we'll speak
44:49 - that result and that's the idea behind
44:51 - this and then once that happens we'll go
44:53 - back up to the top of the while loop and
44:54 - we'll start listening again and we can
44:56 - ask another phrase so let's try this and
45:00 - we be helpful if we call the function so
45:02 - let's call it and in fact where I define
45:04 - data here I'm just gonna steal this and
45:06 - I'm just gonna define it inside the main
45:08 - function like this and I keep forgetting
45:11 - that my freaking copy and paste doesn't
45:14 - work so I need to do this that's yeah
45:17 - that's gonna have to be a fix after this
45:18 - video so let's throw that in there okay
45:22 - so dad is in there we could take these
45:24 - constants if we wanted to move them down
45:26 - we don't need to run token we don't need
45:28 - right now but anyways let's keep going
45:31 - okay so we defined data in here now what
45:33 - I want to do is test this I will note
45:35 - that there is a few minor mistakes so
45:37 - the first thing is where this little
45:39 - space is we need to remove that
45:40 - otherwise we're gonna get some issues
45:41 - and let's see now if we test this if
45:45 - this actually works that this gives us
45:46 - any results let's run this how many
45:49 - total cases perfect okay so that's
45:57 - working so let's quit the program there
45:58 - and so let's finish now the only thing
46:01 - that's throwing me off is it
46:02 - automatically breaks out I'm curious of
46:05 - this break you were to somehow
46:06 - activating this loop but I would hope
46:08 - that this would just keep looping now
46:11 - I'm actually gonna put some print
46:12 - statements for debugging here and then
46:14 - just say exit like that's we're gonna
46:17 - print out whatever the text is that this
46:19 - person says just so that we can see it
46:21 - and we can see what actually what the
46:23 - computer interpreted so let's try this
46:25 - again let's try something with with
46:27 - deaths what is the total number of
46:31 - deaths
46:36 - okay great
46:38 - so okay so he texts up fine and fries so
46:41 - apparently ah okay I see why so this is
46:45 - returning negative one when I do text
46:47 - off fine so I just need to say if this
46:49 - does not equal negative one then it will
46:52 - exit because I was automatically exiting
46:53 - before and I was a little bit confused
46:55 - why that was happening that's because if
46:56 - it doesn't find the phrase it returns
46:58 - negative one so we need to make sure
46:59 - it's not negative one and then we'll
47:01 - exit out okay great so now what should
47:04 - really happen let's let's run this again
47:05 - and see what was our stop words stop
47:07 - okay how many total cases stopped and
47:19 - there we go a takes it down okay so
47:21 - there we go we're getting pretty good
47:22 - now now what we want to do is get
47:24 - country specific information and then
47:26 - I'm gonna show you how we can actually
47:27 - update this so from like speaking like
47:30 - we asked update and and how can we do
47:32 - that okay so we have total patterns now
47:36 - what we're gonna do is say country
47:37 - underscore patterns and this one is
47:40 - gonna be a little bit different uh might
47:42 - be a little bit more confusing to some
47:43 - of you so I'm actually just gonna copy
47:45 - in these patterns again and I'll explain
47:46 - how they work so this one let's let's
47:51 - tab these forward so yes they're in line
47:54 - with that and let's have a look okay so
47:58 - this first pattern is any number of
48:00 - words cases any number of words now this
48:03 - is the idea being that what we're gonna
48:05 - do is we're gonna look through all the
48:07 - total patterns and if we don't match any
48:10 - total patterns then we'll look and match
48:12 - the country patterns or it actually we
48:13 - might do it the other way around no
48:16 - we'll do it that way that's fine but
48:18 - anyway so like if we have any number of
48:20 - words cases than any number of words
48:21 - then what we'll do is we'll map that to
48:24 - lambda country data get country data
48:27 - country total cases now I know this
48:30 - seems will be confusing but what lambda
48:31 - says is this is an anonymous function
48:33 - that takes one variable country so as a
48:37 - parameter and when it takes that it will
48:40 - call and return this value so since
48:42 - we've done this we've actually defined a
48:45 - function here that calls this function
48:47 - and returns the total cases value from
48:51 - that
48:51 - same thing with total deaths so what we
48:53 - can do is a very similar thing to this
48:55 - except when we call funk this time we
48:58 - just need to put a country inside of it
49:00 - so what I'm gonna do is copy this for
49:02 - loop and I'm gonna paste this here keep
49:07 - forgetting that that ctrl C is not
49:10 - working so let's copy oh what the heck
49:12 - copy and paste okay so now this time for
49:17 - pattern funk in not total patterns but
49:19 - in contrary patterns dot items we'll see
49:23 - if the pattern matches the text and if
49:25 - it does match the text what we'll do is
49:27 - watch we check if there's any name of a
49:29 - country in the text so at the top here
49:32 - I'm actually gonna say country
49:35 - underscore list is equal to data get
49:39 - list of countries and we're actually
49:41 - gonna put that into a set of a list like
49:45 - that so since this is gonna return to us
49:47 - actually know that is a list set no set
49:50 - should be fine actually what am i doing
49:51 - what do I need list like that let's just
49:53 - do set a little brain fart there so
49:55 - we'll make this a set and then that way
49:57 - what I can actually do is in oh one time
50:00 - it's probably not relevant to many of
50:02 - you I can check if a country is in that
50:04 - set and if it is then we're good to go
50:07 - so essentially hmm we say if ah that
50:13 - probably won't work actually because I
50:14 - need to just look through all of the
50:16 - yeah so actually this is gonna have to
50:17 - stay as a list and there's gonna be
50:19 - annoying to do but what we're gonna have
50:20 - to do is essentially check for every
50:22 - country if that country exists in the
50:24 - text if it does then we'll get that
50:26 - specific information so we'll say for
50:28 - country in what I call this country list
50:32 - like that and we'll say if country in
50:39 - text and in fact it makes a little bit
50:41 - faster for us what I'm going to do is
50:43 - I'm going to save text I say words
50:45 - equals text dot split at space and we'll
50:50 - actually put that to a set so that we
50:52 - can check very easily know one time if
50:55 - the countries in the text so we say if
50:56 - country in not taxed but the end of
50:58 - words then what we'll do is we'll say
51:01 - okay
51:03 - salt equals the function of country now
51:10 - this again it might seem a little bit
51:12 - confusing we're using some more advanced
51:13 - syntax will break that for loop as well
51:15 - is we've gonna pass the country to this
51:19 - lambda function and then it will call
51:20 - the get country data with that country
51:24 - so the idea behind this is we're gonna
51:25 - say for pattern function in country
51:27 - patterns items if pattern match tack so
51:30 - if we match that taxed if we if it makes
51:32 - sense like if this is the pattern we're
51:34 - matching then we'll split the words into
51:37 - a set the reason for this is we go from
51:39 - a sentence it looks like a look like
51:41 - they'll say how many cases in Canada we
51:47 - go from that to now a set right that has
51:50 - all of the individual words so that's
51:52 - very easily now very easy for us to
51:54 - check if a country is in this set
51:57 - without having to you know spend a ton
51:59 - of time computationally doing that so we
52:01 - do that we say for country and country
52:03 - list so for every country let's loop
52:05 - through let's see if the country is in
52:06 - one of those words so if that country
52:08 - exists in the words right then what
52:11 - we'll do is we'll say the result is
52:13 - equal to the function which was here at
52:16 - country which will give us the answer
52:17 - we'll break this for loop and then I
52:20 - guess we'll keep looking through
52:21 - patterns but the chance we're gonna
52:23 - match a pattern cases and deaths
52:25 - it is very slim so then at that point
52:27 - we'll come down here and we'll speak the
52:29 - result now that is the idea behind this
52:32 - um so with that that should do it for
52:36 - the country value so let's actually have
52:38 - a look here and let's see if this works
52:40 - how many cases in Canada stop okay so
52:50 - that worked
52:51 - now I understand some of you are
52:52 - probably still confused with all the
52:53 - drag act stuff just look up right I
52:55 - search patterns if you want to see how
52:57 - they work but again any number of words
52:58 - cases any number of words maps to lambda
53:01 - country and then we have this this
53:03 - function we're calling in the lambda
53:05 - function so that's the idea what I will
53:07 - now show you is how we can actually make
53:10 - a new run and how we can update this
53:12 - data this is advanced it involves using
53:15 - a thread I'll explain
53:16 - how that works but the idea is that like
53:19 - say we run this program like ten days
53:21 - from now well we want to update but we
53:23 - don't have to go back to the power sub
53:25 - tool to make a new run we don't want to
53:27 - change this right we want to have it
53:29 - automatically update for us so to do
53:31 - that is kind of complex involves pulling
53:33 - an end point and updating data but I'll
53:37 - show you how we can do it so essentially
53:39 - we're gonna make a new method here and
53:40 - say this is update underscore data self
53:44 - now at the top we need to import some
53:46 - stuff so import threading and import
53:50 - time both of these are built into
53:52 - pythons you shouldn't need to install
53:54 - them and then inside of update data what
53:57 - we're gonna do is we're actually gonna
53:59 - make a post request to a URL that makes
54:02 - a new run now I need to copy in this
54:04 - post request because it's like I can't
54:06 - just I don't have the memory so I need
54:08 - to copy them in but if we look at them
54:10 - well so response equals request stop
54:12 - post notice this isn't get this is post
54:15 - and we're posting to the same URL except
54:18 - instead of so if we look here instead of
54:21 - last ready run data at the end we're
54:24 - gonna post to run right so we have HTTP
54:27 - Parcel calm / API be to project cell top
54:30 - project run / run we have the parameters
54:33 - self dumper Am's
54:34 - and again self dot params is defined up
54:36 - here with the API key for verification
54:38 - so what that does is it initiate
54:41 - initializes a new run on the parse hub
54:43 - servers so this run takes a few seconds
54:46 - so right so we can't just immediately
54:48 - ask for the new data because we don't
54:50 - know when this run is gonna be finished
54:52 - in fact it changes times based on you
54:54 - know how how much volumes on the server
54:56 - and stuff like that so we need to
54:58 - continually pull this from this kind of
55:00 - endpoint and see when this is done we
55:03 - need to keep waiting to see when this is
55:06 - done now there's a few ways that we can
55:08 - do this we use something called web
55:09 - hooks which I'm not gonna use because
55:11 - they're kind of complex but what I want
55:13 - to do is actually set up what's called a
55:14 - new thread it's gonna every five seconds
55:17 - check this endpoint here and see if we
55:21 - got any new data because what this
55:23 - endpoint does is it returns to us the
55:25 - most recent data that we have right
55:27 - that's the last ready run so what we'll
55:30 - do is we'll keep pulling it until this
55:32 - data changes so until the data we're
55:34 - getting is different than the data we
55:36 - currently already have then we'll keep
55:38 - pulling it and as soon as we get new
55:40 - data we'll update our data and we'll you
55:42 - know tell the user whatever we've been
55:44 - updated so what we'll do here is we'll
55:46 - say old underscore data equals self data
55:50 - we're gonna define a function called pol
55:53 - and then what I'm actually gonna do is
55:55 - inside of here we'll pass for now and
55:58 - I'm gonna say T equals threading dot
56:04 - thread target equals pull now what this
56:09 - says is let's make a new thread now the
56:11 - way threads work essentially is there
56:13 - are two separate kind of running
56:15 - instances of the program now it's really
56:18 - hard to explain the threads without
56:19 - going into detail which I don't really
56:20 - want to do but the idea is that if we
56:22 - run a thread this won't interfere with
56:24 - what's happening here right because the
56:27 - idea is inside of this thread we're
56:29 - gonna be constantly asking the server
56:31 - for a response and that takes some time
56:33 - and I want to make sure that while
56:34 - that's happening I can still interact
56:36 - with the program so if I put this in a
56:38 - thread then that means this will only
56:40 - kind of take over our voice assistant
56:43 - part when it's actually running which
56:45 - will be for like a few microseconds
56:47 - whereas if I didn't put it in a thread
56:48 - we would actually have to wait a full
56:50 - minute or until we get the new data
56:52 - before we'd be able to actually have
56:55 - that updated data and interact with the
56:56 - voice assistant again hopefully that's a
56:59 - good enough explanation but to make a
57:01 - new thread in Python 3 you do something
57:04 - equals threading dot thread and then you
57:05 - start the thread like that so we'll
57:08 - start the thread pull and I've just
57:10 - defined a function inside of a function
57:12 - here I don't really need to do this but
57:14 - since it's only used inside of update
57:15 - data I'm going to um and just you know I
57:18 - know this is weird but just understand
57:19 - this is fine you can define a function
57:20 - inside of a function it's called an
57:22 - inner function right so we had pull now
57:25 - inside a pull what I'm gonna do is I'm
57:26 - gonna sleep immediately Bruce you're 0.1
57:29 - seconds the idea of this is that
57:31 - whenever one of our threads isn't doing
57:33 - something it'll kind of release itself
57:35 - and let the other ones start doing
57:37 - something so I want to immediately when
57:39 - I start pulling give kind of access back
57:42 - to the main thread which is what's
57:43 - running
57:44 - the voice assistant so that it doesn't
57:46 - this doesn't take over that thread and
57:47 - doesn't for like a few seconds relax
57:50 - like that's the idea so since this
57:52 - sleeps it's like okay this threads not
57:53 - running anymore it lets the other thread
57:55 - run which is the thread that's running
57:56 - the voices system hopefully that makes
57:59 - sense okay so we're gonna say time to
58:01 - sleep equals that I actually can just
58:03 - say old data inside of here oh my gosh I
58:08 - keep forgetting I need to do this copy
58:10 - how many times did I make a copy and
58:12 - paste error in this video tutorial be
58:14 - curious to know okay so old data equals
58:16 - that I'm just copying what I have over
58:18 - here to make sure we don't mess up will
58:19 - say well true so we'll do a a while loop
58:23 - and every five seconds I'm gonna ping
58:25 - this URL so I'm gonna ping get data and
58:29 - actually what I'll do and get data is
58:32 - I'll return data now the reason for this
58:38 - is and we'll have to change this up here
58:40 - so it's a data self that data equals
58:43 - equals self bucket data so rather than
58:46 - just setting the data attribute we'll
58:48 - return it so that that way we don't
58:50 - automatically override the data we have
58:52 - unless we want to if that makes any
58:55 - sense that's you'll see how we're gonna
58:57 - use this function down below but just
58:58 - make sure you modify it so it returns
59:00 - data and now we have self data equals
59:02 - self to get data so will be equal to
59:04 - whatever was returned from this method
59:06 - alright so let's go here and we're gonna
59:08 - say new underscore data equals self dot
59:12 - gets data now we're going to check if
59:15 - this data is equal to the old data and
59:17 - if it is then what we're gonna do is
59:19 - we're gonna wait five seconds and then
59:20 - we're gonna ping that again we're gonna
59:22 - do this again so we're gonna say if new
59:24 - data does not equal old data then what
59:29 - we'll say is self dot data equals new
59:33 - data so we'll update that data and then
59:35 - we'll break and we'll print actually
59:38 - data updated so data updated like that
59:43 - now if it doesn't then we'll just timed
59:46 - out sleep for five seconds and that
59:49 - should actually be all we need to do so
59:50 - this is essentially saying that we'll
59:51 - make a new thread this thread will every
59:53 - five seconds hit that endpoint inch and
59:56 - check for new data
59:57 - if it gets new data will stop running
59:59 - this thread so we'll break out of this
60:01 - while loop will break out of the thread
60:02 - and we'll set the current data equal to
60:05 - new data which means that when we now
60:07 - call again the the function right and
60:10 - the read that's the reason why if you
60:11 - look here I don't just call the function
60:13 - actually put the name of the function
60:15 - when I call that function we'll get the
60:17 - updated data so that's the idea behind
60:19 - this now what we need to do is make a
60:20 - verbal command to update the data so
60:22 - what I'm gonna do is we'll say like
60:27 - update underscore command or something
60:30 - now we could make this a rag ice pattern
60:32 - but I'm just gonna make this update just
60:34 - to make it really easy
60:35 - so we'll say update command is update
60:37 - and then what we'll do is at the bottom
60:40 - here will say if text equals equals
60:44 - update command then we'll have to do is
60:47 - data dot update data and let's just do a
60:49 - little speak here and let's actually say
60:52 - result equals data is being updated this
61:00 - may take a moment
61:04 - oops if I could type okay so this may
61:06 - take a moment exclamation point all
61:09 - right so that's pretty much the program
61:11 - now I'll show you how that works but
61:13 - this will again take like 30 40 maybe
61:14 - even a minute to run so I'll skip
61:17 - through it if it takes that long but
61:18 - let's run this update okay so we can see
61:26 - that that's happening now what I'm gonna
61:27 - do is just wait and I'll wait to see
61:29 - when that new print statement comes and
61:31 - says data updated how many cases did
61:33 - Canada have a so you can see that it
61:39 - says data updated here and then I asked
61:41 - how many cases Canada have and it gave
61:43 - me I'm hoping an updated value I mean I
61:45 - don't know how quickly the website
61:46 - updates but the idea behind this is that
61:48 - you know tomorrow when I want to use
61:50 - this I don't need to go manually run it
61:52 - I can just say update at the beginning
61:53 - and then I can wait and it will update
61:55 - right so it said data updated which
61:57 - means our dad is updated and that pretty
61:59 - much means this tutorial is well over um
62:01 - I'll put a link to this code that we've
62:04 - written in the description in case you
62:05 - guys want to copy this down these are
62:07 - you know my private API keys and stuff
62:09 - I've just left them blank cuz I can't be
62:10 - bothered to
62:12 - really deal with them I'll delete them
62:13 - after the video goes live
62:15 - um but yeah that's that's the idea so I
62:17 - hope you guys enjoyed this project this
62:19 - stuff is really cool and I think you can
62:20 - do a lot cooler stuff than what I've
62:22 - done but again the objective was to show
62:24 - you the base show you what you can do
62:26 - and then let you guys kind of take it
62:27 - from there
62:28 - so hopefully you enjoyed if you did make
62:29 - sure you leave a like consider becoming
62:31 - a channel member and supporting the
62:32 - channel I definitely appreciate that of
62:34 - course subscribe if you're not and I
62:35 - will see you guys in another tutorial
62:37 - video