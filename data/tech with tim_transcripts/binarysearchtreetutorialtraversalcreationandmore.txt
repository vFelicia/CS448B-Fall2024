00:00 - before we get started to get massive
00:01 - thank you to the node for sponsoring
00:03 - this video they make it easy and
00:04 - affordable to host your site or service
00:06 - in the cloud offering no-nonsense
00:08 - hosting with plans starting at just five
00:10 - dollars this means no surprise fees or
00:12 - overages like you might have gotten from
00:13 - some more entry-level hosting companies
00:15 - now the note else was a full API that
00:17 - works with tools like terraform and
00:19 - kubernetes making an awesome environment
00:21 - for development projects maybe you've
00:23 - used an entry-level hosting service
00:24 - before well a notice your step up to
00:26 - powerful fast and fully configurable
00:28 - cloud computing anyways go ahead and
00:30 - sign up with the link below and take
00:32 - advantage of a free $20 credit using the
00:34 - code twt 19
00:37 - all right so let's talk about binary
00:40 - search trees now before we get into the
00:42 - search tree part of this let's discuss
00:44 - what a binary tree is now most people
00:47 - will know a tree is usually comprised of
00:49 - what we call nodes connected with
00:51 - branches so if I'm drawing one on the
00:53 - left side of my screen here we have
00:54 - nodes maybe this node has a value of 1
00:56 - and it has some branches coming off of
00:58 - it now usually these can just be
01:00 - arbitrary there can be like a random
01:03 - amount of branches
01:04 - maybe these ones have a few branches
01:05 - coming off them maybe this one has one
01:07 - and it keeps going right and that's what
01:09 - it trees now a binary tree is really
01:12 - basically just a tree that only has at
01:14 - most two branches for every node now
01:17 - what that means is each parent node has
01:21 - at most two children so if you say this
01:23 - is the parent which will say is P then I
01:26 - guess I'll actually this will brighten
01:27 - right on here these are the children
01:29 - right and that it has at most two it can
01:31 - have none it can have one but it can
01:33 - have at most two and that's all a binary
01:36 - or I guess a binary tree is it just has
01:39 - two children for each parent so now if
01:41 - we call this one the parents it can have
01:43 - at most two children and you can keep
01:45 - going and each node has at most two
01:47 - children that's all I binary tree is so
01:50 - you can see this big tree that I've
01:51 - written in the middle of my screen is a
01:53 - binary tree and that's because at most
01:55 - we have two children to each parent
01:57 - nodes so if you say this is the parent
01:59 - you can see we have child one and we
02:01 - have child two and then the rest of them
02:03 - only have one child now a child is just
02:06 - the node that kind of proceeds or comes
02:08 - after or bias is connected to one of
02:10 - these parent nodes and that's kind of
02:12 - some terminology I'm going to be using
02:14 - here now now this is called the root
02:17 - node now the reason it's called the root
02:19 - is because it is the start of our tree
02:21 - it has nothing that comes before it and
02:24 - it's actually the only node in our tree
02:26 - that has no parent so we call it the
02:28 - root that's important because I'm
02:30 - probably gonna use that terminology a
02:31 - few times so a that is the root node
02:33 - other surveys that for now okay so now
02:35 - that we know what a binary tree is what
02:37 - is a binary search tree also known as
02:40 - BST well a binary search tree
02:43 - now satisfies another property not only
02:46 - is it a binary tree but it also is a
02:48 - search tree which
02:50 - means that we can find elements in it
02:52 - very quickly now the way we do this is
02:54 - because every child that's connected to
02:58 - this tree is connected in a specific way
03:00 - so looking at our root node here we can
03:03 - see that the left child which would be
03:05 - this one here so five is always less
03:07 - than the root node so you can see five
03:10 - is obviously less than seven and eight
03:12 - which is our right node is always
03:14 - greater than the root node so the way
03:17 - this works is when we add in new
03:18 - elements based on where we're adding
03:20 - them in the tree they're always gonna
03:22 - put themself in some kind of order so
03:24 - that it's very quick and easy to find
03:26 - certain elements in the tree so if you
03:28 - look at five here you can see that two
03:30 - since it's less than five goes to the
03:32 - left of it and three over here since
03:34 - it's greater than two it goes to the
03:36 - right of it and that is kind of the way
03:37 - that we add elements in and the order
03:40 - that we maintain in this tree so having
03:43 - that property satisfied where every left
03:45 - child is less than the parents and every
03:47 - right child is greater than the parent
03:49 - is what makes this a search tree so
03:52 - those two properties combined gives us
03:54 - the binary search tree all right so
03:57 - let's start discussing how we can
03:59 - actually create one of these trees so
04:01 - I'm just gonna erase a few nodes here so
04:03 - that can add in some more ones let's say
04:05 - we have a tree that starts off looking
04:08 - like this so we have that root node of
04:10 - seven Nomi a five that we have eight
04:11 - then we have two well how do we add
04:14 - elements into this tree well what we do
04:17 - is let's say we have the element nine
04:19 - and we want to add it into this binary
04:21 - search tree well when we add it we need
04:24 - to make sure that the same binary search
04:27 - tree properties are satisfied to keep
04:29 - this a binary search tree that's what we
04:31 - do is we compare it first of all to the
04:34 - root node and we say okay is this value
04:36 - greater than or less than the root node
04:38 - in this case it's greater than so we
04:40 - move to the right now if there was no
04:43 - root here or sorry not root if there's
04:45 - no node here we would just add nine in
04:47 - so we could replace like we're eight is
04:49 - with nine if eight wasn't there but
04:51 - since there is one here we need to
04:53 - figure out where we're putting this
04:54 - based on this node so we look at eight
04:56 - and we say is nine greater than or less
04:58 - than eight now since it's greater than
05:00 - what we do is we move to the right again
05:03 - we
05:04 - see that there's no note here so there's
05:05 - room for us to place nine and we put
05:07 - nine right here as the right child -
05:10 - eight and that's how we add elements
05:12 - into our binary search tree now let's do
05:15 - another example with the element 3 now
05:17 - you already know where 3 goes because
05:18 - you saw me show it but let's do kind of
05:20 - the process of how we add it so let's
05:22 - say we want to add 3 into this tree well
05:24 - we did the same thing we compared it to
05:25 - 7 we say is it less than or greater than
05:27 - it's less than so we go to the left is
05:30 - the room for 3 yet no there's not
05:32 - so we compare it to 5 we say is it less
05:34 - than or greater than 5
05:36 - well it's greater than 5 so we go to the
05:38 - right it turns out there's no other node
05:40 - there so we can go ahead and add 3 and
05:43 - now our sorry what am I saying what do
05:45 - we put going to the right sorry we go
05:47 - down to 2 we go to the left because it's
05:49 - less than 5 yes I'm thinking correctly
05:51 - and then we say ok is it less than 2 or
05:54 - greater than 2 it's greater than 2 so we
05:56 - add it as the right child 2 - my
06:00 - apologies on that one there guys
06:01 - so that is how that works that's how we
06:03 - add elements into the binary search tree
06:05 - now this is pretty straightforward so
06:07 - let's just start by constructing one
06:09 - from scratch to make sure that everyone
06:11 - understands how this works
06:12 - so our nodes just going to do a quick
06:15 - note here have a value they have a left
06:19 - node so a node that's attached on the
06:21 - left and they have a right node now when
06:24 - we start off our tree we don't have any
06:26 - nodes so what we do is let's say we want
06:28 - to add the numbers 7 5 9 3 - these are
06:33 - the numbers that we want to add into our
06:35 - binary search tree how do we do this
06:37 - well we start with 7 and since there's
06:40 - currently no nodes in our tree 7
06:42 - immediately just becomes our root node
06:44 - so we write 7 here and we throw that one
06:47 - like that now 7 is gone we've added that
06:50 - one to the tree now we move on to 5 and
06:52 - now we repeat the process I've just
06:54 - talked about so we say ok let's compare
06:57 - it to 7 is it less than or greater than
06:58 - 7 it's less than so we're gonna add it
07:01 - right here to the left of 7 and this is
07:04 - what's gonna be now the left node of the
07:07 - value 7 on the node 7 this is the left
07:10 - shot all right so that's how we do
07:12 - that's now let's add 9 ok so we compare
07:16 - it to 7 we say is
07:17 - greater than or less than well it's
07:18 - greater than so we go ahead and add it
07:20 - to the right side here and now we have
07:22 - nine okay nine is gone now it's time for
07:25 - three all right so let's add this in now
07:28 - so we look at seven we go to the left
07:30 - because it's less than we look at five
07:32 - go to the left because it's less than
07:33 - and we add three like that and now let's
07:38 - keep going and let's add two so when we
07:41 - do to we do the same process here we go
07:43 - left left oh it needs to go to the left
07:45 - again and then we add two right there
07:47 - now let's add in one more number just to
07:49 - show kind of how this works so let's say
07:51 - we want to add six now
07:52 - well let's I'm just gonna erase some of
07:55 - these lines let's do the same process
07:58 - again compared to seven is it greater
07:59 - than or less than it's less than so we
08:01 - go to the left compared to five is it
08:03 - less than or greater than it's greater
08:05 - than so we go to the right and we add
08:08 - six and that is how we construct this
08:10 - binary search tree from scratch the
08:12 - first element just immediately becomes
08:14 - that root and then from there we just
08:17 - compare it to each node we do I say do
08:19 - we go to the left or do we go to the
08:20 - right and we keep going through there
08:22 - until eventually we have room to add in
08:24 - our node now this is just basically how
08:28 - it works so let's talk about kind of
08:30 - more of an implementation of this now in
08:32 - code because this has all been kind of
08:34 - abstract so let's just erase some of
08:35 - this stuff down here so the reason I
08:39 - wrote this no thing here on the left
08:41 - side of my screen is so that we know
08:43 - what each of our nodes have so what
08:46 - we're gonna do is in our program we're
08:48 - gonna set up an object it's gonna be
08:49 - called node what we're gonna do is each
08:51 - node in our binary search tree is gonna
08:53 - have a value which could be you know
08:55 - seven five nine whatever it is it's
08:58 - gonna have a pointer to a left node and
09:01 - a right node so essentially what happens
09:03 - here is we actually store this node in
09:07 - you know the left property of seven and
09:09 - we actually stored this node which is
09:11 - nine in the right property of seven so
09:14 - when we actually want to loop through
09:16 - and look through our binary search tree
09:18 - we can do this recursively alright so
09:21 - what I'm actually gonna do now is
09:23 - program an implementation for a binary
09:25 - search tree I'm just gonna do this in
09:27 - Python before I used to write these out
09:29 - but I was finding that it's
09:30 - kind of messy in my handwriting
09:31 - obviously it's not need enough to do
09:33 - like long bits of code which is kind of
09:35 - what we need to do here so I'm just
09:36 - gonna do some kind of pseudocode Python
09:39 - II like programming of a binary search
09:42 - tree so the first thing we need to do is
09:44 - create a node class so I'm gonna say
09:46 - there's a class node it's gonna have a
09:48 - few properties we're gonna say define
09:49 - underscore underscore an it underscore
09:53 - underscore and what we're gonna do in
09:54 - here is simply define a value for this
09:57 - node so say self will say value and then
10:01 - what we're gonna do is add some
10:02 - attribute so we'll say self dot value
10:04 - equals value self thought left equals
10:08 - none and CELTA right equals none like
10:12 - that let me just save this as a Python
10:14 - file so it's called test up pi because
10:17 - we're probably not actually gonna run
10:18 - this save it like that so anyways that's
10:22 - what we have we have this node class and
10:23 - this is really all we need for our node
10:25 - class we have a value and we have a left
10:27 - and a right now the next class we're
10:29 - gonna write is going to be called BST or
10:31 - binary search tree now what binary
10:33 - search tree is gonna have is just simply
10:35 - one property so we're going to emit
10:38 - under storage core and then I'm here
10:41 - what we're gonna do is simply just
10:42 - define a root so I'm gonna say self dot
10:44 - root equals none now what this is gonna
10:47 - mean is essentially when we first create
10:50 - our new binary search tree there's
10:51 - nothing in it and this root node is the
10:54 - only thing that we actually want to keep
10:56 - track of in our binary search tree it's
10:57 - gonna start off at none but what the
10:59 - root node is is that first node in this
11:02 - the tree so when we actually start
11:05 - adding elements into the tree what we're
11:06 - gonna do is the first element we add
11:08 - will become that root node and then from
11:10 - there that root node will have a left
11:12 - and a right and then all this other
11:13 - nodes will have left's and rights and we
11:15 - can access those nodes by going to the
11:17 - left of the root node and the right of
11:19 - the root node and so on so that's why we
11:21 - only need to hold a root node here in
11:24 - BST now the first method that I wanted
11:27 - program here is going to be an ADD
11:29 - method and the add method is going to
11:31 - well add a new value into our binary
11:34 - tree now what we're going to take in
11:35 - here is current and we're also going to
11:38 - take value for what value we're adding
11:41 - to our search tree
11:44 - so what I'm doing here it's just kind of
11:46 - start programming this and then
11:47 - hopefully I'll walk us through this as
11:49 - we get go through it the first thing we
11:51 - need to check when we add a new node
11:54 - into our tree is if we have a root node
11:57 - or not so what I'm gonna do is I'm gonna
11:59 - say if root actually I'll say if not
12:02 - root which means you know like if root
12:05 - is equal to none so I guess I can
12:06 - simplify that and just say if root
12:09 - equals equals none then what we're gonna
12:12 - do is just simply make whatever this
12:15 - value is a new node that is going to be
12:18 - the root so we're gonna say self got
12:20 - root which I guess this needs to be self
12:22 - is going to be equal to a new node and
12:25 - in here we're just going to put the
12:27 - value so what this is going to do is
12:28 - construct a new node as we can see here
12:31 - and we're going to store that as the
12:32 - root node because we don't have one yet
12:34 - that's what we need to do now otherwise
12:36 - what we're gonna do is actually write
12:39 - kind of recursive method of finding out
12:42 - where this node needs to go because it
12:43 - needs to be in the correct sorted order
12:45 - it needs to be there to the left of the
12:47 - root node or to the right of the root
12:48 - node and then after all those children
12:50 - everything needs to be in the correct
12:52 - order so we're gonna start by checking
12:54 - if value is less than in this case
12:57 - current dot value now I should say here
13:01 - that what current is is gonna keep track
13:03 - of the current node that we're looking
13:05 - at because I'm actually gonna make this
13:06 - method recursive you're gonna see how
13:09 - that works in a second but current is
13:11 - going to start off as the root node for
13:13 - our binary search tree so we're gonna
13:15 - start as that root so maybe we say that
13:17 - value seven we're gonna compare the
13:19 - value that we're trying to add to that
13:21 - root node to start and then do something
13:24 - with it based on if it's less than or
13:26 - greater than so if the value is less
13:28 - than what I'm gonna check is if current
13:30 - dot Left equals equals none now if it
13:35 - does equal none that means and I'll do a
13:38 - quick illustration here so that we can
13:40 - see kind of how this works so we have
13:43 - this root node let's say maybe this is
13:45 - seven I'm just drawing with my mouse to
13:46 - give me a break here we compare it to
13:48 - seven you know and we go now we want to
13:51 - add our node we check if the left of
13:53 - seven if it's no or not or if it's none
13:55 - if it is what we're going to do is
13:57 - to add the node in there so let's say we
13:58 - wanted to add three well we'll just put
14:00 - it there now if it's not none and there
14:02 - is a node here then we need to do
14:04 - something else so anyways let's get out
14:07 - of this uh I did not mean to do that
14:09 - okay so if current dot left equals
14:12 - equals none ever going to say current
14:13 - dot left equals node value and that's as
14:19 - easy as that is to add the node on the
14:21 - left side of the tree now if it's not
14:24 - none what we're gonna do is we're gonna
14:26 - say else self dot add current left value
14:33 - I mean discuss what this does in a
14:34 - second but let's move on to the next one
14:36 - here alright so if we've compared our
14:38 - value and it's not less than the current
14:41 - value then it must be greater than or
14:43 - the same so in this case I'm just gonna
14:44 - do an else statement and I'm gonna say
14:46 - else I'm literally just gonna copy this
14:48 - but change this to the right side of my
14:50 - tree so in this case I'm gonna say if
14:52 - current right equals none then current
14:56 - right equals node value otherwise self
14:59 - thought add current uh right value now
15:02 - let's walk through exactly how this add
15:04 - method works to make sure that
15:06 - everyone's on the same track here I'll
15:07 - get my drawing tablet back out so that
15:09 - this is a little bit neater when I'm
15:11 - drawing alright so let's go back into
15:14 - this okay so let's say we have a search
15:18 - tree and it looks something like this we
15:20 - have one and we have three or I guess
15:24 - that can't really be three let's make
15:25 - this a seven that's a seven that's a
15:27 - three
15:28 - and let's say this is a nine like right
15:30 - here and I want to add the value two
15:32 - into my search tree well let's go
15:35 - through kind of this method that we just
15:36 - wrote here and figure out what we would
15:37 - do so we're gonna pass current is gonna
15:40 - be the root node to start so whatever
15:42 - the root is which in this case is
15:44 - actually just gonna be seven right and
15:46 - then we're gonna pass the value to so
15:48 - we're gonna do is we're gonna say if
15:49 - self dot root equals equals none does it
15:52 - no it doesn't so we'll move on to the
15:53 - next else statement here I'm going to
15:55 - say if value is less than current value
15:58 - so if this value two is less than this
16:01 - value seven which it is we're gonna say
16:03 - if current dot Left equals none does it
16:06 - no it doesn't then what we're gonna do
16:08 - is call this method again
16:10 - with now the new current node being
16:13 - current left and the value being again -
16:16 - so we're gonna come up here and call
16:19 - this again but now if I can get my
16:22 - eraser out and just erase some of this
16:24 - stuff this is no longer gonna be route
16:27 - this is actually gonna be the left node
16:29 - of route which is gonna be three so now
16:31 - the current node we're looking at is
16:32 - three the value is still two and we run
16:36 - this method the exact same one more time
16:38 - we check you know is the route equal to
16:40 - none obviously no it's not then we come
16:42 - here to the else statement we say if the
16:44 - value is less than current value well as
16:46 - to less than current value yes it is so
16:49 - we go into here we say if current dot
16:51 - left equals none is it yep the left of
16:53 - three is none so what we do is we now
16:55 - add in our new node which is two and
16:58 - that goes in the correct place and we
16:59 - can do this for any example any number
17:01 - and this will work properly um just
17:04 - because of the way that I've written
17:05 - that so I hope that makes sense in terms
17:06 - of that implementation to you guys
17:09 - fairly straightforward all right so I
17:11 - want to quickly discuss here how long
17:13 - this method will always take to run so
17:16 - essentially like what is the time
17:18 - complexity of adding a new node into our
17:20 - binary search tree well I'm hoping you
17:23 - guys can probably come up with this on
17:24 - your own but it actually runs in what we
17:26 - call log base 2 of n time now that means
17:31 - that this runs very very quickly and
17:34 - kind of the bigger that are I guess
17:36 - binary search tree is the faster this
17:39 - actually ends up running in in terms of
17:42 - like how much better the speed is
17:44 - getting so if I just draw I'm just gonna
17:46 - make this a bit thicker here but draw a
17:48 - little graph down here I'll just draw
17:50 - with the log function looks like so you
17:52 - guys can actually see at least the
17:53 - positive side it looks something like
17:55 - this so essentially if this is time so
17:58 - this axis here and this is n which means
18:00 - how many things we have in our binary
18:02 - search tree as n increases time very
18:06 - slowly increases which means that this
18:09 - works really well for massive amounts of
18:11 - information because as n gets larger and
18:14 - larger and larger time actually stays
18:16 - fairly consistent and stays pretty
18:18 - similar and that's why we end up using
18:20 - these types of data structures because
18:22 - it's so fast to add
18:24 - elements in as well as to look for
18:26 - elements which is what we're gonna do
18:28 - next but the reason this runs in log
18:31 - base 2 append time and I'm just going to
18:32 - erase some of this so that I can show
18:35 - you is because of the way that we store
18:38 - things in the binary search tree so
18:40 - let's just write a Barrett law show a
18:42 - very basic search tree here let's say
18:43 - this is 7 this could be I don't know 3
18:47 - this will be 4 we'll have a 1 here I
18:51 - just need to have a few branches that we
18:53 - can actually do a decent example say
18:55 - this is 11 and this is 8 ok sweet so
18:59 - this is our binary search tree
19:01 - now let's say I want to add in the
19:03 - element 5 well what's the process of
19:07 - doing this well we first start by
19:08 - comparing 5 to 7 and when we compare 5
19:11 - to 7 we immediately know whether we need
19:13 - to go to the left of 7 or to the right
19:15 - of 7 and in this case we need to go to
19:17 - the left so what we actually end up
19:19 - doing is eliminating all of these nodes
19:22 - here from possible what we possibly have
19:24 - to search through on the binary search
19:26 - tree so we've essentially cut the tree
19:28 - in half and we've also eliminated 7
19:31 - actually because we no longer need to
19:33 - look at that now what we're doing is we
19:35 - just have this smaller tree that we need
19:37 - to look at so we now compare 5 to 3 and
19:40 - we see is 5 less than 3 or greater than
19:42 - 3
19:42 - well it's greater so what we actually
19:44 - end up doing is cutting off this entire
19:45 - left branch here of 1 and even cutting
19:48 - off 3 as well and now again we've cut
19:50 - this binary search tree in half so this
19:53 - smaller one that we were just looking at
19:54 - we've cut it in half and now we're left
19:57 - with just this box here I know this is
19:59 - messy of 4 and what we do is we either
20:01 - go to the right or the left and there we
20:04 - go and then we cut off 4 and we're done
20:06 - we've done that in pretty much 3
20:08 - different operations now as the tree
20:11 - gets larger and larger and larger we
20:14 - still don't have to do that many
20:15 - operations because we keep cutting the
20:16 - tree in half and in half and in half and
20:18 - in half until we get to where we need to
20:21 - go and that's why that runs so quickly
20:23 - and that's why it's log base 2 event I
20:25 - hope you guys kind of understand that
20:27 - I'm not gonna go into much more detail
20:28 - about that alright so traversing a
20:31 - binary tree now there's 3 main ways to
20:33 - do this and the first way we're going to
20:34 - talk about is what's called pre or
20:37 - travursel now the Yosa post order and in
20:40 - order but pre-order is kind of the most
20:42 - intuitive I usually think and these are
20:45 - pretty straightforward now the first
20:47 - thing to talk about here is we have some
20:49 - kind of idea of visiting a note so
20:51 - typically when we traverse we look
20:54 - through a binary search tree we're
20:55 - trying to do something we're either
20:57 - trying to find a specific node or we're
20:59 - trying to you know print out all the
21:01 - nodes a collect all the nodes we're
21:03 - doing something with them
21:04 - now when we actually do whatever
21:06 - operation we want maybe we're checking
21:08 - something or adding something to a list
21:11 - we call that visiting so when we
21:14 - actually visit the node is very
21:16 - important because that is kind of how
21:19 - this traversal works now the first order
21:22 - which is called preorder simply means
21:24 - and all ice already here what am i doing
21:27 - visit go left and then go right this is
21:34 - what this stands for now it's pretty
21:35 - straightforward essentially what we do
21:38 - is when we're looping through the tree
21:39 - we start by visiting the root node which
21:42 - is this one so we visited now when I
21:44 - visit a node I'm just gonna write it on
21:46 - the bottom of my screen so you can see
21:47 - the order in which I'm doing things so
21:49 - seven is the first node we visit maybe
21:52 - we're looking for a node we check if
21:54 - that's a node we're looking for whatever
21:55 - it's doing we we visit it now what do we
21:58 - do we go left all right so let's go left
22:01 - so we do now is we go left and we go to
22:03 - five and we repeat this process of this
22:06 - pre-order traversal on this node five
22:09 - now so even though it says go right as
22:11 - the next step four seven we need to
22:13 - first do five because we've just gone to
22:16 - the left so what we do now is we visit
22:18 - five which means I write it down here
22:20 - and then what do we do we go left so we
22:23 - move left again and we visit three which
22:26 - means I write three down here as if
22:28 - we've been to three already now what do
22:31 - we do we go left well when I go left
22:34 - here there's nothing here so what I do
22:36 - is I move on to the next step which is
22:39 - go right so now I go right and I go to
22:42 - four okay so now we visited four all
22:46 - right so now that we've done that what
22:48 - do we need to do we need to kind of go
22:49 - back
22:50 - the ladder and go right because we've
22:52 - just finished going left so essentially
22:55 - from seven we went left to five we
22:57 - visited five we went left from five to
22:59 - three we couldn't go left from three so
23:01 - we went right and now we've completely
23:04 - gone as far left as we can go so we
23:06 - start coming back up and we go okay we
23:08 - go to five well we went as far left from
23:10 - five as we can go so now we go right and
23:13 - we visit six and now
23:17 - well we've go back up to seven because
23:19 - we've gone as far left as we can go and
23:21 - what do we do
23:22 - we now go right so when we go to 12 so
23:25 - now we visit 12 and from 12 we follow
23:28 - this process we visit we go left and
23:30 - then we go right so we visit it and now
23:33 - we go left to eight which is here and
23:36 - we've followed this process so we visit
23:38 - it we go left we go right and we can't
23:42 - do anything there so we come back up to
23:43 - 12 and now we say okay we've gone as far
23:45 - left as we can go we couldn't go right
23:47 - so now we go right over here to 13 and
23:50 - we follow this process we go left and we
23:53 - go right and once we've reached a point
23:55 - where we've pretty much completed this
23:58 - process we are done and we have
23:59 - traversed the entire tree and that is
24:02 - what we call the pre-order traversal so
24:04 - visit go left and go right so once you
24:07 - end up going left then you know you
24:09 - follow the same process on that left
24:11 - node and continue and continue until you
24:13 - until you can't go left anymore and then
24:16 - you start slowly going bright and moving
24:17 - your way back up the tree if you simply
24:20 - follow this process visit go left go
24:22 - right you know how to do pre-order and
24:25 - that is how that works
24:26 - now give me a second to clear the screen
24:27 - and I'll be back with in order all right
24:30 - so what is inorder traversal now it's a
24:32 - similar to pre-order just a little bit
24:34 - different what we do is we go left visit
24:39 - and then we go right that is the inorder
24:44 - traversal and you guys are gonna see why
24:45 - we might do something like this as I
24:47 - start to write down the nodes that we're
24:49 - visiting so we always start at the root
24:51 - node now we're starting at 7 but notice
24:53 - that I'm not gonna write 7 here yet
24:55 - because I haven't visited 7 yet so when
24:58 - I visit it that's when I write down I
25:00 - haven't visited it so the first thing I
25:01 - do when I get to 7
25:03 - is I go left so I go left here two five
25:05 - now when I go to five what's the first
25:07 - thing I do will I do the first step here
25:08 - in the inorder traversal which means I
25:10 - go left when I get to three what's the
25:13 - first thing I do I go left now I can't
25:15 - go left from three so what's the next
25:18 - thing I do
25:18 - I visit it so I write three down here
25:21 - now what's the next process after
25:24 - visiting well it's going to the right so
25:26 - what do I do I go to the right now from
25:28 - here I follow the process left
25:30 - visit right left can't do it visit right
25:35 - can't do it come back up okay so let me
25:38 - just get rid of these arrows here just
25:42 - because I don't want to have them all
25:43 - right so there we go so we go to four
25:45 - then we come back up
25:46 - now we've already visited three so we go
25:48 - to 5 and what's the process visit five
25:51 - because we had already gone left from
25:53 - five right so now we visit five and now
25:55 - what do we do we go right so we go to
25:57 - six now which is here and what do we do
26:00 - we left visit right well we can't go
26:02 - left we can't go right and we visited in
26:04 - between there so now we have six and now
26:07 - we come back up to five we've gone right
26:09 - from it five is done we're at seven now
26:12 - what do we do we visit seven because you
26:14 - know we already went left now we're back
26:16 - here so we visit and now what do we do
26:18 - we go right and what do we do from 12
26:20 - well we start we go left so we go left
26:24 - here this guy goes left visit right so
26:26 - we visit him 8 then we come back up to
26:28 - 12 we visit because we've reached 12
26:31 - again and now we come over to 13 we go
26:34 - right we visit 13 and there we go that
26:37 - is the in order traversal and notice
26:40 - this gives our numbers in order so left
26:43 - visit right now if you wanted to go from
26:45 - greatest like the largest number to the
26:48 - smallest number you could do right visit
26:51 - left and that would give you the
26:52 - opposite order because you would go as
26:54 - far right as you could and then you work
26:56 - your way back going left and you would
26:58 - get this kind of flipped so you'd have
27:00 - 13 at the start and 3 at the end anyway
27:04 - so that is how the inorder traversal
27:05 - works gonna clear my screen and I will
27:07 - be back with postorder alright the post
27:10 - order traversal is kind of the opposite
27:12 - of preorder so I'm preorder we had left
27:15 - right visit or sorry we had visit and
27:16 - left right and postorder we have left
27:18 - right visit so what we do here is follow
27:22 - the same process that we've done before
27:23 - except we go left right visit so we go
27:25 - left alright we're here at five now what
27:28 - do we do and go to left we go left now
27:30 - what do we do when we get to three well
27:32 - we can't go left so what do we do we go
27:34 - right now from here we go left right
27:38 - visit so we write four because we can't
27:41 - do anything from there so we visit four
27:43 - is the last step what do we do we come
27:45 - back up to three here and now what do we
27:47 - do we visit three because we had gone
27:49 - right so we write three here now we come
27:52 - back up to five we go right because
27:54 - that's how we we had just gone left to
27:56 - go to three so now we go right to go to
27:57 - six we go left right visit so we write
28:02 - six here now we come back up to five we
28:05 - can finally visit five because we had
28:07 - just gone left right now what do we do
28:09 - we come back up to seven and we go to
28:12 - the right so now we go 12 what's the
28:14 - process here at left right visit so we
28:16 - go left here to eight obviously from
28:18 - eight we can't go left right so we need
28:21 - to visit which we do then we come back
28:24 - up to 12 what do we do we don't visit
28:25 - yet we go right because we just gone
28:27 - left so now we're going right so we go
28:29 - thirteen obviously we can't go anywhere
28:32 - from here so we just visit it now we
28:34 - come back up we can finally write 12
28:36 - because we just want to left right and
28:38 - now finally back up to seven and because
28:42 - we had gone left right from seven we can
28:44 - write seven at the end and that is our
28:46 - post order traversal notice that you're
28:49 - always gonna get your root node at the
28:50 - very end of your post order traversal
28:52 - and that is just the way that it works
28:54 - because left right visit and since this
28:56 - was the first node to repeat that
28:58 - process not until everything else has
29:00 - visited are we going to visit that root
29:01 - node there's different uses for all of
29:04 - these I'm not gonna talk about kind of
29:05 - what those are you can figure them out
29:07 - as you go but now I'm just gonna quickly
29:08 - show you an implementation in actual
29:11 - code for this and then we're gonna wrap
29:12 - up the video and hopefully you've
29:14 - learned a bit about binary search trees
29:16 - alright so what I'm gonna do here is
29:17 - just quickly program the post order in
29:19 - order and pre order traversal they're
29:21 - really straightforward you're gonna see
29:22 - how easy they actually are just notice
29:24 - I've created a visit function here which
29:26 - is gonna stand for what
29:28 - happen is when we visit the node and in
29:29 - this case I'm just gonna print whatever
29:31 - the value of that node is all right so
29:34 - what I'm gonna do here is start by doing
29:35 - pre-order so we're gonna say pre-order
29:37 - as the name of our method here it's
29:40 - gonna take self and it's going to take I
29:43 - guess
29:44 - current as the node that we need there
29:47 - alright so what we're going to do inside
29:49 - of pre-order is simply follow the
29:51 - process of visit left right so we're
29:54 - gonna do is we're gonna say visit and in
29:56 - this case current so I'll say self
29:59 - though visits this is proper and then
30:01 - we're gonna go to the left and we're
30:03 - gonna go to the right so to do that
30:04 - we're gonna say self dot free order like
30:09 - that and then we're going to go current
30:12 - dog left like that and self dot
30:17 - pre-order and in this case current dot
30:21 - right now this is all we need to do for
30:24 - pre-order and why does this work well
30:26 - exactly what we've shown before so
30:28 - current is gonna always start off as the
30:30 - root node so we're gonna do is we're
30:32 - gonna say self dot visit we're gonna
30:34 - visit this root node so print that out
30:36 - because that's what visit does here then
30:38 - we're gonna go to the left of the root
30:40 - node and call this pre-order function on
30:42 - the left of the root node which is now
30:44 - gonna pass whatever that left note is
30:46 - we're gonna visit it and then we're
30:48 - gonna go to the left and we're gonna go
30:49 - to the right and this is recursively
30:51 - gonna call itself and do the pre-order
30:53 - now I'm just gonna copy this and really
30:55 - quickly show you post order and in order
30:57 - but it's just a matter of moving around
30:59 - some of the statements in here so they
31:01 - follow the correct order so I guess
31:03 - we'll do in order here so in order is
31:06 - just gonna mean we're gonna go left
31:08 - visit right so let's move the left up
31:11 - here and that's all that we need to do
31:13 - and postorder will simply put the visit
31:16 - at the bottom and change this name to
31:19 - post order like that what am i doing
31:24 - here like that and then obviously I mean
31:27 - we need to change these to be post order
31:30 - and in order but you guys get the point
31:34 - here that is kind of how that works and
31:36 - that is all that we need to do for the
31:38 - implementation I'll just change these
31:40 - because it's going to bug me
31:41 - I don't and that is kind of how we can
31:44 - traverse through a binary search tree
31:46 - now there's tons of things you could do
31:47 - with the binary search tree I literally
31:49 - could have made this video like ten
31:50 - hours long of the amount of different
31:52 - problems you can solve and how it works
31:54 - but I wanted to give you guys a good
31:55 - fundamental understanding I know this
31:57 - that this was long but I really need to
31:59 - explain how all of these things actually
32:01 - work and I mean now you guys should
32:03 - hopefully have an idea how you can well
32:06 - add an element into your binary search
32:07 - tree and how to kind of loop through it
32:10 - in pre-order in-order and post-order now
32:13 - there's tons other things you might want
32:14 - to do like delete find search all of
32:17 - that but I'm gonna leave that to you
32:19 - guys with this knowledge you should be
32:20 - able to do that and as always if you
32:22 - guys have any questions don't hesitate
32:23 - to leave them down below that has been
32:25 - it for this video I hope you guys
32:26 - enjoyed please leave a like and
32:28 - subscribe if you did