00:00 - hey guys and welcome back so in this
00:02 - video I'm gonna be talking to you about
00:03 - yet what git is and how to use it now
00:07 - there's a ton of stuff you can do with
00:08 - git in this video is really geared
00:10 - towards beginners that have no
00:11 - experience with git or repositories or
00:13 - anything like that so I'm gonna try to
00:14 - explain briefly what that is and then
00:16 - get into all of the different commands
00:18 - and how you can use them and why it's
00:20 - useful now git is something that I
00:22 - guarantee you will be expected to know
00:24 - and to use in probably workplace or a
00:26 - team environment for me in school it's
00:28 - really frustrating when a lot of
00:29 - teammates that I want to work with don't
00:31 - know how to use git because it just
00:32 - makes things a lot more difficult or I
00:34 - have to explain it's them so it's
00:35 - something that you should really know
00:36 - and I recommend if you don't know it you
00:38 - watch this video make sure you
00:39 - understand what I'm doing now the first
00:41 - step to using git is to download it now
00:44 - you can download for any OS the commands
00:47 - are gonna be the same I'm gonna be doing
00:48 - this on Windows but I'll leave this link
00:50 - in the description obviously click on
00:51 - your appropriate operating system and
00:53 - just go through the installation and
00:55 - don't change anything just keep all the
00:57 - default settings unless you know what
00:59 - you're doing and you know what you're
01:00 - changing just keep all the default
01:01 - settings and everything should work fine
01:03 - there's nothing you need to modify not
01:04 - okay so once we've installed it the next
01:08 - step is to well we're gonna have to talk
01:11 - about quickly what a repository is so
01:13 - essentially what get allows us to do is
01:15 - do version control on different versions
01:18 - of our code so essentially say we write
01:20 - like they're working a team of five
01:22 - people we want to have one main codebase
01:24 - that stores all of the code for our
01:27 - project say I'm in charge of doing like
01:29 - a login window someone's in charge of
01:30 - like the backend of a server right and
01:32 - we need all that code in one area well
01:34 - chances are you're probably gonna write
01:36 - the code on your local machine and then
01:39 - update that main codebase now that's
01:41 - what get allows us to do but it also
01:43 - allows you to just save like pull things
01:47 - add think we'll go through all of it but
01:49 - that's the main function of it is for
01:51 - like team based coding so you're gonna
01:54 - work on what's known as a local
01:55 - repository which is kind of all the code
01:57 - on your machine and then you're going to
01:59 - commit specific files and updates and
02:02 - everything to the main code base where
02:04 - everyone is storing like they're
02:06 - finalized versions of code and pulling
02:08 - information and grabbing information
02:10 - from there that's what essentially git
02:12 - does for us
02:13 - now git is also useful if you're working
02:15 - alone because that means that you can
02:17 - what do you call it change things like
02:20 - Sam working on my laptop and I want to
02:22 - work on something on my laptop and then
02:24 - updated to the codebase and then from my
02:25 - PC I want to download that same codebase
02:28 - and then have that updated version on my
02:30 - computer that's another way we can use
02:31 - git there's tons of different ways but
02:33 - I'm just giving you some of the main
02:34 - ideas of it so the first thing we need
02:36 - to do is create what's known as an empty
02:38 - repository which is going to be the
02:40 - local repository on a machine so this is
02:42 - only available to us and this is what's
02:44 - gonna store our own code and then we can
02:48 - send that to the remote repository which
02:50 - will be the main code base for the team
02:51 - or the online version right when we're
02:54 - ready to do so so to do this there's two
02:56 - ways that we can do all the commands I'm
02:57 - about to show you the first way is to do
03:00 - it from command prompt or like terminal
03:03 - or whatever you're using and just type
03:04 - git and and do it in here that's fine
03:07 - you can use this but what I'm gonna use
03:09 - is what's known as the git bash so if I
03:11 - just type git in my thing here I can
03:13 - click on git bash it's gonna bring up a
03:15 - more Linux II kind of terminal window
03:18 - where I can do all of my git commands
03:20 - now what I've done and what you should
03:23 - do as well is create a folder empty full
03:27 - onion doesn't have to be empty but
03:29 - whatever project you're gonna be working
03:30 - in so in this case I want to create a
03:32 - rip repository for a git test which is
03:34 - on my desktop you can see this folder
03:36 - here I need to change directories into
03:40 - that folder so let's say you had a
03:41 - repository already you wanted to go into
03:43 - maybe like I wanted to go into cat game
03:45 - or something then I would just change
03:47 - directory into that and do the exact
03:49 - same steps but just in that directory so
03:51 - what I'm gonna do is I'm going to do CD
03:53 - and then get - alright I need to go to
03:56 - desktop for sure so I'm going to go CD
03:59 - desktop and then CD get - test which is
04:02 - the name of the folder that I want to
04:04 - create a blank repository now I've just
04:06 - pulled up the folder on the side here so
04:07 - you guys can see exactly what's
04:08 - happening when I do these commands but
04:10 - what I'm gonna do now is initialize a
04:12 - blank github repository or not get up
04:15 - just get repository we will use github
04:17 - later I don't you get an it now by
04:20 - typing this in the current directory
04:22 - that we're in you should see or actually
04:25 - you probably won't see a folder pop
04:27 - but it's gonna initialize a repository
04:30 - that's gonna allow you to add commits
04:31 - push-pull things from other repositories
04:34 - so if you want to see this folder what
04:37 - you have to do is you have to actually
04:38 - go to this view tab in your Windows
04:41 - Explorer and then just hit hidden items
04:43 - I don't know how to do it on Mac or
04:44 - Linux but I'm sure someone will probably
04:46 - leave a comment down below or something
04:47 - on how to do that so anyways that's how
04:49 - you can see that folder now we can open
04:51 - up this folder and look at it if we want
04:53 - but it really doesn't matter to us this
04:55 - is just what's gonna allow us to run
04:56 - commands and save stuff we don't really
04:58 - care what's in this folder okay so now
05:01 - we have the folder and now what we need
05:03 - to do is well we need to start creating
05:04 - some files that we can commit and add to
05:07 - our local repository because right now
05:09 - it's just an empty repository that
05:10 - doesn't have anything in it we need to
05:12 - add stuff to it so I'm just gonna create
05:14 - a few files quickly so I'm just gonna
05:16 - create timid up high and I'll create a
05:20 - readme dot txt okay
05:23 - so I've created two files you can see
05:25 - them here inside of my main directory
05:29 - now these are not yet a part of the
05:31 - repository because the repository we
05:33 - need to run some commands to add them
05:35 - into the repository so if we want to add
05:39 - these files into the repository there's
05:42 - a few different ways that we can do this
05:43 - the first way is to simply type git add
05:46 - and then type period and/or dot and what
05:49 - this is gonna do essentially is add all
05:51 - of the files in our directory to the
05:54 - repository so if I do this and I type
05:56 - git add actually well I'll do that in a
05:59 - second but if we want to see the status
06:01 - of a repository we can type git status
06:03 - and you can see that it says no commits
06:06 - yet and it says untracked files these
06:08 - are what are in the current directory
06:09 - but we have not added yet to the
06:11 - repository
06:12 - okay so watch now if I type git add dots
06:17 - I'm gonna add these files into the
06:19 - repository and now if I do get status
06:21 - you can see that it says new file
06:23 - readme.txt a new file temp I you can see
06:26 - there in green we've added them to root
06:27 - the repository but we have not yet
06:30 - committed them and this is where I'm
06:31 - going to talk about the difference
06:32 - between having them added and committing
06:34 - so there's two areas for our repository
06:37 - there's one area called like the staging
06:39 - and the index
06:39 - area and then there's another area
06:41 - that's like the actual repository that
06:44 - stores different versions of our code
06:46 - and all that so the first place which is
06:50 - the staging place is where we add files
06:52 - in before we commit them so it's kind of
06:54 - a temporary place where we're able to
06:56 - make all the changes that we want and
06:58 - then commit that to the actual local
07:01 - repository so right now these files are
07:04 - in the staging area because I've only
07:05 - added them I haven't committed them so
07:08 - if I want to commit these files and
07:10 - actually make a permanent change in the
07:12 - repository what I do is I do git commit
07:16 - - em and then I type a message which is
07:19 - essentially the change that I made so in
07:21 - this case I'm just gonna say first first
07:27 - change like that okay and by doing that
07:29 - you can see that it now says two files
07:31 - changed zero insertion zero deletions
07:34 - and then it tells you essentially what
07:36 - it did okay and that is all is to add
07:40 - and commit things to the repository now
07:43 - the reason we do this with the commits
07:46 - and we give them different names is
07:47 - because this repository is gonna
07:49 - actually store all of the different
07:51 - versions of your code and you're gonna
07:52 - be able to look at it and see um what do
07:56 - you call it when you change something
07:57 - what you change so say you mess up a
07:59 - file and you committed it to the
08:01 - repository now the repository is broken
08:03 - it's not working you can actually revert
08:05 - back to other versions of the code that
08:08 - you've put in that repo essentially and
08:10 - repo is just sort show it for a
08:11 - repository okay so that's how we add
08:13 - things how we make the commits now let's
08:17 - just talk about like changing files and
08:19 - how you can commit just one file to file
08:21 - all that kind of stuff so if I open up
08:23 - this readme dot this readme file and I
08:25 - type hello in here and just save that
08:27 - now I've made a change to this directory
08:30 - but I haven't made a change to the
08:32 - repository so look if I see if I Ted get
08:35 - status like this you can see that it
08:38 - says there's a modified file readme.txt
08:40 - and we haven't changed the repository
08:43 - yet this file is just it knows that it's
08:44 - modified but we haven't changed anything
08:46 - so change is not stage-four commit and
08:48 - that's what it means or it's not in the
08:49 - staging area so if I want to add this
08:53 - specific file into the repository I'll
08:55 - do the same thing I'll do get add but
08:57 - this time I'm just going to type the
08:58 - file name sir readme dot txt and then I
09:02 - can commit it to the actual repository
09:05 - again by doing git commit - M and then
09:09 - just doing change readme like that
09:12 - I'll say one file changed one insertion
09:15 - and now in this actual repo here that's
09:18 - where we have like the changed readme
09:21 - file
09:21 - so essentially you can make
09:22 - modifications to your code test things
09:24 - out before you make the final change to
09:26 - your repository which is really nice so
09:28 - uhm I have actually a couple of command
09:31 - cheat sheet I'll bring up here and we'll
09:33 - make sure we go through most of them
09:34 - just yeah okay so essentially this is
09:39 - we've gone through an it add status
09:41 - commits that's another way to commit so
09:44 - now we'll go through how we can actually
09:46 - remove files from our repository so to
09:50 - remove a file well let's first just type
09:52 - git status nothing to commit working
09:57 - tree clean okay if we want to remove
09:59 - something what we can do is we can do
10:01 - git RM - - cache and then type the name
10:05 - of the file we want to remove in this
10:07 - case I'll type Tim dot py okay and now
10:10 - what this means is we've deleted Tim dot
10:12 - py so if I do get status you can see
10:16 - that it says deleted Tim PI on track
10:19 - files
10:20 - Tim dot PI which means essentially it's
10:22 - not committed into the repository yeah
10:26 - so leave the lead to this file but now
10:28 - that we've deleted it we actually have
10:30 - to commit that delete just like when we
10:32 - add something we need to commit that we
10:34 - need to commit the delete as well so to
10:36 - do that we can just type git commit and
10:38 - then just type like - M as our message
10:41 - and we'll type deletes Tim dot py and
10:45 - there we go it says we've deleted that
10:47 - file and then if we tell you get status
10:50 - you can see that it just says this is
10:53 - one file that we don't have in the
10:54 - repository right now and that's how that
10:56 - works in terms of removing adding things
10:58 - into the github repository so that's all
11:00 - I'm going to go through in terms of
11:02 - adding stuff removing stuff now I'm
11:05 - going to talk about branches
11:06 - quickly and then we're going to talk
11:07 - about working with a remote repository
11:08 - which is probably the most important
11:11 - part of this so now that we know the
11:12 - kind of the basic commands how to
11:13 - add/remove things let's talk about
11:16 - branches now remember I was saying that
11:19 - you're gonna have a main code base and
11:21 - you're gonna have different people
11:22 - working on that code base well if you're
11:25 - working on a massive file maybe hundreds
11:27 - of different people you might not want
11:30 - each person to be modifying the main
11:32 - code base each time they make a commit
11:34 - to it so what we actually do is we can
11:37 - work on something called branches which
11:39 - are exactly just branches off of the
11:42 - main code base which means that say
11:44 - where two people are working on a login
11:45 - script right then we can modify the
11:48 - branch that deals with the login script
11:50 - and that branch holds all of the code
11:52 - that deals with the login script and
11:54 - only once that branch is complete and
11:57 - finished we'll merge it with the main
11:59 - code base and add it in their memory I'm
12:00 - going to show how to do all that right
12:01 - now so if we want to create a branch and
12:04 - we can do this on a local repository as
12:07 - well as like a remote one two what we're
12:10 - gonna do is we're gonna type git branch
12:13 - and then the name of the branch so in
12:16 - this case I'm just gonna call it let's
12:18 - say I don't know we can't we can use the
12:21 - login example it's a pretty standard
12:23 - example we'll do get branch login okay
12:25 - and now we've created a branch called
12:28 - log in but notice that on the side here
12:30 - we're still in what's known as the
12:32 - master branch now the master branch is
12:35 - the main branch that stores all it's
12:38 - it's the main thing it's the middle code
12:40 - base all right and all the other
12:42 - branches like go off of the master
12:43 - branch so if we want to change onto the
12:46 - log in branch as opposed to the master
12:48 - branch what we need to do is you need to
12:50 - do get check out and then type the name
12:54 - of the branch we want to go to in this
12:55 - case I want to go to log in so now I've
12:58 - switched to the log in branch let me
13:00 - close this so now notice that on the log
13:03 - in branch if I type get status you can
13:08 - see that we have an untracked file that
13:11 - is tim dot pi so we can now actually
13:13 - commit what is it let's make a change to
13:15 - read me let's call this hello Tim like
13:19 - that so remember on the
13:20 - their branch it was just hello right so
13:22 - now I've made a change I've called the
13:23 - hello Tim and you know what let's even
13:24 - edit this Python file and let's import
13:30 - OS okay like that alright so now we've
13:34 - made two changes to here but we've
13:36 - changed them on the login branch because
13:38 - we've just changed the branch server in
13:40 - to be login so now if I commit these
13:43 - files or first add them to the login
13:46 - branch and then commit them to the login
13:48 - branch they will be different than the
13:50 - master branch files and you guys will
13:51 - see how that works in a second so what
13:53 - I'm gonna do is I mean first gonna type
13:54 - git add dot to add all of it and then
13:57 - i'm gonna type git commit - m and then
14:00 - just type update okay so now it says two
14:04 - files changed to insertions one deletion
14:06 - and then it created this file tim dot pi
14:09 - because it wasn't already on the branch
14:10 - so now if I want to uh what does it
14:13 - switch back to the other branch and see
14:15 - the difference in files I'll do that
14:17 - right now but first let's just see
14:18 - readme right now it says hello ten right
14:20 - so now let's change to the other branch
14:22 - so let's do ah that's I didn't mean to
14:25 - do that
14:25 - let's go back to this terminal and let's
14:27 - go get check out if I spell that
14:31 - correctly master okay so now we've
14:34 - switched to the master branch and notice
14:36 - that on the master branch that Tim file
14:39 - doesn't exist and that's because we
14:41 - deleted it from the master branch look
14:44 - over here on the right side that file is
14:46 - no longer there and if I open the readme
14:47 - file you see it only says hello
14:49 - it doesn't say hello Tim so this is a
14:52 - really interesting way that we can work
14:53 - on different projects in the same
14:55 - repository on different branches so you
14:58 - can modify something on one branch and
15:00 - it's not going to affect the other
15:01 - branch and that's exactly how and why
15:03 - this is so useful so yeah that's
15:07 - essentially how that works in terms of
15:09 - the branches so the same thing here now
15:11 - if I want to change branches again I'll
15:13 - do get get check out and then we'll just
15:18 - do log in and now we've switched to log
15:20 - in and notice that Tim pops back up
15:22 - readme pox but pops back up when I go to
15:24 - readme it says hello Tim down so that's
15:26 - how we change the branches all right so
15:29 - let's see what else we need to do now
15:30 - okay so I think we are
15:32 - almost
15:34 - at the point to do remote repositories
15:36 - first I want to show you how we can
15:38 - merge things together so for example
15:41 - we're on the login branch right now if
15:43 - we wanted to merge a branch to the
15:46 - master code base and essentially take
15:48 - all the code from the login branch and
15:51 - put it on master what we need to do is
15:52 - need to go back to the master branch and
15:54 - then simply type git merge and then just
15:59 - the name of the branch in this case
16:00 - we'll type log in so when we do that you
16:03 - can see we're gonna take all the code
16:05 - from log in and throw it on to the main
16:07 - code base and if there's anything on
16:09 - login that's different than the stuff on
16:11 - the main code base it's gonna overwrite
16:12 - that so let's have a look now and we're
16:15 - in the master branch and now we see that
16:17 - this Tim files popped back up in the
16:19 - master branch right so let's look at
16:21 - readme and you can see that readme now
16:23 - says hello Tim as opposed to saying
16:25 - hello because it overrode it and now if
16:28 - we open this Tim file it says import OS
16:31 - right because that's what it said on the
16:32 - lot other branch now we can still go to
16:35 - the other branch and make changes on
16:36 - that and then re merge them later that's
16:39 - perfectly fine okay so that's
16:41 - essentially how the merging and all that
16:43 - works now it is time to go to remote
16:47 - repository so for right now all we've
16:48 - been doing is modifying the repository
16:51 - on our main machine
16:52 - we haven't been changing anything online
16:54 - right so now we need to figure out how
16:57 - we can actually update this to the cloud
16:58 - so other people can see it make changes
17:00 - to a main repository so to do that we're
17:03 - gonna use github
17:04 - now github is essentially a free hosting
17:07 - platform where you can what do you call
17:11 - it change repositories look at versions
17:13 - it's just I'm sure a lot of you guys
17:15 - know github and have used it but it
17:17 - works obviously with git so what we need
17:19 - to do is need to start by creating a new
17:21 - repository which is going to be our
17:22 - remote repository on the cloud right so
17:25 - I've just signed into github it's free
17:28 - just create an account github comm and
17:29 - just go to new repository I'm just gonna
17:31 - call this test ok and description I
17:34 - don't need to give it any I'm gonna make
17:36 - it public and you can initialize this
17:39 - with a readme file if you want but you
17:40 - don't have to so I'm just gonna leave
17:42 - that for now so I'm gonna create create
17:44 - repository right now and
17:46 - it's gonna say this is essentially how
17:49 - we can upload stuff to this repository
17:52 - so all the code we've written is on our
17:54 - main machine right now we could actually
17:56 - do like we could use the GUI here and
17:59 - upload files but we don't want to do
18:01 - that we want to do this from the command
18:02 - line nice and easy right so let's make
18:05 - this a bit smaller and it's actually
18:08 - telling us exactly what we need to do to
18:11 - upload something to this repository so
18:15 - first it's saying we have to create an
18:16 - empty repository we have to add the
18:18 - files we want we have to commit them and
18:19 - then we have to push them to to the
18:23 - branch that we want so what we're gonna
18:25 - do now is we're gonna create what's
18:26 - known as a remote repository on our
18:28 - local machine which essentially is the
18:30 - configuration for how we upload
18:32 - something to the remote repository so
18:34 - what we do is we just type git remote
18:36 - and notice what I do this nothing pops
18:39 - up now that's because I don't have any
18:41 - remote repositories right now if I have
18:44 - any remote repositories they'd be listed
18:46 - so what we need to do is we need to
18:47 - create one so to do that I'm gonna do
18:49 - git remote add and then I'm gonna type
18:52 - the name of the repository I can name it
18:54 - whatever I want and then put this link
18:57 - in right here ok so what I'm just gonna
18:59 - do is name this tutorial ok so git
19:05 - remote add tutorial and then what I'm
19:07 - gonna do is take this link right here
19:09 - it's also up there copy it and just
19:12 - paste it right here now if I do this and
19:14 - I hit enter no errors let's we've
19:17 - created a remote repository called
19:18 - tutorial so now we have this repository
19:21 - on our local machine and we have an
19:23 - empty repository and I'll show you it
19:24 - all right here on our woody code like
19:29 - github ok so what I'm gonna do now is
19:31 - I'm gonna push the code from our local
19:35 - repository to the online repository now
19:38 - you should only do this once you've
19:39 - you're certain that your codes working
19:41 - everything and that because you're gonna
19:43 - override things that are on this
19:44 - repository right so we're gonna push to
19:46 - what's known as the master branch and
19:48 - we'll talk about that a second so we're
19:49 - literally just gonna copy what it says
19:51 - here and say git push - you and then the
19:55 - name which in this case I named mine
19:56 - tutorial I guess you could have named it
19:57 - origin to make easier
19:59 - then just say master and this master
20:01 - just stands for what branch were pushing
20:03 - to we wanted to push to the login branch
20:05 - we would just type login okay so I'm
20:08 - gonna hit enter and wait a second and
20:10 - it's gonna tell me to login to github so
20:12 - I got a login okay so having a lot of
20:16 - issues logging in just because I forgot
20:17 - that I had to factor authentication I
20:19 - was just messing up but essentially once
20:22 - you do this you type git push - you
20:24 - tutorial or whatever the name of your
20:26 - repo is or whatever the thing is and
20:29 - then master you should get this stuff
20:31 - popping up saying that it's pushing it
20:33 - to the branch master now notice that on
20:36 - my right side here you can see that it
20:39 - did push these over and says readme.txt
20:41 - Tim da PI and I have the files on this
20:45 - repo now so now I've essentially pushed
20:48 - them to this repository now again if I
20:51 - want to make changes to my files I'll
20:53 - first change it on my local machine so
20:54 - I'll add them into that my repository
20:57 - and then when I'm done with them and
20:58 - I've committed them to my local
21:00 - repository I will push that entire
21:02 - repository to the we call it the main
21:05 - code base or the remote repository which
21:07 - is on github now if you want to push
21:09 - branches well remember we just type
21:12 - master to do this so I can type the log
21:13 - in and push that branch as well and this
21:18 - then you see branch login setup track
21:20 - remote branch from tutorial so now we
21:22 - have another branch and if I go to
21:23 - branch you can see that it says login
21:25 - and I can look at the log in branch and
21:27 - notice that well it's gonna be the same
21:28 - because we merge them but I have this
21:30 - branch login and I can go to the master
21:32 - branch as well up here so that is
21:34 - essentially how that works very
21:36 - straightforward I mean this isn't that
21:39 - hard you just kind of have to play with
21:40 - it to understand I'll quickly bring this
21:43 - up so you guys can have a look at this
21:44 - stuff
21:44 - oh there's something I forgot to do that
21:46 - might be important if you work as a team
21:48 - you may want to actually I'm gonna copy
21:51 - this type this so git config - global
21:55 - and I think it's actually two hyphens -
21:59 - - global username and then give yourself
22:02 - a name so this way when you actually
22:04 - make commits it's gonna say who
22:06 - committed it so if I do Tim like that I
22:09 - mean I don't have to put in quotes or
22:10 - Eunice - Tim now I've set up my
22:13 - Lobel name so whenever I make any
22:14 - commits to the repo so the remote
22:17 - repository I'm gonna have it's gonna
22:19 - show up my name you may also want to
22:21 - change your email as well by doing user
22:23 - dot email and then you can do tim at and
22:26 - now whatever my email is so at Tech with
22:27 - Tim net and this way now when you make
22:30 - commits to the remote repository it'll
22:33 - show your information so that if someone
22:34 - needs to contact you they can do so okay
22:38 - so they're just editing this video and I
22:39 - realized I figure out a pretty important
22:41 - part so I'm just gonna show you quickly
22:42 - how you can actually pull repositories
22:45 - from the main code base or from like
22:48 - wherever you want so essentially you can
22:49 - pull specific branches or you can just
22:52 - pull the entire code base so let's say
22:53 - I'm on github and I find a project that
22:55 - I want this could again be the project
22:57 - that you're working on or it could just
22:59 - be someone else's project so in this
23:00 - case understand one that I made which is
23:02 - this online chess game so I'm just gonna
23:04 - go and I'm gonna click on clone or
23:06 - download so I found this on github I'm
23:07 - gonna copy this link and what I'm gonna
23:09 - do to actually clone this is I'm gonna
23:11 - start by making a directory where I want
23:14 - to clone it to so I'm going to say make
23:15 - dirt and let's just call it chess and
23:18 - I'll make that on my desktop so now I
23:20 - can CD into that directory and now what
23:22 - I'm gonna do is I'm gonna do git pull
23:24 - and then just type the name of the woody
23:28 - quotes the thing here whatever whatever
23:30 - it said on get up so I'll do that
23:32 - not a git repository or any of the pear
23:34 - I'm sorry so I just have to do get knit
23:36 - first my bad and then I can clone this
23:39 - repository by pulling it and you can see
23:41 - it's pulled it and it's got that and now
23:43 - if I go to what we call it chess where
23:47 - is the chest folder right here you can
23:49 - see that I have all of these files that
23:51 - are actually on this repo here that's
23:54 - online and I've downloaded them to my
23:56 - local repository on my machine so steps
23:59 - to pull you could go I would create a
24:01 - folder if I were you and then creat make
24:03 - that a git repository but I didn't get
24:05 - in it and then just pull it by doing
24:07 - pull and that's literally all you have
24:09 - to do to clone a repository like this
24:12 - and if you want to clone like say had
24:14 - another branch you could click on the
24:15 - branch and then just click clone and it
24:17 - would tell you the URL to do that as
24:19 - well so anyways that has been it for
24:21 - this video if you guys enjoyed please
24:22 - make sure you leave a like and subscribe
24:23 - and I will see you again in another one
24:25 - [Music]