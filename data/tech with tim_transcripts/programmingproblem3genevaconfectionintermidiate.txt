00:00 - hey guys and welcome back to another
00:02 - weekly programming problem and in
00:05 - today's video I'm going to be doing a
00:06 - little bit of a more advanced problem so
00:09 - if you had done the previous problems
00:11 - and you found them maybe too easy or
00:12 - just the right difficulty this is a
00:14 - really good one to try it's a little bit
00:17 - more challenging although it's not too
00:18 - difficult and again I'm gonna be going
00:20 - through a full explanation here on how
00:22 - to solve this problem and personally I
00:24 - really like this problem so that's why
00:26 - I'm doing it today now full disclosure I
00:28 - did not make this problem it's actually
00:30 - from the University of Waterloo so they
00:33 - actually have a competition that they
00:34 - run all throughout Ontario which is
00:37 - called the CCC so the Canadian computing
00:39 - competition so actually throughout
00:40 - Canada sorry so anyone in Canada pretty
00:43 - much is allowed to enter and it gives
00:45 - you a set of five problems increasing a
00:47 - difficulty and you're able to solve them
00:49 - so this one is the third problem in that
00:51 - set and typically the third ones are
00:54 - about an intermediate level so this one
00:56 - is about that level and I really like
00:58 - this one because it shows that if you
01:01 - can figure out what the questions asking
01:03 - and kind of understand the problem
01:05 - that's not too difficult to actually
01:07 - solve it so let's go ahead and read
01:08 - through this one right now so the name
01:10 - of the problem is called the Geneva
01:12 - confection and pretty much I'll just go
01:15 - ahead and read it in order to ensure
01:16 - peace and prosperity for future
01:18 - generations the United Nations is
01:20 - creating the world's largest candy the
01:22 - ingredients must be taken in railway
01:24 - cars from the top of a mountain import
01:25 - into Lake Geneva the railway system goes
01:28 - steeply from the mountain top down to
01:29 - the lake with the t-shaped branch in the
01:31 - middle as shown below so you can see we
01:33 - have a mountain branch and lake and the
01:35 - reason I really like these problems as
01:36 - well it's because they give you some
01:37 - good visuals and allow and give you
01:39 - really good examples as well explaining
01:41 - the problem so it's easy to understand
01:43 - rather than me trying to write one like
01:44 - this so right now each of the end
01:47 - ingredients is in their own railway car
01:48 - each railway car is assigned a positive
01:50 - integer from 1 to N the ingredients must
01:53 - be poured into the lake in order 1 2 3 4
01:55 - etc but the railway cars are lined up in
01:58 - some random order the difficulty is that
02:00 - because of the especially high gravity
02:03 - today you can only move cars downhill to
02:05 - the lake or sideways onto the branch is
02:08 - it still possible to pour the
02:09 - ingredients into the lake in the
02:11 - specified order
02:13 - otherwise is it not possible right so
02:15 - I've kind of skipped through a bit of it
02:17 - because I've already read the problem
02:18 - much time so pretty much what it's
02:19 - asking is you're gonna have a list of
02:21 - ingredients here 2 3 1 4 for example and
02:24 - they're gonna be labeled 1 2 n so n
02:27 - could be any number that's how many
02:29 - ingredients are in the bridge or on the
02:32 - mountain sorry and you want to get the
02:34 - ingredients starting at 1 into the lake
02:36 - in order and you're able to use this
02:38 - branch on the side here so this goes
02:40 - through how you would solve this very
02:42 - simple case of 4 different ingredients
02:44 - so say we want to get one in first but 4
02:47 - is in the way so the first step it says
02:49 - here slide car 4 out to the branch we
02:51 - would slide 4 to the branch stays on the
02:54 - branch now we now have 1 nothing
02:57 - blocking it 1 is able to go into the
02:58 - lake now we check the mountain talk we
03:01 - say well it's 3 able to go in like no we
03:03 - need to first so we slide 3 onto the
03:05 - branch 2 goes into the lake and then
03:07 - there's nothing left on the mountain top
03:08 - so we then slide 3 from the branch and 4
03:11 - from the branch into the lake and we get
03:13 - them in the right order
03:14 - now I know I went really fast I'm gonna
03:16 - explain another simpler case I'm
03:19 - actually gonna use pain to just show you
03:20 - the exact order of what you need to do
03:22 - so that you can understand it the input
03:25 - is down here so the first line will
03:26 - contain the number of test cases on that
03:29 - will be run so this is a little bit
03:30 - different than some of the other
03:31 - problems we did as they were a little
03:33 - bit easier and this is where you'll
03:35 - start to see that actually getting the
03:37 - input for some of these problems can be
03:38 - a little bit challenging and might
03:40 - actually take you a few minutes to
03:41 - figure out so this one since the problem
03:44 - is somewhat simple I would say for this
03:47 - kind of level of problem is asking you
03:49 - to do multiple test cases at once so
03:52 - it'll give you like three sets of
03:54 - ingredients that will be at the amount
03:55 - at the top of the mountain or five sets
03:57 - of ingredients at the top of the
03:58 - mountain and your program will have to
04:00 - determine the answer to all of them so
04:02 - whether they can go into the lake or if
04:04 - they're not able to go into the lake and
04:06 - so on so it says here the input each
04:08 - test case has the form of an integer n
04:11 - on the first line which tells you how
04:12 - many cars are gonna be lined up from top
04:15 - to bottom and then the cars will always
04:18 - use the numbers from 1 to N in some
04:20 - random order so to then give you the
04:21 - order again from top to bottom so the
04:24 - first number that you're gonna see in
04:25 - your input which would be this one here
04:26 - at
04:27 - the test case is two so actually sorry
04:30 - I'll just go through the input here
04:31 - quickly um so the first line here we
04:34 - have is art is the amount of test cases
04:35 - so it says two test cases then we see
04:38 - that the next next line is going to be
04:40 - the number of what color I want to say
04:43 - elements or ingredients in our first
04:45 - test case so it says we have two test
04:48 - cases in the first test case there's
04:50 - four ingredients so we have two three
04:52 - one four that's the number the order of
04:55 - all those ingredients that we go down a
04:57 - line say now we're on test case - this
04:59 - one has four ingredients as well and
05:00 - that's four one three - and I hope that
05:03 - makes sense for you guys and then the
05:05 - output is yes and no because there's two
05:08 - test cases so we need two different
05:10 - outputs on two separate lines all right
05:13 - so you can obviously tell this one's a
05:14 - little bit more complicated but now I'm
05:16 - just gonna go into paint and I'm gonna
05:17 - explain it and hopefully we can
05:19 - understand how this problem works so
05:21 - I've just used a really simple case here
05:23 - of one two three lined up just to show
05:25 - you kind of how this works
05:27 - so first and the first process that
05:30 - we're gonna do when we want to solve
05:31 - this problem is take it down to the
05:34 - simplest case and this is what we want
05:35 - to do for a lot of programming problems
05:37 - is we want to solve a really simple case
05:39 - to figure out the steps that we need to
05:40 - take to do that
05:41 - and then we can scale it up for a larger
05:44 - case because a lot of these problems if
05:45 - you can figure out how to solve a really
05:47 - simple case it's gonna be the same for a
05:48 - larger case just those steps repeated
05:51 - over and over and that's the same for
05:52 - this problem so our first step and this
05:55 - at the very beginning is we're just
05:56 - gonna look at the top of our mountain so
05:58 - this is my little branch here I know
06:00 - this is a crude kind of sketch and paint
06:02 - but just play along so we see that we
06:05 - have three now the ingredient that we
06:06 - need to go into the lake is one because
06:08 - we're starting and we need one to go in
06:10 - so is three one no it's not so the first
06:14 - step and this is always what we're gonna
06:16 - do at the very beginning is going to say
06:17 - well there's nothing on the branch so
06:19 - the only thing we can do if this is not
06:20 - one is moved over to the branch so we
06:22 - have three we take it and we move it to
06:24 - the branch over there so then what I can
06:26 - do from here is I can get rid of three
06:28 - get rid of this little arrow painfully
06:31 - and then we can go ahead and we can
06:34 - check the top of the mountain again so
06:36 - now that we have three on the branch we
06:39 - check the top of the mountain we say
06:40 - well we need the ingredient one to go
06:43 - into the mountain is two one
06:45 - no it's not so all we can do there is we
06:49 - can go ahead and take two can plop it
06:51 - over to the branch over here so we take
06:53 - two and we write two there then we raise
06:56 - two from here and we continue on with
07:00 - that process so now we do the same thing
07:03 - we say well we need one to go into the
07:06 - lake well here we are at the top of the
07:08 - mountain one is here so we can go ahead
07:10 - we can take one and we can shoot it down
07:12 - into the lake over here so once down
07:15 - there now if there was any other
07:17 - elements on the top of the mountain so
07:19 - say we had for example 4 we would we
07:22 - again check we'd say well is 4 so now
07:25 - we're on element 2 we need element 2 to
07:27 - go into the lake is 4 - no it's not so
07:31 - what I'm gonna do now is I'm gonna check
07:33 - the branch so I check the branch I see 2
07:36 - is here it's on the branch so I go ahead
07:37 - I take 2 I erase it from the branch and
07:40 - I put it into the lake so then I go here
07:44 - now 2 is in the lake all right same
07:46 - thing we check the top of the mountain
07:48 - again we say ok is we need the third
07:51 - ingredient to go in well is 4 3 no it's
07:54 - not so we're gonna leave that there and
07:56 - we check the branch we say is is 3 3 oh
08:00 - yes it is so now we erase 3 all right we
08:04 - take 3 and we put it into the lake and
08:07 - then we repeat the process we check the
08:09 - top of the mountain we say well is 4 4
08:11 - yes it is it goes into the lake now we
08:13 - have nothing left on the branch nothing
08:15 - left at the top of the mountain so there
08:17 - we go we know that we can complete the
08:19 - recipe all right so now I'm gonna show
08:22 - I'm gonna add a few things here to make
08:24 - it a little bit more complex so this is
08:26 - the case where you're not going to be
08:28 - able to complete the recipe that I'm
08:30 - about to show so the one that we just
08:31 - have is fine obviously for is able to go
08:34 - into the mountain so what will happen
08:36 - for example if we can't complete the
08:38 - recipe recipes we'll have something
08:40 - along the lines of I want to say this
08:47 - 6-4
08:49 - and then I'm gonna write three I'm gonna
08:53 - just gonna move it back up to the top of
08:54 - the mountain just so that it uh we can
08:57 - use this case here alright so for this
09:00 - is my four by the way I know it's really
09:01 - bad just just pretend that's a four
09:03 - alright so we checked the top of the
09:05 - mountain like a regular process we say
09:07 - well it's three three yes it is okay we
09:09 - move it in and now there's nothing at
09:11 - the top of the mountain right so now
09:13 - that there's something at the top of the
09:14 - mountain we have to check the branch so
09:17 - since we were gonna check the mouse
09:19 - again we check this out there we checked
09:20 - the branch and we see a six now is six
09:23 - equal to four no it's not so we can't
09:27 - complete the recipe because there's no
09:29 - way for six to go back up to the top of
09:31 - the mountain there's no way to four for
09:32 - four to go in before six and that's the
09:35 - case in which the recipe cannot be
09:37 - completed where there's nothing at the
09:39 - top of the mountain and the number at
09:41 - the edge of the branch is not able to go
09:43 - into the lake I hope that makes sense so
09:45 - now I'm gonna go into the code and talk
09:48 - about that a bit more in detail so you
09:50 - guys can see here this is my code I'll
09:52 - scroll through it really quickly it's a
09:54 - bit longer than some of the other code
09:55 - and I've really annotated it so I've
09:57 - really written a lot so that you guys
09:58 - can understand how this works so if you
10:00 - feel like it you can go ahead and read
10:01 - this but I pretty much just explain this
10:03 - little paragraph already so I start off
10:06 - by grabbing the input now the input we
10:07 - have test cases it's just equal to in
10:10 - int input so our very first line really
10:13 - simple I'm just figuring out how many
10:15 - test cases we're gonna have now I'm
10:17 - gonna grab I'm gonna find all of the
10:20 - ingredients for all these test cases the
10:23 - amount of test cases that we have so
10:24 - that amount of times so do a quick for
10:27 - loop and then I say I'm gonna create a
10:29 - less up here so I have a list and every
10:32 - time I there's a new test case I'm going
10:34 - to add another layer to the list so
10:37 - another dimension so there we are I add
10:40 - the dimension and then I grab how many
10:43 - elements are gonna be in this next list
10:46 - or in this next set of ingredients
10:47 - because that's gonna be the next line
10:50 - right so I have F equals input I say for
10:53 - Y in range just converting this to an
10:56 - integer here of however many elements
10:58 - are going to be in that
10:59 - our ingredients are gonna be in that
11:01 - next list like and then in the
11:03 - appropriate list I'm going to pend all
11:05 - of those ingredients into them like so
11:08 - okay so now that we've done that we've
11:11 - grabbed and we've pretty much if we had
11:12 - for example two test cases and they
11:15 - looked like this so it looked like two
11:17 - three five for example and that we had
11:21 - or I guess it has to be two three two
11:24 - one three and that we had like one two
11:27 - three four for example then they would
11:29 - go in accordingly like this and that's
11:32 - what our list would look like now I'm
11:33 - just gonna delete those so it doesn't
11:34 - mess up my program when I eventually
11:35 - decide to run it okay so now I'm just
11:38 - creating a little for loop and for each
11:40 - test case I'm gonna repeat that process
11:42 - that I talked about when I was showing
11:44 - you in paint on so I'm gonna run through
11:46 - that same process in code that I just
11:48 - ran through in paint so we're gonna say
11:50 - car list is equal to list X um this is
11:54 - I'm just creating a new I don't know why
11:55 - that popped up just creating a new list
11:58 - to store the current test case that I'm
12:00 - checking so I'm just calling it Carlos I
12:02 - didn't need to do that but it's just
12:03 - something I like to do so we need to
12:05 - store the location of the cars in the
12:07 - mountain the branch and the car that we
12:08 - are looking for so then I have a new
12:10 - list I call it branch and this is gonna
12:12 - be my list for what's on the mountain
12:14 - current this is the ingredient that I'm
12:17 - currently looking for so the one that I
12:18 - want to get to go into the lake so our
12:21 - first step if cars are on the mountain
12:24 - try to send them into the link that
12:28 - should say Lake okay into the link so if
12:31 - the length of car list is greater than
12:32 - zero which on our first run it always
12:35 - will be
12:35 - then I'm going to say if the car on the
12:37 - mountain so at the end of our list is
12:39 - the one we're looking for send it into
12:42 - the lake and remove it from the list so
12:44 - by doing that I'm gonna add one to our
12:47 - current because now we're gonna be
12:48 - looking for two and then I'm gonna pop
12:50 - on that car from the list so popping
12:53 - just means removing from the end because
12:54 - remember when we grab we get from top to
12:56 - bottom um so that's why I'm looking at
12:59 - the end of the list just by putting a
13:00 - negative one there okay so now if that's
13:02 - not true the list at the bottom of the
13:04 - mountain
13:05 - alright were the ingredient at the
13:07 - bottom of the mountain is not the one
13:08 - we're looking for we're going to look at
13:10 - the branch so we're gonna see is there
13:12 - any
13:12 - cars on the branch if there's no cars on
13:15 - the branch so then we're gonna go and
13:18 - we're gonna do the next step but if
13:19 - there are cars on the branch we're gonna
13:21 - look at the last car on the branch I'm
13:23 - going to say if it equal is equal to the
13:25 - current ingredient that we're looking
13:28 - for we're gonna add one to the current
13:30 - and we're just gonna remove it from the
13:32 - branch there's no point in storing which
13:33 - ones we already put into the lake
13:35 - because that doesn't matter if we have
13:37 - this current variable already okay so
13:39 - now that we've looked at the branch and
13:42 - we've looked at the mountain and we've
13:43 - said well the one on the top of the
13:45 - mountain can't go in the one on the top
13:47 - of the branch can't go in we need to
13:49 - move the one from the mountain to the
13:51 - branch so we're gonna try that that's
13:53 - the only possible thing we can do right
13:55 - now is move the one from the mountain to
13:57 - the branch so we go ahead and we do that
13:58 - so we say branch dot append car list dot
14:01 - pop now in Python this dot pop actually
14:04 - a lot of people just use it to remove
14:06 - something from a list but it actually
14:07 - returns the element that you're removing
14:09 - and so it's really useful to use by just
14:11 - putting it in here and there we are now
14:14 - otherwise what we say here is we've
14:17 - checked we say well there's nothing on
14:19 - the branch and the top of the mountain
14:22 - well that doesn't uh that's not the one
14:23 - we're looking for then again we would we
14:26 - would move the one from the top of the
14:28 - mountain to the branch and that's what
14:30 - happens here and that's the else here so
14:33 - now this is the next step so we said if
14:34 - the length of the mountain is greater
14:36 - than zero right now if there's nothing
14:38 - on the mountain here's where we check
14:40 - the branch and that's what we go to
14:41 - right away so now we're saying if the
14:44 - length of the branch is greater than
14:45 - zero we say well if the one at the end
14:48 - of the branch is equal to the current so
14:50 - the one we're looking for we're gonna
14:51 - add one to current again and then we're
14:53 - gonna remove it and we're just gonna
14:55 - keep checking that again right so we're
14:56 - gonna keep doing this until eventually
14:59 - rerun into the case where the one on the
15:02 - branch is not the one we're looking for
15:03 - and in that instance if there's nothing
15:06 - on the top of the mountain and there's
15:08 - still items on the branch we can't move
15:10 - them into the lake we're not going to be
15:11 - able to complete the recipe so we simply
15:14 - print N and we break this while loop
15:16 - here like
15:18 - now otherwise so here we've gone through
15:22 - we said if the length of car list is
15:23 - greater than zero the length of branch
15:25 - is greater than zero
15:26 - now if we make it all the way to this
15:28 - else statement here that means there's
15:29 - nothing on the branch there's nothing on
15:31 - the mountain that means that we've
15:33 - successfully moved everything into the
15:35 - lake so we can print yes we can break
15:37 - and we can move to the next test case
15:40 - all right so I hope that explanation was
15:43 - good enough for you guys if you have any
15:45 - questions again don't be don't be scared
15:47 - to leave a comment down below I'm always
15:49 - trying to respond to comments and help
15:50 - you guys out and I'm sure if you leave a
15:52 - comment someone else would be more than
15:53 - happy to help you out as well and like
15:55 - always if you guys want to get the code
15:57 - for this you want to look at the problem
15:59 - yourself not just from my video you can
16:01 - go ahead and go to my shared Google
16:04 - Drive I'm leaving a comment or what am I
16:06 - saying
16:06 - I'm leaving a link in the description
16:07 - down below I have all the practice
16:09 - problems that I've done so far so one
16:11 - two three you can go ahead click on the
16:13 - appropriate folder you can see the
16:15 - question and then you can see the answer
16:17 - as well with my commenting on it so that
16:20 - being said if you guys enjoyed the video
16:22 - please make sure you like and subscribe
16:24 - and I will see you again in the next
16:25 - weekly programming problem
16:27 - [Music]