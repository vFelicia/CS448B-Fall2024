00:00 - if you're a beginner JavaScript
00:01 - programmer or have no experience writing
00:03 - code before then this video is for you
00:05 - what I'll be doing is walking you
00:07 - through four beginner projects that are
00:09 - fun simple and easy to follow along with
00:11 - and help you learn JavaScript in a
00:13 - practical Hands-On way rather than
00:15 - watching a ton of theoretical tutorials
00:17 - which can be long and boring we're just
00:19 - going to jump into some projects I'm
00:21 - going to stop every now and then explain
00:23 - the concepts that I'm using but you'll
00:25 - be able to see how we actually apply
00:26 - everything and build something out
00:28 - that's fun interesting you can show to
00:30 - friends family maybe your spouse
00:32 - Etc this is going to be a great video
00:34 - for anyone really just looking to get
00:35 - their hands dirty and to build something
00:37 - out in the next hour or two alright so
00:40 - before I get into the environment setup
00:41 - here I'll just mention what the four
00:43 - projects are the first project is a quiz
00:46 - game the second project is a random
00:48 - numbered guesser the third is rock paper
00:50 - scissors with a little bit of a Twist on
00:52 - it and the last is a Choose Your Own
00:54 - Adventure game these are going in order
00:56 - of ascending difficulty meaning the
00:58 - first project will be the simplest then
00:59 - they'll get a bit more difficult until
01:01 - we get to the last project which is
01:03 - slightly more challenging that said even
01:05 - beginner programmers will be able to
01:06 - follow along here and if you want to
01:08 - skip forward to one of the projects I've
01:10 - listed all of the timestamps will be
01:11 - available in the description and you
01:13 - should see them on the screen right now
01:15 - what I will also mention is that if you
01:17 - want to get better at programming I do
01:18 - have a programming course it's called
01:20 - programmingexpert.io if you guys want to
01:22 - purchase that and support me I'd greatly
01:23 - appreciate that you can look at it from
01:25 - the link in the description and if
01:26 - you're at all interested in web 3 and
01:28 - blockchain technology and kind of the
01:30 - development side of that then you can
01:31 - check out blockchain expert my other
01:33 - course from the link in the description
01:34 - alright let's get started with the
01:36 - environment setup if you already know
01:37 - how to write JavaScript code and you've
01:39 - got things set up and you have node.js
01:41 - installed feel free to skip through this
01:43 - portion but for any of you that don't
01:44 - have this or have never written code
01:46 - before pay close attention here sorry as
01:48 - I walk through this setup so what we
01:50 - need when we're writing code is
01:52 - something that can execute our code and
01:53 - then a place where we can write our code
01:55 - now for JavaScript you have a few
01:57 - different options but in this tutorial
01:58 - I'm going to use something called node
01:59 - JS now node.js is actually a client-side
02:02 - application that allows you to run
02:04 - JavaScript directly in your terminal or
02:07 - your command prompt you don't need to
02:08 - really know what that means but the
02:10 - first step in this tutorial for anyone
02:11 - who doesn't have this installed is going
02:13 - to be to go to Google and search node.js
02:16 - I'll put this link in the description as
02:18 - well and you're going to download
02:19 - whatever the recommended version of
02:21 - node.js is for either Windows Mac or
02:23 - Linux you're going to go to the
02:25 - installer so when you download this it
02:26 - should go in your downloads or something
02:28 - like that double click the installer run
02:30 - it and then it should run or install
02:32 - node.js for you node.js allows you to
02:36 - execute a Javascript file so we can do
02:38 - all of our code directly in our terminal
02:40 - and we don't need to open up something
02:41 - like a browser or interact with any HTML
02:44 - okay so make sure you've got node.js
02:46 - installed once you have that installed
02:47 - we're going to install something called
02:49 - Visual Studio code now this is a code
02:51 - editor which is a place where we can
02:53 - write our code so just like Microsoft
02:54 - Word helps us write documents when we
02:57 - are you know writing an essay or
02:58 - something like that we have special
02:59 - tools called code editors or Ides
03:02 - integrated development environments that
03:04 - allow us to write code kind of get some
03:06 - syntax highlighting formatting Etc so
03:08 - that's what Visual Studio code is go to
03:10 - this website again download the
03:12 - recommended version for Windows Mac or
03:15 - Linux double-click the installer install
03:17 - it and then open it up
03:19 - so at this point you should be open in
03:22 - Visual Studio code yours is going to
03:24 - look a bit different than mine because I
03:25 - have some settings and some themes and
03:27 - stuff don't worry about that all you're
03:29 - going to do right now is you're going to
03:30 - go to file
03:32 - open folder and then you're going to
03:34 - make a new folder in some location that
03:36 - you can remember so I usually just
03:38 - recommend going on the desktop so you go
03:40 - to the desktop make a new folder again
03:42 - Mac Windows whatever doesn't matter call
03:44 - this something like Tech with Tim
03:48 - tutorial whatever you want to name it
03:50 - click enter and then open up that folder
03:53 - so I'll actually just go through the
03:54 - step here so I'm following along with
03:55 - you from here you're going to be brought
03:57 - into an environment that looks similar
03:59 - to this what you'll do now is create a
04:02 - Javascript file and then we'll pretty
04:03 - much be Off to the Races and ready to
04:05 - write our code so you can see on the
04:07 - left hand side of the screen here we
04:08 - have a bunch of different buttons the
04:10 - tab you want to be in is the file
04:11 - explorer which is kind of the files
04:13 - right here you're going to click on this
04:15 - button which stands for new file or
04:17 - you're going to go to file and then new
04:19 - file like that okay what we'll do is go
04:22 - to this new file button it's going to
04:23 - pop up this little area and we're just
04:24 - going to type something
04:26 - like script dot JS now you can call this
04:30 - whatever you want so long as you end it
04:32 - in a DOT JS extension dot JS stands for
04:34 - JavaScript and that's the extension for
04:36 - any JavaScript code files so I'm going
04:38 - to go ahead and hit enter and now I'm
04:40 - inside of a Javascript file from here
04:42 - we're just going to make sure that our
04:44 - node.js installation is working and then
04:46 - we'll be ready to get onto the project
04:48 - so we're just going to type console.log
04:50 - and then inside of Double quotation
04:52 - marks we're going to type hello so just
04:54 - exactly what I have on the screen here
04:55 - don't worry too much about it just type
04:56 - this in
04:57 - save your file with control s or by
05:00 - going to file and then save and then
05:03 - what you can do is pop open this
05:04 - terminal from the bottom of the screen
05:06 - so you can see I kind of put my mouse
05:07 - down here and I can drag this up you
05:10 - also can hit control and then back tick
05:12 - on your keyboard back tick is at the
05:14 - very top left hand side of the keyboard
05:15 - where the tilde or the squiggly line is
05:17 - and that's going to toggle the keyboard
05:19 - for you for most of you it's going to be
05:21 - easier just to kind of grab this from
05:22 - the bottom of the screen from here it's
05:24 - automatically going to open the terminal
05:26 - in the same directory where your file is
05:29 - so what you'll do now is you'll just
05:31 - type node and then the name of your
05:33 - Javascript file which in this case is
05:35 - script.js
05:37 - okay if you named IT Tech with tim.js if
05:39 - you named it main.js then you're going
05:41 - to obviously replace script.js with them
05:44 - so go ahead and hit enter and you should
05:46 - see that you get hello appearing in the
05:48 - console if that worked then you're all
05:50 - set up and ready to go if for some
05:52 - reason you got some error with this
05:54 - command you're going to have to look up
05:55 - how to fix your node.js installation
05:57 - unfortunately I can't help you with that
05:59 - in this video but you just need a way to
06:01 - execute this Javascript file quickly
06:03 - recap install node.js install Visual
06:06 - Studio code open up a folder in Visual
06:08 - Studio code like I just showed you
06:10 - create a new Javascript file and then
06:12 - run the file using node name of the file
06:15 - okay that's how we do that from our
06:17 - terminal if you're on Mac Linux Etc this
06:20 - the steps are going to be the exact same
06:22 - but you're just going to see probably a
06:24 - few slightly different things depending
06:25 - on your operating system that's totally
06:27 - fine follow the same steps okay so we're
06:30 - all set up now what I'm going to do is
06:31 - go into full screen mode and we're going
06:33 - to begin our first project which is a
06:34 - quiz game now what I'll be doing is
06:36 - writing a little bit of code then I'll
06:37 - be stopping kind of explaining that code
06:39 - so if something doesn't make sense just
06:41 - hold on I'm sure I'm going to explain it
06:42 - in just a minute or two all right so for
06:44 - our quiz game let's begin with what we
06:46 - want to build the idea here is to make
06:48 - something you can give to like your
06:50 - friend your son your spouse whatever
06:51 - that's a quiz about yourself or a quiz
06:54 - about something that you know a lot
06:55 - about so in my case I'll make a quiz
06:57 - about different computer components but
06:58 - for you guys you can make a quiz like
07:00 - what's my favorite food what's my
07:02 - favorite pastime what do I do at night
07:05 - where do I go at 9pm on Thursdays
07:07 - whatever you want to do right you can
07:08 - make this as personal as you want so
07:10 - I'll give you a bit of a template for
07:11 - the project and then you can extend this
07:13 - on your own and make it as long as you
07:14 - see fit the idea is we'll keep track of
07:16 - the number of correct and incorrect
07:18 - answers and that way what we can do is
07:20 - tell them you got 70 on this quiz or you
07:23 - got 30 or whatever the score is okay so
07:26 - let's begin the first thing we need to
07:28 - do is get some console input from our
07:30 - user that means we need to allow them to
07:33 - type something into the screen so how do
07:35 - we do that
07:36 - well the way we do that is actually by
07:38 - installing a package which is going to
07:40 - give us access to some function which we
07:42 - can use to get some input from the user
07:44 - so we're going to go back to our
07:46 - terminal here so just open this up right
07:48 - and we're going to type npm install and
07:51 - then prompt Dash sync okay npm stands
07:55 - for node package manager and this is
07:57 - something that installs different
07:58 - dependencies on your computer you can
08:00 - then use within your JavaScript files so
08:02 - we type npm install prompt sync and
08:05 - that's going to give us access to a
08:07 - module which will allow us to kind of
08:09 - ask the user to type in some input okay
08:11 - so just run that from your terminal
08:12 - you're going to see some output here
08:14 - don't worry if you get any
08:15 - vulnerabilities or issues that's totally
08:16 - fine now once you've installed that I'm
08:20 - just going to clear my terminal here
08:21 - we're going to go to the very top of our
08:23 - file and we're going to say const this
08:25 - is how we declare a variable
08:27 - we're going to say prompt is equal to
08:30 - require and then inside of Double
08:32 - quotation marks we're going to say
08:34 - prompt Dash sync and we're going to put
08:36 - another set of parentheses here I know
08:38 - this is a little bit confusing it looks
08:39 - like a lot of gibberish just type
08:40 - exactly what I have here this is kind of
08:42 - the most complicated line that we need
08:44 - what this does is load in this module so
08:47 - it requires its use and then we get
08:49 - access to it in this prompt variable
08:51 - that now means we can use this prompt
08:53 - variable to actually grab user input
08:55 - okay so we said we're declaring a
08:57 - constant this is a type of variable in
08:58 - JavaScript we're saying this is equal to
09:00 - require we're requiring prompt sync
09:03 - module and then we put another set of
09:05 - parentheses here not going to explain
09:06 - exactly why we need those but just make
09:08 - sure you have the second set so you have
09:10 - this line exactly as you see it here now
09:13 - let's just quickly test this code out by
09:15 - typing prompt and then we're just going
09:17 - to say enter something and then a colon
09:19 - and a space make sure you add the space
09:21 - there's a bit of separation between
09:22 - where we're going to be entering some
09:24 - code
09:25 - and then we can clear
09:26 - and we can run our code again notice by
09:29 - the way in the terminal you can use the
09:30 - up and down arrow key to cycle through
09:32 - commands you've typed before so I'm
09:34 - hitting the up and down arrow key and
09:36 - it's kind of going through my command so
09:37 - I don't have to type it every time
09:39 - anyways I'm going to hit node here
09:40 - notice it says enter something and you
09:42 - can see my cursors appearing in the
09:44 - terminal
09:45 - so now I can type something like hello
09:46 - world and then we just continue with the
09:48 - rest of the program
09:49 - perfect so prompt gives us access to
09:52 - whatever the user types so now we're
09:54 - quickly going to talk about some
09:55 - variables we're going to define those
09:57 - and use them and then continue on from
09:59 - there okay
10:00 - so what we're going to do to begin here
10:02 - is we're going to say const and we'll
10:05 - just say value is equal to prompt now
10:08 - what we're doing here is declaring a
10:10 - variable a variable is really just some
10:12 - named value that gives us access to some
10:15 - kind of piece of data in this case the
10:17 - data we're going to be getting access to
10:19 - is something known as a string now
10:21 - within our programming languages we have
10:23 - some different data types these are the
10:25 - different pieces of information
10:26 - essentially that we can store in our
10:28 - program so we can have numbers we can
10:30 - have a Boolean value something like true
10:32 - or false we can have strings arrays
10:34 - we'll talk about those later as we go
10:35 - through the rest of this video I'm sure
10:37 - for many of you already know what those
10:38 - data types are but what this prompt
10:41 - function is going to do for us is it's
10:42 - going to give us something known as a
10:44 - string now a string is anything that is
10:47 - surrounded in double or single quotation
10:49 - marks there's some more complicated
10:51 - strings as well but typically your
10:52 - strings are going to be in double or
10:54 - single quotation marks meaning if I have
10:56 - something like one this is the string
10:58 - one if I have something like hello this
11:00 - is the string hello and usually they'll
11:01 - highlight in yellow or some color for
11:03 - you in your code editor okay so what
11:06 - we're doing is we're saying we're going
11:07 - to have a variable we've made this a
11:09 - constant now a constant is a variable
11:11 - whose value cannot change and we're
11:14 - saying that's equal to this function
11:15 - which gives us some type of string so
11:17 - what I'm going to do now is I'm going to
11:19 - type console.log value and what this is
11:22 - going to do is print out or log to our
11:25 - console which is really our terminal the
11:27 - value that we typed in so whatever gets
11:29 - stored in this variable we can then
11:31 - access by using the name of the variable
11:33 - here inside of our console.log
11:36 - again I know this is a lot of
11:37 - information especially if you've never
11:38 - programmed before I'm going to try my
11:40 - best not to overload you but these are
11:41 - kind of fundamental concepts we need to
11:43 - go over so I'm going to run my code
11:44 - again and you're going to see I get
11:46 - enter something
11:47 - and then I can type in hello when I do
11:49 - that notice hello gets printed to the
11:51 - screen because that's what we typed in
11:53 - from this function again function gives
11:56 - us some kind of string this is a data
11:58 - type a piece of information we can have
11:59 - in our program we store that in the
12:02 - variable value and then we access what's
12:04 - stored inside of that variable by using
12:06 - the variable name notice if I try to use
12:08 - something like value 1 here and I run
12:10 - the code
12:11 - I actually get an error so you can see
12:13 - this kind of reference errors popping up
12:15 - saying value 1 is not defined and that's
12:17 - because no variable called value one
12:19 - exists if I wanted to print value one so
12:22 - I wanted to see that in my terminal then
12:24 - I would actually need to surround this
12:25 - in a string so I tell my computer and I
12:28 - tell JavaScript hey I'm not trying to
12:29 - access a variable I actually want to
12:31 - print out literally value one so now if
12:34 - we clear and run and I type something
12:36 - like hello you can see I get value 1
12:38 - this time because I put it inside of a
12:40 - string okay so that's kind of what we've
12:42 - learned so far we know the string is
12:44 - anything surrounded in quotation marks
12:45 - and we know how to access a variable
12:47 - great so now we're getting something
12:50 - typed in from the user and I just want
12:52 - to show you if I try to do something
12:53 - like value equals 1 here
12:55 - can I go ahead and run my code you're
12:58 - going to notice I get another error now
12:59 - the reason is I'm getting assignment to
13:01 - constant variable now this is where
13:03 - we'll quickly talk about the types of
13:05 - variables and then we'll continue on
13:06 - with the rest of the code
13:08 - so here we're using a constant now a
13:10 - constant is something that can't change
13:12 - so think of constant value right or
13:14 - think of something like gravity which is
13:15 - a constant this is something that's
13:17 - always going to be the same so we have
13:19 - the ability to Define on our variables
13:21 - if we want them to be able to change or
13:23 - not change in this case we've said well
13:25 - we're not going to change this variable
13:26 - so we'll make it a constant however if
13:28 - we wanted to be able to change the value
13:30 - of it later on we'd have to use this
13:32 - keyword known as let or VAR for now just
13:36 - use the let keyword but there is this
13:37 - VAR keyword which is effectively going
13:39 - to do the same thing it just has a few
13:41 - small differences that we don't need to
13:42 - get into right now so I'm going to say
13:44 - let value equals prompt and when I use
13:46 - let this says we're setting up a
13:48 - variable which can be dynamic which can
13:50 - change so we can modify its value
13:52 - without a problem so now if we run our
13:54 - code and we type something in you notice
13:56 - there's no issue because we use let
13:57 - instead of const
13:59 - okay so already in seven minutes there
14:01 - you've learned more than you probably
14:02 - would in like you know five six
14:04 - different tutorials for JavaScript okay
14:06 - we have our variable now and what we
14:08 - should probably do is start working on
14:09 - our quiz we understand the fundamentals
14:11 - now we can move on and kind of create
14:13 - this quiz game so the first thing we
14:15 - want to do is probably welcome the user
14:17 - to our quiz so we're going to put a
14:19 - console.log here and we'll just say
14:21 - something like welcome to the computer
14:25 - Hardware
14:27 - if we can type this correctly quiz
14:29 - exclamation point okay so now the
14:31 - program is going to start it's going to
14:33 - print this message to the user and the
14:34 - first thing I think I want to ask the
14:35 - user is if they'd like to maybe play the
14:38 - quiz or maybe we'll just go right into
14:39 - question one in fact we can just do
14:40 - question one
14:42 - so what I'm going to do here is I'm
14:44 - going to say const
14:45 - and I'm going to say answer one which is
14:48 - a variable and this is a valid variable
14:50 - Name by the way you can use numbers in
14:51 - your variable name the rules for the
14:53 - variable naming are if you wanted to
14:55 - have something like a space you'd have
14:56 - to use an underscore so if I wanted to
14:58 - do answer one hello I couldn't do it
15:00 - with a space that would cause an error
15:02 - instead I'd need the underscore to
15:04 - represent that space or I could then put
15:06 - a capital on the first letter here so
15:08 - something like answer one hello to kind
15:10 - of space it out and indicate it's
15:11 - multiple words this is something known
15:13 - as camelcase which is suggested when
15:15 - you're naming variables another rule is
15:17 - that you can't have any special
15:18 - characters something like an ampersand
15:19 - is not going to work and you can't start
15:21 - your variables with a number but you
15:23 - can't have numbers inside of the
15:24 - variable okay so we're going to say
15:25 - const answer one is equal to and then
15:28 - we're going to ask a question
15:29 - so what's the first question we should
15:31 - ask we'll say something like
15:33 - what
15:35 - is the brain of the computer question
15:39 - mark
15:40 - okay and then we'll allow the user to
15:41 - type now we're going to be looking for a
15:43 - specific answer and in this case the
15:45 - answer we want is CPU or Central
15:47 - Processing Unit okay so now what we need
15:50 - to do is we need to check what their
15:51 - answer is and we need to see if it's
15:53 - correct if it's correct we want to tell
15:54 - them they got it right otherwise we want
15:56 - to tell them they got it wrong so how do
15:57 - we do that well we need a way to compare
16:00 - this value with the correct answer so
16:02 - I'm going to make another variable here
16:04 - and I'm going to say const and we'll say
16:06 - correct underscore answer one is equal
16:09 - to
16:10 - and in a string we're going to type CPU
16:12 - because this is the expected answer that
16:15 - we're looking for okay now what we'll do
16:17 - is we'll use something known as an if
16:19 - statement an if statement allows us to
16:21 - evaluate something known as a condition
16:22 - and see if that's true
16:24 - so we're going to say if
16:26 - answer one is equal to the correct
16:29 - answer then we're going to put a set of
16:31 - curly braces like this don't worry I'm
16:32 - going to explain this in a second and
16:34 - we're going to say console.log
16:36 - you
16:38 - got it correct exclamation point like
16:42 - that okay
16:43 - so what we've done here is we've set up
16:45 - an if statement now the syntax of an if
16:47 - statement is you write if you put an
16:49 - opening parenthesis and then you put
16:51 - something known as a condition now a
16:53 - condition is something that evaluates to
16:55 - true or false now the way that this kind
16:57 - of works is that we have another data
16:59 - type in our program or in JavaScript
17:01 - known as a Boolean or a Bool okay now
17:05 - this is anything that is the value true
17:07 - or false so these are the only two valid
17:10 - values that are booleans so true or
17:12 - false values okay now what we can do is
17:15 - we can write something known as a
17:16 - condition which uses something known as
17:18 - a conditional operator to see if
17:20 - something is a true or false so when I
17:23 - use something like three equal signs
17:25 - here what I'm actually doing is I'm
17:27 - comparing the left hand side to the
17:29 - right hand side and I'm asking if they
17:32 - are equivalent if they are the same
17:34 - exact value and this same type now there
17:36 - is a double equal sign as well don't use
17:39 - that right now just use the triple equal
17:41 - sign we don't want to get confused with
17:42 - the double equal sign which works a
17:44 - little bit differently okay
17:45 - so I say is answer one
17:48 - equivalent to answer two now this
17:51 - condition here is going to give me the
17:52 - value
17:53 - true or false now the way the if
17:56 - statement works is if whatever is inside
17:58 - of these parentheses is true then it's
18:00 - going to execute what's inside of this
18:02 - curly brace block okay so this little
18:04 - set of curly braces here is associated
18:06 - with the if statement and it's saying do
18:08 - whatever's inside of the set of curly
18:10 - braces only if this is true okay if it's
18:14 - false we're just not going to do it
18:15 - we're not going to enter into that block
18:18 - so let's run this
18:19 - and see what we get and it says welcome
18:21 - to the computer hardware quiz what is
18:23 - the brain of the computer and we're
18:25 - going to type CPU and then notice it
18:27 - says you got it correct whereas if I run
18:28 - this and I type something like the
18:30 - motherboard we don't get any results the
18:33 - reason for that is that the motherboard
18:34 - was not the same as the CPU and so we
18:37 - didn't enter inside of this block
18:39 - meaning we didn't print this out okay
18:41 - there's a few more things to teach you
18:43 - related to this but hopefully all this
18:45 - is making a bit of sense trying to kind
18:46 - of blur the line here between in-depth
18:48 - explanations and you know actually
18:50 - writing some code once we get through
18:52 - all this in this first project we're
18:53 - going to go a lot faster I just wanted
18:55 - to make sure that I cover all the bases
18:56 - in case you've never seen JavaScript
18:58 - before in your life alright so let's run
19:00 - this one more time and I just want to
19:02 - kind of test something out and this is
19:03 - what I would encourage you to do as well
19:05 - on your own if you have a question don't
19:07 - necessarily wait for me to answer it you
19:08 - can try to figure it out by actually
19:10 - writing some code and modifying what you
19:12 - have so for example what happens if I
19:14 - type CPU with lowercase that could be an
19:17 - answer someone could type that in
19:18 - without uppercases and notice we
19:20 - actually don't get that output saying
19:22 - you've got it correct the reason for
19:24 - that is when we compare two strings in
19:26 - JavaScript we're comparing them with
19:28 - their capitalization so they're case
19:30 - sensitive so what we actually need to do
19:32 - if we want to allow this answer or an
19:34 - answer like CP and then lowercase U to
19:37 - be correct is we need to convert either
19:39 - our expected answer or the answer the
19:42 - user types in to either lowercase or
19:44 - uppercase and then compare them against
19:46 - each other
19:47 - so the idea here is that we keep our
19:50 - correct answer all in the same case so
19:52 - in this case I keep it completely in
19:53 - uppercase which then means what I can do
19:56 - is I can take whatever the user types in
19:58 - and I can just convert it completely
20:00 - into uppercase and then I can compare
20:02 - the two strings so you're just going to
20:04 - compare them using the same case
20:06 - so how do I do that well there's
20:08 - actually a method and a method is
20:10 - something that you can kind of use on a
20:13 - data structure on a data type
20:15 - and the way this works is you put a dot
20:17 - so we have answer one which is a
20:18 - variable this variable is equal to a
20:20 - string I'm going to do Dot and then this
20:22 - is 2 and then notice we have uppercase
20:24 - here and put a set of parentheses now
20:27 - what this is going to do is it's going
20:29 - to take answer one convert it completely
20:32 - into uppercases and then give me that
20:34 - result kind of in place of this string
20:36 - or in place of this kind of a line or
20:39 - you know expression that you see right
20:41 - here trying to come up with the correct
20:42 - word there it's not going to modify the
20:45 - value of answer one answer one will stay
20:46 - the same but what will happen is it will
20:48 - essentially inject what answer one two
20:50 - uppercase is on the left hand side of
20:53 - this equal sign which then means we'll
20:55 - be comparing the uppercase answer one to
20:58 - the uppercase correct answer
20:59 - to check if it's correct okay
21:01 - so let's clear and run and now you can
21:03 - see if I type something like CPU and
21:05 - lowercase we still get it correct
21:07 - because we converted that to uppercase
21:09 - and even if I type something like CPU
21:11 - like that we still get it correct now
21:14 - last thing to show you here is that if I
21:15 - do add something like a space so I have
21:17 - CPU space it's not going to give us the
21:20 - correct answer and that's because a
21:21 - string that contains a space in it is
21:24 - different than a string that doesn't
21:25 - contain the spaces okay so just keep
21:27 - that in mind you're comparing every
21:28 - single individual character and you can
21:30 - kind of modify the string in a way such
21:32 - that you're avoiding any incorrect
21:34 - answers when it is correct it's just not
21:36 - exactly what you were expecting okay
21:38 - all right so that's a good start now one
21:41 - other thing to mention is that we should
21:42 - probably tell the user when they get it
21:44 - wrong so what I'm going to do is add
21:45 - something known as an else statement now
21:47 - an else statement is the complement to
21:49 - an if statement and this block so
21:51 - whatever's inside of this curly brace is
21:53 - going to execute if the if statement is
21:55 - false okay so if this condition here is
21:57 - false we don't do this instead so else
22:00 - we do what's inside of this block
22:03 - excuse me so I'm going to take this
22:04 - console.log and I'm going to say you got
22:07 - it wrong
22:09 - dot dot dot okay so now if we clear here
22:12 - bring this up a little bit and run the
22:15 - code and we type something like I don't
22:18 - know GPU you can see it says you got it
22:20 - wrong alright so at this point we've
22:22 - learned quite a bit already and we're
22:23 - actually ready to just extend this
22:25 - project and add a bunch more questions
22:27 - now we'll add some more things to it
22:28 - like keeping track of how many correct
22:30 - answers we have but for now let's just
22:32 - copy all of the code that we have
22:34 - paste this here and let's change our
22:37 - variables just so we don't get an error
22:39 - so notice here if I highlight this it's
22:40 - saying cannot redeclare block scoped
22:42 - variable answer one essentially what
22:44 - that's saying is we already have a
22:45 - variable called answer one so I can't
22:47 - make that again right because this is
22:48 - defining the variable when I use this
22:50 - const block so instead I'm going to
22:52 - change this to answer 2 and then correct
22:54 - answer 2. now let's come up with another
22:56 - question
22:57 - we can do something like
23:00 - what is better a 3090 TI or a 40 60. I
23:07 - don't even know if they have a 40 60 or
23:08 - not but let's just go with that and for
23:10 - the correct answer this is going to be a
23:12 - 3090 TI okay
23:15 - so now we can just change this around
23:16 - again so we'll say answer two and then
23:19 - correct answer to and now everything
23:20 - should just work the exact same we've
23:22 - just kind of copied and pasted this and
23:24 - changed the answer and the question
23:27 - okay so let's save that and run what is
23:30 - the brain of the computer CPU excuse me
23:33 - 30 90 TI and it actually says we got it
23:37 - wrong there
23:38 - um okay so let me check why we're
23:41 - getting that
23:43 - aha so the reason we're getting this is
23:45 - because we converted our answer to to
23:48 - uppercase when our answer here is in
23:50 - lowercase what I would need to do is
23:52 - just change this to be Capital TI like
23:54 - that or alternatively rather than
23:56 - converting this to uppercase I would
23:58 - need to convert this to lowercase so if
24:00 - you do get an error don't freak out
24:02 - obviously just do kind of something like
24:03 - what I just did and look through a code
24:04 - and say hey why am I getting that wrong
24:06 - well I typed it in lowercase I was
24:08 - converted to uppercase okay that's
24:10 - probably the issue and you know that
24:11 - you're kind of going to have the error
24:13 - in one of these few lines here because
24:15 - this is where it's evaluating if you're
24:17 - getting it true or false all right so
24:18 - this happens all the time even to
24:20 - experience programmers like me don't
24:21 - worry if you get an error very very
24:23 - common in fact almost a good thing when
24:25 - you're just learning how to code okay so
24:26 - now let's run this again what is the
24:28 - brain of the computer CPU and now we'll
24:31 - type 39 DTI and it says we got it
24:33 - correct that time so we fixed it and it
24:35 - is working great
24:37 - okay let's do one more question
24:39 - and then we'll add uh tracking of the
24:42 - correct questions
24:43 - so answer three correct answer three
24:45 - answer three
24:48 - and answer three and this time we can do
24:51 - something like say
24:53 - what is
24:55 - the recommended amount of RAM
24:59 - in 2023 now this is going to be a
25:02 - subjective answer but I'm just going to
25:03 - go with 16 gigabytes like that this time
25:05 - we're going to convert this to uppercase
25:07 - so we're matching the casing of our
25:10 - answer and that's all we need that'll
25:12 - fix that we're just going to need to
25:13 - make sure these are answer three they
25:15 - are okay perfect let's run this and CPU
25:20 - 39 DTI and 16 gigabytes okay awesome
25:27 - all right so our quiz has now been
25:29 - written we have three questions
25:30 - obviously you can add a lot more I'm
25:31 - just not going to bore you by adding
25:32 - those right now the next thing that we
25:34 - really need to do is keep track of how
25:36 - many correct answers we have now this is
25:38 - fairly straightforward but what we'd
25:40 - like to have is some kind of variable
25:42 - that's storing you have one answer
25:43 - correct two answer correct three answers
25:45 - correct Etc and then display that to the
25:47 - user at the end
25:48 - so the way to do that is to go at the
25:51 - very top of our program it doesn't
25:52 - really matter exactly where so long as
25:54 - it's near the top and before your first
25:55 - question
25:56 - and we're going to say let
25:59 - correct and we'll just say answers like
26:02 - this equal and then zero now one thing
26:05 - I'll mention just because some of you
26:06 - may be getting upset about this I've
26:08 - used underscores for these variables uh
26:11 - really it's going to be best practice to
26:13 - not use the underscore
26:14 - and to do it in camel case like I have
26:16 - suggested uh different programming
26:18 - languages have different conventions for
26:20 - the way you write your variables in
26:22 - JavaScript you are supposed to use camel
26:23 - case so just because that's the
26:24 - convention I'm going to change these
26:25 - here it doesn't really matter no one's
26:27 - going to get mad at you at least you
26:29 - know when you're just starting out but
26:30 - just to kind of be correct I'm going to
26:31 - make sure we're using camel case rather
26:33 - than underscores which is actually a
26:34 - convention in Python known as snake case
26:36 - anyways I have this variable let correct
26:39 - answers equal zero now this time we're
26:41 - using something known as the number data
26:43 - type and this allows us to perform
26:44 - arithmetic so we can add to the number
26:46 - subtract from the number Etc which is
26:48 - different than the string right so the
26:50 - string zero and the number zero are you
26:52 - different like discrete unique values
26:54 - and they can be used differently because
26:56 - of the type of their data the type of
26:58 - their information right so this is a
26:59 - number meaning we can kind of add to it
27:01 - subtract from it Etc so now that we have
27:03 - this variable here what we're able to do
27:05 - is go inside of our if statements and
27:08 - after we cancel that log correct or
27:10 - before it doesn't really matter but just
27:11 - inside of this if statement we can
27:13 - actually write correct answer like this
27:15 - which is our numeric variable and then
27:17 - we can say plus equals one now saying
27:20 - plus equals one is going to add 1 to
27:22 - this value another way that we can do
27:25 - this is we can say correct answers is
27:26 - equal to correct answers plus one where
27:29 - we're saying okay well what was the
27:31 - previous value of correct answers well
27:33 - was it one was it two was it zero
27:35 - whatever it is add one to it and then
27:37 - assign that two correct answers so
27:38 - changing the value
27:40 - or a third way is we can write plus plus
27:43 - and plus plus stands for add one okay
27:45 - this known as the increment Operator
27:47 - just adds one to a variable in
27:49 - JavaScript
27:50 - so I'm going to use plus plus and I'm
27:52 - just going to go here
27:53 - and put these inside of all of the if
27:55 - statements
27:56 - and this way at the end of our program
27:58 - it will tell us the number of correct
27:59 - answers that we had
28:01 - okay I don't think there's much more to
28:03 - mention here I will just quickly say if
28:05 - you see these semicolons here you don't
28:07 - actually need them but what these stand
28:09 - for is a line termination or a line
28:11 - break which essentially means stop
28:13 - reading the current statement and move
28:15 - to the next line
28:17 - okay that's all that means I kind of
28:19 - excluded mentioning them because you
28:20 - don't actually need them for your code
28:21 - to work but since they're here I figured
28:23 - I'd mention that okay so now we're going
28:25 - to go down to the bottom of our program
28:26 - and we're just going to tell the user
28:28 - how many correct answers they got
28:30 - excuse me so to do that we're going to
28:31 - say console.log you got and then we kind
28:34 - of need to embed this number in the
28:36 - middle of the string there's a few ways
28:38 - to do this but the way that we're going
28:39 - to do it is we're going to put a comma
28:41 - we're then going to put the correct
28:43 - answers okay and then we're going to put
28:45 - another comma and we're going to say
28:47 - questions
28:49 - correct like that so now what this is
28:52 - going to say is you got it's then going
28:53 - to put whatever the value of that number
28:55 - is so one two three zero whatever and
28:57 - then questions correct and it's
28:59 - automatically going to add a space
29:00 - between all of these different values
29:02 - because that's how this function works
29:04 - so if I come here now I can print this
29:07 - out let's go CPU let's get this one
29:09 - wrong so we'll go with 4060. let's go
29:12 - with 16 gigabytes and then it says you
29:15 - got it correct you got two questions
29:16 - correct perfect now last thing we can do
29:20 - here is we can actually give them some
29:21 - kind of percentage or grade indicating
29:24 - like what their score was on the quiz so
29:26 - to do that I'm just going to make a
29:27 - variable here and I'm going to say total
29:29 - questions is equal to and I'm going to
29:32 - specify the total number of questions
29:33 - that I have which in this case is three
29:36 - okay so we're saying constant we're
29:38 - making this a constant because we don't
29:39 - expect to change this value throughout
29:41 - our program but if you did add another
29:43 - question obviously you would adjust this
29:44 - and make this 4 5 however many questions
29:46 - you have now what we can do is we can
29:48 - say you've got correct uh questions
29:50 - correct or correct answers questions
29:51 - correct then we can say you scored
29:54 - okay and we're gonna say correct answers
29:56 - and we can divide this by using the
29:59 - forward slash by R what is this uh total
30:03 - questions
30:04 - okay and then we can multiply it by 100
30:07 - by using the asterisk operator and I'm
30:09 - just going to put this in a set of
30:10 - parentheses so that we have this being
30:12 - applied before we have our
30:13 - multiplication and then what we'll do is
30:15 - we'll just add a percent like that so
30:18 - they can see what their percentage score
30:20 - was so say like 87.2 whatever in this
30:22 - case you know 33 66 or 100 okay so now
30:26 - let's run this
30:28 - and what is brand CPU
30:32 - 4060 and 16 gigabytes
30:35 - and it says you got two questions
30:36 - correct you scored 66.66666 percent if
30:40 - you wanted to cut that off so you didn't
30:42 - see all of those values you do have the
30:44 - ability to round this
30:46 - now I'll show this to you even though it
30:49 - might be a little confusing you can
30:51 - simply take math.round
30:53 - and you can surround all of this here
30:55 - inside of that now I know that gets a
30:58 - little bit messy so what we might want
30:59 - to do here is a const
31:01 - percent is equal to and then put that
31:04 - there and then we can just embed the
31:06 - percent variable so we're kind of
31:08 - structuring our code a little bit better
31:09 - and storing some intermediate values
31:11 - making it a little easy to understand I
31:13 - know I went a bit faster just because I
31:14 - want to move to the next project but
31:16 - we're going to take math.round and we're
31:18 - going to round the division of this
31:19 - multiplied by 100 that's going to round
31:21 - it to the nearest decimal value so you
31:24 - are going to lose
31:25 - um the values here there's a way to keep
31:27 - them but I'm not going to show that to
31:28 - you right now so let's do this CPU and
31:31 - let's just hit enter there it says you
31:33 - got one question correct you got 33
31:35 - percent
31:36 - perfect last thing and then we'll move
31:39 - on some of you may want to actually have
31:41 - a percent sign and you might be getting
31:42 - a little mad that if you put the percent
31:43 - sign here there's going to be a space
31:45 - between it so what you can do is
31:47 - actually perform something known as a
31:48 - string concatenation the way you do that
31:50 - is you take this which is a numeric
31:53 - value okay and you can't add a number to
31:55 - a string because imagine this right I
31:57 - have something like 33 plus 7. yeah as a
31:59 - human you can read that but JavaScript
32:01 - doesn't understand this because adding a
32:03 - string to a number could result in kind
32:06 - of a weird value now in JavaScript this
32:08 - actually does work I don't want to tell
32:10 - you do that because you can get some
32:11 - strange values so forget about the fact
32:14 - that it does actually work in JavaScript
32:15 - because you shouldn't do that what
32:17 - you're going to do is you're going to
32:18 - convert whatever the numeric value is to
32:20 - a string then once it's a string you can
32:23 - add another string to it right so if I
32:25 - have 33 plus percent
32:27 - then that's going to give me
32:29 - 33 because we're just kind of smooshing
32:32 - the values together which is known as a
32:33 - concatenation all right
32:35 - so we're going to take percent plus that
32:37 - but to do this we're going to say
32:39 - percent.2 string which is a method that
32:41 - again does not modify the variable it
32:43 - just gives us the string representation
32:45 - of it then we put the percent sign like
32:47 - that okay
32:49 - so let's clear
32:51 - and run and let's go CPU enter enter and
32:54 - you got one question correct and it says
32:56 - you score 33 we really should have you
32:59 - scored 33 percent okay so that is
33:02 - Project one I know there was a lot of
33:04 - stuff we covered there I'm going to go
33:05 - faster in the next projects but I was
33:07 - assuming you had zero knowledge of
33:08 - JavaScript we went through a lot of
33:10 - stuff here don't worry if it's a little
33:12 - bit confusing uh but hopefully this was
33:14 - a bit helpful taught you a bit about
33:15 - JavaScript and you're ready to move on
33:17 - to the next project all right so now
33:19 - we're moving on to project number two
33:21 - what I've done is I've created a new
33:23 - Javascript file so I've called this
33:25 - script2.js and I've just copied this
33:27 - line in here because we're going to need
33:28 - to use this for this project we'll be
33:30 - creating a random number guesser where
33:32 - we'll ask the user to input a number and
33:35 - then we will tell them if they are
33:36 - higher or lower than the random number
33:38 - they are attempting to guess then we're
33:40 - going to kind of keep track of how many
33:42 - guesses they've had and we're going to
33:43 - tell them at the end it took you say
33:44 - seven guesses to guess this random
33:46 - number blah blah blah you get the idea
33:48 - this will allow us to view a few new
33:50 - pieces of syntax in JavaScript and to
33:52 - practice working with math and numeric
33:54 - types rather than strings which is what
33:56 - we focused on in the last project
33:57 - quickly I'll mention that I am going to
33:59 - pick up the pace a little bit here if
34:01 - I'm too fast fast for you feel free to
34:03 - pause the video or to go to the playback
34:04 - speed and reduce that alternatively if
34:06 - I'm too slow increase the playback speed
34:08 - and you can get through this a little
34:10 - bit faster regardless would love to hear
34:12 - your feedback on the last project and
34:13 - what you guys are liking or disliking so
34:15 - far please let me know in the comments I
34:17 - always take that feedback to heart and
34:18 - kind of try to adjust in my future
34:20 - videos okay
34:21 - so let's get started here first thing we
34:23 - need to do is generate a random number
34:25 - now to do this we're going to create a
34:26 - constant we're going to call this random
34:28 - number we also could call this target I
34:30 - think that makes more sense actually
34:33 - excuse me and we're going to make that
34:34 - equal to math with a capital dot random
34:38 - now what math.random will do is generate
34:41 - a random number between 0 to 1. it's
34:44 - going to give you like a very long
34:45 - decimal value okay so if we go here
34:48 - and we console.log the target let's
34:52 - bring up our terminal here and we run
34:54 - this uh oops I'm running the wrong
34:57 - script as I was saying so let's go to
34:59 - node and then script2.js you can see we
35:03 - get a value like this so what we
35:04 - essentially need to do if we want to
35:06 - generate a random number between a range
35:09 - or up to some specific value is we do
35:12 - the following so let's say I want my
35:15 - random number to be between 10 and 100.
35:18 - the way that I need to do this is I say
35:21 - 10 which is the minimum possible value
35:23 - we can have plus and then I'm going to
35:26 - say math
35:27 - dot round
35:29 - and I'm going to take my math.random and
35:32 - I'm going to multiply that by whatever
35:34 - the differences between the maximum and
35:36 - the minimum so let's say we want the
35:38 - maximum to be 100 well then I'm going to
35:40 - generate a random number up to 90. so
35:43 - I'm going to multiply this by 90 which
35:45 - is the asterisk operator okay
35:47 - so I take math.round which is going to
35:49 - round this to the nearest whole number
35:51 - okay we're going to take math.random and
35:54 - multiply that by 90. now when we do that
35:56 - that's going to give us a random number
35:57 - between 0 and 90. so now we know the
36:00 - minimum will be 10 and then it can be
36:02 - anything between 10 and 100 because if
36:04 - we had this at the maximum of 90 that
36:06 - would give us 100 right hopefully that's
36:08 - making sense but that's how you do a
36:10 - random number within a range a lot of
36:12 - times you just want to do a random
36:13 - number that is going to be like say 0 to
36:16 - 100 if that's the case then you just
36:18 - take this and you multiply it by 100.
36:21 - it's important that you round this
36:22 - though because if you don't you're going
36:24 - to get a decimal value which you don't
36:25 - want you want a whole number right so
36:27 - we're going to round this off so now
36:29 - let's just print our Target out
36:31 - and notice we're gonna get a bunch of
36:32 - different random numbers every time I
36:34 - run this you should get something
36:35 - different or not necessarily different
36:37 - but something that is random okay so
36:40 - there you go we're generating a random
36:41 - number now that we have that we want to
36:44 - continually ask the user to guess this
36:46 - number if they go above it we're going
36:47 - to tell them you're above if they go
36:49 - below it they're below otherwise they
36:51 - got it correct so let's set up a few
36:53 - variables here first we're going to say
36:55 - let's and this is going to be guesses
36:57 - equal zero now what we'll do is We'll
37:01 - add to this every time the user makes a
37:03 - new guess now rather than doing this
37:05 - kind of constant asking right now for
37:07 - now what we'll do is just ask them one
37:09 - time get that logic set up then we'll
37:12 - move into that new piece of syntax we
37:13 - have not yet seen okay so we're going to
37:15 - say that
37:17 - the we'll actually use let's guess
37:22 - equal and actually no we can use
37:25 - constant sorry this is fine we're going
37:26 - to say cons guess is equal to and this
37:29 - is going to be prompt and we're going to
37:31 - say guess the number and we'll just put
37:35 - 0 to 100 so they know the range then
37:38 - we're going to put colon and a space
37:40 - and it's going to allow the user to type
37:42 - in a number
37:43 - now what we're going to do is we're
37:45 - going to compare this number to the
37:47 - Target value and see if it's greater
37:48 - than or less than however remember that
37:52 - when we get a guess here this is given
37:54 - to us as a string
37:56 - right so it's going to be like the
37:58 - string of one or two or whatever the
38:00 - user types in so what we actually need
38:02 - to do is convert this guess into a
38:05 - number such that we can compare this
38:07 - against the guess all right or again
38:09 - sorry not to guess the target so the way
38:11 - to do that is we're just going to take
38:13 - number here and we're just going to wrap
38:15 - this whole prompt statement inside of
38:17 - this number function all that's going to
38:19 - do is take whatever we type in here and
38:20 - convert that to a number and just as a
38:22 - note if you were to type in something
38:23 - that's not a number something like hello
38:26 - you're actually going to get what's kind
38:28 - of convenient which is Nan standing for
38:30 - not a number so if you type in not a
38:31 - number number gives you not a number
38:33 - which is actually a special type in
38:35 - JavaScript in fact we can have a look at
38:37 - this by saying console.log
38:39 - guess
38:40 - okay and then running this and if we
38:43 - type in hello notice we get Nan right
38:46 - where if I type in something like 2 it
38:47 - gives us the number two and you can tell
38:49 - this is a number because it's
38:50 - highlighting in yellow
38:53 - all right so now we've converted our
38:55 - guests into a number now that we've done
38:57 - that we're able to compare this against
38:58 - other numbers so what I'm going to do is
39:00 - write an if statement
39:02 - and for if statement we want to check if
39:04 - the guess is greater than or less than
39:05 - the target how do we do that well it's
39:07 - fairly intuitive we're going to say if
39:09 - the guess is greater than so I'm using
39:11 - the greater than sign
39:13 - and then the Target now this is a valid
39:15 - comparison operator in JavaScript this
39:18 - will compare either two strings two
39:19 - numbers it can actually compare pretty
39:21 - much any types or quite a few types at
39:23 - least in this case when we use two
39:24 - numbers it works exactly as you would
39:26 - expect we're checking if the guess is
39:28 - greater than because the I usually think
39:30 - of it as like the alligator mouth is
39:31 - eating this value is greater than Target
39:34 - okay if that is for now we'll just say
39:37 - console.log
39:40 - your guess
39:43 - is too high okay
39:45 - and then we'll say otherwise
39:49 - and then console.log so let's do this
39:54 - your guess
39:56 - is too low now I know there's an issue
39:58 - with this if you already know what the
39:59 - problem is feel free to point it out in
40:01 - the comments or at least make a note of
40:02 - it mentally but right now let's just see
40:04 - how this works then I'll explain the
40:06 - problem so let's run this okay and let's
40:08 - guess the number of say 56. it says our
40:11 - guess is too low now in order for us to
40:13 - determine if this is working we're just
40:14 - going to print out what the target value
40:16 - is
40:17 - just so that we know so actually we need
40:21 - to do this before the guess we're going
40:22 - to say console.log
40:24 - Target right here okay just so we can
40:26 - kind of make sure this is functioning so
40:28 - it's 16 is the actual number so if we
40:30 - guess say 13 your guess is too low okay
40:33 - round again 52 we guess 55 your guess is
40:36 - too high so this is functioning now the
40:38 - issue I was discussing is what happens
40:40 - if I actually guess the number right so
40:42 - in this case I guess 0 it says your
40:44 - guess is too low when really we've
40:46 - actually guessed the value
40:48 - so this is where I'm going to uh
40:49 - introduce something known as the else if
40:51 - statement now the way that elsif Stamo
40:54 - works is it's an additional if that we
40:56 - will check if the first if is false so
40:59 - what I can actually do here is I can go
41:01 - else if and just like I wrote my
41:03 - original if statement I can write
41:04 - another condition here so I can say if
41:06 - the guess is less than the target so now
41:09 - essentially the way this works is we
41:10 - check this first if statement if this is
41:13 - true we just execute this block and we
41:15 - skip checking this if this is false we
41:18 - go to the else if and we see if this is
41:20 - true now the interesting thing with the
41:21 - lcif is that you can put as many of
41:23 - these as you want and you can kind of
41:25 - check a bunch of different conditions in
41:27 - a row and be able to skip checking them
41:29 - if one of them evaluates to true so the
41:31 - advantage again is that if this is true
41:33 - we don't check any of these whereas if
41:36 - what I were to do
41:37 - is remove the else's here and just put a
41:40 - bunch of ifs what would happen is we
41:42 - would actually check every single one of
41:44 - these if statements because they're
41:45 - actually separate statements that aren't
41:47 - associated with each other whereas if we
41:49 - return to having our else's all of these
41:51 - are kind of Chained and put in one
41:53 - single statement meaning only ever one
41:55 - of these kind of blocks will ever be
41:57 - entered alright
41:58 - so I just wanted to show that to you but
42:00 - we're going to have this else if now so
42:02 - if this isn't true check this if this is
42:05 - true do this and now we can add another
42:08 - else
42:09 - so now what I'm doing is using the if
42:11 - else if else where now in the else
42:14 - condition we can say console.log
42:17 - you guessed it
42:19 - now the reason why this works here is
42:21 - because if I check if the guess is
42:22 - greater than the Target and it's not and
42:24 - I check if the guess is less than the
42:26 - Target and it's not then it must be the
42:28 - actual Target right it must be the same
42:30 - thing so if these two are false it means
42:32 - we must have guessed the value there's
42:34 - other ways we could arrange this
42:36 - statement just wanted to show that to
42:37 - you so let's now run this
42:41 - okay and now let's guess the number
42:42 - let's actually guess 56 your guess is
42:45 - too low let's guess 2 and it says you
42:47 - guessed it okay so the statement is
42:49 - working as we expected now one thing to
42:52 - mention here just while we're at it it
42:53 - is possible to use the less than or
42:55 - equal to operator exactly what it says
42:57 - checks if it is less than or equivalent
42:59 - to the value same with the greater than
43:01 - or equal to operator okay you also can
43:04 - use the not equal to operator so
43:06 - exclamation point equals equals if it is
43:08 - not equal to this do the following
43:11 - otherwise do this Etc okay just wanted
43:13 - to show you those operators
43:14 - okay so now that we have this what we'd
43:17 - like to do is repeat this until they get
43:19 - it correct how are we going to do that
43:21 - well in JavaScript we have something
43:23 - known as a while loop now a while loop
43:26 - is a loop that will continue looping
43:28 - while a specific condition is true so
43:30 - what I can do is put well put a set of
43:33 - parentheses and inside of here just like
43:35 - my if statement I put something that
43:36 - evaluates to true or false so in this
43:39 - case I'm actually just going to put the
43:40 - word true now I could do something like
43:43 - while guesses is less than 10 and that
43:46 - means as soon as they hit 10 guesses
43:47 - we're going to stop right so you can do
43:48 - whatever you want here for the condition
43:50 - but just put something that evaluates to
43:52 - true or false so in this case we can
43:53 - just directly write true
43:55 - now what I'm going to do is take this
43:57 - kind of set of curly braces here and I'm
43:59 - going to put all of this code inside of
44:01 - here
44:01 - now what's going to happen is we're
44:03 - going to do this Loop continually okay
44:05 - so we're going to keep doing this uh
44:08 - Forever Until We break out of the while
44:10 - loop which is something I'm going to
44:11 - show you now right now what we've done
44:13 - is we've written what size an infinite
44:15 - Loop this means we just keep going
44:16 - forever and ever and ever because this
44:18 - condition is always true so what we need
44:21 - is a way to either make this condition
44:22 - false or alternatively uh we need to
44:26 - kind of manually exit this Loop which is
44:28 - what I'm going to show you how to do
44:30 - so inside of the wall if we have a few
44:32 - keywords now one of the keywords is
44:34 - Brick what break will do is immediately
44:37 - exit the closest internal Loop in this
44:40 - case the closest Loop is the while loop
44:42 - so we're going to exit out of that by
44:43 - using the brake keyword so as soon as we
44:45 - see break we're immediately going to
44:46 - stop executing the loop and go right
44:48 - down to what happens after the loop okay
44:50 - so now what we've actually done is we've
44:53 - implemented a loop that will continually
44:55 - keep asking you to guess until you get
44:57 - the answer correct we'll keep adding to
44:59 - that but for now let's test this
45:01 - so clear and run and oh I didn't print
45:04 - out the guess
45:05 - um okay well we can just kind of run
45:06 - this let's guess 50. it's too low let's
45:09 - get 75 too high okay let's guess 66 too
45:13 - high let's guess 60 too high okay 55.
45:17 - too low 57 too low
45:21 - 58
45:22 - 59 and we guessed the value
45:25 - okay so you can see we exit out of the
45:26 - loop and we stop asking because we got
45:28 - it and we broke using this break keyword
45:32 - great so that's how the Wallop works now
45:34 - what we want to do is keep track of how
45:36 - many guesses the user has so what we can
45:38 - do is we can simply go to the top of our
45:40 - while loop here we can say guesses plus
45:42 - plus this is going to add one guess
45:44 - every time we enter this Loop right
45:46 - because we're just going to keep
45:47 - repeating this code so then what we can
45:49 - do down here is we can say console.log
45:52 - you guessed
45:55 - the number
45:57 - in comma
45:59 - guesses comma tries
46:02 - okay exclamation point like that it will
46:04 - tell tell us sorry how many guesses this
46:06 - took now that's pretty much going to
46:07 - complete the program but let's go up
46:10 - here and just test this out okay so
46:11 - guess the number
46:13 - 50 too high 25 too low 37 too high
46:20 - 30 okay 34.
46:23 - 33 32 you guessed it and you guessed the
46:27 - number in seven tries
46:29 - okay so I think actually that's going to
46:31 - wrap up our number guessing program just
46:35 - a few uh kind of final educational
46:37 - moments here I guess inside of this
46:39 - while loop obviously we can use this
46:41 - break which is what I'm doing uh but we
46:43 - also have the option to use another
46:44 - keyword which is known as continue
46:46 - now I won't demonstrate the use case of
46:48 - this but all this is going to do is
46:49 - immediately restart the loop okay so
46:52 - what I could do here and this isn't
46:55 - really ideal but we can write it in this
46:58 - way
46:58 - is the following okay this is just kind
47:03 - of an illustration of of how this works
47:05 - I could actually put a continue keyword
47:08 - here
47:09 - a continue keyword here
47:11 - and a break keyword here now what this
47:15 - will do
47:16 - is if we enter into this statement and
47:18 - this can be announced if actually as
47:20 - well then we're going to continue now
47:22 - what that means is bring us to the
47:24 - beginning of the loop don't continue
47:26 - executing anything after the continue
47:27 - statement so if the guess is greater
47:30 - than the target don't go down here just
47:32 - continue the loop again and then down
47:34 - here same thing if it's not greater than
47:36 - the target but it is less than the
47:37 - target continue bringing us back to the
47:40 - top of the loop and then if for some
47:41 - reason it's not any of these so if we
47:43 - did actually guess the value then we
47:45 - print you guessed it and we break right
47:48 - which is down here exiting the while
47:49 - loop this is a very like anti-pattern
47:52 - way to write this like I wouldn't
47:53 - suggest you write it this way but I'm
47:55 - just demonstrating the use case right so
47:56 - if I go here
47:57 - we can do this too low
48:00 - 75
48:01 - uh too low 95 too high
48:05 - 90 93 92 okay you guessed it and then
48:10 - notice this works exactly as it
48:11 - functioned before
48:13 - okay
48:14 - I think that's going to wrap it up let's
48:15 - move on to the next project all right so
48:17 - the next project I have for you is a
48:19 - rock paper scissors game this idea is
48:22 - that we're just going to ask the user if
48:23 - they want to be rock paper scissors
48:25 - we're then randomly going to pick for
48:26 - the computer rock paper scissors we're
48:28 - just going to see how many wins losses
48:30 - or draws that they have at the end of
48:32 - the program let's go ahead and start
48:34 - writing this so I've created another
48:36 - script file again I'm going to take my
48:37 - prompt and just paste this in here I'm
48:39 - going to go a bit faster this time and
48:41 - I'll write kind of some more code and
48:42 - then slow it down so let's make a few
48:44 - variables we're going to say let wins
48:46 - equal zero let losses equal zero and let
48:51 - ties equal zero
48:53 - okay now what we'll need to do is we'll
48:56 - need to ask the user if they want to be
48:57 - rock paper scissors and then generate
49:00 - um kind of a random value and determine
49:02 - if the computer is rock paper or
49:03 - scissors
49:04 - so we're going to say uh const choice or
49:09 - yeah choice I guess is equal to
49:11 - prompt and then we'll say enter rock
49:15 - paper or
49:17 - scissors like that
49:19 - okay and we'll allow them to enter
49:21 - something now what I want to do is I
49:23 - need to make sure the user actually
49:24 - entered one of these valid options if
49:27 - they did then we'll continue otherwise
49:28 - we need to ask them to retry we're going
49:30 - to put this inside of a while loop but I
49:32 - like to write some more logic before we
49:33 - do that so I'm going to show you
49:35 - something new here
49:36 - I'm going to say if choice is equal to
49:40 - rock or
49:43 - choice
49:44 - is equal to paper
49:46 - or
49:47 - choice
49:50 - is equal to scissors and we're going to
49:54 - put a triple equal sign here as well
49:56 - like I was mentioning so what I'm
49:57 - actually checking here is three
49:59 - conditions in one and I'm chaining them
50:01 - together using something known as a
50:03 - logical operator which we've not yet
50:04 - seen now this double pipe operator here
50:07 - acts as an or okay so it's equivalent to
50:09 - writing or essentially what that means
50:11 - is if the left side or the right side is
50:15 - true then the whole expression evaluates
50:17 - to true now in this case I've confused
50:19 - you intentionally by writing actually
50:20 - two sets of ores but all this is
50:23 - checking when we put the ores kind of
50:24 - chained like this is if any of these
50:27 - conditions are true meaning they typed
50:28 - in rock paper or they typed in scissors
50:30 - okay you have to chain it like this how
50:32 - I've written it but if any three of
50:34 - these things are true it evaluates to
50:36 - true so we go we evaluate each
50:38 - individual condition only one of them
50:40 - can ever be true but as long as one of
50:42 - them is true we go in here
50:44 - otherwise we would need to say something
50:46 - like console.log
50:47 - okay and then we're going to say
50:51 - please enter a valid
50:54 - Choice okay and in fact I'm actually
50:56 - just going to reverse this just because
50:57 - I think this will be a bit educational
50:58 - rather than putting the else here I'm
51:00 - just going to put this in the if and I'm
51:02 - actually going to negate this I'm going
51:04 - to say if Choice does not equal Rock
51:07 - and I'm going to use something called an
51:08 - and choice does not equal paper
51:11 - and choice does not equal scissors okay
51:15 - so now I've just reversed the condition
51:16 - so that you can see how we do this in
51:18 - the opposite direction using the other
51:20 - logical operator this operator is the
51:23 - and it works opposite to the or both the
51:26 - left and the right hand side need to be
51:28 - true so in this case I'm saying all
51:30 - three of these need to be true to enter
51:32 - into this otherwise don't enter and then
51:35 - I've negated the condition so rather
51:37 - than checking if it is true I'm checking
51:38 - if it's not true so I'm saying if the
51:40 - choice is not equal to rock and the
51:42 - choice is not equal to paper and the
51:44 - choice is not equal to scissors so if
51:46 - it's not any of the valid options tell
51:48 - them enter a valid Choice let's just
51:50 - quickly test that before we go any
51:51 - further
51:51 - so we're going to clear and run script
51:54 - three
51:55 - and notice that if I type in something
51:57 - like R it says please enter a valid
51:58 - Choice whereas if I type rock that is
52:00 - fine okay
52:02 - so that is working
52:03 - I know that's new but wanted to show
52:05 - that to you all right so if they enter a
52:07 - valid Choice then what we do is randomly
52:10 - pick something for the computer
52:11 - so how are we going to do this we're
52:13 - going to say
52:14 - random
52:16 - and in this case I'm actually going to
52:17 - say index I'm going to teach you
52:18 - something new again is equal to and this
52:21 - is going to be math.random
52:24 - and we're going to multiply this
52:28 - by
52:29 - 2 and we're going to say
52:33 - math.round
52:35 - and then round this
52:37 - now the idea is this is going to give us
52:39 - a value of 0 1 or 2 which we're going to
52:41 - use as an index for something known as
52:43 - an array
52:44 - now I'm actually going to put const
52:46 - choices
52:48 - is equal to an array
52:50 - I'm going to say rock
52:51 - paper
52:54 - scissors like this now an array is a
52:57 - ordered collection of elements okay so
52:59 - what I do is I put a set of square
53:01 - brackets this defines an array now every
53:03 - element in our array is accessible by an
53:05 - index an index is an integer that
53:07 - represents the position of the element
53:09 - so the first element Rock here is
53:12 - indexable or accessible by index zero
53:15 - paper indexable or accessible by index
53:18 - one and scissors index two okay so what
53:21 - I've done is I've generated a random
53:22 - index which will correspond to either 0
53:24 - 1 or 2 which then in turn corresponds to
53:27 - rock paper or scissors right that's it
53:29 - that's all we're doing
53:31 - so that's kind of what we're doing the
53:33 - reason I do it out of two is because
53:34 - well the max index is two it's always
53:37 - going to be one less than the length of
53:39 - the array there's a lot more to talk
53:40 - about with arrays we're not going to get
53:41 - into all of it but I just wanted to show
53:43 - you a simple use case right here okay
53:45 - choices random index now we need to
53:47 - generate the computer choice so we're
53:49 - going to say const
53:51 - computer choice
53:53 - is equal to choices
53:55 - and the way we access an index of an
53:57 - element
53:58 - is use a set of square brackets and then
54:00 - we place in here random index which is
54:02 - the index we want to use so if I put 0
54:05 - that give me rock if I put one it gives
54:07 - me paper if I put two that gives me
54:10 - scissors in this case we'll use random
54:12 - index because that'll be the random
54:13 - value
54:14 - now because we're not quite done we're
54:16 - going to say console.log the computer
54:18 - choice
54:19 - okay we're going to clear
54:20 - and run
54:22 - and we'll do something like rock and
54:23 - then notice it gives us paper now let's
54:25 - run this again let's do paper gives us
54:27 - paper I just want to give me something
54:29 - different gives me scissors okay so you
54:31 - can see it's randomly generating
54:32 - something for the computer
54:34 - okay perfect
54:35 - so now that we have all of that we're
54:37 - just going to check if the computer
54:39 - beats the player how are we going to do
54:41 - this well the first thing we can check
54:43 - for is if we have a draw if we don't
54:45 - have a draw then we can check the three
54:46 - different conditions that result in a
54:48 - win for the player if they don't win
54:49 - they lose there's a bunch of different
54:51 - ways to check this but it is unnecessary
54:53 - to check all nine different combinations
54:55 - because of the fact that we can exclude
54:58 - the draws and we only need to check for
54:59 - a win condition so you'll see what I
55:01 - mean but I can say
55:03 - if the computer choice is equal to the
55:07 - choice which is really the player choice
55:09 - um and what I'll do is I'll show you in
55:11 - vs code what I can do is I can highlight
55:13 - this
55:14 - and I can hit Ctrl H or Ctrl F and then
55:16 - I press this little button here standing
55:18 - for find and replace and I can actually
55:21 - put a string to replace this with
55:23 - so I can say player choice like that and
55:25 - then I can put this capitalization here
55:28 - and this little underscore and now
55:30 - you'll see what this does is it only
55:31 - selects where we just have Choice
55:34 - whereas if I remove these it's selecting
55:36 - like choices and it would select like
55:39 - the capital choice but if I put both
55:40 - these on I'm matching the spacing and
55:43 - I'm matching the capitalization and now
55:45 - I can press this little button that says
55:46 - replace all and it just replaces all of
55:48 - those for me okay
55:51 - so anyways now that I've done that I
55:52 - have if computer Choice equal to player
55:54 - choice then we drew right so I'm going
55:55 - to console.log
55:58 - draw
55:59 - and then I'm going to say ties plus plus
56:04 - again we're going to put all this in a
56:05 - while loop in a second but for now I
56:06 - just like to write all the logic kind of
56:08 - at once okay so we're checking if they
56:10 - drew if we didn't draw then we're going
56:13 - to check if the player beat the computer
56:15 - and if we didn't be the computer then we
56:17 - lost now there's three conditions where
56:19 - we beat the computer right so we're
56:21 - going to say else if
56:23 - the player choice is equal to and in
56:27 - this case we'll say this is paper
56:29 - and
56:31 - the computer choice
56:33 - is equal to rock then we won right so we
56:36 - could say
56:37 - console.log
56:39 - one and then we can say wins plus plus
56:43 - now what I could do is write another
56:44 - else if statement and just do the same
56:46 - thing and check if we are rock and the
56:48 - computers paper we can do all the other
56:50 - win conditions or I can just chain them
56:52 - inside of here now
56:55 - might get a little bit confusing but
56:56 - let's do it anyways because the whole
56:58 - point is to learn here I'm going to put
57:00 - these in a set of parentheses this is
57:01 - our first winning condition right if all
57:04 - of this is true if the player chose
57:05 - paper and the computer chose Rock we won
57:07 - now what's the other winning condition
57:09 - well the other winning condition is
57:11 - let's just copy this
57:13 - and paste this here and you're gonna see
57:15 - it goes on a new line for us so it kind
57:17 - of formats It Anyways now I'm going to
57:19 - say if the player chose the Rock and the
57:22 - computer chose
57:23 - paper then we won okay so that's the
57:26 - next winning condition so notice I've
57:28 - put these in a set of parentheses
57:29 - because I need to kind of separate them
57:31 - out so we have the first winning
57:32 - condition second winning condition and
57:34 - now the third winning condition and I'm
57:37 - going to check if any of these three
57:38 - winning conditions are true because if
57:40 - they are we won right which is why I'm
57:42 - separating these larger conditions with
57:44 - the or statement so now rather than
57:46 - paper rock we're going to say okay
57:49 - scissors and sorry I realized this is
57:52 - rock and this needs to be
57:55 - scissors okay so we're going to say if
57:57 - the player chose scissors and the
57:59 - computer chose paper then move one
58:02 - now maybe I'm crazy but I'm pretty sure
58:04 - these are the only conditions in which
58:06 - we win
58:07 - so now we handle that and then we have
58:09 - an else and we say okay if we didn't tie
58:11 - and we didn't win we must have lost so
58:14 - we said constellog
58:17 - lost and then we type
58:20 - losses plus plus
58:22 - all right so that wraps that up what I'm
58:25 - quickly gonna do is I'm just going to
58:27 - add another console.log here and I'm
58:29 - going to say the computer
58:32 - shows
58:34 - choose no chose colon comma and then
58:38 - computer choice and we actually don't
58:39 - need the space because it will
58:40 - automatically add it let's just zoom out
58:42 - a little bit because I know that's
58:43 - getting a bit hard to see so we have our
58:45 - three variables right we asked them to
58:48 - enter rock paper scissors we make sure
58:50 - they selected something that's valid now
58:51 - we haven't actually put this in a while
58:53 - loop yet which we will do for now this
58:54 - is going to tell them to enter something
58:56 - valid even though we'd continue with the
58:57 - program in a second we're gonna not do
59:00 - that anyways we pick what the computer
59:02 - is selected okay
59:04 - we print out what they selected and then
59:06 - we check if they won if they lost Etc
59:08 - right saying okay if it's the same then
59:11 - we draw so we say that otherwise we
59:13 - check the three winning conditions win
59:15 - otherwise loss all right let's run this
59:19 - enter rock paper scissors enter Rock the
59:22 - computer Choice paper you lost okay
59:24 - perfect let's continue enter rock paper
59:26 - scissors
59:27 - paper the computer shows scissors all
59:29 - right seeming like this is rigged but
59:31 - let's see scissors the computer says
59:33 - paper you won okay nice so you can see
59:34 - this is working however we want to now
59:37 - continue essentially until the user
59:38 - tells us to stop so now how do we do
59:40 - that well we use a while loop so all we
59:42 - do is we take all the code we want to
59:44 - repeat
59:45 - we're gonna go here
59:46 - and we're going to say while true
59:49 - okay we're gonna wrap everything inside
59:51 - of here
59:52 - so now we have a while loop which means
59:54 - we're just going to continually do this
59:56 - all right and then what we need is a way
59:58 - to exit the loop now first of all let's
60:01 - go here and put a continue statement
60:04 - so continue like that now the reason
60:06 - we're going to put continue is because
60:07 - if the user does not select a valid
60:10 - value here then we're just going to tell
60:11 - them to kind of go again right so we'll
60:14 - repeat the while loop right from the
60:15 - beginning which just means we're going
60:16 - to continue repeating this portion of
60:18 - code until they give us a valid value
60:20 - okay please enter valid
60:23 - this is gonna be Choice all right next
60:25 - then we'll do all this and then what
60:28 - we'd probably want to do is once we exit
60:30 - the loop or we need a way to exit Loop
60:31 - sorry so I'm going to say enter rock
60:33 - paper scissors
60:34 - and then I'm going to put in parentheses
60:35 - or Q to quit
60:38 - okay first I'm going to check if they
60:40 - typed in Q so I'm going to say if
60:43 - player choice equals equals Q then I can
60:46 - just go here and I can say break so I'm
60:49 - just going to exit the while loop for us
60:50 - okay so if they enter that let's quit
60:53 - and we can even convert this to
60:54 - lowercase
60:56 - so that if they type in uppercase q we
60:59 - still quit all right then lastly we'll
61:01 - go down here we'll just say console.log
61:03 - it will just print out their records so
61:05 - we'll say wins wins
61:08 - losses
61:10 - losses and then ties
61:14 - colon ties like that
61:16 - okay I think that's gonna be it let's
61:19 - run this though and give it a test okay
61:21 - so let's just try to quit Okay so notice
61:23 - there you go that works uh let's enter
61:25 - let me zoom in a bit here
61:27 - Rock Okay computer scissors you won all
61:29 - right uh let's enter
61:32 - paper excuse me okay
61:35 - scissors
61:36 - the tender something invalid
61:39 - okay please enter a valid choice so
61:40 - let's go
61:42 - paper and let's quit says two wins one
61:45 - loss and one tie
61:47 - all right so I think with that said
61:49 - that's gonna wrap up this project this
61:51 - is definitely the hardest one so far I
61:52 - wanted to go a bit more challenging and
61:54 - show you some more different operators
61:55 - and things that we can use but hopefully
61:57 - you guys were able to complete this and
61:59 - most the code that you see here makes
62:00 - sense now let's move on to the last
62:02 - project which is a Choose Your Own
62:04 - Adventure game alright so this project
62:05 - is going to be a fast one with the idea
62:07 - that you can extend this and make it as
62:09 - complicated as you want I'm just going
62:11 - to show you probably in about five
62:12 - minutes the structure of a project like
62:14 - this but it's really extensible and
62:15 - something that you could even kind of
62:17 - combine with some of the other projects
62:18 - the idea is want to have a Choose Your
62:20 - Own Adventure game the point is that we
62:22 - have all these different nested paths
62:24 - that we can go down so you might have
62:25 - seen those books before where it's like
62:27 - do you want to fight the dragon with the
62:28 - sword or do you want to run away and
62:30 - then it says if you decide to fight turn
62:32 - to page 35 if you decide to run go to
62:34 - page 53 a lot of kids books are kind of
62:37 - like that right where you're picking the
62:38 - path you want to go down and depending
62:40 - on the decision you make you're going to
62:41 - either win or you're going to lose or
62:42 - you're going to end up in a different
62:43 - position that's what we can do with code
62:45 - I'm just going to start coding it for
62:47 - you and you'll see very very quickly how
62:49 - you can kind of work on this on your own
62:51 - all right so the idea is we're going to
62:53 - first need to ask the user for some
62:55 - information so we're going to take this
62:56 - prompt and we'll start with something
62:59 - like const answer is equal to prompt
63:04 - and the first thing we might ask is
63:06 - something like would you
63:08 - like to play question mark and I usually
63:11 - just put what I expect the answer to be
63:12 - inside of parentheses so the user knows
63:15 - what to type so why or no okay so we're
63:17 - going to say if answer dot to lowercase
63:22 - is equal to yes
63:24 - then we'll play
63:26 - otherwise we'll console.log
63:29 - and we'll say that's
63:32 - too bad
63:33 - okay so that's kind of the first
63:35 - decision right do they want to play yes
63:37 - or no all right now only if they said
63:39 - they want to play do we ask them the
63:42 - next question which means we put that
63:44 - question inside of this if statement so
63:47 - I'm going to say const
63:49 - answer 2 is equal
63:52 - to prompt
63:54 - would
63:56 - you like to go left or go
64:00 - right question mark
64:02 - okay and then we're just gonna put here
64:04 - left
64:05 - slash right
64:07 - now I do the same thing I check if they
64:10 - answered left we do this if they answer
64:11 - right go here if you want you can say if
64:14 - they didn't answer correctly maybe you
64:15 - asked them to do it again or you can
64:17 - just end the game you can pick what you
64:18 - want if they give a invalid answer I'm
64:20 - just gonna essentially check for one
64:22 - answer if they don't give me that I'm
64:23 - gonna assume it's the other one so I'm
64:25 - going to say if
64:26 - answer to
64:28 - is equal to left
64:30 - then I'm going to do something here
64:31 - otherwise we're going to assume it's
64:33 - right we're going to do something here
64:35 - so I can actually make a comment a
64:37 - comment to some code that will be
64:38 - ignored by your program by the way if I
64:40 - do two slashes just to indicate this
64:42 - else statement is what happens if I go
64:44 - right
64:45 - so let's say we go left and I do
64:48 - something like console.log
64:50 - oops
64:52 - you go left and fall off bridge
64:55 - bit extreme here but you get the idea uh
64:58 - you lost
64:59 - okay so left was not the correct path so
65:01 - they have to go right so if they go
65:03 - right we can do something like const.log
65:05 - nice
65:07 - you go right
65:09 - and approach a bridge
65:12 - okay you can be as creative here as you
65:14 - want and then I can ask another question
65:16 - so I can say cons answer three
65:19 - is equal to prompt and I can say
65:23 - would you like to cross the bridge
65:27 - or
65:28 - uh we can say something like turn around
65:33 - and find another way
65:36 - and then we'll put as the potential
65:39 - answers here
65:41 - cross slash term okay
65:44 - excuse me
65:46 - same thing we come down here let's just
65:49 - make this a little bit larger
65:50 - and we now put another if statement and
65:52 - we say if answer three
65:55 - is equal to cross
65:58 - then you do something here
66:00 - otherwise you do something here now I
66:02 - don't really want to continue too far
66:03 - with this so I'm just going to say a
66:04 - console.log
66:06 - you cross
66:09 - the bridge and reach the end of the game
66:14 - okay otherwise we can say something like
66:16 - console.log
66:18 - you turn back and trip on a log
66:23 - and
66:25 - hurt your leg
66:27 - you lose
66:29 - okay so the whole point of what I'm
66:32 - trying to show you here is that we can
66:33 - Nest these different blocks inside of
66:35 - each other okay so I've done this very
66:37 - very simply because I'm just trying to
66:39 - illustrate this to you quickly because
66:40 - this is a project that's really mad for
66:42 - you to work on on your own but the point
66:43 - is that we only go into one block if the
66:47 - other block is true
66:48 - so if this is correct or it's like we do
66:50 - want to play then we ask the first
66:52 - question
66:53 - depending on the answer to the first
66:54 - question we now Branch off and we go to
66:57 - the left or we go to the right so in
66:59 - this case we go to the left you lose but
67:00 - you could make it so that each answer
67:02 - could potentially lead you to the
67:04 - correct scenario right the whole point
67:06 - is that you can infinitely Branch as
67:07 - much as you want by nesting these
67:09 - statements so that's what we're doing
67:11 - we have this all right we say otherwise
67:13 - if you didn't answer left you're going
67:14 - right
67:15 - okay nice you approach Bridge ask you
67:17 - another question and then again we check
67:19 - inside of here and only inside of here
67:21 - what the correct answer is so if you
67:23 - cross okay you won the game otherwise
67:25 - you lose but we could just make it so
67:27 - you continue going down a bunch of other
67:28 - decisions now you can even make this
67:30 - more complicated where you have previous
67:32 - decisions impact future decisions now
67:35 - they already do but what I mean by that
67:36 - is at the beginning of the game you can
67:38 - ask something like what weapon would you
67:39 - like to select do you want to wear boots
67:41 - or do you want to wear sandals do you
67:43 - want to wear a hat or do you want to
67:44 - take this and you can kind of you know
67:46 - collect some different items for example
67:48 - and then you can use those items later
67:50 - in the in the game So eventually maybe
67:51 - you reach a dragon or something and you
67:53 - can say oops you didn't bring your sword
67:55 - with you so you lose the game because
67:56 - you can't fight the dragon so the
67:58 - decision they made maybe 20 steps ago is
68:00 - now affecting them here and they have to
68:02 - restart get all the way back there but
68:04 - make sure they make the correct decision
68:05 - so let me run this just so you get an
68:07 - idea of how it works
68:09 - okay uh so sorry we don't want script
68:11 - three so close that we want script four
68:14 - would you like to play yes do you want
68:16 - to go left or right we go left and it
68:18 - says we lost right so we can run again
68:19 - yes let's go right uh nice you go right
68:23 - into pressure Bridge would you like to
68:24 - cross the bridge or turn around and find
68:25 - another way Let's cross and we win but
68:28 - again you can see
68:30 - if we go the wrong way so I decide to
68:32 - turn it says you turn back and trip on a
68:35 - log and hurt your leg you lost
68:37 - you get the point that's how the game
68:39 - functions now I actually worked as a uh
68:42 - kind of coding teacher at a summer camp
68:45 - where I was teaching kids or between
68:46 - about 10 and 15 how to make this exact
68:48 - game this was kind of the final project
68:50 - they worked on at the end of the week
68:51 - and I'll just say that they came up with
68:53 - some super creative and really
68:54 - interesting projects where they had like
68:56 - hundreds of lines of code you know 20 30
68:59 - 40 different paths and they absolutely
69:01 - loved it it was super super fun so I
69:02 - know this is a simple like relatively
69:04 - simple thing to do but it makes really
69:06 - interesting games and something that's
69:08 - really cool that you can show to your
69:09 - friends family whatever and you can see
69:11 - if they can actually get to the correct
69:13 - uh path and obviously the more complex
69:15 - and more interesting you make it the
69:16 - better the game's gonna be so please
69:18 - make something like this extend it you
69:20 - even could do something crazy where like
69:22 - one of the paths requires you to play
69:24 - Rock Paper Scissors and if you lose then
69:26 - you then you lose right and you have to
69:27 - go back and do it again so all kinds of
69:29 - interesting stuff you can do anyways
69:30 - with that said I think I'm gonna wrap up
69:32 - the video here all of this code will be
69:34 - available from the description in case
69:35 - you'd like to download it and play along
69:36 - with it and again remember I do have a
69:39 - programming course called
69:40 - programmingexpert.io for any of you that
69:41 - are really serious about getting better
69:43 - at programming if you enjoyed this video
69:45 - please give me a like subscribe the
69:46 - channel leave a comment let me know what
69:48 - you thought of it and I look forward to
69:50 - seeing you in the next one
69:54 - foreign
69:55 - [Music]
69:58 - foreign
69:58 - [Music]