00:00 - hello everybody and welcome to another c
00:02 - plus tutorial for
00:03 - beginners now in this video i'm going to
00:06 - be discussing
00:06 - how you get console input or how you get
00:09 - input
00:09 - from the user i'm also going to be
00:11 - discussing something i left out in the
00:13 - previous video that i meant to mention
00:14 - and just forgot
00:15 - which is constant variables so with that
00:17 - said let's get into the video
00:22 - [Music]
00:27 - so the first thing that i want to
00:29 - discuss here is something called
00:30 - constant
00:31 - variables now a constant just means that
00:34 - the value of a variable does not change
00:36 - so whenever you say something is a
00:38 - constant for example like gravity is a
00:40 - constant the rate of gravity
00:41 - does not change just like here in
00:43 - programming when we define a variable
00:45 - and the value should never change we
00:47 - make it a
00:47 - constant variable or a constant value so
00:50 - the way you create a constant variable
00:52 - is quite simply you put the keyword
00:54 - const
00:54 - c-o-n-s-t before your variable
00:57 - declaration
00:58 - there's a few rules when you use const
01:00 - which i'll discuss in a second but let's
01:01 - just do an example
01:02 - so i say const int let's actually just
01:05 - do the example i just said gravity and
01:07 - then we'll make that equal to negative
01:08 - 9.8 and then technically the uter unit
01:10 - is meters per second but
01:12 - we're not going to use that so we'll add
01:13 - our semicolon here so this is an example
01:15 - of a constant
01:16 - this variable here cannot change its
01:18 - value if i try to change the value of
01:20 - this variable i will get an error it
01:22 - will say this is a constant you cannot
01:24 - modify it this is what's known as a
01:25 - read only value so the point of having a
01:27 - constant is just to make your
01:29 - uh program more clear so it's easier to
01:31 - actually read through so rather than
01:33 - writing
01:33 - you know negative 9.8 say 25 times in a
01:36 - physics engine or something
01:37 - you would just define the constant
01:39 - gravity and then every single time you
01:40 - wanted to use gravity you would just
01:42 - refer
01:42 - to gravity so it's very good practice
01:44 - whenever you have a variable that is a
01:46 - constant that's not going to change and
01:48 - shouldn't change
01:48 - that you define it as a const and that
01:51 - just enforces in your program that it
01:52 - cannot change now one thing you cannot
01:55 - do with constants is you cannot
01:57 - not initialize them that's a double
01:59 - negative i apologize but if i said
02:00 - const int gravity like this
02:04 - let's imagine this line was commented
02:05 - out here this would be invalid i cannot
02:08 - define a const
02:09 - unless i give it a value immediately so
02:11 - if i actually compiled my program here
02:12 - i'm just going to save us the time of
02:14 - not doing this
02:15 - you would see that this would be an
02:16 - error so those are const i just wanted
02:18 - to go over those quickly whenever you
02:19 - see them just understand they are read
02:21 - only values
02:22 - they are meant to be accessed they could
02:24 - be used but you cannot change
02:25 - their value so now that we've discussed
02:27 - constant variables we can start talking
02:29 - about getting console input
02:31 - so we saw previously that there was this
02:32 - command called c out
02:34 - standing for characters output this is a
02:36 - part of the i o stream library so
02:38 - input output stream now as well as c out
02:41 - there's this thing called
02:42 - c in now it's pretty intuitive this
02:43 - stands for characters input
02:46 - but this time instead of using the what
02:48 - is it called stream insertion operator
02:50 - after this we use the stream extraction
02:53 - operator
02:54 - what this is going to do is extract the
02:56 - characters from the stream that we typed
02:58 - in
02:59 - the stream being the console and it's
03:01 - going to take whatever those characters
03:02 - are
03:03 - and it's going to try to convert them to
03:04 - a certain type and store them in a
03:06 - variable
03:07 - so in this case if i say c in and then i
03:10 - say the
03:11 - two greater than signs which is the
03:13 - always mess up this name
03:14 - uh what is this called again the stream
03:16 - extraction operator
03:18 - not an easy thing to remember what's
03:20 - going to happen is it's going to try to
03:21 - store all of the characters that we type
03:23 - before we press the enter key on our
03:24 - keyboard in the variable n
03:26 - now i need to define the variable n
03:28 - because right now n is not defined
03:30 - so when i define the variable that i
03:32 - want to hold whatever was typed in from
03:33 - the console i need to pick its type
03:36 - now the type i pick is the value or the
03:39 - type of input
03:40 - that we are going to be expecting the
03:42 - user to type in so for example if i say
03:44 - int
03:45 - this means that my console input or i'm
03:48 - expecting my user to
03:50 - input a value that is a number to input
03:52 - an integer to be specific
03:54 - if i don't input an integer i am going
03:56 - to get an error
03:57 - so i need to make sure i input an
03:59 - integer otherwise there's going to be a
04:01 - problem in my program and i'll show you
04:02 - how we fix that problem in a minute
04:04 - but anyways this is the most basic form
04:05 - of getting console input
04:07 - you define a variable you define the
04:09 - type of that variable this is the type
04:11 - that you were expecting the input to be
04:13 - you then write c in you write the stream
04:15 - extraction operator
04:16 - and then the variable that you want to
04:18 - store whatever was in the stream
04:20 - whatever the input was
04:21 - so let me show you what happens when i
04:22 - run this let me compile my program
04:25 - and let me run my program notice that
04:27 - what happens is my program is kind of
04:28 - sitting idle right now it's not really
04:30 - doing anything
04:31 - and my cursor is flashing what that
04:33 - means is i'm waiting for input from the
04:35 - user
04:35 - so in this case let me type something
04:37 - like three when i type three
04:39 - all is good no error it goes to the next
04:41 - line notice that after your input so
04:43 - after you press enter it automatically
04:44 - goes down to the next line
04:46 - and then my program is done and all is
04:48 - working so to make sure this actually
04:50 - worked properly though
04:51 - what i want to do now is see out the
04:52 - value of n to make sure it actually did
04:54 - get the correct value so let me c out
04:56 - n after i get the input and store that
04:59 - in the variable n so we can see what the
05:00 - variable n is equal to after it's
05:02 - assigned the input
05:03 - so let's do this again let's compile
05:04 - let's run let's type three
05:06 - notice it prints out three all is good
05:08 - now let's see what happens when i print
05:10 - something or when i type something in
05:12 - that's not valid input
05:13 - so actually let's go with 6.7 when i do
05:16 - 6.7
05:17 - notice c plus plus is smart enough to
05:19 - realize that hey this is not an integer
05:21 - but i can convert it into an integer
05:23 - just by slicing off the flow
05:24 - so we go it goes ahead and does that and
05:26 - gives me the value six
05:28 - which is great it caused us not to have
05:30 - an error in our program
05:31 - and we still get some you know
05:32 - meaningful value although it's not the
05:34 - exact value that the user typed in
05:36 - however what happens when i type
05:37 - something in that cannot be converted to
05:39 - a string
05:40 - well if i type say hello in here notice
05:42 - we get the value zero
05:44 - now this does not mean that hello is
05:45 - equal to zero in fact just to prove this
05:47 - to you if i type in say y
05:48 - this also gives me zero the reason this
05:50 - gives me 0 is because there was an
05:52 - error in the c in kind of function
05:54 - program whatever you want to call it
05:56 - so it actually just assigned a default
05:58 - value of 0 to this variable because
06:00 - cn just returned the value 0 indicating
06:03 - that there was indeed an
06:04 - error now this is not super clear and
06:07 - whenever there's an error in c in
06:09 - what actually happens is it throws
06:11 - what's known as an error flag to the
06:13 - state of our console input stream or of
06:15 - our character's input stream
06:17 - what that means is after there's an
06:19 - error in any of our inputs because we
06:21 - can collect
06:21 - multiple inputs we don't have to do this
06:23 - just one time we can no longer collect
06:25 - any more inputs until we clear that
06:27 - error
06:28 - so this is very kind of hard to explain
06:30 - and strange because you can't really see
06:31 - all of this that's going on
06:33 - but as soon as we type in invalid input
06:35 - all of a sudden
06:36 - our character's input function or
06:38 - whatever you want to call it
06:40 - now throws an error flag to the console
06:42 - and this tells the console
06:43 - we need to resolve this error before we
06:46 - can collect any more input
06:48 - so to show you what i mean by this let's
06:50 - add another c
06:51 - in so let me just copy this and i'm
06:53 - going to go cn i'll make another
06:54 - variable let's just call this x
06:56 - and now we'll see in some value into x
06:58 - and we can also see out
06:59 - x after this as well so we'll see out n
07:02 - and we'll see
07:03 - x after we take our two inputs so let's
07:06 - try this now
07:06 - let's compile our program let's run the
07:09 - program and let's start with valid input
07:10 - so let's go with three
07:12 - and four notice it prints three four it
07:14 - didn't print the new line uh because we
07:16 - didn't tell it to print the new one so
07:17 - now if i want to print the new line i'll
07:19 - say end l
07:20 - let's recompile and let's run again and
07:23 - let's go three
07:24 - four and then we get three four right
07:26 - and it removed that space it just
07:28 - converted it into an integer
07:30 - okay great so now that we know that that
07:32 - works let's try this with invalid input
07:34 - so let me start by inserting something
07:36 - that's valid three now let me insert
07:38 - something that's inbound
07:39 - let's go with h as soon as i get do this
07:42 - i get three
07:43 - and then i get 0. the reason i get 0 is
07:45 - because c in return 0 because there was
07:47 - an error
07:48 - h is not a valid input it cannot be
07:51 - stored in the variable x right so i just
07:53 - automatically put 0 there now let's see
07:55 - what happens when i start with an
07:57 - invalid input so the first c in
07:59 - is inbound if i type h notice
08:01 - immediately it just stops
08:03 - the program actually just finishes and
08:05 - there we go the reason this happens is
08:07 - because our next
08:08 - cn right here cannot run notice it only
08:11 - asked me for one input right
08:12 - i just typed in h and then all of a
08:14 - sudden it printed out two values didn't
08:16 - ask me to type something else in
08:17 - that's because there's now an error in c
08:20 - in and since there's an error we need to
08:22 - clear that error before we can actually
08:23 - collect any more input from the user so
08:26 - that's something to keep in mind as soon
08:27 - as you have an invalid input
08:29 - you need to clear that invalid input to
08:31 - ensure that you can now collect more
08:33 - input afterwards
08:34 - now notice it prints out two kind of
08:36 - random values here so n is equal to zero
08:38 - the reason n is equal to 0 is because c
08:40 - in return 0 because this was invalid
08:42 - inputs that get assigned to the value n
08:44 - and then x has this random value right
08:46 - here
08:47 - now you can't really say anything about
08:49 - this random value the reason this is
08:51 - random is because
08:52 - at this point in time x is kind of just
08:54 - randomly holding something when you
08:56 - define variables in this way and you
08:57 - don't give them a value
08:58 - by default they're going to have some
09:00 - value that's just already
09:02 - stored in memory this is very difficult
09:04 - to explain without going too in depth
09:06 - but you can kind of imagine that all of
09:08 - our variables are sitting at some
09:09 - location in our computer's memory
09:11 - and until we tell that location what it
09:13 - should store
09:14 - it just has some random value inside of
09:16 - it we're not clearing anything out of
09:18 - our memory locations
09:19 - until they need to be used for something
09:21 - else so as soon as a variable
09:22 - is no longer being used then it just has
09:25 - the value it had before we don't we
09:27 - don't clear it out necessarily
09:28 - um at least in this kind of example
09:31 - right here this is very difficult
09:32 - for me to to explain again without
09:34 - getting too much in depth
09:36 - but just think of it like this value was
09:38 - being stored where x is
09:39 - and since we didn't assign anything to x
09:41 - it's just still storing that value so we
09:43 - just end up printing this random value
09:45 - i'm actually almost sure if we do this
09:46 - again let's just see what happens if we
09:48 - do this again we go
09:49 - h notice it prints the exact same thing
09:51 - so this is just what x is storing right
09:52 - now
09:53 - because we haven't set x to anything
09:55 - else
09:56 - so again that's why we get that random
09:58 - value not super important to understand
09:59 - that
10:00 - but now let me show you how we can fix
10:02 - this error right because this is
10:03 - annoying obviously if we type in invalid
10:04 - input here we want the rest of our
10:06 - program to still work properly we still
10:07 - want to be able to get input
10:09 - so we will continue in one second but i
10:10 - need to quickly thank the sponsor of
10:12 - this video and the series which is algo
10:14 - expert algo expert is the best platform
10:16 - to use to prepare for your software
10:18 - engineering coding interviews they have
10:20 - over 140 coding interview questions on
10:22 - the platform
10:23 - all of which have a conceptual overview
10:25 - and code walkthrough which are taught by
10:26 - the best instructors
10:28 - one of which is me check out algo expert
10:30 - from the link in the description and use
10:32 - the code tech with him for a discount on
10:34 - the platform
10:35 - so there's a certain way that we can do
10:36 - this first of all i'm going to show you
10:37 - how we can check if we got invalid
10:40 - input the way that we can check if we
10:41 - got invalid input is we can see out
10:44 - this right here which is called cn.fail
10:47 - now when you call this which is known as
10:48 - a method uh we'll discuss this later in
10:50 - the series
10:51 - what this tells you is whether or not
10:53 - there was a failure in your input or not
10:56 - so if there's a failure this right here
10:57 - is going to be equal to one
10:59 - if there was not a failure this is going
11:00 - to be equal to zero so let me just show
11:02 - you
11:02 - it's best to do this with an example
11:04 - let's compile our program let's run our
11:06 - program
11:06 - let me type something in let's type h
11:08 - notice we get zero printing out and then
11:10 - it's still oh
11:11 - what the heck did i not compile my
11:13 - program oh i didn't save it sorry
11:14 - this was running the previous version of
11:16 - my program i need to recompile it
11:18 - i was wondering why that was happening
11:19 - okay let's try this so if i type in h
11:21 - notice it prints out one the reason it
11:23 - prints out one is because there was a
11:25 - failure this was
11:26 - invalid right our input now let's run
11:27 - this again if i type in 1 we get 0 that
11:30 - means there was not a failure and all
11:31 - worked fine
11:32 - so you can check if there's a failure by
11:34 - looking at c in.fail this will be
11:36 - important when we can actually use this
11:37 - to
11:38 - say fix the failure automatically now we
11:40 - can also just fix
11:42 - a failure the way that we can fix a
11:43 - failure is by writing the following
11:45 - command
11:45 - when we write c in dot clear what this
11:48 - is going to do
11:49 - is clear the failure from our console
11:52 - input stream
11:53 - now this kind of works but you're going
11:55 - to see that we still get the same error
11:57 - even when we clear
11:59 - this error what this does is this
12:01 - removes the error flag
12:02 - from our console input stream however it
12:05 - does not remove
12:07 - the text that was typed in the string
12:09 - now i understand this is totally very
12:11 - vague and confusing especially if you've
12:12 - never seen something like this before
12:14 - but again what's happening is when
12:16 - there's an error we're throwing an error
12:17 - flag to the console
12:19 - so there's an error flag on the console
12:20 - what this clear clear line does is
12:22 - remove that error flag however it does
12:24 - not remove the text that is typed
12:26 - in right now to the console so we need
12:28 - to now remove the text that is typed
12:30 - into the console
12:32 - from kind of our console stream here
12:34 - otherwise we're going to get the exact
12:35 - same error happen again
12:37 - so what i do after this after i clear
12:39 - the error flag is i say
12:41 - c in and then i say dot ignore and what
12:43 - this does is ignore a set of characters
12:46 - in fact what we type is the following
12:48 - the number of characters that we want to
12:50 - ignore
12:50 - so to be safe you can just make this
12:52 - value super large and if the number of
12:54 - characters that were typed in was less
12:55 - than this value it will just ignore
12:57 - however many characters were typed in
12:59 - but let's make this something like a
13:00 - thousand what this means is that as soon
13:02 - as i hit this line
13:03 - cn.ignore if i had whatever number of
13:06 - characters i had typed in
13:07 - we're going to clear a thousand of those
13:08 - characters from the input stream
13:10 - so the next time i go to get input i am
13:12 - not considering those previous
13:14 - characters that were typed in because if
13:16 - i don't do this we're going to consider
13:17 - those previous characters
13:18 - so now what i add after this after this
13:20 - 1000 is i add a backslash n
13:23 - and what this is going to do and sorry
13:24 - this needs to be in double quotation
13:25 - marks not single quotation marks is
13:27 - going to skip
13:28 - us down to the next line so you saw
13:30 - previously what happened
13:31 - was as soon as we had a failure the next
13:35 - console input or the next line that
13:37 - executed happened right after that
13:39 - failure
13:40 - now i'll kind of show you this example
13:41 - again let me just uh get rid of these
13:43 - two lines
13:44 - let's say c in and let's go
13:48 - to x and then we'll just say c out and
13:51 - we'll see out here the value of n
13:53 - okay so let's run this program let's
13:54 - compile this just so i can show you what
13:56 - i'm talking about
13:56 - so let's run this and let's type in
13:58 - something invalid which is h notice we
14:00 - just print out zero immediately we just
14:01 - skip the c
14:02 - in however if i were to print out
14:05 - something else
14:06 - let's do this let's go c out and then
14:09 - let's go n
14:09 - and then let's go c out and let's do x
14:11 - let's see what this one looks like
14:13 - i'm trying to find a good example here
14:14 - okay so invalid
14:16 - and then what happens is it prints out
14:18 - zero and then it prints out whatever the
14:20 - next c out is immediately right
14:22 - because this c in since this didn't run
14:24 - it didn't move me to the next line
14:26 - so what happened was we kind of squished
14:28 - these two outputs together now that's no
14:30 - good
14:30 - we don't want to do that so what this
14:33 - backslash n does here on this line
14:35 - is it moves us down to the next line
14:37 - after there's a failure from our c in
14:39 - so now let's see what happens when i put
14:41 - these two lines
14:42 - right after the c out of n so now
14:45 - regardless of whether this was valid or
14:47 - not
14:48 - i'm going to clear any potential error
14:49 - flag i'm going to ignore a thousand
14:51 - characters i'm going to skip down to the
14:53 - next line
14:54 - and then hopefully the c in should just
14:55 - work so let's see again you can have a
14:57 - look at this code i don't want to
14:59 - fast forward through it too fast and
15:01 - let's go now so let's say
15:02 - g plus plus hyphen o and we seem to have
15:05 - gotten an error
15:06 - let's see what have i messed up here so
15:08 - it turns out i was actually right the
15:09 - first time when i had the single
15:10 - quotation marks this needs to be single
15:12 - quotation marks not double quotation
15:14 - marks
15:14 - the reason for this is dot ignore
15:16 - accepts two arguments
15:17 - arguments are just things that go inside
15:19 - of the parentheses when you call this
15:21 - and the things it accepts is an integer
15:23 - and then a character
15:24 - so rather than accepting a string it
15:26 - takes a character which means i need to
15:27 - put single quotation marks around this
15:29 - so now let me recompile that's kind of
15:30 - what the error was telling me there was
15:32 - an error with
15:33 - backslash n so let's run this there you
15:35 - go the compilation is good
15:37 - run the program and now let's do
15:39 - something that's going to error out so
15:40 - if i type h now
15:41 - notice it prints 0 but now it still lets
15:43 - me type something in right
15:44 - it doesn't immediately stop and go to
15:46 - the end of my program i can now type
15:48 - something in
15:48 - so now what i'm going to type in is
15:50 - hello and then
15:52 - i get 0 again because hello is invalid
15:53 - but if i run this one more time
15:55 - and i type say h which is invalid and
15:57 - then i type let's go
15:59 - like 12 12 actually works and now i can
16:01 - now print this out so some of you may be
16:03 - wondering
16:03 - why this didn't go down to the next line
16:05 - right because i was saying the reason we
16:06 - added the backslash n is so it moves
16:07 - down to the next line
16:09 - now technically the reason this happened
16:11 - is because after we did this c
16:13 - out here we didn't move to the next line
16:15 - so
16:16 - if i were to add a new line after this c
16:19 - out then this would actually work
16:21 - properly because the way it stands right
16:23 - now
16:23 - even if i type in two valid things
16:25 - without these two lines so let's
16:26 - actually do this
16:27 - if i go g plus and then run program and
16:29 - i type let's go
16:31 - one and then on the same line again it's
16:33 - asking me to type another number right
16:34 - and then it prints out two
16:36 - because i didn't add the new line after
16:38 - my first c out
16:39 - so technically this is actually working
16:40 - the way it's supposed to work and just
16:42 - to show you let's add an
16:44 - end line here this is what we probably
16:45 - should have done the first time
16:47 - let's compile let's run let's type in
16:50 - something invalid and then notice it
16:51 - goes down to the next line
16:53 - and now we can type something in so
16:54 - let's go with three three is valid it
16:56 - prints it out
16:58 - so hopefully that makes sense if the
16:59 - backslash n is not making sense to you
17:01 - don't worry about it just add it in to
17:03 - the end of dot ignore
17:05 - and this number here you can just make
17:07 - some you know arbitrarily large number
17:09 - that ignores
17:09 - the number of characters right so you
17:11 - want to make this at least as large as
17:13 - the number of characters you expect the
17:14 - user is going to type in it will then
17:16 - ignore that number of characters
17:18 - and then you will have bound input again
17:20 - so there you go that is kind of how you
17:22 - get
17:22 - console input i understand the cn.clear
17:24 - and ignore is kind of confusing
17:26 - but i just want to show you this because
17:27 - oftentimes you want to get multiple
17:29 - pieces of input
17:30 - and you can only get those other piece
17:31 - of input if all of the ones before it
17:33 - were valid
17:34 - so if you want to make sure that you're
17:35 - going to handle any situation
17:37 - where you potentially have invalid input
17:39 - you can just put this because even if
17:40 - you have these two lines right
17:42 - and then we run this and we actually
17:44 - type in two valid things we type in two
17:46 - and then we type in three this still
17:47 - works right clearing something that
17:49 - doesn't have an error just doesn't do
17:50 - anything
17:51 - and ignoring characters from the stream
17:53 - that aren't there just doesn't do
17:54 - anything either right because as soon as
17:55 - we get this input
17:56 - it will automatically kind of ignore the
17:58 - characters for us the only situation
18:00 - where we need this is where we have an
18:01 - error
18:02 - in the first input so hopefully that is
18:04 - clear the last thing i will show you
18:06 - here is how to build like a super simple
18:07 - calculator just so we can apply this
18:09 - into a little script
18:10 - so let's do this so i'm going to delete
18:12 - all this and what i want to accept is
18:13 - two integers so i'm going to say int
18:15 - num1 and num2 the idea being i want to
18:18 - take two numbers and then i want to add
18:19 - them together
18:20 - so what i'm going to say is co and i'm
18:22 - going to see out
18:24 - enter a number like that so i want the
18:27 - user to type a number i'm then going to
18:29 - say c in
18:30 - and i'm going to c in to num1 now notice
18:33 - i didn't add an endline here because
18:35 - what i want to happen is the user to
18:37 - type at the end of this right here so
18:40 - after this colon i have a space and then
18:42 - i want the user to start typing
18:43 - so i'm going to copy this line i'm going
18:45 - to put it right here so
18:46 - after the c in assuming i get valid
18:49 - input what's going to happen is it's
18:50 - going to move me down to the next line
18:52 - and then i will print
18:52 - enter and we can say a second number
18:56 - and then this one will be num2 then what
18:58 - i'm going to do is i'm going to say c
19:00 - out
19:00 - i'm going to see out the sum of these
19:01 - numbers so i'm going to say int
19:04 - sum equals num1 plus num2
19:08 - and i'm just going to see out the sum
19:09 - like that and actually before i see out
19:11 - the sum i'll say
19:12 - the sum is colon
19:16 - and then a space and then whatever the
19:18 - sum is so there you go
19:19 - let's test this program out this should
19:21 - ask us to enter a first number
19:23 - a second number we should then add them
19:24 - and we should print out the sum
19:26 - so let's compile uh and we get an error
19:29 - what is oh
19:30 - num sorry this needs to be not num
19:33 - sum okay just a small typo uh i had num
19:36 - there instead of sum
19:37 - so let's try this again looks like we're
19:40 - all good
19:40 - run the program enter a number go three
19:43 - enter second number
19:44 - five the sum is eight awesome always
19:46 - working
19:47 - so now let's see what happens if we have
19:48 - an error by type h notice that it just
19:51 - you know crashes and just
19:53 - goes through the rest of the lines
19:54 - because we now cannot get the second
19:55 - console input
19:56 - so our second number we don't assign it
19:58 - some value so it has whatever was just
19:59 - stored in memory at that location
20:01 - beforehand
20:02 - so if we wanted to fix that we would
20:03 - need to add the lines i showed you
20:04 - before
20:05 - we're going to say cn dot clear and then
20:07 - we're going to say cn
20:08 - dot ignore and we're going to ignore
20:11 - a thousand and then we're going to say
20:13 - back slash n
20:15 - like that okay so let's add our
20:17 - semicolon let's try this now
20:20 - so compile run let's enter an invalid
20:22 - number let's just go with he
20:24 - okay it still moves us down to the next
20:26 - line type in number three
20:27 - then notice the sum is three because the
20:29 - first number here will just be equal to
20:31 - zero we will add it to three
20:33 - and then all will be good so the last
20:35 - thing i'll show you here
20:36 - is how we can get an input that is a
20:38 - string or is a float because i realize i
20:40 - didn't show you how to get any other
20:41 - type of input
20:42 - so let's create a variable here and
20:44 - let's say string let's just call it s
20:46 - y naught and then we will say c in and
20:49 - we will c
20:49 - in 2s and then we will c out and we will
20:53 - see out
20:53 - so just a super simple example so let's
20:55 - go and compile our code
20:57 - so i'm going to compile it here and then
21:00 - so i want to
21:01 - run my program i guess i hadn't already
21:03 - typed that in this console so run
21:05 - program
21:05 - notice my cursor is ticking now i type
21:07 - hello and hello print out
21:09 - so that's as simple as it is to get
21:10 - string input anything you type
21:12 - when you have string as your input type
21:15 - will be valid so even if i type
21:17 - and let's just run the program here say
21:20 - 1 this is still val
21:21 - the reason this is valid is because when
21:22 - you write string as your data type here
21:25 - anything can be converted into a string
21:27 - so even if i type a number
21:29 - that can be converted into a string we
21:30 - just put double quotation marks around
21:32 - it boom there we go we have a string
21:34 - uh even if i type like a boolean right
21:35 - like true this just converts to a string
21:37 - that just works fine
21:38 - uh if i type say like 1.6 works
21:42 - it's a string so it's always safe to use
21:44 - a string as your input type
21:45 - if you don't care about the actual value
21:47 - like you don't care about say adding two
21:48 - numbers together
21:49 - then you can just use a string however
21:51 - if you want to get the integer
21:53 - representation of a number
21:54 - you would want to use int right you
21:56 - would want this variable to be an int
21:57 - and
21:58 - just as a little brief example here
21:59 - before we end the video let me show you
22:01 - what happens when i try to add something
22:03 - to s
22:04 - so let's actually create a new variable
22:06 - here actually i can't do a new variable
22:08 - because it will give it away let's do
22:09 - something like
22:09 - s plus one okay so let's say i want to
22:12 - add
22:12 - 1 to s let's see what happens when i
22:14 - actually try to do that
22:16 - so when i do that i'm going to run i'm
22:18 - sorry i need to recompile my program so
22:20 - let's recompile
22:21 - we get an error the reason we get an
22:23 - error here is because well we cannot add
22:25 - an
22:25 - integer to a string so that's just to
22:28 - show you that if you wanted to say add a
22:30 - number
22:30 - or add something to the number that's
22:32 - inputted you would want that number to
22:34 - be an int
22:35 - or you would have to convert what is
22:36 - typed in from a string to an
22:38 - int which we're not going to talk about
22:39 - now we'll talk about in later videos
22:41 - so hopefully this didn't confuse you too
22:43 - bad but the idea is just that the type
22:44 - really does matter
22:45 - and when i say string this means
22:47 - whatever's typed in even if i type an
22:49 - int it's going to be a string which
22:50 - means i can't do something like add a
22:52 - number to it because that's just an
22:53 - undefined operation
22:54 - how do you add one to the string tim
22:56 - right there's just that's undefined
22:58 - there's no way to do that
22:59 - so hopefully that kind of makes sense
23:00 - but i just want to show you string now
23:01 - of course if you made this float
23:03 - this will just work like if you type a
23:04 - floating point value you will get a
23:06 - floating point value
23:07 - if you type an integer value this will
23:09 - work as well because any end can be
23:10 - represented as a float
23:12 - if you type a string well you'll get an
23:13 - error because you cannot convert a
23:15 - string to an int
23:16 - so hopefully that's clear but with that
23:18 - said i'm now going to conclude this
23:19 - video i hope this was helpful to you
23:21 - if it was make sure you have a like
23:23 - subscribe to the channel i will see you
23:24 - in another c
23:25 - plus tutorial