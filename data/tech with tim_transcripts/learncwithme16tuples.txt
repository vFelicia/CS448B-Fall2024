00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial for beginners
00:04 - now in this video i'm going to be
00:05 - covering something called tuples
00:07 - now quickly note that some people do
00:09 - pronounce this tuple so the actual thing
00:11 - we're going to look at is a tuple
00:12 - but some people say tuple now i don't
00:15 - know what the
00:16 - correct pronunciation is so i'm just
00:17 - going to call it tuple because that's
00:18 - what i've always called it
00:20 - but anyways with that said let's get
00:21 - into the video and i will talk to you
00:22 - about tuples
00:32 - all right so the first thing we're going
00:34 - to do here is we're actually going to
00:35 - include
00:36 - the tuple package or library or whatever
00:39 - you call this here
00:40 - uh but the reason we need this is
00:42 - because there's some functions that
00:43 - we're going to use they're included
00:44 - in this package and well anyways that's
00:47 - why we need to
00:48 - include it now if you don't include this
00:50 - you'll notice that probably almost all
00:51 - of this will actually still work for you
00:53 - but there may be a few things that work
00:54 - a little bit differently or that don't
00:56 - work so i haven't tested what's actually
00:58 - in this and what's not in this
00:59 - but i'm pretty certain that some of the
01:00 - functions that i use here are included
01:02 - in this package
01:03 - and well that's why you're going to need
01:05 - to include it but you guys feel free to
01:06 - experiment and not use it and see when
01:08 - something breaks if you don't have it
01:10 - anyways let's look at what a tuple is so
01:12 - a topple is really like an array
01:15 - it can hold many different elements in
01:17 - it except those elements do not need to
01:19 - be the same type
01:20 - and it has kind of different way of
01:22 - accessing and changing elements
01:24 - but a tuple is very similar to an array
01:26 - in the sense that you kind of have an
01:28 - ordered collection of elements
01:29 - so let me just create a tuple then
01:31 - you'll see what i mean so i'm going to
01:32 - use the data type tuple
01:34 - notice it's not highlighting that's just
01:35 - because it's not kind of like a vanilla
01:36 - data type like say
01:38 - into char float so on and anyways i'm
01:41 - going to say tuple
01:42 - and then i'm going to put within angle
01:44 - brackets like this
01:46 - the data types that i want to be
01:47 - included in this tuple so if i do
01:49 - something like int
01:51 - string comma char what this is saying is
01:53 - that the first item in my tuple must be
01:56 - an int
01:56 - the second is a string and the third is
01:58 - a char or a character
02:00 - and so you can define as many items as
02:02 - you want you could make it just one item
02:03 - you can make it two items you can make
02:05 - it
02:05 - 3 000 items right it's completely up to
02:07 - you but this is how you define a top
02:09 - list you do the angle brackets
02:11 - then inside the different types of the
02:13 - items you'll have
02:14 - then you put the name of the tuple in
02:16 - this case
02:17 - let me actually just remove the char and
02:19 - i'm just going to call this person all
02:22 - right
02:22 - so i've just initialized kind of an
02:23 - empty tuple i haven't actually given the
02:26 - values that are stored in this tuple
02:27 - but i have said okay you know we're
02:29 - going to have this person tuple
02:31 - and these are the types of it items now
02:34 - if i wanted to initialize this with some
02:36 - values what i could do is put the open
02:38 - and closing
02:39 - closing parentheses sorry then inside of
02:41 - here just type the values that i want
02:43 - for the items of this tuple so i would
02:45 - say something like 20 and then i'll say
02:47 - tim
02:47 - although that needs to be in double
02:49 - quotation marks so the idea here is that
02:52 - we have this person tuple the person
02:54 - it's storing is 20 years old
02:56 - and their name is tim now obviously we
02:58 - don't have a label for what the int
03:00 - and the string are but that's kind of
03:02 - the reason i'm doing
03:03 - the end in the string and filling in
03:05 - these values anyways
03:07 - that is how you make a tuple so if we
03:08 - run this now we should see that we don't
03:09 - get any problems
03:10 - all is good and now let me show you how
03:12 - we can access the different elements in
03:14 - a tuple
03:15 - so any of you that are a little bit
03:16 - clever you probably think that we can
03:18 - just do this
03:19 - person at and then index zero
03:22 - and then that's going to access 20 right
03:25 - or you think we knew person at index 1
03:27 - and that's going to access tim
03:28 - just like an array now i'll show you
03:30 - what happens when we try to do this
03:31 - let's run this here we get an error
03:33 - there's no match for this
03:35 - operator on this type tuple that is
03:37 - because you cannot do this you cannot
03:39 - access and change elements
03:41 - using this kind of index syntax instead
03:44 - what you need to use is the function
03:45 - called
03:46 - get so you say get you put two angle
03:48 - brackets
03:49 - you put an open parenthesis and a close
03:52 - parenthesis around the tuple
03:54 - and then here you put the index of the
03:56 - item you want to access
03:58 - so for example if i put 0 here and now i
04:01 - run this
04:01 - it gives me the first item which is 20.
04:04 - if i change this to 1
04:06 - it gives me the second item which is tim
04:08 - so this is how you actually
04:09 - access the different elements in a tuple
04:12 - use get
04:13 - angle bracket index closing angle
04:15 - bracket open parenthesis
04:17 - name of tuple closing parenthesis kind
04:19 - of complicated but once you get used to
04:21 - that syntax it's pretty straightforward
04:22 - to remember
04:23 - so what i'm going to show you now is how
04:24 - we can actually change the elements in a
04:26 - tuple
04:27 - so if i do get and then the index and
04:29 - then whatever the name of the tuple is
04:31 - and then an equal sign after this and
04:32 - let's change it to say
04:34 - billy and then we see out this again
04:38 - you'll see this actually does
04:39 - change the first index in our tuple so
04:42 - we'll change tim
04:43 - to be billy so if we run this tim was
04:45 - first and then billy uh let's just add
04:47 - an
04:48 - end l here so that we're getting some
04:50 - better looking output awesome so tim
04:52 - and then billy so again that's how you
04:54 - access and modify the different elements
04:56 - of a tuple is by using this kind of
04:58 - get syntax now let me just make another
05:01 - few tuples here just to show you some
05:02 - other things that we can do
05:03 - so i can say something like tuple int
05:06 - char bool floats right and then i could
05:10 - say okay let's just call this
05:11 - thing and then we could give it some
05:13 - values so
05:14 - we could say actually you know i'm not
05:17 - going to do it like that
05:18 - let's just declare thing and then i will
05:20 - define the values that i want thing to
05:22 - hold the way i would do that is would
05:23 - say thing
05:24 - is equal to and then here what i
05:26 - actually need to do is i need to use
05:27 - this fancy function which is called
05:29 - make tuple which is going to take in all
05:32 - of the different values
05:33 - to initialize my tuple width so here
05:36 - since i didn't do it in this way i
05:37 - didn't kind of
05:38 - inline initialize the tuple what i need
05:40 - to do is say thing
05:42 - is equal to and then make tuple which is
05:44 - the name of a function
05:45 - and this function will then take the
05:47 - four items that we're going to
05:48 - initialize the tuple with
05:50 - so now i could say something like 23 i
05:52 - could say you know
05:53 - h i can say true and then i could say
05:57 - maybe
05:57 - 24.3 or something for my float and then
06:00 - of course if we decide to
06:02 - c out and we can just get zero
06:05 - of this is thing and then end
06:08 - l let's copy this a few times and we'll
06:10 - get the rest of them
06:12 - so see out one two three
06:15 - and run we see we get 23 h1
06:18 - and 24.3 so that is indeed working
06:21 - all right so let me get rid of this
06:22 - example up here that's old we've already
06:24 - looked at that one
06:25 - now what i want to show you is what
06:26 - happens if you don't initialize the
06:28 - value of a tuple and you just declare it
06:30 - like we did here
06:31 - so again i apologize because i know i
06:33 - confuse you guys by saying initialize
06:34 - and declare that's just
06:35 - i've gotten so used to just always
06:37 - saying initialize even when you're only
06:38 - declaring something
06:39 - again for the probably 100th time when
06:41 - you write a line like this you are just
06:43 - declaring the variable
06:44 - you are not initializing it because we
06:46 - have not yet given a value
06:48 - to it we've just declared that this
06:49 - variable thing exists and it is of
06:51 - this type we don't initialize it until
06:54 - we do something like we just did where
06:55 - we make
06:56 - the tuple or we actually in line
06:58 - initialize it by putting the values in
07:00 - here
07:01 - anyways hopefully that makes sense but
07:02 - now let's just see what happens if i see
07:04 - out all of the elements and i haven't
07:06 - initialized this tuple
07:08 - when i do this you can see that by
07:09 - default they're all just zero now the
07:11 - char is giving us kind of this weird
07:13 - empty character because that's just the
07:15 - default ver uh
07:16 - sorry default value for char but yeah
07:18 - that's what you're getting when you
07:20 - see out all of these different values
07:21 - and you have not initialized them to
07:23 - anything
07:23 - then of course if you go ahead and
07:25 - initialize them well then you're going
07:26 - to get the correct
07:27 - values so there's a few more ways that
07:29 - you can kind of declare a tuple
07:30 - we also could uh kind of omit doing that
07:32 - instead says equal to
07:34 - and then make tuple like this would be
07:37 - fine as well if we said
07:38 - tuple in charb will float thing is equal
07:40 - to and then we use the make
07:42 - tuple function not really a good reason
07:44 - to do that but
07:45 - you could do that if you want to if i
07:46 - run this now you see that this
07:48 - still works and so as you've seen now on
07:50 - c plus plus there's about 100 different
07:51 - ways
07:52 - to initialize variables to different
07:54 - values all right so that's the basics of
07:56 - tuples now i have a few more i don't
07:58 - want to say advanced but just kind of
07:59 - different or unique things that we can
08:00 - do
08:01 - with them so we will continue in one
08:03 - second but i need to quickly thank the
08:05 - sponsor of this video and this series
08:06 - which is
08:07 - algo expert as you guys know algo expert
08:10 - is the best platform to use for
08:11 - preparing for software engineering
08:13 - coding interviews they have a ton of
08:14 - awesome features they have great
08:16 - instructors
08:17 - like myself well you can check them out
08:19 - from the link in the description and use
08:20 - the code tech with tim for a discount on
08:22 - the platform
08:23 - so the first thing that's interesting
08:24 - here that we can do is we can swap the
08:26 - contents of two
08:28 - tuples so what i can do here is make
08:30 - another tuple
08:31 - it has to have the same type but if i
08:33 - say tuple int
08:35 - char bool and float and you know what
08:38 - now that i'm thinking about this it's
08:40 - probably going to be easier for us
08:41 - if we just make a smaller tuple for this
08:43 - example so let's delete that i'm going
08:44 - to say tuple
08:46 - int int is equal to and then we will say
08:49 - well we need a name for the tuple first
08:51 - we'll say t1 that's equal to make
08:53 - underscore tuple
08:54 - and then we'll just pass one two and
08:56 - then we can copy this line
08:59 - to make tuple we'll call this one t2 and
09:03 - then this one will have the value
09:04 - three four and now what i can do is well
09:06 - i can see out get
09:08 - 0 of t1 get 1 of
09:11 - t sorry 1 get 0
09:14 - of t2
09:17 - and then get 1 of t2
09:21 - okay so when i do this we can see that
09:23 - we have the value 1 2 and then 3 4.
09:25 - but now if i use this fancy function
09:27 - which is called swap i can say
09:29 - t1 dot swap t2
09:32 - and this will now swap the content so
09:34 - notice this is what the output was we're
09:36 - getting one two then three four
09:37 - now we should get it the other way
09:38 - around three four then one two that's
09:40 - exactly what we get
09:41 - because the contents of t1 were swapped
09:44 - with the contents of t2 however
09:46 - look what happens if i try to do this so
09:48 - if i add another value to tuple
09:50 - t2 and i make this three four five let's
09:52 - see what happens when we run this
09:53 - notice we get an error the reason we get
09:55 - an error is because these tuples have
09:57 - different types or different number of
09:58 - elements
09:59 - and therefore we cannot make the swap
10:01 - because they are not the same type of
10:03 - tuple so anyways that is how the swap
10:06 - works we need to make sure that's
10:07 - correct of course we could then swap
10:09 - them again
10:10 - we could say t1.swap t2 and then we're
10:13 - going to get it back to the original
10:15 - order because we just swapped it then we
10:16 - re-swapped it
10:17 - of course we could also say t2.swap t1
10:20 - doesn't matter in which order you do
10:21 - this it will give us the same result
10:23 - and there you go we can see we're
10:24 - getting the same thing so the next thing
10:26 - to show you is something called
10:27 - tie now what tie actually does for us is
10:30 - it will decompose a tuple into its
10:32 - individual elements
10:34 - so when i say decompose really what that
10:36 - means is you're taking some
10:37 - object or some data type that has
10:39 - multiple elements in it
10:41 - and you're breaking those multiple
10:42 - elements up into kind of separate unique
10:45 - variables and so
10:46 - i can really only show you this with an
10:47 - example but we have some tuple here t1
10:49 - that has
10:50 - two elements so what i'm going to do is
10:51 - say int x comma y
10:53 - so we'll declare an x and y integer
10:57 - and now what i will do is i will say tie
10:59 - and i will tie
11:02 - t1 and or sorry not tie t1 i'm going to
11:05 - tie
11:05 - x y and make that equal to t1
11:08 - and now what i'm going to do is c out x
11:11 - and
11:12 - cly after i end l
11:15 - so what this function does here is it
11:18 - takes
11:18 - in two variables and then you set it
11:21 - equal to whatever tuple you want to
11:22 - decompose
11:23 - and it will take the elements in that
11:25 - tuple and assign them to the variables
11:27 - so
11:28 - in this case x will be equal to 1 and y
11:30 - will be equal to 2 because well x is the
11:32 - first variable we put here
11:34 - y is the second and we're assigning that
11:36 - to tuple t1 so if i do this now
11:39 - you see that oops we need a semicolon
11:41 - here so let's rerun this you see that we
11:43 - get one
11:44 - two with no problems and if i swap this
11:46 - and i make this
11:47 - y comma x now we're gonna get two
11:50 - one and then after this we can still see
11:53 - out t1 and we'll see that t1 is still
11:55 - perfectly valid so we'll say get zero of
11:58 - and then t1 and then end
12:01 - l and then i guess we can just copy this
12:05 - and we'll do the same thing with get one
12:07 - and then make sure we add our
12:09 - end l here so when i run this you see we
12:11 - get
12:12 - 2 1 and then we get 1 2. again this is
12:15 - working properly
12:16 - this is what the tie function does now
12:18 - of course you need to make sure that the
12:20 - type of the variables you are going to
12:22 - be storing the elements from the tuple
12:24 - in
12:25 - are the same type as the elements in the
12:26 - tuple so if i change this to like
12:28 - char right and then i try to run this
12:30 - we're going to get well actually this
12:32 - worked but not
12:33 - in the way that we thought it was going
12:34 - to work because it was able to convert
12:36 - the end to a char
12:37 - but clearly this is not what we're
12:38 - looking for right we wanted the actual
12:40 - numeric value we didn't want some weird
12:42 - character value
12:43 - and so that's kind of the idea there you
12:44 - just need to make sure the types are
12:45 - matching
12:46 - hopefully you're getting the idea now as
12:48 - you're seeing a bunch of c plus plus
12:49 - code that the types
12:50 - really really matter in a strongly typed
12:52 - language like c
12:53 - plus plus okay so the last thing i have
12:55 - to show you here is what's called tuple
12:56 - concatenation okay so sorry for the
12:58 - abrupt cut there but as i said what i'm
13:00 - going to show you is tuple concatenation
13:03 - so tuple concatenation involves taking
13:05 - two tuples and just combining them
13:07 - together
13:08 - and so i'm going to show you exactly how
13:09 - we can do that the first thing though
13:11 - that we need to do is create two tuples
13:13 - and so i'm going to say tuple
13:14 - and we'll make its type int and char
13:18 - and we'll say this is called t1 and then
13:21 - we can just initialize it this way so we
13:22 - can do
13:23 - maybe 20 and then t and then we can do
13:27 - another tuple this tuple does not have
13:28 - to have the same type i can do tuple
13:30 - maybe
13:30 - char string and then that's t2 and this
13:34 - is hr
13:35 - and sorry the char needs to be in single
13:37 - quotation marks
13:38 - not double quotation marks so we'll make
13:40 - this maybe r
13:41 - and then for the string we can make this
13:45 - hello world exclamation point okay so
13:47 - now what i want to do is take these two
13:49 - tuples and essentially what i want to
13:50 - create is their combination
13:52 - so 20 t r
13:55 - and then hello world
13:58 - except obviously this would have double
14:00 - quotation marks that's what i want to
14:01 - try to create
14:02 - so how do we do that well there is this
14:05 - function
14:05 - and this function is called tuple
14:08 - underscore cat
14:09 - and what it does is concatenate two
14:11 - tuples together so it takes the two
14:12 - tuples you want to combine so t1 and t2
14:14 - and then it returns to you a new tuple
14:17 - which is the combination
14:18 - and so what i need to do is assign this
14:20 - to a variable so i can do something
14:22 - like tuple and then we can call this
14:24 - maybe t3 is equal to
14:26 - tuple cat now i'm going to stop for one
14:28 - second and i'm going to give you guys
14:30 - a kind of a quiz here although this is
14:32 - pretty hard to answer so if you answer
14:33 - this
14:33 - congratulations but i want you to look
14:36 - at this and try to determine
14:37 - what the error is right now if i run
14:39 - this code right now this is not going to
14:41 - work or if it works it's not going to
14:42 - give us the kind of expected
14:44 - behavior and so just look at this and
14:45 - see if you can figure out what i might
14:47 - need to do to actually make this work
14:49 - the hints i'll give you it has something
14:50 - to do with the different types that we
14:52 - have
14:53 - all right so pause the video if you want
14:54 - to try to do that i'm going to continue
14:56 - now i'm going to run the code
14:57 - and notice we're getting an error it
14:59 - says missing template arguments before
15:01 - t3 so since i defined a tuple i need to
15:05 - define the type of this tuple i can't
15:07 - just say tuple
15:08 - t3 i need to define what's going to be
15:10 - in this tuple and so what is going to be
15:11 - in this tuple well it's the
15:12 - concatenation of these two tuples
15:15 - which means it's going to be int char
15:18 - char string because we're going to have
15:20 - int char
15:21 - and then the char from tuple t2 and then
15:23 - the string from tuple t2 and so i need
15:25 - to
15:26 - define that here with t3 otherwise we
15:28 - get that problem and so now if i do this
15:30 - we can see that all works all is fine
15:32 - and now i'll just see out this so we can
15:34 - see it that it's actually working
15:35 - so if i do get 0
15:39 - and then t3 and sorry this is in
15:42 - parenthesis
15:43 - t3 and then end l and now let's just
15:46 - print this
15:48 - for all the different items so one two
15:51 - and three if i run this you can see that
15:53 - we're getting exactly what we expected
15:55 - awesome now the thing is this is kind of
15:57 - annoying right like i don't want to have
15:59 - to do this
16:00 - especially if i don't know the types of
16:02 - the two tuples that i'm concatenating
16:04 - and that could actually happen
16:06 - or you can find out the types of them
16:07 - but it's like complicated to do that in
16:09 - some
16:09 - situations so there's this great word in
16:11 - c plus
16:12 - it is called auto and what auto will do
16:15 - is infer the type
16:16 - of a variable based on whatever you
16:19 - initialize it with
16:20 - so it might be a lot of words or kind of
16:22 - confusing jargon
16:24 - but essentially when you put auto it
16:26 - will automatically determine
16:28 - what type this tuple is going to be and
16:31 - it can do that the c
16:32 - plus compiler can do that by looking at
16:34 - the type of these two tuples
16:36 - seeing what this tuple cat returns and
16:38 - determining that oh okay it's going to
16:40 - return to me a tuple that has int
16:42 - char char and string and so if i say
16:44 - auto t3
16:45 - now what will happen is by default this
16:47 - variable will be of type tuple in charge
16:50 - our string and we don't need to write
16:51 - all of that out
16:52 - so if i run this now we can see that
16:54 - this works just like we would expect
16:56 - because of the auto keyword now i
16:59 - generally recommend staying away from
17:00 - doing type inference like this
17:02 - this is what this is called you're
17:04 - telling the compiler hey figure this
17:06 - type out for me i don't want to figure
17:07 - it out myself
17:08 - the reason i say that is because as soon
17:09 - as you start using these keywords
17:11 - you kind of don't appreciate what the
17:13 - types are that you're actually using
17:15 - and you can run into a lot of bugs in
17:16 - your program if you don't know what
17:18 - certain types are and you're just using
17:20 - auto everywhere so be very careful when
17:22 - you use this in a situation like this
17:24 - it's fine you know the two types of your
17:25 - tuples
17:26 - and you're just saving yourself a few
17:28 - kind of lines of code or a few
17:29 - characters of code that you're writing
17:31 - out this is a useful keyword but again
17:33 - just be careful with it especially when
17:34 - you're learning
17:35 - i would always opt to write out all the
17:37 - types explicitly just to make sure i
17:39 - fully understand exactly what they are
17:41 - so anyways with that said i'm going to
17:42 - leave the video here i hope you guys
17:44 - enjoyed if you did make sure to leave a
17:45 - like
17:46 - subscribe to the channel and i will see
17:47 - you in another youtube video