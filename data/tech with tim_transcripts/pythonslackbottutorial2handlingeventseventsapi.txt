00:02 - [Music]
00:08 - hello everybody and welcome back to
00:10 - video 2 in the slack bot tutorial series
00:13 - so in this video we're going to be
00:14 - talking about events so how can we
00:16 - actually subscribe
00:18 - to events now what that means is that
00:20 - right now
00:21 - all we're really able to do is send a
00:23 - message we can do a few other things as
00:25 - well we could like pin a message react
00:26 - to it
00:27 - but we're not able to see what's
00:28 - happening inside of these channels
00:30 - we don't know what other people are
00:31 - doing we can't really see if someone
00:33 - else sends a message
00:34 - and a lot of the times when we have a
00:35 - bot what we want to do is be able to do
00:38 - something
00:38 - when a user you know runs some command
00:41 - or does something specific in the
00:42 - channel maybe they say a swear word and
00:44 - we want to delete that message right
00:45 - that's an example of something that we
00:47 - could do
00:48 - so what we need to do is set up a way
00:51 - for our bot to be
00:52 - kind of alerted or be aware when
00:54 - something happens in this channel
00:56 - now this is somewhat complicated in
00:58 - terms of how this actually works
01:00 - for our implementation it's not going to
01:01 - be that difficult but what we need to do
01:03 - is go back to the slack api page
01:06 - and we need to go here to where it says
01:07 - event subscriptions and start setting up
01:10 - a few things so that we're subscribed
01:12 - to these events so what i'm going to do
01:14 - is go ahead and turn enable events on
01:17 - now notice that the first thing it asked
01:19 - me for here
01:20 - is a request url now what this is saying
01:23 - essentially is that
01:24 - when an event occurs the slack api
01:27 - is going to send a post request which is
01:30 - just a method of
01:31 - an http request essentially to our web
01:34 - server
01:34 - so what we're going to be doing is we're
01:36 - actually going to be running our bot
01:37 - which we're not doing right now on a web
01:39 - server
01:40 - now running on a web server just simply
01:42 - means that this is going to be sitting
01:44 - and it's going to be running 24 7 and
01:46 - it's going to have its own kind of url
01:48 - right just like a website you know if i
01:49 - go to
01:50 - techwithtim.net that's running on a web
01:52 - server and when i go there it
01:54 - returns some html and it renders that on
01:56 - my screen well this is going to work a
01:57 - little bit differently what's going to
01:59 - happen is we're going to be running on a
02:00 - web server it's not going to be a
02:01 - website just a web server
02:03 - and when an event happens it's going to
02:05 - send a request to that web server
02:07 - and then we can handle that request and
02:08 - we can do something with it
02:10 - so for example when a user sends a
02:11 - message we can send a message back or we
02:13 - can say hello or something like that
02:15 - so to do this we need to start by doing
02:18 - a few different things the first thing
02:19 - we need to
02:20 - do is install a tool called ngrok so
02:23 - ngrok
02:24 - the reason for this is that we're going
02:26 - to run our web server on our local
02:29 - computer at least for right now when we
02:30 - distribute this bot later on
02:32 - we will run this on like a public web
02:34 - server that everyone can access
02:36 - but for right now we're running it on
02:37 - our local computer so we need to go
02:39 - ahead and install this software called
02:40 - ngrok which will essentially allow us to
02:43 - take a public ip address or a public
02:45 - domain
02:46 - and route that to our local web server
02:48 - so you just need to go ahead and press
02:50 - download here this is completely free
02:51 - there is a paid version but we don't
02:53 - need that
02:53 - and then if you're on windows obviously
02:55 - download for windows if you're on mac
02:56 - and linux download for those respective
02:58 - platforms
03:00 - now there is some instructions here you
03:01 - may have to do a few different things if
03:03 - you're on linux or
03:04 - mac os you can check that out right here
03:06 - but
03:07 - download that and then make sure you
03:08 - keep track of where that file is
03:10 - downloaded because this software
03:12 - works a little bit differently than we
03:15 - may have used before
03:16 - anyways mine is stored inside of my
03:18 - downloads folder so if i go to downloads
03:19 - you can see i have
03:20 - ngrok right here make sure you unzip
03:23 - that folder and then just take the
03:24 - application file and put it somewhere
03:26 - where you're going to remember in fact
03:27 - you could actually put it
03:29 - right inside of here if you wanted to
03:31 - it's going to be hard for me to run it
03:32 - in this directory
03:33 - but of course you could put it there if
03:35 - you wanted to all right so the next
03:36 - thing we're going to need to do
03:38 - is install a few more packages from pip
03:40 - so since we're going to be running a web
03:42 - server we're going to use a module
03:43 - called flask which is a really
03:45 - lightweight
03:46 - micro web service is what it's called to
03:48 - actually run this server so we're going
03:49 - to say pip
03:51 - install flask like that
03:54 - now again you can see i already have
03:56 - this satisfied for you guys it should
03:57 - install a bunch of different things
03:59 - and then the next thing that we're going
04:00 - to do is we're going to say pip
04:03 - install and then slack events api
04:07 - so i'll leave that up right there and
04:08 - you guys can see what that is but this
04:10 - is what we're going to use to actually
04:11 - handle and grab the events coming from
04:14 - slack so now that we have these two
04:16 - things installed
04:17 - come on finish up there we're going to
04:18 - go ahead and modify some things in our
04:20 - python file and then we'll go back to
04:22 - the slack api
04:23 - page and we'll add a few different
04:24 - things the first thing we're going to do
04:26 - is we're going to say from
04:27 - flask import flask with a capital like
04:31 - that
04:32 - then right after we initiate the client
04:35 - or before it doesn't actually matter
04:36 - where we do it
04:37 - we can say app equals then we're going
04:39 - to say flask
04:40 - and then underscore underscore name
04:42 - underscore underscore
04:43 - this is simply just a variable that's
04:46 - inside of python it represents the name
04:48 - of the file
04:49 - you don't i don't need to explain why we
04:51 - need that but this is just how we
04:52 - configure our flask application
04:54 - now it's super easy to run our flask
04:56 - application what we can do
04:58 - is we can set up this if statement at
05:00 - the bottom of our program and say if
05:02 - underscore underscore name underscore
05:03 - underscore equals
05:05 - and then inside of strings underscore
05:06 - underscore main underscore underscore
05:09 - simply we can do app dot run and then we
05:11 - can say debug
05:13 - equals true now what this is going to do
05:15 - is take our flask application
05:17 - it's going to run it on the default port
05:19 - which i believe is port 5000.
05:21 - if you want to change the port that this
05:22 - is running on you can say port equals
05:24 - and then set that to some integer value
05:26 - that's not already being used
05:28 - but what the debug does is say okay if
05:30 - we save this file or we modify it
05:32 - we don't need to re-run the python
05:34 - script it will automatically re-run it
05:36 - for us it will automatically update the
05:38 - web server which is really nice when
05:39 - we're doing development
05:41 - and then what this is saying here is
05:42 - essentially if we didn't import this
05:44 - file
05:45 - if we actually ran this file directly
05:47 - that's essentially what this if
05:48 - statement says
05:49 - then go ahead and run the web server the
05:51 - reason for that is if we
05:52 - imported this from another file we
05:54 - probably don't want to run the web
05:55 - server when we're you know
05:57 - taking a variable or something like that
05:58 - from this file all right
06:00 - so now we have that the next thing we're
06:02 - going to do is we're going to say
06:03 - from slack events api
06:08 - import slack event
06:12 - adapter now this is kind of a weird
06:14 - thing it's hard for me to explain
06:15 - exactly what this is going to do
06:17 - but this is going to handle all of the
06:19 - events for us so after we make the app
06:21 - and make sure it's after
06:22 - what we're going to do is say slack
06:23 - underscore event underscore
06:26 - adapter like that is equal to slack
06:29 - event adapter
06:30 - and then inside of here what we're going
06:32 - to need to do is pass something
06:34 - something and then our app so i'll
06:37 - talk to you about what these two things
06:38 - are in a second actually we can do the
06:39 - middle thing
06:40 - we're going to say slash slack slash
06:43 - events
06:44 - but for this one we're going to need to
06:45 - pass what's known as a signing secret
06:47 - which we're going to have to grab from
06:48 - the slack api website
06:50 - what this is saying is okay we're going
06:52 - to add the slack event
06:53 - adapter this event adapter will allow us
06:56 - to handle the different events that are
06:57 - being sent to us
06:58 - from the slack api and what we're going
07:01 - to do is say okay
07:02 - we want this route right here so slash
07:05 - slack
07:05 - slash events to be where we send all of
07:08 - those different events to
07:09 - and app is saying okay what web server
07:12 - are we sending these events to well
07:13 - we're sending it to
07:14 - this app which is the current running
07:16 - web server
07:17 - hopefully that makes sense but let's go
07:19 - back to the slack website
07:21 - slack api we're going to go to basic
07:23 - information
07:25 - and scroll down and there's this thing
07:27 - called our signing
07:28 - secret now what i'm going to do is well
07:30 - i'm going to have this blurred out but
07:32 - i'm going to copy this signing secret
07:34 - i'm going to go into my env file
07:37 - and just like i made this slack token
07:39 - i'm going to say signing
07:41 - underscore secret equals and then i'm
07:43 - going to set it equal to
07:44 - that token that i just grabbed that
07:46 - secret that i just grabbed
07:48 - now just like we did previously what
07:50 - we're going to do
07:51 - is use the os dot environ or whatever
07:54 - you want to call this
07:55 - to grab the signing secret from that
07:57 - file so i'm just going to copy this here
07:59 - i'm going to paste that as our first
08:01 - argument to the slack event adapter
08:04 - so now instead of slack token i'm going
08:06 - to say
08:07 - signing oops in all capitals underscore
08:10 - secret like that so there you go i saved
08:13 - and you can see now it kind of went down
08:14 - on the next line
08:15 - we have slack event adapter signing
08:17 - secret the route we want to go to and
08:19 - then
08:19 - app all right now this is where it gets
08:21 - a little bit more complicated but
08:23 - nothing crazy so what we're going to do
08:24 - is go ahead and run this
08:26 - i just want to make sure i didn't mess
08:28 - anything up too
08:29 - badly i actually think that we are good
08:32 - okay so i'm going to go ahead and run
08:34 - this
08:35 - and notice that now we can see that we
08:37 - have a web server
08:38 - running and we get kind of all of this
08:40 - output so it says
08:41 - right now that we are running on http
08:44 - colon 127.0.0.1
08:46 - colon 5000 so that's just localhost
08:49 - right but what i want you to keep track
08:50 - of here is this port this port is
08:52 - important because we're going to need to
08:53 - use this in the next step
08:54 - so in my case i'm on 5000 you're
08:57 - probably on 5000 as well but if you see
08:59 - a different number here then
09:00 - swap what i do in the next step with
09:02 - that number so what we're going to do
09:04 - now is go and find where that
09:05 - ngrok program was and just double click
09:08 - it to run it now if you're on mac or
09:09 - linux you're going to have to go back to
09:11 - the ngrok website
09:12 - and kind of follow the instructions for
09:14 - that it's not very complicated but you
09:15 - just need to essentially run that
09:17 - program
09:17 - so i'm going to go and double click
09:19 - ngrok and then now i'm inside of cmd
09:22 - what i'm going to do is i'm going to
09:23 - type ngrok and lowercase
09:25 - like that also i have no idea if that's
09:27 - how you pronounce it so i apologize if
09:29 - i've been butchering this the whole time
09:30 - you're going to type http and then
09:33 - you're going to type
09:33 - the number for the port that your server
09:36 - is running on so in this case ngrok http
09:39 - 5000. i'm going to go ahead and press
09:41 - enter
09:42 - and when i do that you're going to see
09:43 - that we have all of this kind of stuff
09:45 - popping up here
09:46 - and what i want you to look for is where
09:48 - it says forwarding so essentially what
09:50 - we've just done
09:51 - by running this program is we've allowed
09:53 - this public ip address which is this
09:55 - http
09:56 - blah blah blah blah to point to our
09:59 - local host
10:00 - web server so we can use this on the
10:03 - internet to kind of test and debug our
10:05 - app
10:06 - and this will point to this localhost
10:08 - address right here
10:10 - now keep in mind just because this is
10:11 - the free version of the software
10:13 - whenever you re-run this tool and you do
10:15 - need to keep this running you can't
10:16 - close this window you need to keep it
10:18 - running the entire time
10:19 - this address will change so what the
10:21 - paid version does for you is it lets you
10:23 - have a permanent address for this so it
10:24 - doesn't constantly change
10:26 - for us that doesn't matter this is just
10:28 - for development purposes anyways
10:29 - but copy this address it doesn't really
10:31 - matter if you use the https or the http
10:34 - i'll just use the http again this
10:36 - doesn't really matter at all
10:38 - we're going to go back to the slack api
10:40 - website here
10:41 - and what i'm going to do now is i'm
10:43 - going to go back to events so let me
10:45 - find where that is
10:46 - event subscription and now we're going
10:48 - to enable events and where it says
10:50 - request
10:51 - url we're going to put that url that we
10:53 - just copied
10:54 - we're going to put slash slack and then
10:56 - slash events
10:58 - now once we do that we're going to go
11:00 - and go to subscribe to bot events
11:03 - we're going to add the events inside of
11:05 - here that we want to subscribe to
11:07 - so in this case i'm going to go add bot
11:09 - user event and what i want to do now
11:11 - is i want to have channels and i want to
11:14 - do message
11:14 - dot channels what this will do is allow
11:17 - me to
11:18 - be subscribed to all of the events where
11:20 - a user messages something in a specific
11:22 - channel
11:23 - what will happen when someone sends a
11:25 - message is it will send a request
11:27 - to this url which in turn will hit our
11:29 - local server because we've rerouted that
11:31 - using ngrok
11:32 - and then we'll be able to do something
11:34 - with that so i'm going to go ahead and
11:35 - press
11:35 - save changes and now it says you've
11:38 - changed the permission scopes
11:39 - for your apps please reinstall your app
11:41 - for these changes to take effect
11:43 - now it also says right here that we need
11:46 - channels
11:46 - colon history as a required scope for
11:49 - this to work
11:50 - so remember back in the first video what
11:52 - we did is we went to oauth and
11:54 - permissions
11:55 - and what we needed to do is add the
11:57 - channel history scope where we added
11:59 - chat right now this automatically added
12:01 - this scope for us because we added that
12:03 - event subscription
12:04 - but just so you know say for some reason
12:06 - it didn't add it it showed you what you
12:08 - need to add you could go here and add
12:09 - that and then reinstall the app
12:11 - but anyways we're going to do is press
12:12 - reinstall app again we'll just press
12:15 - allow and we're good to go and now we
12:17 - can get out of this page
12:18 - we can go back to our vs code and we can
12:21 - continue to write
12:23 - all right so just note if i go here to
12:26 - ngrok
12:27 - we have a request that's come in here
12:29 - that says post
12:30 - slash slack slash events what this is
12:33 - saying is that we have just actually
12:34 - received a request
12:36 - because we just put that url in right
12:37 - and it was verifying that url was
12:39 - correct
12:40 - to this endpoint right here which is
12:42 - slash slack slash
12:43 - events now keep in mind that the reason
12:46 - why if i go back to the api page i just
12:48 - want to make sure this is really clear
12:49 - let's go back to event subscription the
12:52 - reason why i
12:53 - added the slash slack slash events here
12:56 - is because
12:57 - this address right here points to our
12:58 - local host and what i did inside of the
13:01 - code here is i said okay
13:02 - i want all of the events to be sent to
13:04 - this endpoint so that's why
13:06 - i added that there now if i change this
13:08 - like events one
13:10 - i would have to go back here and change
13:12 - ngrok to slash slack
13:14 - slash events one right i would add a one
13:16 - at the end there anyways we don't need
13:17 - that
13:18 - but let's go back to that all right so
13:20 - now that we have that
13:22 - what we need to do is create a route to
13:24 - create a function that can actually
13:25 - handle all of these events so i'm going
13:27 - to say at slack
13:29 - vent adapter and sorry not that we're
13:31 - going to do the one
13:32 - at slack underscore event adapter so the
13:35 - variable we set up here
13:37 - we're gonna say dot on and then inside
13:39 - of here we're gonna say message
13:41 - now this is simply what we use to handle
13:43 - the on message event so when a message
13:45 - is sent
13:46 - we're to handle that we're going to do
13:48 - something inside of here
13:49 - so i'm going to say define message i'm
13:52 - going to take a payload here
13:54 - and then inside of here we'll do a few
13:56 - different things now what this is saying
13:58 - is that when a message is sent
13:59 - we're going to call this function and
14:01 - we're going to take the payload that was
14:03 - sent to us
14:04 - the payload is just some data that the
14:05 - slack api is going to send
14:07 - in this case it's going to send us all
14:09 - of the data about the specific message
14:11 - that was sent
14:12 - so what i'm going to do is say event
14:14 - equals payload
14:16 - dot get and then inside of here i'm
14:18 - going to say event
14:19 - comma and then just an empty dictionary
14:21 - like that what this is saying is let's
14:23 - look for the key event inside of our
14:26 - payload
14:27 - if we don't have that we'll return a
14:29 - blank dictionary
14:30 - the event key is going to give us
14:32 - information again about
14:34 - what that event was and like the message
14:36 - that was sent all of the text and all of
14:38 - that
14:38 - now the first thing that we can do is we
14:40 - can see what channel
14:41 - this message was sent in so i can say
14:43 - channel id is equal to
14:45 - event dot get and then instead of here i
14:48 - can say channel
14:49 - what this will do is give me the channel
14:51 - id that whatever message was sent in
14:54 - right so pretty straightforward
14:55 - next i can say user id so user id equals
14:59 - event.get and then in this case i can
15:01 - say
15:02 - user pretty straightforward it's going
15:04 - to give me the id
15:05 - of the user that sent this message and
15:07 - again we're getting that from the event
15:08 - key in the payload
15:10 - next what i'm going to do is say text
15:12 - equals event dot gets
15:14 - take a wild guess at what this is going
15:15 - to be it is simply
15:17 - text and there we go so what i'm going
15:19 - to do now is simply
15:21 - echo back to the user whatever they send
15:23 - us
15:24 - so we'll use this client.chat underscore
15:28 - post message
15:29 - so we'll go ahead and put that like that
15:32 - and what we will do
15:33 - is we'll say okay when you post a
15:35 - message sorry
15:37 - when we receive a message we will simply
15:38 - send back whatever that message was
15:40 - so i will change the text here to be
15:42 - text which means whatever was sent to us
15:44 - we will send back
15:45 - and then the channel i will simply
15:47 - change to be the channel id
15:49 - so say channel equals channel id and now
15:51 - whenever a message is sent we will send
15:53 - back another message that simply echoes
15:55 - it
15:55 - so let's save that i might have made a
15:57 - mistake here but let's
15:58 - run this code okay so we're running the
16:01 - server
16:02 - have a look at ngrok oops i want to
16:04 - close that i keep opening that wrong one
16:06 - and you'll see all of the events that
16:08 - are coming in but let's go back to slack
16:11 - in this case we're gonna go actually
16:12 - back to our slack channel and now i'm
16:14 - gonna send something i'm gonna send hi
16:16 - and notice that the youtube bot keeps
16:20 - returning hi now we kind of have a
16:22 - problem here right
16:23 - it's just constantly sending back high
16:25 - and if i go to ngrok here
16:26 - you can see that we just keep getting
16:29 - all these requests coming in
16:30 - and it just keeps telling us that
16:32 - messages were sent now the reason why we
16:34 - continue to send high is because if we
16:36 - have a look at our code here
16:38 - all we've actually done is just handled
16:40 - the situation
16:41 - where a message was sent right if any
16:43 - message was sent it doesn't matter by
16:45 - who
16:45 - even our own bot then we're going to
16:47 - send a message back
16:49 - so what we need to do is we need to make
16:50 - sure that when we send a message
16:53 - we're only sending it if the previous
16:55 - message was not from us right so
16:57 - we don't want to reply to a message that
16:59 - was ourself so what we're going to do is
17:01 - check to see if the message
17:02 - event that we're getting sent here is
17:04 - from a bot or if it's from our self
17:06 - now to do this what we need to do and
17:08 - actually let me just
17:09 - stop the server for a second because
17:11 - they're just going to keep going so
17:12 - let's just do control c and i'll stop
17:14 - that there
17:15 - we need to check if the user id of this
17:18 - message
17:18 - is equal to our bot's id but that means
17:21 - we need to know our bot's id
17:22 - so the first thing we're going to do is
17:23 - say bot underscore id i'm going to do
17:26 - this above the function
17:27 - is equal to client dot api
17:31 - call now this is another way that we can
17:33 - call specific
17:34 - endpoints on the slack api if you know
17:37 - about that then this will be useful
17:39 - if not don't worry about it no problem
17:41 - but we're going to say client
17:43 - dot api underscore call i'm going to say
17:45 - auth.test
17:47 - now what this is going to do is return
17:49 - to us again some information
17:51 - one of those pieces of information will
17:52 - be the id of our bot
17:55 - so to get that we're going to say user
17:56 - underscore id
17:58 - now don't worry if this is confusing you
18:00 - just imagine that all this line is doing
18:02 - is giving us the id of our bot so we can
18:04 - simply check if the user id here
18:06 - is equal to the id of our bot if it is
18:09 - we're just not going to send the message
18:11 - so we'll say if the bot underscore id
18:14 - does not equal the user id then we'll go
18:17 - ahead and send that message
18:19 - so let's save that let's run the server
18:23 - and i need a colon here that's going to
18:24 - be syntax error let's add the colon
18:27 - expect an indented block that should be
18:29 - indented as well my apologies
18:31 - but let's run that now we can see this
18:32 - is all running let's go
18:34 - back to slack and let's send hello world
18:38 - give it a second and notice that our bot
18:40 - returns hello world but it doesn't just
18:42 - keep
18:43 - sending hello world now let's say hi i
18:46 - am tim and we get hi
18:49 - i am tim so that is the basics and that
18:51 - is how we subscribe to events
18:54 - now of course there is all kinds of
18:55 - other events as well if you have a look
18:57 - here of subscribe to bot events you can
18:58 - kind of scroll through and just pick
19:00 - whatever events you want
19:01 - it will add automatically add that scope
19:04 - and then all you'll need to do is maybe
19:05 - just do a quick
19:06 - lookup to figure out how or what the
19:08 - string is here that you need to pass in
19:10 - to handle that specific event
19:12 - but if you want another event you would
19:14 - just write the exact same thing i've
19:15 - done here
19:16 - the payload may be slightly different
19:18 - that's coming in but you can get the
19:20 - same information like the channel the
19:22 - user
19:22 - the text you can get the time there's a
19:24 - bunch of other stuff that you can get
19:26 - in fact to conclude here i will just
19:28 - print out what the payload looks like
19:29 - so you guys can have an idea of what
19:31 - we're actually being returned here so
19:33 - let's say print
19:35 - payload like that let's go into our
19:38 - console
19:39 - let's go to slack and let's send a
19:41 - message
19:43 - hello world and you can see
19:46 - if we have a look here we get the
19:48 - payload right so we have all this stuff
19:50 - coming in so this is all the information
19:52 - that it's passing us
19:53 - now you can kind of parse through this
19:55 - information on your own and get all of
19:56 - the stuff that you want
19:58 - but you can just print it out and kind
19:59 - of have a look at you know what you're
20:01 - actually getting back from the api
20:03 - so anyways i think i'm going to end the
20:05 - video here
20:06 - hopefully that showed you how we can
20:07 - handle messages and give you kind of
20:09 - some intuition on how you would handle
20:11 - other
20:11 - events in the future we will handle some
20:13 - other events but i'm going to be trying
20:15 - to show you a bunch of different things
20:16 - just so you're aware of what's possible
20:18 - and you can kind of make your bot your
20:20 - own
20:20 - i'm not going to be trying to make this
20:21 - like a full-fledged bot that has some
20:23 - specific purpose
20:24 - so anyways as always i hope you guys
20:26 - enjoyed if you did please like
20:27 - subscribe and i will see you again in
20:29 - the next slack bot tutorial
20:34 - [Music]
20:39 - you