00:02 - [Music]
00:08 - hello everybody and welcome to the final
00:10 - video in this
00:11 - django and react tutorial series now
00:14 - before we dive in here what we will be
00:16 - doing is working on
00:17 - functional components so i will be
00:18 - teaching you react hooks
00:20 - and i'll be showing you how we can make
00:21 - a new component that actually does a
00:23 - different thing
00:24 - and use kind of the functional style
00:26 - this is not very difficult and you
00:27 - pretty much already understand how all
00:29 - of this works is really just about
00:30 - learning the syntax
00:31 - and what a functional component looks
00:33 - like anyways i just want to give a thank
00:35 - you to everyone that is still here
00:37 - who likes the videos who comment who has
00:38 - subscribed to the channel
00:40 - you guys are the reason that i post
00:41 - these videos as you can see going
00:43 - through this series they get less and
00:44 - less views as we go on
00:45 - and on but every single time i see a
00:47 - comment from one of you guys
00:49 - it motivates me to want to make another
00:50 - one and to just continue posting more
00:52 - videos in the series
00:54 - so anyways this will be the final video
00:56 - i hope you enjoyed up until this point
00:58 - but we are not done let's get into the
01:00 - functional components
01:01 - so what i'm going to do in this video is
01:03 - i'm going to build a functional
01:04 - component
01:05 - and this component is going to be
01:06 - responsible for giving the user
01:08 - information about the app
01:10 - so you can kind of think of this as just
01:11 - like a help button you know you press it
01:12 - and it tells you like what it means to
01:14 - join a room or how you create a room
01:16 - or how you authenticate with your
01:18 - spotify or whatever it may be we're
01:19 - going to keep it really straightforward
01:21 - this was just really the only thing i
01:22 - could think of to add to this app that
01:23 - made sense in a separate component
01:26 - so anyways let's go ahead and do that so
01:27 - i'm going to make a new component here
01:29 - inside of my components folder
01:30 - i'm going to call this info.js now
01:33 - inside of here we're actually going to
01:35 - start by doing something a little bit
01:36 - different
01:36 - we're going to say import react comma
01:40 - and then we're going to import use state
01:42 - which is a hook
01:43 - which we'll see in one second and use
01:46 - effect which is another hook which again
01:48 - we'll see
01:48 - oops in a minute and we're going to
01:50 - import that from react like that in let
01:52 - me just zoom in a bit so we can
01:54 - see this all right so import react i use
01:56 - state and use effect
01:58 - from react next we're going to import
02:00 - some things from material ui
02:01 - so we're going to say import and we're
02:03 - going to import the grid
02:04 - we're going to import the button we're
02:06 - going to import typography
02:08 - and we're going to import the icon
02:10 - button and that is going to be from
02:13 - at material hyphen ui
02:17 - core like that now just to give you some
02:19 - idea of what we're going to build here
02:21 - essentially it's going to be a really
02:22 - basic page
02:23 - it's just going to have two pages on the
02:25 - page if that makes sense so there's
02:27 - going to be like an
02:27 - arrow to view the next portion of the
02:30 - help page and then an arrow to go back
02:31 - to the previous portion
02:33 - the reason we're going to do this is
02:34 - just so that it's like you're kind of
02:35 - going through different pages of
02:37 - the help and then that way we can
02:39 - actually use some state and use some
02:41 - effects and
02:42 - you'll see for the purpose of the
02:43 - example that's why we're doing that
02:44 - anyways the page is going to be super
02:46 - straightforward it's just going to have
02:47 - some text that gives some information
02:49 - there'll be a little arrow to say go to
02:50 - the right you can view the next piece of
02:52 - information then you can go back and
02:54 - view the previous piece of information
02:55 - and then of course you can return back
02:57 - to the home page
02:59 - so anyways we're going to import some
03:00 - arrows here some icons we're going to
03:01 - use that are like the arrows for
03:03 - navigation so we're going to say
03:04 - import navigate and i believe this is
03:07 - before
03:08 - icon from and this is going to be at
03:11 - material ui slash icons
03:14 - slash navigate before and
03:18 - omit the icon at the end of that then
03:19 - we're also going to import
03:21 - navigate after like that or
03:24 - i spell navigate correctly no i did not
03:27 - navigate
03:28 - after icon from and then
03:31 - at material ui slash icons
03:34 - slash navigate and i actually am
03:38 - incorrect it's not navigate after it is
03:40 - navigate next okay
03:41 - so navigate next like that
03:45 - okay so there we go we have our icons
03:47 - the last thing that we need to import
03:49 - here is
03:50 - a link so we're going to say import
03:53 - and then link
03:56 - from at material oops
04:00 - so actually not from app material ui
04:01 - from at react hyphen router hyphen dom
04:04 - and now we are done with our imports so
04:06 - now let's start actually creating a
04:08 - functional component
04:09 - to create a functional component i mean
04:11 - it's pretty straightforward or pretty
04:12 - self-explanatory we're going to use a
04:14 - function rather than a class now you're
04:16 - actually going to see why this is better
04:17 - it just really makes the code a lot
04:19 - cleaner
04:19 - it's a lot easier and it just is a more
04:22 - natural way to do things at least in my
04:23 - opinion so i do apologize we didn't use
04:25 - these but again this will teach you
04:26 - everything you need to know so we're
04:27 - going to start by saying export
04:29 - default just like we did before with our
04:31 - classes and then we're going to say
04:33 - function like this we're going to name
04:35 - the function so i'm going to name it
04:37 - what i would have named my class right
04:38 - in this case is just info so the name of
04:41 - the component
04:42 - then we're going to put inside of the
04:43 - brackets the props
04:45 - and then we're just going to open the
04:46 - curly braces like this and that
04:48 - is our component now all you need to do
04:50 - to actually make this a react component
04:53 - is to simply define a render method
04:55 - inside of here or sorry not render
04:57 - simply to return something inside of
04:59 - here and all we're going to do is just
05:00 - return
05:01 - jsx like we would have returned
05:03 - previously so this alone is a functional
05:06 - component if i go inside of here and i
05:07 - put like say an h1 tag and i return
05:11 - let's just return hello this is a
05:14 - component
05:15 - and if i want to use this component i
05:16 - use it the exact same way i used my
05:18 - class based components i can just put it
05:20 - inside of one of the classes i can do
05:22 - info and then i can pass whatever props
05:24 - i want i could pass like you know
05:25 - title equals i don't know let's just go
05:27 - with a string hello or something like
05:29 - that and this would be totally fine then
05:31 - we would access title from the props so
05:33 - from props dot title
05:35 - we could use that inside of our function
05:36 - now of course i'm going to show you how
05:38 - we do things like life cycle methods
05:40 - how we have state and how we actually
05:41 - have kind of like methods inside of here
05:44 - but that is the basics of functional
05:45 - components so already you can see this
05:47 - is a little bit cleaner we don't need to
05:48 - call the super or the
05:49 - parent constructor and yeah it just
05:51 - looks a little bit cleaner and nicer
05:53 - so anyways let's actually start by
05:55 - returning a little bit of jsx so i'm
05:57 - just going to return a grid inside of
05:59 - here so let's say
06:00 - return grid this is going to be a
06:02 - container it's going to have the spacing
06:05 - equal to 1 just like we've done
06:06 - previously
06:07 - inside of this grid we're going to have
06:09 - some grid items we're going to say grid
06:10 - item xs equals 12
06:14 - like that and we'll say align equals
06:18 - center we can end that grid and then
06:20 - inside of this first grid item
06:21 - let's simply put a typography um i guess
06:24 - component here so we'll say typography
06:27 - component is going to be equal to h4
06:29 - this will just be the title
06:30 - and then we're going to say variant
06:32 - equals h4
06:34 - and inside of here we'll just put what
06:35 - we want to label this page so i'll just
06:37 - say
06:37 - what is house party question mark like
06:41 - this is kind of the info page
06:43 - now before we go any further let's
06:45 - actually just render this component so
06:47 - we can kind of see how
06:48 - it works so let's go to our home page
06:50 - which i
06:51 - already have open but you guys know
06:52 - where that is and now what we're going
06:54 - to do is
06:54 - import this info component so we're
06:57 - going to go to the top of our program
06:58 - we're going to say import info from
07:02 - and then dot slash info like that
07:06 - now just like we've shown the cr join a
07:09 - room and create a room button on our
07:10 - home page and in fact let me just go
07:12 - here and i'll show you
07:13 - we have join a room and create a room in
07:15 - the middle of these two buttons what i'm
07:16 - going to do is put an
07:17 - info button and that way now you can
07:19 - press info and it will bring you to a
07:21 - different page which also means we're
07:22 - going to have to set up a route for this
07:24 - page but we can do that in a second
07:26 - so inside of our button group here let's
07:28 - create another button we can simply just
07:29 - copy this here
07:30 - and we'll put it right in the middle
07:32 - we'll call this one info
07:34 - we'll change the color to default which
07:35 - is kind of like a gray color
07:37 - and then we'll say rather than going to
07:39 - slash create let's go to
07:40 - slash info like that awesome now we have
07:43 - our
07:44 - info button so now we need to go down
07:46 - into our render method and we need to
07:47 - make a route
07:48 - for our info page or info component so
07:51 - right underneath where we have join and
07:52 - create in fact maybe it makes more sense
07:54 - to go right in the middle because that's
07:55 - kind of where we place the button above
07:57 - we're going to say route or route
07:59 - whatever you want to call it path
08:00 - equals slash info and then the component
08:04 - you guessed it is equal to info and
08:06 - that's all we have to do
08:08 - we're not going to pass any props to
08:09 - info but again if we wanted to pass
08:11 - props
08:11 - we could just do it like we had done
08:13 - right here then we could access the
08:14 - props inside of here using props dot and
08:17 - whatever the prop
08:18 - name was all right so now that we have
08:20 - that let's just add our url in the back
08:22 - end for slash info and then we can visit
08:24 - this and see what it looks like so
08:26 - far so let's go to front end let's go to
08:28 - urls.pi
08:29 - now inside of here let's make a new path
08:32 - so let's say path
08:34 - and i guess inside of here this is going
08:35 - to be info
08:37 - and this will just render index like all
08:39 - the other ones add our comma
08:40 - and now we should be good to go so let's
08:43 - go here
08:43 - let's refresh the page i'm going to have
08:45 - to empty cache and hard reload
08:47 - now we see that we have the info button
08:49 - showing up let's go ahead and press on
08:51 - that info button
08:52 - and there we go it renders this
08:53 - functional component for us which
08:55 - currently is just showing
08:56 - what is house party now obviously we
08:59 - need to be able to go back
09:00 - so now let's make a back button on this
09:02 - page so we can return back to the home
09:04 - page
09:05 - so this will be good this will show us
09:06 - how we actually deal with kind of like
09:08 - methods and stuff as well
09:10 - or in fact we won't need that for the
09:11 - back button but later on we will
09:13 - so now let's make a back button so let's
09:15 - just copy our grid item here
09:18 - and inside of here we're going to make a
09:20 - button i guess we'll say
09:22 - that the color of this button is going
09:24 - to be secondary
09:25 - we can say the variant is equal to
09:29 - contained and then 2 will be equal to we
09:32 - just want to go back to the home page so
09:33 - we'll just do a slash
09:34 - and then the component is going to have
09:36 - to be equal to the link because we're
09:38 - doing a redirect so we'll put link like
09:39 - that
09:40 - i think that's actually all we need for
09:42 - our button and oops sorry we need to
09:44 - label our button so let's go
09:46 - slash button and then inside of here
09:49 - we can name this one back awesome so now
09:51 - we have two great items
09:52 - we have our one that has the title and
09:54 - then we have the one that has the back
09:55 - button and this should redirect us back
09:57 - to the home page
09:58 - let's give this a quick look so let's
10:00 - refresh the page here
10:02 - now we see we get a back button when we
10:03 - press that boom brings us back to the
10:05 - home page
10:06 - awesome our info page is working well so
10:08 - we will continue in one second but we
10:10 - need to take a quick pause to thank the
10:12 - sponsor of this video and this series
10:13 - which is algo expert
10:15 - algo expert is the best platform to use
10:17 - when preparing for your software
10:18 - engineering coding
10:19 - interviews and personally helped me land
10:21 - a job at microsoft and get an offer from
10:24 - shopify even today i use algo expert
10:26 - just to practice my coding
10:28 - skills that the highest quality coding
10:29 - interview questions and really are just
10:31 - the best
10:32 - prep platform when looking to get a job
10:34 - as a software engineer so that said
10:36 - check out algo expert from the link in
10:37 - the description
10:38 - and use the code tech with tim for a
10:40 - discount on the platform
10:41 - all right so now we're going to start
10:42 - talking about how we can implement state
10:44 - inside of our functional components
10:46 - so inside of our class-based components
10:48 - we saw that we needed to define some
10:50 - attributes or we needed to define the
10:51 - set
10:52 - state variable or whatever you want to
10:53 - call it inside of our constructor and
10:55 - then inside of set state
10:57 - we put all the different names of the
10:58 - variables or piece of information that
11:00 - we wanted to hold
11:01 - and then we were able to update that
11:03 - state by using this dot
11:04 - set state now it's actually way easier
11:06 - to use state inside of a functional
11:08 - component
11:09 - i'll just kind of start doing it and
11:10 - then i'll explain what's actually going
11:11 - to happen
11:12 - or how this works so we're going to
11:14 - start by defining const so this is just
11:16 - like
11:16 - we're defining a variable essentially
11:18 - and then inside of here we're going to
11:19 - have an array
11:20 - we're going to put two things we're
11:22 - going to put the name of our state so
11:24 - whatever piece of information or
11:25 - whatever variable
11:26 - we want to hold our state is what we put
11:28 - first then we put the name of the
11:30 - function that we want to use to
11:32 - update this state variable so what i'm
11:34 - going to do is
11:35 - call this page the reason i'm calling
11:37 - this page is because i'm going to have
11:38 - two pages
11:39 - i want to have the first page which
11:40 - talks i guess about joining a room and
11:42 - then the second page which talks about
11:44 - creating a room
11:44 - so we need to keep track of which page
11:46 - that i'm on this is very similar to what
11:48 - we did when we worked on
11:49 - the settings page uh where we had you
11:51 - know it's either showing the settings
11:52 - page or it's showing
11:54 - the music controller whatever it was
11:56 - that was there but this is kind of a
11:57 - similar idea of what i'm trying to do
11:59 - here
11:59 - so i'm just going to say const page and
12:01 - then comma
12:02 - set page is equal to and we're going to
12:04 - use this hook which is called use state
12:06 - which we import above we're going to say
12:08 - use state and then inside of the
12:10 - brackets here
12:11 - we're going to put the value that we
12:12 - want to initialize this
12:14 - page variable or state variable to so in
12:17 - this case we can just initialize it to
12:19 - something simple like 1.
12:20 - i will make this a bit better in a
12:22 - second but this is how we actually set
12:24 - up state variables
12:26 - so now whenever i want to access the
12:28 - state i use the variable page
12:30 - and that will start by giving me one
12:32 - right because we used
12:33 - state and what use state returns is an
12:36 - initialization for this variable which
12:38 - is equal to whatever we put inside of
12:39 - the brackets
12:40 - and then a function which allows us to
12:42 - update the state
12:43 - for this variable now whenever we call
12:45 - this function
12:46 - we simply put inside of the parentheses
12:48 - so if i call
12:50 - set page like that and i set it to say
12:52 - page zero or
12:53 - page two this will force the component
12:56 - to re-render and then it will set page
12:58 - equal to two so hopefully that's clear
13:00 - but this is what you do whenever you
13:01 - create a state variable you wanna you
13:03 - know store some type of state
13:05 - so if we have multiple states that we
13:07 - want to store or state variables we
13:09 - would just do this multiple times with
13:10 - different default values
13:12 - inside of the use state i guess you
13:14 - could call it constructor or you call it
13:16 - parentheses or initialization or
13:17 - whatever you want
13:18 - but anyways that is how it works for
13:20 - state so now we're going to initialize
13:22 - the state to 1. but i actually don't
13:24 - want it to be 1 because that's kind of
13:25 - ambiguous right
13:26 - i want something to tell me what page
13:28 - i'm actually on
13:29 - so i'm going to do something which is
13:31 - kind of like creating an enum here
13:33 - which is going to make this a little bit
13:34 - more clear so i'm going to say const
13:36 - and then pages is equal to i'm going to
13:39 - open up some parentheses like this and
13:40 - i'm going to say join in all capitals
13:43 - and this is going to be equal to the
13:44 - string pages.join
13:47 - then i'm going to say create and this is
13:49 - going to be equal to the string
13:50 - pages dot create now the reason i'm
13:53 - doing this is i want to have this
13:54 - variable pages which has access to two
13:56 - things
13:57 - join and create join stores pages.join
14:00 - and create stores pages.create now it
14:03 - doesn't really matter what you make
14:04 - these strings you can make them zero and
14:05 - one so long as they're unique
14:07 - but this is kind of the convention you
14:08 - do whatever the enum name is and then
14:10 - whatever the value is in lowercases
14:13 - so that's what i'm doing for this and
14:14 - now what i'm going to do inside of use
14:16 - state is i'm going to say
14:17 - pages dot join so now what that's doing
14:21 - is accessing this pages.join string so
14:23 - page will really be equal to
14:25 - pages.join this string and then what i
14:27 - can do is when i want to update my
14:29 - page to be equal to create it'll just be
14:31 - a lot easier to read and i can say
14:34 - set page pages oops
14:37 - pages dot create like that and now it's
14:40 - really easy for me to tell what page
14:41 - that i'm on i'm on the join page or the
14:43 - great page i don't need to use zero or
14:45 - one
14:45 - it's not ambiguous and well i just
14:46 - prefer to do it that way so anyways now
14:48 - we have our state
14:49 - set up so what i want to do now is i
14:51 - want to show different things
14:52 - based on this state so if the state is
14:55 - the join page i want to show text
14:56 - related to the join page if it's
14:58 - create page i want to show that so let's
14:59 - make another grid item here
15:02 - let's do this so grid item we'll put
15:04 - this right underneath
15:05 - the typography or i guess above the
15:07 - button as well and inside of here now
15:09 - i'm just going to have another
15:11 - typography tag because we're going to
15:12 - have some text here
15:13 - so i'm going to say typography and we
15:16 - will say that
15:16 - the variant is going to be equal to body
15:19 - one you'll see what this looks like but
15:20 - it's like pretty equivalent to just your
15:22 - standard p
15:23 - tag in html then inside of here i'm
15:25 - going to say the following
15:26 - so i can never remember what this damn
15:28 - thing is called and you guys have told
15:29 - me so many times i think it's like the
15:30 - ternary operator or something
15:32 - i'm going to say page equal equal equal
15:35 - to pages
15:36 - dot join then what i want to do is show
15:39 - something
15:40 - otherwise i want to show something else
15:41 - so i'm just checking whether the current
15:43 - state is equal to pages.join or
15:45 - i guess in the other case pages.create
15:48 - now i'm going to show you how we can
15:49 - actually implement
15:50 - methods or quote unquote methods inside
15:53 - of our functional component
15:54 - all we have to do and we don't have to
15:56 - do this inside the functional component
15:57 - we can also do it outside
15:59 - is just define a function that's nested
16:01 - inside of this functional component so
16:03 - i'm going to say function
16:04 - and then i'm just going to call this
16:06 - first one join info
16:08 - and inside of here i'm just going to
16:09 - return join page we'll make this more
16:13 - complex in a second but just for the
16:14 - example
16:15 - i'll make another function i'm going to
16:16 - call this create
16:18 - info and inside of here i'm going to
16:21 - return
16:22 - create page now this is totally valid
16:25 - you may not have seen this before
16:27 - but you can definitely define functions
16:29 - inside of other functions
16:30 - and well that's exactly what i'm doing
16:32 - right here i've just defined two
16:33 - functions
16:34 - so here what's going to happen now is
16:36 - that we can use these two functions so i
16:38 - can use them inside of this ternary
16:40 - operator
16:40 - and they'll just return create page and
16:42 - join page but we also could access the
16:45 - state
16:45 - inside of these functions right because
16:47 - they're local to
16:48 - this um what do you call it this
16:50 - component now for these specific
16:52 - functions there's no need for me to
16:54 - really put them inside of this component
16:56 - yes it makes sense for me to do that
16:57 - but i also could fully just take them
16:59 - and place them outside of the function
17:01 - and that would be fine i could still use
17:02 - them from inside of here because they're
17:04 - defined within the same file
17:06 - now i know i'm going fast but hopefully
17:07 - that's clear that's kind of how you make
17:09 - methods quote unquote inside of your
17:11 - functional components
17:13 - of course if you define them inside of
17:14 - here they have access to the states and
17:16 - the props and everything else you might
17:17 - need
17:18 - so anyways let's go down here where i
17:19 - just started this ternary operator
17:21 - we're going to say if the page is equal
17:23 - to pages.join then we're going to call
17:25 - the uh not create the join info function
17:29 - and what this will do is just return
17:30 - some text to us and we'll just put that
17:32 - inside of this typography tag
17:34 - otherwise we'll call the create info
17:36 - page
17:37 - and this will do the same thing return
17:39 - some text and we'll put it inside of
17:40 - here
17:41 - all right so i think that's all good in
17:43 - fact let's just check this and make sure
17:45 - all is working so let's go here let's
17:47 - refresh
17:48 - now let's go to info we can see that by
17:50 - default we are on
17:51 - the join page now what i want to do is
17:54 - add a button that allows me to actually
17:56 - change my pages or update the state
17:59 - so to do this i am going to create an
18:01 - icon button inside of another grid item
18:03 - so i'm going to make another grid item
18:05 - here and then i'm going to define an
18:08 - icon
18:09 - button like that this icon button will
18:12 - have an
18:13 - on click so i'm going to say on click is
18:15 - equal to and then we'll just put an
18:17 - arrow function inside of here and in
18:18 - fact we can actually just write this
18:19 - arrow function out right now
18:20 - so icon button on click we will put the
18:23 - icon here in a second but what's going
18:24 - to happen when we press this button
18:26 - is we are either going to change the
18:28 - state of the page to be equal to the
18:30 - create page or the join page based on
18:32 - which one it was on
18:33 - so i'm going to say page equal equal
18:36 - equal
18:36 - to pages dot create question mark so if
18:40 - the page is equal to pages.create then
18:42 - what we're going to do
18:43 - is set page so we just use this set page
18:46 - function which again is defined in the
18:48 - state right here
18:48 - and you can call this anything you want
18:50 - by the way it doesn't have to be called
18:51 - set page
18:52 - uh and inside of here we're going to set
18:54 - this to be
18:55 - pages dot join and otherwise if it's the
18:59 - join page we need to go back to the
19:01 - create page so we're gonna say
19:02 - set page and then pages dot
19:06 - create like that awesome so now we just
19:09 - need to actually put an
19:10 - icon inside of this button now this is
19:13 - kind of repetitive but we're literally
19:14 - just going to do like the same thing
19:15 - that we did before
19:16 - i'm going to copy this ternary operator
19:18 - here i'm going to put it
19:20 - inside of squiggly brackets and now i'm
19:24 - just going to replace
19:25 - set page with what i actually want to
19:28 - show here instead so essentially we have
19:29 - two icons we either want to show the
19:31 - icon going forward or the icon going
19:33 - backwards so these two right here
19:35 - so if we are on the join page or on the
19:37 - first page so we should show the next
19:38 - icon
19:39 - if we are on the create page we're on
19:41 - the second page of the last page so we
19:43 - should show it the
19:44 - backwards icon or the before icon so if
19:47 - we're on the create page then we want to
19:49 - go
19:49 - back so we're going to say what is this
19:52 - one
19:52 - even called navigate before
19:55 - icon and then just close that one off
19:58 - like that
19:59 - otherwise we're going to show the
20:00 - navigate
20:02 - next icon like that awesome so that
20:06 - is actually all we need for this
20:07 - component again just to quickly go
20:10 - through what we did here we just have
20:11 - the icon button we have the on click to
20:13 - update the state
20:14 - it's totally fine that we're updating
20:15 - inside of here we don't need to call a
20:17 - function or method
20:18 - then right here we're just showing the
20:20 - different icon based on what page we're
20:22 - on and
20:22 - same thing here for showing the
20:23 - different type of text so let's refresh
20:26 - this page now
20:27 - let's go to info now we see we have this
20:29 - little forward icon when i press it we
20:31 - see create page
20:32 - icon changes now we go back now of
20:34 - course we could put some more meaningful
20:36 - text here
20:37 - i'm not for the purpose of this tutorial
20:39 - because there's no really need to do
20:41 - that
20:41 - but you guys are welcome to change this
20:43 - and mess around with that alright so the
20:45 - last thing that i'm going to show you is
20:46 - how we use the use
20:47 - effect hook now this is actually how we
20:50 - replace
20:50 - the life cycle method so component did
20:53 - mount
20:54 - component should update and i think
20:56 - there's another one i don't remember the
20:57 - exact name of it
20:58 - but anyways the three methods that are
21:00 - called right after your component
21:02 - for the first time is rendered that's
21:04 - what this use effect method will do or
21:06 - that's kind of the
21:07 - functionality that it's replacing so to
21:09 - make this more clear if i go to say
21:11 - musicplayer.js i believe we have oh
21:14 - actually it's not inside of here i guess
21:15 - it's in room.js
21:17 - inside of room.js we have these methods
21:19 - right component did mount component will
21:21 - unmount
21:22 - now i'm not going to be showing this one
21:24 - in this video but i will show you how we
21:25 - replace
21:26 - this if we want to do this kind of
21:28 - things we want to have
21:29 - some kind of activity that happens
21:31 - immediately
21:32 - the first time the component is mounted
21:34 - or when the component is updated
21:36 - then what we need to do is use the use
21:38 - effect hook to replace
21:39 - this function so if we go inside of
21:41 - info.js
21:42 - what i can do now it doesn't matter
21:45 - where i do it is i can define the
21:46 - following i can say use
21:48 - effect like this and inside of use
21:51 - effect i put a function that i want to
21:53 - run as my component did mount or my
21:56 - component should update
21:57 - or all of those kind of initialization
22:00 - methods or life cycle methods in react
22:02 - so what i'm going to do is i'm just
22:03 - going to put an arrow function inside of
22:05 - here
22:06 - and now i'm going to start coding out
22:07 - what i want to happen so
22:09 - i don't really need to do anything in
22:11 - particular in here there's nothing that
22:12 - makes sense to do in this component
22:14 - but this is where we would call any uh
22:16 - you know api endpoints or whatever we
22:18 - need to do
22:18 - to kind of update or initialize the
22:20 - component so anyways i
22:22 - well i guess i'll just do kind of a
22:23 - console.log so i'll just say console.log
22:26 - ran and now we can just see that this is
22:28 - going to run every time the component
22:29 - updates and
22:30 - every time that we first mount the
22:32 - component so let's go to info we can now
22:34 - see that rand
22:36 - pops up here now when i go to the next
22:37 - page rand pops up again
22:39 - and every single time the component
22:40 - updates or something changes
22:42 - whatever happens in or whatever's stated
22:45 - inside of use effect is going to run so
22:46 - whatever function we give here
22:48 - will run all right so i lied i actually
22:50 - am going to show you how we implement
22:52 - component will on mount because that's
22:53 - important
22:54 - and i just forgot that i was going to
22:56 - show that but anyways i just want to
22:57 - clarify again the use effect
22:59 - all of the stuff that happens inside of
23:01 - the body of this function
23:03 - is what would happen if we hooked into
23:05 - the lifecycle methods component did
23:07 - mount
23:08 - component will mount and component will
23:10 - unmount
23:11 - now i don't know if i showed all of
23:13 - those but essentially if you want to
23:14 - perform any of those types of operations
23:16 - or you would want to hook into any three
23:18 - of those lifecycle methods
23:19 - you just use use effect and it's
23:21 - equivalent it just does
23:22 - all three of them for you hopefully
23:25 - that's clear i'm having trouble really
23:26 - articulating that properly
23:28 - but it does all three of those kind of
23:30 - you know initialization operations for
23:32 - you it just takes care of all of them
23:34 - now if we want to do a component will
23:37 - unmount
23:38 - we also need to use use effect but in a
23:40 - different way
23:41 - so if we return a function from use
23:43 - effect so if i just return
23:45 - an arrow function like this and all it
23:47 - does is just simply
23:48 - console.log cleanup like that
23:51 - then what's going to happen is when this
23:53 - component unmounts
23:55 - this function that we returned from use
23:57 - effect will be called
23:58 - and in fact after the component updates
24:01 - uh this function will be called as well
24:04 - so what this does is essentially
24:06 - implements a cleanup
24:07 - operation so use effect allows us to
24:10 - return some function
24:11 - from the function that we pass it and by
24:13 - doing that it will automatically call
24:15 - this function for us
24:17 - in turn for component will unmount right
24:20 - so it's kind of
24:20 - implementing that component will unmount
24:22 - functionality
24:23 - because after the component unmounts
24:26 - well we need to do
24:27 - this behavior so this is kind of the
24:29 - same thing we're just returning a
24:30 - function that function will
24:32 - be called when the component unmounts so
24:34 - hopefully that's clear but that's kind
24:36 - of how you use
24:37 - use effect to implement those four life
24:39 - cycle methods
24:40 - i would encourage you all to kind of
24:41 - look up the documentation for this
24:43 - because my explanation is not as good
24:45 - as i would like it to be but anyways let
24:47 - me just show you how this works
24:48 - so now i'm going to go back to my app
24:50 - here i'm just going to refresh
24:52 - and now you can see it says ran cleanup
24:54 - and then ran
24:55 - now when i go back you see the cleanup
24:57 - operation happens that's equivalent to
24:58 - component
25:00 - will unmount or component did on mount
25:01 - or whatever now i'm going to go back to
25:03 - info
25:04 - we see that ran runs now after i update
25:07 - the component
25:08 - cleanup will run automatically then ran
25:10 - will run
25:11 - then when i go back the cleanup
25:13 - operation will run so
25:14 - hopefully that's clear on how that works
25:16 - but we're not cleaning up when we
25:17 - initially mount the component
25:19 - we're only cleaning up every time we
25:21 - update the component
25:22 - and every time the component unmounts so
25:25 - that is what happens when you return a
25:27 - function
25:27 - from use effect it gets called kind of
25:29 - in that order
25:31 - so anyways i think i'm going to end the
25:32 - video here hopefully this was clear this
25:34 - was kind of a quick overview of how you
25:36 - use functional components
25:37 - there is a lot more to get into with
25:39 - this but again this is not the purpose
25:40 - of this tutorial series just wanted to
25:42 - show you guys how these work
25:43 - hopefully you found it valuable and
25:45 - again hopefully you enjoyed this series
25:47 - so if you did make sure to leave a like
25:48 - subscribe to the channel and i will see
25:49 - you in another youtube video
25:59 - you