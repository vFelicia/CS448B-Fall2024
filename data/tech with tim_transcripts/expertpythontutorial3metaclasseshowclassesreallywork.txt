00:00 - hello everyone and welcome back to the
00:01 - Python expert tutorial series what we're
00:03 - gonna be doing in this video is covering
00:04 - metaclass is a fairly complex but very
00:07 - interesting topic in Python so we're
00:09 - gonna start from the very beginning and
00:11 - start understanding how classes are
00:12 - actually created instantiated the way
00:15 - they work on a lower level in Python and
00:17 - then from there we're gonna move into
00:18 - what medic classes are how they actually
00:20 - work and why we would even want to use
00:23 - them now I'm just gonna preface this
00:25 - video by saying meta classes are an
00:26 - extremely complex thing I'm only gonna
00:28 - be showing kind of the basic
00:30 - implementation of meta classes here if
00:32 - you really do want to use these you're
00:34 - gonna have to look up the documentation
00:35 - and implementation details on your own
00:37 - and there's very few instances in which
00:39 - you need a meta class a lot of what I'm
00:41 - about to show you can be accomplished in
00:43 - other ways and typically you're gonna
00:45 - want to use another way other than a
00:46 - meta class just because these are seen
00:48 - as very complicated and almost sometimes
00:50 - bad practice depending on what you're
00:52 - trying to do so these should really only
00:54 - be used by experts I mean I'm showing
00:55 - them to you guys you can get an
00:56 - intuition on how they work and if you
00:58 - see one you'll understand what it does
01:00 - but you shouldn't really be putting
01:02 - these into your own code and using them
01:04 - unless you absolutely need to so before
01:06 - we get into the content again a quick
01:07 - thank you to kite for sponsoring this
01:09 - video series they have a download link
01:11 - in the in the description down below you
01:13 - can download them for free they are
01:15 - essentially a very good Python
01:17 - autocomplete so you can see if I start
01:18 - typing some things like this we get a
01:20 - kite completion thing popping up and
01:22 - anyways that's what they are they're
01:23 - free you can download that from the link
01:24 - in the description all right so let's go
01:26 - ahead and get started now the first
01:29 - thing that I want to do is really
01:30 - discuss how classes work and what
01:32 - classes are so we saw in the previous
01:35 - example and I believe two videos ago I
01:37 - did something crazy like this right and
01:39 - I made a class and I defined it inside
01:43 - of a function and then in that function
01:44 - I actually just returned the class
01:46 - itself and this is totally fine this is
01:49 - valid syntax you can see I just ran the
01:50 - code down here we don't get any errors
01:52 - that's fine the reason we can do
01:55 - something like this in Python and not in
01:57 - other languages is because in Python
01:59 - classes are actually objects now the
02:02 - property of an object essentially means
02:04 - that we can interact with it at runtime
02:05 - we can pass it around through parameters
02:08 - through variables we can store it we can
02:10 - save it we can modify it we can interact
02:12 - right that's what
02:13 - object it's now a lot of people are
02:15 - gonna say well how is a class an object
02:17 - I thought a class created objects for us
02:20 - well that's very true a class that does
02:22 - create objects for us but that doesn't
02:25 - mean that it's not object itself and if
02:27 - a class is an object if you believe what
02:29 - I'm saying and I'll prove it to you in a
02:30 - second then that means we must have had
02:32 - some higher-level class that created
02:34 - that object for us right just like if I
02:37 - make an instance of hi can I do
02:38 - something like that that means we must
02:40 - have this class high such that we can
02:42 - make an object you know and have the
02:44 - instance for it so what we're gonna be
02:47 - getting into here with meta classes is
02:48 - the basic idea is a class defines the
02:52 - rules for an object right defines the
02:53 - attributes the parameters the methods
02:55 - the things that are allowed the
02:56 - operations that can be performed that's
02:58 - what a class does for an object what a
03:01 - meta class does is define the rules for
03:03 - a class so when you create a class you
03:06 - will use the meta class to create it
03:08 - this happens automatically don't need to
03:10 - type anything specifically but we're
03:11 - gonna hook into it later and see how it
03:13 - really operates and that meta class
03:15 - defines how this class is created and
03:18 - that's the basic concept here so I'm
03:20 - gonna make another class and I know this
03:22 - is confusing but as we go through you're
03:23 - gonna start to slowly understand what
03:25 - these examples and all I'm gonna do is
03:28 - just print an instance of this class so
03:30 - let's look at it we can see this tells
03:32 - us this an object main test object at
03:35 - some gibberish location so now let's
03:37 - print above this just the class itself
03:40 - okay look at that class main test now
03:45 - the reason we're able to do this again
03:46 - is because this is an object so I know
03:48 - this doesn't explicitly say object but
03:51 - this class is an object now I want to
03:53 - look at something else so we know we
03:55 - have this method in Python called type
03:57 - and I can look at the type of a class or
04:01 - an instance or an object I see what it
04:02 - is so let's look at it when we do the
04:04 - type of test we get that is in class
04:06 - mean if I were to print say the type of
04:09 - an integer right like the type of -
04:13 - let's have a look that's class int right
04:15 - and we can print you know the type of
04:16 - whatever we want when you print the type
04:18 - of a function so we say define func like
04:23 - that and then just we'll just say pass
04:24 - and
04:25 - and we do funk what's that that's class
04:28 - function right so that exists in a
04:29 - function so this is an object this
04:31 - functions an object everything in Python
04:33 - is an object and that means they have a
04:34 - type and neighbor created somehow so
04:37 - what is the type of a class well let's
04:40 - look at it
04:41 - so we'll delete all this and then with
04:43 - this print the type of and I somehow get
04:48 - insert accidentally there of test so
04:51 - what do you think this type is is it of
04:53 - type test is this class of that type no
04:56 - it is of class type now I know this
04:59 - seems ridiculous this means nothing to
05:00 - you right now we're gonna dive into what
05:02 - this is but essentially this is what we
05:03 - would refer to as the metaclass so this
05:06 - type is what essentially defines the
05:09 - rules and creates this class for us we
05:11 - type this class syntax we will call a
05:15 - type constructor using the different
05:18 - things in our class to make this class
05:20 - object that we can then use to make
05:22 - objects and use to interact with in the
05:23 - program so what is type how does this
05:26 - type thing work well if I told you that
05:29 - this class all this is doing this syntax
05:31 - is just calling this type class then we
05:34 - should explicitly be able to create our
05:37 - own objects without typing out the
05:38 - syntax like this we should just be able
05:40 - to use the type class itself which is
05:42 - true and what I'm about to show you so
05:44 - I'm just create a class test it has
05:46 - passed it has nothing in it right now
05:48 - I'm gonna show you how we can make this
05:49 - without actually having to type this
05:51 - kind of syntax and writing out class in
05:53 - fact and this seems ridiculous I agree
05:56 - Python should have done a better job
05:57 - when they define this but I believe it
05:58 - something to do with just backwards
06:00 - compatibility we can make a class by
06:03 - doing this and just watch and then we'll
06:04 - talk about exactly how it operates
06:08 - so this line of code is completely
06:12 - equivalent to this these two things are
06:16 - completely equivalent there's absolutely
06:18 - nothing different about them and I can
06:20 - use tests here the same way I can use
06:22 - tests here just like I can create an
06:24 - instance of tests I can create an
06:26 - instance of this other test so let's do
06:27 - it
06:28 - let's let's just prove it to you so if I
06:30 - print test and make an instance boom
06:33 - main test object works totally fine no
06:35 - issues with that what else can I do I
06:37 - can print the class
06:38 - again same thing we have that object
06:40 - totally fine that's because this
06:42 - function here essentially creates the
06:45 - class for us using these different
06:48 - arguments a name this is the internal
06:51 - representation of the class any basis
06:53 - which means anything that we inherit
06:55 - from just like a superclass or a parent
06:58 - class and then any attributes so let me
07:00 - start showing you what I mean and then
07:02 - hopefully this should make some more
07:03 - sense so I'm gonna set an attribute of
07:04 - five I'm gonna say key people's test
07:07 - make an instance and just print that
07:10 - attribute your like this of T dot X so
07:14 - just like this works on a regular class
07:15 - we can do that we get our value five now
07:18 - just like in regular classes as well I
07:20 - can define attributes outside of the
07:21 - class so they say something like T dot W
07:25 - why why not set that equal to let's just
07:28 - say hello want to print W why sure let's
07:31 - go for it
07:32 - oh t wy one second guys oh t is not
07:38 - defined so that needs to go above so I
07:40 - can explain metaclasses but apparently
07:42 - cannot just create regular classes okay
07:44 - so that's totally fine that works we
07:46 - have T equals test and then Twi equals
07:48 - hello we can print that out tribute
07:50 - that's totally fine so that's how we can
07:51 - create classes using type
07:53 - now what about methods what about sub
07:54 - I'm going to show you all that so we'll
07:56 - do that now
07:57 - and then we'll get into actually meta
07:59 - classes and how this is even useful to
08:01 - us so what I'm gonna do is make another
08:02 - class it's gonna call this class foo
08:04 - let's just make a method in here just
08:06 - called print actually not print let's do
08:09 - like show and then all we'll do in here
08:11 - is take one attribute we'll say self and
08:12 - just print hi why not right just do that
08:17 - so if I want to now have an inheritance
08:20 - what I can do is simply type the name of
08:23 - the class a comma just to make sure this
08:25 - registers as a tuple here and now test
08:27 - one hair it from foo which means that if
08:29 - I want to use the method show I can do
08:31 - that and I can run that like that and we
08:33 - get that now I shouldn't have printed
08:34 - that out because I forgot that wasn't a
08:36 - return value but you can see we get hi
08:38 - that works totally fine this is how you
08:40 - do this right now what if I want you to
08:42 - add methods right so to add a method is
08:44 - a little bit different but essentially
08:45 - what you gonna do is just define a
08:46 - function that will be the method
08:48 - signature so in this case let's say
08:50 - you know add attribute put self like
08:54 - that then here we just say self dot Z
08:57 - equals nine why not right we'll do that
08:59 - and then in here we'll define our
09:02 - attributes we'll say add underscore
09:04 - attribute cooling guess what we're gonna
09:06 - do add attribute no brackets now make
09:10 - our instance let's call T dot add
09:12 - attribute and then let's print T dot zip
09:17 - like that let's look at this and there
09:20 - we go we get the value nine that works
09:21 - fine so this is how we use type this is
09:24 - how we create a class and this is very
09:26 - important to understand as we get into
09:27 - the next part of the tutorial here
09:29 - because if you can understand how we use
09:31 - this to create our own classes then
09:33 - you're gonna understand the next part
09:34 - and why when we have a syntax like this
09:37 - all this really does is pass that
09:40 - information to another class called type
09:43 - that creates the class for us and
09:45 - returns an object that represents that
09:47 - class I know this was a lot I hope this
09:49 - you guys understand at this point now
09:51 - we're actually gonna get into
09:52 - metaclasses this was just the underlying
09:53 - information we need to understand
09:55 - alright so welcome to the next part of
09:57 - the tutorial we're gonna be doing now is
09:58 - actually getting into metaclasses and
10:00 - showing how they work so again the basic
10:02 - principle here is to remember that a
10:04 - meta class is above the classes you're
10:06 - creating yourself so if you create
10:08 - something like class dog right and you
10:10 - do that what's actually happening is all
10:12 - this information that you type out the
10:14 - syntax gets passed to some meta class
10:17 - the thing above it that actually takes
10:19 - that and returns to you an object that
10:22 - represents that class and that's the
10:23 - whole point here so what we're gonna do
10:25 - is actually make our own meta classes so
10:27 - rather than using that built-in type
10:28 - class and you can see on all of our
10:30 - objects when we looked at the type of
10:32 - them they were of type type we're simply
10:35 - going to make our own meta class that
10:36 - inherits from type so does a very
10:38 - similar thing but we're gonna change
10:41 - slightly how objects are constructed so
10:43 - you can really understand how this works
10:44 - now you might get lost a little bit the
10:46 - beginning when I start typing some of
10:47 - this stuff out but hopefully you should
10:49 - start to follow along as we go through
10:51 - and explain how all this works so let's
10:53 - get started I'm gonna start just by
10:55 - creating a meta class I'm gonna call
10:56 - this met now whenever you make a meta
10:58 - class what you have to do is make it
11:00 - inherit from type not necessarily but
11:03 - for our purpose
11:04 - that's what we're gonna say it has to
11:05 - inherit from type to make a meta class
11:07 - the reason for that is because type does
11:09 - some other things when it's creating an
11:11 - object right and if you don't inherit
11:13 - from this well your class is just gonna
11:15 - be not a meta class now because it's
11:17 - gonna be using type to create this kind
11:19 - of class if that makes any sense
11:21 - whatsoever but hopefully that does what
11:24 - we're gonna do now is I'm actually gonna
11:25 - define a new method like this and for
11:28 - those of you that don't know what new
11:30 - does as a dunder method or a magic
11:32 - method like we talked about before
11:33 - essentially this is called before the
11:35 - anit method so this is the first thing
11:37 - that is always called when a object is
11:39 - created or in stance or whatever you
11:41 - want to call it this is always called
11:43 - first so what you can actually do here
11:45 - is hook into this and modify the way an
11:47 - object is constructed by changing what
11:50 - happens in this new method whereas the
11:51 - Annette's all the init is doing is after
11:54 - this new method gets called and the
11:56 - object is constructed what it does is it
11:58 - initializes it changes the values that
12:01 - take some parameters in like that's what
12:03 - it does right whereas new it's just
12:05 - called before hand to modify the
12:07 - construction of the object okay so what
12:09 - I'm gonna do in here as a moment to take
12:11 - self I'm going to take class name and
12:14 - remember this is what's gonna be called
12:15 - whenever we create another class that
12:17 - uses this as a meta class or it's a
12:19 - class name we're going to save faces and
12:22 - bases is what we put remember in that
12:24 - type argument when we want to do
12:25 - inheritance we have the name we had the
12:28 - basis and we have the attributes and
12:29 - guess what this last one's gonna be it's
12:31 - gonna be attributes so essentially we're
12:33 - saying ok when we create this new method
12:36 - the construction of a class which
12:39 - happens in this meta class needs to
12:41 - contain the class name the bases and the
12:43 - attributes so that that way we can look
12:45 - at them we can do something with them
12:46 - and we can return to you a class that
12:47 - has those pieces of information right as
12:49 - an object so what I'm gonna do now is
12:52 - simply just return the type of in this
12:56 - case it's gonna be class underscore name
12:58 - basis and attrs
13:00 - now this is very simple we're not really
13:02 - gonna do anything other than this but
13:03 - I'm else we're just going to print out
13:05 - the attributes so you can see what they
13:09 - look like ok now what I'm gonna do is
13:11 - gonna make another class we're gonna
13:12 - call it dog this is gonna have a meta
13:15 - class
13:16 - that's equal to met like that and then
13:21 - in here all we'll do is just say X
13:23 - equals 5 y equals 8 just so we can look
13:25 - at some things when we print these
13:26 - attributes out and then we'll create an
13:28 - instance or dog so we'll say D equals
13:30 - dog like that and run the code alright
13:34 - so look at this what is happened
13:36 - well actually I'm even gonna get rid of
13:38 - this and just show you that even if I
13:39 - don't create an instance this still runs
13:41 - where you can see no instances this is
13:43 - still running the reason for this is
13:45 - because the default meta class of dog is
13:47 - type right that's what it runs and
13:50 - that's how class is created we've done
13:52 - is we've overridden that we've changed
13:54 - it to our own metaclass and essentially
13:56 - we've added our own little piece here
13:59 - that just prints out the attributes and
14:00 - then returns to us an object and member
14:03 - this is an equivalent way of creating
14:04 - this class by just literally typing this
14:06 - line and this is what happens this is
14:08 - what we get so we can see that we have
14:10 - the attribute module is equal to main
14:11 - the cual name dog so that's the name of
14:14 - this class right and then we have our
14:16 - attributes so X 5 y 8 that we've defined
14:20 - down below now what if we define a
14:22 - method call to low and we print say hi
14:27 - inside of here well then you can see we
14:31 - have dog dot hello at some memory
14:33 - location that's mapped to by hello and
14:35 - that's a function so that's how this
14:37 - works
14:37 - now knowing this information metaclasses
14:40 - can be very powerful because for example
14:42 - let's see like I can hook into the
14:45 - construction of this class and I can
14:47 - modify the construction of it if I want
14:48 - now this is something you would never do
14:50 - what I'm going to do is actually change
14:52 - all of the attributes that I have here
14:55 - to be what do you call uppercase so I'm
14:59 - gonna change this X to be a capital X
15:00 - this Y to be a capital y and this
15:02 - function hello to be capital hello so
15:05 - all capitals I won't bother changing I
15:07 - can't change these underscore methods
15:08 - but I'll show you how we do this okay so
15:11 - let's start programming this so what I'm
15:13 - gonna do is I'm going to make a blank
15:15 - diction I'm just gonna call it a there's
15:17 - notice down here that all of my
15:18 - attributes are actually in a dictionary
15:20 - right so what I'm gonna do is modify
15:22 - this attributes dictionary based on the
15:24 - attributes that we're passed in and make
15:26 - them all Capitol assuming that they're
15:28 - not they don't
15:28 - with two underscores so I'm going to say
15:30 - for item in ET TRS dot items and I'm not
15:34 - sure the syntax is 100% correct so there
15:35 - might be a mistake here we're going to
15:37 - say if item dot starts with and in this
15:41 - case it's gonna be underscore underscore
15:43 - then what we'll do is simply just add it
15:46 - back into the dictionary actually yeah
15:48 - we'll just add it back into the
15:49 - dictionary so we'll say a in this case
15:51 - item equals attrs and then item like
15:56 - that
15:56 - so essentially since this dictionary the
15:58 - way this is gonna work right is we're
15:59 - just assigning this item to this new
16:01 - dictionary it just literally the same
16:03 - thing right okay otherwise so if it
16:05 - doesn't start with a double underscore
16:06 - we need to change it to be uppercase so
16:08 - we're going to say a and in this case
16:10 - item dot opera-like that equals attrs
16:15 - item then we'll change the attributes
16:17 - here to be a which will be our modified
16:19 - attributes and that means when we return
16:21 - this dog class this should work assuming
16:23 - I haven't made a mistake which is likely
16:24 - but let's look at it and let's see what
16:26 - we got wrong all right so I guess I've
16:29 - forgotten the fact that when we do
16:30 - something like this I need to actually
16:31 - loop through with name value rather than
16:34 - just item so name will be the attribute
16:36 - name and value obviously the value
16:39 - mapped with it just means we're gonna
16:40 - have to change a few things here it'll
16:42 - say name so having to do that we can
16:43 - change that to Val you could say name
16:45 - and this yeah some name here this will
16:48 - be Val I think that's and I think we
16:51 - should be good on that front let's run
16:52 - that and let's have a look at this error
16:54 - named Val is not defined of course I've
16:57 - made it value let's run and there we go
16:59 - we get good okay so let's I'd haven't
17:03 - proved to you really what happened but
17:04 - let's just was step through this coax I
17:05 - did make a few errors so might be
17:07 - confusing so we started by printing the
17:09 - attributes we then made a blank list a
17:11 - blank dictionary story that's gonna
17:13 - represent our new attributes then we've
17:15 - looped through all of the attributes so
17:16 - we just do dot items to get the name and
17:19 - value and we said if the name starts
17:21 - with a double underscore just add the
17:23 - proper value back in otherwise what
17:25 - we'll do is add the uppercase attribute
17:27 - with that corresponding value so we've
17:29 - changed them to upper to uppercase
17:31 - essentially so let's actually print the
17:33 - values down here so the new value just
17:35 - have a look at the difference and you
17:36 - can see if we scroll up here that notice
17:40 - hello has been changed to cap
17:42 - hello X to capital X and y to capital y
17:45 - so now let's do another proof just to
17:47 - make sure that all of you believe me
17:49 - that this is okay to do and let's go
17:52 - down here and say D equals dog create
17:55 - instance and let's try to say see what
17:57 - DX is so just print DX well what is the
18:01 - error let's look at this here dog object
18:04 - has no attribute X what's but we defined
18:07 - X up here that's because we've changed
18:09 - it to be a capital X and notice that
18:12 - when I do that that's totally fine and
18:13 - same goes with below I can't access that
18:16 - but when we change that to capital below
18:18 - we're totally fine because again we've
18:21 - modified the construction of the object
18:23 - all right so now that we kind of
18:25 - understand how metaclasses work we've
18:27 - seen that we can hook into them we can
18:29 - change the way that objects are created
18:31 - we can force certain constraints I can
18:32 - change all of the attributes to be
18:34 - capital I can do whatever I want right I
18:37 - could change the basis I could remove an
18:39 - inheritance if I didn't want that to be
18:40 - allowed essentially this is why they
18:44 - call it magic because with this kind of
18:46 - hook into the creation of classes you
18:48 - can really enforce quite a bit of
18:50 - constraints on how classes are created
18:52 - so for example if you want every single
18:55 - class in a specific module to never be
18:57 - allowed to use a certain attribute or to
18:59 - only have or to have to have that
19:01 - attribute you could set meta classes for
19:04 - those are for that actual specific
19:06 - module which I'm not going to talk about
19:07 - now and then when that modules run it
19:10 - will check the metaclass right it will
19:12 - go through the metaclass that's how we
19:13 - create the classes itself and make sure
19:16 - that all of these classes kind of
19:17 - conform to that structure that you've
19:19 - defined now this is specifically nice
19:21 - for when you're writing kind of library
19:23 - code and you want your user code to be
19:25 - very specific let's say they're
19:26 - inheriting from a specific type you
19:28 - could check if they're inheriting from
19:30 - you know whatever type it is that you
19:31 - want if they do inherit from that type
19:33 - you can enforce the fact that they have
19:35 - a specific function or specific method
19:37 - in that class that's needed to make that
19:39 - work so that's some of the things that
19:41 - you can do with meta classes again
19:44 - they're very complicated there's not
19:45 - really like a need to use them so you
19:47 - don't necessarily need to implement them
19:49 - into your program but sometimes they're
19:50 - cool and understanding how this class
19:52 - construction works to me is even a
19:54 - better benefit
19:54 - using the metaclass itself so I believe
19:57 - there was one last thing that I wanted
19:59 - to cover here although it's not comment
20:01 - to me at the top of my head I mean I
20:03 - think that's pretty much it I don't know
20:05 - what more more I can show you guys you
20:07 - can have meta classes that inherit other
20:09 - metaclasses you can do very very complex
20:12 - things with that but I think honestly
20:14 - for now we're gonna wrap the video up at
20:15 - this I hope you guys enjoyed I hope you
20:18 - understand now how classes are created
20:19 - how a meta classes work and what the
20:22 - heck they even are and I hope that you
20:24 - understand that you don't need to use
20:26 - this and the point of this video is to
20:28 - introduce you the concept and make you
20:30 - more familiar with the way that classes
20:31 - and objects actually work in Python so
20:34 - anyways that has been it I hope you
20:35 - enjoyed make sure you leave a like if
20:36 - you did subscribe to the channel and I
20:38 - will see you in another expert Python
20:39 - tutorial