00:00 - today I'm giving you an introduction to
00:02 - a fantastic module known as streamlet
00:04 - now streamlet is something that we can
00:06 - use to really quickly build interactive
00:08 - user interfaces in Python it's really
00:10 - designed for working with databased
00:12 - applications things like llms machine
00:15 - learning data science but in truth you
00:17 - can use this for pretty much anything
00:19 - now over my 10 years working with python
00:21 - this is one of the best modules that
00:23 - I've used and it's definitely the
00:25 - easiest and fastest way to spin up a
00:27 - really quick website that can interact
00:29 - with your python application so with
00:31 - that said let's get into the video let
00:33 - me tell you a bit more about what
00:34 - streamlet is and then we'll build a
00:36 - sample application that will go over
00:38 - some of the core features so you can
00:39 - learn how to use it and then go and
00:41 - implement it in your own applications so
00:43 - here's a quick look at the application
00:45 - we be building you can see that we have
00:47 - a file import here so I've just imported
00:49 - a CSV it gives us a preview of what the
00:52 - data looks like in the different values
00:54 - gives us a summary of the data so you
00:56 - can see that it tells us the mean
00:57 - standard deviation minimum maximum value
01:00 - Etc allows us to filter the data so in
01:02 - this case I've selected City and then I
01:04 - can filter this by the city so in this
01:06 - case I could look at say New York and
01:08 - then we can actually plot the data here
01:09 - as well so I can plot the date against
01:11 - the temperature for the New York data
01:14 - and there you go we get a nice chart now
01:16 - believe it or not this entire thing is
01:17 - made in about 40 lines of code so let's
01:20 - go over to the code editor start
01:22 - installing streamlet and I'll show you
01:23 - how we Implement all of these different
01:25 - components so in order to use streamlet
01:27 - we need to install it so the first step
01:29 - here is to use use pip from our command
01:31 - line or terminal to install streamlet so
01:33 - what we're going to do is open up
01:34 - something like vs code which I have
01:36 - right here and then type pip install
01:39 - streamlet now I'm going to go with Pip 3
01:41 - because I'm running on Mac if you're on
01:43 - Mac or Linux it'll be pip 3 and if
01:45 - you're on Windows it will simply be pip
01:47 - so let's go ahead and run that command
01:49 - and if for some reason your pip command
01:50 - does not work as always I'll leave two
01:52 - videos on the screen that will show you
01:54 - how to fix this now after we install
01:56 - streamlet we're going to install a few
01:58 - other modules as well so we're going to
01:59 - install pandas because we need that for
02:01 - this specific tutorial and Matt plot lib
02:04 - which will allow us to create some
02:05 - charts so let's install those as well
02:07 - you can see I already have them
02:09 - installed okay so once streamlet is
02:11 - installed we can test it out and in
02:13 - order to test it out we can type
02:14 - streamlet and then hello now if this
02:17 - command works it means streamlet is
02:19 - running successfully and this should
02:21 - open up a browser tab for you and show
02:23 - you some output here in your terminal
02:25 - now in order to close this you can hit
02:26 - contrl C on your keyboard that should
02:29 - stop that and then we can move on to
02:31 - creating our own streamlit application
02:33 - now for our first application we're
02:35 - going to begin by making a python file
02:37 - which I've done right here main.py and
02:39 - then we're going to import streamlet so
02:40 - I'm going to say import streamlet as St
02:44 - and we're going to spell streamlit
02:45 - correctly just that we have a short form
02:47 - here and we don't need to type streamlet
02:48 - every single time now the first command
02:50 - to be familiar with here is
02:52 - st. write now this is kind of a magic
02:56 - command and what I mean by that is that
02:57 - you can pass pretty much anything to
02:59 - right and it will automatically use some
03:02 - defaults from streamlet to plot it on
03:04 - the screen so whether this is a string
03:06 - like hello world or whether you want to
03:08 - pass maybe an array or you want to pass
03:10 - an object or you want to pass a panda's
03:12 - data frame you can pass pretty much
03:14 - anything here and it will automatically
03:16 - be written for you so let's go with
03:17 - something really simple like hello world
03:19 - and let's see how we would run this
03:21 - application using streamlet so to do
03:23 - that we're going to open up our terminal
03:25 - and we're going to type streamlet run
03:28 - and then the name of our app which in
03:30 - this case is
03:31 - main.py now notice I'm in the same
03:33 - directory where my file is that's why
03:35 - this will work we're using streamlet run
03:37 - passing our script and then this should
03:39 - open up a browser window for us that has
03:41 - the UI that we specified so let me open
03:43 - up the browser here it's just on my
03:45 - other screen and you can see that we
03:46 - have hello world now if we go back here
03:49 - and we decide to change our code while
03:51 - this is running so st. WR and let's
03:53 - write maybe an object where we say key
03:57 - and we have maybe an array here that
03:59 - says value
04:00 - and I save if you notice when you come
04:02 - back here you'll see that it says the
04:04 - source file has changed and we have
04:06 - rerun and always rerun as options if you
04:09 - want it to automatically rerun and
04:10 - update anytime you change the source
04:12 - file you can click on always rerun if
04:14 - you just want to rerun it manually you
04:16 - can click on rerun notice when I do that
04:18 - it displays this kind of Json or python
04:21 - object value for me and that's the magic
04:23 - of using this st. write command that can
04:26 - pretty much write anything that you want
04:28 - now if you want more customization ation
04:30 - you can use specific functions that will
04:32 - write maybe different widgets like
04:33 - sliders or you can have some more
04:35 - control over writing like a line chart
04:37 - or a table and I'm going to show that to
04:39 - you in one second now as you can see
04:41 - here you really don't need to be a web
04:43 - development expert in order to create
04:44 - something cool with python however if
04:47 - you're interested in strengthening your
04:48 - overall programming and problem solving
04:50 - skills our sponsor brilliant can help
04:53 - you achieve that Brilliance is where you
04:55 - learn by doing with thousands of
04:56 - interactive lessons in math data
04:59 - analysis programming and AI they use a
05:01 - first principles approach meaning you'll
05:03 - get the why behind everything each
05:05 - lesson is interactive and filled with
05:07 - Hands-On problem solving which is six
05:09 - times more effective than just watching
05:11 - lectures the content is created by
05:13 - award-winning teachers researchers and
05:15 - pros from places like MIT Caltech and
05:18 - Google brilliant focuses on improving
05:20 - your critical thinking skills through
05:22 - problem solving not memorizing while
05:24 - you're learning specific topics you're
05:25 - also training your brain to think better
05:28 - learning a bit every day is Super
05:29 - important and Brilliant makes it easy
05:32 - their fun bite-sized lessons fit into
05:34 - any schedule helping you gain real
05:36 - knowledge in just minutes a day it's a
05:38 - great alternative to Mindless scrolling
05:40 - brilliant even has an entire Suite of
05:42 - computer science plus python courses
05:44 - that take you from complete beginner to
05:46 - expert with Hands-On lessons that cover
05:48 - the important Concepts you need to
05:50 - master to try everything brilliant has
05:52 - to offer for free for a full 30 days
05:55 - visit brilliant.org techwithtim or click
05:58 - the link in the description you'll also
06:00 - get 20% off an annual premium
06:02 - subscription so now that we've got the
06:04 - basics down here let's build an entire
06:06 - application specifically that demo app
06:09 - you saw before so you can see a lot of
06:10 - the different features that streamlet
06:12 - has so let's close our terminal and
06:14 - delete this and just import a few other
06:16 - things that we're going to use so we're
06:18 - going to say import pandas as PD and
06:21 - then import matplot li. pyplot as
06:26 - PLT okay great so now after this we're
06:29 - going to create a title for our
06:30 - application so we're going to say
06:32 - st. tile and this is going to write some
06:35 - title text for us so I'm going to say
06:36 - simple data dashboard as the title now
06:40 - again if we save and we go back here and
06:42 - we click on rerun you can see that we
06:44 - have the new title okay so let's go back
06:47 - and let's continue writing the next
06:48 - thing that I want to do is create a kind
06:50 - of file upload window or a file upload
06:53 - button so in order to do that I'm going
06:55 - to say uploaded file is equal to st.
06:59 - file underscore uploader this is a
07:02 - widget that's provided by streamlet and
07:04 - then we can give this widget a name or
07:07 - uh kind of a label so we're going to say
07:08 - choose a in this case CSV file and then
07:11 - we can specify the type of file that we
07:13 - want to allow to be uploaded so in this
07:15 - case I'm going to say type is equal to
07:18 - CSV now obviously you can change the
07:20 - type here or you can provide multiple
07:21 - types but in this case we're just going
07:23 - to go with CSV now let's go and actually
07:26 - see how we can use the uploaded file and
07:28 - learn a bit about how streamlet works in
07:30 - the back end so what I'm going to do is
07:32 - say if the uploaded file is not none
07:37 - then what I'll do is just write
07:38 - something on the screen so I'm just
07:39 - going to say st. write and I'm going to
07:41 - say file uploaded dot dot dot now this
07:45 - won't be the finished application but I
07:47 - want to show you how this works so
07:49 - streamlit will actually automatically
07:51 - rerun the python script every time
07:54 - something changes now what I mean by
07:56 - change is that we could be changing the
07:58 - source code or the user could be
08:00 - interacting with some type of component
08:02 - and actually end up changing the state
08:04 - of the application so in this case if
08:07 - the user uploads a file what's going to
08:09 - happen is the python script is going to
08:10 - be reran that file is going to be
08:13 - maintained in the state of the script or
08:15 - the streamlet application and then when
08:17 - we get to this if statement this will
08:19 - change so the upload a file will not be
08:21 - none and we'll end up rendering file
08:23 - uploaded now I know this seems a little
08:25 - bit strange and it's kind of unintuitive
08:27 - to how you'd build a web app using
08:28 - something like JavaScript or HTML but
08:31 - anytime the user kind of interacts with
08:33 - the page and makes a state change like
08:35 - uploading a file the entire thing reruns
08:38 - we re-execute the entirety of the Python
08:41 - code but the state is maintained for
08:43 - whatever what was updated that just
08:45 - means any logic that you have here like
08:47 - checking the value of a variable will be
08:49 - ran again so then we can actually
08:52 - rewrite or modify the page and change it
08:55 - based on what the user just did so let
08:57 - me show you what I mean by that if I
08:58 - come back here and I refresh you can see
09:02 - that we have a file upload so now we
09:04 - just need a CSV file to upload I'm going
09:06 - to leave one Linked In the description
09:08 - in the GitHub that's there so if you
09:09 - want to download a CSV file you can do
09:11 - it from GitHub or you can just use your
09:13 - own but to browse files you can see I
09:15 - have one in my downloads here so let me
09:16 - go ahead and open that and you can see
09:19 - now that it says file uploaded so as
09:21 - soon as I browse the files here and I
09:23 - changed the state this python script was
09:26 - reran and that's why this if statement
09:28 - changed to be true and then we rendered
09:31 - file uploaded okay so now what we're
09:33 - going to do is rather than just
09:34 - rendering the file upload is we're going
09:36 - to read this in as a Pand as a data
09:38 - frame and then we're going to write the
09:39 - Pand as data frame so to do that we're
09:41 - going to say data frame is equal to pd.
09:44 - read CSV and we're going to read the
09:47 - uploaded file next what we're going to
09:49 - do is display a subtitle so we're going
09:52 - to say st. subhe header and this is
09:54 - going to be a data preview so you can
09:57 - see pretty straightforward we're just
09:58 - dising well a title or data preview if
10:01 - we go back and look at this and we go to
10:03 - always rerun now you can see that we
10:05 - have data preview okay next we want to
10:08 - actually write the data frame so we're
10:10 - going to say st. write and we're going
10:13 - to say DF doad now this just gets the
10:15 - first five rows from our data frame we
10:18 - pass that to right and right will
10:19 - automatically handle rendering that for
10:21 - us so again if we go back here you can
10:23 - see now that we have a preview of our
10:25 - data frame showing up okay so let's see
10:28 - what we want want to display next will
10:30 - we want a summary of the data so we're
10:31 - going to say st. subheader and we'll say
10:35 - data summary and then we're going to say
10:38 - St outside of the parentheses here.
10:41 - write and we are going to write the data
10:44 - frame. describe now when we describe the
10:46 - data frame that's going to give us all
10:48 - of those entries you saw in the demo
10:50 - like the average value in all of the
10:51 - columns the count the max the minimum
10:54 - Etc so just to show you that if we go
10:56 - back here you can see now that we have
10:57 - data summary and this table is inter
10:59 - cable and if we wanted to modify the
11:01 - table we could actually use some
11:02 - different commands from the
11:03 - documentation but we're not going to
11:05 - look at that right now I'm just trying
11:06 - to give you a quick introduction okay so
11:09 - we have the subheader we have uh the
11:11 - data summary and the data preview and
11:13 - the next thing is to filter the data so
11:16 - to filter the data same thing let's do
11:17 - another subheader this is going to say
11:20 - filter data and then we need to pass
11:22 - some widgets the user can interact with
11:25 - so first thing let's grab all of the
11:27 - unique columns that we have so we're
11:28 - going to say columns are equal to data
11:30 - frame do columns. to list now that's
11:34 - just going to give us all of the columns
11:36 - in a python list and then we're going to
11:38 - say selected column is equal to and
11:41 - we're going to say st. selectbox now
11:44 - this is a widget that's going to give us
11:45 - a drop- down list of all of the
11:47 - different values that we pass to it the
11:49 - first thing we pass is kind of the
11:50 - prompt or the label for this so we're
11:52 - going to say select column okay to
11:56 - filter by and then next we're just going
11:59 - to going to pass all of the columns so
12:01 - this is now going to give us a drop-
12:02 - down list with all of the different
12:03 - columns let me make this a little bit
12:05 - smaller just so you can read all of this
12:07 - okay so we're going to have all of the
12:08 - different columns let's have a look at
12:09 - that right now if we save when we come
12:11 - back you can see that we have filter
12:13 - data it says select column to filterby
12:15 - and then we have a bunch of different
12:16 - options that we can select here and
12:18 - every time we select this it's going to
12:20 - rerun the python script caching all of
12:22 - the data that we had before but allow us
12:25 - to run the logic that comes beneath okay
12:28 - so we have selected column
12:29 - we're then going to have unique values
12:32 - and what I'm going to do is grab all of
12:33 - the unique values from this column so
12:35 - I'm going to say DF and then selected
12:38 - column and then this is going to be do
12:41 - unique okay so that grabs all the unique
12:43 - values from this particular column the
12:46 - reason for that is that once we have a
12:47 - column we can then select a value within
12:49 - that column and grab all of the
12:51 - different rows that match that value so
12:53 - now we're going to say selected value is
12:57 - equal to St do select box okay and we're
13:00 - going to say select value and then we're
13:04 - going to go with unique values like that
13:06 - okay so let's go back and look at what
13:08 - this gives us you can now see that we
13:10 - have two select boxes we have a city and
13:12 - once we select something like
13:13 - temperature or city or whatever it gives
13:15 - us all the unique values so it's
13:17 - updating that in our script and then we
13:19 - can select one of the unique values okay
13:22 - so now that we're able to filter our
13:24 - data what we want to do is display that
13:26 - filtered data and then plot that on the
13:28 - screen so in order to display that we're
13:30 - going to say filtered undor data frame
13:33 - is equal to data frame and then this is
13:35 - going to look a little bit weird if
13:36 - you've never used pandas but this is how
13:37 - you can do a filter inside of the square
13:40 - brackets we can say data frame again and
13:42 - then we can say selected undor column
13:45 - double equal to selected value all this
13:48 - is doing is going in our data frame and
13:50 - it's grabbing all of the rows where the
13:52 - data frame at the selected column is
13:55 - equal to the selected value so where
13:58 - this row has that value
13:59 - in the correct column we're going to
14:00 - select it okay then we can write it so
14:03 - to write it we're going to say st. write
14:07 - and then we'll just write the filtered
14:09 - data frame again whenever you want to
14:11 - display something you don't know how to
14:12 - display it or this specific command you
14:14 - can just use right and it will
14:16 - automatically be displayed for you so
14:18 - let's go back and you can see now that
14:20 - it displays that data for us great okay
14:24 - now we want to plot this so to plot this
14:26 - we're going to say st. subheader and
14:29 - then we're going to go with plot data
14:32 - and then in here we're going to uh
14:34 - select sorry the X column and the Y
14:36 - column that we want to plot so we're
14:38 - going to say
14:39 - xcore column is equal to St and we'll go
14:43 - with a select box again we're then going
14:45 - to say select the
14:48 - xaxis column and then we're going to
14:51 - pass all of our unique columns and then
14:53 - we'll do the exact same thing for our y
14:55 - column so let's copy this and paste this
14:57 - down here and just change this to to Y
15:00 - and Y okay so now we're going to grab
15:02 - the X column and the Y column now I want
15:04 - to display a button and when we press
15:07 - the button I want to generate a line
15:08 - chart that uses the data from the X
15:10 - column and the Y column so I'm going to
15:12 - say if st. button this is as easy as it
15:16 - is to put a button here and we're going
15:17 - to say generate chart or generate plot
15:22 - now what this is is the name of the
15:23 - button and then if I press the button
15:25 - this is true and then will go inside of
15:28 - the if statement so again as soon as I
15:30 - press this then this logic will happen
15:33 - inside of the if statement so now I'm
15:34 - going to say st. line uncore chart and
15:38 - what I'm going to do is pass my filter
15:40 - data frame and I'm going to say do setor
15:43 - index I'm going to set the index as the
15:46 - X column and then I'm going to take the
15:48 - Y column
15:50 - values like that and that's really all
15:53 - we need to do to plot that okay now
15:55 - otherwise so just going to have an else
15:57 - statement here so if we've not actually
16:00 - uploaded a file then I'm just going to
16:02 - say waiting on file upload so I'm going
16:03 - to say st. WR and waiting on file upload
16:08 - dot dot dot okay so kind of basic here
16:11 - but I just want to show you a simple
16:12 - example so let's go back here and let's
16:14 - look at this and you can see now that we
16:16 - have if I refresh here uh waiting on
16:19 - file upload we can upload a file so
16:21 - let's upload the CSV file we get the
16:24 - data preview the data summary we have
16:26 - the ability to filter the data so I can
16:28 - go maybe by City And then select say New
16:31 - York and we can view all of the values
16:33 - that we have for New York then I can
16:36 - plot the data so I'm going to plot the
16:37 - date as the x- axis and maybe the wind
16:40 - speed as the Y AIS and when I press this
16:42 - button we generate the plot there you go
16:45 - so you can see when the button was
16:47 - pressed we come in here this if
16:48 - statement now runs and is true and then
16:50 - we render whatever is inside of here so
16:52 - a really intuitive and easy way uh to
16:55 - actually kind of respond to different
16:57 - events and that's because once this
16:59 - changes we rerun the python script
17:01 - maintaining whatever the previous state
17:02 - was in this case it's pressed so then we
17:05 - execute this code so that pretty much
17:07 - wraps up the application here obviously
17:09 - there are a million other things you can
17:10 - do here using streamlet if you want to
17:13 - reference the documentation I'll leave a
17:14 - link to it in the description there's
17:16 - all kinds of widgets you can make like
17:18 - sliders you can have text inputs you can
17:20 - see that they have that right here and
17:22 - there's all kinds of advanced features
17:23 - you can have callbacks you can render
17:25 - specific data in different ways you can
17:27 - change the layout this isn't meant to be
17:29 - an in-depth full tutorial but just an
17:31 - introduction to give you a sense of what
17:33 - you can create and to encourage you to
17:35 - go and explore this module so with that
17:37 - said I will lastly just mention that you
17:40 - can actually deploy this app very
17:42 - quickly which is another advantage of
17:43 - streamlet and this can work on mobile
17:45 - and desktop if you click the deploy
17:48 - button here from the UI you have the
17:50 - option to deploy this completely for
17:51 - free using the streamlink community
17:54 - Cloud so if you click on deploy now and
17:56 - go through the prompts here uh it's
17:57 - going to say it's not connected get
17:58 - GitHub blah blah blah there's a few
17:59 - things you need to do here in order to
18:01 - deploy this but you can connect it to
18:02 - GitHub and then it will automatically
18:03 - get deployed for you and then you'll
18:05 - have some URL that's public that anyone
18:07 - can access where you can view this
18:09 - application this is really good when you
18:11 - want to build a quick UI for interacting
18:13 - with AI apps or things like custom llms
18:16 - and that's why a lot of people have been
18:17 - using streamlet recently anyways if you
18:20 - guys enjoyed the video and you want more
18:21 - on streamlit make sure you leave a like
18:23 - And subscribe let me know in the
18:25 - comments down below and I will see you
18:26 - in the next video
18:28 - [Music]