00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial for beginners
00:04 - now in this video i'm going to be
00:06 - covering strings and when i say strings
00:08 - i really just mean talking about a few
00:10 - properties of strings that we haven't
00:11 - seen yet
00:12 - specifically how to access and change
00:14 - different characters within the string
00:16 - and then how to get the size and the
00:17 - length of them so with that said
00:19 - let's dive in
00:23 - [Music]
00:28 - so this is going to be a relatively
00:30 - short video all i want to show you is a
00:32 - few things relating to strings that i
00:34 - kind of forgot to show you in the
00:35 - previous videos
00:36 - so the first thing to understand about
00:38 - strings is that they are similar to
00:39 - arrays in the sense that we can access
00:41 - and modify elements within a string so
00:44 - if i say string
00:45 - str equals and then hello world
00:48 - like that i can actually access all of
00:50 - the individual characters in this string
00:53 - and change these characters as well so
00:55 - if i do something like
00:56 - c out string and then at index one
00:59 - you're going to see that we get e
01:01 - printing out because obviously well that
01:03 - is what is at position one so just like
01:05 - an array
01:05 - all of these different characters here
01:07 - can be accessed by their position
01:09 - in the string and just like we can
01:11 - access them we can also change them so i
01:13 - can do something like string one equals
01:15 - and then make this sorry needs to be a
01:17 - character make this equal to say
01:19 - character two
01:20 - and now you see that we get two so it's
01:23 - important to understand though
01:24 - that every single element inside of here
01:26 - is not another string
01:28 - it is a character so that is why this
01:30 - worked i assigned
01:31 - string at index one to the character two
01:35 - and the reason i used the single quotes
01:36 - ray is to signify it's a character
01:38 - rather than a string let's actually see
01:40 - what happens if i try to convert it to a
01:42 - string
01:42 - this may work but let's just see
01:44 - actually we get a problem right it says
01:46 - uh what is it invalid conversion from
01:49 - const char
01:50 - uh to value type of string or something
01:53 - okay so kind of a cryptic error message
01:55 - but regardless you can see that it
01:56 - didn't work when i used the double
01:58 - quotes because that was trying to add a
01:59 - string
02:00 - when really what we're trying to do is
02:01 - replace this with a different character
02:04 - and come on error message can you go
02:05 - away let's go here and
02:07 - close that all right so that is the
02:09 - basics in terms of indexing elements
02:11 - from a string now i'm going to show you
02:12 - how we can loop
02:13 - through a string so if i say something
02:15 - for uh and then i say
02:17 - int i equals zero i is less than
02:20 - and we'll fill that in a second and then
02:22 - i plus plus ideally what i want to do is
02:25 - loop through all of the characters or
02:26 - elements in this string so there is
02:28 - multiple ways to do this but the kind of
02:29 - standard way is to write a for
02:31 - that looks like this now the question is
02:33 - though what do i put for my condition so
02:36 - how many times do i need to loop
02:37 - essentially how do i get the size of
02:39 - this string
02:40 - well we could do it in the same way that
02:42 - we got the size of the array where we
02:44 - use that size of function
02:46 - but for a string there's actually a
02:48 - method or a property
02:50 - whatever you want to call it you don't
02:51 - have to worry about all the terms right
02:53 - now
02:54 - called dot length and dot size so let me
02:57 - actually just copy this
02:58 - for loop and i'll paste it back in in a
03:00 - second but i'll show you what i mean if
03:02 - i see out
03:03 - string dot size what this is going to do
03:06 - is tell me the number of characters in
03:07 - this string
03:08 - so when i do this you see that we get 12
03:10 - characters so we will continue in one
03:12 - second we need to quickly thank the
03:13 - sponsor of this video and the series
03:15 - which is algo
03:16 - expert algo expert is the best platform
03:18 - to use when preparing for your software
03:20 - engineering coding interviews
03:21 - right now they have over 150 coding
03:23 - interview questions on the platform and
03:25 - more are being added
03:26 - constantly with that said check out go
03:28 - expert from the link in the description
03:29 - and use the code tech with tim for a
03:31 - discount on the platform
03:32 - now there's another word or another
03:34 - method attribute whatever
03:36 - that actually does the exact same thing
03:38 - as size it's called
03:40 - length when i do length it gives me 12
03:42 - as well so feel free to use dot length
03:44 - or dot size
03:45 - i don't think one or the other is
03:47 - preferred they just both work they do
03:48 - the same thing
03:49 - and so that means when we put our for
03:50 - loop here well if we want to loop
03:52 - through all of the characters then we're
03:54 - going to say i
03:54 - is less than string and dot length
03:57 - because if we have 12
03:58 - characters then the last index in our
04:00 - string is going to be 11.
04:01 - so then in here what i can do is say
04:03 - something like c out
04:05 - and then string at index i and then
04:08 - end l and now when i do this you can see
04:11 - that we get hello
04:12 - world kind of printing out vertically
04:14 - like this
04:15 - now last thing i'll show you obviously
04:17 - if you're going to store
04:18 - one of the elements from here from the
04:21 - string you need to store it in a char
04:22 - variable
04:23 - so i say something like char chr
04:27 - is equal to string i that is valid
04:30 - so now i can do c out char and then end
04:33 - l let's have a look at this and we get
04:36 - hello world
04:37 - i just want to show you this because
04:38 - sometimes you are wanting to actually
04:39 - store what the character is
04:41 - and you're oftentimes not printing it
04:42 - out you're going to be doing something
04:43 - with it so just make sure the data type
04:45 - you're using to store all of the
04:47 - characters is a char data type you can't
04:49 - make this a string
04:50 - actually let's just see what happens if
04:52 - we try to make this a string but i think
04:53 - we're going to get in there yeah you can
04:54 - see we get an error here we can't
04:55 - convert
04:56 - the character to a string all right so
04:59 - that's really all i want to show you
05:00 - with strings i just wanted to make sure
05:01 - you were aware
05:02 - that you can access elements in the way
05:04 - that we normally would like in an array
05:06 - you can change the elements as well same
05:08 - way as we would do it in an array
05:10 - and then of course you can loop through
05:12 - them i guess last thing we could do is
05:14 - we could change all of the elements in
05:15 - this string so we could say string
05:17 - or we'd say string i and
05:20 - let's make this actually equal to
05:24 - and let's just go with something like a
05:27 - and then what we can do at the end of
05:29 - here is we can just c
05:31 - out str and we can see if this works
05:34 - so when i do this notice that we get the
05:36 - string completely filled with a's
05:37 - because we changed
05:38 - all of the elements all right so that's
05:40 - going to conclude this video i hope this
05:42 - was helpful if it was make sure to leave
05:44 - a like subscribe and i will see you in
05:45 - another youtube video
05:55 - you