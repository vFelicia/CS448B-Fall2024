00:00 - hey guys and welcome back to another
00:02 - YouTube video I just want to start off
00:04 - again by apologizing it's been about a
00:06 - week since I last posted and that's just
00:09 - because I've been extremely busy right
00:11 - now in Canada at least the school that I
00:13 - go to it's been midterm season so I've
00:15 - been having to kind of focus on school
00:17 - and I haven't really had time to be
00:18 - making any videos so right now I'm
00:21 - getting back into it
00:22 - midterms are over so I'm all set ready
00:24 - to go now I could have more consistent
00:25 - upload schedule and I'm getting right
00:27 - into things with a new series now I've
00:30 - been getting a lot of positive feedback
00:31 - on some of my Python programming videos
00:34 - so on some of the tutorials for pygame
00:37 - the side scroller one that I recently
00:39 - did and then the other pioneers that I
00:41 - have for beginners that 10 video series
00:43 - a lot of people have been commenting
00:45 - commenting saying that they wanted more
00:47 - videos they want to learn more about
00:49 - Python so here we are now the whole
00:52 - purpose of this series and you can see
00:54 - on my screen right now is it's gonna be
00:56 - kind of a problem solving series now if
00:58 - you're interested in computer science or
01:00 - coding or programming it's probably
01:02 - because you like solving problems or you
01:04 - like thinking and you like being able to
01:06 - create solutions to something at least
01:08 - that's what I like to do obviously
01:10 - there's the side of programming which is
01:11 - like game development and stuff like
01:14 - that but even within your games there's
01:15 - a lot of problems you're gonna have to
01:17 - solve and just doing something that I'm
01:18 - gonna show you here today is really
01:21 - useful and I can even just help you
01:22 - throughout your life to be able to think
01:24 - about things more critically so this
01:27 - series pretty much what I'm gonna do is
01:28 - once a week on Thursdays so I'm starting
01:30 - it now is I'm gonna introduce a problem
01:32 - to you guys and then I'm going to show
01:35 - this solution so obviously you don't
01:37 - want to watch the solution part of the
01:39 - video until you've read the problem and
01:41 - tried it out unless you just want to see
01:43 - the solution right away you have no idea
01:44 - how you would approach the problem but
01:47 - in this case right here I would suggest
01:48 - that you first off start by reading the
01:51 - solution by yourself I'm gonna read it
01:52 - to you guys as well and then take a few
01:54 - minutes try to figure out how you're
01:56 - gonna approach the problem tried to do
01:58 - so and then if you're still stuck or
02:01 - afterwards just check your solution up
02:03 - against mine and yeah so let's get right
02:06 - into it so the first problem I'm going
02:07 - to be showing you is very simple and
02:09 - we're gonna be progressing and getting
02:10 - harder and harder as we move on so right
02:12 - now you might think this
02:13 - - easy I don't even want to try this
02:15 - problem it's not worth my time
02:16 - that's fine as we keep going on in the
02:19 - videos progressively move forward so
02:22 - from number one to number ten so on
02:23 - we're gonna get more difficult so the
02:25 - first problem is given a string of
02:27 - alphabetical characters following the
02:29 - rules seen down below and I'll talk
02:31 - about that in a second in Part A and
02:32 - Part B return a new string with the
02:35 - characters in alphabetical order capital
02:37 - letters should appear before the same
02:39 - lowercase letters example here you can
02:42 - see if we have a capital B that should
02:44 - be before the lowercase B's so on and
02:47 - there will be no strace spaces in any of
02:50 - the strings so pretty much what's gonna
02:53 - happen here is I would give you a string
02:56 - of text and then you would have to see
02:58 - if your program is able to output the
03:00 - correct output so in Part A we see the
03:03 - string contains only lowercase letters
03:05 - and in Part B the string contains both
03:07 - lowercase and uppercase letters so let's
03:09 - talk about Part A first if you're not
03:11 - quite understanding exactly what the
03:14 - problem is it's always helpful to look
03:15 - at the sample input and output as I can
03:18 - help you to understand what the program
03:19 - wants you to do so the sample input for
03:22 - this program would be hello this is just
03:25 - a sample one at the beginning and then
03:27 - the output beh ll o now obviously we
03:30 - know the alphabet we know that this is
03:32 - corresponding to it so those eh-oh eh-oh
03:34 - in the same order that the alphabet goes
03:37 - now that's part a so that's a sample
03:41 - sample input and output for Part A and
03:43 - that is not too difficult to do at least
03:46 - in Python so the language that I'm going
03:48 - to show you the solution is always gonna
03:49 - be in Python in other languages there's
03:52 - gonna be different solutions there gonna
03:53 - be different ways to do things
03:55 - Python is the simplest in my opinion and
03:58 - that's why I use it also has some cool
03:59 - tricks that make problems a lot easier
04:00 - to solve now for Part B and this is a
04:03 - little bit of a harder part so if you're
04:04 - already stumped just focus on Part A
04:07 - don't even worry about Part B because
04:08 - it's gonna be a bit more difficult the
04:10 - input is this so it's elephant except we
04:13 - have a few uppercase letters so you can
04:15 - see we have LEP and then an A and this
04:19 - is what the output should look like so
04:20 - we have a and then our uppercase e fold
04:23 - but the lowercase e and then we have h L
04:27 - peaty so on so again the difficulty for
04:30 - this problem I'm classifying as beginner
04:33 - although Part B could be somewhat in
04:35 - between beginner and intermediate as a
04:37 - little bit more difficult and it should
04:39 - take you about 10 to 15 minutes to solve
04:41 - this problem if it's taking you longer
04:43 - don't worry about it that just means you
04:45 - need to do a bit more work on your
04:47 - programming
04:48 - okay so I'm gonna let you guys try to
04:50 - focus on this problem and see how you
04:52 - would solve it I don't want to talk
04:53 - about it too much this is just as if I
04:56 - were to hand you a piece of paper in
04:57 - class and tell you go ahead and solve
04:59 - this problem I wouldn't go through all
05:00 - the detail and if you wait about five
05:03 - seconds so pause the video I'm gonna go
05:05 - through the solution with you right now
05:12 - okay so I hope you guys have had a
05:14 - chance now after looking at the problem
05:17 - and trying to find a solution to
05:19 - hopefully come up with one at least for
05:21 - Part A if not if you're having trouble
05:24 - with Part B just look at the solution
05:25 - here so the solution that I have I've
05:27 - already got it up in a file here and for
05:31 - Part A it's very simple you can see it's
05:33 - about not what's it's seven or eight
05:34 - lines now for this I just made a new
05:37 - function called it alphabet soup takes
05:40 - one parameter of string you don't have
05:42 - to do this in a function there's other
05:43 - ways to do these things everyone's gonna
05:45 - have somewhat of a different solution as
05:47 - long as yours gets the same answers then
05:49 - we're good so we just start off I'm just
05:53 - setting up a new variable called Li and
05:55 - I just start by sorting it so the first
05:57 - thing I'm doing is I'm turning my string
05:59 - into a list and then I'm sorting it so
06:01 - this is why Python is so useful what
06:03 - this actually does is it just sorts it
06:05 - right into a sorted list and since we
06:08 - know that for Part A they're all gonna
06:10 - be lowercase letters this is perfect and
06:12 - it just pretty much sorts it for us and
06:14 - that's all we really have to do after
06:16 - this all I'm doing is just now
06:17 - converting my list back into a string by
06:20 - simply adding all of the elements of the
06:22 - list into a new string and then I'm
06:24 - returning that string so we can see run
06:27 - the program here if I type below then we
06:30 - get the correct output here eh LLO
06:33 - wonderful right so that was pretty
06:35 - straightforward for Part A have any
06:37 - questions leave them down in the comment
06:39 - below I'm sure myself or someone else
06:40 - be happy to answer them for you for Part
06:43 - B this is where things get a little bit
06:44 - trickier now I'm gonna show you why the
06:47 - solution for Part A doesn't work for
06:49 - Part B now this is because if you can
06:52 - see I'm gonna type in elephant I already
06:54 - got a copy down here just to make sure
06:56 - it's the same from my my problem that I
06:59 - have you can see we get a a a ELP eh NT
07:04 - now the reason that we get this is
07:07 - because the way that Python actually
07:09 - works for sorting things is it uses
07:11 - something called an ordinal value now an
07:13 - ordinal value I'm gonna just type in a
07:15 - console here is of a string so it gives
07:18 - you a number value of a string so you
07:20 - can see my type ordinal of a we get 97
07:23 - lowercase I keep that in mind nice I
07:25 - type word note of B we get 98 now you'd
07:30 - think that if I type ordinal of
07:32 - uppercase a we would get 97 as well but
07:36 - we actually get 65 now again it's
07:39 - predicted or predictable that if we type
07:41 - ordinal of uppercase B we get 66 now why
07:47 - is this significant the way that Python
07:49 - sorts things is by using these ordinal
07:50 - values so pretty much when you just type
07:52 - that sorted in that I've done here like
07:55 - that what's gonna actually do is it's
07:57 - gonna find the lowest ordinal values in
07:59 - the strings and it's gonna put them at
08:01 - the beginning and then it's gonna take
08:02 - the greatest ones and it's gonna put
08:03 - them at the end and obviously store it
08:05 - through at the middle so when we have
08:07 - something like an uppercase a in an
08:09 - uppercase B those are gonna go before
08:12 - our lowercase a so we could have all the
08:15 - uppercase letters up to Z and that would
08:17 - still go before our a if we're just
08:19 - using this built-in method or function
08:22 - in Python called sorted now that's why
08:24 - we have to come up with a different
08:26 - solution so that's what I do down here
08:29 - and I'm gonna show you that now now this
08:31 - solution here that I just have commented
08:33 - out just so that it wasn't gonna run
08:35 - while we had our other one running is
08:37 - works for both Part A and Part B so if
08:41 - you were trying to do both problems it
08:42 - probably made sense just to make one
08:43 - solution that works for both of them and
08:46 - this is something like it would look
08:48 - like so I'm going to go through my
08:50 - process of thinking about this and how I
08:52 - came up with
08:52 - the solution right now now it is
08:54 - important to think about the way that I
08:56 - approach the problem as well because
08:58 - that's a way that you guys can approach
09:00 - problems that might not be the same as
09:01 - this but similar in a way so I first
09:04 - started off by simplifying the problem
09:05 - and by simplifying the problem that's
09:07 - why I did this I was just thinking about
09:09 - if it's only lower cases then it's
09:12 - really easy we can just sort it through
09:13 - but since it's upper cases what do we
09:16 - need to do to approach this problem now
09:18 - my first thought process was just to
09:20 - sort it and then take sort into two
09:23 - lists so an upper case list the lower
09:24 - case list and then merge those two
09:26 - together into the same list now that
09:29 - would work but that would be a little
09:31 - bit too much work for me and I wanted to
09:32 - do something simpler so I thought of
09:34 - this solution now what this solution
09:36 - does is we start off by doing the same
09:37 - thing as the last one as getting a
09:39 - sorted list so we simply take the string
09:42 - we sort it into a list and then what I
09:45 - do is I do the same thing except a lower
09:48 - case list so this list up here is going
09:50 - to have for example like a e L capital
09:55 - and then the rest of the letters whereas
09:57 - this one is just gonna have them all in
09:59 - lowercase now I create a blank list
10:01 - called caps blank strings where we're
10:04 - gonna store our final answer and then we
10:07 - go into my for loop so what this for
10:10 - loop does here is it just generates our
10:13 - character list or our capitalist - sorry
10:16 - so this pretty much just looks through
10:18 - our what do you call it our upper case
10:20 - list here and it says if any of the
10:23 - characters there are capital I'm just
10:25 - gonna add them into my caps list here
10:28 - pretty straightforward now the reason we
10:30 - have this caps list is so that we can
10:31 - compare it to our lower case list what I
10:35 - ended up thinking of was well if I have
10:37 - a lower case list that has all of the
10:39 - characters all I need to do now is just
10:41 - check if an uppercase character exists
10:44 - and if it does exist then what I'm gonna
10:46 - do is I'm gonna replace the lowercase
10:48 - character in this lower case list with
10:51 - that uppercase character and keep moving
10:54 - through the string like that and you'll
10:55 - see kind of how it works as I talked
10:57 - about this for loop here so what I do
10:59 - now in this for loop is I'm saying we're
11:01 - gonna look through every letter in our
11:03 - lower case list so in the list the
11:06 - has every single lowercase letter what
11:08 - we do is we look through each of them
11:09 - and we're just gonna start by saying if
11:12 - caps dot count so we're gonna count how
11:15 - many times we see the letter in our
11:19 - lowercase list as an uppercase up here
11:22 - so say for example we have our lowercase
11:24 - list I'm going to type it out here and
11:26 - it says like a a b b CC that's our
11:30 - lowercase list we start at a and then we
11:32 - have our oops we have our caps list that
11:36 - looks like this it looks something like
11:37 - this a b c with quotations around them
11:41 - obviously we say well if we count one a
11:44 - then what we're gonna do is we're simply
11:47 - going to append the same letter in our
11:49 - lowercase list into our note our new
11:52 - string but as an uppercase letter so
11:55 - what we do there is we say well we have
11:57 - an a but since there's an a that exists
12:00 - in the capital list what we're gonna do
12:01 - is we're going to turn this into a
12:03 - capital A and we're gonna throw it up
12:05 - here like that pretty straightforward
12:08 - now after that what we need to do though
12:09 - is we need to remove this from the list
12:11 - because it's possible that we could have
12:12 - multiple capital letters right we could
12:14 - have two A's so what we do is we add
12:17 - that into the list here we remove this
12:19 - from this list or into the string we
12:22 - remove it from the list and then we keep
12:24 - going to the Forbes now we go to the
12:26 - next letter we have another a well
12:28 - there's another capital A in our list of
12:30 - capitals so what we're gonna do is we're
12:32 - gonna change this to an A so we're gonna
12:34 - put an A like that we're gonna remove
12:35 - this from the list and we're gonna keep
12:37 - moving through and we keep going through
12:39 - and we keep proceeding this keep going
12:41 - with the same process now after we've
12:44 - gone through all of these letters what
12:47 - we eventually end up doing is we say
12:49 - well if caps count equals zero so if
12:53 - it's if it's not equal to zero then we
12:55 - go to the else statement then we're just
12:57 - simply going to append the letter
12:58 - because that means there is no capital
12:59 - so say we're on let's put a D here say
13:02 - we're on D we look in a capitalist list
13:04 - there's no D's in there we're simply
13:05 - going to append or add the lowercase D
13:07 - into our new string and that is how this
13:12 - problem works so I'll show you it
13:14 - working I can't remember if I did
13:15 - already or not and when I put in
13:18 - elephant can see we get the cur
13:20 - or actually sorry that's that was we're
13:22 - doing the one above sure this is the one
13:24 - below elephant there we go
13:26 - we should get the correct answer except
13:28 - we have two A's here so just give me a
13:30 - second to fix it okay so just leave it
13:34 - blank for the beginning because that's
13:35 - the first one for Part B type elephant
13:38 - and we get the correct answer I believe
13:40 - you can see we can compare the two yep
13:43 - it looks to be correct so that is how I
13:46 - went about solving this problem if you
13:48 - guys think that you have a better
13:50 - solution a more efficient efficient
13:52 - solution or just something different go
13:55 - ahead leave that solution in short
13:56 - enough you could just paste it down into
13:58 - the comments below I'll be sure to have
14:00 - a look at it if you guys did have one
14:01 - that was much better than the one that I
14:03 - had I'll be sure to shout you guys out
14:05 - in the next video and just give a
14:06 - mention to your comment and that's what
14:08 - I'm going to be doing for the rest of
14:09 - these videos because just like you guys
14:11 - I love to be learning and if someone has
14:13 - a better solution that I do obviously I
14:15 - want to learn what that solution is how
14:17 - I could improve on my coding and be sure
14:21 - to show you guys out in the video for
14:22 - doing so so if you guys did enjoy this
14:24 - video and you want to see more problems
14:26 - the next one will be a bit more
14:27 - difficult than this make sure you leave
14:29 - a like on the video and subscribe to the
14:31 - channel and I will see you again in the
14:33 - next video
14:34 - [Music]