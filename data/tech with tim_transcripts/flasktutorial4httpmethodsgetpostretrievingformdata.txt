00:00 - hello everyone and welcome back to their
00:01 - Flast tutorials so in today's video
00:03 - we're gonna be talking about two basic
00:05 - HTTP methods which aren't get and post
00:07 - now these are just ways of sending
00:09 - information to our server or to our
00:11 - clients so evers using the website I'm
00:13 - going to talk about the differences
00:14 - between both of them and then go through
00:16 - a basic example of how we can send for
00:18 - example some password data or some name
00:20 - data from a form to the backend of our
00:22 - website so it can be processed and we
00:24 - can do something with that in future
00:25 - videos we'll get into some more advanced
00:27 - things we'll talk about databases
00:28 - logging in sessions all of that and
00:30 - we'll just go with it this until we kind
00:32 - of run out of things to do so before I
00:34 - get too far into this we need to explain
00:36 - what get and what post are which are the
00:38 - to http methods I'm gonna explain today
00:42 - now you've probably heard of both of
00:44 - these before get is the most common way
00:46 - of well getting or sending information
00:48 - to a website or you know to a client
00:51 - depending on whatever way this
00:52 - information is going post is a way of
00:55 - doing this securely so get essentially
00:57 - is an insecure way of getting
00:59 - information it's most commonly used and
01:01 - a basic example of that is let's bring
01:03 - up the website here when we type
01:05 - something in the URL bar or in the
01:07 - address bar so you can see here I've
01:09 - connected to my website I have it
01:10 - running here it just has the home page
01:12 - on it and if i refresh this we see in
01:14 - the console we have a command that pops
01:16 - up saying get now what does this mean
01:18 - well essentially whenever we type
01:20 - something here that's not secure which
01:22 - means you know anyone can see it it's
01:24 - not secure information it will send to
01:26 - the server here and then it will return
01:28 - to us the actual web page using a get
01:31 - method now if we were to use post what
01:33 - we would actually do is send secure
01:35 - information that's encrypted that cannot
01:37 - be you know seen from either ends and is
01:40 - not stored on the actual web server so
01:42 - that is kind of the difference between
01:43 - get and post now I know this might be a
01:45 - little bit confusing right now I'm
01:46 - probably not explaining it in the best
01:48 - way but as we go through the video you
01:49 - guys will understand kind of the main
01:50 - differences between that but the basic
01:52 - way to think of it is whenever you're
01:53 - using a get command it's something
01:55 - that's not secure that you don't care if
01:56 - someone sees it it's typically just
01:58 - typed in through the address bar where
02:00 - it's just a link you redirect to it and
02:01 - then with posts that's something that's
02:03 - secure it's usually form data and it's
02:05 - something that we're not going to be
02:06 - saving on the actual web server itself
02:09 - unless we're gonna be sending that to it
02:10 - apiece all right so let's now go through
02:13 - a basic example I just want to set up a
02:14 - few different pages here for this
02:16 - example first and then we'll get into
02:17 - actually sending the information so what
02:19 - I want to do is a really basic script
02:21 - where essentially we have a little
02:22 - dialog box
02:23 - someone can you know type in hello they
02:25 - can hit a button it's gonna send that
02:27 - information to the server using a post
02:29 - request which we'll talk about in a
02:30 - second or a post method and then we're
02:32 - gonna display that information on
02:34 - another page so what I want to do is set
02:37 - up a page here for logging in or just
02:39 - actually we'll just say yeah we'll just
02:41 - call it log in for now although it's not
02:43 - really a login we'll give this a
02:45 - decorator so at app dot root and then
02:49 - we're just gonna put slash login now in
02:52 - this decorator I'm actually going to add
02:53 - another aspect that we haven't seen yet
02:55 - which is the methods we can use on this
02:57 - login page so by default whenever you
02:59 - connect or you know go to one of these
03:01 - pages you're gonna go with a get request
03:03 - which means that you know we're just
03:04 - gonna get that information it's not
03:05 - gonna be secure and that's fine but we
03:08 - can actually have different methods so
03:09 - if I wanted to find the different
03:11 - methods that are going to be allowed
03:12 - from these pages I can say methods
03:14 - equals make a list and then put post and
03:17 - get because for this specific function
03:20 - or this specific page we're going to
03:21 - need to use those now inside of here
03:23 - right now actually we'll just return
03:26 - render template and then we won't put
03:28 - anything in here X we haven't created a
03:30 - template and let's create one more page
03:32 - we'll say define user it's actually
03:34 - gonna take the variable USR and then
03:37 - inside here we'll just say return render
03:41 - template and then again in here we'll
03:43 - put something else after so let's do at
03:45 - happy root let's make this dynamic so
03:48 - that we can actually just pass through
03:49 - the user right into here so we'll say
03:50 - slash and in this case user like that
03:53 - and we should be actually this is gonna
03:57 - have to say USR my apologies and
03:59 - actually instead of returning render
04:00 - template I'm actually just gonna return
04:01 - some basic HTML because I just want to
04:03 - make this easy so let's just say you
04:05 - know h1 will do this in F strings will
04:09 - say USR will put an F here and then
04:12 - we'll do a slash h1 to close that there
04:15 - okay so now what I'm gonna do is go and
04:17 - build out this login page just a basic
04:19 - HTML form so inside of my templates what
04:22 - I'm gonna do is create a new file let's
04:23 - just call
04:24 - this log in dot html' and then inside
04:27 - here we'll start creating the form so
04:28 - we're gonna first start by extending
04:30 - that based on HTML so we'll say extends
04:33 - and then here if I could spell this
04:35 - correctly based HTML then we'll do these
04:39 - tags for our title so we'll say block
04:43 - title and then we'll end our block here
04:45 - and then inside here we'll just put
04:49 - login page like that okay so let's do
04:52 - some more blocks for the content we'll
04:54 - just do a quick form here nothing too
04:56 - crazy say a block content percent
05:01 - percent and block and now we'll start
05:04 - building out our form so essentially
05:06 - forms our way that we can actually send
05:08 - information to the website we're usually
05:10 - gonna send information through forms so
05:12 - whenever we know we're gonna be you know
05:14 - getting some information from a form we
05:16 - need to put our form tags in HTML I'm
05:18 - sure most you guys know that but I'm
05:19 - just gonna specify that here and we need
05:21 - to say the action that this form is
05:23 - gonna take now the action essentially is
05:25 - just a URL that we want to redirect to
05:27 - once this form is submitted so in this
05:30 - case I'm actually just gonna put the
05:31 - pound sign which means we're gonna go
05:32 - back to the same page and we're just
05:34 - gonna do you know whatever the same page
05:36 - we were at you know slash pound this is
05:38 - kind of a basic way of just saying you
05:40 - know we're gonna stay on the same page
05:41 - now after action we're also gonna put
05:43 - method and in this case our method is
05:45 - actually going to be post two because
05:47 - we're gonna be posting information not
05:48 - getting information usually if you put
05:50 - get in here that means you're actually
05:52 - gonna fill this form with information
05:53 - that you get from the server okay so now
05:56 - we're just gonna do some basic things so
05:58 - I'm just gonna say P I'm gonna say name
06:00 - and here we'll just ask the user for
06:01 - their name will do another P tag oops I
06:04 - don't want to do form there I'll give
06:06 - you slash P and that P tag and then in
06:08 - here we're actually gonna put an input
06:10 - we'll say type equals if I could end
06:13 - this here type equals text and then name
06:18 - equals and make sure you remember this
06:19 - let's just call this an M just for name
06:22 - and then we'll do another input so we'll
06:24 - actually copy this except this time
06:25 - we're gonna make this a submit button
06:27 - she's gonna say input type equals submit
06:30 - and instead of name we're gonna say
06:32 - value
06:34 - equals in this case we'll just put what
06:37 - should we do submit as the value there
06:39 - okay so now we've built out this form
06:41 - this is gonna be a page that we render I
06:44 - don't think I made any mistakes but
06:46 - knowing me I probably did so in here for
06:49 - rendering this template now what we're
06:50 - gonna do is simply just put in log in
06:53 - dot html' and we don't need to pass that
06:55 - any information all right so we've
06:57 - created the form and we've created and
06:59 - rendered this template now so now what
07:01 - we need to do is figure out how we're
07:02 - actually gonna get this information and
07:04 - handle it from this side so let's start
07:06 - by actually this should hopefully update
07:08 - here so let's actually go and look at
07:10 - the website and go to slash log in and
07:11 - just see what we get so when we go to
07:13 - slash log in we can see this is kind of
07:15 - what we're getting now we have you know
07:16 - a basic little box where we can type
07:18 - some things in and we have a submit
07:19 - button and notice that when I hit that
07:20 - we're posting and you can see that it
07:22 - has this little hashtag here and notice
07:25 - that it's different because it's saying
07:26 - post whereas if I were to refresh this
07:28 - then we're gonna get a get request
07:30 - rather than post okay
07:32 - so awesome that is all we have for now
07:35 - so now what I need to do is actually say
07:37 - how can we determine in this login
07:39 - function whether we called the get
07:40 - request or whether we call the post
07:42 - request what we need to do is start by
07:44 - importing request
07:46 - so we're can import requests up here
07:47 - with render template and now I'm gonna
07:50 - show you how we can check whether we
07:52 - reach this page with a get request or a
07:53 - post request it's pretty basic all we're
07:56 - gonna do is just say if request dot
07:59 - method equals equals and make sure this
08:01 - is in all capitals post then we're gonna
08:04 - do something specific otherwise we'll do
08:07 - something else so in this case what I'm
08:09 - gonna do is move this render down here
08:11 - so if we have the get request what we're
08:14 - gonna do is render the log in template
08:16 - because that means you know we didn't
08:17 - click the submit button we're just going
08:18 - to the slash login page so let's show it
08:21 - here but if we have post what I want to
08:23 - do is actually get the information that
08:25 - was from that little name box and then
08:27 - use that and send us to the user page
08:30 - where we can display the user's name so
08:32 - how do we do that
08:33 - well it's actually pretty easy so all we
08:35 - need to do is actually set up a variable
08:36 - that's going to store our users name we
08:38 - need to say user equals request dot form
08:42 - and then what we're going to do in here
08:44 - is put the dictionary key that we want
08:46 - to axe
08:47 - for the name corresponding with whatever
08:49 - input we had here so in this case we had
08:51 - name equals an M so what we're gonna do
08:53 - is put an M as a dictionary key here and
08:56 - what that's gonna do is actually give us
08:57 - the data that was typed into this input
09:00 - box so we could go as far as to you know
09:02 - make sure that this wasn't blank before
09:04 - we go to the next page what I'm actually
09:05 - gonna do is just use this information to
09:07 - redirect us to the user page I'll show
09:09 - us that show you that example and then
09:11 - we'll talk about this bit more so I'm
09:13 - gonna say return and in this case we're
09:15 - gonna say redirect URL for we're gonna
09:19 - say user and then we're gonna say us are
09:22 - equals in this case use it so now what
09:26 - we should be doing is essentially if we
09:28 - click that submit button it should send
09:29 - us over to this user page and then it
09:31 - should just tell us you know whatever
09:32 - that user is that we saw so let's try
09:34 - this and see if it works let's make sure
09:36 - that this refreshed I think it did
09:38 - so let's actually just go to slash login
09:41 - make sure that gets working so yet slash
09:44 - login working fine let's type Tim and
09:46 - hit submit and there we go we can see
09:49 - that we get redirected to a page that
09:50 - says our name now note that we see a
09:53 - post and then we see get and that is
09:55 - kind of the basic way that that works
09:56 - and let's just go back to slash login
09:59 - what's happening here there we go and
10:01 - then if I go to yeah hello and we do
10:04 - that we could see that hello is showing
10:05 - up on the screen so that is the way that
10:07 - we actually get information from a form
10:09 - and obviously if you had more than one
10:11 - you know input type here then you can
10:13 - get all those information by just using
10:15 - the name as a dictionary key on request
10:18 - dot form so that is kind of the basics
10:20 - behind this notice that you know request
10:23 - up form actually comes in as a
10:24 - dictionary which means that you can
10:26 - access each object using the key so
10:28 - whenever like I said already you have
10:31 - names in here you have multiple things
10:32 - make sure they're unique and then you
10:34 - can actually access all of them by just
10:36 - doing requests top form make sure
10:38 - however before you do this that the
10:40 - method was post and not yet otherwise
10:43 - you may run into an issue so that has
10:45 - been HTTP methods how to get some
10:48 - information from a form I know this was
10:49 - a basic example we didn't go through too
10:51 - much but in the next video we'll go in a
10:53 - more advanced example we'll use the post
10:55 - and the gets and actually go through a
10:56 - login example then we'll get into
10:58 - sessions and some more advanced
10:59 - as always if they're saying you guys
11:01 - would like me to cover in this series
11:02 - leave a comment down below and I'll see
11:04 - you guys in another video