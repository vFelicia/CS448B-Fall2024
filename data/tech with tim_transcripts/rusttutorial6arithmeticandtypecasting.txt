00:02 - [Music]
00:08 - hello everybody and welcome to video 6
00:10 - in this rust programming tutorial series
00:13 - in this video i'm going to be going over
00:15 - arithmetic so really math here in ross
00:18 - with different data types as well as how
00:20 - we perform type conversions and how we
00:22 - cast one type to another this is an
00:25 - important video you may think you know
00:26 - how to do basic arithmetic but if you've
00:28 - not done it in a statically typed
00:30 - language then please watch through
00:31 - because there's a lot of nuances and
00:33 - stuff you need to understand especially
00:35 - related to stuff like overflows which
00:37 - we're going to talk about a fair amount
00:39 - now of course i will mention i do have
00:41 - my course programming expert dot io if
00:43 - you made it to video six check it out
00:44 - it's in the link in the description
00:46 - genuinely a great resource we've had
00:48 - some great feedback on it so far and i
00:50 - spent an incredible amount of time
00:52 - working on that course i promise you
00:54 - it's some of the best work that i've
00:55 - ever delivered so if you like this
00:56 - teaching content then definitely check
00:58 - that out anyways with that said let's
01:00 - dive in here so let's just have a look
01:02 - at some basic variables here and start
01:04 - to kind of get into arithmetic so i'm
01:06 - going to say let x is equal to 9 and
01:09 - don't forget my semicolon this this time
01:11 - and then let y equal 10. now we know by
01:14 - default these are going to be i-32 but
01:16 - i'm going to change these to be u8
01:19 - and 2b
01:21 - now first thing i'll show you is we do
01:23 - have a comment in rust i should have
01:25 - mentioned this earlier but a comment is
01:27 - with two forward slashes now anything
01:29 - after these two forward slashes on the
01:31 - same line will not be read by the
01:33 - compiler it will just be ignored as a
01:34 - comment and what i'm going to do here is
01:36 - just put the range of my uh what do you
01:38 - call it my u8 which is 0 to 255 and then
01:41 - the range here for my i8 we know is
01:43 - going to be negative 128 to
01:46 - 127. now the reason i'm doing this is i
01:49 - want to show you what happens if i put a
01:51 - value here that's outside of the range
01:53 - of this type so for example if i do
01:55 - something like 256. now it may seem
01:58 - obvious but if i go here and i run my
02:00 - code you're going to see that i get an
02:02 - error and it says that the value 256
02:06 - does not fit into the type u8 whose
02:08 - range is 0 to 255
02:10 - so just keep that in mind when we are
02:11 - compiling here
02:13 - if we have an overflow occurring which
02:15 - is what this is
02:16 - you can see here we have this
02:17 - overflowing literals thing and while it
02:19 - says overflow a few times we're going to
02:21 - get a problem because well this literal
02:22 - is out of the range for u8 and by the
02:25 - way a literal is when we're actually
02:27 - typing out a primitive value here uh it
02:29 - may not only be primitive values that
02:31 - may be slightly inaccurate but a literal
02:33 - is literally like typing 256 or typing 1
02:37 - or typing 1.23 these are known as
02:39 - literal values uh anyways okay so that's
02:42 - what happens when we do that now the
02:43 - same thing would happen with i8 and if
02:46 - of course if i try to do something like
02:47 - negative 9 we're going to get that same
02:49 - problem it doesn't fit in u8 okay so
02:51 - that's fine next though let's move on to
02:53 - adding these values so clearly you know
02:55 - you may want to add these together so
02:57 - let's say let z equal x plus y we'll add
03:00 - a semicolon and we'll just print the
03:02 - result here so take a guess at what you
03:04 - think the results going to be here if
03:06 - you think this is work is going to work
03:07 - if it's not going to work why it may not
03:09 - work but let's go and let's run the code
03:13 - and notice that we get another error
03:14 - right it says expected u8 but found i8
03:16 - there's no implementation for u8 plus i8
03:20 - so even though as humans this looks easy
03:22 - we can add 12 plus 10 we know it's going
03:24 - to be 22. the computer cannot do this
03:26 - because they are different data types we
03:28 - have an unsigned integer and we have a
03:29 - signed integer and there's no
03:31 - implementation for how we add these two
03:33 - values together even though they have
03:35 - the same number of bits so keep that in
03:37 - mind you just can't do this right i
03:38 - can't add types that are not the exact
03:40 - same i would need to change one of these
03:42 - types to be able to add them so if i
03:43 - change this to i8 then of course i'm
03:46 - going to be able to add them this works
03:47 - fine it's 22 but if i do something like
03:50 - i 64 plus i8 you'll see we get the same
03:53 - error there's no implementation for i64
03:56 - plus i8 so this can be frustrating
03:58 - because sometimes you'll have values
04:00 - that are the same base type like the
04:02 - same integer or same unsigned integer
04:04 - but they have a different number of bits
04:06 - and you need to convert one of the types
04:08 - to another type to be able to add them
04:09 - together which i'm going to show you in
04:10 - a minute now this is the same with
04:12 - floating types of course so if i have my
04:14 - f32 and i have my f64 you'll see that we
04:17 - get the same problem here uh notice i
04:19 - can't add them together whereas now if i
04:21 - change this to be f32
04:24 - and i add them um actually what's this
04:26 - saying f3210 expected f32 but found
04:29 - integer use a float literal okay so it's
04:31 - actually telling me that i can't assign
04:33 - i should have saw that before a uh
04:35 - integer value which is this 2af32 type
04:38 - so if i want to make this an f32
04:40 - compatible type i need to add my dot
04:42 - zero actually wasn't aware of that um
04:45 - again guys i'm just learning rest two so
04:46 - there's going to be some times like that
04:47 - where i make a small mistake
04:50 - regardless though you get the point you
04:51 - can see now that we're able to add we
04:53 - get our value of 22 because we made
04:55 - these the correct float types
04:57 - awesome okay continuing here let's look
05:00 - at what happens when we do some division
05:02 - subtraction etc so let's go something
05:04 - like u8
05:06 - u8 let's make this something like 255
05:09 - and let's make this one so now take a
05:11 - guess of what you think we're gonna get
05:13 - when we add 255 plus one and we print
05:16 - this out and notice that we actually get
05:17 - an error here it says attempt to compute
05:19 - u8 max plus one underscore u8 the max is
05:22 - just the maximum possible value from u8
05:25 - which is 255. now this is saying this
05:27 - would overflow and an overflow occurs
05:30 - when we don't have enough bits to
05:32 - represent the number that would be
05:34 - generated by adding these two values so
05:36 - adding 255 and one together would
05:38 - generate an overflow which means we
05:40 - actually can't run this code we can't
05:42 - compile it because we know an overflow
05:44 - would occur and well we can't allow that
05:46 - in rust now there is ways to make it so
05:48 - that you are able to overflow but
05:50 - typically you do not want to be
05:51 - overflowing and that's what's going to
05:53 - occur here if we try to do this addition
05:55 - so to fix this problem we would then
05:56 - have to cast both of these types uh to
05:58 - something larger so something like u16
06:01 - so we have enough bits to add them and
06:03 - then we would be able to add them
06:04 - together again we'll get into the type
06:06 - casting in a minute but i just wanted to
06:08 - show you some of that okay continuing
06:10 - here let's try to do something like y
06:12 - minus x
06:13 - okay now again we're going to get an
06:15 - overflow error here because we're going
06:17 - to have a negative value that we're
06:18 - trying to represent and we can't do that
06:20 - right 1 minus u8
06:22 - minus the maximum value of u8 is going
06:25 - to give us an overflow doesn't allow us
06:26 - to do that
06:28 - okay now let's do some stuff that makes
06:30 - a bit more sense
06:31 - so let's try to do 255 divided by 10. so
06:34 - let's try to do x divided by y now these
06:37 - are the same types so this division
06:38 - should work when i do my x divided by y
06:41 - and i run this code notice that i get
06:43 - 25. now this is not going to be a whole
06:46 - number division right i don't know
06:47 - exactly what 255 divided by 10 is but
06:50 - it's not going to be 25 it's 25
06:52 - point something because we have five
06:54 - more here however we're just getting 25
06:57 - because the result of any arithmetic
06:59 - operation we perform is always going to
07:01 - be the same type as the two operands in
07:04 - our arithmetic operation so we have the
07:06 - operands which we're using the operator
07:08 - and that means our result is always
07:10 - going to be the same type of the
07:11 - operands which is u8
07:13 - so this will be of type u8 meaning we
07:15 - can't store a floating point value so
07:17 - this does not implicitly get like an f32
07:19 - type or something like that and if i
07:21 - tried to say make this an f32 you'd see
07:24 - that we get an error because this
07:25 - operation returns a u-int type so let's
07:28 - see how we now actually get a floating
07:30 - point value well let's change this to an
07:31 - f64
07:33 - and this will be an f64 as well
07:35 - and as we saw previously we need to add
07:37 - the dot zero here so this is a valid
07:39 - float type
07:40 - now let's do x over y and let's see what
07:43 - we get uh and previous error what is
07:45 - this saying here oh i need my semicolon
07:47 - i keep forgetting it
07:48 - okay let's go back
07:50 - let's run and notice i now get my 25.5
07:54 - which is the correct answer for this
07:55 - division and now this type here will be
07:57 - an f64 because it's the same type as
08:00 - their operands awesome okay so that is
08:02 - division now we have multiplication
08:04 - using an asterisk same thing applies
08:05 - here we're going to get an f64 type if
08:07 - our operands are f64 so let's run this
08:10 - and notice that i get my 2
08:12 - 50.
08:13 - all right so those are the core
08:15 - operators addition subtraction division
08:17 - and multiplication now i want to quickly
08:19 - show you the mod operator so the mod
08:21 - operator is a percent sign i'm sure many
08:23 - of you are familiar with it it's going
08:24 - to give us the modulus or the remainder
08:27 - after division of these values so x mod
08:30 - y should give us 5 because 255 goes into
08:34 - 10 25 times then we have a 5 left over
08:37 - that's our remainder and so that's what
08:39 - we'll get cargo run and notice we get
08:41 - five all right so now that we've looked
08:43 - at that i want to show you how we do
08:44 - type conversions in casting and how we
08:46 - add values of different types so first
08:49 - let's look at how we can actually write
08:51 - literals as a specific type so often
08:54 - times in rust you're not going to
08:55 - explicitly define the type you're just
08:56 - going to let the compiler do it
08:58 - implicitly for you however like if i'm
09:00 - looking at 255 here the default of this
09:03 - is going to be an f64 right the default
09:05 - type is f64 for floating point values
09:08 - but what if i want this to be an f32
09:10 - without explicitly defining the types
09:12 - without having to do something like f32
09:14 - there's a few ways to do this but the
09:16 - first way is to simply write f32
09:19 - directly after the number so when i do
09:21 - this i'm pretty much saying i want to
09:22 - treat 255.0 as an f32 data type and we i
09:26 - mean we can do the same thing with 10
09:27 - here and now when we run the code notice
09:30 - that this is all good and we get our
09:32 - value of five okay so that's one way you
09:34 - can just write it like this
09:36 - of course i could write something like
09:37 - you know i ate as well if this was a
09:39 - valid type for it since we had the
09:41 - decimal i wasn't getting the syntax
09:42 - highlighting before and that's one way
09:44 - to do it now another way to do it is
09:46 - just use an underscore so if i do
09:48 - something like 255 underscore i8 this
09:51 - will be the same thing i mean let's
09:52 - prove it so let's go 10 underscore i8
09:55 - here let's do our modulus
09:57 - let's run this
09:59 - and of course i get an error because i
10:00 - accidentally put 255 here which is out
10:02 - of the range so let's just go 127 and
10:05 - let's rerun and notice all is good okay
10:08 - so we can use an underscore to separate
10:10 - and one thing to note too is that we can
10:12 - use multiple underscores to make our
10:14 - numbers more readable so for example
10:15 - let's just make this i-64 so we have
10:17 - some more bits here and i-64 if i wanted
10:20 - to have 127 000 then i could do this and
10:23 - that is equivalent to 127 000. so if i
10:25 - do that uh actually let's just go
10:28 - divided by y
10:30 - and i run the code here then notice this
10:32 - is good and i get my twelve thousand
10:34 - seven hundred okay so that is one way to
10:36 - do it the next way to do it is to write
10:38 - the as keyword and then the type we
10:40 - wanna write this as so i can write this
10:42 - as an i-64 and this will accomplish the
10:44 - same thing when i run this i get this as
10:47 - an i-64 data type now this is also how
10:50 - you do explicit type conversion so here
10:53 - i have my x right we know this is an
10:55 - i-64 let's now change this type here to
10:58 - be an i-32 though we know that we're
11:00 - going to get an error when we try to
11:01 - perform our arithmetic because they're
11:03 - not the same types so
11:05 - what i can do here is i could say
11:07 - parenthesize my x
11:09 - and i could convert this to an i 32 or
11:12 - what would be better is if i convert my
11:14 - y
11:15 - to b
11:16 - a i 32 or to be an i-64 sorry so what
11:20 - i'm doing here is i'm essentially taking
11:21 - the type that has the least number of
11:23 - bits in this case it's i-32 and i am
11:25 - casting it to a type that has more bits
11:28 - than it so i'm going from a 32 to a 64
11:30 - and now this should allow me to perform
11:32 - this arithmetic
11:33 - so let's go here
11:35 - and clear
11:36 - and run and notice this works completely
11:39 - fine i actually don't need the
11:40 - parentheses but personally i like adding
11:42 - them just because it makes it kind of
11:44 - more clear right so if i don't add the
11:45 - parentheses same thing works
11:47 - okay so there you go that is how you
11:49 - perform a what is it uh explicit type
11:52 - conversion so as we
11:54 - saw rust will not automatically convert
11:56 - the types for us we have to manually
11:58 - convert them and here what i'm doing
11:59 - again is i'm going from the smaller type
12:01 - to the larger type because if i were to
12:03 - go the other way then an overflow could
12:05 - potentially occur for example if i do x
12:08 - as i 32 i believe this will be fine now
12:11 - because 64 to 32 i think 32 will be
12:14 - enough bits for this uh but if it wasn't
12:16 - then we would get an overflow so that
12:18 - worked fine but if this was a really
12:20 - large number i don't know what the range
12:22 - is for 32 so actually let me try
12:25 - something here just because i don't know
12:26 - what the maximum value is so i'm going
12:28 - to go i 32
12:30 - colon cool and max to get the maximum
12:32 - value i'm going to say that's as an i-64
12:36 - and then i'm going to add one to it
12:39 - and i think this should just work by
12:40 - default because one will be an i-64 okay
12:42 - so let's do that for x uh and then let's
12:45 - try to convert x to b and i-32 and we
12:47 - should get an overflow because we're
12:49 - having uh two me the values too large to
12:52 - convert to an i-32 right okay so let's
12:54 - run this here let's go cargo run
12:56 - and okay so this is what i was talking
12:59 - about so here we're getting an overflow
13:01 - without it actually telling us that
13:02 - there's an overflow so we had i-32 max
13:05 - as i-64 we added one to it and now we
13:08 - have one value larger than the maximum
13:10 - value that can be stored in i-32 then
13:13 - what we do here is we say okay we're
13:15 - going to take x as an i-32 value and
13:18 - we're going to divide that by y which is
13:20 - already an i-32 value now when we do
13:22 - that we should be getting a positive
13:24 - number right if we're getting the
13:25 - correct result but we're not we're
13:27 - getting this really large negative
13:28 - number because what happens is we have
13:30 - an overflow so when we try to convert x
13:34 - to the i-32 we get a massively negative
13:36 - number because of kind of the way that
13:38 - this is structured now when an overflow
13:40 - occurs we actually use something called
13:42 - two's complement wrapping uh to kind of
13:45 - wrap the value and convert it to a
13:47 - smaller value i'm not going to get into
13:48 - that in this video but that's what's
13:50 - occurring and why we're getting this
13:51 - weird behavior hence why you need to be
13:53 - careful here and notice the compiler
13:55 - didn't actually catch this error because
13:57 - it wasn't written as obvious as when we
13:59 - had literals written in and we were kind
14:01 - of converting them and you know causing
14:03 - an overflow more obviously so here
14:05 - overflow occurred compiler did not catch
14:07 - it and well
14:08 - that's no good we don't want that to
14:10 - happen so that's why i was saying you
14:12 - want to convert the smaller value to the
14:13 - larger as opposed to the other way
14:15 - around okay now that we have looked at
14:17 - that let's look at how we convert a
14:19 - string from user input into a number and
14:22 - then we can end the video here because i
14:24 - think i've gone through most of the type
14:26 - conversion also i will note that we
14:27 - could convert this to a float as well
14:29 - right so i don't want to do it in that
14:30 - format but if i do something like 10
14:33 - underscore
14:34 - f32 or i write 10 as
14:37 - f32 that's fine so long as i can convert
14:40 - this number to a float
14:42 - okay
14:42 - so let's have a look at uh grabbing user
14:45 - input again and then converting that
14:46 - string to a number maybe adding it and
14:48 - putting it out on the screen so let's
14:50 - say use standard output
14:52 - our center library sorry io
14:54 - now let's create our string variable so
14:56 - we're going to say let mutable
14:59 - input
15:00 - equal string new and then we're going to
15:03 - say std not a c i o colon colon
15:07 - and this is
15:08 - read line i believe
15:11 - dot expect okay and for read line we're
15:15 - going to pass our mutable reference to
15:17 - the
15:18 - input okay and then we're going to
15:20 - expect and say
15:23 - expected to read line
15:27 - whatever that's fine for now
15:29 - and then we could say print ln
15:31 - exclamation point and for now we'll keep
15:33 - it simple
15:34 - and just print the input let me add my
15:37 - semicolons
15:38 - and let's see if i mess this up quite
15:40 - possible so let's clear
15:42 - and run and i got a problem not found in
15:44 - io ah read line is it read lines ah my
15:48 - apologies guys this is std in sorry and
15:51 - then dot read line just forgot that one
15:54 - part okay let's try this now though just
15:56 - confirm
15:57 - and
15:59 - if i go here hello we get hello okay
16:01 - great all right so now that we have our
16:02 - user input let's convert this to an
16:04 - integer to do that i'm going to say let
16:06 - int input and then i need to specify the
16:09 - type here for this conversion to work
16:11 - properly so i'm going to make this an i
16:13 - 64. okay and this is going to be equal
16:15 - to input dot trim now what dot trim does
16:19 - is it's a method we can use on our
16:20 - strings and it's going to return what's
16:23 - known as the escape character or the new
16:26 - line character that we're going to get
16:28 - at the end of the line when we hit enter
16:30 - to kind of submit what we typed so if i
16:32 - go back here to my console
16:34 - every time
16:35 - i hit the enter key here there's a
16:37 - special character that's kind of fed
16:39 - into the terminal telling me to go to
16:41 - the next line and to execute in this
16:42 - case the current command now we're going
16:44 - to get that as a part of our input but
16:47 - it's an invisible character that doesn't
16:49 - show up in the terminal so when we print
16:50 - our input back we don't see it but it is
16:52 - actually there so if we don't remove it
16:54 - using dot trim which is what dot trim
16:56 - does it removes that kind of invisible
16:58 - character uh then we're gonna get an
17:00 - error when we try to do our conversion
17:01 - so make sure you do that trim first
17:03 - we're then going to say dot parse now
17:05 - dot parse is what's going to return a
17:07 - result which is going to parse this
17:09 - string and give us an integer if it's
17:12 - capable of being converted to the type
17:13 - in 64. then we're going to say dot
17:16 - unwrap
17:17 - and this is kind of similar to the dot
17:19 - expect except what this is going to do
17:21 - is it's going to take any valid kind of
17:24 - integer result here and unwrap it into
17:26 - the actual integer type and return that
17:29 - to us
17:30 - that's what's going on so that's what we
17:31 - need there trim parse and unwrap and
17:34 - then we can just print out here the int
17:35 - input
17:37 - and for now let's just go with something
17:38 - like plus two uh just so we can see if
17:41 - this is actually working properly so
17:43 - let's go back to our terminal here uh
17:45 - let's go
17:46 - cargo run
17:48 - okay
17:48 - and now it's allowing me to type so let
17:50 - me type a valid integer like one two
17:52 - three and then we get one two five nice
17:54 - so the addition is working properly now
17:56 - let's see what happens if i type
17:57 - something that's not a valid integer
17:59 - like hello notice i get a problem and it
18:01 - says we called unwrap on an error value
18:03 - so the result returned an error we can't
18:06 - unwrap it until we get our runtime
18:08 - exception that's what this is
18:10 - let's run this again let's go with
18:11 - something like one two three four five
18:13 - okay we got one two three four seven now
18:15 - let's just try with a negative value
18:16 - something like negative nine we get
18:18 - negative seven okay so that is working
18:20 - as we expected uh one more time let's go
18:23 - with something like 9.8 we get an
18:24 - exception because this is a floating
18:26 - value not an integer
18:29 - all right so let's clear that so that is
18:31 - really all i wanted to show you in this
18:33 - video kind of the different arithmetic
18:35 - operators how you work with different
18:37 - types how you perform a type cast or
18:39 - conversion you saw we can do that using
18:41 - the as keyword uh and then what happens
18:43 - when we have integer overflows as well
18:45 - as how we convert a string to an it will
18:48 - look at all of this throughout the rest
18:49 - of the videos of course we're just
18:51 - slowly building and building and
18:52 - building and we'll do some more advanced
18:54 - examples once we learn about some more
18:55 - advanced features with that said if you
18:57 - guys enjoyed make sure to leave a like
18:58 - subscribe to the channel and i will see
19:00 - you in the next one
19:03 - [Music]