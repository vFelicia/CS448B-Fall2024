00:00 - hey guys and welcome back to another
00:02 - YouTube video so in today's video I'm
00:04 - doing the seventh tutorial in my pug
00:06 - game programming series and in this
00:09 - video we're gonna be talking about
00:10 - collision
00:11 - so specifically collision between the
00:13 - bullets and art Goblin that we did in
00:15 - the last tutorial so you can see here
00:17 - when we we have our little character you
00:18 - can shoot as bullets or goblin runs
00:20 - around the screen and I've got these
00:22 - little red boxes around my characters
00:24 - here now they look very oversized but
00:27 - currently this is actually what our
00:29 - characters hitboxes look like now to do
00:34 - collision we typically use boxes in
00:36 - pygame just because it's easier you can
00:39 - use trigonometry if you're doing stuff
00:41 - with circular objects but we're just
00:42 - gonna ignore that for now because it's a
00:44 - lot easier to do with squares now the
00:46 - way that the hitbox works is pretty much
00:47 - as soon as these two boxes come in
00:50 - collision with each other so one is
00:52 - inside of the other we're gonna say that
00:53 - the two objects are colliding now
00:55 - clearly these hitboxes are not perfect
00:57 - and they are not correctly around our
00:59 - characters they should be shrunken in a
01:01 - little bit and probably moved down so
01:04 - that they're touching each edge of our
01:06 - character
01:06 - now you could prove to you this is
01:08 - actually the hitbox of our character
01:09 - because when I go to the edge of the
01:11 - screen here remember we've said that our
01:13 - character X which is here plus the width
01:16 - if that's gonna be past the edge of the
01:18 - screen we're not gonna let it move and
01:19 - same thing on the left hand side here
01:21 - it's not gonna be quite perfect but you
01:23 - can see that the same thing goes for
01:24 - here it's not letting us move off the
01:26 - screen like that so that is indeed our
01:29 - hitbox and the reason it's so big is
01:31 - because the images that we downloaded
01:32 - are 64 by 64 but the actual populated
01:36 - areas of pixels is not that much so we
01:38 - have to now create the hitboxes for
01:40 - these characters so that when we are
01:42 - shooting our bullets at the character
01:44 - they collide properly I'm also going to
01:46 - show you guys how to fix these these
01:48 - bullets from shooting out like the same
01:49 - time you can see how they shoot two at
01:51 - once it's pretty easy fix and I'll do
01:53 - that later in the video so make sure you
01:55 - stay for that okay so let's get right
01:57 - into it so in order to fix these
01:59 - hitboxes we just need to manually define
02:02 - them so this is what a lot of game
02:04 - developers will actually do and I know
02:06 - it seems tedious right now but it's easy
02:08 - because it's easy to do it's better to
02:10 - do now actually because once you do it
02:12 - then any
02:13 - to the class you create later we'll have
02:14 - a hitbox that's adapted to that so I'm
02:18 - just gonna open up on my other screen
02:19 - here you guys can't see it the perfect
02:22 - like dimensions for the hitbox is just
02:23 - so we don't have to play around with it
02:24 - too much but if you have a different
02:26 - character different sprite you've used
02:27 - you're just gonna want to play around
02:29 - with the hitbox on it maybe move it left
02:31 - to right move it up and down until it
02:33 - looks like it's about on your character
02:35 - so what I'm gonna do here I'm just gonna
02:37 - copy and paste this in is in my player
02:39 - class up here in the first
02:42 - initialization method I'm just gonna do
02:44 - self-thought hitbox and then I'm gonna
02:45 - set it equal to this so it's gonna be
02:48 - make sure you have these brackets not
02:49 - the square brackets we're gonna do self
02:51 - dot X plus 20 self dot y 28 and 60 now
02:55 - you might notice that this is actually a
02:57 - rectangle so whenever you have four
02:58 - things inside of a tuple typically we're
03:01 - just refer to that as a rectangle
03:03 - because this is gonna be the X this is
03:05 - the Y and this is the width and the
03:07 - height now conveniently this is actually
03:10 - the argument that our draw function or
03:12 - what you call it function draw method
03:14 - takes for drawing something on the
03:16 - screen so we've created a rectangle here
03:18 - but inside of this box I'm just gonna
03:21 - write the self dot kit box so now it's
03:24 - gonna be drawing our new hitbox now for
03:26 - our player our player can move right so
03:28 - if we just define this hip box at the
03:30 - beginning then our hip box is not going
03:32 - to be moving with our player so we're
03:33 - gonna copy this again and we're gonna
03:35 - need to paste it at the bottom of our
03:37 - draw method here so this way every time
03:40 - we draw the character we're gonna be
03:41 - moving the hitbox with it and changing
03:44 - that hip box so that we can check for it
03:46 - and you understand what I mean in a
03:48 - little bit if you don't get it now so
03:50 - we're gonna go down to the enemy now and
03:52 - for the enemy the hip box is slightly
03:54 - different but it's pretty similar so I'm
03:56 - just gonna do self-taught hip box again
03:58 - as an attribute and in our
04:00 - initialization method we're just gonna
04:02 - paste it and just copy this down so self
04:05 - dot X plus 20 self dot y 28 and 60 now
04:09 - that is what it is for our enemy and
04:11 - same thing every time we move our enemy
04:14 - we need to change the hitbox so at the
04:16 - bottom of our draw we're gonna change
04:18 - the hip box simply by doing that now
04:21 - again we need to make sure we're
04:22 - actually drawing this new hip box so in
04:24 - our draw
04:25 - that we've done here we're going to just
04:28 - write self up a box and the reason we
04:31 - don't need to put brackets around it is
04:32 - because we already have the brackets
04:34 - here we're gonna save the program and
04:36 - run it and see what happens and there we
04:39 - go we get our hip boxes now you can
04:41 - probably tell that they're not perfect I
04:43 - could probably play around with them a
04:45 - bit more to make them better I'm gonna
04:47 - fix this guy actually right now just
04:49 - because his hip his hip box is a little
04:51 - bit off the Goblin it's fine for right
04:54 - now I don't I'm not gonna worry about it
04:56 - that much so let's go back up to the
04:59 - player character here and this would I
05:00 - mean once you create the hip box you're
05:01 - gonna have to play around with it a bit
05:02 - just to make sure everything's perfect
05:04 - so we'll go here and we're gonna change
05:08 - this to 17 and we're gonna change this
05:12 - self-taught why we're gonna add 11 to it
05:14 - I'm gonna change this to 29 and we'll
05:18 - change this to 52 and these are the
05:20 - numbers I was looking for before and
05:22 - we're just going to copy these so ctrl C
05:23 - and I'm gonna paste it up here as well
05:27 - so just were consistent and then we're
05:29 - gonna go down to our enemy here and
05:31 - we're gonna change these ones a little
05:33 - bit too so for our self-taught enemy or
05:36 - just for our enemy what am I saying we
05:38 - need to just change this to instead of
05:40 - 20 we're gonna be using 17 so let's
05:44 - change this one first
05:45 - 17 self don't why we're gonna add 2 to
05:49 - that we're gonna change this to 31 the
05:52 - width and we're gonna change the height
05:54 - to 57 then you can go ahead copy dot
05:57 - paste that up here where our other hip
06:00 - box is defined and we're gonna run the
06:03 - program one more time and see how that
06:04 - looks and that looks much better
06:06 - there we go so the hip box is now our I
06:09 - would say almost perfect again it
06:11 - doesn't matter too much if they're like
06:12 - a pixel or two off just try your best to
06:15 - get them as close as you can and
06:16 - obviously with the walking animation
06:17 - they're gonna not be perfect all the
06:19 - time but that's good enough for me and
06:21 - now we're gonna get into the collision
06:23 - so what we want to happen here is we
06:24 - want these circles to be able to collide
06:28 - with that rectangle and when that
06:31 - happens we're simply gonna print to the
06:32 - screen that we hit the Goblet now you
06:35 - guys can do whatever you want when we
06:36 - hit the Goblin you can make like
06:37 - explosions come off you can
06:39 - make it say something can make the
06:40 - Goblin disappear we can play with that
06:42 - in the next video but right now we
06:43 - simply want to get the collision working
06:46 - so that we know when the character is
06:48 - hit so this is a little bit harder than
06:50 - it looks the first thing we're gonna do
06:51 - is just in our enemy class here we're
06:54 - just gonna define a new method we're
06:57 - gonna call this one hit and it's gonna
06:59 - take the argument or parameter self then
07:02 - we're gonna pass in here now this is
07:04 - what you guys are gonna do every time
07:05 - that the goblin gets hit so for me I'm
07:07 - actually just gonna print hit you guys
07:10 - can do whatever you want in here once
07:11 - the Goldmann gets hit that's all I'm
07:13 - gonna do for right now okay so now that
07:16 - we've done that we need to check for
07:18 - collisions so the way we're gonna check
07:20 - for collision is in our main loop here
07:21 - and we're pretty much just gonna check
07:23 - every time the bullet is shot so not
07:26 - show up in it like if a bullet is moving
07:28 - across the screen that's why we have
07:29 - this for loop for all the bullets in
07:31 - this for loop we're gonna check if the
07:34 - bullet has collided with B goblin now to
07:36 - do this there's a few if statements and
07:41 - else statements we need to include now
07:43 - it's a little bit complex but pretty
07:45 - much if we run the program an easy way a
07:47 - good way to understand it is always like
07:49 - drawing and visualizing stuff in
07:51 - programming is when we shoot the bullet
07:53 - we need to see if it is inside of this
07:56 - rectangle now if it's inside of the
07:59 - rectangle then we're gonna say it hit if
08:01 - it's not inside of the rectangle then it
08:02 - didn't hit right so if we jump up here
08:04 - although the X's might be the same as
08:06 - the X's here we need to make sure that's
08:08 - inside the rectangle so it has to be in
08:10 - between the two Y values of our square
08:13 - and that'll make sense as I explain this
08:15 - here so before we start moving the
08:18 - bullets what we're gonna do is we're
08:20 - gonna do an if statement here and we're
08:22 - just gonna check if the bullets are
08:24 - within the same y-coordinate so within
08:26 - the top and the bottom of the rectangle
08:28 - of our goblin so if the y coordinate of
08:32 - our bullet is in between the top and the
08:35 - bottom of our rectangle then that means
08:37 - that the y coordinate of our bullet
08:39 - which is in the middle of our bullet
08:41 - which is an issue so we need to add or
08:44 - we need to actually subtract the radius
08:45 - here so that we are checking the bottom
08:48 - of the or the top of the bullet sorry if
08:51 - that is
08:52 - less than our Goblin hitbox of dot
08:56 - hitbox and we're gonna use the
08:58 - y-coordinate the hitbox here plus the
09:00 - goblin dot hitbox and this is gonna be
09:04 - our what do you call it our height so
09:08 - goblin da hitbox of three so if this
09:12 - means if we are less than if we are
09:14 - above the bottom of our rectangle and
09:16 - now we need to check if we are below the
09:20 - top of our rectangle so now if bullet
09:22 - dot dot y plus bullet dollar radius so
09:28 - this means the top of our bullet or the
09:30 - bottom of our bullet sorry is less than
09:33 - or greater than and now we do goblin dot
09:37 - hitbox and just the y-coordinate here so
09:43 - now this part here this checks to make
09:46 - sure that we are above the bottom of the
09:47 - rectangle of our goblin and this part
09:51 - here checks to make sure that we are
09:53 - below the top of the rectangle now just
09:55 - because we meet those two criteria does
09:57 - not mean we've hit the the goblin so to
10:01 - see if we hit the goblin we now need to
10:03 - check the left side and the right side
10:04 - and make sure we are in between that so
10:07 - to do that similarly we're gonna do if
10:09 - bullet dot X and so instead of Y minus
10:13 - the radius or plus bullet the radius
10:16 - what am i doing and here we're gonna
10:19 - need to make sure we have bullet so that
10:21 - this works
10:21 - can't just put radius like I've been
10:23 - putting their full thought radius so
10:26 - plus the bullet radius if this is
10:28 - greater than the Goblin
10:30 - don't hit box x coordinate so hit box
10:35 - euro this access is our x coordinate
10:37 - this means that we are on the right side
10:40 - of the left side of the rectangle hope
10:44 - that makes sense there and our bullet
10:49 - dot X minus our bullet dot radius is
10:56 - what is it here we're gonna have to make
10:59 - sure that it is less than
11:01 - the right side so to do that we then
11:04 - need to do goblin dog hitbox 1-0 sorry
11:11 - cuz we're accessing the x+ goblin dog
11:13 - hitbox 3 or hitbox 2 because that's
11:16 - gonna be the width alright and that
11:19 - should hopefully work so now if that is
11:23 - all good so that means that we've
11:25 - satisfied all these conditions now then
11:28 - that means we have to we have to do
11:30 - something here so if we are within the
11:32 - y-coordinates we are within the
11:34 - x-coordinates then we just have to do
11:37 - hits right so we're gonna do goblin dog
11:39 - hit and this is what happens when the
11:41 - golden gets hit it's gonna come up here
11:44 - it's gonna call this it's gonna print
11:45 - hit now we also want to make sure that
11:48 - when we hit the goblin our bullet
11:50 - disappears so to do that we're gonna do
11:53 - the same thing that we did here when we
11:54 - were moving the bullets and we're simply
11:57 - gonna remove the bullet from the list
11:59 - now we already did this so I'm not gonna
12:02 - explain how it works but it just removes
12:04 - it from the list so just just put that
12:06 - there and we can go ahead now and we run
12:09 - the program and hopefully everything
12:11 - should be working all right so we've got
12:14 - our two little characters with their hip
12:15 - Fox and when I shoot my bullets and they
12:18 - hit the goblin you can see that it says
12:20 - hit now yes sometimes they hit at
12:22 - different points so sometimes you can
12:24 - see they disappear instantly other times
12:26 - they take longer they go further into
12:28 - the box that's fine they're still
12:30 - hitting now the last error that we need
12:33 - to address here the last thing is the
12:35 - fact that our bullets shoot in like
12:36 - groups of two in groups of three now
12:38 - it's actually a pretty easy fix so just
12:41 - follow along right here we're gonna need
12:42 - to create a variable to do this and I'm
12:44 - just gonna call this shoot loop you can
12:47 - call whatever you want
12:48 - I know shoot looks kind of weird name
12:50 - but that's what we're gonna use and at
12:51 - the end of our when we're shooting the
12:54 - bullets here so when we hit space I'm
12:56 - just gonna do shoot loop equals 1 now
13:02 - I'm gonna come back up here and I'm just
13:04 - gonna write a little bit of stuff here
13:06 - and I'll explain how it works after so
13:08 - we have if shoot loop is greater than 0
13:11 - then
13:13 - shoot loop plus equals one and then if
13:18 - shoot loop is greater than three shoot
13:25 - loop equals zero and then I'm gonna come
13:28 - down here and I'm going to say and shoot
13:32 - loop equals equal to zero okay so I like
13:34 - fast there but pretty much what happened
13:36 - to you and this just fixes our issue by
13:38 - setting like a really basic timer is we
13:41 - say we're only gonna allow the user to
13:44 - shoot a bullet if the bullet cool down
13:47 - is Matt so the bullet cool down is what
13:49 - we're gonna be calling shoot loop pretty
13:51 - much so when we first shoot a bullet
13:53 - we have shoot loop equals 1 then we run
13:56 - through the while loop we go through the
13:58 - rest of it we come back up to the top we
13:59 - save shoot loop is greater than 0
14:01 - meaning that it is 1 or greater then
14:04 - we're gonna add 1 to it so we start at 1
14:07 - we go to 2 and then if it's greater than
14:10 - 0 it's gonna be set to do it's not
14:12 - greater than 0 in this instance so
14:13 - there's only two right now we come down
14:15 - here say we're spamming the spacebar uh
14:17 - it's not working because our shoot loop
14:20 - is not equal to 0 yet then we're gonna
14:23 - go through the while loop again it's
14:24 - gonna become 3 is it greater is shoot
14:27 - loop greater than 3 no it's not we're
14:28 - gonna go through it again and then
14:30 - eventually once it becomes 4 we're gonna
14:31 - set this equal to 0 this is now gonna be
14:34 - met and it's gonna allow us to hit space
14:36 - you don't really worry if you don't
14:38 - understand how that works pretty much
14:40 - it's just setting a really basic timer
14:42 - for like a few milliseconds to make sure
14:44 - that we can't just spam the spacebar and
14:46 - shoot multiple bullets anyways let's see
14:49 - if this works and now you can see that
14:53 - was really beginning there it shoots
14:54 - only one bullet at a time and I can't
14:56 - just like that's as much as I can spam
14:58 - the spacebar like that so that it kind
15:00 - of gives like a break between bullets
15:02 - and yeah there you and we also have that
15:05 - limit so you can only have 5 bullets on
15:06 - the screen at a time and that's also
15:08 - just to reduce lag and so that you can't
15:11 - just like continually span the space bar
15:13 - and you can see every time we hit the
15:14 - Goblin it says hit and everything seems
15:16 - to be working pretty well now in the
15:19 - next video I'm gonna go on to make sure
15:21 - to make this player collide with the
15:23 - Goblin if you guys feel so
15:26 - feel confident about what I just showed
15:28 - here you might want to try to do this by
15:30 - yourself so you can see if you can get
15:32 - the player to hit the Goblin a little
15:34 - bit more complicated but not really not
15:36 - that much and if you guys want to add
15:39 - something else to try to see if you can
15:41 - add like a little score variable that
15:43 - says how many times the Goblin gets hit
15:45 - pretty straightforward if you guys
15:48 - enjoyed the video please leave a like
15:50 - and subscribe to the channel if you have
15:52 - any questions or concerns leave a
15:53 - comment down below and I'll be sure to
15:55 - get back to you and yeah see you guys
15:57 - again in the next tutorial
16:02 - [Music]