00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial for beginners
00:04 - in this video i'm going to be covering
00:06 - pointers now in the previous video i
00:08 - covered references
00:09 - please make sure you watch that before
00:10 - moving on to this video or you at least
00:12 - know what references are
00:14 - because that knowledge is going to be
00:15 - important to understand what i explain
00:17 - here
00:17 - so with that said let's talk about
00:19 - pointers
00:22 - [Music]
00:28 - all right so i've actually brought out
00:30 - the drawing tablet here to start
00:31 - explaining pointers kind of the
00:33 - blackboard whiteboard whatever you want
00:35 - to call it
00:36 - and anyways i think this will be helpful
00:37 - because i can do some illustrations and
00:39 - it will make it more clear you guys can
00:40 - actually see you know a visual of what's
00:42 - going on
00:42 - when we create a reference or we create
00:44 - a pointer with that said the what
00:46 - is a pointer now a pointer is actually a
00:49 - variable
00:50 - that stores the memory address location
00:53 - of
00:53 - some other value or object so a
00:56 - reference does not do that
00:57 - what a reference does is point to kind
00:59 - of the same box
01:01 - that another variable already points to
01:03 - so i'm going to do some drawings here to
01:05 - show you what i mean so if i
01:06 - create a variable let's say we make and
01:09 - x and we make that equal to 2. what kind
01:12 - of happens here is we have this box that
01:14 - gets drawn in our computer's memory we
01:16 - can label this
01:17 - the memory excuse my very messy
01:19 - handwriting here and anyways in the
01:21 - memory what happens is we have this box
01:23 - this box has a 2 inside of it this has
01:25 - some memory address location let's say
01:27 - 0x maybe 2
01:28 - 3 a b whatever and then we have some
01:32 - label to this
01:33 - right which is called x so x allows us
01:35 - to
01:36 - access this box right here now though
01:39 - when we create a reference so we say
01:40 - something like int
01:41 - and then we do my really bad ampersand y
01:45 - is equal to and then we make this equal
01:47 - to x
01:48 - what happens is y just points to this
01:51 - same box and so now whenever we create
01:54 - or sorry whenever we change the value of
01:56 - x or y
01:57 - really just changing whatever's in this
01:58 - box both of these values or both of
02:01 - these variables are going to change
02:02 - because they're both pointing to the
02:03 - same thing right
02:04 - that is what a reference does now this
02:07 - is different from a pointer
02:09 - i'm going to show you how we create a
02:10 - pointer so when we make a pointer what
02:12 - we can do is say something like int
02:14 - we can do maybe a zed and then before
02:16 - the z actually
02:17 - we write an asterisk so i'm going to say
02:20 - int
02:21 - and then asterisk z and then this needs
02:23 - to be equal to
02:25 - the memory address location of whatever
02:27 - we want this pointer to hold
02:30 - now understand this a little bit
02:31 - confusing here but the ampersand is the
02:33 - symbol or sorry not the ampersand but
02:35 - the asterisk is the symbol for
02:37 - pointer so whenever you initialize a
02:39 - pointer you use an ampersand i will show
02:40 - you on the
02:41 - in the code after obviously this is just
02:43 - a rough illustration but what i'm saying
02:45 - is i'm making a pointer
02:46 - called zed and i want this to store what
02:49 - well what it needs to store
02:51 - is a memory address location and so what
02:53 - i need to do is use the ampersand to
02:56 - access the memory address location
02:58 - of whatever this pointer wants to hold
03:00 - and in this case i will say x
03:02 - and so now what actually happens here is
03:04 - i've said int
03:05 - asterisk zed is equal to ampersand x and
03:08 - now
03:09 - instead of having z point to this box a
03:12 - new box is created
03:14 - and this box has its own location like
03:16 - zero x
03:17 - a b c d whatever and then inside of this
03:21 - box stores the memory location of
03:23 - whatever
03:24 - this is so 0x 2 3 a
03:27 - b and notice that 0x23ab
03:30 - is the address of the box that's storing
03:33 - the value 3.
03:34 - and so now what happens is z has this
03:37 - label kind of here that's going to this
03:39 - box
03:39 - and now if i access zed i get the memory
03:42 - address location of the variable
03:44 - x otherwise known as the variable y as
03:46 - well because that's an alias
03:48 - and so if i want to change the value in
03:51 - x
03:51 - i need to use this memory address
03:53 - location to modify
03:55 - this and you can do that i'll show how
03:57 - that works but notice the difference
03:59 - here we're actually
04:00 - storing a memory address location and if
04:02 - i were to actually look at the memory
04:04 - address location so i said ampersand zed
04:07 - what this would give me is this this
04:09 - other memory address location
04:11 - that stores the memory address location
04:13 - of the other variable
04:15 - so hopefully this kind of makes sense
04:17 - but that is how a pointer works and you
04:19 - can have nested pointers you have a
04:21 - pointer going to a pointer going to a
04:22 - pointer going to a pointer
04:23 - and well all of those are going to have
04:25 - their own memory address locations and
04:26 - they're all going to
04:28 - point to a different memory address
04:30 - location and this is why it's called a
04:31 - pointer is because we're given some box
04:34 - here
04:34 - that tells us how to point to a
04:36 - different location
04:37 - in memory and using pointers we can do
04:40 - all kinds of fancy stuff we can do
04:42 - points or arithmetic where we add one to
04:44 - a point we subtract one from a pointer
04:46 - like there's all kinds of wild stuff you
04:48 - can do with pointers and they're really
04:49 - useful
04:50 - but just really understand this
04:52 - difference at the pointer
04:53 - is its own value and that value tells us
04:56 - the location of a different
04:58 - separate value and so what we actually
05:00 - need to do as i said
05:02 - if we want to modify the value that this
05:04 - pointer is pointing to
05:05 - is we need to do what's known as
05:07 - dereferencing it now when you
05:08 - dereference a pointer
05:10 - what that does is give us the value
05:12 - that's actually stored in the memory
05:14 - address location
05:15 - that this pointer is holding and the way
05:17 - you dereference a pointer is you put an
05:19 - asterisk before it so if i'm accessing
05:21 - zed i would put an asterisk before it so
05:24 - that rather than getting this memory
05:25 - address location when i look at it it
05:27 - would give me the value
05:28 - stored in this memory address location
05:31 - so anyways i think that's enough for the
05:32 - illustrations here i'm going to pause
05:33 - this
05:34 - now i'll show you some examples in the
05:36 - code so we will continue in one second
05:37 - but i need to quickly thank the sponsor
05:39 - of this video and this series which is
05:41 - algo expert
05:42 - as you guys know i work at algo expert i
05:44 - am a proud employee there and proud
05:46 - instructor on the platform
05:47 - they have in my opinion genuinely the
05:49 - best platform to use to prepare for
05:51 - software engineering coding interviews
05:53 - everything from the curated questions to
05:55 - just a great environment to actually
05:57 - write code in
05:58 - just makes it a very pleasant experience
06:00 - when you're actually studying for your
06:01 - interviews
06:02 - with that said check out algo expert
06:03 - from the link in the description and use
06:05 - the code tech with tim for a discount on
06:07 - the platform
06:08 - all right so let's create some pointers
06:09 - here what i'm going to do to start is
06:11 - make a variable
06:12 - i'll say index is equal to 2 we'll go
06:14 - with our classic example here
06:16 - and i'll say int and i'll say asterisk y
06:19 - is
06:19 - equal to and then x now let's just start
06:21 - out by c
06:22 - outing both of these values so c out x
06:26 - and then end l and then
06:29 - c out y and then end
06:32 - l okay so let's run this and we get an
06:35 - issue oh
06:36 - the reason we got a problem is actually
06:37 - a good problem to run into i'll discuss
06:39 - this
06:39 - is because i said int and then pointer y
06:42 - is equal to x i did not put the memory
06:45 - address location of x
06:46 - so this is invalid because x is giving
06:48 - me 2 this is not a memory address
06:50 - location
06:51 - and so instead i need to put the
06:52 - ampersand to get the address
06:55 - of x so now when i do this it actually
06:58 - gives me the memory address
06:59 - of x right so just to show you this if i
07:03 - print out
07:04 - the memory address of x and then i print
07:06 - out y which is the pointer to x
07:08 - you'll see that both of these are the
07:09 - same thing however
07:11 - if i point out or print out sorry the
07:14 - memory address
07:15 - of y you're going to notice this is
07:17 - different
07:18 - than x right because this is a box that
07:21 - is storing
07:22 - the memory address of x so hopefully
07:24 - that's clear
07:25 - but that's like a really good
07:26 - illustration of the difference between a
07:28 - pointer and a reference right
07:31 - and so again this pointer is storing the
07:34 - actual memory address
07:35 - when i just access that pointer blindly
07:37 - right i just use y
07:38 - it gives me whatever it's storing which
07:40 - is the memory address of x
07:42 - however if i look at the memory address
07:44 - of the pointer that's different than the
07:45 - address that is holding
07:47 - and now to show you the dereference
07:49 - operator if i want to see the value
07:51 - associated with the memory address that
07:53 - this pointer is pointing to
07:55 - then i put an asterisk before it now
07:57 - you're going to see that we get 2.
07:59 - the reason we get 2 is kind of what
08:00 - happened is the computer
08:02 - went to whatever was being stored by y
08:05 - it saw that that was the location 2x
08:07 - and then looked up that location found
08:09 - the value in that location and returned
08:12 - it to us so this is the d reference
08:14 - operator
08:15 - so that is kind of the basics of
08:17 - pointers hopefully that gave you a good
08:18 - understanding of how they work and what
08:20 - they
08:20 - are okay so just a few notes here that
08:22 - relate to pointers that don't relate to
08:24 - references
08:25 - when you create a pointer you do not
08:27 - need to initialize it
08:28 - it does not need to be equal to
08:30 - something it is totally valid
08:32 - to have an empty pointer or like a
08:34 - default point or whatever you want to
08:35 - call it
08:36 - so in this case i initialized y no
08:38 - problem or sorry not initialized
08:39 - declared y but didn't initialize it
08:41 - wasn't a problem
08:42 - you can have a pointer that is equal to
08:44 - null again we haven't really covered
08:46 - that but this is still valid we won't
08:47 - get a problem
08:48 - if we do that we have a pointer that
08:50 - points to a different pointer
08:52 - that is totally valid as well we can do
08:55 - pointer arithmetic so we can do things
08:56 - like add pointers subtract pointers
08:58 - delete pointers
08:59 - won't really get into that too much uh
09:01 - but that's just
09:02 - like that differs from references right
09:04 - because with references you needed to
09:05 - initialize them they needed to actually
09:07 - reference a value
09:08 - or reference a variable they couldn't be
09:10 - equal to no and i didn't mention this in
09:12 - the previous video but you cannot change
09:15 - what a reference references whereas
09:18 - you can actually re-declare or redefine
09:20 - a pointer
09:21 - and have it point to something else so i
09:24 - can say something like in
09:25 - asterix y is equal to and then
09:28 - ampersand x and let's make another value
09:30 - here and
09:32 - w is equal to 3. i can change y by just
09:34 - saying y is equal to
09:36 - then ampersand w that is totally valid
09:38 - whereas if we were using
09:40 - a reference this would not be valid we
09:41 - could not do something like y
09:43 - equals ampersand w if y was a reference
09:46 - okay so now what i want to show you is
09:48 - something interesting which is using
09:49 - pointers with arrays
09:51 - so i'm going to create an array i'm
09:53 - going to say int x i think this is the
09:55 - syntax i always completely forget the
09:56 - array syntax it's all different in these
09:58 - different programming languages
09:59 - and we'll just make this like one two
10:01 - three okay so now what i want to do
10:04 - is actually get the pointer to the first
10:06 - uh
10:07 - location in this array so to do this i'm
10:10 - going to say
10:10 - int and i'll call this head is equal to
10:13 - ampersand
10:14 - x okay so now let me just see out
10:18 - and this sorry should be asterix head
10:20 - because this is a pointer
10:22 - let me see out head and see what we get
10:24 - and see if i made any mistakes
10:26 - so when i run this we get a problem
10:27 - can't convert int asterisk 3
10:30 - to end asterisks in initialization okay
10:32 - let me have a look here and i will be
10:34 - right back
10:35 - okay so i realized i made a small
10:36 - mistake here i put the ampersand x
10:39 - now that was actually incorrect when
10:40 - we're talking about an array i
10:42 - understand this is confusing like
10:43 - sometimes you use it sometimes you don't
10:45 - need it anyways when we're talking about
10:46 - array i think i mentioned this in the
10:48 - previous video
10:49 - the array itself is actually just equal
10:51 - to the memory address of the first
10:53 - location in the array so when i say
10:55 - something like asterisk head is equal to
10:57 - x this actually gives me the location of
10:59 - the first element in the array
11:00 - automatically and so there's no need for
11:03 - me to put
11:04 - the ampersand x like that however i
11:06 - could do something like ampersand x0
11:08 - if i do this we'll see that does
11:10 - actually work there's not a problem with
11:12 - that
11:12 - but by just doing ampersand x we get an
11:14 - issue and notice this is what ampersand
11:16 - x0 is
11:18 - now let's look at what we get it was
11:19 - ending in eb0 okay let's go again when
11:21 - we just look at x
11:23 - same thing eb0 right okay so now what i
11:26 - want to show you is how we can loop
11:27 - through this array
11:28 - just using its pointers and pointer
11:30 - arithmetic
11:31 - so what i'm going to do is i'm going to
11:33 - say 4 we can say something like
11:35 - int i is equal to 0 we can say i
11:38 - is less than and i'll just hard code in
11:40 - 3 here i won't do like the size of array
11:42 - or anything
11:43 - and then i'll say plus plus i although
11:45 - we could do i plus plus as well
11:47 - and now what i'm going to do is change
11:49 - head on every iteration so i'm going to
11:51 - say head
11:52 - is equal to x plus i and then what i'm
11:55 - going to do is say
11:56 - c out and i'm going to c out asterix
11:59 - head
12:00 - and l and actually first let's just see
12:03 - out head before we do asterisk's head
12:06 - and see what we get here so if i run
12:08 - this notice we get
12:09 - different memory locations we get 0x 61
12:12 - fe ac
12:13 - and then b0 and then b4 okay we added i
12:17 - which was either 0 1 or 2 to x
12:21 - great so now what i'm going to do is i'm
12:23 - going to see out
12:24 - asterix head and see what we get and
12:27 - when i do this
12:28 - we get 1 2 and 3 the values of
12:31 - our array now let's change this to be 4
12:32 - 5 6. let's run this
12:34 - notice we still get 4 5 6. so the point
12:38 - of me showing you this
12:38 - is that if we add some value to a
12:41 - pointer
12:41 - that simply increments the address of
12:44 - that pointer
12:45 - and in this instance here what we just
12:47 - did is
12:48 - access the first address second address
12:50 - and third address of the elements stored
12:52 - in this array because we had the first
12:55 - address
12:56 - we knew that all of the values after
12:58 - were stored in the subsequent addresses
13:00 - right so in like the plus one the plus
13:02 - two
13:03 - of the address to make this really
13:05 - simple imagine the head
13:07 - is equal to 1 right so element 4 is
13:09 - equal to 1
13:10 - then element 5 would be equal to 2 and
13:12 - element 6 would be equal to 3. so by
13:14 - adding 1 to the head
13:15 - each time that allowed us to access the
13:17 - subsequent elements and that's what i
13:19 - was trying to show you
13:20 - here with this pointer arithmetic that
13:22 - you can do something like add something
13:23 - to a pointer
13:24 - and then i dereference this pointer that
13:26 - i was changing every time to actually
13:28 - get the value
13:30 - associated with all of these elements
13:33 - so with that said i think this is a good
13:34 - point to leave it at hopefully this was
13:36 - a good introduction to pointers
13:38 - at least allowed you to understand the
13:40 - difference between a pointer and
13:41 - a reference this stuff comes with
13:43 - practice and these symbols are really
13:45 - confusing when you see the asterisks to
13:47 - define a pointer and then you use it to
13:49 - dereference then you use the ampersand
13:51 - to define a reference
13:52 - then you use it to get the memory
13:53 - address location like they don't make
13:55 - this very easy i don't know why they
13:56 - couldn't pick some other temp symbols to
13:58 - use
13:58 - but regardless this is the way it is
14:00 - this is a pointer and this
14:02 - is a reference so in future videos we'll
14:04 - see more of this and we'll see kind of
14:06 - why we actually would want to use these
14:07 - things
14:08 - but for now just understanding these
14:09 - topics is really all we need to do
14:11 - with that said if you guys like this
14:12 - video make sure you leave a like
14:14 - subscribe to the channel and i will see
14:15 - you in
14:16 - another one