00:00 - hey guys welcome back to another video
00:02 - this is the 20th video in my Python
00:04 - programming series and today we're going
00:06 - to be talking about objects and a little
00:08 - bit about classes in the next video
00:10 - we'll go more into depth with classes
00:12 - talk about creating our own classes and
00:14 - how we can use them but today we just
00:16 - have to understand what objects are
00:17 - before we can move on to that topic okay
00:21 - so what is an object well I'm sure
00:23 - you've heard of an object before and
00:24 - when you think of objects you think of
00:26 - something so usually something you can
00:28 - hold just something pretty much an
00:31 - object is something right something
00:32 - tangible maybe is what you think of well
00:35 - in Python pretty much everything we do
00:37 - here a lot of it is objects so any
00:40 - variable that we create is actually an
00:42 - object so I create X and I make it equal
00:45 - to the string string well if I print out
00:48 - what type this string is so print amount
00:52 - of you type X well it's actually an
00:55 - object of the class string and we've
00:59 - seen the classes before we may not have
01:01 - understood what they are but yeah then
01:04 - if we do why if we set that equal to 23
01:07 - now if we print out the type of Y what
01:10 - do you think the class is for this if
01:12 - you can remember back well it is an
01:15 - integer so it is an object of the class
01:17 - integer now why is this important why do
01:21 - we care about objects well objects have
01:23 - certain attributes so an attribute is
01:26 - something we can do with the object so
01:29 - just like we cannot add a string to a
01:33 - number so we can't add a string to an
01:35 - integer if I try to do X plus y I will
01:38 - say like Z equals odd and we should get
01:42 - an error here we'll see yeah we get an
01:45 - error because we can't convert int into
01:47 - string implicitly and just like we have
01:50 - certain methods that we can use on
01:52 - different objects so for example if I
01:56 - try to do this so I try to print out y
02:00 - dot count now if you remember count just
02:02 - pretty much counts how many letters are
02:04 - in a string or in a list like this I'm
02:08 - going to count one we get an error there
02:10 - as well and we say the in
02:12 - object so object like we're talking
02:15 - about has no attribute called count but
02:18 - if I change this to X then it works and
02:22 - it gives us zero right because the
02:24 - string object does have an attribute
02:27 - called count so these attributes so all
02:31 - these little dot things here you know we
02:33 - add dot find count dot index lots of
02:37 - different dots dots trip all those
02:40 - things can be used on either strings or
02:42 - on integers now I've only shown string
02:44 - one so far but there are some ones that
02:46 - we can use on integers and they have
02:48 - different properties and attributes
02:49 - based on what type of object they are
02:51 - same thing if we create another variable
02:53 - and we'll just call this one boow and
02:55 - we'll make it equal to true right we
02:58 - can't do Buddha count it's not going to
03:01 - work because there's no attribute on the
03:02 - object of a boolean to do that right the
03:05 - bula object has no attribute of count so
03:09 - yeah I hope you understand that right
03:10 - now everything is an object and based on
03:12 - what type of object it is it has
03:14 - different attributes now those
03:16 - attributes can be simply variables they
03:19 - can be methods lots of different things
03:22 - you don't to understand that right now I
03:23 - just wanted to get that out there so
03:25 - pretty much when we do this why don't or
03:29 - this X dot count here we're actually
03:32 - calling a method on X so whenever we put
03:36 - a dot and then a name so we had dot
03:39 - string count all these dots trip all
03:42 - those those are called methods so
03:44 - they're built into the class and we can
03:46 - use them on an object of that class so I
03:50 - hope that makes sense er right now it's
03:53 - different than if we made a function so
03:55 - you know we made the function func maybe
03:56 - and we printed coming to the screen now
04:00 - instead of putting so we'll just print a
04:03 - low whenever we call func instead of
04:05 - doing like X dot func that wouldn't work
04:08 - right all we did to call the function
04:10 - was we put func like that right and if
04:12 - we run the program here oh we get an
04:16 - error just because I didn't put anything
04:17 - here but we'll get rid of that if we run
04:19 - the program we see we get hello right so
04:21 - we didn't do a name and then a dot we
04:24 - just called the function like this so
04:25 - functions and methods
04:26 - are different it's just important to
04:28 - understand the difference between the
04:29 - function and the method I hope I've kind
04:31 - of explained that a little bit we'll
04:32 - talk more about the methods in the next
04:34 - video when we do more on classes okay so
04:37 - more about objects here pretty much
04:40 - whenever we create any type of variable
04:43 - we create it as an object right so this
04:46 - X object has a all these different
04:50 - methods on it right so it has dot Strip
04:52 - dot count find the integer object has
04:56 - some different methods that we can use
04:57 - on it as well I don't really know a lot
04:59 - of the methods for integers but if you
05:01 - go on the Python website and you look it
05:02 - up you can I'm sure you can find it same
05:04 - thing with the boolean class right
05:08 - there's lots of different things on
05:09 - there so now that we've been talking
05:11 - about classes so much let's do a brief
05:13 - introduction on what a class really is
05:15 - so what does a class look like well in
05:18 - the Python documentation there's a ton
05:21 - of different classes so every data type
05:23 - has its own class so for example a class
05:26 - might look like this so class and I'm
05:29 - just going to make this one I'm going to
05:30 - call it number and then inside of it
05:34 - there's a few things these are the
05:35 - methods that we create inside of the
05:37 - class so they look just like functions
05:40 - except they're inside of a class block
05:42 - like this and they look just like this
05:45 - and then we'll just do we don't need
05:48 - anything for their define let's call
05:52 - print or just call display as this one
05:57 - so I'm just making this one up here this
05:59 - method up here is built into Python I'll
06:01 - talk about what that does in a second so
06:03 - define display I'm going to put an X
06:05 - there and then I'm just going to say
06:07 - print X and then in here I'm simply
06:12 - going to do let's just do self dot var
06:17 - is equal to 24 okay so I know I just did
06:23 - some things that seemed pretty random to
06:25 - you but pretty much what I did is I just
06:27 - created a class just so that we can use
06:29 - it as an example to show you how another
06:32 - class works so let's pretend this number
06:34 - here is actually an integer okay so
06:38 - let's say that this is the integer class
06:39 - in Python
06:40 - now this initialization statement the
06:43 - sites without Stanford underscore
06:45 - underscore an its underscore underscore
06:47 - and this self in the bracket I actually
06:49 - need to do this in here as well is
06:50 - mandatory in order to get the method to
06:54 - work so we do need to have this self
06:56 - inside of the brackets it always has to
06:58 - be there
06:59 - okay so we've we've done that and then
07:02 - let's pretend that's the initialization
07:04 - right for the integer class so when we
07:07 - create this new object of an integer
07:09 - what actually happens is it sets a
07:12 - variable inside of the class equal to 23
07:15 - so here since I have 23 it would make
07:18 - this 23 so let's just put this to 23
07:20 - like that okay and then it has something
07:24 - called methods that can be called on the
07:27 - function so why not if I were to do Y
07:29 - dot display and then inside of here I
07:33 - need to give it a value so if I put like
07:36 - 21 then it would display 21 to the
07:39 - screen I hope that makes sense that's
07:41 - the method part of the thing now when I
07:45 - just create this Y variable and I create
07:48 - a new class of number here or of into
07:50 - whatever we're saying it is then it's
07:52 - automatically going to do this in it so
07:54 - I don't have to do y dot underscore
07:57 - underscore in it it's automatically
07:59 - going to do this one whenever we create
08:01 - a new function so let's just let's just
08:03 - give an example here let's do it let's
08:05 - do numbers so we're just going to make a
08:06 - new variable so let's call num equal to
08:09 - number and then inside of the brackets
08:12 - we don't have to give it anything
08:13 - because in here I don't have a parameter
08:16 - now if I had another parameter in here
08:18 - other than self so for example I did
08:21 - something like num then I would have to
08:26 - give a number in this to allow it to
08:29 - work so let's do that self R is equal to
08:33 - num and we'll talk about what self dot
08:34 - bar is in a minute
08:36 - okay so then I've created that now if I
08:39 - try to print out num to the screen we'll
08:43 - see something we'll see something
08:45 - interesting so we get main dot number
08:47 - object at this location now this is a
08:52 - bunch of gibberish means nothing to me
08:54 - really
08:54 - than the look it's the location in
08:56 - memory on your computer of where this
08:58 - object is stored so whatever whatever
09:02 - that means to you guys but yeah that's
09:03 - the location in memory of where it's
09:05 - stored and I just wanted you to see that
09:07 - it pretty much is creating an object's
09:09 - of the class number so rather than
09:12 - creating a object of the class enter the
09:15 - class string we're creating an object of
09:17 - our own class that we've just made in
09:18 - our program called number now what do we
09:22 - want to do here well why don't we try
09:24 - calling a method on our new class so we
09:28 - use the name so do num dot display and
09:32 - now we need to give it a parameter in
09:35 - here so I'm going to do something that
09:38 - may seem kind of confusing to you guys
09:39 - but just carry around just follow along
09:42 - I'm going to do num dot VAR in this
09:45 - bracket and when we run it like this we
09:48 - get 23 so let's talk about what happened
09:51 - so pretty much this display method it
09:53 - takes one parameter of X this self
09:56 - I'm just ignore it it just needs to be
09:57 - in there to make this work and the
10:00 - parameter that I'm passing it is num var
10:03 - now up here in this initialization
10:06 - statement so when I actually ran this
10:08 - this little line of code here it ran
10:11 - this now it created a variable inside of
10:14 - the class number called var now this
10:18 - variable is global inside of this so
10:23 - it's not fully global but its global and
10:26 - all the functions that are inside of
10:27 - this class can see it now that's because
10:30 - I put a little self a self and then a
10:32 - period beside the variable if I had just
10:34 - done VAR dot none like this you'll see
10:37 - what happens we actually get an error
10:38 - here because we can't see that variable
10:41 - so we have to put the self before it
10:44 - like this to make it global like that um
10:47 - so yeah I know I've kind of gone quickly
10:50 - today I just wanted to give you a brief
10:52 - example hopefully got you guys to
10:54 - understand a little bit about it in the
10:55 - next video I'm going to talk more in
10:57 - depth about classes we're going to
10:58 - create our own classes and we're going
11:00 - to see some examples of why classes are
11:02 - useful so that's been my video today on
11:05 - objects and classes I know it's been
11:07 - kind of all over the place
11:09 - but if you enjoyed please like and
11:11 - subscribe and I'll see you again
11:12 - tomorrow we'll talk more about classes