00:00 - hey guys and welcome back so in this
00:02 - tutorial I'm kind of just gonna be going
00:03 - through the code that I used in the last
00:05 - video explaining what that code does why
00:08 - it does that and how we can kind of
00:09 - modify it to do different things in
00:12 - future videos were going to talk more
00:14 - about some of the things in the
00:15 - threading module there's some really
00:16 - cool stuff that you can do you can set
00:17 - tasks to run at like a softer certain
00:20 - time interval you can see how many
00:22 - threads you have currently running
00:23 - there's a bunch of other cool stuff
00:25 - that's we're gonna get into before I go
00:27 - too far if you want any of the code that
00:28 - I write in here and you don't want to
00:29 - copy it out it will be on my website
00:31 - Tech with simnet and if you need any
00:33 - help feel free to join my discord server
00:35 - or message me on Twitter okay so let's
00:37 - get started and we're gonna just start
00:39 - by importing threading and importing
00:41 - time okay and what we need to do when we
00:44 - want to create a new thread is we
00:46 - actually have to create a subclass of
00:48 - the main thread class from this
00:50 - threading module you guys will see what
00:52 - I mean in a second we're gonna say class
00:54 - name this whatever you want I'm going to
00:56 - say it's my thread and it's gonna hear
00:58 - it from threading dot thread like this
01:00 - okay we're gonna create a nice knit
01:03 - method here it's gonna take self it's
01:06 - going to take thread ID which will just
01:08 - be some kind of integer I'll take a name
01:10 - which can be whatever the thread name is
01:11 - and then finally we will take a count
01:14 - and the reason we're taking account is
01:15 - because this specific thread that we're
01:17 - creating is going to try to count down
01:19 - from whatever number we give it right so
01:21 - that's what we're gonna do so now the
01:22 - first thing we actually have to do
01:23 - whenever we create kind of as a subclass
01:25 - like this of the threading class is we
01:28 - need to call that the parents
01:30 - constructor method or initialization
01:33 - method so we're gonna mean to call this
01:34 - on this so to do that we're just gonna
01:37 - copy this so threading dot thread
01:38 - underscore underscore an it on your
01:40 - underscore and just give itself the
01:42 - reason we have to do that is because
01:43 - there's some low-level stuff going on
01:45 - when we create a new thread and well
01:47 - this is what's gonna handle that for us
01:48 - so we just call that it sets it up in
01:50 - our thread is ready to go essentially so
01:52 - now we're just gonna define all of our
01:54 - what do you call it attributes here so
01:55 - just say thread ID equals thread ID but
02:00 - they're self got name equals name and
02:02 - self dot count equals count sweet okay
02:06 - so we've done that and that's actually
02:08 - all we need for our initialization
02:09 - method here and now we can just make it
02:12 - method called run and this is what is
02:14 - actually gonna define it actually it
02:16 - needs to be called run by the way
02:17 - because that's how we know to start the
02:19 - thread it needs to define essentially
02:22 - what the thread is going to do so we're
02:24 - going to give it an argument of self
02:26 - doing anything else
02:27 - I don't think so we'll just leave that
02:28 - itself and in here we're simply just
02:30 - going to print that we're starting the
02:31 - thread and then we're gonna call some
02:33 - kind of function and that function is
02:35 - gonna be what the thread is essentially
02:37 - and this is pretty well the way that
02:39 - we're gonna do anything when we want to
02:40 - create a new thread is we're going to
02:42 - create a subclass of this threading what
02:45 - do you call it this main threading class
02:46 - we're just gonna call the constructor
02:48 - set a few things these can be whatever
02:50 - you want by the way you don't have to
02:51 - have these ones in that I'm defining
02:53 - we're gonna create a method this does
02:55 - need to be called run and this is what
02:57 - is going to well run when you start the
02:59 - thread okay so in here we're just gonna
03:01 - say print and then we'll just say
03:03 - starting and we'll just put the name of
03:06 - the thread so it's a plus self dot name
03:10 - and we're gonna add a new blind
03:13 - character this is gonna seem weird but
03:15 - just just go with me here okay on this
03:18 - newline character next we're gonna call
03:20 - whatever function it is that's gonna be
03:21 - doing something for us so in my case I'm
03:23 - just gonna call my function print
03:25 - underscore time because that's what we
03:27 - were doing last time and in here what do
03:29 - we need to give it we need to give it
03:30 - three things and we'll define those
03:32 - after we're gonna give thread name so
03:33 - we're gonna say self dot name self dot
03:38 - okay self-taught count which is gonna be
03:41 - up there and then we need to give it a
03:42 - delay and the delay I think is I'm gonna
03:44 - say is one second okay so we'll do that
03:48 - alright next in here we're gonna say
03:50 - print and then we're going to say
03:53 - exiting and then obviously the name of
03:56 - the thread so self dot name and
03:58 - essentially this is what's gonna happen
03:59 - once this function is done running we're
04:01 - gonna come here and then we're gonna
04:02 - print this out saying that we're
04:03 - essentially done the thread okay sweet
04:06 - so that's actually it for creating a
04:08 - thread now this can be changed quite a
04:10 - bit and it's actually really nice
04:11 - because it means that we can kind of
04:13 - give our threads their own attributes
04:14 - and properties and define what they are
04:17 - based on what kind of thread they're so
04:18 - this thread for example is just gonna
04:20 - call the print time function but if we
04:22 - wanted to create different kinds of
04:23 - threads we just create more classes like
04:25 - this and call it like my thread
04:26 - my thread - obviously an appropriate
04:28 - name but you get the point and then in
04:30 - here we can just change the function we
04:31 - can maybe not print something out we
04:33 - could print something different we can
04:34 - give it some different attributes and
04:36 - all that kind of stuff
04:37 - sweet so let's now create a function and
04:41 - we're going to call this one print time
04:43 - so define print time it's gonna take
04:46 - three things which can be a name a delay
04:48 - and it count okay and in here all we're
04:53 - gonna do is we're gonna say Wow count
04:55 - and then what we're gonna do is we're
04:57 - gonna do time dot sleep and here we're
05:00 - just gonna do the delay that's how much
05:02 - we're gonna sleep by and then we're
05:03 - gonna simply print out I'm just gonna
05:05 - copy this in because it's kind of a long
05:07 - string here or a long statement I'm
05:10 - gonna just print this so percent s %
05:13 - does % s and then these are the three
05:15 - things we're going to use except I just
05:17 - need to change these to be the correct
05:20 - name so we're gonna say name time dot c
05:23 - time which is gonna get the current time
05:24 - and just format that nice for us it's a
05:26 - counter this is just called count sweeps
05:29 - we've got that and next what we're gonna
05:31 - do is we're going to decrement the
05:33 - counter you're gonna say couch - equal
05:35 - one and essentially what this is gonna
05:37 - do is we're just gonna count down from
05:39 - whatever number we passed in here and
05:40 - once that eventually hits zero so well
05:42 - count like any number will be true there
05:45 - unless it's zero then we'll exit out of
05:48 - this we'll stop we'll go back here we'll
05:49 - exit and then we'll be good to go so
05:52 - that's actually almost about it for
05:53 - creating kind of the function and the
05:55 - thread now we just need to start our
05:56 - threads and wait for them to kind of
05:59 - execute so to do this pretty
06:00 - straightforward we just need to create
06:01 - new threads to start so we're gonna say
06:03 - thread 1 equals my thread and then here
06:07 - we're just gonna give it the three
06:09 - things that need so ID name count so ID
06:11 - is gonna be one name is gonna be simply
06:14 - thread 1 and the count will say is like
06:17 - 10 okay next so we're going to say
06:20 - thread two is equal to my thread and
06:23 - then here we're gonna give it ID - we're
06:25 - gonna call it well thread two and we're
06:28 - gonna give it a count of five okay and I
06:32 - should probably call spell thread
06:33 - correctly that would be good
06:34 - okay so we've actually just created
06:36 - these threads now but if we won't
06:38 - actually run them and
06:39 - have them like working for us will we
06:41 - need to do that so to do that is pretty
06:43 - straightforward all we're gonna do is
06:44 - just say thread 1 dot start and then
06:47 - directly underneath that will do thread
06:49 - 2 got start as well and what this is
06:52 - gonna do is it's gonna start running the
06:53 - threads and it's kind of gonna do
06:55 - exactly what we showed in the last video
06:58 - how they run through and we'll show that
07:00 - again now the last thing that we need to
07:01 - do is we need to do thread 1 join and
07:04 - thread two dot join now the reason we
07:08 - need this is because if we don't have
07:09 - this it's not gonna we could run into
07:12 - some issues where the thread is gonna
07:13 - eggs it or like this just something goes
07:15 - wrong with the thread so essentially
07:17 - these we'll talk about them more in
07:19 - later videos it's just we're waiting for
07:21 - the thread to finish executing before we
07:23 - terminate the program I think that's the
07:26 - easiest way to do it and now what I'm
07:27 - gonna do at the end is I'm just gonna
07:29 - say print done main thread because well
07:33 - like what we're doing here right is
07:35 - we're creating two threads but the thing
07:37 - is our programs already running in one
07:39 - thread which is known as the main thread
07:40 - so we're actually gonna have three
07:42 - threads now in our program so we have
07:44 - the main thread and we have two that
07:46 - we've created that are running based on
07:48 - what's said in the main thread okay it's
07:50 - kind of weird but that's like we have
07:52 - three threads essentially for a program
07:54 - because we have main one so once these
07:55 - two threads are done doing their kind of
07:57 - thing then we'll we're finish the main
07:59 - thread because the program is done
08:00 - executing so we'll just print that and
08:02 - say that we're done okay so I don't
08:04 - think that I made any mistakes here I'm
08:07 - just having a quick look through my
08:08 - other thing to make sure I don't run
08:11 - into any error see okay so that should
08:12 - be alright so let's now actually you
08:15 - just run this and see what we're getting
08:17 - okay starting thread one thread two
08:19 - thread one thread two thread one thread
08:21 - two this is a little bit different than
08:23 - the one I did last time but I think it's
08:25 - actually a pretty decent example and
08:26 - we'll go through in a second sweet so
08:29 - this worked really well surprisingly
08:31 - that I didn't make new Stakes
08:32 - so obviously thread one starts at ten
08:34 - it's trying to count down to zero thread
08:36 - two starts at five and they're just
08:37 - gonna alternate back and forth because
08:38 - they each delay one second in the little
08:41 - loop so when one is delaying the other
08:43 - one can run when the other one is
08:45 - delaying the next one can run now if you
08:47 - don't want these little blank lines in
08:49 - between them I think it makes it easier
08:50 - to read then you can just remove that
08:52 - what do you call it newline character at
08:54 - the end but I just like it because it
08:56 - makes it easier to read so we get seven
08:58 - to six one obviously now thread two's
09:01 - done so we exit thread two and then we
09:04 - go and just keep executing thread one
09:06 - until eventually we get to zero and then
09:08 - we exit it and then we're done so that
09:10 - essentially is the code we wrote in the
09:13 - last video if you guys want to modify
09:14 - this and play with it try changing what
09:16 - this function does maybe don't just
09:18 - print the time out maybe do something
09:19 - else maybe count some other numbers or
09:21 - maybe multiplied I don't know do your
09:23 - own thing just mess around with it
09:24 - don't be afraid if it's not going to
09:26 - work because the only way you really do
09:27 - learn these kind of things well is just
09:29 - to mess around with them and play with
09:30 - them yourself that's at least what I've
09:32 - been doing to kind of figure out
09:33 - threading before I taught it to you guys
09:35 - again you can mess with this delay you
09:37 - can make it a variable you can change it
09:39 - maybe in here you want to add another
09:41 - attribute that's delay so that you don't
09:42 - have to have like a hard-coded 1 second
09:44 - delay uh and yeah maybe create three
09:47 - threads four threads whatever so if we
09:49 - want to create another one that was
09:50 - different than this and did its own kind
09:52 - of tasks like maybe it counted up well
09:54 - then essentially all we would do is just
09:55 - copy this class and paste it here and
09:59 - then instead of having it call print
10:02 - time it just call a different function
10:03 - or it could even just have like its own
10:05 - while loop in here right because all
10:06 - essentially this function does is has a
10:08 - while loop it's just so we can use it
10:10 - twice but I mean like you can put your
10:12 - own while loop in here as well and do
10:13 - something like that so anyways that has
10:15 - kind of been it for this tutorial the
10:16 - next one we're going to get into some
10:18 - more cool things in the threading module
10:19 - counting threads starting them after a
10:21 - certain time doing some more practical
10:23 - examples and with that being said I will
10:24 - see you guys in the next video
10:26 - [Music]