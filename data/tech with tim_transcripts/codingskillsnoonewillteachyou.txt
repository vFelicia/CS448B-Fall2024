00:02 - [Music]
00:08 - in this video i'm going to share with
00:10 - you some programming skills and topics
00:12 - that nobody can teach you now what i
00:14 - mean by that is that you can't pick
00:15 - these things up from a book or a
00:17 - university lecture or a youtube video
00:19 - these are things that require hundreds
00:21 - if not thousands of hours of practice
00:23 - and that you're going to build over a
00:25 - career and are going to take multiple
00:27 - years for you to really obtain now i
00:29 - myself do not claim to possess all of
00:31 - these skills in fact a lot of the skills
00:33 - that i'm listing here are things that
00:34 - i've noticed senior developers have that
00:37 - i myself do not have and that i've been
00:39 - slowly working towards as i've been
00:41 - programming for about probably the past
00:42 - i don't even know 10 years so really the
00:44 - point of this video is to share with you
00:46 - these few topics that you can actively
00:48 - think about them as you improve in your
00:50 - career as you get better at software
00:52 - engineering and programming and of
00:54 - course by actively thinking about them
00:55 - you're going to work on them and kind of
00:57 - build those skills faster than if you
00:59 - weren't really considering them from the
01:00 - start so with that said let me start
01:02 - talking about all the things that i
01:04 - myself cannot teach you but first i'll
01:06 - teach you about the sponsor of this
01:07 - video before we get started i need to
01:10 - thank lenode for sponsoring this video
01:12 - i've been using and working with lenode
01:14 - for nearly three years now and they've
01:16 - consistently been my go-to choice for
01:17 - hosting my applications and servers in
01:20 - fact right now i'm using lenove to host
01:22 - the official tech with tim discord bot a
01:24 - website multiple of my domains and a
01:26 - kubernetes cluster lenode makes it super
01:29 - easy to spin up servers with their
01:30 - one-click app marketplace and have tons
01:32 - of written guides and youtube videos on
01:34 - their channel to help you get started if
01:36 - you're having any issues you can reach
01:38 - out to their 24 7 support team and
01:40 - actually talk with a real human being
01:42 - now lenode's pricing is simple with no
01:44 - hidden fees and full transparency and
01:46 - you can test out lenode services for
01:48 - free by using the link in the
01:50 - description and claiming in 100 60-day
01:52 - credit for any new accounts it's been an
01:55 - absolute pleasure to work with lenode
01:56 - over the past few years and one last
01:58 - thank you to them for sponsoring this
02:00 - video so moving in here to skill number
02:03 - one now you might argue that this isn't
02:05 - necessarily a skill but i'm kind of
02:06 - grouping it in this category and this is
02:09 - going to be domain knowledge now domain
02:12 - knowledge at least from my perspective
02:14 - is essentially a very specific and
02:16 - specialized set of knowledge in a
02:18 - certain area of programming tech
02:20 - software engineering whatever it may be
02:22 - it's really being kind of an expert or a
02:24 - specialist in some specific topic and
02:27 - area and this is something again no
02:29 - one's really going to be able to teach
02:30 - you how to do this requires multiple
02:32 - years of learning you know maybe even
02:34 - decades or multiple job positions and
02:36 - this is something that you have to do
02:38 - for a very long time before you start to
02:40 - really pick up all this specialized and
02:42 - nuanced knowledge which is very valuable
02:44 - in you know specific roles positions
02:47 - companies etc now to give you some
02:49 - concrete examples here i worked at
02:51 - microsoft when i worked at microsoft i
02:52 - was just an intern there this was my
02:54 - first kind of tech job and as i got in
02:56 - there i realized very quickly that the
02:58 - senior developers that i was working
02:59 - with guys that were like you know maybe
03:01 - like 45 50 that have been working there
03:04 - 20 30 years they had so much extremely
03:07 - specific knowledge on these you know
03:09 - super specific and specialized kind of
03:11 - tasks and projects and all these things
03:14 - that i just knew nothing about
03:15 - whatsoever they were kind of the experts
03:18 - in that area and if we ever had a
03:19 - problem we just turn to them and say hey
03:21 - do you know what the issue is and they'd
03:22 - immediately have an answer or they'd
03:24 - have kind of a hint in the right
03:25 - direction they just knew so many little
03:27 - details about things that you could
03:29 - never even kind of dream of picking up
03:31 - or finding a book they would share and
03:33 - really that knowledge was accumulated
03:34 - over decades of them being in this field
03:37 - and spending so much time on these you
03:39 - know specific topics and projects and
03:41 - whatever now in terms of domain
03:43 - knowledge that i may have that could be
03:45 - related to something like python you
03:46 - guys watch this channel you know that i
03:48 - do a lot of stuff in python i'd be very
03:51 - hesitant to call myself an expert or a
03:53 - specialist but i think i'm probably on
03:55 - my way to getting towards that point and
03:57 - i know a lot of really kind of you know
03:59 - specific details and nuance points about
04:02 - python that most people that don't work
04:04 - with it every day just wouldn't know and
04:05 - the only way that i was able to
04:07 - accumulate that knowledge was by
04:08 - spending countless hours probably
04:10 - thousands of hours of at this point
04:12 - writing code in python learning about
04:15 - python you know building different
04:16 - applications with it that's really the
04:18 - only way to gain this domain and super
04:20 - specific knowledge and it's something
04:22 - that's extremely valuable especially if
04:24 - you're in a really kind of specialized
04:25 - position now i know this is a very vague
04:28 - area but this is something that you
04:29 - should think of when you're kind of
04:31 - learning different technologies or
04:33 - topics do you want to have domain
04:35 - knowledge in a specific area do you want
04:37 - to be considered an expert or kind of a
04:39 - specialist in one area or do you want to
04:41 - be more of a generalist that is kind of
04:43 - an argument you can make on your own but
04:45 - this is definitely something that no
04:46 - one's going to teach you and that can
04:47 - take a very long time to build so moving
04:50 - on to skill number two and this is going
04:52 - to be programming habits now this is
04:54 - something i think a lot of people
04:56 - overlook but this can be a massive skill
04:58 - and advantage if you build really strong
05:00 - and good habits early on when you're
05:02 - learning to code this is something i
05:04 - really wish i thought about more when i
05:06 - was younger and just getting into
05:07 - programming was building those really
05:09 - strong habits so that i could do stuff
05:12 - subconsciously without thinking about it
05:14 - just instinctually right now i know you
05:16 - guys all know this in your regular lives
05:18 - everyone has habits right like we
05:19 - operate on our habits and the people
05:21 - that are most successful in a lot of
05:23 - areas are really just the people who
05:25 - have built the best habits right the
05:26 - people that have the habit of getting up
05:28 - every day
05:29 - you know working out or doing their
05:31 - little routine and they're just in the
05:32 - habit of doing successful things every
05:34 - single day that's the same here with
05:36 - programming and with building strong
05:38 - programming habits so to give you a few
05:40 - examples here a habit that i've recently
05:43 - kind of started picking up on in
05:44 - programming is giving really good
05:46 - variable names and always making sure
05:49 - i'm having a consistent styling when i'm
05:51 - writing code at this point for me this
05:53 - is something i don't actively have to
05:55 - think about i just do it instinctually
05:57 - when i'm coding and a lot of people
05:58 - actually comment that they like kind of
06:00 - the style of my tutorials because of
06:02 - this habit right i have a fairly
06:04 - consistent style i write code in usually
06:06 - a pretty understandable way and i'm
06:08 - always trying to think about kind of the
06:10 - variable names without really having to
06:13 - put too much effort into doing that i
06:15 - know that sounds contradictive but
06:17 - habits are really those things that
06:18 - you're doing without thinking about and
06:20 - that absolutely applies with program
06:23 - another habit could be like do you
06:24 - always write a test before you write
06:26 - your code are you always testing your
06:27 - code are you making a commit after every
06:29 - small feature are you separating logic
06:32 - out into different kind of functional
06:33 - units
06:35 - all those different things right that
06:36 - you're only going to build by spending a
06:38 - large period of time doing them and that
06:40 - you can only have good habits in if
06:42 - you're actively thinking about you know
06:43 - what is my habit here when i'm writing
06:46 - code so i would challenge you guys think
06:48 - about what are your programming habits
06:50 - what do you always do good or bad and
06:52 - should you continue that or should you
06:53 - try to change that habit in kind of a
06:55 - more positive direction now again these
06:58 - are things i noticed with a lot of
06:59 - senior developers they just have good
07:01 - habits when it comes to designing
07:03 - software when it comes to writing tests
07:05 - you know requiring stuff to be in a
07:07 - specific format or style or whatever
07:09 - they do everything right because that's
07:11 - a habit for them to do that obviously
07:13 - there are exceptions but i think this
07:14 - was a good point here programming habits
07:17 - think about them especially when you're
07:18 - just getting into programming and they
07:20 - can be a huge advantage to you in the
07:21 - future so continuing here to skill
07:23 - number three i have software and tools
07:26 - efficiency now i've ordered this a bit
07:28 - weirdly but what i mean by this is how
07:30 - efficient are you using different
07:31 - software engineering tools so like an
07:34 - ide maybe github version control maybe
07:37 - you're really good in the command line
07:38 - with terminal and stuff like that and
07:40 - you can even extend this to different
07:42 - frameworks so maybe you're really good
07:43 - with a testing framework or you're
07:45 - really a master at the specific python
07:47 - module these are things again that no
07:49 - one's really going to be able to teach
07:50 - you how to do you have to put in
07:52 - hundreds of hours to build the skill and
07:54 - it can really improve your efficiency
07:57 - and kind of how much output you have as
07:58 - a software engineer so for example vs
08:01 - code i'm sure many of you guys use this
08:03 - again i challenge you here to ask
08:04 - yourself how efficient are you at using
08:06 - vs code do you know all of the keyboard
08:08 - shortcuts are you manually kind of going
08:10 - up to the menu and clicking on stuff all
08:12 - the time would it be worth your time to
08:13 - spend a few minutes kind of increasing
08:15 - that efficiency and getting to know that
08:17 - tool more are you really good with git
08:19 - you know all of the commands do you have
08:20 - them memorized i'm not saying that you
08:22 - need to do all of these things but i
08:24 - think this is definitely a skill and
08:26 - again something you're not going to pick
08:27 - up unless you're actually actively doing
08:30 - this so one thing that i always try to
08:31 - do when i'm using different softwares is
08:34 - i try to think about you know okay how
08:36 - can i make myself more efficient here
08:37 - what's something that i'm constantly
08:39 - doing maybe i should learn the shortcut
08:41 - for that maybe i need to add a keybind
08:43 - on my keyboard maybe i need to spend a
08:44 - few minutes you know really trying to
08:47 - learn this software better so that in
08:48 - the future i'm going to be more
08:50 - efficient with it for example i do a lot
08:52 - of editing in premiere pro only recently
08:54 - i found out about a lot of the awesome
08:56 - kind of keyboard shortcuts in there and
08:58 - again this was something that no one
08:59 - really taught me it's just over time
09:01 - using the software i picked up on these
09:03 - different uh you know features of it i
09:05 - could have watched a video and that
09:06 - could have been helpful but you only
09:08 - really get really good and efficient
09:10 - using this stuff when you use it a lot
09:12 - so hopefully you get what i mean that's
09:14 - what i'm kind of trying to say in this
09:15 - section
09:16 - continuing you could extend this right
09:18 - to different frameworks so i think i
09:20 - mentioned this but maybe you're really
09:21 - good with a testing framework or a
09:23 - python module and you know that you can
09:25 - be really efficient in this kind of
09:27 - specific area again something no one's
09:29 - going to teach you and that can be a big
09:31 - benefit to you for example i'm pretty
09:33 - good at writing code in pi game not
09:35 - something i'm really going out and
09:36 - bragging about because it's not super
09:38 - useful but if i do want to whip up like
09:39 - a quick demo of a game or like a really
09:42 - basic mvp for an idea i have or
09:44 - something that's a great skill to have i
09:46 - can go in there i know i'm very quick at
09:47 - kind of whipping up a ui and some
09:49 - functionality and i can get something
09:51 - out much faster than probably most other
09:53 - people hopefully this was a good one
09:55 - let's go on to topic number four so
09:57 - moving on here i have debugging and
09:59 - obscure problem solving with an emphasis
10:02 - on the obscure now the reason i'm
10:03 - putting this in here is because i know
10:06 - and i'm sure you guys all know from
10:07 - experience that it can be super
10:09 - frustrating to be given you know all
10:11 - these weird errors and bugs and
10:12 - especially when using third-party
10:14 - libraries and stuff and spend like five
10:16 - six seven hours debugging trying to find
10:19 - this issue going through and banging
10:21 - your head on the table when like every
10:22 - answer on stack overflow doesn't work
10:24 - and i think it genuinely is a skill to
10:27 - learn how to kind of quickly debug and
10:29 - problem solve and how to deal with these
10:31 - really strange and weird problems that
10:33 - occur when you're programming for
10:35 - example recently i've been working in
10:36 - react native i'm going to talk more
10:38 - about this in a later video but i've
10:40 - been doing kind of a larger development
10:41 - project and we're working in react
10:43 - native and there's all these weird bugs
10:45 - that happen because this is kind of a
10:47 - cross-platform uh what we call this
10:49 - framework right since it goes to ios and
10:52 - android and i'm using a bunch of
10:53 - third-party dependencies you get all of
10:55 - these super strange like really specific
10:57 - errors and it's super frustrating trying
11:00 - to actually solve them and kind of find
11:02 - the issue and if i was more of a
11:04 - beginner programmer and i hadn't
11:05 - experienced this hardship before i'd be
11:08 - really demotivated kind of really
11:09 - depressed honestly with you because of
11:11 - all the stuff that's been happening and
11:12 - i probably would have given up on a lot
11:14 - of these issues or not kind of battled
11:16 - through and tried to actually find what
11:18 - the problem is or you know use my
11:20 - problem-solving skills to find this so i
11:22 - think it genuinely is a skill to get
11:24 - good at and have lots of practice
11:26 - debugging these really weird errors and
11:28 - knowing kind of a good process on how
11:30 - you should go about finding these issues
11:32 - what steps you should try you know when
11:34 - to go to stack overflow when to go to
11:36 - github uh when to maybe ask someone for
11:38 - help or maybe even post like something
11:40 - on a forum or all that stuff
11:42 - again something that is really hard for
11:44 - me to go into more details with because
11:46 - everyone is going to have all different
11:47 - kinds of errors they need to solve i
11:49 - just know that when i was younger i
11:51 - would get really frustrated and
11:52 - demotivated when i ran into
11:54 - you know these big problems or i had
11:56 - some bug that was you know in my program
11:58 - for a week or something like that and
12:00 - now those same problems and bugs i'm
12:02 - able to fix much faster i have much more
12:04 - confidence that i'm gonna be able to fix
12:06 - them and i think it's you know a decent
12:07 - skill and something maybe you guys
12:09 - should consider just as a last thought
12:10 - here i've been coding again like 10 11
12:13 - years when i started i was not very good
12:15 - i was a complete beginner i had no idea
12:17 - what i was doing and it's really um
12:19 - motivating i'd say to look back at kind
12:21 - of where i was even maybe five years ago
12:23 - and compare it to now and just see the
12:25 - massive drastic difference and not just
12:27 - from the stuff that i've learned but
12:29 - from these kind of core and foundational
12:31 - skills that i've been working on over
12:33 - time and that slowly have started to get
12:35 - better and better and better to the
12:36 - point where i'm really seeing a bigger
12:38 - difference now hopefully you guys feel
12:39 - the same let me know in the comments
12:41 - down below with that said if you enjoyed
12:43 - make sure to leave a like subscribe the
12:44 - channel and i will see you in another
12:46 - one
12:49 - [Music]
12:55 - you