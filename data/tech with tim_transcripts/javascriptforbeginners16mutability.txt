00:00 - hello everybody and welcome back to the
00:01 - JavaScript tutorials so in today's video
00:03 - we'll be talking about is something
00:05 - called mutability now this is important
00:07 - because if later on and I'm not sure if
00:09 - I'm gonna do this in this series yet we
00:10 - start talking about objects more it's
00:12 - very important to understand how items
00:14 - can kind of change and values can change
00:16 - in our program and this is a kind of a
00:18 - more advanced topic where a lot of
00:20 - beginners find it difficult but I'm just
00:21 - gonna you know can I tell you as is
00:23 - extremely important so make sure you're
00:25 - paying attention and if you don't
00:26 - understand everything from this video
00:27 - you know look up some stuff on your own
00:29 - and make sure you understand this
00:30 - concept because it's very important so
00:33 - the first thing we need to talk about
00:34 - when we talk about mutability is first
00:36 - of all what even is mutability well when
00:38 - we talking about mutability we're
00:40 - talking about being mutable or immutable
00:41 - and that essentially means changeable or
00:44 - unchangeable now when we have a program
00:47 - we have something called variables that
00:49 - we have something called primitive data
00:50 - types and something called objects so
00:53 - for example if I say var x equals 5 what
00:56 - I've done is created the variable X so
00:58 - this X here and it stores the value 5
01:01 - which is what we call a primitive type
01:03 - and I'll talk more about that in one
01:04 - second now if we say var Z equals and I
01:09 - create a new array here this actually
01:11 - stores what we call an object and if I
01:14 - were to create another variable and I
01:15 - said variable S equals Z what I've
01:18 - actually done here we're going to talk
01:20 - about this more in depth but I'm just
01:21 - kind of going through the beginning
01:22 - stages here is rather than created a new
01:25 - array that is equal to you know whatever
01:28 - the zetas Ray was I've actually just
01:30 - created another name to reference set so
01:33 - that essentially means that if I change
01:34 - anything on the variable s it's actually
01:37 - going to affect is that as well and same
01:39 - goes if I change anything on the
01:41 - variable S or sorry Z it's going to
01:43 - affect the variable s as well that is
01:45 - because these variables here actually
01:48 - what we call reference the same object
01:51 - so changes to one of those variables
01:53 - will change the other one because
01:54 - they're not actually storing you know
01:56 - the value of the array they're storing
01:58 - the array as one object in total whereas
02:02 - when we have this variable X like this
02:04 - this holds just a value it doesn't
02:07 - actually hold a reference to a specific
02:08 - object and again you know you're
02:10 - probably understanding why you might be
02:12 - confused by this we're going to go
02:13 - through it
02:13 - kind of examples but let's do one now so
02:15 - hopefully that makes a bit of sense so
02:17 - our primitive data types are what we
02:19 - call immutable which means they don't
02:20 - change and we're just referencing values
02:23 - rather than objects so if I do something
02:25 - like var you know t equals x well if I
02:28 - change the value of T that does not
02:30 - affect X the reason for that is because
02:32 - this value here is a primitive primitive
02:36 - type it's not an object so we can
02:38 - actually do that so this is a way to
02:39 - kind of you know make a copy of this
02:42 - variable X here and then we can just
02:44 - change within T whereas if we did this
02:46 - with an array well we're gonna get the
02:48 - same thing we just talked about because
02:49 - this is what we call an object and same
02:51 - goes for sets and for maps as well ok so
02:54 - let's do an example I'm gonna creative
02:56 - function I'm gonna call it add 5 we're
02:59 - going to takin some variable let's just
03:02 - call this num and then what we're gonna
03:03 - do is simply add 5 to this number and
03:05 - print it out so we're gonna say num plus
03:07 - equals 5 console dot log num now let's
03:13 - just call this function here so what's
03:14 - actually called a variable let's call it
03:16 - X let's set it equal to 5 let's do add
03:19 - 5x and then let's console dot log the
03:23 - value of X now if you're paying
03:25 - attention and you understand what I was
03:26 - talking about you should be able to
03:27 - answer this question here which is okay
03:29 - so what am I gonna be printing what are
03:32 - the two values that are gonna print out
03:33 - to the screen that's what I want you
03:34 - guys to think about now and I'm just
03:36 - gonna go into the answer so pause it if
03:37 - you want to you know take a look at that
03:39 - well what happens here so what we're
03:43 - doing is passing this variable that
03:44 - we've defined which is 5 to this
03:47 - function add 5 what this function is
03:49 - gonna do is take that in as a parameter
03:51 - called num it's gonna add 5 to that
03:53 - parameter num and then it's gonna print
03:55 - out that value so we should get 10 from
03:57 - inside this function but then down here
04:01 - does exchange like I passed the variable
04:03 - X to this function and we added 5 to it
04:06 - so does that mean we added 5 to X or
04:09 - does it mean we just added 5 to none
04:11 - how does this work well let's have a
04:14 - look here let's refresh the page and no
04:16 - it does not change the value X we get 10
04:18 - and we get 5 the reason for that is
04:21 - because when we pass a value to this
04:23 - parameter what essentially is happening
04:25 - is inside our function
04:26 - something happens like a line of code is
04:28 - kind of written like this num equals x
04:31 - now we recall from before that since num
04:34 - is what we call a primitive type this
04:36 - just creates a copy of it and it doesn't
04:38 - actually change the underlying value of
04:40 - this variable so that is the first thing
04:43 - to understand the one we're calling with
04:45 - primitive types that's what happens now
04:47 - what are the primitive types
04:49 - well primitive types are numbers strings
04:51 - boolean's undefined and null so for
04:55 - example if I say var equals string like
04:58 - that this is a primitive type obviously
05:01 - well this isn't good now this will work
05:03 - we can try this actually so let's
05:05 - refresh we get string five and we get
05:07 - string we can see it didn't change and
05:09 - now if I do let's say you know the value
05:12 - true and rather than setting this like
05:15 - this we'll just set this to false and we
05:17 - print these out we can see we get false
05:19 - and we get true and these are our
05:21 - primitive data types right and same
05:22 - thing with null and same thing with
05:24 - undefined so those are what we call the
05:26 - primitive types now let's talk about
05:28 - what we called the reference data types
05:30 - or the object data types and see how
05:32 - these work differently so we're gonna
05:34 - create a new function now and what I'm
05:35 - gonna do is actually say append 5 now
05:40 - what this is gonna do is it's gonna take
05:41 - in some array so we'll call it array and
05:43 - what its gonna do is simply append so I
05:46 - think we can just do that with push the
05:49 - value 5 we're gonna console adult log R
05:52 - right here I'm gonna now just make an
05:55 - array in here that's 1 2 3 4 so this
05:57 - should be 1 2 3 4 5 and now we're gonna
05:59 - have a look at what this does so if we
06:01 - change this name to append 5 we need to
06:03 - understand what this gonna do so before
06:05 - I go think about what's gonna print out
06:07 - here is it gonna be you know the same
06:08 - result that we've seen previously or is
06:10 - this gonna be different well what we're
06:12 - doing now is using what we call
06:13 - reference or an object data type which
06:15 - is an array so this is actually mutable
06:19 - it means this is changeable whereas the
06:21 - other values the primitive types were
06:22 - unchangeable and we saw that because
06:24 - they just created copies when we set
06:26 - them equal to a new variable whereas
06:28 - here what we're doing is actually
06:29 - passing in this entire array so this
06:31 - array goes in and then what we're gonna
06:33 - do is push 5 on to that array then we're
06:36 - gonna print out whatever the value of
06:38 - the array is which should be 1 2 3 4 5
06:40 - and then we're going to come down here
06:41 - and now we refresh the page to see what
06:43 - we actually get which is one two three
06:45 - four five one two three four five now
06:47 - why did this value X change like X is
06:50 - equal to one two three four here up here
06:52 - all we did was push 5 onto this
06:54 - parameter array that's not the same
06:56 - variable X why did it change well again
06:59 - that's because what we did is we passed
07:01 - the actual object to this parameter we
07:04 - didn't just pass you know some copy of
07:05 - it or something that looked like this
07:08 - Audrey right we passed the actual
07:09 - physical thing so when we change this
07:12 - it's going to affect X and it's going to
07:14 - fix ARR and that is kind of the basis
07:17 - behind mutability and it's very
07:19 - important to understand because you can
07:20 - design functions that actually don't
07:22 - need to return specific values they can
07:25 - just modify the input that you've sent
07:27 - to them so in this instance the best you
07:29 - know example is just to use an array you
07:30 - can see here that we wanted to add 5 to
07:32 - an array rather than you know having to
07:34 - return a new array from this function
07:36 - which we've done before we can simply
07:38 - just tack on this 5 by actually
07:40 - modifying the input here now I can do
07:43 - the same thing inside of here where I
07:44 - can do like ARR at 1 is equal to 5 and
07:47 - we'll have a look at how this works and
07:50 - you can see that now we get 1 5 3 4 1 5
07:53 - 3 4
07:54 - again notice you know it's not changing
07:56 - now let's even go a little bit more
07:57 - complicated here and say var ARR 2
07:59 - equals err art now I'm gonna go air r2
08:03 - at 1 equals a hundred and what do you
08:07 - guys think is gonna happen now so I'm
08:08 - printing you know arr also print air r2
08:13 - first so let's say console dot log will
08:15 - do ARR - ARR and then X what is gonna be
08:19 - the value of all three of these
08:20 - variables here are they going to be the
08:21 - same are they gonna be different does
08:22 - this you know do anything that I've just
08:24 - created a new variable inside of here
08:25 - well let's have a look and obviously no
08:28 - it does not again it doesn't because
08:30 - when we do this we're not copying this
08:32 - array we're simply kind of just having a
08:34 - pointer that goes to it and says hey you
08:36 - know this is where the array is you know
08:39 - this is where you can modify it and
08:40 - that's how it works now I'm gonna go
08:42 - into a little bit deeper level of how
08:44 - this works just by doing something on
08:46 - the drawing tablet really quickly well
08:47 - I'm actually just doing with my mouse
08:48 - because it's nothing you know too
08:49 - important
08:50 - essentially when we have an array so I'm
08:53 - just
08:53 - drawing out here and excuse me cuz I'm
08:54 - just drawing with my mouse when we
08:56 - create a variable you know let's say X
08:58 - and we set it equal to this array what
09:01 - we do is instead of having it hold the
09:03 - value of the array and actually holds
09:05 - the kind of pointer or the location in
09:09 - memory where this array is stored so
09:11 - let's say this array is stored inside
09:13 - you know our computer memory maybe it
09:15 - has an ID that's something like you know
09:17 - to write well when we say x equals some
09:21 - array rather than saying you know X is
09:24 - equal to this array what's actually
09:25 - happening is X is equal to this ID so it
09:30 - actually knows the location of the array
09:32 - but it doesn't really necessarily know
09:34 - the value unless it goes to that
09:35 - location to look it up so when I do
09:37 - something like y equals x what I've
09:41 - actually just done it just made a copy
09:44 - of the pointer to this array so what
09:46 - that means is since X you know pointed
09:48 - to the array up there what's happening
09:50 - now is Y is now gonna point the same
09:53 - array so they're pointing to actually
09:54 - the same object in memory which allows
09:57 - us to change them from different
09:59 - variables so this is what we call an
10:01 - alias when we do something like this
10:03 - where we just have another name for the
10:05 - same actual object and I've just been
10:07 - doing this example with arrays but
10:09 - essentially any data type that is not a
10:11 - string float number undefined where null
10:15 - works like this and rather than storing
10:18 - you know the actual value of the object
10:19 - where we can copy it and kind of change
10:21 - it around variables it stores the actual
10:24 - location and memory of that object I'm
10:27 - gonna pause for one second just to get
10:29 - something up on my screen and I'm gonna
10:30 - show you guys how we can create a copy
10:31 - of arrays rather than having to what do
10:35 - you call it change the value because
10:36 - sometimes you don't want to do this okay
10:38 - so to copy an array there's actually two
10:40 - ways now the old way I'm going to show
10:42 - you first which kind of makes a little
10:43 - more sense to me because I'm from a
10:44 - Python background but there is this way
10:47 - in the new version of JavaScript that
10:48 - I'll show you I'm not really going to
10:49 - explain it because I don't understand it
10:51 - completely but it does make a copy of
10:53 - the array for you so what I've done here
10:55 - is said you know var x equals 1 2 3 4 5
10:57 - I want to say VAR y and I want it to be
11:00 - equal to X but I want it to just be
11:02 - equal to an array that has the exact
11:04 - same values of X but he's not the same
11:06 - array
11:06 - right I don't want it to point to the
11:08 - same object because maybe I want to
11:10 - modify this one but I don't want to
11:11 - modify X right so how do I do that well
11:14 - there's two ways the old way is to do X
11:17 - dot slice so what this actually does and
11:20 - this is a method that you can use on
11:21 - arrays regardless of if you're copying
11:23 - them or not is takes a kind of section
11:26 - of the array and copies it so in this
11:29 - instance when we don't put any values
11:31 - inside the slice function or the slice
11:33 - method what it's gonna do is actually
11:35 - just copy this array entirely value by
11:38 - value now if I want to actually say you
11:40 - know just copy the first three elements
11:42 - of this array what I would do is
11:44 - something like zero comma four I believe
11:46 - and what this is gonna do is take all
11:48 - the elements starting from index zero up
11:51 - to but not including four so actually
11:53 - sorry this should be three so what
11:55 - that's gonna do is simply copy the
11:57 - elements one two three because we won't
11:59 - include index three because that is kind
12:02 - of the end bounce so I'll show you I'm
12:04 - just like I'm not making this up this
12:05 - actually works let's refresh here and
12:07 - you can see we get one two three four
12:08 - one two three so does how the slice kind
12:11 - of works if I just do this we'll have a
12:14 - look and we can see that we get this
12:16 - entire thing but now notice that I can
12:18 - change the value so I can say something
12:20 - like y2 equals nine nine nine and this
12:24 - will not change X so you can see this
12:26 - changes my Y value but it doesn't change
12:28 - X so that's kind of an easy way to copy
12:30 - now there's another way to copy I'll
12:32 - show you that as well here so let's
12:34 - leave actually everything that's there
12:36 - but let's just make a different coffee
12:37 - so what we can actually doing here to do
12:38 - dot dot dot and then X now I don't
12:41 - actually know really what this operator
12:43 - is but I just saw that when I was
12:44 - looking it up that this is a way that
12:46 - you can make a copy as well so if I do
12:48 - this and refresh we get the exact same
12:50 - answer so we keep stick with that copy
12:52 - what this has done is essentially just
12:54 - copied X and you know put that into it's
12:57 - a new array so if you guys are
12:58 - interested in looking at how that works
12:59 - you know I urge you guys to but I
13:01 - figured I'd show it in case anyone
13:02 - wanted to get a look at it and that has
13:04 - kind of been mutability so hopefully you
13:06 - kind of understand now the difference
13:08 - between a primitive type and a reference
13:10 - slash slash object type in JavaScript
13:13 - and why we need to understand the
13:14 - difference because sometimes we're gonna
13:16 - modify the actual you know input and
13:18 - sometimes we're gonna create a copy of
13:20 - it
13:20 - do some other kind of alterations on it
13:22 - so this is what we would call copier
13:24 - clone this value why whereas before when
13:27 - we just did something like you know VAR
13:28 - z equals x that would be known as an
13:30 - alias or simply another name for
13:33 - whatever this X is right so anyways that
13:35 - has been a firm ute ability if you guys
13:37 - enjoyed make sure leave a like subscribe
13:38 - to the channel and let me know if you
13:40 - want to see any other JavaScript videos
13:41 - coming up in the future