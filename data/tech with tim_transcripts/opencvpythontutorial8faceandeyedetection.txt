00:02 - [Music]
00:08 - hello everybody and welcome to
00:10 - video 8 in this python open cv tutorial
00:13 - series
00:14 - in this video i'm going to be showing
00:15 - you how to perform a live face and eye
00:17 - detection slash
00:18 - tracking in python using opencv now the
00:22 - code for this is actually very
00:23 - straightforward
00:24 - if you don't really care about how this
00:25 - works because i am going to try to give
00:27 - kind of a brief explanation of the idea
00:30 - behind these classifiers and
00:31 - and how this works so seamlessly if you
00:33 - don't care about how that works then
00:34 - skip forward in the video there should
00:36 - be some time stamps
00:37 - that actually will tell you when we
00:38 - start writing all of the code anyways in
00:40 - front of me here i have the code that
00:42 - just shows our webcam
00:44 - so this will literally just display our
00:45 - webcam on the screen that's all this
00:47 - going to do
00:47 - and i just put this in here beforehand
00:49 - because there's no point in writing it
00:50 - out again i've already shown how to do
00:51 - this in previous videos
00:53 - anyways what we're going to use to do
00:55 - this face detection and classification
00:58 - is something called a har cascade now a
01:00 - har cascade is a pre-trained classifier
01:03 - so something that we're not going to
01:04 - train ourselves that already knows what
01:06 - it's looking for essentially
01:07 - it will look at an image and we'll try
01:09 - to pick out specific
01:11 - features in that image so a feature
01:13 - could be something like
01:14 - the distance between two centroids like
01:17 - you know centroid meaning like an eye or
01:18 - something
01:19 - i could be like the different colors
01:21 - present in a region it could be the
01:22 - the edges or the shapes that are present
01:25 - there's a lot of different features it's
01:26 - very difficult to describe a feature
01:29 - but anything that you could take from an
01:30 - image that is not just the entire image
01:32 - itself could be considered a feature
01:34 - so these classifiers have been trained
01:36 - on hundreds of thousands if not
01:38 - millions of images and what they've done
01:40 - is they've gone through and they've kind
01:41 - of determined which features make up a
01:43 - face
01:43 - and which features make up eyes now each
01:46 - classifier has its own
01:47 - very specific tasks so it's been trained
01:50 - on just faces or just eyes or just
01:52 - birds or just cats or whatever it's
01:54 - classifying and when you feed it an
01:56 - image
01:57 - after it's already been trained what it
01:58 - does is it looks at that image
02:00 - looks for the presence of features that
02:03 - indicate a face or indicate an eye or
02:04 - whatever it's looking for
02:06 - and then if it finds those features it
02:08 - tells you hey there was a face it's
02:09 - present here oh hey there was a bird or
02:11 - an eye or whatever it's present here
02:13 - so that's kind of the idea behind it i
02:15 - will mention that there is some pretty
02:16 - good documentation for this that i'll
02:18 - link to in the description
02:19 - that explains this in more in depth but
02:21 - what i discussed is the very basics
02:23 - it just knows what features make up a
02:26 - specific
02:27 - image or whatever it is it's trying to
02:28 - classify you feed it a new image
02:30 - if it finds those features then it says
02:32 - yep we found it it's
02:34 - located here all right so the
02:35 - classifiers that we're going to use are
02:37 - pre-trained
02:38 - they already exist and we don't have to
02:39 - download them or anything they're
02:40 - actually just
02:41 - by default they come with opencv so i'm
02:43 - going to start by loading these
02:44 - classifiers in so i'm going to say
02:46 - face underscore cascade is equal to and
02:49 - then this is going to be cv2
02:51 - dot and then cascade classifier and we
02:54 - need to pass the path
02:55 - to this classifier so the path to this
02:58 - classifier is going to be the following
03:00 - it is going to be cv2 dot data dot
03:03 - har cascades plus and then
03:07 - the hard cascade that we want i'm just
03:08 - going to copy this in because it's very
03:10 - long and i don't want to mistype it
03:12 - so let's put it in like that so the
03:14 - first har cascade that we want
03:16 - is our frontal face default.xml so this
03:20 - is the path
03:21 - to where these are stored on our system
03:23 - and then this is the specific classifier
03:25 - that we want that's pre-trained
03:27 - so all you do is just put the one that
03:29 - you want and while it will give it to
03:30 - you
03:30 - so that's what we're going to do for
03:32 - face again this code will be in the
03:33 - description in case you don't want to
03:34 - type all this out
03:35 - and then we need to do one for i so i'm
03:38 - going to say i underscore cascade
03:40 - and i'm just going to change this to her
03:41 - cascade underscore
03:43 - and this is just i like that all right
03:46 - so now we have our two hard cascades
03:48 - loaded in what we need to do now is use
03:50 - them so we can see that we have our
03:52 - image which is being shown here
03:53 - so before i show this image i'm going to
03:55 - convert this image to grayscale
03:57 - and then i'm going to pass that to my
03:58 - face cascade and the face cascade is
04:01 - going to return to me all of the
04:02 - locations of
04:03 - faces so i'm going to say the following
04:05 - cv2 dot
04:07 - cvt color i'm going to pass the frame
04:10 - and i'm going to say this is cv2
04:12 - dot and then color underscore and then
04:16 - bgr and then two gray like that so we'll
04:20 - say that gray
04:22 - is equal to that line now the reason we
04:24 - need grayscale
04:25 - is because just like many algorithms
04:26 - here in opencv
04:28 - it requires a grayscale image to perform
04:30 - this classification
04:31 - so now that we've done that i'm going to
04:33 - say that faces is equal to and then
04:35 - face cascade dot and this is going to be
04:38 - detect
04:39 - multi-scale and then what we're going to
04:41 - pass here is the image
04:43 - and two other parameters i'm just going
04:44 - to write them in and then i'll describe
04:46 - what they are so this is the function
04:49 - detect
04:49 - multi-scale that you use from the
04:51 - cascade and again
04:53 - what this will do is just return to you
04:54 - the location of all of the faces in
04:56 - terms of
04:57 - positions so what are these arguments
04:59 - well i actually found a really good
05:01 - stack overflow post that i will again
05:03 - link to in the description
05:04 - that describes what these are so before
05:06 - we continue i need to thank the sponsor
05:08 - of this video and this series which is
05:09 - algo expert
05:11 - algo expert is the best platform to use
05:12 - from preparing for your software
05:14 - engineering coding interviews
05:15 - they also have a product called systems
05:17 - expert which is meant to teach you about
05:18 - system design fundamentals
05:20 - and how to ace your system design
05:22 - interviews so with that said check out
05:23 - algo
05:24 - expert and system expert from the link
05:25 - in the description and use the code tech
05:27 - with tim for a discount on both
05:29 - platforms all right so i've got the
05:30 - stack overflow page open i will link
05:33 - this in the description so you guys can
05:34 - read it for yourself
05:35 - but the first parameter that comes after
05:38 - our base image and notice that we're
05:39 - always having the base image first
05:41 - is going to be what we call our scale
05:43 - factor now
05:44 - to go into a little bit more detail
05:46 - about how the har cascade works
05:48 - we're going to be given this we're going
05:49 - to give the hard cascade story an image
05:51 - of an
05:51 - arbitrary size we don't know how large
05:53 - this image is or the hard cascade story
05:55 - doesn't know how large the image is
05:57 - going to be
05:58 - so what that means is that we may have
05:59 - to change the size of this image
06:02 - such that the har cascade has something
06:04 - that it can compare it against you so
06:05 - imagine we give the hard cascade an
06:07 - image that's like ten thousand by ten
06:09 - thousand pixels
06:10 - well it probably wasn't trained on
06:12 - images that were ten thousand by ten
06:14 - thousand pixels
06:15 - so what that means is we need to shrink
06:16 - this base image down and what the scale
06:19 - factor is telling us is how much we
06:20 - should shrink this by
06:22 - at each iteration now the recommended
06:24 - value here is 1.05
06:26 - and what this would mean is that we
06:27 - shrink the image down by 5
06:30 - so we'll keep shrinking the image in
06:33 - kind of a scale
06:34 - pyramid fashion that i'm not going to
06:36 - discuss that is linked here there's some
06:38 - resources you can read for yourself
06:40 - but the idea here is that you probably
06:41 - want to put a value about 1.05
06:44 - the one that we actually picked is 1.3
06:46 - and the smaller value
06:48 - you pick is going to lead to higher
06:49 - accuracy but slower performing algorithm
06:52 - whereas the larger value you pick is
06:53 - going to lead to less accuracy but a
06:55 - faster performing algorithm
06:57 - so you can kind of mess around with
06:58 - these values and if you notice that your
07:00 - face detection isn't that good
07:01 - then make this value a bit smaller if
07:03 - it's good but it's taking a really long
07:04 - time then bump the value up a little bit
07:07 - now the next value after here is min
07:09 - neighbors now min neighbors is a
07:11 - parameter specifying how many neighbors
07:13 - each candidate rectangle should have to
07:15 - retain it so what this is going to tell
07:17 - us
07:18 - or what the hard cascade is going to do
07:19 - is return to us
07:21 - a bunch of positions of potential faces
07:24 - it's going to say i think this this this
07:25 - this and like you know a million things
07:27 - are faces
07:28 - and they're probably all faces of just
07:29 - like slightly different sizes
07:31 - so this is saying how many candidate
07:34 - rectangles
07:35 - do i need that are say overlapping in a
07:37 - specific area
07:39 - before i determine that this actually is
07:41 - a face so this is pretty much saying
07:43 - how accurate does the algorithm need to
07:45 - be because if it just has
07:46 - one rectangle in an area and saying
07:48 - that's a face well that might not
07:50 - actually be a face that might be
07:52 - a mistake it might have miscalculated so
07:54 - this is saying we need to find
07:55 - at least say five rectangles or ten or
07:58 - whatever number we put here
07:59 - that are in close proximity to each
08:01 - other before we determine that this
08:03 - actually is a face
08:05 - so as it says this parameter will affect
08:07 - the quality of the detected faces
08:09 - higher values result in less detections
08:11 - but with higher quality
08:13 - three to six is a good value for it then
08:16 - we have min size and max size which
08:18 - are really straightforward min size is
08:19 - the minimum size of a rectangle
08:22 - for one of the faces so you can make
08:24 - this you know
08:25 - if you know the size of your face is
08:26 - going to be larger than 100 by 100 then
08:28 - you would just make this like 100 by 100
08:29 - right
08:30 - and then max size it's the opposite of
08:32 - this this is uh
08:33 - what is the maximum size of a face so
08:36 - you obviously don't want to be detecting
08:37 - faces that are like maybe
08:38 - half the size of your image if you know
08:40 - the faces are going to be really small
08:41 - so you could throw that in but those are
08:43 - optional you don't need to pass those
08:45 - and you can see here we didn't pass a
08:46 - min or max size we just had a value of
08:48 - 1.3
08:49 - and then min neighbors of 5. so this is
08:51 - going to give us all of our faces
08:53 - so specifically it's going to return to
08:55 - us rectangles that
08:56 - are kind of drawn around our faces or
08:58 - represent what it thinks of faces
09:00 - so what i'm going to do is say 4 and
09:03 - then i'm going to go
09:03 - x y and let me just make sure this is
09:06 - right yeah and then wh
09:08 - in faces now the reason for this is it's
09:11 - giving me a rectangle
09:13 - so i will take the x y width and height
09:15 - of that rectangle
09:16 - and then what i can do is draw a
09:17 - rectangle on my image so i will say
09:20 - cv2 dot and then rectangle and then i
09:23 - will pass my image
09:24 - which we've called frame here i will
09:27 - pass my
09:28 - x y here so let's go x y for this
09:31 - top left hand corner of my rectangle
09:34 - then for the bottom right i will pass my
09:36 - x plus w and my y plus
09:39 - h and then for the color we can pick
09:41 - what we want this to be let's just make
09:43 - it blue so 255
09:44 - 0 0 and then line thickness we'll go
09:47 - with 5.
09:48 - all right so there we go that will draw
09:49 - our rectangle now what i need to do
09:51 - though
09:52 - is i need to figure out the area in my
09:54 - image
09:55 - that is the face so i actually want to
09:57 - grab the face itself
09:59 - i don't want to just draw a rectangle
10:00 - over it the reason for that is i want to
10:02 - use
10:03 - that area so to actually find my eyes
10:06 - because i know that my eyes are going to
10:07 - be on the face so if i find the face
10:09 - then i can pass the face to my eye
10:12 - detector or eye classifier
10:13 - and then it will tell me where the eyes
10:15 - are so i'm going to say that my roi
10:17 - which i believe stands for region of
10:19 - interest
10:20 - and then underscore gray so gr a y is
10:23 - equal to
10:24 - and then this is going to be gray which
10:25 - is my gray scale image right
10:28 - and it's going to be from the following
10:29 - so we're going to start at x
10:31 - and we're going to go to x plus
10:34 - and then w now we're going to start at y
10:36 - and then we're going to go to
10:38 - y plus w and the reason we're doing that
10:41 - is because this will tell us
10:42 - the location of our face right we're
10:43 - just getting this rectangle from
10:46 - our grayscale image and storing it in an
10:48 - roi grid
10:49 - now we're going to do the same thing for
10:51 - color so roi underscore color
10:53 - is equal to and then frame and then
10:56 - again same thing x
10:57 - colon x plus w and then
11:00 - comma y colon y plus
11:04 - w or y plus h what am i doing here okay
11:07 - so now we're going to get this area from
11:08 - the color
11:09 - image which is the frame and you'll see
11:11 - why we need both of them but we're going
11:13 - to pass roi
11:14 - gray to our new eye classifier and then
11:17 - we're going to just
11:18 - draw on roi color the um
11:21 - what do you call it the rectangle and
11:22 - actually i just realized that these need
11:24 - to go in the other order i always make
11:25 - this mistake with the slices
11:27 - we need to have y go first because of
11:29 - the way that we're we index values in
11:31 - this array
11:32 - so let's do that and then
11:36 - think there we go okay awesome so that
11:38 - should be correct we need to do y
11:40 - first because it goes rows and then
11:41 - columns common mistake
11:44 - now what we do is we're going to look in
11:46 - this grayscale image roi gray
11:48 - for any of the eyes so i'm going to say
11:50 - the following eyes is equal to
11:52 - and then i cascade and then dot
11:56 - what is this what do we call this detect
11:58 - multi-scale
11:59 - then we're going to pass our roi
12:01 - underscore
12:02 - gray like that then we'll pass the same
12:05 - thing 1.3
12:06 - and 5. all right so now that we have our
12:08 - eyes we want to draw
12:10 - all of these eyes we're going to say 4
12:12 - and then i
12:13 - in eyes like that and actually let's
12:15 - change this so that we're going to say
12:17 - e x e y e w e h
12:21 - so i x i y i i width i height
12:24 - then after this we'll just draw a
12:26 - rectangle so let's say cv2
12:28 - dot rectangle we'll draw it on not frame
12:31 - but roi underscore color i'll explain
12:33 - this in one second
12:34 - then we're going to draw this at first e
12:36 - x
12:38 - e y and then bottom right hand corner is
12:40 - going to be
12:41 - e x plus e w
12:45 - and then e y plus and then e h
12:49 - then our color will make this green so 0
12:52 - 255 0 and then line thickness can again
12:55 - be 5.
12:56 - all right so now that we have this this
12:58 - is actually all we need to do i'll show
12:59 - you this working in one second
13:00 - let's do a quick recap so we are going
13:03 - through
13:03 - and we're going to just look at the
13:04 - frame from our webcam right we're going
13:06 - to convert that
13:07 - frame into grayscale we're then going to
13:09 - find all of the faces
13:10 - in that frame we're going to loop
13:12 - through all of the faces which are
13:13 - really going to be rectangles
13:14 - and then we're going to draw a rectangle
13:16 - for whatever this rectangle represents
13:18 - we're just going to draw the face
13:19 - essentially our box around the face
13:21 - then we're going to figure out the area
13:23 - in the image so the actual pixels in the
13:25 - image
13:26 - that represent our face so we get the
13:28 - gray and we get
13:30 - the the pixels in the colored image now
13:33 - this
13:33 - right here is actually a reference to
13:35 - the original frame so if i
13:37 - modify this here this will actually
13:39 - modify the original frame so keep that
13:42 - in mind
13:42 - so the reason i'm doing this is because
13:44 - i want to find the eyes
13:46 - only on the face right so now that i
13:48 - have the face we find the eyes
13:50 - on the face but this is going to tell me
13:52 - the location of the eyes
13:53 - well at least this will on our roi
13:56 - gray now roi gray is not the same
13:59 - size and it's not the same image as our
14:02 - original frame
14:03 - so when i draw my eyes i draw them
14:06 - on my roi color which is the same size
14:09 - as my
14:10 - kind of grayscale portion right here so
14:12 - what that means is that i will actually
14:14 - draw them in the correct location
14:15 - now i know i'm explaining this kind of
14:17 - horribly but the idea is that
14:19 - if we were to just draw this rectangle
14:21 - right here
14:22 - on our actual image if we were to draw
14:24 - it on frame so all our eyes we drew it
14:26 - on frame and we didn't draw it
14:27 - on roi color these eyes would be in the
14:30 - wrong spot the reason they would be in
14:31 - the wrong spot is because this is
14:32 - telling us the location of the eyes
14:35 - on our roi gray image so on our face
14:38 - like you're just looking at the face
14:40 - it's telling us the location of the eyes
14:42 - relative to where the face starts so we
14:44 - need to draw it
14:45 - relative to where the face starts so on
14:47 - roi color
14:48 - not on frame otherwise they're going to
14:50 - be in the wrong spot
14:52 - so hopefully that's clear but that's why
14:53 - we're drawing it on roi color because
14:55 - roi color is the same size as the image
14:57 - that we detected the eyes from
14:59 - then what we do is we draw not the image
15:02 - this sorry should say
15:03 - frame like that and then what we can do
15:06 - is well just run this so let me
15:07 - reactivate or deactivate sorry my webcam
15:10 - and let's run this and let's see if this
15:12 - is working all right so there we go we
15:14 - can see this
15:15 - is indeed working i can kind of move
15:17 - around a bit you can see it's tracking
15:18 - my face if i turn my face notice it
15:20 - doesn't really keep track of it
15:22 - because it doesn't obviously detect the
15:24 - side of the face and then
15:25 - i can open my eyes i can move around and
15:27 - well you get the idea this is the live
15:29 - face and eye detection in opencv and
15:32 - in python so i think i'm going to leave
15:34 - the video here that's all i need to show
15:36 - you
15:36 - in the next video if there is a next
15:38 - video i'll see if i want to do one or
15:40 - not
15:40 - we may potentially train our own har
15:42 - cascade classifier
15:44 - if you want to see how to do that leave
15:45 - a like on this video subscribe to the
15:47 - channel and also leave a comment and let
15:48 - me know
15:49 - and i may potentially make a 9th or
15:51 - maybe even 10th video in this channel
15:52 - where we do something like that
15:54 - so with that said if you guys enjoyed
15:55 - make sure to leave a like subscribe to
15:56 - the channel
15:57 - i will see you in another youtube video