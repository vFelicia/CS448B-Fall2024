00:02 - [Music]
00:06 - hello everybody and welcome back to the
00:09 - golang tutorial so in this video we're
00:11 - gonna be talking about pointers and the
00:13 - difference between references and values
00:15 - now this is again a very important
00:18 - concept I know I've said that about a
00:19 - lot of things in this series but this
00:20 - one really trust me when I mean this
00:22 - this will let you kind of get into more
00:24 - complex aspects of going and this is
00:26 - something that I'm gonna guarantee a lot
00:28 - of you probably won't understand on the
00:30 - first try so make sure you mess around
00:31 - with this on your own you follow with
00:33 - some of these examples I'm doing and
00:35 - that you know you try to listen to the
00:37 - whole video because there is a lot of
00:38 - stuff that I need to kind of build on
00:40 - and we need to start slow and then get
00:41 - to the end of it but pointers allow us
00:44 - to do just more complex things in golang
00:46 - and they kind of relate to what we
00:48 - talked about in the last video when I
00:50 - showed you those pointers from like the
00:52 - variable X stored you know address 3 and
00:54 - then address 3 pointed to whatever that
00:56 - variable was this is somewhat related to
00:59 - that so there's actually two operators
01:00 - in golang there's an ampersand and an
01:02 - asterisk and what the ampersand stands
01:05 - for is get the pointer and what the what
01:08 - does it Astrix stands for is dereference
01:10 - now this seems like a weird thing you
01:13 - know they seem kind of complicated I'm
01:14 - gonna show you in a few examples how
01:15 - they work so if I make actually let's
01:18 - just say like something like X colon
01:19 - equals 7 so there's two properties of
01:22 - what I've just done here we have what's
01:24 - known as a reference and we have what's
01:26 - known as a value so I've said X is equal
01:27 - to the value 7 so our value is obviously
01:30 - 7 that's whatever's on the right hand
01:32 - side of the equal sign what we're
01:34 - storing right what the data type is what
01:37 - information we have and then the
01:39 - reference is actually the location of
01:41 - where this data type is stored now in
01:43 - our mind that's X we're storing it
01:46 - inside of X in the computer's mind that
01:48 - might be just some other different
01:49 - location in memory right but regardless
01:51 - we have a reference which is pretty much
01:53 - X it's where the value is stored and
01:56 - then we have a value in that of course
01:57 - is just the value what the actual value
01:59 - is so to look at the reference of a
02:03 - variable so not the value to look at the
02:05 - reference we use the ampersand so if I
02:07 - do something like FM T dot print line
02:10 - ampersand X
02:11 - what this really says is tell me the
02:15 - reference of X so what that means by
02:17 - reference is where is the value 7 stored
02:20 - where is the location for that so let's
02:21 - have a look at what this actually prints
02:23 - for us and you can see that we get some
02:28 - random gibberish memory locations so
02:30 - this is kind of how a memory location
02:32 - looks you go 0 X and then a bunch of
02:35 - hexadecimals or I think this is a
02:36 - hexadecimal code I could be wrong on
02:39 - that but it's some you know some
02:41 - gibberish that stands for we're in our
02:43 - computer's memory the variable X
02:44 - actually sits so you see then when I did
02:47 - and X it didn't give me the value X it
02:49 - gave me the reference to X so that's
02:52 - something to understand and that
02:53 - reference we typically call a pointer
02:55 - now look what happens when I just print
02:57 - X I mean this is pretty straightforward
02:58 - but we just get the value right the
03:01 - value of x so we have the pointer and
03:03 - the reference and then we have the value
03:04 - and you access the point or the
03:06 - reference by putting an ampersand
03:08 - but before whatever it is that we're
03:10 - gonna be referencing or using now this
03:13 - is important because this allows us to
03:16 - to change things so let's just look at
03:19 - this example if I say Y colon equals
03:22 - ampersand of X what I'm saying is Y is
03:26 - equal to the pointer for X now that does
03:29 - not mean that Y is equal to 7
03:30 - it means Y is equal to whatever that
03:32 - location is that we just looked at so
03:34 - like 0 X see whatever right and that
03:36 - might change as we run the program but
03:38 - regardless it's equal to that location
03:40 - to that pointer okay so that means now
03:44 - if I actually modify Y and I use what's
03:48 - known as the dereference operator which
03:50 - I'll show you in a second I can change
03:51 - the value X because just like I showed
03:54 - you in the previous video if we have the
03:56 - pointer right if we have the pointer to
03:58 - where this value is stored if I modify
04:01 - that value so if I change it inside of
04:04 - that block that this pointer is pointing
04:06 - to then any block that points to that
04:08 - block will be modified or any variable I
04:10 - keep saying weird names I'm sure is
04:11 - confusing but the idea is like we have x
04:14 - equals 7y is equal to the pointer of X
04:16 - which means we're referencing where 7 is
04:19 - stored so now if I use that reference
04:21 - and I change the value 7 it will modify
04:25 - so let me just fmt dot print line X&Y
04:28 - for you here and now what I'm going to
04:30 - do is show you how I can actually change
04:32 - the value of X through the pointer of X
04:35 - so if I do this and I actually do
04:37 - asterisks y equals 8
04:39 - I can change Y to be equal to 8 now
04:41 - you're like what the heck is this Astrix
04:43 - Tim you're just throwing new stuff at me
04:45 - yes I am what this asterisk stands for
04:47 - is dereference
04:49 - so this says take this pointer value and
04:52 - dereference it which means access
04:54 - essentially the block so access where
04:58 - this is pointing to and then here I can
05:00 - modify where it's pointing to to be
05:02 - equal to 8 instead of 7 are not where
05:05 - it's pointing to but I can modify the
05:07 - block that it's pointing to to no longer
05:10 - be equal to 7 but be equal to 8 I'm
05:12 - gonna draw this out so this will make
05:13 - sense for you in a second but just look
05:14 - at what happens when I do this so let me
05:16 - just make sure I save here let's go go
05:18 - run tutorial go and we get let's have a
05:22 - look here ok so we get 7 some memory
05:24 - location than 8 some memory location so
05:27 - by doing this if I look at X right X
05:29 - changed from 7 to 8 yet here I didn't do
05:32 - anything with X I mean yes I got the
05:35 - pointer here but I didn't modify ax so I
05:37 - was actually able to change X through
05:39 - the pointer to X so this is the idea I'm
05:42 - storing the pointer in Y right and then
05:45 - if I actually want to change the value
05:47 - of where this pointer is pointing then
05:50 - what I need to do is I need to go
05:52 - asterisk
05:53 - Y so I need to dereference the pointer I
05:56 - know that seems like a weird thing but
05:57 - dereference it and then set that equal
05:59 - to some value so now look what is it X
06:03 - is equal to 8 and if I want to make y
06:05 - equal to no longer the pointer but to
06:08 - like the value I can say y equals
06:11 - asterisks Y actually that won't work
06:14 - because Y is it's a pointer type but
06:16 - regardless I've changed the value of X
06:18 - through this pointer Y so that I know
06:22 - seems really confusing but that is the
06:24 - basics of pointers that if I have a
06:25 - variable and this works for any variable
06:28 - by the way not just what is it not just
06:31 - regular variables like this works for
06:32 - mutable variables immutable datatypes
06:35 - doesn't matter like anything you can use
06:37 - these pointers
06:38 - I doesn't matter if it's mutable or
06:40 - immutable like the previous example but
06:42 - anyways we're able to modify X the value
06:45 - of X through the pointer to X so that's
06:48 - something that's interesting to note now
06:50 - let's look at an example of using a
06:52 - function then I'll get onto the
06:53 - whiteboard so if I say something like
06:55 - func change value and I go here and what
06:59 - I'm actually gonna say inside of here is
07:01 - I want a pointer to an int so I actually
07:04 - let's do string let's change it up let's
07:06 - say STR and then I'm gonna say amperes
07:08 - are not ampersand Asterix star now when
07:11 - you put an asterisk before a variable
07:13 - when you're putting this in a parameter
07:15 - what that stands for is I want the
07:17 - pointer for this variable I don't want
07:20 - the actual value I want you to pass me
07:22 - the pointer now the reason you want to
07:25 - do that to pass the pointer is because I
07:27 - can actually modify a variable here
07:30 - using its pointer but if you just pass
07:33 - in the value I'll show you what happens
07:34 - so let's say change value let's just go
07:38 - STR and I think I'm actually gonna have
07:41 - to do this I'm gonna say Asterix s TR
07:43 - equals changed okay now I'm gonna do
07:47 - another function I'm gonna say change
07:50 - value to and what this one's gonna do
07:53 - instead is this is just gonna take each
07:56 - string it's not gonna take the the
07:58 - pointer to it and it's gonna go here and
07:59 - it's gonna say string equals change okay
08:03 - so let's get out of this we can read all
08:06 - this here and zoom out a little bit okay
08:09 - and now inside of main what I'm gonna do
08:10 - is I'm gonna make a string so we're I'm
08:12 - gonna say to change colon equals hello
08:17 - like that and I'm gonna call both of
08:20 - these methods and show you what happens
08:21 - so I'm gonna just go do you like a
08:24 - change value to change but I'm gonna
08:28 - pass inside of here a pointer so because
08:32 - this first change value function it
08:34 - wants a pointer that's what this
08:35 - asterisk stands for I want a pointer to
08:37 - a string not just a string I want a
08:39 - pointer to a string that's the asterisks
08:40 - and then what I do here is I say okay
08:42 - well since this is a pointer if I want
08:44 - to change its value I need to
08:45 - dereference it so I go asterisk star
08:48 - equals change which means change the
08:51 - value at that
08:52 - so I'm doing that and then I'm gonna
08:54 - call that so I'm passing the pointer of
08:56 - to change which is the string to there
08:58 - and hopefully it'll change so after I
09:00 - call that I'm gonna FM t dot print line
09:03 - to change so we'll print it before and
09:06 - we'll print it after so we can have a
09:07 - look at what it looks like and now let
09:09 - me just run this and show you what
09:10 - actually happens and then we'll kind of
09:12 - discuss it here so go run tutorial dot
09:14 - go okay so we had hello and then we get
09:16 - changed so notice that even though I
09:18 - didn't change the variable to change
09:20 - anywhere here it actually got changed by
09:23 - this function the reason it got changed
09:26 - by this function is because I did not
09:28 - pass the value but I passed the pointer
09:30 - so I passed the pointer and since I had
09:33 - the pointer I was able to directly
09:35 - modify the original variable to change
09:38 - this is one of the very powerful things
09:40 - in golang that we can pass around
09:41 - pointers and use this dereference
09:44 - operator so now let me show you what
09:45 - happens when I change this to change
09:47 - value too let's see what happens now now
09:50 - I'm not gonna pass the pointer this time
09:51 - because this one doesn't take a pointer
09:53 - it just takes the string so let's have a
09:55 - look what is this saying here cannot use
09:57 - no that will be good here so let's run
10:00 - this okay so go around tutorial go and
10:02 - notice that our variable here stays
10:04 - hello even though I changed it here to
10:07 - change in change value - it doesn't
10:09 - change it stays - at the value hello the
10:12 - reason for that is because I didn't pass
10:14 - the pointer so when I'm using a variable
10:17 - that's immutable like a string right or
10:20 - that doesn't have those special
10:21 - properties like a slice and a map and I
10:24 - pass it through and I don't make it a
10:25 - pointer
10:26 - I can't directly change it inside of
10:28 - here what really happens when I do this
10:31 - is I say STR is equal to - change right
10:36 - which in this case is hello so STR
10:37 - becomes equal to hello when I don't pass
10:41 - the pointer which means I'm really just
10:43 - making a copy of the string that I
10:45 - passed here and if I make any change I'm
10:47 - only changing that copy of the string
10:49 - I'm not changing the original string
10:50 - right so if you want to do something
10:53 - like this typically you're gonna return
10:54 - a value right so maybe I'll say string
10:56 - string and then I would just return STR
10:59 - right and that would work I could return
11:01 - STR back and then we could reassign it
11:03 - down here but this won't
11:05 - change the variable that I passed
11:06 - because I'm not passing the pointer
11:08 - whereas up here I am passing the pointer
11:11 - so I'm actually able to modify it so now
11:13 - let's go to the whiteboard quickly and
11:14 - I'll draw this out and show you the
11:16 - difference between these two functions
11:17 - and what's happening on a lower level
11:19 - okay so I've just got on my whiteboard
11:21 - here I've just started drawing a little
11:23 - example here just for RAM just so we
11:25 - have something that's already kind of
11:26 - created I don't have to draw it out in
11:27 - front of you guys what I'm gonna do now
11:29 - is show you what happens when we
11:31 - actually use the code that I just wrote
11:33 - there so the code was pretty much like
11:35 - we made in a string or something right I
11:36 - mean this doesn't matter if it's precise
11:38 - but I said something like X colon equals
11:40 - high let's just use that as the example
11:42 - then I called the function change value
11:45 - so change value like that and I passed
11:50 - in to start that am percent now can I
11:52 - draw the ampersand that's the question I
11:55 - okay so you know what that's gonna be my
11:57 - ampersand I know this is not anywhere
11:59 - close to what it's supposed to be but
12:00 - just this is pointer okay this is the
12:03 - ampersand okay so we write the ampersand
12:05 - I know you guys are laughing right now
12:07 - in the comment section and what I'm
12:09 - gonna do now is put the variable X so
12:10 - when I call change value with ampersand
12:14 - X what I'm actually passing inside of
12:17 - here is a pointer now let me show you
12:19 - right so if I said X colon equals high
12:21 - then what we do in Bram is we'll say
12:23 - that like this box here is X okay so
12:26 - that's X X points to this memory address
12:30 - and this memory address stores the
12:31 - string high now forget what I showed you
12:34 - in the previous video with mutable
12:36 - immutable I kind of did a little
12:38 - shortcut there just to make it a bit
12:40 - easier to understand let's imagine that
12:42 - X and this address are kind of like the
12:43 - same thing okay they reference this box
12:45 - that stores high inside of them so what
12:48 - I do when I pass ampersand X is I
12:51 - actually pass not high but I pass this I
12:55 - pass this memory location so I passed
12:57 - this 0 X 3 7 4 so really this is your X
13:02 - 3 7 for some memory location ok so I
13:06 - pass the memory location I don't pass
13:09 - the value high now if I just put X there
13:13 - right so I don't put ampersand and I
13:15 - call so change value to like
13:18 - so let's say change value to then what
13:20 - I'm passing is X in here is not this but
13:25 - it's the value of x which is high right
13:28 - so I hope this is making sense so when I
13:31 - go to change value what I pass is the
13:33 - memory location of where this you know
13:37 - value is stored I don't pass the value
13:40 - itself which means if I have this I can
13:44 - modify the value so since I got given
13:47 - the address when I did that asterisks
13:49 - right and I said asterisks whatever we
13:51 - called the variable I don't even know it
13:53 - was passed and I called it string or
13:55 - something right someone who said string
13:56 - and I changed that equal to something
13:58 - what I was saying is change this memory
14:01 - block here change what's inside of it to
14:03 - be equal to change right so that
14:07 - actually changed the variable X up here
14:10 - because X is just pointing to this
14:12 - little block right so I think hopefully
14:15 - that's making sense but that's what I'm
14:16 - trying to illustrate here is that we
14:18 - have these memory address locations and
14:20 - we can pass those around instead of just
14:22 - the value because here if I just pass
14:25 - the value this doesn't tell me anything
14:27 - about the variable X it doesn't tell me
14:29 - where X is defined it doesn't tell me
14:31 - where high is even created right or
14:34 - where it's stored in the program we just
14:36 - passed that value which means when we
14:39 - get to that function we say STR equals x
14:43 - right so the string which was the
14:45 - parameter name I'll refresh you if we
14:47 - look at here we saw string right which
14:49 - is the parameter name so when we just
14:51 - passed the value let's go back here and
14:53 - have a look then we don't have any
14:55 - information about the variable X so we
14:58 - can't change it from inside the function
15:00 - whereas when we pass the pointer we do
15:03 - have information about the variable X
15:05 - and if we want to access the value we
15:07 - can do that and if we want to change the
15:08 - value we can do that as well so that is
15:11 - the core difference between a reference
15:13 - and a value and when you pass them to
15:15 - function this is what you want to think
15:17 - about do I care about the underlying
15:19 - memory location of where this object is
15:22 - do I care about possibly changing that
15:25 - or do I just want the value because
15:27 - there's a lot of times where we just
15:29 - want the value we don't actually care
15:30 - about modifying the variable
15:32 - that was passed in we just want to know
15:33 - what its value is equal to but there's a
15:36 - lot of times where we care about the
15:39 - variable that we're passing in right so
15:41 - in that case we want to use a pointer so
15:42 - hopefully that makes a little bit of
15:45 - sense and that that drawing kind of
15:46 - cleared things up okay so I'm just gonna
15:48 - summarize what we went over here again
15:49 - this is something that you're gonna have
15:50 - to kind of play around with and you're
15:52 - gonna learn as you go through but I just
15:54 - want to show you at least these
15:55 - operators and then the next videos this
15:57 - should start to make more sense with
15:58 - some more examples for channels and all
16:00 - the stuff where that we're gonna do
16:01 - so this asterisks when it goes to the
16:03 - left right yeah to the left of a
16:06 - datatype what that stands for is a
16:08 - pointer to that datatype so this is
16:11 - saying a pointer to a type string that's
16:13 - what that means when I do an asterisk
16:15 - string like that now when I use an
16:17 - asterisk before a variable name not
16:20 - datatype name
16:21 - what I'm saying is get the value of this
16:25 - variable so rather so this is saying
16:27 - take the pointer and figure out the
16:29 - value of this so if I say Astrix star I
16:33 - can change the value of it because I'm
16:35 - getting the value and then I'm modifying
16:36 - it with the equal sign that's what
16:38 - asterisks star does okay so I can change
16:41 - it like that now the ampersand if you
16:44 - put that before something that gets the
16:47 - address of that item the address are the
16:49 - pointer to this variable so it's not
16:52 - giving me hello it's giving me that 0x
16:54 - memory location that points to hello
16:57 - which means I can now modify whatever to
17:00 - change is equal to because I have that
17:02 - memory location so that is the core
17:05 - difference the asterisks is known as the
17:07 - dereference operator the ampersand is
17:09 - just get pointer that's what that stands
17:11 - for now we can do something crazy like
17:14 - this too so I'm gonna get rid of this
17:15 - function I'm gonna show you one last
17:18 - example that maybe will make this more
17:19 - clear so if I have another variable and
17:21 - I'm gonna define this explicitly and I
17:23 - say bar let's say pointer let's just
17:26 - call it that and then this is equal to
17:28 - an asterisk of string and is equal to
17:31 - ampersand to change
17:33 - now this is a valid line of code because
17:35 - what this is saying is I want to store a
17:37 - pointer declare did not use that's fine
17:39 - I can FM t dot print line it but this is
17:42 - a valid line of code because what I'm
17:44 - saying
17:44 - is that this pointer variable is of type
17:48 - pointer to string and then I assign this
17:51 - to the pointer to a string so now I have
17:54 - the pointer to the variable to change
17:57 - and I can modify it through this
17:59 - variable so if I print out asterisks
18:02 - pointer what this does and I know this
18:04 - is confusing cuz there's so many use
18:05 - cases for these things but if I print
18:07 - out Astrix pointer this will print out
18:09 - hello in fact I'll prove it to you if we
18:11 - go round tutorial go we'll get the value
18:13 - hello because this is saying find the
18:15 - value at the pointer whereas if I just
18:18 - print out the pointer right then we're
18:21 - gonna just print out whatever that
18:22 - memory address location is which is 0x
18:25 - c4e whatever it is right so we print
18:27 - that out so that is the core difference
18:29 - there now watch though if I try to do
18:31 - this and I'll show you that this will
18:33 - likely not work if I do the ampersand -
18:35 - pointer so let's go go run tutorial go
18:38 - and let's have a look at this okay so
18:40 - this actually this is interesting so
18:42 - this is a different location than okay
18:46 - so let me just say let's do this because
18:48 - I've gone to an example that I think is
18:50 - a little bit more complex for some of
18:52 - you guys but let me just print these out
18:53 - to show you okay so what I've printed
18:55 - here is I printed the pointer too to
18:57 - change and I've printed the pointer the
19:01 - pointer to the pointer so you can see
19:04 - that this first pointer here is the
19:05 - pointer that actually points to the
19:07 - variable to change which allows me to
19:09 - modify right and when I did the
19:11 - asterisks on pointer it gave me the
19:12 - variable hello now I actually got the
19:15 - pointer of the pointer when I did this
19:17 - so I said ampersand of pointer which is
19:20 - a pointer to a pointer now I know that
19:22 - seems confusing but this is pretty much
19:24 - telling me where the variable pointer is
19:27 - storing the pointer to to change right
19:30 - because this is storing a value but this
19:32 - variable is storing a pointer so this is
19:34 - really like when I do this I'm getting
19:36 - the pointer that points to to change
19:38 - where whereas here this is just a
19:42 - pointer that points to hello right so I
19:45 - hope that kind of makes sense
19:47 - maybe that confused you more than it
19:49 - needed to but try to mess around with
19:50 - these things and see if you can figure
19:52 - out how the asterisks works and how the
19:54 - pointer works again this is really hard
19:55 - to explain because we need like really
19:58 - good concrete examples and a long time
19:59 - to nail this in and I can't do you know
20:01 - two three hour long YouTube videos for a
20:03 - topic like this but please do make sure
20:05 - you understand pointers before moving
20:07 - too much further forward although if
20:08 - it's a little bit like questionable in
20:10 - the next videos that we'll be doing some
20:12 - more examples hopefully so maybe it
20:13 - should clear things up so with that
20:15 - being said I think I'm gonna leave the
20:16 - video here I hope this was at least
20:18 - somewhat helpful you guys and now you
20:19 - have some idea there between pointers
20:21 - and dereference operators which I've
20:24 - talked about here again this is a
20:25 - complex topic so don't feel bad if it
20:27 - doesn't make complete sense and I guess
20:29 - with that being said like the video if
20:31 - you enjoyed subscribe and I will see you
20:33 - in the next one