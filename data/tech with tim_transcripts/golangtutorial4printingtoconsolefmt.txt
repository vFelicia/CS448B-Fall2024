00:02 - [Music]
00:06 - hello everybody and welcome back to the
00:08 - golang tutorial so in today's video what
00:11 - we're going to be doing is talking about
00:12 - the FMT module specifically the two
00:15 - methods sprint f and printf now pretty
00:18 - much what those are is print a formatted
00:21 - string ant pretty well save or create a
00:23 - formatted string and you've seen this
00:25 - actually before in one of the previous
00:26 - tutorials that I did where I wrote
00:28 - something like FM T dot print F and then
00:31 - notice that's because I imported FM t
00:33 - first of all that's important I did
00:34 - something like percent T and then I put
00:37 - a value say like 10 here and maybe you
00:39 - guys can guess what's gonna pop up so
00:41 - let me actually run this from my console
00:42 - down below but what that does is
00:45 - actually print out the type of this
00:47 - variable so you see it printed int down
00:50 - in the console there but this is what
00:52 - printf allows you to do so essentially
00:54 - we could write something like Hello % T
00:56 - so whatever string we want and then
00:58 - embed these little formatter things with
01:00 - the % put a bunch of variables we don't
01:02 - just have to put 1 in fact I can put
01:04 - another one here let's look at what
01:06 - percent V does and let's run this and we
01:10 - get hello into 10 so what percent V does
01:14 - is actually print the value of the
01:15 - variable but the idea being that this is
01:17 - how we format strings and kind of
01:19 - include variables in our output to the
01:22 - console now that's what printf does it
01:24 - prints out this formatted string and
01:27 - I'll show you what all these little
01:27 - formatters are in just a moment I have a
01:29 - cheat sheet here that we're gonna go
01:30 - through but what sprint F does is
01:34 - actually let us store that value in a
01:36 - variable so we can do something like var
01:39 - x equals actually var X string equals FM
01:43 - t sprint F and then inside of here we
01:47 - could put the same thing we had here and
01:49 - I would simply store whatever this value
01:51 - is which is hello into 10 inside of this
01:54 - variable X right and that's the idea
01:56 - behind that so that is pretty much how
01:59 - the sprint app and printf work now let
02:01 - me show you a few for matters and we'll
02:02 - just go through a bunch of examples here
02:03 - so these are basic type and value those
02:06 - are kind of default ones but let's look
02:08 - at the cheat sheet so we can see that we
02:10 - start with general I've already shown
02:12 - you these two so value
02:13 - and type the value is just whatever the
02:16 - value of that variable is or the
02:18 - statement that you put there will be
02:19 - printed out 2% signs is actually a
02:22 - literal % so you can't just print a % by
02:26 - doing like percent like that sometimes
02:30 - you'll run into an issue if you try to
02:31 - do that so if you do 2% signs that will
02:33 - actually make sure you print 8 % so
02:36 - that's why we have that um
02:37 - but yeah all right let's see if this
02:39 - loads back up okay so for boolean x' we
02:41 - have % t what this will do is either
02:44 - print out a true or false value
02:45 - depending on the value of the variable
02:48 - that you actually put in this output so
02:50 - let's look at an example of percent T in
02:52 - lowercase so if I go percent T notice
02:54 - that's different than the capital % T
02:56 - and actually let's just leave the value
02:58 - 10 here and let's take a guess at what's
02:59 - gonna happen in the console so let's
03:02 - look here and see and what it's gonna
03:05 - happen we get hello and then whoa okay
03:08 - some crazy thing that doesn't seem to
03:09 - make any sense why that's because we
03:12 - cannot format the number 10 as a true or
03:14 - false value but now if I actually change
03:16 - this to 0 and I run this so go run
03:19 - tutorial go what's gonna happen here
03:21 - same thing 0 doesn't work so I need to
03:23 - either put a boolean value here so
03:26 - something like true so if we look at
03:28 - true we can see this we get hello true
03:32 - so that's how you format be true or
03:34 - false right now of course you could just
03:37 - like do true as a string if you wanted
03:38 - to do that but sometimes you want to
03:40 - print out a boolean so in that case you
03:43 - use % T and that will format the boolean
03:45 - appropriately for you ok so now that
03:48 - we've done that lets go down to integer
03:49 - so integer has a few examples here that
03:51 - essentially let you pick what base you
03:53 - want to show when you print out the
03:55 - integer so we have % B o D and X 4 2 8
03:58 - 10 and 16 was the basis of binary octal
04:02 - based on numbering system so decimal and
04:04 - then hexadecimal which is 16 I'll show
04:07 - you some examples of how these work
04:08 - they're pretty straightforward
04:10 - we'll just keep leaving I'll show say
04:11 - number like that and now we'll do % B
04:15 - let me show you what percent B of a
04:17 - thousand 24 is hopefully some of you
04:20 - guys can guess what that value is
04:21 - actually let's do a thousand 25 just to
04:24 - make it more interesting
04:26 - and what am i doing let's run down here
04:28 - so go run tutorial dot go and see that
04:31 - this is actually the binary
04:32 - representation of a thousand twenty five
04:34 - now let's just change this like 3435 see
04:38 - what number we get here let's have a
04:39 - look and one zero whatever a bunch of
04:43 - this gibberish okay so I'm gonna change
04:45 - from binary now to octal which is oh and
04:48 - let's just have a look at what we get
04:49 - there we can see this will be a little
04:51 - bit shorter than previously so 6 5 5 3
04:53 - nice let's go from octal to decimal and
04:57 - see what happens here we know that this
04:59 - is gonna give us actually the same value
05:01 - and finally let's go to hexadecimal
05:03 - which was it H knows X my bad and let's
05:07 - run that and see what we get and there
05:10 - we go we get D 6 B now something to note
05:13 - here if you actually want to use capital
05:15 - letters you can do a capital X and that
05:17 - will use capital letters for this so you
05:18 - see a capital D and then B instead of
05:21 - lowercase for when you're doing the
05:23 - hexadecimal formatting so something like
05:24 - that but that's the basics for integers
05:27 - so again this stuff is pretty easy it's
05:28 - just a matter of kind of almost
05:29 - memorizing some of these things or
05:31 - knowing where to look to find all right
05:34 - so now we're getting into ones are a
05:36 - little bit more complicated we have
05:37 - floating points so floating points um we
05:40 - have floating point numbers in computing
05:42 - sometimes it's hard to represent them
05:44 - and we don't know what precision to use
05:45 - and things like that
05:46 - so we have to be careful when we're
05:48 - printing them out in what little
05:50 - formatter we want to use so if we use %
05:53 - e that will actually print it out in
05:55 - scientific notation so if you have a
05:57 - scientific calculator and you do some
05:59 - crazy math equation with really long
06:00 - numbers what you'll see is that you get
06:03 - that little E at the end and it shows
06:05 - like E Plus 15 which is supposed to be
06:07 - the exponent or like negative 15 or
06:09 - whatever it is right that's what this
06:11 - will do so it'll actually put the little
06:13 - e in there and scientific notation now
06:15 - the standard is typically % F or capital
06:18 - % F now this will print the decimal it
06:21 - just won't print that will eat the
06:23 - exponent which comes with scientific
06:24 - notation and then % G is actually used
06:27 - for very large exponents to make sure
06:29 - that there's not a miss representation
06:32 - of them when we print them out and I'll
06:33 - show you an example of all these right
06:35 - now so you understand how they are so
06:37 - let's actually change this to what
06:39 - this I got a look here so I don't forget
06:40 - percent e and let's just do something
06:43 - like two point three and a bunch of
06:45 - random digits and see what we end up
06:47 - getting here so let's run that go down
06:50 - here and we can see that our output is
06:53 - two point three seven six three seven e
06:56 - + 0 0 right so if you understand
06:58 - scientific notation you'll understand
06:59 - why or what that means let's shorten
07:02 - this a bit and see if we get something
07:03 - different
07:04 - let's have a look we get + 0 0 again so
07:09 - I don't know the all the scientific
07:10 - notation stuff that and how that works
07:12 - but that's what that does for you so I
07:14 - figured I'd show it to you and now let's
07:16 - do decimal no exponent so if I do % F
07:18 - like that and notice that % F + %
07:22 - capital F actually do the same thing so
07:25 - doesn't matter which one you use there
07:26 - we just actually just get the
07:27 - representation of the number but notice
07:29 - it cuts off after a few digits because
07:32 - it can't represent these last ones that
07:34 - we're trying to show here so if we
07:35 - actually want to make sure that we're
07:36 - showing all of these we have to talk
07:38 - about something called width and
07:39 - precision which I will tell you in a
07:41 - second okay so that's present F but now
07:43 - let's look at percent G and see if this
07:46 - will show us the whole thing so let's
07:47 - have a run down here go run tutorial dot
07:51 - go and notice that shows us all of that
07:53 - so when we're dealing with large
07:54 - exponents or sorry large decimals which
07:57 - this would be then we need to use
07:59 - something like percent G to represent
08:00 - that whole number so that is kind of the
08:02 - trick there okay so those floating
08:04 - points will talk about width and
08:05 - precision as second but let's get
08:06 - through strings so when we want to
08:08 - format strings we can use percent s or
08:10 - percent Q this one's pretty
08:12 - straightforward so if I make a string
08:13 - say oops always do this I let's say like
08:17 - Tim here and I change this to percent s
08:19 - what this will do is just print out Tim
08:22 - it'll just take Tim and say number Col
08:24 - and Tim let's look at it down here we
08:27 - get number : Tim now if I change this to
08:30 - Q which is actually the other one for
08:33 - string so this is a double quoted string
08:35 - what this will do is print out Tim but
08:37 - it will include the double quotation
08:38 - marks in the output so let's have a look
08:40 - here go run tutorial go we get number
08:44 - and then Tim surrounding quotation mark
08:46 - so that's something that's cool
08:47 - and it makes it a lot easier if you
08:48 - actually want to quote something because
08:50 - here I can't just like put quotations
08:52 - around the
08:52 - there's gonna be an issue with that okay
08:55 - so now that we did that let's wait for
08:59 - this to load up here let's talk about
09:00 - wit and precision
09:01 - so sometimes we actually want to Pat our
09:04 - strings so that there's certain length
09:06 - so say we're printing like five or six
09:08 - different things we want them all to be
09:10 - centered or in the same area so what we
09:13 - can use is padding now these two
09:16 - sections really should probably be the
09:18 - same because they're they're very
09:19 - similar but the idea is that when we
09:21 - want to make a string or something a
09:23 - certain length we simply precede the
09:25 - formatting character here with some
09:28 - number that says how long we want it to
09:30 - be so in this case this would be the
09:32 - default width and default precision
09:33 - because we just put % F which is for
09:35 - floating point numbers but if we put %
09:38 - 9f this will make it nine wide so from
09:41 - the left side of the screen it will make
09:43 - sure that it's nine wide characters and
09:45 - it will do that by simply padding the
09:47 - front of our string with spaces so an
09:49 - example would be something like this if
09:51 - I had like Tamm and I want it to be nine
09:52 - wide then I would add one two three four
09:55 - five six spaces then I would add Tim
09:57 - which would make this nine wide that's
09:59 - what the padding means assuming I did be
10:02 - correct on spaces so that's what that
10:04 - means now we'll talk about precision so
10:06 - if you do a dot followed by some number
10:08 - preceding the format character here what
10:11 - that means is we're gonna make this
10:13 - precision too so essentially round to
10:15 - two decimal points if you just put a dot
10:17 - that means just round that number off to
10:20 - a whole number so don't include the
10:21 - decimal points and if you do a number
10:24 - and then dot some precision F that's
10:27 - gonna pad it to that width with
10:28 - precision of this for whatever that
10:31 - formatting character is okay so let's
10:33 - just have a look at an example here so
10:34 - let me get rid of that and what I'm
10:36 - gonna show you now is if I do something
10:37 - like say nine Q doesn't matter if this
10:40 - is f or not and I put Tim what this is
10:42 - gonna do is pad Tim to be length nine so
10:44 - it's actually see how that works so if I
10:46 - run this we get let's see number Tim and
10:51 - you see that it actually made it nine
10:52 - wide or made it yeah nine wide from the
10:55 - left hand side now if I wanted to make
10:57 - it justified on the other side so it's a
10:59 - set number blank is cool or something
11:03 - like that I know this doesn't make any
11:04 - sense but if I make this negative
11:06 - what this will do is make it left
11:08 - justified so it will be padded from the
11:09 - other side so let's look at this and see
11:13 - what we get a number Tim is cool notice
11:16 - the spaces are here not on the other
11:18 - side now let's have a look at floating
11:20 - points because I wanted to show you the
11:21 - precision so let's say we have a long
11:24 - floating-point number something like
11:25 - that we want to round it up to do
11:27 - decimal points I could do something like
11:29 - dot 2f or say yeah dot two I think
11:32 - that's actually it's and this will round
11:34 - this to two decimal points so let's have
11:36 - a look if I can get down here let's run
11:40 - go tutorial dot go and we see three
11:42 - point four six is cool so we just
11:45 - rounded off notice that this is five but
11:47 - it rounded to six and then if I just do
11:48 - dot F let's see what that does and we
11:53 - get three is cool so it just rounds it
11:56 - actually to the whole number so those
11:58 - are pretty much all the things I want to
12:01 - show you know the last thing I guess is
12:02 - that we can use this zero so that will
12:05 - mean that we actually pad with a digit
12:07 - so if I change this to say like zero D
12:10 - and I say like zero seven D what this is
12:13 - gonna do is actually pad with the digit
12:15 - zero to length seven so if I change this
12:18 - to say like forty five let's have a look
12:21 - at what this does here we should notice
12:23 - that we pound with the digit zero so we
12:26 - can see that we do that padding but we
12:27 - fill with zeros and subspaces yeah so
12:30 - that is pretty much it I mean I showed
12:32 - you what's printf does as well it's
12:34 - pretty straightforward like far let's
12:36 - just say out string equals and all I
12:39 - have to do is really change this to say
12:40 - sprint instead of print so let's just go
12:44 - SPR int F and that will actually just
12:47 - store the value in the variable so I
12:48 - mean I'll show you that there's nothing
12:50 - wrong with doing this but if I decided
12:52 - to out declare to not use okay well if I
12:56 - print this out so let's do fmt dot print
13:01 - F or actually let's just println and
13:03 - we'll print out like that and we run
13:06 - this then we should see there's no
13:08 - problem and that will actually print out
13:09 - the formatted string so we stored in
13:11 - this variable which means we could use
13:13 - it for something else and then we just
13:14 - print the line outs now one last thing
13:16 - to say there's a few special characters
13:18 - that
13:18 - called escape characters that we can use
13:20 - in our strings the only two I'm gonna
13:22 - show you here backslash n backslash T
13:24 - backslash n stands for carriage return
13:27 - or new line that's equivalent to hitting
13:29 - enter on your keyboard so what will
13:31 - happen here is this will automatically
13:32 - make a new line so we'll actually just
13:34 - just have a look at it here I guess
13:36 - go run tutorial go and you can see that
13:39 - it breaks and it does that new line in
13:40 - our string now what percent T does is
13:43 - actually a tab so that's a tab character
13:45 - I believe that's just four spaces but if
13:47 - I run this you should notice there'll be
13:49 - more spaces now than they would before
13:50 - and we get that tab and tabbing over so
13:54 - I think with that that's all I want to
13:55 - show you this has been the FMT module a
13:57 - little bit of printing and formatting
13:59 - which are going to come in handy later
14:00 - on in the next tutorial we'll talk about
14:02 - scanning and getting user input