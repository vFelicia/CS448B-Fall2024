00:02 - [Music]
00:08 - in this video i'll be showing you how to
00:10 - use mongodb in python specifically i'll
00:13 - be showing you how to set up a remote
00:15 - mongodb database using mongodb atlas
00:18 - i'll show you how to connect to that
00:19 - database in python i'll explain the
00:21 - mongodb document model and i'll
00:23 - demonstrate the crud operations like
00:25 - creating reading updating and deleting
00:28 - after that i'll briefly discuss
00:29 - relationships using document embedding
00:31 - and foreign keys and that is what i will
00:33 - talk about in this video this tutorial
00:36 - is designed for beginners no advanced
00:38 - knowledge of python is required and with
00:40 - that said let's go ahead and get into it
00:42 - so let's begin here by talking about
00:44 - what mongodb is mongodb is a nosql or
00:48 - nosql document oriented database that is
00:51 - extremely fast and easy to use it's
00:53 - personally one of my favorite databases
00:55 - and i especially love to use it for my
00:57 - hobby projects that i want to get up and
00:59 - running as fast as possible mongodb
01:02 - provides a full suite of developer
01:03 - friendly tools like mongodb compass
01:06 - mongodb shell and a great vs code
01:08 - extension generally speaking it's one of
01:10 - the simplest databases to learn and has
01:12 - a very low barrier to entry it's also
01:15 - highly scalable and performant and can
01:17 - be used in enterprise grade applications
01:19 - so all of these facts are why i was
01:21 - super happy to have mongodb actually
01:23 - sponsor this video and team up with them
01:25 - to create this fully guided tutorial as
01:27 - well as some additional ones that will
01:29 - be posted on the channel shortly now
01:31 - mongodb is free to use with a basic
01:33 - configuration and can be hosted in the
01:35 - cloud or locally however since mongodb
01:37 - has sponsored this video they're going
01:39 - to provide all of you with an additional
01:41 - 25 in free atlas credits which you can
01:44 - redeem by clicking the link in the
01:45 - description and using the code mkt
01:48 - hyphen tim now that we have a general
01:51 - introduction to mongodb let's create and
01:53 - connect to our first database so as i
01:56 - mentioned the first step for us in this
01:57 - video is to create a remote mongodb
02:00 - database we're going to host this using
02:02 - something called mongodb atlas which is
02:04 - completely free and you can find the
02:06 - link to start doing that from the
02:08 - description now as a reminder if you do
02:10 - want some free credit for mongodb maybe
02:12 - you want to play around with it after
02:13 - this tutorial then use the code mkt tim
02:16 - that will be in the description as well
02:18 - as up on the screen anyways the page
02:20 - that i'm on right here is what's linked
02:21 - in the description gives you some
02:23 - information about using mongodb in
02:24 - python actually pretty helpful uh but
02:26 - i'll walk you through all of these steps
02:28 - anyways so what we need to do here is
02:30 - either sign in or click on try for free
02:32 - depending on if you have an account or
02:33 - not i'm gonna walk you through the setup
02:35 - steps from a brand new account let's do
02:37 - that now so i've just created a new
02:39 - mongodb account here i just signed in
02:41 - with google of course you can sign in
02:43 - however you'd like and i'm just going to
02:45 - go through the privacy policy and all of
02:47 - this type of stuff and kind of walk you
02:49 - through what we need to do here to get
02:51 - our first cluster and database set up so
02:53 - you'll be brought to a page like this
02:55 - that kind of asks you some information
02:56 - so i'm going to say i'm going to learn
02:58 - mongodb i'm curious if they have kind of
03:00 - education in here we'll just go with
03:02 - other for now i'll say education uh
03:04 - what's your preferred language and then
03:05 - we'll go with python
03:07 - now once we fill that out we're going to
03:08 - be brought to a page like this we want
03:10 - to select the free plan for now of
03:12 - course if you want a dedicated one then
03:14 - you can go for that and i'm going to
03:16 - click on create
03:17 - and for now we're going to make sure
03:18 - that it's shared that's what's free and
03:20 - we're just going to go through a few
03:21 - configuration options here so anything
03:23 - that doesn't have the little i guess
03:25 - dollar
03:26 - bill beside it is free so depending on
03:29 - what you're closest to select your
03:30 - region in my case i am probably going to
03:33 - be us east because i'm kind of in
03:34 - toronto region and they don't have a
03:36 - canadian one right here that's fine and
03:38 - then for your cloud provider i'll just
03:40 - go with aws it doesn't really matter all
03:42 - this type of stuff you don't really need
03:44 - to change and you actually can't really
03:46 - change most of it because we're just
03:47 - going with the free plan here but for
03:49 - the cluster name you can name this
03:50 - whatever you want
03:51 - in this case i'm going to name it
03:53 - tutorial and as it says here you can't
03:55 - change this once it's named so just give
03:57 - it a name that you're going to like and
03:59 - want to keep but again this is for demo
04:01 - purposes so not a huge deal
04:02 - okay so i'm going to click on create
04:04 - cluster here that's going to take a
04:06 - second
04:07 - but first i need to enter a username and
04:09 - password that i can use to sign into my
04:11 - cluster so obviously don't forget what
04:13 - this information is i'm going to go with
04:15 - tech with tim and then i will type out
04:18 - a password here that i'm not going to
04:20 - tell you and create my user
04:23 - okay my user has now been created and
04:25 - it's going to ask where we want to
04:26 - connect from so local environment or
04:28 - cloud environment in this case we're
04:30 - going to connect from our local
04:31 - environment and to be able to do that we
04:33 - need to add our ip address to the
04:35 - allowed ip address kind of access list
04:38 - so they actually make it really easy
04:39 - here you can just click on this button
04:41 - i'm going to blur this out because
04:42 - obviously i don't want to leak my ip
04:44 - address but i'm going to add this to
04:45 - this list so i'm going to say
04:47 - add my current ip address that is now
04:49 - added and then we can click finish on
04:51 - finish and closer and go back to
04:54 - databases now that we are here we just
04:56 - have to wait for the cluster to be
04:58 - created once it is i will be right back
05:00 - and walk you through the next steps so
05:02 - my cluster has now been created you can
05:04 - see tutorial right here and i can click
05:06 - on it to view the overview page and i
05:08 - just want to mention that what a cluster
05:09 - is is kind of an abstraction on top of a
05:12 - database not exactly but it is a higher
05:15 - level than a database databases would be
05:17 - inside of a cluster and in this case the
05:19 - type of cluster i have is a replica set
05:22 - with three nodes now what that means is
05:24 - that i actually have redundancy here
05:26 - because i have three servers that are
05:28 - running my database so my database is
05:31 - going to exist in three different places
05:33 - and this is going to provide better
05:35 - scalability as well as redundancy right
05:36 - in case any of the servers go down or in
05:38 - case we lose some data we'll have that
05:40 - backed up in multiple places again i
05:42 - don't want to get into this too much
05:43 - it's a bit more advanced than what i
05:45 - want to talk about in this tutorial but
05:47 - i just figured i'd mention a cluster
05:49 - again it's kind of on top of a database
05:50 - provides scalability as well as
05:52 - redundancy and a few other things for
05:54 - now though let's click into tutorial and
05:57 - you can see there's all kinds of stuff
05:58 - that we can have a look at here and we
06:00 - can click on connect now connect is what
06:02 - i want to go to because we need to grab
06:04 - our connection string and figure out how
06:06 - to connect here so we can connect our
06:09 - application we can connect using mongodb
06:11 - compass which is a developer tool and we
06:13 - can use the mongodb shell same thing
06:15 - that is a developer tool for now let's
06:17 - go with connect your application and
06:19 - we're going to select python here and
06:22 - we'll go version i guess 3.11 or later
06:25 - shouldn't actually make a big difference
06:26 - for the connection string here okay so
06:28 - now that we've done that it's telling us
06:30 - that this is the string we're going to
06:31 - use to connect to our our cluster and to
06:34 - connect to our database so we can copy
06:36 - this and we'll bring this into a python
06:38 - file now i just want to mention quickly
06:40 - that there is a program here called
06:42 -  cli so the
06:44 -  command line interface you can do
06:47 - everything that i just did from the cli
06:50 - but it's easier to go through the
06:51 - graphical user interface setup if you're
06:53 - not familiar with this so if you care to
06:55 - you can download the cli i'll leave a
06:57 - link to this in the description and
06:59 - again you can create a cluster create a
07:00 - database collections all that type of
07:02 - stuff from the command line you don't
07:03 - need to do it from the graphical user
07:05 - interface anyways we've pretty much done
07:07 - what we need here for setting up our
07:08 - remote database so let's go into visual
07:11 - studio code which is the editor i'm
07:12 - going to use for this video and let's
07:14 - just paste our connection string right
07:17 - here into a python file i will deal with
07:19 - it in a minute but we just want to have
07:21 - access to that for later on so now that
07:23 - we're here in visual studio code i'm
07:24 - just going to open up my terminal here
07:26 - and start installing some of the
07:27 - dependencies that we need for this
07:29 - project the first thing that we're gonna
07:31 - need is what's known as the pi
07:33 - module in python and it's going to allow
07:35 - us to easily interact with our database
07:37 - so we just want to go into a terminal or
07:39 - a command prompt and type the following
07:41 - command pip install and then this is
07:43 - going to be pi and inside of
07:45 - square brackets you're going to put srv
07:47 - like that so try this command i should
07:50 - already have this installed so it should
07:51 - happen pretty quickly and then once we
07:53 - do that we're going to install one more
07:55 - module as well
07:57 - so the next module is going to be python
08:00 - hyphen dot env this is going to allow us
08:03 - to access an environment variable file
08:05 - where we're going to store our
08:06 - credentials for signing into mongodb
08:09 - okay so those are the two pip commands
08:10 - that we need to run if for some reason
08:12 - those commands don't work for you you
08:13 - can try the command pip 3 you can also
08:16 - try python hyphen m pip install or
08:19 - python 3 hyphen m pip install depending
08:22 - on your operating system try all of
08:24 - those and if none of those work i'll
08:25 - leave two videos on the screen and
08:26 - linked in the description that show you
08:28 - how to fix this commit okay now that we
08:30 - have that installed though we're just
08:32 - gonna set up vs code to be better for
08:34 - working with mongodb so there's actually
08:36 - an extension in vs code if you go to the
08:38 - extensions pane here for mongodb so if
08:40 - you just type in mongodb you'll see the
08:43 - extension by the verified creator here
08:45 - or author and you can install this i
08:47 - already have it installed now this
08:49 - extension provides a bunch of awesome
08:50 - features where we're able to navigate
08:52 - our data actually view it here and
08:54 - visualize it we can go into a playground
08:56 - mess around with some queries uh we can
08:58 - do a bunch of other stuff like document
09:00 - editing very useful and definitely
09:02 - something you want if you're going to be
09:03 - working with mongodb once you install
09:05 - this you probably need to refresh vs
09:07 - code then you'll see a little button
09:09 - here for the extension where you can
09:10 - actually connect to your cluster which
09:12 - we'll do in a second as well as go to
09:14 - the playground okay so now that we've
09:16 - done all of that let's actually connect
09:18 - because we want to start writing some
09:19 - code here for mongodb so for now i'm
09:21 - just going to say my connection
09:23 - underscore string
09:25 - is equal to and then i'm just going to
09:26 - put this in a string
09:29 - and when i save hopefully it's going to
09:30 - put that on a new line okay it's not so
09:33 - let me just separate this a bit just so
09:35 - we're able to read it and i'll go with a
09:37 - triple quoted string here i just make
09:39 - that a little bit easier to see
09:41 - okay so that's my connection string but
09:43 - you'll see here that we need a password
09:45 - so what i'm going to do is make an
09:46 - environment variable file here so just
09:48 - follow along and make a new file called
09:51 - env make sure this file is in the same
09:53 - directory as where your python file is
09:55 - and inside of here we just want to make
09:57 - a variable i'm going to call this
09:58 - mongodb underscore pwd standing for
10:01 - password i'm going to make this equal to
10:03 - whatever the password is now of course i
10:05 - don't want to show you what this
10:06 - password is so i won't type it in right
10:08 - now but place your password in a dot env
10:10 - file uh that has under mongodb
10:13 - sorry underscore pwd equal to and then
10:16 - whatever the password is in a string
10:18 - once you've done that we can go to
10:20 - main.pi and we're going to use that
10:22 - python.enb module to load that
10:24 - environment variable file and get access
10:26 - to our password without leaking it
10:28 - directly inside of the code so to do
10:30 - this i'm going to say from and this is
10:32 - going to be dot env
10:35 - import and we're going to import
10:36 - load.env we're also going to import
10:39 - find.env
10:41 - so the first thing we'll do here is say
10:43 - load underscore.env we're then going to
10:45 - put inside of here find.env and this is
10:48 - kind of a shortcut that's just going to
10:49 - load the environment variable file for
10:51 - you so you don't have to manually define
10:53 - the path and all of that now before we
10:55 - do that we'll import a few other things
10:56 - we're going to import os we're going to
10:58 - import p print which stands for pretty
11:00 - printer we'll have a look at that in a
11:01 - minute and then we're going to say from
11:04 - hi and we're going to import the
11:07 -  client which we'll use to make a
11:09 - connection
11:10 - okay now that we've done that let's grab
11:12 - the password from our environment
11:14 - variable the way we can do that is say
11:16 - the password is equal to os
11:17 - donevyron.get
11:20 - and then we're going to put the
11:21 - corresponding name that we had in our
11:22 - env file so it's going to be mongodb
11:25 - underscore pwd that will then give us
11:27 - the password that's stored inside of
11:29 - here alright so now that we've done that
11:30 - we're just going to change this string
11:32 - here to an f string only available in
11:34 - python 3.6 and above by the way and i'm
11:36 - going to put my curly braces and insert
11:38 - my password into the connection string
11:41 - now that we have that we can actually
11:43 - connect so i'm going to say my client is
11:45 - equal to the client and then i'm
11:47 - going to pass the connection string like
11:49 - that so at this point we're pretty much
11:50 - ready to test this code out and see if
11:52 - it's working however i do need to make a
11:54 - quick fix here i realized that this says
11:56 - my first database now that's just the
11:58 - default option that it gives you for
12:00 - mongodb we don't have this database
12:02 - created yet so if we try to connect to
12:04 - it there's going to be an error so i'm
12:05 - just going to remove that and i'm
12:06 - actually going to move all this up onto
12:08 - the same line just because i think it's
12:10 - going to give us an error if it's not
12:12 - all on the same line so that means we
12:14 - can kind of remove the triple quoted
12:15 - string here and make it a single quoted
12:17 - string and now that should be all good
12:19 - so let's test this code out by just
12:21 - running it and if we don't get any
12:22 - errors here that's good that means that
12:24 - we were able to connect and it looks
12:26 - like everything's happening fine we're
12:27 - not getting any errors great now that
12:29 - we've done that i want to show you a
12:31 - graphical user interface tool called
12:33 - mongodb compass that allows you to
12:36 - actually visualize the database and is
12:38 - going to be really helpful to us now
12:39 - again we can do this from the vs code
12:41 - extension but compass will work even if
12:43 - you're not in vs code so i figured i'd
12:45 - show it to you this is what the
12:46 - application looks like however if you
12:48 - want to download it i will leave a link
12:50 - so you have compass right here another
12:52 - way to get to kind of the download of
12:54 - mongodb compass is to go to your cluster
12:57 - click on connect click down here where
12:59 - it says compass and then select either i
13:02 - don't have compass or i do
13:04 - and you're gonna have to go here anyways
13:05 - because what we want to copy is the
13:07 - connection string right here so copy the
13:09 - connection string then open mongodb
13:11 - compass so we're gonna copy that here
13:13 - we're gonna go to compass i'm assuming
13:15 - at this point you would have ran through
13:16 - the installer if you're gonna download
13:18 - this and you should be able to simply
13:20 - paste this in so i'm going to say are
13:22 - you sure you want to edit your
13:22 - connection string yes i would like to
13:24 - edit it i'm going to paste in this
13:26 - connection i'm going to write out my
13:28 - password editors please blur this and
13:30 - now that we have that we can click on
13:32 - connect all right so i've just connected
13:34 - here to the database if this doesn't
13:35 - work again make sure your ip address is
13:37 - in that access list you can get there by
13:39 - clicking on network access from the side
13:41 - panel here and then add your ip address
13:44 - now though we see that we have two
13:45 - databases admin and local so we can
13:48 - create a database manually here or we
13:49 - can do one from code or additionally we
13:52 - can do one from the cli tool as you can
13:54 - probably tell mongodb has a ton of
13:56 - pieces of software to help developers
13:58 - out and make it easier than doing it all
14:00 - manually from code so why don't we just
14:02 - make a database
14:03 - while we're here we can call it test and
14:06 - then we're going to create something
14:06 - known as a collection which i'll discuss
14:08 - in a second and we'll call that test as
14:10 - well
14:11 - okay so let's create that takes a second
14:13 - we now see that we have tests and if i
14:14 - click in here we have a collection and
14:17 - inside of here we'd be able to view all
14:19 - of our documents again i'm going to
14:20 - discuss what that means all right so now
14:23 - that we've done that let's simply see if
14:25 - we can view some information about our
14:27 - database from our code and then i will
14:29 - talk to you about the mongodb document
14:32 - model and kind of how it's different
14:33 - than sql
14:35 - so for now what we can do is say that
14:37 - our databases so dbs is equal to and
14:40 - then we can use our client and we can
14:43 - use the method here list
14:45 - database
14:46 - and i think it's just going to be
14:48 - database names like that
14:50 - so for now let's just print this out
14:51 - we'll print out the dbs
14:53 - and let's see what we get
14:55 - and notice here we have three databases
14:57 - test admin and local now if we want to
15:00 - access a database it's pretty easy to do
15:02 - this i can say my testdb is equal to and
15:04 - then this is going to be the client dot
15:06 - and you just put the name of the
15:08 - database so i can do test now you also i
15:10 - believe can access it like this so using
15:13 - kind of the dictionary or key syntax but
15:15 - usually i prefer just to type it out
15:17 - like this okay so client.test and what
15:20 - we can do is list all of the collections
15:23 - inside of this database and the way we
15:25 - do that is say collections is equal to
15:28 - and then this would be the test
15:30 - underscore database and then not get but
15:32 - this is going to be list underscore
15:34 - collection names like that and then of
15:37 - course i can print out collections so
15:39 - let's run that and let's see what
15:41 - collections we have and notice we have
15:42 - one collection test which is the one
15:44 - that we just created okay now that we've
15:46 - talked about that let me just hop over i
15:48 - guess to another screen and discuss the
15:51 - document model and then we'll come back
15:53 - here and look at the crud operations so
15:55 - now that we've created our first
15:56 - database let's briefly discuss the
15:58 - differences between mongodb in a
16:00 - traditional database so most databases
16:03 - are known as relational database
16:04 - management systems or rdbms for short
16:08 - and they source structured data in
16:10 - something called tables now they usually
16:12 - use a language called sql or sql
16:14 - standing for structured query language
16:16 - to perform modifications to data and
16:19 - enforce a strict set of rules for your
16:21 - data there's plenty of merit to
16:23 - traditional sql databases but for us
16:25 - python users mongodb being a nosql
16:28 - database can be much more flexible and
16:30 - easier to work with so a nosql database
16:32 - like mongodb actually stores
16:34 - unstructured data and it's typically in
16:36 - json format now this allows us as
16:38 - developers to perform frequent updates
16:40 - and changes to the structure of our data
16:43 - and often use more familiar types and
16:45 - not be kind of restricted by some of the
16:47 - bounds of a sql database now nosql
16:50 - databases also can typically perform
16:52 - faster queries and scale out more easily
16:54 - just based on the way that they're
16:56 - designed so now that we understand some
16:58 - of the core differences let's talk about
17:00 - mongodb and something called the
17:02 - document model so mongodb has databases
17:05 - a database is made up of collections and
17:08 - a collection is made up of documents now
17:10 - the documents store all of your data
17:12 - that data is categorized into
17:14 - collections and the collections make up
17:16 - a single database so to give you a
17:18 - concrete example if you were building a
17:19 - database for a library you may have the
17:21 - following collections a book a person
17:24 - maybe a rental for like taking out a
17:25 - book and within each of those
17:27 - collections you would have documents
17:29 - which actually store the data related to
17:31 - the collection so in the book collection
17:33 - you may have a document that stores an
17:34 - author title publish date maybe the
17:37 - number of copies available and a bunch
17:39 - of other data as well if you wanted to
17:40 - and then continuing here the data in
17:42 - your documents is stored in a field
17:44 - value pair so it's kind of just like a
17:46 - dictionary in python you have a field
17:48 - that field has a value that's what
17:50 - you're placing inside of your documents
17:52 - now this means you can store things like
17:53 - arrays sub documents and any other valid
17:56 - bson type so internally mongodb actually
18:00 - uses something called bson uh it's
18:02 - similar to json but it does have some
18:03 - minor differences and i'll put up on the
18:05 - screen here the documentation and as i
18:07 - scroll through you can kind of see some
18:09 - of the types that are available to us
18:10 - here in vsan so with that said that's
18:12 - really all you need to know about
18:13 - mongodb to get started so let's start
18:15 - creating some data and learning mongodb
18:18 - alright so hopefully that was helpful
18:19 - and gave you some insight into how
18:21 - mongodb works also gave you some of that
18:23 - core terminology now that we understand
18:25 - that let's look at a quick example of
18:26 - inserting a document so actually
18:28 - creating a document inserting it into
18:30 - one of our collections again the
18:31 - collections you can kind of think of as
18:33 - tables right or a place where we are
18:35 - collecting information collecting
18:37 - different documents so here what i'm
18:38 - going to write is just a function just
18:40 - to keep everything nice and neat i'm
18:41 - going to say insert and then this will
18:43 - be the test underscore document
18:46 - and then what we want is to get access
18:48 - to the test collection from our test
18:51 - database so i'm going to say my
18:52 - collection is equal to my test database
18:56 - so test underscore db and then to access
18:58 - a collection just like we access the
19:00 - databases we use the dot notation and i
19:02 - put the name of the collection and we
19:03 - know we have one called test so testdb
19:06 - dot test now i'm accessing a collection
19:08 - and once i have a collection it's very
19:10 - easy to insert a document into it so
19:12 - we're going to make a test document here
19:15 - and really the documents we're just
19:16 - going to use python dictionaries to
19:19 - represent them as i talked about they're
19:21 - very similar to json internally mongodb
19:23 - uses something called bson but what will
19:26 - happen is any types that we have here
19:28 - will automatically be converted into the
19:30 - correct mongodb types so we don't have
19:32 - to worry about specifying some exist
19:34 - string or an int or a float it just
19:36 - automatically gets converted into
19:37 - whatever type mongodb can handle if it
19:40 - can handle the specific type that we
19:41 - have so for now let's do something
19:43 - really simple like just have a name
19:46 - and then we can have maybe a type along
19:48 - with this and the type we can just do
19:49 - something like test
19:51 - okay so from here we are now able to
19:53 - insert this document and the way we do
19:55 - that is we say collection
19:57 - dot and then we're going to use the
19:59 - method insert one and we just pass the
20:01 - document that we want to insert so we do
20:03 - test document like that now one thing we
20:06 - may want to access with this document is
20:08 - its id so every single document in our
20:12 - collection is going to have a unique id
20:13 - you can kind of think of this similarly
20:15 - to the primary key that you might have
20:17 - in a sql database and that is the unique
20:19 - identifier of this document so if we
20:21 - wanted to access that so inserted
20:23 - underscore id we could say inserted id
20:25 - is equal to this
20:26 - dot inserted id and that simply gives us
20:29 - the id of the document that was just
20:31 - inserted into the collection so what
20:33 - i'll do is just print insert id just so
20:35 - we can verify that this is working and
20:36 - we're getting some output and now let's
20:38 - simply call this function so insert test
20:41 - document like that
20:43 - let's save let's run our code
20:45 - and let's see what we get and notice we
20:47 - get this uh this string here telling us
20:50 - what the insert id was now this id is
20:52 - what's known as a bson object id this is
20:55 - actually a specific type i'll show you
20:57 - how we kind of work with those in a few
20:59 - minutes but just keep that in mind it's
21:00 - kind of a unique type it's not just an
21:02 - integer
21:03 - all right so now that we've done that
21:04 - let's go back to compass here and let's
21:07 - refresh where is refresh
21:09 - and notice that i have a document now
21:11 - inserted it automatically has this
21:13 - underscore id field again that's the
21:15 - unique identifier here and then we have
21:17 - any of the information that we added
21:18 - like name and type
21:20 - great so super easy uh simplest you know
21:23 - possible way to insert something into a
21:25 - database so now that we've done that
21:26 - let's have a look at more insert
21:28 - operations and actually creating a
21:30 - database or a collection here from code
21:32 - so to make a new database is super
21:34 - simple and same with collections and
21:36 - documents and all that but i can do
21:38 - something like let's go with production
21:41 - and we'll just call this database
21:42 - production just to have you know kind of
21:44 - a unique name as opposed to test so i'm
21:47 - going to say production is equal to
21:48 - client.production
21:49 - now when i do this i try to access a
21:51 - database that doesn't currently exist
21:54 - mongodb is automatically going to make
21:55 - that database for me so very
21:57 - straightforward we now have that and
21:59 - then after we do that we can create a
22:01 - collection
22:02 - and in this case i'm going to call it
22:03 - the person collection so i'm going to
22:05 - use my production database
22:08 - and access the person collection and
22:10 - again similarly to here since person
22:12 - collection doesn't exist it will
22:14 - automatically be created then what we
22:16 - need to do is insert a document because
22:18 - if we don't insert anything it actually
22:20 - won't make this we need to insert a
22:21 - document first so let's write a function
22:24 - here and say define create underscore
22:28 - documents and let's actually see how we
22:30 - can create multiple documents at the
22:31 - same time because i already showed you
22:33 - how to insert one
22:34 - okay so we're going to say first
22:36 - underscore names and in fact rather than
22:38 - me typing this all out let me just copy
22:39 - it in and save us a bit of time so we're
22:41 - going to say first names is equal to
22:43 - this last name is equal to this and ages
22:45 - are equal to these just having some
22:47 - corresponding values all of these are
22:49 - the same length and then we're going to
22:50 - loop through all of these create a
22:52 - document of them and then simply add
22:54 - that document
22:55 - so what i can do here is say for and we
22:58 - can say first underscore name
23:00 - last underscore name age in zip and
23:03 - we're going to zip all of these so first
23:05 - names last names and age when you zip
23:07 - it's just going to give us all of these
23:08 - items at the corresponding indices in a
23:11 - tuple kind of a useful function in
23:12 - python if you haven't seen that before
23:14 - and then we can say our document is
23:16 - equal to and we can go with first
23:19 - underscore name is equal to first name
23:21 - last name is last name and h is age
23:23 - thank you very much autocomplete and
23:25 - then we can do something as simple as
23:27 - personcollection.insert1
23:29 - and we can insert the document now
23:31 - that's one way that we can insert
23:32 - multiple documents we can just loop
23:33 - through but a more efficient way would
23:35 - be to do the following so i can create a
23:37 - list of documents by saying docs dot
23:40 - append and then appending my individual
23:43 - documents and then rather than inserting
23:44 - them one at a time we can simply use the
23:47 - insert menu so i can say insert many i
23:50 - can pass a list of all the documents i
23:52 - want to insert and then that'll do it
23:53 - for so in fact let's do that and let's
23:56 - call create documents here and let's
23:58 - just test this out and see if it works
24:00 - okay so i'm going to run the code
24:02 - give that a second and this is local
24:04 - variable age reference before assignment
24:06 - sorry need to change that to be ages not
24:09 - age let's rerun
24:11 - and there we are okay so now if we want
24:13 - to verify that worked we can go to
24:15 - compass we can have a refresh here we
24:18 - now see we have a new database called
24:19 - production we have a person collection
24:22 - we have a few people that were now
24:23 - inserted inside of here because of the
24:24 - code that we wrote
24:26 - all right easy enough that is how you
24:28 - insert documents in and i just want to
24:30 - show you here the comparison to if we
24:33 - were to write the sql queries to do this
24:35 - just so you get a real idea of how
24:37 - flexible and easy this is compared to
24:39 - working with sql databases so if we
24:41 - wanted to do this in sql i'm just going
24:43 - to paste this in here we would need to
24:45 - write the following first so this would
24:46 - be i guess
24:48 - the query or the creation string that we
24:50 - need to write to create the table person
24:52 - which is kind of the document that we
24:54 - that we just created right we had uh our
24:56 - person collection and really i probably
24:58 - should just call that person but that's
24:59 - fine anyways we had to create this table
25:01 - in our sql database and then if we want
25:04 - to insert something into the database we
25:06 - would have had to write this string
25:08 - right here so not overly complicated but
25:10 - definitely not as intuitive and simple
25:12 - as this and something i prefer to stay
25:14 - away from if i can writing complex sql
25:16 - queries anyways there you go that's the
25:18 - comparison in terms of the sql queries
25:20 - now let's move on and look for how we
25:22 - can query documents because obviously we
25:24 - want to be able to look through our
25:25 - database and find some different
25:27 - elements so what i'm going to do now is
25:29 - write a series of queries that we may
25:31 - want to perform on our database or i
25:33 - guess in this case our collection to
25:34 - find some different documents i'll kind
25:36 - of go from easy to more difficult and i
25:39 - will mention that if you're interested
25:40 - in more advanced queries then stay tuned
25:42 - for the next video in this series where
25:44 - that's really what i'll be focused on
25:46 - for now though let's write a function
25:47 - that just says find all people
25:49 - and we'll see how we can just get all of
25:51 - the documents that are in our collection
25:53 - now to do this is pretty straightforward
25:55 - i'm just going to say people is equal to
25:56 - and then this is going to be the person
25:58 - collection and not find all but dot find
26:01 - now dot find allows you to insert a
26:03 - query object which is different
26:05 - properties that you're trying to match
26:06 - with when you're looking for elements or
26:08 - looking for documents sorry
26:10 - in this case if you leave this empty
26:11 - it's just going to find all of the
26:13 - people or all the documents in the
26:14 - collection so what i can do now is say
26:17 - for person
26:18 - in people
26:19 - and i can loop through this and i'm just
26:21 - going to use something here called the
26:23 - pretty printer to print this out
26:25 - and the way we're going to do that is
26:27 - we're going to say our printer is equal
26:29 - to print dot pretty printer
26:32 - now recall that i imported p print up
26:34 - here that's why i'm able to do this and
26:36 - rather than using the standard print
26:38 - statement i'm going to say printer
26:40 - dot p print
26:41 - in print out person just because it's
26:43 - going to give us a nicer formatted
26:45 - output
26:46 - now that we've done that we can call
26:47 - this function so find all people and
26:49 - test this out and see if it works and
26:51 - i'm just looking through the rest of the
26:52 - code to make sure we haven't made any
26:54 - mistakes up there and it looks good to
26:55 - me okay so let's run this and notice now
26:58 - that when i print this out i get some
27:00 - better formatted output than our
27:01 - traditional print statement and you can
27:03 - see i have all of the documents that are
27:04 - in my person collection that we just
27:06 - inserted i get them here and i can treat
27:08 - these as python dictionaries i have key
27:10 - access and everything you would know
27:11 - about a python dictionary applies here
27:14 - great now one thing to note here with
27:16 - people
27:17 - if i try to print out people you're
27:20 - going to see that we get kind of a
27:21 - strange result here we get a pie
27:24 - cursor now the cursor is something that
27:26 - you can iterate over so you can't
27:29 - directly access or index say the cursor
27:32 - you can iterate over it in this way or
27:34 - if you just want to get all the elements
27:35 - from it and store them somewhere you
27:37 - could print out say the list of the
27:39 - cursor so if i do this here
27:41 - you see when i print that out i get a
27:43 - list of all of the different people so i
27:44 - just kind of wanted to show that to you
27:46 - there is you know a unique way of
27:49 - dealing with the pie cursor really
27:51 - it's going to act as a generator or an
27:53 - iterator but i imagine many of you are
27:55 - probably not familiar with that so
27:56 - that's fine okay so now that we have
27:59 - find all people i'll show you again that
28:01 - the equivalent sql query to do this
28:04 - would have been select asterisks in
28:05 - person not overly complicated but this
28:08 - seems a bit more intuitive to me
28:10 - the next thing i'll show you how to do
28:11 - is look for a specific document based on
28:13 - a field value so maybe we want to search
28:15 - for a first name equal to say tim or
28:17 - something like that right so to do that
28:19 - let's write a function i'll call this
28:20 - findtim because i want to find myself in
28:23 - our database and let's see how we do
28:25 - that i'm going to say tim is equal to
28:27 - person collection rather than find i'm
28:29 - going to do find one and then inside of
28:32 - here i'm going to put the field as well
28:35 - as the value or the fields and the
28:37 - values that i want to access
28:39 - from my collection so in this case i'm
28:42 - going to say first name and i want the
28:44 - value of first name to be tim for
28:46 - anything that i select here so i'm
28:48 - saying i want to find one and the first
28:50 - document that i find that matches this
28:52 - criteria where first name is equivalent
28:54 - to tim will be returned to me and then
28:57 - again i can use my printer
28:59 - and p print this out and have a look at
29:01 - it
29:02 - so let's call find tim
29:05 - let's run this code
29:07 - and notice here that i get the document
29:09 - associated with tim now usually you want
29:11 - to search for documents using their id
29:14 - sometimes you don't know the id like in
29:15 - this case i don't know what the idea is
29:17 - so instead i have to use a field now i
29:20 - could also specify multiple fields here
29:22 - and do something like last name
29:24 - and then go with my last name
29:26 - and assuming this matches the document i
29:28 - would get it
29:29 - uh but these all have to match it's not
29:31 - like in either or it's any field you
29:33 - specify here the value needs to match
29:35 - exactly for this to be returned to you
29:37 - now you can do the same thing in find
29:40 - just the regular find command and then
29:41 - it will return all of the documents that
29:43 - match that criteria for now they will go
29:45 - back to what i had before
29:46 - okay so now that we've done that let's
29:48 - have a look at how we can do something
29:49 - maybe a bit more advanced i will also
29:51 - again show you the equivalent sql query
29:54 - for this would be something like this
29:55 - select star from person where first name
29:57 - is equal to tim okay let's get rid of
30:00 - that
30:01 - next though let's write something that
30:03 - can count all of the people that we have
30:05 - so we'll call this count all people and
30:07 - inside of here we can say the count is
30:09 - equal to and then there's a few
30:11 - different ways to do this but i'm going
30:12 - to say person collection dot count
30:14 - underscore
30:15 - documents like this and then i can pass
30:18 - an optional filter here which again is
30:21 - going to be something similar to this
30:22 - which will only count documents that
30:24 - match the filter now if i leave the
30:25 - filter empty then of course it's going
30:28 - to count all of the documents because
30:29 - everything will match an empty filter
30:31 - anyways though if i'd like now i can
30:33 - print something like
30:35 - of people
30:37 - and then count
30:39 - and if we call this count all people and
30:41 - run the code uh you'll see that we get
30:43 - the count so there's six people uh or
30:45 - six documents really in our collection
30:48 - okay so that is one way to count another
30:50 - way to count is to do the following we
30:52 - could say couch is equal to person
30:54 - collection dot find and then we can say
30:56 - dot count
30:58 - in dot count will essentially give us
30:59 - the length or the number of elements
31:01 - that were returned by this find so you
31:03 - don't have to count all of the elements
31:05 - in this case you can count all of the
31:06 - ones you know returned by the find but
31:09 - we should see that we get the same
31:10 - result here as six when we run this uh
31:12 - and yes we do okay uh it's actually
31:14 - telling us that this is deprecated so
31:16 - maybe we should use what i did before
31:18 - count documents but still count can be
31:20 - useful in some context okay
31:23 - now that we have done that let's write
31:24 - something that can find a person by
31:26 - their id now this seems trivial because
31:28 - i've showed you how to search by a field
31:30 - name already we actually need to do
31:32 - something specific here for this to work
31:33 - so let's write a function this is going
31:35 - to be get person
31:37 - by underscore id and inside of here
31:40 - let's take a person underscore id
31:43 - okay so now we're going to say from and
31:46 - this is going to be bson
31:48 - dot
31:49 - object id
31:51 - import
31:52 - and then object
31:54 - id like that now bson i believe is built
31:56 - into python so i don't think you
31:57 - actually need to install that if for
31:59 - some reason that doesn't work then you
32:01 - can do pip install bson although i
32:02 - imagine that's going to work for all of
32:04 - you
32:05 - and from here we will now create an id
32:09 - that is equal to the object id
32:11 - that wasn't exactly what i meant to
32:13 - describe but you'll see what i mean so
32:14 - i'm going to say id is equal to object
32:16 - id person id i'm just putting an
32:18 - underscore here so i don't shadow the
32:19 - built-in id function in python and this
32:22 - is what i was talking about previously
32:24 - is that our ids
32:26 - when they get returned to us or when we
32:27 - kind of punch them in here they're going
32:29 - to be strings in python but we need them
32:31 - to be this special object which is
32:33 - object id otherwise they're not going to
32:35 - work when we try to search for them in
32:37 - our mongodb database so keep that in
32:39 - mind it's kind of the one
32:40 - quirky thing you need to convert all of
32:42 - your ids to object id objects from bsun
32:45 - okay so now that we've done that i'm
32:47 - going to say person is equal to the
32:48 - person collection and then we're going
32:50 - to say not find one
32:52 - and now we're going to query by the
32:54 - underscore id and we're going to pass
32:56 - while the underscore id which is the
32:58 - bsun object then we can say printer
33:01 - dot p print
33:02 - and we can print out person and we can
33:04 - call this function so let's say get
33:05 - person by id we just need to grab an id
33:08 - so let's grab that from mongodb compass
33:11 - let's find the id here of say sarah so
33:14 - let's copy that in
33:16 - and paste that here notice we have a
33:18 - string it will then be converted for us
33:20 - you could put this import statement
33:21 - somewhere else i'm just putting it in
33:22 - the function so it's self-contained
33:24 - and now when i run
33:26 - you will see uh we actually got an error
33:28 - no built-in module p print uh oh sorry
33:31 - this is printer.p print okay silly
33:33 - mistake let's run that again
33:35 - and notice here that i get the object i
33:38 - was looking for i get sarah accessing by
33:40 - id
33:41 - wonderful
33:42 - okay now that we've done that again let
33:43 - me just show you the sql query just you
33:45 - guys get an idea of what you would write
33:47 - equivalently so if i wanted to access
33:49 - a person by their id i would write
33:51 - something like this and from the
33:53 - previous one because i didn't show it to
33:55 - you we would write something like this
33:56 - select count asterix from person again
33:58 - less intuitive and if you don't know sql
34:00 - probably hard for you to come up with
34:02 - without without doing you know a few
34:04 - google searches and stuff like that okay
34:06 - we have done that the last thing that i
34:09 - will show you is how to get uh kind of a
34:11 - range of something how to do a bit of a
34:13 - more advanced query and of course you
34:15 - can do much more advanced than what i'm
34:17 - going to show you here but for now let's
34:19 - see how we can get people that are
34:20 - within a specific age range so i'm going
34:22 - to say define
34:24 - get age range i'm going to take in my
34:26 - min age and my
34:28 - max age i'm going to search for only
34:31 - people in my collection that are within
34:33 - this h range now we can pick inclusively
34:35 - or exclusively i think here we'll go
34:37 - inclusively
34:38 - so let's actually build out our query
34:40 - string our query object here
34:42 - and i'm going to use kind of an operator
34:44 - from mongodb
34:46 - which is called dollar signed ant now
34:48 - there's a ton of other operators in
34:50 - mongodb again in the next video i will
34:53 - show you a ton of them you can also
34:54 - reference the mongodb documentation but
34:56 - what we can do is query multiple things
34:59 - using the and and if all of the queries
35:01 - that we write here are true uh or they
35:04 - match then it will return the object
35:06 - force so similar to kind of an and uh in
35:08 - you know logic right in in python when
35:11 - you would use the and keyword
35:13 - okay so we have and we're gonna pass a
35:15 - list here and then inside of the list
35:16 - we're going to pass different queries
35:18 - so the first query that i want to do is
35:20 - relate to the age well the next one will
35:21 - be age as well so i'm going to say age
35:24 - and then i'm going to pass another
35:25 - object inside of here and i'm going to
35:27 - use an operator and this operator is
35:29 - going to be gte standing for greater
35:31 - than or equal to now we also have
35:33 - greater than we have less than we have
35:36 - less than or equal to we have equal to
35:38 - we have a bunch of them again i will
35:40 - show some more to you in a later video
35:42 - now though we have gte
35:44 - and we want to say
35:46 - that we want the age
35:48 - to be greater than or equal to the min h
35:51 - so you kind of get got to get used to
35:52 - the syntax we're saying this is the
35:54 - field and then this is the query we want
35:56 - to apply on the field we don't want to
35:57 - check for exact equality we want to see
35:59 - if the minimum age
36:01 - or sorry if the age is greater than or
36:03 - equal to the minimum age that we place
36:04 - here okay now let's copy this because
36:06 - it'll be very similar for the next one
36:08 - we're going to say age we're going to
36:10 - change this to lte so less than or equal
36:12 - to
36:13 - we're going to make this max age
36:15 - and now this query when we use it inside
36:18 - of our find will return everyone in this
36:20 - in this range sorry so i'm going to say
36:22 - people is equal to person
36:24 - collection.find we're going to query and
36:26 - then we can also pass something here
36:28 - like dot sort and when we do this i can
36:30 - sort by age and then i can grab you know
36:32 - the sort of results here so let's now
36:34 - have a look at this we're going to say
36:36 - four person
36:37 - in people
36:39 - and we'll say printer dot p print and we
36:42 - will print our person out
36:44 - i can then call the function so get age
36:47 - range and let's look for people that i
36:50 - guess are within the age range of what
36:52 - ages do we actually have i guess we
36:54 - could do something like maybe 20 and 35
36:57 - or something and that'll give us a few
36:59 - results okay so let's do 20 and 35
37:01 - let's run our code
37:04 - and uh we got an issue here unhashable
37:06 - type dictionary my apologies guys i have
37:09 - an accidental um secondary kind of
37:12 - dictionary surrounding the and so let's
37:14 - save that hopefully that format's better
37:16 - for us
37:17 - okay
37:19 - that's better sorry i had another set of
37:20 - curly braces that i really didn't need
37:22 - and that's better okay so let's run this
37:24 - and see
37:26 - and there we go we get all of our
37:27 - results here
37:29 - and we can see that they're within their
37:30 - age range right so we have 21 23 and 34
37:33 - sorted by age in ascending order
37:36 - wonderful
37:37 - now that we have done that
37:39 - again we'll show you the sql query so
37:41 - let's have a look at this sql query this
37:43 - is what it would be i actually paste it
37:45 - as a comment this time select asterisk
37:47 - some person where age is greater than
37:48 - min age and age less than max h
37:51 - great
37:52 - okay i lied i'm actually going to do one
37:54 - more find query here then we'll look at
37:56 - updating
37:58 - deleting and some relationships as well
38:01 - okay so the next thing i'll do is show
38:02 - you how we can project specific columns
38:04 - because sometimes when you are querying
38:06 - documents you don't care about all of
38:08 - the information you only want to get
38:09 - some of it so i'm going to say project
38:11 - columns and inside of here i'm going to
38:13 - create a dictionary here containing the
38:15 - columns that i would like to have in my
38:18 - result
38:19 - so i'm going to say underscore id and
38:21 - i'm going to put 0. now that indicates
38:22 - that i don't want to have the id in my
38:25 - result so don't give me the id field of
38:27 - any of my documents i'm then going to
38:30 - say
38:30 - my first underscore name this is gonna
38:34 - be one which means yes i would like to
38:36 - get my first name and then i will put my
38:38 - last underscore name and i will put that
38:40 - as a one as well indicating that i want
38:42 - the last name so now what i can do is
38:44 - say people is equal to person
38:45 - collection.find i can pass my query
38:48 - object here and i can also pass my
38:50 - columns now i don't need to pass this as
38:52 - a keyword argument i can pass it
38:54 - positionally and when i do that it's now
38:56 - going to do a projection which just
38:58 - means it's only going to give me the
38:59 - columns i specified right so let's just
39:01 - copy what we had here for printing this
39:03 - out
39:04 - okay
39:05 - and then let's call this so project
39:08 - columns
39:09 - let's run our code
39:11 - and let's see what we get down here and
39:13 - notice that we get our first name and
39:14 - last name we do not get the age and we
39:16 - do not get the id because we did not
39:18 - specify that we want those
39:20 - all right so that is it for querying
39:22 - that's really all you need to know for
39:24 - basic querying that should get you by if
39:26 - you're doing kind of a beginner or hobby
39:28 - project now though we want to look at
39:30 - how we actually update a existing
39:32 - document in our collection so let's
39:35 - write out a function here and let's call
39:37 - this update and let's go person
39:40 - and then this can be by underscore id
39:43 - let's again take in our person id and
39:46 - then from before we can copy our bson
39:48 - here to grab this okay so
39:51 - let's copy that in we have id is equal
39:53 - to object id person id that is what we
39:56 - need and now i'm going to show you how
39:57 - we perform updates so there is multiple
39:59 - ways to perform updates but the most
40:01 - common way is to create i'm going to
40:03 - call this a query object of some sort or
40:05 - kind of like an update object and we're
40:07 - going to use some operators here so the
40:09 - first operator we can use is set now
40:11 - what this is going to do is just change
40:12 - the value of a specific field or sorry
40:15 - actually this is going to set a new
40:16 - field to be a value of our choice now we
40:19 - also can use this to override an
40:21 - existing field but here i'm going to set
40:22 - kind of a new field on my document to
40:25 - show you how we do that so in this case
40:26 - i'm using the operator set i then need
40:28 - to pass the field that i want to set so
40:30 - i can do something like new field and i
40:31 - could give this a value of let's say
40:33 - true because we haven't done any
40:34 - booleans yet
40:36 - okay so that's set now if this field was
40:38 - something that currently existed we
40:39 - would override that field uh so keep
40:42 - that in mind when you use set
40:44 - all right next we're gonna have and this
40:46 - will be inc so this stands for increment
40:49 - there's a ton of operators in mongodb
40:51 - and we can do age and then one and this
40:54 - will increment the age of someone by one
40:56 - or whatever the document is that we're
40:57 - modifying i then can do another operator
41:00 - here and let's go with something like
41:02 - rename
41:04 - and let's rename a few fields at once
41:06 - actually here so what i can do is say
41:08 - rename
41:09 - and i can do something like first name
41:12 - and we can rename this field right we're
41:14 - not renaming the value we're renaming
41:15 - the field to be first and then we can do
41:18 - last underscore name
41:20 - and we can rename that to be last now
41:22 - that would work similarly here if i want
41:24 - to increment multiple fields i would
41:26 - just put the field and what i want to
41:27 - increment by if i wanted to set multiple
41:29 - fields same thing i just list that in
41:30 - here
41:31 - okay now that we have our updates to
41:33 - update a document we are going to use
41:36 - the very
41:37 - nicely named function here so person
41:39 - collection
41:41 - and then this is going to be dot update
41:43 - underscore one we need to pass who we
41:46 - want to update or what document we want
41:47 - to update now we can do that by passing
41:50 - in a query object here that will return
41:52 - to us one object so i'm going to say id
41:54 - and then i'm going to put my underscore
41:56 - id because i'm updating whatever the
41:58 - person id is
42:00 - then i will go
42:01 - and uh what i actually want to do for my
42:03 - update so i'll say all updates like that
42:06 - okay now that we've done that uh we can
42:08 - run this code for now and just have a
42:10 - look at what this is gonna do so let's
42:11 - say update person by id
42:13 - uh we need an id so let's grab that from
42:15 - compass here we can update tim so i'll
42:18 - just copy that in okay let's make sure
42:21 - we put that in a string
42:22 - and let's run this and then have a look
42:24 - at compass and see if any changes were
42:26 - made
42:26 - okay so i run the code i'm not getting
42:28 - any errors here which is always good
42:30 - news
42:31 - if i come back here notice the age was
42:32 - 21 we should see that go up to 22 and
42:35 - notice the new field has been added as
42:37 - well as the field names first and last
42:39 - being renamed wonderful so let's just
42:42 - comment this out now because i'm going
42:43 - to continue writing in here but i don't
42:44 - want to repeat this
42:46 - and the next thing i'm going to do is
42:47 - show you how we would say unset a field
42:49 - so actually remove something from the
42:51 - document so to do that we can do
42:53 - something like person
42:55 - collection and again we can use dot
42:57 - update1
42:58 - so i guess i probably should have copied
42:59 - what i had before but that's fine
43:01 - we'll go underscore id underscore id
43:04 - and then we can pass inside of here uh
43:07 - the update we want to make and in this
43:08 - case i want to unset so i'm going to use
43:10 - the operator on onset
43:12 - this really kind of just stands for
43:13 - delete and then i want to remove the new
43:16 - underscore field but to be able to do
43:18 - this properly i just need to pass some
43:19 - value it doesn't really matter the value
43:21 - i pass here i'm just going to pass an
43:22 - empty string it's just because we're
43:24 - passing a dictionary in python so i
43:25 - can't just have the string there i have
43:27 - to have the key value pair so i have
43:29 - unset colon and then what do i want to
43:31 - unset well i want to unset the new field
43:33 - or yeah i guess that's it unset the new
43:35 - field so we put our empty string
43:37 - and then we are good
43:39 - let's now run this
43:40 - and hopefully it should remove that
43:41 - field okay so run the code
43:44 - looks like that works successfully
43:46 - let's go to compass let's refresh and
43:49 - notice the field is gone
43:51 - okay that is pretty much all i had to
43:52 - show you for updating a person
43:55 - next what we will have a look at is
43:57 - replacing a document
43:59 - so we're going to say define
44:01 - replace underscore one again we need
44:03 - that person id so let's take that in we
44:05 - can copy our
44:06 - bsun stuff from up here
44:09 - all right
44:10 - and now that we have that
44:12 - we want to have a document that we're
44:13 - going to replace a document with now you
44:15 - would do this if someone was updating
44:17 - like say all of their contact
44:18 - information are updating you know pretty
44:20 - much everything but they want to keep
44:22 - the same id because if you insert a new
44:25 - document you're going to get a new id
44:26 - for that no matter what so in this case
44:29 - uh you want to keep the same id by
44:31 - changing all of the other fields or
44:32 - while changing all the other fields
44:34 - that's why you would perform a replace
44:36 - so i'll just copy this in because it's
44:38 - not really worth me typing it out but
44:39 - we'll say new dock is equal to this this
44:42 - is the new stuff that we want to have
44:44 - and then here we're going to say person
44:47 - collection and we're going to say
44:48 - replace one and then we're going to pass
44:50 - id
44:51 - we're going to pass the
44:53 - underscore id like that
44:55 - and then we will have our new document
44:58 - that we want to replace this document
44:59 - with while maintaining the same id
45:02 - okay so let's now just change our
45:04 - function call to be replace underscore
45:07 - one
45:08 - let's run the code
45:10 - and let's now go back here to compass
45:13 - tim is the one we're going to be
45:14 - replacing so let's refresh and notice we
45:16 - have new first name new last name age
45:17 - 100 id stays the same
45:20 - wonderful
45:21 - all right that is it for updating and
45:23 - replacing documents next we are moving
45:25 - on to deleting alright so as i said
45:27 - we're going to delete documents now
45:29 - doing this is fairly straightforward
45:31 - let's write a function here we'll say
45:33 - delete
45:34 - doc by id
45:36 - okay
45:37 - uh we'll take in the person underscore
45:39 - id here
45:41 - copy our bson
45:43 - now this is as easy as it is we can
45:45 - write
45:46 - personcollection.delete1 this is going
45:48 - to be id
45:49 - and then we will pass inside of here
45:51 - underscore id so let's try this out
45:54 - let's go delete doc by id
45:57 - should have kept my id but let's go back
45:59 - to compass
46:00 - let's copy it in
46:02 - okay
46:04 - we have a string
46:05 - paste
46:06 - and run and that should delete just fine
46:09 - let's go back here should see this
46:11 - document go away now
46:12 - refresh and tim has been deleted
46:16 - all right so that's it for deleting one
46:18 - now if we want to delete many documents
46:21 - uh we can use
46:22 - person underscore collection dot and
46:25 - then rather than delete one it would be
46:26 - delete many and just like i showed you
46:28 - the queries before when we were using
46:30 - find you can use those inside of here to
46:32 - select the documents you want to delete
46:34 - of course same thing with delete1 but
46:36 - yeah delete many if you want delete
46:37 - multiple of them put in your query if
46:39 - you just did an empty query like this
46:40 - then it would delete every single
46:42 - document which i don't really want to do
46:43 - right now alright so as i was saying
46:45 - we're now going to move on and talk
46:47 - about relationships so relating
46:49 - documents together and how that works in
46:51 - mongodb because it's a little bit
46:52 - different than in a traditional sql
46:54 - database now when i'm talking about a
46:56 - relationship it's helpful to have an
46:57 - example so let's paste in an address
46:59 - here and let's just do kind of a
47:01 - dividing comment just so we know what
47:02 - we're talking about here
47:04 - okay so we have an address uh we might
47:06 - have a person right so let's actually
47:08 - say person
47:09 - is equal to and then let's create this
47:11 - now this is going to have an underscore
47:13 - id
47:14 - we'll put in some random value here this
47:16 - would have an id as well just putting
47:18 - these in for example purposes
47:20 - okay so obviously their ids will be
47:21 - different
47:22 - and then inside of person we might have
47:26 - something like say the first name and we
47:27 - can just make that john and that's all
47:28 - we need for right now but the idea is
47:30 - that this address may belong to this
47:33 - person and right now we don't really
47:35 - have a way of kind of denoting that and
47:38 - there's a few ways to do this in mongodb
47:40 - so the first way to do this is using
47:42 - something called document embeds now
47:44 - this is when you embed a document inside
47:46 - of another document and that would look
47:48 - something like this we create a new
47:50 - field here on the person document and we
47:53 - take our address document here and we
47:56 - just pasted it so now we have address
47:58 - and the address is equal to this
47:59 - document and this works particularly
48:01 - well when you only have a single piece
48:03 - of information that you need to kind of
48:05 - relate between different documents in
48:07 - this case we have an address we just
48:08 - store the address on the person all is
48:10 - good and in fact this is going to be
48:12 - slightly more efficient than storing
48:13 - them in two separate collections which
48:15 - is the alternative method so hopefully
48:17 - that makes a bit of sense but you can
48:18 - store a document inside of another
48:20 - document you also can store an array or
48:22 - a list of documents inside of other
48:23 - documents so if you had multiple
48:25 - addresses you could embed them
48:27 - inside of the list
48:28 - so that's fine however sometimes we're
48:30 - in a situation where it's not ideal to
48:32 - do that or this address maybe belongs to
48:35 - multiple people so if i'm going to be
48:37 - embedding it i have to embed it in
48:38 - multiple places and that can kind of
48:40 - complicate things
48:42 - there's all kinds of pros and cons which
48:43 - again i'm going to get going to get into
48:45 - sorry in a more advanced video however
48:47 - let's say we decide we want to store the
48:49 - address and the person in separate
48:51 - collections we want to organize them in
48:52 - that way for whatever reason is there
48:54 - still a way that i can relate this
48:56 - address to this person well yes there is
48:58 - and the way we do that is using
48:59 - something called a foreign key
49:01 - so what i can do here is add a new field
49:04 - to address and i can do something like
49:06 - owner id and i can simply make that
49:08 - equal to the id
49:10 - of whoever owns this address or whoever
49:12 - this address belongs to whatever you
49:13 - want to say so now that i do this i have
49:15 - a reference from my address to the
49:18 - person that owns the address and i can
49:20 - use this to perform something called
49:22 - joins where essentially when i'm
49:24 - searching for a person i'm searching for
49:25 - an address i use this field to determine
49:28 - what address belongs to what person
49:30 - that's hopefully pretty straightforward
49:31 - but those are the two methods you have
49:33 - you're embedding and then you have what
49:35 - i'm going to call i guess a relationship
49:38 - or you know kind of a foreign key in
49:39 - that sense
49:40 - anyways though i just wanted to quickly
49:42 - go through those now let's see how we
49:44 - actually use these these different
49:45 - methods to kind of relate objects or
49:47 - documents together so the first thing
49:49 - we'll do is just using an embed because
49:52 - that's pretty straightforward so we can
49:53 - say add
49:54 - address underscore embed here and we're
49:58 - going to take in a person id
50:00 - and an address that we want to add for
50:02 - that person
50:04 - so we need to of course grab the id so
50:06 - let's take this in here
50:08 - okay
50:09 - now that we have the id uh we can simply
50:12 - perform an update to the person and we
50:14 - can add a new field uh that contains
50:17 - this address
50:19 - so we're gonna say person collection and
50:21 - not insert one but this will be update
50:23 - one
50:24 - okay update 1 id id and then the update
50:28 - that we want to make here is the
50:30 - following so as i said before we can
50:32 - have a list or an array and we're
50:34 - actually going to use that here to store
50:36 - potentially multiple addresses because a
50:38 - single person could have multiple
50:40 - addresses right so if we want to be
50:41 - flexible rather than adding a single
50:43 - address let's add a list of addresses or
50:45 - an array of addresses as i talked about
50:47 - previously so i'm going to say add to
50:49 - set is going to be my operation here
50:51 - because we have the dollar sign and then
50:53 - i'm gonna say
50:55 - addresses like that colon and then
50:58 - address now what this says is
51:00 - add this address to the key addresses
51:03 - and when you put set here that's
51:05 - indicating that addresses is going to be
51:07 - an array now if addresses does not
51:09 - already exist it will be created
51:11 - automatically and have a single element
51:13 - if it does exist then we'll add another
51:15 - element to it so append it to the end
51:17 - there you go
51:19 - now we can run this let's say add
51:21 - address embed
51:22 - we n we need an id so let's go back to
51:25 - mongodb let's copy the id for sarah
51:28 - let's paste sarah's id and let's put in
51:31 - the address
51:32 - let's run
51:34 - okay and
51:36 - when we run assuming no errors we can go
51:38 - back to compass we can do a refresh and
51:41 - then we see we have an array inside of
51:42 - here we have an object and it contains
51:44 - the address that we just inserted okay
51:46 - so that's method number one now method
51:48 - number two is going to be the following
51:50 - uh and this is add address
51:53 - underscore relationship
51:56 - now really both of these are
51:57 - relationships but hopefully you get what
51:59 - i mean again we'll take in person id and
52:01 - address we're gonna paste that like that
52:04 - and inside of here we actually need to
52:06 - make a new collection for our addresses
52:08 - because as i said we're going to store
52:09 - in a separate collection and then relate
52:11 - them together so i'm going to say that
52:14 - my address underscore collection is
52:17 - equal to
52:19 - and then this will be actually our test
52:22 - uh was it test database no we had the
52:23 - production database right it'll be
52:25 - production dot and we can just call this
52:28 - address
52:29 - okay so that's our collection now that
52:32 - we have that we can just insert the
52:33 - address into the collection so we can
52:35 - say
52:35 - address
52:36 - uh
52:37 - underscore collection
52:40 - and not update one we're gonna say dot
52:43 - insert underscore one and then we will
52:46 - just insert the address that's passed
52:48 - however before we do that it's probably
52:50 - a good idea that we add our owner id
52:52 - field so we actually have a way to
52:53 - reference who owns the address and again
52:56 - we need to make sure that we convert
52:57 - that to an id first before we do that so
52:59 - we're going to say
53:00 - address is equal to address.copy just
53:04 - because i don't want to be mutating the
53:06 - input right here the input object so i'm
53:07 - going to make a copy of it and then i'll
53:09 - say address and i'll add a field here
53:11 - called owner underscore id
53:14 - and this will be equal to the person id
53:16 - so now we add that to the address so
53:17 - when we insert address we have owner id
53:20 - and there you go that's that's really
53:21 - all we need so let's change this now to
53:23 - be relationship
53:26 - and we'll change from sarah because they
53:28 - already have an address we'll go to
53:30 - jennifer so let's copy hers
53:33 - and let's paste that we'll make it the
53:35 - same address because why not uh let's
53:38 - run the code
53:39 - alright and let's see what we get here
53:41 - when we go back to compass and we do a
53:44 - refresh when we do this we see we now
53:46 - have a new collection called address and
53:48 - inside of here we have the address with
53:50 - the owner id equal to sarah alright so i
53:53 - think with that said and me showing you
53:55 - how we perform the different types of
53:56 - relationships i am going to end the
53:58 - video here i was going to show you how
53:59 - we perform a joint operation but it's
54:01 - beyond the scope of this tutorial and
54:03 - i'm going to show it to you in the next
54:05 - one and really give you some more
54:06 - in-depth explanations so it doesn't feel
54:08 - kind of like for lack of a better word
54:10 - half-ass explanation here anyways i hope
54:12 - you guys enjoyed this i put a lot of
54:14 - work into this video to make sure i
54:15 - could teach you really all of the core
54:17 - functionality of mongodb as easily as
54:20 - possible again i keep saying it if you'd
54:22 - like watch the next video i will show
54:23 - you some more advanced operations and
54:26 - again a massive thank you to mongodb for
54:28 - sponsoring this video if you haven't
54:30 - already you can claim that free credit
54:31 - by using the discount code that is in
54:33 - the description or i guess the credit
54:35 - code in the description as well as
54:36 - clicking that link thanks to all of you
54:38 - that watched if you enjoyed make sure to
54:39 - leave a like subscribe the channel and i
54:41 - will see you in another one
54:45 - [Music]