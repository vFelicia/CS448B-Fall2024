00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video i'll
00:12 - be sharing with you a list of 25 terms
00:16 - that all programmers need to know now
00:18 - obviously there is a lot more terms than
00:20 - just 25 that i could put on this list
00:22 - but what i've done is i've kind of
00:23 - picked the terms that i thought were
00:25 - confusing that people often make a
00:27 - mistake with or use incorrectly and that
00:29 - i know i have used incorrectly in the
00:32 - past anyways with that said let's get
00:34 - into the video after a quick word from
00:36 - our sponsor before we get started i need
00:38 - to thank the sponsor of this video which
00:40 - is alco expert algo expert is the best
00:43 - platform to use from preparing for your
00:44 - software engineering coding interviews
00:46 - and has the highest quality coding
00:48 - interview practice questions with 160
00:50 - practice questions detailed solutions in
00:53 - nine of the most popular programming
00:55 - languages a feature-packed browser-based
00:57 - coding environment extensive test suites
00:59 - and conceptual overviews and code
01:01 - walk-throughs for each and every problem
01:03 - algo expert is the best resource to use
01:05 - to ace your coding interviews algoexpert
01:08 - also has a data structures crash course
01:10 - coding interview assessments and a mock
01:12 - interviews feature i can highly
01:14 - recommend algo expert as a former
01:15 - customer myself and now an official
01:17 - instructor on the platform get started
01:20 - using algo expert today by clicking the
01:22 - link in the description and using the
01:23 - code tech with tim for a discount on the
01:26 - platform alright so let's go ahead and
01:28 - get started just a few quick things to
01:30 - note i'm going to read these terms in
01:32 - alphabetical order i have them in front
01:34 - of me so on my middle monitor you see me
01:36 - looking in this direction that's what
01:37 - i'm doing i'm just reading the
01:38 - definition or reading the term i will
01:40 - put all of the definitions up on the
01:42 - screen if they require further
01:44 - explanation then of course i will do
01:46 - that i'm also going to go quite quickly
01:48 - so feel free to pause the video if you
01:49 - need further clarity on the definition
01:51 - or you just want to read it yourself
01:53 - regardless term number one that i have
01:55 - for you is api which stands for
01:58 - application programming interface now an
02:00 - api is a set of tools protocols and or
02:03 - procedures that allow you to write
02:06 - software a lot of people like to refer
02:08 - to an api as the glue between a front
02:10 - end and a back end if you have something
02:12 - like a front end so maybe the front end
02:14 - of your website it may call an api or
02:16 - use an api to fetch some specific data
02:19 - or do some other type of operation so
02:22 - apis are very useful and there is many
02:23 - different types of apis that exist so
02:26 - term number two that i have for you is
02:28 - algorithm now an algorithm is really
02:30 - just a set of steps or a procedure that
02:32 - you need to follow to solve a problem an
02:35 - algorithm is not only applicable in the
02:37 - context of coding you could write an
02:39 - algorithm to follow to solve a
02:40 - mathematical problem you could write an
02:42 - algorithm to follow to upload a video to
02:45 - youtube you can write all kinds of
02:46 - different types of algorithms and
02:48 - usually people refer to them in the
02:49 - coding context but i just want to
02:51 - clarify that algorithm is a general word
02:53 - it's not just for coding so moving on to
02:55 - term number three we have argument now
02:58 - an argument is simply a value that you
03:00 - pass to a routine a function or a method
03:03 - so if i called a function say like func
03:05 - and i pass the value 1 2 the arguments
03:08 - to that function would be 1 and 2.
03:10 - pretty straightforward moving on we have
03:12 - ci now ci stands for continuous
03:15 - integration and this refers to the
03:17 - continuous integration so the continuous
03:19 - merging of code from multiple
03:21 - contributors into one large software
03:24 - project now typically before you can
03:26 - merge code into say the master branch of
03:28 - your github repository it needs to pass
03:30 - all of these types of checks and well
03:32 - that would be the automation of this
03:34 - process you are making sure that you
03:35 - cannot merge any code or combine code
03:38 - into the larger project if it has any
03:40 - problems bugs or is breaking any of the
03:42 - automated tests that you would have
03:43 - written moving on we have cli now cli
03:47 - stands for command line interface and
03:49 - this is simply a program that runs on
03:51 - your computer that allows you to modify
03:53 - files navigate directories and execute
03:56 - programs now really the best examples of
03:58 - a cli is something like a terminal or
04:00 - your command prompt depending on the
04:02 - operating system that you're on the next
04:04 - term i have for you is known as compile
04:06 - time now compile time simply refers to
04:08 - the time in your program's execution
04:11 - where it is being compiled or
04:12 - transcribed into another programming
04:14 - language so whenever you run your code
04:16 - one of the first steps that needs to
04:18 - happen is that code needs to be
04:19 - translated down into a lower level
04:21 - language that definition is coming up
04:23 - don't worry and then that lower level
04:25 - language can typically be ran through an
04:26 - interpreter and actually executed on the
04:29 - cpu so compile time is just the time
04:31 - when you're compiling your program which
04:33 - means turning it into a different
04:34 - language that can then be ran by your
04:36 - cpu or a specific interpreter moving on
04:39 - the next term i have for you is a
04:40 - constant now a constant is simply a
04:43 - value in your program that should never
04:45 - change during the execution of the code
04:47 - the point of a constant is so that you
04:49 - can use it in multiple places in your
04:50 - code by only having to reference the
04:52 - variable name and then if you ever want
04:54 - to change what that constant value is
04:56 - say if you're running the code another
04:57 - time you just change it in one place and
04:59 - then it will change everywhere usually a
05:01 - constant is denoted by the constant
05:03 - prefix or by using all capital letters
05:06 - for a variable name so the next term
05:08 - that i have is known as declaration now
05:10 - this is a term that i misuse all of the
05:12 - time but a declaration is simply a
05:14 - statement that defines what a variable
05:17 - or a specific name means in the context
05:19 - of your program so if i declared a
05:22 - function and i wrote def func and then
05:24 - you know the parentheses like that in
05:26 - python then that would be me declaring
05:28 - that a function has this specific
05:30 - function body same thing with a variable
05:32 - if i did something like x equals 2 i am
05:34 - declaring that x is equal to 2 i'm
05:36 - assigning the value 2 to the variable x
05:38 - moving on we have expression now this is
05:40 - the same as an expression in math but
05:42 - really an expression is anything that
05:44 - could eventually be evaluated to get a
05:46 - value so if i do something like 1 plus 2
05:49 - this is an expression that then
05:50 - evaluates to three so moving on we have
05:52 - a framework now a framework is simply a
05:55 - platform that is used for developing
05:56 - software applications typically it's
05:59 - going to contain code libraries
06:01 - compilers hooks and then functionality
06:03 - for solving common problems moving on we
06:05 - have a high level language now a high
06:07 - level language is simply a programming
06:09 - language that is close to english it is
06:12 - easily understood and read by humans and
06:14 - some examples of high level languages
06:16 - are pretty much all modern programming
06:18 - languages so python javascript java c
06:21 - plus plus etc those are all high level
06:23 - languages next we have the term
06:25 - iteration now iteration simply means to
06:27 - repeat the same steps or procedure
06:29 - multiple times in the context of coding
06:32 - this is usually looping through a block
06:33 - of code or looping through some type of
06:35 - data structure the next term we have is
06:37 - keyword now a keyword is simply a
06:39 - reserved built-in keyword in a
06:41 - programming language that has some
06:43 - built-in functionality so something like
06:45 - if for while all of those are going to
06:48 - be keywords and you cannot override them
06:50 - in a programming language next we are
06:52 - moving on to low-level language now a
06:54 - low-level language is the opposite of a
06:56 - high-level language this is a language
06:58 - that is closer to the computer hardware
07:00 - meaning it's closer to actually being
07:01 - executed by your cpu it is something
07:04 - that is not easily understood or read by
07:06 - humans an example of low-level languages
07:08 - would be something like assembly or
07:10 - machine code now we have object now an
07:13 - object is simply a collection of data
07:16 - and behavior so we typically have
07:17 - attributes and methods the attributes
07:19 - are our data and the methods are our
07:21 - behavior now objects clearly only exist
07:24 - in object-oriented programming languages
07:26 - and their behavior and attributes is
07:28 - defined by the class that you create the
07:30 - object from so moving on we have the
07:32 - term parameter now i kind of like to
07:34 - think of the parameter as the opposite
07:36 - of an argument parameters are simply the
07:38 - names of values that you are accepting
07:40 - inside of a function or a routine and so
07:43 - if i define a function in python i say
07:45 - define foo and i have a b both a and b
07:48 - would be parameters and then i could use
07:49 - those in the function and whenever i
07:51 - call the function i would pass four a
07:53 - and b two arguments so the arguments are
07:55 - what you pass to the function and what
07:57 - you're looking to accept in the function
07:58 - are the parameters next we have a
08:00 - pointer now this only exists in certain
08:02 - programming languages but a pointer is
08:04 - simply a variable that stores the memory
08:06 - address location of a specific value so
08:09 - rather than storing the actual value
08:11 - it's storing the address to where that
08:12 - value is so if you wanted to see the
08:14 - value associated with a pointer you
08:16 - would need to first go to the address
08:18 - the pointer stores in memory and then
08:20 - look at the value that's at that address
08:22 - in the computer's memory when i say
08:24 - memory i'm talking about ram so random
08:26 - access memory next we have the term
08:28 - reference now a reference is simply a
08:30 - value that allows you to indirectly
08:32 - access data so for example let's say i
08:34 - have a variable a and i have the value 1
08:36 - inside of a if i make a reference to a
08:39 - so i say b is equal to the reference of
08:40 - a now what this means is i can
08:42 - indirectly access the value stored
08:44 - inside of a by modifying b so the next
08:46 - term we have is run time now run time is
08:49 - the time in which your code is actually
08:50 - being executed so this will happen after
08:53 - compile time you will start by compiling
08:55 - your code then you will run the code in
08:57 - well while the code is running that is
08:58 - known as the run time so if you ever see
09:00 - a runtime error that means you didn't
09:02 - actually have any syntax errors or
09:04 - anything that didn't pass the compiler
09:05 - checks that it does beforehand something
09:08 - actually went wrong during the execution
09:10 - of your code so you would see an
09:11 - exception or some type of error in your
09:13 - program if it's a run time error next
09:16 - we're moving on to statement now a
09:18 - statement is really just a single line
09:19 - of valid code that completes some task
09:22 - hard for me to define it more than that
09:24 - pretty much everything you're writing
09:25 - when you're programming is a statement a
09:27 - statement could be an expression a
09:29 - statement could be a declaration really
09:31 - any valid code is just a statement in a
09:33 - programming language finally the very
09:35 - last term i have for you is known as
09:37 - syntax now the syntax i like to think of
09:39 - as the grammar or the set of rules for a
09:41 - particular programming language so just
09:43 - like english has its own grammar it has
09:45 - its own words it has ways of forming
09:47 - sentences so do programming languages
09:49 - except we call this the syntax so with
09:52 - that said that is going to wrap up the
09:53 - 25 terms that all programmers need to
09:56 - know i understand a lot of these were
09:58 - pretty basic and i just gave really
09:59 - quick definitions but if you want some
10:01 - more advanced terms then make sure to
10:03 - like this video leave a comment and let
10:05 - me know and i will likely make a part
10:07 - two with that said i hope you enjoyed if
10:09 - you did leave a like subscribe to the
10:10 - channel and i will see you in another
10:12 - one
10:14 - [Music]
10:20 - you