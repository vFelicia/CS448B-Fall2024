00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video
00:11 - so in today's video i'm going to be
00:13 - sharing with you five python mini
00:15 - projects for complete
00:16 - beginners now each of these projects
00:18 - shouldn't take us longer than about 15
00:20 - or 20 minutes to actually code out
00:22 - what i'm going to be doing is giving you
00:23 - kind of a starting template for these so
00:25 - i'm not starting with any code
00:27 - pre-written or anything like that in
00:28 - fact everything i'm doing here is
00:29 - completely from scratch i don't have any
00:31 - code on my other monitors or anything
00:32 - like that
00:33 - and the idea behind this is i'm going to
00:35 - show you my kind of thought process
00:37 - in creating these games explain to you
00:39 - why i've written the code that i did and
00:41 - kind of how it works
00:42 - and then that should hopefully give you
00:44 - guys a good idea how to go about
00:45 - extending these games and kind of
00:47 - customizing them to your liking
00:49 - now as i said these are for complete
00:51 - beginners when i say complete beginners
00:53 - i'm kind of referencing people that
00:54 - have a little bit of familiarity with
00:56 - python have maybe looked at the syntax
00:58 - a bit but aren't quite comfortable yet
01:00 - are still considering themselves
01:01 - beginners and kind of want some projects
01:03 - to work on
01:03 - and some i guess things that they can
01:05 - use to actually apply their skills
01:07 - rather than just looking at straight
01:08 - theoretical tutorials
01:10 - so anyways with that said i hope you
01:12 - guys are looking forward to this let's
01:13 - get into it
01:14 - after a quick word from our sponsor
01:16 - before we get started i need to thank
01:18 - the sponsor of this video which is
01:19 - alco expert algo expert is the best
01:22 - platform to use for preparing for your
01:24 - software engineering coding interviews
01:25 - and has the highest quality coding
01:27 - interview practice questions with 155
01:30 - practice questions detailed solutions in
01:32 - nine of the most popular programming
01:34 - languages
01:35 - a feature-packed browser-based coding
01:37 - environment extensive test suites and
01:39 - conceptual overviews and code
01:41 - walkthroughs for each and every problem
01:43 - algo expert is the best resource to use
01:45 - to ace your coding interviews
01:47 - algo expert also has a data structures
01:49 - crash course coding interview
01:50 - assessments and a mock
01:51 - interviews feature i can highly
01:53 - recommend algo expert as a former
01:55 - customer myself
01:56 - and now an official instructor on the
01:58 - platform get started using algo expert
02:00 - today by clicking the link in the
02:02 - description and using the code tech with
02:04 - tim for a discount on the platform
02:06 - alright so the five projects i have for
02:08 - you and in the order in which i'm gonna
02:10 - be showing you them
02:11 - is a quiz game a number guesser game
02:14 - rock paper scissors
02:15 - choose your own adventure and then
02:17 - finally a password manager
02:19 - now these are going in the order of
02:20 - difficulty so the first one i'm showing
02:22 - you is the simplest
02:23 - the last one i'm showing you will be the
02:24 - hardest but the last one is still not
02:26 - going to be that hard
02:27 - if you're a complete beginner you should
02:29 - still be able to actually code it out
02:30 - and understand what's going on now if
02:32 - you guys want to skip to a certain
02:34 - project you don't want to go through one
02:35 - of them whatever there will be some
02:37 - timestamps in the description and kind
02:39 - of
02:39 - chapters on the video timeline so feel
02:41 - free to skip through to whatever you
02:42 - want
02:43 - and now what i'm going to do is quickly
02:44 - show us how we can set up our
02:46 - environment
02:46 - and then we'll get started working on
02:48 - this first project which is the quiz
02:50 - game all right so right now i'm using
02:51 - something called visual studio code
02:53 - this is known as an ide an integrated
02:55 - development environment
02:56 - you totally do not need to use this if
02:58 - you have this installed then you know
03:00 - how it works go for it
03:01 - but for most of you i'm going to
03:02 - recommend you something called idli
03:04 - so when you install python i'm going to
03:06 - assume you have python installed at this
03:08 - point in time
03:09 - what you're going to do is open up this
03:10 - app called idle
03:12 - if you're on windows you can search for
03:14 - it on the windows bar if you're on mac
03:16 - you can look for it in the spotlight
03:17 - search which is in the top right hand
03:18 - corner
03:19 - so open up idle again this is installed
03:21 - by default when you installed the kind
03:23 - of vanilla version of python
03:25 - and this is going to bring up something
03:26 - known as the interactive shell
03:28 - now this is not where you write your
03:30 - code i want to make that very clear a
03:31 - lot of people make the mistake of
03:32 - writing all their code here
03:34 - no don't do that what you want to do if
03:35 - you're using this is go to file
03:37 - press a new file and now you have the
03:40 - place you're actually going to be
03:41 - writing your code
03:42 - so the first thing i recommend you do is
03:44 - save this file so save it in a folder
03:46 - save it on your desktop
03:47 - wherever and name it something right
03:49 - name it like the name of the project
03:50 - quiz game
03:51 - uh choose your own adventure game
03:53 - whatever i would recommend you make new
03:54 - files for every one of the new projects
03:57 - that you are working on
03:58 - and so i'll just give give you an
03:59 - example here i'm going to save this as
04:01 - test.pi
04:02 - and now if i go in here and i type you
04:04 - know print
04:05 - hello just some basic python syntax the
04:08 - way i actually run this code here is i
04:10 - press
04:10 - run and then run module or alternatively
04:14 - i press the f5
04:15 - key and then notice it's going to bring
04:17 - up this interactive shell
04:18 - it's going to print out and run your
04:20 - program and then you can go back here
04:22 - modify it save it and whenever you want
04:24 - to run it you press f5 or press
04:26 - run and then run module all right so
04:28 - hopefully that gives you
04:29 - gives you guys an idea how to set up
04:30 - your environment obviously feel free to
04:32 - download visual studio code as well
04:34 - leave a link to it in the description
04:36 - or use any coding environment that
04:38 - you're comfortable with and that you
04:39 - know how to use
04:40 - so right now have a python file open
04:42 - this is a file that's on my desktop it
04:43 - doesn't really matter where you put the
04:45 - file
04:45 - and the first thing i'm going to do here
04:47 - is start working on the quiz game so
04:48 - this quiz game the idea behind it is we
04:50 - want to ask the users a bunch of
04:52 - questions
04:53 - and then if they give us the right
04:54 - answer to these questions we'll kind of
04:56 - add one to their score
04:57 - then at the end of the program we'll
04:59 - print out what they got out of the
05:01 - number of questions so if there was 10
05:02 - questions
05:03 - we would say hey you got you know 3 out
05:05 - of 10 or 7 out of 10 or whatever and
05:07 - maybe we'll even give them a percentage
05:08 - or something like that
05:10 - so let's get started the first thing i'm
05:12 - going to do here is use the print
05:13 - command or the print
05:14 - function i'm going to assume you guys
05:16 - are familiar with this but when you want
05:18 - to print something to the screen
05:20 - output something to the console you say
05:21 - print you put some value in here
05:24 - the value you typically put is a string
05:27 - a string is anything encapsulated in
05:29 - double quotation marks
05:30 - or single quotation marks and then this
05:33 - will be what is outputted so the first
05:34 - thing i'm going to do is just kind of
05:35 - welcome my users to the game
05:37 - i'm going to say welcome to my and then
05:40 - computer quiz so the specific quiz i'll
05:43 - go with this computer quiz
05:44 - please feel free to go with whatever
05:45 - type of quiz that you want all right
05:48 - now we've welcomed the user to our game
05:49 - let's just quickly test this out in vs
05:51 - code
05:52 - to run your code you press this little
05:53 - kind of run button right here
05:55 - you're going to see it should open up a
05:56 - terminal down here and then notice it
05:58 - says welcome to my computer quiz
06:00 - because the program just ran awesome so
06:03 - now what i want to do is ask the user if
06:05 - they want to play my game if they say no
06:07 - i don't want to play then we'll just
06:08 - immediately quit the game
06:10 - so to do that i'm going to create a
06:11 - variable i'm going to say playing
06:14 - is equal to and then i'm going to use
06:15 - this function called input
06:17 - now what input allows you to do is ask
06:20 - the user to start typing something in in
06:22 - the console
06:23 - so inside of input in here you put
06:25 - what's known as the prompt
06:26 - now the prompt is kind of what appears
06:28 - before the user can start typing so
06:31 - for example if you're asking the user
06:32 - for their name you may have the prompt
06:34 - be
06:34 - name and then colon and then maybe a
06:37 - space and then right here
06:38 - after this space the user could start
06:40 - typing whatever their name was so in my
06:42 - case i would put tim
06:43 - and then whatever they type after the
06:45 - prompt and then when they press enter
06:47 - that will be stored in playing so if i
06:49 - type tim
06:50 - and then i press enter now playing will
06:52 - be equal to tim
06:53 - because after the prompt that's what the
06:54 - user typed uh before they hit enter
06:56 - right
06:57 - hopefully that kind of makes sense and
06:58 - even if the user has a space they say
07:00 - like tim and then
07:01 - r all of this tim space r will be
07:04 - included in playing because this is all
07:06 - the stuff they typed
07:07 - after the prompt before they pressed
07:09 - enter so i'm going to ask them here
07:11 - do you want to play
07:14 - question mark and then i'm going to add
07:16 - a space here
07:18 - the reason i'm adding a space is because
07:19 - if i don't add a space
07:21 - then the user is going to start typing
07:23 - right on the question mark and that's
07:24 - going to be kind of all smushed together
07:25 - and it doesn't look nice and so we're
07:27 - going to add a space
07:28 - to make sure the user starts typing one
07:30 - space after the question mark
07:32 - all right so now if i run my program so
07:34 - i press the run button
07:35 - it says welcome to my computer quiz do
07:38 - you want to play notice the cursor is
07:39 - here and now i can start typing whatever
07:41 - i want
07:42 - when i press enter nothing's happening
07:43 - because we haven't done that yet we
07:44 - haven't configured that
07:46 - but that's kind of the basics that's how
07:47 - you get user input
07:49 - and just to show you here if i print out
07:51 - playing what this will do is give me
07:53 - whatever the value of this variable is
07:55 - so if i run this here it's welcome to my
07:57 - computer quiz do you want to play
07:58 - say yes and then it prints out yes right
08:01 - so pretty straightforward okay so now
08:03 - that we know if the user wants to play
08:05 - or not right because after this line is
08:07 - done
08:07 - we'll have something stored in playing
08:09 - we want to check if the user typed yes
08:11 - right and specifically if they didn't
08:13 - type yes we want to end the program
08:15 - so what i'm going to do is use something
08:17 - known as an if statement now an if
08:19 - statement allows us to conditionally
08:21 - check
08:21 - kind of or compare values together and
08:24 - see if something is true or false
08:26 - and so i'm just going to write out the
08:27 - kind of entire if statement then i'll
08:29 - run through it step by step i'm going to
08:30 - say if playing
08:32 - does not equal 2 so an exclamation point
08:34 - and then the equal sign
08:36 - and then i'm going to say yes then what
08:38 - i want to do is i want to quit the
08:40 - program and there's this function in
08:42 - python that you can use called quit
08:43 - this will just immediately terminate the
08:45 - program so what i'm doing is using if
08:48 - i'm writing what's known as my condition
08:50 - this is the thing that i want to check
08:52 - so i want to check if the variable
08:53 - playing which is what the user typed in
08:55 - is not equal to yes the reason i'm
08:58 - checking if it's not
08:59 - equal to yes is because if they typed
09:01 - anything other than the word yes
09:03 - i want to quit the program whereas if
09:06 - they typed yes
09:07 - i don't want to quit and so what happens
09:09 - here is we're going to compare whatever
09:10 - the user typed in
09:11 - with yes and since we're using not equal
09:14 - to
09:15 - if what the user typed in is not equal
09:17 - to yes
09:18 - this condition evaluates to a boolean
09:21 - which is known as
09:22 - true and then if this is true right so
09:24 - if whatever the condition is is true
09:26 - then whatever is indented after this
09:28 - colon here is going to be run
09:30 - so hopefully that makes sense i won't go
09:32 - too much more into the syntax i assume
09:34 - you guys can probably figure it out
09:35 - yourself
09:35 - but the idea is you put a colon and then
09:37 - all the stuff you want to happen
09:38 - when this condition is true you indent
09:41 - here and an indent is kind of four
09:43 - spaces
09:43 - i would recommend you use tabs rather
09:45 - than kind of going one two three four
09:47 - you'll get some issues with your
09:49 - indentation if you try to do spaces and
09:51 - tabs together
09:52 - so anyways let's just see this now uh
09:54 - let's run this program
09:56 - okay i'm going to say welcome to my
09:57 - computer quiz do you want to play
09:59 - i'm going to type yes and well the
10:01 - program is going to end regardless
10:02 - because
10:02 - we're not doing anything after this if
10:04 - statement but if i go here and i print
10:07 - okay exclamation point and then
10:11 - let's play smiley face um
10:14 - oops okay i need to fix my quotations
10:17 - here yeah okay that's all good
10:18 - let's run this now it says welcome to my
10:21 - computer quiz
10:22 - do you want to play i'll type yes and it
10:24 - says okay let's play right and then it
10:26 - gives
10:26 - a really bad smiley face that i need to
10:28 - fix and if we run this one more time and
10:30 - then this time we type
10:32 - no notice that it doesn't say okay let's
10:34 - play because this condition was true
10:36 - and so the program quit alright so
10:38 - that's about if statements hopefully
10:39 - that all makes sense we're going to be
10:40 - using a lot of if statements in this
10:42 - video
10:43 - so now we say okay let's play what we
10:45 - want to do is ask the user their first
10:47 - question
10:48 - and so what we're going to do is the
10:49 - exact same thing we did when we were
10:50 - asking the user if we want to play
10:51 - we're going to say some variable i'm
10:53 - just going to call it answer because
10:54 - that seems to make sense
10:56 - is equal to and then input and then i'm
10:59 - going to put whatever the question is
11:01 - i'm going to say
11:02 - you know ask something about a computer
11:03 - i'll say what
11:05 - does cpu stand for
11:08 - question mark and then what i'm
11:10 - expecting is that the user is going to
11:11 - type in the answer right
11:12 - and so what i'm going to do is just add
11:14 - a space here to make sure that again the
11:16 - user's not typing
11:17 - right beside the question mark they have
11:19 - a little bit of space
11:21 - and now what i want to do is check if
11:23 - the user's answer is equal to the
11:25 - correct answer
11:26 - so i'm going to say if answer is equal
11:28 - to
11:29 - and then i need to type out what the
11:31 - actual answer is now in this case this
11:32 - is central
11:34 - processing unit and i think i spelt
11:36 - processing correct
11:38 - obviously you're going to want to make
11:38 - sure your answers are actually spelled
11:40 - correctly because even if the user types
11:42 - in central processing unit but they like
11:44 - forgot the g
11:45 - or they spell something wrong or they
11:46 - have like a capital p
11:48 - they're going to have the question
11:49 - marked as incorrect because the answer
11:52 - has to match
11:52 - exactly with what the user typed it okay
11:55 - so now we have a colon
11:57 - and now we're saying okay well if the
11:58 - answer was equal to central processing
12:00 - unit what do we want to do
12:01 - i'm going to print that they got it
12:03 - correct so i'll say
12:05 - correct like that and notice i'm using
12:07 - single quotes and double quotes kind of
12:10 - interchangeably
12:11 - it doesn't matter which one you use so
12:12 - long as you're consistent with the
12:14 - starting and
12:14 - ending quote awesome so let's just run
12:17 - this now and see if this works
12:18 - so i'm going to press run it says
12:20 - welcome to my computer game do you want
12:22 - to play
12:23 - yes okay let's play what does cpu stand
12:25 - for central
12:27 - processing unit and then it gives me the
12:30 - the output saying correct
12:31 - now if i run this again do you want to
12:33 - play yes okay let's play what does cpu
12:36 - stand for i type in
12:37 - just cpu it doesn't give me anything
12:39 - because well this
12:40 - was not true sweet okay so now the thing
12:44 - is though
12:44 - if the user gets this wrong i want to
12:46 - tell them that they got it incorrect
12:48 - right we need some output saying them
12:49 - saying hey no that was not correct and
12:51 - so what we're going to use now is what's
12:52 - known as the else statement
12:54 - so whenever you have an if statement
12:56 - like this and you are checking
12:58 - if something is equal to something else
13:00 - and that's what the two equal sign
13:01 - is doing or you have some condition here
13:04 - if this condition here does not
13:06 - evaluate to true you can put this else
13:08 - statement here which means
13:10 - if this is not true whatever's in the
13:11 - else statement will run so if i go here
13:13 - and i say
13:14 - print incorrect exclamation point
13:19 - now if this is false so if the answer
13:21 - does not equal central processing unit
13:23 - then we will print out incorrect if we
13:26 - type anything doesn't matter just so
13:27 - long as this right here that we typed
13:29 - out is equal to false
13:30 - whatever's in the else here will end up
13:32 - run so let me just show you what i mean
13:33 - and then we can talk about this a bit
13:34 - more so let's run
13:36 - do you want to play yes okay let's play
13:38 - what does cpu stand for
13:39 - central processing unit and then it says
13:43 - correct
13:43 - and oops i i should have typed in the
13:45 - incorrect one but that's fine let's just
13:46 - type in
13:48 - no and then notice it gives me incorrect
13:50 - and if i ran this one more time
13:52 - type yes and i type some other random
13:54 - thing it still gives me incorrect so if
13:56 - i type anything other than central
13:57 - processing unit
13:58 - the else statement runs again the syntax
14:00 - for the else statement is you write
14:02 - else you do a colon and then any stuff
14:04 - you want to run you do indented after
14:05 - the else and you could do multiple
14:06 - things as well
14:07 - i could do another print statement and
14:09 - then both of these print statements
14:10 - would run
14:11 - uh if we got this question incorrect
14:14 - sweet okay so now we have our first
14:15 - question
14:16 - and now what we can do is kind of just
14:17 - copy this to do the rest of our
14:19 - questions right
14:20 - so i'll copy this uh one more time i'll
14:22 - do four questions for my quiz please
14:24 - feel free to do more
14:25 - and it's totally fine if we want to
14:27 - leave this answer variable
14:28 - the same i don't need to change this to
14:30 - be something else
14:31 - we could if we want to but since we are
14:34 - done using the answer
14:36 - for this question after this if
14:38 - statement it's fine if we use the same
14:40 - variable to store the answer for our
14:41 - next question
14:42 - so now what we're going to do is we're
14:44 - going to kind of remove all of our
14:46 - answers and questions
14:47 - and we're going to type in well new
14:49 - answers and new questions
14:51 - and i'll show you some more things that
14:52 - we can do here in kind of some fixes and
14:53 - all that as we go through but let's just
14:55 - get our questions done first
14:57 - all right so now my next question i'll
14:59 - say what
15:00 - does gpu stand for
15:03 - question mark and then this will be and
15:05 - i'll copy this
15:06 - graphics processing unit okay so let's
15:09 - go
15:10 - graphics processing unit like that i
15:12 - hope that's correct
15:14 - and then the next question we can ask um
15:18 - i'll just do a bunch of acronyms what
15:20 - does ram
15:21 - stand for question mark this will be
15:24 - random access
15:29 - memory like that okay and then lastly
15:32 - we can say what does psu
15:36 - stand for question mark and we'll just
15:39 - say
15:39 - power supply like that sweet so now
15:42 - we've got all of our different questions
15:44 - here and we're kind of printing out
15:45 - whether we got them correct or incorrect
15:47 - so let's just quickly test this out
15:49 - let's make sure this is all working so
15:51 - uh do you want to play yes what does cpu
15:53 - stand for
15:54 - central processing unit
15:57 - what does gpu stand for notice i didn't
15:59 - add the space here and since i didn't
16:01 - add the space you're going to see
16:02 - when i start typing here that's kind of
16:04 - smushed with the question mark so i'll
16:06 - say graphics
16:07 - processing unit what does ram stand for
16:10 - random
16:11 - access memory okay what does psu stand
16:14 - for
16:15 - let's just type psu and then notice it
16:16 - tells me incorrect
16:18 - so i'm going to start by fixing these
16:19 - spaces here you guys saw what happened
16:20 - when i didn't add the space for the
16:22 - input
16:22 - so now it should be all spaced out
16:24 - properly sweet so now we've got this all
16:26 - working
16:27 - hopefully you guys are all familiar with
16:28 - this if and kind of l syntax now
16:31 - it just needs to be in this structure
16:32 - whenever you have a colon typically in
16:34 - python the next line after that does
16:36 - need to be indented
16:37 - if i did this and like i didn't indent
16:39 - this line here you can see we're getting
16:40 - this red highlight
16:41 - and it's the reason we're getting that
16:43 - is because the indentation is all messed
16:44 - up this is supposed to be indented
16:46 - after we have the else statement in a
16:48 - small note you can only have the else
16:50 - statement
16:50 - after an if statement right so i can't
16:52 - just randomly come down here and put an
16:54 - else statement it needs to come after an
16:56 - if statement
16:57 - appears right so hopefully that's clear
17:00 - okay so now the one thing that i want to
17:02 - show you though is that
17:03 - we might be getting some kind of weird
17:06 - results from our program that we don't
17:08 - expect so i'm going to run my program
17:09 - and say do you want to play
17:10 - i'm just going to type yes with a
17:12 - capital y and notice when i do that
17:15 - it doesn't actually start my program
17:16 - right it immediately quits
17:18 - and the reason for that is whenever you
17:19 - have a capital that is different
17:22 - than lowercase right so if you have yes
17:24 - that is
17:25 - not equal to yes these are different
17:28 - strings and so if we want to check if
17:30 - the person's answer
17:32 - regardless of the case right if they
17:34 - have a capital y or capital e or a
17:35 - capital s or something or you know
17:37 - multiple capitals
17:38 - if we want y cap or capital y capital e
17:42 - lowercase s um to be valid and to allow
17:45 - the user to play
17:46 - we need to do something now there is
17:48 - this method in python
17:49 - called dot lower and what dot lower does
17:53 - is it takes whatever text we type in and
17:55 - it just makes it completely lower case
17:57 - so if i go here and i print you know
18:00 - tim is great
18:04 - like that and then i say dot lower
18:07 - and actually let me do this in another
18:08 - way that's not as confusing let me say
18:11 - text is equal to this and then i say
18:14 - text dot lower
18:15 - what this will do and make sure you have
18:17 - the parentheses by the way is it will
18:18 - convert
18:19 - all of this text to lowercase so i just
18:21 - run my program here and we have a look
18:22 - at our terminal
18:24 - notice that uh wait oh i have to type
18:26 - something let's just type that
18:28 - it says tim is great all in lower cases
18:30 - and so we can
18:31 - use this here to convert all of the
18:33 - answers that our user types in
18:35 - to lowercases so i can say playing.lower
18:38 - and then if the user typed in something
18:40 - with capitals
18:40 - we'll just all be lowercase and that way
18:43 - if they type yes with any different
18:44 - casing
18:45 - it will still evaluate to true because
18:48 - we're converting it to lower
18:49 - now in the same fashion there is
18:51 - something called upper if you say dot
18:53 - upper it will convert everything into
18:54 - upper cases
18:55 - and so then what you would do if you're
18:56 - using dot upper is you would make your
18:58 - answer in complete upper cases
19:00 - because you know you're always going to
19:01 - be converting anything lowercase to
19:03 - uppercase
19:04 - so hopefully that's clear but we're
19:05 - going to just throw lower on here
19:08 - to all of our answers so i'm going to
19:09 - say lower i'm going to say
19:11 - lower i'm going to say dot lower going
19:14 - to say dot lower
19:15 - and alternatively if you didn't want to
19:17 - do it this way you could actually just
19:18 - do it at the end of this input here you
19:20 - could say
19:20 - input dot lower and then you could just
19:23 - remove this
19:24 - because now your answer is already
19:25 - converted to dot lower so you don't need
19:27 - to convert it kind of in this condition
19:29 - right here
19:30 - okay hopefully that's all clear but yeah
19:32 - that's just taking your answer
19:33 - converting into lower case and then
19:34 - you're checking if the lowercase answer
19:36 - is equal to well the lowercase answer
19:37 - you actually have
19:39 - all right so let's rerun this i'm going
19:40 - to open up my terminal i'm going to run
19:42 - do you want to play
19:43 - i'm going to type yes with a capital y
19:45 - notice this works now
19:46 - and now i'm going to do some capital so
19:48 - central processing
19:50 - unit that works right gpu
19:54 - graphics processing unit
19:57 - and then you get the idea i won't do the
19:58 - rest of them okay so the last thing i
20:00 - want to do here is implement some notion
20:02 - of score
20:02 - right we want to be able to tell how
20:04 - many questions our users
20:06 - got correct so what i'm going to do is
20:07 - make a variable here at the top of my
20:09 - program
20:10 - i'm going to say score is equal to 0.
20:12 - this is going to allow us to keep track
20:14 - of how many
20:14 - correct answers they have now all we
20:16 - have to do here since we define
20:18 - score equal to zero is every time the
20:20 - user gets a question correct we just
20:21 - need to
20:22 - increment square so add one to score so
20:25 - inside of this if statement here
20:27 - because this is if the user got it
20:28 - correct right i'm gonna say score
20:31 - plus equals one what that says is okay
20:34 - take the value of score
20:35 - and add 1 to it that's equivalent to
20:38 - saying score
20:39 - is equal to score plus 1. so hopefully
20:42 - that's clear but that's a way that you
20:44 - can just add 1
20:45 - to the variable and so if we add one to
20:47 - score every time we get something
20:48 - correct
20:49 - that means that at the end of our
20:50 - program we'll have some number right
20:53 - we'll have two three zero whatever
20:54 - however many questions we got right
20:56 - we can then use that to display how well
20:58 - the user did
20:59 - so i'm going to just say score plus
21:00 - equals one i'm going to do this inside
21:02 - of all of these if statements here
21:05 - okay and now we've added one to score so
21:08 - now what i can do at the very end of my
21:09 - program
21:10 - once we're done of our questions is i
21:11 - can say you
21:14 - got and then i need to use a plus sign
21:17 - this is a concatenation operator i'll
21:19 - discuss this in a second
21:20 - score plus and then questions
21:24 - correct exclamation point but i need to
21:27 - convert this to a string so let me go
21:28 - through what i just did here okay so i
21:30 - said you got
21:31 - i did a space notice i manually added
21:33 - the space here i then had a plus sign
21:35 - and then i said
21:36 - string score and then plus questions
21:39 - correct
21:40 - so the reason i'm doing this string here
21:42 - is because
21:43 - score is a number right score is an
21:45 - integer it's not a string and so if i
21:47 - tried to do something like
21:49 - you know tim plus one well this doesn't
21:52 - really make much sense right because i'm
21:53 - trying to add a number
21:55 - to a string and like how do you add one
21:57 - to text that's just
21:58 - an undefined operation that doesn't
21:59 - exist so what i need to do instead is
22:01 - convert this one to a string
22:03 - because now that i have two strings when
22:05 - i add them together what i get in python
22:08 - is tim1 right they kind of get combined
22:10 - and so that's what i can do i'm going to
22:12 - convert
22:13 - this score here into a string so then
22:16 - when i
22:16 - add it to the other strings that i have
22:18 - here it's valid this operation works and
22:20 - i'm not getting
22:21 - some issue popping up okay and then i'm
22:24 - adding the questions correct so i'm kind
22:26 - of putting this string score in the
22:27 - middle of the string right you got
22:29 - whatever the number is
22:30 - questions correct okay so let's run this
22:33 - and you want to play
22:34 - yes let's say let's cpu stand for
22:36 - central
22:39 - processing units okay graphics
22:44 - processing units okay psu
22:48 - ram and it says incorrect you got two
22:51 - questions correct right now it's giving
22:52 - me how many questions i got correct
22:54 - and so the very last thing we can do
22:56 - here is we can copy this line and we can
22:58 - give them kind of a percentage right
22:59 - like you got 50
23:00 - or you got whatever percent and the way
23:02 - we do that is now we're just going to
23:04 - take our score
23:05 - we're going to divide it by the number
23:06 - of questions that we have is 4
23:08 - and then we're going to multiply all
23:10 - this by 100 right and if we want to be
23:12 - extra clear here what we can do is put
23:13 - parentheses around this score over 4
23:16 - to make sure this operation happens
23:17 - first before we multiply by 100 but
23:20 - you'll see if we did it the other way
23:21 - around we didn't add the parentheses it
23:22 - would still work fine because we would
23:24 - do the division before we did the
23:25 - multiplication
23:26 - but anyways we're going to say now
23:28 - instead of you got questions correct
23:30 - we're going to say you got
23:32 - and then we're just going to add a
23:33 - percent on here now notice i'm not doing
23:35 - a space
23:36 - and since i'm not doing a space it's
23:37 - going to be whatever this number is
23:39 - and then plus and then the percent sign
23:41 - so it'll come right after and then we
23:43 - can do a period
23:44 - so now we've calculated the the percent
23:47 - again just taking the score dividing it
23:48 - by our number of questions which is 4
23:50 - and then multiplying it by 100.
23:51 - now note here if you change the number
23:53 - of questions you got to change this
23:54 - number right
23:55 - so let's go here and let's run this
23:58 - and let's go to our terminal yes we'll
24:01 - play
24:02 - i'll just type something random okay
24:04 - random
24:05 - access memory correct
24:08 - and then power supply and then it says
24:12 - you got
24:12 - 50 you got two questions correct and
24:15 - with that
24:16 - that is going to wrap up our first
24:18 - python mini project so i know i went
24:20 - really slowly through this and really
24:21 - explained everything in depth that's
24:23 - because this is the very first project
24:24 - i'm trying to make sure this video works
24:26 - for everyone regardless of your skill
24:27 - level
24:28 - and now i will go a little bit faster i
24:30 - won't re-explain a lot of the syntax
24:32 - that i've already explained now as we
24:33 - move into the new projects just anything
24:35 - new that i kind of come across
24:37 - that we use i will explain but this is
24:39 - our first project this is the quiz game
24:41 - there will be some code that has
24:43 - or there will be a link sorry that has
24:44 - this code in the description if you want
24:46 - to download this yourself
24:48 - but i would highly recommend you modify
24:49 - this you know change around maybe add
24:51 - like more than one point for questions
24:53 - that are worth
24:54 - you know more than one point that are
24:55 - more difficult or something like that
24:57 - right and you guys can
24:58 - do this as you please regardless that is
25:00 - the quiz game
25:01 - now we're gonna move on to do a number
25:04 - guesser i think this is the one i was
25:05 - saying i was gonna do second
25:06 - so this one is pretty straightforward
25:08 - but what we're gonna do is generate a
25:10 - random number
25:10 - and we're gonna track how many times it
25:12 - takes the user to guess this
25:14 - number and so what i'm going to do is
25:15 - zoom in a bit here so that we can
25:17 - see our code the first thing i'm going
25:19 - to do is import this module in python
25:21 - called red alright so first thing to
25:23 - mention here is that this right here is
25:24 - what's known as a module so when you
25:26 - import random you're importing the
25:28 - random module
25:30 - now this just lets you use all of the
25:31 - functionality that's kind of in here
25:33 - this is default this is installed by
25:35 - with python by default you don't need to
25:36 - install it or anything like that
25:38 - in quick note there is modules that are
25:39 - built by you know people like me or
25:41 - other developers out
25:42 - there and you can import them but you
25:44 - have to install them first this one is
25:45 - just built into python by default and so
25:47 - no installation is required
25:49 - anyways let me show you how to make a
25:50 - random number so there's a few different
25:52 - ways to do this but the two simplest
25:54 - ways are to do random
25:56 - dot and then rand range then you're
25:58 - gonna do an open and closing parentheses
26:00 - and let me get rid of the print
26:01 - statement so we can see this better for
26:02 - right now
26:04 - and here you're gonna put the start and
26:06 - then the stop
26:08 - of the range for your random number so
26:11 - you would do something like negative 1
26:12 - if you wanted to start the range at
26:13 - negative 1
26:14 - and stop at 10 excuse me and then what
26:17 - this would do
26:18 - is generate a random number that goes
26:20 - from negative 1 to 10
26:22 - but does not include 10. so that's very
26:25 - important
26:25 - the number you put here is the absolute
26:28 - upper bound
26:28 - you cannot have the number 10 be
26:31 - generated if 10 is here
26:32 - if you wanted the range to generate a
26:34 - number between negative 1 and 10
26:35 - you'd have to put 11. again i don't know
26:37 - why they do that there's just
26:39 - some things in python that aren't
26:40 - necessarily intuitive for beginners
26:42 - but with this is 11 it's not going to
26:44 - generate 11 it will generate up to 10.
26:47 - so make sure that's clear now there's
26:49 - another thing you can do here if you
26:50 - want the range to just start at zero
26:52 - you can say random.rand range and just
26:54 - put the stop
26:55 - if you just put one thing here what this
26:57 - will do is generate a random number
26:59 - between zero and
27:00 - this number minus one so up to ten and
27:03 - yeah there you go that's how that works
27:05 - okay so let's do something from negative
27:07 - 5 to 11
27:09 - and let's say r is equal to
27:11 - random.randrange
27:12 - and let's just print r okay so let me
27:16 - run this
27:17 - and we'll look at our thing here okay
27:19 - run and notice we get a five now if i
27:22 - run this again we're getting a negative
27:23 - three
27:24 - i run a bunch of times we get a bunch of
27:25 - random numbers you see this is
27:27 - random and there you go that's working
27:29 - we got a nine
27:30 - we can just round a bunch of times we
27:31 - got a 10. notice we won't get 11
27:34 - if we do this sweet so we're getting a
27:36 - random number so that's one way
27:37 - another way to do this is with a
27:39 - function called randint now rand int
27:41 - works the exact same way
27:42 - as rand range except now it will include
27:45 - 11.
27:46 - so the upper bound range now includes
27:48 - the number that you typed
27:49 - doesn't go up to but not included so now
27:51 - if i do negative 5 to 11
27:53 - 11 will possibly be generated so if i
27:54 - run this now uh we get 6
27:57 - right and we if we keep running it we
27:58 - might see that we get 11.
28:00 - um okay i'm not this could take a while
28:03 - there you go so we do get 11. so that
28:04 - works
28:05 - okay sweet uh and same thing here if you
28:08 - decide to not include the start
28:10 - it will just generate up to and
28:11 - including this end number that you put
28:13 - right here
28:14 - so that's how you make a random number
28:16 - so what we want to do is generate a
28:17 - random number so actually let's let's
28:19 - leave this here
28:19 - let's say random underscore
28:23 - number and then we want to ask the user
28:25 - to guess this number
28:26 - and every single time they guess it
28:28 - we're going to tell them if they were
28:29 - above
28:30 - or below the number so that they can do
28:32 - it in like a reasonable number of
28:33 - guesses especially if we make this
28:34 - number like really large right
28:36 - so the first thing i'm going to actually
28:37 - ask the user is how large of a number
28:39 - they want to generate so we'll assume it
28:40 - starts at 0 and then we'll ask them to
28:42 - type in a number
28:43 - and we'll generate up to that number so
28:46 - i'm going to say
28:49 - let's say top of range
28:52 - is equal to and then input and we'll say
28:57 - type a number won't even tell them what
29:00 - it's for we'll just say type a number
29:02 - okay so now they're going to type a
29:03 - number so what we actually need to do
29:05 - here is we need to make sure that this
29:09 - thing they typed in here is a number
29:10 - because if the user types in like hello
29:13 - or tim or some random string something
29:14 - that's not a number
29:15 - then we can't use that right and we also
29:17 - need to make sure the number they type
29:18 - in is greater than zero
29:20 - so i'll show you how we do that i'm
29:22 - going to say if the top of range dot
29:24 - is digit okay and then i'm going to do
29:28 - an if statement
29:28 - inside of this if statement i'm going to
29:30 - say if
29:32 - the int and actually we're going to do
29:34 - this
29:35 - we're going to say top of range is equal
29:36 - to int top of range
29:38 - and let me pause here and explain what
29:40 - i'm doing so first of all
29:42 - you can make a variable using
29:43 - underscores when you want to have
29:44 - multiple words it makes a lot of sense
29:46 - to make the name with underscores so
29:47 - like top
29:48 - underscore of underscore range you can't
29:50 - have a variable that's like
29:51 - top range that won't work you need to
29:53 - have it connected
29:54 - you can't have like two separate words
29:55 - like that anyways this is equal to input
29:58 - the user is going to type something in
29:59 - now by default when the user types
30:01 - something in
30:02 - it's going to return it to us with
30:03 - double quotation marks so it's going to
30:05 - be a string
30:06 - so even if the user types in like 25
30:08 - it's going to be
30:09 - returned to us like this and this here
30:12 - for python is not considered a number
30:14 - it's not considered an integer it's
30:15 - considered a string
30:16 - and so we need to convert this 25 so
30:19 - that it looks like this so that's
30:20 - actually a number
30:21 - and the way you do that is you use this
30:23 - function called int
30:24 - so you surround the string with int and
30:27 - then it will convert
30:29 - this string into its numeric
30:30 - representation so it will give us
30:32 - 25. however if you try to convert
30:34 - something that's not
30:35 - an actual integer into an int it's going
30:37 - to fail
30:38 - you're going to get an error and so we
30:40 - need to make sure that what the user
30:42 - typed in
30:43 - is a digit before we try to convert it
30:46 - into an
30:46 - it and the way you check that is with
30:48 - this is digit method
30:50 - so i say if top of range dot is digit
30:52 - what is digit will do is return to us
30:54 - true
30:55 - if this is a number otherwise it will
30:57 - return false and so if this right here
30:59 - is true
31:00 - we will convert top of range into an
31:01 - integer so top of range is equal to int
31:03 - top of range
31:04 - then we will check if top of range is
31:06 - greater than zero
31:08 - so we'll say if top of range is
31:11 - actually we're going to say less than
31:13 - zero
31:14 - less than or equal to zero specifically
31:16 - then what we will do is we'll print out
31:20 - please type a number
31:23 - larger than zero next time
31:27 - and then we'll just quit so we'll tell
31:30 - them what they did wrong and then we're
31:31 - just going to quit the program right
31:32 - there
31:33 - otherwise if we make it through all this
31:35 - we're good but one thing we need to do
31:36 - here
31:37 - is we need to put an else and we need to
31:40 - put quit
31:41 - and we need to put a print statement
31:42 - that says please type a number
31:45 - next time so let me run through this
31:48 - what we're doing is checking if it is a
31:50 - digit
31:50 - if it's not a digit so in the else
31:52 - statement we need to tell them hey you
31:53 - got to type in a digit it doesn't work
31:54 - if you don't type in a number right
31:56 - and then we quit now if that works if it
31:58 - is a digit we convert it into an
32:00 - int we make sure it's greater than zero
32:02 - if it isn't then we tell them hey you
32:04 - got to type in a number and then we quit
32:06 - but if we make it through all of this
32:07 - and we don't quit so we've now converted
32:09 - the number to an int
32:10 - we can now use that number to generate
32:12 - our random number so we can say
32:14 - randomnumber
32:15 - random.randint and then we can put top
32:17 - of range as our variable for generating
32:19 - that random number
32:20 - and we'll now generate up to whatever
32:22 - number they typed in
32:24 - sweet so now that we have that let's
32:25 - just print out the random number and
32:27 - let's just
32:28 - test this and make sure it's all working
32:30 - so i'm going to run this
32:31 - type number let's type five and we got
32:34 - one issue rand it missing one potential
32:36 - argument b
32:38 - okay so this is my fault i was saying
32:39 - when we used rand int we could just
32:41 - include the top of the range that's
32:43 - false we need to include the bottom of
32:45 - the range as well
32:46 - so i'm going to put 0 there and now this
32:47 - should work so let's run this
32:50 - and let's type a number let's type 5 and
32:51 - there you go we generated a random
32:53 - number which was 4. if we run this again
32:56 - type 5 we get 3 you can see this is
32:58 - indeed working
32:59 - sweet so now that we have our random
33:01 - number we want to keep
33:03 - asking the user to type in a guess for
33:05 - the number until they get it correct
33:07 - and so i'm going to use a while loop
33:09 - here and i'll explain how this works in
33:10 - a second i'm just going to say well true
33:13 - now what this means is okay we're going
33:16 - to do whatever is
33:17 - indented after this while loop here
33:19 - after the colon
33:21 - while this condition whatever's at the
33:22 - top of here is true
33:24 - so right now if we just decided to like
33:26 - print
33:27 - tim this would happen infinitely this
33:30 - loop would never stop
33:31 - unless we actually like manually close
33:33 - the program the reason is because
33:34 - there's no way for this to end right i
33:36 - say while true well true is always true
33:38 - and so we're just always going to print
33:40 - 10. however
33:42 - there is this keyword it's called break
33:44 - and what break will do is immediately
33:46 - stop the loop
33:47 - as soon as this line of code is executed
33:49 - so what we can do is use this break
33:51 - keyword
33:52 - to break out of the loop stop running
33:54 - the loop as soon as the user types in
33:56 - the correct
33:57 - number so we're going to say while true
33:59 - this is the condition for the while loop
34:01 - we could do a real condition we could
34:03 - say something like wow
34:04 - um like input and
34:08 - actually we'll say like user guess
34:11 - is not equal to random number we could
34:13 - do something like that that would work
34:15 - as well but i want to show you using the
34:16 - break keyword so instead we're going to
34:18 - do well true
34:19 - all right so what we're going to do is
34:20 - we're going to start by asking the user
34:22 - to guess what the number is right that's
34:23 - the very first thing we do
34:25 - every single time we ask them we say
34:26 - okay make a guess so i'm going to say
34:29 - user underscore guess is equal to
34:32 - and then input i'm going to say
34:36 - make a guess call
34:39 - now same thing here we need to check if
34:42 - the user's guess
34:43 - is actually an integer right so i'm
34:45 - going to copy exactly what we just did
34:47 - right here
34:49 - and i'm going to paste it down below and
34:51 - i'm going to say okay
34:53 - if the and now instead of saying top of
34:55 - range i'm going to say
34:56 - user underscore guess dot is is digit
34:59 - then user underscore guess is equal to
35:03 - int of user underscore
35:06 - guess and then i'll even take this and
35:08 - we don't need to check if the number is
35:10 - less than zero that's fine
35:11 - uh we can just do this so i'm going to
35:13 - say and i'm going to get rid of this
35:15 - this
35:15 - quit okay let me explain this but what
35:17 - i'm saying is okay
35:18 - the user guess is equal to input make a
35:20 - guess they're gonna type in some number
35:22 - this comes in as a string we need to
35:23 - make sure
35:24 - that what they've typed in is actually a
35:25 - number if it is a number we'll convert
35:27 - it to a number we're all good
35:28 - however if it is not a number then we're
35:30 - going to say please type a number next
35:32 - time
35:33 - and we're going to use this keyword
35:34 - called continue now what continue will
35:36 - do
35:37 - is automatically bring us back to the
35:39 - top of our loop
35:40 - so it's a little bit different than
35:41 - break rather than ending the loop it
35:43 - just brings us back to the very top
35:45 - so if i did something down here like
35:47 - printed
35:49 - after continue if we hit this continue
35:52 - keyword
35:53 - this won't run we won't print we'll just
35:54 - go back up to the top of the loop and
35:56 - ask the user to make another guess
35:58 - and so that's what we're going to do
36:00 - however we're going to come down here
36:01 - now we're going to say if
36:03 - the user guess is equal to the random
36:06 - number
36:07 - we're going to print and we're going to
36:09 - say you
36:10 - got it you got it correct otherwise
36:14 - we'll say else print
36:17 - you got it wrong so if they didn't get
36:19 - it right they got it wrong
36:20 - obviously right whereas if they didn't
36:22 - type a number we'll just say please type
36:24 - a number next time and then we'll
36:25 - continue
36:26 - rather than doing this and telling them
36:27 - they got it wrong after they didn't even
36:29 - type a number in
36:30 - okay hopefully that makes sense we can
36:32 - test this out though and make sure it's
36:33 - working so save the program and run
36:35 - now type a number let's type a number
36:37 - let's say 10
36:38 - okay make a guess we're gonna guess
36:40 - three and wow okay we actually got it
36:43 - that's great but notice that it's still
36:45 - asking us to keep making guesses
36:47 - and to quit this you can type control c
36:49 - on your keyboard if you get into an
36:50 - infinite loop
36:51 - the reason it's telling us to do that is
36:52 - because we didn't break out of the while
36:54 - loop right we said you got it
36:56 - but we didn't stop and to stop we need
36:58 - to use the break keyword
37:00 - so now you'll see if we do guess it
37:02 - we'll immediately stop looping whereas
37:04 - if we don't get it we will continue
37:05 - looping because the break keywords not
37:07 - here
37:08 - so let's run this now type a number
37:10 - let's just go up to five
37:11 - make a guess one you got it wrong okay
37:13 - we'll guess two you got it wrong
37:15 - three you got it wrong four you got it
37:17 - wrong five you got it sweet and then we
37:19 - exit the loop
37:20 - there you go okay so that's working fine
37:23 - now what i'm going to do
37:24 - is i'm going to keep track of how many
37:26 - times the user actually makes a guess
37:28 - so to do this i'm going to make a
37:29 - variable similar to what we had with
37:31 - score before i'm going to say guesses
37:33 - is equal to 0. and now every single time
37:36 - we start this while loop again
37:38 - i'm going to increment add 1 to guesses
37:40 - so i'm going to say
37:41 - guesses plus
37:44 - equals 1. so at the very top of the loop
37:47 - we'll increment guesses so the first
37:49 - time this runs guesses will be equal to
37:51 - one
37:51 - we'll go through all of this then we'll
37:53 - come back up to the top guesses will now
37:55 - be equal to two the user will now make
37:56 - another guess
37:57 - and now when we exit this while loop
38:00 - once this is done
38:01 - we're gonna print out how many guesses
38:03 - they got i'm going to show you a
38:04 - different way to do this this time
38:06 - i'm going to say you got it in
38:09 - and then we'll say comma
38:12 - guesses and then the string guesses so
38:15 - another way to print multiple things on
38:16 - the same line
38:17 - is to use commas so i'm going to say you
38:19 - got it in and then i'm going to say
38:21 - whatever the number of guesses is notice
38:22 - i don't need a space here
38:24 - whenever you have commas separating your
38:26 - different things that you're printing
38:27 - out
38:28 - it will automatically add spaces in
38:29 - between them and then notice here i
38:31 - didn't even convert this to a string
38:32 - and that's because the print statement
38:34 - is smart enough to say okay hey this is
38:35 - an
38:36 - int i'm going to convert this into a
38:37 - string for you and kind of automatically
38:40 - add it to this string
38:41 - so what we were doing manually before
38:43 - the print statement can just do for us
38:45 - and so this time we'll let the print
38:46 - statement do it uh this line here is
38:49 - completely equivalent to just having the
38:51 - uh the plus
38:53 - the space the string
38:56 - uh the other plus and the space right
38:58 - it's the exact same thing okay so let's
39:00 - go back to what we had
39:02 - and there you go we are all good now
39:04 - let's just run this and i am going to
39:05 - show you how we can tell them if they
39:07 - got it
39:07 - greater than or less than because i did
39:09 - tell you that we were going to do that
39:10 - okay so let's run this
39:12 - and let's say type a number let's go
39:14 - five make a guess
39:15 - one you got it wrong two you got it and
39:17 - then it says you got it in two guesses
39:20 - sweet all is working so now the last
39:22 - thing we want to do is tell the user if
39:24 - they were greater than or less than the
39:26 - number so that they can kind of narrow
39:27 - down their guesses
39:28 - and so rather than just telling them you
39:30 - got it wrong now inside of the else
39:32 - statement
39:33 - we're going to check if the user was
39:36 - above or if they were below there's a
39:37 - ton of different ways to do this i'm
39:38 - just going to do it this way
39:40 - i'm going to say if the user guess is
39:43 - greater than the random number then what
39:46 - i want to do is say
39:47 - print you were
39:51 - above the number
39:55 - exclamation point otherwise i'm going to
39:57 - say print
39:59 - and i'll say you were below the number
40:05 - all right so let's run through this
40:06 - we're just checking if the user guess
40:08 - is greater than whatever the random
40:10 - number is if it is we're going to tell
40:12 - them they were above the number
40:13 - otherwise if it wasn't greater than it
40:15 - must be less than and we're going to say
40:17 - you were below the number
40:18 - now some of you may have heard that
40:19 - statement if it wasn't greater than it
40:20 - must be less than you said no it could
40:21 - be equal to
40:22 - that's correct but the thing is up here
40:24 - we checked if it was equal to and so if
40:26 - it was equal to
40:27 - we would have gone into here we would
40:29 - not have hit this else statement
40:31 - so if we're in this else statement we
40:33 - know we must not be equal to the random
40:35 - number
40:35 - and so instead what we can do is just
40:37 - run this if statement that's inside of
40:39 - the else
40:40 - i'm going to show you a more elegant way
40:41 - to do this in one second but let's just
40:43 - run the program and see if this works
40:45 - okay let's run this
40:46 - type a number let's type 20 make a guess
40:48 - let's guess
40:49 - 10. you were above the number okay so
40:51 - now i don't have to guess below 10. so
40:53 - i'm going to guess 5
40:54 - you are above the number okay it's less
40:56 - than 5. uh 4
40:57 - 3 2 1 you got it in nine guesses okay so
41:01 - anyways
41:02 - that did work but it was telling us
41:03 - whether we were above or below
41:05 - uh let's see if i can guess something
41:08 - that's actually i guess i couldn't have
41:09 - guessed anything below one
41:10 - so let's run this again let's type 10
41:13 - let's guess one
41:14 - and then this time it is telling us
41:15 - we're below the number okay great so
41:17 - that is working
41:18 - okay so the one thing i want to show you
41:19 - here is how we can clean this up a
41:20 - little bit
41:21 - using something new that we haven't seen
41:22 - yet which is known as an l if statement
41:25 - so an l if statement is something that
41:27 - kind of happens
41:28 - after the initial if statement's checked
41:29 - so i'm just going to type this out and
41:31 - then i'll show you how this works
41:33 - so i'm going to say lf okay so now what
41:35 - i've done is i've made this code a
41:37 - little bit cleaner
41:38 - and the way i've done this is i've
41:39 - removed that kind of nested if statement
41:41 - that we had
41:42 - and i've now implemented an alif instead
41:44 - so what the life does
41:46 - is if the initial condition is not true
41:49 - it will then check
41:50 - another condition so it says okay if
41:52 - this is true we're going to do this
41:53 - we're going to skip all of this
41:55 - if this is not true we're going to check
41:57 - this if this is true we're going to do
41:59 - this
41:59 - and we're going to skip whatever else is
42:01 - after it however if this is not true
42:03 - then we're going to do whatever is in
42:04 - the else so we're going to check this if
42:06 - it's true we do this
42:07 - otherwise we check this if it's true we
42:09 - do this and otherwise if both of these
42:11 - things are false
42:12 - we do what's in the else and so that's
42:14 - just another way to do this
42:16 - rather than having what we have before
42:18 - which was the else
42:19 - and then all of this kind of indented in
42:22 - the else right
42:23 - this just cleans it up and small note
42:25 - you can have as many lf statements as
42:26 - you want
42:28 - so i could add another one like this if
42:29 - i wanted to do that but in our case it
42:31 - doesn't really make any sense to do that
42:33 - okay so that's actually it i'm not going
42:36 - to run the program just believe me this
42:37 - this does work
42:38 - and yeah that is going to be our number
42:40 - guessing game so i'll zoom out a bit so
42:42 - you guys can kind of see all of the code
42:45 - but that is how that works i guess
42:47 - there's not really much more to say
42:48 - about that and now we'll move on to the
42:50 - next one
42:51 - all right so now we're moving on to rock
42:52 - paper scissors now obviously you guys
42:54 - know how this game works
42:56 - what i'm going to do here is make it so
42:57 - that the computer keeps track
42:59 - of how many times the user gets it
43:01 - correct versus how many times the
43:02 - computer gets correct when i say
43:04 - corrects or i mean whoever
43:05 - wins rock paper scissors so the first
43:07 - thing we're going to do here is
43:08 - import random now small note here when
43:11 - you are importing
43:12 - modules it's typically best practice to
43:14 - do at the very top of the program
43:15 - i see some beginners import the module
43:17 - like right before they use it
43:19 - that's fine you can do that but it's
43:20 - just a better practice to have it right
43:22 - at the top so it's really easy to see
43:23 - what stuff you've imported
43:25 - and obviously remove it and then you can
43:26 - use it throughout the entire file
43:28 - whereas if i tried to use like random up
43:30 - here
43:30 - it doesn't work until after i've
43:32 - imported right so hopefully that's clear
43:34 - but anyways that's what we're going to
43:35 - do
43:36 - so what we need is we need two variables
43:38 - one for the user score
43:40 - and one for the computer score so i'm
43:41 - going to say user underscore wins
43:43 - is equal to zero and i'll say computer
43:46 - underscore wins
43:47 - is equal to zero as well all right now
43:49 - i'm going to have a while loop i'm going
43:51 - to say wow
43:52 - true and the first thing i'm going to do
43:54 - here is i'm just going to ask the user
43:56 - uh
43:57 - actually yeah i'll ask the user to input
43:58 - rock paper or scissors
44:00 - and then i will also let them type in q
44:03 - like the letter q and if they do q then
44:06 - we'll just immediately quit the program
44:07 - so let's handle that first let's say
44:09 - user underscore
44:10 - input is equal to input and i'll say
44:14 - type and then we can say rock slash
44:17 - paper slash scissors
44:21 - is scissors with uh with with two s's i
44:23 - think that's how you spell it okay rock
44:25 - paper scissors
44:26 - and well paper should be spelt correctly
44:28 - okay rock paper scissors
44:30 - or q to quit okay all right so now that
44:33 - we have that we will
44:34 - go down and we will check let me just
44:36 - zoom out so we can see this here what
44:38 - the user actually typed it
44:39 - so the first thing i want to do is i
44:40 - want to see if they typed in queue
44:42 - so i will actually convert this to dot
44:45 - lower
44:46 - in kind of the way that i showed you we
44:47 - could do it previously we'll take
44:49 - whatever the user types in
44:50 - and we'll just convert it to dot lower
44:52 - and actually instead of a period let me
44:53 - do a colon and let me add a space so
44:55 - it's not all smushed there okay so type
44:56 - rock paper scissors
44:57 - or queue to quit and now i'm going to
44:59 - say if the user input and this is
45:01 - converted to dot lower right
45:03 - is equal to q then what i'm going to do
45:06 - is i'm going to quit otherwise i'm going
45:09 - to check
45:10 - if they typed in rock paper scissors or
45:12 - if they type something else and now i'm
45:14 - going to show you how we can check
45:16 - if the user input is equal to more than
45:18 - one thing because previously i've been
45:20 - showing you how we can check
45:21 - if it's equal to just a string right but
45:23 - now i'll give you a little bit of
45:24 - i don't want to call it a hack but a
45:25 - little bit of a trick so that you can
45:27 - see
45:27 - if the user typed in rock paper or
45:30 - scissors all in one line rather than
45:32 - writing three if statements
45:33 - so i'm going to say if the user input is
45:35 - in and i'm going to use a list you guys
45:37 - probably haven't seen this before if
45:38 - you're
45:39 - like a complete beginner in python and
45:42 - let me just kind of
45:43 - fix this a little bit so p s
45:47 - i'm going to type it myself and i'll
45:48 - explain what's going on here okay so
45:50 - let's make
45:50 - this in quotes
45:54 - okay and then this needs to be in quotes
45:58 - two okay i'm really messing this up
45:59 - quite
46:00 - badly but you get the idea okay so what
46:02 - i've done is i've just created a list
46:04 - now a list is anything encapsulated in
46:06 - these square brackets um
46:08 - that is like separated by commas so i
46:10 - have this
46:11 - rock paper and scissors string
46:14 - in this list and so what i'm saying is
46:17 - if
46:17 - user input is in this list i'm
46:21 - checking if whatever the user typed in
46:23 - exists
46:24 - in either of these three strings so
46:26 - essentially we're just checking if the
46:27 - user typed in rock
46:28 - paper or scissors now you can put any
46:30 - strings in here that you want
46:32 - but we're just checking obviously if
46:33 - this is in here and that's how we can
46:35 - check
46:35 - multiple things on one line there's
46:37 - other ways to do this too but this is
46:39 - kind of one nice trick that we can use
46:41 - so i'm going to say if user input and
46:42 - i'm actually going to say is
46:44 - not in now this is another keyword again
46:46 - that you may not have seen before
46:47 - what this is going to do is simply
46:49 - reverse the kind of thing that we were
46:51 - checking before
46:52 - so we were checking if the user input
46:54 - was in rock paper scissors so now when i
46:56 - say not
46:56 - in i mean obviously as you would read in
46:59 - english this is checking if the user
47:00 - input
47:01 - is not in here if it's not in here that
47:03 - means they didn't type in something
47:05 - valid and well what we need to do is
47:06 - have them type in something valid so
47:08 - what i'm going to do is
47:09 - say type continue here and what this
47:11 - will do is just re-ask them to type in
47:13 - rock
47:14 - paper scissors or q so we could give
47:16 - some error message saying that's not a
47:17 - valid option or something like that
47:19 - but what i'm going to do is just have it
47:21 - so it keeps asking them to type
47:22 - something in
47:23 - until eventually they give us something
47:25 - about so when i hit continue that means
47:26 - anything
47:27 - after here is not going to happen right
47:29 - if this continue
47:30 - is hit we're just going to go back up to
47:32 - the top of the while
47:34 - sweet and actually rather than saying
47:36 - quit here what i'm going to do is say
47:37 - break
47:38 - so this will break out of the while loop
47:40 - and then that will actually
47:41 - automatically end the program for us
47:42 - because we'll be at the end
47:43 - we won't need to what he called actually
47:46 - manually quit
47:47 - so the break breaks out of the wall loop
47:48 - which means we'll go to wherever the end
47:50 - loop is done
47:51 - or whatever the while loop is done and
47:52 - then we can actually just print
47:53 - something saying you know
47:55 - good no not not that uh goodbye
47:59 - exclamation point sweet okay so now at
48:01 - this point in time the user has given us
48:03 - validimp they've typed in rock paper or
48:05 - scissors so what we need to do is
48:06 - generate a random number
48:07 - that represents rock paper scissors for
48:10 - the computer so i'm going to say
48:11 - rand i actually say yeah random
48:14 - underscore number is equal to and then
48:18 - this
48:18 - is going to be random.rand int
48:22 - and we'll generate a number between 0
48:24 - and 2. so if they type in 0 that can be
48:26 - rock
48:27 - if they type in 1 that can be scissors
48:29 - or paper
48:30 - they type in 2 that can be scissors so
48:32 - let's write that down in a comment uh to
48:34 - do a comment in python you hit the pound
48:36 - sign
48:36 - or use the pound sign like the number
48:38 - sign and then type anything after it
48:40 - anything on a line that comes after a
48:42 - pound sign will not be read by your
48:44 - python interpreter
48:45 - and it's just there so that as a
48:47 - programmer it's easier to read and gives
48:48 - you like you know documentation or
48:50 - comments about what's going on
48:52 - so i'm going to say rock is one
48:55 - or rock is zero i'm going to say paper
48:58 - is one
48:58 - i'm going to say scissors is and then 2.
49:02 - sweet so the way that i'm going to do
49:04 - this now is i could do an if statement
49:06 - or i could write three if statements say
49:08 - you know if random number is equal to
49:09 - zero
49:10 - then the computer picked rock if random
49:11 - number is equal to one if random number
49:13 - is equal to two
49:14 - i actually don't need to do that what i
49:16 - can do is uh
49:18 - let's see here okay so what i'm going to
49:19 - do now here to actually assign
49:22 - some variable equal to rock paper
49:24 - scissors to represent the computer's
49:25 - kind of choice is i'm going to use a
49:27 - list now again this might be a little
49:29 - bit confusing but i think you guys will
49:30 - get the idea if i do this
49:32 - i'm going to take this list right here
49:34 - rock paper scissors
49:35 - i'm actually going to store it in a
49:36 - variable i'm going to say options
49:39 - is equal to rock paper scissors and i'm
49:41 - going to change this here to be options
49:43 - so this is the doing the exact same
49:44 - thing as before except we're just
49:46 - storing this list of values now in this
49:48 - options variable
49:49 - now if you haven't seen lists before
49:50 - these are actually very interesting
49:52 - they're known as a data structure
49:53 - and they are collections of elements
49:55 - right we have multiple elements multiple
49:57 - strings stored in this list
49:59 - and while the way we access these
50:01 - different elements in this list
50:03 - let's say i just wanted scissors or i
50:04 - just wanted paper i just wanted rock
50:06 - is we use what's known in known as an
50:09 - index
50:10 - so if you write the name of your list
50:12 - which in this case is options that's the
50:13 - variable storing the list
50:14 - you can put these square brackets and
50:16 - then you can put a numeric
50:18 - index that represents these different
50:20 - elements so in this case the different
50:22 - indices of this list
50:24 - are 0 1 and 2.
50:27 - and if we add another element right
50:29 - let's just go you know test
50:31 - then this would be index 3. so the way
50:34 - this works is you start counting at 0
50:36 - and then you just go up by 1 every
50:38 - single time so the very first element is
50:39 - indexed by zero
50:41 - second one third two fourth three
50:44 - and so that's all that is so when i say
50:46 - options at zero that's going to give me
50:47 - rock
50:48 - when i say options at one that gives me
50:50 - paper when i say options at two that
50:51 - gives me scissors
50:52 - and so i have some random number that's
50:55 - between 0
50:56 - and 2 right and 0 represents rock one
50:59 - represents paper
51:00 - and 2 represents scissors let me get rid
51:01 - of test so what i can do
51:03 - is say let's actually change this here
51:07 - say computer underscore guess
51:10 - or computer underscore pick i guess is
51:13 - equal to and then this is going to be
51:14 - options at whatever the random number is
51:17 - because this will be between 0 and 2
51:19 - and so we'll use that as the index to
51:21 - actually access the string
51:23 - the thing that the computer chose right
51:25 - rock paper or scissors
51:26 - so now what we can do is we can print
51:29 - out what the computer chose we can say
51:31 - computer
51:33 - picked and then we can say comma and we
51:36 - could say
51:36 - computer underscore pick and
51:40 - then we will decide who actually won
51:42 - right so then we'll say who won and let
51:43 - me just do comma
51:45 - uh actually let's do plus and let's just
51:47 - add a period
51:48 - the reason i'm not doing a comma and
51:50 - then the period is because if i do a
51:51 - comma it will automatically add a space
51:53 - between this period and the computer
51:55 - pick which i don't want
51:57 - and so instead we're just going to add
51:58 - the the dot like that
52:00 - okay so we're going to say the computer
52:01 - picked that and then we need to decide
52:03 - who won
52:04 - right and so to decide who won we need
52:06 - to all compare
52:07 - uh the user's pick to the computer's
52:09 - pick so we're going to say if
52:10 - the user input is equal to and i guess
52:13 - we'll say rock
52:14 - we'll then do kind of the winning
52:16 - condition for the user so if the user
52:18 - picked rock then what do they win
52:19 - against
52:20 - well they win against scissors and so
52:22 - now we need to check if the user picked
52:24 - rock
52:24 - and the computer picked scissors so what
52:26 - i'm going to do is use this keyword
52:28 - called and
52:29 - and say computer underscore pick
52:32 - is equal to and then scissors so if
52:35 - that's the case
52:36 - we'll print out uh u
52:39 - one exclamation point and then we'll say
52:42 - user
52:43 - underscore wins plus equals one so that
52:46 - they get one more win
52:48 - so what this and does is it checks if
52:50 - the condition on the left side
52:52 - and the condition on the right side are
52:53 - true so what happens in this if
52:55 - statement or what's in this if statement
52:56 - will only happen
52:57 - if both of these things are true pretty
52:59 - straightforward that's how the and works
53:01 - alternatively there's an or
53:03 - and an orb will kind of do the opposite
53:05 - it will check if either the left or the
53:07 - right is true
53:08 - or both of them are true if any of those
53:10 - three things happen
53:12 - this is true this is true or both of
53:13 - them are true then what's in the if
53:14 - statement will run
53:16 - whereas with the and it has to be both
53:18 - of these being equal to true for what
53:19 - the
53:20 - what in the if statement is going to run
53:22 - or if what's in the if name is going to
53:23 - run sorry butchering my english
53:25 - okay so that's one of the win conditions
53:27 - for our user and then if that's the case
53:29 - we can just go ahead and say continue
53:31 - and we can go back up to the top of the
53:32 - while loop and keep going
53:34 - but we need to check the other wind
53:36 - conditions right and there's two more
53:37 - wind conditions
53:38 - let's go here and let's fix the
53:41 - indentation
53:43 - okay and we'll say if the user input now
53:46 - is equal to
53:47 - paper and the computer picked uh
53:51 - what is it rock then that means that we
53:53 - won right and so we would add one to the
53:55 - win and then the last one is we picked
53:58 - scissors and the computer picked
54:01 - paper sweet so the reason i'm doing this
54:03 - continue here is because after we've
54:04 - determined that we've won
54:06 - there's really no point in checking
54:07 - these other if statements so we could
54:09 - instead do these in l-ifs so i could say
54:12 - if
54:12 - l if elif and then actually i could
54:15 - remove all these continues and in fact
54:16 - let's do this
54:17 - and then we will go down here and we
54:19 - will say else
54:21 - and then what we would do here is say
54:23 - print
54:26 - u lost and then we will say
54:29 - computer wins okay plus equals one
54:33 - so the reason this works now is because
54:35 - we check if we won with the rock versus
54:37 - scissors we check
54:38 - we won with paper versus rock we check
54:40 - if we want to wear scissors versus paper
54:42 - and if none of those are true that means
54:43 - we didn't want win right there's no
54:44 - point in checking if the computer beat
54:46 - us in all the other
54:47 - scenarios we just need to check if our
54:49 - three win conditions were true
54:51 - if they are not true then we know that
54:52 - we lost and so we would print we lost
54:54 - and then we add our computer wins
54:56 - and this is an example of using multiple
54:57 - lf statements we'll check this one
54:59 - if it's false we'll check this one if
55:01 - it's false we'll check this one
55:02 - if it's false we run this if any of
55:04 - these are true we immediately stop and
55:06 - we do whatever is inside of here
55:08 - which is increment the user wins and
55:09 - print u1
55:11 - great so the last thing i'm going to say
55:12 - before i do goodbye is i'm just going to
55:15 - print out the number of user wins versus
55:17 - computer wins so i'm going to say
55:19 - the user or i'll say in this case u
55:23 - u1 comma user underscore wins
55:27 - times and then we'll print
55:32 - the computer one and then
55:35 - computer underscore wins times
55:38 - period great so hopefully that is all
55:42 - good let's quickly run through what
55:43 - we've done because we wrote a lot of
55:44 - code here relatively quickly as you can
55:46 - tell i'm kind of picking up the pace a
55:47 - little bit as we go through this
55:49 - so we have our user wins our computer
55:50 - wins we're importing random which we've
55:52 - already discussed we have our list first
55:54 - time we've seen this called
55:55 - options has our three values in it we
55:58 - have while true
55:59 - we have user input equals input and then
56:01 - we say type rock paper scissors or q
56:03 - to quit we make whatever they type in
56:05 - lowercase we check if the user inputted
56:08 - queue if they do we break we're done we
56:10 - stop the program
56:11 - if they didn't then we check if the user
56:13 - input is not in the options if it's not
56:15 - in the options that means they didn't
56:16 - type a valid rock paper or scissors
56:19 - and so we press or we go continue which
56:21 - means we're going to start the loop
56:22 - again
56:23 - we're going to ask them to type
56:24 - something in then what we do if they
56:26 - typed in something valid is we generate
56:27 - a random number between 0 and two
56:30 - uh this is the like what it stands for
56:32 - rock is zero paper is one so this
56:34 - is two we make our computer pick so
56:36 - computer pick is equal to
56:37 - options at whatever the index is of the
56:39 - random number
56:40 - we then say okay the computer picked
56:43 - this we then check
56:44 - if the user won based on what the
56:46 - computer picked right
56:48 - and uh yeah that's all good and then we
56:51 - increment computer wins or user wins
56:53 - and we will keep going until eventually
56:55 - the user hits q once we're done we'll
56:57 - break out of the while loop and we'll
56:58 - print
56:58 - these three things let's run it let's
57:01 - see if it works okay
57:02 - type rock paper scissors or q to quit
57:04 - let's just test q okay you won zero
57:06 - times the computer one zero times
57:07 - goodbye
57:08 - nice works okay let's actually type
57:10 - something let's go rock it says computer
57:12 - pick scissors
57:13 - you won nice okay type rock paper
57:15 - scissors or cue to quit
57:16 - let's go paper uh computer pick scissors
57:19 - you lost okay that sucks let's go
57:22 - uh scissors computer picked paper you
57:24 - want nice let's go rock
57:26 - okay and let's go q and then it says the
57:28 - computer one one time you won three
57:30 - times
57:30 - good bye all right so that is rock paper
57:33 - scissors
57:34 - keeping track of how many times both the
57:35 - user and the computer wins
57:37 - now we're gonna move on to the next
57:38 - project which is the choose your own
57:40 - adventure game
57:41 - alright so this next project is one of
57:43 - my all-time favorite beginner projects
57:45 - and that is because it's
57:47 - so customizable there's so much you can
57:49 - do with this i'm really only gonna talk
57:50 - about this for about five or ten minutes
57:52 - because
57:52 - this is up to you guys to make this kind
57:54 - of as big as you want
57:56 - so this is a choose your own adventure
57:57 - game and i guess the best thing to
57:59 - relate this to if you haven't heard of
58:00 - this before
58:01 - is kind of these children books and
58:02 - actually they have books that aren't
58:03 - children versions too but they're kind
58:05 - of like
58:05 - pick your own story books where you'll
58:07 - go to a page right and it will say like
58:09 - if you want to go left
58:10 - turn to page like 42 if you want to like
58:13 - swim across the river go to page 97
58:15 - whatever
58:16 - and then like it kind of brings you on
58:17 - all these different paths throughout the
58:19 - book
58:19 - based on decisions that you make so same
58:22 - thing here
58:22 - we're going to ask the user to make a
58:24 - bunch of different choices
58:26 - we'll start with something simple like
58:27 - do you want to play the game right and
58:28 - then if they say yes
58:29 - we'll say okay you know you come to some
58:30 - bridge do you want to cross it or do you
58:32 - want to swim underneath it
58:33 - and then based on what they say if they
58:35 - cross the bridge maybe we'll say okay
58:37 - you come to
58:38 - a dead end do you want to turn around or
58:39 - do you want to search the jungle
58:41 - whatever like you can be as creative as
58:42 - you want i'm just coming up with stuff
58:43 - at the top of my head
58:44 - but then if they had instead decided to
58:46 - swim under the bridge
58:47 - maybe we say like oh you know there was
58:49 - a crocodile and your your journey ended
58:51 - whatever
58:52 - so you guys can make it as complex as
58:54 - you want but i'll show you like the
58:56 - basic
58:56 - structure and kind of the nesting of
58:58 - statements and how it works
58:59 - so the first thing we're going to do is
59:01 - i'm actually going to ask the user for
59:02 - their name this is one this is something
59:03 - i don't usually do but i think this will
59:04 - be cool
59:05 - so i'm going to say name is
59:08 - equal to input i'm going to say type
59:12 - your name cool and then i'm going to say
59:15 - print and i'm going to welcome the user
59:17 - i'm going to say welcome
59:18 - comma name comma to this
59:23 - add venture exclamation point
59:26 - and then we'll actually get right into
59:28 - it and before i even ask them if they
59:29 - want to play
59:30 - what i will do is i will just say like
59:32 - ask them for a choice i'll say
59:33 - you come to a dirt road or something do
59:35 - you want to go left or right
59:36 - whatever so the first thing i'm going to
59:38 - say here is
59:40 - answer and lower cases is equal to
59:43 - input and i'll say
59:47 - you are on a
59:51 - dirt road it
59:54 - has come to an end and you
59:58 - can go left or right
60:02 - uh and then i will say which way would
60:05 - you like to go question mark
60:08 - okay so let's just go here and notice
60:11 - that it's doing this auto formatting you
60:13 - guys don't have to worry about
60:14 - this just my ide auto formats my code
60:16 - when i save it and so you can see it's
60:17 - kind of going on a new line
60:19 - uh don't worry about it you can just do
60:20 - yours in the same thing but anyways
60:21 - that's like my prompt you're on a dirt
60:23 - road it has come to an
60:24 - end and you can go left or right which
60:27 - way would you like to go and i'm
60:28 - expecting them to type in left or right
60:30 - so the first thing i'm going to do is
60:31 - i'm going to check if they typed left or
60:32 - right i'm going to say if
60:34 - answer is equal to left
60:37 - and actually before i do that i'm going
60:39 - to convert this input here
60:41 - two dot lower and i realized i kind of
60:43 - messed something up hopefully that fixed
60:44 - it okay
60:45 - so we're gonna say dot lower and let me
60:48 - add the space here between the question
60:50 - mark
60:51 - okay so answer equals equals left so if
60:53 - the answer equals left
60:54 - then we'll do something else otherwise
60:58 - uh we will actually we'll say l if
61:01 - answer is equal to right and then
61:04 - else we'll say print
61:10 - not a valid option you lose
61:14 - so i'm just going to make it so if they
61:15 - ever give us something that's not valid
61:16 - they just immediately lose the game okay
61:18 - so if the answer is equal to left then
61:21 - we need to pick what's going to happen
61:22 - when they go to the left if the answer
61:24 - is equal to right we need to decide
61:25 - what's going to happen if they go to the
61:26 - right
61:26 - so i'll start by kind of doing the left
61:28 - path and let me just put a print
61:29 - statement here so i don't get an
61:31 - error you'll notice that if you don't
61:33 - have something indented after it's
61:35 - expecting something to be indented it
61:36 - will like yell at you and be
61:38 - angry so you can just put an empty
61:39 - statement like print and that will kind
61:41 - of fix it
61:42 - okay so now what i'm going to do is i'm
61:44 - going to ask them another question
61:45 - i'm going to say answer and you can name
61:47 - these variables whatever you want maybe
61:48 - it would make more sense to name them
61:49 - like q2 or something whatever
61:51 - i'll say answer is equal to input
61:55 - and i'll say um okay like
61:59 - you come to a river
62:03 - and if you can walk
62:07 - around it or swim
62:10 - across and i'll say type
62:14 - walk to walk around
62:17 - and swim to swim across
62:20 - and make sure that when you guys do this
62:21 - you're kind of like uh
62:23 - you know telling the user what they need
62:25 - to type in because sometimes it's not
62:26 - intuitive on what they should be typing
62:28 - and so i always try to give them the
62:30 - option like tell them explicitly like
62:31 - what i'm expecting them to type so they
62:33 - don't give me an invalid option
62:35 - like not intentionally you know so now
62:37 - i'm going to check inside of here
62:39 - if the answer is equal to swim
62:42 - l if the answer is equal to walk
62:46 - and then else i will print not a valid
62:50 - option
62:50 - you lose right so we'll do that okay so
62:52 - now i need two things to happen here
62:56 - so print and print okay so i'm going to
62:58 - pause for a second
62:59 - hopefully you're getting the idea of
63:00 - what's going on here right if they go
63:01 - left
63:02 - i ask them a different question and then
63:04 - i check inside of this
63:06 - if statement what they answer for that
63:07 - next question and then i do something
63:09 - else
63:10 - whereas if they go right i'm going to
63:11 - ask them a different question and so
63:12 - it's cool because there's like all of
63:14 - these different paths that people can
63:15 - explore
63:16 - and like if they only go left at the
63:18 - beginning they're only exploring like
63:19 - half of the potential paths and then as
63:21 - soon as they go right there's
63:22 - all new different options now you could
63:24 - have the same options for
63:26 - different things they type right if they
63:28 - decide to go left or right
63:29 - you could in theory ask them the same
63:31 - question if they go left or if they go
63:33 - right
63:33 - but i like to do it differently i think
63:34 - that's more fun so let's just kind of
63:36 - continue on this path here
63:38 - let's say if the answer is equal to swim
63:40 - then i'll print um
63:42 - you swam across
63:47 - and were eaten by an
63:51 - alligator is that how you spell
63:52 - alligator maybe you guys can tell my
63:54 - spelling is not the best okay eaten
63:56 - eaten there you go buy an alligator nice
63:58 - now if they decide to walk across
64:00 - i'll say you walked for many miles
64:04 - ran out of water
64:08 - and you lost the game okay so both of
64:12 - these options here were inbound so if
64:14 - they decide to go left it doesn't matter
64:15 - what they chose they were just going to
64:16 - lose and so instead they have to go
64:17 - right
64:18 - and so we've kind of ended the path now
64:19 - on the left but if we wanted to
64:21 - maybe swim was like the correct answer
64:23 - quote unquote we could add another path
64:25 - here and we don't have to have them
64:27 - lose on one of these options i could add
64:29 - another path for walk too right
64:30 - like hopefully getting the idea you can
64:32 - just chain these kind of if statements
64:33 - in as far as you want
64:34 - so now let's do something for going
64:36 - right and actually before we do that
64:37 - let's let's test this out and let's make
64:38 - sure you guys understand what's going on
64:40 - here
64:41 - okay so type your name i'm gonna say tim
64:43 - says welcome tim to this adventure
64:44 - you're on a dirt road it has come to an
64:46 - end and you can go left or right which
64:48 - way would you like to go
64:49 - let's go left when i go left it says you
64:51 - come to a river you can walk around it
64:52 - or swim across type walk to walk around
64:54 - and swim to swim across you're gonna
64:56 - type swim
64:56 - it says you swam across and we're eaten
64:58 - by an alligator and then there you go
64:59 - boom
65:00 - you lose right okay so now let's go
65:03 - and do something for right so for write
65:05 - i'm gonna say answer
65:06 - is equal to input i'm going to say
65:10 - you come to a
65:13 - bridge it looks
65:17 - wobbly do you want
65:20 - to cross it or
65:24 - head back question mark and then the
65:27 - options i'll put here i'm just going to
65:28 - put them in brackets i'll say
65:30 - cross slash back to kind of really
65:32 - indicate hey
65:33 - that's the two things that you're
65:34 - supposed to be typing cross or back
65:36 - and then here i'm going to just copy
65:38 - this if else structure just so i can
65:39 - fill it in
65:40 - i'm going to say if the answer is equal
65:42 - to
65:43 - back if the answer is equal to cross
65:46 - and then i'll continue so now i'm going
65:48 - to say if answer equals back
65:51 - you go back to the um
65:54 - i don't know like main road whatever we
65:56 - can make this whatever you want
65:58 - now you can decide
66:02 - to drive forward i don't know drive
66:07 - to the left or go to the right or you
66:09 - know what we can make going back just
66:11 - just be the wrong option we'll just say
66:13 - you go back and lose i i don't think you
66:16 - guys need me to uh
66:17 - to give too much detail here because i'm
66:18 - having trouble coming up with this okay
66:20 - so we're going to say that crossing is
66:21 - the correct option
66:22 - so if they decide to cross then what
66:24 - we're going to do here
66:25 - is now we're going to ask them another
66:26 - question we're going to say answer is
66:28 - equal to input
66:29 - we're going to say you cross
66:32 - the bridge and
66:35 - meet a stranger do you talk to them
66:40 - and we'll say yes comma no
66:43 - question okay and then same thing here
66:45 - we can say if
66:46 - answer is equal to yes uh
66:50 - l if answer
66:53 - is equal oops is equal to no
66:57 - and then else we'll say not a valid
67:00 - option you lose so let me copy that
67:02 - okay not a valid option you lose and
67:04 - then here again we can decide what we
67:06 - want so we'll say
67:07 - print maybe yes is like the correct
67:09 - answer and it ends the game we'd say
67:11 - um you talk
67:14 - to the stranger and they give you gold
67:18 - whatever you win exclamation point
67:21 - uh otherwise no we could say print
67:25 - um you
67:28 - ignore the stranger
67:33 - if i could spell stranger correctly and
67:36 - they
67:36 - are offended and
67:39 - you lose okay so again i i'm just like
67:43 - randomly coming up with this stuff i'm
67:44 - sure you guys are laughing at the
67:46 - options that i'm i'm going with here but
67:47 - i'm just trying to show you the
67:48 - structure of this program
67:49 - and kind of how like the nesting works
67:51 - that you can make this as advanced as
67:53 - you want
67:54 - so now we've kind of implemented
67:55 - something for the right so it asks you a
67:56 - question
67:57 - uh obviously you lose if you go back uh
67:59 - if you go to decide to cross then you're
68:01 - asked another question you cross the
68:02 - bridge meet a stranger do you talk to
68:03 - them
68:04 - if the answer is yes you lose are you in
68:06 - if the answer's no you lose
68:07 - if you answer something that's not one
68:08 - of those then what do you call it
68:11 - you lose and then of course if you
68:13 - wanted to keep going from here rather
68:15 - than telling them they lose or they win
68:16 - you would just ask them another question
68:17 - and you would keep doing this
68:19 - and keep nesting this if and else and
68:20 - you can make multiple options too you
68:22 - don't have to just do
68:23 - two options you can make it so they
68:24 - could give you three options you can
68:26 - make it so that you store one of their
68:27 - options in a variable like name right
68:30 - and then you use that variable later on
68:31 - like maybe they picked up
68:33 - a i don't know like a weapon or
68:34 - something really early and if the weapon
68:36 - they chose really early
68:37 - is not correct when they go down a
68:38 - certain path then maybe they lose
68:40 - whereas if it was correct then maybe
68:41 - they can continue on or something like
68:42 - that
68:43 - and so lastly i'm going to say print
68:46 - thank you for trying
68:48 - comma and then this is going to be their
68:50 - name okay
68:51 - so let's run this and i'll just go
68:52 - through a few of the paths but that's
68:53 - pretty much gonna wrap up this game
68:55 - there's not really much more to show you
68:56 - uh this is just a cool one and i always
68:58 - find this fun and obviously you guys can
68:59 - come up with better stories than i can
69:01 - so type your name and say tim welcome
69:03 - tim this adventure you're on a dirt road
69:05 - just come to an end you can go left or
69:06 - right i'm going to go right
69:08 - okay you come to a bridge it looks
69:09 - wobbly do you want to cross their head
69:10 - back
69:12 - i'm going to cross you cross the bridge
69:14 - and meet a stranger do you talk to them
69:15 - no says you ignore the stranger and
69:17 - they're offended and you lose thank you
69:18 - for trying tim
69:19 - right there you go then we could try
69:21 - this again type your name
69:22 - tim uh you're on dirt road let's go left
69:26 - right you come to river let's walk and
69:28 - it says you walked for many miles right
69:30 - under water and you've lost the game
69:31 - i'm not going to go through all the
69:32 - options i think you guys get the idea
69:33 - now that is the choose your own
69:35 - adventure game
69:35 - again this code will be linked in the
69:37 - description if you want to download it
69:38 - but
69:39 - this is kind of the template use the if
69:41 - elif and l structure
69:43 - and you know make this as advanced and
69:44 - complex as you want
69:46 - now let's move on to the last project
69:48 - which is the password
69:49 - manager all right so now we're moving on
69:50 - to the last project which is a password
69:53 - manager
69:54 - now the point of this program is to kind
69:55 - of organize and store your passwords
69:57 - so we're going to store all of the
69:58 - passwords along with the username of the
70:00 - account they're associated with
70:02 - in a text file but we are not going to
70:04 - store the passwords in plain text
70:05 - we're going to encrypt the passwords now
70:08 - even though we're encrypting these
70:09 - passwords which means
70:10 - they're going to need a kind of password
70:12 - to be able to decrypt them so there's
70:13 - like a master password for all of the
70:15 - passwords
70:16 - this is not a secure way of storing your
70:18 - passwords do not rely on this for
70:20 - anything other than like a fun python
70:22 - project
70:22 - and i personally would not recommend
70:24 - storing at least any of your very
70:25 - sensitive passwords
70:26 - uh in this method it's just like a cool
70:28 - thing and i wanted to show you how to do
70:29 - it and it's kind of a more advanced
70:31 - project out of the five that we've done
70:34 - so the first thing i'm going to do here
70:35 - is i'm going to
70:36 - going to write the code that's allowing
70:37 - us to actually ask the user whether they
70:39 - want to list out their passwords
70:41 - or whether they want to add a new one
70:42 - and we're going to store all of these in
70:44 - a text file
70:45 - so i'll do this project first without
70:46 - encrypting any of the passwords and then
70:48 - we'll go in and encrypt them
70:50 - so the first thing that we need to do is
70:51 - ask the user for like a master password
70:54 - so we're going to say pwd is equal to
70:56 - input
70:57 - and we'll say what is the master
71:01 - password question mark now we're not
71:04 - actually going to validate this password
71:05 - as equal to something
71:07 - we're going to use this password to
71:08 - encrypt our
71:10 - our passwords so if they type in the
71:11 - wrong password here it's still going to
71:13 - work like the program will operate but
71:15 - it won't show them the correct password
71:17 - and you'll see how that means when we
71:18 - kind of get later into the
71:20 - into the video uh regardless what i'm
71:22 - going to do now is ask them what mode
71:23 - they want to go in so whether they want
71:25 - to add a new password or whether they
71:27 - want to view their passwords so i'm
71:28 - going to say
71:30 - mode is equal to input and we'll say
71:34 - would you like to add a
71:37 - new password or view
71:42 - existing ones question mark and then the
71:45 - two inputs i'll allow will be i guess
71:48 - view
71:49 - and add okay so that's what i'm
71:52 - expecting them to type in
71:54 - now what i'm going to say is if mode is
71:56 - equal to
71:58 - view we will do something otherwise
72:01 - l if mode is is
72:04 - equal to what i say add
72:08 - we will do something else otherwise else
72:11 - will say
72:12 - print
72:15 - in valid mode and i'm going to take all
72:17 - of this i'm going to put this inside of
72:18 - a while loop so i'm going to say
72:19 - while true because we'll allow them to
72:22 - like add a password then view them and
72:23 - like so on and so forth
72:24 - and so in this else here i'll just say
72:26 - invalid mode and then i'll say
72:28 - continue and what this will do will
72:30 - bring them to the top of the wall
72:31 - and i'm also going to add something here
72:33 - that says press
72:35 - q to quit and then i'm going to convert
72:38 - all of this to dot
72:39 - lower and then i'm going to check at the
72:42 - very top here
72:43 - i'm going to say if mode equals equals q
72:47 - then break the while loop okay sweet and
72:49 - then we could make this an lif but we
72:51 - don't have to make it in life since we
72:52 - have a break here uh if this is true it
72:54 - just won't even bother checking these
72:56 - it's up to you but i'm not going to add
72:57 - the the elif
72:59 - okay so now that we have this what i'm
73:01 - going to do is show you something called
73:02 - a function so i'm going to create two
73:04 - functions here i'm going to say define
73:06 - view and i'm going to say pass and then
73:09 - i'm going to say
73:09 - define and this is going to be at
73:13 - okay so what a function is is an
73:14 - executable reusable block of code
73:17 - so the way you call a function is you
73:20 - write the name of it which is this okay
73:22 - and then two parentheses so the basic
73:23 - syntax is you write def
73:25 - to define a new function space name of
73:27 - the function
73:28 - open and closing parenthesis and then
73:30 - any parameters that you want inside of
73:32 - here i'm not going to really talk about
73:33 - what that is because
73:34 - i'm not trying to teach functions here
73:35 - i'm just trying to show you how we can
73:36 - kind of split our code into different
73:38 - sections
73:38 - and anyways the way you call a function
73:40 - is by its name and then the open and
73:41 - closing parentheses
73:43 - so if i put say like print
73:46 - tim inside of here then i could call
73:48 - this function a bunch of times
73:50 - and every single time i call this
73:52 - function it would do whatever is inside
73:53 - of here which would print
73:55 - tim so if i had you know print him twice
73:57 - every single time i call the function
73:59 - it's going to print out tim
74:00 - two times whatever is indented inside of
74:02 - here just happens when you call
74:04 - the function pretty straightforward but
74:06 - the point of me creating these two
74:07 - functions
74:07 - is that rather than writing all of the
74:09 - code related to the view mode and the
74:10 - add mode in the while loop
74:12 - i'm going to put them in this function
74:13 - so it's a little bit more organized and
74:14 - easier for me to kind of separate my
74:16 - program
74:17 - so i'm just going to have pass inside of
74:19 - here right now now pass is a keyword
74:21 - that literally does nothing
74:22 - it is just there to make it so you don't
74:24 - get any like indentation errors
74:26 - because you need to have something
74:27 - indented after the colon and so for now
74:29 - we're just going to write pass and you
74:30 - can see we've done that here too
74:32 - so now instead of just using pass i'm
74:34 - going to call the view function
74:36 - i'm going to call the add function so
74:38 - now
74:39 - depending on what mode you select it's
74:40 - going to call these two functions which
74:42 - will then perform the operations for
74:44 - that mode
74:45 - it's just a cleaner way to write the
74:46 - code it makes a little bit more
74:47 - organized
74:48 - okay so let's start with the the add
74:50 - function
74:51 - what i want to do is create a new file
74:53 - if the file storing our password just
74:55 - doesn't already exist
74:56 - and add the password into it so the
74:59 - first thing i need to do is get
75:00 - the user account or whatever the
75:02 - username and then the password and then
75:04 - i want to add it into the file so i'm
75:05 - going to say
75:07 - i guess name is equal to input and we'll
75:10 - say
75:11 - account name like that and then we'll
75:14 - say pwd which stands for password is
75:16 - equal to and actually sorry this should
75:17 - just say
75:18 - password because we already have pwd up
75:20 - here and in fact let's call this
75:22 - master underscore pwd and then we can
75:25 - call this pwd
75:26 - so pwd is equal to input and we'll say
75:30 - password colon like that so now they're
75:32 - inputting their account name and their
75:33 - password
75:34 - now what i want to do is open a file or
75:36 - create a file if it doesn't already
75:37 - exist and add this password in
75:40 - so i'll explain what this is doing in a
75:41 - second but i'm going to say with open
75:42 - the name of my file which in this case
75:44 - is going to be
75:47 - passwords.txt we're going to just use a
75:49 - text file for now
75:50 - then we're going to say comma and then
75:51 - we need to define the mode to open this
75:53 - file with now the mode we're going to
75:55 - use is a which stands for append
75:57 - we're going to say as f and now i'll
75:59 - explain what i just did
76:00 - so when you use this with thing right
76:02 - here this allows you to then do some
76:04 - things indented after it and the point
76:06 - of this width
76:07 - when you're opening a file specifically
76:08 - is that as soon as you are done doing
76:10 - all of the operations with the file
76:12 - since we use this with it will
76:14 - automatically close the file for us
76:16 - so you can open a file like this you can
76:18 - say file equals open
76:20 - and there you go now you have file but
76:22 - the thing is if you do this you need to
76:23 - make sure you manually
76:24 - close the file after you open it because
76:27 - if you don't do that your python process
76:29 - will still be kind of like
76:30 - holding on to and using this file and
76:32 - it's going to cause problems if you try
76:34 - to open this file somewhere else
76:35 - and so it's just better and safer to
76:37 - kind of use this with keyword
76:39 - because now you don't have to manually
76:40 - close it it will automatically close the
76:41 - file for you
76:43 - so anyways i'm going to say with
76:44 - openpasswords.txt in
76:46 - a mode now so this is the name of the
76:48 - file the next thing is the mode to open
76:49 - the file in
76:50 - now there's a bunch of different modes
76:52 - the main ones are w
76:54 - r and a now w means write and what this
76:57 - will do is create a new file or
76:59 - override this file if it already exists
77:02 - very important you understand this if
77:03 - passwords.txt already exists
77:05 - and you open in w mode it will clear
77:08 - that file and make an entirely new one
77:09 - so only use w mode if you want to always
77:12 - override a file that potentially already
77:13 - exists
77:14 - okay then there's r mode this is just
77:16 - simply read mode you can't write
77:18 - anything into the file if you open it in
77:19 - read mode
77:20 - all you can do is just read the file
77:22 - that's r mode and obviously this is not
77:23 - going to destroy a file if it already
77:25 - exists
77:26 - in fact there'll be a problem if you try
77:27 - to open the file and it doesn't exist in
77:29 - armor then you have a mode this is
77:31 - append mode
77:32 - this is probably the most flexible mode
77:34 - what this allows you to do is add
77:35 - something to the end of an existing file
77:38 - and create a new file if that file does
77:41 - not exist
77:42 - so if passwords.txt does not exist a new
77:44 - file will be created called
77:45 - passwords.txt
77:47 - and then we can write to the file if
77:49 - passwords.txt already exists
77:51 - we are able to write to the file and
77:53 - read the file
77:54 - from the very end uh so sorry we can
77:57 - write to the file from the very end
77:58 - and we can just read the entire file
78:00 - when we open it in a mode
78:01 - and so for adding something we're gonna
78:03 - open in a mode because if it exists we
78:05 - append to the end
78:06 - if it doesn't we create it awesome so
78:08 - now what we're gonna do
78:09 - is say f dot write that's the name of
78:12 - our file because we said as
78:13 - f and then we are going to write in the
78:16 - name
78:17 - plus the pipe plus pwd
78:20 - so what this is going to do is take the
78:21 - name it's going to separate
78:23 - the password with the pipe operator and
78:25 - then it's going to put the password
78:27 - and then we will have user and password
78:29 - inside of the file
78:31 - so let's actually try this out let me
78:32 - run this
78:34 - you can see it says what is the master
78:35 - password i just type whatever for now
78:37 - just type hello
78:38 - and would you like to add a new password
78:40 - or view existing ones view comma add
78:42 - press q to quit okay i'm going to type
78:44 - add and it says account name let's just
78:46 - go
78:47 - tim password let's go is underscore
78:49 - great
78:51 - okay so now i'm just going to quit
78:52 - notice this passwords.txt file has been
78:54 - created
78:55 - if i open it i now have tim and is great
78:57 - and if i were to do this again it would
78:59 - add the next line in so actually let me
79:00 - rerun this
79:02 - let me say add account name
79:05 - joe password is billy and then notice it
79:08 - gets added in
79:09 - here the thing is though it got added on
79:11 - the same line
79:12 - and i don't want this to be added in the
79:14 - same line and so what i'm going to do
79:16 - is i'm going to quit here and i'm going
79:17 - to make it so that i go to the next line
79:19 - after i add each password and the way i
79:21 - do that is i add what's known as a line
79:23 - break
79:24 - i think this is actually called a
79:25 - carriage return maybe a line break at
79:27 - the end of the line so every single time
79:29 - i add a line
79:30 - i tack on this little invisible
79:32 - character backslash n this won't
79:33 - actually appear on the line you won't
79:34 - see this on the line
79:36 - but we will add that on and what that
79:38 - tells the text editor to do
79:40 - is to go to the next line so now the
79:42 - next time we write something in it will
79:43 - be on the next line so
79:45 - if i look at this and we run this now
79:48 - add tim a and
79:51 - 5432 and now if you look here it goes to
79:55 - the next
79:56 - line okay so hopefully that makes sense
79:58 - but uh there you go i'm just going to
79:59 - delete everything in that file
80:01 - i'm going to quit this and now we are
80:03 - able to add passwords and usernames in
80:05 - to the file what i'm going to do now is
80:08 - make it so that we can view all of the
80:09 - passwords so to view all of the
80:10 - passwords i need to again open this file
80:12 - so i'm going to copy this
80:14 - i'm going to say with open and then
80:17 - this is going to be passwords.txt a as f
80:20 - i'm going to change this from a to br
80:22 - because i don't want to potentially
80:23 - create a new file anything like that i
80:25 - just want to read
80:26 - the existing file and then what i'm
80:28 - going to do is i'm going to loop
80:29 - through the lines of the file and just
80:31 - print them out so i'm going to say 4
80:33 - line in f i'm going to say dot read and
80:36 - actually read lines is what i want to do
80:38 - now what read lines is going to do is
80:40 - just exactly what it says it's going to
80:42 - take the file sorry this should be f
80:44 - it's going to read all the lines for it
80:46 - and then what i can do is use a for loop
80:47 - to get all of the lines of the file so
80:49 - let's just look at this i'm going to say
80:51 - print
80:52 - line and let's just see what happens now
80:54 - if we go to view mode
80:55 - and then i'll kind of walk through this
80:57 - more so let's run
80:59 - master password doesn't matter let's say
81:01 - view
81:02 - and then oh there's nothing in the file
81:04 - so it didn't show us anything okay so
81:05 - let's go add
81:07 - account name let's go tim password
81:10 - test and now let's say view and then
81:13 - notice it shows
81:14 - us tim and test but it's printing a new
81:17 - line after it shows us this account name
81:20 - and
81:20 - this password and so i'm going to show
81:21 - you how we can kind of fix this now
81:24 - so the thing is remember how i told you
81:26 - were adding this kind of invisible
81:27 - backslash at the carriage return
81:29 - now when we read the file we actually
81:31 - read in that carriage return
81:33 - and so we need to strip this carriage
81:35 - return from our line
81:37 - and the way we do that is we use this
81:38 - thing called r strip now what our strip
81:40 - will do
81:41 - is it will strip off the carriage return
81:44 - from
81:44 - our line so that's all you have to know
81:46 - just r strip that's what it will do
81:48 - there's also something called strip
81:49 - and strip will strip off the carriage
81:51 - return as well but our strip is like
81:52 - more specifically
81:53 - exactly for this so what i'm going to do
81:55 - now is run the file or run the program
81:58 - master password doesn't matter i'm going
82:01 - to say view
82:02 - and now notice that it's not printing
82:03 - that new line after we print this line
82:06 - because we stripped off the character
82:08 - chain great so now the thing is though
82:10 - i'm printing tim pipe test i kind of
82:13 - want to figure out or separate
82:15 - the username from the password so how
82:17 - are we going to do that
82:18 - well i'm going to say that my data
82:21 - is equal to line.rstrip and then i'm
82:23 - actually going to
82:24 - split this data so i'm going to say my
82:28 - user and pass is equal
82:31 - to and sorry this should be pass w is
82:34 - equal to
82:35 - data dot split at and this is going to
82:38 - be a pipe operator now this might seem
82:40 - really confusing
82:41 - because again this is a beginner project
82:42 - i know a lot of you guys haven't seen
82:43 - the syntax before
82:45 - what dot split will do is it will take a
82:47 - string
82:48 - it will look for this character right
82:50 - here and it will split the string into a
82:52 - bunch of different items
82:54 - uh every single time one of these
82:55 - characters is found so if you had like
82:57 - hello
82:58 - pipe tim type yes pipe two whatever
83:02 - what would happen is this uh data.split
83:05 - would
83:06 - actually return to you the following it
83:07 - will return to a list that says hello
83:10 - tim yes and two so remove all of these
83:13 - pipe characters
83:14 - and it would give you all of the unique
83:16 - strings that are between these pipe
83:18 - characters
83:19 - in a list format and so to access these
83:21 - different elements you would use index 0
83:23 - 1
83:23 - 2 3 so on and so forth now the thing is
83:26 - we know we're only ever going to have
83:28 - one pipe operator right unless the the
83:31 - password or the username contains a pipe
83:32 - operator but we're just going to assume
83:34 - that it doesn't contain a pipe operator
83:36 - just to make our life a little bit
83:37 - easier
83:38 - if it did contain a pipe operator
83:39 - there'd be some more steps we have to do
83:41 - i'm not going to do them for right now
83:42 - anyways we know we're only going to have
83:44 - one pipe operator
83:46 - which means the list that's going to be
83:47 - returned to us will only have
83:49 - two elements in it in fact it will
83:50 - always have two elements in it
83:52 - so what that means is that we can
83:53 - actually just grab both of those two
83:55 - elements by saying
83:56 - user comma pass w so when you do
83:59 - something like
84:00 - user comma pass w this assigns the first
84:03 - element in the list to user
84:05 - and the second element in the list to
84:06 - pass w and since we know our list always
84:08 - has two elements
84:09 - that means we can do this right whereas
84:10 - if we had three elements we would then
84:12 - have to add another variable right
84:14 - and then x would be assigned to x
84:17 - hopefully that makes sense but that's
84:18 - why we can do what we're doing and
84:19 - that's kind of what the split operator
84:21 - does
84:21 - so now what i'm going to do is i'm going
84:23 - to print out
84:25 - user colon comma user
84:28 - and then password cola comma
84:31 - password or passw right so now it'll
84:34 - look a little bit nicer
84:35 - so let's go ahead and try this i'm going
84:37 - to quit this program
84:38 - i'm going to rerun it it's going to say
84:40 - what is the master password
84:42 - say test i'm going to view so now when i
84:45 - view it says user tim
84:46 - password test and i think i should do
84:48 - like a separator between the user and
84:49 - the password and so what i'm going to do
84:51 - is just add
84:52 - a comma like that
84:55 - okay so now if we run this let's quit
84:57 - let's rerun
84:58 - master password test would you like to
85:00 - add a new password i'm going to say
85:03 - view it says user tim comma password
85:06 - test
85:06 - and there you go and we could actually
85:07 - even split this up with a pipe operator
85:09 - i think that will look cleaner
85:11 - i'm not going to run it now but we'll do
85:12 - with the pipe sweet so now
85:15 - we're able to add passwords and we're
85:16 - able to view them but the problem is
85:18 - i can just look at this file and i can
85:19 - see what the password is and well that's
85:21 - not very good
85:22 - we don't really want to do that so we
85:24 - need to encrypt these passwords
85:25 - all right so how do we encrypt a
85:27 - password well this is where it gets a
85:28 - little bit more difficult that's why
85:29 - i've kind of
85:30 - waited until this point to do the
85:31 - encryption so you guys could at least
85:32 - follow along with this part see how to
85:34 - write to files read from files all that
85:35 - kind of stuff there
85:37 - so the way that you encrypt a password
85:39 - we could write a manual encryption
85:41 - algorithm but i'm not going to do that
85:42 - that's a bit beyond the scope of this
85:43 - tutorial
85:44 - is we use a module by someone way
85:46 - smarter than all of us who knows how to
85:48 - do encryption
85:49 - and the way that we use this module is
85:51 - we need to install it so remember at the
85:52 - beginning of the video i was telling you
85:53 - when we imported random
85:55 - then hey we there's also other modules
85:56 - that are built by random people
85:58 - right uh that we can use but the thing
86:00 - is we have to install them because
86:02 - they're not by default install with
86:03 - python
86:04 - so this is where a lot of you are
86:05 - probably gonna have problems if you
86:06 - haven't done this before but open up
86:08 - your terminal or your command prompt
86:10 - depending on your operating system
86:11 - doesn't matter which one
86:12 - and just type pip install and then type
86:17 - criptography if i can spell it like that
86:20 - pip install cryptography just press
86:22 - enter and pray that this works you
86:25 - now if this doesn't work for you don't
86:26 - worry i'm going to show you how to fix
86:27 - this but for some of you that should
86:29 - have worked
86:29 - if that works for you you're good you
86:31 - can kind of skip probably the next
86:32 - minute of this video because i'm just
86:33 - going to explain how to fix this
86:35 - if this doesn't work for you try the
86:36 - following command okay pip
86:38 - 3 install cryptography pip3 install
86:41 - cryptography press enter
86:42 - see if that works if that doesn't work
86:44 - for you try python hyphen
86:46 - m pip install cryptography
86:50 - if that doesn't work for you try python
86:52 - 3 hyphen m
86:53 - pip install cryptography if none of
86:55 - those work for you this means that pip
86:57 - is not installed on your system
86:58 - pip is actually a recursive acronym that
87:01 - stands for pip
87:02 - installs packages and well what it does
87:05 - is
87:06 - it installs packages for you and by
87:07 - default when you install python it's not
87:09 - included in the installation i don't
87:10 - know why they don't just include it by
87:11 - default you have to like check a little
87:13 - box to say to install it
87:14 - so you could just reinstall python and
87:16 - check that box that says fix pip
87:18 - or you can follow the two videos that i
87:20 - have that are linked in the description
87:22 - one for mac one for windows showing you
87:24 - how to fix this command now they're not
87:25 - directly called like how to fix pip
87:27 - they show you how to install a module
87:28 - called pi game but when it comes to
87:30 - installing the pi game thing
87:32 - just instead of doing pi game do do
87:34 - cryptography okay
87:35 - so you need to install this cryptography
87:37 - cryptography module sorry
87:39 - once you have that installed we're good
87:41 - to go if you know what a python
87:42 - interpreter is and you have multiple on
87:44 - your system this is going to be a bit
87:45 - more complicated you need to make sure
87:46 - you're using the right python
87:48 - interpreter
87:49 - when you're running your code the one
87:50 - that you install cryptography into
87:52 - okay so at this point i'm going to
87:54 - assume you've successfully installed
87:56 - cryptography
87:57 - once you've done that what you need to
87:58 - do is import it so you're going to say
88:00 - from
88:01 - and then cryptography like that dot
88:04 - and you're going to type this thing
88:06 - called fernet
88:07 - uh yeah fernet like that and then you're
88:09 - going to import
88:11 - furniture now i'm looking at a cheat
88:12 - sheet i have because this is not
88:14 - something i do very often so i don't
88:15 - have this memorized
88:16 - but this is a module that is going to
88:18 - allow you to
88:20 - encrypt text essentially now the first
88:22 - thing that we need to do when we use
88:24 - this
88:24 - is we need to define what's known as a
88:26 - key so essentially what this is going to
88:28 - do for you and i'm not going to talk
88:29 - about it too much
88:30 - is it is going to take a string of text
88:33 - and using a key turn it into a
88:35 - completely kind of random string of text
88:37 - that you cannot get back to the original
88:40 - text from without knowing the key
88:42 - now this key is something that we're
88:44 - going to combine
88:45 - with our master password so imagine you
88:47 - have this key okay and then we have our
88:49 - password
88:50 - so the key plus this password is what
88:54 - we're going to use to encrypt our text
88:56 - now that means that if you type in the
88:58 - wrong password when you go to decrypt
89:00 - the text
89:00 - what's going to happen is you're going
89:01 - to get something that makes no sense
89:03 - it's not going to be the original text
89:04 - because you need
89:05 - the key plus the password to be able to
89:08 - get back to the original text
89:10 - so it's kind of key plus password plus
89:12 - you know
89:13 - text to encrypt
89:16 - and then that equals like random text
89:19 - okay
89:20 - and then you have random text plus key
89:23 - plus password equals and then
89:26 - text to encrypt now this is obviously
89:29 - like a vast
89:30 - simplification of what's going on here
89:32 - but that's kind of what we're going to
89:33 - do with this module so the master
89:35 - password in combination with the key
89:36 - that we're going to store
89:38 - will be able to encrypt and decrypt our
89:40 - text if you type in the wrong master
89:41 - password
89:42 - you will have a wrong decrypted text
89:45 - okay
89:46 - so what we need to do is write two
89:47 - functions one function that can create a
89:49 - key for us and one function that can
89:51 - store a key
89:52 - so i'm or sorry retrieve a key so i'm
89:54 - going to say define
89:55 - right underscore key i'm just copying
89:58 - this from my sheet over here
89:59 - that i have on my other monitor i'm
90:01 - going to say key is equal to furnet
90:03 - dot and then generate underscore key
90:06 - i'm going to say with open and i'm going
90:09 - to say
90:09 - key dot key this is a key file and then
90:12 - wb this stands for write
90:14 - bytes mode as key underscore file
90:18 - and then i'm going to say key underscore
90:20 - file dot write
90:22 - key okay so what this is doing is going
90:25 - to open a file
90:26 - it's going to create this file called
90:28 - key dot key
90:29 - in wb mode which means write in bytes
90:31 - you don't really have to know what that
90:32 - means it's just a special file
90:34 - format then you press as key file
90:37 - and or sorry as key file and then key
90:39 - file.right and you're going to write in
90:40 - this key that was generated by this
90:42 - thing called fernet okay
90:44 - that's what we're using up here that
90:45 - we've imported so you're going to write
90:47 - or sorry you're going to run this
90:48 - function one time and when you run this
90:50 - function one time it's going to create
90:52 - this key file for you so let me show you
90:54 - when i just call
90:55 - right key here after i input the master
90:59 - password it will then create this so
91:01 - let's run this and just type some random
91:04 - thing
91:04 - and then notice here we get this key
91:06 - file okay and inside of here you have
91:08 - this key
91:09 - boom good now remove the call to write
91:12 - key
91:13 - you can keep this function in if you
91:14 - want you don't need it anymore because
91:15 - you already have the key
91:17 - and so what i'm going to do is i'm going
91:18 - to comment it out so to do a multi-line
91:21 - comment in python use three
91:23 - quotation marks single or double just
91:24 - make sure the same on both side
91:26 - you do three at the start of the comment
91:27 - three at the end and so now i've
91:29 - commented out this function to make sure
91:30 - i don't use it again
91:31 - because if i use it again it's going to
91:33 - be a problem okay
91:35 - now that we've done that we need a
91:36 - function to load this key so in a
91:38 - similar way actually i'm just going to
91:39 - copy this
91:40 - i'm going to change this now to be load
91:42 - key
91:44 - like that and actually i probably
91:47 - shouldn't have copied that i'm just
91:48 - going to say return
91:50 - open and then this is going to be key
91:53 - dot key and then dot read and the mode
91:57 - is going to be
91:58 - rb mode now the thing is i need to take
92:01 - this here
92:02 - i need to say file is equal to open
92:06 - i'm then going to say file dot read
92:09 - i'm going to store this in key and then
92:13 - i'm going to say file
92:14 - dot close just to remind you that you
92:16 - got to close your file every time you
92:17 - open it
92:18 - okay so i'm opening the file in write or
92:21 - sorry
92:21 - read slash bytes mode so it's reading
92:24 - bytes i'm then going to read the file
92:26 - i'm then closing the file and then i'm
92:27 - returning the key again you don't really
92:29 - have to understand exactly how this is
92:30 - working
92:31 - this is just part of the decryption
92:32 - stuff okay so now we have the key
92:34 - so now that we have the key what we're
92:36 - going to do at the top of our program
92:38 - here is we're going to load it we're
92:39 - going to say key is equal to load
92:40 - underscore key which means this function
92:43 - needs to go above where i'm calling so
92:46 - this is another interesting thing let me
92:48 - copy this right key as well and put it
92:50 - up here
92:51 - whenever you want to use a function it
92:52 - needs to be defined before you use it so
92:54 - i couldn't have this function defined
92:56 - below this line
92:58 - if i did that that would mean that i
93:00 - wouldn't be able to use this function
93:01 - because it wasn't yet created
93:03 - when i tried to use it so i got to
93:04 - create it first then i can use it
93:06 - obviously
93:07 - okay so now that we have that what i'm
93:09 - gonna say is
93:11 - uh fur is equal to fernet
93:14 - i'm going to pass key now this is just
93:17 - initializing this kind of encryption
93:18 - module so you're writing fernat you're
93:20 - gonna pass it
93:21 - the key okay so actually i'm realizing i
93:23 - made a mistake here i just got to take
93:24 - this stuff and i got to put this below
93:26 - the master password so i'm going to say
93:28 - master password then key equals low key
93:30 - for equals for net key
93:32 - but then i'm going to change my key to
93:34 - be key is equal to load key plus
93:37 - the master password two bytes now
93:40 - you probably don't know what this means
93:42 - uh bytes
93:43 - is kind of a different way of storing
93:45 - information you've probably heard of
93:46 - bits and bytes before not
93:47 - the snack but like in terms of uh in
93:50 - terms of computing right you have bit
93:51 - and then you have bytes and well
93:53 - regardless
93:54 - we have our key in bytes and so we need
93:55 - to convert our master password into
93:57 - bytes
93:58 - so that this works so we can add this
94:00 - together now just like when you add two
94:02 - strings together that's exactly what's
94:03 - happening here we're taking the key
94:04 - which is in this file
94:06 - and we're just adding this master
94:08 - password in its bytes format to this key
94:10 - and then
94:10 - using that as the actual key okay
94:13 - hopefully that's clear
94:14 - that's like a lot of the hard stuff now
94:16 - encrypting stuff is really easy so what
94:17 - i'm going to do now
94:18 - is when i go ahead and write my password
94:21 - i'm going to first convert this
94:23 - password into its encrypted version so
94:26 - i'm going to say
94:27 - fur dot and then encrypt and i'm just
94:30 - going to surround my password with that
94:32 - but first i need to encode my password
94:35 - now the reason i need to encode this is
94:37 - because
94:37 - encoding my password will convert this
94:39 - into bytes
94:40 - and actually i'm realizing here that
94:42 - this is going to be better i'm going to
94:44 - say
94:45 - dot masterpassword.encode rather than
94:46 - dot bytes again all encode does is it
94:49 - takes your string
94:50 - turns it into bytes and so same thing
94:52 - here i'm taking my password i'm turning
94:54 - it into bytes with dotting code
94:55 - and then i'm encrypting it and i'm going
94:57 - to store that beside the name
95:00 - and i also realize that now i need to
95:02 - convert this to a string so i'm going to
95:04 - say string
95:05 - fur.encrypt pwd.encode
95:08 - and this will now encrypt and encode our
95:11 - password okay
95:13 - so now when we store these passwords
95:15 - they should be stored in an encrypted
95:16 - format so now the thing is we need to
95:18 - decrypt them when we show them so to do
95:20 - that
95:20 - is going to be literally the exact same
95:22 - thing we just had here so i'm going to
95:24 - copy this except instead of
95:25 - encrypt it's going to be decrypt okay so
95:28 - i'm going to say decrypt like that
95:29 - and then instead of pwd this is going to
95:32 - be uh
95:33 - pass w okay so i'm hoping this is going
95:37 - to work i have a feeling it's not i
95:38 - think i made a small mistake here but
95:40 - we'll worry about that when we get to it
95:41 - okay so now we should hopefully be
95:43 - storing encrypted information
95:44 - and reading non-encrypted information
95:46 - let me go in passwords and let me delete
95:48 - this
95:49 - because that is not encrypted and so
95:50 - that's going to give us a problem right
95:51 - now
95:52 - and let's go here and let me rerun this
95:54 - app
95:55 - okay what is the master password we now
95:57 - need to pick the master password that we
95:59 - want to use to encrypt our data so i'm
96:00 - just going to make mine tim
96:02 - makers whatever you want would you like
96:03 - to add a new password yes
96:05 - want to add account name we're going to
96:07 - say maybe just like facebook
96:09 - password will say tim is great
96:12 - okay would you like to add a new
96:13 - password or view an existing one i'm
96:15 - going to say view
96:16 - and then we get a prom it says invalid
96:18 - token okay so let me have a look here
96:20 - and see what's wrong but if we go to
96:21 - passwords.txt
96:22 - you can see that we are storing this in
96:26 - the file and now i've actually already
96:27 - determined what's wrong but uh
96:29 - let me just collect my thoughts and i'll
96:30 - be right back so i've realized the
96:31 - problem here and it is that we are
96:33 - writing in this
96:34 - b uh what is it i guess this is a
96:36 - quotation mark and then
96:39 - another quotation mark here and we can't
96:41 - be doing that so i'm actually going to
96:42 - clear this file
96:43 - so the thing here in python and this is
96:45 - i guess i can teach you about bytes now
96:46 - when you write a b and then you have uh
96:49 - something after this like i say
96:50 - b and then hello this is a byte string
96:53 - this is different than the string hello
96:55 - when you have this little b
96:56 - before this means bytes so the thing is
96:58 - we were writing in this little b
97:00 - and we don't want to do that because
97:01 - when we do that that means when we try
97:03 - to decrypt this
97:04 - it's all wrong because we have this b
97:05 - and this quotation mark and well just
97:07 - incorrect we can't be writing that into
97:08 - the file and so what i did before
97:10 - is you saw i had a string surrounding
97:13 - this
97:14 - in our add file we can't have that
97:16 - instead of having a string we need to
97:18 - decode this so i forgot that we have
97:20 - this thing called the code it's the
97:22 - opposite of encode it's going to take a
97:23 - bytes string
97:24 - and decode it to a regular string so now
97:26 - if we decode this
97:28 - all should be good and same thing here
97:30 - i've i had uh what do you call it
97:33 - string like that and that's no good i
97:36 - couldn't do that
97:37 - instead i just have to have fur.decrypt
97:39 - and then pass w dot encode so i'm going
97:41 - to take
97:42 - the string in because i'm writing in a
97:44 - string that's not bytes it's just a
97:45 - string
97:46 - and then what i'm going to do is convert
97:48 - that string into bytes and then decode
97:50 - that byte string and then that should
97:51 - work
97:52 - so now let's see if this works i'm going
97:54 - to rerun the program paul
97:55 - apologize about that mistake i'm going
97:57 - to say what is a master password we're
97:58 - going to go tim
97:59 - would you like to add i'm going to say
98:00 - add account name let's just go
98:02 - joe password one two three four five six
98:05 - seven okay
98:06 - now i'm gonna say view when i say view
98:08 - it gives me uh
98:09 - user joe password b and then one two
98:11 - three four five six seven so it's
98:12 - showing me this bytes thing
98:13 - if i want to remove this bytes thing i
98:16 - need to decode this so i'm going to
98:17 - decode like that
98:19 - and now if i quit here and i rerun and i
98:22 - type in the master password which is tim
98:24 - and i press view or type view none type
98:27 - object has no attribute decode
98:30 - okay what is the problem here i was
98:32 - printing out this
98:34 - oh sorry guys i added the dot decode at
98:36 - the end of the print statement
98:38 - not at the end of this fir thing so i
98:40 - had it like after
98:41 - this bracket it needs to be after this
98:43 - second closing bracket
98:44 - so let me rerun this let me type in tim
98:48 - let me type in view and now notice it
98:50 - gives me the correct password one two
98:51 - three four five six seven
98:52 - however if i go to passwords.txt you
98:55 - can't see the correct password right
98:56 - it's storing this like a random string
98:58 - of gibberish that really like means
98:59 - absolutely nothing
99:01 - and so if i actually quit this let me
99:03 - just clear the screen and rerun
99:05 - uh let's go to password manager let's go
99:07 - to run and i type in the incorrect
99:08 - password
99:09 - i'll just type tim2 and i type view
99:12 - notice
99:12 - it still gives me the correct password
99:14 - okay it's interesting that's giving me
99:16 - the correct password it shouldn't be
99:17 - giving me the correct password
99:19 - so let me look at this for a second okay
99:21 - so i'm going to apologize here because i
99:22 - made a mistake
99:23 - i thought that we were going to be able
99:25 - to use a master password in combination
99:26 - with our key
99:27 - and just do some kind of like hackish
99:29 - manipulation to get this to work
99:31 - unfortunately it looks like doing that's
99:33 - way more complicated than i thought i
99:35 - just was looking on the internet right
99:36 - now in fact i'll bring up the
99:37 - documentation that i found
99:39 - um so we're using this thing called
99:40 - fernet right and there's a way to use
99:42 - passwords with fernet but i mean you
99:43 - guys can kind of read this here
99:45 - it's a little bit complicated and i
99:46 - don't really want to put you guys
99:47 - through all of this because this is just
99:48 - a beginner project
99:49 - so i will leave a link to this
99:51 - documentation in the description if
99:52 - you'd like to have a look at how to do
99:54 - this
99:54 - but for now i think i'm going to end the
99:56 - video here so i'm just going to remove
99:58 - this master password feature
100:00 - obviously that's pretty important right
100:02 - like you would want to have a master
100:03 - password so i really do apologize about
100:05 - that
100:05 - but if you do this now and you just use
100:08 - the key
100:09 - as you used it before um everything will
100:12 - still work so right now if you run the
100:13 - program and i'll show you
100:15 - and we don't have a master pass says
100:16 - would you like to add a password to view
100:18 - by type view it gives me the correct
100:19 - passwords right
100:20 - even though we used technically a
100:22 - different key that had the addition of
100:23 - our master password
100:24 - to kind of encrypt them previously this
100:26 - still works
100:28 - so anyways that is where i'm going to
100:29 - leave it again i'll leave a link to that
100:31 - documentation that shows you how to
100:32 - implement the master password in the
100:34 - description
100:35 - just too complicated for me to feel
100:36 - comfortable going through it in this
100:37 - kind of beginner tutorial
100:39 - all right so with that said i hope you
100:40 - guys enjoyed these five mini python
100:43 - projects i hope they kind of gave you
100:44 - something to work on maybe taught you a
100:46 - little bit about python
100:47 - and at minimum you know gave you a cool
100:48 - project that you can kind of extend and
100:50 - add on to
100:51 - if you guys like these type of videos
100:52 - please make sure to leave a like let me
100:54 - know what you want to see in the future
100:55 - in the comments down below
100:56 - and i will see you in another youtube
100:59 - [Music]
101:02 - video
101:07 - you