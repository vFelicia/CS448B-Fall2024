00:00 - all right so let's create a class let's
00:01 - call this pipe and now we need to
00:03 - implement some more things so let's
00:05 - start with the class variables that we
00:07 - need so similar to our bird class we're
00:10 - gonna need for this is just the gap
00:12 - which is gonna be equal to 200 and this
00:15 - is just how much space is in between our
00:16 - pipe as well as the velocity or how fast
00:19 - our pipes are gonna be moving because
00:21 - since we have the way the floppy bird
00:23 - works essentially is our bird doesn't
00:25 - move but all of them objects on the
00:27 - screen move we need to move the pipes
00:29 - backwards or towards the bird to make it
00:32 - look like it's moving so I'm gonna save
00:33 - velocity equals 5 here and that will
00:35 - create a emit so under spider square
00:38 - knit underscore underscore will do self
00:41 - and X now the reason I'm doing X and not
00:43 - Y or just I guess not both of them is
00:45 - because the height of these tubes and
00:48 - where they show up on the screen is
00:49 - gonna be completely random every time
00:51 - and we're actually gonna calculate that
00:52 - in here when we first initialize the
00:54 - pipe we're gonna give it a random height
00:56 - so what I'm going to just do here is say
00:58 - self dot x equals x and then I'm gonna
01:00 - say self thought height equals zero self
01:04 - dot gap equals 100
01:08 - I don't know wait why I did this twice
01:10 - actually we might not need this but
01:13 - anyways we'll see this I'm just looking
01:14 - at my other screen right now we're gonna
01:15 - say self dot top equals zero self dot
01:18 - bottom equals zero we're gonna say self
01:21 - dot pipe underscored top equals PI game
01:26 - dot transform duct flip pipe image and
01:33 - I'll talk about this in a second and
01:34 - then we're gonna do false true and now
01:38 - we're gonna do say self dot pipe
01:41 - underscore bottom in all capitals equals
01:44 - pipe underscore image all right so what
01:46 - I just did here really quickly was I'm
01:48 - creating some variables to keep track of
01:50 - where the top of our pipe is gonna be
01:52 - drawn and where the bottom of our pipe
01:54 - is gonna be drawn I'm also just getting
01:55 - the images for the top pipe and the
01:57 - bottom pipe now the reason I'm doing
02:00 - this here is because I need to keep
02:01 - track of the the specific image so it's
02:06 - kind of hard to explain but I'm gonna go
02:08 - to my desktop to show you essentially
02:10 - the images the pipe starts facing
02:12 - vertically but
02:13 - also need a pipe that faces upside down
02:15 - so I just need to flip this pipe over
02:17 - and store that image inside the class so
02:20 - that's what I do here we flipping the
02:22 - pipe and saying that's the pipe top and
02:23 - this is the pipe bottom now the next
02:26 - thing we need is self dot cast which is
02:28 - gonna be equal to false now this is
02:30 - gonna stand for if the bird is already
02:31 - passed by this pipe and this is gonna be
02:33 - for collision purposes and for the AI
02:35 - later which we'll talk about in a bit
02:37 - and then I'm gonna call a method that we
02:39 - haven't yet created called self dot set
02:41 - underscore height now with this method
02:44 - is gonna do and we're just about to code
02:45 - it is gonna define where the top of our
02:48 - pipe is where the bottom of our pipe is
02:49 - and how tall it is or you know how tall
02:52 - is the top one versus the bottom one
02:54 - where is that gap all of that and that's
02:56 - gonna be randomly defined so what I'm
02:58 - gonna do here say set underscore height
03:00 - give this the self and what we'll do in
03:03 - here is just get a random number for
03:06 - where the top of our pipe should be so
03:08 - I'm gonna say score actually yeah I
03:09 - guess the top four pipe will say self
03:11 - dot height equals random dot R and range
03:15 - will do a range between 40 and 454 where
03:20 - we want the top of our pipe to actually
03:21 - be on the screen and then we're gonna
03:23 - say self the top equals self dot height
03:26 - - self thought pipe top dot get under
03:31 - score height now I know it seems kind of
03:34 - confusing but essentially if we want to
03:35 - figure out where the top of our pipe
03:37 - should be let me go back to my image
03:39 - here we need to figure out the top left
03:41 - position of the image for our pipe
03:43 - because let's say this is where we want
03:45 - the like top pipe to be located well we
03:48 - have this number to figure out where we
03:50 - need to draw it on the screen we need to
03:52 - figure out the height of that image and
03:53 - subtract so we'll actually probably be
03:55 - drawing the pipe at a negative location
03:57 - but since it's so long then what will
03:59 - happen is it will like go down the
04:01 - screen and where we actually want you
04:02 - know that bottom of the top pipe to be
04:05 - will be in the correct position so
04:06 - that's what we're doing here now for
04:08 - this pipe it's easy because the top left
04:10 - hand corner is exactly the WHI where
04:12 - this pipe is gonna be located but for
04:14 - the top pipe it's you know a little bit
04:15 - more difficult so anyways let's erase
04:17 - that hopefully that makes sense
04:19 - all right so that's easy or I guess
04:21 - that's the hard part done now we're
04:22 - gonna say self dot bottom equals in this
04:25 - case self dot height
04:27 - Plus self thought gap now I'm gonna use
04:32 - self thought gap from up here which is
04:33 - 200 which means I can get rid of this
04:35 - gap alright so now for the most
04:37 - difficult method of them all the move
04:38 - method I'm being completely sarcastic
04:41 - because all we need to do to actually
04:42 - move our pipes is just change the x
04:44 - position based on the velocity that the
04:46 - pipe should move each frame so in this
04:48 - case all we have to do is say self
04:50 - thought why are not y sorry X minus
04:53 - equals self thought fell because every
04:55 - time we call this move method which is
04:57 - gonna be the same of how we're calling
04:58 - our bird move inside the while loop all
05:00 - we're gonna do is just move the pipe to
05:03 - the left a little bit right based on
05:05 - where that velocity is okay easy enough
05:07 - now the next one is defined draw this is
05:10 - gonna draw our pipe and we're
05:11 - considering a pipe to be both the top
05:13 - and bottom so this will draw up the top
05:16 - and the bottom now we need to give it a
05:17 - window and what we'll do here is simply
05:20 - say win dog blitz and in this case we're
05:23 - in your self-taught pipe top which will
05:25 - be that top pipe will do that at
05:27 - self-thought X self dot top because
05:30 - again we've already calculated these
05:31 - numbers and then we'll let the bottom
05:33 - pipe so self thought I guess it's gonna
05:35 - be pipe under square bottom and then
05:38 - this will be self dot X and self dot
05:41 - bottom if I could type that correctly
05:44 - alright so now we have that that draws
05:46 - it and the last method and the most
05:48 - complicated one probably out of all
05:50 - these is collide now this is where we
05:53 - talk about pixel perfect collision so
05:55 - like I said before and again give me
05:57 - some slack here cuz I'm drawing with my
05:59 - mouse what we typically do is we draw
06:01 - boxes around all of our objects so let's
06:04 - say we have a box like that and around
06:05 - our pipe it's pretty easy to draw a box
06:07 - because it's already pretty boxy we draw
06:08 - another box now what we do is we check
06:11 - if these two boxes collide with each
06:14 - other now this is problematic sometimes
06:17 - because this means that even if you know
06:20 - let's say these like this part of the
06:22 - box collides with another box or maybe
06:25 - we have one like this we would say that
06:27 - these two objects collided when the user
06:30 - doesn't actually see that this urn
06:32 - collides with well this box because you
06:36 - know the pixels aren't in that location
06:38 - now this is the
06:40 - any way to do collision but I didn't
06:41 - want to do that for this project so I'm
06:42 - using something called masks now a mask
06:45 - essentially is and actually I'll bring
06:47 - out my drawing tablet just to you know
06:49 - make this look a little bit neater is
06:51 - kind of an array or a list of where all
06:54 - of the pixels are inside of a box now
06:56 - this is somewhat complicated I'll try to
06:58 - simplify it but essentially if we have
07:00 - two boxes like this and we have two
07:03 - circles what a mask does is it tells us
07:06 - where these circles are so what we can
07:09 - do is we can see you know if these two
07:11 - boxes collide like this and maybe
07:14 - there's a circle here and there's a
07:15 - circle here and we can check if any of
07:18 - the pixels inside these boxes are
07:20 - actually touching and in this case these
07:23 - pixels are not touching so we would say
07:25 - that it doesn't collide but if we have a
07:27 - collision where we have you know a
07:29 - circle and let's say we have that box
07:31 - and this other circle since these pixels
07:34 - right here in this area are actually
07:35 - touching we're gonna say that this
07:37 - collides now this is where we used masks
07:39 - in PI game and a mask is just it looks
07:43 - at an image essentially and it figures
07:44 - out where all the pixels actually are
07:46 - because these images have transparent
07:48 - backgrounds what it's able to do is see
07:50 - if the pixel is transparent or if it's
07:52 - not and then what it does is it creates
07:54 - a list that's gonna be it's actually
07:56 - gonna create a 2d list and it's gonna
07:59 - have as many rows as there are pixels
08:01 - going down and as many columns as there
08:03 - is pixels going across so let's say we
08:06 - have an image that's 10 by 10 well what
08:09 - we're gonna get is we're gonna get 10
08:10 - entries in here so 1 to 10 and then
08:14 - we're gonna get 10 rows of pixels so
08:17 - let's say you know this is number 10
08:18 - like this and what we'll do is we'll
08:21 - have these two lists and we'll have one
08:22 - for each image and we'll compare these
08:25 - two lists together and we'll see if
08:27 - there's any pixels in each list that
08:29 - collide with each other or that sit in
08:31 - kind of the same area and then that way
08:33 - we can determine whether or not we had
08:35 - pixel perfect collision now it's kind of
08:37 - as far as I'm gonna explain this if you
08:38 - don't understand it again my apologies
08:40 - but it's kind of with its own video on
08:43 - its own to explain that I want to go
08:44 - into depth with too much depth with it
08:46 - but pygame has some functions that kind
08:48 - of help us do this which are just mask
08:51 - collisions so that is why
08:53 - we needed to call get masks on this or
08:57 - we need to create this method get masks
08:58 - so based on the image it can get us mask
09:01 - which is just a two-dimensional list and
09:03 - then we can compare that mask against
09:05 - our other masks so anyways let's create
09:06 - this method called collide let's put
09:09 - self inside of here and then what we're
09:11 - gonna do is actually have bird and
09:14 - window be passed to us now I don't
09:17 - actually remember why I pass window I
09:20 - think I might use it for something or
09:22 - maybe we don't I'm just gonna get rid of
09:24 - it actually because I don't think we
09:26 - need it but what I'm gonna do is say
09:28 - first of all bird underscore mask equals
09:31 - bird which were passing in here which is
09:33 - gonna be that bird object don't get
09:35 - under sport mask so we're going to get
09:37 - that mask to start and now what we're
09:39 - going to do is create a mask for the top
09:41 - pipe and the bottom pipe so the way we
09:43 - do that is the same way we did it here
09:44 - so we're going to take this we're gonna
09:48 - put it here twice and we're gonna say
09:49 - top underscore mask equals this and
09:54 - bottom underscore mask equals this now
09:58 - what we're gonna take is inside yourself
09:59 - dot image we're gonna say self dot pipe
10:01 - top and then we're gonna say self dot
10:05 - pipe body wonderful now we need to
10:09 - calculate something called an offset and
10:11 - an offset is how far away these masks
10:14 - are from each other so we actually know
10:16 - how like I guess the function that we're
10:19 - passing this to and pygame knows how we
10:21 - can check these pixels up against each
10:23 - other again it's kind of complicated but
10:25 - just go with the flow here so we're
10:27 - gonna say top underscore offset which is
10:30 - gonna be offset from the bird to the top
10:32 - mask is gonna be equal to and this is
10:35 - kind of complicated but we're gonna say
10:36 - self dot X - bird dot X and then we're
10:41 - gonna say self dot top
10:43 - - round of bird dot y now it's just
10:47 - because we can't actually have any
10:49 - negative or sorry decimal numbers here
10:50 - so I just need to round off the Y of the
10:52 - bird anyways now what we're gonna do is
10:55 - make the bottom offset which is gonna
10:59 - look like this so let me similarly and
11:01 - say self dot X - bird dot X I'm gonna
11:04 - say self dot bottom
11:06 - -
11:07 - the round of bird ly if you're
11:11 - interested in looking more about masks
11:13 - then just look up PI game documentation
11:15 - and look up masks and it kind of shows
11:17 - you how this work how this works but
11:18 - obviously we need the offset which is
11:20 - how far away the two top left-hand
11:22 - corners are from each other and then if
11:23 - we have the mask which is those lists of
11:26 - pixels we can kind of just do some math
11:28 - and calculate and see if two pixels are
11:30 - overlapping or not and that's basically
11:32 - how that works so now what we're gonna
11:33 - do is we're going to figure out if these
11:36 - masks collide now the way we do that is
11:38 - by finding their point of collision so
11:41 - what I'm gonna do is say the underscore
11:43 - point equals Bird underscore mask dot
11:45 - overlap and then I'm gonna say bottom
11:48 - mask bottom offset now what this does is
11:52 - tells us the point of collision or the
11:55 - point of overlap I guess the first one
11:57 - it finds between the bird mask and the
12:00 - bottom pipe using the bottom offset so
12:03 - how far away that bird is from the
12:04 - bottom pipe now if these things don't
12:07 - collide then this returns this function
12:10 - returns to us none all right so that's
12:12 - just important to know so let's copy
12:14 - this and we're gonna do the same thing
12:16 - now for the top so instead of be point
12:17 - we're gonna say T point which stands for
12:19 - top point we're gonna say top mask and
12:21 - top underscore offset like that now what
12:25 - I'm gonna do is check if either of these
12:27 - points exists so essentially if we
12:29 - aren't colliding then both be point and
12:32 - T point will be none so all I have to do
12:34 - here is say if t underscore point or b
12:39 - underscore point which essentially means
12:41 - if they're not none then what we'll do
12:43 - is we'll return true which says that we
12:45 - are colliding with the other object
12:48 - otherwise we're gonna return false so
12:51 - the reason I have these on each of these
12:52 - pipes is so that essentially every time
12:55 - we move the bird will check if the bird
12:57 - collides with whatever pipes are on the
12:59 - screen now if it does it's got this is
13:02 - gonna return true to us and then we can
13:03 - do something in our main loop way you
13:05 - know like make the bird die pause the
13:07 - game whatever we need to do otherwise
13:09 - we'll return false and we'll just keep
13:10 - going so this is gonna tell us if we
13:12 - collide with this pipe and we just pass
13:14 - it a bird object now later when we have
13:17 - a lot of birds we'll be calling this
13:18 - method a bunch of times on all of our
13:20 - different birds alright awesome so now
13:22 - that we've done that I guess we could
13:24 - start drawing some pipes onto the screen
13:27 - but you know what I actually want to
13:29 - program the last class we have to do
13:31 - which is called base so base is gonna be
13:34 - actually let me pull up the image here
13:36 - this now we actually need a class for
13:39 - this because it needs to be moving and
13:40 - the way that this moves is kind of
13:43 - complicated because this image is not
13:44 - super long it's not infinitely long
13:46 - which means as soon as it moves to a
13:48 - certain point we need to move it back so
13:51 - that it can start moving again and
13:53 - you'll see how this works as I start
13:55 - going and I'll kind of explain it with a
13:56 - photo so anyways let's go to class base
13:59 - let's define a few things in here like a
14:01 - velocity this velocity obviously needs
14:03 - to be the same as the pipe otherwise
14:05 - it's gonna look like these two things
14:06 - are moving at different speeds and then
14:08 - we're gonna have a width which is just
14:10 - how wide this actually is and that's
14:12 - gonna be our base image don't get
14:15 - underscore width so how wide one of
14:18 - these images are and then we're gonna
14:19 - say image equals base image alright next
14:24 - let's program the init so define
14:26 - underscores for an it underscore
14:27 - underscore itself and we will start at a
14:30 - y position because the X is going to be
14:32 - moving to the left so we actually don't
14:34 - need to define that now next we're gonna
14:36 - say self dot y equals y we're going to
14:39 - say self dot x1 equals zero and when I
14:43 - say self dot x2 equals to self dog we
14:46 - will get into the x1 and x2 in a second
14:49 - but let's program this remove method now
14:51 - so we're say define move self again just
14:54 - like the bird in the pipes we're gonna
14:55 - be calling this on every single frame
14:58 - and now we're gonna do is say self dot
15:00 - x1 minus equals self done now and self
15:05 - dot x2 minus equals self dot bail and
15:09 - maybe some of you clever people out
15:10 - there starting to figure out how this is
15:12 - actually gonna work but I'm just gonna
15:13 - keep programming this maybe you guys
15:15 - will figure it out otherwise I'm gonna
15:17 - explain in a second so I'm gonna say if
15:18 - self dot X 1-plus self-thought width is
15:21 - less than zero then I'm gonna say self
15:24 - dot x1 equals self dot X 2 plus self dot
15:30 - width
15:31 - and then we're gonna do the same thing
15:33 - here for X cubes I'm gonna say if self
15:35 - thought x2 plus
15:37 - self dot wit is less than zero then I
15:40 - say self dot x2 equals self dot X 1 plus
15:45 - self dot wig all right so all of you
15:49 - people that are confused don't worry I'm
15:51 - gonna explain this now so essentially
15:52 - let's go to our drawing and let's figure
15:53 - out how this base is gonna move so let
15:55 - me get rid of all this stuff that we
15:57 - don't need anymore and let me pull up
15:59 - the drawing tablet once again so that I
16:01 - can actually get some proper writing
16:03 - here so if you haven't figured this out
16:05 - by now what we're doing is we're
16:07 - actually gonna be drawing two images for
16:09 - our base
16:10 - so let's actually just clear this flappy
16:12 - bird screen which I'm probably gonna
16:13 - regret but that's fine so what we're
16:15 - gonna be doing is drawing two images for
16:17 - our base let's say this is the first
16:19 - image for our base and we'll do these
16:20 - lines to represent that then this is
16:23 - going to be the second image for our
16:24 - base like this now let's say our window
16:28 - width look our window looks like this
16:31 - alright so what we're gonna do is we're
16:34 - gonna start by moving this image to the
16:37 - left and we're gonna move this second
16:39 - image to the left at the same speed that
16:41 - this first image moves so what's gonna
16:43 - end up happening is after a few frames
16:45 - we're gonna have moved our images and
16:47 - they're gonna look something like this
16:48 - where our base now is we see half of one
16:52 - image and half of the other so remove
16:55 - this so that it looks like you know
16:56 - we're moving one continuous image now as
17:00 - soon as this first image here reaches
17:03 - the end so this point here gets off of
17:05 - the screen what we do is we move this
17:08 - image behind this other image so let me
17:10 - show you kind of how this works so as
17:12 - soon as we get to a point where our
17:14 - images look like this where one image is
17:16 - completely on the screen and the other
17:17 - image is completely off we take this one
17:20 - image and we cycle it to the back which
17:22 - is what that if statements doing so we
17:24 - take that guy and we draw them now over
17:26 - here we change his position here and now
17:29 - what's going to happen is we continue to
17:32 - move these images so now what we do is
17:33 - we do the same thing that we're doing
17:35 - before this guy moves this way and this
17:39 - guy moves this way at the same speed
17:40 - then as soon as this guy completely gets
17:43 - off the screen
17:44 - he comes and he cycles to the back and
17:46 - we keep moving so essentially we kind of
17:48 - have like a circle of images moving and
17:50 - moving and moving and that allows us to
17:51 - continually keep moving this background
17:53 - image to the left and to the left and to
17:55 - the left without ever running out of
17:57 - images now we could also just like keep
17:59 - drawing more and more images behind the
18:02 - other ones and have an infinite amount
18:04 - of images but I kind of like this
18:05 - circular pattern as kind of I don't know
18:07 - creative and cool to come up with so
18:10 - that's what I've done but hopefully that
18:11 - makes sense and that's what those if
18:13 - statements are doing for us all right so
18:15 - let's now debug these if statements make
18:17 - sure I did everything correct here so
18:19 - yeah you can see here we have two
18:20 - expositions we start with one of them at
18:23 - exposition zero and one of them directly
18:25 - behind that image we move them with the
18:28 - velocity and then so that's what these
18:31 - are doing here with these velocities
18:32 - then we check if one of them is ever off
18:34 - of the screen completely if it is we
18:36 - cycle it back and then we do the same
18:38 - thing for the other image awesome all
18:41 - right so the last thing we need to do
18:42 - here is simply draw those so we're gonna
18:44 - say define draw self win and just like
18:48 - we've done so many times before we're
18:50 - gonna say wind-up lit and in this case I
18:52 - guess it's gonna be self dot IMG and I'm
18:56 - gonna do at self dot x1 self ly and we
19:00 - can pretty much copy this and just
19:02 - change X 1 to be x2 now all right so
19:05 - that's gonna draw that base for us all
19:08 - right so now we have successfully
19:09 - created all of the classes that we need
19:12 - to do and is time to move on to bringing
19:15 - this all together and actually forming
19:17 - the game encoding more of the game the
19:19 - main game