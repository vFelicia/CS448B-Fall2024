00:00 - hey guys and welcome to part three of
00:02 - coding Tetris in Python with pygame now
00:06 - up until this point I actually have not
00:07 - tested my code now I know some of you
00:10 - probably think I'm insane because we've
00:11 - already written like three enter lines
00:12 - of code we haven't tested any of it the
00:14 - reason I haven't done this is because I
00:16 - wanted to test this in between videos
00:18 - figure out what the errors were so that
00:21 - I didn't waste too much time fixing all
00:23 - of them so I'm gonna go through a few
00:25 - errors that we have now and show you
00:27 - what happens when I run the code so I'm
00:29 - just complete that cuz that was the fix
00:31 - that I made and pretty much you can see
00:33 - that we crashed right away and we
00:35 - actually get a 4-iron range
00:37 - none type has no length now the reason
00:39 - we get this and this happens down in the
00:41 - main it's because in convert shaped
00:43 - formats somehow I managed to forget to
00:45 - return positions so this is really
00:48 - important because the whole goal of this
00:49 - function well was to generate this list
00:51 - of positions and we did that fine but we
00:53 - forgot to return them so pretty easy
00:56 - error to fix or return positions now
00:58 - again we run this way okay everything
01:00 - looks good no there's another issue all
01:02 - right so just watch if I try to go off
01:04 - the screen you can see that we get a
01:06 - unsupported operant for current piece
01:09 - because I forgot to put a Y or an X here
01:12 - so let's go down to main let's fix this
01:14 - what line are we on 260 to 262 current
01:17 - piece X yeah that would be important
01:19 - okay now I know there's a few other
01:22 - errors so this one current piece mimes
01:25 - equals let's change this to an X current
01:28 - piece - equals wow I really messed up on
01:30 - this a lot okay dot rotation minus equal
01:35 - one okay so this is rotation and let's
01:38 - see anything else let's run the program
01:41 - see okay we're getting another issue
01:43 - here so if we have valid space crap
01:45 - okay so I just messed up and a bracket
01:48 - here so let's go lying 265 here we are
01:52 - so we're gonna take this quotation mark
01:54 - or Y my saying condition might bracket
01:55 - and just put it there and all should be
01:58 - good now let's see we go down to the
02:02 - bottom of the screen okay we got another
02:04 - and let's just play this role on sexy if
02:06 - we can run into any errors
02:07 - okay so we're rotating fine we can't
02:10 - move off the screen
02:11 - and all looks to be doing okay all right
02:17 - so that's a good sign for now let's
02:19 - leave that so it doesn't look like
02:20 - there's any issues if you find any I'd
02:23 - probably end up fixing them in future
02:25 - videos so don't stress about it okay so
02:27 - now that we've done all this what we
02:29 - need to do next is a few things all
02:32 - right
02:33 - so we need to deal with this draw next
02:35 - shape clear rows draw text middle what
02:38 - other functions to have and I think
02:39 - that's about it and we're also gonna
02:40 - deal with main menu' kind of starting
02:43 - the game finishing the game and all that
02:46 - stuff so what I first want to do
02:48 - actually is I want to deal with draw
02:50 - next shape anatomy undo clear roads just
02:52 - cuz clear rows is kind of complicated so
02:54 - draw an X shape what this is gonna do is
02:56 - they're just gonna draw the next shape
02:57 - kind of off the screen and show us what
03:00 - it is because in Tetris typically it
03:01 - shows you like the next shape the next
03:02 - few shapes so yeah now this seems pretty
03:06 - straightforward like just draw the shape
03:08 - it's actually kind of long because we
03:10 - have to once again get this list turn it
03:13 - into positions that we can use and yeah
03:18 - it just it gets a bit complicated so
03:19 - what we're gonna do is we're also gonna
03:20 - set up a font in here it's gonna say
03:22 - font equals PI game dot fonts dot sys
03:26 - font here we're gonna do Comic Sans
03:29 - again because you guys know I love Comic
03:30 - Sans Comic Sans sighs stick 30 and let's
03:36 - render this font okay so label equals
03:38 - font don't render text for this is gonna
03:42 - be next shape okay feel free to add a
03:46 - colon or something if you guys want
03:47 - anti-aliasing one text color white 255
03:51 - to protect you okay basically already
03:53 - been through that okay now we need to
03:55 - figure out where we're gonna draw this
03:57 - this label okay so let's see the same
04:00 - thing we've done before you say SX is
04:02 - equal to top left X plus the play width
04:07 - and I'm going to say s Y is equal to top
04:13 - left Y plus the play underscore heights
04:17 - actually I'm gonna play 100 we're gonna
04:20 - say play height divided by two okay now
04:23 - what we're gonna do is this is going to
04:24 - give
04:25 - like to the right maybe I can just run
04:28 - this and show you guys it's gonna give
04:31 - us where my mouse is right here like a
04:32 - position kind of similar to here so we
04:34 - are actually here so what we want to do
04:36 - is we want to add a constant to this so
04:37 - we move to the right a bit so this
04:39 - constant we're just gonna hard code in
04:41 - and we can change this and play with it
04:43 - if we want it to be like moved more to
04:44 - the right or more to the left so to move
04:46 - more to the right rear now add 50 and
04:48 - then to kind of make this look a little
04:51 - bit better where you can actually
04:52 - subtract a hundred from the site so we
04:54 - can move a bit higher up on the screen
04:55 - play with these constants if you guys
04:57 - want it to look a bit different okay so
04:59 - now we've got that what we're going to
05:02 - do is we're gonna once again we're gonna
05:04 - formats were in say format is equal to
05:07 - shape.com thing we need the actual shape
05:12 - so not just like that main list a shape
05:15 - dot rotation modulus the length of shape
05:20 - dot shape like that okay so this is the
05:23 - exact same thing that we did in format
05:26 - whatever Kay you guys know is know what
05:28 - function I'm talking about and I've lost
05:30 - myself here okay just to get the actual
05:33 - like sub list that we need okay so now
05:35 - on you might say well what do you what
05:37 - are you doing here we already have like
05:39 - a function that does this for us don't
05:41 - worry about it just follow along because
05:42 - this is a bit different the way that I'm
05:44 - gonna do thing case when I say 4i comma
05:46 - line in enumerate all right
05:49 - and then row or actually before I'm not
05:54 - sorry I'm gonna do the same thing here
05:56 - we're gonna convert row it into list is
05:58 - really similar to the other function
05:59 - except we're gonna do one major change
06:01 - and you'll see that for row equals list
06:03 - line we're gonna say for J comma what do
06:07 - you want to call it column in enumerate
06:10 - row this time and exact same condition
06:14 - if column equals equals zero what we're
06:18 - gonna do here instead of adding some
06:20 - position to list is we're gonna draw
06:21 - something and this is why I didn't want
06:23 - to use the other function that gives us
06:24 - a list of positions because I don't care
06:26 - about the position within the grid I
06:27 - just care when we should draw something
06:30 - or not because this doesn't matter it's
06:31 - not gonna be moving we just want to draw
06:33 - like a constant image on the right side
06:35 - of this or a static image on the right
06:36 - side of the screen that week
06:37 - and just look at okay so what we do here
06:40 - is we're gonna say Pike and draw rect so
06:42 - don't draw dot correct
06:44 - we need a surface we passed the surface
06:47 - in I need a color it's going to be the
06:49 - shape color okay and then we need our
06:52 - position to draw on so SX and that in
06:56 - this case we're gonna have to do since
06:57 - we're drawing each cube right we're not
06:59 - dressed wrong the whole shape plus J
07:01 - multiplied by 30 and then we're gonna do
07:03 - the same thing with y so sy + I
07:06 - multiplied by 30 and we actually just
07:09 - changed this to let's change the block
07:10 - size to be a bit more dynamic okay so
07:13 - it's a 30 block size just in case we
07:15 - decide to change the dimensions of our
07:16 - screen later on and then we need width
07:18 - and height and that is gonna be a block
07:20 - size and block size and we want this
07:23 - filled in so comma 0 okay so what we've
07:25 - done here is really similar to what
07:27 - we've already done we're just gonna be
07:28 - drawing these blocks according to where
07:31 - they show up like in this list based on
07:34 - the initial x position plus like a
07:37 - changed kind of position or whatever
07:39 - okay anyways I think that's about it for
07:43 - this oh we need to actually bullet the
07:47 - label now so we created this label we
07:49 - havein actually drawn on the screen yet
07:50 - so let's do this
07:51 - I suppose a surface dot let's label
07:57 - change this to a period okay and then we
08:02 - need a position what's our position
08:04 - going to be well we're actually just
08:05 - give us X plus 10 and s y minus 30
08:09 - okay again play around with these
08:10 - constants guys if you want your thing to
08:12 - look a bit different be more centered
08:13 - whatever I again I don't go like too
08:16 - crazy on cosmetics here I just want
08:17 - everything to work and look decent I
08:20 - assume you guys can mess around with it
08:22 - all right
08:22 - okay so now we've done that we've drawn
08:24 - the next shape well we actually need to
08:26 - call this function so within draw window
08:28 - we're gonna call draw next shape as well
08:30 - so where should we call this let's see
08:34 - what's called before we draw the grid
08:37 - draw an X shape or actually we can't
08:40 - call it in here where we need to call
08:42 - this is in the main because we only have
08:44 - next shape within the main symbol right
08:46 - when we're drawing draw window we're
08:48 - actually just gonna call draw next shape
08:50 - because we need to give it the next
08:52 - shape so it's gonna be next piece and
08:54 - then the grid does that wood takes it
08:57 - takes a surface yeah surface okay so let
09:00 - me just go check this to make sure and
09:02 - our surface is not called surface is it
09:04 - it's called win okay so in draw next
09:09 - shape you haven't take a shape and
09:11 - surface okay so that that should work
09:12 - fine you know what let's actually just
09:14 - test this now and see if this working
09:15 - and we're not showing up we're not
09:17 - drawing this surface hmm
09:19 - I believe it is because ah draw windowed
09:24 - Renick okay so what we need to do
09:26 - actually it's this draw next shape we're
09:28 - gonna draw after draw it now and we're
09:30 - just gonna update the display in here so
09:31 - pygame display it dot update and then if
09:35 - we go to draw window just remove this
09:38 - display update and this should work
09:40 - there we go so now we're getting next
09:43 - shape on the side the reason that wasn't
09:45 - working is because we were pretty much
09:45 - drawing over top of the next shape every
09:48 - time that we drew the window so now
09:51 - that's working fine we have our next
09:53 - shape showing up and what else do we
09:55 - need to do I'm really delaying trying to
09:57 - go to this clear rose function because
09:59 - it's really complicated but I think
10:00 - we're gonna have to do this next okay so
10:03 - clear rose and tetris obviously if we
10:05 - create a full row we need to clear that
10:07 - row and then so that's the only way the
10:09 - user can win obviously yeah so way to do
10:11 - this is probably a lot easier than the
10:15 - way I'm gonna do it but try to follow
10:18 - along because this is the only way I
10:19 - could kind of get to work and this is
10:20 - probably the hardest part of the actual
10:22 - game okay so we're gonna take grid we're
10:25 - going to take locked positions and we're
10:27 - going to do is we're gonna set up a few
10:29 - things here just follow along if try to
10:31 - explain as I go so I'm gonna say Inc
10:32 - which is an increment 0 for I in range
10:36 - the Len of grid negative 1 negative 1
10:43 - okay and we're actually just going to
10:44 - subtract one from this to what this is
10:47 - gonna do is go look through our grid
10:48 - backwards so it's gonna start at the
10:50 - 28th row and it's gonna move up to the
10:51 - 19th row okay I'm going to say the
10:54 - current row is equal to grid I all right
10:56 - I'm going to say if the color 0 0 0 is
11:00 - not in our row
11:03 - let's clear okay so we're gonna add 1/2
11:06 - Inc don't worry I'm gonna explain this
11:08 - after guys just follow along okay say
11:11 - IND equals I I'm going to say 4j in
11:15 - range the length of row what we're gonna
11:19 - do is we're gonna try to delete locked
11:26 - square brackets current position which
11:29 - gonna be ji and then if this doesn't
11:32 - work and I accept and continue okay okay
11:39 - so let's just talk about what I just did
11:40 - here because I kind of went fast and
11:42 - there's another ParticipACTION don't
11:43 - worry so the way this is gonna work
11:45 - these we're gonna say we're gonna loop
11:48 - through the good backwards we're gonna
11:50 - set row equal to every well bro in our
11:54 - grid so what that we're looping through
11:56 - and the way that we know if the row
11:58 - should be cleared is if 0 0 0 doesn't
12:01 - exists because if 0 0 0 does not exist
12:03 - that means there's no black squares in
12:05 - our row which means it's completely
12:06 - filled with shapes are completely filled
12:09 - with cube objects or whatever okay so we
12:11 - know we can clear it so the way to clear
12:13 - it now and don't worry about these
12:15 - variables I'll talk about that a second
12:17 - is to get every position in that rail to
12:20 - do that we need to loop through J in the
12:22 - row and we're already out the current
12:24 - row so we know that I is just gonna stay
12:26 - static change J and try to delete this
12:29 - from locked positions because now what
12:32 - we're doing is the lock positions need
12:34 - to be removed so when Mandela bees since
12:36 - locked position is a dictionary and it's
12:38 - mutable we can actually just change it
12:39 - within here and that's how we delete
12:42 - those keys and those colors from the
12:44 - grid okay so after we delete that all
12:47 - what we need to do is we need to shift
12:50 - every row so what's happening now and I
12:52 - think I'm actually just gonna pull out a
12:53 - little I have a drawing tablet and just
12:55 - start using this to kind of explain some
12:56 - things because it's pretty complex so
12:59 - just give me one second
13:01 - all right so what we need to do is we
13:02 - need to shift every row so if we delete
13:05 - like a the bottom row every row above
13:07 - that row needs to move down by one so if
13:09 - I go to let's see this and delete this
13:14 - okay so you can see if I have a grid
13:16 - alright and it looks something like this
13:18 - we're just going to be like a very basic
13:19 - like 3x3 grid okay just to save us some
13:22 - time let's say that we want to clear
13:24 - this road down here so these are full of
13:26 - colors right so if we clear this row and
13:28 - what happens is we get rid of all these
13:30 - and that any positions that we're above
13:32 - it so let's draw something like this now
13:34 - this is here well currently this is
13:35 - floating right because if we've cleared
13:37 - all these positions down here so we got
13:41 - rid of those this is floating so this
13:42 - needs to move down one so how can we go
13:45 - about doing that and the thing is every
13:47 - other row needs to shift down by one as
13:49 - well but now let's talk about like a
13:51 - potential issue you might run into so if
13:53 - I delete all that and let's say we have
13:54 - a grid that looks like this okay and
13:56 - there's a color here if we delete this
14:00 - row the grid actually now in our memory
14:02 - only looks like this all right it's only
14:06 - this top portion because we've deleted
14:09 - an entire row out of the grid so yeah we
14:12 - can shift everything down by one but now
14:15 - we're left with the grid that's one less
14:16 - than the other one so what we want to do
14:18 - is we need to add another row at the top
14:20 - here so that our grid stays the same
14:22 - size because if you delete an entire row
14:25 - well you're deleting the row right so
14:27 - you need to add back the other positions
14:29 - at the top because everything's shifting
14:31 - down by one so really the way it works
14:32 - is you delete this and then this whole
14:34 - thing moves down and then you add a row
14:37 - at a top like this okay so that you're
14:39 - back to your continual grid I hope that
14:42 - makes sense that's kind of the only way
14:44 - I can really explain it to you guys in
14:46 - terms of how we shift things and I'm
14:47 - going to do it in code right okay so
14:50 - leave a comment if you guys confused
14:52 - about that cuz I'll try to explain it in
14:53 - a better way but it's just kind of like
14:54 - a confusing topic in chair okay so now
14:56 - what we're gonna do and say if I on C is
14:59 - greater than zero
15:00 - okay we're going to say so this means
15:02 - that we've shifted and we've removed at
15:04 - least one row and I'll talk about the
15:06 - case in which we move two rows in one
15:08 - second okay I'm gonna say four key in
15:11 - and just follow what this is
15:14 - this is gonna be kinda confusing list of
15:17 - locked positions so locked because we're
15:21 - just we just passing locked there okay
15:22 - and then when you say key equals lambda
15:26 - I'll explain what this does in a second
15:28 - X x1 and I think that's about it and
15:33 - we're actually just gonna reverse this
15:36 - negative okay so for every key in our
15:42 - sorted list of locked positions based on
15:47 - the Y value is what this does so given a
15:50 - list that looks like this if you have
15:53 - like zero one zero zero okay given a
15:59 - this a very busy
16:00 - basically this could be apple of locked
16:02 - positions list okay what we're gonna do
16:04 - is going to sort this list and the way
16:05 - we sort it is based on this number here
16:07 - this Y value and this is what this key
16:09 - equals lambda X x1 does you don't have
16:13 - to understand that this is just a really
16:14 - kind of complex way to sort of list
16:17 - what we're gonna do is we're gonna now
16:18 - make it look like this is your zero zero
16:22 - one the way we do that is so that we get
16:24 - all the positions that have the same y
16:28 - value in like the core the correct order
16:31 - okay
16:32 - and you'll see why we need that when we
16:35 - start coding
16:36 - okay so I'm gonna say X y equals key
16:39 - because again remember key is a tupple
16:40 - and I'm gonna say if Y is less than IMD
16:45 - we're gonna say new key is equal to X
16:51 - comma y plus I MC and then locked new
16:59 - key equals locked top key okay let's
17:05 - let's dissect this now alright cuz this
17:07 - is I told you guys this was kind of
17:09 - confusing so what we're doing now if we
17:12 - want to shift every single position in
17:14 - the grid down because when we delete a
17:18 - row everything above that needs to move
17:20 - down so the first part is pretty
17:22 - straightforward okay so XY equals key so
17:24 - we're something getting the X&Y position
17:26 - of each
17:26 - in locked positions and remember locked
17:28 - positions has a key and then a
17:30 - corresponding with that is a cover okay
17:33 - straightforward now what we're gonna do
17:35 - is we're gonna say if Y is less than int
17:38 - and what that means is if Y is if the Y
17:41 - value of our key is above the current
17:45 - index of the row that we removed so if
17:48 - we remove for example row 17 then only
17:51 - things that are above that are gonna
17:52 - move down we don't need to move anything
17:54 - below row 17 down because we didn't
17:56 - remove anything after row 17 right and
17:57 - I'm gonna show this in a drawing in just
17:59 - a second okay so if that happens what
18:01 - we're gonna do is we're gonna change a
18:02 - key we're gonna get a new key we say
18:04 - it's equal care next value but we're
18:06 - gonna increment this by a certain value
18:08 - so we're gonna add I had to the Y value
18:10 - to shift it down and then we're gonna do
18:13 - is we're going to rewrite we're gonna
18:16 - create a new key in locked position
18:19 - which can have the same color value as
18:20 - the last key begin this one this gives
18:22 - us the lost current color value but it's
18:25 - equal to this position right so I'll
18:28 - explain why this works now kind of
18:30 - withdrawing and why I needed to look at
18:32 - this backwards okay because when we're
18:35 - looking at from bottom to top there's
18:38 - there's a reason for that
18:39 - all right and I might butcher the
18:40 - explanation but just kind of bear with
18:42 - me here for a second because this is
18:43 - important to understand why this works
18:44 - and this is the most complex thing and
18:47 - this is actually very useful you might
18:48 - want to use this a lot like shifting
18:49 - positions in a dictionary or in a list
18:52 - okay so if I go back to my little
18:54 - drawing thing here and I go like this
18:57 - okay so let's create a grid over here
19:00 - let's make it a few more rows this time
19:02 - just for a better explanation so one two
19:06 - three four okay I make it a four by four
19:08 - okay and you guys can see my fancy
19:12 - drawing skills let's make this a row so
19:17 - let's say we have a row like this guy so
19:19 - it's green make orange the orange didn't
19:23 - work okay so green can stay there orange
19:25 - like this like this and like this and
19:29 - then we'll add some more colors let's do
19:31 - like blue up here and up here okay so
19:35 - obviously this is the row that needs to
19:37 - be cleared that mine
19:38 - going over right now okay so this is the
19:40 - road that needs to be clear what happens
19:42 - when we clear this room okay so we've
19:44 - looked from the bottom of the list up
19:47 - and we found if we're looking at row
19:49 - like for now looking at Row three and we
19:52 - say Row three needs to be clear okay so
19:54 - it's cleared so we delete everything out
19:55 - of Row three right this row is now gone
19:57 - so our grid in memory just looks like
20:00 - this and this so what we need to do now
20:02 - seem to shift these position positions
20:04 - down but we don't want to shift these
20:06 - positions so that's why we're getting
20:07 - that int so we know which position push
20:10 - the positions in our grid to shift so we
20:13 - delete that row and then what we're
20:15 - doing is we're adding one and shifting
20:17 - all these positions down okay that's the
20:19 - straightforward example let's get rid of
20:21 - this and let's do this okay
20:23 - so let's say when we add our I don't
20:26 - know shape whatever to our grid we end
20:29 - up getting something that looks like
20:31 - this okay two rows that need to be
20:35 - shifted down now what we have to do is
20:38 - we have to delete this row and this room
20:40 - now here's the thing we delete this row
20:42 - we delete this row how many rows does
20:45 - this now need to move down well this
20:46 - needs to move down two rows so how do we
20:49 - know how many rows to move this down how
20:51 - how many rows some of everything else
20:53 - above it down well that is based on our
20:57 - what you call it increment here and
20:59 - that's why whenever we delete a row we
21:02 - add one to increment because we know
21:04 - that we have to now shift it down
21:06 - another row okay and that's kind of the
21:09 - way that this works if that makes sense
21:13 - now the reason then we go through and we
21:15 - look at things backwards so we don't
21:17 - overwrite existing rows now this is
21:19 - another complex thing okay you probably
21:21 - don't have to really understand this
21:22 - that much but anyways okay so let's just
21:25 - it's not gonna let me undo okay that's
21:27 - fine so we have this right now here's
21:30 - the thing we started looking at it from
21:32 - the top down to the bottom what would
21:34 - happen is we would just so let's
21:37 - actually have to add another row for
21:39 - this example to make sense okay so if I
21:41 - add another row and I say well okay mmm
21:45 - it's out of color
21:47 - let's pick yellow all right let's say we
21:49 - have a position here and we have a
21:51 - position here
21:51 - right so that means this position this
21:53 - position and this position only to move
21:55 - down so here's the thing if I move this
21:58 - one down by two
21:59 - all right or if I move it down by one or
22:02 - whatever it could possibly overwrite
22:04 - this existing position and we don't want
22:07 - that to happen so why why we have to
22:09 - start looking at it from the bottom is
22:11 - that when we start moving everything
22:12 - down we move the lowest most things down
22:14 - first so that way when we then change
22:16 - this there's no possible way we're gonna
22:18 - overwrite this right here okay because
22:22 - remember if you in a dictionary if you
22:24 - change a key and the key already exists
22:26 - well you're just gonna overwrite that
22:27 - key so that's what we started looking at
22:29 - it from the bottom if that doesn't make
22:30 - sense don't worry just that's for any of
22:33 - you that's why okay because I want to
22:35 - make sure I explain everything and you
22:36 - guys understand at least on some level
22:37 - why I'm doing what I'm doing okay so
22:40 - that's it for the explanation of clear
22:43 - rows now let's call it function so when
22:46 - are we gonna call clear rows now this is
22:47 - actually an interesting call we could
22:49 - call this function every loop but we're
22:54 - only gonna call this when our change
22:56 - piece hits the ground now the reason for
22:59 - this is because you could possibly be
23:00 - moving down the screen and at some point
23:04 - the grid would have a full row before
23:07 - your shape actually hit the ground now
23:09 - we obviously know the way in Tetris when
23:11 - you're moving down the grid until you
23:14 - like lands or you stay static we're not
23:16 - clearing anything so that's why we're
23:18 - only gonna call this if we are about to
23:21 - change the piece so clear rows what does
23:23 - clear rows take again I'd say it
23:25 - probably takes grid in locked positions
23:27 - maybe yeah
23:28 - grid and locked positions okay so
23:30 - passive the grid will pass it locked
23:32 - positions okay so then we're checking
23:34 - whenever we're changing the piece if we
23:36 - should clear a row and this can clear
23:38 - multiple rows at once okay so yeah now I
23:42 - do believe this is a little buggy in
23:43 - some instances but this is the best way
23:45 - I could get and I'm gonna work on making
23:47 - like a fix for it later on but yeah okay
23:51 - so I believe that works let's test out
23:54 - the program make sure we haven't made
23:55 - any critical errors yet
24:00 - [Music]
24:06 - let's go and see what happens
24:08 - boom and there you go the road clears
24:09 - and that seems to work okay and then I
24:13 - mean you guys can play around with this
24:14 - and see if everything's working if
24:15 - there's like a ton of bugs of this let
24:17 - me know guys cuz I will try my best to
24:19 - fix it this is the best I could do for
24:22 - now and it seems to be working fairly
24:23 - well okay so you can see it's only
24:25 - clearing the roads that are above what
24:27 - we need to clear okay so with that being
24:30 - said I think I'm gonna end the tutorial
24:33 - here and in the next video what I'm
24:36 - gonna do is I'm gonna go through more
24:37 - cosmetic stuff so like this draw text in
24:39 - the middle any other functions I need to
24:41 - do no we just need to work in main menu
24:43 - and then I'm probably gonna fix like a
24:46 - few different bugs that we might have
24:47 - found add a few stuff main menu is
24:50 - definitely something I'm gonna do and
24:51 - this is useful so you can have like
24:52 - click to start and I'm also going to add
24:54 - score so that we can kind of save score
24:56 - and track who's doing the best or what
24:59 - not okay so with that being said that's
25:01 - it for this video hopefully you guys
25:03 - enjoyed it if you did please make sure
25:04 - you leave a like and subscribe and I'll
25:06 - see you again in the next one
25:07 - [Music]