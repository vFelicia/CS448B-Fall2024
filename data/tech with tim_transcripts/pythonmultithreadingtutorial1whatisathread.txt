00:00 - hey guys and welcome back to a new
00:01 - tutorial series on multi-threading in
00:04 - Python now before I go too far I just
00:06 - want to quickly mention that if you guys
00:07 - need any help throughout these videos
00:08 - all this stuff and all the code will be
00:11 - up on my website Tech with Tim done net
00:12 - and you guys can feel free to join my
00:14 - discord server where I have a bunch of
00:16 - people that are always willing to help
00:17 - out and talk about programming and
00:18 - coding the links in the description for
00:20 - that and also you guys should follow my
00:22 - Twitter for some exclusive updates and
00:23 - when the next videos are coming out I'm
00:26 - going with that if you guys can like the
00:29 - content and you like what I'm doing on
00:31 - this channel consider supporting me for
00:33 - a small donation per month by becoming a
00:35 - patreon or by providing a donation via
00:37 - PayPal I don't make very much money off
00:39 - of youtube and any donation really is
00:42 - greatly appreciated okay so with that
00:44 - being said let's get right into this
00:45 - video and talk about what is threading
00:47 - so you've probably heard about threading
00:49 - before and it probably heard about it
00:51 - talks about the same kind of sentence as
00:53 - processes and a lot of people get
00:56 - confused on what the difference between
00:57 - a process and a threat is so that's what
00:59 - I'm gonna explain here and we're gonna
01:00 - show a bit of an example code near the
01:02 - end of the video illustrating kind of
01:04 - the differences so here I'm in my task
01:07 - manager and you can see we have a long
01:08 - list of processes and you guys have
01:10 - probably done this before open up task
01:11 - manager and maybe ended a task or ended
01:14 - a process and whatnot okay so these are
01:16 - all our processes and essentially what a
01:18 - process is is a program running on your
01:20 - computer so now let's go to the
01:22 - performance tab and let's go to our CPU
01:25 - and let's have a look down here at the
01:27 - bottom you can see we have a hundred
01:28 - fifty two processes running and 1,700
01:31 - threats so what is a threat well
01:34 - essentially each process is made up of
01:37 - different threads could be one thread
01:39 - but oftentimes it's many different
01:41 - threads and when a thread is essentially
01:43 - a task associated with a process okay so
01:46 - now we're gonna move over to this little
01:48 - illustration where I'm going to kind of
01:49 - try to show this to you so I have kind
01:52 - of a bunch of different things on the
01:54 - screen here we're gonna link these up in
01:55 - how they work together so we have this
01:57 - Python file which is what we write as
01:59 - the programmer okay we have some threads
02:02 - we have some processes we have our
02:04 - computer's memory and a CPU and just
02:07 - take note this a 4-course CPU
02:10 - so let's start with processes we already
02:14 - know to processes essentially it's a
02:16 - program that's running on our computer
02:17 - now what happens when we create a new
02:20 - process essentially is in in memory so
02:24 - in RAM we allocate some space for our
02:27 - process we say well creating this new
02:30 - process so everything that has to do
02:32 - with this process we're gonna store in
02:33 - box one and bucks one is just a little
02:36 - slice of RAM and that slice can be
02:38 - extended or it can be can become smaller
02:41 - but we have like a general location for
02:43 - that process and that's where it stores
02:45 - all of its variables all the information
02:48 - that it needs okay and that happens for
02:49 - all of our processes so whenever we
02:51 - create a new process we allocate a
02:53 - little slice of RAM for those processes
02:55 - now when we do that Ram is kind of like
02:59 - a queue and essentially it's gonna
03:01 - indicate what needs to run first what
03:02 - needs to run second and what needs to
03:04 - happen on a single core processor what
03:07 - would happen is will we read information
03:08 - from RAM like we read an instruction and
03:11 - then we'd write something back into RAM
03:13 - and we just keep doing that and keep
03:15 - following kind of the sequence of things
03:17 - that have been added to RAM but on a
03:19 - four core processor instead of doing
03:22 - things one at a time what we can do is
03:24 - we can actually split up all of the
03:26 - different tasks and all the different
03:27 - processes that we have into well four
03:30 - groups essentially allowing us to do
03:32 - things four times faster not quite but
03:35 - some one okay so we say well if we have
03:38 - four processes let's split these up onto
03:41 - each core of our CPU because each core
03:43 - can perform its own operations and do
03:45 - its own things independent of the other
03:47 - so we'll say well process one which is
03:49 - going to be stored in RAM right can go
03:51 - to court one process two can go to core
03:54 - two three two three and four to four you
03:56 - guys get the point right and that's why
03:58 - I labeled them here allowing us
03:59 - essentially to do four things at once in
04:01 - parallel so at the exact same time we
04:03 - can be doing four things now on each
04:06 - core let's say though we can't be doing
04:08 - something at the same time on a core so
04:11 - let's say we need to add a number and
04:12 - then we need to subtract a number and
04:13 - that's like core ones job is to add
04:16 - something then subtract something well
04:18 - we first have to add and then we have to
04:20 - subtract we can't do it we can't do it
04:23 - that at the exact same time
04:24 - right we got to perform operation one
04:26 - and then we can do operation two now if
04:29 - we had that split onto two cores well we
04:31 - could technically do those at the same
04:32 - time we can add one and subtract one at
04:34 - the exact same time because they're on
04:36 - two separate cores this is kind of an
04:38 - important concept to understand so now
04:40 - we kind of understand how processes work
04:42 - with the CPU they go into RAM they have
04:45 - their own little space and then their
04:46 - kind of instructions the work that needs
04:48 - to be done gets divvied up between the
04:50 - cores on our CPU essentially allowing us
04:52 - for it to do four things at once in
04:55 - parallel at the same time so now let's
04:58 - talk about threads where do these come
04:59 - in well each process is made up of a
05:02 - bunch of different threads and these
05:04 - threads are essentially different tasks
05:06 - that are running now one thread only one
05:09 - thread can be running at a time we can't
05:11 - have two threads running at the exact
05:13 - same time like they can be stacked up
05:18 - like we can have two threads that we've
05:20 - created but they're come their commands
05:22 - and their execution like if we need to
05:24 - add something and subtract things they
05:26 - have to happen one after another they
05:27 - can't happen in parallel they're
05:29 - happening in sequence okay so that's
05:32 - where threads come in they essentially
05:34 - are just a bunch of tasks that make up a
05:36 - process so where does this come in with
05:38 - our Python file well up until now likely
05:41 - you've probably just been creating
05:43 - single threaded programs which mean that
05:45 - we have to wait for one line of code to
05:47 - execute before the next line of code
05:49 - executes and that's just the way that it
05:52 - works right we can't have two things
05:53 - happening at the same time now when we
05:55 - create threads that is still true except
05:59 - we can actually switch between threads
06:00 - so we can say like maybe we have a
06:02 - function running we have two functions
06:04 - running we have one function that maybes
06:06 - counting to 100 another function that's
06:07 - counting to 50 well let's say maybe the
06:10 - function that's counting to 50 needs to
06:13 - stop for a second
06:14 - and wait for maybe some user input or
06:16 - something to happen well rather than not
06:18 - allowing the other function to run what
06:20 - we'll do is we'll simply say okay well
06:22 - if this one's waiting let's switch to
06:24 - the other thread and let that run so I'm
06:27 - going to show you an example now with
06:28 - some code and hopefully this will make
06:30 - this a bit more clear but essentially
06:32 - just I hope we kind of understood how
06:34 - this flows a little bit all right so if
06:36 - you get it just a little bit then
06:37 - you guys should be good for this part
06:39 - okay so now I'm just gonna run you
06:41 - through some code that I wrote this
06:43 - actually from the Python website I just
06:44 - kind of copied and modified it a bit
06:45 - that explains our kind of shows creating
06:48 - two threads and then their execution and
06:50 - how they kind of switch between one
06:52 - another so remember I was saying right
06:54 - that if one thread is waiting for
06:57 - something else to happen like it's not
06:58 - executing any commands it's just sitting
07:00 - there it's idle it's waiting then rather
07:02 - than waiting for that thing to happen
07:05 - let's run something else in the
07:06 - background right we have two threads
07:08 - running and one is waiting well the
07:11 - other thread can start running if that
07:13 - thread starts waiting and the other one
07:15 - has some commands and needs to be
07:16 - executed let's do that because we can
07:17 - never truly do things in threads at the
07:20 - exact same time we can't do two things
07:22 - like in the exact same like nanosecond
07:24 - millisecond right they have to happen
07:26 - one after each other but if one thread
07:29 - is not doing something the other thread
07:31 - can be doing something so that's how we
07:33 - kind of switch between things so let me
07:35 - just run this and then we'll really
07:37 - dissect what's happening so let's make
07:39 - this fullscreen and you can see that we
07:41 - go thread one thread two one two one two
07:43 - inch wait for this to happen sweet
07:47 - so essentially what we've done here is
07:50 - thread one runs okay and it's what what
07:54 - these both these threads are trying to
07:55 - do by the way is countdown to zero so
07:57 - starting at five they're trying to go to
07:58 - zero once they get to zero there takes
08:00 - it so thread we start thread one and
08:02 - then we start thread two and then thread
08:04 - one runs it goes five thread two runs it
08:08 - goes five okay and then thread one runs
08:10 - thread two runs thread one runs and
08:13 - would you look at this thread one runs
08:15 - again because it's not waiting it just
08:18 - keeps going
08:18 - so now thread one's waiting for a second
08:21 - so thread two goes thread two's waiting
08:24 - for a second thread one goes thread once
08:26 - done and now thread two goes until it
08:28 - finishes it's kind of a weird execution
08:31 - but we'll show why this happens if I
08:33 - just go here so essentially what I'm
08:36 - doing is I'm creating two threads and
08:38 - each thread runs this function it's
08:41 - called print time and all it does is it
08:42 - takes a counter which is going to start
08:44 - at five and it tries to get down to zero
08:47 - but notice that I have this time dot
08:49 - sleep in here and this
08:50 - sleep is essentially delaying the
08:52 - function a certain amount of time so my
08:56 - thread one every time it runs delays one
08:59 - second and my thread two every time it
09:01 - runs delays one point five seconds so
09:04 - what happens is and will bring up this
09:06 - console again is one thread one runs it
09:10 - does this it says Walt counter which
09:12 - means we're not at zero essentially time
09:14 - don't sleep delay the delay is one
09:16 - second so we can see we wait one second
09:18 - and then we run thread one and thread
09:21 - one goes five it prints that out it
09:23 - prints the time and then you can even
09:26 - see here it delays one second so it
09:28 - comes back up this while loop delays one
09:29 - second and since it's delayed we say
09:31 - okay well this is a perfect opportunity
09:33 - to run thread to so thread two gets run
09:36 - and you can see that it happens exactly
09:38 - one second after thread one runs because
09:41 - well it was waiting right and once that
09:43 - time sorry so it went okay now thread
09:46 - two delays for that little second of
09:48 - time and while thread two is delaying
09:50 - well it says okay this is a perfect
09:53 - opportunity to run thread one so then
09:54 - thread one runs and then what happens is
09:57 - thread one delays again right it does
09:59 - this little delay and then says oh well
10:01 - we're delaying thread one nothing's
10:02 - running so let's go to thread to sew it
10:04 - swaps goes to thread two runs same thing
10:07 - thread three runs because we're delaying
10:10 - thread to you for a second right and
10:11 - then we go back to thread one thread two
10:14 - thread one and so on
10:17 - now you might notice here that thread
10:19 - one runs twice in a row now that's
10:21 - because well thread one runs all right
10:24 - and see it's only delaying one second
10:27 - whereas thread two is delaying one point
10:29 - five seconds so this is kind of a weird
10:31 - but just think about this example right
10:33 - so thread two goes it delays
10:35 - one-and-a-half seconds this this still a
10:37 - happens one and a half seconds thread
10:39 - one runs it delays one second now the
10:42 - thing is when we go back to thread -
10:44 - it's still delaying like it's still in
10:46 - it's still waiting for one-and-a-half
10:48 - seconds to go by so if that's happening
10:51 - and we switch back to thread one thread
10:54 - one well maybe it's done is delay it's
10:56 - done it's one second delay so it just
10:58 - executes again and then it delays for
11:00 - one second so we switch back to thread
11:02 - two we check that delay that
11:04 - he's done so we run thread two and then
11:06 - we just keep going through the program
11:08 - and notice that it says exit' thread 1
11:09 - I'm just telling us that we're finished
11:11 - we've done counting to 5 so we're gonna
11:13 - get out of that thread and then thread 2
11:15 - we'll just go one after each other until
11:17 - it eventually exits and is done and that
11:20 - is kind of how threading works I know
11:23 - this might have been a little bit
11:24 - confusing in the next videos I think
11:26 - things will really clear up when we do
11:27 - some real-world examples of threading
11:29 - and maybe a bit of networking stuff
11:31 - which is a good example of threading
11:33 - yeah with that being said I hope you
11:35 - guys enjoyed the video if you do please
11:37 - make sure you leave a like and subscribe
11:39 - to the channel and let me know if
11:40 - there's anything that you'd like me to
11:41 - improve on in terms of explanation or to
11:43 - explain a little bit better in the next
11:45 - video
11:45 - [Music]