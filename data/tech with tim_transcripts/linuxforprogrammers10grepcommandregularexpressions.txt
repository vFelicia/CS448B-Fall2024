00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - linux or programmers tutorial video
00:12 - in this video i'll be covering the grep
00:15 - command now the grep command is
00:16 - extremely useful
00:18 - it's used very commonly and it actually
00:20 - exists in pretty much
00:21 - all linux distributions now what grep
00:23 - allows you to do
00:24 - is search for a pattern of specific text
00:27 - in a file in console output and in a
00:29 - bunch of other things as well now it's
00:31 - very useful there's a ton of different
00:33 - uses for the grep command
00:34 - and as like all the other videos this is
00:36 - just going to be kind of a brief
00:37 - introduction to it
00:39 - you will have to do a little bit of your
00:40 - own research and and find out a bit more
00:42 - about the grep command because i really
00:43 - just can't cover
00:44 - everything in this one video so with
00:46 - that said let's dive in
00:48 - after a quick word from the sponsor of
00:49 - this video and this series which is
00:51 - lenode
00:52 - now lenode is the best company to use
00:54 - when you're hosting a website
00:55 - app or some service in the cloud if your
00:58 - app runs on linux it will run on lenode
01:01 - and lenovo has great support
01:02 - 24 hours a day seven days a week 365
01:06 - days a year
01:07 - as i've mentioned i have been a customer
01:09 - of lenod for over two years
01:11 - i love their service i use them for all
01:13 - kinds of different projects and i just
01:15 - love that they have cheap and affordable
01:16 - servers
01:17 - that i can use for some basic hobby
01:19 - projects too and i don't have to kind of
01:20 - break the bank if i just want to get
01:22 - something spun up
01:23 - and use it for a few hours or a few days
01:25 - so anyways claim your free 100
01:27 - credit towards the node by clicking the
01:28 - link in the description
01:30 - and one last reminder to make sure that
01:32 - you sign up to get access to the last
01:34 - five videos in this tutorial series
01:36 - this is video 10 if you want to see the
01:38 - other five videos
01:39 - and you don't want to have to wait for
01:40 - potentially a long time
01:42 - then make sure you sign up at this
01:44 - platform again there will be a link in
01:45 - the description
01:46 - now lastly there is a text guide for
01:48 - this tutorial video this comes from
01:50 - lenode this is a very helpful guide
01:52 - talks about a lot of the things i'm
01:54 - going to say
01:54 - in this video and just as kind of a
01:56 - cheat sheet for some of the syntax and
01:58 - regular expression syntax and all that
02:00 - so anyways make sure you check this out
02:01 - there will be a link in the description
02:03 - to that
02:03 - so with that said let's talk about the
02:05 - grep command and actually before i do
02:07 - that
02:08 - i want to quickly show you what i've set
02:09 - up here on my system because i've
02:11 - created a bunch of files and a large
02:13 - text file that we're going to use to
02:15 - kind of test out this command
02:16 - so i'm in this folder called files and
02:19 - if i ls
02:19 - you can see that i have a bunch of files
02:21 - created here now i've also created
02:23 - another file
02:24 - this one is called grep.txt and inside
02:27 - of here you can see that we have a bunch
02:29 - of text
02:30 - and you don't have to worry about the
02:31 - contents of this text or anything like
02:32 - that you don't have to recreate this
02:34 - just understand that i've generated a
02:36 - ton of text and a bunch of empty files i
02:38 - just wrote a really basic script to do
02:40 - this
02:40 - so we had some kind of meaningful output
02:42 - for our grab command in this video
02:44 - so anyways let me show you grep so the
02:46 - syntax for the grep command
02:48 - is simply grep a pattern and then a
02:51 - file that you want to search for this
02:53 - pattern in now this is kind of the most
02:55 - basic usage of the grep command you can
02:57 - also use this to filter console output
02:59 - which i will show you in a second
03:01 - you can do a lot of other things with it
03:02 - as well but specifically if we wanted to
03:04 - search for a pattern in a file then what
03:06 - we would do is we would type the pattern
03:08 - so let's say i want to look for the
03:09 - pattern which is a and i want to find
03:11 - that in the grep.txt file i would type
03:14 - grep a
03:14 - grep.txt hit enter and this is going to
03:17 - show me all of the lines that contain
03:19 - this pattern on it so let me go back
03:21 - here let me just clear the screen and
03:23 - i'll explain this more in depth
03:25 - so this is the command that we just ran
03:26 - so what this is going to do
03:28 - is it's going to find the pattern a in
03:30 - this grep.txt
03:32 - file and whenever it finds this pattern
03:34 - is going to print out the line in which
03:36 - this pattern appears on
03:37 - now notice i keep saying pattern the
03:39 - reason i'm saying pattern is because
03:40 - we're not just searching for this
03:42 - absolute text we're searching for a
03:44 - pattern we're going to
03:46 - match whatever pattern we type here
03:48 - which can be a lot more advanced than
03:49 - this
03:50 - with all of the text in this file and if
03:53 - we ever find a match we will output the
03:55 - entire line in the file
03:57 - that contains that match even if only
03:59 - part of that line was the actual match
04:01 - so for example you could see here that
04:03 - only a is what's actually matching and
04:05 - that's highlighted in red
04:06 - but we're showing all of the lines in
04:08 - which we actually
04:09 - find a right and you'll see that some of
04:11 - the lines we have two matches because
04:12 - there was
04:13 - two a's so just keep that in mind it
04:15 - will show you the line
04:17 - in which these matches occur now as i
04:19 - said at the beginning of the video what
04:20 - grep will take or what it will look for
04:22 - is a regular expression
04:24 - pattern now i'm not going to get into
04:26 - depth about regular expressions because
04:28 - they're very complicated and there's
04:30 - a lot of stuff that you can show but i
04:31 - will show you some very basic regular
04:33 - expression syntax or patterns that you
04:36 - can write so you have an idea of what i
04:37 - mean
04:38 - so if i type grep a and then period
04:41 - what this period means when this occurs
04:43 - in a regular expression pattern
04:45 - is that we're going to match any
04:47 - character or any symbol
04:49 - with this period so when we talk about
04:51 - the pattern a
04:52 - and then period what that means is we're
04:54 - looking for anything that starts with a
04:56 - and then has any other character
04:58 - afterwards so you'll see when i run this
05:00 - that we get zed and then a and then any
05:03 - other character right and we have all
05:04 - other letters and then
05:05 - a and then any other character because
05:07 - we're looking for a
05:08 - followed by any character right now if i
05:12 - change this and instead i say
05:13 - a dot a what this means is we're looking
05:16 - for any pattern that starts with a
05:18 - has any character and then ends with it
05:20 - so now when i do this you can see that
05:22 - these are all of the patterns that we
05:23 - get
05:24 - so a dot matches any character or any
05:27 - symbol
05:27 - just keep that in mind because that's
05:28 - probably the most useful one or the most
05:30 - common one that you will use
05:32 - now another one that you can use is
05:33 - these square brackets
05:35 - now what these square brackets will do
05:36 - is look for one symbol
05:38 - or the other so if i type a comma b
05:41 - and then dot a what this means is look
05:43 - for anything that starts with a
05:45 - or starts with b that's what it means
05:47 - when you're inside of these square
05:48 - brackets
05:49 - then has any symbol and then ends in a
05:52 - so if i run this
05:53 - notice that we get a bunch of stuff that
05:54 - starts with a that starts with b
05:56 - and that has any other symbol and then
05:58 - ends with a so that's what that pattern
06:00 - did
06:01 - so i just need to take a quick pause and
06:02 - thank the other sponsor of this video
06:04 - which is algo expert
06:06 - i'll go expert is the best platform to
06:08 - use to prepare for your software
06:09 - engineering coding interviews and i
06:11 - actually work there as an
06:12 - algorithms instructor so if you want to
06:14 - check out the questions i've created on
06:15 - algo expert head to the link in the
06:17 - description
06:18 - and use the code temp with tim for a
06:20 - discount on the platform
06:22 - so now i'll show you a few other things
06:23 - that you can do with grep so let's go
06:25 - back to our command here
06:26 - so let me remove this now usually when
06:29 - you do a regular expression pattern
06:30 - you're going to put it inside of
06:31 - quotation marks
06:32 - the reason you do this is because
06:34 - there's some symbols that you type that
06:35 - will just
06:36 - kind of be messed up or interpreted
06:38 - incorrectly if they're not inside of
06:39 - quotation marks
06:40 - so keep that in mind if you're getting
06:41 - some types of issues when you're doing
06:43 - your regular expressions just
06:44 - just put the expression or the pattern
06:46 - inside of quotation marks
06:48 - anyways the next thing i wanted to show
06:49 - you though is the or operator so if you
06:51 - want to search for one pattern
06:53 - or another pattern then what you do is
06:55 - use the or operator
06:57 - so the or operator looks like this it's
06:59 - a forward slash and then a pipe
07:00 - at least i think that's a forward slash
07:02 - i don't know if you call that one the
07:03 - forward slash of the backslash someone
07:05 - can correct me in the comments
07:06 - but regardless you put a pattern on the
07:08 - left hand side and a pattern on the
07:09 - right hand side and it will look for
07:11 - either of those patterns so if i want to
07:13 - look for
07:13 - a dot b or i wanted to look for b
07:16 - dot a then i would do this and it's
07:19 - going to show me all of the patterns
07:20 - that match
07:21 - either of these so we're looking for a
07:23 - pattern that is this one
07:24 - or the other one hopefully that's clear
07:27 - but that's the or operator
07:28 - there's a few more things that you can
07:29 - do as well i don't really want to get
07:31 - into it a ton
07:32 - you can match the beginning and the end
07:34 - of lines so for example say i wanted to
07:36 - look for a
07:37 - b and then i wanted this a b to actually
07:39 - be at the end of a line i would type a b
07:42 - and then the dollar sign and what this
07:44 - means is match
07:45 - this pattern here so a b with the end of
07:48 - the line so when i do this
07:50 - it's going to find all the a b's that
07:51 - are at the end of the line
07:53 - not at the beginning of the line and of
07:55 - course if a line is just a b it would be
07:57 - at the beginning and the end of the line
07:58 - but
07:59 - you get the idea right so it's just
08:00 - showing me once at the end if i only
08:02 - want to match
08:03 - the front of the line or the beginning
08:05 - of the line i use this little hat
08:06 - so that's what's above the six or shift
08:08 - six so grab
08:10 - hat and then a b and what that does is
08:12 - show me all the a b's at the beginning
08:14 - of the line so you get the idea these
08:16 - can be really complicated you can make a
08:18 - very advanced regular expression
08:19 - patterns
08:20 - again not going to get into those too
08:21 - much that's all i wanted to cover
08:23 - so now let me show you a few more
08:24 - options that we can use with the grep
08:26 - command
08:27 - so first of all sometimes you don't just
08:29 - want to know the line
08:30 - that this pattern is on like the
08:32 - contents of the line you want to know
08:33 - the line number so if you want to know
08:35 - the line number what you do is you type
08:37 - grep hyphen n standing for the line
08:39 - number that's pretty much what it means
08:41 - and then you are going to type your
08:42 - pattern so maybe we'll do abc and then
08:44 - the file
08:45 - in this case we do grep.txt and we see
08:48 - that line 32 is what has the pattern abc
08:52 - now even if we did say a b and then dot
08:54 - this will show me all of the uh
08:56 - all of the line numbers for all of the
08:58 - different patterns so that's pretty
09:00 - helpful now there's another thing you
09:01 - can do
09:02 - which is hyphen o now what hyphen o will
09:05 - do and i believe this is a lowercase o
09:07 - not a uppercase o
09:08 - is it is just going to show you the
09:10 - matching pattern
09:12 - not the entire line now sometimes like i
09:15 - don't know why you would exactly want to
09:16 - do this
09:17 - but sometimes you don't want to see the
09:19 - entire line you only want to see the
09:21 - pattern that matched
09:23 - so for example if i were to type a b and
09:25 - we didn't have this hyphen o
09:26 - notice how it's showing me all all these
09:28 - other characters before it if i didn't
09:30 - want to see that and i just wanted to
09:31 - say
09:32 - c a b then what i would do is i would
09:34 - put hyphen o
09:35 - here so grep hyphen o a b grep.txt
09:38 - and now it's only going to show me the
09:40 - pattern it's not going to show me all of
09:42 - the letters before that
09:43 - now this is kind of a poor example
09:44 - because you know why would you want to
09:46 - do this
09:46 - but for example if we did a dot now
09:49 - we'll see just the pattern right we
09:51 - won't see
09:52 - all of the uh all of the characters that
09:54 - are not a part of the pattern but
09:56 - are on the same line so hopefully that's
09:58 - clear
09:59 - that's what hyphen o does just shows you
10:01 - the matching pattern
10:02 - then if you type hyphen c and this is
10:04 - uppercase c
10:05 - and then you type some number this is
10:08 - actually going to show you
10:09 - lines after the matched pattern so say i
10:11 - wanted to see
10:12 - like four lines after the matched
10:14 - pattern what i would type is grep
10:16 - hyphen c four and then we'll go a
10:19 - and then dot and then a and now it's
10:22 - going to show me
10:23 - four lines above and four lines below
10:26 - the matching pattern right so it shows
10:27 - it to me on both sides
10:29 - and so i had mis-explained that
10:30 - previously but it does show you on both
10:32 - sides of the pattern
10:33 - so this way you can kind of see what's
10:34 - around it now you can imagine that would
10:36 - be useful if you're searching for
10:37 - something in
10:38 - like a python file or in some you know
10:40 - programming related file because you
10:42 - could see maybe the block it was nested
10:44 - in
10:44 - and stuff like that so that's kind of
10:46 - the basic commands and options for the
10:48 - grep command
10:49 - of course there's more that you can do
10:51 - with it and the more you know about
10:52 - regular expressions the better you're
10:53 - going to be with grep
10:54 - but what you can also do with grep which
10:56 - is really useful is you can search for
10:58 - files you can look in directories and
11:00 - you can filter the output of a command
11:02 - so the most useful one is filtering the
11:04 - output of the command so i'll show you
11:06 - that first
11:06 - so if i type the ls command and then i
11:08 - type the pipe
11:10 - and then graph and then the pattern that
11:12 - i want to search for
11:13 - what this will do is it will find this
11:15 - pattern in this
11:16 - output so ls has some output right so ls
11:19 - command will run
11:20 - and then grep will search through the
11:22 - output of ls and show me all of the
11:24 - matching patterns so if i say ls
11:26 - and then grep and then a b it's going to
11:28 - show me all of the
11:30 - file names that match that pattern
11:33 - now it's kind of confusing because my
11:35 - grep.txt and my file names have the
11:37 - exact same thing
11:38 - but remember if i go ls i have a bunch
11:39 - of empty files so what i did was i did
11:42 - ls
11:42 - and then pipe and then grep and then
11:45 - let's just go
11:45 - lh and now it only shows me files that
11:48 - have lh in them right and i can use the
11:50 - same pattern i would use previously i
11:52 - could match the ending
11:53 - of the line so i would do lh like that
11:55 - and now it only shows me files that end
11:57 - in
11:57 - lh so you can use this on any command
12:00 - you don't just have to use it on
12:01 - ls for example we could say like cat and
12:05 - you know grep.txt
12:07 - and then bar and then grep and let's say
12:10 - a b and then dot and notice is going to
12:13 - give me the same thing right it's going
12:14 - to filter
12:15 - the cat command the output of the cat
12:17 - command and just give me all the
12:19 - matching patterns
12:20 - so another thing that we can do with the
12:21 - grep command is we can actually search a
12:23 - bunch of files at the same time
12:26 - so for example i just have changed my
12:27 - directories so now i'm inside this
12:29 - directory my home directory
12:31 - notice we have abc.txt a dot txt ab.txt
12:35 - abcde right so let's just nano into
12:37 - abc.txt
12:39 - let's add and hello and let's escape
12:41 - let's nano into a.txt
12:44 - and let's add and hello and escape
12:47 - and now what i'm going to do is i'm
12:48 - going to cd dot dot and i'm going to
12:50 - look inside of this entire
12:52 - directory so inside of my entire home
12:54 - directory and find all of the strings
12:56 - that are hello
12:57 - so what i'll do now is i'll just type
12:58 - grep hyphen r hyphen r
13:00 - stands for recursive so if you want to
13:02 - look in an entire directory and search
13:04 - all of the files in a directory you do
13:06 - hyphen r then you do the pattern you
13:08 - want to look for so in this case i want
13:09 - to look for hello
13:10 - and then i want to look in what
13:12 - directory i want to look in the home
13:13 - directory now i think this is just
13:15 - called root actually
13:16 - let's do grep hyphen r hello root and
13:18 - now it's going to show me
13:20 - all of the strings hello in any of the
13:22 - files that are inside of this root
13:24 - directory
13:25 - so notice inside of test2 we have low a
13:27 - bunch of times inside of abc we have
13:29 - hello
13:29 - inside of biminfo we have hello right so
13:32 - you get the idea that's what it's
13:33 - showing us
13:34 - so that is kind of the idea behind how
13:37 - grep works
13:38 - you can use it to search for text inside
13:40 - of a file you can use it to search for
13:41 - text
13:42 - inside of a directory so it looks
13:43 - through all of the files
13:45 - you can then output commands or you can
13:48 - then filter commands using grep so
13:50 - you saw when i typed cat i could filter
13:51 - that when i typed ls i could filter that
13:53 - there's a whole bunch more uses for grep
13:55 - as well
13:56 - but super useful and again definitely
13:58 - something that you need to know and be
13:59 - comfortable using
14:00 - so anyways i hope this video was helpful
14:02 - to you if it was make sure to leave a
14:03 - like
14:04 - subscribe to the channel and i hope to
14:06 - see you in the next linux for
14:07 - programmers tutorial
14:09 - [Music]
14:14 - video
14:17 - you