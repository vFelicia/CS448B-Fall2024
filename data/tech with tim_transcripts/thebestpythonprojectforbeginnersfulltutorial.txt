00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video i'm
00:12 - going to be sharing with you an awesome
00:14 - beginner project in python that is going
00:17 - to be a typing speed test now the idea
00:19 - behind this is you're going to be given
00:21 - a block of text you're going to be asked
00:23 - to type this as quickly as you can and
00:25 - then while you type it's going to record
00:26 - your words per minute and when you
00:28 - finish the text it's going to tell you
00:29 - how quickly you typed it this is a
00:31 - really awesome application really
00:33 - awesome project to work on and i'm going
00:35 - to show you how to do a ton of styling
00:37 - in the terminal so how to do something
00:39 - like clear the entire terminal right
00:40 - over a line that's already in the
00:42 - terminal change the color of your text
00:44 - change the background color of your text
00:46 - all kinds of stuff that you normally
00:47 - never do when you're working with a
00:49 - console-based application and i'm just
00:51 - very excited about this project because
00:52 - i know it's going to give a ton of value
00:54 - to a lot of you guys now i'm going to
00:56 - give you a demo in just one second but i
00:58 - want to quickly mention that this
00:59 - tutorial is designed for beginners so
01:01 - people that have maybe a little bit of
01:03 - knowledge in python have messed around
01:05 - and used things like for loops maybe
01:07 - functions variables they kind of have a
01:08 - general idea but are definitely not
01:11 - experts and are looking for some good
01:12 - kind of practice projects now if you're
01:14 - intermediate or advanced in python feel
01:16 - free to follow along as well you'll
01:17 - probably still enjoy this project but it
01:20 - really is kind of tailored towards the
01:21 - beginners looking for something that's
01:23 - decently large this is going to be about
01:24 - 100 lines of code to really work on
01:26 - their skills and teach them a lot
01:28 - anyways with that said let's look at a
01:30 - quick demo and then we'll get into the
01:32 - video so you can see here i have my
01:33 - terminal open it says welcome to this
01:35 - typing test you'll be given a block of
01:37 - text i need to type it as fast as
01:39 - possible press any key to start so i'm
01:41 - going to start and it's going to bring
01:43 - up the text like this now i'm not going
01:44 - very fast right now but the point is
01:46 - that we can just type the text and if i
01:49 - get something wrong so notice i'm
01:50 - getting something wrong here it's
01:52 - highlighting in red so this is something
01:54 - that you know you probably don't already
01:56 - know how to do and that is pretty simple
01:58 - actually but i'm going to show you how
02:00 - to do in this video how to get all the
02:02 - text highlighting and kind of nice
02:03 - styling as you see here and then the
02:05 - ability to clear the entire console so
02:08 - you can see here it says you completed
02:09 - the text your wpm was 55. so i'm going
02:12 - to hit enter and it says you want to
02:13 - play again let's play again brings up
02:16 - some text it actually does randomize the
02:18 - text but in this case we just got the
02:19 - same text that we had before anyways
02:21 - there you go that is the demo of the
02:23 - project now we're gonna hop into the
02:25 - code after a quick word from our sponsor
02:28 - before we dive in i need to thank ltm
02:30 - designer for sponsoring this video
02:33 - ltm designer is the world's most trusted
02:35 - pcb design system that enables engineers
02:37 - to effortlessly connect with every facet
02:39 - of the electronics design process ltm
02:42 - designer has used 35 years of innovation
02:45 - and development to create a truly
02:46 - unifying design environment that makes
02:48 - it the most used pcb design solution on
02:51 - the market ltm designer provides an
02:53 - intuitive and powerful interface that
02:55 - lets you design pcbs rapidly while
02:57 - interacting and collaborating with your
02:59 - mechanical designers the interface
03:01 - provides a photorealistic 3d environment
03:04 - collaboration and synchronization with
03:06 - tools including solidworks ptc creo and
03:09 - autodesk inventor realistic rigid flex
03:12 - designs multi-board assembly and much
03:15 - more ltm designer is the most popular
03:17 - ecad tool and electronics design
03:19 - software and you can get started with it
03:21 - today for free by pressing the link in
03:24 - the description and registering for a
03:26 - free trial thanks again to ltm designer
03:28 - for sponsoring this video and now let's
03:30 - dive in all right so let's go ahead and
03:32 - get started i'm here in my text editor
03:35 - i'm going to be using sublime text for
03:37 - this video not really that important you
03:39 - can use whatever you want anyways what
03:41 - i've done is opened up a folder and then
03:43 - inside of this folder i have a file
03:44 - called tutorial.pi i'm going to
03:46 - recommend you the same thing make a
03:48 - folder somewhere probably put on your
03:49 - desktop put a file inside of there that
03:51 - is a python file and then you are good
03:53 - to start working now as you guys saw we
03:56 - had some really nice styling for our
03:58 - terminal we had some different colors
03:59 - and we were able to kind of write over
04:01 - the previous text now the way we were
04:03 - able to do that was by using this module
04:06 - called curses now this is built into
04:08 - python if you're on mac or linux but if
04:10 - you're on windows you actually need to
04:12 - install it
04:13 - so if you're on windows you need to
04:14 - follow along with this step otherwise
04:16 - skip forward into the video until we
04:17 - actually start writing some code okay so
04:19 - if you guys are on windows what you need
04:21 - to do is open up your command prompt
04:23 - here and we're going to type the
04:24 - following command to install the windows
04:26 - version of this curses module
04:28 - i'm going to say pip install and this is
04:30 - going to be windows
04:32 - hyphen curses like this
04:34 - so you should run this command and it
04:36 - should install this for you and if for
04:38 - some reason this command does not work
04:39 - for you i will leave two videos on the
04:41 - screen they'll be linked in the
04:42 - description as well and they'll be cards
04:44 - on the screen showing you how to fix
04:46 - this pip command now they're called how
04:48 - to install pi game just follow along
04:50 - with the exact same steps except instead
04:52 - of installing pi game you're going to
04:53 - install windows curses now you also can
04:55 - just try here pip install and actually
04:58 - sorry this python hyphen m pip install
05:02 - and then windows hyphen curses like this
05:05 - and see if this command works for you
05:07 - and if this doesn't work then again
05:08 - follow along with those two videos
05:10 - anyways this should install the curses
05:12 - module and once you have the curses
05:13 - module installed then we are ready to go
05:16 - okay so i have curses installed and this
05:19 - is what allows me to do the styling of
05:20 - the terminal so the first thing i want
05:22 - to show you how to do is just to use
05:24 - this module and to kind of print stuff
05:26 - out to the terminal because it's going
05:27 - to be different than what we typically
05:28 - do we're not going to be using the print
05:31 - and the input statements we're going to
05:33 - be using some statements from this
05:35 - module
05:36 - okay so the first thing i'm actually
05:37 - going to do here is write another line
05:39 - i'm going to say from wrapper or sorry
05:41 - not from wrapper from curses
05:43 - import wrap now what this is going to do
05:45 - is give me something that allows me to
05:47 - initialize this cursus module because
05:49 - when i initialize the module what's
05:51 - going to happen is it's going to take
05:52 - over my terminal and it's going to allow
05:55 - me to kind of run some different
05:56 - commands on it so i use this wrapper it
05:58 - initializes curses and then as soon as
06:00 - i'm finished with the program it will
06:01 - kind of restore the terminal back to its
06:03 - previous state so it's pretty important
06:05 - that you do this anyways what i'm going
06:06 - to do here is say define main and inside
06:09 - of main i'm going to put a variable here
06:11 - which is going to be called std scr
06:14 - standing for std screen now std is your
06:17 - standard output so the standard output
06:20 - is just kind of the terminal it's where
06:21 - you're writing stuff out to and what
06:23 - this module does is kind of take that
06:25 - over and give you a screen over top of
06:28 - it that allows you to write stuff to the
06:30 - screen anyways that's what this is doing
06:32 - so it is the standard output screen okay
06:35 - perfect so now that we're inside of here
06:37 - for now what i'm going to do is show you
06:38 - the most basic thing which is just
06:40 - adding text to the screen the way you do
06:42 - this is you say std scr dot add and then
06:46 - string like that so then inside of here
06:48 - in quotation marks you just put the text
06:50 - that you want to print out to the
06:51 - console so just like a print statement
06:53 - i'm going to put the text hello world
06:54 - okay that's it this is just going to
06:56 - output the text for you then what i'm
06:58 - going to do here is i'm going to call
07:01 - wrapper and then pass my main function
07:03 - now this might look a little bit
07:04 - confusing what i'm doing is i'm passing
07:06 - this main function to this wrapper
07:08 - function so this is actually a function
07:10 - i just call it like this using the
07:12 - parentheses i pass main inside of there
07:15 - and it's going to actually call this
07:16 - function while initializing all of the
07:19 - stuff related to this module so anyways
07:21 - that's the first step all this is going
07:22 - to do is print hello world out to the
07:24 - screen now before i do that though i
07:26 - actually want to clear the entire screen
07:28 - because if i don't clear the entire
07:29 - screen we're going to have a bunch of
07:30 - junk on there so what i want to do is i
07:32 - want to say std scr dot and then clear
07:36 - this just clears the entire screen for
07:37 - me and then as soon as i do anything so
07:39 - i add text
07:41 - i need to refresh the screen so the way
07:43 - i do that is std scr dot
07:46 - and then refresh like that perfect okay
07:50 - so this will actually print hello world
07:52 - out for me all right so now that we have
07:53 - all of this i actually just want to add
07:55 - one more line here i'm going to say str
07:58 - or sorry std.scr dot and then get key
08:01 - like this with two parentheses what this
08:03 - is going to do is just wait for the user
08:05 - to type something so that way it doesn't
08:07 - immediately show this and then close the
08:09 - screen because right now if we run this
08:10 - code what's going to happen is it will
08:12 - print hello world it will refresh we'll
08:14 - see it for like a millisecond and then
08:15 - it will end we need to add this getkey
08:18 - so that we don't immediately close the
08:19 - program we wait for the user to type
08:21 - something and then we finish it okay so
08:23 - now that we have that we can run this
08:25 - code now to run this code is a little
08:26 - bit trickier than your standard python
08:28 - code you actually need to run it from
08:30 - your terminal or your command prompt
08:33 - that's because this requires a terminal
08:34 - or command prompt to actually show you
08:36 - the correct output so what we're going
08:38 - to have to do here is open up a command
08:40 - prompt or terminal again depending on
08:42 - your operating system we're going to
08:44 - have to get our working directory which
08:46 - is right here on the left hand side into
08:48 - the folder where this file is i'm going
08:51 - to show you a shortcut on windows here
08:52 - to do this and on mac i'll describe kind
08:55 - of how you can do the shortcut obviously
08:56 - i'm not on mac so i can't quite show it
08:58 - to you okay so i'm going to open up my
09:00 - windows explorer here and i just have it
09:02 - on my other screen right now i just need
09:03 - to hide some of my files and what i'm
09:05 - going to do is navigate to the path
09:07 - where my file is so i assume you know
09:10 - where your file is i mean you should
09:11 - know where you placed it anyways you can
09:13 - see here that my tutorial file is
09:14 - directly inside desktop and then
09:16 - beginner project so what i'm going to do
09:18 - is click on this menu bar here so notice
09:20 - where it's showing the path i'm just
09:21 - going to delete all of this and type cmd
09:24 - now when i do that it's going to open up
09:26 - a command prompt and notice the working
09:28 - directory which is on the left here is
09:30 - directly inside of beginner project so
09:32 - all i'm going to do now to run the code
09:34 - is type python and then the name of my
09:36 - file which is tutorial.pi
09:38 - now i'm going to hit enter and when i do
09:40 - that notice it shows me hello world and
09:42 - when i hit enter again it brings me back
09:44 - to my terminal okay that's how you run
09:46 - the code now if you're on mac you can do
09:48 - a very similar thing you can open up
09:50 - your finder you can navigate to where
09:52 - your python file is and then you can
09:54 - right click and there should be
09:56 - something that says open terminal now if
09:58 - you can't find open terminal what you're
10:00 - going to have to do is use the following
10:02 - commands cd like this so cd stands for
10:05 - change directory and to go to the parent
10:07 - directory you type cd dot dot so notice
10:10 - that brings me to desktop that's the
10:11 - parent directory of beginner project
10:13 - then if i wanted to get into beginner
10:15 - project i would type cd and then
10:17 - beginner project like that it would
10:18 - bring me into that directory so from
10:20 - wherever you are you need to change your
10:22 - directories into the correct directory
10:25 - where your python file is and then type
10:27 - python space and then the name of the
10:30 - python file you want to run now for some
10:31 - reason that doesn't work type python3
10:34 - and then the name of the file so for me
10:36 - it's tutorial.pi but for you guys it
10:38 - will be probably something else
10:40 - hopefully that clears it up it's hard to
10:42 - explain that more because i'm not
10:43 - actually on mac but you need to open up
10:45 - a terminal and get this directory here
10:47 - on the left hand side to be the
10:49 - directory where your python file is or
10:52 - what you can do is you can look for the
10:53 - exact path of your file and type python
10:57 - and then put the exact path so it would
10:58 - be on windows something like c
11:00 - colon slash another path to it or on mac
11:03 - maybe python 3 and then the path to the
11:05 - file anyways that's pretty much all that
11:07 - i can explain for right now but that is
11:08 - how you run this code
11:10 - okay so now that we know how to run this
11:13 - let's talk about how we can add some
11:14 - colors here and kind of style it a
11:16 - little bit alright so if we want to add
11:18 - color to our text what we need to do
11:20 - here is create something known as a
11:21 - color pair now a color parish is the
11:23 - foreground and a background color so the
11:25 - foreground is the text the background is
11:27 - obviously what's behind it so what i'm
11:29 - going to do is i'm going to create a
11:30 - pairing of a foreground color and a
11:31 - background color and then use that
11:33 - pairing to print out my text so i'm
11:35 - going to say curses dot and then a knit
11:37 - underscore pair at the top of my
11:39 - function here and it's important you do
11:40 - it in the function if you try to do it
11:42 - outside it's not going to work you can
11:44 - only do this once you've initialized
11:46 - curses and that's going to happen when
11:48 - we call this wrapper function and then
11:49 - it calls the main function anyways i'm
11:51 - going to say curses.init pair i'm going
11:53 - to put the id of my pair which is going
11:55 - to be 1 and then i'm going to say curses
11:58 - dot and then this is going to be color
12:00 - underscore and then whatever the color
12:01 - of the text is that i want so in this
12:03 - case i'll go with green for my
12:05 - foreground color and then for my
12:06 - background color which is the second
12:08 - color you pass i'm going to say curses
12:10 - dot and then we'll go with color
12:11 - underscore and let's just go with white
12:13 - so that we can see kind of you know a
12:15 - lot of color here
12:16 - okay so what i've done is i've said that
12:18 - i want to have the pairing with the
12:19 - foreground color green and the
12:20 - background color white be represented by
12:23 - the id1 so i need to put an integer here
12:25 - and this integer kind of represents this
12:27 - pair so if i wanted to make another pair
12:30 - then what i could do is the same thing
12:32 - and i would just change the integer here
12:34 - to be two if i had it at one then it
12:36 - would override what this pair was so i
12:38 - wanted to change it to two and then i
12:40 - could make this something like color dot
12:42 - and then can we go with yellow let's go
12:44 - all capitals
12:46 - yellow and see if that's a valid color
12:48 - okay so now we have a pair with one and
12:50 - two as the id so to use this what i'm
12:53 - going to do is go inside of my add str
12:56 - here and i'm now going to reference this
12:58 - pair now the way i do that is i say
13:00 - curses dot color underscore pair like
13:03 - this and then inside of the brackets i
13:05 - just put the id of the pair i want to
13:07 - reference so if i want it green and
13:08 - white then i put one if i wanted it
13:10 - yellow and white then i would put two
13:12 - and if i just wanted the default color i
13:14 - just remove this i don't need to include
13:16 - anyways let's give this a test here and
13:17 - see if this is going to work i'm going
13:19 - to go to my terminal and go python
13:20 - tutorial.pi and notice we get green text
13:23 - with a white background then if i hit
13:25 - any key it's going to escape and bring
13:26 - me back to the term perfect let's try
13:29 - this now with the color pair 2
13:31 - and run this
13:32 - and notice we get yellow text on a white
13:34 - background that looks pretty ugly but
13:36 - that is fine so for now the pairs that i
13:39 - want to initialize are actually just
13:40 - going to be red
13:42 - let's go with blue no do you want blue
13:45 - no let's just go with red green and
13:47 - white and then we can use those pairs
13:48 - throughout the program so i'm going to
13:50 - say curse is not a knit pair one green
13:52 - is perfect but for the background i want
13:54 - the background to be black then i want
13:57 - one that is going to be red so i'll say
13:58 - color red
14:00 - and color black
14:02 - and then i want my last color just to be
14:04 - the standard white text so i'll go three
14:07 - and then this will be color
14:09 - white like that
14:10 - okay perfect and for now we don't need
14:12 - to add any color to that
14:14 - okay so now we have our three colors we
14:15 - have one which is green two which is red
14:18 - and three which is white so now that
14:19 - we've looked at the colors the next
14:21 - thing i want to show you is how we can
14:23 - locate text differently on our terminal
14:25 - or kind of place it in a different place
14:27 - based on where we want to put it so in
14:29 - this std
14:31 - scr.ad string method that's a mouthful
14:33 - what we can actually do is specify the
14:35 - position so kind of the row and column
14:37 - that we want to start this text at so
14:40 - i'll show you what i mean but for now if
14:41 - we go with something like
14:43 - 1 0. what this is actually saying is i
14:45 - want to go one line down and start at
14:48 - the zero with character so start all the
14:49 - way furthest to the left but one line
14:52 - down so you go kind of your row and then
14:54 - your column that's how this coordinate
14:56 - system works now you'll see very quickly
14:58 - how this works is pretty straightforward
14:59 - but if i run this notice that now we're
15:01 - just on the second line down in the
15:03 - terminal so it's very easy to kind of
15:04 - place text in different places now if i
15:07 - go and do this like 1 5 you're going to
15:10 - see that now we're going to be 5
15:11 - characters over to the right so if i run
15:13 - this now we're one row down 5 characters
15:16 - to the right so we start writing from
15:18 - that place okay
15:20 - hopefully that is clear now let's just
15:22 - see what happens if i actually write
15:23 - something else so let's write this at
15:26 - like 1
15:28 - and then 0 and see what happens when i
15:30 - kind of have two colliding pieces of
15:32 - text
15:33 - so let's do this let's hit enter let's
15:35 - run the code and notice that the hello
15:37 - world i wrote second kind of overrides
15:40 - what was already on the screen so that
15:42 - can happen and that will happen based on
15:44 - how you're writing stuff out and that's
15:46 - exactly what we're going to do to kind
15:48 - of have our green text go over top of
15:50 - the white text when we're trying to type
15:52 - out the target text when we're doing
15:54 - kind of our speed test right so i just
15:56 - want to show you that you can kind of
15:58 - pick the location on where you want this
15:59 - text to go you just pass before the text
16:02 - the coordinates so you go either the row
16:05 - and then the column that you want to
16:06 - place this in and if you just want to be
16:08 - at the top left you can just leave it
16:09 - you don't need to add anything or you
16:11 - can explicitly say zero zero like that
16:14 - okay so now we have pretty much gone
16:16 - through everything in the curses module
16:18 - the last thing i'll show you is that we
16:19 - can actually get the key that people
16:21 - type so notice here that i said std
16:24 - scr.getkey
16:25 - so what i can do is store this in a
16:27 - variable and just print this out and now
16:29 - this will actually tell me the key that
16:31 - the user typed in and you'll see why
16:33 - this is important in a second but we're
16:34 - going to need to register the user's
16:36 - keystrokes so that we can see what
16:38 - they're typing and keep track of their
16:39 - word per minute right so that's what key
16:41 - will do for us we'll get the key that
16:42 - the user types so let's go to our
16:45 - terminal looks like i closed it so i'm
16:46 - going to have to open it again okay so
16:48 - i've got the command prompt open now and
16:50 - i'm just going to run this code so
16:51 - pythontutorial.pi i'll hit the key e and
16:54 - then notice it prints out e because
16:56 - that's the key that i hit okay now we've
16:58 - gone through the curses module now i
17:00 - want to start kind of building this
17:01 - speed test or this game or whatever you
17:03 - want to call it so the first thing i
17:04 - want to do is kind of have a start
17:06 - screen here that says hey would you like
17:07 - to play the game and if they say yes or
17:09 - they hit any key then we will you know
17:11 - like continue with the game and we'll
17:12 - get into the game so i'm going to write
17:14 - a function here
17:15 - i'm going to say define start underscore
17:18 - screen and this is going to take the std
17:20 - scr and the reason we need to take this
17:22 - is because we need to have access to
17:24 - this object to be able to write to the
17:27 - screen because notice we're using the
17:28 - add string method we're using clear
17:30 - we're using refresh so we just we need
17:32 - access to this to be able to actually
17:33 - write something onto the screen using
17:35 - the cursus module anyways what i'm going
17:37 - to do is i'm going to steal these lines
17:39 - right here so clear add string and
17:41 - refresh and i'm just going to put them
17:42 - inside of start screen and what i'm
17:44 - going to say is press any key to
17:46 - continue and i'll give kind of a
17:47 - description of the game so i'll say
17:49 - welcome to the
17:51 - speed
17:52 - typer test or whatever
17:54 - speed type or test speed typing test
17:57 - maybe
17:58 - and then we can do a new line so let's
18:00 - get rid of this here and let me show you
18:02 - how we can print something on a new line
18:05 - so we can use the coordinate system we
18:06 - can do something like one comma zero or
18:08 - what we can do is we can print this
18:10 - character which is a backslash n now
18:12 - when you print a backslash n what this
18:14 - does is it brings the cursor down to the
18:17 - next line and you're going to start
18:19 - writing wherever the cursor is so after
18:21 - i print this out my cursor is going to
18:23 - be at the end of this line and if i were
18:25 - to print something else so i were to do
18:26 - this line here it would go right after
18:28 - it kind of be squished together but if i
18:30 - wanted to go down to the next line i can
18:32 - put in this escape character called
18:34 - backslash n this is the new line
18:36 - character and it makes me go down to the
18:38 - next line before i start typing so now
18:40 - i'll say press
18:42 - any key
18:43 - to begin okay welcome to speed uh typing
18:46 - test press any key to begin boom and
18:48 - then what i will do is refresh the
18:50 - screen and i will just say key is equal
18:52 - to this and actually don't even need to
18:54 - store the key i just want to wait for
18:55 - the user to type something so that's
18:57 - what i'll put right here okay that's
18:59 - awesome so now what i can do is just
19:01 - call this start screen function from
19:03 - inside of this function right here so
19:05 - i'll call start screen and i'll pass the
19:07 - std scr like that and now what will
19:10 - happen is when i run the main function
19:11 - we'll initialize our colors we'll call
19:13 - the start screen we'll do this and then
19:14 - we'll continue so let's test this out
19:16 - before we go any further let's go python
19:18 - tutorial up hi welcome to speed typing
19:21 - test press any key to begin boom and
19:23 - then we begin
19:24 - okay so now that we've done that we need
19:27 - something to kind of store what our
19:29 - target text is we want to print that
19:31 - target text out to the screen and then
19:33 - ask the user to start typing it in so
19:35 - i'm going to make another function here
19:37 - and notice i'm kind of splitting all of
19:38 - my code up into different pieces of
19:40 - logic that's a good practice you should
19:42 - try to get in the habit of but that's
19:43 - what i'm trying to show you here anyways
19:45 - i'm going to say define wpm underscore
19:48 - test standing for words per minute test
19:51 - we are going to take the std scr like
19:53 - that and inside of here we're going to
19:55 - actually print out kind of what our
19:56 - target text is and then get the user to
19:59 - start typing it in so i'm going to say
20:01 - target underscore text is equal to and
20:03 - for now we'll go with hello world this
20:05 - is some test text for this app
20:09 - exclamation point and this is what we
20:10 - want the user to type in so we want to
20:12 - print this out and then we want to print
20:14 - whatever the user has typed kind of over
20:15 - top of it which you'll see in a second
20:18 - so now i'm going to say currenttext is
20:19 - equal to and i'm going to make a list
20:21 - you'll see why we need this in a second
20:23 - and for now all i'm going to do is clear
20:25 - the screen refresh it and then uh
20:28 - actually print what this text is so
20:30 - we'll start with that and then we'll
20:31 - kind of keep track of what the users
20:32 - actually typed so i'm going to steal
20:34 - again these lines because i'm just going
20:36 - to keep reusing them
20:38 - and i'm going to say
20:40 - stdscr.ad string and rather than welcome
20:43 - to speed typing test we'll just put the
20:45 - variable target text in here because
20:47 - this is what we actually want to display
20:49 - so we're going to get the target text
20:51 - which is this we're going to have our
20:53 - current text which will be what the user
20:54 - has typed
20:55 - we're going to clear the screen add this
20:57 - to the screen and then refresh and then
20:59 - again we'll just get key
21:01 - okay
21:02 - so now after we get past the start
21:04 - screen what we want to do is call
21:06 - the wpm underscore test function like
21:09 - this and pass this
21:11 - okay so let's give this a run and see
21:13 - how this is working python tutorial up
21:16 - hi let's hit enter node says hello world
21:18 - this is some test text for this app
21:21 - and when i hit enter or any key for that
21:22 - matter then it exits great so now that
21:25 - we've done that what i want to do is
21:27 - actually register the user's key presses
21:29 - and then i want to take whatever they're
21:31 - typing and kind of overlay it on top of
21:33 - this so as you saw in the demo if they
21:35 - type the character correctly i want it
21:37 - to show up green if they type it
21:38 - incorrectly i want it to be red okay
21:40 - pretty straightforward so what i'm going
21:42 - to do here is i'm going to start a while
21:46 - so i'm going to say wow true and i'm
21:48 - going to continually kind of ask the
21:50 - user to type something in and every time
21:52 - they type something i'm just going to
21:54 - overlay it in a different color on top
21:56 - of the target text so we're going to
21:58 - have to change this drastically from
22:00 - what i do right now but this is just an
22:01 - example so you can see how this is going
22:03 - to work so what i'm going to do is say
22:04 - key is equal to and then std scr dot
22:08 - and then get key which means i can
22:10 - remove this one right here because we're
22:12 - immediately going to jump into the while
22:13 - loop and then we'll get the key then i'm
22:15 - going to add this key to the current
22:17 - text and i'm going to draw the current
22:19 - text onto the screen so i'm going to say
22:22 - let's go current text like this
22:25 - dot append and i'm going to append the
22:27 - key so we're going to have a list of all
22:29 - of the keys that the user has pressed
22:31 - then i'm going to loop through every
22:33 - single one of these keys using a for
22:35 - loop and i'm going to kind of place that
22:37 - character onto the screen so i'm going
22:39 - to say 4 and we're going to go with char
22:41 - standing for character in and this is
22:43 - going to be current text
22:46 - what i'm going to do is say std scr dot
22:48 - and then this is going to be add string
22:51 - we're going to add whatever this
22:52 - character is comma and then i'm going to
22:55 - put the color that i want this to be so
22:57 - in this case i want the color to be
22:59 - let's go with green so that's going to
23:01 - be pair one so what do i need to do i
23:03 - need to say curses dot and then this is
23:05 - going to be color
23:07 - underscore pair
23:09 - 1.
23:09 - okay so let's just go through this
23:11 - quickly to make sure everything is clear
23:12 - so what we're doing is we have the
23:14 - target text we have the current text we
23:17 - are clearing the screen we are adding
23:19 - the target text to the screen we're then
23:21 - refreshing the screen we're then going
23:22 - to ask the user to enter a key so when i
23:24 - say get key this is going to wait for
23:26 - them to type something as soon as they
23:27 - type that we're going to append that to
23:29 - the current text then we're going to
23:30 - loop through every single character that
23:33 - they've typed because they're going to
23:34 - be storing that in a list so for char in
23:36 - current text we are then going to
23:38 - display that character on the screen so
23:40 - we're just going to add it and it will
23:42 - be in a different color okay now one
23:44 - thing that i want to do here
23:46 - is i want to constantly do this so
23:49 - you'll see why i want to do this in a
23:51 - second but i'm going to go here
23:53 - and i'm going to add this string the
23:56 - target text and then after i add the
23:58 - other string i'm going to refresh
24:01 - so i'm going to clear the screen every
24:02 - single time this while loop runs i am
24:04 - going to add the target text to the
24:07 - screen i am then going to add the other
24:09 - text onto the screen so whatever the
24:11 - user has typed in a different color and
24:13 - then i'm going to refresh the screen so
24:14 - that you see it so this way i'm not
24:16 - going to continually keep adding the
24:17 - same text to the screen i'm going to
24:19 - clear everything and then add whatever i
24:21 - currently have
24:22 - if the user adds another key i'll add
24:24 - that as well
24:25 - you'll see why i need this but i'll show
24:26 - you if i don't clear what's going to
24:28 - happen in one second anyways let's run
24:30 - this and let's just see what's happening
24:32 - so it says press any key to begin
24:34 - okay so hello world this is some test
24:36 - text for this app and now let's just
24:38 - type something so let's go h and notice
24:40 - it's showing up on a new line all of the
24:42 - characters that i'm typing so that's
24:44 - exactly what i expected now if i didn't
24:47 - clear the screen what would happen is we
24:49 - would
24:50 - write all of this like multiple times
24:52 - onto the screen so let me show you this
24:54 - i'm just going to get out of this
24:56 - actually we didn't even make a way to
24:58 - exit this so i'm going to hit ctrl c
25:00 - okay that doesn't work we're going to
25:01 - have to just close the terminal because
25:02 - i didn't make a way to exit yet well
25:04 - we'll have to do that in a second
25:05 - anyways if i don't clear the screen here
25:09 - and we rerun this so let me go to my
25:10 - terminal so cmd
25:13 - cd desktop cd beginner project and
25:17 - pythontutorial.pi
25:19 - now watch what happens when i start
25:20 - typing okay so first of all you can see
25:22 - that it didn't clear but if i type this
25:24 - it's going to repeat all the text a ton
25:26 - of times right because we're not
25:28 - clearing what we previously had we just
25:30 - keep adding what we had to the screen so
25:32 - that's kind of what i was getting at
25:33 - that's why we need to clear so anyways
25:35 - let's make sure we include this clear
25:37 - and now what i want to do is include
25:38 - some way for the user to actually exit
25:40 - the program so i'm just going to check
25:42 - if the key that they hit was the escape
25:45 - key and if they hit escape i'm going to
25:47 - allow them to exit because obviously we
25:48 - want some way to get out of this program
25:50 - so before i add this to the current text
25:54 - i'm just going to check
25:55 - if the ordinal value of this key and
25:57 - i'll explain what that is in a second
25:59 - is equal to and then 27. now if it is
26:02 - i'm just going to break what break is
26:04 - going to do is just get me outside of
26:06 - this wallop so it will break this
26:07 - infinite loop now the ordinal value of a
26:10 - key is its numeric representation on
26:12 - your keyboard so every single key on
26:14 - your keyboard has some number that
26:15 - represents it and this number is known
26:17 - as the ascii representation or the
26:20 - unicode representation you don't have to
26:22 - really know what that means ascii stands
26:24 - for american standard
26:26 - something something something i think
26:28 - it's like american standard code
26:30 - information
26:31 - whatever someone smarter than me in the
26:32 - comments will tell you what it stands
26:34 - for i forget or maybe i'll throw it up
26:35 - on the screen point is every single
26:37 - character has some number that
26:39 - represents it so i know that the
26:40 - character lowercase a is represented by
26:43 - 97 uppercase a is represented by 65 and
26:47 - just so happens that escape is
26:48 - represented by 27. so we're going to
26:51 - check the ordinal value when you take
26:52 - the ordinal value of an individual
26:54 - character which is what the key will be
26:56 - it will give you what it is so if it's
26:58 - 27 then we'll break that means they hit
27:00 - the escape key okay hopefully that makes
27:02 - sense we can test that out though so
27:04 - let's open up our command prompt so
27:06 - let's cd to desktop cd to the beginner
27:08 - project and then go python and then
27:11 - tutorial.pi
27:13 - and now if i hit escape notice i'm going
27:16 - to exit and i am all good
27:18 - perfect that is exactly what i wanted
27:20 - now one thing i will do here
27:22 - is i'm going to show all of this before
27:25 - i ask the user for a key the reason for
27:28 - this is right now i'm having to hit the
27:29 - key kind of two times before it shows
27:31 - anything so i want to show this first
27:33 - and then ask the user to kind of type in
27:36 - a key
27:36 - and when they type in that key then we
27:38 - will add it to their current text now
27:41 - one problem that we're going to run into
27:42 - here is that there is a bunch of special
27:44 - keys that the user could hit for example
27:46 - the backspace if the user hits the
27:49 - backspace i don't want to display the
27:51 - backspace character i actually want to
27:53 - remove one of the characters that they
27:55 - typed now since we're kind of doing this
27:57 - in curses we have to manually handle all
27:59 - of this so when i hit backspace it's not
28:00 - just going to move me back it's actually
28:02 - going to show kind of a really strange
28:04 - character on the screen so let me show
28:05 - you what i mean but if i run this code
28:07 - so python
28:08 - tutorial dot pi
28:11 - let's hit enter and let's hit the
28:13 - backspace
28:14 - notice that it's bringing my cursor
28:16 - backwards but if i start typing stuff
28:18 - here it's not actually going to delete
28:20 - that stuff right it's just bringing the
28:21 - cursor back it's not actually deleting
28:23 - anything so when i hit backspace i want
28:25 - to delete the text that i was typed so
28:27 - let's see how we can do that
28:29 - so what i'm going to do now
28:30 - is after i check if the ordinal value of
28:32 - my key is 27 i'm going to say if
28:35 - the key is in and then i'm going to
28:37 - check three things now the first thing
28:39 - i'm going to check is key underscore
28:41 - backspace
28:43 - the next thing i'm going to check i have
28:44 - to actually look at here it's going to
28:46 - be
28:47 - backslash b and then the last thing is
28:50 - going to be slash x so backslash x sorry
28:54 - 7 and then f now i understand this looks
28:57 - like complete gibberish but the thing is
28:59 - the backspace key on different operating
29:01 - systems will be represented by a bunch
29:03 - of different characters so it could be
29:04 - represented by key backspace it could be
29:07 - represented by backslash b or it could
29:09 - be represented by backslash x7f
29:12 - don't ask me why that's representation
29:14 - but that's what it could be so just to
29:15 - make sure this is going to work for all
29:17 - of you no matter what operating system
29:18 - you're on just do this now this is going
29:20 - to check if this key is in this so
29:22 - essentially if the key is equal to any
29:24 - one of these three things if it is then
29:26 - what we're going to do is we're actually
29:28 - going to pop off the last element from
29:31 - current text you'll see what i mean here
29:33 - but i'm going to say if the len of
29:36 - current text is greater than zero than
29:40 - currenttext.pop now this is one of the
29:43 - reasons why we use the list here to
29:44 - represent all the characters that we're
29:46 - typing because we can very easily and
29:48 - quickly remove the last character from
29:50 - it so what dot pop will do is it will
29:53 - remove the last character from a list or
29:55 - the last element from a list so if i
29:56 - have one two and i call dot pop on this
29:59 - list
30:00 - it just gets rid of two so now i only
30:02 - have one which is exactly what we want
30:04 - because remember current text is keeping
30:06 - track of all of the keys that we have
30:08 - pressed so if we hit the backspace we
30:10 - want to get rid of the last key that we
30:11 - input
30:12 - that's what this will now do
30:14 - now we just need to put an else
30:15 - statement here because if we hit the
30:17 - backspace we don't want to add that
30:19 - backspace key to our current text we
30:21 - just want to remove the current
30:23 - character so we'll add the else to make
30:24 - sure that if this is the case we're not
30:26 - still adding this key to the current
30:28 - text
30:29 - okay hopefully that makes sense let's
30:31 - run this code
30:33 - and let's hit enter and let's start
30:35 - typing so i'm going to say hello world
30:37 - and then i'm going to hit backspace and
30:38 - notice when i hit backspace i'm actually
30:40 - deleting the characters now which is
30:43 - precisely what i wanted so now that
30:45 - we've done this let's see how we can get
30:47 - this text to go over top of the text
30:50 - that we currently have because obviously
30:51 - that's kind of what we want we don't
30:53 - want this text to be
30:55 - what do you call it coming after it
30:56 - wanted to kind of go over top of it and
30:58 - then we want to change the color on if
31:00 - it is the correct character or not okay
31:03 - so let me escape this by hitting escape
31:05 - and let's see how we can go about doing
31:06 - that so to do this i'm just going to
31:08 - write a new function here because i
31:10 - think it makes sense to kind of separate
31:11 - displaying all of our what do you call
31:13 - it text in a separate function so i'm
31:15 - going to say define
31:17 - display
31:19 - underscore text like this we're going to
31:21 - take in our std source like this or
31:24 - sorry screen not source we're going to
31:25 - take in our target text we're going to
31:28 - take in our current text and then for
31:29 - now we'll take in wpm as well but i'm
31:32 - going to make this a default value of 0.
31:34 - now in case you're unfamiliar with this
31:36 - these are parameters which means we have
31:38 - to pass values to this function when we
31:40 - call it and if you do something like
31:42 - equal 0 this means this is a optional
31:44 - parameter so if i don't pass this
31:46 - parameter it will just have a default
31:48 - value of 0. now the reason i'm doing
31:50 - this is because we're going to have to
31:50 - calculate the words per minute in a
31:52 - second and we want to display that as
31:53 - well won't do that in this step this
31:56 - second but we're going to do that later
31:57 - okay so now that we have that what i
31:59 - want to do is display the target text
32:02 - and over top want to display the current
32:04 - text so i'm going to take all of the
32:06 - stuff that i did here so let's go with
32:09 - this right here
32:11 - the add string and the character
32:13 - and i'm going to paste this
32:14 - like that
32:15 - so let's now
32:17 - go over here so let's say we're going to
32:19 - display the target text then we're going
32:21 - to loop through all the characters in
32:22 - our current text but i want to place
32:24 - them somewhere different i want to place
32:26 - them on top of this text so i'm going to
32:28 - say this
32:29 - for i comma char
32:31 - in enumerate
32:32 - current text
32:34 - now if you're unfamiliar with enumerate
32:36 - what this is going to do
32:37 - is it's going to give us the element
32:39 - from our current text as well as the
32:41 - index in the list so remember current
32:43 - text is a list let's say we have the
32:45 - elements 1 2 3 4 like that
32:47 - what's going to happen when i enumerate
32:48 - over this is i is going to start out
32:50 - being equal to 0 0 is going to reference
32:53 - this first index right here and then
32:55 - char is going to be equal to 1. now of
32:57 - course these would be characters but
32:59 - hopefully you get the idea so the next
33:00 - element would be 2. so chart would be 2
33:02 - and i would be 1. this gives me the
33:04 - index as well as the element it's just
33:07 - kind of a cleaner way than just going by
33:09 - the index and then manually getting the
33:10 - element hopefully that makes sense but
33:13 - the thing is whatever character that i
33:15 - am on so if i'm on character 0 or
33:18 - character 1 or character 2 according to
33:20 - their indexes in the list i can use that
33:22 - to determine where i should place this
33:24 - character
33:25 - so i'm going to say
33:27 - 0 comma i like this so the point is i is
33:30 - going to keep getting incremented by 1.
33:32 - this is representing what character that
33:34 - i'm going to place this on and so i want
33:36 - to place it on the very first character
33:38 - which is 0 and then on 1 then on 2 then
33:40 - on 3 then on 4 so this will be overlaid
33:43 - on top of my target text
33:45 - hopefully that makes a little bit of
33:46 - sense but since i is going up by 1 in
33:49 - every single iteration this means every
33:51 - character that i'm drawing onto the
33:52 - screen will kind of be incremented by
33:54 - one and it will go directly over top of
33:57 - my target text
33:58 - so let me just show you and hopefully
34:00 - this will clear it up what i need to do
34:01 - though is i do need to call this
34:03 - function so right between my clear and
34:05 - my refresh i'm going to say display text
34:08 - and then i'm going to pass this all of
34:10 - the parameters so std scr i'm going to
34:12 - pass by target text and i'm going to
34:14 - pass my current text as well
34:17 - okay and then inside of here sorry i'm
34:19 - referencing target text
34:21 - when installing to be referencing just
34:23 - current
34:24 - okay hopefully that is all good now
34:27 - let's go ahead and run our code here so
34:28 - python tutorial.pi
34:30 - let's hit enter and now notice when i
34:33 - type hello
34:34 - that it's going over top of my text
34:37 - right and if i hit space of course it's
34:38 - going to remove those characters because
34:40 - well
34:41 - that's what it's doing but you get the
34:42 - idea okay and then i can go like this
34:45 - so now what we need to do is we need to
34:46 - change the color of this text based on
34:49 - if it's the correct character or not
34:51 - okay but you can see that it is going
34:52 - directly over the top of this text and
34:54 - even though it's kind of replacing the
34:56 - text it looks like it's just changing
34:57 - the color
34:58 - okay that's what we want so i'm going to
34:59 - hit escape and now we're going to modify
35:02 - the color based on if this is the
35:04 - correct character
35:05 - now we have what the correct characters
35:08 - are in our target text and then we have
35:10 - whatever our current text is so what we
35:12 - can actually do is we can compare every
35:14 - single character in our current text to
35:16 - the corresponding character in the
35:18 - target text and see if we're getting the
35:20 - correct one so i'm just going to say the
35:22 - correct
35:24 - underscore char like this is equal to
35:26 - the target
35:28 - at index i so if my target text is
35:30 - something like
35:32 - hello
35:33 - and then i have my characters as like h
35:35 - comma and then l like this if i'm
35:37 - accessing the zero with index so i'm
35:39 - looking at the first character i can
35:40 - look at the zeroth index in this string
35:43 - and i can check if the character i have
35:44 - here matches with that character if they
35:47 - do then i can show this in green if they
35:49 - don't then i can show this in red so i'm
35:51 - going to say that my color is equal to
35:54 - and then this is going to be curses dot
35:56 - color pair at 1 like that and then i'll
35:59 - say if the char
36:02 - is not equal to the correct char then
36:05 - the color
36:06 - is going to be equal to curses dot color
36:09 - pair and then what do we use for red
36:11 - i got to see this we use 2. so let's go
36:14 - here and do two
36:15 - and then i'll put the color variable so
36:17 - let me slow down to make sure i'm not
36:18 - going too quickly here all we're doing
36:20 - is defining a color variable this is
36:22 - equal to curses.color pair 1. so i'm
36:24 - just storing it in a variable it's the
36:26 - same thing as if i were to directly put
36:27 - it inside of here and then i'm saying if
36:30 - the character does not equal the correct
36:32 - character then we'll change the color
36:34 - from the default green that i have right
36:36 - here to be red and then whatever the
36:38 - color variable is that's what we're
36:39 - going to show for this character when we
36:42 - draw it on the screen and of course
36:44 - we're just comparing the correct
36:45 - character to the current character
36:47 - and we're getting the correct character
36:48 - by accessing the corresponding index in
36:50 - this string so let me get rid of these
36:52 - here and now let us try this so let's go
36:56 - back here let's run the code and let's
36:58 - hit enter and let's go hello and notice
37:01 - if i type something incorrectly now it
37:03 - is showing up in red
37:05 - but if i do it correctly then we are
37:07 - getting it in the correct color awesome
37:09 - okay so we are well on our way to
37:11 - completing this application we have a
37:13 - lot of what we needed done uh let me
37:15 - just have a look at my cheat sheet here
37:16 - and see what we need to do next all
37:18 - right so the next thing that we need to
37:19 - do is actually handle what's going to
37:21 - happen when we complete the text we also
37:24 - need to handle showing the words per
37:26 - minute because that's kind of the whole
37:27 - point of this typing speed test so i'm
37:29 - going to run the code one more time and
37:31 - show you that if i type more characters
37:34 - than in this text we're going to get an
37:35 - error notice that we get a crash here
37:38 - and it says index out of range and the
37:40 - reason why we're getting this problem
37:42 - here is because we have more characters
37:44 - in our current text than we do in our
37:46 - target text which means when we try to
37:48 - access target at index i
37:51 - we get a list index out of range because
37:53 - we're trying to access an element in the
37:54 - target that doesn't exist
37:56 - again that's because we have more
37:58 - characters in our list in our current
37:59 - text than we do in the target so when
38:02 - i'm on like the 20th element of my
38:04 - current text here and say my target text
38:07 - is only 15 elements long then i'm going
38:08 - to get a problem right i mean that's
38:10 - kind of a bad example but you get the
38:12 - idea that's what's going wrong so we
38:14 - need to make sure that once we get to
38:15 - the point where we've typed in all of
38:17 - the text or we've typed in the same
38:19 - number of characters as the target text
38:22 - we stop and we don't let them type
38:23 - anymore so what i'm going to do is after
38:26 - i look at the key here
38:29 - and after i check if it's a backspace
38:31 - i'm going to put an lf i'm going to say
38:33 - elif the len of our current text this
38:36 - will tell us how many elements are in
38:37 - the list
38:39 - is
38:40 - less than the len of our target text so
38:43 - this will make sure that we cannot add
38:46 - any more stuff to our current text
38:48 - unless there is room to add so unless
38:50 - the current text is less than the length
38:51 - of the target text we are not going to
38:53 - allow you to add another key even if
38:55 - they're the same we're still not going
38:56 - to allow you to add anything else to
38:58 - this because if you did then that would
39:00 - cause the index out of bounds exception
39:02 - so now let's try this and see if we're
39:04 - still getting that problem or not so let
39:05 - me run the code i'm going to begin and
39:08 - let's just go hello world this is some
39:11 - test text
39:13 - for this app i don't really care if i
39:15 - spell it correctly and notice here i'm
39:16 - hitting a bunch of keys but nothing's
39:18 - happening
39:19 - because
39:20 - we are already at the length of this
39:22 - text
39:23 - awesome
39:24 - okay so let's escape from that
39:26 - all right so now that we've done that i
39:27 - want to start showing the words per
39:28 - minute so we actually need to calculate
39:31 - what the person's word per minute is and
39:33 - then we need to display them now first
39:35 - let's just display it and then we can
39:36 - figure out how to calculate
39:38 - so notice i'm taking in wpm here so what
39:40 - i'm going to do is make a variable in my
39:42 - wpm test function and say wpm is equal
39:45 - to zero so that's what it will be equal
39:47 - to to start then i will pass wpm
39:50 - like that and inside of here we can just
39:52 - display it so i'm going to add to this
39:54 - string i'm going to say std.scr dot add
39:57 - underscore string such a mouthful here
40:00 - i'm going to say
40:01 - in an f string explain this in a second
40:04 - wpm and then instead of curly braces wpm
40:07 - and i'm going to put its location at one
40:09 - comma zero so that we go one line below
40:12 - where our target text is
40:14 - so what this is doing this f string is
40:16 - it allows us to actually embed python
40:18 - expressions directly inside of a string
40:20 - without having to add two strings
40:22 - together so usually you'd have to
40:23 - concatenate the strings but this is a
40:25 - little bit nicer you can use this in any
40:27 - version of python there's 3.6 and above
40:30 - to do a lowercase or uppercase f
40:32 - followed by just any string double or
40:34 - single quotation marks doesn't matter
40:35 - then you can write any regular string
40:37 - stuff that you would and if you put
40:38 - curly braces like this you can actually
40:40 - put a variable directly inside python
40:43 - will evaluate this as a string and then
40:45 - you will display that so i'm going to
40:46 - say
40:48 - wpm equals and then just wpm and that's
40:50 - all we need for right now so if we run
40:52 - the code
40:53 - so let's run this and i hit enter notice
40:56 - now we have wpm which is on the line
40:59 - below
41:00 - so now we just need to calculate the wpm
41:02 - and once we do that we will be all good
41:04 - okay so let's figure out how to
41:06 - calculate that so to calculate our words
41:08 - per minute we need to know how much time
41:10 - has a lap so far in the program we can't
41:13 - calculate our words per minute if we
41:14 - don't know how long we've been typing
41:15 - for so i'm going to go up to the top of
41:17 - my program here i'm going to import a
41:19 - module called time now time's going to
41:21 - allow me to actually time how long i've
41:23 - been typing for so i'm going to go
41:25 - inside of my wpm test function here and
41:28 - i'm going to start by putting a start
41:30 - time variable which is equal to time dot
41:33 - time now what this is going to store is
41:35 - a very large number that represents the
41:37 - number of seconds past what's known as
41:39 - an epoch now you don't actually have to
41:41 - really understand this at all the point
41:43 - is that this is going to tell us what
41:44 - kind of the current time is when we
41:46 - started doing this so right before we
41:48 - hit the while loop we'll record what our
41:50 - starting time was and then inside of the
41:52 - while loop every single iteration will
41:54 - calculate the wpm based on the start
41:57 - time so you'll see what i mean here but
41:59 - again just kind of keep keep in mind
42:01 - that what this is doing is keeping track
42:02 - of the start time it's a very very large
42:05 - number that's going to be the number of
42:06 - seconds past a certain date
42:09 - i think it's some time in like 1970 or
42:11 - something it doesn't really matter too
42:12 - much
42:13 - okay so we have the start time and what
42:15 - i'm going to say is time elapsed is
42:17 - equal to and then i'm going to get the
42:18 - current time minus the start time so the
42:21 - reason why this works is because
42:23 - time.time as i said is some like really
42:25 - large number that is the number of
42:27 - seconds past a certain date so if i call
42:29 - time.time again this is now going to
42:32 - give me the new time now this time is
42:33 - going to be larger than whatever the
42:35 - start time was so i take whatever the
42:37 - current time is subtract it from the
42:38 - start time and then that tells me how
42:40 - many seconds have elapsed and what i do
42:42 - need to do here though is use this min
42:44 - function or sorry use this max function
42:46 - and say the max of this and one you'll
42:49 - see why we need to do this but
42:50 - essentially this is going to result in
42:52 - us not getting a zero division error
42:54 - which we could get because what's going
42:56 - to happen is we're going to calculate
42:57 - the start time we're then going to go
42:58 - into the while loop we're going to
42:59 - immediately calculate the time elapsed
43:02 - and the very first time we do this the
43:04 - time elapse is going to be 0 seconds
43:05 - because the time between when we
43:07 - calculated this and this is going to be
43:09 - like nothing it's going to be the exact
43:10 - same time so this will give us 0 and
43:12 - when we have 0 when we perform the next
43:15 - operation that could give us a division
43:17 - by 0 error
43:18 - anyways now what we're going to do is
43:20 - calculate the wpm so the equation for
43:23 - wpm is a little bit complicated i'm just
43:25 - going to write it out then i'll kind of
43:26 - explain how it works so we're going to
43:28 - get the len of the current text
43:31 - underscore text like this we're going to
43:33 - divide this by the time elapsed divided
43:37 - by 60. now the idea here is that if we
43:39 - have
43:40 - say 30 characters typed so we have 30
43:43 - characters and we typed them in 30
43:45 - seconds then that means that our words
43:47 - per minute sorry our characters per
43:48 - minute would be
43:50 - 60 right if we typed 30 characters in 30
43:53 - seconds and we're trying to figure out
43:54 - how many characters we're going to type
43:55 - in the minute then we need to multiply
43:57 - our 30 characters by 2. the reason we
44:00 - need to multiply it by 2 is because 30
44:02 - is half of 60. now let's do the same
44:04 - thing except with a different time so
44:06 - let's say we type 30 characters in 15
44:09 - seconds well if we did that then our
44:10 - words per minute is going to be 120. the
44:13 - reason why we know that is because we
44:14 - can take our time elapsed so 15 we can
44:17 - divide that by 60 and that's going to
44:19 - give us 0.25 so we know we're kind of at
44:22 - a quarter of an hour so now if we take
44:24 - 30 so let's take 30 and we divide this
44:27 - by 0.25 what this is going to give us is
44:30 - 120. now you can do this with
44:32 - multiplication as well i can say 30
44:35 - multiplied by and then rather than 0.25
44:37 - i would multiply it by 4. and then the
44:39 - way i would get that is i would reverse
44:40 - this operation and i would do 60 over
44:42 - 15. the reason it's 60 is because we
44:44 - have 60 seconds in a minute so that's
44:47 - kind of the rationale here but this is
44:49 - only giving us our characters per minute
44:51 - so this right here is characters per
44:53 - minute we're going to get the len of our
44:54 - current text which is how many
44:55 - characters we've typed we're going to
44:57 - divide that by how much time has elapsed
44:59 - over 60 and that's the characters per
45:01 - minute now it turns out that the
45:03 - characters per minute divided by five is
45:06 - the words per minute so we're assuming
45:07 - the average word has five characters so
45:09 - what i'm going to do is take all this
45:11 - and now divide this by five and now this
45:13 - is the words per minute so the
45:15 - characters per minute divided by five
45:16 - gives us words per minute now one thing
45:18 - i'm going to do here
45:19 - continues to get complicated is i'm just
45:21 - going to round all of this and the
45:23 - reason i'm going to round it is so we
45:24 - don't get some crazy decimal numbers we
45:26 - just get the kind of flat words per
45:28 - minute right
45:29 - i'm sure that makes sense but anyways
45:31 - that is how you do wpm now again the
45:34 - reason why we have this max of one and
45:36 - then whatever the elapsed time is is so
45:38 - that if this is zero this will just give
45:40 - us one right if it's anything less than
45:42 - one then it gives us one so that way
45:44 - when i try to do my division so i try to
45:47 - divide the length of current text by the
45:50 - time elapsed over 60 this isn't zero
45:53 - because if that was zero then i would
45:54 - get the zero division error
45:56 - okay so now we have the wpm and this
45:58 - will be calculated every single time we
46:01 - hit a key now i'll show you here how
46:04 - this works so let's run the code
46:06 - and let's see what our wpm is going to
46:07 - be okay so notice as soon as i start
46:10 - typing then the wpm will be calculated
46:12 - however right now i'm not typing and the
46:14 - wpm is staying the same the thing is it
46:17 - really should be decreasing right but
46:19 - the reason it's not decreasing is
46:20 - because let me escape out of here
46:23 - this line in our code key equals
46:25 - stdscr.getkey
46:28 - is actually what's known as blocking now
46:30 - blocking essentially means that we're
46:31 - going to wait here we're not going to do
46:33 - anything until the user types a key
46:36 - we're going to wait for them to enter
46:37 - key that's what this line is doing it's
46:38 - very similar to the input function
46:41 - in python right
46:43 - now the thing is i don't necessarily
46:44 - want that to happen if the user doesn't
46:46 - type anything i still want to show the
46:49 - wpm i still want it to decrease and i
46:51 - still want to show the text on the
46:52 - screen so what i need to do is actually
46:55 - call this one method here that makes
46:57 - this call no longer block
46:59 - now what i'm going to do is say
47:01 - stdscr dot and then i think this is node
47:04 - delay
47:05 - and i pass true inside of here now what
47:08 - this essentially says is do not delay
47:11 - waiting for a user to hit a key the
47:13 - problem is though
47:15 - now if the user doesn't enter a key this
47:18 - line throws an exception now an
47:20 - exception is an error in python we've
47:21 - seen them so the way that we need to
47:23 - handle this is we need to say try
47:25 - like this we need to say accept like
47:28 - this and then we need to say continue
47:31 - so what this is going to do now is make
47:33 - sure that this line won't crash on us if
47:35 - the user doesn't type something in and
47:37 - then if it does crash on us we go into
47:39 - this accept statement and inside the
47:41 - accept we say continue now what continue
47:43 - does is just bring us back to the top of
47:45 - the while loop it's just going to skip
47:47 - all of this right here because if this
47:49 - line caused an exception then this key
47:52 - variable it doesn't have a value right
47:54 - just it doesn't work we don't have a key
47:56 - because you didn't type in any key so
47:58 - there's no way for me to check what key
47:59 - you typed in if you didn't actually type
48:01 - in a key or you didn't hit a key so we
48:03 - need to skip the rest of this if we
48:05 - didn't hit a key
48:07 - hopefully that makes a bit of sense
48:08 - let's go through an example and i will
48:10 - show you how this works okay so let me
48:11 - go python tutorial.pi let's hit enter
48:14 - and let's start typing and again
48:17 - we're seeing that it's actually not
48:18 - updating the wpm so let me have a look
48:20 - here and see what's going on alright so
48:22 - it turns out i just need to save the
48:23 - code and rerun and now notice
48:26 - when i do this everything is working
48:27 - right the wpm is going down
48:30 - now let's just change our code a bit
48:31 - just so i can show you kind of what was
48:33 - going to happen if we didn't implement
48:34 - this try and accept so let's get rid of
48:36 - the try and accept
48:38 - and let's now just have key equals this
48:40 - remember we have this std scr dot no
48:43 - delay which means we're not going to
48:45 - wait we're just going to continue right
48:47 - so now watch what happens when i run the
48:48 - code
48:49 - i'm going to hit enter and immediately
48:51 - my program is going to crash we get this
48:52 - no input error because this line here
48:55 - right get key didn't actually get a key
48:57 - so that's why i did the try and accept i
48:59 - just want to show you that so that that
49:00 - explanation hopefully made a bit more
49:02 - sense okay so now we're getting the wpm
49:05 - now we're able to type in the text we're
49:07 - pretty much finished except what we need
49:09 - to do is we need to figure out what's
49:11 - going to happen when you actually type
49:12 - in all of the text right because at this
49:14 - point in time when we type in all the
49:15 - text nothing actually happens so we need
49:18 - to make sure that the user when they get
49:21 - to the end of the text they've typed in
49:23 - all of the characters correctly and if
49:25 - they have then what we'll do is tell
49:26 - them hey you know you won whatever and
49:28 - then we'll prompt them to play again so
49:31 - what i'm going to do is right after this
49:33 - i'm just going to check if the user's
49:35 - current text is equal to whatever the
49:38 - target text is the only thing is the
49:40 - current text is a list and the target
49:42 - text is a string so what i need to do is
49:44 - convert this list to a string to check
49:46 - if it is the target text now there's a
49:49 - really easy way to do this in python
49:50 - when you have a list and you want to
49:52 - kind of combine it all together into a
49:53 - string you can use something called dot
49:56 - join
49:57 - now what dot join does is it takes a
49:59 - list as an argument so i'm going to pass
50:01 - to this my current text
50:04 - current underscore text like this and
50:06 - you call it on a string now what it's
50:07 - going to do is it's going to combine
50:09 - every single character from this list
50:11 - with this string right here as what's
50:13 - known as the delimiter or the separator
50:15 - so if i were to make this a space then
50:17 - what would happen when i run dot join is
50:19 - i would get say i typed hello world
50:21 - there i would get h e space l space l
50:24 - space o it would space them all out if i
50:26 - made this a hyphen then it would kind of
50:29 - combine them together with hyphens in
50:30 - between but if i just make this an empty
50:33 - string which is what i'm going to do
50:34 - then what it does is it just combines
50:36 - all the characters together because well
50:38 - it's combining them with an empty string
50:39 - so they're just getting all squished
50:41 - together hopefully that makes sense but
50:42 - that's what dot join does it just takes
50:44 - all the characters and combines them
50:46 - together with this as the separator very
50:48 - useful method when you want to convert a
50:49 - list to a string so i'm going to say if
50:52 - dot join current text is equal to the
50:54 - target text then we are done so what i'm
50:56 - going to do is i'm going to say std
50:59 - dot
51:00 - no delay
51:01 - false the reason i'm going to do this is
51:04 - because i want to show something on the
51:05 - screen and then wait for the user to hit
51:08 - a key before i continue so if i want to
51:10 - wait for them to hit a key i need to get
51:11 - rid of this no delay thing because if
51:13 - it's still no delaying then i'm going to
51:14 - get an error if i'm trying to wait for
51:16 - them to get a key
51:17 - okay then i'm just going to break so i'm
51:19 - going to say no delay false i'm going to
51:21 - break and what that's going to do is
51:23 - bring me outside of this while loop so
51:25 - now that i'm outside of this while loop
51:27 - what happens is this function is going
51:28 - to be done so it's going to bring me
51:30 - back to where this function was called
51:32 - and then out here i can actually show
51:34 - something on the screen and prompt them
51:36 - if they want to play again so i'm going
51:38 - to say std scr dot and let's go with add
51:42 - string like this we're going to add this
51:44 - on the second row down so really the
51:46 - third row because i'm putting 2 and i'm
51:48 - just going to say you
51:50 - completed the text exclamation point and
51:53 - then press
51:54 - any key to continue dot dot and then i
51:57 - will say this
51:59 - dot
52:00 - and then get key so we'll wait for the
52:03 - user to type in a key
52:05 - okay
52:06 - so let's run this now and let's see
52:09 - what's working or if it's working so
52:11 - python tutorial.pie okay hello world so
52:14 - let's go hello world
52:16 - this is some test
52:20 - if i could type properly
52:22 - for
52:23 - this app exclamation point and it says
52:25 - you complete the text press any key to
52:27 - continue great and then of course our
52:28 - wpm is 47 because that's what we ended
52:31 - up so we hit continue and then it's just
52:33 - going to exit the program
52:35 - now what i want to happen is i want it
52:37 - to actually bring us or prompt us to
52:40 - play again so rather than just doing
52:42 - this and then ending i'm actually going
52:44 - to put this in a while loop so that i
52:45 - can play as many times as i want so
52:47 - you'll see what i mean but let's go well
52:49 - true
52:50 - let's put all of this inside of here and
52:52 - then let's get the user's key and if
52:55 - they hit anything other than escape
52:57 - we're just going to have them play again
52:59 - so we're going to say key
53:01 - is equal to this
53:02 - and we'll say if the ordinal value of
53:05 - the key is equal to 27 so if they hit
53:07 - the escape key we will break so they
53:10 - will exit
53:11 - otherwise we'll just continue so we'll
53:12 - just continue with the while loop we'll
53:14 - call the wpm test function again which
53:16 - is just going to re-run all of this it
53:18 - will reset all of our variables for us
53:20 - and we will be good to go that's kind of
53:22 - the beauty of doing everything in
53:23 - functions now i don't need to have any
53:26 - weird logic to run this again
53:28 - i just re-run the function right i just
53:30 - call the function another time and we
53:32 - are good to go so let's run this now and
53:34 - see if it is working
53:36 - okay so let's hit enter and then we'll
53:38 - go hello world
53:40 - this is some
53:43 - test clearly i can't type under pressure
53:45 - here when i'm on
53:47 - the recording app exclamation point okay
53:49 - 59 that's not horrible you complete the
53:51 - text press any key to continue we hit
53:54 - enter and what happened it actually
53:56 - crashed the program uh maybe it's
53:58 - because i didn't save this ah that would
53:59 - be why i didn't save my code so let's
54:01 - rerun this again and try enter okay
54:04 - hello world this is some test text for
54:08 - this i was doing so well
54:10 - app
54:11 - exclamation point okay we hit enter and
54:14 - then it brings us right back in perfect
54:16 - that is exactly what i want let me hit
54:18 - escape and then i can quit
54:20 - okay so that is pretty much all we need
54:22 - for the functioning application
54:24 - the last thing i want to show you is how
54:25 - we can randomize the text that's on the
54:27 - screen because it's going to get pretty
54:28 - boring if we just always have the exact
54:31 - same text right that's probably not the
54:33 - best so what i've done here is i've
54:34 - created a file called text.txt now you
54:37 - can do this as well i trust you guys can
54:39 - create a text file on your own you can
54:40 - probably right click on your desktop or
54:42 - whatever and make a new file and what
54:44 - i've done
54:45 - is i've put some different text here
54:47 - on different lines so notice every
54:49 - single line has kind of a different
54:50 - piece of text that i want the user to be
54:51 - able to type and i can add as many of
54:53 - these as i would like so what i'm going
54:55 - to do is read in this text file
54:57 - store all of these pieces of text and
54:59 - then randomly select one of them for the
55:02 - user to be typing when they're going
55:04 - with this program so i'll show you how
55:06 - we can do that
55:07 - we're going to write a function here i'm
55:09 - going to say load underscore text okay
55:12 - and all this is going to do is it's
55:13 - going to open up this file it's going to
55:15 - get all the lines and it's going to
55:16 - randomly choose one now since we're
55:18 - doing something random we need to import
55:19 - the random module so i'm going to say
55:22 - import random like that
55:25 - and we are now going to load the file so
55:27 - to load a file is pretty easy you can
55:29 - say with
55:30 - open then going to put the name of the
55:32 - file i'm going to go text.txt
55:35 - and i'm going to put the mode i want to
55:36 - open it in for now it's just going to be
55:38 - r if you want to create a new file you
55:39 - would do w so that actually is right
55:41 - mode so you would open a new file in
55:44 - write mode and you could write to the
55:45 - file i'm not going to show you how to do
55:46 - that but i just wanted to mention that
55:48 - but we're going to open in read mode i'm
55:50 - going to say as f
55:51 - and then what i'm going to do is i'm
55:52 - going to read all the lines so i'm going
55:54 - to say lines equal to f dot read lines
55:57 - now what this does this with is
55:59 - essentially ensure that this file will
56:01 - be closed after we open it this is known
56:04 - as a context manager it's pretty
56:06 - advanced i don't want to explain it too
56:08 - much but we say with and then we have
56:10 - this open function this is just how you
56:11 - open a file and we say as f which means
56:14 - we're going to take this kind of file
56:15 - object here this file variable we're
56:17 - going to store it in f and then we can
56:19 - access the file by using f inside of
56:22 - this width so just like the if statement
56:24 - we have our indentation right so i'm
56:26 - going to say lines is equal to
56:27 - f.readlines this is going to give me a
56:28 - list containing all of the lines of this
56:31 - open file and then i want to randomly
56:33 - select one of those lines and return it
56:36 - so i'm going to say return
56:38 - random dot choice
56:41 - on lines
56:42 - and then dot strip
56:44 - now what random dot choice does is just
56:46 - randomly choose one element from a list
56:48 - so if i have a list with 100 different
56:50 - things inside of it just randomly picks
56:51 - one and just gives it to me so it's just
56:53 - going to give me one of these kind of
56:54 - strings of text one of these lines now
56:56 - the thing is all of these lines of text
56:59 - have an invisible character at the end
57:01 - which is backslash n now we looked at
57:03 - this this is the newline character the
57:04 - reason why they have this is to tell my
57:06 - editor to display the file in this way
57:09 - if they didn't have the backslash n i
57:11 - would have no way to know kind of where
57:12 - my line breaks are in the the text file
57:15 - so
57:16 - what i need to do is i need to remove
57:18 - this backslash n which is what dot strip
57:20 - does from all of these lines because i
57:22 - don't want the user to have to type in
57:23 - backslash n i just want to remove it
57:26 - right so i'm going to say dot strip dot
57:27 - strip will just get rid of any leading
57:29 - or trailing white space characters and a
57:31 - white space character is the backslash n
57:33 - character so that's why i have dot strip
57:36 - okay
57:36 - so now we have load text this will just
57:38 - give us some target text so rather than
57:40 - manually coding in my target text
57:43 - now i'm just going to say load text
57:45 - and this will return to me one of the
57:46 - lines from this file now it's very
57:48 - important that this file is in the same
57:50 - directory as where your python file is
57:53 - if you put this not in the same
57:54 - directory it's not going to work it just
57:56 - needs to be in the same directory so you
57:58 - can see my tutorial and text.txt are
58:00 - right beside you now if you don't want
58:01 - to do this that's totally fine you can
58:03 - just manually hard code in the text but
58:05 - i figured i'd show this to you because
58:06 - it is kind of useful okay so that is
58:08 - pretty much gonna wrap it all up let's
58:10 - do a few tests here and make sure i
58:11 - haven't messed anything up too badly and
58:13 - then we'll wrap up the video
58:15 - so let's hit any key to begin and let's
58:18 - go subscribe so this looks like it's
58:20 - working to tech
58:22 - with tim
58:24 - on youtube clearly not for typing
58:26 - lessons okay perfect 43 solid i'm sure
58:29 - many of you can type a lot faster than
58:31 - that but let's go on to the next one and
58:32 - then notice it gives me a different
58:34 - string of text we can escape let me just
58:36 - run it again and okay it's giving me
58:39 - another test i'm just going to keep
58:40 - running this to make sure it's going
58:41 - through all of them and awesome okay so
58:43 - it does give me all of the different
58:45 - options that i have of course you can
58:46 - add more to this text file if you like
58:49 - so with that said that is going to wrap
58:51 - up the video
58:52 - there you go we have our wpm tester and
58:55 - i've showed you how we can add all kinds
58:56 - of styles and nice stuff to our terminal
58:59 - i thought this was a really fun beginner
59:01 - project i do kind of admit it's a little
59:03 - bit harder than maybe what i would
59:04 - consider beginner but i still think you
59:06 - guys were probably able to follow along
59:08 - at least i hope you were let me know in
59:09 - the comments down below and this showed
59:11 - you a ton of cool stuff that now you can
59:13 - add to your own projects if you guys
59:15 - have any ideas for what you'd like to
59:16 - see on this channel in the future please
59:18 - do let me know i'm always open to
59:19 - listening to your different project
59:20 - ideas or tutorial series or whatever you
59:23 - want in anyways i hope you all enjoyed
59:25 - if you did make sure to leave a like
59:27 - subscribe to the channel i will see you
59:28 - in another youtube video
59:31 - [Music]