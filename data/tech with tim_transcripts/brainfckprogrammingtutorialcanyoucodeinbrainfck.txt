00:00 - hello everybody and welcome back so in
00:01 - this video I'm going to be challenging
00:03 - you to try to understand in write code
00:05 - in the most convoluted language I've
00:07 - ever used which I'm gonna call for the
00:09 - purpose of this being a family channel
00:11 - brain now I know you all know the name
00:13 - of this language and you can probably
00:14 - assume why it's so complicated and why
00:16 - it is named after that and on the left
00:18 - side of my screen here you can actually
00:19 - see that this is an example of a program
00:21 - written and again what I'm gonna call
00:23 - brain now if I go ahead and run this
00:25 - code we can see this actually prints
00:27 - hello world so if you're interested in
00:29 - seeing how this works why this works and
00:31 - learning a little bit about how you can
00:33 - write code in brain then follow along
00:34 - and be showing you how to set this up
00:36 - what these basic commands do and then
00:38 - we're gonna walk through how we can
00:39 - actually go ahead and create this hello
00:40 - world program okay so I'm gonna start
00:42 - with a very brief overview of this
00:44 - language and then we'll actually get
00:45 - into a few examples and talk about
00:46 - exactly how it works with all of these
00:48 - key characters which we can see here so
00:51 - this language is extremely small it
00:52 - consists of 8 key commands and those are
00:55 - the only things that you can use these
00:57 - are the commands here you can read them
00:59 - if you want although we will go over
01:00 - them in a second and this language is
01:01 - actually designed to be able to run on
01:03 - very very small interpreters or
01:05 - compilers in fact the record compiler
01:09 - for this language that has been written
01:10 - is actually only a hundred bytes itself
01:12 - which is extremely small so what I'm
01:15 - gonna do now is hop over to the white
01:16 - board and I'm gonna explain exactly how
01:18 - this language works with a few visual
01:19 - examples ok so I need to start with some
01:22 - fundamental concepts here to make sure
01:23 - everyone's on the same page and I'm just
01:25 - going to explain what a bit and what a
01:27 - byte is because we need to know that to
01:29 - be able to deal with brain so a bit is
01:31 - either a 0 or a 1 this is what we call a
01:34 - bit so one of these like one of these
01:37 - two things is a bit so that means if we
01:40 - have say two zeros here this is two bits
01:43 - now I'm sure some of you have seen
01:45 - binary before I'm not going to really
01:47 - explain what binary is or the binary
01:49 - numbering system but one byte is
01:51 - consistent of eight bits so we can have
01:54 - this here so that's four two three four
01:58 - and the way that we actually figure out
02:00 - what numbers are when we're looking at
02:01 - bits is we say the first bit is
02:03 - equivalent to 2 to the 0 the second bit
02:07 - is equivalent to 2 to the 1 then 2 to
02:09 - the 2 then 2 to the 3 4 dot dot dot
02:12 - until 2 to the 7
02:13 - which means that say we put a one here
02:16 - and the rest are zeros all we do is
02:19 - multiply in this case 2 to the 3 by 1
02:22 - what is 2 to the 3 that's 8 that means
02:24 - this down here represents 8 in our
02:26 - decimal numbering system that's as much
02:28 - as I'm going to explain for the binary
02:31 - digits but just understand that that's
02:32 - what a bit is and a byte is consistent
02:35 - of 8 bits and while a byte tells us a
02:38 - value between 0 and 255 so if we have 1
02:41 - bit since our one byte since we start at
02:44 - 0 here right so 2 to the 0 and we go to
02:47 - 2 to the 7 well 2 to the 7 is 128 but
02:50 - since we can represent all the other
02:51 - combination of numbers we can actually
02:53 - represent what is it 2 to the 8 minus 1
02:57 - combinations of numbers which is equal
02:59 - to 255 you ever see an RGB pixel guess
03:03 - what that's consistent of 3 bytes
03:05 - because we have red green blue all those
03:07 - values between 0 and 255 and each byte
03:09 - can represent between 0 and 255 again
03:12 - why you need 3 bytes to represent our GB
03:14 - pixel so that's the basis of bytes and
03:17 - bits hopefully that makes sense and now
03:18 - we'll move on to the next component
03:19 - which is the actual language itself and
03:21 - what we call the memory block so I'm
03:24 - going fast here but that's just cuz I
03:25 - assume most of you already know this so
03:27 - this is what we call the memory block
03:28 - and this is the most fundamental thing
03:30 - to understand in our brain programs so
03:34 - our memory Blanc is made up of a certain
03:36 - amount of space and this space is pretty
03:38 - much where we're allowed to store values
03:41 - it's where we're allowed to take values
03:42 - add values manipulate values and each
03:45 - one of these little slots that I've
03:47 - drawn here is one byte now remember a
03:50 - byte is simply made up of eight bits
03:53 - which means one of these slots can
03:55 - represent a value between 0 and 255 and
03:58 - all of these little slots are what we're
04:00 - gonna think of as almost like our little
04:02 - variables right they're not really
04:03 - variables but you can think of them like
04:05 - that and what we need to reference in
04:08 - our program so we could say that this is
04:10 - slot 0 this is slot 1 this is slot 2 all
04:12 - the way until we get to slot at some
04:15 - value which in this case I'm going to
04:17 - say 2 to the 16 so for our program we're
04:19 - gonna use 2 to the 16 slots so we're
04:22 - gonna use a memory size of 2 to the 16
04:24 - what that means
04:26 - is that we actually have 65,000 300
04:30 - something slots which is not even one
04:32 - megabyte so just keep that in mind we
04:34 - have a very small amount of memory that
04:35 - we're working with that's one of the
04:37 - advantages of this program is that you
04:39 - need a very small amount of memory to
04:40 - actually do things so that's what we
04:42 - have we have this memory block each slot
04:45 - has a byte in it so that's eight bits
04:47 - that's a value between 0 and 255 if you
04:49 - needed to represent a number larger than
04:51 - that you would have to use more than one
04:52 - slot so that's the way this works and
04:55 - this actually compares a lot to some
04:56 - lower-level computing and any of you
04:58 - that would have done like a computer
04:59 - architecture class probably have a
05:01 - really good idea what I'm talking about
05:02 - right now because you probably learn
05:04 - that in that class assuming you're
05:05 - paying attention
05:06 - so all these slots start off at the
05:08 - value 0 that's something to understand
05:11 - and all these are just initialized at 0
05:12 - 0 for us means null it means there's
05:15 - nothing there or you know the number 0
05:17 - now the next thing we need to talk about
05:18 - is a pointer so since we have this
05:21 - memory block we need to have some way of
05:23 - accessing these different values so how
05:25 - do I change you know memory block 2 to
05:27 - the 16 or how do I change memory block -
05:30 - well I do that using the pointer so the
05:32 - pointer which I've written here which is
05:34 - PTR simply tells us what memory block
05:36 - we're at right now
05:38 - so the pointer is going to store a value
05:40 - between 0 and 2 to the 16 right because
05:43 - that's going to tell us the number
05:45 - representing which memory block we
05:47 - should be modifying or we should be
05:49 - changed so that's something to
05:50 - understand that's what the pointer does
05:51 - the pointers some numeric value between
05:53 - 0 and 2 to the 16 so now I'm gonna to
05:56 - show you the main commands in brain so
05:59 - what we need to do essentially is
06:00 - manipulate the pointer and manipulate
06:02 - the values in these cells to get some
06:04 - output that we want so remember that in
06:07 - these cells these values are between 0
06:09 - and 255 and the goal of our program here
06:12 - when we start writing is going to be to
06:13 - print hello world so how the heck am I
06:16 - supposed to get a character when the
06:18 - only things that I have in these cells
06:19 - are numbers well this is where we talk
06:21 - about something called a ski so a ski I
06:24 - actually forget exactly what it stands
06:26 - for is essentially a way of using
06:28 - integers to encode or represent some
06:31 - character so I don't know all the ASCII
06:33 - values off by heart I'm going to show us
06:35 - an ASCII table later that tells us what
06:37 - this is but essentially the basics is
06:39 - let's say
06:40 - the number 65 actually represents the
06:42 - capital letter a so that would mean 66
06:46 - represents B and then if you add I guess
06:48 - 26 to that and then add 1 that would be
06:51 - the lowercase letter A and these are
06:53 - kind of the characters that we need to
06:54 - use if you want to do an exclamation
06:55 - point you'd have to look up what that
06:57 - value is and ask you to see what it is
06:59 - but the idea here is if we want to print
07:01 - something out we have to change the
07:03 - value inside of our slot to be equal to
07:05 - the ASCII value of the character that we
07:08 - want to show so if I wanted to show
07:09 - capital A I would need to change one of
07:12 - the values inside of my slots here to be
07:14 - 65 and then print out the value of this
07:17 - slot and it would be converted to the
07:19 - ASCII value and it would show that for
07:21 - us so that's the basics with ASCII
07:23 - hopefully that makes sense look up an
07:25 - ASCII table if you want I'll show one in
07:26 - a second but it's it's pretty easy to
07:29 - understand it's nothing too complicated
07:30 - ok so here are the commands again we
07:34 - want to print hello world I'm not gonna
07:35 - show this example exactly here the first
07:37 - command is move the pointer left so this
07:40 - less than sign here that I've just
07:42 - circled means move the pointer left um
07:44 - you could call it greater than if you
07:45 - want so essentially if we're at 0 which
07:48 - where the pointer starts it's always
07:50 - starts that memory location 0 so the
07:52 - pointer starts at 0 what we would do is
07:54 - actually circle this pointer back and go
07:57 - to the very end of our memory block
07:58 - which would be at the location to the 60
08:00 - so if we did that and we go all the way
08:04 - the back right now if our pointer was
08:05 - here at memory location 1 then we would
08:08 - simply move the pointer back 1 right so
08:11 - we would go boom here and then it would
08:13 - be at location 0 so again the goal of
08:16 - the pointer is just tell us where we are
08:18 - it's our way of navigating around and
08:20 - then you can assume that if that moves
08:22 - us back this command here it moves us
08:25 - forward so this moves back this moves
08:28 - forward so this goes to the right like
08:30 - that so our pointer would go here and
08:31 - again if we had our pointer here and we
08:34 - executed that go right command what
08:36 - would happen is we would loop all the
08:37 - way back and we would go to the very
08:39 - beginning and be at memory location 0 so
08:42 - that's the basics between navigating the
08:43 - pointer hopefully that makes sense you
08:45 - can use those less than and greater than
08:46 - signs to go you know right left right
08:48 - left right left however you want so now
08:51 - that we know that we can talk about how
08:53 - do we
08:53 - they changed the values at some memory
08:55 - cell so since we can navigate this
08:57 - pointer and move it around we can get to
08:59 - whatever cell we want just by moving the
09:02 - certain amount of time so doing this
09:03 - command a certain amount of time so
09:05 - right if we want to move over five we
09:06 - right if I right it's the basics if we
09:08 - want to modify the cell we can use the
09:11 - plus which stands for increment or the
09:12 - minus which stands for decrement so to
09:15 - put it in programmer terms the plus is
09:17 - plus equals one the minus is minus
09:18 - equals one if you're in another language
09:20 - that's gonna be like plus plus or minus
09:22 - - so when we execute the plus command
09:25 - what happens is whatever location we're
09:28 - currently at 1 the value 1 gets added to
09:31 - it so we go like that right if we did
09:34 - plus twice so say my code over here like
09:37 - this is the code that I'm executing then
09:39 - what would happen is this value we would
09:41 - change to b2 and let's say we did
09:43 - something like plus minus so we execute
09:45 - this code then what would happen is well
09:48 - we would stay the same because we added
09:49 - and then we subtracted right so that's
09:51 - the basics of the plus the increment
09:53 - decrement pretty straightforward so
09:55 - that's kind of the idea here is like if
09:57 - you want to represent say the character
09:59 - H then you somehow have to change this
10:02 - value in this block here whatever block
10:04 - you want to represent the character H to
10:06 - be 65 and then print out the value of
10:08 - that block which I'm gonna show you how
10:10 - to do with this next man so let's erase
10:12 - some stuff let's get this cleaned up and
10:13 - I'll show you the rest okay so the next
10:15 - command to talk about is the period now
10:17 - the period stands for print byte now
10:21 - what that means is whatever the byte is
10:23 - at the current pointer right so we've
10:25 - navigated the pointer to where we want
10:27 - it to be and then we call this plus like
10:29 - this it will output the ASCII value
10:31 - associated with the number at that
10:34 - location so I don't know what the ASCII
10:36 - value is for two but let's say we have
10:38 - that classic example of 65 if we printed
10:41 - when our pointer was at 65 so let's just
10:43 - assume you know like this is our memory
10:45 - block maybe location 1 our pointers here
10:47 - then we would print out the capital
10:49 - character a the next command that we
10:51 - need to look at is the comma so the
10:53 - comma actually is input byte so input
10:56 - byte like this it's gonna take in some
10:59 - byte it's gonna convert that byte so
11:01 - there's gonna be a character right it's
11:02 - gonna take in you know some letter I'm
11:04 - gonna convert it to is no numeric value
11:06 - and it's gonna
11:07 - store it in whatever location were
11:09 - currently at and it will override
11:10 - anything that's already there
11:12 - so let's erase this so if our pointer is
11:15 - at memory location 0 which we can see
11:17 - because that's where it is then if we
11:19 - call the comma
11:20 - we'll actually wait for the user to type
11:23 - something in so let's say I type a then
11:25 - what will happen is wherever our pointer
11:27 - is we will change what's in this
11:29 - location to be the integer value
11:32 - represented with that character in this
11:34 - case it's gonna be 65 right and those
11:36 - are the basic commands now we're gonna
11:38 - talk about looping which is a little bit
11:39 - more complicated but you should
11:41 - hopefully understand that if you've
11:42 - understood everything up until this
11:43 - point so to loop we have our last two
11:46 - commands which are open loop and closed
11:48 - loop so this is open and this is closed
11:51 - like that now what we put in here will
11:53 - happen a set amount of times now it's
11:56 - better for me to explain this when we
11:57 - actually write the code so I'll kind of
11:59 - refrain from going too far into it but
12:01 - whenever you open a bracket you must
12:03 - close it somewhere just like if you open
12:05 - a squiggly bracket in Java you have to
12:07 - close it somewhere unless you're doing
12:08 - something crazy that I just don't know
12:10 - about in Java but the point is right is
12:12 - that the way these work is if at the
12:15 - current pointer location the value is 0
12:19 - so if we you know actually I'll leave
12:21 - that at 65 for now but if when we
12:23 - encounter this sign so let's say our
12:26 - code is like you know plus plus so we're
12:29 - gonna increment that I want to change
12:31 - this actually to be a better example
12:32 - let's put this at 2 so let's say plus
12:34 - plus is our current code so we write
12:36 - code like that
12:37 - so our pointer started at 0 plus plus we
12:39 - changed it to 2 and then we encountered
12:41 - this open which meant start loop what
12:44 - would happen is we would check what our
12:46 - value is at the current pointer location
12:48 - and if it was nonzero we would enter the
12:51 - loop if it was 0 what we would do is we
12:55 - would jump to wherever this close is
12:57 - like this now I'll talk about why that
12:59 - works in a minute but understand that if
13:02 - wherever the current pointer value is
13:03 - that we're at is nonzero so anything
13:06 - other than 0 will enter into whatever is
13:08 - inside of this set of brackets if it is
13:11 - 0 we're gonna jump to wherever the
13:13 - ending loop is so we would jump to here
13:15 - and we would execute the next commit
13:17 - that's how that works so if in here I
13:20 - had
13:21 - say plus plus like that and then I put
13:24 - actually I need yeah I need to make this
13:26 - a little bit okay we're gonna do plus go
13:28 - back - and then I'm actually gonna go
13:31 - forward in here so this is going to be
13:33 - our code and we're going to illustrate
13:33 - how this works we have plus plus we
13:36 - increment that to two we come here since
13:39 - the current value is not zero we entered
13:41 - the loop and then we move our pointer to
13:43 - the right one so we move it to the right
13:44 - which we'll do like that so we'll go
13:46 - here and we have PTR now here then we're
13:49 - gonna plus which means what we're gonna
13:51 - do is add one to this so this becomes 1
13:54 - then what we're gonna do is move the
13:56 - pointer back so let's move the pointer
13:59 - back so what that means is we're now
14:00 - gonna be at 2 so let's do that so we go
14:02 - to 2 and then here we have the minus
14:06 - sign so we decrement at 2 so let's do
14:09 - that hopefully you guys are
14:09 - understanding what's happening here so
14:11 - we decrement that 2 and then what we do
14:14 - is we reach this and what this says is
14:17 - this at the end of the loop if the value
14:19 - at our current pointer is nonzero jump
14:22 - to the start of the loop if it is zero
14:25 - go to the next command that's what that
14:27 - says so since the value at our current
14:29 - pointer is 1 we're gonna jump into the
14:32 - loop again which means the first thing
14:33 - we're gonna do is move right so we move
14:36 - our pointer to the right then we're
14:37 - gonna add 1 so what we're gonna do is
14:39 - we're going to take this and we're gonna
14:40 - go here and we're gonna add 1 then we're
14:42 - gonna move our pointer back to the left
14:44 - so we move our pointer then we're gonna
14:47 - change this to be 0 because we're gonna
14:49 - decorate then what's gonna happen is
14:51 - when we hit this here we're gonna check
14:53 - if the value at our pointer is 0 since
14:56 - it is we're gonna go to the next command
14:58 - so we'll go to the next command
14:59 - whatever's past the end of this loop
15:01 - here and that is how the loop works so
15:04 - you can see what you need to do when you
15:05 - make a loop is have some memory address
15:07 - keep track of how many times you want to
15:09 - loop so you set it to what you want to
15:12 - loop at and then you decrement that
15:14 - memory address so that when that memory
15:16 - address gets to 0 you stop looping and
15:19 - you can see here all I did was transfer
15:21 - the value from this block here to this
15:24 - block using a loop now let's get into
15:26 - the fun stuff which is actually writing
15:28 - the code okay so what I have in front of
15:30 - me here as I promised probably like 12
15:32 - times is the ASCII table
15:34 - so this is what I'm gonna recommend you
15:35 - have beside you when you program in
15:37 - brain just maybe open another window or
15:39 - something so that you know what values
15:41 - you actually need to make but you can
15:43 - see that like I was saying the decimal
15:44 - sixty-five I know it's kind of small but
15:46 - I'll zoom in a little bit is
15:47 - representing the character a and the
15:50 - decimal ninety seven is representing the
15:52 - lowercase character a notice there is a
15:54 - difference and if you want to look up
15:56 - any character on your keyboard actually
15:58 - I'm pretty sure any character on your
15:59 - keyboard
16:00 - you can do that by just looking for the
16:02 - number and looking for the character and
16:04 - that's the the mapping right and then
16:06 - that's pretty much all you need to know
16:08 - once you know these characters or you
16:10 - can reference this ASCII table to
16:11 - understand what it's saying you can
16:12 - generate any character you want just
16:14 - notice though that it's kind of
16:16 - counterintuitive forty eight actually
16:17 - represents zero forty nine is one so
16:20 - don't think that because you have a zero
16:22 - there that means you're actually gonna
16:23 - output the number zero in fact that's
16:25 - gonna output null which means nothing
16:28 - now if you see some crazy ones like this
16:30 - like FSU SRS don't worry about them you
16:33 - probably don't need to use them you're
16:34 - only really gonna use stuff past 32 when
16:37 - we're in this program okay so now how
16:39 - the heck do we actually run this code
16:41 - well this is gonna seem really
16:42 - counterintuitive I know a lot of you
16:44 - probably be upset by this because we're
16:46 - not downloading like a brain program but
16:48 - we're gonna use a Python interpreter to
16:50 - interpret and run our brain code now a
16:54 - challenge to any of you that might think
16:56 - you're a little bit more expert you
16:57 - understand how the language works and
16:59 - what I just described you should be able
17:01 - to write your own interpreter for this
17:03 - now you know okay if you're not that
17:05 - good of a programmer maybe not or you're
17:06 - not that experienced fair enough it's
17:08 - not that easy but I just found one
17:10 - online I looked at the code is pretty
17:11 - easy I made my own version but we're
17:13 - gonna use this guy a little bit more
17:14 - robust but you could write your
17:15 - interpreter for brain in any language
17:17 - that you want an interpreter is just
17:19 - something that's gonna translate our
17:21 - code into something that computer can
17:22 - understand rather than you know try to
17:24 - make a compiler or something crazy or
17:26 - finding something online it's really
17:27 - complicated I figured Python is the
17:29 - easiest way so if you want to use this
17:31 - you're gonna have to download Python you
17:33 - can get that by just downloading Python
17:35 - you know go download Python download the
17:37 - version and then you're gonna download
17:39 - this repository and there's a link in
17:41 - the description to where this is now I
17:44 - already have it downloaded so I'm not
17:45 - going to do that but to download you can
17:47 - click on
17:47 - or download download the zip folder and
17:49 - we'll give you a little folder that has
17:50 - you know the brain name you can see here
17:53 - in it what you'll be able to access the
17:55 - interpreter so inside here it says the
17:57 - name of the file so brain pie and inside
18:00 - here you actually read through and see
18:02 - how small this is this is all of the
18:04 - code that's gonna be used to actually
18:06 - run your code so it's going to you know
18:08 - there's a function evaluate which
18:10 - essentially this evaluates all of your
18:12 - code and you can see we have cells code
18:14 - pointer and cell pointer which is just
18:17 - telling us all these different things
18:18 - that we need to know to do looping to be
18:21 - able to store the value and you can see
18:23 - it's pretty small it's pretty trivial
18:24 - and again I think I said this but the
18:26 - smallest compiler ever made for brain
18:28 - was only a hundred bytes long which is
18:30 - pretty impressive so we come here we do
18:33 - actually need this Goetsch dot pi file
18:35 - if you want to be able to get user input
18:36 - so if you're just gonna download one
18:38 - file make sure you download catch as
18:39 - well and you can see this is an example
18:41 - of the usage of it so you do dot slash
18:43 - the name of the script and then your
18:46 - actual dot BF file which stands for you
18:49 - know what that stands for the bf
18:50 - extension so you can see here that I've
18:53 - already got this folder I renamed my to
18:55 - the capital B but you know you can do
18:56 - whatever you want and inside here this
18:58 - is the same interpreter that I just
19:00 - showed you from that repo so what you
19:02 - need to do is inside the same folder
19:04 - you're gonna make a file and you're
19:06 - gonna call it whatever you want dot BF
19:08 - it's important you have BF I'm pretty
19:09 - sure this actually checks to make sure
19:10 - the extension ends in bf um actually
19:13 - possibly not but regardless and if you
19:16 - have dot BF then you can run this BF
19:18 - code so to actually do this because I
19:21 - know some of you might not understand
19:22 - you're gonna need to get into the
19:24 - current directory where this interpreter
19:26 - is in your command prompt now to change
19:28 - directories in here you can do CD and
19:31 - you can kind of CD around into the name
19:33 - of folders but an easy way for any of
19:36 - you that are beginners and don't
19:37 - understand how to do that is to just
19:38 - find where this folder is on your
19:40 - computer so I'm gonna try to find it
19:42 - yeah there it is and then in this little
19:44 - bar here if you're on Windows it's gonna
19:45 - be different on Mac you're gonna have to
19:47 - open the terminal in this folder and
19:48 - type CMD and that'll actually open up a
19:51 - command prompt that's in the same folder
19:53 - as where you are so if you want you can
19:56 - do that I mean I'm already in it here
19:57 - and you can see you're in the right
19:58 - directory if the path
20:00 - on the left side here matches where your
20:02 - file actually is and then again to use
20:04 - this there's two different ways so you
20:05 - do dot slash and then the name of the
20:09 - interpreter which is this and then the
20:10 - name of the file which in this case is
20:12 - dot test bf it's not recognized up
20:15 - that's on Linux sorry so for us what
20:17 - we're gonna do is go Python we're gonna
20:19 - do the name of the interpreter which is
20:21 - that and then you should notice that if
20:24 - I do test dot bf I know it's cutting out
20:26 - but we'll go fullscreen here and I run
20:28 - this everything works fine but since I
20:30 - don't have any commands in there
20:31 - nothing's happening so that's how you
20:32 - use this you have to write Python if
20:35 - you're on Mac or Linux you're probably
20:37 - gonna have to type Python a three space
20:39 - the name of the interpreter when you're
20:41 - in that folder and then the name of the
20:42 - file that you want to run so we've got
20:44 - that working now so let's actually start
20:46 - writing some code I know we've gotten
20:47 - awhile to get here but we just had to
20:49 - understand how the language works so
20:50 - let's clear that the CLS and now let's
20:53 - do a very basic script where we just add
20:55 - two to our original pointer and print
20:57 - that out so let's go to and then let's
20:59 - do a period and we know that you know
21:01 - the two plus signs that's increment
21:03 - increment so our current value at memory
21:05 - cells 0 should be to print we should
21:07 - print out whatever the ASCII value for 2
21:09 - is so if we do that we get a question
21:11 - mark because it doesn't know how to
21:12 - represent that in the console right but
21:15 - let's just go ahead and spam like a
21:16 - bunch of pluses and see if we can get
21:18 - something meaningful so let's do that
21:20 - and here we get the character L so
21:23 - that's the basics on how you do
21:25 - something and then how you print it out
21:27 - right pretty straightforward so you can
21:29 - see if I go you know plus minus like
21:32 - that and then I run this we get nothing
21:34 - because the first characters no so let's
21:37 - do a little bit of a more advanced
21:38 - example now so let's say that I actually
21:40 - want to generate the character a right
21:42 - so 65 but I really don't want to do like
21:45 - 65 plus signs like that's not the best
21:48 - way to do this what I should really do
21:49 - is use a loop so what I'm actually gonna
21:51 - do is I'm gonna set the first memory
21:54 - block to be the amount of times that I
21:56 - want to loop now in this case what I'm
21:58 - gonna do is figure out what multiples of
22:01 - numbers I could use to get to 65 faster
22:04 - than having to write 65 so in this case
22:07 - right and this is why this is a
22:08 - challenging language because you have to
22:10 - do something like this what I want to do
22:12 - is multiply 5
22:13 - 13 times so if I can multiply 513 times
22:17 - then what that's gonna allow me to do is
22:19 - get to the value 65 right so I'm gonna
22:22 - set up a loop that's gonna happen five
22:24 - times and in that loop I'm gonna add 13
22:27 - to a memory location I'm gonna add 1 to
22:31 - a memory location 13 times since that
22:33 - loop runs 5 times we should get the
22:35 - value 65 and I'll show you what I mean
22:37 - by this so this is my command for loop
22:39 - we're gonna go a little bit smaller here
22:40 - just so it's a bit easier to see we have
22:42 - 5 plus signs like that and then here I'm
22:44 - gonna do 13 so 1 2 3 4 5 6 7 8 9 10 11
22:48 - 12 13 now the first thing I need to do
22:51 - is make sure that when I enter this loop
22:53 - I decrement ursery increment the data
22:55 - points your one to the right so I'm not
22:57 - changing what's storing my looping
22:59 - variable I'm changing what's gonna store
23:01 - my data right which is here then at the
23:03 - end of the loop I'm gonna go back to the
23:05 - previous data pointer which is gonna
23:07 - move us with from essentially here from
23:10 - this here to be to here and then I'm
23:13 - gonna subtract 1 what's that what that
23:16 - is gonna do is say okay we have five
23:17 - here in our first loop then every time
23:20 - we add 13 we'll subtract one from five
23:23 - and when we get to the point where this
23:25 - first data pointer is equal to zero this
23:28 - loop will stop running and we'll print
23:30 - the value with a period so let's look at
23:32 - this and we can see I don't think I
23:34 - saved this properly actually whoops I
23:37 - need to move my dad pointer over one
23:38 - when we do that we get the character a
23:40 - so the reason we didn't print anything
23:42 - the first time was because I didn't move
23:44 - the data pointer to the data value after
23:46 - I ended the loop which meant it was
23:48 - still at what was telling us how many
23:51 - times to loop which obviously was going
23:52 - to be zero because we stopped so when we
23:54 - moved it over to the right one we got
23:56 - the character a so this is how you kind
23:58 - of generate one character right you
24:00 - could do some you could do 65 plus signs
24:04 - if you wanted to to make the character a
24:05 - I mean that's not really the best
24:07 - approach to doing this the best approach
24:09 - would be to find the lowest two numbers
24:10 - you can use that multiplied together to
24:12 - equal the number that you want and if
24:14 - you wanted to do say like make a little
24:16 - bit easier on yourself and multiply six
24:18 - ten times and then add five you could do
24:20 - that right so you could change this so
24:22 - that we have what is this five we could
24:25 - we actually make this time
24:27 - so I'll copy this so let's make this 10
24:29 - like this and then inside here we'll go
24:31 - 5 or we go 6 actually I guess which is
24:34 - that so 1 1 2 3 4 5 6 ok and then after
24:40 - we move the data pointer we'll add 5 to
24:43 - it so 1 2 3 4 5 like that and then print
24:46 - it did it mean to do that and then print
24:48 - it and we still get the character a so
24:50 - that's how that works
24:51 - so if we want to make hello world we
24:53 - need to find a way that we can generate
24:54 - hello and then world so I mean I'm kind
24:57 - of gonna leave that to you guys because
24:58 - I feel like it's gonna be pretty boring
24:59 - if you guys just watch me do this but
25:01 - let's do an example of getting some user
25:03 - input and then just printing that out so
25:05 - let's do a comma and then let's do a dot
25:07 - and let's run this and see what happens
25:09 - we can see we get the cursor blinking
25:10 - let's do the character say B and you can
25:13 - see that it just simply outputs the
25:15 - character B right and then ends the
25:16 - program so if we wanted what we could do
25:19 - is actually output and then we could say
25:22 - move the data pointer over 1 we could
25:24 - add 5 to some value and then output that
25:27 - and let's see what that looks like let's
25:29 - add some character are we can see when
25:31 - we add are then we print 5 directly
25:34 - after it doesn't do anything right and
25:36 - and that's what we get now what happens
25:38 - if we don't print after we get the input
25:41 - let's look at it so if we go are you can
25:43 - see that it just immediately prints this
25:45 - unknown character which is ASCII 5
25:47 - because it didn't print the character
25:50 - that we just inputted that was stored in
25:52 - data pointer 1 so that's the way that
25:53 - this works right if we wanted to move
25:55 - over like two data pointers we want to
25:57 - move over ten data pointer x' we could
25:59 - do that in a loop too so if we wanted to
26:00 - move say five data pointer we do plus
26:02 - plus plus we could say all right
26:05 - actually this one will be complicated
26:07 - we're gonna have to go if we move five
26:08 - if we move over five we're gonna have to
26:10 - go back five to modify this initial
26:12 - counting variable but I hope this gave
26:14 - you guys enough examples so I'm not
26:15 - gonna do that one so that you're
26:17 - confident and being able to use this so
26:19 - I don't know I think this is a fun
26:20 - language I think it's cool I like
26:22 - messing with stuff like this just
26:23 - because it kind of tests your brain and
26:24 - I mean look at the name of the language
26:26 - right it's not meant to be like I don't
26:28 - know fun but it's not really meant to be
26:30 - useful it's just meant to be like can
26:31 - you figure out how to do some stuff so a
26:33 - challenge for you guys and I would you
26:35 - know say this is try to make it so you
26:38 - can have some input and then have the
26:40 - program
26:40 - do something according to your input so
26:42 - maybe based on the number that it goes
26:44 - in it's gonna loop that many times and
26:46 - add some numbers together or something
26:47 - like that
26:48 - see if you could figure out how to add
26:49 - two numbers that's not very easy right
26:52 - how do you add two things we don't just
26:53 - can't just add with the plus addition
26:55 - like if I have two memories store two
26:57 - pointers or two different things stored
26:59 - in two cells how can I add those two
27:01 - cells together into another cell well
27:03 - the idea behind that would be let's just
27:05 - you know increment pointer three so if
27:08 - we have cell one and two with two values
27:09 - let's increment point three so that it
27:11 - has all the values from point one so add
27:13 - that many times and then we'll add all
27:15 - the values from point two to it and that
27:17 - should give us the sum of cell one and
27:18 - cell two so small problems like that
27:20 - become difficult I think it's fun let me
27:23 - know what you think of the language and
27:24 - I hope you enjoyed
27:25 - there's definitely long tutorial but
27:27 - hopefully useful so know he's that has
27:28 - been it I hope you enjoyed leave a like
27:29 - if you did subscribe and I will talk to
27:31 - you guys in another video