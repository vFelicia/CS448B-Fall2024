00:00 - hey guys and welcome back to the Python
00:01 - MySQL tutorial in today's video what
00:03 - we're going to be doing is talking about
00:04 - foreign keys and relating tables
00:06 - together I'm just gonna draw out a quick
00:08 - example here and then we'll get into the
00:09 - code to make sure that you guys
00:10 - understand why and how this works and
00:13 - how we should kind of design and
00:15 - implement a database system using
00:17 - foreign keys now the whole point of
00:19 - foreign keys is to allow you to
00:21 - reference one table from another now
00:23 - here I have an example where I have a
00:25 - users table and I have a scores table
00:27 - and we'll say that maybe we're designing
00:28 - some kind of game maybe this game has
00:30 - you know a few different scores that we
00:32 - could store a few different stats
00:33 - whatever it is we want to keep all those
00:35 - stats kind of contained in their own
00:37 - table where we have you know like game
00:39 - time played KD maybe game 1 multiplayer
00:42 - whatever it is this is my basic example
00:44 - of the scores table and we want the user
00:46 - table to store information about the
00:48 - user so like the name the username the
00:50 - password maybe the date that it was
00:52 - created whatever information we don't
00:54 - really want to mix these two tables
00:55 - together and have you know the user's
00:57 - tables storing the scores or having the
00:59 - scores tables storing information about
01:01 - the user we kind of need these to be
01:02 - separate entities so how can we check
01:05 - what user has which scores if these
01:08 - tables aren't connected in some way well
01:10 - we need to connect them and that's where
01:11 - we use something called a foreign key
01:12 - now the concept of a foreign key
01:14 - essentially means that one column in
01:16 - this case it's gonna be our user ID
01:17 - column in what's known as the child
01:19 - table is gonna be the same as the column
01:23 - in the parent table so you can see here
01:25 - I have a column called user ID and I
01:27 - have a column here called ID now this
01:29 - user ID column is actually gonna be
01:31 - what's called a foreign key which
01:33 - references this ID column so every time
01:36 - we create a new score what we're gonna
01:38 - do is say ok we need to give some kind
01:40 - of user ID here that's gonna be the same
01:43 - as one of the IDS in the user table and
01:45 - then we can add the score information
01:47 - this way if we know one of the IDS so
01:50 - either the user ID or the user ID here
01:52 - in scores we can reference both tables
01:55 - and the way that we can do that is
01:56 - because we know that that if we have an
01:59 - entry in user ID here there has to be a
02:01 - corresponding entry with the same ID in
02:04 - users so if we ever look at the scores
02:07 - and we see oh you know like user 2 has
02:08 - the highest score for game 1 I want to
02:10 - display their you know use
02:11 - in this table well or in this like
02:14 - column of high scores what I can do is
02:16 - say well since to is in user ID I know
02:19 - there must be a user in the users column
02:21 - or in the users table that has ID too so
02:23 - I come here I look for ID too and I can
02:25 - say Oh their name is Jo this is the user
02:27 - name I can display that kind of
02:28 - information so I'm hoping this makes
02:30 - sense essentially we're just kind of
02:31 - duplicating a column from one table
02:34 - which is gonna be our parent table in
02:35 - this case users inside of our child
02:37 - table with this in this case is scores
02:40 - that has the same value in it now in
02:44 - this case our user ID column is going to
02:46 - be unique in scores so there's only ever
02:47 - gonna be one one entry in scores right
02:50 - and that means that you know this
02:51 - relationship is what we call a
02:53 - one-to-one in that every single user in
02:56 - our users table here has one
02:58 - corresponding scores entry in the scores
03:00 - table but there's many cases in which we
03:03 - can have many to many relationships and
03:05 - many to one relationships now I'm gonna
03:07 - do a quick example of that to make sure
03:09 - you guys understand what that means so
03:10 - let's try to erase all of this okay so
03:15 - the next example I'm gonna do here is a
03:17 - many to one relationship which means
03:19 - that our foreign keys don't necessarily
03:21 - need to be unique and you're gonna
03:23 - understand what I mean by that in a
03:24 - second so let's say we're thinking about
03:25 - maybe an application like Facebook or
03:27 - like a blogging application well we
03:29 - might have a table that we call here I'm
03:31 - just gonna make this one a bit smaller
03:33 - maybe we call this post so we have some
03:35 - kind of post maybe you know it's a blog
03:37 - post it's an Instagram photo whatever it
03:39 - is and this post has you know its own
03:40 - unique ID so we'll call that ID it has a
03:43 - user that created it and it has like
03:45 - some content maybe we'll just say this
03:47 - content basically is just some kind of
03:49 - text that's what it is we'll go simple
03:51 - here for this example well we know that
03:54 - a user can have more than one post and
03:56 - in if we have more than one post that
03:59 - means that we have to find a way to
04:01 - relate that back to the user so what I'm
04:04 - gonna do is say you know maybe we have
04:05 - post that our ID 1 2 3 4 5 and maybe all
04:09 - these posts come from user 1 or some of
04:11 - them come from user 1 and some of them
04:12 - come from user 2 so what I'm gonna do is
04:14 - I'm gonna say this user column here is
04:16 - gonna be a foreign key that references
04:18 - the user ID so what I can do is I could
04:21 - say you know maybe if post 1 2 & 3 are
04:23 - from user 1 well in this column this
04:26 - come here all of these IDs are gonna be
04:28 - one because they reference the user that
04:30 - posted it and then here maybe this one
04:32 - is too and the content you know it'll be
04:33 - whatever it's not really important what
04:35 - that means but essentially what this is
04:36 - saying is well in this column here we
04:39 - have many different users that have
04:41 - created a post and for every user we
04:43 - have possibly infinite amount of posts
04:46 - right that's all that that means
04:47 - and then from post we have every time
04:50 - exactly one user that made that post so
04:52 - this is what we call a many to one
04:54 - relationship we say this is 1 and this
04:56 - is star which means that this could be
04:58 - an infinite amount of posts per user
05:01 - but there's only ever one user that
05:02 - makes a post and that's what this
05:05 - relationship means I can't really
05:06 - explain this more in depth that's kind
05:08 - of just how it works but we call this a
05:10 - foreign key it's not a unique foreign
05:12 - key but it just references the user
05:14 - column here so that if we need to you
05:16 - know display information about that user
05:18 - on the post or we need to get that
05:19 - information then we can simply get that
05:21 - by you know just using this ID now say
05:24 - for example we want to get all of the
05:26 - posts that a user has well all we need
05:28 - to do to do that is say ok what is our
05:31 - user ID well that's 1 we know that every
05:34 - post that has the user ID of 1 in our
05:36 - post table here is posted by this user
05:38 - so let's look through this table for all
05:40 - of them that have that ID and then that
05:42 - will give us a list of all of the posts
05:44 - that are by that user and that's kind of
05:46 - the principle and basics of how this
05:48 - work so now let's get into the code
05:50 - example and start actually creating kind
05:51 - of the first example I did with queries
05:53 - alright so now what we're gonna do is
05:55 - actually start writing the queries to
05:56 - create the example that we started off
05:58 - with which was that users and those
06:00 - scores table so we're gonna have that
06:01 - scores table be a foreign key to or not
06:04 - be a foreign key but have a foreign key
06:05 - that references that user table so the
06:08 - first thing we need to do is actually
06:09 - create the user table so whenever we're
06:11 - doing this we need to make sure that we
06:12 - create kind of the parent table first
06:14 - the one that's gonna be referenced by
06:16 - the other table otherwise you know
06:17 - there's no way to reference the table if
06:19 - it doesn't exist yet so we're going to
06:20 - say create table and I'm just storing
06:22 - this in a variable q1 because I want to
06:25 - just store the query so that we have the
06:27 - master and we can look at them and I say
06:28 - create table users we're gonna put our
06:31 - parameters now that we need or whatever
06:33 - our columns I'm gonna say name varchar'
06:37 - 50 and actually
06:39 - for that I'll even put the primary key
06:41 - which will be our ID so I'm gonna say ID
06:43 - int primary key Auto underscore
06:48 - increment like usual and then we'll have
06:51 - name we'll add a password so we'll say
06:53 - pass W varchar' 50 and I mean we could
06:59 - add some other stuff to this if we want
07:01 - but I think for now that's probably fine
07:03 - and yeah we'll leave it at that
07:04 - okay next query so I'm going to say q2
07:07 - equals create table scores and now this
07:12 - is where it gets a bit tricky so what
07:14 - I'm gonna do in scores is actually make
07:16 - the primary key be a foreign key now
07:19 - this is kind of advanced and you don't
07:21 - have to do this but I want to show you
07:22 - that it's possible so essentially since
07:24 - we know our relationship is one-to-one
07:26 - which means for every score there's one
07:29 - entry in the users table and for every
07:31 - user there's one entry in the scores
07:32 - table
07:33 - typically if we've created an entry then
07:35 - what we can actually say is that this ID
07:37 - here that can be our foreign key and it
07:40 - can be the primary key of the scores
07:42 - table because there's only one of them
07:44 - that's fine to do in our second example
07:45 - where I was talking about actually I
07:48 - forget what the example was that I used
07:49 - everything always in the second example
07:50 - we had I guess posts and we had more
07:53 - than one post per user so I couldn't use
07:55 - that as the primary key for that table
07:57 - but since this case we only have one we
07:59 - can do that so what I'm gonna do is say
08:01 - user ID int then what I'm gonna do is
08:06 - make this a primary key and I'm gonna
08:09 - now say and set the foreign key
08:11 - constraint is what this is called so I'm
08:13 - gonna say foreign key I'm gonna put the
08:15 - name of the key in my table so this
08:18 - current table that I want to be the
08:19 - foreign key so user ID references
08:22 - references and now what I'm gonna do is
08:25 - put the name my other table so users and
08:27 - in brackets the name of the column that
08:29 - I want to reference which is ID so that
08:31 - means that the user ID column here is
08:33 - gonna be the same as the ID column from
08:35 - user or whatever users that we have okay
08:38 - the next thing that I need here was game
08:40 - 1 and game 2 so I'll just say int game 1
08:43 - into game 2 I'm gonna show you something
08:45 - here on how we can actually make a
08:47 - default value for these so since you
08:50 - know when we start we'll probably have a
08:51 - default score of 0
08:53 - I'm gonna say default zero and default
08:57 - zero which just stands for that's gonna
08:58 - be the default value if we don't decide
09:00 - to set that when we create the the entry
09:03 - in our scores table okay so now that we
09:06 - have that let's like you run these
09:07 - queries so let's say my cursor dot
09:11 - executes q1 and give you the same thing
09:15 - here on q2 and see if these work or we
09:20 - get an error we get an error let's see
09:21 - what this is
09:22 - oh so apparently I've been thinking I'm
09:24 - coding in Java and I cannot put into the
09:26 - for game one so I need to put it
09:28 - afterwards I'm used to defining you know
09:30 - the type I've been doing that recently
09:32 - okay so it is let's try this now and
09:34 - okay so that actually worked I know I
09:36 - got an error here that's just because
09:37 - like you know I created the user table
09:39 - and I tried to create again when I ran
09:41 - this but I think we're actually good now
09:43 - and we have these two tables if we want
09:45 - to do a quick check we can always
09:47 - describe the tables or we can just you
09:48 - know select all from them so let's just
09:50 - say I actually show tables and I will
09:53 - say for X in my cursor print X and see
09:58 - if we have our two tables in here and do
10:00 - we we just have the users table which
10:03 - means I need to execute q2 again my
10:05 - apologies on this guys are just getting
10:06 - kind of confused okay so q2 and now we
10:09 - can do show tables and scores and users
10:14 - okay so we successfully added them in
10:15 - make sure you don't make the same
10:16 - mistake as me and just define the type
10:18 - after you define the reference or the
10:20 - name of that column okay so now that we
10:22 - have that you might have noticed that I
10:24 - have these two lists up here so users
10:25 - and user scores so what I want to do is
10:27 - actually add some users into my users
10:29 - table and then add some scores for them
10:31 - and show you how we can set up this
10:32 - reference and then check and go through
10:34 - them so the first thing that I need to
10:35 - do is well add my users so to do this
10:38 - I'm actually gonna use a for loop and
10:40 - just loop through all of my users but
10:42 - I'm gonna show you that there's another
10:44 - way to do this and what I can actually
10:46 - do is run a query that will insert all
10:48 - these at once and it's called execute
10:50 - many so I can save my cursor dot execute
10:54 - many like this and then in here I can
10:57 - put a query so I can say insert into in
11:00 - this case users will put what we need to
11:02 - insert so we're not going to insert the
11:03 - ID but we'll insert the name
11:05 - the past W and I realize in here I've
11:08 - added an email but I've added some extra
11:11 - values that I forgot to add here so I'll
11:13 - actually just get rid of these and we'll
11:15 - just leave you know the name and what is
11:18 - it like I username will just say that's
11:20 - the password there that's fine
11:21 - so what I'm doing here is just saying
11:23 - you know this is gonna be our username
11:24 - and this is gonna be the user password
11:26 - doesn't really matter we'll do that and
11:28 - then we'll say the values and in here
11:30 - we'll put % s comma % s and then what
11:35 - we're gonna do is just simply pass in
11:37 - this list abusers so what this is gonna
11:39 - do is actually take all of these tuples
11:41 - and it's gonna run the query three times
11:43 - so it's gonna say insert into users and
11:45 - it's gonna insert this one this one and
11:47 - then this one so that's a quick way to
11:49 - do that but what I want to do is
11:50 - actually do this in a for loop and then
11:52 - insert scores at the same time as I
11:55 - insert users so I can show you something
11:56 - else so let's leave this query here
11:58 - we'll call this q3 and we'll just get
12:01 - rid of the brackets here and now what
12:03 - I'm gonna do is I'm going to say for X
12:05 - comma and we'll say user in enumerates
12:10 - users and I'm assuming you guys know how
12:13 - this works but you should understand it
12:14 - in a second I'm gonna say my cursor dot
12:18 - executes q3 comma user now what this is
12:24 - gonna do is the exact same thing that
12:25 - executes many is doing except we're
12:27 - doing it in for loop but what I want to
12:28 - do after I create my user is create add
12:31 - these scores into the score table for
12:33 - that user so these scores correspond
12:35 - with you know this is Tim's score this
12:37 - is Jo score this is Sara's score so if I
12:40 - want to insert them in what I can
12:41 - actually do is I can get the last ID of
12:44 - the user that I inserted here and then
12:47 - from there what I can do is use that
12:49 - idea to insert into the scores table and
12:51 - you guys will see what I mean in a
12:52 - second so I'm gonna say last ID equals
12:54 - my cursor dot last row ID now what this
12:58 - stands for is get the last row ID that
13:02 - was inserted into the table which is
13:04 - actually going to be the ID of the user
13:06 - that we insert it in because it's
13:07 - getting the primary key of whatever the
13:10 - entry is that we just put in so now that
13:12 - I have the primary key what I can do is
13:15 - actually insert a score into my score
13:17 - table so
13:19 - to do this I'm gonna say my cursor dot
13:21 - execute and we'll type the query up here
13:24 - so q4 is going to be equal to insert
13:28 - into scores we're gonna need our ID
13:32 - which we have there earth this is
13:34 - actually user ID my apologies and then
13:37 - we're gonna have game one game two
13:40 - values and then % s % s and % s if I
13:47 - could type correctly which apparently I
13:48 - can't okay so now that we have % s there
13:51 - what I can do is execute q4 and what I'm
13:54 - gonna do here is I'm actually just gonna
13:56 - say and this is a this is kind of weird
13:58 - but you guys should see how this works
14:00 - last comma our last underscore ID comma
14:04 - plus and I'm gonna say user scores so
14:08 - use their underscores scores X now I
14:11 - know this is kind of advanced or some of
14:12 - you might be kind of confused but what
14:14 - this is doing is just simply creating a
14:15 - tupple that looks something like this we
14:17 - have ID and we have game one score and
14:19 - game two score right after each other
14:21 - just we're just adding the tuples
14:23 - together that's what this area is doing
14:25 - and this user underscore scores X is
14:28 - just gonna grab one at a time these
14:30 - scores and insert them in corresponding
14:32 - with the entries that we've added from
14:34 - our users
14:34 - so let's actually run this and then what
14:36 - I'm gonna do after this is say my cursor
14:38 - dog executes and I just want to see some
14:42 - entries from my user table so I'm going
14:44 - to say select from star from users and
14:47 - then we'll say for X in my cursor Brand
14:51 - X okay so assuming I didn't make any
14:54 - errors which I probably did this should
14:55 - work let's run this and we see now that
14:58 - we actually have users in our table so
15:00 - we have user Tim check with Tim and then
15:02 - we have ID - Jo Jo one two three and
15:04 - those are our users now let's have a
15:06 - look at our other table which is going
15:08 - to be scores now actually I realize that
15:11 - I forgot to commit this so we'll run
15:13 - this again and we'll actually commit
15:14 - this change because if we don't do that
15:15 - then this isn't gonna save so what we're
15:17 - gonna do now is just you know the same
15:19 - thing we did before except this time
15:20 - we'll commit it and then we'll look at
15:22 - scores so let's run this and now we can
15:24 - see that our scores we have ID for
15:26 - references 45/100 ID five references
15:29 - 3200 and
15:30 - we look at now the users so we look at
15:33 - scores first and then we'll print out
15:34 - users after will see that these IDs
15:36 - should line up now I know this is weird
15:37 - cuz the last IDs were like 1 2 3 4 5 but
15:40 - that's just because I forgot to commit
15:42 - this so that's why things weren't
15:43 - working but you guys will see how this
15:45 - works in a second so so 4x and my cursor
15:49 - print X ok so we have a lot of entries
15:54 - in here so we have 4 5 6 7 8 9 I realize
15:57 - I've added the same entries twice and we
15:59 - can see that 4 aligns with 4 so that's
16:01 - the square for Tim we can see 5 aligns
16:03 - with 5 6 aligns with 6 7 7 and so forth
16:07 - and that is kind of the way that this
16:09 - works so for each of our users we have a
16:10 - corresponding table in scores with a
16:12 - foreign key that references the scores
16:14 - for that user now in the next video what
16:16 - I'm gonna do is have set up a kind of
16:18 - more complex database with a bunch of
16:20 - different relationships I'm gonna show
16:22 - you how we can actually host this on a
16:23 - server and connect to it but for now
16:26 - this is kind of how foreign key works
16:27 - now I know I kind of went through a lot
16:29 - of stuff here there's a lot to look at
16:30 - but the eye essential idea here is just
16:33 - kind of think about how tables should
16:35 - relate together and you know with that
16:36 - post example when we have something
16:38 - that's many-to-one
16:39 - well we're gonna make sure that we have
16:41 - a distinct primary key and then a
16:43 - different foreign key which could
16:44 - reference the same user multiple times
16:46 - in the same table so anyways that has
16:48 - kind of been it for how to use foreign
16:50 - keys in my SQL because how many
16:52 - questions don't hesitate to ask them
16:53 - down below with that being said I will
16:55 - see you guys in the next video