00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video
00:11 - so in today's video i'm going to be
00:12 - discussing generators in
00:14 - python now generators are highly related
00:17 - to iterators and would be considered a
00:19 - more advanced or expert level feature in
00:21 - the python programming language
00:23 - that said though they're not overly
00:24 - complicated in fact i think i can give
00:26 - you a decent explanation that
00:28 - most of you regardless of your python
00:29 - knowledge can understand well with that
00:31 - said
00:32 - let's dive into the video after a quick
00:34 - word from our sponsor
00:35 - before we get started i need to thank hi
00:37 - counselor for sponsoring this video
00:39 - high counsellor's job search accelerator
00:41 - program combines ai power technology
00:44 - and professional mentorship from top
00:45 - tech companies to help recent graduates
00:48 - and young professionals
00:49 - get a lot more interviews and fast track
00:51 - them to landing their dream jobs in tech
00:53 - in six weeks on average high counselor
00:56 - has no upfront enrollment fees and their
00:58 - program is completely free until you
01:00 - land a job
01:01 - admitted candidates get help with their
01:03 - resume linkedin networking and much
01:05 - more high counselor also uses a
01:07 - proprietary tool that does professional
01:09 - networking on behalf
01:11 - of their candidates this in combination
01:13 - with the unique network of over 250
01:15 - hiring partners
01:16 - mean candidates get 10 times more
01:18 - interviews on average
01:20 - and spend less time searching the web
01:21 - for jobs multiple job offers are common
01:24 - amongst high counselor candidates
01:26 - and the program has a 100 placement
01:28 - success rate
01:29 - you can submit an application for free
01:31 - through the high counselor website or
01:33 - attend an upcoming information session
01:35 - to
01:35 - learn more check out hi counselor from
01:37 - the link in the description
01:38 - today all right so let's go ahead and
01:40 - dive into the video
01:42 - the first thing that i need to do before
01:43 - we can really talk in depth about
01:45 - generators is describe what an iterator
01:47 - is
01:48 - and talk to you about how iterators work
01:49 - in python now really an iterator is an
01:52 - object that allows you to loop through a
01:54 - sequence of numbers or some sequence of
01:57 - data some sequence of something
01:59 - without having to store all of the
02:01 - different items in that sequence
02:03 - in memory so i'll kind of give you an
02:04 - example of what i mean in a second
02:06 - but a generator is really just a new
02:09 - form of syntax that was introduced in
02:11 - python version 3
02:12 - that allows you to create an iterator
02:14 - without having to go through kind of a
02:15 - more tedious
02:16 - and less elegant process so generators
02:19 - and iterators are pretty much the same
02:20 - thing
02:21 - generators just use a new syntax and are
02:23 - much easier to create than kind of your
02:25 - standard iterators
02:26 - which we'll see here in a second so i'm
02:28 - going to start by explaining iterators
02:29 - taking a deep dive on those
02:31 - and then in the later half of the video
02:32 - we will get into generators and how
02:35 - to use the new syntax to create more
02:36 - elegant iterators essentially
02:38 - all right so let me start by introducing
02:40 - a problem to you here
02:41 - let's say we didn't have the function
02:43 - range and we didn't have
02:45 - a while loop okay no while loop and no
02:47 - range function
02:48 - and we wanted to loop through the
02:50 - numbers one to ten right one two three
02:52 - four five six seven eight nine ten
02:53 - well without using the range function
02:55 - without using a while loop and without
02:56 - coming up with some something super
02:58 - creative just
02:59 - simply thinking about this what we would
03:00 - probably do is the following we might
03:02 - create some list
03:03 - right and then in this list we could
03:05 - store our numbers 7
03:07 - uh 8 9 and 10. okay
03:10 - and then what i could do is i could just
03:12 - loop through this list right i could say
03:13 - 4
03:13 - elements in x and then i could just
03:16 - print
03:17 - the element and quite simply this is
03:19 - going to loop through
03:20 - all of these values we're looping
03:21 - through the numbers 1 to 10.
03:23 - now the problem with this is that i'm
03:25 - storing these 10 numbers here in memory
03:28 - in a list and for me to be able to loop
03:30 - through them
03:31 - i need to store all of them in a data
03:33 - structure now that's not very efficient
03:35 - and with 10 numbers this is fine but you
03:37 - can imagine if i wanted to loop through
03:39 - 100 000 numbers a million numbers a
03:41 - billion numbers it really doesn't make
03:43 - any sense at all for me to store the
03:44 - entire sequence of numbers in memory
03:46 - especially if all i'm going to do is
03:48 - process them one at a time and i don't
03:49 - need to know what all of these are as i
03:51 - loop through the numbers so it doesn't
03:53 - make any sense for me to store this
03:55 - in a list and that is why of course we
03:57 - use something like the range function
03:58 - right so i say
03:59 - 4 i guess i won't say element in this
04:02 - case i can say i
04:03 - for i in range and then i do something
04:06 - like 1
04:07 - to 11 and then i print element
04:11 - here i get the same thing oops sorry i'm
04:13 - going to print i
04:14 - not element here i get the exact same
04:16 - results right looping through the range
04:18 - of 1 to 11
04:19 - except when i use the range function
04:21 - here i don't actually need to store all
04:23 - of the numbers
04:24 - 1 through 10 in a data structure and so
04:27 - if i were to look
04:28 - at the size of this data structure
04:29 - versus the size of the range function
04:31 - we should see that this data structure
04:33 - has a larger size than the range
04:35 - function because the range function
04:36 - doesn't need to store all of these
04:37 - numbers and in fact if i want to do that
04:39 - i can so i'm going to import sys
04:42 - and i'm going to say print sys
04:45 - dot get size of x we can see that that
04:49 - is giving us a value of 136 and then i'm
04:52 - just going to take my range function
04:53 - here
04:54 - i'm going to print sys dot get size
04:57 - of and then of the range function does
05:00 - that look good okay
05:02 - and we see that we get a size of 48 for
05:04 - the range function so obviously this
05:06 - doesn't prove exactly what i'm saying
05:07 - i'm just trying to show you that this
05:09 - uses more space than the range function
05:10 - because the range function doesn't need
05:12 - to create this list
05:13 - for us to be able to loop through it and
05:14 - that is because the range function
05:16 - returns to us an iterator
05:18 - okay so now we can really talk about
05:20 - what an iterator is
05:21 - so an iterator as i described before is
05:23 - really something that allows us to loop
05:25 - through a sequence of numbers or of some
05:27 - data without having to store them
05:29 - all so the range function is a great
05:30 - example of an iterator because it lets
05:32 - us loop through all these numbers
05:33 - without having to store them in some
05:35 - data structure
05:36 - i'm going to show you one more example
05:37 - of an iterator in python that you may
05:39 - not know is an iterator
05:41 - and just kind of describe briefly how
05:42 - that works because it will bring our
05:43 - understanding
05:44 - so i'm going to use this function called
05:45 - map if you don't know what it does don't
05:47 - worry once i write the code here i'll
05:48 - explain
05:49 - exactly what it does i'm going to say i
05:51 - to the exponent 2
05:53 - and then pass x okay so what the map
05:56 - function does
05:56 - is it takes some data structure in this
05:58 - case we have a list
05:59 - and it maps all of the values in this
06:01 - data structure to
06:03 - some function so pretty much it applies
06:05 - this function to all of the values in
06:06 - the data structure
06:07 - and then it actually returns to us an
06:09 - iterator that contains all of the
06:11 - results
06:11 - of this function called on all of these
06:14 - values so essentially what this is doing
06:16 - is generating the squares of all these
06:18 - values and so if i were to look at this
06:19 - as
06:20 - a list i would have 1 4 9
06:23 - 16 so on and so forth because i'm
06:25 - applying this function right here
06:27 - which is just generating the square of
06:29 - all the values from the list
06:31 - now the thing is this map function here
06:34 - doesn't actually
06:35 - store a new list that has all of the
06:38 - results of these function calls
06:39 - this function here is actually a
06:41 - generator or an iterator
06:43 - that allows us to iterate through all of
06:45 - these results so all of the results of
06:47 - these values pass to this function
06:49 - without actually storing them i
06:51 - understand that's a little bit confusing
06:52 - but if you look at why if we print out y
06:55 - here we see this is a map
06:56 - object this actually isn't something
06:59 - that's storing all of the values it's
07:00 - not a list right
07:02 - now if i were to look at the list
07:03 - representation so i print out the list
07:06 - we see that we do get all of the values
07:07 - that we expect but this is not the
07:09 - default behavior it's not storing this
07:10 - list it only creates this list for us
07:13 - when we call this list function that's a
07:15 - common misconception
07:17 - so let me show you what i mean and how
07:19 - this is an actual actually an iterative
07:21 - so if i go something like 4i in y
07:24 - and then i print i here we see that we
07:27 - get all of the values that we expect
07:29 - the thing is we only generated these
07:31 - values
07:32 - once we started looping through this map
07:34 - object they weren't
07:35 - already generated and stored in memory
07:37 - like when i
07:38 - say 4i and y on the first iteration it
07:41 - sends this 1
07:42 - to this function and gives me the result
07:44 - then it sends this 4 or sorry this 2 to
07:46 - the function gives me the result
07:47 - sends the 3 to the function gives me the
07:49 - result it's doing it while i'm looping
07:51 - through it it didn't do it before and
07:52 - store all of it in memory
07:54 - and to give you one last proof here i'm
07:56 - going to print the sys dot
07:58 - size of or i guess this is get size of
08:02 - and then of y and let's see what we get
08:04 - we get a size of 48
08:06 - again if you compare that to let's say
08:09 - the list of y okay you'll see that the
08:12 - list of y
08:13 - is much larger than simply y because
08:16 - when we do the list it actually
08:17 - generates the list for us
08:19 - hopefully this is making sense the whole
08:20 - point is that we didn't have to store
08:22 - the sequence in memory we could generate
08:24 - the sequence as we looped through it
08:26 - and that is really what an iterator is
08:28 - okay so now i want to dive
08:30 - into how an iterator actually works and
08:33 - how you create
08:34 - an iterate so really what a for loop is
08:37 - doing
08:37 - is it's calling a special method on all
08:40 - of these iterator objects so this map
08:42 - object this range object that gives us
08:45 - the next item or the next piece of data
08:47 - in the sequence that we're looping
08:48 - through so there's actually this
08:50 - function here and it's called next
08:52 - and what this does is give us the next
08:54 - value in the iteration
08:56 - through an iterator so if i go here and
08:59 - i print
09:00 - the next of y you can see that we get
09:03 - one
09:04 - right and then if i print this again we
09:06 - get four
09:07 - and if i print this oops again we get 9
09:11 - and again oops i did not mean to create
09:14 - a new file there
09:15 - we get 16. and then notice here right
09:18 - i've gone through
09:18 - 4 times y and now if i start looping
09:21 - through y for
09:22 - i and y and i
09:25 - print i we're going to start looping
09:28 - at 25 because that was the next value in
09:31 - the iteration notice i didn't have 1
09:33 - 4 9 16 and then those repeating again
09:36 - and then looping through the rest of the
09:37 - values
09:38 - it continued right at 25. and just to
09:40 - make this even more clear i'm going to
09:41 - say
09:41 - print for loop starts
09:45 - okay and notice we have 1 4 9 16 the for
09:48 - loop starts and then we continue through
09:49 - the rest of the iteration
09:51 - hopefully this is kind of making sense
09:53 - but really what a for loop is doing is
09:55 - it is calling this
09:56 - next function on your iterator object
10:00 - and that is returning to you i which is
10:02 - going to be the next value in the
10:04 - sequence
10:05 - so when i've already looped through the
10:06 - first four four values in the sequence
10:08 - and then i go to the for loop here well
10:10 - the for loop is just going to continue
10:11 - to call next until eventually there's no
10:13 - more items in the sequence and so that's
10:15 - why it starts
10:16 - after uh we've already looped through
10:18 - the value if if that kind of makes sense
10:20 - or it starts where we
10:22 - left off looping through the rest of the
10:24 - sequence
10:25 - hopefully i'm articulating that okay so
10:28 - hopefully that makes sense but that is
10:29 - what an iterator does that's what a for
10:31 - loop does an iterator has this kind of
10:33 - next method on it and when we use this
10:35 - next function
10:36 - well we get access to the next value in
10:38 - the sequence
10:39 - now the same thing works when i do this
10:42 - y
10:43 - dot underscore underscore next under
10:45 - score underscore
10:46 - so this is a dunder method a double
10:48 - underscore method some of you may be
10:50 - familiar with that but the next
10:52 - function is the exact same as me calling
10:54 - underscore underscore next underscore
10:55 - underscore
10:56 - on an object and to just show this to
10:58 - you if i run this you see we get the
11:00 - same thing
11:01 - okay nice so that is how that works now
11:04 - what i'm going to do for you
11:05 - is write a for loop or write with the
11:08 - actual implementation of a for loop is
11:09 - sorry so you can see
11:11 - how it actually works on an iterator so
11:13 - this is our for loop but if i were to
11:14 - write this for loop
11:15 - and kind of peel away you know the
11:18 - disguise here where it says 4
11:20 - this is what it would look like if i say
11:22 - while true
11:23 - and then i'm going to try to get the
11:25 - next value
11:26 - in my iterator so i'm going to say value
11:30 - equals next and this is going to be of y
11:32 - and i'm going to accept
11:34 - the exception here is stop iteration
11:37 - i'll describe this in a second and then
11:40 - i'm going to break and i'll just
11:42 - print
11:45 - done and then here i will print
11:49 - the value okay so these here this for
11:51 - loop
11:52 - and this while loop are actually
11:53 - identical let me get rid of this though
11:55 - because we don't need this anymore
11:56 - okay again yeah so this for loop and
11:58 - this while loop are identical we are
12:00 - looping through
12:01 - this y iterator so in this case i'm
12:03 - saying 4
12:04 - i in y and then what this for loop
12:07 - actually does is what i've written here
12:08 - we have an infinite loop so we have
12:10 - while true because we don't know how
12:11 - many items are in the sequence
12:13 - and then what we do is we try to get the
12:15 - next value from our iterate
12:18 - so we keep calling this next function or
12:20 - in the same way we could say y
12:22 - dot underscore underscore next
12:24 - underscore underscore but the next
12:25 - function is kind of convention
12:27 - then we print out the value and then we
12:29 - accept stop
12:30 - iteration so at any point in time there
12:32 - is no more values in the sequence or in
12:35 - the iterator the iterator is going to
12:36 - raise an exception
12:37 - this exception is stop iteration and in
12:40 - that case we end the while loop
12:41 - and we're done so just keep in mind this
12:44 - for loop and this while loop are
12:45 - literally the exact same thing
12:46 - all right so let me delete this for loop
12:48 - here and just run this for you and you
12:50 - can see that this works right we print
12:52 - out all the values and as soon as we
12:53 - find the stop iteration error
12:55 - we print done now let me show you what
12:57 - happens if i don't have this
12:59 - this except here so if i just do this i
13:01 - just try to get the next value from my
13:03 - iterator
13:04 - and i run this notice we get an
13:05 - exception and it just says
13:07 - stop iteration that's obviously why i
13:08 - accepted the stop iteration error
13:10 - because well you need to do that
13:12 - otherwise your program is going to crash
13:14 - and that is exactly what a for loop does
13:17 - okay so there you go
13:18 - that is the basics of how you loop
13:19 - through an iterate now let me show you
13:21 - do kind of doing the same thing sorry
13:23 - with the range function
13:24 - so let's say x is equal to in lowercase
13:28 - x is equal to range and then we have 1
13:30 - 11. that's the range we want to loop
13:31 - through
13:32 - so let's start by just printing x now
13:34 - notice when we print x we actually just
13:35 - get a string representation of the range
13:37 - function so this is a string it just
13:39 - prints this out for us
13:40 - and now watch what happens though if i
13:42 - try to call next on x
13:44 - if i do this notice we get an error it
13:45 - says range object is not an iterator
13:48 - now the reason it's not an iterator is
13:50 - because for us to actually get the
13:51 - iterator from the range
13:52 - object we need to call another special
13:55 - method which is called
13:56 - iter so there is this iter method or
13:59 - this inner function sorry that returns
14:01 - an iterator from an
14:02 - object and there's also the dot
14:05 - underscore underscore iter
14:06 - underscore underscore underscore dunder
14:09 - method
14:09 - now what this iter method does is the
14:12 - exact same thing as this iter function
14:13 - if you call the iter method it's
14:15 - literally identical to calling theater
14:16 - function just like the next function and
14:18 - the next
14:18 - dunder method so the whole point of me
14:21 - saying this to you though
14:22 - is that if we want to get the iterator
14:24 - from x we need to call
14:26 - iter like that so if i call it or there
14:29 - now this is actually going to work right
14:30 - if i get the next of it or x we don't
14:32 - get an error i didn't print out what
14:33 - that was
14:34 - i can print it you can see that that is
14:38 - now
14:38 - correct there you go so that is kind of
14:40 - how that works so the whole thing is
14:41 - when i do something like
14:43 - 4i in x what actually happens is we're
14:46 - saying
14:47 - 4i in the iter of
14:50 - x and then it calls the error method
14:52 - gets the iterator and then calls the
14:54 - next method
14:55 - on the iterator object that we got
14:58 - from the object we're looping through
15:01 - hopefully that kind of makes sense but
15:02 - the whole point is you start by calling
15:03 - that either method
15:04 - that inner method returns to you the
15:06 - iterator which has a next method on it
15:08 - and then you call the next method on the
15:10 - iterator it's a little bit confusing
15:12 - because on map you don't need to do that
15:14 - on range you do need to do that the
15:15 - whole point is that there's kind of two
15:16 - methods that make up an iterator
15:18 - one is the inner method the next is the
15:20 - next method
15:21 - so now what i'm going to end off the
15:23 - explanation of iterators by doing is
15:24 - showing you
15:25 - how you make your own iterator using
15:27 - kind of the old legacy
15:29 - syntax not the generator syntax so the
15:31 - way you do this is you create a class so
15:33 - i'm going to make a class
15:34 - i'm just going to call this class iter
15:36 - now you can define the init
15:37 - and any other methods in this class just
15:39 - like you would for any other class
15:41 - so i'm going to say self i'm just going
15:42 - to take some value n i'm going to say
15:44 - self.n
15:46 - is equal to n and n will kind of be like
15:47 - the maximum value i want to go to
15:49 - while i'm iterating all right then if i
15:52 - want to make this an
15:53 - iterator i need to implement two methods
15:55 - those methods are ader
15:56 - and next so i'm going to say define
15:58 - underscore underscore enter like that
16:01 - and all i'm going to do here is i'm
16:03 - going to return myself
16:05 - and i'm going to set self dot current
16:08 - equal to zero so when i call the inner
16:11 - method i'm going to initialize something
16:13 - this current variable that's going to
16:14 - store the current volume out of my
16:15 - iteration
16:16 - and then i'm going to return myself the
16:19 - reason i'm returning myself
16:20 - is because i'm not creating any special
16:22 - iterator object here
16:23 - i'm just returning this object itself
16:26 - the current instance that i'm calling
16:28 - this on
16:28 - so that it can use that as the iterator
16:31 - might be a little bit confusing but
16:32 - we'll keep going so now i'm going to
16:34 - implement the next method so underscore
16:36 - underscore next underscore underscore
16:37 - and inside of here what i'm going to do
16:39 - is say self.current
16:41 - plus equals 1 and then i'm going to
16:44 - return
16:45 - self.current now i need to change a few
16:47 - things first i'm going to make
16:48 - self.current actually equal to negative
16:49 - 1.
16:50 - and before i return self.current i'm
16:52 - going to say if
16:53 - self.current is greater than or equal to
16:57 - self.n then what i want to do is
17:00 - raise stop
17:03 - iteration okay this is kind of the way
17:05 - that you need to implement iterator
17:07 - inside of your next method you have
17:08 - something some base case that
17:10 - raises the stop iteration or some exit
17:12 - case that raises the stop iteration
17:14 - and then you increment your iterator or
17:16 - do whatever it is you're doing with your
17:18 - sequence and then eventually you return
17:20 - the value so the reason i'm initializing
17:21 - current at negative one is because i
17:22 - start by adding
17:23 - one to whatever my current iterator
17:26 - value
17:26 - is so negative one goes to zero so the
17:29 - first value i return is zero
17:30 - then one then two so on and so forth and
17:33 - then eventually i raise the stop
17:35 - iteration error and it's not until i
17:37 - call
17:37 - this iter method again to get a new
17:39 - iterator do i reset my current value to
17:42 - negative one
17:43 - okay hopefully that kind of makes sense
17:44 - but let's just make the iterator now
17:46 - let's say x
17:47 - is equal to itter let's pass the value
17:50 - 5 in here and now let's try to loop
17:53 - through this iterator so i'm going to go
17:54 - 4 and i'll say i in x
17:58 - i'm going to print i and let's see if we
18:00 - get an error no we don't we get 0 1 2
18:02 - 3 4. there you go so we've just created
18:04 - an iterator we can now loop through this
18:06 - object because we have the inner method
18:07 - and because we have the next method
18:09 - now watch what happens if i remove the
18:11 - iter method though if i remove this
18:13 - it says inner object is not iterable the
18:15 - reason it's not iterable is because it
18:16 - couldn't get the iterator from it
18:18 - because we didn't implement the iter
18:20 - method now let's remove this next method
18:22 - and let's see what happens here
18:24 - returned non-iterator of a type so it
18:26 - returned something that didn't have the
18:28 - next method on it
18:29 - so that means it is not an iterate
18:31 - hopefully that is clear but that's how
18:33 - that works
18:34 - okay so now let me just show you how we
18:36 - would manually call the next method on
18:38 - this so i could do something like
18:39 - print and then next of x but when i do
18:43 - this
18:43 - take a guess out what's going to happen
18:45 - notice i get an error it says inner
18:47 - object has no attribute current
18:49 - the reason it has no attribute current
18:50 - is because i didn't create the iterator
18:52 - object first
18:53 - or i didn't initialize the iterator by
18:55 - calling theater method i just called
18:56 - next so i would need to say like
18:58 - itr is equal to iter
19:01 - of x and then i could call next on
19:04 - itr okay and then notice i get 0
19:07 - and then if i call it again so let's do
19:10 - it here
19:11 - i get one two three so on and so forth
19:14 - okay so that is the old school way of
19:16 - creating
19:16 - an iterator now i'm going to introduce
19:18 - you introduce to you sorry
19:20 - generators which is the much more
19:22 - elegant and nice way
19:23 - of creating an iterator so the generator
19:25 - syntax is quite simple you create a
19:27 - function
19:28 - so in this case i'm just going to say
19:29 - define gen take in any parameters that
19:32 - you want in this case i'll take an
19:33 - n and then what you do is you use the
19:36 - yield keyword instead of the
19:38 - return keyword i'm going to explain
19:40 - exactly how this works
19:41 - but let me just make the exact same
19:43 - iterator i made before
19:44 - using the generator syntax so let me say
19:48 - actually i don't need self i can just
19:49 - say
19:51 - we'll use a for loop actually 4i in
19:54 - range
19:55 - and then this will be n and i'm going to
19:57 - yield
19:58 - n and i need to spell yield correctly
20:00 - i'm going to yield that
20:02 - okay so this is exactly the same as that
20:04 - class that i just created and notice
20:06 - how much simpler this is so i'm sure
20:08 - this probably still doesn't make much
20:10 - sense to you but let's just loop through
20:11 - it for i
20:12 - in and then we're going to say gen of 5
20:16 - like that print i
20:21 - and notice that we get uh oops sorry
20:24 - it's yielding n that needs to yield i
20:26 - my bad we get the exact same thing that
20:28 - we got before
20:29 - so the way that the generator works is
20:32 - when the yield keyword is hit
20:34 - it pauses the execution of the function
20:37 - and returns this value to whatever is
20:39 - iterating through this generator object
20:42 - so in this case i'm saying 4i
20:44 - in gen 5. so i'm looping through my
20:46 - generator here passing the value 5 to it
20:49 - and inside of my generator i create this
20:51 - for loop and in this for loop i'm
20:52 - looping
20:53 - up to 5 or up to n so in this case 5 but
20:56 - not including 5
20:57 - and i'm yielding i so as soon as i get
20:59 - through the first iteration of this for
21:00 - loop and
21:01 - i is equal to zero i yield zero and what
21:04 - that means is i immediately pause
21:05 - i stop all of the information about this
21:07 - function is saved so it's stored in
21:09 - memory
21:10 - and then i go to this for loop and i
21:12 - print whatever the value is that i yield
21:14 - it
21:15 - then what happens is the function or
21:17 - this for loop continues so we go through
21:19 - the next value we call
21:21 - next on this generator that then has the
21:23 - for loop run again
21:24 - so then we get the value one then we
21:26 - call next again we get the value two
21:28 - three 4 so on and so forth the important
21:30 - thing to understand is when yield is hit
21:32 - the function execution is paused it's
21:34 - not terminated it's not done it's
21:36 - paused and then we return to it and
21:38 - continue running
21:39 - whenever we see the next keyword again
21:41 - or whenever we call the next method or
21:44 - function
21:44 - on this generator so to do this manually
21:47 - i could say
21:48 - i guess i'll just go with x is equal to
21:50 - gen of 5
21:52 - and i could say next x let's just print
21:54 - this
21:56 - like this okay so if we do this manually
22:01 - okay notice we get 0 1 2 3. so pretty
22:03 - much this generator syntax
22:05 - makes the next method and the inner
22:07 - method implemented for us so we don't
22:09 - have to manually write them inside of a
22:10 - class
22:11 - and instead we just use the yield
22:13 - keyword now i'm just going to show you
22:15 - in a different way how we could do this
22:16 - so let's say we take no parameters here
22:18 - what i can actually do inside of this
22:20 - function is i can yield multiple times
22:22 - so i'm going to yield one
22:23 - then i'm going to yield two then i'm
22:25 - going to yield again i've got to spell
22:27 - that correctly 3
22:29 - then i'm going to yield 4. so now when i
22:31 - do this notice you get 1 2 3 4 because
22:33 - what happens is we yield 1
22:34 - we pause the execution of the function
22:36 - we print the value we yield 2
22:38 - we pause the execution of the function
22:41 - we print two
22:41 - right so on and so forth and if you want
22:43 - to make this even more clear
22:45 - we're gonna print pause one
22:48 - okay pause two
22:52 - pause three and actually now that i
22:55 - think of it
22:56 - hmm yeah and okay this is fine yeah we
22:58 - can do that so let's
22:59 - run this and notice we get one pause one
23:01 - two pause two three pause three
23:03 - and then finally we have four and the
23:05 - whole point is that we didn't need to
23:06 - generate this entire
23:08 - sequence of numbers to be able to loop
23:09 - through it we were just returning it
23:11 - as we needed those values all right so
23:13 - at this point in time you're probably
23:15 - asking yourself
23:16 - what is the point of this maybe you
23:17 - understood the examples i went through
23:19 - you know when you use the yield keyword
23:21 - in a function that generates a generator
23:23 - or makes that function a generator and
23:25 - as soon as you hit the yield keyword
23:27 - the execution of the function is paused
23:29 - but the entire state of the function all
23:31 - variables everything inside of it
23:32 - is saved right all of that's saved but
23:34 - the execution is just paused then it can
23:36 - be returned to
23:37 - when you call the next function however
23:39 - again what is the use case of this
23:41 - well really the use case of a generator
23:44 - is such that you can loop through a
23:45 - sequence or some large amount of data
23:47 - without needing to store all of it and
23:49 - the situation in which you use a
23:51 - generator
23:52 - is when you do not care about the data
23:54 - before or after something in an
23:56 - iteration
23:56 - you only care about the current piece of
23:58 - data that you're looking at so a super
24:00 - simple example is you want to print out
24:02 - all of the numbers in a sequence you
24:04 - don't need to know
24:05 - the previous or the next number in the
24:07 - sequence or any you know of the numbers
24:09 - in the sequence you only need to know
24:10 - the current number
24:11 - in order to print it out and there's a
24:13 - lot of times when you're looping through
24:14 - some type of data structure or something
24:16 - where you don't care about anything
24:18 - before or after the current element
24:20 - you just care about the current element
24:21 - and if that's the case you use a
24:23 - generator
24:24 - however if you do care about stuff
24:25 - forward or after
24:27 - or i guess sorry before or after the
24:28 - current element then you
24:30 - can't use a generator because you need
24:32 - access to whatever's before whatever's
24:34 - after maybe you need access to
24:35 - everything that's
24:36 - to the right in the list or everything
24:37 - that's in the left of the list or
24:39 - sequence or whatever
24:40 - in that case you can't use a generator
24:42 - because the generator only gives you the
24:43 - current value
24:44 - you could have a generator give you
24:46 - maybe the second third fourth value but
24:48 - if you need access to the entire
24:50 - sequence when you're processing
24:51 - one element you can't use a generate
24:53 - hopefully that's clear
24:55 - but that's kind of the differentiating
24:57 - factor on when you would use a generator
24:58 - or when you would use some data
24:59 - structure to loop through
25:01 - but i want to give you a very real
25:02 - example here of when you use a gener
25:05 - so let's say you have a very large file
25:08 - maybe a file that has
25:09 - billions of lines now just a ton of
25:11 - lines it's going to take maybe like a
25:12 - few days of processing power
25:14 - to actually go through and process this
25:16 - file depending on what you're doing with
25:18 - it
25:18 - and let's say simply in this file you
25:20 - want to look for
25:22 - if a word exists you don't really care
25:24 - where it exists
25:25 - you just want to know if a word exists
25:27 - in this file well
25:29 - the first way you could do this find if
25:30 - the word exists in the file is you could
25:32 - read the entire file
25:33 - this would be the standard way you read
25:34 - it all into memory and then you loop
25:37 - through the data structure you have that
25:38 - represents the file
25:39 - and you see if that word exists that's
25:42 - the first way that you could do it
25:43 - however you don't need to know every
25:46 - single line in the file at one point in
25:48 - time
25:48 - you only need to know the current line
25:50 - that you're looking at and then you can
25:52 - determine with the current line if
25:53 - that line has the word that you're
25:55 - looking for in it so you look at one
25:57 - line at a time
25:57 - you don't care about all the lines
25:59 - before all the lines after you only care
26:00 - about the current line
26:02 - if you find the word great if you don't
26:03 - you move on to the next line
26:05 - in this situation you would use a
26:06 - generator and what you could do is yield
26:08 - one row of the file at a time so that
26:11 - rather than reading in the entire file
26:13 - and taking up you know maybe gigabytes
26:15 - of memory
26:15 - you're only taking up a few megabytes or
26:17 - gigabytes or bytes in your memory
26:19 - to store one line at a time and then as
26:22 - you look through that line you
26:23 - move on to the next line if it doesn't
26:24 - have the word or maybe you stop the
26:25 - program if it does have the word
26:27 - so i'm just going to copy in a function
26:29 - here that shows you exactly how you
26:31 - would do that
26:31 - this function is called csv reader and
26:34 - all you do is you pass a file to this
26:35 - function
26:36 - what it does is it opens the file and
26:38 - then it yields one row of the file at a
26:40 - time
26:40 - so this way you don't actually need to
26:42 - uh what do you call it
26:44 - read the entire file in at once you just
26:45 - read one row you can process the row see
26:48 - if it has a word and then
26:49 - continue on from there so that is kind
26:51 - of my example
26:52 - hopefully that may be cleared up on when
26:54 - you would use a gem
26:56 - so sorry for the abrupt cut here but i
26:57 - realized when i was editing this video i
26:59 - forgot to mention an important part of
27:01 - generators which is generator
27:02 - comprehensions
27:03 - so there is actually another way to
27:05 - create a generator that does not involve
27:07 - creating a function
27:08 - previously the way we made a generator
27:10 - was made a function and we just put the
27:12 - yield keyword in as soon as you put the
27:13 - yield keyword in a function
27:15 - it's a generator however another way to
27:17 - do this is with a comprehension
27:19 - so let me just show you and say
27:20 - something like x is equal to
27:23 - i'm going to put the syntax for a tuple
27:25 - so open brace and closed brace or open
27:27 - parenthesis closing parenthesis
27:28 - then i'm going to say i for i in range
27:32 - 10. now this is a very stupid generator
27:34 - you never make this
27:35 - but i just made a generator and to prove
27:37 - this to you i'm going to print x
27:40 - so when i do this notice i get a
27:41 - generator object so whenever you do a
27:43 - comprehension like this
27:45 - inside of the parenthesis this gives you
27:48 - a generator so now i could print out
27:52 - the next of x and when i do that i get
27:56 - 0.
27:56 - i could do this again okay i get 1 2
27:59 - 3. and then i could loop through x i
28:01 - could say for you know j
28:03 - in x print j
28:06 - and well we get the same thing right
28:09 - that's all i want to show you
28:10 - that's another way you can make a
28:11 - generator with a comprehension like this
28:13 - of course you would do something that
28:14 - probably makes more sense in this that
28:15 - is a bit more advanced
28:17 - there's another way to go about doing
28:18 - that all right so with that said
28:20 - i am going to end the video here i hope
28:22 - you guys enjoyed if you did make sure
28:24 - leave a like
28:24 - subscribe to the channel i will see you
28:26 - in another youtube video
28:29 - [Music]
28:35 - you