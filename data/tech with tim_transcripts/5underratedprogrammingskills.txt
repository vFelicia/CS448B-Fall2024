00:02 - [Music]
00:08 - in this video i'll be sharing with you
00:10 - five underrated programming skills now
00:13 - of course this is my opinion this video
00:15 - is subjective and if you disagree with
00:17 - me please leave a comment down below and
00:19 - tell me what you think is an underrated
00:21 - programming skill with that said i'm
00:23 - going to list them out right now and
00:25 - then i'll elaborate on them in the
00:26 - sections in this video so the first
00:29 - underrated programming skill is reading
00:31 - documentation the second is copying and
00:34 - pasting especially when you are working
00:36 - in a new code base the third is writing
00:39 - self-documenting code the fourth is
00:41 - having proficiency in linux and the
00:44 - fifth is keyboard shortcuts and
00:46 - environment setup now one last thing
00:48 - that is also underrated is the sponsor
00:50 - of this video thanks to loom for
00:52 - sponsoring this video loom provides an
00:55 - easy to use tool to create asynchronous
00:57 - video for work loom helps you focus and
01:00 - get out of those useless meetings by
01:02 - allowing you to easily record your
01:03 - camera screen or both and share it with
01:06 - a single link loom is used by over 14
01:08 - million users and has awesome features
01:10 - like the ability to instantly edit your
01:12 - videos and remove filler words including
01:14 - um and like loom has tons of use cases
01:17 - but for software developers like
01:19 - yourself it can help to improve code
01:21 - reviews by allowing you to easily demo
01:23 - features record bugs or issues and
01:25 - document your feedback not to mention it
01:28 - seamlessly integrates with github gitlab
01:30 - and other development tools loom videos
01:33 - can contain calls to action reactions
01:35 - and comments drawing and illustrations
01:37 - and content security loom is available
01:40 - as a desktop application chrome
01:42 - extension ios and android application
01:45 - and one of the best parts of loom is
01:46 - that it's free and you can get started
01:48 - with it by clicking the link in the
01:49 - description all right so let's go ahead
01:51 - and get into it i have five underrated
01:54 - programming skills for you i'm hopefully
01:56 - gonna prove to you in this video why i
01:58 - believe they are underrated let's get
02:00 - into skill number one which is reading
02:02 - programming documentation now i
02:04 - understand that this seems relatively
02:06 - obvious but a lot of people omit this
02:08 - and don't end up doing this until
02:10 - they're actually required to do so what
02:12 - i mean by that is until they get in a
02:14 - situation where there's no tutorial
02:16 - there's no video there's no great
02:18 - website article explaining how to use
02:20 - something and they actually have to dive
02:22 - into maybe a more niche technology or
02:24 - something that's maybe internally
02:26 - documented so maybe you can only use it
02:28 - within your company it's not open source
02:30 - and all of a sudden they're lost and
02:31 - they're having a very difficult time
02:34 - understanding how to use some framework
02:36 - module library whatever it may be so
02:38 - what i'm saying here is that it is
02:40 - underrated to understand how to quickly
02:42 - read programming documentation and
02:44 - especially how to extract the important
02:46 - information from it now this really can
02:48 - apply in all areas of life and
02:50 - especially in any kind of academic field
02:52 - where you need to read a lot of stuff
02:54 - programming being one of them but having
02:56 - the skill to first of all find the
02:58 - information that you're looking for and
02:59 - then extract the important parts of that
03:01 - while kind of ignoring all of the fluff
03:03 - or the stuff that you don't need to know
03:05 - is very very important and just to give
03:07 - you a real concrete world example here
03:09 - the reason why i'm actually successful
03:12 - on youtube is because a lot of people
03:13 - don't know how to read documentation i
03:15 - make youtube tutorials i make all kinds
03:18 - of videos teaching programming
03:19 - frameworks libraries all of that kind of
03:22 - stuff and the reason i'm able to do that
03:24 - is because i can read documentation a
03:26 - lot of people don't know how to do that
03:28 - to the same level that i can do that and
03:30 - that's why they would watch my video i
03:32 - go in read a piece of documentation for
03:33 - maybe 15 20 minutes pull out the
03:36 - important parts kind of make a summary
03:38 - of that and then i essentially teach the
03:40 - documentation in a more digestible form
03:42 - online that's how i'm able to be
03:44 - successful and the reason i can do that
03:46 - again is because a lot of people have
03:47 - trouble reading programming
03:49 - documentation so i won't keep going on
03:51 - and on about this hopefully you get the
03:52 - point it is very important to understand
03:54 - how to read documentation and to get
03:56 - better at it you really just need to do
03:58 - it there's nothing wrong with watching
04:00 - tutorials or going through videos it's a
04:02 - very helpful and quick way to learn
04:03 - something but as you get better and into
04:05 - more niche technologies you need to know
04:07 - how to read programming documentation
04:09 - alright so now let's move on to skill
04:11 - number two which is copying and pasting
04:13 - especially in a new code base now i
04:16 - understand this sounds trivial or this
04:18 - is very vague depending on the way that
04:20 - you're looking at it but what i really
04:21 - mean by this is being able to quickly
04:24 - start implementing some type of features
04:26 - or adding to a code based simply by
04:28 - copying and pasting existing stuff that
04:30 - is there now to give you a concrete
04:32 - example here when i worked at microsoft
04:35 - i was an intern i only worked there for
04:36 - three months and so i had to really
04:38 - quickly get up to speed in a brand new
04:40 - and massive code base there was hundreds
04:42 - of thousands if not millions of lines of
04:45 - code now whenever i needed to do
04:46 - something i was usually given kind of a
04:48 - small task but it required either that i
04:51 - write it completely from scratch or i
04:52 - obviously implement it in the existing
04:54 - code base
04:55 - using the complex features and kind of
04:58 - rooting systems and all this stuff that
04:59 - they had going on now i remember that
05:02 - the way that i was able to get through
05:03 - some of the smaller tasks that i had was
05:06 - by looking for similar functionality or
05:08 - similar features in that code base and
05:10 - literally just copying and pasting them
05:12 - into a new file or the area of code that
05:14 - i was working in and then very slightly
05:17 - altering things so that's kind of the
05:18 - skill that i'm talking about here is
05:21 - being able to read code and understand
05:23 - what it does without having to kind of
05:25 - write it from scratch so what i did at
05:27 - microsoft right is i would go and look
05:29 - at features again very similar to what i
05:31 - needed to do figure out the way that
05:33 - they did them literally just copy and
05:35 - pasted the correct section of code by
05:38 - being able to understand what was going
05:39 - on pasted that wherever i needed it and
05:42 - then made very slight tweaks this way i
05:44 - knew i was doing things the correct way
05:46 - based on what was already done in the
05:48 - code base and i was able to get through
05:50 - those small tasks with relatively little
05:52 - familiarity of the code base now of
05:54 - course once you get better and more
05:55 - familiar you can start writing stuff
05:57 - without copying and pasting a ton of
05:58 - crap but that is kind of what i'm
06:00 - talking about here hopefully this is
06:02 - making sense a little bit hard to
06:03 - explain but copying and pasting is a
06:05 - great skill and i guess the way you get
06:07 - good at this is by being able to read
06:09 - and understand code and kind of knowing
06:11 - the sections that you need to copy and
06:13 - paste so now we're moving on to skill
06:15 - number three which is writing self
06:18 - documenting code now really what this
06:20 - means is writing code that does not
06:22 - require comments and doesn't require
06:24 - someone else to explain it to you so
06:26 - essentially your code is
06:27 - self-documenting if someone who doesn't
06:30 - have familiarity with the code base can
06:32 - hop in there and understand to a
06:34 - relative degree what's going on and what
06:36 - you're trying to do now really the two
06:38 - main things that are going to make your
06:40 - code self-documenting is good naming
06:42 - conventions and good structure it's not
06:45 - even necessarily about the logic that
06:46 - you're using although there is some
06:48 - techniques you can use to make your code
06:50 - more readable but if you just give good
06:52 - variable names good function names and
06:55 - you structure code in a really good way
06:57 - where everything's kind of in the
06:59 - correct area and there's no you know
07:00 - massive functions or massive classes
07:02 - that are taking on too much
07:04 - responsibility your code is going to be
07:06 - self-document now a lot of people myself
07:08 - included are lazy when they're
07:10 - programming we like to name our
07:12 - variables x y z uh you know a1 a2 that
07:15 - type of stuff but that is really really
07:17 - bad practice and that's something that
07:19 - makes it almost impossible for yourself
07:21 - or anyone else to quickly understand
07:23 - what's going on in a section of code
07:26 - instead of doing that
07:27 - giving descriptive variable names and
07:29 - descriptive function names even though
07:31 - they may take a little bit longer to
07:33 - type out is really important and really
07:35 - helps you self-document your code for
07:38 - example one of the reasons a lot of
07:39 - people tell me they like following my
07:41 - youtube videos is the style in which i
07:43 - code every time i have a variable name
07:45 - or i have a function or i have a class i
07:48 - really think carefully about what i'm
07:49 - naming it and make sure that it actually
07:52 - explains what's going on and isn't
07:54 - misleading now i can't necessarily think
07:56 - of a great example off the top of my
07:58 - head here you can go and click on a
07:59 - recent kind of coding tutorial of mine
08:02 - and you'll notice right away that when
08:03 - i'm naming variables naming functions
08:05 - naming classes there's a lot of thought
08:07 - that goes into that and it really helps
08:09 - self-document the code i think this is a
08:11 - really underrated skill i know a lot of
08:14 - really really great programmers that can
08:15 - code pretty much anything out when i go
08:18 - and look at their code in my opinion it
08:20 - kind of just is really messy looks like
08:21 - garbage and i can't understand it and to
08:24 - me the best code is the simplest code
08:26 - that is self-document i don't want to
08:28 - have to write comments i don't want to
08:29 - read comments if you can write
08:31 - self-documented code that is an awesome
08:33 - skill and a great habit to get into now
08:35 - we're moving on to skill number four
08:37 - which in my opinion is linux proficiency
08:40 - and when i'm talking about linux
08:42 - proficiency i really mean being
08:43 - comfortable using the linux operating
08:46 - system understanding kind of the basics
08:48 - of how it works especially users and
08:50 - permissions and knowing kind of the
08:52 - default commands you're going to use
08:54 - most commonly now the reason i'm putting
08:56 - this here even though i understand some
08:58 - people don't need to work with linux is
09:00 - because a lot of times when you're doing
09:02 - development you're going to be doing
09:03 - that on linux you're going to be either
09:05 - working on a linux operating system or
09:07 - hosting something on a linux operating
09:09 - system and you're going to have to ssh
09:11 - in you're going to be using a lot of
09:12 - different commands and being able to do
09:14 - this quickly and not have to kind of
09:16 - look up and cross cross reference a ton
09:18 - of commands is really helpful for
09:20 - productivity and efficiency so for me as
09:22 - soon as i actually started getting good
09:24 - at linux and comfortable using the
09:25 - system i noticed that i was just much
09:27 - quicker to go and deploy anything
09:29 - anytime i had to do something on a linux
09:32 - machine that wasn't a hurdle that wasn't
09:34 - a roadblock for me and i didn't feel
09:35 - kind of intimidated to go do that i need
09:38 - to host a website okay no problem i'll
09:40 - spin up a virtual private server ssh
09:42 - into that and get going right because i
09:44 - have the confidence i know that i have
09:46 - the skills to be able to work with that
09:47 - without having to look up a ton of stuff
09:49 - look at a bunch of articles you know
09:51 - spend hours essentially trying to learn
09:53 - linux while accomplishing some type of
09:56 - task so i get it this may be
09:57 - controversial i'm sure many of you
09:59 - probably don't need to work in linux but
10:01 - for me i work in linux a ton and i think
10:03 - it's a really underrated skill to
10:05 - actually understand the operating system
10:07 - and know a lot of the commands off by
10:09 - heart it just really speeds up your
10:10 - workflow at least for me anyways that is
10:13 - skill number four let's move on so
10:15 - lastly we are moving on to skill number
10:18 - five which is learning and using
10:20 - keyboard shortcuts as well as setting up
10:22 - your environment now really the goal of
10:25 - this section right here is to say that
10:26 - you need to reduce the amount of
10:28 - repetitive work that you're doing when
10:30 - you're programming and try to be as
10:32 - efficient as possible a few seconds here
10:35 - and there constantly over the entire day
10:37 - saves a ton of time and when you
10:39 - extrapolate that over multiple years of
10:42 - using say the same piece of software
10:43 - it's really really powerful how much
10:45 - faster you can be when you actually
10:47 - learn keyboard shortcuts and learn all
10:49 - of the kind of the tricks and neat
10:51 - things you can do in different pieces of
10:53 - software for example in vs code there is
10:55 - tons of different shortcuts i've learned
10:58 - let's say 30 or 40 of them that really
11:00 - speed up my workflow and when i need to
11:02 - use a new kind of feature quite commonly
11:05 - i'll always look for the keyboard
11:07 - shortcut that's kind of a habit for me
11:08 - the first thing i want to do is find the
11:09 - shortcut for that so i don't have to
11:11 - keep going through the ui menus and kind
11:13 - of searching for this feature whenever i
11:15 - want to use it now to give you a more
11:17 - concrete example here i edit all of my
11:19 - videos in premiere pro i actually don't
11:21 - do a lot of the editing i just do kind
11:22 - of a pre content cut and then i set it
11:25 - to my editing team who actually adds the
11:26 - transitions regardless for the longest
11:29 - time in that software i never learned
11:31 - the shortcuts i didn't know the cut
11:33 - shortcut i didn't know the fast forward
11:35 - shortcut or like change the speed to 2x
11:37 - i didn't know a ton of different
11:39 - shortcuts and because of that reason i
11:40 - was spending so much time on my mouse
11:43 - actually looking at the user interface
11:45 - finding the button for the feature i
11:47 - wanted moving the mouse over it seems
11:49 - like a really trivial thing but when
11:51 - you're spending five seconds to make a
11:52 - cut in your video and you do that you
11:55 - know a hundred times in the editing
11:57 - session it's really really helpful to
11:59 - actually know the shortcut and then use
12:01 - that forever and when you use a bunch of
12:03 - shortcuts you actually have the muscle
12:05 - memory of using them right and so now
12:06 - you don't even have to look down at the
12:08 - keyboard you don't have to look at the
12:09 - user interface
12:10 - whatever you just know what you need to
12:11 - do to get a task done now of course the
12:14 - same thing is going to apply to coding
12:16 - there's so many different shortcuts when
12:17 - you start learning the different
12:19 - shortcuts you may also realize some
12:21 - other features that are way more
12:23 - accessible from the keyboard than from
12:25 - going through you know 10 layers of ui
12:27 - menus so that's kind of the point here
12:29 - the last thing i had was environment
12:31 - setup so there's lots of times where you
12:32 - can set up your environment to for
12:34 - example automatically test all of your
12:36 - code that's really useful that's gonna
12:38 - save you tons of time if you're working
12:40 - on a large project maybe there's a
12:42 - script that you need to run quite
12:43 - frequently why don't you bind it to a
12:45 - keyboard shortcut why don't you make a
12:46 - shortcut on the desktop whatever just
12:48 - trying to do everything possible to
12:51 - increase your efficiency and reduce the
12:53 - amount of redundant and repetitive stuff
12:55 - that you're doing
12:56 - as programmers we really should be
12:58 - automating the repetitive tasks i'm
13:00 - guilty of not doing that in a lot of
13:01 - projects and it really comes back to
13:03 - bite you and costs you a ton of time
13:05 - when you could have spent you know the
13:06 - five minute upfront investment to kind
13:08 - of set up the environment and get
13:09 - everything ready for maximum efficiency
13:11 - going forward
13:12 - anyways that's all i have for this
13:14 - section and for this video i actually
13:17 - will leave you off with one other
13:19 - underrated thing now that underrated
13:21 - thing requires me going to my streaming
13:23 - software here and this is my cat having
13:26 - a programming cat definitely underrated
13:28 - this is fresca and you guys have seen
13:30 - her on the channel before likes to hang
13:32 - out on the desk great companion for uh
13:34 - for late night coding
13:36 - definitely underrated anyways with that
13:37 - said i hope you guys enjoyed the video
13:39 - if you did make sure to leave a like
13:40 - subscribe to the channel please check
13:42 - out programming expert if you want to
13:43 - become a software engineer as quickly as
13:45 - possible link in the description you can
13:47 - use discount code tim and i hope to see
13:49 - you in another youtube video
13:53 - [Music]