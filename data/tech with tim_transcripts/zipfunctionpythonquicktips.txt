00:00 - in this Python quick tips video we'll be
00:01 - talking about these sip function and
00:03 - before I talk about that I want to
00:05 - quickly introduce a problem that the zip
00:06 - function can help us solve so let's say
00:08 - for example we have two lists x and y
00:10 - now they can contain a different amount
00:12 - of elements that doesn't matter
00:13 - what I want to do is loop through them
00:15 - and find the elements that are the same
00:16 - and find the elements that are different
00:18 - at the same index so essentially since
00:20 - this 9 here is an extra element we won't
00:22 - bother with that so what I'm gonna do to
00:24 - do that without my knowledge of the zip
00:25 - function is I'm gonna take the minimum
00:28 - length of x and y and loop through that
00:30 - using a variable I now what I'll do is
00:33 - I'll check if the value at X I is the
00:35 - same as the value of y I and if it is
00:37 - I'll print out same otherwise I will
00:39 - print out not same now when I run this
00:41 - we get an output that looks something
00:42 - like this same as 1 1 not same 2 1 same
00:46 - and so on now this is kind of tedious
00:49 - and there must be a better way to do
00:51 - something like this and there is and
00:53 - that is called B zip function so we can
00:55 - actually avoid this entire mess of a for
00:56 - loop by using zip now what zip does and
00:59 - I'll show you without the for loop first
01:00 - is it takes any amount of iterable
01:03 - objects and packs them together into
01:04 - tuples now some of you're telling me
01:06 - it's called tuples as well either way
01:09 - that's just the way I pronounce it
01:10 - doesn't really matter what I'm gonna do
01:12 - is I'm gonna take the list of zip of x
01:15 - and y and just show you what this looks
01:17 - like so when I print this you can see we
01:19 - get a list of tuples here we have 1 1 2
01:22 - 1 3 3 4 7 essentially what this does is
01:26 - matches up items in the list so 1 goes
01:28 - to 1 2 goes with 1 3 3 4 7 and then we
01:32 - will omit any other items now if I do
01:34 - this the other way so Y X this will
01:37 - still work will get pretty much the same
01:38 - thing just with the y coordinate first
01:40 - and the x coordinate second and notice
01:42 - we're not including the 9 now we can do
01:44 - multiple elements in this as well I can
01:46 - do something like Z equals and we could
01:48 - do you know like 1 2 like this and now
01:53 - if we throws that into here what we're
01:54 - gonna get is well a list of three tuples
01:57 - but this time since there's like two
01:59 - elements and Zed we're only gonna get
02:00 - two tuples here so how can we use this
02:03 - knowledge now the zip function to help
02:05 - save us some time in that previous
02:06 - problem so I'm gonna get rid of Zed here
02:08 - and I'm gonna do this now with zip so
02:10 - what I'm gonna do is say for I G
02:13 - in zip X Y if I equals equals J print
02:21 - same yes we'll do a capital here and
02:25 - then otherwise so else we will print not
02:30 - say okay so there we go so let's run
02:35 - this nap and we get the same output same
02:37 - not same same not same so essentially
02:39 - we're looping through these tuples that
02:41 - we built here so x and y is signing i to
02:43 - the first one j to the second one then
02:45 - we're checking if those values the same
02:47 - printing same otherwise we were printing
02:48 - not same so this is very useful this can
02:51 - save us a lot of time and if you're
02:52 - trying to create combinations of items
02:53 - from a turrible objects like lists
02:56 - zip can definitely help you out with
02:57 - that so anyways this has been Python
02:59 - quick tips on zip this is very useful
03:01 - you're gonna use a lot in for loops
03:03 - maybe in wild loops as well so get
03:04 - comfortable with how this works and try
03:06 - to think about the way that you can
03:07 - implement solutions using this because
03:09 - often it will save you a lot of time and
03:11 - result in you not having to build an
03:12 - entirely new list by yourself