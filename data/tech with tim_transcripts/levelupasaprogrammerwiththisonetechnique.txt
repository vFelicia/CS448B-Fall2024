00:03 - foreign
00:07 - what I want to do in this video is
00:09 - outline for you a simple strategy that
00:11 - I've been using recently that has really
00:13 - increased the amount of code that I can
00:15 - write in a day and just the efficiency
00:16 - and productivity I have when I am
00:19 - writing code now this strategy relies on
00:21 - the premise that I'm going to outline
00:23 - for you here which is that what becomes
00:25 - difficult when you get into larger
00:27 - projects or just become more experienced
00:29 - as a programmer is not writing the code
00:31 - itself it's knowing what code to write
00:34 - for me personally if you were to give me
00:36 - a list of a bunch of functions or
00:38 - classes or kind of some detailed
00:40 - requirements right you gave me what
00:42 - exactly I needed to do a bunch of
00:43 - discrete tasks I could complete those
00:45 - tasks pretty quickly and I would just
00:47 - continue going through them and spend
00:48 - the entire time pretty much writing code
00:50 - however if you don't give me that and
00:52 - instead you give me kind of a very very
00:54 - large task that's not broken down that
00:57 - requires a ton of thinking up front Etc
00:59 - that's going to take me a lot longer to
01:01 - complete now I know that seems obvious
01:03 - but the reason I'm stating this is that
01:05 - a lot of people especially as they kind
01:07 - of get into the intermediate and
01:08 - advanced stage of programming they
01:10 - forget that thinking about your code and
01:12 - designing your code is a completely
01:14 - separate thing from actually writing the
01:16 - code itself if you're constantly
01:18 - switching between these activities
01:19 - spending a few minutes writing a few
01:21 - minutes thinking a few minutes writing a
01:22 - few minutes thinking you're going to
01:24 - notice that you're extremely delayed
01:25 - you're not very efficient and you're
01:27 - constantly context switching and it's
01:29 - hard to kind of get into the Flow State
01:31 - and really get a lot done so what this
01:33 - strategy is that I want to share with
01:35 - you here is to really separate the
01:37 - thinking of your code from the writing
01:39 - of your code now I know that seems
01:41 - obvious I'm going to share with you
01:42 - exactly how I do that and kind of what
01:44 - my day looks like when I'm kind of
01:46 - getting into a code base and writing
01:48 - some code so the first thing I do every
01:49 - single morning when I wake up if I'm
01:51 - going to be coding that day depending on
01:53 - what task I'm doing is I think of
01:55 - overall what the goal is for the day
01:57 - right what do I want to get done what
01:59 - should be completed by the end of the
02:01 - day now that could be something fairly
02:02 - large that could be an entire feature
02:04 - that could be maybe a few different
02:05 - files that could be maybe some automated
02:07 - testing doesn't matter I think okay what
02:10 - is it that actually needs to get done
02:12 - once I have that I immediately start
02:14 - breaking this down into as many discrete
02:16 - tasks as possible now there could be
02:18 - many iterations of doing this but for
02:20 - example if I'm writing let's say kind of
02:23 - a social media feature where people can
02:24 - follow each other they can view each
02:26 - other's profiles let's say I'm doing
02:28 - something like that I immediately start
02:29 - thinking okay what are the separate
02:30 - components of this task well I need a
02:33 - way of tracking who's following who I
02:35 - need a way to follow someone I need a
02:37 - way to unfollow someone I need a way to
02:39 - get someone's profile Etc okay there you
02:41 - go I've just split this into four
02:43 - separate tasks now for each of those
02:45 - individual tasks again you repeat the
02:47 - process and split those into even more
02:49 - discrete tasks once I've done that now
02:52 - for each of those tasks I say okay do I
02:54 - need a file for this do I need a
02:55 - function for this do I need a class for
02:57 - this once I've done that I stub all of
03:00 - those different things now what I mean
03:01 - by stub is all right for example an
03:03 - empty file or an empty folder or an
03:05 - empty function or an empty fast doesn't
03:07 - really matter what it is but I'll write
03:09 - kind of an empty version of it so just
03:10 - the function signature just the class
03:12 - name so that I have an idea of what it
03:14 - is that I need to do now once I have all
03:17 - of this stubbing done now I need to pick
03:19 - a relative order that I want to complete
03:21 - the task in so I'll you know just order
03:23 - it I can do a comment one two three on
03:24 - all the different functions or the
03:26 - different
03:27 - um what do you call files usually I just
03:29 - remember the order that I need to go in
03:30 - and then that's when you actually start
03:32 - thinking about how you're going to
03:34 - complete the individual task so now I
03:36 - have a function in here I have a class
03:37 - here blah blah blah okay I need to write
03:40 - this individual function let me spend
03:42 - some time before I write the function
03:43 - thinking about what does this function
03:45 - need to do and again breaking it into as
03:47 - many discrete tasks as possible until
03:50 - you're at the point where you're almost
03:51 - at individual lines of code or small
03:53 - blocks of code that you need to write
03:55 - now at this point and only at this point
03:57 - is when I actually start writing any
03:58 - code now I have a very clear picture of
04:01 - what I need to do in my brain I've
04:02 - thought about different edge cases I've
04:04 - thought about essentially what the
04:06 - problem is and how I'm going to solve it
04:07 - and now I can just go and code this
04:09 - extremely fast now obviously yes I'm
04:12 - going to make mistakes I have to test
04:13 - this code all kinds of stuff still goes
04:15 - into it I may have to stop and think
04:16 - about it again but generally this
04:18 - drastically increases the output that I
04:20 - can have because now I'm not constantly
04:22 - writing a few lines of code stopping for
04:24 - a few minutes thinking writing a few
04:26 - lines stopping for a few minutes
04:27 - thinking I'm already in the flow and I
04:30 - can go for 20 30 40 whatever amount of
04:32 - time in a row just writing code and just
04:35 - being on the keyboard and really kind of
04:37 - flowing with each keystroke if that
04:39 - makes sense to you so that is really the
04:41 - strategy that I wanted to outline in
04:42 - this video I know for a lot of you you
04:44 - probably already do this this is an
04:45 - obvious thing but I know a lot of people
04:47 - that watch this channel are just
04:48 - beginners you guys are looking for some
04:50 - guidance and ways to kind of level up so
04:52 - I wanted to share this with you in case
04:54 - it could give you some value and allow
04:56 - you to kind of change the way you think
04:57 - about writing code key takeaway here is
04:59 - that thinking about and designing your
05:01 - code is a separate task from writing the
05:03 - code itself and as much as you can
05:05 - separate those two things you you're
05:07 - going to really increase your efficiency
05:08 - and allow yourself to get into that flow
05:11 - state where you can get more code down
05:13 - now I know a lot of people complain
05:15 - about writing more code whenever I say
05:18 - more code I get people in the comments
05:19 - saying well we don't want more code you
05:21 - want less code Etc what I mean by more
05:23 - code is just you're getting more
05:24 - productivity of the day more efficiency
05:26 - you're actually getting more done if you
05:28 - and me can write the same quality code
05:30 - but I can write two times the amount
05:32 - then that's better than writing less
05:34 - right so hopefully you get what I'm
05:35 - saying here hopefully this was a helpful
05:36 - video if you like these short tip videos
05:38 - leave a like subscribe to the channel
05:40 - and I will see you in another one
05:45 - foreign
05:47 - [Music]