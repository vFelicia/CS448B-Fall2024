00:02 - [Music]
00:07 - hello everyone and welcome back to the
00:08 - golang tutorial
00:10 - so in this video we're going to be
00:11 - talking about interfaces now interfaces
00:13 - are very important and very powerful
00:15 - inside of golang
00:16 - and in fact inside of any real typed
00:19 - language if you're coming from a more
00:20 - dynamic language like javascript or
00:22 - python you've probably never heard of an
00:24 - interface and in fact you don't really
00:25 - need to use one in those languages
00:27 - i mean i suppose you could but there's
00:28 - not really a real good purpose for it
00:31 - whereas in a language like golang it
00:32 - makes a lot of sense now
00:34 - what is an interface one interface is
00:37 - really a way of
00:38 - looking at a set of related objects or
00:41 - types
00:42 - so let's have a look at this example
00:43 - here to really explain this we have a
00:45 - circle
00:45 - and we have a rectangle and they both
00:47 - have this similar behavior in that we
00:49 - can call
00:50 - area on them i can call a rect area i
00:52 - can call a circle area
00:54 - and they both have a different
00:54 - implementation but they both have an
00:57 - area so in theory you know the rectangle
01:00 - in the circle
01:01 - could be looked at in the lens of they
01:03 - both have an area they're both of shape
01:05 - they both have some kind of area i don't
01:07 - need to know anything more about them
01:09 - other than that they have this area and
01:10 - while i should be able to use that area
01:12 - on them
01:13 - that's kind of what i'm getting at with
01:14 - the interface the interface lets you
01:16 - look at these types as if they're the
01:18 - same
01:19 - it kind of hides the details underneath
01:21 - and says we just care about the fact
01:23 - that these both have area or they both
01:26 - have a perimeter or they both have
01:28 - something right
01:29 - that's when interface lets us do it lets
01:31 - us define some kind of behavior
01:33 - that is similar between objects or
01:35 - similar between types
01:36 - so that we can use these types kind of
01:38 - one in the same
01:40 - with their related behavior now a good
01:42 - example of this is if we wanted to make
01:44 - a slice for example of c1 and r1
01:47 - so maybe i want to do this i want to say
01:48 - shapes colon equals
01:51 - and i want to make a slice we want it to
01:53 - be some type i don't know what the type
01:55 - is so i'm just going to write type for
01:56 - now
01:56 - and then we want c1 r1 now of course we
02:00 - don't know what to put here
02:01 - and this is going to be an error right
02:02 - we need to put some kind of type when we
02:04 - define
02:04 - this slice but what type do we put here
02:07 - we have no idea right now what i want to
02:10 - do though is i want to look through
02:11 - shapes and i want to call area on both
02:14 - of the shapes i want to be able to do
02:15 - something like shape 0 dot
02:17 - area and shapes 1 dot area and in fact
02:20 - if we look we assume
02:22 - that this is valid it's not but assume
02:23 - it's valid then really this should work
02:25 - right because
02:26 - both the circle and the rectangle have
02:28 - this area method
02:29 - so i should be able to do shape0.area
02:32 - and shapes1.area
02:33 - and that means that maybe if i had a
02:35 - huge slice of shapes
02:37 - i could do a for loop and loop through
02:38 - them and call dot area on all of the
02:41 - shapes and sum up the area right or
02:42 - something like that
02:43 - but right now we can't do that and this
02:45 - is where an interface comes in
02:47 - it lets us do exactly the behavior i'm
02:49 - trying to illustrate to you
02:51 - so i'm just going to define an interface
02:52 - and then we'll talk about it more in
02:54 - depth so i'm going to define
02:55 - type shape interface like that and
02:58 - inside of here i'm going to say area
03:01 - float 64. oh not inside the bracket
03:04 - put it there all right so what i've done
03:07 - now is i've defined a shape
03:08 - interface and all this says all the
03:12 - whole point of this interface
03:13 - is really just to say that anything any
03:16 - type any struct
03:17 - that has this area method that returns
03:20 - float
03:20 - 64 is of type shape it is
03:24 - it implements the interface shape so we
03:26 - say that when
03:27 - some kind of struct so one of these
03:29 - types that we've defined
03:31 - has the behavior defined or has the
03:33 - fields defined
03:34 - inside of this interface that it
03:36 - implements the interface
03:38 - and when it implements the interface we
03:40 - can use the interface as kind of like
03:42 - an upper level type of this struct
03:46 - now i know this is a lot of big words
03:48 - it's confusing we'll see how this makes
03:50 - sense in a second but
03:51 - really just think of the fact that since
03:53 - both circle and rectangle have an
03:55 - area method here they implement this
03:58 - this interface right because all that's
04:00 - said here is if it has area that returns
04:02 - float64
04:03 - it is a type shape that's what this
04:06 - interface says
04:07 - now if i go ahead in here and i add um i
04:09 - don't know let's just call pow i'm just
04:11 - making up a random one here and we say
04:13 - pow
04:14 - float64 well now both circle and
04:16 - rectangle do
04:17 - not implement the shape interface
04:19 - because they don't have a method called
04:21 - pow
04:22 - that returns float64 that's the basics
04:25 - that's all you really need to know of
04:26 - course if we had a method that took some
04:28 - parameters
04:29 - then i would have to define them in here
04:30 - i would have to say something like x int
04:32 - and now we would need to have not only a
04:34 - method called pow that returned float64
04:36 - but a method called pow that took a
04:38 - value x that was an integer and returned
04:41 - float64
04:42 - so that is kind of how the interface
04:44 - works now once we've kind of understand
04:46 - how you implement an interface and
04:48 - really how you define it which i think
04:50 - i've just explained pretty much
04:51 - how do we use it well we use it just
04:54 - like any other type in fact i can
04:56 - actually just plug it right in here
04:58 - and save and this is totally fine what
05:00 - does it say your shapes declared and not
05:02 - used yeah so that's a common error
05:03 - that's not to do with what i've done
05:05 - but see this is how this works since the
05:08 - circle
05:09 - and the rectangle both implement the
05:11 - shape interface
05:12 - i can use the type shape and plug them
05:15 - both inside of this slice
05:17 - now the important thing to understand
05:19 - though is that as soon as i do this
05:21 - as soon as i use an interface as a type
05:24 - all of the other behavior that i know is
05:26 - true about circle and rectangle i cannot
05:28 - access
05:29 - through this interface so i can only use
05:32 - the dot area method
05:33 - on anything inside of shapes because
05:36 - that's all
05:37 - that this knows that i know right if you
05:39 - think about it the only thing similar
05:41 - between
05:41 - the rectangle and the circle is the fact
05:43 - that they have area
05:44 - so since that's defined inside of the
05:46 - shape i can only use dot area when i'm
05:49 - looking at
05:49 - shapes on c1 i can use anything i can
05:52 - call the radius
05:52 - on r1 i can look at the width and the
05:54 - height but
05:56 - on this shapes list right here this
05:58 - shape's um slice i can only use dot area
06:01 - so let me show you what i mean if i do
06:03 - for underscore shape
06:05 - colon equals range shapes oops
06:09 - like that let's go shapes then what i
06:11 - can do is go something like fmt.print
06:14 - not printf i want it to print a line
06:16 - these autocompletions always mess me up
06:18 - all right
06:19 - line and then let's go shape dot area
06:23 - this is valid and i can do this but i
06:25 - could not for example call
06:27 - shape dot radius right and the reason i
06:30 - can't do that is because of course
06:31 - radius is not defined in the type shape
06:34 - so i can only use things that are
06:35 - defined in the interface
06:37 - when i'm accessing the interface which
06:38 - of course makes sense so let's have a
06:40 - look at this now i'm just going to run
06:42 - this down here so go run tutorial.go
06:44 - and we get the area printing out so we
06:47 - have 63 point whatever and 35
06:49 - and that is the basics of the interface
06:51 - if you implement the interface
06:53 - then you can use the objects inside of
06:56 - here inside of the type interface
06:58 - and use all of the behavior that's
07:00 - defined in the interface
07:02 - it's just a way of looking at objects
07:04 - that implement this type of behavior you
07:06 - look at them in this lens
07:08 - not in the circle lens which would give
07:09 - us access to the radius as well right
07:12 - and that is the basics behind this i
07:15 - don't know what else can we show you
07:16 - let's look at a function
07:18 - so another great thing with interfaces
07:21 - is that you can use them as
07:22 - any kind of type it doesn't just have to
07:24 - be a slice you can use them now as
07:26 - parameter types right as return types
07:28 - you can use them as a variable type
07:30 - whatever you want you can use them in a
07:32 - map right
07:33 - that's why they become so flexible
07:34 - because now you can use all these
07:36 - different types
07:38 - under this interface right so now let's
07:40 - do func
07:41 - get area and let's inside of here
07:44 - actually say we're going to take s which
07:46 - is a shape and then we're going to
07:47 - return a float 64
07:49 - and all we'll do is return the s dot
07:52 - area
07:53 - so this is very similar to what we've
07:55 - done down here all we're saying is that
07:57 - now we're going to have this function
07:59 - called get area
08:00 - instead of printing shape dot get area
08:01 - let's just print the get area
08:04 - of shape so now i just pass that shape
08:07 - here which could be a circle it could be
08:09 - a rectangle in fact it could be anything
08:10 - that just has an area method on it
08:12 - and then i return s dot area
08:15 - boom we can print that out and this
08:17 - works totally fine
08:19 - again one of the great things with an
08:21 - interface is that we can do that
08:23 - now i just want to show you what happens
08:25 - if i make these methods
08:27 - actually accept the pointer so of course
08:29 - i showed you in the previous videos
08:31 - that pointers and what is it pointers
08:34 - and values are different and we need to
08:35 - understand the difference between them
08:36 - so i need to kind of go over that here
08:38 - if we add this method so it accepts a
08:41 - pointer
08:42 - not just the actual instance or not just
08:44 - the kind of like a copy like we've said
08:46 - before
08:48 - then if i save this we're going to have
08:50 - to change some things
08:51 - so here look what we're getting cannot
08:54 - use c1
08:55 - type circle as type shape in array or
08:57 - slice literal
08:59 - circle does not implement shape area
09:01 - method has pointer receiver so
09:04 - what this is saying is i cannot use
09:07 - these so c1 and r1 which again is just
09:09 - the it's not the pointer it's kind of
09:11 - like the value right
09:13 - i cannot use that inside of here because
09:16 - how am i going to call area
09:18 - on not a pointer of circle right how am
09:20 - i going to do that
09:21 - well i can't so what i need to do when
09:23 - that's the case is i need to make sure
09:25 - that when i create a slice or i use
09:26 - these
09:27 - as a shape i'm actually passing the
09:30 - pointer
09:31 - so now we're totally fine this works we
09:33 - can do that
09:34 - but that's because again we had the
09:36 - asterisks here so if we remove the
09:38 - asterisks and in fact i can do this
09:40 - now if i just remove it from circle and
09:43 - we save here let's see what we're
09:44 - getting
09:45 - save is it not giving me any error oh
09:47 - yeah i guess i can pass the pointer well
09:49 - now i can not pass the pointer for c1
09:51 - and this still works but if i try to not
09:53 - pass the pointer for r1
09:55 - and we save we should get the red
09:57 - squiggly yeah we get the red squiggly
09:59 - popping up
09:59 - so it's good practice to always pass the
10:02 - pointer when you're making kind of
10:04 - slices and stuff like this
10:05 - just so that if you need access to the
10:07 - pointer you have it and it doesn't hurt
10:09 - to pass the pointer
10:10 - because you can still access the methods
10:12 - even if the pointer is there
10:13 - but if you have a method that has the
10:16 - pointer on it
10:17 - then you need to make sure you pass the
10:19 - pointer otherwise it won't implement the
10:21 - interface correctly
10:22 - so i hope that kind of makes sense i
10:24 - understand that's probably a little bit
10:25 - confusing and you need to do some more
10:27 - practice to really understand that
10:29 - but just when you see examples or you
10:30 - see error messages that are telling you
10:32 - like
10:32 - oh it has reference it doesn't have
10:34 - pointers stuff like that mess around
10:36 - with the ampersand and the asterisks
10:38 - because that's probably your error and
10:40 - one of the most common errors i run into
10:42 - all the time writing go code
10:43 - is the fact that i'm mismatching
10:45 - pointers and types or pointers and
10:47 - references and values and all that stuff
10:49 - so that is kind of it for interfaces the
10:52 - last thing i will say is that
10:54 - objects can implement different
10:56 - interfaces so you don't only have to
10:57 - have
10:58 - one interface they can actually
10:59 - implement three four five as many
11:01 - interfaces as you want and in fact i can
11:03 - actually go
11:04 - type shape two interface
11:07 - and then here go area float 64.
11:11 - and now technically both my circle and
11:14 - my rectangle
11:15 - implement the shape interface and the
11:17 - shape 2 interface right
11:19 - and now shape 2 is just a different name
11:22 - to look at my
11:23 - objects and in fact it's going to be the
11:24 - same view but i could have made this a
11:26 - different method right so if i made this
11:28 - now perim so maybe that's perimeter
11:30 - then if i wanted these two objects to
11:32 - implement this interface
11:34 - and this interface i would need to make
11:36 - sure that i add perimeter
11:38 - to a circle and two rect so add methods
11:40 - for a perimeter
11:41 - and then they would implement both of
11:42 - those so i hope that makes sense again
11:44 - that has been interfaces
11:46 - that's really all i can show you there's
11:48 - not too much more to go through but i
11:50 - would encourage you guys to kind of look
11:51 - them up practice with them a little bit
11:53 - because they are very important and
11:54 - they're really useful to understand that
11:56 - this is kind of the way we view
11:58 - these structs and that when we're
12:00 - viewing them in this way
12:01 - we can only access or perform any of the
12:04 - behavior that's defined
12:06 - in this kind of view that's the way i
12:07 - like to think about it again
12:09 - hopefully that makes sense let me know
12:11 - in the comments down below with that
12:12 - being said i hope you guys enjoyed if
12:14 - you did make sure to leave a like
12:15 - subscribe and i will see you in another
12:17 - youtube video