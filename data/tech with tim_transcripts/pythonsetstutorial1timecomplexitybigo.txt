00:00 - in this video I'm gonna be explaining to
00:02 - you guys all about sets giving you a
00:04 - basic tutorial how they work why they're
00:07 - useful and why we would want to use them
00:09 - over a list now a set in Python is its
00:12 - own unique data type and it looks
00:14 - something like this I'm gonna say s is
00:16 - equal to curly brackets and I can just
00:18 - create a few elements here like so okay
00:21 - and if I go type of s you can see that
00:24 - we get art that's art its own data type
00:26 - class set now when we create a list in
00:30 - Python we do something with square
00:31 - brackets maybe one two three four five
00:34 - so on like this and if I type L you can
00:37 - see we get class list these are indeed
00:40 - different now what's different about
00:43 - them so a list in Python is an ordered
00:46 - collection data type it's a mutable data
00:48 - type a set is also a mutable data type
00:51 - the main difference here is ordered now
00:53 - a list is ordered a set is not and what
00:57 - that means is that if I want to find for
00:59 - example the first element in our list
01:01 - well Python knows that one is our first
01:04 - element it knows that fifth is our five
01:06 - sorry is our fifth element it knows that
01:08 - three is the third element it remembers
01:10 - this order and that's really important
01:13 - and that's really good for a lot of
01:14 - applications but in some instances we
01:16 - don't care about that so I'll show you
01:17 - if I want to get the first element I do
01:19 - l0 want to get the last one I do l4
01:21 - right and that's great we all know that
01:24 - how that works now watch what happens if
01:27 - I try to grab the first element of my
01:30 - sets you say okay well you want you want
01:31 - one all you do is type s0 and you can
01:34 - see that it actually throws me an error
01:36 - and this is because the set object does
01:39 - not support indexing what that means is
01:41 - that this is actually not ordered so
01:45 - when we create this yes it looks ordered
01:47 - to us but within the computer there's no
01:49 - distinct order and where these numbers
01:51 - or these elements are stored they're
01:53 - just kind of there you can think of it
01:55 - it's just like a big circle and there's
01:57 - a bunch of random elements I don't want
01:59 - to say random there's a bunch of
02:00 - elements within the circle there's no
02:02 - specific order all the computer knows is
02:04 - if they are there or if they are not
02:06 - there so another property of sets is the
02:09 - fact that they only contain you
02:11 - elements and what I mean by like that is
02:14 - if I creep if I recreate my list if I do
02:16 - something like 1 1 3 4 and I print my
02:19 - list you we get 1 1 1 3 4 now watch if I
02:23 - try to do this with a set so I say s
02:24 - equals 1 1 1 3 4 and I print s you see
02:29 - we only get 1 3 & 4 and this is a
02:33 - property of a set it only contains
02:35 - unique unordered elements and that is
02:38 - something you really need to understand
02:39 - and remember whenever you're using sets
02:41 - unique unordered elements okay so if we
02:44 - try to add in the way we add to satisfy
02:47 - doing s dot add an element that already
02:49 - exists something like 3 and we print s
02:51 - you can see that it doesn't actually add
02:52 - that to our set and that's because that
02:54 - element already exists and this is
02:57 - really useful on the fact that only
02:59 - contains unique elements because it
03:00 - actually allows us to remove duplicate
03:03 - elements from lists so if we're given a
03:06 - list of saying names and say for example
03:09 - someone wrote down their name twice and
03:11 - we want to count how many names are in
03:12 - that list well we don't want to count
03:14 - lists or names that exist twice or
03:17 - people wrote them down twice we only
03:19 - want to count ones that are unique so
03:20 - the way we can do that is we could
03:22 - convert the list into a set and then
03:24 - count how many elements are in the set
03:25 - and that's a really useful way and
03:27 - that's what we're I'm going to show you
03:28 - an example of how that works later on in
03:31 - this file on the right here so to remove
03:34 - something from a set we can do s dot
03:35 - remove and simply give it the argument
03:38 - we want to remove so in this case I want
03:40 - to move three you can remove three print
03:42 - s I get one for now I just want to go
03:45 - over one more time the importance of the
03:47 - unordered part of the set if we're ever
03:50 - doing anything and we care about the
03:52 - order of our elements or we care about
03:54 - the frequency of our elements we're not
03:56 - gonna want to use a set we only want to
03:58 - use this set in cases where we care if
04:00 - data exists or if it doesn't exist and
04:03 - when I say data
04:03 - I just mean elements okay so another
04:06 - thing I didn't talk about is if we
04:07 - created a set you can actually give it
04:10 - different elements as well they don't
04:11 - through the same type singular 1 3 and
04:13 - that works fine just like a list just
04:15 - want to make sure you guys know that it
04:16 - doesn't have to just be with numbers
04:18 - it's just easier to use numbers
04:19 - sometimes and when we add things like if
04:23 - we add like negative
04:25 - eight and then we print s guess if we
04:27 - get negative eight over here one three
04:29 - string and it's not in the same order in
04:32 - which we typed it in so just to prove to
04:34 - you that this really is unordered and
04:36 - it's kind of random the way that it
04:38 - displays it to the screen to us it's not
04:40 - completely random but that's the way we
04:41 - can think of it for right now
04:43 - so why would we want to use a set then
04:45 - well what's the point of it we can just
04:47 - do the same thing with lists we could
04:48 - just remove duplicate elements
04:50 - well sets are actually really fast and
04:53 - the reason they're really fast is
04:55 - because they're unordered because we
04:57 - simply know if elements exist or don't
04:59 - exist we can actually find if an element
05:01 - exists in a list really or in a set
05:04 - really really fast so fast that it's
05:07 - almost constant time or you can think of
05:09 - it as constant time so I have to quickly
05:12 - go over something called Big O notation
05:14 - right now just so you can understand
05:15 - what's known as the time complexity of
05:18 - sets versus lists I'm gonna try to do
05:20 - this really basically and not take up a
05:22 - ton of time but it's really important
05:24 - that you understand this especially if
05:26 - you're writing any like large programs
05:28 - or anything that's going to deal with
05:29 - large amounts of data this could save
05:31 - you a lot of time in your programs so
05:33 - I'm creating a list I'm gonna say X for
05:36 - X in range 100 like this okay now if we
05:42 - wanted to see if an element exists in
05:45 - our list the way that we would do this
05:47 - in Python is we could do something like
05:50 - elements in L and simply this is like
05:54 - the Python way to do it but all this is
05:57 - really doing is it's running a standard
05:59 - for loop on our lists or saying for L in
06:02 - X if ei L equals equals whatever we're
06:07 - looking for so let's just say looking
06:08 - forward to make this simple oops then
06:12 - we're just gonna return like the index
06:15 - of that element so since we need the
06:17 - index R in before I in enumerate X
06:22 - return I like that okay and then looking
06:26 - for like this is equal to and then
06:30 - whatever number so let's get me do 98
06:32 - okay
06:33 - so the way that this works now and this
06:36 - is fairly straightforward is we're
06:37 - looping through a not L or not X re L or
06:41 - looping through L which is a list
06:43 - containing numbers from 0 to 99 and
06:46 - we're seeing if the number 98 exists so
06:49 - for every element in the list we're
06:50 - checking if it's equal to 98 now if it
06:55 - is that's great we found our element and
06:57 - we can return that index okay the only
07:00 - issue with this is well what if the
07:03 - numbers not in the list that means we're
07:04 - gonna have to look through the entire
07:06 - list just to find out that this element
07:09 - doesn't actually exist now same thing if
07:13 - our element is one of the last elements
07:15 - in the list or even if it's just
07:16 - somewhere near the middle or even
07:17 - sometimes near the beginning this can
07:19 - take a really long amount of time
07:21 - in fact this takes Big O of n time which
07:26 - is known as a linear function right so
07:29 - however big X gets an X it's gonna be
07:32 - like the length of our list is how long
07:35 - it takes to find if an element exists
07:37 - okay obviously it depends where the
07:39 - element is in the list but we usually go
07:41 - based off in worst case scenario so
07:43 - saying like the element was the last
07:44 - element of the list starting from the
07:46 - end and looking to the beginning we
07:47 - would have to look through every single
07:48 - element in the list
07:49 - now with sets this is not how this works
07:52 - with sets it actually just takes one
07:54 - operation to be able to determine if an
07:57 - element is in the list so remember I set
08:00 - up there if we do something like what do
08:03 - you call it looking for in L this line
08:08 - is actually the exact same as this
08:10 - except it just gives us like a true or
08:11 - false value so I could say true meaning
08:13 - like yes we found it's in the list yeah
08:14 - this is the exact same as this now if I
08:17 - do and I create a set now and I say l
08:20 - equals I'll say guess we'll do s equals
08:23 - x for X in range a hundred like this
08:28 - okay and now I change this to looking
08:31 - for in s well this actually doesn't now
08:33 - take n operations this line is not the
08:35 - same as the line of this we're placing
08:37 - this with s it's the same as Big O of
08:42 - one which simply means constant time one
08:46 - operation
08:47 - okay so just know that whenever we're
08:49 - looking for things in a list it's much
08:51 - much much faster to either first convert
08:54 - it to a set if we're gonna be looking
08:55 - for more than one different element or
08:58 - if we already have a set will create a
09:00 - set first rather than creating a list
09:02 - and looking that set because it's gonna
09:04 - take us one operation as opposed to n
09:06 - now this doesn't really matter if you're
09:08 - looking at any things that are less than
09:09 - like a hundred thousand elements long
09:12 - because on a computer those are gonna
09:14 - run really fast you're gonna be able to
09:15 - look through that really quickly but if
09:17 - you're looking through lists that have
09:19 - like billions or trillions of elements
09:21 - then creating the turning them into a
09:23 - set is obviously gonna be a lot faster
09:25 - when we're looking for elements
09:26 - especially if we're looking for more
09:28 - than one okay um so I hope that kind of
09:32 - makes sense I know it's slightly
09:33 - confusing if you don't know anything
09:34 - about Big O notation just know that sets
09:36 - are really fast to find things and see
09:38 - if things are in there okay now the next
09:42 - thing that we're going to talk about
09:43 - here is two more operations that sets
09:46 - are really fast done and sets are really
09:48 - fast at adding things and removing
09:50 - things from the list so whenever you
09:52 - need to remove something from a list
09:54 - sorry what we have to do is we first
09:57 - have to find the index of that element
09:59 - so again we're gonna have to do this
10:01 - and then once we find it instead of
10:02 - returning true what we would have to do
10:04 - is we'd have to say well whatever L L
10:06 - dot and then I think you just do like
10:08 - remove and then whatever the index is so
10:10 - you do l dot remove I and I would get
10:12 - rid of that current index so again this
10:15 - takes us o n operations to remove an
10:18 - element now same thing if we're adding
10:21 - things to the list so not um not at the
10:23 - end if you're adding it at the end it
10:25 - only takes one operation but if you're
10:26 - adding in the middle so like if I did
10:28 - like a old on insert and then I inserted
10:31 - something somewhere in the middle well
10:33 - this would actually take us and
10:35 - operations to do unlike a set where if
10:39 - you do something like s dot odd this
10:43 - actually takes the same o of one
10:46 - operations to complete so I start add
10:49 - three this takes over one and same thing
10:51 - for move removing something what you
10:53 - said s dot removed like five this again
10:56 - takes o of one operations
10:59 - to complete and the reason again for
11:01 - this is because whenever we're looking
11:03 - for something in the set it takes oh one
11:04 - so to add something we simply obviously
11:08 - it's only I say go one because we just
11:09 - have to throw it in but when we're
11:10 - removing it we find like the index or
11:12 - wherever it exists in the set and then
11:13 - we can remove it and we can do that so
11:15 - quickly so that's why we would want to
11:17 - use the set whenever we're like trying
11:19 - to look if an element exists we're
11:21 - trying to add it if we're trying to
11:22 - remove it so quickly to recap I know I
11:25 - went through a little bit of kind of
11:27 - like math here and like Big O notation
11:28 - which might be confusing to you guys but
11:31 - what you want to do is you want to use a
11:33 - set when you're looking for elements in
11:35 - something so you want to see if
11:37 - something exists you don't care how many
11:38 - times it exists you don't care what
11:40 - order it comes in you only care if it is
11:42 - there that's when you want to use a set
11:44 - you want to use sets when you're just
11:46 - gonna be adding things like that are
11:48 - unique we're removing elements because
11:50 - that's really fast operation and sets
11:53 - are also useful for determining if you
11:54 - have like multiple elements or duplicate
11:57 - elements in your list the way that you
11:59 - can do that and this is a really cool
12:01 - trick actually it's like dupe is equal
12:04 - to the blend of sets okay so set of like
12:11 - s equal equal to the line s so say you
12:17 - have s and it's a list here okay and you
12:20 - create like a bunch of elements in here
12:22 - like that okay five and six and you want
12:25 - to see if any duplicate elements exist
12:27 - in s we could write a for loop and you
12:29 - can look through and you can see if any
12:30 - do because you get sort the list
12:31 - whatever there's so many ways to do this
12:33 - but the fastest way you should just
12:35 - simply convert this to a set and then
12:38 - just check the length of the set versus
12:40 - the length of the original like list so
12:44 - because what's gonna happen is we
12:46 - convert this to a set we're gonna say
12:47 - like at set s is equal to and then it's
12:51 - gonna look something like this and say 1
12:52 - 13 4 5 6 now the length of this is
12:57 - obviously less than the length of the
13:00 - original list so that means we must have
13:03 - had at least one duplicate element in
13:05 - our list and by just giving a condition
13:08 - like this here that's going to give us
13:09 - false because these links aren't the
13:11 - same so we know there
13:12 - duplicate so we actually just do it not
13:14 - equal to if we wanted to get a true
13:15 - value for duplicates existing in the
13:17 - list I figured I'd just show that to you
13:19 - because that comes up quite often and
13:21 - you want to do something like this and
13:22 - this saves you a quite a bit of time one
13:25 - last thing for any of you guys that are
13:26 - still here watching and didn't die off
13:28 - when I started talking about Big O
13:30 - notation when you convert something to a
13:32 - set so if you do like a set of s this
13:35 - takes o of n operations because what has
13:39 - to happen is we have to take every
13:41 - element in the list and add it into a
13:42 - set and since every time we add to a set
13:45 - it takes a 1 well if you have n elements
13:46 - of a 1 that is exactly open operations
13:50 - so just keeping that in mind if you're
13:52 - converting things to set and you want to
13:53 - do stuff faster than Oh N so faster than
13:55 - linear in just something to think about
13:58 - so anyways I hope I didn't confuse you
14:00 - guys too much um this is exactly what a
14:02 - set is it's really useful for finding
14:05 - things really quickly adding and
14:06 - removing and yeah so if you guys enjoyed
14:08 - the video please make sure you leave a
14:09 - like and subscribe and I will see you
14:11 - again in the next one
14:13 - [Music]