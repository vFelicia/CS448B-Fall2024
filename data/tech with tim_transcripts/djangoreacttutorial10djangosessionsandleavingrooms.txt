00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - django and react tutorial
00:12 - video so in this video we're going to be
00:14 - focusing on the room page
00:15 - in the last video we kind of styled the
00:17 - home page and we made it so
00:18 - that we got redirected to the correct
00:20 - room when we you know say rejoined the
00:23 - website later on if even if we had
00:24 - closed the website
00:26 - uh we went to the room that we are
00:27 - currently in so now we need a way to
00:29 - actually leave a room so we're gonna
00:30 - have to set up an endpoint
00:32 - on the server again or in our api that
00:34 - lets us leave a room and then we're just
00:36 - gonna style this actual room page so it
00:38 - looks a little bit nicer
00:39 - and yeah again we have that button so we
00:41 - actually can leave the room
00:42 - all right so i don't think i need to
00:44 - give much more of an introduction than
00:45 - that let's just get started i'm in my
00:47 - room.js component
00:49 - let's go to the top of the file and
00:50 - let's import some things we're going to
00:51 - need to do a little bit of styling
00:53 - so we're going to import grid we're
00:55 - going to import
00:56 - button and we're going to import
00:58 - typography this is going to all be
01:00 - from at material ui
01:04 - core and we can end that with a
01:06 - semicolon all right so let's go to
01:08 - render here
01:09 - i'll leave this stuff in case i want to
01:10 - use that
01:12 - just down there and up here we'll start
01:14 - doing our render so i'm going to set up
01:16 - a grid
01:16 - this is going to be a container we're
01:18 - going to say that the spacing
01:20 - is equal to 1 and then we can end the
01:22 - grid like that
01:24 - oh this is going to be kind of annoying
01:25 - let's just throw this in a
01:27 - comment at the bottom of the file just
01:30 - in case i want to reference this later
01:31 - on
01:31 - okay so now inside of grid there you go
01:33 - that looks nicer
01:34 - let's make two grid items so let's say
01:38 - grid and actually we'll do three grid
01:40 - items or maybe even four if we want to
01:41 - show all of this stuff
01:43 - so we'll say grid item xs equals
01:46 - 12 and then spacing or not spacing sorry
01:49 - align equals center and then
01:52 - end the grid now let's just copy this
01:55 - three times
01:57 - so two three and four great now inside
02:00 - of the first grid item i'm going to make
02:02 - a title i'm going through this quickly
02:04 - just because we've done it a bunch of
02:05 - times
02:06 - but i'm going to say typography we're
02:08 - going to say that
02:09 - the variant is going to be equal to feel
02:12 - free to mess with this but i'm going to
02:13 - make this h4
02:14 - we'll say that the component then is
02:16 - going to be equal to h4
02:18 - as well and then we'll end the
02:19 - typography tag
02:21 - now inside of here let's say actually
02:24 - not room code we'll just say code
02:25 - is equal to this dot room
02:29 - code like that and this will have to be
02:32 - inside of
02:32 - our curly braces all right so i'm
02:35 - actually going to copy this because for
02:36 - the next two grid items i'm just going
02:38 - to make them
02:39 - give us the information about votes
02:41 - guests can pause and host actually so
02:42 - three of them
02:43 - and then we'll add a button so we will
02:44 - need one more grid item but anyways
02:46 - paste that in there
02:47 - paste that in there and paste that in
02:50 - there
02:51 - and then let's just take votes so votes
02:53 - will be equal to that
02:54 - let's put that inside of this typography
02:57 - easy enough uh let's take guests can
03:00 - pause
03:02 - and let's put that inside of this one
03:05 - and then let's take host and let's put
03:08 - that inside of the other one
03:09 - now let's just make these a little bit
03:11 - smaller because i don't want all of them
03:13 - to be as large as
03:14 - h4 so let's make these h6 or
03:17 - h5 we can mess with them after and see
03:19 - how they look
03:20 - so h6 h6
03:23 - and h6 okay give that a save
03:27 - now let's add one more grid item except
03:29 - in this one we're going to make a button
03:31 - so grid item we can remove typography
03:34 - we'll say button we'll say the color is
03:37 - equal to
03:37 - we could make the secondary or primary
03:40 - actually let's have a look at what our
03:41 - other back buttons have been have
03:43 - been before so if we have a look at back
03:45 - uh yeah it's color secondary so i'm
03:46 - actually just going to copy all this
03:49 - and we'll go back to room.js there we go
03:52 - so variant equals contain
03:53 - color is secondary 2 slash and link
03:56 - perfect that's actually exactly what i
03:57 - wanted
03:58 - we do need to import link though we'll
03:59 - do that in a second then we will say
04:01 - button inside of here we'll simply say
04:04 - leave room like that okay so now let's
04:08 - import link
04:09 - so let's say import
04:13 - link from react
04:16 - router hyphen dom perfect and
04:19 - that should be good for the render okay
04:22 - so i can remove this comment now
04:24 - let's actually just give it a quick look
04:26 - and see what this page is looking like
04:28 - all right so refresh and there we go
04:30 - that looks a lot nicer in my opinion we
04:31 - have the code we have votes we have
04:33 - guests can pause and host
04:35 - that is equal to true maybe we would
04:36 - want to make these a little bit smaller
04:38 - maybe we can make those p
04:39 - tags or something but for now this is
04:40 - fine and the styling of this page is
04:42 - going to change as we actually add the
04:44 - stuff related to spotify
04:46 - anyways when i press this it brings us
04:48 - back to the home page and then
04:50 - it automatically brings us here you can
04:52 - kind of see that it's like
04:53 - you know re-rendering it because it's
04:55 - going to the home page and the home page
04:56 - is saying oh you're still in a room
04:58 - and then it's bringing us back to this
04:59 - page so of course that's not really what
05:01 - we want so now we need a way to actually
05:03 - leave the room
05:04 - so let's make a method in here and this
05:06 - method is what we're going to call when
05:08 - we press the button
05:09 - so we actually leave the room and in
05:10 - fact that's going to mean that we have
05:12 - to actually remove this redirect from
05:14 - this button which is kind of annoying
05:15 - because i just have that in there
05:17 - but that's fine i guess we'll do that so
05:19 - anyways let's make a new
05:20 - new method here we're just going to call
05:22 - this leave
05:24 - button pressed and like
05:27 - that oops what am i doing here i'm just
05:29 - pressing all kinds of random keys on the
05:31 - keyboard
05:32 - let's bind this so let's go up here and
05:34 - let's say
05:35 - this dot leave button pressed
05:40 - is equal to this dot leave button
05:42 - pressed
05:43 - dot binds and we'll bind it to the this
05:46 - keyword
05:47 - all right so now inside of here we're
05:49 - gonna have to call an end point that
05:50 - will allow us to actually leave the room
05:52 - but before we do that we need to create
05:54 - that endpoint so let's go
05:55 - to our api let's go to views let's make
05:58 - a new class
05:59 - and let's see what we want to call this
06:01 - one so we'll continue in just a second
06:03 - but i need to quickly thank the sponsor
06:05 - of this video and this series which is
06:06 - as you already know
06:07 - algo expert now i'll go expert is a
06:10 - great platform to use to prepare for
06:12 - your software engineering coding
06:13 - interviews
06:14 - they have all kinds of resources like a
06:15 - data structures crash course
06:17 - if you're going for some higher up
06:18 - interviews they also have a systems
06:20 - design course which is really useful and
06:22 - personally i've just watched because i
06:23 - find it interesting to learn about
06:25 - system design
06:26 - and large-scale systems with that said
06:28 - if you want to check out algo expert
06:29 - there is a link in the description
06:31 - use the discount code tech with tim for
06:33 - a discount on the platform
06:35 - so logically i think it makes sense just
06:37 - call this leave
06:38 - room so let's say class leave room let's
06:41 - inherit from api view
06:42 - and let's actually make this a post
06:44 - request the reason i'm making this a
06:45 - post request is because we're going to
06:46 - actually be changing information on the
06:48 - server
06:49 - we're going to be removing the
06:50 - information from the
06:52 - room code in our session or we're going
06:54 - to be just removing the fact that we
06:55 - have a room code in this user session
06:57 - so it makes sense to make that a post
06:58 - request because a post usually means
07:00 - you're like
07:01 - updating or adding or doing something on
07:03 - the server changing information
07:05 - anyways we're going to say post we're
07:06 - going to take self request format equals
07:09 - none
07:09 - and then we're going to say if room
07:11 - underscore code
07:12 - is in the self dot request
07:16 - dot session then what we can do is we
07:18 - can say code equals self dot request
07:21 - dot session dot pop room
07:24 - underscore code so what this will do is
07:26 - actually remove room code
07:28 - from the session this is like i promised
07:30 - in the previous videos
07:31 - how you can actually remove information
07:33 - from a user session
07:35 - now that will actually give us access to
07:36 - the code so the reason we're actually
07:38 - going to store the code here because
07:39 - like i said self.request.session.pop
07:42 - will actually give us the code that was
07:43 - in this session
07:44 - the reason i'm going to do that is
07:45 - because i want to check if this user
07:48 - is the host of a room and if they are
07:51 - then we need to delete that room now i
07:53 - actually i guess i don't really need the
07:54 - code to do that
07:55 - i can use the code to do that but i also
07:57 - could just filter the rooms based on
07:58 - their host and see if it's equal to this
08:00 - guy's
08:01 - session key so in fact i'm going to go
08:03 - back on what i said i'm going to remove
08:04 - code like that
08:05 - and i'm just going to say that i guess
08:08 - the
08:08 - host underscore id is equal to
08:13 - self.request.session.session
08:14 - underscore key and let's just make sure
08:16 - that's what we've been using yeah it
08:17 - does look like that's what we've been
08:18 - using
08:18 - and now we're just going to do a query
08:20 - on all of our room objects and see if
08:22 - this user was the host because if the
08:23 - user
08:24 - or if the host of the room leaves then
08:26 - that room needs to be closed right and
08:28 - everyone else really needs to be kind of
08:29 - kicked out of that room
08:30 - uh which is another thing that we'll
08:31 - have to deal with later but for now we
08:33 - can just deal with this
08:34 - so we'll say room underscore results
08:38 - equals and then i guess we're just going
08:39 - to go with room
08:41 - dot objects dot filter
08:44 - and then we'll filter by host equal to
08:47 - host underscore id like that all right
08:50 - we'll say
08:50 - if room results or i guess if the len of
08:54 - room results
08:55 - is greater than zero then room
08:58 - is equal to room results at index zero
09:02 - room dot delete this will just simply
09:06 - delete the room and yeah that's really
09:08 - all we needed to do all right so here we
09:10 - are removing
09:11 - the code from the user session we're
09:13 - checking if they're hosting a room
09:15 - if they are we will delete that room and
09:18 - then at the very end of this we'll
09:19 - simply return a response
09:21 - and say response
09:24 - message and then just success like that
09:28 - i mean we can put whatever we want here
09:30 - i'll just go with that
09:31 - then status equals status dot http
09:34 - underscore 200
09:35 - underscore okay now it doesn't really
09:37 - matter if we call this and the user's
09:39 - not in the room if they're not we'll
09:40 - just still say hey
09:42 - you know this was fine you know
09:43 - technically we removed your room code
09:45 - from the session even though you didn't
09:47 - really have one
09:48 - so if you wanted to get all fancy you
09:49 - could check if or you could send a
09:51 - different response sorry if the user was
09:53 - not
09:54 - actually already in a room but it
09:56 - doesn't really matter if we do that or
09:57 - not
09:57 - anyways let's go to urls now let's
10:00 - import
10:02 - leave what the heck okay let's import
10:04 - leave
10:05 - room like that and now we'll say path
10:09 - and inside of here we'll just make this
10:10 - leave hyphen room
10:12 - and then of course it's going to be
10:13 - leave room dot as underscore
10:15 - view all right so now that we have that
10:17 - all we have to do is actually just call
10:18 - this endpoint when we want the user to
10:20 - leave the room and that should be it so
10:23 - let's actually go to
10:24 - room now inside of here we need to call
10:27 - that endpoint so let's say fetch
10:29 - we're going to fetch slash api slash
10:32 - leave hyphen room we actually need to
10:34 - give this some request
10:36 - options because again this is a post
10:38 - request so at the top here we're going
10:39 - to say const
10:41 - request options like that
10:44 - is going to be equal to i guess a
10:46 - dictionary or an object or whatever you
10:48 - actually call this in javascript
10:50 - and we'll say method it's going to be
10:52 - equal to post
10:53 - and then we're going to say headers and
10:55 - that's going to be equal to or
10:57 - colon content type like that and then
11:01 - will give me the autofill
11:02 - no it's not giving it to me application
11:04 - slash json
11:06 - all right so now we'll simply pass that
11:08 - in so we'll say
11:09 - request options like that and then we'll
11:12 - add our dot
11:13 - then and we can simply take the
11:16 - underscore
11:17 - response and then we actually don't
11:19 - really care what the response is that's
11:20 - why i'm giving it an underscore
11:22 - and what we'll do here is after we have
11:25 - done this so pretty much
11:26 - after we have actually called this
11:27 - endpoint and we've leave or we've left
11:30 - the room we will redirect to go back to
11:32 - the home page
11:33 - so pretty much what i'm trying to say
11:35 - here is that right now or
11:36 - you would have seen previously when we
11:38 - tried to leave the room it automatically
11:40 - redirected us back to the room right
11:42 - because if you go to the home page
11:44 - when we go to the homepage it would have
11:45 - checked hey is this user in the room
11:47 - we are in the room so then it
11:49 - automatically brings us back to the room
11:52 - obviously we don't want that so before
11:53 - we redirect to go back to the room we
11:56 - want to make sure we've actually
11:57 - left the room and that by calling this
12:00 - endpoint right here we're not going to
12:02 - get given the fact that hey this user is
12:04 - still in the room
12:05 - so we're pretty much just waiting until
12:06 - the server updates our information
12:08 - and then once it does we head back to
12:10 - the home page so we don't get redirected
12:13 - back to the same page we were just on
12:15 - so that's why i'm going to go here to
12:17 - button i'm going to remove the two
12:19 - and the component which actually means
12:21 - now i can remove the link
12:22 - import we don't need to use that and
12:24 - here i'm going to actually just use kind
12:26 - of the code way to redirect us so i'm
12:28 - going to say this
12:29 - dot props dot push
12:33 - and then inside of here i'm going to say
12:35 - slash room
12:36 - slash and then the room code or sorry
12:38 - what am i saying slash room
12:40 - i'm just going to redirect actually
12:41 - slash because we just want to redirect
12:43 - back to the home page
12:44 - and well that is denoted by slash so
12:46 - that is
12:47 - actually all we need to do and now this
12:50 - should work if we put this leave button
12:52 - press method as the on click for
12:54 - our button so here let's go and let's
12:56 - say on click
12:57 - is equal to and then this
13:01 - dot leave button pressed
13:04 - all right so that should be all good
13:07 - let's give this a shot and see if it is
13:09 - all working so refresh
13:10 - uh just for good measures here i'll just
13:12 - empty the cache in case
13:14 - we press leave room and nothing is
13:17 - happening
13:17 - interesting okay so let me have a look
13:19 - here and oh wait looks like we have some
13:21 - errors
13:21 - uh this.props.push is not a function ah
13:24 - okay so i've already determined what the
13:26 - error is
13:26 - i think this is supposed to be this dot
13:28 - history uh
13:30 - it might be this.props.history or it
13:32 - might be this dot history
13:34 - uh what is it i think it's this dot
13:35 - props dot history dot push
13:38 - uh now i think i showed this to you
13:39 - before but this is literally just gonna
13:41 - redirect us to whatever page we put here
13:43 - so i think that's the right one let's
13:45 - try this now let's refresh leave room
13:48 - and internal server error ah okay that's
13:51 - annoying let's have a look at the python
13:53 - server and see what's going wrong
13:54 - and another silly mistake on my part
13:57 - this does seem to happen a lot i have
14:00 - room.object.filter this need to be
14:03 - objects.filter
14:05 - and we should be good now so sorry just
14:07 - on line 100 again you guys can look at
14:09 - the code file in the description
14:10 - but this should be objects not object
14:13 - you probably realize that when i made
14:14 - the mistake
14:15 - anyways let's refresh leave room and
14:18 - leave
14:18 - room okay so that worked but now we're
14:21 - getting more
14:22 - errors so let's have a look at this and
14:23 - see what's wrong
14:25 - all right so i'm back after probably
14:27 - about 15 minutes of trying to look
14:28 - through and figure out what the heck
14:30 - was going wrong so i've actually had to
14:32 - make a fair amount of changes they're
14:34 - currently changed but i'll kind of like
14:36 - erase the change and then rewrite it so
14:38 - you can see what happened
14:39 - essentially what was going on and the
14:41 - issue i was kind of running into i
14:42 - usually skip through them but this one's
14:43 - kind of
14:43 - important uh was that what would happen
14:46 - is
14:47 - i would leave a room say on like this
14:49 - tab right and actually leave the room
14:50 - successfully that'd be fine like i could
14:52 - get back to this home page
14:54 - but if i was on another tab and say i
14:56 - was in a room so i'll just simulate
14:58 - the issue like i'm in a room here i
15:00 - refresh it brings me into the room
15:02 - i leave the room from this page but then
15:04 - when i refresh on this page
15:06 - it's refreshing slash room slash and
15:08 - then this code
15:09 - and well since this room no longer
15:12 - exists anymore we got an error
15:13 - so i need a way to figure out if the
15:15 - room doesn't exist and then
15:17 - actually redirect us back to the home
15:19 - page if for some reason we try to go to
15:21 - a room that doesn't exist right that was
15:23 - kind of the main
15:24 - issue uh now another like slight problem
15:26 - that was happening that i managed to fix
15:28 - and i'll discuss
15:28 - that is i would press leave room but
15:31 - then it would just automatically go to
15:32 - the home page and then the home page
15:34 - would redirect me back
15:36 - to the room that no longer existed so
15:38 - there was a lot of stuff going on with
15:39 - that and anyways i
15:40 - i have the solutions to those but i just
15:42 - wanted to go through what those problems
15:43 - were
15:44 - uh so first thing that i'm gonna do
15:46 - actually let me just kind of go
15:47 - back and erase all the fixes i made just
15:50 - so we can go and kind of do them from
15:51 - scratch
15:53 - so i think that's good
15:56 - okay let's go back to home page and okay
15:59 - so i added this method we'll remove it
16:02 - and then i'll just kind of rewrite it so
16:03 - it all makes sense
16:05 - and remove okay so homepage uh the first
16:08 - major change i made is right here so if
16:11 - we go down to around like line 70 again
16:13 - code will be in the description
16:14 - uh before i was rendering the room by
16:16 - just passing component
16:18 - uh and then room right i just i had it
16:20 - looking exactly like this we had room we
16:21 - didn't have all this fancy stuff with
16:23 - render
16:23 - now i already showed you what render
16:25 - does right this will be called when we
16:27 - want to render the component
16:29 - so what i've had to do here is i've had
16:30 - to say render i've made an arrow
16:32 - function that takes in props
16:34 - the props are going to be given by the
16:36 - route or by the root whatever you say
16:38 - that
16:39 - and then what we're going to do is
16:40 - return a room that is given
16:43 - all of these props and is also given a
16:45 - call back
16:46 - now i'll discuss what a callback is but
16:48 - this is essentially a way
16:50 - that the child component can actually
16:52 - modify or
16:53 - yeah i guess modify or affect its parent
16:56 - component
16:57 - so first of all these three dots here
16:58 - what this is called is the spread
17:00 - operator
17:01 - this will just take all of the
17:02 - properties that are passed in as an
17:04 - object
17:04 - and kind of spread them out and just
17:07 - write them in
17:08 - as like you know prop 1 equals prop 1
17:11 - value
17:11 - prop 2 equals prop 2 value that's kind
17:13 - of what that's doing i'm not going to
17:14 - explain that much more
17:16 - but then i'm adding my own prop here i'm
17:19 - saying leave room callback
17:20 - is equal to and then this dot clear room
17:23 - code which is a method that i defined
17:25 - now the way that this works is i'm
17:27 - actually passing a method
17:29 - to my room object here to my room
17:31 - component
17:32 - so then my room component can call that
17:34 - method and it will modify the parent
17:36 - component because the issue that was
17:38 - occurring
17:38 - was that we weren't actually changing
17:41 - the room code in our parent so we
17:43 - weren't changing room code in the home
17:44 - page
17:45 - and what that meant is when we
17:46 - redirected back to the home page
17:48 - when we went into our render method we
17:50 - would see oh we do have a room code even
17:52 - though that room was just deleted
17:54 - and we would redirect to that room so we
17:56 - need to make sure that this room code
17:58 - gets cleared whenever we leave a room
18:00 - so what we're going to do and that's
18:02 - exactly what i just had here is we're
18:04 - going to write a method i'm just going
18:05 - to call this
18:06 - leave room or actually sorry let's call
18:09 - this clear room code
18:11 - okay and all this will do is set the
18:14 - state so that our room code is
18:15 - no or it's empty so we'll say this dot
18:18 - set state and then inside of here
18:21 - we'll say room code is equal to no so
18:23 - this will just reset our state to make
18:25 - sure that we don't have a room code here
18:27 - and we especially don't have a room code
18:29 - here that is no that no longer exists
18:30 - right that was potentially deleted
18:32 - so room called room code no all right so
18:35 - that's good
18:36 - now we have that now all we need to do
18:37 - is bind that so let's go up here
18:40 - and let's say this dot clear
18:44 - room code is equal to this dot clear
18:47 - room code
18:47 - dot bind and we bind it to this keyword
18:50 - all right so now we go back down here we
18:52 - can see our callback is set that's fine
18:54 - we're passing the method notice that i'm
18:56 - not passing two parentheses with it
18:58 - if i did that it would call the method i
19:00 - don't want to call it i just want to
19:01 - pass it so it can be called
19:03 - later on so that's good so now we go to
19:05 - room
19:06 - and now room has a prop on it or we will
19:09 - have a prop
19:09 - passed in here called leave room
19:11 - callback so now we can
19:13 - call that callback method whenever we
19:16 - leave the room and that way it will
19:18 - modify the home page so that it doesn't
19:20 - store the invalid room code so hopefully
19:23 - this is all making sense i know this is
19:24 - a lot
19:24 - especially for like a fix i should have
19:26 - done this beforehand but you know we run
19:28 - into issues and i think it's important
19:29 - to understand
19:30 - how you can solve them so anyways now
19:32 - we're going to go into get room
19:33 - details and what i'm going to do is make
19:36 - sure
19:36 - that when we get a response we actually
19:38 - get a valid response because what was
19:40 - happening
19:41 - here was we could get a response that
19:44 - was like a 404 right saying hey you know
19:46 - this room doesn't exist
19:47 - and then we would try to render this
19:49 - room even though it didn't exist
19:50 - and well there would be no value for
19:52 - room or sorry not room code there would
19:54 - be no value for votes to skip there
19:56 - would be no value for guests can pause
19:58 - there'd be no value for is host and well
20:00 - we would crash because what we're trying
20:01 - to do
20:02 - is say you know data votes to skip well
20:05 - if we don't
20:06 - have any data like if response.json is
20:08 - empty or we just don't have a votes to
20:10 - skip
20:11 - property then this is going to be
20:13 - undefined so when we try to say
20:15 - undefined.tostring or we just
20:17 - try to show that it crashes our program
20:19 - so what we need to do is make sure that
20:20 - our response
20:21 - actually is okay before we go ahead and
20:23 - do the rest of this
20:24 - and if the response isn't okay then we
20:26 - should redirect the user back to the
20:28 - home page
20:29 - because this room doesn't exist uh so
20:32 - that's pretty much what we're going to
20:33 - do here
20:34 - so we're going to say response we're
20:36 - just going to modify this a bit we're
20:38 - going to put an if statement
20:39 - we're going to say if not response dot
20:42 - ok then what we'll do inside of here is
20:45 - we will pretty much leave this room so
20:48 - we're going to say this
20:49 - dot props dot leave room call back
20:53 - we're going to call that so it clears
20:54 - the state on the home page and we're
20:56 - going to say
20:57 - why does it keep giving me that this dot
20:59 - props dot history
21:01 - dot push and we're going to redirect
21:03 - back to the home page
21:04 - so this way if we're in a room that
21:06 - doesn't exist
21:08 - we just call that callback go back to
21:10 - the home page all is good
21:11 - now if that's not the case we can return
21:14 - response.json like
21:16 - that then this dot then will get called
21:18 - and all will be good
21:19 - uh yeah this will just redirect us so
21:22 - that should be
21:23 - good all right so let's save that i'm
21:25 - also just going to copy these two lines
21:26 - because i'm going to use them here in a
21:28 - second
21:28 - and i'm now going to go to api leave
21:32 - room now notice you probably saw i
21:33 - already did this inside of here we only
21:36 - had this.props.history.push before
21:39 - what i want to do before i push back to
21:41 - that page is i want to call this
21:42 - callback
21:43 - so just add this line in here right
21:45 - above make sure it's above the
21:47 - props.history.push
21:48 - and then we should actually be good and
21:50 - we should have solved our problem
21:52 - so hopefully that's clear again code in
21:54 - the description in case it's not
21:55 - but let's just give this a test and make
21:56 - sure everything's working so i'm going
21:58 - to refresh here
21:59 - i'm going to refresh here you can see
22:00 - we're inside of this room so let's open
22:02 - the inspect on both of them
22:03 - if i leave boom brings me back to the
22:05 - homepage here i'm going to refresh
22:07 - i refresh brings me back to the home
22:09 - page that's what we wanted it's exactly
22:12 - what we wanted to see
22:13 - so now we are good and well that's going
22:15 - to conclude this video
22:17 - so i apologize for the mistake there
22:18 - guys but you know this does happen and
22:20 - we need to learn how to debug
22:21 - so anyways i hope you guys enjoyed if
22:23 - you did make sure to leave a like
22:24 - subscribe and of course i will see you
22:26 - in the next
22:27 - youtube video