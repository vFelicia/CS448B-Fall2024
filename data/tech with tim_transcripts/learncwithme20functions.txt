00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial for beginners
00:04 - in this video i'm going to be covering
00:06 - functions now functions are extremely
00:08 - important
00:09 - they're the first time we're really
00:10 - going to see now why we had to learn a
00:12 - ton of the stuff
00:13 - that we did well anyways let's dive into
00:15 - the video and discuss
00:16 - functions
00:19 - [Music]
00:25 - so you may remember that at the very
00:27 - beginning of this series i mentioned
00:28 - that this right here
00:29 - int main is a function and i said this
00:31 - is a special function works a little bit
00:33 - differently than other functions that
00:35 - we're going to see
00:36 - but this is indeed a function and now
00:38 - i'm going to show you how we can make
00:39 - our own functions
00:40 - but first let's quickly describe kind of
00:41 - what a function is and what the point of
00:43 - it is
00:44 - so a function is really just a block of
00:45 - code and this is something that is
00:47 - reusable
00:48 - and functions can take in what's known
00:50 - as parameters or arguments
00:51 - so you can pass some information to a
00:53 - function it can do
00:54 - something with that and it can return to
00:56 - you a value
00:58 - however a function does not need to just
00:59 - take information and return stuff
01:01 - it can also just do something on its own
01:03 - for example you may have a function that
01:05 - closes the program you may have a
01:07 - function that asks the user for some
01:09 - input
01:09 - a function does not always need to say
01:12 - take information and return something
01:14 - it can also just do something on its own
01:16 - however a lot of the functions that
01:17 - we're going to see and that are used
01:19 - take in some information and return to
01:21 - us some other information they do some
01:23 - kind of operation with the information
01:25 - past them
01:26 - and then they return to us now a really
01:28 - kind of naive simple example is a
01:29 - function that maybe adds two numbers
01:31 - you pass in the number x y it then adds
01:34 - x and y and returns to the addition of
01:35 - those two numbers
01:36 - now this is not an extremely useful
01:38 - function but that's an example of
01:39 - something a function may do
01:41 - and the point of functions is to make a
01:43 - reusable block of code
01:45 - that does something specific it does one
01:47 - thing very well
01:48 - that again can be used in different
01:50 - parts of the program so let's say you
01:51 - have a very complicated physics equation
01:53 - well you probably don't want to write
01:55 - that out
01:56 - a hundred times every single time you
01:57 - need to perform or evaluate that
01:59 - expression
02:00 - and so what you would do is write a
02:01 - function that can take in all the inputs
02:04 - to that expression or to that equation
02:05 - and then what it can do is solve that
02:07 - for you and return to you the answer
02:09 - and so that is kind of the idea of the
02:10 - functions they separate pieces of logic
02:12 - in our code
02:13 - and they allow us to have reusable
02:15 - blocks of code and so i'm just going to
02:17 - start by creating a function and showing
02:18 - you kind of how they work
02:20 - so i'm going to say int now whenever you
02:22 - define a function the first thing you
02:23 - must do
02:24 - is define the return type of this
02:26 - function so if your function is going to
02:28 - return a value to the caller of this
02:31 - function so i'll make sense in a moment
02:33 - you must define what type that value
02:35 - will be so in this case i'm making a
02:37 - very simple function
02:38 - i'm going to say int this means this
02:40 - function will return
02:41 - an integer value from it and then i'm
02:44 - going to say add
02:45 - and what this function is going to take
02:47 - is two values it's going to take an int
02:49 - which
02:50 - is known as x and it's going to take an
02:51 - int which is known as y so we're using
02:53 - this kind of naive example i described
02:55 - so what i've done is i've declared my
02:56 - function it returns an
02:58 - int it takes in two integers these
03:01 - things here are what is known as the
03:02 - parameters of a function
03:04 - these are the things that must be passed
03:06 - to the function for it to run
03:08 - and then i do my curly braces and now i
03:10 - start the body of the function so what's
03:12 - inside of these curly braces is known as
03:14 - the body of the function
03:15 - and this is where i can do whatever i
03:17 - want and then at the end i can return a
03:19 - value
03:19 - if my function needs to return a value
03:22 - and that value must be the type
03:23 - stated that it will return so in this
03:26 - case i'm going to say return
03:27 - x plus y what this means is that this
03:30 - function will take x value
03:31 - take a y value it will add these two
03:33 - values together and it will return it to
03:35 - whatever column
03:36 - so now if i go in my main function and i
03:38 - say int
03:39 - result equals add 2 3
03:43 - and then i say c out and i see out my
03:45 - result
03:46 - and we'll just do an endel here in case
03:48 - we do some other stuff after
03:50 - so oops and l and yeah and then we just
03:54 - run this you're going to see that we get
03:56 - 5. so i know i went kind of fast here
03:57 - i'll kind of go through all of this
03:59 - so this is what's known as a function
04:01 - call and the way you call a function is
04:03 - you put the name of the function
04:04 - you put an open parenthesis you put a
04:06 - close closing parenthesis sorry and then
04:08 - inside of the parentheses
04:09 - you put the arguments to the function so
04:12 - this is what is known as the arguments
04:14 - so this argument here is two and it
04:17 - corresponds with the parameter
04:19 - x this argument is three it corresponds
04:21 - with the parameter y
04:23 - so i passed in x which is two i passed
04:26 - in y
04:26 - which was three i added these two values
04:29 - together
04:29 - and then what happened is when i called
04:31 - this function it executed all of this
04:34 - code
04:34 - it waited until the return statement and
04:37 - then it returned some value
04:38 - so the value that was returned kind of
04:41 - replaces
04:42 - the call to this function you can
04:43 - imagine that what kind of happens is we
04:44 - go through our program
04:45 - we read the fact that add exists we read
04:48 - the fact that main exists
04:49 - we run the main function we create this
04:51 - variable result we say it's equal to add
04:54 - 2 3
04:55 - that means we then go to add we pass in
04:56 - 2 for x we pass in 3 for y
04:59 - we add these values which is 5. we
05:01 - return it we come here and we say well
05:03 - you called this function it returned a
05:05 - value so now this is equal to 5
05:07 - result is equal to the return value of
05:08 - that function and then we printed out
05:11 - 5. so hopefully that gave you kind of
05:13 - the run through of how a function
05:14 - operates
05:15 - this is the most basic example i can
05:17 - give you as a function now of course
05:19 - functions do not need to take in values
05:21 - i can have a function here it says int
05:23 - say get number and actually we could do
05:25 - yeah we'll just get get number that's
05:27 - fine
05:27 - and then what this can do is just return
05:30 - some number six
05:31 - and now what i can do is say result is
05:33 - equal to get number
05:35 - i do need to call this function still
05:37 - even though it doesn't take in any
05:39 - values
05:39 - when i add these parentheses what this
05:41 - is saying is call this function
05:43 - tell this function to run and now if i
05:45 - look at my result
05:47 - i get 6. i didn't need to pass any
05:48 - values but i still could return a value
05:51 - in this case i returned
05:52 - 6. now let's see what happens if i
05:54 - decide to return 5
05:55 - after i return 6. well what happens is
05:58 - nothing this 5 does nothing as soon as a
06:01 - return
06:02 - statement is hit in a function that
06:04 - function is immediately done
06:05 - it executes it finishes and it goes back
06:08 - to whatever cult
06:09 - now the great thing about functions so
06:10 - is that we can use them many many times
06:13 - and so that is why you would create a
06:14 - function so what i'm going to do now is
06:16 - see out not result
06:18 - but i'm going to see out and get number
06:20 - right i'm just reusing this function
06:22 - and then i'm going to see out get number
06:24 - a bunch of times and now you're going to
06:26 - see that this works we just keep
06:28 - reusing this function multiple times now
06:31 - get number is not the best example
06:33 - of why we would reuse a function but add
06:35 - kind of gives us a decent example let's
06:36 - say add you know 2
06:37 - 5 and then i copy this
06:40 - and i print it a few times and i change
06:43 - you know four to seven
06:45 - now i can go to six then go to 9 this
06:47 - can be negative 2 this can be
06:49 - negative 8. okay let's get rid of that
06:52 - and let's run this
06:53 - now we get all of our results right we
06:54 - can reuse the function many times now of
06:56 - course in these kind of simple naive
06:58 - examples it's like well why would we do
07:00 - that why wouldn't we just add these
07:01 - values
07:02 - well because you can have functions to
07:03 - do things much more advanced than what
07:04 - i'm showing you here
07:06 - okay so that is kind of the simple
07:07 - explanation of functions now
07:09 - you can have a function that doesn't
07:11 - return something and this is the next
07:13 - example that i will show you
07:14 - so in this case both of these functions
07:16 - were turned in it and since i said they
07:18 - were going to return an int
07:20 - they must finish by returning an int no
07:22 - matter what happens in this function
07:24 - they must return an integer they do not
07:26 - return integer we will get an error
07:28 - and i think i can actually probably show
07:29 - this to you if i run this right now and
07:32 - i have int and there's no return
07:33 - statement in here we're going to get an
07:34 - issue it says warning no return
07:36 - statement in function
07:37 - returning non-void so that was a warning
07:40 - not necessarily a
07:41 - actually i think that's an area because
07:43 - it was highlighting in red but
07:44 - regardless it's telling me hey you
07:46 - didn't return an end
07:47 - that's a problem because you said you're
07:48 - going to return it so now if i return
07:50 - 0 and i run this all is good we don't
07:53 - get that warning so just keep that in
07:54 - mind
07:55 - all right i'm going to erase these i'm
07:56 - going to show you now how we make a
07:57 - function that is defined as what's known
07:59 - as void
08:00 - now a void function simply means it does
08:02 - not return a value so i can say
08:04 - void and then i can say like test
08:08 - and then here what i can do in this
08:10 - function is whatever i want and i do not
08:12 - need to return anything so when i say
08:14 - void let's just maybe go through a for
08:16 - loop here
08:17 - we can say 4 and i equals 0 i less than
08:20 - 10
08:21 - i plus plus and then maybe what we do
08:23 - here is we see out
08:25 - and we just see out i then we end l
08:28 - so now i can call this function if i
08:30 - call test
08:32 - we can see oh i need a semicolon sorry
08:33 - let's have the semicolon then we just
08:35 - run this function right we just print
08:37 - zero two nine
08:39 - no problem we don't need a return
08:40 - statement what happens if we add a
08:42 - return statement
08:43 - let's return 0 and see what we get
08:45 - notice that we get an error because it
08:47 - says return statement with a value when
08:48 - this function was defined as void
08:50 - so again this is why it's very important
08:52 - important story that you understand the
08:54 - types of
08:55 - your functions what they return what
08:57 - they're taking it as parameters
08:58 - and all of that all right so let's call
09:00 - test again
09:01 - let's call it another time right so this
09:03 - is another good example of why you would
09:04 - want to reuse a function
09:06 - it's way better to have a function that
09:08 - say prints the numbers from one to ten
09:09 - that i can use multiple times
09:11 - than to print the numbers to one to ten
09:13 - like three times so if i were to take
09:15 - this for loop and just copy and paste it
09:16 - three times like that works it's going
09:18 - to do the same thing as we have
09:19 - right now but now consider the situation
09:22 - where we want to change the number of
09:23 - times that we're looping
09:25 - so let's say we want to now loop a
09:26 - hundred times instead of 10 times
09:28 - well what i would have to do now is
09:30 - change this 10 in three places if i had
09:32 - copy and pasted this for loop three
09:34 - times so if we did
09:36 - like this right i would then need to
09:37 - change the ten and three places
09:39 - as opposed to when we use a function
09:40 - here now i only need to change it in one
09:42 - place
09:43 - that's again another good reason why you
09:44 - would use a function because it keeps
09:46 - your code more organized and if you ever
09:48 - need to change something it's better to
09:50 - change it in one place than in multiple
09:51 - places but anyways if i run this you're
09:53 - going to see that we get kind of the
09:54 - expected output we go
09:56 - 0 to 9 0 to 9 0 to
09:59 - 9. great so that's an example of a
10:01 - function
10:02 - now let's see if we can do something
10:04 - even better with this function maybe
10:06 - void
10:06 - test we'll instead take print
10:09 - maybe we'll call this print n
10:13 - times and we're going to take in an
10:15 - integer n
10:16 - and we're going to take in a string text
10:19 - now what i'm going to say is instead of
10:20 - i is
10:21 - less than 10 i'm going to say i is less
10:23 - than n and i'm going to see out
10:25 - the text n times so now what happens is
10:28 - i can use this function called print
10:30 - n times we're going to pass in the
10:32 - number five
10:33 - we're going to pass in the uh the string
10:35 - tim
10:36 - okay now i will kind of copy this line
10:39 - and we'll use it again
10:41 - so we'll say print seven and then we'll
10:44 - say
10:46 - is great just you know a true statement
10:48 - here and there we go okay so now
10:50 - let's run this and you see that we get
10:53 - tim tim tim tim tim is greatest greatest
10:55 - great so on and so forth
10:57 - so what i've done now is i've made this
10:58 - function a bit more general so now it
11:00 - takes in some number n
11:01 - that's the number of times we'll print
11:02 - something it takes in some string text
11:04 - and it will print this text
11:06 - n times and notice i named my function
11:08 - in a way such that it describes what it
11:10 - does
11:11 - print n times right it's telling me
11:12 - exactly what it does and now anywhere in
11:14 - my program
11:16 - i can use this function now where it
11:18 - gets very interesting
11:19 - is when we create functions that are
11:20 - used inside of other functions
11:22 - so let's say void print and let's make
11:25 - this just take in some string
11:27 - we'll call it text now what i'm going to
11:30 - do is i'm going to say
11:30 - c out text and l
11:34 - and i'm going to replace this line in my
11:36 - for loop now with this function print
11:38 - and this print is just going to take
11:39 - text now notice how
11:42 - my code all of a sudden is a little bit
11:44 - easier to read than it was before
11:46 - if you're someone who you know maybe
11:48 - doesn't know c plus plus
11:49 - now what you can do is you can kind of
11:51 - read these function names and this gives
11:53 - you a better idea of what's going on
11:54 - right
11:55 - if i come to this main function i can
11:57 - see oh i'm printing n
11:58 - times and then i'm passing 5 and i'm
12:01 - passing 10.
12:02 - again it might still be a little
12:03 - confusing but now inside of this for
12:05 - loop i can see oh i'm printing something
12:07 - right
12:07 - because maybe you don't know what c out
12:08 - means but you know what print means
12:10 - and so this is just another great
12:11 - example of kind of how you can use
12:13 - functions
12:14 - to really separate all of the logic in
12:16 - your code
12:17 - and make it so much easier for someone
12:19 - who doesn't know the code that you're
12:20 - writing to understand what's going on
12:22 - so if i run this now again it works the
12:25 - exact same way that it did before but
12:27 - i've just split my logic up into
12:28 - different functions
12:29 - now you don't want to go too crazy with
12:31 - this you don't want like super short
12:33 - functions
12:34 - you want to sometimes have functions
12:35 - that are maybe a bit larger that are
12:36 - doing different things but the general
12:38 - rule of thumb is that your function
12:39 - should do one thing
12:40 - it should do one thing very well now you
12:42 - can define what that one thing is that
12:44 - one thing can be
12:45 - you know one large thing and it maybe
12:47 - can use other functions to help it do
12:48 - that
12:49 - but just keep that in mind that you
12:50 - don't want your function to be doing a
12:52 - ton of different things
12:53 - it should be doing one thing and one
12:55 - thing very well and if you notice you
12:56 - have a really really massive function
12:58 - maybe you can split that up into some
13:00 - smaller sub functions so that your
13:01 - code's a little bit easier and cleaner
13:03 - to read
13:03 - and this stuff that i'm showing you
13:04 - comes with years and years of practice
13:06 - right this isn't something you pick up
13:07 - immediately
13:08 - but i just want to give you the
13:09 - rationale and reasoning behind
13:11 - using functions so we will continue in
13:13 - one second but i need to quickly thank
13:15 - the sponsor of this video and this
13:16 - series which is algo
13:17 - expert algo expert is the best platform
13:19 - to use when preparing for your software
13:21 - engineering coding interviews
13:22 - they have mock interviews a data
13:24 - structures crash course and over 150
13:26 - super high quality coding interview
13:27 - questions
13:28 - check them out from the link in the
13:29 - description and use the discount code
13:31 - tech with tim for a discount on the
13:33 - platform
13:34 - so now there's some more things that we
13:35 - can do with functions functions can get
13:37 - pretty complicated and pretty advanced
13:39 - what i'm going to do now is i'm going to
13:40 - show you what's known as default
13:42 - parameters i'm then going to go over
13:43 - pass by reference versus pass by value
13:46 - so i'm going to make a function i'm
13:47 - going to say int i'm going to say
13:49 - math i'm going to say do math okay this
13:51 - is going to take in one value i'm going
13:53 - to say
13:54 - int x and then i'm going to take an into
13:55 - y i'm going to take an
13:57 - int z but i want this last value z to be
14:00 - optional
14:01 - now what that means by optional is that
14:02 - i want it to be able to be passed in but
14:05 - it doesn't have to be past it
14:06 - so if i want that to be the case i can
14:08 - give a default
14:10 - value for this parameter and what that
14:12 - will do is make this now an
14:14 - optional parameter that does not need to
14:16 - be passed to this function
14:18 - so to actually to clarify this let me do
14:20 - something else
14:21 - i'm just going to return x plus y
14:24 - times z and i'm going to do the x plus y
14:26 - and then multiply that by z
14:28 - so what you're going to see now is that
14:30 - if i try to call this function and i
14:31 - don't give any of these parameters
14:33 - we're going to have an issue so if i say
14:34 - do math and i give 3 and 4
14:37 - so i give an argument for x an argument
14:39 - for y but i don't give an argument for z
14:42 - you're going to see that we get an error
14:43 - it says expected oh sorry
14:45 - that needs a semicolon uh but not
14:48 - note declared here uh what's our problem
14:51 - now
14:52 - okay declared here in to do math return
14:56 - okay so i think oh here it is too few
14:58 - arguments to function it
14:59 - this is the error i was looking for so
15:01 - it's saying hey you don't have enough
15:02 - arguments this function except
15:04 - takes three and you only pass two so i
15:07 - can fix that now by adding another one
15:08 - here
15:09 - right and there we go all is good
15:10 - everything is working but that's kind of
15:12 - the point right is that
15:13 - you need to pass in all of the
15:14 - parameters but sometimes you have a
15:16 - parameter that you want them to be able
15:18 - to pass in
15:19 - but they don't have to pass it so in
15:21 - that situation
15:22 - you make it optional by adding a default
15:25 - value for it
15:26 - so now when i say in z is equal to 1
15:28 - this means if you do not give me z
15:30 - i'm going to assume that it is 1. and
15:32 - this is the default value for the
15:33 - parameter z and so now if i run this
15:36 - you see that this still works because we
15:37 - implemented that default value and let's
15:39 - see out this just so we can see what
15:40 - this is giving us
15:42 - we get the value 7 right and the whole
15:44 - idea i guess behind
15:46 - what i was thinking when i did this was
15:47 - okay i want to add two numbers together
15:49 - and then i want the option to multiply
15:51 - them by some factor
15:53 - and in this case if you don't give a
15:54 - value it's just going to keep it the
15:56 - same
15:56 - because it's multiplying it by 1.
15:58 - whereas if i do pass a value maybe i
16:00 - pass
16:00 - 2 obviously now it uses that value 2
16:02 - because it's overriding the default and
16:04 - now it's giving me 14.
16:06 - so that is what is known as an optional
16:08 - parameter and again
16:09 - these are parameters these are arguments
16:12 - your parameters can be different types
16:14 - as you saw you can have as many
16:15 - parameters as you want
16:16 - you can have a combination of optional
16:18 - and required parameters
16:20 - you can have no parameters just depends
16:22 - on the type of function that you're
16:23 - creating
16:24 - and so there you go and then of course
16:25 - the return type can be any type that you
16:26 - would like
16:27 - you can make this return type something
16:28 - crazy right you can make this return
16:29 - type a pair
16:30 - you can say pair ins int and then what
16:34 - you could do is actually make a pair so
16:35 - let's
16:36 - do this let's say function make
16:39 - pair there is actually a function called
16:41 - make underscore pair in c
16:42 - plus so i'm kind of making a pseudo
16:44 - version of this and let's take in two
16:45 - values into x and y
16:47 - and now what i can do is i can return
16:49 - pair
16:51 - int int of x
16:54 - y and now if i c out let's go
16:59 - make pair 2 3
17:02 - dot first we should see that we get the
17:05 - value 2 right because that's the first
17:06 - value in our pair
17:07 - and if we were to do second then we get
17:10 - second so
17:11 - functions are very very flexible you can
17:12 - do a lot of stuff with them and again
17:14 - this comes with practice
17:15 - but the data type does not need to be
17:17 - something simple like you can do a
17:18 - vector you can do an array you can do a
17:20 - pair you can do
17:21 - really anything that you want so long as
17:23 - you define what it is and you actually
17:24 - return something like that and of course
17:26 - our function does not need to just be
17:27 - one line i can do all kinds of different
17:29 - lines right i can say
17:30 - you know if x is greater than y
17:34 - then maybe i make a pair where i have
17:37 - let's do this here x and then y
17:41 - but otherwise then what i do is i return
17:44 - a pair that has
17:46 - y and then x that's totally valid and
17:49 - just to note here i don't actually need
17:51 - this else statement
17:52 - i can just do this because what happens
17:54 - is that if i hit
17:56 - this first return statement i
17:58 - immediately exit my program
18:00 - so if x is greater than y i return this
18:02 - and that means i'm done
18:03 - i'm finished the program i won't read
18:05 - this line however if x is not greater
18:07 - than y i don't go in here so i don't
18:09 - return so then i just return this
18:11 - so this is a very common practice you'll
18:12 - see when people are writing functions is
18:14 - that they'll kind of omit and else in a
18:15 - lot of situations
18:17 - because they know if you get into the if
18:19 - statement the function will
18:20 - kind of terminate and be done as soon as
18:22 - you get to the return statement in the
18:24 - if statement
18:24 - and so it's kind of unnecessary to write
18:26 - the else afterwards
18:28 - because well you just don't need to
18:29 - handle that logic essentially
18:31 - so hopefully that kind of makes sense
18:32 - but you can have multiple return
18:34 - statements that's what i'm trying to
18:35 - show you here in the function and
18:36 - whatever one you hit first well you're
18:37 - just
18:38 - going to return that and then you're
18:39 - going to be done the function okay so
18:41 - now i'm going to talk about pass by
18:43 - value versus pass by reference now to do
18:46 - this
18:46 - let's make a simple function let's call
18:48 - this um
18:51 - actually it's not going to be instantly
18:52 - void we're going to say void swap
18:54 - we're going to take into x and into y
18:57 - okay what i'm going to do is just say x
18:59 - equals y
19:00 - and y equals x okay that's what this
19:01 - function is going to do and then in the
19:02 - main function i'll say into x
19:04 - equals 2 and y equals 4.
19:08 - and these don't have to match like let's
19:09 - actually make this a b
19:11 - and then i can call swap a b
19:15 - i'm going to c out a and l
19:18 - i'm going to c out b and
19:21 - l and then actually before i do that
19:24 - we're going to see out a and b
19:26 - and then right before i swap i'm going
19:28 - to say c out
19:31 - swapping
19:34 - okay so i just wrote a lot of code there
19:35 - but essentially what i'm doing is i'm
19:36 - printing out a and b before i swap
19:38 - i'm saying okay i'm going to swap it now
19:39 - and then i'm printing out a and b so if
19:41 - you're looking at this right you can see
19:42 - that i have variable a
19:44 - i have variable b when i call this swap
19:46 - function i pass
19:47 - a and what that means is that x becomes
19:50 - whatever the value of a is which in this
19:52 - case is 2.
19:53 - so you can kind of imagine that when i
19:54 - call swap x is equal to 2
19:56 - and then y is equal to whatever b is
19:58 - which is 4. so then what i do is i say x
20:00 - equals y
20:01 - and so what this is going to give me is
20:04 - x
20:04 - becomes equal to 4 and then i say y is
20:07 - equal to x
20:08 - well now x has changed right and x is
20:11 - equal to 4. so when i say y is equal to
20:12 - x
20:13 - well y is going to be equal to 4 as well
20:15 - and so obviously that's not exactly what
20:17 - we want i need to kind of fix this i'm
20:19 - going to make a variable called temp
20:21 - i'm going to say int temp equals and
20:24 - then this will be
20:26 - x and then what i'm going to do is say y
20:28 - is equal to 10.
20:30 - so the idea behind this is that i'm
20:31 - going to store the value of x in a
20:33 - temporary variable
20:34 - i am then going to assign x to be equal
20:35 - to y because now i've lost whatever x is
20:38 - equal to right if i don't have a temp
20:39 - variable
20:39 - and then i assign y to be equal to temp
20:42 - because now
20:43 - that will be whatever the original value
20:44 - of x was so that would mean y will now
20:46 - change to equal to 2.
20:48 - anyways the whole point of me showing
20:49 - you this is that i'm swapping two
20:50 - variables right
20:51 - i'm swapping their values so the
20:52 - question i have for you is is it going
20:54 - to swap the value of a and b
20:55 - here yes x and y will actually swap here
20:58 - but will it change the value of a and b
21:00 - here
21:00 - now if you remember my pointers and
21:02 - references you should know the answer to
21:03 - this but let's run this and see
21:05 - oops we get a problem because i always
21:07 - forget the damn semicolon okay let's
21:09 - rerun this
21:10 - and notice we get 2 4 swapping 2 4. so
21:13 - the swap did not change the value of a
21:15 - and b
21:16 - now the reason why that happens is that
21:18 - when you pass
21:19 - something like an int data type actually
21:22 - what's known as a primitive data type
21:23 - i'm not really going to completely
21:24 - discuss that but it's what's known as a
21:26 - primitive data type
21:27 - to a function oh sorry this said x equal
21:30 - to y equal four
21:31 - let's remove that that wouldn't change
21:33 - the output by the way but regardless
21:35 - um when you pass a prime of data type to
21:37 - a function as a
21:39 - argument argument meaning like a b like
21:41 - these are the arguments
21:43 - what actually happens is x becomes equal
21:46 - to so the parameter in this function
21:48 - a copy of the argument so kind of what
21:51 - happens here is when i call
21:53 - swap of a b right a is equal to
21:57 - two and b is equal to four
22:00 - when we actually get to swap x will be
22:02 - assigned to
22:03 - a copy of a so a copy of two
22:06 - and y will be assigned to a copy of b
22:10 - so a copy of four so what that means is
22:12 - that the two
22:13 - and the four that i'm swapping here are
22:15 - not the same
22:16 - as the two and the four that are defined
22:18 - here the reason for that again is it's
22:20 - making a copy
22:21 - just like i showed you previously with
22:22 - references when you assign like
22:24 - int a equals b it makes a copy of b it's
22:26 - not actually equal to b
22:29 - however if you do want to actually be
22:31 - able to modify these values
22:33 - what you have to do is pass the
22:35 - reference to these values
22:37 - not uh what do you call it the actual
22:40 - value itself
22:41 - and so what i would do here is i would
22:42 - say ampersand x
22:44 - and ampersand y and now what this is
22:46 - saying is okay
22:47 - i actually want the reference of x and
22:50 - the
22:50 - reference of y so give me a reference to
22:52 - an end and a reference to another end
22:54 - so that way i can actually modify these
22:57 - hits
22:58 - okay sorry for the cut there something
22:59 - was going wrong with my recording
23:00 - software
23:01 - regardless now if we do this swap okay
23:03 - so now if i call swap a
23:04 - and swap b what's going to happen is
23:07 - it's going to get the reference of a
23:09 - and the reference would be i actually
23:10 - don't need to change this function call
23:12 - here i'll show you why in a second but i
23:13 - don't need to change this at all
23:15 - and now when i run this notice that we
23:16 - get 2 4
23:18 - and then 4 2. we actually did change the
23:22 - value of a
23:23 - and b in this main function from this
23:26 - function here
23:27 - and again just to refresh you if i
23:28 - remove this ampersand so i remove the
23:30 - reference what happens is i get 2 4 and
23:34 - 2
23:34 - 4. and again the reason for that is that
23:36 - when i add these ampersands
23:37 - this is kind of equivalent of me writing
23:39 - int ampersand
23:42 - x is equal to and then a which means
23:45 - make a reference of a or a reference 2a
23:48 - not copy a's value into the uh the
23:52 - variable x so hopefully that makes sense
23:54 - but that is kind of what we just did we
23:56 - passed the reference two values
23:58 - and now these values can be modified uh
24:01 - like their original value
24:02 - inside of this function so that's very
24:04 - common you'll see a lot of functions
24:05 - where you pass references
24:07 - and again the only situation where you
24:08 - want to pass the reference is where you
24:09 - actually want to modify
24:11 - this value that was passed in you don't
24:13 - just want to make a copy of it
24:15 - so hopefully this example cleared up
24:17 - passed by reference
24:18 - now you also can pass pointers right
24:20 - like i can take a pointer here so if i
24:21 - say int ask
24:22 - asterisk x and into asterisk y
24:25 - now though what i need to do is i need
24:27 - to change this to be ampersand x
24:30 - and ampersand b or sorry ampersand a and
24:33 - ampersand b
24:34 - uh the reason for that now is that this
24:36 - is saying i want a pointer so if you
24:37 - want a pointer you need to actually pass
24:39 - a pointer so you need to pass ampersand
24:41 - so if i run this now we do end up
24:43 - getting a problem
24:44 - but it wasn't with our call so i'll
24:46 - discuss why we have a problem
24:48 - the reason we have a problem is that
24:49 - we've taken in two pointers and then
24:51 - we've tried to kind of reassign pointer
24:52 - values but we haven't dereferenced them
24:55 - so what i can do now is say int temp is
24:58 - equal to
24:58 - asterisk x and then i can say x is equal
25:01 - to
25:02 - i can actually say sorry asterisk x is
25:04 - equal to
25:05 - asterisk y and then i can say asterisk y
25:08 - is equal to temp
25:09 - and hopefully this should fix it let's
25:11 - see now
25:12 - we can see that now we get the correct
25:14 - values because i've de-referenced all of
25:16 - these pointers and we did still perform
25:18 - the swap
25:18 - this time using pointers instead of
25:20 - using references so you can kind of do
25:22 - it in any way that you like
25:23 - references make a lot more sense in
25:25 - functions but if you do want to pass a
25:27 - pointer you can't do that
25:28 - so i think i'm going to leave it here
25:30 - there is a ton to go through in this
25:32 - as soon as you get into the world of
25:33 - functions and then object oriented
25:35 - programming
25:35 - there's just a lot more to learn a lot
25:37 - more that you can do
25:38 - and this may be the last video in the
25:40 - series i will warn you unless you guys
25:42 - have some specific stuff that you want
25:43 - to see so if you have more videos in
25:45 - this series that you want to see
25:46 - maybe you want some more examples of
25:47 - functions maybe you want some different
25:49 - data types or
25:50 - object oriented programming which i
25:51 - wasn't planning on covering then do let
25:53 - me know and i will definitely consider
25:54 - it
25:54 - with that said i hope you guys enjoyed
25:56 - this series please do leave your
25:57 - thoughts on it in the comments
25:59 - if you do appreciate this make sure to
26:00 - leave a like of course subscribe to the
26:02 - channel
26:02 - i will see you in another youtube video
26:12 - you