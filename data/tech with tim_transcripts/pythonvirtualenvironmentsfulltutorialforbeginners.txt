00:00 - what is a virtual environment well this
00:02 - is simply a self-contained location that
00:04 - enables you to maintain separate and
00:06 - isolated environments for your python
00:08 - projects this isolation lets you manage
00:10 - dependencies versions and packages
00:13 - without conflicts across different
00:15 - projects when you work on multiple
00:17 - python projects it's likely that some of
00:19 - them depend on different versions of
00:20 - external libraries or even python itself
00:23 - without virtual environments if you were
00:25 - to install every dependency globally you
00:27 - might run into issues where one project
00:29 - needs a different version of a library
00:30 - than another project this can lead to
00:33 - compatibility issues virtual
00:34 - environments solve this issue by
00:36 - allowing each project to have its own
00:38 - set of installed packages independent of
00:40 - what's installed globally or in other
00:42 - environments so now let's look at how
00:44 - you create virtual environments so to
00:47 - begin we need to open up a terminal or a
00:49 - command prompt if you're on Mac or Linux
00:51 - open up your terminal if you're on
00:52 - windows open up command prompt or a
00:54 - Powershell instance from here we're
00:56 - going to navigate into the directory
00:58 - where we want to create a new version
00:59 - virtual environment it's worth noting
01:01 - that virtual environments are simply
01:03 - directories on your system so you want
01:05 - to put them in a place that's logical
01:07 - like the location of a python project
01:09 - that requires this environment in my
01:11 - case you can see that I am in the
01:12 - example directory which is on my desktop
01:15 - so simply go to a directory where you
01:16 - want to create your virtual environment
01:18 - from here we're going to create a new
01:20 - environment using the built-in venv
01:22 - command or V EnV now it's worth noting
01:25 - that there are other tools that can do
01:26 - this like cond virtual EnV pip en V and
01:30 - poetry but VV is built into Python and
01:33 - it's the most common one now the
01:35 - commands for creating and activating the
01:37 - virtual environment are slightly
01:38 - different for Mac or Windows but I'll
01:40 - run through both sets so if you're on
01:42 - Windows you're going to use this command
01:44 - which is python hyphen M venv and then
01:47 - EnV now the EnV part here at the end is
01:49 - the name of the environment you can name
01:51 - this anything that you like but it's
01:53 - convention to name it EnV now if you're
01:56 - on Mac or Linux you'll simply change the
01:57 - command to be Python 3 so my case I'm on
02:00 - Mac so I'm going to run python 3-m VV
02:03 - EnV now at this point it will create a
02:06 - new directory for us so if we type LS
02:08 - you'll see that we have the environment
02:09 - EnV in this directory now what we need
02:12 - to do is activate the virtual
02:14 - environment and to do that again the
02:15 - command will be slightly different
02:17 - depending if you're on Mac or Windows if
02:19 - you're on Windows you're going to run
02:20 - the following command now the command is
02:22 - this the name of your environment which
02:24 - in this case is EnV SL scripts activate.
02:28 - bat now for some reason that doesn't
02:30 - work you can try just SL activate so
02:32 - remove that bat extension now if you are
02:35 - on Mac or Linux the command is a little
02:37 - bit different this is going to be Source
02:39 - EnV SL bin and then slash activate like
02:44 - that and once you've activated the
02:46 - environment you should see that you get
02:47 - a prefix with the name of the
02:49 - environment appearing before the normal
02:51 - line in your terminal so whether you're
02:53 - on Mac windows or Linux you'll know this
02:54 - is working once you see the
02:56 - parenthesized version of your
02:57 - environment name before your main
02:59 - terminal line now that we're here I'll
03:01 - show you how we deactivate the
03:03 - environment so to go back into our
03:04 - Global python installation to do that
03:06 - you simply type deactivate the command
03:08 - will be the same whether you're on Mac
03:10 - windows or Linux then we can reactivate
03:12 - by using the source command again or
03:14 - that activate script that I showed you
03:16 - on windows so now that the environment
03:18 - is created and activated we can go ahead
03:20 - and install some packages into it now to
03:22 - do this we're going to use the PIP
03:24 - command which stands for the preferred
03:25 - installer program or the recursive
03:27 - acronym which is PIP installs packages
03:30 - now if we want to view the packages that
03:31 - are in the current environment we can
03:33 - start by typing pip list now it will
03:35 - show us that we can actually upgrade pip
03:37 - if we like to we don't need to do that
03:39 - right now but we can see that we just
03:40 - have two packages pip and setup tools
03:43 - the reason we don't see any other ones
03:44 - is because we're in the virtual
03:45 - environment now not in our Global
03:47 - version of python if we were to
03:49 - deactivate this and run the command
03:50 - again we'd see any packages in our
03:52 - global environment but here we're in the
03:54 - virtual one now that we've done that we
03:56 - can install a package so one some of us
03:58 - have probably used before is the request
04:01 - package so let's go pip install request
04:04 - when we do that it should install
04:05 - everything and if we type pip list
04:07 - you'll see now that we get all of the
04:09 - dependencies for requests as well as the
04:10 - request package itself you'll notice now
04:13 - if I deactivate the environment and I
04:15 - type pip list it's actually needs to be
04:17 - pip 3 here I'll get a huge long list of
04:19 - a bunch of other packages that are
04:21 - installed globally whereas if I go back
04:23 - into the environment here and I type pip
04:26 - list we just see the ones that are part
04:27 - of this environment so now this point
04:30 - let's imagine we've done some intense
04:31 - python development and we're ready to
04:33 - push this to GitHub or share our project
04:35 - with someone else now in order for them
04:37 - to run this code they'll likely need the
04:38 - same requirements as us now rather than
04:41 - exporting our entire environment we can
04:43 - simply save a list of all of the
04:44 - dependencies we used into a
04:46 - requirements.txt file now to do that
04:49 - we're going to use the following command
04:51 - which is PIP freeze we're then going to
04:53 - use the greater than sign and then we're
04:55 - going to type
04:57 - requirements.txt if I spell that
04:59 - correctly and what this will do is take
05:01 - the output of pip freeze which gives us
05:03 - all of the different packages and their
05:04 - version and save it in this file so when
05:07 - I do that and I type LS you'll see that
05:09 - now we get a requirements.txt file and
05:12 - if we have a look at requirements.txt it
05:14 - has the output of pip list that we
05:16 - looked at before now let's get out of
05:18 - this here and let's see how we could use
05:21 - the requirements.txt file to actually
05:23 - install these various packages so let's
05:25 - imagine we're someone else we've now got
05:27 - access to this code we want to start
05:29 - working in it and we have
05:30 - requirements.txt file well first we'll
05:33 - make sure that we're out of this
05:34 - environment and we'll probably end up
05:35 - creating a new one so we'll start again
05:37 - and we'll type the commands so in this
05:39 - case Python 3 hyphen M venv we'll just
05:41 - call this mycore EnV we'll create a new
05:45 - environment we will then activate it so
05:47 - this will be source and then my EnV /bin
05:51 - SL activate again on Windows this going
05:53 - to be a different command for Activation
05:55 - now we're inside of this environment
05:57 - this is a new environment and you'll
05:58 - notice that now we have EnV my EnV and
06:02 - requirements.txt if I pip list inside of
06:05 - here you'll see that we don't have those
06:07 - requirements so the request module that
06:09 - we need but we can install them using
06:12 - this requirements.txt file to do that we
06:15 - very simply just type pip install dasr
06:19 - and then requirements.txt the DHR stands
06:23 - for install from a file so we specify
06:25 - the file name which is requirements.txt
06:27 - and now what pip will do read this file
06:30 - find all of the requirements and install
06:32 - it in this environment so when I hit
06:35 - enter here it's going to go ahead and
06:36 - install that and now if we type pip list
06:39 - you'll see that we get a list of all of
06:41 - the different packages that were from
06:43 - our requirements.txt file so this is
06:45 - very common practice you'll actually
06:47 - download a python project you'll see a
06:49 - requirements.txt file what's expected
06:52 - from that point forward is you're going
06:53 - to create a new virtual environment
06:55 - you're going to activate it you're then
06:56 - going to install all of the different
06:58 - packages using the requirements.txt file
07:01 - again that command was pip install
07:04 - hyphen R requirements.txt now at this
07:07 - point you've learned how to create an
07:08 - environment activate it install
07:10 - individual packages install packages
07:13 - from a file and save your packages or
07:15 - dependencies into a requirements.txt
07:17 - file you pretty much know everything you
07:19 - need to about virtual environments but
07:21 - I'll share with you a few last helpful
07:23 - tips that you'll probably want to know
07:25 - so first of all it's common practice to
07:27 - create a virtual environment folder
07:29 - inside of the directory where your
07:31 - python files exist so for example maybe
07:34 - I'll make a new directory called project
07:36 - and this is where I'm going to have all
07:37 - of my code so I'll CD into project and
07:40 - maybe I have a python file so I can say
07:42 - maybe just touch
07:45 - main.py now what I would do is create my
07:48 - virtual environment inside of this
07:50 - directory so it's alongside my python
07:52 - files and all of my source code now it's
07:54 - common practice that we call this EnV or
07:57 - VV you can call it whatever you want but
07:59 - but typically this is what it will be
08:00 - named now once we create that and
08:02 - activate the environment we want to make
08:04 - sure we don't save any of our source
08:06 - code inside of that directory so I'm not
08:08 - going to do it right now but let's say
08:10 - that we have this ven V folder right so
08:12 - we have main up high and ven V where our
08:14 - virtual environment is we're not going
08:15 - to put any of our custom python code
08:17 - inside of here it's just going to sit
08:19 - inside of the main directory this folder
08:21 - is only used for storing the things
08:23 - related to our virtual environment
08:25 - that's about it if you're finished with
08:27 - the virtual environment and for some
08:28 - reason you need it anymore you can
08:30 - simply delete this folder and that's all
08:32 - you have to do so if you're on Mac you
08:34 - can type something like rm- RV EnV
08:37 - that's going to delete the directory you
08:39 - also can just simply find it and delete
08:41 - it so right click it move it to trash
08:43 - whatever you want now that's it that's
08:44 - all I have for you if you enjoy my
08:46 - teaching style and you want to become a
08:48 - developer then consider checking out my
08:49 - software development course from the
08:51 - link in the description leave a like on
08:53 - this video subscribe to the channel and
08:55 - I will see you in the next
08:58 - one
09:03 - oh