00:00 - hey guys and welcome back so in today's
00:02 - video what we're gonna be doing is we're
00:04 - gonna be hooking up our graphical client
00:06 - to our server so we can send information
00:08 - back and forth and ideally at the end of
00:11 - this video what we're gonna have is
00:12 - we're gonna have two rectangles on each
00:14 - client so well like two clients running
00:16 - and when you move the rectangle on one
00:18 - client it moves on the other and vice
00:20 - versa okay so you guys will get the idea
00:22 - when we go through but there's a little
00:24 - bit of work we have to do and we're
00:25 - going to be modifying a few things
00:26 - within a lot of the files you've already
00:28 - created so just make sure you guys are
00:29 - paying attention and again if anything
00:31 - is going wrong feel free to download all
00:33 - the code off of Teck with Tim net it'll
00:35 - be available there and it'll be exactly
00:37 - the same code that I'm writing right now
00:39 - okay
00:39 - so first thing we're gonna do is in this
00:42 - network class we're just gonna delete a
00:43 - few things so this testing stuff we
00:45 - don't need anymore
00:46 - this print statement for the self that
00:48 - ID we don't need that and we're actually
00:50 - gonna change this self dot ID to be self
00:53 - thought pause okay and you guys will see
00:55 - why we're doing that in a second and
00:57 - we're gonna add one quick method in here
00:59 - and it would you guys say define get
01:01 - pause okay and all we're gonna do here
01:03 - is just return self thought pause
01:05 - alright and again we'll you'll see why
01:07 - we're doing that but I just don't have
01:09 - to come back to this network class so
01:10 - we'll do that right now okay so I'm from
01:12 - inside our client now what we're gonna
01:14 - do is we're going to import this Network
01:16 - class because we're gonna use it in here
01:17 - so we're gonna say from network import
01:21 - Network and then in our main function
01:26 - down here what we're gonna do is
01:28 - actually above player we're gonna say
01:30 - and equals Network okay like that and
01:34 - then what we're gonna do is we're going
01:36 - to say start pause equals n dot get pots
01:40 - so essentially why I'm doing this is
01:43 - because when we first connect to our
01:46 - server what I want to happen is I want
01:48 - it to return to each of our clients the
01:51 - starting position of their character
01:53 - right or of their cube okay because it's
01:54 - going to depend where they're starting
01:56 - based on if their player 1 or if their
01:58 - player 2 so that on the client side what
02:00 - we're gonna do is when we initially
02:01 - connect to the server which is what
02:03 - we're doing when we create this network
02:04 - object we're connecting to the server
02:06 - we're gonna get that starting position
02:09 - and then for creating our own player
02:10 - we're gonna use that starting position
02:12 - to determine like where we're starting
02:14 - so the position is gonna come in as a
02:16 - topple all right and we'll be coding all
02:18 - this on the server side in a second but
02:19 - it's easier just to go through each file
02:20 - rather than going back and forth it's
02:22 - gonna come through as a table that looks
02:24 - something like this so it'll be like 50
02:25 - 100 okay so what we're gonna do is
02:28 - you're gonna read this tuple in because
02:30 - it's actually gonna comment as a string
02:32 - like we're you'll see how it comes in
02:34 - we're gonna get the two aspects of its
02:36 - like the x value and the y value and
02:37 - then we're gonna use that inside of this
02:39 - player initialization to accept the
02:43 - initial position so that reminds me what
02:46 - we're gonna be doing when we're sending
02:47 - information to the server is we're gonna
02:49 - send it using string data right and
02:51 - that's what we were doing in the last
02:52 - video as you were sending everything
02:54 - with string this is we're sending like
02:55 - hello and then we were decoding in and
02:56 - coding it now this is not the only way
02:59 - we can send information we can actually
03:01 - send information with objects and I'm
03:03 - gonna show you the advantage of doing
03:04 - that in the next video but for now we're
03:06 - just gonna send strings so since we're
03:08 - gonna be sending strings the strings
03:10 - that I want to send our positions okay I
03:12 - want to from each client send the
03:15 - current clients position to the server
03:17 - the server is gonna get that position
03:19 - update it on the server side and then
03:21 - send the other clients position back to
03:25 - the client you guys will see how it
03:27 - works in a second actually let's see if
03:29 - I can do a quick drawing to illustrate
03:31 - this because they'll make things a bit
03:32 - easier
03:32 - okay let's I don't know why I had this
03:34 - let's delete that okay so let's do a
03:37 - quick drawing so we're gonna have is
03:38 - gonna have client one and excuse me some
03:41 - drunk this with the mouse and client -
03:42 - okay so it's gonna be one and this is
03:44 - gonna be - all right this will do it as
03:47 - a red box is gonna be our server and on
03:49 - the server what we're gonna do is we're
03:51 - gonna store positions so so like one has
03:53 - position like one two okay sorry this is
03:56 - hard with the most guys and then client
03:58 - two will have position like three and
04:01 - one okay so it's gonna store these
04:03 - positions so what's gonna happen is when
04:06 - we initially connect client one is gonna
04:08 - go to the server it's gonna connect to
04:09 - it and then it's gonna be sent back the
04:12 - starting position for the client okay so
04:14 - it's gonna be said okay so your client
04:16 - one so that means you're gonna start at
04:17 - position one - client - it's gonna
04:19 - connect it's gonna say okay we're client
04:22 - - so I
04:22 - to send client two's position so let's
04:24 - send that back all right now let's say
04:27 - we've already connected client ones
04:28 - their clients twos there and we've set
04:30 - their starting positions what we're
04:31 - gonna do next is now we're gonna
04:34 - continually call to the client and
04:35 - update the position so what we're gonna
04:37 - do is say let's say we're working with
04:39 - client one okay what it's gonna do is
04:41 - it's gonna send its position to the
04:43 - server so it's gonna say let's just say
04:45 - pause okay
04:46 - it's sending its current position let's
04:48 - say that position is like four oh five
04:51 - sorry this is really hard with the mouse
04:53 - okay four or five what's gonna happen
04:55 - here is we're gonna say okay so you're
04:57 - updating your position so then it's
04:58 - gonna go in here it's gonna say okay
05:00 - client 1 will update your position to be
05:02 - four five like that okay and then what
05:05 - it's gonna do is instead of sending back
05:07 - this same position because we already
05:08 - know what the position is it's gonna
05:10 - send back the position of client - so
05:12 - it's gonna send three one and then on
05:15 - here we can draw that client so that it
05:17 - looks like it's moving right so we're
05:19 - getting we're sending our information
05:21 - and then in return we're receiving the
05:22 - other clients information now the same
05:24 - thing where it's here with client two so
05:26 - if client tooth connects right and it's
05:27 - sending information it's gonna send its
05:29 - position let's say it sends the position
05:31 - one three okay that's its updated
05:34 - position so this is gonna change to be
05:35 - one and three and then what's gonna
05:38 - happen is it's gonna say okay well we
05:40 - don't need clients twos position we need
05:42 - clients one sowhat's client one position
05:44 - well that is four or five so let's send
05:47 - four or five over to client two and then
05:50 - on client two we can draw four or five
05:51 - so you'll see they'll simultaneously be
05:55 - moving I hope that makes sense I just
05:56 - want to draw it out peace you guys know
05:57 - what I'm about to do in this video okay
06:00 - perfect now the only thing is we need to
06:02 - send these positions as strings so we're
06:05 - actually gonna have to implement two
06:06 - helper methods so that we can convert
06:08 - those positions which are gonna be
06:09 - tuples in districts and then we can also
06:12 - read the string into a tuple so what
06:15 - we're gonna do is we're gonna say define
06:16 - and I want to remember what I call this
06:18 - one we'll say this one is read
06:19 - underscore position which means we're
06:21 - gonna take a string value and we're just
06:23 - gonna read the string in so we'll say
06:24 - STR you told STR dot split and we'll
06:28 - split it at a comma okay and you guys
06:30 - will see how this works in a second and
06:32 - then we're gonna do is we're simply
06:34 - gonna return
06:35 - the int of string 0 so STR 0 okay comma
06:41 - int of STR 1
06:45 - so what we're gonna do is we're gonna
06:46 - take a string in that looks something
06:47 - like this would be at 45 comma 67 okay
06:50 - in in string value 45 67 we're gonna
06:54 - split it which means we're going to get
06:55 - a list that has the string 45 and the
06:57 - string 67 and then we're just going to
06:59 - convert those two ends and return them
07:02 - as a topple so now we get that convert
07:04 - it to something that looks like this
07:05 - which is useful information that we can
07:07 - actually use okay so that's what read
07:09 - pause is gonna do but we need to make
07:10 - one more which is going to convert that
07:12 - position into a string so we're going to
07:14 - say make other squared position and in
07:18 - here what we're gonna have is we're
07:19 - gonna take a topple so let's say top
07:21 - standing for topple and what we'll do
07:23 - here is we'll say let's see here return
07:28 - top actually STR of top zero and then
07:36 - we're gonna add that comma in so sorry
07:38 - I'm butchering my typing right now comma
07:40 - plus STR of top one and I hope that
07:45 - makes sense how we do that
07:47 - so that's returning the string value so
07:48 - we're reading pause and making pause and
07:51 - that's all we need to do for those
07:52 - helper functions okay so that means
07:55 - though that when we get the position
07:57 - initially from our server it's gonna
07:59 - come in in that string value right it's
08:00 - gonna look like 4567
08:02 - so we need to convert that so what we'll
08:04 - do is we'll say read pause I'm gonna put
08:08 - that around and get pause because it's
08:10 - gonna return to us that string position
08:11 - so we're reading and now what we're
08:13 - gonna do is for our player we're gonna
08:15 - say start pause zero and start pause one
08:20 - okay and what this is going to do is
08:22 - just set it to the initial start
08:24 - position we're going to code all the
08:25 - server stuff after it'll start making a
08:26 - lot more sense okay now what we also
08:29 - need to do is we need to create a second
08:32 - player because we're gonna have to draw
08:33 - the first player and the second player
08:35 - on the screen right so we're gonna say
08:36 - p2 equals and we're literally just gonna
08:38 - copy this except for start position
08:42 - we're just gonna put it as 0 zero for
08:44 - right now and we'll update that in a
08:45 - second okay so we have p p2
08:49 - and for now that's what we'll do
08:52 - actually once we can continue working in
08:55 - here so that we don't have to do
08:55 - anything else in here after we'll just
08:57 - code the server side so what we'll do
08:59 - now is we're gonna send our current
09:01 - position to the server right that's like
09:02 - the algorithm we've developed
09:04 - essentially we are when we connect we're
09:05 - gonna get the starting position we're
09:07 - gonna set that starting position and
09:08 - then every time after that so like every
09:11 - time the frame updates we're going to
09:13 - send our position and then get the other
09:15 - person position so we're gonna say is
09:17 - we're gonna say P to pause is gonna be
09:20 - equal to and don't send okay and we're
09:24 - gonna send make position of and then
09:27 - what we're gonna have to do in here is
09:28 - it's a little sketchy but we're gonna do
09:29 - P dot X P dot y now right because that's
09:34 - the position of our player the X and the
09:36 - y coordinate we're putting it in tupple
09:38 - form we're sending it to the function
09:40 - make position which is going to turn it
09:41 - into a string and then we're sending it
09:43 - to the server
09:44 - right okay awesome so I think that makes
09:46 - sense and then what we're gonna do
09:47 - simply is 4p2
09:49 - we're going to update is its position so
09:51 - we'll say P 2 dot X is gonna be equal to
09:54 - actually + 2 dot sent but we're gonna
09:57 - have to put around here sorry is make
09:59 - pause read pause because right it's
10:01 - coming in as a string so we need to
10:03 - convert this into an actual position so
10:05 - at P 2 pause is going to be P 2 position
10:07 - 0 and then P 2 dot y is gonna be equal
10:11 - to P 2 P 2 pause 1 okay now the only
10:16 - thing that's left to do here is what do
10:18 - you call it draw P 2 and update P to s
10:21 - rectangle so what we're gonna do now is
10:23 - in the redraw window down here we're
10:25 - gonna put P 2
10:26 - we're gonna go to redraw window or in
10:27 - say player 2 here and then we're gonna
10:30 - do player 2 dot draw window because
10:34 - again it's gonna be a player object so
10:36 - that'll be fine and then last thing to
10:38 - do is just update the rectangle so what
10:40 - I'm gonna do is I'm going to say P 2 dot
10:41 - update and we're gonna go to player
10:44 - object now we're just gonna add this one
10:46 - function that is define update and then
10:50 - so you see I just made that self dot
10:53 - wrecked equals XY width height and then
10:55 - in here I'm just gonna say it self
10:58 - updates
10:59 - like this okay so I know these might be
11:02 - getting a bit confusing but we're almost
11:04 - finished just gonna do the server side
11:05 - and we'll recap through everything what
11:06 - we've done explain things I shot kinda
11:08 - have to get this content out okay so
11:10 - define update so what we're doing again
11:12 - here is before we just had this line of
11:14 - code here so we're just replacing that
11:16 - with an update method that's pretty
11:18 - straightforward I hope that makes sense
11:19 - to you guys and that's just again so
11:21 - when we change the X and we change the Y
11:22 - value of p2 directly then we are
11:25 - updating the rectangle so when we draw
11:26 - it to the screen it's in the correct
11:28 - position okay so I believe that's all I
11:30 - have to do for the client side so now
11:33 - it's time to go to the server side and
11:34 - the server side is pretty
11:35 - straightforward
11:35 - now that the server needs to keep track
11:38 - of B positions right it needs a whole
11:40 - player once position and players 2
11:41 - position consistently so we can decide
11:45 - if we want to store that let's say like
11:46 - on a hard drive or if we wanted to store
11:48 - that in memory now in our case it's not
11:50 - a lot of information so we're just gonna
11:51 - store it in the memory of the server
11:53 - right so what we'll do for that is we're
11:55 - gonna create a list and we're gonna say
11:56 - pause equals in just a blank list and
11:59 - this list is gonna hold the positions of
12:01 - our players now actually that reminds me
12:04 - we're gonna put two tuples in here and
12:05 - these are gonna represent serrate the
12:07 - starting position of our players so
12:09 - we'll start with 0 0 and like a hundred
12:12 - 100 so player 1 will start at 0 0 player
12:14 - 2 will start at 100 hundred okay and
12:16 - that's all we're gonna do for that
12:17 - little list there and then we're gonna
12:20 - do down here
12:21 - well this while loop is and we're gonna
12:23 - keep track of how many players have
12:25 - connected in our case we only want 2 to
12:27 - connect right and then we need to keep
12:30 - track of well those players so we're
12:32 - gonna say there is a current player
12:33 - equals 0 now this is because when we
12:37 - connect we're gonna add 1 to this so
12:40 - that when we go back into this function
12:41 - it'll be you guys we'll see how it works
12:43 - but essentially every time we create a
12:46 - new connection so every time this we
12:48 - accept a new connection we're gonna add
12:50 - one to our current player so watch we do
12:52 - it at the bottom of the while loop we'll
12:53 - say current player plus equals 1 this is
12:56 - just to keep track of which player we're
12:57 - using so that we know what position to
13:00 - update what position to send to that
13:01 - player based on the connection right ok
13:04 - so keep track of current player and now
13:06 - what we're gonna do is when we start
13:08 - this new thread so this threaded client
13:10 - where else we're gonna pass another
13:11 - argument
13:12 - which is going to be the current player
13:14 - so instead of just passing connection
13:17 - we're also gonna pass player in here
13:18 - okay current player like that okay
13:23 - because that's gonna be important
13:24 - information to know all right so we're
13:26 - actually almost finished we just got to
13:28 - update a few things
13:29 - so let's actually grab these two methods
13:32 - from our client class or client file and
13:36 - throw them onto server here so we're
13:38 - just gonna put them right above position
13:39 - because we're gonna need to use them
13:41 - read pause and make pause so now when we
13:44 - initially connect to our player right
13:46 - this is what happens when we initially
13:48 - connect the first thing that sent is
13:50 - this encoded message that is connected
13:53 - now in our case what we want to send is
13:55 - we want to send the starting position so
13:57 - how do we do that well we know what
13:59 - player we are we're either players DL
14:01 - we're either player 1 right because we
14:03 - hat when we have two players when we
14:04 - start with player 0 after player 0
14:07 - connects then we do player 1 right so
14:09 - what we'll do is we're gonna send pause
14:12 - player now that won't work because it's
14:17 - just a topple right we need to first
14:19 - convert that to a string and then encode
14:21 - that string and send it so it should go
14:23 - back here I want to keep this string dot
14:24 - encode so string down in code and we'll
14:26 - say make underscore or pause and then
14:30 - we'll push put pause player in queue and
14:33 - what that'll do is it'll convert it into
14:35 - a string for us and that it will send
14:37 - that to the player for us right and then
14:40 - they'll read that string in get very to
14:42 - position and update the position
14:43 - accordingly okay making sense
14:45 - hope so ok so that's how that works for
14:48 - player now the only thing we need to
14:50 - change now is what information we are
14:52 - sending every time this loop is running
14:55 - right every time we receive something
14:57 - from the player we want to send back the
14:59 - other players position so to do that
15:01 - what we're gonna do is we're gonna
15:02 - second receive decode so we'll get rid
15:06 - of this for now and that what we're
15:07 - gonna say is we're gonna turn this data
15:10 - into like readable a readable Topol
15:13 - right so to do that we are going to use
15:17 - the read position method that we've
15:19 - already created or function so say read
15:21 - pause kondeh receive
15:23 - and we'll turn that into from that
15:25 - string like this right or whatever it
15:27 - was like 4567 we'll turn that into
15:30 - something that looks like this so that
15:32 - we can actually use it okay so now that
15:34 - we have that it's turned into that what
15:36 - we're gonna do is we're gonna update our
15:37 - current players positions we're going to
15:39 - say pause player equals data right
15:43 - because this is the position they sent
15:44 - to us so let's update it on the server
15:46 - so yeah so it's updated information okay
15:50 - sweet so we've done that now all that's
15:52 - left to do is send the other players
15:53 - position back to our client so to do
15:56 - that what we can do is simply say reply
16:00 - equals and we're just gonna say pause or
16:04 - actually let's not do it up here
16:07 - let's do down here okay ring say if
16:10 - player equals equals one so if we're
16:12 - player one we're gonna send player 0th
16:14 - position right so we'll say reply equals
16:16 - and then pause
16:18 - player or not pause not not player zero
16:23 - sorry and then else we're gonna send so
16:26 - say reply equals pause one okay so if
16:30 - we're player one we send players zero
16:32 - position if we're player 0 we send
16:33 - players one position right like I was
16:35 - talking about with that little algorithm
16:36 - we're gonna use okay and then instead of
16:37 - saying received and sending actually
16:41 - yeah we can say received reply sending
16:43 - reply or rulest a received data sending
16:46 - reply that should work fine okay now
16:49 - what we'll do is we're gonna send all
16:51 - the reply but the thing is our reply we
16:54 - need to first convert into a string so
16:56 - to do that we're gonna say make
16:57 - underscore pause write that function
17:00 - we've already created and then that
17:02 - should actually be about it now I'm
17:04 - probably made a mistake or two here but
17:07 - let's just test this out and see if
17:08 - everything's working so let's start by
17:09 - running the server and then let's run to
17:12 - clients and see if we can connect or if
17:14 - there's any errors
17:15 - okay so we've connected with client one
17:17 - let's run client two and let's see what
17:21 - happens so I'm on client one right now
17:23 - you can see that when I moved my green
17:25 - square it moves on the other client okay
17:27 - let's go to the other one and when you
17:29 - look at this when I move it on here it
17:31 - moves on the other client so we have
17:33 - successfully set up and connected our
17:35 - two clients together
17:36 - now the only thing I want to change
17:38 - quickly is just the color of these so
17:39 - that we know who is whom like which
17:42 - square am I so to do this we're just
17:44 - simply gonna go we'll actually close
17:46 - this server class so those are gonna run
17:47 - into an issue or server instance
17:49 - whatever it is what a client and instead
17:52 - of having the same color here we're just
17:54 - gonna change this to be 255 for player
17:56 - two and I want to show you what happens
17:59 - because some of you are probably to be
18:00 - confused with what's about to happen
18:01 - here but it's kind of interesting so
18:02 - let's run server
18:03 - let's run client one let's run client
18:06 - two now notice that these colors are
18:09 - inverted now can anyone think of why
18:12 - that might be so green right is gonna be
18:15 - your current player so right now I'm on
18:17 - here I'm on this where my mouse is and
18:20 - I'm moving the green square that's near
18:21 - the middle of the screen okay but notice
18:23 - on the other screen it's moving the red
18:25 - square that's because on your clients
18:28 - it's unique to you so on your client you
18:30 - are green and red is the other person
18:33 - meanwhile if I go to this client and I
18:35 - start moving see green is me and red is
18:37 - the other guy right and he's not
18:39 - currently moving now if I wanted to move
18:41 - these at the same time I would just have
18:43 - to be running these on different
18:44 - computers or I would have to change like
18:46 - the arrow keys to move them and that's
18:48 - just because obviously right like if I'm
18:49 - pressing the arrow keys on here it's not
18:51 - gonna work on this client but if I were
18:52 - to load up my laptop and try doing it on
18:54 - there this would work fine as well so
18:57 - anyways that has been this video in the
18:59 - next video we're gonna do a more complex
19:01 - version of this not just moving squares
19:02 - around we're gonna do like a full game
19:04 - sending objects get a lot more advanced
19:06 - this is just the very beginning just
19:08 - touching the tip of the iceberg or
19:10 - whatever you want to call it so I hope
19:11 - you guys are excited about that and I
19:13 - will see you again in the next video
19:15 - [Music]