00:02 - [Music]
00:08 - in this video i'll be sharing with you
00:10 - five steps that you can follow to become
00:12 - a software engineer now these are in the
00:15 - order in which you should follow them in
00:16 - but i just want to mention that this is
00:18 - not going to be an exhaustive list it's
00:20 - not going to work for everybody this is
00:22 - just my opinion on what you should
00:24 - probably learn in the order in which you
00:25 - should learn it if you want to become a
00:27 - software engineer as quickly as possible
00:30 - so with that said let me list out what
00:31 - these different topics are and then i'll
00:33 - elaborate on them as we go through the
00:34 - video so step number one is going to be
00:37 - to master the basics step two is to
00:40 - write clean and efficient code step
00:42 - three is to learn software engineering
00:44 - tools step four is to get into advanced
00:47 - programming and step five is to learn
00:49 - about software design and architecture
00:52 - now again this is not gonna be a
00:53 - complete list for everyone if you're
00:55 - going into a specific field of software
00:57 - engineering say like web development
00:59 - that you're definitely going to need to
01:00 - learn other things however i think this
01:02 - is a really good general outline and
01:04 - should apply to most people trying to
01:06 - become a software engineer now that said
01:09 - if you want to learn this content as
01:10 - quickly as possible you of course can
01:12 - follow youtube channels like mine find
01:15 - great free resources online that's
01:16 - definitely doable but to learn this as
01:19 - quickly as possible you should check out
01:20 - programmingexpert.io
01:23 - now programming expert is a course that
01:24 - i just released with the algo expert
01:26 - team that is literally designed to make
01:28 - you a software engineer as quickly as
01:30 - possible you can check it out from the
01:32 - link in the description programming
01:34 - expert dot io and use the discount code
01:36 - tim at checkout if you want a discount
01:39 - i'll let you guys look at that but it's
01:40 - literally designed to make you a
01:41 - software engineer and covers almost
01:43 - everything that i already mentioned in
01:45 - this video alright so let's go ahead and
01:47 - get started step number one is master
01:50 - the basics and what i think you should
01:51 - do in this step is get good at at least
01:54 - one programming language and understand
01:57 - programming fundamentals and really
01:59 - build a strong foundation for yourself
02:01 - so you are comfortable and confident
02:03 - writing code i think this is the most
02:06 - important step for really anyone trying
02:08 - to become a software engineer is to get
02:10 - a really solid foundation and understand
02:12 - the core concepts that are going to
02:14 - apply throughout every single language
02:16 - every single framework and pretty much
02:18 - everything you do going forward so just
02:20 - give you a few examples here i think
02:22 - that you should understand data types
02:24 - variables conditions looping functions
02:27 - object oriented programming all of these
02:30 - topics that are going to apply again to
02:32 - pretty much everything now the reason
02:34 - i'm really emphasizing this is because a
02:35 - lot of people
02:37 - will immediately dive into something
02:38 - like a front-end framework or machine
02:41 - learning or game development or all of
02:42 - these other very interesting topics now
02:45 - i'm not trying to say that you can't do
02:46 - that as a beginner you can but it's way
02:49 - easier and less discouraging when you
02:51 - already have a solid foundation
02:53 - underneath you imagine going and trying
02:55 - to learn 3d game development without
02:57 - knowing how to write a single line of
02:59 - code well now you're doubling the amount
03:01 - of work you have to do to feel
03:02 - successful or accomplished in this field
03:05 - because now you have to learn 3d game
03:06 - development as well as whatever the
03:08 - programming language is that's being
03:09 - used to do that you don't have the
03:11 - foundation and so the amount of stuff
03:13 - you have to do to actually achieve
03:14 - something maybe build a project is a lot
03:17 - more whereas if you build the strong
03:19 - foundation first this is a really great
03:21 - step builds some confidence and allows
03:23 - you to feel more comfortable actually
03:25 - writing code solving problems and then
03:27 - moving on to any other frameworks
03:29 - modules or specific things that you want
03:30 - to learn hopefully that makes sense but
03:32 - that is step number one master the
03:34 - basics alright so now we are moving on
03:36 - to step number two which is to write
03:38 - clean and efficient code now i
03:41 - understand this might be a little bit
03:42 - controversial because some people will
03:44 - only really do this once they've gone
03:46 - through almost all the other steps that
03:47 - i've listed however i think it's very
03:50 - important to build strong habits when
03:52 - you're starting out with programming and
03:54 - to learn how to properly write code and
03:56 - write code in a clean and efficient
03:58 - manner now to do that you need to learn
04:00 - things like time complexity and space
04:03 - complexity essentially analyzing code
04:05 - and understanding which code is more
04:07 - efficient than others now this is not
04:09 - extremely difficult to do especially if
04:11 - you're doing it on a very surface level
04:13 - and not getting into any super advanced
04:14 - data structures and algorithms but i
04:17 - think having that understanding and
04:19 - realizing hey i probably shouldn't have
04:21 - three nested for loops inside of each
04:23 - other unless i absolutely need to have
04:25 - that
04:26 - or oh this approach is a better way to
04:28 - solve this problem it's going to be more
04:29 - efficient it's going to use less space
04:31 - or on the other way maybe i'm going to
04:33 - write something that's a little less
04:34 - efficient but it's going to be way
04:36 - easier to understand and i'm going to be
04:38 - able to go back to this in a few months
04:39 - and be able to modify it tweak it
04:41 - whatever that's kind of what i'm talking
04:43 - about in this section is building strong
04:45 - habits and writing code in a way that's
04:47 - maintainable and sustainable now just to
04:49 - add one last point here from personal
04:51 - experience i was someone that was
04:53 - learning to code when i was a lot
04:55 - younger i was about 11 12 years old and
04:57 - so most of the code that i wrote back
04:59 - then never needed to be seen by anyone
05:01 - else it was just for myself so i didn't
05:03 - care how it looked i didn't care how
05:04 - maintainable it was i didn't care about
05:06 - consistency naming conventions all of
05:08 - those types of things and i built a
05:10 - really bad habit of just writing
05:12 - honestly horrible code that worked that
05:15 - solved the problem but that was really
05:16 - hard to maintain hard to read and hard
05:19 - to understand and so as i was getting
05:21 - older i had to actively work on changing
05:23 - the way that i wrote code because now i
05:25 - was getting into the industry actually
05:26 - working in a job and presenting my code
05:29 - to other people and in youtube videos so
05:31 - that's why i'm putting this step right
05:32 - here it's not very difficult to do but
05:35 - learning things like how to write
05:36 - self-documenting code avoiding
05:38 - repetition structuring your code in a
05:40 - very easy way to understand really
05:42 - really important and a good habit to
05:44 - build early on all right so now we're
05:46 - moving on to step number three which is
05:48 - to learn software engineering tools so
05:51 - at this point in time you should be
05:52 - comfortable writing code you should have
05:54 - some confidence in writing code as well
05:56 - hopefully you've solved some small
05:58 - problems you've worked on some projects
06:00 - you understand how to structure code and
06:02 - write clean code you kind of have the
06:04 - basic skills down now to get to the next
06:07 - level i think it's important to learn
06:08 - the software engineering tools that
06:10 - you'll use in a professional environment
06:12 - right so for example some of the tools
06:14 - you may want to learn would be git and
06:16 - github this allows you to work with
06:18 - multiple people on the same code base
06:20 - allows you to store previous versions of
06:22 - your code base i have all kinds of
06:23 - tutorials on it on this channel it's
06:25 - also on programming expert i also would
06:28 - recommend learning something like bash
06:29 - now bash is a command line tool this is
06:32 - going to be used on mac or linux and
06:34 - this is kind of in replacement of your
06:36 - graphical user interface so a lot of
06:38 - times when you're working as a
06:39 - programmer as a software engineer you're
06:41 - not going to have access to a nice
06:43 - graphical user interface and desktop and
06:45 - all of that stuff you're going to have
06:46 - to do everything right from the command
06:48 - line and i think it's important to have
06:50 - a basic understanding of the command
06:52 - line tools how to navigate a linux
06:54 - operating system these are things that
06:56 - you might not have to do that i think
06:58 - are pretty important and that are a good
06:59 - skill to have as a programmer for
07:02 - example understand how to run your code
07:04 - directly from the command line without
07:05 - using the little run button in your
07:07 - editor right that's something that i
07:08 - think most software engineers should
07:10 - know how to do and again how to create
07:12 - files navigate the file system all that
07:14 - type of stuff continuing i also think
07:16 - that you should learn about ides now an
07:19 - ide is an integrated development
07:20 - environment at this point you've
07:22 - probably already worked in one if you've
07:24 - gone through these steps however i think
07:26 - it's important to have proficiency with
07:27 - your ide understand the different
07:29 - keyboard shortcuts how to use things
07:31 - like debuggers and a lot of the
07:33 - professional tools that ides will offer
07:35 - to you for example vs code is an ide
07:38 - that's one that i would recommend if
07:39 - anyone is looking for one to learn
07:41 - continuing i think you should learn
07:43 - about basic networking now this is
07:45 - something you might be able to emit from
07:46 - this list but understanding things like
07:49 - http ip addresses just the basics on
07:52 - what networking is how networking
07:54 - actually works on a very very surface
07:56 - level i think is nice to know as a
07:57 - software engineer because a lot of times
07:59 - you're using features in your code that
08:01 - rely on networking and to just have that
08:03 - basic understanding just makes
08:05 - everything easier to do
08:06 - all right so that's going to wrap up
08:08 - this section again i have you get bash
08:11 - ides and networking there's a ton of
08:13 - other tools you could potentially learn
08:14 - here and those are probably gonna differ
08:16 - depending on the specific discipline of
08:18 - software engineering that you're getting
08:19 - into alright so step number four is to
08:21 - get into advanced programming now
08:24 - advanced programming could have so many
08:26 - different topics within it this of
08:28 - course is very vague but i think you
08:30 - should step outside of your comfort zone
08:32 - now and start learning about more
08:33 - advanced features and things that you
08:35 - don't necessarily need to use but you
08:37 - will probably see and should understand
08:40 - how they work so i'm just going to name
08:41 - a bunch of topics off the top of my head
08:43 - again non-exhaustive lists just some
08:45 - things that i'm thinking of right now so
08:47 - probably threading
08:48 - multi-processing asynchronous
08:50 - programming iterators generators
08:53 - compilers interpreters how your code is
08:55 - actually ran and executed maybe things
08:58 - like decorators standard libraries
09:01 - all of these different topics that are
09:02 - fairly advanced that you probably want
09:05 - to at least have a basic understanding
09:07 - of and know what they look like in
09:08 - whatever programming language you're
09:10 - working now if you're working in a
09:11 - professional environment unless you're a
09:13 - senior programmer you're probably not
09:15 - going to have to implement a
09:16 - multi-processed application you might
09:18 - but that's unlikely but a lot of times
09:20 - you'll see in the code base that you're
09:22 - working in there'll be a bunch of
09:24 - advanced features that are used and
09:25 - you'll have to understand how they work
09:27 - so this is really more about just being
09:29 - able to read this type of code than it
09:31 - is about writing this type of code and
09:33 - that's kind of why i threw this section
09:34 - in here because i think it's important
09:36 - to know these different topics even if
09:38 - you don't know how to implement them
09:39 - yourself all right so that is what i
09:41 - have for advanced programming again i
09:43 - apologize that this is vague it's really
09:45 - going to depend on the type of software
09:46 - engineer that you're trying to be but
09:48 - those are the few things that i can
09:49 - think of off the top of my head alright
09:52 - so now we're moving on to the last step
09:54 - which is software design and software
09:56 - architecture now this is something
09:58 - that's very difficult and that most of
10:00 - us are really never going to have to do
10:02 - at least on a super impactful level but
10:04 - the reason i'm including it here is
10:06 - because as a software engineer i think
10:08 - it's important to understand things like
10:10 - design patterns good coding practices
10:12 - the different approaches you can use
10:14 - when designing specific applications and
10:16 - pieces of software even something simple
10:19 - like picking your tech stack right those
10:21 - are things that actually differentiate
10:23 - in my opinion programmers and kind of
10:24 - people that write scripts from people
10:26 - who are software engineers i think it's
10:28 - pretty easy to actually get into
10:30 - programming and learn how to write basic
10:32 - code or you know create basic projects
10:34 - but to be able to work on large scale
10:36 - applications design entire websites
10:38 - design things like netflix facebook
10:41 - google things that need to scale to
10:42 - millions of people that is what software
10:44 - engineers do and when you get to a super
10:47 - senior level of software engineering
10:48 - which full disclosure i am nowhere near
10:50 - that's when you start to really get good
10:52 - at this stuff and when that's your main
10:54 - responsibility now to give you uh some
10:56 - concrete examples here or i guess a
10:58 - personal experience i interned at
11:00 - microsoft about a year and a half ago
11:03 - and when i was there the number one
11:04 - thing that i saw that separated people
11:06 - like me from people that were super
11:08 - senior software engineers was their
11:10 - ability to do software design and
11:12 - software architecture to look at
11:13 - something from a very large macro
11:15 - perspective and say what approach are we
11:17 - going to go with here what are the
11:19 - advantages what are the drawbacks is
11:21 - this maybe the better approach because
11:22 - it's going to be faster to implement all
11:24 - of that type of stuff even just to
11:26 - design a system in terms of laying out
11:28 - the different components structuring a
11:30 - code base picking the tech stack right
11:32 - all of that type of stuff was what those
11:34 - guys were very very good at doing and
11:36 - what our team relied on them to do so
11:38 - that someone like me could go in and
11:40 - implement the individual features and
11:42 - just as a last note here i think that
11:43 - after you get good at software design
11:45 - and software architecture you're
11:47 - probably at a level where you're
11:49 - comfortable to design any type of system
11:51 - any type of application and what comes
11:53 - next is really up to you do you want to
11:55 - master a specific framework master a
11:57 - specific language do you want to get
11:58 - into machine learning and ai do you want
12:00 - to do front-end web development whatever
12:02 - it may be i think once you get to this
12:04 - point in your software engineering
12:05 - career it's really about what you want
12:07 - to learn next you should have the skills
12:09 - and confidence to learn it and well then
12:11 - you go learn it get good at that and
12:13 - continue from there so with that said i
12:15 - think i'm going to wrap up the video
12:17 - here as a reminder almost all of the
12:19 - topics in this video are covered on
12:21 - programming expert dot io check it out
12:23 - from the link in the description use
12:25 - code tim for a discount if you guys
12:27 - enjoyed make sure leave a like subscribe
12:29 - to the channel and i will see you in
12:30 - another one
12:33 - [Music]
12:39 - you