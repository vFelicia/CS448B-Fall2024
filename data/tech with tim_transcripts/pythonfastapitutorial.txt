00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video
00:11 - so in today's video i'm gonna be showing
00:13 - you the python web framework known as
00:15 - fast api
00:16 - now as the name suggests what this web
00:18 - framework lets you do is create apis in
00:20 - python
00:20 - the reason it's named fast api is
00:22 - because you can make apis very very
00:24 - quickly in fact we can write our first
00:26 - api in about four or five lines of code
00:29 - and then these apis are very quick
00:30 - themselves they have very high
00:32 - performance
00:33 - with that said this video is not
00:35 - designed for absolute beginners you
00:37 - should have some
00:38 - knowledge with python however i will
00:40 - explain to you what an api is
00:41 - i'll talk about the common api kind of
00:43 - method so get post
00:45 - uh put patch update all of those kind of
00:47 - ones and i will discuss
00:49 - json and just kind of how an api works
00:51 - if you're unfamiliar with apis don't
00:52 - worry
00:53 - but you should have some knowledge of
00:54 - python to be able to follow along
00:56 - so that said let's dive in after a quick
00:58 - word from our sponsor
01:00 - before we get started i need to thank
01:01 - intel for sponsoring this video
01:03 - and having me talk to you about their
01:05 - openvino toolkit
01:06 - and the intel dev cloud for the edge the
01:09 - openvino toolkit is free software that
01:11 - helps developers and data scientists
01:13 - speed up computer vision and ai
01:15 - workloads streamline deep learning
01:17 - inference and deployments and enable
01:19 - heterogeneous execution across intel's
01:21 - platform
01:22 - from edge to cloud on the openvino
01:24 - website you can find free resources like
01:27 - a tutorial on how to perform a style
01:29 - transfer using a deep learning model
01:31 - and a cheat sheet containing everything
01:32 - you need to know to get your ai
01:34 - application up and running as fast as
01:36 - possible if you want to get started with
01:37 - the openvino toolkit you can use
01:39 - intel dev cloud for the edge this is a
01:42 - cloud-based development sandbox that
01:44 - gives developers access to the latest
01:46 - intel edge hardware
01:47 - and software to build test and prototype
01:49 - their ai applications
01:51 - with these technologies and resources
01:53 - you can build optimize and deploy your
01:55 - applications with ease
01:57 - start building your ai and machine
01:58 - learning applications today by clicking
02:00 - the link in the description and taking
02:02 - advantage of the openvino toolkit
02:04 - thanks again to intel for sponsoring
02:06 - this video
02:08 - alright so as we enter the video here
02:09 - the first thing i'll mention is that
02:10 - there is timestamps linked below if you
02:12 - want to skip to a certain part in the
02:14 - video or you want to kind of skip
02:15 - through the more beginner explanations
02:16 - maybe if you're more advanced
02:18 - regardless i'm going to start here by
02:20 - discussing kind of the core advantages
02:21 - of
02:22 - fast api and why you may actually want
02:24 - to use it
02:25 - so fast api is very fast to make an api
02:28 - with right the name is very fitting
02:29 - and one of the reasons for that is that
02:31 - when you create an api in fast api
02:34 - you're actually going to be defining the
02:35 - types of all of the data that your api
02:38 - is expecting
02:39 - so traditionally when you write an api
02:41 - or some web framework or something or
02:43 - web app whatever in python
02:44 - you don't actually explicitly set what
02:47 - type all of the information that your
02:49 - endpoints so kind of a url on the server
02:51 - are going to be accepting now what that
02:53 - means is you have to do a ton of data
02:54 - validation you have to check to ensure
02:56 - that you know you actually got an
02:58 - integer you got a stringer you got
03:00 - some json object or something like that
03:02 - and while this is kind of a lot of grunt
03:03 - work and you're just writing a ton of
03:05 - stuff to essentially check
03:06 - that the information that was sent to
03:08 - your api is
03:09 - correct now in fast api all of this is
03:12 - actually
03:12 - automatically done for you so if someone
03:14 - sends the wrong piece or wrong type of
03:16 - information
03:17 - to your api endpoint it will
03:19 - automatically return to them kind of an
03:20 - error message saying hey you know this
03:22 - was supposed to be an integer
03:24 - and i got a string whatever but that's
03:26 - kind of the first main advantage of fast
03:28 - api
03:28 - is it does all of this data validation
03:30 - for you because when you create
03:32 - endpoints with fast api you're going to
03:35 - define explicitly what type
03:37 - all of the information that's going to
03:38 - be past that endpoint will be so whether
03:40 - that's a path parameter a query
03:42 - parameter or
03:42 - actually the kind of uh request body
03:45 - you're going to define
03:46 - exactly what that should look like so
03:47 - fast api can automatically handle the
03:49 - data validation
03:51 - next thing that's great about fast api
03:53 - is that it auto documents your entire
03:55 - api
03:55 - so since you are actually giving all of
03:57 - the types for what's expected for
04:00 - the api fast api can automatically
04:02 - generate documentation
04:04 - that also works as kind of like a test
04:06 - script so i'll show you this in a second
04:08 - but it actually generates a web page
04:09 - that you or maybe your front end
04:11 - engineer if someone else is working on
04:12 - this
04:13 - could go to to see all the api endpoints
04:15 - and exactly what they expect
04:17 - and any description or information that
04:18 - you would have provided for them
04:20 - and then last thing since you're
04:21 - defining the types of all of these kind
04:23 - of all this information related to the
04:25 - endpoints
04:26 - you're gonna get really good auto
04:27 - completion so if you're working in an
04:29 - actual ide like vs code or pycharm i'm
04:31 - not doing that right here i'm in sublime
04:33 - text
04:33 - then you get really good auto completion
04:35 - and just better completions that you
04:37 - would typically have because of the fact
04:39 - you're defining these types
04:40 - so anyways enough talking let's get into
04:42 - it the first thing we need to do is
04:44 - install fast api
04:45 - so if you're on windows open up command
04:47 - prompt if you are on mac or linux open
04:50 - up terminal
04:50 - and you're going to type the following
04:52 - command pip install
04:54 - fast api to install the fast api module
04:57 - if for some reason this doesn't work for
04:59 - you
04:59 - try the following command you can see i
05:01 - already have this uh requirement
05:02 - satisfied
05:03 - try pip 3 install fast api if that
05:06 - doesn't work for you try python hyphen
05:09 - m pip install fast api if that doesn't
05:11 - work for you try python 3 hyphen m pip
05:14 - install
05:14 - if none of those work for you then go to
05:16 - the links in the description i'll have a
05:18 - video for mac and a video for windows
05:20 - showing you how to fix this command now
05:22 - once we've installed fast
05:24 - api i'm going to assume you've done that
05:25 - at this point we're going to install
05:26 - something called uv corn
05:28 - now this is what we're actually going to
05:29 - use to run our api kind of as like a web
05:32 - server
05:33 - which you'll see in a minute but
05:34 - regardless you need uv core as well
05:36 - again if this command doesn't work try
05:38 - those sequences pip 3 python m
05:41 - so on and so forth all right so we can
05:43 - leave the command prompt open
05:44 - we'll be using that later then what we
05:46 - need to do is open up a python file in
05:49 - some editor
05:50 - for me i'm working in some directory
05:52 - this on my desktop
05:53 - it's called fast api you can kind of see
05:55 - it at the top left hand corner of my
05:56 - screen for the path for this file
05:58 - i just have a python file called
06:00 - working.pi obviously place yours
06:02 - wherever you want name it whatever you
06:03 - want but make sure you know where it is
06:04 - because you are going to have to kind of
06:06 - access that
06:07 - all right so now what we're going to do
06:08 - is make sure our fast api installation
06:10 - is working
06:11 - so we're just going to import fast api
06:14 - save our script run it i'm running mine
06:16 - with ctrl b
06:17 - in sublime text and you can see that we
06:20 - got no errors and so we're all good
06:22 - fast api is installed so now we're going
06:24 - to write kind of our first api
06:26 - i'll go through this fairly quickly just
06:28 - showing you how to set this up and then
06:29 - i'll kind of walk through each line and
06:30 - discuss what i did so i'm going to say
06:32 - from
06:33 - fast api import and then make sure you
06:36 - look at the capitalization here
06:37 - fast api this is the first thing we need
06:40 - to do we're going to import this fast
06:41 - api class
06:42 - module whatever and then we're going to
06:44 - say app
06:46 - is equal to and then fast api with an
06:49 - open parenthesis and a
06:50 - closing parenthesis what this will do is
06:53 - creates kind of i guess like let's say
06:54 - an api
06:55 - object something that's going to
06:56 - initialize our api and say okay
06:58 - this app variable right here this is
07:00 - telling us we just created
07:02 - our first fast api regardless is what
07:04 - you always need to do
07:05 - when you are starting uh working with
07:08 - fast api
07:09 - okay so now that we have this we can
07:10 - create an end point and at this point in
07:12 - time i'm going to stop for a second
07:13 - quickly discuss what an end point is so
07:15 - if you hear me say
07:16 - endpoint or root or route or whatever
07:18 - what that really means is something like
07:20 - slash hello slash you know get hyphen
07:24 - item so when when you're talking about
07:25 - an endpoint you have a
07:27 - kind of base server url in our case our
07:30 - base url is going to be localhost
07:32 - because we're not distributing this app
07:33 - we're
07:34 - kind of i guess deploying this app we're
07:35 - just hosting it on our local machine
07:37 - so the base url would be localhost and
07:39 - then the endpoint would be
07:40 - slash hello and so you have all of these
07:43 - different endpoints and when you go to
07:44 - these different endpoints
07:45 - well different stuff happens right
07:47 - different information will be sent back
07:48 - to you
07:49 - maybe you're sending information to an
07:50 - endpoint but regardless that's what i
07:52 - mean by endpoint
07:53 - slash something essentially right it's
07:55 - kind of like the ending path
07:57 - after the main domain so if you were
07:58 - looking at you know like facebook.com
08:01 - an endpoint would be like slash home
08:03 - right that would be one of the endpoints
08:05 - for facebook.com regardless that's an
08:08 - endpoint
08:08 - so to create an endpoint what you do is
08:10 - you say app dot and then the
08:12 - method that this endpoint is going to
08:14 - kind of accept or that is going to be
08:16 - so when we talk about http hyper text
08:19 - transfer protocol i believe that's what
08:21 - that stands for at least we have some
08:23 - main different methods
08:24 - so whenever you set up an endpoint you
08:26 - can set it up to kind of
08:28 - be a different method if that makes
08:29 - sense i'm having trouble coming up with
08:30 - the exact word for it
08:31 - but the idea is we have these kind of
08:33 - core http methods and they all mean
08:35 - something different now one of the main
08:36 - ones is get
08:38 - we have post we have put and then we
08:41 - have
08:41 - delete and we have a few other ones as
08:43 - well but these are kind of the four core
08:45 - ones
08:45 - now when you set up a get request or you
08:48 - have an
08:48 - endpoint that has a get method what this
08:51 - means is that this endpoint is going to
08:53 - be returning
08:54 - information that's kind of all it's
08:55 - doing is you're asking this endpoint to
08:57 - get something for you
08:59 - and return it to you that's kind of the
09:00 - get http method
09:02 - now when we talk about post this
09:04 - actually means that you're going to be
09:05 - sending information to the post endpoint
09:07 - or
09:08 - this end point here that is method post
09:10 - will be creating something new
09:12 - whenever you're creating data kind of
09:14 - adding something to the database
09:16 - you're doing this with a post request so
09:18 - you would be maybe posting a new user
09:20 - login or something right
09:21 - or a new user sign up right you would
09:23 - post that to an endpoint
09:25 - because you're going to create a new
09:26 - user in the database because they just
09:28 - registered or signed up or whatever
09:30 - and then put this is to actually update
09:32 - something that's already existing in the
09:33 - database
09:34 - just you know kind of modify information
09:36 - essentially and then delete well that's
09:38 - straightforward you're deleting
09:39 - something getting rid of information
09:41 - now of course there's a few more but
09:42 - these are the core ones the ones that
09:43 - i'll show you
09:44 - so depending on the method you want your
09:46 - endpoint to be you're going to say app
09:47 - dot and then the method so in this case
09:49 - i'm going to go with get
09:50 - and then you're going to put the end
09:52 - point right here so i'm going to say
09:53 - slash and make sure sorry before the app
09:56 - you put this at symbol right here i'll
09:57 - discuss why we need that in a second
09:59 - so for now i'm going to set up what i'm
10:01 - going to call my home endpoint
10:03 - and what this is going to do is just
10:05 - return
10:06 - some data that says test
10:09 - so what i've just done is i've said at
10:11 - app.get i've defined my kind of root or
10:13 - endpoint as
10:14 - slash i've then created a function i've
10:16 - called this home
10:18 - make sure that your kind of root or
10:19 - endpoint is right above the function
10:21 - that will be triggered when you go
10:23 - to this root and then what you're going
10:24 - to do is return some python dictionary
10:27 - this will be kind of the data or the
10:28 - information that's going to be returned
10:30 - when you go
10:31 - to this endpoint so hopefully that kind
10:33 - of makes sense
10:34 - but if we go to slash now once we kind
10:36 - of run this web server
10:38 - what will happen is the information data
10:40 - with the key
10:41 - test will be returned so this is how you
10:44 - kind of set up a root you say at app
10:46 - dot whatever the method is again the
10:47 - root you define a function right
10:49 - underneath it you can name this function
10:50 - whatever you want
10:52 - and then you return some information
10:54 - okay there we go so let me just show you
10:55 - how we can run this
10:56 - then i'll talk about what's known as
10:58 - json and kind of what an api
11:00 - is and actually how that works so what
11:02 - i'm going to do here is go to my command
11:03 - prompt
11:04 - and i need to change directories into
11:06 - the folder or into the directory where
11:08 - my python script is
11:09 - so in this case i'm on windows i'm
11:11 - starting in my home folder so i'm going
11:12 - to go to cd
11:13 - desktop and then i'm going to cd into
11:16 - fast api
11:17 - then what i'm going to say is uv cord
11:20 - this is the thing we just installed
11:22 - and i'm going to say the name of my file
11:24 - which is working
11:26 - notice i'm not adding the dot pi you
11:28 - don't want the dot pi so make sure you
11:30 - don't have that
11:31 - and then oops what did i just do here
11:34 - okay i've messed up my cursor somehow
11:36 - anyways uv corn working
11:37 - colon you're gonna then say app app
11:40 - being the name of the variable that you
11:42 - have fast api stored in
11:44 - and then space hyphen hyphen reload
11:47 - now what this hyphen hyphen reload will
11:49 - do is tell uvcorn to constantly reload
11:53 - the web server
11:53 - every single time you make a change to
11:55 - the python file that's kind of storing
11:57 - the api
11:58 - so uvcorn the name of your python file
12:00 - mine is working notice i don't have the
12:02 - dot pi extension
12:03 - then the name of the variable storing
12:04 - fast api colon colon or sorry
12:07 - hyphen hyphen reload and then press
12:09 - enter and you should see that it says
12:11 - application startup complete
12:12 - and it shows you the url right here that
12:15 - you need to go to
12:16 - to access this website or access this
12:18 - api sorry so in this case it's http
12:20 - colon
12:22 - 127.0.0.1 colon 8000
12:25 - pretty much the same thing as localhost
12:27 - so what i'm going to do now is go to my
12:28 - browser
12:29 - and say http slash 127.0.0
12:34 - colon8000 and i'm not going to go to the
12:36 - docs page quite yet
12:38 - and here you can see that we get this
12:39 - data saying test
12:41 - because we went to the slash endpoint so
12:43 - when you just put slash that means if
12:45 - you go to
12:45 - any endpoint essentially on the server
12:47 - like if you go to just the default one
12:49 - so you don't have anything after
12:51 - then it's going to return or uh treat it
12:54 - as if you're at this endpoint
12:55 - so i think i think you guys get what i'm
12:57 - saying i'm kind of mumbling around here
12:59 - but the point is that
13:00 - like this just that is equivalent to the
13:02 - endpoint slash
13:03 - regardless you can see we're getting
13:05 - data test so now let's do a quick change
13:07 - this i'm going to say
13:08 - testing i'm going to save that now i'm
13:11 - going to go here and refresh
13:12 - and notice it says testing that means
13:14 - our reloading is kind of working
13:16 - great now what you guys saw i
13:18 - accidentally loaded this docs page so we
13:20 - might as well just go to it right now if
13:21 - you go to your uh
13:23 - server url which is just 127.001 colony
13:26 - thousand
13:27 - then slash docs it will have
13:29 - automatically generated documentation
13:31 - for your api so at this point we only
13:33 - have one endpoint it is slash
13:35 - the function name is home right so
13:36 - that's why it's saying home and then if
13:38 - you press on this it says okay it
13:39 - doesn't take any parameters
13:41 - and what is it if we try it out so we
13:44 - can try it out by pressing that button
13:45 - and press execute
13:46 - we can kind of see the sample response
13:48 - body we can see the request that we sent
13:51 - to get this response this is a way that
13:52 - you can actually test your api
13:54 - from this docs page right here alright
13:57 - so i'm going to quickly discuss
13:58 - what an api is so an api stands for
14:01 - application programming interface
14:04 - and really what an api is is some web
14:06 - service
14:07 - that provides an interface to
14:09 - applications
14:10 - to manipulate and retrieve information
14:13 - so if we're talking about something like
14:14 - amazon
14:15 - amazon almost definitely i don't know
14:17 - the internal makeup of amazon but almost
14:18 - definitely has an api
14:20 - now they probably have multiple apis but
14:22 - one of their apis may be responsible
14:25 - for handling their kind of inventory
14:26 - system right figuring
14:28 - out what items are in stock what items
14:30 - are not in stock how many items are in
14:32 - stock how much they cost
14:33 - whatever we can think of a common api
14:36 - that amazon may have
14:37 - as an inventory api now this api here
14:40 - is separate from the different front
14:42 - ends that display this
14:43 - information so if you're talking about
14:45 - amazon they have a
14:46 - web app right they have a mobile
14:48 - application they have something that
14:49 - works on like alexa or google home or
14:51 - whatever
14:52 - they have all of these different
14:53 - services that all rely on the same
14:55 - underlying information they need to know
14:56 - inventory they need to know what's in
14:58 - stock
14:58 - and so rather than writing you know five
15:00 - inventory management systems
15:02 - they would write one in the form of an
15:04 - api application programming interface
15:06 - and now any of their applications that
15:08 - are used by users
15:09 - can access this same information by
15:12 - sending requests
15:13 - to the api so when you go to the you
15:15 - know website and you look up
15:17 - i don't know let's say graphics card
15:18 - right none of those are in stock right
15:19 - now
15:20 - what's going to happen is there will be
15:22 - a request that is sent
15:23 - to the amazon api that says hey i'm
15:26 - looking for
15:27 - graphics cards right and then it will
15:28 - return all of this information to the
15:30 - front end
15:31 - and display all of that for you and then
15:33 - when you click on a specific graphics
15:35 - card it will then say oh i need all of
15:36 - the information related to this graphics
15:38 - card again a request will be sent to the
15:39 - api
15:40 - the api will then send all of that
15:42 - information to the front
15:43 - and so hopefully that gives you an idea
15:45 - of kind of how the communication works
15:47 - but the same thing that happens on the
15:48 - mobile app right it sends a request to
15:51 - the api
15:52 - and this way you don't need like five
15:53 - different backends to handle every
15:55 - single one of your applications and all
15:56 - of their information
15:57 - you have one api responsible for kind of
16:00 - distributing and giving you all of the
16:01 - information that you need
16:03 - and this is just good practice whenever
16:05 - you're kind of writing code it's a very
16:06 - good idea to separate your front end and
16:08 - your back end
16:09 - so if at any point in time you want to
16:11 - create a different kind of
16:12 - representation of your data on the front
16:14 - end
16:14 - you can just use the same api and the
16:16 - only thing you need to change is kind of
16:17 - the way that you're displaying
16:18 - so hopefully that gives you an idea of
16:20 - what an api is and kind of how that
16:22 - works
16:22 - now i don't know the internal makeup of
16:24 - amazon's web services and all of that
16:26 - kind of stuff so that could be
16:27 - completely wrong what i described
16:29 - but that's like an example of where an
16:30 - api might make sense to use
16:32 - with that said what i need to quickly
16:34 - talk about is the data that apis
16:36 - kind of exchange or that i guess
16:37 - anything over http really exchanges
16:40 - so right here we returned a python
16:42 - dictionary
16:43 - now this python dictionary is actually
16:45 - automatically converted to something
16:47 - known as a json
16:48 - javascript object notation as soon as it
16:51 - is returned from this function so fast
16:53 - api
16:54 - actually handles jsonifying all of our
16:57 - information
16:58 - so we can work with strictly python
17:00 - types in our actual api
17:02 - now this might seem a little confusing
17:04 - but whenever you are returning
17:05 - information from an endpoint it's kind
17:08 - of standard that
17:09 - that information is in the format of
17:11 - json now you don't really have to know
17:13 - what json is or what it looks like it's
17:15 - just a little bit of a different syntax
17:16 - than kind of a standard python
17:18 - dictionary
17:19 - and well you can just understand here
17:20 - that a fast api
17:22 - any data that you return from your
17:24 - endpoints is automatically converted to
17:26 - json
17:26 - and so whoever receives it on the other
17:28 - end may have data that looks a little
17:30 - bit different than what you returned
17:32 - just because it's all going to be
17:33 - converted from kind of vanilla python
17:35 - types to this json format
17:37 - now same thing when these endpoints are
17:38 - receiving information whenever they get
17:41 - like maybe a query parameter they get
17:43 - some request body
17:45 - that will come in as json and be
17:47 - converted into vanilla python types
17:49 - so we don't need to worry about kind of
17:51 - dj sonifying or
17:53 - jsonifying all of our data just make
17:55 - sure you understand
17:56 - that all of the data exchange kind of
17:58 - between apis is in the format of json
18:00 - we're just lucky here that fast api can
18:02 - convert all of this to kind of vanilla
18:04 - python types for us
18:06 - anyways that was a lot of talking i hope
18:08 - i didn't bore you guys too much with
18:09 - that
18:09 - but if you guys are beginners hopefully
18:11 - that helped you out let me know in the
18:12 - comments
18:13 - now let's continue working here and
18:14 - let's create a few more endpoints
18:16 - so i'm going to make a new endpoint here
18:18 - i'm going to say app.get
18:20 - and let's make this slash about
18:23 - now what this is going to do i'm going
18:24 - to say define about
18:27 - and oops if i can type about properly
18:29 - and here i'm going to just return some
18:32 - data
18:32 - and i will return is data
18:36 - and about just so that we have another
18:38 - endpoint so we can see kind of how this
18:40 - works when we look at the auto
18:41 - documentation so now my web server
18:43 - should have refreshed
18:44 - if i go to docs now notice i have
18:46 - another endpoint called about right and
18:48 - if i press on this i can press try it
18:50 - out
18:51 - i can press execute and when i execute
18:53 - that notice that we get our data
18:55 - we get about now same thing here if i go
18:57 - to slash about
18:59 - we can see that we have data about
19:02 - awesome
19:02 - so that is kind of two examples of using
19:04 - an endpoint that has the get
19:06 - method now we also can use an endpoint
19:08 - that has the post method the patch
19:10 - method and the delete method
19:11 - but before we do that i want to show you
19:13 - something known as path parameters
19:15 - and query parameters and to do that
19:17 - we're going to kind of get into our
19:18 - first example here
19:19 - so i want to treat this api that we're
19:21 - creating as kind of an inventory
19:23 - management system
19:24 - like the example i gave you from amazon
19:25 - so i'm going to say
19:27 - inventory i think i spoke that correctly
19:29 - is equal to and we're going to make this
19:30 - a dictionary
19:31 - now inside of here we're going to store
19:33 - a bunch of different like stock right
19:35 - all of the different items that we may
19:36 - have in stock
19:37 - and all of these items will have a
19:38 - unique id so the key in this dictionary
19:41 - will be their id
19:42 - so i'm going to say you know item with
19:43 - id1 the
19:45 - name of this item is a let's just say
19:48 - milk maybe we'll treat this like a
19:49 - grocery store or something the
19:52 - price of this item is i don't know how
19:54 - much is milk let's say 3.99
19:56 - and we will say maybe the expiry uh this
19:59 - could be
20:00 - actually i don't want to do like a date
20:01 - time thing right now let's do something
20:04 - else
20:04 - milk maybe we'll just say brand and
20:06 - actually i don't even know
20:07 - like a milk brand we'll just say uh
20:11 - regular now of course there could be a
20:12 - lot more information we're just kind of
20:14 - doing this
20:14 - simply for now because we don't need to
20:16 - go into anything like crazy advanced
20:18 - okay regardless we have name we have
20:19 - price we have brand and then we have an
20:22 - id
20:22 - for this item so what i'm going to do is
20:24 - set up an endpoint that can retrieve for
20:26 - us
20:26 - item information based on its id so what
20:29 - i'm going to do is say
20:31 - at app.get this is going to be a get
20:34 - method for this endpoint
20:35 - i'm going to say get hyphen item
20:38 - and then what i want is the user to
20:40 - actually pass me some id
20:43 - for this item and so what i'm going to
20:44 - do is put inside of curly braces
20:46 - item underscore id now what this means
20:49 - when i do this is that whatever is here
20:51 - could be anything right this item id
20:54 - could literally be anything and based on
20:55 - what this item id is
20:57 - i'm going to return something different
20:58 - from this endpoint so now i'm going to
20:59 - say define
21:00 - get underscore item and now what i need
21:03 - to do is define a variable
21:04 - to represent this item id so i'm going
21:06 - to say item
21:08 - underscore id needs to match the name
21:10 - here
21:11 - colon int now what this is is a
21:14 - type hint in python whenever you do a
21:16 - colon beside a parameter and then you
21:18 - define the type it's known as a type
21:20 - hint and the reason we do this in fast
21:22 - api is to tell fast api
21:24 - that this item id is supposed to be an
21:26 - integer so if you
21:28 - try to pass something that is not an
21:30 - integer
21:31 - to this endpoint for the item id it will
21:34 - automatically return to you we don't
21:35 - have to do this fast api will
21:37 - automatically return
21:38 - an error message saying hey this wasn't
21:40 - an integer it needs to be an integer and
21:42 - i'll show you how that works
21:43 - but this is our first example of what's
21:45 - known as a path parameter
21:47 - so now what i'm going to do is just
21:48 - return and i'm going to return
21:50 - my inventory at the item underscore id
21:54 - so let's just go ahead and have a look
21:56 - at this and see how this works
21:57 - i'm going to go to now the end point
21:59 - slash and this was get
22:00 - hyphen item and then slash one now when
22:03 - i do that
22:04 - notice it gives me all of the
22:05 - information relating to that item so i
22:07 - have the name which is milk
22:09 - price 399 brand regular awesome
22:12 - but now if i try to go to something that
22:13 - is 2 we get an internal server error the
22:16 - reason we get that is there is no item
22:17 - with id2 and so this line right here
22:20 - cause an error i'll show you how we
22:21 - fixed that after but just want to show
22:22 - you that and then finally if i try to do
22:23 - something like go to
22:25 - milk notice that we get this detailed
22:27 - error message
22:29 - saying hey this value is not a valid
22:31 - integer you need to give us
22:32 - a valid integer and even tells us the
22:34 - item id is the thing that is incorrect
22:37 - and so that is how you set up a kind of
22:38 - path parameter
22:40 - now you can also set up multiple path
22:41 - parameters maybe we have items that have
22:44 - the same id or maybe we just want some
22:46 - more information from this user
22:47 - this example is going to make too much
22:48 - sense but i'll just show you how this
22:50 - works we can take an item id
22:52 - and we can take something like i don't
22:54 - know maybe a name
22:55 - right now that we have this name here we
22:58 - would need to go inside of our uh
23:00 - what do you call it uh parameters here
23:03 - and define name
23:04 - colon string saying that okay this name
23:06 - right here this is expected to be a
23:08 - string
23:09 - and then what we could simply do is we
23:11 - could return
23:12 - inventory item id and maybe we could add
23:15 - something to this i'm trying to think
23:16 - how it would do this
23:17 - i can say dot update and
23:21 - actually no this isn't going to quite
23:23 - work uh there's not really a way for me
23:24 - to return the name
23:25 - string that's going to make sense so
23:27 - anyways i just want to show you we could
23:28 - take multiple path parameters
23:30 - so now if i go here and i refresh this
23:33 - so let's go get item 1
23:35 - slash test notice that this still works
23:38 - this is totally fine we took another
23:39 - path parameter in and well all is good
23:42 - so hopefully that kind of makes sense
23:43 - but this is how you take
23:44 - multiple path parameters inside
23:47 - of your kind of endpoint all right so
23:49 - sorry for the abrupt cut i had some
23:50 - issue with my editing software
23:52 - anyways what i'm going to show you now
23:53 - is how we can add some more detail to
23:55 - our path parameters so i'm going to
23:56 - remove name because we don't really want
23:58 - this one anymore
23:59 - so i'll get rid of this from the actual
24:02 - parameters
24:02 - and now what i'm going to show you is
24:03 - something known as path so we're going
24:05 - to import this function called path
24:07 - and what we can do is set our item id
24:10 - colon int
24:11 - equal to and then this path kind of
24:13 - function right here
24:15 - now what this is going to do is allow us
24:17 - to add some more detail or kind of some
24:19 - more enforcement or constraints
24:21 - on our actual path parameter so for
24:23 - example if i wanted to add a description
24:25 - to this path parameter to tell the user
24:27 - what this actually is like the
24:29 - information they should pass for item id
24:31 - i could say something like description
24:34 - is equal to and then i can write a
24:35 - description and for my
24:36 - description i'll just say the id
24:40 - of the item you'd like to view
24:43 - okay and then one thing here before i do
24:46 - description i always need to give a
24:48 - default value for this so i'm going to
24:50 - say none
24:51 - and then description the id of the item
24:53 - you'd like to view
24:55 - now i understand this might look a
24:56 - little bit weird but whenever you use
24:58 - these type of functions
24:59 - inside of the parameters for an endpoint
25:02 - you always have to start with the
25:03 - default value for this parameter
25:06 - so if item id wasn't passed what should
25:09 - this
25:09 - default to in this case it's going to
25:11 - default to none so if you don't pass an
25:12 - item id
25:13 - by default it will be none however
25:15 - you'll see since we're talking about
25:16 - path parameters here it is actually
25:18 - required that you pass an item id
25:20 - so we will never end up using the
25:22 - default value i know this might be a
25:23 - little bit confusing this will make more
25:24 - sense once we move on to the next thing
25:26 - which is the query parameters
25:28 - which can be optional regardless i'm
25:30 - going to put none here
25:31 - i'm going to say description equals the
25:32 - id of the item you'd like to view
25:34 - now if i go back here and let's just
25:36 - refresh this so get item one you can see
25:38 - all is good
25:39 - and if now i go to my docs you can see
25:42 - that says get item item id
25:44 - and notice that now there's actually a
25:45 - description it says the id of the item
25:47 - you'd like to view
25:48 - because we added that description inside
25:51 - of this kind of path
25:52 - thing right here now what we can also do
25:54 - is have some constraints on item id to
25:57 - make sure it's say greater than one or
25:58 - greater than some value
26:00 - so what i'm going to do is say gt this
26:02 - stands for greater than
26:03 - and then i'm going to say this is equal
26:05 - to and make it equal to zero
26:06 - so now what this is saying is okay this
26:09 - item id
26:10 - must be greater than zero now
26:13 - another few ones you can use here is lt
26:15 - that stands for less than that means
26:17 - this must be less than zero
26:18 - you can do l e that's less than or equal
26:21 - to and then you can do ge that's greater
26:23 - than
26:24 - or equal to and you can do kind of any
26:25 - combination of them so i could do
26:27 - maybe uh let's say g t zero
26:31 - and lt equals two so now the only valid
26:34 - thing you can pass
26:35 - is an id of one if you pass anything
26:37 - else you're going to get an error so
26:38 - let's test this out
26:39 - let's first just refresh this here and i
26:41 - don't think it actually tells me the
26:43 - greater than like enforcement here but
26:46 - if i
26:47 - go to slash get hyphen item
26:51 - slash two notice we get a problem it
26:53 - says message and sure this value is less
26:54 - than two
26:55 - right because uh this did not meet the
26:58 - less than constraint now if i do one
27:00 - all is good and if i try to do zero we
27:03 - get an error here saying no this is not
27:04 - valid make sure this number is
27:06 - greater than zero hopefully that makes
27:09 - sense but that is kind of the basics of
27:10 - using this path thing right here
27:12 - okay so now we've talked about path
27:14 - parameters the next thing to talk about
27:16 - is query parameters
27:17 - so a query parameter is something that
27:19 - comes after the question mark in a url
27:22 - so sometimes you'll see something like i
27:23 - don't know maybe let's go
27:25 - facebook.com and then some endpoint
27:27 - slash home
27:28 - and then there's something like question
27:30 - mark and it says like you know
27:31 - key equals whatever it says like
27:34 - redirect
27:35 - equals and then maybe some page and the
27:37 - thing is this is what's known as a query
27:39 - parameter so whenever you have a
27:40 - question mark
27:41 - and then you have some variable name
27:43 - equals and then some value this is a
27:45 - query parameter and you can have
27:46 - multiple of them
27:47 - let's just make the redirect like slash
27:49 - tim and then we would do an ampersand
27:51 - and then we would say
27:52 - you know msg equals fit
27:56 - and now we have two query parameters
27:57 - redirect which is equal to sim
27:59 - and msg which is equal to fail so how do
28:01 - we accept
28:02 - query parameters for our endpoint so i'm
28:05 - going to make a new endpoint here and
28:06 - show you how we do this
28:08 - i'm going to say app.get and i will make
28:10 - this
28:11 - get by name get by
28:14 - colon name and what this is going to
28:16 - accept is one query parameter
28:19 - and this query parameter is going to be
28:20 - the name of the item that we want to
28:22 - kind of retrieve and so what i'm going
28:24 - to do here is say name
28:26 - colon str now what this is saying is
28:29 - okay
28:30 - we are going to accept one query
28:31 - parameter named name
28:33 - so by default if it does not see this
28:36 - variable that you've defined as a
28:37 - parameter
28:38 - in the path to the endpoint it will by
28:41 - default be a query parameter so this
28:43 - means we are looking to accept
28:45 - a parameter called name which is equal
28:47 - to a string
28:49 - so i'll show you how this works but
28:50 - that's kind of what this means and now
28:52 - what we would need to do inside of here
28:53 - is we need to look through our inventory
28:55 - and find something that has the name of
28:58 - whatever the name is that it was passed
28:59 - so what i'm going to do is make a for
29:00 - loop here
29:01 - i'm going to say 4 item in inventory
29:05 - and actually this should be 4 id in
29:08 - inventory
29:09 - actually i can't call it id i'll call it
29:12 - item underscore id i'll say for item id
29:14 - in inventory if inventory
29:18 - at item underscore id
29:21 - at name is equal to the name
29:24 - then what we will do is return inventory
29:28 - at
29:29 - item underscore id otherwise so if we
29:32 - get to the end of this and that doesn't
29:33 - work we'll return
29:34 - something that says data
29:38 - not found okay so now we've created an
29:41 - endpoint it's taking one query parameter
29:43 - named name so let me show you how we
29:45 - would actually
29:45 - call this endpoint so if i go here now
29:47 - and i change this to be
29:48 - get what do we call this get by name so
29:51 - get by
29:52 - hyphen name and then i do a question
29:54 - mark and i say name
29:55 - is equal to and then milk notice that
29:58 - this works and we get the item that has
30:00 - the name milk now if i make this equal
30:02 - to something else i say name equals tim
30:04 - we get data not found because well there
30:06 - is no inventory item that has
30:08 - the name tim now if we don't pass any
30:10 - query parameter and we just do this
30:12 - it's telling us hey this field is
30:14 - required we need a query parameter
30:16 - you can't call this endpoint unless you
30:18 - have this query parameter name
30:19 - and we can add multiple query parameters
30:21 - as well we could add like price
30:23 - we could add a brand whatever if we
30:25 - wanted to do that
30:27 - and so anyways now let me show you how
30:29 - we can add more detail to our query
30:31 - parameters and how we can make them
30:32 - potentially optional
30:34 - so right now we put name in here it's
30:36 - equal to a string
30:37 - and this by default is a required query
30:39 - parameter but maybe we don't want this
30:41 - to be required maybe we want it so that
30:43 - you can call this endpoint without this
30:44 - query parameter
30:45 - in that case we would simply set this
30:47 - equal to none
30:48 - and now what this means is since this
30:50 - has a default value
30:52 - this query parameter is no longer
30:54 - required it automatically becomes
30:56 - optional so if i save this now and i go
30:59 - back
31:00 - and i just run this notice that this
31:02 - works we don't get an error anymore
31:04 - because now this query parameter name is
31:06 - strictly optional we can pass it but we
31:08 - don't have to
31:09 - and by the way it's recommended from the
31:11 - fast api docs that you do the following
31:13 - when you have an
31:14 - optional parameter you say from and
31:16 - typing
31:17 - import and then you're going to import
31:19 - optional and then you make
31:21 - this type here optional string
31:24 - now you don't have to do this you saw
31:26 - that this worked when we didn't do this
31:28 - but this is just going to give better
31:30 - auto completion for your editor
31:32 - when you decide to do this so optional
31:34 - is strictly for like yourself like the
31:36 - developer it just makes it
31:37 - easier to get better autocomplete when
31:39 - you're writing code here
31:40 - you do optional string to note that yes
31:43 - this parameter here name
31:44 - is indeed optional so if i run this
31:46 - you'll see when i save this
31:48 - this still works this is totally fine
31:50 - okay so hopefully that's clear that's
31:51 - how you do a query parameter just to
31:52 - show you quickly we could do another
31:54 - query parameter i could say
31:56 - let's just make this one test maybe this
31:57 - would be an int and maybe we want this
31:59 - one to be mandatory you do have to pass
32:01 - test so now that i've done this this
32:03 - means that if i refresh this now
32:05 - let me go here and just just hit enter
32:07 - oh what is this name
32:08 - string non-default argument falls ah
32:11 - okay it's actually a good error to run
32:12 - into let me discuss this
32:14 - so we just got an error here saying that
32:15 - a non-default argument
32:17 - came after a default argument so for
32:20 - fast api
32:21 - it does not matter the order in which
32:23 - you kind of write out these different
32:24 - parameters
32:25 - so it doesn't matter if you have like
32:27 - you know item id first or if you have
32:29 - name first if you have test first fast
32:30 - api will be able to figure it out
32:31 - doesn't matter what order you put it in
32:33 - however for python it actually gets kind
32:35 - of mad when you put something that's
32:37 - not or put something that is mandatory
32:40 - after something that's not mandatory and
32:41 - so the way to fix this
32:43 - is to well you could reorder this put
32:44 - test first when i
32:46 - say that i mean we could do test like
32:49 - that
32:49 - or what we can do is simply add
32:52 - an asterisk like this and then do a
32:55 - comma
32:56 - now if we do this everything will work
32:58 - essentially this is uh
33:00 - it's kind of hard to explain exactly
33:01 - what this does but this says okay
33:03 - let this function accept unlimited
33:05 - keyword arguments or unlimited sorry
33:07 - positional arguments
33:08 - and then the rest of them should be
33:09 - treated as keyword arguments i'm not
33:11 - really going to explain why that works
33:12 - but if you get some error saying hey you
33:14 - know your parameters are all ordered
33:15 - wrong
33:16 - just put an asterisk first and then this
33:18 - will fix it for you so if i go here and
33:20 - i refresh this now
33:21 - you can see it says field required we're
33:24 - looking for
33:25 - oops get by name message field required
33:28 - type
33:29 - query test okay sorry i'm just trying to
33:31 - decipher that so now it's all working
33:33 - but if i now say
33:34 - test is equal to 2 you can see we're all
33:37 - good because we
33:38 - passed the mandatory keyword argument
33:40 - and i can pass another keyword argument
33:41 - say name is equal to
33:43 - milk if i do this correctly press
33:46 - enter and uh what is it message value is
33:49 - not oh sorry this needs to be
33:50 - an ampersand not a question mark so let
33:53 - me try to fix this
33:55 - ampersand okay and now we're good now we
33:59 - get
33:59 - the item milk okay hopefully that's
34:01 - clear that kind of
34:03 - covers the uh what do you call it
34:04 - keyword arguments or
34:06 - sorry not keyword arguments query yes
34:08 - query parameters that's what it's called
34:10 - now let me just show you how we can
34:12 - combine query parameters
34:14 - and path parameters together so let's
34:16 - say get item by name we wanted to accept
34:18 - a path parameter as
34:20 - well as a few query parameters maybe we
34:22 - wanted the item id
34:23 - and we wanted the name i don't know why
34:24 - you'd want that but maybe you do
34:26 - so in this case we can say item
34:28 - underscore id
34:29 - and now what we need to do is make sure
34:31 - we have a variable called item id
34:33 - that is inside of the get name parameter
34:35 - it doesn't matter where we put it
34:36 - i'm just going to put it first i'm going
34:37 - to say item id colon int
34:40 - and now this will work we can now accept
34:42 - our item id as a path parameter
34:44 - our name as an optional keyword sorry
34:47 - optional query
34:48 - parameter and then test as a mandatory
34:50 - query param
34:51 - so now if i do this and i go here and i
34:53 - refresh
34:54 - we get not found but if i go slash
34:57 - one slash and then question mark notice
35:00 - this works right we're all good
35:02 - and yeah that's that's fine so hopefully
35:05 - that kind of
35:06 - illustrated to you how that works but
35:08 - that is how you can combine
35:09 - path arguments and query arguments okay
35:12 - so now that we've looked at query and
35:13 - path parameters we're going to move on
35:15 - and talk about
35:16 - the request body so oftentimes
35:19 - especially when you're trying to kind of
35:20 - add
35:20 - information to a database you're not
35:22 - going to be sending all of this
35:23 - information in query parameters or path
35:25 - parameters you're going to be sending
35:26 - like a bunch of information
35:28 - as what's known as the request body so
35:31 - i'm going to set up an
35:32 - endpoint here i'm going to say at
35:33 - app.post
35:35 - so a new method this time i'm going to
35:36 - say slash create
35:38 - item now what we're going to do is kind
35:40 - of change this a little bit
35:41 - so that we are now going to have an
35:43 - endpoint that allows us to create a new
35:45 - item
35:45 - in the database so i'm going to say
35:47 - define create underscore item
35:49 - and what i want to accept here is a
35:52 - request
35:52 - body i want some information relating to
35:56 - the item so i want the name of the item
35:57 - the
35:58 - price of the item and potentially like
35:59 - the brand of the item as well
36:01 - and so what i'm going to do here is say
36:02 - item and this is going to be equal to a
36:04 - type that we haven't defined yet which
36:06 - is called
36:06 - item so whenever i'm looking for a
36:08 - request body
36:10 - so i want something that is not a query
36:12 - parameter and i want something that's
36:13 - not a path parameter
36:14 - i need to set it equal to a class that
36:17 - inherits from something known as
36:18 - base model now i'll kind of discuss this
36:20 - in more depth in a second but we're
36:22 - going to go up to the top of our program
36:23 - and say from
36:24 - pi dantic import
36:27 - base model now what i can do is create a
36:30 - class i'm going to say
36:31 - class item this inherits from base model
36:34 - and i can now define in this class the
36:36 - kind of
36:37 - structure of the data that i am looking
36:39 - to accept
36:40 - as this item parameter right here for
36:43 - create item so i'm going to say well i
36:45 - want a name
36:46 - this is of type string i also want a
36:48 - price this is of type float
36:50 - and then what else do i want well i want
36:52 - a brand
36:54 - and this is going to be optional because
36:56 - i don't know if i
36:57 - i'm going to take a brand every time
36:59 - string equal to none so just like it
37:01 - worked for the query parameters and the
37:02 - path parameters
37:03 - if you want to make it optional you can
37:05 - add this kind of optional thing that's
37:06 - not required but it's good practice
37:08 - and then make it equal to none or make
37:10 - it equal to some default value
37:11 - and that now makes brand optional
37:14 - awesome so now that we have that i'm
37:15 - going to save this
37:16 - and what this can do uh let me actually
37:19 - just go here and let me just return kind
37:20 - of an empty dictionary for now just so
37:22 - we can see how this works
37:24 - but since this is equal to this class
37:26 - right
37:27 - this is now telling fast api that okay
37:29 - this is for the request body
37:31 - this isn't a query parameter so it's not
37:33 - expecting me to do something like
37:34 - question mark
37:35 - item equals and then type it all out it
37:37 - knows that i'm going to be sending this
37:39 - item information in the request body
37:41 - okay so i'm just going to go here and
37:43 - refresh this and let's go and see if if
37:47 - something went wrong okay looks like
37:48 - everything is good so now if we're
37:50 - looking at our documentation we see we
37:51 - have this new endpoint called create
37:53 - item
37:54 - so look it says that the request body is
37:56 - required we look for a name
37:58 - a price and a brand uh and if we wanted
38:00 - to try this out we could although right
38:01 - now it's not really going to work it's
38:03 - not going to do anything
38:04 - although if i press try it out and i i
38:06 - just i can just send this
38:08 - and i press execute notice that we're
38:10 - just getting kind of an empty
38:11 - response because we haven't typed
38:12 - anything out so what i want to do now
38:14 - though is i want to take this item
38:16 - and i want to actually insert it into
38:17 - the inventory
38:19 - and what i can do is rather than like
38:21 - trying to create a structure that looks
38:23 - like this
38:23 - i can just insert this actual item
38:26 - itself
38:27 - which you'll see in one second so what
38:29 - i'm going to do here is now change
38:30 - create item
38:31 - so it also accepts an id so i want an
38:34 - item
38:34 - underscore id the reason i want an item
38:37 - id is because if i'm going to insert
38:38 - this item
38:39 - well i need an id associated with it so
38:41 - now i also need an item id here so i'm
38:43 - going to say item id
38:44 - colon int now this is going to be
38:46 - assumed to be a path parameter because
38:48 - it's in the path
38:49 - right so we have our item for the
38:51 - request body and we have our item id
38:53 - that is a path parameter awesome so now
38:56 - the first thing i'm going to do
38:57 - is check to see if this item id already
39:00 - exists i'm going to say if item id
39:02 - is in and then this would be inventory
39:06 - let's go here then what i want to do is
39:08 - just return
39:10 - and we'll say error item
39:15 - already exists or item id
39:19 - already exists great now if that's not
39:22 - the case we can just add this item
39:24 - into uh the inventory so what i could do
39:26 - is say something like
39:27 - inventory at and then
39:30 - item underscore id is equal to and i
39:34 - could say name
39:35 - is equal to item.name i could say
39:39 - brand is equal to oops
39:42 - to item dot brand and then
39:46 - price is equal to item.price now we'll
39:50 - leave it like this for a second but i'll
39:51 - show you kind of a better way to do this
39:52 - but i just want to show you this how you
39:54 - access all of the fields from this item
39:56 - right you just use
39:58 - dot name dot brand and dot price
40:01 - like that and now we would have added
40:03 - this item to the inventory and now what
40:05 - i'm going to do is return a response
40:07 - and what i'm actually going to return is
40:08 - just inventory at item id
40:11 - just to indicate that hey this was all
40:12 - good now your item is in
40:14 - the inventory and we just return the
40:15 - same item back to them so now i think
40:17 - that's all working okay good so let's
40:19 - refresh this
40:20 - uh just sometimes it glitches out and
40:22 - you have to like press enter in your
40:23 - terminal to like refresh the web
40:26 - web app web service whatever it is
40:28 - anyways we're going to have create item
40:30 - now so if i go to create item
40:31 - what i can do is say try it out notice
40:33 - that now we have a required item id
40:35 - since this is required what i'm going to
40:37 - do is pass
40:38 - an id of 2 i'm going to say name and
40:41 - we'll make this name equal to
40:44 - eggs this price will be like 4.99
40:47 - and then the brand well we actually
40:48 - don't need the brand so let me just
40:49 - remove that
40:50 - and now let's press execute so now when
40:53 - we do this
40:54 - notice that we get our response body
40:55 - saying name eggs brand null
40:57 - price 499. that's now added into the
41:00 - database so now if i go to get item
41:02 - and i try to get item of id two
41:05 - and i press execute you're gonna see oh
41:08 - that we get this issue and sure the
41:09 - value is less than two
41:10 - so obviously we need to fix that we need
41:12 - to make it so we're no longer checking
41:13 - if the uh
41:15 - what is it if we're less than two
41:16 - because we don't really want that
41:17 - constraint
41:18 - okay so if i save this now and then i go
41:20 - back you'll actually see that if i
41:23 - try to run this we're not going to get
41:25 - anything the reason we don't get
41:26 - anything is because
41:28 - this these items are being stored in our
41:30 - memory so as soon as this server
41:31 - refreshes
41:32 - any items that we added are
41:34 - automatically going to disappear
41:35 - hopefully that kind of makes sense but
41:36 - since it's just a python dictionary it's
41:38 - not persistent
41:39 - it resets every time the server restarts
41:41 - and so that item we just added is now
41:43 - gone
41:43 - but i promise you it would work now we
41:45 - would be able to get that item
41:47 - but as i was saying this probably isn't
41:48 - the best way to insert items because
41:50 - well
41:50 - i'm just kind of like copying stuff that
41:52 - we already have
41:53 - what i should do instead is just insert
41:56 - the item
41:57 - object into the dictionary and then if i
42:00 - actually go ahead and return this this
42:01 - will still work the exact same way
42:03 - because fast api is smart enough to take
42:05 - this object
42:06 - and convert it into json since it
42:09 - inherits from base model
42:10 - so we don't need to do anything fancy to
42:12 - convert this to a python dictionary we
42:14 - can just
42:14 - return the item itself and this will
42:17 - still work
42:17 - but what that means is that now if we're
42:19 - going to be inserting kind of item
42:21 - objects into our dictionary
42:23 - we need to change the way that we're
42:24 - looking up items so
42:26 - rather than saying if item or if
42:28 - inventory item id at name
42:30 - we're going to say if inventory item id
42:33 - dot name
42:34 - equals equals name then return inventory
42:37 - at item id
42:38 - and now that should be good and all
42:39 - should be working but
42:41 - we have one problem here we need to
42:43 - change uh this inventory object right
42:45 - here to be an instance of
42:47 - item or we can just remove it and have
42:49 - an empty
42:50 - inventory to start which is actually
42:51 - what i'm going to do
42:53 - hopefully that kind of makes sense i
42:54 - know i'm going like kind of fast through
42:56 - this
42:56 - but there you go that's how you create a
42:58 - new item and that's how you take in
43:00 - a request body so let's just test this
43:03 - out let's go here and just
43:05 - refresh the docs okay now let's go to
43:09 - create item let's make an item
43:11 - so let's try it out let's say item id 1.
43:14 - let's just make this eggs
43:17 - 2.99 again we won't have a brand here
43:21 - execute looks like everything is good we
43:23 - inserted this item
43:24 - so now let's do another item let's do
43:26 - id2 let's make this milk
43:29 - okay let's make our price 4.99
43:33 - and we can add a brand for this one
43:36 - let's say brand
43:38 - is equal to large and let's go execute
43:42 - and there you go we got that item so now
43:44 - if we go here to get item by name
43:47 - let's look for an item named milk
43:50 - notice that we do get that item let's
43:52 - look for an item named eggs
43:54 - notice that we get that item and now
43:56 - let's go look by id
43:58 - and if we go for id 1 we can see we get
44:00 - eggs
44:01 - if we go for id 2 execute we see we get
44:05 - milk all right so that is awesome that
44:07 - is all
44:08 - working next thing i'll show you is how
44:10 - we do a uh how we actually update an
44:12 - item
44:13 - so if i say app dot and then i'm gonna
44:15 - use put put is to update right i'm gonna
44:17 - say slash
44:18 - we'll call this update item and then
44:21 - what we'll take here just to kind of mix
44:23 - it up is actually
44:24 - a query parameter so the query or sorry
44:27 - not a query parameter we'll take a path
44:29 - parameter so i'm going to say item
44:30 - underscore id and i guess we're not
44:32 - really mixing it up because we just did
44:33 - it here but regardless
44:35 - i'll call this update underscore item
44:38 - and what we'll take here
44:39 - is item underscore id
44:42 - that's an int and then we want a request
44:45 - body as well and so i will say item
44:47 - and i'll make this equal to item so now
44:51 - all i'm going to do here is the exact
44:52 - same thing i did previously i'm going to
44:54 - say if item id and inventory
44:56 - literally have the exact same so if item
44:58 - id
44:59 - in inventory oh sorry not in inventory
45:02 - then i'll say error item
45:03 - id does not exist because notice we're
45:07 - updating an item here not creating a new
45:08 - one
45:09 - so item id does not exist and then
45:12 - if the item did exist what we'll do is
45:14 - just override that item with
45:16 - the new what do you call it the new item
45:19 - that was just passed to us and in fact
45:21 - i'll show you kind of a fancier way to
45:22 - do this
45:23 - i'm going to say inventory item id dot
45:26 - update with item so what this dot update
45:30 - will do
45:30 - is take in the kind of dictionary or
45:33 - json that is
45:34 - this item and it will use it to update
45:37 - the item that we have
45:39 - now what that will mean is that if we
45:41 - don't pass
45:42 - name price brand so on and so forth
45:45 - it will not change the name and the
45:48 - price and all of those other things so
45:49 - if we just passed
45:51 - name then it would only update the name
45:53 - of this item
45:54 - if we just pass price it would only
45:56 - update the price if we passed any
45:57 - combination of these would update
45:59 - any combination of them the only problem
46:01 - however is though
46:02 - since we have this equal to item that
46:04 - means that it's requiring us to take
46:06 - name and take price in so instead what
46:09 - i'm going to do is make a new class
46:11 - and call this update item and all i'm
46:14 - going to do is change these all to be
46:15 - optional so i'm going to say equals none
46:18 - equals none and then we'll make this
46:22 - optional like that so let's go
46:26 - optional like that okay so now this
46:29 - should be good we're going to change
46:30 - this type now to be
46:33 - update item like that okay so hopefully
46:36 - you guys are clear but this should just
46:37 - update the item for us so now we're
46:39 - going to have to go and add a few
46:40 - sample items so let's refresh this here
46:43 - notice that now we have this update item
46:45 - which is a put request so let's just go
46:47 - to
46:48 - our post and let's create an item item
46:49 - id 1 we can just make this
46:52 - milk again price of 299 and then we
46:56 - won't include a brand
46:57 - okay so now if i execute this i think
46:59 - we're all good nice so let's now
47:01 - update this item so to update this item
47:04 - what i'm going to do is try this out
47:05 - item id1 and now i will only include a
47:08 - brand
47:09 - so if i only include a brand now and i
47:11 - make this equal to
47:12 - large and i press execute internal
47:15 - server error what is the error here
47:17 - item object has no attribute update oh
47:20 - okay sorry guys i had a little bit of
47:22 - mistake here i kind of was thinking that
47:24 - this
47:25 - inventory item id is equal to uh
47:28 - a python dictionary which we could use
47:30 - the update method on it's not equal to a
47:32 - python dictionary
47:33 - so instead we're going to have to update
47:35 - doing something a little bit differently
47:36 - what i'm going to do is say inventory at
47:38 - item id dot name
47:40 - is equal to and then this is going to be
47:42 - item.name
47:44 - but we'll say if item.name
47:47 - does not equal none else we won't do
47:50 - anything so actually
47:52 - i think we'll have to change this a bit
47:54 - okay i'm just going to say
47:56 - if item dot name does not equal none
48:01 - then inventory at item id dot name is
48:04 - equal to
48:05 - item dot name and then we'll do the same
48:07 - thing for brand and the same thing for
48:09 - price
48:09 - kind of an annoying way to do the update
48:11 - here but just what we have to do so i'm
48:12 - going to say item.price
48:15 - item dot price item
48:19 - dot price and then same thing here
48:22 - if item dot brand
48:27 - and then brand and then brand
48:32 - okay so again the reason i have to do
48:33 - this is because i thought it was a
48:34 - python dictionary thought i could use
48:35 - that update
48:36 - update command but since it's not a
48:37 - python dictionary it's an instance of
48:39 - this object we have to kind of manually
48:42 - update it and so what i'm going to do
48:43 - now
48:44 - is oops i guess running that's not
48:45 - really going to do anything
48:47 - let's rerun our server here let's go and
48:49 - let's refresh we're going to have to
48:50 - create an object so let's just make one
48:52 - fast
48:53 - one we'll say this is of type
48:56 - milk say price 299
49:00 - and then we won't include a brand okay
49:02 - let's go execute
49:04 - uh all good what does it say executing
49:06 - property name enclosed in double quotes
49:08 - um okay so the reason that was uh
49:11 - glitching out was i had a comma here and
49:13 - i can't have a comma at the end if i
49:14 - don't have another value after so
49:15 - anyways we just created the item you can
49:17 - see we have name price
49:18 - and brand is equal to no okay so now
49:21 - that we have that uh what i'm going to
49:23 - do is try to update this item
49:24 - still not quite sure if this is going to
49:25 - work but let's go to item id
49:27 - uh what was the id we inserted i think
49:29 - it was just one okay one
49:31 - and now let's just include a brand so
49:34 - we're going to say brand and we'll just
49:35 - make this equal
49:36 - to large and let's execute and now
49:39 - notice that we updated the brand here
49:41 - and we made it large so now if we were
49:42 - to change this
49:43 - and we remove brand and we make this
49:46 - name
49:46 - and we change the name which is supposed
49:48 - to be lowercase
49:50 - to be eggs because right now i think
49:52 - it's milk yeah it is milk
49:54 - and we execute this notice that now
49:56 - we've updated the name of this
49:57 - to be eggs and so that is how you can
49:59 - update an item
50:00 - and now if we go and we look for an item
50:02 - so get item by name we can look for the
50:04 - name
50:05 - eggs and notice that we are getting
50:08 - eggs now of course we could do this the
50:11 - manual way
50:12 - get underscore item or get what is it
50:15 - hyphen
50:16 - item actually what did i call this i
50:18 - want to make sure i don't mess this up
50:20 - get by name okay get by name and then
50:23 - this is question mark and the name that
50:26 - we pass
50:26 - is name equal to eggs
50:30 - it works the manual way as well awesome
50:32 - okay so that is kind of it for the
50:34 - put and for the post now let's do one
50:37 - for delete
50:38 - okay so to do the delete method is
50:40 - pretty straightforward we're going to
50:41 - say at app
50:42 - dot delete we're going to say slash
50:44 - delete hyphen
50:46 - item and then we'll just take an item id
50:48 - actually let's take the item id as a
50:49 - query parameter just to do that
50:51 - we'll say define delete underscore item
50:55 - we're going to say item underscore id
50:58 - this will be an int and we'll make this
51:01 - equal to
51:02 - a query and just add some kind of info
51:05 - here i'll say
51:06 - dot dot and to make sure that this is
51:08 - going to be required
51:10 - not optional and then i will say
51:12 - description
51:13 - is equal to the id
51:17 - of the item to delete
51:21 - and then i will say greater than equals
51:24 - zero so that it must be greater than
51:26 - zero okay now what i can do is check if
51:28 - this item exists so i'll say if
51:31 - item id is in the inventory
51:35 - then we can delete it so we could do
51:37 - this other way actually i'll say if item
51:39 - id
51:39 - not in inventory then what we want to do
51:42 - is
51:43 - return error
51:47 - id does not exist okay
51:50 - otherwise we will simply say dell
51:53 - inventory at and then item underscore id
51:57 - awesome so now this endpoint should be
51:59 - working so now let's go to our docs
52:02 - so let's go slash docs now notice we
52:05 - have this
52:05 - endpoint for delete it's automatically
52:07 - documenting all of it right another
52:08 - great thing about fast api
52:10 - if we go to create item we can make an
52:12 - item so item id one
52:14 - let's just leave it default we'll just
52:15 - we'll just execute one with name string
52:17 - and now let's delete this item
52:19 - so first thing let's just make sure it
52:21 - exists so item id
52:22 - try it out one we get this item okay
52:25 - now if we go to delete and all we do is
52:29 - try it out we pass item id 1
52:31 - and execute this response body no oh
52:35 - because we didn't return anything from
52:36 - here that's fine
52:37 - but it should have deleted the item
52:39 - because now if i go and look for
52:41 - this item so i go here to get item by id
52:44 - and press execute
52:45 - we get an internal server error because
52:47 - well we don't have that item
52:49 - now let me just return something here
52:50 - let me just return
52:52 - you know success
52:56 - item deleted or something okay item
52:59 - deleted
53:01 - exclamation point great okay so that's
53:03 - good we now have the update
53:05 - create delete and then get by name and
53:08 - get by id
53:09 - all right so now we're nearing the end
53:10 - of this tutorial and i'm going to show
53:12 - you how you can actually return
53:13 - different status codes
53:15 - from these uh these endpoints because
53:17 - you can see here that for example i'm
53:19 - returning like some data that says error
53:21 - id does not exist
53:22 - but the status code when i return this
53:24 - is still going to be whatever the
53:25 - default status code of delete is
53:28 - and that's no good now if you're
53:29 - unfamiliar with status codes every
53:30 - single time you call an http endpoint
53:33 - it will return to you some status code
53:35 - that indicates kind of what happened
53:36 - the default is 200 that stands for ok
53:39 - 201 is created 404 as you've probably
53:41 - seen before is not found
53:43 - there's a bunch of status codes you
53:44 - don't have to memorize them obviously
53:46 - but i'll show you how you can return
53:47 - like an
53:48 - error status code rather than just
53:50 - returning some data
53:51 - that has the same status code as
53:53 - whatever the default you know return
53:55 - status code of delete
53:56 - is and the way you do that is you go up
53:57 - to fast api you
53:59 - import http in all capitals
54:03 - exception like that and then you import
54:05 - something called
54:06 - status all right so import both of those
54:09 - now i'm going to go
54:10 - to a place where we have some error
54:12 - message so here it's saying data not
54:13 - found
54:14 - and rather than returning data not found
54:17 - when you want to actually give some type
54:19 - of error message with a different status
54:20 - code
54:20 - you just raise a python exception so if
54:23 - you raise
54:24 - exception and this exception should be
54:25 - http exception
54:28 - what you can do is indicate the status
54:29 - code so you say
54:31 - status code like that make it equal to
54:33 - whatever code you want
54:35 - in this case i can say something like
54:36 - 404 or
54:38 - i can use the status dot then http
54:41 - underscore
54:42 - 400 or underscore 404 underscore not
54:46 - underscore found i think that's what
54:47 - it's called so this kind of status
54:49 - module here
54:50 - has like the actual names of all these
54:52 - status codes in them
54:53 - if you'd prefer to type it out this way
54:55 - when you do status dot http underscore
54:58 - 404 not found
54:59 - this whole thing is just equal to 404 it
55:02 - just makes it easier to kind of read it
55:03 - out
55:04 - anyways i just want to show you that i'm
55:05 - not going to use status but you guys can
55:07 - use status if you want what's known as
55:08 - like the enum for each
55:10 - value and then you can say let me check
55:13 - here in my cheat sheet i believe it's
55:15 - detail
55:16 - and you can give the detail of why this
55:18 - this error was returned so i can say
55:20 - detail and say
55:22 - item id not found or something like that
55:26 - or
55:26 - item name not found okay so let's just
55:30 - copy this
55:31 - and let's paste this in all the other
55:32 - places we have an error so rather than
55:33 - raising this error
55:35 - we'll say item id
55:39 - already and then exists and
55:42 - i don't know what status code we should
55:43 - use for this one i'm just going to use
55:45 - 400 i think 400 stands for bad request
55:48 - i'm not too fussed about doing this all
55:49 - properly i just i'm trying to show you
55:51 - how we can raise these errors
55:52 - and then let's raise another one here so
55:54 - rather than item does not exist
55:56 - we'll just do 404 we'll say item id
56:00 - does not exist and then do we have any
56:04 - more errors
56:04 - this one as well so we can just copy
56:06 - this exact same thing
56:08 - so raise http error let's copy it here
56:12 - and there we go we are now good and just
56:13 - to give you an idea of what's going on
56:15 - when we do this in the back end so in
56:16 - fast api it's kind of
56:18 - waiting for one of these exceptions to
56:20 - be raised when it's raised it will
56:21 - automatically return the equivalent kind
56:23 - of http response so that we don't have
56:26 - to do it manually instead we can just
56:27 - raise an exception
56:28 - so let's now go here and let's refresh
56:30 - our docs
56:31 - i'm going to have to press enter in here
56:33 - okay reloading that's all good
56:36 - now what i'm going to do is go to get
56:37 - item let's try to get an item id1
56:40 - when we do this oh i forgot we haven't
56:43 - fixed get item by id okay let's
56:44 - let's not do that one let's get item by
56:46 - name let's look for an item let's look
56:48 - for eggs
56:49 - when we do this notice we get detail
56:51 - item not found and our response code was
56:54 - 404 as opposed to 200 which we would
56:56 - have gotten previously
56:58 - all right so hopefully that kind of
56:58 - makes sense let's go and try to create
57:01 - an
57:01 - item so let's go try item one let's just
57:04 - execute that
57:06 - okay let's try to do it again when i try
57:08 - to do it again you're gonna see here
57:09 - that we get detail item id already
57:10 - exists and we get status code
57:12 - 400 telling us hey this was a bad
57:15 - request you can't do that right
57:17 - now if i go to update item and i try to
57:19 - update item id 2 let's go like that
57:21 - again same thing item id does not exist
57:24 - we're getting the correct
57:25 - response all right so i think with that
57:28 - that's actually going to wrap up
57:29 - this video hopefully this gave you and
57:31 - i'm just going to zoom out so you guys
57:32 - can look at all this code here on kind
57:34 - of one screen
57:35 - hopefully this gave you a decent idea of
57:36 - how to get started with fast api
57:38 - i know i went into like a lot of
57:40 - probably unnecessary detail for a lot of
57:41 - this stuff
57:42 - we just want to make sure you guys
57:43 - understand the difference between the
57:45 - path query and kind of request body
57:47 - arguments or parameters
57:48 - that's very very important and once you
57:50 - understand that like you saw here we
57:52 - created pretty well fully functioning
57:53 - api
57:54 - in not very many lines of code now
57:56 - obviously you would want to change this
57:57 - inventory to be an actual database
57:59 - but if you're just working on something
58:00 - simple and want to get it up and running
58:02 - fast
58:02 - fast api is a great choice and yeah i
58:05 - mean i hope this helps you understand
58:06 - the framework if it did make sure to
58:07 - leave a like
58:08 - subscribe to the channel i will see you
58:10 - in another youtube video