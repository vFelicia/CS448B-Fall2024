00:00 - hey guys and welcome back to another
00:02 - Java tutorial video now in this video
00:05 - I'm gonna be talking about sets and
00:07 - lists now sets and lists are from
00:10 - something known as the collection
00:13 - interface from Java
00:14 - I believe that's what it's called
00:15 - someone correct me if that's wrong but I
00:17 - think that's the name and they are
00:19 - fairly complicated now I'm just gonna
00:22 - talk about really think the basics of
00:23 - them there's a lot more to do with sets
00:26 - and lists I know I'm probably gonna get
00:29 - some comment from some guy who says wow
00:31 - you really you didn't talk about a lot
00:32 - of this you but I can't explain all of
00:35 - it to you guys right now because it's
00:37 - very difficult to understand if you
00:38 - don't know a lot about data structures
00:40 - which in our case we don't so I'm just
00:43 - going to talk about what a list is what
00:45 - a set is quickly and a very basic
00:46 - standard implementation of them now the
00:50 - reason I'm doing this is because
00:51 - whenever you're programming stuff like a
00:53 - lot of Java throws you watch probably
00:54 - won't talk about these because they're
00:57 - really complicated but you're gonna need
01:00 - them to do certain things so for example
01:02 - with an array what I talked about before
01:04 - how you could like you had to set the
01:07 - size of the array like you had to know
01:08 - how many elements you wanted you don't
01:10 - need to do that with a set or with a
01:13 - list and that's the main advantage of it
01:16 - because a lot of times are gonna be
01:17 - adding things into per say a list or set
01:19 - and we don't know how many things you're
01:20 - gonna be adding so we can't define like
01:23 - an array of that linked if that makes
01:25 - sense to us
01:26 - so what should I should just get started
01:28 - we're gonna talk about sets first and
01:29 - then we'll move into lists so I'm just
01:31 - gonna create a set and I'm just gonna
01:33 - type it out and then kind of explain
01:34 - exactly what I'm doing I'm just gonna
01:36 - call this set t equal to new new hash
01:43 - set and integer okay so this already
01:49 - probably looks confusing and if you're
01:51 - typing a sigh with me you're getting
01:52 - these red lines now what we should do to
01:55 - get rid of these red lines is we just
01:56 - have to hover over them and click import
01:58 - set by like clicking on whatever it says
02:02 - there if you don't have we're not using
02:03 - this IDE just literally type import Java
02:06 - dot util dot set and for hash set same
02:08 - thing we're gonna click on it and import
02:10 - it just because this isn't like built-in
02:12 - to me
02:12 - in the java functionality alright so we
02:17 - have a set now what is a set how do we
02:20 - create it
02:20 - well a set is a collection of unordered
02:24 - elements that are unique meaning that a
02:26 - set cannot contain the same element
02:29 - twice and it doesn't know where that
02:31 - element exists so you can kind of think
02:33 - of a set is just like a big bubble and
02:35 - you kind of just throw things into it
02:36 - and it doesn't really know where they
02:39 - are
02:39 - it just knows that they exist there now
02:41 - you also have to understand that can
02:43 - only be unique things so for example
02:46 - I've created this integer set and this
02:48 - is the way that you do it so you type
02:50 - the keyword set in these little like
02:53 - greater than sign less than sign
02:54 - whatever you wanna call it tags if you
02:56 - talk in HTML type integer and I have the
02:59 - name T and I'm setting that equal to new
03:01 - hash set now you don't have to
03:03 - understand what a hash set is just know
03:05 - that it's like the standard
03:06 - implementation of a set and then same
03:09 - thing the types are integer and then
03:10 - these brackets here now inside of these
03:12 - brackets if you had another set you had
03:14 - created like say I said created a set
03:16 - called like W I could put W in here and
03:20 - assuming it had any elements in it this
03:23 - set would get all of the elements from W
03:25 - and start with that and then you could
03:26 - add things into it and whatnot okay so
03:29 - to add things to set I'm just gonna do
03:31 - this we'll go through and see how it
03:33 - works alright you simply type dot add so
03:35 - I'm gonna say t dot add and this case
03:37 - I'm gonna add five and we'll just copy
03:40 - this and we'll add like a few different
03:41 - numbers into our set so just K so it's 7
03:44 - and 1 5 again and it will add 9 ok now
03:49 - what I'm gonna do is I'm just gonna
03:50 - print this set out to show you what it
03:51 - looks like now remember I said unordered
03:54 - collection of unique elements
03:56 - okay so let's print this out and you can
03:58 - see that we get 5 7 & 9
04:00 - and notice that this ad right here
04:03 - actually didn't do anything and that's
04:05 - because since we already have a 5 in our
04:07 - set when we try to add another 5 to it
04:10 - since it already exists it doesn't care
04:12 - and it just doesn't add it alright now
04:15 - I'm gonna add another element in this
04:17 - case let's add like negative negative 0
04:19 - negative 8 alright as our element and
04:22 - you can see that we don't have any
04:25 - specific order now see when I printed
04:27 - this like I had added five seven nine
04:29 - and negative eight so you think that
04:31 - should be the order that we get it or it
04:33 - should come in some sorted order or
04:34 - something like that that doesn't happen
04:35 - with a hash set okay a standard hash set
04:38 - and that's just because again we're just
04:41 - a bubble we just know that things exist
04:42 - we don't care where they exist or how
04:47 - many times they exist we just care if
04:49 - they exist now to see if something
04:52 - exists in a set and this is typically
04:53 - something you want to do like this is
04:55 - the main operation checking if something
04:57 - exists that's why you use a set you can
05:00 - type T dot contains or like your set
05:02 - name dot contains and then any element
05:05 - in here that you want so in this case I
05:07 - can do like if v is contained in the set
05:10 - and it's gonna be able to tell me that
05:11 - really fast now I can't really explain
05:14 - to you why sets are so fast but just
05:18 - know that whenever you're looking for
05:19 - something in a set you can do that very
05:21 - quickly like very fast like in constant
05:24 - time it doesn't matter how big the set
05:26 - is the set can be two million elements
05:28 - or it could be five elements it'll take
05:30 - you the same amount of time to look if
05:31 - something exists in the set okay
05:34 - and same thing with adding and removing
05:35 - things from the set that happens almost
05:37 - instantly as opposed to with arrays the
05:40 - larger the array gets the longer it's
05:41 - gonna take us to look through and find
05:43 - certain elements okay just we have to
05:45 - understand that so let me in there let's
05:47 - create a variable I'm just gonna call
05:48 - boolean X is equal to this and what I'm
05:53 - going to do is I'm simply just gonna
05:54 - print X now to see if that is contained
05:57 - and in this case yes it is v is
06:00 - contained again if I do something like 0
06:02 - then obviously we get false it's not in
06:05 - there to remove something we can type T
06:08 - dot remove our set name dot remove it
06:11 - and then whatever the element is that we
06:14 - want to remove so in this case if I want
06:15 - to remove like 9 from my set I would do
06:17 - that then if I print my set so in this
06:20 - case T we just get 5 7 negative 8
06:23 - because we removed 9 those are kind of
06:26 - like the standard operations to I'm
06:29 - gonna try and think if there's any other
06:30 - ones okay so there's one more or there's
06:33 - a few more but I don't know which ones
06:34 - are important you can clear an entire
06:36 - set by just doing dot clear so just
06:38 - simply remove everything
06:39 - from it like that to see if a set is
06:43 - empty you can do dot is empty and this
06:46 - will literally just tell you if it's
06:48 - empty or not to get the length of the
06:50 - set you can do dot size and this will
06:53 - tell you how many elements so in this
06:54 - case value size change this to an int
06:58 - and just print X here then we get a size
07:03 - of three so like again if we had nothing
07:05 - in there the size would be zero so is
07:07 - empty in that are kind of like similar
07:09 - in the sense that you can just check by
07:11 - the size and yeah so that's a hash set a
07:15 - hash set is like the standard set and
07:18 - that's the way that it works way I
07:20 - explain it to you now they also have a
07:22 - tree set and we also have a linked hash
07:27 - set now whenever you use these things
07:30 - they're gonna pop up here I'm not really
07:32 - going to talk about what these do too
07:33 - much I'm just gonna kind of show you the
07:35 - way a tree set works now at reset is
07:38 - similar to a set in the sense that you
07:39 - can only have the hash set sorry that
07:42 - you can only have unique elements but
07:45 - these are actually ordered and they're
07:46 - ordered in a tree data structure you
07:48 - don't have to understand what this means
07:49 - just know that it's like it shows up
07:51 - ordered what's what's our problem here
07:53 - just want to read this error tree set
07:56 - cannot be resolved to a type mmm
07:59 - interesting okay Tresa well let's just
08:00 - try this
08:02 - that still worked okay so anyways I I
08:06 - don't know why I was showing me there
08:07 - but Theresa is gonna actually give us an
08:09 - order so if I type T like this you can
08:14 - see that we actually have an order for
08:15 - the set now so negative eight five and
08:17 - seven now like a ray is like we can't
08:20 - just index the set and we can't just say
08:22 - like T zero like that doesn't work doing
08:26 - that like we were able to do with the
08:28 - race but when we print it out or when we
08:30 - look through the set it maintains this
08:32 - border in like a tree functionality that
08:36 - I can't really explain to you now linked
08:38 - hash sets are this so linked hash set
08:42 - again we're gonna have to import this up
08:44 - there it's linked hash set and this is
08:46 - similar to a basic set it just faster on
08:49 - certain operations so I'm not like I
08:52 - don't really want to talk about the
08:53 - too much because I feel like I'm already
08:54 - confusing you guys but just understand
08:56 - if maybe you know a bit about like
08:58 - operations and speed and time complexity
09:00 - you have a link Tosh set a regular hash
09:02 - set and a trie hash set or tree sets or
09:05 - whatever I typed okay all right so
09:07 - that's enough for sets don't worry if
09:10 - this is a bit confusing like we're we're
09:12 - not gonna be using these too much I just
09:14 - want to show you cuz I feel like you
09:15 - guys are gonna need to do this for some
09:17 - of your projects or whatnot if you're
09:18 - learning this for a reason now we also
09:21 - have lists now lists these are easier to
09:23 - understand don't worry but there is
09:25 - again two types so to create a list what
09:27 - we're gonna do there if you can type
09:28 - array list we're gonna give it a type in
09:31 - this case I'm just gonna give them an
09:32 - integer type and notice how I'm not
09:35 - typing in time typing integer just
09:37 - that's important that we need to use
09:39 - integer here instead of int okay so a
09:41 - rayless integer and call this 20 again
09:43 - equals new array list and we'll type
09:47 - integer and we'll put brackets and there
09:51 - we go
09:51 - now we're gonna have to import this so
09:53 - import ray list up there and we now
09:56 - having a little issed and what a list
09:58 - allows us to do is it's you can almost
09:59 - think of it as the exact same thing as
10:01 - an array except it's a bit slower and it
10:05 - can change sizes so we can add things to
10:07 - it we can remove things from it and if
10:09 - we gets like the end of the array or the
10:11 - end of the list sorry we can just add
10:13 - another element into it it doesn't
10:15 - matter so we can have like it
10:16 - dynamically sized array these have
10:19 - pretty much identical properties to the
10:22 - set so to add things you can do t dot
10:24 - add and you can add like in any element
10:28 - you want so have like one right okay
10:30 - that works fine to remove things T dot
10:32 - remove now to index things because just
10:36 - like an array we can actually index
10:37 - things with lists because this is gonna
10:38 - care about the position it's not going
10:41 - to just care that it exists like a set
10:44 - what we can do is we can do T dot get
10:47 - and then we can give an index right so
10:49 - but even it's showing he's always saying
10:51 - index right here so I do dot index zero
10:53 - then that would give me one right
10:56 - because one is added in there now to
10:58 - like put thing to put something or to
11:01 - set something on a certain index what
11:02 - you do this is T dot set and you type
11:05 - the index and
11:07 - element so I wanted to set index one per
11:10 - se to be equal to like five then that's
11:13 - why I would do it index one is five okay
11:16 - we print out T here just to show you
11:19 - what it looks like okay sorry that's we
11:24 - can't do that we have to do we have to
11:26 - add something in so to set something
11:28 - like this sorry you have to actually
11:29 - have something added at that index I
11:31 - forgot I didn't add that so I'm just
11:32 - gonna add two so what I'm doing now
11:36 - essentially is what this set actually
11:37 - does is you have to have something
11:40 - already existing at that index and this
11:42 - is gonna change that index for you so
11:45 - this is to change an already existing
11:46 - index and before I was trying to set one
11:48 - when we didn't have that in so that was
11:50 - my mistake but anyways there we go so
11:51 - now that works we have changed to two
11:54 - equal to five and twos up session one
11:56 - right so that's the way that that works
11:57 - I just got a thing up here I'm just
11:59 - gonna read through a few of these Oh set
12:02 - yeah okay so that's the basic ones again
12:05 - we have dot size so t dot size we can do
12:09 - t dot empty or is empty and this is
12:11 - actually really useful when it's called
12:13 - sub list and what this allows us to do
12:15 - is get from certain indexes so T dot sub
12:18 - lists let's see ad argument yeah so we
12:20 - just need int so this is gonna allow us
12:22 - to get within a certain range so say I'd
12:25 - like these a bunch of times okay so we
12:30 - have six elements now what I want to do
12:33 - is I want to get from like index 1 to
12:35 - index 3 and I want to print that to the
12:38 - screen so let's just take this and put
12:42 - this here instead so let's get rid of T
12:45 - go to the semicolon and print out and
12:47 - see what we get so we get here now is 5
12:51 - and 1 because although our list actually
12:55 - has body codes like 6 elements in it
12:57 - from here we can just get the elements
12:59 - from 1 to 3 not including 3 so if I type
13:03 - like 1 to 4 then you should see we get
13:06 - one more element in here we get 5 1 & 2
13:09 - because that's from from index 1 to
13:11 - index 4 but not including index 4 that's
13:14 - what we're grabbing we're getting all
13:15 - those elements in the the sub list like
13:18 - that now this is a ray list we
13:21 - also have linked lists again this is
13:24 - another data structure that I can't
13:25 - really explain to you just understand
13:28 - that it is faster at certain operations
13:31 - than an ArrayList
13:33 - so for nab to understand the difference
13:35 - between lists you have linked lists and
13:36 - ArrayList and you guys I recommend you
13:39 - to play with those and figure them out
13:40 - on yourself
13:41 - anyways we're coming up on about 15
13:44 - minutes now almost and that's pretty
13:46 - much all I wanted to talk about with
13:48 - sets and lists now I know this video
13:50 - might have been a bit confusing there's
13:52 - a lot of stuff that I wasn't able to
13:53 - explain to you guys but just understand
13:55 - that if you're trying to do something
13:57 - and you don't know how long you want
13:59 - something to be like a list or an array
14:02 - you don't know how long you want it to
14:03 - be it's a different amount of elements
14:05 - like you don't know you would just use
14:07 - an ArrayList the way that I showed that
14:09 - to you before so ArrayList like that
14:11 - because then you can add things you can
14:13 - get things you can set things and you
14:15 - don't have to worry about like having a
14:16 - designated length the reason you use a
14:18 - set is when you don't care how many
14:21 - times something exists or where it
14:23 - exists you just care if it exists and
14:26 - the reason a set is better is because
14:29 - it's simpler and it's a lot faster to do
14:31 - operations on in terms of like a
14:33 - computer efficiency standpoint that's
14:35 - when you would use a set anyways I'm
14:38 - sorry about the confusing video and the
14:40 - next one I am going to be talking about
14:42 - hash tables which again are similar to
14:44 - this but then after that we're gonna be
14:46 - moving into object-oriented program and
14:48 - getting into classes and that stuff's
14:49 - not as hard it is just a bit more
14:51 - information to remember
14:52 - anyways that's been it for this video if
14:53 - you guys enjoy please make sure you
14:55 - leave a like on the video and subscribe
14:56 - to the channel if you're not and I will
14:58 - see you again in another one
15:04 - [Music]