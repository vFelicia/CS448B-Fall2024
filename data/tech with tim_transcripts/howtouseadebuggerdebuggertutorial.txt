00:02 - [Music]
00:06 - hello everyone and welcome back to the
00:09 - YouTube video so in today's video what
00:11 - I'm gonna be doing is teaching you how
00:13 - to use a debugger now I'll be using the
00:15 - vyas code to bug her here and I'll be
00:16 - working in a Python script but don't
00:19 - worry this video will apply to any
00:20 - debugger for any development environment
00:23 - that you use and if you're not sure what
00:25 - a debugger is or where you even access
00:27 - it you'll need to be using an IDE to get
00:29 - access to a debugger there's some tools
00:32 - that aren't IDs that have it but in most
00:33 - cases an IDE which is an integrated
00:36 - development environment will come with
00:38 - some kind of debugging tool and that'd
00:39 - be debugging tool will look very similar
00:42 - to the one I'm about to show you here
00:43 - and will definitely have the same four
00:45 - or five commands and I'm gonna be aiming
00:47 - to teach you about how they work so with
00:49 - that being said let's go ahead and get
00:51 - started now what is a debugger a
00:54 - debugger is really a tool to help you
00:56 - look at what's going on in your program
00:58 - usually when people are debugging what
01:01 - they'll do is they'll do something
01:02 - called print debugging so if you've
01:03 - never seen a debugger before you're not
01:05 - using some fancy tool or environment
01:07 - your way of probably checking what's
01:09 - going on is printing things out to the
01:11 - console or printing things to your
01:13 - terminal or wherever you're running your
01:14 - program so you might do that by just
01:16 - going in here and say okay well I want
01:17 - to print what numbers is just have a
01:19 - look at that here and see if things are
01:21 - what I expect them to be that's totally
01:24 - fine you can do that and for simple
01:26 - programs and for you know simple scripts
01:28 - and whatever you have that's totally
01:30 - fine and I do that all the time as well
01:32 - but as soon as you get into something
01:34 - that's pretty complicated where you
01:36 - might not know the values you actually
01:38 - want to look at maybe there's a lot of
01:39 - files there's a lot of different states
01:41 - that you want to examine it can get
01:42 - really messy if you're just printing
01:44 - values out into the console so instead
01:46 - you use a tool like a debugger now right
01:49 - here I actually have my debugger active
01:51 - it's currently running and I'll explain
01:53 - what all of this is doing later but you
01:55 - can see that I'm actually able to look
01:56 - at all of the different values in my
01:59 - program so I have a breakpoint right
02:01 - here which essentially tells the
02:03 - debugger hey I want to stop pause and
02:06 - have a look at what's going on at this
02:08 - point in time on line 25 the one that's
02:11 - highlight
02:11 - yellow on the left-hand side here you
02:14 - can see that it shows me locals and
02:17 - Global's I can click into these and I
02:19 - can actually have a look at all of the
02:21 - variables that are associated with the
02:23 - current scope that I'm in so here for
02:26 - example average is a variable that
02:28 - stores the kind of pointer to this
02:31 - function right here generate numbers oh
02:34 - well that's a variable that stores the
02:35 - pointer to this function right here
02:37 - highest running average same thing
02:39 - random oh what's that that's the
02:42 - variable associated with this import so
02:44 - you can actually go in and look at all
02:46 - of the different values associated with
02:49 - each of these variables now in this case
02:51 - it's not super useful because these are
02:53 - just functions but I will show you
02:55 - throughout this video of course how we
02:56 - can look at actual code and not just
02:59 - function pointers and all of that but
03:00 - this is just to give you an idea of what
03:02 - a debugger can really do so you place
03:05 - these little breakpoints which I'll show
03:06 - you how to do again and then what you
03:08 - can do is use some of the commands that
03:10 - are up here in this menu bar that I'm
03:11 - moving around which I'm gonna leave up
03:13 - here to actually step and navigate
03:15 - through your code so there's three main
03:18 - tools here that you want to know how to
03:20 - use step over step into and step out of
03:24 - now they each have shortcuts you can see
03:26 - the keyboard shortcuts right here I'm
03:28 - gonna be showing you how to use these
03:30 - but I just want to again give you an
03:31 - example of what they can actually do so
03:33 - look here when I click step over what
03:36 - this does is actually move this little
03:37 - pointer here to the next line of code so
03:41 - you can see that now what I actually
03:43 - have is a variable called num that
03:45 - stores all of the nums that were
03:47 - generated from this line so I actually
03:50 - go ahead and have a look at what all of
03:52 - these different numbers are I can see
03:54 - the properties for example the length of
03:56 - that list so there's a hundred different
03:57 - numbers and anything else that's related
04:00 - to Nub's I can go ahead and I can
04:03 - actually look at that which is great
04:04 - what I can do next is I can step over
04:07 - again so I can step over that note on
04:09 - that line right here nothing's changed
04:11 - because I haven't updated any variables
04:13 - or anything into this scope and then
04:15 - what I could do is actually step out of
04:17 - and what that will do is take me outside
04:19 - of the current scope which in this case
04:20 - will end the program so now that I've
04:22 - given you a little bit of an example
04:24 - let's go into some more detail
04:25 - and show how we can really use this
04:27 - debugger effectively so I figured that
04:29 - before I actually go into a full example
04:31 - and illustrate the debugger I should
04:32 - probably show you how to open the
04:34 - debugger and what the core features of
04:35 - it are just so you know while we go
04:38 - through this video so it's gonna be
04:40 - different to open a debugger in whatever
04:42 - environment you're working and so
04:43 - whatever IDE you have usually what
04:45 - you're gonna want to look for though is
04:46 - something that has a little bug icon and
04:48 - a kind of play sign like this or play
04:51 - logo so in vs code to access the
04:54 - debugger what you do is on the little
04:55 - left hand menu bar here you press on
04:57 - this icon that I'm pressing on here this
05:00 - will open up the debugger and right now
05:01 - I currently have mine active but if I
05:03 - stop it by hitting the stop button
05:05 - you'll see that it shows run in debug
05:07 - like this and it shows you where all of
05:09 - your breakpoints are in this little pain
05:11 - down here so this is great this is a
05:13 - good way to organize your breakpoints
05:15 - you can see I've added a bunch here and
05:16 - it shows me where they are by line
05:18 - number and I can simply deactivate them
05:20 - by just unchecking that button it Gray's
05:22 - it out and what that means is I'm not
05:24 - gonna remove that breakpoint but I just
05:26 - want you to ignore it for now
05:27 - it's almost like commenting the
05:29 - breakpoint out if you want to think of
05:30 - it like that so once you're ready to
05:32 - actually run your code you can click run
05:34 - and debug it's gonna be different in
05:36 - whatever environment in this case you
05:37 - have to select what file you want so
05:39 - I'll click python file here we go ahead
05:42 - and we start debugging and then we hit
05:44 - the most recent breakpoint and then here
05:46 - we are now the other two features that I
05:48 - kind of want to discuss here is this
05:50 - watch pane in this call stack so I won't
05:52 - be using these in the examples because
05:54 - we don't really need to but say there's
05:56 - a certain expression that you want to
05:57 - watch or say there's a certain value you
05:59 - want to look at that isn't directly
06:01 - written inside of this code so I've
06:03 - already showed you and I actually I'll
06:05 - show you here you can highlight over top
06:07 - of specific values if they've already
06:09 - been defined and you can get actually
06:11 - what the value is but let's say there's
06:14 - no you want to create your kind of own
06:16 - value to look at what you do is use this
06:18 - watch tab and you can go ahead and type
06:21 - in variables that you want to look at so
06:23 - let me just step over here quickly and
06:25 - go to generate numbers let's just keep
06:27 - stepping for one second I'm gonna step
06:29 - there so say we're here and we're at
06:31 - this point and what I want to actually
06:33 - do is look at a slice of nums so rather
06:36 - than looking at what all of the numbers
06:37 - are I just want to look at
06:38 - slice of it what I can actually do is
06:40 - write numbs and then I could say like :
06:43 - 5 and hit enter and what that will do is
06:45 - let me watch exactly the expression I
06:48 - type in here so I can watch what a slice
06:50 - of up to 5 of the numbers is from this
06:53 - watch tab so that's really useful you
06:55 - can add as many things to watch as you
06:57 - want you can literally do something like
06:59 - you know seven less than five you can
07:01 - watch that that's just always going to
07:03 - be false any expression you want you can
07:05 - put in here it will evaluate it after
07:07 - every time you step and you'll be able
07:09 - to watch that right if that makes sense
07:10 - the call stack is kind of a little bit
07:12 - complicated so I'm not really going to
07:14 - explain it but this will show you what
07:16 - you're gonna be returning to if you're
07:18 - calling in to a specific function so
07:19 - I'll show really quickly if I go step
07:21 - into here you can see the call stack now
07:23 - has module and then running average what
07:25 - this is telling you is that if you step
07:27 - back you're gonna go from running
07:29 - average to module and actually let me
07:31 - just step over here a little bit let me
07:33 - step into and you can see now we have
07:35 - three things on the call stack so
07:36 - average running average module this
07:39 - means if you step out of average you'll
07:40 - go to running average if you step out of
07:42 - running average you'll go back to module
07:43 - so that is the basics those are the main
07:45 - features now we'll get into a full
07:47 - example and really talk about how all
07:49 - these tools work so again you want to
07:51 - use the debugger when things are
07:52 - complicated and when you want to take
07:54 - kind of a snapshot of your code at a
07:56 - certain point and look at what's going
07:58 - on in a specific place the way you do
08:01 - that is by placing breakpoints so
08:03 - breakpoints these apply to all different
08:05 - debuggers and typically what they are is
08:07 - a red circle you can see I'm placing a
08:09 - ton here in what's called the gutter
08:11 - beside all of these line numbers so
08:14 - there's different ways to plague replace
08:15 - breakpoints in different editors and
08:18 - there's different ways of seeing them
08:19 - and displaying them but usually you
08:21 - place them in the gutter so that's
08:22 - either on the left or right hand side of
08:24 - wherever your code is sometimes you
08:26 - might have to right-click and it says
08:28 - place breakpoint there might be a
08:29 - shortcut for that but find how to place
08:31 - a breakpoint and essentially praise
08:33 - place them where you want to have a
08:35 - snapshot and take a look at your code
08:37 - now you can place as many breakpoints as
08:39 - you want you place as few as you want
08:41 - but if you want the debugger to actually
08:43 - run and be active you need to place at
08:45 - least one the reason for that is because
08:47 - the debugger does not stop running the
08:49 - program
08:50 - until it sees a breakpoint so if I go
08:53 - here and click run and debug and I run
08:55 - my Python file notice that we don't get
08:57 - any lines the debugger doesn't activate
09:00 - we don't highlight anything we don't see
09:02 - any variables in the left-hand side the
09:04 - reason for that is because I didn't
09:06 - place any breakpoints so if I go ahead
09:08 - now and I place a breakpoint inside of
09:11 - average here like this so I'll place one
09:13 - right now what's gonna happen is every
09:15 - single time that my program hits this
09:17 - breakpoint we're going to pause and have
09:20 - a look at what's going on so let's see
09:22 - when I click run and debug what happens
09:24 - when I place a breakpoint right here so
09:27 - immediately the first place I get into
09:29 - here is average so it did whatever else
09:31 - in the code we had to do and as soon as
09:33 - a verage was called boom it stopped and
09:36 - it shows me the local variables
09:38 - associated with this function so you can
09:40 - see it's showing me D and n so 246 and 1
09:43 - and not saying the denominator is 246
09:46 - and the numerator is 1 I might have
09:48 - messed up the way that those should go
09:49 - but either way you see them right here
09:51 - and now what I can do is use some of
09:54 - these tools here to step through my code
09:56 - and see what else is going on so the
09:59 - three tools that we want to learn is
10:01 - step over step into and step out the
10:05 - first one is the easiest it's step over
10:07 - all that does is move you to the next
10:09 - line of code so if you press step over
10:11 - what it's gonna do is just go down to
10:13 - the next line that you see in your code
10:16 - that you would assume that you would go
10:17 - to if you call step into what this will
10:20 - do is step into any method calls
10:23 - function calls anything that's happening
10:25 - on the current line so on this line here
10:28 - let's say I called another function and
10:30 - I called running average like that what
10:32 - this would do if I called step into is
10:34 - actually bring me into this function
10:36 - here and then we'll start running again
10:39 - where we're gonna start from the top and
10:40 - continue and we use these commands here
10:43 - to continue navigating through the code
10:44 - if I press step out of what this does is
10:48 - take me out of the current scope so
10:50 - we'll look for the last return statement
10:53 - inside of our is it lost return
10:55 - statement yes I believe it's the last
10:57 - return statement inside of whatever
10:59 - function we're at or whatever returned
11:01 - statement a hit sorry and then it will
11:03 - simply exit
11:04 - and go back to where it was called from
11:05 - so if I call step out it will bring me
11:08 - to where we called this average function
11:10 - from and then the next line after that
11:12 - so let me show you what step out does
11:14 - because it is definitely the most
11:15 - complicated will call step out and you
11:17 - can see it brings me to current average
11:19 - which is where we called this average
11:21 - function from that is what step out does
11:24 - now what I'm gonna do is call step into
11:27 - we're gonna move to the next line
11:29 - because there was nothing to step into
11:30 - there and we'll step into again now
11:33 - since there was nothing to step into
11:34 - right there was no method calls we move
11:36 - to the next line now I can press step
11:38 - over or step into because there's
11:40 - nothing to step into here actually let's
11:42 - see what step into does it just moves us
11:43 - the next line will step into that and
11:46 - now let's step into here what that does
11:48 - is bring me up to the average function
11:50 - because I called the average function on
11:53 - this line so we stepped into that
11:55 - function call now we're back here again
11:58 - and we can do whatever we want in fact
12:00 - something that we can do is press play
12:02 - so if we press continue which is f5 what
12:05 - this will do is move the program along
12:08 - until we hit another breakpoint so say
12:10 - okay we don't want to step around
12:11 - anymore we don't need to navigate let's
12:13 - just keep moving so let's go continue
12:15 - and boom where does it bring us back
12:17 - right into the average function because
12:19 - that was the next place that our program
12:22 - went to the next breakpoint that it hit
12:23 - and if I keep playing you can see on the
12:26 - left hand side here these local
12:27 - variables are being updated because the
12:30 - average function keeps getting called so
12:31 - I can keep pressing play and I can look
12:34 - at all of the different values inside of
12:36 - this average function let's say we're
12:38 - done we don't want to debug anymore what
12:40 - we can do next is we can hit the pause
12:42 - boom we'll be done and we stopped at
12:45 - debug now that is the basics of using a
12:47 - debugger and that's all you really need
12:49 - to know is what those few different
12:51 - commands do so now let's pray place a
12:53 - few more breakpoints and maybe some more
12:55 - interesting places so a place one on the
12:59 - averages up here we'll place one
13:01 - actually on return averages and then we
13:03 - maybe will place one on down here so
13:07 - after we generate the numbers okay so
13:09 - let's run this now and let's see what
13:11 - happens when we have more breakpoints in
13:13 - our program all right so the first
13:15 - breakpoint is right here so right after
13:17 - we generate
13:17 - our numbers we can have a look at the
13:19 - numbers here I'm not too you know
13:21 - concerned about stepping through this
13:23 - anymore so what I'll do is press play
13:24 - and notice it brings us to our next
13:27 - breakpoint which was up here you can see
13:30 - where we are based on this little kind
13:31 - of house shaped yellow thing around the
13:33 - break point and the highlight of the
13:36 - line this will move down on the line to
13:38 - show you where you currently are so we
13:40 - have numbers which is a local variable
13:42 - associated with this parameter and
13:44 - notice when I highlight this I can
13:46 - actually go ahead and see the value of
13:48 - all of these numbers that's a cool
13:50 - feature inside of es code next I'm going
13:52 - to step over that will bring us to total
13:55 - now I can highlight over averages and we
13:57 - can see that it's length 0 and simply an
13:59 - empty array let's click play again or
14:03 - actually let's click step over we're
14:05 - gonna step over here what I'm gonna do
14:07 - is I'm actually going to step over this
14:09 - as well so we get into total boom look
14:12 - total is now updated to 279 because we
14:15 - added the value of num which what is num
14:17 - let's highlight over it to 79 let's step
14:21 - over again we can see now current
14:23 - average is 279 the return value from
14:26 - average was 279 so it's showing us that
14:28 - and now average doesn't have anything in
14:30 - it yet let's step over again and notice
14:33 - average now gets updated with 279 so
14:36 - that is a very useful thing to be able
14:37 - to do because you can step through a for
14:39 - loop and see exactly what's happening
14:41 - let's say I'm done with this for loop I
14:43 - don't want to do any more let's press
14:44 - play now we can see all these values are
14:47 - updated the last number we were out was
14:49 - 287 the current average was 156 and all
14:53 - the averages are stored inside of the
14:56 - running averages list right here awesome
14:58 - so now let's see where this return goes
15:01 - to so we can go ahead and go step out or
15:03 - we can just step over and that will
15:04 - bring us back so let's go step out and
15:06 - step out brings us to here because this
15:09 - was where it was called from running
15:10 - average and now let's go step over
15:13 - alright and let's step into this now
15:15 - because I want to step into any function
15:17 - calls that happen on this line which
15:19 - should be highest running average so
15:21 - we're gonna step into brings us to
15:23 - highest running average which calls
15:25 - running average let's step into there
15:26 - again that brings me into running
15:29 - average because it brought me into any
15:30 - function calls on
15:31 - line let's step out that brings me to
15:34 - the return statement or actually sorry
15:36 - where the other breakpoint was let me
15:37 - remove that let's go step out now we're
15:40 - here okay let's just step over step over
15:44 - and we are done there was no more
15:46 - breakpoints and we finished the program
15:48 - so that is pretty much how a debugger
15:50 - works those are the three main tools you
15:52 - have your pause so 5 main tool sorry
15:55 - your pause your step over step in to
15:58 - step out and I guess your continue or
16:01 - whatever the other button is was gonna
16:02 - be and that really is all you need to
16:05 - know to effectively use a debugger when
16:07 - you're working on something you want to
16:09 - figure out what a certain piece of code
16:11 - looks like in a certain area what all
16:12 - the values of everything are what the
16:14 - state is you simply place a breakpoint
16:16 - you can place multiple breakpoints if
16:18 - you want and then you press play you get
16:21 - to that breakpoint it will pause you can
16:23 - step through your code however you want
16:25 - you can press play when you're done and
16:26 - you can continue from there so with that
16:28 - being said and that has been my tutorial
16:30 - on how to use a debugger again some of
16:33 - these things may vary depending on what
16:35 - environment you're using what like what
16:38 - editor you have how much code you have
16:40 - how many files I will note that if
16:42 - you're working with multiple files the
16:44 - debugger does work and it will go
16:45 - between the different files when you
16:47 - step into something or step out which is
16:49 - definitely really useful and yeah that's
16:51 - pretty much all I can say about this so
16:53 - with that being said if you guys enjoyed
16:55 - make sure you leave a like subscribe to
16:56 - the channel and I will see you guys in
16:58 - another YouTube video