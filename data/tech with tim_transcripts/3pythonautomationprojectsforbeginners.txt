00:00 - in this video I'll show you how to
00:01 - automate your life with python by
00:03 - working on three fun simple yet
00:06 - effective projects that really
00:08 - illustrate the power of knowing Python
00:09 - and specifically the automation
00:11 - techniques now these three projects will
00:13 - be the following the first is a currency
00:16 - converter the next is a YouTube video
00:18 - downloader and the last one is an
00:20 - automated scheduling software for
00:22 - backing up a directory or a folder or
00:24 - whatever files you want on your computer
00:26 - these projects should take us just a few
00:28 - minutes to build out I'm going to
00:30 - explain them line by line and even if
00:32 - you're a beginner python programmer you
00:34 - can follow along now with that said if
00:36 - you are a beginner python programmer you
00:38 - probably want to check out this
00:39 - completely free resource which is an
00:41 - introduction to python from our video
00:44 - sponsor HubSpot now this guide is
00:46 - designed for marketers developers data
00:48 - analysts or really anyone trying to get
00:50 - better at Python and what it does is
00:52 - break down what python is some of the
00:55 - methods and functions the best practices
00:57 - and coding standards and goes over at
00:59 - Advanced python as well now I've left a
01:02 - link in the description so you can check
01:03 - it out completely for free python is a
01:06 - super popular programming language and
01:08 - something you can use in your everyday
01:09 - life even if you don't want to become a
01:11 - developer definitely check out this
01:13 - guide if you want to get better at it
01:14 - and really unlock the power of being
01:16 - able to script in Python now a big shout
01:18 - out to our video sponsor HubSpot for
01:20 - providing this resource and many others
01:22 - completely for free again you can check
01:24 - it out from the link in the description
01:27 - all right so let's dive into the first
01:28 - project here which is going to be a
01:30 - currency converter this will allow us to
01:32 - convert pretty much any currency to any
01:34 - other currency or to a whole list of
01:36 - currencies so for example if you're
01:38 - always interested in the daily exchange
01:39 - rates between maybe US Dollar Canadian
01:42 - dollar Durham Euro whatever it may be
01:44 - you can set that up in this program
01:46 - simply click one button on your computer
01:48 - and you'll be able to see all of them in
01:50 - front of you that's how we're going to
01:51 - kind of automate this anyways first
01:53 - thing we need is some kind of code
01:55 - editor so I have Visual Studio code open
01:57 - but you can use anything that you'd like
01:59 - you just just need to be able to edit a
02:00 - python file now what I'm going to do is
02:03 - make a new python file so I'm going to
02:04 - go here to vs code I'm going to call
02:06 - this currency dopy Okay so we've got a
02:10 - python file open here now what we're
02:12 - going to use for this specific project
02:14 - is something known as an API now an API
02:17 - stands for an application programming
02:19 - interface this is something that we can
02:21 - call that will return some data to our
02:24 - code so we're actually going to use a
02:25 - free API that exists on the internet
02:28 - there are literally millions of apis
02:29 - that are completely free that can do
02:31 - pretty much anything you want and once I
02:33 - show you in this video how to access
02:35 - them you'll be able to use really any
02:36 - API you want and you'll see it's super
02:38 - simple now what we do need to do here
02:40 - though is install a python module that's
02:42 - going to allow us to actually call this
02:44 - API in a really easy manner this module
02:47 - is called requests some of you may
02:49 - already have it installed but what
02:50 - you're going to want to do is open up a
02:51 - terminal window if you're on Mac Linux
02:54 - doesn't matter just open up your
02:55 - terminal or command prompt and you're
02:57 - going to want to type the following
02:58 - command which is pip install and then
03:01 - requests now if you're on Mac or Linux
03:03 - you're going to do pip three install
03:05 - requests hit enter and that should go
03:07 - ahead and install this module for you
03:10 - now for some reason this command does
03:11 - not work I will leave two videos on the
03:13 - screen and Linked In the description
03:15 - that will show you how to fix this pip
03:16 - command specifically they go over fixing
03:18 - or installing pame when you get to the
03:21 - step where you're installing Pi game
03:22 - instead of pame you can just install
03:24 - requests and it should fix it for you
03:26 - okay so now that we have requests
03:28 - installed just to test our code we're
03:30 - going to import requests in our python
03:32 - file I think it goes without saying at
03:34 - this point I'm assuming you have python
03:36 - installed and we can go ahead and run
03:37 - our code now you guys probably know how
03:39 - to run your code you can do it from the
03:41 - little run button up here in vs code but
03:43 - if for some reason that's not working
03:44 - for you you can go to your terminal and
03:46 - you can type Python and then the name of
03:48 - your python file as long as you are in
03:50 - the right directory or the same
03:52 - directory where your python file exists
03:54 - so in this case mine's on the desktop
03:55 - inside of this folder so I do python
03:58 - currency. piy if we don't get get any
03:59 - errors we are good to go if you're on
04:01 - Mac or Linux you can do Python 3
04:03 - currency. piy and that should work for
04:05 - you okay so now let's load up the API
04:08 - that we're going to be using now I'll
04:10 - link everything in the description so
04:11 - don't worry about that but the API we're
04:13 - going to use is the free currency API
04:16 - again you can find any one that you want
04:18 - but I just went for one that was free
04:19 - and tested it to make sure that it's
04:21 - working as you can see here it gives you
04:23 - kind of a demo so you can pick some
04:24 - different currencies you want to convert
04:25 - between we can check the rat and it
04:28 - should just give us the answer right so
04:30 - one USD is equal to this much Australian
04:33 - dollar if I change this to Euro you can
04:36 - see we get the euro rate awesome now
04:38 - what you're going to need to do here is
04:39 - go and click on this button that says
04:41 - get 100% free API key you'll need to
04:44 - make an account I actually already have
04:46 - one made so it just brings me to my
04:48 - dashboard but in your case you want to
04:49 - make an account so go ahead sign up for
04:51 - one you can obviously unregister from
04:53 - the email list or whatever and what
04:55 - we're going to be looking for here is
04:57 - this API key okay so it says default key
04:59 - so we're going to copy that key and
05:01 - we're going to go to our python file and
05:04 - we're going to make a variable in all
05:05 - capitals called
05:07 - API key like this and we're going to put
05:10 - a string and we're going to paste the
05:12 - key inside of here perfect now the
05:14 - reason I did all capitals is whenever
05:16 - you have a constant value that's not
05:18 - going to change in Python you typically
05:20 - put it in capitals perfect now that we
05:22 - have that we also just want to get
05:23 - what's known as the root for our um API
05:27 - or kind of the domain that we're going
05:28 - to be calling so what we can do is
05:30 - actually head over here to the request
05:32 - playground and you'll see that it has a
05:34 - generated request URL so what I'm going
05:37 - to do is just copy the URL here and
05:39 - we're going to make another variable
05:41 - called basore URL and we're going to
05:44 - make this equal to a string and we're
05:45 - going to put this URL inside now we're
05:47 - going to clean this up a little bit I'm
05:49 - just going to remove everything that
05:50 - comes after the API key and I'm going to
05:54 - kind of explain how this works so right
05:56 - here this is our main domain and then
05:59 - this is the route that we're going to
06:00 - access that will give us the kind of
06:02 - currency information now in order to use
06:04 - this we have to pass the API key so we
06:06 - have some kind of authorization so what
06:08 - we're going to do is use an F string an
06:10 - F string allows us to embed variables
06:12 - inside of curly braces here so if I put
06:14 - F before my string and then I put my
06:16 - curly braces I can now put the variable
06:18 - API key and what I've done is injected
06:21 - my API key into this base URL and now
06:24 - what we'll do is we'll actually make a
06:25 - function that will utilize this URL to
06:28 - send a request to the API which will
06:30 - then return some data back to us so
06:32 - we're going to make a function here
06:34 - called convertor
06:36 - currency okay inside of here we're going
06:38 - to take a base now the base is going to
06:40 - be the base currency or the base
06:42 - currency ticker that we want to convert
06:44 - from now what we're going to do is
06:46 - format our URL so that we include what's
06:49 - known as the query parameters that
06:50 - specify the currencies that we want to
06:52 - do the conversion for so essentially you
06:54 - may have seen before in URLs if I go up
06:58 - here that they have this question mark
07:00 - and then after the question mark you
07:01 - might see some variables that say like
07:03 - search is equal to and then there's some
07:06 - text or something these are known as
07:07 - query parameters and you can pass them
07:09 - alongside the URL and the root the root
07:12 - is the thing that comes after the slash
07:14 - here and they specify what you want to
07:16 - get from the uh URL now in our case I
07:19 - just know what these are because I read
07:21 - the documentation uh you don't need to
07:22 - read it I'm going to share with you how
07:24 - it works but what we're going to do is
07:25 - say that our URL is equal to an F string
07:28 - we're going to inject inside of here the
07:30 - base URL and then we are going to put a
07:34 - question mark like this and sorry we
07:37 - don't need the question mark because
07:38 - it's already here we're going to put an
07:39 - and sign like this because we're going
07:41 - to have more than one query parameter
07:43 - and we're going to say the basore
07:44 - currency is equal to the base which will
07:48 - be passed into this function as a
07:49 - parameter and we're going to say and the
07:53 - currencies are equal to and inside of
07:55 - here we're going to specify the
07:56 - currencies that we want to convert to so
07:59 - what I'm going to do now is I'm going to
08:00 - make a variable called currencies and
08:03 - inside of here we're going to put the
08:05 - ticker symbol of the currencies we're
08:06 - interested in in this case I want USD
08:09 - Canadian dollar euro the Australian
08:14 - dollar and we'll go with CNY as well
08:18 - actually forget what currency that is
08:19 - I'm sure many of you will roast me in
08:20 - the comments but anyways just want to
08:21 - show you we can do a bunch of different
08:23 - currencies okay so these are the five
08:24 - currencies that I'm interested in
08:26 - converting to and for the base we can
08:28 - use anything that we want it could be
08:29 - even one of these currencies regardless
08:32 - what I'll do is I'll go and currencies
08:35 - is equal to and then I'm going to put
08:37 - currencies in here but the thing is the
08:39 - way that the currencies are supposed to
08:41 - be passed in here is they're supposed to
08:42 - be separated by commas so I'm going to
08:45 - show you a little trick that will take
08:47 - this list and convert it to a string
08:49 - that has comma separated values the way
08:51 - we can do this is we can say our
08:53 - currencies in lowercase as this is a
08:55 - variable are equal to and this will be a
08:58 - string with a common
09:00 - dojy and then currencies now the way the
09:04 - join works is it takes all of the
09:06 - elements from a list and it will combine
09:08 - them together in a string using whatever
09:10 - the string is that you have here as the
09:12 - delimiter the delimiter is just the
09:14 - separator it will go it's what goes
09:16 - sorry in between these different values
09:18 - so now what we'll end up getting is just
09:19 - a big string that has USD comma CAD
09:22 - comma Euro Etc which is what this query
09:26 - parameter is expecting the result to
09:28 - look like so now I can pass inside of
09:30 - here currencies so now we have the URL
09:32 - and what's interesting is that if we
09:34 - just went to this URL in our browser it
09:36 - would actually give us the result but we
09:38 - don't want it in our browser we want it
09:40 - here in our code so what we're going to
09:42 - do is write a TR catch block or a TR
09:44 - accept Block in Python because it's
09:46 - possible an error could occur here and
09:49 - we'll kind of talk about how that works
09:50 - in one second and inside of this Tri
09:52 - block we're going to send a request
09:55 - using our newly formatted URL to get
09:57 - some data so to do that let's just make
10:00 - this smaller first of all we're going to
10:01 - say our response is equal to requests
10:04 - which is what we have up here right do
10:07 - get and we're simply going to get the
10:10 - URL that we just created again remember
10:13 - this is a combination of the base URL
10:14 - which has our API key as well as the
10:16 - query parameters which are specifying
10:18 - the data we want now whenever you send a
10:21 - request you get a response so that's why
10:24 - I'm calling this response and then this
10:26 - response is going to contain something
10:27 - known as Json Json is Javascript object
10:30 - notation you don't have to worry too
10:32 - much about that what that really means
10:34 - in Python though is that we're actually
10:35 - going to get a dictionary back that will
10:37 - contain some key value pairs with the
10:39 - data that this API returned so we're
10:42 - going to say the data is equal to the
10:44 - response. Json and for right now we're
10:47 - simply going to print the data and then
10:50 - we're going to return it like that now
10:52 - inside of this accept block I'm just
10:54 - going to show you how we can handle a
10:55 - potential error I'm going to say that we
10:57 - will accept any exception as e and we
11:01 - will print e like this and simply return
11:05 - none okay so let's quickly break down
11:07 - this function we break apart our
11:09 - currencies into the correct string that
11:11 - we're expecting here we format our URL
11:14 - we have a try accept now all this does
11:16 - is attempt to run all of this code if
11:18 - something happens in this code and an
11:20 - error occurs we simply go into this
11:22 - accept block rather than crashing the
11:24 - program in the accept block we say we're
11:26 - going to accept a general exception as e
11:28 - that essentially means we're going to
11:29 - listen for any general exception that
11:31 - occurs we're going to store that in the
11:33 - variable e and then we can just print
11:34 - out e so we can actually see what the
11:36 - error was then we're simply returning
11:38 - none now we can just quickly try this
11:40 - out to see if it works so we can go
11:42 - convert currency which is the name of
11:43 - our function and we can just pass a
11:45 - string with the currency we want to
11:46 - convert so I'm just going to go with
11:48 - Canadian dollars now what I can do is
11:51 - say python currency. Pi remember on Mac
11:54 - Linux Python 3 and when I run this
11:57 - notice that we get some data so it
11:58 - actually returns to us a python
12:00 - dictionary that says data so that's the
12:02 - first key and then we have a whole other
12:04 - python dictionary that contains all of
12:06 - the different currencies based on in our
12:08 - case the Canadian dollar awesome so now
12:11 - what we want to do is just make this a
12:12 - little bit more automated so the user
12:13 - can type it in rather than us passing it
12:15 - into this function and we want to print
12:17 - this out so it looks a little bit nicer
12:19 - so first things first we want to access
12:21 - this interior dictionary which means we
12:23 - want to use the key data on our data so
12:26 - we're going to return data at data like
12:29 - this and let's just quickly run this
12:31 - down and notice that uh what's happening
12:35 - here oh sorry it's cuz I printed data
12:37 - but what I'm going to do now is say data
12:39 - is equal to this and print data and
12:42 - we're going to remove the print
12:43 - statement from up here I know I'm going
12:45 - a bit fast but I'm just trying to
12:47 - illustrate this to you and you'll see
12:49 - now that we just get this interior
12:50 - dictionary so the point of me doing that
12:52 - is that I don't want to have the key
12:53 - data I just want to have all of my
12:55 - different exchange rates which I'm
12:57 - getting here okay so now we have that
12:59 - stored inside this variable now what
13:01 - we'll do is we'll just write something
13:03 - that will'll just print out all of these
13:05 - in a kind of nice orderly fashion uh so
13:07 - it's really easy for us to see okay so
13:09 - how do we do that well we can just write
13:11 - a for Loop and we can say for the ticker
13:14 - comma the value in our data. items now
13:19 - since the data here is going to be a
13:22 - dictionary this allows us to use this
13:24 - items function and the do items function
13:27 - will let us iterate over the dictionary
13:28 - and grab both the key value and the
13:31 - value um yeah as we iterate over it not
13:34 - really sure how to explain that better
13:36 - but items will give you essentially a
13:38 - list that contains first the ticker and
13:41 - then this value so when you do for
13:43 - ticker comma value you'll get both of
13:45 - them and then you can just print them
13:46 - out so I'm just going to say print and
13:48 - we'll just print the ticker so actually
13:51 - we'll do it like this we'll print an F
13:52 - string we'll print inside of here the
13:56 - ticker colon and then and we will print
14:00 - the value like that okay so now if we
14:04 - clear and run you see that we get all of
14:08 - our values popping up here okay so
14:09 - Australian dollars this Canadian one CNY
14:12 - Euro USD Etc okay so this is really good
14:16 - the only thing that's a bit weird is
14:18 - that it's showing Canadian dollar one I
14:20 - don't actually want to show that because
14:21 - I know what the base currency was that
14:23 - I'm converting from so what I can do if
14:25 - I want to get rid of this is I can
14:26 - simply just write this I can say delete
14:30 - data at Canadian dollar so that means
14:34 - okay after we get our dictionary back
14:35 - that contains all of the values we'll
14:37 - just delete the Canadian dollar key so
14:39 - we no longer have it so now if I save
14:41 - and run you see we just get the um
14:44 - currencies that we want the conversion
14:45 - value for perfect now let's just make
14:48 - this code a little bit better because
14:50 - right now I'm manually plugging in CAD I
14:53 - don't want to manually put it in I want
14:54 - to ask the user to tell me what currency
14:56 - they want to convert to so what we'll do
14:59 - is start with that and we'll say the
15:00 - base is equal to input input is how you
15:04 - get user input in Python and we'll just
15:06 - say enter the base currency and I'm
15:09 - going to say Q for quit and this will
15:11 - just be something they can type in if
15:12 - they want to quit the program now what
15:14 - I'm going to do is just convert their
15:15 - currency to uppercase so whatever they
15:18 - give us whatever they type in here we'll
15:20 - convert it to uppercase just so that we
15:21 - always have everything in uppercase
15:23 - rather than getting some lowercase
15:24 - values and then we will say first of all
15:28 - if base is not in the currencies so if
15:32 - it's not inside of the currencies that
15:34 - we have right here then we can simply
15:36 - tell them that they had an invalid
15:37 - currency now we don't have to do this
15:39 - but there is some currencies that you
15:40 - can't use inside of the um API so we
15:44 - might actually run into some errors here
15:46 - although now that I think about it I
15:48 - think it's probably fine actually if we
15:49 - remove that line yeah I don't think we
15:51 - actually need to use that right now okay
15:54 - anyways we have the base so now what we
15:55 - can do is just change Canadian dollar to
15:58 - be the base base so really quick fix
16:00 - there and now if we come and run our
16:03 - code it asks us what do you want the
16:05 - base to be so I can go with maybe AUD
16:08 - and now it gives me all of the
16:09 - currencies other than Australian dollar
16:11 - but it gives me the conversion rates
16:13 - from Australian dollar perfect so this
16:15 - is really really good last thing we want
16:17 - to do is just put this in a loop so that
16:19 - we can continue doing this as much as we
16:20 - want so I can say while true oops that's
16:24 - not what I meant to do we'll get all of
16:27 - this and we're going to do right now
16:29 - after they enter something is we're
16:31 - going to check if they entered Q because
16:33 - Q is how you can quit the program so
16:35 - we're going to say if base is equal to q
16:38 - and notice that I'm doing an uppercase q
16:40 - because we converted the input to
16:41 - uppercase then I'm simply going to break
16:43 - and breaking will just break out of the
16:45 - W Loop so that means we won't actually
16:47 - do the rest of this awesome last thing
16:50 - to check here we're just going to say if
16:52 - not data now what that actually means is
16:56 - if the data value that's returned to us
16:58 - is none so if it doesn't have a value
17:00 - then we can simply continue the reason
17:03 - we're going to do that is because if we
17:05 - try to delete something from data but
17:06 - data doesn't exist that's going to crash
17:08 - our program and give us an error so I'm
17:10 - just checking and saying okay well it's
17:12 - possible we ran into an error here in
17:13 - our currency conversion function if we
17:16 - did we're going to return none so if we
17:18 - have none here we'll just continue
17:20 - rather than trying to do this because
17:21 - this would actually cause some errors
17:23 - for us and I can show you what I mean by
17:25 - that so let's run the code and let's
17:27 - enter con Adan dollar again like that
17:30 - okay gives us all the values and we can
17:32 - enter another base currency now if I
17:34 - enter something like hello notice it
17:36 - actually just gives us an error here and
17:37 - it says data now the reason for that is
17:40 - that in the response there was no key
17:42 - data so it just kind of printed this out
17:45 - now if we didn't want to print this
17:46 - weird message we could just print this
17:48 - and we could say invalid
17:52 - currency like that we don't even need
17:55 - this anymore we could get rid of that
17:57 - and this way you wouldn't get kind of
17:58 - that weird weird error message so now if
17:59 - I quit the program by doing Q and I
18:02 - rerun this and I do hello it just says
18:05 - invalid currency and then we can go
18:06 - again so now I can do again my AUD and
18:09 - it gives me all of my exchange rates
18:12 - there you go okay so let's quit that and
18:14 - that is the first project now all of
18:16 - this code will be available from the
18:18 - link in the description if you'd like to
18:19 - copy it and obviously I will delete my
18:21 - API key so that you guys cannot abuse it
18:24 - last thing to mention here if you wanted
18:26 - to actually convert a dollar amount so
18:27 - maybe $100 $200 whatever all you do is
18:30 - the exact same thing we currently have
18:32 - except you would take whatever the rate
18:34 - is that you wanted to convert to and you
18:36 - just multiply it by whatever the value
18:38 - is that you wanted the conversion from
18:39 - so we have all the rates just take the
18:42 - rate and multiply it by whatever the
18:43 - number is and that gets your converted
18:45 - value okay that is Project one let's
18:48 - move on to project number two welcome to
18:50 - project number two for this project
18:53 - we're going to build a YouTube video
18:55 - downloader now the way this will work is
18:57 - you will just type in URL or video you
18:59 - want to download you will then open up
19:01 - the browse window so you'll kind of
19:02 - select the location you want to save it
19:04 - to and then it will just be downloaded
19:06 - very nice so let's create a new file
19:08 - here I'll just call this YouTube dopy
19:12 - and similarly to the last project we are
19:14 - going to install a module here that will
19:16 - make our life easier so we're going to
19:17 - go here and say pip install PBE same
19:21 - thing as before you're going to want to
19:22 - change this to pip 3 depending on your
19:24 - operating system okay so let's install
19:26 - PBE you can see I've already got it
19:28 - installed all right so now that that's
19:30 - installed we're going to do a few
19:31 - Imports here we're going to say from PBE
19:35 - import YouTube you can guess why we need
19:37 - that we're then going to say import
19:41 - tkinter this is built into python by the
19:43 - way as TK and we're going to say from
19:47 - tkinter import the file dialogue like
19:51 - that now you'll see why we need this in
19:53 - a second but tkinter is a very basic 2D
19:56 - Graphics library or kind of like guy
19:58 - utility library and python that lets you
20:01 - build some graphical user interfaces
20:03 - we're simply going to use it just to
20:04 - have a directory popup so you actually
20:07 - get like a visual kind of place where
20:09 - you can select where you want the file
20:11 - to be saved you'll see what I mean in a
20:13 - second but you can do some more cool
20:14 - stuff with it so if you're interested
20:16 - you can check out teer pretty simple to
20:17 - get started with anyways first thing we
20:20 - want to do is figure out how to download
20:21 - a YouTube video so we're going to make a
20:23 - function here which is download video
20:26 - and what we need to download a video is
20:28 - the URL and the path that we want to
20:30 - save the file to now similarly to before
20:33 - we're going to do a try and accept block
20:35 - because stuff can always go wrong when
20:37 - you're using these kind of apis so we're
20:39 - going to say accept exception as e and
20:41 - then we're going to say print e here and
20:44 - inside the tri block we're going to
20:45 - start writing the code that we need to
20:47 - actually download the video now we're
20:49 - going to say YT standing for YouTube is
20:52 - equal to YouTube and we are going to
20:54 - pass in the URL now what this will do is
20:57 - grab kind of an instance of the YouTube
20:59 - video based on the YouTube url that we
21:01 - pass and then we can kind of do a few
21:03 - things with it like we could get some
21:05 - stats about it but in our case we
21:07 - actually just want to download it now to
21:09 - download it there's a few ways to go
21:10 - about doing this but we want to download
21:12 - the highest resolution version so the
21:14 - first thing we're going to do is get
21:16 - access to all of the different streams
21:17 - of this video so we're going to say yt.
21:21 - streams. filter we're going to say
21:24 - progressive is equal to true and we're
21:27 - going to say the file
21:29 - underscore
21:31 - extension is that how you spell
21:33 - extension I think it is is equal to MP4
21:37 - now you can change this if you want but
21:38 - I think MP4 is just the default that
21:40 - most of us are going to use okay now
21:42 - that we have access to all of the
21:43 - different streams this is all the places
21:45 - we could be downloading it from we're
21:47 - going to get the highest resolution
21:49 - stream so we're going to say highest res
21:52 - stream is equal to streams doget _
21:58 - highest
22:00 - uncore resolution like that now this is
22:03 - going to give us access to that stream
22:05 - now that we have access to that stream
22:07 - we're going to download the video so
22:08 - we're going to say highest res
22:10 - stream. download we're just going to say
22:13 - the output undor path is equal to the
22:16 - save path which is the parameter passed
22:18 - into here that's it we can then go and
22:21 - say
22:23 - print video
22:26 - downloaded success y exclamation point
22:30 - okay pretty straightforward but we can
22:31 - go ahead and test this out so we can
22:33 - just say URL is equal to and we'll grab
22:35 - a YouTube video URL and then for the
22:38 - save path we want to specify where we
22:40 - want to save it now if we don't pass
22:41 - anything it will just save it in the
22:43 - current directory where we currently are
22:45 - but I'll show you again in a second how
22:46 - we can kind of fix the path a little bit
22:48 - so that it's a bit easier to figure out
22:50 - where we want to save it now my case
22:52 - I'll just manually type in the path so
22:54 - I'm going to say C drive colon slash
22:57 - user SL Tim SL desktop SL python
23:04 - automation which is the name of the
23:06 - folder that we are currently in okay now
23:09 - we can call the function so download
23:12 - video URL and save path and now what we
23:15 - need to do is just get a YouTube video
23:17 - URL let me just grab one of my videos
23:19 - and I'll be right back all right so I
23:21 - just loaded up one of my YouTube videos
23:23 - three types of projects that make you a
23:25 - programmer but I couldn't help but
23:26 - notice look at this link here enroll in
23:28 - my free software development
23:29 - introduction course that looks
23:31 - interesting let's click on that and you
23:33 - can see that we have start your career
23:35 - in software development and there's
23:36 - actually a free intro course you guys
23:38 - can take if you want that teaches you
23:40 - about how to break into software
23:41 - development if you are looking to
23:43 - actually land a job not going to show
23:45 - this too hard obviously there is a paid
23:47 - course here as well but there is a
23:48 - completely free one that gives you a ton
23:49 - of value it is 1 hour long if you guys
23:52 - want to check it out do that from the
23:53 - link in the description anyways we have
23:56 - our link let's copy the link and paste
23:59 - that inside of the URL variable and now
24:03 - let's save and let's run our code so
24:05 - python youube dopy give this a second to
24:09 - download okay and you can see now that
24:11 - we get the three types of projects that
24:13 - make you a programmer video downloaded
24:15 - successfully and I'd be able to open
24:17 - that up now and actually watch it if I
24:19 - wanted to pretty straightforward so now
24:21 - similarly to before what we want to do
24:23 - is make this code a little bit better
24:25 - just so that we don't have to manually
24:27 - type in this path and we don't have to
24:28 - manually type in the URL so let's scrap
24:31 - all this and let's now write something
24:33 - that makes it a little bit more user
24:34 - friendly so what we're going to do is
24:36 - make a function here called open file
24:39 - dialogue this is going to open the file
24:41 - dialogue which will kind of pick where
24:43 - we're going to save the folder or the
24:46 - file sorry first though we're going to
24:48 - say root is equal to tk. TK now what
24:52 - this does is just instantiate the TK
24:54 - module and kind of creates a TK window
24:58 - uh toer window right to be able to use
25:00 - this file dialogue you need a window but
25:02 - the thing is it doesn't have to be shown
25:04 - so what I can do is I can say
25:06 - root. withdraw now what that will do is
25:10 - it will just hide the window so you
25:11 - don't see it uh kind of appearing on the
25:13 - screen so we initialize the window hide
25:16 - the window and now we're actually able
25:18 - to use this root variable here um or
25:21 - really any tkinter type stuff to be able
25:23 - to open the file dialogue so what I'm
25:25 - going to do inside of this directory is
25:27 - say folder
25:28 - is equal to the file dialogue okay and
25:32 - this is going to be ask directory and
25:35 - then I'm going to say if the folder path
25:37 - so if they actually type something in
25:39 - then we're going to say print the FST
25:42 - string selected folder and I'm just
25:45 - going to print out what the folder was
25:46 - that they selected and then I'm going to
25:48 - return the folder here okay great so now
25:53 - I'm going to go down and I'm just going
25:54 - to make one single line here I'm going
25:56 - to say if uncore uncore name
25:58 - is equal toore
26:01 - maincore now you might be asking what
26:03 - the heck is this crazy line that I'm
26:05 - looking at Tim well what this line will
26:07 - do is make sure that you are directly
26:09 - running this python file before it
26:11 - executes anything that happens under
26:13 - this that's it all that means is that if
26:15 - you run this code directly this will run
26:19 - if you don't it won't the reason you
26:20 - would ever even need this is because
26:23 - sometimes you'll have some code inside
26:24 - of here that might be reused by another
26:26 - file so for example maybe our currency.
26:29 - py file uses something inside of here if
26:31 - we don't have this line and currency
26:33 - were to import this module that would
26:35 - actually run all of the code like it
26:37 - would run all this stuff here so
26:40 - actually with that in mind let's put
26:42 - this here so that anything we do is only
26:44 - going to happen if we directly run this
26:46 - python file I'm hoping that makes a bit
26:48 - of sense but you guys can ask chat GB
26:50 - here or look it up if you want some more
26:51 - clarification pretty standard uh python
26:53 - syntax anyways we're going to say the
26:55 - video URL is equal equal to
26:58 - input and we're going to say please
27:01 - enter a URL and this is going to be a
27:05 - YouTube URL and notice I just added a
27:08 - space here the reason for that is this
27:10 - input doesn't automatically put a space
27:12 - after it so I just put a space so that
27:14 - we'll get some separation with the colon
27:16 - okay so we're going to get the video URL
27:18 - we're then going to get the save
27:20 - directory so I'm going to say save dur
27:22 - is equal to the open file dialogue and
27:24 - I'm just going to quickly do something
27:26 - here I'm going to say if not folder like
27:28 - this and I'm going to say print
27:31 - please select folder dot dot dot we got
27:35 - to change this to say save directory and
27:38 - then I'm going to type continue like
27:40 - actually not
27:42 - continue uh yes please select a dur okay
27:46 - then I'm going to put an else here and
27:47 - I'm going to say download
27:50 - video video URL and save directory and
27:54 - actually rather than please select a
27:55 - folder I'm going to say invalid save
28:00 - location okay so what did I just do here
28:03 - I wrote a very simple line that simply
28:05 - asks for some input so it's going to get
28:07 - the video URL I then had this save
28:10 - directory so we're going to open the
28:12 - file dialogue you're going to see how
28:13 - that works in one second I'm just going
28:14 - to make sure that they actually did
28:16 - select a folder because it's possible
28:17 - they could just exit out of it if they
28:20 - did so which is actually in the L
28:22 - statement here I'm going to download the
28:24 - video if they didn't which is what this
28:25 - is checking I'm going to print they have
28:27 - an invalid save location now if we want
28:29 - this to be a bit more clear we could
28:31 - actually swap these around and say if
28:32 - they have a save directory then we'll
28:34 - download the
28:35 - video otherwise we'll do this and if we
28:38 - want we can do a little print statement
28:40 - here and say print
28:42 - started download just in case the
28:44 - download takes a while or you have slow
28:46 - internet so people know something is
28:47 - actually happening yeah zoom out a bit
28:50 - so we can read more of the code at once
28:52 - again all of this will be available from
28:54 - the description and let's give this a
28:56 - test python youtube. py enter a URL uh
29:01 - okay that's not the URL that I wanted
29:02 - let's go back here and grab my URL paste
29:06 - that in okay then notice it brings up a
29:09 - location so I could go desktop and what
29:13 - was this python automation okay now it's
29:16 - actually going to this isn't going to be
29:18 - good because it's going to save in the
29:19 - same thing okay let's just save it to my
29:21 - downloads I'm going to select downloads
29:23 - as folder notice it says started
29:25 - download okay we'll give this a second
29:27 - and then it should be downloaded inside
29:29 - of my downloads so if I go to my
29:31 - downloads CD dot dot CD dot dot CD
29:37 - downloads LS you can see that we have
29:40 - three types of projects that make you a
29:41 - programmer and it's been downloaded okay
29:45 - so that was it for project number two
29:47 - hope you enjoyed let's move on to the
29:49 - last project moving on to our last
29:52 - project we are going to write some code
29:53 - that will do an automatic folder backup
29:56 - for us this is actually pretty pretty
29:57 - simple uh but I just wanted to show it
29:59 - to you cuz it is kind of a realistic and
30:01 - real world project anyways what we need
30:03 - to start by doing is installing a python
30:05 - module just like before so we're going
30:07 - to say pip install and we're going to
30:11 - install the schedule module you could
30:13 - probably guess what this is going to do
30:15 - but it is going to help us schedule a
30:17 - kind of task to run now this will show
30:19 - you how to schedule really any task
30:21 - doesn't have to be a folder backup we're
30:23 - going to make a new uh python file here
30:24 - I'm just going to call this backup do pi
30:28 - and inside of here we're going to import
30:29 - a few things that we need so we're going
30:31 - to import OS which stands for operating
30:33 - system we're going to import shoe util
30:36 - or however you pronounce this which will
30:38 - do some copying operations for us we're
30:40 - going to import date time because when I
30:42 - back up a folder I actually want to save
30:44 - the new folder as the date that this was
30:46 - backed up so we can kind of have a
30:48 - history of all our backups I'm then
30:50 - going to import the schedule module and
30:53 - I'm going to import the time
30:56 - module okay we've got our Imports now
30:59 - what we need to do is specify what the
31:02 - source directory is so the thing that we
31:04 - want to back up and what the destination
31:07 - directory is so what I'm going to do is
31:10 - say my sourc dur is equal to and I'm
31:13 - just going to manually type in the path
31:14 - for this that I want it to be so I'm
31:16 - going to do c SL users SL Tim SLP
31:20 - pictures SL screenshots now you can do
31:24 - any folder that you want you just have
31:26 - to find the path to it now if you're
31:27 - wondering how do I find the path to it
31:29 - well there's a few ways you can do this
31:31 - now I have to show you on uh what do you
31:33 - call Windows cuz I'm obviously on
31:34 - Windows but if I open up my file
31:37 - explorer here and I go to my if I can do
31:41 - this pictures and screenshots what I can
31:44 - do is just click in the address bar here
31:45 - and it just gives me the path okay so
31:47 - that's how you would do this on
31:48 - something like Windows now on Mac you
31:50 - should be able to just open up a folder
31:52 - so you should be able to like right
31:53 - click on it and go to the properties of
31:55 - that folder or get more info about the
31:57 - folder and it should show you the path
31:59 - to where that folder is so that's how
32:01 - you can pick the location although I'm
32:02 - sure you guys can probably figure out
32:04 - how to find the PATH now we also need to
32:06 - have the destination directory so I'm
32:08 - going to say destination dur is going to
32:11 - be equal to and then here what I'm going
32:14 - to do is C colon SL users Tim SL desktop
32:19 - SLB backups now I just made a new folder
32:23 - on my desktop called backups you can put
32:24 - the folder wherever you want but
32:26 - obviously just make sure the folder
32:27 - exists that you're going to be backing
32:28 - up into okay so now we have the source
32:31 - directory and the destination directory
32:32 - we're going to make our function so
32:33 - we're going to say copy folder to
32:38 - directory and inside of here we're going
32:41 - to take in our source and our
32:43 - destination and we're going to say first
32:46 - of all
32:47 - today is equal to date time. dat. today
32:52 - now what that's going to do is simply
32:54 - give us the current day today that's all
32:56 - this does okay just gives us the
32:57 - day-to-day based on our computer we're
32:59 - then going to say the destination
33:02 - directory is going to be equal to os.
33:05 - path. joyin and we're going to take in
33:08 - our destination which is PED here and
33:11 - we're going to combine this with the
33:13 - string of today's date now the reason
33:16 - I'm doing this is that we're essentially
33:17 - going to have this backups directory
33:19 - okay and inside of here we're going to
33:21 - have a bunch of folders all these
33:23 - folders will be our backup and those
33:25 - folders will be labeled like 11
33:27 - you know 23 2023 right which is the
33:30 - current date so what I'm doing is I'm
33:32 - getting the current date and I am
33:34 - combining the current date with my
33:35 - destination directory so that inside of
33:38 - this directory I have a new directory
33:40 - which contains the backup which is named
33:42 - today's date okay now similarly to
33:45 - before we're going to do a try and we're
33:46 - going to say show you till. copy tree
33:50 - now copy tree just copies everything
33:52 - recursively which means anything inside
33:54 - of the folder it will copy and we're
33:56 - going to copy from our source to our
33:59 - destination directory okay make sure you
34:02 - don't use DES use destination directory
34:04 - because that's the new directory we just
34:05 - set up awesome then we'll do a little
34:08 - print statement here we can do an F
34:10 - string we can say folder copied to the
34:14 - destination
34:16 - directory and then we can do accept
34:18 - exception as e and actually I'm going to
34:21 - do something different because I'll show
34:22 - you how this works I'm going to accept
34:24 - the file exists error and I'm going to
34:28 - print an F string and say folder already
34:33 - exists
34:36 - in the destination now what this is
34:40 - doing essentially saying okay it's
34:41 - possible that an error occurs here when
34:43 - I try to copy my source directory to my
34:45 - destination directory if that's the case
34:48 - that means there's actually already a
34:49 - directory with the same name inside of
34:53 - this uh what do you call it base
34:55 - destination directory so so we are just
34:57 - going to catch that error so that our
34:59 - program doesn't crash and we are going
35:01 - to handle that by just printing out hey
35:03 - this is the error that occurred okay
35:05 - we're almost done so first of all right
35:07 - now if I want I can just do this so copy
35:09 - folder directory and I can pass my
35:12 - source directory and my destination
35:15 - directory now let's just open that up so
35:17 - if we go here and we go to desktop you
35:20 - can see I have backups nothing's inside
35:21 - of here okay now if I go ahead and run
35:24 - my code python backup. Pi we'll see if
35:28 - we get there or not it says folder
35:29 - copied here okay so if I open this up
35:31 - now you can see we have screenshots
35:33 - appearing now the name is a little bit
35:35 - glitched uh don't worry this actually
35:37 - will be named the correct thing for some
35:39 - reason whenever you copy a Windows
35:41 - created folder which is the one that I
35:43 - did it uh it kind of glitches in the ID
35:46 - so you can see date created actually
35:47 - shows the correct name here right but
35:49 - it's just appearing as screenshots cuz
35:51 - there's some kind of weird caching issue
35:53 - in Windows Explorer so it does actually
35:55 - have the correct name just trust me I
35:56 - was messing with this before too uh for
35:59 - some reason it it has like this weird um
36:02 - kind of caching thing if you were to
36:03 - like restart the computer you should see
36:04 - the correct name anyways not a huge deal
36:07 - I'm sure for you guys that worked
36:09 - because I got it working before but now
36:10 - what we want to do is we want to
36:12 - schedule this to run every single day at
36:14 - a certain time right because we want to
36:16 - back up consistently so what we can do
36:19 - is the following we can say
36:21 - schedule
36:22 - every. day. at and we can specify a Time
36:27 - and 24hour Time code that we want to do
36:29 - this backup at now for me right now it's
36:31 - about 652 so I'm going to just put this
36:34 - to 655 right now we can change that in a
36:36 - second and I'm going to do do and I just
36:39 - put the name of the uh function that I
36:41 - want to run whenever this schedule
36:44 - occurs so what we've done now is we've
36:46 - scheduled this task which is just a
36:47 - function right so notice I didn't call
36:49 - the function I just put the name of the
36:52 - function and what this will do here is
36:54 - call the function on my behalf
36:57 - now what we're going to see is that
36:58 - there's a little bit of an issue because
37:00 - we have our source and we have our
37:01 - destination which are parameters that we
37:03 - need to pass to this function so what we
37:05 - can actually do is write kind of a fancy
37:07 - line of python code which if you made it
37:09 - this far I will treat you with which is
37:11 - something known as a Lambda now I'm
37:13 - going to say Lambda and inside of here
37:16 - I'm going to put my
37:18 - sourcer and I'm going to put my
37:20 - destination ter now what I've done is
37:23 - I've essentially written what's known as
37:25 - an inline or a non is function so the
37:28 - idea is this do do takes a function that
37:32 - it needs to call the problem is we need
37:35 - to pass some parameters to that function
37:38 - there's a few other ways to do this but
37:39 - one way to do this is okay we're
37:41 - actually going to write the C of the
37:42 - function with the parameters that we
37:44 - need but we don't want to call the
37:47 - function we got to pass a function to
37:49 - this argument so what we do is we write
37:51 - our Lambda and now what this does is it
37:54 - actually wraps a function so it says
37:55 - okay Lambda is a function that's going
37:58 - to call this so now we're saying okay
38:00 - well we have a function inside of here
38:02 - so when we have do we call this Lambda
38:05 - function which then goes ahead and does
38:07 - this I know it seems weird but it's the
38:09 - same thing as doing this Define l and
38:11 - then inside of here you put this okay so
38:14 - let's copy this and paste that here and
38:17 - then rather than writing the Lambda we
38:19 - just put l which is the name of our
38:21 - function okay this is the exact same
38:23 - thing so the function does this which
38:25 - just calls this rather than doing this
38:27 - we use this Lambda which is this kind of
38:29 - inline Anonymous function bit more of
38:32 - advanced python syntax but hopefully you
38:34 - found it cool okay last thing we need to
38:36 - do we're going to say while true like
38:40 - this and we're going to say schedule.
38:43 - runor
38:45 - pending and we're just going to say time
38:47 - do sleep 60
38:50 - seconds now let's just move this down a
38:53 - bit and I'll explain so what we're doing
38:56 - is we're scheduling a task run every day
38:58 - at 6:55 however the way this schedule
39:00 - works is that it's not actually going to
39:02 - execute the task for us until we have
39:04 - this scheduled. run pending call so what
39:07 - we're doing is inside of a w Loop which
39:08 - means just infinitely we are going to
39:11 - consistently run this run pending
39:13 - command which will look for any
39:15 - scheduled tasks that have been scheduled
39:17 - that haven't yet ran and it will run
39:19 - them for us we're then going to sleep
39:21 - for 60 seconds or 1 minute so we don't
39:23 - just constantly keep calling this but
39:25 - every 1 minute we're going to check
39:28 - because this will go up every minute
39:29 - right if the task needs to be ran and if
39:32 - it needs to be ran we'll run it if it
39:34 - doesn't wellon nothing will run so
39:36 - technically you could just leave this
39:37 - python file running forever in the
39:39 - background on your computer and every
39:41 - day at whatever time you put it's going
39:43 - to update your code obviously if you
39:45 - turn off the computer you need to rerun
39:46 - the python file but this is how you
39:48 - schedule a task to run at a certain
39:50 - increment now you can also do every week
39:52 - every year every minute every second
39:54 - like any increment you want pretty much
39:56 - you can set and you can schedule a task
39:58 - so in our case we did every day but you
39:59 - can do any increment you want now I need
40:01 - to make the time a bit further because
40:03 - it took longer to explain and we can
40:06 - test this so I'm going to say Python and
40:09 - backup. piy currently it is oh issue
40:13 - invalid time format for a daily job uh
40:16 - okay I think we need to do sorry it's
40:19 - cuz I have 657 it would need to be
40:21 - 0657 but what I actually want to put is
40:25 - the 24-hour time code which is
40:27 - 1857 so now if I run this it's good it's
40:30 - just cuz I didn't have four digits for
40:32 - my time code so actually good error to
40:34 - run into there uh we want four digits
40:36 - now it's 6 uh 56 p.m. not 5 656 a.m. Sur
40:41 - so that's why I had that issue anyways
40:43 - I'm just going to wait one minute here
40:45 - and we should see that it will
40:46 - automatically actually do the backup for
40:48 - us let's give this a second and I'll be
40:50 - right back all right so it actually
40:52 - worked it says folder already exists cuz
40:54 - the folder is already in that location
40:56 - that we're trying to do anyways though
40:58 - it did automatically run this task as
41:00 - soon as it hit
41:01 - 657 now we could just continue to let
41:04 - this run and tomorrow at the exact same
41:06 - time it would then go ahead and run this
41:08 - backup task okay so I'm going to close
41:10 - this by hitting contrl C that's how you
41:12 - can actually quit this program when you
41:14 - have it running and there you go that
41:16 - will finish this uh video so I hope you
41:19 - guys enjoyed if you did make sure you
41:20 - leave a like subscribe to the channel
41:22 - obviously all of this code will be
41:24 - available from the link in the
41:25 - description and don't forget to sign up
41:27 - for my free introduction to software
41:29 - development
41:30 - [Music]
41:36 - course