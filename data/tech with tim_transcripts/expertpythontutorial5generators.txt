00:00 - hello everyone and welcome back to their
00:01 - expert Python tutorials so today's video
00:03 - we're gonna be talking about generators
00:05 - and generators are a pretty
00:07 - straightforward and actually very useful
00:09 - expert level feature in Python and
00:11 - chances are you've probably seen them
00:13 - before now before we get into generators
00:15 - I do need to quickly mention that this
00:17 - series has been sponsored by kite so
00:19 - kite is the AI autocomplete for Python
00:21 - that I've been using throughout this
00:22 - entire series and just through my daily
00:24 - coding you can see that when I actually
00:26 - start typing something we get these nice
00:28 - suggestions top popping up from kites
00:30 - with little kite icon here it is just
00:32 - the best Python autocomplete it works
00:35 - very quickly and actually saves you
00:36 - quite a bit of time and works for other
00:38 - modules that aren't just built in Python
00:39 - things so it's pretty useful if you guys
00:41 - want to download it there's a link in
00:43 - the description and it's free so you
00:44 - know go ahead and do yourself a favor if
00:46 - you do want that autocomplete ok so now
00:49 - let's get into generators now actually
00:51 - before I discussed Jenner's I want to
00:53 - show you the problem
00:54 - the generators help us solve so we
00:57 - should understand that in our computer
00:59 - we have a finite amount of memory a
01:01 - finite amount of RAM and when we run a
01:03 - computer program our program is loaded
01:06 - into that memory and when we're storing
01:07 - things manipulating variables lists all
01:09 - of that that's well stored in our
01:11 - computer's memory that's because that is
01:13 - the fastest way for us to retrieve and
01:15 - write to data while we're in a program
01:17 - you know we could put some things on a
01:19 - hard drive but that's pretty slow and it
01:21 - really depends on what we're doing but
01:23 - most of the time we're working in RAM
01:24 - and what that means is that we are
01:26 - limited to the amount of RAM that is in
01:28 - our physical computer when we're writing
01:30 - a computer program and in fact you know
01:33 - most of us will never even see the error
01:35 - that I'm about to show you but it is
01:36 - possible to actually fill up all of RAM
01:39 - right to use all of RAM to have nothing
01:42 - left and in fact that's what I'm gonna
01:43 - try to do right now so if we look at the
01:45 - example on the screen and I just started
01:47 - running the code you're gonna see this
01:48 - takes a second to run and what I'm
01:50 - trying to do is generate the sequence of
01:52 - all of the squares from the number 0 up
01:55 - until I want to say this is like 100
01:56 - million or 10 million or some number
01:58 - like that right and then what I'm gonna
02:00 - do is loop over all those numbers and
02:01 - print them out and you're gonna notice
02:03 - that very shortly yes and there we go we
02:05 - get the error we get a memory error
02:07 - which essentially means that nope we
02:09 - can't do this
02:10 - these numbers are too big we don't have
02:12 - enough room left in memory we're not
02:14 - to use that much space no that's not
02:16 - allowed so how do we go ahead and how do
02:18 - we fix this well this is where we use a
02:20 - generator now before I actually create a
02:23 - generator I want to look at something
02:24 - here if all I'm doing in this specific
02:27 - application is just printing or
02:29 - processing say one value at a time which
02:31 - is what I'm doing when I'm looping over
02:33 - this list right one value at a time I'm
02:35 - processing and I'm not accessing other
02:37 - values I don't need values that are in
02:39 - the future
02:40 - I don't need values that are in the past
02:41 - then is it really necessary for me to
02:44 - create a list like this to loop through
02:46 - and the answer is no obviously right in
02:48 - fact what I could do is replace this for
02:50 - loop with just a print statement right
02:52 - so I could replace this entire thing
02:53 - actually we'll just do it down here
02:54 - let's say for I in range and then we'll
02:58 - just type that same number whatever
02:59 - that's close enough
03:00 - and then what I can do is print by the
03:03 - exponent two like that right and this is
03:05 - the same thing and this is the idea
03:07 - behind generators this is not what we're
03:09 - gonna do precisely to generate this
03:12 - sequence but generators allow us
03:14 - essentially to look at one value at a
03:16 - time and to not store the entire
03:19 - sequence of numbers when we don't need
03:21 - to do that and I'm actually going to
03:23 - code out our own kind of generator
03:25 - pattern here that just uses a class and
03:28 - some dundar methods to illustrate what's
03:30 - actually happening inside of a generator
03:32 - when we use it now I understand that
03:34 - most of you probably still don't know
03:35 - what a generator is but after I write
03:37 - this class and start showing you
03:38 - hopefully this should make sense so what
03:40 - I'm gonna call this is just Jen and what
03:43 - I want this to do is the exact same
03:44 - thing that we did before we're just
03:46 - gonna generate a sequence of all of the
03:48 - squares up to some number let's say that
03:50 - numbers then so in this case I'm gonna
03:52 - say let's define underscore underscore
03:54 - init underscore underscore at let's take
03:57 - self let's take and let's say self dot n
04:00 - is equal to N and then let's say self
04:03 - dot last is equal to zero so this is
04:05 - gonna be the last number that we
04:07 - generated the square for and we're gonna
04:09 - use this variable to keep track of the
04:11 - last number we generated the square for
04:13 - so that we know which next number to use
04:15 - and I'll show you how this works we're
04:16 - gonna define a actually in this case
04:19 - we're going to do dunder method so
04:20 - underscore underscore next it's gonna
04:22 - take self and what its gonna do is
04:23 - return self dot next now I know we
04:26 - haven't defined
04:27 - self-thought next yet what we're gonna
04:28 - do that now so define next self and
04:31 - didn't hear what I'm gonna do is
04:32 - generate that sequence that I did before
04:34 - except I'm just gonna do it using these
04:36 - two variables I'm not gonna do it using
04:38 - a for loop like we had before and
04:40 - storing everything in a list so what I'm
04:42 - gonna say is our V equals self don't
04:45 - last to the exponent two so this is
04:47 - saying our return value is gonna be
04:48 - equal to whatever this last number is
04:50 - that we have to the power to right so
04:52 - we're gonna find the square for that
04:53 - then I'm gonna say self thought last
04:55 - plus equals one we're gonna say if self
04:59 - thought last and in this case equals
05:01 - equals self dot n plus one actually what
05:06 - I need to do is sir I put this at the
05:07 - beginning of my loop so if self thought
05:09 - last here equals equals self thought and
05:12 - then what we're gonna do is say raise
05:13 - stop iteration stop iteration is just an
05:17 - error that we can raise that essentially
05:18 - tells us hey no we can't go any further
05:20 - and then what we're gonna do is return
05:22 - this RV okay so now I'm going to show
05:25 - you how we can use this so this we can
05:27 - actually use in a very similar way that
05:29 - we were kind of looping through the
05:30 - numbers before and we're going to say in
05:31 - this case G equals Jen let's say we want
05:34 - to loop up to you know some massive
05:36 - number like that and now if I want to
05:38 - actually loop through this entire
05:40 - sequence what I can do and I mean
05:41 - something you're saying oh this isn't
05:42 - big enough okay let's go bigger
05:44 - we'll say Wow in this case I'm true
05:48 - we're gonna say try print the next value
05:53 - of G right and what this underscore R
05:57 - square next is allowing me to do is call
05:58 - this next function or method or whatever
06:01 - you want to call it on G here and we can
06:04 - print the value and then I'm gonna say
06:05 - accept stop iteration and then we're
06:09 - simply going to break this loop like
06:11 - that and we should actually be good with
06:14 - that okay so what this is gonna do now
06:16 - is loop and I'm just gonna make this
06:17 - number smaller just so we can see that
06:18 - it does actually just go up to a hundred
06:20 - um but I promise you this does work with
06:22 - an infinite sequence and we'll watch and
06:24 - we can see that this works just like we
06:26 - would have before and we can generate
06:28 - all of the squares for these numbers now
06:30 - I can make this number absolutely
06:32 - massive I can make it you know that's
06:33 - super long number and this would be
06:34 - totally fine and in fact that's because
06:37 - we're not storing all this in a list
06:39 - we're restoring all of the previous
06:40 - values all we're keeping track of is
06:42 - kind of the internal state of the next
06:45 - number we need to generate and this is
06:46 - the idea behind a generator is that we
06:48 - don't need to store every single value
06:50 - what we can do is just store you know
06:53 - almost the last value that we generated
06:55 - and then using that we can generate the
06:58 - next one right or we can figure out the
07:00 - next number to generate and obviously
07:03 - this kind of pattern like you can write
07:04 - this if you want but what Python has
07:06 - done for us is kind of come up with a
07:07 - pattern that makes us a little bit
07:09 - easier called the generator pattern so
07:12 - what I'm gonna do now is pretty much
07:13 - take this class I'm gonna convert it to
07:15 - a generator and I'm going to show you
07:16 - how this works so let me say define gen
07:19 - and here this will just take the value
07:21 - and what I'm gonna say in here say for I
07:23 - in range and in this case we'll say and
07:27 - then we're gonna say yield I to the
07:30 - exponent - now I know this seems weird
07:33 - but essentially the way that this works
07:34 - is we instead of using this crazy
07:36 - pattern that we had before we're gonna
07:38 - use the yield keyword now what the yield
07:40 - keyword does is as soon as we hit this
07:42 - it returns this value until wherever
07:45 - this was called from or wherever we were
07:47 - looping through and then it pauses this
07:50 - function so rather than stopping the
07:52 - execution of this function which is what
07:54 - a regular function would do when we hit
07:56 - the return keyword it just pauses it
07:58 - which means we actually keep track of
08:01 - what I was so we still know what that
08:03 - number is we still know you know what n
08:06 - is we still have all of the internal
08:07 - information of this function to store it
08:09 - in memory we haven't gotten rid of that
08:10 - but we're just pausing when we hit this
08:13 - yield keyword that's what that means so
08:15 - think of yield as like a pause whereas
08:17 - for example return would be a stop of
08:20 - execution so we can use this generator
08:23 - by doing something like this G equals
08:26 - Jen and give it some number like this
08:28 - and then what we can do is say for I in
08:30 - G and then what we can do is simply
08:33 - print out I now this is gonna work the
08:36 - exact same as all the other examples
08:38 - I've seen I've shown you before and you
08:40 - can see that indeed it is working and we
08:42 - could run this you know infinitely and
08:43 - we're not actually gonna ever run into a
08:45 - problem and in fact I probably should
08:46 - have made this number a little bit
08:47 - smaller because I feel like this is
08:48 - gonna run for a long time but anyways
08:50 - that can go down there so this is the
08:52 - point of a generator
08:53 - and I know some of you are still
08:54 - confused but the way you have to think
08:56 - about it is we create this generator by
08:59 - creating this function Jen with what do
09:02 - you call you know hundred thousand or
09:03 - whatever it is whatever this number is 1
09:05 - million and then what we can actually do
09:07 - is loop through this and what happens
09:10 - when we loop through this is it runs
09:12 - this for loop up until it sees this
09:14 - yield keyword so it sees this yield
09:16 - keyword i 2 squared right and then as
09:18 - soon as it sees that what it does is it
09:21 - pauses the funkiness is okay we don't
09:23 - need to run this anymore and then it
09:25 - waits until it's called again
09:27 - so until we loop through it again with
09:28 - this for loop the next method on it is
09:30 - called and then it returns to us the
09:32 - next yield and because it's pausing
09:35 - rather than stopping execution this is
09:37 - totally fine and in fact we can actually
09:39 - look at how much memory this function is
09:41 - using versus if we were to do the same
09:43 - thing say with a list and we'll do that
09:46 - in a second but I want to show you that
09:47 - to use this generator I don't have that
09:50 - just loop through it with a for loop I
09:51 - can use that next method that I showed
09:53 - you before and if I do next G and I run
09:56 - this you can see we get the 0 because
09:57 - obviously the first answer is 0 and if
09:59 - we do this a few times we get 0 1 4 9 so
10:06 - this is how this works when we call the
10:07 - next method or the next function on our
10:10 - generator we get the next value so
10:12 - essentially up until it hits the next
10:14 - yield keyword and in fact we actually
10:16 - can use more than one yield keyword in
10:19 - our jann if we want and I could say
10:20 - yield 1 and we can do as many yields as
10:25 - we want so let's do this and then let's
10:28 - actually show what happens when we go
10:30 - past how many yield keywords we have so
10:32 - if we look at this here we can see we
10:34 - get 10 a hundred thousand ten thousand
10:38 - and then we actually end up getting air
10:40 - and there was a one up here just you can
10:41 - see and that error is actually a stop
10:43 - iteration air right here because we
10:46 - don't have any more keywords yield
10:47 - inside this generator so there's nothing
10:50 - more to return so this works the exact
10:52 - same way that I showed you with that
10:53 - class that I did before where it keeps
10:55 - track of the internal state and knows
10:57 - what line it was on when it paused and
10:59 - then it goes to the next one until it
11:01 - hits the next yield keyword and that's
11:03 - when it pauses again and that's how a
11:04 - generator
11:05 - and they're pretty useful there's some
11:07 - other things that we can do with them
11:08 - and in fact I'll show you comparing the
11:11 - size of say a generator like the one we
11:13 - just created versus actually generating
11:16 - an entire list so you can see in memory
11:18 - how much this is actually using so if we
11:20 - want to generate the sequence right we
11:21 - know this generator works we can use
11:22 - that now so let's run that and what I'm
11:25 - gonna do now is import sys I'm gonna
11:29 - actually make that list that I did
11:30 - before so psi X equals and in this case
11:33 - we'll say I to the exponent two for I in
11:37 - range and we'll just do let's say 10,000
11:41 - like that and we'll replace 10,000 here
11:43 - and now what I'm going to do is just
11:44 - print out the size of both of these so
11:46 - I'm gonna say sys dog get size of and in
11:51 - this case the first size we'll look at
11:52 - is X which is that list and then we'll
11:55 - get the size of G and I'll show you the
11:59 - difference in memory so what this does
12:01 - is tell us how many bits are actually I
12:03 - believe how many bytes are being used by
12:05 - whatever object is we pass in so in this
12:07 - case the list and in this case the
12:08 - generator you're going to see that we
12:09 - have a substantial difference
12:11 - so this first list is using forty three
12:13 - thousand eight hundred sixteen bytes to
12:15 - generate and store the sequence whereas
12:17 - our generator is only using 64 so you
12:20 - can see that this is really a crazy
12:22 - optimized way to be able to generate say
12:25 - infinitely lank infinite length
12:27 - sequences and when we don't need every
12:30 - single value in the sequence at once we
12:32 - just need it one at a time which is what
12:34 - we're doing when we say loop through
12:36 - something then it's much better to use a
12:38 - generator to generate this sequence for
12:40 - us now there's a lot more that I can
12:43 - show you with a generator we can close a
12:45 - generator we can stop a generator we can
12:47 - send values to a generator but I'm gonna
12:49 - leave that for people that are a little
12:51 - bit more advanced the point of this is
12:53 - to introduce you to this concept of the
12:55 - generator whereas when you're
12:57 - programming think about say if you're
12:58 - gonna make a massive list like this with
13:00 - a bunch of values do I need all of these
13:03 - values am I using one value at a time am
13:06 - i looping through my printing it am i
13:08 - adding it to something or do I only need
13:10 - say the last value and this value or a
13:13 - few values and obviously you can make
13:14 - your generators more complicated than a
13:16 - simple for loop you can do some more
13:18 - complex can't be
13:19 - you can start variables inside of here
13:21 - because remember that this yield keyword
13:23 - just pauses the execution when this
13:26 - generator is called and what that means
13:27 - is that I can loop through this this
13:29 - first generator say you know five times
13:32 - and then somewhere later in my program
13:34 - continue looping through it and it will
13:37 - you know resume where it left off and
13:39 - that's a useful kind of construct it's
13:41 - hard to show any examples in this you
13:42 - know short amount of time but hopefully
13:44 - this gave you an idea of when you would
13:46 - use a generator so with that being said
13:48 - I hope you guys enjoyed if you did make
13:50 - sure you leave a like subscribe to the
13:52 - channel and as always let me know if
13:53 - there's any other expert-level features
13:55 - you would like to see in the comments
13:56 - down below