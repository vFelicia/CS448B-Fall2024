00:00 - hey guys and welcome back to another
00:02 - video in today's video I am gonna be
00:04 - continuing with my intermediate Python
00:06 - tutorials and we're gonna be moving on
00:08 - to something called name to tuple or
00:10 - tupple whichever one you prefer
00:12 - which is a part of the collections
00:14 - datatype or module class whatever you
00:18 - want to call it so in the previous video
00:19 - I introduced you to kind of to the
00:21 - collections module in Python and I
00:24 - showed you counter which is really
00:25 - useful today I'm going to be showing you
00:27 - named tuple which is another data type
00:29 - or class whatever you want to call it
00:31 - within that module and pretty much this
00:34 - is the description of it I'm just going
00:35 - to read it right off of the
00:36 - documentation here because it explains
00:38 - it better than I could come up with so
00:40 - let's go ahead and do that
00:41 - named tuples assign meaning to each
00:43 - position in a tuple allow for more
00:44 - readable self-documenting code they can
00:47 - be used wherever regular tuples are used
00:49 - and they add the ability to access field
00:50 - by names instead of position index so
00:53 - you should understand a bit of that but
00:55 - if you don't obviously I'm going to go
00:56 - through exactly how this works and how
00:58 - we can use it so the main difference
00:59 - between a name tuple and regular tuple
01:02 - is you could access things by element
01:04 - and it's just a lot nicer to read in
01:05 - your program so they might come in handy
01:07 - if you're coding large things or other
01:09 - people are gonna be reading your code so
01:11 - let's go ahead and first off start by
01:13 - importing collections like this and
01:15 - we're just gonna from collections we are
01:19 - going to import named tuple okay so now
01:27 - that we've done that what we're going to
01:28 - do down here is I'm just gonna create
01:30 - something that I'm kind of gonna go and
01:32 - show you what exactly it says so I'm
01:34 - just making a new variable point I'm
01:36 - gonna set it equal to a named tuple with
01:39 - name point and then it's going to have
01:43 - fields XY and Z and I'm gonna show how
01:46 - this works okay so what I've just done
01:49 - here is I've said point is going to be
01:52 - equal to a new object which is a named
01:54 - top pole or tuple the name of the tuple
01:57 - is point and it has fields XY and z now
02:00 - this looks a little weird you might be
02:01 - confused what we're gonna do whatever we
02:04 - want to create a new point that is in
02:06 - the form of this name tubule is we're
02:08 - gonna treat this like a class and we're
02:10 - gonna do some like this one so a new P
02:12 - is
02:13 - equal to point and that we need to give
02:16 - our parameters so in this or argument so
02:18 - in this case an XY and Z so we're gonna
02:20 - say three four or five like so now you
02:23 - might be looking at this week X Y Z this
02:25 - is one string this might be the name of
02:28 - one parameter the way that this works
02:30 - ends actually really useful is that it's
02:32 - automatically gonna break up this string
02:34 - XYZ into three different parameters so
02:37 - I'm just gonna print this to the screen
02:38 - to kinda show what I mean here so I'm
02:41 - just gonna print new P and you can see
02:44 - that we have x equals 3 y equals 4 and Z
02:46 - equals 5 now what happened here is when
02:48 - we gave an iterable object as our
02:50 - different parameters you can see that we
02:53 - get it just breaks it up by a space so I
02:56 - do something like Gy and then I run this
02:59 - here you can see now Gy is equal to 4 I
03:01 - can add another one on the end like H oh
03:04 - and then we're just missing one argument
03:06 - so I'd have to add another number in
03:08 - here so that we get H is equal to 8 I
03:10 - can also do the same thing with a list
03:12 - per se so if I have a list and I want
03:13 - all these to be the names of it this is
03:15 - my X Y and let's just do like L and we
03:21 - run this takes Fortner okay I keep
03:23 - forgetting to fix this anyways you can
03:26 - see we get X Y L any iterable object
03:29 - will work I'm not exactly sure how a
03:31 - dictionary works but I'm pretty sure it
03:32 - takes the keys so let's just go ahead
03:34 - and have a look at this one we'll just
03:36 - say X 0 y 0 said 0 now this might crash
03:47 - but I just want to see if this actually
03:48 - works oh yeah it does work so it just
03:50 - takes the key names ignores the value so
03:52 - we get x y and z and then I guess you
03:56 - can do the same thing with any other
03:57 - iterable object but those are the only
03:58 - ones I can think of that are useful
03:59 - right now so anyways we want to create a
04:02 - new tuple or a new name couple what
04:04 - we're gonna do is just say whatever the
04:07 - name of that's gonna be is equal to
04:09 - point which we've set up here to be this
04:11 - type with these like parameters
04:14 - attributes and then we just give it
04:16 - those parameters now there's a lot of
04:18 - really cool things and methods that go
04:20 - along with this name to tupple and
04:21 - that's why it's useful so first of all
04:23 - you can do something like this new px
04:27 - new py and new P lips touch zen-like so
04:33 - and now this is gonna do is it's going
04:34 - to allow us to access each element by
04:37 - its index so by its name which you can't
04:39 - do with a regular temple so you see we
04:42 - get three four or five to the screen
04:43 - like that and we can use the same
04:46 - operations that we use on basic tuples
04:48 - so I knew something like new p0 like
04:51 - that and it's my mud thing just popped
04:54 - up somewhere else and you can see we get
04:55 - three because that's the first one that
04:57 - shows up we can also print this so it
05:00 - looks in the form of a dictionary so I'm
05:02 - just gonna say underscore is dict like
05:06 - this I believe this is the method all
05:07 - right not is ass sorry and when we print
05:10 - this to the screen you'll see what shows
05:12 - up and it says an order dictionary and
05:15 - it gives us a list and then it gives us
05:17 - the all the tuples within so X 3 y 4 z 5
05:21 - kind of a different form if you wanted
05:23 - to play with that and use that we can
05:25 - also print out all the field names which
05:27 - is useful say you forget the fields into
05:29 - new P dot and then fields and it gives
05:32 - us a tupple with those fields in it the
05:35 - next method that we can use is the
05:37 - replace method this one's pretty
05:39 - straightforward but all you have to do
05:40 - simply is type I don't know let's see
05:42 - here
05:43 - new P dot underscore replace and just
05:46 - make sure you guys remember to put these
05:48 - underscore here all the methods pretty
05:50 - well for this required underscore don't
05:52 - ask me why but that's the way they're
05:54 - written they need to underscore and then
05:55 - you're gonna put a key name so say I
05:57 - wanted to replace Y I can say it equals
05:59 - to 6 so we'll run that and then if I
06:03 - just go here just to show you that we
06:04 - did change that let's print new P like
06:07 - that and you can see oh why did not
06:10 - change two to six
06:13 - that's weird listen let me just see if I
06:14 - print this to the screen if it's gonna
06:15 - change it should've worked
06:21 - new P like so let's check and Y is not
06:25 - changing to four that's very interesting
06:28 - why that is not working ok so it's not a
06:32 - quick look at the documentation and the
06:34 - reason why I can't do what I'm trying to
06:36 - do here with this replace is because
06:38 - this
06:39 - doesn't actually change the tuple object
06:43 - it's not capable of doing that so what
06:46 - we have to do is we have to assign a new
06:49 - variable or a new object to that so
06:51 - pretty much what this does is it returns
06:52 - a new named tuple which we then can set
06:56 - to in this case the same name it's gonna
06:59 - do the same thing that we tried to do
07:00 - except we just need this new P equals to
07:02 - hope that makes sense so now if I run
07:05 - the program we can see that finally this
07:07 - is working we are changing X or I was
07:10 - just trying to change Y before but I
07:11 - switched it to X to see if there was an
07:12 - issue there you could see that that is
07:14 - working like that so anyways that is
07:17 - pretty much it I'll show one last method
07:20 - here if you guys are still watching
07:22 - so pretty much we can do something like
07:24 - a new a new point so say P 2 is equal to
07:26 - point dot underscore make and then I'm
07:30 - going to put a little list in here let's
07:33 - say like a b c now what this is gonna do
07:37 - is same similar thing to up here is it's
07:39 - just gonna automatically grab all of
07:41 - these elements in our list and assign
07:44 - them to XYZ accordingly in our named
07:47 - tupple so you can see if I print Peter
07:49 - to the screen now and we give it a run
07:53 - no errors and things where I can find x
07:55 - equals a y equals B's that equals
07:57 - [Music]