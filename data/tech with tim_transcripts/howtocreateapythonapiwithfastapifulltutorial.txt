00:00 - so what is an API well API stands for
00:02 - application programming interface think
00:05 - of an API like a waiter in a restaurant
00:07 - you the customer requests something from
00:10 - a menu and the waiter or API
00:12 - communicates your order to the kitchen
00:14 - once your dish is ready they bring it
00:16 - back to you now in the digital world an
00:18 - API allows one piece of software to
00:20 - request data from another and receive a
00:23 - response for instance when you check the
00:25 - weather on your phone an API is what
00:27 - communicates between the app and the
00:29 - weather database
00:30 - apis are used all over the place but
00:32 - this video will focus on apis for web
00:35 - applications now most apis interact with
00:37 - data through four main methods
00:39 - collectively known as crud create read
00:43 - update and delete let's break those down
00:46 - create this is done using the post
00:48 - method it's like telling a system hey I
00:50 - want to add something new then we have
00:52 - read this is done through the get method
00:55 - it's basically saying can you show me
00:56 - some piece of information update this
00:59 - involves the put or the patch methods
01:01 - and it's like saying I want to change
01:03 - this existing item to a new value and
01:05 - then delete as the name suggests delete
01:08 - method is used to remove something now
01:10 - each of these methods facilitate a
01:12 - different type of interaction with the
01:13 - data ensuring the Digital Services can
01:16 - manage their resources effectively now
01:18 - when you use an API you make a request
01:20 - to a server this request is your way of
01:22 - asking the server for data or some
01:25 - action the server then processes your
01:27 - request and sends back a response now
01:30 - this response can tell you if your
01:31 - request was successful by using a status
01:34 - code or it might include some of the
01:36 - data that you've asked for now Json or
01:38 - JavaScript object notation is a format
01:41 - for structuring data it's both easy for
01:43 - humans to read and write as well as for
01:45 - machines to parse and generate Json is
01:48 - made up of two basic structures objects
01:51 - and arrays objects are collections of
01:53 - key value pairs resembling dictionaries
01:56 - in Python arrays these are ordered lists
01:59 - of values similar to lists in many
02:01 - different programming languages now
02:03 - because of its structured format Json is
02:05 - widely used for sending data in web
02:07 - applications specifically between apis
02:10 - it's what our API will accept and what
02:12 - it will return now building an API is
02:14 - great and all but it only means
02:16 - something if it's actually accessible
02:18 - online whether you're building a hobby
02:20 - project or you want to actually push
02:21 - something to production you're going to
02:23 - need to deploy it now that's where the
02:25 - sponsor of this video hostinger comes in
02:28 - now hostinger is a super easy to use web
02:30 - hosting platform that offers a ton of
02:32 - different options for any use case now
02:34 - for an API like this we're going to be
02:36 - looking at their virtual private server
02:38 - plans which give us complete control of
02:40 - the server allow us to log in with root
02:43 - access and do all of the advanced
02:44 - configurations that we need for an API
02:47 - like this so if we scroll down you can
02:49 - see that they have really affordable
02:50 - options here and what I'd recommend is
02:52 - checking out their KVM 2 so what I'll do
02:54 - now is Select this plan and just walk
02:56 - you through quickly how you could
02:57 - actually go about hosting this site
02:59 - using host hosting so our first step
03:00 - here is to select our period create or
03:03 - sign into an account and then choose one
03:04 - of the various payment methods and make
03:06 - sure we click on have a coupon code and
03:08 - enter my exclusive code Tech with Tim
03:11 - now once we've done that we'll be
03:13 - brought to a page where we can set up
03:14 - our virtual private server so the first
03:16 - step is to select our location and you
03:18 - can just pick whatever is closest to you
03:19 - for the lowest latency now the next step
03:21 - is to choose our operating system where
03:23 - we have a lot of different options if
03:25 - you scroll down here what I'd recommend
03:27 - for an API like this is using the latest
03:29 - version of auntu so let's select that
03:32 - and now we need to set a strong root
03:33 - password so that we're able to actually
03:35 - sign into our VPS and do the
03:36 - configuration later on so now that our
03:39 - VPS has been set up we can view all of
03:40 - the configuration options and details
03:43 - from this dashboard right here but the
03:45 - next step is to actually SSH into our
03:47 - VPS and configure it for deploying our
03:50 - fast API now this does require a few
03:52 - additional steps that I can't show you
03:54 - in this Quick Clip so what I'm going to
03:56 - do is leave a link in the description
03:58 - that walks you through continuing this
03:59 - deployment regardless you are going to
04:01 - need a VPS to do this so make sure you
04:03 - check out hostinger from the link in the
04:05 - description and use my unique code that
04:07 - you'll have the VPS ready when you do
04:09 - eventually go to deploy this and have
04:11 - your hosted API now for this video we'll
04:14 - use fast API to make a simple crud API
04:17 - fast API is a performant python
04:19 - framework which is easy to learn fast to
04:22 - code and ready for production fast API
04:25 - provides automatic documentation for
04:27 - apis that you write and handles all the
04:29 - complexities of API development for you
04:32 - for example it will automatically
04:33 - convert python objects to and from Json
04:36 - validate different request and ensure
04:38 - the correct data is provided so with
04:40 - that said let's go ahead and get started
04:43 - so in order to get started we're going
04:44 - to make sure we have python version 3.8
04:46 - or above installed we're then going to
04:48 - open up a new python file in whatever
04:50 - editor we want in this case I've got
04:52 - main.py inside of Visual Studio code we
04:55 - then need to install the different
04:56 - python packages that allow us to use
04:58 - fast API to do that we're going to open
05:01 - up a terminal or a command prompt and
05:03 - we're going to type the following
05:04 - command which is PIP install and then
05:07 - fast API we also need uvicorn and we're
05:10 - going to need pantic so install all of
05:13 - these if you're on Windows you can
05:14 - change this command to Simply say pip if
05:16 - for some reason this command does not
05:18 - work for you then I will leave two
05:20 - videos on the screen that will show you
05:21 - how to fix this and I'll link them in
05:22 - the description on Mac or Linux it's pip
05:24 - 3 and then install fast API uvicorn
05:27 - pantic on Windows it's simply pip so
05:30 - let's clear that and let's close our
05:32 - terminal and now let's write a simple
05:34 - API and see how fast API works so to do
05:37 - that we're going to say from Fast API
05:40 - import fast API and then we're going to
05:42 - create a new instance of this so we're
05:44 - going to say app is equal to fast API
05:48 - and we're going to put a set of
05:49 - parentheses now what we can do is create
05:51 - a simple root I'm going to go through
05:53 - this quickly and then we'll explain it
05:54 - later I'm going to say at app Dot and
05:57 - this is going to be get for now we're
05:59 - we're just going to go with the base
06:00 - root and we're going to define a
06:02 - function now you can Define the function
06:04 - asynchronously like this or you can
06:06 - Define it normally with the function
06:08 - syntax so I'm going to say Define and
06:10 - this will just say read and then what
06:13 - this is going to do is simply return a
06:15 - python object so we're just going to say
06:17 - hello and that's going to correspond
06:19 - with world so now when we go to slash on
06:21 - our API route it should simply just
06:24 - return this data lastly I need to
06:26 - actually run the API so to do that I'm
06:28 - going to say if underscore name equals
06:30 - uncore maincore uncore and then I'm
06:34 - going to import inside of here uicorn
06:37 - and I'm going to say uvicorn do run and
06:41 - we're going to run the app we're going
06:43 - to run it on this host which is
06:45 - 0.0.0.0 and then we are going to say the
06:48 - port is equal to 8,000 and we need to
06:52 - make sure there is a comma there now
06:53 - that's it we've just created our first
06:55 - API here using fast API and the way this
06:58 - works is the following we create an
07:00 - instance of fast API we set up a basic
07:02 - route in this case it's a get endpoint
07:04 - meaning you can send a get request to
07:06 - this URL and then this function will be
07:08 - triggered when this function is
07:10 - triggered we're going to return this
07:11 - python dictionary fast API will
07:13 - automatically convert that into Json
07:15 - data for us then what we do here is
07:18 - actually run the API this line is simply
07:20 - checking to make sure we're executing
07:22 - this python file and that this file is
07:24 - not being imported from some other file
07:26 - we're then importing uicorn uvicorn is a
07:29 - simple web web server that will allow us
07:30 - to actually run this API there's other
07:32 - ways to trigger this but this is the
07:34 - easiest we say uicorn do run we're
07:36 - running this API the host
07:39 - 0.0.0.0 means we're running on our local
07:42 - IP address and then Port 8000 it's a
07:44 - port where we can access this API so in
07:47 - order to run this now we need to run the
07:48 - python file so we're going to type
07:50 - Python 3 main.py on Windows it would
07:52 - simply be Python and now it's going to
07:54 - start running our server you'll see
07:56 - where it's actually running and you can
07:58 - copy this URL and put it in your browser
08:00 - or you can hold on control and then
08:03 - click it and it should open up in a new
08:04 - browser window let me bring this onto
08:07 - the screen and then we'll check it out
08:09 - so you can see that my API is running
08:11 - we're on Port 8000 and we get the data
08:13 - hello world now where this gets really
08:15 - cool though is that we can go to the/
08:18 - docs URL and you'll notice that
08:20 - documentation will have automatically
08:22 - been generated for the API that we wrote
08:25 - so we can actually click into this and
08:26 - we can see exactly how this works now
08:29 - what we can also do is we can go to the
08:31 - slash redock endpoint and this is going
08:33 - to give us a different version of the
08:35 - documentation okay so there's two
08:37 - versions you can go to slash docs this
08:39 - gives you this one which is the one that
08:41 - I typically prefer and then you can go
08:43 - to slash redock where you just get a
08:45 - different version okay so that's one of
08:47 - the benefits of fast API the auto
08:49 - documentation but you're also going to
08:51 - see how quick it is to write other types
08:53 - of API endpoints so let's go ahead and
08:55 - start doing that for now what I want to
08:57 - do is build a very simple project where
09:00 - we can have some different tasks I want
09:02 - to represent a database we're going to
09:03 - do that in memory and we're going to
09:05 - have the ability to create different
09:07 - tasks delete tasks update tasks Etc so
09:10 - let's see how we can go about doing that
09:12 - so the first thing I'm going to do here
09:14 - is I'm going to say tasks is equal to an
09:16 - empty list now typically you would
09:18 - connect this to a real database but in
09:20 - our case I'm just going to have an
09:21 - inmemory database which means whenever
09:23 - we turn off the server all of our data
09:25 - will be lost but that's fine because
09:27 - we're just testing things out for now
09:28 - later on you could actually attach this
09:30 - to a real database and then you could
09:32 - persist the data okay so we have tasks
09:34 - equal to an empty list and now what
09:36 - we're going to do is create a model that
09:38 - represents our different tasks now to do
09:40 - that we need to import a few different
09:42 - things so we're going to say from PI
09:46 - dtic import and we are going to import
09:49 - the base model we then are going to say
09:52 - from typing this is built into python we
09:55 - are going to import the list and the
09:57 - optional type and we're going to say
09:59 - from uu ID import and then in all
10:03 - capitals here this is going to be uu ID
10:05 - and uu
10:07 - id4 okay now let's zoom out a little bit
10:10 - so we can read this a bit easier now
10:11 - what uuid means is unique identifier and
10:14 - this is a python function that we can
10:15 - call that will always guarantee a unique
10:18 - ID now what we're going to do is create
10:20 - a simple class and this class is going
10:22 - to represent the objects that we're
10:23 - passing around throughout this API so as
10:26 - I said before we use Json when we are
10:28 - sending data to the API and receiving
10:31 - data from the API and what fast API will
10:33 - do for us is it will take what's known
10:35 - as a pantic model which is what we're
10:37 - writing right now and automatically
10:39 - convert it into valid Json this is one
10:41 - of the benefits of using fast API you
10:43 - can write your code in normal Python and
10:46 - it can automatically be converted to and
10:48 - from the Json data that the API needs so
10:50 - we're going to say class task and then
10:53 - we are going to inherit here from our
10:55 - base model what we do inside of here is
10:58 - we Define all of the different fields
11:00 - that we want to have on our data and we
11:02 - specify what the type of them will be so
11:04 - we're going to have an ID we're going to
11:06 - say the ID is optional but the type of
11:09 - it is uuid and this for now will be
11:12 - equal to none now optional is what we're
11:14 - inheriting here from typing and it just
11:16 - means that we don't need to pass an ID
11:17 - when we create this model next we're
11:20 - going to say title and this is going to
11:22 - be of type string we're then going to
11:25 - say description this is also going to be
11:28 - optional
11:29 - and this is a string as well and then
11:32 - we're going to say completed and this is
11:34 - going to be a Boolean and this is going
11:36 - to be equal to false okay there's a lot
11:39 - more advanced types that you can create
11:40 - here but this is a very basic pantic
11:43 - model notice that we've typed all of the
11:45 - different fields that we'll have here
11:47 - that's very important for doing the
11:48 - correct validation and fast API will
11:51 - handle all of that for us for example
11:53 - when I make this a string that means if
11:54 - I try to create a new task using the API
11:57 - and I don't pass a string the API will
12:00 - actually raise an exception so now what
12:01 - we'll do is we'll write ATA dopost we'll
12:05 - take in SL tasks and then slash this is
12:09 - the URL that we'll go to to create a new
12:11 - task we'll specify the response model
12:14 - which is equal to the task pantic model
12:17 - and that is simply telling fast API that
12:19 - we want to use this model to encode the
12:21 - Json that's returned from this rout
12:24 - we're then going to say Define and this
12:26 - is going to be creatore task you can
12:28 - call this any you want but create task
12:30 - makes sense and that's the name we'll
12:32 - see in the documentation we're then
12:33 - going to say task colon and then task
12:37 - this specifies that we want to accept um
12:40 - an actual new task using this pantic
12:42 - model and that's one of the reasons why
12:44 - we specified an optional ID and an
12:46 - optional description so that when we
12:48 - receive a new task the only thing we
12:50 - need to actually pass is a title so this
12:52 - is the input to the API meaning we need
12:55 - to pass this information with the post
12:57 - request to create the new task then what
13:00 - we're going to do is say task. ID is
13:02 - equal to uyu id4 that's going to give us
13:05 - a new unique identifier and we're going
13:07 - to say tasks. append this task and then
13:12 - return the task okay so you can see how
13:14 - easy this is compared to using some
13:16 - other python Frameworks what happens is
13:18 - any data that's given to us that's valid
13:20 - for a task is automatically wrapped in
13:23 - this task object we then can simply add
13:26 - the ID we can do any checks that we want
13:28 - we can append it into our tasks database
13:30 - which is really just a list and then we
13:32 - can return the task using the response
13:35 - model sweet so that is how we create a
13:37 - new task now just to check if this is
13:40 - working we need to actually write an
13:41 - endpoint that allows us to read the
13:43 - tasks so what I'm going to do is modify
13:45 - this one here so rather than just read
13:48 - I'm going to call this read tasks we're
13:50 - going to make this slash tasks and then
13:52 - slash and by the way it's fine to have
13:54 - the same endpoint here as long as the
13:56 - request type is different so this is
13:58 - post and this is get this time we now
14:00 - need to add the response model as well
14:02 - because we're going to be returning
14:04 - different tasks and the response model
14:07 - this time is going to be list and then
14:09 - inside of list we're going to specify
14:10 - task the reason for that is what we're
14:12 - going to do is return all of our tasks
14:15 - and the type of that is going to be a
14:17 - list type of all of the different tasks
14:19 - so that's why we're specifying that okay
14:21 - so let's save this and let's run our
14:24 - code and make sure this is working so
14:26 - let's go here let me close out of this
14:29 - with contrl c and then I'm going to type
14:31 - Python 3 main.py and let's go to the
14:34 - docs and see what we get all right so
14:36 - I'm here at the docs now and you can see
14:38 - that we have read tasks and we have
14:39 - create task if we click into read tasks
14:42 - we can actually click on try it out and
14:45 - execute and you'll see that it just
14:46 - gives us an empty list because we don't
14:48 - have any tasks whereas if we go here to
14:50 - the post and we click on try it out we
14:53 - can see an example of how to create a
14:55 - new task so I can remove the ID because
14:58 - we don't actually need that and let's
14:59 - give it a title of hello world and a
15:03 - description of testing and click on
15:06 - execute and as we go down here you're
15:08 - going to see that it gives us a status
15:10 - code of 200 this was actually the
15:12 - response which is now the new task and
15:15 - notice that it's added the ID for us and
15:17 - it says this was a successful response
15:19 - so now if we go back here and we execute
15:21 - this you'll see that we now get the new
15:23 - task that we created now one thing to
15:25 - note here is that if we tried to maybe
15:27 - send some invalid data here so create a
15:29 - task that has no Fields you'll see when
15:31 - we do that it tells us 422 error
15:34 - unprofitable entity the reason for that
15:36 - is that we did not pass the fields that
15:38 - we need and you can see there's some
15:39 - information provided here like a field
15:41 - required missing Etc okay so it
15:43 - automatically did that for us we didn't
15:45 - need to write that code the validation
15:46 - was provided by fast API so let's go
15:49 - back here and let's write a few other
15:51 - endpoints and let's create this entire
15:53 - project so there's three more end points
15:55 - that I want to write here the first one
15:57 - is to view a specific task TK then we
15:59 - want to delete a task and we want the
16:01 - ability to update one so I'm going to do
16:04 - the viewing a specific task first I'm
16:06 - going to say at
16:07 - app.get and we're going to say slash
16:09 - tasks slash and then what we're actually
16:12 - going to take in here is inside of curly
16:14 - braces the task ID now this is how you
16:17 - have a path parameter sometimes you want
16:19 - to have a dynamic value in the path
16:21 - that's exactly what we're doing now same
16:23 - thing as before we're going to have the
16:24 - response model equal to task we're going
16:27 - to say Define get underscore task or
16:31 - actually we can say read task because
16:33 - this one is read tasks plural then
16:36 - inside of here what we need to take is
16:38 - the task ID we're going to say that this
16:41 - is of type uu ID and that's going to
16:43 - correspond with this path parameter okay
16:46 - then what we'll do inside of here is
16:47 - we'll say for task in tasks we're going
16:51 - to say if the task. ID is equal to the
16:54 - task ID that was passed in the path
16:56 - parameter then we will simply return the
16:59 - task otherwise we're going to return and
17:02 - before we can do this we need to import
17:04 - it so let's go to the top of our program
17:06 - and this is an
17:07 - HTTP exception let me see if there's an
17:10 - underscore there or not I don't think so
17:12 - I think that's good and we're going to
17:13 - return HTTP exception and for the
17:16 - exception we're going to say the status
17:18 - undor code is 404 which stands for not
17:21 - found and we're going to say the detail
17:24 - or the error message is Task not found
17:27 - okay so this is how you can return a
17:29 - custom error we're saying okay well we
17:31 - didn't find the task we're looking for
17:32 - so we're going to raise an exception the
17:34 - status code is 404 and this is the error
17:36 - message we're going to give you okay
17:38 - that will allow us to read an individual
17:40 - task based on its ID next what we want
17:43 - to do is update a task so to do that
17:45 - we're going to say ATA Dot and then we
17:47 - can use put or patch in this case I'm
17:49 - going to use put now for put what I want
17:51 - to do is slash tasks slash and then same
17:55 - thing we need the ID of the task that
17:57 - we're going to be updating so we going
17:58 - to say task task uncore ID I'm then
18:01 - going to say the response uncore model
18:04 - is equal to my task then we're going to
18:07 - say Define update task like before we're
18:11 - going to take in the task ID but we're
18:13 - also going to take in the new Fields so
18:15 - we want to update the task with so we're
18:17 - going to say task undor update and then
18:19 - this is going to be task so what we're
18:21 - going to do in this function is similar
18:23 - to what we did before we're going to
18:24 - look for the task that has this ID and
18:26 - then we're going to update it so we're
18:28 - going to say four idx comma task and
18:31 - this is in enumerate and we're going to
18:33 - enumerate over all of our tasks the
18:36 - reason we're using enumerate is we want
18:37 - the index as well as the task then we're
18:40 - going to say if the task. ID is equal to
18:44 - the task uncore ID then we will perform
18:48 - the update so to do that we're going to
18:49 - say the updated uncore task is equal to
18:52 - and I'm going to write some fancy python
18:54 - syntax here this is going to be task.
18:56 - copy then update is equal to task
19:00 - underscore update if we can spell that
19:03 - correctly ditionary and we're going to
19:05 - say exclude uncore unset equals true now
19:10 - what this is going to do is it's going
19:12 - to look at the task update so whatever
19:14 - the new fields are that we've passed for
19:16 - this task because again we're updating
19:17 - an existing task we're going to get the
19:20 - dictionary representation of that and
19:22 - then we're going to exclude any of the
19:23 - fields that are unset so an unset field
19:26 - is something we didn't actually pass so
19:27 - for example if we didn't pass the
19:29 - description we're going to exclude that
19:31 - when we update this task this is a fancy
19:33 - way just to update the task using the
19:35 - pantic model don't worry about it too
19:37 - much it just updates and gives us a new
19:40 - task that has all of the fields combined
19:41 - from this one and the update and it will
19:44 - use any of the update fields and
19:46 - override existing Fields if both of them
19:48 - exist okay then what we're going to do
19:50 - is say tasks at idx is equal to the
19:54 - updated task okay so we're just
19:56 - replacing that pretty much and then
19:58 - we're going to say we're return the
20:00 - updated task okay now lastly here we're
20:03 - going to say raise and this is going to
20:04 - be HTTP exception we're going to say the
20:08 - status
20:09 - code is equal to 404 because again we
20:12 - didn't find this and we'll say the
20:14 - detail is equal to task not found now
20:19 - that reminds me up here I was returning
20:20 - this I actually need to raise this we
20:23 - raise the error we don't return it and
20:25 - then fast API will automatically handle
20:27 - displaying it to the user okay the last
20:29 - one we need to write is our delete
20:31 - method so we're going to say at app.
20:33 - delete we're going to write slash tasks
20:36 - same thing we need to have the ID so
20:38 - we'll say task ID the response model
20:43 - again will be equal to the task let's
20:46 - make it so we have a bit more room and
20:48 - we're going to say Define delete undor
20:51 - task and then we're going to take in the
20:53 - task ID okay how do we do it this time
20:57 - well we're going to say for idx
21:01 - task in enumerate we're going to
21:03 - enumerate over all of the tasks then
21:06 - what we're going to do is say if the
21:09 - task.
21:10 - ID is equal to the task ID then we will
21:15 - return the
21:17 - tasks. pop okay and we're going to pop
21:21 - on the current index where we found that
21:23 - task and then otherwise same thing let's
21:26 - just copy this we're going to raise that
21:28 - HTTP exception so the idea here is again
21:31 - we're looking through all the different
21:32 - tasks we're getting their index and what
21:34 - the task actually is if the task ID
21:36 - matches the ID we're looking for then we
21:38 - know we found the index where this task
21:40 - exists so what we can do is pop it which
21:42 - means we are going to remove and return
21:44 - it from the list which is exactly what
21:46 - we want to do now if we get to the end
21:48 - here and we don't find the task that
21:49 - means the task did not exist or this ID
21:51 - was not in one of our tasks so what we
21:53 - do is we raise this exception perfect so
21:56 - that pretty much completes this program
21:59 - now all this left to do is to test it
22:01 - out and by the way all of this code will
22:02 - be available from the link in the
22:04 - description in case you want to have a
22:05 - look at it so let's clear our screen and
22:08 - let's run and let's go over to our fancy
22:11 - documentation and let's see if it works
22:13 - now so notice we have delete task update
22:15 - task read task create task and read
22:17 - tasks we need to make a new task here so
22:20 - let's just use the sample one uh let me
22:23 - just refresh here okay and we're going
22:25 - to go try it out we can remove the ID D
22:28 - cuz that's going to be automatically
22:30 - generated for the title we'll just go
22:32 - with task one and we'll go task one
22:36 - description okay let me copy that and
22:40 - execute looks like this was all good
22:42 - okay let's make another one so let's
22:44 - copy this here and go task 2 task 2
22:47 - description execute and let's just make
22:50 - one more and this time we'll make it
22:53 - completed okay execute there we go now
22:57 - let's go to read tasks
22:59 - let's try it out and execute and you can
23:01 - see that we have our three different
23:03 - tasks perfect let's go here to read an
23:07 - individual task uh we're going to need
23:09 - the ID of one of them so let's find one
23:11 - of the IDS okay let's copy that go back
23:15 - here and try it out let's pass in our
23:19 - task ID execute and you can see that it
23:22 - gives us our task perfect let's try to
23:25 - delete a task so let's go try it out
23:29 - paste this in and execute and we can see
23:32 - that it said task not found okay so that
23:36 - potentially an
23:38 - issue let me see why we got that all
23:40 - right so a silly mistake here but I
23:42 - forgot to specify the type here for my
23:44 - task ID which needs to be uu ID so
23:47 - because I forgot that we were getting an
23:48 - issue when we're actually searching for
23:50 - that task but now that I add that we
23:51 - should be good to go so we can test that
23:53 - out one more time by just closing and
23:56 - rerunning and let me just get back to
23:58 - that same example all right so let's go
24:00 - to delete the task now after I've made
24:02 - that fix and when I click on execute it
24:05 - says yes it's good to go it deleted
24:07 - successfully and it Returns the task
24:08 - that I deleted now if I go back here and
24:11 - I go to execute you see we only have two
24:13 - tasks left let's copy one of their IDs
24:15 - and let's try to update them so we can
24:17 - go to update we can pass in our ID and
24:22 - here what we need to do is we need to
24:24 - pass completed and title but we don't
24:26 - need the description or the D because if
24:29 - we go back to the code we can see in our
24:31 - task that these are marked as optional
24:34 - so when we do the update we do need to
24:36 - pass the title and completed if we
24:38 - didn't want to have to pass those we
24:39 - could mark them optional and then we
24:41 - wouldn't need to pass them when we
24:43 - performed the update but you'll see what
24:44 - I mean here so what we can do is remove
24:47 - this and for the title we can just make
24:49 - this new title and we can make completed
24:53 - equal to true and when I click on
24:55 - execute here you can see now that it
24:57 - marks complete true description is the
24:59 - same as before and the title is the new
25:02 - title all right so there you go you have
25:04 - now learned how to use fast API to
25:06 - create an API in python as fast as
25:09 - possible it's really cool that it gives
25:10 - us this documentation it also makes it
25:12 - really easy to test and play with our
25:14 - API and obviously there's a lot more
25:16 - advanced stuff that you can do this was
25:18 - really just meant to scratch the surface
25:19 - and show you how quickly you can
25:21 - actually get this up and running if you
25:23 - enjoyed the video make sure to leave a
25:24 - like subscribe to the channel and I will
25:26 - see you in another one
25:29 - [Music]