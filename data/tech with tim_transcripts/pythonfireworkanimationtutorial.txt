00:02 - [Music]
00:08 - so recently my youtube channel tech with
00:10 - tim hit 1 million subscribers and i
00:13 - thought it would be a cool idea to
00:14 - create a program that launches fireworks
00:16 - to celebrate so i'm going to show you
00:18 - how we build this program in this video
00:20 - i'm going to give you a full tutorial
00:21 - and we're going to be using python and
00:23 - pygame to do this now i am assuming that
00:26 - you're familiar with python this is not
00:27 - a beginner python tutorial however if
00:30 - you don't know pygame that's fine i can
00:32 - kind of teach you the basics here now
00:34 - everything i do in this video is fully
00:35 - customizable so you can change the
00:37 - spread you can change the colors you can
00:39 - change the pattern of the firework this
00:41 - is meant to just give you a solid
00:42 - foundation and base for a program like
00:44 - this then of course please go ahead and
00:46 - customize it and tweak it as you please
00:49 - so i think that's all i have for this
00:50 - introduction thank you again to everyone
00:52 - for subscribing to this channel i hope
00:54 - you enjoyed the tutorial and we'll get
00:56 - into it after a quick word from our
00:58 - sponsor before we get started i need to
01:00 - thank mailgun for sponsoring this video
01:02 - mail gun lets you send transactional or
01:04 - bulk emails effortlessly regardless of
01:07 - your business use case mail guns ease of
01:09 - use world-class support and powerful
01:11 - apis empower smart development teams to
01:14 - reach customers at scale mailgun can
01:16 - even prevent fake signups remove invalid
01:18 - email addresses and overall improve your
01:20 - email delivery and conversion rates
01:23 - mailgun helps hundreds of thousands of
01:24 - users around the world to provide
01:26 - connected experiences and drive smart
01:28 - results with mailgun's comprehensive
01:31 - analytics your team can use a
01:32 - data-driven approach so you're never
01:34 - guessing how your emails are doing or if
01:36 - they're being delivered with mailgun
01:38 - it's never been easier to build
01:39 - connected experiences and you can try
01:41 - mail gun today by using my link
01:43 - mailgun.com techwithtim thanks again to
01:46 - mailgun for sponsoring this video
01:48 - alright so let's get started with this
01:50 - tutorial i'm going to use visual studio
01:52 - code for my editor you can use whatever
01:54 - you'd like and i'm going to assume you
01:55 - have python installed now the first
01:57 - thing we need to do and actually the
01:58 - only installation step here is just to
02:00 - install pygame so go to a terminal or a
02:03 - command prompt window and type pip
02:05 - install pygame like that now for many of
02:08 - you this command may not work if it
02:10 - doesn't i will leave two videos on the
02:12 - screen and linked in the description
02:14 - that show you how to fix this pip
02:15 - command for both mac and windows now if
02:18 - that didn't work for you just try pip
02:20 - install pygame as well
02:22 - these are just kind of some quick fixes
02:23 - those videos will show you everything if
02:25 - these don't work you can also try python
02:27 - 3 hyphen m pip install
02:30 - and then pygame and alternatively python
02:33 - hyphen m pip install pi game again if
02:35 - none of those work then check the videos
02:36 - in the description or the cards on the
02:38 - screen okay so now that we have pygame
02:40 - installed we can actually start coding
02:42 - before i do that though i just want to
02:44 - bring up the finished product again and
02:46 - just quickly walk you through what we
02:47 - actually need to create here
02:49 - for this program to kind of function
02:51 - properly so looking at this here you can
02:53 - see that we have kind of firework
02:55 - launchers we then have the actual
02:56 - firework itself that kind of goes up in
02:58 - the air and then that firework explodes
03:00 - and we have kind of projectiles coming
03:02 - off of that so we need to kind of model
03:05 - this in our program by having three
03:06 - separate classes we're going to have a
03:08 - class for the launcher we're going to
03:10 - have a class for the actual firework
03:11 - going up and then another class for all
03:13 - of the projectiles and that's going to
03:15 - allow us to do this very dynamically and
03:17 - essentially create as many fireworks as
03:19 - we want uh once we kind of set all of
03:21 - that up so hopefully that made sense but
03:23 - that is what we are going to do and the
03:25 - first thing i'm going to do for us here
03:26 - is just set up kind of the pi game
03:28 - window and the main game loop and all of
03:30 - that and of course i'll walk you through
03:31 - that as we go so i'm going to say import
03:33 - pi game pygame dot init here just to
03:36 - initialize all of the modules
03:38 - and then we're going to say width
03:40 - height in all capitals because this is
03:42 - going to be a constant value for the
03:44 - width and the height of the screen is
03:45 - going to be equal to and i'm going to
03:46 - choose 800 and 600 you can choose
03:49 - whatever width and height you want and
03:51 - if this is too large then of course just
03:52 - make it a bit smaller for your screen
03:54 - next we're going to set up a pi game
03:56 - window so i'm going to say win is equal
03:57 - to pi game dot display dots underscore
04:00 - mode and whenever we do this we need to
04:02 - pass a width and a height so i'm going
04:04 - to pass the width and the height
04:05 - variable and this will create a window
04:07 - for us where we can draw all of our
04:08 - stuff
04:09 - now that we've created a window we
04:11 - usually want to add a caption for this
04:13 - so i'm going to say
04:14 - pygame.display.set underscore caption
04:16 - like that and i'll just call this
04:19 - fireworks exclamation point okay now
04:21 - that we've done that i'm just going to
04:22 - define a few constants here that we're
04:24 - going to use first one is going to be
04:26 - fps this is the number of frames per
04:28 - second we're going to run at i want this
04:29 - to be 60 so that's what i'm going to do
04:31 - and then i'm going to paste in here a
04:33 - bunch of colors now this is going to be
04:35 - red green blue yellow purple pink or
04:39 - sorry white pink and i think i have one
04:42 - other one in here
04:43 - either way it doesn't really matter
04:44 - exactly what they are they're just rgb
04:46 - values and if you guys are wanting to
04:48 - copy this yourself i'll leave a link
04:49 - with all of the code in the description
04:51 - for you
04:52 - okay so now that we have that set up
04:54 - let's just create a function that can
04:56 - kind of show our window and we can quit
04:57 - the window with so i'm going to say
04:59 - define main
05:00 - this is the function we're going to run
05:01 - as kind of the entry point of our
05:03 - program and then down here i'm going to
05:04 - say if underscore name is equal to main
05:08 - then call the main function if you're
05:09 - unfamiliar with this it just means if
05:11 - you actually run the python module
05:13 - itself as opposed to import the python
05:16 - module then run this function so really
05:18 - we don't need this because we're not
05:19 - going to be importing it but it's just
05:20 - good practice to put this here because
05:22 - if we were to import this module and we
05:24 - didn't have this like we just put main
05:26 - say
05:27 - down here
05:28 - outside of the if statement then it
05:30 - would run this entire code even though
05:32 - we might not want it to do that
05:34 - okay so now that we have the main
05:36 - function here what we're going to start
05:37 - writing is just our main event loop so
05:39 - in any pi game program we need something
05:42 - that's constantly running in the
05:43 - background that can essentially do
05:45 - things like increment our counters
05:47 - draw stuff on the screen handle maybe
05:50 - button presses or key presses all that
05:52 - kind of stuff and that's what we're
05:53 - setting up here in this main function so
05:55 - i'm going to say run is equal to true
05:57 - i'm going to say clock is equal to
05:58 - pygame.time.clock
06:00 - this is the object we're going to use to
06:02 - make sure our while loop that i'm going
06:03 - to implement a second here runs at a
06:05 - certain speed so i'm going to say while
06:07 - run
06:08 - and i'm going to say clock dot tick and
06:10 - i'm going to tick fps so what this does
06:13 - is essentially limits how quickly this
06:15 - while loop can run so that we're going
06:17 - to be running at 60 fps no matter how
06:20 - fast the computer is that's running this
06:21 - code so for example i have a very fast
06:24 - computer here and if i weren't to put
06:26 - clock.tick then everything would happen
06:28 - like instantly on my screen it would
06:29 - just go super fast because this while
06:31 - loop would not be limited in its speed
06:33 - and it's go it would go as fast as a
06:35 - single core on my processor could go
06:37 - whereas in this case when i put the
06:38 - clock now it limits it to 60 frames per
06:40 - second giving us a somewhat consistent
06:42 - feel across different devices
06:45 - okay so now that i've done that i'm
06:46 - going to say for event
06:47 - in
06:49 - pygame.event.get and this is kind of the
06:51 - event loop that i'm talking about here
06:52 - what this is going to do is loop through
06:54 - all of the different events that are
06:55 - occurring so if i press a button if i
06:57 - hit a key if i move the mouse all of
06:59 - that type of stuff and then we're going
07:00 - to check for a certain event
07:02 - so i'm going to say if event
07:04 - dot type
07:05 - is equal to pi game dot quit
07:08 - then what i'm going to do is say run
07:09 - is equal to false
07:11 - and i'm just going to break out of this
07:12 - for
07:14 - now run equals false we'll just set this
07:15 - variable to false so then we will exit
07:18 - the while loop and we'll stop doing this
07:19 - and what pi game dot quit is is when you
07:21 - hit the red x button on the pi game
07:23 - window which you'll see in a minute
07:25 - okay so then i'm going to come down here
07:27 - outside of my wall loop i'm going to say
07:28 - all right well if we're outside of the
07:30 - wall loop then we can quit pygame and
07:32 - then we can just quit python as well so
07:33 - we just quit and quit you don't really
07:35 - need both of them but it's fine we'll
07:37 - just put them here okay so now that we
07:39 - have done that we can actually run the
07:41 - code and we should see a pie game window
07:42 - pop up so let's run it here and notice
07:45 - that we get a fireworks exclamation
07:47 - point as the caption and kind of a black
07:49 - window nothing's happening now if i
07:51 - click x it should close and that's
07:52 - because we implemented this here in the
07:54 - event loop
07:55 - all right now that we have done that the
07:57 - first thing we can set up
07:59 - is a way to actually kind of draw
08:01 - objects on our screen so i'm going to
08:02 - say define draw and i like to separate
08:05 - everything out into different functions
08:06 - just so it keeps it clean and inside of
08:08 - this draw function is where i'm going to
08:10 - handle all of the drawing for my program
08:12 - now we're not going to have much in here
08:14 - but for now we'll just put wind.fill and
08:16 - i'm going to fill this with black
08:18 - because it's kind of like the sky right
08:20 - so i want black to be the background and
08:22 - then i'm going to say pie game dot
08:24 - display dot update and then we'll come
08:27 - back to this later on but for now i just
08:30 - want to call the draw function right
08:32 - here at the end of my while loop uh and
08:34 - again we will kind of continue and add
08:36 - to it as we have stuff to actually put
08:37 - on the screen right now we're just
08:39 - filling the background with black
08:40 - okay so now that we've done that what
08:42 - i'm going to start implementing is my
08:44 - launcher so remember we have kind of
08:46 - three objects here in fact we can write
08:47 - them out
08:48 - we have the launcher class
08:50 - we're going to have the actual firework
08:52 - class which of course will be launched
08:54 - from the launcher so
08:55 - put past there and then we're going to
08:57 - have projectiles which are kind of i
08:59 - guess like the parts of the fireworks
09:00 - right that are coming off of it so i'm
09:02 - going to say projectile
09:04 - like this and i'm going to do these all
09:05 - as classes assuming that i spell them
09:07 - correctly it'll just make things really
09:09 - simple for us so we have the launcher
09:11 - the firework and the projectile and
09:13 - what's going to happen is the launcher
09:14 - is going to create the firework and the
09:16 - firework is going to create the
09:17 - projectile so these classes are kind of
09:19 - all working together in the program
09:21 - all right so let's start with the
09:22 - launcher here i'm just going to define a
09:23 - few class variables that i want to use
09:25 - in here so i'm going to say width is
09:26 - equal to 20 and height is equal to 20
09:29 - and then i'm going to say my color is
09:31 - equal to gray now whenever you see me
09:32 - type something in all capitals that's
09:34 - just denoting that i don't want to
09:35 - change this value within the program i
09:37 - want this to be a constant and that's
09:39 - kind of the convention in python so
09:41 - these are going to be the constants
09:42 - related to the launcher class so all of
09:44 - my launchers will have a width and
09:45 - height of 20 and they'll be a gray color
09:48 - feel free to change that if you want all
09:49 - right now that we've done that we need
09:51 - to take in some parameters in our
09:53 - constructor so i'm going to say define
09:55 - underscore underscore knit
09:57 - self
09:58 - x y and then frequency now the frequency
10:01 - is going to be how quickly we're
10:03 - creating new fireworks you could do this
10:05 - randomly if you want but i'm just going
10:06 - to make it a set frequency so ever so
10:09 - every sorry x milliseconds we're going
10:11 - to launch another firework out of that
10:12 - launcher and we can change that for each
10:14 - launcher so some could be like rapid
10:15 - firing some could be firing every 10
10:18 - seconds or 20 seconds really up to you
10:20 - but that's why we're putting this
10:21 - parameter here so now that we've done
10:22 - that we're going to say self.x is equal
10:24 - to x self.y
10:27 - is equal to y and then self.frequency is
10:30 - equal to frequency uh and sorry this is
10:32 - just going to be x
10:34 - now x and y is going to be the starting
10:36 - position for the launcher that's where
10:38 - we're going to place it on the screen
10:40 - and just quickly before i go any further
10:41 - let me run this code here
10:43 - one thing you have to note is that in pi
10:45 - game the coordinate system has zero zero
10:48 - at the top left hand corner so right
10:50 - here where my mouse is that's zero zero
10:51 - if i were to go all the way to the right
10:53 - then that would be whatever the width of
10:54 - the screen is and zero if i were to go
10:57 - to the bottom of the right it would be
10:58 - whatever the width of the screen is and
10:59 - then whatever the height of the screen
11:00 - is coming over here it would be zero and
11:03 - then whatever the height of the screen
11:04 - is so in the middle is kind of like half
11:06 - the width and half the height uh keep
11:08 - that in mind because if you want to go
11:10 - upwards for example you need to subtract
11:12 - from your y if you want to go to the
11:14 - right you need to add to your y which is
11:16 - what we're going to be doing here
11:18 - okay so now that we have our
11:19 - initialization we're just going to place
11:21 - a few other things in here so i'm going
11:23 - to say self.start underscore time is
11:26 - equal to time dot time and since i'm
11:28 - using that i need to import the time
11:30 - module
11:31 - so i need some way essentially inside of
11:34 - my
11:35 - launcher class here to determine how
11:36 - much time has elapsed since i launched
11:39 - the last firework so that i know when to
11:41 - launch the next one so that's kind of
11:42 - why i'm putting that here and then next
11:44 - while we're in the initialization i'm
11:46 - going to say self.fireworks is equal to
11:48 - a list and that's going to store all of
11:50 - the fireworks that are currently on the
11:51 - screen that we want to be drawing and
11:53 - kind of moving upwards right so that's
11:55 - what we have for launcher okay so next
11:57 - let's implement a draw method i'm going
11:59 - to say define draw self and then i'm
12:01 - going to take in win
12:03 - and win is going to be the surface that
12:04 - i want to draw this launcher onto and
12:08 - yeah that's we're doing here so we're
12:09 - going to call draw for the launcher
12:10 - every time we want to draw its contents
12:13 - so inside of here i'm going to say pi
12:14 - game dot draw dot rectangle because i
12:18 - want to draw a rectangle for my launcher
12:20 - you can do it in any shape you want but
12:21 - i think a rectangle makes sense and i'm
12:23 - going to say win and i'm going to say
12:25 - self dot in all capitals color to
12:27 - reference this variable here from the
12:29 - class
12:30 - and then i need to pass an actual rect
12:32 - object which is going to be an x y width
12:34 - and height so i'm going to say self.x
12:36 - self.y
12:37 - self.width and self.height
12:40 - all right so that's all i need for the
12:41 - rectangle and for now
12:43 - that's good for our launcher so let's
12:44 - actually just draw the launcher on the
12:46 - screen make sure that's working then
12:48 - we'll move on to the next step
12:50 - so for our draw function since i want to
12:51 - do all my drawing in here i'm going to
12:53 - take a list of launchers and inside of
12:55 - draw i'm going to say for
12:57 - my individual launcher in launchers
13:01 - like that i just want to do launcher dot
13:04 - draw and i'm going to pass to this the
13:06 - window so win here is a global variable
13:09 - right we have that and we're just
13:11 - passing it to the draw function and then
13:12 - we'll draw this rectangle onto the
13:14 - screen
13:14 - okay so that's good but we need to now
13:16 - create a list of launchers so i'm going
13:18 - to say down here launchers is equal to
13:22 - and we'll just go with one for now and
13:23 - for the launcher what do we need to pass
13:25 - an x y and frequency and the frequency
13:28 - we're going to put in milliseconds so
13:30 - let me just make a comment here with ms
13:31 - so that we know it's milliseconds okay
13:33 - so for the launcher we want to place
13:35 - this at maybe 100 x and then i want this
13:38 - to be at the bottom of the screen so to
13:40 - put it at the bottom of the screen i
13:41 - need to place it at the height of the
13:43 - screen the issue with this though is
13:45 - that when i draw an object in pi game i
13:48 - start drawing from the top left hand
13:50 - corner so if i were to draw it at 100
13:52 - and then the height you wouldn't
13:54 - actually see the object because the top
13:56 - left hand corner of the object will be
13:57 - right at the bottom of the screen so
13:59 - instead i need to subtract whatever the
14:01 - height is of the launcher so that i draw
14:03 - it you know in this case 20 pixels above
14:06 - the bottom of the screen and then it
14:07 - kind of fills down to the bottom so i'm
14:09 - going to say height minus and then this
14:11 - is going to be
14:12 - launcher
14:14 - if we could spell that correctly dot and
14:16 - then height now the reason why i like
14:17 - the class variables because i can just
14:19 - directly access them on the class uh
14:21 - name itself right okay so we have 100
14:23 - height minus launcher height and then we
14:26 - need some frequency and in this case
14:27 - let's go with three seconds which would
14:29 - be three thousand milliseconds okay so
14:31 - now we have launchers now we just need
14:33 - to pass this to the draw function so
14:35 - we'll do that there and then we'll run
14:37 - the code and let's see we should get a
14:39 - launcher and we do we got one right
14:40 - there okay so the launcher is
14:42 - functioning uh next thing we need to do
14:44 - is actually create a firework every x
14:46 - seconds or so
14:48 - or every frequency seconds right
14:50 - so what i'm going to do here is make a
14:52 - another method and i'm going to call
14:53 - this loop now i'm going to call this
14:55 - every single frame so i'm going to call
14:57 - this once every while loop iteration and
15:00 - it's going to take care of you know
15:02 - creating a new firework and moving the
15:03 - fireworks and all that so inside of here
15:05 - i'm going to say loop self and then i'm
15:07 - going to say the max height or the max
15:09 - width sorry
15:11 - and the max height now the max width and
15:13 - the max height i'm assuming is going to
15:15 - be the screen height and the screen
15:17 - width or the screen width and the screen
15:19 - height and the reason we need this is
15:21 - because once a firework goes off of the
15:23 - screen
15:24 - we want to remove it right we don't want
15:26 - to be drawing something that's not on
15:27 - the screen so we'll get to this later on
15:29 - but i just need to put it in the
15:30 - function signature for now
15:32 - okay so the first thing we're going to
15:33 - do here is just determine if we should
15:35 - be launching another firework so i'm
15:36 - going to say current time is equal to
15:38 - time.time and the way i determine how
15:40 - much time has elapsed is i just take the
15:42 - current time and then i subtract from it
15:44 - whatever the time is that we started at
15:46 - so i'm going to say time
15:48 - elapsed
15:49 - like this is equal to the current time
15:52 - minus the self.start time so now i'm
15:54 - going to say if my time elapsed
15:56 - and then this is going to be multiplied
15:58 - by a thousand because this is going to
15:59 - give me the time elapsed in seconds is
16:01 - greater than or equal to
16:03 - the self.frequency remember the
16:05 - self.frequency is in milliseconds so
16:07 - we're just converting to the same unit
16:09 - if that's the case then i'm going to
16:11 - reset my start time so i'm going to say
16:12 - self.start time is equal to the current
16:14 - time and then i'm going to say
16:16 - self.launch and this will be a method
16:18 - that we need to write so let's just
16:19 - write the stub for this now define
16:21 - launch
16:23 - self and then in here we'll create a
16:25 - firework but again we're not going to do
16:26 - that uh this second okay so that what
16:28 - that's what will happen this will
16:29 - essentially launch a firework for us
16:31 - every x seconds or so
16:33 - but now what we need to do is we need to
16:35 - actually move all of the fireworks now
16:37 - i'm just going to leave a comment so
16:38 - move all of the fireworks because we
16:40 - don't have the fireworks created yet so
16:42 - it doesn't really make sense to be
16:43 - moving them
16:44 - but that's what we're going to do here
16:46 - in the loop okay so i apologize because
16:48 - i do actually have to write a fair
16:50 - amount of code before we can really see
16:52 - any progress on the screen just based on
16:54 - how the program works so just bear with
16:56 - me i think this is simple enough that we
16:57 - don't really need to test this and we're
16:59 - going to go to the firework class now
17:00 - and then hopefully kind of view the
17:02 - firework moving up once we finish coding
17:04 - this
17:05 - so for the firework we need an
17:06 - initialization as well and we need a few
17:09 - class variables so the first class
17:10 - variable i'm going to have is a radius
17:12 - of the firework because it's going to be
17:13 - circular i'm going to make this 10 and i
17:15 - want to know the maximum number of
17:17 - projectiles that should be launched from
17:20 - a firework because we'll make this
17:21 - slightly random so i'm going to say the
17:23 - maximum number of projectiles we want to
17:24 - have is 50
17:26 - and the minimum number of projectiles is
17:29 - going to be let's go with 25. so we'll
17:31 - have something in this range when we
17:32 - actually generate the projectiles and
17:34 - then we want to have a projectile
17:35 - velocity so i'm going to say projectile
17:37 - vel is equal to 4 and that's essentially
17:40 - how quickly it moves
17:42 - in any given direction
17:44 - all right next we're going to have an
17:44 - initialization so we're going to say
17:46 - init
17:47 - and we're going to take in the self the
17:49 - x the y and then we need the y velocity
17:53 - of this firework because we're going to
17:54 - be moving it upwards right and we need
17:56 - to know at what speed we want to move it
17:57 - up that's different than the projectile
17:59 - velocity the projectile velocity is um
18:02 - the projectile is coming off of the
18:03 - firework whereas this is actually moving
18:05 - the firework upwards until it gets to
18:07 - its launch height
18:08 - or its explode height which is what i'm
18:10 - going to take in here so i'm going to
18:11 - say explode height is the next thing
18:12 - that i want and then for my firework of
18:14 - course i need a couple so for all of
18:16 - these i just need to put myself before
18:18 - them so self.x is equal to x self.y is
18:20 - equal to y self.y value is equal to y
18:23 - val self dot explode height is equal to
18:25 - explode height and self.color is equal
18:28 - to a color
18:30 - okay so as our initialization we're
18:32 - going to just put a few other things
18:33 - here as well we're going to say
18:34 - self.projectiles is equal to an empty
18:36 - list because similar to the launcher we
18:38 - need to keep track of all the
18:39 - projectiles associated with this
18:41 - individual firework we're then going to
18:43 - have self dot exploded and this is going
18:45 - to be equal to false and that's just
18:47 - going to indicate whether or not we've
18:48 - actually exploded the firework because
18:50 - that will change the way that we draw it
18:52 - right
18:53 - okay so now that we've done that we are
18:55 - going to write a few methods the first
18:57 - method that we'll write is our draw so
18:59 - i'm going to say define draw i'm going
19:00 - to take in myself i'm going to take in
19:02 - my window and for now we can just draw a
19:05 - pie game circle but i only want to draw
19:07 - this circle if i have not yet exploded
19:10 - so i'm going to say if not self.exploded
19:12 - then i just want to draw a circle
19:14 - representing the firework because it's
19:15 - kind of going up in the air so i'm going
19:17 - to say
19:18 - pygame.draw.circle
19:19 - excuse me
19:20 - window self.color we need to then pass
19:23 - the center of this circle which is going
19:25 - to be the self.x and the self.y position
19:28 - of this individual firework and then
19:30 - lastly we pass the radius which will be
19:33 - self dot in all capitals radius uh we'll
19:35 - be referencing the
19:37 - class variable here and i actually did
19:39 - something in my terminal here i don't
19:41 - know what this is let me just quit that
19:44 - okay there we go
19:46 - all right so now we're back we have draw
19:48 - now if we have not exploded we'll do
19:50 - this
19:51 - however uh no matter what what i want to
19:53 - do is just loop through all of my
19:55 - projectiles so four projectile in uh
19:57 - self dot projectiles and then i want to
19:59 - draw the projectiles and again doesn't
20:01 - make a ton of sense because i don't yet
20:03 - have the projectiles defined but just
20:05 - like on all our other classes we'll have
20:07 - a draw method and we'll have width so
20:09 - we'll loop through all the projectiles
20:10 - and we'll draw all of them um if we if
20:13 - we have them right and
20:15 - you'll see how we create those in one
20:16 - second
20:17 - okay so that's all we need for now
20:20 - actually i lied we're going to add one
20:22 - more method and this is going to be move
20:25 - so just like we need to uh move yeah we
20:27 - need to move the firework upwards so
20:29 - that's that's what this function is
20:30 - going to do or this method so i'm going
20:32 - to say define move and here again i'm
20:34 - going to take this max width and this
20:36 - max height just so that i know
20:39 - when this firework i should stop drawing
20:41 - it on the screen again we'll get to that
20:43 - in a second
20:44 - okay so i'm going to say if we have not
20:46 - exploded yet then what i need to do is i
20:48 - want to move this upwards so i'm going
20:49 - to say self.y plus equals the self.y
20:52 - velocity and that's just going to
20:54 - essentially be moving our firework in
20:56 - whatever direction this y velocity is so
20:58 - if this
20:59 - velocity is negative we're going to move
21:00 - upwards because we're subtracting from
21:02 - the y if it's positive we'd move down
21:04 - now of course we want to move up but i
21:06 - want to make this dynamic so rather than
21:08 - having a minus equals i just do a plus
21:09 - equals and now if you pass a negative
21:12 - loss that you go up if that's a positive
21:13 - you go down i guess it would work the
21:15 - same in the opposite direction but
21:16 - that's fine
21:18 - okay so we're going to move our y but
21:20 - now what we need to do is determine if
21:22 - our y is at the explosion height because
21:24 - we need to explode the firework and
21:26 - create the projectiles once we get to a
21:27 - certain height right so i'm going to say
21:29 - if the y so self
21:31 - dot y is greater than or equal to the
21:34 - self.explode height
21:36 - then what i'm going to do is say
21:37 - self.explode
21:39 - and i'm going to explode the firework so
21:41 - that means we need an explode method so
21:42 - i'm going to say define
21:44 - explode
21:45 - self
21:46 - and then in here we can actually just
21:49 - say self dot exploded equals true and
21:53 - then we would need to create the
21:54 - projectiles around this firework all
21:57 - right so i want to test a bit of this
21:59 - before we go any further so i just need
22:00 - to write a bit of code that's going to
22:02 - move this firework and draw it and we'll
22:04 - do that from within the launcher class
22:06 - then once we have that we can test and
22:08 - make sure that the firework is moving
22:09 - properly then we'll deal with the
22:11 - projectile uh the projectile creation is
22:13 - the most complicated just because we
22:15 - have to do a bit of math to determine
22:16 - like the angle to launch off the
22:18 - projectiles uh anyways let's go back to
22:20 - launcher for now let's create our
22:22 - fireworks let's move our fireworks
22:24 - and and continue here so for our launch
22:28 - we need to make a fire so the first
22:30 - thing we need to make our firework or
22:31 - one of the things we need is a color so
22:33 - i'm just going to say color is equal to
22:35 - random.choice and then i'm going to
22:36 - choose from the colors list that we
22:38 - defined above and now that i look at it
22:40 - this can be all capitals
22:42 - and i need to import
22:44 - the random module as we can use that
22:46 - functionality so let's go back down here
22:49 - and let's change this to be all capital
22:51 - colors
22:53 - like that okay so now we have a color uh
22:56 - the next thing we need is it is an
22:57 - explode height so i'm going to say the
22:59 - explode height is equal to random.rand
23:02 - range and then i'll just hard code these
23:04 - values i probably would be better to
23:06 - have them in a variable but for now i'm
23:08 - just going to go with something like 50
23:09 - and 400 so we're going to be picking a
23:12 - height near the top of the screen that
23:13 - we want to explode at recall that the
23:16 - lower the number the higher we are on
23:17 - the screen so 50 is very close to the
23:19 - top of the screen and 400 is about in
23:21 - the middle of the screen
23:23 - actually i don't know what the height is
23:24 - but it's close to the middle so that's
23:25 - the explode height uh and then next we
23:28 - want to make our firework so i'm going
23:30 - to say firework is equal to
23:32 - and then firework and we need to pass to
23:34 - it the x y and then the explode height
23:37 - we also need to pass the velocity and
23:39 - the color so the x is going to be self.x
23:43 - uh the y will be self.y because it's
23:44 - just going to be launching from wherever
23:46 - the launcher is positioned which are
23:48 - these two values then we need to pass
23:50 - the velocity
23:51 - in this case i'm going to pass negative
23:53 - five and then next is the explode height
23:55 - so we'll pass that and then the color
23:57 - now one thing i'm going to do is just
23:59 - add a value here this is going to be
24:01 - self dot width
24:02 - divided by two now the reason for this
24:05 - is that i'm going to be drawing a circle
24:06 - and when i draw a circle i draw from the
24:08 - middle of the circle right recall when
24:10 - we have the circle where was it here
24:13 - this is the center position that we're
24:14 - passing so since it's the center and not
24:17 - the top left if i were to draw it from
24:19 - self.x
24:21 - then it wouldn't look like it's coming
24:22 - out of the center of the uh the launcher
24:24 - so that's the reason why i have the
24:26 - self.width over two so that i'm now
24:28 - centering this i'm moving it in this
24:30 - case 10 pixels over to the right so the
24:33 - center is actually in the middle of
24:35 - where the launcher is and that's why i'm
24:37 - doing self.width over two
24:39 - okay anyways we create the firework here
24:40 - uh now we're going to say
24:42 - self.fireworks.append firework we need
24:44 - to add it to that list for it to
24:45 - actually be drawn and all of that and
24:47 - now i'm going to go to my draw function
24:49 - and i'm going to draw all my fireworks
24:50 - so i'm going to say for firework and
24:52 - self.fireworks we're going to say
24:54 - firework it should just be firework like
24:56 - that dot draw and then we need to pass
24:58 - the window
24:59 - now in the same fashion i'm just going
25:01 - to copy this for loop here and i'm now
25:03 - going to move all the fireworks where i
25:04 - have this comment so i'm going to say
25:06 - for firework in self.fireworks and i'm
25:08 - going to start moving them so to move
25:10 - them i'm going to say
25:13 - dot move
25:14 - and then i will pass to it the max width
25:17 - and the max height
25:18 - again we haven't used that yet but we
25:20 - will shortly that's why we're passing it
25:22 - along and next i'm going to just check
25:25 - something to make sure that i'm not
25:27 - drawing a firework or in this case
25:29 - actually moving a firework
25:31 - if it um has exploded already so let me
25:34 - just write this out and then i can
25:35 - explain it more clearly but i'm going to
25:37 - say if firework dot exploded
25:40 - remember that's a boolean value we have
25:41 - on there uh and the len of
25:45 - firework dot
25:47 - and then this is going to be what is
25:50 - this uh projectiles
25:52 - is equal to zero uh then i'm going to
25:54 - remove this firework so this is going to
25:57 - be a bit weird just bear with me for one
25:58 - second i'm going to say fireworks
26:00 - to underscore remove is equal to a list
26:04 - and i'm going to say fireworks
26:06 - uh and then underscore two underscore
26:09 - remove dot append firework and then let
26:12 - me just finish this up and then i'll
26:13 - explain for firework in fireworks dot
26:16 - remove self dot
26:18 - fireworks dot
26:19 - remove
26:20 - and then firework
26:22 - okay apologies for going quickly there
26:24 - but i just need to get it all down
26:26 - before i could really articulate what's
26:27 - going on so what we're doing is looping
26:28 - through all the fireworks we are then
26:30 - moving all the fireworks we need to call
26:32 - this move method to move them upwards
26:33 - right and this loop method will call
26:35 - from inside of main we'll do that in a
26:37 - second and he was removing all of them
26:39 - uh the thing is i don't want to be
26:40 - moving a firework and doing unnecessary
26:43 - computations if the firework is kind of
26:46 - off the screen so i'm saying if the
26:48 - firework has exploded and we don't have
26:50 - any projectiles so that would mean that
26:53 - uh the projectiles are off of the screen
26:55 - we're going to remove them from the
26:56 - projectile class or from the firework
26:58 - class story so we'll deal with that
27:00 - later but if the firework exploded and
27:02 - we have no projectiles there's nothing
27:04 - we really need to be doing for this
27:05 - firework so let's just remove it i don't
27:07 - want to be drawing something on the
27:08 - screen if i don't have to and in fact if
27:10 - i were to continue to draw this on the
27:12 - screen or to continue to move it then i
27:14 - get a ton of lag as the program
27:16 - continued on because i'd have all of
27:18 - these fireworks that are off of the
27:19 - screen that i'm moving and drawing etc
27:22 - so that's why i'm removing them now the
27:24 - reason i can't just directly do
27:25 - self.fireworks.remove
27:26 - is because i'm currently looping through
27:28 - self.fireworks so i could actually fix
27:30 - this by just making this a copy but i
27:32 - don't want to do this so what i'm doing
27:34 - instead is making a list here fireworks
27:37 - to remove i'm going to append all of the
27:38 - fireworks i want to get rid of and then
27:40 - i'm just going to have another fi for
27:42 - loop here sorry where i remove all of
27:44 - the fireworks after i've looped through
27:47 - them so you just you don't want to be
27:49 - mutating something that you're iterating
27:51 - through so that's kind of why i'm not
27:52 - doing that here and instead i'm doing
27:54 - the second for some of you will probably
27:56 - have a more elegant solution for this
27:58 - but for now this is fine
28:00 - all right so i actually think that's all
28:02 - we need for the launcher class we have a
28:04 - launcher now what we need to do is move
28:07 - the launcher or call the loop method so
28:10 - from main i'm going to say for
28:13 - launcher in
28:14 - not holders
28:15 - launchers like that and then we'll
28:17 - simply call launcher dot move and we'll
28:20 - just pass the width and the height of
28:22 - the screen
28:23 - as the max width and the map max height
28:25 - for our fireworks
28:27 - okay so quick recap here we have our
28:29 - main function this is the main event
28:31 - loop i'm drawing all of my launchers and
28:33 - just doing all of the drawing here and
28:35 - i'm moving all of my launchers or sorry
28:37 - this needs to be dot loop not dot move
28:39 - so i'm calling the loop method on each
28:41 - one of my launchers inside of this loop
28:43 - method i'm calculating the time elapsed
28:45 - if it's been past the frequency time so
28:48 - past three seconds or whatever we set
28:50 - we'll launch another firework then what
28:52 - we do is we loop through all the
28:53 - fireworks we move them
28:55 - and we check if they're exploded and if
28:57 - we don't need to be moving them or
28:58 - drawing them if that's the case we add
29:00 - them into this list and then we remove
29:02 - them here at the end and that's pretty
29:03 - much it and then within the firework uh
29:06 - we're just moving the firework based on
29:07 - kind of the logic that we have inside of
29:09 - here and making sure that we're not
29:10 - moving it if it's already exploded
29:13 - all right
29:14 - let us run the code here and let's see
29:17 - what we get we should see a ball being
29:19 - launched here from the launcher and just
29:21 - moving upwards every few seconds now it
29:24 - doesn't look like that's happening so i
29:26 - might have to go back to the drawing
29:27 - board here um yeah let me have a look at
29:30 - what's wrong and i'll be right back all
29:31 - right so i made a pretty silly mistake
29:33 - here i'm saying if self.y is greater
29:35 - than self.explode height instead of the
29:37 - move method for my firework then i'm
29:40 - going to explode now
29:41 - the reason this is incorrect is because
29:43 - my y is actually going to be greater
29:46 - than my explode height in every
29:48 - situation so because i have this
29:50 - condition here i'm instantly exploding
29:52 - my firework which means i'm instantly
29:54 - not seeing it because i don't have any
29:56 - projectiles to shoot off so i just need
29:58 - to change this to be a less than or
29:59 - equal to the explode height uh because
30:02 - that's actually correct if we're less
30:04 - than the explode height that means we're
30:05 - above it on the screen so we do want to
30:08 - explode so just change that symbol from
30:09 - a greater than sign to a less than sign
30:12 - or just copy the code from the link in
30:13 - the description anyways let's uh let's
30:16 - run this here
30:17 - and now hopefully this should work
30:19 - assuming i didn't make any other errors
30:21 - uh and we got an issue it says tuple
30:23 - object is not callable um okay so i just
30:26 - forgot a comma here when i'm drawing my
30:28 - circle so let me just add the comma
30:31 - and let's try this again
30:33 - and fingers crossed one two three and
30:37 - there we go we see an orange ball go up
30:39 - and then at the explode height it's
30:41 - gonna go away uh because that's what
30:42 - we've set it to do and this would work
30:44 - for all of our launchers notice that
30:45 - we're getting kind of a random exploding
30:48 - great so that's what we want now that we
30:50 - have that let's deal with the
30:51 - projectiles and actually having
30:53 - something interesting beyond the screen
30:54 - because obviously this is kind of the
30:55 - boring part until we get to the
30:57 - projectiles so let's create some
30:59 - projectiles so for the projectile we are
31:02 - going to have just a rectangle so we're
31:04 - going to have a width in this case i'll
31:06 - say that's 5 and a height and i'll just
31:08 - go with 10. now i also want to kind of
31:11 - fade these projectiles like i want to
31:12 - have a transparency to them so they
31:14 - appear like they're fading off in the
31:16 - screen and the way i'm going to do that
31:18 - is by having an alpha property and i
31:20 - need to decrement this alpha property so
31:22 - i'm going to say the alpha decrement is
31:24 - equal to 3 just meaning i'm going to
31:26 - subtract 3 from the alpha
31:28 - and alpha is like your transparency
31:30 - property so you start at 255 that's
31:32 - totally opaque uh and then as you go
31:35 - down to zero you are completely
31:36 - transparent
31:38 - hopefully that's clear but that's what
31:39 - we're doing with the transparency in a
31:41 - minute so i'm gonna define my
31:43 - constructor here i'm gonna take in
31:44 - myself my x and my y and then to move i
31:48 - need my x velocity i also need my y
31:51 - velocity and lastly i need my cup so
31:53 - since we want to move potentially on a
31:55 - diagonal here not just up or down i need
31:57 - two velocities one for both direction
31:59 - and if we move both of them then we can
32:01 - move kind of in a diagonal line right
32:03 - so here we'll say self.x equal to x
32:05 - self.y is equal to y self.xfl xvl self.y
32:09 - val self dot color it's very nice to
32:12 - have a great autocomplete we're also
32:14 - going to set manually an alpha here of
32:15 - 255 and then we'll decrement that as we
32:18 - move the file now this actually will be
32:20 - pretty simple the firework itself we're
32:22 - going to say define move we're going to
32:24 - say self and then we actually don't need
32:27 - to take anything else we can just say
32:29 - self.x
32:30 - plus equals the self.xvel
32:33 - and then we'll say the self.y same thing
32:36 - plus equals the self.y value and then
32:39 - we're going to say the self.alpha
32:41 - is equal to and this is going to be the
32:43 - maximum of 0 and the
32:46 - self.alpha
32:48 - minus and then this will be the
32:50 - self.alpha decrement now the reason i
32:52 - need the maximum here is because i
32:54 - cannot have a negative alpha if i had a
32:56 - negative alpha that's going to give me
32:57 - an error it's going to crash the program
32:59 - so if we get to a position where the
33:01 - firework is still on the screen we're
33:02 - still drawing it but the alpha is less
33:05 - than 255 then we'll just make it zero so
33:07 - it will appear like it's not there all
33:10 - right next we're going to have draw now
33:12 - inside draw we're going to take self and
33:14 - win
33:14 - and we're going to draw something here
33:16 - but i need to make another method this
33:19 - is actually going to be a static method
33:22 - and this is going to be draw alpha so
33:24 - i'm going to say define
33:25 - draw and i'm going to actually be say
33:27 - rect
33:28 - alpha like this
33:30 - and the reason i'm writing this is
33:31 - because to draw a surface with
33:33 - transparency in pie game is a little
33:35 - complex so we're going to put it in its
33:37 - own method so we have a static method
33:39 - because it doesn't actually need access
33:41 - to any of the properties from this class
33:44 - and i'm going to take my surface my
33:45 - color and my rectangle and i'm just
33:47 - going to draw on the surface with a
33:50 - specific color uh a rectangle that has
33:53 - transparency associated with it
33:56 - anyways you'll see what i mean as i code
33:57 - this out so i'm going to say that my
33:59 - shape underscore surf or surface is
34:02 - equal to
34:03 - pie game and i'm going to make a surface
34:06 - so if you're unfamiliar with pygame
34:07 - everything that you draw is a surface
34:09 - now the window here like this is
34:11 - actually a surface but i'm creating a
34:14 - surface and i'm going to enable
34:15 - transparency on the surface which is
34:18 - what you have to do for it to actually
34:20 - accept an alpha property when you're
34:22 - drawing it so i'm going to say pygame
34:25 - dot and then rect and i'm going to pass
34:28 - to it a rect here and we're going to
34:29 - treat this just as a four item tuple
34:31 - which is x y with height but i need to
34:33 - convert this to an actual wrecked object
34:35 - to work with the surface object in pike
34:38 - again it's just four properties x y with
34:40 - height but it needs to be a special
34:41 - object so we're wrapping it there and
34:43 - we're gonna pass actually the size which
34:45 - will give us the width and the height
34:47 - which is what the service needs
34:49 - okay next we are going to enable
34:51 - transparency so to do that we're going
34:52 - to say pi game and then this is going to
34:54 - be src and then alpha like that
34:59 - like that there you go
35:00 - and that will allow transparency for the
35:02 - surface so now that we've done that what
35:04 - we're going to do is apply a color to
35:06 - this surface so we're going to say pie
35:07 - game dot draw dot and then we're going
35:09 - to draw a rectangle where are we going
35:11 - to draw it well we're going to draw it
35:12 - on the shape surface we're going to draw
35:15 - it with a specific color and then i'm
35:17 - actually going to pass here the shape
35:18 - underscore surf
35:21 - like this dot get
35:23 - underscore wrecked so it's a bit weird
35:25 - but what i've done is created an empty
35:26 - surface which is the size of the
35:28 - rectangle that's passed in then i'm
35:30 - going to draw to this surface whatever
35:33 - color we pass which will have a
35:34 - transparency property associated with it
35:37 - as well as
35:38 - the size of the rectangle of this
35:40 - surface i'm just filling the entire
35:42 - surface essentially with a color that
35:43 - has transparency
35:45 - and then lastly i'm going to take my
35:47 - actual surface which in this case will
35:49 - be the window and i am going to blit the
35:52 - shape underscore surface
35:54 - and the rectangle like that the
35:57 - rectangle is the position that i want to
35:59 - put this at
36:00 - okay i know this seems a bit weird if
36:02 - you don't understand this totally fine i
36:04 - actually just took this code from stack
36:05 - overflow i'm trying my best to explain
36:07 - it to you what blit will do is it will
36:09 - take one surface and put it on another
36:11 - surface so we're saying the surface
36:13 - which is going to be the window dot blit
36:15 - and then we're taking the shape surface
36:17 - which is a transparent rectangle and
36:19 - we're placing it on there and the
36:20 - position we're placing it on there is
36:22 - the rectangle position which will give
36:23 - us the x y um etc so now from draw all
36:27 - we need to do is say self dot draw rect
36:30 - alpha we're going to pass the window
36:32 - we're going to pass the color and this
36:34 - is going to be self.color but we're
36:36 - going to say plus and since self.color
36:38 - is going to be a tuple uh we're going to
36:40 - add to it another tuple that contains
36:42 - the alpha property so i'm going to say
36:44 - self.alpha and then a comma because
36:47 - whenever you surround something in
36:48 - parentheses if you want it to be a tuple
36:50 - you need to have a comma after so that's
36:52 - what we're doing that for and then for
36:53 - the rectangle we're going to pass self.x
36:56 - self.y
36:58 - self dot
36:59 - and then this will be the width
37:01 - and self dot height
37:04 - all right so the complex uh the
37:06 - complexity here is done now with the
37:07 - projectile that's all we need for that
37:09 - class now we need to create projectiles
37:12 - in some type of pattern and then move
37:14 - them around on the screen so inside of
37:17 - explode is where we want to create our
37:19 - projectiles um and i guess we can start
37:21 - doing that now so we're going to do two
37:23 - patterns one of them is going to be a
37:25 - star and one of them is going to be a
37:26 - circular pattern so let's start with a
37:28 - circular pattern i'm going to say
37:30 - define create
37:32 - circular underscore
37:34 - projectiles and for here we're going to
37:36 - take in self
37:38 - and we're going to take in the number of
37:39 - projectiles that we want now
37:41 - what i need to do is i need to determine
37:44 - let's go back here for one second the x
37:46 - velocity and the y velocity of every
37:49 - projectile that i have such that it
37:51 - appears in a circular pattern so let me
37:53 - just quickly go to my drawing screen
37:55 - here uh if i can pull this up always
37:58 - forget which one it is a windows ink is
38:00 - right here
38:02 - okay whiteboard uh and let's just have a
38:04 - look at how we actually do the math here
38:06 - all right so i made it to the whiteboard
38:08 - here and i'm gonna give you a quick
38:09 - trigonometry lesson on how we actually
38:11 - do this uh so we have a circle we're
38:13 - familiar with the fact that a circle has
38:15 - 360 degrees worth of angles what we want
38:18 - to do is launch fireworks off kind of at
38:21 - an even displacement or an even distance
38:24 - around the circle right we want them to
38:26 - come off completely evenly from the
38:27 - circle and to do that we need to use a
38:29 - little bit of trigonometry so we know
38:31 - the circle is 360 degrees and something
38:33 - you need to know many of you may know
38:36 - this if you're familiar with
38:37 - trigonometry but if you're not
38:39 - then this is the following so 360
38:41 - degrees is actually equal to 2 pi 2 pi
38:45 - is what's known as the radian or yeah
38:47 - the radian of the angle 360. so rather
38:50 - than using degrees we use radians in
38:53 - like computer math and just in general
38:54 - trigonometry so just be familiar with 3
38:57 - pi equals 2 pi uh and or 360 square
39:00 - equals 2 pi and that means that 180
39:02 - equals pi and 90 is going to equal pi
39:04 - over 2. so if we're looking at kind of
39:07 - our quadrant let me just see if i can
39:08 - move this over here uh whenever we're
39:11 - dealing with angles i like to just draw
39:12 - out kind of a quadrant here we have our
39:14 - quadrant we know there's 360 degrees and
39:16 - we also know that because we have four
39:18 - 90 degree angles here the first angle we
39:21 - have is zero then this based on our
39:23 - radians is going to be pi divided by two
39:26 - then we're gonna have pi then we're
39:28 - going to have 2 pi actually we're going
39:30 - to have 3 pi
39:32 - over 2 because we need one and a half pi
39:35 - and then as we come all the way back
39:36 - here we're going to have 2 pi
39:38 - as the angle okay so just keep that in
39:40 - mind these are the different angles that
39:42 - we have um based on this kind of
39:44 - quadrant right where again pi over 2 is
39:46 - 90 this is 180 this is 270 this is 3 6.
39:50 - so now we're going to say loop through
39:52 - all of our fireworks and we're going to
39:54 - essentially pick angles from 0 to 2 pi
39:57 - that we want to launch these projectiles
39:59 - or fireworks off at so we're going to
40:00 - have you know a bunch of different
40:01 - angles that we select that we want to
40:03 - launch the fireworks often
40:05 - so hopefully you're following so far but
40:07 - we're going to be launching at a bunch
40:08 - of different angles so once we determine
40:10 - the angle that we want to launch at we
40:12 - need to then determine the x and the y
40:14 - velocity that we need to create
40:17 - to move the firework in that direction
40:19 - so if i have an angle here
40:21 - right
40:22 - let's just do this let's create a right
40:24 - triangle so actually let me just redo
40:26 - this
40:27 - again i'm drawing with my mouse guys so
40:28 - just give me a break here we want to
40:30 - launch in this direction we have some
40:31 - angle theta
40:33 - and we know
40:34 - the velocity v
40:36 - that we want to launch this firework off
40:37 - at we want to launch that you know four
40:39 - pixels per second or something along
40:41 - those lines and we know the angle now if
40:42 - we know that information we can solve
40:45 - for x and y
40:47 - and uh that will allow us to determine
40:49 - the x component or the x velocity and
40:51 - the y velocity we need to move the
40:53 - firework at to move at this angle so how
40:56 - do we now solve for x and y well there's
40:58 - a few uh little shortcuts for equations
41:00 - that i like to write down so i have so
41:04 - and then i also have toa again please
41:07 - excuse the handwriting this is kind of
41:09 - horrible but i have sohcahtoa and this
41:11 - stands for sine is equal to the opposite
41:13 - over the hypotenuse this is cosine is
41:16 - equal to the adjacent over hypotenuse
41:18 - and then toa that's tangent is opposite
41:20 - over adjacent all right so i've written
41:22 - these equations here now we know what
41:23 - they mean and let's just go through
41:25 - opposite hypotenuse and adjacent so the
41:27 - hypotenuse is the longest side which is
41:29 - v
41:29 - opposite is the opposite side to the
41:31 - angle so kind of what it's facing which
41:33 - is right there and then a is the other
41:35 - angle so not the hypotenuse or sorry the
41:37 - other side so not the hypotenuse and not
41:39 - the opposite so in this case that's
41:40 - adjacent so what i need to do is find a
41:42 - way where i can solve for o in this case
41:45 - it's going to be y using values that i
41:47 - know in this case i know the value theta
41:49 - and i know the value v these are kind of
41:51 - like question marks um in a sense right
41:53 - so if i want to solve for y i look at my
41:56 - equations and i find something where i
41:57 - have the angle and i have the hypotenuse
42:00 - in this case we have it here sine
42:03 - opposite hypotenuse so i have the angle
42:05 - i have the hypotenuse and i'm going to
42:06 - solve for o so i say that the sine
42:10 - of
42:11 - theta
42:13 - is equal to and then that is going to be
42:15 - the opposite
42:16 - over my hypotenuse but my hypotenuse is
42:18 - a value v which is a velocity that we'll
42:21 - know let's say v is equal to 4 or
42:23 - something okay so now if i want to solve
42:25 - for o all i have to do is multiply v by
42:28 - the sine of theta and that gives me the
42:31 - um the value for o and in this case
42:33 - that's the velocity that i need to move
42:34 - at in the y direction going upwards
42:37 - hopefully you're following again hard to
42:39 - do this without a pen and paper because
42:40 - i'm doing this with my hand and mouse
42:42 - but hopefully you get it and the same
42:45 - thing now is going to apply for the
42:47 - value x now when i want to solve for x
42:49 - i'm going to use the equation cosine is
42:52 - the adjacent over the hypotenuse and
42:54 - really all that means is that i'm going
42:55 - to multiply the cosine of the angle by x
42:58 - as opposed to the sine of the angle by y
43:01 - i'm going to do this in code so it
43:02 - should make more sense but that is
43:04 - practically the trigonometry lesson for
43:06 - today that i needed to give you
43:08 - all right so now that we are done with
43:10 - the math thank god we can go back to
43:11 - create circular projectiles and i can
43:13 - actually start writing this out so i'm
43:15 - going to say my angle difference
43:18 - or angle diff
43:19 - is going to be equal to and then this is
43:21 - going to be math.pi multiplied by 2
43:23 - which remembers 360 degrees divided by
43:26 - the number of projectiles that i have
43:28 - because i want to evenly move around the
43:29 - circle uh and that's that's how i get
43:31 - this right how many degrees i should
43:33 - essentially shift for every projectile
43:35 - that's what this value is
43:37 - i'm then going to create a variable this
43:39 - is going to be current underscore angle
43:41 - is equal to 0. now next i'm going to
43:43 - determine my velocity and i'm going to
43:44 - do this slightly random i'm going to say
43:46 - random dot rand range like that and then
43:50 - i'm going to say the self dot projectile
43:52 - val
43:53 - one and the self.projectile valve plus
43:55 - one just so i get some uh variance in
43:58 - the speed at which my projectiles move
43:59 - at now it's very slight because i'm just
44:01 - going down one or up one you can adjust
44:03 - this if you want
44:04 - that's what i'm doing for velocity now
44:06 - what i need to do is i need to loop
44:08 - through all my projectiles so i'm going
44:10 - to say 4i
44:11 - in range and then the number of
44:13 - projectiles that i have and the number
44:15 - of projectiles we will randomly generate
44:17 - in a minute
44:18 - now that we have that we need to
44:19 - determine the x velocity and the y
44:21 - velocity of the projectile so i'm going
44:22 - to say the x velocity is equal to math
44:25 - dot and then this is going to be sine
44:27 - and i don't actually know if i have math
44:29 - imported yet i don't so let's import
44:31 - math
44:32 - okay
44:33 - come here and we say the x velocity is
44:36 - math.sine
44:38 - of the current angle that i have
44:40 - multiplied by the velocity just like i
44:42 - showed with the equation that's what
44:43 - we're doing
44:44 - then i'm going to say the y velocity is
44:46 - equal to math.cosine of the current
44:48 - angle multiplied by velocity okay so we
44:50 - have x and we have y
44:52 - now we need to determine the color so
44:54 - for the color i'm just going to say this
44:56 - is random dot choice
44:58 - and then this is of colors this randomly
45:01 - sucks a color for us and then i'm going
45:03 - to say self.projectiles.append
45:06 - and i'm going to create a projectile
45:08 - like this and to create a projectile i
45:10 - need to pass my self.x this is where it
45:13 - starts
45:14 - self.y
45:16 - i also need to pass my x velocity my y
45:19 - velocity and my color and let's just
45:22 - confirm here we have x y x val y val
45:25 - color looks good to me
45:26 - okay so we create a projectile and then
45:29 - lastly we need to increment our current
45:30 - angle by the angle difference so that
45:33 - every single projectile is slightly
45:35 - shifted in this case is going to be to
45:37 - the right and we will complete 360
45:39 - degrees worth of projectiles being shot
45:42 - off by kind of different angles so
45:44 - that's what this will do now inside of
45:45 - explode i will just call this method so
45:47 - i'll say self
45:50 - dot create circular projectiles but i
45:52 - need to pass through it a number of
45:53 - projectiles so i'm going to say my num
45:55 - projectiles is equal to and then this is
45:57 - going to be the random dot rand range
46:00 - and this will be
46:02 - the min projectiles
46:04 - and the max projectiles but don't forget
46:06 - the self
46:07 - okay
46:08 - there we go
46:09 - so now
46:10 - we actually have pretty well everything
46:12 - we need assuming we pass numb
46:13 - projectiles to now view a circular
46:15 - pattern of projectiles coming off of our
46:18 - fireworks
46:19 - again i apologize that it got complex at
46:21 - the end there but i do try my best to
46:22 - explain everything that we're writing
46:24 - rather than just making you write it out
46:25 - with me hence the trigonometry less so
46:28 - let's
46:29 - run the code here and prepare to be
46:31 - amazed uh assuming that we didn't mess
46:33 - anything up let's have a look here and
46:36 - we got an error okay so not as amazed as
46:38 - i thought we have projectiles is not
46:40 - defined and the reason that would be the
46:43 - case is because where is this we are on
46:48 - line 100 uh
46:51 - this is what we need to say project dial
46:54 - not project dials dot draw so i had an s
46:57 - need to just remove that and now we
46:59 - should actually be able to draw them so
47:00 - let's run the code now
47:02 - and see if we got any other errors
47:05 - okay so we launch it and
47:08 - there we go okay so
47:10 - you can see that a rectangle is being
47:12 - created the issue right now is that
47:13 - we're not actually moving the
47:15 - projectiles so that was kind of an
47:17 - oversight by me we need to move them
47:19 - otherwise they're all going to be placed
47:20 - in the same place and we're not going to
47:22 - see them move
47:23 - so to move the projectiles we need to go
47:25 - to our firework which is right here and
47:27 - we need to now implement something in
47:29 - the move method
47:31 - apologies guys totally overlooked that
47:33 - but i'm going to say similar to what we
47:35 - did with the fireworks projectiles to
47:38 - remove
47:39 - is equal to an empty list and i'm going
47:41 - to say 4 projectile
47:43 - in self.projectiles
47:46 - i'm going to say projectile
47:48 - like this
47:49 - dot
47:50 - move and that's all we need and then i'm
47:54 - going to check if the projectile is off
47:55 - the screen and if it's off the screen
47:57 - i'm going to remove it so i'm going to
47:58 - say if projectile dot x is greater than
48:02 - or equal to and then this is going to be
48:03 - the max width that's why we had to pass
48:05 - this year
48:06 - or the projectile dot
48:09 - x is less than zero
48:12 - then what i want to do is remove it and
48:14 - the way i remove it is projectiles to
48:16 - remove dot append projectile i'm going
48:18 - to say l if the projectile.y is greater
48:21 - than or equal to the maximum height or
48:23 - the projectile dot y is less than zero
48:26 - then the exact same thing projectiles to
48:29 - remove dotted pen projectile and then we
48:31 - will loop through all of those so we'll
48:32 - say for projectile
48:35 - in projectiles to remove and then we're
48:37 - going to say
48:39 - self.projectiles.remove the projectile
48:41 - and notice my autocomplete did a
48:42 - fantastic job there because i'd written
48:44 - the same thing previously
48:45 - all right so that's what we need for
48:47 - move pause the video if you need to
48:48 - complete that i'm going to run the code
48:50 - though and hopefully fingers crossed we
48:52 - will see the projectiles moving
48:55 - so let's have the firework ball come up
48:59 - and there you go we get the projectiles
49:02 - going and fading off into the distance
49:05 - so let's create a few more launchers
49:06 - just so we get a nice kind of aesthetic
49:08 - effect here and then i will implement
49:10 - the star pattern and then we're pretty
49:12 - much done so let's just copy this
49:14 - launcher let's make four of them let me
49:17 - just save this so we have some more
49:18 - space uh let's change the frequency to
49:21 - be like four
49:22 - two and maybe five
49:25 - and yeah we also need to change the x
49:28 - value so let's change the x to be 300
49:31 - 500 and 700
49:34 - and now let's run the code and see what
49:37 - happens with four
49:38 - okay so they're not completely evenly
49:40 - spaced out but that's fine by me and we
49:42 - can see that they're all going to launch
49:44 - and work properly and we shouldn't
49:45 - experience any lag because we are
49:47 - removing all of the stuff once it's kind
49:49 - of off the screen and we no longer need
49:51 - to be drawing
49:52 - sweet so let's do the star pattern uh
49:54 - the star pattern i'm not going to show
49:56 - you the trigonometry for because i'm
49:57 - sure i've already bored many of you with
49:59 - that i'm just going to write it out and
50:01 - yeah hopefully i can do a good enough
50:03 - explanation so for the star pattern it's
50:06 - going to be slightly different than the
50:07 - circular pattern what i want to do is
50:09 - launch projectiles kind of at a
50:11 - different speed
50:12 - in the same eight direction so since
50:15 - it's a star i'm just going to pick eight
50:16 - different angles that i want to launch
50:18 - at and then
50:19 - launch at a different speed so that it
50:21 - looks like projectiles are kind of
50:22 - moving like with each other in the same
50:24 - direction so i'm going to say define and
50:27 - then this is going to be create
50:28 - underscore star underscore projectiles
50:31 - like that
50:32 - i won't take in the number of
50:33 - projectiles because for this one we
50:35 - actually need to set it to an even
50:36 - number all right so inside of create
50:38 - star projectile i changed it from start
50:40 - to star by the way so we spell it
50:42 - correctly i'm going to do the fall i'm
50:44 - going to say my angle
50:47 - like this underscore difference so
50:49 - underscore diff is equal to and then
50:51 - this is math dot pi divided by four the
50:55 - reason i'm doing that is because we want
50:57 - to have eight separate angles that's
50:59 - just what i've decided uh so if we do
51:01 - math dot pi is the angle difference and
51:02 - that will give us eight unique ones
51:04 - because if we know that two pi is uh 360
51:07 - the amount that pi over four is one
51:09 - eighth of 360 and that's what we're
51:10 - doing this for next we're going to have
51:12 - our current angle that's going to be
51:14 - equal to zero and i'm going to say 4i in
51:16 - range and then we need to just decide
51:18 - manually how many projectiles we want to
51:20 - have so in this case i'm going to go
51:21 - with 64 projectiles and ideally we'll
51:24 - get eight projectiles going in each
51:25 - direction
51:26 - now since these projectiles are moving
51:28 - in the same direction they need to have
51:30 - a different velocity or a different x
51:32 - and y position otherwise we're only
51:34 - going to see one projectile in each
51:36 - direction so the way that i'm going to
51:38 - fix this i'm going to say that the
51:40 - velocity
51:41 - is equal to and then this is going to be
51:43 - the self dot projectile velocity plus
51:48 - and then this is going to be i
51:50 - mod uh and actually this is going to be
51:53 - a little complicated to do but i'm going
51:54 - to do i mod 4.
51:57 - um
51:58 - is this going to work i don't know if
52:00 - this is going to work properly so
52:02 - actually scrap that i've been changing
52:04 - this back to i mod eight i've just been
52:06 - confusing myself with how i'm gonna do
52:08 - this okay i'll explain why that's gonna
52:10 - work in a second uh but let's continue
52:12 - so we have vel is equal to that and i'm
52:14 - actually gonna change this to be one to
52:17 - just so that my modulus operators work
52:19 - as i expect them to
52:21 - and now i'm going to calculate the x
52:22 - velocity and the y velocity so the x
52:24 - velocity is going to be the math dot
52:27 - sign of the current angle multiplied by
52:29 - my vowel
52:30 - and then for the y velocity
52:32 - it will be this just the opposite with
52:34 - cosine
52:35 - next i'm going to have my color
52:36 - random.choice colors and then i'm going
52:38 - to say self.projectiles dot append not
52:41 - star projectile although good guess
52:42 - autocomplete and this is going to be
52:45 - self.x
52:46 - self.y x y y val and color and then we
52:51 - need to increment our uh current angle
52:54 - so i'm going to say if
52:55 - and then this is going to be i plus 1
52:59 - mod eight and actually i don't need the
53:01 - plus one because i started at one so
53:04 - we're gonna say if i mod eight
53:06 - is equal to zero then the current angle
53:10 - plus equals the angle difference so
53:12 - essentially what we're doing here is
53:14 - every uh i guess what is this gonna be
53:18 - every eight uh projectiles we're going
53:20 - to increment the angle so we're gonna
53:22 - launch eight projectiles in the same
53:23 - direction with a different speed so we
53:25 - create kind of this star-like pattern um
53:28 - on the screen that that's what this will
53:30 - do i can't really explain it much more
53:32 - than that so now what we need to do
53:33 - though is figure out a way to
53:35 - programmatically decide if we wanted to
53:37 - uh create circular projectiles or create
53:39 - star projectiles and we'll just use a
53:41 - random number to do that so i'm going to
53:42 - say if random.randint
53:45 - and we could just say zero one
53:47 - is equal to zero then we will do this
53:51 - otherwise we'll do the star projectiles
53:54 - uh so no self dot
53:57 - create star projectiles like that
54:00 - okay so i think that's actually all we
54:02 - need that should complete the project so
54:04 - let's run this now and see
54:07 - if we get any star projectiles on the
54:08 - screen that are moving in the correct
54:10 - direction
54:11 - okay so there you go we got the star and
54:13 - notice how the star is like super fast
54:14 - because of the way that i've done the
54:16 - velocity and that we're launching eight
54:18 - in that direction now if you wanted to
54:20 - kind of make these less exaggerative
54:23 - what you could do for the star is
54:25 - instead of doing 65 you could just do
54:27 - 32. now if you change this to 32 you
54:30 - have to change the velocity accordingly
54:33 - uh to be mod 4 so you're doing half of
54:35 - what you did before and sorry this needs
54:37 - to be 33
54:38 - because of the number of projectiles now
54:40 - to fix this we could just say num
54:42 - projectiles we can do this
54:44 - programmatically instead so if i make
54:46 - this now in the case 32
54:49 - then i say num
54:50 - projectiles plus one and then rather
54:53 - than imod four i'm gonna do i mod and
54:56 - then this is gonna be the number of
54:58 - projectiles divided by eight because we
55:02 - have eight unique directions so now this
55:04 - will just work and you'll see that we
55:06 - get less going in a direction and
55:08 - they'll actually end up be going a bit
55:09 - slower too so let's look at this now
55:12 - and let's see if we get any stars
55:15 - all right so actually i made a mistake
55:17 - here now rather than doing i mod 8 i
55:19 - need to do the same thing i mod number
55:21 - of projectiles over 8 and then that will
55:25 - work properly and we won't get the
55:26 - angles cutting off so let's try this now
55:29 - and let's see what we get
55:32 - and there we go now we get a proper star
55:34 - and it's programmatic and we can change
55:36 - it and mess with the speeds and all of
55:38 - that
55:39 - all right this was a long tutorial guys
55:41 - i apologize near the end it did get a
55:42 - bit confusing i wasn't planning on going
55:44 - that in depth in the math but i
55:46 - obviously wanted to try my best to
55:47 - explain it to you
55:48 - hopefully you guys appreciate this and
55:50 - enjoyed and now we are officially
55:52 - celebrating together 1 million
55:54 - subscribers again massive thank you to
55:56 - all of you guys for supporting me on
55:58 - this channel the comments are just
56:00 - amazing yes i don't reply to all of them
56:01 - but i do read them all
56:03 - and really this has just been awesome to
56:05 - hit 1 million subscribers so thank you
56:07 - guys so much hopefully you enjoyed the
56:09 - video if you did you know what to do
56:11 - like subscribe and i will see you in the
56:13 - next one
56:15 - [Music]