00:00 - hello everybody and welcome to another
00:01 - youtube video so in today's video i'm
00:04 - going to show you how to run code in
00:06 - sublime text this is a question i get
00:08 - asked all the time so i figured i'd make
00:10 - a short quick video and demonstrate how
00:12 - to do that with that said let's go ahead
00:14 - and dive in
00:18 - [Music]
00:24 - alright so i'm here in sublime text i
00:26 - have it open in front of me and right
00:28 - now i just have a folder open with a
00:30 - very simple python file so i have import
00:33 - sys and then i'm just printing out the
00:35 - version of the python interpreter that's
00:37 - being used to run this code and then i'm
00:39 - printing out hello so that's the very
00:41 - basic setup for me at least if you want
00:43 - to run some python code but for you guys
00:45 - i'm sure many of you want to run other
00:47 - types of code so don't worry the stuff
00:49 - i'm going to show you in this video will
00:50 - apply to other languages as well but i'm
00:52 - just going to do all of the demos using
00:54 - python
00:55 - all right so how do we run code in
00:57 - sublime text well in sublime text we
00:59 - have something called a build system and
01:01 - we kind of perform a build and a build
01:04 - is just really executing your code so
01:06 - the way you see all of this stuff is you
01:08 - can go to tools and you can see that we
01:10 - have build system and then we have build
01:12 - we have build with we have build results
01:14 - save on all build this is all of the
01:15 - stuff related to actually running your
01:17 - code
01:18 - anyways go over build system and you'll
01:20 - see that you should have automatic
01:22 - checked now if you don't have automatic
01:24 - check you should check that but you can
01:26 - see all of the built-in build systems
01:28 - that sublime text has so if you're using
01:30 - any of these languages here and you have
01:33 - the correct interpreter or compiler
01:35 - already installed on your system and
01:37 - that's available on your system path
01:39 - i'll describe what that is in a second
01:41 - then these build paths or build systems
01:43 - should just work
01:45 - so for example if i go here to python
01:48 - and i select this i don't need to select
01:49 - it i'm just going to select it to show
01:51 - you now the way that i would run my code
01:53 - is i would do control b on my keyboard
01:56 - or command b on your keyboard if you are
01:58 - on mac or you can press the f7 key and
02:01 - f7 will run your code so we'll open up
02:04 - kind of the console here and you can see
02:05 - the output of your code tells you how
02:07 - long it took now to close this window
02:09 - you press escape and again to run this
02:11 - it's ctrl b or command b or f7 or
02:15 - function f7 if you're on mac or linux
02:17 - that is how you run this code now for
02:20 - some reason that doesn't work for you
02:22 - there's a few different things you do to
02:23 - try to fix this first of all if you're
02:26 - using something like python when you
02:27 - install python or if you reinstall
02:30 - python make sure you add this to your
02:32 - system path now the system path at least
02:34 - on windows can be accessed by going to
02:36 - your environment variables so just type
02:39 - in environment variables or env in this
02:41 - case in the windows search bar it'll
02:43 - bring you to something that looks like
02:44 - this and then what you can do is go to
02:46 - your path you can press edit and you can
02:49 - add the direct path to where your
02:52 - interpreter compiler whatever it is may
02:55 - be so in this case you can see that i
02:56 - have python38 python38 in my path so
03:00 - that means i'm actually able to type the
03:02 - command python and run the python
03:05 - executable
03:06 - i'm not going to get too far into this
03:08 - but that is the reason why for some of
03:09 - you this won't work because you don't
03:11 - have python or whatever interpreter or
03:13 - compiler you're trying to use added to
03:15 - your system path now if you don't have
03:17 - it added to your system path don't worry
03:18 - you don't need to add it but to do that
03:20 - you would press new and then type in the
03:22 - actual path to where the executable file
03:24 - is but if you don't want to do that the
03:26 - way that you can fix this is by creating
03:28 - a new build system so what you can do is
03:31 - go to tools here in sublime text and
03:34 - then you can go to build system and new
03:36 - build system now i'm going to show you
03:38 - how you make a new build system so what
03:40 - i'm going to do is save this file first
03:42 - of all it will bring you to this kind of
03:44 - user directory so you want to be in the
03:47 - user directory don't change the
03:48 - directory when you save this file and
03:50 - you want to call this file something
03:52 - whatever the name of the build is dot
03:54 - sublime build so in this case i'm going
03:56 - to add a path for my python 3.9
03:59 - interpreter so i'm going to say python39
04:03 - good and then this is dot sublime hyphen
04:06 - build it's very important that you have
04:08 - this extension if you don't have this
04:10 - extension it's not going to show up as a
04:12 - potential build system and then you can
04:14 - name this here whatever you want so i
04:16 - just named it python39 good
04:18 - okay so let me save this and now i'm
04:20 - going to show you what we actually need
04:21 - to type in here to be able to execute
04:24 - some code so what you want to do is have
04:26 - cmd right here so this is your first
04:28 - kind of key inside of this
04:30 - json or dictionary or whatever you want
04:32 - to call it and then what you want to do
04:34 - is the following you want to have a list
04:36 - you want to put the name of the command
04:38 - that you want to run so in this case i
04:40 - want to run python and then you want to
04:42 - put the file that you want to run this
04:44 - command on now in this case you're just
04:46 - going to do dollar sign file this stands
04:48 - for run the current file so right now
04:51 - what i've done is i've said okay when i
04:53 - run this build system right here in my
04:55 - terminal i want to run python space and
04:58 - then whatever the name of the file is
05:00 - that's what this does
05:02 - if you have multiple commands that you
05:03 - want to run then you separate them by
05:05 - commas right and they'll be separated
05:07 - out on the same line
05:08 - hopefully that kind of makes sense but
05:10 - that's what this build system will do so
05:12 - i'm doing python and then the name of
05:13 - the file now in my case this python the
05:16 - python interpreter that i want to run is
05:18 - not added to my system path and so
05:21 - python like this is not going to work
05:23 - what i actually need to do is give the
05:24 - direct path to where this python
05:27 - interpreter is so i'll show you but if
05:29 - you go here look i'm on my c drive and
05:31 - notice i'm in a folder called python39
05:34 - so python39 right here and then what i
05:36 - have is well my python interpreter this
05:39 - python right here that's what i want to
05:41 - access so what i'm going to do is copy
05:43 - this path
05:44 - and then i'm going to go here
05:46 - i'm going to change this to a forward
05:47 - slash and then i'm going to put another
05:49 - forward slash between python so this is
05:51 - actually the executable file i want to
05:52 - run it's in my c drive in the python 3.9
05:55 - folder it's called python okay and then
05:58 - i want to run the file so this will
05:59 - separate this with a space and just run
06:01 - that
06:02 - now that we have that the next thing
06:04 - that we need to add here is our selector
06:06 - so we're going to say selector and then
06:08 - this is going to be equal to in my case
06:11 - python dot
06:12 - and then source or sorry other way
06:14 - around this will be
06:15 - source
06:17 - dot python now what this means is to
06:19 - automatically select this build path for
06:22 - anything that has python code that's
06:24 - kind of what the selector says now what
06:27 - i will do is leave a link in the
06:28 - description to the documentation for how
06:30 - you create a new build system so you can
06:33 - read through it and see all the
06:34 - specifics but this is the basics here on
06:36 - how you would do something for a new
06:38 - python build path
06:39 - anyways now what i'm going to do is go
06:42 - back to test.pi and show you that now
06:44 - that i've saved this if i go to tools i
06:48 - go to build system i now have this
06:50 - python 3 9 good as another build system
06:53 - that i can use so now if i select that
06:56 - and i run this notice i'm getting 3.9.7
06:59 - whereas previously if i just go back
07:01 - here to automatic and i run this i'm
07:04 - getting python 3.8.3 so i'm changing
07:06 - what's being used to execute this python
07:09 - code
07:09 - so let's go back here and i'll select
07:11 - python 3.9 good
07:13 - okay so that's pretty much it for
07:15 - running code in sublime text now the
07:17 - last thing i'll show you is how you
07:18 - cancel a build so sometimes you have an
07:21 - infinite loop or you just want to exit
07:22 - the build at some point in time there is
07:24 - actually a shortcut you can use to do
07:26 - that now i'm not sure what the built-in
07:28 - is because the built-in shortcut i
07:30 - overrode but i'll just show you how to
07:32 - override it and then how you can see
07:34 - what the shortcut is
07:35 - so we're going to do is go to
07:36 - preferences and then keybindings okay
07:39 - when we do this it's going to open up
07:41 - this large thing like this now if you go
07:43 - in here you can see what all of the key
07:46 - bindings are and what they do so you can
07:49 - kind of scroll through here and try to
07:50 - find what it is you're looking for
07:51 - however on the right hand side of the
07:53 - screen
07:54 - we have any of our custom key bindings
07:56 - so in this case i have one custom
07:58 - keybind
07:59 - and this is ctrl shift c and what this
08:01 - does is cancel the build so what you can
08:04 - do is add this in to your custom keymap
08:07 - okay
08:08 - and then you can just make this whatever
08:10 - you want so i've made this ctrl shift c
08:13 - but just keep this exact same format so
08:15 - you want your open curly brace keys
08:17 - colon and then whatever the key is
08:20 - then you're going to have command and
08:22 - then cancel build and this will cancel
08:24 - build so in this case it's ctrl shift c
08:26 - for me
08:27 - so that means if i want to cancel my
08:29 - build let's just do a infinite loop here
08:31 - so let's go while true
08:33 - print
08:34 - test okay i'm going to run this so now
08:36 - if i want to cancel this ctrl shift c
08:38 - and notice it cancels my build
08:41 - okay so that is pretty much all i had to
08:43 - show you i apologize if this doesn't
08:45 - necessarily work for all of the
08:46 - languages that you were looking for but
08:48 - hopefully this at least gave you kind of
08:49 - a little bit of a head start into how
08:51 - you can run some code again the
08:53 - trickiest thing here is going to be
08:54 - creating this file if you need one you
08:56 - just need to actually figure out the
08:58 - path to the interpreter or compiler you
09:00 - want to use and then you're going to
09:01 - have to choose the right selector i'm
09:03 - not sure what all the selectors are off
09:05 - the top of my head that's why i will
09:07 - leave the documentation in the
09:09 - description alright so with that said i
09:10 - am going to end the video here i hope
09:12 - this was helpful and i look forward to
09:13 - seeing you in another youtube video
09:17 - [Music]