00:00 - today we're looking at six hidden
00:01 - features of python functions they get
00:04 - more and more interesting as we go
00:05 - through them so make sure you stick
00:07 - around until the end of the video let's
00:09 - begin with hidden feature number one now
00:11 - the first feature to look at here is
00:13 - that python functions can actually
00:15 - accept an unlimited number of positional
00:17 - or keyword arguments the way that we do
00:20 - that is by using something known as star
00:22 - args and star star quarks now let's
00:24 - begin by looking at Star arcs when we
00:27 - put a parameter inside of the function
00:29 - that has an AS and then args this allows
00:32 - us to have any number of positional
00:34 - arguments be passed to the function a
00:36 - positional argument is one that's in a
00:38 - specific order so what I can do here is
00:40 - put maybe a 1 2 3 doesn't matter and as
00:44 - long as I save the code and run this you
00:46 - can see that we print out args it
00:48 - actually gives us a topple that contains
00:50 - all of the different arguments now we
00:52 - can use this in combination with other
00:55 - mandatory arguments so maybe I have an
00:57 - argument a b and then args and now what
01:00 - will happen is the remainder of the
01:02 - arguments will be put inside of args
01:04 - whereas the rest will be stored in A and
01:06 - B in the correct corresponding order so
01:09 - when I run this here you get a as a and
01:12 - b as one and then we get two and three
01:15 - this is great when you don't know the
01:16 - number of arguments that will be passed
01:18 - to a function and you want to accept any
01:20 - number of them you may actually know
01:21 - that if you look at the print function
01:23 - in Python that's exactly how this works
01:25 - it accepts any number of positional
01:27 - arguments you can see that right here as
01:29 - value use and then it has some optional
01:31 - keyword arguments that you can pass to
01:33 - it so let's continue looking at this
01:35 - because it gets even more interesting so
01:37 - as well as star args we can have
01:39 - something known as star star quars and
01:41 - we can use this in combination with all
01:43 - of the other parameters that we've
01:44 - looked at and what this allows us to do
01:46 - is accept any number of keyword
01:48 - arguments so here if I print out quarks
01:51 - what I can do now is pass any keyword
01:53 - argument I want to this function so I
01:55 - can just make this up I can do something
01:57 - like key is equal to two value is equal
02:00 - to 7 really doesn't matter because we
02:02 - can pass anything that we want and now
02:04 - when we run the code you see that we
02:06 - actually get a python dictionary that
02:08 - contains the various keyword arguments
02:10 - corresponding with their values this can
02:13 - be useful when you don't know what
02:14 - keyword arguments are going to be
02:16 - accepting and you want to use specific
02:18 - dictionary values inside of your
02:20 - function now as a last note about this
02:22 - feature you can also combine it with
02:23 - keyword arguments that have default
02:25 - values so I can do something like values
02:27 - is equal to and then make this an array
02:29 - just note that in order for that to work
02:31 - you need to put it before quars so quars
02:33 - needs to be the last argument in your
02:35 - list so in this case now I can also pass
02:37 - values equal to 1 2 3 and if we want to
02:41 - go here and print out our values as long
02:44 - as we save and run you see that we get
02:47 - that popping up here there you go that
02:49 - is star args and star star quars and
02:51 - this will become more useful throughout
02:52 - the rest of the examples where you'll
02:53 - see how we write some more advanced
02:55 - functions that utilize these features
02:57 - now before we continue I want to talk to
02:59 - any of you that are serious about
03:00 - becoming software developers look it's
03:02 - no surprise that today's market is more
03:04 - difficult than it was a few years ago it
03:06 - can be difficult to get interviews and
03:08 - especially to land jobs however what
03:10 - makes that a lot more difficult is if
03:11 - you don't know how to present yourself
03:13 - correctly you don't have the right
03:14 - guidance or years of experience helping
03:16 - you out I've reviewed hundreds of
03:18 - different rums a lot of them from
03:20 - subscribers of mine and it's really
03:21 - unfortunate how many mistakes people are
03:23 - making in the small details that can
03:25 - really hold you back now I do have a
03:26 - program with course careers where not
03:28 - only do we teach you all of the skills
03:30 - you need to actually land a software
03:32 - development position but we give you all
03:34 - of that guidance and really focus on
03:35 - helping you land a job we give you res
03:38 - tips we have an entire section in the
03:39 - course just dedicated to that we explain
03:41 - to you how to make connections on
03:43 - LinkedIn and what type of jobs you
03:44 - should actually be applying for we also
03:46 - give you a specialization in front end
03:48 - backend or devops so you have those
03:50 - specialized skills that you need in a
03:51 - competitive market like today we've
03:53 - already had a lot of success Landing
03:55 - developers jobs even when they have no
03:57 - prior experience and I'm confident we
03:59 - can help you out if you want to check
04:00 - out the program there's a free
04:01 - introduction course with no obligation
04:03 - I'll leave a link to it in the
04:04 - description and I look forward to seeing
04:06 - you there now let's get into the next
04:08 - feature so this next feature to look at
04:10 - is known as functions as first class
04:13 - citizens now what that really means is
04:15 - that we can treat python functions just
04:17 - like any other object we can store them
04:19 - in a variable we can pass them as an
04:21 - argument to a function we can return
04:23 - them from a function and we can store
04:25 - them in various data structures we can
04:27 - use Python functions like we use any
04:29 - other pyth Pyon object and I want to
04:30 - show you a few examples so you really
04:32 - understand this feature because that's
04:34 - how a lot of more advanced python code
04:36 - works so let's look at this function
04:38 - right here which is called function
04:40 - caller now what this does is actually
04:42 - call any arbitrary function with any
04:45 - args and quars that are provided to it
04:48 - now when we use star args and we use
04:50 - star star quars we create kind of this
04:52 - Dynamic parameter system where we can
04:54 - accept any number of positional
04:55 - arguments and any number of keyword
04:57 - arguments now what we do here is we
04:59 - return whatever is returned from this
05:02 - function right here because remember
05:03 - this will be a function object so we can
05:05 - call it using the calling syntax and we
05:08 - pass to this star args and star star
05:10 - quarks now when we use the asteris
05:13 - before args what this will do is take
05:15 - all of our arguments which are normally
05:17 - stored in something like a tupple and it
05:19 - will actually split them into the
05:21 - individual positional arguments and pass
05:23 - that to the function so imagine it like
05:25 - actually removing these parentheses here
05:27 - and just writing inside of the function
05:29 - call 1 2 3 so it will pass them properly
05:32 - as three individual arguments now same
05:35 - thing happens when we use that with
05:36 - quars let's say we have a dictionary
05:38 - value like value equals 1 this is simply
05:41 - going to write it as value equals 1 so
05:43 - if we have no keyword arguments nothing
05:45 - will be passed and if we have no
05:46 - positional arguments nothing will be
05:48 - passed as well this just splits them and
05:50 - passes it to the function so it can call
05:52 - it dynamically okay so let's have a
05:54 - quick example of actually using this I'm
05:56 - just going to say result is equal to my
05:58 - function caller and what I'm going to do
06:00 - is use my function as first class s and
06:02 - principle which means I can pass the
06:04 - function add and notice I don't call the
06:07 - function I simply write the name of it
06:09 - now this will give me a reference to
06:11 - this function just like a normal python
06:13 - object and then I can call it later on
06:15 - so I say function caller is equal to add
06:17 - and then I'm going to pass to this
06:19 - function caller function the parameters
06:20 - that I need so maybe we'll go with 10
06:22 - and 11 and now what I can do is simply
06:24 - print out this result and when we run
06:28 - the code here you see we get the value
06:29 - of 21 now let's look at the same example
06:32 - Now by using the PO function so I'm
06:34 - going to change this to say Po and now
06:36 - we're going to pass some keyword
06:37 - arguments so I'm going to say base is
06:39 - equal to 2 and I'm going to go exponent
06:42 - is equal to 5 okay I'm going to save my
06:45 - code here and run and notice we get the
06:47 - value of 32 so that's great now let me
06:50 - show you a more advanced example so you
06:52 - can really see the power of doing this
06:54 - all right so I've just written a bit
06:55 - more of an advanced example here feel
06:57 - free to pause the video if you need some
06:59 - time to understand it but what I'm doing
07:01 - here is using this Advanced Property as
07:03 - functions as first class citizens now
07:05 - you can see that I have a list of
07:06 - functions I have four functions inside
07:08 - of here I've simply written their names
07:10 - again I haven't called them then what
07:12 - I've done is created a list of arguments
07:15 - now notice inside of my list I have
07:17 - another list and inside of here I have a
07:19 - tupple this contains my positional
07:21 - arguments and I have a dictionary which
07:23 - contains my keyword arguments now I've
07:25 - done that for all of the corresponding
07:27 - functions the idea is I want to write a
07:29 - for Loop which I've done right here that
07:31 - Loops through all of my various
07:33 - functions and all of my arguments that
07:35 - correspond to those functions and then
07:37 - calls those functions and prints out the
07:39 - result this way I can call all of the
07:41 - functions in one for Loop rather than
07:43 - doing them manually now what I've done
07:45 - for the for Loop is again use some
07:47 - Advanced syntax because this is meant to
07:48 - be a more advanced video where what I'm
07:50 - doing is looping through all of the
07:52 - functions and then their coresponding
07:54 - arguments and keyword arguments and I'm
07:56 - doing that using the zip function what
07:58 - the zip function will do is generate a
08:00 - list of topples for me that contain the
08:02 - function and then all of the
08:03 - corresponding arguments so it's going to
08:05 - give me a list that looks something like
08:07 - this it's going to have inside of here a
08:09 - tupple where it's going to have ADD and
08:11 - then it's going to have my list that
08:12 - contains the positional arguments and
08:14 - the keyword arguments now it's going to
08:16 - do that for all of the different entries
08:18 - that I have here giving me a convenient
08:20 - way to Loop through this structure so we
08:21 - can have dot dot dot here now what I can
08:24 - do is I can simply parse through these
08:26 - by using this for Loop syntax so I use
08:28 - function which references the first
08:30 - object inside of my tupple and then I
08:32 - put a tupple here indicating that I'm
08:34 - going to have two elements and then I do
08:37 - args and quars and get the arguments and
08:39 - get the keyword arguments you might not
08:41 - have seen this before but this is valid
08:43 - inside of a for Loop then what I do is I
08:46 - call my function because this is an
08:48 - object so I can call it and then I pass
08:50 - to it the star args and the star star
08:53 - quars and I print out the result now I
08:56 - know this looks a little bit complicated
08:57 - but when I run the code here you can see
08:59 - that we get the result 3 25 11 and 7
09:02 - which is exactly what I expected there
09:04 - you go that is functions as first class
09:07 - citizens moving on we are talking about
09:09 - closures now a closure is simply when
09:12 - you have a nested function that accesses
09:14 - a value from the outside function so in
09:17 - this case you can see that I have a
09:18 - function defined as Adder now inside of
09:21 - here it's actually perfectly valid for
09:22 - me to Define another function I can
09:24 - Define multiple functions and I can
09:26 - Define multiple levels of different
09:28 - inner functions
09:29 - in this case what this acts as is
09:32 - actually a function Factory what that
09:34 - means is that we Define this inner
09:36 - function notice the inner function uses
09:38 - the parameter from the outer function
09:41 - and then we actually return a reference
09:43 - to this inner function now this is a way
09:45 - for us to actually create a function
09:48 - that is dynamic based on what we pass to
09:50 - the function Factory I know this is a
09:52 - bit abstract but let's look at this
09:54 - example so I'm going to say Adder five
09:57 - is equal to and then I'm going to call
09:59 - Adder function and give it the value
10:01 - five what this is actually going to
10:03 - return to me is now a function that I
10:06 - can use that will add five to a
10:08 - particular value so now what I can do is
10:11 - I can say addore 5 I can give this a
10:14 - value of 10 we can store this in a
10:17 - result variable and we can print out the
10:20 - result so let's go ahead and do that
10:23 - save our code and run and notice that we
10:27 - get the value of 15 now we can utilize
10:29 - this function multiple times right so I
10:32 - can say result 2 is equal to Adder 5 and
10:37 - then I can pass to this maybe -7 and now
10:40 - we can print result and result 2 and you
10:44 - can see that we get the value sorry I
10:46 - need to save this and run it again of 15
10:48 - and -2 so this is how we actually create
10:52 - a function dynamically based on a value
10:55 - that we're passing to another function
10:57 - now there's all kinds of ways to use
10:58 - closures but they're typically used for
11:00 - something like a function Factory now
11:02 - just to show you a bit more in depth
11:03 - here we can also create an Adder of 10
11:05 - right and now I'm going to use my
11:07 - function Factory of Adder and I'm going
11:08 - to pass to this 10 so now when I use
11:11 - this function right if we hover over it
11:12 - you can see that it is really a function
11:15 - then what I can do is add 10 to a value
11:17 - so result three can be equal to Adder
11:19 - underscore 10 we can pass a value like
11:22 - -2 and then we'll print out our result
11:25 - three and when we run the code here you
11:28 - can see that we get eight so we've just
11:30 - used this function to create different
11:32 - versions of an inside function in this
11:34 - case we're just calling it Adder five or
11:36 - Adder 10 and that is how the closure
11:38 - operates again a lot of other examples I
11:40 - can show you but this simple one really
11:42 - illustrates all you need to know a
11:44 - closure utilizing a value from the
11:46 - outside function so now that we
11:48 - understand closures we can go ahead and
11:49 - have a look at decorators now a
11:51 - decorator is simply a function that
11:53 - modifies another function they might
11:56 - look a little bit complicated but I
11:57 - promise you now that we understand
11:59 - closures and star arcs and star star
12:01 - quarks you'll see how they work quite
12:03 - clearly if you want an entire tutorial
12:05 - on decorators and how to write your own
12:06 - I'll link one on screen but for now let
12:08 - me give you a quick look into how they
12:10 - work so let's focus our attention on
12:12 - this function right here which is one
12:14 - that I've just written quickly what this
12:16 - function does is accept two lists and
12:18 - accept some value called mod what it
12:20 - does is it checks all of the values in
12:22 - both of the list and sees if they're
12:24 - divisible by this mod value if they are
12:27 - it adds the new value to a new list and
12:30 - then returns that to me so in this case
12:32 - it's going to give me all of the even
12:33 - numbers from both of these lists in one
12:36 - list let's quickly have a look at that
12:37 - just to make sure that we understand how
12:39 - that works I'm going to say result is
12:40 - equal to this and then go down here and
12:43 - print my result and if we make sure that
12:46 - the code is saved and we run this you
12:48 - can see we get all of the even values uh
12:51 - that are inside of this list okay that's
12:53 - correct now let's say we want to modify
12:56 - this function and we actually want to
12:58 - print out all of the arguments it was
13:00 - called with and all of the keyword
13:01 - arguments it was called with as well as
13:04 - the result well I could just modify the
13:06 - function manually by going in here and
13:08 - adding those various print functions or
13:10 - I can use a decorator now this is The
13:13 - Decorator right here notice that what
13:15 - this function does is accept another
13:17 - function then it has an inner function
13:20 - inside of it this inner function accepts
13:22 - any number of arguments and any number
13:24 - of keyword arguments and what it does is
13:26 - it prints out what the function was
13:29 - called with in terms of its arguments
13:30 - and keyword arguments it actually calls
13:32 - the function so it says result is equal
13:34 - to and then it calls that outer function
13:36 - with the arguments and the keyword
13:37 - arguments it prints the result and then
13:40 - it Returns the result now how do we use
13:43 - this decorator function well what I can
13:45 - do is use this at symbol here and then
13:47 - write function printer what's actually
13:49 - going to happen now is that when I call
13:51 - my custom function it's going to
13:54 - actually call the modified function that
13:56 - was returned from this function DEC
13:59 - so just have a quick look here I'm not
14:00 - going to print out the result anymore
14:02 - because we're not going to need that and
14:04 - I'll break this down more in depth but
14:05 - again just bear with me so now notice
14:07 - that I get my two print statements
14:09 - function called with these different
14:11 - arguments and mod 2 and the result is 2
14:14 - 46 81 so I didn't change anything on
14:17 - this function I just decorated it with
14:19 - another function and again what's
14:21 - happening now is we're going to call the
14:23 - function that was returned from this
14:25 - decorator Again The Decorator is a
14:27 - function that's modifying a another
14:29 - function what's actually happening
14:31 - equivalently when I write that line here
14:33 - is the following we're having my custom
14:35 - function is equal to and then the
14:38 - function printer called with my custom
14:42 - function this is really the equivalent
14:43 - line watch now when I run this and
14:46 - you're going to see that we get the
14:47 - exact same result so The Decorator is
14:49 - just a shorthand Syntax for writing this
14:52 - we've changed my custom function to
14:55 - actually be whatever is returned from
14:57 - this here this modified function and the
14:59 - reason why this decorator will work for
15:01 - us is because it's Dynamic and it
15:03 - accepts any number of keyword arguments
15:05 - and any number of positional arguments
15:07 - it does a slight modification by for
15:09 - example printing out the arcs and the
15:10 - quarg getting the result printing it out
15:13 - and then returning the result but this
15:15 - function itself doesn't change and it
15:16 - still has the same behavior this
15:18 - function printer can be used on any
15:20 - function because of the way we've ridden
15:22 - it now I have an entire tutorial on
15:24 - decorators that goes through this more
15:26 - in depth so if you're still confused
15:28 - then check that out going to leave it on
15:29 - screen I just want to give you a little
15:31 - bit of a taste of how they work and this
15:33 - kind of hidden python feature moving on
15:35 - we're now going to look at a more
15:36 - complicated keyword that you might never
15:38 - have seen before in Python and that's
15:40 - the non-local keyword now in order to
15:43 - understand that let's first look at this
15:45 - closure that we have right here so we
15:47 - have some outer function and inside of
15:49 - the function we Define a variable like x
15:51 - = 10 we then have an inner function
15:54 - where we say x = 20 now when we do this
15:57 - really what's happening is creating a
15:59 - local variable that's local to this
16:01 - function scope so when we print inner X
16:04 - we're going to get 20 but sometimes what
16:07 - we want to do is inside of this inner
16:09 - function we want to modify a variable
16:11 - that's in the outside scope or the
16:13 - enclosing scope the one where this
16:15 - function is defined now in order to do
16:18 - that we can utilize the non-local
16:19 - keyword but first let's just print this
16:21 - out so we can see what we're getting
16:23 - notice we get Inner X is 20 and the
16:25 - outer X is 10 again what I want to do is
16:28 - I want to modify this x not modify this
16:31 - x now in order to do that I can Define
16:34 - nonlocal X when I do that what's going
16:38 - to happen is now python is going to look
16:40 - for a reference to X in the enclosing
16:43 - scope the enclosing scope is the scope
16:45 - in which this function is defined in
16:46 - which is this outer function so now
16:48 - what's going to happen when I say xal 20
16:51 - is I'm going to reference the X in the
16:53 - enclosing scope and I'm going to modify
16:55 - that instead so when I run the code here
16:57 - you can see I get Inner xal 20 and outer
16:59 - x = 20 as well now this works with
17:02 - nested levels of functions so I could
17:04 - Define another function inside of here
17:06 - and then utilize the non-local X there
17:08 - in fact let's do that we're going to say
17:10 - inner Funk 2 and here we're going to say
17:13 - x equals 100 and we're going to say
17:16 - print inner inner X and this time we're
17:20 - going to say that it's X and then we're
17:22 - going to call inside of here the inner
17:25 - function 2 Okay so let's run the code
17:27 - now and you can see that we get inner
17:29 - xal 20 inner X or inner inner X sorry
17:31 - equal 100 and then outer x equal 20 now
17:34 - again if we want the same thing where
17:36 - we're actually going to reference this x
17:37 - which then in turn is referencing this x
17:39 - what I can do is have my nonlocal X here
17:44 - okay and now let's watch what happens
17:46 - when we have multiple levels of nesting
17:47 - and notice we have the first inner X is
17:49 - equal to 20 and then we have 100 and 100
17:53 - now the reason why this works is because
17:54 - again we're printing inner X here this
17:57 - is before it's defined in side of the
17:59 - inner function two and change to 100 but
18:01 - you can see the final outer X is still
18:03 - equal to 100 because we have two levels
18:05 - of non-local meaning that we're always
18:07 - referencing this x up here okay that's
18:11 - how it works I know a little bit
18:12 - confusing especially when we get into
18:14 - this level of nesting but when you have
18:16 - a closure and you want to reference a
18:17 - variable in the scope outside of the
18:20 - current scope so the enclosing scope you
18:22 - use nonlocal x I can come up with a lot
18:24 - more advanced examples but I think
18:26 - that's enough to demonstrate the
18:27 - capability of this keyword now this next
18:29 - feature is simply function annotations
18:32 - you may have seen this before but I know
18:33 - a lot of people don't even know it
18:35 - exists now a function annotation is a
18:37 - way to define the type of your various
18:39 - parameters and return types for your
18:41 - functions it's super useful and I
18:43 - recommend you use it if you want more
18:45 - readable code now the main benefit of
18:47 - function annotations is simply
18:49 - readability and documentation it doesn't
18:51 - actually modify how the code works at
18:53 - all it still works the exact same way it
18:55 - would before and you can still
18:56 - incorrectly call a function so for
18:59 - example I can have ADD and I can pass
19:01 - two strings this is perfectly valid
19:03 - Python's not going to get mad at me for
19:05 - this even though the function is
19:06 - annotated as int int and int however
19:09 - you'll notice when I start writing my
19:11 - functions out here when I get my auto
19:13 - complete it's significantly better than
19:15 - it was before because it knows what type
19:17 - the various value should be it knows
19:19 - that X should be an INT y should be an
19:21 - INT and that the return type will be an
19:23 - integer this makes your code a lot
19:25 - easier to read and work with especially
19:27 - if it's in some kind of library or the
19:29 - developer can't directly see it now
19:31 - these are very simple function
19:33 - annotations which you can see right here
19:35 - we're defining the type of a parameter
19:36 - using the colon right so we say Name
19:38 - colon string and then we use this Arrow
19:40 - syntax to denote the return type however
19:43 - we can also use more advanced typings
19:44 - from the python typings Library which
19:46 - I'm going to show you right now so you
19:48 - can see here we have some more advanced
19:50 - types now coming from the python typing
19:52 - library in this case we have processed
19:54 - data which utilizes a list notice when
19:57 - we specify a list we also specify what's
19:59 - going to be inside of the list so in
20:01 - this case I'm saying we're going to have
20:02 - a list containing integers we then have
20:05 - a return type this will be a tupple that
20:07 - contains two ins so the first position
20:09 - is an INT and the second position is an
20:11 - INT as well but it's worth noting that
20:13 - we could Nest various types here and we
20:15 - can maybe have a list that contains an
20:16 - INT as the second position that's
20:18 - totally valid we can write that out now
20:21 - continuing here we also have optional
20:23 - optional specifies that a parameter will
20:25 - be optional and it has a default value
20:28 - so we can say that we're going to have
20:29 - an optional list containing integers
20:31 - this is equal to none and then we're
20:33 - going to return an optional int when we
20:35 - do this it means that if we don't have
20:37 - this int instead we're going to be
20:39 - returning the nun type which is a common
20:41 - convention in Python there you go those
20:43 - are typing annotations you obviously can
20:45 - get a lot more advanced with these but
20:47 - they're super useful and something I
20:48 - definitely recommend using especially if
20:50 - you're working on a larger project or
20:52 - something other people will be touching
20:54 - anyways that's going to wrap up this
20:56 - video I hope you found it helpful and I
20:58 - look forward to seeing you in another
21:00 - one
21:02 - [Music]