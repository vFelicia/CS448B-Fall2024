00:00 - hey guys and welcome back to the second
00:02 - video in my online Python game
00:04 - development series so in this tutorial
00:06 - we're going to be working on coding the
00:08 - server and that in the next video we're
00:10 - going to be connecting this client that
00:11 - we made in the last one to that server
00:14 - and then sending information to and from
00:16 - the server so let's get started and
00:18 - let's create a new file that is gonna be
00:20 - our server file so I'll just call this
00:23 - one server key Y and then in here we're
00:27 - just gonna have to import a few things
00:28 - and I'll talk about exactly what they're
00:30 - gonna do for us once we start using them
00:31 - so let's start by importing sockets our
00:35 - socket then we can import underscore
00:39 - thread and we'll also import OS okay so
00:46 - actually not OS sorry
00:47 - sys that's all we need for that so what
00:50 - we're gonna be doing like I've talked
00:51 - about is we're gonna be using sockets
00:53 - and threading to handle connections to
00:56 - our server and essentially what that
00:57 - means is we're gonna set up a socket and
00:59 - it's gonna allow for connections to come
01:01 - into our server on a certain port so
01:05 - we're going to start by just defining
01:06 - server which is gonna be a string and
01:09 - port which is gonna be a number now for
01:13 - ports you guys probably know what ports
01:17 - are you might have heard them before for
01:19 - example like a common port you would use
01:21 - on our common port that is used that you
01:24 - want your router would be port 80 and
01:26 - that is for HTTP connections there's
01:28 - also a port like 443 there's there's
01:31 - tons of other ports that have distinct
01:34 - uses but there's also a ton of ports
01:36 - that don't have any uses and that are
01:38 - just left open for programs like this or
01:40 - for different things to be used for so
01:42 - what port I'm gonna use which is
01:43 - typically open it depends on like what
01:46 - route are using and your internet
01:47 - connection but typically a port that's
01:49 - open is five five five five so we're
01:52 - gonna use this port to connect to and
01:54 - from and it's just a safe port to use as
01:55 - opposed to trying to use another number
01:57 - that we might not know if it's being
01:59 - used for something else or not okay so
02:01 - once we've done that we've created a
02:03 - server and create a port what we're
02:05 - gonna do is we're going to set up what's
02:06 - known as a socket okay and we'll talk
02:08 - about exactly how this works in a second
02:09 - but we're just gonna say s equals socket
02:13 - dot socket and then here we're gonna
02:15 - type something that's probably gonna
02:16 - mean nothing to you but I'll talk about
02:18 - what means so what's this socket equals
02:20 - AF underscore eye net okay and then
02:23 - socket dot sock stream like that all
02:26 - right now these are just the types of
02:28 - connection so since we're gonna be
02:30 - connecting to a I P V for address which
02:33 - again we're gonna keep talking about all
02:35 - this stuff as we go through in case you
02:36 - guys are unfamiliar with networks this
02:38 - is the type are gonna have to use and
02:40 - sock stream just I believe represents
02:42 - like how this server string comes in I
02:45 - could be wrong on that but this is the
02:47 - type we're gonna use and for any kind of
02:49 - applications like this this will be what
02:51 - you use for your socket okay so we're
02:53 - just initializing that and now the next
02:55 - thing to do is to bind our sir and our
02:57 - port to the socket so to do this we need
03:00 - to do a try and accept and the reason we
03:02 - do this is because like I talked about
03:04 - we don't know if this is actually gonna
03:05 - work initially doing it there could be
03:08 - in some instance this port is already
03:10 - being used for something and if that's
03:11 - happening that means that this is gonna
03:13 - fail so we need to try and accept this
03:15 - so it will accept what do you call it
03:18 - error as e so let me say socket Dodge
03:23 - air as E and we'll just print that out
03:26 - to the screen just so we know why we're
03:28 - not working there otherwise what we'll
03:30 - do is we'll say s stop bind and then in
03:32 - here we're gonna put server comma ports
03:36 - okay so will bind to whatever IP address
03:38 - we'll put in here to this gibbon port
03:41 - okay so I hope everything's making sense
03:43 - so far essentially what we're doing when
03:45 - we do sockets is we're setting up a
03:47 - connection or we're using a port on our
03:50 - server on our network it's gonna look
03:53 - for certain connections and then we'll
03:56 - be doing this on the client side as well
03:58 - will be binding or not enough of you
04:00 - binding will just be connecting to a
04:02 - certain server and a port and then since
04:04 - we're connecting to that this server
04:06 - script that we're gonna have running
04:08 - will see that connection and handle it
04:09 - in some way okay so now that we've done
04:11 - that I'm trying to think what else we
04:13 - have to do okay so what we're gonna
04:14 - start by doing is we're gonna start
04:15 - listening for connections so we're gonna
04:18 - do s dot listen now s don't listen
04:20 - essentially just opens up the port so
04:22 - now we can start connecting to it and
04:24 - having multiple clients connecting and
04:26 - not so in here this actually takes one
04:29 - argument now it's optional and if you
04:31 - leave it blank it means it'll allow for
04:34 - unlimited connections to happen now
04:37 - depending on what kind of program you're
04:38 - writing is what you're gonna do for this
04:40 - now for me I only want two people to be
04:43 - able to connect to my what do you call
04:46 - it yeah to my server so we're just gonna
04:48 - do s don't listen to now this might
04:50 - actually be one cuz it might be like
04:52 - zero one but I think - maybe the correct
04:54 - thing so let's don't listen for now and
04:56 - then what we're gonna do is we're gonna
04:57 - print after we've listened I will just
04:59 - say waiting for connection and we'll say
05:04 - server started or something like that
05:06 - because once we get to this point we are
05:09 - running the server and everything
05:11 - actually is working like we're listening
05:13 - for connection we're ready to go okay so
05:15 - the next thing we're going to do is
05:16 - we're going to define something known as
05:19 - a threaded function okay and we'll I'll
05:22 - talk about again what this means but
05:24 - let's just do threaded threaded
05:27 - underscore a client for now and I'm just
05:29 - putting you don't actually have to name
05:31 - it this you can name it whatever you
05:32 - want I'm just putting threaded here just
05:33 - so we know this is threaded and then
05:35 - it's gonna take one argument which is
05:36 - just gonna be Co at n which stands for
05:38 - caption and let's just pass in there for
05:39 - right now so the way that threading
05:42 - works actually let's let's do the
05:46 - threading and then I'll talk about how
05:47 - it works so I'll probably make a bit
05:48 - more sense so let's do a while true down
05:50 - here okay so once we set up our server
05:53 - our port we bind it doing here we're
05:56 - starting to listen waiting for
05:57 - connections starting the server then
05:59 - what we're gonna do is we'll be get put
06:01 - into this while loop and what this while
06:02 - loop will do is will continuously look
06:04 - for connections okay because right here
06:06 - we're just listening like once right to
06:08 - see if anything's on that server report
06:09 - but down here we want to continually try
06:12 - to grab connection that see if somebody
06:14 - connected and if it does then we want to
06:16 - print something to the screen or we want
06:18 - to send information or we want to start
06:19 - a new thread which we'll talk about in a
06:21 - second so in here what we're gonna do is
06:23 - gonna say connection which Co n N and
06:25 - then ad are equals and then S dot and
06:29 - then we'll say accept and what s not
06:31 - accept is going to do is it's going to
06:34 - well accept any incoming connections and
06:37 - then it's going to store the connection
06:38 - and the address
06:40 - the connection is by the way an object
06:41 - representing like what's connected the
06:43 - address is gonna be an IP address in
06:45 - these variables okay so if we get a
06:48 - connection what we'll do is we'll say
06:51 - print connected to okay and then ad R
06:57 - and this is just going to show us what
06:59 - IP address is actually connecting so we
07:01 - can have a look at that and then what
07:03 - we're gonna do is we're gonna do start
07:04 - underscore new underscore thread and
07:07 - then in here we're going to do what was
07:11 - that name of the function that we had
07:12 - was threaded clients okay
07:17 - and I believe we do comma and that in
07:20 - brackets here we do Co n like that okay
07:23 - so start new thread is there a reason
07:26 - that's not working give me a sec guys I
07:28 - want to see why oh that's why so up here
07:31 - instead of saying it import thread we're
07:33 - gonna say from underscore thread import
07:37 - star okay and not just gonna make it so
07:39 - we can just do this start a new thread
07:40 - thing and you know what I don't know if
07:42 - we're gonna need this sys but let's just
07:43 - leave it there for now
07:44 - okay so let's talk about what threading
07:46 - is gonna do so essentially the way that
07:49 - you guys are used to programs working
07:50 - I'm assuming unless you have some
07:53 - familiarity with threading is that say
07:55 - we're in this while loop right and we
07:56 - were to call the function threaded
07:58 - client well before we continue going
08:01 - with this while loop we would have to
08:03 - wait until this function was done
08:05 - running or in other words we return back
08:07 - from this function some value or for
08:09 - example like he does like x equals 5
08:11 - we'd have to wait for this x equals 5 to
08:14 - execute and then it would come back in
08:16 - this while loop and keep going
08:17 - now we don't want that to happen because
08:20 - we're gonna be having multiple
08:22 - connections going at once so what we
08:24 - want to do is we want to start at what's
08:26 - called a thread and a thread is just
08:28 - another process that's running in the
08:30 - background so that just means when we do
08:32 - start a new thread and we do threaded
08:33 - client it's gonna run this function but
08:36 - it's not gonna need this function to
08:39 - finish executing before it continues the
08:40 - while loop so this is gonna be running
08:42 - in the background as like processed to
08:45 - while process 1 is still running and
08:47 - still going so that means say we connect
08:50 - to a hundred different things we're
08:51 - gonna have 100
08:52 - different functions running so a hundred
08:54 - different threaded clients on the stock
08:56 - or like keep going and then what we're
08:58 - gonna have is this while loop it's still
09:00 - continuing to go what did I just do
09:02 - I'm still continuing to run to look for
09:04 - another possible connection you guys
09:06 - will see more how this works but
09:08 - essentially just means this will run in
09:10 - the background and we don't have to wait
09:12 - for it to finish executing before we can
09:14 - accept another connection that that's
09:16 - the basic kind of wait till that works
09:18 - so now let's start working with threaded
09:21 - client and then we will test the server
09:23 - out and see if it's working and then
09:25 - obviously the next video we're gonna
09:26 - connect to it and do all the connection
09:27 - stuff okay so in here threaded client so
09:31 - what should happen when we connect to a
09:35 - client well we're gonna have to do a
09:36 - while loop in here
09:37 - so I say wow true because we want this
09:41 - to continually run while our client is
09:43 - still connected okay now what we're also
09:46 - gonna do is we're just gonna say reply
09:48 - equal is blank like that I'm just
09:50 - copying from my other screen because
09:52 - this one is a bit finicky I don't mess
09:54 - it up we're gonna put a try in here and
09:56 - we're gonna say is we're going to try to
09:57 - receive some kind of data from our
10:00 - connection okay from whoever connected
10:03 - we want to receive some kind of data so
10:04 - what we'll do is we'll say I believe
10:06 - it's s con dot receive that might be
10:12 - right yeah I think that's right and then
10:13 - here we're gonna put the amount of bits
10:14 - okay now if you guys know anything about
10:17 - computing you know like how what bits
10:19 - represents but essentially this is the
10:21 - amount of information we're trying to
10:23 - receive now if you're getting an error
10:26 - when say you'd like do this and you
10:28 - connect up and you get some area that
10:30 - says what do you call it like object was
10:34 - true on store like uh you're getting any
10:36 - errors just increase this size okay and
10:39 - you can just do that by like putting
10:40 - this like times eight or something just
10:42 - note that the larger this size is and
10:45 - the longer it's going to take to receive
10:47 - information and that's obviously because
10:49 - the more information you're getting the
10:50 - longer it takes to send that over the
10:51 - server so 2048 bits is not a lot it
10:54 - doesn't take very long it happens almost
10:56 - instantly but if you bump this number up
10:58 - to a ton then it will take longer to do
11:01 - that okay so data I'm going to say reply
11:04 - equals
11:05 - and then when I say data dot I think
11:07 - it's actually stringed decode hmm let's
11:11 - see this
11:11 - Oh data decode because it'll be in that
11:14 - that kind of object that dad decode and
11:16 - then here we're gonna do UTF comma eight
11:19 - now the reason we have to do this is
11:22 - because whenever we're sending
11:23 - information over a like client-server
11:25 - system we have to encode the information
11:27 - and you'll see that in the next step
11:29 - that we're gonna encode information
11:30 - before we send it back to the client but
11:33 - that means that we're receiving encoded
11:35 - information so to actually be able to
11:37 - read it like a human readable string we
11:39 - need to decode it first
11:41 - so it's really easy to do that we just
11:42 - do decode and we're just giving the
11:43 - format which is utf-8
11:45 - okay so reply equals that and then we're
11:47 - going to say it's going to say if not
11:49 - data we're going to print disconnected
11:54 - okay and then we're gonna break and this
11:57 - just means if we try to get some
11:59 - information from the what decodes the
12:03 - client but we're not getting anything
12:04 - we're gonna disconnect and we're gonna
12:06 - break and that likely means that we've
12:08 - well disconnected from the client or the
12:10 - clients left or something like that so
12:12 - instead of continuing to run this while
12:14 - we've been trying to get information
12:15 - from a client that's disconnected we're
12:17 - gonna break this is just kind of a
12:18 - fail-safe to make sure you don't get
12:20 - into any infinite loops and it's also
12:22 - gonna show us if we're running into any
12:24 - issues with like receiving the data and
12:26 - decoding it which we'll talk about later
12:28 - okay so otherwise so if we are getting
12:30 - information all we're gonna do is we're
12:33 - going to print received is that how you
12:37 - spell received maybe and then we're
12:39 - gonna put what do you call it rip fly
12:42 - okay I didn't mean to do that let me see
12:45 - if I'm spelling this right I'm knowing
12:47 - to get received reply so this just means
12:48 - we received from the client this reply
12:51 - let's printer to the screen and see what
12:52 - it looks like and then we're gonna print
12:55 - sending : and will this print reply okay
13:00 - and then we'll talk about this again in
13:02 - a second why does this keep happening
13:03 - okay brookline next now after this if
13:08 - not data break out what we'll do down
13:10 - here is gonna say con dot send all and
13:13 - we're going to send STR dot Inc
13:18 - would reply now again remember that
13:21 - since we're sending information over the
13:23 - server we have to encode our information
13:24 - so all this is gonna do is just encode
13:26 - our string reply into a bytes object so
13:30 - that means when we read it in from the
13:31 - client side again we'll have to decode
13:33 - that information it's kind of annoying
13:35 - but I mean it's a bit security thing
13:37 - right so now we're just going to accept
13:38 - I guess what it what kind of error would
13:42 - it even be I don't even know if there's
13:43 - gonna be any errors if we run into
13:44 - anything let's just break just to make
13:46 - sure that we're not you know getting in
13:47 - that infinite loop or we're not gonna
13:49 - ruin the program by doing that okay so
13:52 - this is actually about it for our server
13:55 - let's see how much time we're out 13
13:56 - minutes okay so now what we need to do
13:58 - is figure out what this server number is
14:00 - and then we can actually test it and see
14:01 - if this is working so what we're gonna
14:04 - do now is we're gonna find the server
14:06 - number now to do this we're gonna be
14:08 - doing this over localhost okay that
14:10 - means that we're only gonna be able to
14:12 - connect over our local network meaning
14:15 - that like anything on our Wi-Fi network
14:18 - that can see each other that'll work
14:20 - fine but as soon as we go outside that
14:22 - network it won't work so we're gonna be
14:24 - using what's known as local IP addresses
14:26 - so to find the local IP address of the
14:28 - machine you're currently on you're gonna
14:29 - go to command prompt in the bottom left
14:32 - and then you're just gonna type IP
14:34 - config okay now some of you guys are
14:38 - probably freaking out because you can
14:39 - see my IP address right now
14:40 - this is a local IP address and that
14:42 - means that it is locally assigned to my
14:46 - network no one outside of my network can
14:48 - see this IP address or companion or
14:50 - candy to us it or anything like that
14:51 - okay so it's perfectly fine if you guys
14:53 - see this address or if other people know
14:54 - what this local address is okay just as
14:56 - a note so we're gonna do is we're gonna
14:59 - take this ipv4 address so I'll just copy
15:01 - that and we're gonna paste that inside
15:04 - of the string here okay so 10 to 11 dot
15:06 - 250 207 is mine now yours likely is like
15:13 - 192.168.1 like a massive network usually
15:15 - they use 10.10 like as the default
15:17 - gateway which is what they're using
15:19 - so my IP address star to the 10 yours
15:21 - likely starts with 192.168.1 or dot like
15:25 - 5 or something like that and then the
15:27 - rest of it okay so that's the address
15:29 - we're going to use and this is going to
15:31 - be our server
15:32 - address so whatever machine that you're
15:34 - gonna be running this server script on
15:35 - that's the address you want so say you
15:37 - want to run this server on your laptop
15:39 - and you want to run clients on like your
15:41 - PC and your Mac or something like that
15:44 - then you want to make sure you get the
15:46 - IP address from your laptop and you're
15:48 - putting it in that script okay and we'll
15:49 - talk about more of this in the next
15:51 - video when we actually connect to it
15:52 - okay so now that we've done this I
15:54 - probably made a mistake but let's
15:56 - actually just create a configuration
15:57 - quickly for server and run this and just
16:00 - see if we're getting any errors as of
16:02 - now now it is worth noting that we're
16:04 - not gonna be able to connect anything
16:05 - yet so there's not really gonna be much
16:08 - we can see or really do but for now
16:11 - let's just test this out so let's have
16:13 - server let's run this and you can sees
16:15 - waiting for a connection server started
16:17 - so that's actually good if you're
16:19 - getting this string of text everything
16:21 - is currently working in the next video
16:24 - we'll probably have to debug a little
16:25 - bit once we start connecting to this but
16:27 - for now that is the main server script
16:29 - now I'll briefly just talk about before
16:31 - I end this video how it's gonna work in
16:33 - terms of running the server script and
16:34 - running the client script the server
16:37 - script always has to be running okay so
16:39 - whatever you're trying to connect you
16:40 - have to have first run the server script
16:42 - and then you can run multiple client
16:44 - scripts from wherever on the network you
16:46 - want now the server script has to be
16:49 - running on the machine that the IP
16:50 - address is like this little string here
16:52 - okay it has to be running on that
16:54 - machine and you can run a client script
16:57 - on the same machine that the server
16:59 - scripts running and you can run multiple
17:01 - client scripts on the same machine so
17:03 - like for example what I'm gonna do to
17:04 - test this in the next video is I'm gonna
17:06 - run the server and then I'm gonna run to
17:08 - clients on this machine and we'll see
17:11 - that it like is moving back and forth
17:12 - for them so anyways that's minute for
17:14 - this video as always the code is up on
17:16 - tech with Tim dotnet in case you guys
17:17 - missed any of this are you running into
17:19 - any issues and with that being said I
17:20 - will see you guys in the next video
17:22 - [Music]