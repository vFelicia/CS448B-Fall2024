00:01 - hello everybody and welcome back so in
00:03 - this video we're gonna be talking about
00:05 - threading so it's actually the
00:06 - introduction to this reading in Python
00:09 - tutorial series in this video I will
00:11 - warn you we're not actually gonna be
00:12 - doing any coding we're just gonna be
00:13 - talking about the theory so what is a
00:15 - thread how do we run threads what's the
00:18 - difference between threads and processes
00:19 - and really understanding why we even
00:21 - need to use these things so I'm just
00:23 - gonna warn you if you don't understand
00:25 - that please don't skip forward to the
00:26 - next video because there's no point in
00:28 - learning threading unless you understand
00:30 - what the heck it actually is so I'm
00:32 - gonna hop onto the whiteboard now and
00:33 - we'll get started and talk about what is
00:35 - a thread what is threading and why do we
00:37 - use it okay so what I'm drawn on the
00:39 - screen right now is kind of a classic
00:41 - processor in 2020 we have 4 cores which
00:44 - are all these red boxes here that I'm
00:46 - kind of drawing on and then the actual
00:48 - black box that's a note it by CPU is the
00:50 - entire central processing unit so back
00:53 - in the old days we used to have
00:55 - processors that just had one processing
00:57 - core now we have processors with 4 cores
01:00 - 8 cores 2 cores 16 cores 32 cores and it
01:04 - goes pretty crazy right so computing has
01:06 - expanded a ton now the reason I'm
01:08 - starting with this is because we
01:09 - actually need to understand how our
01:11 - processor works to understand what a
01:14 - thread is and why we have you know
01:16 - thousands of them and why we create them
01:18 - in our programs so the idea here is that
01:21 - the amount of cores you have on your
01:23 - processor is the amount of things that
01:26 - can happen at the exact same time yes
01:28 - that's what I mean if we're talking
01:30 - about actual time you know like theory
01:32 - of relativity whatever you want to put
01:34 - it out if we have four cores that means
01:37 - at any point in time we can do at most
01:40 - four operations at the exact same time
01:42 - and these operations are really
01:45 - low-level computational operations there
01:47 - so you know millions of them happening a
01:49 - second but in these tiny nano seconds
01:51 - that it takes to do an operation we can
01:53 - only do four of them at the same time
01:54 - because we have four cores and this is
01:57 - called parallelism if we have multiple
02:00 - things happening at the exact same time
02:02 - then that is a parallel operation right
02:05 - we can think about like if we have four
02:07 - roads and we have four cars driving on
02:11 - these roads right moving
02:12 - at the same time they're driving
02:14 - parallel to each other at the same time
02:15 - whereas if I have you know a bunch of
02:18 - cars beside each other on the same road
02:20 - or a bunch of cars behind each other
02:22 - they can only go as fast as the car in
02:24 - front of them right or they need to wait
02:25 - for the car in front of them to get off
02:26 - the road before they can start driving
02:28 - on it right and that's kind of the idea
02:30 - so we'll use some examples like this to
02:31 - make things more clear but just
02:33 - understand that the amount of cores in
02:35 - your processor really matters right and
02:37 - when we think about clock speed so if we
02:39 - have something like 2.6 gigahertz is the
02:42 - clock speed of your processor what that
02:44 - means is each one of your cores can run
02:47 - at 2.6 gigahertz so each one of those
02:49 - cores is able to do 2.6 I think it's
02:52 - like million operations per second or
02:55 - you know something along those lines I
02:57 - don't know what the conversion rate is
02:58 - and that means you can do 2.6 times 4
03:02 - operations per second because each one
03:05 - of these cores is running at that clock
03:07 - speed and the clock speed is essentially
03:09 - kind of an electron or a wire going on
03:12 - and off on and off on and off and that
03:14 - allows your computer to do operations so
03:17 - that's kind of the background here we
03:18 - have central processing units those
03:21 - central processing units are made up of
03:22 - course the amount of cores you have
03:24 - denotes the amount of parallel
03:26 - operations that can happen at the same
03:28 - time now obviously we know that we're
03:31 - doing more than four operations right
03:32 - you know like in our computer we're
03:34 - gonna do more than four operations so
03:35 - how do we do all these operations and
03:37 - how do we schedule when they happen well
03:39 - that's where we talk about threads and
03:41 - we talk about multi processing so a
03:43 - thread is essentially one program or one
03:47 - set of operations that needs to happen
03:50 - so every thread is going to be assigned
03:53 - to one core so all of these cores that
03:56 - we have here will have a bunch of
03:58 - different threads that they're going to
03:59 - be executing and switching between which
04:02 - ones they perform operations on so if we
04:04 - say that like this line actually I'm
04:06 - gonna draw in another color so that it's
04:07 - a little bit better let's say this blue
04:09 - line is a thread and this other blue
04:12 - line is a thread and our processor are a
04:14 - processor core can only do one thing at
04:16 - a time and it has both these threads
04:18 - that it's assigned to what that means is
04:21 - that it needs to find a way where it can
04:23 - do some operations on this thread and
04:25 - can switch right and do some operations
04:27 - on this thread and this is what
04:29 - threading is it's essentially how do we
04:32 - determine when to run different things
04:34 - on the same CPU core yes we can have
04:37 - threads running on different cores
04:39 - obviously you know this core itself is
04:41 - gonna happen its own threads that are
04:43 - running on it this core will have its
04:45 - own threads but threading does not
04:48 - involve running on multiple cores all it
04:51 - involves is creating some program or
04:53 - some operations some function something
04:56 - that's going to be executing in a
04:58 - different sequence than another thing so
05:00 - if we have two threads you know then we
05:02 - can draw these two lines here let's say
05:04 - okay we have these two different things
05:05 - they both need to happen now we tell our
05:08 - CPU you know figure out which one we're
05:11 - gonna do and what's happening on our
05:12 - computer and we can actually look at the
05:14 - amount of threads and I'll do that I'm
05:16 - here to show you guys if we go to task
05:18 - manager and we go to performance we
05:20 - should see that we have 1854 threads
05:24 - running and you can see that the bottom
05:25 - and 173 different processes so what that
05:29 - means is that between the four cores on
05:31 - my computer you can see it's running a
05:32 - little bit under 4.2 gigahertz we can
05:35 - run at most four threads at once because
05:38 - we have four cores and all those other
05:40 - threads are just being switched between
05:41 - on the CPU cores so all these different
05:44 - operations are happening you know
05:45 - milliseconds after each other and this
05:47 - is the idea behind threading is that
05:49 - we're not necessarily doing things in
05:51 - parallel at the same time we're just
05:53 - changing the order in which we do
05:55 - specific operations so why would we even
05:57 - want to do that what's the point of
05:59 - making multiple threads if we can't do
06:01 - things at the same time well sometimes a
06:03 - thread does what's called hanging or it
06:06 - stops or he doesn't need to actually be
06:08 - executing at the current time so our
06:11 - processor core can kind of turn around
06:13 - and execute another thread well this one
06:15 - say is waiting right so while one
06:18 - threads waiting for something to happen
06:19 - maybe the user to press a key maybe for
06:22 - you know some network thing to send a
06:23 - file we don't need to be just stuck
06:26 - waiting for this thread our processor
06:28 - core can kind of chain gears it can
06:29 - shift to the left and it can execute
06:31 - another thread while that one's waiting
06:33 - so this is the point with threading and
06:35 - this is called concurrent programming
06:37 - not when we're doing
06:39 - things in parallel at the exact same
06:40 - time but when we're doing things in
06:42 - different timing sequences so we can
06:44 - have multiple threads running at the
06:46 - same time and our one CPU core that
06:49 - we're running this these threads on is
06:50 - switching between these threads in its
06:52 - execution chain right so I'm gonna erase
06:55 - this and we're gonna go down to a one
06:56 - core model now because this is kind of
06:58 - showing you how the entire CPU works as
07:00 - a whole right there's all these threads
07:02 - they get distributed between the cores
07:04 - and then they run on those cores these
07:06 - cores can only do one thing at a time
07:08 - there's four of them that means we can
07:09 - do four things at a time in total so
07:11 - these cores will switch what they're
07:13 - gonna be doing based on the threads that
07:14 - they have so let's do a one core model
07:17 - now so I'm gonna just draw one CPU core
07:20 - now and show you kind of the difference
07:21 - between what happens if we run something
07:23 - in one thread versus running it and say
07:25 - two or three and why we would even do
07:26 - that so let's say we just have a basic
07:28 - Python application and we want to print
07:30 - one we want to time dot sleep say 10
07:35 - seconds right so we'll just put 10
07:37 - seconds this is just pseudocode don't
07:38 - really worry about the syntax too much
07:40 - and then we want to print the value too
07:42 - now if we were running this in one
07:44 - thread so let's draw our CPU let's make
07:47 - this like orange red box this will be
07:49 - our our core so let's write this is a
07:51 - core and we put our 1 thread so we'll
07:54 - say this like here well let's just put
07:56 - you know maybe a label for this we'll
07:57 - say that's like t1 so thread 1 and this
08:00 - will be thread 1 so for us to run this
08:03 - program and to see the output of one and
08:05 - see the output of 2 this is gonna take
08:07 - us a little bit over 10 seconds right
08:09 - because we need to print 1 then we need
08:11 - to wait for 10 seconds and then we need
08:13 - to print 2 so we can imagine it's not
08:15 - gonna take much longer than 10 seconds
08:17 - but a tiny bit more it's gonna take
08:19 - longer than that right so for us to get
08:20 - that output takes 10 seconds now if I
08:23 - distribute this into 2 threads where
08:27 - what I do is in thread 1 I leave what I
08:30 - have there but in thread to so in t2
08:33 - like this and we'll do a little bit
08:34 - better here well print the value of 2 if
08:39 - I do this and now I throw my t2 over
08:42 - here going in my core so both these
08:44 - threads are running on this same core
08:46 - which means again only one thing can
08:48 - happen at a time what we can do now is
08:51 - say ok
08:52 - so we'll print one cuz we're gonna start
08:55 - that thread one in our program but then
08:58 - when we hit this sleep so let's just say
09:00 - one's out put it here we don't actually
09:02 - need to wait for this entire sleep to
09:05 - happen what we can do is we can say okay
09:08 - so since this thread isn't doing
09:10 - anything right now the core doesn't have
09:12 - any operations to perform we're not
09:13 - adding we're not subtracting we're just
09:15 - merely waiting I don't need to just
09:17 - stall and hang on this thread in fact
09:19 - what I can do is almost think of it like
09:22 - rotate the core over or you know pass
09:24 - another thread to the core we can go
09:26 - over to thread two and just print the
09:29 - value two immediately because the thing
09:31 - is if thread one is sleeping we don't
09:33 - need to wait for it we can just go to
09:35 - another thread do something there and
09:38 - then once this thread finishes executing
09:40 - or finishes sleeping or waiting we can
09:42 - go back to it and we can execute the
09:44 - rest say so we had like print three
09:47 - under here the output from our program
09:49 - with these two threads would be one we
09:51 - would sleep so we would go to thread two
09:53 - we finish thread two we'd go back to
09:55 - thread one we'd wait for it to finish
09:57 - sleeping and then we'd output the value
09:58 - three and this is the idea right and
10:00 - threads are really useful in web
10:02 - applications or when you're doing like
10:04 - online games and stuff because you don't
10:07 - want to pause the entire screen while
10:09 - you wait to receive like a few megabytes
10:11 - of data from the server in fact what you
10:13 - want to do is have all of the things
10:16 - that are like server related commands
10:18 - running in a thread so that while you're
10:20 - waiting for the server to return a
10:22 - response to you your whole game doesn't
10:24 - just freeze you can have these threads
10:26 - so that it is going in between these two
10:29 - different threads so you know one thread
10:31 - is handling getting the messages and
10:32 - stuff from the server and the other
10:34 - thread is handling actually displaying
10:36 - the graphics to you as a user so you're
10:38 - playing a video game right so then as
10:40 - soon as the thread from the servers are
10:41 - ready to receive and ready to start
10:43 - working okay it'll switch to that it'll
10:45 - get the information and then you can
10:46 - translate that to the graphics thread
10:48 - which will start out what do you call it
10:51 - displaying to the screen or like
10:53 - updating the screen right so that's the
10:54 - idea with these threads now a lot of
10:57 - applications are multi processed which
10:59 - means a little bit more complicated to
11:00 - do they have their threads running on
11:02 - different CPU cores at the same time but
11:05 - we're not gonna get into that for this
11:07 - tutorial because that's a little bit
11:07 - more complicated advanced just
11:09 - understand that if we're waiting for
11:11 - something to happen in one thread we
11:13 - will switch to the other thread or the
11:14 - other threads because there may be many
11:16 - execute those as much as we can and then
11:19 - go back to the original thread when it
11:22 - stops waiting so that's the idea that's
11:25 - my explanation of threads and processes
11:26 - and I hope with that you guys have a
11:28 - good understanding and are ready to move
11:30 - on to programming and getting into
11:31 - threads and python in the next video