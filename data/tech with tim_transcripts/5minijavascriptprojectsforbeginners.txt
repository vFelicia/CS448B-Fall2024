00:00 - today I'll be walking you through five
00:02 - mini JavaScript projects for beginners
00:05 - each of these projects will take us
00:06 - about 15 to 20 minutes to complete
00:09 - they're practical you'll have a real
00:11 - visual working application and it'll
00:14 - show you how to integrate JavaScript
00:15 - with a little bit of HTML and CSS now
00:18 - these projects are designed for
00:19 - beginners however it will be a good idea
00:21 - to have a little bit of experience with
00:23 - JavaScript you don't need to be great
00:25 - but if you know basic syntax like
00:27 - variables for Loops if statements that's
00:30 - going to make it a little bit smoother
00:31 - also having a bit of knowledge of HTML
00:33 - and CSS will be helpful but if you don't
00:36 - no worries I will kind of teach you what
00:37 - those features are as we go through the
00:39 - videos now these projects are in order
00:42 - of difficulty so the first one's going
00:43 - to be the easiest one it's where I'll go
00:45 - the slowest and then as we progress
00:47 - through the videos it'll get a little
00:48 - bit faster and we'll work through some
00:50 - more complex projects these are super
00:53 - fun a great way to practice your skills
00:55 - and I guarantee you you're going to
00:56 - learn something new and have some unique
00:58 - projects that you can show show off
01:00 - after this video with that said let's
01:02 - get to it after this quick break now I
01:04 - don't know about you guys but personally
01:06 - I use my phone a lot I'm always sending
01:08 - emails slack Discord messages Etc and
01:11 - I'm just in constant communication all
01:13 - day now recently I started using type AI
01:16 - which is a keyboard extension that lets
01:17 - you use chat gbt directly from your
01:20 - keyboard which means you no longer need
01:21 - to copy and paste across various apps
01:24 - now it's been super helpful and I'm
01:25 - thankful they sponsored this video so I
01:27 - can share some more of their features
01:29 - with you with AI of course you have
01:30 - features like spell check and grammar
01:33 - but you also get AI autocomplete wording
01:35 - recommendations and my personal favorite
01:37 - the tone changer now this is a
01:39 - downloadable app that's compatible with
01:41 - iOS devices and it's helped me
01:43 - professionally respond to emails and
01:45 - change my tone based on the context
01:47 - while being super easy to use what's
01:49 - even crazier is I can just use type AI
01:51 - to automatically generate responses for
01:53 - me or ask it exactly what I should say
01:56 - now all of this is done directly on your
01:58 - keyboard which means you can do it from
01:59 - from anywhere with zero friction and
02:01 - there's no more copying and pasting to
02:03 - start using this on your keyboard simply
02:05 - click the link in the description to get
02:07 - a free trial of type aai premium version
02:10 - this is a great tool for any of you that
02:11 - type a lot on your phone so what I'll do
02:14 - now is quickly demo each of the Finish
02:16 - projects if you want to fast forward to
02:18 - one of them there will be timestamps in
02:19 - the video player as well as in the
02:21 - description this is the order in which
02:23 - we'll complete them I recommend if
02:24 - you're a complete beginner then just go
02:26 - in this order as I'll build upon each
02:28 - project in the next one okay first
02:31 - project color flipper allows us to
02:33 - Simply switch between some different
02:34 - colors for the background of the screen
02:36 - and if I click on random we will
02:38 - randomly generate a color pretty
02:40 - straightforward but it's allowing us to
02:41 - see how we connect events to button
02:44 - presses and how we can randomly generate
02:46 - colors and set Dom properties next is a
02:49 - palindrome Checker a palindrome is
02:51 - something that's spelled the same
02:52 - forwards as backwards this actually a
02:55 - very famous algorithm style problem and
02:57 - something you might get asked in a very
02:59 - early stage interview so a palindrome
03:01 - example is something like Dad because
03:03 - this is spelled the same forward as
03:05 - backwards so if we type check it says it
03:07 - is a paland drum if we do something like
03:10 - Madame right that's a palindrome because
03:13 - it's same forward backwards if we do dog
03:16 - this is not a paland drum so just a
03:17 - simple check showing you how we can
03:19 - check for a paland drum next is a random
03:22 - quote generator so what this will do is
03:24 - randomly give us a quote on the screen
03:26 - there's lots of modifications you can
03:28 - make to this but you'll notice that what
03:29 - I've done is made it so that we're going
03:31 - to go through all of the different
03:32 - quotes that exist before we start
03:34 - cycling back to one of the same ones
03:36 - this means you're never going to see the
03:38 - same quote once or twice in a row and
03:40 - you're going to get through all of the
03:41 - unique quotes before you end up seeing a
03:44 - repetitive one kind of an interesting
03:46 - feature that makes this a little bit
03:47 - more complicated and an interesting
03:49 - project next we have a timer or a
03:51 - stopwatch this is going to teach you
03:53 - about set intervals and how to handle
03:55 - timed events in JavaScript and with HTML
03:58 - so we can of course start the stopwatch
04:00 - here you'll see it goes up we can stop
04:03 - it we can reset it we can start it again
04:06 - and this also teaches you how to handle
04:08 - some different edge cases for example
04:09 - what happens if I press start when it's
04:11 - already started well in this case we
04:12 - restart it from the beginning what
04:14 - happens if I press stop a bunch of times
04:16 - well stay stop what if I keep resetting
04:18 - it right it works and lastly we have a
04:21 - persistent to-do list now this is
04:23 - interesting because this will actually
04:24 - allow us to store items in between
04:26 - browser refreshes just to quickly
04:28 - demonstrate this to you you'll notice
04:30 - that if I start the stopwatch here but
04:32 - then I refresh the page it's going to go
04:33 - back to the original state same with the
04:36 - random quote gener rightor right if I
04:37 - refresh just goes back to the original
04:39 - state now watch what happens with this
04:41 - one so I'm going to go add item here for
04:44 - hello world and when I refresh notice
04:46 - it's still here so we can do I don't
04:49 - know item two add this in here refresh
04:52 - still here if I delete one of the items
04:54 - and refresh it stays here so I'm going
04:56 - to show you how we can do some
04:57 - persistent storage using local storage
04:59 - storage in the browser which is quite
05:01 - interesting so again feel free to fast
05:03 - forward to any of these projects now
05:04 - we're quickly going to go through the
05:05 - setup which won't take us very long and
05:07 - then we'll actually get into coding
05:09 - these out all right so I've popped over
05:11 - to visual studio code now this is the
05:13 - editor I recommend that you use for
05:15 - working on these different projects you
05:17 - can use anything you want what we need
05:19 - to do here is get in an environment
05:21 - where we're able to write both
05:22 - JavaScript and HTML code and that's
05:24 - going to be easiest in Visual Studio
05:26 - code now what we'll do is we'll start by
05:28 - creating a folder so you'll notice I've
05:30 - already made one but if I delete it we
05:31 - can just remake it here so let's go new
05:34 - folder and I'm just going to call this
05:36 - one because this is where we're going to
05:37 - put project number one inside of here
05:39 - we're going to make two files the first
05:41 - file is going to be our main. HTML file
05:44 - and the second one here is going to be
05:45 - our
05:46 - index.js now this will be the structure
05:48 - for all of our different projects so if
05:50 - you're going to do all five of them you
05:51 - can just copy this directory and have
05:53 - one 2 3 4 5 as the various different
05:55 - names once we've got these two files I'm
05:58 - just going to show you a really useful
05:59 - extension in vs code if you're using
06:01 - this editor that I recommend you install
06:03 - now this is called the live server if
06:06 - you go here to the side in the
06:08 - extensions menu which is this that I've
06:10 - clicked on here kind of looks like
06:11 - little puzzle pieces or a square with
06:13 - one of them removed you'll see live
06:15 - server pops up here as the top result
06:17 - it's got a bunch of downloads and I've
06:19 - already got it installed what you'll do
06:21 - here is just click on install it might
06:22 - make you relaunch vs code and I'm going
06:24 - to show you how we utilize this so that
06:26 - we don't have to keep refreshing the
06:28 - page whenever we make a change to our
06:30 - code that's pretty much all you need
06:32 - once you've got that you're good to go
06:35 - and we're going to start working in our
06:36 - two different files so at this point
06:37 - we're going to begin project number one
06:39 - make sure you install that live server
06:41 - extension if you don't already have one
06:43 - okay so we're going to go into our main.
06:45 - HTML file and we're going to start by
06:47 - creating kind of the template or the
06:50 - user interface for our application now
06:52 - in case you're unfamiliar HTML is
06:54 - hypertext markup language and this is
06:56 - something that allows us to actually
06:58 - create elements that exist on a web page
07:01 - what's better though is that allows us
07:02 - to actually interact with JavaScript or
07:05 - vice versa JavaScript can interact with
07:07 - the HTML which means if we say type
07:09 - something into an input box or we click
07:11 - on a button JavaScript can handle that
07:13 - action for us and allow us to display
07:16 - different things on the screen or kind
07:17 - of determine what's going on it gives us
07:19 - that Dynamic Behavior so to begin our
07:21 - HTML document there's a little shortcut
07:23 - you can use here in vs code which is
07:25 - HTML colon 5 now when you type that
07:28 - you'll see this autocomplete shows you
07:30 - HTML colon 5 and if you click on it it's
07:32 - going to give you this whole template
07:34 - document now for some reason that's not
07:36 - working no worries what you can do is go
07:39 - ahead and pause the video and you can
07:40 - start typing this out what we need is
07:43 - the following we need this tag up here
07:45 - let me zoom in a little bit so it's
07:46 - easier to read that says dock type HTML
07:50 - and make sure you type it exactly like
07:51 - you see it so you have the exclamation
07:53 - point dock type you have your angle
07:55 - brackets here and then you have HTML we
07:57 - specify the language at at the top of
07:59 - the page it's not necessary but it's
08:01 - good practice to get into so we do again
08:03 - our angle bracket HTML language is equal
08:06 - to standing for English and then we
08:09 - specify our head tag now the head tag is
08:12 - where we put some metadata related to
08:13 - the application if you're copying this
08:16 - out yourself you don't need these two
08:17 - tags here you can just leave it like
08:19 - this so put head and you'll notice that
08:21 - we have an enclosing tag here that has
08:24 - this slash so whenever we're working in
08:26 - HTML you'll have an opening tag and then
08:29 - you'll have a closing tag and that'll
08:31 - denote kind of a section where we can
08:33 - put some different content so in this
08:35 - case we put a title tag so we have our
08:37 - title opening tag and our title closing
08:39 - tag and this is the title of our web
08:41 - page which will appear kind of like this
08:43 - in the little heading or the kind of
08:46 - browser tab so in this case for project
08:48 - number one this is the color flipper so
08:51 - we're going to name the title color
08:53 - flipper we're then going to have our
08:55 - body tag now it's important that the
08:56 - body tag comes after the head tag as I
08:59 - said said inside of this head tag here
09:00 - you have metadata related to the
09:02 - application inside of the body tag is
09:04 - where you're going to put the content
09:06 - that will live on the page now notice
09:08 - that all of this is happening inside of
09:10 - these HTML tags so we have an HTML
09:13 - opening tag and an HTML closing tag
09:17 - inside we have the head tag and below
09:19 - that we have the body tag if we add some
09:21 - indentation it kind of looks like this
09:23 - okay so just make sure you have this
09:24 - setup here I know I'm spending a bit of
09:26 - time on this but I just want to make
09:27 - sure none of you get kind of let as
09:29 - stray right at the beginning so it
09:30 - should look exactly how I have it here
09:33 - the white spaces don't matter you just
09:34 - want to make sure it looks just like
09:36 - this okay now we've got this it's time
09:39 - to start creating the basic user
09:41 - interface for our application now to do
09:44 - that we're going to write a few tags
09:45 - here which will represent physical
09:47 - elements that will exist inside of our
09:49 - HTML document so what we'll do just to
09:52 - start and just a test things out is
09:54 - we'll create an H3 tag now for all these
09:56 - tags with the exception of ones like the
09:58 - do type tag which we don't need to talk
10:00 - about right now you always have your
10:02 - opening tag and your closing tag and the
10:04 - closing tag always has a forward slash
10:07 - denoting the end of a section or of an
10:09 - element okay so like the body tag has
10:11 - its closing body tag the H3 tag has its
10:13 - closing H3 tag inside of here we're
10:16 - going to say color flipper okay now when
10:19 - I save that we're going to get a bit of
10:20 - formatting don't worry too much about
10:21 - that what I want to do now is show you
10:23 - how we actually open this page up so we
10:25 - can see where our code's actually
10:26 - running and what it is that we built so
10:29 - we have two options here the first
10:30 - option is we can simply just doubleclick
10:33 - and open our HTML file so what you'll
10:35 - need to do depending on your operating
10:37 - system is you need to find the folder
10:39 - this exists in now in vs code you can
10:41 - simply right click on the file and you
10:43 - can click reveal in finder or show and
10:45 - Explorer so if you're on uh Windows it
10:48 - should be something that says like show
10:49 - and Explorer or show location and if you
10:51 - click that it's going to bring up a file
10:53 - kind of search menu for you here and
10:55 - show you where the file exists so in
10:57 - this case if we just double click it
10:58 - you'll see see that it will show up and
11:00 - if I want I can zoom in here by hitting
11:01 - control+ or just by zooming in Google
11:03 - Chrome and you'll see that we've got our
11:05 - head uh tag appearing and we have the
11:08 - title Oops Color flipper kind of showing
11:10 - up here okay so I'll exit out of that
11:13 - for now but that's the first way to open
11:14 - up your code the second way is to use
11:16 - this live server extension once you've
11:19 - installed live server you should see
11:20 - this go live button down here so we're
11:22 - going to go ahead and click on it and
11:24 - what that will actually do is create a
11:26 - little server for us that's going to run
11:28 - this HTML file and now anytime I make
11:30 - any changes so let me just put this on
11:32 - the side of my screen and go like color
11:34 - flipper one as long as I save this main.
11:37 - HTML file here very important that you
11:38 - save it you'll see that it will just
11:40 - automatically adjust so you can see up
11:42 - here we're getting color flipper one in
11:44 - our title okay so that way we don't have
11:46 - to constantly keep refreshing the page
11:49 - uh if you don't have live server you
11:50 - will need to refresh the page for the
11:52 - updates to appear okay so from this
11:54 - point forward we can kind of move our
11:56 - screen over a bit so that we can see
11:58 - what we're doing on the right hand side
12:00 - and on the left hand side we have our
12:02 - code okay so we have color flipper and
12:04 - then we have our H3 tag here of color
12:06 - flipper now again just a reminder if
12:08 - you're not seeing any updates here just
12:09 - make sure you save the file you can do
12:11 - that by hitting contrl s or by going to
12:13 - file and then hitting save at the top of
12:15 - the screen so we're going to now work
12:17 - inside of our body tag that's where most
12:19 - of our work's going to be because that's
12:21 - where we're actually creating the
12:22 - different elements that appear on the
12:24 - screen for now what I want to do is
12:25 - create a few different buttons that are
12:27 - going to sit here and allow us uh to
12:29 - click on them essentially to change the
12:31 - background color of the screen so to
12:33 - make a button you simply type button
12:35 - like this and then again you're going to
12:36 - have your closing tag so you have an
12:38 - opening tag and you have a closing tag
12:40 - then what you'll do inside of the button
12:41 - is you'll give a kind of name to the
12:43 - button or what you want the text to show
12:45 - as so to start I'll start with green now
12:48 - when I save that you'll see that this
12:50 - green button appears I'll show you how
12:51 - to change the color in a second but for
12:53 - now we just have the green button so now
12:56 - we're going to copy this and we're going
12:57 - to have a button which is going to be
12:59 - the red button and we're going to have
13:01 - another button which is going to be the
13:04 - blue button okay we're then going to add
13:07 - one more button so we'll copy this down
13:09 - here and we'll call this the random
13:12 - button now I'll just make this a little
13:14 - bit smaller and you'll see that now it
13:15 - will fit all on the screen I just have
13:17 - this zoomed in a lot for you guys it'll
13:18 - probably be quite a bit smaller I'm just
13:19 - zooming it in so you can read it a bit
13:21 - easier okay so now for all of our
13:23 - buttons what we're going to want to do
13:25 - is actually change their background
13:26 - color right so rather than like the
13:28 - green button being gray we want it to be
13:29 - green so there's a few ways to do this
13:31 - but the best way is to create some CSS
13:34 - or a kind of styling for this button so
13:37 - to do that we're going to go up in the
13:39 - head tag now so outside of the body make
13:41 - sure we're in the head and we're going
13:42 - to write a set of style tags now the
13:45 - style tags is where we can specify
13:47 - styling properties for different
13:49 - elements in our HTML now before we're
13:52 - able to actually kind of apply a style
13:55 - to these different buttons we need to
13:56 - give them something to identify them
13:58 - with with now we can give them a class
14:00 - we can give them an ID there's these
14:02 - different identifiers that we can have
14:04 - for HTML elements right now we're going
14:06 - to use an ID and later on we can look at
14:08 - a class so for our buttons inside of the
14:11 - button tags here we're going to say ID
14:14 - is equal to and then we're going to put
14:16 - double quotation marks and inside the
14:18 - double quotation marks we're going to
14:20 - specify the identifier for this button
14:22 - now this button is going to be green
14:25 - it's important that for all of your IDs
14:27 - they're unique values they're enclosed
14:29 - in double quotation marks you also want
14:31 - to make sure you don't have any spaces
14:33 - or any weird characters like this or
14:35 - brackets okay you just want to have kind
14:37 - of a standard string or a standard set
14:39 - of characters you can have numbers
14:41 - that's fine but you just want to have
14:42 - kind of a normal set of characters here
14:44 - okay so for the ID we're going to go
14:46 - with green and then for this ID we're
14:48 - going to go with red and for this ID
14:51 - we're going to go with blue so we now
14:53 - have a way to identify our various
14:55 - buttons now what we're going to do is go
14:57 - in the style tag and we're going to
14:58 - we're going to style them now to access
15:00 - uh what we want to style we have to
15:02 - specify the identifier now the
15:05 - identifier for using an ID is this pound
15:08 - sign so when I put this pound sign and
15:10 - then I put the ID I want to access so in
15:12 - this case like green I'm now accessing
15:15 - any element that has the ID equal to
15:17 - Green so what I'll now do is put a set
15:19 - of curly braces and inside of these
15:21 - curly braces I can put any styling
15:24 - properties that I want to apply to this
15:25 - button so in this case I can simply say
15:27 - the background
15:29 - is equal to Green now when I do that
15:31 - it's going to change the background
15:32 - color of my button so it's now green now
15:35 - we can go ahead and do the same thing
15:36 - for our other buttons so we can say red
15:38 - and then inside of here we're going to
15:40 - have background color red okay so now we
15:42 - have a red button same thing here for
15:46 - our Blue Button we're going to say
15:48 - background color and then blue okay
15:52 - that's awesome now if we want to make
15:53 - our buttons look just a little bit nicer
15:56 - there's one more thing we can do that
15:58 - will actually apply a style to all of
16:00 - our buttons so maybe I want to make my
16:02 - buttons a little bit round want to make
16:04 - them a bit bigger uh you know we can do
16:06 - whatever we want right but let's say I
16:07 - want to make them a little bit bigger
16:08 - and rounder well to do that I can
16:11 - actually just access the tag button and
16:14 - now any button is going to get this
16:16 - property so I can say button and I can
16:19 - put two sets or I can put a set story of
16:21 - curly braces and now anything I put in
16:23 - here is going to apply to any of the
16:25 - elements that have this button tag so
16:27 - here we're using the ID as the
16:29 - identifier here we're using the tag name
16:31 - as the identifier and there's tons of
16:33 - different ones you can use inside of CSS
16:36 - it's not meant to be a CSS tutorial but
16:37 - I do want to teach you this okay so for
16:40 - our button we're going to set a border
16:42 - radius and by the way like look how many
16:44 - properties there are you don't need to
16:45 - memorize these okay I have a few of them
16:47 - memorized because I've used them before
16:48 - but you can always just look up The
16:50 - Styling properties if you want something
16:51 - unique so I'm going to go border radius
16:54 - and we're going to set this to be 5
16:56 - pixels when I do that you'll notice we
16:58 - get some some rounding on the corners
16:59 - that's what border radius does next we
17:02 - can set say the width so I can say the
17:04 - width is 100 pixels make sure you have
17:06 - the pixels here if you don't have the
17:08 - pixels you're going to get an error and
17:10 - then I'm going to set the height here of
17:12 - 40 pixels okay now you'll notice the
17:15 - buttons are a little bit close to each
17:16 - other so what I can do is apply
17:17 - something known as a margin the margin
17:20 - is the amount of space between the
17:22 - different elements and I can say we're
17:24 - going to have a margin of 5 pixels and
17:27 - when I do that notice they kind of gets
17:28 - spaced out a little bit nicer here and
17:30 - they're separated on the screen okay so
17:33 - at this point we've got pretty much all
17:34 - we need for the actual user interface
17:37 - what we want to do now is start working
17:38 - with our JavaScript which is what this
17:40 - tutorial is supposed to be about so what
17:42 - we're going to do is inside of this
17:43 - index. Javascript file sojs we're going
17:46 - to link that to the HTML now to link
17:49 - this file we go into our body tag and at
17:51 - the bottom of the body tag we specify a
17:54 - script okay and make sure again you have
17:57 - your closing script tag and we say that
17:59 - the source for this script which is SRC
18:02 - is equal to index. JavaScript now this
18:06 - works because this index file is
18:08 - directly in the same directory as our
18:11 - HTML file so we just want to make sure
18:12 - that this file is in the same directory
18:14 - so we can reference it directly so that
18:16 - means all we have to do here is just
18:18 - write this out and assuming you have the
18:20 - name spelled correctly just always
18:21 - double check your naming it's going to
18:23 - link these files together so now what we
18:25 - can do is we can start setting up some
18:27 - events so that we click on the buttons
18:29 - it does something in the JavaScript
18:31 - which then modifies the code so how
18:34 - should we do this well there's a few
18:35 - ways that we could kind of get started
18:37 - here but the first thing I want to do is
18:39 - access the kind of body component so I
18:42 - want to access this body element so that
18:44 - I can show you how we change the
18:45 - background color of it programmatically
18:47 - in JavaScript so to do that we're going
18:49 - to create a variable now there's two
18:51 - types of variables in JavaScript that we
18:52 - can create we can create them using the
18:55 - constant keyword or const this means
18:57 - it's a variable that's not going to
18:59 - change we're not going to modify it
19:00 - later on or we can use the let or the
19:03 - VAR keyword and this is going to create
19:05 - a dynamic variable where its value can
19:07 - change now in our case we're not going
19:09 - to change this variable so we're going
19:10 - to say const and then body is equal to
19:14 - and now we're going to use document now
19:16 - what document is going to access is the
19:18 - HTML document and it's going to allow us
19:20 - to reference any element that exists
19:23 - inside of here so in this case I want to
19:24 - get the whole HTML document pretty much
19:27 - so to do that I'm going to say document.
19:30 - getet element and then notice that we
19:32 - have a bunch of options here right we
19:34 - have by uh tag Name by name by class
19:37 - name Etc we're going to use Tag name
19:39 - because we want to get the tag name of
19:41 - the body element so let me zoom out a
19:43 - little bit here okay so we're going to
19:45 - say con body equals document. get
19:47 - Elements by tag name and then we're
19:49 - going to get the body tag now what this
19:52 - is going to do is give us the body tag
19:55 - itself however there's a little thing we
19:57 - need to look at so so what we're doing
19:58 - is saying get Elements by tag name
20:01 - notice this plural s now that means that
20:04 - this is actually going to return to us
20:05 - what's known as an array of the
20:07 - different elements that have this tag
20:09 - name because when you're getting a tag
20:10 - name there could be multiple elements
20:12 - that have say the button tag or the
20:13 - paragraph tag or other HTML tags now in
20:17 - our case we're getting the body tag and
20:19 - we know there's only going to be one of
20:20 - those however to in order for us to
20:22 - access that tag we have to actually
20:25 - index it at index zero the way you can
20:27 - think of this pretty much is that body
20:29 - here like this variable so this tag so
20:32 - right is going to return to us a list
20:35 - and this list is just going to have one
20:36 - element and that's going to be the body
20:38 - tag we want to access now to access the
20:40 - first element in the list we simply put
20:42 - these square brackets and we put zero
20:45 - that's the index or the kind of uh
20:47 - pointer I don't know how what you want
20:49 - to say identifier of this element
20:51 - because zero is always the first element
20:53 - in our list so now this variable is
20:55 - going to get well the first element in
20:57 - our list
20:59 - which is just the body tag okay I know
21:00 - it's a little bit confusing for a
21:02 - completely beginner tutorial but I'm
21:04 - trying to go nice and slow so now what
21:06 - we're going to do is we're going to say
21:07 - body.
21:09 - style. background color is equal to and
21:14 - then we can set this to any color we
21:15 - want so I could set it to say red now
21:17 - when I do that notice that the whole
21:19 - thing changes right the background color
21:21 - changes to Red the reason that happens
21:23 - is because once we've kind of made all
21:25 - these UI elements here we've linked our
21:28 - script tag and inside of the script tag
21:30 - what's happening now is we are getting
21:33 - that body uh component that body element
21:36 - that I was talking about we're then
21:37 - changing the style and specifically
21:40 - we're changing the background color to
21:41 - be red now we can change anything else
21:43 - we want there's a bunch of other
21:44 - properties we can modify but in this
21:46 - case we just want to do the background
21:48 - color okay so that's working really
21:50 - nicely now the next thing that we want
21:52 - to do here is we want to make it so that
21:54 - when we click on these buttons we change
21:56 - the color so to do that we're going to
21:57 - make a function now a function is just a
22:00 - block of code that we can call that's
22:02 - reusable so I can say function this is
22:05 - how you start defining one and then I
22:07 - can give the function a name in this
22:09 - case I'm going to call it set color make
22:11 - sure you don't have any spaces or any
22:12 - weird characters in your name and then
22:14 - I'm going to give this something known
22:15 - as a parameter now parameter is kind of
22:17 - a unique value that you can pass into
22:19 - the function so that it can do something
22:21 - different based on the value you give it
22:23 - so now inside of this function so I have
22:25 - these set of curly braces by the way you
22:28 - don't forget this you got to kind of
22:29 - type it exactly as I have it what we're
22:31 - going to do is what we just did we're
22:32 - going to say body. style Dot and this
22:36 - going to be background color is equal to
22:40 - and then name now name is going to
22:42 - represent the name of the color that we
22:43 - want to set the background to so what
22:46 - we've just done is made a function and
22:47 - when we call this function we can give
22:49 - it a name and whatever that name is
22:50 - we'll set the background color to so I
22:52 - can simply go here and I can call the
22:54 - function the way you call the function
22:55 - is you write the name of the function
22:56 - which is set color and and then you pass
22:58 - to it any of the parameters that it
23:00 - specifies in this case the parameter
23:02 - value is name so I can just pass it say
23:04 - green and when I save it you'll notice
23:07 - that the background color goes to Green
23:08 - now the thing is I can call the function
23:10 - multiple times so I could say red now
23:13 - it's going to go to Red because first we
23:15 - set it to Green then we immediately set
23:16 - it to Red now if we want we can change
23:19 - this and we can set it to Blue we could
23:21 - even go to something like purple and you
23:24 - get the idea here we're going to
23:25 - continue to change the background color
23:27 - using this function
23:28 - so that's great but the thing is I want
23:30 - to call this function when I press on
23:33 - these buttons so how do I do that well
23:35 - I'm going to go to my HTML and inside of
23:38 - my button tags here I can actually
23:40 - register an event called
23:42 - onclick now what onclick will do is call
23:45 - a JavaScript function when the button is
23:47 - clicked now that's great for us because
23:49 - we have our function here that we can
23:51 - call so we're going to go onclick is
23:54 - equal to and inside of Double quotation
23:56 - marks here we're going to write the name
23:58 - of our function exactly as we have it in
24:00 - the JavaScript now in this case it's set
24:02 - color but remember that we have to pass
24:04 - a parameter which is the name of the
24:06 - color we want to set so what we're going
24:08 - to do is put two sets of parentheses
24:09 - here and make sure you put single
24:12 - quotation marks Okay the reason we're
24:14 - using single quotation marks is because
24:15 - we have double quotation marks here
24:17 - which is kind of uh what do you call it
24:20 - giving us the ability to write this
24:22 - function in whenever you're working with
24:25 - these properties of these HTML tags you
24:28 - need to kind of put them inside of
24:29 - Double quotation marks so in our case
24:31 - saying okay onclick is equal double
24:32 - quotation marks and then inside of here
24:34 - we're saying set color but now we need
24:37 - to pass a string value to our function
24:40 - so in order to do that we're now going
24:42 - to use single quotation marks so we
24:43 - don't get mixed up with double quotation
24:45 - marks so we're just using singles
24:47 - because it does the same thing as
24:49 - doubles but it allows us to embed them
24:52 - inside of a set of double quotation
24:53 - marks I know it's a little bit confusing
24:55 - but please just use double quotation
24:56 - marks here and then for this one we're
24:58 - going to say green okay and now what
25:01 - happens is when I click this button it's
25:03 - going to call this set color function
25:05 - with the parameter green and set the
25:07 - background color to Green so now all we
25:09 - need to do is copy this for all of our
25:12 - different values and change the
25:14 - parameter here to be the according color
25:17 - this going to be red and blue okay so
25:20 - now I can go red green blue and I can
25:23 - set these colors on the screen and the
25:25 - last thing that's left is to set the
25:26 - random color
25:28 - okay so now to set the random color
25:30 - we're going to need a different function
25:31 - because we're going to do something
25:32 - different so we're going to say function
25:35 - random color and same thing here we're
25:37 - going to put a set of parentheses but
25:39 - this time we don't need any parameters
25:41 - we don't really care we don't want need
25:42 - to pass anything to the function it's
25:43 - just going to do something when we call
25:45 - it and inside of here we're going to
25:47 - generate a random RGB value now RGB
25:51 - stands for red green blue these values
25:54 - go from 0 to 255 okay and this allows us
25:57 - to create pretty much any color by using
26:00 - a combination of red green and blue if
26:02 - we had zero red Z green and zero blue
26:04 - we'd have black if we had 255 255 255 we
26:08 - have the full red full green and full
26:10 - blue then we would have a white okay
26:13 - that's kind of how RGB works so what
26:15 - we're going to do is start generating
26:16 - three random values a random amount of
26:18 - red a random amount of green and a
26:20 - random amount of blue so we're going to
26:21 - create a constant variable again because
26:23 - these don't need to change we just want
26:25 - to create them so we can store our value
26:28 - and we're going to say const red that's
26:30 - the name of our variable is equal to
26:32 - math with a capital M do random and then
26:37 - we're going to multiply this by
26:39 - 255 now the multiplication operator is
26:42 - simply the asteris here uh which you can
26:44 - find on your keyboard above the eight if
26:46 - you hold shift now what math. random
26:49 - does is it generates a random value for
26:51 - us between 0 to one so you get this kind
26:53 - of random um you know multi- decimal
26:56 - value like an example is like 0 point
26:58 - you know something like this okay we now
27:00 - take that and multiply it by 255 and
27:03 - what that ends up giving us is some
27:05 - value that's between 0 and
27:08 - 255 because if we generate a number
27:10 - between 0 and 1 and then we multiply
27:12 - that by 255 we get a random value in the
27:15 - range of 0 to 255 the issue is that
27:18 - random value is going to be a huge you
27:19 - know decimal point value with a bunch of
27:21 - things so what we need to do is round it
27:23 - off so we're going to say
27:26 - math.round and then we're going to put
27:28 - all of this inside of here what we're
27:31 - actually doing is using the rounding
27:32 - function we're passing in some random
27:34 - value we generated and now it's going to
27:36 - round it to a whole number so we can
27:38 - copy this and paste this and do the same
27:41 - thing for
27:43 - green and for blue so now we have a
27:46 - random red value random green value and
27:49 - random blue value that are all in the
27:50 - range of 0 to 255 now all we need to do
27:54 - is use those values to create a color
27:56 - that we set the the background width to
27:59 - do that we're going to do a bit of a
28:00 - string manipulation so we're going to
28:01 - say const color again creating a new
28:03 - variable and this is going to be equal
28:05 - to and we're going to use back ticks now
28:08 - you may not have seen this symbol before
28:10 - but if you look at the Tilda on your
28:12 - keyboard which is the squiggly line
28:14 - typically below the Escape key or at
28:16 - least close to there there's these
28:18 - symbols that kind of look like single
28:20 - quotation marks they're not they're
28:22 - called back ticks and you're going to
28:23 - find those on the keyboard okay you're
28:25 - going to put a set of back ticks and of
28:27 - here you're going to type
28:29 - RGB you're going to put a set of
28:30 - parentheses and we're going to embed the
28:33 - variable red green and blue inside of
28:35 - here now to do that we're going to put a
28:37 - dollar sign and a set of curly braces
28:40 - and we're going to put red and then
28:42 - we're going to repeat this for green and
28:45 - blue now what we're effectively doing
28:47 - here is creating a color that we will be
28:50 - able to use to set the background color
28:52 - with so to do that we have to have the
28:54 - string RGB and then we have to have
28:56 - three numbers right the amount of red a
28:58 - comma the amount of green a comma and
29:00 - the amount of blue that all needs to be
29:02 - inside of a string so we use this kind
29:04 - of neat string manipulation trick with
29:06 - these back ticks to embed these number
29:09 - variables because the data type of these
29:11 - variables is a number not a string
29:13 - strings are in double quotation marks or
29:15 - single quotation marks numbers are just
29:17 - values like 67 or 255 and we embed them
29:21 - here inside of this variable now that we
29:23 - have the color we can simply say body.
29:26 - Style background color and rather than
29:29 - using the name of our color we can use
29:31 - this RGB value so we can say color like
29:34 - that and now when we call the random
29:36 - color function so let's do it down here
29:39 - you'll see that we get a random color so
29:40 - every time I save you'll see we get a
29:42 - unique random color because it keeps
29:44 - refreshing the screen for us or every
29:45 - time you refresh you'll get a different
29:47 - random color so now what we need to do
29:50 - is make it so when we pass press this
29:52 - random button it does that so all we
29:54 - have to do here is for the random button
29:56 - we just go on click is equal to random
30:01 - color make sure you put your set of
30:03 - parentheses here to call the function
30:05 - and when we call random we get a random
30:07 - color on the screen so that's going to
30:09 - wrap up project number one I know there
30:11 - was a lot of explanation there but I
30:13 - just want to make sure for the first one
30:14 - at least I'm kind of teaching you all of
30:15 - the Core Concepts now we'll start to
30:17 - pick up the pace just a little bit as we
30:19 - head into project number two all right
30:21 - we're moving on to project number two
30:23 - which as you might recall is a
30:24 - palindrome Checker so we're just going
30:26 - to check if a string is the same forward
30:29 - as it is backwards okay how do we do
30:32 - this well let's begin by creating our
30:34 - files so we're going to have our main.
30:36 - HTML file and we're going to have our
30:38 - index.js file now I've already done this
30:41 - for project one so if you're confused at
30:42 - all go back to project one I'm going to
30:44 - go a little bit faster now than I was
30:46 - before so again if it's too much go back
30:48 - and watch Project number one we're going
30:49 - to start by typing HTML Colin 5 and then
30:52 - we get our auto complete if that doesn't
30:54 - work for you go to Project one and you
30:56 - can just copy the HTML and you can
30:58 - remove what you don't need or you can
31:00 - pause the video and you can type this
31:01 - out you don't need these you can remove
31:04 - those from the screen I'm going to zoom
31:05 - in a bit so it's a little bit easier to
31:06 - read okay so now we're just going to
31:09 - change the title of our document so
31:10 - rather than having this we're going to
31:12 - have
31:13 - palindrome Checker and for the interface
31:17 - for this one is going to be quite simple
31:19 - we just want to have a title that says
31:21 - pal drum Checker and then we want to
31:23 - have the ability for someone to type
31:25 - into a little box and to press a button
31:27 - to check their string so we're going to
31:30 - start inside of our body by having an H1
31:32 - tag and we'll just say pal in Drome
31:36 - Checker like that and what we can do if
31:38 - we'd like here is we can rerun the live
31:40 - server which will give us access uh to
31:43 - view this code as we're writing it so
31:44 - what you'll notice here is that if you
31:46 - look at the bottom right hand side of
31:47 - the screen you'll see this thing that
31:48 - says Port 5500 if that doesn't work you
31:51 - can also just type live server the way I
31:53 - open this by the way I know I want to
31:55 - bit faster is I hit control shift and
31:57 - the character p on my keyboard This
31:59 - opens the command pallet in VSS code so
32:02 - it's either command shift p or control
32:04 - shift p depending on your operating
32:06 - system and then I typed live server when
32:09 - you do that you'll see you have open
32:10 - with live server and stop live server so
32:12 - first I'm going to stop the live server
32:14 - because I had that running before so you
32:16 - saw that stopped it I also could have
32:18 - just pressed the button down here and
32:19 - now if I click on go live or again I
32:23 - have control shift p and then I go live
32:26 - server and then open with live server
32:28 - it's going to open up that HTML document
32:30 - which you saw right here so what we'll
32:32 - do is we'll just leave this on the right
32:34 - hand side of our screen we'll move this
32:36 - over to the left uh so that we can kind
32:38 - of see what we are doing as we write the
32:40 - code now let's make this a little bit
32:42 - smaller so that we can actually see the
32:44 - full title okay so now we have our title
32:47 - the next thing we want to do is create
32:49 - an input box as well as a button for the
32:51 - user to type in so in order to get an
32:53 - input box in HTML you simply type input
32:56 - now this is what's known as a self
32:57 - enclosing tag meaning you can simply
32:59 - type a forward slash and the closing
33:02 - angle bracket like this you don't need
33:04 - to type like SL input like we had before
33:07 - in fact that won't work if you do that
33:10 - and here for the input we're going to
33:11 - specify the type of the input which is
33:13 - going to be text and we can give this a
33:16 - placeholder and we can say type
33:20 - something okay let's make this a little
33:22 - bit smaller so now you'll see a little
33:24 - input box pops up here and I can type
33:27 - inside of this that's the basic uh HTML
33:29 - tag you can also use this for numbers
33:31 - dates all kinds of stuff now as well as
33:34 - the input button or input box sorry we
33:36 - just want to have a button that you can
33:37 - click on so we're going to say button
33:39 - and then for the button this is going to
33:41 - say check you'll notice a button appears
33:43 - and now nothing's happening because we
33:45 - don't have this linked up but you could
33:47 - click on the button okay lastly we're
33:49 - going to link this to our HTML or to our
33:51 - JavaScript story to do that we're going
33:53 - to create a script tag at the very
33:55 - bottom of the body of our HTML document
33:58 - then we're going to say source is equal
33:59 - to
34:02 - index.js again recognizing that this
34:04 - only works because the index.js file is
34:08 - inside the same directory as our main.
34:11 - HTML file okay so make sure you have
34:13 - that set up all right now we're just
34:16 - going to give an ID to our input the
34:19 - reason for that is I need a way to
34:21 - actually get what the user typed into
34:23 - the input box there's some other ways to
34:25 - do it but the cleanest way is to Simply
34:27 - give this an identifier so we're going
34:28 - to say ID is equal to you can call this
34:31 - whatever you want but I will just call
34:33 - this the input okay again don't use any
34:36 - special characters just use kind of a
34:38 - normal string like this okay so that's
34:40 - pretty much it for our HTML we've got
34:42 - our very simple interface Here and Now
34:44 - what we want to do is start writing in
34:45 - our JavaScript so let's open up our
34:47 - Javascript file and we'll do the rest of
34:49 - the work from here other than a few
34:51 - small things We'll add in the HTML okay
34:54 - first thing we need to do is figure out
34:56 - how we can get what the user has typed
34:59 - in this box because before I can check
35:01 - if it's a paland drum well I need to
35:02 - know what it is that they typed right so
35:05 - to do that we're going to say const
35:07 - input we're declaring a constant
35:09 - variable one that's not going to change
35:11 - and this is going to be equal to
35:13 - document. getet element by ID now what
35:17 - this allows us to do is get one element
35:21 - by its identifier right which is the ID
35:23 - that we set now in this case the ID is
35:25 - input so what I do is I put input inside
35:27 - of Double quotation marks just to
35:29 - quickly show you we have ID equals input
35:31 - if it was input one we would go here and
35:33 - we would change this to input one okay I
35:36 - know it's confusing because I did the
35:37 - same thing but just it's the ID okay
35:39 - it's not the name of the tag it's the ID
35:41 - we're doing it differently this time
35:42 - that we did in the first um project okay
35:46 - so now we've got the element when we
35:49 - have the element it gives us access to
35:50 - this whole input box so we could change
35:52 - the styling we could clear what's inside
35:54 - of it we can also get what's inside of
35:56 - it it but that's not what this does this
35:58 - just gives us the whole tag or the whole
36:00 - element itself and then if we want to
36:02 - get the value that's different so let's
36:05 - write a function here called check okay
36:10 - and inside of this function all we're
36:11 - going to do is we're just going to
36:13 - Output what the value is so to do that
36:16 - we'll say const value is equal to input
36:20 - dot you guessed it value now you might
36:23 - notice that I'm putting these um
36:25 - semicolons you don't need them in Javas
36:26 - script but they're what's known as a
36:28 - line Terminator this just means we're
36:30 - ending the current line and then moving
36:32 - to the next one again you don't need
36:33 - them like it's fine if you don't have
36:35 - them but if you see me add one it's just
36:36 - out of habit anyways what this does is
36:38 - give us the value of the text input so
36:42 - now if I'd like I can use something
36:43 - known as an alert and alert is a message
36:46 - that will pop up in the browser and I
36:48 - can simply alert the value so now all we
36:51 - need to do is make it so that when we
36:53 - hit check here we call this function and
36:55 - it will tell us what value is so to do
36:58 - that we go to our button here and we say
37:01 - onclick is equal to check with two sets
37:05 - of parentheses okay or sorry one set of
37:07 - parentheses because we have the opening
37:08 - and we have the closing so now when we
37:10 - click this button it calls the check
37:11 - function the check function gets the
37:13 - value of the text input and Pops it up
37:15 - on the screen Let's test it with test
37:19 - click on this and notice it shows us in
37:21 - the alert box test okay so now we know
37:24 - how to get the value now what we need to
37:26 - do is figure out how to determine if
37:28 - this is a palindrome now recall that a
37:30 - palindrome is simply something spelled
37:31 - the same forwards as backwards so if we
37:34 - have Dad that's a palindrome if we have
37:37 - dog not a palindrome okay so how do we
37:39 - check this well there's a bunch of ways
37:41 - and I challenge you at this point if you
37:43 - know some basic JavaScript try to see if
37:45 - you can figure this out but I'm going to
37:46 - walk you through it now the easiest way
37:48 - to do this is for us to Simply reverse
37:51 - the string and then just compare it to
37:53 - the original string and see if they're
37:55 - the same so what I mean by that says
37:56 - okay we have the string dad so let's now
37:58 - reverse it well that gives us Dad we're
38:01 - going to check if they're the same they
38:02 - are the same so they're palum whereas if
38:04 - we have something like dog and we
38:06 - reverse this we're going to get god well
38:08 - these are not the same okay so it's not
38:10 - a pal drum so now we got to figure out
38:12 - okay how do we reverse string now I'm
38:15 - going to show you a fancy way to do this
38:17 - and then we can go through a manual
38:18 - method as well so I'm going to write a
38:21 - function called reverse string now this
38:25 - is going to have the parameter St Str
38:27 - this is a value that will give us input
38:29 - to the function a function is simply a
38:32 - reusable block of code that you can call
38:34 - as many times as you want so what we're
38:36 - going to do is we are going to First
38:38 - Take This string so a string is anything
38:40 - again in double or single quotation
38:42 - marks and we're going to convert this
38:43 - into a list or to an array now an array
38:47 - is a collection of elements that are
38:49 - ordered so we can have an array that has
38:52 - the values like
38:55 - this okay now the way you access the
38:58 - elements in an array are by using its
39:00 - position or its index the first position
39:03 - in the array is always the zero with
39:05 - index we always start counting at zero
39:07 - in programming so here this is position
39:09 - zero or index zero this is index one
39:12 - index 2 oops let's go here index 3 and
39:16 - index 4 okay now the interesting thing
39:19 - with arrays is there's all kinds of
39:21 - what's known as methods which are
39:22 - essentially operations or functions that
39:25 - we can call on the array they can
39:27 - manipulate them so what we can do is we
39:29 - can take our string which is a different
39:32 - type right it's just a set of texts
39:34 - essentially we can convert it into an
39:37 - array we can then reverse the array and
39:40 - then we can take the array and turn it
39:42 - back into a string it's not the most
39:44 - optimal way to do this but it is a way
39:46 - uh that we can kind of do this in a
39:47 - single line and I'm going to show you
39:49 - those
39:49 - operations so what we can do is we can
39:51 - say return Str
39:54 - str. split now what do split does is it
39:57 - takes a string again anything in double
39:59 - or single quti marks and it splits it
40:02 - based on what's known as the delimiter
40:04 - which is the value that we specify here
40:06 - now often times you would use this split
40:09 - operation to take a string and maybe get
40:11 - all of the words that exist to do that
40:14 - you would have a delimeter of a space
40:16 - and that means that we're going to look
40:18 - for all the spaces and as soon as we see
40:20 - one we're going to take whatever's on
40:22 - the left side and whatever's on the
40:23 - right side and we're going to add those
40:25 - as unique elements into an
40:27 - array so if we were to split on hello
40:30 - world and we used the delimeter of a
40:32 - space it would give us hello and World
40:34 - in an array so now we have all of the
40:36 - words like that are in a sentence right
40:38 - now if we split on an empty string all
40:41 - that means is take every single
40:43 - character and put it into an array so in
40:46 - the case where we have hello it just
40:48 - turns that into an array that has those
40:50 - five characters so we're going to split
40:53 - now after we split we're going going to
40:56 - reverse now notice I'm using this dot
40:59 - notation you can use this on certain
41:01 - data types and it's like calling a
41:02 - function on that thing so we're calling
41:05 - split on the string then we take all of
41:07 - this and we call reverse on it so we're
41:10 - now reversing the array now that we've
41:13 - reversed the array that's going to give
41:15 - us the Reversed array so in the case of
41:17 - dog right that would give us g o and d
41:22 - and what we want to do is we want to
41:23 - compare this to the original input but
41:26 - remember the original input is simply
41:28 - the string dog right in in this example
41:30 - that I'm using so what we need to do is
41:32 - need to now take this array and we got
41:34 - to convert this into the string version
41:37 - of it that looks like this how do we do
41:39 - that well there's another method we can
41:40 - use which is joyan and what join does is
41:44 - it takes all of the different elements
41:45 - that are in our array and it combines
41:47 - them together into a string with a
41:49 - separator or a delimiter now in this
41:52 - case if we use the empty string
41:53 - delimeter we just get all of the
41:55 - characters smooshed together join is
41:57 - kind of the opposite thing of splitting
41:59 - right it's taking the array elements and
42:00 - turning it into a string whereas
42:02 - splitting is taking the string elements
42:04 - and turning it into an array if I were
42:05 - to join with a space then we would get
42:07 - this but when I join with the empty
42:09 - string we just get the string okay so
42:12 - that was my long explanation of how
42:13 - these methods work again I'm trying to
42:15 - be really thorough especially with the
42:17 - beginner projects let me know what you
42:18 - think of this in the comments okay so we
42:20 - have reverse string so now we can
42:21 - reverse a string so now let's just do a
42:23 - test and let's say okay const reverse is
42:27 - equal to reverse string of
42:31 - value all right so what we're doing now
42:33 - is we're calling the reverse string
42:34 - function we're passing in the original
42:36 - value we're now returning a re reversed
42:39 - version of that so now let's simply
42:41 - alert
42:43 - reverse okay now let's go here and go
42:47 - hello and notice we get the Reversed
42:49 - version now I need to make sure I remove
42:51 - the space here because you can see it's
42:52 - kind of spaced out so let's run this
42:55 - again
42:56 - again every time when I save this it's
42:58 - going to automatically update so just
42:59 - make sure you're saving it and you see
43:01 - We Get It reversed okay so now that we
43:03 - have It reversed we're just going to
43:05 - check if it's the same as the original
43:08 - so to do that we're going to make an if
43:10 - statement an if statement allows us to
43:12 - check a condition a condition is
43:14 - something that evaluates uh to true or
43:16 - to false and the way that we can do this
43:18 - condition is we can say value equals
43:21 - equals so two equal signs to reverse now
43:25 - it's actually best practice to do three
43:27 - equal signs I don't really want to get
43:29 - into all of that in this second but
43:30 - either two or three equal signs doesn't
43:32 - matter for this example and what this
43:33 - will do is it will compare these two
43:35 - values for equality it's going to check
43:38 - are these the same that's what happens
43:40 - when you use multiple equal signs don't
43:43 - think you can use like four or five
43:44 - equal signs it's just two or three they
43:45 - have different meanings but in our
43:47 - instance they'll do the same thing so
43:48 - we're going to use three here we're
43:49 - going to say if value is triple equal to
43:52 - reverse then inside of a set of curly
43:55 - braces we're going to alert and we'll
43:58 - say pal
44:01 - in Drome like that okay I'm just making
44:05 - it a little bit excessive so that's if
44:08 - this is the case then we go inside of
44:10 - these curly braces and we do this we
44:12 - have an alert otherwise which is where
44:15 - this else statement comes in so we're
44:18 - going to put an else and we're going to
44:19 - put a set of cly braces we're going to
44:21 - alert and we're going to say not today
44:23 - exclamation point okay so that's it um
44:27 - this is a basic check if statement again
44:29 - you have some condition in this case
44:30 - we're checking if these things are the
44:31 - same this is going to give us either the
44:34 - true or false value if they're the same
44:37 - it's going to give us true and if this
44:39 - thing is true we do this otherwise we do
44:43 - this right that's all how this works so
44:45 - if I go here now and I type dog we get
44:49 - not today but if I type Madame I get
44:53 - palindrome okay so now the thing is is
44:56 - you might be notice when I click this it
44:58 - keeps this input here I don't really
45:00 - want that it's going to be a little bit
45:02 - better if I actually remove this input
45:04 - after I press this button so I can do
45:05 - that by simply going here and saying
45:08 - input remember that's this variable here
45:12 - do value is equal to an empty string so
45:16 - rather than um getting the value we're
45:19 - actually setting the value here so I'm
45:21 - setting the value to an empty string so
45:23 - now you'll notice if I
45:24 - type hello and I click on check it says
45:27 - not today and then it gets removed right
45:29 - we change the value to be nothing this
45:32 - is just clearing the value from the
45:33 - input field okay so I think that's
45:37 - pretty clear that's going to wrap up
45:38 - this video or this not this video sorry
45:41 - this project now let's move on to the
45:43 - next one so now we are moving on to
45:45 - project number three which is our random
45:47 - quote generator let me first stop the
45:50 - live server here so this is going to
45:52 - stop and let's make a new folder here
45:55 - called three and let's go in here and
45:57 - make our files so main. HTML and
46:01 - index.js I'm going to go a little bit
46:03 - faster again or just going to
46:04 - progressively pick up the pace if you're
46:06 - getting confused go back to the previous
46:08 - project because that's where I really
46:09 - break it down in more detail okay so for
46:12 - main. HTML we have a random quote
46:15 - generator we're going to begin by
46:17 - setting up our HTML document so we can
46:19 - type HTML coin 5 and hit enter let's
46:23 - remove this so we can view it more again
46:26 - if that doesn't work for you then you
46:27 - can simply pause the video and type this
46:29 - out or you can go and copy some of the
46:31 - other projects also this code will be
46:32 - available on GitHub in case you want to
46:34 - copy it you don't need this so you can
46:36 - remove that if you want although you can
46:38 - also keep it and for the title we're
46:41 - going to change this to be the random
46:45 - quote generator now I'm going to copy
46:48 - this and we're going to create a header
46:50 - tag here inside of our body so we're
46:53 - going to say H1 random quote generator
46:56 - and now we just need to Simply make the
46:58 - interface now for the interface we're
47:00 - simply going to have a paragraph tag
47:02 - which is this P tag just for some
47:03 - standard text we're going to say the ID
47:06 - is the quote just so we have a way to
47:09 - identify this tag and this is where
47:11 - we're actually going to put what the
47:13 - random quote is so when we generate it
47:15 - from JavaScript we're going to populate
47:17 - this paragraph tag with it now we're
47:19 - going to create a button now for this
47:22 - button we're just going to say generate
47:24 - quote and inside of the button
47:27 - properties we're going to say
47:29 - onclick is equal to and we're going to
47:31 - call a function called generate quote
47:35 - with our double parenthesis like this
47:37 - again if it's confusing please go back
47:38 - to the other video it's already
47:39 - explained how all of this stuff works
47:42 - now we haven't yet written this function
47:43 - in JavaScript we're going to write it in
47:45 - a second so now all we need to do for
47:47 - this interface is we need to make our
47:51 - script tag so we're going to say script
47:53 - at the bottom of the body make sure it's
47:55 - at the bottom
47:56 - source is equal to index.js keeping in
47:59 - mind this only works because index.js is
48:02 - in the same directory as our main file
48:06 - okay that's the HTML let's go live again
48:09 - this time and now you can see that we
48:11 - have this generate quote random quote
48:14 - generator when we click this nothing
48:16 - happens that's fine okay quick thing by
48:19 - the way at this point I guess I'll show
48:20 - you that if you're on Chrome if you
48:22 - right click and click inspect it's going
48:24 - to bring open this kind of developer
48:26 - view if you click on Console you can see
48:29 - any errors that might be happening so if
48:31 - you're getting some issues you can see
48:32 - in the console what's going wrong I
48:34 - should have showed that earlier but I'm
48:36 - I guess we didn't have any mistakes yet
48:37 - uh so if I refresh you see it gets
48:39 - cleared and now if I press this button
48:40 - it's telling us oh uncaught reference
48:42 - error because we haven't defined this
48:44 - function okay just wanted to quickly
48:45 - show that to you anyways let's now go
48:48 - into index.js we pretty much done with
48:50 - the HTML and let's write our random
48:52 - quote generator so first things first we
48:54 - need some quotes now I'm just going to
48:56 - copy in a bunch of these you guys can
48:58 - kind of find your own quotes you can
49:00 - write them or you can just stop and you
49:02 - can write these out or you can go to the
49:04 - link in the description there'll be a
49:05 - GitHub link where this finished project
49:07 - code is and you can just download all of
49:09 - these quotes or kind of copy and paste
49:11 - the text and paste it in just to get
49:13 - started if you want to just test this
49:15 - you can just have quotes that are like
49:16 - one two three whatever okay something
49:19 - super simple now what we're doing is
49:20 - we're putting this inside of an array
49:22 - now remember I was talking about an
49:23 - array in the previous project where this
49:25 - this is an ordered collection of
49:26 - elements where each one of these quotes
49:29 - here even though they're quite long they
49:30 - have an index or a number that allows us
49:33 - to access them so this is index zero
49:35 - this is index one this is index two
49:37 - index 3 index 4 Etc and that's how we'll
49:40 - grab our different quotes from our kind
49:42 - of collection of quotes here so what I'm
49:44 - going to do is create a new data
49:46 - structure that we haven't seen yet with
49:48 - a variable called used
49:51 - indexes now this is going to be equal to
49:53 - a new we're going to use this new
49:55 - keyword which I'll discuss in a second
49:57 - set now let's quickly discuss a set so a
50:00 - set in JavaScript is a unique collection
50:04 - of elements now the set typically is
50:06 - denoted with the curly braces although
50:08 - in JavaScript doesn't really have that
50:10 - type of notation and inside the set you
50:13 - can only have values that are unique so
50:15 - I could have like one three four but I
50:17 - can't have two ones okay you just have a
50:20 - single instance so the set doesn't keep
50:23 - track of order it doesn't keep track of
50:25 - quantity it just tells you if you have
50:27 - something or if you don't have something
50:30 - so we know okay yeah four exists in the
50:31 - set and we know that five does not exist
50:34 - in the set that's all a set is used for
50:36 - now you might be saying well Tim can't I
50:38 - just use an array for that with all
50:40 - these elements you can but the thing
50:42 - with a set is it's actually more
50:43 - performant so it's a faster data
50:46 - structure when all you care about is if
50:48 - an element exists or if it doesn't exist
50:50 - in our case when we're going to be
50:51 - generating these quotes what we're going
50:53 - to do is we're going to put the index
50:55 - index of quotes that we've already used
50:58 - inside of the set so that we can check
51:00 - really quickly if we've already used
51:02 - that quote or not so that way we don't
51:04 - recycle the same quotes until we've gone
51:07 - through all of them that's what makes
51:08 - this project a little bit more complex
51:10 - we're introducing this set now in this
51:12 - case I use this new keyword now you have
51:14 - to use this with some certain data
51:16 - structures in Python essentially what
51:19 - we're doing here is we're creating a new
51:20 - instance of the set class you don't have
51:23 - to worry about all that terminology it
51:25 - doesn't matter that much for a beginner
51:27 - but it's just a bit different than
51:28 - creating something like an array where
51:29 - you can just Define it like this okay so
51:31 - for the set and for some other data
51:32 - structures you need to actually use the
51:34 - new keyword so I'm saying okay we're
51:36 - making a new set all right that's it so
51:39 - now we have the two variables quotes and
51:41 - sets what we want to do now is we want
51:43 - to populate the paragraph tag with a
51:46 - quote so we'll Begin by simply randomly
51:49 - picking a quote and then we'll start
51:51 - using this set to make sure that we're
51:53 - not recycling the same quotes so we're
51:56 - going to say
51:57 - function
51:59 - generate quote okay now inside of here
52:02 - the first thing we've got to do is we've
52:04 - got to get access to that paragraph tag
52:07 - so this one right here so that we can
52:09 - set its value now what I'll do is I'll
52:11 - create another variable here I'll say
52:13 - const uh and this can be quote tag is
52:17 - equal to
52:19 - document. get element by ID and the ID
52:24 - of this I believe is simply quote we can
52:26 - go back and reference that and you see
52:28 - yes it is quote okay so what we're doing
52:30 - is we're just grabbing access to that
52:32 - paragraph tag right now you don't see it
52:34 - because there's no text in it but when
52:36 - we start using it it will be I'm
52:38 - actually just going to call this quote
52:39 - element so it's a little bit more clear
52:42 - okay inside of here if we want to set
52:45 - the text of this paragraph tag we can
52:48 - simply say quote element Dot and we have
52:51 - a few options but the option I'm going
52:53 - to use here is inner HTML with all
52:56 - capitals for HTML what this does is set
52:59 - what's in between the opening and the
53:02 - closing tag you can use this on other
53:04 - tags as well but for us we'll just use
53:06 - enter HTML and we can just make this
53:08 - equal to like hello world for now just
53:11 - to test it out so when I press this now
53:13 - you should see that hello world appears
53:15 - in the tag if I refresh and press it
53:16 - again you see that we're populating the
53:18 - inside of the HTML of that paragraph tag
53:21 - with Hello World okay so that's kind of
53:23 - what we're going to use to actually set
53:25 - quote so now what we've got to do is we
53:27 - got to randomly pick an index inside of
53:30 - our quotes array select that quote and
53:33 - then populate it inside of the paragraph
53:35 - tag now we've already kind of done this
53:36 - but let's do it again we're going to say
53:38 - const random idx is equal to
53:43 - math. floor and then inside of here
53:46 - we're going to say
53:48 - math. random and we're going to multiply
53:51 - this by the quotes. length Okay so we
53:54 - just use a a few new pieces of syntax
53:56 - let's quickly talk about this math.
53:58 - random as we saw before randomly
54:00 - generates a value between 0 and one now
54:04 - what we're doing is we're multiplying
54:05 - that by the length of our quotes so you
54:07 - can use this do length property tells
54:09 - you how many elements are inside of the
54:11 - array and that's going to give us now a
54:13 - random value that's between zero and
54:15 - whatever the length of the quotes are in
54:17 - this case I think we have like 10 quotes
54:19 - or nine quotes or something like that
54:21 - okay now what I'm doing is I'm saying
54:23 - math. floor now what floor we'll do is
54:25 - always round down the reason I'm always
54:28 - going to round down is because the
54:30 - length of the quotes is actually going
54:33 - to be one index beyond what we can
54:36 - access so let's say here I don't know
54:38 - how many this actually is but let's say
54:39 - we have 10 quotes okay if we have 10
54:41 - quotes this last quote has an index of
54:45 - nine right not 10 nine so if I try to
54:48 - access quotes at index 10 we're going to
54:50 - get an error it's going to tell us that
54:51 - this index doesn't exist so what I'm
54:53 - doing is I'm saying okay well will
54:55 - generate a random number between and
54:58 - this is going to be 0 and one and
54:59 - multiply by the quotes. length the thing
55:01 - is it's never going to actually be one
55:04 - the most it will be is like
55:06 - 0.99999 whatever right so when we take
55:09 - that and we multiply it by quotes.
55:11 - length we might end up getting something
55:12 - like
55:13 - 99999999 okay if that's the case we
55:16 - simply take that value and we round it
55:18 - down to n and now we're getting the last
55:21 - quote as opposed to if we were just to
55:23 - round it it would round up to 10 and
55:25 - then we'd be trying to access an index
55:27 - that doesn't exist okay so that's why
55:29 - I'm using floor there's also a seal that
55:33 - will round it up also not sure if you
55:34 - guys can hear the superar behind me but
55:37 - I'm currently in Dubai and that has
55:38 - proven to be a bit of an issue that
55:40 - there's too many Ferraris and
55:41 - Lamborghinis driving around so kind of a
55:43 - fun fact but uh yeah that's where I'm
55:45 - recording and if you heard that well
55:47 - there you go sorry not much I can do
55:48 - about it okay so we have random index
55:51 - now that we have the random index we're
55:53 - going to use that to get one of our
55:54 - quotes okay so to do that we're going to
55:56 - say cost quote is equal to and this is
56:00 - going to be quotes and this is going to
56:02 - be at index random index Okay so we've
56:06 - generated a random index we've now used
56:08 - that to access the quote in our array
56:11 - and can you guess what's next well we're
56:12 - going to populate the paragraph tag so
56:14 - we're going to say the quote element.
56:18 - innerhtml is equal to the quote okay so
56:22 - now let's run this and it's see starts
56:25 - giving us random quotes however you'll
56:26 - see that sometimes we'll get the same
56:28 - quotes and like pretty um close together
56:31 - because we don't have that other
56:32 - component that we're going to implement
56:33 - now okay so let's make this a little bit
56:36 - larger all right now what we want to do
56:40 - is we want to make sure we're not using
56:41 - the same quotes so to do that we're
56:44 - going to keep generating a new random
56:48 - quote or a new random index until we
56:51 - haven't yet used that so to do that
56:54 - we're going to make a Loop and we're
56:55 - going to say while
56:58 - true okay and then we're inside of curly
57:00 - braces here we're going to take all of
57:03 - this and we're going to paste it here
57:06 - now what we're going to do is we're
57:07 - going to generate this random index and
57:10 - we're first going to check and make sure
57:12 - that we haven't used it yet so we're
57:15 - going to go here and we're going to say
57:17 - if the used indexes do has okay so this
57:21 - is how you check if the set has a value
57:24 - we're going to say if it has the random
57:26 - index that we just generated then what
57:28 - we're going to do is use this continue
57:29 - keyword now notice that I didn't
57:31 - actually have to write the um what do
57:34 - you call it parentheses here or these
57:35 - curly braces the reason for that is
57:38 - because if you only have one thing you
57:39 - want to do with an if statement you can
57:41 - just write it directly to the right or
57:43 - directly below the if State uh
57:45 - definition you might not have known that
57:46 - in JavaScript but it's kind of a nice
57:47 - shorthand syntax anyways what I'm saying
57:50 - is okay if the used indexes has this
57:53 - random index it means we've used this
57:55 - quote before so we're just going to
57:57 - continue and what continue will do is
57:59 - simply bring us to the top of this Loop
58:01 - now this Loop is going to continue
58:03 - looping while this condition is true so
58:06 - I say while true so while this is true
58:09 - it's always going to be true we keep
58:10 - going through here and then if this is
58:13 - the case we're going to continue so just
58:14 - going to bring us up to the top of this
58:15 - Loop now you might be asking well
58:17 - doesn't that mean we're never going to
58:18 - exit the loop well as of right now yes
58:20 - however I'm going to show you how we can
58:21 - do that so if we are in a position where
58:24 - this does not have the random index what
58:28 - will happen is we won't continue which
58:29 - means we're going to continue down to
58:31 - these lines kind of a weird way to say
58:33 - that but we'll essentially advance to
58:35 - these lines if this condition is not
58:37 - true which then means down here I can
58:40 - say break and what break will do is
58:43 - break me out of this walloop so as soon
58:45 - as the break keyword is encountered you
58:47 - simply go to wherever the wall Loop is
58:50 - finished and you just continue there
58:52 - that that's all that does okay so it
58:53 - just gets you out of the loop if you
58:55 - have well true you're going to need a
58:56 - break to make sure you don't have an
58:58 - infinite Loop now the last thing we need
59:00 - to remember to do is to add the index we
59:03 - used to that set so we keep track of it
59:05 - so we're going to say used indexes. add
59:07 - and we are going to add the random index
59:11 - so what that's now doing is adding that
59:13 - to the set and telling us okay next time
59:14 - you try to generate a random index don't
59:16 - use this one because we just used it
59:19 - before all right we're almost finished
59:21 - with one more thing but I want to just
59:22 - show you that this is working so if we
59:24 - run through here still functioning
59:25 - however if we do this enough times
59:27 - you're going to see that we will
59:28 - actually get an error and no more quotes
59:30 - will be generated notice no more
59:32 - generated the reason why that's
59:34 - happening is because we've run out of
59:36 - quotes that we can pick from and right
59:38 - now the browser if I refresh you'll see
59:40 - it's actually in an infinite Loop so I
59:42 - need to close this out uh the reason
59:44 - it's an infinite Loop is because of
59:45 - something we implemented that I'm going
59:47 - to fix for us in a second so let's just
59:49 - go live again and we'll see if we can
59:52 - figure out what's going wrong here okay
59:55 - so let's have a look at this code and
59:57 - before I kind of answer the question
59:59 - here try to ask yourself or try to
60:01 - figure out let's zoom out a bit why did
60:04 - I just get that error where my browser
60:05 - was kind of Frozen like it wasn't
60:07 - generating any more quotes pause the
60:09 - video if you want to try to figure it
60:10 - out I'm going to go into the answer now
60:12 - so you'll notice what happens here is we
60:13 - have this while loop we say while true
60:15 - we generate this random index we then
60:19 - check okay well does it exist inside of
60:21 - the set if it does exist we're just
60:24 - going to try again so we could be trying
60:26 - quite a few times but eventually we're
60:28 - going to get an index that does not
60:30 - exist in the set right so then what
60:32 - happens is we will advance down here and
60:34 - we're going to grab the quote set it and
60:36 - then add it to the set now at some point
60:39 - in time what we'll happen is we will
60:41 - have exhausted all of the available
60:44 - indexes and we will have used all of
60:45 - them so what will then continue
60:47 - happening is we're going to be in this
60:48 - wall loop we're going to try to generate
60:50 - a random value we'll do that but no
60:52 - matter which one we generate it's always
60:54 - going to be inside of the set which
60:56 - means we're just going to continue doing
60:59 - this portion right here a ton right
61:01 - that's what's going to happen so how do
61:03 - we avoid that well the way we avoid that
61:05 - is right here before we go in the while
61:08 - loop we make sure we do actually have a
61:10 - quote that we can pick from so to do
61:13 - that we can say if the used indexes do
61:16 - size for a set you use size for an array
61:19 - you use length we're going to say if
61:21 - that's greater than or equal to
61:25 - the quote. length what that tells me is
61:29 - that we've used all of the quotes right
61:30 - if the number of elements which are all
61:32 - unique inside of the used indexes is
61:34 - equal to the length of my quotes that
61:36 - means we've used all them so what what
61:38 - do we do well we simply reset and we say
61:41 - used indexes do CLE now do CLE will
61:44 - simply remove all of the values from the
61:46 - set which now kind of sets this back at
61:48 - the beginning State and allows us to
61:50 - continually keep generating uh new
61:53 - quotes but now kind of right back from
61:55 - the beginning so now all of the quotes
61:56 - are available and we go through the
61:57 - exact same thing again once we use all
61:59 - of them then we can start to recycle
62:01 - them so this way you're only ever going
62:03 - to see the same quote uh in the number
62:05 - of quotes which is equal to the number
62:07 - of uh quotes that exist here I know
62:09 - that's a bit of a mouthful but that's
62:10 - kind of how this works so now if we
62:12 - start generating them you'll see that
62:14 - we're never going to get the same quote
62:15 - until we've exhausted all of them and
62:17 - then we'll get a random one and then
62:18 - same thing we won't get the same quote
62:20 - again until we've used all the other
62:21 - ones that exist all right so there you
62:24 - go that is the random quote generator
62:26 - getting a little bit more complex but
62:28 - hopefully you guys were able to handle
62:29 - that let me know what you think if you
62:31 - have any feedback for me and let's move
62:32 - on to project number four all right we
62:35 - are continuing project number four let's
62:38 - make a directory and let's make our two
62:40 - files main. HTML and
62:45 - index.js now for HTML you already know
62:48 - the drill if you watch the previous
62:49 - projects we're going to go a bit faster
62:51 - HTML colon 5 that is going to create for
62:54 - us this kind of template HTML file you
62:57 - do not need these two if for some reason
62:58 - that shortcut does not work you can
63:00 - simply type out what I have here let me
63:01 - zoom in a little bit let's set the
63:04 - document title this is going to be our
63:06 - timer SL stopwatch it's actually really
63:09 - more of a stopwatch so let's call it a
63:12 - stopwatch okay and inside of our body
63:15 - tag let's give an H3 that says stopwatch
63:20 - and now let's run our live server we're
63:22 - going to dispose of the old one and
63:23 - we're going to rerun this new one and
63:25 - you're going to see that stopwatch
63:26 - appears in our browser Okay so we've got
63:29 - the basic setup what we're going to do
63:31 - for the stopwatch is we're going to have
63:33 - some functionality that allows us to
63:35 - start stop and reset a timer that will
63:38 - appear on our screen now I just want to
63:40 - be clear I'm going again a bit faster in
63:42 - this one if it's too fast for you or too
63:44 - complicated go back and watch some of
63:45 - the previous projects because I'm much
63:47 - slower in Project 1 2 and three but as
63:50 - we go through I assume you've watched
63:51 - those or you're already experienced
63:53 - enough that I don't need to expl explain
63:54 - like the really really basic stuff okay
63:57 - so now that we have stopwatch what I
63:59 - need to do is start setting up the user
64:01 - interface now for the interface we are
64:03 - going to have something that shows us
64:04 - the time and then we're going to have
64:06 - three buttons start stop and reset so
64:08 - let's begin with the time I'm going to
64:10 - put this in an H1 tag we're going to
64:12 - give this an ID of time and we're going
64:16 - to start with 0 0 0 0 okay so this is
64:18 - just showing us the minutes and seconds
64:20 - we can do with hours if we want but for
64:21 - now we'll just do minute seconds and
64:23 - you'll see how you can adjust this to go
64:24 - as you know long as you want now we're
64:27 - going to have our buttons for our
64:29 - buttons we're going to have onclick for
64:31 - our onclick we're going to call a few
64:33 - functions which we will then write in
64:35 - the JavaScript which will handle when we
64:38 - press these buttons essentially so right
64:39 - now they're not ritten yet but we'll
64:40 - write them in a second so the first
64:42 - one's going to be start clock and then
64:45 - inside of the button we're going to have
64:46 - start okay let's copy this and paste it
64:50 - twice and just adjust these now to be
64:53 - stop
64:54 - and
64:56 - reset okay so now rather than start
64:58 - clock it's going to be stop clock and
65:01 - rather than start clock it's going to be
65:03 - reset clock Okay so we've got three
65:05 - different functions that we're going to
65:06 - need to write start stop reset now we
65:08 - need to link our JavaScript so we're
65:10 - going to say script source is equal to
65:13 - index.
65:15 - JavaScript and that's all we need that
65:17 - is our HTML so now you see we have start
65:19 - stop and reset we have our z00 we have
65:22 - our stop watchat heading and now we can
65:24 - go into index.js and we can do the fun
65:26 - stuff which is the
65:28 - JavaScript okay so for our JavaScript we
65:31 - need those functions so let's start by
65:33 - stubbing those functions out when I say
65:34 - stub that just means you write the
65:36 - function but you don't actually write
65:37 - the logic for it okay so we're going to
65:38 - say function start clock we're going to
65:42 - say function stop
65:45 - clock we're going to say function reset
65:50 - clock okay so now we have our three
65:53 - functions we're going to need to to
65:54 - write in a second now before we go any
65:56 - further there's a few variables that
65:57 - we're going to need here and I'll talk
65:58 - about how we'll actually do this timing
66:00 - component which involves using something
66:02 - known as a set interval now first we
66:05 - need to keep track of how many seconds
66:07 - have elapsed okay so we're just going to
66:09 - track how many seconds of elapse since
66:11 - we started the clock and then if we stop
66:13 - the clock we'll just stop counting the
66:15 - seconds pretty much and if we reset
66:16 - we'll reset them right otherwise we'll
66:18 - just keep adding one to it every second
66:21 - which will allow us to well have a
66:22 - stopwatch so let let's begin by having
66:25 - our variable and we're going to hold
66:26 - this seconds elapsed okay now this is
66:29 - going to be equal to zero because when
66:31 - we start the clock well 0 seconds have
66:33 - been elapsed and until you start it well
66:35 - 0 seconds have elapsed right we're then
66:37 - going to have something known as the
66:38 - interval now for now we're going to set
66:40 - this equal to null which just means
66:42 - we're kind of defining a variable and
66:43 - we're saying okay we're going to change
66:44 - this later but for now we're going to
66:46 - make it null null just kind of means
66:47 - nothing empty right undefined I mean
66:50 - it's a different value but in this case
66:51 - null is fine okay so we're saying second
66:54 - elapsed and notice we're using let when
66:57 - we use let that means that we can
66:58 - actually change this value later on as
67:00 - opposed to if we had con then we
67:02 - wouldn't be able to change it okay now
67:05 - we're going to grab the actual time uh
67:08 - kind of paragraph tag here or header tag
67:11 - so that we're able to modify it later so
67:12 - we're going to say cons time is equal to
67:15 - document. getet element by ID the ID of
67:20 - this was time and this is okay to be a
67:22 - constant because this does doesn't
67:24 - change just what's inside of it will
67:26 - change nice so now what we need to do is
67:29 - figure out well what are we doing when
67:32 - we're starting the clock stopping the
67:33 - clock
67:35 - Etc so to start the clock we'll go in
67:39 - here and we'll start writing this we
67:40 - need to create an interval now an
67:43 - interval is something that can run at
67:45 - any predefined kind of period of time so
67:48 - every second every two seconds every
67:50 - hour every 10 minutes whatever you want
67:52 - okay you can specify the time in Mill
67:53 - MCS which I'll show you and what it will
67:55 - do is call a function whenever that
67:58 - increment hits so every th milliseconds
68:01 - or one second we will increment the
68:03 - clock right so we'll say second elapsed
68:05 - plus equals 1 so to do this we're going
68:08 - to say interval is equal to set interval
68:12 - this is a function that's built into
68:13 - JavaScript so you can just write set
68:15 - interval and then what we do is we call
68:18 - a function which we'll write here in a
68:19 - second and we put the number of
68:20 - millisecond so we want to call this
68:22 - function in between so in this casee I'm
68:24 - putting a th and now we need a function
68:27 - to call so we're going to make a
68:29 - function we're going to say function
68:31 - timer like
68:33 - this okay and inside of timer all we're
68:36 - going to do is say second elapsed Plus+
68:39 - now plus plus simply means add one
68:42 - that's all it means it's equivalent to
68:43 - plus equal one it's equivalent to this
68:45 - equals second elapse plus
68:47 - one okay so we have second elapse Plus+
68:50 - and now what we do is we put timer just
68:53 - the name of the the function notice I
68:54 - don't call the function I just put the
68:56 - name of the function here as the first
68:58 - argument to the set interval function so
69:02 - what's going to happen now is when we
69:04 - start the clock we're going to set this
69:06 - variable interval to be equal to the set
69:08 - interval which calls this timer function
69:11 - every 1,000 milliseconds or every second
69:15 - the thing is if I do this now if I
69:17 - refresh and I run and I click Start
69:19 - you'll notice that nothing's actually
69:20 - happening because we're not updating
69:22 - this so what we need to do now is we
69:24 - need to update this every time we change
69:27 - the value of our timer or of the second
69:29 - elapsed okay so to do that we're going
69:31 - to make another
69:33 - function and we're going to call this
69:35 - set time now the set time function is
69:38 - simply going to be responsible for
69:39 - telling us how many seconds have elapsed
69:41 - in updating this value right here so all
69:43 - we can do in here just to keep this
69:44 - super simple for now is we'll say
69:46 - time.in HTML so let's go
69:50 - here is equal to and then this is just
69:53 - going to be time okay or sorry not time
69:57 - this is going to be seconds elapsed and
69:59 - now inside of the timer after we
70:02 - increment the seconds we're going to
70:03 - call the set time function so what
70:05 - happens now is okay we have the interval
70:07 - every second we call timer it adds one
70:10 - to the number of seconds we then call
70:11 - set time time goes here and it then
70:14 - changes this text to be equal to the
70:16 - number of seconds you're going to see
70:17 - what happens but let's run this out and
70:19 - you'll notice that it starts simply
70:21 - counting up right 1 2 3 four five
70:24 - however what will happen if we let this
70:26 - run long enough it's going to start
70:27 - giving us 61 62 63 it doesn't really
70:30 - look like that kind of stopwatch we're
70:32 - looking for we want it to be in that
70:34 - hour or in that minute second notation
70:36 - and also these buttons obviously don't
70:37 - work and when I click Start again you'll
70:39 - notice it starts counting even faster
70:41 - because we now have multiple intervals
70:43 - that are running so we got to fix all of
70:44 - that I'm going to show you how that
70:45 - works okay so first things first let's
70:48 - make it so that when we adjust this it
70:49 - actually looks proper how do we do that
70:52 - well we need to determine first of all
70:54 - based on how many seconds have elapsed
70:55 - how many minutes have elapsed and then
70:57 - how many seconds have elapsed so to
71:00 - determine the number of minutes we
71:01 - simply need to take the number of
71:02 - seconds we need to divide it by 60 and
71:04 - we got to figure out the even division
71:06 - of that right so we don't want something
71:07 - like 2.3 we just want 2 minutes and then
71:10 - the remainder we'll have as our seconds
71:12 - so we're going to say const minutes is
71:15 - equal to and this is going to be second
71:16 - elapsed divided 60 however again we
71:20 - don't want to have a decimal value which
71:22 - we're going to get right so so we want
71:24 - to put math.
71:26 - floor now we're not rounding we're
71:29 - flooring meaning we're going down to the
71:31 - nearest whole number because even if we
71:33 - have something like 1.99 999 minutes we
71:35 - don't actually have 1.999 minutes we
71:37 - have 1 minute and 59 seconds right or
71:40 - whatever the remainder value is which is
71:42 - what we'll calculate next so we always
71:44 - round
71:45 - down so next we're going to have const
71:48 - seconds now the number of seconds is
71:50 - simply equal to the second elapsed mod
71:52 - 60 now the modulus operator is the
71:55 - remainder operator this is the percent
71:56 - sign what this will do is give you the
71:59 - remainder after division by 60 so if we
72:01 - had something like 61 mod 60 it gives us
72:04 - one 62 mod 60 gives us two 59 mod 60
72:09 - gives us 59 because you cannot divide 59
72:11 - by 60 evenly so you get 59 as the
72:13 - remainder okay so now we have the number
72:15 - of minutes and the number of seconds
72:16 - what we need to do is format this into a
72:18 - nicely padded string that will appear
72:21 - here so right now naively you might say
72:23 - okay well Tim I remember you showed me
72:24 - this back tick trick if you look at the
72:26 - Tilda on your keyboard which is the
72:28 - squiggly line it should be on the same
72:29 - key as that back ticks kind of look like
72:31 - single quotation marks but they aren't
72:33 - typically in the top leftand corner of
72:35 - your keyboard what you can do is put a
72:37 - dollar sign and then two curly braces
72:40 - like this or an open and closing one and
72:42 - you can put minutes colon and then we
72:45 - can do the same thing here with seconds
72:48 - okay so we do minute col it seconds and
72:51 - what this is going to do now is take
72:52 - these numeric values and embed them
72:54 - inside of a string with a colon
72:56 - separating them when we call this set
72:58 - time function so now we're not quite
73:00 - done but watch what happens if I click
73:02 - Start you'll see we get 0 1 02 03 again
73:05 - still doesn't look great we need that
73:07 - leading and trailing zero which I'm
73:08 - going to show you how to get but this is
73:11 - a decent start and now again if we were
73:13 - to have this go up to 60 you'd see that
73:15 - it would start showing us the minutes
73:16 - now to prove that let's just make this
73:20 - 61 and let's go with start and then
73:23 - notice you get 1 minute 3 seconds 1
73:25 - minute 4 seconds Etc okay let's make
73:27 - that back to zero all right now that
73:30 - we've got this we've got a pad our value
73:32 - so padding the values simply means okay
73:34 - well we're going to look at the values
73:35 - and if they're not two digits then we're
73:37 - just going to add a leading zero right
73:39 - so if it's less than nine pretty much
73:40 - add a leading zero we can do this in a
73:42 - function so I'm didn't mean to do that
73:44 - but I'm going to say
73:47 - function pad
73:49 - start this takes in a value and what
73:52 - we're going to do is actually return
73:54 - something from this function this just
73:55 - means we get a value back when we call
73:57 - it so we're going to say
74:00 - return we're going to take our number
74:02 - because that's what's going to be passed
74:04 - inside of here and we're going to
74:06 - convert this to a string when we convert
74:08 - it to the string that allows us to use
74:09 - this method called pad start and for pad
74:13 - start we specify how many characters we
74:15 - would like the string to be in this case
74:17 - I would like the string to be two
74:18 - characters so I put two and then we put
74:21 - the character we would like to pad
74:23 - string with so now what happens is we
74:26 - take the numeric value convert it to a
74:28 - string and we pad it with a leading zero
74:30 - if it is not two digits long hopefully
74:34 - that makes sense so now for minutes and
74:36 - seconds we can simply just call these
74:39 - with pad start and that's going to
74:41 - return to us a string that has those
74:42 - padded zeros so we're going to say pad
74:45 - start like that so we're taking this as
74:48 - a value passing this into the function
74:51 - it's then returning to us a value that
74:53 - we will bed embed St inside of here in
74:54 - the string so if we go ahead and we can
74:57 - refresh this and we start you'll see now
75:00 - that we get a stopwatch that's a little
75:02 - bit more familiar and what we're
75:03 - actually looking for now the next thing
75:05 - we should look at at this point is what
75:06 - happens when you press Start multiple
75:08 - times because you'll notice if I click
75:09 - it it's just counting really really fast
75:11 - because it keeps making these new set
75:13 - intervals now that's not what we want
75:15 - what we would like to do instead is
75:17 - essentially clear the previous interval
75:19 - if we click start again and we want to
75:21 - also reset the timer so what we'll do is
75:24 - we'll say okay well if we had this clock
75:26 - right so if we've already started it so
75:28 - we're going to say if
75:31 - interval then we're just going to reset
75:34 - the clock and we'll write the reset
75:36 - clock function so sorry let me just
75:37 - scroll down here what I'm doing is I'm
75:39 - checking before I make this new interval
75:42 - I say okay well if the interval exists
75:47 - reset the clock resetting the clock
75:49 - should reset everything for us and then
75:51 - we will just redefine the interval here
75:54 - okay that's pretty much all it's doing
75:56 - inside of the reset clock what we're
75:59 - going to do is we're going to stop the
76:02 - clock we're going to set the seconds
76:04 - elapsed equal to zero and then we're
76:07 - going to set the time just so that it
76:09 - shows us 0 0 again and then inside of
76:12 - the stop clock we're going to say clear
76:14 - interval and we're going to clear this
76:17 - interval now I have some chaining of
76:19 - functions that's actually intentional
76:20 - cuz I want to show that to you in this
76:22 - project it's a bit of learning thing but
76:24 - you can see that what I'm doing again if
76:26 - the interval reset the clock so now we
76:29 - go to this function inside of this
76:31 - function when we reset the clock the
76:33 - first thing we got to do is stop the
76:34 - clock so when I click stop the clock I
76:37 - clear the interval now when I clear the
76:39 - interval all that does is just stop
76:41 - counting okay it doesn't change what's
76:44 - like being appeared here it just stops
76:46 - making this go up by one every time so
76:49 - that's what stopping does now after I
76:51 - stop I now reset the second elapse to be
76:54 - zero so that's resetting the clock value
76:56 - and then I set the time and the reason I
76:58 - set the time is so that we see that
77:00 - we've actually reset the clock back to
77:02 - zero okay because if you don't call this
77:04 - you're not going to see the update on
77:05 - the screen because that's what's
77:06 - updating the screen so now if we just
77:08 - press stop clock it doesn't actually
77:10 - show us anything different on the screen
77:12 - right it still stays at like seven or
77:14 - eight seconds or whatever is appearing
77:16 - it just cleared the interval which now
77:17 - means if we start timer again it doesn't
77:21 - reset it just starts to count so let's
77:24 - look at this if I click
77:26 - Start starts counting if I click stop
77:29 - doesn't reset just stops counting I
77:31 - click Start then it starts counting from
77:33 - the beginning now actually that gives me
77:36 - reason to want to do something else so
77:38 - let's remove inside of start clock if
77:42 - interval reset
77:45 - clock and instead of that for start
77:50 - let's actually just clear the
77:54 - interval interval so we can actually
77:57 - say how do I want to do this here yeah
78:01 - I'll say
78:02 - if
78:04 - interval stop clock and then I'll just
78:07 - make the interval again now I know this
78:09 - seems a little bit weird I'm going to
78:10 - explain this but this is actually
78:12 - something I just caught while I was
78:13 - doing it so I'm starting
78:16 - okay I'm stopping and when I start it
78:19 - starts counting again okay so the reason
78:21 - I did what I just did there is don't
78:23 - want when I click Start for it to reset
78:26 - and then start counting I just want it
78:27 - to resume what it's at and I only want
78:29 - the reset button to reset it back so
78:32 - what I did instead is I said okay well
78:33 - if an interval already exists let's
78:35 - remove that interval so we're saying
78:37 - clear interval and then we'll just set
78:39 - it again that way we never have like two
78:42 - three four five intervals going at the
78:44 - same time we've just removed the
78:45 - previous one and then we've reset it so
78:47 - we've just kind of continued it on
78:49 - that's what I'm doing when i'm start the
78:50 - clock so whether I'm starting at zero or
78:52 - whether I'm starting with an interval
78:53 - already it doesn't matter right we just
78:56 - keep counting so if you press start when
78:58 - it's already started then it just keeps
79:00 - going now when I click on stop again
79:03 - it's going to stop if I click on start
79:05 - it will start I click reset brings me
79:07 - back to zero I can start and I can reset
79:09 - while I'm started and you guys get the
79:11 - idea okay so that is the stopwatch
79:14 - hopefully that was clear all of this
79:16 - code will be available from GitHub now
79:18 - let's move on to the last project so let
79:20 - us now move on to project number five
79:23 - now this is the most advanced project by
79:26 - far I'd probably classify this more an
79:28 - intermediate project but if you've made
79:30 - it through all the other ones and this
79:31 - one is kind of a natural stepping stone
79:33 - so I think you'll still be able to
79:34 - follow along with it quite fine I just
79:36 - want to be clear that I'm going to go
79:37 - again even faster so make sure you watch
79:40 - the other projects if you haven't
79:41 - because anything I explained there I'm
79:43 - not really going to recover here so
79:45 - let's begin by making a folder for
79:47 - project 5 and inside of here let's call
79:51 - this main. HTML
79:53 - and let's make another file and this
79:55 - will be index. JavaScript so we've got
79:58 - two files main. HTML index.js we're
80:01 - going to set up our HTML boilerplate at
80:03 - this point I think you've heard me say
80:05 - this many times so I don't need to
80:06 - repeat myself just get the HTML up and
80:09 - running for the name we are going to
80:11 - call this the to-do list remember this
80:13 - is the persistent to-do list which will
80:15 - remember the items that we had we're
80:18 - going to stop the live server from our
80:20 - previous project and we're going to
80:21 - restart it for this this one which will
80:23 - open a blank browser tab now inside of
80:26 - our body we're going to link our script
80:28 - we'll just do this first and we'll say
80:31 - source is equal to index.js to get that
80:34 - sorted out we're going to have a H1 tag
80:37 - this is going to be the to-do list we're
80:41 - then going to have an H2 tag and this is
80:44 - going to be the items list so for the
80:46 - to-do list we have two components we
80:48 - have something that specifies all the
80:50 - items in the list and then we have
80:53 - kind of a place where we're able to
80:54 - actually add the item right so for items
80:57 - we're going to create a div div stands
80:59 - for division and it's something where we
81:00 - can actually just Place items inside of
81:03 - so I can take all my items and kind of
81:05 - render them inside of this div so we're
81:07 - going to say ID is items so we're able
81:11 - to access that we're going to create a
81:12 - very basic input so that someone can add
81:15 - an item so we're just going to
81:17 - say input like that remember this is a
81:20 - self- enclosing tag you don't need the
81:22 - sep for closing tag the ID is going to
81:24 - be the item input the type is going to
81:28 - be the text and the placeholder is going
81:32 - to be to add an
81:35 - item okay save that it should appear on
81:38 - the screen next we're going to make a
81:40 - button and the button is going to say
81:42 - add item and then for the
81:46 - onclick we're going to call the function
81:48 - add item like that okay that is all of
81:52 - our HTML zoom out so you can see all of
81:54 - it again we have our header we have the
81:57 - h2 tag for the items we have the div
82:00 - this is where we're actually going to
82:00 - render all of the dynamic items so when
82:02 - we do something like hello and we click
82:04 - add item it's going to appear inside of
82:06 - the items list okay then we have the
82:09 - input so that we can add the item and
82:10 - the button obviously which will take
82:12 - that and add it to the screen so now
82:14 - let's go to our JavaScript and let's
82:16 - start on so let's start first of all
82:17 - understanding what it is that we need to
82:19 - do and then writing this out this is
82:21 - going to be a little bit longer so so
82:22 - it's worth having a bit of a plan for
82:24 - what we want to do here so what we need
82:26 - to understand first of all is that we
82:28 - want to store these items persistently
82:30 - that means that we need to have the
82:31 - ability to well store them we also need
82:33 - to have the ability to load them now one
82:36 - thing to consider is that we're going to
82:38 - probably have an array of items right
82:41 - this is the order in which we have our
82:43 - individual items we're going to have the
82:44 - ability to remove items and we need to
82:47 - show the reflection of our items on the
82:49 - screen so when we first load them all we
82:51 - got to render them on the the screen
82:53 - means we got to actually put them there
82:55 - and then when we remove them we got to
82:56 - remove the correct item and then kind of
82:58 - rerender them onto the screen so there's
83:00 - a few things we got to do right we got
83:02 - to save items we got to load items we
83:03 - got to render items and we have to add
83:05 - and we have to remove items so what we
83:07 - can do is start writing out some of the
83:09 - core function names so we know those
83:11 - operations and we can tackle them one at
83:13 - a time so we're going to say let items
83:15 - is equal to an empty array we'll get
83:18 - into some other things in a second but
83:20 - for now we understand that we're going
83:21 - to have items ins not of an
83:23 - array we now know we also need to load
83:26 - items so we'll write a simple function
83:28 - so that we remember that that's
83:29 - something we need to do we also know we
83:31 - need to render the items onto the screen
83:33 - so we'll write a function for that we
83:36 - know that we need to save the items so
83:39 - let's do that and we know we need to
83:42 - remove and add so we're going to say
83:43 - function add
83:45 - item and
83:49 - function remove
83:51 - item okay so that's kind of that the
83:56 - first thing I think makes sense for us
83:58 - to do is to figure out how to display an
84:01 - item on the screen once we know how to
84:03 - display an item then it's a little bit
84:05 - easier for us to understand loading
84:07 - saving adding removing Etc but we need
84:09 - to say okay let's say we had some items
84:10 - in here right that we wrote ourselves
84:12 - how do we show them on the screen
84:14 - dynamically because we might have one
84:15 - item might have five items we don't know
84:18 - we're going to have to kind of loop over
84:20 - all of them and show them on the screen
84:22 - so for render items what we need to do
84:25 - first of all is understand where do we
84:26 - want to put the items well I want to put
84:27 - them inside of this div so I need to
84:29 - access that div so we're going to say
84:31 - const items
84:34 - div is equal to document. getet element
84:38 - by ID and this is
84:41 - items now let's just take this and put
84:43 - this at the top of the
84:45 - screen and let's start writing our
84:47 - render items function so inside of
84:50 - render items the first thing I'm going
84:51 - to do is I'm I'm just going to clear
84:53 - this div to make sure that any other
84:55 - items that were in there I get rid of
84:57 - because I'm just going to read them in
84:58 - so kind of every time I'm rewriting all
85:00 - of the items it's not the most optimal
85:02 - thing in the world but it's totally fine
85:04 - for this example so I'm going to say
85:05 - items div. innerhtml is equal to null
85:10 - and all that's doing is just removing
85:11 - everything that's inside of the items
85:14 - div so now we've got a fresh slate and
85:16 - we can start adding our items now what I
85:18 - want to do is I want to Loop through all
85:20 - of my items so if I have one item I want
85:23 - to add one item if I have 10 I want to
85:24 - add 10 right I want to Loop over them
85:26 - and I want to create what that item is
85:28 - going to look like and then put that
85:29 - inside of the div so we start with a for
85:32 - Loop and a for Loop is what you use when
85:34 - you know the number of times that you
85:35 - want to iterate a while loop is what is
85:37 - what you use when you don't know the
85:39 - number of times you want to iterate so
85:40 - in this case we know the number of times
85:42 - it's equal to the number of items so I'm
85:44 - going to say constant and inside of
85:46 - square brackets I'm going to say idx
85:47 - which stands for index and item of
85:51 - object dot entries I'm going to explain
85:54 - this don't worry and then items and I'm
85:56 - going to put a set of square brackets
85:58 - now what this does is it will take all
86:01 - of these items it will essentially give
86:03 - us pairings now the pairings are going
86:05 - to look like this zero item one one item
86:11 - two what that means is that the index
86:14 - here is going to be equal to the index
86:17 - corresponding with the item which will
86:19 - be stored in this item variable so when
86:21 - you kind of do object. entries here and
86:24 - you pass an array it just allows you to
86:26 - Loop through and to access both the
86:28 - index and the item at the same time
86:31 - which is what we want there's other ways
86:32 - to do this but I wanted to show you this
86:33 - kind of neat syntax in case you haven't
86:36 - seen it now what I want to do here is
86:38 - for now we're just going to create some
86:40 - text and this text will just be whatever
86:42 - the item actually is and we'll just add
86:45 - that inside of the div but later we're
86:48 - actually going to add another div inside
86:50 - of the div that's going to contain the
86:52 - text content as well as a button okay so
86:56 - let's look at how we do this we're going
86:58 - to start by saying const text is equal
87:02 - to
87:03 - document. create
87:06 - element now we can create an element in
87:08 - JavaScript and then put that on the Dom
87:11 - the Dom is essentially just the
87:13 - interface that you see over here and by
87:15 - the way oh yeah the two list is already
87:17 - appearing okay so that's good so we're
87:18 - going to create this element P now we
87:20 - have this element though it's like
87:22 - doesn't really have anything it doesn't
87:23 - have any text it doesn't have any
87:24 - styling so what we're going to do is
87:26 - we're going to set the contents we're
87:27 - going to say text. text content is equal
87:32 - to the item okay so now we've created a
87:35 - paragraph tag we've set the text content
87:39 - and now what we want to do is add it
87:40 - into this div so to do that we say the
87:43 - items
87:45 - div. append child and then we just
87:48 - simply add the text so what this does
87:52 - is it creates the text element and then
87:55 - it just adds it inside of the div as a
87:57 - child so we can keep adding different
87:59 - text elements now we'll use the other
88:01 - components of this later but for now I
88:02 - just want you to see how this works so
88:04 - I'm going to go hello world 1 2 3 I'm
88:08 - just going to call this
88:09 - function and you'll see when I save that
88:12 - we get two items appearing inside of our
88:15 - div okay so that's great that's how we
88:18 - dynamically render items now the thing
88:21 - is I want to actually render some more
88:23 - complex elements here because I want
88:25 - each item to have a button that says
88:27 - remove so I need to kind of add inside
88:30 - of here not just the text but also the
88:32 - button in order for me to do that though
88:34 - I need to have those inside of one
88:36 - element that I add to the div so what I
88:39 - really want is something that looks like
88:42 - this where I have a div that has a
88:45 - paragraph tag and then I have a button
88:48 - like this right that says move so I need
88:52 - to create this programmatically and then
88:55 - add this whole thing this whole div as a
88:58 - child inside of the items div it also
89:00 - gives me some more flexibility with
89:02 - styling which we'll see in a second so
89:03 - we'll keep the text tag but before we
89:05 - make the text tag we have to make like a
89:07 - container that's going to be storing all
89:10 - of this stuff that we want to put on the
89:11 - screen so I'm going to say cons
89:14 - container is equal to document.
89:19 - create element and we're going to create
89:21 - a
89:22 - div then we're going to say the
89:25 - container. style. margin bottom this
89:29 - just means we're going to add a bit of
89:30 - space at the bottom is going to be equal
89:32 - to 10 pixels as a string just that I
89:35 - separate these different containers a
89:36 - little bit if you don't have this you'll
89:38 - see It'll get really squished together
89:39 - so we make our container we make our
89:41 - text now we want to make our button so
89:43 - we're going to say const button is equal
89:46 - to document. create element we're going
89:51 - to create a button and now for the
89:53 - button we're going to say button. text
89:57 - content is equal
89:59 - to delete okay and now we want to set
90:03 - the onclick for the button now the
90:05 - onclick for the button is going to call
90:08 - this remove item function which is going
90:11 - to remove the item from our list however
90:14 - in order to remove the item from the
90:16 - list we need to know the position in the
90:18 - list where the item exists so that's why
90:21 - we will have access to this index so
90:23 - what we're going to do is for remove
90:25 - item we're just going to specify that we
90:26 - want to take the index of the item that
90:28 - we want to remove and that now means
90:30 - that when we want to call this function
90:32 - we need to pass the index so what I'm
90:34 - going to do is I'm going to say button.
90:36 - onclick is equal to and then what I'm
90:39 - wanting to do here is I want to call the
90:42 - remove item function and I want to pass
90:45 - the index of this specific element it's
90:48 - very important that we have the index
90:49 - because we're dynamically rendering
90:51 - different elements so for each one of
90:53 - these elements we need to have something
90:55 - that identifies where it is on the
90:57 - screen right or what position in the
90:59 - list it is we don't delete the wrong
91:01 - element so that's why we're passing the
91:03 - index here to this function the problem
91:06 - with this is when we see this line here
91:09 - JavaScript will actually call this
91:11 - function for us it's different than
91:14 - inside of here so notice here when I
91:15 - have the unclick I actually write the
91:17 - call right which is the parenthesis in
91:19 - this case this only actually gets called
91:23 - when we click the button here as soon as
91:26 - JavaScript Encounters this statement so
91:28 - even if the button has not been clicked
91:30 - it calls this function which will
91:31 - automatically delete the item which we
91:33 - don't want so what we need to do instead
91:35 - is wrap this in a function that then
91:37 - calls this function a little bit
91:39 - complicated hence why I left this for
91:41 - the last project we're going to use this
91:43 - Arrow function notation so what we do is
91:45 - we put a set of parentheses we put this
91:47 - Arrow which is the equal sign and then
91:49 - the angle bracket and then we call
91:52 - remove item now what this essentially is
91:54 - doing is wrapping the call to this
91:57 - function in another function so it's a
92:00 - bit difficult for me to explain this
92:02 - entirely but what we're essentially
92:04 - doing is we're saying okay we're going
92:05 - to have a
92:06 - function that calls this function so
92:09 - that means this whole thing here right
92:12 - when we call this so if I were to do
92:14 - this this actually valid syntax by the
92:16 - way but if I did this then it calls this
92:18 - function which in turn calls this
92:20 - function so the point of me doing that
92:23 - is that now when we have the onclick
92:25 - event it calls this function which then
92:28 - calls this function so that we don't
92:30 - call this before we actually want to be
92:32 - calling it I know it's a little bit
92:34 - confusing I'm hoping it's clear you guys
92:36 - can let me know in the comments if you
92:38 - have any questions about this kind of
92:39 - wrapper syntax but this is a unique
92:41 - thing you should know about and that
92:42 - you're actually going to use quite a bit
92:44 - in
92:44 - JavaScript okay so that removes the item
92:47 - for us now what we want to do is we want
92:49 - to take the button and take the text and
92:51 - we want add that into the container and
92:53 - then we add the container into the div
92:55 - so we say
92:58 - container do append child and we're
93:01 - going to append the text and then we're
93:03 - going to say container. append
93:07 - child okay and then we're going to
93:09 - append the button if I can type this
93:12 - correctly and then rather than appending
93:14 - the text here we're going to append the
93:16 - container into the div so now let's
93:20 - refresh and I guess we're getting some
93:23 - kind of error oh no we just didn't call
93:24 - this function so let's call render items
93:27 - and you'll see now that we get our
93:29 - containers that contain the item and the
93:32 - button now when we press the button it
93:34 - doesn't do anything but that's fine you
93:36 - get the idea okay so that's render items
93:40 - now the thing is we want this delete to
93:43 - be appearing to the right side or to the
93:45 - left side we don't want it below so in
93:47 - order to fix that we're going to use a
93:48 - display property on our text now you may
93:52 - not be aware of this but every element
93:54 - in HTML is either a block or an inline
93:57 - element a block element means that it
94:00 - will actually take up its own uh row
94:03 - inside of the document and any element
94:06 - you put after it's going to be on the
94:07 - next row so in this case paragraph tags
94:10 - P tags are block elements meaning that
94:14 - anything you render after them goes on
94:16 - the next line by default same with
94:18 - header tags right these are block
94:20 - elements whereas something like an input
94:22 - tag or a div or a span these are inline
94:25 - elements okay which means anything you
94:27 - add just goes in the same row inline now
94:30 - we can actually change the display type
94:32 - of elements with their style property so
94:34 - I can say
94:35 - text. style. display and if I change
94:39 - this to inline and we actually call
94:44 - render
94:45 - [Music]
94:46 - items you'll see now that our delete
94:50 - goes after the text now it's not ideal
94:53 - because there's no spacing I'll show you
94:54 - how we add that in a second but you can
94:56 - see that I've changed it from inline
94:58 - whereas before it was block if we change
95:00 - it back to block then we get what you
95:02 - saw before so kind of an interesting
95:03 - thing you might not have known about now
95:05 - what we'll also just do here is we'll
95:06 - say
95:07 - text do style. margin right and we'll
95:11 - just make this equal to 10 pixels so we
95:13 - just add a bit of spacing between this
95:15 - and the button we also of course could
95:16 - put the buttons on the left side if we
95:18 - want them to be lined up vertically
95:19 - there's a bunch of things you could do
95:20 - here but in this case this is totally
95:22 - fine okay so there you go we have now
95:25 - everything we need to render our items
95:27 - so now that we have the ability to
95:28 - render the items we want to be able to
95:30 - add them and to delete them now actually
95:33 - let's start with delete because we
95:34 - already kind of have that hooked up so
95:36 - to remove an item all we have to do is
95:38 - remove it from the list or from the
95:41 - array and then just rerender the items
95:43 - on the screen so to do that we say
95:45 - items. splice now splice will simply
95:49 - remove an element at a specific index so
95:53 - what I can do is say SPL idx and then
95:55 - one now what this is saying is okay well
95:58 - what element do you want to remove I
96:00 - want to remove the element that exists
96:02 - at this particular index and then one is
96:05 - saying how many elements do you want to
96:06 - remove from this index we just want to
96:08 - remove one okay so you can see it says
96:10 - start and then the delete count so we're
96:12 - deleting one element and we're doing it
96:15 - at this index you could delete multiple
96:17 - if you want so that's how you remove an
96:19 - item from the array now what we're doing
96:23 - after this is updating the screen by
96:26 - rendering the items so if we refresh
96:29 - this now and I click on delete you can
96:31 - see we delete that item let's refresh
96:33 - delete 1 2 3 we delete that item okay so
96:35 - it deletes the correct item obviously
96:38 - this is not being persistently saved but
96:40 - we're going to get to that in a second
96:41 - okay so we've now removed now we want
96:43 - the ability to add so let's get rid of
96:45 - the already existing items
96:47 - here and for render items we we can now
96:51 - remove that and we can just do that when
96:53 - we add an item so to add an item we want
96:56 - to get whatever is inside of this input
96:58 - box and we just want to add it as an
97:00 - item so we're again going to go to the
97:01 - top of our program we're going to say
97:03 - const the input is equal to document.
97:07 - getet element by ID this is going to be
97:10 - the
97:11 - input item item input what did I call
97:15 - this let's see item input okay so let's
97:17 - change this back to be
97:19 - item input
97:21 - okay and now what we're going to do for
97:23 - add item is we're going to get the value
97:24 - of that so we're going to say cons value
97:26 - is equal to the input.
97:29 - value what we're now going to do is add
97:31 - that so we're going to say first of all
97:33 - if not value so if you didn't give us
97:37 - any value we're not going to add an
97:38 - empty string to the list so we'll just
97:41 - say
97:42 - alert and then this is going to say you
97:45 - cannot add an empty
97:49 - item and then we can just return so when
97:52 - we return early from the function we no
97:54 - longer will execute any lines beneath it
97:56 - so this is called a naked return some
97:58 - people don't like it but in JavaScript
98:00 - it's fine and this is essentially saying
98:02 - okay as soon as you hit this just get
98:03 - out of the function we don't need to
98:05 - give any value back but we're just going
98:07 - to egit the function as soon as this uh
98:09 - keyword is encountered then down here
98:11 - we're going to say items. push and we're
98:14 - going to push the value which is
98:16 - whatever they typed into the input field
98:19 - and we're going to rerender the items by
98:21 - calling the render items function then
98:24 - lastly we're going to say the input.
98:28 - value is equal to an empty string so we
98:31 - clear whatever they had typed so let's
98:32 - go here and let's add item
98:36 - one and you can see it gets added we can
98:38 - add item two and you can see that I can
98:40 - delete the items as I did before if I
98:42 - refresh though of course they go away
98:44 - okay so now we need the ability to save
98:47 - the items and to load the items and then
98:50 - we are pretty much done
98:51 - so what we're going to do here is use
98:53 - something known as local storage so just
98:55 - to give you a bit of a primer on local
98:57 - storage this is essentially storage
99:00 - inside of your browser so it's stored on
99:02 - your computer and a bunch of websites
99:04 - will use this to keep track of
99:05 - information that can make it more
99:07 - convenient for you as a user now you
99:09 - should never store any sensitive data in
99:11 - local storage because it can be accessed
99:14 - by pretty much anyone that's utilizing
99:16 - the computer and there is ways that you
99:17 - can store data on the server side but in
99:20 - our case we're going to be storing it on
99:21 - the client side which is user facing
99:23 - right it's what you're using so we're
99:25 - just going to store all of the items
99:27 - that you had and we'll reload those
99:30 - every time you open up this website
99:32 - again okay now when we use local storage
99:35 - we can't store anything we can only
99:37 - store specific values so we can store
99:40 - like strings numbers Etc in our case we
99:43 - have a list or an array so what we're
99:45 - going to actually have to do is convert
99:47 - that into a string and then once it's a
99:50 - string we're able to store it so we're
99:52 - just going to go into save items and I'm
99:54 - just going to write this out and then I
99:55 - can kind of walk you through it so what
99:57 - we're going to do is say const string
99:59 - items is equal to Json in all capitals
100:03 - do stringify and we're going to
100:06 - stringify the items array so it just
100:09 - means we're converting it to a string
100:11 - okay so we're just taking the list
100:12 - converting it to a string now that it's
100:14 - a string what we can do is we can store
100:17 - it in local storage so we can say local
100:19 - storage which is the built-in variable
100:21 - that you can write do set item and we're
100:25 - going to set an item which is equal to a
100:27 - variable I'm going to Define here so I'm
100:29 - going to say const storage key is equal
100:33 - to and then this is essentially what
100:35 - you're going to use to access the
100:38 - storage that you're using so you can set
100:40 - as many keys as you want you just make
100:42 - them unique so I'm going to make a key
100:44 - called items and I'm saying okay well
100:46 - I'm going to set the key which is the
100:48 - storage key in this case it's items and
100:51 - I'm going to make it equal to the string
100:55 - items now what this will also do is it
100:57 - will override any key that already
100:59 - existed so if I already had something in
101:02 - local storage called items I'm going to
101:04 - change what its value was to be this new
101:06 - value so that I'm always keeping the
101:08 - most upto-date version of my items okay
101:13 - now in terms of loading items you kind
101:15 - of just do the same thing but in Reverse
101:16 - so we're going to say const old items is
101:19 - equal to local storage this time it's
101:21 - going to be get item and now what item
101:24 - are we getting well we're getting
101:25 - whatever the item is associated with the
101:26 - storage key however this is a string so
101:30 - what I need to do now is convert this
101:32 - into an array that I can then use in
101:34 - JavaScript so I'm going to say first of
101:37 - all if we actually have anything because
101:39 - it's possible that we don't have any
101:41 - items stored so if I do have some items
101:43 - stored which is what I'm checking here
101:45 - then I'm going to say that my items
101:48 - which is this variable right here is
101:50 - equal to and this is going to be
101:52 - json.parse
101:54 - and then old items now whatp parse is
101:57 - going to do is it's going to read
101:59 - through this and it's going to convert
102:00 - it to a JavaScript object in this case
102:03 - the JavaScript object is an array it
102:05 - could be an object it could be a
102:06 - different type but it's just going to be
102:08 - uh an array okay so it's going to give
102:10 - us an array that contains all the
102:12 - different items from that string that we
102:14 - put in the storage then we're simply
102:17 - going to render the items so what we
102:19 - want to do now is we just want to call
102:21 - load load items as soon as the document
102:25 - has loaded so that as soon as we kind of
102:28 - open up this website we load the items
102:30 - and then we'll call Save items anytime
102:32 - we do something different to the items
102:34 - we can actually do that first we'll go
102:35 - down here and we'll say save items so
102:37 - we're going to save items after we add
102:39 - an item and we're going to save items
102:42 - after we remove an item so if we remove
102:44 - or add the only two operations we can
102:45 - perform on the items then we're just
102:47 - going to save it okay now though we want
102:50 - to call load items so we're going to say
102:52 - document. add event listener and The
102:57 - Listener is going to be the
102:59 - Dom content loaded okay and then we're
103:03 - going to say load items now let me just
103:06 - explain what I did because this might be
103:07 - a little bit confusing so what we're
103:09 - doing here is we're adding an event
103:10 - listener to our HTML document and we can
103:13 - listen for different types of events in
103:15 - this case the type of event we're
103:16 - listening for is the Dom content loaded
103:19 - which means it's actually load loed all
103:21 - of the HTML onto the screen as soon as
103:23 - it does that we're going to call the
103:25 - load items function so again we don't
103:28 - actually call it we just put the name of
103:29 - the function and then this will
103:32 - automatically call it for us now you'll
103:34 - see that I have two items popping up
103:36 - because I already had them stored in
103:37 - local storage for this exact project but
103:41 - uh we can delete them and when I delete
103:43 - them now and I refresh like it'll be
103:44 - persistent okay so that's it this is the
103:47 - finished project and I just want to show
103:48 - you it works so we'll say hello World
103:51 - We'll add that before if we were to
103:52 - refresh it would have gone away because
103:54 - it wasn't being persisted but
103:56 - now it's being persisted right so if I
103:59 - refresh it's still there if I delete it
104:01 - and now I refresh we get the updated
104:03 - version so I just wanted to quickly show
104:04 - you how to use local storage there a lot
104:06 - more you can learn about it but the
104:08 - basics is you can assign a string key to
104:10 - some kind of value in this case we're
104:12 - using a string and that's how we can
104:14 - store our different items and we can
104:15 - retrieve them whenever we rerun this
104:18 - code so that's pretty much it for this
104:21 - project all of this code will be
104:23 - available from the link in the
104:24 - description in case it's a bit confusing
104:26 - or you want to reference it I realize
104:28 - that this is a bit beyond a beginner
104:30 - project but it is Project five the most
104:32 - difficult one so I wanted to give you
104:33 - something a little bit more advanced if
104:35 - you like JavaScript definitely let me
104:38 - know in the comments down below I do
104:39 - have an entire course it's with course
104:41 - careers that teaches JavaScript go and a
104:44 - ton of other Advanced programming
104:46 - features with the goal of helping you
104:47 - land a job we had a lot of success there
104:49 - if you guys want to check it out you can
104:51 - do that from the link in the description
104:52 - or techwith
104:54 - .n/ if you guys enjoyed the video make
104:57 - sure to leave a like subscribe to the
104:58 - channel and I will see you in the next
105:01 - [Music]
105:07 - one