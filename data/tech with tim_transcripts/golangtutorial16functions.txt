00:02 - [Music]
00:06 - hello everybody and welcome back
00:09 - so in this go length tutorial we're
00:10 - gonna talk about functions now functions
00:12 - are very important for any programming
00:14 - language and especially in golang so
00:17 - let's talk about what a function is and
00:19 - then I'm gonna go through a bunch of
00:20 - examples and in the next video in this
00:22 - series we'll actually get into advanced
00:24 - examples with functions so just keep in
00:26 - mind that if I don't cover everything
00:27 - here it's probably coming in the next
00:28 - video okay so what is a function well I
00:32 - would say that the easiest way to define
00:34 - a function is a block of reusable code
00:36 - seems pretty vague but that's really all
00:38 - a function is it's this block of code
00:40 - that you can reuse as many times as
00:43 - you'd like and you can reuse it because
00:44 - you can call a function you can pass a
00:47 - value to a function and a function can
00:49 - return a value back to you the most
00:51 - common example of functions I like to
00:53 - use is something like the absolute value
00:55 - function so what is the absolute value
00:57 - function do well it takes some value X
00:59 - and returns to you the absolute value of
01:03 - X that is what that function does now
01:05 - this is reusable because I could pass in
01:08 - any value so I can pass in negative 5
01:10 - and I would return to me the absolute
01:11 - value of negative 5 which is equal to 5
01:14 - this is an example of a function it
01:16 - takes one value in and it spits one
01:18 - value out now there is some functions
01:20 - that don't take any values in that's
01:22 - totally fine you could have a function
01:24 - that just prints something to the screen
01:25 - you could have a function that takes
01:27 - something in but doesn't return a value
01:29 - so maybe it takes the value X and rather
01:32 - than returning that value it prints it
01:34 - to the screen this will make a lot more
01:36 - sense as we get into the examples but I
01:37 - just want you to think about the keyword
01:39 - function and what that really means
01:41 - because that's gonna be important when
01:42 - we make functions to think about what
01:44 - this block of reusable code is doing how
01:47 - we should name it is returning things as
01:49 - it taking values but let's get into that
01:50 - now so the first example of a function
01:53 - that we've seen in all of these videos
01:54 - is function main now what is this this
01:56 - is simply a function that does not take
01:58 - in any values it does not return any
02:00 - values it simply does whatever is inside
02:03 - of these brackets here so this is the
02:05 - entry point for our application and we
02:07 - know that we've had two min right we'd
02:09 - have to have been writing almost all of
02:10 - our code inside of this function so far
02:13 - and what
02:13 - ever happens in here just runs and that
02:15 - execute is fine now we can actually make
02:17 - our own functions I'm gonna show you how
02:19 - we can do that so I'm gonna write
02:21 - function I'm just gonna say test like
02:23 - that and do my square brackets or my
02:26 - squiggly brackets so now I have a
02:27 - function called test doesn't do anything
02:30 - right now but I've defined a function
02:31 - test and inside what I'm gonna do is I'm
02:33 - gonna say FM t dot println so let's put
02:38 - our quotation marks I cannot type today
02:40 - let's do a test now this function test
02:43 - is just sitting here nice perfect
02:45 - nothing wrong with it the only problem
02:47 - is right now if I go ahead and run my
02:49 - code so go run tutorial dog go nothing's
02:53 - gonna happen there's gonna be no output
02:55 - from my program and you can see that
02:56 - down here nothing happened that's
02:58 - because this main function ran but it
03:01 - didn't automatically run this test
03:02 - function for me
03:03 - so how do I call a function how do I
03:05 - actually get this function to work well
03:07 - what I do is I simply write the name of
03:08 - the function followed by two parentheses
03:11 - like this now sometimes actually I won't
03:14 - even go into the example I so to say
03:16 - there but this is how you call a
03:17 - function you simply put the name of the
03:18 - function you put two parentheses
03:20 - afterwards and then sometimes there's a
03:22 - few other things you need to do but for
03:23 - our basic example this is how we call it
03:25 - now what this means is I am telling this
03:28 - function to run so just do whatever is
03:30 - inside your function that's what that's
03:32 - saying so when we hit this line it will
03:34 - run whatever's in test you can think of
03:35 - it as like from line 10 we jump to line
03:37 - 5 and we run whatever's inside of there
03:40 - so let's actually go and run this and
03:42 - see what happens is now that we call
03:43 - test there we go we get the ball you
03:45 - value test print it out
03:47 - now the reason functions are great is
03:49 - because I can reuse them and call them
03:51 - multiple times so look at this I can
03:54 - call test again a second time and look
03:57 - what's gonna happen test prints out
03:59 - twice so I call test once it runs
04:02 - through the function and then boom we're
04:04 - done we come down to this line line 11
04:06 - we call it again and it runs great
04:08 - that's the basics of functions and how
04:10 - you call them now let's talk about
04:11 - parameters and return types so just like
04:14 - the absolute value function that I
04:15 - showed you at the beginning functions
04:17 - can take in values so what I mean by
04:19 - taking values is they can accept a
04:21 - parameter now a parameter is simply a
04:24 - variable that or a piece of data
04:27 - something that we give to the function
04:28 - when we call it sometimes they can be
04:31 - optional they may be mandatory we'll
04:32 - talk about that later but let's make a
04:34 - parameter X that we passed to test so if
04:37 - I want to tell my code that when we pass
04:40 - a bount when we call test we need to
04:42 - pass one value for the parameter X and
04:44 - what I do is I simply write the name of
04:46 - the parameter that I want here so the
04:48 - value that I'm expecting and then I
04:50 - write the type of what this parameter
04:52 - should be so if I want this to be an int
04:54 - value if I want them to give me an
04:55 - integer then what I would do is type int
04:57 - directly after the variable so X int
05:00 - like that now what this is going to
05:02 - allow me to do is use the value X inside
05:05 - of test so in fact I could print out
05:07 - test and actually let's just print out
05:09 - the value X so printing out the value X
05:12 - what this says now is okay we have some
05:14 - parameter X that we pass to the function
05:16 - let's just print that value out so let's
05:19 - have a look at how we now call this new
05:21 - test function because if I save this
05:22 - code and I wait for the little
05:24 - squigglies to pop up is it giving it to
05:26 - me yes it's saying not enough arguments
05:29 - to call tests so what's up here is known
05:31 - as your parameters and what you need to
05:33 - do when there's parameters for a
05:34 - function is you need to give what's
05:36 - known as an argument in your function
05:37 - call so I'm gonna call test with the
05:40 - argument 5 and test with the arguments 9
05:42 - now take a guess of what you think this
05:44 - is gonna do but it's pretty
05:45 - straightforward we go ahead and go go
05:47 - run tutorial go we print out 5 and we
05:51 - print out 9 because when we pass 5 here
05:53 - X gets assigned the value of 5 we print
05:55 - it out when we pass 9 here X gets
05:58 - assigned the value 9 we print it out now
06:01 - we can have multiple parameters as well
06:02 - let's go ahead and actually add in a Y
06:04 - parameter let's change the value of this
06:06 - function to be at so what I want to do
06:09 - now is I want to add the value x and y
06:11 - and print that to the screen so let's
06:13 - add X plus y and print that out so now
06:16 - I'm gonna call test oops I call this ad
06:19 - and we'll give it 6 and 7 and we should
06:21 - assume what the result is gonna be here
06:23 - but let's have a look and we get 13 so
06:27 - we can do things like that
06:28 - now these are how we type in parameters
06:30 - you simply put the name of the parameter
06:32 - nd type if I wanted this to be a
06:34 - floating-point number I would put
06:35 - float64 if I want it to be a string I
06:37 - will put string if I want to be some
06:39 - custom
06:40 - type which we haven't talked about yet I
06:41 - would put the custom down inside there
06:43 - now a little shortcut for functions here
06:45 - is that you can actually if you have
06:47 - parameters that are the same types is
06:49 - omit writing it two times so I can
06:52 - actually do X comma Y int and what that
06:55 - means is x and y are both intz just
06:58 - because I put that here and we didn't
06:59 - define a type for X but we defined one
07:01 - for Y so it's gonna assume that X is an
07:03 - int so look at this if I run this code
07:05 - here this is completely valid there's
07:07 - nothing wrong with this we still get 13
07:09 - printed out so that's what you can do if
07:12 - you have multiple parameters that are
07:13 - all the same type just list them all out
07:14 - and then put the type at the end they
07:16 - don't need to be you don't need to write
07:18 - into that many times now of course we
07:20 - can have parameters of different types -
07:22 - I could have X being a string and why
07:23 - being an int obviously we can't add
07:26 - these now but we can do that that's
07:27 - totally valid okay so let's go back to
07:29 - the example of XY int and add now here
07:32 - notice that what I was doing was
07:34 - printing this value out now instead of
07:36 - printing this what I actually want to do
07:38 - is return this value now what that means
07:40 - is give this value back so do this
07:43 - calculation and give this value back to
07:45 - wherever it was called from so what I'm
07:47 - actually gonna do here is I'm going to
07:48 - say ans colon equals ad I'm gonna say
07:51 - fmt dot print line ans so what I'm
07:54 - hoping is gonna happen now and I have to
07:56 - change this function is that when I call
07:58 - ad rather than each printing outs rather
08:01 - than ad printing out X plus y it just
08:03 - gives me the answer so it returns to me
08:06 - what the answer is and I can store that
08:08 - in the variable and s so how we do that
08:11 - how we set up a return type were
08:12 - multiple return types from our function
08:14 - is we define after the brackets and the
08:17 - name here what the return type is gonna
08:18 - be now in this case it's gonna be an int
08:21 - so I simply write int but if we return
08:23 - to a float then maybe I would write
08:24 - float64 there and if I was returning
08:26 - multiple things I would write multiple
08:28 - things so int comma int that means I'm
08:31 - returning to int values from this
08:33 - function so let's actually see what
08:35 - happens and when I have one INT here so
08:37 - whenever we define that we're gonna
08:38 - return something we need to write inside
08:41 - of our function a return statement and
08:43 - the return statement is telling us what
08:45 - value or what values were gonna return
08:48 - back to the caller so wherever this was
08:51 - called from keep in mind when
08:53 - ever we hit a return statement we
08:54 - immediately exit our function and we
08:57 - send whatever was in that return
08:58 - statement back to what was called so if
09:01 - I go here and I say return X plus y what
09:04 - this is really saying is okay we're
09:06 - gonna call the function add with a value
09:07 - six seven we're going to return the sum
09:11 - so six plus seven to add which means
09:14 - this statement adds six seven gets
09:16 - replaced with their sum which is 13 and
09:19 - that means answer now becomes equal to
09:21 - whatever that value was in this case 13
09:23 - so let's have a look at how this works
09:25 - go around tutorial go and we get 13
09:28 - again now of course if I change this to
09:30 - be 14 then we can see that this function
09:33 - will still work properly and we will get
09:35 - 21 as our answer so that is how you set
09:38 - up the parameters and how you set up the
09:40 - return type now for some reason you
09:43 - might want to return more than one thing
09:45 - in that case you just add another
09:47 - variable here that says the two things
09:49 - you're gonna return so I'm gonna return
09:50 - to Innes and in this case I'm gonna
09:52 - return X plus y and X minus y so now
09:56 - let's have a look at what ans is equal
09:58 - to if I do this or if this is actually
09:59 - gonna work so let's go go run tutorial
10:02 - Co and let's see what happens
10:04 - missing function body syntax error
10:07 - unexpected comma after top-level
10:09 - declaration okay so I actually remember
10:10 - what's wrong here my apologies guys when
10:12 - we return multiple things sorry what we
10:14 - need to do is put them inside of their
10:16 - own set of brackets just so that the
10:18 - function knows that these this is the
10:20 - return type not multiple things okay so
10:23 - we need to put them inside of a set of
10:24 - brackets my mistake on that but once we
10:27 - do that so assume the function is fine
10:29 - now we're returning two integer values
10:30 - we're gonna have to modify this line of
10:33 - code down here because right now we only
10:34 - have one variable that's gonna store the
10:36 - return from this function so I'm gonna
10:39 - say a ns1 ns2 standing for answer one
10:41 - answer two and then I'm gonna change
10:43 - this to an ax and s1 and ans to what
10:46 - this is saying is since we're returning
10:47 - two values when we make this variable
10:50 - declaration we need to define two
10:51 - variables so that answer 1 becomes equal
10:53 - to X plus y and answer 2 becomes equal
10:55 - to X minus y so let's run that and run
10:58 - this code now and have a look at what we
11:00 - get and we get 21 & 7 so we get those
11:03 - two separate values and that's how we
11:05 - return mult
11:06 - things okay so I'm gonna show you a few
11:08 - more cool tricks that we can do with
11:09 - golang functions and then in the next
11:11 - video we'll do some more advanced
11:12 - examples okay so the first thing I'm
11:14 - gonna show you is actually labeled
11:16 - return values so I can go ahead and do
11:19 - something like this
11:19 - Zed and Zed Zed I know these aren't fair
11:22 - he a meaningful name so let's do z2 and
11:24 - Zed one I can actually label my return
11:27 - variables and if I do that what that
11:30 - means is I actually don't mmm there's a
11:32 - different way that I can do this so if I
11:34 - have these labeled I just me just show
11:35 - you this example sorry I can actually
11:37 - assign I can say Zed 1 equals x plus y
11:40 - oops I don't want to add Y again Z 2
11:44 - equals X minus y and I can simply write
11:48 - return here now what this is saying is
11:50 - I've labeled Zed 1 which is my first
11:53 - return variable and I've labeled Zed 2
11:55 - which is my second return variable so
11:58 - I've set them equal to X plus y and X
12:00 - minus y now when I return this will
12:03 - actually automatically return these
12:05 - values for me without me having to write
12:07 - Z 1 Z 2 so I can do something like that
12:10 - if I label these return types then I can
12:13 - just assign what it is I want to return
12:15 - somewhere in the function write the
12:17 - return keyword at the end and it will
12:19 - return those values so let's save this
12:22 - and let's run this and see if I made a
12:24 - mistake or not and it looks like this is
12:26 - still working fine so we can do that we
12:29 - can label the return types and I can do
12:30 - the same thing that I've done here I can
12:32 - say Zed 1 comma Zed to int and this will
12:35 - still be valid so let's have a look at
12:37 - this and we're good so this is just a
12:40 - short form when they're the same type
12:41 - you can do something like this so there
12:43 - we go we've labeled it now now the last
12:45 - thing I'm going to show you is what's
12:47 - known as a defer state so in the first
12:49 - statement defers the execution of
12:51 - whatever we put on this line until the
12:54 - function returns so this seems strange
12:57 - but let's say that I want to print
12:58 - something right when the function stops
13:00 - executing all right when the functions
13:02 - about to return what I can do is I can
13:04 - say fmt dot print line hello like that
13:09 - and what this says now is that we will
13:11 - defer the execution of this until we hit
13:14 - this return keyword so this will happen
13:16 - at the
13:17 - and of the function this might not see
13:19 - me useful to you but it actually is nice
13:21 - because if there's something that you
13:22 - need to do like cleaning up a file or
13:24 - closing something and you don't want to
13:26 - forget about it you can just defer that
13:28 - statement at the very beginning of the
13:29 - function so that whoever's reading this
13:31 - or yourself knows that this is gonna
13:33 - happen and then it won't happen until
13:35 - the end of the function so this is a
13:37 - very useful keyword that I don't know
13:38 - what other languages it's actually in
13:40 - but if you write defer and some
13:42 - statement then it will not do this
13:44 - statement until these values return now
13:46 - I can prove this to you because I can
13:47 - show FM Twp prints line before return
13:51 - and in theory if you didn't know it
13:53 - defer did you'd probably think we were
13:55 - gonna print hello and then before return
13:57 - but you'll see that we print before
13:59 - return and then we print hello so let's
14:01 - run this and go run tutorial go and we
14:05 - get before return and then hello so this
14:08 - successfully deferred the execution of
14:09 - the statement until the exit of the
14:11 - function so I know these things are a
14:13 - little bit more advanced than what I've
14:14 - shown you before in the next video we're
14:16 - gonna talk more about functions and
14:17 - inner functions anonymous functions
14:19 - everything you pretty much need to know
14:21 - about them but without being said that
14:22 - has been this video I hope you guys
14:24 - enjoyed if you did make sure they like
14:26 - subscribe and I will see you in the next
14:28 - one