00:02 - [Music]
00:09 - hello everybody and welcome to the
00:10 - second video in this react tutorial
00:12 - series for beginners
00:14 - now in this video what i'm going to be
00:15 - doing is going through all of the
00:16 - folders and files that were created in
00:18 - the previous video when we kind of ran
00:20 - that script that pre-generated
00:21 - our react application for us all right
00:24 - so let's go ahead and get started the
00:26 - first folder that i want to look into is
00:27 - this public folder then we'll go into
00:29 - src and then we'll talk about node
00:31 - modules and
00:31 - what files we can actually delete from
00:33 - here that we don't need so the most
00:35 - important
00:35 - file inside of our public folder here is
00:38 - going to be our index.html
00:40 - now this is kind of the base template
00:42 - for our website if you want to think of
00:44 - it that way
00:44 - this is the html document that will
00:47 - actually be rendered to start
00:48 - and then react will kind of inject
00:50 - itself inside of this html document
00:53 - and control a certain part of it so you
00:54 - can see we have some things here like we
00:56 - have
00:56 - meta we are referencing our fave
00:59 - icon.ico
01:01 - we are defining the viewport we have a
01:02 - description we have our apple touch icon
01:05 - which is equal to the logo 192.png
01:08 - we have the manifest we're referencing
01:10 - the title no script and then we have
01:12 - this
01:12 - div now this div is the most important
01:15 - part
01:16 - of this file right here because this is
01:18 - actually where
01:19 - react is going to inject itself in so
01:21 - you can kind of think that this
01:22 - file is generated and then react will
01:25 - control
01:26 - this div so if you had other stuff that
01:28 - wasn't inside of this div
01:30 - react would not be able to control it
01:32 - and it would appear on the website no
01:33 - matter what so if i put like
01:35 - a p tag here it doesn't matter what my
01:37 - react components are rendering
01:39 - anything in this p tag will always be
01:41 - showing up on the website
01:42 - okay so hopefully that's kind of clear
01:44 - but that's the index.html file
01:46 - next we're going to just look at this
01:47 - icon this ico so if you want to change
01:50 - this icon this is like the icon of the
01:52 - website
01:53 - what you can do is just drag in a new
01:54 - icon it has to be dot ico and just name
01:57 - it the same thing and it will
01:58 - automatically update for you
02:00 - okay and then we have logo 192 and logo
02:02 - 512.
02:03 - obviously you don't need these logos but
02:04 - i'll just leave them in for right now
02:06 - because they're being referenced by our
02:07 - index.html file
02:09 - if you were to delete these logos then
02:11 - you would want to delete the links to
02:12 - them
02:13 - inside of this html file here now notice
02:16 - that we're actually referencing
02:17 - anything inside of this public folder by
02:19 - using this percent public
02:21 - url percent so that's how you can
02:23 - reference anything inside of this folder
02:25 - but for now kind of assume you don't
02:26 - really need to touch anything in here
02:27 - you don't need to move anything around
02:29 - delete anything
02:30 - it's totally fine the way it is next we
02:32 - have this manifest.json so actually i
02:34 - lied inside of here you can change the
02:35 - short name and the name of your
02:37 - application
02:38 - so actually let's go ahead and do that
02:40 - let's change this
02:41 - uh to be inventory like that
02:45 - and then we could just make this uh
02:47 - inventory management system or something
02:49 - so let me copy that
02:51 - and we'll put that here inventory
02:54 - management
02:55 - okay nice so i can save that now and
02:57 - then obviously the definition of all of
02:59 - your logos and your icons are here
03:01 - again if you were to delete those you
03:02 - would want to delete their respective
03:04 - entries inside of this icons list
03:07 - now what the manifest actually does is
03:08 - kind of just give a description of your
03:10 - application
03:11 - this is most useful for mobile
03:13 - applications there's a few things here
03:14 - like the default start url
03:16 - the display the theme color the
03:18 - background color you're welcome to mess
03:20 - around with those but
03:20 - not particularly important for what
03:22 - we're doing next we have the robots.txt
03:25 - file i won't really discuss this but
03:26 - this is
03:27 - something that kind of handles or
03:29 - defines something related to when a bot
03:31 - comes on your website you've probably
03:33 - seen these files before if you've worked
03:34 - on the web but i won't really get into
03:36 - it
03:36 - okay next we're going to go to src so
03:38 - src is a much more important folder than
03:40 - public
03:41 - public as i said we don't really need to
03:42 - touch and actually anything inside of
03:44 - this public folder
03:45 - is not going to be a part of our kind of
03:47 - compiled javascript
03:49 - when we actually run our application so
03:51 - if you're unaware of what i mean by
03:53 - compile javascript we'll talk about that
03:54 - as we talk about the src folder now
03:57 - so this src folder this is where we're
03:58 - going to put all of our source code
04:00 - anything that's actually going to be
04:02 - bundled up by webpack which is a
04:04 - technology that's kind of working under
04:05 - the hood i'll discuss
04:06 - really what that does in a second and
04:08 - well you want to put almost everything
04:09 - related to your application inside of
04:11 - this src
04:12 - folder there's very few exceptions for
04:14 - where you want to put something in the
04:15 - public folder rather than the src folder
04:17 - but any javascript files you have
04:19 - must go inside of here that is an
04:21 - absolute must in css and everything
04:23 - you have to put inside of this src
04:24 - folder now oftentimes you'll see people
04:26 - that kind of put another folder in here
04:28 - they'll maybe say like components like
04:30 - that
04:30 - and then they'll put all of their just
04:32 - raw javascript files that are rendering
04:34 - or that have
04:35 - react components in them inside of the
04:37 - components folder now you don't have to
04:38 - do that
04:39 - when your project gets larger you'll see
04:40 - that people kind of separate their
04:41 - components into different directory
04:43 - structures
04:44 - so it's really easy to figure out where
04:46 - stuff is and then they might have all
04:47 - their css and like a css folder
04:49 - and their logos and stuff in a different
04:51 - folder but for now we just have all of
04:52 - our files here
04:53 - all right so the most important file
04:55 - here is going to be index.js
04:57 - followed by app.js so let's go into
04:59 - index.js first
05:00 - uh index.js okay so you can see here
05:03 - we're importing a bunch of stuff we're
05:05 - importing react react dom
05:06 - we have index.css this is a style sheet
05:09 - that's going to be used for application
05:11 - and then we have app from app and then
05:13 - what we're doing is we're saying
05:14 - reactdom.render
05:16 - and in strict mode we are rendering our
05:18 - main app component
05:20 - now all of the stuff in react kind of
05:22 - the functions or classes that we're
05:23 - going to create
05:24 - are typically what are known as
05:26 - components now we'll get into components
05:28 - in the next video but just understand
05:29 - that when i say component i'm kind of
05:30 - referencing something that looks like
05:32 - this
05:32 - something that's like app like this is a
05:34 - component uh okay
05:36 - and then what we're doing is we're
05:37 - rendering this here inside of the
05:40 - document.getelementbyid
05:42 - root so we're finding the root div in
05:44 - our index.html file
05:46 - and then we're kind of injecting so this
05:48 - div right here
05:49 - we are injecting this app inside
05:53 - of that diff and so as i said we have
05:55 - control over this entire div we can
05:57 - render stuff inside of the div
05:59 - because the app component is going to be
06:01 - inside of it and then what this
06:02 - react.strict mode means is we're just
06:04 - going to have some more
06:06 - verbose output sorry in our console so
06:08 - we'll get some better warnings and error
06:09 - messages than we typically would get
06:11 - uh that's kind of what react strict mode
06:13 - does if you didn't use react strict mode
06:15 - like you could remove it and just go
06:16 - like this
06:17 - and this would work fine as well you
06:18 - don't need react strict mode
06:21 - okay so that is index.js now we have
06:23 - this report web vitals thing i'm
06:25 - actually going to delete this i don't
06:26 - really want to talk about this so we
06:27 - don't need this at all
06:28 - so just delete that import and then
06:30 - where it says report web vitals you can
06:32 - just delete that file
06:33 - inside of src okay so that is index.js
06:36 - this is kind of the entry point for our
06:38 - react application
06:39 - it takes our main component and it
06:40 - renders it inside
06:42 - of the html document okay so now we can
06:44 - go to app.gs so this is what i showed
06:46 - you in the last video we just changed
06:48 - this to say my website is running
06:50 - this is the main component for our
06:52 - application this is the first thing
06:53 - that's rendered
06:54 - inside of that div and this component
06:56 - here is what will render
06:57 - other components as well so you can
06:58 - think of this as kind of the main react
07:00 - app
07:01 - as it says app and then from here this
07:03 - will render all of the other stuff that
07:04 - will appear on the screen
07:06 - so as we saw we have this div named app
07:08 - we have a header we have an image we
07:10 - have a p
07:10 - tag we have a link and actually what i'm
07:12 - going to do here is just delete all of
07:14 - this
07:15 - i'm just going to put a p tag and just
07:17 - say uh maybe we'll go like
07:20 - bare bones bare bones app get rid of all
07:22 - that random stuff that we don't need
07:24 - also means we can remove the import from
07:26 - logo.svg
07:28 - and we can delete logo.svg because we
07:30 - don't need that anymore
07:32 - all right so again this is our main
07:34 - application
07:35 - and what this returns is html actually
07:37 - what's known as jsx that's going to be
07:39 - rendered
07:40 - inside of that div in any ways you might
07:43 - notice here this says class name rather
07:45 - than class
07:46 - this is a small change uh in react when
07:48 - you're using what's known as jsx which
07:50 - is this syntax here
07:51 - i know it looks just like regular html
07:53 - but you actually can write a kind of
07:55 - native javascript
07:56 - right inside of this html we're going to
07:58 - see that in the next video
07:59 - regardless one of the main changes
08:01 - whenever you have a class rather than
08:03 - just saying
08:03 - class you say class and then capital n
08:06 - name and then equal to whatever it is
08:08 - okay so then we are going to look at the
08:11 - style sheets so we have app.css you can
08:13 - see that was being imported right here
08:15 - these are obviously all the styles
08:16 - related to that app component we have
08:18 - like an animation
08:20 - and a few other things i'm actually
08:21 - going to delete all of this because
08:24 - now that we don't have these divs we're
08:26 - going to run into some issues
08:27 - so let's get rid of all that let's close
08:30 - that and then we can go back to index.js
08:33 - we see this is importing
08:35 - index.css if we go to index.css
08:38 - we can see we have more styles these are
08:40 - global styles for our entire application
08:42 - awesome so i'm going to delete that next
08:45 - thing we'll look at is this app.test.js
08:47 - and then setuptest.js so
08:50 - app.test.js what this is doing is just
08:53 - allowing you to run
08:54 - automated tests for your application so
08:56 - if you're working in like a real code
08:57 - base and you're actually working on a
08:59 - big project
09:00 - a lot of times you want to write some
09:01 - automated tests that will go through and
09:02 - do some testing of your user interface
09:04 - and so you could actually run this test
09:06 - and this would then tell you if the test
09:08 - ran successfully right
09:09 - so i'm not going to get into testing
09:11 - we're not doing that in this video you
09:12 - can delete this file if you want but
09:14 - we'll just leave it in for now so we
09:15 - will continue in one second we need to
09:17 - quickly thank the sponsor of this video
09:19 - and this series which is algo
09:20 - expert algo expert is the best platform
09:22 - to use when preparing for your software
09:24 - engineering coding interviews they have
09:26 - over 155 coding interview questions on
09:28 - the platform they have a data structures
09:30 - crash course
09:31 - mock interviews and a ton of other
09:32 - awesome features check them out from the
09:34 - link in the description and use the code
09:36 - tech with tim for a discount on the
09:38 - platform
09:39 - next i'm going to go to setuptest.js now
09:42 - this kind of does what it says
09:43 - it just sets up the testing environment
09:45 - for us by importing
09:47 - this library that's about it not much
09:49 - more to that file okay so that kind of
09:51 - covers the src folder
09:52 - and as i was saying everything inside of
09:54 - this src folder is kind of the source
09:56 - code for application
09:57 - any javascript needs to go inside of
09:59 - here any css you're probably going to
10:01 - want to put inside of here
10:02 - and all of this stuff is going to be
10:03 - kind of bundled and packaged up and
10:05 - compiled by a tool that we have called
10:08 - webpack all right so now let's talk
10:10 - about package.json
10:11 - so package.json kind of defines all the
10:14 - dependencies for our application so you
10:16 - can see it says dependencies
10:17 - and then all of the things that we need
10:18 - to actually make this work so if you
10:20 - were to install another dependency we'll
10:22 - do that later in the series
10:24 - you'll see it's automatically added to
10:25 - package.json now it also defines a few
10:28 - scripts
10:28 - you can see that this is actually the
10:29 - script we used to start our web server
10:31 - it's calling something called react
10:33 - scripts and then start we then have our
10:35 - build
10:36 - our test and our jack script which we
10:38 - won't end up using here
10:39 - but those are other scripts that you
10:41 - could use and you could actually define
10:42 - your own script inside of here for
10:44 - example you could say something
10:45 - like run api maybe you had an api
10:48 - attached to this project
10:49 - and then maybe that api is a python
10:50 - project and you say python3
10:52 - run underscore api dot pi or something
10:55 - but that's totally valid you can define
10:56 - your own scripts that do
10:58 - really whatever you want we have a few
10:59 - other things in here uh some stuff
11:01 - related to our linters and development
11:03 - and
11:03 - that's about it we don't really need to
11:04 - talk about much more awesome
11:07 - next we have this readme.md file you can
11:09 - feel free to read this if you wanted
11:10 - just some information about this kind of
11:12 - default
11:13 - react application then we have this
11:15 - yarn.lock file i won't really talk about
11:17 - this too much just some more stuff
11:18 - related to dependencies
11:20 - and then we have git ignore so when you
11:23 - actually create this react application
11:25 - using that
11:26 - create react app script it will
11:27 - automatically initialize an empty git
11:29 - repository
11:30 - and then it gives you a git ignore file
11:32 - and the reason it gives you this git
11:33 - ignore is because you don't want this
11:35 - node modules folder and a bunch of other
11:37 - kind of temporary files
11:38 - to be a part of your github repository
11:41 - because they are usually really massive
11:43 - and there's no need to be transferring
11:45 - this level of files because we have this
11:47 - package.json file
11:48 - so now let me discuss this node modules
11:50 - and then kind of clarify a few things
11:52 - that i skimmed over
11:53 - so node modules this is where all of the
11:55 - dependencies for your project is this is
11:57 - by far the largest folder
11:59 - if you actually look at how large this
12:00 - is probably in the hundreds of megabytes
12:02 - there's tons of different stuff inside
12:03 - of here
12:04 - and the reason there's so much is
12:05 - because yeah your project may only have
12:07 - five or six dependencies
12:09 - but those dependencies may have you know
12:10 - hundreds of things that they depend on
12:12 - and so all of your dependencies and
12:14 - subdependencies are inside of this
12:15 - folder
12:16 - and so if you don't have this folder
12:17 - well your project is not going to work
12:20 - now the thing is though this
12:22 - package.json file defines
12:24 - all of the dependencies that are inside
12:25 - of this folder all of the main
12:27 - dependencies
12:28 - and so if you actually delete this
12:29 - folder you're able to kind of reinstall
12:31 - it or re-add it to the project
12:33 - by simply reading this package.json file
12:36 - running a very simple command
12:38 - that actually will install all of these
12:39 - dependencies for you so i'm going to
12:41 - show you that let's delete this file
12:43 - here
12:43 - it's going to take a second to delete
12:45 - once it's done i'll be right back
12:47 - all right so i've deleted the node
12:48 - modules folder you can see it's gone
12:50 - here
12:50 - now let me just show you if i try to
12:52 - start my application i say
12:53 - yarn and then start we should see that
12:56 - we get an error it says command
12:58 - failed with error code one react scripts
13:00 - not recognized as an internal or
13:02 - external command
13:03 - the reason it's not recognized is
13:04 - because well that was the dependency for
13:06 - our project and we no longer have it
13:07 - and so to reinstall all these
13:09 - dependencies what you need to do is type
13:10 - npm
13:11 - i or npm install it's the same thing and
13:14 - what this will do is install
13:15 - all of the dependencies for you based on
13:17 - your package.json file
13:19 - so it will read the package.json look at
13:21 - all the dependencies here and then
13:22 - automatically install it so if i
13:24 - run npm install you're going to see it
13:26 - will start creating the node
13:27 - modules folder and then it also will
13:29 - create a new folder
13:31 - this or sorry new file this is going to
13:32 - be called packagelock.json you'll see
13:35 - that created in a minute
13:36 - you don't really have to worry about
13:37 - this file this is kind of just defining
13:39 - what this npm command actually did so if
13:42 - you see package
13:43 - lock json don't worry about it you can
13:45 - leave it you can delete it doesn't
13:47 - matter
13:48 - it's you know it's not something that we
13:50 - really need to talk about
13:51 - okay so that is package.json and that is
13:54 - what the node modules folder does and
13:56 - with that that kind of wraps up all the
13:57 - different files inside of here
13:59 - now the last thing i'm going to discuss
14:00 - is kind of the technologies running
14:02 - behind the hood here so we have
14:03 - something called
14:04 - babel and we have something called
14:05 - webpack which are doing a lot of kind of
14:07 - the heavy lifting for us so that all of
14:09 - this stuff works and it's very efficient
14:11 - and we don't have to worry about it
14:12 - so you've probably heard of something
14:13 - called webpack before but maybe not
14:16 - essentially what happens when you run
14:18 - this react scripts
14:19 - if we look here react scripts start is
14:22 - it's using a webpack and what webpack
14:24 - will do is it will take all of your
14:26 - source code and it will bundle it
14:28 - together into
14:29 - one large javascript file the reason it
14:31 - does this is to make everything as
14:33 - efficient as possible it's kind of
14:35 - running a javascript compiler
14:36 - so taking all of your source code and
14:38 - compiling it down into stuff that well
14:40 - the browser can understand
14:42 - that's going to be the most efficient to
14:43 - serve and to run
14:45 - that's really the best description i can
14:46 - give without getting into too much
14:48 - detail that's kind of what webpack is
14:50 - doing
14:50 - and that's happening on the back end we
14:52 - don't really have to worry about how
14:53 - that happens
14:54 - but that is happening that was another
14:56 - thing that we're using here called babel
14:57 - in fact
14:58 - if you go into packagelog.json you're
14:59 - going to see babel all over the place
15:01 - and the reason for that is what babel
15:02 - will do is it will take your high level
15:05 - javascript code and when i say high
15:06 - level i'm talking about sorry you're
15:07 - like es6 es7 javascript code
15:10 - it will actually convert all of that
15:12 - code into es5 javascript code
15:14 - or like older versions of javascript
15:16 - codes that will work on pretty much any
15:18 - browser because if you try to use
15:20 - really new like state-of-the-art
15:21 - javascript stuff older browsers don't
15:23 - support that so you're going to have
15:25 - problems and so what babel does is it
15:26 - kind of makes sure that your application
15:28 - is going to be compatible
15:29 - with any browser that is being used okay
15:32 - with that that's going to conclude
15:34 - this video i'm sure this is still
15:36 - probably a little bit confusing for you
15:38 - guys this will start to clear up as we
15:40 - actually start working with these files
15:41 - but hopefully this just gave you an idea
15:43 - of what all of these different things
15:45 - are
15:45 - kind of how they link together and a
15:47 - little bit about how they work
15:48 - and maybe now this doesn't just look
15:50 - like a bunch of gibberish and you can
15:51 - kind of understand why we have all of
15:53 - these different
15:54 - files and folders awesome well i hope
15:56 - you guys enjoyed if you did make sure to
15:57 - leave a like
15:58 - subscribe i will see you in the next
16:00 - react tutorial
16:09 - you