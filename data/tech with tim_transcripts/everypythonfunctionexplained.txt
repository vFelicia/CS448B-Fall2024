00:03 - foreign
00:09 - you every built-in python function I'll
00:12 - run through a quick example of each and
00:14 - I guarantee you that you will learn
00:15 - something in this video and that you
00:17 - will see a ton of intermediate and
00:19 - advanced python examples for every
00:21 - single one of these functions I will
00:22 - explain the basic usage I'll throw the
00:24 - definition on the screen and afterwards
00:26 - you will know a bunch of functions that
00:28 - you did not know before and probably see
00:30 - a bunch of advanced python code that you
00:32 - can then go and learn more about now I
00:34 - did lie a little bit here there's a lot
00:36 - of built-in python functions so I'm
00:37 - actually going to split this into two
00:38 - parts in this first part I'm going to
00:40 - show you approximately half of them
00:41 - which is about 35 functions then in the
00:44 - next part I will show you the rest
00:45 - however I will give you one bonus item
00:48 - in this video and that is the sponsor of
00:50 - this video thanks to aista for
00:52 - sponsoring this video with aista you can
00:55 - create a full stack web app in just five
00:57 - minutes generate a crud API in seconds
00:59 - and have their magic Cloud Auto
01:01 - magically create your web apps without
01:03 - coding one of the best parts of their
01:06 - magic cloud is it can wrap new or
01:07 - existing databases in a crud API and add
01:11 - security automatically making you 10
01:13 - times more productive and saving you
01:15 - hours of work now not only do you get
01:17 - pre-generated crud apis and effortless
01:19 - security you can also have magic
01:21 - generate a front-end user interface for
01:23 - you this interface is fully featured
01:26 - allowing you to view and interact with
01:28 - your database and even access
01:29 - administrative controls once you're all
01:31 - set up you can schedule hyper Lambda
01:33 - tasks and use their hyper IDE to edit
01:36 - your files directly on your server start
01:38 - taking advantage of low and no code
01:40 - software development today by getting
01:42 - started with iista and Magic cloud and
01:44 - getting one free month of usage go to
01:46 - aista.com and sign up now for your free
01:49 - trial so let's get right into it here
01:51 - after I tell you that I do have a
01:52 - programming course programmingexpert.io
01:54 - if you want to learn more about python
01:56 - learn go and learn Advanced python
01:58 - specifically check out that course I'll
02:00 - leave a link in the description anyways
02:02 - let's dive in here the first function we
02:03 - have is ABS standing for absolute value
02:06 - now absolute value can be used on
02:08 - anything that implements the underscore
02:09 - underscore ABS method now that means we
02:12 - can use this on floats we can use this
02:14 - on ins and you can see here that if I
02:16 - run my code here that I get the absolute
02:18 - value which is just the positive
02:20 - representation of these numbers so
02:22 - positive 9 and positive 100.876 now
02:26 - notice that I wrote this custom class
02:27 - here where I implemented my abs method
02:30 - now this allows me to return anything
02:31 - that I want and now when I call ABS on
02:34 - my custom object which implements ABS
02:36 - it's going to return to me hello which
02:38 - is just the lowercase version of the
02:39 - string hello next function we have is a
02:42 - iter now a iter stands for asynchronous
02:44 - iterator and this returns to the
02:46 - asynchronous iterator associated with an
02:49 - object now obviously this is a little
02:50 - bit Advanced but an asynchronous
02:52 - iterator can be returned from any object
02:54 - that implements the a8er method so if we
02:57 - have a look here at this example
02:58 - function we can see that we create an
03:00 - instance of our asynchronous iterator
03:02 - right here we pass in a start and a stop
03:04 - value we then get the iterator by
03:07 - calling the a function now this is
03:09 - similar to the inner function which you
03:10 - can call on anything that is iterable a
03:12 - iter is the asynchronous iterable
03:14 - version so here it's going to return to
03:16 - us our self which is just this object
03:19 - and now if I print this out you'll see
03:20 - the iterator and then we can Loop
03:22 - through the iterator using an
03:23 - asynchronous for Loop now what I do
03:25 - inside of here is I actually will
03:27 - automatically await the value coming
03:29 - from my async next method now if I run
03:32 - you can see that it's going to take a
03:34 - second and every second is going to
03:36 - print out the next value coming from my
03:38 - asynchronous iterator I'm not going to
03:40 - explain async programming in this video
03:41 - because we don't have enough time if you
03:43 - want to learn that you can check out
03:44 - something like programming expert so the
03:46 - next function we have is all now this
03:48 - tells you if all of the values in an
03:49 - iterable object are true so I can print
03:52 - this out and you can see that we get
03:53 - false for the first one the reason we
03:55 - get false is because 0 is not a truthy
03:57 - value so every single value in python or
03:59 - literal that we can type out like this
04:01 - is either true or false something like
04:03 - zero is going to be false something like
04:06 - an empty string would be false as well
04:07 - uh something like an empty array or an
04:10 - empty list is going to be false as well
04:12 - and that's why you can see that we're
04:13 - getting the results like this so fairly
04:15 - useful one thing to note about say an
04:16 - example like this where we have D is
04:19 - that since we have elements inside of
04:21 - our nested list this actually counts as
04:23 - true which you can see that's printing
04:25 - out here so even though these values are
04:27 - a falsy value since this here has
04:30 - elements inside of it it's a truthy
04:32 - value and since we have all truthy
04:34 - values inside of our list we get true
04:37 - when we print out all of D so the next
04:39 - function we have here is a next a next
04:41 - stands for asynchronous next and this is
04:44 - what is called on an asynchronous
04:45 - iterator to get the next value now you
04:48 - may not know this but when you use a for
04:49 - Loop it automatically calls the next or
04:51 - a next method depending on if you're
04:53 - using an asynchronous for Loop or a
04:55 - regular for Loop and in this example
04:57 - here we can actually manually call the
04:59 - next method from an iterator using anec
05:01 - so if you look down here you can see I'm
05:02 - awaiting the next value by calling a
05:04 - next I need to use a weight here because
05:07 - this is an asynchron awareness function
05:08 - and this has a CO routine that's being
05:10 - awaited inside of it so if I run this
05:12 - you can see that we get one two and then
05:15 - three now I could also have iterated
05:17 - through this using a for Loop if I want
05:19 - but I wanted to show you the a next
05:20 - method which again just gives you the
05:22 - next value in the iterable sequence
05:24 - coming from an asynchronous iterator the
05:26 - next function that we have is any now
05:28 - any is going to tell you if any of the
05:29 - values inside of an iterable object are
05:31 - true pretty straightforward similar to
05:33 - all but only one of the values needs to
05:35 - be truthy so if I run this here you can
05:37 - see that I get true true true until the
05:39 - very end where I get false because every
05:40 - single value here is a falsy value so
05:43 - the next function that we have here is
05:44 - bin bin stands for binary and it's going
05:46 - to give you the binary representation of
05:49 - an integer so in this case we can print
05:51 - at the binary representation of 100 and
05:53 - negative 100 and notice that rather than
05:55 - giving us the twos complement
05:57 - representation it just gives us a
05:58 - negative sign here in front of the zero
06:00 - B whenever you have a binary value it's
06:02 - going to be denoted 0b you can strip
06:04 - that off if you first say converted this
06:06 - to a string and then stripped it uh it's
06:08 - kind of up to you you can also use a
06:09 - format method to do this however this is
06:11 - the bin function so the next function I
06:13 - have here is Bool now Bool is actually
06:15 - the Constructor for the Boolean type or
06:18 - for the Boolean class so when I pass a
06:20 - value here to the bull function it gives
06:22 - me a new Boolean object so you can see
06:24 - here that when I run this and I print
06:26 - out just Bool which is the function it's
06:28 - actually giving me class so this isn't
06:30 - really a function it's actually a class
06:32 - but when we call it then we get the
06:34 - Constructor of that class anyways I can
06:36 - pass to this any value that I want and
06:38 - if this value is a falsy value it's
06:40 - going to give me false if it's a truth
06:41 - you value like one or something that's
06:43 - just not false then it's going to give
06:45 - me true so notice here if I pass like an
06:47 - empty dictionary that's going to be
06:48 - false if I pass an empty list that would
06:50 - have been false in this case it's true
06:52 - even a number like negative one this is
06:54 - going to be true because it's not zero
06:56 - the only uh falsy integer value is zero
06:59 - the next function that I have is known
07:01 - as callable now callable is going to
07:03 - tell you if something is callable so
07:05 - that means you can call it like a
07:06 - function so in this case if I'm saying
07:08 - callable of class this is going to
07:10 - return true because I can call the class
07:12 - by putting parentheses like this which
07:14 - is going to give me the Constructor of
07:15 - the class even if it doesn't exist next
07:17 - I have Funk now Funk is of course a
07:20 - function so it is callable now notice
07:22 - I'm not putting the parentheses here I'm
07:23 - just writing the actual name of the
07:25 - function which is the object I'm
07:27 - checking if it's callable or not next I
07:29 - have function 2 but I'm actually calling
07:31 - this function now when I call this
07:33 - function it returns a function and that
07:35 - function will be callable so this will
07:37 - return true next I have func3 which is a
07:40 - Lambda or Anonymous function and this
07:42 - will be callable I can pass a parameter
07:44 - to this and call it like any other
07:45 - function then I have something like a
07:47 - string which of course is not callable
07:48 - so if I run this here you can see we get
07:50 - true for the first four and then false
07:52 - for the last one the next function I
07:53 - have here is CHR or Char now this is
07:56 - going to give you the character that's
07:57 - associated with an integer this integer
08:00 - is also referred to as the ordinal value
08:01 - so in this case 65 represents our
08:04 - capital A and 97 represents our
08:06 - lowercase a it's not necessary really
08:08 - intuitive what number represents which
08:09 - character continuing if we print this
08:12 - out you see that we get a and a because
08:14 - when past 65 it gives us the character
08:16 - which is capital A now this is often
08:18 - useful when you want to generate a
08:19 - sequence of characters and you don't
08:21 - want to say I have to type a bunch of
08:23 - them out so if I wanted to get maybe the
08:25 - entire alphabet or just a bunch of
08:27 - different characters rather than having
08:29 - to type all of them out on my keyboard
08:30 - and put them in a list I would just
08:31 - increment the ordinal value and pass
08:33 - that to my CHR function it would then
08:35 - give me that character and then I could
08:37 - say Auto populate a list that contains
08:38 - the alphabet the next function that I
08:40 - have for you here is class method now
08:42 - class method is used as a decorator on
08:44 - top of a method that you want to have
08:46 - access to the class not to the instance
08:48 - itself whenever you decorate something
08:50 - with at class method by default the
08:52 - class itself so actually this class name
08:54 - will be passed inside as the CLS
08:57 - parameter you will not have access to
08:59 - the instance even if you call this using
09:01 - an instance so you can see we have a
09:02 - regular method this regular method just
09:04 - prints itself which is going to go to
09:06 - this string method right here that I
09:08 - implemented so you can see when I say t
09:10 - equals test class and then T dot regular
09:12 - method that it prints out my test
09:13 - instance whereas when I call the class
09:16 - method either on my instance or on the
09:18 - class itself both are valid and do the
09:19 - same thing I actually get the class when
09:22 - I print it out because it's not using
09:23 - the representation of the object or of
09:26 - the instance next we have complex now I
09:29 - don't really know much about complex
09:30 - numbers but this is how you can generate
09:32 - complex numbers you can pass one
09:34 - argument which is a string and it gives
09:35 - you the complex number for that or you
09:37 - can pass two arguments which I guess are
09:39 - the components of the complex number I'm
09:41 - not a physics guy so I don't really know
09:43 - how this works but there you go you can
09:45 - see complex numbers the next function I
09:47 - have for you here is known as Dell Adder
09:49 - now this stands for delete attribute and
09:51 - it simply deletes the attribute from an
09:53 - object so what I've done here is set up
09:55 - a custom class we Define the X attribute
09:57 - on our instance we say C is equal to my
10:00 - class and then I can print out C dot X
10:02 - this will be valid I'll get 10. then
10:04 - when I do Del Adder first I pass the
10:06 - object that I want to be deleting the
10:07 - attribute from then I pass the name of
10:09 - the attribute as a string don't try to
10:11 - do something like this that's not going
10:12 - to work you need to pass it as a string
10:14 - then it will actually delete the
10:15 - attribute and then you won't be able to
10:17 - access it so when I do this here notice
10:19 - I get an error on this line because the
10:20 - attribute is now deleted now this is
10:22 - completely equivalent to doing Del Dot
10:24 - and then this is going to be C dot X it
10:27 - is literally the exact same thing the
10:29 - next function that I have for you here
10:30 - is known as dict now this is going to
10:31 - create a dictionary this is actually the
10:33 - Constructor for the dictionary class so
10:35 - notice here that I have a list now this
10:37 - contains key value pairs so I have a and
10:40 - one so this will be my key this will be
10:42 - my value then I can create a dictionary
10:44 - using this so let's see how this works
10:45 - notice I get A1 and B1 now let's just
10:48 - add another value here
10:49 - do something like two one and print this
10:51 - out and notice that I get an error
10:52 - because I don't have exactly two
10:54 - elements it says has length three two is
10:56 - required so there's a few different ways
10:58 - you can initialize a dictionary using
11:00 - something like a list in this case since
11:01 - we have two elements this is gonna work
11:03 - even if we change this to a list
11:05 - we'll be able to initialize so actually
11:07 - let's make it mix type and run this and
11:10 - notice it's the same thing this is fine
11:11 - the next function that I have here is
11:13 - known as dir now I think dur stands for
11:15 - directory and this is going to give you
11:17 - all of the different members that are
11:18 - available on a specific package or class
11:21 - or whatever you call it on so in this
11:22 - case I'm calling it on the math package
11:24 - so if I run this you can see it's going
11:26 - to give me everything inside of the math
11:28 - package which in this case I guess is
11:29 - all the functions or methods that you
11:31 - can use now we can also call this on
11:33 - something like say
11:35 - um let's create something like dict okay
11:37 - if I call this on dict it's going to
11:38 - give me all of the methods hopefully
11:40 - that makes sense that is dirt the next
11:42 - function I have for you here is known as
11:44 - div mod now this is kind of a
11:46 - combination of your Division and your
11:47 - modulo or modulus operator now what this
11:50 - is going to return to you is the whole
11:52 - number quotient as well as the remainder
11:54 - after division so if I do something like
11:55 - 10 divided by 3 then this is going to
11:58 - give me three remainder one so let's
11:59 - print this out and I get three one the
12:01 - next function that I have is known as
12:03 - enumerate now enumerate allows you to
12:04 - have access to the index as well as the
12:06 - value when you're iterating over an
12:08 - iterable object in this case I'm
12:10 - iterating over the list and I want both
12:12 - those things so rather than using the
12:13 - range or just getting the different
12:15 - values I'll get both using enumerate
12:17 - when I print this out you can see that's
12:18 - what I get now just to show you how this
12:20 - actually works let's print the list of
12:22 - enumerate and then values the reason I
12:25 - need to make a list here is because
12:26 - enumerator is going to return an
12:27 - iterator it doesn't actually give you a
12:29 - list so I need to convert my iterator to
12:32 - a list so that I get all the values now
12:33 - when I do this notice that it's actually
12:35 - just going to give me tuples containing
12:36 - the index as well as the value and
12:39 - that's why I'm able to use index comma
12:41 - value this will actually work when
12:43 - you're iterating over an object that has
12:44 - multiple values so if I do something
12:46 - like index value in say values like this
12:50 - now it's going to give me the index and
12:52 - the value for every single one of these
12:53 - right so it's going to be the exact same
12:55 - thing the next function that I have for
12:56 - you here is known as eval and this
12:58 - stands for evaluate or evaluation this
13:00 - allows you to evaluate an expression
13:02 - that is from a string so in this case I
13:04 - can actually ask the user to enter some
13:05 - code code and then based on what they
13:07 - enter I can evaluate that now before I
13:09 - even run this I will mention that eval
13:11 - can be pretty dangerous so don't
13:12 - implement this in your code unless
13:14 - you're very certain what it's doing and
13:16 - how it works this allows you to well
13:18 - evaluate expressions and that can cause
13:20 - harm or do things in your code now what
13:22 - I will do is just run this script so I'm
13:24 - going to say python email.pi enter some
13:26 - code let's do something like print and
13:29 - then hello like that and notice it
13:31 - actually prints out hello now obviously
13:33 - I'm not cheating here if I change this
13:34 - and do something like print X it's going
13:36 - to print out X the next function that I
13:38 - have here is known as exec now this
13:40 - stands for execution and this actually
13:41 - allows you to evaluate python statements
13:44 - not just Expressions so in the previous
13:46 - example I couldn't do something like
13:48 - create a variable or assign to a
13:50 - variable here though I actually can do
13:52 - that so let's run this let's say python
13:55 - exec dot Pi now let's do something like
13:57 - x equals zero semicolon X
14:01 - plus equals one and then print out X and
14:04 - we'll put a semicolon and notice I get
14:06 - one so I can actually build different uh
14:08 - statements here have those executed and
14:10 - I could change the value of variables so
14:12 - be very careful if you're using exec but
14:14 - I figured I'd show it to you because
14:15 - it's kind of cool the next function that
14:17 - I have here is known as filter now this
14:18 - allows you to filter through values in
14:20 - an iterable object in this case I have a
14:23 - list and I want to filter out all of the
14:24 - even values the way the Filter Works is
14:26 - you pass a filter function if this
14:28 - filter function returns true and the
14:30 - value is passed to it then it includes
14:32 - that value in the filter object or
14:34 - whatever it returns otherwise it does
14:36 - not now you can pass an anonymous
14:37 - function like a Lambda function or you
14:39 - can just pass a normal function like
14:41 - this notice here that I'm returning if
14:43 - this value is divisible by 2 or not so
14:45 - let's just print this out notice that
14:47 - when I just print the filter object
14:48 - itself so let me move this down a little
14:50 - bit when I'm just printing this it gives
14:52 - me this weird filter object that's
14:54 - because this is an iterator this is not
14:56 - actually something that you can view so
14:58 - what I need to do is convert this to a
14:59 - list if I want to be able to print it
15:00 - out and view it however typically you're
15:02 - just going to use this object because
15:03 - you can say iterate through this object
15:05 - with no issues you don't need to convert
15:07 - it to a list unless you're trying to say
15:08 - look at it the next function I have for
15:10 - you here is known as float now this is
15:12 - again the Constructor for the float type
15:13 - this allows you to convert something to
15:16 - a float so most useful for a string
15:18 - however you can also convert a regular
15:20 - integer to a float now notice here that
15:22 - we also have a few special things we can
15:24 - pass to float so if you're trying to
15:25 - represent infinity then you can pass INF
15:27 - and this is going to give you whatever
15:29 - the python representation of infinity is
15:31 - you can also pass negative imp and then
15:33 - you can do something like use your
15:34 - scientific notation something like one e
15:37 - negative 0 0 3 and then if I print this
15:39 - out you see that I get all of these
15:41 - values now if and negative imp are
15:43 - actually valid as infinity and python so
15:45 - keep that in mind that's probably the
15:47 - most useful aspect of this float
15:48 - function the next function I have to
15:50 - show you here is known as format now I
15:52 - don't have an hour to explain to you all
15:54 - of the formatting rules that you can use
15:55 - I've just put them here you can see that
15:57 - you can use this format function to
15:59 - generate a string that allows you to say
16:01 - a line specific characters or change the
16:04 - width of something or the Precision or
16:06 - the different type that you're showing
16:07 - you can also use it to create a binary
16:10 - representation of an integer which is
16:11 - kind of interesting I can format 100 as
16:13 - the type B this is going to give me the
16:15 - binary type so if I print this out here
16:17 - notice that I get binary and if we're
16:20 - looking here at this front example or
16:21 - this top example I guess notice that
16:23 - there is a DOT format that you have
16:25 - access to on a string and I believe the
16:27 - formatting options are pretty much the
16:28 - exact same it just works a little bit
16:30 - different in terms of how you write the
16:32 - formatted string next we have a frozen
16:34 - set now the Frozen set function is going
16:36 - to give you an immutable version of a
16:38 - set so what I do is I pass whatever
16:40 - items I want to be in my immutable set
16:43 - and then this is going to give it to me
16:45 - so I have my regular set where I have
16:46 - access to like add delete Etc and then I
16:49 - have my Frozen set now the whole point
16:51 - of a frozen set is that it's immutable
16:52 - not mutable like a set meaning I can't
16:55 - change my Frozen set and since my Frozen
16:57 - set is immutable I'm able to use it as a
17:00 - key for a dictionary area so that's
17:02 - probably the most useful aspect of your
17:04 - Frozen set it's kind of a hashable type
17:06 - and again that allows you to use it as a
17:08 - key the next function that I have here
17:10 - is known as get Adder stands for get
17:12 - attribute pretty straightforward Works
17:13 - similar to Dell attribute you can see
17:15 - that I pass my object as well as the
17:17 - string representation of the attribute
17:19 - and I'm able to get that the next
17:21 - function I have for you here is known as
17:22 - globals now globals is going to give you
17:24 - access to all of the global variables in
17:26 - the current namespace so if I print this
17:28 - out here you can see I have my name main
17:30 - I have my file I have if this is cached
17:33 - I have built-ins blah blah blah won't go
17:35 - through this it's fairly advanced the
17:37 - next function that I have here is my has
17:39 - Adder function this tells you if an
17:41 - object has a specific attribute this is
17:43 - actually fairly useful and allows you to
17:44 - avoid trying to do like a try accept
17:46 - block to see if something exists or not
17:48 - so you can see that I can check if x
17:50 - exists on C or Y exists on c as always
17:53 - we're using a string here rather than
17:55 - typing out with the actual uh I guess
17:57 - character would be so if I run this here
17:59 - notice that c does have X but it does
18:01 - not have y the next function that I have
18:03 - here is known as help now this is going
18:04 - to give you the documentation for
18:06 - whatever object you call this on doesn't
18:08 - work for everything but it will work for
18:10 - a lot of the built-in python types or at
18:12 - least it will give you some meaningful
18:13 - information so if I look here at the
18:15 - help on the int class then you can see I
18:17 - get all of this data the next function
18:19 - that I have here is known as hex now
18:21 - this stands for hexadecimal and it's
18:23 - going to give you the hexadecimal
18:24 - representation of an integer now this
18:26 - only works on a class that implements
18:28 - the underscore underscore index method
18:30 - now if we create a custom class that
18:32 - implements Index this will work it's
18:34 - just going to return the hex value of
18:36 - whatever is turned by index so in this
18:38 - case when I run this I get 0xff 0x1 and
18:41 - 0xa which is the correct hexadecimal
18:44 - codes for 255 1 and then 410 which is
18:47 - returned when I call this on C because
18:49 - it calls the index method the next
18:51 - function I have is known as ID now this
18:53 - is going to give you the identifier for
18:55 - a specific python object this is very
18:57 - useful if you want to check if two
18:58 - objects are the same or not so in this
19:01 - case I have my mutable list I then
19:03 - assign y equals to X now this creates an
19:06 - alias meaning that it's just going to be
19:07 - a reference to the exact same object so
19:09 - the ID of X and Y should be the same
19:12 - meaning anything I change on X will
19:13 - change on y so let's have a look at this
19:16 - here you can see these two IDs are the
19:18 - same meanwhile if I have something like
19:19 - a is equal to and then I believe this is
19:22 - a million and I say B is equal to and
19:24 - I've done a plus 1 minus one you can see
19:26 - that I get a different object now kind
19:29 - of an interesting fact here if you do b
19:31 - equals a
19:32 - and you print this out you're going to
19:34 - get the same ID now the reason you get
19:36 - the same ID is not because these objects
19:38 - are identical but it has to do with how
19:40 - python is managing memory so that's why
19:43 - I had to do this plus one minus one so I
19:45 - get the same value however I get a
19:47 - different object a little bit weird
19:49 - obviously if I make a change to a it's
19:50 - not going to affect B and if I make a
19:52 - change to B it doesn't affect a however
19:54 - to save memory uh there's kind of some
19:56 - optimizations going on where they're
19:58 - actually pointing to the same value the
20:00 - next function I have is the input
20:02 - function I think you all know what this
20:03 - does but this allows you to get user
20:05 - input keep in mind the user input is
20:07 - always entered as a string and the input
20:10 - will end as soon as there is a new line
20:11 - character or a carriage return that is
20:14 - entered so as soon as you hit enter then
20:16 - it's going to stop the input and then
20:17 - return whatever you typed in to the
20:19 - variable that you assigned to import
20:21 - next we have the int function now the
20:23 - int function is going to be the
20:25 - Constructor for the int class allows you
20:27 - to pass pretty well any value here and
20:29 - convert it to an INT assuming it's a
20:31 - valid int if you try try to pass
20:32 - something like hello obviously this
20:34 - isn't going to work and it's gonna crash
20:35 - but notice here that if I convert one or
20:38 - sorry if I convert true I get one if I
20:40 - convert false I get zero uh just a valid
20:43 - string like this one two three I can
20:44 - even do a negative if I do something
20:46 - like a floating point value it's just
20:48 - going to strip off whatever the floating
20:49 - point is so it's not going to round it
20:51 - just strips it so math.floor or uh yeah
20:54 - math.floor not math.ciling gives you
20:56 - nine and then if I do something like
20:58 - binary and I indicate the base that I
21:00 - want to be converting from it will
21:02 - actually give me the integer
21:03 - representation of this binary value the
21:06 - next function that I have here is known
21:07 - as is instance now this is going to tell
21:09 - you if an object is an instance of a
21:11 - class so you can see I have a few basic
21:12 - examples here I'm saying if a is an
21:14 - instance of int if B is an instance of
21:16 - float obviously that is not correct if a
21:18 - is an instance of type if you know what
21:20 - type is you'll know that's not the case
21:21 - however if we look at int instance of
21:24 - type you'll see this is actually true
21:25 - now type is kind of the base class it's
21:28 - not really the best way to describe it
21:30 - but type is the type of a a class so int
21:34 - is of type type because all of our
21:37 - classes are the type type I know that
21:39 - seems really weird but you can mess
21:41 - around with this type function and maybe
21:43 - you'll see what I mean the next function
21:44 - I have you here is is subclass now again
21:46 - this is going to tell you if something
21:48 - is a subclass of another class so I have
21:50 - a few classes that I've set up here I've
21:52 - even done a multiple inheritance example
21:54 - and you can see that I first check if C
21:56 - is a subclass of a that is going to be
21:57 - true is d a subclass of C well yes it is
22:00 - because it inherits or non-herits but it
22:02 - is a derived class of C is uh d a
22:05 - subclass of a well D is going to be a
22:08 - subclass of a because D is a subclass of
22:10 - c and since C is a subclass of a that
22:12 - makes d a subclass of a as well so it
22:15 - kind of chains like that continuing is e
22:17 - a subclass of a well of course it is
22:18 - because we inherit from it and is e a
22:20 - subclass of B well yes it is because we
22:21 - inherit from it as well looking here you
22:23 - can see that these are all tricky all
22:25 - right so we move on to our last function
22:27 - in part one which is itter now iter is
22:29 - going to give you the iterator
22:30 - associated with a regular iterator
22:31 - obvious not an asynchronous iterator
22:34 - that would be your a hitter you can see
22:36 - that I've set up a regular iterator
22:37 - example here and when I call iter on my
22:40 - custom object which implements the iter
22:42 - dunder method it returns to me that
22:44 - iterator I can print out that iterator
22:46 - and I can Loop through it let's have a
22:48 - look and notice it all works so with
22:50 - that said that will conclude part one of
22:52 - every python function I apologize if I
22:54 - went too fast for you but this was
22:55 - really meant to be kind of an
22:57 - entertaining and just quick look at a
22:59 - lot of the different functions that
23:00 - exist here hopefully you learned
23:01 - something hopefully you're looking
23:02 - forward to part two and hopefully you're
23:04 - gonna go buy programmingexpert.io from
23:06 - the link in the description which is the
23:07 - best platform to learn more about Python
23:09 - and become a software engineer I look
23:11 - forward to seeing you in part two