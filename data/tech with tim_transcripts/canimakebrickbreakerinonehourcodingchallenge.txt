00:02 - [Music]
00:08 - in this video i'm giving myself a coding
00:10 - challenge and attempting to build the
00:12 - game of brick breaker in one hour i'm
00:15 - going to do this using python and pygame
00:17 - and i just want to clarify here that
00:18 - i've not written any of this code before
00:21 - i don't already know how to make brick
00:22 - breaker this is a new game that i've
00:24 - never made before and i haven't even
00:26 - really thought about this program this
00:27 - is meant to be kind of me just thinking
00:29 - off the top of my head doing everything
00:31 - completely from scratch and giving you
00:33 - kind of a taste and feel of what it's
00:35 - like to actually design a program like
00:37 - this completely from scratch now
00:39 - obviously i'm not going to add a ton of
00:40 - cosmetics or go crazy on the user
00:42 - interface this is going to be focused on
00:44 - building out that core game logic and
00:46 - hopefully i can complete that in one
00:48 - hour in this video ideally you should
00:50 - learn how i actually structure a program
00:53 - how i think about different problems how
00:55 - i set up classes objects functions
00:57 - methods etc how i deal with problem
01:00 - solving hopefully you guys can get a ton
01:01 - of value from this video now as i said
01:03 - i'm not sure if i'm going to be able to
01:04 - do this in 60 minutes i will try my best
01:07 - but one thing i am sure about is the
01:09 - sponsor of this video before we get
01:11 - started i need to thank pi scripter for
01:13 - sponsoring this video pi scripter is a
01:16 - free and open source python integrated
01:18 - development environment with all the
01:20 - features you'd expect in a modern ide
01:22 - it's also natively compiled for windows
01:24 - to use minimal memory with maximum
01:26 - performance pi scripter comes with
01:28 - features designed to enable smooth and
01:30 - efficient python programming these
01:32 - features include a syntax highlighting
01:34 - editor an integrated python interpreter
01:36 - full python debugging with support for
01:38 - remote debugging integrated unit testing
01:41 - and integration for python tools like
01:43 - pylint tab nanny and profile and so much
01:46 - more pi scripter users can run or debug
01:49 - files from memory and use a code editor
01:51 - to-do list find and replace an
01:53 - integrated regular expression testing
01:55 - get started with pi scripter two day for
01:58 - free by clicking the link in the
01:59 - description thanks again to pi scripter
02:01 - for sponsoring this video so i'm here on
02:04 - the computer and i just wanted to play a
02:05 - basic version of brick breaker here to
02:07 - show you what i'm kind of trying to
02:08 - create uh this version has a bunch of
02:10 - power-ups and stuff that i'm not going
02:12 - to be adding like i'm not going to add
02:13 - these kind of features to the game or
02:14 - have multiple balls or any of that stuff
02:17 - we're just going to go with kind of the
02:18 - basic version where you have a single
02:19 - ball and you're trying to destroy all of
02:21 - the tiles on the screen so pretty
02:22 - straightforward game i should be able to
02:24 - do this in one hour now before i start
02:26 - the timer i will quickly say that i do
02:27 - have a programming course it's called
02:29 - programming expert dot io if you're
02:30 - interested you can use discount code tim
02:32 - it teaches go python has over 300
02:35 - practice questions a bunch of awesome
02:37 - projects it teaches software design
02:39 - software engineering tools if you want
02:41 - to get better at programming really it
02:42 - is the best place and allows you to get
02:44 - better very very quickly check it out
02:46 - from the link in the description about
02:48 - that said let's start the clock and
02:50 - start coding so the first thing i need
02:52 - to do here is import pygame i'm then
02:54 - going to create a display so let's say
02:56 - width
02:57 - height
02:58 - is equal to and then let's just go with
03:00 - like 800
03:02 - uh by 600 for our screen size i'll then
03:05 - say win is equal to pi game dot display
03:08 - dot set underscore mode
03:10 - and then we'll go with
03:12 - width
03:13 - and height
03:14 - then we're going to say win or pi game
03:17 - dot display dot set underscore caption
03:21 - let's set this to brick
03:23 - breaker like that uh now one note i have
03:25 - been coding in javascript a lot recently
03:27 - i actually haven't written any python
03:28 - code in probably like three or four
03:31 - weeks so if you notice me using a bunch
03:32 - of like semicolons in parentheses that's
03:34 - probably why okay so we have this set up
03:37 - next i'm gonna need my main event loop
03:39 - so i'm gonna say define main
03:41 - i'm gonna say while run let's go here
03:43 - and say run
03:45 - is equal to true we'll say well run for
03:47 - event in pygame.event
03:51 - dot get if we could type properly here
03:54 - i'm going to say if event dot type
03:57 - equals equals pi game dot quit then i
04:01 - want to say run
04:02 - equals false
04:04 - i want to break
04:05 - okay then i'm going to say
04:08 - pygame dot quit
04:10 - and quit like that then we're going to
04:12 - say if i'm just going to score name
04:14 - equals underscore underscore main
04:16 - underscore underscore then main okay now
04:20 - we just want a basic draw function so
04:22 - i'm going to say define draw i'm going
04:23 - to say win dot fill and then let's just
04:27 - fill this with a white background color
04:29 - that's what we'll go with for now then
04:30 - we'll say pygame dot display dot set or
04:34 - dot update
04:35 - like that
04:36 - okay continuing here let's call this
04:38 - draw function so let's say draw
04:40 - i'm gonna have to pass the window to it
04:42 - here so we'll take in win and then i
04:44 - want a clock object so clock is equal to
04:47 - pygame dot time dot clock
04:50 - okay and we're gonna say clock
04:52 - dot tick
04:54 - and then let's put our fps variable up
04:56 - here at 60 so that we limit this to 60
04:59 - frames per second
05:00 - okay so let's run this now and see what
05:02 - we have currently
05:03 - and there we go we get brick breaker
05:05 - white background and the screen works
05:07 - okay
05:07 - very nice uh next thing i want to do is
05:09 - probably just get a paddle on the screen
05:11 - that's moving around then we'll have the
05:12 - ball bouncing and then we'll add the
05:14 - actual bricks
05:15 - so let's start with a paddle let's make
05:17 - a class let's call this paddle uh inside
05:20 - paddle i want a velocity so i'm going to
05:22 - say x underscore vel actually
05:25 - let's just go all capitals of l is equal
05:26 - to five that's how quickly we'll be able
05:29 - to move in the horizontal direction i'm
05:31 - going to say define
05:32 - a knit
05:34 - to initialize the paddle i want an x y
05:37 - width and height
05:39 - we'll also take in a color i guess
05:42 - okay and we'll just say self.x is equal
05:44 - to x
05:45 - self.y is equal to y self
05:49 - dot width
05:50 - is equal to width and self.height is
05:53 - equal to height and then self
05:56 - dot color is equal
05:58 - to color
06:00 - okay
06:01 - next what i want to do is draw the
06:02 - paddle so let's say define draw
06:05 - self and win
06:07 - and then we're going to say
06:08 - pygame
06:09 - dot draw
06:11 - direct and then we want to draw this on
06:14 - the window
06:15 - with the self dot color and then we need
06:18 - our rectangle here which is going to be
06:20 - self.x
06:22 - self.y self.width
06:24 - and self dot
06:28 - okay so that should actually allow us to
06:30 - draw the paddle on the screen so now
06:31 - let's create a paddle instance and then
06:33 - pass it to the draw function so we're
06:35 - going to say paddle is equal to paddle
06:37 - and we need to pass to it xy with height
06:39 - color so for the x and y we want it to
06:42 - probably be in the middle of the screen
06:44 - to start so i'm going to say actually
06:46 - let's do something here paddle
06:48 - underscore width is equal to let's make
06:51 - the paddle maybe 40 pixels wide and
06:53 - let's go paddle underscore height is
06:55 - equal to 20.
06:56 - actually maybe we'll just make it 10
06:58 - because we want to be pretty wide
06:59 - relative to the height
07:00 - uh then we're going to go paddle and
07:02 - we're going to pass this it's going to
07:04 - be width over 2
07:06 - minus
07:08 - and then this is going to be paddle
07:10 - width over 2 so this goes directly in
07:12 - the middle of the screen and then we're
07:13 - going to say that we want this to be at
07:16 - i want to be near the bottom of the
07:18 - screen which is going to be the height
07:20 - of the screen
07:22 - minus the height of the paddle so paddle
07:24 - height minus let's just go five so it's
07:26 - like five pixels off the bottom and then
07:28 - we'll go paddle
07:30 - width and paddle height and i also
07:34 - realize that i should probably make
07:35 - width and height here in all capitals
07:37 - because they're going to be constant so
07:38 - let's go with
07:41 - height
07:42 - and i could just use my
07:45 - what do you call this uh find and
07:47 - replace but i don't want to replace
07:48 - these ones so we'll just do this here
07:50 - and then
07:52 - height and
07:54 - width okay so let's run this now and oh
07:58 - okay uh it's missing color so let's add
08:00 - our color here of
08:01 - black
08:03 - all right and then we want to actually
08:05 - draw this on the screen so let's pass
08:07 - the
08:08 - path
08:09 - okay now let's go here and say paddle
08:13 - i'm going to say paddle dot draw like
08:15 - that and we need to pass the win so
08:18 - let's do that
08:19 - all right let's run and there we go we
08:21 - now have a paddle now that's looking a
08:22 - little bit small to me so let's make
08:24 - that a bit bigger let's go like 100 by
08:27 - 15 maybe
08:29 - and okay i think that's a better size
08:31 - paddle so now we want to move the paddle
08:32 - on the screen so that involves getting
08:34 - the different key press events so
08:37 - want to get left or right key presses uh
08:40 - let me refresh myself on how to do this
08:42 - we're gonna say keys is equal to pie
08:45 - game dot
08:46 - and then what is this high game dot
08:50 - get underscore pressed or something like
08:52 - that
08:53 - pygame
08:54 - dog keys.get underscore pressed does
08:57 - that work
08:58 - let's just print that out i forget what
09:00 - this is i might have to look it up
09:02 - uh okay pie game has no attribute keys
09:05 - uh all right let me look this up
09:08 - high game get keys
09:11 - pressed
09:12 - this is key dot get underscore pressed
09:15 - okay i was close
09:16 - so let's try that
09:18 - let's run
09:19 - and there we go okay now we have our
09:21 - keys
09:22 - so now i'm gonna say if keys
09:25 - then this is pygame dot uh and we'll use
09:28 - the arrow key so i'll say k underscore
09:31 - left
09:32 - then that means we're going left say if
09:34 - keys and then pygame dot k underscore
09:38 - right
09:39 - then that means we're going right so now
09:40 - we need a method to move the paddle uh
09:43 - so let's just say
09:45 - define move
09:47 - self and then we'll just say direction
09:50 - and we'll say direction can either be
09:51 - one or negative one one will move us to
09:54 - the right negative one will move us to
09:55 - the left uh and then we will say self.x
09:59 - is equal to then self.x plus self.vel
10:05 - multiplied by the self dot direction or
10:09 - multiplied by the direction that's
10:10 - passed here
10:11 - okay
10:12 - so now let's go and say paddle dot move
10:17 - want to go left so we'll say negative
10:19 - one
10:20 - and paddle.move want to go right so i'll
10:22 - put one
10:24 - let's try this and let's see
10:26 - okay so now i can move the paddle now we
10:28 - need to make it so you don't go off the
10:30 - screen with the paddle so let's just get
10:31 - rid of that
10:32 - okay so we only want to move if we're
10:34 - not going to be going off of the screen
10:36 - so i'm going to say keys pigeon delt k
10:38 - underscore left
10:40 - and
10:41 - paddle dot x
10:43 - minus
10:44 - paddle dot vel will be greater than or
10:47 - equal to zero
10:49 - okay now we'll copy this
10:51 - and put this here and this is just going
10:52 - to be the opposite plus this is
10:55 - less than or equal to and then this will
10:58 - be the width of the screen okay
11:01 - try this
11:04 - and
11:06 - uh okay i forgot to include the width so
11:08 - i'll do that on that side let's see if
11:09 - that works though okay that works so we
11:10 - also need to add the width
11:15 - plus paddle.width okay let's try this
11:18 - and there we go now we stop and honestly
11:21 - i think that's fast enough so now we
11:22 - need a ball that's going to bounce
11:23 - around the screen so let's go here and
11:26 - let's say
11:28 - class
11:29 - ball okay
11:31 - uh we want to have
11:33 - yeah we're going to want a velocity for
11:35 - the ball as well let's just make it the
11:36 - same as the paddle
11:37 - let's say to find init
11:39 - okay self
11:41 - x y
11:43 - radius color
11:44 - okay self dot x is equal to x self dot y
11:48 - is equal
11:49 - to y self dot radius
11:52 - come on it's not giving me the
11:54 - autocomplete is equal to radius and self
11:57 - dot color
11:59 - is equal to color
12:02 - okay let's have a define move uh we're
12:04 - going to have to also have a velocity
12:06 - here so for now let's just take in x
12:08 - pass and then let's go self.x underscore
12:12 - val equals
12:14 - zero self.y underscore val
12:16 - equals zero so we're gonna have to have
12:18 - a velocity in the x and y direction
12:20 - which is gonna be a little bit
12:21 - complicated we're gonna have to use some
12:23 - trigonometry to figure out what that is
12:25 - uh but we'll use the base fell
12:27 - and actually for now let's just make the
12:28 - y val
12:29 - be negative self.l
12:31 - and when we move
12:33 - we're just gonna say self.x plus equals
12:36 - self.xfill
12:38 - and self.y
12:41 - plus equals self.y underscore fell
12:45 - we're going to say define set underscore
12:47 - val self
12:49 - expel
12:51 - y vowel and then self dot x val equals x
12:55 - velocity
12:57 - and self.y value is equal to that and
12:59 - then we'll calculate this based on kind
13:01 - of where we're bouncing so do that in a
13:03 - minute that's going to be the most
13:04 - complicated part is having the ball
13:07 - bounce off of the different objects so
13:09 - yeah we'll handle that in a second for
13:10 - now though let's draw the ball on the
13:12 - screen so let's say
13:15 - ball is equal to ball we need x y so for
13:18 - the x i want this to actually be the
13:20 - same as that
13:22 - so let's just call this
13:24 - center underscore x is equal to and then
13:26 - let's copy that so we're not rewriting
13:28 - this
13:29 - okay
13:30 - center underscore x
13:33 - and then this will be center underscore
13:35 - x and then we want to have a ball radius
13:37 - so we're going to say
13:38 - ball underscore
13:41 - radius is equal to uh is 10 going to be
13:44 - too large
13:45 - we'll try 10 for now
13:47 - okay so then we're going to say this is
13:49 - going to be
13:50 - minus the ball radius so we go a bit
13:52 - higher
13:53 - then for the y
13:55 - uh again this will be
13:58 - the same as that rather than minus five
14:02 - let's go
14:03 - let's go actually
14:06 - paddle y
14:10 - okay i'm getting a bit ahead of myself
14:11 - here but let's go paddle y
14:13 - and then this will be paddle y
14:16 - okay and then this will be paddle y as
14:18 - well
14:21 - i'll just go y
14:23 - uh and then sorry actually i didn't even
14:25 - need to subtract the ball radius this is
14:26 - where i need to subtract the ball radius
14:29 - okay so
14:31 - paddle y minus ball radius and then we
14:33 - need the ball radius and then the color
14:36 - we'll just make this
14:38 - black
14:39 - okay then we need to draw the ball and
14:41 - we want to move it as well so we're
14:42 - gonna say ball dot move although that
14:45 - should probably happen before we draw so
14:47 - let's do that there
14:49 - okay
14:50 - and now we need to take in ball
14:54 - okay
14:55 - ball dot
14:57 - draw
14:58 - when and i realized i didn't actually
15:01 - did i do anything for drawing the ball
15:03 - no i didn't so let's do draw
15:05 - define draw
15:07 - self win
15:08 - highgame dot draw
15:11 - dot circle draw down the window draw it
15:14 - on the self.color uh then we want to
15:16 - pass the center so self.x
15:19 - self.y
15:21 - and then self.color
15:23 - and actually not selfie color
15:24 - self.radius
15:26 - okay so now we are able to draw the ball
15:29 - and we're moving it so it should just go
15:31 - up on the screen let's try this now
15:33 - and there you go we can see that it goes
15:34 - up uh now i do realize let's look at
15:38 - this
15:39 - it didn't look like it's directly in the
15:41 - center and the reason it's not in the
15:42 - center is because
15:45 - of this
15:46 - okay actually i didn't really need
15:48 - we'll keep center x but actually let's
15:49 - just call this
15:51 - paddle x
15:54 - let's fix this now uh since it's in the
15:56 - middle we can just do width over two so
15:58 - let's try this now
15:59 - and there we go it's in the middle of
16:00 - the screen
16:01 - okay uh now
16:03 - i want to bounce off all of the edges
16:05 - this is where it gets a little bit
16:06 - complicated uh but we'll check for ball
16:09 - collision here i guess um
16:12 - actually let's make a function fine ball
16:16 - collision
16:18 - i almost just did an arrow function
16:19 - there
16:20 - let's just take in the ball
16:23 - okay and now we want to see if this is
16:25 - colliding with any of the walls if it is
16:27 - we need to adjust the x and y velocity
16:30 - and and go from there
16:32 - okay so we're going to say
16:34 - if the ball dot x
16:37 - is less than or equal to zero then this
16:40 - means we're colliding with the left wall
16:43 - so if that is the case then we need to
16:45 - change the velocity
16:47 - so that
16:48 - let's see this is a bit complicated let
16:50 - me think about how we're going to do
16:51 - this all right so if i'm thinking about
16:53 - this uh if we're hitting the wall i
16:55 - think all i need to do is just reverse
16:57 - the direction because we're not going to
17:00 - be calculating the velocity
17:01 - differently when we calc when we hit the
17:03 - wall sorry we just flip it so that if
17:06 - we're going this way now we go this way
17:08 - and we just go off the same angle that
17:10 - we came on at now the only time we'll
17:12 - change the velocity is when we hit the
17:14 - paddle
17:15 - and that will be based on where
17:18 - yeah where on the paddle we hit and then
17:20 - we'll kind of calculate an angle and
17:21 - send the ball off either right left and
17:24 - you know at a different angle based on
17:25 - that so to do this we can just say ball
17:28 - dot set val is this what i called it
17:30 - yeah setvel
17:32 - and we're just going to say
17:34 - for the xvel this is going to be ball
17:36 - dot x underscore bell
17:38 - multiplied by negative one and then ball
17:41 - dot y underscore
17:43 - so this will just flip the direction
17:45 - now this is actually going to be the
17:47 - exact same thing if we're going on the
17:49 - right side so we can just say
17:51 - or
17:52 - ball dot x is greater than or equal to
17:54 - width of the screen okay so that should
17:56 - do it for the x in y direction now we
17:58 - want to do y so i'm going to say if or
17:59 - sorry for the x direction now we want to
18:01 - do y so if ball dot y is greater than
18:05 - uh
18:06 - yeah it's greater than or equal to
18:08 - height this would mean we're hitting the
18:10 - bottom of the screen or ball dot y is
18:13 - less than or equal to zero we actually
18:16 - want to add the ball radius here so that
18:19 - it doesn't look like we're kind of going
18:20 - slightly off the screen so we're gonna
18:22 - say
18:23 - minus
18:25 - ball radius and this is gonna be plus
18:28 - ball radius and then this is going to be
18:32 - minus
18:33 - ball radius
18:35 - then we'll do this exact same thing
18:37 - except we'll just flip the other
18:38 - direction so let's go here
18:40 - and then multiplied by negative one
18:43 - okay so now let's just call ball
18:44 - collision here so ball dot move ball
18:47 - collision
18:48 - and let's run this and we should just
18:49 - see it bouncing up and down on the
18:51 - screen if i haven't messed anything up
18:53 - and there we go okay so it's just going
18:54 - to bounce and now of course we need to
18:56 - shoot it off at you know some different
18:58 - angle otherwise we're going to get the
19:00 - same thing so for the x file let's just
19:02 - set this at 2 and let's see if this kind
19:03 - of bounces around the screen now
19:06 - okay
19:07 - so that looks proper to me
19:09 - uh now we just need to adjust the
19:10 - velocity when it hits the paddle then we
19:12 - need to create a bunch of bricks
19:14 - and i think for how long are we in here
19:16 - 15 20 minutes ish uh that's a pretty
19:18 - good progress all right
19:19 - so we have ball collision
19:21 - now we need to be colliding with the
19:23 - paddle
19:24 - now when it hits the paddle that's a
19:25 - little bit more complicated because
19:27 - actually i think i'm going to bring up
19:29 - windows paint here to uh to go through
19:30 - an explanation for windows ink where is
19:33 - windows ink do i have this
19:37 - windows inc
19:40 - come on how do i actually get to the app
19:42 - though
19:43 - app
19:46 - whiteboard there we go microsoft
19:48 - whiteboard that's what they're calling
19:49 - it
19:50 - okay
19:51 - uh configuring new one that's fine
19:56 - all right so if we have a screen like
19:59 - this
20:00 - we have a paddle and we have a ball
20:03 - the way that i want to do this is
20:07 - if the ball hits the paddle
20:09 - on the right side then i want to bounce
20:12 - it off to the right now the further to
20:14 - the right of the center of the paddle it
20:16 - hits the further i want it to bounce off
20:18 - and if it hits the middle i want it to
20:19 - go straight up if it hits like really
20:21 - close to the middle on the left i'd want
20:23 - it to go kind of high to the left
20:25 - that's how i'm going to do this so that
20:26 - you have kind of control over
20:28 - what direction the ball is actually
20:30 - going in
20:31 - so what we need to do
20:34 - when we hit the paddle here
20:36 - is we need to reverse the y direction or
20:38 - reverse the y velocity
20:40 - and actually we don't want to reverse so
20:41 - we need to calculate what it's going to
20:43 - be as long as well as the x velocity so
20:46 - if we want to go we have this kind of
20:48 - plane here so this is a maximum of 90
20:51 - degrees
20:52 - that we can possibly go in
20:54 - so we just need to pick an angle and
20:55 - once we pick an angle then i can
20:57 - calculate the component for the x and
20:58 - the y velocity but how do we pick the
21:01 - angle well if this is the center of the
21:02 - ball
21:03 - and we're here
21:05 - we want to say that if you're at the
21:06 - very end then this is practically 90
21:08 - degrees right
21:09 - whereas if you're in the middle and this
21:11 - would be 45 degrees
21:13 - so you just want to take the distance
21:16 - between this
21:18 - and the paddle
21:19 - we want to then divide it by the length
21:21 - of the paddle that would give us the
21:23 - percentage of
21:24 - the percentage towards the middle we are
21:26 - so like 50 60 etc then we could just
21:29 - multiply that percent by 90. that would
21:31 - then give us an angle kind of normalized
21:33 - between 0 and 90 and then we can use the
21:35 - angle to determine the direction to
21:37 - bounce off um i don't know if you're
21:39 - getting exactly what i'm saying but
21:41 - that's that's what i'm going to do i'm
21:42 - trying to go fast so that's as as much
21:44 - as i'll explain if this was a tutorial i
21:45 - would go into much more depth uh anyways
21:48 - let's try to calculate this now so let's
21:51 - just make a function even though i don't
21:53 - love making a function for this i'd like
21:55 - to make it a method but i think a
21:56 - function's fine we'll say ball
21:58 - underscore paddle underscore
22:00 - collision
22:02 - we'll take the ball and the paddle first
22:04 - of all we need to know if we're hitting
22:05 - the pedal so how do we know if we're
22:07 - hitting the paddle well if the x is
22:08 - within the um
22:10 - x plus the width of the paddle and the y
22:13 - is
22:14 - like hitting the paddle
22:16 - so how do we do that we're going to say
22:17 - if
22:18 - ball dot x
22:21 - is
22:22 - this is going to be less than
22:25 - paddle dot x plus
22:27 - paddle dot width
22:29 - and
22:31 - ball dot x is greater than
22:34 - or equal to
22:36 - let's be greater than equal to as well
22:38 - uh paddle dot x then that means that we
22:40 - are colliding in the x direction so i'm
22:42 - going to say if and i'm actually just
22:44 - going to put a not around all of this
22:47 - okay so if not the case
22:49 - then return
22:50 - and now we want to check the y so i'm
22:52 - going to say if the ball dot y
22:56 - plus the ball dot
22:59 - radius
23:00 - is greater than or equal to
23:03 - the paddle dot y
23:05 - yes i think that should be good
23:07 - then again we'll just put a knot around
23:09 - this because we'll just check the
23:10 - opposite and then we'll return
23:12 - if this is not the case because that
23:13 - means we're not colliding okay so now we
23:15 - know that we're colliding so now that we
23:16 - know we're gliding we want to calculate
23:18 - the distance between the center of the
23:19 - ball to the center of the path so that's
23:21 - actually pretty easy we can just say
23:24 - that
23:25 - paddle underscore center is equal to
23:28 - ball dot x plus
23:30 - ball dot width over two
23:32 - okay and then we're gonna say
23:35 - distance
23:37 - underscore two underscore center is
23:40 - equal to the sorry and this needs to be
23:42 - the paddle not the ball
23:45 - paddle dot x
23:47 - and paddle up
23:49 - okay so we're going to say if
23:51 - the
23:52 - and this is
23:54 - the ball
23:56 - dot x
23:57 - now what am i subtracting or should i
23:59 - say ball.x minus paddle center i
24:02 - guess so then if this is positive or on
24:05 - the right if it's negative we're on the
24:07 - left
24:08 - so
24:09 - calculate the distance and now we just
24:11 - want to calculate an angle um
24:13 - okay so how are we going to do this so
24:15 - distance to center paddle center so now
24:18 - we're going to say
24:19 - percent
24:21 - underscore width
24:23 - is equal to
24:24 - and this will be the distance to center
24:27 - divided by the paddle.width
24:30 - okay and then we're going to say the
24:31 - angle
24:33 - is equal to the percent width multiplied
24:36 - by 90 degrees
24:38 - okay and then we're going to say angle
24:40 - in radians is equal to
24:43 - math
24:44 - dot radians of
24:46 - the angle
24:48 - let's import math here
24:51 - okay so now that should be giving us the
24:54 - angle in radians yeah okay so that looks
24:56 - like that's correct
24:58 - now that we have that we want to
24:59 - calculate the two components
25:01 - of our um
25:03 - what do you call it of our angle here
25:05 - or of our velocity sorry
25:07 - so to do that let me just pull up my
25:10 - whiteboard again so i can remember the
25:11 - direction here
25:14 - okay so let's just go to this
25:16 - all right come on load faster
25:19 - alright so if i have
25:21 - a right triangle
25:22 - like this
25:24 - and actually let's think about this
25:27 - if the ball comes in like this
25:29 - it depends on what direction it comes in
25:31 - at um
25:34 - okay right angle triangle
25:36 - let's go like this we have this which is
25:39 - going to be our vel that we know
25:42 - this will be our angle i should have
25:44 - drawn this from the other direction
25:47 - uh okay
25:49 - like this that's what i wanted okay so
25:52 - right angle this is the angle that we
25:53 - know this is our velocity now what a how
25:57 - i remember this is so
26:00 - ka
26:01 - if i could right here and
26:05 - so i think we just need this one so this
26:07 - is opposite
26:09 - this is hypotenuse and this is adjacent
26:12 - so x is going to be cosine and y is
26:14 - going to be sine
26:16 - okay
26:17 - i know that probably meant nothing to
26:18 - you guys but that's how i'm going to
26:20 - figure this out so i'm going to say the
26:21 - x underscore val is going to be equal to
26:23 - math dot sign of the angle radians
26:26 - multiplied if i could find my asterisks
26:29 - here
26:30 - by b
26:32 - and this is going to be
26:34 - the ball dot
26:38 - okay now this would be the same for
26:41 - y
26:43 - except this is going to be cos okay and
26:45 - then i'm going to say ball dot set
26:48 - underscore
26:49 - val
26:51 - we're going to say x underscore val and
26:53 - then y underscore vel but this needs to
26:55 - be negative so say
26:58 - multiplied
27:00 - by negative one
27:02 - okay uh let's see if this works i don't
27:04 - think it's gonna work but let's try it
27:06 - and then we can debug it later what did
27:08 - i actually call this function
27:10 - ball paddle collision
27:13 - okay so let's try this
27:16 - all right so that actually
27:18 - went off on an angle
27:20 - so wait let's see no way i did this
27:22 - right the first time
27:24 - it looks like i did it correct first
27:25 - shot that's that's shocking let's see if
27:27 - i go on this side nice
27:29 - okay yeah there we go it looks like it's
27:32 - it's
27:32 - working all right guys i'm as shocked as
27:34 - you i didn't really think i was gonna do
27:36 - that perfect on the first try but uh i
27:38 - did because i guess i'm just that good
27:40 - so uh let's uh let's continue okay now
27:43 - we need some bricks we need to break
27:45 - them uh so let's make a class for bricks
27:50 - class brick
27:51 - okay
27:52 - and define underscore square knit
27:56 - okay self
27:58 - x
27:58 - y
27:59 - width
28:00 - height
28:01 - i guess we might as well just pass a
28:03 - health and a color as well so self.x
28:05 - equals x self.y
28:07 - equals y
28:09 - self.width
28:11 - width
28:13 - self.height equals height
28:16 - self dot health
28:19 - equals health
28:21 - self dot color
28:25 - equals color okay
28:27 - uh nice so now that we have that
28:31 - we want to draw this so i said define
28:33 - draw self win uh we're going to say
28:36 - hi game.draw.rect
28:40 - and then this is going to be on the
28:42 - window
28:43 - with self.color
28:46 - and then we need our rect so self.x
28:49 - self.y
28:51 - self.width
28:52 - self.height
28:54 - okay that's it for draw now i want
28:56 - collide now this is just going to return
28:58 - true or false if the ball is colliding
29:00 - with this brick at the current point in
29:02 - time so self
29:04 - ball
29:05 - now just like i did
29:07 - here
29:08 - let's just copy this
29:11 - okay and then rather than paddle
29:15 - we'll just replace this with
29:16 - self
29:19 - okay and
29:21 - self
29:24 - and
29:26 - itself okay now this will be your return
29:29 - false
29:31 - return false
29:33 - and return true
29:35 - all right now we need to generate a
29:37 - bunch of bricks and then draw them on
29:38 - the screen i'm also just going to say
29:41 - define
29:43 - hit
29:44 - self
29:45 - actually yeah that's fine let's say
29:49 - self.health minus equals one
29:53 - okay and then here we'll just say
29:55 - self.hit
29:57 - then we're gonna want something to where
29:59 - we like delete the brick if it has less
30:01 - than uh less than zero health or or zero
30:03 - health we'll just get rid of it we'll do
30:05 - that later okay so let's generate a
30:06 - bunch of bricks
30:08 - say define
30:10 - generate underscore bricks
30:14 - that
30:14 - and let's just take in
30:17 - how many do we want like
30:19 - the number of rows and columns of bricks
30:22 - i guess rows calls
30:25 - okay
30:26 - so first of all if we have
30:28 - a width of 800 then i have a few options
30:31 - i guess i could just do like
30:34 - eight 100 pixel bricks are like
30:36 - 890 pixel bricks with gap
30:38 - [Music]
30:40 - interesting how i want to do this but
30:41 - let's let's just write something that
30:43 - does this
30:45 - okay so we'll say
30:47 - four
30:49 - row in
30:50 - range
30:54 - rows
30:56 - we'll say for call
30:58 - in
30:59 - range calls
31:01 - okay now we're going to say
31:03 - bricks
31:05 - is equal to an empty list and i want to
31:07 - find the brick width
31:10 - so the brick width should be equal to
31:13 - the width of the screen
31:15 - uh integer divided by the number of rows
31:18 - but
31:19 - i want to have some gap between the
31:21 - different bricks
31:23 - so i need to figure out how exactly i'm
31:25 - going to integrate the gap here um we
31:28 - could just make all of the bricks
31:29 - slightly
31:30 - slightly smaller so if you want a gap
31:32 - like two pixels i guess i could just
31:34 - subtract two and then that should be
31:35 - fine so let's actually just add gap
31:37 - though
31:38 - gap is equal to two and let's say minus
31:41 - the gap
31:43 - okay and let's put this here
31:46 - alright so let's say
31:48 - brick
31:50 - is equal to
31:51 - brick and then this is going to be
31:54 - and we need to determine the x so we
31:56 - have row call
31:58 - so how do we do this
32:01 - this is going to be row
32:03 - multiplied by
32:04 - the brick width
32:07 - okay
32:08 - plus
32:10 - the gap i think that's going to be x
32:13 - and then for the y
32:14 - or sorry this is the other way around
32:16 - call multiplied by brick width plus gap
32:19 - and then this will be rho
32:20 - multiplied by
32:22 - and then this is going to be the brick
32:24 - height which we'll decide in a second
32:26 - plus the gap okay so
32:29 - brick
32:30 - underscore height
32:32 - is equal to and let's just go with like
32:34 - 30 for now
32:37 - okay then we want the brick
32:39 - width
32:40 - brick width come on
32:42 - and the brick height
32:44 - this is actually turning out to be one
32:45 - of the most challenging parts you're
32:47 - generating the bricks okay so bricks dot
32:49 - append
32:50 - brick like that
32:52 - and then let's return
32:55 - the bricks okay
32:57 - now we want to draw all of the bricks
32:59 - and check for collision with them so let
33:01 - us oh we also need to pass a color and a
33:05 - height here so for the color for now
33:06 - let's just go with green and sorry the
33:08 - health let's just go with i don't know
33:10 - maybe like five
33:12 - okay
33:13 - so now let's pass the bricks to our draw
33:16 - function
33:17 - and let's draw them where is draw
33:20 - okay
33:21 - bricks
33:24 - i'm going to say for
33:26 - brick
33:27 - in bricks
33:28 - then brick dot draw
33:31 - on the window okay and then we want to
33:33 - check for collision so it'll really be
33:35 - the same thing here
33:37 - we're going to say and oops this needs
33:39 - to go to
33:41 - draw
33:45 - say 4 brick in
33:49 - bricks
33:50 - then brick
33:52 - dot
33:54 - collide
33:55 - ball
33:57 - and then we'll say
33:59 - if brick
34:01 - dot health is less than
34:04 - zero less than equal to zero then we
34:06 - want to delete that brick so
34:10 - we're gonna have to do this bricks to
34:13 - delete we're gonna say
34:15 - breaks to delete dot append brick
34:19 - okay then we're going to say actually i
34:21 - can do this in a better way
34:23 - make a copy of bricks rather than this
34:25 - we'll just say
34:26 - bricks
34:27 - dot
34:28 - remove
34:31 - brick
34:32 - okay uh we don't need that anymore
34:36 - all right let's run this and see what we
34:39 - get
34:40 - and we get an error what have i done
34:41 - wrong here
34:43 - says what
34:47 - uh bricks is not defined ah that's
34:49 - because we didn't ever actually generate
34:51 - the bricks let's say
34:53 - bricks is equal to generate bricks
34:56 - uh let's go
34:57 - actually rose calls let's go three rows
35:00 - of ten columns and see what we get i
35:02 - think it's gonna look a little bit
35:03 - messed up but yeah okay less than equal
35:05 - not square between instead of string and
35:07 - int uh brick.health why
35:10 - how have i done this wrong
35:12 - where's my brick uh health and then
35:14 - color that's why so where am i
35:15 - generating generate here we need to just
35:19 - swap those around
35:21 - make that green okay
35:23 - [Music]
35:25 - all right so
35:28 - let's see here
35:29 - what is what is happening here
35:34 - okay something something serious
35:36 - something is seriously wrong um
35:39 - okay
35:40 - brick width brick
35:42 - height plus gap brick height plus gap
35:47 - okay let's just try setting this like
35:49 - something small
35:52 - let's make them square
35:54 - and let's see
35:57 - hmm curious why this isn't working
36:01 - should be zero zero
36:05 - okay let's let's just see this here
36:08 - okay so we get one brick
36:10 - for row and range rows for call and
36:12 - range calls
36:13 - column
36:16 - times brick width plus gap
36:21 - all right so now we have to actually
36:22 - think for a second here how have i
36:24 - messed this up i assume the bricks are
36:27 - like overlapping each other bricks dot
36:29 - append brick we also need to make it so
36:31 - when we collide with it we set
36:33 - the ball we reverse the ball velocity
36:36 - that's potentially why as well so let's
36:38 - go here to collide
36:41 - and say
36:42 - ball dot set val
36:45 - and then this will be
36:46 - ball dot x underscore val
36:48 - and then ball dot y underscore bell
36:52 - multiplied by negative one
36:54 - okay
36:55 - let's just run this here
36:58 - let's see if i can hit one of these
36:59 - bricks
37:02 - okay so there is a bunch of them okay so
37:04 - that's why they're all like stacked with
37:05 - each other apparently the gap isn't
37:07 - really doing anything
37:08 - although i don't know why it's not doing
37:10 - anything
37:11 - i'm just messing up the gap here let's
37:13 - see so we've gapped to brick width of 20
37:16 - brick height of 20
37:17 - we have plus the gap
37:20 - brick width okay 20 20. so if we have
37:23 - column times the brick width plus the
37:25 - gap
37:28 - maybe it's because we need to do
37:32 - plus gap
37:33 - times the column
37:35 - i don't think that could be right oh
37:37 - there we go okay so that's doing
37:38 - something now
37:40 - all right so let's go back here now and
37:44 - brick width row time brick width brick
37:47 - height why is the width and the height
37:49 - so
37:50 - so off though oh it's because
37:53 - we need to do the same thing for this
37:54 - gap gap
37:56 - times row
37:59 - okay let's try this
38:02 - uh
38:03 - oops
38:05 - multiplied by row
38:07 - okay
38:09 - there we go now we're getting what we're
38:11 - looking for okay so now for the brick
38:12 - width this is going to be
38:15 - the rows
38:16 - integer divided no the
38:19 - width
38:20 - integer divided by the rows
38:22 - minus
38:23 - the gap
38:25 - is that going to work
38:28 - no okay so now
38:30 - ah it's because we need to do it by the
38:32 - calls that's why let's try this now
38:35 - okay that seemed to work
38:39 - whoa what's going on here okay so
38:41 - clearly
38:42 - clearly something's a little bit messed
38:44 - up here in terms of the the collision
38:46 - with the uh
38:47 - with the bricks
38:49 - uh okay so we'll fix the collision with
38:50 - the bricks in a second but for now at
38:51 - least though we're generating bricks so
38:53 - let's let's fix the collision here it's
38:55 - got to be inside of here
38:57 - so if not ball dot x
39:01 - okay
39:03 - less than or equal to self.x plus self
39:06 - dealt with
39:08 - okay and ball dot y greater than self.y
39:11 - okay
39:12 - and aha simply less than or equal to
39:15 - self.y
39:16 - plus self.height that would be why that
39:19 - wasn't working okay so let's try this
39:21 - now
39:22 - and all right it bounced off but it's
39:25 - because i'm not including the radius
39:26 - that it's looking all weird i believe
39:29 - ball dot y
39:31 - minus ball dot radius that would be y
39:34 - let's try this
39:36 - okay and it's going to bounce and there
39:38 - we go now i think what i want to do is
39:40 - just maybe darken the shade if it's um
39:44 - what do you call it if it's been hit a
39:45 - few times
39:46 - so let's see if i can actually
39:48 - figure that out or maybe add some
39:49 - opacity or something
39:51 - let's just see if there's like an easy
39:53 - way to darken
39:55 - pie game
39:57 - how do i change okay darken color rgb
40:00 - how would you do this
40:05 - okay oh it's even in python perfect
40:07 - something like this maybe
40:11 - all right so let's do the good old don't
40:13 - even read it and just copy it
40:16 - and
40:18 - wait why is there two colors
40:22 - i don't want two colors i just want one
40:24 - color
40:28 - oh it's gonna give me a range between
40:30 - the two colors
40:32 - okay
40:33 - so let's do that
40:35 - um
40:36 - we put this
40:38 - inside a brick
40:46 - [Music]
40:47 - gives me one between color and color b
40:49 - now
40:51 - okay that's fine we're just gonna need
40:52 - two colors then so let's just say
40:53 - cutters colors
40:57 - and then we'll say
40:58 - self.hudder
41:00 - is equal to
41:02 - this
41:04 - uh okay
41:05 - now
41:07 - when we collide
41:09 - if we hit we will change the color by
41:12 - interpolating it between the two colors
41:14 - so we'll say self.color
41:17 - is equal to
41:19 - self dot
41:21 - that and then color a
41:23 - will be
41:26 - actually we can just do this
41:28 - asterisk self.colors
41:31 - and then the time will be
41:35 - self dot health
41:36 - uh between it takes a value between zero
41:38 - and one so we're going to say
41:40 - we want max health so max
41:45 - underscore health
41:47 - is equal to
41:49 - and just say health
41:50 - just so we can divide and then get a
41:52 - number between one and zero so be
41:53 - self.health divided by self.max health
41:56 - so if it's
41:57 - uh like the max health and it's one if
42:00 - our health is lower then we should get
42:01 - darker or whatever between the two
42:03 - colors so now we need to pass two colors
42:05 - to our bricks so let's go here and let's
42:08 - just go like green
42:10 - and red with the colors
42:12 - and let's see how broken this is now
42:16 - okay so we got an error here
42:18 - ah it's because it needs to be rgb i
42:20 - can't pass the string so for green
42:23 - this is going to be red green blue so 0
42:27 - 255 0
42:29 - and then 255 0 0. okay let's try this
42:33 - now
42:35 - and nice okay and it gets slightly
42:37 - darker
42:39 - all right now let's see what happens if
42:40 - we hit the same one again if we can
42:42 - accomplish that
42:45 - come on okay and it gets darker again so
42:47 - i mean this isn't really the best way to
42:49 - do this i guess because it's kind of
42:50 - hard to tell what health you're at but
42:51 - you can see that we're darkening now let
42:53 - me just change the health to just be
42:54 - three so that we can actually see if
42:55 - we're deleting them and then i guess we
42:57 - just need to do a check if all the
42:59 - bricks are gone and then you win the
43:00 - game and then it would restart and
43:02 - that seems good to me we also could
43:03 - implement oh we need to implement live
43:05 - so if it goes off the screen you lose a
43:06 - life okay we'll do the lives first but
43:09 - let's change the health here where am i
43:11 - passing the health to be
43:13 - is this three let's just make it two
43:16 - okay and then run
43:18 - all right
43:20 - straight up again
43:22 - and there we go it's gone
43:23 - okay nice so now let's do lives
43:26 - so we're gonna go here and say lives is
43:29 - equal to three
43:30 - and then we wanna draw that on the
43:32 - screen so let me just pass the lives
43:34 - let's get some font going so we'll say
43:38 - pygame.init just to initialize the font
43:40 - we'll say the lives underscore font is
43:43 - equal to
43:44 - pie game
43:46 - dot font dot sys font
43:48 - uh you guys already know we're going
43:49 - comic sans of course the go to font size
43:53 - just go with
43:54 - 40 because it's going to be live so
43:56 - that's fine
43:57 - for draw will not take in lives
44:01 - and we will say
44:04 - lives underscore text equals and then
44:08 - this will be the lives font dot render
44:11 - and we want to render
44:12 - actually an f string here
44:14 - of lives and then this will be lives
44:20 - okay and then one
44:22 - and the color will be just black that's
44:26 - fine
44:30 - okay then we're going to say
44:32 - hi game
44:33 - dots actually no wind
44:36 - dot blitz
44:38 - live's text and then where do we want
44:39 - this
44:40 - i probably want this in the bottom left
44:42 - or bottom right hand corner so just to
44:44 - make it easy we can go with like 10 for
44:46 - the x and then height
44:48 - minus lives underscore text dot get
44:52 - underscore height
44:54 - -10
44:55 - and that should be good okay let's see
44:57 - if it shows up now
44:59 - and there we go now we have three lives
45:00 - so now we need to subtract lives so
45:03 - where we have ball paddle collision
45:06 - um that's not what we want what ball
45:09 - collision here
45:10 - this is actually what we
45:13 - we want to check
45:14 - if you didn't hit the paddle but you hit
45:16 - the edge of the screen so in fact we can
45:17 - just make a check in here we don't
45:18 - really need to make a function for this
45:20 - so we're going to say
45:22 - let's add a comment
45:24 - lives check if
45:27 - ball dot y
45:29 - is less than or actually greater than
45:32 - all that y plus
45:34 - ball
45:37 - dot radius
45:38 - [Music]
45:40 - if this is
45:41 - greater than or equal to the height of
45:44 - the screen
45:45 - then lives
45:47 - minus equals one and we're going to
45:49 - reset the ball to the
45:52 - where where was this originally set with
45:54 - over two and then this so i'll just just
45:55 - copy this and reset it i'll say all dot
45:58 - x is equal to that
46:01 - and ball.y
46:02 - is equal to this
46:04 - okay
46:05 - uh we reset the ball and then
46:08 - say ball dot set underscore film
46:12 - we'll
46:12 - say the
46:16 - ball
46:17 - actually it's going to be zero
46:19 - and then
46:22 - balled up l but this needs to be
46:24 - negative so multiplied by negative one
46:27 - all right and i think i'm almost getting
46:29 - to an hour at this point i don't know
46:31 - exactly because i didn't really start a
46:32 - clock on my end which i probably should
46:33 - have done
46:35 - but let's see here okay let's see if i
46:36 - lose life
46:38 - all right there you go
46:39 - ah so actually the ball should probably
46:41 - restart at the paddle position so that's
46:43 - a bit of a mistake
46:45 - yeah okay we wanted to restart
46:47 - at our paddle position so we don't want
46:48 - to do this so ball dot x is going to be
46:51 - equal to
46:53 - paddle dot x
46:55 - plus paddle
46:57 - dot width over two
46:59 - and then the ball dot y will just be
47:00 - equal to paddle dot y
47:03 - minus the ball radius
47:05 - i think that's correct so let's try this
47:07 - now
47:09 - [Music]
47:11 - okay there you go so it restarts on our
47:13 - panel nice okay so now that we've done
47:14 - that we want to do something if you lose
47:17 - all of your lives so we're gonna say if
47:19 - lives less than equal to zero
47:22 - then we need to restart the game
47:25 - so
47:26 - pass for right now
47:28 - but how are we going to restart well we
47:29 - need to reset all of this
47:34 - so let's copy these
47:37 - and this is not ideal but
47:40 - this is how i'm going to do it because
47:41 - we're in a bit of a crunch for time here
47:44 - just reset all that
47:46 - and then we need to
47:47 - show something on the screen saying you
47:49 - lost and go from there so we're going to
47:52 - say
47:54 - if you want to just use the live spot
47:56 - let's just save us some time lives font
47:58 - dot render
48:01 - you lost exclamation point 1 and then
48:04 - the color will be
48:06 - red
48:07 - and we will say win dot blind
48:11 - and this is going to be
48:13 - lost text
48:15 - okay
48:18 - lost underscore text want this in the
48:19 - middle of the screen so this is going to
48:21 - be width over 2 minus lost underscore
48:24 - text dot get underscore width
48:28 - divided by 2 and then this is height
48:32 - if we could spell that correctly over
48:34 - two minus lost text dot get underscore
48:38 - height
48:39 - over two
48:40 - and then we need to refresh the display
48:43 - and delay so pygame dot display dot and
48:46 - then this will be
48:48 - update
48:50 - and then
48:51 - highgame.time.delay
48:55 - and we'll just delay 5000. now is this
48:58 - what does this convert a number string
49:02 - delay milliseconds yeah so five thousand
49:03 - would be five seconds in fact let's just
49:05 - go three thousand we won't agonize you
49:07 - too much for that and that should that
49:09 - should do everything i think um ball
49:12 - equals yeah paddle equals this we're
49:14 - just creating a new instance that's fine
49:16 - bricks okay yeah let's try this
49:19 - so what happens if we lose all three of
49:20 - our lives
49:22 - okay that's one done
49:25 - okay that's two done
49:27 - and that is all of them you lost okay
49:30 - let's see if it resets
49:32 - and there you go then the game resets
49:34 - all right so that's pretty much it for
49:35 - brick breaker i mean i guess we want to
49:37 - do something if we win but
49:40 - i don't really need to
49:41 - i mean okay i guess we could just
49:42 - implement that because we have enough
49:44 - time
49:45 - so let's do this
49:46 - we'll say if
49:48 - the len
49:49 - of bricks
49:51 - is equal to zero
49:53 - then we want to do the exact same thing
49:54 - so
49:56 - can i hmm
49:59 - i don't like i don't love continuing to
50:02 - rewrite all of this so let us
50:06 - how could i do this
50:07 - let's just do an inside function
50:10 - reset i don't know if this is gonna work
50:11 - or not but let's let's try this
50:13 - reset and then just copy that
50:19 - actually no just copy what i had here
50:23 - okay so reset
50:27 - all right come on go back
50:31 - then it's just this
50:33 - i'm actually gonna put this another
50:34 - function i'm gonna say define
50:36 - display
50:38 - text
50:38 - i'm just taking text here
50:40 - okay and then rather than lost text this
50:43 - will just be
50:46 - text
50:47 - and actually
50:50 - text render that's what this needs to be
50:52 - okay and then rather than that
50:55 - text
50:58 - and then text underscore render and
51:02 - text
51:05 - okay
51:06 - i think that's fine
51:09 - now let's just try to use this so this
51:10 - should make this a lot cleaner i'm just
51:12 - going to say reset
51:14 - and then display text
51:18 - you
51:19 - lost exclamation point and then we'll do
51:21 - the exact same thing here
51:23 - and say
51:24 - reset but you
51:27 - won
51:28 - okay uh let's try this
51:31 - so i just want to test again if it's
51:33 - going to reset uh if we lose all our
51:35 - lives so let's see this
51:38 - [Music]
51:41 - all right you lost okay so that did work
51:42 - let's see if it resets
51:45 - okay so it didn't reset so
51:47 - uh and we're gonna get yeah okay i need
51:49 - to just exit this force quit that
51:52 - is this still going okay so reset didn't
51:54 - work um
51:56 - and it's because these variables here
52:02 - there's a way to do this but i
52:04 - should i just
52:06 - i think if i do this
52:12 - then it will work so let's try that
52:16 - again i this isn't the best idea to be
52:17 - doing this it's also another keyword i
52:19 - think i can use to uh to to do that but
52:22 - let's just let's see if this works
52:26 - okay so you lost definitely works
52:30 - yeah okay
52:32 - so that's still not working uh okay quit
52:35 - that
52:38 - all right how would i fix this um
52:42 - [Music]
52:43 - this and this we can take out i think i
52:46 - can just do
52:48 - ball dot x
52:50 - is equal
52:51 - to this
52:55 - and
52:56 - ball dot y is equal to this
53:01 - okay
53:05 - yes no what the heck am i doing
53:11 - this is what i want
53:14 - ball.y to equal to this is ball.x
53:17 - uh bricks and this we cannot do here
53:22 - so let's go and do them
53:25 - here
53:29 - okay
53:30 - and
53:31 - here
53:35 - can i do the rest inside of this reset
53:37 - function let's see
53:40 - i should be able to if i rather than
53:42 - recreating this i just modified the
53:44 - attributes so to say paddle
53:47 - dot x equals paddle x
53:51 - and then paddle underscore y
53:53 - equals
53:54 - paddle y but this should be dot y
53:56 - okay let's see if this if this works
53:58 - this time
54:00 - not confident but let's give it a shot
54:02 - and then we should be just at about the
54:04 - hour mark so i can try to play through
54:06 - one game uh see how that goes and then i
54:09 - guess we'll wrap up the video there okay
54:10 - you lost come on reset
54:13 - okay there you go so that actually works
54:14 - properly i just can't redefine the
54:15 - variable
54:17 - uh based on i guess the way i've done it
54:18 - there okay so let's try to play through
54:20 - a game here let's just make sure
54:21 - everything's working
54:23 - don't see any bugs
54:24 - just try to get rid of a few bricks
54:26 - and then once that's done we'll wrap up
54:28 - the video
54:29 - [Music]
54:30 - now while i'm playing this guys i will
54:32 - ask you if you enjoy this type of video
54:34 - of course make sure you like the video
54:36 - but let me know
54:38 - what other uh challenges you think i
54:40 - should do here now i also want to try to
54:42 - like bounce the ball off of multiple
54:44 - bricks
54:45 - and see if that's gonna work or if we're
54:47 - gonna get any issues with that so let's
54:49 - try
54:50 - yeah okay so there you go we just
54:51 - bounced off multiple bricks that seemed
54:53 - to work fine so that's good
54:55 - okay let's see here
54:58 - bounce
55:00 - because what i did is oh i made it so
55:01 - when you hit a brick it reverses the y
55:05 - velocity however if you hit the side of
55:07 - the brick it shouldn't do that so i
55:10 - probably should
55:12 - i probably should fix that i'm not gonna
55:13 - have time to fix that right now but that
55:15 - would be a bug here if you hit the side
55:16 - of the brick what's gonna happen is it's
55:18 - still gonna change the y velocity
55:20 - even though that that shouldn't happen i
55:22 - need to kind of check what side of the
55:24 - brick you're hitting so i determine what
55:26 - to set the velocity to
55:28 - but yeah anyways as i was saying yeah
55:29 - you can see it kind of like glitched
55:31 - through the through the bricks there
55:32 - right
55:33 - as i was saying i wanted uh to know what
55:36 - other challenges you guys would have for
55:37 - me in terms of coding this one i think
55:39 - was like much easier than the
55:40 - minesweeper one i did the minesweeper
55:42 - one was a bit more complicated with the
55:44 - algorithm and how to check if uh
55:46 - what is it if there's a mine around or
55:49 - what the number should be on on the
55:50 - different block or whatever you call it
55:52 - and that's okay that's definitely a bug
55:53 - right there
55:54 - yeah let me know so actually i don't
55:56 - think i'm gonna play through this whole
55:57 - thing i'm kind of bored already this is
55:58 - a pretty boring game from what i
56:00 - remember anyways guys i think i'm gonna
56:01 - wrap it up here i don't think any of you
56:03 - really need to watch me continue to play
56:04 - brick breaker if you enjoy this type of
56:06 - content please leave a like subscribe to
56:08 - the channel also i do have a course it's
56:10 - called programming expert you can check
56:11 - it out from the link in the description
56:13 - if you want to learn how to code in
56:14 - python just like this i will see you in
56:16 - another youtube video
56:20 - [Music]