00:00 - hello everybody and welcome to another c
00:01 - plus plus tutorial for beginners
00:04 - in this video i'll be covering maps now
00:06 - a map is an associative data structure
00:09 - that allows you to associate a key with
00:11 - a value so this is a different way to go
00:13 - about accessing elements and it has some
00:15 - kind of efficiency benefits which i'll
00:16 - talk about
00:17 - in this video
00:21 - [Music]
00:27 - so as i was saying what a map allows us
00:29 - to do is access elements based on a
00:31 - unique
00:32 - key not based on something like an index
00:34 - or indices
00:35 - so when we were looking at an array and
00:37 - we had maybe three four five six
00:39 - the way we accessed these elements was
00:40 - based on the order in which they were in
00:42 - the array
00:43 - so the first element was accessed with
00:45 - index zero second with index one
00:47 - so on and so forth and the order in
00:49 - which these elements appear really
00:51 - mattered that was the way that we
00:52 - accessed them and well it was maintained
00:54 - in this structure
00:55 - if i had elements that were 3 4 5 6
00:57 - every time i look at this array i'm
00:59 - going to have 3 4 5 6
01:00 - in that order now what this means is
01:03 - that we can maintain the order of
01:05 - elements
01:05 - which is great a lot of times we want to
01:06 - do that we want to know which element
01:08 - was in which position and what not
01:10 - but this also means that if i want to
01:12 - say look for something in this array
01:14 - i want to determine if the element say 7
01:16 - exists i need to look through
01:18 - every single element in this array to
01:20 - determine
01:21 - whether a it exists or b it doesn't
01:24 - what i mean by this is the following if
01:26 - i have this array and i ask you
01:28 - does element 7 exist and you need to
01:30 - write code that tells me if element 7
01:32 - exists
01:32 - you cannot be sure if that exists or not
01:35 - until you look through the entire array
01:38 - so if you look through the array and you
01:39 - find element seven you can immediately
01:41 - stop and you can say yes i found element
01:42 - seven
01:43 - it exists but if it does not exist you
01:46 - need to look through every single
01:47 - element to tell me it doesn't exist
01:49 - because if you just look through half
01:50 - the array
01:51 - what's to say it couldn't be in the
01:52 - other half if you look through every
01:53 - element except one what's to say it's
01:55 - not that last element right
01:57 - and so what that means is that if you're
01:58 - searching for something in an array
02:00 - this is what's known as a linear time
02:02 - operation if the array gets larger
02:04 - it takes you longer to search for now of
02:06 - course there's some exceptions if the
02:07 - element's the very first element in the
02:09 - array and you're looking from left to
02:10 - right
02:11 - you'll find it immediately but if we're
02:12 - talking about kind of a worst case
02:14 - scenario
02:15 - we can always assume the element either
02:16 - doesn't exist or is at the end of the
02:18 - array
02:18 - and in that situation however long the
02:20 - array is well that's how long it's going
02:22 - to take you to tell me if this element
02:23 - exists or not
02:24 - now this is different in a map in a map
02:27 - the order in which elements are inserted
02:29 - does not matter and it's not maintained
02:31 - so if you're using a map you need to be
02:33 - sure
02:33 - that you don't care about the order of
02:35 - different elements
02:36 - however this gives you some efficiency
02:38 - benefits this actually means
02:40 - i won't go into exactly how this works
02:42 - you can access an element
02:44 - and determine if it exists in constant
02:46 - time
02:47 - really what that means is that it
02:49 - doesn't matter how big the map is
02:51 - if the map has two elements or if it has
02:53 - 10 000 elements
02:55 - kind of generally speaking you'll be
02:57 - able to determine if an element exists
02:59 - almost instantly no matter how big the
03:01 - map is so this is a huge kind of
03:03 - efficiency booster
03:04 - if you're writing some type of program
03:06 - that's kind of searching for something
03:07 - or looking for something
03:08 - or needs to access or change an element
03:11 - and you're not sure if it's actually
03:12 - there in the map
03:13 - so let me show you kind of a
03:15 - visualization of a map you have some key
03:17 - these keys will all be the same type but
03:19 - they can be any type that you want so in
03:21 - this case i'm picking a char or
03:22 - character as my key
03:24 - and then a value this value again can be
03:26 - any type that you like but all of the
03:27 - values must be the same
03:28 - in this case the value is set so what
03:30 - i'm doing here is just making a map
03:32 - where i have a t and that maps to seven
03:34 - and s and that maps to maybe eight
03:36 - and then we have maybe a lowercase a and
03:39 - that maps to four
03:40 - now obviously i haven't actually like
03:42 - fully created a map in the way we would
03:43 - in c plus plus but this is kind of what
03:45 - a map looks like
03:46 - we have what's known as pairs these
03:48 - pairs have two
03:49 - attributes on them they have a first and
03:51 - a second
03:52 - so the first here is the key the second
03:55 - here
03:56 - is the value and will you use this key
03:58 - to either change or access this value
04:00 - and i'll show you some examples later on
04:03 - anyways though let's actually create a
04:05 - map so i'm going to copy this because
04:06 - i'll use this in a second
04:07 - but we first need to include the map
04:09 - library so i'm going to say
04:12 - include and then map all right
04:15 - so now i'm going to say map i'm going to
04:17 - do my two angle brackets
04:19 - i'm going to say int or i'll do whatever
04:21 - my types are sorry so my key is going to
04:22 - be char
04:24 - my value is going to be int i'll give
04:25 - the name of my map
04:27 - and if i just wanted to make an empty
04:28 - map i didn't want to put anything in it
04:29 - to start i would just stop like this and
04:31 - now i've declared a map
04:33 - now if i wanted to initialize this map
04:34 - with a value i would say is equal to
04:36 - and then this is exactly what i would
04:38 - type i would do two curly braces and
04:40 - then
04:40 - whatever my kind of pairs are i would
04:42 - write in this kind of format where i
04:44 - have curly brace
04:45 - my key comma my value closing curly
04:48 - brace comma and then the rest of my
04:50 - pairs
04:51 - so let's just run this make sure we
04:52 - don't have any errors all right
04:54 - everything is good
04:55 - and well now we can continue so first
04:57 - thing to see here
04:58 - how do we access an element in a map
05:00 - well to do this
05:01 - we use a similar notation to what we use
05:03 - for an array so i would say
05:05 - c out mp which is the name of my map
05:08 - and then here instead of an index i
05:10 - would say my key so i'd say
05:12 - maybe s now i can do end l uh oops we
05:15 - just need a one semicolon there
05:17 - and if i run this we get eight right
05:19 - because s maps to eight
05:21 - if i do a we get a 4 because a
05:24 - maps to 4 and t obviously we get a 7
05:28 - because well t
05:28 - maps to 7. awesome that's basic that is
05:32 - how you access the element associated
05:34 - with
05:34 - a key now what happens if you try to
05:36 - find a key that doesn't exist
05:38 - well if i do something like mp and maybe
05:41 - u
05:42 - notice that we just get 0. the reason we
05:44 - get 0 is because this key doesn't exist
05:46 - and so when it tries to find what's
05:47 - associated with u
05:48 - it's just returning us to us whatever
05:50 - the default value of this type
05:51 - is which is a 0. and so the thing is
05:54 - though
05:55 - this doesn't really tell us that u
05:57 - doesn't exist
05:58 - because you could theoretically map to
06:00 - the value
06:01 - 0. and so if we want to check and kind
06:03 - of get a true or false value to
06:05 - determine if a key actually exists
06:07 - what we need to do is kind of something
06:08 - special which i will show you in a few
06:10 - minutes
06:11 - anyways just keep that in mind that if
06:13 - you do something like this and the key
06:14 - doesn't exist
06:15 - it's not necessarily going to throw an
06:16 - error it's just going to give you some
06:18 - value that's kind of meaningless like
06:19 - this 0
06:20 - doesn't really tell us anything because
06:22 - if we don't know if it maps to 0
06:24 - or if 0 is just the default value and
06:26 - it's returning to us
06:27 - because z u sorry doesn't exist in the
06:30 - map
06:31 - anyways let's continue so now what i'm
06:33 - going to do is i'm going to add you to
06:34 - the map
06:35 - so to insert an element into the map you
06:37 - can say mp you can say the key you want
06:39 - to insert and then it's equal to
06:40 - and then let's just do like 9. so now if
06:43 - i do this
06:44 - you're going to see that we get 9 here
06:45 - because well now the key u exist
06:47 - in the map now there's another way to
06:49 - insert keys into the map
06:51 - i'll show you this it's called mp.insert
06:54 - and what this takes is a pair
06:56 - so this here is kind of the unformal
06:58 - notation of a pair
06:59 - now the way you actually create a pair
07:01 - you kind of initialize a pair if you're
07:02 - doing it in
07:03 - the most seepless plus structured typed
07:05 - way is your right pair
07:07 - you write the two angle brackets you
07:09 - write the two elements you want in the
07:11 - pair in this case i'm going to say char
07:12 - int because it needs to match the pairs
07:14 - that are in my map and then i would do
07:16 - the name of the pair although in this
07:18 - case i don't really need to
07:19 - and then i would just do the parentheses
07:21 - and i would put the elements i want in
07:23 - this pair so i could say maybe
07:24 - s or let's do a like j and let's make
07:27 - that map to 5.
07:29 - so now if i look at j after adding the
07:31 - semicolon here
07:32 - you're going to see that we get the
07:34 - value 5. so this is how you create
07:36 - a pair notice that i could have done
07:39 - something like this i could have said
07:40 - pair
07:41 - char int and then say something like p1
07:44 - and then do this and then i could
07:45 - actually insert the pair p1
07:48 - into this map and while the same thing
07:50 - would work this would be fine the only
07:52 - difference in this line here is i need
07:53 - to give my pair a name
07:54 - because i wasn't just immediately using
07:56 - it somewhere i'm kind of storing that
07:58 - this pair p1 exists
07:59 - and has these two values in it so
08:02 - hopefully that's kind of clear but this
08:03 - is what a pair
08:04 - is now what i want to show you with the
08:06 - pair though is that a pair has two
08:07 - attributes on it as i said a first and a
08:09 - second
08:10 - so if i'm looking at p1 and i look at
08:12 - its dot first
08:13 - that's going to give me j right and if i
08:15 - look at its
08:17 - second that is going to give me five and
08:20 - so
08:20 - all of the elements inside of your map
08:22 - really are pairs like that's that's
08:23 - actually what they are and so whenever
08:25 - you're accessing
08:26 - a kind of pair in the map you can look
08:28 - at the key and the value by looking at
08:30 - the dot first and the dot second
08:32 - property
08:32 - so hopefully that's clear but that's
08:34 - obviously how you insert a pair into the
08:36 - map
08:37 - now what i want to show you is a few
08:38 - other things that we can do so these are
08:40 - kind of the two ways to insert elements
08:41 - but now how do we erase
08:43 - an element well to erase an element what
08:45 - we can do
08:46 - is say mp dot erase and then we can put
08:49 - the key that we would like to erase so
08:51 - in this case i will erase the p1
08:53 - dots first that is going to be the j
08:56 - right and now if i try to access from my
08:58 - map
08:59 - the uh oops mp let's access the key j
09:03 - you're going to see that we will get
09:04 - oops we need a semicolon sorry about
09:06 - that you'll see that we get a zero
09:09 - because we deleted this key from the map
09:11 - so that is the way you can erase keys
09:12 - use erase you use the key that you would
09:14 - like to erase and then it will remove
09:16 - that pair awesome next thing we can do
09:18 - is clear a map so to clear a map you can
09:20 - say mp.clear
09:22 - this will effectively do the same thing
09:24 - it just removes everything from the map
09:26 - so sorry not removing an individual key
09:28 - just completely emptying the entire map
09:30 - so i say mp.clear
09:31 - notice we get a zero here because
09:32 - obviously well the map has nothing in it
09:34 - so the key j
09:35 - is not there there's another thing we
09:37 - can do we can check if a map is empty so
09:39 - i can say mp.empty
09:41 - this will return to me a 1 if it is
09:42 - empty and a 0 if it is not
09:44 - so we should get a 1 here because yes
09:46 - the map is empty however
09:48 - if i remove this clear and now i look at
09:50 - it
09:51 - the map is not empty and so we get a
09:53 - zero now next thing we can do is look at
09:54 - the size of a map
09:56 - so into mp.size this gives me the number
09:59 - of pairs that are in the map in this
10:01 - case that is
10:02 - five and that is kind of the basic maybe
10:04 - methods on a map
10:06 - all right so the next thing i'm going to
10:07 - show you how to do here is how to
10:09 - iterate
10:10 - through the values in a map so remember
10:12 - that a map does not store the order in
10:14 - which elements are added
10:15 - and when we want to access or check if
10:17 - something exists we can do it relatively
10:18 - in constant time
10:19 - meaning that it doesn't matter how big
10:20 - the map is we'll be able to find
10:22 - something or change that thing
10:23 - pretty much instantly anyways how do we
10:26 - loop through a map
10:27 - well i'm going to write a for loop out
10:28 - here and i'm just going to write out
10:30 - what we would need to do to iterate
10:31 - through it then i'll kind of go through
10:32 - step by step and explain what i'm doing
10:34 - so i'm going to say auto itr is equal to
10:38 - this is going to be mp dot i believe
10:40 - this is
10:41 - begin and then i'm going to say itr
10:44 - does not equal and then it's going to be
10:47 - mp.end
10:48 - and then i'm going to say plus plus itr
10:50 - so i know this is probably extremely
10:51 - confusing
10:52 - but let's go through it line by line so
10:55 - mp.begin
10:56 - what this gives us is what's known as an
10:58 - iterator object
11:00 - now these are a little bit confusing but
11:02 - the idea is whenever you have a
11:03 - collection data type
11:05 - so a data type that stores more than one
11:07 - element typically they implement
11:08 - something called an iterator
11:10 - what that means is that you can use this
11:12 - iterator to kind of
11:13 - loop through this structure because you
11:15 - can't just kind of set up your own for
11:17 - loop
11:17 - and maybe count from zero to four right
11:19 - going through all the indices of the map
11:21 - that doesn't work because you don't
11:22 - access elements based on their indices
11:25 - so instead these data structures have an
11:26 - iterator now when you say dot begin
11:29 - what this gives you is an iterator
11:31 - object this iterator object has
11:33 - access to the first pair in the map
11:36 - now i want to clarify here you do not
11:39 - know what the first pair is going to be
11:40 - the reason you don't know is because the
11:42 - map does not maintain any specific order
11:44 - and so when you say mp.begin
11:46 - you cannot be certain where you're going
11:47 - to start but you know that you will be
11:49 - given the
11:50 - first pair in the map based on however
11:52 - it's storing the different elements
11:53 - and then when you increment the iterator
11:56 - what this will do is move this iterator
11:58 - to the next pair
11:59 - and then to the next pair and that's the
12:01 - next pair so on and so forth
12:02 - and eventually when you get to mp.end
12:05 - this tells you you have iterated through
12:07 - the entire map so there is this dot end
12:10 - thing and well as soon as the iterator
12:12 - reaches this mp.end
12:14 - this means you finish the entire map
12:16 - you've looped through it you can stop
12:17 - and so these are the two things that you
12:19 - can use
12:19 - not just on maps but on a lot of other
12:21 - kind of collection data structures that
12:23 - store multiple elements for example you
12:25 - can do this on a tuple as well
12:27 - to determine or to be able to loop
12:29 - through the the structure
12:30 - now there's some other fancy things you
12:32 - can do with this i won't really go into
12:33 - those but
12:34 - when you're creating a for loop and
12:35 - you're iterating through something that
12:36 - is not straightforward to iterate
12:38 - through
12:38 - like you can't just do it like you would
12:39 - an array essentially then you need to
12:41 - use the dot begin
12:42 - and the dot end you need to increment
12:44 - the iterator as you normally would
12:46 - and the reason i put auto here is
12:48 - because this type is kind of complicated
12:50 - what the type actually is is mp colon
12:53 - colon
12:54 - iterator i believe that's correct
12:56 - actually we can test this out and see if
12:57 - it works
12:58 - but anyways i didn't want to write this
12:59 - out because i don't want to explain
13:01 - exactly like how the iterator works and
13:02 - where this type comes from and all of
13:04 - that
13:04 - so if you're unsure when you use the
13:05 - iterator you can just use auto and it
13:07 - will just infer the type based on
13:08 - whatever this returns so i'm going to
13:10 - leave it
13:10 - actually i'll leave it this and then we
13:11 - can change it back to auto if that
13:13 - doesn't work
13:14 - okay so now what's going to happen is
13:15 - i'm going to be given a pointer
13:18 - to all of these different pairs so itr
13:21 - will be equal to a pointer to the first
13:23 - pair
13:23 - a pointer to the second pair and a
13:25 - pointer to the third pair hopefully you
13:26 - guys understand now why i wanted to show
13:28 - you maps later because we need to
13:29 - understand pointers first
13:30 - but what that means is if i actually
13:32 - want to access the elements in this pair
13:34 - i must de-reference it
13:35 - so if i say c out and i just try to see
13:38 - out itr
13:39 - we're going to get an error so if i run
13:41 - this nothing works
13:43 - mp is not a class namespace or
13:45 - enumeration
13:46 - okay interesting uh let me look at this
13:49 - i'll be right back ah okay so i made a
13:50 - little bit of a mistake here i shouldn't
13:52 - have said mp
13:53 - instead for the actual type of this it
13:55 - is map the two types that you have so
13:58 - char comma int and then iterator and
14:01 - then that is the type for itr
14:03 - so yeah i made a mistake but this is
14:04 - actually what the type is it's whatever
14:06 - the
14:06 - map is that you are holding so whatever
14:08 - the pairs are and then colon coolant
14:10 - iterator
14:11 - now if i run this um you can see that
14:13 - iterator it
14:14 - or rate well if i spell iterator
14:16 - correctly then hopefully that'll work
14:18 - okay so there we go now that's working
14:19 - the error is now on this line not on
14:21 - this line
14:22 - anyways that's not what i really wanted
14:23 - to show here the whole point is that i
14:25 - can't just print out itr
14:26 - like this just doesn't work reason
14:29 - doesn't work is because this is a
14:30 - pointer to an object
14:31 - and well even if this was the object
14:33 - itself we can't just print out a pair we
14:35 - need to print out either the first
14:36 - element or the second element
14:38 - so anyways my whole point of showing you
14:39 - this is that itr is giving you a pointer
14:41 - so if you want to actually access say
14:43 - the first element or the second element
14:45 - what you need to do is first dereference
14:47 - error
14:48 - and then you can access the first and
14:50 - second kind of member or attribute of
14:52 - the pair
14:53 - so if i try to do itr.first you're going
14:56 - to see we get the same problem here
14:57 - we just cannot access dot first because
14:59 - right now
15:00 - we're on a pointer and we're trying to
15:02 - say pointer.first and well that's not
15:03 - defined that doesn't exist that makes no
15:05 - sense
15:05 - and so instead what i have to do is go
15:07 - asterisk i can put this in parentheses
15:10 - and then dot first and now we get all of
15:14 - the keys
15:14 - right because now we've de-referenced
15:16 - this iterator so it's no longer a
15:18 - pointer it's actually the
15:19 - object and then we have dot first so
15:21 - we're getting all of the different key
15:23 - values that are in our map
15:24 - now of course we can do the same thing
15:26 - for second so i say itr
15:28 - dot second and we get eight seven four
15:30 - five nine
15:31 - and notice here that uh this is not in
15:33 - the order in which we inserted elements
15:35 - right like we're getting eight first
15:36 - even though seven was the first element
15:38 - uh and then yeah we're getting five
15:40 - fourth even though this is the last
15:41 - element we inserted
15:42 - so just to prove to you like you can't
15:44 - be sure of what the order is
15:45 - now there is something that's a little
15:47 - bit shorter than doing this
15:49 - we can actually write iter arrow second
15:52 - now what this arrow does
15:53 - is exactly what i just wrote so the
15:55 - arrow is equivalent to
15:57 - dereferencing itr and then doing dot
16:00 - second so this is completely equal to
16:02 - itr
16:04 - arrow second it's kind of a shorthand
16:06 - notation just to make things a little
16:08 - bit faster so whenever you have a
16:09 - pointer if you want to de-reference it
16:11 - and then access some attribute
16:13 - associated with that element what you do
16:15 - is you just use the arrow so in this
16:17 - case this is a pointer to a pair
16:18 - the pair has this dot second thing that
16:20 - we can use and so since we need to
16:22 - de-reference it we just use the arrow
16:24 - and then that allows us to actually
16:26 - access this uh
16:27 - it's called a member of this class or of
16:29 - this attribute
16:30 - now i'm using a ton of fancy words here
16:31 - you don't really have to know what they
16:32 - mean just understand that this is kind
16:34 - of known as a method or a member or an
16:36 - attribute and people use those words
16:38 - like interchangeably all the time
16:40 - anyways that's the point of what this
16:41 - arrow notation does so if i do this now
16:43 - we see this still works again it's just
16:45 - dereferencing this then accessing
16:47 - the element all right so i'm going to
16:49 - print this out
16:50 - we're going to do iter first
16:54 - and then iter second awesome there you
16:56 - go we can see we get
16:57 - the key then the value the key then the
16:59 - value so on and so forth
17:01 - all right so now what i want to do is
17:02 - kind of give you a basic example of when
17:03 - you would actually use a map
17:05 - now the example i'm going to give you is
17:06 - something that you actually might be
17:07 - given in like a really simple coding
17:09 - interview question
17:10 - speaking of which if you are preparing
17:12 - for coding interviews you should check
17:13 - out the sponsor of this video and the
17:15 - series which is algo
17:16 - expert as you guys know algo expert is
17:18 - the best platform to use when preparing
17:20 - for your software engineering coding
17:21 - interviews
17:22 - c plus is a language on algo expert and
17:24 - so if you want to practice your
17:25 - programming problem skills
17:26 - make sure you look at algo expert from
17:28 - the link in the description and use the
17:29 - code tech with tim for a discount on the
17:31 - platform
17:32 - all right so let's resume now what we're
17:34 - going to do is we are going to create a
17:36 - string so let me actually erase all this
17:39 - i'm going to say string i'm going to say
17:41 - test is equal to i'm going to say
17:43 - hello world my name is tim and i'm just
17:46 - going to do a bunch of repeated
17:48 - characters here
17:49 - and what i want to do is i want to count
17:51 - the frequency
17:53 - of all of the characters in this string
17:55 - so i want something that tells me
17:56 - the character and the number of times
17:58 - that it occurs
18:00 - now if i was doing this without a map
18:02 - what i could do is maybe make an array
18:03 - or i could try to do something
18:05 - where like i associate a letter with a
18:07 - number and like it would be kind of hard
18:08 - to do this
18:09 - and what i would have to do is loop
18:10 - through this string a bunch of different
18:11 - times every single time looking for an h
18:14 - then an e then an l then an o and so on
18:16 - and so forth
18:17 - whereas what we're going to do here is
18:18 - use a map we're going to loop through
18:20 - this string one time
18:22 - and we're going to create a map that
18:23 - tells us the character
18:25 - and then that character maps to the
18:27 - number of times it occurs
18:28 - in this string so we're going to make a
18:30 - map we're going to say map we're going
18:31 - to say
18:32 - char int is equal to all right so we're
18:35 - going to call this freak like f r
18:37 - eq and then we'll just make this empty
18:40 - now what i'm going to do is i'm going to
18:41 - iterate through this string so i'm going
18:42 - to say 4
18:43 - into i equals 0 i'm going to say i is
18:47 - less than and then
18:48 - well how do you get the length of the
18:49 - string again i forget maybe a cell
18:51 - length maybe it's not size we'll see
18:53 - and then i plus plus or plus plus it
18:55 - doesn't really matter
18:57 - all right i'm going to say char letter
19:01 - is equal to and then this is going to be
19:02 - test at index i
19:05 - and let's just start by printing this
19:06 - out to make sure we haven't made any
19:07 - mistakes here so i'm going to say c
19:09 - out letter and l okay so let's run this
19:13 - and invalid use of member length
19:16 - i totally forget how you get the size of
19:18 - the string maybe it's dot size we're
19:19 - just going to experiment here let's try
19:20 - dot size
19:22 - same problem i think i need the uh
19:24 - parentheses at the end let's try it out
19:26 - length
19:27 - and there we okay so that actually works
19:28 - though okay so now if i go through here
19:30 - you can see we're printing out all of
19:31 - the different characters
19:33 - so hello hello my name is tim or hello
19:35 - world my name is tim and then
19:37 - t-t-t-h-h-h-a-a-a
19:39 - okay awesome so now we've gotten all of
19:40 - the letters so what i want to do now
19:43 - is i want to kind of count the number of
19:45 - times that they occur i'm going to use
19:46 - the map to do this
19:48 - the idea is i'm going to check if this
19:50 - letter exists in the map
19:52 - if it does i'm going to change the key
19:54 - associated with that letter to be one
19:56 - greater than it was before
19:58 - so by default you can imagine that all
20:00 - of the letters are in this map
20:01 - and they have a key equal to zero so as
20:03 - soon as i see this letter
20:05 - i want to go on the map increment the
20:06 - key by one and then continue and then if
20:08 - i see that letter again i'll increment
20:10 - the key again by one and again by one
20:11 - and so at the very end
20:12 - my map has all of my frequencies so the
20:15 - way that we do this is we need to first
20:17 - check
20:17 - if this uh what we call it if this
20:19 - letter exists in the map
20:21 - so i'm going to say if and here i'm
20:23 - going to say if and
20:25 - we will do freq dot
20:28 - find and then this is going to be letter
20:31 - does not equal and this is going to be
20:36 - freq dot end i'll explain how this works
20:39 - in fact actually i'm going to say is
20:41 - equal to then what i'm going to do is
20:43 - say
20:43 - map at and this is going to be letter
20:47 - is equal to zero okay so when i write
20:49 - dot find what dot find is going to do
20:51 - is return to me an iterator that points
20:55 - to
20:55 - the pair in the map that has this key
20:59 - and so what this will be equal to as i
21:00 - said is just a pointer right this
21:02 - pointer is really just an
21:03 - iterator like we saw when we were
21:04 - iterating through the map and if i
21:06 - wanted to
21:06 - access the pair associated with this key
21:09 - i would need to dereference it and then
21:10 - look at the first or second member
21:12 - so the idea here is that if this returns
21:14 - to me the freq
21:16 - dot end it returns to me the ending
21:18 - iterator that means
21:19 - that this letter does not exist in the
21:22 - map and so this is kind of how you check
21:24 - if something exists in the map or not
21:26 - you say whatever the name of the map is
21:28 - dot find now if this is not
21:30 - equal to the end that means okay you
21:31 - have found this letter in the map
21:34 - but if it is equal to the end that means
21:35 - that this letter does not exist and
21:37 - therefore it's giving you the very end
21:38 - of the map that's the return value right
21:40 - and so if this is the case if we're
21:42 - getting the end we're going to say map
21:44 - at letter is equal to zero so we're
21:46 - inserting a key
21:47 - and sorry this should say frequency
21:49 - which is equal to
21:50 - whatever the letter is that we just
21:52 - found and we're setting that equal to
21:53 - zero
21:54 - and then what i'm going to do down here
21:55 - is say frequency
21:57 - at letter plus plus now this is
22:00 - equivalent to plus
22:01 - equals one this is equivalent to is
22:03 - equal to
22:04 - freak at letter plus one
22:08 - all of them are the same thing but plus
22:10 - plus is kind of the shortest and
22:12 - most common way to do this all this is
22:13 - going to do is take the
22:15 - key value or take sorry the value at
22:17 - letter and just add one to it
22:19 - and that's how it's going to work so now
22:22 - let's actually just see out
22:24 - fr eq at
22:27 - letter let's also see out like a comma
22:30 - here and then let's see out what the
22:32 - letter is
22:32 - so we'll see out uh letter
22:36 - and then end up so now we can kind of
22:38 - see as it as it's counting
22:39 - so let's do this and notice that what we
22:42 - get
22:43 - is one h one e one l
22:46 - two l one o one space this is like an
22:50 - empty string
22:50 - one w two o one r three l right it's
22:54 - counting and giving us the frequency all
22:56 - of all of these letters
22:58 - and so now that we have this frequency
23:00 - what we can do is print out the
23:01 - frequency of all the letters that occur
23:02 - so i'm gonna say
23:03 - four i'm going to say auto
23:07 - itr is equal to and then this is freq
23:11 - dot uh begin i'm going to say wow
23:14 - itr does not equal freq dot
23:18 - end and then i'm going to say plus plus
23:20 - itr
23:21 - all right now what i'm going to do is c
23:24 - out
23:24 - i'm going to see out whatever the letter
23:26 - is so in this case i will say
23:28 - itr arrow first
23:32 - and actually before i do that oh no
23:34 - actually we'll just do it like that
23:35 - and then i will add a colon a space and
23:38 - then i will uh do the frequency so i
23:40 - will say
23:40 - itr and this is going to be second
23:44 - and then end l okay so we're just
23:48 - iterating through the map we're going to
23:49 - print out the letter a colon to kind of
23:50 - separate it from its frequency then the
23:52 - frequency and then end line so if we
23:54 - look at this now
23:55 - you can see that we now have the
23:57 - frequency of all of the things we have
23:58 - six spaces right
24:00 - we have one exclamation point one h four
24:02 - a's one d
24:03 - two e's two h's two eyes three l's and i
24:06 - mean i don't need to read all of them
24:07 - you guys get the idea
24:09 - all right so that is kind of all i need
24:10 - to show you with maps
24:12 - hopefully this was a decent example to
24:14 - kind of bring a lot of the stuff we've
24:15 - done in this series together
24:17 - and kind of show you why we would
24:18 - actually use a lot of the stuff that
24:20 - we've seen
24:21 - anyways if you guys enjoyed make sure to
24:22 - leave a like subscribe to the channel
24:24 - i will see you in another youtube video