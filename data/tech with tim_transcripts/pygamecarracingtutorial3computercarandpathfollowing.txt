00:02 - [Music]
00:08 - hello everybody and welcome to the third
00:10 - video in this pie game car racing
00:12 - tutorial series in this video i'll be
00:15 - implementing the computer car so we're
00:17 - going to set up a path for this car to
00:19 - follow along with then we're going to
00:20 - make it follow the path which is much
00:22 - more complicated than it seems
00:24 - let's get started so the first thing i
00:26 - want to do here is make a class for my
00:28 - computer car so i'm going to say class
00:31 - computer car like that it's going to
00:33 - inherit from abstract car and then
00:36 - inside of here i'm going to define the
00:39 - image for my car as well as the starting
00:40 - position so i'm going to say image is
00:42 - equal to and this will be the green car
00:46 - and the starting position will be 150
00:48 - okay that's pretty straightforward for
00:50 - the computer car next i'm going to
00:52 - override the initialization so i'm going
00:54 - to say define init
00:56 - self this is going to be
00:58 - maxwell
01:00 - and rotationville
01:02 - is giving me that very good and then i'm
01:04 - also going to take in a path which is
01:06 - going to be equal to an empty list by
01:08 - default then what i'm going to say is
01:10 - self dot not self actually super
01:14 - dot underscore underscore init under
01:15 - squad underscore and i'm going to pass
01:17 - the max velocity and the rotation bell
01:21 - what this is going to do is use this
01:23 - method right here to initialize all the
01:25 - values that i need and then i'm just
01:27 - going to initialize a few more under
01:28 - here i'm going to say self.path is equal
01:31 - to path path is going to be a list of
01:34 - coordinates of points that i want my
01:35 - card to move to and i'm going to say
01:37 - self.current underscore point is equal
01:41 - to zero because i need to know what
01:42 - point in my path i'm currently at
01:45 - then i'm going to say self.vel is equal
01:47 - to the maximum velocity because my
01:49 - computer car we don't need to worry
01:51 - about acceleration it's just going to
01:53 - immediately start at the maximum
01:54 - velocity and will move at that speed the
01:56 - entire time
01:58 - okay now we have the computer car
02:01 - the next thing i want to do is just
02:02 - implement a method on this car that can
02:04 - draw all of the points in the path just
02:06 - because this will be useful for us to
02:07 - visualize
02:08 - so i'm going to say define
02:10 - draw points and i'm going to say self
02:13 - and we'll take in a window
02:14 - and i'm going to say 4 point in
02:18 - self dot path i guess we could have
02:20 - called that points too but that's fine
02:22 - and then we'll say pygame
02:24 - dot draw
02:27 - dot
02:28 - circle
02:29 - and we'll draw this on our window we
02:31 - need to pass the color of our circle
02:33 - which is going to be red so in pi game
02:35 - the colors are rgb so red green blue so
02:37 - 255 is full red zero green zero blue
02:41 - then i'm going to pass the point this is
02:43 - the going to be the center of the circle
02:44 - that i want to draw and then the radius
02:46 - will go with five so that means we're
02:48 - going to have a diameter of 10 for our
02:50 - circle so that should draw all of the
02:51 - points for us that's pretty
02:52 - straightforward okay now we have drop
02:54 - points
02:55 - next i want to make some feature that
02:58 - allows us to actually kind of click on
03:00 - the screen and
03:02 - i guess draw create select all of the
03:05 - points for our path so that way we don't
03:07 - have to manually add them inside of this
03:09 - path variable so you'll see what i mean
03:10 - in a second but first let's create a car
03:12 - let's go computer
03:14 - underscore car is equal to computer car
03:17 - we need to pass a maximum velocity and a
03:20 - rotation velocity so for now let's just
03:22 - go with 4 4 we'll match our player
03:24 - although we will reduce this later and
03:26 - then for the path we won't pass anything
03:28 - right now because we're going to kind of
03:30 - dynamically create the path okay so now
03:32 - we've made computer car let's draw it so
03:35 - let's pass computer card to our draw
03:36 - function and then let's go to draw
03:39 - let's take in computer car
03:41 - and let's do computer car dot draw and
03:44 - inside of here let's draw on the window
03:47 - and then what we will do is we will
03:50 - override the draw method in here so
03:52 - we'll say
03:53 - define
03:54 - draw
03:55 - self
03:57 - win will then say super
04:00 - dot draw so we'll call the draw method
04:03 - from the abstract class here so we'll do
04:05 - this
04:06 - but before we do that we will draw all
04:09 - the points or after it doesn't really
04:10 - matter but we'll draw the points so
04:11 - we'll say super dot draw
04:13 - we need to pass the win and then we'll
04:15 - say self dot draw points
04:17 - and the window so now when we draw our
04:19 - computer it will also draw all of the
04:21 - points in the path for this ai computer
04:24 - or whatever okay there we go
04:27 - now that we have that let's just run the
04:29 - code and see if the computer is being
04:31 - drawn
04:32 - and then we will continue okay great so
04:33 - the computer car is there that's all we
04:35 - were looking for okay let me clear the
04:37 - console here
04:38 - now let's continue so the next thing i
04:40 - want to do is make it so we can click
04:41 - with the mouse and that adds a point to
04:43 - our computer's path and then we can get
04:45 - all of those points at the end of the
04:47 - program so we don't have to manually
04:48 - write them this is pretty easy i'm going
04:50 - to go inside of my event loop here so
04:52 - for event in pygame.event.get i'm going
04:55 - to say if event dot type equals equals
04:57 - pi game dot
04:58 - this is going to be mouse
05:01 - button down like that then what we're
05:03 - going to do is get the position of the
05:04 - mouse we're going to say pause is equal
05:06 - to
05:09 - dot pygame.mouse.get underscore pause
05:12 - and this will give us the x y coordinate
05:14 - of our mouse on the pi game screen then
05:17 - we will say computer car
05:20 - dot path
05:21 - dot append position so we'll add that
05:24 - position to the computer's path okay
05:26 - that's really all we need to do except
05:28 - at the end of our program we're just
05:29 - going to print out the computer car dot
05:32 - path just so that we can copy it and
05:34 - then save it in our file and use it for
05:36 - future use so let's run the code
05:38 - and let's see what we get here okay we
05:41 - get our computer car now let's start
05:44 - adding some points so i'm going to add
05:45 - one here i'm going to add one here
05:48 - and i'll just add all these and then
05:50 - once i'm done i'll be right back okay so
05:52 - i've added all of my points here you can
05:53 - see this is kind of the path that i've
05:55 - defined i've tried to spread them out as
05:56 - much as possible but it doesn't really
05:58 - matter i mean just add the points and
06:00 - make them on the track and you'll be
06:02 - good you could put them off the track
06:03 - because we're not checking collision
06:05 - with the walls but obviously the better
06:07 - you make your points the better this is
06:09 - going to be now i recommend you do
06:10 - spread them out a bit if you make them
06:12 - too close you're going to see it's going
06:13 - to look like all jittery when we're kind
06:15 - of turning and angling towards them
06:17 - anyways that's fine okay so let's close
06:19 - this and notice when i close this it
06:21 - prints out all the points so what i'm
06:22 - going to do is copy all the points and
06:24 - i'm just going to make a variable at the
06:25 - top of my program here called path
06:28 - and i'm going to have it store all of
06:29 - these points just so that i can use this
06:32 - with my computer right with my computer
06:34 - card
06:35 - so now
06:37 - what i will do is i will actually go to
06:40 - where i initialize my computer
06:42 - and i will pass that path so now that
06:44 - will be set for my computer and i'm
06:46 - going to get rid of this mouse button
06:48 - down logic because i no longer need that
06:50 - because my path has been set so now that
06:52 - i have the path let's just run this
06:54 - and notice the path is still printing
06:56 - out it's you know saved right because i
06:58 - have it in a variable great then of
07:00 - course my red car can continue to move
07:01 - just like it did before
07:03 - awesome so now that we have that what i
07:06 - want to do is hop over to paint and i
07:08 - want to show you or discuss how we're
07:12 - actually going to kind of solve this
07:14 - problem of
07:15 - moving the computer car towards these
07:18 - points and it's pretty complicated to do
07:20 - this but i will try my best to explain
07:23 - so let's say our target point
07:26 - is right here and our computer
07:29 - is right here okay it's our computer car
07:31 - so let's just go c this is car
07:33 - now the first thing that's kind of
07:34 - intuitive to do here is to draw a line
07:37 - between the top left hand corner
07:39 - and the point that we want to get to now
07:42 - we're going to be using the x xy as the
07:43 - top left-hand corner of our car so keep
07:45 - that in mind that is pretty important
07:47 - for this and anyways there we go so we
07:49 - have our target and we have
07:51 - you know our car
07:52 - now how do we get to this point well the
07:54 - first thing we can do is we can
07:56 - calculate the displacement in x and the
07:58 - displacement in y
07:59 - right so we know the velocity
08:02 - but we do not know the angle and so what
08:04 - we're actually going to want to look for
08:06 - here is the angle between our computer
08:10 - and this point if we know the angle then
08:12 - we can tilt our car to that angle and
08:15 - then we can move in that direction
08:17 - easier said than done but that's the
08:18 - goal we want to find the angle between
08:20 - our car and the point that we want to
08:22 - get to and then we want to set the car
08:24 - so that it's facing that direction and
08:26 - then just move the car in the same way
08:28 - that we moved our player car because we
08:30 - already know how to move the player card
08:31 - right that part is done we've
08:32 - implemented that logic so anyways we
08:34 - have x and we have y now we can easily
08:38 - calculate x and y because we know the
08:40 - coordinates of this point and we know
08:41 - the coordinates of this point we would
08:42 - just take this point's x subtract by
08:45 - this point x that gives us the
08:47 - displacement in x this points y subtract
08:49 - by this points y that gives us the
08:51 - displacement in y now it doesn't really
08:53 - matter if we get negative or positive
08:55 - values we could take the absolute value
08:57 - if we want but it doesn't matter if we
08:58 - get negative or positive okay finding
09:00 - the angle is still going to be the the
09:01 - same sorry and then we have our velocity
09:04 - now the velocity we don't really need to
09:05 - use but we know the velocity is going to
09:07 - be the hypotenuse of the triangle
09:09 - okay that's fine so what we're trying to
09:11 - do here is determine the angle we know x
09:14 - y and v so there's multiple ways to do
09:16 - this now remember our equations are
09:19 - so
09:20 - this is going to be an h let me erase
09:22 - that so
09:24 - ka
09:26 - and then
09:27 - toa
09:28 - now in this case it seems intuitive to
09:30 - me to use toa because we know the
09:32 - opposite and we know the adjacent so
09:35 - what we can do if we want to solve for
09:36 - theta which is the angle that we're
09:38 - looking for is we can write the equation
09:41 - tan
09:41 - and then this is going to be of theta
09:44 - is equal to
09:46 - o over a now we can do our substitutions
09:49 - and when we do our substitutions we see
09:51 - that o is y
09:53 - and that a is x so we know x and y those
09:56 - are two variables that we know so now we
09:58 - want to solve for theta so any of you
09:59 - that know trigonometry know that we have
10:00 - to take the inverse tangent of this and
10:03 - then that will give us
10:05 - theta so we can say theta
10:07 - is equal to and then tan
10:11 - inverse of
10:12 - y
10:13 - over x and then that will give us the
10:15 - angle that we're looking for and in fact
10:18 - this is actually always going to give us
10:20 - what's known as an acute angle now an
10:22 - acute angle is any angle that's less
10:24 - than 90 degrees now it will give us
10:26 - either a positive or negative acute
10:28 - angle so we could get a negative value
10:30 - here or a positive value here if we get
10:32 - a negative value here that's indicating
10:34 - to us that we are looking to the left if
10:35 - we get a positive value then to the
10:37 - right anyways that's not super important
10:39 - right now but just keep in mind this is
10:41 - how you calculate theta and that this is
10:43 - always going to give us an acute angle
10:45 - that is important it's always going to
10:47 - give us something based on the way we're
10:48 - doing this calculation that is less than
10:51 - 90 degrees
10:52 - okay so now we have found the angle so
10:54 - we found the angle between our car
10:57 - and our point so it should be simple
10:58 - enough right just set the car at that
11:00 - angle well it's not quite that simple
11:02 - the reason why it's not quite that
11:03 - simple is because if our car is like
11:05 - facing this direction and we want to go
11:07 - over here if i just set its angle to
11:09 - that it's going to look like it's just
11:11 - teleporting over that would be the easy
11:13 - solution just set the angle and then
11:14 - that'd be fine but if we do that what
11:17 - happens is first of all we're going to
11:18 - have our car facing the wrong direction
11:20 - a lot of times we're also going to have
11:22 - the car flipping instantly which we
11:24 - don't want we want it to kind of slowly
11:26 - transition to that angle by its
11:28 - rotational velocity we don't want it to
11:31 - just teleport over and face that
11:32 - direction so now comes the problem okay
11:35 - we know that angle we know the angle our
11:37 - car is currently facing how do we
11:39 - determine what direction to turn the car
11:42 - to get to that angle that's really the
11:44 - problem now we know the angle we know
11:46 - the angle of our car now we just need to
11:48 - actually make this car get to that angle
11:51 - so there's a few problems here
11:53 - again the first problem is that we need
11:55 - to make sure we aren't just teleporting
11:56 - so we have to kind of decide do we want
11:58 - to go to the left or do we want to go to
12:00 - the right now this might seem easy when
12:02 - you're looking at an angle like this but
12:04 - there's so many different angles we
12:06 - could possibly have and sometimes we
12:08 - could take the unoptimal approach if we
12:11 - only ever went to the left or only ever
12:12 - went to the right when trying to get to
12:14 - these angles so for example let's say we
12:16 - have this okay let's just move this over
12:18 - a bit let's say our target angle is here
12:21 - okay and our car is facing this way so
12:24 - car is black and the target angle is red
12:26 - now what way should we turn to get to
12:28 - this target angle well we should turn
12:30 - this way however we might end up turning
12:33 - this way so this is kind of the problem
12:35 - we need to figure out which way to turn
12:37 - now another problem that we're going to
12:38 - run into potentially here is that we
12:40 - might have the angle
12:42 - be here so let's imagine this guy is is
12:45 - gone okay
12:46 - we might have it be here now
12:48 - theoretically
12:50 - me turning like this
12:53 - is actually going to make it look like
12:56 - we have the same angle i know this seems
12:58 - really weird but the way that this angle
13:00 - is calculated
13:02 - means that
13:03 - this could actually be this or other way
13:06 - around we could get this angle
13:09 - from this so we need to
13:11 - kind of put in some checks here to
13:13 - ensure that if we're actually moving
13:15 - downwards we're actually going to go in
13:18 - the downward direction we're not going
13:19 - to mistakenly calculate this angle the
13:22 - reason why this is a problem is because
13:23 - these two angles are the same right if
13:26 - you look at this angle and you look at
13:27 - this angle they're the same and so when
13:29 - i do the tangent based on the way that
13:31 - i'm doing it i could get this when my
13:34 - point is down here and so i need to make
13:36 - sure that i'm actually looking at what
13:38 - direction my point is in if it's lower
13:40 - or higher than where i am and based on
13:43 - that i'm going to need to make an
13:44 - adjustment to the angle i get to ensure
13:46 - that i'm going the right direction so
13:48 - i'm just trying to kind of point out
13:49 - some of the problems that you can run
13:51 - into doing this and there's all kinds of
13:53 - other problems as well
13:55 - for example right like i was saying we
13:57 - might go and try to go like this when
13:59 - instead it would be more efficient to go
14:01 - like this so if we ever have
14:04 - a very large angle we'll actually want
14:06 - to reduce that angle to a smaller yet
14:09 - equivalent angle so that we end up
14:12 - moving in the i guess best direction the
14:14 - quickest direction to get to it i also
14:16 - realize that all of my lights turned off
14:18 - here i'm just going to turn them back on
14:20 - i'm sure you guys can still see my face
14:21 - fine but i have like these background
14:23 - lights that for some reason went off
14:25 - okay so that's a bit better
14:26 - okay anyways that was kind of the point
14:28 - of this i'm sure this hasn't cleared
14:30 - everything up i haven't necessarily
14:31 - stated the solution i just wanted to
14:33 - show you problems that can happen and
14:35 - really the main problem is what
14:37 - direction do we do we go do we go left
14:39 - or right that's the main idea
14:41 - so let's now start trying to implement
14:43 - this so we will continue in one second
14:45 - but i need to quickly thank the sponsor
14:47 - of this video and this series which is
14:48 - algo expert algo expert is the best
14:51 - platform to use when preparing for your
14:52 - software engineering coding interviews
14:54 - not only do they have a ton of coding
14:56 - interview practice questions they also
14:57 - have mock interviews a data structures
14:59 - crash course and a bunch of other
15:01 - awesome features to help you prepare to
15:03 - land your dream software engineering job
15:05 - with that said check out algo expert
15:07 - from the link in the description and use
15:08 - the code tech with tim for a discount on
15:10 - the platform i'm going to go into
15:12 - computer car
15:13 - and i'm just going to define
15:15 - a move method
15:17 - now this move method is special because
15:19 - when i'm moving i need to move towards a
15:21 - point so the first thing i need to do is
15:23 - angle the car in the correct direction
15:25 - and if i am in the correct direction
15:27 - then i can start moving towards that
15:28 - point and we already know how to move we
15:30 - can just use the move method that we
15:32 - have inside of here right if we're
15:34 - angled in the right direction and we're
15:35 - going by a static velocity then that's
15:38 - fine so i need to look at my other code
15:40 - here because it's very easy to mess this
15:41 - up so inside of move what i'm going to
15:44 - do is just make sure that we have a
15:45 - point to move to i'm going to say if the
15:48 - self.current point
15:49 - is greater than or equal to the len of
15:53 - self.path
15:54 - then i'm going to return this is just
15:56 - going to ensure that we are not going to
15:58 - get an index error by trying to move to
16:01 - a point that doesn't exist that's the
16:02 - point of this line
16:04 - after that i'm going to say
16:05 - self.calculate
16:07 - and this is going to be angle now we
16:09 - will write this method in a second but
16:11 - this is going to calculate the angle and
16:12 - shift our car in that direction the next
16:15 - thing we're going to do is say self dot
16:17 - update
16:18 - underscore path underscore point
16:21 - now what this is going to do is see if
16:23 - we need to move to the next point
16:24 - because as soon as we hit a point we
16:26 - collide with that point we then move to
16:28 - the next one
16:30 - that's it and then here
16:31 - we're going to say super
16:33 - dot move
16:34 - so we're going to actually call manually
16:36 - the move method that we're overriding
16:39 - inside of car okay so let's start by
16:42 - implementing calculate area or calculate
16:44 - angle i'm going to say define
16:46 - calculate angle
16:48 - self the first thing i want to do is
16:50 - calculate the displacement in x and y
16:53 - between the target point and my current
16:55 - position once i do that then i can find
16:57 - the angle between my car
16:59 - and the point and then i can adjust the
17:02 - position or angle of my car accordingly
17:04 - to move towards that target point so i'm
17:06 - going to say
17:08 - target underscore x
17:10 - target underscore y is equal to and then
17:14 - it's going to be self.path
17:16 - at the self.current point index this is
17:18 - getting our target point then i'm going
17:20 - to calculate the difference in x i'm
17:21 - going to say the x diff is equal to the
17:24 - target x underscore x
17:27 - minus the self.x
17:29 - then i'm going to say the y diff is
17:32 - equal to the target underscore y
17:35 - minus the self.y now i don't care about
17:37 - the absolute value because my tangent
17:39 - function will actually handle any
17:40 - negative values here and it can
17:42 - potentially give me a negative angle
17:44 - we will handle the negative angles the
17:45 - negative angle is just you know going to
17:47 - i guess the right instead of the left or
17:48 - the left inside the right it doesn't
17:50 - really matter okay so now that i have
17:52 - both of these i'm just going to say if y
17:54 - underscored diff is equal to zero then
17:56 - the the desired underscore radian
18:00 - underscore angle is equal to and i want
18:03 - to say 180 but i want this to be in
18:05 - radians
18:06 - sorry not 180 i want this to be 90. and
18:09 - so in radians this is going to be
18:12 - math.pi divided by 2
18:14 - because math.pi is 180 degrees 2
18:17 - 2 math.pi is 360. so the reason for this
18:20 - is that if the y difference is 0 i need
18:22 - to manually set the angle because
18:25 - my equation involves a division of the y
18:27 - difference and i can't have a zero
18:28 - division error so you'll see what i mean
18:30 - here i say else
18:32 - the desired radian angle is equal to and
18:35 - this is going to be the math.arc tangent
18:38 - so the inverse tangent of and then this
18:40 - is going to be math dot no not math
18:43 - sorry this is going to be x diff over y
18:45 - diff
18:46 - okay so this is going to give me the
18:48 - angle that is between my car and between
18:51 - the point and then same thing here this
18:54 - will give me that angle so if we have no
18:56 - difference in y then that means that
18:58 - we're horizontal right we're either 90
19:01 - degrees or we're either 270 degrees now
19:03 - in this case we'll just make it at 90
19:05 - degrees because 90 and 270 are
19:07 - equivalent angles not in direction but
19:09 - in like the magnitude of the angle if
19:11 - you divide them
19:12 - hopefully that's making sense but we
19:13 - just need to avoid having an over zero
19:16 - so that's why i'm writing this line here
19:18 - okay
19:19 - now that we have that what i want to do
19:21 - is i want to kind of implement a clause
19:24 - here that's going to
19:27 - fix this angle slightly if a certain
19:29 - thing occurs i'm being very vague but
19:31 - let's just write it i'm going to say if
19:33 - the target underscore y is greater than
19:36 - so it's lower down on the screen than
19:39 - self.y then what i want to do is say the
19:41 - desired radian angle plus equals and
19:45 - this is going to be math.pi
19:47 - so the reason i'm doing this is kind of
19:49 - what i discussed before
19:51 - we can potentially have a problem where
19:54 - the angle that we calculate
19:56 - is it's always going to be an acute
19:58 - angle right and so if the target that
20:00 - we're looking for is actually lower down
20:03 - on the screen than where our current car
20:05 - position is
20:07 - the turn that we need to make is more
20:09 - extreme than what the angle is that
20:12 - we're getting maybe we're getting an
20:13 - angle of 25 degrees right and the reason
20:15 - we're getting 25 is because 25 kind of
20:17 - spans this whole horizontal line and so
20:20 - we're looking at it like this but what
20:22 - we really want is to add a whole math.pi
20:25 - add 180 degrees to it so we go in the
20:27 - complete opposite direction of what the
20:30 - angle is that we calculated because
20:32 - we're going down because remember we're
20:34 - always going to get an acute angle so
20:36 - we're always going to be going kind of
20:37 - this way or this way so we need to
20:39 - figure out if we need to go the opposite
20:41 - direction down now in that case well the
20:44 - case is this if target y is greater than
20:47 - self thought why we're going down so we
20:49 - have to add math.pi to the angle to
20:51 - ensure that we're going to go the
20:52 - correct direction
20:54 - i'm sure this is confusing but that's
20:56 - really the best way that i can explain
20:58 - it i'm not a math professor and i don't
21:00 - want to get too much into it because i'm
21:01 - sure i'll butcher the the mathematical
21:03 - explanations of all the angles
21:05 - anyways there we go okay so that's kind
21:07 - of the first thing that we need to do
21:08 - now that we have that though we're going
21:10 - to say the difference
21:11 - in angles is or just angle actually is
21:14 - equal to self.angle
21:16 - minus and then the desired radian angle
21:18 - now we need to first convert this to
21:20 - degrees so we're going to say math dot
21:23 - degrees like this
21:25 - okay so remember this is going to give
21:27 - us the angle in radians so then we
21:29 - convert it to degrees and then we take
21:31 - whatever our current angle is and
21:32 - subtract it by whatever the desired
21:34 - angle is to get to and then based on if
21:37 - this number is positive or negative
21:38 - we're going to know if we have to move
21:40 - left or right now another problem
21:42 - happens here what if the difference in
21:44 - these angles is really massive what if
21:46 - it's 270 degrees what if it's 290
21:49 - degrees in fact what if it's anything
21:51 - larger than 180 degrees
21:53 - well if the difference in the angle is
21:55 - larger than 180 degrees we are going to
21:58 - be taking an inefficient route to get to
22:01 - the angle so let me show you what i mean
22:03 - if i go to paint here and we zoom in
22:08 - so let's go come on zoom in control plus
22:11 - does that not zoom okay let's just move
22:13 - this okay so let's say we have this
22:14 - example here right
22:16 - where we have some angle here and
22:18 - actually let's just do one here and then
22:20 - we have another angle here now if we
22:22 - calculate the distance between this
22:24 - angle or the difference between these
22:26 - angles maybe we get something like
22:28 - 220 degrees okay that's fine but if we
22:31 - were to go in this direction to get to
22:33 - this angle we need to travel 220 degrees
22:36 - whereas if we go in this direction to
22:38 - get to this angle then we have to only
22:41 - go
22:42 - 140 degrees uh is 140 degrees correct
22:45 - yeah 360. yeah 140 i think that's right
22:47 - okay so we only have to go 140 degrees
22:49 - so obviously we would prefer to go 140
22:51 - degrees then to go
22:53 - 220. so what are we going to do if we
22:56 - have an angle that's greater than 180
22:58 - degrees well if we have an angle greater
23:00 - than 180 we know we're taking an
23:01 - inefficient route so all we'll do is
23:03 - we'll take this angle and we'll subtract
23:06 - so let's say it's 220 we'll subtract 360
23:10 - from it now you might be saying well why
23:12 - don't you do the other way the reason
23:13 - i'm not doing it the other way is
23:15 - because i want to actually get the
23:18 - negative angle by going backwards so if
23:20 - i have 220 by minus 360 then what i'm
23:23 - going to get here is negative 140 which
23:25 - is what i want because i don't want to
23:27 - go 140 degrees this way i want to go the
23:29 - other direction 140 degrees so that is
23:32 - how i'm going to kind of fix this
23:34 - problem of potentially turning the wrong
23:36 - direction is i'm going to simplify this
23:38 - or i'm going to do this this check to
23:40 - make sure we're going in the right
23:41 - direction
23:42 - okay so anyways we have the difference
23:44 - in angle and now we're going to say if
23:46 - the difference in angle is greater than
23:48 - or equal to 180 degrees and we're just
23:51 - going to say the difference in angle
23:52 - minus equals 360. so now we'll turn the
23:56 - opposite direction so now that we have
23:58 - calculated the difference in the angles
24:01 - we don't even care what the difference
24:03 - is well we actually will use in a second
24:05 - but we just want to move in the right
24:06 - direction now to get towards the angle
24:08 - that we want so we're going to say if
24:10 - the difference in angle is greater than
24:12 - zero so if the difference in angle is
24:14 - greater than zero notice we're having
24:16 - our angle first and then the angle that
24:18 - we want to get to we want to go the
24:20 - other way we need to go to i guess the
24:23 - right as opposed to the left and the
24:25 - reason for that is when we go to the
24:26 - left we increase our angle if our angle
24:29 - is already greater than the angle that
24:31 - we desire we need to go the opposite
24:33 - direction to get to that angle so we're
24:35 - going to say self dot and then angle is
24:38 - going to be minus equals and this is
24:40 - going to be
24:41 - the
24:42 - actually let me check here the minimum
24:46 - of self
24:47 - dot rotation velocity
24:50 - and then the absolute value of the
24:52 - difference in the angle let me check
24:55 - that's all good okay that's what we want
24:57 - so the reason for this is that i don't
24:59 - want to potentially pass the angle going
25:02 - the other direction so let's say the
25:03 - difference in the angle is 3 degrees and
25:05 - my rotational velocity is 4 degrees if i
25:07 - just straight up go 4 degrees to the
25:10 - right i'm going to pass by the angle
25:12 - that i want and then what's going to
25:14 - happen is i'm going to pass by it and
25:15 - now all of a sudden i'm going to be 1
25:16 - degree less than the angle that i want
25:19 - and so i'm going to have to move back
25:21 - the other way but i can only move by my
25:23 - rotational velocity so i'm going to move
25:24 - back by that so what's going to happen
25:26 - is you're going to be like shut up
25:27 - you're going to be like stuttering back
25:28 - and forth like left right left right
25:30 - which you don't want you want to just be
25:32 - you know steadily on the angle so the
25:34 - point of this kind of min right here is
25:37 - that if the difference in the angle is
25:38 - less than the rotational velocity we'll
25:41 - move by that amount so we snap precisely
25:43 - on the angle we aren't going like above
25:45 - the angle below the angle above the
25:47 - angle below the angle that's that's the
25:48 - point
25:49 - okay so now that we have this
25:52 - we're just going to say else because if
25:54 - it's not greater than 0 then it must be
25:56 - less than or equal to zero and here
25:58 - we're just going to swap this to a plus
26:00 - now i think we can just leave the exact
26:02 - same thing in here yeah we can and that
26:03 - should actually be good that will
26:05 - actually rotate our car so that it's
26:07 - going to move towards the point so that
26:10 - is kind of the trickiest part right
26:12 - there um this very complicated method
26:14 - i'm sure this doesn't make 100 sense it
26:17 - doesn't have to if i'm being honest with
26:19 - you i don't understand it 100 this is a
26:21 - lot of trial and error to get this to
26:23 - work but hopefully what i explained
26:24 - gives you some sense of why we're doing
26:27 - the things that we're doing
26:28 - angles are difficult that's the the
26:30 - moral of the story and of this tutorial
26:32 - series
26:32 - okay continuing now that we have that
26:35 - what i would like to do is i would like
26:37 - to make sure that we move to the next
26:39 - point in our path when we are ready to
26:41 - do that so i'm going to say define
26:44 - update
26:46 - underscore path point like that and then
26:48 - inside of here all i'm going to do is
26:50 - check for collision with the points that
26:53 - we have so whatever point i'm currently
26:56 - on i'm going to see if my car has
26:57 - collided with it and if it has collided
26:59 - with it then i've hit that point we can
27:01 - go on to the next one
27:02 - so let me just look at my cheat sheet
27:05 - right here okay that looks good i'm
27:07 - going to say the target is equal to and
27:09 - this is going to be self dot path
27:12 - at self dot current point i'm then going
27:15 - to create a rectangle from my car yeah
27:18 - that's what we're going to do we're
27:19 - going to say rect is equal to
27:21 - pi game
27:23 - dot and then this is going to be
27:25 - i guess it's just wrecked yeah i think
27:26 - it is just wrecked pie game direct and
27:28 - then we're going to instead of doing
27:29 - target i'm going to say self.x self.y
27:33 - and then we need to get the width and
27:34 - the height of our image so i'm going to
27:36 - say
27:37 - self.img dot get underscore width
27:40 - and self.img dot get underscore height
27:44 - so the point of creating this rectangle
27:46 - is that my image alone is a rectangle
27:48 - but it doesn't know its location right
27:51 - like the image doesn't know where it is
27:52 - so i make a rectangle using the x and
27:55 - the y of my car as the top left hand
27:57 - corner and then i get the width and the
27:58 - height of my image so now what i can do
28:01 - is use a built-in method in python in pi
28:04 - game story to determine if a point is
28:06 - colliding with my rectangle
28:08 - now this is pretty intuitive but it is
28:10 - collide point like this and all it does
28:13 - is take a point so you have to call this
28:15 - on a rectangle but it takes a point
28:16 - which will be target
28:18 - and tells you if you are colliding with
28:20 - it now in fact it actually takes a x and
28:23 - y coordinate so what i'm going to do is
28:26 - pass asterisk's target which will then
28:27 - pass the x coordinate and the y
28:29 - coordinate as separate arguments to this
28:32 - function if that's the case if i am
28:34 - colliding with that point i'm going to
28:36 - say self.current point plus equals 1. so
28:38 - if we've hit the current point that
28:40 - we're going to then let's move to the
28:42 - next point that's the idea behind update
28:44 - path point now let me just look and see
28:47 - if i've messed anything up everything
28:49 - looks good to me what we can actually do
28:51 - now is we can start running the car like
28:54 - moving the car around and you will see
28:56 - that it will start moving on the path so
28:59 - let's see how to do that again i have to
29:01 - reference my code here okay it was
29:03 - easier than i thought we're just gonna
29:04 - say computer underscore car dot move
29:08 - okay so just like we have move player
29:10 - now we have the move car so let's do
29:12 - that uh let's run our code after we move
29:15 - our car
29:17 - let's cross our fingers and let's pray
29:19 - this works and notice our car is zipping
29:21 - around the screen here and it's actually
29:23 - following these points okay now you will
29:26 - notice that sometimes it might kind of
29:28 - hit the edge right so you just saw right
29:29 - there it almost hit the edge of the
29:30 - screen
29:31 - keep in mind that it is aiming to get
29:33 - its top left hand corner on all of these
29:36 - points so that's why it's taking these
29:37 - kind of wide turns you'll notice that
29:39 - the top left hand corner of the car is
29:41 - what's kind of aiming to intersect with
29:43 - some of these points okay so we just ran
29:45 - into a problem there with this point
29:48 - right here so that is most likely due to
29:50 - the fact that that point was too close
29:53 - to this one right here and so we
29:54 - couldn't actually hit this point we
29:56 - couldn't intersect this point from this
29:58 - one because we couldn't turn quickly
30:00 - enough so what i'm going to do is kind
30:02 - of fix up some of these points and then
30:04 - i'll be right back
30:05 - notice we're getting another problem
30:06 - here so in fact let me just look at this
30:08 - and see maybe where i made a mistake and
30:10 - i'll be right back so the problem is
30:12 - what i expected the points that i have
30:14 - are just too close together so the car
30:15 - can't actually hit it now that will be
30:17 - fixed by lowering the velocity of the
30:19 - car because it can turn quicker than it
30:21 - can move but to fix this we just have to
30:23 - remake the path so i'm just going to
30:25 - remake the path i'll be right back i'll
30:27 - show you the new path and then hopefully
30:28 - we should just be all good all right so
30:30 - i've just recreated the path here now
30:32 - i'm not going to lie it's not perfect it
30:33 - goes off the screen a few times not very
30:37 - badly but anyways point being i recreate
30:39 - the path you guys know how to make the
30:41 - path i showed you the code to do that
30:42 - it's pretty straightforward so you can
30:43 - mess with it and design as many times as
30:45 - you need to
30:46 - now based on the way we have it right
30:47 - now if you just clear the path at the
30:50 - start and then you add values to the
30:52 - path the car will actually follow up
30:55 - until the last value in the path that's
30:57 - the way that we've designed it
30:58 - so every time i was clicking it was
31:00 - actually going to that point which was
31:02 - kind of cool you could see how it kind
31:04 - of traced the path in real time now one
31:06 - of the big reasons why
31:08 - it's hard for the car to actually hit
31:10 - some of the points is because of the
31:11 - turning radius right if you increase the
31:14 - uh rotational velocity then you won't
31:16 - have the same problem that i'm having
31:17 - here it's just because it needs to take
31:19 - kind of a wide turn to be able to get to
31:21 - some of the points now that's going to
31:23 - change with speeds you have to be
31:24 - careful if you have a lower speed than
31:26 - your rotational velocity
31:28 - it's not necessarily higher but you can
31:30 - just turn more because you're not moving
31:32 - as quickly to each point
31:33 - anyways i just wanted to point that out
31:36 - okay so now i have this new path so i'm
31:38 - just going to copy that into this path
31:41 - variable here so let's get rid of all
31:44 - that let's paste that
31:46 - and now let's re-pass path
31:49 - where is it right here
31:52 - so i'll just show you what i had was i
31:53 - just added this code back in and that's
31:55 - how i was able to recreate the path and
31:57 - then i had just cleared the path
31:59 - previously okay
32:01 - all right so now that we have all of
32:03 - that
32:04 - our computer is going against the player
32:07 - so what i want to do now is get rid of
32:09 - the drawing of the path so i'm just
32:11 - going to go and comment out under draw
32:14 - this self.draw points because i don't
32:15 - want to do that anymore and i want to
32:18 - implement some collision between the
32:20 - computer and the finish line just so i
32:22 - know if the computer gets the finish
32:24 - line first and then in the next video
32:26 - we'll implement all of the level stuff
32:28 - but this will just be kind of a nice
32:29 - thing to finish off right now okay so
32:31 - just like we have this the finished poi
32:34 - collide i want to go player
32:37 - underscore and i just want to preface
32:39 - this all with player because i'm going
32:40 - to do the exact same thing now except
32:42 - with the computer although with the
32:44 - computer i know it's not going to hit
32:46 - the finish line in the wrong direction
32:48 - so all i have to do is just see if it
32:49 - hit the finish line and then i know it
32:50 - crossed in the right direction
32:52 - so i'm going to copy this
32:54 - and i'll put it actually above here
32:57 - and we can go like this
32:59 - and instead of player we'll just say
33:02 - computer
33:04 - and then we will just change
33:07 - the player to be computer car
33:10 - and now this will tell us if the
33:12 - computer has hit the finish line so i
33:14 - can just do an if statement here and i
33:15 - can say
33:16 - if the computer car
33:20 - computer underscore finish underscore
33:22 - poi underscore collide does not equal
33:25 - none and then i can print out
33:29 - computer
33:31 - wins exclamation point because in this
33:32 - case the computer would have gotten
33:33 - there before the player now we do need
33:36 - to reset both the player and the
33:38 - computer if the computer does win so i'm
33:40 - going to say player card reset and
33:42 - computer car
33:43 - dot reset and that reminds me inside of
33:46 - here i also need to say computer car
33:49 - dot reset because now if the player gets
33:51 - to the finish line we need to reset the
33:52 - computer as well okay we can get rid of
33:54 - the print statement i'm not going to
33:55 - test this because i'm just very
33:57 - confident this is going to work but what
33:59 - i'm going to do now is take all of this
34:00 - collision code and i'm just going to put
34:02 - it in a function again just to kind of
34:03 - clean things up so i'm going to say
34:05 - define
34:07 - handle underscore
34:08 - collision now we want to take both the
34:11 - computer cart and the player car so i'm
34:13 - going to say player car and computer car
34:16 - like that
34:17 - now inside of here we'll do all of this
34:19 - and then we can just call
34:22 - that function so i'll say
34:24 - handle collision
34:26 - and then we'll pass the player car
34:29 - and the computer car and let's just run
34:32 - this here and let's test and see
34:34 - yep okay i can hit the walls just like i
34:37 - was before
34:38 - great so there we go that is all working
34:41 - and with that that's going to end this
34:43 - video so we're getting very close to
34:44 - finished here we just haven't
34:46 - implemented the logic for the game and
34:47 - the nice text so in the next video we'll
34:49 - do all of that but this is the hard
34:51 - stuff what we're doing going forward is
34:53 - very simple we just need to keep track
34:54 - of what level we're on we just need to
34:56 - reset the cars and you know the correct
34:58 - way and yeah all that stuff's pretty
35:00 - easy so we'll wrap that up in the next
35:01 - video if you enjoyed make sure to leave
35:03 - a like subscribe the channel and i will
35:05 - see you in another one
35:08 - [Music]