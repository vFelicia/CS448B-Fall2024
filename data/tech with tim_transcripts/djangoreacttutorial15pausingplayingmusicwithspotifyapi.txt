00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - react
00:11 - and django tutorial video in this video
00:14 - we are going to be implementing the play
00:15 - and pause feature so allowing users to
00:18 - play and pause the current song
00:20 - and then the next video we will get to
00:21 - actually skipping the song which is a
00:23 - little bit more complicated but
00:24 - nothing crazy compared to what we've
00:26 - already done in this series anyways
00:28 - another congratulations to anyone who is
00:29 - still here
00:30 - i do apologize i know i've been going
00:32 - quickly and i know there's a lot of
00:33 - stuff that's not getting the full
00:35 - detailed explanations
00:36 - but just in the interest of time i
00:38 - really can't explain every single line
00:41 - this will literally take me
00:42 - hours upon hours to get through simple
00:44 - stuff so i kind of have to assume that
00:46 - you guys have a basic knowledge
00:47 - anyways i hope you're enjoying the
00:49 - project again feel free to customize it
00:51 - as much as you'd like
00:52 - and leave any comments with any feedback
00:54 - you guys have i'm always open to you
00:56 - know
00:56 - listening to you guys and trying to
00:57 - improve my teaching style and all of
00:59 - that
00:59 - so anyways let's jump into this video
01:02 - what i want to do now is work on getting
01:04 - that play and pause button to actually
01:06 - work
01:06 - properly so if i go now to
01:10 - this site we can see that the pause
01:11 - button is here and actually let me just
01:13 - pause uh a song this is a good song to
01:16 - pause
01:16 - and you can see this changes to play
01:19 - right so
01:20 - it actually does indeed work the icon is
01:22 - updating but now we need to make it so
01:23 - that when we press this it either pauses
01:25 - or plays the song
01:26 - so let's do that we're going to go to
01:30 - what is this here our views.pie file and
01:32 - we're going to set up two views one for
01:34 - play song
01:34 - and one for pause sock so let's say
01:37 - class
01:38 - pause song let's say api view
01:41 - like that and then inside of here we'll
01:43 - define put
01:45 - we'll say self request and then an
01:48 - optional format
01:49 - which is equal to none now the reason
01:52 - i'm doing a put request here is
01:54 - because the request we're going to send
01:56 - to the spotify api is a put request
01:58 - so it makes sense to kind of mirror the
02:00 - requests on our api
02:02 - and that just generally makes sense
02:03 - because when you send a put request
02:05 - you're typically updating information so
02:06 - we're updating the state
02:08 - of the song anyways the first thing
02:09 - we're going to do inside of here is we
02:11 - need to make sure that the user who's
02:12 - sending this request
02:13 - actually has permission to pause or play
02:16 - the song so we're going to get the
02:17 - room code so we're going to say room
02:19 - code is equal to self dot request
02:22 - dot session dot get room
02:25 - underscore code and then we're going to
02:27 - say that the room
02:28 - is equal to room dot objects dot
02:32 - filter and we're gonna filter for the
02:34 - room underscore code
02:35 - equal to sorry not room underscore code
02:37 - but code
02:38 - equal to room underscore code all right
02:41 - so now we have
02:42 - the room code or the room and we'll
02:44 - index that at zero actually
02:46 - and the next thing that we'll do is
02:47 - we'll check whether or not the guests
02:50 - in this room are allowed to play or
02:52 - pause the song or if the current user is
02:54 - the host of the room because the host
02:56 - can do anything right
02:57 - so we'll say if
03:01 - self.request.session.session
03:03 - i guess this should be key session
03:05 - underscore key
03:06 - is equal equal to room dot host if that
03:09 - is the case
03:10 - or if room dot guest underscore can
03:14 - underscore pause then what we will do is
03:17 - we'll call function which we've yet to
03:18 - write called play song
03:20 - we'll pass the room.host in there now
03:22 - we'll write this function in one second
03:24 - but let's return a response here this is
03:27 - uh successful right in the situation
03:29 - where we can actually pause the song
03:31 - there is a blank response and we'll just
03:33 - simply say status
03:35 - is equal to status dot http underscore
03:38 - 204
03:38 - underscore no content because there is
03:41 - no content after you play the song
03:43 - we're just simply saying yes this was
03:44 - successful we don't have any content to
03:46 - give back to you
03:47 - now if that's not successful we'll
03:48 - return a response and this response is
03:50 - just going to say forbidden like you
03:52 - don't have the permission to do this so
03:54 - status is equal to http underscore
03:58 - 403 underscore uh sorry this is status
04:02 - dot i was wondering why the autocomplete
04:03 - wasn't working and then four bit
04:06 - so again we're just saying if they are
04:08 - allowed to pause and play the song so if
04:10 - this permission is true in the room or
04:12 - if they are the host
04:14 - then we will simply play the song or
04:16 - sorry this is pause song my bad this
04:17 - should say paw song
04:19 - uh and then we will turn response says
04:20 - no content if they are not
04:22 - allowed we will return responses as 403
04:24 - forbidden which pretty much tells them
04:25 - hey
04:26 - no you are not allowed to do this now
04:28 - we'll write this function in a second
04:30 - but let's just copy this because it's
04:31 - going to be very similar for play song
04:33 - in fact this is actually going to be
04:35 - literally identical
04:37 - um except instead of having pause song
04:40 - we're going to put
04:40 - play song so i was thinking for a second
04:42 - that it might make sense to put this all
04:44 - inside of a function but then i was
04:46 - thinking well we need access to the
04:47 - response we also need access to the self
04:49 - keyword
04:50 - so even though this is a lot of
04:51 - repetitive code which i don't like to
04:52 - usually do
04:54 - we're just gonna leave these as a as two
04:55 - separate views so i had my pause song
04:58 - just copied it now we're gonna put this
05:00 - as play song
05:01 - and literally the only thing we're gonna
05:03 - change is this function here that just
05:04 - says play song
05:05 - so exact same permissions it's doing the
05:07 - exact same thing
05:09 - except we're just going to call a
05:10 - different function so now that we have
05:12 - this let's go inside of utils.pi
05:15 - or util.pi i guess we could have called
05:17 - that utils and let's define a function
05:19 - called play song and pause song so we
05:21 - just need to take a quick pause before
05:23 - we continue
05:24 - and thank the sponsor of this video and
05:25 - this series which is algo
05:27 - expert algo expert is the best platform
05:29 - to use when preparing for your software
05:31 - engineering coding interviews
05:32 - they have over 110 coding interview
05:34 - practice questions
05:36 - that range in difficulty from easy
05:38 - medium hard and
05:39 - very hard this is genuinely one of the
05:41 - best platforms to use to prepare
05:43 - for your interviews it's the reason i
05:45 - was able to get a job at microsoft and
05:47 - at shopify
05:48 - and also the reason i'm able to work at
05:49 - algo expert right now
05:51 - so that said check out algo expert from
05:53 - the link in the description and use the
05:54 - code tech with tim
05:55 - for a discount on the platform so for
05:58 - play song what we're going to do is say
05:59 - define
06:00 - play underscore song we're going to take
06:02 - inside of here a session id
06:04 - this is going to be the host just like
06:06 - same thing here with execute spotify api
06:08 - request and all we're going to do is
06:10 - simply actually return
06:12 - the execute spotify api request of
06:15 - the session underscore id and the end
06:18 - point we're going to hit for the play
06:20 - song is simply player slash play right
06:23 - pretty complicated and then we're gonna
06:25 - say put underscore is equal to true
06:27 - because this is actually a put request
06:30 - all right so now that we have that
06:31 - let's just copy this and we'll do the
06:34 - same thing for
06:35 - pause song except again you can imagine
06:38 - that the only difference here is going
06:39 - to be rather than play
06:40 - this is going to say pause and this is
06:43 - also going to be a put request and these
06:46 - there you go
06:46 - we are done we now have the play song
06:48 - and pause song function
06:50 - so those are working this is all good
06:51 - now what we need to do is simply set up
06:53 - a url for both of those views that we
06:55 - just made so pause song and play song
06:57 - and then use them from inside of our
06:59 - our component so let's go to urls.pi and
07:02 - let's make this so we're going to say
07:03 - path
07:04 - we'll just call this one uh pause we
07:07 - could do pause song but it's fine we'll
07:08 - stick with pause
07:10 - and then this is going to be pause song
07:12 - dot as underscore
07:13 - view then we'll do another one this one
07:16 - will be
07:17 - play and then we'll say play song dot as
07:20 - underscore
07:21 - view okay perfect and that is all we
07:24 - need
07:24 - for that all right so now that we have
07:26 - that uh we obviously want to start
07:27 - testing these out
07:29 - so let's go into our music player.js and
07:32 - let's hook up these buttons now so they
07:33 - actually send
07:34 - this uh request to our api which can
07:37 - then send the request to spotify
07:39 - now in case some of you are wondering
07:40 - why we're not just directly sending the
07:41 - request
07:42 - from our front end to spotify rather
07:45 - than
07:45 - always doing it from the back end you
07:47 - want to do this from the back end
07:48 - because we're using a
07:50 - token right we have our access token and
07:52 - our refresh tokens
07:53 - and those tokens we need to store on the
07:55 - back end because we can't have them
07:57 - exposed on the front end
07:58 - otherwise someone could steal user
08:00 - information right so this is just a kind
08:02 - of a security thing
08:03 - whenever you're dealing with apis and
08:04 - access tokens you always want to be
08:06 - handling any of those requests on the
08:07 - back end so that's why we're doing that
08:09 - we're sending kind of like a dummy
08:10 - request from the front end to the back
08:12 - end and the back end is sending the real
08:14 - request
08:14 - which is actually kind of doing the real
08:16 - work right sending the thing to spotify
08:18 - and before i get ahead of myself i'm
08:20 - sorry that i'm kind of going all over
08:21 - the place right now
08:22 - there's actually a small error that i
08:24 - just remembered we need to fix we need
08:25 - to
08:26 - go into spotify views dot pi
08:29 - we actually need to go to refresh
08:32 - spotify token oh sorry that's in
08:34 - util.pie my bad uh let's go into util.pi
08:37 - not view stop pi inside of refresh
08:39 - spotify token we just need to remove
08:41 - line 62. so this line i guess i'll leave
08:45 - it up for a second
08:46 - was trying to get a new refresh token
08:49 - from
08:49 - this response where we pretty much sent
08:51 - a refresh token
08:52 - asking for a new access token now i
08:55 - forgot the fact that we actually don't
08:56 - get sent a new refresh token or refresh
08:58 - token stays the same
09:00 - so this line will actually cause an
09:01 - error when we do try to refresh our
09:03 - token
09:04 - so we just need to remove that line so
09:06 - now when we pass refresh token into
09:08 - update
09:08 - or create user tokens it will just pass
09:10 - the same refresh token
09:12 - so all is good we're just not going to
09:14 - be passing the value none
09:15 - into there essentially which is what was
09:16 - happening before so hopefully that's
09:18 - clear but just fix
09:19 - line 62 again code will be linked in the
09:21 - description
09:22 - okay so now apologies let's go back to
09:25 - musicplayer.js and
09:26 - let's write a few functions that can
09:28 - send a request to actually pause or play
09:31 - this song now again we don't really have
09:33 - to check for any like permissions on the
09:35 - front end here we can just try to send
09:36 - the request to the back end
09:38 - and if it works we had permission to do
09:39 - that if it doesn't work well we just
09:41 - didn't have permission and just
09:42 - didn't work so let's write two uh
09:45 - methods inside of here the first one
09:46 - that i'm going to write is going to be
09:48 - called pause song and
09:50 - these methods are both going to be very
09:51 - similar and then we'll write
09:53 - play song like that now inside of pause
09:57 - song what i'm going to do is say const
09:59 - request options like that is equal to
10:02 - the first key i'm going to have is
10:04 - called method we've done this many times
10:05 - before
10:06 - this is going to have the string put and
10:08 - the next key i'm going to have is going
10:09 - to be headers
10:10 - and this is going to say as the first
10:13 - header here
10:14 - content hyphen type and this is going to
10:17 - be equal to the
10:18 - classic application slash json
10:22 - okay that's all we need for request
10:24 - options there's no payload or data we
10:25 - need to be sending
10:27 - then we're going to fetch the slash
10:29 - spotify
10:31 - slash play or slash pause
10:34 - for pause we'll pass the request options
10:38 - and that's actually all we need to do we
10:40 - don't really care if this gives us an
10:42 - error if it tells us that it's forbidden
10:43 - if that's the situation it just won't
10:45 - work now we could pop something up on
10:47 - the screen and tell the user like oh you
10:49 - can't do that that's not allowed
10:50 - i'm going to let you guys handle that if
10:52 - you'd like to do that for this tutorial
10:54 - i'm just going to
10:55 - not do that because we don't really need
10:57 - to and then for play song we're gonna do
10:59 - the same thing except we're just gonna
11:00 - change
11:01 - pause to be play and well that's all
11:04 - there is we have pause song and we have
11:06 - play some all right so now that we have
11:08 - that in theory this
11:10 - should just work so let's go here let's
11:13 - actually refresh
11:14 - notice that we are indeed the host and
11:16 - also just just so you're aware you saw
11:18 - there kind of lagged for a second uh and
11:20 - then it wasn't showing all of the
11:21 - information about the song
11:22 - like here for example right that does
11:24 - happen uh and in the
11:25 - situation where we just don't have
11:27 - information about the song this player
11:29 - will just be blank right you'll just see
11:30 - the icons and you'll see a little bar
11:32 - if you want to fix that you can make the
11:34 - default state store like a default title
11:36 - that says like no song playing or
11:38 - something
11:38 - like a default album cover like you can
11:40 - do that if you want but
11:42 - i'm not going to do that for this series
11:44 - anyways let me try to pause this
11:45 - and let's see if this actually does work
11:48 - doesn't look like it did
11:49 - and this reminds me i always forget to
11:51 - do this we have these two
11:54 - functions defined but we're never
11:55 - calling them so what we need to do is
11:56 - actually call them
11:57 - so let's hook up our icon buttons now so
12:00 - they are
12:00 - actually calling these functions so on
12:02 - our first icon button i'm going to
12:03 - define an
12:04 - on click this on click is going to be
12:07 - equal to
12:07 - an arrow function and this arrow
12:09 - function is simply going to call
12:11 - this dot and i guess this reminds me
12:14 - that now
12:15 - the function we're calling is going to
12:17 - depend on
12:18 - whether or not we are playing the song
12:20 - right so if we are currently playing the
12:22 - song if it
12:23 - is in play mode then we need to call the
12:26 - pause
12:27 - the pause function right or the pause
12:29 - song but if we are paused then we need
12:31 - to call it the play song
12:32 - so that means that we just need to write
12:34 - something that's a little bit more
12:35 - advanced here
12:36 - nothing too crazy we're going to say
12:38 - this dot props
12:39 - dot is underscore playing and then this
12:42 - will be question mark so if that is the
12:44 - case then what we will do is we'll call
12:46 - this dot i believe this should be pause
12:49 - song
12:51 - otherwise if that's not the case we'll
12:52 - call this dot play song
12:55 - like that so i think that's all we need
12:57 - for this on click now for the skip
13:00 - on click we will we'll do that later
13:02 - because we haven't yet handled the
13:03 - skipping
13:04 - but let's see if this works now okay so
13:06 - let's refresh
13:08 - and give it a second okay loads it up
13:11 - let me pause
13:12 - and notice that it does actually pause
13:14 - you can see the bar is no longer moving
13:16 - on my spotify is actually paused and
13:18 - then if i press play
13:19 - there you go the bar starts moving and
13:21 - it plays the song
13:23 - now of course when you guys do this
13:24 - you'll actually hear the music so it'll
13:25 - be a lot more
13:26 - engaging and fun than what i'm doing
13:28 - here because i can't play any of the
13:29 - music
13:30 - but that is how you get the song to play
13:32 - and to pause
13:33 - so with that said i'm actually going to
13:35 - leave the video here
13:36 - in the next video we're going to handle
13:38 - the skip button and then i'll kind of
13:40 - talk about what we're going to be doing
13:41 - to conclude this series because we are
13:43 - almost done so if you guys enjoyed make
13:44 - sure to leave a like subscribe to the
13:46 - channel and i will see you in another
13:47 - youtube video