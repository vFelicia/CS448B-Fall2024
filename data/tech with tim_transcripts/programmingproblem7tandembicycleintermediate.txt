00:00 - hey guys and welcome back to the weekly
00:02 - programming problem now last week we did
00:05 - a maze traversal video which was a
00:06 - pretty complex problem and saw involved
00:09 - a breadth-first search algorithm
00:11 - generating a ton of different
00:12 - possibilities traversing through a maze
00:14 - this one is gonna be a bit easier
00:16 - not too much easier but it does require
00:18 - a little bit of thinking the actual code
00:20 - for this I'll tell you right now my
00:22 - solution is 20 lines and I could
00:23 - probably condense it into about 15 or
00:26 - maybe even 10 so I really encourage you
00:28 - guys to try this problem I'm gonna read
00:29 - through it explain it and then go
00:31 - through my solution quickly but yeah so
00:34 - anyways this is the problem we're doing
00:35 - today this is again from Waterloo
00:37 - website so University of Waterloo
00:39 - Canadian computing competition that's
00:41 - where I take all these problems from
00:42 - pretty well and essentially I mean you
00:45 - guys can read through it but what it's
00:46 - saying is they have two groups of
00:49 - citizens one from the town of whatever
00:52 - that is and another one from peg land
00:54 - and they are on tandem bicycles and
00:57 - essentially the fastest person pedaling
01:00 - on the bicycle is gonna be the one that
01:02 - dictates the speed so like if I'm
01:03 - pedaling at five miles per hour and
01:05 - someone's pedaling at four miles per
01:06 - hour the person pedaling at five will
01:08 - determine how fast the bike goes because
01:10 - the faster peddler is like the slower
01:12 - person's not doing anything essentially
01:13 - so that's something to note and what
01:16 - it's asking is essentially given the
01:18 - speeds of people from these two cities
01:21 - how can we match them up to make either
01:23 - the fastest possible speed or the
01:25 - slowest possible speed what I mean by
01:27 - possible speed is if you sum all of the
01:30 - people that are on the bicycles so all
01:32 - of the speeds of the bicycle so let's
01:34 - say we have ten bicycles and each of
01:35 - them are going out one mile per hour the
01:37 - total speed would be ten so going out to
01:39 - it would be twenty you just sum all of
01:41 - the bikes that are moving and that's the
01:42 - total speed of like all the bikes right
01:45 - so I mean you guys can read through the
01:47 - problem but I think you'll should
01:49 - understand it fairly straightforward so
01:51 - let me just go through the input quickly
01:53 - and then we'll get into the solution but
01:55 - essentially the input starts off in
01:57 - telling you there's there's two problems
01:58 - that you could be asked to solve one
02:00 - what is the minimum total speed out of
02:03 - all the assignments in two pairs so you
02:04 - have to determine how to pair them up so
02:07 - you get a minimum speed or what is the
02:10 - maximum amount of speed in two
02:12 - now the input comes in it tells you what
02:15 - question gonna be answering either
02:16 - question 1 or question 2 in this case
02:18 - question 1 student this example here and
02:20 - then it's gonna tell you how many people
02:22 - you have from each or how many bikes you
02:25 - have essentially so how many people from
02:27 - each town which and these are always
02:29 - going to be the same and then the next
02:30 - two lines are gonna be the people from
02:32 - each city so the first one will be from
02:34 - demo whatever that town is and then the
02:36 - next one will be from peg lund and these
02:39 - are their speeds when they're peddling
02:41 - on a bicycle so we can see that we have
02:42 - one person pedaling at five one at four
02:45 - one one at four and those all those need
02:48 - to be paired with one of the ones that
02:50 - I'm highlighting right now so six two or
02:51 - four so how do we pair them so we either
02:54 - get the maximum or the minimum speed
02:56 - based on whatever question we're asking
02:58 - now this actually seems like somewhat of
03:01 - a complex problem now let me go through
03:03 - this explanation for output one it says
03:07 - what do you call it output one the
03:10 - answer is 12 that's the max or the
03:12 - minimum speed that they can go and it's
03:14 - saying this is how you would pair them
03:16 - up so you're pairing citizen with speed
03:19 - file with speed six you're pairing
03:20 - Sisson with one with speed two and then
03:22 - four with speed four if you guys
03:24 - actually read through some of these
03:25 - inputs you'll probably figure out the
03:27 - trick for this problem because it's very
03:29 - light computationally what you actually
03:31 - have to do so ah yeah that's kind of the
03:34 - way the problem works I hope you
03:35 - understand that now let's go into my
03:38 - solution quickly and talk about how it
03:40 - works now I'm just gonna bring up this
03:43 - drawing tablet quickly and I'll get just
03:45 - pause quickly will I get my tablet
03:47 - alright so I just got my tablet open now
03:49 - and this is actually a really easy
03:51 - problem in terms of the write the code
03:54 - that you have to write for it you might
03:55 - have saw quickly when I when I went back
03:57 - into my pycharm window but essentially
04:00 - let's do an example of how my solution
04:04 - is gonna work quickly and I'm hoping you
04:05 - guys can kind of see how you would
04:07 - actually approach this problem and make
04:08 - it really easy so we're gonna do like
04:10 - these are the four the speeds so this
04:12 - will be like a so like town a and this
04:16 - will be town B and then we'll say they
04:18 - have like five three and seven as their
04:22 - speeds so we now we want to determine
04:24 - let's start off
04:26 - the minimum speed that we can possibly
04:30 - go so how do we do that what assignments
04:33 - of pairs do we need on our bicycles so
04:35 - we'll say like pair 1 pair 2 and pair 3
04:38 - so that we get the minimum speed well
04:41 - let's think about this for a second what
04:44 - we should do to get the minimum speed is
04:46 - we want a max or we want to minimize the
04:48 - amount of large number speeds right so
04:50 - for example what we actually want to do
04:53 - is we want to pair the highest number
04:56 - from B with the highest number from a
04:58 - and then we want to continue doing that
05:00 - so we're gonna pair 5 with 4 which means
05:03 - that we've now eliminated this 4
05:05 - essentially from a so that 4 isn't gonna
05:07 - be a speed that would maybe go with 3
05:09 - right you guys will see how this works
05:11 - in seconds so pair 1 will be 5 and 4
05:14 - will just do a little - or something
05:15 - there okay so now we've eliminated those
05:17 - so we'll cross those out now what's next
05:20 - same process we want to do the highest
05:22 - speed that's remaining from B with a so
05:25 - we pick the two highest speeds so it
05:27 - picks 7 and we pick 3 ok so let's do
05:30 - that so we go 7 and 3 and then same
05:34 - thing now we're gonna pick 3 and 2
05:36 - obviously there's only two left but
05:38 - we're gonna pick these and when we do
05:40 - this we get that what do you call it the
05:43 - minimum sum is gonna be 7 plus 5 plus 3
05:47 - which is equal to 15 now let's think if
05:52 - we didn't do it this way let's so let's
05:54 - let's undo all this and let's go back
05:56 - and try doing it some other way and you
05:58 - guys will see why this way is the way
06:00 - that we need to do it essentially let's
06:03 - say we just like randomly try pairs okay
06:06 - so what if I try um what do you call it
06:09 - 3 with 4 as my first pair so B has 4 or
06:14 - a s 4 and B has 3 so we write those
06:17 - there and now that's done ok so now we
06:19 - have 5 & 7 which are gonna be paired
06:23 - with 2 & 3 right so we go 5 and that can
06:25 - go with whatever and then 7 can go with
06:27 - 3 now if we add this up we get 60 that's
06:31 - one larger than the previous one and
06:33 - that's because we didn't use this 7 to
06:36 - eliminate this 4 right because we want
06:39 - to eliminate the amount of
06:40 - larger numbers ideally we want a speed
06:42 - of three matching with like three you
06:44 - want three matching with two we want the
06:46 - largest numbers matching with the other
06:47 - largest numbers so that we eliminate the
06:50 - most amount of large numbers possible
06:51 - and that's I mean there's not really
06:53 - anything other other way to explain that
06:56 - then that that's just the solution now
06:58 - for minimum are we doing minimum suitor
07:02 - we do yeah we doing minimum so now we'll
07:03 - do maximum so for maximum it's precisely
07:06 - the opposite we actually want to take
07:08 - the smallest number from one and match
07:10 - it with the largest number from another
07:12 - and it doesn't matter which one we pick
07:13 - cuz it'll end up working out at either
07:15 - way but we want to match and the
07:18 - smallest number from a with the largest
07:20 - number from B and then continue that
07:22 - process so we want to match to a seven
07:23 - so let's do that
07:25 - seven and two we want to match five with
07:29 - three okay so it match five with three
07:33 - and then we'll match four with three so
07:35 - again this like this will be the largest
07:36 - number from B and that would be the
07:39 - smallest number from a it doesn't matter
07:40 - what what order we do it in but it'll
07:43 - you'll see how it works out so we do
07:44 - that and now we get eight plus seven or
07:47 - so we get sixteen again and that's the
07:48 - maximum speed that we can go with these
07:51 - pairs and that's essentially how that
07:53 - works whenever you're doing min you just
07:55 - want to match the largest numbers with
07:56 - other largest numbers from each set and
07:58 - then when you're doing max you want to
08:01 - match the largest number with the
08:02 - smallest number and that's how that
08:04 - works so with knowing that we can
08:06 - actually implement the solution pretty
08:07 - easily with some Python code so let's do
08:10 - that so let's go here and this is this
08:14 - is my solution right now and you could
08:15 - see that actually the first four lines
08:17 - are literally just getting the input and
08:18 - this is all the solution is all I do
08:22 - and I mean think about this it's pretty
08:24 - intuitive is that if we want to match
08:26 - the smallest number with the largest
08:27 - number well it would make a lot of sense
08:29 - to just sort our list right because we
08:32 - actually don't care what order we get
08:34 - our numbers in so let's just sort them
08:36 - and then this way we're gonna have a
08:38 - list that will go from min to max sort
08:40 - of a min to max or smallest to largest
08:41 - and then this one will go min to max as
08:44 - well so what we'll do now is simply loop
08:50 - through so for question one when we're
08:52 - getting what the minimum
08:53 - speed we want a Mac we want to match the
08:55 - Mac's numbers with the Mac's numbers and
08:57 - those will all be at the end of the list
08:58 - all the minimum numbers would be at the
08:59 - beginning of the list so when we do this
09:02 - and we loop through the amount of bikes
09:04 - we have all we have to do is just add
09:06 - the maximum value from what do you call
09:09 - it the index I that we're at and the
09:11 - other index I because those are gonna be
09:13 - the two max values at that position or
09:16 - whatever right and that will work for us
09:18 - in terms of matching up like the largest
09:20 - and the smallest all right so that works
09:23 - for for the minimum but that's all you
09:25 - have to do for maximum all I do is just
09:27 - reverse the list of one of it doesn't
09:30 - matter which one you reversed but I'm
09:31 - just reversing demage or whatever and
09:33 - now this way what's gonna happen is
09:35 - you're gonna have the max at one end and
09:37 - the min at the other end so now you're
09:39 - gonna be maxing are you gonna be
09:41 - matching min max min max min max women
09:43 - max so you're gonna get the maximum
09:45 - possible speed because you're not going
09:47 - to be eliminating larger numbers which
09:49 - is exactly what we're trying to do here
09:51 - when we sort these into smallest to
09:53 - largest right so all we do is simply
09:55 - reverse one list and then we just add
09:56 - the maximum from the two indexes and
09:58 - then we print that speedo now prove to
10:01 - you that I'm not making this up and this
10:02 - actually works so let's bring up did I
10:05 - close that I think I did okay let's
10:07 - let's run this all right so let's grab
10:10 - let's put that on the side there okay
10:13 - let's grab some input so let's try
10:14 - sample input one so I'm going to do one
10:16 - three five one four and then six two
10:20 - four and you can see that our output is
10:23 - 12 so that this is indeed working and
10:25 - I've tested on all these inputs and like
10:26 - a ton other ones so I know that this
10:28 - solution actually works but yeah that is
10:31 - essentially it for this problem and it
10:32 - kind of shows you that even though this
10:34 - problem is actually designed to be
10:35 - somewhat difficult if you just think
10:38 - about it in a logical way you can
10:40 - usually come up with a solution that
10:42 - somewhat math related or just logically
10:46 - make sense as opposed to having to like
10:48 - Luke because what you could technically
10:49 - do is do every single possible
10:51 - combination of pairs which would give
10:53 - you what is it like the power sets or
10:55 - whatever like you'll give you a ton of
10:56 - different it's exponential essentially
10:59 - as you increase the amount of N and you
11:01 - can see here that n actually goes up to
11:03 - a million I had some points so it could
11:05 - take a
11:06 - time but this way we just found that
11:08 - this makes sense logically how you match
11:10 - them and that's our solution to this
11:12 - problem so with that being said that's
11:14 - my name for this problem if you guys
11:15 - have any ideas for problems that you
11:17 - want to see in later videos or like
11:19 - types of problems please let me know I
11:21 - like doing these kind of problems but I
11:22 - mean I want to do what you guys like so
11:24 - with that being said that's it for this
11:26 - video and I'll see you in the next one
11:27 - [Music]