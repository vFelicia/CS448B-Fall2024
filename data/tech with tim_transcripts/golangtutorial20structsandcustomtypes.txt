00:02 - [Music]
00:06 - hello everybody and welcome back to the
00:08 - golang tutorial so in this video I'm
00:10 - gonna be talking about strux
00:12 - and how we can create our own custom
00:13 - types in go line now if you haven't seen
00:16 - another programming language before then
00:18 - you may not be familiar with the notion
00:19 - of classes but inside of other
00:21 - programming languages you can pretty
00:23 - much write some syntax like class Tim
00:25 - and then inside of this class you define
00:28 - a bunch of methods you define a bunch of
00:30 - attributes which again you might not
00:32 - know what they are that's totally fine
00:33 - and then Tim it becomes actually a
00:35 - custom object or a custom type that we
00:37 - could use so to really illustrate this
00:40 - when we make a variable write every
00:42 - variable is some type and we've gone
00:43 - over there's so many times it's really
00:44 - important in golang but if I say
00:46 - something like you know var X in equals
00:49 - 5 of course this variable X is an int
00:51 - and the fact that it's an int gives it
00:53 - some very specific behavior I can add it
00:56 - to other ends I can subtract it against
00:57 - other ends I can use it in specific
00:59 - contexts and if it was a float then it
01:02 - would behave a little bit differently
01:03 - right it has a different amount of
01:04 - precision it takes up a different amount
01:06 - of space all these types have their own
01:08 - kind of like features or different
01:11 - things that are specific to that type
01:13 - right and of course we had a raise which
01:15 - acted a little bit differently we had
01:16 - maps each type has its own kind of
01:18 - custom behavior and that's what I want
01:20 - you to really think about is that these
01:22 - types here all have their custom
01:24 - behavior and what we can actually do is
01:26 - make our own types that have their own
01:28 - custom behavior and the reason we would
01:30 - do that is because sometimes the current
01:32 - types that are given to us are not
01:34 - enough we actually want to combine and
01:35 - use those together in our own type that
01:38 - makes it more valuable more readable
01:41 - just easier to use in our program and
01:42 - hopefully I can show that to you here so
01:45 - what I'm gonna do is just make a struct
01:46 - that stands for a structure this is just
01:48 - your own custom type and all we go
01:51 - through this it'll make a lot of sense
01:52 - but there's a lot to explain so it's
01:54 - kind of incremental we're gonna
01:55 - understand so I'm gonna make a type
01:57 - called point I'm gonna put type point
02:00 - struct and this is how we set up our own
02:03 - custom structs or types so we write type
02:06 - we put the name of the type always we
02:08 - start with a capital letter that's
02:09 - pretty much a convention you always do
02:11 - that and then you write struct
02:13 - struck defines that this is a custom
02:15 - type because there's other things that
02:17 - we can do with type we can actually do
02:19 - type I and then we can write something
02:20 - like interface now I'm not gonna show
02:22 - that right now but in a future video so
02:24 - just understand that we're saying this
02:25 - is a structure which really means it's
02:27 - just a custom type that we can use
02:29 - okay so type point struct and then
02:32 - inside of here what I actually do is I
02:34 - list the fields that I want to be a part
02:36 - of this struct or of this custom type so
02:40 - before when we had types we only had one
02:43 - type if that makes sense we had like var
02:46 - X int X is just an inch right but now
02:50 - what we're gonna be typing is like var X
02:52 - point is equal to and we're gonna put
02:55 - point like this and we're gonna define
02:58 - what makes up a point so inside of here
03:01 - I'm gonna put two fields that will
03:03 - define what makes up a point so I'm
03:05 - gonna say X int and then Y int like that
03:09 - and we'll make them both in 32s so what
03:11 - this is saying is that a point is its
03:12 - own custom type and it has a field X and
03:15 - a field Y so this point will store some
03:18 - x-value and y-value for every single
03:20 - point that we make so if I do something
03:23 - like var X point equals point one two
03:26 - what this is saying is let's make a new
03:28 - point that has X equal to 1 and y equal
03:30 - to 2 and obviously you know point I'm
03:32 - just talking about like a two
03:33 - dimensional point on some graph so we
03:35 - have an XY value and of course what I
03:38 - can do as well is I can actually say
03:39 - let's let's change these values so I'm
03:41 - gonna say P one and P two point one and
03:44 - point two and we'll make a new point and
03:45 - maybe this point will be equal to like
03:48 - negative five and seven so now we have
03:51 - two points one of them has an x value on
03:54 - a y-value of 2 one of them has an x
03:56 - value negative 5 and a y-value of 7 so
03:59 - you can see where this might be useful
04:00 - right if we have kind of objects that we
04:03 - want to represent that we can't just
04:04 - represent with one INT value or one map
04:06 - or one array we make our own custom type
04:09 - we've called this a point and now we
04:11 - have point objects right that have an X
04:14 - and a Y value now let me show you what
04:16 - these actually look like when we print
04:17 - them out and how we can actually have a
04:20 - look at on some of the specific
04:22 - attributes of them so if I go fmt dot
04:24 - print line what
04:25 - can do is since you have this field X
04:27 - and this field Y inside of your point
04:29 - type you can access those fields
04:32 - directly so I can say something like p1
04:34 - dot x equals well no I'm not gonna say
04:36 - equals sorry because I'm inside of FM t
04:38 - but if I print out p1 dot X and let's
04:41 - have a look here and I will actually
04:42 - have to print out or comment this out
04:44 - for now because we're not using it okay
04:46 - so let's print out p1 dot X and we see
04:48 - we get the value of one right showing up
04:51 - for us there because obviously the x
04:53 - value of this point is 1 because when we
04:56 - pass it in and assigned X equal to 1 y
04:58 - equal to 2 because that's the order that
05:00 - we pass them in now if I change this to
05:02 - Y you guys can probably guess what we're
05:04 - gonna get let's have a look here and we
05:07 - get two pretty straightforward now
05:10 - here's a cool thing though to have a
05:11 - look at is that some people oftentimes
05:13 - get confused and they think that this x
05:15 - and y can only ever store one value so
05:18 - they think when i make this new point p
05:20 - to that point one's values will change
05:22 - right they won't be one and two that is
05:24 - incorrect we can have a bunch of
05:26 - different point objects that all have
05:28 - their own unique x and y values so look
05:31 - here if I print p1 dot y and then I
05:33 - print P 2 dot Y right there you'll see
05:36 - that these are two different values and
05:38 - nothing changes like they both can store
05:40 - their own unique values so we have two
05:42 - and seven right so these point objects
05:45 - are just both different point objects
05:47 - that each have their own x and y values
05:48 - so that's really useful and that makes
05:51 - it a lot easier to do certain things in
05:52 - program so I can actually change the
05:54 - value of p1 dot X I can change the value
05:57 - of P 1 del Y as well by saying something
05:59 - like p1 x equals and let's change it to
06:02 - 7 right so if I go ahead and run this
06:04 - there won't be anything wrong with the
06:05 - program oh well because I didn't use p2
06:07 - but that does actually go ahead and
06:09 - change the value of one here to 7 you
06:12 - can directly change the fields now these
06:14 - fields don't need to be the same type in
06:16 - fact what I can do is say like XY and
06:18 - then I can say is on grid or something
06:21 - and make that a bool right so now we
06:23 - have another field called
06:25 - is on grid and that's a boolean value
06:26 - and now when I make my point I need to
06:29 - pass false in there right or I need to
06:31 - pass true another value so that we set
06:33 - something for is on grid
06:35 - that is the idea behind strux and how
06:38 - you make your own custom points because
06:40 - notice these are type point right so
06:42 - we're making our own types this is
06:44 - something that is a little bit difficult
06:45 - sometimes to wrap your head around but
06:47 - once you get it it makes things a lot
06:49 - easier so we have point that's good I'm
06:51 - gonna get rid of the is on grid because
06:53 - I don't actually want to use that and
06:55 - what I'm gonna show you now is actually
06:57 - how we can make types that use other
07:00 - types so point is a type now it is
07:03 - treated just like in 32 float32 whatever
07:06 - there's a few small differences but you
07:08 - can think of it like that right because
07:09 - I can just write type point no problem
07:12 - whatsoever now what I'll show you as
07:14 - well is that I can define a point using
07:17 - a few different a few different ways to
07:19 - define a point I don't need to write it
07:21 - like I just did here the most common way
07:23 - is to do something like p1 colon equals
07:26 - point 1 2 now this will just
07:28 - automatically infer that this is gonna
07:29 - be type point there'll be no problem
07:31 - with that but let's say then I want to
07:34 - make a point but I actually don't know
07:35 - what the y-value of my point is yet I
07:37 - just want to set the X I don't want to
07:39 - set anything for the Y value well what I
07:41 - can do is I can actually say point X
07:44 - colon I can set a value so I can say X
07:47 - colon 3 like that and that is totally
07:49 - valid and fine that's just gonna mean
07:52 - that Y will be set equal to whatever the
07:54 - default in 32 value is which is going to
07:56 - be a 0 and I'll show you if I fmt dot
08:00 - print line here p1 then that's what ends
08:04 - up happening so let's have a look down
08:05 - here and we get 3 0 so X is 3 y is 0
08:09 - because I set X but I didn't set what
08:12 - now I could do the other thing too I
08:14 - could put Y like that and now if we go
08:16 - ahead and print it we'll see it swaps
08:18 - around so we get 0 3 there we go 0 3 no
08:21 - problem so that's another way to define
08:23 - points I believe that's known as a
08:25 - literal now what I want to show you
08:26 - though is that when we start using these
08:28 - kind of structures this is where
08:30 - pointers become very important and I'm
08:32 - gonna talk more about that in the next
08:34 - video when we get into methods but I
08:36 - want to show you what happens when I put
08:37 - an sign like this because it's something
08:39 - very common that you'll see I'm saying
08:41 - p1 is actually equal to the pointer to
08:46 - this point now I know that seems like a
08:49 - weird
08:49 - thing to say but let's run this and have
08:50 - a look at what p1 is now and let's see
08:53 - and we get the an scene for this value
08:56 - so what that's telling us essentially is
08:58 - that this is a pointer p1 is a pointer
09:00 - to the point that has the values XY
09:03 - right inside of it so it has those two
09:05 - specific values now what this means is
09:08 - that if I pass this pointer around to
09:11 - like another function or something I can
09:13 - modify the value of this point directly
09:15 - so let me just show you because we
09:16 - showed this in the pointer 1 so I'm kind
09:18 - of building on here I'm gonna say change
09:21 - X okay and let's say that we're gonna
09:24 - take some points so we'll say PT point
09:27 - is what we want to take we're not gonna
09:28 - return anything and we'll just do that
09:30 - so now again since this is a type I can
09:32 - put points up here no problem because
09:34 - we've defined it and what I'm gonna do
09:36 - inside of here is I'm just gonna say and
09:38 - story this should actually be an
09:39 - asterisk I'm gonna say PT dot x equals
09:44 - 100 ok and let's have a look at what I
09:47 - want to know okay so let's say p1 like
09:50 - that and let's pass that to change X
09:53 - let's go to change X t1 and then let's
09:57 - actually fmt dot print line p1 before
10:01 - and after just so we can see what this
10:03 - looks like okay so what I'm doing right
10:05 - now and let's just walk through this
10:06 - I'll slow down for a second here is I'm
10:08 - taking some point that I've created so
10:10 - I've made a p1 it's equal to the pointer
10:13 - to the point that is defined by this
10:16 - right so before if I didn't have the
10:18 - pointer I'm saying this is equal to this
10:20 - point object so it's the value right
10:22 - it's not equal to the address it's equal
10:24 - to the value of this point I can still
10:26 - pass it around I can still use it but
10:28 - now I've said it's equal to the pointer
10:30 - to this point which means that I can
10:32 - actually have the reference so I can
10:34 - change things inside of like a function
10:36 - right which we talked about in previous
10:37 - videos so I'll start by printing out p1
10:40 - then I'll call change X on p1 and then
10:43 - I'll print out p1 again and we'll see if
10:45 - it actually changes the value of x and
10:46 - then I'll show you a contrast for one
10:48 - name does or doesn't so it does the
10:50 - opposite of what we just did so let's
10:52 - have a look at this here go run tutorial
10:53 - echo and let's see what we get okay so
10:56 - we get 0 3 103 so clearly it did change
10:59 - it although we didn't change PTX and
11:02 - and here it did actually end up changing
11:04 - it to the value 100 and you can see that
11:06 - these are both still pointers right now
11:09 - what happens if I do this so let's get
11:11 - rid of the pointer here and let's get
11:12 - rid of that and now let's see if any of
11:14 - this changes so I'm no longer gonna pass
11:15 - a pointer when I pass that to change X
11:18 - I'm actually going to pass the value of
11:20 - p1 so I'm just gonna pass that object
11:23 - let's have a look at what happens now we
11:26 - get 0 3 0 3 so we actually didn't end up
11:29 - changing the value inside of the point
11:32 - now that's weird why did that happen
11:34 - well when we don't pass the pointer of
11:38 - one of these struck to a function what
11:41 - ends up happening is we actually just
11:42 - make a copy of this point so we say ok
11:45 - we're gonna pass the value of point
11:47 - which is you know X is equal to 0 Y is
11:49 - equal to 3 we pass that to change X it
11:52 - kind of makes like a copy of that and
11:54 - then it changes its own copies value to
11:57 - be X so if I go down here and I say fmt
11:59 - dot print line PT you'll see that here
12:02 - inside of this function yes this PT x
12:04 - value has changed but down here it
12:07 - doesn't get changed because we just
12:09 - passed the value we didn't pass the
12:11 - pointer and I hope this makes sense cuz
12:13 - we talked about this a lot in the last
12:14 - video but I just wanted to show you that
12:16 - that's why I went into that talking
12:17 - about pointers right because they're
12:19 - very important to understand so if we
12:22 - have a look here we go go run tutorial
12:23 - go we see that we get 0 3 103 which is
12:27 - this print statement so this actually
12:29 - did change the point that was here but
12:31 - down here it didn't change it so just
12:34 - keep that in mind there's some cases
12:35 - where you don't want to pass a pointer
12:37 - you'd rather just have this object make
12:39 - a copy right or you'd have this function
12:41 - make a copy but in a lot of situations
12:43 - you do want to pass the pointer and when
12:45 - you're passing the pointer you do the
12:47 - same thing where you put an Asterix here
12:48 - to define you're getting a pointer not
12:50 - the actual value and then you're good to
12:53 - go
12:53 - now some of you may have noticed I'm
12:54 - gonna delete change X and get out of
12:56 - this example a little bit here that when
12:58 - I had passed the pointer to that
13:01 - function
13:01 - I actually didn't need to dereference it
13:03 - before I change the value of x so
13:06 - there's this cool thing on Struck's that
13:08 - lets you do this so if I have p1 equals
13:10 - a pointer to the point you would think
13:13 - that what I would have to do is say
13:15 - asterisk
13:15 - p 1 x equals like 8 or something writer
13:20 - I would actually have to do this Asterix
13:22 - P 1 dot X so I would say let's get the
13:24 - actual value right and then let's change
13:27 - it so I'm dereferencing the pointer but
13:29 - the way that structs work is it doesn't
13:31 - matter if you have the pointer or if you
13:33 - have the value you can directly use this
13:36 - so you can directly use the dot operator
13:37 - to access any of the fields inside of
13:40 - your struct so X or Y again I know this
13:42 - is getting like pretty confusing but
13:44 - this is something that we're gonna keep
13:45 - going through so it'll make more sense
13:47 - to at the tutorial series but I just
13:49 - want you to know that it doesn't matter
13:50 - if your what is it if your struct is a
13:53 - pointer or the value so if we have the
13:56 - ampersand vs no ampersand it doesn't
13:57 - make a difference we can still use this
13:59 - dot operator to access any of the fields
14:02 - inside of the struct now the last thing
14:04 - I'm gonna show you is an embedded struck
14:06 - now this might be going a little bit far
14:07 - for some of you guys but I do need to
14:09 - cover it as is an important part of go
14:10 - length so I'm gonna show you to say type
14:13 - circle is its own struct and inside of
14:17 - this struct what I actually want to have
14:19 - is a point and a radius so I'm gonna
14:22 - start by defining the radius so I'm
14:24 - gonna say radius is a float64 and I'm
14:27 - gonna say that the point is actually
14:30 - type point now what this is pretty much
14:33 - saying is that we actually have a field
14:35 - inside of our circle that points to
14:38 - another struct and in fact I'm actually
14:39 - going to put an asterisk here to define
14:41 - that this is a pointer to the point
14:43 - because when we have a circle I want to
14:46 - have some point where the middle of the
14:48 - circle is so we can actually call this
14:49 - like the origin if we want it or we can
14:52 - call this like Center let's just do that
14:54 - and that's equal to a point so we're
14:57 - gonna use a struct inside of another
14:59 - struct so how would I actually go about
15:00 - doing that well there's multiple ways I
15:03 - can do it so first of all I can define a
15:04 - point like this with the ampersand so
15:07 - I'm saying this is a pointer to this
15:08 - point and then what I can make a circle
15:11 - so I could say c1 colon equals let's say
15:15 - circle and then inside here we need a
15:17 - radius so let's past like four point
15:19 - five six four point five six and then
15:22 - let's pass p1 as our pointer right or as
15:25 - our point so we're saying that we have
15:27 - four point five six which is the radius
15:29 - and then since the center is a pointer
15:31 - to eight points we simply pass the
15:34 - pointer to the point that we defined
15:35 - here which is p1 now I don't have to do
15:37 - that I could also do this I could write
15:39 - the ampersand points because again we
15:44 - want the pointer not the value and then
15:46 - I could put like four or five in here
15:47 - and now I've set a hub have a circle
15:49 - with radius four point five six and then
15:51 - I have a point inside of the circle with
15:55 - the value four or five now this is where
15:58 - it gets interesting
15:58 - how do I access X Y from this point well
16:02 - let's have a look at how we can do this
16:04 - here so I'm gonna delete p1 and I'm
16:05 - gonna go and then they start by just FM
16:07 - t dot print line c1 and I want to show
16:09 - you what this looks like so let's go go
16:11 - run tutorial dot go and let's have a
16:13 - look at this okay so four point five six
16:15 - and then we have some pointer notice
16:18 - that's what that's printing out right so
16:19 - now let me show you what happens when I
16:20 - print out c1 dot center so c1 Center
16:24 - gives me let's have a look at here the
16:28 - actual point right here so it's saying
16:30 - it is a pointer but it's giving me four
16:32 - or five so if I wanted to access the x
16:34 - value of my points what I would do is do
16:36 - c1 dot center dot X and once that's what
16:40 - that is saying is I want to access the X
16:42 - attribute from the center which is that
16:45 - point right in there ego I'm able to
16:48 - access it so that's how you access an
16:50 - embedded struct and same thing if you
16:52 - wanted to change something on the
16:53 - embedded struck you do see one dot
16:55 - center dot Y or Center X now it's
16:59 - important that usually when you have an
17:00 - embedded struct you use the pointer to
17:02 - it not just a struct itself um we can
17:06 - talk about that more as we get into
17:07 - methods in the next video but what you
17:09 - can also do and there's are so many
17:10 - things with structs I'm just trying to
17:12 - show you guys as much as I can because
17:13 - you don't have to actually give it a
17:14 - name if you want to have an embedded
17:17 - struct inside of another struct you can
17:19 - just write that struct like this so if I
17:21 - just write this like Asterix point you
17:23 - can see that I'm not getting any errors
17:25 - up here here I am because I'm
17:26 - referencing Center but what this says
17:29 - now is if you just put point um it will
17:31 - just as long as none of the attributes
17:34 - from here are the same as what's inside
17:36 - of here you can just do this now you can
17:38 - do C 1x
17:39 - like that and that will actually
17:41 - reference the X field from the point
17:45 - so since I'm feeding in a point here and
17:47 - there's no attributes of the same name
17:49 - from point and circle I can reference x
17:51 - and y from the point from inside circle
17:54 - without having to call some intermediate
17:56 - name like Center so I can just do C 1
17:58 - dot X right so IOC 1 dot X I go go run
18:00 - tutorial go we get for no problem and I
18:04 - can do C 1 dot y as well and then of
18:07 - course I could reference C 1 radius so
18:10 - that's kind of how this works when you
18:11 - do an embedded struct you can just put
18:13 - one directly inside or you can give it a
18:15 - name and then if you give it a name you
18:17 - use the name and then the dot operator
18:19 - for whatever attribute it is you want to
18:21 - reference okay so I feel like that was a
18:23 - lot I totally understand that this might
18:26 - be a little bit confusing to some of you
18:27 - guys but again I just need to go through
18:29 - this this is now where we're getting
18:30 - into some of the more complicated
18:31 - features of go line in the next video
18:34 - we're gonna talk about methods which are
18:36 - actually really important and that will
18:37 - hopefully shine some light on a little
18:39 - bit more how these kind of structs and
18:41 - types actually work so with that being
18:43 - said I hope you guys enjoyed if you did
18:44 - make sure you leave a like subscribe and
18:46 - I will see you in the next YouTube video