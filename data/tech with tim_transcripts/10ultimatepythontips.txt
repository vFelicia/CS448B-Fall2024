00:00 - in this video I share with you 10 simple
00:02 - practical and extremely useful python
00:05 - features that every python developer
00:07 - needs to know now these features save
00:09 - you time make your code more readable
00:11 - and best of all can be learned and
00:13 - understood in under 60 seconds so with
00:16 - that said let me rapidly go through
00:17 - these features after I rapidly tell you
00:19 - about the sponsor of this video well it
00:22 - looks like no one wanted to sponsor this
00:24 - video so I'll just tell you about my
00:25 - programming course programming expert
00:27 - now this is one of the most affordable
00:29 - and effective ways to become a software
00:31 - engineer it teaches go python and a ton
00:34 - of other topics like software
00:36 - engineering tools and software design
00:38 - you can check it out from the link in
00:40 - the description and use the discount
00:41 - code Tim I promise you this is a great
00:44 - platform I put months and months of
00:46 - energy into making it it has hundreds of
00:48 - practice questions a live online coding
00:50 - IDE a ton of practice problems and over
00:53 - 7 000 people have purchased it already
00:55 - so if you want to become a software
00:57 - engineer or just get better at
00:58 - programming check it out from the link
00:59 - in in the description I also have a
01:01 - blockchain expert course if you're
01:02 - interested in web 3 development so the
01:05 - first tip to share with you has to do
01:06 - with the underscore in Python many
01:08 - people may not know this but the
01:10 - underscore is a valid variable name and
01:12 - it can be used in a lot of different
01:13 - situations so look what happens when we
01:15 - type an underscore in the python
01:16 - interactive shell you see that we get an
01:19 - error and it says it's not defined
01:20 - however if I do something like x equals
01:23 - 2 and then X Plus 1 and then I type
01:26 - something like underscore you see that I
01:28 - get the value 3. now the reason I get
01:30 - the value 3 is in the interactive shell
01:32 - the underscore actually stores the value
01:34 - of the previously evaluated expression
01:36 - so I can actually do something like
01:38 - underscore plus three when I do that I
01:41 - get six seems very strange but this
01:44 - underscore always stores the previously
01:46 - evaluated expression so that you can use
01:48 - it on the next line without having to
01:49 - type it out again now the underscore can
01:52 - also be used within your program for
01:54 - example you see that I have some code
01:55 - here and I want to actually ignore the
01:57 - index as I'm iterating through the
01:59 - tuples in this list so what I do is I
02:02 - use the underscore as an anonymous
02:03 - variable that I don't actually have to
02:05 - access or utilize and that I won't get
02:07 - errors for with my linter if I have that
02:10 - so A lot of times if you have python
02:11 - linting enabled you'll get some error
02:13 - saying this variable name is not used
02:15 - well you can avoid that by using the
02:17 - underscore so in this case I just get
02:18 - the word out of my tuples as I'm
02:21 - iterating through them in this array or
02:23 - in this list now we can also use the
02:25 - underscore to declare private members in
02:27 - classes so for example if I have the
02:29 - class person here inside my Constructor
02:31 - or really anywhere I can declare a
02:33 - private attribute by prefixing it with
02:35 - an underscore when I do this I'm
02:36 - denoting to all the other python
02:38 - developers that are reading this code
02:39 - this should only be used inside of the
02:41 - class body that we shouldn't access this
02:44 - attribute outside it doesn't actually
02:45 - enforce that because you can still
02:47 - access this if you want but it's just a
02:49 - convention that we use in Python moving
02:51 - on we talk about Lambda functions now
02:53 - Lambda functions are one line Anonymous
02:54 - functions that are extremely useful in
02:56 - callbacks in this case we have a list
02:58 - this list contains some different areas
03:00 - with people and we want to sort these
03:01 - people by their age to be able to do
03:03 - that without using a Lambda or some
03:05 - custom callback function would be a bit
03:07 - challenging but in this case what we can
03:09 - do is say people.sort and we can pass a
03:11 - custom key to this sort function that is
03:13 - a Lambda function the way we write the
03:15 - Lambda function is we say Lambda we
03:17 - declare some type of parameter in this
03:19 - case we have person we also don't have
03:21 - to have a parameter we could just do
03:22 - this if we want in this case we have one
03:24 - parameter person then we specify the
03:26 - parameter and the age so person age
03:28 - accessing the age and now we're going to
03:30 - sort every single element in our people
03:32 - list by their ages now there's a bunch
03:35 - of different cases where we can use
03:36 - Lambda functions for example we can use
03:38 - it in the map and filter functions
03:40 - that's oftentimes where you see it but
03:42 - we can also use it when we want to pass
03:43 - a callback function that needs to be
03:45 - called with a specific parameter so to
03:47 - quickly set up an example here let's say
03:49 - we have Define call and we take in some
03:52 - function now this function we're going
03:54 - to call inside of here well a lot of
03:56 - times we want to call this function with
03:57 - a specific parameter and what we might
03:59 - have to do is past that parameter as a
04:02 - second value so we have param like that
04:04 - now to avoid having to do that you can
04:06 - use a Lambda function and then pass the
04:08 - custom parameter you want now it's a
04:10 - little bit hard to explain this well
04:11 - let's say add
04:12 - X Y here and then return X Plus Y what I
04:17 - can do is the following I can say call
04:19 - with the Lambda of and then this is
04:23 - going to be a function so it's going to
04:25 - be add with 2 3. now when I do this what
04:28 - happens is I will call the add function
04:30 - with the value 2 3 rather than having to
04:33 - do something like add and then pass the
04:35 - two values to three as additional
04:37 - parameters to this call function I'm not
04:40 - sure if that's making sense to you if
04:41 - you haven't seen that example then this
04:42 - probably isn't a use case that will
04:44 - apply to you but in a lot of cases I
04:45 - have to pass callback functions and I
04:47 - need them to include a specific
04:48 - parameter maybe that's in a certain
04:50 - scope if that's the case then I use the
04:52 - Lambda function to essentially wrap this
04:55 - function call such that I can still use
04:57 - as a callback with the specific
04:58 - parameters moving on we have the zip
05:00 - function now the zip function is
05:02 - extremely useful when we want to be
05:04 - iterating over or looking at multiple
05:06 - different lists or iterable objects that
05:08 - have corresponding indices what I mean
05:10 - by that is an example like this where we
05:12 - have a students list that contains names
05:14 - and then a grades list where all of the
05:16 - indices in the grades list correspond
05:18 - with the names in the students list in
05:20 - this case we know Alice has an 85 Bob is
05:22 - 90 and Charlie has a 78. now rather than
05:25 - looping through and kind of finding all
05:26 - of the numeric indices and matching them
05:28 - up manually we can use the zip function
05:30 - which will essentially do that for us
05:32 - what zip will do is return a tuple that
05:34 - contains all of the matching indices in
05:36 - that Tuple so in this case when I run
05:38 - the code you can see we get Alice 85 Bob
05:40 - 90 Charlie 78 David 92 and if we look at
05:43 - what we're just getting from the raw
05:44 - output of this ZIP object you can see
05:47 - that we get tuples that contain the
05:48 - pairings as it kind of iterates through
05:50 - these lists now one thing to note is
05:52 - that we can use zip on multiple
05:54 - different lists or multiple iterable
05:56 - objects so for example if I go here and
05:58 - do something like favorite colors and
06:00 - then I add maybe blue and red now I can
06:02 - zip through those as well so I'll go
06:05 - here and I'll zip three things and now
06:07 - we can do student grade
06:09 - and then color and I'll just pass color
06:12 - here and let's get rid of that
06:14 - come up here clear and run and notice
06:18 - that we actually only get two entries
06:19 - this time now the reason we only get two
06:21 - entries is zip only goes as far as the
06:24 - shortest list or the shortest iterable
06:25 - object so in this case since we only had
06:28 - two matching indices because we only
06:29 - placed two colors here we only got two
06:31 - entries in our zipped list if we include
06:34 - another one then we would get one more
06:36 - and if we include one more then we would
06:37 - get all of the different values so just
06:39 - keep that in mind you're always going to
06:41 - be producing a list of tuples or a zip
06:43 - object of tuples that contains the
06:45 - minimum number of elements out of all of
06:47 - the different objects that you're
06:48 - zipping the next tip I have for you is
06:50 - to use the dot get function whenever
06:51 - you're trying to access the value
06:53 - associated with a key from a dictionary
06:55 - now many of you have probably seen this
06:57 - error before but if I go to my word
06:59 - counts dictionary and I try to access a
07:01 - key that doesn't exist so let's say we
07:02 - run the code here you see that we get an
07:04 - error and it says key error now the way
07:06 - that we can avoid getting that error is
07:08 - by using the dot get function and
07:10 - providing a default value in a lot of
07:12 - instances what people will do is check
07:14 - if a key exists inside of a dictionary
07:16 - before attempting to access it to make
07:18 - sure they avoid the key error however
07:21 - what we can do is something like this
07:22 - where we just use dot get What DOT get
07:24 - will do is attempt to get the value
07:26 - associated with a key but if that key
07:28 - does not exist it will return whatever
07:30 - default value you provide as the second
07:32 - argument to this function so in this
07:34 - case I attempt to get the keyword and if
07:36 - the keyword does exist I get the value
07:38 - associated with it otherwise I just get
07:41 - zero this means I can avoid checking if
07:43 - the word key exists inside of this
07:45 - dictionary before I attempt to access it
07:48 - so if we look here and I run the code
07:49 - you can see that everything is fine and
07:51 - we're counting all of the elements that
07:52 - exist inside of words without having to
07:54 - check if the key exists first before we
07:57 - increment that key hopefully that makes
07:59 - sense super useful I pretty much use
08:00 - this every single time I'm trying to
08:02 - access the key associated with a
08:04 - dictionary so the next tip I have for
08:06 - you is to use the set default function
08:08 - for specific scenarios related to
08:10 - dictionaries Now set default Works
08:12 - similarly to dot get but it actually
08:14 - assign finds a default value as well as
08:16 - returning that value to you if a key
08:18 - does not exist so have a look at this
08:20 - example here we have a student's grades
08:22 - dictionary now this is going to contain
08:24 - nested dictionaries so what we do is we
08:26 - attempt to get the math grades for Alice
08:29 - okay so we say student grids dot get
08:31 - Alice and then we return a default value
08:34 - of a dictionary if the Alice Key doesn't
08:37 - exist in this case it doesn't exist so
08:39 - what happens is we return the dictionary
08:41 - we then look at that dictionary we say
08:43 - math grades at math is equal to zero now
08:46 - the issue here is that we don't actually
08:47 - modify what exists inside of student
08:50 - grades we just modify what was returned
08:52 - as the default value because Alice
08:55 - didn't exist we don't assign that inside
08:57 - of student grades so when we print out
08:59 - student grades we see that no value has
09:01 - been added into the dictionary for the
09:03 - key Alice or Alice doesn't even exist in
09:05 - there however when you use the set
09:07 - default method this is different what
09:10 - this does is actually assign the default
09:12 - value and then return that to you so so
09:14 - you're referencing the same object that
09:16 - now exists inside of the dictionary so
09:18 - here when we say English grades is equal
09:20 - to studentgrades.set default what it
09:23 - does is check if the Alice Key exists if
09:25 - it does just Returns the value
09:27 - associated with it if it doesn't it
09:29 - assigns the key Alice equal to the
09:31 - default value dictionary then Returns
09:34 - the default value dictionary to us so we
09:36 - have the dictionary here we then say the
09:38 - dictionary at English is equal to 85 and
09:40 - now that actually modifies what exists
09:42 - inside of student grades so when I print
09:44 - that out I get the key value pair Alice
09:46 - and then the nested dictionary that we
09:48 - modified from the default value the next
09:51 - tip I have for you has to do with the
09:52 - print function now the print function
09:54 - has some added functionality that most
09:55 - people don't know about for example we
09:58 - can actually pass to it two keyword
09:59 - arguments that change how it works so
10:02 - first let's look at a default example so
10:04 - we have a numbers list here and what we
10:06 - do is we unpack this list using the
10:08 - asterisk operator which essentially
10:10 - passes all of these individual elements
10:12 - as if they were individually passed in
10:14 - to the function so writing asterisk
10:16 - numbers essentially does this it just
10:18 - passes them as individual arguments into
10:20 - the function where we then know they're
10:22 - going to get printed out separated by a
10:24 - space by default so the default behavior
10:26 - of the print statement is print all of
10:28 - the different arguments separated by
10:29 - space then print the new line character
10:31 - which moves us to the next line for the
10:34 - next print statement so this here is
10:36 - going to work just like normally right
10:38 - whereas here what we do is we actually
10:40 - specify a different separator so you can
10:43 - pass sep equal to and then any string
10:45 - that you want and this will change what
10:47 - your separating elements in the print
10:49 - statement with for example if you don't
10:50 - want any separator you just make this an
10:52 - empty string and now you will not have
10:54 - spaces between your elements if you want
10:56 - to have a dash you put a dash here like
10:58 - I have notice as well that we can also
11:01 - print out something with end now what
11:03 - end will do is change what you're
11:05 - printing at the end of the print
11:07 - statement seems straightforward by
11:09 - default end is equal to a backslash n or
11:12 - to a carriage return which will move you
11:14 - down to the next line in this case when
11:16 - we remove that backslash n we're not
11:18 - automatically going to move to the next
11:20 - line and what we have to do here is
11:21 - compensate for that by printing two
11:23 - backslash ends to really separate the
11:25 - set I'll just show you here if I run the
11:28 - code so let's clear this and run kind of
11:30 - what we get here we get the default
11:32 - print print with different separator
11:33 - print with different end character
11:35 - notice this is now the end character
11:37 - that's happening after one two three
11:39 - four five and then print with both the
11:41 - separator and the end character like we
11:43 - just did here so very useful when you
11:45 - want to have some more advanced prints
11:46 - and this can kind of avoid you having to
11:48 - do an advanced for Loop where you're
11:50 - going through and checking the indices
11:51 - and printing out different separators
11:53 - just use the sep and end option in the
11:55 - print statement the next tip I have for
11:57 - you is to use negative indexes when
11:59 - applicable now negative indices allow
12:01 - you to access the last elements from
12:04 - some iterable object especially when
12:06 - you're using the slice syntax this is
12:08 - super useful because you don't need to
12:09 - know the length of some structure to
12:11 - access the last element the second last
12:13 - element Etc in this case I have negative
12:15 - one that gives me the last element in
12:17 - this list if I do a negative two that's
12:19 - the second last element you just start
12:21 - from the very back and go towards the
12:23 - beginning in the opposite direction now
12:25 - as well as just using it to access an
12:27 - individual index we can use this to
12:28 - remove the last element so quite useful
12:30 - if we want to create a slice of this
12:32 - here then I do colon negative one that's
12:35 - going to give me all of the elements
12:36 - except the last one and kind of pop that
12:38 - off for me what I can also do is use
12:40 - this to reverse a list or reverse some
12:43 - structure so if I do colon colon
12:45 - negative one what that actually is is a
12:47 - shortcut for reversing something so if I
12:48 - do this operation you can see we get the
12:50 - Reversed events to prove that to you if
12:52 - I run this you can see we get all the
12:53 - outputs here feel free to pause and look
12:55 - through them the next tip I have for you
12:57 - is to use the else statement associated
12:59 - with a for Loop or a while loop now
13:01 - oftentimes when you're looping through
13:03 - something what you're attempting to do
13:04 - is find something right there's some
13:06 - Target element or something that you're
13:07 - searching for now if that's the case you
13:09 - typically break out of that Loop and
13:11 - that indicates that you found what
13:12 - you're looking for now most people will
13:14 - create what's known as a flag which is
13:16 - essentially a Boolean variable that
13:17 - they'll set to True manually if they
13:20 - found what they're looking for however
13:21 - you don't need to do that because we
13:23 - have this else syntax so here what I can
13:25 - do is Loop through a bunch of numbers if
13:28 - I find the target element that I'm
13:29 - looking for I can break
13:31 - and that means I will not trigger this
13:33 - else statement however if I don't find
13:36 - what I'm looking for automatically after
13:38 - my for Loop python will enter the else
13:40 - statement printing that we did not find
13:43 - what we're looking for so whenever you
13:45 - want to see if you didn't break out of a
13:47 - loop use this else syntax now the same
13:49 - thing works here with our while loop if
13:52 - we don't break out of the while loop so
13:53 - essentially once this condition becomes
13:54 - false and we didn't encounter a break
13:56 - then this else statement will run
13:58 - allowing us again to determine if we
14:00 - broke out or not or found the element or
14:02 - the Target that we were looking for the
14:04 - next tip I have for you is a super
14:06 - simple one but this is to perform
14:07 - in-line swaps now in Python you can
14:10 - actually swap the value of two variables
14:12 - or just assign or create multiple
14:13 - variables on the same line using comma
14:16 - syntax so what I can do here is to find
14:18 - my two variables X and Y if I want to
14:20 - swap their values I can just say x comma
14:22 - Y is equal to Y comma X seems obvious
14:25 - but in a lot of other programming
14:26 - languages you would actually need to
14:27 - create a temporary variable to store the
14:30 - value of one of the variables you're
14:31 - swapping which just kind of is messy
14:33 - syntax involves three lines of code and
14:35 - can be a little bit confusing so instead
14:37 - if you just use this syntax right here
14:39 - you can swap the values in one line now
14:41 - you also can assign multiple values in
14:43 - one line so I can do something like X Y
14:45 - is equal to 100 200 I can assign three
14:47 - values four values five values as many
14:49 - as I want pretty useful thing and last
14:52 - thing to show you here is you can
14:53 - actually decompose different structures
14:55 - using this so I can do something like X
14:57 - Y is equal to 1 2. now X will be equal
15:00 - to one y will be equal to two if I make
15:02 - this a tuple same thing will work x
15:04 - equal to 1 y equal to two something
15:07 - useful that you may not know alright so
15:09 - the last tip I have for you is the
15:10 - ternary operator now this is essentially
15:12 - an inline if else statement that allows
15:15 - you to assign different variables
15:17 - without having to write out the whole
15:18 - kind of if else structure so if we look
15:20 - here we can see that we have a more
15:21 - complex example of using this but we
15:24 - have poor if age is greater than 60 or
15:26 - smokes otherwise we have kind of this
15:28 - whole thing if we put this in a set of
15:30 - parentheses good if the age is less than
15:32 - 30 else fair so what we'll do doing is
15:35 - assigning poor good or Fair on one
15:37 - single line which avoids us having to do
15:39 - this nested if else structure which
15:41 - you're seeing right here don't really
15:43 - know how better to explain it
15:44 - essentially we have what you want if the
15:46 - if statement is true that goes on the
15:48 - left side then what you want otherwise
15:51 - goes on the right side so you have
15:52 - whatever's on the left here some if
15:54 - statement you then write else and then
15:57 - you can put anything you want here on
15:58 - the right so I could have just put Fair
16:00 - like that but instead I've put another
16:02 - ternary operator that's what this is
16:04 - referred to that now goes into the exact
16:06 - same thing so I've kind of parenthesized
16:07 - it so you can see but now we're saying
16:09 - good if age is less than 30 otherwise
16:12 - fair so we'll now evaluate good or fair
16:14 - if the condition is not poor okay
16:17 - hopefully that's making sense but that
16:19 - is the ternary operator and that is the
16:20 - last tip I have for you in this video
16:23 - with that said I'm going to wrap it up
16:24 - here I went nice and fast I hope that
16:26 - you guys enjoyed this and learned some
16:28 - new python features if you did make sure
16:30 - to leave a like subscribe to the channel
16:31 - and I will see you in the next one
16:35 - thank you
16:40 - foreign