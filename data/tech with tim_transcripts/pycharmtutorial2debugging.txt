00:06 - hey guys and welcome back to another
00:08 - pycharm tutorial video in today's video
00:11 - we're gonna be talking all about
00:12 - debugging and the way that PyCharm can
00:15 - help you debug your code and save you a
00:17 - lot of time and a lot of headache while
00:19 - coding so the PyCharm debug tool is
00:22 - extremely useful and extremely powerful
00:24 - when I first found out about it it kind
00:26 - of blew my mind because it was allowing
00:28 - me to do things that I never would have
00:30 - been able to do in idle and save me tons
00:32 - of time so first of all the debug tool
00:35 - is up here in this top right hand corner
00:36 - it's right beside the run it looks like
00:38 - a little bug which makes sense so if you
00:41 - click it it's gonna bring up your basic
00:43 - console and it's gonna run the program
00:44 - just like it would before the only
00:46 - difference is you get this little
00:47 - debugger tab and this is what I'm going
00:49 - to be showing you how to use today
00:50 - there's a lot of cool tools in it you
00:52 - can hover over some of the stuff and
00:53 - kind of play with it for yourself if you
00:55 - don't believe me so I'm just gonna end
00:57 - the program for right now because I want
00:59 - to show you how to add breakpoints first
01:02 - before we can really use this debug tool
01:04 - to its full potential so when you're
01:06 - debugging code a lot of the time you
01:08 - know like we're loop is or like where a
01:10 - statement is that's giving you some
01:11 - issues so if you want to check out that
01:14 - statement you want to look closer into
01:16 - it you might want to add something
01:18 - called a breakpoint and this is how
01:20 - we're gonna be doing things with the
01:21 - debug tool so you can see I have a
01:22 - little bit of code here I have one
01:23 - function two functions and pretty much
01:26 - all this does is it's just gonna get two
01:28 - random numbers and it's gonna ask you to
01:29 - tell what the multiplication of those
01:31 - numbers is if you get a crack tells you
01:33 - correct if you get incorrect it tells
01:34 - you incorrect and so on so it add a
01:37 - breakpoint in pycharm you this thing
01:39 - called the gutter on the left hand side
01:41 - and you can see beside the line number
01:42 - if you click then you can add a little
01:45 - red dot and to remove it you just click
01:47 - on it again so what I'm going to do is
01:49 - I'm just gonna add one at this if
01:50 - statement here and I kinda just have to
01:52 - show you by example how this works so
01:54 - when I start running the function just
01:56 - notice it's gonna run this main function
01:57 - ten times when I run we're gonna go in
02:00 - this while loop it's gonna ask me a
02:01 - question and then it's gonna check if
02:02 - this is a digit so let's just run this
02:04 - in the debug tool and see what happens
02:05 - okay so I'm clicking debug it asked me
02:08 - to type in a number so we're not yet at
02:11 - this line because we're still asking for
02:13 - M
02:13 - so let's type in something let's type 56
02:15 - and now you can see that my console
02:18 - moves to the side and we get into this
02:20 - debug tab what this breakpoint does is
02:22 - it breaks the execution of the program
02:24 - at this point so the second we hit this
02:27 - if statement we're no longer executing
02:29 - we're stopping and we're having a look
02:31 - at this statement so you can see on the
02:32 - right-hand side it shows me a bunch of
02:34 - variables and then it shows me these
02:36 - frames here so let's talk about the
02:38 - variables first so whenever you have a
02:40 - breakpoint when you hit that breakpoint
02:42 - it's gonna show you all of the different
02:44 - variables and so on within that scope
02:48 - and the scope right now is this main
02:49 - function so you say I have a variable
02:51 - run i have num num to result now look at
02:54 - my actual code it shows me with a little
02:57 - comment beside each variable what those
03:00 - variables are equal to and this is
03:02 - actually amazing I don't know how this
03:05 - even works but it can save you so much
03:07 - time especially if you're messing around
03:09 - and you accidentally have a variable
03:10 - that's resulting in none or something
03:12 - like that so you don't have to keep
03:13 - printing them to the screen it just
03:14 - shows you them right here so you can see
03:15 - ant equals 56 results six like this and
03:18 - it shows you the same thing here now I
03:21 - want to show you we can actually add new
03:23 - things to look at as well so say we want
03:25 - to just look at the variables that's
03:26 - great and this is gonna save us a lot of
03:27 - time but what if we want to check like
03:29 - an expression so we can actually use the
03:31 - sync old new watch so I'm going to click
03:33 - new watch and in here I'm simply just
03:35 - gonna type an expression in this case I
03:36 - want to say if string yeah NS loops is
03:41 - equal to and in this case we're gonna
03:43 - say what is it result like that okay and
03:47 - then I'm gonna click enter and you can
03:49 - see this gives us a result and it says
03:51 - false so it says if the string answer is
03:54 - equal to result and then it's just gonna
03:56 - give us the answer to that expression
03:58 - pretty much or whatever that evaluates
04:00 - to we can add as many as we want we
04:01 - could do something like an S + H and now
04:06 - you can see I get 56 H and you can do
04:08 - whatever you want here you can make them
04:09 - as long as you want and that's what you
04:11 - can look at different expressions
04:12 - without actually having to have them
04:14 - typed out in your code to delete one you
04:16 - can click the little minus key deletes
04:17 - it same thing here and add new ones
04:19 - again just click a new watch now I'm
04:22 - going to talk about these frames in just
04:23 - a second but let's go back to the
04:25 - console for one second so I
04:27 - what is three times 256 we've looked in
04:30 - our debug we've seen okay all this looks
04:31 - good we want to continue running our
04:33 - program now you can see we're still
04:35 - running we haven't stopped the program
04:36 - we just took a break at this breakpoint
04:39 - so to continue running the program we
04:41 - click this little icon here and it's
04:43 - just like the play button with a little
04:46 - line through it so resume program so the
04:47 - resume program and now we'll resume and
04:49 - we'll rerun everything until we hit the
04:51 - breakpoint again so we've run main again
04:53 - we've now printed another thing saying
04:55 - what is this value so it's 3 times 2
04:58 - again so let's just type I don't know 5
05:00 - ok now we've hit the breakpoint same
05:03 - thing happens we can go back to the
05:04 - debugger console we can see that ans
05:06 - equals 5 num num result and so on again
05:10 - if we want to run one more time we click
05:12 - run what is 3 times 2 it just because
05:13 - these aren't changing don't worry about
05:15 - that
05:15 - we do 6 ok if we hit the breakpoint same
05:19 - thing go back to debug and we can see
05:21 - all these values like that ok so when we
05:24 - want to stop the program we can just
05:25 - click stop debug and there we are now
05:29 - you can actually add multiple
05:30 - breakpoints as well so if you wanted to
05:32 - break first of all our results see
05:33 - what's happening there and then you want
05:35 - to resume and break at the else that's
05:37 - perfectly viable and you're allowed to
05:38 - do that ok so let's just add another
05:41 - breakpoint this time I want to add it at
05:43 - this random Trant int so whenever we
05:45 - call this I believe it's gonna break
05:48 - here okay so let's run the program again
05:50 - in debug mode and there we go right away
05:53 - we've hit this breakpoint that's because
05:56 - we're calling main we go num 1 equals
05:57 - generate random number and there we are
06:00 - so our upper limit in this function is
06:02 - equal to 10 and that's the only variable
06:04 - that we have so far so if we want to see
06:06 - the value of our well we would have to
06:08 - break at return our because we haven't
06:09 - actually yet set that variable because
06:11 - we haven't executed but I want to show
06:13 - you what these do up here so we have a
06:15 - step over step in step in to my code and
06:19 - step out and then step or return to run
06:22 - to cursor so if you're first looking at
06:24 - the easing might be like what the heck
06:25 - does this do doesn't really make any
06:27 - sense me well this is going to allow you
06:28 - to run line by line through your code
06:30 - and see exactly what's happening without
06:32 - adding a ton of different breakpoints so
06:35 - if I click step into like this you can
06:38 - see we actually open up random
06:40 - hi and this is the random module so
06:43 - import random and weird since we're
06:45 - calling a method on random and we've
06:48 - just clicked step into we're gonna step
06:50 - into this method and by doing that it
06:53 - needs to open up the function that is
06:55 - actually being culled and this is in
06:57 - this case it's rent int now this can be
06:59 - useful in some cases but in a long time
07:02 - but we don't want to step into other
07:05 - code so we don't want to step into like
07:06 - other methods or things that aren't
07:09 - actually a part of our own code so I'm
07:11 - gonna close this I'm gonna click resume
07:13 - and we're just we reach the breakpoint
07:16 - again because we're calling what do you
07:17 - call it numb to generate random number
07:19 - now what i'm gonna click is I'm gonna
07:21 - click step into my code and by stepping
07:24 - into my code what this does is it simply
07:26 - just goes to the next line so you can
07:30 - see that now instead of stepping into
07:32 - this rent in function we just step into
07:35 - the next line of my actual code so I'm
07:36 - gonna click it again step into my code
07:39 - and now you can see we return back to
07:41 - result and we can keep stepping through
07:44 - the program so step into my code if we
07:46 - want to step into this while loop we'll
07:47 - click step into my code and though now
07:50 - we get a and that's when we're gonna
07:51 - have to type something in the in the
07:53 - console now we can also do step over and
07:57 - what this does is simply gonna skip the
07:58 - line of code so we've stepped over and
08:00 - now we've actually stepped like
08:02 - completely over all of that code and now
08:04 - we're back into this main here because
08:06 - we just stepped over again so you kind
08:08 - of have to play with these and figure
08:09 - out how they work because it is kind of
08:12 - confusing but it's really useful so
08:14 - let's just add another breakpoint here
08:16 - at the if statement let's we're gonna
08:18 - break this and we're gonna run again we
08:21 - go to debugger and we've hit this oh
08:24 - it's because we have a breakpoint up
08:25 - here so let's just resume ok we just
08:29 - need to type something in the console so
08:30 - I'm gonna type 70 and now we hit this
08:32 - breakpoint if Anna study is digit okay
08:35 - so now we're gonna go and I click step
08:37 - over and you can see that it steps up to
08:39 - this next if statement I can step in
08:41 - words so into this if statement or it
08:43 - can step over so if I step over we go to
08:45 - correct keep going and I can keep
08:47 - stepping and we go back into this while
08:49 - loop like so so pretty much you're gonna
08:52 - have to play with these because
08:54 - they are hard to kind of explain how
08:55 - they all work but once you get the hang
08:58 - of these they'll save you a lot of time
09:00 - in debugging your code now there's one
09:03 - more thing I want to show so I'm gonna I
09:04 - just add another breakpoint in I don't
09:06 - know return R here okay so we're gonna
09:08 - run debug we're gonna be brought into
09:10 - here and you can see we have the
09:12 - variable R and upper now I want to show
09:14 - you this thing and it's called evaluate
09:16 - expression so it looks like a little
09:17 - calculator here if you click a value 8
09:19 - expression you're actually able to
09:20 - evaluate any expression with the
09:22 - variables that are in the current scope
09:25 - so the ones that are showing up here so
09:27 - I do something like R plus 7 you can see
09:29 - I get a result of 17 I could do like
09:32 - string art like that and it gives me a
09:35 - result of 10 and you can evaluate any
09:37 - expressions you want without actually
09:38 - having to type them in your code again
09:40 - this will save you a lot of time and
09:43 - it's extremely useful if you don't want
09:45 - to be constantly printing things out and
09:46 - typing them in here because an idle to
09:48 - be able to do this you'd have to print
09:50 - string R and you'd have to print like
09:52 - the type of it whereas right here it
09:53 - gives you the exact value and even the
09:56 - type which is really useful so now I
09:59 - told you I was gonna talk about frames
10:01 - so let's do that here so in these frames
10:03 - we have multiple so we have a main frame
10:06 - which is well this function main we have
10:09 - module which is just anything that's
10:11 - within like the least indentation level
10:13 - so in our main line here so this stuff
10:15 - would be in the debug frame and we have
10:19 - generate random which is a frame for
10:20 - this function so we can check into
10:23 - multiple frames whenever we're kind of
10:26 - looking here so since we broke here
10:28 - before we were able to create anymore
10:29 - variables and create result if I step
10:32 - into the main debug frame here then it
10:35 - only gives me a variable of run because
10:37 - we haven't created an omni one yet we
10:38 - haven't created num2 yet we haven't
10:40 - created result so you can only see that
10:41 - one if I step in to generate random you
10:44 - can see that how the variable are in the
10:45 - variable upper and then same thing if I
10:47 - go back to the main one we have X in
10:48 - time so you can step through these
10:50 - frames and look at what's exactly
10:51 - happening in every function every method
10:54 - so on so again if I want to resume I'll
10:57 - resume and now if I go back to the main
10:59 - you can see that we have num1 is created
11:01 - because we've just stepped through
11:02 - another iteration until we hit this
11:04 - breakpoint so I'll do so again and you
11:06 - can see that our program
11:07 - just continues because now that we've
11:09 - called generate random twice we're never
11:11 - gonna hit this breakpoint again okay so
11:14 - I think that's been it kind of for
11:16 - debugging there is more things that you
11:18 - can do but this is kind of the basics
11:20 - and this will save you a lot of time if
11:22 - you can figure it out I recommend
11:24 - practicing how this debug thing works
11:26 - and kind of just playing around with it
11:28 - with some of your own code putting some
11:29 - breakpoints places seeing how it works
11:31 - cuz that's really the only way to
11:32 - understand all of it completely
11:34 - anyways that's been it for this video if
11:36 - you guys enjoyed please make sure you
11:37 - leave a like and subscribe and I will
11:39 - see you again in the next one
11:43 - [Music]