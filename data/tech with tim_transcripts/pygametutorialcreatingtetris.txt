00:00 - hey guys and welcome to a new tutorial
00:02 - series so I was talking about doing this
00:04 - tutorial series but we could go and I
00:06 - finally got around to doing it so this
00:08 - is gonna be Tetris in Python with PI
00:11 - game now this is a pretty advanced
00:13 - tutorial a lot of the stuff I do in here
00:15 - assumes that you already have a basic
00:17 - knowledge of Python and you kind of know
00:18 - some of the syntax and you're not a
00:20 - complete beginner that being said if you
00:22 - are a complete beginner feel free to
00:24 - watch through C what you might
00:25 - understand you're probably gonna learn
00:26 - something along the way it just might be
00:28 - a little bit confusing because I'm kind
00:30 - of gonna speed through a few things that
00:31 - are I would consider like trivial right
00:33 - now okay so first step for this tutorial
00:36 - series is you guys have to download and
00:38 - install Pi game because that's the
00:39 - module we're gonna be using so I will
00:41 - put a link in the description and a card
00:44 - in the top right hand corner here to go
00:46 - and do that I have a video it's pretty
00:48 - quick and it kind of goes through any
00:49 - areas you might run through when
00:50 - installing PI games so watch that first
00:52 - and then come back here okay so let's
00:54 - just give a quick preview of what our
00:56 - game is going to look like so this is
00:58 - Tetris I didn't go too fancy with the
01:01 - graphics I pretty much just want to make
01:03 - sure that we get everything functional
01:04 - here and then you guys can play around
01:06 - and change stuff later on if you want to
01:08 - but yeah this is a fully functioning
01:10 - game you can see it's just like standard
01:12 - Tetris we have different colors shapes
01:13 - are falling down the screen shows us our
01:15 - next shape and there we go the road just
01:17 - cleared so that's all I'm going to show
01:19 - you for right now because I want to get
01:21 - into actually coding okay so pretty much
01:26 - what we're gonna be doing in this first
01:27 - tutorial is we're gonna be working a bit
01:29 - in the main function we're gonna be
01:32 - creating the grid we're gonna be talking
01:34 - about formatting shapes all the basics
01:36 - of just setting up for the rest of the
01:38 - tutorials so with the first step and
01:40 - what I need you guys to do is you're
01:41 - gonna download kind of like a starter
01:43 - file okay and that's just because if you
01:44 - see here I scroll through my file I got
01:46 - a lot of lists I got a few things set up
01:48 - here and you know what I could go
01:49 - through and type them all out but that's
01:51 - just a waste of a video because it takes
01:53 - a long time so to save yourself time and
01:55 - to save me some time what I'm gonna do
01:57 - is just put a link in the description
01:59 - it's a pastebin link click that link and
02:01 - download this code it's just gonna be
02:03 - all this it just has all the functions
02:05 - that we're gonna need for this and then
02:07 - it has these shape formats which I'm
02:09 - going to talk about in just a minute so
02:10 - go do that if for some reason paceman is
02:12 - not working
02:13 - let me know in the comments and I'll
02:15 - find another way to give it to you but
02:16 - I'm also going to put it in the pinned
02:18 - comment so that you can just copy and
02:20 - paste it from there as well I do
02:21 - recommend you check the indentation on
02:24 - it though because sometimes it messes up
02:25 - on paste bin and in the comments ok so
02:29 - now that you've got that downloaded
02:31 - we're working on that I'm gonna be
02:33 - working in pie chart if you don't know
02:35 - about pycharm don't worry about it you
02:36 - can just use ID ideally but they're just
02:39 - gonna save me a bit of time because it
02:40 - autocompletes variables it does some
02:42 - cool stuff so that's what I'm gonna be
02:43 - working in feel free to work in PyCharm
02:45 - feel free to work in whatever text
02:46 - editor you want just know that that's
02:48 - what I'm using it doesn't make a
02:49 - difference but some of the stuff I do in
02:51 - here you might not be able to do in
02:52 - ideally or sublime text or whatever you
02:54 - guys are gonna use okay so we've got
02:56 - that all the way we've got everything
02:57 - set up and now we're ready to actually
02:59 - start coding and understanding what's
03:00 - gonna be going on so Tetris is a fairly
03:03 - complex game you have shapes moving down
03:04 - the screen they're rotating around
03:06 - they're moving left and right when they
03:08 - hit the bottom they freeze in whatever
03:10 - position they're in and then if you have
03:12 - a full row complete like cubes
03:14 - they're not real clear and you keep
03:16 - going and obviously you lose the game if
03:18 - you stack up too many blocks and it goes
03:21 - up or above the top of the screen
03:23 - okay so this first variable is we need
03:26 - to set up is our screen width and our
03:28 - screen height so we got 800 700 here the
03:31 - next ones are play with and play height
03:33 - now this is the actual red box that you
03:35 - guys saw that's what these are
03:38 - representing so since in Tetris we have
03:40 - a 10 by 20 grid we need to make sure
03:43 - that our play with is exactly half of
03:44 - our play height so that we have perfect
03:46 - squares right so doing the math here
03:48 - that makes it 30 width and 30 height per
03:51 - block so that's our block size of 30
03:53 - okay so now this top left and top left X
03:57 - and top left Y this represents the top
04:00 - left position of our actual play area
04:03 - that's so when we start drawing blocks
04:05 - and we start checking for like collision
04:06 - and stuff like that we just have these
04:08 - already set up and we don't have to deal
04:09 - with that so the math is pretty
04:11 - straightforward you guys could probably
04:13 - figure that out you don't need me to
04:14 - explain that okay shape formats so these
04:17 - and this is the longest part is why I
04:19 - got you guys to copy everything is this
04:21 - is what's gonna represent our shapes in
04:23 - Tetris now you see that I have multiple
04:25 - lists inside of
04:26 - in most cases this is because each shape
04:29 - has possibly more than one rotation
04:32 - right so this is the standard rotation
04:34 - of the S shape and that's actually what
04:37 - they're called in Tetris like si oh
04:39 - whatever and this is the second rotation
04:41 - and these are the only two rotations or
04:44 - whatever that s can have so that's why
04:47 - we have them in here we have a 5x5 grid
04:49 - of periods and then whatever there's a
04:51 - zero that represents where the block
04:52 - actually exists okay so Zed you can
04:55 - scroll through you can kind of look at
04:56 - them and you can see for some of them
04:57 - for example the square well it doesn't
04:59 - have any rotation if you flip it it's
05:01 - gonna look the same so we only have one
05:03 - list here for J
05:05 - however the hope we have for right
05:07 - because we can rotate in different ways
05:08 - l we also have for T we have four as
05:10 - well okay after this I create a list and
05:14 - it just holds all of my shapes so s said
05:17 - I just so that that way I can really
05:19 - easily select shapes just by indexing
05:21 - them in the list like 0 through 6 and
05:23 - shape colors here is the same thing it
05:26 - just corresponds like for example if I
05:28 - did shape 0 and I did shape color 0 then
05:31 - that's gonna be the color of shape 0
05:32 - okay same thing with like 6 so shape 6
05:35 - well color list our shape color 6 is the
05:39 - color of that shape so it just makes it
05:41 - really easy we don't have to deal with
05:42 - dictionaries or anything like that okay
05:44 - alright so now we've kind of gone
05:46 - through the like starter file I'd say
05:50 - and you can scroll down here you can
05:52 - look at the function names I'm not gonna
05:53 - explain them because most of them are
05:54 - pretty straightforward and I'll talk
05:55 - about them when we start coding them
05:57 - anyways
05:57 - but we do have a class here now this
05:59 - class is gonna be the main kind of data
06:02 - structure if you want to call it for our
06:04 - game and this is gonna represent or this
06:07 - class is going to represent different
06:09 - pieces so the reason we have the class
06:11 - is because we're gonna call this a bunch
06:12 - of times and it's pretty much just gonna
06:13 - hold the information like X Y width
06:15 - height for our piece so let's actually
06:17 - start coding this now so I'm just going
06:19 - to create my initialization function or
06:20 - method and this is actually the only
06:22 - method that I'm going to have so I need
06:24 - another underscore just butchered that
06:26 - and pretty much what this is gonna have
06:29 - is gonna have an X of Y and then it's
06:32 - gonna have a shaker okay and let's see
06:34 - on the information we need for this and
06:35 - I'll show you why
06:36 - so we'll say self dot X
06:38 - Exce self-thought y is equal to Y self
06:43 - dot shape is equal to shape and then
06:47 - what we're gonna do here now is we want
06:49 - the color and we want the rotation so a
06:51 - self taught cover well I was already
06:54 - talking with this self doubt color is
06:55 - just equal to whatever the index of this
06:58 - shape is in this color list so what we
07:01 - can do is we do shape under short colors
07:04 - square brackets and then shapes dot
07:06 - index and whatever shape we were given
07:10 - so if we're given the shape s well let's
07:12 - just find it in the shape list whatever
07:13 - index that is well that's the color of
07:15 - our shape pretty straightforward and
07:18 - then we're gonna do a rotation so
07:20 - rotation this set default to zero and
07:22 - this is so that whenever we click the up
07:24 - arrow key we can just add one to this
07:26 - rotation and that will represent what
07:29 - shape were actually gonna be showing
07:30 - because again remember the shape list is
07:32 - a multi-dimensional list it has more you
07:34 - can see here in this case for lists
07:36 - within it okay alright create grid I
07:41 - don't know if we want to do this one yet
07:42 - you know what actually let's go let's go
07:44 - ahead and do this one it's not too
07:45 - complicated so the way that I'm gonna
07:47 - represent the grid in Tetris so that 10
07:50 - by 20 grid is just by creating a list
07:53 - full of colors okay so we're gonna have
07:56 - a two-dimensional list and within that
07:58 - second dimension it's gonna represent a
08:00 - bunch of colors okay so I'll show you
08:01 - just by coding and kind of talking about
08:03 - after say grid is equal to and then
08:06 - another square bracket here for X and
08:09 - range 20 and or I'll explain this in one
08:14 - second and I will say for X and range
08:18 - ten okay except here I just go to 0 0 0
08:24 - okay so what I've just done here this is
08:27 - pretty this is like the Python way to
08:29 - create list K list comprehension we're
08:32 - gonna create one list for every row in
08:34 - our grid so since we have 20 rows we
08:38 - want to create 20 sub lists and each of
08:40 - these like sub lists or whatever
08:42 - two-dimensional list is going to have a
08:45 - bunch of colors in it how many colors is
08:46 - gonna have well it's going to have ten
08:47 - colors because we have ten squares in
08:51 - each row
08:52 - we have 20 rows so that's the way it
08:54 - works these X's you could replace with
08:56 - underscores because we don't really care
08:58 - about the actual variable we just need
08:59 - to do this that many times now zero zero
09:02 - zero zero or zero zero zero
09:04 - yeah I think that's right anyways that's
09:06 - just black it stands for block and the
09:08 - way we're gonna draw the grid is simply
09:10 - by looping through this grid which we're
09:11 - going to return and just drawing each
09:14 - color so it makes it pretty
09:15 - straightforward okay now the only thing
09:17 - that we have to do here though is we
09:19 - have this locked position argument now
09:22 - locked position well right now we've
09:24 - created a blank grid what if there's
09:27 - already blocks that have been placed in
09:29 - our grid so like they've already fallen
09:30 - they're static now they're not moving
09:32 - well we need to also draw those so to
09:35 - draw those we're gonna check if any of
09:37 - the positions in locked position are not
09:40 - like or whatever positions are in locked
09:42 - position we're gonna get that color and
09:44 - we're gonna change the corresponding
09:45 - value in the grid I'll show that just by
09:48 - kind of cooking it here so for I in
09:51 - range let them do the length of grid and
09:54 - again this is gonna give us 20 because
09:56 - the length of grid well that it's 20 of
09:58 - these right okay so for I in range Len
10:01 - of grid for J in range and then we'll
10:05 - say the Len of grid I because now we're
10:09 - in this list so now we're gonna do
10:11 - whatever the length of that list is okay
10:13 - I say if this so if J comma I because J
10:19 - is our x value I is our Y value because
10:22 - rows are represented by I and the
10:24 - columns are represented by J in locked
10:27 - position and just you know locked pause
10:30 - it stands for locked position it's also
10:32 - a dictionary so you can see that it's a
10:34 - blank dictionary here and each position
10:36 - so like for example if I had like 1 1 is
10:38 - gonna be set equal to a color and the
10:40 - color could be something like 255 0 0
10:42 - okay and we're gonna talk about that and
10:43 - create that later but that's just
10:45 - somebody needs to know for now okay so J
10:47 - I in locked position so if that key
10:48 - exists let's figure out what that key is
10:50 - so that key is gonna be equal to well
10:53 - locked position and what the value is
10:56 - sorry associated with that key ji now
10:59 - we're gonna change whatever the current
11:01 - grid position is here so for grid I
11:05 - a is equal to C okay I know this might
11:10 - seem kind of complicated but pretty much
11:11 - we're just looking through this grid and
11:12 - we're gonna find the corresponding
11:14 - position to the locked position and just
11:16 - change the color in the grid so later
11:18 - when we draw it we get an accurate grid
11:20 - okay and you guys will see how this all
11:22 - is kind of plays out later if it seems a
11:24 - bit confusing now okay and then we're
11:26 - gonna return that grid to wherever we're
11:29 - calling okay so that that's one part
11:31 - done now we can move down and we can go
11:33 - into draw window which is then actually
11:36 - let's do get shaped this one's really
11:37 - easy okay so this is literally a
11:40 - one-liner
11:40 - returned random dot actually what is it
11:47 - called here I gotta have a look I get
11:49 - some random dot choose random dot choice
11:51 - that's where this random dot choice and
11:53 - then we're gonna be giving a shapeless
11:55 - so say shape actually let's just go cold
12:00 - up here sorry guys shape random dot
12:04 - choice shapes all this is gonna do is is
12:06 - gonna pick one of these shapes and it's
12:08 - just gonna give it to us so that when we
12:11 - need to create like a new shape falling
12:13 - down the screen ever ever that that's
12:14 - all we have to do k so get shape random
12:17 - dot choice that one's really easy okay
12:19 - next one draw a grid all right so what
12:21 - we're gonna do is we're gonna be passed
12:22 - a surface and a surface obviously what
12:25 - we're gonna be drawing on so we're gonna
12:26 - start by just changing the surface
12:28 - surface not win service dot fill with
12:32 - color this case the colors gonna be
12:33 - blocked okay I serve your stuff failed
12:34 - as yours ever do alright next thing
12:36 - we're gonna do is we're just gonna draw
12:38 - like a title on the thing so the way we
12:40 - have to do this would be first up to
12:41 - start by initializing the font objects
12:43 - link we do then PI game fonts don't an
12:46 - it okay this means we're setting up font
12:49 - and we're getting ready to draw to the
12:50 - screen we're gonna create a font it's
12:53 - gotta say font is equal to PI game taunt
12:56 - font dot sv s capital SOS font and then
13:02 - we need the font name
13:02 - I'm the Comic Sans guy somebody's at
13:05 - Comic Sans size of the font to move
13:07 - yeah size of the font Randy sixty okay
13:10 - so the way you want to set up your own
13:12 - font you want to change this just change
13:13 - this to any font you can look up fonts
13:16 - on the PI game website
13:17 - and then just give it a size if you know
13:19 - the name of the font type it in here it
13:20 - probably exists in in pygame alright so
13:23 - now we're gonna need to set up a label
13:25 - so I say label is equal to font dot
13:28 - render and then in here we need the text
13:31 - that we're gonna render in this case I'm
13:32 - going Cola Tetris we need our
13:34 - anti-aliasing of one and I believe we
13:36 - need a color in this case I'm gonna make
13:38 - it white
13:39 - okay so text anti-aliasing just set this
13:43 - one I don't know why you need to set
13:45 - this one but just set it one and then
13:47 - whatever color you want your label to be
13:48 - okay now that we've got the label we
13:50 - need to draw this label on the screen so
13:51 - lets blend it now when I'm used to
13:54 - typing when surface double its and then
13:56 - in this case we're gonna put the label
13:58 - where do we want to put it well now we
14:01 - want to figure out where the middle of
14:03 - the screen is so we could just hard code
14:05 - this in but if we ever want to change
14:06 - the dimensions of our screen we want
14:08 - this just automatically kind of adapt to
14:09 - that so we're gonna do top left X plus
14:15 - play width / - okay
14:19 - and that's gonna give us the middle of
14:20 - the screen if you don't understand that
14:22 - let me know when I can explain it to you
14:24 - in the comments down below okay now
14:26 - we're gonna subtract this sorry this
14:27 - isn't actually done yet by the width of
14:30 - the label because this is gonna matter
14:31 - um depending on how long the label is we
14:34 - it's going to determine where we place
14:36 - it on the screen so we're gonna get the
14:38 - width of the label and we're gonna
14:39 - divide that by two okay so now we need
14:42 - to do the Y well the Y is pretty easy we
14:44 - can just statically type this in because
14:46 - it's from the top of the screen so I'm
14:48 - just gonna give it I think like 50 is
14:50 - what I typed in 30 okay and that should
14:53 - put it in the middle the screen and I
14:55 - can explain that to any of you guys that
14:57 - might not understand it if you just
14:58 - leave a comment because I don't want to
14:59 - waste too much time because I a lot
15:00 - people might understand that so for I in
15:03 - range now the Len of grid because now
15:07 - we're gonna start drawing all the great
15:08 - objects onto the screen so we created a
15:09 - grid we know how that kind of format
15:11 - works we're gonna say for J and range be
15:16 - Len of grid I same as before and we're
15:21 - gonna do pygame dot draw dot rectangle
15:25 - and then this guy's been drawn the
15:27 - surface and then we're gonna go create
15:31 - i J okay and then top underscore he left
15:38 - I need to put this in what do you call
15:41 - brackets your top underscore left so I
15:44 - just need to scroll over top left
15:46 - underscore X plus j x 30 and I'll talk
15:50 - about this one in just a second how this
15:51 - works and then top left y plus i x 30
15:58 - another bracket and there we go
16:00 - now we just got to deal with this grid
16:02 - thing so that means that we just now
16:03 - need to pass grid as well into our drop
16:07 - grid okay way this works we're gonna
16:10 - loop through every color within our grid
16:12 - so this is the color grid I J all right
16:15 - this is the surface we're drawing it
16:16 - onto and this is the position in which
16:18 - it's being drawn now we also just need
16:20 - to add two things here that I realize I
16:23 - forgot because we need the X Y we need a
16:25 - width and we need height so for width
16:27 - and height well that's go to the block
16:29 - size and block size once again and you
16:32 - know we can even multiply this instead
16:34 - of by 30 by block size in case we ever
16:35 - decide to change that so let's do that
16:38 - just to keep this nice and dynamic and
16:40 - then if we keep going over here the last
16:42 - thing we need is a fill so we're just
16:45 - going to put comma zero to make sure
16:47 - that we fill in the shape we don't just
16:49 - draw like a border for it okay way this
16:51 - works we add our top left X and we're
16:53 - gonna figure out wherever we are so
16:55 - which column were in multiply that by
16:58 - block size and that's our x position
17:00 - same thing works for the y with a
17:03 - starting Y position plus whatever row
17:06 - we're in x the block size will give us
17:08 - the correct position to draw our Cuban
17:10 - okay after we've done all that we just
17:14 - need to update the screen so pygame
17:16 - don't display to update and there we go
17:19 - so there's actually one last thing we
17:20 - want to draw and it's that red rectangle
17:23 - that you guys saw in that kind of
17:25 - represented like the play area so to
17:26 - draw the a video pie game dot draw dot
17:30 - wrecked and then surface and then in
17:33 - this case we're just gonna actually
17:35 - let's see here do we want do i want to
17:37 - dynamically type this in or do I want to
17:38 - statically draw it so let's give it a
17:40 - color first of all of red 0 0 0
17:43 - okay and we're actually gonna type it in
17:45 - dynamic just in case we decide to change
17:47 - anything later so top left X and top
17:51 - left Y and then the width oh we actually
17:53 - already have all these variables so we
17:54 - have the play underscore with and you
17:57 - play underscore height and in this case
17:59 - we're gonna give it a border size four
18:01 - okay and that's all for drawing the grid
18:04 - we might come back to this later but for
18:06 - now that's it okay so this just draws
18:09 - the actual grid ah draw a grid and I've
18:13 - added this okay we're just gonna copy
18:15 - this part of you guys that says draw a
18:17 - grid so sir first up put this label and
18:19 - I'm just gonna move this in because I
18:20 - realize I have another function called
18:21 - draw window so in draw window what I'm
18:24 - gonna do is surface top fill whatever
18:26 - okay so I take surface and a grid so I
18:30 - just copied some of it from there and
18:32 - then instead of updating the screen here
18:34 - we're gonna update the screen over here
18:36 - and we're just gonna call our draw grid
18:41 - what do you call function like this okay
18:44 - so now what if we want to draw the grid
18:45 - and we want to use this in another
18:47 - program we could just copy and paste
18:48 - this function we wouldn't have to kind
18:50 - of take it out of here we do enough like
18:51 - dissected alright okay subtract rid
18:55 - again this takes surface and this takes
18:57 - grid and there we go I believe that's
19:00 - working well okay now that we've done
19:02 - that we're gonna start coding in the
19:05 - main and in main menu and this is what
19:07 - we're gonna finish off with this
19:08 - tutorial because I know we're almost at
19:09 - the 20 minute mark great so what we're
19:12 - gonna do in Maine now is we're gonna set
19:13 - up a few variables so the first variable
19:15 - we need is this locked position locked
19:18 - positions guy and again this is what
19:20 - we're passing up here in to create grid
19:23 - it's equal to a blank dictionary just a
19:28 - set in case we don't pass it then we
19:29 - don't need it okay so locked positions
19:31 - equals blank we had to say grid is now
19:34 - equal to well create grid because we
19:35 - already created that function with
19:37 - locked positions passed to it and create
19:39 - a variable called change underscored
19:41 - peace it's gonna be equal to false we're
19:44 - gonna make run equal to true this is
19:46 - just for our while loop that we're going
19:48 - to use we're going to say current peace
19:50 - is equal to get underscore shape okay
19:54 - we're going to say
19:56 - next piece is equal to get shape as well
20:01 - where I set up a clock object and clock
20:03 - is equal to PI game time dot clock and
20:08 - we're gonna set a variable called fall
20:10 - time equal to zero and those are all the
20:12 - variables that we need in our main
20:14 - function already coded for us okay so
20:16 - now we're gonna set up our while loop
20:18 - that's our main game like you're say
20:19 - well run first thing we need to do in
20:21 - our loop is sorry for event in in PI
20:24 - game dot event dot get let me say if
20:28 - event dot type equals equals PI game
20:31 - don't quit well that means we need to
20:35 - quit the program so the way that we can
20:36 - do that just simply hitting run equals
20:38 - false it's gonna break us out of our raw
20:40 - loop and then we can deal with that
20:41 - afterwards we're also gonna add another
20:43 - event this is a keydown event so if
20:45 - event type equals equals pi game dot
20:48 - keydown like that then we're gonna check
20:52 - what specific key is actually hit so
20:54 - let's go ahead and do this now I can I
20:56 - get it over with so I'm just going to
20:57 - type all the different keys and then
21:00 - we'll go in and code that after so we'll
21:01 - say if what do you call it PI game key
21:05 - equals equals I believe that's what it
21:09 - is our event key I'm not plugging ducky
21:11 - tonight bad guys event ducky equals
21:13 - equals PI game dot K underscore capital
21:17 - okay okay underscore left let me say if
21:22 - event key equals equals PI game dot K
21:26 - underscore right like that and then same
21:30 - thing up and down so if event don't key
21:33 - equals equals PI games do it okay
21:36 - underscore down and last one can screw
21:40 - up okay okay I don't know why that keeps
21:47 - happening
21:48 - okay okay underscore up like that okay
21:52 - so painfully after typing that left
21:54 - right down up now we can go in here and
21:56 - we can kind of code what each of these
21:57 - is gonna do so if we're hitting left we
21:59 - want to move our block left if we're
22:02 - coding right well if we're hitting right
22:04 - you want to move our block right and run
22:06 - down we won't move down we're going
22:07 - we want to rotate our shape that's what
22:09 - the main things are gonna do in here so
22:12 - if we want to move our piece left well
22:14 - we should change the wat the x value
22:17 - left wise okay
22:19 - so the way that we can do that inside
22:21 - current piece dot X minus equals one now
22:24 - I know you guys are looking at this
22:25 - right now you're saying okay well what
22:26 - what the heck man so current piece is
22:29 - equal to get shape and that's all it's
22:31 - equal to get shape well what is get
22:33 - shape and it's just returning random
22:36 - choice shapes now this actually just
22:39 - made me realize the fact that our get
22:41 - shape thing needs to change a bit that's
22:43 - because we need to actually create a
22:45 - piece in here so we set up this lovely
22:47 - class up here we weren't even using it
22:49 - so piece random noise shapes is the last
22:53 - argument takes it also takes an x and a
22:55 - y value right so for the X and the y
22:58 - well the Y is pretty straightforward is
23:00 - just going to be 0 the X has to be the
23:03 - middle of the screen so di gave me 5 and
23:05 - for y we're gonna give it to you okay
23:07 - and actually for y we'll leave it 0 for
23:10 - now but we might want to make it
23:12 - negative so that it kind of starts above
23:13 - the screen and then starts falling down
23:14 - okay so we have let's make sure this
23:16 - works it looks right X Y shape yep okay
23:19 - great okay so that makes sense now on
23:22 - how we can change this x value same
23:23 - thing for right I'm gonna do Trant piece
23:26 - Y or X plus equals 1 like that and for
23:32 - down we're actually just gonna take this
23:35 - in for now but this is not exactly
23:36 - what's gonna work y plus equals 1 to
23:39 - move downwards and for up well we need
23:41 - to rotate the shape so to rotate the
23:43 - shape this is actually pretty easy over
23:45 - induced Ava's current piece rotation
23:48 - plus equals 1 okay because when we
23:50 - change that rotation well that changes
23:52 - the actual image of the shape okay now
23:56 - this is all great but the thing is what
23:58 - if we're moving off the screen or what
24:00 - if this is not a valid position well
24:02 - that's why we have a function called
24:03 - valid space now valid space we haven't
24:08 - yet coded but I do have it in here
24:10 - somewhere valid space and what valid
24:11 - space is gonna do is it's simply going
24:13 - to return if the current position that
24:14 - we're in is a valid space so the way
24:16 - that I do is in this case just make life
24:18 - a lot easier if we're moving left let's
24:20 - simply just
24:21 - change the pieces ex move it left one
24:23 - and then check if that's a valid
24:25 - position and if it's not well then we
24:26 - can just add one and move it back to
24:28 - where it was so I say if not and then
24:31 - valid space and valid space again take
24:34 - two arguments can take the current piece
24:35 - it's gonna take the grid okay then let's
24:39 - just simply subtract or add one to our
24:42 - piece so all this is saying is we're
24:44 - gonna move left but if for some reason
24:46 - moving left results in not a valid space
24:49 - well let's just add one and pretend like
24:50 - we didn't even move there so we're not
24:52 - drawing it we're not changing anything
24:53 - so this is perfectly fine and it's
24:55 - actually a really easy way to check
24:57 - things that happen to checking if if
24:59 - it's below this or above this or
25:00 - whatever okay so now next next one here
25:03 - I'm gonna say if not valid space and
25:06 - same thing current piece with grid well
25:11 - now in here instead of adding one we're
25:12 - gonna subtract one because we were
25:13 - trying to move right and there we go
25:15 - same thing with moving down okay so
25:17 - we're literally just gonna take the
25:19 - exact same thing if not valid space
25:25 - current piece and grid well now let
25:29 - instead of adding one we're just gonna
25:30 - subtract one and this is from the Y
25:31 - value this time so we'll set current
25:33 - piece Y - equals one okay so now for up
25:39 - so when we change the rotation we are
25:42 - changing the shape okay so it doesn't
25:46 - show this year Yeah right now look how
25:48 - we change the shape we're gonna do that
25:49 - later so we actually just call the exact
25:51 - same thing on rotation because think
25:52 - about it if we're fully on the right
25:54 - side with like the straight piece and we
25:58 - try to rotate well that could result in
25:59 - our piece being moved to the left or to
26:02 - the right or like there could be
26:04 - positions where it's on the left or it's
26:05 - on the right and it's not in the grid so
26:07 - we do have to check for rotation if it
26:10 - is a valid space we'll say current piece
26:12 - and then what else are we doing great
26:15 - here okay and then in this case again
26:18 - we'll just we'll just subtract one from
26:19 - rotation so minus equals one and that
26:23 - should all work pretty well okay so
26:25 - after we do that we're gonna make sure
26:27 - that we remember to draw the grid so in
26:29 - this while loop will so say actually
26:31 - draw window I'm gonna give it surface
26:34 - and we're going to give it grid now this
26:38 - reminds me that I haven't yet created a
26:40 - PI game surface that's great
26:42 - so let's do that so here I'm gonna say
26:45 - win equals PI game dot display don't set
26:48 - underscore mode in this case I'm gonna
26:51 - give it what is it screen width and
26:53 - screen height so s width and s
26:57 - underscore height and that's it for
26:59 - display you want to give this a caption
27:01 - though so let's say a PI game dot
27:04 - display dot set underscore caption yep
27:08 - so let's just call this Tetris like that
27:11 - and now we're gonna just pass when into
27:14 - our main menu will put win here and then
27:17 - in main menu we're gonna call me okay
27:19 - and we'll deal with main menu later I
27:21 - don't feel like coding it right now and
27:23 - it's not really important to like the
27:24 - main functionality of a game so we can
27:26 - simply just do this okay main win like
27:30 - this and if I put win here then
27:34 - everything should work out this says
27:36 - surface change this to say when in
27:41 - little cases okay so now you've
27:43 - effectively done draw a grid or draw
27:46 - window draw a grid get shape create grid
27:50 - we've created a piece we've gone through
27:52 - what all this stuff and the starter file
27:53 - does and we are now at 27 minutes okay
27:56 - so I think this is a good time to take a
27:59 - break kind of digest everything that
28:01 - we've just done here I know a lot of it
28:02 - doesn't make sense yet because we
28:03 - haven't actually coded a lot of the
28:04 - functions but trust me as we go through
28:06 - the videos things are gonna start to
28:07 - make sense you're gonna see how all this
28:09 - stuff works again as I mentioned it's
28:11 - pretty complex so until I kind of go
28:13 - through everything at once and explain
28:15 - it all at the end like how all this
28:16 - stuff kind of fits together and works it
28:19 - might seem a little bit confusing
28:19 - anyways that's it for the first video if
28:22 - you guys are excited about this game you
28:23 - want to see the rest of it please make
28:24 - sure you leave a like and subscribe and
28:26 - I'll see you again in the next one
28:27 - [Music]