00:00 - hello everybody and welcome to another
00:01 - youtube video so in today's video i'm
00:04 - going to be showing you how i wrote a
00:05 - python script that can brew me a coffee
00:08 - using the internet of things now the
00:10 - internet of things is a bunch of things
00:12 - devices sensors motors whatever they may
00:15 - be that are connected to the internet
00:16 - and that can be controlled by system or
00:18 - software so in this case i have this
00:20 - little device it's called a fingerbot
00:23 - and i'll try to get in focus here so you
00:25 - can see it it has this one mechanical
00:27 - part and motion so if i press the button
00:29 - here you can see it should go down and
00:31 - then come back up
00:33 - so i've actually attached this to my
00:34 - coffee maker connected it to the toya
00:37 - smart iot platform which is actually the
00:39 - sponsor of this video and then use some
00:41 - python code to control this so i'm going
00:43 - to show you exactly how this works in
00:45 - this video i'll also be showing you how
00:47 - to connect some other smart devices that
00:49 - are iot enabled like a light strip i
00:51 - have a light strip that's actually in my
00:53 - door frame and i'll show you kind of how
00:55 - to change the colors and all that
00:56 - anyways this is a very cool video you
00:58 - don't even have to have these devices to
01:00 - follow along you can actually create a
01:01 - virtual version of them and everything
01:03 - i'm going to show you here is completely
01:05 - free so with that said let's go ahead
01:07 - and get started
01:11 - [Music]
01:16 - so i'm on the computer now we're going
01:18 - to go ahead and get started the first
01:20 - thing i want to do though is just
01:21 - explain to you more in depth what the
01:22 - internet of things is so the internet of
01:25 - things describes the network of physical
01:27 - objects the things that are embedded
01:29 - with sensors software and other
01:31 - technologies for the purpose of
01:33 - connecting and exchanging data with
01:35 - other devices and systems over the
01:37 - internet so these devices could be
01:38 - ordinary household objects or
01:40 - sophisticated industry tools and a
01:42 - complete iot system could include
01:44 - devices connected to the cloud software
01:46 - deployed in a cloud environment apps and
01:49 - web user interfaces and all these things
01:51 - would connect together using the cloud
01:53 - and using the internet of things to
01:54 - actually you know control different
01:56 - devices and achieve some task so that
01:58 - leads me now to what the toyota smart
02:00 - iot platform is so this platform is
02:03 - designed for developers to make iot
02:06 - easier the internet of things easier so
02:08 - the platform has kind of two main goals
02:10 - the first goal is to connect hardware to
02:12 - the cloud to make it iot enabled to
02:14 - allow you to do that and the second goal
02:17 - is to allow you to utilize connected
02:19 - devices and build cloud sas so software
02:22 - as a service based on those connected
02:24 - devices and cloud services so the tui
02:26 - iot platform provides tools to free
02:29 - developers from everything below the app
02:31 - layer which allows developers to focus
02:33 - on their application and product
02:34 - development without distraction now i've
02:36 - been using this platform i messed around
02:38 - with it before this video it's very easy
02:40 - to use very intuitive and you're going
02:42 - to see as we go through here it's pretty
02:44 - simple to actually connect these
02:46 - physical devices and start controlling
02:48 - them from software like in our case
02:50 - python scripts so now what i want to do
02:52 - is bring us off the computer quickly and
02:54 - i want to show you the physical devices
02:56 - that i'm using here just give you a
02:57 - quick walk through of kind of how they
02:59 - work and then we'll hop back on here
03:01 - we're going to have to make an account
03:02 - on the toya platform and once we've kind
03:05 - of done all of the initial setup and
03:06 - authorization then we'll hop into the
03:08 - python code and i'll show you how to
03:10 - connect these physical devices and how
03:12 - to actually control them so as i was
03:14 - mentioning i'm going to show you the
03:15 - physical components that i'm going to be
03:16 - using here and just kind of walk you
03:18 - through how they work so this here is
03:20 - the fingerbot that i showed you at the
03:22 - beginning of the tutorial come on camera
03:24 - focus in here has that one mechanical
03:26 - movement piece which is this arm right
03:28 - here you can kind of see it all i'll
03:29 - demo it going
03:31 - up and down
03:32 - now you can control this from python
03:35 - code from the iot to go any percent up
03:38 - and down that you want and to either
03:40 - stay down or stay up or whatever now
03:42 - this is actually a wireless device it
03:45 - does have a charging port at the back
03:47 - and then obviously an on and an off
03:49 - switch but you don't need to have this
03:51 - plugged in for it to work it's wireless
03:52 - now the way that this actually connects
03:55 - to the internet is by using this now
03:57 - this is not a wireless device if this
03:59 - will focus in the camera here this does
04:02 - need to be plugged in okay so there you
04:04 - go so this here is a bluetooth bridge
04:07 - that connects the fingerbot with it okay
04:11 - so this needs to be plugged in it has a
04:13 - little hdmi port right here comes with a
04:16 - cable and a usb port and you just need
04:18 - to plug this in somewhere so that it has
04:20 - power and then you need to actually
04:21 - connect it to an iphone app which i'm
04:23 - going to show you in a second now it
04:25 - also has kind of this on button at the
04:27 - back come on focus up here and that's
04:29 - what you do to put this into pairing
04:30 - mode so i'll show you how that works
04:32 - later but i just want to show you that
04:33 - what i'm using is the bridge so this
04:35 - kind of like bluetooth gateway and then
04:38 - i am using the fingerbot i'll leave
04:40 - links to both of these in the
04:41 - description down below and then the last
04:43 - thing i'll show you is that the
04:44 - fingerbot this little plastic piece
04:46 - right here if we can focus in this comes
04:49 - off you can kind of see where it slides
04:50 - out and you can replace it with other
04:52 - things like this so for example this is
04:54 - a ring i also have something that has
04:56 - like a little sticky pad on it that goes
04:59 - on there it's very very small you can
05:01 - kind of see it and then i have a few
05:02 - other ones i have a little shorter like
05:04 - one that goes in here and then this is
05:07 - the uh there's a longer one that goes in
05:08 - here as well there's a little accessory
05:10 - package oops just bump the mic there
05:12 - that you can get to put into the
05:13 - fingerprint so those are the two devices
05:15 - that i'm using to get the coffee brewing
05:17 - aspect of this video working however
05:20 - tulia has over 310 000 skus of different
05:24 - products within 1100 different
05:26 - categories and they service over 220
05:28 - countries so there's a ton of different
05:30 - products that work you can buy these
05:32 - products on amazon you can get all kinds
05:33 - of other products that connect with tui
05:35 - and what i'm going to show you here is
05:36 - not just specific to the finger bot the
05:39 - controls for it will be specific but
05:41 - following along with this will show you
05:42 - how to connect any other product as well
05:45 - so i apologize for all of the detailed
05:47 - explanation of everything here before we
05:48 - get started just want to make sure you
05:50 - guys are on track you know the hardware
05:52 - i'm using you know the basics of how it
05:53 - works now we can start actually creating
05:55 - a tui account connecting our devices and
05:58 - then eventually getting into the python
05:59 - code all right so we're back on the
06:01 - computer and now we're going to get
06:02 - started with the actual setup steps the
06:04 - first thing we need to do is create an
06:06 - account with tuia so what we're going to
06:07 - do is go to the iot platform so i'm
06:10 - going to press that button from this
06:11 - website all of the links here will be in
06:13 - the description and we need to sign up
06:15 - so i'm going to sign up and create an
06:16 - account once i'm back i will log into
06:18 - that account and then i will continue
06:20 - from there all right so i've just
06:21 - created my account and you can see the
06:23 - first thing i'm brought to here is
06:24 - whether or not i'm an individual
06:26 - developer or an organization now in this
06:28 - case i'm an individual developer so what
06:30 - i'm going to do is press set now and
06:32 - just select individual developers so i
06:34 - am an individual developer you don't
06:36 - need to select this right away you can
06:37 - select this later in the setup process
06:39 - but it's simple so i'm going to do it
06:40 - now okay so now that we've done that
06:42 - what we're going to do is go to this
06:44 - cloud tab here and we're going to go to
06:46 - development now the first thing that we
06:48 - really need to do is we need to actually
06:50 - create a new cloud development project
06:54 - but before we can do that we need to
06:55 - select what edition of toya smart iot
06:58 - we're going to use so you can see here
06:59 - there's a ton of different plans we're
07:01 - just going to go with the trial edition
07:03 - this is completely free so let's go
07:05 - ahead and do that all right so i'm just
07:06 - going to go through this process here so
07:08 - i select trial edition i don't need to
07:10 - add any notes i'm going to buy that
07:12 - don't worry you don't need to put in any
07:13 - credit card information it's completely
07:15 - free i'm gonna press submit order and
07:18 - then i should have the trial edition as
07:21 - my plan
07:22 - okay so there we go i now have the trial
07:24 - edition so what i'm gonna do is go back
07:26 - to the iot platform here and i am going
07:29 - to now go back to cloud and go to
07:32 - development all right so now that we're
07:33 - on this page you can see we're using the
07:35 - trial edition and the first thing we're
07:37 - going to do is create a cloud project so
07:39 - for the name what i'm going to do is
07:41 - enter coffee because that's kind of the
07:43 - main thing that we're trying to do here
07:45 - i could add a description i'm not going
07:47 - to add one for right now for the
07:48 - industry i'm going to go with smart home
07:50 - because this is something that's in my
07:52 - home but you could select the
07:53 - appropriate industry and then for the
07:55 - deployment method sorry development
07:57 - method not deployment method we're going
07:58 - to go with custom now you can read the
08:00 - detailed descriptions if you want but in
08:02 - our case custom is just the best that's
08:04 - the one that we're going to use and then
08:05 - the availability zone is going to be all
08:08 - of the areas in which we want this to be
08:10 - able to operate so in our case i want
08:12 - this to work in america that's because
08:14 - i'm located in canada so i'm going to
08:16 - select america but if you wanted this to
08:17 - work in other countries other regions as
08:19 - well then you would select china europe
08:21 - india whatever you guys know you can
08:23 - select the correct
08:24 - correct area and in this case actually
08:26 - i'll go with eastern america because i'm
08:28 - kind of in the east coast of america as
08:30 - well so yeah we'll go with those two all
08:33 - right so now that i have that i'm going
08:34 - to press create and this should create
08:37 - the project for me all right so after we
08:39 - do that it brings us to this page that
08:41 - says authorize api services now there's
08:43 - a bunch of different apis that we can
08:45 - use within the toya cloud iot platform
08:48 - but we need to authorize them so there's
08:50 - already seven that are added to our
08:52 - project here we have authorization
08:54 - industrial general device control a
08:56 - bunch of other ones you don't have to
08:57 - really understand what they are but make
09:00 - sure you leave these in here we do need
09:02 - to add one more though before we go any
09:04 - further now the one that i'm looking for
09:05 - here is industry project client service
09:08 - api so let's look for that industry
09:12 - client industry project client service
09:15 - okay this is the one that i want so i'm
09:16 - going to press that right there and it
09:18 - brings it over here and there's a few
09:20 - other ones that i want as well one that
09:22 - i want is lbs this is location based
09:24 - services so i'm going to add that in and
09:26 - then i also want the weather service now
09:29 - you'll see why we're going to use this
09:30 - in a second but pretty much i'm going to
09:32 - have my light strip adjust its color
09:34 - based on the temperature outside and so
09:36 - i just want to add these in right now so
09:38 - we don't need to do it later all right
09:39 - so i'm going to go ahead and press
09:41 - authorize so now that we've completed
09:43 - the authorization we're brought to this
09:44 - project configuration page now this is
09:46 - where we need to make an asset now an
09:48 - asset is something that's going to be
09:50 - accessible by a user we're going to set
09:52 - up that user right here and this asset
09:54 - is going to contain all of the different
09:55 - devices that a specific user can control
09:58 - so it's very important that you remember
10:00 - the phone number or email and the
10:01 - password that you set here so in this
10:03 - case for the asset name what i'm going
10:05 - to do is i am going to set it as room a
10:09 - you can set this as really anything that
10:11 - you want actually i'm going to change
10:12 - mine i'll just set it as a main asset
10:14 - and then for the account type you can
10:16 - choose either email or phone number it
10:18 - doesn't matter but you need to remember
10:19 - what it is that you put in here so in
10:20 - this case i'm going to go with phone
10:22 - number i'm going to fill in these two
10:23 - fields and then go to the next step
10:25 - because obviously i don't want you to
10:26 - see my phone number or my password so
10:28 - i've just completed that last form there
10:30 - and now i'm brought to a page that looks
10:31 - like this where i have my project which
10:33 - is coffee and then i have my access id
10:36 - slash my client id and my access secret
10:38 - slash client secret now these are two
10:40 - important pieces of information don't
10:42 - worry they won't go away you can get
10:43 - access to them later we're going to need
10:45 - these when we actually start making api
10:47 - calls okay so the first thing we're
10:49 - going to do here now that we've created
10:51 - our asset is we're going to add some
10:52 - devices so we're going to go to devices
10:55 - and this is where we're going to connect
10:56 - our bridge so that bluetooth bridge and
10:59 - then our fingerbot and then obviously in
11:01 - this case we have a light strip so i'll
11:02 - connect the light strip as well but in
11:04 - your situation you might just have one
11:06 - single device to connect so in an asset
11:08 - what you're going to do is press add
11:09 - device and then notice there's two
11:11 - options here you have add device with
11:13 - iot device management app and then you
11:15 - have add virtual device so if you're
11:17 - following along with this and you don't
11:19 - have a physical device what you can do
11:20 - is press add virtual device and then you
11:22 - can select device and add it virtually
11:25 - this simply simulates the physical
11:26 - device so if you're testing out
11:28 - development or something or you want to
11:29 - follow along with this tutorial you can
11:31 - do that without having to own the
11:33 - product
11:34 - now in this case i have a physical
11:35 - product so the way i'm going to do this
11:36 - is with the iot device management app
11:39 - now notice it brings up a qr code here
11:42 - so what i actually need to do is go to
11:43 - my mobile device and i need to scan this
11:46 - qr code and then follow along with the
11:48 - steps so now we're going to move on to a
11:50 - recording from my phone so i'm going to
11:52 - start recording on my iphone and follow
11:54 - along with these steps so i've just
11:56 - scanned the qr code and you can see here
11:58 - it's bringing me now to download this
11:59 - app it says iot device management so i'm
12:02 - going to go ahead and press download now
12:04 - when i download this it's going to
12:06 - redirect me to download an app called
12:09 - test flight so i need to download this
12:10 - test flight app first and then i can
12:13 - actually join the beta because this is a
12:15 - beta app which is the iot device
12:17 - management app so i'm going to go and
12:19 - view this in the app store i'm going to
12:21 - go ahead and download that app and then
12:23 - once that app is downloaded i'll be
12:25 - right back so as you can see now i've
12:27 - downloaded the test flight app so what
12:29 - i'm going to do is start testing with
12:30 - the iot device management app so when i
12:33 - do this it brings me to test flight i'm
12:34 - just going to allow it to send me
12:36 - notifications i'm going to press
12:37 - continue and then see it shows the iot
12:40 - device management app so i'm going to go
12:42 - ahead and install that and then once
12:43 - that's installed this will just show up
12:45 - as an icon on your home screen you can
12:48 - press on that and then we'll follow
12:49 - along from there all right so i'm now in
12:51 - the iot device management app notice it
12:53 - says from the developer gives me the
12:55 - fact that this is kind of a beta
12:56 - application so i'm going to go ahead and
12:57 - press next i can share my feedback with
13:00 - the developer okay that's fine and then
13:02 - here we go we have the creator iot
13:04 - platform account so what this is asking
13:06 - me to do is create a cloud project which
13:08 - is what we actually just did authorize
13:10 - the api products we've done that already
13:12 - configure the project we've done that
13:15 - and then finally navigate to the project
13:16 - qr code which we just did so now what we
13:19 - can do is press get started so now what
13:22 - i can do is scan the qr code that's in
13:24 - front of me here when i scan that qr
13:26 - code it associates that with my project
13:28 - so notice it now says coffee and then i
13:30 - want to sign into my account with the
13:32 - username and password so let me sign in
13:34 - and then i'll continue alright so i've
13:35 - just signed in and to clarify here the
13:37 - sign in information that you're going to
13:39 - use is the one that you created when you
13:41 - made your asset so you're kind of
13:43 - signing into that asset right you're not
13:45 - signing in to the account you made in
13:46 - the very first step of the video you're
13:48 - signing in with the credentials you just
13:50 - created when we were in that cloud
13:52 - project setup so i've signed in now i
13:54 - allowed the app to have access to all
13:56 - the things that want to have access to
13:58 - it wanted the wi-fi bluetooth it needs
14:00 - access to those things so make sure you
14:01 - accept that and now what i'm going to do
14:03 - is press into this main asset so when i
14:05 - press into this main asset you're going
14:07 - to see it says no assets found and it
14:09 - will also say that we have no devices
14:11 - now it's asking me if i would like to
14:12 - let it use bluetooth so let's press yes
14:14 - and now what i'm going to do is start
14:16 - connecting my devices so to connect a
14:18 - device you press add device and then
14:20 - what you're going to do is click pair
14:22 - device now you should be able to
14:24 - automatically find the device if you're
14:26 - close enough to it now in this case we
14:28 - are using this kind of wi-fi bridge
14:30 - that's the first thing that we're going
14:31 - to need to connect so make sure that's
14:33 - plugged in and turned on and that you're
14:35 - close to that so once that's on what you
14:38 - should be able to do is go on auto scan
14:40 - here and it should actually be able to
14:42 - find this device for you alright so the
14:44 - bluetooth bridge has officially been
14:46 - connected you can see it says device
14:47 - added successfully so i'm going to go
14:49 - ahead and press done
14:51 - now what i want to do is actually
14:52 - connect a device to this bluetooth
14:54 - bridge so i'm going to go ahead and turn
14:56 - on my fingerbot which remember is
14:58 - wireless and it should start pairing and
15:00 - actually be able to find this bluetooth
15:03 - gateway so give it a second and let's
15:04 - see if we can find this device alright
15:06 - so my fingerbot has connected this did
15:08 - take a few minutes to actually show up
15:11 - the way i got it to connect was i turned
15:13 - my fingerbot on then i went to my
15:15 - bluetooth gateway and i pressed the
15:17 - button on it that put it into pairing
15:19 - mode there was a blue light that started
15:21 - flashing and then my fingerbot connected
15:23 - to it i didn't need to do anything with
15:25 - the app and the finger bot for it to
15:27 - connect it just automatically connects
15:29 - to the bridge and then it showed up here
15:31 - now for some reason your fingerbot is
15:32 - not connecting try turning the fingerbot
15:35 - on and off five times rapidly that is
15:38 - supposed to put it into connection mode
15:40 - although mine just automatically
15:41 - connected now you obviously can look at
15:43 - the fingerbot documentation and the
15:45 - bluetooth bridge documentation to see
15:47 - how to get it to connect but mine
15:48 - connected so we're all good we will
15:50 - continue all right so you can see the
15:52 - fingerbot is here so what i'm going to
15:53 - do is press on the three dots and i'm
15:55 - just going to show you that this is kind
15:57 - of the interface that you get so in this
15:59 - user interface that you see here you can
16:01 - control the fingerbot and mess with a
16:02 - few of the settings for it so just
16:04 - notice i have mine beside me so you
16:06 - should hear it if i turn it on you can
16:08 - hear that the sound actually happens
16:10 - because well the mechanical thing is
16:12 - moving this is working it is connected
16:15 - so now what i want to do is bring us
16:16 - back to the computer because since we've
16:18 - done this our device is now connected to
16:21 - our assets so within the main asset
16:23 - you'll see that we have this bridge and
16:26 - we have this fingerbot so now we'll
16:29 - actually be able to see these from our
16:30 - computer from the iot toya platform so
16:33 - let's go back to the computer and check
16:35 - this out so i've gone back to the
16:36 - platform here you can see i'm in my
16:38 - coffee project and now both the
16:40 - fingerbot and the bluetooth bridge have
16:42 - connected now i did need to refresh the
16:44 - page for this to happen but they are
16:46 - both connected now one thing to note if
16:48 - you do turn the fingerbot off since it
16:50 - is a wireless device you can just turn
16:52 - it off if you want it's no longer going
16:53 - to be connected right it's going to have
16:55 - the status offline but as soon as you
16:57 - turn it back on it will automatically
16:59 - connect you won't have to go through
17:00 - those same steps again so now that we've
17:03 - done that with the app we don't need to
17:05 - deal with the app anymore we've already
17:06 - connected the device we can now continue
17:09 - working strictly from the computer so
17:11 - our fingerbot and our bluetooth bridge
17:13 - are connected we now see them on here
17:15 - and we can actually start writing some
17:16 - python code so the two things that we're
17:18 - going to want here related to these
17:20 - devices is the device id and actually we
17:22 - just want the device id of the fingerbot
17:25 - because there's nothing we really need
17:26 - to control related to the bluetooth
17:28 - bridge that's just the way that we're
17:29 - going to be able to control the
17:30 - fingerprint okay so what we need to do
17:33 - if we want to actually start writing
17:34 - some code here is we need to open up a
17:36 - python file and we need to install the
17:38 - toya sdk for python so let's go ahead
17:41 - and do that alright so i've just opened
17:43 - up a command prompt because i'm on
17:45 - windows if you are on mac or linux
17:46 - you're going to open up terminal and
17:48 - what you're going to do is type in the
17:49 - following command you want pip 3 install
17:53 - toya hyphen iot hyphen pi hyphen sdk for
17:57 - some of you pip 3 won't work if that's
17:59 - the case you want to try pip and if pip
18:01 - doesn't work what you're going to want
18:02 - to try is python and then hyphen m pip
18:06 - install toya iot hyphen pi hyphen sdk if
18:09 - that doesn't work try this so add the
18:12 - pip 3 and finally if that doesn't work
18:14 - you're going to try python 3 hyphen m
18:16 - pip 3 install and lastly remove the 3
18:19 - here on the pip and then try that these
18:21 - are just all the different variations of
18:22 - the command that you can try that
18:24 - hopefully will work for you so in this
18:26 - case we'll go pip 3 install toya iot pi
18:29 - sdk you can see i already have this
18:31 - installed and so the requirement is
18:33 - already satisfied for you however it
18:35 - should have actually installed and now
18:36 - you have the sdk installed so what we
18:38 - can do is start actually working with
18:40 - our devices and with the toya sdk so i'm
18:43 - going to close the terminal or command
18:45 - prompt here i'm going to go into a new
18:47 - python file so i'm going to work in
18:48 - sublime text feel free to work in
18:50 - whatever editor that you want and now
18:52 - we're going to have to do is import the
18:54 - toya sdk and then start actually
18:56 - connecting to our project and then being
18:58 - able to control our iot devices so the
19:01 - first thing we need to do here is import
19:03 - the toya sdk so we're going to say from
19:05 - and then toya underscore iot
19:08 - import and then this is going to be toya
19:11 - open api like that next we're going to
19:14 - say from requests import get you'll see
19:18 - why we need this in a minute and sorry
19:19 - this should be request now this module
19:22 - you may need to install as well for some
19:24 - reason i keep thinking that it's uh it's
19:26 - built in but you may need to install
19:28 - this with pip so you would do the same
19:29 - thing we did before
19:30 - pip
19:31 - install and then requests like that so
19:34 - if that doesn't work for you just make
19:35 - sure you install it with pip in the same
19:37 - way that you installed the sdk
19:39 - previously
19:40 - then we are going to oops
19:42 - import random let me just fix this here
19:46 - and these last two modules so random and
19:48 - requests we're going to use later okay
19:50 - so now that we have that we need to fill
19:53 - in the following information so i'm just
19:55 - going to copy some code in here
19:57 - like this so we need to fill in our
19:59 - access id our access key our endpoint
20:02 - our username and our password now the
20:05 - access id and the access key are going
20:07 - to come from that main page of your
20:08 - project that i showed you previously in
20:10 - the video when we were setting up the
20:11 - project from the toya iot platform then
20:15 - this endpoint is going to be dependent
20:17 - on the region that you're using in this
20:19 - case i'm using the us region and so us
20:21 - works but if you're using a different
20:23 - region you're gonna have to have a
20:24 - different kind of last two characters
20:26 - here and you can go to this link which
20:28 - i'll leave in the description and i'll
20:29 - go to now
20:31 - to show you uh where you can actually
20:33 - find the correct endpoint so let's open
20:36 - up this link here and you can see that
20:38 - the endpoints are right here so this is
20:40 - the china endpoint this is the america
20:42 - endpoint the american azure endpoint
20:44 - europe europe ms india so on and so
20:48 - forth
20:48 - okay so that is where you find the
20:50 - endpoint from notice that we're using
20:52 - the u.s one
20:54 - okay so we need to fill in that endpoint
20:56 - then we need our username and password
20:58 - and the username and password are going
21:00 - to be the same username and password you
21:02 - used when you signed into that app on
21:04 - your phone so the username and password
21:06 - are kind of the second username and
21:08 - password that we put in the one that we
21:10 - used when we were setting up our project
21:12 - not when we were creating our original
21:14 - account
21:14 - lastly we're going to need our fingerbot
21:16 - device id the device id is the id that
21:20 - we saw from the toya platform that i
21:23 - said to pay attention to so let's go
21:24 - here
21:25 - this is the device id that we need so
21:26 - i'm actually going to copy this device
21:28 - id and paste it here
21:30 - now in my case i don't really care if
21:31 - you see my device id but you shouldn't
21:34 - share this device id this should be
21:36 - something private as well as all of
21:38 - these four pieces of information so what
21:40 - i'm going to do is kind of write a
21:41 - modified python script that allows me to
21:44 - hide this piece of information from you
21:46 - but for you guys if you want to keep it
21:47 - simple you can just paste them in here
21:50 - and let me just show you where those
21:51 - pieces of information are so if we go
21:53 - back here
21:54 - and we go to overview
21:57 - you should see that we have our when
22:00 - this loads our client id and then our
22:03 - client secret uh and our access secret
22:05 - so the client id again it's fine if you
22:07 - see that for me but you guys shouldn't
22:09 - make that available to everyone and then
22:11 - the access key is something that i do
22:12 - need to keep hidden okay so i'm going to
22:14 - fill in this piece of information then
22:16 - i'll be right back all right so i've
22:17 - modified this python code now such that
22:19 - i'm storing that secret information in a
22:21 - secret json file reading in that file
22:24 - and then just using the appropriate key
22:26 - value pairs here to be able to actually
22:28 - access this information you don't have
22:29 - to understand the modification that i
22:31 - made just so that i hide this
22:32 - information from you while i am working
22:35 - now what we are going to do is we are
22:37 - actually going to connect to the toya
22:39 - platform so what we're going to do is
22:41 - say open api is equal to and then this
22:44 - is going to be toya
22:45 - with a capital t if i could type
22:47 - properly open api and we're going to
22:50 - pass the endpoint we want to connect to
22:52 - our access id
22:54 - and our access key
22:56 - then what we are going to do is log in
22:58 - to the api so we're going to say open
23:00 - api
23:01 - dot login we're going to log in with our
23:04 - username and our password so once we've
23:07 - done this if we run the program we
23:09 - shouldn't see any errors assuming this
23:11 - information is correct and we have the
23:13 - correct endpoint if you do see an error
23:15 - then you need to double check this
23:16 - information information sorry and make
23:18 - sure it's all correct so let's run this
23:20 - notice it just says finished we didn't
23:22 - get any errors that is good that means
23:24 - we are all good okay so now what we need
23:27 - to do is we need to be able to control
23:29 - our fingerboard so the simplest way to
23:31 - do this is to send a post request to a
23:34 - specific endpoint on the api now i'm
23:37 - going to show you how we can actually
23:38 - find this endpoint and how we can find
23:41 - what information we should send to this
23:43 - endpoint so we're going to go back to
23:45 - our web browser here we're going to go
23:47 - to the toya iot platform and we're going
23:50 - to go to the api explorer
23:53 - now the api explorer allows us to
23:55 - explore all of the different api calls
23:57 - that we can make and all the different
23:59 - commands that we can send to control
24:00 - different devices that we have so
24:02 - actually sorry before we go to this i
24:04 - need to go back and i need to go to my
24:06 - devices and i need to copy the device id
24:10 - of my fingerbot because we're going to
24:12 - need that so let's get the device id of
24:14 - the fingerbot here let's go back to the
24:17 - explorer and what we're going to do is
24:19 - go here on the left side and we're going
24:22 - to find the industrial general device
24:26 - and then this should be control okay so
24:28 - you're going to look for industrial
24:30 - general device control
24:32 - then you're going to look for get the
24:34 - instruction set of the device
24:36 - and what you're going to do is paste in
24:38 - here the device id now what this is
24:40 - going to do is send a request to an
24:42 - endpoint that will give you all of the
24:44 - information about the device that you
24:46 - need so let's submit the request
24:49 - and notice it shows you the request that
24:51 - was sent then it gives you the result so
24:54 - it says the category of this device is
24:56 - the following these are the different
24:58 - commands that you can send to this
25:00 - device so we have a timer command
25:03 - we have a mode command we have an arm
25:06 - down percent a click sustain time and
25:08 - arm up percent and then we have the
25:10 - switch now the switch is the one that we
25:12 - are going to focus on but if you look
25:14 - here it shows you how to use all of
25:16 - these different commands so it says the
25:17 - code for the command is this the name is
25:20 - this the type is this and this is the
25:22 - values that were expected
25:24 - in this case the only two acceptable
25:25 - values are click and switch we have arm
25:29 - down percent this accepts an integer the
25:31 - minimum is 51 the maximum is 100 percent
25:34 - you know you can go through and read how
25:35 - all of these work so now that we've done
25:38 - this and we know the commands that we
25:39 - can send what we can do is actually send
25:42 - one of these commands and test it and
25:44 - see if it works before we start writing
25:46 - the code so we can go to send commands
25:48 - here we can paste in our device id we
25:51 - can paste in the code which was switch
25:53 - and the value which in this case will be
25:55 - true or false so what i'm going to do is
25:58 - submit this request and then as you can
26:00 - likely hear the fingerbot is actually
26:02 - going on and off because well we told it
26:04 - to switch and when you type switch
26:06 - really what that means is go down and
26:08 - come back up it changes depending on the
26:10 - mode that the fingerbot is in but that's
26:12 - the basics when you send this you should
26:14 - see that the fingerbot reacts to this
26:16 - command and then you get a result that
26:18 - says true and success now notice if i
26:20 - try to send say like 34 here as the
26:23 - value and i submit this request we get a
26:26 - error code it says the type is incorrect
26:28 - and it tells me that this was false this
26:31 - was not successful so you will get valid
26:33 - error messages if the commands you're
26:35 - sending are not correct
26:37 - all right so what i'm going to do now is
26:39 - i am going to go back to my code here so
26:42 - i'm now going to show you how we can do
26:44 - this from code rather than doing it from
26:46 - the api explorer so what we need to do
26:49 - here is we need to write the following
26:51 - open
26:52 - api dot post because we're going to send
26:55 - a post request and then i need to find
26:57 - the url that i want to actually send
27:00 - this post request to so the way i do
27:02 - that is i can go to the api explorer
27:04 - and i can look at
27:06 - this sample post request here so notice
27:08 - it says
27:09 - https openapi.tulya
27:12 - us.com and then this is the part that
27:15 - i'm looking for v1
27:17 - iot hyphen 3 devices this is the url of
27:20 - my device and then i have slash commands
27:24 - so what i want to do is copy this
27:25 - extension of the url so kind of the path
27:28 - right off of the base url i don't want
27:30 - the base url and i want to paste that in
27:32 - a string
27:34 - right here now what i also need to do is
27:36 - just make sure i have this leading slash
27:39 - here and i'm actually going to replace
27:41 - this so the hard-coded device id
27:44 - with the variable that i have which is
27:47 - fingerbot device id and then i'm going
27:49 - to turn this into an f string such that
27:51 - this automatically gets embedded in
27:53 - string if you're not familiar with f
27:55 - strings these are available in python
27:56 - version 3.6 and above and they allow you
27:59 - to embed a variable inside of a string
28:01 - inside of curly braces so now what i can
28:04 - do is send a post request to this url
28:07 - right here and then what i need to send
28:09 - is some commands and the commands that
28:11 - i'm going to send are going to be in the
28:13 - format that was specified from the api
28:16 - explorer so what i can do is i'm going
28:19 - to make a variable here called commands
28:21 - and this is going to be equal to a
28:23 - dictionary this is kind of going to
28:25 - represent json and this is going to be
28:27 - commands colon and then a list of the
28:30 - commands that i want to send now the
28:32 - command that i want to send is the
28:34 - following i want to send the code which
28:37 - is going to be
28:39 - uh switch and then i want to send the
28:43 - value
28:44 - which is going to be true
28:47 - all right so these are the commands that
28:49 - i want to send this is the format in
28:51 - which you send the commands you can find
28:53 - that from the documentation which i'll
28:54 - link in the description and then what
28:56 - you do is you simply put this right here
28:59 - command so just make sure it follows
29:00 - this format commands you then have a
29:02 - list and inside of here you have a
29:05 - dictionary with the commands that you
29:06 - want to send
29:07 - all right so what i'm going to do now is
29:09 - i am going to save and i'm going to run
29:11 - this code and see if i get any errors or
29:14 - if this is working all right so after
29:16 - running this code nothing was happening
29:18 - and i was curious why nothing was
29:19 - happening especially why we weren't
29:21 - getting any error messages and the
29:23 - reason for that is first of all we're
29:24 - not printing out the result of this
29:26 - command or sorry of this request and
29:29 - also we have the wrong type here for our
29:31 - command i put in the string true i need
29:33 - to actually put in the boolean value
29:36 - true like that
29:38 - anyways what i'm going to do is show you
29:39 - how we can actually see what the result
29:41 - of this is so what we can do is just say
29:43 - result
29:44 - is equal to that and then we can simply
29:47 - print out the results like this we
29:49 - actually see what the result of this
29:51 - request is so let's go ahead and try
29:53 - this now and see if it works this time
29:56 - okay so it says result true success true
29:58 - and that means the fingerbot should
30:00 - indeed go off so let's run this one more
30:02 - time and let's see
30:07 - so there you go the fingerbot has gone
30:09 - off it is indeed working and if you want
30:12 - to look at the other ways to control the
30:13 - fingerbot then what you can do is go
30:15 - back to that api explorer and look at
30:17 - the different commands however now what
30:20 - i'm going to show you how to do is
30:21 - connect the light strip and then i'm
30:23 - going to show you how we can control the
30:25 - light strip based on the weather so this
30:27 - is simply controlling the fingerbot now
30:29 - we'll do something that allows us to
30:30 - control a light strip that one's a
30:32 - little bit more fun and i almost forgot
30:34 - in terms of actually making this work in
30:36 - terms of brewing coffee or you know
30:38 - having some user input before it
30:39 - triggers the fingerbot what you could do
30:41 - is something like this x equals input
30:44 - you know press
30:46 - enter to brew and then you could run
30:48 - this program you would press enter and
30:50 - then after you press enter would
30:51 - actually run this command and then
30:53 - assuming you have this hooked up to the
30:54 - coffee machine they do come with little
30:56 - adhesive pads that you can use to stick
30:58 - it to something that's what i've done to
30:59 - stick it to my coffee machine then you
31:02 - would press enter and it would well
31:03 - start brewing the coffee and i'll
31:05 - actually show you a video of that
31:06 - happening right now alright so now as
31:09 - promised i'm going to show you how to
31:10 - control a light strip so i've mounted a
31:12 - light strip around the trim of the
31:14 - entrance to my closet i'll show kind of
31:17 - some brief photos or videos of what that
31:19 - looks like right now
31:20 - but regardless you're going to connect
31:22 - the light strip in the same way that you
31:24 - connected the fingerbot so you're going
31:25 - to plug it in make sure it's on and then
31:28 - you're going to go to the same app that
31:29 - we were in before you're going to go to
31:32 - auto scan it's going to find the light
31:34 - strip for you you're going to connect
31:36 - the light strip and then it will be
31:37 - added to your toya platform account so
31:40 - i'm going to go and connect my light
31:42 - strip and then i will show you how we
31:43 - can control it alright so you can see
31:45 - that my rgb strip is now connected it's
31:48 - associated with the main asset and this
31:51 - is its device id so in a similar fashion
31:53 - to what we did before i'm going to look
31:55 - at the different commands that i can
31:56 - send to this light strip so let's go to
31:59 - the get instruction set
32:02 - let's pass the id of this light strip
32:05 - and let's submit this request
32:07 - all right so notice
32:09 - these are all the different commands
32:10 - that we have we have switch led
32:13 - we have temp value we have colored data
32:16 - and the one that i want to look at is
32:17 - colored data now the reason i want to
32:19 - look at this one is because i want to be
32:21 - able to change the color of my light
32:23 - strip based on the temperature outside
32:26 - so what i'm going to do is have it so
32:27 - this script is actually going to figure
32:29 - out where i'm located determine the
32:32 - temperature there and then change the
32:33 - color of my light strip based on the
32:36 - temperature outside so you can customize
32:38 - this in any way that you want i'll just
32:40 - show you basically kind of how this
32:41 - works but notice that you actually
32:43 - update the temperature or the color of
32:46 - this led strip using hsv not rgb so hsv
32:51 - is i think it's hue saturation and
32:54 - something else although i could be
32:55 - completely wrong on what that stands for
32:56 - my editors will will pop up what hsv
32:59 - means on the screen in case i'm wrong
33:00 - there regardless we are going to use the
33:03 - color data code and we're going to send
33:04 - a json object that has hsv as the three
33:09 - attributes or kind of arguments in it so
33:12 - what i'm going to do now is i am going
33:14 - to go here i'm going to grab the device
33:17 - id
33:18 - and i'm going to go back to sublime text
33:21 - and i'm just going to remove some of
33:22 - this code here so i'm going to comment
33:23 - this out because i no longer need this
33:25 - and i'm going to change
33:27 - or make a new variable actually we'll
33:28 - call this light
33:30 - strip underscore device underscore id
33:35 - and i'll make this equal to the device
33:37 - id of my light strip now i'm going to
33:39 - show you how we can control the light
33:41 - strip which is very similar to this in
33:43 - fact what i can actually do is copy this
33:46 - code i probably should have just left it
33:47 - here
33:48 - so i'll copy this
33:50 - comment it out and now the code that i
33:53 - want to send is not going to be switch
33:55 - it's going to be cover in the canadian
33:58 - way
33:58 - underscore i think it was data let's go
34:01 - back and check that
34:03 - let's see here it is it is color data
34:06 - okay great and then for the value i want
34:09 - to send a json object that has h colon
34:12 - something
34:13 - comma s colon
34:16 - something comma v colon something and
34:19 - we'll fill in those values in a minute
34:21 - okay and then rather than the fingerbot
34:23 - device id i'm going to send the light
34:26 - strip device id okay so now i need to
34:28 - pick some colors that i want to send so
34:30 - let's just send h of like 200 s of let's
34:34 - just go with
34:36 - 100
34:37 - and v will go with 100. i'm not sure
34:40 - what color that's going to be
34:41 - but we can just send this and test and
34:43 - see if it works all right so now just
34:46 - like we were able to control the
34:47 - fingerbot this should control the light
34:49 - strip for us obviously you're just gonna
34:51 - have to take my word for it that the
34:52 - light strip is working i don't have a
34:53 - camera like pointed at that right now
34:55 - that's recording so just trust me but
34:58 - let's run this and let's see what we get
35:00 - now okay so it says result true success
35:03 - true and the light strip has actually
35:06 - changed colors now one thing i'll
35:07 - quickly show you here is how we can turn
35:09 - the light strip on and off because if
35:11 - the light strip is off and you change
35:12 - the color well it's not really going to
35:14 - do anything right so let's do this so
35:16 - let's go here and let's change from
35:19 - color data to i think it's switch
35:22 - underscore led i believe that's the
35:24 - value and then for value here i'm going
35:27 - to pass true
35:29 - okay uh and we need a list
35:32 - i guess i deleted all that okay so let's
35:34 - fix that and now we will just send this
35:37 - command again and then we will change
35:39 - the color all right so let's run this
35:41 - and hopefully this time the light strip
35:43 - will turn on and then it will change
35:45 - color and yes it did perfect okay so
35:48 - everything is working with that now what
35:51 - we want to do is make it so that we
35:53 - change the color based on the weather
35:55 - and when we need to figure out the
35:56 - weather so in order to actually
35:57 - determine the weather what we first need
35:59 - to know is the longitude and latitude of
36:02 - our current location now unfortunately
36:04 - there's no way for us to just grab that
36:06 - information easily what we actually need
36:08 - to do in the following order is we need
36:11 - to get our public ip address send our
36:14 - public ip address to toya it will then
36:17 - return to us the longitude and latitude
36:19 - of that public ip address then we will
36:21 - use the longitudinal attitude to get the
36:23 - weather of our current area so that is
36:26 - what we need to do i'm going to show you
36:27 - how we can do that so the first thing we
36:29 - need to do is get our public ip now this
36:32 - is why we imported the request module
36:34 - because we're going to send a request to
36:35 - a website they can just tell us what
36:36 - this public ip is it's very simple to do
36:39 - this so we're going to say
36:40 - public underscore ip is equal to and
36:44 - this is going to be get and we are going
36:46 - to retrieve from the following website
36:48 - https colon slash
36:50 - api dot and this is ipfy
36:55 - and then we're going to say dot txt now
36:57 - this will return to you your public ip
36:58 - address do not share this with anyone i
37:01 - am not going to share my public ip
37:02 - address with you because well i don't
37:04 - want you to know where i live because
37:05 - obviously you can access the longitude
37:07 - and latitude from that
37:09 - next what we are going to do is we are
37:10 - going to set up a function
37:12 - i'm just going to call this get weather
37:15 - and this function will return to us what
37:16 - the weather is so i'm just going to
37:18 - clear these commands i'm actually going
37:21 - to clear this one here and just move
37:23 - this one down a bit so we have some
37:25 - space and inside of here i'm going to
37:26 - start writing what we need to actually
37:28 - get our location so let's go to the
37:32 - website here and let's go to our api
37:35 - explorer and i'm going to show you how
37:37 - we can find the url that we need to send
37:39 - the request to to get our location so
37:41 - notice we have this lbs here this is
37:43 - location based services so location
37:46 - based services if we press on this here
37:48 - it should give us the different things
37:49 - that we can use to get our location so
37:52 - in this case we want to get our location
37:53 - based on our ip so we'll go get ip
37:56 - location and then let's just send a
37:58 - random public ip so let's say random
38:02 - public ip okay random ipgenerator so
38:06 - let's just generate the ip okay let's
38:09 - grab this and let's just put this in
38:11 - here and let's see what this request
38:13 - structure looks like
38:15 - okay so there you go it gives us a
38:16 - result it gives us the continent code
38:18 - the country the latitude and the
38:20 - longitude so this is what the request
38:23 - will look like or sorry the result will
38:24 - look like and this is the endpoint that
38:26 - we want to send this request to and this
38:28 - is the format that we want to send it so
38:30 - i'm going to copy all of this right here
38:33 - and i'm going to paste this as my
38:34 - location underscore url so location
38:37 - underscore url is going to be equal to
38:40 - this
38:41 - now what i'm going to do is make this an
38:43 - f string and for where it says ip equals
38:46 - i'm going to replace this with my
38:49 - public underscore ip
38:51 - so now what we should actually be able
38:53 - to do is send a request to this url and
38:56 - get our longitude and latitude based on
38:58 - whatever our public ip is so what i can
39:01 - do now is i can grab our location so i
39:04 - can say that the location is equal to
39:08 - open api and this is going to be dot get
39:10 - this time not get not dot post because
39:13 - we're just sending a get request and
39:15 - we're going to send this to the location
39:16 - url and we're going to grab from this
39:19 - the result
39:20 - now since i don't want to print this out
39:22 - because i don't want you to see what my
39:23 - location is i'm just going to show you
39:25 - from here notice the first key in the
39:28 - result here is called result that's what
39:30 - we want and then inside of result we
39:32 - want the latitude and the longitude so
39:35 - what i'm going to do is i'm going to say
39:37 - that my lat and lawn is equal to
39:40 - location at and then this is latitude
39:44 - i think i spelt that correctly and then
39:46 - location at and then
39:48 - elongated like that
39:51 - now it's very possible that i spelt this
39:52 - wrong longitude i think it's just that
39:56 - actually uh let's check my spelling
39:58 - because i'm not very confident here okay
40:01 - latitude let's copy that and longitude
40:04 - okay looks like i spelt them correctly
40:05 - okay so let's paste that okay all good
40:08 - all right so now i have my latitude and
40:10 - longitude so now that i have the
40:11 - latitude and longitude what i want to do
40:13 - is get the weather so now i need to show
40:16 - you how we get the weather so let's go
40:17 - back to the api explorer this time we're
40:20 - going to go to our weather service not
40:22 - the lbs and we're going to get the
40:25 - current weather notice we can also get
40:26 - the seven day or seven get seventh
40:29 - weather forecast i guess that's supposed
40:30 - to be seven day weather forecast
40:32 - all right so here we can pass a latitude
40:34 - and longitude and it gives us the
40:36 - weather so let's just generate a random
40:39 - latitude and longitude uh okay
40:43 - i guess i can just put them in i can go
40:45 - like you know
40:46 - 80.00
40:47 - and
40:48 - 80.00 okay so let's just submit that
40:52 - and let's see what we get all right so
40:54 - this is what we get we get a result that
40:56 - has air quality coordinate and then the
40:59 - current weather now we're looking for
41:00 - current weather and we want to know the
41:03 - temperature so what we're going to look
41:05 - for is result current weather and then
41:07 - temperature those are the keys that we
41:08 - need to access from the result
41:11 - and let's look at the api call here so
41:14 - notice this is the 2.0 api that we're
41:16 - calling not the 1.0 so that's important
41:18 - so i'm going to copy this just like we
41:20 - did for the previous one and now i'm
41:22 - going to say the weather underscore url
41:25 - is equal to an f string and we're going
41:27 - to replace the latitude and longitude
41:29 - numbers
41:30 - with lat
41:32 - and long from the step
41:34 - previously
41:35 - okay now that we have that we're going
41:37 - to again send a get request to this url
41:40 - so we're going to say that the weather
41:42 - is equal to open api dot get
41:45 - this is going to be our weather url and
41:47 - then we want to get the result
41:50 - we want to get the what was it i guess
41:53 - it's
41:54 - current underscore weather
41:57 - and then we want the temp
42:01 - so let's see if that looks correct here
42:03 - if i go here yeah we have current
42:05 - weather and we have tap
42:07 - nice okay so now this should give us the
42:09 - weather so what i can do is actually
42:12 - return
42:13 - the weather and i can now
42:16 - comment all of this out and start our
42:18 - program by just calling this weather
42:20 - function and just printing what its
42:22 - result is so i'm going to print
42:24 - get underscore weather and just see if
42:27 - this is accurate and if this is working
42:30 - all right so let's go ahead and run this
42:32 - and let's see what we get
42:34 - so we get 25.6 that is the correct
42:36 - temperature where i am right now maybe
42:38 - that gives you guys some type of hint
42:39 - where i live but hopefully not too much
42:41 - and anyways that is the weather so what
42:43 - i'm going to do now is just store this
42:45 - in a variable so weather equals get
42:48 - weather if this isn't working for you
42:50 - what you can try doing is actually
42:51 - printing out the location variable right
42:53 - here so printing out the result and
42:55 - seeing what it looks like the reason i'm
42:57 - not printing it again is because i don't
42:58 - want you guys to know where i live
43:00 - because it shows the longitude and the
43:02 - latitude or what the public ip address
43:04 - is
43:05 - nice so now that we have the current
43:07 - weather we can actually adjust the
43:09 - temperature or the color of the light
43:11 - strip based on what this weather is so
43:14 - what i'm going to do is copy in some
43:16 - temperatures copy it some temperatures
43:17 - copy in some colors sorry
43:19 - in hsv format now i just went to an hsv
43:22 - color picker and came up with these
43:24 - different variables right here these
43:25 - different colors you can go do that
43:27 - yourself or you can just copy the source
43:29 - code which i will link in the
43:30 - description of this video
43:32 - anyways these are some different colors
43:34 - that we can use
43:35 - so what i'm going to do is set up kind
43:37 - of an if else statement structure that
43:39 - allows me to select a color based on the
43:42 - current temperature so i want it to be
43:44 - darker if it is colder and i want it to
43:47 - be more light and kind of like more red
43:49 - if it's warmer right so dark blue will
43:51 - be if it's really really cold and then
43:53 - red will be if it's really really warm
43:55 - so i'm going to say color is equal to
43:57 - none and i'm going to say if
44:00 - the weather is less than negative 20
44:03 - then i want the color to be equal to
44:05 - dark blue alif
44:07 - the weather is less than negative 10
44:09 - then i want the color to be equal to
44:11 - light blue and then i'll say l if the
44:14 - color sorry not the color
44:17 - the weather is less than zero then i
44:19 - want the color to be equal to white
44:22 - l if the color i keep saying color lft
44:25 - weather is less than let's go with 10
44:29 - then i want
44:30 - the color to be orange
44:33 - l if
44:34 - the weather is less than let's go with
44:38 - 20 then i want the color to be equal to
44:41 - red okay so i think i used all my colors
44:43 - there dark blue light blue white orange
44:45 - yellow red did i miss yellow i did miss
44:47 - yellow okay so let's do yellow as the
44:49 - last one l if weather
44:51 - is less than 30 then color equals yellow
44:56 - all right so really all this is going to
44:57 - do is just set the temperature equal to
44:59 - you know the appropriate colors based on
45:00 - what it is so if it's less than negative
45:02 - 20 dark blue if it's not less than
45:04 - negative 20 but it's less than negative
45:05 - 10 light blue so on and so forth you
45:08 - guys get the idea
45:10 - all right now what i'm going to do is
45:11 - i'm going to send a command specifically
45:14 - this command right here to adjust the
45:16 - light strip based on
45:19 - whatever this color is so rather than
45:21 - now having the value be equal to this it
45:24 - will be equal to this color variable
45:27 - and then it should just send this
45:28 - request and we'll adjust the temperature
45:30 - or color of the light show all right so
45:33 - now that we have this let's test this
45:35 - code and see if it's working so let's
45:38 - run it
45:39 - and okay so it says this is not
45:42 - supported okay the reason we're getting
45:44 - this error is because we did not convert
45:45 - our weather variable to a float right
45:48 - now it is a string and so what i need to
45:49 - do is convert
45:51 - the return value here to a float so the
45:53 - float of getweather so now if i run this
45:56 - it should work so let's go ahead and run
45:58 - this and when i run this it does indeed
46:01 - turn the light strip on and change its
46:04 - cover now i know you guys can't see it
46:05 - so you just have to trust me and believe
46:07 - me but if you're running this for
46:09 - yourself and you do have a light strip
46:10 - you'll see that this does indeed work
46:13 - right so i think with that that is going
46:15 - to end this tutorial and this video
46:18 - hopefully this gave you a general idea
46:20 - of how to work with the internet of
46:21 - things and specifically the toya iot
46:24 - platform thank you again to toya for
46:26 - sponsoring this video they really are a
46:28 - great company they're super flexible
46:30 - when they were working with me send me a
46:32 - bunch of different cool products to test
46:34 - out and really allow me to kind of
46:35 - experiment with the internet of things
46:37 - this is such a cool thing the fact that
46:39 - you can just write these really simple
46:41 - python scripts or scripts in really any
46:43 - language and control physical hardware
46:45 - devices it's also really seamless and
46:47 - easy to connect them to your home
46:49 - network as you saw in this video and
46:52 - really everything we did here although
46:53 - it might have taken a fair amount of
46:54 - time because i was walking through and
46:56 - explaining it is super simple and
46:58 - probably just the easiest way you really
47:00 - can go about
47:01 - actually interfacing with hardware
47:03 - devices so i hope you guys enjoyed if
47:05 - you did make sure you leave a like make
47:06 - sure to check out toya from the link in
47:08 - the description i will see you again in
47:10 - another youtube video
47:13 - [Music]