00:02 - [Music]
00:06 - hello everybody and welcome back to the
00:08 - golang tutorial so in this video what
00:10 - we're gonna do is talk about slices now
00:12 - slices are kind of like an addition to
00:14 - arrays they implement some functionality
00:17 - and fix some problems that we would have
00:19 - with standard arrays and the most common
00:21 - example of a problem that they solved
00:22 - for us is that with standard arrays we
00:24 - need to determine the size of that array
00:26 - and pick the size of it right when we
00:28 - create it now this is a problem because
00:30 - sometimes we don't know how many
00:31 - elements are gonna be in the array maybe
00:33 - we'll be adding things in the future
00:34 - removing things later on so it's really
00:37 - difficult to pick how big the array
00:38 - should be so in this case what slices
00:41 - let us do is take portions of an array
00:43 - which we'll see in a second and also
00:45 - define the fact that hey we don't know
00:47 - how big this slice is gonna be until we
00:50 - get it or something like that and it
00:52 - will actually allow us to change the
00:54 - size of the slices as we add new
00:56 - elements in remove new elements all of
00:57 - that we'll see that as we go through but
00:59 - I just wanted to give you an overview of
01:01 - what slice is really do for us so I'm
01:03 - gonna go to the white board here and I
01:05 - want to start explaining slices by
01:07 - really illustrating to you how arrays
01:09 - work in golang now this is important
01:12 - because if you don't understand how
01:14 - arrays are represented then slices are
01:16 - gonna be even more difficult to
01:17 - understand so I'm just gonna go through
01:19 - that here okay so let me say that I draw
01:21 - an array here we'll just say that this
01:23 - has four elements inside so its length
01:26 - for the first index here we know zero so
01:29 - zero one two three let's say this has a
01:32 - bunch of numbers in it so like 0 3 6 9
01:35 - will discount it by 3 and this is our
01:38 - array now the way that arrays are
01:41 - actually represented in golang is by
01:43 - three things we have what's known as a
01:45 - pointer which is simply the location of
01:48 - the first element in the array and then
01:51 - we have what's known as a length which
01:54 - is simply the size of the array and we
01:55 - have a capacity which is always the same
01:58 - as the length so the pointer points to
02:02 - the first element in the array the
02:04 - length and the capacity are just some
02:07 - digit that tell us how many elements are
02:09 - in the array so in this case it tells us
02:11 - for now the reason the
02:12 - the only things we need is because if we
02:15 - know the location of the first element
02:17 - in the array to get the other elements
02:19 - in the array all we have to do is kind
02:21 - of move to the right and move to the
02:23 - right and move to the right all the way
02:24 - up until we hit the length of the array
02:26 - and we can access all of those elements
02:28 - so if we access index to all we need to
02:31 - do is add the value two to whatever the
02:33 - location of the first element is and we
02:35 - can easily grab that element so I hope
02:37 - that makes sense but just understand we
02:39 - have a pointer a length and the capacity
02:41 - and the length and the capacity are
02:43 - always the same
02:43 - whereas the length is telling us how
02:45 - many elements and the capacity is
02:46 - telling us the maximum amount of
02:48 - elements we could have so that is how
02:51 - rays are represented and kind of work in
02:53 - golang very important to remember length
02:56 - and capacity always the same for arrays
02:58 - okay so now we're gonna move on to
03:00 - slices so actually I should probably
03:02 - should left that array there but let me
03:04 - draw this array again I'm gonna talk to
03:07 - you about what slices are so a slice is
03:10 - really a portion of an array so in this
03:13 - case we could say that this box that
03:15 - I've just drawn here is a slice of this
03:17 - underlying array now slices are their
03:20 - own data type and go lengths they're
03:21 - different than arrays but they kind of
03:23 - work on top of arrays as we're seeing
03:25 - here so how we represent a slice is the
03:28 - exact same way that we represent an
03:30 - array except there's one thing that's
03:32 - different so we have a pointer which
03:34 - tells us the location of the first
03:36 - element in the slice and this location
03:39 - is actually gonna be the location of
03:42 - whatever element is in that underlying
03:44 - array now I know this seems weird but
03:47 - like if the slice started here then the
03:50 - pointer would be the same as what
03:52 - represented that underlying array
03:54 - hopefully that makes sense but anyways a
03:56 - pointer to the location of the first
03:58 - element in the slice and then we have
03:59 - what's known as a length and a capacity
04:04 - okay so it's hard to write too small
04:07 - with this pen but you hopefully you guys
04:08 - can read that all right so the length
04:10 - and the capacity for a slice are
04:12 - actually different the length is the
04:14 - same thing that we saw in arrays it's
04:15 - the number of elements in the slice so
04:17 - in this case the length would be two
04:19 - because we have two elements the six and
04:21 - the three but the capacity is actually
04:24 - how many elements we could have
04:26 - in this case it would be three because
04:28 - if we start with the slice at this
04:30 - position six and we actually could have
04:33 - a length of three if we decide to extend
04:35 - the slice out by one more element so
04:38 - that is kind of what we mean by capacity
04:40 - it's how many elements are left at the
04:42 - end from the very beginning that we
04:44 - could have in the array right so if I
04:46 - put this now to twelve then the capacity
04:48 - would change to four so that is what we
04:51 - mean by capacity how many kind of extra
04:53 - elements were I guess how many elements
04:55 - after that first pointer so in this case
04:58 - there's four but if we remove twelve
05:00 - then obviously we go back down to three
05:02 - so I'm hoping that makes sense but that
05:04 - is the difference between a slice and an
05:06 - array and I'm gonna show you how we make
05:08 - slices now and and how those work but
05:10 - just understand that they are portions
05:12 - of an array and the length and the
05:14 - capacity is an important thing to
05:15 - understand because if we take a slice
05:18 - something like this what we can actually
05:20 - do is what's known as Reese lice it and
05:22 - extend the slice to have up to the
05:26 - length of the capacity elements inside
05:28 - of it so if we start with length two but
05:30 - the capacity is four I can Reese lice
05:32 - this slice so I'd actually take a slice
05:34 - of this slice to extend it by a few
05:37 - elements um so hopefully that's making
05:39 - sense but let me put away the whiteboard
05:40 - and then we'll get into coding
05:41 - okay so let's actually get to coding now
05:43 - so you see up creating an array this is
05:45 - an array of length five also has
05:47 - capacity five and contains these
05:49 - elements now I'm gonna show you how we
05:51 - can take slices of this array and show
05:54 - you what the slice operator is and how
05:56 - about works in this program so keep in
05:58 - mind that slices and arrays are
06:00 - different they are a different data type
06:01 - that's an important thing to
06:02 - understanding golang but I'll show you
06:04 - how we can actually make a slice of this
06:07 - array so how we can grab some elements
06:09 - of it so I'm gonna save RS as standing
06:11 - for slice and then what I'm gonna do is
06:13 - put brackets I'm gonna put int and
06:16 - notice how I didn't put how many values
06:18 - I was gonna take inside of these
06:19 - brackets when you don't do that what
06:21 - that says is this is a slice so if I
06:24 - don't put the amount elements that are
06:26 - gonna be inside of my array then what
06:28 - that means is that this item or this
06:30 - object will be a slice okay so we said
06:32 - VAR s which is a slice is equal to and
06:35 - now I'm going to take a slice of X so
06:38 - I'll put X here I'll put
06:39 - brackets where I would usually index
06:41 - some values here but instead I'm gonna
06:43 - use the slice operator now the slice
06:46 - operator actually don't know if this is
06:47 - the formal name but this is what they
06:48 - call it in Python at least here is
06:50 - simply 1 : so if you put a colon inside
06:53 - of the brackets you are denoting that
06:55 - you are taking a slice of this object
06:58 - whatever is on the left hand side in
06:59 - this case X now the basic way that this
07:02 - works is you can put numbers on the left
07:03 - and right hand side of these of this
07:05 - colon and that tells you what index is
07:08 - to grab from the underlying array so in
07:11 - this case if we leave it empty
07:12 - we don't put any values on the left or
07:14 - right hand side this means just copy the
07:17 - array so it means start at the beginning
07:18 - and go to the end include the end that's
07:21 - what it means when we don't leave
07:22 - anything on the left and right hand side
07:24 - in fact if we don't leave anything on
07:26 - the left that that means we don't put
07:29 - any number sorry not don't leave
07:30 - anything I don't know is saying there we
07:32 - don't have a value on the left hand side
07:33 - of this cool and what that means is
07:35 - start at the beginning if we don't have
07:37 - a value on the right hand side of this
07:39 - colon that means go to the very end so
07:41 - if I put one colon here what this is
07:44 - saying is start at one go to the very
07:46 - end if I put 1 3 here this is saying
07:49 - start at 1 go to 3 but do not include 3
07:52 - so that means that what I would actually
07:54 - grab here is the value 2 3 because I
07:57 - would go to index 3 which is the value 4
07:59 - but I wouldn't include it in fact let me
08:01 - just print this out to you and we'll do
08:03 - some examples and I'll show you really
08:04 - how this works so if I print the value
08:06 - of s I'll go run tutorial dot go we get
08:10 - to 3 again because we start at 1 we went
08:13 - to 3 and we didn't include 3 now let's
08:15 - have a look at the length and the
08:17 - capacity of this slice and try to take a
08:19 - guess at what the capacity is because
08:22 - that's something that we were just going
08:23 - over so go around tutorial let go we get
08:26 - the length of this is 2 so to get the
08:28 - length of a slice or an array for that
08:30 - matter you can use the Len method or Len
08:33 - function Sri simply put the object
08:35 - inside of lens so inside of the brackets
08:36 - it will tell you how long it is ok so
08:39 - now we're gonna look at capacity
08:40 - now capacity we can get by using cap so
08:43 - the capacity of s should be what well
08:46 - let's have a look at what it actually is
08:48 - and we see that we get 4 so notice of
08:52 - the capacity
08:53 - isn't different than the length and
08:54 - that's because if we look at where we
08:57 - started at one so that would be right
08:59 - here value two there is four elements
09:01 - that we could possibly have in our slice
09:03 - so you're like well what's the point of
09:05 - having the capacity why do we need that
09:07 - well that's because we can actually
09:09 - resize our slice now this is gonna seem
09:12 - weird but what I can do is put s :
09:15 - so inside of here : and then put
09:18 - capacity of s like that and what this
09:21 - will do is extend our slice so that it
09:24 - is the full length of this array so it
09:26 - starts out whatever this element is and
09:28 - then it just extends and gets all the
09:30 - other elements that were in there so in
09:32 - the capacity in the underlying array so
09:34 - doing this extends the array and adds on
09:37 - those other elements so let's look at
09:39 - this let's go go run tutorial let go and
09:42 - we get 2 3 4 5 so we've successfully
09:45 - reese lysed our slice and extended it so
09:48 - of course we can take slices of slices
09:51 - right if I print out slice starting at 2
09:53 - : let's actually see what we get so
09:55 - index 2 I think we'll actually crash let
09:58 - me just start at index 1 and let's see
10:00 - what this does for us so if we do index
10:03 - 1 we see we just get the value 3
10:05 - so we successfully sliced our slice that
10:07 - made a new slice that still has the
10:10 - pointer to the underlying array of X
10:12 - here but it's just at a different
10:14 - position right and that's the basics of
10:16 - how slices work and how you can take
10:18 - these slices now I'll show you how we
10:20 - can make our slices from the get-go so
10:22 - rather than having to have an array like
10:24 - this maybe we want to make a slice maybe
10:26 - we want to add stuff to a slice there's
10:27 - a lot more things that we need to go
10:28 - over still so let's actually make a
10:30 - slice so we can do this a few different
10:32 - ways I'll show you the exact like I
10:34 - guess explicit way first and then the
10:36 - implicit way after so let's say VAR a
10:38 - let's put brackets int and notice that
10:41 - you can do a slice of strings you can do
10:43 - a slices of like a slice of slice if you
10:45 - wanted to whatever you want you can do a
10:47 - slice of pretty well anything but let's
10:50 - do a slice of int and that's equal to
10:52 - slice of int literal which means now I
10:55 - can just type the values that I want
10:57 - inside of here now it doesn't matter how
10:59 - many values I have because again the
11:01 - slice when we do it like this it doesn't
11:03 - have a predefined amount of things that
11:05 - are inside of it
11:06 - so this has successfully created a slice
11:08 - of intz and these are the values that
11:10 - will be in the slice now the way this
11:12 - actually works is it will create an
11:15 - array first that is of size whatever the
11:18 - amount of elements are that we put in
11:20 - here then it will just simply have a
11:22 - slice that slices the entire array so
11:25 - it's kind of like cheating a little bit
11:26 - when you do this you're making a slice
11:28 - to start but really what's happening
11:30 - first is you're making an integer array
11:32 - in this instance that will have this
11:34 - many elements inside of it so that will
11:35 - be the capacity and the length of it and
11:37 - then your slice is just that entire
11:40 - thing so that's how that works so I can
11:42 - actually prove that to you by go fmt dot
11:44 - println and i'll print to you the
11:47 - capacity of a and you'll notice that it
11:49 - will be the same size as the amount of
11:52 - elements we put here so if we go ahead
11:53 - and we look at this go around tutorial
11:56 - go we get a capacity of five so if I
11:59 - take a right and I slice it so we slice
12:02 - it up to three so we start the beginning
12:04 - and we slice the three and we look at
12:06 - the capacity of a so let's do that so
12:09 - the capacity of that new slice we get
12:12 - the capacity is still five right because
12:14 - it's pointing to that underlying array
12:16 - that it created when it started okay so
12:18 - that's how we make the slice now I'm
12:20 - gonna show you how we can add elements
12:22 - to a slice which is pretty useful so
12:24 - what actually happens is you can't truly
12:28 - increase the size of a slice what we can
12:30 - do is make a new slice that has the same
12:33 - values but increased so there's a
12:35 - function called a pent and then what the
12:37 - append function takes is a slice as the
12:40 - first argument and then an element that
12:43 - we want to add to the slice as the next
12:45 - so in this case I'll add that I want to
12:47 - put the value ten into my slice and what
12:49 - this actually does is return a new slice
12:52 - that is this slice kind of plus this
12:55 - slice so append means add to the end so
12:58 - what would it would look like is this so
13:00 - we'd add ten to the end of that slice so
13:02 - let's actually have a look at what this
13:04 - is so I'm gonna say B colon equals
13:06 - append a comma 10 because this returns a
13:10 - new slice so I need to store it in a
13:13 - variable which I'm gonna do here and
13:15 - I'll say fmt dot print line B
13:17 - so let's look at what B is and we get 5
13:22 - 6 7 8 9 10
13:24 - so we appended that element to this
13:26 - slice so we couldn't truly extend the
13:30 - slice we couldn't change a but what I
13:33 - could do is say a equals append a 10
13:37 - what that will do is say a is equal to a
13:39 - new slice which is the original a plus
13:42 - the appended 10 so that's a common way
13:44 - to do this too if you want to have the
13:46 - same variable name being extended that
13:49 - works fine but we of course since this
13:51 - returns a new slice we can assign it
13:52 - anywhere we'd like so that's append and
13:55 - those are the few different ways that
13:56 - you make slices now we'll be dealing
13:58 - more with slices as we go through this
14:00 - tutorial series the last thing I want to
14:02 - show you is how we can make slices with
14:04 - the keyword make or with the function
14:05 - make now we're gonna use make a lot
14:08 - especially when we get into concurrency
14:10 - but there's something called make so I
14:11 - can do something like a colon equals
14:13 - make and then what I do is I put the
14:15 - type that I want to make so in this case
14:17 - I want to make a slice of intz and the
14:20 - size or the capacity that I want it to
14:22 - be so if I do this and then we go fmt
14:24 - dot print line a let's have a look at
14:27 - what we get go around tutorial Co we get
14:31 - all zeroed out in int array are certain
14:33 - that int array in slice of size 5 so we
14:36 - can do many things with make we'll see
14:38 - this more in the future
14:39 - but I just want to show the Sukkos this
14:40 - is a way that you can make a new slice
14:42 - as well rather than just typing it out
14:44 - if you wanted to make a slice that's
14:45 - empty but a certain size or length to
14:47 - start then you can simply just put int
14:49 - and then put 5 like that and it will
14:51 - make that for you now in fact let's
14:53 - actually just look at what the type is
14:55 - of this so let's go percent capital T
14:58 - pull an A and have a look at what this
15:01 - is oops
15:02 - go run tutorial dot go and we get a type
15:06 - int right so I know this is not a very
15:08 - descriptive type this is telling you
15:09 - this is a slice not an array because if
15:12 - this was an array it would have a 5
15:13 - inside of the square brackets before int
15:16 - ok so I think I'm gonna wrap up the
15:18 - video here this has been pretty much
15:20 - everything you really need to know about
15:21 - slices at least for now we'll be using
15:23 - slices and a lot of examples and things
15:25 - in the future I hope you guys enjoyed if
15:27 - you did make sure to leave a like
15:28 - subscribe and I will see you in the next
15:30 - tutorial