00:00 - hey guys and welcome back to another
00:02 - YouTube video in today's video I'm doing
00:04 - kind of a part two to my tips and tricks
00:06 - video that I did about a week ago and
00:09 - I'm gonna be showing you some more
00:10 - advanced tips and tricks that you can
00:12 - use in Python again just to reiterate
00:14 - these are mostly specific to Python and
00:17 - you cannot use these in other
00:18 - programming languages although that
00:20 - being said these will save you a lot of
00:22 - time so make sure you stick around and
00:24 - watch all of them as I guarantee at
00:27 - least one or two of them you will find
00:28 - extremely useful on for something that's
00:30 - in your use case a lot of this stuff is
00:33 - for more advanced programmers that being
00:35 - said still stick around if you're a
00:36 - beginner because you'll probably learn a
00:38 - little bit and see some new tricks but
00:40 - you might not see the use case for it
00:41 - unless you rights may be more advanced
00:43 - programs to say okay so let's get
00:45 - started I'm just gonna copy out I have
00:47 - another file open just to save us a bit
00:49 - of time here I have two lists a and B
00:52 - now the problem we want to solve here is
00:53 - we want to find the intersection between
00:56 - a and B so like what elements are the
00:58 - same in each of the lists now we could
01:01 - go through a for loop we can check every
01:02 - element here with every element in here
01:04 - but that takes too long I don't want to
01:07 - write a for loop so let's use this trick
01:09 - so first of all we're gonna use
01:12 - something called a set and a set is just
01:14 - it's kind like a list just a different
01:17 - type of list in a way in Python that has
01:19 - some cool methods for it and one of the
01:21 - methods it has is intersection so you
01:24 - don't need to import anything all you
01:26 - have to type is set a so whatever the
01:28 - first set is and then dot intersection
01:31 - with on any other iterable item so for
01:34 - example a list a dictionary another set
01:38 - those are all things you can put in this
01:39 - intersection parameter here so if I run
01:41 - the program you can see we get three and
01:43 - a and those are the common items between
01:46 - the set that's really useful and then if
01:50 - you wanted to you could convert this
01:52 - into a list do whatever you want with it
01:54 - okay so the next one I'm just gonna
01:57 - again copy another list to save a some
01:59 - time like this and I have this thing
02:02 - called import itertools
02:03 - which is a really useful module in
02:05 - Python I'm going to be doing some
02:06 - tutorials on that later on it allows you
02:09 - to just implement some cool things and
02:11 - save you a lot of time so what I want to
02:13 - do
02:13 - is I want you to get a new list that has
02:16 - all these elements in it and I want to
02:18 - look something like this
02:21 - like that okay now if you know how to do
02:25 - this you know that this is a little bit
02:26 - difficult you could write like a
02:28 - recursive algorithm to do this you could
02:30 - do it with four loops but it is a little
02:34 - bit difficult and you if you throw
02:35 - something like this in there it could
02:37 - make it a bit harder as well so let's go
02:40 - ahead and just use this trick so I'm
02:42 - gonna say new a is equal to list I'm
02:45 - just going to convert this into a list
02:46 - so we can see it in our tools dot chain
02:50 - dot from underscore kitchen oops
02:54 - so you spell it it's a rouble okay and
02:56 - then I can simply print to the screen
02:59 - new way now this is something I might
03:02 - want to write down because it's probably
03:03 - hard to remember but you're importing
03:05 - inner tools and you're gonna go do
03:06 - chained dog from iterable and all this
03:09 - is gonna do is simply break this list
03:10 - into one list so I'll show you
03:13 - it gives me 1 2 3 4 5 6 I didn't have to
03:15 - write a bunch of for loops or anything
03:17 - like that just to note if I did do
03:19 - something like this and I put like a 7
03:21 - so an on interval item in this main list
03:23 - that's gonna crash our program so it has
03:26 - to be consistent in terms of that
03:29 - working I hope that makes sense you guys
03:30 - can play around with it if you want to
03:31 - learn more about it okay this one is
03:33 - really useful if you're coding like
03:36 - problems I want to say like programming
03:39 - problems as well at the time they're
03:40 - gonna ask you to like the first integer
03:43 - is gonna be how many inputs you're about
03:47 - to receive and then there's gonna be
03:49 - spaced by one and then you're gonna
03:50 - you're gonna want to break that into
03:52 - lists so for example like it's gonna
03:54 - tell you that in the console you're
03:56 - gonna have it be expected like 20 input
03:59 - separated by commas and you want to put
04:01 - that into a list or something like that
04:03 - so this will just do it for you you'll
04:06 - see you how exactly works once I started
04:08 - typing it in here
04:13 - and if you don't know how any of these
04:15 - functions and stuff work that I'm using
04:17 - currently I have tutorials on my channel
04:21 - that are advanced or intermediate Python
04:23 - programming tutorials and they kind of
04:24 - go through all this more in-depth
04:26 - because I'm just going to skim
04:27 - right now I'm showing you how you more
04:29 - use it rather than how it works okay so
04:32 - pretty much what this does is it's gonna
04:34 - get input so us typing in the console
04:38 - and it's gonna split it so by space so
04:41 - we're gonna space things out and then
04:43 - what is simply gonna do is convert that
04:44 - into an integer and then it's gonna put
04:47 - it into a list and return that value so
04:49 - typically the way that you do this did
04:51 - you use a for loop and then you'd
04:53 - convert things into integers and then
04:54 - you append them into a list this just
04:56 - makes it a lot easier so now it's gonna
04:58 - ask me a type stuff in so did one for
05:00 - sixty seven eight nine zero like that
05:03 - and then you could see I get a list of
05:05 - all of these elements and I just
05:07 - separated each of them by space so it
05:09 - knew it was a new element if you want to
05:11 - have them separated by like a comma I
05:13 - change the split to a comma you can do
05:16 - something like one two three four and
05:17 - then I get again one two three four in a
05:20 - list form okay so let's just comment
05:23 - these okes I don't have to type that in
05:24 - every time that I run the next ones
05:27 - okay this one's really useful as well
05:29 - it's gonna be using swing called
05:31 - collections so from collections import
05:36 - counter like this okay should I create a
05:38 - new list say my list is equal to 1 2 3 4
05:42 - and I'm simply gonna print countering my
05:48 - list I'll just show you what this does
05:49 - and then we'll kind of go through it so
05:51 - pretty much what it does is it's gonna
05:53 - give you a dictionary of a key value
05:57 - pair so for example in my list I have
05:59 - the element 1 it occurs one time my list
06:02 - I have the element to it occurs one time
06:03 - in my list I have a home in 3 occurs one
06:05 - time four so on again if I do something
06:07 - like this I'm just add a bunch of floors
06:09 - in here just to show you how this works
06:10 - then you can see now I have four it
06:13 - occurs four times one and actually
06:15 - orders them by most occurrences as it
06:19 - goes to the list which is really useful
06:20 - so rather than if you wanted to count
06:24 - all of like the A's and all of the B's
06:26 - and all the C's in a list you could use
06:29 - a for loop you can say if element equals
06:30 - a add one to the very odd one to the
06:34 - list or the dictionary a this just does
06:36 - it all for you using this handy little
06:38 - thing called counter which I'm
06:41 - be doing some tutorials on on my channel
06:43 - later because it is really useful how
06:45 - this little counter thing works and
06:46 - again you have to import counter from
06:49 - collections which is a built in module
06:51 - in Python you don't have to install
06:52 - anything ok this next one is really cool
06:56 - too so I'm just gonna make two more
06:58 - lists here 4 5 6 and this is the zip
07:02 - function so I'll show you how it works
07:04 - in terms of a for look and not kind of
07:06 - go through it more depth than just a
07:08 - second so pretty much what this sketch
07:12 - is gonna do is it's gonna combine our
07:14 - two lists together and I just gotta
07:17 - finish typing this and then I can come
07:18 - talk about it ok so what does zip
07:21 - function is gonna do is it's going to
07:23 - allow us to sum these two elements or
07:26 - each element of the list together just a
07:28 - lot easier so what zip actually does is
07:32 - it takes as many iterative items that
07:35 - you want so like a list a tuple a
07:37 - dictionary is set and then it's gonna
07:39 - combined elements together so it's gonna
07:41 - give and it's gonna return a tuple that
07:43 - looks something like this 1 4 and then
07:47 - it's gonna return another 2 book the
07:49 - next time we go through it and it's
07:50 - gonna give me something like 2 5 and
07:53 - then we'll give me another one and I'll
07:55 - give me 3 and 6 so when I say for I J in
08:00 - zip a B what its first doing is it's
08:03 - giving me 1 and 4 and then it's giving
08:05 - me 2 and 5 then it's giving me 3 and 6
08:07 - so I is gonna be assigned to 1 J is
08:09 - gonna be assigned to 4 and then I can
08:11 - add those up so you might be able to see
08:13 - the use case for this if you program a
08:16 - lot and you can see how exactly how it
08:18 - works so I have my 1 in 4 equals 5 my 2
08:20 - and 5 equals 7 3 and 6 equals 9 and this
08:23 - is really useful to use especially in a
08:25 - for loop because you can combine
08:28 - multiple things together and I could
08:30 - even if I wanted to if I had like a I'll
08:33 - just stay a I could say a oops 1 like
08:38 - this so I would get the first element
08:40 - and then I would get the rest of the
08:42 - list like that and you can do things
08:43 - like that with the zip function kind of
08:45 - play around with it and you can figure
08:47 - out exactly how they work so I'm just
08:48 - gonna delete this now because I don't
08:49 - want to have it running all the time ok
08:52 - so this is my last one and this one is
08:54 - probably the coolest one I saved it for
08:56 - last for that reason so I'm gonna make a
08:58 - list here it has a bunch of word tonight
09:00 - you can see a few of them repeat Tim
09:02 - hello hi so on and what I want to do is
09:05 - I want to count the most occurrences of
09:08 - a word so which word occurs the most in
09:11 - my list so again you could go the long
09:14 - route through it you could figure out
09:16 - all the unique words in the list and
09:18 - then you could count them and organize
09:20 - them and then sort them and see which
09:22 - one appears that most but what if I
09:24 - asked you I want to see like ranked
09:26 - which ones occur the most well then
09:28 - you'd say you can use the counter but
09:29 - what if I say I want to see the top two
09:32 - names that appear in list then you would
09:34 - use the method that I'm about to show
09:35 - you down make a new variable called
09:37 - words duck count is equal to our counter
09:40 - which I showed just above words and that
09:43 - means a top underscore three because I
09:45 - or in this case we'll do two I guess
09:47 - because I was using that before words
09:49 - underscore count dot most underscore
09:53 - common two and so sprint top three to
09:58 - the screen or top to the screen okay so
10:03 - this reads pretty well just like English
10:05 - it does exactly kind of what you would
10:08 - think it does so we have a variable
10:10 - called words count it's gonna get the
10:11 - count of all of the different words here
10:13 - in our list and I already went through
10:15 - that how that works and then now we want
10:18 - the top two words in our list so we're
10:20 - gonna use this count which is I believe
10:22 - a set or a dictionary you could check
10:25 - that if I wanted to in fact let's check
10:26 - this to see what type it actually is the
10:30 - type of words underscore the count it
10:35 - might be its own type we'll see it
10:36 - actually has a method on it called most
10:39 - common which is extremely useful and you
10:42 - probably don't see this in any other
10:43 - programming language and then you just
10:45 - put how many of the most common elements
10:47 - you want so in this case I want to so
10:49 - we're gonna print to the screen okay so
10:51 - it is its own type class collection and
10:53 - it's gonna give me Tim which occurs
10:55 - three times and high which occurs two
10:57 - times so not only does it just tell me
11:00 - the ones that occur the most it actually
11:02 - tells me how many times they occur which
11:05 - is really useful on information that you
11:08 - might
11:08 - so let's just do most common for which I
11:10 - believe is how many different words
11:12 - actually have and we say Tim hi hello
11:15 - goodbye and I believe for these ones
11:18 - since I've put four and there's other
11:21 - words that occur just one time like cool
11:23 - it's just gonna give me the ones that
11:26 - occurred first in the list it's kind of
11:28 - intuitive like that's how you'd think it
11:29 - works I do most common one then it just
11:33 - gives me a list and it's just as Tim
11:34 - which occurs three times like that
11:37 - anyways that has been it for this tips
11:40 - and tricks video I hope you guys learned
11:42 - something and you can apply some of the
11:43 - stuff that I showed in here to some of
11:45 - your programs if you ever forget any of
11:47 - this stuff just come back to the video
11:49 - and have a look at it I'm actually gonna
11:51 - post a link in the description which is
11:53 - like a paste bin thing that has like a
11:56 - little document a little Python document
11:58 - that has all this stuff in here that
12:00 - I've been coding so that you guys can
12:01 - just copy and paste it into your own
12:03 - program you don't have to worry about
12:04 - memorizing anything anyways that's been
12:06 - it for this video make sure you guys
12:07 - leave a like and subscribe and I will
12:09 - see you again in the next one
12:11 - [Music]