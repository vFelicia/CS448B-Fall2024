With timestamps:

00:05 - the first part of this video is a
00:07 - collection of tips on how to think like
00:09 - a programmer
00:10 - when we build computer models and
00:12 - simulations
00:14 - we eventually get to the point where we
00:15 - have to explain things to the computer
00:17 - this step can be slow going for the
00:19 - first several conversations we have with
00:21 - the computer the challenge is this
00:23 - computers are very picky about the words
00:25 - or commands that we use they just can't
00:27 - handle ambiguity as well as people can
00:30 - computers need things laid out very
00:32 - precisely and logically this features of
00:35 - computers actually works very much in
00:37 - our favor when we build computer models
00:39 - because an important aspect of creating
00:41 - these models is looking very closely and
00:43 - logically at how the parts of the system
00:46 - that we're building interact
00:49 - talking to or giving instructions to a
00:51 - computer is called programming
00:53 - programming is a skill that
00:54 - you get better and better at the more
00:56 - you practice i find it helpful to remind
00:58 - myself and my students that there are
01:00 - certain attitudes or dispositions that
01:03 - can make the process of learning the
01:04 - program more fun and at the same time
01:07 - more rapid
01:09 - so first of all
01:10 - mistakes you never should feel bad about
01:14 - making a mistake mistakes just come with
01:16 - the territory computers don't care if
01:17 - you make a mistake and you shouldn't
01:19 - either in fact i like to tell my
01:21 - students that they need to make one
01:23 - thousand mistakes before they can
01:24 - program with any fluency so i should
01:27 - just get started
01:28 - if you can't learn something from a
01:30 - mistake it's better just to move on just
01:33 - do something else if you can learn
01:35 - something so much the better the
01:37 - willingness to make mistakes is really
01:38 - an aspect of a uniquely human quality
01:41 - the tolerance for ambiguity
01:43 - frequently when programming you'll find
01:45 - yourself uncertain of how to proceed or
01:47 - perhaps even very certain that you're
01:49 - going down the wrong path in a situation
01:51 - like this computers grind to a halt but
01:53 - effective learners just muddle through
01:55 - and learn things along the way
01:59 - the second attitude or disposition that
02:01 - i think is valuable is curiosity or
02:04 - playfulness
02:05 - curiosity
02:07 - means it's more than just having fun
02:09 - it's a best way to rapidly figure out
02:11 - how to create programs that work
02:14 - when you're curious you poke around in
02:15 - the interface you run little experiments
02:17 - to see what this or that setting does if
02:19 - you know how to do one thing you do it
02:21 - but then modify it you build something
02:23 - then break it ask questions this is how
02:26 - young children interact with the world
02:27 - when they're new to everything this is a
02:29 - good approach for any learner to take it
02:32 - is however an approach that may be
02:33 - foreign to those of us who have built
02:35 - professional teaching careers around
02:37 - being masters of our content area
02:40 - unfortunately or fortunately the world
02:42 - of computer programming is so fast
02:45 - that there really are no masters we're
02:48 - all learners at different stages but
02:49 - always a learner
02:51 - the next attitude that will help
02:53 - tremendously as you learn the program is
02:55 - the recognition that you're not alone
02:57 - when you program there are a wealth of
03:00 - resources available to help you learning
03:02 - programming
03:03 - understanding how to quickly access the
03:05 - learning resources that you need is a
03:07 - part of becoming a competent programmer
03:10 - documentation online groups the person
03:13 - sitting next to you email to a mentor
03:16 - there are a variety of ways to get
03:17 - questions answered as you gain
03:19 - experience asking questions consulting
03:22 - the help documentation learning how to
03:25 - get unstuck your work goes faster and
03:27 - faster and you'll find yourself tackling
03:29 - increasingly ambitious and interesting
03:31 - problems you will also find that your
03:33 - network of resources keeps growing and
03:36 - your projects become ever more
03:38 - collaborative
03:40 - the next attitude and perhaps implied in
03:42 - all the attitudes that i've mentioned so
03:44 - far is the willingness to be persistent
03:46 - have confidence tackling open-ended
03:48 - complex problems and to stick with it
03:51 - there's no way around it programming
03:53 - takes time
03:54 - if you find ways to break big problems
03:56 - into a bunch of little problems you'll
03:58 - find some satisfaction in finding the
04:00 - solution to those little problems if you
04:02 - can't solve those little problems just
04:04 - go back to something you can do and
04:06 - experiment there some more
04:08 - if you keep trying keep making progress
04:10 - you will eventually become comfortable
04:12 - programming and able to tackle truly
04:14 - interesting problems
04:16 - finally take pride in your models an
04:19 - important aspect of programming is the
04:21 - fact that when you've done something you
04:23 - have something it's usually unique and
04:26 - it does something show it off put it to
04:28 - work post it online programming
04:31 - naturally builds communities of people
04:33 - who share in the struggles but also
04:35 - celebrate the victories of its members
04:38 - we believe that experiencing the
04:39 - excitement of discovery hand will open
04:42 - doors for you and your students
04:45 - hi everyone i'm melody hageman i'm a
04:48 - science and computer science teacher and
04:50 - i've been working with project guts to
04:52 - help students explore using models in
04:54 - scientific inquiry for a number of years
04:57 - the second part of this video is from
04:59 - karen brennan's talk on how to get
05:01 - unstuck
05:02 - karen is a profession professor of
05:05 - education at harvard and was the
05:07 - developer of scratch ed
05:09 - in her talk karen recounts her
05:11 - experiences working with teachers she
05:13 - thinks about how to use scratch in
05:15 - classrooms across curricular areas
05:18 - teachers fear that students are going to
05:20 - get stuck they ask what if we cannot
05:22 - make progress how can i help my student
05:25 - initially karen's answer was to use the
05:27 - online community but then she wondered
05:30 - how do kids without teachers get unstuck
05:32 - in the wild so she asked kids how do you
05:35 - get unstuck
05:36 - here are the top six strategies
05:39 - one
05:40 - read through your code your code holds
05:42 - all the answers the computer is simply
05:44 - following your instructions exactly
05:46 - tracing through code step by step as if
05:49 - you were the computer processing the
05:50 - instructions will help you find errors
05:52 - in your logic or missing steps
05:55 - two experiment with your code try
05:58 - rearranging the order of statements or
06:00 - reconceive of the grouping of commands
06:02 - you won't break the computer but you
06:04 - could break your code so make backup
06:06 - before you reconfigure
06:08 - three look for examples such as other
06:10 - programs that do similar things
06:13 - it's not cheating or stealing to learn
06:14 - from other people's code if what you
06:16 - take away is understanding
06:19 - four
06:20 - work with someone else collaborate and
06:22 - consult with others
06:23 - two heads and two set of eyes are often
06:26 - better than one
06:28 - five acknowledge that it is hard and you
06:30 - need persistence programming like
06:33 - puzzling is hard mental work but
06:35 - building up your brain power is like
06:37 - building up muscle with practice and
06:39 - persistence it will grow
06:41 - six take a break sometimes a break is
06:44 - just what you need getting some fresh
06:46 - air and or stepping away from the
06:47 - computer can give you a much needed
06:49 - break and often you can come back to a
06:52 - problem with a new perspective
06:54 - but you might ask how do these
06:56 - strategies help me as a teacher
06:58 - the answer is your students may not need
07:00 - you in the way you think they need you
07:03 - you do not need to be the expert your
07:05 - role can shift from sage on the stage to
07:08 - guide on the side
07:09 - don't get stuck thinking about an old
07:11 - version of teaching
07:13 - amazing things can happen when the
07:15 - students teach the teacher

Cleaned transcript:

the first part of this video is a collection of tips on how to think like a programmer when we build computer models and simulations we eventually get to the point where we have to explain things to the computer this step can be slow going for the first several conversations we have with the computer the challenge is this computers are very picky about the words or commands that we use they just can't handle ambiguity as well as people can computers need things laid out very precisely and logically this features of computers actually works very much in our favor when we build computer models because an important aspect of creating these models is looking very closely and logically at how the parts of the system that we're building interact talking to or giving instructions to a computer is called programming programming is a skill that you get better and better at the more you practice i find it helpful to remind myself and my students that there are certain attitudes or dispositions that can make the process of learning the program more fun and at the same time more rapid so first of all mistakes you never should feel bad about making a mistake mistakes just come with the territory computers don't care if you make a mistake and you shouldn't either in fact i like to tell my students that they need to make one thousand mistakes before they can program with any fluency so i should just get started if you can't learn something from a mistake it's better just to move on just do something else if you can learn something so much the better the willingness to make mistakes is really an aspect of a uniquely human quality the tolerance for ambiguity frequently when programming you'll find yourself uncertain of how to proceed or perhaps even very certain that you're going down the wrong path in a situation like this computers grind to a halt but effective learners just muddle through and learn things along the way the second attitude or disposition that i think is valuable is curiosity or playfulness curiosity means it's more than just having fun it's a best way to rapidly figure out how to create programs that work when you're curious you poke around in the interface you run little experiments to see what this or that setting does if you know how to do one thing you do it but then modify it you build something then break it ask questions this is how young children interact with the world when they're new to everything this is a good approach for any learner to take it is however an approach that may be foreign to those of us who have built professional teaching careers around being masters of our content area unfortunately or fortunately the world of computer programming is so fast that there really are no masters we're all learners at different stages but always a learner the next attitude that will help tremendously as you learn the program is the recognition that you're not alone when you program there are a wealth of resources available to help you learning programming understanding how to quickly access the learning resources that you need is a part of becoming a competent programmer documentation online groups the person sitting next to you email to a mentor there are a variety of ways to get questions answered as you gain experience asking questions consulting the help documentation learning how to get unstuck your work goes faster and faster and you'll find yourself tackling increasingly ambitious and interesting problems you will also find that your network of resources keeps growing and your projects become ever more collaborative the next attitude and perhaps implied in all the attitudes that i've mentioned so far is the willingness to be persistent have confidence tackling openended complex problems and to stick with it there's no way around it programming takes time if you find ways to break big problems into a bunch of little problems you'll find some satisfaction in finding the solution to those little problems if you can't solve those little problems just go back to something you can do and experiment there some more if you keep trying keep making progress you will eventually become comfortable programming and able to tackle truly interesting problems finally take pride in your models an important aspect of programming is the fact that when you've done something you have something it's usually unique and it does something show it off put it to work post it online programming naturally builds communities of people who share in the struggles but also celebrate the victories of its members we believe that experiencing the excitement of discovery hand will open doors for you and your students hi everyone i'm melody hageman i'm a science and computer science teacher and i've been working with project guts to help students explore using models in scientific inquiry for a number of years the second part of this video is from karen brennan's talk on how to get unstuck karen is a profession professor of education at harvard and was the developer of scratch ed in her talk karen recounts her experiences working with teachers she thinks about how to use scratch in classrooms across curricular areas teachers fear that students are going to get stuck they ask what if we cannot make progress how can i help my student initially karen's answer was to use the online community but then she wondered how do kids without teachers get unstuck in the wild so she asked kids how do you get unstuck here are the top six strategies one read through your code your code holds all the answers the computer is simply following your instructions exactly tracing through code step by step as if you were the computer processing the instructions will help you find errors in your logic or missing steps two experiment with your code try rearranging the order of statements or reconceive of the grouping of commands you won't break the computer but you could break your code so make backup before you reconfigure three look for examples such as other programs that do similar things it's not cheating or stealing to learn from other people's code if what you take away is understanding four work with someone else collaborate and consult with others two heads and two set of eyes are often better than one five acknowledge that it is hard and you need persistence programming like puzzling is hard mental work but building up your brain power is like building up muscle with practice and persistence it will grow six take a break sometimes a break is just what you need getting some fresh air and or stepping away from the computer can give you a much needed break and often you can come back to a problem with a new perspective but you might ask how do these strategies help me as a teacher the answer is your students may not need you in the way you think they need you you do not need to be the expert your role can shift from sage on the stage to guide on the side don't get stuck thinking about an old version of teaching amazing things can happen when the students teach the teacher
