With timestamps:

00:00 - foreign
00:05 - [Music]
00:10 - and I'm a software engineering manager
00:13 - at Airbnb if you're thinking that if you
00:15 - pursue computer science you're going to
00:16 - be sitting in a dark room like looking
00:18 - at your screen all the time all by
00:20 - yourself that's not going to be it
00:21 - there's there's so much camaraderie and
00:24 - such a strong sense of community around
00:27 - computer science and software
00:28 - engineering these days you can find your
00:30 - community
00:32 - let's make two different dimes
00:35 - each time object has an incest variable
00:38 - called sense to store its value
00:41 - when we create a dime object it is worth
00:43 - 10 cents
00:45 - when we create two dime objects first
00:48 - time is not an alias of second time
00:50 - there are two unique objects when we use
00:53 - the equals operator to compare these two
00:55 - dimes it returns false
00:58 - and when we use the equals method to
01:00 - compare these two dimes it also returns
01:02 - false
01:03 - the equals method in the object class
01:05 - checks if both reference variables are
01:08 - aliases
01:09 - we want two dimes to be considered equal
01:11 - if they are the same value which is 10
01:14 - cents
01:15 - we can override the equals method to
01:18 - compare the values stored in the
01:20 - instance variables
01:22 - both the equals method and our
01:23 - overreading equals method must have the
01:26 - same method signature
01:28 - when we write public
01:30 - Boolean for the return type
01:32 - and equals for the name method
01:34 - we use Boolean for the return type to
01:37 - return true if the instance variables
01:39 - contain the same values
01:41 - these are not the same it returns false
01:44 - inside the parenthesis we specify the
01:47 - parameter
01:48 - in this case we want to compare one
01:50 - object to another
01:52 - our parameter is type object
01:54 - now let's trick the computer into
01:57 - thinking all dimes that have 10 cents
01:59 - for their value are equal
02:01 - in the body of our equals method we
02:03 - write an if statement
02:05 - phase will compare the current object's
02:07 - value to the other object's value
02:10 - if these values are the same we return
02:12 - true if these values are not the same we
02:16 - return false
02:19 - we can use the equals method to check if
02:22 - first time and second time are the same
02:24 - we call the equals method on the first
02:26 - time object
02:28 - and pass the second time object as the
02:30 - argument
02:32 - now the method returns true because they
02:35 - both have the same value for sense
02:37 - we'll be writing the equals method in
02:39 - our classes means we can compare objects
02:42 - based on their specific values
02:44 - [Music]

Cleaned transcript:

foreign and I'm a software engineering manager at Airbnb if you're thinking that if you pursue computer science you're going to be sitting in a dark room like looking at your screen all the time all by yourself that's not going to be it there's there's so much camaraderie and such a strong sense of community around computer science and software engineering these days you can find your community let's make two different dimes each time object has an incest variable called sense to store its value when we create a dime object it is worth 10 cents when we create two dime objects first time is not an alias of second time there are two unique objects when we use the equals operator to compare these two dimes it returns false and when we use the equals method to compare these two dimes it also returns false the equals method in the object class checks if both reference variables are aliases we want two dimes to be considered equal if they are the same value which is 10 cents we can override the equals method to compare the values stored in the instance variables both the equals method and our overreading equals method must have the same method signature when we write public Boolean for the return type and equals for the name method we use Boolean for the return type to return true if the instance variables contain the same values these are not the same it returns false inside the parenthesis we specify the parameter in this case we want to compare one object to another our parameter is type object now let's trick the computer into thinking all dimes that have 10 cents for their value are equal in the body of our equals method we write an if statement phase will compare the current object's value to the other object's value if these values are the same we return true if these values are not the same we return false we can use the equals method to check if first time and second time are the same we call the equals method on the first time object and pass the second time object as the argument now the method returns true because they both have the same value for sense we'll be writing the equals method in our classes means we can compare objects based on their specific values
