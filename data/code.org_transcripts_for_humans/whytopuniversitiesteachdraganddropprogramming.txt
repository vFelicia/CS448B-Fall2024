With timestamps:

00:00 - I'm Dan Garcia, I'm a senior lecturer SOE
here at UC Berkeley. In the olden days we
00:05 - used to teach using a text based language.
And there would be a fair number of mistakes
00:12 - just based on typos. We've moved at UC Berkeley,
and at many universities across the country,
00:19 - to a blocks based language which has graphical
blocks that you drag and drop into place.
00:24 - And what that eliminates is all the syntactic
errors that you often get with text based
00:29 - languages. We don't get the same errors. The
students are able to jump past it and skip
00:33 - almost two weeks of here's how you check for
a missing parenthesis, here's how you check
00:37 - for a missing semicolon, here's how you decode
the arbitrary and obscure error message because
00:43 - of the missing semicolon. We don't have that
anymore. It's just as powerful as a text based
00:47 - language, it just is easier for first time
programmers. You want people to have an exciting,
00:52 - engaging experience in computer science to
be able to then think "Maybe there's a future
00:56 - for me in this field" or even if not, if we
do our job right, they'll have enough background
01:02 - so if they never take anymore computer science
courses they'll have enough experience, enough
01:06 - of a background to be able to use the computing
they've learned, computational thinking, in
01:11 - whatever field they happen to choose. Because
it'd going to be impossible to find a field
01:14 - that doesn't have computation affecting the
field in the future.
01:17 - It's really fun, do you want to play?

Cleaned transcript:

I'm Dan Garcia, I'm a senior lecturer SOE here at UC Berkeley. In the olden days we used to teach using a text based language. And there would be a fair number of mistakes just based on typos. We've moved at UC Berkeley, and at many universities across the country, to a blocks based language which has graphical blocks that you drag and drop into place. And what that eliminates is all the syntactic errors that you often get with text based languages. We don't get the same errors. The students are able to jump past it and skip almost two weeks of here's how you check for a missing parenthesis, here's how you check for a missing semicolon, here's how you decode the arbitrary and obscure error message because of the missing semicolon. We don't have that anymore. It's just as powerful as a text based language, it just is easier for first time programmers. You want people to have an exciting, engaging experience in computer science to be able to then think "Maybe there's a future for me in this field" or even if not, if we do our job right, they'll have enough background so if they never take anymore computer science courses they'll have enough experience, enough of a background to be able to use the computing they've learned, computational thinking, in whatever field they happen to choose. Because it'd going to be impossible to find a field that doesn't have computation affecting the field in the future. It's really fun, do you want to play?
