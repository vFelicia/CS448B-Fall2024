With timestamps:

00:05 - my name is brendan reville i'm from
00:06 - australia and i learned to program when
00:08 - i was 10 years old since then i've
00:10 - worked on the xbox team and now here at
00:12 - code.org i've helped build some of the
00:14 - hour of code tutorials that i know a lot
00:16 - of people have enjoyed
00:18 - whether you're planning out your day
00:20 - brainstorming ideas for a project or
00:22 - choosing songs for a party you'll
00:25 - probably want to make a list
00:27 - lists help us stay organized by ordering
00:29 - all the relevant pieces of information
00:31 - one after the other in a single place
00:34 - the same principle applies when we write
00:36 - programs that include many pieces of
00:38 - related information
00:42 - variables are useful for holding a
00:43 - single piece of information
00:45 - but as we collect more information
00:47 - keeping the variables organized can be
00:48 - complicated and cumbersome
00:51 - for example what if you wanted to keep
00:52 - track of everybody's name in class or an
00:55 - entire school
00:56 - it's impractical to create hundreds or
00:58 - thousands of individual variables and
01:00 - impossible if you don't know how many
01:02 - items should be tracked ahead of time
01:04 - in programming a list is a container
01:07 - used to keep similar pieces of data
01:09 - organized in one place you can think of
01:11 - it like a container that grows or
01:13 - shrinks to fit the number of items it
01:14 - has inside
01:15 - the main items you can do to a list are
01:18 - add or replace items
01:20 - access items and remove items
01:23 - in javascript a list is called an array
01:25 - you may hear list or array used
01:27 - interchangeably but we'll refer to it as
01:29 - a list to keep it simple
01:31 - a basic example of a list will be all
01:33 - your contacts
01:34 - on your phone in your email etc
01:38 - let's see how this would work to start
01:40 - off you need to create a list you do
01:43 - this by using square brackets
01:45 - an empty list looks like this
01:47 - you can also create a list with some
01:49 - initial values in it
01:50 - just write out the values separated by
01:52 - commas inside the square brackets
01:55 - for example you could make a list of
01:57 - numbers like this
01:59 - or a list of names as in a contact list
02:02 - like this
02:03 - just like how you can assign a number or
02:06 - a string to a variable like var x gets 5
02:09 - you can also assign a list to a variable
02:11 - to use it later like this
02:17 - you can think of a list as a container
02:18 - of numbered slots each slot can have one
02:21 - value in it
02:27 - to access an individual item from your
02:29 - list write out the name of the list and
02:31 - the number of the slot you want to
02:32 - access like this
02:34 - this means give me the item in the list
02:36 - names sitting in slot number two
02:39 - the official term for slot number is
02:41 - index so we would read names left
02:44 - bracket two right bracket as names at
02:47 - index two
02:48 - you might have noticed that the first
02:50 - index in the list is zero in programming
02:52 - we usually start counting at zero which
02:54 - means that names at index zero is the
02:57 - first item of the list and names at
02:59 - index two is actually the third item in
03:02 - the
03:02 - list when your program runs the computer
03:05 - will look up the current value that
03:06 - lives at the given index of the list
03:09 - just like the computer looks up the
03:10 - current value of a variable for example
03:13 - if you have a list of numbers called num
03:15 - list you can create an expression like
03:17 - this
03:18 - var sum
03:19 - gets num list at index 2
03:22 - plus none list at index 5.
03:24 - the value stored in index 2 is 40 and
03:27 - the value stored at index 5 is 60 so the
03:30 - variable sum is assigned the value 100.
03:38 - you can also assign or update a
03:40 - particular index's value you refer to
03:42 - the slot the same way
03:44 - names at index 0 gets the value sarah
03:47 - would replace the current value at index
03:49 - 0 just like assigning a new value to a
03:51 - variable
03:53 - once you have created a list you can
03:55 - modify it by adding items removing items
03:58 - or inserting items
03:59 - to add an item to a list you can use the
04:01 - append item function let's add kelly to
04:04 - the end of the list of names like this
04:07 - append item names kelly
04:10 - notice that append item is a function
04:12 - that accepts two parameters the list
04:14 - name and the actual value that you want
04:16 - to add appending an item always adds the
04:18 - value to the end of the list
04:21 - to remove an item you use wait for it
04:24 - the remove item function if we want to
04:26 - remove josh from the list of names we'd
04:28 - need to know the index where josh is
04:30 - stored so we could do this
04:33 - remove item names one
04:35 - when you remove items the whole list
04:37 - shrinks and it closes the gap of the
04:39 - item that was removed
04:41 - now our list has four items indexed zero
04:44 - through three
04:45 - because the list shrank items that come
04:47 - after the removal point are effectively
04:49 - re-indexed so if we once knew that kelly
04:51 - was stored at index four kelly is now at
04:54 - index three
04:55 - this is not a problem but something to
04:57 - be mindful of
04:59 - we can also insert items into the middle
05:01 - of the list with insert item like this
05:04 - insert item names to brook
05:07 - the insert item function needs three
05:09 - parameters the name of the list the
05:11 - index you want the new item to appear at
05:13 - and the value to insert
05:15 - inserting an item grows the size of the
05:17 - list similar to remove item the items in
05:19 - the list that come after the insertion
05:21 - point will be
05:22 - re-indexed because indexes are just
05:25 - numbers you can put anything in between
05:27 - the square brackets that evaluates to a
05:28 - number like variables or even arithmetic
05:31 - expressions
05:32 - for example let's say we're keeping
05:34 - track of temperature readings in a
05:36 - location with a variable called look
05:38 - var look gets three
05:41 - we can change the value in num list at
05:42 - index slope like this
05:44 - num list at look gets one
05:48 - one of the benefits of lists is that
05:50 - their length can grow and shrink over
05:52 - the course of a program
05:54 - but that means it can be useful to find
05:55 - the length of a list at a given point in
05:57 - time
05:58 - you can get the length for a list like
06:00 - this
06:01 - num list dot length
06:04 - when your program runs the computer will
06:06 - replace this with the current length of
06:07 - the list
06:08 - in this case the length of the list is
06:10 - six
06:12 - a potential point of confusion is that
06:14 - even though the length of the list is
06:15 - six the last index is five
06:18 - this is because we start the indexing at
06:20 - zero
06:22 - because lists change size a common issue
06:24 - in programming with lists is what's the
06:26 - index of the last element
06:28 - we typically find out using the
06:29 - expression list dot length minus one and
06:32 - you frequently see it used to access the
06:34 - last element of the list like this
06:37 - num list
06:38 - and in square brackets num list dot
06:40 - length -1
06:44 - lists are a very powerful way to store
06:46 - and maintain data in programs they open
06:48 - a door for us to write programs that use
06:50 - and process lots and lots of information
06:52 - especially when we don't know ahead of
06:54 - time just how much information needs to
06:56 - be stored
06:57 - let's try them out
07:03 - you

Cleaned transcript:

my name is brendan reville i'm from australia and i learned to program when i was 10 years old since then i've worked on the xbox team and now here at code.org i've helped build some of the hour of code tutorials that i know a lot of people have enjoyed whether you're planning out your day brainstorming ideas for a project or choosing songs for a party you'll probably want to make a list lists help us stay organized by ordering all the relevant pieces of information one after the other in a single place the same principle applies when we write programs that include many pieces of related information variables are useful for holding a single piece of information but as we collect more information keeping the variables organized can be complicated and cumbersome for example what if you wanted to keep track of everybody's name in class or an entire school it's impractical to create hundreds or thousands of individual variables and impossible if you don't know how many items should be tracked ahead of time in programming a list is a container used to keep similar pieces of data organized in one place you can think of it like a container that grows or shrinks to fit the number of items it has inside the main items you can do to a list are add or replace items access items and remove items in javascript a list is called an array you may hear list or array used interchangeably but we'll refer to it as a list to keep it simple a basic example of a list will be all your contacts on your phone in your email etc let's see how this would work to start off you need to create a list you do this by using square brackets an empty list looks like this you can also create a list with some initial values in it just write out the values separated by commas inside the square brackets for example you could make a list of numbers like this or a list of names as in a contact list like this just like how you can assign a number or a string to a variable like var x gets 5 you can also assign a list to a variable to use it later like this you can think of a list as a container of numbered slots each slot can have one value in it to access an individual item from your list write out the name of the list and the number of the slot you want to access like this this means give me the item in the list names sitting in slot number two the official term for slot number is index so we would read names left bracket two right bracket as names at index two you might have noticed that the first index in the list is zero in programming we usually start counting at zero which means that names at index zero is the first item of the list and names at index two is actually the third item in the list when your program runs the computer will look up the current value that lives at the given index of the list just like the computer looks up the current value of a variable for example if you have a list of numbers called num list you can create an expression like this var sum gets num list at index 2 plus none list at index 5. the value stored in index 2 is 40 and the value stored at index 5 is 60 so the variable sum is assigned the value 100. you can also assign or update a particular index's value you refer to the slot the same way names at index 0 gets the value sarah would replace the current value at index 0 just like assigning a new value to a variable once you have created a list you can modify it by adding items removing items or inserting items to add an item to a list you can use the append item function let's add kelly to the end of the list of names like this append item names kelly notice that append item is a function that accepts two parameters the list name and the actual value that you want to add appending an item always adds the value to the end of the list to remove an item you use wait for it the remove item function if we want to remove josh from the list of names we'd need to know the index where josh is stored so we could do this remove item names one when you remove items the whole list shrinks and it closes the gap of the item that was removed now our list has four items indexed zero through three because the list shrank items that come after the removal point are effectively reindexed so if we once knew that kelly was stored at index four kelly is now at index three this is not a problem but something to be mindful of we can also insert items into the middle of the list with insert item like this insert item names to brook the insert item function needs three parameters the name of the list the index you want the new item to appear at and the value to insert inserting an item grows the size of the list similar to remove item the items in the list that come after the insertion point will be reindexed because indexes are just numbers you can put anything in between the square brackets that evaluates to a number like variables or even arithmetic expressions for example let's say we're keeping track of temperature readings in a location with a variable called look var look gets three we can change the value in num list at index slope like this num list at look gets one one of the benefits of lists is that their length can grow and shrink over the course of a program but that means it can be useful to find the length of a list at a given point in time you can get the length for a list like this num list dot length when your program runs the computer will replace this with the current length of the list in this case the length of the list is six a potential point of confusion is that even though the length of the list is six the last index is five this is because we start the indexing at zero because lists change size a common issue in programming with lists is what's the index of the last element we typically find out using the expression list dot length minus one and you frequently see it used to access the last element of the list like this num list and in square brackets num list dot length 1 lists are a very powerful way to store and maintain data in programs they open a door for us to write programs that use and process lots and lots of information especially when we don't know ahead of time just how much information needs to be stored let's try them out you
