With timestamps:

00:07 - Up to this point, you focused on two elements
of functions: the contract which describes
00:13 - what data types your function takes as its
domain and returns as its range and the definition,
00:19 - which defines how your function interacts
with the data passed to its domain to produce
00:23 - its range.
00:25 - The contract helps us to ensure that our function
the right structure but it doesn't help us
00:30 - understand what your function should do with
the values passed to it to return the expected
00:35 - value.
00:38 - Examples are the missing link between the
contract and the definition.
00:43 - By writing two or more examples of how your
function should operate given specific inputs,
00:49 - you give the computer something to test your
function definition against.
00:53 - Software developers often call these unit
tests or test cases.
00:58 - Writing examples serve two purposes.
01:01 - First they help you to see concretely how
your function should operate before writing
01:05 - the definition.
01:07 - Second, they give your function something
to test against to make sure it works like
01:11 - you expected.
01:12 - All three of these processes taken together,
the contract, examples, and the definition,
01:20 - are called the design recipe and they give
you a step-by-step approach to designing really
01:24 - great functions.
01:26 - Let's follow the design recipe for a simple
function called green-triangle that should
01:31 - take a number for size and return a solid
green triangle with the given size.
01:36 - First we'll write a contract that describes
the general structure of our function.
01:41 - It should have a name of green-triangle, a
single number as its domain and a range of
01:48 - image.
01:49 - Now that we have a contract, let's write some
examples.
01:51 - These will be concrete examples of how our
function should operate with specific inputs.
01:57 - If we pass the number 15 to green-triangle,
it should return a 15 pixel solid green triangle.
02:03 - If we pass the number 100 to green-triangle,
it should return 100 pixel solid green triangle.
02:09 - If we compare the two examples, we'll see
that the only thing that changes between them
02:14 - is the size parameter passed to the triangle
function and those directly correlate to the
02:19 - input the function was passed.
02:21 - With that knowledge, we can write a function
definition that replaces that changing element
02:25 - with a variable.
02:28 - Each example has a test button next to it.
02:31 - Clicking test will run the code in your example
and display its output in the play area on
02:36 - the left.
02:37 - Running a test will also compare the value
returned by your test against the value returned
02:42 - by your function definition given the same
values and tell you whether or not your example
02:46 - matches your definition.
02:49 - In this stage, you'll use the Design Recipe
to write functions that will help animate
02:54 - a rocket blasting off.
03:01 - Subtitles by the Amara.org community

Cleaned transcript:

Up to this point, you focused on two elements of functions the contract which describes what data types your function takes as its domain and returns as its range and the definition, which defines how your function interacts with the data passed to its domain to produce its range. The contract helps us to ensure that our function the right structure but it doesn't help us understand what your function should do with the values passed to it to return the expected value. Examples are the missing link between the contract and the definition. By writing two or more examples of how your function should operate given specific inputs, you give the computer something to test your function definition against. Software developers often call these unit tests or test cases. Writing examples serve two purposes. First they help you to see concretely how your function should operate before writing the definition. Second, they give your function something to test against to make sure it works like you expected. All three of these processes taken together, the contract, examples, and the definition, are called the design recipe and they give you a stepbystep approach to designing really great functions. Let's follow the design recipe for a simple function called greentriangle that should take a number for size and return a solid green triangle with the given size. First we'll write a contract that describes the general structure of our function. It should have a name of greentriangle, a single number as its domain and a range of image. Now that we have a contract, let's write some examples. These will be concrete examples of how our function should operate with specific inputs. If we pass the number 15 to greentriangle, it should return a 15 pixel solid green triangle. If we pass the number 100 to greentriangle, it should return 100 pixel solid green triangle. If we compare the two examples, we'll see that the only thing that changes between them is the size parameter passed to the triangle function and those directly correlate to the input the function was passed. With that knowledge, we can write a function definition that replaces that changing element with a variable. Each example has a test button next to it. Clicking test will run the code in your example and display its output in the play area on the left. Running a test will also compare the value returned by your test against the value returned by your function definition given the same values and tell you whether or not your example matches your definition. In this stage, you'll use the Design Recipe to write functions that will help animate a rocket blasting off. Subtitles by the Amara.org community
