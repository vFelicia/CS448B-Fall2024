With timestamps:

00:04 - We've already seen that some functions
are defined with parameters
00:08 - to make them more generally useful.
00:11 - For example the original version
of moveForward moved
00:14 - the turtle exactly 25 pixels.
00:17 - This doesn't give you a lot of options
on how to design your drawings.
00:21 - A much more useful version of moveForward
is one that accepts a parameter that
00:25 - allows you to specify exactly how far
forward the turtle should move.
00:29 - Up to this point, the functions we've
written ourselves don't have parameters.
00:35 - But the ability to write your own function
with parameters is both useful, 
and powerful.
00:41 - So, let's see how to do it.
Here's an example.
00:45 - Look at this function that draws a square
with sides that are 100 pixels long.
00:50 - If we wanted to make a function to draw
a square with sides 50 pixels long,
00:55 - we'd have to make a new function that's
almost identical to the first one
00:59 - with the only difference being how
far the turtle is moving each time.
01:04 - If we wanted even more options for the
size of the square, every time we would
01:08 - need to declare a new function.
01:12 - Yeah that's not very good. But luckily,
there's another way.
01:14 - The solution to the problem is the 
ability to create a function
01:17 - that accepts a parameter.
01:19 - A parameter is a named value that is
provided as input to a function.
01:23 - We saw that our version of drawSquare
has a lot of code that was repeated.
01:28 - The turtle was executing the same basic
behavior just moving by different amounts.
01:32 - It turns out that we can express this
generalized behavior in our code as well.
01:37 - Here's a new version of drawSquare.
01:40 - Here we've made the size of the square a
parameter of the function. Notice that the
01:44 - function heading declares 
that it needs an input.
01:47 - We've given a name to that input
and that name is "size".
01:52 - Everywhere in the code where we need to
use that value we enter the word "size"
01:55 - instead of a number.
01:58 - Writing a function with a parameter is
very similar to writing a function
02:01 - without one. Just drag the function
block that shows a parameter
02:05 - and drop it into the work space.
We add the name of our parameter
02:09 - inside the parentheses in the 
function call like this.
02:12 - Just as giving a meaningful and 
descriptive name to your function
02:15 - is important, so is deciding 
what to name a parameter.
02:19 - The name of a parameter 
should give some incite
02:22 - into what the value will be used for.
02:24 - In this case, we've chosen the name "size"
to indicate that you can set the size of
02:28 - the square when calling the function.
02:30 - As a programmer, what you call your
parameter is your decision to make.
02:35 - We can write the body of a function
like this.
02:38 - The parameter "size" acts like a place
holder for that value.
02:42 - Wherever we want to use that value we just
refer to it as "size" instead of a number.
02:51 - Let's look at what happens when the 
function is called.
02:55 - Now when a user calls drawSquare
they call it with a value like this.
03:00 - We say the value of 63 gets "passed"
to the parameter of the function.
03:04 - The parameter acts like a container
with a name on it.
03:07 - Whatever value is passed into the 
function is stored in that container.
03:11 - Inside the body of the function, 
you'll want to use the value
03:14 - stored in the parameter.
03:16 - To do so, you must refer to the value
by its name.
03:19 - As the program is running, whenever
the word "size" in this case is
03:23 - encountered, its replaced by the value
stored in that parameter.
03:27 - Adding a parameter to our drawSquare
allows us to generalize its functionality.
03:32 - In other words, our function is useful
in an entire range of situations
03:37 - as opposed to just being useful in
one particular instance.
03:41 - The result is a function that gives you
much more flexibility and control
03:45 - without the need to create
duplicated code.
03:48 - Once you've added a single parameter 
to your function, you might realize
03:52 - that there are multiple aspects of its
functionality you'd like to generalize.
03:56 - For our square example, you might want
to change the width or color of the line.
04:02 - To do this, you can simply add more
parameters and separate them by commas.
04:06 - You can then use any of these parameter
names in the body of your function.
04:12 - When calling your function, you'll need
to include multiple values.
04:15 - One for each of the parameters, and
each one separated by commas.
04:19 - Parameters are another example of how
abstraction can be used to solve problems.
04:24 - When confronted with a group of related
problems, we first work to identify
04:28 - patterns across all of them. In doing so,
you might realize that using parameters
04:33 - will let you define a single function with
general behavior that can solve any
04:37 - instance of the problem
with one piece of code.
04:40 - This is a powerful skill that removes
the need for creating duplicate code,
04:44 - and leads to programs that are easier
to read, write, and maintain.
04:52 - Subtitles by the Amara.org community

Cleaned transcript:

We've already seen that some functions are defined with parameters to make them more generally useful. For example the original version of moveForward moved the turtle exactly 25 pixels. This doesn't give you a lot of options on how to design your drawings. A much more useful version of moveForward is one that accepts a parameter that allows you to specify exactly how far forward the turtle should move. Up to this point, the functions we've written ourselves don't have parameters. But the ability to write your own function with parameters is both useful, and powerful. So, let's see how to do it. Here's an example. Look at this function that draws a square with sides that are 100 pixels long. If we wanted to make a function to draw a square with sides 50 pixels long, we'd have to make a new function that's almost identical to the first one with the only difference being how far the turtle is moving each time. If we wanted even more options for the size of the square, every time we would need to declare a new function. Yeah that's not very good. But luckily, there's another way. The solution to the problem is the ability to create a function that accepts a parameter. A parameter is a named value that is provided as input to a function. We saw that our version of drawSquare has a lot of code that was repeated. The turtle was executing the same basic behavior just moving by different amounts. It turns out that we can express this generalized behavior in our code as well. Here's a new version of drawSquare. Here we've made the size of the square a parameter of the function. Notice that the function heading declares that it needs an input. We've given a name to that input and that name is "size". Everywhere in the code where we need to use that value we enter the word "size" instead of a number. Writing a function with a parameter is very similar to writing a function without one. Just drag the function block that shows a parameter and drop it into the work space. We add the name of our parameter inside the parentheses in the function call like this. Just as giving a meaningful and descriptive name to your function is important, so is deciding what to name a parameter. The name of a parameter should give some incite into what the value will be used for. In this case, we've chosen the name "size" to indicate that you can set the size of the square when calling the function. As a programmer, what you call your parameter is your decision to make. We can write the body of a function like this. The parameter "size" acts like a place holder for that value. Wherever we want to use that value we just refer to it as "size" instead of a number. Let's look at what happens when the function is called. Now when a user calls drawSquare they call it with a value like this. We say the value of 63 gets "passed" to the parameter of the function. The parameter acts like a container with a name on it. Whatever value is passed into the function is stored in that container. Inside the body of the function, you'll want to use the value stored in the parameter. To do so, you must refer to the value by its name. As the program is running, whenever the word "size" in this case is encountered, its replaced by the value stored in that parameter. Adding a parameter to our drawSquare allows us to generalize its functionality. In other words, our function is useful in an entire range of situations as opposed to just being useful in one particular instance. The result is a function that gives you much more flexibility and control without the need to create duplicated code. Once you've added a single parameter to your function, you might realize that there are multiple aspects of its functionality you'd like to generalize. For our square example, you might want to change the width or color of the line. To do this, you can simply add more parameters and separate them by commas. You can then use any of these parameter names in the body of your function. When calling your function, you'll need to include multiple values. One for each of the parameters, and each one separated by commas. Parameters are another example of how abstraction can be used to solve problems. When confronted with a group of related problems, we first work to identify patterns across all of them. In doing so, you might realize that using parameters will let you define a single function with general behavior that can solve any instance of the problem with one piece of code. This is a powerful skill that removes the need for creating duplicate code, and leads to programs that are easier to read, write, and maintain. Subtitles by the Amara.org community
