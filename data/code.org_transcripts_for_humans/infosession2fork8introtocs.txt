With timestamps:

00:03 - hi everyone uh we're here again for
00:06 - co.org second professional development
00:09 - session for educators uh and this is
00:11 - focused on our k through eight intro to
00:14 - computer science course thanks again for
00:16 - showing up my name is Katie aone I am
00:19 - the k through eight program manager for
00:22 - code.org and also today we have two
00:25 - other special guests with us uh we have
00:28 - other code.org employees
00:31 - hello hello so we have roxan and Brendan
00:34 - do you guys want to introduce what you
00:36 - do uh I'm Brendan I'm a software
00:38 - engineer here at code so I actually
00:40 - spend my days coding and I'm excited to
00:42 - trying out some of these tutorials for
00:44 - the first time I think this is a bit
00:46 - scar same for me and I do social media
00:48 - for code.org
00:51 - awesome so uh today's session will focus
00:56 - on the blockley lessons so our 20-hour
01:00 - course is a mix of the unplugged lessons
01:05 - and the self-guided lessons we have 20
01:07 - lessons and about half our unplugged
01:09 - lessons and half our self-guided
01:12 - lessons um the self-guided lessons don't
01:16 - come with lesson plans uh they're just
01:19 - different puzzles that users can follow
01:22 - um so your students will sit down and go
01:23 - through the whole stage and then when
01:25 - you move on to an unplugged lesson you
01:27 - can follow the lesson plans that are
01:29 - provided
01:30 - so these professional development
01:33 - sessions we're holding are a series of
01:35 - three um the session you're watching
01:37 - right now is session two out of three so
01:41 - last night at this professional
01:43 - development session one we focused on
01:45 - the unplugged lessons tonight we're
01:47 - focusing on the blockley puzzles and
01:51 - tomorrow we will be focusing on the
01:54 - online accounts system and teacher
01:58 - support um so today we'll be walking
02:02 - through a lot of the blockly puzzles and
02:04 - then we'll have a Q&A portion at the end
02:06 - so please feel free to ask questions
02:09 - during the whole entire session and
02:11 - we'll answer questions as at as they
02:14 - come up and then we'll also have a big
02:16 - block of Q&A at the end so I really
02:20 - encourage everyone to watch all three of
02:22 - these sessions they're meant to go
02:23 - together as a series and I especially
02:26 - encourage people to watch the first
02:28 - session about the unplugged
02:30 - unplugged lessons some teachers who run
02:33 - through the 20-hour course might be
02:35 - tempted to skip the unplugged lessons
02:37 - and just have students run through all
02:39 - the blockly puzzles but I think it's
02:42 - very important for students to really
02:45 - verbalize about computer science
02:47 - Concepts and and talk with other
02:49 - students and the unplug lessons are a
02:52 - great way for them to get hands-on
02:54 - experience with the logic of computer
02:56 - science through the unplugged
02:58 - lessons um also watching all three
03:01 - sessions is great because if you ask
03:04 - questions during the sessions during the
03:06 - third session we uh
03:08 - will uh raffle off a $50 donors choose
03:13 - gift card to one public school teacher
03:15 - who's
03:17 - watching so let's jump right into the
03:21 - blockley portion of what we're up to
03:24 - today so if everyone out there could
03:28 - open up another tab or window in their
03:30 - browser and go to learn. code.org we can
03:36 - walk through the blockly puzzles
03:38 - together um I've picked out a bunch that
03:40 - we'll be looking at together but first I
03:42 - just want to explain kind of the the
03:46 - environment of blockley and what it all
03:48 - looks like just so we're all on the same
03:51 - page um so I'm actually going to start a
03:54 - screen share here so we can look at it
03:57 - all together
04:11 - uh so we'll notice when we come to
04:12 - learn.co dog we can
04:15 - [Music]
04:16 - see um all 20 stages so each stage is
04:20 - designed to be about an hour so the
04:22 - first time that the block leas puzzles
04:25 - come up is in stage two so just so we
04:30 - can get a look at what blockley looks
04:33 - like um we'll open it up
04:36 - here
04:38 - so blockley is a visual programming
04:41 - language which means that we're going to
04:44 - attach blocks like this together to
04:47 - write a program so some people ask us
04:51 - why we use a visual programming language
04:54 - versus a text based programming language
04:56 - something like JavaScript or something
04:58 - you might be able to picture on a screen
05:00 - just lots of text all written together
05:04 - um when students first learn computer
05:07 - science they're up against a couple
05:09 - different
05:11 - things um one being learning the logic
05:15 - of computer science so learning about
05:17 - repeat loops and learning about if
05:18 - statements and they're also up against
05:21 - syntax so
05:23 - basically um how everything fits
05:26 - together you know should I put a
05:27 - semicolon here should I
05:30 - put um a space here what's what's this
05:34 - word supposed to be like so we use a
05:36 - visual programming language to start
05:38 - students off
05:40 - because they're not making all of those
05:42 - syntax errors you're basically just
05:45 - putting blocks together and you there's
05:49 - not a a lot of ways to make it wrong so
05:53 - you can really focus on learning the
05:54 - logic of it and once you get the logic
05:56 - of it down you can move on to a text Bas
05:58 - programming language
06:00 - and focus more on the syntax of it um so
06:06 - here on the left side of our screen we
06:08 - have the Maze and this is the part where
06:10 - our program will execute our program
06:12 - will run uh in the middle we have the
06:16 - toolbar the toolbox sorry um and these
06:19 - are all the
06:21 - options of commands that our program can
06:25 - do so we can have our bird move forward
06:28 - we can have our bird turn left we can
06:30 - have our bird turn right so when I want
06:33 - to make the bird do one of these things
06:36 - I can click and drag
06:38 - it out to the workspace and when you see
06:41 - that little yellow arrow appear that
06:44 - means it's going to connect to it and
06:47 - it'll connect onto
06:49 - the onto the um program that we're
06:54 - building um I actually only want the
06:56 - bird to move forward two spaces on this
06:59 - grid so I'm going to remove one of these
07:03 - and drag it to the
07:05 - trash
07:07 - so out on the workspace is the program
07:10 - we've created so the bird's going to
07:12 - move forward once and then it's going to
07:14 - move forward again so I'm going to come
07:16 - down here and press the Run program and
07:17 - let's see what
07:21 - happens all right and our Angry Bird got
07:24 - all the way to the pig um so it says
07:26 - congratulations you completed puzzle one
07:29 - uh um so that's just kind of a setup of
07:32 - what blockly looks like so we are going
07:36 - to delve into some of the more
07:38 - complicated puzzles um so if everyone
07:42 - wants to take a look
07:47 - at um it is Stage Nine puzzle
07:52 - five so if every wants everyone wants to
07:55 - go to Stage Nine puzzle five we can all
07:58 - look at it together
08:04 - um so on this level the instructions say
08:09 - help me fill in all these holes with
08:11 - five shovel fulls of dirt hint you can
08:14 - put a repeat block inside the well
08:18 - block so we want to make our farmer fill
08:21 - in all of these holes on the
08:24 - field so the way I would look at this is
08:29 - saying
08:31 - the farmer got to move ahead each spot
08:34 - on the grid until
08:36 - there's nothing left so this block
08:39 - that's already out on the workspace says
08:41 - while there's a path ahead so I think
08:43 - that's a good place to start so we can
08:45 - say while there's a path ahead what do
08:47 - we want this farmer to do
08:51 - so we can
08:55 - say
08:57 - repeat and I want this farmer to fill
09:04 - in the shovel fulls of dirt five
09:08 - times so right
09:11 - now uh it's going to fill in five times
09:15 - while there's a path ahead but we have
09:17 - to make sure that the farmer also moves
09:19 - forward while there's a path
09:23 - ahead so let's run this program and see
09:25 - what happens
09:29 - so the little waves coming out of the
09:31 - farmer are her checking if there is a
09:34 - path ahead and if there is she's doing
09:37 - whatever I put inside that
09:40 - command uh cool
09:42 - congratulations um so also something you
09:46 - can do with your students is pair
09:48 - programming which is having two students
09:51 - at the computer together which is what
09:52 - RX s and Brendan are going to help us
09:54 - out with today um so PA programming can
09:59 - help students retention in computer
10:01 - science it can help them really
10:03 - internalize the concepts more um so the
10:06 - way that pair programming works is that
10:09 - um the student who sits at the computer
10:12 - and controls the mouse is the
10:15 - driver and this person controls The
10:18 - Mouse and the keyboard um and the other
10:21 - student is called the Navigator and the
10:24 - Navigator makes suggestions and points
10:25 - out errors and asks questions and kind
10:27 - of looks at the big picture
10:29 - of what you're trying to solve um
10:35 - so I think we should have rxan and
10:39 - Brendan demo some pair programming for
10:41 - us so let's take a look at stage 9
10:45 - puzzle 7 which is also one of the farmer
10:50 - levels so
10:55 - let's we'll hand it over to them
11:00 - you have to turn your video on
11:08 - yeah do you want to just do it on my
11:10 - computer um yeah I also remind people
11:13 - they can ask questions time yes yeah um
11:17 - so please continue to ask questions um
11:19 - if anyone's any questions about anything
11:21 - or if you want to see a specific level
11:24 - demoed by us please uh just write in
11:27 - whatever level you'd like to see
11:30 - so let me just pull up that page on my
11:34 - computer and I'll just do it on
11:46 - this all right okay so Roan's going to
11:49 - drive okay and Brandon I guess I will
11:51 - navigate by giving ideas if I have any
11:54 - along the way really deep so what does
11:56 - it say fill it until the ground oh
11:59 - really deep hole we don't know how many
12:01 - shovel fulls of dirt it
12:03 - needs so you have to write a program
12:05 - that fills it until the ground is
12:10 - even all
12:12 - right so I have never tried this before
12:15 - I'm guessing we have to turn her around
12:19 - and that block is already on there turn
12:21 - right and then I think move forward
12:39 - we're learning how to drag a block right
12:41 - now on a computer we haven't used
12:44 - before um that is interesting um I'm not
12:48 - sure why it's doing that oh I think I
12:53 - got it to work all right hopefully we
12:55 - won't run into that again there we go um
13:01 - and then I think fill one is that it
13:04 - well we don't know how many how much
13:05 - soil it's going to take to fill this
13:07 - hole apparently we could try fill
13:12 - one okay there we
13:19 - go just moving the block into
13:23 - place let's just try it and see what
13:26 - happens so let's run the program
13:34 - uh so apparently we didn't fill it
13:36 - enough but we have a loop which keeps
13:39 - trying something while there is still a
13:43 - pile I guess that means while the hole
13:45 - is not filled so maybe instead of
13:47 - filling once we should use this
13:52 - instead we need Katie to teach us how to
13:54 - drag oh here we go so I guess we can
13:56 - fill once and then we can do this Loop
13:58 - which says while there was a pile do
14:00 - something yeah or maybe we don't even
14:02 - need to fill one you're right let's try
14:04 - dragging ah we dragged it away but it
14:06 - dragged both so let's let's split off
14:08 - the big loop and put that there and put
14:11 - s inside uh so it'll just repeat that
14:15 - yeah that sounds like a good
14:16 - idea should we try that yeah okay so
14:20 - we'll reset the program yep and then
14:22 - we'll run it
14:26 - again so now oh
14:30 - no try one or more of the blocks below
14:31 - to solve this puzzle while there is a
14:34 - hole I thought we did that but while
14:37 - there's a
14:38 - pile so we need to I think change where
14:42 - it says while there's pile the while
14:44 - there's a hole ah there's a difference
14:46 - so there must be different levels okay
14:49 - yeah should we try that yeah good
14:51 - thinking
14:53 - roxan I'm glad one of us knows how to
14:57 - program 10 9 8 seven this looks
14:59 - promising no I think she's
15:02 - stuck she did it oh okay so she kept
15:05 - filling the until there was no hole left
15:08 - anymore nice did we do it okay K yeah
15:10 - awesome job guys great uh thank you so
15:13 - one of the reasons I wanted to demo pair
15:15 - programming with roxan and Brendan is
15:17 - because they have less familiarity with
15:19 - the puzzles and I think it's a good way
15:22 - for edes educators to see how students
15:25 - might work together uh so
15:29 - when they had their their program up on
15:31 - the screen and they were trying to
15:34 - figure out you know why why wasn't their
15:36 - program working they were working
15:38 - together to figure out why um so let's
15:41 - look at a couple different puzzles as
15:44 - well
15:46 - um question okay what is the role of the
15:49 - driver so this is one of our questions
15:52 - um the role of the driver is to control
15:56 - the mouse and keyboard um
15:59 - and this might seem but not not in a way
16:02 - that they're just you know the robot
16:05 - performing whatever the Navigator wants
16:08 - um but the role of the driver is
16:12 - to um really kind of execute the vision
16:19 - of the Navigator while also
16:22 - providing
16:25 - um oh sorry um while also provid in kind
16:29 - of a way to move the puzzle forward
16:31 - maybe they'll they'll drag something out
16:33 - to the screen and the Navigator will say
16:35 - oh that's a great idea like good like
16:37 - let's let's build on
16:39 - that um all right so let's take a look
16:42 - at stage 11 puzzles five and
16:47 - six uh so I will just pull
16:51 - up stage 11 puzzles five and six
16:56 - so puzzle five of stage 11 is a way
17:02 - to get you introduced to the counter
17:05 - Loop so this puzzle asks you to draw
17:09 - squares with sides of 50 60 70 80 and
17:14 - 90
17:16 - so we already have one function that
17:18 - says draw a square of length 50 out on
17:21 - the workspace so I'm just going to add a
17:24 - bunch of different functions to this
17:27 - screen
17:29 - to make sure it's going to draw all the
17:31 - squares that we
17:41 - want so we want it to do 50
17:46 - 60
17:49 - 70
17:51 - 80 and
17:53 - 90 so let's see if that
17:57 - works make make our artist go a little
18:00 - faster
18:02 - awesome so it says congratulations you
18:05 - completed puzzle five so when we move on
18:07 - to puzzle
18:09 - six we won't watch this video um so the
18:15 - directions for this says okay this
18:16 - program will use a counter to draw the
18:18 - same squares as last time you want the
18:21 - squares to
18:22 - be you want the square to be the same
18:24 - size as the counter so use the counter
18:27 - block so so basically puzzle 6 is
18:30 - showing you that you can do the same
18:32 - thing as puzzle five but with fewer
18:34 - blocks so you don't have to keep
18:36 - dragging out that draw Square block
18:38 - every single time you can
18:41 - say the counter block repeats something
18:44 - over again and changes it a little bit
18:47 - every time so our block says count with
18:50 - counter from 50 to
18:54 - 90 by
18:56 - 10 so it's basically saying we're going
19:00 - to draw a square whose sides are length
19:03 - of 50 go up sorry I didn't want to move
19:06 - that uh then we'll go up by 10 draw a
19:11 - square whose lengths are side 60 go up
19:14 - another 10 and keep going up 10 until
19:16 - you get to 90 so under variables I'm
19:20 - just going to drag this counter
19:24 - variable into the length slot because I
19:26 - don't want it to draw just a a number
19:29 - length I don't want it to draw just one
19:30 - square whose length is 60 I wanted to
19:33 - draw all of these different squares so
19:36 - let run this
19:38 - program we make it go a little
19:42 - faster
19:44 - cool so we completed puzzle
19:47 - six all right um and let's see Brendan
19:53 - and roxan try another pair of
19:55 - programming um so let's see them do a
19:59 - stage 13 puzzle
20:02 - 4 let me pull that
20:16 - up okay stage 13 puzzle
20:22 - four all right this is a new another
20:25 - farmer
20:26 - level okay we're going to step in
20:28 - Brendan will drive this time and I'll
20:31 - take a look at what he's
20:33 - doing so Define a new function that
20:36 - remove seven shovel holes so it seems
20:39 - like this time we want to remove and not
20:41 - fill a
20:43 - hole this is my first time ever writing
20:45 - a function that would be
20:47 - interesting then use it to write a
20:49 - program that helps me remove all the
20:51 - piles so first we do the function that
20:53 - removes seven shovel fools then we'll do
20:55 - a program that uses that function let's
20:57 - see so
21:01 - what's a function is this green thing
21:02 - here possibly a function it is so these
21:04 - are function definitions with the blue
21:08 - uh the blue stars in the corner are
21:09 - function definitions okay so this Phil
21:11 - five function is just given here as an
21:14 - example and and the goal of this puzzle
21:17 - is to fill in the you want to define the
21:21 - remove seven function and then use it to
21:24 - make sure the
21:25 - farmer wow okay this would be challenge
21:29 - so I guess what do you reckon we do
21:33 - roxan uh let's see okay well looks like
21:35 - we have three piles not
21:40 - seven we do yeah well each pile has this
21:43 - seven counter so that each pile has
21:46 - seven things of dirt in it oh I see I
21:48 - see okay so I guess this function here
21:50 - to remove seven it means it needs a loop
21:53 - that does something seven times and
21:55 - instead of filling it will moove right
21:57 - so I think that's the first step is it
21:58 - build a function first so I think we'll
22:01 - need a remove
22:04 - block and we'll probably need a loop
22:07 - around it first yeah so I guess we can
22:09 - copy the way Phil five does and we'll
22:11 - have a loop which repeats something X
22:14 - number of times so I guess seven okay so
22:18 - we do that we double click and then
22:21 - type seven and hit enter okay now we
22:25 - have a loop that does something seven
22:26 - times and where do we we find the under
22:29 - actions
22:32 - maybe uh good okay remove yes so remove
22:36 - one can we double click the one and just
22:38 - make it seven no apparently not that's
22:41 - what the repeat does I think you're
22:42 - right I was trying to look for a
22:43 - shortcut okay so now we have a function
22:45 - that does this remove seven things but
22:47 - we still have to uh make our farmer walk
22:50 - to the right place are they already
22:52 - start on one so how where how do we set
22:55 - up what the program starts with we have
22:57 - to define a program
22:59 - so we have actions move forward before
23:03 - everything I'm trying to look at where
23:05 - everything should we start try running
23:06 - the program and see what happens okay
23:09 - it's running oh look
23:11 - we're
23:13 - no so if I was a teacher walking around
23:16 - the room at this moment they might ask
23:18 - me a question on why is nothing
23:19 - happening when I run this program and
23:23 - that's a great question because the
23:24 - function definitions with the blue
23:26 - squares in the uh blue stars in the
23:28 - corner
23:29 - those are just the definitions you still
23:30 - have to call the function to make the
23:33 - farmer do anything so if you click on
23:36 - functions in the
23:38 - toolbox now you'll see your remove seven
23:41 - function and when you drag that out to
23:43 - the workspace your farmer will perform
23:45 - that function so we this is just known
23:48 - as remove seven and this block this is
23:51 - the there's a connection made between
23:52 - these two this is the function
23:54 - definition and that's the function
23:57 - that's calling the function okay so if I
23:59 - just put that there and run again it
24:00 - might do something yeah oh I just
24:02 - deleted it my bad okay we can try that I
24:05 - think we might need to move forward but
24:07 - that's just again I think you're right
24:09 - well we're on top of one pile of dirt so
24:11 - maybe something will happen for the
24:12 - first one but obviously not all oh look
24:14 - it just counted down to
24:18 - zero okay we've done our first one
24:20 - you're completely right roxan we need we
24:22 - need a bit more
24:24 - here so what do we need to do here I
24:27 - think since we start on a pile of dirt
24:30 - we should have the remove seven
24:33 - first and then a move forward and then
24:36 - we could repeat that yeah so it sounds
24:39 - like another loop there'll be a loop for
24:41 - the action that we do and the loop will
24:44 - be path ahead oh yeah while path ahead
24:46 - that sounds pretty
24:48 - solid well let's see while there's a
24:50 - path ahead remove seven of them uh let's
24:53 - reset first I think we still need to
24:54 - move forward oh yeah you're right we
24:56 - totally need to move forward we remove
24:57 - seven first and then we move forward
25:00 - after that I put both of those in
25:04 - the so we have remove seven and a move
25:07 - forward and it keeps going well there's
25:09 - path ahead I don't know if there might
25:10 - always be path ahead but I guess we can
25:12 - try running and see what happens so
25:15 - let's run our
25:17 - program
25:19 - okay first one oh you know what we
25:21 - totally forgot to turn
25:23 - around okay
25:28 - so let's reset so we see where we start
25:31 - and clearly we need to move forward and
25:34 - then turn left and then move forward
25:38 - again onto the next pile of
25:46 - dirt how's
25:48 - that I'm finding it really nice as the
25:51 - driver with my hand on the mouse is I
25:52 - lose perspective it's really nice to
25:53 - have someone next to me who's watching
25:55 - what I'm doing and has like a good
25:57 - perspective on what to do
25:59 - next so off we
26:05 - go okay this looks promising H I think
26:09 - they're going to turn around the circle
26:11 - oh yeah we need a turn right yeah I
26:15 - think after the move forward interesting
26:18 - so that she'll go in the zigzag right so
26:21 - oops
26:22 - [Music]
26:25 - uh so what happens they they we removed
26:27 - seven
26:29 - they move forward turn left move forward
26:31 - again they're on a pile of dirt we'll
26:32 - need to remove seven again at that point
26:36 - no because sometimes they go forward and
26:38 - they they kind of
26:40 - zigzag Katie as a teacher do you want to
26:42 - step in here with any advice uh well I
26:45 - would say well so what
26:48 - happened last time she got to the second
26:50 - pile of dirt oh she just needs to turn
26:52 - right again so we look the same as we
26:54 - did sorry I totally
26:56 - right this is good to have so many
26:58 - eyeballs on the same problem yeah and
27:00 - it's nice that you can run the program
27:02 - and then start it over so we can just
27:04 - see where we're
27:10 - at I'm feeling good about
27:14 - this
27:18 - WOW
27:22 - cool nice work a happy job that was
27:26 - great that was a tough one you did great
27:28 - on that um
27:31 - so uh as the educator role in this
27:35 - scenario um I was trying to ask
27:37 - prompting questions instead of just
27:39 - giving them the answers I asked them a
27:41 - question and it kind of prompted in
27:43 - Brendan's mind oh yeah I should should
27:45 - be turning right I should be going that
27:47 - way um and also in PA programming you
27:51 - have the Navigator and the driver and
27:52 - you have them switch every once in a
27:54 - while so depending on your classroom
27:56 - setting you might want to have them
27:57 - switch every 10 minutes or kind of like
28:00 - once um once in a classroom
28:03 - period
28:05 - um question uh we have another question
28:08 - it says will there be more debugging
28:10 - levels added throughout the course like
28:12 - the final level that really helped my
28:14 - students figure out how to debug their
28:16 - own problems um we might have more
28:20 - debugging levels in the courses that
28:22 - we're um probably going to be releasing
28:25 - in the summer or fall um I think they
28:28 - are really helpful for students and it's
28:30 - really great to know feedback that
28:32 - educators are also finding that they're
28:34 - helpful for their students um so we'll
28:35 - definitely take that into account while
28:38 - we're creating our new courses go ahead
28:41 - a question what's a debugging uh level
28:43 - uh I'm actually gonna have you um do a
28:45 - debugging level soon so you'll see what
28:48 - they are okay
28:50 - okay
28:52 - um great so there's
28:55 - currently uh only one debugging stage in
28:58 - this 20 hour um course but that's that's
29:02 - great feedback to know that you guys
29:04 - want more um so let's look just at a
29:07 - couple more puzzles
29:10 - um let's look at uh Stage 15 puzzle
29:17 - six um we'll just look at a couple more
29:20 - puzzles because I want to save the bulk
29:22 - of the time for Q&A because I know we
29:23 - had a bunch of questions we didn't get
29:25 - to answer last night as well um so me
29:28 - pull up Stage 15 puzzle
29:47 - 6
29:49 - so the directions in this level say
29:53 - using draw Square as an
29:55 - example add an input named length to
29:58 - draw a triangle then draw triangles in
30:01 - different
30:02 - sizes
30:04 - so um the input to functions basically
30:09 - say that I can draw a certain I can I
30:13 - can perform a certain function and make
30:14 - it a little different each time so I can
30:17 - draw a triangle but I can have them be
30:19 - different sizes
30:21 - so I to create an input for your
30:25 - function you click on the blue
30:29 - star and you drag input name into
30:33 - input and then we write write what we
30:36 - want our input name to be I'm going to
30:38 - make it be length I'll hit enter Then to
30:42 - close out of this little menu I'll click
30:43 - the blue star
30:46 - again
30:49 - so now to call this function
30:54 - with an input I'll drag out
31:00 - my draw triangle function with length
31:02 - I'll drag out two of them because I want
31:04 - to draw two
31:05 - triangles and I will
31:11 - say I want
31:15 - to I actually know that this first one
31:20 - is length of
31:22 - 100 I think the second one is length of
31:25 - 200 so we'll just copy
31:36 - that and also what we're going to have
31:38 - to do here is
31:40 - that we're
31:43 - [Music]
31:45 - um we're actually going to say move
31:47 - forward by whatever length we have set
31:51 - in our input so we'll drag away this
31:54 - number block
31:58 - and drag in a length block
32:01 - here so let's run this program see what
32:07 - happens oh here's a chance for me to
32:09 - debug I didn't do this right okay so um
32:14 - so we have our first draw triangle
32:17 - function with length 100 and then I said
32:19 - just draw this same one in that same
32:23 - spot that he ended up in so I actually
32:25 - want him to move forward
32:29 - 100 pixels in between those
32:34 - functions so let's reset and try that
32:40 - again
32:41 - okay congratulations okay um and let's
32:46 - see roxan and Brendan try one more level
32:49 - one of the debugging levels actually um
32:52 - so let's look at stage 17 puzzle
32:55 - Seven's some more questions oh
32:59 - okay okay um so the debugging levels are
33:03 - set up in
33:05 - that there's a goal for your program to
33:10 - complete and you have pre-written code
33:13 - that is close but not right so you have
33:16 - to identify what's wrong with the code
33:19 - and make it work
33:22 - so take a look at this one so what
33:25 - should I do to help me remove all the
33:31 - piles
33:32 - okay well the first step of debugging is
33:35 - always to run the program well it should
33:36 - be analyzed the program it's always it's
33:39 - great to just run the program first and
33:41 - see what's going wrong especially
33:43 - because this system is so
33:48 - visual looks good so
33:51 - far using all the necessary types of
33:54 - blocks but we should try using them more
33:57 - of them so we we're just missing out on
33:59 - something extra so what happened the
34:01 - person she walked along she turned too
34:04 - soon she
34:05 - did so what does a program do talk us
34:08 - through it
34:09 - roxan
34:11 - well she needs to go forward and then
34:16 - remove piles
34:18 - um and then turn to go around the whole
34:21 - Square so let's look at the definition
34:25 - for removing the entire Square Square
34:31 - um well first of all the inside loop
34:35 - says repeat two times to move forward
34:37 - and I think we
34:40 - need four or three I'm not sure if the
34:45 - turn counts but I
34:48 - would yeah I I would think it should be
34:50 - four times not two times I think you're
34:53 - right yeah is removing where repeat well
34:55 - let's see let's try it out so you want
34:56 - to remove the um
35:02 - CH I think repeat four times seems right
35:05 - because there's four sides to the square
35:08 - and the left turn seems right so let's
35:10 - try
35:15 - that
35:18 - ah you saw she was kind of bumping up
35:20 - against the edge of the of the field
35:22 - it's almost like she was trying to walk
35:23 - too far this time so is it three let's
35:27 - go question see I think the way this
35:28 - program works is we have two Loops we
35:30 - have an outer loop and an inner loop the
35:33 - inner loop is the one we do repeatedly
35:35 - for starters and it moves forward and
35:37 - removes a pile of dirt then we go back
35:40 - move forward remove another pile of dirt
35:42 - I think what that's saying is that's
35:43 - each time she steps forwards then she
35:45 - gets done with that then she turns left
35:48 - and then does starts off again up
35:49 - another Edge so it sounds like yeah you
35:52 - only want to walk three steps forward
35:54 - each time and that should take her to
35:56 - the next corner to turn yeah so we
35:58 - change that to a three I think
36:02 - so starting at one
36:05 - spot so now she should walk forward one
36:08 - two three times then turn okay
36:12 - good this is really the first time we're
36:14 - seeing these puzzles so this is slightly
36:16 - terrifying it's it's worked out great
36:18 - it's challenging but as long as you go
36:20 - step by step we did it all right
36:23 - congratulations excellent I do want to
36:25 - thank our amazing volunteers uh for
36:27 - helping us modeling pair programming uh
36:29 - it's important to see and I think uh
36:34 - seeing them work out problems is are are
36:36 - ways that you can tell students to work
36:39 - with each other you know they were
36:40 - working together there was lots of great
36:41 - teamwork they weren't shooting down
36:43 - others ideas um so I think that was
36:46 - great to
36:47 - see so um I think I will stop my screen
36:52 - share at the moment
36:56 - and uh um take some more Q&A
37:01 - questions so what else do we have
37:07 - roxan uh in the Futures will teachers be
37:10 - able to see how many tries or runs it
37:13 - takes the student to complete each level
37:16 - you know that's not something we
37:17 - currently have set up um but it is
37:22 - something that we could include in the
37:23 - dashboard um if you have suggestions to
37:26 - make to any of our materials you can
37:29 - write them in our forums which I have
37:32 - posted I links posted to both of our
37:34 - forums in the event
37:37 - details on the event page for these PD
37:41 - sessions um so you can go to forums.
37:43 - code.org or you can find our uservoice
37:47 - forum and the the link is um on the
37:51 - event page for this I add something yes
37:55 - of course I just one thing to add we do
37:58 - track um when students drop out of a
38:01 - level so if they keep trying and just
38:04 - abandon the whole tutorial to begin with
38:07 - so that is helping us improve levels if
38:09 - there's one that constantly students are
38:11 - getting stuck on and they're just giving
38:13 - up then that's something we want to
38:15 - improve so um we are
38:18 - tracking that um as far as like how many
38:20 - students are completing each level yeah
38:23 - so that's something we're doing on an
38:24 - organization wide level but if if
38:26 - teachers want to see specifically how
38:28 - many tries it takes a specific student
38:30 - to do each level we don't track that yet
38:33 - um but we we could definitely do that in
38:34 - the future
38:40 - um
38:41 - okay some questions from
38:44 - Rhonda um still uncertain about the
38:47 - struction of lesson two is there a
38:49 - teacher guide for it so currently the
38:52 - way it works is that we have lesson
38:54 - plans for the unplugged lesson
38:57 - so the offline lessons that don't use
38:59 - the use of a computer so when you look
39:03 - on learn. code.org it's um there're the
39:07 - stages that only have seemingly there
39:11 - there's just one section so it's stage
39:13 - one stage three stage four those all
39:16 - have lesson plans and they don't include
39:18 - the use of a computer for a student so
39:22 - the stages that are the online
39:25 - self-guided puzzles that we've been
39:26 - looking at
39:28 - those don't include a lesson plan for
39:30 - teachers because they're intended for
39:31 - students to sit down at the beginning of
39:34 - whenever you're going to do that lesson
39:35 - students sit down at the computer and
39:37 - they run through all of the puzzles them
39:40 - themselves themselves they have videos
39:42 - that help them go along they can pair
39:44 - program with other students but there's
39:46 - no specific teacher guide on how to
39:50 - introduce the lesson or
39:53 - maybe common mistakes that students
39:55 - might make so those are things those are
39:58 - materials we're um considering
40:00 - developing the F in the future for our
40:02 - future courses um but it there are
40:04 - current there's currently no teacher
40:06 - lesson plan for the online lessons
40:09 - they're just for students to run
40:11 - through all right there another one from
40:14 - Christina oh here is something that I
40:17 - would um love Brendan to shed some light
40:19 - on because Brendan is one of our uh
40:22 - programmers here at code.org so maybe
40:24 - this is a question he can help us out
40:26 - with sure the question is is input a
40:30 - real world programming term or is it
40:32 - variable I'm confused at the vocab here
40:34 - and how to clarify that for my students
40:36 - it's a really good question um I think
40:38 - we do think of parameters uh as being
40:41 - the formal word um well depends we have
40:43 - three things we have variables which are
40:45 - the values that we um keep track of like
40:48 - counter in an early example when you
40:50 - have a function when you give an
40:52 - argument or we the things we pass into a
40:54 - function are often called either an
40:55 - argument or a parameter I think in in
40:58 - our case we're using input as the input
41:00 - to a function is that right input or
41:03 - parameter or parameter okay yeah so
41:05 - there are kind of three words that get
41:07 - used in different ways um real world
41:09 - programming I think we talk about uh
41:12 - parameters and arguments to a function
41:15 - okay um maybe that's something we want
41:17 - to think about how we communicate it's a
41:19 - good question okay um we refer to them
41:23 - in the videos as functions with
41:25 - parameters um and we use input in the
41:29 - blocks but we don't use the word
41:31 - arguments in the blockly language
41:36 - um I mean so a parameter is a kind of a
41:40 - variable right um yes it's a you pass it
41:43 - into the function and then it's
41:44 - available to the function as a variable
41:46 - as you use the function I actually don't
41:48 - remember where inputs used in our
41:50 - tutorials so maybe you'll remind me how
41:52 - we use the word input um it was the on
41:55 - the um basically it's a it's a parameter
41:58 - for a function Okay Okay so we've just
42:00 - made a a friendlier word to than
42:03 - parameter I guess
42:05 - yep uh let's see let's take a look at
42:08 - some of these other questions
42:11 - um here's a great question um it says
42:14 - should we as teachers go through the
42:16 - courses before the students smiley face
42:19 - um so I would say
42:22 - that it would be best to go through the
42:26 - student go through the courses go
42:28 - through the course before the
42:30 - students
42:32 - um if that's not possible to go through
42:35 - the entire course before the students I
42:39 - think it would be helpful to at least
42:41 - keep a you know keep a couple lessons
42:44 - ahead of the students so you know if
42:47 - they ask you about a certain puzzle it's
42:50 - helpful that if you're going over to
42:52 - help him in the classroom you can say oh
42:53 - yeah I do know this puzzle so it
42:57 - it it will at least be easier to answer
43:00 - their questions if you've done it before
43:03 - um some
43:05 - other things we might think about when
43:08 - answering debugging questions with
43:10 - students are that um I've seen this in
43:12 - schools is that some students might be
43:15 - tempted to just keep adding blocks to
43:16 - their program um so you'll help a
43:19 - student in a classroom that you know has
43:22 - 30 blocks out on their workspace and
43:24 - it's just a little overwhelming so at
43:27 - that point I might ask students to clear
43:29 - their workspace and think about the
43:31 - logic behind the problem um rather than
43:34 - just keeping adding blocks um basically
43:38 - you can ask students what you would want
43:42 - your program to do explain it in words
43:44 - first so you can either have them write
43:46 - it down or um if you prep beforehand you
43:54 - can uh basically like print out
43:58 - or Draw out what the blocks look like so
44:01 - you could have little pieces of paper
44:02 - that have each different command on a
44:05 - little piece of paper and you could have
44:07 - students rearrange the pieces of paper
44:09 - to figure out and practice
44:14 - um what they might want their program to
44:16 - look like before they actually do it on
44:19 - the
44:22 - computer um are there other questions we
44:25 - can answer here or can weuse possibly go
44:27 - and answer some of the questions from
44:29 - the first sessions hangout that we
44:31 - didn't get to
44:33 - sure just few minutes and great anyone
44:36 - watching feel free to post more
44:38 - questions below in the last 15 minutes
44:41 - we
44:43 - have great
44:51 - um so yeah definitely if students are
44:54 - trying to debug their problems or work
44:56 - them out with work them out with a PA
44:58 - programming partner
45:00 - um asking them to like take a step back
45:04 - and think about what the what their
45:06 - program should be doing you know what
45:07 - the bird should be doing to get to the
45:09 - pig and that can help with pattern
45:12 - recognition saying you know if you want
45:15 - the bird to move forward five times
45:17 - should you just drag out the move
45:19 - forward block five times or are there
45:22 - patterns you're seeing in that you could
45:25 - have it just repeat
45:27 - five times and put a move forward block
45:29 - inside
45:32 - that um so we're just checking on some
45:35 - of the questions that came from the
45:38 - first PD session to see if we can answer
45:40 - some of those if there are
45:43 - any answered any
45:45 - of uh We've answered some of
45:48 - them oh it doesn't show you which ones
45:51 - you've already
45:55 - answered see
46:06 - um oh these were just the ones that we
46:09 - answered actually I don't know if we can
46:10 - see the the raw questions from last
46:12 - night that's okay
46:15 - um few different questions coming
46:18 - in there's one
46:21 - uh
46:22 - Brendan um could you explain the
46:26 - difference between JavaScript and HTML
46:29 - sure think you wonderand back into a
46:30 - camera view so all web pages use HTML
46:35 - stands for hypertext markup language and
46:37 - if you just go to a web page and say
46:38 - view Source you will see um HTML it's
46:41 - pretty much just the text that appears
46:43 - on the page with these little tags
46:45 - around it which tell it to do different
46:46 - things like make this a block and move
46:48 - this over here and make this a heading
46:50 - up here and make this order down here
46:52 - that's just a static piece of text
46:54 - JavaScript is actually a little
46:56 - programming language that you can then
46:57 - add to the web page and sometimes you'll
46:59 - see some little script tags in the page
47:02 - or sometimes there'll be other files
47:03 - that get loaded and they're full of
47:05 - JavaScript and that's actually a
47:06 - programming language with things like if
47:08 - statements while statements Loops code
47:12 - and JavaScript can do all sorts of
47:13 - things that only code can do it can say
47:15 - if the user clicks this button then
47:17 - change this text on the page or if they
47:20 - click here then go ask a server for some
47:22 - information and bring it back again so
47:24 - all web pages have HTML and optionally
47:26 - they can include some JavaScript which
47:28 - is the programming language that kind of
47:30 - supplements that so do you consider HTML
47:33 - code it's interesting it is a form of
47:36 - code in that it's instructions for a
47:38 - computer you're telling the computer
47:39 - what to do um and the computer does what
47:42 - it does uh presents it the thing that
47:45 - JavaScript adds is all the uh instead of
47:47 - just being um a flat kind of
47:49 - presentation JavaScript then has control
47:51 - flow so you can say if this then do this
47:53 - do this five times so HTML is a form of
47:57 - code and then JavaScript becomes a full
47:59 - programming language which does a bit
48:00 - more that's my opinion great that's an
48:03 - awesome
48:07 - answer
48:09 - um
48:10 - so also um we have a question that says
48:15 - I would like to see levels 15 seven
48:18 - eight and nine um so let me start screen
48:21 - sharing we can take a look at those
48:23 - levels too
48:37 - um let's see my screen share button is
48:40 - not working is yours working
48:57 - okay um we actually ran into this issue
49:01 - last night we can figure this out later
49:03 - um let's
49:06 - see is it possible to
49:10 - get the puzzle up and just show
49:13 - it oh yeah let's do
49:16 - that
49:22 - okay um so it would
49:25 - be uh 80
49:36 - 8 does that even
49:41 - work
49:43 - um so the screen share button is not
49:47 - working at the moment um so I know this
49:51 - is tough to see um but I can I can talk
49:54 - us through it um if everyone wants to
49:56 - look at it on their
49:58 - screen let me just make this window a
50:00 - little
50:00 - wider uh
50:03 - so puzzle Seven On Stage 15 says add an
50:08 - input named length to draw a house and
50:11 - build a big house for the elephant with
50:13 - edges 150 pixels long so we have a bunch
50:17 - of definitions out on our workspace one
50:19 - of them is draw a square one of them is
50:21 - draws triangle and then we have this new
50:23 - function called Draw to draw a house
50:28 - So the instructions ask us to add an
50:31 - input that says length so we can draw
50:35 - houses with different lengths so I'm
50:38 - going to add an input by clicking on the
50:41 - blue blue star I'm going to add input
50:44 - name of
50:47 - length I'm going to spell it
50:51 - right I'm going to click on the blue
50:53 - star to
50:56 - push it away
50:59 - um and now I'm going to
51:06 - say I'm going to drag out our draw
51:11 - house and I want the length to
51:14 - be
51:21 - 150 so I also am thinking about
51:31 - if it's drawing it's first drawing this
51:34 - square and then it's drawing this
51:36 - triangle on top some of these other
51:39 - numbers might have to change as well so
51:43 - we want it to move forward by whatever
51:46 - length it's
51:47 - drawing so I'm going to put that length
51:50 - variable in there and then I also wanted
51:54 - to draw a half draws draw the square and
51:58 - draw the triangle with with whatever
52:00 - length I'm going to tell it to so I'm
52:02 - going to put the variables length in
52:04 - both of those slots as
52:10 - well so when I hit run
52:18 - program it says
52:21 - congratulations
52:23 - um is there any way we can see if
52:27 - is there any way if people can let us
52:30 - know via the question and answer app if
52:31 - you can see anything of what's happening
52:33 - on the the
52:35 - screen
52:39 - um let's
52:41 - see um well let me just quickly go over
52:45 - puzzles eight and nine I'll just explain
52:47 - them um
52:50 - so here it says modify the draw House
52:54 - Pro
52:55 - uh blocks from the previous puzzle um
52:59 - something weird happened in that I don't
53:02 - see
53:03 - the blocks from the previous puzzle but
53:05 - what I would do
53:07 - is I
53:14 - would
53:18 - um I'm actually G to go back to the
53:21 - previous
53:23 - puzzle do you think it'll let me copy
53:25 - this
53:32 - no
53:36 - um so what I would do is I would create
53:40 - that draw house
53:42 - function and basically what you want to
53:45 - do is you want to get the
53:48 - artist to be in the right position to uh
53:52 - start the next house so when the zombie
53:58 - artist performs the first draw house
54:00 - function he ends up in a certain spot
54:03 - which is um at the top or at the top of
54:07 - the square in the top leftand corner of
54:09 - the square so basically you want to have
54:12 - the zombie turn enough so that it can
54:17 - travel across the top edge of the square
54:20 - you want it to make a 90 degree turn and
54:23 - travel down to the bottom right hand
54:26 - corner of the square and then turn again
54:30 - so it's facing the right direction to
54:32 - start the new house
54:34 - function um so that's how I would solve
54:36 - that
54:37 - puzzle and then for puzzle
54:41 - nine um it's basically just drawing a
54:44 - house function uh recreating the draw
54:46 - house
54:47 - function from scratch and
54:50 - then
54:52 - um doing the same kind of getting that
54:56 - to be in the right starting place to
54:59 - start the ne next house
55:03 - function all right so I think we have
55:06 - time for a couple more questions let's
55:08 - see what
55:11 - is
55:13 - um you have the or
55:19 - okay questions
55:28 - um some of the solution Pages um one of
55:32 - our questions says some of the solution
55:33 - Pages aren't available especially for
55:35 - level 15 um that's something one of our
55:38 - Engineers is actually working on right
55:40 - now to make sure that the all the
55:42 - solutions are available for the teachers
55:44 - um
55:46 - so that's something we're working on and
55:49 - hopefully we'll have fixed soon
56:00 - um so we also have a question we have
56:03 - some
56:03 - more uh programming language questions
56:07 - um one of our questions
56:12 - says uh are there other languages used
56:17 - in HTML than JavaScript in
56:21 - browsers or maybe other questions other
56:24 - languages used in browsers other than
56:27 - JavaScript yeah um when you have a we
56:29 - can all be on camera at the same time um
56:31 - when you have a web browser with HTML
56:34 - for the page the only real programming
56:36 - language that can run in the page is
56:38 - Javascript that's pretty much just the
56:40 - standard um there are some other
56:41 - languages you can write in which convert
56:44 - themselves into JavaScript before you
56:46 - get see the website um and of course on
56:48 - the server s you can have all these
56:50 - different languages that generate the
56:51 - web pages and you can have them running
56:53 - a web pages can talk to the server and
56:55 - that's where you have your jav
56:57 - PHP uh nodejs which is Javascript on the
57:00 - server so there are a lot of other
57:01 - languages out there but in the browser
57:03 - itself at the end of the day it's really
57:06 - JavaScript great thank
57:10 - you
57:15 - um I can answer really fast if you're
57:17 - like difference between XML and HTML um
57:21 - they look very similar XML is more
57:23 - general purpose but they both have the
57:25 - same bracket tags and close tags
57:27 - everywhere so they look very similar
57:29 - they have a very related history to each
57:31 - other XML is just more general purpose
57:33 - HTML is just for browsers all right
57:38 - great um I do you have an answer to that
57:40 - one I have one quick thought the
57:43 - question was which which IDE would you
57:44 - suggest for programming in Java language
57:46 - I don't have an answer there's a ton of
57:47 - them if anyone doesn't know an IDE is an
57:50 - integrated development environment so
57:51 - it's a place where you have a text
57:53 - editor you can write your program then
57:55 - you can run your program debug it and do
57:57 - everything in this one environment um
58:00 - but I would just start googling away and
58:01 - find forums where people get together
58:03 - and talk about them and people list the
58:05 - pros and cons of all of them um Google
58:07 - and search engines in general Google and
58:10 - being and all the others they're all
58:11 - your friends here so it's just a matter
58:13 - of doing a lot of searching and finding
58:14 - a community of people who have good
58:16 - advice is there one that you like I
58:18 - don't program in Java anymore I think
58:19 - the world's changing I used to do it
58:22 - okay great um and let's actually just
58:26 - uh answer one last question
58:30 - um uh we have a question about um
58:33 - someone looking forward to the the
58:34 - second level of Middle School curriculum
58:36 - is this still on schedule to be
58:38 - available prior to August 2014 um we are
58:42 - hoping to have our middle school
58:45 - specific courses available
58:48 - [Music]
58:49 - um
58:52 - probably I would say sometime for fall
58:56 - 2014 I I can't give an exact date on
58:59 - exactly when it's going to happen um but
59:02 - we should have it ready for the
59:04 - fall um so it is getting towards six
59:07 - o'clock so I want to respect everyone's
59:09 - time um thank you so much for joining us
59:11 - and I want to give one last thanks to
59:13 - roxan and Brendan who are such great
59:15 - volunteers I'll give them a round of
59:17 - applause
59:18 - um yes so please uh tune in to our last
59:24 - session in our series of three tomorrow
59:26 - at 5:00 p.m. Pacific time so January
59:30 - 29th Wednesday so thanks again for
59:33 - tuning in um if you still have more
59:35 - questions or want to more follow up on
59:39 - these things please visit our forums so
59:41 - forums. c.org
59:43 - um and the Forum links are also posted
59:47 - in the event page for this event
59:52 - so um thank you again for coming and
59:56 - we'll see everybody tomorrow have a
59:58 - great night

Cleaned transcript:

hi everyone uh we're here again for co.org second professional development session for educators uh and this is focused on our k through eight intro to computer science course thanks again for showing up my name is Katie aone I am the k through eight program manager for code.org and also today we have two other special guests with us uh we have other code.org employees hello hello so we have roxan and Brendan do you guys want to introduce what you do uh I'm Brendan I'm a software engineer here at code so I actually spend my days coding and I'm excited to trying out some of these tutorials for the first time I think this is a bit scar same for me and I do social media for code.org awesome so uh today's session will focus on the blockley lessons so our 20hour course is a mix of the unplugged lessons and the selfguided lessons we have 20 lessons and about half our unplugged lessons and half our selfguided lessons um the selfguided lessons don't come with lesson plans uh they're just different puzzles that users can follow um so your students will sit down and go through the whole stage and then when you move on to an unplugged lesson you can follow the lesson plans that are provided so these professional development sessions we're holding are a series of three um the session you're watching right now is session two out of three so last night at this professional development session one we focused on the unplugged lessons tonight we're focusing on the blockley puzzles and tomorrow we will be focusing on the online accounts system and teacher support um so today we'll be walking through a lot of the blockly puzzles and then we'll have a Q&A portion at the end so please feel free to ask questions during the whole entire session and we'll answer questions as at as they come up and then we'll also have a big block of Q&A at the end so I really encourage everyone to watch all three of these sessions they're meant to go together as a series and I especially encourage people to watch the first session about the unplugged unplugged lessons some teachers who run through the 20hour course might be tempted to skip the unplugged lessons and just have students run through all the blockly puzzles but I think it's very important for students to really verbalize about computer science Concepts and and talk with other students and the unplug lessons are a great way for them to get handson experience with the logic of computer science through the unplugged lessons um also watching all three sessions is great because if you ask questions during the sessions during the third session we uh will uh raffle off a $50 donors choose gift card to one public school teacher who's watching so let's jump right into the blockley portion of what we're up to today so if everyone out there could open up another tab or window in their browser and go to learn. code.org we can walk through the blockly puzzles together um I've picked out a bunch that we'll be looking at together but first I just want to explain kind of the the environment of blockley and what it all looks like just so we're all on the same page um so I'm actually going to start a screen share here so we can look at it all together uh so we'll notice when we come to learn.co dog we can see um all 20 stages so each stage is designed to be about an hour so the first time that the block leas puzzles come up is in stage two so just so we can get a look at what blockley looks like um we'll open it up here so blockley is a visual programming language which means that we're going to attach blocks like this together to write a program so some people ask us why we use a visual programming language versus a text based programming language something like JavaScript or something you might be able to picture on a screen just lots of text all written together um when students first learn computer science they're up against a couple different things um one being learning the logic of computer science so learning about repeat loops and learning about if statements and they're also up against syntax so basically um how everything fits together you know should I put a semicolon here should I put um a space here what's what's this word supposed to be like so we use a visual programming language to start students off because they're not making all of those syntax errors you're basically just putting blocks together and you there's not a a lot of ways to make it wrong so you can really focus on learning the logic of it and once you get the logic of it down you can move on to a text Bas programming language and focus more on the syntax of it um so here on the left side of our screen we have the Maze and this is the part where our program will execute our program will run uh in the middle we have the toolbar the toolbox sorry um and these are all the options of commands that our program can do so we can have our bird move forward we can have our bird turn left we can have our bird turn right so when I want to make the bird do one of these things I can click and drag it out to the workspace and when you see that little yellow arrow appear that means it's going to connect to it and it'll connect onto the onto the um program that we're building um I actually only want the bird to move forward two spaces on this grid so I'm going to remove one of these and drag it to the trash so out on the workspace is the program we've created so the bird's going to move forward once and then it's going to move forward again so I'm going to come down here and press the Run program and let's see what happens all right and our Angry Bird got all the way to the pig um so it says congratulations you completed puzzle one uh um so that's just kind of a setup of what blockly looks like so we are going to delve into some of the more complicated puzzles um so if everyone wants to take a look at um it is Stage Nine puzzle five so if every wants everyone wants to go to Stage Nine puzzle five we can all look at it together um so on this level the instructions say help me fill in all these holes with five shovel fulls of dirt hint you can put a repeat block inside the well block so we want to make our farmer fill in all of these holes on the field so the way I would look at this is saying the farmer got to move ahead each spot on the grid until there's nothing left so this block that's already out on the workspace says while there's a path ahead so I think that's a good place to start so we can say while there's a path ahead what do we want this farmer to do so we can say repeat and I want this farmer to fill in the shovel fulls of dirt five times so right now uh it's going to fill in five times while there's a path ahead but we have to make sure that the farmer also moves forward while there's a path ahead so let's run this program and see what happens so the little waves coming out of the farmer are her checking if there is a path ahead and if there is she's doing whatever I put inside that command uh cool congratulations um so also something you can do with your students is pair programming which is having two students at the computer together which is what RX s and Brendan are going to help us out with today um so PA programming can help students retention in computer science it can help them really internalize the concepts more um so the way that pair programming works is that um the student who sits at the computer and controls the mouse is the driver and this person controls The Mouse and the keyboard um and the other student is called the Navigator and the Navigator makes suggestions and points out errors and asks questions and kind of looks at the big picture of what you're trying to solve um so I think we should have rxan and Brendan demo some pair programming for us so let's take a look at stage 9 puzzle 7 which is also one of the farmer levels so let's we'll hand it over to them you have to turn your video on yeah do you want to just do it on my computer um yeah I also remind people they can ask questions time yes yeah um so please continue to ask questions um if anyone's any questions about anything or if you want to see a specific level demoed by us please uh just write in whatever level you'd like to see so let me just pull up that page on my computer and I'll just do it on this all right okay so Roan's going to drive okay and Brandon I guess I will navigate by giving ideas if I have any along the way really deep so what does it say fill it until the ground oh really deep hole we don't know how many shovel fulls of dirt it needs so you have to write a program that fills it until the ground is even all right so I have never tried this before I'm guessing we have to turn her around and that block is already on there turn right and then I think move forward we're learning how to drag a block right now on a computer we haven't used before um that is interesting um I'm not sure why it's doing that oh I think I got it to work all right hopefully we won't run into that again there we go um and then I think fill one is that it well we don't know how many how much soil it's going to take to fill this hole apparently we could try fill one okay there we go just moving the block into place let's just try it and see what happens so let's run the program uh so apparently we didn't fill it enough but we have a loop which keeps trying something while there is still a pile I guess that means while the hole is not filled so maybe instead of filling once we should use this instead we need Katie to teach us how to drag oh here we go so I guess we can fill once and then we can do this Loop which says while there was a pile do something yeah or maybe we don't even need to fill one you're right let's try dragging ah we dragged it away but it dragged both so let's let's split off the big loop and put that there and put s inside uh so it'll just repeat that yeah that sounds like a good idea should we try that yeah okay so we'll reset the program yep and then we'll run it again so now oh no try one or more of the blocks below to solve this puzzle while there is a hole I thought we did that but while there's a pile so we need to I think change where it says while there's pile the while there's a hole ah there's a difference so there must be different levels okay yeah should we try that yeah good thinking roxan I'm glad one of us knows how to program 10 9 8 seven this looks promising no I think she's stuck she did it oh okay so she kept filling the until there was no hole left anymore nice did we do it okay K yeah awesome job guys great uh thank you so one of the reasons I wanted to demo pair programming with roxan and Brendan is because they have less familiarity with the puzzles and I think it's a good way for edes educators to see how students might work together uh so when they had their their program up on the screen and they were trying to figure out you know why why wasn't their program working they were working together to figure out why um so let's look at a couple different puzzles as well um question okay what is the role of the driver so this is one of our questions um the role of the driver is to control the mouse and keyboard um and this might seem but not not in a way that they're just you know the robot performing whatever the Navigator wants um but the role of the driver is to um really kind of execute the vision of the Navigator while also providing um oh sorry um while also provid in kind of a way to move the puzzle forward maybe they'll they'll drag something out to the screen and the Navigator will say oh that's a great idea like good like let's let's build on that um all right so let's take a look at stage 11 puzzles five and six uh so I will just pull up stage 11 puzzles five and six so puzzle five of stage 11 is a way to get you introduced to the counter Loop so this puzzle asks you to draw squares with sides of 50 60 70 80 and 90 so we already have one function that says draw a square of length 50 out on the workspace so I'm just going to add a bunch of different functions to this screen to make sure it's going to draw all the squares that we want so we want it to do 50 60 70 80 and 90 so let's see if that works make make our artist go a little faster awesome so it says congratulations you completed puzzle five so when we move on to puzzle six we won't watch this video um so the directions for this says okay this program will use a counter to draw the same squares as last time you want the squares to be you want the square to be the same size as the counter so use the counter block so so basically puzzle 6 is showing you that you can do the same thing as puzzle five but with fewer blocks so you don't have to keep dragging out that draw Square block every single time you can say the counter block repeats something over again and changes it a little bit every time so our block says count with counter from 50 to 90 by 10 so it's basically saying we're going to draw a square whose sides are length of 50 go up sorry I didn't want to move that uh then we'll go up by 10 draw a square whose lengths are side 60 go up another 10 and keep going up 10 until you get to 90 so under variables I'm just going to drag this counter variable into the length slot because I don't want it to draw just a a number length I don't want it to draw just one square whose length is 60 I wanted to draw all of these different squares so let run this program we make it go a little faster cool so we completed puzzle six all right um and let's see Brendan and roxan try another pair of programming um so let's see them do a stage 13 puzzle 4 let me pull that up okay stage 13 puzzle four all right this is a new another farmer level okay we're going to step in Brendan will drive this time and I'll take a look at what he's doing so Define a new function that remove seven shovel holes so it seems like this time we want to remove and not fill a hole this is my first time ever writing a function that would be interesting then use it to write a program that helps me remove all the piles so first we do the function that removes seven shovel fools then we'll do a program that uses that function let's see so what's a function is this green thing here possibly a function it is so these are function definitions with the blue uh the blue stars in the corner are function definitions okay so this Phil five function is just given here as an example and and the goal of this puzzle is to fill in the you want to define the remove seven function and then use it to make sure the farmer wow okay this would be challenge so I guess what do you reckon we do roxan uh let's see okay well looks like we have three piles not seven we do yeah well each pile has this seven counter so that each pile has seven things of dirt in it oh I see I see okay so I guess this function here to remove seven it means it needs a loop that does something seven times and instead of filling it will moove right so I think that's the first step is it build a function first so I think we'll need a remove block and we'll probably need a loop around it first yeah so I guess we can copy the way Phil five does and we'll have a loop which repeats something X number of times so I guess seven okay so we do that we double click and then type seven and hit enter okay now we have a loop that does something seven times and where do we we find the under actions maybe uh good okay remove yes so remove one can we double click the one and just make it seven no apparently not that's what the repeat does I think you're right I was trying to look for a shortcut okay so now we have a function that does this remove seven things but we still have to uh make our farmer walk to the right place are they already start on one so how where how do we set up what the program starts with we have to define a program so we have actions move forward before everything I'm trying to look at where everything should we start try running the program and see what happens okay it's running oh look we're no so if I was a teacher walking around the room at this moment they might ask me a question on why is nothing happening when I run this program and that's a great question because the function definitions with the blue squares in the uh blue stars in the corner those are just the definitions you still have to call the function to make the farmer do anything so if you click on functions in the toolbox now you'll see your remove seven function and when you drag that out to the workspace your farmer will perform that function so we this is just known as remove seven and this block this is the there's a connection made between these two this is the function definition and that's the function that's calling the function okay so if I just put that there and run again it might do something yeah oh I just deleted it my bad okay we can try that I think we might need to move forward but that's just again I think you're right well we're on top of one pile of dirt so maybe something will happen for the first one but obviously not all oh look it just counted down to zero okay we've done our first one you're completely right roxan we need we need a bit more here so what do we need to do here I think since we start on a pile of dirt we should have the remove seven first and then a move forward and then we could repeat that yeah so it sounds like another loop there'll be a loop for the action that we do and the loop will be path ahead oh yeah while path ahead that sounds pretty solid well let's see while there's a path ahead remove seven of them uh let's reset first I think we still need to move forward oh yeah you're right we totally need to move forward we remove seven first and then we move forward after that I put both of those in the so we have remove seven and a move forward and it keeps going well there's path ahead I don't know if there might always be path ahead but I guess we can try running and see what happens so let's run our program okay first one oh you know what we totally forgot to turn around okay so let's reset so we see where we start and clearly we need to move forward and then turn left and then move forward again onto the next pile of dirt how's that I'm finding it really nice as the driver with my hand on the mouse is I lose perspective it's really nice to have someone next to me who's watching what I'm doing and has like a good perspective on what to do next so off we go okay this looks promising H I think they're going to turn around the circle oh yeah we need a turn right yeah I think after the move forward interesting so that she'll go in the zigzag right so oops uh so what happens they they we removed seven they move forward turn left move forward again they're on a pile of dirt we'll need to remove seven again at that point no because sometimes they go forward and they they kind of zigzag Katie as a teacher do you want to step in here with any advice uh well I would say well so what happened last time she got to the second pile of dirt oh she just needs to turn right again so we look the same as we did sorry I totally right this is good to have so many eyeballs on the same problem yeah and it's nice that you can run the program and then start it over so we can just see where we're at I'm feeling good about this WOW cool nice work a happy job that was great that was a tough one you did great on that um so uh as the educator role in this scenario um I was trying to ask prompting questions instead of just giving them the answers I asked them a question and it kind of prompted in Brendan's mind oh yeah I should should be turning right I should be going that way um and also in PA programming you have the Navigator and the driver and you have them switch every once in a while so depending on your classroom setting you might want to have them switch every 10 minutes or kind of like once um once in a classroom period um question uh we have another question it says will there be more debugging levels added throughout the course like the final level that really helped my students figure out how to debug their own problems um we might have more debugging levels in the courses that we're um probably going to be releasing in the summer or fall um I think they are really helpful for students and it's really great to know feedback that educators are also finding that they're helpful for their students um so we'll definitely take that into account while we're creating our new courses go ahead a question what's a debugging uh level uh I'm actually gonna have you um do a debugging level soon so you'll see what they are okay okay um great so there's currently uh only one debugging stage in this 20 hour um course but that's that's great feedback to know that you guys want more um so let's look just at a couple more puzzles um let's look at uh Stage 15 puzzle six um we'll just look at a couple more puzzles because I want to save the bulk of the time for Q&A because I know we had a bunch of questions we didn't get to answer last night as well um so me pull up Stage 15 puzzle 6 so the directions in this level say using draw Square as an example add an input named length to draw a triangle then draw triangles in different sizes so um the input to functions basically say that I can draw a certain I can I can perform a certain function and make it a little different each time so I can draw a triangle but I can have them be different sizes so I to create an input for your function you click on the blue star and you drag input name into input and then we write write what we want our input name to be I'm going to make it be length I'll hit enter Then to close out of this little menu I'll click the blue star again so now to call this function with an input I'll drag out my draw triangle function with length I'll drag out two of them because I want to draw two triangles and I will say I want to I actually know that this first one is length of 100 I think the second one is length of 200 so we'll just copy that and also what we're going to have to do here is that we're um we're actually going to say move forward by whatever length we have set in our input so we'll drag away this number block and drag in a length block here so let's run this program see what happens oh here's a chance for me to debug I didn't do this right okay so um so we have our first draw triangle function with length 100 and then I said just draw this same one in that same spot that he ended up in so I actually want him to move forward 100 pixels in between those functions so let's reset and try that again okay congratulations okay um and let's see roxan and Brendan try one more level one of the debugging levels actually um so let's look at stage 17 puzzle Seven's some more questions oh okay okay um so the debugging levels are set up in that there's a goal for your program to complete and you have prewritten code that is close but not right so you have to identify what's wrong with the code and make it work so take a look at this one so what should I do to help me remove all the piles okay well the first step of debugging is always to run the program well it should be analyzed the program it's always it's great to just run the program first and see what's going wrong especially because this system is so visual looks good so far using all the necessary types of blocks but we should try using them more of them so we we're just missing out on something extra so what happened the person she walked along she turned too soon she did so what does a program do talk us through it roxan well she needs to go forward and then remove piles um and then turn to go around the whole Square so let's look at the definition for removing the entire Square Square um well first of all the inside loop says repeat two times to move forward and I think we need four or three I'm not sure if the turn counts but I would yeah I I would think it should be four times not two times I think you're right yeah is removing where repeat well let's see let's try it out so you want to remove the um CH I think repeat four times seems right because there's four sides to the square and the left turn seems right so let's try that ah you saw she was kind of bumping up against the edge of the of the field it's almost like she was trying to walk too far this time so is it three let's go question see I think the way this program works is we have two Loops we have an outer loop and an inner loop the inner loop is the one we do repeatedly for starters and it moves forward and removes a pile of dirt then we go back move forward remove another pile of dirt I think what that's saying is that's each time she steps forwards then she gets done with that then she turns left and then does starts off again up another Edge so it sounds like yeah you only want to walk three steps forward each time and that should take her to the next corner to turn yeah so we change that to a three I think so starting at one spot so now she should walk forward one two three times then turn okay good this is really the first time we're seeing these puzzles so this is slightly terrifying it's it's worked out great it's challenging but as long as you go step by step we did it all right congratulations excellent I do want to thank our amazing volunteers uh for helping us modeling pair programming uh it's important to see and I think uh seeing them work out problems is are are ways that you can tell students to work with each other you know they were working together there was lots of great teamwork they weren't shooting down others ideas um so I think that was great to see so um I think I will stop my screen share at the moment and uh um take some more Q&A questions so what else do we have roxan uh in the Futures will teachers be able to see how many tries or runs it takes the student to complete each level you know that's not something we currently have set up um but it is something that we could include in the dashboard um if you have suggestions to make to any of our materials you can write them in our forums which I have posted I links posted to both of our forums in the event details on the event page for these PD sessions um so you can go to forums. code.org or you can find our uservoice forum and the the link is um on the event page for this I add something yes of course I just one thing to add we do track um when students drop out of a level so if they keep trying and just abandon the whole tutorial to begin with so that is helping us improve levels if there's one that constantly students are getting stuck on and they're just giving up then that's something we want to improve so um we are tracking that um as far as like how many students are completing each level yeah so that's something we're doing on an organization wide level but if if teachers want to see specifically how many tries it takes a specific student to do each level we don't track that yet um but we we could definitely do that in the future um okay some questions from Rhonda um still uncertain about the struction of lesson two is there a teacher guide for it so currently the way it works is that we have lesson plans for the unplugged lesson so the offline lessons that don't use the use of a computer so when you look on learn. code.org it's um there're the stages that only have seemingly there there's just one section so it's stage one stage three stage four those all have lesson plans and they don't include the use of a computer for a student so the stages that are the online selfguided puzzles that we've been looking at those don't include a lesson plan for teachers because they're intended for students to sit down at the beginning of whenever you're going to do that lesson students sit down at the computer and they run through all of the puzzles them themselves themselves they have videos that help them go along they can pair program with other students but there's no specific teacher guide on how to introduce the lesson or maybe common mistakes that students might make so those are things those are materials we're um considering developing the F in the future for our future courses um but it there are current there's currently no teacher lesson plan for the online lessons they're just for students to run through all right there another one from Christina oh here is something that I would um love Brendan to shed some light on because Brendan is one of our uh programmers here at code.org so maybe this is a question he can help us out with sure the question is is input a real world programming term or is it variable I'm confused at the vocab here and how to clarify that for my students it's a really good question um I think we do think of parameters uh as being the formal word um well depends we have three things we have variables which are the values that we um keep track of like counter in an early example when you have a function when you give an argument or we the things we pass into a function are often called either an argument or a parameter I think in in our case we're using input as the input to a function is that right input or parameter or parameter okay yeah so there are kind of three words that get used in different ways um real world programming I think we talk about uh parameters and arguments to a function okay um maybe that's something we want to think about how we communicate it's a good question okay um we refer to them in the videos as functions with parameters um and we use input in the blocks but we don't use the word arguments in the blockly language um I mean so a parameter is a kind of a variable right um yes it's a you pass it into the function and then it's available to the function as a variable as you use the function I actually don't remember where inputs used in our tutorials so maybe you'll remind me how we use the word input um it was the on the um basically it's a it's a parameter for a function Okay Okay so we've just made a a friendlier word to than parameter I guess yep uh let's see let's take a look at some of these other questions um here's a great question um it says should we as teachers go through the courses before the students smiley face um so I would say that it would be best to go through the student go through the courses go through the course before the students um if that's not possible to go through the entire course before the students I think it would be helpful to at least keep a you know keep a couple lessons ahead of the students so you know if they ask you about a certain puzzle it's helpful that if you're going over to help him in the classroom you can say oh yeah I do know this puzzle so it it it will at least be easier to answer their questions if you've done it before um some other things we might think about when answering debugging questions with students are that um I've seen this in schools is that some students might be tempted to just keep adding blocks to their program um so you'll help a student in a classroom that you know has 30 blocks out on their workspace and it's just a little overwhelming so at that point I might ask students to clear their workspace and think about the logic behind the problem um rather than just keeping adding blocks um basically you can ask students what you would want your program to do explain it in words first so you can either have them write it down or um if you prep beforehand you can uh basically like print out or Draw out what the blocks look like so you could have little pieces of paper that have each different command on a little piece of paper and you could have students rearrange the pieces of paper to figure out and practice um what they might want their program to look like before they actually do it on the computer um are there other questions we can answer here or can weuse possibly go and answer some of the questions from the first sessions hangout that we didn't get to sure just few minutes and great anyone watching feel free to post more questions below in the last 15 minutes we have great um so yeah definitely if students are trying to debug their problems or work them out with work them out with a PA programming partner um asking them to like take a step back and think about what the what their program should be doing you know what the bird should be doing to get to the pig and that can help with pattern recognition saying you know if you want the bird to move forward five times should you just drag out the move forward block five times or are there patterns you're seeing in that you could have it just repeat five times and put a move forward block inside that um so we're just checking on some of the questions that came from the first PD session to see if we can answer some of those if there are any answered any of uh We've answered some of them oh it doesn't show you which ones you've already answered see um oh these were just the ones that we answered actually I don't know if we can see the the raw questions from last night that's okay um few different questions coming in there's one uh Brendan um could you explain the difference between JavaScript and HTML sure think you wonderand back into a camera view so all web pages use HTML stands for hypertext markup language and if you just go to a web page and say view Source you will see um HTML it's pretty much just the text that appears on the page with these little tags around it which tell it to do different things like make this a block and move this over here and make this a heading up here and make this order down here that's just a static piece of text JavaScript is actually a little programming language that you can then add to the web page and sometimes you'll see some little script tags in the page or sometimes there'll be other files that get loaded and they're full of JavaScript and that's actually a programming language with things like if statements while statements Loops code and JavaScript can do all sorts of things that only code can do it can say if the user clicks this button then change this text on the page or if they click here then go ask a server for some information and bring it back again so all web pages have HTML and optionally they can include some JavaScript which is the programming language that kind of supplements that so do you consider HTML code it's interesting it is a form of code in that it's instructions for a computer you're telling the computer what to do um and the computer does what it does uh presents it the thing that JavaScript adds is all the uh instead of just being um a flat kind of presentation JavaScript then has control flow so you can say if this then do this do this five times so HTML is a form of code and then JavaScript becomes a full programming language which does a bit more that's my opinion great that's an awesome answer um so also um we have a question that says I would like to see levels 15 seven eight and nine um so let me start screen sharing we can take a look at those levels too um let's see my screen share button is not working is yours working okay um we actually ran into this issue last night we can figure this out later um let's see is it possible to get the puzzle up and just show it oh yeah let's do that okay um so it would be uh 80 8 does that even work um so the screen share button is not working at the moment um so I know this is tough to see um but I can I can talk us through it um if everyone wants to look at it on their screen let me just make this window a little wider uh so puzzle Seven On Stage 15 says add an input named length to draw a house and build a big house for the elephant with edges 150 pixels long so we have a bunch of definitions out on our workspace one of them is draw a square one of them is draws triangle and then we have this new function called Draw to draw a house So the instructions ask us to add an input that says length so we can draw houses with different lengths so I'm going to add an input by clicking on the blue blue star I'm going to add input name of length I'm going to spell it right I'm going to click on the blue star to push it away um and now I'm going to say I'm going to drag out our draw house and I want the length to be 150 so I also am thinking about if it's drawing it's first drawing this square and then it's drawing this triangle on top some of these other numbers might have to change as well so we want it to move forward by whatever length it's drawing so I'm going to put that length variable in there and then I also wanted to draw a half draws draw the square and draw the triangle with with whatever length I'm going to tell it to so I'm going to put the variables length in both of those slots as well so when I hit run program it says congratulations um is there any way we can see if is there any way if people can let us know via the question and answer app if you can see anything of what's happening on the the screen um let's see um well let me just quickly go over puzzles eight and nine I'll just explain them um so here it says modify the draw House Pro uh blocks from the previous puzzle um something weird happened in that I don't see the blocks from the previous puzzle but what I would do is I would um I'm actually G to go back to the previous puzzle do you think it'll let me copy this no um so what I would do is I would create that draw house function and basically what you want to do is you want to get the artist to be in the right position to uh start the next house so when the zombie artist performs the first draw house function he ends up in a certain spot which is um at the top or at the top of the square in the top leftand corner of the square so basically you want to have the zombie turn enough so that it can travel across the top edge of the square you want it to make a 90 degree turn and travel down to the bottom right hand corner of the square and then turn again so it's facing the right direction to start the new house function um so that's how I would solve that puzzle and then for puzzle nine um it's basically just drawing a house function uh recreating the draw house function from scratch and then um doing the same kind of getting that to be in the right starting place to start the ne next house function all right so I think we have time for a couple more questions let's see what is um you have the or okay questions um some of the solution Pages um one of our questions says some of the solution Pages aren't available especially for level 15 um that's something one of our Engineers is actually working on right now to make sure that the all the solutions are available for the teachers um so that's something we're working on and hopefully we'll have fixed soon um so we also have a question we have some more uh programming language questions um one of our questions says uh are there other languages used in HTML than JavaScript in browsers or maybe other questions other languages used in browsers other than JavaScript yeah um when you have a we can all be on camera at the same time um when you have a web browser with HTML for the page the only real programming language that can run in the page is Javascript that's pretty much just the standard um there are some other languages you can write in which convert themselves into JavaScript before you get see the website um and of course on the server s you can have all these different languages that generate the web pages and you can have them running a web pages can talk to the server and that's where you have your jav PHP uh nodejs which is Javascript on the server so there are a lot of other languages out there but in the browser itself at the end of the day it's really JavaScript great thank you um I can answer really fast if you're like difference between XML and HTML um they look very similar XML is more general purpose but they both have the same bracket tags and close tags everywhere so they look very similar they have a very related history to each other XML is just more general purpose HTML is just for browsers all right great um I do you have an answer to that one I have one quick thought the question was which which IDE would you suggest for programming in Java language I don't have an answer there's a ton of them if anyone doesn't know an IDE is an integrated development environment so it's a place where you have a text editor you can write your program then you can run your program debug it and do everything in this one environment um but I would just start googling away and find forums where people get together and talk about them and people list the pros and cons of all of them um Google and search engines in general Google and being and all the others they're all your friends here so it's just a matter of doing a lot of searching and finding a community of people who have good advice is there one that you like I don't program in Java anymore I think the world's changing I used to do it okay great um and let's actually just uh answer one last question um uh we have a question about um someone looking forward to the the second level of Middle School curriculum is this still on schedule to be available prior to August 2014 um we are hoping to have our middle school specific courses available um probably I would say sometime for fall 2014 I I can't give an exact date on exactly when it's going to happen um but we should have it ready for the fall um so it is getting towards six o'clock so I want to respect everyone's time um thank you so much for joining us and I want to give one last thanks to roxan and Brendan who are such great volunteers I'll give them a round of applause um yes so please uh tune in to our last session in our series of three tomorrow at 500 p.m. Pacific time so January 29th Wednesday so thanks again for tuning in um if you still have more questions or want to more follow up on these things please visit our forums so forums. c.org um and the Forum links are also posted in the event page for this event so um thank you again for coming and we'll see everybody tomorrow have a great night
