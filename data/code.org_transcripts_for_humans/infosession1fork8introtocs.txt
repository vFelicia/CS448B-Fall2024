With timestamps:

00:01 - hi everyone uh welcome to code.org
00:05 - professional development sessions for
00:07 - our Krate intro to computer science
00:10 - course uh this is uh the first session
00:12 - out of a series of three uh my name is
00:15 - Katie aone and I am the k38 program
00:18 - manager here at c.org uh also today we
00:21 - have with us Kiki protzman of thinker
00:25 - Smith she's the executive director of
00:27 - thinker Smith she's also code.org
00:29 - curriculum writer and adviser um she'll
00:31 - introduce herself a little bit later on
00:34 - um I wanted to start off with a couple
00:37 - Administration things and just talk
00:39 - about how these sessions are going to
00:40 - work um
00:42 - so today's session is going to focus on
00:46 - the unplugged lessons of our K througha
00:49 - course um so we'll do a
00:54 - little admin portion here at the
00:56 - beginning we'll focus the main portion
00:59 - of our
01:00 - um one hour PD session on kind of the
01:04 - content of the unplug lessons um and
01:07 - then at the end we'll have a Q&A portion
01:10 - at the end um so the second session in
01:14 - our series will be tomorrow at 5:00 pm
01:17 - Pacific time um and the second session
01:20 - will focus more on the blockley online
01:23 - lessons of our 20-hour
01:25 - course and then the third session will
01:29 - be on Wednesday this week at 5:00 pm uh
01:32 - Pacific time and that will focus more on
01:35 - the online dashboard system and kind of
01:39 - resources for educator support um and
01:44 - during these sessions please feel free
01:46 - to ask questions throughout the entire
01:48 - session we want to hear what you all are
01:50 - thinking um so please continue to ask
01:53 - questions during the session we'll get
01:55 - to ones that are relevant and then we'll
01:57 - have that build bulk Q&A portion at the
01:59 - end of each session um so I just wanted
02:03 - to say thank you to everyone for coming
02:05 - and watching um because uh uh we really
02:09 - appreciate you taking your time out of
02:11 - your day to come and watch and learn
02:12 - more about our materials um we've been
02:16 - working really hard at c.org to create
02:19 - great computer science materials um but
02:22 - we would be nothing without the
02:24 - Educators out in the fields doing the
02:26 - real work and teaching a computer
02:28 - science to students every day so um
02:32 - thank you for coming out we really
02:33 - appreciate it um so I'd like to
02:37 - encourage everyone to watch all three of
02:39 - these sessions we're covering different
02:41 - materials in each of the sessions and
02:42 - they're each important for different
02:44 - reasons um I would especially encourage
02:47 - everyone to watch today's session the
02:50 - unplugged lessons are super important to
02:53 - this course and really important for
02:56 - kids to grasp computer science Concepts
02:59 - it's really important for them to be
03:00 - able to internalize them so um while
03:03 - you're following the 20-hour course it
03:05 - may be tempting to say oh yeah I I might
03:08 - skip the unplugged courses and just kind
03:10 - of not do them but I think it'll be
03:12 - really worthwhile for your kids and I
03:14 - hope that you will do them and I hope
03:16 - that this session provides some more
03:19 - insight into them and we can answer your
03:21 - questions on them um
03:26 - so let's see also we wanted to note that
03:29 - um if you ask questions during the
03:32 - session um we are going to raffle off a
03:34 - $50 donors choose gift code to one lucky
03:40 - teacher and we'll announce them um in
03:42 - the third session of Wednesday this week
03:45 - um so please continue asking
03:48 - questions um also in addition to these
03:51 - sessions I posted a few
03:54 - resources um for people to take a look
03:57 - at on the importance of Compu Compu
04:00 - science and um why we should be teaching
04:02 - this in our schools so I included some
04:05 - resources on the event Pages for these
04:09 - PD sessions um and we'll also post them
04:12 - in our forums along with any other
04:14 - resources that we may mention tonight um
04:17 - there's a great Ted Talk that I posted
04:19 - on why students should learn to code um
04:23 - there's a an article from
04:27 - the um article about uh why we should be
04:32 - teaching CS in our schools and also an
04:34 - article kind of about uh diversity and
04:38 - stereotypes within uh the computer
04:40 - science
04:41 - field uh let's see um also in the links
04:46 - are um two forums that we have for our k
04:50 - through eight intro to computer science
04:52 - course um you'll notice that one forum
04:55 - is for suggestions on how we might make
04:57 - our course better and another forum is
05:01 - for reporting bugs or asking questions
05:04 - or um just different discussion threads
05:07 - with Educators and you'll find um both
05:10 - of those links to forums listed on the
05:13 - event page for these PD sessions
05:17 - um and one other thing I wanted to
05:20 - mention was um we will have
05:23 - a uh survey about these sessions so we'd
05:27 - love to get your feedback on them so the
05:29 - survey will also be in the event page
05:31 - and I we'd really appreciate it if you
05:33 - figured it um if you filled it out after
05:35 - watching these um so I am very honored
05:41 - to hand this PD session over to Kiki
05:45 - protsman of thinker Smith um she can
05:48 - tell you a little bit about herself and
05:50 - then she will um spend a lot of her time
05:53 - going through the the bulk of the
05:55 - unplugged lessons um she'll be doing
05:58 - some screen sharing um you can feel free
06:00 - to open up your teacher dashboard and
06:03 - open up the lesson plans and follow
06:05 - along um and uh she'll probably be
06:09 - spending a little more time on the
06:10 - beginning unplugg lessons but we'll
06:12 - definitely touch upon all of them um so
06:16 - here we go let me hand it over to
06:19 - Kiki all
06:21 - right well thank you everybody uh I'm
06:25 - very excited to be here I'm really
06:26 - excited to be part of this program and I
06:29 - think that
06:30 - we can do amazing things when we get
06:32 - computer science integrated into
06:34 - education especially Early Education so
06:38 - as Katie mentioned I am Kiki protsman
06:41 - I'm the executive director of thinker
06:43 - Smith and thinker Smith believes that
06:46 - computer science is actually a
06:48 - passionate art form we think that it
06:50 - should be taught more as something kids
06:52 - are excited about in a hobby a habit
06:55 - than a scary curriculum so a lot of our
06:59 - lessons are created to bring out the
07:02 - enthusiasm in computer science and the
07:04 - artistic side and the fun of computer
07:07 - science and uh I'm very very pleased
07:11 - that code.org saw that it can add
07:14 - something to use your hands and to
07:16 - integrate this unplugged method into
07:19 - their lessons so I'm very happy to be
07:22 - doing this and I am really glad for the
07:26 - opportunity to kind of go over some of
07:27 - the lessons because I know that
07:30 - they can seem a little intimidating on
07:32 - first view for a teacher but once you
07:35 - understand what they're about I think
07:36 - that you'll really kind of enjoy them so
07:39 - one of the things I'm going to do is go
07:41 - back and forth between my screenshots
07:44 - and my video I'm going to start over
07:48 - with the screenshot and start going
07:50 - through the first lesson real quick
07:54 - here so I'm going to come
07:57 - down and get acrobat opened
08:03 - up
08:06 - and we will bring this into full screen
08:11 - mode so this is the first lesson and if
08:16 - all you have been able to do is the
08:18 - first lesson you may feel like our
08:20 - lessons are too lecture intensive but
08:23 - that's not the case the first lesson is
08:25 - just a little more talking than all of
08:27 - the others it's because there's a lot of
08:30 - information about
08:33 - about how computer science should be
08:37 - thought of rather than thinking of it as
08:39 - something that's really Advanced and
08:41 - only for college students how to think
08:43 - of it as a little more necessary and a
08:46 - little more exciting it also talks about
08:50 - balance and making sure that you aren't
08:53 - spending your entire life in front of a
08:55 - computer so I'll go ahead and get
08:57 - started going through this first lesson
09:00 - almost Page by page but you'll see that
09:03 - every lesson kind of has an overview of
09:06 - what you can expect and an objective of
09:09 - what you're going to learn during the
09:10 - lesson it also tells you the materials
09:13 - you're going to need in in advance so
09:14 - that you can look for the day make sure
09:17 - you have everything you need and then do
09:19 - your little preparation section who that
09:23 - goes faster than I anticipated we'll
09:25 - try down key there are also VOC
09:29 - vocabulary sections in every lesson and
09:32 - the teacher can decide whether they're
09:35 - interested in teaching the vocabulary
09:38 - before they start the lesson or as the
09:42 - word comes up if they re refer to the
09:44 - vocabulary section or if they want to
09:47 - just put the words on the board but the
09:49 - vocabulary is very important and one of
09:53 - the reasons it's so important is because
09:55 - getting these words into a child's
09:58 - vocabulary young is going to help them
10:01 - perceive computer science as something
10:03 - that is simple and Child's Play and I
10:06 - learned about uh data when I was in
10:09 - kindergarten I learned what an algorithm
10:11 - was when I was in the first grade and
10:14 - that way those words don't become
10:15 - sources of fear so rather than skip them
10:19 - or come up with new words to describe
10:22 - these ones I highly recommend you
10:25 - actually teach the proper
10:28 - vocabulary
10:30 - so the introduction section of lesson
10:33 - one talks about computer science and how
10:37 - amazing it is all of the things that you
10:39 - can do with computer science and how
10:41 - necessary that it's becoming in the
10:44 - world that we live in and certainly by
10:46 - the time most of these K through 12
10:48 - students graduate it will be integral to
10:52 - any job that they could want in the
10:54 - future we put in a few questions as well
10:56 - things to get the students thinking for
10:58 - themselves you'll find that that's a
11:00 - huge theme in these lessons is
11:03 - encouraging the students to think for
11:05 - themselves in fact in all of these
11:08 - lessons it's better that they are wrong
11:11 - than they are given the answer so we
11:14 - prefer to go through several stages of
11:19 - incorrect so that they can adapt their
11:22 - answers and figure out how to solve the
11:25 - problem on their own sometimes that
11:27 - makes the lesson take a little bit
11:28 - longer but hopefully you'll get a feel
11:31 - for your class and how good they are at
11:34 - getting feedback from their failures and
11:36 - then you can adjust the timing on the
11:38 - lessons accordingly and that's another
11:41 - one of the issues is that uh because
11:45 - computer science is not
11:48 - very ubiquitous I guess it's not
11:53 - everywhere teachers don't often have the
11:56 - background that they think they should
11:58 - have to teach this stuff and it can keep
12:00 - them from teaching it at all one of the
12:03 - things I really urge you to think and a
12:05 - way to proceed with these lessons is to
12:09 - say I'm not going to know everything
12:12 - about these lessons computer science
12:15 - changes and it's really a vast area so
12:21 - there will be times you have questions
12:23 - and we have to look it up together there
12:25 - will be things that you grasp and
12:27 - understand that I didn't get
12:29 - and that's encouraged I look forward to
12:33 - the fact that you will understand more
12:35 - of this than I will and I welcome you to
12:39 - teach me what you've learned having that
12:42 - attitude will not only prevent you from
12:44 - teaching this but it's going to give the
12:46 - kids so much power and it will make this
12:49 - a subject that they really enjoy because
12:51 - they feel like they are the best at this
12:54 - and I think that even talking about how
12:58 - few people in the world
13:00 - do get the opportunity to do this that
13:03 - it's
13:04 - a if right now the students were to go
13:07 - through just the 20 lessons in the
13:09 - code.org curriculum they would know more
13:12 - computer science than 85% of people in
13:15 - in America so that's I think a a big
13:20 - thing for the
13:22 - students this goes under this goes over
13:26 - balance so you'll see there is a balance
13:30 - to maintain with computer science and
13:35 - activity so we want to encourage kids
13:39 - for every hour that they're sitting in
13:41 - front of a computer screen they should
13:43 - be spending at least an hour running and
13:46 - jumping and playing that there needs to
13:48 - be a balance that's maintained part of
13:51 - that is making sure that if you have
13:52 - your kids sitting for a long time
13:54 - working on a computer that you get them
13:56 - up and walk them around every once in a
13:58 - while
14:00 - also the 202020 rule which is every 20
14:03 - minutes you look at least 20 feet away
14:06 - for at least 20 seconds and that gets
14:08 - your eyes some exercise and it keeps the
14:10 - students from getting
14:12 - too entranced and too or too bored on
14:16 - the other side so uh when kids get very
14:20 - engaged in what they're doing online if
14:23 - something isn't working right they can
14:25 - get really frustrated and a lot of times
14:28 - that frustration comes out uh in the
14:31 - form of aggravation maybe towards the
14:33 - computer and so talking about good ways
14:36 - to cope with that frustration is also
14:38 - really important getting up and taking a
14:40 - little walk going to get a drink from a
14:42 - water fountain something of that nature
14:46 - so then there is a balance between
14:48 - technology and environment and that
14:51 - computers use a lot of resources a lot
14:53 - of electricity you use a lot of paper
14:55 - and so making sure that you talk about
14:58 - recycling and turning off lights when
15:01 - you leave a room trying to balance out
15:03 - the technology use and then finally
15:06 - technology versus
15:07 - philanthropy and that's understanding
15:10 - that if you know something that the
15:12 - majority of America doesn't know you
15:15 - have the ability to really monopolize on
15:17 - that but that it's far more responsible
15:20 - to pay it forward to help other people
15:23 - learn what you've learned uh to use what
15:26 - you can do to help a nonprofit or to do
15:30 - open source work and to use open- Source
15:33 - programs when possible instead of always
15:36 - feeling like you need to pay for the
15:37 - newest and best thing so that's kind of
15:41 - the the overarching idea of the
15:46 - unplugged side of computer science in
15:48 - general just making a responsible
15:50 - computer scientist and again you can see
15:52 - that's a lot of
15:54 - talking uh but it's really really
15:57 - important and after that we go into an
15:59 - activity and the activity is actually a
16:01 - lot of fun and I'm going to kind of
16:04 - blast through the lesson here and show
16:06 - you what the activity is really quickly
16:09 - so here's a binary decoder key I think
16:12 - I'll actually switch back to the
16:16 - video for
16:22 - this
16:24 - there while you're um switching back
16:27 - Kiki I just wanted to answer question
16:29 - about um someone asked how do I get this
16:31 - PDF uh if you go to learn. code.org
16:36 - you'll find the whole 20-hour course um
16:40 - and you can sign up and um take your
16:42 - students through there and you can also
16:44 - just browse the course if you go to
16:45 - learn. code.org
16:47 - great thank
16:50 - you
16:52 - okay so we have
16:57 - here the binary decoder key and the
17:01 - reason it's called that is because it
17:03 - has every letter spelled out in asky and
17:08 - when I say spelled I mean that it has
17:11 - its code in off and on we tend to talk
17:15 - about binary as off and on in this
17:17 - series because we don't want to injure
17:21 - The Young Ones concept of numbers and
17:24 - zeros and ones at this point so we'll
17:27 - talk about off and on and
17:29 - how letters can be represented as
17:32 - combinations of off and
17:34 - on and this becomes the key for filling
17:39 - out one of the two sheets provided at
17:42 - the end of the
17:45 - PDF so you have these two sheets uh this
17:49 - one is geared more towards the
17:53 - kindergarten first grade age group it's
17:56 - just a simple strip that you you can
17:59 - copy the code into for your given letter
18:03 - and this is geared more towards the
18:05 - older students where they can fill in
18:08 - their initials first and last in one
18:11 - square and it's a little more complex
18:14 - now even older if you're going to go
18:15 - eighth grade or older you can actually
18:18 - have them write zeros and ones and have
18:20 - them write entire phrases on a piece of
18:24 - paper it just depends on the age of your
18:27 - students as to which activity
18:29 - do but what you would do for example
18:33 - let's go with this binary
18:37 - strip you would take a letter from the
18:39 - decoder
18:41 - sheet and then you would see that it's
18:43 - got a first it's got a
18:48 - first nibble here and then it's got a
18:52 - second nibble and those two nibbles
18:54 - together form a bite so it's eight bits
18:57 - of information
18:59 - it's a bite and that's what makes a
19:01 - letter so in this one you have off on
19:06 - off
19:08 - off and then you have off off off
19:11 - on and you would just take that and
19:14 - transfer it to your sheet here you would
19:17 - have off on off
19:21 - off and then off off off
19:26 - on and they may depending on the amount
19:30 - of time they have colored more nicely
19:32 - than I did but that's the point of this
19:36 - lesson you can make it take a lot longer
19:38 - if you want to do several sets of
19:40 - letters if you want to do letters and
19:42 - then switch and have someone guess what
19:44 - letters you did there are a lot of ways
19:45 - to make this take longer but it's about
19:48 - a 10minute activity in and of itself if
19:51 - you're tacking it on to the end of your
19:54 - big explanation lesson then it can be
19:57 - anywhere from 45 minutes to an
20:00 - hour so that's lesson one and I'm going
20:03 - to also go over lesson three pretty
20:05 - thoroughly because that's another lesson
20:06 - that can be slightly confusing and then
20:08 - the rest of them I will go through a lot
20:10 - more quickly because they're a lot more
20:12 - intuitive so
20:15 - lesson three let me switch to the screen
20:18 - share again
20:22 - here if it lets
20:27 - me
20:29 - Katie are you seeing a go to screen
20:31 - share not
20:33 - yet
20:38 - okay all right maybe I won't I'll just
20:42 - have you at home take a look at your
20:44 - PDFs for it's considered lesson three
20:47 - because there is a lesson in between the
20:50 - introduction and this lesson that is
20:53 - online so we'll start with this one and
20:58 - this is is about computational thinking
21:01 - and one of the reasons that it might
21:02 - feel complicated is because it's going
21:05 - over the four ideas of computational
21:08 - thinking in one lesson and it's breezing
21:11 - over all of them with one
21:14 - activity so the four ideas are
21:18 - decomposition uh pattern
21:20 - matching
21:22 - abstraction and
21:25 - algorithm and so what we have here
21:29 - is these little monsters and all the
21:31 - monsters are in your
21:34 - PDF and you want to have the kids look
21:37 - at all the different monsters in the
21:39 - book and try to decompose the monster
21:44 - there's a joke in there somewhere um you
21:47 - want to decompose them into their parts
21:50 - and so you want to say well this monster
21:53 - has if you look at these These are the
21:57 - types of features a monster could have
21:59 - so if you said this monster has vegeto
22:02 - eyes and this monster has
22:06 - uh a Sprite of nose and this monster
22:11 - has a I don't know A Wack mouth so if
22:15 - you look at each individual piece of a
22:18 - monster you can decompose it into
22:21 - smaller bits that are easier to work
22:24 - with
22:27 - the next thing is the pattern match and
22:30 - in this lesson the idea of
22:33 - that
22:35 - oh that's what happens when you have
22:38 - like motion sensing
22:41 - light
22:45 - okay
22:48 - so the idea of the pattern matching is
22:52 - then to say that well the pattern is
22:55 - that they all have eyes they all have a
22:58 - nose
22:59 - and they all have a mouth so those are
23:01 - patterns that I can find between all of
23:03 - them and then in this lesson the
23:05 - abstraction portion is to say how can I
23:08 - take the fact that they all have
23:12 - similarities and kind of hide the fact
23:14 - that they're different similarities so
23:17 - their eyes are different kinds of eyes
23:20 - but they all have
23:21 - eyes and through this series our concept
23:25 - on abstraction is basically creating a
23:27 - blank
23:29 - so you would say the zombie has blank
23:34 - eyes you don't need to say it has
23:37 - vegetos
23:38 - eyes and so you can say this has blank
23:42 - eyes this has blank eyes this has blank
23:46 - eyes and then you fill in the blank when
23:49 - you get to the part where you're
23:50 - describing the particular monster so
23:53 - that's what the abstraction is for this
23:56 - piece you can think of abstraction we'll
23:58 - get to this later but abstractions kind
24:00 - of like a mad lid where you could have
24:03 - one specific story but by just adding
24:06 - some blanks instead of certain words you
24:09 - turn it into a canvas for lots of
24:12 - different stories so that's the idea
24:14 - that we're trying to get across with
24:15 - that part and then finally the algorithm
24:19 - and for this one the algorithm is simply
24:21 - choosing a monster or creating your own
24:24 - and then writing an algorithm using the
24:27 - steps to create the monster so first
24:30 - choose a vegeto head then choose a
24:33 - whacka mouth then choose a sprum nose
24:38 - and you put it all together and then you
24:39 - see if the person can try and figure out
24:42 - what the monster is that you were
24:43 - thinking of so that's the piece and when
24:46 - you look it all over on your own it may
24:50 - seem a little complicated but when you
24:53 - work it out step by step and understand
24:55 - what each of the steps is for this
24:58 - activity it's really a lot of fun and
25:00 - the kids can have a good time creating
25:02 - their own monsters and giving their own
25:05 - features
25:08 - names so that's that
25:16 - one now I'm going to try again to do the
25:19 - screen
25:25 - share
25:27 - and
25:34 - and it's obviously not working because
25:35 - it's still showing the camera there must
25:38 - be a two screen share
25:43 - limit if you click on something else
25:47 - when you drag your mouse over to the
25:49 - left side of the screen nothing pops up
25:52 - yeah I'm clicking on screen share but
25:54 - then it doesn't give me the window that
25:56 - lets me choose what window I want to
25:59 - share and it just does nothing so we may
26:03 - have to go with only the pieces I
26:05 - printed up and hope that everybody has
26:10 - access to a PDF or will by the time they
26:12 - watch the
26:14 - recording or everyone can visit learn.co
26:17 - dog and pull up the PDFs as we follow
26:20 - along if you click on the lesson number
26:22 - that Kiki references you can see the PDF
26:25 - and when it says open lesson plan
26:31 - yes okay I'm just going to try clicking
26:34 - a few buttons and see if my screen share
26:36 - capability comes back but it doesn't
26:41 - look all right so the next one is called
26:45 - graph paper
26:46 - programming and this one is a lot of fun
26:49 - because you really get in the idea of
26:52 - the difference between an algorithm and
26:55 - program so you start out
26:58 - with a
26:59 - picture and in the simplest case it's
27:03 - just a
27:04 - box with different colors filled in and
27:08 - you have to figure out given just a
27:11 - simple key of possible
27:15 - symbols how to get your friends to be
27:19 - able to draw the picture in your
27:22 - box now I've got a little sample here
27:26 - that we can go over there's lots of ways
27:28 - to achieve this and if you want to start
27:31 - out with your class saying the words for
27:34 - each of these things it gives them an
27:37 - idea of the Simplicity of it so if
27:40 - you're going to start
27:42 - here you color your box and then you
27:45 - move over
27:46 - one and then you can step back and go
27:51 - down and this one's blank so you move
27:53 - one and then you color this
27:56 - one and because it's so
27:59 - small that you can't really see the
28:02 - point in going backwards before you come
28:04 - down but if there were 20 squares across
28:06 - and then 20 rows of those then you would
28:09 - want to go all the way across and then
28:12 - you'd want to come back and go down and
28:14 - go all the way across and come back and
28:16 - go down and pretty soon people will see
28:18 - that there's some redundancy there and
28:21 - they may want to simplify that and
28:23 - that's a good thing to do later on in
28:25 - the exercise but for now if you tell
28:27 - them we're just going to go all the way
28:30 - across come back and go down that way
28:33 - you understand what the code is so
28:36 - that's what we have going on here we
28:38 - color we step
28:41 - over then we have to come back and go
28:44 - down pretty soon they'll notice anytime
28:47 - they have a combination like
28:51 - this that's a redundancy and they can
28:54 - get rid of it because it means go over
28:55 - once come back and you're not doing
28:57 - anything in
28:59 - between there are other ways to program
29:01 - this out too for example you could color
29:06 - it go over
29:08 - one then go down to this
29:14 - square and then color
29:17 - it and really you're done but if they
29:20 - want to come over to this Square just so
29:21 - that they acknowledge it's
29:24 - there you can go that
29:27 - way so there's lots of different ways to
29:29 - do this and that's something that's
29:31 - valuable for the students to see is that
29:33 - they can do the same thing many
29:36 - different ways and then when you talk
29:38 - about the difference between actually
29:40 - saying color the
29:42 - square and
29:44 - drawing that
29:46 - scribble that's the difference between
29:49 - an
29:50 - algorithm and the code that goes along
29:53 - with the
29:53 - algorithm so that's really all this
29:56 - lesson is doing is is giving you
29:59 - programs to draw a picture using
30:07 - symbols that's that lesson kids have a
30:10 - lot of fun with that one it's very
30:11 - entertaining and it comes back later so
30:13 - there's another lesson that builds on
30:16 - what you use in what you do in that
30:18 - lesson and it's a little bit more active
30:21 - and I'll get to that one in a
30:25 - minute the next one is lesson that is
30:29 - purely on algorithms so it's trying to
30:32 - give you an idea of what algorithms are
30:34 - and why they're important the very first
30:37 - lesson of that actually starts with just
30:39 - a piece of folded paper so what you want
30:42 - to do is try to get your kids to figure
30:45 - out how many ways there are to fold a
30:48 - piece of paper like this so when you
30:51 - open it
30:54 - up you want your piece of paper to have
30:57 - exactly this shape all of these squares
31:00 - in this
31:02 - shape and you'll quickly notice that
31:04 - there's several ways to get this exact
31:07 - same crease pattern in your paper and in
31:10 - the PDF it talks about folding this is a
31:13 - hamburger fold when you fold it so that
31:18 - the the paper folds along the wide Edge
31:22 - or uh across the wide Edge so that's the
31:25 - hamburger fold and then when you're
31:28 - folding the Long Way making a crease the
31:30 - long way that's a hot dog fold and so if
31:34 - you give the kids that terminology they
31:36 - have a quick way to keep track of how
31:38 - they folded their paper so they'll say
31:40 - well I got this one by doing hamburger
31:44 - hot dog
31:46 - hamburger
31:47 - hamburger that's how I ended up with it
31:50 - this time but somebody
31:54 - else might do hot dog
31:58 - dog hot dog hamburger
32:03 - hamburger and the interesting thing is
32:06 - that the number of steps can
32:10 - change
32:12 - so it could take four folds to get this
32:16 - pattern and if you do it a different way
32:20 - one
32:22 - two
32:24 - 3
32:25 - 4 5 six
32:29 - bolds so obviously one way is more
32:31 - efficient than the other and that's what
32:34 - this little piece of paper teaches the
32:40 - students uh the same lesson goes on to
32:43 - talk
32:45 - about explaining the algorithms and how
32:48 - important it is that you are able to
32:52 - accurately put a problem into words so a
32:56 - real world problem might be we have
32:59 - these
33:00 - shapes and we want to cut them out and
33:05 - lay them into this
33:08 - pattern that's fine except for if you're
33:10 - trying to get the idea across to a
33:12 - computer you're going to have to tell it
33:15 - put the green triangle on top pointing
33:18 - in a certain direction put the purple
33:21 - triangle below it make sure it's
33:23 - touching and in the center but it's got
33:25 - to be lined up with one Edge and then
33:27 - you got to put the pink triangle on and
33:28 - the yellow triangle on it's kind of an
33:31 - alternative to the peanut butter jelly
33:35 - sandwich if anybody's heard that method
33:37 - you have your students try and tell you
33:40 - how to make a peanut butter jelly
33:41 - sandwich and you intentionally
33:44 - misinterpret the instructions to make a
33:46 - big mess instead it's same kind of idea
33:50 - you need to be very clear on your
33:52 - instructions so that you're guaranteed
33:54 - to end up with the correct picture
34:01 - all right moving right along we have
34:04 - lesson
34:06 - eight so lesson eight is making
34:10 - suncatchers
34:12 - so my students end up with something
34:16 - sort of like
34:17 - this and not only is it a fun little
34:21 - activity in a take-home which the kids
34:24 - love having take-home reminders of what
34:26 - they did but it's also a lesson in
34:28 - functions and in variables
34:32 - so you'll see at the end of the
34:35 - PDF that there's a page that looks
34:37 - something like this and it talks about
34:41 - using
34:42 - skills and a
34:45 - program what you can do is you can talk
34:49 - to your
34:50 - students about how you create the sun
34:54 - catcher you say well I take my string
34:57 - and I put a bead and tie it and then a
35:01 - hoop and then tie it bead then tie it
35:05 - hoop then tie it and then I put on my
35:08 - special charm at the
35:10 - bottom and if you go over that a couple
35:12 - of times they'll get the point of bead
35:15 - tie hoop tie bead tie hoop tie special
35:20 - charm so then you go in and you try to
35:24 - write it down in your program okay I'm
35:25 - going to write the instructions down for
35:27 - you so that you can use them again be
35:30 - tie hoop be tie hoop tie bead tie hoop
35:34 - tie and it's not long before you run out
35:36 - of
35:37 - lines so then you say okay well we run
35:40 - out of lines but we have these two extra
35:43 - sections up here that we can use and
35:46 - anything we store in this
35:49 - skill we can call from the
35:52 - program so if we were to put two
35:55 - instructions up here we could call skill
35:59 - one and get two instructions out of one
36:02 - program line and then you challenge them
36:05 - to figure out how to use these to create
36:08 - their program so what happens is these
36:11 - become functions so skill one is
36:14 - actually one function and if you wanted
36:17 - to put bead Tha hoop tie in skill one
36:23 - and special charm tie in scale two
36:28 - then you could call skill one skill one
36:31 - skill
36:32 - two and that's your
36:35 - program another great thing is to use
36:38 - this as an opportunity to talk about
36:41 - variables so what we will do is I'll
36:46 - tell my students I don't know what bead
36:48 - you have your bead might be green your
36:50 - bead might be red I don't know what bead
36:53 - you have but I'm just going to use if my
36:56 - marker works
37:02 - I'm just going to use this
37:04 - symbol to indicate that we're going to
37:06 - put a bead on this is my variable I
37:10 - don't know what your bead is but I'm
37:12 - going to use this symbol so that I can
37:13 - keep going and write you a program
37:16 - anyway not knowing what bead you have
37:19 - and then you can say this is what hoop
37:21 - looks
37:22 - like I don't know what kind of Hoops
37:24 - you're using but if I have the symbol to
37:27 - to say whatever hoop you have this is
37:29 - where you put it that's a
37:32 - variable and then you can do tie
37:35 - something like that and then special
37:38 - charm like this because I don't know
37:40 - what your special charm is maybe you
37:41 - have a butterfly maybe you have a
37:43 - snowflake but I'm going to use this to
37:46 - say put on your special charm and then
37:49 - you can instead of writing bead hoop
37:52 - bead hoop you can use the drawings on
37:54 - there or I guess similarly inad instead
37:57 - of drawing a bead you could just write
37:59 - bead and bead indicates whatever bead
38:02 - they have so in this lesson you actually
38:04 - get to use variables functions
38:09 - programming and put it all together into
38:11 - one really fun activity with a really
38:14 - cute take
38:20 - home
38:22 - okay
38:23 - so let me make sure there any questions
38:27 - yet on any of those that I should stop
38:31 - for um well we just had one that said
38:34 - how do you how do you explain functions
38:37 - to your students um if you had a
38:39 - definition what would you say it would
38:42 - be I say functions are a really simple
38:46 - term for describing something that
38:49 - happens over and over again so instead
38:52 - of writing a 100 lines 10 times in your
38:57 - program
38:58 - you write
39:01 - one you write your 100 lines once and
39:03 - give it a name and you call that name so
39:07 - you'll see in another lesson we're about
39:09 - to get to Lesson
39:11 - 12
39:12 - that I compare it to writing a
39:17 - song so I talk about a function almost
39:22 - like a chorus in a song
39:26 - where you write the definition of the
39:28 - chorus one time and then the rest of the
39:32 - song Long whenever you see the word
39:34 - chorus you don't sing
39:37 - chorus you go up to where chorus was
39:40 - defined and sing the lines under chorus
39:44 - so that's how I Define functions for
39:48 - my cool and we are kind of running
39:51 - shorter on time so I do want to get to
39:53 - all these unplugg lessons so let's let's
39:56 - continue sure so now we're at lesson 10
40:00 - and lesson 10 is one of my favorites
40:03 - it's easily adaptable for any age
40:06 - because you get to choose the program
40:08 - that you use so this is a card game and
40:13 - we try and involve the student by giving
40:15 - each student at their desk a card to
40:18 - hold that the other students don't know
40:21 - what it is now in a very young group you
40:24 - can have uh one student that goes around
40:28 - and picks you can have the teacher go
40:30 - around and pick and you can make the
40:32 - rules really really simple in a group of
40:35 - older kids eighth graders or above you
40:38 - can have small groups of four that play
40:40 - it together and they just draw from a
40:42 - stack the adaptation of it is up to you
40:45 - and your students but the point is you
40:49 - have some sort of program for
40:51 - example we say well we're going to give
40:55 - a JavaScript program
40:58 - that says if the color of your card is
41:02 - black then your team gets a point added
41:06 - to their
41:07 - score otherwise they get a point taken
41:11 - away from their
41:12 - score so you start with a deck of
41:16 - cards and then you would draw a
41:20 - card and this one is black and that
41:23 - means that the person who drew it the
41:25 - team that Drew it gets a point added to
41:27 - their
41:28 - score and then the next person gets to
41:31 - go and they choose another card or pick
41:33 - another student who has card at their
41:35 - desk and they look and this one is red
41:39 - and so there' be a point taken away now
41:41 - that's a pretty simple program for
41:43 - anybody over say third grade you can
41:46 - start making them a lot more complicated
41:48 - you can say if the card is even and red
41:52 - then you do this if the card is less
41:54 - than four then you do that if the card
41:57 - is a heart then you do this and you can
41:59 - string them all together and it's a
42:01 - really good way to learn about
42:03 - conditionals and even loops and all
42:06 - sorts of other functional programming
42:11 - ideas just with the luck of a Java card
42:15 - so I definitely recommend you give that
42:17 - one a read and try it out you can adapt
42:19 - the program to be as simple or as
42:21 - difficult as you
42:22 - need then I just covered Lesson 12 which
42:27 - was the functions through singing uh it
42:31 - it's there's a little more to it in that
42:35 - we talk about passing parameters to a
42:38 - function and for that we use Old
42:40 - McDonald so Old McDonald has a chorus
42:44 - and the chorus is similar for every
42:47 - verse but it has some things that change
42:50 - so we talk about passing certain words
42:52 - through like dog and bark and then you
42:56 - can see the chorus given those two words
43:00 - and we talk about adding more parameters
43:03 - and we start out not using any at all so
43:06 - that's a
43:07 - fun I'm going to give the screenshot one
43:10 - more try because that is where I ended
43:13 - with printouts because the rest of them
43:15 - become fairly easy to describe just
43:17 - looking at the
43:19 - PDF but uh it's still not working so I'm
43:22 - going to move on to lesson 14 in lesson
43:26 - 14
43:28 - if you look at your PDF you will see
43:31 - that it is very similar to mad lips so
43:35 - we start
43:37 - about just kind of taking your class by
43:40 - surprise you say hey what did you have
43:43 - for waffles this morning and when people
43:45 - are confused you're like nobody okay
43:48 - what did you have for toast
43:50 - yesterday and then hopefully the kids
43:52 - will start to pick up on it and you say
43:55 - see when you're too specific about an
43:59 - item you don't reach as many people and
44:03 - the same thing happens in programming
44:05 - when you're too specific about what a
44:07 - function does it doesn't solve as many
44:10 - problems so we're going to learn how to
44:12 - abstract that away and make it a little
44:14 - less specific so how would you make what
44:18 - did you have for waffles this morning
44:19 - less specific so then they talk about
44:21 - will you say breakfast what did you have
44:23 - for breakfast and then you could get it
44:26 - to even more Meals by saying what did
44:28 - you have for a meal or even just leaving
44:30 - that blank and say what did you have for
44:32 - a
44:32 - blank and the same thing kind of happens
44:35 - with stories you take a couple stories
44:37 - and you compare them and where two words
44:39 - are different in the story you create a
44:42 - blank and that goes
44:45 - into uh a whole example of madlabs and
44:50 - so they're able to fill in their own
44:51 - blanks in a story and they are able to
44:56 - then
44:59 - create their own stories that they can
45:01 - then turn into stories with BS so that's
45:05 - how that one
45:07 - works Lesson 16 calls
45:12 - back the lesson that we did with the
45:14 - graph paper programming let me just
45:16 - reach for that real
45:20 - quick so Lesson 16 comes
45:24 - back to this idea but instead of doing
45:28 - it at their desks in a
45:30 - classroom they have a relay race so you
45:35 - line them up on one side of the room
45:37 - ideally maybe they're outside or in the
45:39 - gym for this one on the other side they
45:42 - have the image that they're trying to
45:46 - draw what you'll do is you'll have the
45:48 - first person in the race run up grab a
45:51 - pencil look at what they're trying to
45:53 - program and write only the first
45:56 - instruction
45:57 - they then have to run back to the end of
45:59 - the queue the next person runs up looks
46:03 - at what was already programmed and then
46:05 - draws the second
46:07 - instruction this is a good way to get
46:09 - them thinking really quickly and what
46:12 - you get to test is your ability to look
46:15 - at what other people have done come into
46:18 - something in the middle and figure it
46:19 - out check for errors because if there's
46:22 - an error their only thing they can do
46:24 - that term is cross out the error they
46:26 - can't can't even fix and then also just
46:30 - programming under pressure and how much
46:32 - harder it is to get it right when you
46:34 - know that you're competing against your
46:37 - classmates
46:40 - that's so we're almost through these
46:44 - here lesson 18 is about the internet
46:48 - this one changes depending on the age so
46:51 - you're able to put in much more
46:53 - information about the internet and what
46:55 - it does and what it's good for if you're
46:58 - with older kids if you're with younger
47:00 - kids just getting across the idea that
47:03 - your message is broken up into lots of
47:06 - pieces and transferred through an actual
47:10 - physical cable of some kind or through
47:13 - the air is a really important notion for
47:15 - these kids because they might not
47:17 - understand that so in this one you take
47:22 - the concept of having a message that you
47:24 - need to deliver to another student then
47:27 - you talk about having to divide it up
47:29 - into pieces that can fit through the
47:33 - bandwidth and depending on the method
47:35 - you're using to deliver it you get to
47:38 - actually carry it differently to the end
47:43 - recipient so some people are allowed to
47:47 - carry it in their hands some people have
47:49 - to carry it on the back of a hand other
47:52 - people have to carry it on top of their
47:54 - head and it just depends on what whether
47:57 - you're using fiber optic cable or
48:00 - telephone wires or
48:03 - Wi-Fi so that's how that one goes it's a
48:07 - fun little activity it feels much more
48:09 - like a game than like a lesson but
48:12 - that's
48:13 - good and finally we come to the wrapup
48:17 - so the
48:18 - wrapup is where you take the lessons
48:22 - that you've done in the past and you
48:25 - challenge your students to do mashup and
48:28 - combine a couple of different lessons
48:30 - into one so you give them a table full
48:34 - of materials and you say okay everybody
48:38 - pick two lessons or three lessons and
48:40 - figure out a game or an activity or a
48:43 - craft that you can make to combine those
48:47 - three lessons into one and you just give
48:49 - them the chance to process what they
48:53 - learned uh to see whether something's
48:55 - going to work maybe it doesn't work but
48:58 - they thought it was going to be a good
48:59 - idea it's a really creative process and
49:02 - there doesn't have to be a right answer
49:05 - just the
49:06 - exploration is exercise
49:10 - enough so those are the offline lessons
49:14 - they are lots of fun and very helpful
49:18 - and I hope that you enjoy them and feel
49:20 - comfortable giving them a shot if you
49:22 - have any questions there is a forum
49:25 - available for you to post your questions
49:27 - and we can help you out any way that you
49:29 - need us
49:30 - to yeah um The Forum link is posted on
49:35 - the event page for this these
49:38 - professional development sessions and
49:40 - it's also on um you go to code.org
49:45 - educate sl20 hour the number
49:49 - 2020 and then HR um and uh um I'd love
49:56 - to start answering some of these
49:57 - questions we have a lot of great
49:58 - questions from people here um the one
50:00 - with the most votes uh says will will
50:03 - code.org be developing more free
50:05 - curricula or will districts have to
50:06 - purchase them in the future um all of
50:08 - our stuff is free and will continue to
50:11 - be free so please use it uh yeah we just
50:16 - we have free things and we want you to
50:19 - use them uh and we are working on more
50:22 - or at least more versions of what's
50:25 - already out there yes yeah um so the
50:29 - stuff we develop in the future will be
50:31 - free as well um in the coming year so in
50:36 - 2014 we'll be
50:38 - developing uh courses for specifically
50:42 - for K through two so specifically for
50:45 - that grade range um a course
50:48 - specifically for thir third through
50:50 - fifth graders and then two courses for
50:52 - middle
50:53 - schoolers
50:55 - um let's take some other questions that
50:58 - have a lot of um votes um so someone
51:04 - else is looking for good Hands-On
51:06 - resources on computational thinking um
51:09 - for elementary and middle school
51:10 - students
51:12 - um we will post a resources thread on
51:17 - the
51:17 - forums um
51:20 - so after this session um we'll post more
51:24 - resources on our forums where we can
51:27 - send you things about computational
51:28 - thinking and someone else also wanted
51:33 - um resources about um more about the
51:40 - binary subject uh more advanced um
51:44 - resources on binary so we can also post
51:46 - some on the Forum as well for
51:49 - that
51:51 - um let's
51:53 - see and Kiki if you see any questions
51:56 - you like to to jump in and answer please
52:00 - go for it
52:01 - um I actually like this one what's the
52:04 - best way to teach a set of 22 first
52:06 - graders code uh thinker Smith does teach
52:10 - all the way down to kindergarten and one
52:12 - of the things that we do is we actually
52:15 - go into the classroom to teach it for
52:17 - the teacher so we've got experience
52:19 - teaching a wide range of Ages and all of
52:23 - these activities do work the unplugged
52:26 - activities do work for grades K through
52:30 - adult the difference is with the
52:32 - kindergarteners you need to break them
52:34 - up a little differently and you need to
52:36 - think of it not as I'm trying to get
52:38 - these 12 ideas across to them but I'm
52:41 - trying to introduce them to the idea of
52:45 - something and so most of these lessons
52:49 - in fact I think almost all of them come
52:52 - with a K through two adaptation
52:56 - so in many cases you do it all together
53:00 - as a class so they don't have the same
53:04 - pressure or chaos that the older
53:06 - students would have they get to throw
53:09 - their ideas at you and you get to help
53:11 - them think their ideas through and give
53:14 - them a shot and so I highly recommend
53:17 - attempting these with the little ones it
53:20 - really
53:20 - is fun if you can use a couple extra
53:24 - people if you can gain a couple extra
53:25 - volunteers
53:27 - classroom management tends to be the
53:29 - biggest issue with the little
53:31 - ones great um another question that has
53:36 - a lot of votes is um how can you
53:40 - transition from blockley and scratch
53:43 - type languages which are visual uh
53:47 - block-based languages to JavaScript or
53:50 - something that's a text based language
53:53 - um this is something where if you're
53:56 - you're doing the blockly puzzles there
53:58 - is a little button in the upper right
54:00 - hand corner that says show code so you
54:02 - can always see what the blocks you have
54:06 - written what they look like in
54:09 - JavaScript um and this is something
54:12 - we're actually working on for the future
54:14 - that we're we will be developing a
54:17 - course basically that transitions a
54:19 - student
54:21 - from uh block based programming to text
54:24 - based programming so that's not not
54:26 - material we currently have ready um but
54:28 - that's something we're working on
54:30 - developing
54:33 - um Kiki do you know of anything that
54:35 - currently does something like
54:40 - that uh
54:43 - specifically
54:45 - yeah I can't think of anything right now
54:48 - okay I'm maybe that's something in the
54:50 - resources thread on the Forum if if any
54:52 - of the Educators here know of something
54:54 - like that um they can post it in the
54:55 - Forum that would be
54:59 - great uh let's
55:04 - see there is um a good one about what
55:08 - can I do to supplement and differentiate
55:10 - the 20-hour course for my Advanced
55:13 - students with the unplugged curriculum
55:17 - there are things to add on to make it a
55:20 - little more difficult and you can always
55:22 - just challenge them to come up with an
55:25 - idea
55:27 - that is The Next Step Beyond this and
55:29 - then maybe they aren't doing more of the
55:32 - lesson but they're thinking more
55:33 - thoroughly about the lesson so that they
55:35 - can create something to add to it as far
55:39 - as the blockly uh if you're allowing
55:42 - them to kind of go ahead and they
55:44 - finished the blockley lessons then
55:48 - moving them on to another
55:51 - uh programming opportunity I think is
55:55 - perfectly
55:57 - acceptable so something maybe like
56:00 - scratch or even helping them do one of
56:03 - the other tutorials like JavaScript road
56:05 - trip or uh Cod uh code Avengers
56:10 - something like
56:11 - that that way you don't have to be
56:13 - distracted from the rest of your class
56:15 - but they're still getting a step-by-step
56:18 - tutorial uh I would also say for
56:22 - students who uh finish the blockly
56:25 - activities early in a class period um I
56:29 - know some Educators like if a student
56:32 - finishes early they can walk around and
56:35 - help other students that are still
56:37 - working on that day's set of activities
56:40 - um it's not appropriate for all
56:42 - classrooms but if you have a
56:43 - conversation beforehand
56:45 - about um this is the this is a way that
56:48 - you can give advice to another student
56:51 - to help them Advance along in their
56:54 - activities if you have that conversation
56:55 - with your class you can create kind of
56:56 - like class mentors um so that's another
56:59 - option for your Advanced
57:02 - students yes yes and I see two that kind
57:06 - of go together for me that I'd like to
57:08 - touch on real quick um what are the
57:11 - first steps of getting a code.org
57:12 - curriculum into our Public Schools how
57:15 - can teachers help and for schools that
57:17 - already have a lot of implemented
57:18 - programs and administration who are
57:20 - unwilling to change course selections
57:22 - what classes or courses do you suggest
57:24 - integrate with the coding curriculum so
57:28 - uh one of the things we've had the most
57:30 - success with is starting after school so
57:34 - if you can pair up with somebody after
57:36 - school and get this stuff in after
57:38 - school people will fall in love with it
57:40 - and start begging to add it to the
57:42 - school Daye at that point if you show
57:45 - them how you can integrate it into the
57:48 - subjects they already have to do math
57:51 - science uh art music then that's a
57:55 - really help way to kind of sneak it in
57:58 - without distracting from the other stuff
58:00 - that they're trying to do I say all of
58:02 - those things English foreign language
58:04 - arts you can integrate computer science
58:07 - into all of those you just maybe have to
58:09 - choose different resources to plug in
58:13 - but blockly you certainly can talk about
58:16 - math issues up to certain levels certain
58:18 - grade levels uh algorithms you can fit
58:21 - into any math class and talk about the
58:24 - step-by-step processes for figuring
58:26 - things out functions you can even
58:29 - integrate in so I would say sneaking it
58:33 - in is the absolute best way if you are
58:36 - coming across hesitancy and sneaking it
58:38 - in through after school and letting it
58:40 - kind of drip into the school day has
58:42 - been super
58:44 - effective awesome I I would also say
58:47 - that um more and more schools are um
58:51 - including it in the school day and some
58:52 - of the resources that will'll post um
58:56 - just talk about how computer science is
58:58 - important even if you're not going to
59:00 - grow up to be a programmer because
59:02 - computer science teaches you how to
59:03 - think very critically and problem solve
59:06 - and those are skills that every student
59:08 - needs um so um there was also a question
59:13 - posted about are we um going
59:18 - to um align our stuff to Common Core
59:21 - math and English or science standards um
59:24 - we will be
59:26 - aligning our um or mapping our
59:29 - curriculum to to standards like that so
59:32 - I know that's something that Educators
59:34 - need to hit during the day so you can
59:37 - use computer science as a tool to teach
59:41 - those other subjects um so
59:44 - they're uh learning about math and
59:47 - science and English while using computer
59:50 - science as a tool so that's um something
59:52 - we'll have in the future
59:55 - um
59:56 - so let's see we are at six
60:01 - o'clock yes so we are at six o'clock
60:04 - there are a few questions that we have
60:06 - not answered yet um so I will encourage
60:10 - everyone
60:11 - to um head over to the forums and uh
60:15 - start discussion threads about some of
60:17 - the things we haven't um covered so we
60:21 - will have our sessions uh tomorrow and
60:24 - Wednesday um where we can address some
60:26 - of these topics as well um but I would
60:28 - love for the forums to be a place where
60:31 - Educators can come and get suggestions
60:34 - or advice from other Educators um so the
60:38 - Forum links are posted in the event page
60:41 - for this for these professional
60:42 - development sessions and also on
60:45 - code.org
60:46 - educate 20hr 20 hour um so I would
60:52 - really like to thank Kiki protzman for
60:55 - joining us um it's been great to have
60:57 - her here she was the one who wrote all
61:00 - of the unplugg lessons so it's great to
61:02 - have the content expert here with us um
61:06 - so I hope everyone has enjoyed the
61:09 - sessions today um we can continue
61:11 - discussions on the Forum and I um hope
61:15 - that I see everyone tomorrow at the
61:19 - sessions tomorrow and then the session
61:20 - on Wednesday um so thank you all for
61:23 - coming and I'd like to give a round of
61:25 - applause for Kiki as well uh well and
61:29 - thank you very much you did a wonderful
61:31 - job great great um so everyone have a
61:34 - wonderful night and we will see you all
61:37 - tomorrow
61:42 - bye

Cleaned transcript:

hi everyone uh welcome to code.org professional development sessions for our Krate intro to computer science course uh this is uh the first session out of a series of three uh my name is Katie aone and I am the k38 program manager here at c.org uh also today we have with us Kiki protzman of thinker Smith she's the executive director of thinker Smith she's also code.org curriculum writer and adviser um she'll introduce herself a little bit later on um I wanted to start off with a couple Administration things and just talk about how these sessions are going to work um so today's session is going to focus on the unplugged lessons of our K througha course um so we'll do a little admin portion here at the beginning we'll focus the main portion of our um one hour PD session on kind of the content of the unplug lessons um and then at the end we'll have a Q&A portion at the end um so the second session in our series will be tomorrow at 500 pm Pacific time um and the second session will focus more on the blockley online lessons of our 20hour course and then the third session will be on Wednesday this week at 500 pm uh Pacific time and that will focus more on the online dashboard system and kind of resources for educator support um and during these sessions please feel free to ask questions throughout the entire session we want to hear what you all are thinking um so please continue to ask questions during the session we'll get to ones that are relevant and then we'll have that build bulk Q&A portion at the end of each session um so I just wanted to say thank you to everyone for coming and watching um because uh uh we really appreciate you taking your time out of your day to come and watch and learn more about our materials um we've been working really hard at c.org to create great computer science materials um but we would be nothing without the Educators out in the fields doing the real work and teaching a computer science to students every day so um thank you for coming out we really appreciate it um so I'd like to encourage everyone to watch all three of these sessions we're covering different materials in each of the sessions and they're each important for different reasons um I would especially encourage everyone to watch today's session the unplugged lessons are super important to this course and really important for kids to grasp computer science Concepts it's really important for them to be able to internalize them so um while you're following the 20hour course it may be tempting to say oh yeah I I might skip the unplugged courses and just kind of not do them but I think it'll be really worthwhile for your kids and I hope that you will do them and I hope that this session provides some more insight into them and we can answer your questions on them um so let's see also we wanted to note that um if you ask questions during the session um we are going to raffle off a $50 donors choose gift code to one lucky teacher and we'll announce them um in the third session of Wednesday this week um so please continue asking questions um also in addition to these sessions I posted a few resources um for people to take a look at on the importance of Compu Compu science and um why we should be teaching this in our schools so I included some resources on the event Pages for these PD sessions um and we'll also post them in our forums along with any other resources that we may mention tonight um there's a great Ted Talk that I posted on why students should learn to code um there's a an article from the um article about uh why we should be teaching CS in our schools and also an article kind of about uh diversity and stereotypes within uh the computer science field uh let's see um also in the links are um two forums that we have for our k through eight intro to computer science course um you'll notice that one forum is for suggestions on how we might make our course better and another forum is for reporting bugs or asking questions or um just different discussion threads with Educators and you'll find um both of those links to forums listed on the event page for these PD sessions um and one other thing I wanted to mention was um we will have a uh survey about these sessions so we'd love to get your feedback on them so the survey will also be in the event page and I we'd really appreciate it if you figured it um if you filled it out after watching these um so I am very honored to hand this PD session over to Kiki protsman of thinker Smith um she can tell you a little bit about herself and then she will um spend a lot of her time going through the the bulk of the unplugged lessons um she'll be doing some screen sharing um you can feel free to open up your teacher dashboard and open up the lesson plans and follow along um and uh she'll probably be spending a little more time on the beginning unplugg lessons but we'll definitely touch upon all of them um so here we go let me hand it over to Kiki all right well thank you everybody uh I'm very excited to be here I'm really excited to be part of this program and I think that we can do amazing things when we get computer science integrated into education especially Early Education so as Katie mentioned I am Kiki protsman I'm the executive director of thinker Smith and thinker Smith believes that computer science is actually a passionate art form we think that it should be taught more as something kids are excited about in a hobby a habit than a scary curriculum so a lot of our lessons are created to bring out the enthusiasm in computer science and the artistic side and the fun of computer science and uh I'm very very pleased that code.org saw that it can add something to use your hands and to integrate this unplugged method into their lessons so I'm very happy to be doing this and I am really glad for the opportunity to kind of go over some of the lessons because I know that they can seem a little intimidating on first view for a teacher but once you understand what they're about I think that you'll really kind of enjoy them so one of the things I'm going to do is go back and forth between my screenshots and my video I'm going to start over with the screenshot and start going through the first lesson real quick here so I'm going to come down and get acrobat opened up and we will bring this into full screen mode so this is the first lesson and if all you have been able to do is the first lesson you may feel like our lessons are too lecture intensive but that's not the case the first lesson is just a little more talking than all of the others it's because there's a lot of information about about how computer science should be thought of rather than thinking of it as something that's really Advanced and only for college students how to think of it as a little more necessary and a little more exciting it also talks about balance and making sure that you aren't spending your entire life in front of a computer so I'll go ahead and get started going through this first lesson almost Page by page but you'll see that every lesson kind of has an overview of what you can expect and an objective of what you're going to learn during the lesson it also tells you the materials you're going to need in in advance so that you can look for the day make sure you have everything you need and then do your little preparation section who that goes faster than I anticipated we'll try down key there are also VOC vocabulary sections in every lesson and the teacher can decide whether they're interested in teaching the vocabulary before they start the lesson or as the word comes up if they re refer to the vocabulary section or if they want to just put the words on the board but the vocabulary is very important and one of the reasons it's so important is because getting these words into a child's vocabulary young is going to help them perceive computer science as something that is simple and Child's Play and I learned about uh data when I was in kindergarten I learned what an algorithm was when I was in the first grade and that way those words don't become sources of fear so rather than skip them or come up with new words to describe these ones I highly recommend you actually teach the proper vocabulary so the introduction section of lesson one talks about computer science and how amazing it is all of the things that you can do with computer science and how necessary that it's becoming in the world that we live in and certainly by the time most of these K through 12 students graduate it will be integral to any job that they could want in the future we put in a few questions as well things to get the students thinking for themselves you'll find that that's a huge theme in these lessons is encouraging the students to think for themselves in fact in all of these lessons it's better that they are wrong than they are given the answer so we prefer to go through several stages of incorrect so that they can adapt their answers and figure out how to solve the problem on their own sometimes that makes the lesson take a little bit longer but hopefully you'll get a feel for your class and how good they are at getting feedback from their failures and then you can adjust the timing on the lessons accordingly and that's another one of the issues is that uh because computer science is not very ubiquitous I guess it's not everywhere teachers don't often have the background that they think they should have to teach this stuff and it can keep them from teaching it at all one of the things I really urge you to think and a way to proceed with these lessons is to say I'm not going to know everything about these lessons computer science changes and it's really a vast area so there will be times you have questions and we have to look it up together there will be things that you grasp and understand that I didn't get and that's encouraged I look forward to the fact that you will understand more of this than I will and I welcome you to teach me what you've learned having that attitude will not only prevent you from teaching this but it's going to give the kids so much power and it will make this a subject that they really enjoy because they feel like they are the best at this and I think that even talking about how few people in the world do get the opportunity to do this that it's a if right now the students were to go through just the 20 lessons in the code.org curriculum they would know more computer science than 85% of people in in America so that's I think a a big thing for the students this goes under this goes over balance so you'll see there is a balance to maintain with computer science and activity so we want to encourage kids for every hour that they're sitting in front of a computer screen they should be spending at least an hour running and jumping and playing that there needs to be a balance that's maintained part of that is making sure that if you have your kids sitting for a long time working on a computer that you get them up and walk them around every once in a while also the 202020 rule which is every 20 minutes you look at least 20 feet away for at least 20 seconds and that gets your eyes some exercise and it keeps the students from getting too entranced and too or too bored on the other side so uh when kids get very engaged in what they're doing online if something isn't working right they can get really frustrated and a lot of times that frustration comes out uh in the form of aggravation maybe towards the computer and so talking about good ways to cope with that frustration is also really important getting up and taking a little walk going to get a drink from a water fountain something of that nature so then there is a balance between technology and environment and that computers use a lot of resources a lot of electricity you use a lot of paper and so making sure that you talk about recycling and turning off lights when you leave a room trying to balance out the technology use and then finally technology versus philanthropy and that's understanding that if you know something that the majority of America doesn't know you have the ability to really monopolize on that but that it's far more responsible to pay it forward to help other people learn what you've learned uh to use what you can do to help a nonprofit or to do open source work and to use open Source programs when possible instead of always feeling like you need to pay for the newest and best thing so that's kind of the the overarching idea of the unplugged side of computer science in general just making a responsible computer scientist and again you can see that's a lot of talking uh but it's really really important and after that we go into an activity and the activity is actually a lot of fun and I'm going to kind of blast through the lesson here and show you what the activity is really quickly so here's a binary decoder key I think I'll actually switch back to the video for this there while you're um switching back Kiki I just wanted to answer question about um someone asked how do I get this PDF uh if you go to learn. code.org you'll find the whole 20hour course um and you can sign up and um take your students through there and you can also just browse the course if you go to learn. code.org great thank you okay so we have here the binary decoder key and the reason it's called that is because it has every letter spelled out in asky and when I say spelled I mean that it has its code in off and on we tend to talk about binary as off and on in this series because we don't want to injure The Young Ones concept of numbers and zeros and ones at this point so we'll talk about off and on and how letters can be represented as combinations of off and on and this becomes the key for filling out one of the two sheets provided at the end of the PDF so you have these two sheets uh this one is geared more towards the kindergarten first grade age group it's just a simple strip that you you can copy the code into for your given letter and this is geared more towards the older students where they can fill in their initials first and last in one square and it's a little more complex now even older if you're going to go eighth grade or older you can actually have them write zeros and ones and have them write entire phrases on a piece of paper it just depends on the age of your students as to which activity do but what you would do for example let's go with this binary strip you would take a letter from the decoder sheet and then you would see that it's got a first it's got a first nibble here and then it's got a second nibble and those two nibbles together form a bite so it's eight bits of information it's a bite and that's what makes a letter so in this one you have off on off off and then you have off off off on and you would just take that and transfer it to your sheet here you would have off on off off and then off off off on and they may depending on the amount of time they have colored more nicely than I did but that's the point of this lesson you can make it take a lot longer if you want to do several sets of letters if you want to do letters and then switch and have someone guess what letters you did there are a lot of ways to make this take longer but it's about a 10minute activity in and of itself if you're tacking it on to the end of your big explanation lesson then it can be anywhere from 45 minutes to an hour so that's lesson one and I'm going to also go over lesson three pretty thoroughly because that's another lesson that can be slightly confusing and then the rest of them I will go through a lot more quickly because they're a lot more intuitive so lesson three let me switch to the screen share again here if it lets me Katie are you seeing a go to screen share not yet okay all right maybe I won't I'll just have you at home take a look at your PDFs for it's considered lesson three because there is a lesson in between the introduction and this lesson that is online so we'll start with this one and this is is about computational thinking and one of the reasons that it might feel complicated is because it's going over the four ideas of computational thinking in one lesson and it's breezing over all of them with one activity so the four ideas are decomposition uh pattern matching abstraction and algorithm and so what we have here is these little monsters and all the monsters are in your PDF and you want to have the kids look at all the different monsters in the book and try to decompose the monster there's a joke in there somewhere um you want to decompose them into their parts and so you want to say well this monster has if you look at these These are the types of features a monster could have so if you said this monster has vegeto eyes and this monster has uh a Sprite of nose and this monster has a I don't know A Wack mouth so if you look at each individual piece of a monster you can decompose it into smaller bits that are easier to work with the next thing is the pattern match and in this lesson the idea of that oh that's what happens when you have like motion sensing light okay so the idea of the pattern matching is then to say that well the pattern is that they all have eyes they all have a nose and they all have a mouth so those are patterns that I can find between all of them and then in this lesson the abstraction portion is to say how can I take the fact that they all have similarities and kind of hide the fact that they're different similarities so their eyes are different kinds of eyes but they all have eyes and through this series our concept on abstraction is basically creating a blank so you would say the zombie has blank eyes you don't need to say it has vegetos eyes and so you can say this has blank eyes this has blank eyes this has blank eyes and then you fill in the blank when you get to the part where you're describing the particular monster so that's what the abstraction is for this piece you can think of abstraction we'll get to this later but abstractions kind of like a mad lid where you could have one specific story but by just adding some blanks instead of certain words you turn it into a canvas for lots of different stories so that's the idea that we're trying to get across with that part and then finally the algorithm and for this one the algorithm is simply choosing a monster or creating your own and then writing an algorithm using the steps to create the monster so first choose a vegeto head then choose a whacka mouth then choose a sprum nose and you put it all together and then you see if the person can try and figure out what the monster is that you were thinking of so that's the piece and when you look it all over on your own it may seem a little complicated but when you work it out step by step and understand what each of the steps is for this activity it's really a lot of fun and the kids can have a good time creating their own monsters and giving their own features names so that's that one now I'm going to try again to do the screen share and and it's obviously not working because it's still showing the camera there must be a two screen share limit if you click on something else when you drag your mouse over to the left side of the screen nothing pops up yeah I'm clicking on screen share but then it doesn't give me the window that lets me choose what window I want to share and it just does nothing so we may have to go with only the pieces I printed up and hope that everybody has access to a PDF or will by the time they watch the recording or everyone can visit learn.co dog and pull up the PDFs as we follow along if you click on the lesson number that Kiki references you can see the PDF and when it says open lesson plan yes okay I'm just going to try clicking a few buttons and see if my screen share capability comes back but it doesn't look all right so the next one is called graph paper programming and this one is a lot of fun because you really get in the idea of the difference between an algorithm and program so you start out with a picture and in the simplest case it's just a box with different colors filled in and you have to figure out given just a simple key of possible symbols how to get your friends to be able to draw the picture in your box now I've got a little sample here that we can go over there's lots of ways to achieve this and if you want to start out with your class saying the words for each of these things it gives them an idea of the Simplicity of it so if you're going to start here you color your box and then you move over one and then you can step back and go down and this one's blank so you move one and then you color this one and because it's so small that you can't really see the point in going backwards before you come down but if there were 20 squares across and then 20 rows of those then you would want to go all the way across and then you'd want to come back and go down and go all the way across and come back and go down and pretty soon people will see that there's some redundancy there and they may want to simplify that and that's a good thing to do later on in the exercise but for now if you tell them we're just going to go all the way across come back and go down that way you understand what the code is so that's what we have going on here we color we step over then we have to come back and go down pretty soon they'll notice anytime they have a combination like this that's a redundancy and they can get rid of it because it means go over once come back and you're not doing anything in between there are other ways to program this out too for example you could color it go over one then go down to this square and then color it and really you're done but if they want to come over to this Square just so that they acknowledge it's there you can go that way so there's lots of different ways to do this and that's something that's valuable for the students to see is that they can do the same thing many different ways and then when you talk about the difference between actually saying color the square and drawing that scribble that's the difference between an algorithm and the code that goes along with the algorithm so that's really all this lesson is doing is is giving you programs to draw a picture using symbols that's that lesson kids have a lot of fun with that one it's very entertaining and it comes back later so there's another lesson that builds on what you use in what you do in that lesson and it's a little bit more active and I'll get to that one in a minute the next one is lesson that is purely on algorithms so it's trying to give you an idea of what algorithms are and why they're important the very first lesson of that actually starts with just a piece of folded paper so what you want to do is try to get your kids to figure out how many ways there are to fold a piece of paper like this so when you open it up you want your piece of paper to have exactly this shape all of these squares in this shape and you'll quickly notice that there's several ways to get this exact same crease pattern in your paper and in the PDF it talks about folding this is a hamburger fold when you fold it so that the the paper folds along the wide Edge or uh across the wide Edge so that's the hamburger fold and then when you're folding the Long Way making a crease the long way that's a hot dog fold and so if you give the kids that terminology they have a quick way to keep track of how they folded their paper so they'll say well I got this one by doing hamburger hot dog hamburger hamburger that's how I ended up with it this time but somebody else might do hot dog dog hot dog hamburger hamburger and the interesting thing is that the number of steps can change so it could take four folds to get this pattern and if you do it a different way one two 3 4 5 six bolds so obviously one way is more efficient than the other and that's what this little piece of paper teaches the students uh the same lesson goes on to talk about explaining the algorithms and how important it is that you are able to accurately put a problem into words so a real world problem might be we have these shapes and we want to cut them out and lay them into this pattern that's fine except for if you're trying to get the idea across to a computer you're going to have to tell it put the green triangle on top pointing in a certain direction put the purple triangle below it make sure it's touching and in the center but it's got to be lined up with one Edge and then you got to put the pink triangle on and the yellow triangle on it's kind of an alternative to the peanut butter jelly sandwich if anybody's heard that method you have your students try and tell you how to make a peanut butter jelly sandwich and you intentionally misinterpret the instructions to make a big mess instead it's same kind of idea you need to be very clear on your instructions so that you're guaranteed to end up with the correct picture all right moving right along we have lesson eight so lesson eight is making suncatchers so my students end up with something sort of like this and not only is it a fun little activity in a takehome which the kids love having takehome reminders of what they did but it's also a lesson in functions and in variables so you'll see at the end of the PDF that there's a page that looks something like this and it talks about using skills and a program what you can do is you can talk to your students about how you create the sun catcher you say well I take my string and I put a bead and tie it and then a hoop and then tie it bead then tie it hoop then tie it and then I put on my special charm at the bottom and if you go over that a couple of times they'll get the point of bead tie hoop tie bead tie hoop tie special charm so then you go in and you try to write it down in your program okay I'm going to write the instructions down for you so that you can use them again be tie hoop be tie hoop tie bead tie hoop tie and it's not long before you run out of lines so then you say okay well we run out of lines but we have these two extra sections up here that we can use and anything we store in this skill we can call from the program so if we were to put two instructions up here we could call skill one and get two instructions out of one program line and then you challenge them to figure out how to use these to create their program so what happens is these become functions so skill one is actually one function and if you wanted to put bead Tha hoop tie in skill one and special charm tie in scale two then you could call skill one skill one skill two and that's your program another great thing is to use this as an opportunity to talk about variables so what we will do is I'll tell my students I don't know what bead you have your bead might be green your bead might be red I don't know what bead you have but I'm just going to use if my marker works I'm just going to use this symbol to indicate that we're going to put a bead on this is my variable I don't know what your bead is but I'm going to use this symbol so that I can keep going and write you a program anyway not knowing what bead you have and then you can say this is what hoop looks like I don't know what kind of Hoops you're using but if I have the symbol to to say whatever hoop you have this is where you put it that's a variable and then you can do tie something like that and then special charm like this because I don't know what your special charm is maybe you have a butterfly maybe you have a snowflake but I'm going to use this to say put on your special charm and then you can instead of writing bead hoop bead hoop you can use the drawings on there or I guess similarly inad instead of drawing a bead you could just write bead and bead indicates whatever bead they have so in this lesson you actually get to use variables functions programming and put it all together into one really fun activity with a really cute take home okay so let me make sure there any questions yet on any of those that I should stop for um well we just had one that said how do you how do you explain functions to your students um if you had a definition what would you say it would be I say functions are a really simple term for describing something that happens over and over again so instead of writing a 100 lines 10 times in your program you write one you write your 100 lines once and give it a name and you call that name so you'll see in another lesson we're about to get to Lesson 12 that I compare it to writing a song so I talk about a function almost like a chorus in a song where you write the definition of the chorus one time and then the rest of the song Long whenever you see the word chorus you don't sing chorus you go up to where chorus was defined and sing the lines under chorus so that's how I Define functions for my cool and we are kind of running shorter on time so I do want to get to all these unplugg lessons so let's let's continue sure so now we're at lesson 10 and lesson 10 is one of my favorites it's easily adaptable for any age because you get to choose the program that you use so this is a card game and we try and involve the student by giving each student at their desk a card to hold that the other students don't know what it is now in a very young group you can have uh one student that goes around and picks you can have the teacher go around and pick and you can make the rules really really simple in a group of older kids eighth graders or above you can have small groups of four that play it together and they just draw from a stack the adaptation of it is up to you and your students but the point is you have some sort of program for example we say well we're going to give a JavaScript program that says if the color of your card is black then your team gets a point added to their score otherwise they get a point taken away from their score so you start with a deck of cards and then you would draw a card and this one is black and that means that the person who drew it the team that Drew it gets a point added to their score and then the next person gets to go and they choose another card or pick another student who has card at their desk and they look and this one is red and so there' be a point taken away now that's a pretty simple program for anybody over say third grade you can start making them a lot more complicated you can say if the card is even and red then you do this if the card is less than four then you do that if the card is a heart then you do this and you can string them all together and it's a really good way to learn about conditionals and even loops and all sorts of other functional programming ideas just with the luck of a Java card so I definitely recommend you give that one a read and try it out you can adapt the program to be as simple or as difficult as you need then I just covered Lesson 12 which was the functions through singing uh it it's there's a little more to it in that we talk about passing parameters to a function and for that we use Old McDonald so Old McDonald has a chorus and the chorus is similar for every verse but it has some things that change so we talk about passing certain words through like dog and bark and then you can see the chorus given those two words and we talk about adding more parameters and we start out not using any at all so that's a fun I'm going to give the screenshot one more try because that is where I ended with printouts because the rest of them become fairly easy to describe just looking at the PDF but uh it's still not working so I'm going to move on to lesson 14 in lesson 14 if you look at your PDF you will see that it is very similar to mad lips so we start about just kind of taking your class by surprise you say hey what did you have for waffles this morning and when people are confused you're like nobody okay what did you have for toast yesterday and then hopefully the kids will start to pick up on it and you say see when you're too specific about an item you don't reach as many people and the same thing happens in programming when you're too specific about what a function does it doesn't solve as many problems so we're going to learn how to abstract that away and make it a little less specific so how would you make what did you have for waffles this morning less specific so then they talk about will you say breakfast what did you have for breakfast and then you could get it to even more Meals by saying what did you have for a meal or even just leaving that blank and say what did you have for a blank and the same thing kind of happens with stories you take a couple stories and you compare them and where two words are different in the story you create a blank and that goes into uh a whole example of madlabs and so they're able to fill in their own blanks in a story and they are able to then create their own stories that they can then turn into stories with BS so that's how that one works Lesson 16 calls back the lesson that we did with the graph paper programming let me just reach for that real quick so Lesson 16 comes back to this idea but instead of doing it at their desks in a classroom they have a relay race so you line them up on one side of the room ideally maybe they're outside or in the gym for this one on the other side they have the image that they're trying to draw what you'll do is you'll have the first person in the race run up grab a pencil look at what they're trying to program and write only the first instruction they then have to run back to the end of the queue the next person runs up looks at what was already programmed and then draws the second instruction this is a good way to get them thinking really quickly and what you get to test is your ability to look at what other people have done come into something in the middle and figure it out check for errors because if there's an error their only thing they can do that term is cross out the error they can't can't even fix and then also just programming under pressure and how much harder it is to get it right when you know that you're competing against your classmates that's so we're almost through these here lesson 18 is about the internet this one changes depending on the age so you're able to put in much more information about the internet and what it does and what it's good for if you're with older kids if you're with younger kids just getting across the idea that your message is broken up into lots of pieces and transferred through an actual physical cable of some kind or through the air is a really important notion for these kids because they might not understand that so in this one you take the concept of having a message that you need to deliver to another student then you talk about having to divide it up into pieces that can fit through the bandwidth and depending on the method you're using to deliver it you get to actually carry it differently to the end recipient so some people are allowed to carry it in their hands some people have to carry it on the back of a hand other people have to carry it on top of their head and it just depends on what whether you're using fiber optic cable or telephone wires or WiFi so that's how that one goes it's a fun little activity it feels much more like a game than like a lesson but that's good and finally we come to the wrapup so the wrapup is where you take the lessons that you've done in the past and you challenge your students to do mashup and combine a couple of different lessons into one so you give them a table full of materials and you say okay everybody pick two lessons or three lessons and figure out a game or an activity or a craft that you can make to combine those three lessons into one and you just give them the chance to process what they learned uh to see whether something's going to work maybe it doesn't work but they thought it was going to be a good idea it's a really creative process and there doesn't have to be a right answer just the exploration is exercise enough so those are the offline lessons they are lots of fun and very helpful and I hope that you enjoy them and feel comfortable giving them a shot if you have any questions there is a forum available for you to post your questions and we can help you out any way that you need us to yeah um The Forum link is posted on the event page for this these professional development sessions and it's also on um you go to code.org educate sl20 hour the number 2020 and then HR um and uh um I'd love to start answering some of these questions we have a lot of great questions from people here um the one with the most votes uh says will will code.org be developing more free curricula or will districts have to purchase them in the future um all of our stuff is free and will continue to be free so please use it uh yeah we just we have free things and we want you to use them uh and we are working on more or at least more versions of what's already out there yes yeah um so the stuff we develop in the future will be free as well um in the coming year so in 2014 we'll be developing uh courses for specifically for K through two so specifically for that grade range um a course specifically for thir third through fifth graders and then two courses for middle schoolers um let's take some other questions that have a lot of um votes um so someone else is looking for good HandsOn resources on computational thinking um for elementary and middle school students um we will post a resources thread on the forums um so after this session um we'll post more resources on our forums where we can send you things about computational thinking and someone else also wanted um resources about um more about the binary subject uh more advanced um resources on binary so we can also post some on the Forum as well for that um let's see and Kiki if you see any questions you like to to jump in and answer please go for it um I actually like this one what's the best way to teach a set of 22 first graders code uh thinker Smith does teach all the way down to kindergarten and one of the things that we do is we actually go into the classroom to teach it for the teacher so we've got experience teaching a wide range of Ages and all of these activities do work the unplugged activities do work for grades K through adult the difference is with the kindergarteners you need to break them up a little differently and you need to think of it not as I'm trying to get these 12 ideas across to them but I'm trying to introduce them to the idea of something and so most of these lessons in fact I think almost all of them come with a K through two adaptation so in many cases you do it all together as a class so they don't have the same pressure or chaos that the older students would have they get to throw their ideas at you and you get to help them think their ideas through and give them a shot and so I highly recommend attempting these with the little ones it really is fun if you can use a couple extra people if you can gain a couple extra volunteers classroom management tends to be the biggest issue with the little ones great um another question that has a lot of votes is um how can you transition from blockley and scratch type languages which are visual uh blockbased languages to JavaScript or something that's a text based language um this is something where if you're you're doing the blockly puzzles there is a little button in the upper right hand corner that says show code so you can always see what the blocks you have written what they look like in JavaScript um and this is something we're actually working on for the future that we're we will be developing a course basically that transitions a student from uh block based programming to text based programming so that's not not material we currently have ready um but that's something we're working on developing um Kiki do you know of anything that currently does something like that uh specifically yeah I can't think of anything right now okay I'm maybe that's something in the resources thread on the Forum if if any of the Educators here know of something like that um they can post it in the Forum that would be great uh let's see there is um a good one about what can I do to supplement and differentiate the 20hour course for my Advanced students with the unplugged curriculum there are things to add on to make it a little more difficult and you can always just challenge them to come up with an idea that is The Next Step Beyond this and then maybe they aren't doing more of the lesson but they're thinking more thoroughly about the lesson so that they can create something to add to it as far as the blockly uh if you're allowing them to kind of go ahead and they finished the blockley lessons then moving them on to another uh programming opportunity I think is perfectly acceptable so something maybe like scratch or even helping them do one of the other tutorials like JavaScript road trip or uh Cod uh code Avengers something like that that way you don't have to be distracted from the rest of your class but they're still getting a stepbystep tutorial uh I would also say for students who uh finish the blockly activities early in a class period um I know some Educators like if a student finishes early they can walk around and help other students that are still working on that day's set of activities um it's not appropriate for all classrooms but if you have a conversation beforehand about um this is the this is a way that you can give advice to another student to help them Advance along in their activities if you have that conversation with your class you can create kind of like class mentors um so that's another option for your Advanced students yes yes and I see two that kind of go together for me that I'd like to touch on real quick um what are the first steps of getting a code.org curriculum into our Public Schools how can teachers help and for schools that already have a lot of implemented programs and administration who are unwilling to change course selections what classes or courses do you suggest integrate with the coding curriculum so uh one of the things we've had the most success with is starting after school so if you can pair up with somebody after school and get this stuff in after school people will fall in love with it and start begging to add it to the school Daye at that point if you show them how you can integrate it into the subjects they already have to do math science uh art music then that's a really help way to kind of sneak it in without distracting from the other stuff that they're trying to do I say all of those things English foreign language arts you can integrate computer science into all of those you just maybe have to choose different resources to plug in but blockly you certainly can talk about math issues up to certain levels certain grade levels uh algorithms you can fit into any math class and talk about the stepbystep processes for figuring things out functions you can even integrate in so I would say sneaking it in is the absolute best way if you are coming across hesitancy and sneaking it in through after school and letting it kind of drip into the school day has been super effective awesome I I would also say that um more and more schools are um including it in the school day and some of the resources that will'll post um just talk about how computer science is important even if you're not going to grow up to be a programmer because computer science teaches you how to think very critically and problem solve and those are skills that every student needs um so um there was also a question posted about are we um going to um align our stuff to Common Core math and English or science standards um we will be aligning our um or mapping our curriculum to to standards like that so I know that's something that Educators need to hit during the day so you can use computer science as a tool to teach those other subjects um so they're uh learning about math and science and English while using computer science as a tool so that's um something we'll have in the future um so let's see we are at six o'clock yes so we are at six o'clock there are a few questions that we have not answered yet um so I will encourage everyone to um head over to the forums and uh start discussion threads about some of the things we haven't um covered so we will have our sessions uh tomorrow and Wednesday um where we can address some of these topics as well um but I would love for the forums to be a place where Educators can come and get suggestions or advice from other Educators um so the Forum links are posted in the event page for this for these professional development sessions and also on code.org educate 20hr 20 hour um so I would really like to thank Kiki protzman for joining us um it's been great to have her here she was the one who wrote all of the unplugg lessons so it's great to have the content expert here with us um so I hope everyone has enjoyed the sessions today um we can continue discussions on the Forum and I um hope that I see everyone tomorrow at the sessions tomorrow and then the session on Wednesday um so thank you all for coming and I'd like to give a round of applause for Kiki as well uh well and thank you very much you did a wonderful job great great um so everyone have a wonderful night and we will see you all tomorrow bye
