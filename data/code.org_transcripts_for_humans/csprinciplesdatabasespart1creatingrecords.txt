With timestamps:

00:05 - My name is Michael, and I'm the chief technology officer at ChefSteps.
00:10 - At ChefSteps, we're using software,
technology, hardware, and video
00:14 - to help people be better cooks and to cook more!
00:17 - For our website, every single thing you can imagine is stored in a database,
00:20 - so every recipe is in a database, there's nested tables for every ingredient, every piece of equipment,
00:24 - every step of the recipe, every video of a recipe.
00:27 - WIthout a database our business really wouldn't exist.
00:32 - Many of the popular websites and apps you use share information like photos, status updates,
00:37 - or messages with others. How can your friend access information on your device from their device?
00:42 - The answer is: the info isn't being stored on your phone, nor is it sent directly to your friend.
00:48 - Instead, the app uses a network of remote servers to permanently store and access sharable data.
00:54 - When you post an image to your account, it is uploaded over the internet to one of these servers.
00:58 - When your friend logs into their account, the web request is made.
01:02 - The server finds where the photo is stored and sends it to your friend's device.
01:06 - The server acts as a central hub, ensuring that the information is permanently stored
01:11 - and available for multiple users to access.
01:13 - Sometimes we call this network of servers "the cloud",  and its at the core of most apps you use.
01:18 - Servers sort information using databases. A database is any organized collection of data.
01:23 - There are many ways to structure a database, but one of the most common is as a collection of rows and columns.
01:30 - When you post new information to your account, it will be added to the appropriate database tables
01:35 - so that the server can quickly find it when it is requested later.
01:38 - Let's have a look at how we can create and use remote databases in AppLab.
01:42 - Let's make a very simple app that asks users their favorite food, and saves answers to a database.
01:48 - With this information, we can compare results from all the users.
01:52 - We've set up the first step which grabs the user's favorite food, and logs it to the console.
01:57 - In AppLab, you can save records to the remote database, using the "createRecord"block in the data category.
02:02 - We want the data to be saved when user clicks the submit button,
02:06 - so we'll place the block inside the "onEvent" function.
02:09 - The createRecord command takes three parameters. First, the table name.
02:14 - This is where you'll store a new row of data.
02:16 - When you give a table name, AppLab will try to find a matching table to the one you provided.
02:21 - If it does not find an existing matching table name, it will make a new table with that name.
02:26 - Let's call our table Fave Foods.
02:29 - The second parameter of createRecord is the object you are storing in the database, called a record.
02:34 - In AppLab, a record is an object. A table is a collection of objects stored in the cloud.
02:40 - In our example, we want the column name to be "food", and the value in that column will be the string the user provided,
02:45 - which we stored in the variable 'response'.
02:47 - The third parameter is the callback function. The onEvent callback function gets called
02:53 - when the user triggers the specific event you are watching for.
02:56 - The callback function of a database command, like createRecord, gets triggered
02:59 - when the remote database completes the action and sends a message back.
03:03 - In the case of createRecord, the database simply sends back a copy of the record that was stored
03:09 - as verification that it was done successfully.
03:11 - Let's try our simple app. We'll put in a few different foods: apples, pizza, then apples again.
03:18 - So, what happened? Did the records
successfully get created in a remote database?
03:24 - We do see the string "record created" in the console that confirms the database executed the command,
03:29 - but ideally we would see the table and all the records themselves.
03:33 - Fortunately AppLab allows you to view the data your app has stored via the Data Viewer.
03:39 - We'll find out more about that in the next
video.

Cleaned transcript:

My name is Michael, and I'm the chief technology officer at ChefSteps. At ChefSteps, we're using software, technology, hardware, and video to help people be better cooks and to cook more! For our website, every single thing you can imagine is stored in a database, so every recipe is in a database, there's nested tables for every ingredient, every piece of equipment, every step of the recipe, every video of a recipe. WIthout a database our business really wouldn't exist. Many of the popular websites and apps you use share information like photos, status updates, or messages with others. How can your friend access information on your device from their device? The answer is the info isn't being stored on your phone, nor is it sent directly to your friend. Instead, the app uses a network of remote servers to permanently store and access sharable data. When you post an image to your account, it is uploaded over the internet to one of these servers. When your friend logs into their account, the web request is made. The server finds where the photo is stored and sends it to your friend's device. The server acts as a central hub, ensuring that the information is permanently stored and available for multiple users to access. Sometimes we call this network of servers "the cloud", and its at the core of most apps you use. Servers sort information using databases. A database is any organized collection of data. There are many ways to structure a database, but one of the most common is as a collection of rows and columns. When you post new information to your account, it will be added to the appropriate database tables so that the server can quickly find it when it is requested later. Let's have a look at how we can create and use remote databases in AppLab. Let's make a very simple app that asks users their favorite food, and saves answers to a database. With this information, we can compare results from all the users. We've set up the first step which grabs the user's favorite food, and logs it to the console. In AppLab, you can save records to the remote database, using the "createRecord"block in the data category. We want the data to be saved when user clicks the submit button, so we'll place the block inside the "onEvent" function. The createRecord command takes three parameters. First, the table name. This is where you'll store a new row of data. When you give a table name, AppLab will try to find a matching table to the one you provided. If it does not find an existing matching table name, it will make a new table with that name. Let's call our table Fave Foods. The second parameter of createRecord is the object you are storing in the database, called a record. In AppLab, a record is an object. A table is a collection of objects stored in the cloud. In our example, we want the column name to be "food", and the value in that column will be the string the user provided, which we stored in the variable 'response'. The third parameter is the callback function. The onEvent callback function gets called when the user triggers the specific event you are watching for. The callback function of a database command, like createRecord, gets triggered when the remote database completes the action and sends a message back. In the case of createRecord, the database simply sends back a copy of the record that was stored as verification that it was done successfully. Let's try our simple app. We'll put in a few different foods apples, pizza, then apples again. So, what happened? Did the records successfully get created in a remote database? We do see the string "record created" in the console that confirms the database executed the command, but ideally we would see the table and all the records themselves. Fortunately AppLab allows you to view the data your app has stored via the Data Viewer. We'll find out more about that in the next video.
