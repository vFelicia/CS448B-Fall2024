With timestamps:

00:05 - If you want to animate a single shape in Game Lab, you can quickly end up with a lot of variables to manage.
00:13 - You'll need one to store the shapes 'X' position, 
one to store the 'Y' position,
00:18 - one for width, one for height 
and as you add fills, strokes, and
00:22 - other characteristics, you'll need even more variables.
00:27 - If you want to animate additional shapes, you'll need to create a whole other set of variables.
00:32 - All this can quickly lead to problems with
organization and clarity in your code.
00:38 - So, what's an elegant and manageable way to
keep track of all these variables?
00:43 - The solution is to start animating with sprites.
00:47 - Think of a sprite like a character that lives inside your
animations.
00:51 - At first, a sprite will pretty much just be a rectangle,
00:56 - but the beauty of a sprite is what it has going on behind the scenes.
01:02 - When you make a sprite, it comes with properties, which are variables that store the characteristics of a sprite.
01:09 - Properties describe things like
01:11 - where the sprite is located on the screen, 
what it looks like, and what color it is.
01:17 - To create a new sprite, use the
create sprite command.
01:21 - You can assign your sprite a label 
just like you would a variable.
01:25 - This code is creating a new sprite and giving it the label "mySprite", but you can label it anything you'd like.
01:34 - Just like shapes, sprites need to be drawn to the screen.
01:37 - Use the drawSprites() command 
to see your sprite appear in the display area.
01:44 - You can control a sprite's properties 
in your program by using 'dot notation'.
01:49 - First, connect the label of the sprite to the label of the property with a dot.
01:56 - Now you can use this just like a variable.
02:00 - So for example, 'mySprite.x' gets 200
will update the sprite's 'X' location to 200.
02:08 - And 'mySprite.width' gets 50
will update the sprite's width to 50.
02:13 - The next time you call drawSprites() these new property values will be used to draw the sprite.
02:20 - Sprites can have tons of properties.
02:22 - As you get familiar with them, they'll give you powerful controls over what your sprites look like and can do.

Cleaned transcript:

If you want to animate a single shape in Game Lab, you can quickly end up with a lot of variables to manage. You'll need one to store the shapes 'X' position, one to store the 'Y' position, one for width, one for height and as you add fills, strokes, and other characteristics, you'll need even more variables. If you want to animate additional shapes, you'll need to create a whole other set of variables. All this can quickly lead to problems with organization and clarity in your code. So, what's an elegant and manageable way to keep track of all these variables? The solution is to start animating with sprites. Think of a sprite like a character that lives inside your animations. At first, a sprite will pretty much just be a rectangle, but the beauty of a sprite is what it has going on behind the scenes. When you make a sprite, it comes with properties, which are variables that store the characteristics of a sprite. Properties describe things like where the sprite is located on the screen, what it looks like, and what color it is. To create a new sprite, use the create sprite command. You can assign your sprite a label just like you would a variable. This code is creating a new sprite and giving it the label "mySprite", but you can label it anything you'd like. Just like shapes, sprites need to be drawn to the screen. Use the drawSprites() command to see your sprite appear in the display area. You can control a sprite's properties in your program by using 'dot notation'. First, connect the label of the sprite to the label of the property with a dot. Now you can use this just like a variable. So for example, 'mySprite.x' gets 200 will update the sprite's 'X' location to 200. And 'mySprite.width' gets 50 will update the sprite's width to 50. The next time you call drawSprites() these new property values will be used to draw the sprite. Sprites can have tons of properties. As you get familiar with them, they'll give you powerful controls over what your sprites look like and can do.
