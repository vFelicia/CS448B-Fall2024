Array is an important concept in computer programming and array is a data structure that is most often used to build complex or composite data structures like stacks and queues In this lesson we will talk about arrays and we will see using some programming constructs what all different operations we can perform using arrays and how arrays are stored in computer's memory We define an array as a collection or a systematic arrangement of objects of the same data type and a typical definition or declaration of an array would look something like this So, an array definition will have a datatype In this case, we have an array of integers and then we'll have the variable name and we will also have the size of the array Now, where does this concept of array fit in programming Let's say, in a program we want to store the marks of fifty students in a class in let's say mathematics Now, in our program to store these values we can declare fifty different integers variables like s1,s2,s3 all the way till s50 so we kind of declare fifty different variable names corresponding to these fifty students now let's say we want to calculate the average marks of all the students so to calculate that we will have something like a totla of all the marks so we'll have a variable 'total' this total will be equal to s1 + s2 + s3 and all the way till s50 and average would be totally divided by 50 but what if we had 500 students or even more it would be very unmanageable to declare 500 variables and use them in our statements so in these cases we declare an array. So let's say we declare an array 's' with a size 50 and this array is runner of integers now in this case also i have fifty different variables and I access them as s[0],s[1],s[2] and so on we start at index 0 and we go all the way till index fortynine and our program will be something like we again have variable 'total' and this time we run a loop from zero to forty nine and we used the variable i as index and keep on adding s[i] to total and finally we calculate average as before which is total upon 50 this was an array of integers we can also have an array of float or array of character or an array of userdefined class or structure and this was a simple onedimensional array we can also have arrays of 2dimension or 3dimension let us not seen how arrays are stored in computers memory okay let's say this figure in the left here is computer's memory which is divided into these segments or partitions and each segment is one byte of memory. infact we are only showing a part of the memory in the form of these segments or partitions and that's way it is extending towards the bottom and the top because in reality the memory will have many more bytes in fact computer's memory is a very large array of bytes now in computer's architecture each byte of the memory has an address Let us assume that here bottom most byte which will be somewhere deep down here has address 0 and as we go on towards the top we go on increasing the address like 1, 2 and so on so let's say for example if this particular byte has an address 100 then this particular byte will have an address 101 and we will go on like 102,103 and so on and as we know in C and C++ we have pointer variables that can store the address of another variable now when we define an array something like an integer array, let's say for example of size 4 then if an integer typically takes four bytes of memory then an array of 4 integers will take sixteen bytes of memory when the program executes the computer allocates sixteen contiguous bytes in memory for this array A so the computer kind of allocates 4 contiguous blocks of 4 bytes each the first block or the first 4 bytes will correspond to A[0] and the next four bytes or the next block will correspond to A[1] and similarly we will have A[2] and A[3] as well now access to an element in an array or it's modification all of it, all of these operations take constant amount of time and it is not a function of the size of the array or in other words we can say that the time complexity for accessing or mortifying an element in the array is O(1) now how does this really happen ? Let's try to understand When we declare an array like say for example here we have declared an integer array of size 4 then this variable A is nothing but pointer to the first element in the array and we can also say that variable A is a pointer that points to the base address of the array and this is better explained in a real program So let's go to a compiler and write some code So i will write a simple c program here what I will you do is I will declare an array A of size 4 an integer array and as I told you earlier A is nothing but a pointer for the first element in the array so if we tried to print A and i have written a simple printf statement which is the statement to print a variable on the console then this should give me the base address or the address of the first element in the array now run this program and we get an output which is equal to two nine four seven two four zero and this should be the address of the first element. But how do we know that this is the address of the first element well we can print the value at this particular address and as we know to print the value at an address. of pointer variable points to we need to put a star in front of the pointer valuable in C and C++ so star A should give us the value at the base address the value of the first element in the array. so *A is same as A[0] and let us now see what we get okay so the we got an address in the first line and this address is different from the previous address because every time the program runs afresh the memory allocation will be different and the value that we are getting is some garbage value this is happening because we have not yet initialized or filled any data in the array so what i will do here is I will fill some data. Let's say A[0] is 1 A[1] is 3, A[2] is 4 and A[3] is 5 and now if we run this again the first line once again gives us the address of the first element and the second line gives us the value of the first element and that's correct now i do something else here I will print A plus one and if we know the basics of pointer arithmetics then because A is a pointer to an integer then A plus one should increament the address by four bytes which is the size of the integer and take us to the next integer. So A plus one should give us address of the second element in the array and whether this address is correct or not is something that we can verify by looking at the value at this particular address and if I am correct then this should be * of A plus one should be A one or the second element of the array Let us now run this okay so first line is the address of the first element and as you can see the second address which is the address of the second element is 4 more than that as of the first element and we have got the values right A[0] is 1 and A[1] is 3 so now it should be evident why accessing or modifying an element in array takes constant time when we try to access an element in the array computer first calculates the address of this particular element using base address and offset. So for example if we want to access the fourth element in the array which is A[3] then the address is calculated from the base address by adding the offset 3 and the value at this particular location will give us A[3] all this pointer arithmetics that we re doing here are possible only on C and C++ and if you are using the language like java, you do not have explicit pointer variables but still the internal working of how things happen in memory will be pretty similar so this was some of the basics about arrays and how they are stored in memory and how they are interpreted in a computer program in the coming lessons we will talk more about arrays and solve couple of problems so thanks for watching