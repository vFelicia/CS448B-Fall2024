in this lesson we will be talking about one more scenario in which the concept of arrays and pointers go together and this scenario is when you pass an array as function argument let us see a code example where we pass array as function argument and try to analyze it i will write a simple C program in which i will write a function that will give me the sum of all the elements in an integer array this function will take an integer array as argument this is one of the ways to pass an integer array an array in general as argument this would be data type and this would be the name of the array and in the main method we have declared an initialized an array named A Now in the main method we will call this function sumOfElements and pass this array A as argument and of course we need to write the body of this function sumOfElements i will declare two variables i and another variable sum and initialize it to zero 'i' will be used to run a loop so we will iterate through all the elements in the array A that is passed as argument but wait a minute we do not know the size of the array A is there some way to know the size of the array one of the ways to find out the size of the array and by the size of the array we mean the number of elements in the array here is to use the function sizeof so if we write something like sizeof A here in the main method then this will give us the size of array A in bytes array A has five integers and in a typical compiler and i know for sure that in this compiler an integer is stored in four bytes so size of A will return twenty if we want to know the number of elements in the array then we can do something like divide the size of the size in bytes of the whole array by size of one integer so we will say size of A upon size of each integer in byte the size of A[0] would give us the number of elements in the array and i will write this particular line below this line the line where we are calling the function sumOfElements now what we can do is we could either pass the size of the array as another argument so that would be cool and then we can run the loop starting zero till index size minus one and we keep on adding each element to this variable sum and finally we return sum and finally we will write a print statement something like this to print the sum of all the elements in the array let us now run this program and see what happens the output on console is that the sum of elements is equal to fifteen fight plus four plus three plus two plus one is fifteen so this is all right now what i want to do is i want to modify this code a little i do not want to pass this size as argument here i want to calculate the size of the array inside this function so we will not be passing the sizes argument here so there will be just one argument the array so we have this array as argument the array A and we calculate the size here as total size of the array in bytes upon the size of one integer in bytes let us now run this program and see what happens oops there seems to be some problem because the sum of elements that we have as output on console here is equal to one it should be fifteen and why is it so to explain this behavior i will write to mort print statements one in the function sumOfElements where i will print the size of A and the size of A[0] i will be calling these two function sizeOf upon A and upon A[0] respectively and we will write one more print statements in the main method it will again be the same thing printing the size of A in bytes and the size of A[0] in bytes let us now see the output in the method sumOfElements size of A is equal to four bytes size of A[0] is equal to four bytes in the method main size of A is equal to twenty bytes and the size of A[0] again is four bytes to understand this concept why the size of A is four bytes in the method sumOfElements and it is equal to twenty bytes in the main method we need to dive deep into how compiler interprets an array as function argument once again i will draw this familiar memory diagram the memory assigned to an application or a program is typically divided into these four parts we have talked about this in our previous lessons for the execution of function calls we use stacked section of the memory this green rectangle here is our stack now when the program starts executing first main method is invoked so some amount of memory from the stack is allocated corresponding to the call of the main method this particular section or this particular part is also called the stack frame of a method all the local variables reside within this stack frame now here in main method we have two local variables one is the array A and another local variable is integer total so around twenty bytes if integer is four bytes exactly twenty bytes infact would be allocated from this stack frame for the local variable A the array A and four bytes for total the variable total and there would be some more information in the stack frame now when the program execution reaches this particular line where we make a call to sumOfElements then the execution of main is paused and another stack frame is allocated to execute the function sumOfElements we have talked about this call stack growth and function execution a number of times in our previous lessons ok now this is a local variable this parameter is a local variable to the function sumOfElements it is not this A in the main method what happens when we make a function call is that the value of this particular local variable in the main method or we should rather say the value from the variable in the calling function is copied to the variable in the called function so ideally we should have one more A local to the function called sumOfElements and the value of A should be copied into this parameter A so we would have another array named A taking twenty bytes in the stack frame of sumOfElements and it would have the same value same elements as the array A in the calling function but actually this doesn't happen when compiler sees and array as function argument it does not copy the whole array what it actually does it just creates a pointer variable by the same name instead of creating the whole array it just creates a pointer to the data type of the array so in this case it will be pointer to integer and the compiler just copies the address of the first element in the array of the calling function so let's say the starting address the address of the first element in this array A that belongs to the main method is two hundred so in sumOfElements all that happens is a pointer to integer is created and the value in this pointer to integer is 200 the compiler implicitly converts this int A to something like int *A that is this A here in this particular format is not interpreted as array but it is interpreted as pointer to integer so whether you write int space variable name following these brackets or you write something like int* space A they are both the same we have a term for this instead of copying the value of the variable we are just copying and storing the address of the variable so we make a call by reference here arrays always are passed as reference parameters and this makes a lot of sense because arrays can be really large in size so it does not make much sense to create a new copy of array each time it is unnecessarily using a lot of memory so for arrays there is no call by value there is always a call by reference and that's why this size of A here would give us four as output because A is a pointer to integer here while here in the main method A is an array so this format of passing array as function argument where we put these braces to tell that this is an array is actually interpreted something like this by the compiler you can put an asterick sign here or you can put an asterick sign here its the same thing it makes more sense to write it like this so A is actually interpreted as pointer to integer that's why when we pass array as function argument there is no way to know the number of elements in the array by using a trick like this we actually need to pass the size of the array so i would rather move this size calculation in the main method and pass the size and when we run this program now we get the output as expected sum of elements is fifteen we should always keep in mind that a variable name which is used as an array is different from a variable which is pointer to integer even though the compiler gives us some privileges like we can use the name of the array to get the pointer to the first element like in this function sumOfElements you could say something like to pass the first element we could have said ampersand A[0] address of the first element but if we just use A instead of using ampersand A[0] then that has allowed if A is an array but if A is an array we cannot do something like incrementing or decrementing it like pointer variables with pointer variables we can do couple of other stuff and if we have a pointer to the starting address of the array we can pretty much use it like a variable name for array because A[i] is interpreted as value at address (A+i) so we need to keep this differences and similarities in mind it's a little tricky there is one more thing because the array is passed by reference we can modify the elements of the array in the called function and it would reflect in the calling function so let's say instead of calculating the sum total we want to double all the elements each individual element in the array so our code will go something like this i want to say that A[i] is now twice A[i] and we will not return an integer let's say the return type is void and in the main method i will clear all the stuff and what i will do is i will simply run a loop to print all the elements in the array okay let us now run this and see what happens oops i forgot to call the function double and i must make a call before i print the elements okay let us now run this if you see the elements in the array A are modified each element is twice its previous value because this is called by refrence the same copy of the array A is modified using derefrencing so this was array as function arguments an important use case of array as function argument is when we work with strings in c so strings in C are nothing but character arrays this concept really becomes important in the context of character arrays we will be talking about it in the coming lessons so thanks for watching