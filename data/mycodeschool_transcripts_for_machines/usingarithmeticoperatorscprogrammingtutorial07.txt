in our previous lesson we saw how we can read input and print output using scanf and printf and we also wrote a basic program to find product of two numbers now in this lesson we will see in detail how we can use various arithmetic operators to perform calculations in our program let's get started by writing some code I have already written couple of lines here first line line at the top is a comment a comment is ignored by the compiler it's not treated as an instruction to be executed to write a comment in a single line in C we need to type in two forward slashes and anything starting the forward slashes till the end of that line would be a comment in the next line I have written an instruction to include stdio.h library this laboratory gives us some basic functionalities printf and scanf are part of this laboratory and after that I'm writing my main function now in my main function here what I want to do is I want to declare two integer variables named a and B and I want to ask the user to input these two integers so I'm first printing a message on screen enter a and then I'm using scanf to receive input in a and just like a I'll receive another integer value in B and now let's do some maths here I first want to calculate sum of a and B so I'll declare an integer variable named sum and after I've got a and B as input I will say sum equal a plus B and with this instruction I've calculated sum of values in E and B and I've assigned it to this variable named sum and now I want to write a printf to say a plus B equal whatever the sum is now next I want to calculate a minus B I have declared a variable named diff and I'm saying diff equal a minus B and once again I'll write a printf so this is my difference next I want to calculate the product of NB I'm multiplying a and B with this expression a asterisk B asterisk is the symbol for multiplication operator and I'm storing the value in this variable named product so with this much of code we have asked the user to enter two numbers a and B and then we are calculating and printing a plus B a minus B and a into B let's quickly run this program and see what will happen the program is asking me to enter a let's say a is equal to 10 now it's asking to enter B let's say B is equal to 5 and now we have got some output here as we can see output of all the three printf cells come on a single line this is happening because printf by default does not take the cursor to the next line we need to explicitly insert an end of line character to take the cursor to the next line what I'll do here is at the end of the string constants in each of these printf cell type in backslash and then n backslash and n together is treated as a single character backslash n is called end off line character for a backslash N and end of line character will be printed and cursor will go to the next line so I'll put backslash n in all three printf s and now when I'm running this program output of each printf is coming on a separate line in the first print of % e in the string constant will be replaced with value in sum and that's why we have a plus B equal 15 printed here 10 plus 5 is 15 and similarly a minus B that would be 10 minus 5 is 5 and a into B is 50 end of line character which is also called newline character or line break should be interpreted more like a command to be executed rather than as data it's inserted in data but it works like a command it takes all the text following it to a new line okay so with this much of code we are performing addition subtraction and multiplication let's now perform division let's say we want to divide a by B if I'm dividing a by B then aim not be completely divisible by B B may not be a factor of a in such a case we can show the result the outcome of division in two ways we can either show result as a real number for example if I'm dividing 9 by 2 then the result would be 4 point 5 there would be a fractional part or what we can do is we can say that quotient of this division is this and remainder is this quotient is basically the integral part of the result of a division to perform division in my code here I can use division operator I'll declare a variable named C here and I'll write a statement C equal a by B /iz my division operator and now I'll print this value I have written a printf a by B equal whatever is assigned to C after division let's quickly run this and see the output this time I wanna say a is equal to 9 and B is equal to 2 what I'm getting here is e by B equal 4 we are getting the quotient this is happening because a and B both are of type integer we have declared them as int and when division operator is applied to two integers then only the integral part or the quotient is returned back if you want the fractional part as well then you need to declare a and B as variables of type float or double float and double are types that are used to store and perform calculations on real numbers what I'll do now is in the declaration statement I'll change this int to float so now all my variables are of type float now in all the scanf and printf statements the format string or the string constant should have placeholder % F instead of % d % f is placeholder for float let's run this program now once again I'll say a equal 9 and B equal to 2 and see what we have got here data is being printed with fractional part by default printf is printing six digits after the decimal point we can choose to print as many as we want let's say I want to print only two desserts after the decimal point then instead of writing percent F in my string constant as placeholder I'll write 0.2 F % point 2f and now only two most significant digits after the decimal point will be printed if I want 3 I'll say 0.3 F let's just put point 2f everywhere in all the plaintiffs and let's run the program now once again let's say a is equal to 9 and now because we are scanning a floatingpoint number or real number we can also enter something like nine point zero I can have a fractional part in my input as well now let's say B is equal to two it's not mandatory to enter the fractional part if it's zero and this is what I'm getting all the values are being printed till two digits after the decimal point there is another data type that can be used to store real numbers and it's called double so instead of using float here we could use double with double you get twice the memory or storage as compared to float in a typical architecture size of float would be four bytes or 32 bits and size of double would be 8 bytes or 64 bits if my variables are of type double then I need to use percent LF as placeholder in these format strings pass to printf and scanf okay now I want to come back to integers and I want to talk about one more operator and this operator is called modulus operator as we had seen earlier division with integer types and gives us the quotient I'll rename this variable C as quotient and now I want to declare another variable named remainder modulus operator gives us the remainder symbol for modulus operator is this character this % with the statement remainder equal a modulo be we will get the remainder of division of a by B I'll just print the remainder let's run this program and see what happens now I'll say a is equal to 9 and B is equal to 2 and this is what I've got in the last line I have got 1 if I'll divide 9 by 2 remainder would be 1 I'm writing the value only I'm not writing something like a modulo B equal this actually let's just print this like all other lines in this last printf now I'm writing a % be equal % D person D is my place holder now when I'm running this program I have not got the % here in the output of last printf this is happening because % is treated as a special character by printf it's treated as beginning of a placeholder to print this character using printf what we need to do is we need to put two person together if we will put two person together printf will not look at the pair in context off of placeholder as you can see now we have got the output a % B equal 1 or we should say a modulo B equal 1 ok so now we know how to do some basic arithmetic in C we can write an arithmetic expression and assign it to a variable once the expression is evaluated result will be stored in this variable in this statement sum equal a plus B this equal to sign is for assignment operator in right hand side of assignment operator we have an arithmetic expression and in left of this assignment operator we have a variable name we cannot have anything else in left of an assignment operator it must always be a variable in right we can have a constant of variable or an expression here we have an arithmetic expression and we have a really simple arithmetic expression here we could have a really complex one with multiple constants variables and operators I have written some more instructions here and in all these instructions we have arithmetic expression with more than one operator we can write such complex arithmetic expressions but we must understand how to create syntactically correct expressions in code and we must also understand how these expressions will get evaluated we have discussed these five arithmetic operators all of these are binary operators an operator that operates upon two operands is called a binary operator operand by definition is an object on which operation is being performed for all these operators we must have an operand in left and another operand in right and operator itself would be in between operand can be a constant of variable or in a complex expression operand can be an expression itself let's pick this expression a plus 2 into B we have two operators here we have addition and we have multiplication now can you tell me the operands for each of these two operators well it will depend upon which operation we are performing first if we are performing the addition first then for addition operands are ii and ii and for multiplication operands are a plus 2 and b but if we are performing the multiplication first then operands for multiplication would be 2 and b and operands for addition would be a and this expression 2 into B if you remember your high school mathematics then precedence or priority of multiplication and division operations is higher than that of addition and subtraction and so in this expression multiplication will be performed first so this is correct interpretation and this is incorrect in a complex expression operator precedence is applied to decide the order of operations in an arithmetic expression first preference is given to parentheses next in prior to your preference our multiplication division and modulo and then come addition and subtraction if there are two operators of same priority then they are executed from left to right by this expression a plus 2 into B what we implicitly mean is a plus and then 2 into B within parentheses if we want the addition to be performed first then we must put parentheses explicitly we should actually write expression like this now I have come back to this code that I had written earlier what I'm doing here is that I'm assigning these expressions to variables what we can also do is that we can pass these expressions directly as function arguments so in the first printf instead of passing some I can directly pass a plus B so I don't need this variable named sum and similarly in the next print if I can simply pass a minus B in the next I can pass a into B for the quotient I can pass a by B and for for modulus we can pass a modulo B if you'll run this program you'll get the same output as earlier so an arithmetic expression can be assigned to a variable or it can be passed directly as argument to a function ok now what I want to do next is I want to erase all the code in this main function and now I want to write some arithmetic expressions and I want you to guess the output what do you think will be the output of this program give this some time and deduce the answer in this expression A plus B by two we have two operators addition and division and we have no parentheses so division will be performed first B is 3 and 3 by 2 will give us 1 remember when we divide an integer by another we get the quotient or the integral part so B by 2 would be 1 and a is 4 so C would be 4 plus 1 that is 5 when I'm running the program as you can see I have got 5 now what should be the output of this one we have two operators action and addition they have equal priority so they will be executed from left to right a minus B would be 4 minus 3 that is 1 and C is 6 of 1 plus 6 would be 7 D would be 7 ok now what should be the output of this 1 part of the expression within parenthesis will be executed first a plus B would be 7 C minus T would be 1 so e would be 7 into 1 that is 7 and my guess is right again so with this much I hope you got some understanding of how you can perform arithmetic operations in your code I'll stop here now this is it in this lesson on arithmetic operators thanks for watching