In our previous lesson,we saw how we can declare and initialize variables of different types to store data to be used in a program and we also saw how we can use printf function to print data stored in a variable. Now in this lesson,we'll see how we can take data as input from user of the program,and we already know of printf() that can be used to print output,but we will talk about printing output in a little more detail. In this program,that I'm showing you here I'm not doing something really meaningful. What I'm doing is,I am declaring a varible named a of type int,which is basically reserving some space in computers memory, to store an integer and we can access or refer to this memory location with name a, and then we are filling in value 12 in this variable In memory,the value will actually be present in binary. In my logical representation of memory, I would always show data the way,it's understood in the realworld.But we must remember dat any kind of data is encoded and stored in binary.Different data types at encoded differently,but ultimately in memory, everything would be in binary.We will discuss encoding mechanism for different datatypes in later lessons.Coming back to the program as I was saying, we're not doing something really meaningful,here by declaring and initializing a valuable and then printing the value in it. We're not solving a problem here. With whatever we have learnt so far, let's write a simple program to solve a real problem.I want to write a program to find product of two numbers or rather product of two integers. I have erased everything from inside the main function here and now I'll write code to find and print product of two numbers. I'll first write a statement to declare three variables of type int named a,b and c. We can declare multiple variables in same statement. We should first write the data type space and then variable names separated by commas. And of course,we should have a semicolon at end of the statement. I am also showing these variables in memory here. Now,I have written two statements to fill in values in a and b.I am filling in 12 in a and 14 in b.And now in this statement c equal a asterisk b,what I'm doing is I am calculating product of values stored in a and b. Asterisk is symbol for multiplication operator and we are filling in the product of a and b in c and now we can print value in c using printf().Printf() function,if you remember this from previous lesson, is used to print a formatted string.First argument to printf() function should be a string constant or string literal.A string constant is created by putting a sequence of characters within double quotes. String constant,that we have passed to printf() function here has two characters percent and d.Now,what printf() function basically does is it prints the string constant but it may not print the string constant as it is. Before printing it applies a set of rules, and does some formatting.When printf() would see a percent d in the string constant,it would expect another argument of type Integer corresponding to this percent d, and it would replace percent d with value of this integer.So,what should be the output of this printf() statement that I have written here. Well,in the string constant,we only have a percent d,this percent d will be replaced by value in c. And value in c is 168,so 168 will be printed on screen.I'll just put a return 0 in here,and now if I'll run this program,then this is what I'm getting. Now,in the printf() if I would pass something like product equal percent d as first argument, and once again for the percent d.I am passing c as second argument and then output of this particular printf() would be product equal 168.Only the percent d has been replaced with value in c. And everything else is same.Everything else in the string constant is printed as it is.Now, I want to write my printf() statement like this and I want you to guess the output of this printf() statement. What do you think,should be output of this printf() statement ? Now,we have three percent d in the string constant and in total we are passing four arguments to printf(),apart from the string constant.We are passing three integers one corresponding to each percent d. While formatting,printf() will replace this first percent d with value in a.So,first percent d will be replaced by first argument after the string constant, and then this second percent d will be replaced by value in second argument,that is value in b. and third percent d will be replaced by value in C. If I run my program,this is how my output will look like. Okay,so we have a program here,that's calculating product of two numbers a and b,but we are setting the values of a and b in code itself.Ofcourse,I can change the code,if I want different values for a and b. But,ideally my program while its executing should ask the user to input a and b. Now,what I'll do here,is at first I'll erase these two lines,but I'm setting values of a and b.I'll keep everything else and now off to the declaration,I'll make a cause to a special function. in stdio.h library.stdio.h is already included here and this function is named scanf().There are two arguments to scanf().First argument just like printf(),is a string constant and it should not be that difficult to guess,that you're passing some format here and second argument is variable a preceded by an ampersand sign.I'll talk about why I am putting an ampersand before a in some time.What I'll do now,is now I'll write one more scanf() statement here. And this time,the second argument is ampersand b. Now,I want to run this program and show you what will happen. When I'm running the program,nothing is coming on my command line or console. I have a printf() in my program,but nothing is getting printed. What's happening here,is that program execution has paused at this line at this first scanf(). And program is expecting user to type in and enter something in this command line or console for this scanf(). in the format bust,scanf() has two arguments. In first argument to scanf(),which is our string constant. As you can see,we have passed percent d ,so program is expecting user to type in only a number. Formatting rules for printf() and scanf() are same just a bit,printf() prints things in a format. scanf() reads data in a format.What I'll do here is I'll just type in an integer and I'll press enter and nothing is getting printed even now. Now,the program is expecting me to type in and enter something corresponding to the second scanf(). Once again,it should only be a number So,I'll type in another number here and ,now that I'm pressing enter,this is what I'm getting. Output of my printf() is a equals 24 ,b equals 15 and a x b to be equal 360.So,when the control has reached printf(),value in a is 24 ,value in b is 15 and value in c is 360.What has happened here is that when, we have entered the first number corresponding to the first scanf(),this number has been filled in a,and when we have entered the second number corresponding to the second scanf() ,this number has been filled in b.So as we can see scanf() can be used to read input from programs command line or console corresponding to each percent d in string constant passed to scanf(). we must have another argument,that should be a variable of type integer preceded by an ampersand ,and the value read for this percent d will be filled in this variable.Just like printf(),we could have a scanf() with multiple percent d in the format passed to scanf(). We mostly do not put arbitary characters. We mostly put the placeholders for variables. If you remember other place holders from previous lessons,then we used percent f for float data type, that can be used to store a real number,we use percent c for a character and there are a lot more.We will get to know them later, so in scanf() corresponding to a percent d,we must have an argument that should be name,often integer variable preceded by an ampersand. Corresponding to a percent f,we would have to pass a variable of type float preceded by an ampersand, and similarly corresponding to a percent c,we would have to pass a character preceded by an ampersand. These place holders are same for printf() and scanf().In printf() you do not put an ampersand before the variable name,but in scanf() you put an ampersand before the variable name. Now,as I was saying in format string passed to scanf(),we would mostly have these placeholders and white spaces.It won't make much sense having characters not forming a placeholder,if I run this program as for the format passed to scanf(), I should type in an integer then a space and then another integer. But a space in scanf(),a space in format string of scanf() discards multiple contiguous white spaces,so what I can do is I can type a number of spaces here and then type in 15 and now if I'll press enter, then also a and b have been filled properly. so scanf() is not strict about a single space in format string.It accepts multiple spaces against a single space in format string .Spaces and end of line characters,when you press enter and end of line character goes as input. These characters are treated as delimiters between values.Even if I would type in the first integer and then type in some end of line characters by pressing enter, and then type in the second integer ,then also a and b will be filled properly. A space in format string of scanf() will actually accommodate all contiguous white spaces and end of line characters before the next value. You can write a scanf() like this,but I prefer writing one scanf() for each variable. So,I'll revert back to two scanf() here.And,now I want to do one more thing to make this program better before this first scanf(),I want to write a printf() ,saying enter a and after the first scanf() and before the second scanf(),I want to write another printf() saying enter b.Now, let's run this program and see what happens. We are first printing enter a and then we have paused for the user to enter the number.I'll type in a number here and press enter and now we are first printing enter b and then we are pausing for the user to enter a second number and ,on pressing enter,I'm getting output of the third printf(). This looks cool because now our program is printing a message and asking the user to input the numbers.Okay,now I want to answer a question that I had left earlier.Why are we having to put an ampersand before the variable name in call to scanf() ? To understand the ampersand,we will have to go into details of how memory is managed for execution of a program. A program will have multiple function calls. Program execution always begins with the main function. So,the first function call that will be made automatically when the program starts will be a call to main function and then any function can make calls to other functions.So, here as we can see main function is making calls to these two library functions printf() and scanf().Now,when a function is called some amount of memory is allocated specifically for execution of that particular function call. And this memory is reclaimed when function called finishes. I have cleaned up everything from the memory and,Now let's try to understand what I'm saying visually.When a function is called,some amount of memory is allocated specifically for execution of that particular function call. Let's say the program has just started execution so main function has been called.Let's say this block in the memory is for execution of main function.Now, a variable declared inside main function will get space inside this block of memory.We have three variables in main a,b and c.These three will live inside this memory allocated for main. A variable declared inside a function is called local valuable and we can access it and write to it from only within the function.When that variable is passed as argument to a function.Like here in this last call to printf(),we are passing a,b and c as arguments,then all that happens is the values are copied to local variables in called function.So printf() will just receive the values in three local variables.printf() cannot modify a, b and c of main printf(),can modify its own copy if it wants to.Now,with scanf() we want to fill in data in local variables of main with the first call to scanf().We want to write to a of main.To do this,what we do is we'd pass the addresss of a to scanf(). Every variable would have an address in memory and address of a variable can be passed as argument. Let's say,a is at byte address 200. Now,when we are saying ampersand a here in the call to scanf(),what we're doing is we're passing value 200 which is the address of a and scanf() is receiving it in a local variable. Now,scanf() has reference to a.In C,a valuable that stores address of other variable is called a pointer.So,scanf() has a pointer to a and using this pointer,it can access and modify value in a and this is how scanf() will be able to write something here.if you want to understand this in detail, you can check the description of this video for a link to a lesson on pointers. So,in printf(),we are passing values in local copies,but in scanf() we're passing adress,so scanf() can access the variable in main. If you're not able to understand some of these concepts, that I just explained then you can just let go. I'll explain this concept in a lot more detail in later lessons. For now,you just need to understand how to make calls to printf() and scanf(). That is how to read input and print output. Using printf() and scanf(),we are reading and writing to command line,console or text window ,whatever you call it.scanf() is receiving the type in text from command line and printf() is displaying output on command line. Input and output can happen in multiple ways. In the beginning,we were filling data in code itself. We were setting values of a and b in code itself. You cannot expect normal user to make changes in code and then compile and run it.Only your programmer friend can do it. So,that was not a good way.Next we have used a scanf() entry into functions to read and write text from command line and this looks cool when the input using keyboard on command line.Then this is referred to as reading from standard input and when we write to command line ,then it's called writing to standard output. Another way to input can be a file that our program can read. And program can also write back to a file.A modern day application can also take input from something like a scanner and output can also be printed using a printer.Through out this lesson, through out this series, we're going to use standard input and output.We're going to use scanf() and printf().We will have a couple of lessons and reading and writing to file as well.Okay,I'll stop here now.In our next lesson,I will discuss operators and expressions.This is it for this lesson. Thanks for watching !