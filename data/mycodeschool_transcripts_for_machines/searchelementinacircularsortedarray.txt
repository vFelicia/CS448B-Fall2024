In this lesson, we will solve yet another very famous programming interview question and the question is that, we are given a circularly sorted array which means that a sorted array has been rotated and in the previous lesson, we had also solved a problem where we wanted to find out the number of rotations in a circularly sorted array. This is an example of a circularly sorted array. The first element in the sorted sequence is at index 4 and than we go towards the right and then after the last element we go to the first element. So this is the start of sorted sequence and this is the end of the sorted sequence. Each element in the sorted sequence has been shifted 4 positions ahead. The array is rotated four times in anticlockwise direction or towards the right. Now given such an array, we have to find out whether a number X exists in this array or not. So, how do we solve this problem. The simplest approach would be to perform a linear search where we scan the whole array to look for X. But in this approach we will not make use of the property of the array that it is circularly sorted and time complexity for this approach would be O(N) where N is number of elements in the array, so what else can we do. Whenever we have a sorted data and we have to search for something we should always think about binary search as one of the possible approaches. Binary search as we know executes in O(log N). At most we make log N comparisons to find out our element in the array and O(log N) is the best time complexity to have for a solution. So let's see if we can apply binary search in some form to solve this problem. Let us pick up this circularly sorted array. The example that we have in the left and now we will use a variation of binary search to find out an element X in the array like we do in the normal binary search. We will first defined 2 indices low and high initially to the first and last element in the array respectively and then we find out the mid element as (low + high) / 2 the mid index. So far the logic is the same. Now the first case would be that the element at mid index A[mid] is equal to X. As we do in our normal binary search, we will compare the middle element with the number that we're looking for X and if this is equal to X, our search is over. We will return mid telling that X exists at index mid. If A[mid] is not equal to X then if the idea was a normal sorted array then we would have either gone to the left half or the right half depending upon whether X is greater than or less than the middle element. But we cannot apply this straightforward logic to discard one of the halves in this case. But there is a property that we can exploit and discard half of the elements. If you see them elements in the array are always increasing except only at this particular point which is the junction point or the pivot point, where we have the first element or the minimum element in the sorted sequence. Now if we pick any segment or any subarray than if it does not contain this pivot point, if it does not contain these two elements which form the boundary the break point then all the elements in this segment will be sorted and if the segment contains these two elements that form the breaking point then the segment will not be sorted. Now the mid element divides the segment into two halves and this break point or the pivot point will lie only in one of these halves so at least one of these halves will always be sorted. We will make use of this property and we will discard half of the array at halves of the search space at each iteration of the binary search. So our case 2 will be if A[mid] is less than or equal to A[high]. Basically, we're looking at this particular part of array. We include the middle element look for the segment extending till the highest element. If this condition is true than this whole segment is sorted. In this example this segment is not sorted but if the this segment was sorted, the right segment was sorted then there would be two conditions. Let's say these conditions are 2A and 2B. We know that X is not equal to A[mid] but if X is greater than A[mid] and X is less than or equal to A[high] then it definitely lies in this sorted half. So adjust low to mid+1 to say that go ahead and search in the right half, else if it is not so we will have a condition when we will say go go search the left half in the unsorted half. Okay, this will be the case when the right half of the array is sorted. Case 3 would be when A[low] or the first element in the sequence is less than or equal to the middle element less than or equal A[mid]. Now in this case looking whether this particular segment starting at low index all the way till mid index is sorted or not. Now once again we will have to condition two conditions. When we know that this half is sorted it is very to easy to verify whether X is probable to lie within this segment on or, within this subsegment or not. Here, if X is greater than not equal to A[low] and X is less than A[mid]. X cannot be equal to the mid element because then we would not reach the case 3 then X probably lie in the left half for this condition. So in this condition we will adjust high to mid 1 else we will search in the unsorted half by adjusting low to mid + 1. So this is our divideandconquer strategy for binary search. Let us know right code for this and see if it works. I will write a function CircularArraySearch that will search for a number X in an array of size N and it will return the index of X if it is found in the array. So like we do in a normal binary search we will first define to variables low to 0 and high to N1 and while low is less than equal to high while our search space is valid while our segment is valid. A valid statement segment will have at least one element when low will be equal to high. We calculate the mid index as (low+high)/2. Now if X is equally to the middle element then we have found X. We return the index mid else we need to decide whether to go in the left half or the right whether to go searching towards the higher indices or the lower indices and we do so by first finding out which part of the array is which part of the search space is sorted. If A[mid] is less than or equal to A[high] the element at index high then the right half is sorted. The right half is sorted than we can easily check whether X is probably to lie within this half or not. So if X is greater than the middle element and X is less than or equal to the element at index high, we go searching to the right sorted half by adjusting low to mid + 1 else we know that element is not in the right half so it is definitely in the left half. So we will adjust high to mid 1 to go to the left half. Now right half is sorted for sure we know that but left half it could either be sorted or unsorted. It doesn't matter. For some special case, when the segment itself is sorted. The left half could also be sorted but the irrespective of that using these two conditions we are discarding one of the halves and we are going to one of the we are choosing one of the subsegments. Okay, so now if right half is not sorted than the left half definitely will be sorted. So either we write this condition A[mid] greater than or equal to A[low], or maybe I should write A[low] less than or equal to A[mid] as we had written previously. So this is case 3. Even if we do not write this condition and simply write an else we're fine because this will be true anyway at this point. So now the left half is sorted, so we can see whether our X is probably to lie in left half. Now if if X is between a low and mid less than or equal to greater than or equal to A[low] and less than A[mid] then it's probable lie in this half so we will adjust high to mid 1 else if X is not probable to lie in the left half then we go searching towards that right by adjusting low to mid + 1 and finally, if we come out of this while loop without finding X without returning anything. We return 1 to say that we could not find X in the array. Let us now write the main method. We will first initialize an array A and this is the same array. Elements are the same as we have used in our examples throughout. Now let's ask the user to input a number X from the console and now we call the method to search for X. The size of the array is 8, so we pass 8 as the second argument. Now if this method returns 1, we will say that we could not find element in the array the number in the array and if it is not 1, we print the index. So this is our C program and now let us run this and see what happens. Let's search for the number 8 in the array and this seems to be correct. The element 8 is at index 6. Let's run this again and such for number 12 in the array and this also is correct and this seems to be working for other cases as well and its modified this array. Let's say, we want to pick up an array in which the elements are already sorted. Let's pick up 8 elements again. Let's search for element 4 in the array. Okay, this is also fine so we seem to be good for our test cases. Well actually, no we are not good for of all test cases. If we have an array with duplicates like this. This array is still so circularly sorted. This is the first element in the sorted sequence 0 but if we have duplicates in the circularly sorted array it will not be possible to decide whether left half is sorted or right half is sorted using the conditions above that you have used using these this condition. So the array has to be strictly increasing in our circular manner and all the elements need to be distinct. If we run this, let's say we want to search for a number 0 then this say 0 not found in the array which is not correct if there are duplicates we cannot do any better than O(N) and we will have to perform the linear search. Only if the elements are distinct we can perform binary search. Okay, so this was searching an element in circularly sorted array with no duplicates using binary search. Thanks for watching.