in our previous lesson we understood some of the basics we understood what a computer program is and what a computer programming languages is. Basically we gave you insight into how things happen at lowest level in computer architecture now in this lesson we're going to talk a little bit more about architecture we will talk about computers memory how programs get stored in computer's memory and how programs get executed from computers memory and then we will briefly talk about what all it'll take to learn a programming language like C let's start with a quick recap of what we had discussed in our previous lesson a computer is a general purpose machine that can perform any computational task for you. To perform a task you need to give it a program which is nothing but set of instructions to perform a task. the core part of the computer that executes these instructions is called central processing unit or CPU and CPU can execute instructions only in what we call machine language which is binary encoded as per some rules machine language is called lowlevel programming language it's too cryptic to write and it varies from one architecture to another but fortunately we can write our program in what we call a highlevel language like C and another program a utility program named compiler would convert the source program or what we also call the source code in highlevel language to target machine code or program in machine language compilation is the process of creating an executable file. An executable file on Windows machine will have extension exe. When you want to run a program even an installed program, an already installed program you look for the executable file of that program a nice graphical icon in start menu or desktop, its only a shortcut to launch the executable file of that program the storage or memory of a computer is in multiple layers all the files in your computer are typically stored in a hard disk drive. compiler itself is a program so it will have an executable then you can have all kind of files. If a program is there on your hard disk it does not mean that it is always running to run the program you doubleclick on the executable file or a nice little icon that will be shortcut to the executable file and now the program has to run. Now the instructions in the program have to get executed. What happens is that when you run the program. Let's say you ran app dot exe, the program or the set of instructions is transferred to what we call random access memory or RAM, the difference between RAM and hard disk drive is that RAM is volatile memory everything in RAM is wiped off, is cleared as soon as power is removed as soon as machine is turned off, but anything in hard disk remain there even when machine is turned off There is difference between the physical design of these two devices RAM is also called primary storage and hard disk is called secondary storage in context of computers whenever we say main memory are just memory we mean RAM, we mostly mean RAM. Now, how a program gets executed is when instructions are loaded in RAM, they are fetched sequentially one at a time by the CPU CPU is the guy who has to execute instructions. CPU can read from the RAM and and write back into the RAM. CPU has some memory of its own but it's very less, good enough to store information for execution of one instruction but it cannot store all the instructions at a time. it's a small chip so that is not much space on it so instructions that will be in machine language are executed one at a time, but the good thing is that CPU can execute millions of instructions per second and sometimes an instruction can be to jump to another instruction so in that case CPU will not fetch the next instruction sequentially so instruction 3 could be go back to instruction 1 okay, now one question will be why can't CPU fetch instructions directly from hard disk? Why do we need RAM? and this is because access to RAM is a lot more faster than access to hard disk its hundreds and thousands of times faster. If CPU will fetch directly from hard disk performance in terms of time of execution will be terrible. So, this is the story. Programs are installed or saved permanently in secondary storage but when they are executing, they are loaded in RAM when a program finishes its execution it is cleared from the RAM, the memory in RAM is claimed back. please note that a number of programs run in a machine at the same time CPU, RAM, all these resources are shared by these programs CPU has to switch it's time between programs memory has to be shared all this sharing and switching is managed by a set of system programs that we call operating system. Operating system is the big brother who manages the execution of all other programs. Without the will of operating system, no program can get any resource. For a program execution, we need more memory than memory just for the instructions We need memory for couple of other things also and when I'll say memory, I'll mean RAM. This is what you call the main memory as C programmers it's good to know about memory architecture and we will be talking about it in more detail later movie understand enough architecture now let's now start looking at what all we need to know to write a program in C. 'C' is a programming language but let us first think about this. What all do we need to know to be able to write in a natural language like English First of all, we must know the English alphabet set of letters in English and then we can learn some words and once we learn some words we must learn grammar and then we can construct some phrases and sentences by grammar, we basically mean a set of rules for the language when we are constructing phrases or sentences, we must follow the grammar. There are couple of things. First of all we must use valid words. This sentence does not make any sense because the words are not valid. This sentence even though the words are valid once again is not a valid sentence as per English grammar, a simple sentence like this should have a structure like subject verb object. once we know how to construct phrases and sentences then we can write paragraphs, we can write poems, we can write stories We can do so many things. Now to be able to learn and write a program in 'C' or may be any other programming language, the first thing that we need to know is the character set that we can use to write that language in 'C', we can use English alphabet. We can use both uppercase and lowercase letters things will be case sensitive then we can use decimal digits from 0 to 9 and then we can use a lot of special characters like hash, comma, parentheses a lot of them, we will learn about it as we write some programs once you know the character set that you can use, then you need to know how to write constants, how to create variables and you need to know some of the keywords keywords are special words that should always be used for a specific reason. Some of the examples of keywords are int, long, break continue, while, and there are many of them but that is a finite set of keywords and they are not too many like words in English Dictionary. Using these basic elements and some set of rules, we can write instructions or what we can also call statements and once we are able to write some statements, we can organize them in a structure to create a program To write a poem or story in English, it takes more than just the knowledge of English language. You need to have some more skills apart from language skills. Similarly, programs are written to solve some problem, to perform some task you must first have a computational logic to solve a problem and then only you can implement it and write a program For example, let's say you want to write a program to calculate compound interest but you do not know how to calculate compound interest you do not know the formula, so now even if you know 'C' or any other programming language, you cannot write a program to calculate compound interest so knowledge of programming languages is a must to have, but it takes more time and effort to train yourself to be able to design computational logic for complex problems Not to worry, it's just that you need to practice a lot to build the skills so this is a brief insight into what all we need to learn to be able to solve computational problems through computer programs. In our next lesson, we will try to understand the basic structure of a C program We will also write and execute our first C program This is it for this lesson. Thanks for watching !