In this lesson, we're going to talk about binary tree traversal. When we are working with trees, we may often want to visit all the nodes in the tree. Now tree is not a linear data structure like array or linked list. In a linear data structure there would be a logical start and a logical end so we can start with a pointer at one of the ends and keep moving it towards the other end. For a linear data structure like linked list for each node or element we would have only one next element but tree is not a linear data structure. I have drawn a binary tree here datatype is character this time, I filled in these characters in the nodes. Now for a tree at any time if we are pointing to a particular node then we can have more than one possible directions. We can have more than one possible next nodes in this binary tree. For example if we will start with a pointer at root node then we have two possible directions from 'F' we can either go left to 'D' or we can go right to 'J' and of course if we will go in one direction then we will somehow have to come back and go into the other direction later. So tree traversal is not so straightforward and what we are going to discuss in this lesson is algorithms for tree traversal. Tree traversal can formally be defined as the process of visiting each node in the tree exactly once in some order and by visiting a node we mean reading or processing data in the node. For us in this lesson visit will mean printing the data in the node based on the order in which nodes are visited, tree traversal algorithms can broadly be classified into two categories we can either go Breadthfirst or we can go Depthfirst. Breadthfirst traversal and Depthfirst traversal at general techniques to traverse or search a graph. A graph is a data structure and we have not talked about graph so far in the series we will discuss graph in later lessons for now just know that tree is only a special kind of graph and in this lesson we are going to discuss breadthfirst and depthfirst traversal in context of trees. In a tree, in breadthfirst approach we would visit all the nodes at same depth or level, before visiting the nodes at next level. In this binary tree that I'm showing here. This node with value F which is the root node is at level0 (L0). I'm writing L0 here for level0 depth of a node is defined as number of edges in path from root to that node. Root node would have depth 'zero'. These two nodes 'D' and 'J' are at depth 1, so we can say that these nodes are at level1 (L1). Now these four nodes are at level2 (L2), these three nodes are at level3 (L3) and finally this node with value 'H' is at level4 (L4). So what we can do in breadthfirst approach is that we can start at L0 we would have only one node at L0, the root node so we can visit the root node. I'll write the value in the node as I'm visiting it, Now L0 is done, now I can go to L1 and visit the nodes from left to right so after 'F' we would visit 'D' and then we would visit 'J' and now we are done with L1 so we can go to L2. We will go like 'B' then 'E' then 'G' and then 'K' and now we can go to L3. 'A', 'C' and 'I' and finally I can go to L4. This kind of breadthfirst traversal in case of trees is called level order traversal and we will discuss how we can do this program*** in some time but this is the order in which we would visit the nodes we would go level by level from left to right in breadthfirst approach for any node we visit all its children before visiting any of its grandchildren in this tree first we are visiting 'F' and then we are visiting 'D' and then we are not going to any child of 'D' like 'B' or 'E' along the depth, next we are going to 'J' but in depthfirst approach if we would go to a child, we would complete the whole subtree of the child before going to the next child in this example tree here from 'F' the root node if we are going left to 'D' then we should visit all the node in this left subtree that is we should finish this left subtree in its complete depth or in other words we should finish all the grandchildren of 'F' along this path before going to right child of 'F' > 'J' and once again when we will go to 'J' we will visit all the grandchildren along this path so basically we will the complete right subtree. In depth first approach the relative order of visiting the left subtree, the right subtree and the root node can be different for example we can first visit the right subtree and then root and then the left subtree, or we can do something like we can first visit the root and then the left subtree and then the right subtree, so the relative order can be different but the core idea in depthfirst strategy is that visiting a child is visiting the complete subtree in that path and remember visiting a node is reading, processing or printing the data in that node based on the relative order of left subtree, right subtree and the root there are three popular depthfirst strategies one way is that we can first visit the root node, then the left subtree and then the right subtree left and right subtrees will be visited recursively in same manner such a traversal is called preorder traversal. Another way is that we can first visit the left subtree, then the root and then the right subtree such a traversal is called inorder traversal and if root is visited after left and right subtrees then such a traversal is called postorder traversal. In total there are six possible permutations for left, right and root but conventionally a left subtree is always visited before the right subtree so these are the three strategies that we use only the position of root is changing here if it's before left and right then its preorder if it's in between its inorder and if it's after left and right subtrees then its postorder. There is an easy way to remember these three depthfirst algorithms. If we can denote visiting a node or reading the data in that node with letter 'D' going to the left subtree as 'L' and going to the right subtree as 'R' so if we can say D for Data, L for Left and R for Right then in preorder for each node we will go DLR. First we will read the data in that node then will go left and once the left subtree is done we will go right. In inorder traversal first we will finish the left subtree, then we will read the data in current node and then we will go right. In postorder for each node first we will go left, once left subtree is done we will go right and then we will read the data in current node, so preorder is data,left & right, inorder is left,data & right and postorder is left,right & then data preorder, inorder and postorder are really easy and intuitive to implement using recursion but we will discuss implementation later. Let's now see what will be the preorder inorder and postorder traversal for this tree that I have drawn here. Let's first see what will be the preorder traversal for this binary tree. We need to start at root node and for each node we first need to read the data or in other words visit that node in fact instead of DLR we could have said VLR here V for visit, we can use any of these assumptions V for visit or D for data. I will go with DLR here. So let's start at the root for each node we first need to read the data. I'm writing 'F' here the data that I just read and now I need to go left and finish the complete left subtree and once all the nodes in the left subtree are visited then only I can go to the right subtree, the problem here is actually getting reduced in a selfsimilar or recursive manner. Now we need to focus on this left subtree. Now we are at 'D' root of this left subtree of 'F', once again for this node we will first read the data and now we can go left we will go towards 'E' only when these three nodes A,B and C will be done. Now we are focusing on this subtree comprising of these three nodes now we are at 'B' we can read the data and now we can go left to 'A' there is nothing in left of 'A', so we can say that for left for 'A' left subtree is done and there is nothing in right as well, so we can say right is also done. Now for 'B' left subtree is done so we can go right to 'C' and left, and right of 'C' is null and now for 'D' left subtree is done so we can go right once again for 'E' left and right are null and now at this stage for 'F' complete left subtree is visited so we can go right. Now we need to go left of 'J' and there's nothing left of 'G' so we can go right and now we can go left of 'I'. For 'H' there is nothing in left and right. Now at this stage left subtree of 'I' is done and right subtree is null and now we can go back to 'J' the left subtree for 'J' is done so we can go to its right subtree finally we have 'K' here and we're done with all the nodes. This is how we can perform a preorder traversal manually, actual implementation would be a simple recursion and we will discuss it later. Let's now see what will be the inorder traversal for this binary tree. In inorder traversal we will first finish visiting the left subtree then visit the current node and then go right once again we'll start at the root and we will first go left. Now we will first finish this subtree once again for 'D' we will first go left to 'B' and from 'B' we will go to 'E', now for 'A' there is nothing in left so we can say that for this guy left subtree is done so we can read the data and now we can go to its right but there nothing in right as well. So this guy is done. Now for 'B' left subtree is done, so we can read the data and now for 'B' we can go right for 'C' once again there is nothing in left so we can read the data and there is nothing in right as well. Now left of 'D' completely done so we can visit it, read the data here now we can go to its right to 'E'. For 'E' once again left and right are null. At this stage left subtree of 'F' is done so we can read on the data and now we can go to right of 'F' if we will go on like this, this finally will be my inorder traversal. This tree that I'm showing here is actually a binary search tree for each node, the value of nodes in left is lesser and the value of nodes in right is greater. So if we are printing in this order left subtree and then the current node and then the right subtree then we would get a sorted list inorder traversal of a binary search tree would give you a sorted list. Okay now you should be able to figure out the postorder traversal. This is what will get for postorder traversal I leave it for you to see whether this is correct or not. I'll stop here now. In next lesson we will dicuss implementation of these tree traversal algorithms. Thanks for Watching!