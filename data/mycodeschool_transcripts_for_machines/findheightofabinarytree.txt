In this lesson, we're going to write code to find height or what we can also call maximum depth of a binary tree. We have already discussed depth and height in our first introductory lesson on trees but I'll do a quick recap here. First of all, I have drawn a binary tree here. I have not filled in any data the nodes. Data can be anything. Binary tree, as we know is a tree in which each node can have atmost 2 children. So a node can have 0 1 or 2 children. I'll just number these nodes so I can refer to them. I'll say this root node is number one and I'll go level by level from left to right, counting 2, 3, 4 and so on. Now height of a tree is defined as number of edges in longest path from root to a leaf node. In this example tree, 4 6 7 8 and 9 are leaf nodes. A leaf node is a node with 0 children. Number of edges in longest path from root to a leaf node is 3. For both 8 and 9 number of edges in path from root is 3. So height of the tree is 3. Actually we can define height of a node in the tree as number of edges in longest path from that node to a leaf node, so height of a tree basically is height of the root node. In this example tree, height of node 3 is 1. Height of node 2 is 2 and height of node 1 is 3 and because this is the root node, this is also the height of the tree. Height of leaf node would be 0, so if a tree has only one node then the root node itself would be a leaf node and so height of the tree would be 0. So this is definition of height of a tree. We often also talk about depth and we often confused between depth and height but these 2 are different properties. depth of a node is defined as number of edges in path from root to that node. Basically, Depth is distance from root and height is distance from the best accessible leaf node. For node 2 in this example tree, depth is 1 and height is 2. For node number 9 which is a leaf node depth is 3 and height is 0. For root node depth is 0 and height is 3. Height of a tree would be equal to maximum depth of any node in the tree so height and max depth, these two terms are used for each other. Okay, let's now see how we can calculate height or max depth of a binary tree. I'm going to write a function named FindHeight that will take a reference or address of root node as argument and return me the height of the binary tree. Now the logic to calculate how it can be something like this. For any node, if we can somehow calculate the height of its left subtree and also the height of its right subtree then the height of that node would be greater of the heights of left and right subtrees + 1. For the root node in this tree height of the left subtree is 2 and height of the right subtree is 1, so height of the root node would be greater of these 2 values + 1. + 1 for the edge connecting the root node to the subtree, so height of the root node which would also be the height of the tree is 3 here. In our code, we can calculate height of left and right subtrees using recursion. What I'll do here in FingHeight function is, I'll first make a recursive call to find height of the left subtree. We can say to find out if left subtree or to find height of left child both will mean the same. I'm collecting the return of this recursive call in a variable named left height and now I'll make another recursive call to calculate height of right subtree or right child. Now height of the tree or height of whatever node for which we have made this function call would be greater of these 2 values, Left height and right height + 1. Now there is only one more thing missing in this recursion. We need to write the base or exit condition. We cannot go into the recursion infinitely. What we can do is we can go on until we make our to recursive call with root equal null and if the root is null that is if the tree or sub tree is empty, we can return something. What should be done here. Give this some thought. If I have made a call to find height of let's say this leaf node this node with number 7 then for this guy both left and right children are null. In call for this node number 7, we will make two recursive calls passing null in both the call, so what should we return. Should we return 0. If these 2 calls will return 0 then height of 7 will be 1. Because in the return statement here, we're saying max of left and right height + 1. But as we had discussed earlier, height of a leaf node should be 0. So if we are returning 0 for root equal null, it's not alright. What we can do is, we can to return 1. When we are returning 1 then this edge to null that does not exist but still was getting counted will be balanced with this 1. I hope this is making sense and going by convention also height of an empty tree is set to be 1. So this is pseudo code for my function to find height of a binary tree. Some people define height as number of node in longest path from root to a leaf node. We are counting edges here and this is the right definition. If you want to count number of nodes then for a leaf node height would be 1 and for empty tree height would be 0. So all you need to do is return 0 here, and this is the code if you want to contact number of nodes but I think the right definition is number of edges so I'll return 1 here. Time complexity of this function is O(N) where N is number of nodes in the tree. We will make one recursive call corresponding to each node in the tree, so we're kind of visiting each node in the tree once and so running time will be proportional to number of nodes. I'll skip the detailed analysis of running time in this lesson. This is what my FineHeight function will look like inn C or C++. Max here is a function that the return greater of two values passed to it as arguments. So this is it for this lesson. Thanks for watching.