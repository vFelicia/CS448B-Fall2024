what is time complexity of a program and why is it important? we'll try to see through an example Ram and Shyam are two students and they have both been given the same assignment and the assignment is that given a number n they have to find out whether n is prime or not a prime number is a number that can be divided by exactly two numbers one and the number itself the smallest prime number is two and some of the other prime numbers are three five seven eleven and we can go on one is not a prime number because one can be divided by exactly one number and that's one only so a prime number should have exactly two factors Both Ram and Shyam figure out different solutions to the problem Ram says that, hey ! i'll try dividing n by all numbers starting 2 all the way till (n1) and if i can find any such number that divides n so if i can find any i between 2 to n1 that divides n then n is not prime Shyam, however is intelligent enough to realize that he does not need to check all the way till n1 only if he cannot find an i till sqrt (n) he can be sure about whether the number is prime or not. So, he sees that for i startign 2 to sqrt(n) if there is any such i that divides n then n is not prime Both of these solutions are correct and let's say for now that Ram and Shyam have handled the special case for one separately Both of these will work and we will not go into the details of why they will work Let's just assume for now that they will work fine now when they both run their program for larger input sizes, Ram is quite sad while Shyam has a big smile on his face and why is it so? let's try to see let's say Mr. computer who has to run this program takes one milli second for a division operation so we'll say one ms for division let see what happens for various inputs of n in the worst case Ram's loop will run exactly n2 times, so it will perform exactly n2 divisions and that would happen when the number is prime however for Shyam, in the worst case he will perform exactly square root of n minus one times, the division let's pick various values of n and see what's the time taken by these programs we'll pick up a small n first n = 11 and 11 is a prime number, so loop will run for Ram, the loop will run starting all the way till 10 So this will take exactly eleven minus two millisecond which is nine milliseconds Shyam however, will take sqrt(n) or square root of eleven is 3 point something we are only interested in the integer values, so loop will only run only for 2 and 3 so the loop will run exactly 31 times and the time taken will be 2 milliseconds nine ms and 2 ms, not much of a difference in terms of computational time let's pick up a higher value for n = 101, and that is a prime as well Ram will take 99 ms Shyam however will take sqrt(101) is ten point something so Shyam will take 10 minus 1 or 9 ms this is still less than one second Mr. computer wont give you much of a hint of the actual runtime for such small value duration Let's pick up a slightly higher number this time and we will pick up a seven digit prime number this time this is now this is equal to ten to the power 6 plus 3 this is also equal to tend to the power 6 plus 3 So, ram will take almost close to ten to the power six milliseconds to solve this problem and if you convert this to seconds. this is ten to the power 3 seconds, or sixteen point six six minutes and let's see how Mr. Shyam does here Shyam will take square root of 10 to the power 6 plus 3 minus one and for larger values of n, we can safely ignore this minus one year and this is almost close to 10^3 ms which is only one second so, now we can see a visible difference here while Ram is taking sixteen point six six minutes for this input Shyam is able to solve this problem only in one second let's pick up a really higher value this time an eleven digit prime number and the number is which is also equal to 10 to the power 10 plus 19 and this is a prime as well so the loop will run exactly n2 times so this will so Ram's program will take close to 10^10 milliseconds which is equal to 10^7 seconds if you try to convert this to minutes, hours and then days, this will be a little more than hundred and fifteen days which is quite an impractical time for a program to solve a problem and let us see how Shyam's program does here Shyam will take close to square root of 10^10 is almost equal to 10^5 , so Shyam will take around 10^5 milliseconds which is only hundred seconds, or one point six six minutes now, we can see why Shyam is quite happy and Ram is sad while Shyam is solving the problem in one point six six minutes here Ram is taking an impractical time of hundred and fifteen days for this input size. time complexity of a program it's a simple measurement how fast the time taken by a program grows, if the input size increases so if the input to the program is n we can see that in the first case the time taken by the program is proportional to n we often see in computational terms that this program is an order of n algorithm this O is called bigoh and you can such over the internet for what it is We will not go into the detail mathematical assumptions behind this notation for now Shyam's program as you can see is proportional the time taken by Shyam's program is proportional to sqrt(n) and we say that this is an order of sqrt(n) algorithm and we represent it by bigoh sqrt(n) so, we realize through this example that correctness of the program is not the only thing what's also important is how your program behaves for larger input sizes and we should always try to write a program that behaves well for larger input sizes So, thanks for watching !