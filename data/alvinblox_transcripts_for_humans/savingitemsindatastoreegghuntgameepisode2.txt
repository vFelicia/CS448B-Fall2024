With timestamps:

00:00 - hey everyone welcome to episode 2 in my
00:03 - how to make an egg hunt series hope
00:05 - you're having a great Easter if you are
00:07 - celebrating and today we are going to be
00:10 - looking at data stores so how do we save
00:13 - the eggs which a player has gotten so
00:15 - you may be wondering how this will work
00:17 - and as many of you might not have even
00:19 - doing any data store work before but the
00:22 - way datastore works is it's pretty
00:24 - simple all we do is we tell the script
00:27 - we give a key for each player they have
00:31 - their own key which uniquely identifies
00:32 - their data which will be stored in the
00:35 - data store service and then we can write
00:40 - data to that key or get the data from
00:43 - that key so we can use get a sync to
00:45 - grab the data from the data store and
00:47 - set a sync to set the data store now you
00:50 - can't just save objects to a data store
00:53 - because it's not allowed to do that you
00:55 - can't just save an egg so the way we're
00:59 - going to do it is we're going to have a
01:01 - folder in the player which gets
01:03 - generated when they join the game and
01:05 - then whenever they step on an egg we are
01:08 - going to insert a string value into that
01:10 - folder with the name of the egg okay so
01:12 - after steps on the rainbow egg and you
01:14 - can see a string well it doesn't have to
01:16 - be a string value or it just has to be a
01:19 - value it could be any object really just
01:22 - as long as it's got like a a thing with
01:24 - its name in there so I've gone for a
01:26 - ball value as long as it's named
01:28 - whatever the egg is called we've
01:31 - basically got a store a temporary store
01:34 - of all of the eggs that you've caught
01:36 - currently in the game so when you catch
01:39 - a new egg it will add those values in
01:41 - there and then what we can do is when we
01:43 - leave the game we can loop through this
01:46 - egg folder and then what we can do is we
01:49 - can insert into a table the names of all
01:52 - of these values here all of these value
01:54 - objects so we could insert edit egg of
01:56 - Doge mystery egg and rainbow egg into
01:59 - our table and you allowed to save tables
02:01 - so what we're doing is we're saving a
02:03 - table of all of the eggs that we found
02:06 - so far okay and we're going to be
02:07 - inserting into this table when we find
02:10 - an egg so we'll be able to keep track of
02:12 - how many
02:13 - eggs we've got in the game which will be
02:15 - useful in the next part of the video
02:17 - series when we will be making a
02:19 - collection GUI like an inventory GUI
02:22 - but also it helps us because then we can
02:24 - just save the names of those eggs in
02:26 - that folder to the data store and then
02:28 - when we rejoin the game we can just get
02:30 - them from our data store and then insert
02:32 - them back into that inventory okay so
02:34 - let's go ahead and get started and don't
02:38 - forget if you are enjoying the series so
02:40 - far then why not show your support by
02:42 - liking the video subscribing if you
02:44 - haven't already you can also become a
02:45 - channel member by flicking the join
02:47 - button next to the subscribe button to
02:49 - get some cool perks and also to be able
02:51 - to download all of the source code and
02:53 - GUIs
02:55 - okay so let's get going I'm gonna insert
02:58 - another scripts into the service script
03:00 - service I'm going to call this script
03:01 - data or there you can call it whatever
03:03 - you like now once we've done this I'm
03:05 - gonna create a player added event
03:07 - listener and what that's gonna do is
03:09 - gonna fire some code when a player joins
03:12 - the game so game dot sorry go back in
03:16 - here game dot
03:17 - players dot play added code on connect
03:20 - function and then in these brackets
03:23 - we're gonna have the argument so the
03:25 - player that will join the game okay so
03:28 - this player object here this this player
03:31 - here that's going to be the player who
03:33 - joins the game so whatever we do to this
03:35 - player this will be their player objects
03:37 - will be done to any player who joins the
03:39 - game so firstly don't want to have that
03:41 - we want to insert a folder into their
03:45 - player we want to insert that eggs
03:47 - folder now here's what its gonna look
03:49 - like so I'm just gonna change that
03:51 - player here we go so firstly we are
03:55 - instancing a folder so we're inserting a
03:57 - fault we're inserting a folder and we've
04:00 - tied it to a variable called X folder so
04:02 - we can easily reference it we've then
04:04 - set its name to eggs and we're parenting
04:07 - it inside the players object so that
04:09 - that folder that I just showed you gets
04:11 - created whenever you join the game next
04:13 - what we need to do is we need to check
04:16 - to see if you've got any eggs saved
04:18 - currently because if you have then we're
04:21 - going to have to load them into that
04:23 - folder so we're gonna use datastore so
04:26 - let's insert
04:27 - well firstly let's get the data store
04:29 - service so local data store service and
04:32 - that is going to be game : get service
04:36 - data store service ok I'm just speeding
04:40 - things up a little bit so that we can
04:41 - get this tutorial done a little bit
04:44 - faster because that's what we all want
04:45 - next thing we want to do is we want to
04:47 - actually get our data store we've got
04:48 - the service but we need to actually
04:50 - create our data store for this place so
04:52 - we can say local data store equals data
04:55 - store service : get data store and
04:59 - inside these brackets inside speech
05:02 - marks you're going to have to give your
05:03 - data store for this place
05:04 - a name so I'm gonna call it egg hunt
05:06 - again you can call it whatever you'd
05:08 - like as long as it's you know it's good
05:10 - idea to have it submit something similar
05:12 - to what the game is about so you
05:13 - actually can easily understand it and
05:15 - and if anyone else looks at it don't
05:17 - know what the data store is for and it's
05:20 - just for this place so now that we've
05:22 - done that
05:22 - I'm gonna quit variable for replicated
05:24 - storage because we're probably gonna be
05:26 - using that quite often because our eggs
05:28 - folder is in there so a local replicated
05:30 - storage equals game got and get service
05:33 - replicated storage awesome we're ready
05:36 - to go now what we need to do first is we
05:39 - need to create a variable and that
05:41 - variable is gonna be our data now we're
05:43 - not going to set it to anything yet but
05:45 - we're just having it here so that if
05:47 - there is any data that we find we can
05:49 - set that variable to be the data if
05:52 - there is any found next what we need to
05:54 - do is we need to actually get the data
05:56 - from the data store so we're gonna say
05:58 - later I'm going to set that beta to be
06:01 - datastore : gets async so this is going
06:04 - to the datastore in the cloud on a
06:06 - server somewhere owned by roblox and
06:08 - we're gonna ask it if it's got any data
06:10 - for our particular player but we need to
06:13 - give it that key that thing that
06:15 - uniquely identifies the player so we're
06:17 - gonna say egg data that's gonna be my
06:20 - key and the key could be anything as
06:21 - long as it was uniquely identifies the
06:23 - player the egg data part just tells us
06:26 - that it's the key for their collected
06:27 - eggs so if you wanted to call it
06:29 - collected eggs you could do so so I'm
06:31 - just going to call it egg data and I'm
06:33 - gonna do a - you can do you have to do a
06:38 - - I'm just doing it to separate the
06:40 - player ID which
06:41 - next from the egg data so it's easier to
06:43 - read and then we're going to concatenate
06:45 - it with a player's ID because the
06:47 - player's ID is unique and only you are
06:49 - going to have your unique ID so every
06:52 - player's gonna have to a different user
06:53 - ID so you can say dot player dot user ID
06:56 - and the dot dot just concatenate it with
06:58 - this string so now we've got a unique
07:01 - reference for our key so for example my
07:03 - key might be egg data - one four nine
07:07 - four 306 nine because that is my roblox
07:09 - ID now nobody else is going to have that
07:11 - key because I am the only person on
07:13 - roblox to have the ID one four nine four
07:16 - 306 nine and if you don't know you use
07:18 - user ID if you go to your roblox profile
07:20 - it'll appear in the URL okay it's that
07:24 - string of numbers right there next what
07:27 - we need to do is we need to put this in
07:29 - a pea cool because data stores might go
07:31 - down or they might fail and when they
07:33 - fail they'll cause an error in the
07:35 - script and when we get an error it will
07:36 - stop the entire script which means
07:38 - nobody's data will get saved or loaded
07:40 - from then on and we don't want that
07:42 - if there's one error with one player we
07:44 - don't wanna break the whole script for
07:45 - everybody else so what we can do is use
07:47 - a pea call and a pea call will catch an
07:50 - error if there is one so if there's an
07:51 - error it won't break the entire script
07:53 - it will keep it running but it will just
07:54 - it will catch that's error before it
07:57 - breaks the rest of the scripts and stops
07:59 - it from running so it contains it within
08:00 - that peak or so local and then we're
08:03 - gonna have two variables success and
08:05 - there an error message so if everything
08:08 - went well success is going to be true
08:10 - and there's not going to be an error
08:11 - message so this will be nil but if there
08:12 - wasn't if it wasn't a success and
08:14 - something went wrong so there was an
08:15 - error success would be false but error
08:18 - message would have the error typed is
08:21 - variable so it's a good way of tracking
08:22 - any errors without breaking the script
08:25 - so equals P cool and then brackets when
08:27 - it's a function another pair of brackets
08:29 - here and then we're going to indent this
08:32 - data line and add an end with a closing
08:34 - bracket like this so this is our P cool
08:37 - so now what we want to do is we want to
08:39 - check this if it was if it was a success
08:41 - so if success then that just means if
08:44 - success was true and everything went
08:46 - well then we know that the data store
08:49 - request was successful we managed to
08:51 - Paul roblox's data tour servers and
08:55 - it's either sent us back some data or
08:57 - there was no data stored from the player
08:59 - there might be a new player to the game
09:01 - so if success and data so if data is not
09:04 - nil and if there is actually some value
09:08 - associated with this variable which
09:10 - there currently isn't but we're updating
09:12 - it here now when we have got the data
09:15 - there should be some data then what
09:18 - we're going to do is when I loop through
09:19 - the data because the data that we get is
09:22 - gonna be a table we're gonna save it
09:23 - later on to be a table like this so
09:26 - we're gonna have egg named comma egg
09:29 - name okay so we're gonna have all the
09:31 - egg names in this table are strings
09:33 - separated by commas so what I'm gonna do
09:35 - is going to loop through them using a
09:37 - for loop so we're gonna say for
09:38 - underscore cuz we're not using the index
09:40 - variable there's no need for it for
09:42 - underscore egg name in pairs and then
09:45 - we're gonna loop through the data which
09:47 - is gonna be a table then L so you do and
09:50 - then we're gonna say an end down here to
09:53 - close that for loop
09:54 - now for every single egg in the table
09:56 - we're gonna loop through it and so
09:58 - whatever we do in this for loop is going
09:59 - to it's gonna happen for each item in
10:02 - the table so for the every egg name we
10:05 - need to firstly check if it is natural
10:07 - egg in replicate storage in that folder
10:09 - in replicated storage called eggs
10:11 - because it is a real egg
10:13 - there will be an Associated egg model or
10:15 - parts in there so if replicated storage
10:18 - dot eggs yeah kind of find first child
10:25 - egg name then we know there is a real
10:30 - egg okay and maybe if the data store got
10:32 - corrupted or someone tried to explore it
10:35 - and put a name of an egg that wasn't
10:38 - actually in there or something or we
10:40 - accidentally deleted the egg out the
10:41 - folder you know we're just doing this if
10:43 - statement to check for any potential
10:45 - errors that may arise what we can do is
10:47 - we can then insert that value into their
10:50 - eggs folder because remember I said
10:51 - earlier that when you get an egg is
10:53 - going to insert that value into your
10:55 - player we need to then save all the
10:57 - names of those values so basically all
10:59 - the eggs you have in the datastore
11:00 - but then when we read you in the game
11:02 - you're gonna have to reinsert that
11:04 - folder it's gonna be empty so you have
11:05 - to loop through all the eggs I've been
11:07 - saved in the latest
11:08 - we then need to insert the value for
11:10 - each one again so we can see all of the
11:12 - eggs that you currently have in your
11:13 - player so local egg value equals
11:18 - incidence new and I'm choosing a ball
11:20 - value you could do a string value or
11:22 - anything else you can even do a model or
11:24 - another folder but I'm doing a ball
11:26 - value because it's just you know simple
11:28 - and we usually do use ball values or
11:30 - string values when we're doing the sort
11:31 - of stuff so egg value dot name equals
11:34 - egg name okay pretty simple we're just
11:36 - setting the values name to whatever the
11:38 - egg is that was in that datastore table
11:40 - and then we're going to put the egg
11:42 - value inside of that eggs folder so egg
11:45 - value dot parent equals x folder all
11:48 - right brilliant so we've just now set it
11:51 - up so that if there is data stored in
11:53 - your data store then it's going to loop
11:57 - through all of that data and it's going
11:58 - to insert a value for every egg that's
12:01 - inside this table now we haven't
12:03 - actually made the saving work yet but
12:05 - what we can do is I'm just gonna do a
12:06 - test on my end to see if the loading is
12:09 - working because I'm going to insert some
12:11 - dummy data into my data store from a
12:13 - plugin which allows me to edit it okay
12:17 - so I'm gonna go into the data store
12:19 - editor by a crazy man 32 or you can get
12:22 - this plugin if you like I'll leave it in
12:23 - the description but it's not essential
12:24 - it's just a way to test if they're
12:26 - working and to debug them so the
12:28 - datastore name is gonna be egg hunt
12:29 - because that's what I put up here in the
12:32 - datastore name and then I'm gonna click
12:35 - connect don't worry about the scope or
12:36 - whoops I need to go to home game
12:38 - settings options and allow HTTP request
12:41 - and enable studio access to API services
12:44 - try again okay now I need to put the
12:47 - players key unique identifier for a
12:49 - player and that's gonna be egg egg data
12:52 - that was the name of the key - and then
12:54 - my user ID 149 4306 9 ok no data
12:59 - excellent so there is no data because
13:02 - they haven't written to the datastore
13:03 - yet but when we save data we should be
13:07 - able to go into this plug-in and see the
13:09 - data that we've saved
13:10 - ok so we'll leave this open for now with
13:12 - our date with our key in there and now
13:15 - we're gonna script the we're gonna
13:17 - script the saving of data so hopefully
13:19 - we can check it out in this editor and
13:21 - see it
13:21 - back in so this next part is gonna be
13:25 - pretty easy we've got over the hard part
13:27 - now so we're on the home straight so
13:29 - we're gonna do game dot players
13:30 - dot play out removing so this is the
13:33 - same as player added but it's just a
13:35 - little bit different in that the event
13:37 - is going to run it's gonna be triggered
13:39 - when a player leaves the game okay not
13:41 - when they join it but when I play out
13:42 - leaves so we're gonna do player removing
13:44 - curl on connects function layer okay so
13:49 - now what we need to do is we need to get
13:53 - all of the eggs inside of their folder
13:55 - that X folder that we created and then
13:57 - we need to put them in a table to save
13:59 - it to dig to the data store because
14:00 - we're taking the data we're getting it
14:02 - in table form so we need to save it in
14:04 - table form so let's create an egg table
14:08 - local exhale rule and which one do a
14:10 - blank table for now now we need to loop
14:12 - through all of those egg values in there
14:15 - player eggs folder so I'm gonna say four
14:17 - underscore again it's not using the
14:19 - index value have no need for that so you
14:21 - can just make it - if you're not using
14:22 - it for underscore comma egg in pairs and
14:26 - then we're gonna be looping through
14:29 - player dots eggs : get children okay so
14:34 - all of the things inside that eggs
14:37 - folder which is gonna be their values
14:38 - and this isn't the eggs folder in
14:41 - replicated storage or in you know
14:43 - workspace it's actually going to be in
14:44 - their player object because we create it
14:46 - at the start so for everything inside of
14:48 - this folder we're gonna insert it into
14:50 - the table so for each egg we're gonna
14:52 - insert into the X table the egg name so
14:56 - egg dot name we're gonna insert that
14:57 - into the X table okay brilliant and then
15:00 - just for some extra peace of mind it
15:01 - actually has been inserted you could
15:03 - print out f dot name okay and that will
15:06 - just print out if it's been inserted
15:08 - next thing we need to set a sink so we
15:12 - need to send the data to roblox's
15:14 - datasource and we need to tell it that
15:15 - we want to save this table to our
15:18 - players key so to do that we're going to
15:20 - say datastore curl onset async and then
15:24 - inside of here we firstly need to give
15:26 - the key so the same key that we've done
15:28 - up here to uniquely identify a player
15:30 - and the data store so egg data - and
15:33 - then we'll do dot
15:35 - I user ID so it has to be the exact same
15:38 - as you've done up here in the guess
15:39 - async they can't be different okay and a
15:42 - lot of people are saying well why do you
15:43 - have to have this string here at the
15:44 - start with - yeah actually okay so if
15:47 - you have multiple data stores so let's
15:49 - say you had a datastore for your coins
15:51 - or your cash and then your eggs that
15:53 - you've got okay if you just used player
15:55 - don't user ID then you'd have the same
15:57 - key for two different data stores so
15:59 - eventually it would overwrite so if you
16:01 - were writing your cash to the datastore
16:03 - with user ID and then you wrote your egg
16:06 - data you write the egg data with the
16:08 - same key without a string or anything
16:10 - you'd be overwriting the caf
16:12 - so you need different keys and you do
16:14 - that by having a string before it with
16:16 - the name of the thing that you're saving
16:18 - and that way you have two separate keys
16:20 - and it also just keeps it easy to
16:23 - understand what you're saving so now
16:25 - that we've written out the key we need
16:26 - to do a comma and we need to write the
16:29 - actual thing that you want to save to
16:33 - this datastore so I'm gonna save the X
16:34 - table okay so second thing is the thing
16:38 - you're gonna save and that's gonna be
16:39 - the X table and by now it will be full
16:41 - of eggs okay because we've loosed we've
16:43 - used this for loop to loop through all
16:45 - of the eggs in your players folder and
16:47 - then we're using tabled or insert which
16:49 - will insert the eggs name into the table
16:51 - and then by when it comes to get async
16:53 - then we will be able to get that table
16:55 - from the datastore which was safe the
16:57 - last time you left and it will be full
16:59 - of strings of eggs names and then what
17:02 - we can do is we can loop through that
17:04 - data which we got from the datastore we
17:06 - can check if it is actually in the eggs
17:08 - folder and if it is then we can insert
17:09 - that egg value back into your back into
17:13 - your door back into your folder okay so
17:17 - what we now need to do is we need to do
17:20 - another peek or in case the set async
17:21 - goes wrong so same thing again local
17:23 - success common error message equals P
17:26 - call function and if there are any
17:29 - errors that arise during the saving
17:32 - maybe data stores go down because they
17:33 - do do they do go down if you've ever had
17:36 - you've ever gone into a roblox game and
17:38 - your data's been lost or corrupted
17:39 - that's probably because they still went
17:40 - down or there's a problem so that's why
17:42 - Pecos are so importantly it doesn't
17:44 - break your script so we can then say if
17:47 - success
17:48 - then Prince saved elfs Prince error
17:54 - message because the else statement will
17:57 - only run if success is false and when
17:59 - success is false then obviously there
18:01 - will be an error message so you can
18:03 - print it out okay so now let's go ahead
18:05 - and test it out now again I'm just gonna
18:08 - tell you that in order for this to work
18:10 - in roblox to do you firstly need to
18:11 - publish the place then you need to go to
18:13 - game settings options and make sure that
18:16 - enable studio access to API services is
18:19 - turned on okay now you can also test it
18:21 - in a roblox game if it's not working for
18:23 - you if it isn't working for you it is
18:26 - kind of hard to debug data stores but
18:27 - don't be you know don't be down if it
18:30 - doesn't work okay because data stores
18:32 - are the hardest things to debug because
18:34 - you don't get much error data from them
18:37 - but just keep trying okay and make sure
18:39 - you followed the tutorial to a tee so
18:42 - let's head into the game now we're going
18:45 - to have to collect some eggs obviously
18:46 - you can see that the eggs folder has
18:48 - been added into my player which is a
18:50 - good start and we need to go and pick up
18:52 - an egg and let's firstly see if it gets
18:54 - added into our folder let's see I don't
18:57 - think we scripted that actually ok we
18:59 - can script that actually that was my
19:01 - that was my bad and we actually need to
19:02 - script in the egg spawns
19:04 - to insert it into your folder when you
19:07 - actually pick up an egg because we're
19:09 - only inserting into your folder right
19:10 - now when we're loading the save data but
19:13 - you can't have any save data if you
19:14 - can't pick up any eggs to begin with so
19:17 - what we're going to do is inside this
19:20 - egg clone dot touched event here if
19:23 - player then we can do is just after this
19:27 - found egg fire clients that's right if
19:31 - player find first child eggs so if they
19:34 - have that egg folder inside their player
19:36 - then we're gonna do we're gonna check to
19:40 - see if it isn't already there so if if
19:41 - the if there is a value for that egg
19:43 - already there then we know that there
19:45 - they've touched an egg cause I've
19:47 - already picked up so we don't want to
19:48 - have loads of loads and loads and loads
19:50 - and loads are the same values for the
19:51 - same egg so we only want one egg one
19:53 - value pack so we need to check if it's
19:55 - not already there so if not player got
19:58 - eggs come on find first child
20:01 - egg clone got name then and then it have
20:06 - an end here so now if we get inside this
20:09 - if statement we know that's the egg in
20:13 - already in the player okay because we've
20:15 - used to not and not it's like the
20:16 - inverse so if the egg is not in the
20:20 - player
20:21 - eggs folder already then we can add it
20:23 - okay so we can say local egg value for
20:25 - instance don't new and I'm doing a bull
20:28 - value again just to keep it consistent
20:30 - with the other script which inserts bull
20:31 - values egg value dot name equals egg
20:34 - clone dot name an egg value dot parent
20:38 - equals player's eggs and again don't
20:41 - worry about it being a bull value it
20:43 - could be any type of value just as long
20:45 - as it's an object that we can give a
20:47 - name to because we're not worrying about
20:48 - value property whether it's a bull value
20:50 - string value number value in value etc
20:52 - we don't care as long as we just have an
20:53 - object which we can give a name and then
20:55 - we can read that name from the data
20:57 - store script okay so let's head over and
21:00 - pick up one of these eggs let's open up
21:01 - the ex folder now watch it carefully see
21:04 - if an arrow appears which will mean
21:05 - there's something inside of it when step
21:06 - from the egg okay brilliant it did we
21:08 - found the rainbow egg and now you can
21:10 - see inside the eggs folder we have that
21:12 - rainbow egg a value now what we should
21:15 - expect to see now is when we leave the
21:17 - game the script is going to loop through
21:20 - everything in this X folder and it's
21:22 - gonna add it to a table so you should
21:23 - have a table with that rainbow egg
21:25 - inside of it when we leave the game and
21:26 - that should be saved to our datastore
21:27 - now let's see what happened okay we left
21:30 - the game and it printed out rainbow egg
21:34 - now one thing we're also going to do is
21:36 - because if you're the last player in the
21:38 - game then what could happen is that the
21:40 - when you leave the game the server could
21:42 - immediately shut down and it could shut
21:43 - down before this datastore code is
21:46 - finished now in the case of studio
21:48 - testing this could happen because you're
21:50 - going to be the only player in the game
21:51 - so when you leave the game when you take
21:53 - a stop with them it could happen that
21:54 - the the game the play solo just shuts
21:57 - down before your datastore code is
22:00 - finished so what we're gonna do is we're
22:02 - going to prolong the server from well
22:04 - when the server does shutdown we're
22:06 - going to keep it running and make sure
22:09 - that everyone's data is saved before it
22:11 - shuts down and you can do this by
22:12 - something called bind to close let me
22:14 - show you what this is about so if you
22:16 - say game Columbine to close then you
22:18 - have open brackets and you can put a
22:21 - function in here just like you do an
22:22 - event like this then inside of here what
22:24 - what happen is when the server is about
22:28 - to shut down it won't shut down until
22:34 - code inside of here
22:35 - is executed okay so until so the server
22:41 - will own shut down when we finished and
22:43 - inside of here I've done another I've
22:45 - done for loop for all players in the
22:46 - game and then wife done is I've copied
22:49 - the code from this player removing just
22:52 - into this for loop so every player in
22:55 - the game is gonna have their data saved
22:56 - that is current in the game so if you're
22:59 - the last player in the game then it's
23:00 - going to save your data for you even
23:02 - though you let you've left the server is
23:04 - still open so it's going to be able to
23:06 - do this for you okay so it's just saving
23:08 - your data if you have left the game when
23:11 - the server is shutting down only for the
23:13 - last person and that will make sure that
23:14 - your data to just get saved because
23:16 - sometimes you can leave the game and
23:19 - you're you've done everything correctly
23:21 - in your data store but it's still not
23:23 - saving and it's probably because you're
23:24 - the last person in the game and the
23:25 - server has shut down before your data
23:27 - store code is executed so this code it
23:29 - will create another X table folder and
23:31 - for every single egg in your player 2 X
23:33 - folder it will insert that egg and then
23:36 - it will set it to your datastore and if
23:39 - it was a success it will then print that
23:41 - it's saved on find 2 clothes for you ok
23:44 - I'm going to close BTC so now I'm gonna
23:49 - do is I'm going to in fact I'm going to
23:54 - just change the name of my data store
23:57 - here because I have them some testing
23:59 - before I've showed you this and I've
24:01 - currently got some data in my key so
24:03 - we're using a brand new data store
24:05 - called aircon to when you change the
24:07 - name of this it will just basically
24:08 - everyone who joins the game will have
24:10 - brand-new data because it's a different
24:12 - data store if you were to change it
24:14 - about as egg hunt then it would have the
24:16 - data that I've just saved but let's try
24:19 - again then let's go into the game and
24:21 - again players having blocks and the eggs
24:24 - folder is currently empty
24:27 - so I'm gonna go in here I'm gonna go
24:28 - pick up an egg this one here have a
24:31 - rainbow egg and step on it okay great
24:35 - you found the rainbow egg and it's gone
24:36 - into our folder here if I try and step
24:38 - on it again okay it still says you found
24:40 - the rainbow egg
24:41 - but it hasn't inserted another egg into
24:43 - the folder because we did that check
24:44 - with the if statement earlier so that's
24:46 - good now let's leave the game it should
24:48 - loop through our X folder and insert
24:50 - that rainbow egg into the table and it
24:51 - has because it's printed that rainbow
24:52 - egg and now I've just redoing the game
24:58 - and there we go I've got my rainbow egg
25:00 - still in here so it's managed to save my
25:02 - data we leave the game again okay it's
25:06 - it's saved and now we head back in and
25:08 - [Music]
25:11 - eggs rainbow egg it's still in there
25:15 - okay and just to show you if I head in
25:17 - here and I insert a string or anything
25:20 - more value it isn't math water is I'm
25:22 - just going to call it test 1 2 3 and we
25:26 - stopped the game I've done that on the
25:28 - client as well you can see it printed
25:30 - out test 1 2 3 and we joined the game
25:33 - again and we're going to eggs oh it's
25:37 - not there you know why because test 1 2
25:42 - 3 isn't an actual egg in the X folder so
25:45 - what it's doing is its tested that and
25:46 - because it's not an actual like it
25:48 - didn't add it into our folder so there
25:50 - we go
25:50 - that's a working datastore scripts now
25:55 - if it isn't working for you
25:56 - test it in a roblox game okay you can
25:58 - see here it saved it on buying too close
26:00 - so sometimes in studio it might not work
26:03 - and I'm not sure why that happens but
26:05 - hopefully the binder clothes just fix
26:07 - that but I think it should work
26:08 - perfectly in a proper roblox game so
26:12 - that it's gonna be the end for today's
26:14 - part
26:15 - egg egg hunt part 2 if you would like to
26:17 - get the code you can become a channel
26:18 - member a premium channel member for 4
26:20 - dollars 99 a month help support the
26:22 - channel as well you can click the join
26:24 - button underneath the video both
26:26 - subscribe button or and make sure that
26:29 - you like the video as well and subscribe
26:30 - if you haven't already
26:31 - now hopefully in the next part if I
26:33 - manage to get around to doing that
26:35 - hopefully it'll be soon then we'll be
26:37 - learning how to make an inventory UI
26:39 - where it shows you
26:40 - the eggs that you currently got so make
26:42 - sure you subscribe for that and I'll see
26:44 - you in the next video thank you for
26:46 - watching and I'll see you next time
26:47 - davin blocks dying off Cheers

Cleaned transcript:

hey everyone welcome to episode 2 in my how to make an egg hunt series hope you're having a great Easter if you are celebrating and today we are going to be looking at data stores so how do we save the eggs which a player has gotten so you may be wondering how this will work and as many of you might not have even doing any data store work before but the way datastore works is it's pretty simple all we do is we tell the script we give a key for each player they have their own key which uniquely identifies their data which will be stored in the data store service and then we can write data to that key or get the data from that key so we can use get a sync to grab the data from the data store and set a sync to set the data store now you can't just save objects to a data store because it's not allowed to do that you can't just save an egg so the way we're going to do it is we're going to have a folder in the player which gets generated when they join the game and then whenever they step on an egg we are going to insert a string value into that folder with the name of the egg okay so after steps on the rainbow egg and you can see a string well it doesn't have to be a string value or it just has to be a value it could be any object really just as long as it's got like a a thing with its name in there so I've gone for a ball value as long as it's named whatever the egg is called we've basically got a store a temporary store of all of the eggs that you've caught currently in the game so when you catch a new egg it will add those values in there and then what we can do is when we leave the game we can loop through this egg folder and then what we can do is we can insert into a table the names of all of these values here all of these value objects so we could insert edit egg of Doge mystery egg and rainbow egg into our table and you allowed to save tables so what we're doing is we're saving a table of all of the eggs that we found so far okay and we're going to be inserting into this table when we find an egg so we'll be able to keep track of how many eggs we've got in the game which will be useful in the next part of the video series when we will be making a collection GUI like an inventory GUI but also it helps us because then we can just save the names of those eggs in that folder to the data store and then when we rejoin the game we can just get them from our data store and then insert them back into that inventory okay so let's go ahead and get started and don't forget if you are enjoying the series so far then why not show your support by liking the video subscribing if you haven't already you can also become a channel member by flicking the join button next to the subscribe button to get some cool perks and also to be able to download all of the source code and GUIs okay so let's get going I'm gonna insert another scripts into the service script service I'm going to call this script data or there you can call it whatever you like now once we've done this I'm gonna create a player added event listener and what that's gonna do is gonna fire some code when a player joins the game so game dot sorry go back in here game dot players dot play added code on connect function and then in these brackets we're gonna have the argument so the player that will join the game okay so this player object here this this player here that's going to be the player who joins the game so whatever we do to this player this will be their player objects will be done to any player who joins the game so firstly don't want to have that we want to insert a folder into their player we want to insert that eggs folder now here's what its gonna look like so I'm just gonna change that player here we go so firstly we are instancing a folder so we're inserting a fault we're inserting a folder and we've tied it to a variable called X folder so we can easily reference it we've then set its name to eggs and we're parenting it inside the players object so that that folder that I just showed you gets created whenever you join the game next what we need to do is we need to check to see if you've got any eggs saved currently because if you have then we're going to have to load them into that folder so we're gonna use datastore so let's insert well firstly let's get the data store service so local data store service and that is going to be game get service data store service ok I'm just speeding things up a little bit so that we can get this tutorial done a little bit faster because that's what we all want next thing we want to do is we want to actually get our data store we've got the service but we need to actually create our data store for this place so we can say local data store equals data store service get data store and inside these brackets inside speech marks you're going to have to give your data store for this place a name so I'm gonna call it egg hunt again you can call it whatever you'd like as long as it's you know it's good idea to have it submit something similar to what the game is about so you actually can easily understand it and and if anyone else looks at it don't know what the data store is for and it's just for this place so now that we've done that I'm gonna quit variable for replicated storage because we're probably gonna be using that quite often because our eggs folder is in there so a local replicated storage equals game got and get service replicated storage awesome we're ready to go now what we need to do first is we need to create a variable and that variable is gonna be our data now we're not going to set it to anything yet but we're just having it here so that if there is any data that we find we can set that variable to be the data if there is any found next what we need to do is we need to actually get the data from the data store so we're gonna say later I'm going to set that beta to be datastore gets async so this is going to the datastore in the cloud on a server somewhere owned by roblox and we're gonna ask it if it's got any data for our particular player but we need to give it that key that thing that uniquely identifies the player so we're gonna say egg data that's gonna be my key and the key could be anything as long as it was uniquely identifies the player the egg data part just tells us that it's the key for their collected eggs so if you wanted to call it collected eggs you could do so so I'm just going to call it egg data and I'm gonna do a you can do you have to do a I'm just doing it to separate the player ID which next from the egg data so it's easier to read and then we're going to concatenate it with a player's ID because the player's ID is unique and only you are going to have your unique ID so every player's gonna have to a different user ID so you can say dot player dot user ID and the dot dot just concatenate it with this string so now we've got a unique reference for our key so for example my key might be egg data one four nine four 306 nine because that is my roblox ID now nobody else is going to have that key because I am the only person on roblox to have the ID one four nine four 306 nine and if you don't know you use user ID if you go to your roblox profile it'll appear in the URL okay it's that string of numbers right there next what we need to do is we need to put this in a pea cool because data stores might go down or they might fail and when they fail they'll cause an error in the script and when we get an error it will stop the entire script which means nobody's data will get saved or loaded from then on and we don't want that if there's one error with one player we don't wanna break the whole script for everybody else so what we can do is use a pea call and a pea call will catch an error if there is one so if there's an error it won't break the entire script it will keep it running but it will just it will catch that's error before it breaks the rest of the scripts and stops it from running so it contains it within that peak or so local and then we're gonna have two variables success and there an error message so if everything went well success is going to be true and there's not going to be an error message so this will be nil but if there wasn't if it wasn't a success and something went wrong so there was an error success would be false but error message would have the error typed is variable so it's a good way of tracking any errors without breaking the script so equals P cool and then brackets when it's a function another pair of brackets here and then we're going to indent this data line and add an end with a closing bracket like this so this is our P cool so now what we want to do is we want to check this if it was if it was a success so if success then that just means if success was true and everything went well then we know that the data store request was successful we managed to Paul roblox's data tour servers and it's either sent us back some data or there was no data stored from the player there might be a new player to the game so if success and data so if data is not nil and if there is actually some value associated with this variable which there currently isn't but we're updating it here now when we have got the data there should be some data then what we're going to do is when I loop through the data because the data that we get is gonna be a table we're gonna save it later on to be a table like this so we're gonna have egg named comma egg name okay so we're gonna have all the egg names in this table are strings separated by commas so what I'm gonna do is going to loop through them using a for loop so we're gonna say for underscore cuz we're not using the index variable there's no need for it for underscore egg name in pairs and then we're gonna loop through the data which is gonna be a table then L so you do and then we're gonna say an end down here to close that for loop now for every single egg in the table we're gonna loop through it and so whatever we do in this for loop is going to it's gonna happen for each item in the table so for the every egg name we need to firstly check if it is natural egg in replicate storage in that folder in replicated storage called eggs because it is a real egg there will be an Associated egg model or parts in there so if replicated storage dot eggs yeah kind of find first child egg name then we know there is a real egg okay and maybe if the data store got corrupted or someone tried to explore it and put a name of an egg that wasn't actually in there or something or we accidentally deleted the egg out the folder you know we're just doing this if statement to check for any potential errors that may arise what we can do is we can then insert that value into their eggs folder because remember I said earlier that when you get an egg is going to insert that value into your player we need to then save all the names of those values so basically all the eggs you have in the datastore but then when we read you in the game you're gonna have to reinsert that folder it's gonna be empty so you have to loop through all the eggs I've been saved in the latest we then need to insert the value for each one again so we can see all of the eggs that you currently have in your player so local egg value equals incidence new and I'm choosing a ball value you could do a string value or anything else you can even do a model or another folder but I'm doing a ball value because it's just you know simple and we usually do use ball values or string values when we're doing the sort of stuff so egg value dot name equals egg name okay pretty simple we're just setting the values name to whatever the egg is that was in that datastore table and then we're going to put the egg value inside of that eggs folder so egg value dot parent equals x folder all right brilliant so we've just now set it up so that if there is data stored in your data store then it's going to loop through all of that data and it's going to insert a value for every egg that's inside this table now we haven't actually made the saving work yet but what we can do is I'm just gonna do a test on my end to see if the loading is working because I'm going to insert some dummy data into my data store from a plugin which allows me to edit it okay so I'm gonna go into the data store editor by a crazy man 32 or you can get this plugin if you like I'll leave it in the description but it's not essential it's just a way to test if they're working and to debug them so the datastore name is gonna be egg hunt because that's what I put up here in the datastore name and then I'm gonna click connect don't worry about the scope or whoops I need to go to home game settings options and allow HTTP request and enable studio access to API services try again okay now I need to put the players key unique identifier for a player and that's gonna be egg egg data that was the name of the key and then my user ID 149 4306 9 ok no data excellent so there is no data because they haven't written to the datastore yet but when we save data we should be able to go into this plugin and see the data that we've saved ok so we'll leave this open for now with our date with our key in there and now we're gonna script the we're gonna script the saving of data so hopefully we can check it out in this editor and see it back in so this next part is gonna be pretty easy we've got over the hard part now so we're on the home straight so we're gonna do game dot players dot play out removing so this is the same as player added but it's just a little bit different in that the event is going to run it's gonna be triggered when a player leaves the game okay not when they join it but when I play out leaves so we're gonna do player removing curl on connects function layer okay so now what we need to do is we need to get all of the eggs inside of their folder that X folder that we created and then we need to put them in a table to save it to dig to the data store because we're taking the data we're getting it in table form so we need to save it in table form so let's create an egg table local exhale rule and which one do a blank table for now now we need to loop through all of those egg values in there player eggs folder so I'm gonna say four underscore again it's not using the index value have no need for that so you can just make it if you're not using it for underscore comma egg in pairs and then we're gonna be looping through player dots eggs get children okay so all of the things inside that eggs folder which is gonna be their values and this isn't the eggs folder in replicated storage or in you know workspace it's actually going to be in their player object because we create it at the start so for everything inside of this folder we're gonna insert it into the table so for each egg we're gonna insert into the X table the egg name so egg dot name we're gonna insert that into the X table okay brilliant and then just for some extra peace of mind it actually has been inserted you could print out f dot name okay and that will just print out if it's been inserted next thing we need to set a sink so we need to send the data to roblox's datasource and we need to tell it that we want to save this table to our players key so to do that we're going to say datastore curl onset async and then inside of here we firstly need to give the key so the same key that we've done up here to uniquely identify a player and the data store so egg data and then we'll do dot I user ID so it has to be the exact same as you've done up here in the guess async they can't be different okay and a lot of people are saying well why do you have to have this string here at the start with yeah actually okay so if you have multiple data stores so let's say you had a datastore for your coins or your cash and then your eggs that you've got okay if you just used player don't user ID then you'd have the same key for two different data stores so eventually it would overwrite so if you were writing your cash to the datastore with user ID and then you wrote your egg data you write the egg data with the same key without a string or anything you'd be overwriting the caf so you need different keys and you do that by having a string before it with the name of the thing that you're saving and that way you have two separate keys and it also just keeps it easy to understand what you're saving so now that we've written out the key we need to do a comma and we need to write the actual thing that you want to save to this datastore so I'm gonna save the X table okay so second thing is the thing you're gonna save and that's gonna be the X table and by now it will be full of eggs okay because we've loosed we've used this for loop to loop through all of the eggs in your players folder and then we're using tabled or insert which will insert the eggs name into the table and then by when it comes to get async then we will be able to get that table from the datastore which was safe the last time you left and it will be full of strings of eggs names and then what we can do is we can loop through that data which we got from the datastore we can check if it is actually in the eggs folder and if it is then we can insert that egg value back into your back into your door back into your folder okay so what we now need to do is we need to do another peek or in case the set async goes wrong so same thing again local success common error message equals P call function and if there are any errors that arise during the saving maybe data stores go down because they do do they do go down if you've ever had you've ever gone into a roblox game and your data's been lost or corrupted that's probably because they still went down or there's a problem so that's why Pecos are so importantly it doesn't break your script so we can then say if success then Prince saved elfs Prince error message because the else statement will only run if success is false and when success is false then obviously there will be an error message so you can print it out okay so now let's go ahead and test it out now again I'm just gonna tell you that in order for this to work in roblox to do you firstly need to publish the place then you need to go to game settings options and make sure that enable studio access to API services is turned on okay now you can also test it in a roblox game if it's not working for you if it isn't working for you it is kind of hard to debug data stores but don't be you know don't be down if it doesn't work okay because data stores are the hardest things to debug because you don't get much error data from them but just keep trying okay and make sure you followed the tutorial to a tee so let's head into the game now we're going to have to collect some eggs obviously you can see that the eggs folder has been added into my player which is a good start and we need to go and pick up an egg and let's firstly see if it gets added into our folder let's see I don't think we scripted that actually ok we can script that actually that was my that was my bad and we actually need to script in the egg spawns to insert it into your folder when you actually pick up an egg because we're only inserting into your folder right now when we're loading the save data but you can't have any save data if you can't pick up any eggs to begin with so what we're going to do is inside this egg clone dot touched event here if player then we can do is just after this found egg fire clients that's right if player find first child eggs so if they have that egg folder inside their player then we're gonna do we're gonna check to see if it isn't already there so if if the if there is a value for that egg already there then we know that there they've touched an egg cause I've already picked up so we don't want to have loads of loads and loads and loads and loads are the same values for the same egg so we only want one egg one value pack so we need to check if it's not already there so if not player got eggs come on find first child egg clone got name then and then it have an end here so now if we get inside this if statement we know that's the egg in already in the player okay because we've used to not and not it's like the inverse so if the egg is not in the player eggs folder already then we can add it okay so we can say local egg value for instance don't new and I'm doing a bull value again just to keep it consistent with the other script which inserts bull values egg value dot name equals egg clone dot name an egg value dot parent equals player's eggs and again don't worry about it being a bull value it could be any type of value just as long as it's an object that we can give a name to because we're not worrying about value property whether it's a bull value string value number value in value etc we don't care as long as we just have an object which we can give a name and then we can read that name from the data store script okay so let's head over and pick up one of these eggs let's open up the ex folder now watch it carefully see if an arrow appears which will mean there's something inside of it when step from the egg okay brilliant it did we found the rainbow egg and now you can see inside the eggs folder we have that rainbow egg a value now what we should expect to see now is when we leave the game the script is going to loop through everything in this X folder and it's gonna add it to a table so you should have a table with that rainbow egg inside of it when we leave the game and that should be saved to our datastore now let's see what happened okay we left the game and it printed out rainbow egg now one thing we're also going to do is because if you're the last player in the game then what could happen is that the when you leave the game the server could immediately shut down and it could shut down before this datastore code is finished now in the case of studio testing this could happen because you're going to be the only player in the game so when you leave the game when you take a stop with them it could happen that the the game the play solo just shuts down before your datastore code is finished so what we're gonna do is we're going to prolong the server from well when the server does shutdown we're going to keep it running and make sure that everyone's data is saved before it shuts down and you can do this by something called bind to close let me show you what this is about so if you say game Columbine to close then you have open brackets and you can put a function in here just like you do an event like this then inside of here what what happen is when the server is about to shut down it won't shut down until code inside of here is executed okay so until so the server will own shut down when we finished and inside of here I've done another I've done for loop for all players in the game and then wife done is I've copied the code from this player removing just into this for loop so every player in the game is gonna have their data saved that is current in the game so if you're the last player in the game then it's going to save your data for you even though you let you've left the server is still open so it's going to be able to do this for you okay so it's just saving your data if you have left the game when the server is shutting down only for the last person and that will make sure that your data to just get saved because sometimes you can leave the game and you're you've done everything correctly in your data store but it's still not saving and it's probably because you're the last person in the game and the server has shut down before your data store code is executed so this code it will create another X table folder and for every single egg in your player 2 X folder it will insert that egg and then it will set it to your datastore and if it was a success it will then print that it's saved on find 2 clothes for you ok I'm going to close BTC so now I'm gonna do is I'm going to in fact I'm going to just change the name of my data store here because I have them some testing before I've showed you this and I've currently got some data in my key so we're using a brand new data store called aircon to when you change the name of this it will just basically everyone who joins the game will have brandnew data because it's a different data store if you were to change it about as egg hunt then it would have the data that I've just saved but let's try again then let's go into the game and again players having blocks and the eggs folder is currently empty so I'm gonna go in here I'm gonna go pick up an egg this one here have a rainbow egg and step on it okay great you found the rainbow egg and it's gone into our folder here if I try and step on it again okay it still says you found the rainbow egg but it hasn't inserted another egg into the folder because we did that check with the if statement earlier so that's good now let's leave the game it should loop through our X folder and insert that rainbow egg into the table and it has because it's printed that rainbow egg and now I've just redoing the game and there we go I've got my rainbow egg still in here so it's managed to save my data we leave the game again okay it's it's saved and now we head back in and eggs rainbow egg it's still in there okay and just to show you if I head in here and I insert a string or anything more value it isn't math water is I'm just going to call it test 1 2 3 and we stopped the game I've done that on the client as well you can see it printed out test 1 2 3 and we joined the game again and we're going to eggs oh it's not there you know why because test 1 2 3 isn't an actual egg in the X folder so what it's doing is its tested that and because it's not an actual like it didn't add it into our folder so there we go that's a working datastore scripts now if it isn't working for you test it in a roblox game okay you can see here it saved it on buying too close so sometimes in studio it might not work and I'm not sure why that happens but hopefully the binder clothes just fix that but I think it should work perfectly in a proper roblox game so that it's gonna be the end for today's part egg egg hunt part 2 if you would like to get the code you can become a channel member a premium channel member for 4 dollars 99 a month help support the channel as well you can click the join button underneath the video both subscribe button or and make sure that you like the video as well and subscribe if you haven't already now hopefully in the next part if I manage to get around to doing that hopefully it'll be soon then we'll be learning how to make an inventory UI where it shows you the eggs that you currently got so make sure you subscribe for that and I'll see you in the next video thank you for watching and I'll see you next time davin blocks dying off Cheers
