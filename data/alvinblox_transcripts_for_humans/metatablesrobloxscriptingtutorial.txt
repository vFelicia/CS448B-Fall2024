With timestamps:

00:01 - hey everyone in this video we're going
00:02 - to be going over
00:03 - meta tables in roblox so
00:07 - in roblox obviously we have tables
00:10 - and tables can store data so
00:13 - let's just create a table my table
00:17 - like this and inside of it you could
00:20 - have
00:20 - a string or a number or whatever
00:23 - you could have any data in here and you
00:25 - can you can store multiple
00:27 - um pieces of data within a table
00:31 - so what we can also do is
00:34 - we can get items from that table
00:38 - by saying my table and then
00:42 - indexing it with a number so my table
00:45 - one
00:46 - or my table two because we've got two
00:48 - items in this table so if you
00:50 - if we were to say my table one that
00:52 - would be string
00:53 - if it were to say my table two then it
00:56 - would give us
00:57 - 30 the number 30. so this is really all
01:00 - that we can do with tables we can
01:02 - write to them by inserting new pieces of
01:06 - data
01:07 - either by adding it when you create the
01:09 - table like this
01:11 - or by saying table dot insert
01:16 - like this after you've created it so
01:19 - tables
01:19 - limited functionality inserting things
01:22 - and
01:23 - removing things as well because you can
01:24 - say table dot remove
01:26 - and remove from the table so if i was to
01:29 - remove
01:30 - the second index then it would get the
01:33 - second index
01:34 - which is 30 and it would remove it from
01:36 - the table
01:37 - so that is basic functionality of how a
01:40 - table works
01:41 - but we can actually make these tables
01:44 - more powerful and that might be
01:45 - something that you've heard quite a lot
01:47 - when you've
01:47 - looked at meta tables or meta tables
01:50 - make tables
01:51 - more powerful but how could how does
01:54 - that
01:55 - table become more powerful you know what
01:57 - does it mean to become more powerful
01:59 - and really i don't really like that
02:01 - explanation i just
02:02 - met a tables they give you more
02:04 - functionality they
02:06 - allow tables to do things that otherwise
02:09 - they wouldn't have been able to do
02:11 - and i'm going to show you uh one or two
02:14 - of
02:15 - these things that come as part of the
02:17 - extra functionality
02:18 - with meta tables and so what we do
02:22 - is well i'm going to show you actually
02:25 - we're going to create a new table
02:29 - and we're going to have meta methods
02:32 - within that table
02:33 - so let's create a second table and call
02:36 - it
02:37 - my meta table okay and the meta table
02:42 - it just needs to be a table okay there's
02:43 - nothing special about it
02:45 - it's just a table which contains
02:48 - meta methods so meta table
02:53 - is a table containing meta methods
02:57 - but what are method meta methods
03:00 - meta methods they are kind of like
03:03 - events
03:04 - so if you've been scripting for a while
03:08 - you'll know what events are
03:09 - events are triggered when certain things
03:12 - happen
03:13 - and that can allow us to run code at
03:16 - certain times
03:17 - so for example when you touch a brick
03:20 - then a touched event will be fired and
03:22 - it will run some code that's within your
03:24 - touched event
03:26 - so for example we could
03:29 - create a meta method and i'm just going
03:32 - to call it an event right now
03:34 - it's not um officially known as an event
03:37 - but just to make things a bit clearer
03:39 - i'll be calling a meta method and events
03:42 - that's probably not the best you know
03:45 - regarded definition but that's what i'm
03:46 - going to call it
03:47 - to try and help explain it to you so i
03:50 - could have
03:51 - a event within my meta table
03:54 - which will fire some code
03:57 - if you try to index this table you try
04:00 - to index something in the table that
04:02 - isn't there
04:03 - so if i was to say my table
04:07 - and my table
04:10 - four okay i want to get the fourth index
04:13 - in my table but we only have three
04:16 - indexes so an index is just an item in
04:18 - the table so we've got the first one
04:20 - here
04:20 - string the second one is 30 and the
04:22 - third one is
04:24 - another string although this time it's
04:25 - called hey but there is no
04:27 - fourth index so if we tried to index
04:30 - the table and try to get the fourth
04:34 - item out of that table by indexing it
04:36 - with the number four
04:38 - hit over here that would not
04:41 - that would be nil because there is
04:44 - nothing at the fourth
04:46 - index within our table so my table
04:50 - 4 would be if we were to print that for
04:53 - example
04:54 - it would print out nil okay and just to
04:57 - show you here
04:59 - i don't know why it's gone really small
05:01 - apologies for that if i run the game
05:03 - it prints out nil because there is no
05:06 - object
05:06 - uh no item at the fourth index if we did
05:10 - insert another piece of data then this
05:12 - will be our fourth
05:14 - index but as it stands right now
05:17 - we do not have a fourth index in the
05:18 - table we have one two
05:20 - and three so we can create an event
05:22 - which
05:23 - will fire whenever we try to index
05:26 - um try to get an in an index from the
05:30 - table
05:30 - where there's nothing there so in this
05:32 - case we try to
05:34 - get the fourth index in the table
05:38 - then if we had an event within our meta
05:40 - table
05:41 - that would um trigger
05:44 - when we tried to get my table four
05:47 - and we could do a number of things with
05:50 - that we could just print out
05:52 - to the output and say hey you try to
05:55 - access
05:56 - the fourth index in my table but it
05:59 - isn't there
05:59 - but what is the use of that you know
06:02 - what's the point
06:03 - um you may be wondering saying well you
06:05 - know if there's nothing in the table
06:07 - why just have a meta table to print
06:09 - things in in the output that's not going
06:10 - to do anything
06:11 - and that's why the meta table
06:15 - events allow us to have
06:18 - contingency plans so if we
06:21 - desperately need something from this
06:25 - my table 4 call even if it's
06:28 - like a if we needed some data right say
06:31 - we had
06:32 - a script and we had to get
06:36 - a number out of a table and we tried to
06:39 - index the table
06:40 - and there was no number we could have a
06:42 - default value which it returns instead
06:44 - and that's where meta tables
06:46 - are handy because you can say okay i'm
06:48 - gonna get this out of the table
06:50 - but just in case isn't there for some
06:52 - weird reason
06:53 - you know and there's there is no data
06:55 - for the index that i've specified
06:57 - then let's just give it this dummy data
06:59 - instead you know
07:00 - it's kind of it's a bit like if
07:03 - you are loading a player's data
07:06 - and you're loading their cash but they
07:09 - don't have any cash
07:10 - saved when you're looking for it in your
07:12 - data store you're trying to retrieve it
07:14 - but they don't have any cash
07:15 - well let's give them 50 by default and
07:17 - there might be a new player so
07:19 - they don't have any data currently saved
07:22 - so
07:22 - let's give them a default value of 50
07:25 - coins
07:26 - when they first join the game it's quite
07:28 - similar to that because if we were to
07:29 - say
07:30 - my table four and just to make this a
07:33 - little
07:33 - bit more realistic let's just say we
07:36 - have 30 20 10
07:37 - 5 okay just imagine this is a table of
07:40 - numbers
07:41 - and the numbers mean something right and
07:42 - you need to get a number
07:44 - out of that table at the fourth let's do
07:46 - the fifth index now right because we
07:48 - don't have anything stored at the fifth
07:49 - index
07:50 - but if we um try to get
07:54 - a number or a piece of data from the
07:56 - table at the fifth index
07:58 - one two three four oh look at that we
08:01 - don't have any data stored at the fifth
08:03 - index in the table
08:05 - so what are we gonna do because you
08:07 - might need
08:08 - a number to be returned because you
08:10 - could have my number
08:12 - equals my table five and then
08:14 - immediately after that
08:16 - you might do my number times
08:20 - we could just do local another number
08:23 - here
08:23 - equals my number times five now
08:27 - this needs to be a number my number
08:29 - needs to be a number it can't be
08:30 - nil because if it was nil we'd get an
08:32 - error because you'd say
08:34 - um nil times five you can't do that
08:37 - because it's not a number
08:39 - so you'd get an error so if we didn't
08:41 - want our script to cause an
08:43 - error um for example it could be your
08:46 - gameplay script
08:47 - and if this breaks the if this causes an
08:49 - error it's going to stop the entire
08:51 - script
08:52 - and your game is going to break so this
08:54 - has to be a number
08:56 - right and even if we um
09:00 - looked up at the fifth index in the
09:02 - table and we got nil
09:03 - we don't want it to return nil we want
09:05 - it to instead
09:07 - return us a default number any number
09:10 - just give us a number
09:11 - because we don't want our script to fall
09:13 - over and crash
09:16 - when we when we try to multiply nil
09:19 - by five so we just want it to be a
09:20 - number even if it was one
09:22 - right or or a hundred we don't care we
09:25 - just need a number
09:27 - so we can harness the power of meta
09:30 - tables
09:31 - and we can create our own event which
09:33 - detects
09:34 - when you try to
09:37 - get a piece of data from the table and
09:40 - if it's nil
09:41 - and it's not there we can return a
09:43 - default
09:44 - value instead so we could just return
09:47 - the number one for example
09:48 - so it would look up the fifth index find
09:51 - out that it's nil
09:52 - but then because we've got our meta
09:53 - table which has an event inside of it
09:56 - telling us that if you ever look up in
09:58 - the table and find that
10:00 - um there's no data stored for the index
10:04 - that you're trying to find then we'll
10:06 - just return this number instead because
10:07 - we don't want
10:09 - any problems to arise later on in the
10:11 - script if we rely upon this this
10:13 - variable or this call
10:14 - which we do because it's returning a
10:16 - number and then later on we want to
10:17 - multiply that number by five
10:20 - so obviously right now we haven't
10:22 - created our meta table
10:24 - fully um so if we just ignore this line
10:26 - here
10:27 - it doesn't do anything anyway but if we
10:29 - run the script
10:30 - it's going to throw an error because
10:33 - if we look line 6
10:37 - attempt to perform arithmetic which is
10:40 - just
10:41 - math multiplication you're trying to
10:44 - multiply
10:45 - uh a nil which is my number and a number
10:49 - so you obviously can't do that you can't
10:52 - multiply a number by nil
10:54 - it's just impossible you have to be able
10:56 - to multiply a number
10:58 - by another one so we need to
11:02 - set up this meta table um to
11:05 - to set up that event to trigger when we
11:09 - try to index the table
11:11 - and the index that we want the data that
11:14 - we want to get from that index
11:15 - isn't there so how do we do that well
11:18 - what i'm going to do
11:19 - is i'm just going to put our meta table
11:22 - um onto a few lines let's give ourselves
11:25 - a couple of lines
11:26 - of space here and now you're probably
11:29 - wondering
11:30 - well how do we create these events do we
11:33 - make them ourselves
11:35 - or is there a predefined list of events
11:37 - which we can choose from
11:39 - and yes there are a predefined
11:42 - list of events which we can use in our
11:45 - meta table
11:46 - provided by roblox and these are called
11:50 - meta methods okay now let's
11:54 - go and find a list of all these events
11:57 - where can we find them well i will show
11:59 - you i'm just gonna go
12:00 - look online and grab them for us
12:05 - okey dokey so we are on the roblox
12:08 - developer website and i've gone on to
12:10 - the meta tables page now we're not going
12:12 - to worry about any of this
12:13 - because we're going through that in the
12:16 - video
12:17 - but the thing we do want to look at is
12:19 - the meta method section
12:21 - and in case this website or this page
12:24 - isn't available in the future
12:26 - here you go so meta methods are the
12:30 - functions that are stored inside
12:31 - a meta table so we've got our meta table
12:34 - here
12:34 - we're going to put our meta methods
12:36 - inside of it and then we're going to
12:39 - um link it to our main table here
12:42 - so this will be the meta table of this
12:45 - okay
12:45 - and any of these events which we put
12:47 - inside of here will
12:50 - only work with this table because we're
12:52 - going to connect them in a few minutes
12:54 - but we've got all of these different um
12:56 - methods here
12:58 - and these are all um you know given to
13:01 - us by roblox and we can't create our own
13:04 - we have to use the ones that we're given
13:06 - but to be honest all the ones that we
13:08 - are given
13:08 - um satisfy the purposes of
13:12 - meta tables and i've never had to
13:15 - um there's never been a meta method that
13:19 - i've needed and it isn't there
13:20 - because really the two main meta methods
13:24 - are index and new index and
13:27 - i hardly ever use any of these other
13:29 - ones i don't think i've ever used some
13:30 - of them
13:31 - so forget about these ones for now let's
13:33 - just look at the first two
13:35 - okay these are probably the ones that
13:36 - you will only use i guess
13:38 - um and the ones you need to know
13:40 - especially before you go on to doing
13:42 - things like
13:43 - object oriented programming in roblox um
13:46 - and we'll get on to that in another
13:47 - video hopefully
13:49 - so you can see that it's um
13:52 - it's a little bit strange the way it's
13:53 - written it's it's it's an underscore
13:56 - there's two underscores and then it's
13:58 - index that's the name of the meta method
14:00 - and then
14:01 - we've got a pair of brackets for our
14:03 - arguments to go in here
14:05 - um so i'm going to show you well i'll
14:08 - just tell you what index does
14:10 - it's basically what we just spoke about
14:12 - so if you try to index a table
14:14 - and there's no data at that index
14:18 - like i've just shown you with my table
14:20 - five there's nothing stored there
14:22 - it's um is going to fire
14:26 - this meta method so this meta method
14:28 - called index is going to be fired
14:31 - when you index a table and there is no
14:33 - data at that index
14:35 - so let's
14:38 - use this method method so we're going to
14:40 - use the method method called index
14:42 - so as it said in the um page
14:46 - you have to have two hyphens and then
14:49 - index
14:50 - and then we've got two parameters here
14:53 - called table and index so
14:56 - underscore underscore and then we write
15:01 - index and then
15:04 - we um put the brackets like this
15:08 - and it's going to be table comma
15:11 - index
15:15 - now because this is a meta method and we
15:17 - want it to fire
15:19 - when something happens we want it to
15:21 - trigger some code
15:22 - so we're actually going to make this
15:24 - function so after the hyphen hyphen
15:26 - index
15:27 - we're going to put equals function
15:30 - okay we're going to have our brackets
15:31 - for the parameters then we're going to
15:33 - drop a line
15:34 - and we're going to make sure that this
15:35 - end is added in so now
15:38 - within this function any code that we
15:40 - write
15:41 - is going to fire and it's going to run
15:44 - whenever uh you try to index the table
15:48 - and for the index that you specified if
15:51 - there is no data there if it's nil
15:53 - then the code within this function will
15:55 - run so just to prove it i can print
15:58 - um no data at this
16:01 - index and if we run the code oh it won't
16:05 - work yet
16:05 - actually because we have not connected
16:08 - our meta table
16:10 - to our table
16:13 - so what we're going to do is
16:17 - um there we go i just wanted to double
16:19 - check that we're still recording
16:20 - um we are going to connect this
16:23 - meta table to my table so that
16:27 - if we ever um you know
16:31 - index our table and there's no data or
16:33 - index
16:34 - we can run through our list of meta
16:36 - methods
16:37 - and um hopefully they will fire so we're
16:40 - going to say
16:41 - set meta table this is how we connect
16:45 - the meta table
16:46 - to the normal table and all that will do
16:49 - is
16:50 - basically tell our meta table um
16:54 - which table we're looking at you know so
16:57 - um
16:58 - these events need to know which table
17:01 - they are
17:02 - looking at so you know they're going to
17:04 - be constantly checking
17:06 - um to see if we have um
17:10 - in this case whenever we try to index a
17:15 - something in my table that isn't there
17:18 - then
17:19 - when we have connected uh or set
17:22 - my meta table to be the meta table of my
17:25 - table
17:26 - then it will be looking out for that
17:30 - that table so if we ever index it
17:32 - and there's nothing there we'll have our
17:35 - meta table
17:36 - our index events to print out no
17:39 - data at this index so we're going to set
17:42 - it and we're going to
17:43 - connect them by going um
17:47 - uh my table you first i think
17:51 - i'm pretty sure my table comes first
17:54 - and then my meta table comes second so
17:57 - let's just double check that run
18:01 - and yes so
18:05 - what's happened is we still had our
18:07 - error and that's fine because we haven't
18:09 - actually
18:10 - returned a default value yet because
18:12 - this index event
18:14 - when it prints because it's um it has
18:17 - fired
18:17 - because it's printed no data at this
18:19 - index so we've obviously
18:21 - tried to index something that isn't
18:22 - there in the table so it's printed out
18:24 - no data with this index as it should but
18:27 - now
18:28 - we want to return a default value um
18:31 - such as one
18:32 - right in case you need to do something
18:34 - later on
18:35 - with what you thought would be a number
18:37 - but in fact is now nil
18:39 - it's still nil because we haven't
18:40 - actually given it we haven't returned a
18:42 - default value yet so if we return
18:45 - uh one what's going to happen is
18:48 - my number is suddenly going to be one
18:51 - and then another number is going to be
18:52 - one times five so it'll be five and that
18:56 - way
18:56 - the script won't cause an error and it
18:58 - won't stop working so if we print out
19:00 - my number and another number
19:04 - and we click run just
19:08 - clear the output you can see
19:11 - it has worked perfectly because we have
19:14 - tried to index
19:15 - my table at the fifth index
19:18 - we've tried to get the data from the
19:20 - fifth object in that table the fifth
19:22 - piece of data
19:23 - but it's not there so what's happened is
19:25 - it's it's gone to check our
19:27 - meta tables our meta methods we've got
19:30 - the
19:30 - index meta method which will fire
19:33 - whenever you try to
19:35 - index something that isn't there so it's
19:37 - fired it's printed out there's no data
19:39 - at this index
19:40 - so we're going to use our full back
19:42 - option
19:43 - uh and if we if our if whatever we tried
19:46 - to find was nil
19:48 - and not there we need a backup option
19:50 - and so that's why
19:51 - we're returning the number one now this
19:54 - is all done by roblox like the returning
19:56 - stuff we don't have to worry about it
19:58 - we know that when we return something
20:00 - such as a number
20:01 - then it's going to go straight back to
20:03 - where we um
20:05 - try to retrieve the data out of the
20:07 - table so in this case because we try to
20:10 - set the variable mynumber to be whatever
20:13 - data is stored at the fifth index in my
20:15 - table
20:16 - it's not there obviously we're going to
20:17 - return one that's going to go back down
20:20 - here and my number is going to be equal
20:22 - to one
20:23 - so then we move on to the next line of
20:24 - code and what usually
20:26 - would have then caused an error because
20:28 - we were trying to multiply
20:30 - nil by five my number is not nil
20:33 - because it's it's one it's our default
20:35 - value
20:36 - um thanks to our meta method which is
20:38 - there looking out for us
20:40 - in case something goes wrong and so my
20:43 - number is one
20:44 - one times five another number is going
20:47 - to be
20:48 - five obviously because one times five is
20:50 - five
20:51 - um and then we print out the two numbers
20:55 - and just to double check you can see
20:57 - we've pretty printed out one
20:58 - and it's printed out the five afterwards
21:00 - it does look like 15
21:01 - but trust me there is a space in between
21:03 - them so it's printed out one
21:06 - and then five so hopefully you can see
21:10 - um why we use meta
21:14 - tables why they're useful and uh you
21:16 - might think well
21:18 - why do you need to do this you know why
21:20 - would you ever need to use this in a
21:21 - game
21:22 - right um and hopefully we can now go
21:25 - over some examples and actually see
21:28 - where this would be used in a game
21:32 - now i'm going to show you a post from
21:34 - the roblox developer forum
21:35 - from a developer who is actually using
21:37 - meta tables and the index method meta
21:40 - method in their game
21:41 - but before i do that i just need to
21:43 - clarify something
21:44 - so you don't get a little bit confused
21:46 - so
21:47 - the way i've set up my meta methods is
21:49 - i've created a variable
21:51 - for a table and i've put them in here
21:54 - however you can also
21:57 - just take a table like this and put it
22:00 - as the second argument like this
22:03 - in the set meta table so we've got the
22:06 - first argument
22:06 - is always the table which you want to
22:10 - put the meta meta table on which you
22:12 - want the meta table to be uh
22:14 - connected to so my table comes first
22:18 - and then second you just need to provide
22:20 - a table so it could be a variable
22:22 - which is linked to a table like we just
22:25 - did or you can actually just go and put
22:27 - your table within the set meta table and
22:29 - some people prefer that
22:30 - because it's just simpler quicker um
22:36 - et cetera so that's all i needed to show
22:39 - you just in case you got a bit confused
22:40 - but let me show you that now
22:44 - so on the roblox developer forum
22:46 - returned true
22:48 - says i commonly use the index meta
22:51 - method
22:51 - which don't forget is the meta method
22:54 - event
22:55 - which if you try to
22:58 - index uh something in the table that
23:00 - isn't there
23:01 - it might be nil for example then
23:04 - it's going to return something instead
23:06 - so that it doesn't error if we need to
23:08 - use it later on so it's no longer nil so
23:11 - he uses the index
23:13 - meta method for adding a default value
23:15 - to my table
23:16 - if something doesn't exist or to return
23:18 - true etc
23:20 - here's a little example so he's got a
23:22 - table in his game
23:23 - of all of the monsters um that are
23:26 - available right so all of the enemies i
23:28 - guess
23:28 - that could spawn in his game
23:32 - and each one has different levels of
23:35 - damage and health
23:36 - so troll has 10 damage and 100 health
23:39 - whereas the yeti has 20 damage and 150
23:42 - health
23:43 - so what he's doing at the bottom here
23:46 - is he is um printing
23:50 - out the damage of each
23:54 - monster here so the troll and the yeti
23:57 - and the loch ness monster so for the
24:00 - troll
24:01 - you would look in the monsters table dot
24:04 - troll
24:04 - uh dot damage and it's 10 so it prints
24:07 - out 10
24:08 - and then you know this this part down
24:11 - here this is just an example right
24:13 - um his an ideal use case
24:16 - instead he's just printing them out as
24:18 - an example here
24:20 - but a real world in-game example could
24:23 - be that
24:24 - this list here is
24:27 - like a inventory and
24:30 - you could buy different um
24:35 - you could buy different monsters right
24:37 - and you could
24:38 - type in the monster that you want to buy
24:41 - and
24:42 - if you typed in troll then it would look
24:44 - up in the table
24:46 - but if you looked up um something that
24:49 - wasn't there
24:49 - such as dragon it's not in the table so
24:53 - you might want to just return a default
24:55 - value or something
24:56 - that was just a made up example right
24:58 - but you can kind of see um
25:00 - where this would be used so what he's
25:04 - then doing on the third line
25:05 - is he is trying to get the damage of the
25:08 - loch ness monster
25:10 - but there is no loch ness monster in his
25:12 - monsters
25:13 - table so that is going to be nil
25:16 - right but he's got a backup option
25:19 - instead because if there is um no such
25:23 - thing as a loch ness monster or no such
25:25 - thing as
25:26 - if i was to try and say monsters and
25:29 - then
25:30 - hamburger or monsters
25:33 - um dragon right something that's not
25:37 - there and then i try to get its
25:38 - damage well firstly there's no such
25:42 - table within this monster table called
25:45 - loch ness monster but we've got this
25:47 - index meta method here
25:48 - and it's just the same thing that i
25:50 - showed you his second parameter
25:52 - is just a blank tape well not a blank
25:54 - table but
25:56 - it's a table that isn't linked to a to a
25:58 - variable
25:59 - but inside of that table he's got a meta
26:02 - method
26:03 - called index and it's the one we've just
26:05 - used
26:06 - and what it does is it returns a default
26:10 - table with 5 damage and 50
26:13 - health so when he tries to get the loch
26:16 - ness monster
26:17 - then obviously the script looks within
26:21 - the monsters table
26:22 - realizes that there is no such table as
26:25 - loch ness monster
26:26 - and so it just returns a default table
26:31 - and the loch ness monster would then be
26:34 - it would be equal to having 5 damage and
26:37 - 50 health
26:38 - it's basically a fallback
26:41 - option right so i'm
26:44 - i'm pretty sure it's not added to the
26:46 - table it's just
26:48 - given this table so that you can
26:51 - then get its damage or its health right
26:54 - it doesn't then get added into the
26:56 - monsters table
26:57 - it's just that if you were to reference
26:59 - this loch ness monster
27:00 - it would um it would be given this this
27:03 - default table
27:04 - just in case it doesn't exist and just
27:07 - to stop his script from breaking
27:10 - so what's happened is when he goes to
27:14 - get the damage of the loch ness monster
27:17 - or whatever that's not in the table
27:19 - it will return this table
27:23 - so what he's basically said here he has
27:25 - just accessed
27:27 - this table here and so he can get the
27:29 - damage he can get the health etc
27:33 - uh so it's being returned so since it's
27:35 - being returned
27:36 - the loch ness monster um the part that
27:39 - i've highlighted would then be equal to
27:41 - this table it
27:42 - it would be this table um probably a
27:45 - clone of it since it's being returned
27:47 - but when you then say damage dot health
27:50 - you get
27:50 - 5 and 50.
27:55 - so just to finish the video off you can
27:57 - also get a meta table
27:59 - from a table just if you wanted to print
28:01 - it out for example
28:03 - um not really sure why you need to do
28:05 - this but you could also say
28:07 - get meta table
28:11 - and you'd pass in the table which the
28:13 - meta table is assigned to
28:16 - and then if you really wanted to you
28:17 - could print it out
28:19 - but pardon me i've got a bit of a
28:22 - cold at the minute so um yeah if you
28:25 - were to print this out you just get a
28:26 - memory address
28:28 - of a table and
28:31 - um it seems to have
28:34 - the script seems to have broken here
28:38 - maybe it was because i was messing
28:39 - around with it um
28:41 - beforehand but you can see it printed
28:44 - out the memory address
28:46 - anyway of that table
28:50 - oh yes i know why it failed it was
28:52 - because
28:53 - i'd accidentally set our index method
28:56 - method to be new index
28:58 - which is a completely different meta
29:01 - method i'll just quickly explain it to
29:03 - you right now
29:05 - so new index is another meta method
29:09 - event which will fire when you
29:14 - set a you set
29:18 - some data to an index in the table that
29:20 - is currently nil
29:21 - so let me just show you here so if you
29:24 - were to say
29:24 - my table and we were going to set the
29:27 - fifth index
29:28 - which still has no data because one two
29:31 - three four five is unoccupied there is
29:34 - nothing at the fifth index
29:36 - so we could set it to hey and then
29:41 - if we just have an extra parameter for
29:43 - the value that you set it to so that
29:45 - would be hey
29:46 - um you don't need to return anything
29:49 - this time
29:50 - you can print out you just set the
29:54 - um you just set and then we'll say
29:58 - to string just to make sure it's a
30:00 - string
30:01 - index of
30:05 - the table to
30:09 - to string value and that will print
30:13 - whenever you set an index in the table
30:16 - that is currently nil
30:18 - so you if you were to set index 2 to hey
30:20 - this wouldn't fire because it's already
30:22 - set
30:22 - something but in this case index five is
30:25 - nil
30:26 - so when we set it to hey it's going to
30:28 - print out it's going to fire our new
30:30 - index
30:30 - meta method it's going to print out you
30:33 - just set
30:34 - um in well five it will say five but we
30:37 - could say
30:38 - index five of the table
30:42 - to hey so print that out and it says
30:45 - you just set index five of the table to
30:48 - hey and just to prove to you that
30:50 - it is not printing it straight away if
30:52 - we wait five seconds before we set
30:54 - the fifth index to hey to three
30:58 - four five you go you just set
31:01 - index five of the table to hey
31:04 - and you could do it you know with index
31:06 - 1 for example
31:08 - it's not going to do anything because
31:09 - index 1 is currently set to 30.
31:12 - so we go 2 3 4
31:15 - 5 nothing has happened although what it
31:18 - has happened actually because
31:20 - even though let's get rid of this weight
31:22 - even though it hasn't printed out
31:24 - if you were to then print out my table
31:27 - 1 it would print out hey and it wouldn't
31:30 - print out 30 anymore so
31:32 - look i can show you you print out my
31:35 - table
31:35 - one before let's just put a weight here
31:39 - weight one waits
31:42 - i just need to wait one there so when
31:45 - the script
31:46 - first runs um we've obviously set the
31:48 - meta table
31:49 - and the meta method is now listening
31:51 - waiting for us to set
31:53 - our indexes to a new value
31:56 - so at first it's going to print out 30.
31:58 - then we're going to set my
32:00 - table 1 to be hey it won't print out
32:02 - here
32:03 - but then if you print my table 1 again
32:06 - it's going to be hey because we've
32:08 - changed the current value to something
32:10 - else
32:10 - so new index will only fire
32:14 - when you set um an index that is
32:17 - is currently nil so it doesn't have any
32:19 - data currently associated with it
32:21 - that's why they call it a new index
32:23 - because it's a new index
32:24 - if it's not had any data set to it
32:26 - before whereas
32:28 - 30 20 10 and 5 the first four indexes
32:31 - are obviously being used right now so
32:33 - they've got data attached to them
32:34 - so when we go and change them it's not a
32:37 - new index it's just updating it
32:38 - um with a new new value so if we just
32:41 - run the scripts
32:42 - so it's 30 to begin with then you wait
32:44 - one second you set the first index of my
32:47 - table to be hey
32:48 - and then you print it out again and it
32:50 - has changed to hey
32:51 - although it hasn't printed out and again
32:54 - we just change it so we change
32:55 - my table five you print out my table
32:59 - five to begin with it's going to be nil
33:02 - and then
33:02 - after one second you set it again
33:06 - uh you set it the first time actually to
33:08 - be hey
33:09 - and then because it's the first time
33:11 - you're set you're setting it because it
33:12 - was nil beforehand
33:14 - it was it was not um it didn't have any
33:16 - data attached to it
33:17 - it's going to fire off the new index
33:19 - meta method it's going to print out
33:21 - you just set index 5 of the table to hey
33:24 - so you have that extra parameter with
33:26 - new index
33:27 - for the value so the value is the thing
33:29 - that you set
33:30 - at that index in this case it's hey and
33:32 - we're setting it to index five
33:34 - and this is just the table object uh so
33:37 - it would be
33:38 - my table so my table would go here the
33:40 - index would be five
33:42 - the value would be um hey in this case
33:45 - so they are the two main meta methods
33:48 - and we're not going to go over any other
33:49 - ones
33:50 - because these two are the most important
33:52 - and the index one is all you need to
33:54 - know
33:54 - before you go on to object-oriented
33:56 - programming which is what most people
33:58 - want to do
33:59 - and which is the main use of meta tables
34:01 - so the index
34:03 - meta method is the most important one in
34:05 - my opinion
34:06 - so the difference between new index and
34:08 - index just to end the video
34:10 - is that new index will only fire when
34:13 - you
34:13 - set um an index in the table which is
34:16 - currently nil
34:17 - so like the fifth one
34:20 - in the table and there's nothing already
34:22 - stored there then it would fire new
34:24 - index
34:25 - an index is used when you try to
34:28 - access something from the table and it's
34:30 - nil so if i was to then say
34:32 - my table 5
34:36 - and print that out obviously that is nil
34:39 - because there's nothing currently there
34:40 - so it would return a default value
34:43 - if we chose to you could just print out
34:46 - that
34:48 - it's a nil value you didn't have to
34:49 - return anything from index
34:51 - but if you wanted to make sure it prints
34:53 - out something that isn't nil
34:55 - then you could return a default value
34:57 - such as one as we did earlier in the
34:58 - video so
34:59 - they are the two main important meta
35:01 - methods and i hope you found this video
35:04 - useful if you did please
35:06 - click the like button comment down below
35:09 - if you have any
35:10 - questions or things you want me to cover
35:11 - next and i'll see you in the next video
35:14 - thank you very much for watching

Cleaned transcript:

hey everyone in this video we're going to be going over meta tables in roblox so in roblox obviously we have tables and tables can store data so let's just create a table my table like this and inside of it you could have a string or a number or whatever you could have any data in here and you can you can store multiple um pieces of data within a table so what we can also do is we can get items from that table by saying my table and then indexing it with a number so my table one or my table two because we've got two items in this table so if you if we were to say my table one that would be string if it were to say my table two then it would give us 30 the number 30. so this is really all that we can do with tables we can write to them by inserting new pieces of data either by adding it when you create the table like this or by saying table dot insert like this after you've created it so tables limited functionality inserting things and removing things as well because you can say table dot remove and remove from the table so if i was to remove the second index then it would get the second index which is 30 and it would remove it from the table so that is basic functionality of how a table works but we can actually make these tables more powerful and that might be something that you've heard quite a lot when you've looked at meta tables or meta tables make tables more powerful but how could how does that table become more powerful you know what does it mean to become more powerful and really i don't really like that explanation i just met a tables they give you more functionality they allow tables to do things that otherwise they wouldn't have been able to do and i'm going to show you uh one or two of these things that come as part of the extra functionality with meta tables and so what we do is well i'm going to show you actually we're going to create a new table and we're going to have meta methods within that table so let's create a second table and call it my meta table okay and the meta table it just needs to be a table okay there's nothing special about it it's just a table which contains meta methods so meta table is a table containing meta methods but what are method meta methods meta methods they are kind of like events so if you've been scripting for a while you'll know what events are events are triggered when certain things happen and that can allow us to run code at certain times so for example when you touch a brick then a touched event will be fired and it will run some code that's within your touched event so for example we could create a meta method and i'm just going to call it an event right now it's not um officially known as an event but just to make things a bit clearer i'll be calling a meta method and events that's probably not the best you know regarded definition but that's what i'm going to call it to try and help explain it to you so i could have a event within my meta table which will fire some code if you try to index this table you try to index something in the table that isn't there so if i was to say my table and my table four okay i want to get the fourth index in my table but we only have three indexes so an index is just an item in the table so we've got the first one here string the second one is 30 and the third one is another string although this time it's called hey but there is no fourth index so if we tried to index the table and try to get the fourth item out of that table by indexing it with the number four hit over here that would not that would be nil because there is nothing at the fourth index within our table so my table 4 would be if we were to print that for example it would print out nil okay and just to show you here i don't know why it's gone really small apologies for that if i run the game it prints out nil because there is no object uh no item at the fourth index if we did insert another piece of data then this will be our fourth index but as it stands right now we do not have a fourth index in the table we have one two and three so we can create an event which will fire whenever we try to index um try to get an in an index from the table where there's nothing there so in this case we try to get the fourth index in the table then if we had an event within our meta table that would um trigger when we tried to get my table four and we could do a number of things with that we could just print out to the output and say hey you try to access the fourth index in my table but it isn't there but what is the use of that you know what's the point um you may be wondering saying well you know if there's nothing in the table why just have a meta table to print things in in the output that's not going to do anything and that's why the meta table events allow us to have contingency plans so if we desperately need something from this my table 4 call even if it's like a if we needed some data right say we had a script and we had to get a number out of a table and we tried to index the table and there was no number we could have a default value which it returns instead and that's where meta tables are handy because you can say okay i'm gonna get this out of the table but just in case isn't there for some weird reason you know and there's there is no data for the index that i've specified then let's just give it this dummy data instead you know it's kind of it's a bit like if you are loading a player's data and you're loading their cash but they don't have any cash saved when you're looking for it in your data store you're trying to retrieve it but they don't have any cash well let's give them 50 by default and there might be a new player so they don't have any data currently saved so let's give them a default value of 50 coins when they first join the game it's quite similar to that because if we were to say my table four and just to make this a little bit more realistic let's just say we have 30 20 10 5 okay just imagine this is a table of numbers and the numbers mean something right and you need to get a number out of that table at the fourth let's do the fifth index now right because we don't have anything stored at the fifth index but if we um try to get a number or a piece of data from the table at the fifth index one two three four oh look at that we don't have any data stored at the fifth index in the table so what are we gonna do because you might need a number to be returned because you could have my number equals my table five and then immediately after that you might do my number times we could just do local another number here equals my number times five now this needs to be a number my number needs to be a number it can't be nil because if it was nil we'd get an error because you'd say um nil times five you can't do that because it's not a number so you'd get an error so if we didn't want our script to cause an error um for example it could be your gameplay script and if this breaks the if this causes an error it's going to stop the entire script and your game is going to break so this has to be a number right and even if we um looked up at the fifth index in the table and we got nil we don't want it to return nil we want it to instead return us a default number any number just give us a number because we don't want our script to fall over and crash when we when we try to multiply nil by five so we just want it to be a number even if it was one right or or a hundred we don't care we just need a number so we can harness the power of meta tables and we can create our own event which detects when you try to get a piece of data from the table and if it's nil and it's not there we can return a default value instead so we could just return the number one for example so it would look up the fifth index find out that it's nil but then because we've got our meta table which has an event inside of it telling us that if you ever look up in the table and find that um there's no data stored for the index that you're trying to find then we'll just return this number instead because we don't want any problems to arise later on in the script if we rely upon this this variable or this call which we do because it's returning a number and then later on we want to multiply that number by five so obviously right now we haven't created our meta table fully um so if we just ignore this line here it doesn't do anything anyway but if we run the script it's going to throw an error because if we look line 6 attempt to perform arithmetic which is just math multiplication you're trying to multiply uh a nil which is my number and a number so you obviously can't do that you can't multiply a number by nil it's just impossible you have to be able to multiply a number by another one so we need to set up this meta table um to to set up that event to trigger when we try to index the table and the index that we want the data that we want to get from that index isn't there so how do we do that well what i'm going to do is i'm just going to put our meta table um onto a few lines let's give ourselves a couple of lines of space here and now you're probably wondering well how do we create these events do we make them ourselves or is there a predefined list of events which we can choose from and yes there are a predefined list of events which we can use in our meta table provided by roblox and these are called meta methods okay now let's go and find a list of all these events where can we find them well i will show you i'm just gonna go look online and grab them for us okey dokey so we are on the roblox developer website and i've gone on to the meta tables page now we're not going to worry about any of this because we're going through that in the video but the thing we do want to look at is the meta method section and in case this website or this page isn't available in the future here you go so meta methods are the functions that are stored inside a meta table so we've got our meta table here we're going to put our meta methods inside of it and then we're going to um link it to our main table here so this will be the meta table of this okay and any of these events which we put inside of here will only work with this table because we're going to connect them in a few minutes but we've got all of these different um methods here and these are all um you know given to us by roblox and we can't create our own we have to use the ones that we're given but to be honest all the ones that we are given um satisfy the purposes of meta tables and i've never had to um there's never been a meta method that i've needed and it isn't there because really the two main meta methods are index and new index and i hardly ever use any of these other ones i don't think i've ever used some of them so forget about these ones for now let's just look at the first two okay these are probably the ones that you will only use i guess um and the ones you need to know especially before you go on to doing things like object oriented programming in roblox um and we'll get on to that in another video hopefully so you can see that it's um it's a little bit strange the way it's written it's it's it's an underscore there's two underscores and then it's index that's the name of the meta method and then we've got a pair of brackets for our arguments to go in here um so i'm going to show you well i'll just tell you what index does it's basically what we just spoke about so if you try to index a table and there's no data at that index like i've just shown you with my table five there's nothing stored there it's um is going to fire this meta method so this meta method called index is going to be fired when you index a table and there is no data at that index so let's use this method method so we're going to use the method method called index so as it said in the um page you have to have two hyphens and then index and then we've got two parameters here called table and index so underscore underscore and then we write index and then we um put the brackets like this and it's going to be table comma index now because this is a meta method and we want it to fire when something happens we want it to trigger some code so we're actually going to make this function so after the hyphen hyphen index we're going to put equals function okay we're going to have our brackets for the parameters then we're going to drop a line and we're going to make sure that this end is added in so now within this function any code that we write is going to fire and it's going to run whenever uh you try to index the table and for the index that you specified if there is no data there if it's nil then the code within this function will run so just to prove it i can print um no data at this index and if we run the code oh it won't work yet actually because we have not connected our meta table to our table so what we're going to do is um there we go i just wanted to double check that we're still recording um we are going to connect this meta table to my table so that if we ever um you know index our table and there's no data or index we can run through our list of meta methods and um hopefully they will fire so we're going to say set meta table this is how we connect the meta table to the normal table and all that will do is basically tell our meta table um which table we're looking at you know so um these events need to know which table they are looking at so you know they're going to be constantly checking um to see if we have um in this case whenever we try to index a something in my table that isn't there then when we have connected uh or set my meta table to be the meta table of my table then it will be looking out for that that table so if we ever index it and there's nothing there we'll have our meta table our index events to print out no data at this index so we're going to set it and we're going to connect them by going um uh my table you first i think i'm pretty sure my table comes first and then my meta table comes second so let's just double check that run and yes so what's happened is we still had our error and that's fine because we haven't actually returned a default value yet because this index event when it prints because it's um it has fired because it's printed no data at this index so we've obviously tried to index something that isn't there in the table so it's printed out no data with this index as it should but now we want to return a default value um such as one right in case you need to do something later on with what you thought would be a number but in fact is now nil it's still nil because we haven't actually given it we haven't returned a default value yet so if we return uh one what's going to happen is my number is suddenly going to be one and then another number is going to be one times five so it'll be five and that way the script won't cause an error and it won't stop working so if we print out my number and another number and we click run just clear the output you can see it has worked perfectly because we have tried to index my table at the fifth index we've tried to get the data from the fifth object in that table the fifth piece of data but it's not there so what's happened is it's it's gone to check our meta tables our meta methods we've got the index meta method which will fire whenever you try to index something that isn't there so it's fired it's printed out there's no data at this index so we're going to use our full back option uh and if we if our if whatever we tried to find was nil and not there we need a backup option and so that's why we're returning the number one now this is all done by roblox like the returning stuff we don't have to worry about it we know that when we return something such as a number then it's going to go straight back to where we um try to retrieve the data out of the table so in this case because we try to set the variable mynumber to be whatever data is stored at the fifth index in my table it's not there obviously we're going to return one that's going to go back down here and my number is going to be equal to one so then we move on to the next line of code and what usually would have then caused an error because we were trying to multiply nil by five my number is not nil because it's it's one it's our default value um thanks to our meta method which is there looking out for us in case something goes wrong and so my number is one one times five another number is going to be five obviously because one times five is five um and then we print out the two numbers and just to double check you can see we've pretty printed out one and it's printed out the five afterwards it does look like 15 but trust me there is a space in between them so it's printed out one and then five so hopefully you can see um why we use meta tables why they're useful and uh you might think well why do you need to do this you know why would you ever need to use this in a game right um and hopefully we can now go over some examples and actually see where this would be used in a game now i'm going to show you a post from the roblox developer forum from a developer who is actually using meta tables and the index method meta method in their game but before i do that i just need to clarify something so you don't get a little bit confused so the way i've set up my meta methods is i've created a variable for a table and i've put them in here however you can also just take a table like this and put it as the second argument like this in the set meta table so we've got the first argument is always the table which you want to put the meta meta table on which you want the meta table to be uh connected to so my table comes first and then second you just need to provide a table so it could be a variable which is linked to a table like we just did or you can actually just go and put your table within the set meta table and some people prefer that because it's just simpler quicker um et cetera so that's all i needed to show you just in case you got a bit confused but let me show you that now so on the roblox developer forum returned true says i commonly use the index meta method which don't forget is the meta method event which if you try to index uh something in the table that isn't there it might be nil for example then it's going to return something instead so that it doesn't error if we need to use it later on so it's no longer nil so he uses the index meta method for adding a default value to my table if something doesn't exist or to return true etc here's a little example so he's got a table in his game of all of the monsters um that are available right so all of the enemies i guess that could spawn in his game and each one has different levels of damage and health so troll has 10 damage and 100 health whereas the yeti has 20 damage and 150 health so what he's doing at the bottom here is he is um printing out the damage of each monster here so the troll and the yeti and the loch ness monster so for the troll you would look in the monsters table dot troll uh dot damage and it's 10 so it prints out 10 and then you know this this part down here this is just an example right um his an ideal use case instead he's just printing them out as an example here but a real world ingame example could be that this list here is like a inventory and you could buy different um you could buy different monsters right and you could type in the monster that you want to buy and if you typed in troll then it would look up in the table but if you looked up um something that wasn't there such as dragon it's not in the table so you might want to just return a default value or something that was just a made up example right but you can kind of see um where this would be used so what he's then doing on the third line is he is trying to get the damage of the loch ness monster but there is no loch ness monster in his monsters table so that is going to be nil right but he's got a backup option instead because if there is um no such thing as a loch ness monster or no such thing as if i was to try and say monsters and then hamburger or monsters um dragon right something that's not there and then i try to get its damage well firstly there's no such table within this monster table called loch ness monster but we've got this index meta method here and it's just the same thing that i showed you his second parameter is just a blank tape well not a blank table but it's a table that isn't linked to a to a variable but inside of that table he's got a meta method called index and it's the one we've just used and what it does is it returns a default table with 5 damage and 50 health so when he tries to get the loch ness monster then obviously the script looks within the monsters table realizes that there is no such table as loch ness monster and so it just returns a default table and the loch ness monster would then be it would be equal to having 5 damage and 50 health it's basically a fallback option right so i'm i'm pretty sure it's not added to the table it's just given this table so that you can then get its damage or its health right it doesn't then get added into the monsters table it's just that if you were to reference this loch ness monster it would um it would be given this this default table just in case it doesn't exist and just to stop his script from breaking so what's happened is when he goes to get the damage of the loch ness monster or whatever that's not in the table it will return this table so what he's basically said here he has just accessed this table here and so he can get the damage he can get the health etc uh so it's being returned so since it's being returned the loch ness monster um the part that i've highlighted would then be equal to this table it it would be this table um probably a clone of it since it's being returned but when you then say damage dot health you get 5 and 50. so just to finish the video off you can also get a meta table from a table just if you wanted to print it out for example um not really sure why you need to do this but you could also say get meta table and you'd pass in the table which the meta table is assigned to and then if you really wanted to you could print it out but pardon me i've got a bit of a cold at the minute so um yeah if you were to print this out you just get a memory address of a table and um it seems to have the script seems to have broken here maybe it was because i was messing around with it um beforehand but you can see it printed out the memory address anyway of that table oh yes i know why it failed it was because i'd accidentally set our index method method to be new index which is a completely different meta method i'll just quickly explain it to you right now so new index is another meta method event which will fire when you set a you set some data to an index in the table that is currently nil so let me just show you here so if you were to say my table and we were going to set the fifth index which still has no data because one two three four five is unoccupied there is nothing at the fifth index so we could set it to hey and then if we just have an extra parameter for the value that you set it to so that would be hey um you don't need to return anything this time you can print out you just set the um you just set and then we'll say to string just to make sure it's a string index of the table to to string value and that will print whenever you set an index in the table that is currently nil so you if you were to set index 2 to hey this wouldn't fire because it's already set something but in this case index five is nil so when we set it to hey it's going to print out it's going to fire our new index meta method it's going to print out you just set um in well five it will say five but we could say index five of the table to hey so print that out and it says you just set index five of the table to hey and just to prove to you that it is not printing it straight away if we wait five seconds before we set the fifth index to hey to three four five you go you just set index five of the table to hey and you could do it you know with index 1 for example it's not going to do anything because index 1 is currently set to 30. so we go 2 3 4 5 nothing has happened although what it has happened actually because even though let's get rid of this weight even though it hasn't printed out if you were to then print out my table 1 it would print out hey and it wouldn't print out 30 anymore so look i can show you you print out my table one before let's just put a weight here weight one waits i just need to wait one there so when the script first runs um we've obviously set the meta table and the meta method is now listening waiting for us to set our indexes to a new value so at first it's going to print out 30. then we're going to set my table 1 to be hey it won't print out here but then if you print my table 1 again it's going to be hey because we've changed the current value to something else so new index will only fire when you set um an index that is is currently nil so it doesn't have any data currently associated with it that's why they call it a new index because it's a new index if it's not had any data set to it before whereas 30 20 10 and 5 the first four indexes are obviously being used right now so they've got data attached to them so when we go and change them it's not a new index it's just updating it um with a new new value so if we just run the scripts so it's 30 to begin with then you wait one second you set the first index of my table to be hey and then you print it out again and it has changed to hey although it hasn't printed out and again we just change it so we change my table five you print out my table five to begin with it's going to be nil and then after one second you set it again uh you set it the first time actually to be hey and then because it's the first time you're set you're setting it because it was nil beforehand it was it was not um it didn't have any data attached to it it's going to fire off the new index meta method it's going to print out you just set index 5 of the table to hey so you have that extra parameter with new index for the value so the value is the thing that you set at that index in this case it's hey and we're setting it to index five and this is just the table object uh so it would be my table so my table would go here the index would be five the value would be um hey in this case so they are the two main meta methods and we're not going to go over any other ones because these two are the most important and the index one is all you need to know before you go on to objectoriented programming which is what most people want to do and which is the main use of meta tables so the index meta method is the most important one in my opinion so the difference between new index and index just to end the video is that new index will only fire when you set um an index in the table which is currently nil so like the fifth one in the table and there's nothing already stored there then it would fire new index an index is used when you try to access something from the table and it's nil so if i was to then say my table 5 and print that out obviously that is nil because there's nothing currently there so it would return a default value if we chose to you could just print out that it's a nil value you didn't have to return anything from index but if you wanted to make sure it prints out something that isn't nil then you could return a default value such as one as we did earlier in the video so they are the two main important meta methods and i hope you found this video useful if you did please click the like button comment down below if you have any questions or things you want me to cover next and i'll see you in the next video thank you very much for watching
