With timestamps:

00:00 - in this video we're going to be looking
00:01 - at messaging service and it allows you
00:03 - to communicate across different servers
00:05 - in your game so if you think of a big
00:07 - game like jailbreak has loads of players
00:09 - across loads of different servers how
00:12 - can you relay messages between them or
00:14 - maybe give announcements you could do a
00:16 - server wide announcement feature how do
00:19 - you update these servers by sending
00:22 - messages or you know data to them so
00:25 - messaging service it allows you to
00:28 - publish it has publish async and
00:32 - subscribe async publish a sync is used
00:34 - to send messages to the servers and
00:38 - subscribe async is used to pick them up
00:41 - so in order to receive a message you
00:45 - have to be subscribed think of it like a
00:47 - YouTube subscription box where if you're
00:49 - not subscribed to the channel you won't
00:51 - receive updates or new videos if you're
00:53 - not subscribed to the topic and I'll
00:56 - describe what the topic is in a minute
00:58 - if you're not subscribed then you're not
01:00 - going to get the the messages or the
01:01 - information from the other server so the
01:04 - way this works is you can say publish
01:07 - async and you can send a message are
01:10 - messages hello there we've also got noob
01:12 - now noob is the topic with messaging
01:16 - service you can send a message with a
01:20 - topic and the topic is what identifies
01:22 - this message and who it's being sent to
01:25 - so you can subscribe to certain messages
01:29 - with by by giving your topic so if I
01:32 - only wanted to subscribe to the messages
01:36 - from the topic called noob then I've
01:39 - subscribed with just noob here so if I
01:42 - was to then send the message with the
01:44 - topic
01:46 - ooof right then none of these servers
01:50 - are going to get the message because
01:54 - they haven't subscribed to that topic
01:56 - you can subscribe to multiple topics so
01:58 - you could have you could be subscribed
02:00 - to topic and booth and that would mean
02:03 - that you would receive the messages for
02:06 - oath and noob but if you send a message
02:09 - with a
02:11 - topic that you haven't subscribed to
02:13 - then you're not going to receive that
02:15 - message so how do we do this well it's
02:20 - quite simple actually firstly we need to
02:23 - set up the subscription we need to
02:24 - subscribe to a topic so that we can
02:26 - receive updates and messages from
02:29 - whichever server is sending the message
02:31 - to that topic so what happens is a
02:34 - server will publish a message to a topic
02:38 - and then if you're subscribed to the
02:39 - topic in your script then you'll be able
02:42 - to get the update from that topic so to
02:44 - subscribe you say messaging service and
02:47 - we've also got the messaging service set
02:50 - up here as a variable so we say
02:51 - messaging service or game get service
02:53 - messaging service whatever you choose
02:55 - but once we've got the service we can
02:57 - say kernel subscribe async and we now
03:00 - need to give the topic that we want to
03:02 - subscribe to
03:03 - so what messages are we going to receive
03:06 - we only want to receive messages that
03:08 - are in the Nuba category okay so we
03:11 - firstly need to say our topic and as
03:13 - I've said that's the thing that uniquely
03:14 - identifies the messages that are going
03:17 - to be sent we could send some messages
03:20 - to a noob topic or a news topic you can
03:22 - call the topics whatever you like so we
03:25 - could have a topic called global
03:28 - announcement right so you could you
03:29 - could have you could use the messaging
03:30 - service for a global announcement and
03:33 - when a message is sent if it's a global
03:37 - announcement if it's got the topic
03:38 - global announcements we will globally
03:40 - announce it in like a GUI or something
03:43 - okay so and we subscribe to it and now
03:47 - we need to tell the script what we want
03:48 - to do when a message comes through with
03:51 - this topic assigned to it so we will do
03:54 - a comma and then we are going to have a
03:57 - function which is going to run when this
04:00 - message comes in so function and then
04:02 - pair of brackets drop a line and then
04:05 - we're going to do and for the closing
04:07 - bracket now what this is done is we've
04:10 - created a function that's gonna run when
04:12 - the message comes in but we don't have
04:14 - the data of the message so all of you
04:16 - wanted to print out the message we need
04:18 - to get the the message data from
04:20 - somewhere so it's passed to this
04:21 - function automatically by subscribe
04:24 - async
04:25 - so if we just write an argument of
04:26 - message then the message is gonna be is
04:29 - gonna be passed up to the argument and
04:31 - whenever we say message that's what our
04:33 - message is going to be equal to but
04:35 - actually what happens is subscribe async
04:38 - it sends the message in a table formats
04:41 - so the we will have two bits of data
04:44 - being sent it will have the message but
04:46 - we'll also have the time which it was
04:49 - sent and that's since third the epoch so
04:52 - the number of seconds since January the
04:55 - 1st 1970 we can use that number of
04:58 - seconds to manipulate it into the time
05:02 - arrived but right now we're gonna be
05:03 - just focusing on the message that has
05:05 - been sent so actually it's not called
05:07 - message it's called data so I think it's
05:10 - called data and sense so if you wanted
05:12 - to print out the message we would have
05:13 - to say message data okay and I'll
05:17 - actually just check that as well let's
05:20 - have a look and subscribe async
05:23 - we have message let's have a look cross
05:28 - server messaging yep so we've got
05:31 - message dot data which is passed and
05:34 - also message sent so which is the unix
05:37 - time in seconds at which the message was
05:39 - sent so if you wanted to print out the
05:41 - message we'd have to say message data we
05:44 - wanted to print out the the time to
05:47 - assembly could say message sent so that
05:49 - is how you subscribe to a topic whenever
05:51 - a message comes in with this topic
05:53 - assigned to it we will print out the
05:55 - message but now we actually want to send
05:58 - the message right so we're gonna learn
06:00 - how to do that so it's quite simple as
06:02 - well all we need to do is say messaging
06:07 - service curl on publish async we now
06:10 - need to say the topic that we're gonna
06:13 - that with this message will be sent to
06:15 - so global announcement and also the
06:19 - message so we can just say hello there
06:21 - guys if we just add a little wait delay
06:25 - in here so we can actually see it see it
06:28 - happen what's gonna happen is the
06:30 - SUBSCRIBE a sync connection which is
06:33 - waiting for the message to be sent is
06:35 - created five seconds later we
06:38 - the message and it gets picked up and it
06:40 - prints out hello there guys and then the
06:42 - number of seconds since Jeremy the first
06:44 - in 1970 and we're not gonna be going
06:47 - into that today but you can manipulate
06:48 - that in a way to find out when the
06:51 - message will sent but I'm going to go
06:53 - over this again so if you're not
06:55 - familiar with events or connections I'm
06:57 - just going to go over that now so what
06:59 - we've done is before we send any data as
07:02 - soon as the script has started we have
07:04 - created an event listener an event
07:06 - listener is something that waits for
07:08 - something to happen and it's constantly
07:09 - checking so in this case we're
07:11 - constantly checking to see if a message
07:16 - has been sent
07:16 - using subscribe async now what this does
07:19 - is it's going to wait until the message
07:21 - comes in and when a message does come in
07:24 - with this topic then we are firing this
07:27 - function and this function prints out
07:30 - the message data and the time that it
07:32 - was sent and then five seconds later we
07:36 - are publishing a message to this topic
07:40 - and so because the topic has a new
07:44 - message it's triggered our SUBSCRIBE
07:46 - async event which is listening out
07:48 - waiting for a message to come in now
07:50 - that the message has come in is printed
07:52 - out that message this is data so in this
07:55 - case hello there guys because that was
07:56 - the data we passed to that message and
07:59 - also the time in which it was sent so
08:01 - you might be thinking this is a bit
08:03 - pointless because it's all in the same
08:04 - script and we can just you know we could
08:06 - just print out our own message but this
08:09 - is where it starts get interesting what
08:10 - if we what if we added other scripts we
08:17 - had another scripts and in one scripts
08:20 - we would publish the announcement and in
08:23 - another script we would pick it up right
08:25 - so this could be our subscribed script
08:28 - and this could be our publish scripts
08:30 - now for the purpose of this tutorial
08:32 - I can't open up multiple servers to show
08:34 - you this but let's imagine that our
08:37 - publish script is running in in one
08:39 - server so server one
08:42 - and our subscribed script is running in
08:44 - in another server and we wanted to send
08:47 - the message from server 1 to server 2
08:50 - now look we don't have the publish in
08:52 - our publish async stuff in our in our
08:55 - subscribe script so if we run this now
08:58 - what should happen is after 5 seconds it
09:01 - just still prints out hello there guys
09:03 - even though it's in the different script
09:05 - and there we go
09:06 - this is because we have published it
09:08 - from a different script and we are
09:10 - picking it up in another script as well
09:13 - so you can think of this as like if we
09:16 - have 10 servers opened and they were all
09:19 - subscribed because the we've subscribe
09:21 - to in our scripts in our server scripts
09:23 - that will run as soon as the the game is
09:26 - created whenever we publish something to
09:29 - this announcement it will print out the
09:31 - data and just to show you as well if I
09:33 - was to just disable this script and just
09:36 - get rid of it for the publishing stuff
09:38 - and I only have the SUBSCRIBE a sink
09:40 - let's go into the game and what we can
09:43 - do is we can use the command bar now
09:46 - let's imagine were in another server
09:47 - again down here in the command bar we
09:49 - could say local messaging service equals
09:54 - game phone and get service messaging
09:57 - service and we can say messaging service
10:00 - publish async and we're gonna give the
10:03 - topic go open our announcement because
10:06 - that's the topic that we have subscribed
10:07 - to in our scripts and then we can
10:10 - publish a message so if I was to publish
10:13 - this we have a error it can only be
10:17 - exceeded by the game so okay that's fine
10:19 - we just go into server mode here and try
10:22 - this again okay cool so we've just
10:25 - published a message from the command
10:27 - line and it's been picked up by our
10:29 - script that has been subscribed to this
10:31 - topic so if I was to do this again with
10:34 - a different topic and the topic was
10:36 - called hey there
10:40 - okay nothing happens well actually show
10:44 - you again you see nothing happens the
10:46 - hey there XD is not printed out and
10:49 - that's because we have sent the message
10:50 - to a new topic we haven't sent it to the
10:53 - global announcements topic and we sent
10:56 - it to the the hey there topic and it's
10:57 - not been printed out because we haven't
10:59 - subscribed to the hey there topic if we
11:02 - were to subscribe to this topic in the
11:05 - command line we could say messaging
11:06 - service : subscribe async and to the
11:12 - topic hey there and we can just do a
11:15 - function quickly that will print out the
11:17 - message okay and now that we've
11:26 - subscribed to it what we can do is we
11:30 - can just publish to the hey there topic
11:33 - again and it's going to print out the
11:35 - message if I change the message doesn't
11:39 - matter it will still get printed out so
11:41 - you can see you can subscribe to a topic
11:43 - a certain topic and you can send
11:46 - messages to that topic now obviously
11:48 - you're not going to want to you might
11:50 - have certain different topics in your
11:51 - game you might have say for example a
11:53 - global announcement and you might also
11:55 - have something like a ranked
11:57 - announcement so you might only want to
12:00 - send messages to people with a certain
12:01 - rank so you wouldn't want that to be a
12:03 - global message so you might want to
12:05 - topics so you can have as many topics as
12:08 - you like and then you can publish
12:09 - messages to those topics so you can send
12:12 - certain messages to certain servers so
12:16 - most likely you'll have every server
12:20 - subscribed to a topic but that's how
12:23 - messaging service works you can
12:25 - subscribe to a topic and then you can
12:27 - send messages to that topic and you can
12:29 - do whatever you like with those messages
12:30 - this is very basic still you could for
12:33 - example make a GUI which shows the
12:35 - messages you know you could have a topic
12:39 - which could be alert and when you send a
12:42 - message to that alert topic then your
12:44 - game could set off some alarms or
12:46 - something if you have like a I don't
12:48 - know a roleplay game or
12:50 - no something like that so lots of use
12:52 - cases for messaging service this was
12:54 - just a very very basic tutorial on it
12:57 - and I'm also going to say when you are
13:00 - dealing with messaging service it is
13:02 - recommended to wrap your subscribe async
13:05 - and publish async lines in a Pico just
13:09 - in case something goes wrong and or an
13:12 - error occurs it's not going to affect
13:13 - your entire script
13:14 - so the error gets contained so we fry an
13:17 - event here we create an event connection
13:20 - so we could say local success connection
13:25 - equals P call function and then drop a
13:30 - line and we'll move this and with the
13:32 - closing bracket over here so that our
13:34 - messaging service event is surrounded by
13:38 - this P call we'll also just before the
13:41 - connection variable I'll explain what
13:43 - that does in a minute we'll add an error
13:45 - message so in case we get an error
13:47 - message and we'll be able to print it
13:49 - out and see what what goes wrong so the
13:51 - success basically says whether whether
13:54 - everything went well and no errors
13:56 - occurred so if it's true everything went
13:59 - well if it's false then there was an
14:00 - error and so we can print out the error
14:02 - message which is also set as this error
14:06 - in this error message variable that's
14:08 - where the error message would be and
14:10 - then the connection is is the connection
14:12 - to this this event the SUBSCRIBE this P
14:15 - call messaging service subscribete sync
14:17 - event so when we need when we don't need
14:19 - to be subscribed to this anymore if we
14:23 - if we wanted to stop being subscribed we
14:25 - could disconnect the connection so we
14:27 - should say connection : disconnect now
14:31 - what that would do is it would basically
14:33 - if we if if a message came in it
14:36 - wouldn't get printed out anymore because
14:37 - the with with we've ditched the
14:39 - connection we've stopped it's being
14:41 - subscribed to this to this event so if
14:43 - you ever wanted to stop being subscribed
14:44 - at one point you could say connection :
14:46 - disconnect so we've done that we've
14:49 - wrapped our subscribe based thinking a
14:51 - peek all what we now need to do if you
14:53 - are publishing you do the same thing so
14:56 - say cool success
14:59 - I will message but this time don't need
15:03 - the connection because we are publishing
15:05 - so we are not listening we are
15:08 - publishing equals P call function and
15:11 - then in here we can just say messaging
15:13 - service cut on publish a sync with our
15:17 - token and our message so let's add a
15:24 - wait in there again and everything
15:27 - should work now one final thing is that
15:31 - you will probably get an error when you
15:34 - try this out you will probably get an
15:36 - error called messaging rooter service
15:39 - disconnected in fact I can guarantee
15:42 - you'll get an error unless you publish
15:45 - your game you have to publish your game
15:47 - as a place okay you have to go to
15:50 - publish to roblox here
15:52 - or probably Sherlock's asked you have to
15:54 - make sure you published it as a place so
15:56 - go here and then publish your game and
15:59 - then it will work for you because
16:01 - messaging service only works in running
16:04 - in published games so there we go that
16:07 - was a quick tutorial on messaging
16:10 - service I hope you found it useful
16:12 - if you did please like the video share
16:14 - it with anybody knows that think would
16:17 - benefit from learning about this very
16:19 - very cool and very powerful as well
16:22 - messaging service I might make some more
16:24 - videos on it in the future as well about
16:26 - how to make more practical things with
16:28 - it such as a global announcement system
16:30 - that actually works with a GUI but for
16:33 - now that's the end of this video thank
16:35 - you for watching and I'll see you in the
16:36 - next one

Cleaned transcript:

in this video we're going to be looking at messaging service and it allows you to communicate across different servers in your game so if you think of a big game like jailbreak has loads of players across loads of different servers how can you relay messages between them or maybe give announcements you could do a server wide announcement feature how do you update these servers by sending messages or you know data to them so messaging service it allows you to publish it has publish async and subscribe async publish a sync is used to send messages to the servers and subscribe async is used to pick them up so in order to receive a message you have to be subscribed think of it like a YouTube subscription box where if you're not subscribed to the channel you won't receive updates or new videos if you're not subscribed to the topic and I'll describe what the topic is in a minute if you're not subscribed then you're not going to get the the messages or the information from the other server so the way this works is you can say publish async and you can send a message are messages hello there we've also got noob now noob is the topic with messaging service you can send a message with a topic and the topic is what identifies this message and who it's being sent to so you can subscribe to certain messages with by by giving your topic so if I only wanted to subscribe to the messages from the topic called noob then I've subscribed with just noob here so if I was to then send the message with the topic ooof right then none of these servers are going to get the message because they haven't subscribed to that topic you can subscribe to multiple topics so you could have you could be subscribed to topic and booth and that would mean that you would receive the messages for oath and noob but if you send a message with a topic that you haven't subscribed to then you're not going to receive that message so how do we do this well it's quite simple actually firstly we need to set up the subscription we need to subscribe to a topic so that we can receive updates and messages from whichever server is sending the message to that topic so what happens is a server will publish a message to a topic and then if you're subscribed to the topic in your script then you'll be able to get the update from that topic so to subscribe you say messaging service and we've also got the messaging service set up here as a variable so we say messaging service or game get service messaging service whatever you choose but once we've got the service we can say kernel subscribe async and we now need to give the topic that we want to subscribe to so what messages are we going to receive we only want to receive messages that are in the Nuba category okay so we firstly need to say our topic and as I've said that's the thing that uniquely identifies the messages that are going to be sent we could send some messages to a noob topic or a news topic you can call the topics whatever you like so we could have a topic called global announcement right so you could you could have you could use the messaging service for a global announcement and when a message is sent if it's a global announcement if it's got the topic global announcements we will globally announce it in like a GUI or something okay so and we subscribe to it and now we need to tell the script what we want to do when a message comes through with this topic assigned to it so we will do a comma and then we are going to have a function which is going to run when this message comes in so function and then pair of brackets drop a line and then we're going to do and for the closing bracket now what this is done is we've created a function that's gonna run when the message comes in but we don't have the data of the message so all of you wanted to print out the message we need to get the the message data from somewhere so it's passed to this function automatically by subscribe async so if we just write an argument of message then the message is gonna be is gonna be passed up to the argument and whenever we say message that's what our message is going to be equal to but actually what happens is subscribe async it sends the message in a table formats so the we will have two bits of data being sent it will have the message but we'll also have the time which it was sent and that's since third the epoch so the number of seconds since January the 1st 1970 we can use that number of seconds to manipulate it into the time arrived but right now we're gonna be just focusing on the message that has been sent so actually it's not called message it's called data so I think it's called data and sense so if you wanted to print out the message we would have to say message data okay and I'll actually just check that as well let's have a look and subscribe async we have message let's have a look cross server messaging yep so we've got message dot data which is passed and also message sent so which is the unix time in seconds at which the message was sent so if you wanted to print out the message we'd have to say message data we wanted to print out the the time to assembly could say message sent so that is how you subscribe to a topic whenever a message comes in with this topic assigned to it we will print out the message but now we actually want to send the message right so we're gonna learn how to do that so it's quite simple as well all we need to do is say messaging service curl on publish async we now need to say the topic that we're gonna that with this message will be sent to so global announcement and also the message so we can just say hello there guys if we just add a little wait delay in here so we can actually see it see it happen what's gonna happen is the SUBSCRIBE a sync connection which is waiting for the message to be sent is created five seconds later we the message and it gets picked up and it prints out hello there guys and then the number of seconds since Jeremy the first in 1970 and we're not gonna be going into that today but you can manipulate that in a way to find out when the message will sent but I'm going to go over this again so if you're not familiar with events or connections I'm just going to go over that now so what we've done is before we send any data as soon as the script has started we have created an event listener an event listener is something that waits for something to happen and it's constantly checking so in this case we're constantly checking to see if a message has been sent using subscribe async now what this does is it's going to wait until the message comes in and when a message does come in with this topic then we are firing this function and this function prints out the message data and the time that it was sent and then five seconds later we are publishing a message to this topic and so because the topic has a new message it's triggered our SUBSCRIBE async event which is listening out waiting for a message to come in now that the message has come in is printed out that message this is data so in this case hello there guys because that was the data we passed to that message and also the time in which it was sent so you might be thinking this is a bit pointless because it's all in the same script and we can just you know we could just print out our own message but this is where it starts get interesting what if we what if we added other scripts we had another scripts and in one scripts we would publish the announcement and in another script we would pick it up right so this could be our subscribed script and this could be our publish scripts now for the purpose of this tutorial I can't open up multiple servers to show you this but let's imagine that our publish script is running in in one server so server one and our subscribed script is running in in another server and we wanted to send the message from server 1 to server 2 now look we don't have the publish in our publish async stuff in our in our subscribe script so if we run this now what should happen is after 5 seconds it just still prints out hello there guys even though it's in the different script and there we go this is because we have published it from a different script and we are picking it up in another script as well so you can think of this as like if we have 10 servers opened and they were all subscribed because the we've subscribe to in our scripts in our server scripts that will run as soon as the the game is created whenever we publish something to this announcement it will print out the data and just to show you as well if I was to just disable this script and just get rid of it for the publishing stuff and I only have the SUBSCRIBE a sink let's go into the game and what we can do is we can use the command bar now let's imagine were in another server again down here in the command bar we could say local messaging service equals game phone and get service messaging service and we can say messaging service publish async and we're gonna give the topic go open our announcement because that's the topic that we have subscribed to in our scripts and then we can publish a message so if I was to publish this we have a error it can only be exceeded by the game so okay that's fine we just go into server mode here and try this again okay cool so we've just published a message from the command line and it's been picked up by our script that has been subscribed to this topic so if I was to do this again with a different topic and the topic was called hey there okay nothing happens well actually show you again you see nothing happens the hey there XD is not printed out and that's because we have sent the message to a new topic we haven't sent it to the global announcements topic and we sent it to the the hey there topic and it's not been printed out because we haven't subscribed to the hey there topic if we were to subscribe to this topic in the command line we could say messaging service subscribe async and to the topic hey there and we can just do a function quickly that will print out the message okay and now that we've subscribed to it what we can do is we can just publish to the hey there topic again and it's going to print out the message if I change the message doesn't matter it will still get printed out so you can see you can subscribe to a topic a certain topic and you can send messages to that topic now obviously you're not going to want to you might have certain different topics in your game you might have say for example a global announcement and you might also have something like a ranked announcement so you might only want to send messages to people with a certain rank so you wouldn't want that to be a global message so you might want to topics so you can have as many topics as you like and then you can publish messages to those topics so you can send certain messages to certain servers so most likely you'll have every server subscribed to a topic but that's how messaging service works you can subscribe to a topic and then you can send messages to that topic and you can do whatever you like with those messages this is very basic still you could for example make a GUI which shows the messages you know you could have a topic which could be alert and when you send a message to that alert topic then your game could set off some alarms or something if you have like a I don't know a roleplay game or no something like that so lots of use cases for messaging service this was just a very very basic tutorial on it and I'm also going to say when you are dealing with messaging service it is recommended to wrap your subscribe async and publish async lines in a Pico just in case something goes wrong and or an error occurs it's not going to affect your entire script so the error gets contained so we fry an event here we create an event connection so we could say local success connection equals P call function and then drop a line and we'll move this and with the closing bracket over here so that our messaging service event is surrounded by this P call we'll also just before the connection variable I'll explain what that does in a minute we'll add an error message so in case we get an error message and we'll be able to print it out and see what what goes wrong so the success basically says whether whether everything went well and no errors occurred so if it's true everything went well if it's false then there was an error and so we can print out the error message which is also set as this error in this error message variable that's where the error message would be and then the connection is is the connection to this this event the SUBSCRIBE this P call messaging service subscribete sync event so when we need when we don't need to be subscribed to this anymore if we if we wanted to stop being subscribed we could disconnect the connection so we should say connection disconnect now what that would do is it would basically if we if if a message came in it wouldn't get printed out anymore because the with with we've ditched the connection we've stopped it's being subscribed to this to this event so if you ever wanted to stop being subscribed at one point you could say connection disconnect so we've done that we've wrapped our subscribe based thinking a peek all what we now need to do if you are publishing you do the same thing so say cool success I will message but this time don't need the connection because we are publishing so we are not listening we are publishing equals P call function and then in here we can just say messaging service cut on publish a sync with our token and our message so let's add a wait in there again and everything should work now one final thing is that you will probably get an error when you try this out you will probably get an error called messaging rooter service disconnected in fact I can guarantee you'll get an error unless you publish your game you have to publish your game as a place okay you have to go to publish to roblox here or probably Sherlock's asked you have to make sure you published it as a place so go here and then publish your game and then it will work for you because messaging service only works in running in published games so there we go that was a quick tutorial on messaging service I hope you found it useful if you did please like the video share it with anybody knows that think would benefit from learning about this very very cool and very powerful as well messaging service I might make some more videos on it in the future as well about how to make more practical things with it such as a global announcement system that actually works with a GUI but for now that's the end of this video thank you for watching and I'll see you in the next one
