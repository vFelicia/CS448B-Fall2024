With timestamps:

00:01 - so in Roblox you can get user input by
00:04 - using the user input service and when I
00:06 - say user input I'm talking about when
00:08 - the user presses keys on the keyboard
00:11 - when they click the mouse when they
00:12 - Press buttons on a controller when they
00:14 - tap the screen on mobile all of this is
00:17 - input from the user hence user input
00:21 - service now because this user input is
00:24 - coming from the user therefore it's
00:26 - coming from the client it can only be
00:28 - used in local script on which which is
00:32 - client running code so I'm going to go
00:34 - into start GUI going to insert a local
00:36 - script and to get the user input service
00:39 - we'll create a variable for it user
00:42 - input service equals game get service
00:46 - user input
00:47 - service and to detect input there's an
00:50 - event called input began so user input
00:53 - service do input began you write connect
00:57 - we'll give it a function which will run
01:00 - when some input happens and then we have
01:04 - two arguments we have the input and we
01:07 - have game processed
01:10 - event okay also known as
01:12 - gpe and input here lets us get some
01:16 - information about the type of input so
01:19 - we can see if the player has uh pressed
01:23 - a key by saying if input. key code
01:27 - equals equals and then we'll say enum do
01:31 - keycode and then after the dot you can
01:34 - select from a list of all these
01:36 - different key codes so if you wanted to
01:39 - detect when the player presses e then
01:42 - you would just write e and then do then
01:44 - and you could print out user has pressed
01:47 - e right and if we go and test
01:50 - it okay I'm pressing e on my keyboard
01:53 - and it keeps on printing user has
01:55 - pressed e now if you wanted to detect
01:58 - when they click the mouse
02:00 - then you could instead say if input.
02:04 - user input type equals equals enum
02:08 - userinput type Mouse button one then
02:11 - print user has clicks and you can do the
02:15 - same thing of course for Mouse button
02:16 - two which is the right Mouse button uh
02:19 - if there's a if there's a middle Mouse
02:21 - button You' do mouse button three and
02:25 - again when I click my mouse you can see
02:27 - it's saying user clicked when I press we
02:30 - get the same thing but for the uh the
02:32 - other statement so how can we detect
02:35 - when a player uh touches on a mobile
02:39 - device well it's the same thing really
02:41 - just another if statement and rather
02:43 - than saying Mouse button one we say
02:45 - touch and that will print out that the
02:48 - user has touched the screen I'm not
02:50 - going to keep on testing these things
02:52 - because you get the idea by
02:54 - now of course there are other key codes
02:56 - such as the space bar backspace enter or
03:01 - return sorry should I say uh so have a
03:03 - look at the list and give it a try for
03:05 - yourself that's not it though there's
03:07 - also an event called input ended and
03:11 - that will fire when the key press or the
03:14 - mouse click or the touch finishes so
03:16 - when it stops so you'd say the same
03:18 - thing really but this time it would be
03:20 - input ended connect function and again
03:24 - it passes the input so it's an input
03:26 - object which just gives us that
03:27 - information about whatever the input is
03:30 - and we have this game processed event
03:32 - variable as well so you could just copy
03:34 - and paste all of this code and change
03:37 - we'll change the prints to say you know
03:40 - released click has stopped touching and
03:44 - this should all work the same way now
03:47 - the last thing to talk about is this
03:49 - game processed event what does it mean
03:51 - well let's just go back into the game
03:53 - and I'll show you here there are some
03:55 - inputs which we don't want to register
03:57 - for example if we're detecting when you
03:59 - press a key
04:00 - maybe we want to show a GUI when you
04:02 - press e we don't necessarily want to do
04:05 - that and by the way you can see it's
04:07 - saying I've released click when I
04:08 - stopped clicking but anyway we don't
04:11 - necessarily want the player to register
04:13 - that eess at certain times for example
04:15 - if we're typing a message and we keep
04:17 - pressing e we don't want things like a
04:20 - GUI appearing to happen because it will
04:22 - disrupt our view and it will get in the
04:24 - way we're trying to type a chat message
04:26 - so sometimes when the user is
04:28 - interacting with a Roblox GUI so a core
04:31 - GUI such as the uh chat menu here or
04:35 - perhaps uh there's there's a few other
04:37 - occasions where you wouldn't necessarily
04:39 - want the key press or the action to go
04:40 - through that would be called a a game
04:43 - processed event because the key press is
04:46 - going through a roblo GUI first before
04:50 - it's going through our input here so we
04:53 - could just check to see if game
04:54 - processed events and if it's true then
04:57 - we want to return we want to K this
05:00 - function we don't want to go any further
05:01 - because we're interacting with a Roblox
05:04 - UI or another part of the game so if we
05:07 - now test this one more time if we press
05:10 - e or click around on the screen it's
05:13 - printing which is great if I just clear
05:15 - this and I start typing and pressing e
05:18 - in the chat window you can see it's not
05:19 - registering anymore because this is a
05:21 - game processed event so hopefully I've
05:24 - explained that uh in a way that's
05:26 - understandable for you this is really
05:28 - all you need to know about the user
05:29 - input service however I'll just show you
05:32 - one last thing if you have some other
05:35 - code and you want to quickly check to
05:36 - see if a uh a button is being pressed
05:40 - down you can say uh well you say user
05:43 - input service colon is key down like
05:47 - this and then you you'd pass through the
05:49 - key code uh enum like this so if you
05:51 - wanted to check at a certain point in
05:53 - time whether the a key was being pressed
05:56 - down you would say this it would then
05:58 - return a true or false value which you
06:00 - could store as a
06:02 - variable like this and then you could
06:05 - print out is a key down now this is
06:08 - going to be false because we won't be
06:10 - pressing the key once we first join the
06:12 - game but you might want to use this at
06:14 - other points in in your game so I just
06:16 - wanted to make you aware of that so that
06:19 - was the user input service and how to
06:20 - handle user input it's really really
06:23 - cool let me know if you have any more
06:24 - ideas for tutorials don't forget to
06:26 - subscribe if you found it handy and I'll
06:28 - see you in the next one thanks for
06:29 - watching

Cleaned transcript:

so in Roblox you can get user input by using the user input service and when I say user input I'm talking about when the user presses keys on the keyboard when they click the mouse when they Press buttons on a controller when they tap the screen on mobile all of this is input from the user hence user input service now because this user input is coming from the user therefore it's coming from the client it can only be used in local script on which which is client running code so I'm going to go into start GUI going to insert a local script and to get the user input service we'll create a variable for it user input service equals game get service user input service and to detect input there's an event called input began so user input service do input began you write connect we'll give it a function which will run when some input happens and then we have two arguments we have the input and we have game processed event okay also known as gpe and input here lets us get some information about the type of input so we can see if the player has uh pressed a key by saying if input. key code equals equals and then we'll say enum do keycode and then after the dot you can select from a list of all these different key codes so if you wanted to detect when the player presses e then you would just write e and then do then and you could print out user has pressed e right and if we go and test it okay I'm pressing e on my keyboard and it keeps on printing user has pressed e now if you wanted to detect when they click the mouse then you could instead say if input. user input type equals equals enum userinput type Mouse button one then print user has clicks and you can do the same thing of course for Mouse button two which is the right Mouse button uh if there's a if there's a middle Mouse button You' do mouse button three and again when I click my mouse you can see it's saying user clicked when I press we get the same thing but for the uh the other statement so how can we detect when a player uh touches on a mobile device well it's the same thing really just another if statement and rather than saying Mouse button one we say touch and that will print out that the user has touched the screen I'm not going to keep on testing these things because you get the idea by now of course there are other key codes such as the space bar backspace enter or return sorry should I say uh so have a look at the list and give it a try for yourself that's not it though there's also an event called input ended and that will fire when the key press or the mouse click or the touch finishes so when it stops so you'd say the same thing really but this time it would be input ended connect function and again it passes the input so it's an input object which just gives us that information about whatever the input is and we have this game processed event variable as well so you could just copy and paste all of this code and change we'll change the prints to say you know released click has stopped touching and this should all work the same way now the last thing to talk about is this game processed event what does it mean well let's just go back into the game and I'll show you here there are some inputs which we don't want to register for example if we're detecting when you press a key maybe we want to show a GUI when you press e we don't necessarily want to do that and by the way you can see it's saying I've released click when I stopped clicking but anyway we don't necessarily want the player to register that eess at certain times for example if we're typing a message and we keep pressing e we don't want things like a GUI appearing to happen because it will disrupt our view and it will get in the way we're trying to type a chat message so sometimes when the user is interacting with a Roblox GUI so a core GUI such as the uh chat menu here or perhaps uh there's there's a few other occasions where you wouldn't necessarily want the key press or the action to go through that would be called a a game processed event because the key press is going through a roblo GUI first before it's going through our input here so we could just check to see if game processed events and if it's true then we want to return we want to K this function we don't want to go any further because we're interacting with a Roblox UI or another part of the game so if we now test this one more time if we press e or click around on the screen it's printing which is great if I just clear this and I start typing and pressing e in the chat window you can see it's not registering anymore because this is a game processed event so hopefully I've explained that uh in a way that's understandable for you this is really all you need to know about the user input service however I'll just show you one last thing if you have some other code and you want to quickly check to see if a uh a button is being pressed down you can say uh well you say user input service colon is key down like this and then you you'd pass through the key code uh enum like this so if you wanted to check at a certain point in time whether the a key was being pressed down you would say this it would then return a true or false value which you could store as a variable like this and then you could print out is a key down now this is going to be false because we won't be pressing the key once we first join the game but you might want to use this at other points in in your game so I just wanted to make you aware of that so that was the user input service and how to handle user input it's really really cool let me know if you have any more ideas for tutorials don't forget to subscribe if you found it handy and I'll see you in the next one thanks for watching
