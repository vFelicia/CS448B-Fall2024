With timestamps:

00:01 - in this video I'm going to explain what
00:02 - replicated storage is so we have two uh
00:06 - two parts that make up a game in Roblox
00:09 - we have the server which is what holds
00:12 - most of the the the main code that runs
00:14 - your game uh and then we have clients
00:17 - that are connected to the game so the
00:19 - clients are just players okay uh and
00:22 - like said most of the game logic that
00:24 - you will write most of the code will be
00:26 - written on the server and this is what
00:28 - controls the game because anything that
00:29 - the server does will get replicated to
00:32 - all of the clients so if the C sorry if
00:34 - the server inserts a part into the game
00:37 - or inserts a map then all of the players
00:40 - are going to notice that map appear
00:43 - because that change has been made on the
00:45 - server is going to um get broadcasted or
00:50 - replicated to the connected players AKA
00:55 - clients okay so the server is the thing
00:57 - that has the authority it has the power
00:59 - to make those changes however if a
01:03 - player if a client tries to do something
01:06 - like that if they try to insert a map or
01:08 - if they try to delete the map or if they
01:09 - try to you know delete other players
01:12 - it's only going to take effect on their
01:16 - end on their computer okay or on their
01:19 - device they are only going to be the
01:20 - ones that see that change if they try
01:22 - and delete the map it's only going to
01:24 - get deleted for them okay other players
01:26 - in the game won't see that because the
01:29 - server is is the only thing that can
01:31 - make changes that replicate to other
01:34 - players okay and that's why you have a
01:36 - server and you have clients because the
01:38 - server is what is keeping everything
01:40 - secure okay and only actions like that
01:43 - destructive actions can be done on the
01:45 - server because it has the power now the
01:48 - server like I say that is where you're
01:50 - going to store most of your code it's
01:52 - where your maps are going to be stored
01:53 - it's where information you don't
01:56 - necessarily want to expose to players
01:59 - will be stored okay and that's really
02:02 - good because we can store things that we
02:04 - don't want players to be able to see we
02:06 - might not want them to have access to
02:08 - all of the different weapons in the game
02:10 - that can be purchased okay we might not
02:12 - want them to see all of the maps we
02:14 - might not want them to to be able to see
02:16 - who the game has chosen to be the
02:17 - murderer otherwise an exploiter could
02:20 - just open up their exploiting software
02:23 - which by the way essentially gives them
02:25 - the powers that we have in Roblox Studio
02:27 - okay nowadays exploiters on blocks have
02:30 - got software which will let them view
02:32 - what's inside the Explorer okay and
02:35 - what's inside players and what's inside
02:36 - the lighting so we have these services
02:39 - that are exposing parts of our game to
02:42 - players and Bad actors if they go
02:44 - looking for it so like I say anything
02:46 - that's in the workspace is going to be
02:48 - replicated to all of the players in the
02:50 - game so they'll be able to see that and
02:53 - then we have server storage and server
02:56 - script service and the difference here
02:59 - between between the workspace and these
03:01 - two Services is that the contents of
03:05 - these Services the server script service
03:07 - and the server storage remain private
03:10 - okay they do not get replicated they do
03:12 - not get broadcast to all of the players
03:14 - in the game it is a safe haven for your
03:19 - Maps your information that you don't
03:21 - want players to see your scripts to be
03:23 - stored because as a player playing the
03:25 - game in client mode you'll see I can't
03:29 - expand these two Services I can't see
03:32 - what's inside if there is anything
03:34 - inside but if I switch to server mode
03:37 - you can see that okay there's still no
03:39 - arrows but if I was to insert something
03:42 - into here you know maybe it's a secret
03:44 - folder that I don't want players to see
03:46 - or maybe it's a part okay it's inside
03:49 - server script service or it's inside
03:50 - server storage we can see it on the
03:52 - server but we cannot see it on the
03:54 - client that is the good thing about
03:56 - server storage and server script service
03:58 - it makes parts of the game only visible
04:01 - to the server however there are some
04:03 - things that we do want the server and
04:06 - client to see so replicated storage is
04:10 - just a place where the server can put
04:12 - some things and they will get sent to
04:14 - the clients so it is similar to replic
04:16 - to workspace the only difference between
04:19 - workspace and replicated storage is that
04:22 - whatever's in replicated storage is
04:25 - storage right it's not going to be
04:27 - rendered on the screen it will be
04:29 - accessible by a client and yes an
04:32 - exploiter will be able to see what's in
04:34 - there but we're not going to put
04:35 - anything there that's particularly
04:37 - damaging it's just like a a storage area
04:40 - where you know things that that that may
04:43 - not necessarily we we might want to make
04:46 - visible to clients right now by
04:48 - rendering them on the screen okay we
04:50 - might not want them on screen right now
04:52 - but we don't mind them being there we
04:54 - don't mind them being replicated so let
04:56 - me just show you if I was to insert a
04:58 - folder on the server in replicated
05:01 - storage and don't forget the server
05:02 - still maintains The Authority here if
05:05 - the server creates a
05:08 - folder uh in the replicated storage or
05:10 - any other item if it places an item into
05:12 - replicated storage as the server that
05:15 - folder is going to replicate to all of
05:17 - the clients so all of the clients will
05:19 - see this brand new folder in replicated
05:22 - storage however we're now back on client
05:24 - mode Let's imagine I'm an exploiter okay
05:27 - and I'm trying to add a part into
05:29 - replicate storage I'll call it cool part
05:32 - you know I'll make it massive I'll do
05:34 - whatever I can I'm going to try and put
05:35 - loads in there cuz I want to try and
05:37 - somehow overload the server because I'm
05:39 - a I'm an exploiter okay so I've tried to
05:43 - now insert all those parts but if we go
05:45 - back to the server you'll notice they
05:47 - haven't replicated back to the server
05:49 - and they won't replicate to other
05:50 - clients because as I was saying earlier
05:53 - only the server has the power to insert
05:56 - objects and alter objects inside of here
05:59 - that will replicate back to other
06:01 - players so that is replicated storage uh
06:03 - so what is it mainly used for well it's
06:06 - mainly used to store
06:09 - um well one of the main use cases
06:11 - actually is it's used for status bars so
06:14 - I don't know if if you've ever played a
06:16 - game and you notice that it has a like a
06:18 - bar at the top which says intermission
06:20 - or next next map loading or seconds left
06:23 - in the round but what will happen
06:25 - usually to make those work is there will
06:27 - be some kind of value in replicating
06:29 - storage and the server will write to
06:32 - that value from the server scripts and
06:34 - it will you know change the value to say
06:36 - intermission and then on this on the
06:38 - client the players there will be some
06:39 - sort of client code that listens for a
06:42 - change in that value and when it changes
06:44 - it will update the GUI um for that
06:48 - specific player and all players will see
06:49 - that message it's great because the
06:53 - server can broadcast the text any
06:55 - exploiter can attempt to change the text
06:57 - if they want but it's only going to
06:59 - change on their end because any changes
07:02 - are only replicated if they come from
07:03 - the
07:04 - server so I mean what what else can you
07:07 - store in there you can store things such
07:09 - as you know if you had a game with
07:11 - multiple worlds and each world has its
07:14 - own egg that you want to show when you
07:17 - enter that world you might want to keep
07:19 - all the eggs in replicated storage and
07:21 - then just locally uh bring them out of
07:24 - replicated storage whenever you you
07:26 - enter a specific world you're not too
07:28 - bothered if the egg eggs you know if an
07:30 - exploiter can pull the eggs out of there
07:32 - it's not going to cause too much damage
07:34 - um but you want the user to be able to
07:37 - see them for example so replicated
07:39 - storage just a great place to store
07:41 - anything you're not too worried about
07:42 - the client seeing um yes I suppose you
07:46 - could uh potentially store maps in there
07:48 - as well if you had worlds and you're not
07:50 - too bothered but the only thing that you
07:52 - do have to think about is like I'm
07:53 - saying an exploiter if they wanted to
07:55 - could pull the stuff out of there into
07:57 - the workspace albeit they only be the
07:59 - one seeing it however that's that's what
08:03 - the risk you've got to take that that's
08:04 - you've got to be comfortable about what
08:06 - you're putting in
08:07 - there now another point is we've got
08:09 - replicated events replicated um sorry
08:12 - remote events remote functions these
08:14 - allow the server and client to
08:16 - communicate with each other to send
08:18 - messages so this is a great place to
08:20 - store them you can have your remote
08:22 - events which are
08:24 - stored in replicated storage so both the
08:27 - server and client can see them
08:30 - uh the client can then attach a listener
08:33 - event to them to listen out for when
08:35 - they get fired from the server and then
08:37 - the server can fire them so we'll get on
08:39 - to those in another video but that's why
08:42 - uh this is an ideal place to store
08:44 - remote events because in order for them
08:46 - to function they need to be visible by
08:48 - both the server and client and that way
08:51 - they can still only be fired from the
08:53 - server because it's going to uh
08:56 - replicate to other clients
09:01 - now I know I'm also going to get
09:02 - comments saying well what is replicated
09:04 - first a brief overview of that is that
09:08 - the difference here is replicated first
09:11 - will be replicated to all clients okay
09:14 - but not the server and it will be
09:15 - replicated first before anything else so
09:18 - if you need something to be loaded for a
09:20 - client first such as a loading screen
09:23 - then You' put it in replicated first but
09:25 - there is no link to the server here the
09:27 - server would not see anything inside it
09:29 - it would not be bothered by replicated
09:31 - first um it is designed for when a
09:34 - player first joins the game you need to
09:36 - quickly load something for them first
09:39 - before anything else before everything
09:41 - replicated storage you'd put it in
09:42 - replicated first and that way as soon as
09:45 - the player joins you'd be able to grab
09:47 - it and in that case probably a loading
09:49 - screen because the first thing you want
09:50 - to show is a loading screen right I
09:53 - don't really know any of the use cases
09:54 - for it but that is replicated storage
09:57 - that is your replicated uh um service
10:00 - it's probably one of the most useful
10:03 - services that you're going to use um
10:05 - like I say you can store scripts
10:07 - characters NPCs models things that you
10:09 - might need to use at some point without
10:12 - then having to make a request to the
10:14 - server you know just keep it in
10:16 - replicated storage and then you can take
10:18 - it out whenever you need to and you can
10:21 - you can access from your local scripts
10:24 - in the stter GUI starter pack stter
10:26 - player you can access all of this stuff
10:30 - but if you try to add stuff to
10:32 - replicated storage from your local
10:34 - scripts in your starter GUI starter pack
10:37 - it's not going to do anything right it's
10:38 - only going to be visible to you the
10:40 - server isn't going to see it other
10:42 - players aren't going to see it only
10:44 - stuff that gets replicated to other
10:45 - players is the stuff that the server
10:48 - puts in there because the server has the
10:50 - power has the authority so let me know
10:52 - if you enjoyed this let me know if you
10:54 - have any more videos on replication
10:56 - remote events server client stuff it is
10:59 - very interesting uh is a bit hard to get
11:01 - your head around but I hope this helped
11:03 - so thanks for watching and I'll see you
11:05 - next time

Cleaned transcript:

in this video I'm going to explain what replicated storage is so we have two uh two parts that make up a game in Roblox we have the server which is what holds most of the the the main code that runs your game uh and then we have clients that are connected to the game so the clients are just players okay uh and like said most of the game logic that you will write most of the code will be written on the server and this is what controls the game because anything that the server does will get replicated to all of the clients so if the C sorry if the server inserts a part into the game or inserts a map then all of the players are going to notice that map appear because that change has been made on the server is going to um get broadcasted or replicated to the connected players AKA clients okay so the server is the thing that has the authority it has the power to make those changes however if a player if a client tries to do something like that if they try to insert a map or if they try to delete the map or if they try to you know delete other players it's only going to take effect on their end on their computer okay or on their device they are only going to be the ones that see that change if they try and delete the map it's only going to get deleted for them okay other players in the game won't see that because the server is is the only thing that can make changes that replicate to other players okay and that's why you have a server and you have clients because the server is what is keeping everything secure okay and only actions like that destructive actions can be done on the server because it has the power now the server like I say that is where you're going to store most of your code it's where your maps are going to be stored it's where information you don't necessarily want to expose to players will be stored okay and that's really good because we can store things that we don't want players to be able to see we might not want them to have access to all of the different weapons in the game that can be purchased okay we might not want them to see all of the maps we might not want them to to be able to see who the game has chosen to be the murderer otherwise an exploiter could just open up their exploiting software which by the way essentially gives them the powers that we have in Roblox Studio okay nowadays exploiters on blocks have got software which will let them view what's inside the Explorer okay and what's inside players and what's inside the lighting so we have these services that are exposing parts of our game to players and Bad actors if they go looking for it so like I say anything that's in the workspace is going to be replicated to all of the players in the game so they'll be able to see that and then we have server storage and server script service and the difference here between between the workspace and these two Services is that the contents of these Services the server script service and the server storage remain private okay they do not get replicated they do not get broadcast to all of the players in the game it is a safe haven for your Maps your information that you don't want players to see your scripts to be stored because as a player playing the game in client mode you'll see I can't expand these two Services I can't see what's inside if there is anything inside but if I switch to server mode you can see that okay there's still no arrows but if I was to insert something into here you know maybe it's a secret folder that I don't want players to see or maybe it's a part okay it's inside server script service or it's inside server storage we can see it on the server but we cannot see it on the client that is the good thing about server storage and server script service it makes parts of the game only visible to the server however there are some things that we do want the server and client to see so replicated storage is just a place where the server can put some things and they will get sent to the clients so it is similar to replic to workspace the only difference between workspace and replicated storage is that whatever's in replicated storage is storage right it's not going to be rendered on the screen it will be accessible by a client and yes an exploiter will be able to see what's in there but we're not going to put anything there that's particularly damaging it's just like a a storage area where you know things that that that may not necessarily we we might want to make visible to clients right now by rendering them on the screen okay we might not want them on screen right now but we don't mind them being there we don't mind them being replicated so let me just show you if I was to insert a folder on the server in replicated storage and don't forget the server still maintains The Authority here if the server creates a folder uh in the replicated storage or any other item if it places an item into replicated storage as the server that folder is going to replicate to all of the clients so all of the clients will see this brand new folder in replicated storage however we're now back on client mode Let's imagine I'm an exploiter okay and I'm trying to add a part into replicate storage I'll call it cool part you know I'll make it massive I'll do whatever I can I'm going to try and put loads in there cuz I want to try and somehow overload the server because I'm a I'm an exploiter okay so I've tried to now insert all those parts but if we go back to the server you'll notice they haven't replicated back to the server and they won't replicate to other clients because as I was saying earlier only the server has the power to insert objects and alter objects inside of here that will replicate back to other players so that is replicated storage uh so what is it mainly used for well it's mainly used to store um well one of the main use cases actually is it's used for status bars so I don't know if if you've ever played a game and you notice that it has a like a bar at the top which says intermission or next next map loading or seconds left in the round but what will happen usually to make those work is there will be some kind of value in replicating storage and the server will write to that value from the server scripts and it will you know change the value to say intermission and then on this on the client the players there will be some sort of client code that listens for a change in that value and when it changes it will update the GUI um for that specific player and all players will see that message it's great because the server can broadcast the text any exploiter can attempt to change the text if they want but it's only going to change on their end because any changes are only replicated if they come from the server so I mean what what else can you store in there you can store things such as you know if you had a game with multiple worlds and each world has its own egg that you want to show when you enter that world you might want to keep all the eggs in replicated storage and then just locally uh bring them out of replicated storage whenever you you enter a specific world you're not too bothered if the egg eggs you know if an exploiter can pull the eggs out of there it's not going to cause too much damage um but you want the user to be able to see them for example so replicated storage just a great place to store anything you're not too worried about the client seeing um yes I suppose you could uh potentially store maps in there as well if you had worlds and you're not too bothered but the only thing that you do have to think about is like I'm saying an exploiter if they wanted to could pull the stuff out of there into the workspace albeit they only be the one seeing it however that's that's what the risk you've got to take that that's you've got to be comfortable about what you're putting in there now another point is we've got replicated events replicated um sorry remote events remote functions these allow the server and client to communicate with each other to send messages so this is a great place to store them you can have your remote events which are stored in replicated storage so both the server and client can see them uh the client can then attach a listener event to them to listen out for when they get fired from the server and then the server can fire them so we'll get on to those in another video but that's why uh this is an ideal place to store remote events because in order for them to function they need to be visible by both the server and client and that way they can still only be fired from the server because it's going to uh replicate to other clients now I know I'm also going to get comments saying well what is replicated first a brief overview of that is that the difference here is replicated first will be replicated to all clients okay but not the server and it will be replicated first before anything else so if you need something to be loaded for a client first such as a loading screen then You' put it in replicated first but there is no link to the server here the server would not see anything inside it it would not be bothered by replicated first um it is designed for when a player first joins the game you need to quickly load something for them first before anything else before everything replicated storage you'd put it in replicated first and that way as soon as the player joins you'd be able to grab it and in that case probably a loading screen because the first thing you want to show is a loading screen right I don't really know any of the use cases for it but that is replicated storage that is your replicated uh um service it's probably one of the most useful services that you're going to use um like I say you can store scripts characters NPCs models things that you might need to use at some point without then having to make a request to the server you know just keep it in replicated storage and then you can take it out whenever you need to and you can you can access from your local scripts in the stter GUI starter pack stter player you can access all of this stuff but if you try to add stuff to replicated storage from your local scripts in your starter GUI starter pack it's not going to do anything right it's only going to be visible to you the server isn't going to see it other players aren't going to see it only stuff that gets replicated to other players is the stuff that the server puts in there because the server has the power has the authority so let me know if you enjoyed this let me know if you have any more videos on replication remote events server client stuff it is very interesting uh is a bit hard to get your head around but I hope this helped so thanks for watching and I'll see you next time
