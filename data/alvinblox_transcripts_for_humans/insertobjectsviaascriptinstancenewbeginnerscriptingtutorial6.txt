With timestamps:

00:00 - hi everyone welcome to episode number
00:03 - six in my beginner scripting series
00:05 - and in this video we're going to look at
00:07 - instance dot new
00:09 - so it's called instancing and it allows
00:11 - us to create
00:12 - parts and other objects not just parts
00:15 - any object in roblox studio
00:17 - we can create them in a script using a
00:19 - function
00:20 - called instance.new but before we get
00:23 - into that i just need to
00:24 - tell you about class names so objects in
00:28 - roblox studio there's loads of different
00:30 - objects okay if we just click on the
00:32 - little plus icon here
00:33 - we have a list of all of the different
00:36 - objects
00:36 - in the game and there's a lot of them
00:38 - okay we've got things such as the values
00:40 - we've got
00:41 - sounds we've got scripts we've got
00:43 - lights
00:44 - body movers ui ui
00:48 - stuff and we've got a part so i've
00:50 - inserted a part here
00:51 - and we can call this part whatever we
00:54 - like so we could call it
00:55 - um brick we could call it hello
00:59 - we could call it alvin blocks but
01:02 - all of these parts they are still parts
01:05 - they may be named differently
01:06 - but they are still parts and that is
01:09 - where class name
01:11 - comes into the showcase because if we
01:14 - have a look at this property
01:16 - called class name we can't change it we
01:19 - cannot change
01:20 - the class name because it is fixed it's
01:23 - locked
01:23 - because roblox decides the class name of
01:27 - different objects in roblox studio but
01:29 - we can name these parts differently but
01:31 - they will always have the same class
01:33 - name
01:33 - because it tells us what type of object
01:36 - the objects are
01:37 - so in this case these are parts their
01:39 - class name
01:40 - is part and then the class name is
01:42 - usually the default name
01:44 - of an object so if i was to insert a
01:47 - decal
01:48 - then the name of the part of the name of
01:51 - the decal is decal
01:52 - but its class name is also decal but
01:54 - when we change the name
01:56 - of the decal the class name doesn't
01:58 - change so class name
01:59 - it tells us the uh or the original name
02:03 - of the object and it tells us what it
02:05 - actually is if it's named differently
02:07 - you'll see that the spawn location has
02:08 - its own class name any object
02:10 - in roblox has a class name and it tells
02:13 - us
02:14 - uh let's have a look let's hover over to
02:16 - say anything yes it says the string name
02:18 - of this instance is
02:20 - most derived class so it's the base
02:23 - class
02:23 - is the base identifier of objects in
02:27 - roblox and we can also call them
02:29 - instances and that's why we say instance
02:32 - dot new because we're creating
02:34 - a new object a new instance using a
02:37 - script
02:37 - so let me show you how to do that let's
02:39 - go into a script here which i've put
02:41 - into server script service
02:42 - and it's very simple all we need to do
02:44 - is say
02:45 - instance dot new and you'll see here
02:48 - that it does
02:49 - show that we need to provide a string
02:53 - value for the name of the of the part so
02:56 - we need to give that class name
02:57 - to this function we need to tell it
02:59 - which object we want to insert
03:01 - so that's why we use the class name so
03:03 - we say instance dot new
03:05 - and we'll put in that class name of
03:07 - parts and it's also
03:09 - saying it wants an instance for the
03:11 - parent
03:12 - now you can set the parent of
03:15 - this object this new instance from this
03:18 - function so we could say
03:20 - game dot workspace and close it off like
03:23 - that
03:24 - and that will insert a part into the
03:26 - workspace
03:27 - but this is actually not recommended do
03:30 - not do this okay
03:31 - you you never ever want to parent an
03:33 - object
03:34 - uh straight from the function so never
03:36 - ever put the parent
03:38 - inside this function you literally only
03:40 - just want to have
03:42 - the class name of the part and i'll
03:43 - explain why
03:45 - later on but it's very bad practice if
03:48 - you set the parent within this argument
03:51 - here so if you set the parent argument
03:53 - in the function
03:54 - it's very bad for for reasons to do with
03:58 - optimization
03:59 - and performance so we'll get onto that
04:01 - later on but this will
04:03 - create a new part in the game world
04:06 - the only problem is we haven't been able
04:08 - to tell the script
04:10 - um where to put it and that's because
04:13 - obviously i've just said
04:14 - we've there's a performance issue there
04:15 - but what we can do is we can set this to
04:17 - a variable so let's just give a new
04:19 - variable
04:20 - we'll call it my parts and the function
04:23 - instance.new is built into roblox so it
04:26 - will create this object and it will
04:28 - return it
04:29 - so the uh value of my part will be
04:33 - the the parts which we just created
04:35 - because it's going to
04:36 - create the new object and it's going to
04:38 - send it back uh
04:39 - it's going to set it to this variable so
04:41 - we will be able to reference it later on
04:43 - so now that we've done that we can set
04:46 - some properties so for example we could
04:48 - set the transparency of my parts
04:50 - so just like any other object that we
04:52 - reference since we now have a reference
04:54 - to this part which we've just created
04:56 - we can set its properties so we could
04:58 - make it semi-transparent for example
05:01 - um we could make it anchored
05:04 - and when once you finally set all of the
05:07 - properties that you want
05:09 - okay then you parent the object so we
05:11 - haven't
05:12 - told the script where we want it to be
05:14 - parented where we want it to
05:16 - to be and to do that we will just say my
05:19 - part
05:20 - dot parent equals game dot workspace now
05:24 - the reason we're doing this
05:25 - last it's very is recommended to always
05:28 - set the parent of an instance
05:31 - last of all the last thing that you do
05:33 - after you've set all of the properties
05:35 - that you want to set
05:36 - then parent it to wherever you want and
05:39 - it just from
05:39 - a performance perspective it is much
05:42 - better
05:42 - to set the properties of the part
05:46 - before you parent it i'm not going to go
05:49 - into why
05:50 - because it's to do with the performance
05:52 - and it just is a
05:53 - it's slightly better than setting the
05:55 - the parent
05:56 - instance in the instance.new function so
05:59 - just
06:00 - one thing to remember always set the
06:02 - parent property
06:03 - last and if you don't set a parent
06:05 - property where you're not going to
06:07 - you're not going to see your part it's
06:09 - not going to be spawned in the game
06:10 - world
06:11 - because the script doesn't know where to
06:12 - put it if we have a look here
06:14 - you can see our part is nowhere to be
06:16 - seen we've got the three
06:17 - which we which we manually generated but
06:20 - the one which came from our script
06:21 - isn't there so what we'll do is we'll
06:23 - say my part dot parent equals game
06:26 - dot workspace and we click on run and it
06:29 - should
06:30 - insert the part into the game let's have
06:32 - a look in the workspace and there we go
06:34 - we have a part
06:35 - and let's see where is it let's click on
06:37 - f on the keyboard
06:39 - and there it is it's hiding just under
06:41 - the spawn location there
06:42 - so we can also set its position and to
06:45 - do that we can set a vector3 value
06:47 - so mypart.position equals vector3.new
06:51 - and we can set some coordinates in the
06:52 - gameworld so
06:54 - for example we could put it in this
06:56 - position over here
06:57 - so 53.422 0.5
07:00 - 32.139 let's just put this
07:04 - in our vector3 value we'll learn a bit
07:06 - more about positions
07:07 - in a future video so don't worry too
07:09 - much about this if you don't understand
07:10 - it
07:11 - and let's click on run and you can see
07:13 - our part
07:14 - its position property was set to
07:17 - this value here so that's how you
07:20 - generate
07:21 - new objects from a script we use the
07:23 - instance.new function
07:24 - and we can put any class name in here it
07:27 - doesn't just have to be a part
07:28 - we could insert anything let's have a
07:31 - look at what we could insert here
07:32 - we could insert a particle emitter and
07:35 - i'm just going to remove these
07:37 - properties
07:38 - and i'm going to change the name of the
07:39 - variable so we don't get confused so i'm
07:41 - just going to call it mype
07:42 - for particle emitter and we can say mype
07:45 - dot parent equals game.workspace.hello
07:49 - because we've already got a brick in
07:50 - here in the workspace so let's click on
07:52 - run
07:53 - and our particle emitter should be
07:56 - inserted into
07:57 - the hello part and it is so as soon as
07:59 - the game starts running
08:01 - our script here executes it instances
08:04 - in a new particular emitter and then
08:06 - that is set as the value of this
08:08 - variable
08:09 - and then since we now have it set as a
08:11 - variable we can reference it and that's
08:13 - why we set it as a variable
08:15 - if we didn't set it as a variable then
08:17 - we don't have a way
08:18 - of being able to keep a reference to
08:20 - this particle emitter because we haven't
08:22 - set the returned value
08:24 - from this function which creates the
08:26 - object and will return the object
08:27 - we haven't set it to anything so we
08:29 - can't say later on
08:31 - particle emitter dot enabled
08:34 - equals false we can't set any of its
08:36 - properties because we don't have a
08:37 - reference to it
08:38 - so what we can do is we can set it as a
08:41 - variable like this and then we can set
08:45 - its properties
08:46 - so that's why we set it as a variable
08:48 - because a variable lets us hold data
08:50 - which we can use later on
08:51 - and we can set the enabled property to
08:54 - false
08:54 - and if we look in our part um
08:59 - we have an error let's see what's
09:00 - happened
09:02 - see oh we didn't parent it there we go
09:04 - so we didn't parent the particle emitter
09:06 - so it didn't get placed anywhere in the
09:08 - game world
09:09 - it didn't know where to put it so that's
09:11 - why you should parent
09:12 - your instances from the script
09:16 - otherwise they're not going to be placed
09:18 - anywhere in the game the game won't know
09:19 - where to put it all right before we
09:22 - finish let me just give you a quick
09:23 - reason
09:24 - as to why the second parameter of the
09:27 - instance.new function
09:28 - which i mentioned earlier is a bad
09:30 - practice first of all it's deprecated so
09:32 - roblox doesn't support it anymore
09:35 - and they recommend not to use it but the
09:37 - reason why
09:38 - is because if we were to set the parent
09:40 - of the object first
09:42 - then the particle emitter is immediately
09:45 - going to be placed into the game world
09:47 - so let's just imagine that we we run the
09:50 - code and we get the line one
09:51 - and the particle emitter is inserted now
09:54 - it's much
09:55 - more costly for the game to look up the
09:58 - particle emitter every time we want to
10:00 - change something
10:01 - so if we want to change the enabled
10:03 - property well we have to firstly
10:05 - look up the particle emitter in the game
10:07 - and we set the property
10:09 - to false and then it has to replicate to
10:11 - all of the clients in the game so all of
10:13 - the players that are connected
10:14 - we have to send this change to them all
10:17 - so we have to tell
10:18 - all of the connected players that we've
10:20 - changed the enabled property to false
10:22 - and so we'll have to look it up and set
10:24 - that property to false so
10:26 - everyone connected to the game all of
10:27 - their clients
10:29 - will automatically have to do this so
10:31 - the change will have to be replicated
10:33 - and so for every single property that we
10:34 - change after we've parented it
10:36 - we have to go and replicate it again and
10:39 - that it
10:39 - will take much more time than if we just
10:43 - didn't parent it to begin with and then
10:45 - we set the properties that we wanted
10:47 - and then afterwards if we were to go and
10:49 - parent it
10:50 - to the workspace well because we already
10:53 - set the properties we only have to
10:54 - replicate
10:55 - the particle emitter to all of the other
10:58 - clients in the game
10:59 - once because if we've set the properties
11:02 - then
11:02 - it's how we want it to be we don't have
11:04 - to change anything else and we can just
11:06 - send the one particle emitter to all of
11:08 - the clients in the game
11:09 - and then there won't be any more
11:12 - data having to be sent over the network
11:14 - about other properties which have to be
11:16 - changed because they're already there
11:17 - they're already set in the particle
11:19 - emitter
11:20 - and we're only parenting it we're only
11:22 - putting it in the game and replicating
11:23 - it to all the different players
11:25 - when we've set the properties that we
11:27 - want and it's good to go
11:29 - so if you don't understand that don't
11:31 - worry too much about it what you just
11:32 - need to know is it is bad practice
11:34 - to use this second parent argument it is
11:37 - supported
11:38 - but don't use it because i never use it
11:41 - and most
11:42 - programmers don't use it nowadays in
11:44 - roblox we just set the parent property
11:46 - once we have um sorry we set the parent
11:49 - property once we've set all the other
11:51 - properties which we want okay so that
11:54 - was a quick tutorial
11:55 - on how to use instancing instance.new in
11:58 - roblox to generate parts you can set it
12:00 - as a variable
12:01 - um so that you can keep track of your
12:04 - objects
12:05 - and change properties in the future and
12:08 - it's a very very useful function you'll
12:10 - be using it all the time in scripting so
12:11 - thanks for watching leave a like if you
12:13 - enjoyed it
12:14 - and i'll see you in the next video
12:16 - cheers

Cleaned transcript:

hi everyone welcome to episode number six in my beginner scripting series and in this video we're going to look at instance dot new so it's called instancing and it allows us to create parts and other objects not just parts any object in roblox studio we can create them in a script using a function called instance.new but before we get into that i just need to tell you about class names so objects in roblox studio there's loads of different objects okay if we just click on the little plus icon here we have a list of all of the different objects in the game and there's a lot of them okay we've got things such as the values we've got sounds we've got scripts we've got lights body movers ui ui stuff and we've got a part so i've inserted a part here and we can call this part whatever we like so we could call it um brick we could call it hello we could call it alvin blocks but all of these parts they are still parts they may be named differently but they are still parts and that is where class name comes into the showcase because if we have a look at this property called class name we can't change it we cannot change the class name because it is fixed it's locked because roblox decides the class name of different objects in roblox studio but we can name these parts differently but they will always have the same class name because it tells us what type of object the objects are so in this case these are parts their class name is part and then the class name is usually the default name of an object so if i was to insert a decal then the name of the part of the name of the decal is decal but its class name is also decal but when we change the name of the decal the class name doesn't change so class name it tells us the uh or the original name of the object and it tells us what it actually is if it's named differently you'll see that the spawn location has its own class name any object in roblox has a class name and it tells us uh let's have a look let's hover over to say anything yes it says the string name of this instance is most derived class so it's the base class is the base identifier of objects in roblox and we can also call them instances and that's why we say instance dot new because we're creating a new object a new instance using a script so let me show you how to do that let's go into a script here which i've put into server script service and it's very simple all we need to do is say instance dot new and you'll see here that it does show that we need to provide a string value for the name of the of the part so we need to give that class name to this function we need to tell it which object we want to insert so that's why we use the class name so we say instance dot new and we'll put in that class name of parts and it's also saying it wants an instance for the parent now you can set the parent of this object this new instance from this function so we could say game dot workspace and close it off like that and that will insert a part into the workspace but this is actually not recommended do not do this okay you you never ever want to parent an object uh straight from the function so never ever put the parent inside this function you literally only just want to have the class name of the part and i'll explain why later on but it's very bad practice if you set the parent within this argument here so if you set the parent argument in the function it's very bad for for reasons to do with optimization and performance so we'll get onto that later on but this will create a new part in the game world the only problem is we haven't been able to tell the script um where to put it and that's because obviously i've just said we've there's a performance issue there but what we can do is we can set this to a variable so let's just give a new variable we'll call it my parts and the function instance.new is built into roblox so it will create this object and it will return it so the uh value of my part will be the the parts which we just created because it's going to create the new object and it's going to send it back uh it's going to set it to this variable so we will be able to reference it later on so now that we've done that we can set some properties so for example we could set the transparency of my parts so just like any other object that we reference since we now have a reference to this part which we've just created we can set its properties so we could make it semitransparent for example um we could make it anchored and when once you finally set all of the properties that you want okay then you parent the object so we haven't told the script where we want it to be parented where we want it to to be and to do that we will just say my part dot parent equals game dot workspace now the reason we're doing this last it's very is recommended to always set the parent of an instance last of all the last thing that you do after you've set all of the properties that you want to set then parent it to wherever you want and it just from a performance perspective it is much better to set the properties of the part before you parent it i'm not going to go into why because it's to do with the performance and it just is a it's slightly better than setting the the parent instance in the instance.new function so just one thing to remember always set the parent property last and if you don't set a parent property where you're not going to you're not going to see your part it's not going to be spawned in the game world because the script doesn't know where to put it if we have a look here you can see our part is nowhere to be seen we've got the three which we which we manually generated but the one which came from our script isn't there so what we'll do is we'll say my part dot parent equals game dot workspace and we click on run and it should insert the part into the game let's have a look in the workspace and there we go we have a part and let's see where is it let's click on f on the keyboard and there it is it's hiding just under the spawn location there so we can also set its position and to do that we can set a vector3 value so mypart.position equals vector3.new and we can set some coordinates in the gameworld so for example we could put it in this position over here so 53.422 0.5 32.139 let's just put this in our vector3 value we'll learn a bit more about positions in a future video so don't worry too much about this if you don't understand it and let's click on run and you can see our part its position property was set to this value here so that's how you generate new objects from a script we use the instance.new function and we can put any class name in here it doesn't just have to be a part we could insert anything let's have a look at what we could insert here we could insert a particle emitter and i'm just going to remove these properties and i'm going to change the name of the variable so we don't get confused so i'm just going to call it mype for particle emitter and we can say mype dot parent equals game.workspace.hello because we've already got a brick in here in the workspace so let's click on run and our particle emitter should be inserted into the hello part and it is so as soon as the game starts running our script here executes it instances in a new particular emitter and then that is set as the value of this variable and then since we now have it set as a variable we can reference it and that's why we set it as a variable if we didn't set it as a variable then we don't have a way of being able to keep a reference to this particle emitter because we haven't set the returned value from this function which creates the object and will return the object we haven't set it to anything so we can't say later on particle emitter dot enabled equals false we can't set any of its properties because we don't have a reference to it so what we can do is we can set it as a variable like this and then we can set its properties so that's why we set it as a variable because a variable lets us hold data which we can use later on and we can set the enabled property to false and if we look in our part um we have an error let's see what's happened see oh we didn't parent it there we go so we didn't parent the particle emitter so it didn't get placed anywhere in the game world it didn't know where to put it so that's why you should parent your instances from the script otherwise they're not going to be placed anywhere in the game the game won't know where to put it all right before we finish let me just give you a quick reason as to why the second parameter of the instance.new function which i mentioned earlier is a bad practice first of all it's deprecated so roblox doesn't support it anymore and they recommend not to use it but the reason why is because if we were to set the parent of the object first then the particle emitter is immediately going to be placed into the game world so let's just imagine that we we run the code and we get the line one and the particle emitter is inserted now it's much more costly for the game to look up the particle emitter every time we want to change something so if we want to change the enabled property well we have to firstly look up the particle emitter in the game and we set the property to false and then it has to replicate to all of the clients in the game so all of the players that are connected we have to send this change to them all so we have to tell all of the connected players that we've changed the enabled property to false and so we'll have to look it up and set that property to false so everyone connected to the game all of their clients will automatically have to do this so the change will have to be replicated and so for every single property that we change after we've parented it we have to go and replicate it again and that it will take much more time than if we just didn't parent it to begin with and then we set the properties that we wanted and then afterwards if we were to go and parent it to the workspace well because we already set the properties we only have to replicate the particle emitter to all of the other clients in the game once because if we've set the properties then it's how we want it to be we don't have to change anything else and we can just send the one particle emitter to all of the clients in the game and then there won't be any more data having to be sent over the network about other properties which have to be changed because they're already there they're already set in the particle emitter and we're only parenting it we're only putting it in the game and replicating it to all the different players when we've set the properties that we want and it's good to go so if you don't understand that don't worry too much about it what you just need to know is it is bad practice to use this second parent argument it is supported but don't use it because i never use it and most programmers don't use it nowadays in roblox we just set the parent property once we have um sorry we set the parent property once we've set all the other properties which we want okay so that was a quick tutorial on how to use instancing instance.new in roblox to generate parts you can set it as a variable um so that you can keep track of your objects and change properties in the future and it's a very very useful function you'll be using it all the time in scripting so thanks for watching leave a like if you enjoyed it and i'll see you in the next video cheers
