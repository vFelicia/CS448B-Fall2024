With timestamps:

00:00 - welcome to your fourth roblox scripting
00:01 - tutorial in this video we're going to be
00:03 - looking at
00:04 - events so events detect when something
00:06 - happens in the game
00:08 - such as when a new player joins or when
00:10 - an object twitches apart
00:12 - when an action occurs that can trigger
00:14 - one of these events
00:15 - we say that the event is being fired now
00:18 - events
00:18 - are coded by roadblocks behind the
00:20 - scenes to detect whenever these actions
00:23 - happen
00:23 - so we don't have to worry about how the
00:25 - detection works
00:26 - or writing any code to deal with that
00:29 - what you do need to know though
00:30 - is how to run code when an event is
00:33 - fired
00:34 - because this is how we make our games
00:36 - interactive this is how
00:37 - we make code that kills a player when
00:40 - they step on a lava brick for example
00:42 - in the last video we looked at functions
00:45 - functions allow us to write code which
00:47 - won't execute straight away
00:49 - when the script starts running meaning
00:51 - we can execute it
00:52 - whenever we want later on in the script
00:55 - and when we set up an event
00:56 - in our scripts we provide it with a
00:59 - function
01:00 - and we tell the script that we want this
01:03 - function
01:04 - to run whenever a certain event is fired
01:07 - so any code that we want to execute so
01:10 - like i said in the example before
01:12 - we could write some code which um
01:14 - removes players health
01:16 - we can put that in a function and we can
01:19 - set it up
01:20 - to run that function whenever a player
01:23 - steps on
01:24 - this brick for example and we can use
01:27 - one of roblox's inbuilt events which
01:29 - they've already coded
01:31 - to detect when someone steps on this
01:33 - brick and then when they do that
01:35 - we can tell the script to run a function
01:38 - and we could have a function
01:39 - that will kill them by removing their
01:42 - health so this process is known as
01:44 - connecting
01:45 - the event to the function we're going to
01:47 - be telling the script what we want to do
01:49 - when the event fires now we don't know
01:52 - how to do this yet so i'm going to show
01:54 - you how to set up an event there's a lot
01:57 - of events in roblox
01:58 - there's a set list we can't just make up
02:01 - an event
02:02 - by ourselves well we can but that's a
02:04 - completely different video which we'll
02:06 - be getting onto
02:07 - later down the line but for now all
02:10 - objects in roblox
02:11 - as they have their own list of
02:13 - properties they also have their own list
02:15 - of events
02:16 - and to find that list we're going to go
02:17 - to the view tab and we're going to click
02:19 - on object
02:20 - browser now on the left side here we
02:22 - have a list of all of the different
02:25 - objects that are available to us in
02:27 - roblox and they're named by their class
02:29 - name
02:30 - now obviously we have a part in the
02:32 - workspace it's called test
02:33 - part but its class name is a part
02:35 - because it's still apart
02:37 - so we're gonna find our part and now on
02:40 - the right side
02:41 - we have a list of all of this all of
02:44 - this parts
02:44 - functions so a part can have functions
02:47 - we'll get onto that in a later video
02:48 - they are the pink icons they have
02:51 - properties
02:52 - all of these blue icons are the
02:53 - properties such as
02:55 - brick color can collide anchored for
02:58 - example
02:59 - but we also have these lightning bolts
03:01 - and these are
03:02 - our events now like i said these are
03:06 - created by roblox and there's only a set
03:08 - list of events
03:10 - so in this case we're going to be
03:11 - looking at the touched events
03:13 - now this event will trigger whenever
03:16 - a player steps on a part and we can set
03:20 - up this event
03:21 - to trigger a function when it happens
03:24 - so to set it up very easy we're going to
03:26 - be using this touched event
03:27 - so let's go to our script let's just
03:30 - delete this code because we're going to
03:31 - be doing some events
03:32 - and firstly like when we were looking at
03:35 - properties we firstly had to reference
03:37 - the object so in this case we're going
03:39 - to say game
03:41 - dot workspace dot test part okay we have
03:43 - now
03:44 - got our objects and we are ready to
03:48 - select the event which we want to
03:50 - trigger a function
03:51 - so we do a dot and you can see we've got
03:53 - our list of properties now if we scroll
03:55 - down
03:56 - through this list you can see we get to
03:58 - our events
03:59 - and we want to use the touched event so
04:01 - whenever somebody touches
04:03 - this part we are going to connect
04:06 - the event to a function we don't have a
04:09 - function right now so let's create a
04:11 - function
04:11 - let's just leave this here for now i
04:13 - know there's a red line underneath it
04:15 - but don't worry
04:15 - but let's create a function okay that is
04:18 - going
04:19 - to what should we do let's kill a player
04:22 - okay so we've given our function a name
04:25 - let's put in some brackets
04:26 - and let's add in the end here so now
04:29 - any code that goes inside this function
04:32 - will run
04:33 - whenever our event is fired because
04:35 - we're going to set up
04:36 - that connection in a minute so let's not
04:39 - worry about the code that goes in this
04:40 - function for now
04:42 - but imagine we've got our function
04:43 - complete with our code to kill the
04:45 - player
04:46 - we can now say colon connect
04:49 - and then we'll do a pair of brackets and
04:52 - then
04:53 - what we want to do is we want to put the
04:55 - name of our function
04:56 - in here so what we're saying is when a
04:59 - player
05:00 - steps on this part we're going to can
05:03 - we're connecting this event to this
05:05 - function
05:06 - and we're saying run this function
05:08 - whenever somebody steps on this part
05:10 - now if i was to put a print
05:14 - in here to say let's kill the player
05:17 - because we haven't got into oh if we
05:20 - just uh do some code to kill the player
05:21 - it's going to
05:22 - add a little bit more time so for now
05:24 - let's just do a print statement let's
05:25 - open up the output
05:27 - and let's join the game
05:30 - now if i step on this part you can see
05:32 - it says let's kill the player
05:34 - and you can see i step off and it stops
05:37 - printing okay
05:38 - you can see it's printed 10 times i'll
05:40 - get on to that in a later video
05:41 - that's because the event is registering
05:44 - for every single body part so it could
05:46 - be registering for my left foot right
05:47 - foot
05:48 - left leg for example but if we step on
05:51 - it again
05:52 - you can see it keeps printing out let's
05:54 - kill the player so every single time i
05:55 - step
05:56 - on that part it is now running my
05:58 - function and yes i could have some code
06:00 - in here which kills the player
06:02 - if you really wanted to but you get the
06:04 - idea okay you may notice
06:06 - that when we wrote in the function name
06:08 - here when we went to call the function
06:10 - we didn't have any brackets and that's
06:12 - because
06:13 - when we are putting the function name in
06:16 - these brackets we can't pass
06:18 - any parameters to them but what happens
06:21 - is the event
06:22 - automatically passes some pro some
06:25 - arguments
06:26 - to the function uh with some data which
06:29 - it may have collected
06:30 - from the event so for example what part
06:32 - actually touched
06:33 - the brick and we'll get onto that a
06:35 - little bit later on but events
06:37 - fire every single time and action
06:39 - happens so in this case
06:40 - it fired 29 times not just once
06:43 - so don't think that you know just
06:45 - because an event has fired one time
06:47 - it's not going to fire anymore it can
06:49 - fire for as many times as it likes
06:52 - as long as the action keeps happening
06:55 - now this isn't the most common method
06:57 - of writing an event function because in
07:00 - this example we have
07:01 - predefined our function normally people
07:04 - will
07:05 - define their function inside the connect
07:08 - statement
07:08 - so let me just get rid of this function
07:10 - here and instead
07:12 - what i'm going to do is i'm going to
07:15 - remove kill player from the brackets
07:17 - but i'm going to just expand the lines
07:20 - here uh
07:20 - give a bit of a gap between the two
07:22 - brackets or parentheses here
07:24 - and then inside of here i can write a
07:26 - function this is an anonymous function
07:28 - it's a function without a name whenever
07:30 - we
07:31 - do an event function like this where we
07:33 - define it inside of the
07:34 - connect brackets we don't give it a name
07:37 - it's an
07:37 - anonymous function so we just put our
07:39 - function in here and then we can write
07:41 - some code such as
07:42 - use steps on the part okay
07:46 - now this will do the same thing it will
07:49 - print whenever
07:50 - we step on the part it will run this
07:52 - function the only difference
07:54 - is like i said there's no name to the
07:56 - function and this function
07:58 - we don't call it we just have to put
08:00 - function
08:01 - end and it will run as soon as
08:04 - you step on the part now the the
08:08 - the best way to set this up when you
08:10 - write it is like this okay so you have
08:11 - your connect
08:12 - brackets you put your function in here
08:14 - with your two brackets and then you end
08:16 - it
08:16 - with a closing bracket now this is this
08:18 - is like the this is a common practice
08:21 - how events are set up how event
08:23 - functions set up they're much
08:25 - quicker to write out they take up less
08:27 - lines and
08:28 - they're my preferred method in my
08:31 - opinion
08:31 - and just to show you if we run the game
08:34 - here it's going to
08:36 - uh it's going to do the exact same thing
08:38 - if we step on the part you see it says
08:39 - you stepped on the part
08:41 - so a simple way to remember how to write
08:43 - an event
08:44 - firstly you're referencing the part then
08:46 - you're getting the event which you want
08:48 - to use
08:49 - then you're connecting it to a function
08:52 - and then you put your code that you want
08:53 - to run within that function there
08:55 - now i said earlier about parameters and
08:57 - arguments so when an event
08:59 - fires often they will automatically send
09:02 - some information
09:03 - to our function as arguments such as the
09:06 - player who joined the game
09:07 - or the thing the object that touched our
09:10 - part
09:11 - now we can see these parameters in the
09:14 - object browser so if we go to our touch
09:15 - event here
09:16 - you can see inside these parentheses
09:18 - here it's got one
09:20 - parameter and that is the other part so
09:22 - the other part that will have touched
09:24 - our parts which we've got the event for
09:27 - so it sounds a little bit confusing
09:29 - but our parameter then we just give it a
09:31 - name
09:32 - so let's just say um the part
09:35 - that touched the brick okay i've made it
09:38 - a long
09:39 - um parameter name to help with the
09:41 - explanation so you can call your promise
09:43 - or whatever you like
09:44 - but like i said in the previous video
09:46 - with functions you have to get the order
09:48 - correct so
09:49 - the event is telling us the order so if
09:51 - we had um
09:53 - two parameters for example like in this
09:55 - one here
09:56 - ancestry changed we've got two uh
09:59 - parameters one for the child one for the
10:01 - parent
10:01 - so the child will come first the parent
10:04 - will come second so you'd have to
10:06 - write them in order so you'd have to
10:07 - give your names to your parameters in
10:09 - order so it could be
10:10 - the child the parents but if you got
10:12 - them the wrong one way around
10:14 - then you would you'd mix it up so we're
10:17 - going to use the other part
10:20 - that touch the brick and the event
10:23 - automatically passes the arguments to us
10:25 - so we don't have to worry about
10:26 - passing that argument to the parameter
10:28 - like we did in the previous video we'd
10:30 - have to worry about that
10:31 - the event is going to pass it to our
10:33 - function for us we're just putting our
10:35 - parameter in
10:36 - because that's what the um object
10:38 - browser has told us to do
10:40 - it's as if the script is calling the
10:42 - function for us and adds the arguments
10:44 - so we can access them in our function by
10:47 - adding these parameters in order
10:49 - so i could then print that the part that
10:51 - touch the brick dot name
10:53 - has touched the part okay and we
10:57 - play the game and step on the brick and
11:00 - you can say look
11:01 - right lower leg has touched the part so
11:04 - that would be
11:05 - this part of my body or right upper leg
11:08 - has touched the part so i can i can
11:09 - touch the brick at different with
11:11 - different parts of my body
11:12 - so it's printing that each time because
11:14 - every time the brick gets touched
11:16 - roblox is passing the part that touched
11:18 - the brick to my function
11:20 - and then we can use that to
11:23 - do things in our code so you know if a
11:25 - player joins the game
11:26 - we can use the player added function so
11:30 - if we go to
11:31 - um players game.players is a service
11:35 - which deals with players in the game
11:38 - here we go players
11:39 - and it's got an event called player
11:41 - added with it with a parameter
11:43 - of the player who joined the game and
11:44 - whenever it says instance that means
11:46 - it's an object
11:47 - so we know it's going to be an object in
11:49 - the game so we could say game
11:51 - dot players dot player added we're
11:53 - referencing the
11:54 - uh the service or the object we're then
11:56 - getting the event called player added
11:58 - and then we connect it to a function so
12:01 - let's write a function in here
12:03 - an anonymous function because it has no
12:04 - name just has brackets on the end of it
12:07 - and then we could have our parameter
12:09 - called player
12:10 - you can call it whatever you like so it
12:12 - could be called the player and then i
12:14 - could say
12:14 - print the player.name
12:18 - has joined the game and i say dot name
12:21 - because
12:21 - the player is an object it's going to be
12:23 - my player and so it will have a name
12:26 - property
12:26 - now let's join the game and straight
12:29 - away it should say
12:30 - alvin blocks has joined the game so i'm
12:32 - sure you can see the power
12:34 - of events they can detect when things
12:36 - happen in the game
12:37 - and we can run code to do things so for
12:39 - example you know
12:41 - a practical example if you wanted to add
12:43 - a leaderboard
12:44 - add some a cash value to a player
12:46 - whenever they join to show that their
12:48 - leaderboard
12:49 - you could do that whenever they join and
12:50 - you could use the player
12:52 - a parameter to access that individual
12:55 - player
12:56 - and to add values or currency or
12:59 - leaderboards
13:00 - to their player now it's possible to
13:02 - disconnect
13:03 - and have events inside events
13:06 - essentially nesting them
13:07 - but we will look at this in a future
13:09 - video you don't have to worry about
13:10 - those
13:11 - right now we need to learn a few other
13:12 - topics before we get into that but
13:14 - that'll be fine
13:15 - but it's where you define the event
13:17 - listener which matters so
13:19 - this is called an event listener because
13:21 - it's listening out waiting for the event
13:23 - to happen
13:24 - now if i was to add a wait 10 seconds
13:28 - here it would not detect that i joined
13:30 - the game
13:31 - because i would have joined the game
13:32 - before the event listener was set up
13:35 - you can see it hasn't printed out alvin
13:37 - blocks has joined the game that is
13:38 - because
13:40 - it will only start listening for new
13:42 - players joining the game
13:43 - or whatever the event is once it's been
13:46 - set up
13:47 - and we set it up after 10 seconds so
13:49 - it's missed
13:50 - me joining the game so that is why
13:53 - when you have a player added event you
13:55 - want to have at the top of your script
13:57 - because you want it to start listening
13:59 - when the script starts running anyway
14:02 - that's functions and events i hope this
14:04 - video was useful if it was
14:06 - drop a like don't forget to subscribe
14:08 - share it with someone you know
14:09 - and i'll see you in the next one it's
14:10 - been really fun making this video and
14:12 - we're gonna have a lot more fun
14:13 - with events in future videos because
14:15 - they are a game changer
14:17 - for building roblox games thanks for
14:19 - watching

Cleaned transcript:

welcome to your fourth roblox scripting tutorial in this video we're going to be looking at events so events detect when something happens in the game such as when a new player joins or when an object twitches apart when an action occurs that can trigger one of these events we say that the event is being fired now events are coded by roadblocks behind the scenes to detect whenever these actions happen so we don't have to worry about how the detection works or writing any code to deal with that what you do need to know though is how to run code when an event is fired because this is how we make our games interactive this is how we make code that kills a player when they step on a lava brick for example in the last video we looked at functions functions allow us to write code which won't execute straight away when the script starts running meaning we can execute it whenever we want later on in the script and when we set up an event in our scripts we provide it with a function and we tell the script that we want this function to run whenever a certain event is fired so any code that we want to execute so like i said in the example before we could write some code which um removes players health we can put that in a function and we can set it up to run that function whenever a player steps on this brick for example and we can use one of roblox's inbuilt events which they've already coded to detect when someone steps on this brick and then when they do that we can tell the script to run a function and we could have a function that will kill them by removing their health so this process is known as connecting the event to the function we're going to be telling the script what we want to do when the event fires now we don't know how to do this yet so i'm going to show you how to set up an event there's a lot of events in roblox there's a set list we can't just make up an event by ourselves well we can but that's a completely different video which we'll be getting onto later down the line but for now all objects in roblox as they have their own list of properties they also have their own list of events and to find that list we're going to go to the view tab and we're going to click on object browser now on the left side here we have a list of all of the different objects that are available to us in roblox and they're named by their class name now obviously we have a part in the workspace it's called test part but its class name is a part because it's still apart so we're gonna find our part and now on the right side we have a list of all of this all of this parts functions so a part can have functions we'll get onto that in a later video they are the pink icons they have properties all of these blue icons are the properties such as brick color can collide anchored for example but we also have these lightning bolts and these are our events now like i said these are created by roblox and there's only a set list of events so in this case we're going to be looking at the touched events now this event will trigger whenever a player steps on a part and we can set up this event to trigger a function when it happens so to set it up very easy we're going to be using this touched event so let's go to our script let's just delete this code because we're going to be doing some events and firstly like when we were looking at properties we firstly had to reference the object so in this case we're going to say game dot workspace dot test part okay we have now got our objects and we are ready to select the event which we want to trigger a function so we do a dot and you can see we've got our list of properties now if we scroll down through this list you can see we get to our events and we want to use the touched event so whenever somebody touches this part we are going to connect the event to a function we don't have a function right now so let's create a function let's just leave this here for now i know there's a red line underneath it but don't worry but let's create a function okay that is going to what should we do let's kill a player okay so we've given our function a name let's put in some brackets and let's add in the end here so now any code that goes inside this function will run whenever our event is fired because we're going to set up that connection in a minute so let's not worry about the code that goes in this function for now but imagine we've got our function complete with our code to kill the player we can now say colon connect and then we'll do a pair of brackets and then what we want to do is we want to put the name of our function in here so what we're saying is when a player steps on this part we're going to can we're connecting this event to this function and we're saying run this function whenever somebody steps on this part now if i was to put a print in here to say let's kill the player because we haven't got into oh if we just uh do some code to kill the player it's going to add a little bit more time so for now let's just do a print statement let's open up the output and let's join the game now if i step on this part you can see it says let's kill the player and you can see i step off and it stops printing okay you can see it's printed 10 times i'll get on to that in a later video that's because the event is registering for every single body part so it could be registering for my left foot right foot left leg for example but if we step on it again you can see it keeps printing out let's kill the player so every single time i step on that part it is now running my function and yes i could have some code in here which kills the player if you really wanted to but you get the idea okay you may notice that when we wrote in the function name here when we went to call the function we didn't have any brackets and that's because when we are putting the function name in these brackets we can't pass any parameters to them but what happens is the event automatically passes some pro some arguments to the function uh with some data which it may have collected from the event so for example what part actually touched the brick and we'll get onto that a little bit later on but events fire every single time and action happens so in this case it fired 29 times not just once so don't think that you know just because an event has fired one time it's not going to fire anymore it can fire for as many times as it likes as long as the action keeps happening now this isn't the most common method of writing an event function because in this example we have predefined our function normally people will define their function inside the connect statement so let me just get rid of this function here and instead what i'm going to do is i'm going to remove kill player from the brackets but i'm going to just expand the lines here uh give a bit of a gap between the two brackets or parentheses here and then inside of here i can write a function this is an anonymous function it's a function without a name whenever we do an event function like this where we define it inside of the connect brackets we don't give it a name it's an anonymous function so we just put our function in here and then we can write some code such as use steps on the part okay now this will do the same thing it will print whenever we step on the part it will run this function the only difference is like i said there's no name to the function and this function we don't call it we just have to put function end and it will run as soon as you step on the part now the the the best way to set this up when you write it is like this okay so you have your connect brackets you put your function in here with your two brackets and then you end it with a closing bracket now this is this is like the this is a common practice how events are set up how event functions set up they're much quicker to write out they take up less lines and they're my preferred method in my opinion and just to show you if we run the game here it's going to uh it's going to do the exact same thing if we step on the part you see it says you stepped on the part so a simple way to remember how to write an event firstly you're referencing the part then you're getting the event which you want to use then you're connecting it to a function and then you put your code that you want to run within that function there now i said earlier about parameters and arguments so when an event fires often they will automatically send some information to our function as arguments such as the player who joined the game or the thing the object that touched our part now we can see these parameters in the object browser so if we go to our touch event here you can see inside these parentheses here it's got one parameter and that is the other part so the other part that will have touched our parts which we've got the event for so it sounds a little bit confusing but our parameter then we just give it a name so let's just say um the part that touched the brick okay i've made it a long um parameter name to help with the explanation so you can call your promise or whatever you like but like i said in the previous video with functions you have to get the order correct so the event is telling us the order so if we had um two parameters for example like in this one here ancestry changed we've got two uh parameters one for the child one for the parent so the child will come first the parent will come second so you'd have to write them in order so you'd have to give your names to your parameters in order so it could be the child the parents but if you got them the wrong one way around then you would you'd mix it up so we're going to use the other part that touch the brick and the event automatically passes the arguments to us so we don't have to worry about passing that argument to the parameter like we did in the previous video we'd have to worry about that the event is going to pass it to our function for us we're just putting our parameter in because that's what the um object browser has told us to do it's as if the script is calling the function for us and adds the arguments so we can access them in our function by adding these parameters in order so i could then print that the part that touch the brick dot name has touched the part okay and we play the game and step on the brick and you can say look right lower leg has touched the part so that would be this part of my body or right upper leg has touched the part so i can i can touch the brick at different with different parts of my body so it's printing that each time because every time the brick gets touched roblox is passing the part that touched the brick to my function and then we can use that to do things in our code so you know if a player joins the game we can use the player added function so if we go to um players game.players is a service which deals with players in the game here we go players and it's got an event called player added with it with a parameter of the player who joined the game and whenever it says instance that means it's an object so we know it's going to be an object in the game so we could say game dot players dot player added we're referencing the uh the service or the object we're then getting the event called player added and then we connect it to a function so let's write a function in here an anonymous function because it has no name just has brackets on the end of it and then we could have our parameter called player you can call it whatever you like so it could be called the player and then i could say print the player.name has joined the game and i say dot name because the player is an object it's going to be my player and so it will have a name property now let's join the game and straight away it should say alvin blocks has joined the game so i'm sure you can see the power of events they can detect when things happen in the game and we can run code to do things so for example you know a practical example if you wanted to add a leaderboard add some a cash value to a player whenever they join to show that their leaderboard you could do that whenever they join and you could use the player a parameter to access that individual player and to add values or currency or leaderboards to their player now it's possible to disconnect and have events inside events essentially nesting them but we will look at this in a future video you don't have to worry about those right now we need to learn a few other topics before we get into that but that'll be fine but it's where you define the event listener which matters so this is called an event listener because it's listening out waiting for the event to happen now if i was to add a wait 10 seconds here it would not detect that i joined the game because i would have joined the game before the event listener was set up you can see it hasn't printed out alvin blocks has joined the game that is because it will only start listening for new players joining the game or whatever the event is once it's been set up and we set it up after 10 seconds so it's missed me joining the game so that is why when you have a player added event you want to have at the top of your script because you want it to start listening when the script starts running anyway that's functions and events i hope this video was useful if it was drop a like don't forget to subscribe share it with someone you know and i'll see you in the next one it's been really fun making this video and we're gonna have a lot more fun with events in future videos because they are a game changer for building roblox games thanks for watching
