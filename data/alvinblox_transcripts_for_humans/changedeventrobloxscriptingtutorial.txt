With timestamps:

00:00 - sometimes in Roblox we want to detect
00:03 - when an object in the game changes and
00:06 - there's a multitude of reasons why you
00:07 - might want to do
00:09 - this perhaps you want to detect when a
00:11 - player's Health changes so you can
00:13 - update your custom health bar or if
00:16 - perhaps the Player's leader stats change
00:19 - you might want to save that to your data
00:20 - store okay these are just some examples
00:23 - they're not necessarily the the main
00:25 - uses but I just want to teach you today
00:27 - how you can detect when an instant
00:30 - AKA and object in Roblox changes even if
00:34 - one of its you know most hidden
00:36 - properties changes we will know about it
00:39 - so it's fairly straightforward you just
00:41 - need to firstly get an instance we'll
00:43 - just use this folder for example in the
00:45 - workspace you say dot changed and you
00:49 - will see it says fired immediately after
00:51 - a property okay it's just gone off the
00:53 - screen there after a property of the
00:55 - instance changes so whenever you change
00:57 - a property or if the game changes it you
01:00 - know if something happens maybe it moves
01:02 - and the position property changes
01:04 - perhaps you change its name perhaps some
01:05 - other script changes it we will know
01:07 - about it so you'll connect it to a
01:10 - function and then in this function we
01:13 - also have the name of the property
01:16 - that's what Roblox hands to us and we
01:19 - can print
01:20 - out name of property and we can
01:23 - concatenate this to some text to say has
01:27 - changed and let's run this let's see
01:29 - what happen
01:30 - happens so nothing happens straight away
01:34 - that's because nothing has changed in
01:35 - the folder but let's change the name of
01:37 - the folder and it will say name has
01:40 - changed okay let's move the folder to a
01:44 - different location let's put it into
01:46 - server script service let's change the
01:48 - parent property oh look you can see the
01:50 - parent has changed so that is how it
01:53 - works and now a folder doesn't have that
01:55 - many properties so it's not the best uh
01:58 - object to use in order to to explain
02:00 - this to you but let's create a part and
02:03 - let's change our script to instead use
02:06 - that part and we'll show you a few more
02:09 - so don't worry about this one this is a
02:12 - property to do with the the network that
02:14 - Roblox controls but let's move this part
02:17 - around and you can see
02:19 - suddenly all of the time nearly every
02:21 - single frame is printing out orientation
02:24 - has changed rotation has changed
02:26 - position has changed C frame has changed
02:28 - and that is because we're moving the
02:29 - object
02:30 - now let's let go and you can see it
02:32 - suddenly stops let's change the color
02:37 - and every time we change the color you
02:38 - can see it's printing every frame to say
02:41 - we have a new brick color or new color
02:43 - so really really powerful because you
02:45 - can detect when things change in the
02:47 - game and again this applies to every
02:51 - single property and sometimes you don't
02:53 - want to attach a listener to every
02:56 - single property because it is a little
02:58 - bit over the top right if you only want
03:00 - to listen out for when one specific
03:03 - property changes why would you want to
03:05 - listen for the others all it's going to
03:06 - do is take up more processing power in
03:09 - your game okay albeit a slight amount
03:12 - but still for the best practice if you
03:14 - only want to track one specific property
03:17 - rather than saying changed you can say
03:20 - Gameworks space. part obviously to get
03:22 - the the thing you want to reference uh
03:25 - colon get property changed signal and in
03:29 - these brackets you want to give the name
03:30 - of the property so if we want anchored
03:33 - for example then we would just say
03:35 - anchored and then this function will
03:38 - return an event okay this is our event
03:41 - we've got it here because we chose the
03:44 - changed event but what this is going to
03:47 - do is it's going to create a custom
03:49 - event for us for when this specific
03:51 - property and this one only changes and
03:54 - it will return it so we can now imagine
03:56 - we've got our event so like we do with
03:59 - other events in roblo we can just
04:01 - connect it to a function nothing to pass
04:04 - here because we obviously know the name
04:06 - of the property if this is firing it's
04:08 - got to be the anchored property and so
04:10 - then we can print the anchored property
04:15 - has been changed now let's remove the
04:18 - original changed event we no longer need
04:20 - that because we're using get property
04:22 - changed signal and let's test this out
04:25 - again so what we should expect to see is
04:27 - when we move the part nothing should
04:29 - happen when we change the name nothing
04:33 - should happen right but let's change the
04:36 - anchored property and watch the output
04:38 - to see what happens it's printing out
04:41 - that the anchored property has been
04:42 - changed now where would you use get
04:45 - property change signal okay most of the
04:47 - time this is used for values okay and
04:50 - it's been quite common in Roblox that
04:52 - people will well game developers will
04:55 - create a value for the status bar okay
04:58 - and it will usually go in rep licated
05:00 - storage and it will display text which
05:02 - will appear on player screens such as
05:05 - intermission or round is starting or
05:07 - round over and typically you set this
05:10 - value on the
05:11 - server okay and because the server has
05:14 - the authority to change it you don't
05:15 - want anyone else to be able to change it
05:17 - because why would you the game is
05:19 - controlled on the server and you know
05:21 - you could control it to say intermission
05:23 - you know perhaps 5 seconds later you'd
05:25 - want it to say um round starting this is
05:30 - a very very top level um implementation
05:33 - not not detailed in any regard but you
05:36 - get the idea right and what what would
05:39 - happen is then on the client where the
05:42 - GUI is Right you'd have um you'd have a
05:45 - text label and you'd have a script in
05:48 - there which would listen out to see when
05:51 - the value property of this status string
05:56 - value changes and when it does change
05:58 - well we want to to update our little
06:00 - status bar over here and so what you do
06:03 - is you would say game. replicated
06:05 - storage do status get property changed
06:09 - signal because we're only interested in
06:11 - when the value changes and then we'd
06:14 - connect to a function and when it
06:17 - updates we'd say script. parent. text
06:20 - equals game. replicated storage. status.
06:24 - value okay and yes you would want to set
06:28 - it when the player first joins to
06:30 - whatever the current value is um but
06:33 - what you would then see is when we just
06:35 - join the game we'll just set this to
06:37 - have no text to begin with click on play
06:40 - here you'll notice every time we update
06:43 - it from the
06:44 - server which should be round about now
06:47 - it updates on the client because the get
06:50 - property changed signal is firing
06:52 - because this value is changing so that
06:56 - is how you make a status bar I bet you
06:58 - weren't expecting that um in a changed
07:01 - and get property changed signal tutorial
07:05 - okay you've got three for the price of
07:06 - one there you've got changed get
07:08 - property change signal and also a status
07:10 - bar thrown in so hope you found that
07:12 - useful if you did please leave a like uh
07:14 - subscribe for more tutorials let me know
07:16 - in the comments as well what other
07:18 - videos you'd like to see and I'll see
07:21 - you in the next one thank you for
07:22 - watching

Cleaned transcript:

sometimes in Roblox we want to detect when an object in the game changes and there's a multitude of reasons why you might want to do this perhaps you want to detect when a player's Health changes so you can update your custom health bar or if perhaps the Player's leader stats change you might want to save that to your data store okay these are just some examples they're not necessarily the the main uses but I just want to teach you today how you can detect when an instant AKA and object in Roblox changes even if one of its you know most hidden properties changes we will know about it so it's fairly straightforward you just need to firstly get an instance we'll just use this folder for example in the workspace you say dot changed and you will see it says fired immediately after a property okay it's just gone off the screen there after a property of the instance changes so whenever you change a property or if the game changes it you know if something happens maybe it moves and the position property changes perhaps you change its name perhaps some other script changes it we will know about it so you'll connect it to a function and then in this function we also have the name of the property that's what Roblox hands to us and we can print out name of property and we can concatenate this to some text to say has changed and let's run this let's see what happen happens so nothing happens straight away that's because nothing has changed in the folder but let's change the name of the folder and it will say name has changed okay let's move the folder to a different location let's put it into server script service let's change the parent property oh look you can see the parent has changed so that is how it works and now a folder doesn't have that many properties so it's not the best uh object to use in order to to explain this to you but let's create a part and let's change our script to instead use that part and we'll show you a few more so don't worry about this one this is a property to do with the the network that Roblox controls but let's move this part around and you can see suddenly all of the time nearly every single frame is printing out orientation has changed rotation has changed position has changed C frame has changed and that is because we're moving the object now let's let go and you can see it suddenly stops let's change the color and every time we change the color you can see it's printing every frame to say we have a new brick color or new color so really really powerful because you can detect when things change in the game and again this applies to every single property and sometimes you don't want to attach a listener to every single property because it is a little bit over the top right if you only want to listen out for when one specific property changes why would you want to listen for the others all it's going to do is take up more processing power in your game okay albeit a slight amount but still for the best practice if you only want to track one specific property rather than saying changed you can say Gameworks space. part obviously to get the the thing you want to reference uh colon get property changed signal and in these brackets you want to give the name of the property so if we want anchored for example then we would just say anchored and then this function will return an event okay this is our event we've got it here because we chose the changed event but what this is going to do is it's going to create a custom event for us for when this specific property and this one only changes and it will return it so we can now imagine we've got our event so like we do with other events in roblo we can just connect it to a function nothing to pass here because we obviously know the name of the property if this is firing it's got to be the anchored property and so then we can print the anchored property has been changed now let's remove the original changed event we no longer need that because we're using get property changed signal and let's test this out again so what we should expect to see is when we move the part nothing should happen when we change the name nothing should happen right but let's change the anchored property and watch the output to see what happens it's printing out that the anchored property has been changed now where would you use get property change signal okay most of the time this is used for values okay and it's been quite common in Roblox that people will well game developers will create a value for the status bar okay and it will usually go in rep licated storage and it will display text which will appear on player screens such as intermission or round is starting or round over and typically you set this value on the server okay and because the server has the authority to change it you don't want anyone else to be able to change it because why would you the game is controlled on the server and you know you could control it to say intermission you know perhaps 5 seconds later you'd want it to say um round starting this is a very very top level um implementation not not detailed in any regard but you get the idea right and what what would happen is then on the client where the GUI is Right you'd have um you'd have a text label and you'd have a script in there which would listen out to see when the value property of this status string value changes and when it does change well we want to to update our little status bar over here and so what you do is you would say game. replicated storage do status get property changed signal because we're only interested in when the value changes and then we'd connect to a function and when it updates we'd say script. parent. text equals game. replicated storage. status. value okay and yes you would want to set it when the player first joins to whatever the current value is um but what you would then see is when we just join the game we'll just set this to have no text to begin with click on play here you'll notice every time we update it from the server which should be round about now it updates on the client because the get property changed signal is firing because this value is changing so that is how you make a status bar I bet you weren't expecting that um in a changed and get property changed signal tutorial okay you've got three for the price of one there you've got changed get property change signal and also a status bar thrown in so hope you found that useful if you did please leave a like uh subscribe for more tutorials let me know in the comments as well what other videos you'd like to see and I'll see you in the next one thank you for watching
