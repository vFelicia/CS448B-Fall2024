With timestamps:

00:00 - so a developer product can be purchased
00:02 - over and over again unlike a Game Pass
00:05 - which can only be purchased once to
00:08 - create one you firstly have to publish
00:10 - your game so go to file publish to
00:12 - Roblox as or press control shift p to
00:16 - get that published and then if you go to
00:18 - game settings at the top here you go to
00:21 - monetization you can then see this tab
00:24 - here for developer products now you can
00:26 - also access your developer products at
00:29 - create. roblox.com if you select your
00:31 - game there's a tab on the left side
00:33 - which lets you do the exact same thing
00:35 - as what we're going to do here so I'm
00:36 - going to create a developer product I'm
00:38 - going to click on the three dots going
00:40 - to click on edit and you can give it a
00:42 - name so we'll just call it test product
00:44 - and we'll set a price of 100 Roo once
00:48 - we've done this we can go back to game
00:50 - settings scroll down and you see we have
00:52 - a product ID this identifies our
00:55 - specific developer product so we're
00:57 - going to copy that using the three dots
01:00 - and clicking copy ID to clipboard
01:02 - alternatively if you created yours on
01:04 - the website you'll find the ID somewhere
01:07 - there probably be in the in the URL or
01:09 - listed on the page and then in a local
01:12 - script somewhere on the client so it
01:14 - could be in the start of GUI for example
01:16 - we want to prompt the user to buy our
01:19 - product by saying Marketplace service
01:22 - prompt product purchase and we're using
01:25 - this specific function because it is for
01:27 - developer products we specify the player
01:30 - that we want to prompt this to since
01:32 - it's on the client it's going to be the
01:34 - local player and then we also pass the
01:36 - product ID and once we've done this when
01:39 - we play our game you'll see that we get
01:41 - prompted to purchase the developer
01:43 - product now this is in studio therefore
01:46 - we're not going to be charged any roo if
01:48 - we purchase this but the same thing is
01:50 - going to happen as if we were to
01:51 - purchase this in a running game now
01:54 - perhaps you want to prompt the player to
01:57 - purchase a developer product when they
01:59 - click on a button very simple all you
02:01 - need to do is create a screen GUI have a
02:04 - text button or an image button and then
02:07 - you could have your code so that when
02:11 - the button is clicked using the mouse
02:13 - button one click event we do the same
02:15 - thing here we would just prompt them to
02:18 - buy the product so we've just moved this
02:21 - code into an event so it will run rather
02:24 - than running when we first join the game
02:26 - it will run when we click on the button
02:28 - so that is the prompting side done now
02:32 - that we've bought the developer product
02:33 - how do we actually give the user what
02:36 - they purchased now of course there are
02:37 - loads of different things you can do
02:39 - with developer products I'm not here to
02:41 - show you how to make every single
02:42 - developer product Under the Sun however
02:45 - I will show you how to process a payment
02:49 - right once the payment's gone through
02:50 - how do you give them the goods the
02:52 - deliverables and to do that we're going
02:54 - to switch to a server script now we've
02:56 - prompted the user to buy the product on
02:58 - the client that's all we need to do over
03:01 - there but we actually want to now
03:02 - process it on the server and it's always
03:04 - good to handle this stuff on the server
03:06 - because it's authoritative it means the
03:08 - server has full control can't be touched
03:11 - by exploiters so we do all of this on
03:13 - the server when we're processing the
03:16 - payment and to do that we will say
03:17 - Marketplace service. process receipts
03:21 - and this will allow us to call a
03:23 - function whenever a developer product
03:25 - has been purchased and then in that
03:27 - function we can work out which spefic
03:29 - specific products has been purchased and
03:31 - we can run some specific code to execute
03:36 - the transaction and to give the
03:37 - deliverables for that specific product
03:40 - so Marketplace service. process receipt
03:44 - equals
03:46 - function and as part of this function it
03:49 - will take an argument for the details of
03:53 - the developer product transaction so we
03:55 - can call this whatever you like but as
03:57 - per the Roblox docs I'm just going to
03:59 - call this receipt info okay and then
04:03 - this receipt info we it will contain all
04:06 - of the information relating to the
04:08 - transaction that just happened so it
04:11 - will contain the user ID of the player
04:14 - who purchased the developer product so
04:16 - we can identify them and it will also
04:18 - contain the developer product ID as well
04:21 - and that's really all the information
04:22 - that we need because we now know which
04:24 - user bought the product and which
04:27 - product did they
04:28 - buy now that's not it there's also some
04:31 - other information that gets sent to this
04:33 - process receipt function when we buy a
04:36 - developer product you've got the
04:37 - currency spent which is the price
04:40 - currency type the place ID where the
04:42 - purchase was made the player ID the
04:45 - product ID and the purchase ID so we
04:48 - want to get the user ID and the product
04:52 - ID so we'll create a variable for the
04:54 - player who the player ID and that will
04:56 - be receip info. player idid and we also
05:00 - want the product ID which is going to be
05:02 - receip info. product ID and I just
05:05 - printed this to the output to show you
05:07 - all of this information and then what
05:09 - you can do is you can say if product ID
05:12 - equals equals and we'll just get our
05:14 - product ID that we made a couple of
05:16 - minutes ago just put it in there we now
05:20 - can put any code in here inside this if
05:22 - statement and that will run if our
05:26 - specific product has been purchased so
05:28 - we can say test product has been
05:30 - purchased now let's just head back in
05:34 - and we will buy our developer product
05:36 - again this is going to call the process
05:39 - receipt function and it's printed out
05:41 - that the test product has been purchased
05:44 - now if we were to purchase a different
05:46 - developer product this would not print
05:48 - because this is only going to print if
05:50 - our specific product has been
05:55 - purchased and then you'll put your code
05:57 - in here to give the player what they've
06:01 - bought this could be for example walk
06:04 - speed that might last for a couple of
06:06 - seconds it might be additional currency
06:08 - uh we will show you some examples very
06:11 - soon on how to do that but we'll just
06:13 - assume we've we've given them all of
06:15 - their stuff that they've purchased
06:17 - that's all good we now need to
06:20 - return a value from the process receipt
06:24 - to tell Roblox that it's all good the
06:26 - the trans transaction has successfully
06:28 - completed we've given them everything
06:30 - they need it's it's all good so we can
06:33 - just return enum do product purchase
06:37 - decision dot purchase granted and that
06:40 - just means we've given them everything
06:42 - they've bought and we don't have to
06:44 - worry about it anymore the reason this
06:46 - exists is if for some reason the
06:48 - purchase didn't go through maybe there
06:50 - was a Roblox uh issue error that
06:53 - prevented us from processing the
06:55 - transaction we would return not
06:57 - processed yet and then that would mean
06:59 - the next time they join the game we
07:02 - could um make sure that that goes
07:04 - through and they are given what they
07:05 - paid for but if we return purchase
07:09 - granted it means yep all good they've
07:11 - they've got what they've purchased you
07:12 - don't have to worry about it anymore um
07:14 - so it's like a status code so what we
07:17 - will then do is we need to make sure
07:20 - that the player is actually in the game
07:22 - right because maybe they left just as
07:24 - they bought the product so we can't give
07:26 - them their stuff right that would be a
07:29 - reason why the transaction might not go
07:33 - through because if they've left the game
07:34 - we can't get their character anymore so
07:36 - we will
07:37 - firstly look to see if the player's in
07:39 - the game by saying game. players get
07:42 - player by user ID and we'll put the
07:45 - player ID in there and we say okay if
07:48 - player then and then we can Well what
07:52 - we'll do is we'll put that in here there
07:55 - we go we'll put that in here
07:58 - because perhaps we need to firstly get
08:00 - the player if we want to give them walk
08:02 - speed for example and so if the player
08:05 - exists then great we'll have the code
08:08 - that adjusts their walk speed or adjusts
08:10 - their currency however if the player
08:12 - isn't there then let's
08:14 - return not processed yet because
08:17 - obviously we can't process what they've
08:19 - purchased um and I mean it's most likely
08:23 - that you're going to need the player to
08:24 - exist anyway right to give any of their
08:27 - benefits
08:29 - that is pretty much it that is how you
08:31 - process a developer product but this
08:33 - could get quite messy because imagine we
08:36 - had 10 different developer products we'd
08:38 - have to start doing loads of else ifs
08:41 - like this and we'd have to keep copying
08:43 - and pasting the same stuff here so I'm
08:45 - going to show you a better way of doing
08:47 - it pretty much how they do it on the
08:48 - Roblox documentations so rather than
08:52 - having our code here let's just put it
08:55 - at the bottom and just forget about it
08:56 - for a second what we can do is we can
08:58 - actually have have a table of our
09:02 - products and then for every single
09:04 - product we can index it in our table
09:08 - like this and we can set it to be a
09:12 - function and then we can have an
09:15 - argument for the player that bought it
09:18 - and we can put our code into this
09:21 - function and then we can return true or
09:24 - false depending on whether it went
09:27 - through just like this
09:30 - so if the player exists we give them
09:31 - what they purchased we return true to
09:35 - show that everything went well otherwise
09:37 - if the player doesn't exist let's return
09:39 - false and you can do this for every
09:41 - product that you have you know you might
09:43 - have three products you can have three
09:44 - different functions and in this function
09:46 - you might give them their walk speed in
09:48 - this function you might give them even
09:49 - more walk speed in this function you
09:51 - might give them 100 cash so all of your
09:53 - handling is done in this function
09:55 - because you've got the player and you
09:56 - know what the product ID is so you can
09:59 - do all of that stuff up there and then
10:01 - rather than having this if statement
10:03 - that checks the product ID and you might
10:06 - have to have three or four of them if
10:07 - you have multiple IDs we can just get
10:09 - the function from this table by passing
10:12 - in the ID so you could say products if
10:17 - products product ID then because this
10:21 - value is going to be a function we can
10:23 - just call that
10:25 - function by having a pair of brackets on
10:27 - the end or parentheses and we put the
10:30 - player object that we've just gotten via
10:33 - get player by user ID as the argument as
10:36 - the parameter to this function and then
10:38 - we'll get the result which gets returned
10:41 - because it will either return true or
10:42 - return false and then we can say if
10:45 - result then return enum do product
10:49 - purchase decision purchase granted else
10:52 - return enum do product purchase decision
10:56 - do notprocessed yet
10:59 - and that will mean that we no longer
11:01 - have to have loads of code in in this
11:03 - function whenever we want to add a new
11:05 - developer product we just add a new
11:07 - entry to our table like this and we
11:10 - paste in the ID we have the code that
11:12 - gives the product we're good to go so
11:15 - let me show you how to actually process
11:18 - some developer
11:19 - products so for example if the player
11:22 - has bought 100 cach we could say player.
11:26 - leer stats. C.V Value Plus equals 100
11:30 - and this would be for 100 cash if you
11:32 - then had a product for a th000 cash you
11:35 - would simply make another entry into the
11:37 - table and change the value here
11:39 - accordingly now we don't have a leader
11:41 - stats so I'm going to pause the video
11:43 - and set one up for the purpose of this
11:46 - video okay so I just created my
11:48 - leaderboard very very simple and I'm
11:51 - going to buy my test product and if you
11:54 - watch the value here it is increased by
11:56 - 100 and that's because and I'll just buy
11:59 - again just to show you now it's 200 and
12:01 - that's because when we buy the developer
12:03 - product the process receipt function on
12:05 - the server gets called we look up the
12:09 - product ID that we've created here uh we
12:12 - look up the function for that product ID
12:14 - that we've put into our products table
12:16 - and obviously it exists so we then call
12:19 - that function we pass the player that
12:21 - bought it to the function and then the
12:24 - player exists obviously so we increment
12:27 - that cash value by 100 and we return
12:29 - true to show that the purchase went
12:32 - through now let me show you how you can
12:34 - make some changes to the player's
12:36 - character for example you might want to
12:38 - give them speed for 20 seconds well you
12:41 - can get their character by saying
12:42 - player. character and you might want to
12:45 - check that it firstly exists like this
12:47 - if it does you can then say player.
12:49 - character. humanoid walkspeed equals 50
12:53 - and then if you want it to wear off
12:54 - after 20 seconds you can do a task.
12:57 - delay uh uh and you could
13:01 - say 20 seconds function player.
13:05 - character. humanoid walkspeed equals 16
13:09 - and that will set it back to
13:12 - default now the task. delay um creates a
13:16 - separate thread so that it doesn't yield
13:19 - this function it just does it in the
13:21 - background and after 5 Seconds it will
13:23 - run this function so it will uh reset
13:26 - the player character so walk speed back
13:29 - to 16 after 5 seconds but it won't yield
13:31 - the rest of the function from returning
13:33 - so let me show this to you if I go and
13:35 - purchase the developer product you see
13:38 - I'm walking at normal speed right now I
13:40 - purchase it suddenly I'm walking fast
13:42 - and then after the 5 seconds are up I go
13:44 - back to normal speed and if I want to I
13:47 - can purchase it again because it's a
13:49 - developer product and it can be
13:50 - purchased over and over again so that is
13:53 - how to create developer products on
13:55 - Roblox I hope you found this uh tutorial
13:58 - useful if if you did please leave a
14:00 - thumbs up subscribe let me know if you
14:02 - have any more videos you'd like me to
14:03 - make and I'll see you in the next one
14:05 - thanks for watching

Cleaned transcript:

so a developer product can be purchased over and over again unlike a Game Pass which can only be purchased once to create one you firstly have to publish your game so go to file publish to Roblox as or press control shift p to get that published and then if you go to game settings at the top here you go to monetization you can then see this tab here for developer products now you can also access your developer products at create. roblox.com if you select your game there's a tab on the left side which lets you do the exact same thing as what we're going to do here so I'm going to create a developer product I'm going to click on the three dots going to click on edit and you can give it a name so we'll just call it test product and we'll set a price of 100 Roo once we've done this we can go back to game settings scroll down and you see we have a product ID this identifies our specific developer product so we're going to copy that using the three dots and clicking copy ID to clipboard alternatively if you created yours on the website you'll find the ID somewhere there probably be in the in the URL or listed on the page and then in a local script somewhere on the client so it could be in the start of GUI for example we want to prompt the user to buy our product by saying Marketplace service prompt product purchase and we're using this specific function because it is for developer products we specify the player that we want to prompt this to since it's on the client it's going to be the local player and then we also pass the product ID and once we've done this when we play our game you'll see that we get prompted to purchase the developer product now this is in studio therefore we're not going to be charged any roo if we purchase this but the same thing is going to happen as if we were to purchase this in a running game now perhaps you want to prompt the player to purchase a developer product when they click on a button very simple all you need to do is create a screen GUI have a text button or an image button and then you could have your code so that when the button is clicked using the mouse button one click event we do the same thing here we would just prompt them to buy the product so we've just moved this code into an event so it will run rather than running when we first join the game it will run when we click on the button so that is the prompting side done now that we've bought the developer product how do we actually give the user what they purchased now of course there are loads of different things you can do with developer products I'm not here to show you how to make every single developer product Under the Sun however I will show you how to process a payment right once the payment's gone through how do you give them the goods the deliverables and to do that we're going to switch to a server script now we've prompted the user to buy the product on the client that's all we need to do over there but we actually want to now process it on the server and it's always good to handle this stuff on the server because it's authoritative it means the server has full control can't be touched by exploiters so we do all of this on the server when we're processing the payment and to do that we will say Marketplace service. process receipts and this will allow us to call a function whenever a developer product has been purchased and then in that function we can work out which spefic specific products has been purchased and we can run some specific code to execute the transaction and to give the deliverables for that specific product so Marketplace service. process receipt equals function and as part of this function it will take an argument for the details of the developer product transaction so we can call this whatever you like but as per the Roblox docs I'm just going to call this receipt info okay and then this receipt info we it will contain all of the information relating to the transaction that just happened so it will contain the user ID of the player who purchased the developer product so we can identify them and it will also contain the developer product ID as well and that's really all the information that we need because we now know which user bought the product and which product did they buy now that's not it there's also some other information that gets sent to this process receipt function when we buy a developer product you've got the currency spent which is the price currency type the place ID where the purchase was made the player ID the product ID and the purchase ID so we want to get the user ID and the product ID so we'll create a variable for the player who the player ID and that will be receip info. player idid and we also want the product ID which is going to be receip info. product ID and I just printed this to the output to show you all of this information and then what you can do is you can say if product ID equals equals and we'll just get our product ID that we made a couple of minutes ago just put it in there we now can put any code in here inside this if statement and that will run if our specific product has been purchased so we can say test product has been purchased now let's just head back in and we will buy our developer product again this is going to call the process receipt function and it's printed out that the test product has been purchased now if we were to purchase a different developer product this would not print because this is only going to print if our specific product has been purchased and then you'll put your code in here to give the player what they've bought this could be for example walk speed that might last for a couple of seconds it might be additional currency uh we will show you some examples very soon on how to do that but we'll just assume we've we've given them all of their stuff that they've purchased that's all good we now need to return a value from the process receipt to tell Roblox that it's all good the the trans transaction has successfully completed we've given them everything they need it's it's all good so we can just return enum do product purchase decision dot purchase granted and that just means we've given them everything they've bought and we don't have to worry about it anymore the reason this exists is if for some reason the purchase didn't go through maybe there was a Roblox uh issue error that prevented us from processing the transaction we would return not processed yet and then that would mean the next time they join the game we could um make sure that that goes through and they are given what they paid for but if we return purchase granted it means yep all good they've they've got what they've purchased you don't have to worry about it anymore um so it's like a status code so what we will then do is we need to make sure that the player is actually in the game right because maybe they left just as they bought the product so we can't give them their stuff right that would be a reason why the transaction might not go through because if they've left the game we can't get their character anymore so we will firstly look to see if the player's in the game by saying game. players get player by user ID and we'll put the player ID in there and we say okay if player then and then we can Well what we'll do is we'll put that in here there we go we'll put that in here because perhaps we need to firstly get the player if we want to give them walk speed for example and so if the player exists then great we'll have the code that adjusts their walk speed or adjusts their currency however if the player isn't there then let's return not processed yet because obviously we can't process what they've purchased um and I mean it's most likely that you're going to need the player to exist anyway right to give any of their benefits that is pretty much it that is how you process a developer product but this could get quite messy because imagine we had 10 different developer products we'd have to start doing loads of else ifs like this and we'd have to keep copying and pasting the same stuff here so I'm going to show you a better way of doing it pretty much how they do it on the Roblox documentations so rather than having our code here let's just put it at the bottom and just forget about it for a second what we can do is we can actually have have a table of our products and then for every single product we can index it in our table like this and we can set it to be a function and then we can have an argument for the player that bought it and we can put our code into this function and then we can return true or false depending on whether it went through just like this so if the player exists we give them what they purchased we return true to show that everything went well otherwise if the player doesn't exist let's return false and you can do this for every product that you have you know you might have three products you can have three different functions and in this function you might give them their walk speed in this function you might give them even more walk speed in this function you might give them 100 cash so all of your handling is done in this function because you've got the player and you know what the product ID is so you can do all of that stuff up there and then rather than having this if statement that checks the product ID and you might have to have three or four of them if you have multiple IDs we can just get the function from this table by passing in the ID so you could say products if products product ID then because this value is going to be a function we can just call that function by having a pair of brackets on the end or parentheses and we put the player object that we've just gotten via get player by user ID as the argument as the parameter to this function and then we'll get the result which gets returned because it will either return true or return false and then we can say if result then return enum do product purchase decision purchase granted else return enum do product purchase decision do notprocessed yet and that will mean that we no longer have to have loads of code in in this function whenever we want to add a new developer product we just add a new entry to our table like this and we paste in the ID we have the code that gives the product we're good to go so let me show you how to actually process some developer products so for example if the player has bought 100 cach we could say player. leer stats. C.V Value Plus equals 100 and this would be for 100 cash if you then had a product for a th000 cash you would simply make another entry into the table and change the value here accordingly now we don't have a leader stats so I'm going to pause the video and set one up for the purpose of this video okay so I just created my leaderboard very very simple and I'm going to buy my test product and if you watch the value here it is increased by 100 and that's because and I'll just buy again just to show you now it's 200 and that's because when we buy the developer product the process receipt function on the server gets called we look up the product ID that we've created here uh we look up the function for that product ID that we've put into our products table and obviously it exists so we then call that function we pass the player that bought it to the function and then the player exists obviously so we increment that cash value by 100 and we return true to show that the purchase went through now let me show you how you can make some changes to the player's character for example you might want to give them speed for 20 seconds well you can get their character by saying player. character and you might want to check that it firstly exists like this if it does you can then say player. character. humanoid walkspeed equals 50 and then if you want it to wear off after 20 seconds you can do a task. delay uh uh and you could say 20 seconds function player. character. humanoid walkspeed equals 16 and that will set it back to default now the task. delay um creates a separate thread so that it doesn't yield this function it just does it in the background and after 5 Seconds it will run this function so it will uh reset the player character so walk speed back to 16 after 5 seconds but it won't yield the rest of the function from returning so let me show this to you if I go and purchase the developer product you see I'm walking at normal speed right now I purchase it suddenly I'm walking fast and then after the 5 seconds are up I go back to normal speed and if I want to I can purchase it again because it's a developer product and it can be purchased over and over again so that is how to create developer products on Roblox I hope you found this uh tutorial useful if if you did please leave a thumbs up subscribe let me know if you have any more videos you'd like me to make and I'll see you in the next one thanks for watching
