With timestamps:

00:00 - everyone Arvin blocks here with episode
00:02 - number 19 of the scripting series today
00:05 - we're gonna be looking at services now
00:08 - I'll be honest I couldn't really think
00:10 - of a good explanation for services
00:12 - because they are quite that they're easy
00:16 - to understand but just hard to explain
00:19 - so I went online did a little bit of
00:21 - research before I recorded the video try
00:24 - to find as good an explanation as I
00:27 - could find and I came to the roblox
00:29 - fandom wiki site and they've got a
00:33 - little bit of explanation about it but
00:35 - I've only got a paragraph but they say
00:37 - that a service is an object that
00:41 - contains built in properties built in
00:45 - functions events and and that's what a
00:48 - service is it contains properties
00:51 - functions and events and you may be
00:55 - thinking well that makes no sense we've
00:58 - covered events we've covered functions
00:59 - we've covered properties
01:01 - why does a service even need properties
01:04 - I mean I don't even know what a service
01:05 - is yet well you probably do know what a
01:09 - services but you just actually not
01:12 - realized that is a service so we've said
01:16 - that it will have properties yeah so
01:20 - we've got properties it will have
01:21 - functions okay
01:23 - and it will have events as well so
01:26 - events which will trigger when something
01:29 - happens so the event will be looking out
01:31 - waiting for something to happen the
01:33 - functions will you know can be we can
01:37 - use functions or methods on this service
01:39 - to help us do things so for example an
01:43 - example could be destroy that's a
01:47 - function like we learnt in the inbuilt
01:49 - functions video although it's not
01:51 - actually a part of a service that's just
01:54 - a function that we can use on any roblox
01:56 - objects but I do recommend you give the
01:59 - inbuilt functions a video a watch so my
02:03 - channel episode number 9 it will just
02:06 - give you a quick introduction to inbuilt
02:08 - functions
02:10 - and what they're useful for so you
02:11 - should be hot on that but a service is
02:15 - actually these things here in there in
02:18 - the Explorer the things at the very top
02:21 - here so we don't with the things where
02:23 - we don't click arrows on the things that
02:25 - have their own arrows which have things
02:26 - inside these things at the very top
02:28 - level our services so we look at the
02:32 - workspace here the workspace is a
02:34 - service that has properties so you know
02:37 - things like whether it's filtering it
02:39 - enabled that's a property gravity so we
02:42 - have got properties here on these
02:44 - services you select any service you're
02:47 - likely to have properties even if it's a
02:49 - name property but these are the the main
02:53 - services and I'll be honest there aren't
02:56 - many properties or functions because we
02:58 - don't tend to well well services are
03:02 - used to help us in roblox development
03:05 - they help us speed things up instead of
03:07 - having to write our own code to do a
03:10 - simple action so for example instead of
03:12 - writing code which constantly checks to
03:14 - see if someone's bought a game pass
03:16 - there's actually a service called the
03:18 - marketplace service and the game pass
03:20 - service which will which provide us with
03:24 - events which will trigger code when
03:27 - someone buys a game pass so you can see
03:29 - we don't have to write code that's
03:31 - constantly checking to see if someone's
03:34 - purchased the game pass because roblox
03:36 - has built this into their back-end so we
03:39 - can use these events to trigger code
03:43 - when someone buys a game pass and
03:44 - immediately we have relieved ourselves
03:48 - of doing all the hard work of checking
03:51 - when someone buys a game pass so you can
03:53 - see how a service can be designed by
03:55 - roblox and they can only be made by
03:58 - roblox we can't make our own services
04:00 - they are made by roblox to make our
04:02 - lives easier so when I say they contain
04:06 - properties well yeah they every service
04:08 - will have a couple of properties but I
04:11 - like to differentiate between two types
04:14 - of services so we have the everyday
04:18 - service that we will use in roblox
04:21 - development so these things
04:23 - so things like the workspace replicated
04:26 - storage server storage players these are
04:29 - I'm gonna call them main services and
04:33 - the reason I call them main services is
04:35 - because well one they're automatically
04:39 - generated and added into our game when
04:42 - the place is started up and when we
04:45 - first make a game they're added into the
04:47 - Explorer there are some services well
04:50 - any service that isn't listed here you
04:52 - have to insert using something called
04:54 - get service you have to insert it
04:56 - through a script so we'll just call them
04:58 - other services so the main services they
05:04 - are the ones that we can we can see
05:07 - their properties because they're already
05:09 - in the game so they're the ones that
05:11 - have properties now other services do
05:15 - have properties as well but the main
05:18 - services are the ones that have
05:20 - properties that were most likely to
05:21 - change it's likely that we're not going
05:23 - to bother with any properties that other
05:25 - services have because usually we just
05:28 - use other services for the events and
05:30 - also for things like the functions that
05:33 - they may give us so other services are
05:38 - things like the the game pass okay so
05:41 - the GP for game passes where as main
05:43 - services are things that we will
05:45 - probably use for storing things you know
05:49 - storing items in the game so like maps
05:53 - and weapons they're what these main
05:55 - service is going to be used for so the
05:57 - ones that are also generated and that we
06:00 - use all the time other things like the
06:02 - game path service there are loads of
06:04 - different services we're probably just
06:06 - going to use them for their handy events
06:08 - and handy functions but you know they
06:10 - probably still do come with properties
06:12 - but we're just less likely to use them
06:15 - because you know really things like
06:18 - lighting they have useful properties
06:20 - like ambient like brightness that allow
06:24 - you to change how your game settings
06:26 - what they look like so you could change
06:28 - the time of day that's a useful property
06:30 - and you know you might
06:34 - even there might even be some properties
06:37 - of workspace that you want to change
06:38 - like gravity but personally as a roblox
06:41 - developer I don't think I've ever
06:43 - changed a property of another service so
06:47 - like the game past because really I just
06:49 - used them for the events so for example
06:52 - when someone buys a game pass I want to
06:55 - use the game pass service to trigger
06:57 - some code we don't really have events or
07:01 - functions that come with the workspace
07:03 - now I'm sure there are just like I'm
07:05 - sure there's properties for these other
07:07 - services but I hardly ever would would
07:11 - use those functions or events because
07:14 - these are main services that are used
07:18 - for it for a small number of things so
07:20 - things like the workspace service script
07:22 - service replicated storage the main use
07:25 - of these things are just for storing
07:27 - objects and so yeah that's why I
07:31 - differentiate between what I like to
07:34 - think of them as two different kinds of
07:37 - services you can class these things over
07:40 - here as your main services because
07:42 - they're things that are always going to
07:44 - be inserted into the game automatically
07:46 - by roblox they're kind of like the
07:47 - essentials right whereas services that
07:51 - we can't see listed here but we can also
07:53 - insert and there's loads of them by the
07:56 - way and you're gonna be asking what how
07:58 - can I find these services and I'll
07:59 - explain in a minute which are handy for
08:02 - a couple of things so you're gonna have
08:05 - loads of services that only do there are
08:07 - only useful for for certain times so
08:11 - you're not going to be using the game
08:13 - path service all the time
08:14 - that's only useful if you're working
08:15 - with game passes so that's how I like to
08:18 - think of them we have our you know main
08:21 - essential services here which we use all
08:23 - the time and that's what gets people
08:24 - confused because they're like oh well I
08:26 - didn't I didn't think this was a service
08:29 - okay granted it is called service crypt
08:33 - service but people don't understand that
08:36 - this is a service when I you know when
08:39 - we're saying get service people oh
08:40 - what's a service well this is a service
08:43 - but it's there's also another type of
08:45 - serve service we
08:47 - which you are likely to use game : get
08:51 - service for because everybody says to me
08:54 - okay what's the point of using game :
08:56 - get service
08:57 - I see loads of people using it but you
09:00 - know what's that useful for people think
09:02 - oh you have to a service it's only a
09:06 - service if you're saying game : get
09:10 - service so if I'm saying game dot
09:13 - workspace that can't be a service hour
09:16 - in blocks because you're not saying game
09:18 - curran get service workspace well
09:22 - actually it is a service workspace is a
09:26 - service just like everything else here
09:28 - in the workspace that's at the high top
09:30 - level obviously this script isn't a
09:32 - service because it's inside of something
09:34 - so it's not at the top level so a
09:36 - service is gonna be at the top level of
09:40 - the Explorer it's going to be top of the
09:41 - hierarchy we have a look at the Explorer
09:43 - over here you can see that's the
09:47 - services here are are at the highest
09:50 - level of indentation right there here
09:52 - whereas anything inside of the service
09:54 - is here at this smaller red line so you
09:57 - can see the gap between them this is
09:59 - indentation just like you would tab a
10:00 - script you can see anything that's on
10:02 - the outer edge here is basically at the
10:05 - top of the Explorer so it's at the top
10:07 - of the hierarchy so we can tell that
10:09 - it's a service so and a lot of people
10:13 - ask me this so what's the point of
10:16 - saying game : get service well some
10:22 - services are already in the game
10:24 - automatically put in the game for us as
10:28 - you can see here like workspace players
10:30 - call GUI lighting replicated first on
10:33 - storage service crypt service self
10:35 - storage basically every service that
10:38 - I've highlighted here is automatically
10:39 - added into the game because they are the
10:41 - ones that are used the most and that are
10:43 - essential to roblox development you are
10:46 - probably not going to use every single
10:47 - service in roblox for your project so it
10:51 - is useless and it is a waste of space
10:55 - having them all in the Explorer
10:57 - plus it would be it would make the
11:01 - Explorer
11:01 - very very long and that would mean that
11:05 - you'd have to scroll through all the
11:07 - services in what's already a very long
11:12 - Explorer if you have lots of items
11:15 - inside each service so we have our main
11:18 - services over here which are children of
11:21 - the roblox game so that's why we say
11:23 - game dot workspace because all of these
11:26 - services are going to be children of the
11:31 - game because game is that is the highest
11:33 - thing we can go to so some of these
11:37 - services will be automatically well it
11:42 - they will be already here already
11:44 - inserted into the game just like all of
11:46 - these ones highlighted because they are
11:48 - essential to to our game and their walk
11:51 - they're going to be used quite often by
11:53 - us however there are some services which
11:58 - might not exist when the game runs so we
12:03 - will need to insert them basically and
12:08 - there will be some as well which are not
12:11 - loaded by the time the game has run
12:14 - because the game runs very quickly and
12:16 - your script will run almost immediately
12:19 - after the game has started running but
12:23 - by that time by the time the script
12:25 - starts running all of these services
12:27 - might not be loaded into the game yet
12:29 - because there are quite a lot of
12:30 - services the other services I'm talking
12:33 - about here as well which aren't going to
12:36 - be fully loaded by the time your script
12:38 - runs so as well as that there are some
12:43 - services that you just can't access by
12:46 - saying game dot service name because it
12:50 - will just throw an error and an example
12:53 - service which does that is user input
12:56 - service you don't need to know what user
12:57 - input service does but it is a service
13:00 - that is required quite often by
13:02 - developers which we do use when we get
13:04 - on to things like mobile development so
13:07 - if I was to just say game dot workspace
13:10 - for example well that would be fine
13:13 - I've got a error here because it is
13:18 - expecting me to write something else but
13:20 - if I was to say games like user input
13:22 - service for example and then I wanted to
13:24 - call one of its functions here so if I
13:29 - was to call this function and what this
13:31 - function would do just to give you a
13:33 - further example of what services do I
13:35 - said they provide you with functions
13:38 - that give you useful information so this
13:41 - function you have to look very closely
13:43 - in the bottom left corner of the screen
13:44 - by the way I'm afraid it is called get
13:47 - connected gamepads and what they would
13:49 - do when you call it it would return to
13:54 - you would give you information it would
13:56 - give you a list of controllers that are
14:01 - currently connected to your computer so
14:03 - if you have plugged in a controller and
14:05 - you ran this line of code it would tell
14:10 - us the information about all of the
14:13 - controllers that are currently connected
14:14 - to this work to this computer that we
14:17 - could use in game so if I was to run
14:20 - this it says user input service is not a
14:24 - valid member of data model now data
14:27 - model is basically another way of just
14:29 - saying game as in game dot workspace so
14:31 - that's game which is a which which
14:35 - houses all of our services it's
14:37 - basically telling us this error is
14:39 - saying well there is no in user input
14:42 - service you haven't loaded it in yet so
14:45 - there are some services which will give
14:48 - you errors like that
14:49 - now most sir well there's quite a few
14:52 - services that are other services that
14:55 - aren't you know automatically loaded
14:58 - where if you did say game dot service
15:01 - name it would still work fine if you
15:04 - didn't say get service but most are
15:07 - services most services that that are not
15:10 - these main ones here that you have to
15:12 - actually load yourself you would have to
15:15 - use gate game curl on get a service and
15:19 - what that does is it goes and gets the
15:21 - service and loads it into the game and
15:23 - so it's good practice to
15:26 - use game : get serviced all of the time
15:30 - because it is possible for services to
15:34 - not be loaded by the time that you are
15:37 - running code and you also have services
15:42 - like user input service which just
15:44 - require you to use get service to load
15:48 - it in and it just will not like you if
15:51 - you say game dot user input service so
15:54 - because it's hard to remember all of the
15:57 - services that are like this and just to
16:00 - stop you from having headaches in the
16:02 - future around do I need to use get
16:05 - service on this service it does you no
16:08 - harm
16:08 - just to say game : get service and then
16:14 - in brackets in speech marks you just put
16:17 - the name of the service like this it
16:21 - will do exactly the same thing as if you
16:23 - were regularly gonna say game dot user
16:27 - input service or game dot workspace but
16:31 - you can be assured that it will work so
16:34 - if I try this again boom no error so it
16:39 - worked and there are no connected game
16:42 - paths to this computer anyway so you can
16:45 - see when I say game : get service it
16:48 - works a charm so if the service that you
16:52 - are trying to use is not there because
16:56 - when we say game dot user input service
16:59 - these scripts immediately thinks that
17:02 - this service is already in the game like
17:04 - a main service so it's going to look for
17:06 - it then it realizes that it's not there
17:08 - so we would need to add it to the game
17:12 - somehow but what gets service does is it
17:15 - firstly checks to see if the service is
17:17 - there and if it isn't there it will
17:19 - create the service for you so it will
17:21 - add it into the game for you which is
17:23 - just what we need because get service
17:26 - will check to see if it's there if it's
17:29 - not there it will create it for you
17:31 - problem solved so that is why we use get
17:34 - service because there are some services
17:36 - which
17:37 - will not be loaded into the game when
17:39 - the script runs and so it will create it
17:42 - for you but there's also just some
17:44 - services which are weird in the fact
17:47 - that they don't let us say game dot
17:50 - service name they just have to be so
17:55 - weird that they have to make us use get
17:58 - service because I don't know I think the
18:00 - people that made roblox Lua are trying
18:02 - to play some games with us I don't know
18:05 - who knows but it's just good practice as
18:07 - a roblox developer to use game : get
18:12 - service with the name of the service
18:14 - going here when you are inserting or
18:17 - trying to use a service which is not a
18:21 - main service so you don't need to say
18:24 - game Curlin get service for these ones
18:28 - here because these were already inserted
18:30 - into the game the only time you would
18:32 - use these you would use get service on
18:35 - one of these main services is if you
18:39 - have changed the name of a service so
18:42 - you can change the name of any of these
18:44 - services they will still do the same
18:45 - thing so I could change this to doc
18:48 - right so from now on I would have to say
18:51 - game dog dots time of day equals I don't
18:58 - know let's just let it to nearly
18:59 - midnight and if we were to run this
19:02 - script guess what it's going to become
19:04 - dark but that's because I changed the
19:08 - service to dog that's why we have to say
19:09 - game dot dog what time of day so if you
19:12 - were to then say lighting and you've
19:14 - changed the name of the lighting it's
19:16 - gonna get confused it's gonna give you
19:17 - the same error because it's try to look
19:19 - in the game for a service called
19:21 - lighting it's not found it because there
19:23 - is no service called lighting anymore
19:25 - yes there may still be a service that
19:28 - does the same action as the lighting
19:30 - service but it's called dog so we've
19:33 - been looking for lighting not for dog so
19:35 - if you wanted to insert lighting again
19:39 - you'd have to say if you want this code
19:41 - to still work even though you've changed
19:43 - the name of each after say game : get
19:45 - service lighting got time of day and
19:48 - it's going to look up
19:50 - in the game for a service called
19:52 - lighting and it couldn't find it so what
19:56 - it did was it created the service let's
20:00 - just have a look at this again it
20:02 - creates the service called lighting so
20:04 - we've now got a reference to it in our
20:07 - code but it's actually changed the name
20:08 - of it again to dog because that's we've
20:11 - told the game what we want it to be
20:13 - called so what will happen is it will
20:19 - basically create the service again and
20:22 - add it to the game so we've got a
20:23 - reference to it but then it will change
20:25 - its name which is pretty cool but my
20:27 - recommendation is that you just do not
20:29 - change the name of any services there is
20:33 - no need and if anyone else comes onto
20:36 - your project or reviews your code
20:37 - they're going to be confused
20:38 - it just really is not a good idea so
20:41 - keep all of your services named the same
20:45 - thing but when you're accessing
20:47 - something like game dot workspace it's
20:49 - fine to reference it like this but when
20:53 - you're actually getting a service that
20:56 - is not a main service that's not
20:58 - automatically added into the game you
21:00 - would say game go on get service and
21:03 - then you'd write that service in here so
21:06 - like marketplace service ok so that is
21:11 - what a service is on roblox and what get
21:14 - service is as well I did say that a
21:17 - service has handy functions and the
21:21 - events and we can have a look at some of
21:22 - those I'm not sure if they will appear
21:25 - here yes they do appear so if you were
21:27 - to do a comma a colon after you've got
21:30 - the service this predictor UI will
21:34 - appear and it comes up with your
21:36 - functions you know your basic functions
21:38 - like clear all children and clone
21:39 - destroy but it's not really applicable
21:42 - to a service because we're not going to
21:44 - be cloning a service or destroying it
21:46 - but if we scroll down we'll see that
21:48 - there are some functions and a yes some
21:53 - functions that are useful so such as
21:56 - prompt game pass purchase if I was to
21:59 - use this function which is a function of
22:01 - the marketplace service
22:03 - I code prompt a player to purchase a
22:06 - game pass so I could put a player
22:09 - objects in here so game drop players for
22:12 - Alvin underscore blocks and then a comma
22:15 - and the ID of the game pass so let's
22:19 - just use 1 2 3 as an example now how did
22:21 - I know the information I was going to
22:23 - put in here well if we just step back a
22:25 - bit and we type it out again you can see
22:28 - it's giving us the function and inside
22:30 - of these brackets is telling us it needs
22:31 - an instance so an instance is an
22:33 - object's value and it wants the object
22:36 - of the player and it also then wants a
22:38 - number and that number is the game pass
22:40 - ID you can see it's separated by a comma
22:42 - so it wants us to put in these brackets
22:44 - in the order that it's given us it wants
22:47 - the player to go first so we need to
22:48 - supply a player that we want to prompt
22:52 - this to so Alvin and score blocks and
22:54 - then comma and then the ID of the game
22:57 - pass so I'm going to do 1 2 3 isn't as
22:59 - an example now this code would not work
23:02 - because Alvin rocks is not currently in
23:06 - the game and this script would run
23:08 - before I've joined the game so I would
23:10 - need to actually put this in an event so
23:14 - let's just do game duck players got
23:16 - player added : connects function player
23:20 - and do this so because we've now got the
23:26 - player argument which is going to is
23:29 - going to represent the player that joins
23:31 - the game we can just put player instead
23:33 - of game drop players die out and blocks
23:35 - and now this will work with any player
23:37 - that joins the game so when they join
23:39 - the game we are harnessing the power of
23:41 - this service called marketplace service
23:43 - and the marketplace service has given us
23:46 - the extra power the extra tools to be
23:49 - able to prompt a player to purchase a
23:51 - game pass and we've supplied the player
23:53 - object just like it asks for because
23:55 - roblox automatically gets the players
23:57 - object when they join the game and
23:59 - supplies it as an argument so this
24:02 - player argument is going to be the
24:04 - player that joins the game so we're
24:06 - going to want to supply that player with
24:08 - a game pass prompt and we're also going
24:10 - to want to give the game pass ID so we
24:12 - have told the service to we've called
24:16 - this function
24:17 - which is a function of the service so
24:19 - without this service we wouldn't be able
24:20 - to perform this code we wouldn't be able
24:22 - to prompt a player to buy this game pass
24:25 - without this service because the whole
24:27 - game past purchase prompting is it's
24:31 - done by roblox on on the backend so we
24:33 - have to harness their tools for game
24:36 - pass purchasing is all done on the
24:37 - backend by using their services their
24:40 - services supply us with useful functions
24:43 - events properties so the properties
24:46 - would give us information we could get
24:49 - information about a player maybe what
24:51 - game passed they the game passes they've
24:53 - bought we can use these functions though
24:55 - to actually do things just like
24:58 - prompting a player to buy a game pass so
25:01 - without the service we wouldn't be able
25:02 - to do this because roblox as I've said
25:05 - have built this for us and have built it
25:08 - into this service so we as developers
25:10 - have to access these services to then
25:13 - access their their functions so let's
25:19 - play this game and see what happens
25:21 - so I joined the game they player added
25:24 - fires it passes the player argument to
25:27 - the scripts and then these scripts
25:29 - prompts us to purchase the game pass
25:32 - notice how we didn't do any coding to
25:35 - create this GUI to put the the ro books
25:39 - here or even to handle the purchasing
25:42 - when it is bought roblox has done that
25:44 - for us but where has that code to make
25:47 - that happen
25:47 - come from well we've actually required
25:49 - it from the service it's all happening
25:51 - behind the scenes but to access that to
25:54 - make it happen we had to access the
25:56 - service and the service is made by
25:58 - roblox and the service contains all of
26:00 - that useful code on the backend which we
26:03 - can't see we can't see the code that's
26:05 - prompting the player to buy this but we
26:08 - are telling the game that we want it to
26:10 - run we want to prompt this player we
26:12 - want them to ask them if they want to
26:14 - buy this game pass which is why we use
26:16 - the service the service is what houses
26:20 - this code it's what roblox has written
26:23 - the code to it's written the code for
26:25 - prompting game pass purchasing into this
26:27 - service so we just need to get the
26:29 - service and then
26:30 - you've got the service we've got access
26:32 - to all of those functions all of those
26:34 - events so we can then use that service
26:39 - to do things which we wouldn't be able
26:42 - to without them so we wouldn't be able
26:43 - to prompt the game pass purchase without
26:45 - the marketplace service but that is what
26:48 - services are so marketplace service is
26:51 - what our class as being an other service
26:53 - as we mentioned earlier and a other
26:57 - service instead of a main service is
26:59 - what we'd have to actually get using get
27:02 - service it's not automatically in the
27:03 - game we have to get it ourselves using
27:05 - get service but really using get service
27:08 - it's not a huge inconvenience to us when
27:11 - the services that we can get provide us
27:13 - with all this extra functionality to
27:15 - prompt game past purchases etc now
27:18 - services can't don't just prompt game
27:21 - passes there are loads and loads of
27:23 - services but we're not going to focus on
27:25 - them all I just wanted to make clear
27:27 - what our services we will be looking at
27:30 - more services as the video tutorials go
27:32 - on but this is just an example that I am
27:35 - using but there are make more functions
27:37 - that we can use way more functions that
27:40 - we can use with these services so let's
27:45 - just try and bring up the hold on why is
27:52 - the predictor not showing up for some
27:54 - reason no worries if we can't get the
27:56 - predictor to appear you can also check
27:58 - them out I believe in the object browser
28:00 - yes brilliant so go to view object
28:03 - browser and you can see you see these
28:05 - little icons here the ones that look
28:07 - like this yeah these ones it's it's it's
28:12 - a it's a blown-up image but you know
28:14 - what they look like so these icons
28:16 - indicate that it's a service so you can
28:18 - see sorry my bad my bad these are not
28:21 - services where are the services a
28:25 - service service service ok it doesn't
28:28 - want it doesn't show the services here
28:30 - for some reason oh it does show the
28:33 - services but it shares the icon with
28:36 - with other with other objects as well so
28:39 - you can't actually tell it's a service
28:41 - unless it's got service on the end of it
28:43 - so we've got bad
28:44 - service for example what else have we
28:46 - got we've got context action service
28:50 - that's one that you won't really need to
28:52 - know much about but when you click it
28:53 - you can see all of these functions
28:55 - appear so we've got our function for
28:57 - binding action and it gives you a
29:00 - summary of what this function will do
29:01 - let's go to the marketplace service
29:06 - areas and we look for the function
29:09 - because this means function this icon
29:11 - here so we've got our usual ones like
29:13 - wait for child destroy clone but as I
29:16 - said earlier we don't use those on
29:18 - services even though there were hardly
29:20 - ever going to use them but we've got new
29:22 - ones like prompt game Pass purchase or
29:27 - prompt purchase if you if you want to
29:30 - prompt them with the t-shirts if they
29:33 - want to buy a t-shirt you can prompt
29:34 - them to buy a t-shirt or or develop a
29:36 - product so we've got different functions
29:39 - for different use cases here so there
29:41 - are loads of different services and you
29:43 - firstly have to get the service and then
29:46 - once you've got the service you can use
29:48 - their functions you can use their
29:50 - properties if they have properties they
29:52 - also have events and things called
29:54 - callbacks which we won't be going into
29:56 - detail today on but you can see we've
29:59 - got events as well so we've got an event
30:02 - here called prompt game Pass purchase
30:05 - finished now what this will do is if we
30:07 - were to say dot prompt game Pass
30:11 - purchase finished
30:12 - kerlun connects function what would
30:16 - happen is and we don't need to use the
30:19 - player added stuff anymore because we're
30:21 - not prompting a player this could run
30:23 - for anybody so if we have a look here
30:27 - we've got some arguments we can take so
30:29 - the player that prompted the game pass
30:32 - their game pass ID and whether it was
30:35 - purchased so we can use this information
30:37 - that the service is giving us and you
30:41 - don't have to use the same names that
30:43 - they've given so they've called it
30:45 - player game pass ID I'll I've called the
30:47 - ID so this data is being passed to our
30:51 - event from the marketplace service when
30:54 - somebody finishes buying a game pass
30:56 - they could have either purchased it
30:58 - or click the cancel button so we can
31:00 - print out player name dot was prompted
31:08 - to buy game pass and then I'm going to
31:11 - put the ID and I'm gonna say they let's
31:18 - say um was purchased and then we can
31:23 - print out what what what it whether it
31:25 - was purchased or not okay
31:31 - let's join the game now if I was to
31:38 - prompt myself to buy a game pass and
31:44 - I've just ruined this through the
31:45 - command bar and I do buy the game pass
31:48 - when the transaction finishes what we'll
31:52 - do it all we've got an error let's just
31:55 - check that out
31:56 - I know what it was is because it's a
31:57 - boolean value and this is a string so we
32:00 - have to convert the data type here so
32:03 - let's just do that and we don't need to
32:06 - do we don't need to do it for the number
32:07 - because I think that will convert it to
32:09 - a string automatically okay let's prompt
32:14 - the game pass again let's buy it and
32:17 - once it's finished it's firing that
32:19 - event so when we press ok the
32:21 - marketplace service is going to trigger
32:23 - the event called prompt game past
32:26 - purchase finished because we have
32:28 - finished with this prompt GUI so when we
32:31 - click OK is going to send some
32:33 - information to this function the player
32:35 - so the it's going to send these
32:37 - arguments and if you haven't watched my
32:38 - video on arguments and events I do
32:41 - recommend you go and watch that video in
32:44 - the series because it is very very
32:46 - useful I believe that the events videos
32:49 - are episode number well
32:55 - yeah 10 episode 10 because we looked at
32:58 - the built-in functions in episode 9 then
33:01 - we went on to events in number 10 and
33:04 - then all that good stuff as well which
33:07 - is very very useful but we also did
33:08 - parameters and arguments in number 7 so
33:11 - go
33:11 - to parameters and arguments number seven
33:13 - go back to events number 10 and as well
33:16 - whilst you're at it go back to inbuilt
33:19 - functions at number nine very useful
33:20 - videos for you I'm not telling you just
33:23 - to watch them for the fun of it you're
33:24 - actually going to learn some good stuff
33:25 - so it's passed the information player
33:28 - who the player that was prompted and
33:32 - that's a player object so that's why
33:34 - we're getting their name property the ID
33:37 - of the game pass which was prompted and
33:39 - whether it was purchased or not so a
33:40 - true or false value let's click OK and
33:44 - it says Alvin blocks was prompted to buy
33:47 - a game pass one two three was it
33:49 - purchased yes it was purchased let's try
33:51 - again this time I'm going to cancel and
33:53 - it should say Ivan rocks was prompted to
33:56 - buy a game pass one two three was
33:57 - purchased oh because I didn't buy it
34:00 - so you can see how the service has
34:02 - basically given us the tools to handle
34:04 - gain past purchasing firstly if we look
34:07 - in the command bar it's given us the
34:09 - function to prompt a player to buy a
34:12 - game pass but then it's also given us an
34:14 - event and that event will trigger any
34:16 - time a player has finished with the
34:21 - prompt GUI so whether they bought or not
34:23 - is going to tell us it's gonna give us
34:24 - all that information and from that if we
34:27 - wanted to code some extra functionality
34:29 - so a quick example would be if somebody
34:32 - has canceled a purchase you could say oh
34:35 - that's a shame that you cancelled here
34:38 - is 50% off if you want to buy it again
34:40 - right and we know you don't want to buy
34:43 - it now but we're gonna try and entice
34:47 - you to buy it even more by giving you
34:50 - 50% off now that's probably against the
34:52 - rules but you can see where I'm going
34:54 - with this so if somebody bought a game
34:56 - pass you could use this event to put
34:59 - some confetti on the screen or play you
35:01 - know like a party popper because
35:03 - everybody's happy that you've now bought
35:05 - to the game pass so that is an example
35:08 - of what it's of what it is used for but
35:12 - that is what services are on roblox they
35:15 - provide us with very useful functions
35:17 - events and also properties so that we
35:20 - can get information about things so
35:23 - things that you would
35:24 - of thought well how on earth do I do
35:27 - that how on earth do i code a game pass
35:29 - all right that is enough where do I
35:32 - start well this is where services come
35:34 - into play because there are loads of
35:35 - services for different things and that's
35:38 - how we code a lot of the things on
35:41 - roblox that you probably weren't sure
35:43 - about so because roblox provides us with
35:45 - that code on the back end and we can
35:47 - harness that code that they've written
35:49 - for us to to deal with good stuff
35:51 - because you think about it we have
35:54 - basically prompted a player to buy a
35:56 - game pass we are we are giving them the
36:01 - ability to purchase roblox item from a
36:03 - game how awesome is that and we have
36:05 - written three lines of code so with
36:08 - three lines of code we have been able to
36:10 - prompt a player to purchase a game pass
36:13 - and we've also written the code to pick
36:16 - up the purchase so you can see that's
36:19 - what the service is for and you can
36:22 - check the ID and if the ID is a certain
36:26 - game pass you can give them certain
36:28 - perks and if it's a different ID you can
36:30 - give them different perks so if you has
36:33 - you could check if if the game pass if
36:36 - ID equals one two three and you had a
36:39 - game pass with ID 1 2 3 that gave you
36:41 - and let's say two times walk walk speed
36:45 - then you could say player dot character
36:49 - dot humanoid dot walk speed equals 500
36:54 - for example and if we run that because
36:57 - don't forget I'm prompting them with the
36:58 - game pass one two three down here in the
37:02 - in the in the command bar I am using the
37:05 - command bar it's just a quick way to
37:06 - prompt players although this would
37:08 - usually go in a local script in
37:09 - somewhere like the starter GUI so I'm
37:12 - prompting the player I click buy now and
37:15 - watch my speed when we finish hopefully
37:18 - just hopefully uh oh I know why it
37:22 - didn't work because I made it a string
37:23 - not a number because the game pass ID is
37:26 - actually a number my bad
37:28 - let's try that again so I'm prompted
37:29 - with the game pass
37:31 - I'm going to click on the thing when it
37:36 - when I prompt it I click buy now and I
37:40 - click OK and then that event fires and I
37:43 - get super speed because what happened
37:44 - was we finished the game pass prompt and
37:48 - we also need to check whether it was
37:50 - actually purchased because this does
37:54 - fire whether you cancelled the purchase
37:56 - so the ID could have been one two three
37:58 - but you could have actually not
37:58 - purchased it so if the ID is the correct
38:02 - one and you did actually buy it then we
38:04 - can give that player five hundred walk
38:06 - speed so that is just some of the great
38:08 - things that services can be used for and
38:10 - we have had a big emphasis on the
38:11 - marketplace service don't just think
38:13 - that this whole get service stuff and
38:15 - all these functions and events can be
38:17 - used for marketplace service because
38:18 - there are loads and loads of events and
38:20 - functions for different services for
38:22 - different things we've just focused on
38:24 - the marketplace service today because
38:25 - it's one of the most easiest services
38:26 - that you can get your head around and
38:28 - you can tell that my voice is starting
38:29 - to go because I've done a lot of talking
38:30 - in this video and in the last video the
38:33 - last video was 55 minutes long so good
38:36 - one to get your teeth into if you
38:38 - haven't checked that one out so thank
38:40 - you for watching this video as I said
38:42 - any questions please do put them in the
38:45 - description down below and please like
38:47 - the vid subscribe to the channel for
38:49 - more videos and you can subscribe by
38:51 - clicking the avinash logo in the middle
38:52 - of your screen that should come up
38:54 - anytime now do consider becoming a
38:56 - channel member you can click the join
38:57 - button at the bottom of the screen
38:58 - support the channel and get some cool
39:00 - perks as well and I'll see you in the
39:03 - next video
39:04 - Cheers bye

Cleaned transcript:

everyone Arvin blocks here with episode number 19 of the scripting series today we're gonna be looking at services now I'll be honest I couldn't really think of a good explanation for services because they are quite that they're easy to understand but just hard to explain so I went online did a little bit of research before I recorded the video try to find as good an explanation as I could find and I came to the roblox fandom wiki site and they've got a little bit of explanation about it but I've only got a paragraph but they say that a service is an object that contains built in properties built in functions events and and that's what a service is it contains properties functions and events and you may be thinking well that makes no sense we've covered events we've covered functions we've covered properties why does a service even need properties I mean I don't even know what a service is yet well you probably do know what a services but you just actually not realized that is a service so we've said that it will have properties yeah so we've got properties it will have functions okay and it will have events as well so events which will trigger when something happens so the event will be looking out waiting for something to happen the functions will you know can be we can use functions or methods on this service to help us do things so for example an example could be destroy that's a function like we learnt in the inbuilt functions video although it's not actually a part of a service that's just a function that we can use on any roblox objects but I do recommend you give the inbuilt functions a video a watch so my channel episode number 9 it will just give you a quick introduction to inbuilt functions and what they're useful for so you should be hot on that but a service is actually these things here in there in the Explorer the things at the very top here so we don't with the things where we don't click arrows on the things that have their own arrows which have things inside these things at the very top level our services so we look at the workspace here the workspace is a service that has properties so you know things like whether it's filtering it enabled that's a property gravity so we have got properties here on these services you select any service you're likely to have properties even if it's a name property but these are the the main services and I'll be honest there aren't many properties or functions because we don't tend to well well services are used to help us in roblox development they help us speed things up instead of having to write our own code to do a simple action so for example instead of writing code which constantly checks to see if someone's bought a game pass there's actually a service called the marketplace service and the game pass service which will which provide us with events which will trigger code when someone buys a game pass so you can see we don't have to write code that's constantly checking to see if someone's purchased the game pass because roblox has built this into their backend so we can use these events to trigger code when someone buys a game pass and immediately we have relieved ourselves of doing all the hard work of checking when someone buys a game pass so you can see how a service can be designed by roblox and they can only be made by roblox we can't make our own services they are made by roblox to make our lives easier so when I say they contain properties well yeah they every service will have a couple of properties but I like to differentiate between two types of services so we have the everyday service that we will use in roblox development so these things so things like the workspace replicated storage server storage players these are I'm gonna call them main services and the reason I call them main services is because well one they're automatically generated and added into our game when the place is started up and when we first make a game they're added into the Explorer there are some services well any service that isn't listed here you have to insert using something called get service you have to insert it through a script so we'll just call them other services so the main services they are the ones that we can we can see their properties because they're already in the game so they're the ones that have properties now other services do have properties as well but the main services are the ones that have properties that were most likely to change it's likely that we're not going to bother with any properties that other services have because usually we just use other services for the events and also for things like the functions that they may give us so other services are things like the the game pass okay so the GP for game passes where as main services are things that we will probably use for storing things you know storing items in the game so like maps and weapons they're what these main service is going to be used for so the ones that are also generated and that we use all the time other things like the game path service there are loads of different services we're probably just going to use them for their handy events and handy functions but you know they probably still do come with properties but we're just less likely to use them because you know really things like lighting they have useful properties like ambient like brightness that allow you to change how your game settings what they look like so you could change the time of day that's a useful property and you know you might even there might even be some properties of workspace that you want to change like gravity but personally as a roblox developer I don't think I've ever changed a property of another service so like the game past because really I just used them for the events so for example when someone buys a game pass I want to use the game pass service to trigger some code we don't really have events or functions that come with the workspace now I'm sure there are just like I'm sure there's properties for these other services but I hardly ever would would use those functions or events because these are main services that are used for it for a small number of things so things like the workspace service script service replicated storage the main use of these things are just for storing objects and so yeah that's why I differentiate between what I like to think of them as two different kinds of services you can class these things over here as your main services because they're things that are always going to be inserted into the game automatically by roblox they're kind of like the essentials right whereas services that we can't see listed here but we can also insert and there's loads of them by the way and you're gonna be asking what how can I find these services and I'll explain in a minute which are handy for a couple of things so you're gonna have loads of services that only do there are only useful for for certain times so you're not going to be using the game path service all the time that's only useful if you're working with game passes so that's how I like to think of them we have our you know main essential services here which we use all the time and that's what gets people confused because they're like oh well I didn't I didn't think this was a service okay granted it is called service crypt service but people don't understand that this is a service when I you know when we're saying get service people oh what's a service well this is a service but it's there's also another type of serve service we which you are likely to use game get service for because everybody says to me okay what's the point of using game get service I see loads of people using it but you know what's that useful for people think oh you have to a service it's only a service if you're saying game get service so if I'm saying game dot workspace that can't be a service hour in blocks because you're not saying game curran get service workspace well actually it is a service workspace is a service just like everything else here in the workspace that's at the high top level obviously this script isn't a service because it's inside of something so it's not at the top level so a service is gonna be at the top level of the Explorer it's going to be top of the hierarchy we have a look at the Explorer over here you can see that's the services here are are at the highest level of indentation right there here whereas anything inside of the service is here at this smaller red line so you can see the gap between them this is indentation just like you would tab a script you can see anything that's on the outer edge here is basically at the top of the Explorer so it's at the top of the hierarchy so we can tell that it's a service so and a lot of people ask me this so what's the point of saying game get service well some services are already in the game automatically put in the game for us as you can see here like workspace players call GUI lighting replicated first on storage service crypt service self storage basically every service that I've highlighted here is automatically added into the game because they are the ones that are used the most and that are essential to roblox development you are probably not going to use every single service in roblox for your project so it is useless and it is a waste of space having them all in the Explorer plus it would be it would make the Explorer very very long and that would mean that you'd have to scroll through all the services in what's already a very long Explorer if you have lots of items inside each service so we have our main services over here which are children of the roblox game so that's why we say game dot workspace because all of these services are going to be children of the game because game is that is the highest thing we can go to so some of these services will be automatically well it they will be already here already inserted into the game just like all of these ones highlighted because they are essential to to our game and their walk they're going to be used quite often by us however there are some services which might not exist when the game runs so we will need to insert them basically and there will be some as well which are not loaded by the time the game has run because the game runs very quickly and your script will run almost immediately after the game has started running but by that time by the time the script starts running all of these services might not be loaded into the game yet because there are quite a lot of services the other services I'm talking about here as well which aren't going to be fully loaded by the time your script runs so as well as that there are some services that you just can't access by saying game dot service name because it will just throw an error and an example service which does that is user input service you don't need to know what user input service does but it is a service that is required quite often by developers which we do use when we get on to things like mobile development so if I was to just say game dot workspace for example well that would be fine I've got a error here because it is expecting me to write something else but if I was to say games like user input service for example and then I wanted to call one of its functions here so if I was to call this function and what this function would do just to give you a further example of what services do I said they provide you with functions that give you useful information so this function you have to look very closely in the bottom left corner of the screen by the way I'm afraid it is called get connected gamepads and what they would do when you call it it would return to you would give you information it would give you a list of controllers that are currently connected to your computer so if you have plugged in a controller and you ran this line of code it would tell us the information about all of the controllers that are currently connected to this work to this computer that we could use in game so if I was to run this it says user input service is not a valid member of data model now data model is basically another way of just saying game as in game dot workspace so that's game which is a which which houses all of our services it's basically telling us this error is saying well there is no in user input service you haven't loaded it in yet so there are some services which will give you errors like that now most sir well there's quite a few services that are other services that aren't you know automatically loaded where if you did say game dot service name it would still work fine if you didn't say get service but most are services most services that that are not these main ones here that you have to actually load yourself you would have to use gate game curl on get a service and what that does is it goes and gets the service and loads it into the game and so it's good practice to use game get serviced all of the time because it is possible for services to not be loaded by the time that you are running code and you also have services like user input service which just require you to use get service to load it in and it just will not like you if you say game dot user input service so because it's hard to remember all of the services that are like this and just to stop you from having headaches in the future around do I need to use get service on this service it does you no harm just to say game get service and then in brackets in speech marks you just put the name of the service like this it will do exactly the same thing as if you were regularly gonna say game dot user input service or game dot workspace but you can be assured that it will work so if I try this again boom no error so it worked and there are no connected game paths to this computer anyway so you can see when I say game get service it works a charm so if the service that you are trying to use is not there because when we say game dot user input service these scripts immediately thinks that this service is already in the game like a main service so it's going to look for it then it realizes that it's not there so we would need to add it to the game somehow but what gets service does is it firstly checks to see if the service is there and if it isn't there it will create the service for you so it will add it into the game for you which is just what we need because get service will check to see if it's there if it's not there it will create it for you problem solved so that is why we use get service because there are some services which will not be loaded into the game when the script runs and so it will create it for you but there's also just some services which are weird in the fact that they don't let us say game dot service name they just have to be so weird that they have to make us use get service because I don't know I think the people that made roblox Lua are trying to play some games with us I don't know who knows but it's just good practice as a roblox developer to use game get service with the name of the service going here when you are inserting or trying to use a service which is not a main service so you don't need to say game Curlin get service for these ones here because these were already inserted into the game the only time you would use these you would use get service on one of these main services is if you have changed the name of a service so you can change the name of any of these services they will still do the same thing so I could change this to doc right so from now on I would have to say game dog dots time of day equals I don't know let's just let it to nearly midnight and if we were to run this script guess what it's going to become dark but that's because I changed the service to dog that's why we have to say game dot dog what time of day so if you were to then say lighting and you've changed the name of the lighting it's gonna get confused it's gonna give you the same error because it's try to look in the game for a service called lighting it's not found it because there is no service called lighting anymore yes there may still be a service that does the same action as the lighting service but it's called dog so we've been looking for lighting not for dog so if you wanted to insert lighting again you'd have to say if you want this code to still work even though you've changed the name of each after say game get service lighting got time of day and it's going to look up in the game for a service called lighting and it couldn't find it so what it did was it created the service let's just have a look at this again it creates the service called lighting so we've now got a reference to it in our code but it's actually changed the name of it again to dog because that's we've told the game what we want it to be called so what will happen is it will basically create the service again and add it to the game so we've got a reference to it but then it will change its name which is pretty cool but my recommendation is that you just do not change the name of any services there is no need and if anyone else comes onto your project or reviews your code they're going to be confused it just really is not a good idea so keep all of your services named the same thing but when you're accessing something like game dot workspace it's fine to reference it like this but when you're actually getting a service that is not a main service that's not automatically added into the game you would say game go on get service and then you'd write that service in here so like marketplace service ok so that is what a service is on roblox and what get service is as well I did say that a service has handy functions and the events and we can have a look at some of those I'm not sure if they will appear here yes they do appear so if you were to do a comma a colon after you've got the service this predictor UI will appear and it comes up with your functions you know your basic functions like clear all children and clone destroy but it's not really applicable to a service because we're not going to be cloning a service or destroying it but if we scroll down we'll see that there are some functions and a yes some functions that are useful so such as prompt game pass purchase if I was to use this function which is a function of the marketplace service I code prompt a player to purchase a game pass so I could put a player objects in here so game drop players for Alvin underscore blocks and then a comma and the ID of the game pass so let's just use 1 2 3 as an example now how did I know the information I was going to put in here well if we just step back a bit and we type it out again you can see it's giving us the function and inside of these brackets is telling us it needs an instance so an instance is an object's value and it wants the object of the player and it also then wants a number and that number is the game pass ID you can see it's separated by a comma so it wants us to put in these brackets in the order that it's given us it wants the player to go first so we need to supply a player that we want to prompt this to so Alvin and score blocks and then comma and then the ID of the game pass so I'm going to do 1 2 3 isn't as an example now this code would not work because Alvin rocks is not currently in the game and this script would run before I've joined the game so I would need to actually put this in an event so let's just do game duck players got player added connects function player and do this so because we've now got the player argument which is going to is going to represent the player that joins the game we can just put player instead of game drop players die out and blocks and now this will work with any player that joins the game so when they join the game we are harnessing the power of this service called marketplace service and the marketplace service has given us the extra power the extra tools to be able to prompt a player to purchase a game pass and we've supplied the player object just like it asks for because roblox automatically gets the players object when they join the game and supplies it as an argument so this player argument is going to be the player that joins the game so we're going to want to supply that player with a game pass prompt and we're also going to want to give the game pass ID so we have told the service to we've called this function which is a function of the service so without this service we wouldn't be able to perform this code we wouldn't be able to prompt a player to buy this game pass without this service because the whole game past purchase prompting is it's done by roblox on on the backend so we have to harness their tools for game pass purchasing is all done on the backend by using their services their services supply us with useful functions events properties so the properties would give us information we could get information about a player maybe what game passed they the game passes they've bought we can use these functions though to actually do things just like prompting a player to buy a game pass so without the service we wouldn't be able to do this because roblox as I've said have built this for us and have built it into this service so we as developers have to access these services to then access their their functions so let's play this game and see what happens so I joined the game they player added fires it passes the player argument to the scripts and then these scripts prompts us to purchase the game pass notice how we didn't do any coding to create this GUI to put the the ro books here or even to handle the purchasing when it is bought roblox has done that for us but where has that code to make that happen come from well we've actually required it from the service it's all happening behind the scenes but to access that to make it happen we had to access the service and the service is made by roblox and the service contains all of that useful code on the backend which we can't see we can't see the code that's prompting the player to buy this but we are telling the game that we want it to run we want to prompt this player we want them to ask them if they want to buy this game pass which is why we use the service the service is what houses this code it's what roblox has written the code to it's written the code for prompting game pass purchasing into this service so we just need to get the service and then you've got the service we've got access to all of those functions all of those events so we can then use that service to do things which we wouldn't be able to without them so we wouldn't be able to prompt the game pass purchase without the marketplace service but that is what services are so marketplace service is what our class as being an other service as we mentioned earlier and a other service instead of a main service is what we'd have to actually get using get service it's not automatically in the game we have to get it ourselves using get service but really using get service it's not a huge inconvenience to us when the services that we can get provide us with all this extra functionality to prompt game past purchases etc now services can't don't just prompt game passes there are loads and loads of services but we're not going to focus on them all I just wanted to make clear what our services we will be looking at more services as the video tutorials go on but this is just an example that I am using but there are make more functions that we can use way more functions that we can use with these services so let's just try and bring up the hold on why is the predictor not showing up for some reason no worries if we can't get the predictor to appear you can also check them out I believe in the object browser yes brilliant so go to view object browser and you can see you see these little icons here the ones that look like this yeah these ones it's it's it's a it's a blownup image but you know what they look like so these icons indicate that it's a service so you can see sorry my bad my bad these are not services where are the services a service service service ok it doesn't want it doesn't show the services here for some reason oh it does show the services but it shares the icon with with other with other objects as well so you can't actually tell it's a service unless it's got service on the end of it so we've got bad service for example what else have we got we've got context action service that's one that you won't really need to know much about but when you click it you can see all of these functions appear so we've got our function for binding action and it gives you a summary of what this function will do let's go to the marketplace service areas and we look for the function because this means function this icon here so we've got our usual ones like wait for child destroy clone but as I said earlier we don't use those on services even though there were hardly ever going to use them but we've got new ones like prompt game Pass purchase or prompt purchase if you if you want to prompt them with the tshirts if they want to buy a tshirt you can prompt them to buy a tshirt or or develop a product so we've got different functions for different use cases here so there are loads of different services and you firstly have to get the service and then once you've got the service you can use their functions you can use their properties if they have properties they also have events and things called callbacks which we won't be going into detail today on but you can see we've got events as well so we've got an event here called prompt game Pass purchase finished now what this will do is if we were to say dot prompt game Pass purchase finished kerlun connects function what would happen is and we don't need to use the player added stuff anymore because we're not prompting a player this could run for anybody so if we have a look here we've got some arguments we can take so the player that prompted the game pass their game pass ID and whether it was purchased so we can use this information that the service is giving us and you don't have to use the same names that they've given so they've called it player game pass ID I'll I've called the ID so this data is being passed to our event from the marketplace service when somebody finishes buying a game pass they could have either purchased it or click the cancel button so we can print out player name dot was prompted to buy game pass and then I'm going to put the ID and I'm gonna say they let's say um was purchased and then we can print out what what what it whether it was purchased or not okay let's join the game now if I was to prompt myself to buy a game pass and I've just ruined this through the command bar and I do buy the game pass when the transaction finishes what we'll do it all we've got an error let's just check that out I know what it was is because it's a boolean value and this is a string so we have to convert the data type here so let's just do that and we don't need to do we don't need to do it for the number because I think that will convert it to a string automatically okay let's prompt the game pass again let's buy it and once it's finished it's firing that event so when we press ok the marketplace service is going to trigger the event called prompt game past purchase finished because we have finished with this prompt GUI so when we click OK is going to send some information to this function the player so the it's going to send these arguments and if you haven't watched my video on arguments and events I do recommend you go and watch that video in the series because it is very very useful I believe that the events videos are episode number well yeah 10 episode 10 because we looked at the builtin functions in episode 9 then we went on to events in number 10 and then all that good stuff as well which is very very useful but we also did parameters and arguments in number 7 so go to parameters and arguments number seven go back to events number 10 and as well whilst you're at it go back to inbuilt functions at number nine very useful videos for you I'm not telling you just to watch them for the fun of it you're actually going to learn some good stuff so it's passed the information player who the player that was prompted and that's a player object so that's why we're getting their name property the ID of the game pass which was prompted and whether it was purchased or not so a true or false value let's click OK and it says Alvin blocks was prompted to buy a game pass one two three was it purchased yes it was purchased let's try again this time I'm going to cancel and it should say Ivan rocks was prompted to buy a game pass one two three was purchased oh because I didn't buy it so you can see how the service has basically given us the tools to handle gain past purchasing firstly if we look in the command bar it's given us the function to prompt a player to buy a game pass but then it's also given us an event and that event will trigger any time a player has finished with the prompt GUI so whether they bought or not is going to tell us it's gonna give us all that information and from that if we wanted to code some extra functionality so a quick example would be if somebody has canceled a purchase you could say oh that's a shame that you cancelled here is 50% off if you want to buy it again right and we know you don't want to buy it now but we're gonna try and entice you to buy it even more by giving you 50% off now that's probably against the rules but you can see where I'm going with this so if somebody bought a game pass you could use this event to put some confetti on the screen or play you know like a party popper because everybody's happy that you've now bought to the game pass so that is an example of what it's of what it is used for but that is what services are on roblox they provide us with very useful functions events and also properties so that we can get information about things so things that you would of thought well how on earth do I do that how on earth do i code a game pass all right that is enough where do I start well this is where services come into play because there are loads of services for different things and that's how we code a lot of the things on roblox that you probably weren't sure about so because roblox provides us with that code on the back end and we can harness that code that they've written for us to to deal with good stuff because you think about it we have basically prompted a player to buy a game pass we are we are giving them the ability to purchase roblox item from a game how awesome is that and we have written three lines of code so with three lines of code we have been able to prompt a player to purchase a game pass and we've also written the code to pick up the purchase so you can see that's what the service is for and you can check the ID and if the ID is a certain game pass you can give them certain perks and if it's a different ID you can give them different perks so if you has you could check if if the game pass if ID equals one two three and you had a game pass with ID 1 2 3 that gave you and let's say two times walk walk speed then you could say player dot character dot humanoid dot walk speed equals 500 for example and if we run that because don't forget I'm prompting them with the game pass one two three down here in the in the in the command bar I am using the command bar it's just a quick way to prompt players although this would usually go in a local script in somewhere like the starter GUI so I'm prompting the player I click buy now and watch my speed when we finish hopefully just hopefully uh oh I know why it didn't work because I made it a string not a number because the game pass ID is actually a number my bad let's try that again so I'm prompted with the game pass I'm going to click on the thing when it when I prompt it I click buy now and I click OK and then that event fires and I get super speed because what happened was we finished the game pass prompt and we also need to check whether it was actually purchased because this does fire whether you cancelled the purchase so the ID could have been one two three but you could have actually not purchased it so if the ID is the correct one and you did actually buy it then we can give that player five hundred walk speed so that is just some of the great things that services can be used for and we have had a big emphasis on the marketplace service don't just think that this whole get service stuff and all these functions and events can be used for marketplace service because there are loads and loads of events and functions for different services for different things we've just focused on the marketplace service today because it's one of the most easiest services that you can get your head around and you can tell that my voice is starting to go because I've done a lot of talking in this video and in the last video the last video was 55 minutes long so good one to get your teeth into if you haven't checked that one out so thank you for watching this video as I said any questions please do put them in the description down below and please like the vid subscribe to the channel for more videos and you can subscribe by clicking the avinash logo in the middle of your screen that should come up anytime now do consider becoming a channel member you can click the join button at the bottom of the screen support the channel and get some cool perks as well and I'll see you in the next video Cheers bye
