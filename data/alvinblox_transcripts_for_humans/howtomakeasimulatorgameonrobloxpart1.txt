With timestamps:

00:00 - in this video I'm gonna be showing you
00:01 - how to create your own simulator game on
00:04 - roblox so that you can get bigger and a
00:08 - rebirth when you hit a certain amount of
00:10 - strength let's go ahead and get started
00:13 - so welcome back to another tutorial my
00:19 - name is Alvin blocks if it's your first
00:20 - time on my channel make sure that you
00:23 - subscribe and you clicked on the
00:24 - notification mail so you never miss out
00:26 - when I upload a brand new video so we're
00:30 - gonna making a simple simulator game in
00:32 - this tutorial you'll be able to have a
00:35 - wait tool and obviously when you click
00:37 - the tool you will gain strength and once
00:40 - you hit a certain number of strengths
00:42 - you'll be able to rebirth and so all
00:45 - your stats will be reset but you gain
00:48 - one rebirth and you'll be able to gain
00:51 - more strength over time so let's begin
00:53 - by firstly making our work area look
00:58 - nice I'm gonna just set my base plate to
01:00 - a green color and to a grass texture and
01:06 - also gonna get rid of the studs on the
01:10 - top surface just like this there we go
01:13 - we've got a bright green base plates and
01:16 - I'm going to also make the sky look nice
01:19 - as well you don't have to do this I just
01:21 - like to do it because it makes the the
01:23 - game that we're working in look really
01:25 - nice so I'm gonna insert a sunless blue
01:29 - sky box into the lighting and we can get
01:33 - started with the simulator so what we're
01:36 - going to do first is design our tool now
01:39 - what I'm gonna do is I'm going to go on
01:41 - starter pack click on the plus and add a
01:44 - tool then I'm gonna name this tool wait
01:48 - the next thing that you're gonna want to
01:50 - do is design your tool what I'm gonna do
01:53 - I'm gonna insert a part into the
01:56 - workspace here and this part is going to
01:59 - be a simple little tool which which will
02:02 - be the thing which we lift okay so what
02:04 - I'm going to do is I'm just going to
02:06 - make it yellow and if you want to you
02:10 - can make this look much nicer but you
02:12 - need to make sure
02:13 - that you call it handle now I'm gonna
02:15 - make sure that it's unanchored and that
02:18 - can collide is set to false on the tool
02:23 - so that it doesn't collide with anything
02:26 - if it touches something so we're going
02:28 - to take this handle and I'm going to
02:30 - place it inside of the weight tool and
02:32 - if you go ahead and play the game you
02:35 - should see that we have a tool in our
02:37 - inventory and if we open it up you can
02:40 - see that we are holding a weight if you
02:44 - want to learn how to customize the tool
02:45 - keep watching and we'll get onto that
02:47 - later on in the video so next thing that
02:50 - we're going to do is we're going to
02:51 - start coding the the actual tool so
02:55 - first things that we're going to do is
02:57 - we're going to insert a local script
03:00 - into here and we're also going to need a
03:03 - module script for later on so I'm just
03:06 - going to insert those now so that we
03:08 - don't have to do those later on so first
03:12 - thing that we're going to do is we're
03:14 - going to work on our local script so
03:16 - what we're going to do is we're going to
03:18 - create a function which will run when we
03:22 - click the mouse so we're gonna do some
03:26 - variables first we're just gonna get our
03:28 - module script by saying local module
03:31 - equals a require and then in the
03:34 - brackets we can say script dot to parent
03:37 - dr. module script or wait for child
03:40 - module scripts just to make sure that
03:42 - it's fully loaded ready for us to call
03:46 - to we're then going to want to make sure
03:50 - we have the the closing bracket so you
03:52 - have two closing brackets on that line
03:54 - well then gonna have a variable for the
03:57 - player who's who's well these scripts
04:01 - are executing so they're local player
04:03 - will be game dot players dot local
04:06 - player and we're also going to get the
04:11 - players mouth because we're gonna need
04:13 - that for when they actually click the
04:16 - screen so we can say local mouse equals
04:19 - player current get mouse and we can also
04:22 - use the mouse for some on-screen effect
04:26 - when they click the mouse as well so to
04:29 - know when the player has clicked the
04:30 - mouse what we need to do is do an
04:32 - activated event so we can say script dot
04:35 - karent's dot activate it colon connects
04:40 - function in brackets and then another
04:43 - pair of brackets and then drop a line
04:45 - like this so this event will run
04:48 - whenever what this function will run
04:51 - whenever the player clicks their mouse
04:53 - so what we're going to do is we're going
04:55 - to create a function in our module
04:59 - script which will control all the flee
05:02 - be lifting and then we can call that
05:03 - module when we want to lift the weight
05:07 - so over here what we're going to do is
05:10 - we're going to drop a line and say a
05:12 - local replicated storage equals game
05:17 - codon get service a replicated
05:21 - storage just like this now in the
05:24 - replicated storage what we're going to
05:27 - do is we're going to store our remote
05:29 - events and when we play a click so we're
05:32 - going to fire and event to give them
05:35 - some more strength so that it is able to
05:38 - comply with those from enabled so that
05:41 - your game does not break and it is
05:44 - protected from exploiters so what we're
05:47 - going to do is want to create a function
05:48 - and this function will run when we click
05:51 - the mouse so we can just say function
05:54 - and then give it a name module dot lift
05:57 - okay and then drop a line and you should
06:00 - have this end added in here which shows
06:02 - that it is a function and any cut any
06:05 - code inside of this function will run
06:07 - when we call module dot lifts in the
06:10 - local script so we can just fire off our
06:13 - events but we need to actually create
06:15 - the event first so let's create a folder
06:17 - in replicated storage and we'll call
06:20 - this folder remotes because our remote
06:23 - events and functions are going to go in
06:25 - there and we're going to create a remote
06:27 - event called lift now if you don't know
06:30 - what a remote event is I'm just gonna
06:32 - quickly explain it so a roblox game
06:34 - works like this you have all of the
06:37 - players in the game which are called
06:39 - clients
06:40 - they're all connected to one big
06:42 - computer owned by roblox called the
06:45 - server and all the scripts on this
06:47 - server helped to control the game and
06:50 - what's happening at the moment and so
06:52 - what happens is when somebody moves
06:55 - their character the server will see this
06:59 - change and it will update everybody
07:01 - else's a game all of the clients to show
07:05 - that the the other that the player that
07:07 - moved so that their character gets moved
07:09 - so the server just controls all of the
07:11 - players in the game and what we do is if
07:15 - we ran code on the client then somebody
07:20 - could exploit that for their own good so
07:22 - if we handle all of the strength giving
07:26 - on the clients and we gave all of the
07:28 - strength in this local script then
07:31 - somebody could easily exploit that and
07:34 - give themselves in 999 infinite cache or
07:38 - strength so we do all of the checks on
07:40 - the server and we give the strength on
07:43 - the server because and no clients can
07:46 - actually see server scripts and they
07:48 - can't edit them so that the game cannot
07:50 - be exploited so that's why we're using
07:53 - remote events because it is a way to
07:56 - communicate between the client and the
07:58 - server but if you don't understand this
07:59 - I don't worry too much because
08:01 - especially for a beginner because I do
08:03 - have lots of more videos on filtering
08:06 - enabled on my channel so make sure you
08:08 - go ahead and check those out so inside
08:11 - of this activated events what we can do
08:14 - is we can cool our module IFFT by saying
08:18 - module which is our variable up here and
08:22 - then we can say dot lyft and that will
08:27 - basically call that function in the
08:31 - module okay so now that we've done that
08:34 - what we can do is we can go back to the
08:36 - module script and we can actually fire
08:38 - our remote events okay
08:41 - so to do this all we need to do let's
08:43 - give it a name first we're gonna call
08:45 - this one lift so we're gonna fire it by
08:48 - saying replicated storage come wait for
08:50 - child remotes
08:53 - and part we don't need to wait for it
08:55 - because this is going to be called when
08:57 - replicated storage has been what when
09:01 - the it's good the player is going to
09:03 - click their mouse so we don't actually
09:04 - need to wait for it because the game
09:06 - isn't starting up so we can say
09:07 - replicated storage dot remotes dot lift
09:11 - occurred on a fire server and this is
09:13 - going to send a request to this remote
09:17 - event and then we will pick it up in a
09:19 - server script and then we will give the
09:22 - player some strength when they when that
09:25 - request is received so we'll go ahead
09:27 - and make a script in service script
09:30 - service now and this is going to handle
09:33 - all of the remotes as we've said so
09:36 - let's go ahead and create a variable for
09:39 - replicated storage because that's where
09:42 - the remote events are located so we can
09:45 - say local replicated storage equals game
09:48 - current get service replicated storage
09:53 - what we can do now is we can get the
09:56 - what what what to do is we want to have
10:00 - some data okay what are some data about
10:03 - the players currently in the game and
10:06 - what this data is going to do is it's
10:08 - going to create debounce so that the
10:11 - player cannot spam click so we're gonna
10:13 - have a filter which prevents the player
10:16 - from spam clicking to get strength so
10:19 - what we're going to do is we're going to
10:21 - say local remote data equals game
10:25 - come on get service server storage and
10:31 - then we're gonna say come on wait for
10:33 - child remote data and what we're going
10:37 - to do is just instead of storage here
10:39 - we're going to create a folder and we're
10:41 - going to call it remote a data so we're
10:45 - storing the debounce in server storage
10:47 - so that if they click the button again
10:49 - and we receive another request we can
10:51 - check that the debounce value which
10:53 - we're going to put in this folder and if
10:55 - it's true then we know that they have
10:57 - already clicked the button in the last
10:59 - second or so but if it's false we know
11:01 - that they haven't clicked the button and
11:03 - the cooldown which we're going to make
11:04 - has
11:06 - that's been completed so that they're
11:07 - able to click the button again so
11:09 - debounce basically works by preventing a
11:12 - user from doing an action multiple times
11:16 - within a set amount of time so what
11:20 - we're gonna do is we're going to add a
11:23 - little cool down here so local cool-down
11:25 - equals one okay so that is the number of
11:28 - seconds between clicks and you can edit
11:31 - that to your liking so we actually need
11:34 - to have a function here and an event
11:38 - which will trigger this function and the
11:40 - event is going to be listening out for
11:42 - this remote events to be cooled by the
11:46 - client and obviously one it is will pick
11:48 - it up and we will check to see if the
11:50 - player can gain strength whether that
11:54 - the bounce cooldown has been exceeded or
11:56 - not and if they're able to if the if if
12:00 - they're not currently in a cool-down
12:03 - then we will let them gain some strength
12:05 - so we can say replicated storage dot
12:08 - remotes dot lifts and then on server
12:13 - events like this column connect function
12:18 - player okay now what we're going to do
12:21 - what doing here is I've said we're
12:22 - picking up the request because obviously
12:25 - in the local script here in the module
12:27 - script we are we're saying fire server
12:29 - so that's triggering the events and
12:31 - firing a request to the server and then
12:34 - when we get that request so on server
12:37 - events we're going to connect up and
12:39 - execute this function so inside of here
12:43 - we actually want to first we're actually
12:45 - passing through the player as an
12:47 - argument here and an argument is
12:49 - basically some data which is passed
12:52 - through when this when this event is
12:56 - triggered okay and the data which gets
12:58 - passed through with this remote event is
13:00 - the player that triggered the event so
13:04 - we want to check first to see if the
13:06 - player has a remote data folder so we
13:09 - are going to actually need to create
13:11 - this folder and what we'll do is we'll
13:13 - do this when the player enters the game
13:15 - so let's go ahead and do that now
13:16 - we're going to just create another
13:19 - script just to keep things organized and
13:21 - this script is going to be called stats
13:25 - and while we're at it let's just change
13:27 - the other script to be called remotes
13:30 - because that's handling all of our
13:31 - remote events and remote functions so
13:34 - inside of these stats
13:35 - scripts we're going to do a very simple
13:38 - game dot player's thoughts player added
13:41 - function like this or events and this is
13:46 - going to run when a new player joins the
13:48 - game so what we want to do is we want to
13:51 - create a remote we want to once create a
13:55 - folder inside of the remote data folder
13:57 - with their name and then we can store
13:59 - their debounce value in there so what
14:02 - we're going to say is we're going to do
14:04 - local folder or remote data folder or
14:11 - just data folder because that's what
14:13 - I've called it in my script beforehand
14:16 - surds want to keep it all organized
14:17 - local data folder equals instance dot
14:20 - new and then we'll call that folder
14:23 - because we're inserting a folder
14:25 - instance and we're going to give that
14:27 - data folder and name and that name is
14:30 - going to be the name of the player we're
14:33 - also going to pass an argument over here
14:35 - because the argument that we can pass is
14:37 - the player that joined the game because
14:38 - obviously we don't know the name of any
14:40 - players that are going to join the game
14:41 - we can't predict the future so we just
14:43 - say player and that is going to be the
14:45 - player who joins the game and then what
14:48 - we're gonna do is when it's a data
14:49 - folder dot parent equals game dot server
14:52 - storage dot remote data okay let's just
14:57 - say game gets service in fact let's make
15:00 - a variable for server storage at the top
15:03 - here local server storage equals game
15:08 - colon get service server storage now we
15:14 - put the folder in server storage because
15:17 - it can't be accessed by any clients so
15:20 - exploiters cannot change it so if so
15:23 - they can't change it so that they're
15:24 - able to spam click for example so now
15:28 - that we've got that folder in there all
15:30 - we need to do is quit the debounce of
15:32 - value so we
15:33 - say local debounce equals instance dot
15:38 - new and then we say bull value because
15:41 - our there gonna be a true or false value
15:42 - whether the d bounce is in effect or not
15:45 - and let's just do a closing bracket I
15:48 - mean say debounce lock name equals d
15:51 - bouts and D bounce dots parent equals
15:55 - data folder so if we go ahead and join
15:58 - the game we should be able to head into
16:02 - the server you can see that the client
16:05 - actually can't access service storage
16:07 - but if we go to the server and we go to
16:10 - server storage inside the remote day so
16:12 - we have a folder with our name and we
16:14 - have our D bounce value now when we
16:17 - click and the event is fired this will
16:19 - be set to true and we'll have an if
16:21 - statement checking to see if it is true
16:23 - and if it is the player won't be allowed
16:25 - to get any more strength until it is set
16:28 - to false again so it's stopping them
16:30 - from being able to span clicks or like
16:33 - rate limiting so if we go back to the
16:37 - remote scripts we're now able to check
16:39 - to see if they have that remote data
16:41 - folder and if they don't have it then we
16:43 - can't actually action their request to
16:45 - give them strength because if they don't
16:48 - have a D bounce then they'll be able to
16:50 - spam click so we're just gonna say if
16:53 - not remote data : fine first child
16:58 - player dot name then let's just get rid
17:03 - of that then we can return no folder and
17:07 - end so what this is doing is we're
17:11 - checking to see if there is no folder so
17:14 - saying if and this part's not remote
17:17 - data so remote data is all we're doing
17:20 - here in the highlighted part is checking
17:22 - to see if they have a folder inside of
17:27 - that remote data and the not basically
17:30 - inverts inverses what we've got here so
17:34 - if there isn't a folder then we're just
17:36 - gonna return back to the local scripts
17:38 - because what we're doing here is we're
17:41 - just returning this function so that it
17:44 - just breaks okay it stops it does
17:46 - continue any longer because they don't
17:49 - have a phone they don't have a folder so
17:51 - we can't do anything else because we
17:53 - can't check to see if they've got a
17:54 - debounce so we just we just stop it but
17:56 - if they have got the folder then they
17:58 - will have passed that if statement check
18:01 - and any further code in this event will
18:04 - execute so we want to get their debounce
18:07 - value now because we know that they've
18:08 - got a folder if they've got to this
18:10 - point so we can say local debounce
18:12 - equals remote data and then we're gonna
18:15 - get their folder by saying in square
18:17 - brackets player dot name so that's just
18:19 - getting the the folder because off see
18:22 - if we did remote data dot player name it
18:24 - wouldn't make sense so we put the name
18:26 - in these square brackets and then we can
18:29 - just save dot d bounce
18:30 - so we've got the value and all we need
18:32 - to do now is check to see if not D
18:36 - bounce then this is a typical debounce
18:39 - script so not debounce basically means
18:42 - if the D bounce is false and if the D
18:45 - bounce is false then we're gonna allow
18:47 - them to gain strength okay
18:49 - so if the debounce is false then
18:52 - anything sort of this if statement is
18:54 - going to run so we can say D bounce
18:57 - dot value equals true because we want to
19:01 - set it to true and when it's true if
19:03 - they try to send another requesting then
19:06 - it's going this this this it's not going
19:09 - to pass through this if statement right
19:10 - it's true so they won't be able to spam
19:13 - click because their request will be
19:16 - blocked by this D bounce until it's set
19:18 - to false again so what we can do is we
19:21 - can give them some more strength so you
19:23 - can say player dot needed starts
19:25 - strength dot value equals player blocked
19:28 - leader stats dot strength value plus 25
19:34 - and now what we're going to do is
19:37 - obviously if you rebirth then you you're
19:39 - going to want to gain more strength
19:40 - because you've just given up all of your
19:42 - strength to start again from nothing so
19:45 - you're gonna want to have more strength
19:47 - each time you click when you rebirth so
19:51 - we can take 25 here and multiply it by
19:55 - the number of rebirths you have so we
19:58 - can have player dot leaders
20:00 - that's dr. rebirths value now obviously
20:05 - if this was set to zero and you had no
20:07 - rebirth
20:08 - you wouldn't be gaining any strength at
20:10 - all because 25 multiplied by zero would
20:13 - always give you zero so we have to add
20:15 - one so that even if you are on one
20:18 - rebirth or none at all you will still
20:20 - get 25 cash so what that's going to do
20:25 - is just give you some more strength so
20:28 - what we want to do is we want to wait
20:30 - for our cooldown to finish which we set
20:34 - over here to be one second so we're just
20:37 - waiting one second and then we will set
20:39 - D bounce back to false okay
20:42 - and obviously when the D bounce is set
20:43 - to false again then you will be able to
20:47 - get some more strength
20:48 - so the D bounce basically stops you from
20:50 - being able to spam click so we've
20:53 - actually given them more strength here
20:55 - but we haven't actually created these
20:57 - statistics yeah so let's go into our
20:59 - player added script in our stats and
21:02 - let's give them some leader stats and
21:04 - some strength so we can say local leader
21:06 - stats now if you didn't know lead to get
21:11 - a leaderboard in the top right corner of
21:12 - your screen
21:13 - you need to insert something called
21:14 - leader stats into your player and any
21:17 - values inside of that leader stats will
21:20 - be shown on the leader board right so we
21:23 - can say local leader stats equals and
21:26 - then we can say instance dot new folder
21:30 - and leader stats dot name equals leader
21:34 - stats now you need to make sure that
21:36 - leader stats is in lowercase and it's
21:38 - all one word oshi leader board is not
21:41 - going to show up and then we can say
21:43 - leader stats doc parent equals player
21:46 - and then we're going to do the same
21:48 - thing for the strength but we're just
21:51 - going to put the strength inside of the
21:53 - leader stats folder so local strength
21:56 - equals instance dot new and then we're
21:59 - going to do a number of value I'm gonna
22:03 - say strength dot name equals strength
22:06 - with capital S that's what I'm doing
22:09 - because it's a name and then we could
22:11 - say strength dot parent equals
22:13 - leader stats just like this so if we go
22:15 - back to the base plate and click play we
22:18 - should have some leader stats and there
22:20 - we go we have strength on our leader
22:22 - board here we can just go ahead and add
22:25 - the rebirth in right now so I'm gonna
22:28 - say local rebirths equals instance new
22:31 - and this is going to be an integer value
22:32 - because we only want integers so numbers
22:35 - that aren't decimal because you're only
22:36 - going to be able to rebirth once twice
22:39 - three times etc so int value and we
22:42 - could say rebirths don't name equals
22:44 - rebirths and rebirths dot parents equals
22:49 - leader stats all right let's go ahead
22:52 - and see if that works
22:54 - so we're gonna go and just see yep it's
22:58 - in our leader board over here so let's
23:01 - click on weights but we're not be
23:03 - strength when we click the tool let's go
23:06 - ahead and try and debug this then now if
23:10 - you see some printing already in the
23:12 - output on screen you can see actually
23:14 - above that if statement we've got a
23:16 - print fired and we've also got a print
23:19 - hello in the output that was because I
23:21 - was trying to just make sure that the
23:22 - leader starts working earlier on which
23:25 - they were and I forgot to take those
23:27 - prints out so you don't have to add them
23:28 - in that was just so I was trying to
23:30 - pinpoint the problem so the tutorial
23:33 - wasn't long enough because in the end
23:35 - that was not what was causing the tool
23:37 - to break so you don't need to worry
23:40 - about that I'm just gonna carry on with
23:41 - the debugging now so let's see if it
23:44 - gets past our if statement here so we
23:47 - can say prints got past the if statement
23:51 - and we'll see if that runs I'm purposely
23:55 - leaving this in the video so that you
23:57 - know how to debug your code so we're
23:59 - gonna click again and it did get past
24:02 - the if statement okay so let's go ahead
24:05 - and see if it gets past the debounce
24:08 - here I think it would so let's see if it
24:12 - gets past the debounce variable pretty
24:14 - sure it would so we'll click Play and
24:17 - we'll fire the events so they got past
24:20 - the debounce variable and now let's see
24:24 - if it gets past I think I found the
24:26 - issue dies
24:27 - I think I found the issue what we're
24:29 - doing is we're just saying debounce
24:30 - we're not saying debunk value because we
24:33 - need to actually check the value of this
24:35 - debounce we're not saying divan stock
24:36 - value so if I was to put this this print
24:40 - in here and we say get past the debounce
24:44 - if statement then I don't think this is
24:46 - going to print because it can't find the
24:49 - debounce value of course yep there we go
24:53 - so what it's doing is it's going to this
24:56 - D bounce at but it's not actually
24:57 - checking the data stored in that value
25:00 - so if you were to go to the service
25:02 - storage and remote data it would just be
25:06 - looking at this object it wouldn't
25:08 - actually be looking at the value here it
25:10 - would just be giving this object and it
25:12 - would be saying what do I do with this
25:13 - so we actually need to just say dot
25:15 - value okay if not debounce dot value and
25:20 - that should do it so we'll go ahead and
25:25 - run this again and we click on wait and
25:30 - there we go we are getting 25 strength
25:34 - per time and if I go ahead and try to
25:36 - auto click you can see I'm not it's not
25:38 - spamming although the event is being
25:40 - spamed
25:41 - our if statement our d bounce is
25:43 - preventing it from giving us multiple
25:45 - lots of strength and we're only being
25:47 - given strength every one second so there
25:50 - we go guys that is the first part of our
25:52 - simulator game finished now if you want
25:55 - to be able to do in data saving rebirths
25:59 - and much more then you're going to want
26:02 - to go to part 2 in this simulator series
26:05 - and that will be on your screen now so
26:07 - go ahead go to part 2 don't forget to
26:10 - subscribe to my youtube channel our and
26:12 - blocks by clicking on the logo and if
26:14 - you want to take the source code then
26:15 - you can click the join button at next to
26:17 - the subscribe button to become a channel
26:18 - member you'll get all of the source code
26:20 - straight away without having to do any
26:22 - of the work so thanks for watching and
26:24 - the salvan blocks telling you to keep
26:26 - scripting

Cleaned transcript:

in this video I'm gonna be showing you how to create your own simulator game on roblox so that you can get bigger and a rebirth when you hit a certain amount of strength let's go ahead and get started so welcome back to another tutorial my name is Alvin blocks if it's your first time on my channel make sure that you subscribe and you clicked on the notification mail so you never miss out when I upload a brand new video so we're gonna making a simple simulator game in this tutorial you'll be able to have a wait tool and obviously when you click the tool you will gain strength and once you hit a certain number of strengths you'll be able to rebirth and so all your stats will be reset but you gain one rebirth and you'll be able to gain more strength over time so let's begin by firstly making our work area look nice I'm gonna just set my base plate to a green color and to a grass texture and also gonna get rid of the studs on the top surface just like this there we go we've got a bright green base plates and I'm going to also make the sky look nice as well you don't have to do this I just like to do it because it makes the the game that we're working in look really nice so I'm gonna insert a sunless blue sky box into the lighting and we can get started with the simulator so what we're going to do first is design our tool now what I'm gonna do is I'm going to go on starter pack click on the plus and add a tool then I'm gonna name this tool wait the next thing that you're gonna want to do is design your tool what I'm gonna do I'm gonna insert a part into the workspace here and this part is going to be a simple little tool which which will be the thing which we lift okay so what I'm going to do is I'm just going to make it yellow and if you want to you can make this look much nicer but you need to make sure that you call it handle now I'm gonna make sure that it's unanchored and that can collide is set to false on the tool so that it doesn't collide with anything if it touches something so we're going to take this handle and I'm going to place it inside of the weight tool and if you go ahead and play the game you should see that we have a tool in our inventory and if we open it up you can see that we are holding a weight if you want to learn how to customize the tool keep watching and we'll get onto that later on in the video so next thing that we're going to do is we're going to start coding the the actual tool so first things that we're going to do is we're going to insert a local script into here and we're also going to need a module script for later on so I'm just going to insert those now so that we don't have to do those later on so first thing that we're going to do is we're going to work on our local script so what we're going to do is we're going to create a function which will run when we click the mouse so we're gonna do some variables first we're just gonna get our module script by saying local module equals a require and then in the brackets we can say script dot to parent dr. module script or wait for child module scripts just to make sure that it's fully loaded ready for us to call to we're then going to want to make sure we have the the closing bracket so you have two closing brackets on that line well then gonna have a variable for the player who's who's well these scripts are executing so they're local player will be game dot players dot local player and we're also going to get the players mouth because we're gonna need that for when they actually click the screen so we can say local mouse equals player current get mouse and we can also use the mouse for some onscreen effect when they click the mouse as well so to know when the player has clicked the mouse what we need to do is do an activated event so we can say script dot karent's dot activate it colon connects function in brackets and then another pair of brackets and then drop a line like this so this event will run whenever what this function will run whenever the player clicks their mouse so what we're going to do is we're going to create a function in our module script which will control all the flee be lifting and then we can call that module when we want to lift the weight so over here what we're going to do is we're going to drop a line and say a local replicated storage equals game codon get service a replicated storage just like this now in the replicated storage what we're going to do is we're going to store our remote events and when we play a click so we're going to fire and event to give them some more strength so that it is able to comply with those from enabled so that your game does not break and it is protected from exploiters so what we're going to do is want to create a function and this function will run when we click the mouse so we can just say function and then give it a name module dot lift okay and then drop a line and you should have this end added in here which shows that it is a function and any cut any code inside of this function will run when we call module dot lifts in the local script so we can just fire off our events but we need to actually create the event first so let's create a folder in replicated storage and we'll call this folder remotes because our remote events and functions are going to go in there and we're going to create a remote event called lift now if you don't know what a remote event is I'm just gonna quickly explain it so a roblox game works like this you have all of the players in the game which are called clients they're all connected to one big computer owned by roblox called the server and all the scripts on this server helped to control the game and what's happening at the moment and so what happens is when somebody moves their character the server will see this change and it will update everybody else's a game all of the clients to show that the the other that the player that moved so that their character gets moved so the server just controls all of the players in the game and what we do is if we ran code on the client then somebody could exploit that for their own good so if we handle all of the strength giving on the clients and we gave all of the strength in this local script then somebody could easily exploit that and give themselves in 999 infinite cache or strength so we do all of the checks on the server and we give the strength on the server because and no clients can actually see server scripts and they can't edit them so that the game cannot be exploited so that's why we're using remote events because it is a way to communicate between the client and the server but if you don't understand this I don't worry too much because especially for a beginner because I do have lots of more videos on filtering enabled on my channel so make sure you go ahead and check those out so inside of this activated events what we can do is we can cool our module IFFT by saying module which is our variable up here and then we can say dot lyft and that will basically call that function in the module okay so now that we've done that what we can do is we can go back to the module script and we can actually fire our remote events okay so to do this all we need to do let's give it a name first we're gonna call this one lift so we're gonna fire it by saying replicated storage come wait for child remotes and part we don't need to wait for it because this is going to be called when replicated storage has been what when the it's good the player is going to click their mouse so we don't actually need to wait for it because the game isn't starting up so we can say replicated storage dot remotes dot lift occurred on a fire server and this is going to send a request to this remote event and then we will pick it up in a server script and then we will give the player some strength when they when that request is received so we'll go ahead and make a script in service script service now and this is going to handle all of the remotes as we've said so let's go ahead and create a variable for replicated storage because that's where the remote events are located so we can say local replicated storage equals game current get service replicated storage what we can do now is we can get the what what what to do is we want to have some data okay what are some data about the players currently in the game and what this data is going to do is it's going to create debounce so that the player cannot spam click so we're gonna have a filter which prevents the player from spam clicking to get strength so what we're going to do is we're going to say local remote data equals game come on get service server storage and then we're gonna say come on wait for child remote data and what we're going to do is just instead of storage here we're going to create a folder and we're going to call it remote a data so we're storing the debounce in server storage so that if they click the button again and we receive another request we can check that the debounce value which we're going to put in this folder and if it's true then we know that they have already clicked the button in the last second or so but if it's false we know that they haven't clicked the button and the cooldown which we're going to make has that's been completed so that they're able to click the button again so debounce basically works by preventing a user from doing an action multiple times within a set amount of time so what we're gonna do is we're going to add a little cool down here so local cooldown equals one okay so that is the number of seconds between clicks and you can edit that to your liking so we actually need to have a function here and an event which will trigger this function and the event is going to be listening out for this remote events to be cooled by the client and obviously one it is will pick it up and we will check to see if the player can gain strength whether that the bounce cooldown has been exceeded or not and if they're able to if the if if they're not currently in a cooldown then we will let them gain some strength so we can say replicated storage dot remotes dot lifts and then on server events like this column connect function player okay now what we're going to do what doing here is I've said we're picking up the request because obviously in the local script here in the module script we are we're saying fire server so that's triggering the events and firing a request to the server and then when we get that request so on server events we're going to connect up and execute this function so inside of here we actually want to first we're actually passing through the player as an argument here and an argument is basically some data which is passed through when this when this event is triggered okay and the data which gets passed through with this remote event is the player that triggered the event so we want to check first to see if the player has a remote data folder so we are going to actually need to create this folder and what we'll do is we'll do this when the player enters the game so let's go ahead and do that now we're going to just create another script just to keep things organized and this script is going to be called stats and while we're at it let's just change the other script to be called remotes because that's handling all of our remote events and remote functions so inside of these stats scripts we're going to do a very simple game dot player's thoughts player added function like this or events and this is going to run when a new player joins the game so what we want to do is we want to create a remote we want to once create a folder inside of the remote data folder with their name and then we can store their debounce value in there so what we're going to say is we're going to do local folder or remote data folder or just data folder because that's what I've called it in my script beforehand surds want to keep it all organized local data folder equals instance dot new and then we'll call that folder because we're inserting a folder instance and we're going to give that data folder and name and that name is going to be the name of the player we're also going to pass an argument over here because the argument that we can pass is the player that joined the game because obviously we don't know the name of any players that are going to join the game we can't predict the future so we just say player and that is going to be the player who joins the game and then what we're gonna do is when it's a data folder dot parent equals game dot server storage dot remote data okay let's just say game gets service in fact let's make a variable for server storage at the top here local server storage equals game colon get service server storage now we put the folder in server storage because it can't be accessed by any clients so exploiters cannot change it so if so they can't change it so that they're able to spam click for example so now that we've got that folder in there all we need to do is quit the debounce of value so we say local debounce equals instance dot new and then we say bull value because our there gonna be a true or false value whether the d bounce is in effect or not and let's just do a closing bracket I mean say debounce lock name equals d bouts and D bounce dots parent equals data folder so if we go ahead and join the game we should be able to head into the server you can see that the client actually can't access service storage but if we go to the server and we go to server storage inside the remote day so we have a folder with our name and we have our D bounce value now when we click and the event is fired this will be set to true and we'll have an if statement checking to see if it is true and if it is the player won't be allowed to get any more strength until it is set to false again so it's stopping them from being able to span clicks or like rate limiting so if we go back to the remote scripts we're now able to check to see if they have that remote data folder and if they don't have it then we can't actually action their request to give them strength because if they don't have a D bounce then they'll be able to spam click so we're just gonna say if not remote data fine first child player dot name then let's just get rid of that then we can return no folder and end so what this is doing is we're checking to see if there is no folder so saying if and this part's not remote data so remote data is all we're doing here in the highlighted part is checking to see if they have a folder inside of that remote data and the not basically inverts inverses what we've got here so if there isn't a folder then we're just gonna return back to the local scripts because what we're doing here is we're just returning this function so that it just breaks okay it stops it does continue any longer because they don't have a phone they don't have a folder so we can't do anything else because we can't check to see if they've got a debounce so we just we just stop it but if they have got the folder then they will have passed that if statement check and any further code in this event will execute so we want to get their debounce value now because we know that they've got a folder if they've got to this point so we can say local debounce equals remote data and then we're gonna get their folder by saying in square brackets player dot name so that's just getting the the folder because off see if we did remote data dot player name it wouldn't make sense so we put the name in these square brackets and then we can just save dot d bounce so we've got the value and all we need to do now is check to see if not D bounce then this is a typical debounce script so not debounce basically means if the D bounce is false and if the D bounce is false then we're gonna allow them to gain strength okay so if the debounce is false then anything sort of this if statement is going to run so we can say D bounce dot value equals true because we want to set it to true and when it's true if they try to send another requesting then it's going this this this it's not going to pass through this if statement right it's true so they won't be able to spam click because their request will be blocked by this D bounce until it's set to false again so what we can do is we can give them some more strength so you can say player dot needed starts strength dot value equals player blocked leader stats dot strength value plus 25 and now what we're going to do is obviously if you rebirth then you you're going to want to gain more strength because you've just given up all of your strength to start again from nothing so you're gonna want to have more strength each time you click when you rebirth so we can take 25 here and multiply it by the number of rebirths you have so we can have player dot leaders that's dr. rebirths value now obviously if this was set to zero and you had no rebirth you wouldn't be gaining any strength at all because 25 multiplied by zero would always give you zero so we have to add one so that even if you are on one rebirth or none at all you will still get 25 cash so what that's going to do is just give you some more strength so what we want to do is we want to wait for our cooldown to finish which we set over here to be one second so we're just waiting one second and then we will set D bounce back to false okay and obviously when the D bounce is set to false again then you will be able to get some more strength so the D bounce basically stops you from being able to spam click so we've actually given them more strength here but we haven't actually created these statistics yeah so let's go into our player added script in our stats and let's give them some leader stats and some strength so we can say local leader stats now if you didn't know lead to get a leaderboard in the top right corner of your screen you need to insert something called leader stats into your player and any values inside of that leader stats will be shown on the leader board right so we can say local leader stats equals and then we can say instance dot new folder and leader stats dot name equals leader stats now you need to make sure that leader stats is in lowercase and it's all one word oshi leader board is not going to show up and then we can say leader stats doc parent equals player and then we're going to do the same thing for the strength but we're just going to put the strength inside of the leader stats folder so local strength equals instance dot new and then we're going to do a number of value I'm gonna say strength dot name equals strength with capital S that's what I'm doing because it's a name and then we could say strength dot parent equals leader stats just like this so if we go back to the base plate and click play we should have some leader stats and there we go we have strength on our leader board here we can just go ahead and add the rebirth in right now so I'm gonna say local rebirths equals instance new and this is going to be an integer value because we only want integers so numbers that aren't decimal because you're only going to be able to rebirth once twice three times etc so int value and we could say rebirths don't name equals rebirths and rebirths dot parents equals leader stats all right let's go ahead and see if that works so we're gonna go and just see yep it's in our leader board over here so let's click on weights but we're not be strength when we click the tool let's go ahead and try and debug this then now if you see some printing already in the output on screen you can see actually above that if statement we've got a print fired and we've also got a print hello in the output that was because I was trying to just make sure that the leader starts working earlier on which they were and I forgot to take those prints out so you don't have to add them in that was just so I was trying to pinpoint the problem so the tutorial wasn't long enough because in the end that was not what was causing the tool to break so you don't need to worry about that I'm just gonna carry on with the debugging now so let's see if it gets past our if statement here so we can say prints got past the if statement and we'll see if that runs I'm purposely leaving this in the video so that you know how to debug your code so we're gonna click again and it did get past the if statement okay so let's go ahead and see if it gets past the debounce here I think it would so let's see if it gets past the debounce variable pretty sure it would so we'll click Play and we'll fire the events so they got past the debounce variable and now let's see if it gets past I think I found the issue dies I think I found the issue what we're doing is we're just saying debounce we're not saying debunk value because we need to actually check the value of this debounce we're not saying divan stock value so if I was to put this this print in here and we say get past the debounce if statement then I don't think this is going to print because it can't find the debounce value of course yep there we go so what it's doing is it's going to this D bounce at but it's not actually checking the data stored in that value so if you were to go to the service storage and remote data it would just be looking at this object it wouldn't actually be looking at the value here it would just be giving this object and it would be saying what do I do with this so we actually need to just say dot value okay if not debounce dot value and that should do it so we'll go ahead and run this again and we click on wait and there we go we are getting 25 strength per time and if I go ahead and try to auto click you can see I'm not it's not spamming although the event is being spamed our if statement our d bounce is preventing it from giving us multiple lots of strength and we're only being given strength every one second so there we go guys that is the first part of our simulator game finished now if you want to be able to do in data saving rebirths and much more then you're going to want to go to part 2 in this simulator series and that will be on your screen now so go ahead go to part 2 don't forget to subscribe to my youtube channel our and blocks by clicking on the logo and if you want to take the source code then you can click the join button at next to the subscribe button to become a channel member you'll get all of the source code straight away without having to do any of the work so thanks for watching and the salvan blocks telling you to keep scripting
