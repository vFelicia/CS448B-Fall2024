With timestamps:

00:00 - hi everyone Alan rocks here welcome to
00:01 - episode 20 in my scripting series today
00:04 - we will be looking at four loops now
00:07 - this is a different type of loop to the
00:10 - in pairs loop which we looked at before
00:11 - but still very crucial and you need to
00:14 - know it so what does a four loop do well
00:18 - a four loop allows us to run code for a
00:22 - set number of times so if we want to run
00:24 - the same code ten times over we want to
00:27 - just run it ten times at once we can use
00:31 - a for loop now compared to the other
00:34 - loops that we've looked at so a while
00:36 - loop for example that will run forever
00:39 - well indefinitely until a condition is
00:41 - met whereas this loop is brilliant
00:44 - if you know that you need to run code
00:47 - for a set number of times and trust me
00:49 - you will use it a lot so I like to
00:53 - explain this using the say Formula SAE I
00:56 - so like sense a SE SEI and that stands
01:01 - for start end and increase so these
01:05 - three numbers here they are say numbers
01:08 - because this one is called the start
01:11 - value this one's called the end value
01:13 - and this one is called the increase
01:15 - value so what is the point in these
01:19 - three numbers well we have a variable
01:22 - which we have created here when we have
01:25 - written out our for loop and this
01:28 - variable which is highlighted in blue
01:30 - this I it stands for index is the index
01:34 - value and the reason that it will be
01:37 - important is what I'll show you actually
01:39 - so if I just actually I won't do that
01:43 - what I will do is I will tell you that
01:46 - this I variable here it is a variable so
01:50 - just without all the local stuff because
01:53 - it's a part of this for loop it holds a
01:55 - number so what we can do is we can tell
01:58 - the script that's or if we want this
02:02 - hello - to print out five times what
02:06 - will happen is what we need to firstly
02:08 - tell the script where I will start that
02:10 - so I is going to start off at
02:13 - zero if I will start off at one we then
02:17 - want it to end at five so and then the
02:22 - eye over here the increased value so
02:25 - we've got our starts so I is gonna start
02:27 - off at a value of one and every time
02:31 - this four loop goes round it's going to
02:33 - increase by a number and when it gets to
02:37 - five it's going to end the four loop and
02:39 - the number that increases by each time
02:42 - is this one here the increased value so
02:45 - this one so every time the four loop
02:48 - goes round it finishes off the code
02:49 - inside of here
02:50 - it's gonna get to the end and then if I
02:53 - isn't equal to five it's gonna go round
02:56 - again it's gonna keep going round you're
02:58 - gonna keep increasing I by one because
03:01 - that's our increased value it's gonna
03:02 - keep on increasing it by one until I is
03:05 - five and when I is five it will break
03:08 - out with the four loop so if we have
03:10 - some code down here we print out finish
03:13 - okay that will only print out when this
03:16 - four loop has completed because we start
03:20 - off here we then run the code which is
03:23 - inside of the for loop when that's
03:24 - finished where we'll obviously gets the
03:26 - the end but will realize that we that I
03:29 - is it hasn't it hasn't reached its end
03:32 - value yet so we will just go straight
03:35 - back to the top
03:36 - I will then increase so it will be I
03:42 - plus one because I is our increased
03:45 - value and then it will keep on doing
03:47 - that until I is five now this can sound
03:50 - quite confusing but we will do a couple
03:54 - of examples to show you so let's print
03:56 - out hello
03:57 - and we'll also print out the I value and
04:01 - this should make it clearer for you so
04:04 - what should happen is it should print
04:06 - out to begin with hello one because our
04:10 - I variable it's starting value is going
04:14 - to be one so when we begin I is going to
04:18 - be equal to one then and we've run the
04:23 - this print line we will get to the end
04:26 - and we'll head back to the start and
04:28 - then because I hasn't already it come
04:32 - 5:00 yet and we still at 1:00 because
04:34 - that's our starting value we increase it
04:36 - by one because we're on the second time
04:38 - now so I is now - so you can also think
04:41 - of as being the number of times that the
04:43 - code has run so now they're on our
04:46 - second time over it'll prints out hello
04:48 - - then it should get to the end go back
04:52 - to the start increase by one because I
04:54 - thought increase value so it's now three
04:57 - it will print the code go back to the
04:59 - start it increase by one so it's now
05:02 - four it will print out hello four get to
05:05 - the end go back to the start increase by
05:07 - one and now it is five now on the fifth
05:10 - time round because five is our end value
05:12 - it will still print out because we have
05:15 - we said we want you to do it until it
05:17 - gets to five and when it is five it will
05:20 - do it once more and then it will stop
05:21 - and then we go round again but then we
05:24 - realize that if we add one to I it will
05:28 - become six and we don't need to do that
05:30 - cuz we're already at five so let's just
05:31 - print out and see what happens so there
05:34 - you go
05:34 - what we've done is we've printed out
05:37 - hello and also the I value so every time
05:41 - we've finished this print line I has
05:44 - increased by one and we've looped round
05:47 - again so the value of I is increased
05:49 - based on these three numbers so it's
05:51 - printed out hello one hello - hello
05:53 - three hello four hello five and if you
05:56 - wanted to see it a little bit slower
05:57 - you could add a weight in here so let's
06:00 - just add a weight one to see what
06:01 - happens we run again so it's done one
06:05 - it's gone around again is - it's just
06:07 - gonna keep on looping around the only
06:09 - difference is that we delayed it by one
06:12 - second before it moved on so when it
06:16 - does reach the end of this code which is
06:18 - in between the two lines
06:19 - it will then add one on to the current
06:24 - value of I but if you changed this
06:27 - increased value to something different
06:29 - like - well it's no longer going to
06:32 - increase by one every time it's going to
06:34 - increase by two every time so
06:37 - let's see what happens this time because
06:39 - it surely it shouldn't go hello one
06:42 - hello - hello three hundred four hundred
06:43 - five you can't do that he's not going up
06:45 - by one anymore suitcase just gone
06:48 - hello one hello three hello five finish
06:52 - because the starting value was 1 so it
06:57 - printed out hello one we then waited one
07:00 - then we Lutz back around and because the
07:03 - starting value of I was 1 and the
07:06 - increased value is 2 we then add 2 to
07:10 - its current value and the current value
07:12 - is 1 so 1 & 2 is 3 ends whites printed
07:16 - out hello 3 then it's waited one second
07:19 - it's gone around again and because I is
07:24 - now three because that's what its value
07:29 - it was increased by 2 last time we then
07:31 - increase it by 2 again we print out
07:34 - hello 5 and now we're actually at our
07:37 - end value because we've got 2 5 so it's
07:41 - not going to carry on it's going to
07:42 - print finish now you notice last time we
07:45 - had 5 hello prints we know we now only
07:47 - have 3 hello prints beakers because we
07:51 - increased by 2 each time so they're
07:53 - increasing by one we we didn't have to
07:56 - go around 5 times we only have to go
07:58 - around 3 times because we still the I
08:01 - value still it got to 5 and then it
08:05 - ended because we've told the scripts we
08:07 - want it to end the for loop hence the
08:09 - end value we want to end the for loop
08:11 - when it gets to 5 when I gets to 5 we
08:14 - end the for loop so you could set this
08:17 - to 5 if you wanted to and if we run it
08:21 - it's gonna say hello one and finish
08:23 - because if we were to add 5 on to I it
08:30 - would become 6 and 6 is over 5 so we
08:32 - don't need to go around again because
08:33 - we're we're already greater than our end
08:36 - value well if we changed it to let's try
08:39 - 4 I see what happens when we change to 4
08:42 - yes hello 1
08:43 - hello 5 finish
08:46 - because we started off with an i value
08:48 - of one we did our code inside of here
08:51 - then we went back to the start and when
08:52 - we go back to the start I increases by
08:55 - the increased value and because it's
08:59 - four will do I which is currently one
09:02 - one at four is five and because it is
09:07 - equal to our end value it will print out
09:09 - hello get to the end and finish so it it
09:12 - will only run twice now you may be
09:17 - wondering well this is a bit pointless
09:19 - give me a good example of where this can
09:21 - be used and sure enough I can do that so
09:24 - remembering where you may know in some
09:26 - games there was an intermission where it
09:29 - counts down from a certain number or it
09:31 - counts up to a certain number so after
09:33 - 30 seconds the game will start so if you
09:36 - wanted to do this yourself without any
09:38 - knowledge of for loops you would have to
09:40 - go into mission 30 and you have to do a
09:45 - weight one and another one and change it
09:48 - to 29 and do another one and change it
09:54 - to 28 so that it looks like you're
09:56 - counting down now that's going to take
09:59 - up loads of lines of code and if you
10:01 - wanted to change maybe the intermission
10:03 - to something else like game starts soon
10:05 - you'd have to change all the lines and
10:08 - that would take up too much of your time
10:10 - so what if I told you you can use a for
10:12 - loop for this what's very very simple
10:14 - because if we just increase I by 1 each
10:18 - time and we want to go from 1 to 30 in
10:24 - fact we'll start at 30 and we'll go down
10:28 - to 1
10:29 - so we've reversed it so we're starting
10:32 - at 30 we want to end it when we get down
10:37 - to 1 but we also want to decrease we
10:41 - don't wanna increase so because this is
10:43 - an increased value and it increases the
10:46 - I by 1 every time we don't want this we
10:48 - want to decrease so when we're counting
10:51 - down we do a minus 1 because it is going
10:55 - to still add it so it let's imagine that
10:57 - I is 30 it's going to do third
11:00 - ad minus one and if you've done maths
11:03 - yet you will know that a plus and a
11:06 - minus so positive and a negative will
11:09 - make a negative so it's actually 30
11:11 - minus 1 so that becomes 29 so you can
11:14 - see how it's counting down so now let's
11:17 - change this to say intermission and it's
11:20 - very important that we have the weight 1
11:23 - in here by the way guys the else is just
11:25 - going to blaze through it and we won't
11:28 - be able to see it count down every
11:29 - second because it will just do it
11:31 - instantly let's run this and see what
11:33 - happens so there we go
11:34 - intermission 30 29 28 27 26 you can see
11:39 - it is counting down from 30 all the way
11:41 - down to 1 decreasing by 1 each time and
11:45 - we've also got a wait one second in
11:47 - there so that it is it is an actual 1
11:50 - second countdown if we didn't have that
11:52 - white one it would just run instantly
11:54 - and it print out all of these
11:56 - intermission lines straight away we
11:58 - wouldn't have this delay so you can see
12:01 - the weight one is delaying it before it
12:03 - it takes one away from each intermission
12:06 - and there we go when it gets down to one
12:08 - it will just break out of the for loop
12:10 - because it's finished and if there were
12:11 - then any more code down here that
12:13 - printed out finish it would run so you
12:17 - can also change we can change the weight
12:19 - and we can see it happen
12:21 - 10 times faster or however many times
12:24 - faster there we go and you can see when
12:26 - it got to intermission 1 it broke out of
12:29 - the for loop and it just carried on with
12:31 - the rest of the code so this is great if
12:33 - you have some code down here which is
12:35 - gonna run your your main game scripts
12:37 - because that will just happen as soon as
12:40 - the for loop is finished
12:41 - so we have our start value which is what
12:44 - the I value will will start at all its
12:47 - starting value is the end value is what
12:50 - we want I to be in order to stop the for
12:53 - loop and then the minus or the 1 the
12:56 - plus or minus increase value increase or
12:59 - decrease value
13:01 - is what it will increase or decrease by
13:04 - every pass when I say every pass I mean
13:07 - every time it gets to the bottom of the
13:09 - code in the for loop so once it's
13:11 - executed this print line and executed
13:14 - this white line it's got to the end and
13:16 - it's gone back to the start that's what
13:18 - we call a pass so in this case there
13:20 - will be 30 passes before it finishes
13:24 - okay so there we go that is what a full
13:28 - loop is very very useful indeed
13:32 - so let's just do a quick recap so this
13:36 - four loop will run our code a specific
13:39 - amount of times so we can we have
13:42 - control over how many times it runs we
13:45 - can tell the scripts what we want I to
13:48 - start at what we want I to finish at and
13:50 - what we want to increase that I value by
13:53 - each time so the code will keep on
13:56 - running until that eye becomes a certain
13:59 - value and this is very powerful we can
14:01 - use it to count up count down or to
14:04 - perform code certain number of times it
14:06 - doesn't have to be an intermission just
14:08 - have to be a countdown you don't have to
14:10 - print out the eye every single time if I
14:13 - wanted to create a part like this and I
14:22 - said my part got parent equals workspace
14:25 - and my part dock position respect to 3
14:31 - got new 10 10 10 this is just putting it
14:34 - in the air what would happen is if I put
14:38 - a weight in here so we can actually see
14:39 - it happening
14:40 - it would create that part at 30 times
14:42 - even though that we're decreasing
14:44 - doesn't matter it's still gonna run 30
14:46 - times because it's counting down from 30
14:48 - to 1 it's gonna run 30 times if I was
14:51 - counting up from 1 to 30 it's still
14:52 - going to run 30 times so doesn't matter
14:56 - if you're doing an increase or a
14:57 - decrease on practical things like this
15:00 - if you are doing an intuition of course
15:01 - it would because you'd be counting up
15:03 - when you might want to be counting down
15:05 - or something but yeah there you go you
15:08 - can see it inserted 30 parts and we'll
15:12 - run it again there we go great
15:15 - nice tower then it collapses and it says
15:17 - finished when it gets to the end so what
15:19 - it's doing is let's just imagine that
15:22 - the starting value is is 1 and then it
15:25 - ends at 30 and we increase by one just
15:27 - to make it a bit clearer for you so I is
15:30 - going to be one to start with it's gonna
15:32 - insert a part then it's gonna add one on
15:35 - so I is now to insert a part and I keep
15:39 - doing this gonna keep on adding one to I
15:40 - then let's imagine we're at 29 and it
15:45 - makes the part goes round again I is now
15:48 - 30 so it will make the part and when he
15:52 - gets to the end because we're at 30 now
15:54 - I is now 30 we just get to the end and
15:56 - we finish and I'll prove it to you so
15:59 - I'll print out I as well so let's look
16:03 - at the output as it generates these
16:04 - parts so we can see how many parts it is
16:07 - generated gets to 30 and then it
16:09 - finishes cuz it breaks out of the for
16:10 - loop so very very useful so just to
16:12 - conclude for loops they repeat code a
16:15 - certain number of times a specific
16:17 - number of times and we have complete
16:18 - control over that we have control over
16:20 - what it increases by each time so if I
16:23 - was to change this increased value to
16:24 - two so I would increase by two every
16:27 - pass it's actually gonna run 15 times
16:30 - and only half and number a parts are
16:33 - generated and that's because it's still
16:36 - counting up to 30 but it's just counting
16:39 - up by two every time so instead of going
16:41 - one two three whereas one three times
16:43 - we're going from straight to one two
16:45 - three so it's printed out twice so it's
16:48 - basically half the number of parts that
16:50 - are generated because we have got 230 in
16:54 - less passes because we have increased I
16:57 - by two instead of one each time so it's
17:00 - is going 1 3 5 7 9 11 13 15 17 19 21 21
17:05 - 23 25 27 29 and then it gets through 30
17:10 - because we added 2 to 29 who gets 31 and
17:13 - we don't want 31 we want 30 so it just
17:15 - breaks out after that so it runs 15
17:18 - times instead so there you go
17:21 - so the in pairs for loop and I do
17:24 - recommend you check out the video for
17:25 - that it's on the channel episode 18 I
17:28 - believe and also the one before that
17:30 - which is 17 for tables very very useful
17:33 - that will run depending on how many
17:35 - items that are in the table so if
17:37 - there's 20 items in the table that for
17:40 - loop will run 20 times this one however
17:43 - that one is more geared to tables this
17:45 - one is for refuge from a repeat certain
17:46 - code and for a set number of times very
17:49 - very useful so and we can tell the for
17:54 - loop we can control it using those three
17:55 - variables so we've got the start and an
17:58 - increase the order is essential you
18:01 - can't go putting the increased value at
18:03 - the start because the way that is set
18:06 - out the order is crucial so the first
18:08 - one is to start the second one is the
18:10 - end the third one it's the increase and
18:12 - just remember say sei like sensei that
18:19 - is crucial for for loops good way to
18:21 - remember it so start and increase or
18:24 - decrease so thanks for watching if you
18:26 - enjoyed this video please do subscribe
18:27 - to the channel you can click the album
18:28 - rocks logo in the middle of your screen
18:30 - please do like the video as well share
18:32 - it with anybody that you know who would
18:34 - be interested in learning about for
18:36 - loops very useful for roadblocks at
18:38 - development and you will be using them
18:39 - all the time
18:40 - I guarantee leave a comment with any
18:42 - future video ideas and I will see you in
18:45 - the next one Cheers
18:46 - bye

Cleaned transcript:

hi everyone Alan rocks here welcome to episode 20 in my scripting series today we will be looking at four loops now this is a different type of loop to the in pairs loop which we looked at before but still very crucial and you need to know it so what does a four loop do well a four loop allows us to run code for a set number of times so if we want to run the same code ten times over we want to just run it ten times at once we can use a for loop now compared to the other loops that we've looked at so a while loop for example that will run forever well indefinitely until a condition is met whereas this loop is brilliant if you know that you need to run code for a set number of times and trust me you will use it a lot so I like to explain this using the say Formula SAE I so like sense a SE SEI and that stands for start end and increase so these three numbers here they are say numbers because this one is called the start value this one's called the end value and this one is called the increase value so what is the point in these three numbers well we have a variable which we have created here when we have written out our for loop and this variable which is highlighted in blue this I it stands for index is the index value and the reason that it will be important is what I'll show you actually so if I just actually I won't do that what I will do is I will tell you that this I variable here it is a variable so just without all the local stuff because it's a part of this for loop it holds a number so what we can do is we can tell the script that's or if we want this hello to print out five times what will happen is what we need to firstly tell the script where I will start that so I is going to start off at zero if I will start off at one we then want it to end at five so and then the eye over here the increased value so we've got our starts so I is gonna start off at a value of one and every time this four loop goes round it's going to increase by a number and when it gets to five it's going to end the four loop and the number that increases by each time is this one here the increased value so this one so every time the four loop goes round it finishes off the code inside of here it's gonna get to the end and then if I isn't equal to five it's gonna go round again it's gonna keep going round you're gonna keep increasing I by one because that's our increased value it's gonna keep on increasing it by one until I is five and when I is five it will break out with the four loop so if we have some code down here we print out finish okay that will only print out when this four loop has completed because we start off here we then run the code which is inside of the for loop when that's finished where we'll obviously gets the the end but will realize that we that I is it hasn't it hasn't reached its end value yet so we will just go straight back to the top I will then increase so it will be I plus one because I is our increased value and then it will keep on doing that until I is five now this can sound quite confusing but we will do a couple of examples to show you so let's print out hello and we'll also print out the I value and this should make it clearer for you so what should happen is it should print out to begin with hello one because our I variable it's starting value is going to be one so when we begin I is going to be equal to one then and we've run the this print line we will get to the end and we'll head back to the start and then because I hasn't already it come 500 yet and we still at 100 because that's our starting value we increase it by one because we're on the second time now so I is now so you can also think of as being the number of times that the code has run so now they're on our second time over it'll prints out hello then it should get to the end go back to the start increase by one because I thought increase value so it's now three it will print the code go back to the start it increase by one so it's now four it will print out hello four get to the end go back to the start increase by one and now it is five now on the fifth time round because five is our end value it will still print out because we have we said we want you to do it until it gets to five and when it is five it will do it once more and then it will stop and then we go round again but then we realize that if we add one to I it will become six and we don't need to do that cuz we're already at five so let's just print out and see what happens so there you go what we've done is we've printed out hello and also the I value so every time we've finished this print line I has increased by one and we've looped round again so the value of I is increased based on these three numbers so it's printed out hello one hello hello three hello four hello five and if you wanted to see it a little bit slower you could add a weight in here so let's just add a weight one to see what happens we run again so it's done one it's gone around again is it's just gonna keep on looping around the only difference is that we delayed it by one second before it moved on so when it does reach the end of this code which is in between the two lines it will then add one on to the current value of I but if you changed this increased value to something different like well it's no longer going to increase by one every time it's going to increase by two every time so let's see what happens this time because it surely it shouldn't go hello one hello hello three hundred four hundred five you can't do that he's not going up by one anymore suitcase just gone hello one hello three hello five finish because the starting value was 1 so it printed out hello one we then waited one then we Lutz back around and because the starting value of I was 1 and the increased value is 2 we then add 2 to its current value and the current value is 1 so 1 & 2 is 3 ends whites printed out hello 3 then it's waited one second it's gone around again and because I is now three because that's what its value it was increased by 2 last time we then increase it by 2 again we print out hello 5 and now we're actually at our end value because we've got 2 5 so it's not going to carry on it's going to print finish now you notice last time we had 5 hello prints we know we now only have 3 hello prints beakers because we increased by 2 each time so they're increasing by one we we didn't have to go around 5 times we only have to go around 3 times because we still the I value still it got to 5 and then it ended because we've told the scripts we want it to end the for loop hence the end value we want to end the for loop when it gets to 5 when I gets to 5 we end the for loop so you could set this to 5 if you wanted to and if we run it it's gonna say hello one and finish because if we were to add 5 on to I it would become 6 and 6 is over 5 so we don't need to go around again because we're we're already greater than our end value well if we changed it to let's try 4 I see what happens when we change to 4 yes hello 1 hello 5 finish because we started off with an i value of one we did our code inside of here then we went back to the start and when we go back to the start I increases by the increased value and because it's four will do I which is currently one one at four is five and because it is equal to our end value it will print out hello get to the end and finish so it it will only run twice now you may be wondering well this is a bit pointless give me a good example of where this can be used and sure enough I can do that so remembering where you may know in some games there was an intermission where it counts down from a certain number or it counts up to a certain number so after 30 seconds the game will start so if you wanted to do this yourself without any knowledge of for loops you would have to go into mission 30 and you have to do a weight one and another one and change it to 29 and do another one and change it to 28 so that it looks like you're counting down now that's going to take up loads of lines of code and if you wanted to change maybe the intermission to something else like game starts soon you'd have to change all the lines and that would take up too much of your time so what if I told you you can use a for loop for this what's very very simple because if we just increase I by 1 each time and we want to go from 1 to 30 in fact we'll start at 30 and we'll go down to 1 so we've reversed it so we're starting at 30 we want to end it when we get down to 1 but we also want to decrease we don't wanna increase so because this is an increased value and it increases the I by 1 every time we don't want this we want to decrease so when we're counting down we do a minus 1 because it is going to still add it so it let's imagine that I is 30 it's going to do third ad minus one and if you've done maths yet you will know that a plus and a minus so positive and a negative will make a negative so it's actually 30 minus 1 so that becomes 29 so you can see how it's counting down so now let's change this to say intermission and it's very important that we have the weight 1 in here by the way guys the else is just going to blaze through it and we won't be able to see it count down every second because it will just do it instantly let's run this and see what happens so there we go intermission 30 29 28 27 26 you can see it is counting down from 30 all the way down to 1 decreasing by 1 each time and we've also got a wait one second in there so that it is it is an actual 1 second countdown if we didn't have that white one it would just run instantly and it print out all of these intermission lines straight away we wouldn't have this delay so you can see the weight one is delaying it before it it takes one away from each intermission and there we go when it gets down to one it will just break out of the for loop because it's finished and if there were then any more code down here that printed out finish it would run so you can also change we can change the weight and we can see it happen 10 times faster or however many times faster there we go and you can see when it got to intermission 1 it broke out of the for loop and it just carried on with the rest of the code so this is great if you have some code down here which is gonna run your your main game scripts because that will just happen as soon as the for loop is finished so we have our start value which is what the I value will will start at all its starting value is the end value is what we want I to be in order to stop the for loop and then the minus or the 1 the plus or minus increase value increase or decrease value is what it will increase or decrease by every pass when I say every pass I mean every time it gets to the bottom of the code in the for loop so once it's executed this print line and executed this white line it's got to the end and it's gone back to the start that's what we call a pass so in this case there will be 30 passes before it finishes okay so there we go that is what a full loop is very very useful indeed so let's just do a quick recap so this four loop will run our code a specific amount of times so we can we have control over how many times it runs we can tell the scripts what we want I to start at what we want I to finish at and what we want to increase that I value by each time so the code will keep on running until that eye becomes a certain value and this is very powerful we can use it to count up count down or to perform code certain number of times it doesn't have to be an intermission just have to be a countdown you don't have to print out the eye every single time if I wanted to create a part like this and I said my part got parent equals workspace and my part dock position respect to 3 got new 10 10 10 this is just putting it in the air what would happen is if I put a weight in here so we can actually see it happening it would create that part at 30 times even though that we're decreasing doesn't matter it's still gonna run 30 times because it's counting down from 30 to 1 it's gonna run 30 times if I was counting up from 1 to 30 it's still going to run 30 times so doesn't matter if you're doing an increase or a decrease on practical things like this if you are doing an intuition of course it would because you'd be counting up when you might want to be counting down or something but yeah there you go you can see it inserted 30 parts and we'll run it again there we go great nice tower then it collapses and it says finished when it gets to the end so what it's doing is let's just imagine that the starting value is is 1 and then it ends at 30 and we increase by one just to make it a bit clearer for you so I is going to be one to start with it's gonna insert a part then it's gonna add one on so I is now to insert a part and I keep doing this gonna keep on adding one to I then let's imagine we're at 29 and it makes the part goes round again I is now 30 so it will make the part and when he gets to the end because we're at 30 now I is now 30 we just get to the end and we finish and I'll prove it to you so I'll print out I as well so let's look at the output as it generates these parts so we can see how many parts it is generated gets to 30 and then it finishes cuz it breaks out of the for loop so very very useful so just to conclude for loops they repeat code a certain number of times a specific number of times and we have complete control over that we have control over what it increases by each time so if I was to change this increased value to two so I would increase by two every pass it's actually gonna run 15 times and only half and number a parts are generated and that's because it's still counting up to 30 but it's just counting up by two every time so instead of going one two three whereas one three times we're going from straight to one two three so it's printed out twice so it's basically half the number of parts that are generated because we have got 230 in less passes because we have increased I by two instead of one each time so it's is going 1 3 5 7 9 11 13 15 17 19 21 21 23 25 27 29 and then it gets through 30 because we added 2 to 29 who gets 31 and we don't want 31 we want 30 so it just breaks out after that so it runs 15 times instead so there you go so the in pairs for loop and I do recommend you check out the video for that it's on the channel episode 18 I believe and also the one before that which is 17 for tables very very useful that will run depending on how many items that are in the table so if there's 20 items in the table that for loop will run 20 times this one however that one is more geared to tables this one is for refuge from a repeat certain code and for a set number of times very very useful so and we can tell the for loop we can control it using those three variables so we've got the start and an increase the order is essential you can't go putting the increased value at the start because the way that is set out the order is crucial so the first one is to start the second one is the end the third one it's the increase and just remember say sei like sensei that is crucial for for loops good way to remember it so start and increase or decrease so thanks for watching if you enjoyed this video please do subscribe to the channel you can click the album rocks logo in the middle of your screen please do like the video as well share it with anybody that you know who would be interested in learning about for loops very useful for roadblocks at development and you will be using them all the time I guarantee leave a comment with any future video ideas and I will see you in the next one Cheers bye
