With timestamps:

00:00 - okay today we're going to be looking at
00:03 - task. spawn so this is a great way to
00:08 - run code in parallel so what that means
00:10 - is you'll have you'll have a script for
00:12 - example and usually what happens is the
00:15 - code runs in stages right it does one
00:17 - line at a time so if we were to print
00:19 - hello and then we were to wait 5 seconds
00:22 - and then print goodbye we'd obviously
00:25 - we'd get the hello printed out and then
00:27 - we'd wait 5 seconds and then it'd print
00:29 - goodbye but hello and goodbye wouldn't
00:31 - print out at the same time because it's
00:33 - being held up by this task. weight uh
00:36 - but sometimes you have code that you you
00:40 - you run it at a certain time in the
00:42 - script but you don't you know you don't
00:45 - necess necessarily want to hold up the
00:47 - rest of the script so like you don't
00:49 - mind it being run in parallel so how do
00:52 - we make code run in parallel and when I
00:54 - say in parallel I just mean run it at
00:56 - the same time as the rest of the script
00:58 - you can sort of branch code off
01:00 - into its own subscript that makes sense
01:04 - um it's still part of this script but
01:06 - it's just it's running at the same time
01:08 - as the rest of the script so let me give
01:10 - you an example if I was to put uh
01:14 - another print here and I'll say 5c wait
01:19 - finished what would happen is we we' get
01:22 - the print hello it' wait 5 seconds and
01:24 - then print 5sec waight finished and
01:27 - print goodbye would happen at the same
01:28 - time but if I said task. spawn
01:33 - function okay uh and I put this task.
01:38 - weight uh
01:40 - here what would happen is we would get
01:42 - hello we' get goodbye and 5 seconds
01:44 - later we'd get 5sec weight finished so
01:47 - we've got hello and goodbye the script
01:49 - is carried on because we've spawned this
01:52 - function into its own thread so what
01:54 - happens is we've branched off so we've
01:57 - said okay hello and we say okay what's
01:59 - next ah task. spawn so that means run
02:03 - this code now but carry on immediately
02:06 - so we've just we've just put this code
02:08 - into its own thread and it's it's
02:10 - running parallel to the to the script so
02:12 - it's running at the same time it's not
02:14 - holding up the script so uh whenever you
02:17 - put code in a task. spawn it means you
02:20 - are uh letting the script continue and
02:23 - you running the code inside the task o
02:25 - spawn at the same time in parallel okay
02:31 - now it's kind of hard to see the use of
02:33 - this um but it will be very practical
02:36 - when you're coding because sometimes
02:38 - like I say there's things that you don't
02:39 - need to wait for for example if you're
02:42 - looping through something perhaps you're
02:44 - looping through all of the players in
02:46 - the game to you know set their
02:49 - characters transparency you don't need
02:52 - to hold up the rest of your script in
02:54 - that case because it's just a like a
02:56 - something that can be done in the
02:57 - background you know we don't have to
02:58 - wait for for that to be done before we
03:00 - can continue so you can put it into a
03:02 - into a task. spawn and the other nice
03:05 - thing about it is you can actually keep
03:07 - a variable for your thread so the thread
03:10 - is almost like the secondary script it's
03:12 - the it's the bit that we've branched off
03:14 - it's the secondary subscript which is
03:16 - running this code inside the function
03:18 - but now that we've got the thread as a
03:20 - variable we can kill that thread later
03:22 - on so you know perhaps we we want to end
03:25 - this after 3 seconds we don't we don't
03:27 - want it to print out the 5-sec weight
03:29 - anymore you know we don't need it we
03:31 - could say
03:32 - thread uh I think it's it's cancel yeah
03:36 - you say task. cancel and you then put
03:38 - the thread in there and uh so what we'll
03:40 - expect here is the the thread will start
03:44 - but then we cancel it after 3 seconds
03:46 - and obviously that's not long enough to
03:48 - see the 5sec weight print out so we
03:51 - should just get the hello and we should
03:53 - get the goodbye after 3 seconds yeah
03:55 - which we have and if you look at that
03:57 - we've not actually had the 5c weight
03:59 - finish because we've canceled the thread
04:02 - so that was a quick look into task.
04:03 - spawn and task. thread task. cancel
04:06 - sorry uh it's it's a type of threading
04:09 - multi-threading um which is basically
04:11 - running code um in
04:13 - parallel so yeah hopefully it was useful
04:16 - let me know if it was and I'll see you
04:18 - in the next one

Cleaned transcript:

okay today we're going to be looking at task. spawn so this is a great way to run code in parallel so what that means is you'll have you'll have a script for example and usually what happens is the code runs in stages right it does one line at a time so if we were to print hello and then we were to wait 5 seconds and then print goodbye we'd obviously we'd get the hello printed out and then we'd wait 5 seconds and then it'd print goodbye but hello and goodbye wouldn't print out at the same time because it's being held up by this task. weight uh but sometimes you have code that you you you run it at a certain time in the script but you don't you know you don't necess necessarily want to hold up the rest of the script so like you don't mind it being run in parallel so how do we make code run in parallel and when I say in parallel I just mean run it at the same time as the rest of the script you can sort of branch code off into its own subscript that makes sense um it's still part of this script but it's just it's running at the same time as the rest of the script so let me give you an example if I was to put uh another print here and I'll say 5c wait finished what would happen is we we' get the print hello it' wait 5 seconds and then print 5sec waight finished and print goodbye would happen at the same time but if I said task. spawn function okay uh and I put this task. weight uh here what would happen is we would get hello we' get goodbye and 5 seconds later we'd get 5sec weight finished so we've got hello and goodbye the script is carried on because we've spawned this function into its own thread so what happens is we've branched off so we've said okay hello and we say okay what's next ah task. spawn so that means run this code now but carry on immediately so we've just we've just put this code into its own thread and it's it's running parallel to the to the script so it's running at the same time it's not holding up the script so uh whenever you put code in a task. spawn it means you are uh letting the script continue and you running the code inside the task o spawn at the same time in parallel okay now it's kind of hard to see the use of this um but it will be very practical when you're coding because sometimes like I say there's things that you don't need to wait for for example if you're looping through something perhaps you're looping through all of the players in the game to you know set their characters transparency you don't need to hold up the rest of your script in that case because it's just a like a something that can be done in the background you know we don't have to wait for for that to be done before we can continue so you can put it into a into a task. spawn and the other nice thing about it is you can actually keep a variable for your thread so the thread is almost like the secondary script it's the it's the bit that we've branched off it's the secondary subscript which is running this code inside the function but now that we've got the thread as a variable we can kill that thread later on so you know perhaps we we want to end this after 3 seconds we don't we don't want it to print out the 5sec weight anymore you know we don't need it we could say thread uh I think it's it's cancel yeah you say task. cancel and you then put the thread in there and uh so what we'll expect here is the the thread will start but then we cancel it after 3 seconds and obviously that's not long enough to see the 5sec weight print out so we should just get the hello and we should get the goodbye after 3 seconds yeah which we have and if you look at that we've not actually had the 5c weight finish because we've canceled the thread so that was a quick look into task. spawn and task. thread task. cancel sorry uh it's it's a type of threading multithreading um which is basically running code um in parallel so yeah hopefully it was useful let me know if it was and I'll see you in the next one
