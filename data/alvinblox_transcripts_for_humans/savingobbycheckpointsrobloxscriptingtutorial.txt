With timestamps:

00:00 - everyone Alvin blocks here now in the
00:01 - last video I showed you how you can make
00:03 - or be checkpoints but today I'm gonna be
00:06 - showing you how you can save them so
00:07 - make sure you've checked out the OB
00:09 - checkpoint video if you haven't already
00:10 - I'll leave a link in the card and in the
00:12 - description so first thing that we're
00:14 - gonna do is going to go into the player
00:15 - data script this is where we firstly set
00:18 - the players team when they join the game
00:19 - to stage one now what I'm going to do is
00:22 - we're going to create a another event
00:25 - which will run when they leave the game
00:27 - and it's going to save their team to the
00:30 - roblox datastore system but firstly we
00:32 - have to actually create a variable to
00:34 - reference to the datastore service so at
00:37 - the top of the script we're going to say
00:38 - local data tour service equals game :
00:43 - get service data store service okay just
00:49 - like this make sure you've got the
00:50 - capitalisation correct as well now we
00:54 - can create our datastore so again
00:56 - another variable and our datastore for
00:59 - this game is going to be datastore
01:00 - service : get if datastore and we can
01:04 - give our datastore a name so this is the
01:06 - name of the datastore which will contain
01:08 - all of the saved team values so we can
01:11 - say we can just call it what we want I'm
01:13 - going to call it saved team values
01:16 - actually I'm going to call it or be
01:18 - datastore because it's the obby
01:21 - datastore for everything in the game
01:23 - then what I'm going to do is we're going
01:25 - to create a event which will run when a
01:27 - player leaves the game similar to player
01:29 - added we call it player removing so game
01:32 - dot players got two player removing so
01:35 - when a player leaves the game we're
01:36 - going to connect to a function and again
01:39 - this function will take an argument of
01:41 - the player that is going to leave so
01:43 - this player we've kind of like a
01:46 - variable we call it an an argument
01:48 - that's going to be the player that will
01:49 - leave the game so whatever we do to
01:51 - player will be done to the player who
01:52 - leaves the game so firstly we need to
01:55 - save their their team so we actually
01:58 - need to get their team name so you can
01:59 - say local team name is going to be
02:03 - player dot team dot name let's just have
02:07 - a look here so if we go into
02:12 - okay excellent so when we say playoff
02:14 - team we don't say don't name because the
02:17 - value of player or team is actually the
02:18 - team names earth or on stage one player
02:21 - dot team will be equal to stage one
02:24 - excellent so now what we can do is we
02:27 - can say datastore.set async and when we
02:31 - say set async is basically telling the
02:33 - script that we want to save to a
02:35 - player's data store and we have to tell
02:37 - the datastore before I get him to tell
02:40 - the script where we want to save this
02:42 - data because Cooney was saving it in the
02:43 - OB data store but we have no connection
02:46 - between the data that we're going to
02:48 - save and which player we're going to
02:50 - save it to so each player has their own
02:52 - key and the key is a unique identifier
02:55 - of their data store so we're gonna have
02:57 - probably thousands of players data
02:59 - stored in one game but how you would how
03:01 - do we know whose data is whose and
03:03 - that's why we use keys keys tell us who
03:05 - the data belongs to that we're going to
03:07 - be save and then later on load so the
03:10 - first thing that we need to put inside
03:11 - of here is the players key and it's
03:14 - gonna be whatever we want as long as
03:15 - it's unique to the player so something
03:18 - that is unique to every player is their
03:19 - user ID so we can say player user ID and
03:22 - then we're going to put dot dot and then
03:25 - in a string and say - stage okay and
03:30 - this just is a unique reference so we
03:32 - know which is which because if we have
03:34 - more than one key for example we had a
03:35 - key for their cash and a key for the
03:37 - stage and we didn't have this this
03:40 - string for stage they would both have
03:43 - the same key so when the key is the same
03:45 - you can't you can only store one piece
03:47 - of data so we're just gonna make it
03:49 - unique by saying what it is that they're
03:51 - saving to that player's user ID that is
03:54 - their key then so it would be like one
03:56 - two three four five - stage that is that
03:58 - key then the next thing that we're going
04:00 - to say we're gonna have a comma to
04:01 - separate the arguments we're going to
04:04 - put in here the actual value that we're
04:06 - going to save so we're gonna save their
04:07 - team name and there we go we have just
04:10 - saved the players stage or their team
04:13 - name to the data store but to be extra
04:15 - safe and to ensure that nothing went
04:17 - wrong when we saved so if the roblox
04:19 - servers went down just as we were saving
04:21 - we're gonna put it in a picot and what
04:23 - happens in a pickle
04:24 - is if the datastore errors when we call
04:28 - set a sink we can catch the error in the
04:31 - Pico and when it is in a P call it won't
04:33 - stop the entire script when we usually
04:35 - have an error it will stop the whole
04:36 - script but we can just do a Pico so we
04:38 - can say local success comma error
04:40 - message equals function sorry P call
04:45 - function like this and we'll close the
04:50 - function with an end and closing bracket
04:52 - like this so any code in between here if
04:55 - it errors it won't stop the whole
04:56 - scripts because it's inside of a peek or
04:58 - the Pico will stop it from airing and it
05:00 - will just carry on with the rest of the
05:01 - script and if it was a success then
05:04 - success variable will be set to true
05:06 - automatically but if it is not success
05:08 - then success will be false and the error
05:10 - message will have some kind of value
05:11 - attached to it and that will be an error
05:13 - message sent back from roblox so if it
05:15 - was a success then we can just print all
05:19 - went well else if it wasn't a success
05:23 - then we can print out what the error
05:24 - message was and that will tell us what
05:27 - went wrong
05:28 - usually it's if roblox is servers go
05:30 - down but if it wasn't a success and then
05:34 - which can print out the error message
05:35 - but apart from that we are done it
05:37 - should now save the players stage to
05:40 - that datastore all we need to do now is
05:42 - get their data in this player added
05:45 - function so when they join the game
05:47 - we're going to try and get their data so
05:48 - firstly let's try and check for that
05:50 - data so we're gonna copy this set async
05:53 - code from the player and moving and just
05:54 - paste it in here but this time we're
05:57 - going to get the data so instead of
05:58 - saving we're trying to load it so we say
05:59 - get acing instead and we don't need to
06:02 - have the second argument of the data but
06:05 - we're gonna write to the latest we're
06:06 - not writing any data we're getting the
06:08 - data so all we need to give is the
06:10 - players key that same key from down here
06:13 - so that we can uniquely identify the
06:14 - players data store inside of the ob
06:16 - datastore and then what we can do is we
06:20 - can create a variable outside of here
06:22 - called a local retrieved data I'm just
06:27 - going to call it data because there's
06:29 - too long to write that and then I can
06:31 - set data over here to the returned data
06:36 - from get a sync
06:37 - and then what I can say is if it was a
06:39 - success and if the data was correctly
06:42 - gotten and there wasn't any errors then
06:45 - what we can do is we say player dot team
06:50 - equals data and that will set their team
06:53 - to the saved team name so if the saved
06:57 - team name was stage two in fact what
07:01 - we'll do is we'll say game lots of teams
07:03 - and then in square brackets we'll put
07:05 - this data because we have to have a team
07:07 - object and if the data is stage one
07:10 - stage two then we'd say game drop teams
07:13 - or stage two and that would be the
07:14 - object of the team that we're setting
07:16 - that team value to so we're changing
07:17 - their team to the saved value but
07:20 - because the save value is a string we
07:21 - have to supply an object now if there
07:24 - was no data and there was an error what
07:28 - we can do is set their team to stage one
07:32 - but also if data is there is no data
07:39 - because there are new player to the game
07:40 - if we if it was a success that we did
07:42 - get the data but there was actually no
07:44 - data there the getter thing didn't go
07:46 - wrong it was still a success but there
07:48 - was just no data so if there is data
07:50 - then we'll set their team to whatever
07:53 - that data is but if there isn't any data
07:56 - saved we can just sit there that's the
07:58 - stage two stage one okay so I think
08:02 - we're all good to go here let's let's
08:04 - run a test and see if it works now if
08:08 - you want to see this working what you've
08:09 - got to do is you got to publish your
08:10 - word blocks game because data stores
08:12 - only work in published games so I'm
08:14 - going to go publish it right now
08:16 - by going to file and then clicking
08:17 - publish to roblox hours then it will let
08:22 - you publish the game so just follow all
08:24 - of these steps and click on create and
08:30 - it's great to the game for me now I need
08:32 - to go to roblox on the website to play
08:35 - it but before you do that click on game
08:39 - settings and click on options and make
08:42 - sure that enable studio access to API
08:44 - services is turned on this will allow us
08:47 - in the future to test our data source
08:49 - within roblox studio but
08:51 - it doesn't seem to be working for me
08:52 - this this checkbox and read books to do
08:54 - currently I think it's broken so I'm
08:55 - going to show you another way how you
08:56 - can turn it on so find your game on the
09:00 - roblox website click on the three dots
09:01 - and click on configure this game then
09:03 - you should be able to turn on enable
09:06 - studio access to a PR services now it
09:08 - seems that it did work in roblox studio
09:09 - when I turned it on so that's all good
09:11 - so now that you've published the game
09:12 - and you've turned on enable studio
09:14 - access to API services you can either
09:16 - test it in roblox or you can test it in
09:18 - roblox studio I'm going to test it in
09:20 - robotics to do so in we go and let's
09:24 - hope that this works I'm confident that
09:26 - it will so let's head to a stage quickly
09:32 - head over to stage two and we're gonna
09:38 - step on the stage and we're going to
09:40 - stop the game now what I'm going to do
09:42 - is I'm going to go into the data store
09:43 - editor plugin which is a great way to
09:45 - see your saved data and see if it
09:48 - actually saved in fact I just realized
09:52 - that I made a mistake here I said play a
09:55 - ramp of view instead of removing so I'm
09:57 - going to change that and let's try it
09:58 - again
09:59 - so here we go and I'm gonna set my stage
10:02 - to stage two again because it obviously
10:05 - didn't say last time because there was
10:06 - an error in our script but if we go over
10:09 - to stage two and step on the spawn and
10:13 - I'm gonna hit the output open so we stop
10:14 - the game and let's see what it printed
10:17 - ok so it said cannot store instance in
10:20 - data store data stores only accept valid
10:22 - utf-8 characters now this probably means
10:24 - that we've accidentally stored an object
10:26 - instead of some text so let's have a
10:29 - look so this was the error message so
10:33 - player dot team hmm okay so let's try
10:37 - saying play alot team dot name maybe
10:41 - that will work let's try that because
10:47 - the team property that's a bit annoying
10:50 - the team property player dot team is
10:53 - actually an object and because it's an
10:57 - object you can't actually save objects
10:59 - to data stores so we have to actually
11:00 - save the name of the object
11:03 - which is why when we load the data we
11:07 - say game teams and in those square
11:09 - brackets we say the name of the data so
11:12 - let's have a look so I think everybody
11:14 - everything went well because there's no
11:16 - error message so let's play again and
11:18 - see what happens
11:20 - no ok we're back at stage two no worries
11:23 - sorry we're back at stage one so let's
11:25 - have a look let's check the datastore
11:26 - editor okay so it's safe it's saved so
11:30 - that's a good sign but so now we know
11:32 - that there's a problem with when it's
11:34 - loading so let's have a look here so it
11:38 - gets the data if it was success then if
11:42 - there is data then player dot team
11:44 - equals game dot the team's data ok let's
11:49 - do some printing to find out so print
11:51 - success else print error message and
11:57 - we'll also just print test 1 and test 2
12:04 - we'll load this up and try it again ok
12:11 - so it printed success test 1 and let's
12:15 - just check again what we're saved to the
12:16 - day store idea ok so it's saved stage 1
12:19 - let's change this to stage 2 so imagine
12:22 - that we've now changed our datastore to
12:25 - save stage 2 let's see what happens ok
12:30 - excellent so it spawns us on stage 2
12:32 - because that was our save data so let's
12:36 - have another look at the saving here so
12:39 - getting that team name and we're saving
12:42 - that let's try once more and see if this
12:44 - works so I'm confident they should be
12:45 - working now and I'm gonna leave this in
12:49 - the video because it's a great way to
12:50 - show you how to debug your code because
12:53 - your office you may come across some
12:55 - datastore errors sometime in your
12:56 - development career so it's great that I
12:58 - leave these in because it's teaching you
13:00 - how to debug by yourself and what we've
13:02 - done here is debugged our script so
13:05 - we're gonna go to stage 3 we're gonna
13:07 - leave the game and now let's check the
13:11 - datastore editor to see what we're saved
13:13 - to our datastore
13:14 - so I'm going to put my user ID comma
13:16 - stage and it saved stage two for some
13:19 - reason and I got to stage three now
13:24 - that's weird
13:25 - but no worries we will have another look
13:28 - at this let's try one more time hmm
13:38 - start weird okay so I think I figured
13:43 - out what was causing that problem I
13:44 - think it was because when you first
13:47 - joined the game you're your first team
13:51 - was stage 1 before any of this code
13:54 - around it was currently at stage 1 but
13:56 - then when we got the data we changed it
13:58 - to another stage but what usually have
14:03 - what happens is in the game in this game
14:07 - your starting location like the way you
14:11 - normally spawn is actually above the
14:14 - first spawn and afters because it's I
14:16 - think it's in like the middle of the map
14:18 - or something but anyway what I've done
14:20 - is I've changed the first spawn so that
14:23 - allow team change on touches set the
14:25 - force only for the first spawn because
14:27 - when players first join the game there
14:30 - if there are new player their team is
14:33 - immediately set to Sage 1 so they don't
14:37 - need to change the team on touch but for
14:40 - any other stage when they get to that
14:41 - stage obviously we want to change that
14:43 - team when they get there
14:44 - so only stage 1 I've changed allow team
14:47 - change on touch to false now also at the
14:49 - bottom of this of this player added
14:53 - function event sorry and when all this
14:56 - data is loaded I'm going to say player :
14:58 - load character and it is basically
15:00 - respawning them so when we've updated
15:02 - their stage two the one from the
15:05 - datastore we're going to respawn them to
15:07 - that spawn location so if they spawn at
15:11 - the starts and the date hasn't been
15:13 - loaded yet when the data is loaded will
15:15 - respawn them so that they spawn at their
15:18 - loaded team spawn so let's try this out
15:22 - now I just saved the game at stage or
15:27 - and I got teleported back to stage four
15:29 - so now if we head over to stage three so
15:35 - here I am about to jump on the stage
15:37 - three spawn I'm now going to leave the
15:39 - game I'm not gonna rejoin now what's
15:42 - going to happen it's going to load my
15:43 - team and it's gonna respawn me hmm and
15:46 - there we go so it all happened very very
15:48 - quickly so we didn't see it but I've
15:50 - been respawn back at stage three which
15:52 - is where I left the game at so really
15:55 - cool we have just implemented or be
15:57 - saving checkpoint so we're gonna test it
15:59 - even more we're gonna go over here and
16:00 - stage two and leave the game and respawn
16:03 - and if everybody is interested in what I
16:05 - use that plug-in to edit the data to us
16:07 - on the fly
16:08 - that's called data store editor and it
16:10 - is by crazy man 32 really really good
16:14 - plug in that and it allows you to change
16:16 - players data stores without using any
16:19 - scrips or anything so really useful
16:20 - especially when you're debugging data
16:21 - stores and data stores are the hardest
16:23 - to debug and you've just watched me be
16:25 - able to debug my data stores there and
16:26 - you've been able to see what I've done
16:28 - I added prints at certain lines to check
16:30 - what was happening to see where the
16:32 - script got to before it broke and I also
16:35 - used the power of P call and error
16:37 - messaging to print out an error message
16:39 - when it rose which will help me figure
16:42 - out what was wrong with the data store
16:43 - so remember publish your game for them
16:45 - to work turn on studio API requests so
16:48 - that you can test it in roblox studio
16:50 - and that should be all for this video so
16:54 - thank you very much for watching if you
16:55 - enjoyed it please do like the vid share
16:58 - it with anybody you know that will be
16:59 - interested in learning data stores I've
17:00 - got loads more dates tour videos on my
17:02 - channel which are all linked in the card
17:04 - so make sure to click the thumbnail to
17:06 - go check those out but don't forget to
17:07 - subscribe for more roblox scripting
17:09 - videos I make loads of videos to help
17:10 - you create your own roblox games and
17:12 - earn robots from them until next time
17:14 - this is alan block's signing off Cheers
17:16 - bye

Cleaned transcript:

everyone Alvin blocks here now in the last video I showed you how you can make or be checkpoints but today I'm gonna be showing you how you can save them so make sure you've checked out the OB checkpoint video if you haven't already I'll leave a link in the card and in the description so first thing that we're gonna do is going to go into the player data script this is where we firstly set the players team when they join the game to stage one now what I'm going to do is we're going to create a another event which will run when they leave the game and it's going to save their team to the roblox datastore system but firstly we have to actually create a variable to reference to the datastore service so at the top of the script we're going to say local data tour service equals game get service data store service okay just like this make sure you've got the capitalisation correct as well now we can create our datastore so again another variable and our datastore for this game is going to be datastore service get if datastore and we can give our datastore a name so this is the name of the datastore which will contain all of the saved team values so we can say we can just call it what we want I'm going to call it saved team values actually I'm going to call it or be datastore because it's the obby datastore for everything in the game then what I'm going to do is we're going to create a event which will run when a player leaves the game similar to player added we call it player removing so game dot players got two player removing so when a player leaves the game we're going to connect to a function and again this function will take an argument of the player that is going to leave so this player we've kind of like a variable we call it an an argument that's going to be the player that will leave the game so whatever we do to player will be done to the player who leaves the game so firstly we need to save their their team so we actually need to get their team name so you can say local team name is going to be player dot team dot name let's just have a look here so if we go into okay excellent so when we say playoff team we don't say don't name because the value of player or team is actually the team names earth or on stage one player dot team will be equal to stage one excellent so now what we can do is we can say datastore.set async and when we say set async is basically telling the script that we want to save to a player's data store and we have to tell the datastore before I get him to tell the script where we want to save this data because Cooney was saving it in the OB data store but we have no connection between the data that we're going to save and which player we're going to save it to so each player has their own key and the key is a unique identifier of their data store so we're gonna have probably thousands of players data stored in one game but how you would how do we know whose data is whose and that's why we use keys keys tell us who the data belongs to that we're going to be save and then later on load so the first thing that we need to put inside of here is the players key and it's gonna be whatever we want as long as it's unique to the player so something that is unique to every player is their user ID so we can say player user ID and then we're going to put dot dot and then in a string and say stage okay and this just is a unique reference so we know which is which because if we have more than one key for example we had a key for their cash and a key for the stage and we didn't have this this string for stage they would both have the same key so when the key is the same you can't you can only store one piece of data so we're just gonna make it unique by saying what it is that they're saving to that player's user ID that is their key then so it would be like one two three four five stage that is that key then the next thing that we're going to say we're gonna have a comma to separate the arguments we're going to put in here the actual value that we're going to save so we're gonna save their team name and there we go we have just saved the players stage or their team name to the data store but to be extra safe and to ensure that nothing went wrong when we saved so if the roblox servers went down just as we were saving we're gonna put it in a picot and what happens in a pickle is if the datastore errors when we call set a sink we can catch the error in the Pico and when it is in a P call it won't stop the entire script when we usually have an error it will stop the whole script but we can just do a Pico so we can say local success comma error message equals function sorry P call function like this and we'll close the function with an end and closing bracket like this so any code in between here if it errors it won't stop the whole scripts because it's inside of a peek or the Pico will stop it from airing and it will just carry on with the rest of the script and if it was a success then success variable will be set to true automatically but if it is not success then success will be false and the error message will have some kind of value attached to it and that will be an error message sent back from roblox so if it was a success then we can just print all went well else if it wasn't a success then we can print out what the error message was and that will tell us what went wrong usually it's if roblox is servers go down but if it wasn't a success and then which can print out the error message but apart from that we are done it should now save the players stage to that datastore all we need to do now is get their data in this player added function so when they join the game we're going to try and get their data so firstly let's try and check for that data so we're gonna copy this set async code from the player and moving and just paste it in here but this time we're going to get the data so instead of saving we're trying to load it so we say get acing instead and we don't need to have the second argument of the data but we're gonna write to the latest we're not writing any data we're getting the data so all we need to give is the players key that same key from down here so that we can uniquely identify the players data store inside of the ob datastore and then what we can do is we can create a variable outside of here called a local retrieved data I'm just going to call it data because there's too long to write that and then I can set data over here to the returned data from get a sync and then what I can say is if it was a success and if the data was correctly gotten and there wasn't any errors then what we can do is we say player dot team equals data and that will set their team to the saved team name so if the saved team name was stage two in fact what we'll do is we'll say game lots of teams and then in square brackets we'll put this data because we have to have a team object and if the data is stage one stage two then we'd say game drop teams or stage two and that would be the object of the team that we're setting that team value to so we're changing their team to the saved value but because the save value is a string we have to supply an object now if there was no data and there was an error what we can do is set their team to stage one but also if data is there is no data because there are new player to the game if we if it was a success that we did get the data but there was actually no data there the getter thing didn't go wrong it was still a success but there was just no data so if there is data then we'll set their team to whatever that data is but if there isn't any data saved we can just sit there that's the stage two stage one okay so I think we're all good to go here let's let's run a test and see if it works now if you want to see this working what you've got to do is you got to publish your word blocks game because data stores only work in published games so I'm going to go publish it right now by going to file and then clicking publish to roblox hours then it will let you publish the game so just follow all of these steps and click on create and it's great to the game for me now I need to go to roblox on the website to play it but before you do that click on game settings and click on options and make sure that enable studio access to API services is turned on this will allow us in the future to test our data source within roblox studio but it doesn't seem to be working for me this this checkbox and read books to do currently I think it's broken so I'm going to show you another way how you can turn it on so find your game on the roblox website click on the three dots and click on configure this game then you should be able to turn on enable studio access to a PR services now it seems that it did work in roblox studio when I turned it on so that's all good so now that you've published the game and you've turned on enable studio access to API services you can either test it in roblox or you can test it in roblox studio I'm going to test it in robotics to do so in we go and let's hope that this works I'm confident that it will so let's head to a stage quickly head over to stage two and we're gonna step on the stage and we're going to stop the game now what I'm going to do is I'm going to go into the data store editor plugin which is a great way to see your saved data and see if it actually saved in fact I just realized that I made a mistake here I said play a ramp of view instead of removing so I'm going to change that and let's try it again so here we go and I'm gonna set my stage to stage two again because it obviously didn't say last time because there was an error in our script but if we go over to stage two and step on the spawn and I'm gonna hit the output open so we stop the game and let's see what it printed ok so it said cannot store instance in data store data stores only accept valid utf8 characters now this probably means that we've accidentally stored an object instead of some text so let's have a look so this was the error message so player dot team hmm okay so let's try saying play alot team dot name maybe that will work let's try that because the team property that's a bit annoying the team property player dot team is actually an object and because it's an object you can't actually save objects to data stores so we have to actually save the name of the object which is why when we load the data we say game teams and in those square brackets we say the name of the data so let's have a look so I think everybody everything went well because there's no error message so let's play again and see what happens no ok we're back at stage two no worries sorry we're back at stage one so let's have a look let's check the datastore editor okay so it's safe it's saved so that's a good sign but so now we know that there's a problem with when it's loading so let's have a look here so it gets the data if it was success then if there is data then player dot team equals game dot the team's data ok let's do some printing to find out so print success else print error message and we'll also just print test 1 and test 2 we'll load this up and try it again ok so it printed success test 1 and let's just check again what we're saved to the day store idea ok so it's saved stage 1 let's change this to stage 2 so imagine that we've now changed our datastore to save stage 2 let's see what happens ok excellent so it spawns us on stage 2 because that was our save data so let's have another look at the saving here so getting that team name and we're saving that let's try once more and see if this works so I'm confident they should be working now and I'm gonna leave this in the video because it's a great way to show you how to debug your code because your office you may come across some datastore errors sometime in your development career so it's great that I leave these in because it's teaching you how to debug by yourself and what we've done here is debugged our script so we're gonna go to stage 3 we're gonna leave the game and now let's check the datastore editor to see what we're saved to our datastore so I'm going to put my user ID comma stage and it saved stage two for some reason and I got to stage three now that's weird but no worries we will have another look at this let's try one more time hmm start weird okay so I think I figured out what was causing that problem I think it was because when you first joined the game you're your first team was stage 1 before any of this code around it was currently at stage 1 but then when we got the data we changed it to another stage but what usually have what happens is in the game in this game your starting location like the way you normally spawn is actually above the first spawn and afters because it's I think it's in like the middle of the map or something but anyway what I've done is I've changed the first spawn so that allow team change on touches set the force only for the first spawn because when players first join the game there if there are new player their team is immediately set to Sage 1 so they don't need to change the team on touch but for any other stage when they get to that stage obviously we want to change that team when they get there so only stage 1 I've changed allow team change on touch to false now also at the bottom of this of this player added function event sorry and when all this data is loaded I'm going to say player load character and it is basically respawning them so when we've updated their stage two the one from the datastore we're going to respawn them to that spawn location so if they spawn at the starts and the date hasn't been loaded yet when the data is loaded will respawn them so that they spawn at their loaded team spawn so let's try this out now I just saved the game at stage or and I got teleported back to stage four so now if we head over to stage three so here I am about to jump on the stage three spawn I'm now going to leave the game I'm not gonna rejoin now what's going to happen it's going to load my team and it's gonna respawn me hmm and there we go so it all happened very very quickly so we didn't see it but I've been respawn back at stage three which is where I left the game at so really cool we have just implemented or be saving checkpoint so we're gonna test it even more we're gonna go over here and stage two and leave the game and respawn and if everybody is interested in what I use that plugin to edit the data to us on the fly that's called data store editor and it is by crazy man 32 really really good plug in that and it allows you to change players data stores without using any scrips or anything so really useful especially when you're debugging data stores and data stores are the hardest to debug and you've just watched me be able to debug my data stores there and you've been able to see what I've done I added prints at certain lines to check what was happening to see where the script got to before it broke and I also used the power of P call and error messaging to print out an error message when it rose which will help me figure out what was wrong with the data store so remember publish your game for them to work turn on studio API requests so that you can test it in roblox studio and that should be all for this video so thank you very much for watching if you enjoyed it please do like the vid share it with anybody you know that will be interested in learning data stores I've got loads more dates tour videos on my channel which are all linked in the card so make sure to click the thumbnail to go check those out but don't forget to subscribe for more roblox scripting videos I make loads of videos to help you create your own roblox games and earn robots from them until next time this is alan block's signing off Cheers bye
