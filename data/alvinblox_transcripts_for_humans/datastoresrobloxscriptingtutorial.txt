With timestamps:

00:00 - I'm going to show you how to very simply
00:02 - store data on Roblox using data store
00:05 - service so firstly you need to create a
00:09 - variable for the data store service
00:11 - which will do just like this and once
00:14 - you've got the data store service we
00:15 - need to actually create a data store for
00:18 - our game now you can have many you can
00:20 - have as many data stores as you like so
00:22 - I'm just going to create a variable for
00:24 - this by saying data store service get
00:27 - data store and you have to give it a
00:29 - name so I can call it my data store one
00:33 - if you wanted to wipe not wipe but if
00:36 - you wanted to reset everybody's data you
00:39 - could just increment this value to two
00:41 - and it will store data in a different
00:43 - data store so we'll just keep it as my
00:46 - data store you know whatever you want
00:49 - basically and then what you have to do
00:51 - in order to set some data is you need to
00:54 - have a key and you need to have a value
00:56 - so the value is obviously whatever value
00:59 - you want to store so it could be the
01:00 - number of coins you have or the number
01:02 - of XP or it could be the name of the pet
01:04 - that you have got equipped it could be
01:06 - any any data right it could be a table
01:08 - it could be a string it could be a
01:10 - number could be any any data really you
01:13 - although you can't store things like
01:15 - vector 3
01:16 - values um things like that has to be
01:19 - quite basic data forms so tables strings
01:22 - numbers and true or false values that's
01:25 - basically what you can store in a data
01:26 - store so you've got pretty you know
01:28 - pretty good scope of what you can say
01:29 - save um so that's the value so so that's
01:32 - the actual data but if we were saving
01:35 - data for loads of players we wouldn't
01:38 - know whose data it actually is you know
01:41 - if we had all these different
01:43 - values you know um millions and millions
01:46 - of these values if you had millions of
01:48 - players you don't know whose data you're
01:50 - dealing with so what's the point in
01:52 - Saving data if you don't know who it
01:54 - belongs to well that's where the key
01:56 - comes in and the key is like an
01:59 - identifier or some kind of tag that just
02:01 - goes along and is stored hand inand with
02:04 - that data with those values to say who
02:07 - it belongs to and we it needs to be
02:11 - unique for every single player otherwise
02:14 - we would have players who have the same
02:16 - data so we need some kind of identifier
02:20 - some some kind of you know piece of data
02:22 - that is unique to every player it's
02:25 - different for every single player almost
02:26 - like a fingerprint to identify a
02:28 - player's data and luckily what we can
02:31 - use for that is their user ID so every
02:34 - user on Roblox has a user ID and if
02:37 - you're wondering how you can find that
02:39 - well just go to your Roblox profile and
02:42 - you will find that we all have a user ID
02:46 - in fact you can see here is mine okay uh
02:50 - 14943 069 that's my user ID so by using
02:55 - a player's ID we can um separate and
02:59 - distinguish their data from somebody
03:01 - else's so it would end up looking like
03:04 - this so you'd have your ID and it
03:07 - corresponds to your data and then every
03:10 - other player would also have their own
03:12 - ID you know so we know these would be
03:16 - three separate players but since they
03:18 - have different IDs if we wanted to look
03:20 - up my data we could just look for my
03:24 - user ID and it would correspond to my
03:26 - data so let me show you how this works
03:29 - so we have the key we have the value so
03:31 - how do we set somebody's data well you
03:33 - see you get your data store which we've
03:36 - just set as a variable here and you say
03:38 - colon set a sync and set a sync lets you
03:42 - set a value to a particular key so let's
03:45 - firstly provide the key now this will be
03:48 - my Roblox user ID and then we'll have a
03:51 - comma and now we can actually store our
03:53 - data so I could set it to a table and in
03:57 - this table we could have coins equals 50
03:59 - 50 XP equal
04:02 - 0 you know uh we could you could have
04:05 - even more table you could have a table
04:07 - to store all of your pets you could have
04:10 - a daily login streak you know um you
04:13 - could store all your data in here and
04:16 - then it would go up to the data store so
04:18 - if we were to click on
04:19 - run uh oh we need to publish the game so
04:22 - if we click on stop and we go to file
04:24 - and
04:25 - publish okay I'm just going to publish
04:27 - the game here
04:30 - and then I'm going to go to game
04:31 - settings I'm going to click on security
04:35 - and I'm going to enable Studio access to
04:37 - API Services click on Save and then
04:40 - click on run and what will you can't see
04:43 - anything that's happened nothing has
04:44 - happened in the output but our data
04:47 - store request will have gone through and
04:49 - a really easy way to check this is by
04:51 - going to plugins and getting the data
04:54 - store editor by slight Nick okay you can
04:57 - find this I'll leave a link in the
04:58 - description I think it cost Robux um so
05:01 - you don't have to get it but I'm just
05:03 - going to use it to prove that our data
05:05 - has been saved here so I'm going to
05:07 - connect to my data store I need the name
05:09 - of my data store which we set as my data
05:12 - store and again this is per place okay
05:15 - so this won't be uh saved between Roblox
05:19 - games it's only for this one place so we
05:21 - now need to look for our key which is
05:23 - going to be 1494 3069 because that's my
05:26 - user ID and the keys are always strings
05:29 - whilst this is a number it has to be a
05:31 - string so we have to wrap it in speech
05:34 - marks and you can see look my data is
05:36 - there um it's we've saved the the coins
05:39 - login streak pets and XP so it is there
05:43 - the next question is how do we actually
05:44 - get this data so what if you want to get
05:47 - someone's data well it's very very
05:49 - similar we will just say get async in
05:52 - this instance and we only need to
05:54 - provide the key we don't need to provide
05:56 - any other data because we're getting not
05:58 - setting
06:00 - uh and this should be data store my bad
06:02 - and so we could then print data store
06:04 - get async and this should print the
06:07 - table that we've just saved which it's
06:09 - just done so that is how you set and get
06:13 - data however there's a few things we
06:15 - still need to go over now because this
06:17 - get async Returns the data we can
06:20 - actually set it as a
06:22 - variable okay so you might want to do
06:25 - something with this data later on
06:26 - perhaps you want to you know print a
06:28 - specific value such as data. daily login
06:31 - streak where and that will print out
06:34 - one okay there you go um but there's a
06:38 - few things we need to actually look at
06:40 - before we go forwards now firstly we're
06:43 - only setting data for a specific player
06:45 - here right because we've provided my
06:47 - user id how would we do this for any
06:50 - player who joins the game well what we'
06:52 - need to do is we need to firstly wrap
06:54 - this in a player added function like
06:57 - this okay and we now have access to a
07:00 - player that will join the game so we'll
07:02 - take this code and instead we'll put it
07:05 - in our player added event and instead of
07:07 - giving the user ID here directly as mine
07:12 - we'll say player. user ID but because
07:15 - this is a number we need to convert it
07:17 - to a string so we'll put it in Brackets
07:19 - and we'll write two string and now for
07:21 - every player that joins the game they're
07:23 - going to have this template data stored
07:26 - to the data store under their user ID
07:30 - and the next thing we need to do is we
07:34 - need to actually put this in a p call
07:37 - now because this is an API call where
07:40 - we're making a request to roblox's
07:42 - servers to set someone's data there's a
07:45 - chance that could go wrong so we are
07:47 - going to wrap this in a p call and you
07:50 - say p call and then in Brackets you have
07:52 - a function like this and you need to
07:54 - have a closing bracket on the end of it
07:56 - and what this will do is because it's
07:57 - now wrapped in a PE call if something
08:00 - goes wrong for examp for example if
08:01 - roblox's servers go down this isn't
08:03 - going to break our script it's not going
08:05 - to throw an error okay and this you know
08:08 - this is quite common because roblocks
08:09 - can have outages which means that their
08:12 - servers go down you can't access data
08:14 - stores and so we wouldn't want to break
08:17 - our script and stop it from running if
08:19 - that was to happen but by wrapping it in
08:21 - a PE call it it wouldn't it wouldn't
08:23 - throw an error that would uh that would
08:25 - stop the script from
08:26 - running so we've Now set a player data a
08:30 - template data when they join the
08:34 - game but what would happen here is every
08:37 - time they rejoin the game it would
08:39 - overwrite their data so we only want to
08:42 - do this if they're a new player so how
08:44 - do we check to see if they're a new
08:46 - player how do we know if they haven't
08:47 - played the game before well we could we
08:50 - could try and make a request to the data
08:53 - store to say has this player played
08:56 - before so we could say local data equals
09:01 - data store get a sync to string player.
09:05 - user
09:05 - ID and if
09:09 - data is nil
09:13 - then we will set the player's
09:17 - data to this template and I'm actually
09:20 - going to move this table outside of the
09:26 - uh set a sync I'm just going to put it
09:28 - at the top of our script and this can be
09:29 - the template data file okay so if the
09:33 - player doesn't have any data then we
09:36 - will just set the data to be the
09:40 - template actually no we shouldn't do
09:41 - that what we'll do is we will set a sync
09:45 - like
09:46 - this okay and then then what we'll do is
09:50 - down here perhaps you have some data
09:52 - that you want to load for example their
09:55 - coins right you could then say in the
09:57 - else down here uh if the
10:00 - data is is is there it's loaded
10:02 - obviously so you could print uh data. XP
10:06 - you could print data. coins you
10:11 - know uh but if they are a new player
10:13 - then we will say data equals and you're
10:17 - going to make a deep I'm going to make a
10:19 - deep copy of a
10:20 - table and what that means is I want to
10:24 - create a clone of this table of this
10:26 - template without any relation to it if I
10:28 - was to say data equals template then
10:32 - this could get a little bit messy
10:34 - because there would still be a link
10:36 - between this table and the data so if I
10:38 - made any changes to it it might alter
10:40 - the the template table I'm not too sure
10:43 - on this but what I like to do for safety
10:45 - is I just like to set it as a deep copy
10:47 - so it's a completely separate um
10:49 - unrelated table to the template here uh
10:54 - and then this can actually get moved out
10:57 - of the if statement right okay this
10:59 - should this should work well so let me
11:02 - just explain what I've done so if the
11:05 - player has no data we are going to set
11:07 - their data variable to be a completely
11:10 - fresh copy of the template uh rather
11:12 - than a a link to this specific template
11:16 - variable and then we're setting that to
11:19 - their data store and then outside of
11:22 - this if statement by the time we get to
11:24 - here the player will have some data
11:27 - whether it's the data that's been loaded
11:28 - from the data store
11:29 - or the data from the template table so
11:33 - we can do whatever we want with their
11:35 - data if they you know if you have some
11:37 - leader stats you could set their leader
11:39 - stats to these values uh if you wanted
11:41 - to imple increment their login streak
11:44 - you could do that but every time you
11:45 - alter their data table you'll need to
11:48 - set a sync okay so if I was to later on
11:52 - if I was to increment their coins I
11:54 - would need to always call set a sync now
11:58 - this is a very very basic implementation
12:00 - of data store and there's many different
12:02 - ways you can do it um for example you
12:04 - could use a uh a framework such as the
12:08 - profile service or data store 2 the the
12:11 - purpose of this video was more so to
12:14 - teach you how get a sync and set a sync
12:16 - works this isn't necessarily how you
12:18 - would do it if you had a big game for
12:22 - example um but it's just meant to teach
12:24 - you how Keys work values work and data
12:28 - store in general
12:30 - so um that that's it basically let me
12:33 - know if you found it useful if you have
12:34 - any more uh ideas for videos and I'll
12:37 - see you in the next one

Cleaned transcript:

I'm going to show you how to very simply store data on Roblox using data store service so firstly you need to create a variable for the data store service which will do just like this and once you've got the data store service we need to actually create a data store for our game now you can have many you can have as many data stores as you like so I'm just going to create a variable for this by saying data store service get data store and you have to give it a name so I can call it my data store one if you wanted to wipe not wipe but if you wanted to reset everybody's data you could just increment this value to two and it will store data in a different data store so we'll just keep it as my data store you know whatever you want basically and then what you have to do in order to set some data is you need to have a key and you need to have a value so the value is obviously whatever value you want to store so it could be the number of coins you have or the number of XP or it could be the name of the pet that you have got equipped it could be any any data right it could be a table it could be a string it could be a number could be any any data really you although you can't store things like vector 3 values um things like that has to be quite basic data forms so tables strings numbers and true or false values that's basically what you can store in a data store so you've got pretty you know pretty good scope of what you can say save um so that's the value so so that's the actual data but if we were saving data for loads of players we wouldn't know whose data it actually is you know if we had all these different values you know um millions and millions of these values if you had millions of players you don't know whose data you're dealing with so what's the point in Saving data if you don't know who it belongs to well that's where the key comes in and the key is like an identifier or some kind of tag that just goes along and is stored hand inand with that data with those values to say who it belongs to and we it needs to be unique for every single player otherwise we would have players who have the same data so we need some kind of identifier some some kind of you know piece of data that is unique to every player it's different for every single player almost like a fingerprint to identify a player's data and luckily what we can use for that is their user ID so every user on Roblox has a user ID and if you're wondering how you can find that well just go to your Roblox profile and you will find that we all have a user ID in fact you can see here is mine okay uh 14943 069 that's my user ID so by using a player's ID we can um separate and distinguish their data from somebody else's so it would end up looking like this so you'd have your ID and it corresponds to your data and then every other player would also have their own ID you know so we know these would be three separate players but since they have different IDs if we wanted to look up my data we could just look for my user ID and it would correspond to my data so let me show you how this works so we have the key we have the value so how do we set somebody's data well you see you get your data store which we've just set as a variable here and you say colon set a sync and set a sync lets you set a value to a particular key so let's firstly provide the key now this will be my Roblox user ID and then we'll have a comma and now we can actually store our data so I could set it to a table and in this table we could have coins equals 50 50 XP equal 0 you know uh we could you could have even more table you could have a table to store all of your pets you could have a daily login streak you know um you could store all your data in here and then it would go up to the data store so if we were to click on run uh oh we need to publish the game so if we click on stop and we go to file and publish okay I'm just going to publish the game here and then I'm going to go to game settings I'm going to click on security and I'm going to enable Studio access to API Services click on Save and then click on run and what will you can't see anything that's happened nothing has happened in the output but our data store request will have gone through and a really easy way to check this is by going to plugins and getting the data store editor by slight Nick okay you can find this I'll leave a link in the description I think it cost Robux um so you don't have to get it but I'm just going to use it to prove that our data has been saved here so I'm going to connect to my data store I need the name of my data store which we set as my data store and again this is per place okay so this won't be uh saved between Roblox games it's only for this one place so we now need to look for our key which is going to be 1494 3069 because that's my user ID and the keys are always strings whilst this is a number it has to be a string so we have to wrap it in speech marks and you can see look my data is there um it's we've saved the the coins login streak pets and XP so it is there the next question is how do we actually get this data so what if you want to get someone's data well it's very very similar we will just say get async in this instance and we only need to provide the key we don't need to provide any other data because we're getting not setting uh and this should be data store my bad and so we could then print data store get async and this should print the table that we've just saved which it's just done so that is how you set and get data however there's a few things we still need to go over now because this get async Returns the data we can actually set it as a variable okay so you might want to do something with this data later on perhaps you want to you know print a specific value such as data. daily login streak where and that will print out one okay there you go um but there's a few things we need to actually look at before we go forwards now firstly we're only setting data for a specific player here right because we've provided my user id how would we do this for any player who joins the game well what we' need to do is we need to firstly wrap this in a player added function like this okay and we now have access to a player that will join the game so we'll take this code and instead we'll put it in our player added event and instead of giving the user ID here directly as mine we'll say player. user ID but because this is a number we need to convert it to a string so we'll put it in Brackets and we'll write two string and now for every player that joins the game they're going to have this template data stored to the data store under their user ID and the next thing we need to do is we need to actually put this in a p call now because this is an API call where we're making a request to roblox's servers to set someone's data there's a chance that could go wrong so we are going to wrap this in a p call and you say p call and then in Brackets you have a function like this and you need to have a closing bracket on the end of it and what this will do is because it's now wrapped in a PE call if something goes wrong for examp for example if roblox's servers go down this isn't going to break our script it's not going to throw an error okay and this you know this is quite common because roblocks can have outages which means that their servers go down you can't access data stores and so we wouldn't want to break our script and stop it from running if that was to happen but by wrapping it in a PE call it it wouldn't it wouldn't throw an error that would uh that would stop the script from running so we've Now set a player data a template data when they join the game but what would happen here is every time they rejoin the game it would overwrite their data so we only want to do this if they're a new player so how do we check to see if they're a new player how do we know if they haven't played the game before well we could we could try and make a request to the data store to say has this player played before so we could say local data equals data store get a sync to string player. user ID and if data is nil then we will set the player's data to this template and I'm actually going to move this table outside of the uh set a sync I'm just going to put it at the top of our script and this can be the template data file okay so if the player doesn't have any data then we will just set the data to be the template actually no we shouldn't do that what we'll do is we will set a sync like this okay and then then what we'll do is down here perhaps you have some data that you want to load for example their coins right you could then say in the else down here uh if the data is is is there it's loaded obviously so you could print uh data. XP you could print data. coins you know uh but if they are a new player then we will say data equals and you're going to make a deep I'm going to make a deep copy of a table and what that means is I want to create a clone of this table of this template without any relation to it if I was to say data equals template then this could get a little bit messy because there would still be a link between this table and the data so if I made any changes to it it might alter the the template table I'm not too sure on this but what I like to do for safety is I just like to set it as a deep copy so it's a completely separate um unrelated table to the template here uh and then this can actually get moved out of the if statement right okay this should this should work well so let me just explain what I've done so if the player has no data we are going to set their data variable to be a completely fresh copy of the template uh rather than a a link to this specific template variable and then we're setting that to their data store and then outside of this if statement by the time we get to here the player will have some data whether it's the data that's been loaded from the data store or the data from the template table so we can do whatever we want with their data if they you know if you have some leader stats you could set their leader stats to these values uh if you wanted to imple increment their login streak you could do that but every time you alter their data table you'll need to set a sync okay so if I was to later on if I was to increment their coins I would need to always call set a sync now this is a very very basic implementation of data store and there's many different ways you can do it um for example you could use a uh a framework such as the profile service or data store 2 the the purpose of this video was more so to teach you how get a sync and set a sync works this isn't necessarily how you would do it if you had a big game for example um but it's just meant to teach you how Keys work values work and data store in general so um that that's it basically let me know if you found it useful if you have any more uh ideas for videos and I'll see you in the next one
