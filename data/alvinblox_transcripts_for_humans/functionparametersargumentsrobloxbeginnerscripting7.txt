With timestamps:

00:00 - hello welcome to lesson 7 in my
00:01 - scripting series today we're looking at
00:03 - parameters and arguments this is an
00:06 - extension to the previous episode which
00:08 - was about functions you need to make
00:10 - sure you've watched that where you have
00:12 - knowledge on functions already so that
00:14 - you understand this part of the video so
00:16 - I leave a card in the top right corner
00:18 - and a link in the description to that
00:20 - video so at the end of that video I
00:23 - talked about making functions more
00:25 - dynamic right now we've just got a
00:27 - function and we're telling it to create
00:29 - a part and every time we call this
00:32 - function the part generated is going to
00:34 - be exactly the same as the one before
00:36 - it's going to generate five read parts
00:40 - with the name my awesome part and assign
00:43 - all of these properties to them as you
00:45 - can see if we run the script you can see
00:47 - five my awesome parts go into the
00:50 - workspace but what if every time you you
00:53 - you call this function you wanted to
00:56 - tell the function tell the function and
00:58 - tell the script what type of part you
01:00 - want to insert maybe you want to insert
01:02 - a blue pass when you call the function
01:05 - here and when you want to call it later
01:07 - on you want to insert a red part so
01:10 - we've got our function right here and
01:12 - all it's doing so far is saving us
01:14 - having to write out the this this this
01:18 - block here to insert part we're
01:20 - basically basically just shorting it
01:21 - down to the name of the function
01:24 - but functions are a lot more powerful
01:26 - than and just allowing you to save space
01:29 - in your code what we can do is we can
01:31 - pass some data to this function to tell
01:35 - it how we want our parts be created or
01:37 - whatever you have in your function we
01:40 - can pass some data to this function to
01:44 - determine what actually happens when it
01:46 - executes whatever is inside of it
01:48 - so we could tell the function when we
01:52 - call it down here we could tell it that
01:54 - we want the part brick color to be blue
01:56 - or we could tell it to be green or we
01:59 - could give it a number for our
02:01 - transparency so to do this we use
02:04 - parameters so the parameter is some data
02:10 - which we'll send over so we're going
02:13 - send it when we call the function down
02:15 - here so firstly we need to tell the
02:20 - function what data to expect okay so we
02:24 - will be sending some data to this
02:25 - function but the function can't just be
02:28 - sent data without knowing what it is so
02:31 - we have to send the data in order and we
02:34 - have to predefined the data that's going
02:37 - to be sent as a variable so just to show
02:41 - you here if I was to generate a part and
02:45 - every time I called this function I
02:47 - wanted to give it a different name then
02:49 - I would want to pass the name you know
02:52 - some text that I want to give to this
02:54 - part so we're gonna tell the script that
02:57 - we're gonna create a parameter of the
03:01 - name of the part okay so whatever data
03:04 - we send to this function whenever we
03:07 - call it will put the name that we want
03:08 - that we want this part to be in these
03:11 - brackets here so if I was to write and
03:14 - parts number one okay because this is
03:18 - well this is the only well actually this
03:22 - is called a parameter because it's the
03:24 - variable right that we've defined and
03:26 - this is the data that will be sent to
03:29 - the to the to the function and what the
03:32 - function does is when we send data here
03:35 - it substitutes it from and puts it as
03:37 - this variable right so the name variable
03:40 - here will be equal to whatever data is
03:43 - sent so this is our parameter and this
03:45 - is our argument so the parameter is the
03:48 - variable that we are have predefined and
03:51 - the argument is what it's going to be
03:53 - equal to so the argument is the data
03:55 - that's getting passed from its getting
03:59 - passed from this from where we're
04:01 - calling it and it will it will go to
04:04 - this function and name is now equal to
04:07 - part number one because that's what
04:09 - we've told the function to define this
04:11 - variable us so a parameter is basically
04:14 - a variable inside of a script but it can
04:17 - change and it will be set to whatever
04:20 - you you make your argument us so your
04:23 - parameter will have the value of the
04:26 - argument when you
04:27 - so in this case the part number one text
04:31 - will get will be made equal to this name
04:35 - parameter variable whatever you'd like
04:38 - to call it and then because name is now
04:41 - equal to part number one instead of
04:44 - saying part name equals my awesome part
04:46 - we can just say name and what this means
04:49 - is because we've passed part number 1 as
04:52 - our argument to this function as the
04:55 - parameter called name whenever we say
04:58 - name in this function so part of that
05:01 - name we're just setting it to name then
05:04 - it's going that the name of this part
05:06 - will become part number 1 because it's
05:10 - the data that we've sent to the function
05:12 - so if we were to run the game or the
05:16 - script even and check the work space you
05:20 - can see it's called part number 1 so
05:24 - what's happened here is we've we've
05:28 - called the function for the first time
05:30 - and we've sent our argument of part
05:33 - number 1 and then when the function gets
05:37 - called then I mean this parameter name
05:41 - is set to whatever that argument was
05:44 - part number 1 and then whenever we
05:46 - reference this variable called name or
05:49 - our parameter because it's not actually
05:51 - a variable and because it's only a part
05:54 - of this function our parameter is used
06:00 - down here when we're setting the parts
06:02 - name and the scripts now knows that the
06:04 - parameter called name is set to is is
06:07 - basically equal to part number 1 so
06:09 - we'll substitute it in basically and the
06:12 - part will then be called bar number 1
06:15 - but we have a problem it says on the
06:19 - fifth fifth line that string was
06:24 - expected and got nil now this is because
06:27 - we have called this function five times
06:30 - but we've only passed an argument to it
06:32 - on the first time so once it's generated
06:35 - our first part and it's moved on to the
06:37 - second line while it's saying okay
06:40 - generated parts it's getting picked up
06:42 - and this function is running and then
06:44 - when we get to the parameters well we
06:47 - haven't actually supplied an argument so
06:50 - we are saying that name is currently
06:53 - equal to nothing because we've passed no
06:55 - argument to it we've passed no data from
06:58 - when we're calling the function to when
07:01 - it gets up here it's just gonna be
07:03 - nothing because we haven't passed an
07:05 - argument so name is going to be nil and
07:07 - when you say nil nil basically means
07:10 - nothing okay so if I was to say print
07:13 - down and command bar if I was to print
07:15 - no you just get no okay if I was to
07:18 - print
07:19 - sorry not zero if I was to make a
07:22 - variable and call it and we won't assign
07:26 - it to anything and then we print my
07:28 - variable it's equal to nil because it's
07:30 - not assigned to anything it's not equal
07:33 - to anything so because we have not
07:34 - passed an argument it is therefore a nil
07:37 - value so when it's got to line five in
07:40 - this function and it's trying to set the
07:42 - parts name to nothing where you can't
07:44 - set it to nothing so it's going to give
07:46 - us an error so if I was just to fill
07:49 - this in with more arguments each time
07:52 - you want the function we should get five
07:56 - parts all with different names and they
08:02 - all should be these names here so let's
08:04 - run it and there we go so the names of
08:09 - our parts in the workspace now
08:10 - correspond to the names or the text that
08:15 - we passed as arguments to these
08:18 - functions so basically we predefined the
08:24 - data that's going to be sent to the
08:26 - function as parameters so that we know
08:29 - what what will get sent and then when
08:31 - we're calling the function we can pass
08:33 - arguments to those parameters so that
08:37 - the parameters that their value is equal
08:40 - to whatever we send basically so think
08:45 - of parameters arguments parameters are
08:48 - the predefined value that currently have
08:52 - that have no value we're just giving
08:54 - them a name because obviously if you
08:58 - think about it if the game was was
09:00 - running right because the function gets
09:03 - defined first we haven't actually passed
09:05 - any data to it yet so we have to have
09:07 - like a placeholder value and in this
09:09 - case we it's our parameter name right
09:11 - and then when we do have that the value
09:14 - to get inserted we well it doesn't
09:16 - actually substitute because the the the
09:18 - name parameter will be equal to
09:20 - something like a variable was equal to
09:21 - something but this data this argument
09:25 - basically takes its place and whatever
09:29 - name is equal to becomes the parts name
09:32 - so that might be a bit confusing to you
09:35 - it's definitely a step up from what
09:38 - we've been doing previously but just
09:40 - think about it as it's you know data
09:43 - that we're gonna pass to a function when
09:45 - we run it because we don't want well it
09:47 - is it's unlikely that you define a
09:49 - function and you're gonna be repeating
09:52 - the same code over and over again you're
09:53 - gonna want to do things differently each
09:55 - time you win the function right so for
09:57 - example if you had a intermission script
10:02 - in your game and you maybe wanted the
10:05 - timer the time of the intermission to be
10:08 - different each round or you have
10:10 - different round types say like a a
10:12 - murder-mystery round and then a race
10:15 - round and then they both had timers and
10:17 - the race round lasted for 60 seconds
10:20 - but the murder-mystery lasted for 50
10:22 - seconds you could pass the time of the
10:25 - round to a function and then the
10:27 - countdown clock could could end when
10:31 - when the time is up basically so that's
10:34 - an example use of parameters so they're
10:38 - very useful and they can be used to pass
10:41 - data to a function so they're dynamic
10:43 - and it's not the same code being
10:44 - repeated over and over again so next
10:47 - thing about parameters is that you can
10:50 - have multiple parameters for one
10:52 - function although you have to separate
10:53 - them with a comma each time you add a
10:55 - new one so for example you could have
10:57 - name you could have anchored by the way
11:02 - you can call them whatever you like you
11:03 - could say is anchored
11:05 - could call it Purim - you could call it
11:10 - burger it's totally up to you
11:12 - but if you start naming things weirdly
11:15 - you might forget what each one is what
11:19 - what value gets passed to them so I
11:21 - would keep them you know remember a ball
11:25 - and relevant so in this case we'll just
11:28 - call it is anchored we can do
11:32 - reflectance and that's enough for now so
11:37 - we now need to replace the current
11:41 - values we have with their parameters so
11:44 - part got anchored it's no longer it
11:46 - going to be true it's going to be
11:47 - whatever data we pass to the function
11:49 - you know is anchored parameter so
11:52 - because parameters sorry arguments can
11:56 - change right so in we could call the
11:57 - function and we could say anchored is
11:59 - true and then we could call it again
12:01 - later on and say it's false we can't
12:03 - just have it set to true we have to we
12:05 - have to have a parameter so that it can
12:07 - be variable so that it can change so
12:10 - we've put our is anchored parameter
12:13 - there and now we just do the same thing
12:14 - again for our reflectance we don't want
12:16 - the reflectance to be naught point six
12:18 - every time we call this function so
12:20 - we're gonna paste our reflectance
12:22 - parameter and then we can write to that
12:25 - parameter we can pass our arguments to
12:27 - it so let's add a comma so we so as I've
12:32 - said you can have multiple parameters
12:34 - you can have multiple arguments as well
12:35 - when you're calling the function you
12:37 - just have to separate them with a comma
12:38 - so that we know which one is which so
12:41 - you have to do it in the same order as
12:43 - well so if you've put the name first in
12:45 - your parameters if you put the name
12:47 - first then you're doing the anchored
12:48 - then you're doing the reflectance you
12:50 - couldn't put the reflectance value first
12:52 - and then the name you'd have to do it in
12:54 - the same order otherwise you're going to
12:56 - be writing the the wrong arguments to
13:00 - the wrong parameters so the name goes
13:02 - first as we've defined it and then is
13:05 - anchored so do we want anchor to be true
13:07 - or false I'm gonna say false and
13:10 - reflectance let's make it set to one
13:13 - okay let's just delete these lines
13:16 - here what that should do is create a
13:18 - part let's give it a different name
13:20 - pull it hamburger so it should create a
13:23 - part called hamburger it should then set
13:25 - its anchored property to false so it
13:27 - falls to the ground and then it's
13:29 - reflectance property will be set to one
13:31 - there we go so what's happened is it's
13:34 - fallen to the ground it's can collide
13:37 - property is equal to false so it's not
13:39 - collided with the base plate so it's
13:41 - fallen straight through let's just
13:42 - change that to true and try this again
13:45 - so there we go
13:46 - our part has been inserted and hamburger
13:50 - that's his name
13:51 - Hank ID is set to true of course but
13:53 - anchored is set to false because we said
13:57 - we set the value of is anchored to be
14:00 - false and whenever the script looks up
14:02 - that parameter it will know that we've
14:05 - passed this argument of false to it so
14:07 - whenever we say is anchored we know it
14:09 - will be false and just to prove it to
14:11 - you if I was to then change it to true
14:14 - but not touch the function at all you
14:17 - can see it stays in the air so all we're
14:19 - doing is we are passing some data to
14:23 - this function and that function is
14:25 - applying it to the properties of this
14:28 - part so that is how parameters and
14:32 - arguments work now I'm just going to
14:34 - show you one more example let's just
14:36 - create another function called print
14:38 - text okay so this function I wanted to
14:43 - print some text now because every time I
14:47 - run this function I want it to print
14:48 - some different text we're gonna do
14:50 - prints but instead of writing some text
14:53 - in a string I'm going to print out the
14:56 - value of a parameter and the parameter
14:59 - that I'm going to use we're going to
15:00 - pass some text to it so we can call it
15:03 - whatever we want so I'm going to call it
15:04 - string to prints just we'll make sure to
15:08 - print that parameter and then when we
15:12 - call this function print text we need to
15:15 - supply the function with some text to
15:18 - print out so we can just send in our
15:22 - argument because we need an argument
15:25 - because we've got a parameter so the
15:27 - value that I'm going to send to
15:29 - parameter it's gonna be some text so
15:32 - it's gonna be a string and we can just
15:33 - put a message in there so hello there
15:35 - this is Alvin blocks if I print that out
15:39 - it says in the output hello there this
15:43 - is Alvin blocks and what we can do is we
15:47 - can keep doing print text we can keep
15:50 - running the same function but we can
15:52 - keep passing different messages each
15:54 - time this is a message run again and we
16:00 - have two messages printed out and you
16:02 - can see we're calling the same function
16:04 - but each time we call the function it's
16:06 - printing something different because
16:08 - we're passing a different value to our
16:10 - function to our parameter each time so
16:14 - it allows you to call your function at
16:18 - different times but also you can print
16:21 - different messages from the same
16:23 - function by using parameters by sending
16:26 - the data as an argument well to this
16:30 - parameter and then can print the
16:31 - parameter out so that it can be dynamic
16:34 - so that you can you can use a function
16:37 - to save time when having to write out
16:40 - the same code but you can send messages
16:43 - not misleading send data to that
16:46 - function so that so that you don't get
16:48 - the same result from that function every
16:50 - single time so just to finish off with
16:54 - functions they do the same code over and
16:57 - over but each time you run a function
16:59 - you may want it to do something or make
17:02 - something different so in our example
17:05 - make a part with different properties
17:07 - and again as we've just done printing a
17:11 - message but obviously each time we run
17:13 - it we don't want to print the same
17:14 - message so we can pass a parameter to it
17:17 - to print a different message every
17:21 - single time that may be a bit confusing
17:23 - it was definitely a longer tutorial than
17:24 - normal but definitely it's really really
17:27 - important information which you need to
17:29 - know we will be using parameters and
17:31 - functions a lot more in future video so
17:34 - if you think that this is a bit
17:35 - pointless and it will all make sense
17:38 - very very soon although if you don't
17:40 - understand
17:41 - I will link some useful resources in the
17:45 - description and also we will probably be
17:48 - going over these in a future tutorial as
17:50 - well so thanks for watching if you
17:52 - enjoyed this video please do head on to
17:55 - the next one by clicking the thumbnail
17:57 - on the right of your screen don't forget
17:58 - to subscribe to my channel by clicking
18:00 - the blue album blocks logo in the middle
18:02 - of the screen don't forget to Like
18:05 - subscribe and comment if you have any
18:07 - questions I will try my best to get back
18:09 - to you thanks for watching and I'll see
18:11 - you in the next one

Cleaned transcript:

hello welcome to lesson 7 in my scripting series today we're looking at parameters and arguments this is an extension to the previous episode which was about functions you need to make sure you've watched that where you have knowledge on functions already so that you understand this part of the video so I leave a card in the top right corner and a link in the description to that video so at the end of that video I talked about making functions more dynamic right now we've just got a function and we're telling it to create a part and every time we call this function the part generated is going to be exactly the same as the one before it's going to generate five read parts with the name my awesome part and assign all of these properties to them as you can see if we run the script you can see five my awesome parts go into the workspace but what if every time you you you call this function you wanted to tell the function tell the function and tell the script what type of part you want to insert maybe you want to insert a blue pass when you call the function here and when you want to call it later on you want to insert a red part so we've got our function right here and all it's doing so far is saving us having to write out the this this this block here to insert part we're basically basically just shorting it down to the name of the function but functions are a lot more powerful than and just allowing you to save space in your code what we can do is we can pass some data to this function to tell it how we want our parts be created or whatever you have in your function we can pass some data to this function to determine what actually happens when it executes whatever is inside of it so we could tell the function when we call it down here we could tell it that we want the part brick color to be blue or we could tell it to be green or we could give it a number for our transparency so to do this we use parameters so the parameter is some data which we'll send over so we're going send it when we call the function down here so firstly we need to tell the function what data to expect okay so we will be sending some data to this function but the function can't just be sent data without knowing what it is so we have to send the data in order and we have to predefined the data that's going to be sent as a variable so just to show you here if I was to generate a part and every time I called this function I wanted to give it a different name then I would want to pass the name you know some text that I want to give to this part so we're gonna tell the script that we're gonna create a parameter of the name of the part okay so whatever data we send to this function whenever we call it will put the name that we want that we want this part to be in these brackets here so if I was to write and parts number one okay because this is well this is the only well actually this is called a parameter because it's the variable right that we've defined and this is the data that will be sent to the to the to the function and what the function does is when we send data here it substitutes it from and puts it as this variable right so the name variable here will be equal to whatever data is sent so this is our parameter and this is our argument so the parameter is the variable that we are have predefined and the argument is what it's going to be equal to so the argument is the data that's getting passed from its getting passed from this from where we're calling it and it will it will go to this function and name is now equal to part number one because that's what we've told the function to define this variable us so a parameter is basically a variable inside of a script but it can change and it will be set to whatever you you make your argument us so your parameter will have the value of the argument when you so in this case the part number one text will get will be made equal to this name parameter variable whatever you'd like to call it and then because name is now equal to part number one instead of saying part name equals my awesome part we can just say name and what this means is because we've passed part number 1 as our argument to this function as the parameter called name whenever we say name in this function so part of that name we're just setting it to name then it's going that the name of this part will become part number 1 because it's the data that we've sent to the function so if we were to run the game or the script even and check the work space you can see it's called part number 1 so what's happened here is we've we've called the function for the first time and we've sent our argument of part number 1 and then when the function gets called then I mean this parameter name is set to whatever that argument was part number 1 and then whenever we reference this variable called name or our parameter because it's not actually a variable and because it's only a part of this function our parameter is used down here when we're setting the parts name and the scripts now knows that the parameter called name is set to is is basically equal to part number 1 so we'll substitute it in basically and the part will then be called bar number 1 but we have a problem it says on the fifth fifth line that string was expected and got nil now this is because we have called this function five times but we've only passed an argument to it on the first time so once it's generated our first part and it's moved on to the second line while it's saying okay generated parts it's getting picked up and this function is running and then when we get to the parameters well we haven't actually supplied an argument so we are saying that name is currently equal to nothing because we've passed no argument to it we've passed no data from when we're calling the function to when it gets up here it's just gonna be nothing because we haven't passed an argument so name is going to be nil and when you say nil nil basically means nothing okay so if I was to say print down and command bar if I was to print no you just get no okay if I was to print sorry not zero if I was to make a variable and call it and we won't assign it to anything and then we print my variable it's equal to nil because it's not assigned to anything it's not equal to anything so because we have not passed an argument it is therefore a nil value so when it's got to line five in this function and it's trying to set the parts name to nothing where you can't set it to nothing so it's going to give us an error so if I was just to fill this in with more arguments each time you want the function we should get five parts all with different names and they all should be these names here so let's run it and there we go so the names of our parts in the workspace now correspond to the names or the text that we passed as arguments to these functions so basically we predefined the data that's going to be sent to the function as parameters so that we know what what will get sent and then when we're calling the function we can pass arguments to those parameters so that the parameters that their value is equal to whatever we send basically so think of parameters arguments parameters are the predefined value that currently have that have no value we're just giving them a name because obviously if you think about it if the game was was running right because the function gets defined first we haven't actually passed any data to it yet so we have to have like a placeholder value and in this case we it's our parameter name right and then when we do have that the value to get inserted we well it doesn't actually substitute because the the the name parameter will be equal to something like a variable was equal to something but this data this argument basically takes its place and whatever name is equal to becomes the parts name so that might be a bit confusing to you it's definitely a step up from what we've been doing previously but just think about it as it's you know data that we're gonna pass to a function when we run it because we don't want well it is it's unlikely that you define a function and you're gonna be repeating the same code over and over again you're gonna want to do things differently each time you win the function right so for example if you had a intermission script in your game and you maybe wanted the timer the time of the intermission to be different each round or you have different round types say like a a murdermystery round and then a race round and then they both had timers and the race round lasted for 60 seconds but the murdermystery lasted for 50 seconds you could pass the time of the round to a function and then the countdown clock could could end when when the time is up basically so that's an example use of parameters so they're very useful and they can be used to pass data to a function so they're dynamic and it's not the same code being repeated over and over again so next thing about parameters is that you can have multiple parameters for one function although you have to separate them with a comma each time you add a new one so for example you could have name you could have anchored by the way you can call them whatever you like you could say is anchored could call it Purim you could call it burger it's totally up to you but if you start naming things weirdly you might forget what each one is what what value gets passed to them so I would keep them you know remember a ball and relevant so in this case we'll just call it is anchored we can do reflectance and that's enough for now so we now need to replace the current values we have with their parameters so part got anchored it's no longer it going to be true it's going to be whatever data we pass to the function you know is anchored parameter so because parameters sorry arguments can change right so in we could call the function and we could say anchored is true and then we could call it again later on and say it's false we can't just have it set to true we have to we have to have a parameter so that it can be variable so that it can change so we've put our is anchored parameter there and now we just do the same thing again for our reflectance we don't want the reflectance to be naught point six every time we call this function so we're gonna paste our reflectance parameter and then we can write to that parameter we can pass our arguments to it so let's add a comma so we so as I've said you can have multiple parameters you can have multiple arguments as well when you're calling the function you just have to separate them with a comma so that we know which one is which so you have to do it in the same order as well so if you've put the name first in your parameters if you put the name first then you're doing the anchored then you're doing the reflectance you couldn't put the reflectance value first and then the name you'd have to do it in the same order otherwise you're going to be writing the the wrong arguments to the wrong parameters so the name goes first as we've defined it and then is anchored so do we want anchor to be true or false I'm gonna say false and reflectance let's make it set to one okay let's just delete these lines here what that should do is create a part let's give it a different name pull it hamburger so it should create a part called hamburger it should then set its anchored property to false so it falls to the ground and then it's reflectance property will be set to one there we go so what's happened is it's fallen to the ground it's can collide property is equal to false so it's not collided with the base plate so it's fallen straight through let's just change that to true and try this again so there we go our part has been inserted and hamburger that's his name Hank ID is set to true of course but anchored is set to false because we said we set the value of is anchored to be false and whenever the script looks up that parameter it will know that we've passed this argument of false to it so whenever we say is anchored we know it will be false and just to prove it to you if I was to then change it to true but not touch the function at all you can see it stays in the air so all we're doing is we are passing some data to this function and that function is applying it to the properties of this part so that is how parameters and arguments work now I'm just going to show you one more example let's just create another function called print text okay so this function I wanted to print some text now because every time I run this function I want it to print some different text we're gonna do prints but instead of writing some text in a string I'm going to print out the value of a parameter and the parameter that I'm going to use we're going to pass some text to it so we can call it whatever we want so I'm going to call it string to prints just we'll make sure to print that parameter and then when we call this function print text we need to supply the function with some text to print out so we can just send in our argument because we need an argument because we've got a parameter so the value that I'm going to send to parameter it's gonna be some text so it's gonna be a string and we can just put a message in there so hello there this is Alvin blocks if I print that out it says in the output hello there this is Alvin blocks and what we can do is we can keep doing print text we can keep running the same function but we can keep passing different messages each time this is a message run again and we have two messages printed out and you can see we're calling the same function but each time we call the function it's printing something different because we're passing a different value to our function to our parameter each time so it allows you to call your function at different times but also you can print different messages from the same function by using parameters by sending the data as an argument well to this parameter and then can print the parameter out so that it can be dynamic so that you can you can use a function to save time when having to write out the same code but you can send messages not misleading send data to that function so that so that you don't get the same result from that function every single time so just to finish off with functions they do the same code over and over but each time you run a function you may want it to do something or make something different so in our example make a part with different properties and again as we've just done printing a message but obviously each time we run it we don't want to print the same message so we can pass a parameter to it to print a different message every single time that may be a bit confusing it was definitely a longer tutorial than normal but definitely it's really really important information which you need to know we will be using parameters and functions a lot more in future video so if you think that this is a bit pointless and it will all make sense very very soon although if you don't understand I will link some useful resources in the description and also we will probably be going over these in a future tutorial as well so thanks for watching if you enjoyed this video please do head on to the next one by clicking the thumbnail on the right of your screen don't forget to subscribe to my channel by clicking the blue album blocks logo in the middle of the screen don't forget to Like subscribe and comment if you have any questions I will try my best to get back to you thanks for watching and I'll see you in the next one
