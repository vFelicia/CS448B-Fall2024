With timestamps:

00:00 - today I'm going to be showing you how to
00:02 - use module scripts in Roblox so what is
00:04 - a module script well you've probably
00:06 - seen it quite a lot when you insert a
00:08 - blank module script you get this and
00:10 - essentially what it is is it's just a
00:12 - table that gets returned but what does
00:14 - return mean well normal scripts when you
00:18 - start the game they start running
00:19 - immediately server scripts for example
00:21 - whenever the server is created those
00:23 - scripts will start executing so any code
00:25 - in them will run immediately same goes
00:28 - with local scripts although the only
00:30 - difference there is that they don't run
00:31 - on the server they run on the client so
00:33 - on a player's computer or device when
00:35 - they join the game however a module
00:38 - script doesn't run straight away it only
00:40 - runs well runs when it's required and
00:43 - that actually means it's being run
00:46 - inside another script so the code that
00:48 - you write in a module script will only
00:51 - be run in either a script or a local
00:53 - script depending on where it's required
00:55 - from so you can think of it as like a
00:57 - temporary storage okay you're writing
00:59 - some code that isn't going to execute
01:01 - when the when the game uh starts it's
01:04 - only going to execute when we call it
01:06 - from another script and then technically
01:08 - it will be running inside that script so
01:11 - let me give you an example here this
01:14 - module is currently empty because it's
01:16 - just an empty table but what we usually
01:18 - do is we insert functions in here which
01:20 - we want to call at a later time for
01:22 - example if I was to create a function
01:25 - called uh Delete base
01:28 - plate okay what I'd do is I would say
01:32 - module. delete base plate equals
01:35 - function like this okay and then I would
01:40 - just have some code that would delete
01:41 - the base plate shout out to the AI code
01:44 - assist there for inserting that for
01:47 - me and if I wanted to call this function
01:50 - well I would have to call it from
01:53 - another script because module scripts do
01:55 - not run by themselves by their own
01:57 - accord they have to be called from
01:59 - within a script or local script so let's
02:02 - just get rid of this code from my other
02:03 - video how do we run the delete base
02:06 - plate function from my script well
02:09 - firstly you have to get the module
02:11 - script so we'll create a variable called
02:13 - module script and we'll say script.
02:16 - parent wait for child module script now
02:19 - this isn't it because we have only got a
02:22 - reference to the object this is merely
02:25 - just a reference to the properties of
02:28 - this module script we haven't been able
02:30 - to extract the function out of this
02:33 - module script so how do we do that well
02:35 - we need to get this table within our
02:38 - module that gets returned because delete
02:41 - base plate is a function within our
02:43 - module here because I've said module.
02:45 - delete base plate that means that delete
02:47 - base plate is within our module table
02:50 - and this module table gets returned by
02:53 - our module script and what that means is
02:55 - whenever we get the module and we use a
02:59 - specific function on that module it's
03:02 - going to return this table so what is
03:04 - that specific function well that
03:06 - specific function is called require and
03:08 - that just means give us what gets
03:12 - returned by this module okay so rather
03:15 - than this being a reference to the
03:18 - module script instance itself this
03:21 - becomes a reference to Whatever Gets
03:23 - returned by that module which in this
03:26 - case is this table which contains our
03:28 - function so requ lets you get the
03:30 - contents of the
03:32 - module and then because this is now a
03:35 - reference to the contents of that table
03:37 - within our module we can say dot and you
03:40 - see that it starts to autocomplete the
03:42 - delete base plate and so now we've just
03:45 - called our module script delete base
03:47 - plate function from outside of the
03:50 - module however because we've required
03:52 - the module into our script you can think
03:55 - of the module as just an extension of
03:57 - our script here it's giving us access to
03:59 - the function fun ality of the module but
04:02 - the functions themselves haven't
04:04 - actually been declared within this
04:05 - script but that's okay because we have a
04:08 - reference to them so you can think of
04:11 - the code inside this module is actually
04:13 - running inside our script when we call
04:17 - the function if there's an error in our
04:19 - module it's going to cause an error in
04:21 - our
04:22 - script so that's it basically if we were
04:25 - to run this this uh this this game you
04:30 - can see the Bas plate gets destroyed not
04:32 - because the module script is running
04:34 - straight away if I was to disable our
04:37 - normal script and click on run the base
04:40 - plate would remain there because like I
04:42 - said the module script doesn't run when
04:44 - the game starts it only runs when it
04:47 - gets
04:48 - required well I say that the the
04:51 - functions themselves aren't running when
04:53 - we require the module they only are
04:55 - running when we call the functions and
04:57 - that's what we're doing here so so let's
05:00 - just reenable our script and now that
05:03 - I've shown you how a module Works how
05:06 - can you use other people's modules
05:09 - because the great thing about module
05:10 - scripts is it allows us to use code
05:13 - written by other people rather easily
05:15 - because when modules are created they're
05:18 - created in a way that they're designed
05:20 - to be easily used by other scriptors you
05:22 - don't have to have thousands of lines of
05:25 - code you can just insert a module and
05:27 - use the specific functions where you
05:29 - want to so let me give you some examples
05:32 - of modules that I commonly
05:35 - use okay here's the profile service from
05:38 - Lis and this is useful for data storage
05:41 - and it just handles all of the different
05:43 - edge cases that you might encounter with
05:45 - data stores things like session locking
05:48 - what if somebody is in a game with their
05:50 - with their data store open and someone
05:52 - tries to access it from another server
05:54 - and tries to overwrite it these are sort
05:56 - of issues that you will encounter if
05:58 - you're working on data stores but
05:59 - luckily Lis came up with a massive
06:02 - module which handles all of this stuff
06:04 - for us so why invent the wheel when
06:06 - someone else is already done it so all
06:08 - I'd need to do is just require script
06:12 - wait for child profile service set that
06:14 - as a variable like this and then you
06:18 - have access to all of these different
06:20 - functions and properties of the profile
06:23 - service for example I would then want to
06:26 - get a profile
06:27 - store which you know I could say profile
06:31 - service. getet profile store and I'll
06:34 - give the name of my data store I could
06:37 - give the template of my data store and
06:39 - then I'm I'm good to go I have access to
06:42 - all of the functions like load profile
06:44 - which would load somebody's data um that
06:47 - I would need in order to make my data
06:49 - stores work okay and that's just one
06:51 - data store module there's loads of data
06:53 - store modules out there but you will
06:55 - find lots of modules on Roblox created
06:58 - by other users and all you need to do to
07:00 - use them is just require them and as
07:03 - soon as you've required them you'll
07:04 - probably then find some documentation
07:06 - for that module which shows you all of
07:08 - the different functions that you can
07:09 - call all of the different properties or
07:12 - uh that you can access from that module
07:15 - so very very useful so that is how
07:17 - module scripts work how you can have
07:19 - your own functions in module scripts and
07:21 - how you can call them at a specific time
07:24 - so if you found it useful please leave a
07:26 - like Please Subscribe let me know if
07:28 - there's any other videos which you'd
07:30 - like to see and I'll catch you in the
07:32 - next one thank you for watching

Cleaned transcript:

today I'm going to be showing you how to use module scripts in Roblox so what is a module script well you've probably seen it quite a lot when you insert a blank module script you get this and essentially what it is is it's just a table that gets returned but what does return mean well normal scripts when you start the game they start running immediately server scripts for example whenever the server is created those scripts will start executing so any code in them will run immediately same goes with local scripts although the only difference there is that they don't run on the server they run on the client so on a player's computer or device when they join the game however a module script doesn't run straight away it only runs well runs when it's required and that actually means it's being run inside another script so the code that you write in a module script will only be run in either a script or a local script depending on where it's required from so you can think of it as like a temporary storage okay you're writing some code that isn't going to execute when the when the game uh starts it's only going to execute when we call it from another script and then technically it will be running inside that script so let me give you an example here this module is currently empty because it's just an empty table but what we usually do is we insert functions in here which we want to call at a later time for example if I was to create a function called uh Delete base plate okay what I'd do is I would say module. delete base plate equals function like this okay and then I would just have some code that would delete the base plate shout out to the AI code assist there for inserting that for me and if I wanted to call this function well I would have to call it from another script because module scripts do not run by themselves by their own accord they have to be called from within a script or local script so let's just get rid of this code from my other video how do we run the delete base plate function from my script well firstly you have to get the module script so we'll create a variable called module script and we'll say script. parent wait for child module script now this isn't it because we have only got a reference to the object this is merely just a reference to the properties of this module script we haven't been able to extract the function out of this module script so how do we do that well we need to get this table within our module that gets returned because delete base plate is a function within our module here because I've said module. delete base plate that means that delete base plate is within our module table and this module table gets returned by our module script and what that means is whenever we get the module and we use a specific function on that module it's going to return this table so what is that specific function well that specific function is called require and that just means give us what gets returned by this module okay so rather than this being a reference to the module script instance itself this becomes a reference to Whatever Gets returned by that module which in this case is this table which contains our function so requ lets you get the contents of the module and then because this is now a reference to the contents of that table within our module we can say dot and you see that it starts to autocomplete the delete base plate and so now we've just called our module script delete base plate function from outside of the module however because we've required the module into our script you can think of the module as just an extension of our script here it's giving us access to the function fun ality of the module but the functions themselves haven't actually been declared within this script but that's okay because we have a reference to them so you can think of the code inside this module is actually running inside our script when we call the function if there's an error in our module it's going to cause an error in our script so that's it basically if we were to run this this uh this this game you can see the Bas plate gets destroyed not because the module script is running straight away if I was to disable our normal script and click on run the base plate would remain there because like I said the module script doesn't run when the game starts it only runs when it gets required well I say that the the functions themselves aren't running when we require the module they only are running when we call the functions and that's what we're doing here so so let's just reenable our script and now that I've shown you how a module Works how can you use other people's modules because the great thing about module scripts is it allows us to use code written by other people rather easily because when modules are created they're created in a way that they're designed to be easily used by other scriptors you don't have to have thousands of lines of code you can just insert a module and use the specific functions where you want to so let me give you some examples of modules that I commonly use okay here's the profile service from Lis and this is useful for data storage and it just handles all of the different edge cases that you might encounter with data stores things like session locking what if somebody is in a game with their with their data store open and someone tries to access it from another server and tries to overwrite it these are sort of issues that you will encounter if you're working on data stores but luckily Lis came up with a massive module which handles all of this stuff for us so why invent the wheel when someone else is already done it so all I'd need to do is just require script wait for child profile service set that as a variable like this and then you have access to all of these different functions and properties of the profile service for example I would then want to get a profile store which you know I could say profile service. getet profile store and I'll give the name of my data store I could give the template of my data store and then I'm I'm good to go I have access to all of the functions like load profile which would load somebody's data um that I would need in order to make my data stores work okay and that's just one data store module there's loads of data store modules out there but you will find lots of modules on Roblox created by other users and all you need to do to use them is just require them and as soon as you've required them you'll probably then find some documentation for that module which shows you all of the different functions that you can call all of the different properties or uh that you can access from that module so very very useful so that is how module scripts work how you can have your own functions in module scripts and how you can call them at a specific time so if you found it useful please leave a like Please Subscribe let me know if there's any other videos which you'd like to see and I'll catch you in the next one thank you for watching
