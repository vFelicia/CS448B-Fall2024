With timestamps:

00:00 - this is a quick tutorial on how to save
00:01 - data in your roblox game so you want to
00:04 - save data and to do that you need to use
00:07 - the datastore service okay
00:09 - so to get the datastore service don't
00:11 - mind these events down here we'll get to
00:13 - them in a minute
00:14 - to get these service we're just gonna
00:16 - firstly make a variable okay and just to
00:21 - guess it was the game
00:21 - come on get service and the name of the
00:25 - service you might have guessed is
00:27 - datastore service okay so we've got the
00:31 - service and now we need to create a
00:33 - datastore okay so to create a datastore
00:36 - once again we're going to set it to a
00:38 - variable so I'm going to call the
00:40 - variable my datastore and we then just
00:43 - going to set it to datastore service to
00:47 - create a new datastore you say curl on
00:49 - get data store and give it a name inside
00:52 - of these brackets so I'm just going to
00:54 - call it my datastore just like that
00:56 - alright so we've made our data store and
00:58 - now we need to store some data inside of
01:00 - it so each data store will save values
01:04 - for players okay so you can you can save
01:08 - data to a datastore by saying the
01:10 - datastore which is my datastore and then
01:12 - at Curran set a Singh okay
01:15 - so set async saves theta okay and we
01:19 - need to give two pieces of information
01:21 - in order to save data okay we need to
01:24 - give the player who we're going to save
01:26 - it to and we also need to save a value
01:28 - so we need to have a unique identifier
01:33 - for each player okay because each player
01:35 - is going to be different to another and
01:36 - different data is going to be stored for
01:39 - four different players okay so a unique
01:42 - identifier is something such as the
01:45 - player's user ID we don't use their name
01:47 - because if a player changes their name
01:50 - then their previous data is going to be
01:52 - lost because it's tied to that name but
01:55 - their user ID is constant and doesn't
01:57 - change okay so we will use the players
02:00 - ID and then we will save a value to this
02:04 - datastore so if you were saving some
02:05 - cash then you would save the amount of
02:07 - cash so what we're going to do we're
02:09 - just going to create a simple script
02:12 - which saves
02:13 - of cash you have in a game and then it
02:15 - loads it back in when you join the game
02:17 - so what we're going to do is we're gonna
02:19 - get rid of this line here you know how
02:21 - it works now how does how to actually
02:23 - save data but lets us go ahead and
02:25 - quickly add some leader stats for this
02:27 - player and also it will add some cash
02:30 - for them because we what we'll do is
02:33 - once we've got that in the game we'll
02:35 - save it and then we'll load it back in
02:37 - and when they leave so we'll just say
02:40 - local leader stats equals instance dot
02:43 - new folder leader start/stop named
02:47 - leader stats and parent it was player
02:53 - you should know how this all works a
02:55 - datastore is it's kind of like an
02:58 - advanced topic so you shouldn't already
02:59 - know how to how to do this stuff so I'm
03:02 - just inserting a cash value now inside
03:05 - of that leader stats folder okay cash
03:10 - dot name was cash and cash parent leader
03:14 - stats okay so I've got some cash in
03:18 - there got our leader stats if we go
03:19 - ahead and check this out and game should
03:22 - have the leaderboard there there we go
03:25 - yep and now what we can do is we can
03:29 - firstly go down here into player moving
03:33 - and work on saving the data okay so
03:35 - whenever you want to save the data I
03:37 - said you need to you set a sink now
03:39 - sometimes data stores can fail and
03:41 - roblox won't tell you about it data
03:44 - source and can sometimes go down
03:46 - something might go wrong when saving and
03:48 - so the players data might not be saved
03:50 - and this can cause an error in your
03:52 - entire script and cause it to break so
03:55 - we don't want that to happen and so what
03:57 - we'll do is we're gonna wrap the set
03:59 - async and something called a P cool and
04:01 - if there's an error when we do that set
04:04 - a sink then it's going to be contained
04:06 - within that peak or it's not going to
04:08 - break the entire script okay so that's
04:10 - why we're gonna do a peak also do one
04:12 - it's very very simple
04:14 - we're firstly just going to write out
04:16 - our set async so we can say my data
04:20 - store okay and we can say : set a sink
04:23 - and we're going to want to then
04:27 - our unique ID which is going to be the
04:29 - players user ID and as well as that I'm
04:31 - going to concatenate it because if
04:34 - you're having multiple keys in one data
04:36 - store say that you're saving and their
04:39 - cash there and their XP okay if you use
04:42 - the same ID so yeah the same key which
04:45 - is just their ID you're going to
04:46 - overwrite it when you save the XP and
04:49 - when you save the calf so we need to
04:51 - make them different so I'm writing the
04:53 - plays user ID and then I'm concatenate
04:55 - it with a string okay and this string is
04:58 - just going to have a hyphen and the
05:01 - value that we're saving so in this case
05:03 - cash okay it's up to you it just makes
05:05 - it unique okay so once we've put the key
05:08 - in we're just going to then and get the
05:11 - the value which we're going to save for
05:14 - that key so it will be player dot leader
05:18 - stats doc cash whoops made a spelling
05:21 - mistake Lee stats not to cache dot value
05:25 - okay now we can't say cash because it's
05:28 - a local variable and it's only within
05:30 - the scope of player added and because
05:33 - outside of that event into the player
05:35 - moving we have to say player or Lida
05:37 - starts to cash the value okay so that
05:40 - has got the data but obviously we need
05:42 - to wrap it in a peak or so we can say
05:45 - peak or and then in brackets we're going
05:48 - to do a function here so while she's
05:50 - putting the set async in a function and
05:52 - then we're calling it with a peak or if
05:53 - if that makes sense
05:55 - and this is the function and we're just
05:57 - wrapping it in peak or here with these
05:59 - brackets so peak all there that will
06:02 - contain it if there's an error but it
06:05 - also gives us two bits of information
06:07 - whether at least whether whatever
06:10 - happened in the function was a success
06:12 - and if it wasn't a success if there was
06:14 - an error it will tell us the error
06:16 - message so we save these to a piece of
06:19 - data to a variable okay so we've got the
06:21 - success so whether it was a success or
06:23 - not and we've also got the error message
06:25 - that's it will return back if there is
06:27 - an error and then we just say is equal
06:29 - to this peak or okay and so if
06:32 - everything was a success then success is
06:35 - gonna be true okay so if success is
06:38 - equal to true or just if success
06:41 - then we can print data successfully
06:44 - saved okay so because a player data
06:48 - successfully saved okay Alps if it was
06:52 - not a success we can print there was an
06:55 - error when saving data okay and then I'm
07:00 - just going to do a war and Warren is the
07:02 - same as print it's just in orange text
07:04 - so you can see it I'm gonna print out
07:06 - the error message okay so if there was
07:09 - an error it's gonna print out what the
07:11 - error message was and there you go we've
07:13 - just saved a player's data to their key
07:16 - and now we need to get that data so he
07:18 - can load it to their cache so go back
07:21 - into the player added event here and we
07:24 - need to do get a sync so we're going to
07:26 - do exactly the same thing again local
07:28 - success comment error message because in
07:31 - another peak or equals P call function
07:35 - okay and inside of here we're gonna do
07:38 - our gets async so it's pretty much the
07:41 - same as set async however this time
07:44 - because we're not actually setting a
07:45 - value to the data store we're just
07:47 - getting about you we only need the
07:49 - players key so we can say my data store
07:52 - : get async and inside of here we're
07:56 - gonna add their key so player dot user
07:59 - ID dot and we're gonna have our string
08:02 - as we've concatenated it to cache player
08:05 - ID user ID and then cache that will be
08:08 - the players key and that is getting the
08:10 - data but we need to store this data as
08:12 - to a variable okay so I'm going to
08:15 - create a variable outside of this Pecor
08:17 - and I'm going to call it local data I'm
08:19 - gonna leave at nothing for now so it's
08:21 - currently set to nil I'm just making
08:23 - this this variable right now
08:25 - initializing it okay so if if the P cool
08:29 - it goes smoothly and we get the data I
08:32 - can then set data to whatever is
08:36 - returned from the get a sync so data
08:38 - isn't going to be nil anymore cuz it's
08:40 - actually set to something but if it
08:42 - wasn't a success okay then data is going
08:45 - to be nil okay so we can say if success
08:48 - then we can say data and we just want to
08:53 - say cash
08:54 - you equals data okay so success is
08:57 - basically the same thing as saying if
08:59 - data is not equal to nil because if
09:01 - there is something set to data we know
09:03 - that some data has been sent back here
09:06 - from the guess a sink so you can say if
09:08 - data they know but I'm going to say
09:10 - success because if it wasn't a success
09:12 - then we can get our error message from
09:13 - the Pico and we can say warn error
09:16 - message and we can also print there was
09:20 - an error whilst getting your data okay
09:25 - so that is how you get data and this is
09:29 - how you save data okay very very simple
09:32 - a lot of people think it's really hard
09:34 - but really it isn't and you might want
09:38 - to consider saving data at other points
09:40 - in your game not only when the player
09:42 - leaves okay so maybe you want to save in
09:45 - timed increments in case the server
09:48 - switch down maybe when they buy cash in
09:50 - your game then you want to save the data
09:52 - as well because if they've just made a
09:54 - purchase you want to make sure that the
09:56 - cash that they've just bought has been
09:58 - saved
09:59 - etc and I also need to let you know
10:01 - there are a few limits with data stores
10:03 - so you if you keep saving too often then
10:07 - you'll hit a limit and then those data
10:10 - store requests will become throttled
10:12 - okay and that means that you you're not
10:16 - allowed to make any more data store
10:17 - requests for a while because you've hit
10:19 - your limit because if you made too many
10:22 - requests then data stores would start to
10:24 - crash okay you can read more on the
10:27 - roblox developer hub ok they've got a
10:29 - great article on it and I'll leave a
10:31 - link to it in the description and but
10:33 - essentially there are some limits you
10:35 - need to make sure that you keep within
10:37 - them
10:37 - here we go datastore errors and limits
10:39 - you have some error codes here if you're
10:42 - getting some errors and we have limits
10:44 - here so on get async you can only send
10:48 - 60 plus the number of players currently
10:51 - in game times 10 so if you have two
10:53 - players in game then that would be thing
10:57 - 80 requests per minute and so if you
11:01 - throttle you thought oh if you go over
11:04 - this this limit and you can see for set
11:06 - async and on update as well
11:08 - which we might look at in a future video
11:10 - so thanks for watching this video it was
11:12 - on how to actually do data stores if you
11:15 - want to see in action we can go ahead
11:17 - and check it out
11:18 - in-game and I'll show you that it worked
11:21 - if we just go ahead and load up roblox
11:24 - here and just wait for the game to load
11:29 - and what we'll do is we'll give
11:32 - ourselves some cash and then rejoin the
11:34 - game so if I just say console and go
11:38 - into the server here and I say game dot
11:41 - players got Alvin underscore blocks
11:44 - don't need a stats Doc's a cash value
11:47 - equals 50 okay and then I leave the game
11:51 - and let us wait for the server to shut
11:56 - down you don't have to do this we're
11:58 - just going to show you though if we go
12:00 - into a new server there we go then
12:03 - hopefully our data should have loaded
12:05 - and we should have 50 cash when we join
12:09 - there we go we are 50 cash and if we go
12:13 - into the console and click on server
12:16 - okay it didn't print out for us and
12:18 - because if we go back into studio here
12:22 - let's go back in whoops there we go and
12:27 - because we are we didn't print when it
12:29 - was successfully loaded so you can print
12:31 - and it would have printed out success
12:32 - but you can see it didn't print out
12:35 - there was an error so everything went
12:36 - well and our data was added in so there
12:39 - you go that's how you date stores in
12:41 - your robots game to save cash I'll do
12:43 - some videos on how to say what other
12:44 - things which has items on a plot in a
12:48 - base to new infantry although it's quite
12:51 - similar it's all about though just using
12:53 - set a sink and get a sink so I hope that
12:56 - was useful if it was please leave a like
12:58 - don't forget to subscribe to my channel
12:59 - because nearly a hundred thousand
13:01 - subscribers now so thanks for the
13:03 - support and I'll see you in the next
13:04 - video

Cleaned transcript:

this is a quick tutorial on how to save data in your roblox game so you want to save data and to do that you need to use the datastore service okay so to get the datastore service don't mind these events down here we'll get to them in a minute to get these service we're just gonna firstly make a variable okay and just to guess it was the game come on get service and the name of the service you might have guessed is datastore service okay so we've got the service and now we need to create a datastore okay so to create a datastore once again we're going to set it to a variable so I'm going to call the variable my datastore and we then just going to set it to datastore service to create a new datastore you say curl on get data store and give it a name inside of these brackets so I'm just going to call it my datastore just like that alright so we've made our data store and now we need to store some data inside of it so each data store will save values for players okay so you can you can save data to a datastore by saying the datastore which is my datastore and then at Curran set a Singh okay so set async saves theta okay and we need to give two pieces of information in order to save data okay we need to give the player who we're going to save it to and we also need to save a value so we need to have a unique identifier for each player okay because each player is going to be different to another and different data is going to be stored for four different players okay so a unique identifier is something such as the player's user ID we don't use their name because if a player changes their name then their previous data is going to be lost because it's tied to that name but their user ID is constant and doesn't change okay so we will use the players ID and then we will save a value to this datastore so if you were saving some cash then you would save the amount of cash so what we're going to do we're just going to create a simple script which saves of cash you have in a game and then it loads it back in when you join the game so what we're going to do is we're gonna get rid of this line here you know how it works now how does how to actually save data but lets us go ahead and quickly add some leader stats for this player and also it will add some cash for them because we what we'll do is once we've got that in the game we'll save it and then we'll load it back in and when they leave so we'll just say local leader stats equals instance dot new folder leader start/stop named leader stats and parent it was player you should know how this all works a datastore is it's kind of like an advanced topic so you shouldn't already know how to how to do this stuff so I'm just inserting a cash value now inside of that leader stats folder okay cash dot name was cash and cash parent leader stats okay so I've got some cash in there got our leader stats if we go ahead and check this out and game should have the leaderboard there there we go yep and now what we can do is we can firstly go down here into player moving and work on saving the data okay so whenever you want to save the data I said you need to you set a sink now sometimes data stores can fail and roblox won't tell you about it data source and can sometimes go down something might go wrong when saving and so the players data might not be saved and this can cause an error in your entire script and cause it to break so we don't want that to happen and so what we'll do is we're gonna wrap the set async and something called a P cool and if there's an error when we do that set a sink then it's going to be contained within that peak or it's not going to break the entire script okay so that's why we're gonna do a peak also do one it's very very simple we're firstly just going to write out our set async so we can say my data store okay and we can say set a sink and we're going to want to then our unique ID which is going to be the players user ID and as well as that I'm going to concatenate it because if you're having multiple keys in one data store say that you're saving and their cash there and their XP okay if you use the same ID so yeah the same key which is just their ID you're going to overwrite it when you save the XP and when you save the calf so we need to make them different so I'm writing the plays user ID and then I'm concatenate it with a string okay and this string is just going to have a hyphen and the value that we're saving so in this case cash okay it's up to you it just makes it unique okay so once we've put the key in we're just going to then and get the the value which we're going to save for that key so it will be player dot leader stats doc cash whoops made a spelling mistake Lee stats not to cache dot value okay now we can't say cash because it's a local variable and it's only within the scope of player added and because outside of that event into the player moving we have to say player or Lida starts to cash the value okay so that has got the data but obviously we need to wrap it in a peak or so we can say peak or and then in brackets we're going to do a function here so while she's putting the set async in a function and then we're calling it with a peak or if if that makes sense and this is the function and we're just wrapping it in peak or here with these brackets so peak all there that will contain it if there's an error but it also gives us two bits of information whether at least whether whatever happened in the function was a success and if it wasn't a success if there was an error it will tell us the error message so we save these to a piece of data to a variable okay so we've got the success so whether it was a success or not and we've also got the error message that's it will return back if there is an error and then we just say is equal to this peak or okay and so if everything was a success then success is gonna be true okay so if success is equal to true or just if success then we can print data successfully saved okay so because a player data successfully saved okay Alps if it was not a success we can print there was an error when saving data okay and then I'm just going to do a war and Warren is the same as print it's just in orange text so you can see it I'm gonna print out the error message okay so if there was an error it's gonna print out what the error message was and there you go we've just saved a player's data to their key and now we need to get that data so he can load it to their cache so go back into the player added event here and we need to do get a sync so we're going to do exactly the same thing again local success comment error message because in another peak or equals P call function okay and inside of here we're gonna do our gets async so it's pretty much the same as set async however this time because we're not actually setting a value to the data store we're just getting about you we only need the players key so we can say my data store get async and inside of here we're gonna add their key so player dot user ID dot and we're gonna have our string as we've concatenated it to cache player ID user ID and then cache that will be the players key and that is getting the data but we need to store this data as to a variable okay so I'm going to create a variable outside of this Pecor and I'm going to call it local data I'm gonna leave at nothing for now so it's currently set to nil I'm just making this this variable right now initializing it okay so if if the P cool it goes smoothly and we get the data I can then set data to whatever is returned from the get a sync so data isn't going to be nil anymore cuz it's actually set to something but if it wasn't a success okay then data is going to be nil okay so we can say if success then we can say data and we just want to say cash you equals data okay so success is basically the same thing as saying if data is not equal to nil because if there is something set to data we know that some data has been sent back here from the guess a sink so you can say if data they know but I'm going to say success because if it wasn't a success then we can get our error message from the Pico and we can say warn error message and we can also print there was an error whilst getting your data okay so that is how you get data and this is how you save data okay very very simple a lot of people think it's really hard but really it isn't and you might want to consider saving data at other points in your game not only when the player leaves okay so maybe you want to save in timed increments in case the server switch down maybe when they buy cash in your game then you want to save the data as well because if they've just made a purchase you want to make sure that the cash that they've just bought has been saved etc and I also need to let you know there are a few limits with data stores so you if you keep saving too often then you'll hit a limit and then those data store requests will become throttled okay and that means that you you're not allowed to make any more data store requests for a while because you've hit your limit because if you made too many requests then data stores would start to crash okay you can read more on the roblox developer hub ok they've got a great article on it and I'll leave a link to it in the description and but essentially there are some limits you need to make sure that you keep within them here we go datastore errors and limits you have some error codes here if you're getting some errors and we have limits here so on get async you can only send 60 plus the number of players currently in game times 10 so if you have two players in game then that would be thing 80 requests per minute and so if you throttle you thought oh if you go over this this limit and you can see for set async and on update as well which we might look at in a future video so thanks for watching this video it was on how to actually do data stores if you want to see in action we can go ahead and check it out ingame and I'll show you that it worked if we just go ahead and load up roblox here and just wait for the game to load and what we'll do is we'll give ourselves some cash and then rejoin the game so if I just say console and go into the server here and I say game dot players got Alvin underscore blocks don't need a stats Doc's a cash value equals 50 okay and then I leave the game and let us wait for the server to shut down you don't have to do this we're just going to show you though if we go into a new server there we go then hopefully our data should have loaded and we should have 50 cash when we join there we go we are 50 cash and if we go into the console and click on server okay it didn't print out for us and because if we go back into studio here let's go back in whoops there we go and because we are we didn't print when it was successfully loaded so you can print and it would have printed out success but you can see it didn't print out there was an error so everything went well and our data was added in so there you go that's how you date stores in your robots game to save cash I'll do some videos on how to say what other things which has items on a plot in a base to new infantry although it's quite similar it's all about though just using set a sink and get a sink so I hope that was useful if it was please leave a like don't forget to subscribe to my channel because nearly a hundred thousand subscribers now so thanks for the support and I'll see you in the next video
