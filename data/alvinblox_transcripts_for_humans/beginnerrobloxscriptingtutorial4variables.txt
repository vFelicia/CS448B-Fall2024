With timestamps:

00:00 - welcome back to the fourth video in the
00:02 - scripting series now in the previous
00:04 - video we used what we'd learnt
00:07 - throughout the series so far to create a
00:10 - quick little dice game where you could
00:13 - roll dice and I get a get a number but
00:16 - today we're gonna be learning about
00:18 - variables now I did touch upon that in
00:22 - the previous video very very briefly but
00:25 - we're gonna go deeper on what variables
00:27 - are in roblox scripting so let me give
00:31 - you an example first before I tell you
00:33 - how they work so we've got our dice game
00:36 - here okay and each time that we want to
00:40 - change a property of of the dice we have
00:44 - to say game don't workspace dice one
00:46 - okay now if we had our dice and they
00:51 - were inside a folder sorry if they were
00:54 - inside a model if we group them together
00:57 - and we named this model dice and then
01:03 - maybe if it was in another model called
01:06 - game parts okay you would see that in
01:12 - order to reference the dice we would
01:15 - have to say game dot workspace dot game
01:19 - parts dot dice and then dice one okay
01:25 - game parts dice dice one okay yeah just
01:29 - make sure I got that right
01:30 - so you'd have to say that every time
01:32 - that you wanted to change a property or
01:35 - even if it was just still in the
01:36 - workspace you would still have to work
01:38 - right out game dot workspace dot dice
01:41 - one every time and if you wanted to
01:42 - change lots of properties of a dice say
01:45 - you wanted to change its color as well
01:47 - then you'd have to say the same thing
01:49 - again game dot workspace but game parts
01:52 - dot dice dice two dot brick color equals
01:56 - brick color dot new and we could say
02:00 - real red okay so you can see even though
02:04 - this works and it still goes red you you
02:07 - can you can tell that this is really
02:09 - really long
02:11 - it's boring to have to write out every
02:13 - time you want to change a property now
02:15 - this is where variables come in and a
02:18 - variable can be thought of kind of like
02:22 - a shortcut okay a variable is used to so
02:27 - let me show you it's used to hold some
02:29 - information so instead of saying dice
02:33 - game to workspace that game passed up
02:35 - dice all the time I could create a
02:37 - shortcut for that and I could say I
02:39 - could make a variable for this dice and
02:42 - whenever I just said the name of that
02:44 - variable let's imagine we called it dice
02:46 - and it would do the exact same thing as
02:49 - saying game don't work space dot game
02:51 - parts dice okay and just to show you so
02:55 - to create variable you have to say local
02:58 - first now you can say it without local
03:01 - but it's good practice to always put
03:03 - local before your variables and I'll
03:05 - explain why in a future video so we say
03:08 - local and then we cover our variable and
03:11 - name so the name of this variable can be
03:13 - anything as long as you haven't got a
03:16 - variable that's name the same thing so
03:19 - I'm going to call my variable dice okay
03:21 - and so I've given it a name and now I
03:24 - need to give my dice about variable a
03:27 - value okay so this dice name is going to
03:31 - be equal to a value it's going to hold
03:33 - some information so think of it of like
03:36 - a storage box and then you put the
03:39 - information inside of it okay so dice is
03:42 - equal to game dot work space dot game
03:46 - parts dot dice okay so instead of saying
03:50 - game dot work space game passed-out dice
03:52 - we can now just say dice and if I copy
03:56 - this and I paste it instead of endor Y
04:00 - space no game parts dot dice every time
04:03 - okay you can see that it has greatly
04:08 - shortened our code okay and we've only
04:11 - had to say dice twice we haven't had to
04:15 - write out game dot words based on game
04:16 - parts dot and dice every single time so
04:19 - now that we are using dice for these two
04:23 - lines
04:24 - I could change the contents of this
04:27 - variable and it would update for both of
04:30 - these lines I wouldn't have to update
04:32 - them one by one but we'll get into that
04:35 - a little bit later on but let's test
04:38 - this out and see if it still works we
04:41 - should still have the same result and
04:43 - they should both be unanchored there we
04:47 - go
04:47 - they still get an anchored it works just
04:50 - as fine but we've saved ourselves from
04:53 - having to write out the same thing twice
04:55 - and that is what a variable is it's a
04:58 - shortcut because it holds information
05:01 - under a name and then we can use that
05:04 - name of that variable time and time
05:06 - again instead of having to write this
05:07 - instead of writing the same stuff out
05:09 - again and we can shorten this even more
05:12 - we could change our variable to be
05:14 - called dice one and then we could just
05:16 - add dot dice one onto the end of this
05:18 - and then we could copy and paste this
05:20 - variable for dice two and just change
05:22 - the dice one to dice two and then
05:25 - instead of saying dice dice one we could
05:27 - just say dice 1 dot anchored equals
05:30 - false and dice to the anchored equals
05:33 - false we've referenced to dice once at
05:38 - the tomorrow once for each dice at the
05:41 - top of our script we've made the
05:42 - variable and then later on we are
05:45 - basically referencing the variable name
05:47 - which are writing the variable name
05:49 - which substitutes for the contents of
05:52 - the variable so whenever this script
05:54 - goes to run is going to look it's gonna
05:57 - look up this variable we've written and
05:59 - it's going to think of it as if he's
06:01 - replacing the name of the variable with
06:03 - the contents of the variable so we've
06:05 - written dice 1 but there is no such
06:08 - thing as dice 1 in the game inside of
06:11 - game when it goes and looks for dice 1
06:13 - as a service it's not gonna find
06:16 - anything it knows that we've got a
06:18 - variable in our script and so it looks
06:20 - at this variable it sees that it's equal
06:22 - to game that works based off game parts
06:24 - dice dice 1 and then in those and what
06:27 - we're talking about so we can just say
06:30 - dice one but and equals false dice to
06:32 - junk it equals false and again the same
06:35 - thing happened
06:36 - we've got the same action happening in
06:40 - the game but what we've done is we've
06:42 - shortened the amount of code that we
06:43 - have to write and again if we want to
06:46 - change more properties off of dice we
06:48 - don't have to write out the whole
06:50 - structure of having to reference it we
06:53 - can just say dice 1 dot brick color
06:55 - equals brick color dot new red for
06:58 - example I stood a brick color equals
07:01 - brick color don't new really blue you
07:05 - can see this is gonna save time in the
07:08 - future when you want to keep referencing
07:10 - the same parts okay and that that's
07:13 - white because the decal background is is
07:15 - white and it go and overlaps the the
07:17 - blue
07:18 - if you're wondering so that is a
07:20 - variable it lets you save time if you're
07:24 - writing the same things out over and
07:27 - over again you can assign values or
07:30 - content to a variable name and then use
07:33 - that name instead of having to to write
07:36 - the same stuff out again and that was a
07:38 - very very brief introduction
07:40 - introduction to variables but we we've
07:44 - set our variables here to the object the
07:47 - value of each variable here isn't as an
07:49 - object because we're saying dice 1 and
07:52 - dice - these are these are both objects
07:53 - and you know because they're parts so a
07:57 - variable could be anything you could
07:59 - have a variable for the workspace so
08:01 - local workspace equals game or workspace
08:04 - even though you wouldn't really need a
08:07 - workspace variable because you can say
08:08 - workspace anyway that's like a roblox
08:11 - defined variable which the script
08:13 - already knows about but you could create
08:15 - a variable for other services so if you
08:18 - wanted to get replicated storage you
08:19 - could say all lighting for example you
08:22 - could say local lighting equals game dot
08:26 - lighting okay so instead of having to
08:28 - say game dot lighting all the time in
08:32 - future you could just say lighting so
08:34 - that's one way variables can be used to
08:36 - save you time but as I said a variable
08:40 - doesn't always have to be an object or
08:43 - path to something a variable could also
08:47 - well it could be any data type and you
08:50 - know we have
08:51 - the four main datatypes in roblox we
08:53 - have a string we have number we have a
08:57 - boolean value which can be true or it
09:00 - could be false what's the other datatype
09:03 - oh yes an object as well so again to
09:06 - workspace dot camera for example that is
09:09 - an object so these are the four main
09:11 - data types okay and a variable can be
09:14 - any of these
09:15 - so we could say local local text that
09:20 - could be the name of our variable and
09:22 - then we could set this text we could
09:24 - assign a string to it okay because a
09:28 - string datatype is some text and inside
09:31 - of here we could write the quick brown
09:34 - fox jumps over the lazy dog okay and now
09:39 - I I think I've gone over this before the
09:42 - print command if you don't know about it
09:45 - the print basically puts a message in
09:49 - the output so I could print hello there
09:51 - okay I could print hello run the game
09:54 - and it prints hello there don't worry
09:57 - about these errors by the way so that's
10:00 - what print does okay what we could do is
10:02 - you could write the quick brown fox
10:04 - jumps over the lazy dog okay and that
10:09 - would print it out we could print out
10:12 - ten times okay let's try this again so
10:17 - you can see it prints out quick quick
10:18 - Ram Fox ten times
10:20 - um and then what if you wanted to change
10:23 - the the text okay or you made a spelling
10:25 - mistake in the mall and you'd have to
10:28 - update them one by one right every time
10:30 - but instead of doing that you could say
10:32 - print text and you could then print it
10:36 - out even more times you could bring it
10:38 - out twenty times if you wanted to okay
10:40 - and you're gonna get the same output if
10:42 - we run the game again it's going to
10:44 - print the quick brown fox jumps over the
10:47 - lazy dog
10:47 - and so it's printing this because it
10:51 - knows that text is a variable if text
10:54 - wasn't a variable then there would be an
10:56 - error because the text it just prints
10:59 - nil because the text isn't in quote
11:02 - marks because it's not a string
11:04 - okay if it was a string it would be it
11:07 - would be pink like that but it's not so
11:09 - what the variable does is when we go to
11:11 - print it looks up this variable okay
11:14 - we found the variable text it's found
11:16 - that it's equal to the quick brown fox
11:17 - jumps over the lazy dog and so basically
11:19 - substitute text with this strip okay for
11:23 - all of them so when you print texts it's
11:26 - going to print the value that it's
11:28 - assigned to text so again if we clear
11:30 - the output and go again it prints out
11:32 - the quick brown fox and now because we
11:36 - are using text every time and we're just
11:37 - printing out the contents of whatever
11:40 - the text variable is we can change the
11:45 - text of this variable you could change
11:48 - to hello once and it's going to change
11:50 - it well it's gonna print it out 20 times
11:53 - you don't need to change they print
11:55 - because you've only changed text once
11:57 - and then it will just look up text again
11:59 - and then the variable and it will see
12:01 - that text is equal to hello so variables
12:04 - they can be also used to store text like
12:06 - that's probably not the best example but
12:10 - we will come up we will go over more
12:12 - examples of where variables are used in
12:14 - the future like this text can also be in
12:18 - sorry we can variables can also be a
12:21 - number so we could call it my number
12:22 - equals 30 and then you could print out
12:25 - what my number is okay you could also
12:28 - say print print 30 and that will do the
12:30 - same but you could say print my number
12:32 - but then he changed the my number
12:34 - variable it's gonna print out whatever
12:36 - whatever is equal to so it will look up
12:40 - what the variable is
12:42 - okay set to 500 and it's going to print
12:44 - out 500 because we've assigned we've
12:46 - assigned 500 to this variable now we
12:49 - have to define a variable first before
12:53 - you print it or use it so if we moved
12:56 - this print above the when we define this
13:01 - variable we're gonna get an error
13:03 - because scripts okay we got new and nil
13:06 - means nothing okay
13:08 - because scripts they run step-by-step so
13:12 - the first command the first line is
13:14 - going to execute is this print but it's
13:16 - like well hold on I don't know what
13:17 - my numbers you haven't defined it yet
13:19 - because we haven't got to that stage yet
13:21 - because we're defining it down here
13:23 - where we've got the local my number and
13:24 - the equal sign tells us that we're
13:26 - setting it to two something so my number
13:30 - let's move it back down what we can also
13:32 - do is we can do mathematics on this
13:37 - number
13:37 - so we could say print my number at 10
13:40 - and that's gonna look what my number is
13:42 - so it's gonna be 500 it's gonna take
13:45 - that number I'm gonna add 10 to it so
13:47 - you should have 510 there we go 5 10 so
13:50 - we can do all kinds of maths on the
13:52 - numbers you could do divide 500 divided
13:54 - by 10 that's 50 there we go and you can
13:58 - see how you put the name of the variable
14:01 - but it substitutes it in pretty much all
14:04 - right and you may be wondering what why
14:07 - can't you just say 500 instead
14:09 - well that's because variables are useful
14:11 - for when you're using the same number
14:14 - over and over again
14:15 - okay so say we had another line that did
14:18 - my number and we wanted to add 50 to it
14:21 - we could say my number equals my number
14:23 - at 50 so we're getting the current value
14:26 - of my number which is 500 and then we're
14:29 - setting it to what it currently is 500
14:32 - with 50 I'd gone to it so it would
14:35 - become 550 and then we would be taking
14:39 - my number which is now 550 because we
14:42 - added 50 to it here and it's working in
14:44 - steps and it's dividing it by 10 so we
14:47 - should get 55 there we go so a variable
14:51 - would be useful when you want to store
14:54 - why not store we'll keep a number say in
14:56 - like temporary storage so for example
15:00 - you could have the number of time left
15:03 - before a new game starts and then you
15:06 - might keep tell you you might keep
15:08 - subtracting one from it every second and
15:10 - then you'd be able to check when my
15:13 - number has got down to 0 that's
15:14 - something that we'll be looking at in a
15:16 - future video but what you should know is
15:18 - that variables they use to store
15:21 - information will not store more like
15:23 - hold information okay
15:25 - we can assign values to a variable name
15:28 - and then instead of having to write out
15:30 - the same value again
15:31 - or if you wanted to keep track of a
15:33 - certain value we would use a variable
15:37 - now if we didn't use a variable in this
15:39 - case okay we got rid of the definition
15:42 - and we said five hundred equals and we
15:45 - just did five hundred plus fifty okay
15:48 - and then we did five hundred and fifty
15:52 - divided by ten you can see how actually
15:56 - you can't see but one misses you can't
15:59 - keep track of a number as you go along
16:00 - and you can't just say five hundred plus
16:03 - 50 you have to use variables so you can
16:05 - go into steps if you know I mean because
16:08 - with variables so you can firstly define
16:10 - it to be one number you can do something
16:12 - to that same number and then you know
16:14 - dude lots of different math calculations
16:17 - on it and then you can get an end result
16:18 - and you can store that value as a
16:22 - variable and keep track of it look it up
16:25 - up to it subtract to it etc so that's
16:28 - what variable is it's kind of
16:29 - contemporary store in your script this
16:32 - video has gone on far longer than I'd
16:33 - hoped for it to have gone on for and we
16:36 - haven't gone over variables fully yet
16:38 - but just think of a variable as like a
16:41 - temporary store of information that you
16:44 - need in your script which you can use to
16:46 - save time okay you go back to the
16:48 - original example you can set it to an
16:51 - object and then don't have to keep
16:53 - saying the reference to that object over
16:55 - and over again so that was variables let
16:57 - me know if you have any questions I'll
16:59 - probably make a second video on this
17:00 - leave any questions you have in the in
17:03 - the comment section and I'll also have
17:06 - another quiz in the description on
17:08 - variables and probably some more videos
17:11 - covering it again coming soon in the
17:14 - description make sure you subscribed to
17:16 - the channel for more scripting videos
17:18 - there'll be an athlean blox logo on the
17:19 - screen now with an arrow pointing to it
17:21 - and also the next video in this series
17:24 - is on screen now you can see the
17:26 - thumbnail for it towards the right go
17:28 - ahead and click it and I'll see you in
17:30 - the next video thanks for watching

Cleaned transcript:

welcome back to the fourth video in the scripting series now in the previous video we used what we'd learnt throughout the series so far to create a quick little dice game where you could roll dice and I get a get a number but today we're gonna be learning about variables now I did touch upon that in the previous video very very briefly but we're gonna go deeper on what variables are in roblox scripting so let me give you an example first before I tell you how they work so we've got our dice game here okay and each time that we want to change a property of of the dice we have to say game don't workspace dice one okay now if we had our dice and they were inside a folder sorry if they were inside a model if we group them together and we named this model dice and then maybe if it was in another model called game parts okay you would see that in order to reference the dice we would have to say game dot workspace dot game parts dot dice and then dice one okay game parts dice dice one okay yeah just make sure I got that right so you'd have to say that every time that you wanted to change a property or even if it was just still in the workspace you would still have to work right out game dot workspace dot dice one every time and if you wanted to change lots of properties of a dice say you wanted to change its color as well then you'd have to say the same thing again game dot workspace but game parts dot dice dice two dot brick color equals brick color dot new and we could say real red okay so you can see even though this works and it still goes red you you can you can tell that this is really really long it's boring to have to write out every time you want to change a property now this is where variables come in and a variable can be thought of kind of like a shortcut okay a variable is used to so let me show you it's used to hold some information so instead of saying dice game to workspace that game passed up dice all the time I could create a shortcut for that and I could say I could make a variable for this dice and whenever I just said the name of that variable let's imagine we called it dice and it would do the exact same thing as saying game don't work space dot game parts dice okay and just to show you so to create variable you have to say local first now you can say it without local but it's good practice to always put local before your variables and I'll explain why in a future video so we say local and then we cover our variable and name so the name of this variable can be anything as long as you haven't got a variable that's name the same thing so I'm going to call my variable dice okay and so I've given it a name and now I need to give my dice about variable a value okay so this dice name is going to be equal to a value it's going to hold some information so think of it of like a storage box and then you put the information inside of it okay so dice is equal to game dot work space dot game parts dot dice okay so instead of saying game dot work space game passedout dice we can now just say dice and if I copy this and I paste it instead of endor Y space no game parts dot dice every time okay you can see that it has greatly shortened our code okay and we've only had to say dice twice we haven't had to write out game dot words based on game parts dot and dice every single time so now that we are using dice for these two lines I could change the contents of this variable and it would update for both of these lines I wouldn't have to update them one by one but we'll get into that a little bit later on but let's test this out and see if it still works we should still have the same result and they should both be unanchored there we go they still get an anchored it works just as fine but we've saved ourselves from having to write out the same thing twice and that is what a variable is it's a shortcut because it holds information under a name and then we can use that name of that variable time and time again instead of having to write this instead of writing the same stuff out again and we can shorten this even more we could change our variable to be called dice one and then we could just add dot dice one onto the end of this and then we could copy and paste this variable for dice two and just change the dice one to dice two and then instead of saying dice dice one we could just say dice 1 dot anchored equals false and dice to the anchored equals false we've referenced to dice once at the tomorrow once for each dice at the top of our script we've made the variable and then later on we are basically referencing the variable name which are writing the variable name which substitutes for the contents of the variable so whenever this script goes to run is going to look it's gonna look up this variable we've written and it's going to think of it as if he's replacing the name of the variable with the contents of the variable so we've written dice 1 but there is no such thing as dice 1 in the game inside of game when it goes and looks for dice 1 as a service it's not gonna find anything it knows that we've got a variable in our script and so it looks at this variable it sees that it's equal to game that works based off game parts dice dice 1 and then in those and what we're talking about so we can just say dice one but and equals false dice to junk it equals false and again the same thing happened we've got the same action happening in the game but what we've done is we've shortened the amount of code that we have to write and again if we want to change more properties off of dice we don't have to write out the whole structure of having to reference it we can just say dice 1 dot brick color equals brick color dot new red for example I stood a brick color equals brick color don't new really blue you can see this is gonna save time in the future when you want to keep referencing the same parts okay and that that's white because the decal background is is white and it go and overlaps the the blue if you're wondering so that is a variable it lets you save time if you're writing the same things out over and over again you can assign values or content to a variable name and then use that name instead of having to to write the same stuff out again and that was a very very brief introduction introduction to variables but we we've set our variables here to the object the value of each variable here isn't as an object because we're saying dice 1 and dice these are these are both objects and you know because they're parts so a variable could be anything you could have a variable for the workspace so local workspace equals game or workspace even though you wouldn't really need a workspace variable because you can say workspace anyway that's like a roblox defined variable which the script already knows about but you could create a variable for other services so if you wanted to get replicated storage you could say all lighting for example you could say local lighting equals game dot lighting okay so instead of having to say game dot lighting all the time in future you could just say lighting so that's one way variables can be used to save you time but as I said a variable doesn't always have to be an object or path to something a variable could also well it could be any data type and you know we have the four main datatypes in roblox we have a string we have number we have a boolean value which can be true or it could be false what's the other datatype oh yes an object as well so again to workspace dot camera for example that is an object so these are the four main data types okay and a variable can be any of these so we could say local local text that could be the name of our variable and then we could set this text we could assign a string to it okay because a string datatype is some text and inside of here we could write the quick brown fox jumps over the lazy dog okay and now I I think I've gone over this before the print command if you don't know about it the print basically puts a message in the output so I could print hello there okay I could print hello run the game and it prints hello there don't worry about these errors by the way so that's what print does okay what we could do is you could write the quick brown fox jumps over the lazy dog okay and that would print it out we could print out ten times okay let's try this again so you can see it prints out quick quick Ram Fox ten times um and then what if you wanted to change the the text okay or you made a spelling mistake in the mall and you'd have to update them one by one right every time but instead of doing that you could say print text and you could then print it out even more times you could bring it out twenty times if you wanted to okay and you're gonna get the same output if we run the game again it's going to print the quick brown fox jumps over the lazy dog and so it's printing this because it knows that text is a variable if text wasn't a variable then there would be an error because the text it just prints nil because the text isn't in quote marks because it's not a string okay if it was a string it would be it would be pink like that but it's not so what the variable does is when we go to print it looks up this variable okay we found the variable text it's found that it's equal to the quick brown fox jumps over the lazy dog and so basically substitute text with this strip okay for all of them so when you print texts it's going to print the value that it's assigned to text so again if we clear the output and go again it prints out the quick brown fox and now because we are using text every time and we're just printing out the contents of whatever the text variable is we can change the text of this variable you could change to hello once and it's going to change it well it's gonna print it out 20 times you don't need to change they print because you've only changed text once and then it will just look up text again and then the variable and it will see that text is equal to hello so variables they can be also used to store text like that's probably not the best example but we will come up we will go over more examples of where variables are used in the future like this text can also be in sorry we can variables can also be a number so we could call it my number equals 30 and then you could print out what my number is okay you could also say print print 30 and that will do the same but you could say print my number but then he changed the my number variable it's gonna print out whatever whatever is equal to so it will look up what the variable is okay set to 500 and it's going to print out 500 because we've assigned we've assigned 500 to this variable now we have to define a variable first before you print it or use it so if we moved this print above the when we define this variable we're gonna get an error because scripts okay we got new and nil means nothing okay because scripts they run stepbystep so the first command the first line is going to execute is this print but it's like well hold on I don't know what my numbers you haven't defined it yet because we haven't got to that stage yet because we're defining it down here where we've got the local my number and the equal sign tells us that we're setting it to two something so my number let's move it back down what we can also do is we can do mathematics on this number so we could say print my number at 10 and that's gonna look what my number is so it's gonna be 500 it's gonna take that number I'm gonna add 10 to it so you should have 510 there we go 5 10 so we can do all kinds of maths on the numbers you could do divide 500 divided by 10 that's 50 there we go and you can see how you put the name of the variable but it substitutes it in pretty much all right and you may be wondering what why can't you just say 500 instead well that's because variables are useful for when you're using the same number over and over again okay so say we had another line that did my number and we wanted to add 50 to it we could say my number equals my number at 50 so we're getting the current value of my number which is 500 and then we're setting it to what it currently is 500 with 50 I'd gone to it so it would become 550 and then we would be taking my number which is now 550 because we added 50 to it here and it's working in steps and it's dividing it by 10 so we should get 55 there we go so a variable would be useful when you want to store why not store we'll keep a number say in like temporary storage so for example you could have the number of time left before a new game starts and then you might keep tell you you might keep subtracting one from it every second and then you'd be able to check when my number has got down to 0 that's something that we'll be looking at in a future video but what you should know is that variables they use to store information will not store more like hold information okay we can assign values to a variable name and then instead of having to write out the same value again or if you wanted to keep track of a certain value we would use a variable now if we didn't use a variable in this case okay we got rid of the definition and we said five hundred equals and we just did five hundred plus fifty okay and then we did five hundred and fifty divided by ten you can see how actually you can't see but one misses you can't keep track of a number as you go along and you can't just say five hundred plus 50 you have to use variables so you can go into steps if you know I mean because with variables so you can firstly define it to be one number you can do something to that same number and then you know dude lots of different math calculations on it and then you can get an end result and you can store that value as a variable and keep track of it look it up up to it subtract to it etc so that's what variable is it's kind of contemporary store in your script this video has gone on far longer than I'd hoped for it to have gone on for and we haven't gone over variables fully yet but just think of a variable as like a temporary store of information that you need in your script which you can use to save time okay you go back to the original example you can set it to an object and then don't have to keep saying the reference to that object over and over again so that was variables let me know if you have any questions I'll probably make a second video on this leave any questions you have in the in the comment section and I'll also have another quiz in the description on variables and probably some more videos covering it again coming soon in the description make sure you subscribed to the channel for more scripting videos there'll be an athlean blox logo on the screen now with an arrow pointing to it and also the next video in this series is on screen now you can see the thumbnail for it towards the right go ahead and click it and I'll see you in the next video thanks for watching
