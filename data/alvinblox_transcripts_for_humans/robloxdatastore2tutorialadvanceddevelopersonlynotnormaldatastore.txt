With timestamps:

00:00 - in this video I'm gonna be showing you
00:01 - how to use a datastore - which is an
00:04 - alternative to normal data stores and
00:06 - hopefully it will prevent data loss in
00:09 - your game so let's get started welcome
00:13 - back to another video my name is Alvin
00:15 - blocks if it's your first time on my
00:16 - channel make sure that you've clicked on
00:18 - the subscribe button and you've hit the
00:19 - notification bar so you never miss out
00:21 - when I upload a new video so today we
00:25 - will be looking at this data store - so
00:27 - I've got this deform post on my screen
00:30 - and I'm going to leave a link this in
00:32 - the description of the video because
00:33 - this is a really useful module and the
00:37 - point of it is it's it's similar to what
00:40 - its datastore it will save your data you
00:43 - can tell it what data to save and it's
00:45 - more reliable in case of data stores
00:48 - going down this data store system will
00:51 - make a backup of your data store to
00:54 - prevent data loss as you can read down
00:56 - here it says data stores will fail
00:59 - through the fault of roblox there's
01:01 - nothing you can do about it data store
01:03 - now has something to deal with it you
01:05 - can use backup API so up here you can
01:08 - see there's some backup in the API
01:11 - section here you can see this backup but
01:14 - where is it actually it's down here okay
01:16 - so backup set backup their backup it
01:19 - allows you to make a backup of data in
01:21 - case it gets lost which is pretty cool
01:24 - and it's also a bit easier to understand
01:28 - if you find data stores a little bit
01:30 - confusing so we're going to be going
01:31 - over this today how to use it a bit of
01:34 - an example setup because there are few
01:37 - people who don't really understand how
01:39 - it works so first things first you're
01:41 - going to want to go to roblox studio and
01:44 - you're going to want to firstly get the
01:46 - module now I'm going to leave a link to
01:48 - the module in the description of this
01:50 - video you want to take it as a free
01:53 - model and insert it into your game
01:54 - through the toolbox and then it should
01:57 - appear in the workspace here I'm just
01:59 - going to put mine in service script
02:01 - service now we're not actually going to
02:02 - be requiring the module in game we're
02:05 - going to be actually downloading it from
02:08 - from the web by saying require and then
02:11 - the asset ID but if you wanted to test
02:13 - this
02:13 - studio it'd be much easier to use the
02:17 - main module objects because there might
02:19 - be a little bit of a delay while the
02:22 - module is downloaded and it may not work
02:25 - but we'll get onto that later on so
02:27 - we're going to create a a system which
02:30 - will save a player's points and load
02:33 - them into the game when you rejoin so
02:35 - let's insert a script into service
02:37 - script service I'm gonna make it a
02:39 - little bit bigger and I'm gonna show you
02:41 - how this data store system works so
02:43 - first thing that we need to do is
02:45 - require the module so we can say local
02:47 - data store 2 equals require and then you
02:51 - want to get the asset ID of the module
02:54 - and this is actually in the dev forum
02:56 - post which we just shared so I'm gonna
02:58 - go get that for you all right here we
03:00 - are and we're just gonna copy this this
03:03 - require and we're going to just paste it
03:06 - back into studio
03:08 - and we have now got the module so all I
03:12 - want to do now is define a default value
03:14 - okay so whenever our player joins the
03:17 - game if they're a new player and we want
03:19 - to try and load their points but they've
03:21 - never actually played the game before we
03:23 - want to give them a default amount of
03:24 - cash - for them to start off with so
03:27 - let's give them 100 cash so if you want
03:29 - to give them 500 you could change this
03:31 - to 500 it's it's up to you now how this
03:35 - works is you have to define a key in the
03:38 - datastore so we need to insert a player
03:41 - added event here so whenever a new
03:43 - player joins the game we can set up
03:45 - their key and we can check to see if
03:49 - they've got some data so we're gonna say
03:53 - it local points data store for this
03:56 - player equals and then we can just get
03:58 - the module datastore - and we can just
04:02 - say inside these brackets we can say
04:04 - points because that's the name of our
04:06 - key comma PLR so this is the name of our
04:11 - key for this player now if you've done
04:13 - normal data stores you'll know that
04:14 - you'll have to have a key which is
04:17 - unique to each player so for example the
04:20 - key may look something like this so user
04:23 - and then it may have their user ID like
04:25 - this so it looks something like that
04:27 - well with this data store - system the
04:31 - module actually you can actually name
04:33 - the keys the same thing for each player
04:35 - and the module will deal with making it
04:38 - independent for each player making it
04:40 - unique so we don't actually have to we
04:43 - shouldn't make this unique to each
04:46 - player it needs to be the same so we can
04:48 - just call us points for this player and
04:50 - all other players in the game their key
04:52 - can be called points and the module will
04:55 - deal with each key being separate which
04:59 - is pretty cool I like that with this
05:01 - module so we're going to insert some
05:03 - leader stats into the game you should be
05:06 - able to do this already but if not this
05:09 - is how it works so I'm just gonna just
05:12 - copy these in to make it a little bit
05:13 - quicker just insert some leader sites
05:15 - into the player and creates a points
05:17 - value so how this data store works it's
05:21 - quite different to
05:22 - normal data stores because usually we
05:25 - update a value so we could update a
05:27 - points value in our player and then
05:30 - whenever the player leaves the game
05:31 - we'll save that value so we so we saved
05:34 - the current value of the points to the
05:36 - data store well the difference with data
05:38 - store two is that from what I've from
05:41 - what I've been playing around with it
05:42 - what happens is you update the data
05:45 - store the value which is stored in the
05:47 - data store and then whenever this that
05:49 - value gets changed the script will
05:52 - update your points value so it's
05:54 - actually the data store getting changed
05:56 - first not the actual value which is
05:58 - going to be saved if that makes sense so
06:01 - we don't actually want to say you know
06:03 - points value equals datastore.get async
06:08 - as you usually would I'm gonna show you
06:10 - how it how it works so when we want to
06:13 - update players points for example we can
06:18 - either set the the points to a complete
06:23 - new value or we can increment their
06:27 - current value by a specific number so
06:29 - say they had 50 points saved and then we
06:32 - incremented 500 their points would
06:35 - change to 550 because 500 got added on
06:38 - to the current balance but if we if the
06:41 - points were currently set to 50 and we
06:43 - set 500 the points would just change to
06:47 - 500 set to a brand new value now the way
06:50 - that we do this is we want well I'm
06:52 - gonna actually insert part into the game
06:54 - and this is just an example so let's
06:58 - just make a part we're gonna make it red
07:00 - and I'm gonna insert a click detector
07:03 - into this part and what we're gonna do
07:06 - in this script is when this click
07:09 - detector has been clicked so we can say
07:11 - game and it works very sweet child part
07:15 - dot mouse not not so I mean click
07:19 - detector but mouse click connect
07:23 - function okay so this is an event which
07:27 - is going to connect this function and
07:30 - run it whenever the player clicks on
07:33 - that red brick
07:35 - we say player has clicked the red brick
07:38 - and we want to pass the player actually
07:42 - clicked this brick okay so player so
07:45 - we've got the player object now and we
07:48 - want to do when they click this we want
07:50 - to increment their currency by 50 so we
07:55 - want to add 50 on to their current
07:57 - points balance so instead of just saying
08:00 - player don't need a stat stop points dot
08:03 - value equal played up new stats are you
08:07 - just 50 for example or 60 all right 60
08:12 - pips so instead of doing this and just
08:14 - updating the points value we want to
08:16 - actually increment their data store
08:18 - value which is which is being saved and
08:21 - then whenever this data store value gets
08:23 - updated we can what whenever dated we
08:28 - can change the the points value so
08:29 - instead of doing that we're going to get
08:32 - their key so we can say local points
08:35 - data store equals data store - I never
08:39 - want to get their key which is points
08:41 - and we want to pass the player objects
08:43 - so we're getting the points key for this
08:46 - specific player and then what we're
08:49 - gonna do is we're just going to say
08:52 - because what we want to do want to
08:53 - increment their at their points we can
08:55 - say points data store so this will be
08:58 - the current data which is stored for
09:01 - this player that key we can say :
09:04 - increments and inside of here what we
09:08 - can do is we can put a value inside of
09:10 - here okay so 50 so we want to increment
09:12 - it by 50 and we also want to put a comma
09:15 - and a default value okay so we can just
09:18 - say default value okay so in case
09:23 - there's no data there we can just make
09:25 - sure that they have a default value of
09:27 - 100 points otherwise we can increment
09:30 - that their data store by 50 points so
09:35 - that will have increased the saved data
09:37 - in that key by 50 what we need to do now
09:41 - is create a callback function which is
09:44 - going to run whenever the data store has
09:47 - been updated and
09:48 - inside that function we can update the
09:51 - players points value to to what has just
09:55 - been updated in the data store so we can
09:58 - do local function and we can call this
10:01 - function of points updated and we want
10:05 - to pass here I want to put in the
10:07 - brackets we want to put the updated
10:10 - value so this is what the data store is
10:13 - going to be worth now okay so this is
10:15 - what we want to update their points to
10:16 - so we can just say points value equals
10:20 - points data store and we can say get
10:25 - updated value so what we're doing here
10:29 - is we're doing a little get request on
10:32 - this data store so we're getting the
10:35 - data store with that key and we're
10:38 - saying whoops we're saying get ok and
10:41 - that's getting the latest value from
10:44 - that data store but if there is no if
10:47 - there's no value there what we can do
10:49 - why should we want to get that value
10:53 - from the data store and the default
10:54 - value if not if so if there is no data
10:59 - there we will pass a default value to
11:01 - begin with so we're going to say points
11:04 - data note once they point update and
11:06 - then we just want to give the default
11:10 - value just like this so the first time
11:12 - the player joins the game this this is
11:15 - gonna call the local function here and
11:17 - it's going to check to see if they've
11:19 - got any data and if they haven't we're
11:21 - passing through this default value of
11:23 - 100 so if they haven't got any data
11:25 - their points will be set to 100 so
11:28 - instead of having to check to see
11:29 - whether the data is it not equal to nil
11:32 - and then if it is then we can supplier
11:34 - if it isn't then we can supply it a
11:37 - default value we can just pass through
11:40 - the default value here and it does it
11:42 - for us now we want to we want to make
11:46 - this function trigger whenever the date
11:49 - has been updated so currently it's only
11:51 - going to run once when they join the
11:52 - game so we want to say points data store
11:54 - then we want to say curl on on updates
11:57 - and we can pass through points updated
12:01 - here
12:02 - points updates there we go so this is
12:06 - the function which is going to run
12:07 - whenever the points have been updated
12:11 - and if you look on the dev forum post it
12:14 - actually says it says on on updates adds
12:18 - a callback function used every time that
12:20 - the cached about you updates
12:22 - so basically when the value has updated
12:25 - in your data store we'll call that
12:28 - function and update the points value so
12:32 - let's just go over this script again and
12:34 - I can tell you everything that's going
12:35 - on so at the top we're getting the data
12:37 - store module no this is not our we're
12:39 - not actually getting the data store
12:40 - service will enter finding a default
12:43 - value which will be given to the player
12:45 - if they've never played before or if no
12:47 - data can be found
12:48 - we're then getting the data store for
12:52 - this specific player using the key
12:54 - points but we can use the same key name
12:57 - for different players because the module
12:59 - handle will handle the making it unique
13:02 - for each player which is pretty cool
13:04 - we're then inserting some leader stats
13:06 - and points so that we can see if they
13:08 - save and load and then we've got a local
13:11 - function here called points update and
13:13 - whenever this function is called it will
13:16 - get the latest value from the data store
13:18 - and set it to the players points value
13:21 - and you can see we are passing the
13:24 - argument of updated value and that will
13:28 - be the current amount of points that
13:31 - they have but if they don't if no date
13:35 - has been found then we can we can give
13:38 - them a default amount of cash which is
13:41 - 100 so if the get request does not find
13:44 - anything we'll just give them 100 cash
13:46 - and then we are just binding this
13:49 - function up to this this event here on
13:52 - update so whenever the data store has
13:55 - been updated we can call this and it
13:58 - will get the latest amount of points
14:01 - from the data store so what's happening
14:03 - is which we're not actually updating the
14:05 - points value we're dating the data store
14:08 - and then we're getting the latest value
14:10 - from that datastore and setting it to
14:11 - the points value so we're not updating
14:13 - the points and then saving it
14:15 - were updating the datastore and then
14:17 - loading the value from that datastore so
14:20 - that is how you do point saving with
14:23 - this module let's go and test it out in
14:25 - a game and that actually brings me on to
14:27 - a point here now if you're watching this
14:31 - video just after it is been released so
14:34 - in the first week maybe you actually
14:36 - won't be able to use this in studio it
14:39 - doesn't actually work in see you at the
14:40 - moment well it kind of does work but it
14:43 - just doesn't save the data when you
14:45 - leave because of some issues which is
14:49 - going to be patched in the next studio
14:51 - update so if you're watching this a few
14:54 - months after don't worry about this what
14:57 - you can do to make this work in studio
14:59 - is you can go into the module here and
15:01 - you can you can create a value in server
15:06 - storage called saving studio needs to be
15:09 - a bull value save in studio and it needs
15:13 - to be true and this will tell the script
15:16 - that you want it to save in studio as
15:19 - well as in game so you'll want for this
15:23 - you'll want to use the main module you
15:25 - want to insert into your game don't use
15:28 - require because because if you use
15:31 - require and you try out in studio it
15:34 - might not be downloaded fully by the
15:36 - time the players in the game so you
15:38 - could either add a weight which would be
15:40 - kind of like a hacky solution because
15:42 - the service may be slow but I recommend
15:45 - instead of using this ID for play solo
15:48 - you just insert the module to your game
15:49 - and say game dot service script service
15:52 - I cannot wait for child main module just
15:55 - like this and then it should work but if
15:58 - you just want to test it in a real game
16:01 - want it to work in your real game
16:03 - servers just use the the asset ID but
16:06 - beware if you test the module in studio
16:10 - and you save an item and then you test
16:13 - it in the real game you could override
16:15 - people's data so just be a bit cautious
16:18 - of that just to be on the safe side you
16:21 - don't have to test it in studio and if
16:25 - you want to turn on the same in studio
16:27 - you have to edit the mod
16:29 - so that is how it works let's go and
16:32 - test out in a real game and see if
16:34 - everything's all right all right so
16:37 - we're in the game now and you can see I
16:39 - actually have four hundred cash and not
16:41 - one hundred that's because I just joined
16:42 - the game and accidentally forgot to
16:44 - click on record and I started pressing
16:46 - the button so I did have one hundred
16:48 - when I started don't worry but we should
16:50 - be able to test that out because I've
16:51 - just asked some people to come join the
16:53 - game so all should be good with that so
16:55 - I'm just going to click on the button
16:57 - and can see that it is incrementing my
17:00 - datastore and then it's updating the
17:03 - it's updating the points for you as well
17:05 - you see some ones during the game and
17:07 - you can see they have 100 points let's
17:09 - see if they go and click the button and
17:11 - hopefully their points will increase or
17:14 - maybe they're afk but we're gonna leave
17:18 - the game in a minute and we're gonna see
17:19 - if our points are save so let's just
17:23 - keep clicking on this button and wait
17:24 - for some more people to join and
17:26 - hopefully it should save our data so if
17:29 - we look in the console and nothing
17:31 - should be going wrong nope everything
17:34 - looks good to me
17:35 - and you can see oK we've got some people
17:38 - clicking the button and what I'm gonna
17:39 - do is I'm gonna shut down the server
17:41 - let's just remember these guys and see
17:44 - how many points they had I'm going to
17:46 - shut down the server and see if it saved
17:49 - so I'm just gonna say stop clicking
17:51 - please
17:54 - okay remember your money amount okay
18:03 - we're gonna shut down the server and
18:04 - we're gonna see if they have the same
18:06 - amount of data so I've got 1,400 now
18:11 - 1450
18:12 - let's leave the game rejoin and see if
18:15 - it loads my money all right I just shut
18:19 - down all service so everyone just got
18:21 - kicked from the game let's see if their
18:23 - money got reloaded there we go I've got
18:27 - my 1450 Sonic Lua has got his 52,000 and
18:32 - got on lightning has got 850 so at the
18:36 - minute everything looks good and auto
18:38 - whitey has got his 46,000 back as well
18:42 - so it's safe for everyone that is pretty
18:45 - cool how it's saved with the datastore
18:47 - too so you can see it works really good
18:49 - and it should work with a ton of players
18:52 - in the game as well there are quite a
18:54 - few games which use this datastore in in
18:57 - their games was quite reliable and so I
18:59 - recommend using it's really good so
19:02 - whenever you want to increase a player's
19:04 - amount of cash say for example if they
19:07 - put a developer product or they won the
19:08 - game instead of saying player dot points
19:11 - or value you want to get their data saw
19:14 - and you want to increment it okay so
19:16 - instead of of updating their their value
19:20 - and waiting for it to be saved you want
19:22 - to update your data store that is that
19:24 - is vital and you also don't want to save
19:26 - this via player moving because the
19:29 - module already already does that and if
19:34 - you did it again it might mess
19:35 - everything up so don't worry about that
19:36 - just increment the value whenever you
19:39 - want to update their currency do not do
19:43 - not update their points value and you
19:45 - should be all good I will be putting up
19:47 - a few more videos more advanced on this
19:49 - topic so make sure to leave me a like so
19:52 - you know that you want to see some more
19:53 - I'm gonna leave a link to this module in
19:56 - the description of the video or you
19:58 - should require it I'm gonna leave a link
20:00 - to the D form thread as well so you can
20:02 - have a read of that this was a basic
20:04 - tutorial on how to make a point system
20:06 - I'm gonna be made
20:07 - more videos on the system soon it's
20:10 - really cool it's by camp Karen who made
20:13 - it I think that's how you pronounce the
20:14 - name there's also gonna be like a tips
20:17 - link if you want to send him something
20:19 - as a thank-you if you use this system so
20:23 - check that out
20:24 - thank you very much for watching if you
20:26 - like this video please click the like
20:27 - button make sure to subscribe and I'll
20:29 - see you in the next video

Cleaned transcript:

in this video I'm gonna be showing you how to use a datastore which is an alternative to normal data stores and hopefully it will prevent data loss in your game so let's get started welcome back to another video my name is Alvin blocks if it's your first time on my channel make sure that you've clicked on the subscribe button and you've hit the notification bar so you never miss out when I upload a new video so today we will be looking at this data store so I've got this deform post on my screen and I'm going to leave a link this in the description of the video because this is a really useful module and the point of it is it's it's similar to what its datastore it will save your data you can tell it what data to save and it's more reliable in case of data stores going down this data store system will make a backup of your data store to prevent data loss as you can read down here it says data stores will fail through the fault of roblox there's nothing you can do about it data store now has something to deal with it you can use backup API so up here you can see there's some backup in the API section here you can see this backup but where is it actually it's down here okay so backup set backup their backup it allows you to make a backup of data in case it gets lost which is pretty cool and it's also a bit easier to understand if you find data stores a little bit confusing so we're going to be going over this today how to use it a bit of an example setup because there are few people who don't really understand how it works so first things first you're going to want to go to roblox studio and you're going to want to firstly get the module now I'm going to leave a link to the module in the description of this video you want to take it as a free model and insert it into your game through the toolbox and then it should appear in the workspace here I'm just going to put mine in service script service now we're not actually going to be requiring the module in game we're going to be actually downloading it from from the web by saying require and then the asset ID but if you wanted to test this studio it'd be much easier to use the main module objects because there might be a little bit of a delay while the module is downloaded and it may not work but we'll get onto that later on so we're going to create a a system which will save a player's points and load them into the game when you rejoin so let's insert a script into service script service I'm gonna make it a little bit bigger and I'm gonna show you how this data store system works so first thing that we need to do is require the module so we can say local data store 2 equals require and then you want to get the asset ID of the module and this is actually in the dev forum post which we just shared so I'm gonna go get that for you all right here we are and we're just gonna copy this this require and we're going to just paste it back into studio and we have now got the module so all I want to do now is define a default value okay so whenever our player joins the game if they're a new player and we want to try and load their points but they've never actually played the game before we want to give them a default amount of cash for them to start off with so let's give them 100 cash so if you want to give them 500 you could change this to 500 it's it's up to you now how this works is you have to define a key in the datastore so we need to insert a player added event here so whenever a new player joins the game we can set up their key and we can check to see if they've got some data so we're gonna say it local points data store for this player equals and then we can just get the module datastore and we can just say inside these brackets we can say points because that's the name of our key comma PLR so this is the name of our key for this player now if you've done normal data stores you'll know that you'll have to have a key which is unique to each player so for example the key may look something like this so user and then it may have their user ID like this so it looks something like that well with this data store system the module actually you can actually name the keys the same thing for each player and the module will deal with making it independent for each player making it unique so we don't actually have to we shouldn't make this unique to each player it needs to be the same so we can just call us points for this player and all other players in the game their key can be called points and the module will deal with each key being separate which is pretty cool I like that with this module so we're going to insert some leader stats into the game you should be able to do this already but if not this is how it works so I'm just gonna just copy these in to make it a little bit quicker just insert some leader sites into the player and creates a points value so how this data store works it's quite different to normal data stores because usually we update a value so we could update a points value in our player and then whenever the player leaves the game we'll save that value so we so we saved the current value of the points to the data store well the difference with data store two is that from what I've from what I've been playing around with it what happens is you update the data store the value which is stored in the data store and then whenever this that value gets changed the script will update your points value so it's actually the data store getting changed first not the actual value which is going to be saved if that makes sense so we don't actually want to say you know points value equals datastore.get async as you usually would I'm gonna show you how it how it works so when we want to update players points for example we can either set the the points to a complete new value or we can increment their current value by a specific number so say they had 50 points saved and then we incremented 500 their points would change to 550 because 500 got added on to the current balance but if we if the points were currently set to 50 and we set 500 the points would just change to 500 set to a brand new value now the way that we do this is we want well I'm gonna actually insert part into the game and this is just an example so let's just make a part we're gonna make it red and I'm gonna insert a click detector into this part and what we're gonna do in this script is when this click detector has been clicked so we can say game and it works very sweet child part dot mouse not not so I mean click detector but mouse click connect function okay so this is an event which is going to connect this function and run it whenever the player clicks on that red brick we say player has clicked the red brick and we want to pass the player actually clicked this brick okay so player so we've got the player object now and we want to do when they click this we want to increment their currency by 50 so we want to add 50 on to their current points balance so instead of just saying player don't need a stat stop points dot value equal played up new stats are you just 50 for example or 60 all right 60 pips so instead of doing this and just updating the points value we want to actually increment their data store value which is which is being saved and then whenever this data store value gets updated we can what whenever dated we can change the the points value so instead of doing that we're going to get their key so we can say local points data store equals data store I never want to get their key which is points and we want to pass the player objects so we're getting the points key for this specific player and then what we're gonna do is we're just going to say because what we want to do want to increment their at their points we can say points data store so this will be the current data which is stored for this player that key we can say increments and inside of here what we can do is we can put a value inside of here okay so 50 so we want to increment it by 50 and we also want to put a comma and a default value okay so we can just say default value okay so in case there's no data there we can just make sure that they have a default value of 100 points otherwise we can increment that their data store by 50 points so that will have increased the saved data in that key by 50 what we need to do now is create a callback function which is going to run whenever the data store has been updated and inside that function we can update the players points value to to what has just been updated in the data store so we can do local function and we can call this function of points updated and we want to pass here I want to put in the brackets we want to put the updated value so this is what the data store is going to be worth now okay so this is what we want to update their points to so we can just say points value equals points data store and we can say get updated value so what we're doing here is we're doing a little get request on this data store so we're getting the data store with that key and we're saying whoops we're saying get ok and that's getting the latest value from that data store but if there is no if there's no value there what we can do why should we want to get that value from the data store and the default value if not if so if there is no data there we will pass a default value to begin with so we're going to say points data note once they point update and then we just want to give the default value just like this so the first time the player joins the game this this is gonna call the local function here and it's going to check to see if they've got any data and if they haven't we're passing through this default value of 100 so if they haven't got any data their points will be set to 100 so instead of having to check to see whether the data is it not equal to nil and then if it is then we can supplier if it isn't then we can supply it a default value we can just pass through the default value here and it does it for us now we want to we want to make this function trigger whenever the date has been updated so currently it's only going to run once when they join the game so we want to say points data store then we want to say curl on on updates and we can pass through points updated here points updates there we go so this is the function which is going to run whenever the points have been updated and if you look on the dev forum post it actually says it says on on updates adds a callback function used every time that the cached about you updates so basically when the value has updated in your data store we'll call that function and update the points value so let's just go over this script again and I can tell you everything that's going on so at the top we're getting the data store module no this is not our we're not actually getting the data store service will enter finding a default value which will be given to the player if they've never played before or if no data can be found we're then getting the data store for this specific player using the key points but we can use the same key name for different players because the module handle will handle the making it unique for each player which is pretty cool we're then inserting some leader stats and points so that we can see if they save and load and then we've got a local function here called points update and whenever this function is called it will get the latest value from the data store and set it to the players points value and you can see we are passing the argument of updated value and that will be the current amount of points that they have but if they don't if no date has been found then we can we can give them a default amount of cash which is 100 so if the get request does not find anything we'll just give them 100 cash and then we are just binding this function up to this this event here on update so whenever the data store has been updated we can call this and it will get the latest amount of points from the data store so what's happening is which we're not actually updating the points value we're dating the data store and then we're getting the latest value from that datastore and setting it to the points value so we're not updating the points and then saving it were updating the datastore and then loading the value from that datastore so that is how you do point saving with this module let's go and test it out in a game and that actually brings me on to a point here now if you're watching this video just after it is been released so in the first week maybe you actually won't be able to use this in studio it doesn't actually work in see you at the moment well it kind of does work but it just doesn't save the data when you leave because of some issues which is going to be patched in the next studio update so if you're watching this a few months after don't worry about this what you can do to make this work in studio is you can go into the module here and you can you can create a value in server storage called saving studio needs to be a bull value save in studio and it needs to be true and this will tell the script that you want it to save in studio as well as in game so you'll want for this you'll want to use the main module you want to insert into your game don't use require because because if you use require and you try out in studio it might not be downloaded fully by the time the players in the game so you could either add a weight which would be kind of like a hacky solution because the service may be slow but I recommend instead of using this ID for play solo you just insert the module to your game and say game dot service script service I cannot wait for child main module just like this and then it should work but if you just want to test it in a real game want it to work in your real game servers just use the the asset ID but beware if you test the module in studio and you save an item and then you test it in the real game you could override people's data so just be a bit cautious of that just to be on the safe side you don't have to test it in studio and if you want to turn on the same in studio you have to edit the mod so that is how it works let's go and test out in a real game and see if everything's all right all right so we're in the game now and you can see I actually have four hundred cash and not one hundred that's because I just joined the game and accidentally forgot to click on record and I started pressing the button so I did have one hundred when I started don't worry but we should be able to test that out because I've just asked some people to come join the game so all should be good with that so I'm just going to click on the button and can see that it is incrementing my datastore and then it's updating the it's updating the points for you as well you see some ones during the game and you can see they have 100 points let's see if they go and click the button and hopefully their points will increase or maybe they're afk but we're gonna leave the game in a minute and we're gonna see if our points are save so let's just keep clicking on this button and wait for some more people to join and hopefully it should save our data so if we look in the console and nothing should be going wrong nope everything looks good to me and you can see oK we've got some people clicking the button and what I'm gonna do is I'm gonna shut down the server let's just remember these guys and see how many points they had I'm going to shut down the server and see if it saved so I'm just gonna say stop clicking please okay remember your money amount okay we're gonna shut down the server and we're gonna see if they have the same amount of data so I've got 1,400 now 1450 let's leave the game rejoin and see if it loads my money all right I just shut down all service so everyone just got kicked from the game let's see if their money got reloaded there we go I've got my 1450 Sonic Lua has got his 52,000 and got on lightning has got 850 so at the minute everything looks good and auto whitey has got his 46,000 back as well so it's safe for everyone that is pretty cool how it's saved with the datastore too so you can see it works really good and it should work with a ton of players in the game as well there are quite a few games which use this datastore in in their games was quite reliable and so I recommend using it's really good so whenever you want to increase a player's amount of cash say for example if they put a developer product or they won the game instead of saying player dot points or value you want to get their data saw and you want to increment it okay so instead of of updating their their value and waiting for it to be saved you want to update your data store that is that is vital and you also don't want to save this via player moving because the module already already does that and if you did it again it might mess everything up so don't worry about that just increment the value whenever you want to update their currency do not do not update their points value and you should be all good I will be putting up a few more videos more advanced on this topic so make sure to leave me a like so you know that you want to see some more I'm gonna leave a link to this module in the description of the video or you should require it I'm gonna leave a link to the D form thread as well so you can have a read of that this was a basic tutorial on how to make a point system I'm gonna be made more videos on the system soon it's really cool it's by camp Karen who made it I think that's how you pronounce the name there's also gonna be like a tips link if you want to send him something as a thankyou if you use this system so check that out thank you very much for watching if you like this video please click the like button make sure to subscribe and I'll see you in the next video
