00:00 - hello my name is ma and welcome to
00:01 - another cmake video today we're looking
00:03 - at an open source tool that I believe
00:05 - can help beginners create very simple
00:07 - simple Source projects without having to
00:09 - worry about all the cmake around it and
00:11 - all of the infrastructure that goes into
00:13 - writing your first cmake program
00:14 - specifically we're looking at the cmake
00:16 - init tool which basically aims to create
00:20 - a cmake slash C plus plus project
00:23 - skeleton so you can just go plug into vs
00:25 - code or your editor of choice and start
00:27 - coding without having to worry about all
00:29 - of the stuff that goes around right in
00:31 - the the hello world so let's get into it
00:33 - I actually came across this a couple of
00:34 - weeks ago in one of the forums I'm part
00:37 - of and this project seems to be quite
00:39 - small I mean there isn't much to it
00:41 - apart from the the cmake and the python
00:43 - that makes the whole thing work there's
00:45 - only like six contributors and as far as
00:47 - I can tell only one of these people here
00:49 - is the the main contributor that
00:51 - basically wrote most of the stuff but
00:53 - don't let that fool you because this is
00:54 - actually a very powerful and a very good
00:56 - idea that I believe can help anyone
00:58 - trying to get into C plus so as you can
01:00 - probably guess by now this is a command
01:02 - line tool where you basically just type
01:04 - in cmake in it and it will create a
01:07 - directory containing your whole project
01:08 - structure in a way that you already
01:10 - compiles as soon as you plug the project
01:12 - into vs code or your ID of choice given
01:15 - you have the right requirements
01:16 - installed so as you can see here there's
01:18 - a there's a little bit of an usage GIF
01:20 - here I'm not really going to be you know
01:22 - explaining the whole thing but yeah
01:24 - we're gonna we're gonna go through all
01:25 - of this in a terminal anyway so let's
01:27 - actually begin talking about the
01:28 - requirements and what you need to have
01:30 - installed in your system before you even
01:32 - install the tool so that it runs you
01:33 - know smoothly if we scroll down here on
01:36 - the GitHub project itself there is a
01:38 - list of requirements for example you
01:39 - need to have python 3.8 or newer
01:41 - installed you need to have cmake 3.20 on
01:45 - your installed you need to have get
01:47 - installed and the rest of them are
01:48 - optional stuff however if you are
01:50 - following this tutorial if you are
01:52 - typing everything I type in the terminal
01:54 - line by line you should probably have
01:55 - Conan installed because that's what I'm
01:56 - going to use today or you can also opt
01:59 - to choose a VC package as your package
02:01 - manager as well because this tool
02:03 - supports both the VC package and Conan
02:05 - so in my view this gives the project
02:07 - some brownie points because it
02:09 - integrates package managers seamlessly
02:10 - and just one more note on the
02:12 - requirements here I am using Windows so
02:14 - I've got all of these things already set
02:15 - up and if you don't have all of these
02:17 - things set up in your Windows machine
02:19 - make sure to go on Google and type it
02:21 - because I'm not going to be teaching you
02:22 - how to install all of the requirements
02:23 - these are things you can probably just
02:25 - Google and install them very quickly and
02:27 - also I'm not just on Windows I'm
02:29 - actually using WSL in other words I've
02:31 - got Ubuntu installed here on my Linux so
02:33 - that's what I'm going to be using and if
02:35 - you have used Ubuntu before you probably
02:38 - know that whatever cmake install from
02:40 - the APT package manager it's not going
02:42 - to be a new version it's probably going
02:44 - to be something like 3.16 as far as I
02:46 - know 3.16 or 3.17 so the best way to
02:49 - install a new version of cmake in other
02:51 - words 3.20 or newer is to actually
02:53 - uninstall it using sudo app so sudo apt
02:56 - get Auto remove I believe it is
02:59 - and then you type in cmake here and that
03:02 - will uninstall your cmake system version
03:06 - in my case I don't actually have it
03:07 - installed via apt because I've installed
03:10 - it using pip and believe it or not if
03:12 - you do a sudo pip install cmake I will
03:15 - install cmake system-wide but also a new
03:18 - version of cmake so if I look here C
03:20 - make the version I can see that it's
03:22 - 3.25 so this is a much better way to
03:24 - install cmake compared to apt in my
03:26 - opinion if you're using Ubuntu so just
03:28 - look out for this little detail so let's
03:29 - actually get into C making it let's try
03:31 - to use it so the first thing once you've
03:33 - installed cmake in it which if you
03:36 - follow the tutorial here the the little
03:37 - guide they've got here on the GitHub so
03:39 - if you're done you know your sudo
03:41 - install a sudo pip install see making it
03:43 - you should be able to use it from the
03:45 - command line like this here now if
03:46 - you're running for the first time with
03:47 - no arguments it'll just give you a
03:48 - little help in fact if you do cmake
03:51 - in it
03:52 - hell it will actually give you a more
03:54 - cumbersome help which is kind of what
03:56 - you need in this case so all you can see
03:58 - here is that I see making it the rest of
04:00 - the stuff is optional and the only thing
04:01 - I need is a path to the project so
04:04 - that's what we're going to do here let's
04:05 - let's do that
04:08 - let's put our project into the directory
04:10 - called project and this is where it's
04:11 - going to launch the setup wizard I'm not
04:14 - going to talk through everything I may
04:15 - talk about little things but let's just
04:17 - go with it so I'm gonna put the name on
04:19 - the description and so on
04:22 - now this is one of the things worth
04:24 - mentioning you can even have an
04:26 - executable project a header on the
04:28 - project or a static shell Library
04:31 - project then this is one of the
04:32 - downsides in my opinion of this too
04:33 - because I may want to create an
04:35 - executable as well as a shared object
04:37 - out of my project which obviously you
04:40 - can modify later on you can modify the
04:41 - cmake and do that anyway but for this
04:43 - particular example let's just select the
04:44 - executable
04:46 - with standard and then here comes the
04:48 - the optional stuff that you you can have
04:50 - for example if you want to static
04:51 - analyze your project you can have client
04:53 - ID enabled I'm going to select yes I'm
04:55 - not going to have CPP check I'm going to
04:58 - choose Conan as my package manager here
05:00 - and that's it voila you've got a whole
05:03 - project now on the project directory
05:05 - here so if I do you know three here you
05:07 - can see that quite a few files were
05:09 - generated for me automatically and you
05:11 - can see that you've got your cmake lists
05:13 - here on the top there you go so you make
05:16 - lists as well as something called the
05:18 - cmake precess.json and the cmake user
05:21 - precess.json these two files is what
05:23 - allows you to quickly plug this project
05:26 - into your vs code no matter where you
05:28 - are running from you may be running from
05:30 - your home machine now but you may be
05:31 - running in the same project from from
05:33 - your work as long as you've got the same
05:35 - user presets you should be able to just
05:37 - plug it into vs code and compile it in
05:39 - the same way such as the flags the
05:41 - compilation flags with the same the
05:42 - cmake flags will be the same as long as
05:44 - you select the same preset so this is
05:46 - what's very nice about this project it
05:48 - generates that for you automatically so
05:50 - you don't have to worry about learning
05:52 - the cmake feature and if you're a
05:54 - beginner this can you know help you out
05:56 - quite a lot and another thing worth
05:57 - mentioning here is because we're using
05:59 - Conan we actually have to install the
06:01 - dependencies beforehand with VC package
06:04 - I'm not sure that's the case I think you
06:05 - can just plug and play but let's do that
06:07 - on this project here just so we can
06:09 - actually open it on vs code and start
06:11 - compiling it and running our program so
06:13 - yeah
06:16 - so this is the command to install the
06:18 - dependencies given that you are building
06:20 - with debug which you know this is a bit
06:22 - of a spoiler that we are going to be
06:23 - building in the book because we're going
06:25 - to select the developer a preset that
06:27 - the project generates for us and that is
06:28 - the debug so just make sure you pass the
06:31 - build type into Conan otherwise it won't
06:33 - work and I've had issues where I just
06:35 - try to install the release packages and
06:37 - it just doesn't build out of the box if
06:39 - you don't specify the build type equals
06:41 - debug here so that's one of the things
06:43 - you should watch out for and I'm going
06:44 - to zoom it in just so you can see this
06:47 - uh yeah and because of the way that the
06:50 - cmake in it offers uh wrote the the
06:53 - column file all of your Conan
06:55 - dependencies and you know cmake files
06:57 - that are related to your dependencies
06:58 - should be added inside the Conan
07:02 - directory so if you look at here you
07:03 - know there's a lot of Conan stuff here
07:05 - that was just generated for us and that
07:08 - is it I mean so now if you go into the
07:10 - root of the generated project you can
07:12 - just open it with vs code
07:13 - [Music]
07:15 - and as soon as you open it with vs code
07:17 - it's going to ask you to select a user
07:19 - preset I believe right so let's have a
07:22 - look at that if it hasn't asked you to
07:23 - select a user preset what you can do is
07:25 - control shift p and then select that
07:28 - preset
07:29 - and then you select Dev and this is what
07:32 - we're going to be using to build our
07:33 - application in debug mode here and you
07:35 - can see that there's many other presets
07:37 - you can configure such as you know CI
07:39 - coverage CI sanitize so if you're
07:41 - running this in a CI CD pipeline these
07:44 - are the presets available for you so you
07:45 - can just build your project for example
07:47 - for test coverage here so that's one of
07:49 - the cool things about it as well but
07:50 - let's just select Dev so we can build it
07:52 - it should configure it for you
07:55 - automatically and you can see here the
07:57 - mine has already configured and once
07:59 - it's configured you should be able to
08:01 - just do a cmake build
08:02 - [Applause]
08:05 - so no errors as expected no errors at
08:07 - all the only thing that we got here is a
08:09 - warning which was actually identified by
08:11 - a compiler which is a good thing but we
08:13 - don't really care too much about it uh
08:15 - all we care about is that our executable
08:18 - here was was created and and if I'm not
08:21 - mistaken it's actually called you know
08:23 - the name of your project underscore exe
08:25 - does the Target name and when you
08:27 - compile it you can see that it gets
08:30 - added to your build forward slash Dev
08:32 - directory and my particular executable
08:36 - here is called coding with ma which is
08:37 - the name of my project so this is where
08:39 - we add this about executable and if
08:41 - you're not sure which name you're
08:42 - executable should have I recommend going
08:45 - into the cmake lists and looking at you
08:47 - know what it does to the the main
08:49 - executable here so you can see here it
08:52 - creates an executable Alias is it the XE
08:55 - and sets a property oh so the output
08:58 - name is actually going to be called
08:59 - coding with Ma and this is where this is
09:01 - how I know that this is the you know the
09:03 - main executable that the project
09:04 - generate generated for me and of course
09:07 - there's a lot more cmake that you can go
09:09 - dig into and learn a little bit more if
09:11 - you haven't already used certain
09:13 - functions like this this project
09:14 - generates for you but that's it I mean
09:15 - as far as you know as far as you the
09:17 - beginner is concerned there's nothing
09:18 - you need to actually edit here on the
09:20 - cmake lists you can just start typing
09:23 - your code and compile it now one of the
09:25 - things we haven't actually looked at is
09:27 - you know where is the code where is the
09:29 - main source code and as you can probably
09:31 - guess it's inside the source directory
09:32 - here so if you look at the main.cpp this
09:35 - is what gets compiled into our
09:37 - executable I believe this this file
09:39 - alone is the executable and there is a
09:41 - library that gets created automatically
09:42 - for us as well but I'm not going to go
09:44 - into the library side of things if you
09:46 - want to just get some really quick and
09:48 - dirty code out you'll probably be
09:49 - editing this main.cbp file here this is
09:51 - where you put your Hello World C out so
09:53 - for example let's just modify and then
09:54 - print something else here
09:57 - [Applause]
09:57 - [Music]
09:58 - so I added a new print out here that
10:00 - says hello there YouTube at coding with
10:02 - Ma and let's try and compile it and then
10:04 - after it's compiled let's actually run
10:06 - the executable so as you probably
10:08 - guessed the executable is inside build
10:10 - Dev as we saw before coding with Mars so
10:12 - let's go into that
10:15 - and then we're inside build Dev so all
10:17 - we have to do is call coding with mac
10:18 - and there you go hello there YouTube
10:20 - coding with Mac
10:22 - and I hope you enjoyed this tutorial
10:24 - this is essentially everything you need
10:26 - to know as a beginner if you just want
10:27 - to get a quick cmake project out use
10:30 - cmake in it I'm just going to repeat
10:31 - this you don't really have to know the
10:33 - cmake that goes around it you can just
10:35 - trust the project it's going to create a
10:37 - nice cmake list for you though you know
10:39 - already contains the the executable that
10:41 - you want to create and the rest is just
10:43 - you typing a code into the main function
10:45 - here now obviously there are downsides
10:46 - to it for example if you just want to
10:49 - create an executable as well as a few
10:51 - libraries you will have to basically dig
10:53 - into the cmake and you have to copy and
10:55 - paste things but you know you may find
10:57 - that once you you do that there's quite
10:59 - a lot of bloat that you perhaps don't
11:01 - really need such as if you're creating a
11:03 - shared Library here I know that cmake in
11:05 - it sets up all of the the export headers
11:07 - and all of the macros related to
11:09 - exporting functions in in libraries
11:11 - which you may not necessarily need
11:13 - depending on use case but you know this
11:15 - is way more than suitable if you just
11:17 - want to get a quick project out and not
11:19 - worry about the C make around it so I'm
11:21 - going to give this project a rate of
11:23 - maybe nine out of ten because there are
11:25 - certain things I've perhaps mentioned in
11:27 - this video than it could be improved but
11:30 - nonetheless it's something that you you
11:32 - know every beginner should know and
11:33 - every beginner should indeed use this to
11:35 - get a c plus project compiling in like
11:38 - under three minutes which is you know
11:39 - something that not many people can do I
11:42 - hope you've enjoyed this video and if
11:43 - you've got any feedback if you've got
11:44 - any suggestions or simply just want to
11:46 - say hi feel free to post a comment below
11:48 - and check out my other videos as well
11:50 - particularly if you want to actually
11:51 - debug this project here you know we've
11:53 - created a project we can run it on the
11:55 - terminal but you can't actually debug it
11:56 - using vs code because you know the C
11:59 - making it doesn't yes support setting up
12:01 - the the debugging automatically for you
12:04 - I actually have a video on how to debug
12:06 - a C plus plus projects using vs code on
12:09 - W on Windows WSL so check that out so
12:12 - that's it and bye