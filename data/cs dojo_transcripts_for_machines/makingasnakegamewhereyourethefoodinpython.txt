just like before you can control it with you know with your arrow keys and look i just need to run away from the snake everyone so it's been a while since my last video but i'm back with a new video and just a quick disclaimer i'm making this video in collaboration with replace so last week i was playing around with their website replit and i found this snake game someone made on the site this person's name is lorenzo campos i guess and when you play this game uh it looks just like a standard game standard snake game but what's cool about it is that first of all it's written in pure python and this graphics that you see is actually just the terminal so if you look into the code you know you can see that this person defines some constants here for the graphics and then there's this function that they wrote and this is the function for displaying the graphics and this is basically just a bunch of print statements you know in this person's code the world of the game is represented in this variable and then this person's saying just print everything from the world and surprisingly the graphics looks pretty good and it's pretty smooth uh so i decided to you know sort of take inspiration from this project and make my own snake game so let me show you what it's like here's the game uh you know this is my code i'm just gonna run my game and show you what it's like so as you can see it's pretty similar graphics wise to the game i i just showed you i guess that's partly because you know i took some inspiration from from that code and partly because it seems pretty natural to use you know these particular emojis like green blocks for the for the snake and the apple for the food and white blocks for the borders that seems pretty reasonable but for the code itself i wrote it from scratch and there are a couple of you know big differences from this code to you know the previous code i showed you one is that you might have noticed whenever you eat the apple you know you get a little bit faster and i just figured it's more interesting that way uh but the big implementation difference is the fact that i use this uh blessed library it's a python library for dealing with you know graphics in a terminal and uh it's pretty good so it's kind of similar to this other one called curses it's a builtin module in python and i was actually trying to you know make a snake game with curses but it didn't work that well with unicode and that's why i decided to you know go with blessed it's pretty similar but it works much better for unicode and i like it let me just show you how i use this library and then i'm going to show you the next game i made after this one so to use this library blast you know you just need to do some setup here you can you know browse my code later i think i'm going to put a link to that in the description but after some setup code you just need to say this thing and then make a new block of code this says take start taking input from the keyboard and then hide the cursor i think it makes sense and then we need to set up a while loop so this is going to be our you know main while loop for the game this just says while the input is not q keep doing the following and the following is take the input from the key the keyboard and put it in this variable called the vowel and then do stuff with it and that way you know the game runs pretty smoothly i would say uh but the thing is i i was you know playing this game on my own for a while and i started to think this is kind of boring i guess it's just because it's kind of you know predictable and it's just like you know what to expect when you're playing this game so i thought maybe i can make it a little bit different and i thought what if you control the food instead of the snake so that's what it did okay so with that idea here's what i made i'm just gonna go to my code and start it just like before you can control it with you know with your arrow keys and look i just need to run away from the snake and as you can see uh the snake you know grows without eating anything and someone was asking me why and i think it's because the snake is eating air that's why it's growing anyway it's uh it's pretty fun i'm gonna put a you know link to this game in the description just in case you want to play or you know check out the code and when you get eaten you're done you die and you lose but it's actually possible to you know beat this game by letting the snake sort of corner itself and like i said it's pretty fun and i've gotten a lot of funny comments too like why is this so fast and snake's so much faster than me i love how people are enjoying this game the intensity is real i am god in this game yes you are legendary legendary wolf you are a god in this game yep and i got this other comment i wanted to show you uh this person's like so basically this is a magical snake that keeps growing if it eats nothing and squishing itself to death and the only way to stop it from doing that is to eat the magical apple that can run away it's pretty funny i love how people enjoy this game but you know i kind of figured this game was pretty fun to make and also to play so i wanted to show you guys a little bit of you know what what went behind behind like how i made this game okay so the first thing i'm going to show you is how i represented uh this state you know the whole state of the game like where the snake is and and where the apple is uh i called uh the variable world let me find it here yeah this one right here and it's basically a twodimensional list or twodimensional array and to show you guys what it's like i'm just gonna comment out this whole block of code and then i'm gonna print world here after initializing this world so let me run this code and this is what you have so basically each row represents you know each row in the game it's kind of like a bunch of pixels so the first row is just a bunch of blocks just the borders and the second row is this one and so on and this one is a little bit hard to see but you can see you know where the apple is and where the snake is and where the empty spaces are and then to print this properly all i needed to do was uh just this thing for row in world print this so let me show you what that looks like so here i'm just saying join you know all the characters or all the strings in row with a space in between them and the reason i need that is because without a space it looks more squashed and i think it looks much better with a space okay so let me now quickly explain how i represented the snake how i represented the apple's position and you know i'm going to quickly explain the whole structure of the code and then i'm going to explain how i made the ai for controlling the snake so to represent the position of the snake you know you need multiple lists each list or each array represents you know the position of the particular block of the body so six five uh this one represents the position of the head right here i think it's uh zero one two three four five six row six of column uh five and same thing with this one six four would be right here at this block and six three would be this block right here and you know i could simply use the list of lists or like twodimensional array and i think it would have been efficient enough but to make it extra efficient i used a deck here you know i talked about this data structure before but this data structure is basically good for putting things you know from the left hand side or the right hand side or you're taking things out from either side and that makes sense for this particular application because what we need to do if we need to if we want to move the snake to let's say over here is we need to say okay you know where's this position and they move the head over there so in that you know particular example that would be six six i think so basically we need to put a new position from the left hand side and take out the last position from the right hand side so that's why i figured a deck is a good data structure for this and then for food it's much simpler because you know the food doesn't grow in this game we only have one single position for the food so we just have two numbers this is the number this is the real number and this one represents where the column is and one challenge i had while making this game is that i needed to make the snake slower than the apple because if the snake was moving at the same velocity as the apple you know you would get caught pretty easily and so let me show you how i did that basically this is you know a turnbased game uh you know the whole structure of the code is pretty similar to what i had for the regular uh snake game you know basically i'm using the bless library and then i'm saying this thing that i explained earlier and then i have this while loop as the main loop for the game and then i'm saying you know take take an input from the keyboard put it in this variable called val and then do stuff with it and here basically what i'm saying is each turn comes at a frequency that's determined by the speed or by the timeout and so each turn comes at let's say 200 milliseconds and what i decided to do is uh you know i'm gonna let the snake move only one out of two turns or three out of five turns and you know for details you can just look at the code but i made these config variables n1 and n2 and this basically says the snake will only move n1 out of n2 turns and that way you know the snake is going to be much slower than the apple okay and the last thing i want to explain before i wrap up this video is how i made the ai for moving the snake so before i explain let me show you you can see that it's actually following me pretty well and you know if you play enough you'll see that it starts doing some stupid stuff uh but it's good enough so let me show you how i made it so the key part is uh right here you know first i set preferred move to none and then depending on some conditions i'm gonna put it to you know one of up down right or left so the first thing i'm asking uh here is is the absolute value of y div which is you know food zero minus head zero so that would be the y the difference in the row numbers i guess and i'm doing the same thing with x if so i'm cur i'm comparing you know the the column the food belongs to uh to the column the head of the snake belongs to so that would be xdiff and i'm saying here uh if the absolute value of y div is greater than the absolute value of x if you know we should make the snake move up or down and we should make the snake move up if the y div is less than or equal to zero and then down if it's the opposite and if this condition is not true then you know do the same thing with x if if that's greater than or equal to 0 the snake should move to the right and otherwise the snake should move to the left so that's how i determine the preferred move and after i have a single preferred move i just combine it with all of the directions and you know the directions if you see it's just left up right down and basically you know what i'm going to do after that is i'm going to call call that preferred moves and then you know just just check for each move in preferred move if the snake is able to make that move and you know it's kind of stupid here because the directions uh the order of these directions is always going to be the same and we even have like a duplicate move if this is right where you know we have right twice in preferred moves so it's not the smartest algorithm but it's actually good enough you know as you saw so basically here i'm saying for each moving preferred moves check if the snake is able to make that move uh you know it's able to make the move if uh the destination is either food or an empty space and uh if not check the next move and then here what i'm saying is if the next move that we want to make is still none after running the for loop that will mean that there's no legal next move that the snake is able to make so then we break out of the for loop and then we just say what you want how did you do it and you know the reason i'm saying how did you do it here is because when i was playing it by myself it was like really hard uh to beat it actually at least at the beginning uh i guess that's that's partly because the snake used to be a little bit faster than it is now in in the current code uh but partly also because it's it's just it seems like a hard game and there there's some luck involved but you know i think if you keep playing it you'll eventually uh be able to get it okay so that's how i uh made the game uh but before i go i wanted to talk about a few things and that i learned and sort of relearned throughout this whole experience of building this simple game first of all if you make a game and if you find it boring then think about it how can you make it more interesting flip the idea maybe if you're the snake maybe you can be the food instead the second thing i learned is i think that even when the enemy ai is really simple it can you know make the game pretty interesting so when i think about games like you know super mario brothers or super mario world those enemies might be pretty simple like they might be kind of you know walking back and forth or just following you but combine combining that with the you know with an interesting environment i think you can make a compelling and entertaining experience and the third thing is um you know it's just the fact that programming is fun uh just making this game kind of reminded me of how i started programming you know just by making random things i don't remember if i made a game but it was just like you know random you know ruby and python programming and it's nice to be able to do that again especially when you share it and you know get some feedback anyway uh i'm not sure if i said it before but if you wanna look into the code i recommend either forking this project on this website replit or you know just you know checking out my code and copy you can copy to your local environment and then play around with it um all right so that's all i wanted to talk about in this video uh sorry again for for the long gap i'm gonna try to you know make more videos in the future i feel like i keep saying the same thing but you know i really mean it and uh thank you for waiting uh if you were waiting for this video and thank you for watching this video see you guys