and we are live um rahul thank you so much for being here yeah it's my pleasure i'm really excited for this yeah um and first of all do you mind introducing yourself absolutely yeah so i'm rahul uh i am currently the cofounder and ceo of a company called taro which helps software engineers um on board and get promoted more quickly but i've had my entire career in silicon valley in tech so my most recent fulltime job was at facebook or meta i should call it now i was there for four and a half years before i quit back in january um and i did a bunch of stuff there i was an android engineer i was a tech lead for our team and i also did management but prior to facebook part of meta i was at pinterest for two and a half years prior to pinterest i was at a startup where i was a founding engineer and then prior to pinterest i was at stanford for five years and in fact the lab that i worked on at stanford that is the the work from that lab turned into a startup which got acquired by pinterest so that was kind of my journey into a fulltime job and i was at stanford five years and so yeah i've seen a lot of you know silicon valley grow and evolve in the past you know i guess 13 14 years so it's been really interesting to be here nice um so just based on what you just said i have i have so much to ask and you know so much so many things i'm curious about what was that startup about that was acquired by pinterest yeah so the startup was called cosec um and it was about recommendation systems so the lab that i was part of it was basically a big data lab um which was already hot back in 2014 2013 when i was in the lab and also even perhaps more hot now like it's even more glamorous but back then it was kind of exciting okay like you have all this data you have these social media companies which are producing literally terabytes or maybe petabytes of data about like all this traffic and all this um you know things that people have watched or clicked how can we take that and turn it into something usable so we can recommend better content on youtube or on pinterest or on whatever website you can think of and so um we had some sort of some novel algorithms which uh were interesting intellectually but hard to find how hard to turn that into an economically viable product and so it basically became an aqua hire so an aquahire for people don't know is basically there's not really a product to acquire but the team of people who are building this startup are talented and the company the acquiring company in this case pinterest wanted to um you know grab all the engineering talent of kosei and so that's how i i came on board nice um okay so you know we have a lot to cover today um getting multiple job orders from fans you know how you did it how other people might be able to do it um getting started on a new code base and maybe you know if we have enough time you know either um either something about you know building a startup or you know getting promoted as a software engineer you know we'll see or maybe both of them hopefully so let's just you know get right into it um yeah how did you get multiple java first from fang and which companies were they yeah absolutely okay so this is something i i get a lot so um let me give the context i've because i've been in tech for so long and i've um went to school in the middle of silicon valley i've had a ton of interview practice and so i failed a bunch of interviews but eventually i got to the point where i got pretty good at them so in 20 uh 2013 i did a bunch of interviewing as i was graduating and i got five offers facebook google microsoft twitter square and then again i did a whole another round of interviewing pretty deliberately in 2017 when i was leaving pinterest and i got six offers um like uber um facebook which is where i ended up going uh airbnb um stripe and a couple others but yeah so basically i've been doing a bunch of interviewing and i have a ton of opinions and a ton of context on what it takes to really crack the interview at these top companies so i may not be able to give advice on um you shouldn't listen to me if you're like interviewing for like a two person startup because oftentimes the advice for getting into a twoperson or fiveperson startup is gonna be very different from what we're talking about which is like these big companies um and that's because you know these big companies they have to interview people at scale they're talking about interviewing i don't know hundreds of people every month and so there needs to be some sort of standardization and that standardization is good for the candidate because now you know what to expect and i got really good at predicting that and being able to talk to the interviewer engage them and do well both in the coding part and the noncoding part of interview and i was able to land a bunch of offers so i'm happy to share um a couple different high level pieces of advice um and then if there's particular questions that people have or if you have yk then happy to dive in there as well yeah that sounds great and feel free to share your screen and you know let me know when you know when you want to actually okay yeah yeah um well so before i dive into the screen share i think there's really two different parts of getting a job i think that's quite that's the question right how do you get how do you land the offer effing there are two very different parts one is getting the interview and one is getting the job right and so the reason i am very clear about making these distinct is because one of the harsh realities of interviewing in big tech is that the skill you need to interview is very different than the skill you need to get the interview and so um i can share my screen if if uh if you're okay with that i can give you a bit more context yeah right so um if your interview that um if if you're in school the best way to get the interview is through career fair like you have like you're in this really tight environment of many other people who are all ambitious and smart and companies know that so if you have a career fair that's the best way to do it if you're an intern then you effectively already got your foot in the door and you're doing a three month long or two month long interview with the company and so your priority as an intern should be just give everything you possibly can to the job to land that return offer um if you don't have one of these two things you're not in school and you're not an intern already then at that point the number one thing you can do is really just to cultivate deep relationships with people and get referrals because the thing is that these top companies will get literally tens of thousands of applicants and many of them are not even read and so if you want a chance of getting your application actually read then you need someone to vouch for you you need someone to say hey i think yk you're an amazing candidate based on my history with that person and so what you should do is um uh what you should do is you know work with people at your current company if you're working and eventually one of them will go on to google or facebook and then ask them for a referral or just go on to linkedin and actually trying to make a meaningful connection with people linkedin twitter whatever um whatever community you have online try and actually make a meaningful relationship with people um and so here's two things that i recommend strongly that uh here are two strong opinions i have there are two things that people often do um that i think are very indirect ways of getting the interview one is open source and the other is having a project so in general i would say 95 percent of the projects that i have reviewed when i was hiring at pinterest and facebook they are not that impressive even the open source projects are not that impressive right and so because like the definition of a side project could literally be i i'm going to make a hello world program for android and maybe change the text to say like goodbye world or whatever and that's technically a side project right and so the default assumption for most people who are evaluating a um a side project or an open source contribution is that it's probably not that interesting it's not that meaningful and so the burden is on you to really go out of your way to prove that and that's hard to do right so like for example if you have an android app which has public which is published and it has you know ten thousand or a hundred thousand users now that's impressive because you've objectively built something that people find valuable or if you've actually made an open source contribution to like react right that's huge because it reacted i trust react that um there's some validation of your code quality and your insight right but there needs to be some connection to something which i have a trust i have faith in or i have trust in right um that's actually the guiding principle for all of us if you want to get an interview you have to be connected with someone who let's say you're interviewing like you're trying to interview my company you have to have some authority vouch for you an authority could be hey someone at my company right now said you're good i trust that person there's an open source project that i've heard of or it's like seems to be very popular and you made a contribution there okay now i kind of trust you you yourself made an android app or ios app or some project which is used by thousands of people okay i kind of trust you or you went to a good school you went to you know mit or harvard or you know some similar school okay i definitely trust you because like i trust that there's some level of vetting that mit does for their students that you're going to be competent right and so you have to be able to do that what i have on the side here is basically a bunch of different ideas for how do you build that authority in that trust the top three are the easiest ways and the bottom two are going to be a lot harder so you probably should expect to spend at least six months or a year doing that and so if your goal is i want to just get an interview in the next month or two the bottom two won't really help you yep uh thank you for that and just wanted to quickly add i think open source contributions it's not just about getting interviews it's also you know honing your skills practicing your skills so that's you know one thing i wanted to add and um quick question for you you know you mentioned linkedin how would you use linkedin to network yes okay so linkedin i think the big mistake that people make is that they will do very shallow connections like they'll i get a ton of messages probably like four or five messages a day which basically say hey here's my resume do you have any opportunities for me and i think the biggest mistake in general not just with linkedin but with email with twitter anything is you have to understand that people don't really care about you right when you're reaching out to someone when you're when you make a cold message if you phrase it and say hey i'm looking for a job can you help me that's an immediate turn off right so the better way of doing it is actually provide some value say hey i saw your blog post or i saw this youtube video here are my thoughts i i think here's like how i differ from you like here's like an interesting thing that i learned from my experience which differs from what you did or like here's how it agrees with what you talked about in your video now all of a sudden look this person actually cares this person has something interesting to say now i'm way more likely to i click into your profile and understand what's your background so that's like the um big secret i would say to linkedin is you should almost never be talking about yourself in that first message it should always be about the person who you're sending the message to and one way you can test it is how many times do you have the word i in the cold message versus you so if you start off saying i'm looking for a job no that's not going to work if you start off saying hey rahul like your recent video about how long to say the tech company was super interesting here's my thinking that starts to become way more interesting um and then the other thing why i think you had a really good point these last two i think these are tremendously important as a software engineer because they actually teach you how to be a good software engineer right like if you're making open source contributions you know how to work on a team you know how to get buyin you know how to you know land code in a production code base that's huge and similarly with the met with the large side project but i think one of the frustrating things about interviewing is that the skill you need to pass the interview is often different from the skill you need to succeed on the job and so i i think what happens is that some people will think oh well i'm i know that if i have a big side project or a big open source contribution that makes me a good engineer that's probably true yeah you're going to be a great engineer but good engineers often will not get the interview and so you have to kind of be really precise about like for people who are watching are you getting the interview and if you are then the way you prepare is very different if you're not getting the interview what you should do is also very different um that's actually the next thing i want to talk about which is and you got the interview either through one of the tactics in the previous slide or you know some company want to take a bet on you then at that point the most important thing you can do is data structure and algorithm preparation and this is especially important for junior roles one of the things that is kind of interesting is that um my experience has been that the more senior you get the less important dsa becomes right so like if you're a junior candidate the biggest thing they're trying to evaluate you on is how much can you code how much do you understand the fundamentals the more senior senior you are the more you can lean on your experience at other companies and the more you can lean on your system design and architecture background and so um especially if you're junior you have to spend most of your time preparing for dsa and one thing i'll say is that if you're at the point now where you're getting three or four or five different recruiters who are replying to you and saying hey i would love to chat why don't you come in for an interview at that point you should unless you really have a good reason you should stop working on your side project or your open source contribution and you should spend the vast majority of your time just focused on preparing for your algorithm interview because your site project will not help you at all really in the interview you should be able to talk about it for sure but you making it an extra bit of like having an extra bit of polish won't really distinguish you from getting the job or not and so that's what i was referring to earlier where it's like they're two very distinct phases phase one is are you getting the interview if the answer is no then you should focus all of your time on building up trust with the hiring manager through credentials through open source through side projects through um you know a referral once you get the interview then your focus should shift almost completely in the other direction to now be very focused on you know glassdoor looking at different questions that are asked and leak code so i have a couple different tips here in terms of the biggest mistakes i've seen in terms of people preparing for their fang interview the first is make it a habit i think some people have this idea of okay i'm going to do four hours of preparation on saturday and sunday but then monday through friday i'm kind of busy with my own job i'm not really going to do very much work and i can promise you you're going to be way more effective if you are actually able to do a small amount of dsa preparation every day so even half an hour a day is gonna give you much more attention of the knowledge compared to like four hours on a saturday the other thing is that you know take breaks and it sounds obvious but i think so many people want to whiteknuckle their way through and basically um burn out their brain like for me at least i can i don't know about other people but for me like an hour of really deep creative work for my brain is a lot and if i go beyond that too much then i can start to tell that i'm gonna get slower or i'm not gonna be able to do as much and so um make sure you you add that into your own schedule and also realize that that's how interviews work right every company i interviewed at facebook google microsoft they all have the same format it's probably going to be like a 45 or 15 minute interview and then you'll have a five or ten minute break before the next one right so they build in this idea of bathroom breaks or mental breaks in the interview right so why would you now deviate from that in your preparation um the other this is a big one finding a buddy because what i found is that a lot of people will prepare for their dsa like they'll either get leak code or crack in the coding interview or algox or whatever is the service that you want to use and they'll do it in isolation and that turned out to be a huge mistake because the actual interview is not done in isolation you always will have like someone who's going to be watching you on the whiteboard or you know more recently on zoom or coderpad whatever like a remote interview and so the skill of doing well in isolation and writing on a piece of paper on your desk is very different from the actual interview and so again the idea that you want to minimize the number of variables between the interview performance and your athome performance and the way you do that is like have a buddy and have them actually tell you like how like you should be talking them through what you're thinking and how you're approaching the problem and i think um having a buddy also forces you to not take shortcuts like you know there's some level of accountability that way that people will not you know you can't just cheat if you have your friend watching you and studying with you um yeah any any thoughts on this okay yeah you know first of all i really appreciate the approach of you know first focusing on getting interviews and then getting better at interviews i mean there will be some overlaps but i you know really appreciate the breakdown and finding a buddy you know i can speak to that too you know the way i approached it was you know i practice it on my own lead code and stuff like that a lot first and then when i was ready to interview you know start interviewing i i just asked a bunch of my friends hey can you mock interview me and you know they're not professional software engineers necessarily but it is helpful to you know try to replicate the actual interview environment yeah i mean i kind of think of it similar to rubber duck debugging right like even if like you you brought up a good example of even if your friend is not a software engineer it still has a ton of value for you to be able to like go through the basis of explaining your thought process the same exact thing applies for rubber duck debugging right so like for people who aren't familiar the idea of rubber duck debugging is like you have a rubber duck or like some toy animal on your desk and you talk to the toy animal about a bug that you're facing and oftentimes the act of verbalizing what's in your head and getting it out in a coherent way to a rubber duck or to a friend that itself will make you reflect in a deeper way and oftentimes you'll find the issue that way and so like same thing here right if you find a rubber duck or a friend or a buddy then i think there's a much much higher chance of you actually being able to translate your what's the jumble of stuff happen in your head and do a coherent thing on the interview and that actually is a big part of how you're being evaluated um one more thing i want to add here is another common mistake i see people make a lot is that they think that um their particular coding languages programming languages which are going to help them a lot in the interview so for example they say oh python is much shorter and more concise i'm gonna two weeks before the interview or one month before the interview i'm going to switch all my preparation into python even though i know java really well i'm going to switch over into python and that's almost always a mistake because there are kind of two things that are being evaluated in an interview one is how quickly can you arrive at the correct answer and second is how well do you actually know what you're writing down on the whiteboard and so i think the idea is that people think look at criteria number one and they look like python is gonna be much shorter much faster it's more powerful in some ways compared to java so i can write the code faster and arrive more quickly at the solution using python and that's probably true i mean java is a verbose language many of these other ones that people are familiar with c plus it will take longer if you write out but i think where people make the mistake is that in number two if you're switching to python just for the sake of interviews you're not going to be able to explain what you wrote or why you are using certain functions with as much depth and a big big part of interviews when i evaluate people is does it feel like they memorize a solution and they're just regurgitating some memorized thing in their head or are they properly able to communicate to me the pros and cons of what they've done and how the language really works behind the abstraction and i don't think you can do that in two weeks of preparation with python if you just switched if you've been doing python for years yeah for sure go with python but if you do if you if you've been doing java for years i would highly recommend you stick with what you know best because um a big part of the interview will be kind of testing your your depth of understanding of that language okay so here's like my algorithm okay every single time i i do a dsa problem i have like this fourstep process um number one is clarify the problem right clarify the problem means hey i even if it's a simple one i always before i do anything i say it back to the interview and i actually make that kind of obvious i say hey okay let me say it back to you to make sure i understand i actually use that language um and i think that usually goes a long way in making sure that the interviewer and i are on the same page the second thing i do is before again i write any code at all is confirm my approach so say okay here's my understanding here's how the first thing that comes to mind is this and then i'll say what do you think of that like a big part of this is engaging the interview and kind of getting hints from them like do they want you to code that up or is there a more optimal solution they want you to have a discussion about and then code that up um and so you should wait for some sort of verbal agreement or confirmation from the interviewer before you write any code and that's a big mistake that some people just people are so eager and they're in a rush to write code that they'll just dive right in and as the interviewer i feel like i'm left behind i'm like oh i don't really know what you're doing or why you're doing it just you're going grog and doing something on your own and the fourth thing i always remember when i'm doing these interviews is done is better than perfect right time is of the essence and it's way better to just um get something done rather than wasting the whole interview trying to find the optimal solution and you can acknowledge that too like if you feel pretty confident in your brute force approach like the demo approach then what you should do is just say okay hey here's an idea i have let me write the pseudo code for let me um put this down and then i'll walk through some of the downsides of it algorithmically why it's not that optimal what do you think of that and then i'll wait and say they'll say okay that sounds good go ahead and do it and then i'll go i'll write that down so at least now i have the basic solution i got partial credit i got some amount of um i was able to prove the interviewer to some degree that i know what i'm doing and then i can have a really deeper discussion about you know why is this solution insufficient and how we can improve it and then the last thing here is around arrogance and in taking hints from the interviewer so there are kind of two things that are being evaluated in a dsa round in an algorithm question one is did you get the algorithm but there's another thing too which people may not understand or realize as much is i'm also checking do i like this person right do i want to work with this person and so if you are blowing off my suggestions or you're like directly going into the coding and i feel like you're not taking me along with you like you're basically ignoring what i'm saying or even worse like you're disagreeing like i'm saying oh ykk i think you should approach it this way or like i think that your solution has a bug here and you blow it off and say no it doesn't have a bug it doesn't matter if you're right or wrong as the interviewee you're basically ruined you ruined the relationship and because you've ruined the relationship you've now ruined the interview and so a big part of interviewing is making sure that you get the right answer while also um you know making the interviewer feel like they are part of the journey with you anything you want to add here okay yeah just quickly you know i really love the thing you said about you know keeping an open dialogue with the interviewer that would be my approach to and that was my approach when i was interviewing uh you know like types of phrases i would use is something like uh so i have this root for solution in mind you can just explain that i'm thinking of writing the code because we don't have that much time or you know i can go ahead and you know try to think of a better solution yeah yeah and then like you know look up the interviewer look at their facial expression that might sound kind of silly but you know kind of get get hints from the interviewer to to see like what you should be doing yeah and actually that's one of the things that to be totally honest with you i feel like i do feel bad for people who have been interviewing during the pandemic because what you said is so important like when you're in an interview it really is a dialogue it's a twoway street i want to understand from you are you engaged are you happy like do you feel like it might be a bug like i can usually tell that pretty well in person if we're sitting in the same room i i know i can kind of read your body language but when you're a small box on a screen it's actually much harder for me to get that signal and in fact um like it's kind of sad but true a lot of the times the interviewer won't even be engaged like they'll be on their phone they'll you know they'll be reading the news on the side and you can't tell because like they're on some they're like dialing in right and so i do think that's one of the unfortunate realities of interviewing in a remote world because it's harder to make that connection with the interviewer and so that just makes it even more important that you have to really go above and beyond to make sure you're connecting and getting that communication in with them um okay so that was pretty much it in terms of what i had done let me share a couple other highlevel ideas of what worked for me so i got five offers in 2013 like i mentioned i still failed a bunch of interviews in that year and so the strategy is i knew that um there were a couple companies that were less important to me um and so i interviewed there first i basically learned okay here's how i need to get back in the mode of interviewing here's like what what concepts i am doing well at here's what concepts i need a lot more work in and by the time i got to facebook google microsoft were like the three ones i really cared about i felt way better and so that's like one tactic in general what you should do is stack up your interviews such that the ones that you care about are a little bit later and the other thing i'll say is when you actually do the interviews with companies you care about then you should have them all be within a short time period so um my most recent experience in 2017 before i joined facebook i literally had one week where i had five onsite interviews like literally monday through friday i had allday interviews every single day at uber airbnb facebook stripe like back to backtoback and it was kind of exhausting i mean i can't no getting around that effect like it's exhausting and a bit stressful because you're in this judgment mode so often but the big benefit of that is negotiation and i'm not sure i'm not sure how much we're gonna talk about this one but this is a whole topic you know at some point we should dive into either now or people are interested i can do it talk about it later but the way you negotiate is by having leverage the way you have leverage is by having multiple offers the way you have multiple offers at the same time is by interviewing at the same time in a short window and so like what some people will do which is a really bad idea is they'll like interview once at facebook this month and then next month they'll interview at google and then the the next month after that they'll interview at microsoft and you basically completely hurt like negged yourself because there's no way that the recruiter from facebook is going to wait two months for you to hear back from google or microsoft and then negotiate with you and so for me i was able to get um literally like a 75 000 increase in one of the offers just because i was able to negotiate them with another and so um just be mindful of the order of your interviews and the time period in which they're happening yeah so that was all i had in terms of um getting offers at fanc anything else you want to dive in there you might otherwise you can go into diving into a code base yeah let's talk about diving into a new codebase okay awesome so yeah let me set the context here and then i'm i'm happy to share my screen because i actually have a actual project that we can go through together um the context is that i was at facebook for four and a half years and one of the things about facebook which i loved and this is still true today is that the idea of code ownership is pretty relaxed at meta and what that means is there's no real concept of you can't touch this module or this file like if you want to and you feel like you're making a change just additive like it's positive then it doesn't matter if you're a backend engineer or a front engineer you can just go in check out that module and you know start to make a change and so as a result of it i had that mentality built into me and so i wrote code in six different languages in my time at facebook um let me just tell you what they were um java kotlin hack python javascript and c and so if you're not able to quickly dive in and understand the code base and understand the language at least to a bare bones extent you would not survive and so by doing that process so many times like literally six times of diving in and making a change and getting it reviewed i came up with four different tactics that are really effective for learning a new code base so that's what i wanted to talk about um so let me just set up my screen share one more time and then we can go from there but yeah if you want to share okay so what you're seeing now is android studio and what i'm thinking would be really cool actually is here's a android project that i built i'll give you the context there um i'm going to show you the four different tactics for ramping up on a code base on this open source android project that i have so this is called the my memory game um so like it's an app i built for my youtube channel it was like a tutorial i built like a year and a half ago and the idea is like you're basically um trying to find pairs of cards right so like these two cards don't matter so now i'm going to find this briefcase and then here's the other briefcase okay it's a bit simple game so let's pretend that our company is building this app and you're a brand new developer how do you now quickly understand the code base yeah and this is a good point like we're talking about android here but the whole point of what i'm saying is that this should apply across language across framework across company right so um i have four tips here uh ramping up okay so number one is um start running the code i think if you could zoom a little bit that might be yeah is that better yep thanks okay so the number one biggest thing that people can do is start running the code as soon as possible and this might sound obvious but what happens is especially when you get to a big company running the code is actually nontrivial like even running the code and getting your code to execute might require like setting up some service setting up your dev environment um you know getting a permission to like run something locally right because these systems that we're talking about at google or facebook which is you know why okay you and i will be familiar with these are huge huge systems right and so what you should not do and this is what happens to a lot of people who i've mentored is there they spend like okay let me spend the next week reading the code and trying to understand it in my head and then i'll run it and it'll make a lot of sense to me but that never works the way you understand the code is by writing the code and then modifying it which is what we'll talk about next so in this example it's actually very simple right like literally all i have to do is i have to go up here and it's run app and then down here at the bottom of the screen it's harder to tell but gradle is a build system for android that's taking all the source code compiling it turning it turning it into something called an apk and deploying it on the device so now we're running it very simple right but even understanding that is super valuable because what i just said is that there's a build system called android a build system called gradle on android and so you should probably know what that means like don't be a master in gradle but like at least google for and say what does gradle do what is the command that's being run behind the scenes when i hit this button like that's the kind of basic stuff you should be able to do um the other thing is when i talk about running the code i also mean like make any change that you can actually see a result in so like what that might mean is like i'm going to add a log statement i'm going to put a breakpoint somewhere and i'm going to see that breakpoint get hit if you can do that you're already halfway there in terms of understanding the new code base but what you shouldn't do is like read the code in isolation and hope that it'll magically make sense to you that almost never works especially these big companies you need to actually start running the code as quickly as possible so that's what we've done right i'm a new engineer i'm on this android team of this company or just making a memory game i ran the code and then i'm able to see it and the other thing that you should probably learn is okay where are all the log messages being displayed right so here there's um something called blogcat and then i go to the corresponding app and i see all the log messages right so this is really important right if you don't know where the log messages are being stored that's step one you should know where that is and you should know how to run it okay so then step number two is to intentionally break things and understand how that eligible for you okay you got it right um yes cool so this next one is really important because i think another failure mode that i've seen so often is that you're coming up on a new code base and you want to make a change right presumably like at facebook every time i made like i was ramping up on kotlin or then i was ramping up on python or javascript like there was usually some existing code there and my objective was i want to modify it or improve it in some way which satisfies the requirements for my project and that's usually two or three steps down the road step step two or i guess i should like step one step two is like before you make your change you have to understand the current state of the logic if you don't understand the way things are now how could you possibly make a change to make it better right and so for example here let's say that i'm in the memory game and then there's like one class here called memory game and so i mean the details aren't important but roughly this memory game class is the core logic for our application it's like all the logic for how do we handle the memory game and so you know one idea is hey we have this line here called chosen images we're taking we're randomizing some icons which are the icons that we show here and then we're taking a couple of them so like you have 20 images we're taking four of them and making those all the icons on the board so let's say what happens if we change this to two i'm hard coding some number here and run the app so basically what i'm doing here is i'm just fooling around i'm literally just like making a change and saying hey what happens if i do that so i don't know if you saw that but the application got deployed and then immediately it crashed and so i think the really important thing to do here is understand why did it break and so like if you're if you're an android developer developer sorry you'll know how to do this right and if you're not you should learn i'm going to filter for only error messages and then see go up to the top of the stack trace and says oh we got a fatal exception there was the index out of bounds exception index four size four right so something broke because i'm trying to access a part of the array which doesn't exist so now it's great like i can kind of dig into that a bit more and understand okay what does that mean how is this what line of code is crashing on it's called memory board adapter and now i can make a connection between hey here's the relationship between this file and this other file and if you build up that mapping in your head of here's how these different modules talk to each other now you're really starting to understand how the code works and now you'll be equipped to make your own code change okay step number three is land a low offer code change quickly okay so the idea here is that um another really common failure mode is that people think that they understand the project which is good and now they say hey i have this change i want to make let me go ahead and make it right now um and then they'll basically come up with a code change which is like 500 lines and then they expect all the people on that team to already understand it and um review it and that's a big mistake because i think for two reasons it's a big mistake the first reason is that at these big companies where you have these large code bases a big part of landing code is actually trust and if you've never worked in my code before and you basically made a big change and now you're expecting me to review it i am not going to be happy like you just basically came out of nowhere made this big change and now are expecting me to like understand it and review it without giving me much context or without like i haven't you haven't earned my trust yet and so um that's the big reason number one and number two is oftentimes things will happen in the process of making the code change that will be unexpected for you and so my recommendation for everyone is i don't care how small if it's just like adding a comment to a random place in the file make that code change right now and land it and so like let me give you an example um i'm gonna undo what we had before so one really powerful technique that i've used for this is most ides right most um code editors will give you hints about where things are going wrong or like how you can improve the code so it's hard for you to see probably but if i hover over on line 14 here android studio which is the ide that i'm using here it's actually telling us assignment can be lifted out of if it's like suggesting to us right now that hey here's a very simple code change that you could make and so what i can do is i can hover over it and i can actually click this button and so what that did let me undo just to make that more obvious so we had this assignment to this list of memory cards here called cards and so what we're doing is we're lifting the card's assignment out of the if statement this is like a very nice kotlin feature which is a language that we're using and so hey that's great so what i would do right now literally is i would say this is a great change let me make a commit for it and put it out for review and if you do that you're like okay wow this person is meaningfully adding to the quality of the code base and as a developer you get a lot more insight onto how do you actually make the change like how do you put a code change out for review how do you then land the commit into github or fabricator or whatever is your code repository and now you're going to be set up for success when you are actually doing your real change so that's tip number three and then finally my last tip is to understand the code hotspots okay so the idea here is basically that when you enter into a company like google facebook microsoft these are companies that have tons and tons of developers and they've been around for a decade or more right and so there are going to be large parts of the code base which are dormant and what i mean by that is basically they're going to be large large parts of the code base that no one really understands or no one has touched in years i don't know have you had that experience like hey like in any of the companies that you've been at uh yeah it was actually a really you know painful experience for me because i needed to dive into that part of the code and yeah it was really hard okay yeah i mean so so my advice is basically like so so generally if you're new onto a team you're not going to be making a change in one of those dormant parts of codebase i'm sorry you had that experience i'm sure that was really painful for you like typically people will be making a change in the area of the code which has already been actively being changed and so one thing that i recommend for everyone is understand where are people actually making changes on the code and so tactically the way you do that is i might go into let's say the main activity which is uh one of the main files and there's a really depends on your ide and depends on your environment but in android studio i'll show you like a really cool way i can go to um get and then github and i can say i can say current file and annotate with git blame okay and so what this is doing is i'm not sure if you can read it but like on the left hand side it tells me when was this code modified right so you can see like um a lot of the code was touched on november 1st but then if i scroll down like okay here's like a change on november 11th and now i can click into and say okay here's like the commit message and so basically like what you're doing is you're trying to look at maybe the top half of the code is never has not been touched in like two years but the bottom half of the file like that function in the middle that is being actively modified so that's like a really good thing to understand so now what you can do is go into that code change understand the test plan understand the context of that change because presumably the author would have left that for you and that gives you a really solid understanding of okay how is this code base evolving right because it's not enough just to have a snapshot in time of the code base you also want to understand how will this code evolve in the next month in the next quarter in the next six months right and the way you have the understanding is by looking at the blame and also by talking to people so that was that was it the four things start writing the code as quickly as possible break things understand how they broke number three make a simple code change like the one that we had we pulled out the assignment of the variable from the if statement and number four understand what are the parts of the code base that are actually um being changed and that's if you do these four things i think you're ahead of 95 percent of developers in terms of ramping up yeah thank you for that i think this is this is a really important skill but something that's not quite taught as much as other skills so thank you for sharing that yeah and then one more thing i'll just add quickly one other part of this i wanted to share which is kind of adjacent but related is this idea of um how do you share your work and so one thing that i think i've done a relatively good job of in my career and i've been rewarded for it is being able to actually showcase my work in a meaningful way and so like the project that we just looked at it's called my memory it's open source on github and so people are free to check it out but like one thing i want to call out is i have this readme file here and the readme call does a really good job of explaining what exactly does this project do right so like i have a gif here which shows you like in video format essentially like here's what the project does here's how it works and i have like a icon to get on google play i have like very clear instructions and then in case people are curious um here's what the actual readme file looks like the markdown but i think just going the extra mile and spending an extra hour on your project not just your project like in this example i'm making a readme for the whole project but literally every code change you make spend an extra 15 minutes making that code change really readable and explaining why you're making that change and if you do that every time people will start to trust you a lot more so rather than just like throwing something over the fence you're now taking the time to explain here's what i'm doing and here's why i'm doing it and here's like a screenshot and you make it really easy for me as the code reviewer to understand what you've done so i just wanted to have that at the end of just like the only way that you really have impact on the world is if other people around you understand what you're doing right and so the way you make it easy for people to understand what you're doing is by having a readme that looks like this where you have a very clear breakdown of what you've done and you know what libraries you've used what screenshots you have how does your app work and so that's something that i think everyone should strive to do even though it takes a little bit of extra time nice one quick thing i wanted to add is people should be able to do get blame on github too right oh yeah totally um let me actually i'll just show you a quick example if if you're interested so um let me just pull up our file here if you could zoom in i think i'll be honest yes i'll zoom in too so here like um there's a button called blame right i click on that yes so this is that in fact this might be even better okay thanks for the suggestion okay like this is even better right like now i can very clearly see hey here's the author in this case it's me but like many times it'll be like a tech lead and so now hey like oh hey tech lead you made this change a year ago i don't understand why you made this change like can you please help me understand so like doing git blame like this is a very very powerful technique to be able to understand what happened so yeah this is a really good idea i like this yeah um you know personally i i use both my editor and github or you know whatever whatever the code repository platform is for reading code so i think people should be able to like switch back and forth yeah i mean i think the thing is like the thing that i mean you know you and i definitely know okay and people who are looking for their first job you have to understand is that all of these things are tools but the underlying concept won't change right like what we just talked about is going to be applicable across codebase across framework so like at facebook for example we use mercurial right mercur mercurial is a different kind of version control system is different from get and so yeah the commands are going to be different and i have to learn that if you're gonna if you're gonna join meta you're gonna have to learn mercurial and not get but as long as you understand why you're doing it and like what is the intention of having blame and what are you looking for then learning the command for mercurial versus get that's easy what you have to what's like more important as a developer is understanding what is the underlying uh tactics and under underlying principles that you're trying to achieve cool um i think you you need to go soon uh raffle yeah i think i have like i have like two or three more minutes that's everything we want to wrap up i happy to answer any questions um or if there's anything else um like on your end happy to happy to share um yeah you know if if you have any uh last words feel free to share and if you're in the audience feel free to share any questions you have and i might be able to you know we might be able to cover some of them or one of them maybe yeah definitely i think the one thing i'll just um mention i think there were a couple questions i got dm'd after you made your announcement of this live stream ykk but like y combinator right so y combinator for people who don't know is this really um wellknown startup program um it's an accelerator and we're actively doing y combinator right now through with my company called taro and so i just want to share two things that i think are really powerful from y combinator that i think can be applicable whether you're doing a startup whether you're looking for a job whether you're on a job as a software engineer i think the two things that i got from yc that are really beneficial are number one um a lot of a lot of questioning around why can you not do it faster and number two a lot of accountability so number one means um like what often happened is uh what often happened is like people will the yc part like i'll go into the office hours and the yc partner will say like you're launching your product on hacker news or on product or whatever it is why have you not launched yesterday like what is preventing you from launching like yesterday and so you have to now come with a good answer of like why it's not working and so um that's been really powerful just like always having that urgency and number two is accountability so every two weeks we have a office hour where we have to set goals and then um achieve them and if you don't hit your goal then it's kind of a shame it's like there's some element of social shaming that happens um and so that's been also really effective for me to like achieve achieve what we've done in yfc yeah thank you for that and that's probably it for the stream but just you know what you need to quickly mention i think accountability is important for like developers in general to like prepare for um coding interviews or whatever i you know that's that's why you know i guess that's another reason why uh having a buddy is really helpful yeah totally yeah i mean i think that in general having some accountability partner whether it's a friend or a coach or a boss even i mean it's so much more effective to really achieve your potential compared to you know just working on your own um yeah so i think that that was it just really nice chatting like and hopefully people who are watching got some benefit out of this um i'm really happy to connect with anyone so i'm pretty active on twitter and linkedin i'm r pandey1234 and i think i'm also on youtube so feel free to connect on youtube um and and always open to chatting further yeah sounds good you know we've been getting a lot of comments saying uh it's been really helpful and insightful so i really appreciate that and yeah you know maybe we should do part two at some point to cover you know maybe like uh startups and getting probability as a software engineer yeah no i feel like there's so much more we could talk about getting promoted as an engineer the startup experience more about negotiation is a whole other topic um either i'm happy to come on again yk if you want or we can do a part two on my channel as well whatever yeah actually part part two on your channel might be really cool too let's do it okay cool well really nice to to talk for almost an hour um and thanks everyone for tuning in all right thank you everyone bye i feel