hey everyone recently A lot of people have asked me how should they get started with open source in this video I'm gonna try to answer that question you know hopefully beginner friendly way first of all you should understand why you might want to contribute to open source some of the common reasons are first of all to learn fast as a software engineer it's a really good way to do that because when you send your code to open source you actually get to have some feedback on your code and that helps you learn faster as an engineer and then the second common reason is to network with other Engineers you know people make friends through open source and some of them meet their mentors or their mentees or even their potential employers and some of them I know for a fact they get jobs through open source contributions so that's a really good reason for that too and then the third reason is to experiment with new tech you know for your job or for school you might be using one particular type of tech and you might want to experiment with something new so that's a really good way to do that as well and finally a fourth common reason is to have proof that you can do the type of work that you want to do in the future you know if you don't have a job where you use the type of tech that you want to use you know open source is a good way to practice and actually show to your potential employers that you can do the type of work that you want to do so those are some of the common reasons but find what works for you find what's meaningful to you and then stick with it okay after that the second step after that after knowing why you want to contribute is to get started and I say that because you should familiarize yourself with the mechanics of you know forking a repo branching it committing your change pushing it and then sending a PR or a pull request you can actually practice that with this repo called first contributions you know there are other ways of doing it but this one's really good because it's a rebel that actually walks you through the whole process of you know making your first open source contribution so you know you can basically uh walk through this readme and you know read everything try to understand everything and then um start your basically open source Journey that way uh there are a few different ways uh to do uh what's specified in this readme document one is through the terminal if you're familiar with the terminal the second way is through GitHub desktop that's also a great way to do that and the Third Way which I'm gonna show in a second is through github's website which is in my opinion the simplest way and the easiest way so let me just show you how to do that and there are a few different ways to do that as well one is to click this Fork a button which just means you know copying this original repo by the way our repo is uh basically like a folder or a collection of code and this is the original repo you can click this Fork button to copy this Rebel to your own accounts so I could do that but there is a simpler way to do what I'm about to do what I want to do is I want to edit this file contributors.md because that's what they I suggest for your first contribution you know on this repo so you're supposed to add your own name to this contributors.md documents and you can do that by clicking this edit button so that's really simple and uh I'm actually not going to do that because you know I did this earlier I already added my name here but let's just pretend that you know I want to add my name here so you know whatever your name and your GitHub profile link is just add it at the end of the file and then you can you know basically post that particular change so instead of adding my name because it's already there I'm going to delete my name uh I hope that they don't find it annoying because I did this a few times but let's do it anyway just for demonstration purposes so I just deleted my name it was there before you know if you're just getting started you can add your name there and then I can click propose changes so what happens when I do that is two things uh GitHub automatically forked this Rebel to my account so it was right here github.com first contribution slash first contributions but now it's also at github.com YK Dojo slash first contributions so this is my copy of this repo and what that's what that means to Fork a repo and then it also made up what's called a branch so this is another copy this is a copy of my repo so my repo you know what I forked from the main repo is a copy of the main repo and then this branch called patch one is a copy of my repo so you know that that can get confusing if you're new to this process but you know once you understand the process it's not that complicated and I'm gonna explain more of that in you know in a bit more detail in a second but anyway GitHub did all of that for me what's important is that uh it made a copy of this original repo the folder you know the collection of the code and it made it also made uh the change that I was trying to make so in this particular case the change is deleting this line you know in your particular case that might be adding your own name here and then I can click create pull request so this is saying you know I hey first contributions the organizer of this code the owner of this code or the maintainers I would like to make this change and then uh what I can do here is you know change the title of this PR if I want to leave a comment and then what I should do here is to check everything that changed you know it's going to show the list of files that changed in this PR and then I can click create pull requests I I'm not going to actually click that because I you know like I said I've already done this a few times I don't want to do it one more time but what happens in theory is when I when I click you know create pull requests this basically a change request is sent to the maintainers or the owner of this Rebel and then you know typically we go back and forth this is a pretty simple one they'll probably just accept the change and merge it or you know they'll copy this change into their original repo uh but you know we have this whole process and then once they accept it and merge it is this particular Change is Gonna Be baked into their original repo so that's pretty cool uh what that means you know in case you're not familiar with it uh let's say you're looking at you know next js's document you know their documentation you find a typo you can just fix it you know find where that is on GitHub exactly and then propose a change PR saying that there's a typo you know I want to fix this typo and then once they accept it it's actually going to be on their official document documentation so you know I don't know about you but I think that's pretty cool okay and just in case you're not too familiar with you know the basics of forking and pull requests I already talked about that a little bit but I wanted to talk about it you know in a problem or visual way so for that one I'm gonna use my own repo as an example it's called defend you can read more about it if you're interested but it's going to be sort of like an open source alternative to things like Glassdoor and Lead code and I'm just using this as an example here so here I have the original repo because I'm the owner of this project if you go to you know this URL github.com you'll be able to see the original code you know it contains all the code for this project what I recommend for not just for this project but for any project is you know just read through read me and then read through contributing.md or whatever their contribution guideline is and then find out exactly how they recommend that you contribute to their project because you know different projects have different guidelines and you want to be respectful for of that so after reading through those what you can do is you can Fork again copy this original repo into your own account so let's say your account is called let's say you know this is your account's username when you click Fork so it's right here at the you know top right corner of github's UI when you Fork it again it copies this Rebel to your own account and then branching means that you make a copy of this What's called the main branch into a separate uh separate space separate place and the purpose of branching is to specify what kind of change you're going to make exactly so you know you might want to change the landing page a little bit you know you might want to fix the landing page in that case you Branch this main repo into a new branch called Fix landing page fix hyphoon mining hyphen page something like that and then you know you make all the changes you make all the changes you want to make in the code here so that way you know you're not making any changes to the main branch you can do that if you want to but branching it you know makes it a little bit cleaner the whole process so you make all the changes you want to make in this branch called fixed landing page you fix the landing page and then once you're satisfied with your code you know check everything you can send a PR pull request to the original Rebel and once this is accepted by the owner or the maintenance you know one of the maintainers of this project they do what's called what I showed you earlier they merge this change into this Rebel so okay I I hope that's clear I wanted to show this just in case you know my ex mentioned earlier wasn't too clear and then you know here's more information about branching and merging so now let's say uh this is in your Rebel so this is after you've forked you know the original repo into your own account you start with the main branch and again the purpose of branching is to work on a particular feature and the nice thing about branching is you can brand you know you can Branch the main branch into multiple things multiple phases so you might have fixed landing page and you might have change link colors let's say and you might start with this Branch you know fixed landing page uh you know let's say you start working on it and you know you get bored you want to work on something else then what you can do is you can branch uh you can Branch from your main branch into changeling colors your new branch and then I start working on uh you know changing link colors so that might be unrelated to fixed landing page but then yeah the nice thing is you can switch back and forth and then you can work on different things basically there's more advanced stuff too you know for example you can Branch uh you can Branch from a branch as well but let's not worry about that for now and again once you Branch into uh this new place called changeling colors when you're satisfied with your change you can you can do one of the two things you can merge into your own uh main branch you might want to do that just to keep the main up to date or you might want to do that you know if this is your own project this applies this whole Graphics you know applies if this whole thing is your own you know project as well you know you might be the owner of this whole thing and then another thing you might want to do is you might want to send a PR pull request from this branch that you made into the original repo so that might be you know in this particular example that would be this project okay so that's you know a little explanation about forking a pull request branching and merging and the reason I wanted to explain that is because you know someone asked me about it I think it's unclear it's hard to get your head around you know this whole concept and I hope that was helpful okay so once you're familiar with the mechanics of you know all of those things like forking branching and so on the next step is to find a project to contribute to you know there are a few common ways to find it one is to check an open source library or tool that you use if you've built at least a few projects you've probably used a bunch of Open Source tools so you can check some of them you can check their docs you can check their GitHub repos and then try to contribute to them another you know good way to find a project is to find people on Twitter or YouTube or wherever else and check their projects see if they need help and then uh the Third Way the third good way is to look for good first issues this is a particular label that people use on GitHub uh I'm gonna show you how to do that in a second but the fourth way is to find you know which open source companies are hiring and contribute to their products this might be a good way to do that if you you know if your primary goal is to get a job and you know contributing to open source you know that's managed by open source companies it doesn't guarantee that you'll be able to get a job but it does increase your chances of you know getting noticed by those companies anyway let's take a look at uh this one so how do you look for good first issue uh issues on GitHub well one way to do that is to come to you know my repo called Defan again just as an example you know you can do that on any other repo to be honest but you can click you know issues and then you can click good first issue uh that filters you know the the issues on this particular repo uh to only having the label good first issue but you can do that globally on GitHub as well so uh you can just you know either copy uh copy this syntax or just you know type it out and then click all GitHub so that way I'm searching for issues that are open that have the label good first issues there are a lot of them but you know you can filter through some of them through for example a language you know I might want to find a good first issue for Python and by the way this is a this is a label that people use to indicate that they're you know good issues to address or you know look at as a firsttime contributor so you know you can look through them just like that uh this is a long list and it can be pretty overwhelming but this is definitely you know one way to find a good first issue and you know there's hope wanted uh there's stuff like hacktoberfest and you know different labels for different issues so you know try to experiment with that and see how it goes that can be pretty overwhelming so what I ended up doing is I ended up creating a repo that lists you know active repos for contributing so that way you know you don't have to go through you know all of those like giant list of issues you know you can go through this smaller uh list of things you know the first one obviously is first contributions get started there practice there and then after that you know if you want you can check out one of my projects or you know any of these projects um I'm hoping this will help people find you know projects that they they want to contribute to so feel free to use it as just as a free resource and if you know of any other repo that's good for you know either beginners or experienced people or just feel free to send a PR to this repo so other people will be able to hopefully find it as well okay and the final thing I want to add is to keep going you know it's totally fine to start small for example with a type of X that's a very common way for open source contributors to get started with their you know open source Journey and then after that it's important to just keep going you know don't be afraid to like ask questions get involved in communities or try sending PRS try sending like you know small PRS one thing I want to mention is it's really important to communicate well when you get involved with open source so you know good ways to do that is to maybe raise an issue ask questions in issue threads or discussions or maybe on you know one of their one of their live forums so for example my project has a Discord Forum you know other people have like Discord group or Discord server I should say and you know other people have slack groups or any of those things so feel free to jump in and just ask a small question you know if you send a giant PR right away before asking you anything you know it might get closed and you might get disappointed so you know I recommend not doing that I recommend you know starting small just you know start by asking them questions you know asking asking how you can help basically okay and after that you know I would say it's really important to be consistent you know if you're serious about open source if you're just you know experimenting or um if you want to make small contributions that's totally fine too but you know if you want to actually make a positive impact on your career as an open source contributor or as just a software engineer it's important to you know stay consistent and keep going with your open source contributions so I personally recommend the 100 days open source challenge it's gonna it's kind of like 100 days of code but for open source and it's you know it's an open challenge anyone can join and you don't even have to do it publicly but it's a good way to you know kind of keep yourself accountable and keep yourself more consistent okay so those are the four steps uh for how to get started with open source you know knowing you why getting started becoming familiar with this uh this mechanic of different things and then finding a project to contribute to and then keep going uh the last thing I want to add is you know it can be scary to try to contribute to like you know a big significant project let's say like react or next.js but don't be scared you know I think everyone feels that way but I've had I've personally had this experience of trying to contribute to a big project I was scared I thought okay you know am I qualified to do that but when I sent a small PR you know they were nice about it he got accepted it got merged so it's really nice you know it's it's really nice feeling to have you know obviously there are these practical reasons to contribute to open source as I mentioned earlier but there's also this you know feeling of um I feel like doing something good you know doing something for the good because it's you know open source after all okay I think that's all I wanted to talk about in this video uh thank you so much for watching this video the whole way um feel free to find me on Twitter or twitch because I've been pretty active on those accounts and we have a Discord server for uh my project you know defam but you know we we use it for general purposes too you know to talk about open source and coding in general so feel free to join in uh there as well I'm gonna put all of those in the description and thank you so much again for watching this video and I'll see you in the next one