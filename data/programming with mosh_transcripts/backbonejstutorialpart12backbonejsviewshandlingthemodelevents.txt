00:05 - in real-world applications you find many
00:08 - instances of a muddled state changing in
00:11 - real time
00:12 - take Facebook for example have you
00:14 - noticed that when someone comments on
00:17 - your post or likes it you would
00:19 - immediately see the result you don't
00:21 - have to refresh the page to see the
00:23 - changes so how does this work there are
00:26 - two common ways to implement something
00:27 - like this one way is to repeatedly ask
00:30 - the server if the state of a model is
00:32 - changed but this can be costly as the
00:35 - application grows there is another way
00:37 - which is called push or push
00:39 - notifications in which the server
00:41 - notifies every client that's interested
00:43 - to know about the changes either way the
00:47 - model that's residing on the client
00:49 - inside the user's browser is updated at
00:52 - this point we need to refresh the view
00:54 - based on the content of the model let's
00:57 - see this in action
01:00 - here I've got a basic view that renders
01:03 - the title of a song as well as the
01:04 - number of users listening to it now
01:09 - let's say this in Chrome
01:12 - so no one is currently listening to this
01:14 - song now I'm going to use the console to
01:18 - simulate a situation where the number of
01:20 - listeners changes so I'm going to update
01:23 - the state of the model by setting the
01:25 - listeners attribute
01:33 - note that the view is not refreshed so
01:36 - we need to make the view listen to the
01:38 - changes in the model and update itself
01:40 - accordingly so let's go ahead and
01:42 - implement this
01:50 - you
02:04 - you have already seen the initialized
02:06 - method before it's called when we
02:09 - instantiate a backbone object here we
02:12 - are using the on method to register a
02:14 - handler for the change event of the
02:16 - model all backbone models publish a
02:19 - change event whenever one of their
02:21 - attributes is changed earlier I told you
02:24 - that backbone models store attributes in
02:27 - a hash which is the reason why we have
02:29 - to use the get and set methods to work
02:31 - with the attributes of models backbone
02:34 - developers have used this technique so
02:36 - that they can keep track of changes in
02:38 - the attributes and publish events if you
02:41 - set the attributes directly on a model
02:43 - keeping track of changes would be hard
02:45 - or impossible so here we are registering
02:49 - the render method as the callback when
02:51 - the change event is triggered the third
02:53 - parameter is to set the context we need
02:56 - to set the context to the view itself
02:58 - when the render method is called
03:00 - otherwise the context would be set to
03:02 - the model now let's see if it's working
03:07 - so currently no one is listening to this
03:09 - song
03:11 - now is set the number of listeners
03:13 - behind scene
03:16 - there you go the view updated
03:18 - immediately now food for thought you
03:22 - don't always have to call the render
03:23 - method when the model state changes even
03:25 - though this is quite common sometimes
03:27 - you may want to display a message
03:29 - somewhere else or apply some CSS class
03:32 - to an element to highlight some fact to
03:34 - the user in that case you would create a
03:37 - separate callback function like
03:39 - unmodeled change
03:47 - you
03:55 - so to handle model events we use the on
03:58 - method to register handlers for them
04:01 - backbone models raise a change event
04:03 - when the state of a model is changed in
04:05 - the next lecture will cover how to
04:08 - respond to the events raised by backbone
04:10 - collections thank you for watching