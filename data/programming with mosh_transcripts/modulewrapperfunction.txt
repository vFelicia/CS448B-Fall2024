00:01 - so now you know the variables and
00:03 - functions we define in a module are
00:06 - scoped to that module they're private
00:08 - and not visible from the outside but you
00:11 - might be wondering how node does this so
00:14 - let me show you on the very first line
00:16 - of the logger jeaious module I'm going
00:19 - to create a syntactical error so define
00:22 - a variable X and set it to nothing like
00:25 - this so make sure to write this code on
00:28 - the very first line in other words if
00:30 - you have a line break here and do this
00:33 - on a second line you're not going to see
00:35 - what I'm gonna show you now so put this
00:37 - back on the first line here we have a
00:40 - syntactical error now back in the
00:43 - terminal let's run the application again
00:47 - okay we got unexpected token semicolon
00:51 - right but look above this line you see
00:54 - this function declaration so this
00:57 - function has a few parameters exports
01:00 - require module file name and surname so
01:07 - let me copy this code here
01:11 - now basically what happens under the
01:13 - hood is that note does not execute this
01:16 - code directly it wraps it inside of a
01:20 - function and that's the function you saw
01:22 - so at runtime our code is going to be
01:25 - converted to something like this so we
01:29 - have this function declaration here is
01:31 - the body of that function now for now
01:34 - I'm gonna remove this error here so this
01:38 - is our code and then we have the end of
01:41 - this function now the actual code is
01:43 - slightly more complicated than this but
01:46 - we don't want to get distracted with
01:47 - that complexity if you're a more
01:49 - advanced JavaScript developer you
01:51 - probably know this is an immediately
01:53 - invoked function expression or if you if
01:57 - you don't know that don't worry that's
01:58 - not really the scope of note what I want
02:01 - you to take away here is that note does
02:03 - not execute our code directly it always
02:06 - wraps the code inside each module and
02:09 - something like this inside of a function
02:12 - now look at these arguments to this
02:14 - function so you have seen the required
02:17 - function I told you that this required
02:19 - function appears to be global but
02:21 - actually it's not global in fact it's
02:24 - local to each module so in every module
02:26 - requiring is one of the arguments that
02:29 - is passed to this function we call this
02:32 - function the module wrapper function ok
02:36 - so you have seen the required function
02:38 - you have also seen module that is what
02:41 - we're using here so we have module that
02:44 - exports we also have exports which is a
02:47 - shortcut to module dot export so if you
02:51 - want to add a function to module that
02:53 - exports object you can either write
02:54 - module that exports dot log equals log
02:58 - or you can write exports that log equals
03:02 - log but you cannot reset this export
03:07 - like what we did earlier in other words
03:10 - you cannot write export equals block
03:14 - because this export is a reference to
03:18 - module and exports
03:21 - change that reference okay so these are
03:26 - the first three arguments we also have
03:29 - filename and Durning which represent the
03:31 - name of this file and the pass so let's
03:36 - have a quick look at this argument on
03:38 - the top I'm gonna do a console that log
03:41 - of underline underline file name and
03:46 - also
03:48 - underline underline Durning now you're
03:52 - not going to have this function this
03:53 - module wrapper function this was purely
03:55 - for demonstration so I'm gonna revert
03:58 - the code back to what we had before
04:00 - okay so now we don't have any errors in
04:04 - this module let's go back to the
04:06 - terminal and run this program so node
04:10 - app GS so here on the first line we have
04:13 - file name which is the complete path to
04:15 - that file that is larger than a s and on
04:18 - the second line we have the path to the
04:21 - directory that contains an module so now
04:24 - you have a basic idea about node modules
04:26 - and how they work you know how to create
04:28 - them how to load them but node itself
04:31 - comes with a bunch of useful modules
04:33 - that we can use in a lot of applications
04:35 - and that's what we're going to look at
04:37 - in the next lecture
04:40 - hi guys it's mash here thank you for
04:43 - watching my node tutorial I just wanted
04:45 - to let you know that this video you've
04:46 - been watching is part of my complete
04:48 - note course where you will learn
04:50 - everything about node from the basic to
04:52 - the advanced topics if you're serious
04:54 - about learning node I highly recommend
04:56 - you to enroll in my node course because
04:59 - this is much faster than jumping from
05:01 - one tutorial to another it saves you
05:03 - time plus you're going to get a lot of
05:05 - exercises that will prepare you for the
05:07 - real world and also at the end of the
05:09 - course you'll receive a certificate of
05:11 - completion that you can provide your
05:14 - current or future employer so if you
05:17 - want to enroll click on the link in the
05:18 - video description I hope to see you in
05:20 - the course