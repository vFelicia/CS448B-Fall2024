00:02 - in the nutshell we have four key players
00:04 - in an angular 2 app components
00:07 - directives routers and services let's
00:11 - take a look at each of these building
00:13 - blocks in more detail at the very core
00:16 - we have components a component
00:18 - encapsulate the template data and the
00:22 - behavior of a view so it's more accurate
00:25 - to call it a view component every
00:28 - angular 2 app has at least one component
00:30 - which we call the route component but in
00:33 - the real world an application often
00:35 - consists of tens or hundreds of
00:37 - components for example imagine we want
00:41 - to build an application like udemy we
00:44 - can divide this page into three
00:46 - components navigation bar sidebar and
00:49 - courses so each component has the
00:53 - template or HTML markup for the view as
00:55 - well as data and logic behind that view
01:00 - components can also contain other
01:02 - components so in the list of courses we
01:05 - can have multiple course components and
01:07 - in each course component we can have
01:10 - another component for rating that course
01:13 - the benefit of this architectural style
01:15 - is that it will help us break up a large
01:18 - application with various complex views
01:20 - into smaller more manageable components
01:23 - or as I said view components plus we can
01:28 - reuse these components in different
01:30 - parts of an application or even in a
01:32 - different application for example we can
01:35 - reuse this rating component here in a
01:37 - totally different application now you
01:40 - might be saying look Marsh I understand
01:42 - what you're saying about components but
01:44 - what are these components really like in
01:46 - the code a component is nothing but a
01:49 - plain typescript class so just like
01:53 - classes in other programming languages
01:55 - it can have properties and methods these
01:58 - properties hold the data for the view
02:00 - and the methods implement the behavior
02:03 - of the view like what should happen when
02:05 - we click a button now if you have never
02:08 - worked with angular before one thing
02:10 - that may be new to you is that these
02:12 - components are completely decoupled from
02:14 - the document object model
02:16 - or dumb in applications written with
02:19 - plain JavaScript or jQuery we get a
02:21 - reference to a Dom element in order to
02:23 - modify it or handle its events in
02:26 - angular we don't do that instead we use
02:29 - binding so in the view we bind to the
02:33 - properties and methods of our component
02:35 - if there is a change in the value of a
02:37 - property the Dom element bound to this
02:40 - property will refresh automatically so
02:43 - we can't and shouldn't get a reference
02:45 - to that Dom element in order to update
02:47 - it similarly to handle an event raised
02:51 - from a Dom element like click we bind
02:53 - that event to a method in our component
02:56 - when the user clicks that element the
02:58 - corresponding method in our component
03:00 - will be called now in case you're
03:03 - curious why these components are
03:04 - decoupled from the Dom the reason is
03:07 - that this makes our components unit
03:09 - testable if you have a plain class that
03:12 - is nothing but a bunch of properties and
03:14 - methods we can easily unit test it
03:16 - without having a document object model
03:18 - now sometimes our components need to
03:21 - talk to back-end api's to get or save
03:24 - data to have good separation of concerns
03:26 - in our applications we delegate any
03:29 - logic that is not related to view to a
03:32 - service so a service is just a plain
03:35 - class that encapsulates any non user
03:38 - interface logic like making HTTP calls
03:41 - logging business rules and so on we have
03:45 - another key player in angular apps and
03:47 - that's a router which is purely
03:49 - responsible for navigation so as the
03:52 - user navigates from one page to another
03:54 - it will figure out based on changes in
03:57 - URL what component to present to the
03:59 - user you will learn more about this in
04:02 - the section titled building single page
04:04 - apps and the last key player in angular
04:07 - is a directive similar to components we
04:11 - use directives to work with the Dom but
04:13 - a directive unlike a component doesn't
04:16 - have the template or HTML markup for
04:18 - view we often use them to add behavior
04:21 - to existing Dom elements for example we
04:25 - can use a directive to make a text box
04:27 - automatically grow when it receives
04:30 - focus angular has a bunch of built-in
04:33 - directives for common tasks like adding
04:36 - or removing Dom elements adding classes
04:39 - or styles to them repeating them but we
04:41 - can also create our own custom
04:43 - directives so this is the big picture as
04:46 - you go through this course you will see
04:49 - each of these building blocks in action
04:52 - well hello
04:53 - it's Maj here your angular 2 instructor
04:56 - thanks for watching my youtube channel
04:58 - this video you just watched is actually
05:00 - part of my comprehensive angular 2
05:02 - course for beginners in this course I'll
05:05 - walk you through all the core concepts
05:07 - of angular 2 in a step-by-step and
05:09 - pragmatic way by the end of watching
05:11 - this course you will have all the
05:13 - necessary skills to build real-world
05:15 - applications with angular if you want to
05:18 - find out more about this course and the
05:19 - content I've covered click on the link
05:22 - in the video description with this link
05:24 - you can get the course with a discount
05:26 - hope to see you in the course