00:00 - [Music]
00:04 - hi welcome to the complete AET MVC
00:06 - course my name is m shadani and I'm
00:09 - going to be your instructor over the
00:10 - next few hours before we get started let
00:13 - me quickly show you the application
00:14 - we're going to
00:16 - build this application is called vidly
00:19 - and it's supposed to be used at video
00:21 - rental stores we have two different
00:23 - roles here admin and staff member let me
00:27 - log in as admin
00:30 - on the top we have three links on the
00:32 - navigation bar new rental customers and
00:35 - movies let's start with the list of
00:40 - customers you can see this table has
00:44 - pagination
00:47 - sorting and
00:52 - searching if we delete the customer we
00:55 - get this bootstrap dialog box for
00:57 - confirmation
01:01 - we can also add a new
01:04 - customer and here we have a business
01:06 - rule if the customer wants to go on a
01:09 - monthly quarterly or annual membership
01:12 - type they have to be at least 18 years
01:15 - old otherwise we get a validation
01:18 - error so you see this application is
01:21 - more than just CR there are some
01:23 - business rules involved now let's take a
01:25 - look at the list of
01:27 - movies it's very similar to the list of
01:29 - C customers but let me show you
01:31 - something if I log
01:34 - out and log in as a guest or a staff
01:38 - member and by the way we can log in with
01:40 - Facebook as well so with what you learn
01:42 - in this course we can easily extend this
01:44 - application and add support for Google
01:47 - and Twitter
01:48 - authentication let's log in now back in
01:51 - the list of movies I get a readon view
01:55 - of the list of movies I cannot add
01:57 - update or delete a movie so this video
01:59 - features are only available to
02:02 - admins now with the list of customers
02:04 - and movies in the database we can add a
02:07 - new rental so when a customer comes to
02:10 - the counter we look them up
02:13 - [Music]
02:15 - here and then we add all the movies
02:18 - they're going to
02:24 - rent and again here we have another
02:26 - business rule these movies have limited
02:28 - availability so as we renting out these
02:31 - movies we need to keep track of
02:33 - availability of movies so once again
02:35 - this application is more than just crot
02:38 - so are you excited to build this
02:39 - application with me I hope you are let's
02:42 - [Music]
02:49 - begin so what is this MVC all about well
02:53 - MVC stands for model view controller and
02:56 - it's one of architectural patterns for
02:58 - implementing user interfaces although it
03:00 - was originally developed for desktop
03:02 - applications back in 1970s it's been
03:05 - widely adopted as an architecture for
03:07 - web applications and as a result many
03:10 - Frameworks have been created that
03:11 - enforce this pattern as. MVC is one of
03:14 - them there are many other similar NVC
03:17 - Frameworks like Ruby un rails or Express
03:19 - for note in an NVC application model
03:23 - represents the application data and
03:25 - behavior in terms of its problem domain
03:27 - and independent of the user interface
03:30 - for example in our video rental
03:32 - application our model will consist of
03:34 - classes like movie customer rental
03:37 - transaction and so on these classes have
03:41 - properties and methods that purely
03:43 - represent the application State and
03:45 - rules they're not tied to the user
03:47 - interface which means you can take these
03:49 - classes and use them in a different kind
03:51 - of app like a desktop or a mobile app
03:54 - they are plain old CLR objects or pocos
03:58 - V in MVC represents the view and it's
04:01 - the HTML markup that we display to the
04:03 - user and C is a controller which is
04:07 - responsible for handling an HTTP request
04:10 - for example imagine our application is
04:13 - hosted at VD lin.com when we send a
04:16 - request to bitly.com movies a controller
04:19 - will be selected to handle this request
04:22 - this controller will get all the movies
04:24 - from the database put them in a view and
04:27 - return the view to the client or the
04:28 - browser
04:30 - so with this architecture you see each
04:32 - component has a distinct responsibility
04:35 - and this results in better separation of
04:37 - concerns and a more maintainable
04:39 - application now there is one more piece
04:41 - to this architecture which is not in the
04:43 - acronym MVC but is nearly always there
04:47 - it's a router earlier I told you that
04:49 - when a request comes in the application
04:51 - a controller will be selected for
04:53 - handling that request selecting the
04:56 - right controller is the responsibility
04:57 - of a router a router based on some rules
05:01 - knows that the request with the URL slm
05:04 - mov should be handled by class called
05:06 - movies controller more accurately it
05:09 - should be handled by one of the methods
05:11 - of this class because a class can have
05:13 - many different methods in as MVC we
05:17 - refer to methods of a controller as
05:19 - actions so it's more accurate to say
05:22 - that an action in a controller is
05:24 - responsible for handling a request so
05:26 - this was as NVC in 3 minutes
05:33 - okay to follow along with this course
05:35 - first of all you need visual studio 2013
05:38 - or higher in this course I'm using
05:40 - visual studio 2013 Community Edition
05:42 - which is free also I'm going to use a
05:45 - few plugins to increase my productivity
05:48 - and make my development experience more
05:50 - enjoyable so open up visual studio under
05:54 - Tools go to extensions and
05:58 - updates on the left side select
06:01 - online and here search for visual
06:06 - studio productivity power
06:10 - tools so you can see I have installed
06:13 - productivity power tools
06:15 - 2013 this is an extension that brings in
06:17 - a lot of useful features to increase
06:19 - your
06:20 - productivity next search for web
06:26 - Essentials again you can see I've
06:28 - installed this plugin
06:30 - in your case you'll see a button to
06:31 - install this
06:33 - plugin and the last plugin which is
06:35 - optional is resharper so you don't
06:38 - necessarily need resharper to follow
06:39 - along with this course but I highly
06:41 - recommend you to download and install it
06:43 - because I'm going to show you lots of
06:45 - time saving tips and tricks re sharper
06:48 - is a commercial plugin and the price is
06:49 - somewhere about $7 to $90 a year and I
06:53 - highly recommend you to invest this
06:54 - money and add resharper to your toolbox
06:57 - because the number of hours you will
06:59 - save per year will save you far more
07:01 - than $90 a year and by the way I'm not a
07:04 - resharper affiliate I don't get a penny
07:06 - from promoting this I'm just
07:08 - recommending resharper because I only
07:10 - teach you the best tools because I want
07:12 - you to be outstanding in your career now
07:14 - whether you want to get a resharp a
07:16 - license or not is your decision but you
07:18 - can get a free 30-day trial version of
07:20 - resharper to try the time saving tricks
07:23 - I'm going to show you in the course and
07:25 - if you don't want to get resharper
07:26 - that's perfectly fine don't panic I will
07:28 - show you how to get things done without
07:30 - resharp as well all right our
07:32 - development environment is ready next
07:34 - we're going to create our first MVC
07:39 - application so in Visual Studio go to
07:42 - the file menu new
07:45 - project on the left side under templates
07:49 - expand visual C and web and here select
07:53 - as.net web
07:55 - application I'm going to call this
07:58 - vidly and store it in my C drive in the
08:02 - projects
08:04 - folder now here you see add to Source
08:06 - control is selected because I'm going to
08:08 - add this to git if you don't have git on
08:11 - your machine or you don't want to add
08:12 - this on Source control don't worry about
08:14 - this so untick the
08:16 - checkbox okay now here in the list of
08:20 - templates select
08:22 - MVC and make sure host in the cloud is
08:25 - not selected because we're not going to
08:27 - deploy this in the cloud yet select
08:31 - okay now because I selected add to
08:33 - Source control I see this dialog box
08:35 - where I can select either team
08:37 - Foundation Version Control or TFS or
08:41 - git I'm going to select
08:43 - git
08:46 - okay okay beautiful our project is
08:48 - created let's see what we've got inside
08:50 - this
08:51 - project so open up solution Explorer
08:55 - here we've got a bunch of folders like
08:57 - app underline data which is where our
08:59 - database file will be stored we have app
09:02 - underline start which includes a few
09:05 - classes that are called when the
09:06 - application is started let's take a look
09:09 - at one of these for
09:10 - example route
09:12 - config so this is the configuration of
09:15 - our routing rules here you see we have a
09:17 - route with the name default and with
09:20 - this URL pattern so if a URL matches
09:23 - this pattern the first part of the URL
09:25 - is assumed to be the name of the
09:27 - controller the second part is assumed to
09:29 - be the name of the action and the third
09:32 - part is an ID we can pass to that
09:35 - action with this rule if you send a
09:37 - request to slm
09:39 - moviespopular as. the runtime will call
09:42 - a method or an action called popular in
09:45 - movies
09:46 - controller or as another example if you
09:50 - send a request to slov sledit SL1 as at
09:54 - the runtime will call the edit action of
09:56 - the movies controller and will pass one
09:59 - as the ID to this
10:00 - action so back here you can see we have
10:03 - some default values in this route so if
10:06 - our URL doesn't have any of these parts
10:09 - it will be passed to the home
10:11 - controller similarly if the URL has only
10:14 - the controller but not the action it
10:17 - will be handled by the index action so
10:20 - if we go to slm movies since the action
10:22 - name is not specified in the URL it will
10:25 - be index in movies
10:27 - controller also you can can see that ID
10:31 - is an optional parameter because not
10:34 - every action needs an ID we only need
10:37 - this when we working with a specific
10:39 - resource like a movie or a customer with
10:41 - a given
10:44 - ID we also have this content folder
10:47 - where we store our CSS files images and
10:50 - any other client side assets next we
10:53 - have controllers and you can see our
10:56 - default project template has three
10:58 - controllers account which has actions
11:01 - for sign up login log out home which
11:05 - represents the homepage and manage which
11:07 - provides a number of actions for
11:09 - handling requests around user's profile
11:12 - like changing password enabling two
11:14 - Factor authentication using social
11:17 - logins and so on we have fonts which
11:20 - shouldn't really be here in the route I
11:22 - would personally prefer to move this
11:24 - under content folder but we'll leave
11:26 - that for a later
11:27 - lecture we have models so all our domain
11:31 - classes will be here next we have
11:34 - scripts where we store our JavaScript
11:37 - files and finally we have views so V in
11:42 - MVC now look here we have folders named
11:46 - after controllers in our
11:48 - application let me expand controllers
11:51 - again so we have account home and manage
11:54 - controller and interestingly we have
11:56 - three folders with the same names
11:59 - excluding controller so by convention
12:03 - when we use a view in a controller
12:05 - as.net will look for that view in a
12:07 - folder with the same name as the
12:09 - controller we also have a folder called
12:11 - shared which includes the views that can
12:13 - be used across different
12:15 - controllers and finally we've got a few
12:17 - other files here fave icon is the icon
12:21 - of the application displayed in the
12:23 - browser Global asax is one of the
12:26 - traditional files that has been in
12:27 - asp.net for a long time
12:29 - and it's a class that provides hooks for
12:32 - various events in the application's life
12:34 - cycle so let's expand this and open the
12:37 - C
12:39 - file so when the application is started
12:42 - this method will be called and here you
12:44 - can see we are registering a few things
12:47 - like the routes so when the application
12:49 - started we tell the runtime these are
12:52 - the routes for our
12:54 - application next we have packages.
12:57 - config which is used by newg get package
12:59 - pack manager if you have never worked
13:01 - with new get it's a package manager
13:03 - similar to npm or note package manager
13:06 - or Bower if you have never worked with
13:08 - any package managers before we use them
13:11 - to manage the dependencies of our
13:12 - application so let's say our application
13:15 - has dependency to five external
13:17 - libraries instead of going to five
13:19 - different websites for downloading these
13:21 - libraries we use a package manager and
13:24 - this package manager will download these
13:26 - dependencies from its Central Repository
13:29 - also if in the future one of these
13:31 - libraries has a newer version again we
13:34 - use our package manager to upgrade one
13:37 - or more of the existing packages we
13:39 - don't have to go to five different
13:40 - websites we also have this
13:43 - startup.cs which is a new approach
13:45 - Microsoft is taking for starting the
13:47 - application so in the next version of
13:49 - as.net called as.net core 1.0 which is
13:53 - not ready yet they've dropped global.
13:56 - asax and all the startup logic is
13:58 - implement mented in this startup
14:01 - class and finally we have web.config
14:03 - which is an XML that includes the
14:06 - configuration for
14:08 - application out of all the elements you
14:11 - see in this XML mostly you will need to
14:13 - work with only two sections connection
14:16 - strings which is where we specify
14:18 - database connection strings and app
14:20 - settings which is where we define
14:22 - configuration settings for our
14:25 - application okay now that you have a
14:26 - good understanding of what is inside
14:28 - this project let's see the building
14:30 - blocks of MVC architecture in
14:35 - action okay and solution Explorer right
14:38 - click models and
14:41 - add a new class
14:45 - here I'm going to call this
14:49 - movie we give it a couple of
14:52 - properties like integer
14:57 - ID and string
15:01 - name to quickly create a property just
15:03 - type prop press tab this is a code Snead
15:07 - you specify the
15:09 - type then press tab again and the name
15:13 - of the
15:16 - property so this class is a plain old
15:19 - CLR object or Poco which represents the
15:21 - state and behavior of our application in
15:24 - terms of its problem domain in this case
15:27 - it doesn't have any Behavior or logic it
15:30 - just has a couple of properties which we
15:32 - use for representing State now let's say
15:35 - we want to create a page where we
15:37 - randomly pick a movie and render its
15:40 - details assuming that this page would be
15:43 - under slm movies SL random we need to
15:46 - create a controller called movies
15:48 - controller with an action called random
15:53 - so in solution
15:55 - Explorer right click controllers
15:59 - add
16:01 - controller here we have different
16:03 - templates and most of them are used for
16:05 - autogenerating some code which we call
16:07 - scaffolding but we are not going to use
16:09 - any of these templates because I want
16:11 - you to learn how to create a controller
16:13 - from scratch so select the first one
16:18 - add call this movies
16:22 - controller so this controller is a very
16:25 - simple class that derives from the
16:26 - controller class and and here we have an
16:29 - action called index which returns action
16:33 - result I'm going to change the name of
16:35 - this action to
16:37 - random so this will be called when we go
16:40 - to SL movies SL
16:42 - random now in this method I'm going to
16:44 - create an instance of our movie model so
16:48 - movie new
16:52 - movie now because I'm using resharper
16:54 - resharper automatically resolve the name
16:57 - space for this class if you're not using
16:59 - resharper you need to go on top of this
17:01 - file and manually type using vitle
17:06 - models back
17:09 - here let's set the name of the
17:12 - movie
17:14 - Shrek in a real world application we
17:17 - often get a model from a database but
17:19 - for now to keep things simple let's just
17:21 - focus on the core building blocks of MVC
17:24 - apps now here you can see that this
17:26 - method is returning a view and the
17:29 - reason this view is Red is because
17:31 - resharper is telling me that this view
17:33 - file does not exist in the
17:36 - application so in the solution
17:38 - Explorer under
17:40 - views look inside movies folder we don't
17:44 - have a view called random so right click
17:49 - add
17:51 - view call this
17:53 - random here we have template which we
17:56 - can use to autogenerate a view but we're
17:58 - not going to to use this
18:00 - feature under options you can take this
18:03 - box to create this view as a partial
18:06 - view a partial view is not a complete
18:09 - page it's like a widget that we can
18:11 - reuse on different views we are not
18:14 - interested in that so
18:16 - ontick here we have a checkbox for
18:19 - selecting the layout for this view a
18:22 - layout is like a template or a master
18:24 - page we want all the views in our
18:26 - application to have the same look and
18:28 - feel
18:29 - so let's select the
18:32 - layout by default our NVC project has a
18:35 - layout under
18:37 - views shared called underline layout so
18:42 - select
18:44 - this and add the
18:46 - view okay here you see a mixture of HTML
18:50 - and C code prefixed with an add sign so
18:54 - on the top we have a block and inside
18:56 - this block we are setting two properties
18:59 - one is viewb back. title which we'll
19:01 - look at later but basically this is
19:02 - going to be the title of our page shown
19:05 - in the browser and next we're setting
19:07 - the layout for this view after this code
19:10 - block we have just plain HTML now I want
19:13 - to go back to the controller press
19:15 - control and tab this way we can switch
19:18 - between open
19:19 - tabs look view is no longer red because
19:22 - now we have a view on the dis now I want
19:25 - to put this model movie model in our
19:28 - view so we can render
19:30 - it again control tab to go back to the
19:33 - view I want to change this heading and
19:36 - render the name of our movie so we need
19:38 - to write C code we start with ADD sign
19:42 - and then type model every view has this
19:45 - property which gives us access to the
19:48 - model we passed to it in the
19:50 - controller now in the Intel sense note
19:52 - that the type of this model is dynamic
19:55 - it's not a movie so if I use the dot op
19:58 - operator I cannot see the name property
20:01 - of this movie
20:03 - here so on top of the file we need to
20:06 - use a directive to specify the type of
20:08 - the model for this view so add sign
20:12 - model and this has to be
20:14 - lowercase and here we specify the fully
20:16 - qualified name of our model class so the
20:19 - name of the application vidly models.
20:24 - movie now if you're using resharper you
20:26 - don't have to remember this fully
20:28 - qualified name
20:29 - you can just type movie and press enter
20:33 - resharper automatically resolves the
20:36 - namespace okay back here now we can type
20:40 - model Dot and look we've got ID and name
20:43 - properties here so let's render the name
20:47 - all right now let's run the application
20:49 - because we are in the random View and
20:51 - this view is inside the movies folder if
20:55 - you press control and F5 now our browser
20:58 - will take us to SL movies SL random so
21:02 - contrl
21:03 - F5 okay congratulations so you have seen
21:06 - a Model A View and a controller in
21:08 - action throughout the rest of the course
21:11 - we'll work on more sophisticated
21:12 - scenarios but the fundamentals will be
21:14 - very similar to what you have seen in
21:16 - this
21:19 - video okay now let's go to the
21:23 - homepage I don't like this default
21:25 - template that comes with our application
21:27 - it looks a little bit ugly so let's find
21:30 - a better template our as.net mvcc
21:33 - application uses bootstrap as its front
21:35 - end CSS framework so to replace this
21:38 - template we need to find a bootstrap
21:41 - template head over to boot swatch.com
21:46 - here you see a bunch of different
21:48 - templates for bootstrap under themes
21:51 - select
21:52 - Lumen so scroll
21:56 - down our navigation bar will look like
22:00 - this here we can see the
22:04 - buttons
22:06 - tables
22:08 - forms so nice and clean now under
22:12 - Lumen select bootstrap.css
22:17 - this is the bootstrap CSS file but with
22:20 - modified Styles you need to save this
22:22 - file on the disk and I would suggest to
22:24 - call it bootstrap D Lumen to distinguish
22:26 - from the original bootstrap file
22:30 - then added in the project under the
22:32 - content folder so here you see I have
22:34 - both bootstrap and bootstrap D Lumen now
22:38 - we need to replace the reference to
22:39 - bootstrap with bootstrap Lumen
22:43 - so under app underline start open up
22:46 - bundle
22:48 - config this is where we define various
22:50 - bundles of client side assets for
22:53 - example we can combine and compress
22:56 - multiple JavaScript or css files in into
22:58 - a bundle and this way we reduce the
23:01 - number of HTTP requests required to get
23:04 - these assets when a page is loaded and
23:06 - this results in a faster page load so
23:09 - here you see we have a few bundles one
23:11 - for jQuery and inside this bundle we
23:14 - have the jqu script we have another
23:16 - bundle for jqu validation plugin and
23:20 - inside this bundle we have all the files
23:22 - that match this pattern we have another
23:24 - bundle for
23:26 - modernizer one for boot St and another
23:30 - one for our CSS assets inside our CSS
23:34 - bundle we have bootstrap and site. CSS
23:38 - which includes a few generic styles for
23:40 - our
23:41 - application now add Dash Loom and
23:45 - here now because we have modified our C
23:48 - code we need to compile it in order to
23:50 - see the changes so press control and F5
23:53 - to compile and run the application again
23:59 - all right here's our new homepage with a
24:00 - new look and fi now get ready for a
24:03 - quick quiz I want to test your knowledge
24:05 - about what you have learned in this
24:12 - section so this was just a quick
24:14 - introduction to as.net MVC now let me
24:17 - quickly give you a heads up about what
24:19 - is coming up over the next few sections
24:21 - in the next section we're going to look
24:23 - at the fundamentals of as.net MVC in
24:26 - detail by the end of this section you
24:28 - will have a good and in-depth
24:30 - understanding of how h.n MVC works next
24:34 - we'll use Entity framework to connect
24:36 - our application to a database we'll be
24:38 - using Code first workflow for this so if
24:41 - you're new to code first this is a great
24:43 - eye opener then we'll add forms and
24:46 - Implement validation so at this point
24:49 - you will know how to implement Crow
24:50 - operations in asp.net
24:53 - MVC next we'll look at using as.net web
24:56 - API to build restful services so I will
25:00 - explain what restful convention means
25:02 - and how you can create restful services
25:04 - using aset web API once we build our
25:07 - apis we'll shift our Focus to client
25:10 - side development so we'll use jQuery to
25:13 - consume some of these apis in this
25:15 - section you're going to learn about two
25:18 - very useful jQuery plugins next we'll
25:21 - Implement authentication and
25:22 - authorization using h.net identity
25:25 - framework so you will understand exactly
25:28 - how h.net identity works and how you can
25:31 - customize it for your applications next
25:34 - I'll talk about performance optimization
25:36 - I will introduce you to three tier
25:38 - architecture and for each tier I will
25:40 - show you how you can optimize the
25:42 - performance of your application in that
25:44 - tier then in section 10 we'll put
25:47 - everything together and I will show you
25:48 - a systematic way to build a feature end
25:51 - to end and finally in the last section
25:54 - you'll learn about building and
25:56 - deployment so there's a lot to cover and
25:59 - I will see you in the next
26:00 - [Music]
26:03 - section well hello it's MOS here your
26:06 - instructor I just wanted to let you know
26:08 - that what you have been watching so far
26:10 - is actually picked from my complete aset
26:13 - MVC 5 course on Udi in case you're
26:16 - interested to have the complete course
26:18 - you can get it with a discount using the
26:19 - link in the video description and if not
26:22 - that's perfectly fine continue watching
26:24 - as the next section is coming up have a
26:26 - great day
26:29 - [Music]
26:31 - in this section we're going to take a
26:32 - closer look at building blocks of as.net
26:35 - MVC and by the end of this section you
26:37 - will have a much deeper understanding of
26:39 - how this framework Works more
26:41 - specifically we're going to look at
26:42 - controllers actions routing views and
26:46 - view models so let's get
26:51 - started so in the last section you
26:53 - noticed that our random action returns
26:56 - action result this action result is the
26:59 - base class for all action results in
27:01 - as.net MVC so depending on what an
27:05 - action does it will return an instance
27:08 - of one of the classes that derive from
27:10 - action result in a random action we're
27:13 - calling this view method here which is
27:15 - just a helper method inherited from the
27:18 - base controller
27:19 - class this method allows us to quickly
27:22 - create a view result alternatively we
27:25 - can return a view result like this
27:29 - return New View
27:31 - result you can see that it's easier to
27:33 - just call the view method and this
27:35 - approach is way more common amongst
27:37 - asp.net MVC
27:40 - developers now you might be asking why
27:42 - is the return type of this method action
27:45 - result even though we're actually
27:46 - returning a view result well in case of
27:49 - this action we could simply set the
27:51 - return type to view result and this is
27:54 - actually a good practice especially when
27:56 - it comes to unit testing this action
27:58 - this way we'll save ourselves from an
28:00 - extra cast in our unit tests we'll look
28:03 - at unit testing in the second part of
28:05 - this course but sometimes it's possible
28:08 - that in an action we may have different
28:10 - execution paths and return different
28:13 - action results in that case we need to
28:16 - set the return type of that action to
28:18 - action result so we can return any of
28:21 - its
28:22 - subtypes okay view result is one of the
28:24 - action results that you work with most
28:26 - of the time let's take take a look at
28:28 - other types of action results we have
28:31 - partial view result to return a partial
28:33 - view content result to return Simple
28:37 - Text redirect result to redirect the
28:40 - user to a URL redirect to Route result
28:43 - to redirect to an action instead of a
28:46 - URL Json result to return a serialized
28:50 - Json object file result to return a file
28:54 - HTTP not found result to return a not
28:57 - found or 404 error an empty result which
29:01 - is used when an action doesn't need to
29:03 - return any values like void as you can
29:06 - see for all these types except emper
29:09 - result we have a helper method in the
29:11 - base controller class so let's see some
29:14 - of these in action back in the code I'm
29:17 - going to comment this out let's return
29:22 - content like hello
29:25 - world let's run the application with
29:27 - control and
29:31 - F5 and navigate to slov
29:35 - random so look we just get plain string
29:38 - content in the
29:42 - response another example let's return
29:46 - HTTP not
29:47 - found now build the application with
29:50 - control shift B this will compile the
29:53 - application without opening a new tab in
29:56 - the browser now press press alt and tab
29:59 - to switch back to Chrome and contrl R to
30:02 - refresh the
30:04 - page okay look we got this standard 404
30:11 - error now for enter result we don't have
30:14 - a helper method so if you want to create
30:16 - an action that doesn't return anything
30:19 - you need to return an instance of empty
30:21 - result like
30:22 - this return new empty result control
30:26 - shift B to build
30:29 - alt and tab control
30:31 - R okay look there's nothing in the
30:35 - response and the last
30:39 - example return redirect to
30:43 - action here we specify the name of the
30:48 - action and then the
30:51 - controller now sometimes as we are
30:53 - redirecting the user from one page to
30:55 - another we need to pass arguments to the
30:58 - Target action to pass arguments we use
31:01 - an anonymous object as the third
31:03 - argument to this method
31:06 - so new Anonymous object let's say page
31:11 - is one and sort by is
31:17 - name
31:20 - build back to Chrome
31:23 - refresh okay look we got redirected to
31:26 - the homepage and you can see see in the
31:28 - browser address bar that the arguments
31:30 - we sent are appearing as part of the
31:32 - query
31:33 - string so this is pretty much all you
31:35 - need to know about action results by the
31:38 - way don't think you need to memorize any
31:39 - of this stuff for the most part you'll
31:42 - be using view HTTP not found and
31:45 - redirect
31:49 - result in the last lecture we looked at
31:51 - action results which are the output of
31:54 - our actions now let's take a look at
31:56 - action parameters which are the inputs
31:58 - to our actions when the request comes in
32:01 - the application asp.net MVC
32:04 - automatically Maps request data to
32:06 - parameter values for Action methods so
32:09 - if an action method takes a parameter
32:11 - the NVC framework looks for a parameter
32:14 - with the same name in the request data
32:17 - if a parameter with that name exists the
32:19 - framework will automatically pass the
32:21 - value of that parameter to the Target
32:23 - action this parameter value can be
32:26 - embedded in the URL it can be in the
32:28 - query string or in the data posted using
32:32 - a
32:33 - form so back in the movies controller
32:37 - I'm going to create a new
32:39 - action public action result edit with a
32:43 - parameter called
32:45 - ID and here I just want to return simple
32:49 - content ID equals plus
32:53 - ID let's run the application first we
32:57 - compile with with control shift
32:59 - B alt and tab back to the browser I'm
33:03 - going to change the url to movies sledit
33:08 - SL1 this is an example of a parameter
33:11 - embedded in the URL you can see that it
33:13 - gets automatically mapped by the MVC
33:16 - framework I can also pass this parameter
33:18 - in the query string so contrl L I'm
33:22 - going to change this to ID equal
33:26 - 1 it gets mapped again
33:28 - name but let's see what happens if I
33:31 - rename this parameter to movie ID to
33:34 - rename we press f2 so all references are
33:38 - renamed automatically movie
33:41 - ID one more time
33:43 - build back to the
33:45 - browser
33:47 - refresh we got an exception the
33:51 - parameters dictionary contains a entry
33:53 - for parameter movie
33:55 - ID so if not NVC couldn't find a
33:58 - parameter called movie ID embedded in
34:00 - the URL or in the query string or in the
34:03 - request body passed by form and that's
34:06 - why we get this exception now I can
34:09 - change the query string parameter to
34:11 - movie ID there is gone but in this case
34:15 - I cannot embed one in the
34:19 - URL because the name of the parameter in
34:22 - our default route is ID it's not movie
34:25 - ID let's have a look at our default
34:27 - route one more time so in solution
34:30 - Explorer open up Route
34:32 - config look here's our default route and
34:37 - the parameter we have here is called ID
34:40 - so the value that we pass here will be
34:42 - identified as ID not movie ID and in
34:46 - movies controller this movie ID will not
34:49 - be initialized when this action is
34:51 - called now let's rename this back to
34:55 - ID so this is how a that NVC Maps
34:58 - request data to parameters of our
35:01 - actions we can also use optional
35:03 - parameters in our actions so let's
35:05 - create a new
35:06 - action public action
35:09 - result
35:11 - index so this action will be called when
35:14 - we navigate to movies now in this action
35:18 - imagine will return a view with the list
35:20 - of movies in the database we can add two
35:22 - optional parameters here page
35:25 - index and string sort by so if page
35:30 - index is not specified we display the
35:32 - movies in page one and similarly if sort
35:36 - by is not specified we sort the movies
35:39 - by their name now to make a parameter
35:41 - optional we should make it nullable so
35:44 - for page index I'm going to add a
35:46 - question mark here to make it a nullable
35:49 - integer and for sort by we don't have to
35:51 - do anything because the string type in C
35:54 - is a reference type and it's
35:56 - nullable now now inside the action we
35:59 - check to see if these parameters have a
36:01 - value so if page
36:04 - index has value I put the not operator
36:08 - here so if it doesn't have a value I
36:11 - initialize it to
36:13 - one similarly if string is null or wh
36:18 - space we pass sort by
36:22 - here then we initialize it to name
36:27 - and finally for the purpose of our demo
36:29 - I'm just going to return simple
36:32 - content so string.
36:34 - format page index equals the first
36:39 - parameter and sort by equals the second
36:44 - parameter and I pass page index and sort
36:48 - by
36:49 - here okay now build control shift
36:53 - B back to the browser let's go to
37:00 - movies so you can see I didn't have to
37:02 - specify any parameters and by default
37:04 - page index is one and sort by is name I
37:08 - can overwrite this parameter
37:10 - so I can pass page index set it to two
37:15 - and you can see it's updated here but
37:18 - sort by is still name I can overwrite
37:21 - that too sort by release
37:25 - date now it's updated
37:28 - now in this case we cannot embed these
37:30 - parameters in the URL because that would
37:33 - require a custom route that includes two
37:36 - parameters in the next lecture I will
37:38 - show you how to create a custom
37:44 - route so this default route in our
37:46 - application works for most scenarios but
37:49 - there are situations where we need a
37:51 - route with multiple parameters for
37:54 - example in our video rental app we may
37:56 - want to have a route like this where we
37:58 - can get the movies by the release year
38:00 - and month so let me show you how to
38:02 - create a custom
38:03 - route in route config class before our
38:07 - default route we call route. map
38:11 - route the reason you need to add this
38:14 - route before the default route is
38:16 - because the order of these routes
38:18 - matters you need to Define them from the
38:20 - most specific to most generic otherwise
38:23 - a more generic route will be applied to
38:25 - a URL and that's not what you want
38:29 - this method has a few overloads the one
38:31 - we use most of the time is the one that
38:33 - takes three parameters name URL and
38:38 - default so let's give our new route a
38:41 - name and this name should be unique so
38:44 - movies by release
38:47 - date now let's put this on a new line to
38:50 - keep the code consistent and
38:53 - clean next parameter is the URL pattern
38:57 - so so movies SL
39:00 - relased here we need two parameters
39:04 - year and month I note that I've enclosed
39:08 - these parameters in curly
39:11 - braces now the third argument we need to
39:14 - specify the defaults we use an anonymous
39:17 - object for that so new anonymus object
39:23 - here we set the name of the controller
39:25 - to movies
39:28 - and the
39:30 - action to buy release
39:35 - date that's it that's how we Define a
39:38 - custom route now let's create this
39:40 - action so
39:42 - save back to movies controller I show
39:46 - you a quick way to create an action type
39:49 - MVC action 4 and press
39:52 - tab so this is another code snippet so I
39:56 - we call this by release
39:59 - date this action takes two
40:03 - parameters year and
40:06 - month for the month we could use a bite
40:09 - because the largest number we want here
40:11 - is 12 but it doesn't really matter now
40:14 - here again I want to return simple
40:18 - content so
40:20 - year plus slash plus
40:24 - month now build
40:28 - back to the
40:29 - browser let's navigate to
40:32 - movies slash relased I'm not specifying
40:36 - any
40:38 - parameters we got a 404 error because
40:41 - our URL has not matched any of our route
40:44 - patterns now let's put the year and the
40:50 - month so our route parameters are here
40:53 - we can also add constraints to our route
40:56 - for example let's say we want to enforce
40:58 - that the year and month parameters to be
41:01 - four and two digits
41:03 - respectively so back in our route
41:05 - definition we
41:07 - Supply another argument to map route
41:11 - method again we use an anonymous
41:14 - object and here we can use regular
41:16 - Expressions to apply
41:18 - constraints so I want the year to be
41:20 - four digigit number so set it to a
41:24 - Verbatim string back SL d
41:27 - which represents a
41:31 - digit and the number in curly braces
41:33 - represents the number of
41:35 - repetitions the reason I put an ad sign
41:38 - here is because backslash is an escape
41:41 - character and if you don't use AD Sign
41:43 - Here we would have to add another
41:45 - backslash and this looks a little bit
41:48 - ugly so undo that's better now
41:53 - similarly I'm going to set month to
41:57 - a regular expression back SL D with two
42:01 - digits build back to the browser now if
42:05 - I
42:06 - refresh we got a 404 error and that's
42:09 - because of our
42:10 - constraint but if you add a zero
42:14 - here everything
42:16 - works now let me show you another
42:19 - example let's say we want to constraint
42:21 - the year to 2015 and
42:25 - 2016 now this doesn't quite make sense
42:27 - in the context of listing movies by year
42:30 - but sometimes you may want to limit the
42:32 - route parameters to a few specific
42:35 - values again we can use a regular
42:37 - expression to apply that constraint so
42:39 - I'm going to
42:41 - change this to
42:43 - 2015 or
42:48 - 2016 so this is how we Define custom
42:50 - routes in as notet MVC in the next
42:53 - lecture I will show you a cleaner way to
42:55 - create a custom route
43:01 - okay look at this code currently we have
43:04 - only one custom route here but if you're
43:06 - working on a large application sooner or
43:09 - later this file is going to grow with a
43:11 - lot of custom routes and over time it
43:13 - becomes a mess plus another issue with
43:16 - this approach is that you have to go
43:18 - back and forth between your actions and
43:20 - custom routes and the third issue is
43:23 - that if we go back to movies controller
43:27 - and rename this action to by release
43:31 - here you can see it's not updated here
43:34 - and that's because of this magic string
43:36 - so when we rename a controller or an
43:38 - action we have to remember to come back
43:41 - here and apply that name change as well
43:43 - so this code is fragile because of this
43:45 - magic strings in as MVC 5 Microsoft
43:49 - introduced a cleaner and better way to
43:51 - create a custom route instead of
43:53 - creating the route here we can apply it
43:56 - using an attribute
43:57 - to the corresponding action so you might
44:00 - ask M why did you teach me the old and
44:02 - poor way of creating custom routes
44:04 - because you may be working with an
44:06 - existing codebase with convention based
44:08 - custom routes so you need to understand
44:10 - how they work but if you're building a
44:12 - new application or improving an existing
44:15 - one I would recommend you to use
44:17 - attribute routing now let me show you
44:19 - how to define this custom route using an
44:22 - attribute first in order to use
44:24 - attribute routing you need to enable it
44:27 - so routes. map MVC attribute
44:33 - routes we call this method now let's
44:36 - delete this
44:39 - route save back to the
44:43 - controller we apply the route
44:46 - attribute and here we pass the URL
44:50 - template so movies slash relased slash
44:54 - year slash Monon
44:57 - now to apply a constraint we add
45:00 - colon and then we add reject to apply a
45:04 - regular expression this is like a
45:06 - function that we
45:08 - call in parenthesis we pass the actual
45:11 - regular
45:12 - expression so
45:15 - digit repeated four times note that this
45:18 - regular expression is not a string so
45:21 - unlike verbatim strings we have to
45:23 - repeat this backslash
45:25 - twice now with attribute routes we can
45:28 - also apply other kinds of constraints
45:31 - for example I can apply a second
45:34 - constraint to this month parameter so
45:37 - after Rex colon again this time I'm
45:40 - going to use range to set a range
45:43 - between 1 and
45:46 - 12 so you see attribute routes are more
45:49 - powerful we also have a bunch of other
45:52 - constraints like min max Min length and
45:55 - max length for Strings
45:57 - energer float GID and so on you don't
46:01 - have to memorize any of these
46:02 - constraints just be aware that they're
46:04 - supported by the framework if you need
46:06 - to apply constraints to your attribute
46:08 - routes just Google as.net MVC attribute
46:12 - route
46:13 - constraints okay so far we have looked
46:16 - at controllers and routing in detail now
46:19 - we're going to slowly transition to
46:20 - views so in the next lecture I will show
46:23 - you a few different ways to pass data to
46:25 - views
46:30 - earlier in the introduction section we
46:32 - created this action to display a movie
46:35 - in this action we passed our model to
46:37 - the view by passing it as an argument to
46:39 - the view method there are two other ways
46:42 - to pass data to views and that's what
46:44 - I'm going to show you in this lecture
46:46 - one way is to use the view data
46:48 - dictionary so every controller has a
46:51 - property called view data which is of
46:53 - type view data dictionary so in this
46:56 - example we can pass our movie to the
46:58 - view like
47:03 - this and we remove it from
47:07 - here now let's go to The View with
47:09 - resharper we can quickly navigate to The
47:12 - View for this action by putting the
47:14 - cursor on The View method and pressing
47:15 - contrl B and this drop down you see the
47:18 - name of the view random. CSH
47:21 - HTML if you're not using resharper you
47:24 - need to go to solution Explorer and find
47:27 - The View under views movies right
47:30 - here okay now instead of using model
47:33 - property we need to use view
47:40 - data now
47:42 - dot look we can't access the name
47:45 - property of our movie because each item
47:48 - in the dictionary is of type object so
47:51 - we need to explicitly cast it to the
47:53 - movie now don't type anything just watch
47:55 - for a second because this this code is
47:57 - going to get a little bit
48:00 - ugly that's what I meant so all these
48:02 - noisy parenthesis compare this to what
48:05 - we had before model. name which one do
48:09 - you think is better it's obvious another
48:12 - problem with this approach is this magic
48:14 - string here so back in the
48:18 - controller if we change this movie to
48:20 - random movie we have to remember to go
48:23 - back in the view and make this change
48:26 - here as well
48:27 - otherwise we'll get a non reference
48:29 - exception so this way of passing data to
48:32 - the Views is fragile we had this in the
48:35 - very first version of NVC and then
48:37 - Microsoft decided to improve this but in
48:39 - a very poor way so they introduced viewb
48:43 - which is a dynamic type so back in the
48:47 - controller instead of using view data
48:50 - with a magic string we use view
48:53 - bag with a magic property
48:57 - so this movie property is added to the
49:00 - viewbag at runtime which means we don't
49:03 - get compile time safety if we decide to
49:06 - change this magic property to random
49:09 - movie again we have to remember to go
49:11 - back in View and change it
49:15 - here plus we'll have the casting issue
49:18 - as well so honestly I have no idea of
49:21 - what Microsoft was thinking when they
49:22 - introduced this view bag as an
49:24 - improvement for view data so please do
49:27 - not use view data or view back if you
49:30 - want to pass data to a view just use the
49:32 - approach I showed you earlier so back in
49:35 - the
49:36 - controller we get rid of these and just
49:38 - pass the movie Object here now you might
49:41 - be curious where does this movie Object
49:43 - go in the view result let me show you so
49:47 - I create an instance of view
49:54 - result view result view
49:58 - dat.
50:00 - model so this movie Object we pass here
50:03 - will be assigned to this property this
50:06 - view method here would take care of that
50:08 - so we don't have to write all this extra
50:09 - code what I want you to note here is
50:12 - that this view data it's not a regular
50:15 - dictionary it's a view data dictionary
50:18 - so you can either use it as a dictionary
50:20 - with key value pairs or use its model
50:23 - property to work with an object and
50:25 - that's the preferred way next we're
50:27 - going to look at view
50:32 - models in our random view currently we
50:35 - just displayed the name of a movie but
50:37 - what if we also wanted to display the
50:39 - list of customers who have rented this
50:41 - movie in our domain model there may not
50:44 - be a relationship between the movie and
50:46 - customer classes so we need to pass two
50:49 - different models to this view one is the
50:51 - movie The Other is the list of customers
50:54 - but here we have only one model property
50:56 - so how do we solve this problem we use a
50:58 - view Model A View model is a model
51:02 - specifically built for a view it
51:04 - includes any data and rules specific to
51:07 - that view so let's see a view model in
51:10 - action first I'm going to add a customer
51:12 - class to the models
51:16 - folder add
51:19 - class
51:22 - customer let's give it a couple of
51:24 - properties
51:31 - ID and
51:33 - name now we use this models folder
51:36 - purely for our domain classes like movie
51:39 - customer and so on we put view models in
51:42 - a separate folder so let's create a new
51:46 - folder
51:48 - add new folder view
51:53 - models and then we add a new class here
52:00 - random movie view model so as a
52:04 - convention we use the view model
52:08 - suffix this class needs two
52:11 - properties one is the
52:16 - movie note that as I type the movie Here
52:19 - resharper automatically added this name
52:21 - space
52:23 - here the other property is is a list of
52:29 - customers now let's go back to our
52:33 - controller and the random action I'm
52:35 - going to quickly create a list of
52:44 - customers we use the object
52:46 - initialization syntax to add two
52:48 - customer objects
52:52 - here customer one
52:58 - and
53:00 - two now we create a view model
53:05 - object random movie view
53:09 - model again resharper automatically
53:12 - resolve the
53:14 - namespace now let's initialize the movie
53:18 - property and the
53:24 - customers okay so this is our view model
53:27 - now instead of sending the movie
53:29 - here we send the view
53:32 - model now look we have a red underline
53:35 - here argument type random movie view
53:38 - model is not assignable to model type
53:42 - movie so basically that means in the
53:46 - random view because the type of the
53:48 - model for this view is the movie we
53:51 - cannot give it a view model so we need
53:53 - to change
53:54 - this to random
53:57 - movie view
53:59 - model now we have an error here because
54:02 - our view model doesn't have the name
54:03 - properties so we change it to model.
54:08 - movie. and you can see here we have
54:10 - access to model.
54:12 - customers in the next lecture I will
54:15 - show you how to render the list of
54:20 - customers okay in this lecture we're
54:22 - going to examine the razor view syntax
54:24 - in as.net MVC
54:27 - so you have learned that here we can
54:28 - write C code by prefixing it with an AD
54:31 - Sign to render the list of customers we
54:34 - can simply use a for each
54:37 - block so add sign for each of our
54:41 - customer and model. customers we use a
54:45 - code block here this is compulsory in
54:47 - as.net MVC views even if what you're
54:50 - going to put inside the for each block
54:52 - is only one line now here inside this
54:55 - block we we can either continue writing
54:57 - C code like using an if
55:00 - statement or we can write
55:04 - HTML so the view engine in MVC called
55:07 - razor view engine knows how to parse
55:09 - this syntax let's say we want to display
55:12 - these customers using list items so
55:15 - outside this for each block I use the UL
55:20 - tag let's close it
55:23 - here and inside the forage block
55:26 - we use Li and here we switch back to C
55:30 - so AD Sign customer.
55:33 - name we can also use an if block to
55:36 - conditionally render content for example
55:39 - if no one has rented this movie before
55:41 - we want to display a custom message
55:44 - so if model.
55:48 - customers. count is zero code
55:53 - block here we can add a paragraph no one
55:57 - has rented this movie
55:59 - before or if you don't want to use the P
56:02 - tag you can simply
56:04 - use
56:06 - text this is not part of the standard
56:08 - HTML but it's something that the razor
56:10 - view engine understands so if no one has
56:13 - rented this movie this if block will
56:16 - render our text without any markup
56:18 - around
56:19 - it okay now we add an else block
56:23 - here and move this UL
56:27 - right here so you can see working with
56:30 - razor views is pretty easy now let me
56:33 - show you a few more
56:34 - techniques let's say here in H2 you want
56:37 - to conditionally add a
56:40 - class popular if the movie has been
56:43 - rented by at least five customers
56:45 - otherwise we don't want to have this
56:46 - class here how do we do that first we
56:49 - use a code block so add sign code block
56:53 - here we can write any c code so I'm
56:56 - going to going to declare a variable
56:58 - call it class name and initialize it
57:01 - like this if model. customers that count
57:05 - is greater than five it should be
57:09 - popular otherwise it should be
57:12 - null now
57:14 - here we can render class
57:17 - name with this code if class name is
57:20 - null this class attribute will not be
57:22 - rendered in the final HTML it will be
57:25 - added only if class name is popular so
57:28 - let's try it run the application with
57:30 - contrl
57:33 - F5 okay right click the
57:35 - heading
57:39 - inspect look we don't have the class
57:42 - attribute because currently we have only
57:44 - two customers now let's go back to the
57:47 - view I'm going to change this condition
57:50 - to Greater Than Zero Save now we don't
57:55 - have to rec compile the application
57:57 - because this is just a view so we can
57:59 - switch back to the browser
58:02 - refresh now look at the heading we have
58:05 - the class
58:07 - popular so this is how you render
58:09 - classes
58:10 - dynamically by the way this technique is
58:13 - not limited to classes you can use this
58:15 - technique to render any attributes
58:18 - dynamically and one last tip you can add
58:21 - comments in your razor views using this
58:24 - syntax at sign star star at sign and we
58:30 - can make it multiple lines this is a
58:33 - comment on multiple
58:39 - light so earlier when we created a view
58:43 - I briefly explained what a partial view
58:45 - is in this video we're going to take a
58:47 - closer look at partial views so in
58:50 - solution Explorer open up
58:53 - views shared
58:57 - layout this is the bootstrap template
58:59 - that defines the overall look and feel
59:01 - of our website so we've got the standard
59:04 - HTML
59:05 - head and body sections inside the body
59:10 - we've got a div that represents our
59:12 - navigation bar let's collapse this hold
59:15 - down control and press M
59:18 - twice below this nav bar we have a
59:20 - container for our Pages note this call
59:23 - to render body method so so what we put
59:26 - in our views will be placed here when
59:28 - the view is rendered and you can see
59:30 - below that we've got a horizontal line
59:33 - and a
59:34 - footer now I told you that a partial
59:36 - view is like a small view that we can
59:38 - reuse on different views but partial
59:41 - views are not necessarily for reusing
59:43 - markup sometimes we can use them to
59:46 - break down a large view into smaller
59:48 - more maintainable partial views for
59:51 - example let me expand this navigation
59:53 - bar element again
59:56 - you can see that we have a fair amount
59:58 - of markup on this view while this is not
60:01 - terribly bad we can improve the
60:03 - maintainability of this layout by
60:05 - extracting the part that represents the
60:06 - navigation bar into a partial view so
60:09 - let's do that back in solution
60:12 - explore right click
60:15 - shared
60:17 - add
60:19 - view by convention we prefix partial
60:22 - view names with an underscore so let's
60:25 - call this underscore
60:26 - nav
60:27 - bar we need to tick this checkbox here
60:31 - create as a partial view this way this
60:33 - view will not have a
60:37 - layout okay now control tab to get back
60:40 - to the
60:42 - layout scroll up a little bit so here's
60:45 - our Navar element again put the cursor
60:48 - on this element hold down the control
60:51 - and press M
60:52 - twice okay collapsed contrl X
60:56 - cut back to navigation bar paste it here
61:01 - now we can see in this partial view we
61:02 - only have the navigation bar nothing
61:04 - else so next time we want to change
61:06 - something on our navigation bar we can
61:08 - simply jump to this partial view we
61:10 - don't have to scroll up and down in the
61:12 - main
61:13 - layout
61:14 - save now back to the layout so here's
61:17 - the content area of our Pages the
61:20 - navigation bar was above that so here we
61:23 - need to render that partial View weuse
61:26 - add sign HTML this is a property of our
61:30 - views which is of type HTML helper so
61:33 - it's a class that provides a number of
61:35 - useful methods to work with HTML we're
61:38 - going to use the partial method here we
61:41 - pass the name of our partial view
61:44 - underline navbar that's it that's how we
61:47 - use a partial view on another view now
61:51 - optionally we can pass a model to this
61:53 - partial view as the second argument of
61:56 - this partial method now in this case we
61:58 - don't have a model in our layout but let
62:01 - me temporarily just declare a model for
62:03 - demonstration so on top of this view I'm
62:06 - going to add the model directive and
62:09 - let's set this to random movie view
62:13 - model now here if I don't specify a
62:16 - model the model that is currently passed
62:19 - to this layout view will be
62:21 - automatically passed to this partial
62:23 - view but let's say this navbar expects a
62:26 - movie not the entire random movie view
62:29 - model then we can supply a model as a
62:32 - second argument so
62:35 - model.
62:38 - movie okay we've covered a lot of ground
62:40 - about various components of asut MVC so
62:43 - in the next lecture you will get a cheat
62:45 - sheet to quickly overview the materials
62:47 - in this section and then I'm going to
62:49 - give you an exercise to put what you
62:51 - have learned in action
62:57 - okay I want you to use what you have
62:58 - learned in this section and Implement a
63:00 - few simple features in our vidly app so
63:03 - you can see here on the navigation bar I
63:05 - have changed application name to vidly
63:08 - and now we have only two links customers
63:11 - and movies in the customers page we have
63:14 - a table with the list of customers and
63:15 - currently we have only two customers now
63:18 - these customers are not coming from a
63:20 - database I've just hardcoded them in my
63:22 - action for this exercise don't worry
63:24 - about the database
63:26 - in the next section we're going to use
63:27 - enti framework to generate a database
63:30 - for our application now back here in the
63:32 - list of customers if I click on John
63:35 - Smith I go to a new page at this address
63:38 - customers SL details SL1 which is the ID
63:42 - of that
63:43 - customer if I change this to two you see
63:46 - Mary
63:47 - Williams but if I change this to three
63:51 - we get a standard 404 error page because
63:55 - we don't have have a customer with that
63:56 - ID now in the future we can replace this
63:59 - boring standard page with a custom
64:02 - design but for now don't worry about it
64:04 - what I want you to do as part of this
64:06 - exercise is to cater for various
64:08 - situations like when we have a customer
64:11 - versus when we don't have a
64:13 - customer now let's go
64:16 - back in the list of customers if we
64:19 - don't have a customer we should see a
64:21 - message like we don't currently have any
64:23 - customers so let me temporarily go back
64:26 - to my action and comment out the code
64:28 - that generates this
64:30 - list and then refresh the page look this
64:34 - is what I was talking about so when
64:36 - implementing this view cater for these
64:39 - scenarios the list of movies is very
64:43 - similar currently we have two hardcoded
64:46 - movies Shrek and
64:47 - Wall-E and there's no link under these
64:50 - movies if you want you can add them but
64:52 - it's going to be exactly like the
64:53 - exercise for customers so go ahead and
64:57 - use what you have learned in this
64:58 - section to make these changes and by the
65:00 - way before you get started look at the
65:02 - PDF I've attached to this lecture there
65:05 - are additional materials in that PDF
65:07 - that you need to read in order to do
65:08 - this
65:12 - exercise now if you want to see my
65:14 - solution we can simply head over to
65:16 - github.com
65:19 - dhamani here you see I have a repository
65:22 - created for this course vitle d mc-5
65:26 - here we can get the latest source code
65:28 - or one of the previous versions of the
65:31 - application you can see currently I have
65:33 - eight commits so let's take a
65:36 - look so as I'm recording these lectures
65:39 - and modifying this application I make
65:41 - small changes to the code and commited
65:42 - to the repository for example you can
65:45 - see in the previous lecture I extracted
65:47 - the navigation bar into a partial view
65:50 - let's take a look at this
65:53 - commit I'm going to change the view mode
65:55 - to to split because it's easier to see
65:58 - the before and after changes so we can
66:00 - see in
66:01 - layout. CSH
66:04 - HTML on the left side this is what we
66:06 - had and on the right side this is what
66:08 - we currently have so the red lines were
66:11 - removed and the green lines were added
66:14 - you can see that I removed this div
66:15 - which was our navigation bar and
66:18 - replaced it with html. paral method
66:21 - let's scroll down here is another file
66:24 - navbar CS HTML which is a new file
66:27 - because previously we had nothing here
66:29 - and now we've got all this markup for
66:31 - the navigation
66:32 - bar so you can see I've got another
66:34 - commit here solution section two
66:36 - exercise display the list of customers
66:38 - and movies so throughout this course as
66:41 - you do your exercises you can always
66:43 - come back here and look at my solution
66:45 - and by the way when required I always
66:47 - add comments to my solution so you know
66:50 - why I did something in a certain way so
66:53 - be sure to read these comments
66:59 - all right in this module you learned the
67:01 - fundamentals of as.net MVC more
67:04 - specifically you learn about action
67:05 - results action parameters convention
67:08 - based routing attribute routing and
67:10 - razor views in the next section we're
67:13 - going to use Entity framework and
67:15 - connect our application to a database so
67:17 - I will see you in the next
67:20 - section well if you made it this far you
67:22 - seem to be very enthusiastic about
67:24 - learning as. notet MVC 5 and I highly
67:27 - recommend you to take my complete aset
67:30 - mvc5 course on UD me this course
67:33 - contains 7 and 1 half hours of content
67:35 - in terms of high quality video and audio
67:37 - along with lots of exercises and real
67:40 - world examples if you're interested you
67:42 - can get the course with a discount using
67:44 - the link in the video description I hope
67:46 - to see you in the course