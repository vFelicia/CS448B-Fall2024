00:03 - okay we got two methods at this point
00:05 - you should know what a method is so I'm
00:07 - not gonna review that a game but in this
00:09 - lecture I'm gonna cover some additional
00:11 - details about methods I'm gonna start by
00:14 - explaining the concept of signature for
00:16 - methods then I'm gonna talk about method
00:18 - overloading which you should already be
00:20 - familiar with because I already talked
00:23 - about in the lecture about constructors
00:25 - but here you're gonna see another
00:27 - example of overloading methods which can
00:29 - be useful then I'm gonna talk about
00:31 - three modifiers that we can apply to
00:34 - method parameters and there are params
00:36 - ref and out out of the three modifiers
00:40 - params is the only one that I consider
00:42 - useful in my opinion ref and out are bad
00:46 - decisions made when designing the
00:48 - c-sharp language there are code smells
00:50 - and a lot of developers have the same
00:52 - opinion initially I didn't want to
00:54 - include them in this course because I
00:56 - don't want to teach you bad things but
00:58 - because I wanted my course to be
00:59 - comprehensive I decided to include them
01:02 - here plus there are areas in the
01:04 - Dartmouth framework where you have to
01:06 - use the alt modifier so I want you to
01:09 - know how to use them even though I'm not
01:11 - gonna advise you to use alt modifier
01:13 - when designing your classes and methods
01:15 - we'll see the reasons later in this
01:17 - lecture so let's get started what is the
01:21 - signature of a method a signature of
01:23 - method consists of its name and the
01:25 - number and type of its parameters so in
01:29 - this example you see we have a point
01:30 - class that has a method called move I
01:32 - have highlighted the areas where make up
01:35 - the signature of this move method with
01:37 - yellow so the name and the type and
01:40 - number of parameters a concept that goes
01:43 - hand in hand with the signature of a
01:45 - method is overloading
01:48 - so basically overloading means having a
01:50 - method with the same name but different
01:52 - signatures look at this example here we
01:56 - have a point class with three move
01:58 - methods imagine this point represents a
02:00 - point on the screen and we would like to
02:02 - move this to a different location so we
02:05 - can have three overloads of the move
02:08 - method one that takes two parameters of
02:11 - type integer which represent an x and y
02:14 - another overload can take a point
02:17 - parameter and with this technique we
02:20 - makes it easier for the consumer of this
02:22 - class to choose the right overload maybe
02:26 - sometimes we have two integers and it's
02:28 - more handy to call the first metal here
02:30 - in other times we might have a point
02:33 - object and it would be easier to use the
02:35 - second overload and also here we have a
02:38 - third overload that takes a point and a
02:41 - speed which can create some kind of
02:43 - animation while moving the point from
02:45 - one location to another you don't always
02:48 - have to overload your methods but if
02:50 - there are cases where you see you can
02:52 - improve your code and make it easier for
02:55 - the consumer of your method overloading
02:57 - is a technique in your toolbox
03:00 - okay now that you understand the concept
03:02 - of method overloading take a look at
03:04 - this calculator class here this class
03:06 - has at least three overloads for the add
03:08 - method the first one takes two
03:10 - parameters the second one takes three
03:13 - parameters and the third one takes four
03:15 - but as you see this is not an efficient
03:18 - way to overload the add method what if
03:21 - you wanted to add ten numbers together
03:23 - then we would have to overload the add
03:25 - method ten times and that's a code smell
03:27 - is there a better way to achieve this of
03:30 - course there is
03:32 - the first step to make this go better is
03:34 - to use an array so instead of
03:36 - overloading the add method ten times we
03:38 - can declare it only once and have it
03:40 - receive a parameter of type integer
03:43 - array
03:45 - with this declaration we can use the add
03:47 - method like the example you see here
03:50 - while this works perfectly fine there is
03:52 - just a slight problem here and the
03:54 - problem is every time we want to pass a
03:57 - number of arguments to this add method
03:59 - we have to create and initialize an
04:01 - array we have to use the new operator
04:03 - and the int array notation it's not a
04:06 - big deal but there is a simpler way to
04:08 - do that and that's when we use the
04:10 - params modifier
04:13 - so we can change the
04:15 - raishin of our add method to include the
04:17 - params keyboard here just before the
04:19 - integer array with that we can call this
04:22 - method in a couple of ways we can use it
04:24 - in the traditional form so we pass an
04:27 - integer array or we can simply pass a
04:30 - varying number of arguments here we
04:33 - don't need to create and initialize an
04:34 - array and that's simpler
04:37 - again this is not something that you use
04:39 - all the time but if you have situations
04:41 - where your method might need a varying
04:43 - number of parameters you can use the
04:45 - params modifier to make it easier for
04:47 - the consumer of that method to call that
04:49 - method
04:51 - okay now let's take a look at the ref
04:53 - modifier this is probably the only
04:55 - example in this course where I'm going
04:58 - to use names like my class and my method
05:00 - because I really don't like this kind of
05:02 - teaching if you have noticed I try to
05:05 - use real-world examples that make sense
05:07 - as opposed to abstract names like my
05:10 - method my class one two it just doesn't
05:12 - make sense anyway because the ref and
05:15 - out modifiers are what I call a code
05:17 - smell I couldn't think of a real-world
05:19 - example to demonstrate this concept here
05:21 - so let's just imagine this my method
05:24 - here takes an integer and whatever we
05:26 - pass it adds two to that integer
05:30 - now take a look at this example here as
05:32 - what we would write to call that method
05:33 - I have a question for you here we have
05:37 - set a to 1 we call my method and pass a
05:41 - what do you think would be the result of
05:44 - a after returning from this method is it
05:47 - going to be 3 no it's going to be 1
05:50 - because a is a value type
05:53 - and that means when we pass a to a
05:55 - method like the one you see here its
05:57 - value is being copied
05:59 - so they ain't a that we have here is a
06:02 - local copy of a that will be relevant to
06:05 - this metal here it will not affect the
06:08 - original a that we had here
06:11 - we can change this code by including a
06:13 - ref modifier to our method and note that
06:17 - here I change the name of the class and
06:18 - its method from my class on my method to
06:21 - weirdo and do a weird thing because it
06:23 - just is weird so with this change if we
06:27 - call this method and also include the
06:29 - ref modifier here the original a that we
06:32 - have here will be passed to this method
06:34 - and its value will be modified so after
06:37 - we return from this method value of a is
06:39 - going to be 3
06:41 - I'm completely against this concept I
06:44 - think it's a coat smell and I want to
06:46 - make sure that you're never gonna use
06:47 - this but if there are classes written by
06:51 - other people or perhaps somewhere in
06:53 - dotnet framework where a parameter is
06:55 - defined with the ref modifier I want you
06:58 - to know that in order to call it method
07:00 - you need to specify the ref modifier
07:01 - here
07:03 - honestly I can't remember on top of my
07:05 - head whether we have places in the
07:07 - dotnet framework where methods are
07:09 - defined with the ref modifier
07:11 - but that's all I want you to know now
07:14 - let's take a look at the out modifier
07:16 - now else modifier is slightly similar to
07:19 - the ref modifier in the sense that if a
07:22 - parameter is declared with the out
07:24 - modifier as you see here then in order
07:27 - for you to call that method you also
07:29 - need to specify out when calling that
07:31 - method but out is conceptually a little
07:35 - bit different from ref what does it mean
07:37 - that means with the out this method can
07:40 - return a value to the caller
07:42 - now you might be wondering couldn't me
07:44 - just return a value here instead of
07:46 - using void absolutely yes
07:49 - but without keyword we can have multiple
07:51 - parameters here and they all can return
07:54 - a value to the caller and that's exactly
07:56 - where I say this is a code smell or this
07:59 - is a design smell of the C sharp
08:00 - language because if a method is going to
08:03 - return multiple values to the caller
08:05 - it's better to encapsulate all these
08:07 - values into a separate class which could
08:10 - be the return type of that method so
08:13 - again I want to emphasize do not ever
08:15 - use the Ouse modifier when designing
08:17 - your methods but I included the out
08:20 - modifier here because there is one place
08:22 - in dotnet framework that you might be
08:24 - using sometimes and that's where you
08:26 - have to use the out modifier even though
08:28 - it's not a good choice but I want you to
08:30 - be aware of that okay enough theory
08:33 - let's start coding and see all these
08:35 - concepts in action
08:38 - okay let's start by creating a point
08:40 - class so public class point this point
08:46 - represents a point on the screen so it
08:49 - needs two fields an X and a Y and they
08:52 - both have to be an integer so public int
08:55 - X public int Y and here we should create
09:00 - a constructor to initialize these fields
09:02 - so seat or tab you get two parameters
09:07 - into x and y and this that x equals x is
09:13 - that y equals y pretty simple now let's
09:17 - put this class in a separate file to
09:19 - clean up our code so the cursor is here
09:22 - with resharper we press alt' + enter'
09:25 - and enter again now point is in a
09:28 - separate file
09:30 - now let's add a method to move this
09:32 - point to a different location so public
09:36 - void move when the two parameters and x
09:40 - and a y and we simply change the value
09:44 - of our fields using these arguments so
09:46 - these that x equals x is that y equals y
09:52 - now we can overload this method by
09:54 - creating another version of that that
09:56 - takes a different signature maybe the
09:58 - other one takes a point object let's see
10:00 - how it works so a public void move here
10:04 - we pass a point object that is a new
10:06 - location and we use this object to
10:10 - change the value of our field so this
10:12 - that x equals new location dot X is that
10:18 - y equals new location that Y
10:21 - now let's go to our program class so we
10:24 - simply press ctrl + tab to switch
10:26 - between open windows there you go let's
10:29 - create a point object bar point equals
10:32 - new point and I give it an x and y so 10
10:36 - and say 20
10:38 - now if we call the move method points
10:41 - don't move
10:42 - look we've got two versions of this
10:44 - method so there are two overloads the
10:47 - first one takes a point object the
10:49 - second one takes an X on Y sometimes in
10:51 - our program you might just have two
10:53 - numbers whereas other times you might
10:55 - have a point object so by overloading
10:57 - this method we make it easier or the
11:00 - color of this method to pass arguments
11:02 - to this method so let's try both
11:05 - versions first I pass a point object
11:07 - let's move it to 40 and 60
11:12 - now to ensure that everything is working
11:14 - let's put the value of x on y on the
11:16 - console so CW tab again this is a code
11:21 - snippet if you want to learn more of
11:23 - this fast coding techniques I have a
11:25 - course called double your coding speed
11:27 - on udemy where I teach you lots of
11:30 - techniques to write code fast so here in
11:32 - console the right line we can say point
11:34 - is add and here we pass the location so
11:39 - point dot X point y
11:43 - let's run the application with ctrl + f5
11:50 - okay point is at location 40 and 60 so
11:53 - our move metal is working properly now
11:56 - let's extend this example and this time
11:59 - use the other overload of the move
12:01 - method so point that move this time I
12:06 - want to move it 200 and 200 so I use the
12:09 - second overload
12:12 - again let's copy-paste this line here
12:14 - and make sure everything is working
12:17 - application
12:21 - point is moved twice and now it's at the
12:23 - location 100 and 200
12:27 - so this is how overloading works but I
12:30 - want to show you that there is a problem
12:32 - with this code in terms of best
12:34 - practices let's get back to the point
12:36 - class
12:40 - okay here we are duplicating the concept
12:43 - of setting X&Y now this is a very simple
12:47 - example and we are just setting two
12:48 - fields but sometimes in more complicated
12:51 - scenarios it's not a good idea to repeat
12:53 - the same concept in two places so what
12:56 - we can do is to make this move method
12:59 - call the other move method this way we
13:03 - set x and y in only one place so if
13:06 - there is a bug in our program there's
13:07 - one place that we have to fix let's see
13:10 - how we can implement this so here I
13:13 - simply call the other move method
13:17 - I passed new location that X a new
13:20 - location that why
13:23 - and we can get rid of
13:25 - two lines here
13:26 - looks better doesn't it but there's
13:28 - still one more problem with this code
13:30 - can you spot it
13:33 - and to give you a hint it's here there
13:36 - is one tiny problem here
13:39 - the problem is
13:41 - if we pass a null object here this
13:43 - method is gonna throw an exception let
13:46 - me show you what I mean by that so we go
13:48 - to program
13:51 - I'm going to change this line so instead
13:55 - of passing a point object a pass no
14:01 - let's run the application
14:05 - there you go the application crashed and
14:07 - be God
14:10 - a null reference exception
14:14 - you are not familiar with the exceptions
14:15 - exceptions are darknets way of error
14:18 - reporting I've covered exceptions in
14:21 - full detail in my c-sharp advanced
14:23 - course that you can find on udemy so
14:25 - let's move on for now
14:27 - we go back to the point class
14:31 - to validate the argument that is passing
14:33 - so we make sure that it's not known
14:36 - otherwise if we go north eggs or not
14:39 - that why we're gonna get a null
14:40 - reference exception we go if new
14:44 - location is null we throw an argument
14:50 - null exception and pass the name of the
14:53 - parameter what does this mean first of
14:56 - all
14:57 - throwing an exception is a way to report
15:00 - errors to the caller so here I use the
15:03 - throw keyword and here I create a new
15:05 - exception object an exception is just a
15:07 - class and here we just instantiate in
15:09 - that class and in the constructor here I
15:12 - simply pass the name of the parameter
15:14 - that was null in this case new location
15:17 - with this code if new location is known
15:20 - we're never gonna get here so the state
15:23 - of our class which means that x and y is
15:26 - not going to be changed so this way our
15:28 - point object will always stay in a valid
15:31 - state
15:32 - the Technica have used here as in
15:34 - validating this argument here is called
15:36 - defensive programming which is actually
15:38 - beyond the scope of this course
15:40 - but basically a defensive programming
15:42 - improves the robustness of your code
15:46 - okay now let's run the application and
15:48 - see what happens
15:53 - look the application crashed again but
15:56 - the difference is it's time we got an
15:58 - argument null exception as opposed to a
16:01 - null reference exception so you may
16:03 - argue how is it different well it's
16:05 - better to get an argument not exception
16:07 - than null reference exception why first
16:10 - of all your application will always have
16:12 - a global error handling mechanism the
16:16 - reason our application crash here is
16:18 - because we don't have a global error
16:19 - handling or exception handling mechanism
16:22 - I will show you how we can add that in a
16:24 - few seconds but the point here is when
16:27 - we get an argument null exception we are
16:29 - immediately telling the color of this
16:31 - method that is its move method that the
16:34 - value they have passed in is not a valid
16:36 - value and as a result no further actions
16:39 - will happen that's the idea of writing
16:41 - robust code if you get some invalid
16:44 - value whether it's not or some value
16:46 - that is out of range or maybe somewhere
16:49 - you don't expect a zero or an empty
16:51 - string then if you get that value and do
16:53 - operations on that value you're taking
16:56 - your program to an unexpected State
16:59 - which means some weird things may happen
17:01 - down the track so the idea of defensive
17:03 - programming is to stop the program from
17:06 - getting into that weird or invalid state
17:08 - ok now let me show you how we can
17:10 - improve this code by adding a global
17:12 - exception handling mechanism so the
17:14 - application won't crash let's get back
17:16 - to our program
17:18 - so simply I add a try block here you
17:21 - simply type try and press tap let me
17:23 - show you again
17:24 - try tap so again this is a cold snippet
17:28 - we immediately get a try and catch block
17:31 - the code that may throw an exception
17:34 - should be placed in the try block and if
17:37 - an exception is thrown then this cache
17:39 - block will be executed don't worry about
17:42 - this throw keyword here just remove it
17:44 - again I have covered the exception
17:46 - handling in more detail in my c-sharp
17:48 - advanced course but just to give you
17:50 - some tips here what we need to do is we
17:53 - simply put the message on the console
17:55 - saying an unexpected error occurred
18:01 - if you run this application
18:05 - occation doesn't crash and baguette a
18:07 - friendly error message this is better in
18:10 - terms of the user experience you don't
18:12 - want to write an application that
18:13 - crashes no one likes that okay I'm gonna
18:17 - move all this code into a separate
18:19 - method so studying void use points and I
18:27 - take everything here and pass it here
18:37 - okay now let's go and create a
18:39 - calculator class so public class
18:41 - calculator we want to create a method
18:47 - called add that takes a varying number
18:49 - of arguments so public int add here we
18:54 - add the params keyword params and then
18:57 - an integer array and the name of the
19:00 - parameter is gonna be numbers
19:03 - now inside this method numbers is an
19:06 - integer array so let's say we have an
19:08 - integer array and we want to add all the
19:10 - numbers in that array together and
19:12 - return the result first we create a
19:14 - variable called sum set it to zero and
19:17 - now we use a for each block to I trade
19:20 - over the numbers and simply add every
19:25 - number to the sum and finally we return
19:28 - sum
19:30 - when you get to the advanced level there
19:32 - is a better way to write this code and
19:34 - that involves using link or language
19:37 - integrated query it's one of the
19:39 - powerful features of c-sharp again and
19:40 - have covered it in my sushar Batman
19:42 - scores so for now let's just keep the
19:45 - code the way it is now we put this class
19:47 - in a separate file so alt and enter and
19:50 - enter
19:52 - now we back to the program let's create
19:55 - an instance of the calculator or
19:58 - calculator now we can call the add
20:03 - method like passing two numbers
20:07 - simply display the result on the console
20:10 - or we can pass three parameters or four
20:16 - or whatever it's up to you it can pass a
20:19 - varying number of parameters and that's
20:21 - the effect of the params keyword we can
20:24 - also call this method using an array
20:26 - notation so let me paste that again here
20:30 - instead I can pass a new integer array
20:33 - and put all numbers here but as you see
20:37 - it's easier to simply pass all the
20:40 - parameters without the need to create an
20:43 - integer array and that's why we use the
20:45 - parameter keyword okay let's put this
20:47 - code in a separate method and move to
20:50 - our third example so I'm going to create
20:52 - another static method here use params
20:56 - [Music]
20:57 - let's move everything here
21:03 - right the third example involves using
21:06 - that out modifier I told you do not use
21:09 - the alt modifier when declaring your
21:10 - methods but there are cases in the data
21:13 - framework where you may have to use the
21:15 - help modifier so let's see an example of
21:18 - that let's say we have a string and we
21:20 - would like to convert it to a number we
21:22 - can use the parse method of the integer
21:23 - class so type int dot parse and pass an
21:27 - invalid string here that cannot be
21:30 - converted to a number let's store the
21:33 - result in the number variable and run
21:36 - the application
21:39 - look application crashed we got
21:42 - exception
21:44 - a format exception input
21:46 - ring was not in a correct format okay
21:50 - now let's take a look at the tryparse
21:51 - method so ain't that tryparse look it
21:54 - has two overloads the first one takes a
21:58 - few parameters the second one takes only
22:00 - two parameters so I'm going to use the
22:01 - second one it's easier it takes a string
22:04 - and that is the string we would like to
22:05 - convert it takes an integer that is
22:09 - decorated with the out modifier which
22:11 - will have the result of conversion if
22:13 - successful and finally it returns a pool
22:16 - which indicates whether the conversion
22:19 - was successful or not so let's pass the
22:21 - string here ABC and here we need to pass
22:24 - an integer so int number
22:29 - and because it's declared with the alt
22:31 - modifier we need to use the health
22:33 - keyword here so number and it returns in
22:37 - pool so our result
22:40 - so if conversion is successful result
22:44 - will be true and you can check that and
22:48 - display the number on the console
22:51 - otherwise we can say conversion failed
22:57 - application
23:00 - so look we got a message called
23:02 - conversion failed now how is it
23:05 - different from the parse method
23:06 - the difference is try parse does not
23:09 - throw an exception and that's the reason
23:12 - it returns a boolean to indicate whether
23:15 - the conversion was successful or not
23:17 - the downside is that you have to declare
23:19 - this integer separately and then use the
23:22 - out modifier some people don't like the
23:25 - try parse method and they prefer to use
23:26 - parse but then you have to handle
23:30 - exception using a try-catch block as we
23:32 - learned a little bit earlier
23:36 - something like this so here we would say
23:38 - conversion failed these two pieces of
23:42 - code are kind of equivalent
23:45 - now this number is
23:48 - not somewhere else so let me change it
23:49 - to just numb there you go so here are
23:53 - two examples
23:55 - I hope you enjoyed this lecture and
23:57 - thank you for watching
24:01 - hi guys ma chere I hope you're having a
24:04 - fantastic day or night wherever you are
24:06 - in the world this tutorial you have been
24:08 - watching is actually part of one of my C
24:11 - sharp courses where you will learn
24:13 - everything about classes interfaces and
24:16 - object-oriented programming in case
24:18 - you're interested to enroll in the full
24:20 - course I've put the link for you in the
24:22 - video description and if not that's
24:24 - perfectly fine
24:25 - have a great day