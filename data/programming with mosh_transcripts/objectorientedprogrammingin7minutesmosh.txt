00:00 - [Music]
00:00 - a popular interview question concerns
00:04 - the four core concepts in
00:05 - object-oriented programming this
00:08 - concepts are encapsulation abstraction
00:11 - inheritance and polymorphism let's look
00:15 - at each of these concepts before
00:17 - object-oriented programming we had
00:19 - procedure of programming that divided a
00:21 - program into a set of functions so we
00:23 - have data stored in a bunch of variables
00:26 - and functions that operate on the data
00:28 - this style of programming is very simple
00:31 - and straightforward often it's what you
00:33 - learn as part of your first programming
00:36 - subject at a university but as your
00:38 - programs grow it will end up with a
00:40 - bunch of functions that are all over the
00:42 - place you might find yourself copying
00:44 - and pasting lines of code over and over
00:47 - you make a change to one function and
00:49 - then several other functions break
00:51 - that's what we call spaghetti code there
00:54 - is so much interdependence e between all
00:56 - these functions it becomes problematic
00:59 - object-oriented programming came to
01:01 - solve this problem in object-oriented
01:03 - programming we combine a group of
01:05 - related variables and functions into a
01:07 - unit we call that unit an object we
01:11 - refer to these variables as properties
01:13 - and the functions as methods here's an
01:16 - example think of a car a car is an
01:20 - object with properties such as make
01:22 - model and color and methods like start
01:25 - stop and move now you might say what
01:29 - marche
01:29 - we don't have cars in our programs give
01:31 - me a real programming example ok think
01:34 - of the local storage object in your
01:36 - browser's every browser has a local
01:39 - storage object that allows you to store
01:42 - data locally this local storage object
01:45 - has a property like length which returns
01:47 - the number of objects in the storage and
01:49 - metals like set item and remove item so
01:53 - in object-oriented programming we group
01:55 - related variables and functions that
01:57 - operate on them into objects and this is
02:00 - what we call encapsulation let me show
02:03 - you an example of this in action so here
02:06 - we have three variables base salary over
02:09 - time and rate below these we have a
02:12 - function
02:12 - to calculate the wage for an employee we
02:15 - refer to this kind of implementation as
02:17 - procedural so we have variables on one
02:20 - side and functions on the other side
02:22 - they're hard decoupled now let's take a
02:25 - look at the object-oriented way to solve
02:27 - this problem we can have an employee
02:29 - object with three properties a salary
02:32 - over time and rate and a method called
02:35 - get wage now why is this better well
02:38 - first of all look at the get wage
02:40 - function this function has no parameters
02:43 - in contrast in a procedural example our
02:47 - get wage function has three parameters
02:49 - the reason in this implementation we
02:52 - don't have any parameters is because all
02:54 - these parameters are actually modeled as
02:56 - properties of this object all these
03:00 - properties and the get wage function
03:02 - they are highly related so they are part
03:04 - of one unit so one of the symptoms of
03:06 - procedural code is functions with so
03:09 - many parameters when you write code in
03:12 - an object-oriented way your functions
03:14 - end up having fewer and fewer parameters
03:16 - as Uncle Bob says the best functions are
03:20 - those with no parameters the fewer the
03:22 - number of parameters the easier it is to
03:24 - use and maintain that function so that's
03:27 - encapsulation now let's look at
03:29 - abstraction think of a DVD player as an
03:32 - object this DVD player has a complex
03:35 - logic board on the inside and a few
03:38 - buttons on the outside that you interact
03:40 - with you simply press the play button
03:42 - and you don't care what happens on the
03:44 - inside all that complexity is hidden
03:47 - from you this is abstraction in practice
03:49 - we can use the same technique in our
03:52 - objects so we can hide some of the
03:54 - properties and methods from the outside
03:56 - and this gives us a couple of benefits
03:59 - first is that we'll make the interface
04:01 - of those objects simpler using an
04:04 - understanding an object with a few
04:06 - properties and methods is easier than an
04:08 - object with several properties and
04:11 - methods the second benefit is that it
04:14 - helps us reduce the impact of change
04:16 - let's imagine that tomorrow we change
04:19 - these inner or private methods
04:22 - these changes will leak to the outside
04:24 - because we don't have any code that
04:26 - touches these methods outside of their
04:28 - containing object we may delete a method
04:31 - or change its parameters but none of
04:33 - these changes will impact the rest of
04:35 - the applications code so with
04:38 - abstraction we reduce the impact of
04:40 - change now the third core concept in
04:43 - object-oriented programming inheritance
04:45 - inheritance is a mechanism that allows
04:48 - you to eliminate redundant code here's
04:51 - an example think of HTML elements like
04:54 - text boxes drop-down lists checkboxes
04:57 - and so on
04:58 - all these elements have a few things in
05:00 - common they should have properties like
05:02 - hidden and inner HTML and metals like
05:05 - click and focus instead of redefining
05:08 - all these properties and methods for
05:10 - every type of HTML element we can define
05:14 - them once in a generic object call it
05:16 - HTML element and have other objects
05:19 - inherit these properties and methods so
05:22 - inheritance helps us eliminate redundant
05:25 - code and finally polymorphism poly means
05:29 - many more means form so polymorphism
05:33 - means many forms in object-oriented
05:36 - programming polymorphism is a technique
05:38 - that allows you to get rid of long
05:41 - ethanol's
05:42 - or switch and case statements so back to
05:45 - our HTML elements example all these
05:48 - objects should have the ability to be
05:50 - rendered on a page but the way each
05:52 - element is rendered is different from
05:54 - the others if you want to render
05:56 - multiple HTML elements in a procedural
05:59 - way our code would probably look like
06:01 - this but with object orientation we can
06:04 - implement a render method in each of
06:07 - these objects and the render method will
06:09 - behave differently depending on the type
06:12 - of the object you're referencing so we
06:15 - can get rid of this nasty switch and
06:17 - case and use one line of code like this
06:19 - you will see that later in the course so
06:22 - here are the benefits of object oriented
06:25 - programming using encapsulation we group
06:27 - related variables and functions together
06:30 - and this way we can reduce complexity
06:33 - now we can reuse this object and do
06:36 - from parts of a program or in different
06:38 - programs with abstraction we hide the
06:41 - details and the complexity and show only
06:44 - the essentials this technique reduces
06:46 - complexity and also isolates the impact
06:50 - of changes in the code with inheritance
06:52 - we can eliminate redundant code and with
06:55 - polymorphism we can refactor ugly switch
06:58 - case statements
07:03 - well hello it's me mash again I wanted
07:06 - to say thank you very much for watching
07:08 - this tutorial to the end I hope you
07:10 - learned a lot please share and like this
07:12 - video to support me if you want to learn
07:14 - more about the object-oriented
07:15 - programming as I told you before I have
07:17 - a course called object-oriented
07:19 - programming in JavaScript if you want to
07:21 - learn more click on the link in the
07:23 - video description and enroll in the
07:24 - course if not that's perfectly fine make
07:27 - sure to subscribe to my channel because
07:29 - I upload new videos every week thank you
07:32 - and have a great day