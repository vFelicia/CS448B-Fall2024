00:01 - In this course, you're going to learn
everything you need to get started with
00:05 - Python just be aware that I have to
design this course for developers so if
00:09 - you have very little or no programming
experience check out my other Python
00:13 - course for beginners you can see the
link on the top right corner of this
00:17 - video python is the world's
fastest-growing and most popular
00:21 - programming language not just amongst
software developers but also amongst
00:26 - mathematicians data analysts scientists
accountants network engineers and even
00:33 - kids in fact it's the ideal programming
language to learn first but what makes
00:38 - Python so special here are six reasons
with Python you can solve complex
00:44 - problems in less time with fewer lines
of code than many other languages
00:49 - that's why huge companies like Google
Spotify Dropbox and Facebook have
00:55 - embraced this beautiful and powerful
language here is an example let's say we
01:00 - want to extract the first three
characters of the text hello world this
01:05 - is the code we would have to write in
c-sharp this is how we would do this in
01:10 - JavaScript and here's how we would do it
in Python see how clean and simple the
01:15 - language is and that's just the
beginning
01:18 - Python is a multi-purpose language and
you can use it for a wide range of jobs
01:22 - such as data analysis AI and machine
learning writing automation scripts
01:28 - building web mobile and desktop
applications as well as software testing
01:33 - or even hacking so if you want a
high-paying long lasting career in any
01:38 - of these areas especially AI and machine
learning Python is the language to put
01:44 - those opportunities at your fingertips
in fact according to indeed.com
01:49 - the average salary of a Python developer
in the US was over one hundred and
01:55 - fifteen thousand dollars in March 2018
and here are four more reasons that make
02:01 - Python the most desirable language
Python is a high-level language so you
02:05 - don't have to worry about complex tasks
such as memory management as you do in
02:10 - C++
it's cross platform which means we can
02:14 - build and run Python apps on Windows Mac
and Linux it has a huge community so
02:20 - whenever you get stuck there is someone
out there to help and it has a large
02:25 - ecosystem of libraries frameworks and
tools whatever you want to do it is
02:30 - likely that someone else has done it
before because python has been around
02:34 - for over 20 years there are two versions
of Python out there Python 2 which is
02:40 - the legacy version of Python and is
going to be supported until year 2020
02:45 - and Python 3 which is Python for the
future in this course you're gonna learn
02:50 - Python 3 hi my name is Muhammed Ani and
I'm going to be your instructor in this
02:55 - course I'm a software engineer with 18
years of experience and I've taught way
03:00 - over a million people how to code or how
to become top professional software
03:06 - engineers to learn more about me and my
courses head over to code with mass comm
03:10 - alright now let's get started
03:22 - alright now we're ready to download and
install Python the first thing I want
03:27 - you to do is to open up your browser and
head over to python org on this page
03:33 - under the downloads you can see the
latest version of python currently the
03:37 - latest version is 3.7 chances are in the
future when you're watching this video
03:42 - there is a newer version available don't
worry all the materials in this course
03:46 - will continue to apply with the future
versions of Python so go ahead and
03:51 - download Python
03:55 - then run it if you're on Windows we're
going to see this checkbox here add
03:59 - Python to path
this is very important make sure to take
04:03 - it otherwise you're not going to be able
to follow the course so now go ahead and
04:08 - install it
04:11 - now let's verify that we have installed
Python properly if you're on Windows
04:16 - here in this search bar type CMD which
is short for command prompt now here in
04:24 - command prompt type Python you can see
we have successfully installed Python
04:30 - version 3.7 now to exit press ctrl-z
and then enter
04:39 - if you're on Mac press command and space
this opens up the spotlight search so
04:46 - here type terminal
terminal and Mac is like command prompt
04:51 - on Windows now Mac and Linux
why default come with an older version
04:55 - of Python that is version 2 so if you
type Python you can see Python 2 here
05:01 - let's type what we want so press ctrl D
to exit and then run Python 3 and this
05:08 - verifies that we have successfully
installed Python 3.7 so this environment
05:14 - you see here is what we call Python
interpreter here we have this
05:17 - interactive shell that is really useful
for experimenting with some Python code
05:21 - so here we can write expressions like
2+2 or any kind of valid Python
05:26 - expressions this is similar to your
JavaScript console in the browser so if
05:31 - you want to quickly experiment with
something can simply do it here but to
05:35 - build real programs we need a code
editor and that's what I'm going to talk
05:38 - about next
05:45 - to build Python programs you have two
options you can use a code editor or an
05:51 - IDE which is short for integrated
development environment an IDE is
05:56 - basically a code editor with some fancy
features such as Auto completion
06:00 - debugging unit testing and so on for
both editors and IDs there are lots of
06:06 - options out there the most popular
editors are Visual Studio code or yes
06:11 - code atom and sublime you can use the
editor that you prefer the most popular
06:16 - IDE is PyCharm which is a JetBrains
product in this course I'm gonna use the
06:21 - S code because that's my favorite code
editor and later I'm gonna show you how
06:26 - to install an extension to convert the s
code into a powerful IDE for building
06:30 - Python programs so if you don't have V s
code head over to code dot visual studio
06:36 - comm and download the latest version of
V ESCO
06:46 - now it vs code open on the top go to the
file menu and then open somewhere on
06:54 - your desk create a new folder let's call
that folder
06:57 - hello world as usual now open this
folder
07:03 - now here on the left side we have the
Explorer panel where you will see all
07:07 - the files and folders in your project so
let's add a new file here and call it
07:13 - app dot pi now you may see an error on
the bottom right corner of the screen
07:19 - don't worry about that we're gonna fix
that later in this section so close this
07:24 - now let's write a simple Python program
once again I've designed this course for
07:29 - people with some programming experience
so you should know your variables
07:33 - functions conditional statements like if
else for loops while loops you should
07:38 - know the basics if you don't please look
at my other Python course for beginners
07:42 - you can find a link on the top right
corner of this screen so in Python we
07:47 - have a bunch of built-in functions one
of them is print which we can use to
07:52 - print something on the terminal let's
add a string here hello world but let's
07:58 - make it more fun by adding a happy
Persian cat here now let me show you
08:04 - something cool let's add another print
statement here we add a string like an
08:09 - asterisk in Python you can multiply a
string by a number like 10 and this will
08:16 - repeat that string 10 times take a look
so save the changes once again you may
08:22 - see this error popping up don't worry
about it we'll fix that later now we
08:26 - need to go back to the terminal to run
this program however we don't have to
08:31 - constantly switch back and forth between
vs code and the terminal because here we
08:36 - have an integrated terminal you can open
that by pressing ctrl and backtick that
08:42 - is the key before number one on your
keyboard it's right below the escape
08:47 - button so here's our integrated terminal
so if you're on Windows type Python if
08:53 - you're on Mac Python 3 and an app that
PI and here's the output of our program
08:59 - next I'm gonna show you how to convert
vs code into a powerful idea for
09:04 - building Python programs
09:13 - in this lecture I'm gonna show you how
to convert vs code to a powerful IDE by
09:19 - using an extension called Python with
this extension or plugin we get a number
09:24 - of features such as linting which
basically means analyzing our code for
09:29 - potential errors
you also get debugging which involves
09:33 - finding and fixing errors we'll look at
this later in the course you also get
09:38 - auto completion which basically helps us
write code faster so we don't have to
09:42 - type every character we get code
formatting which is all about making our
09:47 - code clean and readable just like how we
format our articles newspapers books to
09:53 - make them clean and readable we get unit
testing which involves writing a bunch
09:58 - of tests for our code we can run these
tests in an automated fashion to make
10:03 - sure our code is behaving correctly and
finally we get code snippets which are
10:08 - reusable code blocks and we can quickly
generate so we don't have to type them
10:13 - all by hand now don't worry about
memorizing any of these as we go through
10:17 - the course you're going to learn about
these features now here in vs code on
10:21 - the left side click this icon this opens
the extensions tab so these are the
10:27 - extensions that we can install in vs
code to bring in additional
10:31 - functionality here under the recommended
tab you can see the python extension if
10:36 - you don't see this simply type Python
here on the top
10:41 - and here's the extension to go ahead and
install this and then you'll have to
10:47 - reload vs code
10:51 - now here on the bottom right corner you
can see this message linter pilant is
10:56 - not in stock so as I told you before
linting is about finding potential
11:01 - errors in our code linter is a program
or a tool that analyzes our code and
11:07 - finds these potential problems now for
Python there are several enters a fter
11:11 - pilant is one of the most popular ones
that this Python extension uses by
11:17 - default so we need to go ahead and
install pylons as well now to do this
11:22 - first we need to change our Python
environment so if you look here on the
11:26 - bottom left corner you can see the
current python that is used in vs code
11:30 - that is python 2 point 6 point 9 on my
machine
11:34 - chances are you see a different version
here so click here and in this list make
11:40 - sure to select python 3 point 7 so these
changes our python environment to python
11:47 - 3 point 7 and then we can install pilant
by clicking this button ok pilant is
11:55 - installed beautiful in the next lecture
I will show you how linting works
12:08 - in this lecture I'm gonna show you
linting and action so let's start by
12:13 - writing some invalid code like this
print space with no parentheses and then
12:19 - hello work earlier I told you that print
is a built-in function and whenever you
12:25 - want to use or call a function you
should always use parentheses now to be
12:29 - more precise this is actually valid
Python 2 code but because we're using
12:33 - Python 3 here this is invalid code from
Python 3 point of view so now when I
12:40 - save the changes you can see this red
underline here let's hover our mouse
12:45 - over this underline you can see this
tooltip it's coming from Pyland and
12:50 - here's the error message missing
parenthesis in call to print did you
12:55 - mean print with parentheses that this is
the benefit of linting as you're writing
13:00 - code you can see potential problems in
your code you don't have to wait to run
13:05 - your program to see these errors so now
if we put parentheses here and save the
13:12 - changes you can see that red underline
is gone let's look at another error
13:18 - let's type two plus and then save the
changes earlier we run this code in
13:24 - Python interpreters interactive shell
there
13:27 - we got a syntax or grammar error so if
you hover your mouse here one more time
13:33 - you can see pylons is telling us that
this is invalid syntax or invalid
13:38 - grammar it's like an incomplete sentence
so this is linting in action now let me
13:44 - show you a couple useful shortcuts here
on the top look at the View menu here we
13:50 - have these problems menu look at the
shortcut on Mac is shift command and M
13:56 - on Windows is probably shift control M
so as you're working with vs code try to
14:02 - memorize these shortcuts because they
really help you write code faster now
14:07 - let's take a look at these problems
panel so this problems panel lists all
14:13 - the issues in your code in one place so
if you have an application with multiple
14:18 - files this is really useful because some
of those files may not currently be open
14:22 - so this linter Pyland
will analyze all your files and if it
14:27 - finds any issues it will list them here
in the problems panel now you can also
14:31 - put this on the right side of your
screen so let's put it here so as you
14:37 - write code these problems will appear
here now let's fix this issue so I'm
14:41 - gonna add three here save the changes
and you can see the problem disappear
14:46 - and one last thing before we finish this
lecture once again on the top let's go
14:52 - to the View menu the first item is
command palette this is a very important
14:57 - feature in vs code once again look at
the shortcut that is shift command and P
15:02 - on Mac or shift control P on Windows
15:07 - this command palette you can execute
various commands in vs Co if you type
15:12 - lint here you can see all commands
related to linting as you can see all
15:17 - these commands are prefixed with Python
because these commands come with a
15:23 - Python extension that we installed
earlier so these are additional features
15:26 - available to us in vs code the first
command here is select linter in this
15:33 - list you can see various linters
available for pilot so as you're reading
15:37 - tutorials or talking to other people you
will hear about linter such as flake ate
15:42 - my pie pep 8 and so on different
developers prefer different linters I
15:48 - personally prefer pilant that is the
most popular one and that's the default
15:53 - linter set and the Python extension of
vs code if you're adventurous we can try
15:59 - using other linters on your own the
difference between these linters is in
16:03 - how they find and report errors some
error messages are more meaningful or
16:08 - more friendly the others are more
ambiguous so that's all about linting in
16:14 - the next lecture we'll talk about
formatting code
16:24 - in Python community we have a bunch of
documents called Python enhancement
16:30 - proposals or peps here on Google if you
search for Python peps
16:35 - you can see the list of all these paps
under python.org slash dev slash paps
16:42 - let's have a quick look here
so here are the paps you can see each
16:48 - PAP has a number and a title the one
that is very popular amongst Python
16:54 - developers is pep 8 which is a style
guide for Python code a style guide is
17:00 - basically a document that defines a
bunch of rules for formatting and
17:04 - styling our code if you follow these
conventions the code that you write will
17:08 - end up being consistent with other
people's code now if you have time you
17:13 - can go ahead and read this PAP 8
documentation but if not don't worry
17:17 - because throughout this course I'm gonna
explain the key things in pep 8 in this
17:22 - lecture I'm gonna show you a tool that
helps you automatically format your code
17:26 - according to pap 8
so back in vs code let's write some
17:31 - Python code x equals one here I'm
declaring a variable and setting it to
17:37 - one if you're not familiar with
variables don't worry
17:40 - in the next section you're going to
learn about that so according to peb 8
17:44 - this code is considered ugly because by
convention we should add a space around
17:50 - this equal sign or the assignment
operator now since you're starting out
17:55 - with Python you probably don't know
these rules so let me show you a tool
17:58 - that helps you automatically format your
code let's revert this back to its
18:03 - original state now we need to go back to
the command palette remember so it's
18:08 - right here under view and the shortcut
is shift command and P here if you
18:15 - search for format you can see this
command format document the first time
18:20 - you execute this command you're going to
see this message here formatter Auto
18:25 - kept 8 is not installed so there are a
bunch of tools for formatting Python
18:30 - code the most popular one is Auto kept 8
and this is the tool that this Python
18:35 - extension we installed uses to format
our code so let's go ahead and install
18:40 - this good now one more time let's open
up the command palette and execute
18:48 - format document see is tool
automatically formats our code beautiful
18:54 - let's take a look at another example I'm
going to declare another variable Y and
18:59 - set it to 2 and a variable with a long
name like unit underlined price I'm set
19:05 - this to 3 now some developers have this
habit of formatting their variable
19:11 - declarations like this so they put all
these equal signs in the same column
19:17 - according to pep 8 this is considered
ugly so once again let's format our code
19:24 - that is better beautiful now let me show
you a trick opening up this command
19:30 - palette and searching for format
document every time is a little bit
19:34 - time-consuming so I want to show you how
to have your file automatically
19:38 - formatted as soon as you save the
changes
19:41 - on the top let's go to the code menu
preferences and settings here in the
19:49 - search box search for format on save
so we have this option editor format on
19:57 - save
take this now back to apt at PI I'm
20:02 - gonna change the formatting of these
lines make them really ugly now as soon
20:07 - as I save the changes you can see my
code is reformatted beautiful
20:20 - so you have learned that in order to run
this Python program we'll have to open
20:25 - up the terminal window and run Python on
windows or Python 3 on Mac and an app
20:31 - that pi this is a little bit tedious so
let me show you a shortcut once again
20:37 - let's go to the extensions panel here
search for code runner
20:44 - there are multiple code runners out
there the one that I'm talking about is
20:48 - this one with the yellow icon so go
ahead and install this and then reload
20:54 - vs code now instead of opening up the
terminal and manually typing python
21:02 - after pi all you have to do is to press
ctrl alt and in
21:08 - you can see the output here beautiful
just be aware that if you make any
21:13 - changes you'll have to save the changes
before using this shortcut otherwise
21:17 - you're going to see the old result now
there is a tiny problem here so you can
21:22 - see this is the command that is executed
to run this Python program so by default
21:28 - this command is using Python
- U and here is the name of our file if
21:33 - you're on Windows that's perfectly fine
but if you're on Mac you know that
21:37 - Python refers to Python - here we want
to change this to Python 3 this is very
21:43 - easy once again on the top under the
code menu let's go to preferences
21:48 - settings and then here
under this dot-dot-dot go to open
21:55 - settings that JSON
now here in the search bar type code -
22:02 - runner dot executors map so these are
the default settings used by this code
22:09 - runner extension you can see this
extension support executing code in a
22:14 - lot of languages like JavaScript Java
and so on now if you scroll down here
22:20 - you can see Python and in front of that
you can see the command that is used to
22:24 - execute Python code we need to change
this however we cannot change the
22:28 - default settings we should change the
user settings so on the right side after
22:34 - the last setting type a comma and then
in quotes type code - runner dot
22:40 - executors map and then press enter this
will automatically copy all the settings
22:47 - on the left side to the right side now
we can easily change one of this so
22:53 - here's Python let's change the command
to Python 3 you only have to do this if
23:00 - you're on Mac and by the way sorry if we
have mentioned Windows and Mac a few
23:05 - times throughout this course that's
pretty much it we are not going to
23:08 - differentiate between Windows and Mac in
the future so save the changes and we're
23:12 - done
23:19 - when we talk about Python we mean two
separate things that are closely related
23:23 - python language and a particular
implementation python as a language is
23:28 - just a specification that defines a set
of rules and grammar for writing Python
23:34 - code a Python implementation is
basically a program that understands
23:39 - those rules and can execute Python code
earlier in the course we downloaded
23:44 - Python from python.org this is the
default implementation of Python called
23:49 - C Python it's a program written in C
that's why it's called C Python so here
23:55 - in terminal when we run Python we get
this C Python this is the default
24:00 - implementation of Python there are a few
other implementations out there such as
24:04 - JSON written in Java
ironpython written in c-sharp and pi pi
24:10 - written in a subset of Python itself as
new features are added to the Python
24:15 - language they are first supported by C
Python because that's the default
24:19 - implementation and then they will
gradually come to the other
24:23 - implementations in theory if we give
some Python code to any of these
24:28 - implementations we should get the same
result but in practice that's not always
24:33 - the case certain features may be
available in one implementation but not
24:37 - another or they may just behave a little
bit differently in a particular
24:41 - implementation now you might ask what is
the point of this why do we have several
24:46 - implementations of Python wouldn't see
Python be enough well it's for the same
24:52 - reason that we have multiple operating
systems or multiple browsers or multiple
24:56 - programming languages after all these
years B programmers haven't agreed on a
25:01 - single programming language and that's
the same story with Python
25:05 - implementations however there is one
technical reason behind these
25:10 - implementations that you should be aware
of since JSON is implemented in Java it
25:15 - allows you to reuse some existing Java
code in a Python program so if you're a
25:21 - Java developer and you want to import
some Java code into a Python program you
25:26 - should use JSON instead of C Python
similarly I
25:30 - Python is written in c-sharp so if
you're a c-sharp developer and want to
25:34 - bring some c-sharp code into a Python
program you will have to use
25:38 - ironpython next we'll look at how
exactly C Python execute Python code
25:50 - the programming languages we use like C
C sharp Java Python these are all simple
25:57 - text-based languages that we humans
understand computers don't understand
26:02 - them they only understand machine code
so if we have some code written in C we
26:07 - should convert it to machine code and
that's the job of a C compiler so a C
26:12 - compiler is a program that knows how to
convert or compile C code into machine
26:17 - code
however this machine code is specific to
26:21 - the type of CPU of a computer so if we
compile a C program on a Windows machine
26:26 - we can't execute it on a Mac because
Windows and Mac have different machine
26:31 - code just like how people from different
countries speak different languages Java
26:36 - came to solve this problem Java compiler
doesn't compile Java code into machine
26:42 - code instead it compiles it into a
portable language called Java bytecode
26:47 - which is not specific to a hardware
platform like Windows or Mac now we
26:53 - still need to convert Java bytecode to
machine code so Java also comes with a
26:58 - program called Java Virtual Machine or
JVM for doing this when we run a Java
27:04 - program JVM kicks in it loads our Java
bytecode and then at runtime it will
27:10 - convert each instruction to machine code
with this model we can run Java bytecode
27:15 - on any platforms that have a JVM we have
JVM implementations for Windows Mac and
27:21 - so on so the JVM implementation on
Windows knows how to convert Java byte
27:27 - code into machine code that a Windows
machine can understand c-sharp and
27:32 - Python have also taken the same route
so there are platform-independent when
27:37 - we run a Python program using C Python
first it will compile our Python code
27:42 - into Python bytecode then it will pass
that bytecode to Python virtual machine
27:48 - which will in turn convert it into
machine code and execute it this is how
27:52 - C Python works in the last lecture we
talked about various Python
27:57 - implementation I told you that if you
want to reuse some java code in a
28:01 - Python program you should use Java now
let's see how JSON makes this possible
28:06 - when you use JSON to run a Python
program instead of compiling your Python
28:12 - code into Python bytecode it will
compile it to Java code so we can take
28:17 - this Java bytecode
and run it using java virtual machine
28:20 - and that's why you can import some java
code into a Python program when using
28:25 - jython
because the end result is Java bytecode
28:28 - which will eventually be executed by
Java Virtual Machine
28:36 - so that brings us to the end of the
first section if you have enjoyed this
28:40 - course so far please like this video and
share it with others in the next section
28:44 - you're going to learn Python Basics in
only one hour I hope you enjoyed this
28:49 - section and thank you for watching
28:59 - well hello Marsh here thank you for
watching my Python tutorial I wanted to
29:05 - let you know that this tutorial is the
first two hours of my complete Python
29:09 - course where you will learn how to use
Python in real-world scenarios such as
29:13 - data analysis and visualization
automating repetitive boring tasks that
29:18 - involve working with files and folders
spreadsheets PDFs data compression
29:23 - sending emails web crawling consuming
API is like Yelp to get information
29:28 - about businesses and much much more this
course comes with a 30 day no questions
29:34 - asked money back guarantee and a
certificate of completion if you're
29:38 - interested click the link below this
video to access the course
29:48 - all right let's start this section by a
discussion of variables and the built-in
29:53 - primitive types in Python including
integers floats boolean's and strings so
30:01 - here I'm gonna define a few variables
starting with the first one
30:04 - students count note that here all the
letters are lowercase and we're using an
30:10 - underscore to separate multiple words
this is the naming convention we use in
30:15 - Python so here we said students count to
let's say a thousand this is an example
30:21 - of an integer let's look at an example
of a float
30:24 - so we said rating two for let's say 99
here's another variable is published we
30:32 - set this to true or false note that the
first letter is uppercase and finally
30:39 - let's take a look at an example of a
string so we set course name to Python
30:45 - now in Python you can use either double
quotes or single quotes or you can use
30:51 - triple quotes if your string is multiple
lines for example here I can put triple
30:58 - quotes and in between them I can add a
string that has multiple lights okay now
31:07 - one interesting feature in Python is
that you can initialize multiple
31:10 - variables on the same line for example
let's say we have coordinates like x and
31:16 - y we can initialize these two on the
same line
31:20 - so we can set X comma Y we set it to 1
comma 2 this line is exactly equivalent
31:27 - to these two lines so it's a shortcut
and finally just like almost every
31:34 - programming language we can set multiple
variables to the same value for example
31:38 - we can set x and y to 1 so these are the
basics of variables next I'll talk about
31:45 - the dynamic nature of Python
31:55 - in terms of typing programming languages
fall into two categories
31:59 - static languages like C++ C sharp and
Java and dynamic languages like
32:06 - JavaScript Ruby and Python in static
languages when declaring a variable we
32:12 - need to specify its type for example in
c-sharp when declaring this variable we
32:17 - need to set its type to an integer so
with this the type of this variable will
32:22 - always be an integer when we compile
this program or compiler knows that
32:27 - students count is an integer so if you
accidentally try to set it to let's say
32:32 - a boolean later on the compiler will
complain this is how static languages
32:38 - work in dynamic languages like
JavaScript and Python we don't have this
32:43 - behavior so we don't set a type when
defining a variable we just define a
32:49 - variable by setting it to a value so in
dynamic languages the type of a variable
32:54 - is determined at runtime
now here if you hover your mouse over
32:59 - students count you can see this is an
integer so when working on a large
33:04 - complex program if you want to know the
type of a variable you can simply hover
33:08 - your mouse over it we also have this
built-in function called type we can
33:14 - pass a variable or an object to it like
students count and then print this on
33:21 - the console so let's run this program
you can see the type of students count
33:27 - is a class of integer what is this
Python is an object-oriented language so
33:33 - here we have the concept of classes if
you're not familiar with classes don't
33:38 - worry I'm gonna talk about them in
detail later in the course all I want
33:42 - you to know now is that in Python we
have a class called
33:46 - int that represents integers so all
integers are instances of this class
33:52 - let's take a look at a few more examples
so here in this interactive shell let's
33:59 - look at the type of a float once again
it's a class called float let's look at
34:05 - type of a boolean this is also a class
called bool and finally let's look at
34:12 - type I'm a string that's a class called
stir so here's the take away Python is a
34:19 - dynamic language which means the type of
variables are determined at run time as
34:25 - opposed to compile time
34:33 - sorry the last lecture you learned that
Python is a dynamic language which means
34:38 - the type of variables is determined at
run time so here we have this variable
34:43 - age set to an integer now we can reset
this to a string this is perfectly valid
34:50 - Python code so if we print a age and run
this program you can see our program is
34:56 - running successfully now if you come to
python from a static language like C
35:01 - sharp or Java you probably don't like
this but the good news is that in Python
35:06 - 3.6 we have a new feature called type
annotation or type hinting so we can
35:12 - annotate our variables with their type
so we had a colon here and then int for
35:19 - integer now when I save the changes
everything is still valid if I run the
35:24 - program there are no errors because
python is a dynamic language however
35:29 - there is a new lantern called my PI that
checks for these type annotations so if
35:35 - you define a variable as an integer and
then set it to a string my pie is gonna
35:41 - complain let me show you so open up the
command palette and type select linter
35:48 - correctly you can see we are using pi
lint in this list select my pi now the
35:55 - first time you do this you're gonna see
a message on the bottom right corner of
35:58 - the screen telling you that my pine is
not installed so go ahead and install
36:03 - that now on line two you can see a red
line under H let's have a look here so
36:10 - my pi is giving us an error incompatible
types in assignment so this is all about
36:16 - type annotation or type in ting
36:25 - so here we have this variable X set to 1
when we run this program Python
36:31 - interpreter will allocate some memory to
store this number 1 so our X variable is
36:37 - purely a label for that memory location
let me show you so here we have this
36:41 - built-in function called ID we can pass
the variable here like X and this will
36:47 - return the address of the memory
location that X references so now let's
36:53 - print this on the console there you go
so this is the address of the memory
37:01 - location where we have stored number one
now one thing you need to know about the
37:06 - built-in primitive types that I've
talked about so far like numbers strings
37:10 - and boolean is that all these types are
immutable which means their value cannot
37:16 - change so here if we try to update X
python interpreter is going to allocate
37:22 - some new memory to store the updated
value in other words what we have at
37:27 - this original memory location will not
be affected because integers are
37:32 - immutable let me show you this so here
after we print the idea of X I'm gonna
37:39 - increment X and print its ID one more
time see what we get we get two
37:47 - different addresses so our X variable or
X label was originally referencing this
37:53 - memory location at this memory location
we have the number one because integers
37:59 - are immutable we cannot change the value
at this memory location so on line four
38:04 - when we update X python interpreter will
allocate some new memory at this
38:11 - location and then X will reference this
new memory location now because we don't
38:17 - have a reference to the original memory
at some point Python garbage collector
38:22 - will automatically release this memory
so this is how immutable types work now
38:28 - let's see what would happen
if X was set to a mutable type here is
38:33 - an example so in Python we have
a concept called lists for storing a
38:39 - list of objects so here we use square
brackets to indicate that this is a list
38:44 - we can add multiple objects here now on
line four let's add a new number to this
38:51 - list so we call X dot append and pass
four here now let's run the program one
38:58 - more time so as we can see the address
is not changed because lists are mutable
39:04 - so whenever we change them by adding new
objects to them or removing existing
39:09 - ones the changes are applied at the same
memory location so this is the
39:14 - difference between mutable and immutable
types
39:25 - over the next few lectures we're going
to take a closer look at strings so here
39:30 - we have a variable of type string to get
the number of characters in this string
39:35 - we use the built-in Len function now
look at the intellisense this function
39:42 - returns the number of items in a
container so it's not specific to
39:46 - strings it's a generic reusable function
we can pass the a string here and this
39:52 - will return the number of characters in
the string or we can pass a list and
39:56 - this will return the number of items in
the list so here let's pass this course
40:02 - variable and print the length so we have
18 characters beautiful similar to many
40:11 - other languages we can access individual
characters using square bracket notation
40:16 - so to get the first character we use
square brackets 0 because the index of
40:22 - the first character here is 0 now let's
print this run the program so we get P
40:31 - now one interesting feature in Python
that I personally haven't seen in other
40:36 - programming languages is a negative
index so here let's duplicate this line
40:42 - and pass negative 1 what do you think
we're gonna get well if 0 represents the
40:49 - first character negative 1 takes us back
to the end of the string so it returns
40:55 - the first character from the end of the
string let's run this program so we get
41:02 - G similarly we could pass negative 2 and
this will return the second character
41:09 - from the end very powerful now using a
similar syntax we can also slice strings
41:15 - so let's duplicate this line to slice
the string we need to pass two indexes
41:21 - the start index colon the end index so
this will return all the characters
41:28 - starting from the start index all the
way up to the end index but it doesn't
41:34 - include the character
at the end index in this example it's
41:39 - going to return zero one and two these
three characters but not the character
41:44 - at index 3 ok
so let's run the program we get the
41:50 - first three characters beautiful now we
can exclude either or both these indexes
41:56 - and Python will assume default values so
let's duplicate this line and exclude
42:02 - the start index what do you think python
is going to put here it's common sense
42:07 - it's going to pass zero as the start
index so let's run the program you can
42:12 - see we get the same result so these last
two expressions are exactly the same now
42:17 - what if we exclude the end index what do
you think Python is going to put here
42:23 - it's going to pass the length of the
string so let's run the program you can
42:28 - see this returns the entire string and
finally if we exclude both the start and
42:36 - end index again we get the same result
so let's verify this beautiful now one
42:43 - thing you need to take into account here
is that whenever we access an individual
42:48 - character or a range of characters
Python interpreter is going to allocate
42:53 - some new memory and copied those
characters into that new memory location
42:58 - because as I told you before strings are
immutable so the value that we have at
43:04 - the original memory location that is
Python programming will not be affected
43:09 - we can verify this
so let's print ID of course and then
43:16 - print ID of course of zero and then run
the program you can see two different
43:22 - addresses here that is because strings
and other primitive types like numbers
43:28 - and billions are immutable in Python
43:38 - here we have this message variable set
to this string Python programming now
43:44 - let's say we want to display a double
quote right here the problem we have is
43:49 - that this second double quote indicates
the end of the string so python
43:54 - interpreter will not be able to run this
code now there are two ways to solve
43:58 - this problem one way is to replace these
double quotes at the beginning and end
44:04 - of our string with single quotes so
single code here and one more here if we
44:10 - run this program we see this double code
just before programming beautiful but
44:15 - let's say for whatever reason you want
to use double quotes here perhaps to be
44:20 - consistent with the rest of our code so
how can we display another double quote
44:25 - in the middle of this string well in
Python we have a concept that is
44:29 - borrowed from the C language that is
called escape character so in Python
44:35 - strings backslash has a special meaning
and we refer to it as an escape
44:40 - character so Python interpreter sees
this backslash as a special character it
44:46 - has a special meaning and depending on
the character that comes after that it
44:51 - will interpret it differently let's see
this in action so now when we run this
44:55 - program we can see our double code here
but the backslash character is not there
45:00 - because backslash is an escape character
so in this case it's used to escape the
45:06 - double code now we refer to these two
characters as an escape sequence in
45:12 - Python we have a few other escape
sequences that you should be aware of
45:17 - let me show you
so this hash sign is an indication of a
45:21 - comment line so it's not executed you
have seen backslash double quote we also
45:27 - have backslash single code for
displaying a single quote in our string
45:32 - we also have double backslashes so if
you really want to have a backslash in
45:38 - your string you should prefix it with
another backslash here is an example
45:45 - let's run this program
and here's our backslash and finally the
45:51 - last escape sequence is backslash n
which is short for new light so here if
45:58 - I add a backslash N and run this program
you can see programming is on the second
46:04 - line now this is OK for a simple string
like Python programming here but if
46:09 - you're trying to format a complex string
into multiple lines it's better to use
46:14 - triple quotes otherwise you'll end up
with a lot of pack /n sequences and that
46:20 - looks pretty ugly so here we can use
triple quotes and simply add Python
46:27 - newline programming so when we run this
program we get exactly the same result
46:33 - as before but not quite exactly because
here we have one new line on the top
46:39 - that is because I put Python on a new
line if I put Python right in front of
46:44 - double quotes run the program again that
new line disappears
46:49 - so here are the escape sequences in
Python
47:00 - here we have two variables first and
last let's say we want to print my full
47:05 - name on the console so we can define
another variable full set it to first
47:12 - then concatenate it with a space and one
more time concatenate it with last now
47:20 - when we print full we get my full name
on the console beautiful now this
47:27 - approach are using concatenation to
build a string is okay but there is a
47:33 - better and newer approach we can use
formatted strings so here we can set
47:38 - full to this string and prefix it with
an F which can be lowercase or uppercase
47:45 - it's formatted string doesn't have a
constant value like these two strings
47:51 - here it's actually an expression that
will be evaluated at runtime so here we
47:57 - want to add our first name we use curly
braces to print the value of the first
48:04 - variable after that we add a space and
then we add curly braces one more time
48:10 - to print the last name so at runtime
this expression will be evaluated what
48:17 - we have in between curly braces will be
replaced at runtime now let's run this
48:23 - program one more time we get the exact
same result just be aware that you can
48:29 - put any valid expressions in between
curly braces so earlier you learned
48:35 - about the built-in Len function we can
call Len here to get the length of this
48:42 - string let's run this program one more
time so we get four we can also replace
48:48 - last with an expression like there's two
plus two let's run this program we get
48:53 - four and four so when using formatted
strings you can put any valid
48:59 - expressions in between curly braces
49:10 - and it's lecture we're going to explore
a few useful methods of string objects
49:15 - in Python so this course variable we
have here is a string object which means
49:20 - we can use the dot notation to find all
the methods or functions applicable on
49:27 - strings here we have a large list of
functions or more accurately methods in
49:32 - this lecture I'm gonna quickly show you
a few of them you can learn about the
49:36 - rest on your own so here let's say we
want to convert this course to uppercase
49:40 - we can use the upper method and print
the result and we'll get this uppercase
49:48 - string here similar to that we have
lower to convert it to lowercase we also
49:55 - have title which will convert this to
title case which means the first
50:00 - character of every word will be
uppercase and this is useful for blog
50:05 - posts product titles courses and so on
so let's run this one more time we get
50:12 - this string here another useful method
is strip for trimming whitespace so if
50:19 - we have a couple of extra whitespace at
the beginning or end of this string we
50:24 - can get rid of them using the strip
method and this is useful when you get
50:28 - input from the user
so a print course that strip save the
50:35 - changes note that in the previous
examples you can see those extra white
50:41 - spaces at the beginning but when we call
the strip method those spaces are gone
50:45 - we also have left and right strip for
removing the whitespace from the
50:51 - beginning or end of this string
now if you want to find the index of a
50:57 - character or a substring in your string
you can use the find method so let's
51:03 - print course that find let's search for
pro run the program so the index of pro
51:12 - here is 9 now if I change this to
lowercase P we'll get negative 1 because
51:21 - string comparisons are case sensitive
and we don't have these exact three
51:26 - characters in our course variable now if
you want to replace a character or a
51:32 - sequence of characters you can use the
replace method so let's print course
51:37 - that replace let's replace all capital
pees ways a hyphen and with this we'll
51:45 - get this weird string here and finally
to check for the existence of a
51:51 - character or a sequence of characters in
your string you can use the in operator
51:56 - so let's see if we have programming in
this course object let's run the program
52:06 - and we get false because I realize that
I missed the letter R here so let's run
52:13 - the program one more time this time we
get true now we also have the not
52:19 - operator so you can prefix this with not
and this time we'll get false
52:32 - so we have covered strings now let's
look at numbers we have a few different
52:37 - ways to represent numbers in Python we
can use decimal numbers that you have
52:42 - seen before we can also represent them
in binary format so we prefix the number
52:49 - with 0 B as in short for binary and then
we'll add individual bits for example 0
52:55 - B 10 which is the number 2 in binary
system now let's print X we'll get 2 if
53:04 - you want to print the binary
representation of this number you can
53:08 - use the built in bin function so bin
takes any numbers and returns its binary
53:16 - representation there you go we can also
represent numbers in hexadecimal format
53:22 - so we said X - 0 X as the prefix and
then we'll add our hexadecimal number
53:29 - let's print X so we get 300 which is in
the decimal system if you want to print
53:38 - this in the hexadecimal format you would
use the built-in hex function let's run
53:45 - this program one more time and now we
get 0 X 12 C beautiful in Python we also
53:52 - have support for complex numbers so
complex numbers in maths
53:57 - take the form a plus B I if you're not
familiar with this don't worry this is a
54:03 - concept used in mathematics so if you
want to use Python to build web
54:08 - applications you're never gonna use this
but very briefly let me show you how you
54:12 - can represent complex numbers in Python
so here we can set X - 1 + 2 J so J in
54:20 - Python is like I or imaginary number in
math you can use either lowercase or
54:26 - uppercase J whatever you prefer now
let's print X we'll get this complex
54:34 - number here
you
54:42 - in Python we have all the arithmetic
operators that you have probably seen
54:48 - before for example we can set X to 10
plus 3 we have addition I have
54:56 - subtraction multiplication division but
we actually have two kinds of division
55:02 - operators let's look at the first one so
print X as you can see the result of
55:10 - this division operator is a
floating-point number if you want an
55:13 - integer you would use a different
division operator that is double slash
55:19 - let's run this program so we get 3 we
also have modulus so that is the
55:26 - remainder of a division and finally we
have exponent that is left ^ right so
55:35 - here 10 to the power of 3 'is a thousand
now for all these operators here we have
55:41 - an Augmented assignment operator what do
we mean by that
55:45 - let's say we want to add 1 to X we can
write a statement like this so x equals
55:52 - x plus 1 or we can use an Augmented
assignment operator so X plus equals 1
56:01 - these two statements are exactly the
same and what we have on the left side
56:06 - of the assignment operator can be any of
these arithmetic operators here and one
56:11 - last thing before we finish this lecture
in Python unlike languages like
56:16 - JavaScript or C sharp we don't have the
increment or decrement operators so we
56:21 - don't have X plus plus or X minus minus
56:32 - in this lecture I'm gonna show you a few
useful functions for working with
56:37 - numbers so let's set X to 3.14 or
actually let's rename this to PI note
56:46 - that here I have used uppercase letters
to indicate that this is a constant in
56:51 - Python unlike languages like C sharp and
JavaScript we don't have constants we
56:56 - only have variables so if we define this
there is nothing that stops us from
57:00 - changing the value of this variable so
by convention we use uppercase letters
57:07 - to tell other developers in the team
that this pi is a constant and it
57:11 - shouldn't be modified now let me show
you a few useful built-in functions to
57:16 - work with numbers if you want to round
the number you can use the round
57:21 - function so let's pass PI here and print
it so we get 3 we have another useful
57:30 - function ABS short for absolute and it
returns the absolute value of a number
57:35 - so if you had a minus sign here when we
print this will get 3.14 here you go
57:46 - now to see the complete list of built-in
functions in Python here in Google
57:51 - search for Python 3 make sure to add the
version number and then add built-in
57:57 - functions on this page you can see all
the built-in functions in Python now in
58:05 - this list we only have a few functions
to work with numbers if you want to
58:09 - perform complex mathematical
computations we have a separate module
58:14 - for that that's the math module so back
to our code on the top first we need to
58:20 - import the math module now mass is an
object with a bunch of useful methods
58:26 - for performing mathematical computations
so here we can use the dot notation to
58:31 - see all these methods available to us
for example you can use mass dot floor
58:38 - to get the floor of pi and this returns
-4 because here we are using a negative
58:48 - sign
if you want to see the complete list of
58:51 - functions or methods in the math module
search for Python 3 math module here on
58:59 - this page you can see all the functions
and their description
59:12 - quite often when we receive input from
the user that input comes as a string
59:17 - and there are times that we need to
convert that string to a different type
59:21 - here is an example we have this built-in
function input we can add a label here
59:27 - like X this returns the users input as a
string so we store it in this variable
59:33 - now let's imagine why should be X plus 1
now when we run this code we're gonna
59:39 - get an error let me show you don't run
this using the code runner
59:43 - because code runner runs this code in
the output window which is read-only so
59:47 - you won't be able to enter a value so
open up the terminal by pressing ctrl +
59:52 - bhakti and run Python different windows
or Python 3 if you're on Mac I've got PI
59:59 - let's add one here look we get this
error type error this is happening
60:05 - because Python doesn't know how to
interpret this expression because here
60:11 - we have two different outcomes if X is
the string one one outcome is to convert
60:17 - this other operand here to a string and
the result would be 11 the other outcome
60:25 - is to convert X to a number so we'll
have 1 plus 1 and the outcome will be 2
60:31 - so Python doesn't know how to do type
conversion here and that's the reason we
60:36 - say Python is a strongly typed language
because it doesn't do any implicit type
60:42 - conversion on your behalf you have to
explicitly tell Python how you want your
60:48 - objects to be converted to the right
type Java Script on the other hand is a
60:52 - weakly typed language so it does perform
implicit type conversion for you now to
60:59 - solve this problem we need to use one of
the built-in type conversion functions
61:03 - we have int float pull and stir or
string now in this case we don't need to
61:14 - use string here because we already have
a string and there is no reason to
61:18 - convert a string to another but there
are times that you may want to convert
61:22 - an object to your string so just be
aware of this function now let's take a
61:27 - look at what this functions return
61:33 - and let's delayed line two because this
is the bad boy here save the changes
61:40 - back in the terminal let's run the
application one more time and enter one
61:45 - so here's what we get number one as an
integer one point zero which is a float
61:51 - and true so int and float are pretty
self-explanatory but bull requires a
61:59 - little bit more explanation because in
Python similar to JavaScript we have
62:03 - this concept of truthy and falsy values
so here are the list of false e values
62:11 - empty strings number zero empty lists
and none which is an object that
62:20 - represents the absence of a value this
is exactly like null in C based
62:26 - languages so if we have any of these
values and we try to convert them to a
62:32 - boolean using the bull function the
result will be boolean false anything
62:37 - else would be true let's take a look at
a few examples so here in the
62:43 - interactive shell I told you that number
zero is considered false II so when we
62:49 - convert it to bool we'll get false any
other numbers are true or true the-- so
62:55 - here's an example
bula one is true if we add a negative
63:00 - number we also get true ask for strings
an empty string is false e so we get
63:07 - false any other strings is truth e so
even if I had the string falls here the
63:15 - result is true because this is a non
empty string
63:20 - so here are the faulty values in Python
whenever these values are used in a
63:25 - boolean context they will be equivalent
to boolean false
63:36 - alright now let's talk about conditional
statements so I'm going to start by
63:41 - defining a variable H and sending it to
22 now let's see if H is greater than or
63:49 - equal to 18 so in Python we have these
comparison operators just like the other
63:55 - languages that you have worked with we
also have equal and not equal now let's
64:02 - rewrite this back to greater than or
equal to 18 now here's an interesting
64:07 - fact about Python in Python we don't
have braces which means we're not gonna
64:13 - spend two decades fighting over where to
put this braces shall we put them here
64:19 - or here no more nonsense like that it's
over that's it no more so instead we put
64:26 - a colon at the end of this line now note
that when I press ENTER this cursor is
64:33 - automatically indent so we use
indentation to specify a code block here
64:39 - we can add a print statement adult we
can have another print statement this is
64:45 - also part of this block now to terminate
this block we simply remove the
64:50 - indentation now here we can have zero or
more elseif blocks in python we call
64:56 - them Elif here we add another condition
like if H is greater than or equal to 13
65:04 - once again we have indentation let's
print teenager and finally optionally we
65:14 - can have an else block once again colon
print with one or more statements in
65:21 - this case we want to print child finally
we'll have let's say all done now note
65:29 - that currently we have two spaces for
indentation but when I save the changes
65:35 - auto-pay page kicks in and reformat our
code according to pay paid according to
65:41 - pap 8 we should use four spaces for
indentation take a look
65:45 - save the changes now we have four spaces
you can also use tabs but only if you're
65:51 - maintaining a code that is written with
that style if you're starting a new
65:55 - project prefer four spaces as the
standard but you cannot mix tabs and
66:02 - spaces in Python three that's not
allowed
66:05 - now let me show you a shortcut so here
in a new file let's just type if look at
66:12 - these three items with this square icon
these are code snippets so here on
66:18 - if-else I press ENTER and this
automatically generates this snippet
66:22 - this came with the Python extension that
we installed at the beginning of the
66:26 - course so here you can change the
condition to whatever X is greater than
66:30 - one
what is this past keyword this is
66:34 - basically a statement that doesn't do
anything it's here purely to fill this
66:39 - if block because we cannot have an empty
if block like this I say have the
66:44 - changes look we have this red underlined
here that is not valid Python code so if
66:50 - you want to have just an empty block you
use the pass keyword
67:01 - in Python just like the other languages
we have three logical operators we have
67:09 - the logical and the logical or and not
let's take a look at a few examples so
67:16 - I'm gonna start by defining a variable
name sending it to Maj now let's say
67:21 - this is the input that we get from the
user we want to check to see if name is
67:26 - an empty string how do we do that well
earlier I talked about the faulty values
67:32 - in Python so we have 0 empty of string
nan and an empty list these are all
67:41 - considered false e so let's talk about
an empty string if this is interpreted
67:47 - as false then if we apply the not
operator on it will get true right
67:54 - so to check to see if name is an empty
string we can simply write a statement
68:00 - like this if not named color that's it
print name is empty now let's run this
68:09 - program obviously we don't get that
message however if I change this to an
68:15 - empty string and rerun the program we
get name is empty but what if I add a
68:20 - white space here
well white space is not considered true
68:25 - see because it's not an empty string so
look if I run the program we don't get
68:30 - the message to fix this issue we can
simply call dot strip method to get rid
68:37 - of all the white space now let's run it
one more time beautiful
68:41 - so this is our not operator let's take a
look at an example of ant so I'm going
68:48 - to set H to 22 now let's see if H is
greater than or equal to 18 and age is
68:56 - less than 65 we say you are eligible
good pretty easy right now here
69:06 - a question how do we write that
expression in math we write it like this
69:15 - well more accurately we should add the
equal sign here so age is between 18 and
69:21 - 65 right I have good news for you
in Python you can simply write this
69:26 - expression that's perfectly fine this is
what we call chaining comparison
69:32 - operators so we can rewrite this
expression in a simpler and more
69:37 - meaningful way this is one of the
reasons that Python is a highly popular
69:41 - language because the syntax is so clean
without any clutter it's easy to
69:46 - understand and it comes with all these
best practices and standards for writing
69:50 - clean code so let's rewrite this to 18
like this good now let's run the program
69:59 - obviously this person is eligible
70:10 - so here we have this piece of code
similar to what we wrote in the last
70:14 - lecture if the person is 18 years or
older we set the message to eligible
70:19 - otherwise we set it to not eligible in C
based languages we have this operator
70:25 - called ternary operator that allows us
to rewrite this piece of code in a more
70:31 - compact way let me show you how that
looks like so we set message to we add
70:38 - our condition so if age is greater than
or equal to 18
70:42 - we add a question mark if that is true
we set the message to eligible otherwise
70:48 - indicated by a colon we set it to not
eligible if you have worked with C sharp
70:53 - JavaScript C++ Java you have seen this
before if not don't worry let me show
70:59 - you the Python way so in Python we can
rewrite this expression almost in plain
71:05 - English so message is eligible if age is
greater than or equal to 18 otherwise
71:15 - it's not eligible isn't that easy so
this is the ternary operator in Python
71:29 - in Python we have two types of loops so
unlike some languages that have four or
71:36 - five different kinds of loops here we
only have two types we have four loops
71:40 - and while loops their syntax is very
simple and clean let me show you so we
71:47 - start with the four loops with four
loops we can iterate over any object
71:51 - that is a trouble here are a few
examples we can iterate over strings so
71:58 - for X in Python because strings in
Python are a trouble which means we can
72:05 - iterate over them so in each iteration
our loop variable X will hold one
72:10 - character let me show you so we
terminate this line with a colon
72:15 - just like our if clauses now use
indentation to specify the block of
72:20 - statements so we simply print X run the
program this is what we get here's
72:29 - another example we can loop over lists
so let's say we have a list of names a b
72:37 - and c colon print x there you go so we
get ABC here now what if you want to
72:46 - loop over a sequence of numbers that's
when we use the built-in range function
72:52 - let me show you so for x in we call the
range function pass a number like 5 look
73:01 - at what happens now to keep this example
clear I'm gonna comment out these few
73:07 - lines so the shortcut on Mac is command
and slash on Windows is control slash
73:13 - now let's run this program
so when we call range of 5 we get
73:20 - numbers 0 to 4 we can pass a starting
number like 2 to 5 let's run this one
73:28 - more time so now we get to 3 4 we can
also pass a third argument here called
73:35 - step let me show you so I'm going to
change this
73:39 - zero to ten let's say we want to display
all the even numbers between zero to ten
73:45 - so we passed two here that is our step
now when we run the program we get zero
73:51 - to four and so on
now one thing you need to understand
73:54 - about this range function is that it
does not return and list let me show you
73:59 - so I'm gonna comment out these two lines
as well let's just print range of 5 what
74:07 - do we see we see range of 0 to 5 we
don't see a list object in contrast if
74:15 - we had a list like 1 2 3 4 5 see this is
how we see a list printed in the
74:24 - terminal so what is returned from the
range function is not a list it's a
74:29 - different kind of object it's a range
object let me show you so here I'm gonna
74:34 - call the built-in type function now
let's look at the type of this object
74:42 - it's an instance of a class called
range so our range function returns a
74:49 - range object range objects in Python are
iterable like strings and lists so we
74:56 - can use them in for loops now what is
interesting about this range objects is
75:02 - that they take a very small amount of
memory so here if we pass let's say 5
75:08 - billion we are not gonna get a list of 5
billion elements you have a small object
75:14 - that can be iterated over in each
iteration it will produce a new number
75:20 - like 1 2 3 4 and so on in contrast if we
had a list of 5 billion items that list
75:27 - would take significant amount of memory
so this is the difference between list
75:31 - and range objects
75:39 - so here we have a list of names let's
write a simple program and check to see
75:44 - if you have a name that starts with J in
this list so we can use our for loop for
75:50 - name in names now if name that starts
with J perhaps we want to display a
76:00 - message like found now if this list has
a million objects as soon as we find the
76:07 - first object we want to jump out of this
loop we don't want to continue looping
76:12 - for performance reasons so this is where
we use the break statement you have
76:17 - probably seen this before when python
interpreter
76:20 - sees this statement it will terminate
this iteration so now we jump out of
76:26 - this loop let's add another scenario to
this program if we loop over all the
76:32 - names in this list and we don't find a
name that matches our criteria perhaps
76:36 - we want to display a different message
to the user like hey we couldn't find a
76:40 - name that starts with J so typically how
we implement this in other programming
76:46 - languages is like this on the top we
define a flag like found and set it to
76:53 - false then here as soon as we find an
object that matches our criteria we set
77:00 - this flag to true and then after our for
block we check to see if not found we
77:10 - print not found let's save the changes
good run the program obviously we have a
77:18 - name that starts with J so found
beautiful now let's change this to a
77:23 - John around the program not found so our
algorithm is working properly but in
77:30 - Python there is a cleaner way to
implement this scenario we don't need
77:34 - this found flag so let's delete it from
here and here all we have to do is to
77:42 - get the same result is to change the
statement to else so we have four else
77:49 - blocks
in Python this else Clause is executed
77:53 - if our for loop completes successfully
without an immediate break so if we
78:00 - iterate over all the objects in this
iterable then this else Clause will be
78:06 - executed so now when we run this program
we get the exact same result
78:20 - the other type of loose we have in
Python our while loops so let's build a
78:25 - simple guessing game I'm going to define
two variables yes set to zero and answer
78:32 - set to five now we can write a while
loop like this while answer is not equal
78:40 - to guess
once again : here we have indentation we
78:45 - can get the input from the user
make a guess now as you know this
78:50 - returns a string so we need to convert
this to an integer and then store it and
78:56 - the guest variable now as I told you
before this code runner extension runs
79:02 - our code in the output window which is
read-only so we cannot enter values
79:07 - there to fix this issue on the top let's
go to preferences settings then click
79:15 - here and open settings at JSON
now here we need to add a new setting
79:21 - that is code - runner that run in
terminal by default it's false we need
79:29 - to set this to true save the changes now
when we run this program using code
79:34 - runner it runs it in terminal so here in
terminal window let's add a number like
79:40 - 1 2 3 4 as soon as we enter 5 the game
stops so this is our while loop similar
79:50 - to for loops we have an else block here
we can optionally use that this is only
79:56 - executed if the while loop completes
successfully without using a break
80:00 - statement
you
80:08 - to define a function we start with the
keyword def which is short for define or
80:15 - function definition here you can see we
have a few code snippets the first one
80:21 - is for defining a function so just press
Enter
80:24 - so here's the basic syntax we start with
a function name like increment now press
80:31 - tab in parenthesis we define parameters
if they exist in this case let's have a
80:37 - couple of parameters like number and why
so we want to increment a number by a
80:44 - given value right also you can see in
this line is terminated by a colon and
80:49 - right after that we are using
indentation to specify the body of this
80:55 - function just like our if and four
classes now we can call this function
81:00 - like this so increment parenthesis give
it a couple of values like two and three
81:06 - now note that when I save the changes
you're going to see two line breaks
81:11 - after this function so save there you go
so you have two line breaks because
81:16 - that's the style that pepp eight defines
so we should always have two line breaks
81:21 - after our functions now these functions
by default return the non or a null
81:27 - value so even though we don't have a
return statement here this function is
81:31 - still returning a value let me show you
so print the return value of increment
81:37 - and run the program look we get not now
let's return a value like number plus by
81:46 - run the program again now we get five
beautiful in Python unlike many other
81:52 - languages out there we can return
multiple values from our functions we
81:57 - simply put them in parentheses so here
we add parentheses let's say we want to
82:02 - return the original number as well as
the updated number so number comma
82:08 - number plus PI now let's see what we get
when we run this program serve run it so
82:15 - in parentheses we get two which is the
original number and
82:19 - the updated number what is this this is
what we call a top-up which is basically
82:24 - a read-only list so earlier in the
course you have seen lists like numbers
82:31 - we use square brackets 1 2 3 this is a
list we can add new objects to it we can
82:37 - remove existing objects a topple is like
a list but we cannot modify it so we
82:43 - cannot add new objects to it we cannot
remove existing objects now to convert
82:47 - this list with topple we use parentheses
instead of square brackets okay
82:53 - delete another useful feature we have
here is called keyword arguments so
83:00 - currently if someone looks at this code
they may not be able to tell what
83:04 - exactly these arguments are for we can
use keyword arguments to make our code
83:09 - more readable for example here we can
prefix the second argument with
83:16 - something like this by equals now we can
read this code like plain English
83:22 - increment two by three so this is what
we call a keyword argument it's just a
83:28 - way to make our code more readable also
similar to a lot of languages out there
83:33 - we can assign default values to these
parameters for example we can set a
83:39 - default value for the by parameter so
now we don't have to pass a second
83:44 - argument here and when we run this
program the value of y will be set to 1
83:51 - by default and one last thing before we
finish this lecture earlier I talked
83:56 - about type annotation or type hinting we
can use that feature in our functions as
84:02 - well so here we can annotate these
parameters as well as the increment
84:07 - function itself so here we had : int for
integer and here also : int and finally
84:16 - for the function itself before this :
that terminus this line we need to add
84:22 - an arrow and then we'll add the return
type of this function so integer as well
84:29 - now in this case we have a red underline
here we
84:33 - i annotated this function to return an
integer but I'm returning a topple so
84:39 - more accurately this should be topple
save the changes and the error is gone
84:52 - there are times that you may want to
pass an arbitrary number of arguments to
84:57 - a function here is an example let's say
we have a function called multiply that
85:03 - currently takes two parameters a and B
and this function would simply return a
85:09 - times B and then we can call it like
this
85:14 - so far so good but what if you want to
pass a variable number of arguments here
85:20 - like four and five well one way is to
put these arguments in a list then we
85:29 - need to replace these two parameters
with a list and we should also change
85:34 - the implementation of this function here
we need a loop to iterate over this list
85:39 - and multiply all its elements that is
perfectly fine however this syntax is a
85:46 - little bit noisy
wouldn't that be nicer if we could pass
85:50 - these numbers or these arguments here
without these additional square brackets
85:56 - let me show you how to do this so all we
have to do is to prefix this parameter
86:02 - with an asterisk now let's print list
and see what we get when we call the
86:11 - multiply function so save the changes
run the program what do we get here we
86:17 - get a top hole because of these
parentheses so when we add an asterisk
86:21 - before a parameter Python will see that
parameter as a topple so when we pass an
86:28 - arbitrary number of arguments Python
will automatically package them into a
86:33 - topple
as I told you before a topple is like a
86:37 - list so we can loop over it get all the
numbers and multiply them together let
86:42 - me show you real quick so we start by
defining a variable total we set it to
86:48 - one next with a loop so for number in
list : here we simply do total times
86:57 - equal number and finally we return total
the changes good run the program
87:07 - actually I forgot to print the results
so let's print it here run it one more
87:12 - time so here's the total
87:21 - in the last lecture you'll learn about
the syntax for passing a variable number
87:26 - of arguments to a function we have a
variation of this syntax and that's what
87:31 - I'm gonna show you in this lecture so
let's start by defining a function call
87:36 - it save user here we add one parameter
user but instead of one asterisk we use
87:43 - double asterisks
so first let's print this user parameter
87:49 - here and see what we get when we call
this function so save underline user now
87:56 - instead of passing an arbitrary number
of arguments here we should pass an
88:01 - arbitrary number of keyword arguments
remember keyword arguments name a codes
88:06 - value so here we can pass multiple
properties about a user for example we
88:12 - can pass ID equals 1 name equals admin
and so on so here we have two keyword
88:20 - arguments let's run this program and see
what we get when we call this function
88:24 - I'll save the changes and run this is
what we get look at the syntax here we
88:32 - have curly braces and in between them we
have multiple key value pairs here's the
88:38 - first one here is the second one this is
what we call a dictionary
88:42 - if you're a JavaScript developer this
syntax is familiar too
88:46 - this is like an object in JavaScript now
if you're not familiar with JavaScript
88:51 - objects or dictionaries in general
don't worry later in the course you have
88:56 - a comprehensive section about data
structures in Python and there I'm gonna
89:00 - cover lists tuples dictionaries and so
on now to finish up this example here we
89:08 - can use square bracket notation to get
the ID or name of a user let's run this
89:14 - program one more time so ID is 1 and
name is admin beautiful
89:26 - in Python we have two types of variables
local variables with the function scope
89:33 - and global variables with the file scope
so in this example this message variable
89:38 - is a local variable in the greet
function its scope is the greet function
89:43 - so we can access it anywhere in this
function now in Python
89:47 - unlike languages like C sharp or
JavaScript we don't have block level
89:51 - scope so if we define this variable
inside of an if block it is still
89:57 - accessible outside of that block let me
show you so here I'm gonna add if true
90:03 - colon inside of this if block you're
defining the message variable but still
90:09 - accessible outside of the if block so
here we can print message the same
90:15 - applies if we have a loop here a for
loop or a while loop so in Python we
90:21 - don't have block level scope no matter
where we define a variable in a function
90:26 - it is always accessible in that function
after it is defined so that's all about
90:31 - our local variables now let's talk about
global variables if we put this message
90:37 - variable outside of this function now
it's a global variable so it's
90:43 - accessible anywhere in this point in any
functions so here in the greet function
90:47 - we can print it on the terminal let's
take a look so here recall greet run the
90:54 - program we get a now let me show you
something interesting here the greet
91:00 - function I'm gonna assign a new value to
the message variable let's set it to be
91:05 - run the program again obviously we get B
however if I bring this print statement
91:13 - outside of this function and run the
program again let's see what happens we
91:19 - get a what's going on here didn't we
change the value of the message variable
91:24 - not really in this case this message
variable becomes a local variable in the
91:31 - greet function because by default python
enforces good programming practices as
91:36 - you probably know
global variables are evil we shouldn't
91:40 - change them in a function because this
can cause a side effect in other
91:44 - functions so in this case when python
interpreter
91:48 - sees line 5 it will create a new local
variable called message even though it
91:53 - has the same name as our global variable
on line 1 these two are completely
91:58 - separate now I've seen some tutorials
and books teaching you bad programming
92:03 - practices they show you how to modify
the value of a global variable inside of
92:09 - a function so this is how we do it we
use the global keyword and reference the
92:15 - message variable when Python interpreter
sees this it will realize that in this
92:20 - function we don't want to create a local
variable we want to use the global
92:25 - message variable that we defined earlier
now if we run this code instead of a
92:30 - we're gonna get B because the changes
will be visible after we exit this
92:36 - function and that is the reason I said
you should avoid using global variables
92:42 - or if you really want to use them make
sure not to modify them inside of a
92:46 - function because this can create a side
effect in other functions maybe other
92:51 - functions rely on the original value of
that variable so avoid using the global
92:56 - statement it's a bad practice it's evil
93:06 - alright let's finish up this section by
looking at debugging in vs Co so I had
93:12 - this simple program with this multiply
function that we talked about earlier if
93:17 - you want to follow along with me head
over to bit
93:20 - Dudley /pi gist GIS T
93:27 - here on github you can see my guest
simply copy paste this code we're going
93:33 - to use this code to explore debug in vs
Co so below this function we have three
93:38 - statements to print start the result of
calling the multiply function and print
93:44 - finish so to start debugging first we
need to add a breakpoint so here on line
93:49 - eight you can use your mouse to put a
breakpoint here or if you have taken any
93:54 - of my courses before you know that I
always put a lot of emphasis on using
93:58 - your keyboard because professional
developers use their keyboard not their
94:02 - mouse
so using f9 you can add or remove a
94:08 - breakpoint now open up the debugging
panel here on the top click this icon
94:15 - here this will create a JSON file called
launch that JSON with a bunch of
94:22 - configuration for debugging you can see
this file in the project folder inside
94:28 - of this vs code folder here is launched
at JSON now you never have to touch this
94:33 - file we just have to create it the first
time now let's close this back to the
94:38 - debugging panel now after this file is
created in this drop-down list you can
94:43 - see various configuration options for a
debugging session from this list select
94:49 - python current file integrated terminal
so we're going to debug the current file
94:55 - in the terminal that is integrated
inside of vs code there is also another
95:00 - one with an external terminal now to
start a debugging session press f5
95:08 - so here on the right side you can see my
integrated terminal I'm going to close
95:12 - this because it's cluttering the view so
so here is the breakpoint activate it
95:17 - now we are on this line we can step over
eight by pressing f10 if you're on a Mac
95:23 - keyboard you should hold the function
key that is on the bottom left corner of
95:26 - your keyboard so step over now on line 9
we are calling a function so we want to
95:32 - step into this function to see what is
going on there for this press f11 now
95:40 - here we are inside of the multiply
function on the left side inside the
95:44 - variables panel you can see the
variables that are local in this scope
95:49 - so we have numbers which is the argument
passed to this function let's step over
95:55 - one more time at f10 now we are at the
beginning of our loop one more time f10
96:00 - now at this point you can see a few
other variables here so we have our
96:04 - total we have the current number that is
picked in this iteration you can also
96:10 - create watches here if you want to look
at the value of a variable that is not
96:14 - listed in this panel now let's say you
inspected all the variables and you want
96:19 - to step out of this function to do that
press shift and f11
96:24 - now we are out back on line 9 f10 one
more time and one more time and the
96:31 - debugging session is finished
96:40 - alright let's finish up this section by
looking at a few very useful shortcuts
96:45 - for writing code fast first I'm going to
show you the shortcuts for Windows users
96:50 - and in the next lecture we will look at
the shortcuts for Mac so if you're a Mac
96:54 - user feel free to skip this lecture so
here we are on line 9 and my cursor is
96:59 - right at the beginning of the line let's
say you want to move the cursor to the
97:02 - end of the line instead of pressing the
right arrow to go all the way to the end
97:07 - we can simply press the end key and here
is the cursor or if you want to move the
97:12 - cursor to the beginning of the line
simply press the HOME key there you go
97:17 - similarly if you want to move the cursor
to the beginning of the file press ctrl
97:21 - + home here it is or ctrl + end/2 go to
the end of the file now let's say we
97:29 - want to move this line up instead of
cutting it from here and then copying it
97:33 - somewhere else we can simply move it up
by pressing Alt + the up or down arrows
97:40 - or if you want to move these two lines
up and down simply select them then hold
97:45 - alt and then up or down very easy now if
you want to duplicate a line or multiple
97:51 - lines simply select them now hold down
shift alt and then press a down key we
97:58 - can duplicate it as many times as you
want there you go here's another useful
98:03 - shortcut if you want to convert this
line or maybe these two lines into a
98:08 - comment simply hold down control and
press slash using the same shortcut you
98:14 - can remove the comment so you can toggle
it very easy and finally if you want to
98:19 - type the name of a variable or a
function like multiplied you don't have
98:24 - to type all characters here are a few
ways to type this quickly we can just
98:29 - type the first few characters and here
in the intellisense you can see that so
98:34 - if you press ENTER this is what we call
auto-completion
98:37 - here's another way so instead of writing
the first few letters you can just pick
98:43 - any letters in sequence and type them so
I can type mty or I can just type mpy or
98:51 - why there you go here it is so I hope
you enjoyed these shortcuts and thank
98:56 - you for watching
99:04 - alright now let's take a look at the
shortcuts for a Mac keyboard so here we
99:09 - are on line 9 and my cursor is right at
the beginning of the line if you want to
99:14 - move the cursor to the end of the line
instead of using the right arrow to go
99:18 - all the way simply hold down the
function key and press right here it is
99:24 - or you can press function and left to
jump to the beginning of the line
99:29 - similarly you can press function and up
to go to the top of the file or function
99:35 - and down to jump to the end of the file
pretty useful now let's say you want to
99:40 - move this line up instead of cutting it
from here and then copying it somewhere
99:45 - else you can simply move it up by
holding down alt or option and then
99:50 - pressing the up arrow or down very easy
or we can select these two lines hold
99:57 - down the alt or option key move it up or
down
100:00 - here's another useful shortcut we can
convert these two lines into a comment
100:05 - by pressing command and slash and then
we can remove the comment using the same
100:10 - shortcut so we can toggle it and finally
if you want to type the name of a
100:16 - variable or a function like multiply you
don't have to type all the letters like
100:21 - multiply that is very slow you can type
the first few letters like mult and here
100:27 - in the intellisense you can see it's
selected so press Enter or you can pick
100:31 - any characters in sequence and type them
like mty here it is or we can type an py
100:39 - or m TP so you can abbreviate it any way
you want I hope you enjoyed these
100:45 - shortcuts and thank you for watching
100:55 - one of the questions that often comes in
programming interviews is the fizzbuzz
101:00 - algorithm you might be surprised that
there are a lot of developers out there
101:04 - with even years of experience but they
don't know how to solve this simple
101:09 - programming problem that's why I decided
to include this in my course so let's
101:14 - see how this algorithm works and then
you can spend 10 to 15 minutes on this
101:18 - exercise on your own so here we have a
function fizz buzz that takes an input
101:24 - and depending on the input we give it it
returns different results here are the
101:29 - rules if the input that we give it is
divisible by 3 it will return the string
101:35 - fist let me show you so we run this
program we get fizz
101:40 - if the input is divisible by 5 it will
return buzz
101:45 - take a look here's buzz now the third
rule if the input is divisible by both 3
101:52 - and 5 it will return fizzbuzz so let's
pass 15 here we'll get fizzbuzz for any
102:02 - other numbers it will return the same
input so if I pass 7 it's not divisible
102:08 - by 3 or 5 it will return 7 itself so
spend 10 to 15 minutes on this exercise
102:17 - you will see my solution next
102:25 - all right let's see how we can solve
this problem so we get the input and
102:30 - check to see if input is divisible by 3
then we can set a variable like result
102:37 - to phase
now let me temporarily simplify these
102:42 - rules because I want to show you a
really cool technique so let's imagine
102:46 - if the input is divisible by 3
we'll return fizz otherwise we'll return
102:52 - bus so elves : we set the result to buzz
and finally we'll return this result
103:01 - variable
this is one way to implement these rules
103:06 - but it's not the best way there is a
better and cleaner way let me show you
103:10 - so instead of defining this result
variable and then returning it we can
103:16 - simply return this string here and also
here and then we can get rid of line six
103:24 - so we remove one unnecessary line of
code this was one technique the other
103:30 - technique I want to show you is when you
have an if statement and in your if
103:36 - block
you're returning a value you don't
103:38 - really need an else clause because if
this condition is evaluated to false the
103:45 - control moves to the else clause and all
we're doing here is returning a
103:50 - different value so this is the only
possible outcome so here we can remove
103:55 - this else clause and simply return bus
so with this technique I remove an
104:03 - unnecessary indentation as well I've
made our code more linear okay now let's
104:08 - go back to our original algorithm so if
the input is divisible by three we'll
104:13 - return fizz now we check to see if the
input is divisible by five we'll return
104:18 - buzz so here we don't really need an
Elif because if this condition is false
104:25 - we'll get here anyway
so we can check if input is divisible by
104:31 - five we will return buzz once again if
this condition is false the control
104:39 - moves here now we check to see if the
input is divisible by three and it is
104:46 - also divisible by five then we will
return fizz buzz now this expression is
104:55 - a little bit long I would prefer to make
it more readable by putting parentheses
105:00 - around the first and second parts like
this that is cleaner now if this
105:09 - condition is also false the control
moves here that means our number is not
105:13 - divisible by three or five so we should
simply return
105:17 - input once again we don't need an else
or another if we simply return the input
105:23 - now let's run this program and see if
it's working properly or not so we call
105:28 - our function with three and we get fizz
beautiful let's call it with five we get
105:35 - Buzz perfect what if we call it with 15
we should get fizz bus however we get
105:42 - fees what is going on here the reason
this happened was because when we pass
105:47 - 15 here line two is executed
obviously 15 is divisible by three so
105:53 - that is why we immediately return fizz
to solve this problem we need to move
105:59 - this condition which is more specific to
the top so I've selected these two lines
106:04 - using alt + up I move these lines up
beautiful all right now let's run the
106:11 - program one more time
so we get fizzbuzz once again let's test
106:16 - it with three now we get fares let's
test it with five when writing functions
106:22 - don't assume that your function is
working make sure to test it with all
106:26 - different kinds of values let's test it
with five we get Buzz beautiful what if
106:31 - you pass seven which is not divisible by
three or five we get seven beautiful so
106:37 - what you see here is the simplest and
most elegant implementation of the
106:42 - fizzbuzz algorithm and that brings us to
the end of this section in the next
106:46 - lecture we're going to explore data
structures in Python
106:49 - you're going to learn about lists tuples
sets and dictionaries I hope you enjoyed
106:54 - this section and thank you for watching
106:59 - you
107:05 - you made it this far and that makes me
think that you're really enthusiastic
107:09 - about learning Python so I highly
encourage you to enroll in my complete
107:14 - Python course where we go way beyond
this crash course you will learn how to
107:18 - use Python in real-world scenarios such
as data analysis and visualization
107:23 - automating repetitive boring tasks that
involve working with files and folders
107:28 - spreadsheets PDFs data compression
sending emails web crawling consuming
107:34 - api's and much much more this course
comes with a 30 day no questions asked
107:39 - money back guarantee and a certificate
of completion if you're interested click
107:44 - the link below this video to access the
course once again thank you for watching
107:48 - please support me by liking and sharing
this video and also subscribe to my
107:52 - channel to get free new videos every
week thank you and have a great day