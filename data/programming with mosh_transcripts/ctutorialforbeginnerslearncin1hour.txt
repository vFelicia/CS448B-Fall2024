00:02 - welcome to the ultimate c plus plus
00:04 - course in this course you're going to
00:06 - learn everything you need to know about
00:07 - c plus from the basics to more advanced
00:10 - concepts so by the end of this course
00:12 - you'll be able to write c code with
00:14 - confidence if you're looking for a
00:16 - comprehensive easy to follow well
00:18 - organized and practical course that
00:21 - takes you from zero to hero this is the
00:23 - right suit course for you you don't need
00:25 - any prior knowledge of c plus or
00:27 - programming in general everything you
00:29 - need to know about c plus is in one
00:31 - place so you don't need to jump back and
00:33 - forth between random tutorials my name
00:35 - is mash hamadani i'm a software engineer
00:37 - with over 20 years of experience and
00:39 - i've taught millions of people how to
00:41 - code through this channel and my online
00:43 - school codewithmatch.com
00:45 - if you're new here be sure to subscribe
00:47 - as i upload new videos all the time
00:50 - now let's jump in and get started
00:54 - [Music]
00:58 - before we start coding let's spend a
01:00 - couple of minutes and talk about c plus
01:02 - plus what you can do with it and how to
01:04 - master it
01:06 - c plus is one of the most popular
01:09 - programming languages in the world and
01:11 - is the language of choice for building
01:13 - performance critical applications video
01:15 - games device drivers web browsers
01:18 - servers operating systems and so on
01:21 - that's why it's used by large companies
01:23 - like adobe google microsoft netflix and
01:26 - even government agencies like nasa just
01:28 - to name a few every three years we get a
01:31 - new version of c plus plus and the
01:33 - latest version at this time is version
01:35 - 20. the next version is coming out next
01:37 - year now there are people like our
01:39 - famous superstar developer john smith
01:42 - who think that c plus plus is no longer
01:44 - relevant because of the newer languages
01:46 - like java or c sharp that is not true c
01:50 - plus is still one of the fastest and
01:52 - most efficient languages available
01:54 - so if you want to build an application
01:56 - that needs to be fast and use memory
01:58 - efficiently c plus plus is a great
02:00 - choice this is an advantage that it has
02:03 - over languages like c sharp and java c
02:06 - plus plus is also one of the first
02:08 - languages often taught to computer
02:10 - science or software engineering students
02:12 - because it has influenced many
02:14 - programming languages like c-sharp java
02:17 - javascript typescript dart and so on so
02:20 - if you're looking for a job as a
02:22 - software engineer learning class plus is
02:24 - a great investment and opens a lot of
02:26 - doors for you according to indeed.com
02:29 - the average salary of a c plus plus
02:31 - programmer in the us is just over 170
02:34 - 000 a year now to master c plus plus
02:38 - there are two things you need to learn
02:40 - one is the c plus language itself
02:42 - meaning the syntax or the grammar of
02:44 - this language the second thing you need
02:46 - to learn is the c plus plus standard
02:48 - library or stl which is a collection of
02:51 - pre-written c plus plus code that
02:53 - provides functionality that is required
02:55 - by many applications examples are data
02:58 - structures like lists and maps and
03:01 - algorithms for searching and sorting
03:03 - data these functions are required in
03:05 - almost every application so instead of
03:08 - us creating all this functionality from
03:10 - scratch every single time we can reuse
03:12 - some of the c plus plus code in this
03:14 - library to quickly build applications in
03:17 - this course we'll explore major
03:19 - functionalities in the standard library
03:21 - but the standard library is huge so
03:23 - we'll only scratch the surface if you
03:25 - want to learn more there are books
03:27 - specifically written on this topic now a
03:30 - lot of people find c plus plus a bit
03:32 - extensive and intimidating but in
03:34 - reality you don't need to learn all of c
03:36 - plus to be able to write substantial
03:38 - programs for the same reason you don't
03:40 - need to learn every feature your tv
03:42 - provides just to use and enjoy it so in
03:44 - this course we're going to explore c
03:46 - plus plus step by step and as we go i'm
03:49 - going to show you how you can write some
03:51 - really cool programs as you're learning
03:53 - c plus plus i'm going to give you plenty
03:55 - of exercises to help you better
03:57 - understand and remember the concepts
04:00 - then you will see that c plus plus is
04:02 - not really that difficult so if you
04:04 - follow along by the end of this course
04:05 - you'll be able to write c plus code with
04:07 - confidence all right next we're going to
04:09 - talk about the tools you need to write c
04:11 - plus plus programs
04:14 - [Music]
04:20 - to create c-plus bus programs we use an
04:22 - integrated development environment or
04:24 - ide which is basically an application
04:27 - that contains an editor for writing code
04:30 - as well as build and debugging tools now
04:32 - there are so many different ideas out
04:34 - there some of them are free the others
04:36 - are commercial but the top three ones
04:38 - are microsoft visual studio for windows
04:41 - the community edition is free you can
04:43 - get it from the link on the screen
04:45 - there is also a mac version but the one
04:47 - on the mac is not really that great
04:49 - for mac you can use xcode which you can
04:51 - get from the app store
04:53 - we also have clion which is cross
04:55 - platform so it runs on windows mac and
04:58 - linux you can trade for free for 30 days
05:01 - but then it requires a license if you
05:03 - don't want to pay for a license you can
05:05 - use one of the free alternatives again
05:07 - there are so many different ideas
05:08 - available for creating c plus plus
05:10 - programs in this course i'm going to use
05:13 - c lion but you don't have to use it to
05:15 - follow along you can use any tool you
05:17 - prefer because our focus here is not on
05:19 - tooling it's on the c plus plus language
05:22 - itself
05:22 - now if you're an absolute beginner and
05:24 - you have never coded before i recommend
05:27 - you to download the free version of
05:28 - client so you can easily follow along
05:31 - and then later you can either get a
05:33 - license or use one of the free
05:34 - alternatives
05:36 - so head over to jetbrains.com
05:39 - clion slash download again you can see
05:41 - we have versions for windows mac os and
05:44 - linux just note that if you're on mac
05:47 - make sure to download the right dmg
05:49 - because here we have two different
05:50 - builds one is for intel the other is for
05:53 - apple silicon so depending on the type
05:55 - of processor that your mac uses make
05:57 - sure to download the right dmg because
05:59 - the difference in performance is
06:01 - significant all right so go ahead and
06:04 - install this in the next lesson we're
06:06 - going to create our first c plus plus
06:08 - program together
06:11 - [Music]
06:17 - so the first time you open c lion you're
06:19 - going to see this pop-up box for
06:21 - activating your license for now just
06:23 - select start trial now you need to log
06:26 - into your jet brands account
06:29 - so over here you can either sign in or
06:32 - create a new account it's really simple
06:34 - it's only going to take a minute or two
06:36 - so i'm going to sign in with my account
06:40 - good
06:41 - now back to client we can start our
06:43 - trial
06:46 - now on this page we're going to click on
06:47 - new project
06:49 - now on the top we can specify the
06:51 - location of this project
06:52 - so on my mac it's going to be on users
06:55 - slash my name slash client project i'm
06:58 - going to call this project
07:01 - hello world
07:02 - all in one word without any spaces okay
07:05 - now over here we can specify the c plus
07:08 - plus language standard so by default
07:10 - version 14 is selected but we can change
07:13 - that to a higher version like 20 or 23.
07:16 - now because 23 is not official yet i
07:19 - would suggest you to go with 20. good
07:22 - now let's create this project
07:25 - all right here's our first c plus
07:27 - program written in a file called
07:29 - main.cpp if you accidentally close it
07:32 - you can easily find it in the project
07:35 - window so
07:36 - expand this folder
07:38 - and here is main.cpp
07:41 - now we have another file in this project
07:42 - called cmakelists.txt
07:45 - we don't need that so let's close it
07:47 - from here now we have the same concept
07:50 - in other ids like visual studio or xcode
07:53 - so we have a project and that project
07:55 - contains a file that is the main file of
07:57 - our program
07:58 - now let's close this window
08:00 - i'm going to delete all this code
08:02 - because we're going to write it from
08:03 - scratch so you understand how everything
08:05 - works
08:06 - all right let's start with a metaphor
08:08 - think of your tv your tv has several
08:10 - functions it has functions for changing
08:13 - the channel controlling the volume and
08:15 - so on by the same token a c plus plus
08:17 - program consists of tens or hundreds or
08:21 - thousands of functions each serving a
08:23 - purpose now we have a special function
08:25 - here called main which is the entry
08:27 - point to our program this is like the
08:29 - power button of a tv okay now note that
08:32 - c plus plus is a case sensitive language
08:35 - so it's sensitive to lowercase and
08:37 - uppercase letters so make sure to type
08:39 - this exactly as i show you so if you
08:41 - type a capital m here this is going to
08:43 - have a different meaning okay
08:45 - so
08:46 - we're defining a function
08:47 - now before the function name we should
08:49 - specify the type of value it's going to
08:51 - return
08:52 - this main function should return a value
08:55 - of type int which is short for integer
08:58 - and that represents a whole number like
09:00 - 1 2 3 4 and so on so when we run our
09:03 - program the operating system like
09:05 - windows or mac os is going to execute
09:07 - this function and the value that this
09:10 - function returns tells the operating
09:12 - system if our program terminated
09:14 - successfully or not okay
09:16 - so here we have int followed by white
09:18 - space and then the name of the function
09:21 - now white spaces in c plus are often
09:24 - ignored so whether we have one or ten
09:26 - spaces it doesn't really matter but in
09:28 - terms of formatting our code it's better
09:31 - to go with one space because we want to
09:33 - format this code professionally just
09:35 - like how we write an article you want to
09:37 - format our code just like a published
09:39 - article okay
09:41 - now after the function name we type a
09:44 - pair of parentheses
09:45 - and inside the parenthesis we can
09:47 - specify the parameters of this function
09:50 - so a function can have zero or more
09:52 - parameters for now let's not worry about
09:54 - them we'll talk about them later
09:56 - then we type a space again for proper
09:59 - formatting followed by a pair of braces
10:02 - now inside the braces
10:04 - we can type the code for this function
10:06 - so whatever we type here will be
10:08 - executed when the operating system
10:11 - executes our main function now once
10:13 - again in terms of formatting there are
10:15 - two schools of thought for adding the
10:17 - braces some people like to add the left
10:19 - brace on the same line as the function
10:22 - the other people
10:23 - like to put the left brace on a new line
10:25 - there's really no right or wrong here so
10:28 - whatever you prefer just stick to that
10:29 - and make sure your code is consistent
10:32 - in this course i'm going to put the left
10:34 - brace on the same line where we define a
10:36 - function okay
10:38 - now in this function we want to write
10:40 - code to print something on the screen
10:42 - and for that we're going to use the c
10:44 - plus plus standard library so earlier i
10:47 - told you that the standard library
10:49 - provides a bunch of capabilities that we
10:51 - need in almost every application so on
10:54 - the top
10:55 - we type hashtag include
10:58 - and in angle brackets we specify the
11:01 - name of one of the files in the standard
11:03 - library that is io
11:05 - stream which is short for input output
11:09 - stream
11:10 - in this file we have capabilities for
11:12 - printing something on the screen or
11:14 - getting input from the user so just like
11:16 - a supermarket has different sections the
11:19 - standard library also has different
11:21 - files each serving a purpose now as we
11:24 - go through the course you will learn
11:25 - about the other files in the standard
11:27 - library okay
11:28 - so back to our main function
11:30 - now here we type std that is short for
11:33 - standard library and this is like a
11:35 - bucket or a container for the features
11:38 - that are currently available to us so
11:40 - the features we have imported on the top
11:42 - okay
11:43 - so if we type double colons we can see
11:46 - all these features now there are a ton
11:48 - of features here don't worry about any
11:49 - of them in this lesson we're going to
11:51 - use c
11:53 - out that is short for character out some
11:56 - people think this is short for console
11:58 - out that is not correct so using this
12:00 - object we can output one or more
12:03 - characters on the screen
12:04 - so we type a space followed by
12:07 - two left angle brackets another space
12:10 - and then in double quotes we type the
12:12 - text we want to print on the screen so
12:14 - hello world okay
12:17 - and then we terminate this line using a
12:19 - semicolon just like how we terminate our
12:22 - sentences with a period so in c plus
12:25 - plus this line is called a statement
12:27 - because it tells the operating system
12:29 - what to do so whenever we type a
12:31 - statement we should terminate it with a
12:32 - semicolon okay
12:34 - now finally
12:36 - we return the value of zero and once
12:39 - again we need to terminate this with a
12:41 - semicolon but why zero well zero tells
12:44 - the operating system that our program is
12:46 - going to terminate correctly if we
12:48 - return any other values positive or
12:51 - negative that means our program
12:53 - encountered an error okay
12:55 - so let's quickly recap what we have done
12:57 - so far on the top we included one of the
13:00 - files in the standard library for
13:02 - printing something on the screen
13:04 - then we defined the main function which
13:06 - is the entry point to our program
13:09 - now as you can see the main function
13:10 - returns an integer which is a whole
13:13 - number like 0 1 2 3 and so on
13:16 - and in between the braces we have
13:18 - written the code for this function
13:20 - so on the first line we print something
13:23 - on the screen and on the second line
13:25 - return the value of zero as simple as
13:27 - that this is your first c plus plus
13:30 - program
13:31 - next i'm going to show you how to
13:32 - compile and run this program
13:42 - now to run this program first we have to
13:44 - compile this code to machine code that
13:47 - can be run by the computer's operating
13:49 - system so the machine code is basically
13:51 - the native language that a computer's
13:54 - operating system understands and it's
13:56 - different from one operating system to
13:57 - another so if we compile this code on a
14:00 - windows machine we get an executable but
14:03 - that executable only runs on windows we
14:05 - cannot run it on mac or linux if you
14:08 - want to run our application on a mac
14:10 - computer we have to take this code on a
14:12 - mac and recompile it to get an
14:14 - executable from mac okay
14:17 - so back to our code to run this program
14:19 - we're going to click on this play icon
14:21 - on the toolbar now look at the shortcut
14:24 - on mac it's control and r always use
14:27 - shortcuts because they make your life
14:29 - easier so let's run this program
14:32 - we get this little window down the
14:34 - bottom this is called the console or the
14:36 - terminal window it's basically a way to
14:38 - see the output of our program so over
14:41 - here
14:42 - you can see the hello world message
14:44 - so we're using a console application
14:46 - here because console applications are
14:48 - easier to create especially for people
14:51 - learning a new language
14:53 - building applications with a graphical
14:54 - user interface or gui is way more
14:57 - complex
14:58 - so once you understand the basics of c
15:00 - plus plus you'll be ready to move on to
15:03 - writing applications with a graphical
15:05 - user interface if that's what you want
15:06 - okay
15:08 - now let's minimize this window
15:11 - and make a tiny problem in this code so
15:13 - i'm going to remove
15:14 - this semicolon now let's rerun our
15:17 - program
15:19 - all right look this time
15:21 - we get a compilation error pointing to
15:24 - this line
15:25 - so the error is reminding us that we
15:27 - have forgotten a semicolon
15:29 - if you're starting out it's completely
15:31 - normal to encounter these errors if you
15:33 - have a typo or miss a semicolon and so
15:36 - on don't let that discourage you
15:38 - remember patience is the first skill of
15:41 - a good programmer so if your code
15:43 - doesn't get compiled pay close attention
15:45 - to this video see what exactly i'm
15:47 - typing compare it with your code i
15:49 - promise if you pay close attention
15:51 - you'll be able to solve issues on your
15:53 - own
15:54 - so let's fix the issue
15:57 - all right let's move on to the next
15:58 - lesson
16:01 - [Music]
16:07 - now going forward i want to change the
16:09 - colors here and i wanted to show you how
16:11 - to do that because a lot of people ask
16:13 - me about the themes i use in my videos
16:15 - if you are not using c lion feel free to
16:18 - move on to the next lesson
16:19 - so
16:20 - on the top we go to the preferences menu
16:24 - then under appearance and behavior we
16:27 - select appearance
16:28 - now over here you can see the themes
16:30 - that are installed by default we only
16:32 - have four themes but we can get more
16:34 - themes by clicking on this link
16:37 - now on this page i'm going to sort this
16:40 - list by
16:41 - the number of downloads so we can see
16:43 - the popular ones
16:45 - i'm going to pick
16:46 - dracula theme it's a very popular thing
16:49 - but feel free to play with these themes
16:50 - and find the one that you personally
16:52 - like
16:53 - so let's install this
16:56 - accept
16:58 - good no okay
17:00 - so this is the dracula theme which is
17:02 - much better than the default theme that
17:04 - comes with c lion
17:06 - so that brings us to the end of this
17:08 - section in the next section we're going
17:09 - to talk about the basics of c plus plus
17:12 - so i will see in the next section
17:18 - now let me give you a quick overview of
17:20 - how i've structured this course so you
17:22 - can get the most out of it
17:25 - this course is the first part of my
17:27 - complete c plus series each part is
17:30 - about three to four hours long so you
17:32 - can easily complete it in a day or two
17:34 - in the first part which is the one
17:36 - you're watching we explore the basics in
17:38 - this part you will learn the
17:39 - fundamentals of programming in c plus
17:42 - data types decision making statements
17:45 - loops and functions now throughout the
17:47 - course i'm going to give you plenty of
17:49 - exercises to help you develop your
17:51 - problem-solving skills and build your
17:53 - confidence in writing code in fact many
17:56 - of these exercises are popular interview
17:58 - questions in the second part we'll
18:01 - explore intermediate level concepts such
18:04 - as arrays pointers strings structures
18:07 - enumerations and streams
18:10 - and finally in the last part we'll be
18:11 - talking about the advanced concepts such
18:14 - as classes exceptions templates
18:17 - containers and more
18:18 - so by the end of this series you will
18:20 - have a solid understanding of c plus and
18:23 - you'll be ready to apply it in real life
18:26 - for example if you want to build games
18:27 - with unreal engine which is a popular
18:29 - gaming engine you will have the
18:31 - necessary c plus plus skills to build
18:33 - games you just need to learn about
18:35 - unreal engine so i hope you stick around
18:38 - and master c plus plus one of the
18:40 - fastest and most efficient programming
18:42 - languages available
18:46 - [Music]
18:49 - hey guys mosh here i just wanted to say
18:51 - that you don't really have to memorize
18:53 - anything in this course i've put
18:55 - together a complete cheat sheet and
18:57 - summary notes for you that you can
18:58 - download as a pdf right below this video
19:01 - so click the link in the description to
19:03 - download this pdf
19:05 - so i have done my best to create the
19:07 - simplest c plus tutorial for you so if
19:10 - you enjoy this please support my hard
19:12 - work by liking and sharing this video
19:14 - and also be sure to subscribe as i
19:16 - upload new videos all the time
19:22 - welcome back to the ultimate c plus plus
19:24 - course in this section we're going to
19:26 - talk about the basics of c plus plus
19:28 - we'll cover variables and constants
19:31 - naming conventions coding mathematical
19:33 - expressions writing to and reading from
19:36 - the console working with the standard
19:38 - library and comments so by the end of
19:40 - this section you'll be able to write
19:42 - simple but really useful programs in c
19:45 - bus
19:45 - now let's jump in and get started
19:54 - [Music]
19:58 - all right let's talk about variables in
20:00 - programming we use variables to
20:02 - temporarily store data in the computer's
20:05 - memory now technically a variable is the
20:08 - name of a location in memory where we
20:10 - can store some value now because the
20:12 - value can change we refer to this
20:14 - location as a variable
20:16 - now to declare a variable in c plus plus
20:18 - first we have to specify
20:20 - the type of data we want to store
20:22 - let's say int or integer for storing
20:25 - whole numbers
20:26 - then we give our variable a proper
20:28 - meaningful name like file size
20:32 - now there are various ways to name our
20:34 - variables we have various conventions
20:35 - we'll talk about them momentarily once
20:38 - we declare a variable then we terminate
20:40 - this statement with a semicolon now i
20:43 - want to emphasize that you should always
20:45 - use meaningful names for your variables
20:47 - don't use abbreviations like fs because
20:50 - someone else reading this code may not
20:52 - know what fs is short for also don't go
20:55 - for names like f1 or f2 or thing these
20:58 - are all cryptic and ambiguous okay
21:01 - so we're going to call this file size
21:04 - and then we can give it a value
21:06 - like 100 so we assign it the value of
21:09 - 100. now here we can combine these two
21:12 - statements into a single statement and
21:14 - that makes our code shorter and more
21:17 - concise so right here where we declare
21:19 - our variable we can give it an initial
21:22 - value of 100. this is called
21:25 - initializing a variable now we don't
21:28 - need the second line okay now let's
21:30 - declare another variable for storing
21:32 - numbers with a decimal point for that
21:35 - we're going to use a different data type
21:37 - that is double we're going to talk about
21:39 - different data types in the next section
21:41 - so in this section we're only going to
21:42 - work with integers and doubles now we're
21:46 - going to call this sales and initialize
21:49 - it to 9.99
21:51 - okay
21:52 - now that we have two variables we can
21:53 - print them on the console so instead of
21:56 - hello world let's print
21:58 - file size
22:00 - run our program
22:01 - we see
22:02 - 100 beautiful
22:04 - now while initializing variables is not
22:06 - mandatory it's a good practice to follow
22:09 - let's see what happens if we don't
22:11 - initialize file size and print it on the
22:13 - terminal well immediately we see this
22:16 - warning let's take a look
22:18 - the warning is saying variable file size
22:21 - is uninitialized when used here
22:23 - initialize local variable file size so
22:26 - our id is complaining that we are using
22:28 - a variable that doesn't have an initial
22:30 - value let's run our program and see what
22:32 - happens
22:34 - take a look
22:35 - look we get this random value and if we
22:38 - run our program multiple times we see
22:41 - a completely different value this is
22:43 - what we call garbage this is the data
22:45 - that is currently in memory
22:47 - so as a best practice
22:49 - we should always initialize our
22:51 - variables before using them so i'm going
22:54 - to set this to an initial value of 0.
22:56 - now in language just like c sharp or
22:58 - java we don't have to do this if we
23:00 - declare an integer it automatically gets
23:02 - initialized to zero but this is not how
23:04 - it works in c plus okay
23:06 - so this is how we can declare and
23:08 - initialize variables and by the way we
23:10 - can also initialize multiple variables
23:13 - on the same line so over here we can
23:15 - declare a second integer let's call that
23:18 - counter so we add a comma
23:21 - and then declare counter and optionally
23:23 - we can initialize it to
23:25 - some value
23:26 - now while this works it's often
23:28 - discouraged as a best practice we should
23:30 - declare each variable on a separate line
23:33 - so i'm going to remove this and declare
23:36 - another integer
23:37 - like this okay
23:40 - now i have a small exercise for you i
23:42 - want you to write code to swap the value
23:44 - of two variables this is a common
23:47 - interview question so let me explain
23:48 - what i mean we're going to declare two
23:50 - variables a
23:52 - and b
23:54 - now if we print a we're going to see one
23:57 - on the terminal right now here's what i
23:59 - want you to do
24:00 - over here
24:02 - i want you to write code to swap the
24:04 - value of these variables so when we
24:06 - print a we see two and when we print b
24:10 - we see one now i don't want you to reset
24:12 - these variables so i don't want you to
24:14 - set a to two and b to one this is not
24:17 - the right solution let me give you a
24:19 - hint
24:20 - imagine instead of these two variables
24:22 - we have two buckets the first bucket is
24:25 - filled with apples the second bucket is
24:28 - filled with oranges now if we have these
24:30 - two buckets in real life
24:32 - how can we swap their content think of a
24:35 - solution and then use that idea to write
24:37 - code to swap the value of these
24:39 - variables it's not that difficult just
24:41 - spend a couple minutes on this and then
24:43 - come back see my solution
24:49 - so to solve this problem in real life we
24:52 - need a third bucket
24:54 - first we empty our apples bucket into
24:56 - this bucket
24:57 - now the apples bucket is empty so we can
24:59 - move the content of the oranges bucket
25:01 - here
25:02 - now the oranges bucket is empty so we
25:05 - can move the content of the third bucket
25:07 - into this bucket now we have swapped the
25:10 - content of our buckets right so let's
25:12 - use this idea to solve this exercise
25:14 - we declare
25:16 - a third variable we can call that temp
25:18 - and we initialize it with what we have
25:21 - in a that is the value of one
25:23 - now we can set a
25:25 - to b
25:26 - so whatever we have in b which is 2 is
25:28 - now going to be in a
25:30 - and finally
25:31 - we're going to set b to temp so b is
25:34 - going to be 1. so now if we print a
25:37 - we're going to see 2 instead of 1. let's
25:40 - verify this so let's run our program
25:43 - there you go beautiful so this was your
25:45 - first programming problem if you got
25:47 - stuck don't worry it's completely normal
25:50 - as we go through the course i'm going to
25:51 - give you more and more exercises to help
25:54 - you build your confidence next we're
25:56 - going to talk about constants
26:00 - [Music]
26:06 - there are situations where we don't want
26:07 - the value of a variable to change this
26:10 - is where we use constants here is an
26:12 - example let's declare a variable of type
26:15 - double and call it pi
26:17 - and set it to 3.14
26:20 - now with this we can calculate the area
26:22 - of a circle right but what if somewhere
26:25 - in our program i accidentally set pi to
26:28 - a different value like zero
26:30 - with this our calculations are going to
26:31 - go wrong right this is where we can use
26:34 - a constant to prevent the value of pi
26:37 - from changing
26:38 - how do we do that very easy
26:40 - we type the const keyword
26:42 - before declaring this variable
26:44 - now look on line 5 we have a red
26:47 - underline that is a compilation error so
26:50 - if you hover our mouse here we see the
26:52 - error saying cannot assign to variable
26:54 - pi with const qualify type const double
26:58 - and also
26:59 - if we try to run our program
27:02 - here in the terminal window we see an
27:04 - error
27:05 - so take a look this is the error there
27:07 - is happening in main.cpp on line five in
27:11 - column eight and here's the actual error
27:14 - cannot assign to variable pi with const
27:17 - qualified type okay
27:19 - so this will prevent us from
27:21 - accidentally
27:22 - modifying the value of this variable or
27:24 - more accurately constant
27:28 - [Music]
27:34 - now let's talk about naming conventions
27:36 - so we have different conventions for
27:38 - naming our variables and constants and
27:41 - different teams prefer different
27:43 - conventions so there is really no right
27:45 - or wrong here but let me show you the
27:46 - popular conventions
27:48 - so earlier we declared a variable called
27:51 - file size
27:52 - the way we name this variable follows
27:55 - what we call the snake case
27:58 - so with this convention we have to use
28:00 - lowercase letters to name our variables
28:03 - and constants and if we have multiple
28:05 - words we should separate them using an
28:07 - underscore
28:09 - now we have another convention called
28:11 - pascal case in which we should
28:13 - capitalize the first letter of every
28:15 - word so the same variable using pascal
28:19 - case looks like this
28:21 - this is pascal case and by the way the
28:24 - text that i put here that starts with
28:26 - two forward slashes this is called a
28:28 - comment we'll talk about comments later
28:30 - in this section but for now just
28:32 - remember that comments are a way to
28:34 - describe our code they don't get
28:36 - compiled okay
28:37 - now we have another convention that is
28:39 - similar to pascal case the only
28:42 - difference is that the first letter of
28:44 - the first word should be lowercase so
28:47 - file size
28:49 - this is camel case
28:51 - we also have hungarian notation which is
28:54 - a pretty old notation and it's not
28:56 - relevant anymore with hungarian notation
28:59 - we should prefix the name of our
29:01 - variables with a letter that specify
29:03 - their type so here we have an integer so
29:06 - we use a lowercase i and then file size
29:10 - just like pascal case this is called
29:12 - hungarian notation
29:15 - now quite frankly this is a very old
29:17 - notation it's not relevant anymore but i
29:20 - still see people using it i've seen it a
29:22 - lot in windows source code the reason
29:24 - this is not relevant anymore is because
29:26 - in the old days we didn't have good
29:28 - editors so if we declared a variable
29:30 - somewhere and we wanted to know its type
29:32 - we had to scroll up to find the type of
29:34 - that variable so with hungarian notation
29:37 - we could look at a variable and
29:39 - immediately tell its type but this is
29:41 - not the case anymore because these days
29:43 - we have powerful editors if we simply
29:45 - hover our mouse over any variable
29:49 - we can see its type so here you can see
29:51 - file size is an integer variable right
29:55 - so these are the popular conventions out
29:56 - there in this course i'm going to use
29:58 - camelcase for naming our variables and
30:01 - constants
30:02 - and pascal case for naming our classes
30:04 - we'll talk about classes later in the
30:06 - course now if you don't like these
30:08 - conventions and prefer to use snake case
30:10 - that's totally fine but make sure to
30:13 - stick to your own convention the more
30:15 - consistent your code is the easier it is
30:17 - to read understand and maintain it next
30:20 - we're going to talk about mathematical
30:22 - expressions
30:25 - [Music]
30:31 - so you have learned how to declare
30:32 - variables and constants now let's see
30:34 - how we can write mathematical
30:36 - expressions for performing calculations
30:38 - this is where the fun begins so i'm
30:41 - going to declare two variables x
30:43 - and y
30:45 - now we can declare a third variable
30:48 - and set it to x plus y so what we have
30:51 - here is called the addition operator and
30:54 - x and y here are called operands so now
30:58 - let's print z on the terminal so std
31:01 - double colon c out z
31:05 - take a look
31:06 - so now we see 13 beautiful
31:09 - we also have
31:11 - subtraction
31:13 - multiplication and division but division
31:16 - is a little bit tricky
31:18 - in this case because we're dealing with
31:20 - two integers the result of the division
31:22 - is going to be an integer even though in
31:24 - reality dividing 10 by 3 is going to
31:27 - result in a number with a decimal point
31:29 - which we call a floating point number in
31:32 - programming so if you're on our program
31:35 - we see three
31:37 - but what if you want to see a floating
31:39 - point number well
31:40 - changing the type of z
31:42 - to double is not going to solve this
31:44 - problem because as i told you earlier if
31:47 - both our numbers are integers the result
31:50 - of the division is also going to be an
31:51 - integer
31:52 - so to get a floating point number we
31:55 - have to convert one of these numbers to
31:57 - a double so take a look first the
32:00 - warning goes away
32:02 - now if you run our program one more time
32:04 - look we get three point three three
32:06 - three three okay
32:08 - so this is how division works in c plus
32:10 - plus
32:11 - now let me rewrite this back to integer
32:14 - and integer
32:15 - now we have another operator called
32:18 - modulus which returns the remainder of a
32:20 - division so what is the remainder of
32:23 - division of 10 by 3
32:25 - it's 1. let's
32:26 - verify there you go okay
32:29 - now using these operators we can modify
32:32 - our variables let me show you what i
32:33 - mean so for simplicity i'm going to
32:36 - remove y and z we only have x and we're
32:39 - going to print it on the terminal let's
32:41 - say we want to increment x by 5. here's
32:44 - how we do it we type x equals x plus 5.
32:48 - so first this piece of code or this
32:51 - expression is going to get evaluated the
32:53 - result is 15 and then the result will be
32:56 - stored in x okay
32:59 - now similarly we can subtract 5 from x
33:02 - we can multiply x by 5 and so on okay
33:05 - now we also have two more operators you
33:07 - need to know and they are increment and
33:10 - decrement operators
33:12 - so let's say we want to add 1 to x we
33:14 - can say x equals x plus 1. that is
33:18 - totally fine but there is a shorter and
33:20 - more concise way to write this code we
33:22 - can say x plus plus this is the
33:25 - increment operator we also have
33:28 - decrement operator but we don't have the
33:30 - equivalent for multiplication or
33:32 - division only increment and decrement
33:35 - okay
33:36 - now this increment operator there are
33:38 - two ways we can apply it we can apply it
33:40 - as a postfix or
33:42 - as a prefix let me show you the
33:44 - difference
33:45 - so i'm going to delete these two lines
33:48 - let's declare another variable called y
33:50 - and set it to x plus plus
33:53 - if we apply this as a postfix
33:56 - first the current value of x which is 10
33:59 - is going to be assigned to y so y is
34:02 - going to be 10 and then
34:05 - x will be incremented by 1. so if we run
34:07 - our program x is going to be 11 but y is
34:10 - going to be 10. let me show you so
34:13 - we print x x is 11 but if we print y
34:19 - y is going to be 10 okay so let me add
34:21 - this as a comment for clarity in this
34:24 - case
34:25 - x is going to be 11
34:27 - and y is going to be 10.
34:29 - now what if we apply the increment
34:31 - operator as a prefix so we declare
34:34 - another variable and set it to plus plus
34:36 - x
34:37 - in this case because we applied this
34:40 - operator as a prefix
34:42 - first
34:42 - the value of x is going to be
34:44 - incremented by 1 so x is going to be 11
34:47 - and then the result will be stored in z
34:51 - so in this case both x and z are going
34:54 - to be
34:55 - 11. let's verify so if we print z
35:00 - well in this case these 12 i made a
35:02 - mistake because in the previous
35:04 - statement we incremented x by one so if
35:07 - we comment out this line it's not going
35:10 - to get executed so now when we run our
35:13 - program x is going to be 11 and z is
35:15 - going to be 11 as well let's verify it
35:18 - so
35:19 - here's z beautiful and let's also print
35:22 - x
35:25 - there you go
35:28 - so here's what you need to take away
35:31 - if you apply the increment or decrement
35:33 - operator as a prefix
35:35 - first this piece of code is going to get
35:37 - evaluated so first x is going to be
35:40 - incremented by 1 and then the result is
35:42 - going to be stored in the other variable
35:45 - in contrast if we apply this operator as
35:48 - a postfix first the current value of x
35:51 - which is 10 is going to be stored in y
35:54 - and then x is going to be incremented by
35:56 - 1.
35:59 - hey guys mosh here i hope you have been
36:01 - enjoying this tutorial so far i just
36:03 - wanted to let you know that this
36:05 - tutorial is the first hour of my
36:07 - complete c plus series where you will
36:09 - learn everything you need to know from
36:11 - the basics to more advanced concepts so
36:14 - watch this tutorial to the end and if
36:16 - you still want to learn more use the
36:18 - link below this video to enroll in the
36:19 - full course the complete course contains
36:22 - three parts each part being around three
36:24 - to four hours long so you can complete
36:26 - them in a day or two you will also get a
36:29 - certificate of completion and a 30-day
36:32 - money-back guarantee again if you're
36:34 - interested the link is below this video
36:36 - in the description box
36:45 - when writing mathematical expressions
36:47 - especially the more complex ones you
36:49 - need to take into account the order or
36:51 - priority of operators let me show you
36:54 - what i mean
36:55 - so i'm going to declare a variable
36:56 - called x
36:57 - and set it to 1 plus 2 times 3.
37:01 - now
37:02 - let's print x on the console
37:05 - what do you think we're going to get
37:06 - pause the video and think about it for a
37:08 - second
37:09 - the answer is seven this is a very
37:11 - simple math question but unfortunately a
37:14 - lot of people get it wrong here's the
37:16 - reason in math the multiplication and
37:19 - division operators have a higher order
37:21 - or a higher priority so when evaluating
37:24 - this piece of code or this expression
37:27 - first this part is evaluated so 2 times
37:31 - 3 is 6 and then 6 is added to 1 so the
37:34 - result is 7. let's verify it so i'm
37:37 - going to run the program
37:38 - there you go we have 7. okay so here's
37:41 - what i want you to remember
37:43 - in math or any programming languages
37:46 - the multiplication
37:48 - and division operators always have a
37:51 - higher priority than addition or
37:54 - subtraction operators but we can always
37:57 - change
37:58 - the order of these operators using
38:00 - parentheses so
38:02 - in this case if we wrap this piece of
38:05 - code with parentheses
38:07 - first this piece is evaluated so 1 plus
38:10 - 2 is 3 and then 3 is multiplied by
38:14 - 3. so the result is going to be 9. let's
38:16 - verify it so run the program one more
38:19 - time there you go okay
38:21 - now here's your exercise for this lesson
38:24 - take this mathematical expression and
38:26 - implement it in c plus plus assume x is
38:28 - 10 and y is five so if you implement
38:31 - this correctly z is going to be 1.3 so
38:35 - pause the video and work on this for a
38:36 - couple minutes then come back see my
38:38 - solution
38:43 - all right here's the solution i'm going
38:44 - to declare x and set it to 10
38:47 - then y we set it to 5
38:50 - and for z first we have to add
38:53 - 10 to x
38:54 - but we have to wrap this in parenthesis
38:57 - because this whole thing is going to be
38:58 - our numerator
39:00 - once we have the numerator then we're
39:02 - going to divide it by
39:04 - 3 times y but here's the tricky part we
39:08 - have to wrap this whole expression in
39:10 - parenthesis because the result of this
39:12 - expression is going to be our
39:14 - denominator if we don't use parenthesis
39:16 - here our denominator is going to be 3
39:19 - and the result is going to be different
39:21 - so we wrap this whole thing
39:24 - in parenthesis
39:26 - and now
39:27 - let's print
39:28 - z on the terminal so we should get 1.3
39:32 - again if you didn't solve this properly
39:34 - don't worry don't let that discourage
39:36 - you remember you're a student you're
39:38 - learning if you know everything and you
39:39 - could solve every problem you would be
39:41 - the one teaching right so don't let that
39:44 - discourage you and let's move on to the
39:45 - next lesson
39:49 - [Music]
39:55 - so you have learned how to write to the
39:56 - console or the terminal window in this
39:58 - lesson i'm going to show you a few more
40:00 - techniques for writing to the console so
40:03 - let's start by declaring a variable
40:05 - now let's say
40:07 - on the terminal we want to print x
40:09 - equals 10. how do we do this well
40:12 - first we go in the std namespace
40:14 - and pick up c out which is an object
40:17 - that represents the standard output
40:20 - stream i know it's a mouthful but let me
40:22 - explain it for you in programming a
40:25 - stream represents a sequence of
40:27 - characters the standard output is our
40:29 - console or terminal window so using c
40:32 - out we can write a sequence of
40:34 - characters on the standard output which
40:36 - is our console window right now these
40:39 - double left angle brackets are called
40:42 - the stream insertion operator it's an
40:45 - operator for inserting something to our
40:47 - output stream in this case we're going
40:49 - to write a sequence of characters which
40:52 - we specify using double quotes now in
40:54 - programming or c plus specifically this
40:57 - is called a string we'll talk about
40:59 - strings later in the course
41:02 - so here we want to print x equals
41:04 - and right after we want to print the
41:07 - actual value of x
41:09 - so we terminate this statement
41:11 - and use c out one more time
41:14 - but this time we print x okay
41:16 - let's run our program and see what we
41:18 - get
41:19 - so we see x is 10 beautiful
41:22 - now
41:23 - we can combine these statements into a
41:25 - single statement so
41:27 - we get rid of the second c out and this
41:30 - semicolon
41:31 - and then put everything on the same line
41:34 - now we are chaining
41:36 - multiple stream insertion operators so
41:39 - if we run our program one more time
41:42 - we get the exact same result beautiful
41:45 - now
41:46 - what if we declare a second variable so
41:48 - let's declare y and set it to 20
41:51 - and then repeat so one more time c out
41:55 - y equals and then we add
41:58 - y
41:59 - take a look
42:01 - all right here's what we get but
42:02 - wouldn't that be nicer
42:04 - if y equals 20 was on the second line
42:07 - well
42:08 - to solve this problem
42:10 - right here we need to add a new line so
42:13 - once again
42:14 - we chain the stream insertion operator
42:17 - and this time we go in the steady
42:18 - namespace and pick up end-all which
42:21 - represents the end of the line okay
42:24 - now let's run our program one more time
42:27 - that is much better okay
42:29 - now once again we can simplify this code
42:31 - by combining these two statements so
42:34 - again we don't need the second c out
42:37 - so let's remove that and this semicolon
42:40 - as well now if we run our program
42:43 - we get the exact same result however
42:46 - our code is not formatted properly it's
42:49 - a little bit hard to read this code so
42:51 - here i'm going to use tabs and spaces to
42:53 - align these operators so what we have in
42:56 - our code looks exactly like what we
42:58 - expect in the output okay this is better
43:01 - now there is a tiny problem in this code
43:04 - we have a bit of repetition of std
43:07 - double colons so we have repeated this
43:09 - in two places let me show you how to
43:11 - simplify this code so before our main
43:14 - function
43:16 - we use the using directive to pick up
43:18 - the std namespace so here we type
43:21 - namespace
43:22 - std
43:23 - now std is defined anywhere in this file
43:26 - so we don't have to repeat it in
43:28 - multiple places so we can simply access
43:31 - all objects in the std namespace so
43:34 - let's remove that
43:36 - and
43:37 - this one as well
43:38 - and finally let's realign
43:42 - this bracket great so now our code is
43:44 - cleaner more concise and easier to read
43:47 - great now here's your exercise
43:49 - imagine you have a store and you have
43:51 - made 95 000
43:53 - now as part of your tax return you have
43:55 - to pay state and county tax at different
43:58 - rates so state tax is four percent
44:00 - whereas county tax is two percent now i
44:03 - want you to write code to show your
44:05 - total sales as well as your state tax
44:07 - your county tax and the total tax you
44:09 - have to pay on this income so pause the
44:12 - video and work on this exercise for five
44:14 - minutes then come back see my photoshop
44:20 - all right here's my solution
44:22 - first we need a variable for storing the
44:24 - total sales
44:26 - and for that i'm going to use a double
44:28 - so even though we don't have any sent
44:29 - values here but for monetary values we
44:32 - should always use a double
44:33 - so double sales equals 95 000.
44:38 - now right after let's print the total
44:40 - sales
44:41 - here we add a dollar sign that's nicer
44:44 - then we chain the insertion operator to
44:47 - print sales followed by the end of line
44:51 - now before going any further let's run
44:53 - our program and make sure everything
44:54 - works
44:55 - so run
44:57 - total sales is 95 000 great
45:01 - next we need to calculate the state tax
45:04 - so let's declare another variable called
45:07 - state tax
45:08 - and here we get sales and multiplied by
45:12 - .04
45:14 - and then once again we print this on the
45:16 - terminal so state tax
45:19 - is
45:20 - this value followed by
45:22 - the end of line
45:24 - now once again let's run our program and
45:26 - make sure everything works so this is
45:28 - how i want you to write code write a bit
45:30 - of code run it make sure everything
45:32 - works before going further baby steps
45:35 - so run
45:37 - so our estate tax is 3800 great
45:40 - now let's improve this code
45:42 - the first thing i want to improve here
45:43 - is formatting so the first two lines
45:46 - are about the total sales whereas the
45:49 - second two lines are about the state tax
45:52 - these are two different stories right so
45:54 - here i add a vertical line to separate
45:57 - these stories just like how we have
45:59 - multiple paragraphs in an article we
46:01 - want to write our code so every story is
46:04 - separate from other stories okay
46:07 - so here's our state tax then i add
46:09 - another vertical line to separate it
46:11 - from the return statement great
46:14 - now
46:15 - this line is totally fine but generally
46:17 - speaking it's best to avoid magic
46:20 - numbers like this here
46:22 - because even though this is a very
46:23 - simple example in more complex programs
46:26 - these magic numbers might be confusing
46:28 - someone else reading your code may not
46:30 - know what that number represents so here
46:33 - we can make our code more expressive by
46:35 - storing this value in a separate
46:37 - variable so
46:39 - we declare a variable called state tax
46:42 - rate and set it to
46:44 - 0.04 and then we can reference that
46:47 - variable right here
46:50 - now it's completely clear what this
46:53 - value represents it's our state tax rate
46:56 - but this has another benefit if we use
46:58 - this variable in multiple places in our
47:00 - code and then tomorrow this day tax
47:02 - changes we don't have to come back and
47:04 - modify multiple places we have a single
47:07 - place where we have stored this value
47:09 - okay
47:10 - now there is a tiny problem in this code
47:13 - the problem is that
47:14 - i can accidentally
47:17 - change the state tax rate how can we
47:19 - solve this problem using a constant so
47:23 - we qualify this with the const keyword
47:26 - that's better
47:27 - now we have to repeat the same three
47:29 - lines for our county text so i'm going
47:31 - to copy this
47:32 - and paste it and again note the vertical
47:35 - line this is to separate these stories
47:38 - so over here
47:40 - we're going to rename this to
47:42 - county
47:43 - tax rate
47:45 - which is going to be two percent
47:47 - and over here
47:49 - we're going to calculate the county tax
47:53 - and print it accordingly
47:56 - county tax
47:57 - good nothing new and we should also
48:00 - replace state tax rate with
48:02 - county tax rate so let me show you a
48:05 - shortcut here look i haven't typed
48:07 - county tax rate i just typed kind of an
48:10 - abbreviation so count t r so we can use
48:15 - abbreviations to quickly type our code
48:17 - and press enter to complete it okay
48:20 - now let's run our program and make sure
48:22 - everything works
48:25 - so our county tax is 1900 beautiful now
48:29 - the final part
48:31 - we declare another variable
48:33 - called total tax
48:35 - which equals state tax
48:37 - plus
48:38 - county tax
48:40 - and finally we print it
48:42 - on the terminal
48:45 - total tax okay
48:47 - so once again see how i've named my
48:49 - variables all the variables are properly
48:52 - named they're meaningful there is no
48:54 - ambiguity in this code we don't have t1
48:57 - t2 tr whatever don't write code like
49:00 - that
49:00 - next we're going to talk about reading
49:02 - input from the user
49:07 - [Music]
49:11 - all right now let's see how we can read
49:13 - input from the console so you have
49:15 - learned that c out represents the
49:18 - standard output string
49:20 - now in this file in iostream we have
49:23 - another object called c in which
49:25 - represents the standard input stream
49:27 - which we can use for reading data from
49:29 - the console let me show you how
49:32 - first we're going to use c out to print
49:34 - a label on the screen so enter a value
49:38 - now using c in we can read that value
49:41 - and put it in a variable but first we
49:43 - need to declare a variable so let's
49:45 - declare an integer called value
49:48 - then we use c in along with the stream
49:51 - extraction operator to read that value
49:55 - and put it in this variable okay so this
49:58 - is called the stream extraction operator
50:01 - it's the opposite of stream insertion
50:04 - operator i know it can be confusing but
50:06 - the easiest way to remember this is to
50:08 - think of the direction of data flow so
50:11 - in this case we have reading data
50:14 - from the console or the standard input
50:16 - and putting it into this variable
50:19 - in contrast with c out we're basically
50:22 - getting this sequence of characters and
50:24 - putting them
50:25 - into the console so this is the way to
50:27 - remember this okay
50:29 - now to verify that our program works
50:33 - let's print the value that we just read
50:36 - so let's run our program
50:39 - enter a value let's say 10 and we get 10
50:42 - in the output beautiful now what if we
50:44 - enter a floating point number a number
50:46 - with a decimal point let's see
50:49 - so
50:50 - this time i'm going to enter 10.1
50:53 - the decimal part is gone because we
50:55 - declared this value as an integer so
50:58 - if you want to read
51:00 - a floating point number here we have to
51:02 - use a double type take a look
51:05 - so one more time
51:06 - 10.5 now we get 10.5 beautiful
51:10 - now we can also read multiple values so
51:14 - let's change this label to enter
51:17 - the values for x and y
51:20 - now let's declare two variables called x
51:24 - and y
51:25 - first we read x
51:26 - and then we read y
51:29 - and finally we can print x plus y
51:32 - this is like a simple calculator so take
51:34 - a look we can enter
51:37 - 10
51:38 - and 20
51:39 - and the result is 30. now we can also
51:42 - separate these numbers using a space and
51:44 - the program will still work take a look
51:46 - so one more time
51:48 - 10
51:49 - space it doesn't matter one or more
51:51 - spaces
51:52 - we add the second number
51:54 - and we get the same result okay
51:56 - now similar to c out here we can chain
51:59 - these statements together
52:01 - so we can get rid of the second
52:02 - statement and chain the stream
52:05 - extraction operator to read the second
52:08 - value so look
52:10 - we start from the console
52:12 - we read something and put it in x then
52:14 - we read something else and put it in y
52:17 - it's exactly like before but our code is
52:19 - shorter
52:20 - so this is how we can read input from
52:22 - the console now as your exercise i want
52:24 - you to write a program for converting
52:26 - temperatures from fahrenheit to celsius
52:29 - so when you run your program the program
52:32 - should ask the user to enter a
52:33 - temperature in fahrenheit and then it
52:35 - should convert it to celsius and print
52:37 - it on a terminal so pause the video and
52:39 - spend a few minutes on this then come
52:41 - back see my solution
52:46 - all right here's the solution it's
52:47 - pretty easy first we use c out to print
52:50 - a label like
52:52 - fahrenheit
52:54 - then we declare a variable for storing
52:57 - the temperature in fahrenheit fahrenheit
53:00 - next using c in we read that value and
53:03 - put it in this variable
53:05 - then
53:06 - we declare a variable of type double
53:08 - called celsius the reason i'm using a
53:11 - double here is because the conversion
53:13 - might result in a floating point number
53:15 - so here's the formula fahrenheit minus
53:19 - 32
53:20 - we wrap this in parenthesis and then
53:23 - divide it by 1.8
53:26 - now finally using c out we print the
53:28 - temperature in celsius
53:31 - now let's test our program
53:33 - so
53:34 - 90 in fahrenheit is equivalent to
53:36 - 32.2 in celsius
53:41 - [Music]
53:46 - so you have seen that the standard
53:48 - library gives us the capability to read
53:50 - from or write to the console now in this
53:53 - lesson we're going to look at a
53:54 - different part of the standard library
53:56 - that gives us several useful
53:58 - mathematical functions
54:00 - so on the top
54:01 - we're going to use the include directive
54:03 - one more time to include a file called c
54:06 - math
54:07 - this file declares a bunch of useful
54:09 - mathematical functions now if you're
54:11 - curious what these functions are just go
54:13 - to google
54:14 - and search for c math reference there
54:17 - are many different websites that give
54:18 - you a c plus plus reference
54:21 - one of them is cplusplus.com
54:23 - the other
54:24 - is
54:25 - cppreference.com and so on
54:27 - so as an example let's look at this page
54:31 - so over here you can see all the
54:32 - functions declared in the cmat library
54:36 - in this lesson we're going to look at a
54:38 - couple of them one of them is seal which
54:40 - rounds up a value the other is floor
54:42 - which rounds down a value now if you
54:44 - click on any of these functions
54:46 - you can learn more about it
54:48 - so on the top you can see different
54:51 - versions of c and c plus plus so c90 and
54:54 - c99 represent the old c language
54:58 - c plus bus 98 is one of the early
55:00 - versions of c plus plus that came in
55:02 - year 1998
55:05 - then we have c plus 11 that was released
55:07 - in year 2011. so you can see how this
55:10 - function has evolved over
55:13 - different versions of c or c plus now
55:16 - don't get hung up too much about these
55:18 - details all i want you to pay attention
55:20 - to here is that this function
55:22 - takes an input of type double and
55:25 - returns
55:26 - another double so let's see this in
55:28 - action
55:29 - so back to the code here in the main
55:32 - function to use the floor function
55:34 - we type floor
55:35 - followed by a pair of parentheses and
55:38 - then we supply the input value which is
55:40 - called an argument
55:42 - so we pass 1.2
55:44 - now we get a double value that we can
55:46 - store in a variable so let's declare a
55:49 - variable
55:50 - of type double
55:51 - called result and set it to the return
55:54 - value of the floor function
55:57 - and then we terminate this statement
55:58 - with a semicolon now over here
56:01 - we say that we are calling the floor
56:03 - function which means we are executing it
56:06 - we are giving it a value and getting a
56:08 - new value
56:09 - now we can print
56:11 - the result just like before
56:13 - and the result is one okay
56:16 - now some functions take multiple values
56:19 - or multiple arguments one of them is the
56:22 - pow or power function
56:24 - so let's take a look
56:26 - pow
56:27 - requires two arguments here we need to
56:29 - pass two values separated by comma so if
56:32 - we say two comma three that means two to
56:35 - the power of three
56:37 - now when we type this c lion adds these
56:40 - labels lcpp underline x and lcpp
56:44 - underline y these are the name of the
56:46 - parameters of this function
56:49 - so clion adds this to make our code a
56:51 - bit more understandable okay
56:53 - now if we run this
56:55 - we get eight okay now as an exercise i
56:59 - want you to write a program that asks
57:01 - the user to enter the radius of a circle
57:04 - and then it should print the area of a
57:06 - circle it's pretty easy you can knock it
57:08 - out in a couple of minutes
57:13 - all right here's my solution
57:15 - first we use c out to print a label
57:19 - enter radius
57:20 - then we declare
57:22 - a double variable called radius
57:24 - next we use c in
57:26 - to read the value the user enters into
57:29 - this variable
57:31 - now we declare another variable called
57:33 - area
57:34 - and here we have to use the old formula
57:36 - pi times r to the power of 2. so we can
57:40 - type
57:40 - the pi number here but earlier i told
57:43 - you that we should avoid magic numbers
57:45 - as much as possible
57:46 - so we're going to store this value pi
57:49 - in a separate variable
57:51 - or even better we can make this a
57:53 - constant okay
57:55 - now we can say area equals pi times
57:59 - this is where we use the power function
58:02 - to get radius to the power of two
58:05 - as simple as that now finally we use c
58:07 - out to print the area
58:09 - let's test our program
58:11 - so if we enter
58:13 - 4 the area is 50.24
58:19 - [Music]
58:25 - all right the last thing we're going to
58:26 - cover in this section is comments we use
58:29 - comments to clarify our code and to make
58:31 - it easier to understand as i told you
58:34 - before comments don't get compiled
58:37 - now in c plus plus we have a couple of
58:39 - different ways for writing comments we
58:41 - can start with two forward slashes
58:44 - and whatever we type in front of these
58:45 - slashes will be considered a comment
58:48 - now we can add the slashes above a line
58:51 - or in front of it either way works
58:54 - but as you can see here we have
58:56 - limited space because we're basically
58:58 - bound to what is left here of course we
59:01 - can write a longer comment but then
59:03 - we'll have to constantly scroll to the
59:05 - left and to the right to see what is
59:07 - going on so it's more conventional to
59:09 - write the comment above a line now if
59:12 - you want to have multiple lines again we
59:14 - can start a new line of comment like
59:16 - this okay now in c plus was we have
59:19 - another way for writing a multi-line
59:21 - comment instead of two forward slashes
59:24 - we start with a forward slash and an
59:26 - asterisk and then press enter
59:29 - now c line automatically generates this
59:32 - block of comment these two characters
59:34 - represent the beginning of the block and
59:37 - these two characters represent the end
59:39 - of the comment block
59:41 - what we put in between will be
59:42 - considered a multi-line comment now
59:45 - different teams have different
59:46 - preferences in terms of which style of
59:48 - comments should be used so there is
59:50 - really no right or wrong here just pick
59:52 - one style and stick to it now one thing
59:54 - i want to emphasize about comments is
59:56 - that you should not overuse them because
59:58 - they make your code harder to understand
60:00 - and maintain so you should use comments
60:03 - only to explain whys and how not what
60:07 - let me show you what i mean so here i
60:09 - can write a comment let's say
60:11 - declare a variable and initialize it
60:14 - to 0. well it is obvious that that's
60:17 - what we're doing on the next line so
60:19 - this comment is completely unnecessary
60:22 - and it's making our code a little bit
60:23 - verbose we don't want to sprinkle our
60:25 - code with all these kinds of unnecessary
60:28 - comments
60:29 - instead we should use comments to
60:30 - explain whys and how if you made certain
60:34 - assumptions while writing this code we
60:36 - should comment those assumptions so in
60:38 - the future when we come back we see why
60:40 - we did things in a certain way okay
60:43 - so that's all about comments and that
60:45 - brings us to the end of this section so
60:47 - i will see you in the next section
60:53 - welcome back to the ultimate c plus boss
60:55 - course in this section we're going to
60:57 - explore the fundamental data types in c
61:00 - plus in detail we'll talk about various
61:02 - built-in types as well as their size and
61:04 - limits more specifically we'll explore
61:07 - various types for representing numbers
61:09 - and their differences you will learn how
61:11 - to generate random numbers which is a
61:13 - very useful technique especially for
61:15 - building games you will also learn how
61:17 - to work with boolean values characters
61:19 - and strings as well as arrays which we
61:21 - use for storing a list of values so by
61:24 - the end of this section you will have a
61:26 - deep understanding of these fundamental
61:28 - data types and how to use them to write
61:30 - useful programs
61:32 - so now let's jump in and get started
61:36 - [Music]
61:46 - so you have seen that in c plus to
61:49 - declare a variable we need to specify
61:51 - its type
61:52 - that's why we say c plus plus is a
61:54 - statically typed language meaning when
61:56 - declaring a variable we need to specify
61:58 - its type and this type cannot change
62:01 - throughout the lifetime of our program
62:03 - other examples of statically typed
62:05 - languages are c sharp java typescript
62:08 - and so on in contrast to statically
62:11 - typed languages we have dynamically
62:12 - typed languages like python javascript
62:15 - and ruby in these languages we don't
62:18 - have to give our variables a particular
62:20 - type the type will be determined based
62:23 - on the value that we assign to these
62:24 - variables and that type can change
62:27 - throughout the lifetime of our program
62:29 - okay
62:30 - so that is the difference between
62:31 - statically and dynamically typed
62:33 - languages now in c plus plus we have a
62:36 - bunch of different built-in data types
62:38 - so far you have only seen int and double
62:41 - but we have more built-in types that
62:42 - we're going to cover in this section in
62:44 - this lesson i'm going to give you a
62:46 - basic overview of these types but as we
62:49 - go through this section you'll become
62:51 - more familiar with these types
62:53 - so for storing whole numbers we have int
62:56 - which takes four bytes of memory on most
62:58 - systems this is not a hard and fast rule
63:01 - depending on the implementation the
63:02 - number of bytes taken by an integer can
63:05 - vary from one system to another but for
63:07 - the most part you can assume that an
63:09 - integer takes four bytes of memory in
63:11 - four bytes we can store numbers from -2
63:14 - billion to plus 2 billion now if you
63:17 - want to store a smaller number we don't
63:19 - need to waste 4 bytes of memory so we
63:21 - can use the short type which takes 2
63:24 - bytes of memory and in 2 bytes we can
63:26 - store the values from minus 32 000 to
63:29 - plus 32 000. now for storing larger
63:32 - numbers we have long which is often the
63:35 - same as int on most systems and long
63:38 - long which takes eight bytes of memory
63:40 - and allows us to store really large
63:42 - numbers speaking of experience most of
63:45 - the time you'll be using short or in
63:48 - types unless you're working on programs
63:49 - that involve complicated mathematical
63:52 - computations now for numbers with
63:54 - decimal places which we call floating
63:56 - point numbers we have double which you
63:59 - have seen so far the double type takes 8
64:02 - bytes of memory now we also have float
64:04 - which takes 4 bytes of memory and long
64:07 - double which takes 8 bytes of memory as
64:09 - well again most of the time you will be
64:12 - using double especially for storing
64:14 - monetary values because the flow type
64:16 - can result in loss of accuracy now we
64:19 - also have the bool type for storing true
64:22 - and false values they're often used to
64:24 - represent a condition like is this
64:26 - person eligible for a loan or not we
64:29 - also have another built-in type called
64:31 - char for storing single characters
64:34 - so that was a basic overview of the
64:36 - fundamental data types in c plus plus
64:38 - again as we go through this section
64:41 - we'll explore these types in more detail
64:45 - [Music]
64:51 - now that you're familiar with the basic
64:53 - built-in types in c plus let's look at a
64:56 - few different ways to declare and
64:57 - initialize variables
64:59 - so i'm going to start by declaring a
65:01 - double called price
65:03 - and we're going to set this to 99.99
65:06 - nothing new so far but what if we want
65:09 - to declare a float well we can declare a
65:11 - float
65:12 - called interest rate
65:14 - and we set it to 3.67
65:17 - and here at the end we type the letter f
65:19 - that is short for float this is really
65:22 - important because if you don't type this
65:24 - by default the compiler will treat this
65:26 - number as a double and then it will try
65:29 - to store a double inside a float
65:31 - variable and this can potentially cause
65:33 - data loss so when working with float
65:35 - values always type
65:37 - an f at the end it can be uppercase or
65:40 - lowercase it doesn't really matter now
65:42 - there is another reason we should type
65:43 - this letter we'll come back to this
65:45 - shortly
65:46 - now let's declare a long so long file
65:49 - size
65:50 - we can set this to 90 000. now similar
65:54 - to the flow type here we should add the
65:56 - l suffix because if we don't type this
65:59 - the compiler will treat this number as
66:01 - an integer so to force the compiler to
66:04 - treat this as a long we type either an
66:06 - upper case or a lowercase l now the
66:09 - lowercase l can be confused with the
66:11 - number one so the best practice is to
66:13 - use
66:14 - a capital l okay
66:16 - now let's declare a variable for storing
66:18 - a character so we say char letter
66:22 - and here we use single quotes to
66:24 - represent a character like a okay
66:28 - and finally let's look at a boolean
66:31 - we're going to call this is valid
66:33 - and we can set it to true or
66:35 - false these are the acceptable values
66:37 - for booleans now with any of these types
66:40 - we can also use the other keyword to let
66:43 - the compiler infer the type of our
66:45 - variables for example if we change bool
66:49 - to auto
66:50 - and then hover our mouse over is valid
66:54 - look the compiler knows that is valid is
66:57 - of type bull
66:59 - similarly if we change char to auto
67:02 - and look at the type of this variable we
67:03 - can see
67:05 - it's of type char
67:06 - now here's the interesting part
67:08 - if we change long to auto
67:11 - we can see
67:12 - that file size is of type long because
67:15 - we added the letter l at the end if we
67:17 - don't type this and use the auto keyword
67:20 - look
67:21 - file size is treated as an integer so
67:23 - that is why we need to add this suffix
67:26 - similarly for float
67:28 - if we use auto
67:30 - now we can see interest rate is a float
67:33 - but if you remove the suffix it will be
67:35 - treated as a
67:37 - double right
67:39 - so this is the benefit of using the auto
67:41 - keyword it kind of makes our code
67:43 - shorter and more consistent you don't
67:45 - have to use it if you don't like it but
67:47 - the auto keyword is particularly useful
67:49 - when working with more complex types
67:51 - we'll look at that in the future
67:53 - yeah there is one more way to initialize
67:54 - variables in modern c plus plus that you
67:57 - need to know and that's called brace
67:58 - initialization
68:00 - so let me delete all this code
68:02 - and declare an integer called number
68:05 - and set it to 1.2
68:07 - now here we get a warning because we
68:09 - have a yellow underline but our code
68:12 - still gets compiled so if we print
68:14 - number
68:16 - and run our program
68:17 - we see the fraction part is gone and we
68:19 - see one okay
68:21 - now there's another way to initialize
68:23 - this variable and prevent this kind of
68:25 - scenario where we assign the wrong value
68:27 - to a variable
68:29 - so instead of the assignment operator we
68:31 - use
68:32 - braces so we put this value inside
68:36 - braces now look we have a compilation
68:38 - error because we have a red underline so
68:40 - our code is not going to get compiled
68:42 - the brace initializer stops us from
68:44 - making such mistakes now there is
68:47 - another benefit to using brace
68:48 - initialization
68:50 - if we don't supply a value here
68:52 - our number variable will be initialized
68:55 - to zero so if we run this program
68:58 - we see number is zero
69:00 - however if we remove
69:02 - the empty initializer here
69:05 - and run our program again
69:07 - you can see we get this random value
69:08 - which we say it's garbage and every time
69:11 - we run our program
69:12 - we get a different value so this makes
69:15 - our programs unpredictable
69:17 - so we should either initialize our
69:19 - variables using the assignment operator
69:21 - to a proper value or we should use an
69:24 - empty brace initializer
69:30 - [Music]
69:35 - in math and programming we have
69:37 - different number systems that serve
69:39 - different purposes in our day-to-day
69:41 - life we use decimal or base 10 numbers
69:44 - which can contain digits 0 to 9 but
69:47 - computers don't understand these digits
69:49 - they only understand zeros and ones
69:51 - that's why we have the binary or base
69:53 - two system so a number in this system
69:56 - can only contain zeros and ones now we
69:59 - can take any number and represent it as
70:01 - a binary
70:02 - for example the number 255 in the
70:04 - decimal system is equivalent to eight
70:07 - ones in the binary system it's a very
70:10 - long number that's why we use the
70:11 - hexadecimal or base 16 numbers to
70:14 - shorten binary numbers a hexadecimal
70:17 - number can contain the digits 0 to 9 as
70:20 - well as the letters a to f as you can
70:22 - see hexadecimal numbers are more compact
70:26 - now in programming we use hexadecimal
70:28 - numbers to represent colors you probably
70:30 - heard of rgb or red green blue colors
70:34 - using only six digits of a hexadecimal
70:37 - number we can represent any color that's
70:39 - very useful we don't have to deal with
70:41 - really large decimal or binary numbers
70:44 - now let's see how we can represent these
70:46 - numbers in c plus
70:48 - so i'm going to declare an integer
70:50 - called number
70:51 - and set it to 255. now if you want to
70:54 - represent this number in the binary
70:56 - system
70:57 - we type 0b as a prefix and then we type
71:00 - a binary number i'm going to type 8 once
71:03 - so 1 2 3 4 5 6 7 8.
71:07 - now let's print the number
71:10 - take a look we get 255 okay now we can
71:13 - represent the same number in the
71:15 - hexadecimal system so instead of 0b we
71:18 - type 0x and then we type a hexodecimal
71:22 - number in this case double f which can
71:24 - be uppercase or lorikeez it doesn't
71:27 - really matter let's run our program one
71:29 - more time
71:30 - look we get the same number beautiful
71:33 - now most of the time i would say 99 of
71:36 - the time we use decimal numbers but
71:38 - depending on the kind of application
71:40 - you're building in some situations you
71:42 - may want to represent a number as binary
71:44 - or hexadecimal okay now irrespective of
71:47 - how we represent numbers our numbers can
71:49 - be positive or negative if we're dealing
71:52 - with a positive number we don't have to
71:54 - type a positive sign it's assumed by
71:56 - default but for negative numbers
71:58 - obviously we have to type a minus
72:01 - now in c plus we have a special keyword
72:04 - called unsigned
72:06 - if we apply this to a numerical type
72:08 - that type cannot accept negative values
72:11 - now on the surface you might think this
72:13 - is a good value but it can actually
72:14 - cause programming problems that are hard
72:17 - to spot for example let's print this
72:19 - number on the console and see what we
72:21 - get
72:23 - so we get this really large positive
72:25 - number
72:26 - as another example we might initialize
72:29 - this number to zero and then somewhere
72:31 - else in our program we might decrement
72:34 - this number
72:35 - now if we print this
72:37 - instead of negative one we're going to
72:38 - get this really large positive number so
72:41 - my suggestion is to stay away from the
72:43 - unsigned keyword just because two plus
72:46 - plus has this feature doesn't mean you
72:47 - should use it that's why earlier in the
72:49 - course
72:50 - i told you that you don't need to learn
72:52 - all of c plus all of its features to
72:54 - build useful and substantial programs
72:57 - so stay away from the unsigned keyword
73:03 - [Music]
73:08 - when working with numbers a concept you
73:10 - need to understand is narrowing and that
73:13 - happens when you initialize a variable
73:15 - of a smaller type using a larger type
73:17 - here is an example let's declare an
73:19 - integer called number and set it to 1
73:22 - million
73:23 - now to make this code more readable we
73:26 - can separate these digits using a single
73:29 - quote that's better
73:30 - now let's declare a short called another
73:33 - and set it to number
73:35 - now we immediately get this warning
73:37 - saying
73:38 - narrowing conversion from end to sign
73:41 - type short is implementation defined i
73:44 - know it's a mouthful basically the
73:46 - warning is saying that because we're
73:48 - converting an integer to a short this
73:50 - conversion is a narrowing conversion so
73:53 - it's going to result in narrowing down
73:55 - our number which is one million so now
73:58 - if we print
74:00 - another
74:01 - and run our program
74:03 - with this 16 000 this is the result of
74:06 - narrowing conversion now obviously if we
74:08 - use a brace initializer here
74:12 - we could prevent this our code wouldn't
74:14 - even get compiled so this is another
74:16 - benefit of the brace initializer okay
74:18 - now
74:19 - what if we do the opposite what if we
74:21 - declare this number as short
74:24 - and put it in
74:26 - an integer now in this case we have a
74:28 - warning because this number is too large
74:31 - to fit
74:32 - in a short variable because as i told
74:34 - you earlier using the short data type we
74:37 - can store numbers from minus 32 000 to
74:40 - plus 32 000. so let's change this to
74:44 - let's just say 100
74:47 - and then put it in an integer now we can
74:50 - use the brace initializer or the
74:52 - assignment operator it doesn't really
74:54 - matter
74:54 - let's run our program
74:57 - we get 100 so the opposite is not an
75:00 - issue so the short type takes two bytes
75:03 - the integer takes four bytes if you
75:05 - store a smaller number and the larger
75:08 - memory space we are not going to
75:09 - encounter data loss
75:11 - so the additional bytes in memory are
75:13 - going to be filled with zero
75:17 - [Music]
75:22 - all right now let's see how we can
75:24 - generate random numbers in c plus this
75:27 - is very useful we can use random numbers
75:29 - in creating games that involve rolling a
75:32 - dice card or other elements so we have a
75:35 - function called rand that is defined in
75:38 - a library called cstdlib
75:40 - so on the top we need to include
75:43 - another file from the standard library
75:45 - called c
75:46 - stdlib okay
75:48 - now we call this function
75:51 - and get a random integer so let's store
75:53 - it here
75:54 - and then print it
75:56 - on the terminal
75:57 - now let's run this program
76:00 - so this is the number i get on your
76:02 - machine you're probably going to get
76:03 - something different
76:04 - now here's the thing every time we run
76:06 - this program
76:08 - we get the exact same number
76:11 - the reason for this is that these
76:12 - numbers are not really random they're
76:14 - basically based on some kind of
76:16 - mathematical formula so to get a random
76:19 - number we need to see the random number
76:21 - generator with a different value let me
76:23 - show you what i mean
76:24 - so
76:25 - we have another function
76:27 - called srand that is short for seed rand
76:32 - if you see the random number generator
76:34 - with the value of five
76:36 - now
76:37 - we get
76:38 - a different random value but again every
76:41 - time we run this program we get the
76:44 - exact same random number if we see this
76:47 - with a different number
76:50 - now a random number is going to be
76:52 - different
76:52 - so how can we get truly random numbers
76:55 - well we have a function for getting the
76:58 - current time in terms of the number of
77:00 - seconds elapsed from january 1970. if we
77:04 - use that function every time we run our
77:06 - program we're gonna get a different
77:08 - number let me show you
77:12 - so first on the top we need to include
77:15 - another file called see time
77:17 - in this file we have a function
77:20 - called
77:21 - time
77:22 - that returns the current time
77:24 - in terms of number of seconds elapsed
77:26 - from january 1st
77:28 - 1970. now to call this function we have
77:31 - to give it a special argument called
77:34 - null pointer or null ptr
77:36 - we'll talk about this later in the
77:38 - course if this is too confusing for you
77:40 - just use the number zero
77:42 - but c lion is going to give us a warning
77:45 - don't worry about that it's just
77:46 - suggesting to use null pointer
77:48 - now this returns
77:50 - a long value which is elapsed seconds
77:54 - so to see this in action
77:56 - instead of printing a random number
77:58 - let's print
77:59 - the elapsed seconds now if you're on our
78:02 - program
78:04 - this is the number of seconds elapsed
78:06 - from january 1st 1970. now every time we
78:09 - run our program we get
78:11 - a different value right so we can use
78:14 - this to see the random number generator
78:17 - so
78:18 - instead of hard coding the number six we
78:20 - can use elapsed seconds
78:23 - now we generate a random number and
78:26 - print it on the terminal take a look
78:30 - so every time we're on our program we
78:33 - get a different random number great but
78:36 - this random number is way too large what
78:38 - if we want to specify an upper limit
78:40 - well
78:42 - over here
78:43 - where we generate the random number
78:46 - we can use the modulus operator
78:49 - and specify the upper limit so if we
78:51 - type 10 that's gonna return the
78:54 - remainder of division by ten so that can
78:56 - only be numbers zero to nine right take
79:00 - a look
79:01 - so now we have two if we're on our
79:03 - program again we get nine
79:05 - three and so on beautiful
79:07 - now we have a warning here under rand
79:10 - the warning is saying the rand function
79:12 - has limited randomness use c plus 11
79:16 - random library instead so in c plus boss
79:18 - 11 we have a different way for
79:20 - generating random numbers but that's
79:22 - more complicated it's not suitable for
79:24 - beginners so for now this is a good way
79:26 - for you to learn how to generate random
79:29 - numbers now we can make this code a
79:31 - little bit more concise in this case we
79:33 - don't really need this variable elapsed
79:35 - seconds because anyone familiar with c
79:38 - plus knows that time of zero or time of
79:42 - null pointer returns the current time in
79:45 - terms of number of elapsed seconds so we
79:47 - can grab this function
79:49 - and pass it as an argument to the srand
79:52 - function and now we don't need this
79:54 - extra variable
79:56 - so this function will return a value and
79:59 - that value is going to be passed to this
80:01 - function as an argument okay so this is
80:04 - how we can generate random numbers in c
80:07 - plus
80:08 - now as an exercise i want you to write a
80:10 - program to roll a dice so every time we
80:12 - run this program we should get two
80:14 - random values between one to six now to
80:17 - limit the range of the random number use
80:19 - this formula on the screen you will see
80:21 - my solution next
80:27 - all right let's look at my solution so
80:29 - on the top we are including three files
80:32 - iostream csdlib and c time
80:35 - now in the main function we are seating
80:38 - the random number generator with the
80:39 - current time
80:41 - now to generate a random value we're
80:43 - going to use the formula i showed you
80:45 - earlier
80:46 - so we call the rand function
80:48 - and then get the remainder of division
80:50 - by
80:51 - this expression
80:52 - our maximum value is six our minimum
80:55 - value is one and then we need to add one
80:58 - to it now someone else looking at this
81:00 - code will probably have no idea
81:02 - what these numbers represent that's why
81:05 - i told you that you should avoid magic
81:06 - numbers so this is a great opportunity
81:09 - to use a constant so we define two
81:12 - constants constant integer mean value
81:16 - of one
81:17 - and constant integer max value of six
81:21 - now here we can use the short type
81:23 - because we don't really need to store
81:25 - large numbers here so it's better to use
81:27 - the short type
81:28 - to save system resources the memory so
81:30 - we have two constants now
81:33 - instead of hard coding these magic
81:35 - numbers we use our constants
81:37 - and this makes our code
81:39 - more readable and easier to understand
81:41 - okay
81:42 - so using the modulus operator we get the
81:45 - remainder of division by this expression
81:48 - now we need to wrap the whole thing in
81:50 - parenthesis and add the minimum value to
81:53 - it
81:54 - this will give us a random number
81:55 - between one to six so we can store it
81:59 - in a variable called die one or first
82:02 - whatever you prefer
82:04 - then we need to duplicate this
82:06 - and create a second variable called
82:08 - second
82:10 - and finally
82:12 - we can print
82:14 - everything using c out so first here we
82:16 - chain the stream insertion operator we
82:19 - can add a comma and the second variable
82:23 - now let's run our program
82:26 - so we get three and four one more time
82:28 - five and six
82:29 - six and six beautiful
82:33 - we have reached the end of this tutorial
82:35 - again as i said this tutorial is the
82:37 - first hour of my complete c plus series
82:40 - so if you want to learn more use the
82:42 - link below this video to enroll and
82:44 - please support me by liking and sharing
82:46 - this video thank you so much and have a
82:49 - fantastic day
82:51 - [Music]
82:55 - you